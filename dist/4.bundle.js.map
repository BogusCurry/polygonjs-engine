{"version":3,"sources":["webpack://POLY/./node_modules/three/src/loaders/FileLoader.js","webpack://POLY/./node_modules/three/src/textures/CompressedTexture.js","webpack://POLY/./modules/three/examples/jsm/loaders/BasisTextureLoader.js"],"names":["loading","FileLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","undefined","path","resolveURL","scope","cached","get","itemStart","setTimeout","itemEnd","dataUriRegexResult","match","mimeType","isBase64","data","decodeURIComponent","atob","response","responseType","toLowerCase","view","Uint8Array","length","i","charCodeAt","Blob","buffer","type","parser","DOMParser","parseFromString","JSON","parse","error","itemError","push","request","XMLHttpRequest","header","open","addEventListener","event","callbacks","status","console","warn","add","il","callback","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","value","setWithCredentials","setMimeType","CompressedTexture","mipmaps","width","height","format","mapping","wrapS","wrapT","magFilter","minFilter","anisotropy","encoding","Texture","image","flipY","generateMipmaps","isCompressedTexture","BasisTextureLoader","Loader","transcoderPath","transcoderBinary","transcoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","workerConfig","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","setTranscoderPath","setWorkerLimit","detectSupport","renderer","config","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","Error","cTFETC1","loader","_createTexture","then","catch","worker","taskID","taskCost","byteLength","texturePending","_allocateWorker","_worker","Promise","resolve","reject","_callbacks","postMessage","id","message","texture","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","needsUpdate","finally","_taskLoad","_initTranscoder","jsLoader","setPath","jsContent","binaryLoader","binaryContent","all","fn","BasisWorker","toString","body","substring","indexOf","lastIndexOf","join","URL","createObjectURL","Worker","onmessage","e","sort","a","b","dispose","terminate","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","wasmBinary","BasisModule","onRuntimeInitialized","BASIS","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","delete","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","buffers","self"],"mappings":"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","file":"4.bundle.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Cache } from './Cache.js';\nimport { Loader } from './Loader.js';\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: FileLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { FileLoader };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Texture } from './Texture.js';\n\nfunction CompressedTexture( mipmaps, width, height, format, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, encoding ) {\n\n\tTexture.call( this, null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, encoding );\n\n\tthis.image = { width: width, height: height };\n\tthis.mipmaps = mipmaps;\n\n\t// no flipping for cube textures\n\t// (also flipping doesn't work for compressed textures )\n\n\tthis.flipY = false;\n\n\t// can't generate mipmaps for compressed textures\n\t// mips must be embedded in DDS files\n\n\tthis.generateMipmaps = false;\n\n}\n\nCompressedTexture.prototype = Object.create( Texture.prototype );\nCompressedTexture.prototype.constructor = CompressedTexture;\n\nCompressedTexture.prototype.isCompressedTexture = true;\n\n\nexport { CompressedTexture };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_BPTC_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tbptcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.bptcSupported = !! renderer.extensions.get( 'EXT_texture_compression_bptc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.bptcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n"],"sourceRoot":""}