{"version":3,"sources":["webpack://POLY/./node_modules/three/src/loaders/DataTextureLoader.js","webpack://POLY/./modules/three/examples/jsm/libs/inflate.module.min.js","webpack://POLY/./modules/three/examples/jsm/loaders/EXRLoader.js"],"names":["DataTextureLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","texture","loader","setResponseType","setPath","path","buffer","texData","parse","undefined","image","data","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","format","type","mipmaps","mipmapCount","needsUpdate","mod","l","aa","r","c","d","e","a","split","b","execScript","length","shift","t","Uint8Array","Uint16Array","Uint32Array","DataView","v","f","g","h","k","m","n","p","s","x","Number","POSITIVE_INFINITY","Array","w","input","i","y","index","bufferSize","bufferType","resize","A","z","j","Error","B","C","set","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","slice","P","fa","G","H","I","J","K","L","da","ea","N","O","R","ga","Q","W","verify","ha","method","o","push","charCodeAt","Y","Z","$","ia","X","ADAPTIVE","BLOCK","keys","Zlib","EXRLoader","logBase","Math","pow","tmpDataView","ArrayBuffer","frexp","value","setFloat64","bits","getUint32","exponent","mantissa","steps","min","ceil","abs","result","floor","ldexp","getBitsReturn","lc","getBits","nBits","uInt8Array","inOffset","parseUint8Array","hufTableBuffer","hufUnpackEncTable","inDataView","ni","im","iM","hcode","zerun","nc","hufCanonicalCodeTable","hufLength","code","hufCode","getCharReturn","getChar","getCodeReturn","getCode","po","rlc","outBuffer","outBufferOffset","outBufferEndOffset","cs","Int16","ref","UInt16","wdec14Return","wdec14","ls","hs","ai","as","bs","wav2Decode","nx","ox","ny","oy","p2","i00","i01","i10","i11","py","ey","oy1","oy2","ox1","ox2","px","ex","p01","p11","p10","hufUncompress","nCompressed","nRaw","initialInOffset","parseUint32","freq","hdec","len","lit","hufClearDecTable","hdecod","pl","plOffset","hufBuildDecTable","encodingTable","decodingTable","no","outOffset","inOffsetEnd","trunc","HUF_DECSIZE","hufDecode","predictor","source","interleaveScalar","out","t1","t2","stop","decodeRunLength","size","byteLength","reader","getInt8","count","getUint8","unRleAC","currAcComp","acBuffer","halfZigBlock","acValue","dctComp","unZigZag","src","dst","decodeFloat16","dctInverse","cos","alpha","beta","theta","gamma","row","rowPtr","column","csc709Inverse","cb","cr","convertToHalf","idx","encodeFloat16","toLinear","float","sign","uncompressZIP","info","compressed","array","offset","console","error","inflate","Inflate","rawBuffer","decompress","tmpBuffer","uncompressDWA","viewer","lines","EXRHeader","channels","dwaHeader","version","parseInt64","unknownUncompressedSize","unknownCompressedSize","acCompressedSize","dcCompressedSize","rleCompressedSize","rleUncompressedSize","rleRawSize","totalAcUncompressedCount","totalDcUncompressedCount","acCompression","compression","channelRules","ruleSize","parseUint16","name","parseNullTerminatedString","parseUint8","Int8Array","channelData","cd","channel","decoded","pixelType","pLinear","cscSet","rule","zlibInfo","dcBuffer","rleBuffer","outBufferEnd","rowOffsets","chan","rowPtrs","dataView","numFullBlocksX","numBlocksX","numBlocksY","leftoverX","leftoverY","currDcComp","dctData","rowBlock","comp","Float32Array","blocky","maxY","maxX","blockx","fill","setUint16","halfRow","getUint16","setFloat32","lossyDctDecode","rleOffset","rowOffsetBytes","byte","uintBuffer","endOffset","stringValue","TextDecoder","decode","parseUlong","uLong","parseInt32","Int32","getInt32","Uint32","Uint8","int","getBigInt64","parseFloat32","getFloat32","binary","fraction","NaN","Infinity","val","Uint16","parseValue","parseFixedLengthString","startOffset","xSampling","ySampling","parseChlist","redX","redY","greenX","greenY","blueX","blueY","whiteX","whiteY","parseChromaticities","parseCompression","xMin","yMin","xMax","yMax","parseBox2i","parseLineOrder","parseV2f","parseRational","parseTimecode","bufferDataView","keepReading","attributeName","attributeValue","uncompress","scanlineBlockSize","size_t","getValue","dataWindowHeight","dataWindow","tmpBufSize","bitmap","pizChannelData","minNonZero","maxNonZero","lut","reverseLutFromBitmap","start","nData","applyLut","tmpOffset","cp","end","numBlocks","byteArray","line","channelOffsets","compressionInfo","scanlineBlockIdx","line_y","true_y","channelID","cOff","RGBEArray","red","green","blue","res","header","setDataType","encoding","generateMipmaps","flipY"],"mappings":"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","file":"3.bundle.js","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n\nexport { DataTextureLoader };\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBAFormat} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Richard M. / https://github.com/richardmonette\n * @author ScieCode / http://github.com/sciecode\n *\n * OpenEXR loader currently supports uncompressed, ZIP(S), RLE, PIZ and DWA/B compression.\n * Supports reading as UnsignedByte, HalfFloat and Float type data texture.\n *\n * Referred to the original Industrial Light & Magic OpenEXR implementation and the TinyEXR / Syoyo Fujita\n * implementation, so I have preserved their copyright notices.\n */\n\nimport { Zlib } from \"../libs/inflate.module.min.js\";\n\n// /*\n// Copyright (c) 2014 - 2017, Syoyo Fujita\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//     * Redistributions of source code must retain the above copyright\n//       notice, this list of conditions and the following disclaimer.\n//     * Redistributions in binary form must reproduce the above copyright\n//       notice, this list of conditions and the following disclaimer in the\n//       documentation and/or other materials provided with the distribution.\n//     * Neither the name of the Syoyo Fujita nor the\n//       names of its contributors may be used to endorse or promote products\n//       derived from this software without specific prior written permission.\n\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n// WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\n// DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n// (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n// ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// */\n\n// // TinyEXR contains some OpenEXR code, which is licensed under ------------\n\n// ///////////////////////////////////////////////////////////////////////////\n// //\n// // Copyright (c) 2002, Industrial Light & Magic, a division of Lucas\n// // Digital Ltd. LLC\n// //\n// // All rights reserved.\n// //\n// // Redistribution and use in source and binary forms, with or without\n// // modification, are permitted provided that the following conditions are\n// // met:\n// // *       Redistributions of source code must retain the above copyright\n// // notice, this list of conditions and the following disclaimer.\n// // *       Redistributions in binary form must reproduce the above\n// // copyright notice, this list of conditions and the following disclaimer\n// // in the documentation and/or other materials provided with the\n// // distribution.\n// // *       Neither the name of Industrial Light & Magic nor the names of\n// // its contributors may be used to endorse or promote products derived\n// // from this software without specific prior written permission.\n// //\n// // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n// // \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n// // LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n// // A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n// // OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n// // SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n// // LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n// // THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n// // (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// // OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n// //\n// ///////////////////////////////////////////////////////////////////////////\n\n// // End of OpenEXR license -------------------------------------------------\n\nvar EXRLoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = FloatType;\n\n};\n\nEXRLoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: EXRLoader,\n\n\tparse: function ( buffer ) {\n\n\t\tconst USHORT_RANGE = ( 1 << 16 );\n\t\tconst BITMAP_SIZE = ( USHORT_RANGE >> 3 );\n\n\t\tconst HUF_ENCBITS = 16; // literal (value) bit length\n\t\tconst HUF_DECBITS = 14; // decoding bit size (>= 8)\n\n\t\tconst HUF_ENCSIZE = ( 1 << HUF_ENCBITS ) + 1; // encoding table size\n\t\tconst HUF_DECSIZE = 1 << HUF_DECBITS; // decoding table size\n\t\tconst HUF_DECMASK = HUF_DECSIZE - 1;\n\n\t\tconst SHORT_ZEROCODE_RUN = 59;\n\t\tconst LONG_ZEROCODE_RUN = 63;\n\t\tconst SHORTEST_LONG_RUN = 2 + LONG_ZEROCODE_RUN - SHORT_ZEROCODE_RUN;\n\n\t\tconst ULONG_SIZE = 8;\n\t\tconst FLOAT32_SIZE = 4;\n\t\tconst INT32_SIZE = 4;\n\t\tconst INT16_SIZE = 2;\n\t\tconst INT8_SIZE = 1;\n\n\t\tconst STATIC_HUFFMAN = 0;\n\t\tconst DEFLATE = 1;\n\n\t\tconst UNKNOWN = 0;\n\t\tconst LOSSY_DCT = 1;\n\t\tconst RLE = 2;\n\n\t\tconst logBase = Math.pow( 2.7182818, 2.2 );\n\n\t\tvar tmpDataView = new DataView( new ArrayBuffer( 8 ) );\n\n\t\tfunction frexp( value ) {\n\n\t\t\tif ( value === 0 ) return [ value, 0 ];\n\n\t\t\ttmpDataView.setFloat64( 0, value );\n\n\t\t\tvar bits = ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF;\n\t\t\tif ( bits === 0 ) { // denormal\n\n\t\t\t\ttmpDataView.setFloat64( 0, value * Math.pow( 2, 64 ) ); // exp + 64\n\t\t\t\tbits = ( ( tmpDataView.getUint32( 0 ) >>> 20 ) & 0x7FF ) - 64;\n\n\t\t\t}\n\n\t\t\tvar exponent = bits - 1022;\n\t\t\tvar mantissa = ldexp( value, - exponent );\n\n\t\t\treturn [ mantissa, exponent ];\n\n\t\t}\n\n\t\tfunction ldexp( mantissa, exponent ) {\n\n\t\t\tvar steps = Math.min( 3, Math.ceil( Math.abs( exponent ) / 1023 ) );\n\t\t\tvar result = mantissa;\n\n\t\t\tfor ( var i = 0; i < steps; i ++ )\n\t\t\t\tresult *= Math.pow( 2, Math.floor( ( exponent + i ) / steps ) );\n\n\t\t\treturn result;\n\n\t\t}\n\n\t\tfunction reverseLutFromBitmap( bitmap, lut ) {\n\n\t\t\tvar k = 0;\n\n\t\t\tfor ( var i = 0; i < USHORT_RANGE; ++ i ) {\n\n\t\t\t\tif ( ( i == 0 ) || ( bitmap[ i >> 3 ] & ( 1 << ( i & 7 ) ) ) ) {\n\n\t\t\t\t\tlut[ k ++ ] = i;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar n = k - 1;\n\n\t\t\twhile ( k < USHORT_RANGE ) lut[ k ++ ] = 0;\n\n\t\t\treturn n;\n\n\t\t}\n\n\t\tfunction hufClearDecTable( hdec ) {\n\n\t\t\tfor ( var i = 0; i < HUF_DECSIZE; i ++ ) {\n\n\t\t\t\thdec[ i ] = {};\n\t\t\t\thdec[ i ].len = 0;\n\t\t\t\thdec[ i ].lit = 0;\n\t\t\t\thdec[ i ].p = null;\n\n\t\t\t}\n\n\t\t}\n\n\t\tconst getBitsReturn = { l: 0, c: 0, lc: 0 };\n\n\t\tfunction getBits( nBits, c, lc, uInt8Array, inOffset ) {\n\n\t\t\twhile ( lc < nBits ) {\n\n\t\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\t\tlc += 8;\n\n\t\t\t}\n\n\t\t\tlc -= nBits;\n\n\t\t\tgetBitsReturn.l = ( c >> lc ) & ( ( 1 << nBits ) - 1 );\n\t\t\tgetBitsReturn.c = c;\n\t\t\tgetBitsReturn.lc = lc;\n\n\t\t}\n\n\t\tconst hufTableBuffer = new Array( 59 );\n\n\t\tfunction hufCanonicalCodeTable( hcode ) {\n\n\t\t\tfor ( var i = 0; i <= 58; ++ i ) hufTableBuffer[ i ] = 0;\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) hufTableBuffer[ hcode[ i ] ] += 1;\n\n\t\t\tvar c = 0;\n\n\t\t\tfor ( var i = 58; i > 0; -- i ) {\n\n\t\t\t\tvar nc = ( ( c + hufTableBuffer[ i ] ) >> 1 );\n\t\t\t\thufTableBuffer[ i ] = c;\n\t\t\t\tc = nc;\n\n\t\t\t}\n\n\t\t\tfor ( var i = 0; i < HUF_ENCSIZE; ++ i ) {\n\n\t\t\t\tvar l = hcode[ i ];\n\t\t\t\tif ( l > 0 ) hcode[ i ] = l | ( hufTableBuffer[ l ] ++ << 6 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction hufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, hcode ) {\n\n\t\t\tvar p = inOffset;\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tif ( p.value - inOffset.value > ni ) return false;\n\n\t\t\t\tgetBits( 6, c, lc, uInt8Array, p );\n\n\t\t\t\tvar l = getBitsReturn.l;\n\t\t\t\tc = getBitsReturn.c;\n\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\thcode[ im ] = l;\n\n\t\t\t\tif ( l == LONG_ZEROCODE_RUN ) {\n\n\t\t\t\t\tif ( p.value - inOffset.value > ni ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgetBits( 8, c, lc, uInt8Array, p );\n\n\t\t\t\t\tvar zerun = getBitsReturn.l + SHORTEST_LONG_RUN;\n\t\t\t\t\tc = getBitsReturn.c;\n\t\t\t\t\tlc = getBitsReturn.lc;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t} else if ( l >= SHORT_ZEROCODE_RUN ) {\n\n\t\t\t\t\tvar zerun = l - SHORT_ZEROCODE_RUN + 2;\n\n\t\t\t\t\tif ( im + zerun > iM + 1 ) {\n\n\t\t\t\t\t\tthrow 'Something wrong with hufUnpackEncTable';\n\n\t\t\t\t\t}\n\n\t\t\t\t\twhile ( zerun -- ) hcode[ im ++ ] = 0;\n\n\t\t\t\t\tim --;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\thufCanonicalCodeTable( hcode );\n\n\t\t}\n\n\t\tfunction hufLength( code ) {\n\n\t\t\treturn code & 63;\n\n\t\t}\n\n\t\tfunction hufCode( code ) {\n\n\t\t\treturn code >> 6;\n\n\t\t}\n\n\t\tfunction hufBuildDecTable( hcode, im, iM, hdecod ) {\n\n\t\t\tfor ( ; im <= iM; im ++ ) {\n\n\t\t\t\tvar c = hufCode( hcode[ im ] );\n\t\t\t\tvar l = hufLength( hcode[ im ] );\n\n\t\t\t\tif ( c >> l ) {\n\n\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t}\n\n\t\t\t\tif ( l > HUF_DECBITS ) {\n\n\t\t\t\t\tvar pl = hdecod[ ( c >> ( l - HUF_DECBITS ) ) ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.lit ++;\n\n\t\t\t\t\tif ( pl.p ) {\n\n\t\t\t\t\t\tvar p = pl.p;\n\t\t\t\t\t\tpl.p = new Array( pl.lit );\n\n\t\t\t\t\t\tfor ( var i = 0; i < pl.lit - 1; ++ i ) {\n\n\t\t\t\t\t\t\tpl.p[ i ] = p[ i ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tpl.p = new Array( 1 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tpl.p[ pl.lit - 1 ] = im;\n\n\t\t\t\t} else if ( l ) {\n\n\t\t\t\t\tvar plOffset = 0;\n\n\t\t\t\t\tfor ( var i = 1 << ( HUF_DECBITS - l ); i > 0; i -- ) {\n\n\t\t\t\t\t\tvar pl = hdecod[ ( c << ( HUF_DECBITS - l ) ) + plOffset ];\n\n\t\t\t\t\t\tif ( pl.len || pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'Invalid table entry';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tpl.len = l;\n\t\t\t\t\t\tpl.lit = im;\n\n\t\t\t\t\t\tplOffset ++;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tconst getCharReturn = { c: 0, lc: 0 };\n\n\t\tfunction getChar( c, lc, uInt8Array, inOffset ) {\n\n\t\t\tc = ( c << 8 ) | parseUint8Array( uInt8Array, inOffset );\n\t\t\tlc += 8;\n\n\t\t\tgetCharReturn.c = c;\n\t\t\tgetCharReturn.lc = lc;\n\n\t\t}\n\n\t\tconst getCodeReturn = { c: 0, lc: 0 };\n\n\t\tfunction getCode( po, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outBufferOffset, outBufferEndOffset ) {\n\n\t\t\tif ( po == rlc ) {\n\n\t\t\t\tif ( lc < 8 ) {\n\n\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t}\n\n\t\t\t\tlc -= 8;\n\n\t\t\t\tvar cs = ( c >> lc );\n\t\t\t\tvar cs = new Uint8Array( [ cs ] )[ 0 ];\n\n\t\t\t\tif ( outBufferOffset.value + cs > outBufferEndOffset ) {\n\n\t\t\t\t\treturn false;\n\n\t\t\t\t}\n\n\t\t\t\tvar s = outBuffer[ outBufferOffset.value - 1 ];\n\n\t\t\t\twhile ( cs -- > 0 ) {\n\n\t\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = s;\n\n\t\t\t\t}\n\n\t\t\t} else if ( outBufferOffset.value < outBufferEndOffset ) {\n\n\t\t\t\toutBuffer[ outBufferOffset.value ++ ] = po;\n\n\t\t\t} else {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t\tgetCodeReturn.c = c;\n\t\t\tgetCodeReturn.lc = lc;\n\n\t\t}\n\n\t\tfunction UInt16( value ) {\n\n\t\t\treturn ( value & 0xFFFF );\n\n\t\t}\n\n\t\tfunction Int16( value ) {\n\n\t\t\tvar ref = UInt16( value );\n\t\t\treturn ( ref > 0x7FFF ) ? ref - 0x10000 : ref;\n\n\t\t}\n\n\t\tconst wdec14Return = { a: 0, b: 0 };\n\n\t\tfunction wdec14( l, h ) {\n\n\t\t\tvar ls = Int16( l );\n\t\t\tvar hs = Int16( h );\n\n\t\t\tvar hi = hs;\n\t\t\tvar ai = ls + ( hi & 1 ) + ( hi >> 1 );\n\n\t\t\tvar as = ai;\n\t\t\tvar bs = ai - hi;\n\n\t\t\twdec14Return.a = as;\n\t\t\twdec14Return.b = bs;\n\n\t\t}\n\n\t\tfunction wav2Decode( buffer, j, nx, ox, ny, oy ) {\n\n\t\t\tvar n = ( nx > ny ) ? ny : nx;\n\t\t\tvar p = 1;\n\t\t\tvar p2;\n\n\t\t\twhile ( p <= n ) p <<= 1;\n\n\t\t\tp >>= 1;\n\t\t\tp2 = p;\n\t\t\tp >>= 1;\n\n\t\t\twhile ( p >= 1 ) {\n\n\t\t\t\tvar py = 0;\n\t\t\t\tvar ey = py + oy * ( ny - p2 );\n\t\t\t\tvar oy1 = oy * p;\n\t\t\t\tvar oy2 = oy * p2;\n\t\t\t\tvar ox1 = ox * p;\n\t\t\t\tvar ox2 = ox * p2;\n\t\t\t\tvar i00, i01, i10, i11;\n\n\t\t\t\tfor ( ; py <= ey; py += oy2 ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\t\t\t\t\t\tvar p10 = px + oy1;\n\t\t\t\t\t\tvar p11 = p10 + ox1;\n\n\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\ti10 = wdec14Return.b;\n\n\t\t\t\t\t\twdec14( buffer[ p01 + j ], buffer[ p11 + j ] );\n\n\t\t\t\t\t\ti01 = wdec14Return.a;\n\t\t\t\t\t\ti11 = wdec14Return.b;\n\n\t\t\t\t\t\twdec14( i00, i01 );\n\n\t\t\t\t\t\tbuffer[ px + j ] = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\twdec14( i10, i11 );\n\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p11 + j ] = wdec14Return.b;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( nx & p ) {\n\n\t\t\t\t\t\tvar p10 = px + oy1;\n\n\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p10 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p10 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tif ( ny & p ) {\n\n\t\t\t\t\tvar px = py;\n\t\t\t\t\tvar ex = py + ox * ( nx - p2 );\n\n\t\t\t\t\tfor ( ; px <= ex; px += ox2 ) {\n\n\t\t\t\t\t\tvar p01 = px + ox1;\n\n\t\t\t\t\t\twdec14( buffer[ px + j ], buffer[ p01 + j ] );\n\n\t\t\t\t\t\ti00 = wdec14Return.a;\n\t\t\t\t\t\tbuffer[ p01 + j ] = wdec14Return.b;\n\n\t\t\t\t\t\tbuffer[ px + j ] = i00;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tp2 = p;\n\t\t\t\tp >>= 1;\n\n\t\t\t}\n\n\t\t\treturn py;\n\n\t\t}\n\n\t\tfunction hufDecode( encodingTable, decodingTable, uInt8Array, inDataView, inOffset, ni, rlc, no, outBuffer, outOffset ) {\n\n\t\t\tvar c = 0;\n\t\t\tvar lc = 0;\n\t\t\tvar outBufferEndOffset = no;\n\t\t\tvar inOffsetEnd = Math.trunc( inOffset.value + ( ni + 7 ) / 8 );\n\n\t\t\twhile ( inOffset.value < inOffsetEnd ) {\n\n\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\tc = getCharReturn.c;\n\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\twhile ( lc >= HUF_DECBITS ) {\n\n\t\t\t\t\tvar index = ( c >> ( lc - HUF_DECBITS ) ) & HUF_DECMASK;\n\t\t\t\t\tvar pl = decodingTable[ index ];\n\n\t\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tif ( ! pl.p ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar j;\n\n\t\t\t\t\t\tfor ( j = 0; j < pl.lit; j ++ ) {\n\n\t\t\t\t\t\t\tvar l = hufLength( encodingTable[ pl.p[ j ] ] );\n\n\t\t\t\t\t\t\twhile ( lc < l && inOffset.value < inOffsetEnd ) {\n\n\t\t\t\t\t\t\t\tgetChar( c, lc, uInt8Array, inOffset );\n\n\t\t\t\t\t\t\t\tc = getCharReturn.c;\n\t\t\t\t\t\t\t\tlc = getCharReturn.lc;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif ( lc >= l ) {\n\n\t\t\t\t\t\t\t\tif ( hufCode( encodingTable[ pl.p[ j ] ] ) == ( ( c >> ( lc - l ) ) & ( ( 1 << l ) - 1 ) ) ) {\n\n\t\t\t\t\t\t\t\t\tlc -= l;\n\n\t\t\t\t\t\t\t\t\tgetCode( pl.p[ j ], rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( j == pl.lit ) {\n\n\t\t\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tvar i = ( 8 - ni ) & 7;\n\n\t\t\tc >>= i;\n\t\t\tlc -= i;\n\n\t\t\twhile ( lc > 0 ) {\n\n\t\t\t\tvar pl = decodingTable[ ( c << ( HUF_DECBITS - lc ) ) & HUF_DECMASK ];\n\n\t\t\t\tif ( pl.len ) {\n\n\t\t\t\t\tlc -= pl.len;\n\n\t\t\t\t\tgetCode( pl.lit, rlc, c, lc, uInt8Array, inDataView, inOffset, outBuffer, outOffset, outBufferEndOffset );\n\n\t\t\t\t\tc = getCodeReturn.c;\n\t\t\t\t\tlc = getCodeReturn.lc;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tthrow 'hufDecode issues';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn true;\n\n\t\t}\n\n\t\tfunction hufUncompress( uInt8Array, inDataView, inOffset, nCompressed, outBuffer, nRaw ) {\n\n\t\t\tvar outOffset = { value: 0 };\n\t\t\tvar initialInOffset = inOffset.value;\n\n\t\t\tvar im = parseUint32( inDataView, inOffset );\n\t\t\tvar iM = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tvar nBits = parseUint32( inDataView, inOffset );\n\n\t\t\tinOffset.value += 4;\n\n\t\t\tif ( im < 0 || im >= HUF_ENCSIZE || iM < 0 || iM >= HUF_ENCSIZE ) {\n\n\t\t\t\tthrow 'Something wrong with HUF_ENCSIZE';\n\n\t\t\t}\n\n\t\t\tvar freq = new Array( HUF_ENCSIZE );\n\t\t\tvar hdec = new Array( HUF_DECSIZE );\n\n\t\t\thufClearDecTable( hdec );\n\n\t\t\tvar ni = nCompressed - ( inOffset.value - initialInOffset );\n\n\t\t\thufUnpackEncTable( uInt8Array, inDataView, inOffset, ni, im, iM, freq );\n\n\t\t\tif ( nBits > 8 * ( nCompressed - ( inOffset.value - initialInOffset ) ) ) {\n\n\t\t\t\tthrow 'Something wrong with hufUncompress';\n\n\t\t\t}\n\n\t\t\thufBuildDecTable( freq, im, iM, hdec );\n\n\t\t\thufDecode( freq, hdec, uInt8Array, inDataView, inOffset, nBits, iM, nRaw, outBuffer, outOffset );\n\n\t\t}\n\n\t\tfunction applyLut( lut, data, nData ) {\n\n\t\t\tfor ( var i = 0; i < nData; ++ i ) {\n\n\t\t\t\tdata[ i ] = lut[ data[ i ] ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction predictor( source ) {\n\n\t\t\tfor ( var t = 1; t < source.length; t ++ ) {\n\n\t\t\t\tvar d = source[ t - 1 ] + source[ t ] - 128;\n\t\t\t\tsource[ t ] = d;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction interleaveScalar( source, out ) {\n\n\t\t\tvar t1 = 0;\n\t\t\tvar t2 = Math.floor( ( source.length + 1 ) / 2 );\n\t\t\tvar s = 0;\n\t\t\tvar stop = source.length - 1;\n\n\t\t\twhile ( true ) {\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t1 ++ ];\n\n\t\t\t\tif ( s > stop ) break;\n\t\t\t\tout[ s ++ ] = source[ t2 ++ ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction decodeRunLength( source ) {\n\n\t\t\tvar size = source.byteLength;\n\t\t\tvar out = new Array();\n\t\t\tvar p = 0;\n\n\t\t\tvar reader = new DataView( source );\n\n\t\t\twhile ( size > 0 ) {\n\n\t\t\t\tvar l = reader.getInt8( p ++ );\n\n\t\t\t\tif ( l < 0 ) {\n\n\t\t\t\t\tvar count = - l;\n\t\t\t\t\tsize -= count + 1;\n\n\t\t\t\t\tfor ( var i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\tout.push( reader.getUint8( p ++ ) );\n\n\t\t\t\t\t}\n\n\n\t\t\t\t} else {\n\n\t\t\t\t\tvar count = l;\n\t\t\t\t\tsize -= 2;\n\n\t\t\t\t\tvar value = reader.getUint8( p ++ );\n\n\t\t\t\t\tfor ( var i = 0; i < count + 1; i ++ ) {\n\n\t\t\t\t\t\tout.push( value );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn out;\n\n\t\t}\n\n\t\tfunction lossyDctDecode( cscSet, rowPtrs, channelData, acBuffer, dcBuffer, outBuffer ) {\n\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\tvar width = channelData[ cscSet.idx[ 0 ] ].width;\n\t\t\tvar height = channelData[ cscSet.idx[ 0 ] ].height;\n\n\t\t\tvar numComp = 3;\n\n\t\t\tvar numFullBlocksX = Math.floor( width / 8.0 );\n\t\t\tvar numBlocksX = Math.ceil( width / 8.0 );\n\t\t\tvar numBlocksY = Math.ceil( height / 8.0 );\n\t\t\tvar leftoverX = width - ( numBlocksX - 1 ) * 8;\n\t\t\tvar leftoverY = height - ( numBlocksY - 1 ) * 8;\n\n\t\t\tvar currAcComp = { value: 0 };\n\t\t\tvar currDcComp = new Array( numComp );\n\t\t\tvar dctData = new Array( numComp );\n\t\t\tvar halfZigBlock = new Array( numComp );\n\t\t\tvar rowBlock = new Array( numComp );\n\t\t\tvar rowOffsets = new Array( numComp );\n\n\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\trowOffsets[ comp ] = rowPtrs[ cscSet.idx[ comp ] ];\n\t\t\t\tcurrDcComp[ comp ] = ( comp < 1 ) ? 0 : currDcComp[ comp - 1 ] + numBlocksX * numBlocksY;\n\t\t\t\tdctData[ comp ] = new Float32Array( 64 );\n\t\t\t\thalfZigBlock[ comp ] = new Uint16Array( 64 );\n\t\t\t\trowBlock[ comp ] = new Uint16Array( numBlocksX * 64 );\n\n\t\t\t}\n\n\t\t\tfor ( let blocky = 0; blocky < numBlocksY; ++ blocky ) {\n\n\t\t\t\tvar maxY = 8;\n\n\t\t\t\tif ( blocky == numBlocksY - 1 )\n\t\t\t\t\tmaxY = leftoverY;\n\n\t\t\t\tvar maxX = 8;\n\n\t\t\t\tfor ( let blockx = 0; blockx < numBlocksX; ++ blockx ) {\n\n\t\t\t\t\tif ( blockx == numBlocksX - 1 )\n\t\t\t\t\t\tmaxX = leftoverX;\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\thalfZigBlock[ comp ].fill( 0 );\n\n\t\t\t\t\t\t// set block DC component\n\t\t\t\t\t\thalfZigBlock[ comp ][ 0 ] = dcBuffer[ currDcComp[ comp ] ++ ];\n\t\t\t\t\t\t// set block AC components\n\t\t\t\t\t\tunRleAC( currAcComp, acBuffer, halfZigBlock[ comp ] );\n\n\t\t\t\t\t\t// UnZigZag block to float\n\t\t\t\t\t\tunZigZag( halfZigBlock[ comp ], dctData[ comp ] );\n\t\t\t\t\t\t// decode float dct\n\t\t\t\t\t\tdctInverse( dctData[ comp ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( numComp == 3 ) {\n\n\t\t\t\t\t\tcsc709Inverse( dctData );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\t\tconvertToHalf( dctData[ comp ], rowBlock[ comp ], blockx * 64 );\n\n\t\t\t\t\t}\n\n\t\t\t\t} // blockx\n\n\t\t\t\tlet offset = 0;\n\n\t\t\t\tfor ( let comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\t\tlet type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\toffset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\t\tfor ( let blockx = 0; blockx < numFullBlocksX; ++ blockx ) {\n\n\t\t\t\t\t\t\tlet src = blockx * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 0 * INT16_SIZE * type, rowBlock[ comp ][ src + 0 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 1 * INT16_SIZE * type, rowBlock[ comp ][ src + 1 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 2 * INT16_SIZE * type, rowBlock[ comp ][ src + 2 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 3 * INT16_SIZE * type, rowBlock[ comp ][ src + 3 ], true );\n\n\t\t\t\t\t\t\tdataView.setUint16( offset + 4 * INT16_SIZE * type, rowBlock[ comp ][ src + 4 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 5 * INT16_SIZE * type, rowBlock[ comp ][ src + 5 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 6 * INT16_SIZE * type, rowBlock[ comp ][ src + 6 ], true );\n\t\t\t\t\t\t\tdataView.setUint16( offset + 7 * INT16_SIZE * type, rowBlock[ comp ][ src + 7 ], true );\n\n\t\t\t\t\t\t\toffset += 8 * INT16_SIZE * type;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// handle partial X blocks\n\t\t\t\t\tif ( numFullBlocksX != numBlocksX ) {\n\n\t\t\t\t\t\tfor ( let y = 8 * blocky; y < 8 * blocky + maxY; ++ y ) {\n\n\t\t\t\t\t\t\tlet offset = rowOffsets[ comp ][ y ] + 8 * numFullBlocksX * INT16_SIZE * type;\n\t\t\t\t\t\t\tlet src = numFullBlocksX * 64 + ( ( y & 0x7 ) * 8 );\n\n\t\t\t\t\t\t\tfor ( let x = 0; x < maxX; ++ x ) {\n\n\t\t\t\t\t\t\t\tdataView.setUint16( offset + x * INT16_SIZE * type, rowBlock[ comp ][ src + x ], true );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t} // comp\n\n\t\t\t} // blocky\n\n\t\t\tvar halfRow = new Uint16Array( width );\n\t\t\tvar dataView = new DataView( outBuffer.buffer );\n\n\t\t\t// convert channels back to float, if needed\n\t\t\tfor ( var comp = 0; comp < numComp; ++ comp ) {\n\n\t\t\t\tchannelData[ cscSet.idx[ comp ] ].decoded = true;\n\t\t\t\tvar type = channelData[ cscSet.idx[ comp ] ].type;\n\n\t\t\t\tif ( channelData[ comp ].type != 2 ) continue;\n\n\t\t\t\tfor ( var y = 0; y < height; ++ y ) {\n\n\t\t\t\t\tlet offset = rowOffsets[ comp ][ y ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\thalfRow[ x ] = dataView.getUint16( offset + x * INT16_SIZE * type, true );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tfor ( var x = 0; x < width; ++ x ) {\n\n\t\t\t\t\t\tdataView.setFloat32( offset + x * INT16_SIZE * type, decodeFloat16( halfRow[ x ] ), true );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unRleAC( currAcComp, acBuffer, halfZigBlock ) {\n\n\t\t\tvar acValue;\n\t\t\tvar dctComp = 1;\n\n\t\t\twhile ( dctComp < 64 ) {\n\n\t\t\t\tacValue = acBuffer[ currAcComp.value ];\n\n\t\t\t\tif ( acValue == 0xff00 ) {\n\n\t\t\t\t\tdctComp = 64;\n\n\t\t\t\t} else if ( acValue >> 8 == 0xff ) {\n\n\t\t\t\t\tdctComp += acValue & 0xff;\n\n\t\t\t\t} else {\n\n\t\t\t\t\thalfZigBlock[ dctComp ] = acValue;\n\t\t\t\t\tdctComp ++;\n\n\t\t\t\t}\n\n\t\t\t\tcurrAcComp.value ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction unZigZag( src, dst ) {\n\n\t\t\tdst[ 0 ] = decodeFloat16( src[ 0 ] );\n\t\t\tdst[ 1 ] = decodeFloat16( src[ 1 ] );\n\t\t\tdst[ 2 ] = decodeFloat16( src[ 5 ] );\n\t\t\tdst[ 3 ] = decodeFloat16( src[ 6 ] );\n\t\t\tdst[ 4 ] = decodeFloat16( src[ 14 ] );\n\t\t\tdst[ 5 ] = decodeFloat16( src[ 15 ] );\n\t\t\tdst[ 6 ] = decodeFloat16( src[ 27 ] );\n\t\t\tdst[ 7 ] = decodeFloat16( src[ 28 ] );\n\t\t\tdst[ 8 ] = decodeFloat16( src[ 2 ] );\n\t\t\tdst[ 9 ] = decodeFloat16( src[ 4 ] );\n\n\t\t\tdst[ 10 ] = decodeFloat16( src[ 7 ] );\n\t\t\tdst[ 11 ] = decodeFloat16( src[ 13 ] );\n\t\t\tdst[ 12 ] = decodeFloat16( src[ 16 ] );\n\t\t\tdst[ 13 ] = decodeFloat16( src[ 26 ] );\n\t\t\tdst[ 14 ] = decodeFloat16( src[ 29 ] );\n\t\t\tdst[ 15 ] = decodeFloat16( src[ 42 ] );\n\t\t\tdst[ 16 ] = decodeFloat16( src[ 3 ] );\n\t\t\tdst[ 17 ] = decodeFloat16( src[ 8 ] );\n\t\t\tdst[ 18 ] = decodeFloat16( src[ 12 ] );\n\t\t\tdst[ 19 ] = decodeFloat16( src[ 17 ] );\n\n\t\t\tdst[ 20 ] = decodeFloat16( src[ 25 ] );\n\t\t\tdst[ 21 ] = decodeFloat16( src[ 30 ] );\n\t\t\tdst[ 22 ] = decodeFloat16( src[ 41 ] );\n\t\t\tdst[ 23 ] = decodeFloat16( src[ 43 ] );\n\t\t\tdst[ 24 ] = decodeFloat16( src[ 9 ] );\n\t\t\tdst[ 25 ] = decodeFloat16( src[ 11 ] );\n\t\t\tdst[ 26 ] = decodeFloat16( src[ 18 ] );\n\t\t\tdst[ 27 ] = decodeFloat16( src[ 24 ] );\n\t\t\tdst[ 28 ] = decodeFloat16( src[ 31 ] );\n\t\t\tdst[ 29 ] = decodeFloat16( src[ 40 ] );\n\n\t\t\tdst[ 30 ] = decodeFloat16( src[ 44 ] );\n\t\t\tdst[ 31 ] = decodeFloat16( src[ 53 ] );\n\t\t\tdst[ 32 ] = decodeFloat16( src[ 10 ] );\n\t\t\tdst[ 33 ] = decodeFloat16( src[ 19 ] );\n\t\t\tdst[ 34 ] = decodeFloat16( src[ 23 ] );\n\t\t\tdst[ 35 ] = decodeFloat16( src[ 32 ] );\n\t\t\tdst[ 36 ] = decodeFloat16( src[ 39 ] );\n\t\t\tdst[ 37 ] = decodeFloat16( src[ 45 ] );\n\t\t\tdst[ 38 ] = decodeFloat16( src[ 52 ] );\n\t\t\tdst[ 39 ] = decodeFloat16( src[ 54 ] );\n\n\t\t\tdst[ 40 ] = decodeFloat16( src[ 20 ] );\n\t\t\tdst[ 41 ] = decodeFloat16( src[ 22 ] );\n\t\t\tdst[ 42 ] = decodeFloat16( src[ 33 ] );\n\t\t\tdst[ 43 ] = decodeFloat16( src[ 38 ] );\n\t\t\tdst[ 44 ] = decodeFloat16( src[ 46 ] );\n\t\t\tdst[ 45 ] = decodeFloat16( src[ 51 ] );\n\t\t\tdst[ 46 ] = decodeFloat16( src[ 55 ] );\n\t\t\tdst[ 47 ] = decodeFloat16( src[ 60 ] );\n\t\t\tdst[ 48 ] = decodeFloat16( src[ 21 ] );\n\t\t\tdst[ 49 ] = decodeFloat16( src[ 34 ] );\n\n\t\t\tdst[ 50 ] = decodeFloat16( src[ 37 ] );\n\t\t\tdst[ 51 ] = decodeFloat16( src[ 47 ] );\n\t\t\tdst[ 52 ] = decodeFloat16( src[ 50 ] );\n\t\t\tdst[ 53 ] = decodeFloat16( src[ 56 ] );\n\t\t\tdst[ 54 ] = decodeFloat16( src[ 59 ] );\n\t\t\tdst[ 55 ] = decodeFloat16( src[ 61 ] );\n\t\t\tdst[ 56 ] = decodeFloat16( src[ 35 ] );\n\t\t\tdst[ 57 ] = decodeFloat16( src[ 36 ] );\n\t\t\tdst[ 58 ] = decodeFloat16( src[ 48 ] );\n\t\t\tdst[ 59 ] = decodeFloat16( src[ 49 ] );\n\n\t\t\tdst[ 60 ] = decodeFloat16( src[ 57 ] );\n\t\t\tdst[ 61 ] = decodeFloat16( src[ 58 ] );\n\t\t\tdst[ 62 ] = decodeFloat16( src[ 62 ] );\n\t\t\tdst[ 63 ] = decodeFloat16( src[ 63 ] );\n\n\t\t}\n\n\t\tfunction dctInverse( data ) {\n\n\t\t\tconst a = 0.5 * Math.cos( 3.14159 / 4.0 );\n\t\t\tconst b = 0.5 * Math.cos( 3.14159 / 16.0 );\n\t\t\tconst c = 0.5 * Math.cos( 3.14159 / 8.0 );\n\t\t\tconst d = 0.5 * Math.cos( 3.0 * 3.14159 / 16.0 );\n\t\t\tconst e = 0.5 * Math.cos( 5.0 * 3.14159 / 16.0 );\n\t\t\tconst f = 0.5 * Math.cos( 3.0 * 3.14159 / 8.0 );\n\t\t\tconst g = 0.5 * Math.cos( 7.0 * 3.14159 / 16.0 );\n\n\t\t\tvar alpha = new Array( 4 );\n\t\t\tvar beta = new Array( 4 );\n\t\t\tvar theta = new Array( 4 );\n\t\t\tvar gamma = new Array( 4 );\n\n\t\t\tfor ( var row = 0; row < 8; ++ row ) {\n\n\t\t\t\tvar rowPtr = row * 8;\n\n\t\t\t\talpha[ 0 ] = c * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 1 ] = f * data[ rowPtr + 2 ];\n\t\t\t\talpha[ 2 ] = c * data[ rowPtr + 6 ];\n\t\t\t\talpha[ 3 ] = f * data[ rowPtr + 6 ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ rowPtr + 1 ] + d * data[ rowPtr + 3 ] + e * data[ rowPtr + 5 ] + g * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 1 ] = d * data[ rowPtr + 1 ] - g * data[ rowPtr + 3 ] - b * data[ rowPtr + 5 ] - e * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 2 ] = e * data[ rowPtr + 1 ] - b * data[ rowPtr + 3 ] + g * data[ rowPtr + 5 ] + d * data[ rowPtr + 7 ];\n\t\t\t\tbeta[ 3 ] = g * data[ rowPtr + 1 ] - e * data[ rowPtr + 3 ] + d * data[ rowPtr + 5 ] - b * data[ rowPtr + 7 ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ rowPtr + 0 ] + data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ rowPtr + 0 ] - data[ rowPtr + 4 ] );\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ rowPtr + 0 ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ rowPtr + 1 ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 2 ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 3 ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ rowPtr + 4 ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ rowPtr + 5 ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ rowPtr + 6 ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ rowPtr + 7 ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t\tfor ( var column = 0; column < 8; ++ column ) {\n\n\t\t\t\talpha[ 0 ] = c * data[ 16 + column ];\n\t\t\t\talpha[ 1 ] = f * data[ 16 + column ];\n\t\t\t\talpha[ 2 ] = c * data[ 48 + column ];\n\t\t\t\talpha[ 3 ] = f * data[ 48 + column ];\n\n\t\t\t\tbeta[ 0 ] = b * data[ 8 + column ] + d * data[ 24 + column ] + e * data[ 40 + column ] + g * data[ 56 + column ];\n\t\t\t\tbeta[ 1 ] = d * data[ 8 + column ] - g * data[ 24 + column ] - b * data[ 40 + column ] - e * data[ 56 + column ];\n\t\t\t\tbeta[ 2 ] = e * data[ 8 + column ] - b * data[ 24 + column ] + g * data[ 40 + column ] + d * data[ 56 + column ];\n\t\t\t\tbeta[ 3 ] = g * data[ 8 + column ] - e * data[ 24 + column ] + d * data[ 40 + column ] - b * data[ 56 + column ];\n\n\t\t\t\ttheta[ 0 ] = a * ( data[ column ] + data[ 32 + column ] );\n\t\t\t\ttheta[ 3 ] = a * ( data[ column ] - data[ 32 + column ] );\n\n\t\t\t\ttheta[ 1 ] = alpha[ 0 ] + alpha[ 3 ];\n\t\t\t\ttheta[ 2 ] = alpha[ 1 ] - alpha[ 2 ];\n\n\t\t\t\tgamma[ 0 ] = theta[ 0 ] + theta[ 1 ];\n\t\t\t\tgamma[ 1 ] = theta[ 3 ] + theta[ 2 ];\n\t\t\t\tgamma[ 2 ] = theta[ 3 ] - theta[ 2 ];\n\t\t\t\tgamma[ 3 ] = theta[ 0 ] - theta[ 1 ];\n\n\t\t\t\tdata[ 0 + column ] = gamma[ 0 ] + beta[ 0 ];\n\t\t\t\tdata[ 8 + column ] = gamma[ 1 ] + beta[ 1 ];\n\t\t\t\tdata[ 16 + column ] = gamma[ 2 ] + beta[ 2 ];\n\t\t\t\tdata[ 24 + column ] = gamma[ 3 ] + beta[ 3 ];\n\n\t\t\t\tdata[ 32 + column ] = gamma[ 3 ] - beta[ 3 ];\n\t\t\t\tdata[ 40 + column ] = gamma[ 2 ] - beta[ 2 ];\n\t\t\t\tdata[ 48 + column ] = gamma[ 1 ] - beta[ 1 ];\n\t\t\t\tdata[ 56 + column ] = gamma[ 0 ] - beta[ 0 ];\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction csc709Inverse( data ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tvar y = data[ 0 ][ i ];\n\t\t\t\tvar cb = data[ 1 ][ i ];\n\t\t\t\tvar cr = data[ 2 ][ i ];\n\n\t\t\t\tdata[ 0 ][ i ] = y + 1.5747 * cr;\n\t\t\t\tdata[ 1 ][ i ] = y - 0.1873 * cb - 0.4682 * cr;\n\t\t\t\tdata[ 2 ][ i ] = y + 1.8556 * cb;\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction convertToHalf( src, dst, idx ) {\n\n\t\t\tfor ( var i = 0; i < 64; ++ i ) {\n\n\t\t\t\tdst[ idx + i ] = encodeFloat16( toLinear( src[ i ] ) );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction toLinear( float ) {\n\n\t\t\tif ( float <= 1 ) {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( Math.abs( float ), 2.2 );\n\n\t\t\t} else {\n\n\t\t\t\treturn Math.sign( float ) * Math.pow( logBase, Math.abs( float ) - 1.0 );\n\n\t\t\t}\n\n\t\t}\n\n\t\tfunction uncompressRAW( info ) {\n\n\t\t\treturn new DataView( info.array.buffer, info.offset.value, info.size );\n\n\t\t}\n\n\t\tfunction uncompressRLE( info ) {\n\n\t\t\tvar compressed = info.viewer.buffer.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tvar rawBuffer = new Uint8Array( decodeRunLength( compressed ) );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressZIP( info ) {\n\n\t\t\tvar compressed = info.array.slice( info.offset.value, info.offset.value + info.size );\n\n\t\t\tif ( typeof Zlib === 'undefined' ) {\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: External library Inflate.min.js required, obtain or import from https://github.com/imaya/zlib.js' );\n\n\t\t\t}\n\n\t\t\tvar inflate = new Zlib.Inflate( compressed, { resize: true, verify: true } ); // eslint-disable-line no-undef\n\n\t\t\tvar rawBuffer = new Uint8Array( inflate.decompress().buffer );\n\t\t\tvar tmpBuffer = new Uint8Array( rawBuffer.length );\n\n\t\t\tpredictor( rawBuffer ); // revert predictor\n\n\t\t\tinterleaveScalar( rawBuffer, tmpBuffer ); // interleave pixels\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressPIZ( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\n\t\t\tvar tmpBufSize = info.width * scanlineBlockSize * ( EXRHeader.channels.length * info.type );\n\t\t\tvar outBuffer = new Uint16Array( tmpBufSize );\n\t\t\tvar bitmap = new Uint8Array( BITMAP_SIZE );\n\n\t\t\t// Setup channel info\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar pizChannelData = new Array( info.channels );\n\t\t\tfor ( var i = 0; i < info.channels; i ++ ) {\n\n\t\t\t\tpizChannelData[ i ] = {};\n\t\t\t\tpizChannelData[ i ][ 'start' ] = outBufferEnd;\n\t\t\t\tpizChannelData[ i ][ 'end' ] = pizChannelData[ i ][ 'start' ];\n\t\t\t\tpizChannelData[ i ][ 'nx' ] = info.width;\n\t\t\t\tpizChannelData[ i ][ 'ny' ] = info.lines;\n\t\t\t\tpizChannelData[ i ][ 'size' ] = info.type;\n\n\t\t\t\toutBufferEnd += pizChannelData[ i ].nx * pizChannelData[ i ].ny * pizChannelData[ i ].size;\n\n\t\t\t}\n\n\t\t\t// Read range compression data\n\t\t\tvar minNonZero = parseUint16( inDataView, inOffset );\n\t\t\tvar maxNonZero = parseUint16( inDataView, inOffset );\n\n\t\t\tif ( maxNonZero >= BITMAP_SIZE ) {\n\n\t\t\t\tthrow 'Something is wrong with PIZ_COMPRESSION BITMAP_SIZE';\n\n\t\t\t}\n\n\t\t\tif ( minNonZero <= maxNonZero ) {\n\n\t\t\t\tfor ( var i = 0; i < maxNonZero - minNonZero + 1; i ++ ) {\n\n\t\t\t\t\tbitmap[ i + minNonZero ] = parseUint8( inDataView, inOffset );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Reverse LUT\n\t\t\tvar lut = new Uint16Array( USHORT_RANGE );\n\t\t\treverseLutFromBitmap( bitmap, lut );\n\n\t\t\tvar length = parseUint32( inDataView, inOffset );\n\n\t\t\t// Huffman decoding\n\t\t\thufUncompress( info.array, inDataView, inOffset, length, outBuffer, outBufferEnd );\n\n\t\t\t// Wavelet decoding\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = pizChannelData[ i ];\n\n\t\t\t\tfor ( var j = 0; j < pizChannelData[ i ].size; ++ j ) {\n\n\t\t\t\t\twav2Decode(\n\t\t\t\t\t\toutBuffer,\n\t\t\t\t\t\tcd.start + j,\n\t\t\t\t\t\tcd.nx,\n\t\t\t\t\t\tcd.size,\n\t\t\t\t\t\tcd.ny,\n\t\t\t\t\t\tcd.nx * cd.size\n\t\t\t\t\t);\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Expand the pixel data to their original range\n\t\t\tapplyLut( lut, outBuffer, outBufferEnd );\n\n\t\t\t// Rearrange the pixel data into the format expected by the caller.\n\t\t\tvar tmpOffset = 0;\n\t\t\tvar tmpBuffer = new Uint8Array( outBuffer.buffer.byteLength );\n\t\t\tfor ( var y = 0; y < info.lines; y ++ ) {\n\n\t\t\t\tfor ( var c = 0; c < info.channels; c ++ ) {\n\n\t\t\t\t\tvar cd = pizChannelData[ c ];\n\n\t\t\t\t\tvar n = cd.nx * cd.size;\n\t\t\t\t\tvar cp = new Uint8Array( outBuffer.buffer, cd.end * INT16_SIZE, n * INT16_SIZE );\n\n\t\t\t\t\ttmpBuffer.set( cp, tmpOffset );\n\t\t\t\t\ttmpOffset += n * INT16_SIZE;\n\t\t\t\t\tcd.end += n;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( tmpBuffer.buffer );\n\n\t\t}\n\n\t\tfunction uncompressDWA( info ) {\n\n\t\t\tvar inDataView = info.viewer;\n\t\t\tvar inOffset = { value: info.offset.value };\n\t\t\tvar outBuffer = new Uint8Array( info.width * info.lines * ( EXRHeader.channels.length * info.type * INT16_SIZE ) );\n\n\t\t\t// Read compression header information\n\t\t\tvar dwaHeader = {\n\n\t\t\t\tversion: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tunknownCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\tdcCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleCompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleUncompressedSize: parseInt64( inDataView, inOffset ),\n\t\t\t\trleRawSize: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalAcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\ttotalDcUncompressedCount: parseInt64( inDataView, inOffset ),\n\t\t\t\tacCompression: parseInt64( inDataView, inOffset )\n\n\t\t\t};\n\n\t\t\tif ( dwaHeader.version < 2 )\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' version ' + dwaHeader.version + ' is unsupported';\n\n\t\t\t// Read channel ruleset information\n\t\t\tvar channelRules = new Array();\n\t\t\tvar ruleSize = parseUint16( inDataView, inOffset ) - INT16_SIZE;\n\n\t\t\twhile ( ruleSize > 0 ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( inDataView.buffer, inOffset );\n\t\t\t\tvar value = parseUint8( inDataView, inOffset );\n\t\t\t\tvar compression = ( value >> 2 ) & 3;\n\t\t\t\tvar csc = ( value >> 4 ) - 1;\n\t\t\t\tvar index = new Int8Array( [ csc ] )[ 0 ];\n\t\t\t\tvar type = parseUint8( inDataView, inOffset );\n\n\t\t\t\tchannelRules.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tindex: index,\n\t\t\t\t\ttype: type,\n\t\t\t\t\tcompression: compression,\n\t\t\t\t} );\n\n\t\t\t\truleSize -= name.length + 3;\n\n\t\t\t}\n\n\t\t\t// Classify channels\n\t\t\tvar channels = EXRHeader.channels;\n\t\t\tvar channelData = new Array( info.channels );\n\n\t\t\tfor ( var i = 0; i < info.channels; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ] = {};\n\t\t\t\tvar channel = channels[ i ];\n\n\t\t\t\tcd.name = channel.name;\n\t\t\t\tcd.compression = UNKNOWN;\n\t\t\t\tcd.decoded = false;\n\t\t\t\tcd.type = channel.pixelType;\n\t\t\t\tcd.pLinear = channel.pLinear;\n\t\t\t\tcd.width = info.width;\n\t\t\t\tcd.height = info.lines;\n\n\t\t\t}\n\n\t\t\tvar cscSet = {\n\t\t\t\tidx: new Array( 3 )\n\t\t\t};\n\n\t\t\tfor ( var offset = 0; offset < info.channels; ++ offset ) {\n\n\t\t\t\tvar cd = channelData[ offset ];\n\n\t\t\t\tfor ( var i = 0; i < channelRules.length; ++ i ) {\n\n\t\t\t\t\tvar rule = channelRules[ i ];\n\n\t\t\t\t\tif ( cd.name == rule.name ) {\n\n\t\t\t\t\t\tcd.compression = rule.compression;\n\n\t\t\t\t\t\tif ( rule.index >= 0 ) {\n\n\t\t\t\t\t\t\tcscSet.idx[ rule.index ] = offset;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcd.offset = offset;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Read DCT - AC component data\n\t\t\tif ( dwaHeader.acCompressedSize > 0 ) {\n\n\t\t\t\tswitch ( dwaHeader.acCompression ) {\n\n\t\t\t\t\tcase STATIC_HUFFMAN:\n\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\thufUncompress( info.array, inDataView, inOffset, dwaHeader.acCompressedSize, acBuffer, dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase DEFLATE:\n\n\t\t\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.totalAcUncompressedCount );\n\t\t\t\t\t\tvar inflate = new Zlib.Inflate( compressed, { resize: true, verify: true } );\n\t\t\t\t\t\tvar acBuffer = new Uint16Array( inflate.decompress().buffer );\n\t\t\t\t\t\tinOffset.value += dwaHeader.totalAcUncompressedCount;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\n\t\t\t}\n\n\t\t\t// Read DCT - DC component data\n\t\t\tif ( dwaHeader.dcCompressedSize > 0 ) {\n\n\t\t\t\tvar zlibInfo = {\n\t\t\t\t\tarray: info.array,\n\t\t\t\t\toffset: inOffset,\n\t\t\t\t\tsize: dwaHeader.dcCompressedSize\n\t\t\t\t};\n\t\t\t\tvar dcBuffer = new Uint16Array( uncompressZIP( zlibInfo ).buffer );\n\t\t\t\tinOffset.value += dwaHeader.dcCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Read RLE compressed data\n\t\t\tif ( dwaHeader.rleRawSize > 0 ) {\n\n\t\t\t\tvar compressed = info.array.slice( inOffset.value, inOffset.value + dwaHeader.rleCompressedSize );\n\t\t\t\tvar inflate = new Zlib.Inflate( compressed, { resize: true, verify: true } );\n\t\t\t\tvar rleBuffer = decodeRunLength( inflate.decompress().buffer );\n\n\t\t\t\tinOffset.value += dwaHeader.rleCompressedSize;\n\n\t\t\t}\n\n\t\t\t// Prepare outbuffer data offset\n\t\t\tvar outBufferEnd = 0;\n\t\t\tvar rowOffsets = new Array( channelData.length );\n\t\t\tfor ( var i = 0; i < rowOffsets.length; ++ i ) {\n\n\t\t\t\trowOffsets[ i ] = new Array();\n\n\t\t\t}\n\n\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\tfor ( var chan = 0; chan < channelData.length; ++ chan ) {\n\n\t\t\t\t\trowOffsets[ chan ].push( outBufferEnd );\n\t\t\t\t\toutBufferEnd += channelData[ chan ].width * info.type * INT16_SIZE;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Lossy DCT decode RGB channels\n\t\t\tlossyDctDecode( cscSet, rowOffsets, channelData, acBuffer, dcBuffer, outBuffer );\n\n\t\t\t// Decode other channels\n\t\t\tfor ( var i = 0; i < channelData.length; ++ i ) {\n\n\t\t\t\tvar cd = channelData[ i ];\n\n\t\t\t\tif ( cd.decoded ) continue;\n\n\t\t\t\tswitch ( cd.compression ) {\n\n\t\t\t\t\tcase RLE:\n\n\t\t\t\t\t\tvar row = 0;\n\t\t\t\t\t\tvar rleOffset = 0;\n\n\t\t\t\t\t\tfor ( var y = 0; y < info.lines; ++ y ) {\n\n\t\t\t\t\t\t\tvar rowOffsetBytes = rowOffsets[ i ][ row ];\n\n\t\t\t\t\t\t\tfor ( var x = 0; x < cd.width; ++ x ) {\n\n\t\t\t\t\t\t\t\tfor ( var byte = 0; byte < INT16_SIZE * cd.type; ++ byte ) {\n\n\t\t\t\t\t\t\t\t\toutBuffer[ rowOffsetBytes ++ ] = rleBuffer[ rleOffset + byte * cd.width * cd.height ];\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\trleOffset ++;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\trow ++;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase LOSSY_DCT: // skip\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow 'EXRLoader.parse: unsupported channel compression';\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn new DataView( outBuffer.buffer );\n\n\t\t}\n\n\t\tfunction parseNullTerminatedString( buffer, offset ) {\n\n\t\t\tvar uintBuffer = new Uint8Array( buffer );\n\t\t\tvar endOffset = 0;\n\n\t\t\twhile ( uintBuffer[ offset.value + endOffset ] != 0 ) {\n\n\t\t\t\tendOffset += 1;\n\n\t\t\t}\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tuintBuffer.slice( offset.value, offset.value + endOffset )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + endOffset + 1;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseFixedLengthString( buffer, offset, size ) {\n\n\t\t\tvar stringValue = new TextDecoder().decode(\n\t\t\t\tnew Uint8Array( buffer ).slice( offset.value, offset.value + size )\n\t\t\t);\n\n\t\t\toffset.value = offset.value + size;\n\n\t\t\treturn stringValue;\n\n\t\t}\n\n\t\tfunction parseUlong( dataView, offset ) {\n\n\t\t\tvar uLong = dataView.getUint32( 0, true );\n\n\t\t\toffset.value = offset.value + ULONG_SIZE;\n\n\t\t\treturn uLong;\n\n\t\t}\n\n\t\tfunction parseRational( dataView, offset ) {\n\n\t\t\tvar x = parseInt32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseTimecode( dataView, offset ) {\n\n\t\t\tvar x = parseUint32( dataView, offset );\n\t\t\tvar y = parseUint32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseInt32( dataView, offset ) {\n\n\t\t\tvar Int32 = dataView.getInt32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Int32;\n\n\t\t}\n\n\t\tfunction parseUint32( dataView, offset ) {\n\n\t\t\tvar Uint32 = dataView.getUint32( offset.value, true );\n\n\t\t\toffset.value = offset.value + INT32_SIZE;\n\n\t\t\treturn Uint32;\n\n\t\t}\n\n\t\tfunction parseUint8Array( uInt8Array, offset ) {\n\n\t\t\tvar Uint8 = uInt8Array[ offset.value ];\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseUint8( dataView, offset ) {\n\n\t\t\tvar Uint8 = dataView.getUint8( offset.value );\n\n\t\t\toffset.value = offset.value + INT8_SIZE;\n\n\t\t\treturn Uint8;\n\n\t\t}\n\n\t\tfunction parseInt64( dataView, offset ) {\n\n\t\t\tvar int = Number( dataView.getBigInt64( offset.value, true ) );\n\n\t\t\toffset.value += ULONG_SIZE;\n\n\t\t\treturn int;\n\n\t\t}\n\n\t\tfunction parseFloat32( dataView, offset ) {\n\n\t\t\tvar float = dataView.getFloat32( offset.value, true );\n\n\t\t\toffset.value += FLOAT32_SIZE;\n\n\t\t\treturn float;\n\n\t\t}\n\n\t\tfunction decodeFloat32( dataView, offset ) {\n\n\t\t\treturn encodeFloat16( parseFloat32( dataView, offset ) );\n\n\t\t}\n\n\t\t// https://stackoverflow.com/questions/5678432/decompressing-half-precision-floats-in-javascript\n\t\tfunction decodeFloat16( binary ) {\n\n\t\t\tvar exponent = ( binary & 0x7C00 ) >> 10,\n\t\t\t\tfraction = binary & 0x03FF;\n\n\t\t\treturn ( binary >> 15 ? - 1 : 1 ) * (\n\t\t\t\texponent ?\n\t\t\t\t\t(\n\t\t\t\t\t\texponent === 0x1F ?\n\t\t\t\t\t\t\tfraction ? NaN : Infinity :\n\t\t\t\t\t\t\tMath.pow( 2, exponent - 15 ) * ( 1 + fraction / 0x400 )\n\t\t\t\t\t) :\n\t\t\t\t\t6.103515625e-5 * ( fraction / 0x400 )\n\t\t\t);\n\n\t\t}\n\n\t\t// http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\t\tfunction encodeFloat16( val ) {\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code.\n\t\t\t*/\n\n\t\t\ttmpDataView.setFloat32( 0, val );\n\t\t\tvar x = tmpDataView.getInt32( 0 );\n\n\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t* half, return signed zero. */\n\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\tif ( e > 142 ) {\n\n\t\t\t\tbits |= 0x7c00;\n\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t* not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\tif ( e < 113 ) {\n\n\t\t\t\tm |= 0x0800;\n\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t* to 1, which is OK. */\n\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t* the exponent, which is OK. */\n\t\t\tbits += m & 1;\n\t\t\treturn bits;\n\n\t\t}\n\n\t\tfunction parseUint16( dataView, offset ) {\n\n\t\t\tvar Uint16 = dataView.getUint16( offset.value, true );\n\n\t\t\toffset.value += INT16_SIZE;\n\n\t\t\treturn Uint16;\n\n\t\t}\n\n\t\tfunction parseFloat16( buffer, offset ) {\n\n\t\t\treturn decodeFloat16( parseUint16( buffer, offset ) );\n\n\t\t}\n\n\t\tfunction parseChlist( dataView, buffer, offset, size ) {\n\n\t\t\tvar startOffset = offset.value;\n\t\t\tvar channels = [];\n\n\t\t\twhile ( offset.value < ( startOffset + size - 1 ) ) {\n\n\t\t\t\tvar name = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar pixelType = parseInt32( dataView, offset );\n\t\t\t\tvar pLinear = parseUint8( dataView, offset );\n\t\t\t\toffset.value += 3; // reserved, three chars\n\t\t\t\tvar xSampling = parseInt32( dataView, offset );\n\t\t\t\tvar ySampling = parseInt32( dataView, offset );\n\n\t\t\t\tchannels.push( {\n\t\t\t\t\tname: name,\n\t\t\t\t\tpixelType: pixelType,\n\t\t\t\t\tpLinear: pLinear,\n\t\t\t\t\txSampling: xSampling,\n\t\t\t\t\tySampling: ySampling\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\toffset.value += 1;\n\n\t\t\treturn channels;\n\n\t\t}\n\n\t\tfunction parseChromaticities( dataView, offset ) {\n\n\t\t\tvar redX = parseFloat32( dataView, offset );\n\t\t\tvar redY = parseFloat32( dataView, offset );\n\t\t\tvar greenX = parseFloat32( dataView, offset );\n\t\t\tvar greenY = parseFloat32( dataView, offset );\n\t\t\tvar blueX = parseFloat32( dataView, offset );\n\t\t\tvar blueY = parseFloat32( dataView, offset );\n\t\t\tvar whiteX = parseFloat32( dataView, offset );\n\t\t\tvar whiteY = parseFloat32( dataView, offset );\n\n\t\t\treturn { redX: redX, redY: redY, greenX: greenX, greenY: greenY, blueX: blueX, blueY: blueY, whiteX: whiteX, whiteY: whiteY };\n\n\t\t}\n\n\t\tfunction parseCompression( dataView, offset ) {\n\n\t\t\tvar compressionCodes = [\n\t\t\t\t'NO_COMPRESSION',\n\t\t\t\t'RLE_COMPRESSION',\n\t\t\t\t'ZIPS_COMPRESSION',\n\t\t\t\t'ZIP_COMPRESSION',\n\t\t\t\t'PIZ_COMPRESSION',\n\t\t\t\t'PXR24_COMPRESSION',\n\t\t\t\t'B44_COMPRESSION',\n\t\t\t\t'B44A_COMPRESSION',\n\t\t\t\t'DWAA_COMPRESSION',\n\t\t\t\t'DWAB_COMPRESSION'\n\t\t\t];\n\n\t\t\tvar compression = parseUint8( dataView, offset );\n\n\t\t\treturn compressionCodes[ compression ];\n\n\t\t}\n\n\t\tfunction parseBox2i( dataView, offset ) {\n\n\t\t\tvar xMin = parseUint32( dataView, offset );\n\t\t\tvar yMin = parseUint32( dataView, offset );\n\t\t\tvar xMax = parseUint32( dataView, offset );\n\t\t\tvar yMax = parseUint32( dataView, offset );\n\n\t\t\treturn { xMin: xMin, yMin: yMin, xMax: xMax, yMax: yMax };\n\n\t\t}\n\n\t\tfunction parseLineOrder( dataView, offset ) {\n\n\t\t\tvar lineOrders = [\n\t\t\t\t'INCREASING_Y'\n\t\t\t];\n\n\t\t\tvar lineOrder = parseUint8( dataView, offset );\n\n\t\t\treturn lineOrders[ lineOrder ];\n\n\t\t}\n\n\t\tfunction parseV2f( dataView, offset ) {\n\n\t\t\tvar x = parseFloat32( dataView, offset );\n\t\t\tvar y = parseFloat32( dataView, offset );\n\n\t\t\treturn [ x, y ];\n\n\t\t}\n\n\t\tfunction parseValue( dataView, buffer, offset, type, size ) {\n\n\t\t\tif ( type === 'string' || type === 'stringvector' || type === 'iccProfile' ) {\n\n\t\t\t\treturn parseFixedLengthString( buffer, offset, size );\n\n\t\t\t} else if ( type === 'chlist' ) {\n\n\t\t\t\treturn parseChlist( dataView, buffer, offset, size );\n\n\t\t\t} else if ( type === 'chromaticities' ) {\n\n\t\t\t\treturn parseChromaticities( dataView, offset );\n\n\t\t\t} else if ( type === 'compression' ) {\n\n\t\t\t\treturn parseCompression( dataView, offset );\n\n\t\t\t} else if ( type === 'box2i' ) {\n\n\t\t\t\treturn parseBox2i( dataView, offset );\n\n\t\t\t} else if ( type === 'lineOrder' ) {\n\n\t\t\t\treturn parseLineOrder( dataView, offset );\n\n\t\t\t} else if ( type === 'float' ) {\n\n\t\t\t\treturn parseFloat32( dataView, offset );\n\n\t\t\t} else if ( type === 'v2f' ) {\n\n\t\t\t\treturn parseV2f( dataView, offset );\n\n\t\t\t} else if ( type === 'int' ) {\n\n\t\t\t\treturn parseInt32( dataView, offset );\n\n\t\t\t} else if ( type === 'rational' ) {\n\n\t\t\t\treturn parseRational( dataView, offset );\n\n\t\t\t} else if ( type === 'timecode' ) {\n\n\t\t\t\treturn parseTimecode( dataView, offset );\n\n\t\t\t} else {\n\n\t\t\t\tthrow 'Cannot parse value for unsupported type: ' + type;\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar bufferDataView = new DataView( buffer );\n\t\tvar uInt8Array = new Uint8Array( buffer );\n\n\t\tvar EXRHeader = {};\n\n\t\tbufferDataView.getUint32( 0, true ); // magic\n\t\tbufferDataView.getUint8( 4, true ); // versionByteZero\n\t\tbufferDataView.getUint8( 5, true ); // fullMask\n\n\t\t// start of header\n\n\t\tvar offset = { value: 8 }; // start at 8, after magic stuff\n\n\t\tvar keepReading = true;\n\n\t\twhile ( keepReading ) {\n\n\t\t\tvar attributeName = parseNullTerminatedString( buffer, offset );\n\n\t\t\tif ( attributeName == 0 ) {\n\n\t\t\t\tkeepReading = false;\n\n\t\t\t} else {\n\n\t\t\t\tvar attributeType = parseNullTerminatedString( buffer, offset );\n\t\t\t\tvar attributeSize = parseUint32( bufferDataView, offset );\n\t\t\t\tvar attributeValue = parseValue( bufferDataView, buffer, offset, attributeType, attributeSize );\n\n\t\t\t\tEXRHeader[ attributeName ] = attributeValue;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// offsets\n\t\tvar dataWindowHeight = EXRHeader.dataWindow.yMax + 1;\n\n\t\tvar uncompress;\n\t\tvar scanlineBlockSize;\n\n\t\tswitch ( EXRHeader.compression ) {\n\n\t\t\tcase 'NO_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRAW;\n\t\t\t\tbreak;\n\n\t\t\tcase 'RLE_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressRLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIPS_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 1;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'ZIP_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 16;\n\t\t\t\tuncompress = uncompressZIP;\n\t\t\t\tbreak;\n\n\t\t\tcase 'PIZ_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressPIZ;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAA_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 32;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tcase 'DWAB_COMPRESSION':\n\n\t\t\t\tscanlineBlockSize = 256;\n\t\t\t\tuncompress = uncompressDWA;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tthrow 'EXRLoader.parse: ' + EXRHeader.compression + ' is unsupported';\n\n\t\t}\n\n\t\tvar size_t;\n\t\tvar getValue;\n\n\t\t// mixed pixelType not supported\n\t\tvar pixelType = EXRHeader.channels[ 0 ].pixelType;\n\n\t\tif ( pixelType === 1 ) { // half\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\tgetValue = parseFloat16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\tgetValue = parseUint16;\n\t\t\t\t\tsize_t = INT16_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t} else if ( pixelType === 2 ) { // float\n\n\t\t\tswitch ( this.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\tgetValue = parseFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\tgetValue = decodeFloat32;\n\t\t\t\t\tsize_t = FLOAT32_SIZE;\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\tthrow 'EXRLoader.parse: unsupported pixelType ' + pixelType + ' for ' + EXRHeader.compression + '.';\n\n\t\t}\n\n\t\tvar numBlocks = dataWindowHeight / scanlineBlockSize;\n\n\t\tfor ( var i = 0; i < numBlocks; i ++ ) {\n\n\t\t\tparseUlong( bufferDataView, offset ); // scanlineOffset\n\n\t\t}\n\n\t\t// we should be passed the scanline offset table, start reading pixel data\n\n\t\tvar width = EXRHeader.dataWindow.xMax - EXRHeader.dataWindow.xMin + 1;\n\t\tvar height = EXRHeader.dataWindow.yMax - EXRHeader.dataWindow.yMin + 1;\n\t\t// Firefox only supports RGBA (half) float textures\n\t\t// var numChannels = EXRHeader.channels.length;\n\t\tvar numChannels = 4;\n\t\tvar size = width * height * numChannels;\n\n\t\t// Fill initially with 1s for the alpha value if the texture is not RGBA, RGB values will be overwritten\n\t\tswitch ( this.type ) {\n\n\t\t\tcase UnsignedByteType:\n\t\t\tcase FloatType:\n\n\t\t\t\tvar byteArray = new Float32Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 1, 0, size );\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase HalfFloatType:\n\n\t\t\t\tvar byteArray = new Uint16Array( size );\n\n\t\t\t\tif ( EXRHeader.channels.length < numChannels ) {\n\n\t\t\t\t\tbyteArray.fill( 0x3C00, 0, size ); // Uint16Array holds half float data, 0x3C00 is 1\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tconsole.error( 'THREE.EXRLoader: unsupported type: ', this.type );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tvar channelOffsets = {\n\t\t\tR: 0,\n\t\t\tG: 1,\n\t\t\tB: 2,\n\t\t\tA: 3\n\t\t};\n\n\t\tvar compressionInfo = {\n\n\t\t\tsize: 0,\n\t\t\twidth: width,\n\t\t\tlines: scanlineBlockSize,\n\n\t\t\toffset: offset,\n\t\t\tarray: uInt8Array,\n\t\t\tviewer: bufferDataView,\n\n\t\t\ttype: pixelType,\n\t\t\tchannels: EXRHeader.channels.length,\n\n\t\t};\n\n\t\tvar line;\n\t\tvar size;\n\t\tvar viewer;\n\t\tvar tmpOffset = { value: 0 };\n\n\t\tfor ( var scanlineBlockIdx = 0; scanlineBlockIdx < height / scanlineBlockSize; scanlineBlockIdx ++ ) {\n\n\t\t\tline = parseUint32( bufferDataView, offset ); // line_no\n\t\t\tsize = parseUint32( bufferDataView, offset ); // data_len\n\n\t\t\tcompressionInfo.lines = ( line + scanlineBlockSize > height ) ? height - line : scanlineBlockSize;\n\t\t\tcompressionInfo.offset = offset;\n\t\t\tcompressionInfo.size = size;\n\n\t\t\tviewer = uncompress( compressionInfo );\n\n\t\t\toffset.value += size;\n\n\t\t\tfor ( var line_y = 0; line_y < scanlineBlockSize; line_y ++ ) {\n\n\t\t\t\tvar true_y = line_y + ( scanlineBlockIdx * scanlineBlockSize );\n\n\t\t\t\tif ( true_y >= height ) break;\n\n\t\t\t\tfor ( var channelID = 0; channelID < EXRHeader.channels.length; channelID ++ ) {\n\n\t\t\t\t\tvar cOff = channelOffsets[ EXRHeader.channels[ channelID ].name ];\n\n\t\t\t\t\tfor ( var x = 0; x < width; x ++ ) {\n\n\t\t\t\t\t\tvar idx = ( line_y * ( EXRHeader.channels.length * width ) ) + ( channelID * width ) + x;\n\t\t\t\t\t\ttmpOffset.value = idx * size_t;\n\n\t\t\t\t\t\tvar val = getValue( viewer, tmpOffset );\n\n\t\t\t\t\t\tbyteArray[ ( ( ( height - 1 - true_y ) * ( width * numChannels ) ) + ( x * numChannels ) ) + cOff ] = val;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( this.type === UnsignedByteType ) {\n\n\t\t\tlet v, i, j;\n\t\t\tconst size = byteArray.length;\n\t\t\tconst RGBEArray = new Uint8Array( size );\n\n\t\t\tfor ( let h = 0; h < height; ++ h ) {\n\n\t\t\t\tfor ( let w = 0; w < width; ++ w ) {\n\n\t\t\t\t\ti = h * width * 4 + w * 4;\n\t\t\t\t\tj = ( height - 1 - h ) * width * 4 + w * 4;\n\n\t\t\t\t\tconst red = byteArray[ j ];\n\t\t\t\t\tconst green = byteArray[ j + 1 ];\n\t\t\t\t\tconst blue = byteArray[ j + 2 ];\n\n\t\t\t\t\tv = ( red > green ) ? red : green;\n\t\t\t\t\tv = ( blue > v ) ? blue : v;\n\n\t\t\t\t\tif ( v < 1e-32 ) {\n\n\t\t\t\t\t\tRGBEArray[ i ] = RGBEArray[ i + 1 ] = RGBEArray[ i + 2 ] = RGBEArray[ i + 3 ] = 0;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tconst res = frexp( v );\n\t\t\t\t\t\tv = res[ 0 ] * 256 / v;\n\n\t\t\t\t\t\tRGBEArray[ i ] = red * v;\n\t\t\t\t\t\tRGBEArray[ i + 1 ] = green * v;\n\t\t\t\t\t\tRGBEArray[ i + 2 ] = blue * v;\n\t\t\t\t\t\tRGBEArray[ i + 3 ] = res[ 1 ] + 128;\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tbyteArray = RGBEArray;\n\n\t\t}\n\n\t\tlet format = ( this.type === UnsignedByteType ) ? RGBEFormat : ( numChannels === 4 ) ? RGBAFormat : RGBFormat;\n\n\t\treturn {\n\t\t\theader: EXRHeader,\n\t\t\twidth: width,\n\t\t\theight: height,\n\t\t\tdata: byteArray,\n\t\t\tformat: format,\n\t\t\ttype: this.type\n\t\t};\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = false;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { EXRLoader };\n"],"sourceRoot":""}