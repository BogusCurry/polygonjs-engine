{"version":3,"sources":["webpack://POLY/./node_modules/three/src/loaders/FileLoader.js","webpack://POLY/./node_modules/three/src/loaders/DataTextureLoader.js","webpack://POLY/./modules/three/examples/jsm/loaders/RGBELoader.js"],"names":["loading","FileLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","undefined","path","resolveURL","scope","cached","get","itemStart","setTimeout","itemEnd","dataUriRegexResult","match","mimeType","isBase64","data","decodeURIComponent","atob","response","responseType","toLowerCase","view","Uint8Array","length","i","charCodeAt","Blob","buffer","type","parser","DOMParser","parseFromString","JSON","parse","error","itemError","push","request","XMLHttpRequest","header","open","addEventListener","event","callbacks","status","console","warn","add","il","callback","withCredentials","overrideMimeType","requestHeader","setRequestHeader","send","setResponseType","value","setWithCredentials","setMimeType","DataTextureLoader","texture","loader","setPath","texData","image","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","format","mipmaps","mipmapCount","needsUpdate","RGBELoader","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","p","pos","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","slice","RGBEByteToRGBHalf","floatView","Float32Array","int32View","Int32Array","toHalf","val","x","bits","m","e","sourceArray","sourceOffset","destArray","destOffset","scale","Math","pow","byteArray","rgbe_header_info","line","gamma_re","exposure_re","format_re","dimensions_re","valid","string","comments","programtype","gamma","exposure","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","set","RGBE_ReadPixels_RLE","numElements","floatArray","j","halfArray","setDataType","encoding","generateMipmaps","flipY"],"mappings":"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","file":"3.bundle.js","sourcesContent":["/**\n * @author mrdoob / http://mrdoob.com/\n */\n\nimport { Cache } from './Cache.js';\nimport { Loader } from './Loader.js';\n\nvar loading = {};\n\nfunction FileLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nFileLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: FileLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tif ( url === undefined ) url = '';\n\n\t\tif ( this.path !== undefined ) url = this.path + url;\n\n\t\turl = this.manager.resolveURL( url );\n\n\t\tvar scope = this;\n\n\t\tvar cached = Cache.get( url );\n\n\t\tif ( cached !== undefined ) {\n\n\t\t\tscope.manager.itemStart( url );\n\n\t\t\tsetTimeout( function () {\n\n\t\t\t\tif ( onLoad ) onLoad( cached );\n\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, 0 );\n\n\t\t\treturn cached;\n\n\t\t}\n\n\t\t// Check if request is duplicate\n\n\t\tif ( loading[ url ] !== undefined ) {\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\treturn;\n\n\t\t}\n\n\t\t// Check for data: URI\n\t\tvar dataUriRegex = /^data:(.*?)(;base64)?,(.*)$/;\n\t\tvar dataUriRegexResult = url.match( dataUriRegex );\n\n\t\t// Safari can not handle Data URIs through XMLHttpRequest so process manually\n\t\tif ( dataUriRegexResult ) {\n\n\t\t\tvar mimeType = dataUriRegexResult[ 1 ];\n\t\t\tvar isBase64 = !! dataUriRegexResult[ 2 ];\n\t\t\tvar data = dataUriRegexResult[ 3 ];\n\n\t\t\tdata = decodeURIComponent( data );\n\n\t\t\tif ( isBase64 ) data = atob( data );\n\n\t\t\ttry {\n\n\t\t\t\tvar response;\n\t\t\t\tvar responseType = ( this.responseType || '' ).toLowerCase();\n\n\t\t\t\tswitch ( responseType ) {\n\n\t\t\t\t\tcase 'arraybuffer':\n\t\t\t\t\tcase 'blob':\n\n\t\t\t\t\t\tvar view = new Uint8Array( data.length );\n\n\t\t\t\t\t\tfor ( var i = 0; i < data.length; i ++ ) {\n\n\t\t\t\t\t\t\tview[ i ] = data.charCodeAt( i );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( responseType === 'blob' ) {\n\n\t\t\t\t\t\t\tresponse = new Blob( [ view.buffer ], { type: mimeType } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tresponse = view.buffer;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'document':\n\n\t\t\t\t\t\tvar parser = new DOMParser();\n\t\t\t\t\t\tresponse = parser.parseFromString( data, mimeType );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'json':\n\n\t\t\t\t\t\tresponse = JSON.parse( data );\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault: // 'text' or other\n\n\t\t\t\t\t\tresponse = data;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onLoad ) onLoad( response );\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t} catch ( error ) {\n\n\t\t\t\t// Wait for next browser tick like standard XMLHttpRequest event dispatching does\n\t\t\t\tsetTimeout( function () {\n\n\t\t\t\t\tif ( onError ) onError( error );\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}, 0 );\n\n\t\t\t}\n\n\t\t} else {\n\n\t\t\t// Initialise array for duplicate requests\n\n\t\t\tloading[ url ] = [];\n\n\t\t\tloading[ url ].push( {\n\n\t\t\t\tonLoad: onLoad,\n\t\t\t\tonProgress: onProgress,\n\t\t\t\tonError: onError\n\n\t\t\t} );\n\n\t\t\tvar request = new XMLHttpRequest();\n\n\t\t\trequest.open( 'GET', url, true );\n\n\t\t\trequest.addEventListener( 'load', function ( event ) {\n\n\t\t\t\tvar response = this.response;\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tif ( this.status === 200 || this.status === 0 ) {\n\n\t\t\t\t\t// Some browsers return HTTP Status 0 when using non-http protocol\n\t\t\t\t\t// e.g. 'file://' or 'data://'. Handle as success.\n\n\t\t\t\t\tif ( this.status === 0 ) console.warn( 'THREE.FileLoader: HTTP Status 0 received.' );\n\n\t\t\t\t\t// Add to cache only on HTTP success, so that we do not cache\n\t\t\t\t\t// error response bodies as proper responses to requests.\n\t\t\t\t\tCache.add( url, response );\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onLoad ) callback.onLoad( response );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tscope.manager.itemError( url );\n\t\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'progress', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onProgress ) callback.onProgress( event );\n\n\t\t\t\t}\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'error', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\trequest.addEventListener( 'abort', function ( event ) {\n\n\t\t\t\tvar callbacks = loading[ url ];\n\n\t\t\t\tdelete loading[ url ];\n\n\t\t\t\tfor ( var i = 0, il = callbacks.length; i < il; i ++ ) {\n\n\t\t\t\t\tvar callback = callbacks[ i ];\n\t\t\t\t\tif ( callback.onError ) callback.onError( event );\n\n\t\t\t\t}\n\n\t\t\t\tscope.manager.itemError( url );\n\t\t\t\tscope.manager.itemEnd( url );\n\n\t\t\t}, false );\n\n\t\t\tif ( this.responseType !== undefined ) request.responseType = this.responseType;\n\t\t\tif ( this.withCredentials !== undefined ) request.withCredentials = this.withCredentials;\n\n\t\t\tif ( request.overrideMimeType ) request.overrideMimeType( this.mimeType !== undefined ? this.mimeType : 'text/plain' );\n\n\t\t\tfor ( var header in this.requestHeader ) {\n\n\t\t\t\trequest.setRequestHeader( header, this.requestHeader[ header ] );\n\n\t\t\t}\n\n\t\t\trequest.send( null );\n\n\t\t}\n\n\t\tscope.manager.itemStart( url );\n\n\t\treturn request;\n\n\t},\n\n\tsetResponseType: function ( value ) {\n\n\t\tthis.responseType = value;\n\t\treturn this;\n\n\t},\n\n\tsetWithCredentials: function ( value ) {\n\n\t\tthis.withCredentials = value;\n\t\treturn this;\n\n\t},\n\n\tsetMimeType: function ( value ) {\n\n\t\tthis.mimeType = value;\n\t\treturn this;\n\n\t},\n\n\tsetRequestHeader: function ( value ) {\n\n\t\tthis.requestHeader = value;\n\t\treturn this;\n\n\t}\n\n} );\n\n\nexport { FileLoader };\n","import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n\nexport { DataTextureLoader };\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n"],"sourceRoot":""}