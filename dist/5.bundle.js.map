{"version":3,"sources":["webpack://POLY/./node_modules/three/src/loaders/DataTextureLoader.js","webpack://POLY/./modules/three/examples/jsm/loaders/RGBELoader.js"],"names":["DataTextureLoader","manager","call","this","prototype","Object","assign","create","constructor","load","url","onLoad","onProgress","onError","scope","texture","loader","setResponseType","setPath","path","buffer","texData","parse","undefined","image","data","width","height","wrapS","wrapT","magFilter","minFilter","anisotropy","format","type","mipmaps","mipmapCount","needsUpdate","RGBELoader","rgbe_error","rgbe_error_code","msg","console","error","fgets","lineLimit","consume","p","pos","i","len","s","chunk","String","fromCharCode","apply","Uint16Array","subarray","indexOf","byteLength","length","slice","RGBEByteToRGBHalf","floatView","Float32Array","int32View","Int32Array","toHalf","val","x","bits","m","e","sourceArray","sourceOffset","destArray","destOffset","scale","Math","pow","byteArray","Uint8Array","rgbe_header_info","line","match","gamma_re","exposure_re","format_re","dimensions_re","header","valid","string","comments","programtype","gamma","exposure","charAt","parseFloat","parseInt","RGBE_ReadHeader","w","h","image_rgba_data","data_rgba","offset","count","byteValue","scanline_buffer","ptr","ptr_end","l","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","set","RGBE_ReadPixels_RLE","numElements","floatArray","j","halfArray","setDataType","value","encoding","generateMipmaps","flipY"],"mappings":"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","file":"5.bundle.js","sourcesContent":["import { LinearFilter, LinearMipmapLinearFilter, ClampToEdgeWrapping } from '../constants.js';\nimport { FileLoader } from './FileLoader.js';\nimport { DataTexture } from '../textures/DataTexture.js';\nimport { Loader } from './Loader.js';\n\n/**\n * @author Nikos M. / https://github.com/foo123/\n *\n * Abstract Base class to load generic binary textures formats (rgbe, hdr, ...)\n *\n * Sub classes have to implement the parse() method which will be used in load().\n */\n\nfunction DataTextureLoader( manager ) {\n\n\tLoader.call( this, manager );\n\n}\n\nDataTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DataTextureLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar texture = new DataTexture();\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.setPath( this.path );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tvar texData = scope.parse( buffer );\n\n\t\t\tif ( ! texData ) return;\n\n\t\t\tif ( texData.image !== undefined ) {\n\n\t\t\t\ttexture.image = texData.image;\n\n\t\t\t} else if ( texData.data !== undefined ) {\n\n\t\t\t\ttexture.image.width = texData.width;\n\t\t\t\ttexture.image.height = texData.height;\n\t\t\t\ttexture.image.data = texData.data;\n\n\t\t\t}\n\n\t\t\ttexture.wrapS = texData.wrapS !== undefined ? texData.wrapS : ClampToEdgeWrapping;\n\t\t\ttexture.wrapT = texData.wrapT !== undefined ? texData.wrapT : ClampToEdgeWrapping;\n\n\t\t\ttexture.magFilter = texData.magFilter !== undefined ? texData.magFilter : LinearFilter;\n\t\t\ttexture.minFilter = texData.minFilter !== undefined ? texData.minFilter : LinearFilter;\n\n\t\t\ttexture.anisotropy = texData.anisotropy !== undefined ? texData.anisotropy : 1;\n\n\t\t\tif ( texData.format !== undefined ) {\n\n\t\t\t\ttexture.format = texData.format;\n\n\t\t\t}\n\n\t\t\tif ( texData.type !== undefined ) {\n\n\t\t\t\ttexture.type = texData.type;\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmaps !== undefined ) {\n\n\t\t\t\ttexture.mipmaps = texData.mipmaps;\n\t\t\t\ttexture.minFilter = LinearMipmapLinearFilter; // presumably...\n\n\t\t\t}\n\n\t\t\tif ( texData.mipmapCount === 1 ) {\n\n\t\t\t\ttexture.minFilter = LinearFilter;\n\n\t\t\t}\n\n\t\t\ttexture.needsUpdate = true;\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}, onProgress, onError );\n\n\n\t\treturn texture;\n\n\t}\n\n} );\n\n\nexport { DataTextureLoader };\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n"],"sourceRoot":""}