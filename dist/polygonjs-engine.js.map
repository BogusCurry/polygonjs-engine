{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine/nodes/utils/params/ParamsConfig.ts","webpack:///./src/engine/nodes/sop/_Base.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionPointType.ts","webpack:///./src/engine/poly/InputCloneMode.ts","webpack:///./src/engine/poly/ParamType.ts","webpack:///./src/engine/poly/NodeContext.ts","webpack:///./src/core/ThreeToGl.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinition.ts","webpack:///./src/engine/nodes/utils/connections/NamedConnectionPoint.ts","webpack:///./src/engine/nodes/gl/_Base.ts","webpack:///./src/core/geometry/Constant.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunction.ts","webpack:///./src/core/String.ts","webpack:///./src/engine/nodes/utils/shaders/ShaderName.ts","webpack:///./src/core/geometry/Geometry.ts","webpack:///./src/engine/poly/NodeEvent.ts","webpack:///./src/engine/expressions/methods/_Base.ts","webpack:///./src/engine/Poly.ts","webpack:///./src/core/graph/CoreGraphNode.ts","webpack:///./src/engine/nodes/mat/_Base.ts","webpack:///./src/engine/nodes/obj/_Base.ts","webpack:///./modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./src/engine/nodes/obj/utils/TransformController.ts","webpack:///./src/core/Transform.ts","webpack:///./src/engine/nodes/_Base.ts","webpack:///./src/engine/params/_Base.ts","webpack:///./src/engine/nodes/utils/FlagsController.ts","webpack:///./src/engine/nodes/gl/gl/quaternion.glsl","webpack:///./src/core/Walker.ts","webpack:///./src/engine/poly/ParamEvent.ts","webpack:///./src/core/math/_Module.ts","webpack:///./src/engine/nodes/mat/utils/SideController.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/_BaseMaterial.ts","webpack:///./src/engine/nodes/utils/ContainerController.ts","webpack:///./src/core/geometry/Attribute.ts","webpack:///./src/engine/containers/_Base.ts","webpack:///./src/engine/nodes/mat/utils/SkinningController.ts","webpack:///./src/engine/nodes/mat/utils/TextureMapController.ts","webpack:///./src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack:///./src/engine/params/Ramp.ts","webpack:///./src/core/MapUtils.ts","webpack:///./src/engine/poly/registers/Category.ts","webpack:///./src/engine/nodes/cop/_Base.ts","webpack:///./src/engine/nodes/gl/code/Controller.ts","webpack:///./src/engine/nodes/gl/code/globals/Geometry.ts","webpack:///./src/engine/nodes/gl/utils/ConnectionsController.ts","webpack:///./src/engine/nodes/cop/File.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/_BaseController.ts","webpack:///./src/engine/params/_Multiple.ts","webpack:///./src/engine/io/json/export/Param.ts","webpack:///./src/engine/nodes/gl/code/assemblers/_Base.ts","webpack:///./src/engine/nodes/mat/utils/_BaseController.ts","webpack:///./src/core/geometry/Material.ts","webpack:///./modules/three/examples/jsm/libs/inflate.module.min.js","webpack:///./src/engine/params/_Numeric.ts","webpack:///./src/engine/poly/Assert.ts","webpack:///./src/engine/io/json/export/Scene.ts","webpack:///./src/engine/nodes/gl/code/configs/ShaderConfig.ts","webpack:///./src/engine/nodes/gl/code/configs/VariableConfig.ts","webpack:///./src/engine/nodes/utils/code/controllers/ParamConfigsController.ts","webpack:///./src/engine/nodes/mat/utils/ColorsController.ts","webpack:///./src/engine/nodes/mat/utils/UniformsColorsController.ts","webpack:///./src/engine/nodes/mat/_BaseBuilder.ts","webpack:///./src/engine/nodes/obj/_BaseLightTransformed.ts","webpack:///./src/engine/nodes/obj/utils/helpers/_BaseLightHelper.ts","webpack:///./src/engine/nodes/obj/utils/HelperController.ts","webpack:///./src/engine/nodes/obj/_BaseManager.ts","webpack:///./src/engine/nodes/obj/utils/LayersController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/PostProcessController.ts","webpack:///./src/engine/io/json/import/Param.ts","webpack:///./src/engine/nodes/event/_Base.ts","webpack:///./src/engine/nodes/utils/NameController.ts","webpack:///./src/engine/params/utils/OptionsController.ts","webpack:///./src/engine/expressions/traversers/_Base.ts","webpack:///./src/core/AsyncFunction.ts","webpack:///./src/engine/params/String.ts","webpack:///./src/engine/nodes/gl/Attribute.ts","webpack:///./src/engine/io/json/export/Dispatcher.ts","webpack:///./src/engine/nodes/gl/code/utils/LineType.ts","webpack:///./src/engine/nodes/gl/code/utils/NodeFinder.ts","webpack:///./src/engine/nodes/event/CameraOrbitControls.ts","webpack:///./src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/_BaseMesh.ts","webpack:///./src/engine/nodes/obj/_BaseLight.ts","webpack:///./src/core/geometry/Object.ts","webpack:///./modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack:///./src/engine/nodes/gl/code/globals/Texture.ts","webpack:///./src/core/geometry/util/Curve.ts","webpack:///./src/engine/scene/PolyScene.ts","webpack:///./src/engine/nodes/event/MouseEvent.ts","webpack:///./src/engine/nodes/utils/states/Base.ts","webpack:///./src/engine/nodes/utils/Serializer.ts","webpack:///./src/engine/params/types/ParamConstructorByType.ts","webpack:///./src/engine/params/utils/ExpressionController.ts","webpack:///./src/engine/expressions/traversers/ParsedTree.ts","webpack:///./src/core/DecomposedPath.ts","webpack:///./src/core/math/Easing.ts","webpack:///./src/engine/params/Float.ts","webpack:///./src/engine/params/OperatorPath.ts","webpack:///./src/engine/scene/utils/events/MouseEventsController.ts","webpack:///./src/engine/nodes/utils/flags/Base.ts","webpack:///./src/engine/nodes/gl/code/globals/_Base.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinitionCollection.ts","webpack:///./src/engine/nodes/utils/shaders/NodeTraverser.ts","webpack:///./src/engine/nodes/gl/Globals.ts","webpack:///./modules/three/examples/jsm/controls/OrbitControls.js","webpack:///./src/engine/nodes/utils/code/controllers/TranspiledFilter.ts","webpack:///./src/engine/nodes/gl/_BaseAdaptive.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2.ts","webpack:///./src/engine/nodes/gl/Constant.ts","webpack:///./src/engine/nodes/gl/_Math_Arg3.ts","webpack:///./src/engine/nodes/gl/gl/fit.glsl","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.frag.glsl","webpack:///./src/engine/nodes/mat/MeshStandard.ts","webpack:///./src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack:///./src/engine/nodes/mat/PointsBuilder.ts","webpack:///./src/engine/nodes/obj/_BaseCamera.ts","webpack:///./src/core/geometry/Group.ts","webpack:///./src/core/geometry/Point.ts","webpack:///./src/core/geometry/Entity.ts","webpack:///./src/core/Iterator.ts","webpack:///./src/core/geometry/util/Circle.ts","webpack:///./src/core/geometry/Instancer.ts","webpack:///./src/core/loader/geometry/JsonData.ts","webpack:///./modules/three/examples/jsm/loaders/DRACOLoader.js","webpack:///./src/core/geometry/operation/Skin.ts","webpack:///./src/engine/io/json/import/Dispatcher.ts","webpack:///./src/engine/index.ts","webpack:///./src/engine/scene/utils/CamerasController.ts","webpack:///./src/engine/scene/utils/Cooker.ts","webpack:///./src/core/graph/CoreGraph.ts","webpack:///./src/engine/scene/utils/CookController.ts","webpack:///./src/engine/scene/utils/DispatchController.ts","webpack:///./src/engine/poly/RenderersController.ts","webpack:///./src/engine/poly/NodesRegister.ts","webpack:///./src/engine/scene/utils/events/EventsController.ts","webpack:///./src/core/graph/DirtyController.ts","webpack:///./src/engine/nodes/utils/UIData.ts","webpack:///./src/engine/nodes/utils/StatesController.ts","webpack:///./src/engine/nodes/utils/states/TimeDependent.ts","webpack:///./src/engine/nodes/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/hierarchy/ParentController.ts","webpack:///./src/engine/nodes/utils/hierarchy/ChildrenController.ts","webpack:///./src/core/NodeSelection.ts","webpack:///./src/engine/nodes/utils/LifeCycleController.ts","webpack:///./src/engine/nodes/utils/CookController.ts","webpack:///./src/engine/nodes/utils/DependenciesController.ts","webpack:///./src/engine/params/utils/EmitController.ts","webpack:///./src/engine/params/utils/Serializer.ts","webpack:///./src/engine/params/utils/StatesController.ts","webpack:///./src/engine/params/utils/states/TimeDependent.ts","webpack:///./src/engine/params/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/params/ParamsController.ts","webpack:///./src/engine/params/Boolean.ts","webpack:///./src/engine/expressions/ExpressionManager.ts","webpack:///./src/engine/expressions/traversers/FunctionGenerator.ts","webpack:///./src/engine/expressions/LiteralConstructsController.ts","webpack:///./src/engine/expressions/methods/_Module.ts","webpack:///./src/engine/expressions/methods/bbox.ts","webpack:///./src/engine/expressions/MethodDependency.ts","webpack:///./src/engine/expressions/methods/centroid.ts","webpack:///./src/engine/expressions/methods/ch.ts","webpack:///./src/engine/expressions/methods/copy.ts","webpack:///./src/engine/expressions/methods/cop_res.ts","webpack:///./src/engine/expressions/methods/local.ts","webpack:///./src/engine/expressions/methods/opdigits.ts","webpack:///./src/engine/expressions/methods/point.ts","webpack:///./src/engine/expressions/methods/points_count.ts","webpack:///./src/engine/expressions/methods/str_chars_count.ts","webpack:///./src/engine/expressions/methods/str_concat.ts","webpack:///./src/engine/expressions/methods/str_index.ts","webpack:///./src/engine/expressions/methods/str_sub.ts","webpack:///./src/engine/expressions/AttributeRequirementsController.ts","webpack:///./src/engine/expressions/traversers/ExpressionStringGenerator.ts","webpack:///./src/engine/expressions/DependenciesController.ts","webpack:///./src/engine/params/Button.ts","webpack:///./src/engine/params/Color.ts","webpack:///./src/engine/params/Folder.ts","webpack:///./src/engine/params/Integer.ts","webpack:///./src/engine/params/ramp/RampValue.ts","webpack:///./src/engine/params/Separator.ts","webpack:///./src/engine/params/Vector2.ts","webpack:///./src/engine/params/Vector3.ts","webpack:///./src/engine/params/Vector4.ts","webpack:///./src/engine/nodes/utils/params/ParamsValueAccessor.ts","webpack:///./src/engine/nodes/utils/ProcessingContext.ts","webpack:///./src/engine/nodes/utils/connections/IOController.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionsController.ts","webpack:///./src/engine/nodes/utils/connections/InputsController.ts","webpack:///./src/engine/nodes/utils/connections/NodeConnection.ts","webpack:///./src/engine/nodes/utils/connections/OutputsController.ts","webpack:///./src/engine/nodes/utils/params/ParamsAccessor.ts","webpack:///./src/engine/containers/Event.ts","webpack:///./src/engine/scene/utils/events/_BaseEventsController.ts","webpack:///./src/engine/scene/utils/LifeCycleController.ts","webpack:///./src/engine/scene/utils/LoadingController.ts","webpack:///./src/engine/scene/utils/ExpressionsController.ts","webpack:///./src/engine/scene/utils/MissingReferencesController.ts","webpack:///./src/engine/expressions/MissingReference.ts","webpack:///./src/engine/scene/utils/NodesController.ts","webpack:///./src/engine/nodes/manager/ObjectsManager.ts","webpack:///./src/engine/nodes/manager/_Base.ts","webpack:///./src/engine/containers/Manager.ts","webpack:///./src/core/performance/CorePerformance.ts","webpack:///./src/core/performance/PerformanceNode.ts","webpack:///./src/engine/scene/utils/TimeController.ts","webpack:///./src/engine/poly/SceneEvent.ts","webpack:///./src/engine/scene/utils/Serializer.ts","webpack:///./src/engine/scene/utils/UniformsController.ts","webpack:///./src/engine/scene/utils/WebGLController.ts","webpack:///./src/engine/poly/registers/All.ts","webpack:///./src/engine/poly/registers/Cop.ts","webpack:///./src/engine/nodes/cop/Builder.ts","webpack:///./src/engine/containers/Texture.ts","webpack:///./src/engine/nodes/utils/flags/Bypass.ts","webpack:///./src/engine/nodes/utils/flags/Display.ts","webpack:///./src/engine/nodes/gl/utils/SpareParamsController.ts","webpack:///./src/engine/io/json/export/Node.ts","webpack:///./src/engine/io/json/export/param/Numeric.ts","webpack:///./src/engine/io/json/export/param/OperatorPath.ts","webpack:///./src/engine/io/json/export/param/String.ts","webpack:///./src/engine/io/json/export/param/Ramp.ts","webpack:///./src/engine/nodes/gl/code/assemblers/textures/Texture.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeBuilder.ts","webpack:///./src/engine/nodes/utils/code/configs/ParamConfig.ts","webpack:///./src/engine/nodes/gl/code/utils/ShadersCollectionController.ts","webpack:///./src/engine/nodes/gl/code/utils/LinesController.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeFormatter.ts","webpack:///./src/engine/nodes/utils/shaders/BaseAssembler.ts","webpack:///./src/engine/nodes/gl/code/templates/textures/Default.frag.glsl","webpack:///./src/core/Sleep.ts","webpack:///./src/engine/nodes/cop/EnvMap.ts","webpack:///./src/core/loader/Texture.ts","webpack:///./modules/three/examples/jsm/loaders/RGBELoader.js","webpack:///./modules/three/examples/jsm/loaders/BasisTextureLoader.js","webpack:///./src/engine/nodes/cop/Null.ts","webpack:///./src/engine/nodes/cop/Switch.ts","webpack:///./src/engine/poly/registers/Event.ts","webpack:///./src/engine/nodes/event/CameraMapControls.ts","webpack:///./src/engine/nodes/event/_BaseCameraControls.ts","webpack:///./src/engine/nodes/event/Code.ts","webpack:///./src/engine/poly/registers/Gl.ts","webpack:///./src/engine/nodes/gl/_ConversionMisc.ts","webpack:///./src/engine/nodes/gl/_ConversionToVec.ts","webpack:///./src/engine/nodes/gl/_ConversionVecTo.ts","webpack:///./src/engine/nodes/gl/_Math_Arg1.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2Operation.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2Boolean.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunctionArgBoolean2.ts","webpack:///./src/engine/nodes/gl/Align.ts","webpack:///./src/engine/nodes/gl/Complement.ts","webpack:///./src/engine/nodes/gl/gl/complement.glsl","webpack:///./src/engine/nodes/gl/Cross.ts","webpack:///./src/engine/nodes/gl/Cycle.ts","webpack:///./src/engine/nodes/gl/gl/cycle.glsl","webpack:///./src/engine/nodes/gl/Disk.ts","webpack:///./src/engine/nodes/gl/gl/disk.glsl","webpack:///./src/engine/nodes/gl/Easing.ts","webpack:///./src/engine/nodes/gl/gl/easing/circular-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/circular-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/linear.glsl","webpack:///./src/engine/nodes/gl/gl/easing/circular-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-out.glsl","webpack:///./src/engine/nodes/gl/Fit.ts","webpack:///./src/engine/nodes/gl/Fit01.ts","webpack:///./src/engine/nodes/gl/HsvToRgb.ts","webpack:///./src/engine/nodes/gl/gl/hsv2rgb.glsl","webpack:///./src/engine/nodes/gl/InstanceTransform.ts","webpack:///./src/engine/nodes/gl/Length.ts","webpack:///./src/engine/nodes/gl/Luminance.ts","webpack:///./src/engine/nodes/gl/Mix.ts","webpack:///./src/engine/nodes/gl/MultAdd.ts","webpack:///./src/engine/nodes/gl/Negate.ts","webpack:///./src/engine/nodes/gl/Noise.ts","webpack:///./src/engine/nodes/gl/gl/noise/common.glsl","webpack:///./src/engine/nodes/gl/gl/noise/classicnoise2D.glsl","webpack:///./src/engine/nodes/gl/gl/noise/classicnoise3D.glsl","webpack:///./src/engine/nodes/gl/gl/noise/classicnoise4D.glsl","webpack:///./src/engine/nodes/gl/gl/noise/noise2D.glsl","webpack:///./src/engine/nodes/gl/gl/noise/noise3D.glsl","webpack:///./src/engine/nodes/gl/gl/noise/noise4D.glsl","webpack:///./src/engine/nodes/gl/Null.ts","webpack:///./src/engine/nodes/gl/Output.ts","webpack:///./src/engine/nodes/gl/Param.ts","webpack:///./src/engine/nodes/gl/Refract.ts","webpack:///./src/engine/nodes/gl/QuatMult.ts","webpack:///./src/engine/nodes/gl/QuatFromAxisAngle.ts","webpack:///./src/engine/nodes/gl/QuatToAngle.ts","webpack:///./src/engine/nodes/gl/QuatToAxis.ts","webpack:///./src/engine/nodes/gl/Ramp.ts","webpack:///./src/engine/nodes/gl/Random.ts","webpack:///./src/engine/nodes/gl/RgbToHsv.ts","webpack:///./src/engine/nodes/gl/gl/rgb2hsv.glsl","webpack:///./src/engine/nodes/gl/Rotate.ts","webpack:///./src/engine/nodes/gl/Round.ts","webpack:///./src/engine/nodes/gl/Texture.ts","webpack:///./src/engine/nodes/gl/TwoWaySwitch.ts","webpack:///./src/engine/nodes/gl/VectorAlign.ts","webpack:///./src/engine/nodes/gl/VectorAngle.ts","webpack:///./src/engine/poly/registers/Mat.ts","webpack:///./src/engine/nodes/mat/MeshBasic.ts","webpack:///./src/engine/containers/Material.ts","webpack:///./src/engine/nodes/mat/MeshBasicBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Basic.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDistance.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepth.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepthDOF.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.vert.glsl","webpack:///./src/engine/nodes/mat/MeshLambert.ts","webpack:///./src/engine/nodes/mat/MeshLambertBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Lambert.ts","webpack:///./src/engine/nodes/mat/MeshStandardBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Standard.ts","webpack:///./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl","webpack:///./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl","webpack:///./src/engine/nodes/mat/Points.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Points.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepth.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDepth.vert.glsl","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDistance.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDistance.vert.glsl","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepthDOF.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDepthDOF.vert.glsl","webpack:///./src/engine/poly/registers/Obj.ts","webpack:///./src/engine/nodes/obj/AmbientLight.ts","webpack:///./src/engine/containers/Object.ts","webpack:///./src/engine/nodes/obj/AreaLight.ts","webpack:///./src/engine/nodes/obj/DirectionalLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/DirectionalLightHelper.ts","webpack:///./src/engine/nodes/obj/HemisphereLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/HemisphereLightHelper.ts","webpack:///./src/engine/nodes/obj/PointLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/PointLightHelper.ts","webpack:///./src/engine/nodes/obj/SpotLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/SpotLightHelper.ts","webpack:///./src/engine/nodes/obj/Events.ts","webpack:///./src/engine/nodes/obj/Materials.ts","webpack:///./src/engine/nodes/obj/Cop.ts","webpack:///./src/engine/nodes/obj/PostProcess.ts","webpack:///./src/engine/nodes/obj/Geo.ts","webpack:///./src/engine/nodes/utils/DisplayNodeController.ts","webpack:///./src/engine/nodes/obj/Null.ts","webpack:///./src/engine/nodes/obj/Fog.ts","webpack:///./src/engine/nodes/obj/Scene.ts","webpack:///./src/engine/nodes/obj/OrthographicCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/ControlsController.ts","webpack:///./src/engine/nodes/event/utils/CameraControlConfig.ts","webpack:///./modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./src/engine/viewers/Threejs.ts","webpack:///./src/engine/viewers/_Base.ts","webpack:///./src/engine/viewers/utils/CamerasController.ts","webpack:///./src/engine/viewers/utils/ControlsController.ts","webpack:///./src/engine/viewers/utils/EventsController.ts","webpack:///./src/engine/viewers/utils/WebglController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/OrthographicCameraController.ts","webpack:///./src/engine/nodes/obj/PerspectiveCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/PerspectiveCameraController.ts","webpack:///./src/engine/poly/registers/Sop.ts","webpack:///./src/engine/nodes/sop/Add.ts","webpack:///./src/core/geometry/Face.ts","webpack:///./src/core/geometry/MonkeyPatcher.ts","webpack:///./src/engine/containers/Geometry.ts","webpack:///./src/engine/nodes/sop/AnimationCopy.ts","webpack:///./src/engine/nodes/sop/AnimationMixer.ts","webpack:///./src/engine/nodes/sop/AttribAddMult.ts","webpack:///./src/engine/nodes/sop/AttribCopy.ts","webpack:///./src/engine/nodes/sop/AttribCreate.ts","webpack:///./src/engine/nodes/sop/AttribDelete.ts","webpack:///./src/engine/nodes/sop/AttribNormalize.ts","webpack:///./src/engine/nodes/sop/AttribPromote.ts","webpack:///./src/engine/nodes/sop/AttribRemap.ts","webpack:///./src/engine/nodes/sop/AttribRename.ts","webpack:///./src/engine/nodes/sop/AttribTransfer.ts","webpack:///./src/core/math/Interpolate.ts","webpack:///./src/core/math/octree/Octree.ts","webpack:///./src/core/math/octree/Node.ts","webpack:///./src/engine/nodes/sop/BboxScatter.ts","webpack:///./src/engine/nodes/sop/Blend.ts","webpack:///./src/engine/nodes/sop/Box.ts","webpack:///./src/engine/nodes/sop/Cache.ts","webpack:///./src/engine/nodes/sop/Circle.ts","webpack:///./src/engine/nodes/sop/Code.ts","webpack:///./src/engine/nodes/sop/Color.ts","webpack:///./src/core/Color.ts","webpack:///./src/engine/nodes/sop/Cone.ts","webpack:///./src/engine/nodes/sop/Copy.ts","webpack:///./src/engine/nodes/sop/utils/CopyStamp.ts","webpack:///./src/engine/nodes/sop/Data.ts","webpack:///./src/core/geometry/AttributeData.ts","webpack:///./src/engine/nodes/sop/DataUrl.ts","webpack:///./src/engine/nodes/sop/Delay.ts","webpack:///./src/engine/nodes/sop/Delete.ts","webpack:///./src/engine/nodes/sop/Face.ts","webpack:///./src/engine/nodes/sop/File.ts","webpack:///./src/core/loader/Geometry.ts","webpack:///./modules/three/examples/jsm/loaders/OBJLoader.js","webpack:///./src/engine/nodes/sop/Fuse.ts","webpack:///./src/engine/nodes/sop/Hexagons.ts","webpack:///./src/core/geometry/operation/Hexagon.ts","webpack:///./src/engine/nodes/sop/Hierarchy.ts","webpack:///./src/engine/nodes/sop/Instance.ts","webpack:///./src/engine/nodes/sop/Jitter.ts","webpack:///./src/engine/nodes/sop/Layer.ts","webpack:///./src/engine/nodes/sop/Line.ts","webpack:///./src/engine/nodes/sop/Material.ts","webpack:///./src/engine/nodes/sop/Merge.ts","webpack:///./src/engine/nodes/sop/Noise.ts","webpack:///./modules/three/examples/jsm/math/SimplexNoise.js","webpack:///./src/engine/nodes/sop/Normals.ts","webpack:///./src/engine/nodes/sop/Null.ts","webpack:///./src/engine/nodes/sop/ObjectMerge.ts","webpack:///./src/engine/nodes/sop/Occlusion.ts","webpack:///./src/engine/nodes/sop/ParticlesSystemGpu.ts","webpack:///./src/engine/nodes/gl/code/assemblers/particles/Particles.ts","webpack:///./src/engine/nodes/gl/code/templates/particles/Default.glsl","webpack:///./src/engine/nodes/gl/code/utils/TextureAllocationsController.ts","webpack:///./src/engine/nodes/gl/code/utils/TextureAllocation.ts","webpack:///./src/engine/nodes/gl/code/utils/TextureVariable.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/RenderController.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputeController.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputationRenderer.js","webpack:///./src/engine/nodes/sop/Peak.ts","webpack:///./src/engine/nodes/sop/Plane.ts","webpack:///./src/engine/nodes/sop/Point.ts","webpack:///./src/engine/nodes/sop/Polywire.ts","webpack:///./src/engine/nodes/sop/Ray.ts","webpack:///./src/engine/nodes/sop/Resample.ts","webpack:///./src/engine/nodes/sop/Scatter.ts","webpack:///./src/engine/nodes/sop/Shadows.ts","webpack:///./src/engine/nodes/sop/Skin.ts","webpack:///./src/engine/nodes/sop/Sphere.ts","webpack:///./src/engine/nodes/sop/Switch.ts","webpack:///./src/engine/nodes/sop/Text.ts","webpack:///./modules/three/examples/jsm/loaders/TTFLoader.js","webpack:///./src/engine/nodes/sop/Torus.ts","webpack:///./src/engine/nodes/sop/TorusKnot.ts","webpack:///./src/engine/nodes/sop/Transform.ts","webpack:///./src/engine/nodes/sop/Tube.ts","webpack:///./src/engine/nodes/sop/UvProject.ts","webpack:///./src/core/CameraController.ts","webpack:///./src/engine/io/json/import/Scene.ts","webpack:///./src/engine/io/json/import/Node.ts","webpack:///./src/engine/io/json/import/param/Multiple.ts","webpack:///./src/engine/io/json/import/param/String.ts","webpack:///./src/engine/io/json/import/param/Ramp.ts","webpack:///./modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./modules/three/examples/jsm/postprocessing/EffectComposer.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","type","init_value","options","ParamTemplate","BUTTON","ParamType","BOOLEAN","COLOR","FLOAT","FOLDER","INTEGER","OPERATOR_PATH","RAMP","RampParam","DEFAULT_VALUE","SEPARATOR","STRING","VECTOR2","VECTOR3","VECTOR4","ParamConfig","NodeParamsConfig","MESSAGE","DEFAULT_INPUT_NAMES","container_controller","TypedContainerController","GeometryContainer","flags","FlagsControllerDB","node_context","NodeContext","SOP","displayed_input_names","initialize_base_node","this","display","set","add_hook","active","parent","display_node_controller","set_display_node","io","outputs","set_has_one_output","set_core_group","core_group","objects","_set_object_attributes","set_container","FROM_SET_CORE_GROUP","set_object","set_container_objects","FROM_SET_OBJECT","set_objects","FROM_SET_OBJECTS","set_geometry","geometry","create_object","FROM_SET_GEOMETRY","set_geometries","geometries","forEach","FROM_SET_GEOMETRIES","message","container","core_content","CoreGroup","touch","index","position_array","getAttribute","array","setIndex","CoreConstant","OBJECT_TYPE","MESH","object_constructor","CONSTRUCTORS_BY_NAME","MATERIALS","clone","castShadow","receiveShadow","frustumCulled","material","scene","console","log","material_node","CoreMaterial","node","add_render_hook","_add_index","points_count","indices","TypedNode","TypedSopNode","BaseSopNodeClass","ConnectionPointType","ConnectionPointTypes","BOOL","INT","VEC2","VEC3","VEC4","ConnectionPointTypeToParamTypeMap","SAMPLER_2D","ParamTypeToConnectionPointTypeMap","undefined","ConnectionPointInitValueMap","DEFAULT_VALUE_JSON","ConnectionPointComponentsCountMap","InputCloneMode","any","CoreString","ensure_float","values","toArray","map","v","join","vector3","vec","vector2","vector3_float","num","float4","x","y","z","w","float3","float2","float","int","bool","ThreeToGl","GLDefinitionType","_definition_type","_data_type","_node","_name","collection_instance","TypedGLDefinitionCollection","TypedGLDefinition","ATTRIBUTE","data_type","AttributeGLDefinition","FUNCTION","FunctionGLDefinition","UNIFORM","UniformGLDefinition","VARYING","VaryingGLDefinition","_type","_init_value","to_json","_json","_create_json","TypedNamedConnectionPoint","spare_params_controller","GlNodeSpareParamsController","GL","connections","init_inputs","ui_data","set_layout_horizontal","set_named_output_connection_points","initialize_node","cook","warn","_set_mat_to_recompile","assembler_controller","set_compilation_required_and_dirty","gl_var_name","variable_for_input","input_index","inputs","get_input_index","connection","input_connection","input_node","node_src","output_connection_point","named_output_connection_points","output_index","output_name","full_path","params","set_lines","shaders_collection_controller","reset_code","_param_configs_controller","reset","set_param_configs","param_configs","list","gl_input_default_value","TypedGlNode","BaseGlNodeClass","ParamsConfig","params_config","ParamlessTypedGlNode","ObjectType","ObjectTypes","POINTS","LINE_SEGMENTS","ObjectTypeMenuEntries","indexOf","Mesh","LineSegments","Points","AttribClass","AttribType","materials","MeshStandard","MeshStandardMaterial","color","side","FrontSide","metalness","roughness","MeshLambertMaterial","Color","vertexColors","transparent","depthTest","PointsMaterial","size","LineBasicMaterial","linewidth","AttribClassMenuEntries","VERTEX","OBJECT","AttribTypeMenuEntries","NUMERIC","ATTRIB_CLASS","ATTRIB_TYPE","OBJECT_TYPES","CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME","Scene","Group","Object3D","Bone","SkinnedMesh","gl_method_name","gl_function_definitions","gl_connections_controller","set_expected_input_types_function","_expected_input_types","set_expected_output_types_function","_expected_output_types","set_input_name_function","_gl_input_name","first_input_connection_type","first_input_connection","count","Math","max","input_connections","var_type","joined_args","named_input_connection_points","body_line","add_body_lines","add_definitions","BaseAdaptiveGlNode","BaseGlMathFunctionGlNode","BaseNodeGlMathFunctionArg1GlNode","BaseNodeGlMathFunctionArg2GlNode","BaseNodeGlMathFunctionArg3GlNode","BaseNodeGlMathFunctionArg4GlNode","BaseNodeGlMathFunctionArg5GlNode","BooleanString","ATTRIB_NAMES_SEPARATOR","TAIL_DIGIT_MATCH_REGEXP","INDICES_LIST_SEPARATOR","NUM_REGEXP","is_boolean","word","TRUE","FALSE","to_boolean","is_number","test","tail_digits","match","parseInt","increment","digits","substring","pluralize","camel_case","upper_first","snake_case","titleize","replace","type_to_class_name","timestamp_to_seconds","Date","parse","seconds_to_timestamp","seconds","setTime","toISOString","substr","precision","val","decimals","elements","split","frac","string_to_pad","pad","num_as_string","match_mask","rule","RegExp","matches_one_mask","masks","mask","attrib_names","trimed_elements","e","to_id","reverse","id","exp","element","charCodeAt","Number","MAX_SAFE_INTEGER","indices_string","sort","a","b","range_elements","parsed","escape_line_breaks","ShaderName","ParticleShaderNames","PARTICLES_0","PARTICLES_1","PARTICLES_2","PARTICLES_3","PARTICLES_4","PARTICLES_5","PARTICLES_6","PARTICLES_7","PARTICLES_8","PARTICLES_9","_geometry","uuid","bounding_box","_bounding_box","_create_bounding_box","computeBoundingBox","boundingBox","mark_as_instance","userData","marked_as_instance","CoreGeometry","position_attrib_name","compute_vertex_normals","computeVertexNormals","user_data_attribs","indexed_attribute_names","keys","user_data_attrib","CoreAttribute","remap_name","is_attrib_indexed","has_attrib","attributes","attrib_type","attrib_sizes","h","attrib_name","itemSize","attrib_size","attrib","set_indexed_attribute_values","set_indexed_attribute","setAttribute","Int32BufferAttribute","add_numeric_attrib","default_value","attribute_added","vec2","vec3","col","g","vec4","Float32BufferAttribute","init_position_attribute","Vector3","add_attribute","attrib_data","rename_attribute","old_name","new_name","old_attrib","deleteAttribute","delete_attribute","src_geometry","src_userData","attribute_name","attribute","constructor","InterleavedBufferAttribute","MonkeyPatcher","patch","new_geometry","position","points","_points","points_from_geometry","reset_points","position_attrib","point_index","point","CorePoint","geometry_from_points","object_type","BufferGeometry","geometry_wrapper","first_point","old_geometry","old_geometry_wrapper","_indices_from_points","new_values","attrib_value","new_value","new_attrib_indices","new_index","new_index_by_old_index","index_attrib","old_index","old_index0","old_index1","old_index2","new_index0","new_index1","new_index2","merge_geometries","core_geometries","new_values_by_attribute_name","indexed_attribute_name","index_by_values","all_geometries_points","set_attrib_index","merged_geometry","BufferGeometryUtils","mergeBufferGeometries","merged_geometry_wrapper","mergedUserData","segments","faces","faces_from_geometry","faces_count","CoreFace","NodeEvent","param","required_arguments","optional_arguments","min_allowed_arguments_count","max_allowed_arguments_count","allowed_arguments_count","process_arguments","args","get_referenced_node_container","index_or_path","referenced_node","get_referenced_node","request_container","get_referenced_param","path","decomposed_path","CoreWalker","find_param","find_referenced_graph_node","input_graph_node","find_node","input","find_dependency","create_dependency_from_index_or_path","DecomposedPath","create_dependency","MethodDependency","BaseMethod","renderers_controller","RenderersController","nodes_register","NodesRegister","scenes_by_uuid","instance","_instance","Poly","register_node","tab_menu_category","registered_nodes","parent_context","in_worker_thread","desktop_controller","player_mode","set_env","env","_env","POLY","_scene","_dirty_controller","DirtyController","_graph_node_id","graph","next_id","setNode","_graph","set_name","set_dirty","trigger","set_successors_dirty","remove_dirty_state","is_dirty","add_post_dirty_hook","callback","graph_remove","removeNode","add_graph_input","src","connect","remove_graph_input","disconnect","graph_disconnect_predecessors","disconnect_predecessors","graph_disconnect_successors","disconnect_successors","graph_predecessor_ids","predecessor_ids","graph_predecessors","predecessors","graph_successors","successors","graph_all_predecessors","all_predecessors","graph_all_successors","all_successors","CoreGraphNode","MaterialContainer","_cook_main_without_inputs_when_dirty_bound","_cook_main_without_inputs_when_dirty","MAT","name_controller","add_post_set_full_path_hook","set_material_name","cook_controller","cook_main_without_inputs","_material","create_material","set_material","TypedMatNode","Material","BaseMatNodeClass","ObjNodeRenderOrder","ObjectContainer","render_order","MANAGER","_children_group","_attachable_to_hierarchy","_used_in_scene","OBJ","set_used_in_scene","state","loading_controller","is_loading","root","update_object","add_object_to_parent","attachable_to_hierarchy","add","remove_object_from_parent","remove","_object","_create_object_with_attributes","set_object_name","is_display_node_cooking","is_displayed","TypedObjNode","BaseObjNodeClass","camera","FullScreenQuad","Pass","enabled","needsSwap","clear","renderToScreen","assign","setSize","render","error","_mesh","dispose","renderer","TransformedParamConfig","Base","transform","scale","transform_controller","TransformController","TransformedObjNode","_update_transform_from_params_scale","set_count","set_depends_on_inputs","add_on_set_input_hook","on_input_updated","hook_name","dirty_controller","has_hook","add_to_parent_transform","remove_from_parent_transform","update","matrix","update_transform_with_matrix","equals","update_transform_from_params","matrixAutoUpdate","dispatchEvent","pv","rotation","copy","multiplyScalar","radians","CoreMath","degrees_to_radians","euler","Euler","updateMatrix","set_params_from_matrix","CoreTransform","_translation_matrix","Matrix4","_translation_matrix_q","Quaternion","_translation_matrix_s","_matrix","identity","_matrix_q","_matrix_e","_matrix_s","_rotate_geometry_m","_rotate_geometry_q","_rotate_geometry_vec_dest","update_scale","quaternion","decompose","setFromQuaternion","toVector3","divideScalar","PI","batch_update","set_vector3","set_float","set_params_from_object","translation_matrix","compose","matrix_quaternion","quat","MathUtils","degToRad","setFromEuler","rotate_geometry","vec_origin","vec_dest","normalize","setFromUnitVectors","makeRotationFromQuaternion","applyMatrix4","BaseContainer","ParamsValueAccessor","ParamsAccessor","_initialized","_display_node_controller","_parent_controller","HierarchyParentController","_children_controller_context","_create_children_controller","HierarchyChildrenController","_children_controller","children_allowed","_ui_data","UIData","_dependencies_controller","DependenciesController","_states","StatesController","_lifecycle","LifeCycleController","_serializer","NodeSerializer","_cook_controller","CookController","_io","IOController","_name_controller","NameController","_set_core_name","_params_controller","ParamsController","_processing_context","ProcessingContext","initialize_base_and_node","required_three_imports","required_imports","three_imports","require_webgl2","set_parent","parent_controller","create_params","add_param","input_contents","content","set_content","end_cook","create_node","children_controller","remove_node","children","nodes_by_type","set_input","input_index_or_name","output_index_or_name","emit","event_name","dispatch_controller","dispatch","include_param_components","serializer","BaseNodeClass","_options","OptionsController","_emit_controller","EmitController","_is_computing","initialize_param","_expression_controller","ParamSerializer","initialize_value","_value","convert","raw_val","are_raw_input_equal","val1","val2","is_raw_input_equal","other_raw_input","_raw_input","are_values_equal","is_value_equal","other_val","_clone_raw_input","raw_input","_prefilter_invalid_raw_input","emit_controller","ParamEvent","RAW_INPUT_UPDATED","process_raw_input","_default_value","compute","process_computation","_compute_resolves","pop","Promise","resolve","reject","set_init_value","set_node","makes_node_dirty_when_dirty","parent_param","params_node","components","set_parent_param","_parent_param","has_parent_param","path_relative_to","relative_path","emit_allowed","increment_count","_components","component_names","init_components","has_expression","expression_controller","TypedParam","BaseParamClass","has_display","has_bypass","Display","DisplayFlag","Bypass","bypass","BypassFlag","FlagsController","FlagsControllerD","FlagsControllerB","filter","first_element","next_node","PARENT","add_path_element","CURRENT","add_node","remainder","path_from_root","node_path","param_name","src_graph_node","dest_graph_node","closest_common_parent","distance","distance_to_parent","up","ups","parent_path_elements","remaining_elements","cmptr","dest_path_element","graph_node1","graph_node2","parents1","parents","parents2","min_depth","min","found_parent","graph_node_id","graph_node","dest","current","dest_id","make_absolute_path","path_elements","DOT","CURRENT_WITH_SLASH","PARENT_WITH_SLASH","NON_LETTER_PREFIXES","THREE","Triangle","RAD_DEG_RATIO","clamp","fit01","dest_min","dest_max","fit","src_min","src_max","degrees","radians_to_degrees","deg2rad","deg","rad2deg","rad","rand","number","rand_float","rand_vec2","round","step_size","steps_count","rounded_steps_count","ceil","floor","highest_even","uv","sn","fract","sin","geodesic_distance","lnglat1","lnglat2","φ1","lat","φ2","Δφ","Δλ","lng","cos","atan2","sqrt","expand_triangle","triangle","margin","TriangleProp","mid_point","getMidpoint","prop","delta","sub","delta_n","nearestPower2","pow","Easing","SideParamConfig","double_sided","front","visible_if","SidedMaterial","single_side","BackSide","new_side","DoubleSide","needsUpdate","BaseController","SideController","CustomMaterialName","_assemblers_by_custom_name","Map","ShaderMaterial","custom_assembler_class_by_custom_name","_add_custom_materials","class_by_custom_name","assembler_class","custom_name","_add_custom_material","custom_assembler","_gl_parent_node","custom_materials","compile_custom_materials","_code_builder","assembler","set_root_nodes","_root_nodes","set_param_configs_owner","set_shader_configs","shader_configs","set_variable_configs","variable_configs","custom_material","compile_material","compile_allowed","output_nodes","GlNodeFinder","find_output_nodes","states","_update_shaders","new_vertex_shader","_shaders_by_name","new_fragment_shader","FRAGMENT","vertexShader","fragmentShader","add_uniforms","uniforms","uniforms_time_dependent","uniforms_controller","add_time_dependent_uniform_owner","remove_time_dependent_uniform_owner","_lines","shader_names","shader_name","template","_template_shader_for_shader_name","build_code_from_nodes","_build_lines","lines","shadow_assembler_class_by_custom_name","add_output_body_line","output_node","input_name","named_input","var_input","variable_config","new_var","default_from_attribute","connection_point","named_input_connection_points_by_name","gl_type","attr_read","globals_handler","read_attribute","variable_config_default","default","prefix","suffix","if_condition","set_node_lines_output","current_shader_name","input_names","shader_config","set_node_lines_attribute","attribute_node","var_name","handle_gl_FragCoord","body_lines","handle_resolution","set_node_lines_globals","globals_node","definition","dependencies","definitions_by_shader_name","body_lines_by_shader_name","used_output_names","globals_shader_name","MapUtils","push_on_array_at_entry","dependency","set_uniforms_time_dependent","set_resolution_dependent","handle_globals_node","definitions","BaseGlShaderAssembler","ShaderAssemblerMaterial","container_class","_callbacks","_container","setTimeout","process_container_request","request_input_container","then","notify_requesters","reset_caches","cook_main","processing_context","callbacks","BaseContainerController","Vector2","ATTRIB_NAME_MAP","P","N","Cd","array_to_indexed_arrays","index_by_value","current_index","cloned_container","_content","_post_set_content","has_content","core_content_cloned","infos","TypedContainer","SkinningParamConfig","skinning","SkinnedMaterial","new_skinning","SkinningController","TextureMapParamConfig","use_map","BooleanParamOptions","TextureMapController","FileCopNode","DEFAULT_NODE_PATH","UV","OperatorPathOptions","_update_options","add_hooks","_update","texture_map_controller","BaseTextureMapController","TextureAlphaMapParamConfig","use_alpha_map","TextureAlphaMapController","alpha_map","texture_alpha_map_controller","_reset_ramp_interpolant_and_texture_bound","_reset_ramp_interpolant_and_texture","RampValue","from_json","raw_input1","raw_input2","is_equal","is_equal_json","are_json_equal","VALUE_UPDATED","_ramp_interpolant","_ramp_texture","ramp_texture","_create_ramp_texture","Uint8Array","stride","width","value_at_position","texture","DataTexture","RGBFormat","create_interpolant","positions","interpolated_values","Float32Array","CubicInterpolant","interpolant","_create_interpolant","sorted_points","sorted_point","evaluate","RampInterpolation","LINEAR","RampPoint","new_element","has","unshift_on_array_at_entry","unshift","concat_on_array_at_entry","new_elements","CATEGORY_OBJ","LIGHT","GEOMETRY","CAMERA","MISC","CATEGORY_COP","INPUT","ADVANCED","CATEGORY_EVENT","CATEGORY_GL","CONVERSION","DYNAMICS","GLOBALS","LOGIC","MATH","QUAT","TRIGO","UTIL","INSTANCE","CATEGORY_MAT","LINE","VOLUME","CATEGORY_SOP","ANIMATION","MODIFIER","PRIMITIVES","RENDER","CATEGORY_POST","PASS","Uint16Array","EMPTY_DATA_TEXTURE","LuminanceFormat","HalfFloatType","TextureContainer","COP","set_texture","clear_texture","TypedCopNode","BaseCopNodeClass","AssemblerControllerNode","_globals_handler","GlobalsGeometryHandler","_compile_required","_deleted_params_data","_assembler","set_assembler_globals_handler","reset_configs","add_output_params","output_child","add_globals_params","allow_attribute_exports","on_create","globals","output","set_position","set_compilation_required","new_state","trigger_node","compile_required","post_compile","create_spare_parameters","assign_uniform_values","set_uniform_value","current_spare_param_names","spare_names","assembler_param_names","spare_param_names_to_add","spare_param_names_to_remove","params_update_options","current_param_names","names","spare_params_with_same_name_as_params","error_message","param_exporter","JsonExportDispatcher","dispatch_param","required","params_data","names_to_delete","param_config","param_options","spare","to_add","update_params","GlAssemblerController","VARIABLE_CONFIG_DEFAULT_BY_NAME","named_output_connection_points_by_name","variable_name","PRE_DEFINED_ATTRIBUTES","AttributeGlNode","varying_definition","set_varying_body_line","handle_attribute_node","IF_RULE","GlobalsBaseController","_input_name_function","_output_name_function","_expected_input_types_function","_expected_output_types_function","_update_signature_if_required_bound","update_signature_if_required","func","set_output_name_function","add_on_scene_load_hook","set_post_create_params_hook","dirty_trigger","lifecycle","creation_completed","_connections_match_inputs","update_connection_types","make_successors_update_signatures","gl_node","expected_input_types","expected_output_types","named_input_connections","named_outputs","set_named_input_connection_points","current_input_types","current_output_types","first_connection","connection_type_from_connection","GlConnectionsController","MAPPINGS","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","WRAPPINGS","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","MAG_FILTERS","LinearFilter","NearestFilter","MIN_FILTERS","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","ATTRIB_MAPPING_KEYS","ATTRIB_MAPPING","mapping","wrapS","wrapT","minFilter","magFilter","url","CoreTextureLoader","PARAM_DEFAULT","desktop_browse","file_type","reload","PARAM_CALLBACK_reload","menu","entries","wrap_s","wrap_t","mag_filter","min_filter","_is_static_image_url","cook_for_image","cook_for_video","_load_texture","_update_texture_params","_param_url_changed","_add_video_spare_params_if_required","_previous_param_url","_set_video_current_time","resolved_url","texture_attrib","param_value","param_callback_reload","_video","currentTime","VideoTexture","image","has_param","VIDEO_TIME_PARAM_NAME","duration","range","range_locked","PARAMS_UPDATED","_remove_spare_params","_texture_loader","load_texture_from_url_or_op","ENV_MAP","background","use_background","use_material","background_color","background_material","node_selection","context","dependent_on_found_node","background_ratio","_bg_raycaster","Raycaster","_screen_quad","_create_screen_quad","PlaneBufferGeometry","quad","screen_quad_flat_material","_screen_quad_flat_material","MeshBasicMaterial","add_params","boolean","use_background_color","update_screen_quad","update_background_color","use_background_material","update_background_material","screen_quad","bg_node","found_node","BaseBackgroundController","_components_contructor","FloatParam","is_default","Array","component_name","component","default_val","compute_components","set_value_from_components","promises","all","cooker","block","block_parent_emit","unblock","unblock_parent_emit","TypedMultipleParam","_param","_complex_data","is_spare_and_not_component","is_spare","value_changed","_require_data_complex","_data_complex","_data_simple","raw_input_serialized","default_value_serialized","add_main","has_options_overridden","overridden_options","options_overridden","option_name","option_value","JSON","stringify","ParamJsonExporter","INSERT_DEFINE_AFTER_MAP","INSERT_BODY_AFTER_MAP","LINES_TO_REMOVE_MAP","_leaf_nodes","_uniforms_time_dependent","_resolution_dependent","compile","_template_shader","shaders_by_name","_replace_template","root_nodes","current_uniforms","uniform_name","uniform","time","resolution_dependent","root_nodes_by_shader_name","leaf_nodes_by_shader_name","GlobalsGlNode","CodeBuilder","code_builder","build_from_nodes","allow_new_param_configs","disallow_new_param_configs","builder_param_configs","builder_lines","line_type","all_builder_lines","all_lines","_param_config_owner","param_config_owner","hidden","create_globals_node_output_connections","_reset_shader_configs","_reset_variable_configs","_reset_uniforms_time_dependency","_reset_resolution_dependency","_shader_configs","create_shader_configs","sc","ShaderConfig","_variable_configs","create_variable_configs","vc","VariableConfig","if","input_names_for_shader_name","root_node","insert_define_after","insert_body_after","lines_to_remove","function_declaration","LineType","FUNCTION_DECLARATION","define","DEFINE","body","BODY","template_lines","new_lines","line_before_define","line_before_body","line_before_define_found","line_before_body_found","template_line","_insert_lines","line_remove_required","line_to_remove","lines_to_add","line_to_add","get_custom_materials","TypedAssembler","src_material","clone_single","apply_custom_materials","material_with_custom","mat_name","assign_custom_uniforms","mat","uniform_value","init_custom_material_uniforms","mod","aa","execScript","Uint32Array","DataView","f","k","POSITIVE_INFINITY","bufferSize","bufferType","resize","A","Error","B","C","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","fa","G","H","I","J","K","L","da","ea","O","R","ga","Q","W","verify","ha","method","buffer","Y","Z","$","ia","X","ADAPTIVE","BLOCK","Zlib","converted","set_expression","EXPRESSION_UPDATED","_update_value","ExpressionController","expression","requires_entities","compute_expression","expression_result","is_errored","execute_callback","TypedNumericParam","unreachable","TypeAssert","_data","nodes_controller","reset_node_context_signatures","root_exporter","dispatch_node","nodes_data","properties","frame","frame_range","frame_range_locked","time_controller","master_camera_node_path","cameras_controller","ui","sanitize_string","SceneJsonExporter","_input_names","_dependencies","_param_configs","create_and_push","ParamConfigsController","ColorParamConfig","use_vertex_colors","opacity","alpha_test","use_fog","ColoredMaterial","new_vertex_color","alphaTest","fog","ColorsController","add_on_create_hook","init","_assembler_controller","_create_assembler_controller","compile_if_required","_compile","TypedBuilderMatNode","update_light_params","update_shadow_params","TypedLightObjNode","BaseLightTransformedObjNode","BaseLightHelperParamConfig","show_helper","helper_size","BaseLightHelperObjNode","wireframe","build","build_helper","BaseLightHelper","_helper_constructor","update_helper_attachment","helper","_helper","_create_helper","light","visible","HelperController","BaseManagerObjNode","layer","layers","enable","integer","LayersController","operator_path_param_options","POST","do_post_process","post_process","use_post_process_node0","post_process_node0","use_post_process_node1","post_process_node1","use_post_process_node2","post_process_node2","use_post_process_node3","post_process_node3","_renderers_by_canvas_id","_composers_by_canvas_id","_resolution_by_canvas_id","_composers_set_in_progress_by_canvas_id","_fetch_post_process_nodes_in_progress","_post_process_nodes","_post_process_use_node_path_params","_post_process_node_path_params","canvas","aspect","composer","setup_for_aspect_ratio","default_scene","create_renderer","gl","rendering_context","WebGLRenderer","antialias","alpha","shadowMap","physicallyCorrectLights","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","register_renderer","set_renderer_size","setPixelRatio","devicePixelRatio","delete_renderer","deregister_renderer","_create_composer","EffectComposer","set_composer_passes","update_composer_passes","composer_passes_nodes_changed","toggle_param","post_process_node","set_composers_passes","clear_render_passes","render_scene_pass","RenderPass","clearAlpha","addPass","apply_to_composer","render_pass","passes","disposable_pass","PostProcessController","process_data","ParamJsonImporter","EventContainer","_eval_all_params_on_dirty_bound","_eval_all_params_on_dirty","EVENT","eval_all","process_event","event","camera_node","TypedEventNode","BaseEventNodeClass","_graph_node","base_name","base","last_char","request_name_to_parent","set_child_name","update_name_from_parent","post_set_name","post_set_full_path","child_node","missing_expression_references_controller","check_for_missing_references","expressions_controller","regenerate_referring_expressions","NAME_UPDATED","add_post_set_name_hook","hook","_on_set_name_hooks","_on_set_full_path_hooks","StringParamLanguage","_programatic_visible_state","_update_visibility_and_remove_dirty_bound","update_visibility_and_remove_dirty","_ui_data_dependency_set","_default_options","options_controller","set_option","overriden","has_callback","loaded","get_callback","is_cooking","create_callback_from_string","callback_string","Function","cook_options","desktop_browse_option","desktop_browse_file_type","expr_option","menu_options","has_menu","language","node_selection_options","ensure_in_range","texture_as_env","texture_options","is_hidden","set_visible_state","VISIBLE_UPDATED","is_field_hidden","ui_data_depends_on_other_params","visibility_predecessors","predecessor_names","set_ui_data_dependency","_visibility_graph_node","predecessor","update_visibility","expected_val","VARIABLE_PREFIX","_set_error_from_error_bound","_set_error_from_error","clear_error","_error_message","set_error","traverse_node","method_name","traverse_BinaryExpression","left","operator","right","traverse_LogicalExpression","traverse_MemberExpression","traverse_ConditionalExpression","consequent","alternate","traverse_Compound","traversed_args","arg_node","traverse_Literal","raw","BaseTraverser","AsyncFunction","getPrototypeOf","_value_elements","ParsedTree","string_value_elements","StringParam","ConnectionPointTypesAvailableForAttribute","_on_create_set_name_if_none_bound","_on_create_set_name_if_none","_set_mat_to_recompile_if_is_exporting","INPUT_NAME","OUTPUT_NAME","connected_input_node","connected_input_connection_point","named_input_connection_point","export_when_connected","is_exporting","NodeJsonExporter","ParamNumericJsonExporter","OperatorPathParam","ParamOperatorPathJsonExporter","ParamStringJsonExporter","ParamRampJsonExporter","find_attribute_export_nodes","allow_pan","allow_rotate","allow_zoom","tdamping","damping","screen_space_panning","rotate_speed","min_distance","max_distance","polar_angle_range","create_controls_instance","OrbitControls","setup_controls","controls","enablePan","enableRotate","enableZoom","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableKeys","set_from_camera_node","target","TypedCameraControlsEventNode","CameraOrbitControlsEventNode","controller_class","controller","use_map_name","use_map_param","path_param","mat_attrib_name","shader_material","attr_name","_update_texture_on_uniforms","direct_params","_update_texture_on_material","_update_required_attribute","_apply_texture_on_uniforms","_remove_texture_from_uniforms","has_texture","new_texture_is_different","_do_update_define","define_name","_define_name","defines","toUpperCase","_apply_texture_on_material","_remove_texture_from_material","texture_owner","update_callback","remove_callback","ASSEMBLER_MAP","DISTANCE","ShaderAssemblerCustomMeshDistance","DEPTH","ShaderAssemblerCustomMeshDepth","DEPTH_DOF","ShaderAssemblerCustomMeshDepthDOF","ShaderAssemblerMesh","_color_with_intensity","_light","create_light","update_light_attachment","create_shadow_params_main","shadow","create_shadow_params","create_light_params","intensity","core_geometry","geo","points_from_group","group","set_attrib_value","add_numeric_vertex_attrib","attribute_names","includes","human_type","CoreObject","src_object","new_object","sourceLookup","cloneLookup","parallelTraverse","sourceNode","clonedNode","traverse","src_node","mesh_node","src_node_geometry","mesh_node_geometry","material_with_color","src_node_with_animations","animations","animation","skinned_node","isSkinnedMesh","clonedMesh","sourceMesh","sourceBones","skeleton","bones","bindMatrix","new_bones","bone","CoreEntity","computeTangents","normal","normals","uvs","nVertices","tangent","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","groups","start","il","jl","handleTriangle","tmp","tmp2","n2","handleVertex","fromArray","isFinite","addScaledVector","dot","crossVectors","useGroups","isIndexed","attributesUsed","Set","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","addGroup","indexOffset","mergedIndex","getX","mergedAttribute","mergeBufferAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","normalized","arrayLength","isInterleavedBufferAttribute","interleaveAttributes","interleavedBuffer","res","getters","setters","iba","estimateBytesUsed","mem","attr","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","EPSILON","hashToIndex","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","fill","decimalShift","log10","shiftMultiplier","hash","newarray","newMorphArrays","getterFunc","ml","oldAttribute","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","_uv_name","set_texture_allocations_controller","_texture_allocations_controller","variable","globals_geometry_handler","texture_variable","add_particles_sim_uv_attribute","allocation","var_name_texture","texture_name","texture_definition","particles_sim_uv_attrib_definition","GlobalsTextureHandler","UV_ATTRIB","particles_sim_uv_varying_definition","UV_VARYING","PARTICLE_SIM_UV","accumulated_curve_point_indices","curve_point_indices","last_index_added","previous_index","create_line_segment_geometry","attrib_sizes_by_name","new_indices","new_attribute_values_by_name","line_segment_to_geometries","CoreGeometryUtilCurve","_default_scene","_cameras_controller","CamerasController","_cooker","Cooker","CoreGraph","_missing_expression_references_controller","MissingReferencesController","_expressions_controller","ExpressionsController","_nodes_controller","NodesController","_time_controller","TimeController","set_scene","set_uuid","_uuid","wait_for_cooks_completed","_dispatch_controller","DispatchController","_events_controller","EventsController","_lifecycle_controller","_loading_controller","LoadingController","_performance","CorePerformance","set_frame","play","pause","PolySceneSerializer","_uniforms_controller","UniformsController","_webgl_controller","WebGLController","PolyScene","MouseEventNode","PARAM_CALLBACK_toggle_active","ACCEPTED_MOUSE_EVENT_TYPES","event_type","add_on_add_hook","events_controller","register_event_node","add_delete_hook","unregister_event_node","get_output_index","output_connections","node_dest","_update_register","BaseState","ui_data_json","children_ids","input_ids","input_connection_output_indices","connection_input_indices","named_output_connections","param_ids","to_json_params","override_clonable_state","inputs_clonable_state_with_override","selection","to_json_params_from_names","param_names","include_components","ParamConstructorByType","BooleanParam","ButtonParam","ColorParam","FolderParam","IntegerParam","SeparatorParam","Vector2Param","Vector3Param","Vector4Param","_expression","_manager","is_expression_for_entities","deregister_param","ExpressionManager","parse_expression","update_from_method_dependency_name_change","compute_function","compute_expression_for_entities","entities","set_entities","reset_entities","compute_expression_for_points","compute_expression_for_objects","_entities","_entity_callback","addUnaryOp","addBinaryOp","string","parse_expression_for_string_param","nodes","arguments","callee","_named_nodes","graph_node_ids","node_element_by_graph_node_id","named_nodes","path_element","update_from_name_change","to_path","joined_path","first_char","ease_i","power","ease_o","abs","ease_io","linear","ease_i2","ease_o2","ease_io2","ease_i3","ease_o3","ease_io3","ease_i4","ease_o4","ease_io4","ease_i_sin","ease_o_sin","ease_io_sin","ease_i_elastic","ease_o_elastic","ease_io_elastic","parseFloat","_found_node","expected_context","node_selection_context","MouseEventType","DOWN","MOVE","UP","ENTER","LEAVE","accepts_event","BaseEventsController","MouseEventsController","_state","_hooks","on_update","run_hooks","toggle","BaseFlag","_id","__next_id","_definitions","_errored","uniq","definitions_by_name","existing","uniq_definitions","_leaves_graph_id","_graph_ids_by_shader_name","_outputs_by_graph_id","_depth_by_graph_id","_graph_id_by_depth","_shader_name","find_leaves_from_root_node","set_nodes_depth","depth","graph_id","leaves_from_nodes","LEAVES_FROM_NODES_SHADER","find_leaves","node_ids","nodes_from_ids","nodes_for_shader_name","depths","graph_ids_for_depth","node_from_id","sorted_nodes","ids","unique_inputs","booleans_by_graph_id","set_node_depth","current_depth","output_ids","output_id","TypedNodeTraverser","domElement","quatInverse","lastPosition","lastQuaternion","document","Infinity","minZoom","maxZoom","minAzimuthAngle","maxAzimuthAngle","zoomSpeed","panSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","LEFT","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","updateProjectionMatrix","changeEvent","STATE","NONE","inverse","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","distanceToSquared","EPS","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","mouseAction","preventDefault","focus","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","addEventListener","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","transpiled_javascript","filtered_lines","line","TranspiledFilter","MathFunctionArg2Factory","gl_output_name","out","gl_input_names","in","default_in_type","allowed_in_types","out_type","functions","_gl_output_name","first_input_type","DistanceGlNode","DotGlNode","MaxGlNode","MinGlNode","ModGlNode","PowGlNode","ReflectGlNode","StepGlNode","typed_visible_options","_allow_inputs_created_from_params","ConstantGlNode","_current_connection_type","_current_param","connection_type","_current_var_name","_params_by_type","MathFunctionArg3Factory","gl_input_default_values","ClampGlNode","FaceforwardGlNode","SmoothStepGlNode","SHADER_DEFAULTS","TextureEnvMapParamConfig","texture_env_map_controller","TextureEnvMapController","envMapIntensity","env_map_intensity","MeshStandardMatNode","use_env_map","env_map","ShaderAssemblerPoints","PointsBuilderMatNode","EVENT_CHANGE","BASE_CAMERA_DEFAULT","near","far","CameraTransformParamConfig","set_master_camera","BaseCameraObjNodeClass","PARAM_CALLBACK_set_master_camera","CameraPostProcessParamConfig","CameraBackgroundParamConfig","LayerParamConfig","BaseCameraObjParamsConfig","_aspect","_background_controller","background_controller_constructor","_controls_controller","ControlsController","_layers_controller","_post_process_controller","layers_controller","background_controller","post_process_controller","update_camera","controls_controller","update_controls","on_delete","set_as_master_camera","set_master_camera_node_path","_update_for_aspect_ratio","update_transform_params_from_object","create_viewer","ThreejsViewer","TypedCameraObjNode","timestamp","_timestamp","performance","now","_core_geometries","_core_objects","_objects","core_objects","_create_core_objects","core_object","create_core_geometries","__geometry_from_object","geometry_from_object","isMesh","isLine","isPoints","from_objects","objects_from_group","group_name","core_objects_from_group","co","_compute_bounding_box","center","getCenter","getSize","bbox","expandByObject","Box3","first_geometry","rename_attrib","attrib_class","child","object_attrib_names","first_object","attrib_names_matching_mask","masks_string","matching_attrib_names","add_numeric_object_attrib","src_group","new_group","ComponentName","ATTRIB_NAMES","COMPONENT_INDICES","_core_geometry","remapped_name","component_index","remaped_name","value_index","attrib_value_index","start_index","_index","Vector4","_position","new_position","set_attrib_value_vector3","_normal","set_normal","new_normal","v2","v3","new_value_index","_array_index","_count","_current_count_index","_resolve","_max_time_per_chunk","max_time_per_chunk","_check_every_interations","check_every_interations","start_with_count","iteratee_method","_iteratee_method_count","_bound_next_with_count","next_with_count","start_time","start_with_array","_array","_iteratee_method_array","_bound_next_with_array","next_with_array","_current_array_element","CoreIterator","segments_count","arc_angle","radian_per_segment","point_radian","position_2d","positions_2d","CoreGeometryUtilCircle","DEFAULT","SCALE","PSCALE","EYE","DEFAULT_COLOR","DEFAULT_UV","_group_wrapper","_matrices","_is_pscale_present","_is_scale_present","_is_normal_present","_is_up_present","_do_rotate_matrices","matrices","_matrix_from_point","pscale","scale_matrix","makeScale","translate_matrix","makeTranslation","multiply","rotate_matrix","eye","create_instance_buffer_geo","geometry_to_instance","template_core_group","attributes_to_copy","instance_pts","InstancedBufferGeometry","instances_count","colors","scales","orients","has_color","instance_matrices","CoreInstancer","instance_pt","index3","index4","has_uv","index2","InstancedBufferAttribute","pt","_attribute_datas_by_name","data_keys_prefix","skip_entries","do_convert","convert_to_numeric","load","success_callback","progress_callback","error_callback","fetch","response","json","get_prefixed_json","catch","prefixes","first_prefix","set_json","core_geo","_find_attributes","convert_to_numeric_masks","attrib_values","_attribute_values_for_name","numerical_attrib_values","index_data","first_pt","_value_has_subentries","deep_attrib_name","deep_attrib_value","CoreAttributeData","from_value","json_element","JsonDataLoader","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","onLoad","onProgress","onError","loader","setPath","setResponseType","crossOrigin","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","lastIndexOf","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","indexArray","GetFaceFromMesh","buffers","WeakMap","releaseDecoderModule","getDecoderModule","geometry1","geometry0","process","geometry_wrapper0","geometry_wrapper1","segments0","segments1","geometries_by_segments_count","smallest_geometry","largest_geometry","smallest_segments","largest_segments","smallest_points","largest_points","smallest_points_count","all_points","points_indices","segment","matched_segment","CoreGeometryOperationSkin","NodeJsonImporter","ParamMultipleJsonImporter","ParamStringJsonImporter","ParamRampJsonImporter","JsonImportDispatcher","AllRegister","run","load_scene","SceneJsonImporter","load_data","create_scene","mark_as_loaded","perspective_camera1","geo1","test_save_and_load","scene2","data2","Tester","stylesheet","createElement","innerText","appendChild","classList","master_camera_node","_master_camera_node_path","camera_node_path","_find_any_camera","_queue","_block_level","_process_item_bound","_process_item","process_queue","enqueue","original_trigger_graph_node","blocked","delete","run_post_dirty_hooks","_next_id","Graph","directed","compound","multigraph","src_id","hasNode","setEdge","graph_has_cycle","alg","isAcyclic","removeEdge","clear_successors_cache_with_predecessors","src_id_s","dest_id_s","successor","successor_ids","all_next_ids","next_ids","next_next_ids","next_next_id","all_predecessor_ids","all_successor_ids","_cooking_nodes_by_id","_resolves","flush","set_listener","events_listener","_events_listener","emitter","process_events","auto_updating","CONTEXT_OPTIONS","_next_renderer_id","_next_env_map_id","_renderers","_env_maps","_require_webgl2","set_require_webgl2","_rendering_context_webgl","webgl2","context_name","getContext","_polygon_id","flush_callbacks_with_renderer","first_renderer","first_id","renderers","wait_for_renderer","_node_register","_node_register_categories","_node_register_options","node_type","deregister_node","registered_nodes_for_context_and_parent_type","parent_node_type","option_only","option_except","context_and_type","registered_category","_mouse_events_controller","_controllers","_get_controller_for_node","unregister_node","_dirty_count","_dirty","_dirty_timestamp","_post_dirty_hook_names","_post_dirty_hooks","remove_post_dirty_hook","set_forbidden_trigger_nodes","_forbidden_trigger_nodes","propagate","_cached_successors","clear_successors_cache","_width","_border_radius","_color","_layout_vertical","set_border_radius","border_radius","set_width","set_comment","comment","_comment","UI_DATA_COMMENT_UPDATED","set_color","is_layout_vertical","UI_DATA_POSITION_UPDATED","translate","snap","time_dependent","TimeDependentState","ErrorState","are_params_time_dependent","are_inputs_time_dependent","force_time_dependent","frame_node","unforce_time_dependent","_message","ERROR_UPDATED","_parent","is_selected","contains","separator","parent_full_path","on_set_parent","_on_set_parent_hooks","child_by_name","_context","_children","_children_by_type","_children_and_grandchildren_by_context","_is_dependent_on_children","_selection","CoreNodeSelection","dependent","_children_node","current_child_with_name","current_name","_add_to_nodes_by_type","add_to_instanciated_node","node_context_signature","available_children_classes","is_valid_child_type","node_class","set_creation_completed","CREATED","child_node_json","lifecycle_controller","on_create_hook_allowed","run_on_create_hooks","run_on_add_hooks","run_on_child_add_hooks","webgl_controller","output_connection","old_src","old_output_index","old_dest","old_input_index","_remove_from_nodes_by_type","remove_from_instanciated_node","run_on_child_remove_hooks","run_on_delete_hooks","DELETED","parent_id","node_id","add_to_children_and_grandchildren_by_context","remove_from_children_and_grandchildren_by_context","has_children_and_grandchildren_with_context","children_names","traverse_children","_node_ids","send_update_event","nodes_to_add","node_ids_to_add","nodes_to_remove","node_ids_to_remove","SELECTION_UPDATED","_creation_completed","add_on_child_add_hook","_on_child_add_hooks","execute_hooks_with_child_node","add_on_child_remove_hook","_on_child_remove_hooks","_on_create_hooks","execute_hooks","_on_add_hooks","_on_delete_hooks","hooks","_cooking","_cooks_count","_max_cook_time","_cook_time_with_inputs","_cook_time","_cook_time_params","_inputs_evaluation_required","disallow_inputs_evaluation","_init_cooking_state","_cooking_dirty_timestamp","dirty_timestamp","_init_cooking_start_time","perf_active","started","_cook_time_start","_start_cook_if_no_errors","_cook_time_with_inputs_start","evaluate_inputs_and_params","input_containers","input_container","input_clonable_state_with_override","_increment_cooks_count","_terminate_cook_process","_record_cook_time","cook_time_end","_cook_time_params_start","record_node_cook_data","eval_required_inputs_p","_time_with_precision","METHODS","scene_successors","_find_scene_node_scene_nodes","SUCCESSORS","scene_predecessors","PREDECESSORS","graph_nodes","base_nodes","start_node","_find_base_nodes_from_node","param_nodes_referree","scene_node","base_nodes_by_graph_node_id","uniq_base_nodes","className","add_param_referree","_params_referrees_by_graph_node_id","remove_param_referree","params_referree","node_by_graph_node_id","_blocked_emit","_blocked_parent_emit","_count_by_event_name","block_emit","is_multiple","unblock_emit","events_count","is_visible","value_serialized","frame_graph_node_id","_param_create_mode","_params_by_name","_params_list","_param_names","_non_spare_params","_spare_params","_non_spare_param_names","_spare_param_names","_params_added_since_last_params_eval","init_dependency_node","_params_node","init_from_params_config","_post_create_params","_update_caches","init_param_accessors","run_post_create_params_hook","has_created_a_param","has_deleted_a_param","delete_param","param_data","post_create_spare_params","current_names_in_accessor","getOwnPropertyNames","_remove_unneeded_accessors","configurable","names_to_remove","current_name_in_accessor","name_to_remove","set_with_type","param_with_type","get_float","get_operator_path","value_with_type","child_name","existing_param","_eval_param","eval_params","_post_create_params_hook","_on_scene_load_hook_names","_on_scene_load_hooks","run_on_scene_load_hooks","parse_completed","parse_started","parsed_tree","function_generator","FunctionGenerator","dependencies_controller","parse_tree","compute_allowed","eval_function","eval_allowed","expression_string_generator","ExpressionStringGenerator","new_expression_string","NATIVE_MATH_METHODS_RENAMED","math_random","EASING_METHODS","DIRECT_EXPRESSION_FUNCTIONS","remaped","LITERAL_CONSTRUCT","LiteralConstructsController","GLOBAL_CONSTANTS","INDIRECT_EXPRESSION_METHODS","MethodModule","PROPERTY_OFFSETS","_attribute_requirements_controller","AttributeRequirementsController","methods","method_index","method_dependencies","immutable_dependencies","function_main_string","function","function_body","assign_attributes_lines","attribute_presence_check_line","assign_arrays_lines","Core","String","traverse_CallExpression","method_arguments","arg","literal_contruct","arguments_joined","direct_function_name","path_node","function_string","path_argument","path_argument_function","_create_method_and_dependencies","traverse_UnaryExpression","argument","argument_member_expression","attrib_node","property_node","var_attribute_size","var_array","traverse_Identifier","identifier_name_without_dollar_sign","direct_constant_name","traverse_Identifier_F","traverse_Identifier_FPS","traverse_Identifier_T","traverse_Identifier_CH","traverse_Identifier_CEX","_method_centroid","traverse_Identifier_CEY","traverse_Identifier_CEZ","method_constructor","method_dependency","set_jsep_node","register","Bbox","ch","Ch","centroid","Centroid","cop_res","CopRes","local","Local","opdigits","Opdigits","Point","PointsCount","Copy","str_chars_count","StrCharsCount","str_concat","StrConcat","str_index","StrIndex","str_sub","StrSub","VECTOR_NAMES","COMPONENT_NAMES","vector_name","_get_value_from_container","vector","_update_from_name_change_bound","_update_from_name_change","new_path","literal","jsep_node","listen_for_name_changes","node_in_path","set_resolved_graph_node","resolved_graph_node","set_unresolved_path","unresolved_path","is_index","ref","stamp_node","stamp_value","resolution","request_asset_url","add_local_path","local_path_server_url","name_node","sub_string","range_start","range_size","_attribute_names","assign_attribute_line","assign_item_size_line","assign_array_line","var_attribute","cyclic_graph_detected","connect_immutable_dependencies","handle_method_dependencies","handle_method_dependency","node_simple","press_button","COMPONENT_NAMES_COLOR","other_point","are_equal_json","json1","json2","_interpolation","generateUUID","json_point","interpolation","ramp","current_point","other_ramp_value","other_points","point1","point2","COMPONENT_NAMES_VECTOR2","COMPONENT_NAMES_VECTOR3","COMPONENT_NAMES_VECTOR4","_frame","src_context","_connections","ConnectionsController","_inputs","InputsController","has_inputs","_outputs","OutputsController","has_outputs","_output_connections","max_inputs_count","_input_connections","add_input_connection","remove_input_connection","all_connections_after_are_undefined","add_output_connection","connections_by_id","remove_output_connection","_graph_node_inputs","_has_named_inputs","_min_inputs_count","_max_inputs_count","_depends_on_inputs","_override_clonable_state","depends_on_inputs","set_min_inputs_count","min_inputs_count","set_max_inputs_count","init_graph_node_inputs","_named_input_connection_points","connection_points","NAMED_INPUTS_UPDATED","_create_graph_node_input","graph_input_node","init_inputs_clonable_state","init_connections_controller_inputs","containers","eval_required_input","input_error_message","get_named_input_index","has_named_inputs","has_named_outputs","old_input_node","old_connection","NodeConnection","_run_on_set_input_hooks","INPUTS_UPDATED","remove_input","has_named_input","has_input","override_clonable_state_allowed","inputs_clonable_state","FROM_NODE","_inputs_clonable_states","input_cloned","ALWAYS","NEVER","_user_inputs_clonable_states","_default_inputs_clonale_state_values","set_override_clonable_state","OVERRIDE_CLONABLE_STATE_UPDATE","_on_update_hooks","_on_update_hook_names","_node_src","_node_dest","_output_index","_input_index","_has_outputs","_has_named_outputs","set_has_no_output","has_named_output","get_named_output_index","_named_output_connection_points","named_output_connection","NAMED_OUTPUTS_UPDATED","output_indices","_nodes_by_graph_node_id","_lifecycle_on_create_allowed","on_create_prevent","_loading_state","_auto_updating","_first_object_loaded","mark_as_loading","_set_loading_state","set_auto_update","on_first_object_loaded","getElementById","parentElement","removeChild","_params_by_id","register_param","references","missing_expression_reference","MissingExpressionReference","_check_for_missing_references_for_node","_check_for_missing_references_for_param","missing_references","match_found","matches_path","resolve_missing_dependencies","_node_context_signatures","_instanciated_nodes_by_context_and_type","_root","ObjectsManagerNode","init_default_scene","objects_from_mask","all_nodes","current_parents","current_parent","register_node_context_signature","node_context_signatures","toLowerCase","instanciated_nodes","nodes_by_ids","_queued_nodes_by_id","_queued_nodes_by_path","_expected_geo_nodes","_process_queue_start","_on_child_add","_on_child_remove","multiple_display_flags_allowed","add_to_queue","path_id","expected_loading_geo_nodes_by_id","add_to_scene","get_parent_for_node","node_input","children_group","parent_object","used_in_scene","remove_from_scene","are_children_cooking","geo_nodes","node_by_id","geo_node","TypedBaseManagerNode","ManagerContainer","BaseManagerNodeClass","_started","_start_time","_previous_timestamp","_nodes_cook_data","_durations_by_name","_durations_count_by_name","profile","total_time","stop","PerformanceNode","update_cook_data","record","current_timestamp","print","print_node_cook_data","print_recordings","performance_nodes","print_objects","performance_node","cook_time_total","print_object","table_entries","table","durations_by_name","durations_count_by_name","durations","names_by_duration","sorted_durations","entry","duration_per_iteration","_cook_time_total","_cook_time_total_with_inputs","_cook_time_total_params","cook_time","cook_time_with_inputs","cook_time_params","cooks_count","cook_time_per_iteration","cook_time_total_with_inputs","cook_time_total_with_inputs_per_iteration","cook_time_total_params","cook_time_total_params_per_iteration","_time","_prev_performance_now","_frame_range","_frame_range_locked","_playing","set_frame_range","start_frame","end_frame","SceneEvent","FRAME_RANGE_UPDATED","set_frame_range_locked","start_locked","end_locked","set_time","update_frame","new_frame","FRAME_UPDATED","update_time_dependent_uniform_owners","update_time","_ensure_frame_within_bounds","increment_time_if_playing","increment_time","performance_now","new_time","PLAY_STATE_UPDATED","toggle_play_pause","playing","include_node_param_components","nodes_by_graph_node_id","params_by_graph_node_id","node_serializer","_time_dependent_uniform_owners","_time_dependent_uniform_owners_ids","_resolution","_resolution_dependent_uniform_owners","_resolution_dependent_uniform_owners_ids","_update_time_dependent_uniform_owners_ids","add_resolution_dependent_uniform_owner","_update_resolution_dependent_uniform_owners_ids","update_resolution_dependent_uniforms","remove_resolution_dependent_uniform_owner","update_resolution_dependent_uniform_owners","CopRegister","EventRegister","GlRegister","MatRegister","ObjRegister","SopRegister","poly","BuilderCopNode","EnvMapCopNode","NullCopNode","SwitchCopNode","PASS_THROUGH_SHADER","_texture_mesh","_texture_material","_texture_scene","_texture_camera","Camera","ShaderAssemblerTexture","_reset_if_resolution_changed","_render_target","_create_render_target","_renderer","_create_renderer","_reset","_pixelBuffer","_create_pixel_buffer","height","render_on_target","fragment","_fragment_shader","run_assembler","update_fragment_shader","fragment_shader","_uniforms","render_target","autoClear","setRenderTarget","readRenderTargetPixels","RGBAFormat","FloatType","CoreSleep","sleep","WebGLRenderTarget","format","navigator","userAgent","stencilBuffer","depthBuffer","FLAG_BYPASS_UPDATED","FLAG_DISPLAY_UPDATED","disallow_inputs_created_from_params","create_inputs_from_params","add_input","_inputless_param_names","set_inputless_param_names","raw_input_serialized_by_param_name","default_value_serialized_by_param_name","param_type","last_param_init_value","default_value_from_name","spare_param","is_root","inputs_data","selected_children","selected_ids","override","add_custom","node_exporter","gl_var","_param_configs_set_allowed","_function_declared","node_traverser","nodes_by_shader_name","root_nodes_for_shader","sorted_node_ids","_shaders_collection_controller","ShadersCollectionController","set_current_shader_name","set_code_lines","lines_map","add_code_lines","add_code_line_for_nodes_and_line_type","definition_type","node_definitions","collection","errored","first_definition","CodeFormatter","node_comment","line_wrap","post_line_separator","nodes_count","is_last","add_code_line_for_node_and_line_type","_uniform_name","from_param","_uniform","_create_uniform","uniform_by_type","callback_bound","_callback","has_value_changed","is_video_texture","set_uniform_value_from_texture","set_uniform_value_from_ramp","param_constructor","_cached_param_value","has_changed","clone_value","_shader_names","_current_shader_name","_lines_controller_by_shader_name","LinesController","lines_controller","_definitions_by_node_id","_body_lines_by_node_id","LINE_SUFFIXES","LINE_PREFIXES","add_suffix","convert_texture_to_env_map","pmremGenerator","PMREMGenerator","exrCubeRenderTarget","fromEquirectangular","Extension","load_url","set_texture_for_mapping","ext","_ext","VIDEO_EXTENSIONS","_load_as_video","loader_for_ext","ext_lowercase","EXR","HDR","BASIS","EXRLoader","RGBELoader","setDataType","UnsignedByteType","BasisTextureLoader","setTranscoderPath","detectSupport","TextureLoader","video","onloadedmetadata","source","VIDEO_SOURCE_TYPE_BY_EXT","_default_video_source_type","pixel_data","img","drawImage","getImageData","PARAM_ENV_DEFAULT","ogg","ogv","mp4","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","pos","len","chunk","fromCharCode","RGBEByteToRGBHalf","floatView","int32View","toHalf","bits","sourceArray","sourceOffset","destArray","destOffset","byteArray","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","comments","programtype","gamma","exposure","charAt","RGBE_ReadHeader","image_rgba_data","data_rgba","byteValue","scanline_buffer","ptr_end","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","texData","encoding","generateMipmaps","flipY","transcoderPath","transcoderBinary","transcoderPending","workerConfig","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","cTFETC1","_createTexture","texturePending","_allocateWorker","mipmaps","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","_initTranscoder","jsLoader","binaryLoader","binaryContent","BasisWorker","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","BasisModule","onRuntimeInitialized","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","CameraMapControlsEventNode","CodeEventNode","apply_controls","html_element","controls_id","DEFAULT_FUNCTION_CODE","raycaster","mouse","_set_mouse_from_event_and_canvas","offsetWidth","offsetHeight","code_typescript","label","TYPESCRIPT","code_javascript","_compile_if_required","_event_processor","_last_compiled_code","event_processor_class","event_processor_creator_function","BaseMouseEventProcessor","AbsGlNode","AcosGlNode","AddGlNode","AlignGlNode","AndGlNode","AsinGlNode","AtanGlNode","except","CeilGlNode","CosGlNode","ComplementGlNode","CrossGlNode","CycleGlNode","DegreesGlNode","DiskGlNode","DivideGlNode","EasingGlNode","ExpGlNode","Exp2GlNode","FitGlNode","Fit01GlNode","FloatToIntGlNode","FloatToVec2GlNode","FloatToVec3GlNode","FloatToVec4GlNode","FloorGlNode","FractGlNode","HsvToRgbGlNode","IntToFloatGlNode","InverseSqrtGlNode","InstanceTransformGlNode","LengthGlNode","LuminanceGlNode","NegateGlNode","LogGlNode","Log2GlNode","MixGlNode","MultGlNode","MultAddGlNode","NullGlNode","NoiseGlNode","NormalizeGlNode","OrGlNode","OutputGlNode","ParamGlNode","QuatMultGlNode","QuatFromAxisAngleGlNode","QuatToAngleGlNode","QuatToAxisGlNode","RampGlNode","RandomGlNode","RadiansGlNode","RefractGlNode","RgbToHsvGlNode","RotateGlNode","RoundGlNode","SignGlNode","SinGlNode","SqrtGlNode","SubstractGlNode","TanGlNode","TextureGlNode","TwoWaySwitchGlNode","Vec2ToFloatGlNode","Vec3ToFloatGlNode","Vec4ToFloatGlNode","Vec4ToVectorGlNode","VectorAlignGlNode","VectorAngleGlNode","ParamsConfigFloatToInt","ParamsConfigIntToFloat","ParamsConfig2","ParamsConfig3","ParamsConfig4","VecToGlFactory","BaseVecToGlNode","components_v4","OUTPUT_NAME_VEC3","OUTPUT_NAME_W","INPUT_NAME_VEC4","in_vec4","out_vec3","out_w","MathFunctionArg1Factory","gl_input_name","MathFunctionArg2OperationFactory","in_prefix","operation","gl_operation","current_connections","expected_count","_expected_output_type","input_types","empty_array","second_connection","second_type","MathFunctionArg2BooleanFactory","boolean_operation","op","BaseNodeGlMathFunctionArgBoolean2GlNode","InputName","InputNames","DIR","DefaultValues","feather","EASE_NAMES","IMPORT_BY_EASE_NAME","IMPORT_DEPENDENCIES_BY_EASE_NAME","METHOD_NAMES_BY_EASE_NAME","default_ease_type","ease_name","glsl_function_code","ease_functions","function_dependencies","concat","in_value","hsv","function_declaration_lines","rgb","VARS","instance_position","instance_orientation","instance_scale","gl_output_name_position","gl_output_name_normal","_default_position","_default_normal","instancePosition","_default_instance_position","instanceOrientation","_default_input_instance_orientation","instanceScale","_default_input_instance_scale","result_position","result_normal","mult","VALUE","PRE_ADD","MULT","POST_ADD","pre_add","post_add","out_name","NOISE_NAME","OUTPUT_TYPE","NOISE_NAMES","CLASSIC_PERLIN_2D","CLASSIC_PERLIN_3D","CLASSIC_PERLIN_4D","NOISE_2D","NOISE_3D","NOISE_4D","IMPORT_BY_NOISE_NAME","INPUT_TYPES_BY_NOISE_NAME","OUTPUT_TYPE_BY_NOISE_NAME","METHOD_NAMES_BY_NOISE_NAME","OUTPUT_TYPES","NoChange","Float","Vec2","Vec3","Vec4","OUTPUT_TYPE_LABEL","CONNECTION_TYPE_BY_OUTPUT_TYPE","ALL_COMPONENTS","default_noise_type","default_output_type","amp","freq","noise_name","output_type","octaves","amp_attenuation","freq_increase","AMP","POSITION","FREQ","OFFSET","noise_function","noise_output_gl_type","fbm_function","output_gl_type","single_noise_line","lines_count_required","assembly_args","noise","offset_gl_type","offset_components_count","offset2","assembly_line","fbm_method_name","input_type","output_name_suffix","right_hand","as_color","AXIS","ANGLE","initialize","input_val","seed","Mode","Modes","LabelByMode","InputNamesByMode","MethodNameByMode","InputTypesByMode","axis","signature","_simple_line","simple_lines","rgba","CONDITION","IF_TRUE","IF_FALSE","second_or_third_connection","condition","if_true","if_false","end","MeshBasicMatNode","MeshBasicBuilderMatNode","MeshLambertMatNode","MeshLambertBuilderMatNode","MeshStandardBuilderMatNode","PointsMatNode","has_material","ShaderAssemblerBasic","ShaderLib","basic","template_shader","lights","UniformsUtils","distanceRGBA","DEPTH_PACKING","RGBADepthPacking","BasicDepthPacking","mNear","mFar","ShaderAssemblerLambert","lambert","_update_metalness","_update_roughness","ShaderAssemblerStandard","is_physical","physical","standard","derivatives","onBeforeCompile","shader","PointsParamConfig","size_attenuation","sizeAttenuation","CUSTOM_ASSEMBLER_MAP","ShaderAssemblerCustomPointsDistance","ShaderAssemblerCustomPointsDepth","ShaderAssemblerCustomPointsDepthDOF","USE_SIZEATTENUATION","AmbientLightObjNode","AreaLightObjNode","DirectionalLightObjNode","HemisphereLightObjNode","PointLightObjNode","SpotLightObjNode","EventsObjNode","MaterialsObjNode","CopObjNode","PostProcessObjNode","GeoObjNode","NullObjNode","SceneObjNode","OrthographicCameraObjNode","PerspectiveCameraObjNode","FogObjNode","AmbientLight","has_object","AreaLightParamConfig","RectAreaLight","RectAreaLightUniformsLib","initialized","DirectionalLightParamConfig","cast_shadows","shadow_res","shadow_bias","_helper_controller","DirectionalLightHelper","DirectionalLight","bias","mapSize","_target_target","_square","Line","_line_material","rotateX","setScalar","sky_color","ground_color","HemisphereLightHelper","HemisphereLight","groundColor","OctahedronBufferGeometry","_quat","_color1","_color2","rotateZ","BufferAttribute","setRotationFromQuaternion","setXYZ","decay","shadow_near","shadow_far","PointLightHelper","PointLight","SphereBufferGeometry","penumbra","SpotLightHelper","SpotLight","_cone","p1","p2","coneLength","coneWidth","DisplayNodeController","_sop_group","_create_sop_group","_on_create_bound","_on_create","_on_child_add_bound","set_sop_group_name","sop_group","request_display_node","display_node","_children_uuids_dict","_children_length","_request_display_node_container_bound","request_display_node_container","_display_node","set_parent_object","_parent_object","new_display_node","old_display_node","remove_children","new_objects","new_objects_are_different","AxesHelper","density","exponential","_linear_fog","Fog","getHex","_linear_fogexp2","FogExp2","bg_color","OrthographicCameraObjParamConfigMixin","OrthographicCameraBackgroundController","OrthographicCamera","horizontal_size","_applied_controls_by_element_id","_controls_node","controls_param","controls_node","dispose_control_refs","controls_aleady_applied","CameraControlsConfig","set_controls_events","dispose_controls","controls_start_listener","on_controls_start","controls_end_listener","on_controls_end","_camera_node_id","_controls","other_config","camera_node_id","overrideMaterial","clearColor","clearDepth","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","getClearColor","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","do_render","_animate_method","animate","_canvas","random","style","outline","_set_events","_build","_init_display","activate","_cancel_animate","onresize","on_resize","compute_size_and_aspect","prepare_current_camera","_request_animation_frame_id","requestAnimationFrame","cancelAnimationFrame","BaseViewer","_active","_display_scene","_init_from_scene","deactivate","set_camera_node","reset_container_class","set_container_class_hovered","viewer","_camera_node","_size","_update_graph_node","create_controls","_create_graph_node","update_camera_aspect","_update_size","_get_aspect","_update_from_camera_container","_bound_on_controls_start","_on_controls_start","_bound_on_controls_end","_on_controls_end","_bound_on_mousedown","_on_mousedown","_bound_on_mousemove","_on_mousemove","_bound_on_mouseup","_on_mouseup","onwebglcontextlost","_on_webglcontextlost","onwebglcontextrestored","_on_webglcontextrestored","request_animation_frame_id","PerspectiveCameraObjParamConfigMixin","PerspectiveCameraBackgroundController","PerspectiveCamera","SCREEN_COORD","bl","br","tl","tr","CORNER_NAMES","_bg_corner","_bg_center","corner_name","_update_corner_vector","distanceTo","z_ratio","desired_ratio","coord","setFromCamera","ray","direction","origin","AddSopNode","AnimationCopySopNode","AnimationMixerSopNode","AttribAddMultSopNode","AttribCopySopNode","AttribCreateSopNode","AttribDeleteSopNode","AttribNormalizeSopNode","AttribPromoteSopNode","AttribRemapSopNode","AttribRenameSopNode","AttribTransferSopNode","BboxScatterSopNode","BlendSopNode","BoxSopNode","CacheSopNode","CodeSopNode","CircleSopNode","ColorSopNode","ConeSopNode","CopySopNode","DataSopNode","DataUrlSopNode","DelaySopNode","DeleteSopNode","FaceSopNode","FileSopNode","FuseSopNode","HexagonsSopNode","HierarchySopNode","InstanceSopNode","JitterSopNode","LayerSopNode","LineSopNode","MaterialSopNode","MergeSopNode","NoiseSopNode","NormalsSopNode","NullSopNode","ObjectMergeSopNode","OcclusionSopNode","ParticlesSystemGpuSopNode","PeakSopNode","PlaneSopNode","PointSopNode","PolywireSopNode","RaySopNode","ResampleSopNode","ScatterSopNode","SkinSopNode","ShadowsSopNode","SphereSopNode","SwitchSopNode","TextSopNode","TorusSopNode","TorusKnotSopNode","TransformSopNode","TubeSopNode","UvProjectSopNode","create_point","open","connect_to_last_point","_create_point","_get_points","index_array","_positions","_get_positions","_triangle","_get_triangle","_deltas","_get_deltas","getArea","random_position","weights","deltas","attrib_value_at_position","barycentric_coordinates","getBarycoord","new_attrib_value","sum","point_values","weighted_value","interpolated_value","face","intersect_point","point_indices","position_attrib_array","point_positions","attrib_array","dist_to_points","distance_total","point_indx","objects_count","objects_visible_count","objects_count_by_type","count_by_type","objects_names_by_type","names_by_type","vertex_attribute_names","vertex_attribute_sizes_by_name","sizes_by_name","vertex_attribute_types_by_name","types_by_name","object_attribute_names","core_group_target","target_object","src_animations","prepare","PARAM_CALLBACK_prepare","_previous_time","_mixer","_actions_by_name","_values_by_param_name","_update_mixer","create_mixer","_animation_target","AnimationMixer","prev_value","action","clipAction","materials_by_id","object3d","morphTargets","_update_mixer_weights","_update_mixer_time","cache_value","setEffectiveWeight","prepare_animation_mixer","_update_attrib","tnew_name","core_group_dest","core_group_src","copy_vertex_attribute_between_core_groups","src_objects","dest_objects","dest_geometry","copy_vertex_attribute_between_geometries","src_attrib","src_points_count","dest_points_count","sub_array","dest_name","class","value1","for_entities","value2","value3","value4","_x_arrays_by_geometry_uuid","_y_arrays_by_geometry_uuid","_z_arrays_by_geometry_uuid","_w_arrays_by_geometry_uuid","add_point_attribute","add_object_attribute","add_numeric_attribute_to_points","add_string_attribute_to_points","add_numeric_attribute_to_object","add_string_attribute_to_object","vparam","component_param","arrays_by_geometry_uuid","_init_array_if_required","tmp_array","string_values","current_array","delete_vertex_attribute","delete_object_attribute","change_name","_normalize_attribute","normalized_values","normalized_value","target_name","AttribPromoteMode","PromoteModeMenuEntries","MIN","MAX","FIRST_FOUND","class_from","class_to","_values_per_attrib_name","_filtered_values_per_attrib_name","_core_group","_core_object","find_values","filter_values","set_values","find_values_from_points","find_values_from_object","set_values_to_points","set_values_to_object","_remap_attribute","only_integer_values","sorted_values","sorted_value","dest_group","max_samples_count","distance_threshold","blend_width","_core_group_dest","dest_points","_core_group_src","_attrib_names","_error_if_attribute_not_found_on_second_input","_build_octree_if_required","_add_attribute_if_required","_transfer_attributes","second_input_changed","_octree_timestamp","_prev_param_src_group","points_src","_octree","CoreOctree","set_points","_transfer_attributes_for_point","dest_point","total_dist","nearest_points","find_points","_interpolate_points","point_dest","src_points","CoreInterpolate","perform","blend_with","_interpolate_with_1_point","_interpolate_with_multiple_points","point_src","position_dest","position_src","value_src","_weighted_value_from_distance","_weight_from_distance","value_dest","blend","weighted_values_src","current_position","other_positions","_weights_from_2","_weights_from_3","dist_to_positions","other_position","OctreeNode","max_points_count","sphere","Sphere","found_points","intersects_sphere","points_in_sphere","_bbox","_level","_leaves_by_octant","_points_by_octant_id","_leaves","_bounding_boxes_by_octant","_bounding_boxes_by_octant_prepared","_center","level","intersectsSphere","accumulated_points","containsPoint","leaf","add_point","octant_ids","octant_id","create_leaf","_leaf_bbox","_octant_id","_prepare_leaves_bboxes","_bbox_center","x_pos","y_pos","z_pos","corner","bbox_centers","bbox_size_quarter","bbox_center","object0","object1","core_group0","core_group1","objects0","objects1","attrib0","attrib1","c0","c1","attrib0_array","attrib1_array","divisions","_core_transform","_cook_with_input","_cook_without_input","BoxBufferGeometry","cache","PARAM_CALLBACK_reset","is_cache_empty","toJSON","obj_loader","ObjectLoader","all_objects","param_callback_PARAM_CALLBACK_reset","DEFAULT_UP","_create_circle","_create_disk","CircleBufferGeometry","core_groups","_function","from_attribute","as_hsv","_r_arrays_by_geometry_uuid","_g_arrays_by_geometry_uuid","_b_arrays_by_geometry_uuid","_set_from_attribute","_eval_expressions","_eval_simple_values","_create_init_color","src_attrib_size","src_array","dest_array","dest_i","src_i","new_color","CoreColor","set_hsv","_update_from_param","tmp_array_r","tmp_array_g","tmp_array_b","_commit_tmp_values","target_array","euclideanModulo","setHSL","segments_radial","segments_height","cap","theta_start","theta_length","ConeBufferGeometry","transform_only","copy_attributes","use_copy_expr","_attribute_names_to_copy","container0","container1","cook_with_template","cook_without_template","instance_core_group","template_points","instancer","_copy_moved_objects_on_template_points","_copy_moved_object_on_template_point","template_point","set_point","_get_moved_objects_for_template_point","moved_object","_copy_attributes_from_template","_stamp_instance_group_if_required","moved_objects","_copy_moved_objects_for_each_instance","_copy_moved_objects_for_instance","set_global_index","stamped_instance_core_group","_stamp_node","create_stamp_node","CopyStamp","_global_index","_point","DEFAULT_DATA_STR","json_data_keys_prefix","_on_load","_on_error","inputs_contents","ComparisonOperator","ComparisonOperatorMenuEntries","invert","hide_objects","by_object_type","by_expression","by_attrib","attrib_string","attrib_numeric","attrib_comparison_operator","by_bbox","bbox_size","by_visible","keep_points","_marked_for_deletion_per_object_index","_bbox_cache","_eval_for_points","_eval_for_objects","objects_to_keep","_eval_expressions_for_objects","_eval_type_for_objects","_eval_attrib_for_objects","marked_for_deletion","object_index","point_objects_from_deleted_objects","_point_object","init_points_count","_eval_expressions_for_points","_eval_attrib_for_points","_eval_bbox_for_points","kept_points","keep_point","first_attrib_value","comparison_attrib_value","_comparison","attrib_ComparisonOperator","object_type_name","attrib_float","in_bbox","core_points","make_faces_unique","add_face_center_attribute","add_face_id","_make_faces_unique","_add_face_center_attribute","_add_face_id","_transform_faces","current_value","face_center","fi","pi","always_reference_asset","CoreLoaderGeometry","on_success","on_error","load_auto","obj","on_load_success","object2","on_load_succes_gltf","on_load_succes_drc","gltf","loader_for_gltf","loader_for_glb","loader_for_drc","loader_for_obj","GLTFLoader","draco_loader","setDRACOLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","vertices","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","isArray","groupStart","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ib","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","text","setMaterials","lineFirstChar","trimLeft","trim","vertexData","faceVertices","vertex","vertexParts","v1","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","hasVertexColors","buffergeometry","mesh","createdMaterials","miLen","materialHash","sourceMaterial","materialPoints","materialLine","flatShading","dist","_fuse_core_object","points_by_position","hexagon_radius","points_only","CoreGeometryOperationHexagon","_param_size","_param_hexagon_radius","_param_points_only","side_length","half_side_length","HierarchyMode","HIERARCHY_MODES","ADD_PARENT","REMOVE_PARENT","_add_parent_to_core_group","_remove_parent_from_core_group","_add_parent_to_object","new_parent","_add_new_parent","new_parent2","_remove_parent_from_object","new_child","current_children","_get_children_from_objects","apply_material","core_group_to_instance","object_to_instance","_create_instance","ObjectTypeByObject","_apply_material","mat_builder_node","node_with_mat_name","mesh_lambert_mat","mesh_lambert_mat_name","mat_node","instance_transform1","output1","create_mesh_lambert","amount","last_pt","i_n","apply_to_children","grand_child","compact","input_core_group","_make_compact","objects_by_type","merged_objects","isLineSegments","Operation","Operations","ADD","SET","SUBSTRACT","DIVIDE","use_normals","compute_normals","_simplex_by_seed","_rest_points","core_group_rest","_rest_core_group_timestamp","simplex","_get_simplex","target_attrib_size","rest_point","current_attrib_value","noise_value","_fbm","divide","amplitude","noise3d","_create_simplex","random_generator","SimplexNoise","grad3","grad4","perm","dot3","dot4","xin","yin","i1","j1","G2","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","w0","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","edit","update_x","update_y","update_z","recompute","_eval_expressions_for_core_group","_invert_normals","_eval_expressions_for_core_object","normal_attrib","geometry_node","import_input","samples","sep","buffer_resolution","_process_occlusion_on_object","normal_array","aoSampler","cells","sample","ao","report","auto_textures_size","max_textures_size","textures_size","ShaderAssemblerParticles","gpu_controller","ParticlesSystemGpuComputeController","render_controller","ParticlesSystemGpuRenderController","_reset_material_if_dirty_bound","_reset_material_if_dirty","_on_create_prepare_material_bound","_on_create_prepare_material","reset_gpu_compute_and_set_dirty","reset_render_material","is_on_frame_start","init_render_material","set_restart_not_required","reset_particle_groups","init_core_group","restart_simulation_if_required","compute_similation_if_required","_find_root_nodes","set_shaders_by_name","reset_gpu_compute","points_mat","points_mat_constant_point_size","points_mat_output1","create_points_mat","setup_shader_names_and_variables","update_shaders","TextureAllocationsController","allocate_connections_from_root_nodes","texture_allocations_controller","add_export_body_line","export_node","is_importing","_handle_globals_time","_handle_globals_default","attrib_read","_allocations","_next_allocation_index","leaf_nodes","variables","TextureVariable","add_graph_node_id","output_names_attributes","allocate_variables","allocate_variable","new_variable","allocated","has_variable","has_space_for_variable","add_variable","new_allocation","TextureAllocation","next_allocation_name","explicit_shader_names","allocation_for_shader_name","input_names_for_node","_variables","set_allocation","variables_for_input_node","_allocation","_graph_node_ids","_particles_group_objects","assign_render_material","_render_material","update_render_material_uniforms","getCurrentRenderTarget","new_texture_allocations_json","_texture_allocations_json","_simulation_restart_required","variables_by_name","_created_textures_by_name","_used_textures_size","init_particle_group_points","create_gpu_compute","_gpu_compute","_particles_core_group","_last_simulated_frame","_compute_simulation","update_simulation_material_uniforms","nearest_power_of_two","isPowerOfTwo","max_particles_count","_init_particles_uvs","GPUComputationRenderer","renderTargets","all_variables","addVariable","setVariableDependencies","_create_texture_render_targets","_fill_textures","create_simulation_material_uniforms","uv_attrib_name","attribute_constructor","created_textures_by_name","texture_allocation","texture_variables","texture_position","createTexture","_restart_simulation","renderTexture","selected_geometries","sizeX","sizeY","currentTextureIndex","passThruUniforms","passThruTexture","passThruShader","createShaderMaterial","addResolutionDefine","materialShader","toFixed","computeFragmentShader","variableName","initialValueTexture","capabilities","isWebGL2","maxVertexTextures","createRenderTarget","depVar","found","nextTextureIndex","dl","doRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","currentRenderTarget","getRenderTarget","child_object","ROTATE_START","ROTATE_END","use_segments_count","_create_plane","size2d","update_normals","tmp_array_x","tmp_array_y","tmp_array_z","do_update_param","value_param","do_update","new_array","_array_for_component","DEFAULT_R","DEFAULT_S","closed","_geometries","_create_tube","line_segment","current_points","_create_tube_from_points","circle_template","circles","new_circle","circle","prev_circle","_skin","MAT_DOUBLE_SIDED","transfer_face_normals","_bound_assign_mat","_assign_double_sided_material_to_object","_raycaster","double_sided_material","core_group_collision","first_intersect","_assign_double_sided_material_to_core_group","intersectObjects","METHOD","CURVE_TYPE","POINTS_COUNT","SEGMENT_LENGTH","CURVE_TYPES","CENTRIPETAL","CHORDAL","CATMULLROM","curve_type","tension","segment_length","resampled_objects","resampled_object","_resample","_create_curve_from_points","old_curve_positions","curve","CatmullRomCurve3","new_curve_points","_get_points_from_curve","getSpacedPoints","getLength","transfer_attributes","attributes_to_transfer","add_id_attribute","areas_thresholds","area_sum","area_by_face_index","area","sorted_faces","attrib_values_by_name","face_index","cast_shadow","receive_shadow","process_one_input","process_two_inputs","line_segments0","_get_line_segments","first_line_segment","prev_src_geometry","line_segments1","line_segments","smallest_array","largest_array","other_line_segment","other_geo","SphereType","SPHERE_TYPE","isocahedron","SPHERE_TYPES","ISOCAHEDRON","angle_range_x","angle_range_y","detail","_create_required_geometry","_create_default_sphere","_create_default_isocahedron","IcosahedronBufferGeometry","TEXT_TYPE","opentype","TEXT_TYPES","FLAT","STROKE","font","multiline","extrude","stroke_width","_font_loader","FontLoader","_loaded_fonts","_load_url","_create_geometry_from_type_mesh","_create_geometry_from_type_flat","_create_geometry_from_type_line","_create_geometry_from_type_stroke","displayed_text","parameters","curveSegments","TextBufferGeometry","err","shapes","_get_shapes","ShapeBufferGeometry","shapes_from_font","getPoints","_svg_loader","_load_svg_loader","getStrokeStyle","shape","pointsToStroke","holeShapes","holes","hole","generateShapes","elements2","_load_ttf","_load_json","_ttf_loader","_load_ttf_loader","fnt","TTFLoader","reversed","arraybuffer","reverseCommands","commands","paths","command","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","glyph","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","head","yMin","yMax","original_font_information","radius_tube","segments_tube","TorusBufferGeometry","TorusKnotBufferGeometry","look_at","pivot","CylinderBufferGeometry","_camera_controller","CameraController","_update_uvs_from_camera","_processed_core_group","_camera_object","set_target","remove_target","look_at_target","matrixWorld","uvw","_vector_in_camera_space","obj_world_matrix","project","_update_always","_listener_added","_listener","_execute_callback","_remove_camera_event","old_target","_target","_add_camera_event","set_update_always","new_update_always","_current_event_name","CHANGE","MOVEEND","importer","process_ui_data","create_nodes","set_selection","set_flags","set_params","from_data_custom","process_inputs_data","set_inputs","process_nodes_ui_data","node_name","importers","input_data","input_node_name","node_data","has_param_and_same_type","_is_param_data_complex","_process_param_data_complex","_process_param_data_simple","params_delete_required","params_add_required","LINE_BREAK_REGEXP","CopyShader","ShaderPass","textureID","fsQuad","MaskPass","writeValue","clearValue","setMask","setLocked","stencil","setTest","setOp","REPLACE","setFunc","setClear","EQUAL","KEEP","ClearMaskPass","renderTarget","_pixelRatio","getPixelRatio","_height","renderTarget1","renderTarget2","copyPass","clock","Clock","swapBuffers","pass","insertPass","isLastEnabledPass","passIndex","deltaTime","getDelta","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","pixelRatio"],"mappings":"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AnB,EAAA65G,c,6BCjBb,OAAe,qjB,yFCAf,QACA,QAGA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,OACA,QAEA,QACA,QAEM2F,EAAa,CAClB,cACA,UACA,WACA,gBACA,YACA,aACA,kBACA,cACA,eACA,eACA,WACA,YACA,iBACA,aACA,cACA,qBACA,iBACA,kBACA,SACA,mBACA,eACA,gBAOA,cACA,UACA,YAGKC,EAA0C,CAC/C,kBAAmB,UACnB,qBAAsB,UACtB,cAAe,UACf,cAAe,UACf,WAAY,UACZ,kBAAmB,UACnB,cAAe,UACf,iBAAkB,UAClBvpD,OAAQ,UACR,eAAgB,UAChB,cAAe,UACf,UAAW,UACX,UAAW,UACX,WAAY,UACZ,iBAAkB,UAClB,eAAgB,UAChB,eAAgB,UAChB,aAAc,UACd,aAAc,UACd,mBAAoB,UACpB,iBAAkB,UAClB,iBAAkB,UAClB,cAAe,UACf,YAAa,UACb,gBAAiB,UACjB,gBAAiB,UACjB,aAAc,UACd,aAAc,UACd,cAAe,UACf,YAAa,UACb,WAAY,WAEPwpD,EAAyD,CAC9D,YAAa,CAAC,WACd,gBAAiB,CAAC,YAGbC,EAAgD,CACrD,kBAAmB,gBACnB,qBAAsB,mBACtB,cAAe,aACf,cAAe,aACf,WAAY,UACZ,kBAAmB,iBACnB,cAAe,aACf,iBAAkB,eAClBzpD,OAAQ,SACR,eAAgB,cAChB,cAAe,YACf,UAAW,SACX,UAAW,SACX,WAAY,UACZ,iBAAkB,eAClB,eAAgB,cAChB,eAAgB,aAChB,aAAc,YACd,aAAc,YACd,mBAAoB,iBACpB,iBAAkB,gBAClB,iBAAkB,eAClB,cAAe,YACf,YAAa,WACb,gBAAiB,eACjB,gBAAiB,cACjB,aAAc,YACd,aAAc,YACd,cAAe,aACf,YAAa,WACb,WAAY,WAIP0pD,EAAoBJ,EAAW9+G,QAAQ,eAW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","file":"polygonjs-engine.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([415,8,0,5,7,3,1,2,4,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// import {BaseNode} from '../../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {RampParam} from '../../../params/Ramp';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamOptionsByTypeMap} from '../../../params/types/ParamOptionsByTypeMap';\n\n// function _ParamCheckNameConsistency<T extends BaseNode>(name: string, target: T, key: keyof T, type: ParamType) {\n// \tconst key_s = key as string;\n// \tif (key_s != `_param_${name}`) {\n// \t\tconsole.warn('param name inconsistent');\n// \t}\n// \tconst param = target.params.get(name);\n// \tif (param && param.type != type) {\n// \t\tconsole.warn('param type inconsistent');\n// \t}\n// }\n// export const _ParamBoolean = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.BOOLEAN);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.boolean(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.float(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(default_value: number, options?: ParamOptions) {\n// \treturn <T extends NodeParamsConfig>(target: T, key: string) => {\n// \t\t// _ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\t// const config = new ParamConfig(ParamType.FLOAT, default_value, options);\n// \t\t// target.add_config(key, config);\n// \t\t// target.set_default_value(key, default_value);\n// \t\t// target.set_options(key, options);\n// \t\t// Object.defineProperty(target.options, key, {\n// \t\t// \tget: () => target.params.float(name),\n// \t\t// });\n// \t};\n// };\n// export const _ParamString = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.STRING);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.string(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector2 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR2);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector2(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector3 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR3);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector3(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamColor = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.COLOR);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.color(name),\n// \t\t});\n// \t};\n// };\n// declare global {\n// \tconst ParamB: typeof _ParamBoolean;\n// \tconst ParamF: typeof _ParamFloat;\n// \tconst ParamS: typeof _ParamString;\n// \tconst ParamV2: typeof _ParamVector2;\n// \tconst ParamV3: typeof _ParamVector3;\n// \tconst ParamC: typeof _ParamColor;\n// }\n// class ParamConfig<T extends ParamType> {\n// \tconstructor(readonly type: T, readonly default_value: ParamValuesTypeMap[T], readonly options: ParamOptions = {}) {}\n// }\nexport class ParamTemplate<T extends ParamType> {\n\treadonly value_type!: ParamValuesTypeMap[T];\n\treadonly param_class!: ParamConstructorMap[T];\n\t// readonly options?: ParamOptions;\n\n\tconstructor(public type: T, public init_value: ParamInitValuesTypeMap[T], public options?: ParamOptions) {}\n}\n\n// class Test1 {\n// \ta: number\n// \tb: string\n// }\n// type test = Extract<typeof Test1, string>;\n// type test2 = Pick<typeof Test1, 'b'>;\n// type test3 = Test1['b'];\n// type test2 = keyof BoxSopParamConfig;\nexport class ParamConfig {\n\t// static _GENERIC<T extends ParamType> (type: T, init_value: ParamInitValuesTypeMap[T], options?: ParamOptions) {\n\t// \treturn new ParamTemplate<T>(type, init_value, options);\n\t// }\n\t// static BUTTON(init_value: ParamInitValuesTypeMap[ParamType.BUTTON], options?: ParamOptions) {\n\t// \treturn this._GENERIC<ParamType.BUTTON>(ParamType.BUTTON, init_value, options)\n\t// }\n\tstatic BUTTON(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BUTTON>(ParamType.BUTTON, init_value, options);\n\t}\n\tstatic BOOLEAN(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BOOLEAN>(ParamType.BOOLEAN, init_value, options);\n\t}\n\tstatic COLOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.COLOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.COLOR>(ParamType.COLOR, init_value, options);\n\t}\n\tstatic FLOAT(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FLOAT>(ParamType.FLOAT, init_value, options);\n\t}\n\tstatic FOLDER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FOLDER] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FOLDER>(ParamType.FOLDER, init_value, options);\n\t}\n\tstatic INTEGER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.INTEGER>(ParamType.INTEGER, init_value, options);\n\t}\n\tstatic OPERATOR_PATH(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n\t}\n\tstatic RAMP(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.RAMP] = RampParam.DEFAULT_VALUE,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.RAMP]\n\t) {\n\t\treturn new ParamTemplate<ParamType.RAMP>(ParamType.RAMP, init_value, options);\n\t}\n\tstatic SEPARATOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.SEPARATOR] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.SEPARATOR>(ParamType.SEPARATOR, init_value, options);\n\t}\n\tstatic STRING(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.STRING] = '',\n\t\toptions?: ParamOptionsByTypeMap[ParamType.STRING]\n\t) {\n\t\treturn new ParamTemplate<ParamType.STRING>(ParamType.STRING, init_value, options);\n\t}\n\tstatic VECTOR2(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR2]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR2>(ParamType.VECTOR2, init_value, options);\n\t}\n\tstatic VECTOR3(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR3]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR3>(ParamType.VECTOR3, init_value, options);\n\t}\n\tstatic VECTOR4(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR4]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR4>(ParamType.VECTOR4, init_value, options);\n\t}\n}\n\nexport class NodeParamsConfig implements Dictionary<ParamTemplate<ParamType>> {\n\t[name: string]: ParamTemplate<ParamType>;\n}\n// export class NodeParamsConfig {}\n\n// interface ParamConfig {\n// \ttype: ParamType;\n// \tvalue: any;\n// \toptions?: ParamOptions;\n// }\n// export type ParamConfigsArray = ParamConfig[];\n\n// declare global {\n// \tinterface Window {\n// \t\tParamB: typeof _ParamB;\n// \t\tParamC: typeof _ParamC;\n// \t}\n// }\n// window.ParamC = _ParamC;\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\n// import {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// import lodash_includes from 'lodash/includes';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport {TypedNode} from '../_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {ObjectType} from '../../../core/geometry/Constant';\n\nimport {GeometryContainer} from '../../containers/Geometry';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerDB} from '../utils/FlagsController';\n// import * as Container from '../../Container/Geometry';\n\n// import {AttribTypeParam} from './concerns/AttribTypeParam';\n// import {Bypass} from './Concerns/Bypass';\n// import {GroupParam} from './concerns/GroupParam';\n// import {Named} from './concerns/Named'; // TODO; typescript\n// import {ObjectTypeParam} from './concerns/ObjectTypeParam';\n\n// TODO: do I really need to add attributes in objects?\n// TODO: after setting a node dirty, it should clear its object\n\n// import {RequestContainerGeometryCallback} from '../../../Engine/Container/Geometry'\n// const CONTAINER_CLASS = 'Geometry';\n\nenum MESSAGE {\n\tFROM_SET_CORE_GROUP = 'from set_core_group',\n\tFROM_SET_GROUP = 'from set_group',\n\tFROM_SET_OBJECTS = 'from set_objects',\n\tFROM_SET_OBJECT = 'from set_object',\n\tFROM_SET_GEOMETRIES = 'from set_geometries',\n\tFROM_SET_GEOMETRY = 'from set_geometry',\n}\n\nconst INPUT_GEOMETRY_NAME = 'input geometry';\nconst DEFAULT_INPUT_NAMES = [INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME];\n\nexport class TypedSopNode<K extends NodeParamsConfig> extends TypedNode<'GEOMETRY', BaseSopNodeType, K> {\n\tcontainer_controller: TypedContainerController<GeometryContainer> = new TypedContainerController<GeometryContainer>(\n\t\tthis,\n\t\tGeometryContainer\n\t);\n\tpublic readonly flags: FlagsControllerDB = new FlagsControllerDB(this);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.SOP;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// _master_group: Group\n\t// _objects: Object3D[] = []\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\tif (this.flags.display) {\n\t\t\tthis.flags.display.set(false);\n\t\t\tthis.flags.display.add_hook(() => {\n\t\t\t\tif (this.flags.display.active) {\n\t\t\t\t\tconst parent = this.parent;\n\t\t\t\t\tif (parent && parent.display_node_controller) {\n\t\t\t\t\t\tparent.display_node_controller.set_display_node(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\t// request_container() {\n\t// \treturn super.request_container(); //as Promise<GeometryContainer>;\n\t// }\n\n\t//\n\t//\n\t// GEOMETRY\n\t//\n\t//\n\t// group(): Group {\n\t// \treturn this._master_group = this._master_group || this._create_group()\n\t// }\n\t// set_group(group: Group){\n\t// \tthis._clear_objectsI() //(MESSAGE.FROM_SET_GROUP);\n\t// \tthis._master_group.add(group)\n\t// \t// let child;\n\n\t// \t// const new_children = [];\n\t// \t// while (child = group.children[0]) {\n\t// \t// \tnew_children.push(child);\n\t// \t// \tgroup.remove(child);\n\t// \t// }\n\n\t// \t// new_children.forEach(child=> {\n\t// \t// \tthis._master_group.add( child );\n\t// \t// });\n\n\t// \t// // if (this.allow_add_object_attributes()) {\n\t// \t// \tthis._master_group.traverse(object=> {\n\t// \t// \t\tthis._set_object_attributes(object);\n\t// \t// \t});\n\t// \t// // }\n\t// \tthis.set_container(this._master_group, MESSAGE.FROM_SET_GROUP);\n\t// }\n\tset_core_group(core_group: CoreGroup) {\n\t\tconst objects = core_group.objects();\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\tthis.set_container(core_group, MESSAGE.FROM_SET_CORE_GROUP);\n\t}\n\n\tset_object(object: Object3D) {\n\t\t// this._clear_objects();\n\t\t// this.add_object(object);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_OBJECT);\n\t\tthis._set_object_attributes(object);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_OBJECT);\n\t}\n\tset_objects(objects: Object3D[]) {\n\t\t// this._clear_objects();\n\t\t// const list = objects;\n\t\t// lodash_times(list.length, i=> {\n\t\t// \tconst object = list[i];\n\t\t// \tthis.add_object(object);\n\t\t// });\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_OBJECTS);\n\t}\n\n\t// add_object(object: Object3D) {\n\t// \tif (object != null) {\n\t// \t\tthis.group().add(object);\n\t// \t\t// if (this.allow_add_object_attributes()) {\n\t// \t\tthis._set_object_attributes(object);\n\t// \t\t// }\n\t// \t\treturn object;\n\t// \t}\n\t// }\n\t// add_geometry(geometry: BufferGeometry, type: ObjectType) {\n\t// \tlet object;\n\t// \tif (geometry.index == null) {\n\t// \t\tthis._add_index(geometry);\n\t// \t}\n\n\t// \tif ((object = this.create_object(geometry, type)) != null) {\n\t// \t\tthis.add_object(object);\n\t// \t}\n\t// }\n\n\tset_geometry(geometry: BufferGeometry, type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\t// this.add_geometry(geometry, type);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_GEOMETRY);\n\t\tconst object = this.create_object(geometry, type);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_GEOMETRY);\n\t}\n\t//this.end_cook()\n\n\tset_geometries(geometries: BufferGeometry[], type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\tconst objects: Object3D[] = [];\n\t\tlet object;\n\t\tgeometries.forEach((geometry) => {\n\t\t\tobject = this.create_object(geometry, type);\n\t\t\tthis._set_object_attributes(object);\n\t\t\tobjects.push(object);\n\t\t});\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_GEOMETRIES);\n\t}\n\n\tset_container_objects(objects: Object3D[], message: MESSAGE) {\n\t\tconst core_group = this.container_controller.container.core_content() || new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\tcore_group.touch();\n\t\tthis.set_container(core_group);\n\t}\n\n\t// do_clone_inputs() {\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_clone_inputs')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\t// allow_add_object_attributes() {\n\t// \tif (!this.do_clone_inputs()) { return false; }\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_add_object_attributes')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\n\t// _create_group() {\n\t// \tconst group = new Group();\n\t// \tgroup.name = this.full_path();\n\n\t// \tthis._init_sop_bypass_group(group)\n\n\t// \treturn group;\n\t// }\n\n\tcreate_object(geometry: BufferGeometry, type?: ObjectType): Object3DWithGeometry {\n\t\t// ensure it has an index\n\t\tif (!geometry.index) {\n\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t}\n\n\t\tif (type == null) {\n\t\t\ttype = CoreConstant.OBJECT_TYPE.MESH;\n\t\t}\n\t\t// if (!lodash_includes(CoreConstant.OBJECT_TYPES, type)) {\n\t\t// \tconst human_type = CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[type];\n\t\t// \tconst human_names = CoreConstant.OBJECT_TYPES.map(\n\t\t// \t\t(n) => CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[n]\n\t\t// \t);\n\t\t// \tthrow `type '${human_type}' not recognized. Available types are ${human_names.join(', ')}.`;\n\t\t// }\n\n\t\t// if (geometry != null) {\n\t\tconst object_constructor = CoreConstant.CONSTRUCTORS_BY_NAME[type]; //THREE[type];\n\t\tconst material = CoreConstant.MATERIALS[type].clone();\n\t\tconst object = new object_constructor(geometry, material) as Object3DWithGeometry;\n\t\tobject.castShadow = true;\n\t\tobject.receiveShadow = true;\n\t\tobject.frustumCulled = false;\n\n\t\treturn object;\n\t\t// }\n\t}\n\n\t_set_object_attributes(object: Object3D) {\n\t\t// if (!this.allow_add_object_attributes()) { return; }\n\t\t// TODO: the exception below are just to debug when a geo could be reused or not cloned properly\n\t\t// I could remove that when more sure it all refreshes fine, and this would allow the null or merge to\n\t\t// not have to clone the data\n\t\t// if ((object.name == null) && (object.name !== '')) {\n\t\t// \tif (this.do_clone_inputs()) {\n\t\t// \t\tthrow `object.name already set to ${object.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t}\n\t\t// } else {\n\t\t// \tobject.name = this.full_path();\n\t\t// }\n\n\t\t// if ((geometry = object.geometry) != null) {\n\t\t// \tif ((geometry.name == null) && (geometry.name !== '')) {\n\t\t// \t\tif (this.do_clone_inputs()) {\n\t\t// \t\t\tthrow `geometry.node_name already set to ${geometry.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tgeometry.name = this.full_path();\n\t\t// \t}\n\t\t// }\n\t\tconst material: Material = (object as Mesh).material as Material;\n\t\tif (material) {\n\t\t\tif (!this.scene) {\n\t\t\t\tconsole.log('no scene');\n\t\t\t\tthrow 'no scene';\n\t\t\t}\n\t\t\tconst material_node = CoreMaterial.node(this.scene, material) as BaseMatNodeType;\n\t\t\tif (material_node) {\n\t\t\t\tmaterial_node.add_render_hook(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// _clear_objects() {\n\t// \tconst group = this.group();\n\n\t// \tlet child\n\t// \twhile(child = group.children[0]) {\n\t// \t\tgroup.remove(child);\n\t// \t}\n\t// \t// const children = lodash_clone(group.children);\n\t// \t// let child;\n\t// \t// for(let i=0; i < children.length; i++){\n\t// \t// \tchild = children[i]\n\t// \t// \tgroup.remove(child);\n\t// \t// \tchild.traverse((object)=>{\n\t// \t// \t\tif (object.geometry != null) {\n\t// \t// \t\t\tobject.geometry.dispose();\n\t// \t// \t\t}\n\t// \t// \t\t// no more material dispose since each the materials are not cloned\n\t// \t// \t\t// if (object.material){\n\t// \t// \t\t// \tif (lodash_isArray(object.material)){\n\t// \t// \t\t// \t\tobject.material.forEach((mat)=>{mat.dispose()})\n\t// \t// \t\t// \t} else {\n\t// \t// \t\t// \t\tobject.material.dispose()\n\t// \t// \t\t// \t}\n\t// \t// \t\t// }\n\t// \t// \t});\n\t// \t// }\n\t// }\n\n\t_add_index(geometry: BufferGeometry) {\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_array = position_attrib.array;\n\t\tconst points_count = position_array.length / 3;\n\t\tconst indices: number[] = [];\n\t\tlodash_times(points_count, (i) => indices.push(i));\n\n\t\tgeometry.setIndex(indices);\n\t}\n}\n\nexport type BaseSopNodeType = TypedSopNode<NodeParamsConfig>;\nexport class BaseSopNodeClass extends TypedSopNode<NodeParamsConfig> {}\n","import {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\n\nimport {ParamType} from '../../../poly/ParamType';\nimport {RampParam} from '../../../params/Ramp';\n\n// TODO: simplify GLDataType into one enum\n// http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html\n\n//\n//\n// GL Data types\n//\n//\nexport enum ConnectionPointType {\n\tBOOL = 'bool',\n\t// BVEC2 = 'bvec2',\n\t// BVEC3 = 'bvec3',\n\t// BVEC4 = 'bvec4',\n\tINT = 'int',\n\t// IVEC2 = 'ivec2',\n\t// IVEC3 = 'ivec3',\n\t// IVEC4 = 'ivec4',\n\tFLOAT = 'float',\n\tVEC2 = 'vec2',\n\tVEC3 = 'vec3',\n\tVEC4 = 'vec4',\n\t// matrices to be used later\n\t// MAT2 = 'mat2',\n\t// MAT3 = 'mat3',\n\t// MAT4 = 'mat4',\n\tSAMPLER_2D = 'sampler2D',\n}\n\n//\n//\n// ALL GL Data types in an array\n//\n//\nexport const ConnectionPointTypes: Array<ConnectionPointType> = [\n\tConnectionPointType.BOOL,\n\t// ConnectionPointType.BVEC2,\n\t// ConnectionPointType.BVEC3,\n\t// ConnectionPointType.BVEC4,\n\tConnectionPointType.INT,\n\t// ConnectionPointType.IVEC2,\n\t// ConnectionPointType.IVEC3,\n\t// ConnectionPointType.IVEC4,\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\n//\n//\n// Map to convert from a GL Data type to a ParamType\n//\n//\ntype ConnectionPointTypeToParamTypeMapGeneric = {[key in ConnectionPointType]: ParamType};\nexport interface IConnectionPointTypeToParamTypeMap extends ConnectionPointTypeToParamTypeMapGeneric {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT;\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2;\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3;\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4;\n}\nexport const ConnectionPointTypeToParamTypeMap: IConnectionPointTypeToParamTypeMap = {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT,\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2,\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3,\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4,\n\n\t[ConnectionPointType.SAMPLER_2D]: ParamType.RAMP,\n};\n\n//\n//\n// Map to convert from a ParamType to GL Data type\n//\n//\ntype ParamTypeToConnectionPointTypeMapGeneric = {[key in ParamType]: ConnectionPointType | undefined};\nexport interface IParamTypeToConnectionPointTypeMap extends ParamTypeToConnectionPointTypeMapGeneric {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL;\n\t[ParamType.COLOR]: ConnectionPointType.VEC3;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT;\n\t[ParamType.FOLDER]: undefined;\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2;\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3;\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4;\n\t[ParamType.BUTTON]: undefined;\n\t[ParamType.OPERATOR_PATH]: undefined;\n\t[ParamType.RAMP]: undefined;\n\t[ParamType.SEPARATOR]: undefined;\n\t[ParamType.STRING]: undefined;\n}\nexport const ParamTypeToConnectionPointTypeMap: IParamTypeToConnectionPointTypeMap = {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL,\n\t[ParamType.COLOR]: ConnectionPointType.VEC3,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT,\n\t[ParamType.FOLDER]: undefined,\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2,\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3,\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4,\n\t[ParamType.BUTTON]: undefined,\n\t[ParamType.OPERATOR_PATH]: undefined,\n\t[ParamType.RAMP]: undefined,\n\t[ParamType.SEPARATOR]: undefined,\n\t[ParamType.STRING]: undefined,\n};\n\n//\n//\n// Map of GL Data type default values\n//\n//\nexport type ConnectionPointInitValueMapGeneric = {\n\t[key in ConnectionPointType]: ParamInitValuesTypeMap[IConnectionPointTypeToParamTypeMap[key]];\n};\nexport const ConnectionPointInitValueMap: ConnectionPointInitValueMapGeneric = {\n\t[ConnectionPointType.BOOL]: false,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 0,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 0,\n\t[ConnectionPointType.VEC2]: [0, 0],\n\t[ConnectionPointType.VEC3]: [0, 0, 0],\n\t[ConnectionPointType.VEC4]: [0, 0, 0, 0],\n\n\t[ConnectionPointType.SAMPLER_2D]: RampParam.DEFAULT_VALUE_JSON,\n};\n\n//\n//\n// Map of GL Data type component counts\n//\n//\nexport type ConnectionPointComponentsCountMapGeneric = {\n\t[key in ConnectionPointType]: number;\n};\nexport const ConnectionPointComponentsCountMap: ConnectionPointComponentsCountMapGeneric = {\n\t[ConnectionPointType.BOOL]: 1,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 1,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 1,\n\t[ConnectionPointType.VEC2]: 2,\n\t[ConnectionPointType.VEC3]: 3,\n\t[ConnectionPointType.VEC4]: 4,\n\t[ConnectionPointType.SAMPLER_2D]: 1,\n};\n","export enum InputCloneMode {\n\tALWAYS = 'always',\n\tNEVER = 'never',\n\tFROM_NODE = 'from_node',\n}\n","export enum ParamType {\n\tBOOLEAN = 'boolean',\n\tBUTTON = 'button',\n\tCOLOR = 'color',\n\tFLOAT = 'float',\n\tFOLDER = 'folder',\n\tINTEGER = 'integer',\n\tOPERATOR_PATH = 'operator_path',\n\tRAMP = 'ramp',\n\tSEPARATOR = 'separator',\n\tSTRING = 'string',\n\tVECTOR2 = 'vector2',\n\tVECTOR3 = 'vector3',\n\tVECTOR4 = 'vector4',\n}\n// export type ParamTypeKey = ParamType\n// export type ParamTypeKeysArray = Array<ParamTypeKey>\n// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]\n","export enum NodeContext {\n\tCOP = 'cop',\n\tEVENT = 'event',\n\tGL = 'gl',\n\tJS = 'js',\n\tMANAGER = 'managers',\n\tMAT = 'mat',\n\tOBJ = 'objects',\n\tSOP = 'sop',\n\tPOST = 'post',\n}\n\nexport interface NodeContextAndType {\n\tcontext: NodeContext;\n\ttype: string;\n}\n","import {CoreString} from './String';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isString from 'lodash/isString';\n\nexport class ThreeToGl {\n\tstatic any(value: any) {\n\t\tif (lodash_isString(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (lodash_isBoolean(value)) {\n\t\t\treturn `${value}`;\n\t\t}\n\n\t\tif (lodash_isNumber(value)) {\n\t\t\treturn `${CoreString.ensure_float(value)}`;\n\t\t} else {\n\t\t\tconst values = value.toArray().map((v: number) => {\n\t\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t\t});\n\t\t\tconst gl_type = `vec${values.length}`;\n\t\t\treturn `${gl_type}(${values.join(', ')})`;\n\t\t}\n\t}\n\n\tstatic vector3(vec: Vector3 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec3(${values.join(', ')})`;\n\t}\n\tstatic vector2(vec: Vector2 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec2(${values.join(', ')})`;\n\t}\n\n\tstatic vector3_float(vec: Vector3 | string, num: number | string): string {\n\t\tif (!lodash_isString(num)) {\n\t\t\tnum = CoreString.ensure_float(num);\n\t\t}\n\t\treturn `vec4(${this.vector3(vec)}, ${num})`;\n\t}\n\n\tstatic float4(x: number | string, y: number | string, z: number | string, w: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\tif (!lodash_isString(w)) {\n\t\t\tw = CoreString.ensure_float(w);\n\t\t}\n\t\treturn `vec4(${x}, ${y}, ${z}, ${w})`;\n\t}\n\tstatic float3(x: number | string, y: number | string, z: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\treturn `vec3(${x}, ${y}, ${z})`;\n\t}\n\tstatic float2(x: number | string, y: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\treturn `vec2(${x}, ${y})`;\n\t}\n\tstatic float(x: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\treturn `${x}`;\n\t}\n\tstatic int(x: number | string) {\n\t\treturn `${x}`;\n\t}\n\tstatic bool(x: number | string) {\n\t\treturn `${x}`;\n\t}\n}\n","import {BaseGlNodeType} from '../_Base';\nimport {TypedGLDefinitionCollection} from './GLDefinitionCollection';\nimport {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\n\nexport enum GLDefinitionType {\n\tATTRIBUTE = 'attribute',\n\tFUNCTION = 'function',\n\tUNIFORM = 'uniform',\n\tVARYING = 'varying',\n}\n\nexport abstract class TypedGLDefinition<T extends GLDefinitionType> {\n\t// constructor(protected _node: BaseGlNodeType, protected _name: string) {}\n\tconstructor(\n\t\tprotected _definition_type: T,\n\t\tprotected _data_type: ConnectionPointType,\n\t\tprotected _node: BaseGlNodeType,\n\t\tprotected _name: string\n\t) {\n\t\t// super(_node, _name);\n\t}\n\n\tget definition_type() {\n\t\treturn this._definition_type;\n\t}\n\tget data_type() {\n\t\treturn this._data_type;\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\t// get id() {\n\t// \treturn this._data_type;\n\t// }\n\n\tabstract get line(): string;\n\tcollection_instance() {\n\t\treturn new TypedGLDefinitionCollection<T>();\n\t}\n}\n\nexport class AttributeGLDefinition extends TypedGLDefinition<GLDefinitionType.ATTRIBUTE> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.ATTRIBUTE, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `attribute ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class FunctionGLDefinition extends TypedGLDefinition<GLDefinitionType.FUNCTION> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.FUNCTION, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn this.name;\n\t}\n}\n\nexport class UniformGLDefinition extends TypedGLDefinition<GLDefinitionType.UNIFORM> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.UNIFORM, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `uniform ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class VaryingGLDefinition extends TypedGLDefinition<GLDefinitionType.VARYING> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.VARYING, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `varying ${this.data_type} ${this.name}`;\n\t}\n}\nexport type BaseGLDefinition = TypedGLDefinition<GLDefinitionType>;\n","import {\n\tConnectionPointType,\n\tConnectionPointInitValueMapGeneric,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n\tIConnectionPointTypeToParamTypeMap,\n} from './ConnectionPointType';\n// import {ParamInitValuesTypeMap} from '../params/ParamsController';\n\nexport interface TypedNamedConnectionPointData<T extends ConnectionPointType> {\n\tname: string;\n\ttype: T;\n}\n\nexport class TypedNamedConnectionPoint<T extends ConnectionPointType> {\n\tprivate _json: TypedNamedConnectionPointData<T> | undefined;\n\n\tconstructor(\n\t\tprotected _name: string,\n\t\tprotected _type: T,\n\t\tprotected _init_value?: ConnectionPointInitValueMapGeneric[T]\n\t) {\n\t\tif (this._init_value === undefined) {\n\t\t\tthis._init_value = ConnectionPointInitValueMap[this._type];\n\t\t}\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget param_type(): IConnectionPointTypeToParamTypeMap[T] {\n\t\treturn ConnectionPointTypeToParamTypeMap[this._type];\n\t}\n\tget init_value() {\n\t\treturn this._init_value;\n\t}\n\n\tto_json(): TypedNamedConnectionPointData<T> {\n\t\treturn (this._json = this._json || this._create_json());\n\t}\n\tprivate _create_json(): TypedNamedConnectionPointData<T> {\n\t\treturn {\n\t\t\tname: this._name,\n\t\t\ttype: this._type,\n\t\t};\n\t}\n}\n\nexport type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;\n","import {TypedNode} from '../_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {BaseGlShaderAssembler} from './code/assemblers/_Base';\nimport {AssemblerControllerNode} from './code/Controller';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamInitValueSerialized} from '../../params/types/ParamInitValueSerialized';\nimport {GlNodeSpareParamsController} from './utils/SpareParamsController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport class TypedGlNode<K extends NodeParamsConfig> extends TypedNode<'GL', BaseGlNodeType, K> {\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.GL;\n\t}\n\tprotected _param_configs_controller: ParamConfigsController | undefined;\n\tprotected _assembler: BaseGlShaderAssembler | undefined;\n\n\treadonly spare_params_controller: GlNodeSpareParamsController = new GlNodeSpareParamsController(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController | undefined;\n\n\tinitialize_base_node() {\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.io.outputs.set_named_output_connection_points([]);\n\n\t\tthis.spare_params_controller.initialize_node();\n\t}\n\tcook() {\n\t\tconsole.warn('gl nodes should never cook');\n\t}\n\n\tprotected _set_mat_to_recompile() {\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tget material_node(): AssemblerControllerNode | undefined {\n\t\tif (this.parent) {\n\t\t\tif (this.parent.type == this.type) {\n\t\t\t\treturn (this.parent as BaseGlNodeType)?.material_node;\n\t\t\t} else {\n\t\t\t\treturn this.parent as AssemblerControllerNode;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// VARIABLES\n\t//\n\t//\n\tgl_var_name(name: string) {\n\t\treturn `v_POLY_${this.name}_${name}`;\n\t}\n\n\tvariable_for_input(name: string): string {\n\t\tconst input_index = this.io.inputs.get_input_index(name);\n\t\tconst connection = this.io.connections.input_connection(input_index);\n\t\tif (connection) {\n\t\t\tconst input_node = (<unknown>connection.node_src) as BaseGlNodeType;\n\t\t\tconst output_connection_point =\n\t\t\t\tinput_node.io.outputs.named_output_connection_points[connection.output_index];\n\t\t\tif (output_connection_point) {\n\t\t\t\tconst output_name = output_connection_point.name;\n\t\t\t\treturn input_node.gl_var_name(output_name);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`no output called '${name}' for gl node ${input_node.full_path()}`);\n\t\t\t\tthrow 'variable_for_input ERROR';\n\t\t\t}\n\t\t} else {\n\t\t\treturn ThreeToGl.any(this.params.get(name)?.value);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ADDED LINES\n\t//\n\t//\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {}\n\n\treset_code() {\n\t\tthis._param_configs_controller?.reset();\n\t\t// this.reset_lines();\n\t}\n\n\t//\n\t//\n\t// PARAM CONFIGS\n\t//\n\t//\n\tpublic set_param_configs() {}\n\tparam_configs() {\n\t\treturn this._param_configs_controller?.list;\n\t}\n\t// private reset_param_configs() {\n\t// \tthis._param_configs = [];\n\t// }\n\t// add_param_config<T extends ParamType>(\n\t// \ttype: T,\n\t// \tname: string,\n\t// \tdefault_value: ParamInitValuesTypeMap[T],\n\t// \tuniform_name: string\n\t// ) {\n\t// \tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t// \tthis._param_configs.push(param_config);\n\t// }\n\t// param_configs() {\n\t// \treturn this._param_configs;\n\t// }\n\t//\n\t//\n\t// INPUT\n\t//\n\t//\n\tgl_input_default_value(name: string): ParamInitValueSerialized {\n\t\treturn null;\n\t}\n\n\t//\n\t//\n\t// MISC\n\t//\n\t//\n\n\t//\n\t//\n\t// NEEDED?\n\t//\n\t//\n\t// set_assembler(assembler: BaseGlShaderAssembler) {\n\t// \tthis._assembler = assembler;\n\t// }\n\t// get assembler(): BaseGlShaderAssembler | undefined {\n\t// \treturn this._assembler;\n\t// }\n\n\t// shader_configs() {\n\t// \treturn this.assembler?.shader_configs || [];\n\t// }\n\t// shader_config(name: string) {\n\t// \treturn this.assembler?.shader_config(name);\n\t// }\n\t// shader_names() {\n\t// \treturn this.assembler?.shader_names || [];\n\t// }\n}\n\nexport type BaseGlNodeType = TypedGlNode<NodeParamsConfig>;\nexport class BaseGlNodeClass extends TypedGlNode<NodeParamsConfig> {}\n\nclass ParamlessParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ParamlessParamsConfig();\nexport class ParamlessTypedGlNode extends TypedGlNode<ParamlessParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n","// import {VertexColors} from 'three/src/constants'\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {NoColors} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {FrontSide} from 'three/src/constants';\n// import {DoubleSide} from 'three/src/constants'\nimport {Color} from 'three/src/math/Color';\nimport {Bone} from 'three/src/objects/Bone';\n// import {AdditiveBlending} from 'three/src/constants'\nimport {Material} from 'three/src/materials/Material';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\n// const THREE = {AdditiveBlending, Bone, Color, DoubleSide, FrontSide, Group, LineBasicMaterial, LineSegments, Mesh, MeshLambertMaterial, MeshStandardMaterial, NoColors, Object3D, Points, PointsMaterial, Scene, SkinnedMesh, VertexColors}\n\ninterface MaterialsByString {\n\t[propName: string]: Material;\n}\n\n// export enum AttribClass {\n// \tVERTEX = \"vertex\",\n// \tOBJECT = \"object\"\n// }\n// materials['MeshStandard'] = new MeshStandardMaterial({\n// \tcolor: 0xffffff,\n// \t//vertexColors: VertexColors\n// \tside: FrontSide, // DoubleSide\n// \tmetalness: 0.5,\n// \troughness: 0.9\n// })\n// materials[Mesh.name] = new MeshLambertMaterial({ // MeshStandardMaterial\n// \tcolor: new Color(0.5,0.5,1),\n// \tside: FrontSide,\n// \tvertexColors: NoColors,\n// \ttransparent: true,\n// \tdepthTest: true\n// })\n// materials[Points.name] = new PointsMaterial({\n// \tcolor: 0xffffff,\n// \tsize: 0.1,\n// \t//blending: AdditiveBlending\n// \tdepthTest: true\n// })\n// materials[LineSegments.name] = new LineBasicMaterial({\n// \tcolor: 0xffffff,\n// \tlinewidth: 1\n// })\nexport enum ObjectType {\n\tMESH = 'MESH',\n\tPOINTS = 'POINTS',\n\tLINE_SEGMENTS = 'LINE_SEGMENTS',\n}\nexport const ObjectTypes = [ObjectType.MESH, ObjectType.POINTS, ObjectType.LINE_SEGMENTS];\nexport const ObjectTypeMenuEntries = [\n\t{name: 'Mesh', value: ObjectTypes.indexOf(ObjectType.MESH)},\n\t{name: 'Points', value: ObjectTypes.indexOf(ObjectType.POINTS)},\n\t{name: 'LineSegments', value: ObjectTypes.indexOf(ObjectType.LINE_SEGMENTS)},\n];\n\nexport function ObjectTypeByObject(object: Object3D): ObjectType | undefined {\n\tif (object instanceof Mesh) {\n\t\treturn ObjectType.MESH;\n\t}\n\tif (object instanceof LineSegments) {\n\t\treturn ObjectType.LINE_SEGMENTS;\n\t}\n\tif (object instanceof Points) {\n\t\treturn ObjectType.POINTS;\n\t}\n\tconsole.warn('ObjectTypeByObject received an unknown object type', object);\n}\n\nconst materials: MaterialsByString = {\n\tMeshStandard: new MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\t//vertexColors: VertexColors\n\t\tside: FrontSide, // DoubleSide\n\t\tmetalness: 0.5,\n\t\troughness: 0.9,\n\t}),\n\t[ObjectType.MESH]: new MeshLambertMaterial({\n\t\t// MeshStandardMaterial\n\t\tcolor: new Color(0.5, 0.5, 1),\n\t\tside: FrontSide,\n\t\tvertexColors: false,\n\t\ttransparent: true,\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.POINTS]: new PointsMaterial({\n\t\tcolor: 0xffffff,\n\t\tsize: 0.1,\n\t\t//blending: AdditiveBlending\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.LINE_SEGMENTS]: new LineBasicMaterial({\n\t\tcolor: 0xffffff,\n\t\tlinewidth: 1,\n\t}),\n};\n\n// TODO: typescript: check that this works after using uglifier\n\nexport enum AttribClass {\n\tVERTEX = 0,\n\tOBJECT = 1,\n}\n\nexport const AttribClassMenuEntries = [\n\t{name: 'vertex', value: AttribClass.VERTEX},\n\t{name: 'object', value: AttribClass.OBJECT},\n];\n\nexport enum AttribType {\n\tNUMERIC = 0,\n\tSTRING = 1,\n}\nexport const AttribTypeMenuEntries = [\n\t{name: 'numeric', value: AttribType.NUMERIC},\n\t{name: 'string', value: AttribType.STRING},\n];\n\nexport const CoreConstant = {\n\tATTRIB_CLASS: {\n\t\tVERTEX: AttribClass.VERTEX,\n\t\tOBJECT: AttribClass.OBJECT,\n\t},\n\n\tATTRIB_TYPE: {\n\t\tNUMERIC: 0,\n\t\tSTRING: 1,\n\t},\n\n\tOBJECT_TYPE: {\n\t\t// TODO: typescript\n\t\tMESH: ObjectType.MESH,\n\t\tPOINTS: ObjectType.POINTS,\n\t\tLINE_SEGMENTS: ObjectType.LINE_SEGMENTS,\n\t},\n\tOBJECT_TYPES: ObjectTypes,\n\tCONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {\n\t\t[Scene.name]: 'Scene',\n\t\t[Group.name]: 'Group',\n\t\t[Object3D.name]: 'Object3D',\n\t\t[Mesh.name]: 'Mesh',\n\t\t[Points.name]: 'Points',\n\t\t[LineSegments.name]: 'LineSegments',\n\t\t[Bone.name]: 'Bone',\n\t\t[SkinnedMesh.name]: 'SkinnedMesh',\n\t},\n\tCONSTRUCTORS_BY_NAME: {\n\t\t[ObjectType.MESH]: Mesh,\n\t\t[ObjectType.POINTS]: Points,\n\t\t[ObjectType.LINE_SEGMENTS]: LineSegments,\n\t},\n\t// CONSTRUCTORS_BY_TYPE: {\n\t// \t['MESH']: Mesh,\n\t// \t['POINTS']: Points,\n\t// \t['LINE_SEGMENTS']: LineSegments,\n\t// },\n\t// OBJECT_TYPE_BY_CONSTRUCTOR_NAME: {\n\t// \t[Mesh.name]: 'MESH',\n\t// \t[Points.name]: 'POINTS',\n\t// \t[LineSegments.name]: 'LINE_SEGMENTS',\n\t// },\n\tMATERIALS: materials,\n};\n\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Scene.name] = 'Scene'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Group.name] = 'Group'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Object3D.name] = 'Object3D'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Mesh.name] = 'Mesh'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Points.name] = 'Points'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LineSegments'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Bone.name] = 'Bone'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[SkinnedMesh.name] = 'SkinnedMesh'\n\n// CoreConstant.CONSTRUCTORS_BY_NAME[Mesh.name] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_NAME[Points.name] = Points\n// CoreConstant.CONSTRUCTORS_BY_NAME[LineSegments.name] = LineSegments\n\n// CoreConstant.CONSTRUCTORS_BY_TYPE['MESH'] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_TYPE['POINTS'] = Points\n// CoreConstant.CONSTRUCTORS_BY_TYPE['LINE_SEGMENTS'] = LineSegments\n\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Mesh.name] = 'MESH'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Points.name] = 'POINTS'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LINE_SEGMENTS'\n","import lodash_range from 'lodash/range';\nimport lodash_compact from 'lodash/compact';\nimport {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GLDefinitionType, TypedGLDefinition} from './utils/GLDefinition';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nclass BaseGlMathFunctionParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new BaseGlMathFunctionParamsConfig();\nexport abstract class BaseGlMathFunctionGlNode extends BaseAdaptiveGlNode<BaseGlMathFunctionParamsConfig> {\n\tparams_config = ParamsConfig;\n\tprotected gl_method_name() {\n\t\treturn '';\n\t}\n\tprotected gl_function_definitions(): TypedGLDefinition<GLDefinitionType>[] {\n\t\treturn [];\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst type: ConnectionPointType =\n\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\tif (this.io.connections.first_input_connection()) {\n\t\t\tlet count = Math.max(lodash_compact(this.io.connections.input_connections()).length + 1, 2);\n\t\t\treturn lodash_range(count).map((i) => type);\n\t\t} else {\n\t\t\treturn lodash_range(2).map((i) => type);\n\t\t}\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n\n//\n//\n// 1 argument\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg1GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type];\n\t}\n}\n\n//\n//\n// 2 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg2GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t}\n}\n\n//\n//\n// 3 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg3GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type];\n\t}\n}\n//\n//\n// 4 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg4GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type];\n\t}\n}\n//\n//\n// 5 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg5GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type, type];\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_trim from 'lodash/trim';\nimport lodash_compact from 'lodash/compact';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_padEnd from 'lodash/padEnd';\nimport lodash_capitalize from 'lodash/capitalize';\nimport lodash_snakeCase from 'lodash/snakeCase';\nimport lodash_upperFirst from 'lodash/upperFirst';\nimport lodash_camelCase from 'lodash/camelCase';\nimport lodash_isNumber from 'lodash/isNumber';\n\nconst ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']\n\n// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n// const LETTERS_UPPERCASE = LETTERS.toUpperCase()\n// const NUMBERS = '0123645789'\n// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS\n\nconst TAIL_DIGIT_MATCH_REGEXP = /\\d+$/;\n// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\\d$/\nconst INDICES_LIST_SEPARATOR = /,| /;\n\n// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number\nconst NUM_REGEXP = /^-?\\d+\\.?\\d*$/;\nenum BooleanString {\n\tTRUE = 'true',\n\tFALSE = 'false',\n}\n\nexport class CoreString {\n\t// static has_tail_digits(word: string): boolean {\n\t// \tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP)\n\t// \treturn (match != null)\n\t// }\n\tstatic is_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE || word == BooleanString.FALSE;\n\t}\n\tstatic to_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE;\n\t}\n\tstatic is_number(word: string): boolean {\n\t\treturn NUM_REGEXP.test(word);\n\t}\n\n\tstatic tail_digits(word: string): number {\n\t\tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP);\n\t\tif (match) {\n\t\t\treturn parseInt(match[0]);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic increment(word: string): string {\n\t\tlet match;\n\t\tif ((match = word.match(TAIL_DIGIT_MATCH_REGEXP))) {\n\t\t\tconst digits = parseInt(match[0]);\n\t\t\tconst prefix = word.substring(0, word.length - match[0].length);\n\t\t\treturn `${prefix}${digits + 1}`;\n\t\t} else {\n\t\t\treturn `${word}1`;\n\t\t}\n\t}\n\n\tstatic pluralize(word: string): string {\n\t\tconst last_char = word[word.length - 1];\n\t\tif (last_char !== 's') {\n\t\t\treturn `${word}s`;\n\t\t} else {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\tstatic camel_case(word: string): string {\n\t\treturn lodash_camelCase(word);\n\t}\n\tstatic upper_first(word: string): string {\n\t\treturn lodash_upperFirst(word);\n\t}\n\tstatic snake_case(word: string): string {\n\t\treturn lodash_snakeCase(word);\n\t}\n\tstatic titleize(word: string): string {\n\t\treturn lodash_capitalize(word.replace(/_/g, ' '));\n\t}\n\n\tstatic type_to_class_name(word: string): string {\n\t\treturn this.upper_first(lodash_camelCase(word));\n\t}\n\t// static class_name_to_type(word): string {\n\t// \t// if(this.has_tail_digits(word)){\n\t// \t// \tconst tail_digits = `${this.tail_digits(word)}`\n\t// \t// \tconst head = word.substr(0, word.length-tail_digits.length)\n\t// \t// \tconst head_snake_case = this.snake_case(head)\n\t// \t// \tconsole.log(word, tail_digits, head, head_snake_case)\n\t// \t// \treturn `${head_snake_case}${tail_digits}`;\n\t// \t// } else {\n\t// \t// \treturn this.snake_case(word)\n\t// \t// }\n\t// \tconst snake_case = this.snake_case(word)\n\t// \tconst match = snake_case.match(DIGIT_PREDEDED_BY_UNDERSCOPE)\n\t// \tconsole.log(\"-----\", snake_case, match)\n\t// \treturn snake_case\n\t// }\n\t// static class_name_to_human(word): string {\n\t// \tconst human_name = this.class_name_to_type(word).replace(/\\s/, ' ');\n\t// \treturn human_name.replace(/_/g, \" \");\n\t// }\n\n\tstatic timestamp_to_seconds(word: string): number {\n\t\treturn Date.parse(word) / 1000;\n\t}\n\tstatic seconds_to_timestamp(seconds: number): string {\n\t\tconst d = new Date();\n\t\td.setTime(seconds * 1000);\n\t\treturn d.toISOString().substr(11, 8);\n\t}\n\n\tstatic precision(val: number, decimals: number = 2): string {\n\t\t// if (decimals == null) { decimals = 2; }\n\t\t// const factor = Math.pow(10, decimals);\n\t\t// const num = Math.floor(factor * val) / factor;\n\t\t// let number_s = `${num}`;\n\n\t\t// let elements = number_s.split('.');\n\t\t// if (decimals <= 0){\n\t\t// \treturn elements[0];\n\t\t// }\n\n\t\t// if (elements.length === 1) {\n\t\t// \t// number_s = `${number_s}.00`;\n\t\t// \tconst string_to_pad = `${number_s}.`\n\t\t// \tconst pad = string_to_pad.length + decimals\n\t\t// \treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t// } else {\n\t\t// \tconst integer_element = elements[0];\n\t\t// \tlet fraction_element = elements[1];\n\t\t// \tif (fraction_element.length === 1) {\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}0`;\n\t\t// \t} else if (fraction_element.length > 2) {\n\t\t// \t\tfraction_element = fraction_element.slice(0, 2);\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}`;\n\t\t// \t}\n\t\t// }\n\n\t\t// elements = number_s.split('.');\n\t\t// console.log(\"decimals:\", decimals, elements[1].length, number_s)\n\t\t// if (elements[1].length < decimals){\n\t\t// \tconst string_to_pad = number_s\n\t\t// \tconst pad = string_to_pad.length + (decimals - elements[1].length)\n\t\t// \tnumber_s = lodash_padEnd(string_to_pad, pad, '0');\n\t\t// }\n\n\t\t// return number_s;\n\t\tdecimals = Math.max(decimals, 0);\n\t\tconst elements = `${val}`.split('.');\n\n\t\tif (decimals <= 0) {\n\t\t\treturn elements[0];\n\t\t}\n\n\t\tlet frac = elements[1];\n\t\tif (frac !== undefined) {\n\t\t\tif (frac.length > decimals) {\n\t\t\t\tfrac = frac.substring(0, decimals);\n\t\t\t}\n\n\t\t\tfrac = lodash_padEnd(frac, decimals, '0');\n\t\t\treturn `${elements[0]}.${frac}`;\n\t\t} else {\n\t\t\tconst string_to_pad = `${val}.`;\n\t\t\tconst pad = string_to_pad.length + decimals;\n\t\t\treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t}\n\t}\n\n\tstatic ensure_float(num: number): string {\n\t\t// const integer = Math.floor(num)\n\t\t// const delta = num - integer\n\t\t// if(delta)\n\t\tconst num_as_string = `${num}`;\n\t\tconst dot_pos = num_as_string.indexOf('.');\n\t\tif (dot_pos >= 0) {\n\t\t\treturn num_as_string;\n\t\t} else {\n\t\t\treturn `${num_as_string}.0`;\n\t\t}\n\t}\n\n\t// https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438\n\tstatic match_mask(word: string, rule: string) {\n\t\tif (rule === '*') {\n\t\t\treturn true;\n\t\t}\n\t\t// \".\"  => Find a single character, except newline or line terminator\n\t\t// \".*\" => Matches any string that contains zero or more characters\n\t\trule = rule.split('*').join('.*');\n\n\t\t// \"^\"  => Matches any string with the following at the beginning of it\n\t\t// \"$\"  => Matches any string with that in front at the end of it\n\t\trule = `^${rule}$`;\n\n\t\t// Create a regular expression object for matching string\n\t\tconst regex = new RegExp(rule);\n\n\t\t// Returns true if it finds a match, otherwise it returns false\n\t\treturn regex.test(word);\n\t}\n\tstatic matches_one_mask(word: string, masks: string[]): boolean {\n\t\tlet matches_one_mask = false;\n\t\tfor (let mask of masks) {\n\t\t\tif (CoreString.match_mask(word, mask)) {\n\t\t\t\tmatches_one_mask = true;\n\t\t\t}\n\t\t}\n\t\treturn matches_one_mask;\n\t}\n\n\tstatic attrib_names(word: string): string[] {\n\t\t// let elements = [word];\n\t\t// lodash_each(ATTRIB_NAMES_SEPARATORS, separator => elements = lodash_flatten(lodash_map(elements, element => element.split(separator))));\n\t\tconst elements = word.split(ATTRIB_NAMES_SEPARATOR);\n\t\tconst trimed_elements = lodash_compact(\n\t\t\telements.map((e) => {\n\t\t\t\treturn lodash_trim(e);\n\t\t\t})\n\t\t);\n\t\tconst uniq = lodash_uniq(trimed_elements);\n\n\t\t// const names: string[] = []\n\t\t// ATTRIB_NAMES_SEPARATORS.forEach(separator=>{\n\t\t// \tword.split(separator).forEach( element=>{\n\t\t// \t\tnames.push(element.trim())\n\t\t// \t} )\n\t\t// })\n\n\t\t// // elements = lodash_filter(elements, element => (element != null) && (element.length > 0));\n\t\t// return lodash_uniq(names)\n\n\t\t// return lodash_map(elements, attr_name => lodash_trim(attr_name));\n\t\treturn uniq;\n\t}\n\tstatic to_id(val: string): number {\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst elements = val.split('').reverse();\n\t\tlet id = 0;\n\t\tlet exp = 0;\n\t\telements.forEach((element, i) => {\n\t\t\tlet index = element.charCodeAt(0);\n\n\t\t\tif (index >= 0) {\n\t\t\t\texp = i % 10;\n\t\t\t\tid += index * 10 ** exp;\n\t\t\t\tid = id % Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\t\t});\n\t\treturn id;\n\t}\n\n\tstatic indices(indices_string: string): number[] {\n\t\tconst elements = indices_string.split(INDICES_LIST_SEPARATOR);\n\t\tif (elements.length > 1) {\n\t\t\treturn lodash_uniq(lodash_flatten(elements.map((element) => this.indices(element)))).sort((a, b) => a - b);\n\t\t} else {\n\t\t\tconst element = elements[0];\n\t\t\tif (element) {\n\t\t\t\tconst range_separator = '-';\n\t\t\t\tif (element.indexOf(range_separator) > 0) {\n\t\t\t\t\tconst range_elements = element.split(range_separator);\n\t\t\t\t\treturn lodash_range(parseInt(range_elements[0]), parseInt(range_elements[1]) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tconst parsed = parseInt(element);\n\t\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\t\treturn [parsed];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic escape_line_breaks(word: string): string {\n\t\treturn word.replace(/(\\r\\n|\\n|\\r)/gm, '\\\\n');\n\t}\n}\n","export enum ShaderName {\n\tVERTEX = 'vertex',\n\tFRAGMENT = 'fragment',\n\tLEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader',\n\tPARTICLES_0 = 'particles_0',\n\tPARTICLES_1 = 'particles_1',\n\tPARTICLES_2 = 'particles_2',\n\tPARTICLES_3 = 'particles_3',\n\tPARTICLES_4 = 'particles_4',\n\tPARTICLES_5 = 'particles_5',\n\tPARTICLES_6 = 'particles_6',\n\tPARTICLES_7 = 'particles_7',\n\tPARTICLES_8 = 'particles_8',\n\tPARTICLES_9 = 'particles_9',\n}\nexport const ParticleShaderNames: Array<ShaderName> = [\n\tShaderName.PARTICLES_0,\n\tShaderName.PARTICLES_1,\n\tShaderName.PARTICLES_2,\n\tShaderName.PARTICLES_3,\n\tShaderName.PARTICLES_4,\n\tShaderName.PARTICLES_5,\n\tShaderName.PARTICLES_6,\n\tShaderName.PARTICLES_7,\n\tShaderName.PARTICLES_8,\n\tShaderName.PARTICLES_9,\n];\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2'\nimport {Int32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\n\n// const THREE = {\n// \tBox3,\n// \tBufferGeometry,\n// \tFloat32BufferAttribute,\n// \tInt32BufferAttribute,\n// \tInterleavedBufferAttribute,\n// \tVector2,\n// \tVector3,\n// }\nimport lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_each from 'lodash/each';\nimport lodash_chunk from 'lodash/chunk';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CorePoint} from './Point';\nimport {CoreFace} from './Face';\nimport {CoreConstant, ObjectType} from './Constant';\nimport {CoreAttribute} from './Attribute';\nimport {MonkeyPatcher} from './MonkeyPatcher';\n\nimport {BufferGeometryUtils} from '../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\nimport {CoreAttributeData} from './AttributeData';\n\nexport class CoreGeometry {\n\t_bounding_box: Box3 | undefined;\n\tprivate _points: CorePoint[] | undefined;\n\n\t// @INDEX_MODE_POINTS = 'INDEX_MODE_POINTS'\n\t// @INDEX_MODE_FACES = 'INDEX_MODE_FACES'\n\t// @INDEX_MODE_LINES = 'INDEX_MODE_LINES'\n\n\tconstructor(private _geometry: BufferGeometry) {}\n\t//\n\n\tgeometry() {\n\t\treturn this._geometry;\n\t}\n\tuuid() {\n\t\treturn this._geometry.uuid;\n\t}\n\n\tbounding_box() {\n\t\treturn (this._bounding_box = this._bounding_box || this._create_bounding_box());\n\t}\n\t_create_bounding_box() {\n\t\tthis._geometry.computeBoundingBox();\n\t\tif (this._geometry.boundingBox) {\n\t\t\treturn this._geometry.boundingBox;\n\t\t}\n\t}\n\n\tmark_as_instance() {\n\t\tthis._geometry.userData['is_instance'] = true;\n\t}\n\tstatic marked_as_instance(geometry: BufferGeometry): boolean {\n\t\treturn geometry.userData['is_instance'] === true;\n\t}\n\tmarked_as_instance(): boolean {\n\t\treturn CoreGeometry.marked_as_instance(this._geometry);\n\t}\n\tposition_attrib_name() {\n\t\tlet name = 'position';\n\t\tif (this.marked_as_instance()) {\n\t\t\tname = 'instancePosition';\n\t\t}\n\t\treturn name;\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis._geometry.computeVertexNormals();\n\t}\n\n\tuser_data_attribs() {\n\t\tconst key = 'indexed_attrib_values';\n\t\treturn (this._geometry.userData[key] = this._geometry.userData[key] || {});\n\t}\n\tindexed_attribute_names() {\n\t\treturn Object.keys(this.user_data_attribs() || {});\n\t}\n\tuser_data_attrib(name: string) {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attribs()[name];\n\t}\n\tis_attrib_indexed(name: string): boolean {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attrib(name) != null;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tif (name === 'ptnum') {\n\t\t\treturn true;\n\t\t}\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.attributes[name] != null;\n\t}\n\tattrib_type(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_names(): string[] {\n\t\treturn Object.keys(this._geometry.attributes);\n\t}\n\tattrib_sizes() {\n\t\tconst h: Dictionary<number> = {};\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\th[attrib_name] = this._geometry.attributes[attrib_name].itemSize;\n\t\t}\n\t\treturn h;\n\t}\n\tattrib_size(name: string): number {\n\t\tlet attrib;\n\t\tname = CoreAttribute.remap_name(name);\n\t\tif ((attrib = this._geometry.attributes[name]) != null) {\n\t\t\treturn attrib.itemSize;\n\t\t} else {\n\t\t\tif (name === 'ptnum') {\n\t\t\t\t// to ensure attrib copy with ptnum as source works\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tset_indexed_attribute_values(name: string, values: string[]) {\n\t\tthis.user_data_attribs()[name] = values;\n\t}\n\n\tset_indexed_attribute(name: string, values: string[], indices: number[]) {\n\t\tthis.set_indexed_attribute_values(name, values);\n\t\tthis._geometry.setAttribute(name, new Int32BufferAttribute(indices, 1));\n\t}\n\n\tadd_numeric_attrib(name: string, size: number = 1, default_value: NumericAttribValue = 0) {\n\t\tconst values = [];\n\n\t\tlet attribute_added = false;\n\t\tif (lodash_isNumber(default_value)) {\n\t\t\t// adding number\n\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\tvalues.push(default_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute_added = true;\n\t\t} else {\n\t\t\tif (size > 1) {\n\t\t\t\tif (lodash_isArray(default_value)) {\n\t\t\t\t\t// adding array\n\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\t\t\tvalues.push(default_value[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tattribute_added = true;\n\t\t\t\t} else {\n\t\t\t\t\t// adding Vector2\n\t\t\t\t\tconst vec2 = default_value as Vector2Like;\n\t\t\t\t\tif (size == 2 && vec2.x != null && vec2.y != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec2.x);\n\t\t\t\t\t\t\tvalues.push(vec2.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector3\n\t\t\t\t\tconst vec3 = default_value as Vector3Like;\n\t\t\t\t\tif (size == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec3.x);\n\t\t\t\t\t\t\tvalues.push(vec3.y);\n\t\t\t\t\t\t\tvalues.push(vec3.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Color\n\t\t\t\t\tconst col = default_value as ColorLike;\n\t\t\t\t\tif (size == 3 && col.r != null && col.g != null && col.b != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(col.r);\n\t\t\t\t\t\t\tvalues.push(col.g);\n\t\t\t\t\t\t\tvalues.push(col.b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector4\n\t\t\t\t\tconst vec4 = default_value as Vector4Like;\n\t\t\t\t\tif (size == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec4.x);\n\t\t\t\t\t\t\tvalues.push(vec4.y);\n\t\t\t\t\t\t\tvalues.push(vec4.z);\n\t\t\t\t\t\t\tvalues.push(vec4.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (attribute_added) {\n\t\t\tthis._geometry.setAttribute(name, new Float32BufferAttribute(values, size));\n\t\t} else {\n\t\t\tthrow 'no other default value allowed for now in add_numeric_attrib';\n\t\t}\n\t}\n\n\tinit_position_attribute(points_count: number, default_value?: Vector3) {\n\t\tconst values = [];\n\t\tif (default_value == null) {\n\t\t\tdefault_value = new Vector3();\n\t\t}\n\n\t\tfor (let i = 0; i < points_count; i++) {\n\t\t\tvalues.push(default_value.x);\n\t\t\tvalues.push(default_value.y);\n\t\t\tvalues.push(default_value.z);\n\t\t}\n\n\t\treturn this._geometry.setAttribute('position', new Float32BufferAttribute(values, 3));\n\t}\n\n\tadd_attribute(name: string, attrib_data: CoreAttributeData) {\n\t\tswitch (attrib_data.type()) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\treturn console.log('TODO: to implement');\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\treturn this.add_numeric_attrib(name, attrib_data.size());\n\t\t}\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tif (this.is_attrib_indexed(old_name)) {\n\t\t\tthis.user_data_attribs()[new_name] = lodash_clone(this.user_data_attribs()[old_name]);\n\t\t\tdelete this.user_data_attribs()[old_name];\n\t\t}\n\n\t\tconst old_attrib = this._geometry.getAttribute(old_name);\n\t\tthis._geometry.setAttribute(new_name, new Float32BufferAttribute(old_attrib.array, old_attrib.itemSize));\n\t\treturn this._geometry.deleteAttribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\tdelete this.user_data_attribs()[name];\n\t\t}\n\n\t\treturn this._geometry.deleteAttribute(name);\n\t}\n\n\tclone(): BufferGeometry {\n\t\treturn CoreGeometry.clone(this._geometry);\n\t}\n\n\tstatic clone(src_geometry: BufferGeometry): BufferGeometry {\n\t\tlet src_userData;\n\n\t\t// monkey path\n\t\tfor (let attribute_name of Object.keys(src_geometry.attributes)) {\n\t\t\tconst attribute = src_geometry.getAttribute(attribute_name);\n\t\t\tif (attribute.constructor.name == InterleavedBufferAttribute.name) {\n\t\t\t\tMonkeyPatcher.patch(attribute as InterleavedBufferAttribute);\n\t\t\t}\n\t\t}\n\n\t\tconst new_geometry = src_geometry.clone();\n\t\tif ((src_userData = src_geometry.userData) != null) {\n\t\t\tnew_geometry.userData = lodash_cloneDeep(src_userData);\n\t\t}\n\t\treturn new_geometry;\n\t}\n\n\tpoints_count(): number {\n\t\treturn CoreGeometry.points_count(this._geometry);\n\t}\n\n\tstatic points_count(geometry: BufferGeometry): number {\n\t\tlet position;\n\t\tlet count = 0;\n\t\tconst core_geometry = new this(geometry);\n\t\tlet position_attrib_name = 'position';\n\t\tif (core_geometry.marked_as_instance()) {\n\t\t\tposition_attrib_name = 'instancePosition';\n\t\t}\n\n\t\tif ((position = geometry.getAttribute(position_attrib_name)) != null) {\n\t\t\tlet array;\n\t\t\tif ((array = position.array) != null) {\n\t\t\t\tcount = array.length / 3;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t// TODO: use lodash_chunk\n\t// like: lodash_chunk(template_geometry.getAttribute('position').array, 3)\n\tpoints(): CorePoint[] {\n\t\treturn (this._points = this._points || this.points_from_geometry());\n\t}\n\treset_points() {\n\t\tthis._points = undefined;\n\t}\n\tpoints_from_geometry(): CorePoint[] {\n\t\tconst points = [];\n\t\tconst position_attrib = this._geometry.getAttribute(this.position_attrib_name());\n\n\t\tif (position_attrib != null) {\n\t\t\tconst points_count = position_attrib.array.length / 3;\n\t\t\tfor (let point_index = 0; point_index < points_count; point_index++) {\n\t\t\t\tconst point = new CorePoint(this, point_index);\n\n\t\t\t\t// lodash_each lodash_keys(@_geometry.attributes), (attrib_name) =>\n\n\t\t\t\t// \tattribute = @_geometry.getAttribute(attrib_name)\n\t\t\t\t// \titem_size = attribute.itemSize\n\t\t\t\t// \tcurrent_index = point_index  *item_size\n\n\t\t\t\t// \tattrib_value = switch item_size\n\t\t\t\t// \t\twhen 1\n\t\t\t\t// \t\t\tattribute.array[current_index]\n\t\t\t\t// \t\twhen 2\n\t\t\t\t// \t\t\tnew Vector2(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\t)\n\t\t\t\t// \t\twhen 3\n\t\t\t\t// \t\t\tnew Vector3(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 2]\n\t\t\t\t// \t\t\t\t)\n\n\t\t\t\t// \tpoint.add_attribute(attrib_name, item_size, attrib_value)\n\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\tstatic geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst geometry_wrapper = new this(geometry);\n\n\t\tconst first_point = points[0];\n\t\tif (first_point != null) {\n\t\t\tconst old_geometry = first_point.geometry();\n\t\t\tconst old_geometry_wrapper = first_point.geometry_wrapper();\n\n\t\t\t// index\n\t\t\tconst new_index_by_old_index: Dictionary<number> = {};\n\t\t\tlodash_each(points, (point, i) => (new_index_by_old_index[point.index] = i));\n\n\t\t\tconst indices = this._indices_from_points(new_index_by_old_index, old_geometry, object_type);\n\t\t\tif (indices != null && indices.length !== 0) {\n\t\t\t\tgeometry.setIndex(indices);\n\t\t\t}\n\n\t\t\t// attributes\n\t\t\tconst {attributes} = old_geometry;\n\t\t\t// const new_attributes = {}\n\t\t\tfor (let attribute_name of Object.keys(attributes)) {\n\t\t\t\tconst attrib_values = old_geometry_wrapper.user_data_attribs()[attribute_name];\n\t\t\t\tconst is_attrib_indexed = attrib_values != null;\n\n\t\t\t\tif (is_attrib_indexed) {\n\t\t\t\t\tconst new_values = lodash_uniq(points.map((point) => point.attrib_value(attribute_name)));\n\t\t\t\t\tconst new_index_by_value: Dictionary<number> = {};\n\t\t\t\t\tlodash_each(new_values, (new_value, i) => (new_index_by_value[new_value] = i));\n\n\t\t\t\t\tgeometry_wrapper.user_data_attribs()[attribute_name] = new_values;\n\n\t\t\t\t\t// const old_attrib = old_geometry.getAttribute(attribute_name)\n\t\t\t\t\t// const old_attrib_array = old_attrib.array\n\t\t\t\t\tconst new_attrib_indices = [];\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t// const old_index = old_attrib_array[point.index()]\n\t\t\t\t\t\tconst new_index = new_index_by_value[point.attrib_value(attribute_name)];\n\t\t\t\t\t\tnew_attrib_indices.push(new_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(new_attrib_indices, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tconst attrib_size = attributes[attribute_name].itemSize;\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\tconst value = point.attrib_value(attribute_name);\n\t\t\t\t\t\tswitch (attrib_size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tvalues.push(value.x);\n\t\t\t\t\t\t\t\tvalues.push(value.y);\n\t\t\t\t\t\t\t\tvalues.push(value.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(values, attrib_size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn geometry;\n\t}\n\n\tstatic _indices_from_points(\n\t\tnew_index_by_old_index: Dictionary<number>,\n\t\told_geometry: BufferGeometry,\n\t\tobject_type: ObjectType\n\t) {\n\t\tconst index_attrib = old_geometry.index;\n\t\tif (index_attrib != null) {\n\t\t\tconst old_indices = index_attrib.array;\n\n\t\t\tconst new_indices: number[] = [];\n\n\t\t\tswitch (object_type) {\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.POINTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tconst new_index = new_index_by_old_index[old_index];\n\t\t\t\t\t\tif (new_index != null) {\n\t\t\t\t\t\t\tnew_indices.push(new_index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.MESH:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst old_index2 = old_indices[i + 2];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tconst new_index2 = new_index_by_old_index[old_index2];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null && new_index2 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.LINE_SEGMENTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn new_indices;\n\t\t}\n\t}\n\n\tstatic merge_geometries(geometries: BufferGeometry[]) {\n\t\tif (geometries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// 1/3. set the new attrib indices for the indexed attributes\n\t\t//\n\t\tconst core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));\n\t\tconst indexed_attribute_names = core_geometries[0].indexed_attribute_names();\n\n\t\tconst new_values_by_attribute_name: Dictionary<string[]> = {};\n\t\tfor (let indexed_attribute_name of indexed_attribute_names) {\n\t\t\tconst index_by_values: Dictionary<number> = {};\n\t\t\tconst all_geometries_points = [];\n\t\t\tfor (let core_geometry of core_geometries) {\n\t\t\t\tconst geometry_points = core_geometry.points();\n\t\t\t\tfor (let point of geometry_points) {\n\t\t\t\t\tall_geometries_points.push(point);\n\t\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\t\t//value_index = point.attrib_value_index(indexed_attribute_name)\n\t\t\t\t\t// TODO: typescript: that doesn't seem right\n\t\t\t\t\tindex_by_values[value] != null\n\t\t\t\t\t\t? index_by_values[value]\n\t\t\t\t\t\t: (index_by_values[value] = Object.keys(index_by_values).length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst values = Object.keys(index_by_values);\n\t\t\tfor (let point of all_geometries_points) {\n\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\tconst new_index = index_by_values[value];\n\t\t\t\tpoint.set_attrib_index(indexed_attribute_name, new_index);\n\t\t\t}\n\n\t\t\tnew_values_by_attribute_name[indexed_attribute_name] = values;\n\t\t}\n\n\t\t//\n\t\t// 2/3. merge the geos\n\t\t//\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\n\t\t//\n\t\t// 3/3. add the index attrib values\n\t\t//\n\n\t\tconst merged_geometry_wrapper = new this(merged_geometry);\n\t\tObject.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n\t\t\tconst values = new_values_by_attribute_name[indexed_attribute_name];\n\t\t\tmerged_geometry_wrapper.set_indexed_attribute_values(indexed_attribute_name, values);\n\t\t});\n\n\t\tif (merged_geometry) {\n\t\t\tdelete merged_geometry.userData.mergedUserData;\n\t\t}\n\n\t\treturn merged_geometry;\n\t}\n\n\tsegments() {\n\t\t// const points = this.points();\n\t\tconst index = this.geometry().index?.array || [];\n\t\treturn lodash_chunk(index, 2);\n\t}\n\n\tfaces(): CoreFace[] {\n\t\treturn this.faces_from_geometry();\n\t}\n\tfaces_from_geometry(): CoreFace[] {\n\t\tconst index_array = this.geometry().index?.array || [];\n\t\tconst faces_count = index_array.length / 3;\n\t\treturn lodash_range(faces_count).map((i) => new CoreFace(this, i));\n\t}\n}\n\n// segments_count = 0.5*index.length\n// segments = []\n// lodash_times segments_count, (i)->\n// \tindices = [i, i+1]\n// \tsegments.push(indices) #lodash_map(indices, (index)->points[index])\n\n// segments\n","// events\nexport enum NodeEvent {\n\tCREATED = 'node_created',\n\tDELETED = 'node_deleted',\n\tNAME_UPDATED = 'node_name_update',\n\tOVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update',\n\tNAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated',\n\tNAMED_INPUTS_UPDATED = 'node_named_inputs_updated',\n\tINPUTS_UPDATED = 'node_inputs_updated',\n\tPARAMS_UPDATED = 'node_params_updated',\n\tUI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated',\n\tUI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated',\n\tERROR_UPDATED = 'node_error_updated',\n\tFLAG_BYPASS_UPDATED = 'bypass_flag_updated',\n\tFLAG_DISPLAY_UPDATED = 'display_flag_updated',\n\tSELECTION_UPDATED = 'selection_updated',\n}\n","import {CoreWalker} from '../../../core/Walker';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\n// import {NodeSimple} from '../../../core/graph/NodeSimple'\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {BaseContainer} from '../../containers/_Base';\n\n// type NodeOrParam = BaseNode | BaseParam;\n\nexport abstract class BaseMethod {\n\tpublic node: BaseNodeType;\n\n\tconstructor(public readonly param: BaseParamType) {\n\t\t// this._init_update_dependencies_mode();\n\t\tthis.node = this.param.node;\n\t}\n\n\tstatic required_arguments(): any[] {\n\t\tconsole.warn('Expression.Method._Base.required_arguments virtual method call. Please override');\n\t\treturn [];\n\t}\n\tstatic optional_arguments(): any[] {\n\t\treturn [];\n\t}\n\tstatic min_allowed_arguments_count() {\n\t\treturn this.required_arguments().length;\n\t}\n\tstatic max_allowed_arguments_count() {\n\t\treturn this.min_allowed_arguments_count() + this.optional_arguments().length;\n\t}\n\tstatic allowed_arguments_count(count: number) {\n\t\treturn count >= this.min_allowed_arguments_count() && count <= this.max_allowed_arguments_count();\n\t}\n\n\tprocess_arguments(args: any): Promise<any> {\n\t\tthrow 'Expression.Method._Base.process_arguments virtual method call. Please override';\n\t}\n\n\tasync get_referenced_node_container(index_or_path: number | string): Promise<BaseContainer> {\n\t\tconst referenced_node = this.get_referenced_node(index_or_path);\n\n\t\tif (referenced_node) {\n\t\t\tconst container = await referenced_node.request_container();\n\t\t\tif (container) {\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\treturn container;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow `referenced node invalid: ${referenced_node.full_path()}`;\n\t\t} else {\n\t\t\tthrow `invalid input (${index_or_path})`;\n\t\t}\n\t}\n\n\tget_referenced_param(path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tconst referenced_param = CoreWalker.find_param(this.node, path, decomposed_path);\n\n\t\t// if (referenced_param != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\n\t\t// \t\t//param_connect_result = this.param().add_graph_input(referenced_param)\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_param);\n\t\t// \t\t//if !(param_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no param found for argument ${path}`;\n\t\t// }\n\n\t\treturn referenced_param || null;\n\t}\n\n\tfind_referenced_graph_node(index_or_path: number | string, decomposed_path?: DecomposedPath): CoreGraphNode | null {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\t\t// let node\n\t\tif (is_index) {\n\t\t\tconst index = index_or_path as number;\n\t\t\tconst input_graph_node = this.node.io.inputs.input_graph_node(index);\n\t\t\treturn input_graph_node;\n\t\t} else {\n\t\t\tconst path = index_or_path as string;\n\t\t\treturn this.get_referenced_node(path, decomposed_path);\n\t\t}\n\t}\n\tget_referenced_node(index_or_path: string | number, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\t// if ((index_or_path != null) && (index_or_path.is_a != null) && index_or_path.is_a(BaseNode)) {\n\t\t// \tindex_or_path = index_or_path.full_path();\n\t\t// }\n\t\tif (lodash_isString(index_or_path)) {\n\t\t\tconst path = index_or_path;\n\t\t\treturn CoreWalker.find_node(this.node, path, decomposed_path);\n\t\t} else {\n\t\t\tconst index = index_or_path;\n\t\t\tthis.node.io.inputs.input(index);\n\t\t\treturn this.node.io.inputs.input(index);\n\t\t}\n\n\t\t// if (referenced_node != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\t\t// \t\t//node_connect_result = this.param().add_graph_input(referenced_node)\n\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_node);\n\t\t// \t\t//if !(node_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no node found for argument ${index_or_path}`;\n\t\t// }\n\n\t\t// return referenced_node;\n\t}\n\n\tfind_dependency(args: any): MethodDependency | null {\n\t\treturn null;\n\t}\n\n\tprotected create_dependency_from_index_or_path(index_or_path: number | string): MethodDependency | null {\n\t\t// console.log(\"is_index\", index_or_path)\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst node = this.find_referenced_graph_node(index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\treturn this.create_dependency(node, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('node not found for path', index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\tprotected create_dependency(\n\t\tnode: CoreGraphNode,\n\t\tindex_or_path: number | string,\n\t\tdecomposed_path?: DecomposedPath\n\t): MethodDependency | null {\n\t\t// if (CoreObject.is_a(node, TypedNode) || CoreObject.is_a(node, TypedParam)) {\n\t\t// \tconst node_or_param = node as BaseNodeType;\n\t\t// \treturn MethodDependency.create(this.param, index_or_path, node_or_param, decomposed_path?.named_nodes);\n\t\t// }\n\t\tconst dependency = MethodDependency.create(this.param, index_or_path, node, decomposed_path);\n\t\treturn dependency;\n\t}\n\n\t//\n\t//\n\t// UPDATE DEPENDENCIES\n\t//\n\t//\n\t// _init_update_dependencies_mode() {\n\t// \treturn this.set_update_dependencies_mode(false);\n\t// }\n\t// set_update_dependencies_mode(mode){\n\t// \treturn this._update_dependencies_mode = mode;\n\t// }\n\t// update_dependencies_mode() {\n\t// \treturn this._update_dependencies_mode;\n\t// }\n\t// update_dependencies() {}\n}\n//\n","import {BaseNodeClass} from './nodes/_Base';\nimport {PolyScene} from './scene/PolyScene';\nimport {RenderersController} from './poly/RenderersController';\nimport {NodesRegister, RegisterOptions, BaseNodeConstructor} from './poly/NodesRegister';\nimport {NodeContext} from './poly/NodeContext';\n// import {ViewerLoadersManager} from '/viewers/LoadersManager';\n\nexport class Poly {\n\tstatic _instance: Poly | undefined;\n\trenderers_controller: RenderersController = new RenderersController();\n\tnodes_register: NodesRegister = new NodesRegister();\n\n\tscenes_by_uuid: Dictionary<PolyScene> = {};\n\t_env: string | undefined;\n\t// public viewer_loaders_manager: ViewerLoadersManager = new ViewerLoadersManager();\n\n\tstatic instance() {\n\t\treturn (this._instance = this._instance || new Poly());\n\t}\n\tprivate constructor() {}\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tthis.nodes_register.register_node(node, tab_menu_category, options);\n\t}\n\tregistered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass> {\n\t\treturn this.nodes_register.registered_nodes(parent_context, type);\n\t}\n\tin_worker_thread() {\n\t\treturn false;\n\t}\n\tdesktop_controller(): any {}\n\t// notify_scene_loaded(scene: PolyScene) {}\n\n\tplayer_mode(): boolean {\n\t\treturn false;\n\t}\n\n\tlog(...args: any[]) {\n\t\tconsole.log(...args);\n\t}\n\tset_env(env: string) {\n\t\tthis._env = env;\n\t}\n\tget env() {\n\t\treturn this._env;\n\t}\n}\n\n// declare global {\n// \tconst POLY: Poly;\n// }\n\n// declare global {\n// \tinterface Window {\n// \t\tPOLY: Poly;\n// \t}\n// }\n// make sure not to have library: 'POLY' in webpack for this to work\nexport const POLY = Poly.instance();\n","import {CoreGraph, CoreGraphNodeId} from './CoreGraph';\nimport {DirtyController, PostDirtyHook} from './DirtyController';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class CoreGraphNode {\n\t// protected _scene: PolyScene;\n\tprivate _graph: CoreGraph;\n\tprivate _graph_node_id: CoreGraphNodeId;\n\tprivate _dirty_controller: DirtyController = new DirtyController(this);\n\t// protected _name: string;\n\tconstructor(protected _scene: PolyScene, protected _name: string) {\n\t\t// super(...args);\n\t\tthis._graph_node_id = _scene.graph.next_id();\n\t\t_scene.graph.setNode(this);\n\t\tthis._graph = _scene.graph;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset_name(name: string) {\n\t\tthis._name = name;\n\t}\n\t// set_scene(scene: PolyScene) {\n\t// \tthis._scene = scene;\n\t// \t// this._graph_node = new CoreGraphNode();\n\t// \t// this._graph_node.init(this._scene.graph);\n\t// \tthis._graph = scene.graph;\n\t// \tthis._graph_node_id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// init(graph: CoreGraph) {\n\t// \tthis._graph = graph;\n\t// \tthis._id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// full_path: ->\n\t// \t\"node with unknown path #{this.graph_node_id}\"\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\tget graph_node_id(): CoreGraphNodeId {\n\t\treturn this._graph_node_id;\n\t}\n\n\t//\n\t//\n\t// DIRTY CONTROLLER\n\t//\n\t//\n\tget dirty_controller() {\n\t\treturn this._dirty_controller;\n\t}\n\tset_dirty(trigger?: CoreGraphNode | null) {\n\t\ttrigger = trigger || this;\n\t\tthis._dirty_controller.set_dirty(trigger);\n\t}\n\tset_successors_dirty(trigger?: CoreGraphNode) {\n\t\tthis._dirty_controller.set_successors_dirty(trigger);\n\t}\n\tremove_dirty_state() {\n\t\tthis._dirty_controller.remove_dirty_state();\n\t}\n\tget is_dirty() {\n\t\treturn this._dirty_controller.is_dirty;\n\t}\n\tadd_post_dirty_hook(name: string, callback: PostDirtyHook) {\n\t\tthis._dirty_controller.add_post_dirty_hook(name, callback);\n\t}\n\n\t//\n\t//\n\t// GRAPH\n\t//\n\t//\n\n\t// private graph_add() {\n\t// }\n\tgraph_remove() {\n\t\tthis.graph.removeNode(this);\n\t}\n\n\t// _graph_connect: (src, dest)->\n\t// \tthis.graph().connect(src, dest)\n\tadd_graph_input(src: CoreGraphNode): boolean {\n\t\treturn this.graph.connect(src, this);\n\t}\n\tremove_graph_input(src: CoreGraphNode) {\n\t\tthis.graph.disconnect(src, this);\n\t}\n\n\t// graph_disconnect: (src, dest)->\n\t// \tthis.graph().disconnect(src, dest)\n\n\tgraph_disconnect_predecessors() {\n\t\tthis.graph.disconnect_predecessors(this);\n\t}\n\tgraph_disconnect_successors() {\n\t\tthis.graph.disconnect_successors(this);\n\t}\n\n\tgraph_predecessor_ids(): CoreGraphNodeId[] {\n\t\treturn this.graph.predecessor_ids(this._graph_node_id) || [];\n\t}\n\tgraph_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.predecessors(this);\n\t}\n\tgraph_successors(): CoreGraphNode[] {\n\t\treturn this.graph.successors(this);\n\t}\n\tgraph_all_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.all_predecessors(this);\n\t}\n\tgraph_all_successors(): CoreGraphNode[] {\n\t\treturn this.graph.all_successors(this);\n\t}\n}\n","import {TypedNode} from '../_Base';\n\nimport {Material} from 'three/src/materials/Material';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {MaterialContainer} from '../../containers/Material';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// type RenderHook = (object: Object3D) => void;\n\nexport abstract class TypedMatNode<M extends Material, K extends NodeParamsConfig> extends TypedNode<\n\t'MATERIAL',\n\tBaseMatNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<MaterialContainer> = new TypedContainerController<MaterialContainer>(\n\t\tthis,\n\t\tMaterialContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MAT;\n\t}\n\n\tprotected _material: M | undefined;\n\t// protected _update_methods: RenderHook[] = [];\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this._update_methods = [];\n\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_outputs({has_outputs: false});\n\n\t\t// this.container_controller.init(MaterialContainer);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_material_name.bind(this));\n\n\t\tthis.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\n\t\t// it's probably good not to have to create any material in the constructor\n\t\t// but only on request\n\t\t// this._material = this.create_material();\n\t\t// this.set_material(this._material);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t}\n\n\tprivate set_material_name() {\n\t\t// ensures the material has a full path set\n\t\t// allowing the render hook to be set\n\t\t//this.set_material(@_material)\n\t\tif (this._material) {\n\t\t\tthis._material.name = this.full_path();\n\t\t}\n\t}\n\n\tabstract create_material(): M;\n\tget material() {\n\t\treturn (this._material = this._material || this.create_material());\n\t}\n\t//\n\n\tset_material(material: Material) {\n\t\tthis.set_container(material);\n\t}\n\n\t// add_update_method(method, arg?: any) {\n\t// \tthis._update_methods.push([method.bind(this), arg]);\n\t// }\n\n\t//run_update_methods: ->\n\n\tadd_render_hook(object: Object3D) {}\n}\n//delete object.onBeforeRender\n\nexport type BaseMatNodeType = TypedMatNode<Material, any>;\nexport class BaseMatNodeClass extends TypedMatNode<Material, any> {\n\tcreate_material() {\n\t\treturn new Material();\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nimport {TypedNode, BaseNodeType} from '../_Base';\n// import {BaseSopNode} from '../sop/_Base';\n// import {LookAt} from './Concerns/LookAt';\nimport {ObjectContainer} from '../../containers/Object';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {ObjectsManagerNode} from '../manager/ObjectsManager';\nimport {Group} from 'three/src/objects/Group';\n\nconst INPUT_OBJECT_NAME = 'parent object';\nconst DEFAULT_INPUT_NAMES = [INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME];\n\ninterface Object3DWithNode extends Object3D {\n\tnode: BaseNodeType;\n}\n// interface BaseObjNodeVisitor extends BaseNodeVisitor {\n// \tvisit_node_obj: (node: BaseObjNodeType) => any;\n// }\n\nexport enum ObjNodeRenderOrder {\n\tMANAGER = 0,\n\tFOG = 1,\n\tCAMERA = 2,\n\tLIGHT = 3,\n\tEVENT = 4,\n\tMAT = 5,\n}\n\nexport class TypedObjNode<O extends Object3D, K extends NodeParamsConfig> extends TypedNode<\n\t'OBJECT',\n\tBaseObjNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<ObjectContainer> = new TypedContainerController<ObjectContainer>(\n\t\tthis,\n\t\tObjectContainer\n\t);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = true;\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.OBJ;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// protected _main_group = new Group();\n\tprotected _children_group = new Group();\n\tprotected _object!: O;\n\t// _sop_loaded: boolean = false;\n\n\t// protected _look_at_controller: LookAtController | undefined;\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\t// protected _transform_controller: TransformController | undefined;\n\t// get transform_controller(): TransformController {\n\t// \treturn (this._transform_controller = this._transform_controller || new TransformController(this));\n\t// }\n\n\tprotected _attachable_to_hierarchy: boolean = true;\n\tget attachable_to_hierarchy() {\n\t\treturn this._attachable_to_hierarchy;\n\t}\n\tprotected _used_in_scene: boolean = true;\n\tget used_in_scene() {\n\t\treturn this._used_in_scene;\n\t}\n\t// TODO call set_used_in_scene(false) when node is deleted\n\tset_used_in_scene(state: boolean) {\n\t\tthis._used_in_scene = state;\n\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\tconst root = this.parent as ObjectsManagerNode;\n\t\t\tif (root) {\n\t\t\t\troot.update_object(this);\n\t\t\t}\n\t\t}\n\t}\n\tadd_object_to_parent(parent: Object3D) {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tparent.add(this.object);\n\t\t}\n\t}\n\tremove_object_from_parent() {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tconst parent = this.object.parent;\n\t\t\tif (parent) {\n\t\t\t\tparent.remove(this.object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _displayed_in_scene: boolean = true;\n\t// get displayed_in_scene() {\n\t// \treturn this._displayed_in_scene;\n\t// }\n\t// set_displayed_in_scene(state:boolean){\n\t// \tthis._displayed_in_scene = state;\n\t// }\n\n\tinitialize_base_node() {\n\t\t// this.container_controller.init(ObjectContainer);\n\t\tthis._object = this._create_object_with_attributes();\n\t\t// this._init_container_owner('Object');\n\t\t// this.flags.add_display();\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_object_name.bind(this));\n\t\tthis.set_object_name();\n\n\t\t// this.io.inputs.add_hook(() => {\n\t\t// \tthis.transform_controller.on_input_updated();\n\t\t// });\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\n\t\t// this._sop_loaded = false; // TODO: typescript, this should be moved to GeoObjNode\n\t}\n\n\t// this.add_param 'toggle', 'display', 1,\n\t// \tcallback: this.post_state_display_flag.bind(this)\n\n\t// cook: ->\n\t// \tsuper\n\t// \tconsole.error(this.constructor, 'cook method is not overloaded')\n\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t// \t#console.log(\"#{this.full_path()} set dirty by #{original_trigger_graph_node?.full_path()} and #{direct_trigger_graph_node?.full_path()}\")\n\t// \tthis.is_displayed (is_displayed)=>\n\t// \t\tif is_displayed\n\t// \t\t\tthis.parent().update_object(this)\n\n\t//post_remove_dirty_state: ->\n\t//console.log(\"obj #{this.full_path()} remove dirty\")\n\t//console.log(\"remove_dirty_state: #{this.full_path()}\")\n\n\t// set_object: (object)->\n\n\t// \tif object?\n\t// \t\tobject.name = this.name()\n\t// \t\tthis.set_container(object)\n\t// get main_group() {\n\t// \treturn this._main_group;\n\t// }\n\tget children_group() {\n\t\treturn this._children_group;\n\t}\n\tget object() {\n\t\treturn this._object; //= this._object || this._create_object_with_attributes()\n\t}\n\n\t_create_object_with_attributes(): O {\n\t\tconst object = this.create_object();\n\t\t// object.name = 'content';\n\t\t// if (object != null) {\n\t\t// \tobject.name = this.full_path();\n\t\t(object as Object3DWithNode).node = this;\n\t\t// }\n\t\t// this._main_group.add(this._children_group);\n\t\tobject.add(this._children_group);\n\t\treturn object as O;\n\t}\n\tprivate set_object_name() {\n\t\tif (this._object) {\n\t\t\tthis._object.name = this.full_path();\n\t\t\tthis._children_group.name = `${this.full_path()}:parented_outputs`;\n\t\t}\n\t}\n\t// private set_group_name() {\n\t// \t// ensures the material has a full path set\n\t// \t// allowing the render hook to be set\n\t// \t//this.set_material(@_material)\n\t// \tconst group = this.group;\n\t// \tif (group) {\n\t// \t\tgroup.name = this.full_path();\n\t// \t}\n\t// }\n\n\tcreate_object(): Object3D {\n\t\treturn new Object3D();\n\t}\n\n\t// request_display_node() {}\n\n\tis_display_node_cooking(): boolean {\n\t\treturn false;\n\t}\n\n\t// post_state_display_flag() {\n\t// \tconst object = this.object;\n\t// \tif (object != null) {\n\t// \t\tconst displayed = this.is_displayed();\n\t// \t\tif (displayed) {\n\t// \t\t\tobject.visible = displayed;\n\n\t// \t\t\tif (!this._sop_loaded) {\n\t// \t\t\t\tthis.request_display_node();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_displayed(): boolean {\n\t\treturn this.flags?.display?.active || false;\n\t\t// if (callback == null) {\n\t\t// \tthrow 'no callback given to is_displayed';\n\t\t// }\n\n\t\t// const display_flag_state = this.display_flag_state();\n\t\t// return callback(display_flag_state);\n\t}\n\t// if !display_flag_state\n\t// \tcallback(false)\n\n\t// else\n\t// \tthis.param('display').eval (val)->\n\t// \t\tcallback(val)\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node_obj']> {\n\t// \treturn visitor.visit_node_obj(this);\n\t// }\n\n\t// replaces Dirtyable (TODO: try and replace this method name)\n\t// protected _init_dirtyable_hook() {\n\t// this.add_post_dirty_hook(this._cook_main_without_inputs_later.bind(this));\n\t// }\n\t// private _cook_main_without_inputs_later() {\n\t// \tconst c = () => {\n\t// \t\tthis.cook_controller.cook_main_without_inputs();\n\t// \t};\n\t// \tsetTimeout(c, 0);\n\t// \t// this.eval_all_params().then( ()=>{ this.cook() } )\n\t// }\n}\n\nexport type BaseObjNodeType = TypedObjNode<Object3D, any>;\nexport class BaseObjNodeClass extends TypedObjNode<Object3D, any> {}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {Euler} from 'three/src/math/Euler';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\n\n// import {Object3D} from 'three/src/core/Object3D';\n// import {BaseTransformedObjNodeType} from '../_BaseTransformed';\nimport {CoreMath} from '../../../../core/math/_Module';\nimport {CoreTransform, SetParamsFromMatrixOptions} from '../../../../core/Transform';\n// import {BaseObjNodeType} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\nimport {TypedObjNode, BaseObjNodeType} from '../_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {FlagsControllerD} from '../../utils/FlagsController';\n// import {LookAtController} from './LookAtController';\nexport function TransformedParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttransform = ParamConfig.FOLDER();\n\t\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\t\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\t\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\t\tscale = ParamConfig.FLOAT(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('', {node_selection: {context: NodeContext.OBJ}});\n\t\t// up = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// pivot = ParamConfig.VECTOR3([0, 0, 0]);\n\t};\n}\nclass TransformedParamsConfig extends TransformedParamConfig(NodeParamsConfig) {}\nexport class TransformedObjNode extends TypedObjNode<Object3D, TransformedParamsConfig> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\t// get transform_controller(): TransformController {\n\t// \treturn this._transform_controller; // = this._transform_controller || new TransformController(this));\n\t// }\n}\n\nexport class TransformController {\n\tconstructor(private node: TransformedObjNode) {}\n\n\t// protected _look_at_controller = new LookAtController(this.node);\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\n\tinitialize_node() {\n\t\t// not sure we should change if it is used in the scene, as parented children may still be\n\t\t// this.node.flags.display.add_hook(() => {\n\t\t// \t// this.node.set_used_in_scene(this.node.flags.display.active || false);\n\t\t// \tthis.node.object.visible = this.node.flags.display.active;\n\t\t// });\n\t\t// this.node.set_used_in_scene(true);\n\n\t\tthis.node.io.inputs.set_count(0, 1);\n\t\tthis.node.io.inputs.set_depends_on_inputs(false);\n\t\tthis.node.io.outputs.set_has_one_output();\n\t\tthis.node.io.inputs.add_on_set_input_hook('on_input_updated', () => {\n\t\t\tthis.on_input_updated();\n\t\t});\n\n\t\tconst hook_name = '_cook_main_without_inputs_when_dirty';\n\t\tif (!this.node.dirty_controller.has_hook(hook_name)) {\n\t\t\tthis.node.dirty_controller.add_post_dirty_hook(hook_name, this._cook_main_without_inputs_when_dirty_bound);\n\t\t}\n\t}\n\t// TODO: this will have to be checked via the parent, when I will have obj managers at lower levels than root\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.node.used_in_scene) {\n\t\tawait this.node.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\n\tstatic on_input_updated(node: BaseObjNodeType) {\n\t\tif (node.io.inputs.input(0) != null) {\n\t\t\tnode.root.add_to_parent_transform(node);\n\t\t} else {\n\t\t\tnode.root.remove_from_parent_transform(node);\n\t\t}\n\t}\n\ton_input_updated() {\n\t\tTransformController.on_input_updated(this.node);\n\t}\n\n\tupdate(matrix?: Matrix4) {\n\t\t// const object = this.node.object;\n\t\t// const update_full_matrix = false; // if true the camera controls do not work anymore\n\t\t//matrix = Core.Transform.matrix_from_node_with_transform_params(this)\n\n\t\t// if (object) {\n\t\t// if update_full_matrix\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\n\t\t// if (this._look_at_controller.active == true) {\n\t\t// \treturn this._look_at_controller.compute(); //this._use_look_at_param();\n\t\t// } else {\n\t\tthis.update_transform_with_matrix(matrix);\n\t\t// }\n\t\t// if matrix?\n\t\t// \t# do not apply to cameras with control\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\t\t// \tthis.update_transform_from_params()\n\t\t// } else {\n\t\t// \tconsole.warn(`no object to update for ${this.node.full_path()}`);\n\t\t// \t// return false;\n\t\t// }\n\t}\n\n\tupdate_transform_with_matrix(matrix?: Matrix4) {\n\t\t//console.warn \"no object to update for #{this.full_path()}\"\n\t\tconst object = this.node.object;\n\t\t//matrix ?= Core.Transform.matrix_from_node_with_transform_params(this)\n\t\tif (matrix != null && !matrix.equals(object.matrix)) {\n\t\t\t// do not apply to cameras with control\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.matrix = matrix;\n\n\t\t\treturn object.dispatchEvent({type: 'change'});\n\t\t} else {\n\t\t\treturn this.update_transform_from_params();\n\t\t}\n\t}\n\n\tprivate _update_transform_from_params_scale = new Vector3();\n\tupdate_transform_from_params() {\n\t\tconst object = this.node.object;\n\t\tif (object) {\n\t\t\tconst position: Vector3 = this.node.pv.t;\n\t\t\t//quaternion = new Quaternion()\n\t\t\tconst rotation: Vector3 = this.node.pv.r;\n\n\t\t\tthis._update_transform_from_params_scale.copy(this.node.pv.s).multiplyScalar(this.node.pv.scale);\n\t\t\t// const scale: Vector3 = this.node.pv.s\n\t\t\t// \t.clone()\n\t\t\t// \t.multiplyScalar(this.node.pv.scale);\n\t\t\t//matrix.decompose( position, quaternion, scale )\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.position.copy(position);\n\t\t\t//object.quaternion.copy(quaternion)\n\t\t\tconst radians = [\n\t\t\t\tCoreMath.degrees_to_radians(rotation.x),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.y),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.z),\n\t\t\t];\n\t\t\tconst euler = new Euler(\n\t\t\t\tradians[0],\n\t\t\t\tradians[1],\n\t\t\t\tradians[2]\n\t\t\t\t//'XYZ'\n\t\t\t);\n\t\t\tobject.rotation.copy(euler);\n\t\t\tobject.scale.copy(this._update_transform_from_params_scale);\n\t\t\tobject.matrixAutoUpdate = true;\n\t\t\tobject.updateMatrix();\n\n\t\t\tobject.dispatchEvent({type: 'change'});\n\t\t}\n\t}\n\n\tset_params_from_matrix(matrix: Matrix4, options: SetParamsFromMatrixOptions = {}) {\n\t\tCoreTransform.set_params_from_matrix(matrix, this.node, options);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Euler} from 'three/src/math/Euler';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {MathUtils} from 'three/src/math/MathUtils';\n\nimport {BaseNodeType} from '../engine/nodes/_Base';\n\nconst ROTATION_ORDER = 'XYZ';\n\nexport interface SetParamsFromMatrixOptions {\n\tscale?: boolean;\n}\n\n// TODO: remove the \"new\" in this whole file\n// const euler = new Euler(0, 0, 0, ROTATION_ORDER)\n\nexport class CoreTransform {\n\t// static create_params(node: BaseNodeType) {\n\t// \tnode.add_param(ParamType.VECTOR3, 't', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 'r', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 's', [1, 1, 1]);\n\t// \tnode.add_param(ParamType.FLOAT, 'scale', 1, {range: [0, 10]});\n\t// \tnode.add_param(ParamType.OPERATOR_PATH, 'look_at', '');\n\t// \tnode.add_param(ParamType.VECTOR3, 'up', [0, 1, 0]);\n\t// }\n\n\t// static matrix_from_node_with_transform_params(node: BaseNodeType): Matrix4 {\n\t// \tconst t = node.params.vector3('t');\n\t// \tconst r = node.params\n\t// \t\t.vector3('r')\n\t// \t\t.clone()\n\t// \t\t.multiplyScalar(Math.PI / 180);\n\t// \tconst s = node.params.vector3('s');\n\t// \tconst scale = node.params.float('scale');\n\t// \treturn this.matrix(t, r, s, scale);\n\t// }\n\n\t// if this is done, make sure to use eval with a  callback\n\t// @matrix_from_params: (node) ->\n\t// \tt = node.param('t').eval()\n\t// \tr = node.param('r').eval().multiplyScalar( Math.PI / 180 )\n\t// \ts = node.param('s').eval()\n\t// \tscale = node.param('scale').eval()\n\t// \tthis.matrix(t, r, s, scale)\n\n\tstatic set_params_from_matrix(matrix: Matrix4, node: BaseNodeType, options: SetParamsFromMatrixOptions = {}) {\n\t\tlet update_scale = options['scale'];\n\t\tif (update_scale == null) {\n\t\t\tupdate_scale = true;\n\t\t}\n\n\t\t// EPSILON = 0.0000001\n\t\t// PRECISION = 1000\n\t\t// components = ['x', 'y', 'z']\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3();\n\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\tconst euler = new Euler().setFromQuaternion(quaternion);\n\t\tconst rotation = euler.toVector3();\n\t\trotation.divideScalar(Math.PI / 180);\n\n\t\t// limit precision of position and rotation\n\t\t// lodash_each [position, rotation], (vector)->\n\t\t// \tlodash_each ['x', 'y', 'z'], (c)->\n\t\t// \t\tval = vector[c]\n\t\t// \t\tapproximation = parseInt(val * PRECISION) / PRECISION\n\t\t// \t\tvector[c] = approximation\n\n\t\t// round scale if we get values like 0.9999999999 or 1.00000000001\n\t\t// lodash_each ['x', 'y', 'z'], (c)->\n\t\t// \tval = scale[c]\n\t\t// \trounded = Math.round(val)\n\t\t// \tif Math.abs(val - rounded) < EPSILON\n\t\t// \t\tscale[c] = rounded\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('r', rotation.toArray() as Number3);\n\t\t\tnode.params.set_vector3('t', position.toArray() as Number3);\n\t\t\tnode.params.set_vector3('s', scale.toArray() as Number3);\n\t\t\tif (update_scale) {\n\t\t\t\tnode.params.set_float('scale', 1);\n\t\t\t}\n\t\t});\n\t}\n\t// this.object().position.copy(position)\n\t// this.object().quaternion.copy(quaternion)\n\t// this.object().scale.copy(scale)\n\n\tstatic set_params_from_object(object: Object3D, node: BaseNodeType) {\n\t\tconst position = object.position.toArray() as Number3;\n\t\tconst rotation = object.rotation.toArray().map((c) => c * (180 / Math.PI)) as Number3;\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('t', position);\n\t\t\tnode.params.set_vector3('r', rotation);\n\t\t});\n\t}\n\n\t// static translation_matrix(x: number, y: number, z: number): Matrix4 {\n\t// \tconst t = new Vector3(x, y, z);\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst s = new Vector3(1, 1, 1);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\n\tprivate _translation_matrix: Matrix4 = new Matrix4();\n\tprivate _translation_matrix_q = new Quaternion();\n\tprivate _translation_matrix_s = new Vector3(1, 1, 1);\n\ttranslation_matrix(t: Vector3): Matrix4 {\n\t\tthis._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n\t\treturn this._translation_matrix;\n\t}\n\n\tstatic matrix_quaternion(matrix: Matrix4): Quaternion {\n\t\tconst t = new Vector3();\n\t\tconst quat = new Quaternion();\n\t\tconst s = new Vector3();\n\t\tmatrix.decompose(t, quat, s);\n\t\treturn quat;\n\t}\n\n\t// static matrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t// \t// if I don't clone here, it created issues in the transform SOP\n\t// \ts = s.clone().multiplyScalar(scale);\n\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst euler = new Euler(r.x, r.y, r.z, ROTATION_ORDER);\n\t// \tquaternion.setFromEuler(euler);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\tprivate _matrix = new Matrix4().identity();\n\tprivate _matrix_q = new Quaternion();\n\tprivate _matrix_e = new Euler();\n\tprivate _matrix_s = new Vector3();\n\tmatrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t\tthis._matrix_e.set(MathUtils.degToRad(r.x), MathUtils.degToRad(r.y), MathUtils.degToRad(r.z), ROTATION_ORDER);\n\t\tthis._matrix_q.setFromEuler(this._matrix_e);\n\n\t\tthis._matrix_s.copy(s).multiplyScalar(scale);\n\n\t\tthis._matrix.compose(t, this._matrix_q, this._matrix_s);\n\t\treturn this._matrix;\n\t}\n\n\t// static rotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t// \tconst quaternion = new Quaternion();\n\t// \tquaternion.setFromUnitVectors(vec_origin, vec_dest.clone().normalize());\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.makeRotationFromQuaternion(quaternion);\n\t// \tgeometry.applyMatrix(matrix);\n\t// }\n\n\tprivate _rotate_geometry_m = new Matrix4();\n\tprivate _rotate_geometry_q = new Quaternion();\n\tprivate _rotate_geometry_vec_dest = new Vector3();\n\trotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t\tthis._rotate_geometry_vec_dest.copy(vec_dest);\n\t\tthis._rotate_geometry_vec_dest.normalize();\n\t\tthis._rotate_geometry_q.setFromUnitVectors(vec_origin, this._rotate_geometry_vec_dest);\n\t\t// this._rotate_geometry_m.identity(); // not entirely sure this is necessary\n\t\tthis._rotate_geometry_m.makeRotationFromQuaternion(this._rotate_geometry_q);\n\t\tgeometry.applyMatrix4(this._rotate_geometry_m);\n\t}\n}\n","import {PolyScene} from '../scene/PolyScene';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\n\n// import {BaseParam} from '../params/_Base';\n// import {GeometryContainer} from '../containers/Geometry';\n// import {UIData} from './UIData';\n\n// import {Bypass} from './concerns/Bypass';\n// import {ConnectionsOwner} from './concerns/ConnectionsOwner';\n// import {ContainerOwner} from './concerns/ContainerOwner';\n// import {Cook} from './concerns/Cook';\n// import {CustomNode} from './concerns/CustomNode';\n// import {Dependencies} from './concerns/old/Dependencies';\n// import {DisplayFlag} from './concerns/DisplayFlag';\n// import {Errored} from './concerns/Errored';\n// import {HierarchyChildrenOwner} from './concerns/HierarchyChildrenOwner';\n// import {HierarchyParentOwner} from './concerns/old/HierarchyParentOwner';\n// import {InputsClonable} from './concerns/InputsClonable';\n// import {InputsOwner} from './concerns/InputsOwner';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/old/LifeCycle';\n// import {Named} from './concerns/Named';\n// import {OutputsOwner} from './concerns/OutputsOwner';\n// import {ParamsOwner} from './concerns/ParamsOwner';\n// import {Selectable} from './concerns/old/Selectable';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {Visit} from './concerns/Visit';\n\nimport {UIData} from './utils/UIData';\nimport {FlagsController} from './utils/FlagsController';\nimport {StatesController} from './utils/StatesController';\nimport {HierarchyParentController} from './utils/hierarchy/ParentController';\nimport {HierarchyChildrenController} from './utils/hierarchy/ChildrenController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {TypedContainerController} from './utils/ContainerController';\nimport {CookController} from './utils/CookController';\nimport {DependenciesController} from './utils/DependenciesController';\nimport {NameController} from './utils/NameController';\nimport {NodeSerializer, NodeSerializerData} from './utils/Serializer';\nimport {ParamsController} from './utils/params/ParamsController';\nimport {ParamConstructorMap} from '../params/types/ParamConstructorMap';\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\n\nimport {NodeParamsConfig} from './utils/params/ParamsConfig';\nimport {ParamsValueAccessor, ParamsValueAccessorType} from './utils/params/ParamsValueAccessor';\nimport {ProcessingContext} from './utils/ProcessingContext';\nimport {IOController} from './utils/connections/IOController';\n\n// import {BaseContainer} from '../containers/_Base';\n\n// import {BaseParam} from '../params/_Base';\n// import {BooleanParam} from '../params/Boolean';\n// import {ButtonParam} from '../params/Button';\n// import {ColorParam} from '../params/Color';\n// import {FloatParam} from '../params/Float';\n// import {IntegerParam} from '../params/Integer';\n// import {OperatorPathParam} from '../params/OperatorPath';\n// import {RampParam} from '../params/Ramp';\n// import {SeparatorParam} from '../params/Separator';\n// import {StringParam} from '../params/String';\n// import {Vector2Param} from '../params/Vector2';\n// import {Vector3Param} from '../params/Vector3';\n// import {Vector4Param} from '../params/Vector4';\nimport {NodeEvent} from '../poly/NodeEvent';\nimport {NodeContext} from '../poly/NodeContext';\n\n// import {TypedContainer} from '../containers/_Base';\nimport {ParamsAccessorType, ParamsAccessor} from './utils/params/ParamsAccessor';\n\nexport interface NodeVisitor {\n\tvisit_node: (node: BaseNodeType) => any;\n\tvisit_node_obj: (node: BaseNodeType) => any;\n}\n\ninterface NodeDeletedEmitData {\n\tparent_id: string;\n}\ninterface NodeCreatedEmitData {\n\tchild_node_json: NodeSerializerData;\n}\ntype EmitDataByNodeEventMapGeneric = {[key in NodeEvent]: any};\nexport interface EmitDataByNodeEventMap extends EmitDataByNodeEventMapGeneric {\n\t[NodeEvent.CREATED]: NodeCreatedEmitData;\n\t[NodeEvent.DELETED]: NodeDeletedEmitData;\n\t[NodeEvent.ERROR_UPDATED]: undefined;\n}\n// emit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n// \temit(event_name: NodeEvent.DELETED, data: NodeDeletedEmitData): void;\n// \temit(event_name: NodeEvent.NAME_UPDATED): void;\n// \temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n// \temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n// \temit(event_name: NodeEvent.ERROR_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n// \temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\nimport {ContainerMap} from '../containers/utils/ContainerMap';\nimport {ContainableMap} from '../containers/utils/ContainableMap';\nimport {BaseContainer} from '../containers/_Base';\nimport {ParamOptions} from '../params/utils/OptionsController';\nimport {ParamType} from '../poly/ParamType';\nimport {DisplayNodeController} from './utils/DisplayNodeController';\n\n// type Container = ContainerMap[KT];\ntype KT = keyof ContainerMap;\nexport class TypedNode<T extends KT, NT extends BaseNodeType, K extends NodeParamsConfig> extends CoreGraphNode {\n\tcontainer_controller: TypedContainerController<ContainerMap[T]> = new TypedContainerController<ContainerMap[T]>(\n\t\tthis,\n\t\tBaseContainer\n\t);\n\n\tprivate _parent_controller: HierarchyParentController | undefined;\n\n\tprivate _ui_data: UIData | undefined;\n\n\tprivate _dependencies_controller: DependenciesController | undefined;\n\tprivate _states: StatesController | undefined;\n\tprivate _lifecycle: LifeCycleController | undefined;\n\tprivate _serializer: NodeSerializer | undefined;\n\tprivate _cook_controller: CookController | undefined;\n\tpublic readonly flags: FlagsController | undefined;\n\tprotected _display_node_controller: DisplayNodeController | undefined;\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\n\tprivate _params_controller: ParamsController | undefined;\n\treadonly params_config: K | undefined;\n\treadonly pv: ParamsValueAccessorType<K> = (<unknown>new ParamsValueAccessor<K>()) as ParamsValueAccessorType<K>;\n\t// readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n\treadonly p: ParamsAccessorType<K> = (<unknown>new ParamsAccessor<K>()) as ParamsAccessorType<K>;\n\t// readonly p: ParamsAccessor<K> = new ParamsAccessor<K>(this);\n\n\tprivate _processing_context: ProcessingContext | undefined;\n\tprivate _name_controller: NameController | undefined;\n\tprivate _io: IOController<NT> | undefined;\n\tget parent_controller(): HierarchyParentController {\n\t\treturn (this._parent_controller = this._parent_controller || new HierarchyParentController(this));\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate _children_controller: HierarchyChildrenController | undefined;\n\tprotected _children_controller_context: NodeContext | undefined;\n\tget children_controller_context() {\n\t\treturn this._children_controller_context;\n\t}\n\tprivate _create_children_controller(): HierarchyChildrenController | undefined {\n\t\tif (this._children_controller_context) {\n\t\t\treturn new HierarchyChildrenController(this, this._children_controller_context);\n\t\t}\n\t}\n\tget children_controller(): HierarchyChildrenController | undefined {\n\t\treturn (this._children_controller = this._children_controller || this._create_children_controller());\n\t}\n\tchildren_allowed(): boolean {\n\t\treturn this._children_controller_context != null;\n\t}\n\n\tget ui_data(): UIData {\n\t\treturn (this._ui_data = this._ui_data || new UIData(this));\n\t}\n\tget dependencies_controller(): DependenciesController {\n\t\treturn (this._dependencies_controller = this._dependencies_controller || new DependenciesController(this));\n\t}\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\tget lifecycle(): LifeCycleController {\n\t\treturn (this._lifecycle = this._lifecycle || new LifeCycleController(this));\n\t}\n\tget serializer(): NodeSerializer {\n\t\treturn (this._serializer = this._serializer || new NodeSerializer(this));\n\t}\n\t// get container_controller(): TypedContainerController<T> {\n\t// \treturn (this._container_controller = this._container_controller || new TypedContainerController<T>(this));\n\t// }\n\tget cook_controller(): CookController {\n\t\treturn (this._cook_controller = this._cook_controller || new CookController(this));\n\t}\n\tget io(): IOController<NT> {\n\t\treturn (this._io = this._io || new IOController<NT>((<unknown>this) as NT));\n\t}\n\tget name_controller(): NameController {\n\t\treturn (this._name_controller = this._name_controller || new NameController(this));\n\t}\n\tset_name(name: string) {\n\t\tthis.name_controller.set_name(name);\n\t}\n\t_set_core_name(name: string) {\n\t\tthis._name = name;\n\t}\n\tget params(): ParamsController {\n\t\treturn (this._params_controller = this._params_controller || new ParamsController(this));\n\t}\n\tget processing_context(): ProcessingContext {\n\t\treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n\t}\n\n\tconstructor(scene: PolyScene, name: string = 'BaseNode') {\n\t\tsuper(scene, name);\n\t}\n\n\tprivate _initialized: boolean = false;\n\tpublic initialize_base_and_node() {\n\t\tif (!this._initialized) {\n\t\t\tthis.initialize_base_node(); // for base classes of Sop, Obj...\n\t\t\tthis.initialize_node(); // for Derivated node clases, like BoxSop, TransformSop...\n\t\t\tthis._initialized = true;\n\t\t} else {\n\t\t\tconsole.warn('node already initialized');\n\t\t}\n\t}\n\tprotected initialize_base_node() {}\n\tprotected initialize_node() {}\n\t// constructor() {\n\t// \tsuper('base_node');\n\n\t// \t// this._init_node_scene()\n\t// \t// this._init_context_owner()\n\t// \t// this._init_dirtyable()\n\t// \t// this._init_graph_node()\n\n\t// \t// this._init_bypass_flag();\n\t// \t// this._init_display_flag();\n\t// \t//this._init_context()\n\t// \t// this._init_cook();\n\t// \t// this._init_error();\n\t// \t// this._init_inputs();\n\t// \t// this._init_outputs();\n\t// \t// this._init_hierarchy_parent_owner();\n\t// \t//this._init_time_dependent()\n\t// \t// this._init_ui_data();\n\t// }\n\tstatic type(): string {\n\t\tthrow 'type to be overriden';\n\t}\n\tget type() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.type();\n\t}\n\tstatic node_context(): NodeContext {\n\t\tthrow 'requires override';\n\t}\n\tnode_context(): NodeContext {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.node_context();\n\t}\n\n\tstatic required_three_imports(): string[] {\n\t\treturn [];\n\t}\n\tstatic required_imports() {\n\t\tlet three_imports = this.required_three_imports();\n\t\tif (three_imports) {\n\t\t\t// if (!lodash_isArray(three_imports)) {\n\t\t\t// \tthree_imports = [<unknown>three_imports as string];\n\t\t\t// }\n\t\t\treturn three_imports.map((e) => `three/examples/jsm/${e}`);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\trequired_imports() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.required_imports();\n\t}\n\tstatic require_webgl2(): boolean {\n\t\treturn false;\n\t}\n\trequire_webgl2(): boolean {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.require_webgl2();\n\t}\n\n\t// set_scene(scene: PolyScene) {\n\t// \tsuper.set_scene(scene);\n\t// \t// this.io.inputs._init_graph_node_inputs();\n\t// }\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node']> {\n\t// \treturn visitor.visit_node(this);\n\t// }\n\tset_parent(parent: BaseNodeType | null) {\n\t\tthis.parent_controller.set_parent(parent);\n\t}\n\tget parent() {\n\t\treturn this.parent_controller.parent;\n\t}\n\tget root() {\n\t\treturn this._scene.root;\n\t}\n\tfull_path(): string {\n\t\treturn this.parent_controller.full_path();\n\t}\n\n\t// params\n\tcreate_params() {}\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\toptions?: ParamOptions\n\t): ParamConstructorMap[T] | undefined {\n\t\treturn this._params_controller?.add_param(type, name, default_value, options);\n\t}\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tthis._params_controller?.within_param_folder(folder_name, callback);\n\t// }\n\n\t// cook\n\tcook(input_contents: any[]): any {\n\t\treturn null;\n\t}\n\n\t// container\n\tasync request_container() {\n\t\treturn await this.container_controller.request_container();\n\t}\n\tset_container(content: ContainableMap[T], message: string | null = null) {\n\t\t// if message?\n\t\t// TODO: typescript: why is this a type of never\n\t\tthis.container_controller.container.set_content(content as never); //, this.self.cook_eval_key());\n\t\tif (content != null) {\n\t\t\tif (!(content as any).name) {\n\t\t\t\t(content as any).name = this.full_path();\n\t\t\t}\n\t\t\tif (!(content as any).node) {\n\t\t\t\t(content as any).node = this;\n\t\t\t}\n\t\t}\n\t\t//if @_container.has_content()?\n\t\tthis.cook_controller.end_cook(message);\n\t}\n\n\t// hierarchy\n\tcreate_node(type: string) {\n\t\treturn this.children_controller?.create_node(type);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis.children_controller?.remove_node(node);\n\t}\n\tchildren() {\n\t\treturn this.children_controller?.children() || [];\n\t}\n\tnode(path: string) {\n\t\treturn this.parent_controller?.find_node(path) || null;\n\t}\n\tnodes_by_type(type: string) {\n\t\treturn this.children_controller?.nodes_by_type(type) || [];\n\t}\n\n\t// inputs\n\tset_input(input_index_or_name: number | string, node: NT | null, output_index_or_name: number | string = 0) {\n\t\tthis.io.inputs.set_input(input_index_or_name, node, output_index_or_name);\n\t}\n\n\t// emit\n\n\temit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n\temit(event_name: NodeEvent.DELETED, data: EmitDataByNodeEventMap[NodeEvent.DELETED]): void;\n\temit(event_name: NodeEvent.NAME_UPDATED): void;\n\temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n\temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n\temit(event_name: NodeEvent.ERROR_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n\temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\temit(event_name: NodeEvent, data: object | null = null): void {\n\t\t// super.emit(event_name, data);\n\t\tthis.scene.dispatch_controller.dispatch(this, event_name, data);\n\t}\n\n\t// serializer\n\tto_json(include_param_components: boolean = false) {\n\t\treturn this.serializer.to_json(include_param_components);\n\t}\n}\n\nexport type BaseNodeType = TypedNode<any, BaseNodeType, any>;\nexport class BaseNodeClass extends TypedNode<any, BaseNodeType, any> {}\n","// import {Vector3} from 'three/src/math/Vector3'\n// import {Vector2} from 'three/src/math/Vector2'\n\nimport {CoreWalker} from '../../core/Walker';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NodeScene} from '../../core/graph/NodeScene';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\nimport {BaseNodeType} from '../nodes/_Base';\n\n// import {CallbackOption} from './concerns/options/Callback'\n// import {ColorOption} from './concerns/options/Color'\n// import {CookOption} from './concerns/options/Cook'\n// import {DesktopOption} from './concerns/options/Desktop'\n// import {ExpressionOption} from './concerns/options/Expression'\n// import {MenuOption} from './concerns/options/Menu'\n// import {NodeSelectionOption} from './concerns/options/NodeSelection'\n// import {RangeOption} from './concerns/options/Range'\n// import {AssetReferenceOption} from './concerns/options/AssetReference'\n// import {SpareOption} from './concerns/options/Spare'\n// import {MultilineOption} from './concerns/options/Multiline'\n// import {TextureOption} from './concerns/options/Texture'\n// import {VisibleOption} from './concerns/options/Visible'\n\n// import {Emit} from './concerns/Emit';\n// import {Errored} from './concerns/Errored';\n// import {Eval} from './concerns/Eval';\n// import {Expression} from './concerns/Expression';\n// import {Hierarchy} from './concerns/Hierarchy';\n// import {Json} from './concerns/Json';\n// import {Named} from './concerns/Named';\n// import {Node} from './concerns/Node';\n// import {Options} from './concerns/Options';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {Type} from './concerns/Type';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {VisitorsBase} from './concerns/visitors/_Base';\n\nimport {OptionsController} from './utils/OptionsController';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {EmitController} from './utils/EmitController';\nimport {ParamSerializer} from './utils/Serializer';\nimport {StatesController} from './utils/StatesController';\n// import {UIData} from './utils/UIData';\n\nimport {TypedMultipleParam} from './_Multiple';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {PolyScene} from '../scene/PolyScene';\n\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../params/types/ParamValuesTypeMap';\nimport {ParamValueSerializedTypeMap} from '../params/types/ParamValueSerializedTypeMap';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n// import {TypedNumericParam} from './_Numeric';\n\n// export interface ParamVisitor {\n// \tvisit_param: (param: BaseParamType) => any;\n// \tvisit_multiple_param: (param: TypedMultipleParam<any>) => any;\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\n// type ParamTypeElem = ParamType;\ntype ComputeCallback = (value: void) => void;\n\nexport abstract class TypedParam<T extends ParamType> extends CoreGraphNode {\n\t// protected _raw_input: ParamInitValuesTypeMap[T];\n\tprotected _default_value!: ParamInitValuesTypeMap[T];\n\tprotected _raw_input!: ParamInitValuesTypeMap[T];\n\tprotected _value!: ParamValuesTypeMap[T];\n\t// protected _expression: string;\n\tprotected _node!: BaseNodeType;\n\tprotected _parent_param: TypedMultipleParam<any> | undefined;\n\tprotected _components: FloatParam[] | undefined;\n\tprotected _compute_resolves: ComputeCallback[] | undefined;\n\n\tprivate _options: OptionsController = new OptionsController(this);\n\tget options(): OptionsController {\n\t\treturn (this._options = this._options || new OptionsController(this));\n\t}\n\tprivate _emit_controller: EmitController = new EmitController(this);\n\tget emit_controller(): EmitController {\n\t\treturn (this._emit_controller = this._emit_controller || new EmitController(this));\n\t}\n\tprotected _expression_controller: ExpressionController<T> | undefined;\n\tget expression_controller(): ExpressionController<T> | undefined {\n\t\treturn this._expression_controller; // =\n\t\t//this._expression_controller || new ExpressionController(this);\n\t}\n\tprivate _serializer: ParamSerializer | undefined;\n\tget serializer(): ParamSerializer {\n\t\treturn (this._serializer = this._serializer || new ParamSerializer(this));\n\t}\n\tprivate _states: StatesController | undefined;\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\t// private _ui_data: UIData | undefined;\n\t// get ui_data(): UIData {\n\t// \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n\t// }\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseParam');\n\t\tthis.initialize_param();\n\t}\n\tinitialize_value() {}\n\tinitialize_param() {}\n\t// \t// this.add_post_dirty_hook(this._remove_node_param_cache.bind(this))\n\t// }\n\t// initialize() {\n\t// \tthis.init_components();\n\t// \t// this.init_expression()\n\t// \t// this._init_ui_data()\n\t// }\n\t// accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n\t// \treturn visitor.visit_param(this);\n\t// }\n\n\t//\n\t// init_expression() {}\n\n\t// type\n\tstatic type(): ParamType {\n\t\treturn ParamType.FLOAT; // adding a type here, but just to not have a compile error\n\t}\n\tget type(): T {\n\t\treturn (this.constructor as typeof BaseParamClass).type() as T;\n\t}\n\tget is_numeric(): boolean {\n\t\treturn false;\n\t}\n\n\t// name\n\tset_name(name: string) {\n\t\tsuper.set_name(name);\n\t}\n\n\tget value(): ParamValuesTypeMap[T] {\n\t\treturn this._value;\n\t}\n\tabstract get default_value_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get raw_input_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get value_serialized(): ParamValueSerializedTypeMap[T];\n\tconvert(raw_val: any): ParamValuesTypeMap[T] | null {\n\t\treturn null;\n\t}\n\tstatic are_raw_input_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_raw_input_equal(other_raw_input: ParamInitValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_raw_input_equal(this._raw_input, other_raw_input);\n\t}\n\tstatic are_values_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_value_equal(other_val: ParamValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_values_equal(this.value, other_val);\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input;\n\t}\n\tset(raw_input: ParamInitValuesTypeMap[T]): void {\n\t\tthis._raw_input = this._clone_raw_input(this._prefilter_invalid_raw_input(raw_input));\n\t\tthis.emit_controller.emit(ParamEvent.RAW_INPUT_UPDATED);\n\t\tthis.process_raw_input();\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget is_default(): boolean {\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\n\tprotected process_raw_input() {}\n\tprivate _is_computing: boolean = false;\n\tasync compute(): Promise<void> {\n\t\tif (this.scene.loading_controller.is_loading) {\n\t\t\tconsole.warn(`param attempt to compute ${this.full_path()}`);\n\t\t}\n\n\t\tif (this.is_dirty) {\n\t\t\tif (!this._is_computing) {\n\t\t\t\tthis._is_computing = true;\n\t\t\t\tawait this.process_computation();\n\t\t\t\tthis._is_computing = false;\n\n\t\t\t\tif (this._compute_resolves) {\n\t\t\t\t\tlet callback: ComputeCallback | undefined;\n\t\t\t\t\twhile ((callback = this._compute_resolves.pop())) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._compute_resolves = this._compute_resolves || [];\n\t\t\t\t\tthis._compute_resolves.push(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {}\n\t// set_default_value(default_value: ParamValuesTypeMap[T]) {\n\t// \tthis._default_value = default_value;\n\t// }\n\tset_init_value(init_value: ParamInitValuesTypeMap[T]) {\n\t\tthis._default_value = init_value; //this.convert(init_value);\n\t\t// this._raw_input = this._clone_raw_input(init_value);\n\n\t\t// if (this.is_multiple) {\n\t\t// \tthis.init_components();\n\t\t// }\n\n\t\t// this.set(init_value);\n\t}\n\t// eval_p(): Promise<ParamValuesTypeMap[T]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tresolve();\n\t// \t});\n\t// }\n\n\t// node\n\tset_node(node: BaseNodeType | null) {\n\t\tif (!node) {\n\t\t\tif (this._node) {\n\t\t\t\tthis._node.params.params_node?.remove_graph_input(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._node = node;\n\t\t\tif (this.options.makes_node_dirty_when_dirty() && !this.parent_param) {\n\t\t\t\tnode.params.params_node?.add_graph_input(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.components) {\n\t\t\tfor (let c of this.components) {\n\t\t\t\tc.set_node(node);\n\t\t\t}\n\t\t}\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget parent() {\n\t\treturn this.node;\n\t}\n\n\t// hierarchy\n\tset_parent_param(param: TypedMultipleParam<any>) {\n\t\tparam.add_graph_input(this);\n\t\tthis._parent_param = param;\n\t}\n\tget parent_param(): TypedMultipleParam<any> | undefined {\n\t\treturn this._parent_param;\n\t}\n\thas_parent_param(): boolean {\n\t\treturn this._parent_param != null;\n\t}\n\tfull_path(): string {\n\t\treturn this.node?.full_path() + '/' + this.name;\n\t}\n\tpath_relative_to(node: BaseNodeType | BaseParamType): string {\n\t\treturn CoreWalker.relative_path(node, this);\n\t}\n\n\t// emit\n\temit(event_name: ParamEvent): void {\n\t\tif (this.emit_controller.emit_allowed) {\n\t\t\tthis.emit_controller.increment_count(event_name);\n\t\t\tthis.scene.dispatch_controller.dispatch(this, event_name);\n\t\t}\n\t}\n\n\t// multiple\n\tget components() {\n\t\treturn this._components;\n\t}\n\tstatic get component_names(): string[] {\n\t\treturn [];\n\t}\n\tget component_names(): string[] {\n\t\tconst c = (<unknown>this.constructor) as TypedParam<T>;\n\t\treturn c.component_names;\n\t}\n\tget is_multiple(): boolean {\n\t\treturn this.component_names.length > 0;\n\t}\n\t// create_components() {}\n\tinit_components() {}\n\n\t// expression\n\t// set_expression(expression: string | null) {\n\t// \tthis.expression_controller.set_expression(expression);\n\t// }\n\thas_expression(): boolean {\n\t\treturn this.expression_controller != null && this.expression_controller.active; // use this._expression_controller to avoid creating it\n\t}\n\n\t// serialize\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n}\nexport type BaseParamType = TypedParam<ParamType>;\nexport class BaseParamClass extends TypedParam<ParamType> {\n\tget default_value_serialized() {\n\t\treturn 'BaseParamClass.default_value_serialized overriden';\n\t}\n\tget raw_input_serialized() {\n\t\treturn 'BaseParamClass.raw_input_serialized overriden';\n\t}\n\tget value_serialized() {\n\t\treturn 'BaseParamClass.value_serialized overriden';\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {BypassFlag} from './flags/Bypass';\nimport {DisplayFlag} from './flags/Display';\n\nexport class FlagsController {\n\tpublic readonly bypass: DisplayFlag | undefined;\n\tpublic readonly display: BypassFlag | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\thas_display(): boolean {\n\t\treturn false;\n\t}\n\thas_bypass(): boolean {\n\t\treturn false;\n\t}\n}\n\nfunction Display<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic display: DisplayFlag = new DisplayFlag(this.node);\n\t\thas_display(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\nfunction Bypass<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic readonly bypass: BypassFlag = new BypassFlag(this.node);\n\t\thas_bypass(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n\nexport class FlagsControllerD extends Display(FlagsController) {}\nexport class FlagsControllerB extends Bypass(FlagsController) {}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {}\n","export default \"\\n\\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\\nvec4 quat_mult(vec4 q1, vec4 q2)\\n{\\n\\treturn vec4(\\n\\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\\n\\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\\n\\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\\n\\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\\n\\t);\\n}\\n// http://glmatrix.net/docs/quat.js.html#line97\\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\\n\\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\\n\\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\\n\\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\\n\\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\\n\\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\\n\\n//   return out\\n\\n\\n\\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\\nmat4 rotationMatrix(vec3 axis, float angle)\\n{\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\n \\treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\\n}\\n\\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\\nvec4 quat_from_axis_angle(vec3 axis, float angle)\\n{\\n\\tvec4 qr;\\n\\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\\n\\tfloat sin_half_angle = sin(half_angle);\\n\\tqr.x = axis.x * sin_half_angle;\\n\\tqr.y = axis.y * sin_half_angle;\\n\\tqr.z = axis.z * sin_half_angle;\\n\\tqr.w = cos(half_angle);\\n\\treturn qr;\\n}\\nvec3 rotate_with_axis_angle(vec3 position, vec3 axis, float angle)\\n{\\n\\tvec4 q = quat_from_axis_angle(axis, angle);\\n\\tvec3 v = position.xyz;\\n\\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\\n// \\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n// }\\nvec3 rotate_with_quat( vec3 v, vec4 q )\\n{\\n\\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\\n\\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\\n\\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n}\\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target - origin);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n// mat3 rotation_matrix(vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n\\nfloat vector_angle(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 c1 = cross(start, dest);\\n\\t// We use the dot product of the cross with the Y axis.\\n\\t// This is a little arbitrary, but can still give a good sense of direction\\n\\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\\n\\tfloat d1 = dot(c1, y_axis);\\n\\tfloat angle = acos(cosTheta) * sign(d1);\\n\\treturn angle;\\n}\\n\\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\\nvec4 vector_align(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 axis;\\n\\n\\t// if (cosTheta < -1 + 0.001f){\\n\\t// \\t// special case when vectors in opposite directions:\\n\\t// \\t// there is no \\\"ideal\\\" rotation axis\\n\\t// \\t// So guess one; any will do as long as it's perpendicular to start\\n\\t// \\taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\\n\\t// \\tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\\n\\t// \\t\\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\\n\\n\\t// \\taxis = normalize(axis);\\n\\t// \\treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\\n\\t// }\\n\\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\\n\\t\\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\\n\\t\\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\\n\\t\\t\\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\\n\\t\\t}\\n\\t} else {\\n\\t\\taxis = normalize(cross(start, dest));\\n\\t}\\n\\n\\tfloat angle = acos(cosTheta);\\n\\n\\treturn quat_from_axis_angle(axis, angle);\\n}\\nvec4 vector_align_with_up(vec3 start, vec3 dest, vec3 up){\\n\\tvec4 rot1 = vector_align(start, dest);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\t// vec3 right = normalize(cross(dest, up));\\n\\t// up = normalize(cross(right, dest));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(up, newUp);\\n\\n\\t// return rot1;\\n\\treturn rot2;\\n\\t// return multQuat(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\\n\\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\nfloat quat_to_angle(vec4 q){\\n\\treturn 2.0 * acos(q.w);\\n}\\nvec3 quat_to_axis(vec4 q){\\n\\treturn vec3(\\n\\t\\tq.x / sqrt(1.0-q.w*q.w),\\n\\t\\tq.y / sqrt(1.0-q.w*q.w),\\n\\t\\tq.z / sqrt(1.0-q.w*q.w)\\n\\t);\\n}\\n\\nvec4 align(vec3 dir, vec3 up){\\n\\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\\n\\tvec3 start_up = vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot1 = vector_align(start_dir, dir);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\tvec3 right = normalize(cross(dir, up));\\n\\tif(length(right)<0.001){\\n\\t\\tright = vec3(1.0, 0.0, 0.0);\\n\\t}\\n\\tup = normalize(cross(right, dir));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(normalize(newUp), up);\\n\\n\\t// return rot1;\\n\\treturn quat_mult(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\"","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {DecomposedPath} from './DecomposedPath';\n// import {NodeSimple} from '/graph/NodeSimple'\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class CoreWalker {\n\tpublic static readonly SEPARATOR = '/';\n\tpublic static readonly DOT = '.';\n\tpublic static readonly CURRENT = CoreWalker.DOT;\n\tpublic static readonly PARENT = '..';\n\tpublic static readonly CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;\n\tpublic static readonly PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;\n\tpublic static readonly NON_LETTER_PREFIXES = [CoreWalker.SEPARATOR, CoreWalker.DOT];\n\n\tstatic find_node(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements: string[] = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);\n\t\tconst first_element = elements[0];\n\n\t\tlet next_node: BaseNodeType | null = null;\n\t\tif (path[0] === CoreWalker.SEPARATOR) {\n\t\t\tconst path_from_root = path.substr(1);\n\t\t\tnext_node = this.find_node(node_src.root, path_from_root, decomposed_path);\n\t\t} else {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase CoreWalker.PARENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src.parent;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreWalker.CURRENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: What does .node means?? in which case is this not a node? (it is for nodes which cannot have children - but I'd like to unify the api)\n\t\t\t\t\t// console.error(\"rethink this method Walker.find_node\")\n\t\t\t\t\t// if (node_src.node != null) {\n\t\t\t\t\tnext_node = node_src.node(first_element);\n\t\t\t\t\tif (next_node) {\n\t\t\t\t\t\tdecomposed_path?.add_node(first_element, next_node);\n\t\t\t\t\t}\n\n\t\t\t\t// if (next_node == null) { this.find_node_warning(node_src, first_element); }\n\t\t\t\t// return next_node;\n\t\t\t\t// break\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\tif (next_node != null && elements.length > 1) {\n\t\t\t\tconst remainder = elements.slice(1).join(CoreWalker.SEPARATOR);\n\t\t\t\tnext_node = this.find_node(next_node, remainder, decomposed_path);\n\t\t\t}\n\t\t\treturn next_node;\n\t\t}\n\n\t\treturn next_node;\n\t}\n\n\tstatic find_param(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = path.split(CoreWalker.SEPARATOR);\n\n\t\tif (elements.length === 1) {\n\t\t\treturn node_src.params.get(elements[0]);\n\t\t} else {\n\t\t\tconst node_path = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);\n\t\t\tconst node = this.find_node(node_src, node_path, decomposed_path);\n\t\t\tif (node != null) {\n\t\t\t\tconst param_name = elements[elements.length - 1];\n\t\t\t\tconst param = node.params.get(param_name);\n\t\t\t\tif (decomposed_path && param) {\n\t\t\t\t\tdecomposed_path.add_node(param_name, param);\n\t\t\t\t}\n\t\t\t\treturn param;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t\t// throw `no node found for path ${node_path}`;\n\t\t\t}\n\t\t}\n\t}\n\tstatic relative_path(src_graph_node: Readonly<NodeOrParam>, dest_graph_node: Readonly<NodeOrParam>): string {\n\t\tconst parent = this.closest_common_parent(src_graph_node, dest_graph_node);\n\t\tif (!parent) {\n\t\t\treturn dest_graph_node.full_path();\n\t\t} else {\n\t\t\tconst distance = this.distance_to_parent(src_graph_node, parent);\n\t\t\t// const up = lodash_padStart(\"\", (distance-1)*3, \"../\")\n\t\t\tlet up = '';\n\t\t\tif (distance - 1 > 0) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst ups = [];\n\t\t\t\twhile (i++ < distance - 1) {\n\t\t\t\t\tups.push(CoreWalker.PARENT);\n\t\t\t\t}\n\t\t\t\tup = ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;\n\t\t\t}\n\n\t\t\tconst parent_path_elements = parent\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst dest_path_elements = dest_graph_node\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst remaining_elements = [];\n\t\t\tlet cmptr = 0;\n\t\t\tfor (let dest_path_element of dest_path_elements) {\n\t\t\t\tif (!parent_path_elements[cmptr]) {\n\t\t\t\t\tremaining_elements.push(dest_path_element);\n\t\t\t\t}\n\t\t\t\tcmptr++;\n\t\t\t}\n\t\t\tconst down = remaining_elements.join(CoreWalker.SEPARATOR);\n\t\t\treturn `${up}${down}`;\n\t\t}\n\t}\n\n\tstatic closest_common_parent(\n\t\tgraph_node1: Readonly<NodeOrParam>,\n\t\tgraph_node2: Readonly<NodeOrParam>\n\t): BaseNodeType | null {\n\t\tconst parents1 = this.parents(graph_node1).reverse();\n\t\tconst parents2 = this.parents(graph_node2).reverse();\n\n\t\tconst min_depth = Math.min(parents1.length, parents2.length);\n\t\tlet found_parent = null;\n\n\t\tfor (let i = 0; i < min_depth; i++) {\n\t\t\tif (parents1[i].graph_node_id == parents2[i].graph_node_id) {\n\t\t\t\tfound_parent = parents1[i];\n\t\t\t}\n\t\t}\n\t\treturn found_parent;\n\t}\n\tstatic parents(graph_node: Readonly<NodeOrParam>): BaseNodeType[] {\n\t\tconst parents = [];\n\t\tlet parent = graph_node.parent;\n\t\twhile (parent) {\n\t\t\tparents.push(parent);\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn parents;\n\t}\n\tstatic distance_to_parent(graph_node: Readonly<NodeOrParam>, dest: Readonly<BaseNodeType>): number {\n\t\tlet distance = 0;\n\t\tlet current: Readonly<NodeOrParam | null> = graph_node;\n\t\tconst dest_id = dest.graph_node_id;\n\t\twhile (current && current.graph_node_id != dest_id) {\n\t\t\tdistance += 1;\n\t\t\tcurrent = current.parent;\n\t\t}\n\t\tif (current && current.graph_node_id == dest_id) {\n\t\t\treturn distance;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tstatic make_absolute_path(node_src: BaseNodeType | BaseParamType, path: string): string | null {\n\t\tconst path_elements = path.split(CoreWalker.SEPARATOR);\n\t\tconst first_element = path_elements.shift();\n\n\t\tif (first_element) {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase '..': {\n\t\t\t\t\tif (node_src.parent) {\n\t\t\t\t\t\treturn this.make_absolute_path(node_src.parent, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase '.': {\n\t\t\t\t\treturn this.make_absolute_path(node_src, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn [node_src.full_path(), path].join(CoreWalker.SEPARATOR);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn node_src.full_path();\n\t\t}\n\t}\n}\n","export enum ParamEvent {\n\tVISIBLE_UPDATED = 'param_visible_updated',\n\t// UPDATED = 'param_updated',\n\tRAW_INPUT_UPDATED = 'raw_input_updated',\n\tVALUE_UPDATED = 'param_value_updated',\n\tEXPRESSION_UPDATED = 'param_expression_update',\n\tERROR_UPDATED = 'param_error_updated',\n\tDELETED = 'param_deleted',\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Triangle} from 'three/src/math/Triangle';\nconst THREE = {Triangle, Vector3};\nimport lodash_isNumber from 'lodash/isNumber';\n// import {Octree} from './Octree'\n// import Interpolate from './Interpolate'\nimport {Easing} from './Easing';\n\nconst RAD_DEG_RATIO = Math.PI / 180;\n\nexport class CoreMath {\n\t// static Octree = Octree\n\t// static Interpolate = Interpolate\n\tstatic Easing = Easing; // used in expressins\n\n\tstatic clamp(val: number, min: number, max: number): number {\n\t\tif (val < min) {\n\t\t\treturn min;\n\t\t} else if (val > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tstatic fit01(val: number, dest_min: number, dest_max: number): number {\n\t\t// const size = max - min;\n\t\t// return (val - min) / size;\n\t\treturn this.fit(val, 0, 1, dest_min, dest_max);\n\t}\n\n\tstatic fit(val: number, src_min: number, src_max: number, dest_min: number, dest_max: number): number {\n\t\tconst src_range = src_max - src_min;\n\t\tconst dest_range = dest_max - dest_min;\n\n\t\tconst r = (val - src_min) / src_range;\n\t\treturn r * dest_range + dest_min;\n\t}\n\n\tstatic degrees_to_radians(degrees: number): number {\n\t\treturn degrees * RAD_DEG_RATIO;\n\t}\n\tstatic radians_to_degrees(radians: number): number {\n\t\treturn radians / RAD_DEG_RATIO;\n\t}\n\tstatic deg2rad(deg: number): number {\n\t\treturn this.degrees_to_radians(deg);\n\t}\n\tstatic rad2deg(rad: number): number {\n\t\treturn this.radians_to_degrees(rad);\n\t}\n\n\tstatic fract = (number: number) => number - Math.floor(number);\n\n\t// from threejs glsl rand\n\tstatic rand(number: number): number {\n\t\tif (lodash_isNumber(number)) {\n\t\t\treturn this.rand_float(number);\n\t\t} else {\n\t\t\treturn this.rand_vec2(number);\n\t\t}\n\t}\n\n\tstatic round(number: number, step_size: number): number {\n\t\tconst steps_count = number / step_size;\n\t\tconst rounded_steps_count = number < 0 ? Math.ceil(steps_count) : Math.floor(steps_count);\n\t\tconsole.log('round', step_size, number, steps_count, rounded_steps_count, rounded_steps_count * step_size);\n\t\treturn rounded_steps_count * step_size;\n\t}\n\n\tstatic highest_even(number: number): number {\n\t\treturn 2 * Math.ceil(number * 0.5);\n\t}\n\n\tstatic rand_float(number: number): number {\n\t\tconst vec = {\n\t\t\tx: number,\n\t\t\ty: 136574,\n\t\t};\n\t\treturn this.rand_vec2(vec);\n\t}\n\n\tstatic rand_vec2(uv: Vector2Like) {\n\t\tconst a = 12.9898;\n\t\tconst b = 78.233;\n\t\tconst c = 43758.5453;\n\t\tconst dt = uv.x * a + uv.y * b; //dot( uv.xy, vec2( a,b ) )\n\t\tconst sn = dt % Math.PI;\n\t\treturn this.fract(Math.sin(sn) * c);\n\t}\n\n\t// https://www.movable-type.co.uk/scripts/latlong.html\n\tstatic geodesic_distance(lnglat1: LngLatLike, lnglat2: LngLatLike): number {\n\t\tvar R = 6371e3; // metres\n\t\tvar φ1 = this.deg2rad(lnglat1.lat);\n\t\tvar φ2 = this.deg2rad(lnglat2.lat);\n\t\tvar Δφ = this.deg2rad(lnglat2.lat - lnglat1.lat);\n\t\tvar Δλ = this.deg2rad(lnglat2.lng - lnglat1.lng);\n\n\t\tvar a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tvar d = R * c;\n\t\treturn d;\n\t}\n\n\tstatic expand_triangle(triangle: Triangle, margin: number): Triangle {\n\t\tconst mid_point = new THREE.Vector3();\n\t\ttriangle.getMidpoint(mid_point);\n\n\t\tenum TriangleProp {\n\t\t\ta = 'a',\n\t\t\tb = 'b',\n\t\t\tc = 'c',\n\t\t}\n\t\tfor (let prop of ['a', 'b', 'c']) {\n\t\t\tconst delta = triangle[prop as TriangleProp].clone().sub(mid_point);\n\t\t\tconst delta_n = delta.clone().normalize();\n\t\t\tconst length = delta.length() + margin;\n\n\t\t\ttriangle[prop as TriangleProp] = mid_point.clone().add(delta_n.multiplyScalar(length));\n\t\t}\n\t\treturn triangle;\n\t}\n\n\tstatic nearestPower2(num: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));\n\t}\n}\n","import {BaseController} from './_BaseController';\n\nimport {FrontSide} from 'three/src/constants';\nimport {DoubleSide} from 'three/src/constants';\nimport {BackSide} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function SideParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdouble_sided = ParamConfig.BOOLEAN(0);\n\t\tfront = ParamConfig.BOOLEAN(1, {visible_if: {double_sided: false}});\n\t};\n}\n\nclass SidedMaterial extends Material {\n\tside!: number;\n}\nclass SideParamsConfig extends SideParamConfig(NodeParamsConfig) {}\nclass SideMatNode extends TypedMatNode<SidedMaterial, SideParamsConfig> {\n\tcreate_material() {\n\t\treturn new SidedMaterial();\n\t}\n}\n\nexport class SideController extends BaseController {\n\tstatic update(node: SideMatNode) {\n\t\tconst single_side = node.pv.front ? FrontSide : BackSide;\n\t\tconst new_side = node.pv.double_sided ? DoubleSide : single_side;\n\t\tif (new_side != node.material.side) {\n\t\t\tnode.material.side = new_side;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {OutputGlNode} from '../../../Output';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {BaseGLDefinition, UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {MapUtils} from '../../../../../../core/MapUtils';\nimport {ShaderMaterialWithCustomMaterials} from '../../../../../../core/geometry/Material';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {GlNodeFinder} from '../../utils/NodeFinder';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\n// import {BaseNodeType} from '../../_Base';\n// import {GlobalsGeometryHandler} from './Globals/Geometry'\n\nexport enum CustomMaterialName {\n\tDISTANCE = 'customDistanceMaterial',\n\tDEPTH = 'customDepthMaterial',\n\tDEPTH_DOF = 'customDepthDOFMaterial',\n}\n// export type ShaderAssemblerRenderDerivated = {new (node: BaseNodeType): ShaderAssemblerRender};\n// type ShaderAssemblerRenderDerivatedClass = new (...args: any[]) => ShaderAssemblerRender;\nexport type CustomAssemblerMap = Map<CustomMaterialName, typeof ShaderAssemblerMaterial>;\n\nexport class ShaderAssemblerMaterial extends BaseGlShaderAssembler {\n\tprivate _assemblers_by_custom_name: Map<CustomMaterialName, ShaderAssemblerMaterial> = new Map();\n\n\tcreate_material(): ShaderMaterial {\n\t\treturn new ShaderMaterial();\n\t}\n\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap | undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected _add_custom_materials(material: ShaderMaterial) {\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\t(assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tthis._add_custom_material(\n\t\t\t\t\t\tmaterial as ShaderMaterialWithCustomMaterials,\n\t\t\t\t\t\tcustom_name,\n\t\t\t\t\t\tassembler_class\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\tprivate _add_custom_material(\n\t\tmaterial: ShaderMaterialWithCustomMaterials,\n\t\tcustom_name: CustomMaterialName,\n\t\tassembler_class: typeof ShaderAssemblerMaterial\n\t) {\n\t\tlet custom_assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(custom_name);\n\t\tif (!custom_assembler) {\n\t\t\tcustom_assembler = new assembler_class(this._gl_parent_node);\n\t\t\tthis._assemblers_by_custom_name.set(custom_name, custom_assembler);\n\t\t}\n\t\tmaterial.custom_materials = material.custom_materials || {};\n\t\tmaterial.custom_materials[custom_name] = custom_assembler.create_material();\n\t}\n\n\tasync compile_custom_materials(material: ShaderMaterialWithCustomMaterials): Promise<void> {\n\t\t// const custom_materials_by_name: Map<CustomMaterialName, ShaderMaterial> = new Map();\n\t\t// this._assemblers_by_custom_name.clear();\n\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\tasync (assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tif (this._code_builder) {\n\t\t\t\t\t\tlet assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(\n\t\t\t\t\t\t\tcustom_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!assembler) {\n\t\t\t\t\t\t\tassembler = new assembler_class(this._gl_parent_node);\n\t\t\t\t\t\t\tthis._assemblers_by_custom_name.set(custom_name, assembler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tassembler.set_root_nodes(this._root_nodes);\n\t\t\t\t\t\tassembler.set_param_configs_owner(this._code_builder);\n\t\t\t\t\t\tassembler.set_shader_configs(this.shader_configs);\n\t\t\t\t\t\tassembler.set_variable_configs(this.variable_configs());\n\n\t\t\t\t\t\tconst custom_material = material.custom_materials[custom_name];\n\t\t\t\t\t\tif (custom_material) {\n\t\t\t\t\t\t\tawait assembler.compile_material(custom_material);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if (material) {\n\t\t\t\t\t\t// \t// add needsUpdate = true, as we always get the same material\n\t\t\t\t\t\t// \t// material.needsUpdate = true;\n\t\t\t\t\t\t// \tcustom_materials_by_name.set(custom_name, material);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// for (let custom_name of Object.keys(class_by_custom_name)) {\n\t\t// \tconst assembler_class = class_by_custom_name[custom_name];\n\t\t// \t// const assembler = new assembler_class(this._gl_parent_node)\n\n\t\t// }\n\n\t\t// return custom_materials_by_name;\n\t}\n\tasync compile_material(material: ShaderMaterial) {\n\t\t// no need to compile if the globals handler has not been declared\n\t\tif (!this.compile_allowed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this._gl_parent_node);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis._gl_parent_node.states.error.set('only one output node allowed');\n\t\t}\n\t\tthis.set_root_nodes(output_nodes);\n\t\tawait this._update_shaders();\n\n\t\tconst new_vertex_shader = this._shaders_by_name.get(ShaderName.VERTEX);\n\t\tconst new_fragment_shader = this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t\tif (new_vertex_shader && new_fragment_shader) {\n\t\t\tmaterial.vertexShader = new_vertex_shader;\n\t\t\tmaterial.fragmentShader = new_fragment_shader;\n\t\t\t// if (this._template_shader && this._template_shader.uniforms) {\n\t\t\tthis.add_uniforms(material.uniforms);\n\t\t\t// }\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t\t\t// as we need several materials:\n\t\t\t// - the visible one\n\t\t\t// - the multiple shadow ones\n\t\t\t// - and possibly a depth one\n\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(\n\t\t\t\tmaterial.uuid,\n\t\t\t\tmaterial.uniforms as IUniformsWithTime\n\t\t\t);\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(material.uuid);\n\t\t}\n\n\t\t// const material = await this._assembler.get_material();\n\t\t// if (material) {\n\t\t// this._shaders_by_name.set(ShaderName.VERTEX, this._template_shader!.vertexShader!);\n\t\t// this._shaders_by_name.set(ShaderName.FRAGMENT, this._template_shader!.fragmentShader!);\n\n\t\t// assign custom materials\n\t\tif ((material as ShaderMaterialWithCustomMaterials).custom_materials) {\n\t\t\tawait this.compile_custom_materials(material as ShaderMaterialWithCustomMaterials);\n\t\t}\n\t\t// const custom_materials = await this.get_custom_materials();\n\t\t// const material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t\t// material_with_custom_materials.custom_materials = {};\n\t\t// custom_materials.forEach((custom_material, shader_name) => {\n\t\t// \tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t\t// });\n\n\t\t// material.needsUpdate = true;\n\t\t// }\n\n\t\t// this.create_spare_parameters();\n\t}\n\tprivate async _update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\tshadow_assembler_class_by_custom_name() {\n\t\treturn {};\n\t}\n\n\tadd_output_body_line(\n\t\toutput_node: OutputGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController,\n\t\tinput_name: string\n\t) {\n\t\tconst input = output_node.io.inputs.named_input(input_name);\n\t\tconst var_input = output_node.variable_for_input(input_name);\n\t\tconst variable_config = this.variable_config(input_name);\n\n\t\tlet new_var: string | null = null;\n\t\tif (input) {\n\t\t\tnew_var = ThreeToGl.vector3(var_input);\n\t\t} else {\n\t\t\tif (variable_config.default_from_attribute()) {\n\t\t\t\tconst connection_point = output_node.io.inputs.named_input_connection_points_by_name(input_name);\n\t\t\t\tif (connection_point) {\n\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\tconst attr_read = this.globals_handler?.read_attribute(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tgl_type,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t\tif (attr_read) {\n\t\t\t\t\t\tnew_var = attr_read;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst variable_config_default = variable_config.default();\n\t\t\t\tif (variable_config_default) {\n\t\t\t\t\tnew_var = variable_config_default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// const default_value = variable_config.default()\n\t\t\t// new_var = default_value\n\t\t\t// const definition_configs = variable_config.required_definitions() || []\n\t\t\t// for(let definition_config of definition_configs){\n\t\t\t// \tconst definition = definition_config.create_definition(output_node)\n\t\t\t// \toutput_node.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\t\tif (new_var) {\n\t\t\tconst prefix = variable_config.prefix();\n\t\t\tconst suffix = variable_config.suffix();\n\t\t\tconst if_condition = variable_config.if_condition();\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#if ${if_condition}`]);\n\t\t\t}\n\t\t\tshaders_collection_controller.add_body_lines(output_node, [`${prefix}${new_var}${suffix}`]);\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#endif`]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.shader_config(shader_name)?.input_names();\n\t\tif (input_names) {\n\t\t\t// shaders_collection_controller.set_body_lines([], shader_name);\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tthis.add_output_body_line(output_node, shaders_collection_controller, input_name);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\t// const named_output = attribute_node.connected_output()\n\t\t// const named_connection = attribute_node.connected_input()\n\t\tconst gl_type = attribute_node.gl_type();\n\t\tconst new_var = this.globals_handler?.read_attribute(\n\t\t\tattribute_node,\n\t\t\tgl_type,\n\t\t\tattribute_node.attribute_name,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\tshaders_collection_controller.add_body_lines(attribute_node, [`${gl_type} ${var_name} = ${new_var}`]);\n\t\t// this.add_output_body_line(\n\t\t// \tattribute_node,\n\t\t// \tshader_name,\n\t\t// \tinput_name\n\t\t// \t)\n\n\t\t// const vertex_definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_definitions = []\n\n\t\t// const named_output = attribute_node.named_outputs()[0]\n\t\t// const gl_type = named_output.type()\n\t\t// const var_name = attribute_node.gl_var_name(named_output.name())\n\n\t\t// const attribute_name = attribute_node.attribute_name()\n\t\t// // TODO: I should probably raise an error in the node\n\t\t// // maybe when doint the initial eval of all nodes and check for errors?\n\t\t// if(!attribute_name){\n\t\t// \tconsole.error(attribute_node.full_path())\n\t\t// \tthrow new Error(\"empty attr name\")\n\t\t// }\n\t\t// if(GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attribute_name) < 0){\n\t\t// \tvertex_definitions.push(new Definition.Attribute(attribute_node, gl_type, attribute_name))\n\t\t// }\n\t\t// vertex_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\t\t// vertex_body_lines.push( `${var_name} = ${attribute_name}` )\n\t\t// fragment_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\n\t\t// attribute_node.set_definitions(vertex_definitions, 'vertex')\n\t\t// attribute_node.set_definitions(fragment_definitions, 'fragment')\n\t\t// attribute_node.add_body_lines(vertex_body_lines, 'vertex')\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec4 ${var_name} = gl_FragCoord`);\n\t\t}\n\t}\n\thandle_resolution(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec2 ${var_name} = resolution`);\n\t\t}\n\t}\n\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = [];\n\t\t// const fragment_definitions = [];\n\t\t// const definitions = [];\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = [];\n\t\tconst body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_nameshader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tdefinitions_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t// body_lines_by_shader_name[shader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tbody_lines_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tlet definition;\n\t\tlet body_line;\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tbody_line = `float ${var_name} = ${output_name}`;\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\tbody_lines.push(body_line);\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tthis.handle_resolution(body_lines, shader_name, var_name);\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.VEC2, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set_resolution_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_PointCoord':\n\t\t\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\t\t\tbody_lines.push(`vec2 ${var_name} = gl_PointCoord`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t\t// const new_var = this.globals_handler().read_attribute(\n\t\t\t\t\t// \tglobals_node,\n\t\t\t\t\t// \tgl_type,\n\t\t\t\t\t// \toutput_name\n\t\t\t\t\t// )\n\t\t\t\t\t// const body_line = `${var_name} = ${new_var}`\n\t\t\t\t\t// globals_node.add_body_lines([body_line])\n\t\t\t\t\tthis.globals_handler?.handle_globals_node(\n\t\t\t\t\t\tglobals_node,\n\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t\t\t// body_lines,\n\t\t\t\t\t\t// dependencies,\n\t\t\t\t\t\t// shader_name\n\t\t\t\t\t);\n\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t// definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t\t\t// definitions_by_shader_name[shader_name].push(definition)\n\t\t\t\t// throw \"debug\"\n\n\t\t\t\t// body_line = `${var_name} = vec3(${output_name})`\n\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t// }\n\t\t\t\t// if(dependencies.length == 0){\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\t});\n\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines, shader_name);\n\t\t});\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t}\n}\n","import {BaseContainer, TypedContainer} from '../../containers/_Base';\nimport {BaseNodeType} from '../_Base';\n\ntype Callback<T extends TypedContainer<any>> = (container: T | undefined) => void;\n\nexport class TypedContainerController<T extends TypedContainer<any>> {\n\tprivate _callbacks: Callback<T>[] = [];\n\tprotected _container: T;\n\n\tconstructor(protected node: BaseNodeType, container_class: typeof BaseContainer) {\n\t\tthis._container = new container_class(this.node) as T;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\trequest_container(): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._callbacks.push(resolve);\n\t\t\tthis.node.scene.cook_controller.add_node(this.node);\n\n\t\t\t// const cooker = this.node.scene.cooker;\n\t\t\t// if (cooker.blocked()) {\n\t\t\t// \tcooker.enqueue(this.node);\n\t\t\t// } else {\n\t\t\tsetTimeout(this.process_container_request.bind(this), 0);\n\t\t\t// }\n\t\t});\n\t}\n\n\tprocess_container_request() {\n\t\tif (this.node.flags?.bypass?.active) {\n\t\t\tconst input_index = 0;\n\t\t\tthis.request_input_container(input_index).then((container) => {\n\t\t\t\tthis.node.remove_dirty_state();\n\t\t\t\tif (container) {\n\t\t\t\t\tthis.notify_requesters(container);\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('input invalid');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.node.is_dirty) {\n\t\t\t\tthis.node.container_controller.container.reset_caches();\n\t\t\t\tthis.node.cook_controller.cook_main();\n\t\t\t} else {\n\t\t\t\tthis.notify_requesters();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync request_input_container(input_index: number) {\n\t\tconst input_node = this.node.io.inputs.input(input_index);\n\t\tif (input_node) {\n\t\t\tinput_node.processing_context.copy(this.node.processing_context);\n\t\t\tconst container = await input_node.container_controller.request_container();\n\t\t\treturn container;\n\t\t} else {\n\t\t\tthis.node.states.error.set(`input ${input_index} required`);\n\t\t\tthis.notify_requesters();\n\t\t\treturn null;\n\t\t}\n\t}\n\tnotify_requesters(container?: T) {\n\t\t// make a copy of the callbacks first,\n\t\t// to ensure that new ones are not added to this list\n\t\t// in side effects from those callbacks\n\t\t// (the test suite for the File SOP is a good test for this)\n\t\tlet callback;\n\t\tconst callbacks = [];\n\t\twhile ((callback = this._callbacks.pop())) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\n\t\tif (!container) {\n\t\t\tcontainer = this.node.container_controller.container.clone();\n\t\t}\n\t\t// removing the clone, as this seems to defeat the no cloning of inputs\n\t\t// container = container || this._container\n\t\twhile ((callback = callbacks.pop())) {\n\t\t\tcallback(container);\n\t\t}\n\t\tthis.node.scene.cook_controller.remove_node(this.node);\n\t}\n}\n\nexport class BaseContainerController extends TypedContainerController<any> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nconst THREE = {Vector2, Vector3};\n\nconst ATTRIB_NAME_MAP: Dictionary<string> = {\n\tP: 'position',\n\tN: 'normal',\n\tCd: 'color',\n};\n\nexport class CoreAttribute {\n\t// constructor: (@_size, @_value)->\n\t// \t#\n\n\t// size: ->\n\t// \t@_size\n\n\t// value: ->\n\t// \t@_value\n\n\t// set_value: (value)->\n\t// \t@_value = value\n\n\tstatic remap_name(name: string): string {\n\t\treturn ATTRIB_NAME_MAP[name] || name;\n\t}\n\n\tstatic array_to_indexed_arrays(array: string[]) {\n\t\tconst index_by_value: Dictionary<number> = {};\n\t\tlet current_index = 0;\n\t\tconst indices = [];\n\t\tconst values = [];\n\n\t\tlet i = 0;\n\t\twhile (i < array.length) {\n\t\t\t//(value = array[i++])?\n\t\t\tconst value = array[i];\n\t\t\tconst index = index_by_value[value];\n\t\t\tif (index != null) {\n\t\t\t\tindices.push(index);\n\t\t\t} else {\n\t\t\t\tvalues.push(value);\n\t\t\t\tindices.push(current_index);\n\t\t\t\tindex_by_value[value] = current_index;\n\t\t\t\tcurrent_index += 1;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn {\n\t\t\tindices,\n\t\t\tvalues,\n\t\t};\n\t}\n\n\tstatic default_value(size: number) {\n\t\tswitch (size) {\n\t\t\tcase 1:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn new THREE.Vector2(0, 0);\n\t\t\tcase 3:\n\t\t\t\treturn new THREE.Vector3(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow `size ${size} not yet implemented`;\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../nodes/_Base';\n\n// interface ContentOption {\n// \tclone?: boolean\n// }\n\nimport {ContainableMap} from './utils/ContainableMap';\ntype K = keyof ContainableMap;\ntype Containable = ContainableMap[K];\n\nexport abstract class TypedContainer<T extends Containable> {\n\t// protected _node: BaseNode;\n\t// protected _eval_key: number\n\tprotected _content!: T;\n\n\tconstructor(protected _node: BaseNodeType) {\n\t\t// this.update_eval_key();\n\t\t// this.set_content(this._default_content());\n\t}\n\n\tset_node(node: BaseNodeType) {\n\t\tthis._node = node;\n\t}\n\tnode(): BaseNodeType {\n\t\treturn this._node;\n\t}\n\n\tclone() {\n\t\tlet content;\n\t\tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n\t\tcloned_container.set_node(this.node());\n\t\tif ((content = this.content()) != null) {\n\t\t\tcloned_container.set_content(content); //, this.eval_key() );\n\t\t}\n\t\treturn cloned_container;\n\t}\n\treset_caches() {}\n\t// abstract _default_content(): T;\n\n\tset_content(content: T) {\n\t\t//, eval_key?: number){\n\t\tthis.reset_caches();\n\t\tthis._content = content; //|| this._default_content();\n\t\t// this.update_eval_key(eval_key);\n\t\tthis._post_set_content();\n\t}\n\thas_content(): boolean {\n\t\treturn this._content != null;\n\t}\n\t// content(options: ContentOption = {}) {\n\t// \tconst clone = options['clone'] || false\n\t// \tif (clone) {\n\t// \t\treturn this.clone_content()\n\t// \t} else {\n\t// \t\treturn this._content\n\t// \t}\n\t// }\n\tcontent() {\n\t\treturn this._content;\n\t}\n\tprotected _post_set_content() {}\n\tpublic core_content(): T | undefined {\n\t\treturn this._content;\n\t}\n\tpublic core_content_cloned(): T | undefined {\n\t\treturn this._content;\n\t}\n\t// abstract clone_content(): T\n\n\t// update_eval_key(eval_key?: number){\n\t// \tthis._eval_key = eval_key || performance.now();\n\t// }\n\t// eval_key(): number {\n\t// \treturn this._eval_key;\n\t// }\n\n\tinfos(): any {\n\t\treturn [];\n\t}\n}\n\nexport class BaseContainer extends TypedContainer<any> {}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {TypedMatNode} from '../_Base';\nexport function SkinningParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tskinning = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass SkinnedMaterial extends Material {\n\tskinning!: boolean;\n}\nclass SkinningParamsConfig extends SkinningParamConfig(NodeParamsConfig) {}\nclass SkinningMatNode extends TypedMatNode<SkinnedMaterial, SkinningParamsConfig> {\n\tcreate_material() {\n\t\treturn new SkinnedMaterial();\n\t}\n}\n\nexport class SkinningController extends BaseController {\n\tstatic update(node: SkinningMatNode) {\n\t\tconst new_skinning = node.pv.skinning;\n\t\tif (new_skinning != node.material.skinning) {\n\t\t\tnode.material.skinning = new_skinning;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMapController));\n\t\tmap = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureMapController, 'use_map')\n\t\t);\n\t};\n}\nclass TextureMapMaterial extends Material {\n\tmap!: Texture | null;\n}\ntype CurrentMaterial = TextureMapMaterial | ShaderMaterial;\nclass TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\nabstract class TextureMapMatNode extends TypedMatNode<CurrentMaterial, TextureMapParamsConfig> {\n\ttexture_map_controller!: TextureMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(node: TextureMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_map, this.node.p.map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'map', this.node.p.use_map, this.node.p.map);\n\t}\n\tstatic async update(node: TextureMapMatNode) {\n\t\tnode.texture_map_controller.update();\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nexport function TextureAlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_alpha_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureAlphaMapController));\n\t\talpha_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureAlphaMapController, 'use_alpha_map')\n\t\t);\n\t};\n}\nclass TextureAlphaMaterial extends Material {\n\talphaMap!: Texture | null;\n}\ntype CurrentMaterial = TextureAlphaMaterial | ShaderMaterial;\nclass TextureAlphaMapParamsConfig extends TextureAlphaMapParamConfig(NodeParamsConfig) {}\nabstract class TextureAlphaMapMatNode extends TypedMatNode<CurrentMaterial, TextureAlphaMapParamsConfig> {\n\ttexture_alpha_map_controller!: TextureAlphaMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(node: TextureAlphaMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'alphaMap', this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tstatic async update(node: TextureAlphaMapMatNode) {\n\t\tnode.texture_alpha_map_controller.update();\n\t}\n}\n","import lodash_sortBy from 'lodash/sortBy';\n// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {RGBFormat} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {CubicInterpolant} from 'three/src/math/interpolants/CubicInterpolant';\n// import {ClampToEdgeWrapping} from 'three/src/constants'\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {RampValue, RampPoint, RampValueJson, RampInterpolation} from './ramp/RampValue';\n\n// import {AsCodeRamp} from './concerns/visitors/Ramp';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\n\n// interface RampParamVisitor extends TypedParamVisitor {\n// \tvisit_ramp_param: (param: RampParam) => any;\n// }\n\nexport class RampParam extends TypedParam<ParamType.RAMP> {\n\tstatic type() {\n\t\treturn ParamType.RAMP;\n\t}\n\n\tprivate _ramp_interpolant: CubicInterpolant | undefined;\n\tprivate _ramp_texture: DataTexture | undefined;\n\n\tstatic DEFAULT_VALUE = new RampValue(RampInterpolation.LINEAR, [new RampPoint(0, 0), new RampPoint(1, 1)]);\n\tstatic DEFAULT_VALUE_JSON: RampValueJson = RampParam.DEFAULT_VALUE.to_json();\n\n\tget default_value_serialized() {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.default_value.to_json();\n\t\t} else {\n\t\t\treturn this.default_value;\n\t\t}\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.RAMP]) {\n\t\tif (raw_input instanceof RampValue) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\treturn RampValue.from_json(raw_input).to_json();\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\treturn this._raw_input.to_json();\n\t\t} else {\n\t\t\treturn RampValue.from_json(this._raw_input).to_json();\n\t\t}\n\t}\n\tget value_serialized() {\n\t\treturn this.value.to_json();\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.RAMP],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.RAMP]\n\t) {\n\t\tif (raw_input1 instanceof RampValue) {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input1.is_equal(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.is_equal_json(raw_input2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input2.is_equal_json(raw_input1);\n\t\t\t} else {\n\t\t\t\treturn RampValue.are_json_equal(raw_input1, raw_input2);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.RAMP], val2: ParamValuesTypeMap[ParamType.RAMP]) {\n\t\treturn val1.is_equal(val2);\n\t}\n\tprivate _reset_ramp_interpolant_and_texture_bound = this._reset_ramp_interpolant_and_texture.bind(this);\n\tinitialize_param() {\n\t\tthis.add_post_dirty_hook('_reset_ramp_interpolant_and_texture', this._reset_ramp_interpolant_and_texture_bound);\n\t}\n\t// accepts_visitor(visitor: RampParamVisitor) {\n\t// \treturn visitor.visit_ramp_param(this);\n\t// }\n\tget is_default(): boolean {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.value.is_equal(this.default_value);\n\t\t} else {\n\t\t\treturn this.value.is_equal_json(this.default_value);\n\t\t}\n\t}\n\tprotected process_raw_input() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t} else {\n\t\t\t\tthis._value.copy(this._raw_input);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = RampValue.from_json(this._raw_input);\n\t\t\t} else {\n\t\t\t\tthis._value.from_json(this._raw_input);\n\t\t\t}\n\t\t}\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\t// convert_value(v) {\n\t// \tlet is_json = false\n\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = JSON.parse(v)\n\t// \t\tis_json = true\n\t// \t}\n\n\t// \tif (!is_json) {\n\t// \t\tif (v.interpolation && v.points) {\n\t// \t\t\tif (lodash_isArray(v.points)) {\n\t// \t\t\t\tis_json = true\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (is_json) {\n\t// \t\tv = RampValue.from_json(v)\n\t// \t}\n\n\t// \treturn v\n\t// }\n\t// convert_default_value(v) {\n\t// \treturn this.convert_value(v)\n\t// }\n\n\thas_expression() {\n\t\treturn false;\n\t}\n\n\t_reset_ramp_interpolant_and_texture() {\n\t\tthis._ramp_interpolant = undefined;\n\t\tthis._ramp_texture = undefined;\n\t}\n\tramp_texture() {\n\t\treturn (this._ramp_texture = this._ramp_texture || this._create_ramp_texture());\n\t}\n\t_create_ramp_texture() {\n\t\tconst width = 1024;\n\t\tconst height = 1;\n\n\t\tconst size = width * height;\n\t\tconst data = new Uint8Array(3 * size);\n\n\t\tlet stride = 0;\n\t\tlet position = 0;\n\t\tlet value = 0;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tstride = i * 3;\n\t\t\tposition = i / width;\n\t\t\tvalue = this.value_at_position(position);\n\t\t\tdata[stride] = value * 255; // if I set 256, a value of 1 will become 0\n\t\t\t// data[ stride+1 ] = 1\n\t\t\t// data[ stride+2 ] = 2\n\t\t}\n\n\t\tconst texture = new DataTexture(data, width, height, RGBFormat);\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\tstatic create_interpolant(positions: Float32Array, values: Float32Array) {\n\t\tconst values_count = 1;\n\t\tconst interpolated_values = new Float32Array(values_count);\n\t\treturn new CubicInterpolant(positions, values, values_count, interpolated_values);\n\t}\n\tinterpolant() {\n\t\treturn (this._ramp_interpolant = this._ramp_interpolant || this._create_interpolant());\n\t}\n\t_create_interpolant() {\n\t\tconst points = this.value.points;\n\t\tconst sorted_points = lodash_sortBy(points, (point) => point.position);\n\t\tconst positions = new Float32Array(sorted_points.length);\n\t\tconst values = new Float32Array(sorted_points.length);\n\n\t\tlet i = 0;\n\t\tfor (let sorted_point of sorted_points) {\n\t\t\tpositions[i] = sorted_point.position;\n\t\t\tvalues[i] = sorted_point.value;\n\t\t\ti++;\n\t\t}\n\n\t\treturn RampParam.create_interpolant(positions, values);\n\t}\n\n\tvalue_at_position(position: number): number {\n\t\treturn (<unknown>this.interpolant().evaluate(position)[0]) as number;\n\t}\n}\n","export class MapUtils {\n\tstatic push_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.push(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic unshift_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.unshift(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic concat_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_elements: V[]) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tlet array: V[] = map.get(key)!;\n\t\t\tfor (let element of new_elements) {\n\t\t\t\tarray.push(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmap.set(key, new_elements);\n\t\t}\n\t}\n}\n","export const CATEGORY_OBJ = {\n\tLIGHT: 'lights',\n\tMANAGER: 'managers',\n\tGEOMETRY: 'geometries',\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_COP = {\n\tINPUT: 'inputs',\n\tADVANCED: 'advanced',\n\tMISC: 'misc',\n};\nexport const CATEGORY_EVENT = {\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_GL = {\n\tCOLOR: 'color',\n\tCONVERSION: 'conversion',\n\tDYNAMICS: 'dynamics',\n\tGEOMETRY: 'geometry',\n\tGLOBALS: 'globals',\n\tLOGIC: 'logic',\n\tMATH: 'math',\n\tQUAT: 'quat',\n\tTRIGO: 'trigo',\n\tUTIL: 'util',\n\tINSTANCE: 'instance',\n};\nexport const CATEGORY_MAT = {\n\tADVANCED: 'advanced',\n\tMESH: 'meshes',\n\tPOINTS: 'points',\n\tLINE: 'lines',\n\tVOLUME: 'volumes',\n\tINSTANCE: 'instances',\n};\nexport const CATEGORY_SOP = {\n\tADVANCED: 'advanced',\n\tANIMATION: 'animation',\n\tATTRIBUTE: 'attributes',\n\tDYNAMICS: 'dynamics',\n\tINPUT: 'inputs',\n\tMISC: 'misc',\n\tMODIFIER: 'modifiers',\n\tPRIMITIVES: 'primitives',\n\tRENDER: 'render',\n};\nexport const CATEGORY_POST = {\n\tPASS: 'passes',\n};\n","import {TypedNode} from '../_Base';\nimport {TextureContainer} from '../../containers/Texture';\nimport {Texture} from 'three/src/textures/Texture';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {PolyScene} from '../../scene/PolyScene';\nimport {FlagsControllerB} from '../utils/FlagsController';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {LuminanceFormat, HalfFloatType} from 'three/src/constants';\n\nconst INPUT_COP_NAME = 'input texture';\nconst DEFAULT_INPUT_NAMES = [INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME];\n\nvar size = 32;\nvar data = new Uint16Array(size);\nfor (var i = 0; i < size; i++) {\n\tdata[i] = 0x70e2; // Half float 10000\n}\nconst EMPTY_DATA_TEXTURE = new DataTexture(data, size, 1, LuminanceFormat, HalfFloatType);\n\nexport class TypedCopNode<K extends NodeParamsConfig> extends TypedNode<'TEXTURE', BaseCopNodeType, K> {\n\tcontainer_controller: TypedContainerController<TextureContainer> = new TypedContainerController<TextureContainer>(\n\t\tthis,\n\t\tTextureContainer\n\t);\n\tpublic readonly flags: FlagsControllerB = new FlagsControllerB(this);\n\t// private _typed_array = new Uint8ClampedArray(512 * 512 * 4);\n\t// protected _texture: Texture = new DataTexture(this._typed_array, 512, 512, RGBFormat);\n\t// get texture() {\n\t// \treturn this._data_texture;\n\t// }\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.COP;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseCopNode');\n\t}\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\t// if (this.flags.display) {\n\t\t// \tthis.flags.display.set(false);\n\t\t// }\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\tset_texture(texture: Texture) {\n\t\t// this._copy_texture(texture);\n\t\ttexture.name = this.full_path();\n\t\tthis.set_container(texture);\n\t}\n\tclear_texture() {\n\t\tthis.set_container(EMPTY_DATA_TEXTURE);\n\t}\n\n\t// private _copy_texture(texture: Texture) {\n\t// \tconsole.log('_copy_texture', texture);\n\t// \tif (texture instanceof DataTexture) {\n\t// \t\tthis._data_texture.image = texture.image;\n\t// \t} else {\n\t// \t\tconst canvas = document.createElement('canvas');\n\t// \t\t// document.body.appendChild(canvas);\n\t// \t\tconst width = texture.image.width;\n\t// \t\tconst height = texture.image.height;\n\t// \t\tcanvas.width = width;\n\t// \t\tcanvas.height = height;\n\t// \t\tconst context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\t// \t\tcontext.drawImage(texture.image, 0, 0);\n\t// \t\tconst image_data = context.getImageData(0, 0, width, height);\n\t// \t\tconsole.log(this._typed_array.length, image_data.data.length, image_data);\n\t// \t\tthis._data_texture.image = image_data;\n\t// \t}\n\t// \tthis._data_texture.format = texture.format;\n\t// \t// this._data_texture.mapping = texture.mapping;\n\t// \t// this._data_texture.wrapS = texture.wrapS;\n\t// \t// this._data_texture.wrapT = texture.wrapT;\n\t// \t// this._data_texture.minFilter = texture.minFilter;\n\t// \t// this._data_texture.magFilter = texture.magFilter;\n\t// \tthis._data_texture.needsUpdate = true;\n\t// \tconsole.log('updated data tex', this._data_texture);\n\n\t// \t// if (!this._texture || this._texture.uuid != texture.uuid) {\n\t// \t// \tif (!this._texture) {\n\t// \t// \t\tconsole.log('assign');\n\t// \t// \t\tthis._texture = texture.clone();\n\t// \t// \t\t// this._texture.name = this.full_path();\n\t// \t// \t} else {\n\t// \t// \t\tconsole.log('copy');\n\t// \t// \t\tconst keys = Object.keys(texture) as Array<keyof Texture>;\n\t// \t// \t\tconst protected_keys = ['uuid', 'name', 'node'];\n\t// \t// \t\tfor (let key of keys) {\n\t// \t// \t\t\tif (!protected_keys.includes(key)) {\n\t// \t// \t\t\t\tthis._texture[key] = texture[key] as never; // but why is 'never' needed?!\n\t// \t// \t\t\t}\n\t// \t// \t\t}\n\t// \t// \t}\n\t// \t// }\n\t// }\n}\n\nexport type BaseCopNodeType = TypedCopNode<any>;\nexport class BaseCopNodeClass extends TypedCopNode<any> {}\n","import lodash_merge from 'lodash/merge';\nimport lodash_intersection from 'lodash/intersection';\nimport lodash_difference from 'lodash/difference';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseNodeType, TypedNode} from '../../_Base';\n\nimport {BaseGlShaderAssembler} from './assemblers/_Base';\nimport {GlobalsBaseController} from './globals/_Base';\nimport {GlobalsGeometryHandler} from './globals/Geometry';\n\nimport {JsonExportDispatcher} from '../../../io/json/export/Dispatcher';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {OutputGlNode} from '../Output';\nimport {GlobalsGlNode} from '../Globals';\n// import {BaseParamType} from '../../../params/_Base';\nimport {ParamJsonExporterData} from '../../../io/json/export/Param';\nimport {GlNodeChildrenMap} from '../../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n\n// interface BaseShaderAssemblerConstructor {\n// \tnew (): BaseGlShaderAssembler;\n// }\n// interface GlobalsBaseControllerConstructor {\n// \tnew (): GlobalsBaseController;\n// }\n\n// export function AssemblerOwner<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\tchildren_context() {\n// \t\t\treturn NodeContext.GL;\n// \t\t}\n\nexport class AssemblerControllerNode extends TypedNode<any, BaseNodeType, any> {\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tassembler_controller!: GlAssemblerController<BaseGlShaderAssembler>;\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n}\n\ntype BaseGlShaderAssemblerConstructor<A extends BaseGlShaderAssembler> = new (...args: any[]) => A;\nexport class GlAssemblerController<A extends BaseGlShaderAssembler> {\n\tprotected _assembler!: A;\n\tprivate _globals_handler: GlobalsBaseController | undefined = new GlobalsGeometryHandler();\n\tprivate _compile_required: boolean = true;\n\t// private _requester: BaseNodeSop;\n\t// private _recompiled: boolean = false;\n\t// private _shaders_by_name: Map<ShaderName, string> = new Map();\n\n\tprivate _deleted_params_data: Map<string, ParamJsonExporterData<ParamType>> = new Map();\n\t// private _new_params: BaseParamType[] = [];\n\n\tconstructor(private node: AssemblerControllerNode, assembler_class: BaseGlShaderAssemblerConstructor<A>) {\n\t\t// if (assembler_class) {\n\t\tthis._assembler = new assembler_class(this.node);\n\t\t// }\n\t\t// this._shadow_depth_assembler = new ShaderAssemblerDepth()\n\t\t// this._shadow_distance_assembler = new ShaderAssemblerDistance()\n\n\t\t// this.self._init_hierarchy_children_owner();\n\n\t\t// let has_display_flag = false;\n\t\t// if (options['has_display_flag']) {\n\t\t// \thas_display_flag = options['has_display_flag'];\n\t\t// }\n\n\t\t// this.self._init_display_flag({\n\t\t// \thas_display_flag: has_display_flag,\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\n\t\t// this ensures that material re evaluate their uniforms\n\t\t// without having the SOP/Material recook\n\t\t// which can be a killer in an animation\n\t\t// But this should be tweaked so that it can recook all params of a node\n\t\t// this.self.add_post_dirty_hook(this.eval_params_and_assign_uniform_values.bind(this))\n\t\t// - UPDATE: this seems to work at the moment. The only issue is that\n\t\t// the particle system now updates 2x when recreating the shaders\n\t\t// but that's fixed with update_on_dirty\n\t\t// - UPDATE 2: now that the params have been refactored, let's try without this\n\t\t// if (options['update_on_dirty'] != false) {\n\t\t// \tthis.self.add_post_dirty_hook(this.cook_main_if_scene_loaded.bind(this));\n\t\t// }\n\t}\n\tset_assembler_globals_handler(globals_handler: GlobalsBaseController) {\n\t\tconst current_id = this._globals_handler ? this._globals_handler.id() : null;\n\t\tconst new_id = globals_handler ? globals_handler.id() : null;\n\n\t\tif (current_id != new_id) {\n\t\t\tthis._globals_handler = globals_handler;\n\t\t\tthis.set_compilation_required_and_dirty();\n\t\t\tthis._assembler.reset_configs();\n\t\t}\n\t}\n\tget assembler() {\n\t\treturn this._assembler;\n\t}\n\t// get shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\tget globals_handler() {\n\t\treturn this._globals_handler;\n\t}\n\n\t// gltf_supported_material() {\n\t// \treturn this._assembler.constructor.convert_material_to_gltf_supported(this._material);\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tthis._assembler.add_output_params(output_child);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tthis._assembler.add_globals_params(globals_node);\n\t}\n\tallow_attribute_exports() {\n\t\treturn this._assembler.allow_attribute_exports();\n\t}\n\n\ton_create() {\n\t\tconst globals = this.node.create_node('globals');\n\t\tconst output = this.node.create_node('output');\n\n\t\tglobals.ui_data.set_position(new Vector2(-200, 0));\n\t\toutput.ui_data.set_position(new Vector2(200, 0));\n\t}\n\n\t// async compile_if_required() {\n\t// \t// this._recompiled = false;\n\t// \tif (this.compile_required()) {\n\t// \t\t// && !this._param_locked){\n\t// \t\tconst new_material = await this.run_assembler();\n\t// \t\tif (new_material) {\n\t// \t\t\tawait this.node.params.eval_params(this._new_params);\n\t// \t\t\tthis._material = new_material;\n\t// \t\t\t// this._recompiled = true;\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`${this.node.full_path()} failed to generate a material`);\n\t// \t\t}\n\t// \t}\n\t// \tawait this.assign_uniform_values();\n\t// }\n\tset_compilation_required(new_state = true) {\n\t\tthis._compile_required = new_state;\n\t}\n\tset_compilation_required_and_dirty(trigger_node?: BaseGlNodeType) {\n\t\tthis.set_compilation_required();\n\t\tthis.node.set_dirty(trigger_node);\n\t}\n\tcompile_required(): boolean {\n\t\treturn this._compile_required;\n\t}\n\n\t// set_root_nodes(nodes: BaseGlNodeType[]) {\n\t// \tthis.assembler.set_root_nodes(nodes);\n\t// }\n\t// set_node_lines_globals(globals_node: GlobalsGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_globals(globals_node, shader_name);\n\t// }\n\t// set_node_lines_output(output_node: OutputGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_output(output_node, shader_name);\n\t// }\n\t// set_node_lines_attribute(attribute_node: AttributeGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_attribute(attribute_node, shader_name);\n\t// }\n\n\tasync post_compile() {\n\t\t// if (!this.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\t// this.assembler.compile_for_node(this._gl);\n\t\tthis.create_spare_parameters();\n\t\tthis.set_compilation_required(false);\n\t}\n\n\t// private async run_assembler() {\n\t// \tconst output_node = this.find_output_node();\n\t// \tif (output_node) {\n\t// \t\tthis._assembler.set_root_nodes([output_node]);\n\t// \t}\n\t// \tthis.assembler.compile();\n\t// \tconst material = await this._assembler.get_material();\n\t// \tif (material) {\n\t// \t\tthis._shaders_by_name.set(ShaderName.VERTEX, material.vertexShader);\n\t// \t\tthis._shaders_by_name.set(ShaderName.FRAGMENT, material.fragmentShader);\n\n\t// \t\t// assign custom materials\n\t// \t\tconst custom_materials = await this._assembler.get_custom_materials();\n\t// \t\tconst material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t// \t\tmaterial_with_custom_materials.custom_materials = {};\n\t// \t\tcustom_materials.forEach((custom_material, shader_name) => {\n\t// \t\t\tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t// \t\t});\n\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tthis._compile_required = false;\n\t// \treturn material;\n\t// }\n\n\t// find_output_node() {\n\t// \tconst nodes = this.node.nodes_by_type('output');\n\t// \tif (nodes.length > 1) {\n\t// \t\tthis.node.states.error.set('only one output node allowed');\n\t// \t}\n\t// \treturn nodes[0];\n\t// }\n\t// find_attribute_export_nodes() {\n\t// \tconst nodes = this.node.nodes_by_type('attribute');\n\t// \treturn nodes.filter((node) => {\n\t// \t\t// do not use attributes that are used as an input, as export\n\t// \t\t// return (node.used_output_names().length == 0) &&\n\t// \t\treturn node.is_exporting;\n\t// \t});\n\t// }\n\t// add_output_body_line(output_node, shader_name: ShaderName, input_name: string){\n\t// \tconst input = output_node.named_input(input_name)\n\t// \tconst var_input = output_node.variable_for_input(input_name)\n\t// \tconst variable_config = this.variable_config(input_name)\n\t// \tconst default_value = variable_config.default()\n\t// \tconst prefix = variable_config.prefix()\n\t// \tconst suffix = variable_config.suffix()\n\t// \tconst new_var = input ? ThreeToGl.vector3(var_input) : default_value\n\t// \tif(new_var){\n\t// \t\toutput_node.add_body_lines([`${prefix}${new_var}${suffix}`], shader_name)\n\t// \t}\n\t// }\n\t// set_output_node_lines(output_node){\n\t// \tfor(let shader_name of this.shader_names()){\n\t// \t\tconst body_lines = []\n\t// \t\tconst input_names = this.shader_config(shader_name).input_names()\n\t// \t\toutput_node.set_body_lines([], shader_name)\n\t// \t\tif(input_names){\n\t// \t\t\tfor(let input_name of input_names){\n\t// \t\t\t\tthis.add_output_body_line(output_node, shader_name, input_name)\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t// const vertex_body_lines = []\n\t// \t// const fragment_body_lines = []\n\n\t// \t// const named_input_position = this.named_input('position')\n\t// \t// const named_input_point_size = this.named_input('gl_PointSize')\n\t// \t// const named_input_normal = this.named_input('normal')\n\n\t// \t// const var_position = this.variable_for_input('position')\n\t// \t// const var_normal = this.variable_for_input('normal')\n\t// \t// const color = this.variable_for_input('color')\n\t// \t// const alpha = this.variable_for_input('alpha')\n\t// \t// const var_point_size = this.variable_for_input('gl_PointSize')\n\n\t// \t// fragment_body_lines.push( `${this._color_declaration} = ${ThreeToGl.vector3_float(color, alpha)}` )\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \t// const new_position_var = named_input_position ? ThreeToGl.vector3(var_position) : 'vec3( position )'\n\t// \t// vertex_body_lines.push( `vec3 transformed = ${new_position_var}` )\n\n\t// \t// if(this.parent().is_point_material()){\n\t// \t// \tconst new_point_size_var = named_input_point_size ? ThreeToGl.float(var_point_size) : '1.0'\n\t// \t// \tvertex_body_lines.push( `float size2 = size * ${new_point_size_var}` )\n\t// \t// }\n\n\t// \t// if(named_input_normal){\n\t// \t// \tconst new_normal_var = ThreeToGl.vector3(var_normal)\n\t// \t// \tvertex_body_lines.push(`objectNormal = ${new_normal_var}`)\n\t// \t// }\n\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\t// }\n\t// private async eval_params_and_assign_uniform_values() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tif (this._assembler) {\n\t// \t\tawait this.self.eval_all_params();\n\t// \t\tawait this.assign_uniform_values();\n\t// \t}\n\t// }\n\t// private async cook_main_if_scene_loaded() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (this.self.params_referree().length > 0) {\n\t// \t\tawait this.self.cook_main();\n\t// \t}\n\t// \t// this.cook_main_without_inputs()\n\t// }\n\tasync assign_uniform_values() {\n\t\tif (this._assembler) {\n\t\t\tfor (let param_config of this._assembler.param_configs()) {\n\t\t\t\tawait param_config.set_uniform_value(this.node);\n\t\t\t}\n\t\t}\n\t}\n\n\t// process_uniforms(renderer, display_scene, camera, geometry, material, group) {\n\t// \tconst scene_frame = this.scene().frame()\n\n\t// \tconst material_frame = material.uniforms.frame\n\t// \tif(material_frame){ // check needed in case this method is given a post process material\n\t// \t\tmaterial.uniforms.frame.value = scene_frame\n\t// \t}\n\n\t// \tconst custom_materials = material.custom_materials\n\t// \tif(custom_materials){\n\t// \t\tfor(let custom_material_name of Object.keys(custom_materials)){\n\t// \t\t\tconst custom_material = custom_materials[custom_material_name]\n\t// \t\t\tcustom_material.uniforms.frame.value = scene_frame\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// create_material(){\n\t// \tconst template_shader = THREE.ShaderLib.basic\n\n\t// \tconst uniforms = THREE.UniformsUtils.clone( template_shader.uniforms )\n\t// \t// uniforms['frame'] = {\n\t// \t// \ttype: '1f',\n\t// \t// \tvalue: 1\n\t// \t// }\n\n\t// \tconst material = new THREE.ShaderMaterial({\n\t// \t\t// vertexColors: THREE.VertexColors,\n\t// \t\t// side: THREE.FrontSide,\n\t// \t\t// transparent: true,\n\t// \t\t// fog: true,\n\t// \t\t// lights: false,\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: template_shader.vertexShader,\n\t// \t\tfragmentShader: template_shader.fragmentShader\n\t// \t})\n\t// \tthrow \"wtf\"\n\t// \treturn material\n\t// }\n\tcreate_spare_parameters() {\n\t\tconst current_spare_param_names: string[] = this.node.params.spare_names;\n\t\tconst param_configs = this._assembler.param_configs();\n\t\tconst assembler_param_names = param_configs.map((c) => c.name);\n\t\t// TODO: also remove the params that change type\n\t\tconst spare_param_names_to_add = lodash_difference(assembler_param_names, current_spare_param_names);\n\t\tconst spare_param_names_to_remove = lodash_difference(current_spare_param_names, assembler_param_names);\n\t\t// this._new_params = [];\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\t// check that param_names_to_add does not include any currently existing param names (that are not spare)\n\t\tconst current_param_names = this.node.params.names;\n\t\tconst spare_params_with_same_name_as_params = lodash_intersection(\n\t\t\tspare_param_names_to_add,\n\t\t\tcurrent_param_names\n\t\t);\n\t\tif (spare_params_with_same_name_as_params.length > 0) {\n\t\t\tconst error_message = `${this.node.full_path()} attempts to create spare params called '${spare_params_with_same_name_as_params.join(\n\t\t\t\t', '\n\t\t\t)}' with same name as params`;\n\t\t\tconsole.warn(error_message);\n\t\t\tthis.node.states.error.set(error_message);\n\t\t}\n\n\t\tspare_param_names_to_remove.forEach((param_name) => {\n\t\t\t// store the param data, in case it gets recreated later\n\t\t\t// this allows expressions to be kept in memory\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param);\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tthis._deleted_params_data.set(param.name, params_data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t});\n\n\t\t// this.within_param_folder('spare_params', () => {\n\t\tfor (let param_config of param_configs) {\n\t\t\tif (spare_param_names_to_add.indexOf(param_config.name) >= 0) {\n\t\t\t\t// TODO: shouldn't it be cook: false ??\n\t\t\t\t// as there is no need to cook the node if I'm only changing the uniform\n\t\t\t\t// unless maybe for textures?\n\t\t\t\t// but if cook is false, there is no reason for it to be updated\n\t\t\t\tconst options = lodash_merge(param_config.param_options, {spare: true, cook: true});\n\n\t\t\t\t// const param = this.node.add_param(\n\t\t\t\t// \tparam_config.type,\n\t\t\t\t// \tparam_config.name,\n\t\t\t\t// \tparam_config.default_value,\n\t\t\t\t// \toptions\n\t\t\t\t// );\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_config.name,\n\t\t\t\t\ttype: param_config.type,\n\t\t\t\t\tinit_value: param_config.default_value as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (param) {\n\t\t\t\t// \t// restore saved state, like expressions\n\t\t\t\t// \tconst param_data = this._deleted_params_data.get(param.name);\n\t\t\t\t// \tif (param_data) {\n\t\t\t\t// \t\t// TODO: typescript\n\t\t\t\t// \t\t// JsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t// looks like there are still some cases where the expression are not recreated\n\t\t\t\t// \t\t// so commenting this out now\n\t\t\t\t// \t\t// delete this._deleted_params_data[param.name()]\n\t\t\t\t// \t}\n\n\t\t\t\t// \tthis._new_params.push(param);\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tthis.node.params.update_params(params_update_options);\n\t\t// if (spare_param_names_to_add.length > 0 || spare_param_names_to_remove.length > 0) {\n\t\t// \tthis.node.params.post_create_spare_params();\n\t\t// \tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t// }\n\t}\n}\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\n// import {Definition} from '../../Definition/_Module';\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig';\n// import {BaseGlNodeType} from '../../_Base';\nimport {VaryingGLDefinition, AttributeGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\n// import {TypeAssert} from '../../../../poly/Assert';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nconst VARIABLE_CONFIG_DEFAULT_BY_NAME: Dictionary<string> = {\n\tposition: 'vec3( position )',\n};\n\nexport class GlobalsGeometryHandler extends GlobalsBaseController {\n\tstatic PRE_DEFINED_ATTRIBUTES = [\n\t\t'position',\n\t\t'color',\n\t\t'normal',\n\t\t'uv',\n\t\t'uv2',\n\t\t'morphTarget0',\n\t\t'morphTarget1',\n\t\t'morphTarget2',\n\t\t'morphTarget3',\n\t\t'skinIndex',\n\t\t'skinWeight',\n\t];\n\n\tstatic IF_RULE = {\n\t\tuv:\n\t\t\t'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',\n\t};\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (!connection_point) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst gl_type = connection_point.type;\n\t\tconst definition = new VaryingGLDefinition(globals_node, gl_type, var_name);\n\n\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, definition);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\t\t// definitions_by_shader_name.get(shader_name)!.push(definition);\n\t\tconst assembler = globals_node.material_node?.assembler_controller.assembler;\n\t\tif (!assembler) {\n\t\t\treturn;\n\t\t}\n\t\tconst shader_config = assembler.shader_config(shaders_collection_controller.current_shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst body_line = `${var_name} = ${gl_type}(${output_name})`;\n\t\tfor (let dependency of dependencies) {\n\t\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t// MapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\tshaders_collection_controller.add_definitions(globals_node, [definition], dependency);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line], dependency);\n\t\t}\n\t\tif (dependencies.length == 0) {\n\t\t\t// body_lines.push(body_line);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n\n\tstatic variable_config_default(variable_name: string): string | undefined {\n\t\treturn VARIABLE_CONFIG_DEFAULT_BY_NAME[variable_name];\n\t}\n\tvariable_config_default(variable_name: string): string | undefined {\n\t\treturn GlobalsGeometryHandler.variable_config_default(variable_name);\n\t}\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \treturn null\n\t// }\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n\n\tstatic read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined {\n\t\tif (GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attrib_name) < 0) {\n\t\t\tshaders_collection_controller.add_definitions(\n\t\t\t\tnode,\n\t\t\t\t[new AttributeGLDefinition(node, gl_type, attrib_name)],\n\t\t\t\tShaderName.VERTEX\n\t\t\t);\n\t\t} else {\n\t\t\t// const if_rule = GlobalsGeometryHandler.IF_RULE[attrib_name]\n\t\t\t// if(if_rule){\n\t\t\t// \tconst definition = new Definition.Attribute(node, gl_type, attrib_name)\n\t\t\t// \tdefinition.set_if_rule(if_rule)\n\t\t\t// \tnode.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\n\t\t// if (!shader_name) {\n\t\t// \tthrow 'no shader name';\n\t\t// }\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX: {\n\t\t\t\treturn attrib_name;\n\t\t\t}\n\t\t\tcase ShaderName.FRAGMENT: {\n\t\t\t\t// let's assume it can only be an attribute gl node\n\t\t\t\tif (!(node instanceof AttributeGlNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst var_name = 'varying_' + node.gl_var_name(node.output_name);\n\t\t\t\tconst varying_definition = new VaryingGLDefinition(node, gl_type, var_name);\n\n\t\t\t\tconst definitions_by_shader_name: Map<ShaderName, VaryingGLDefinition[]> = new Map();\n\t\t\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tdefinitions_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\t// {\n\t\t\t\t// \t[ShaderName.VERTEX]: [],\n\t\t\t\t// \t[ShaderName.FRAGMENT]: [],\n\t\t\t\t// };\n\t\t\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t\t\t// body_lines_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tbody_lines_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, varying_definition);\n\n\t\t\t\tconst set_varying_body_line = `${var_name} = ${gl_type}(${attrib_name})`;\n\n\t\t\t\tconst shader_config = node.material_node?.assembler_controller.assembler.shader_config(shader_name);\n\t\t\t\tif (shader_config) {\n\t\t\t\t\tconst dependencies = shader_config.dependencies();\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, varying_definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, set_varying_body_line);\n\t\t\t\t\t}\n\t\t\t\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_definitions(node, definitions, shader_name);\n\t\t\t\t\t});\n\t\t\t\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(node, body_lines, shader_name);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn var_name;\n\t\t\t}\n\t\t}\n\t\t// TypeAssert.unreachable(shader_name);\n\n\t\t// const shader_name = node._shader_name // TODO: this is hack\n\t\t// const varying_definition = new Definition.Varying(node, gl_type, attrib_name)\n\t\t// const var_name = varying_definition.name()\n\t\t// definitions_by_shader_name[shader_name].push(varying_definition)\n\t\t// const shader_config = node.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\t\t// const body_line = `${var_name} = ${gl_type}(${attrib_name})`\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(varying_definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// // if(dependencies.length == 0){\n\t\t// \t// body_lines.push(body_line)\n\t\t// \tnode.add_body_lines([body_line])\n\t\t// // }\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tnode.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tnode.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// node.add_body_lines(body_lines)\n\t}\n\thandle_attribute_node(\n\t\tnode: AttributeGlNode,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n}\n","import {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\nimport {NodeConnection} from '../../utils/connections/NodeConnection';\n\ntype IONameFunction = (index: number) => string;\ntype ExpectedConnectionTypesFunction = () => ConnectionPointType[];\n\nexport class GlConnectionsController {\n\tprivate _input_name_function: IONameFunction = (index: number) => {\n\t\treturn `in${index}`;\n\t};\n\tprivate _output_name_function: IONameFunction = (index: number) => {\n\t\treturn index == 0 ? 'val' : `val${index}`;\n\t};\n\t// private _default_input_type: ConnectionPointType = ConnectionPointType.FLOAT;\n\tprivate _expected_input_types_function: ExpectedConnectionTypesFunction = () => {\n\t\tconst type = this.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t};\n\tprivate _expected_output_types_function: ExpectedConnectionTypesFunction = () => {\n\t\treturn [this._expected_input_types_function()[0]];\n\t};\n\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tset_input_name_function(func: IONameFunction) {\n\t\tthis._input_name_function = func;\n\t}\n\tset_output_name_function(func: IONameFunction) {\n\t\tthis._output_name_function = func;\n\t}\n\t// set_default_input_type(type: ConnectionPointType) {\n\t// \tthis._default_input_type = type;\n\t// }\n\tset_expected_input_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_input_types_function = func;\n\t}\n\tset_expected_output_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_output_types_function = func;\n\t}\n\n\toutput_name(index: number) {\n\t\treturn this._output_name_function(index);\n\t}\n\n\tprivate _update_signature_if_required_bound = this.update_signature_if_required.bind(this);\n\tprivate _initialized: boolean = false;\n\tinitialize_node() {\n\t\tif (this._initialized) {\n\t\t\tconsole.warn('already initialized', this.node);\n\t\t\treturn;\n\t\t}\n\t\tthis._initialized = true;\n\n\t\tthis.node.io.inputs.add_on_set_input_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.add_on_scene_load_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\tthis.node.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\n\tupdate_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.node.lifecycle.creation_completed || !this._connections_match_inputs()) {\n\t\t\tthis.update_connection_types();\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis.make_successors_update_signatures();\n\t\t}\n\t}\n\t// used when a node changes its signature, adn the output nodes need to adapt their own signatures\n\tprivate make_successors_update_signatures() {\n\t\tfor (let successor of this.node.graph_all_successors()) {\n\t\t\tconst gl_node = successor as BaseGlNodeType;\n\t\t\tif (gl_node.gl_connections_controller) {\n\t\t\t\tgl_node.gl_connections_controller.update_signature_if_required(this.node);\n\t\t\t}\n\t\t}\n\t\t// this.node.io.connections\n\t\t// \t.output_connections()\n\t\t// \t.map((c) => c.node_dest)\n\t\t// \t.forEach((o) => {\n\t\t// \t\to.set_dirty(this.node);\n\t\t// \t});\n\t}\n\n\tupdate_connection_types() {\n\t\tconst set_dirty = false;\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tconst named_input_connections = expected_input_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._input_name_function(i), type);\n\t\t});\n\t\tconst named_outputs = expected_output_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._output_name_function(i), type);\n\t\t});\n\n\t\tthis.node.io.inputs.set_named_input_connection_points(named_input_connections);\n\t\tthis.node.io.outputs.set_named_output_connection_points(named_outputs, set_dirty);\n\t\tthis.node.spare_params_controller.create_spare_parameters();\n\t}\n\n\tprotected _connections_match_inputs(): boolean {\n\t\tconst current_input_types = this.node.io.inputs.named_input_connection_points.map((c) => c.type);\n\t\tconst current_output_types = this.node.io.outputs.named_output_connection_points.map((c) => c.type);\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tif (expected_input_types.length != current_input_types.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expected_output_types.length != current_output_types.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < current_input_types.length; i++) {\n\t\t\tif (current_input_types[i] != expected_input_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < current_output_types.length; i++) {\n\t\t\tif (current_output_types[i] != expected_output_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// protected input_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\t// protected output_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\n\tfirst_input_connection_type(): ConnectionPointType | undefined {\n\t\tconst connections = this.node.io.connections.input_connections();\n\t\tif (connections) {\n\t\t\tconst first_connection = connections[0];\n\t\t\tif (first_connection) {\n\t\t\t\treturn this.connection_type_from_connection(first_connection);\n\t\t\t}\n\t\t}\n\t}\n\tconnection_type_from_connection(connection: NodeConnection): ConnectionPointType {\n\t\tconst node_src = connection.node_src;\n\t\tconst output_index = connection.output_index;\n\t\tconst node_src_output_connection = node_src.io.outputs.named_output_connection_points[output_index];\n\t\treturn node_src_output_connection.type;\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {\n\tUVMapping,\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tEquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping,\n\tSphericalReflectionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tMirroredRepeatWrapping,\n\tLinearFilter,\n\tNearestFilter,\n\tNearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter,\n\tLinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter,\n\t// UnsignedByteType,\n\t// ByteType,\n\t// ShortType,\n\t// UnsignedShortType,\n\t// IntType,\n\t// UnsignedIntType,\n\t// FloatType,\n\t// HalfFloatType,\n\t// UnsignedShort4444Type,\n\t// UnsignedShort5551Type,\n\t// UnsignedShort565Type,\n\t// UnsignedInt248Type,\n\t// AlphaFormat,\n\t// RGBFormat,\n\t// RGBAFormat,\n\t// LuminanceFormat,\n\t// LuminanceAlphaFormat,\n\t// RGBEFormat,\n\t// DepthFormat,\n\t// DepthStencilFormat,\n\t// LinearEncoding,\n\t// sRGBEncoding,\n\t// GammaEncoding,\n\t// RGBEEncoding,\n\t// LogLuvEncoding,\n\t// RGBM7Encoding,\n\t// RGBM16Encoding,\n\t// RGBDEncoding,\n\t// BasicDepthPacking,\n\t// RGBADepthPacking,\n} from 'three/src/constants';\nimport {Texture} from 'three/src/textures/Texture';\n// const THREE = {\n// \tTexture,\n// \tUVMapping,\n// \tVideoTexture,\n// \tCubeReflectionMapping,\n// \tCubeRefractionMapping,\n// \tEquirectangularReflectionMapping,\n// \tEquirectangularRefractionMapping,\n// \tSphericalReflectionMapping,\n// \tCubeUVReflectionMapping,\n// \tCubeUVRefractionMapping,\n// \tClampToEdgeWrapping,\n// \tRepeatWrapping,\n// \tMirroredRepeatWrapping,\n// \tLinearFilter,\n// \tNearestFilter,\n// \tNearestMipMapNearestFilter,\n// \tNearestMipMapLinearFilter,\n// \tLinearMipMapNearestFilter,\n// \tLinearMipMapLinearFilter,\n// \tUnsignedByteType,\n// \tByteType,\n// \tShortType,\n// \tUnsignedShortType,\n// \tIntType,\n// \tUnsignedIntType,\n// \tFloatType,\n// \tHalfFloatType,\n// \tUnsignedShort4444Type,\n// \tUnsignedShort5551Type,\n// \tUnsignedShort565Type,\n// \tUnsignedInt248Type,\n// \tAlphaFormat,\n// \tRGBFormat,\n// \tRGBAFormat,\n// \tLuminanceFormat,\n// \tLuminanceAlphaFormat,\n// \tRGBEFormat,\n// \tDepthFormat,\n// \tDepthStencilFormat,\n// \tLinearEncoding,\n// \tsRGBEncoding,\n// \tGammaEncoding,\n// \tRGBEEncoding,\n// \tLogLuvEncoding,\n// \tRGBM7Encoding,\n// \tRGBM16Encoding,\n// \tRGBDEncoding,\n// \tBasicDepthPacking,\n// \tRGBADepthPacking,\n// };\n// import lodash_last from 'lodash/last';\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\nimport {CoreTextureLoader} from '../../../core/loader/Texture';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\n// this used to be named file_in, but I can't recall the decision of not calling it simply 'file'\n// so renaming it back to file for now\n\nconst MAPPINGS = [\n\t{UVMapping},\n\t{CubeReflectionMapping},\n\t{CubeRefractionMapping},\n\t{EquirectangularReflectionMapping},\n\t{EquirectangularRefractionMapping},\n\t{SphericalReflectionMapping},\n\t{CubeUVReflectionMapping},\n\t{CubeUVRefractionMapping},\n];\n\nconst WRAPPINGS: Dictionary<number>[] = [{ClampToEdgeWrapping}, {RepeatWrapping}, {MirroredRepeatWrapping}];\n\nconst MAG_FILTERS: Dictionary<number>[] = [{LinearFilter}, {NearestFilter}];\nconst MIN_FILTERS: Dictionary<number>[] = [\n\t{NearestFilter},\n\t{NearestMipMapNearestFilter},\n\t{NearestMipMapLinearFilter},\n\t{LinearFilter},\n\t{LinearMipMapNearestFilter},\n\t{LinearMipMapLinearFilter},\n];\n\n// const TYPES = [\n// \t\"UnsignedByteType\",\n// \t\"ByteType\",\n// \t\"ShortType\",\n// \t\"UnsignedShortType\",\n// \t\"IntType\",\n// \t\"UnsignedIntType\",\n// \t\"FloatType\",\n// \t\"HalfFloatType\",\n// \t\"UnsignedShort4444Type\",\n// \t\"UnsignedShort5551Type\",\n// \t\"UnsignedShort565Type\",\n// \t\"UnsignedInt248Type\"\n// ];\n\n// const FORMATS = [\n// \t\"AlphaFormat\",\n// \t\"RGBFormat\",\n// \t\"RGBAFormat\",\n// \t\"LuminanceFormat\",\n// \t\"LuminanceAlphaFormat\",\n// \t\"RGBEFormat\",\n// \t\"DepthFormat\",\n// \t\"DepthStencilFormat\"\n// ];\n\n// const ENCODINGS = [\n// \t\"LinearEncoding\",\n// \t\"sRGBEncoding\",\n// \t\"GammaEncoding\",\n// \t\"RGBEEncoding\",\n// \t\"LogLuvEncoding\",\n// \t\"RGBM7Encoding\",\n// \t\"RGBM16Encoding\",\n// \t\"RGBDEncoding\",\n// \t\"BasicDepthPacking\",\n// \t\"RGBADepthPacking\"\n// ];\n\ninterface AttribMapping {\n\tmapping: string;\n\twrapS: string;\n\twrapT: string;\n\tminFilter: string;\n\tmagFilter: string;\n}\nconst ATTRIB_MAPPING_KEYS: Array<keyof AttribMapping> = ['mapping', 'wrapS', 'wrapT', 'minFilter', 'magFilter'];\nconst ATTRIB_MAPPING: AttribMapping = {\n\tmapping: 'mapping',\n\twrapS: 'wrap_s',\n\twrapT: 'wrap_t',\n\tminFilter: 'min_filter',\n\tmagFilter: 'mag_filter',\n\t// type: 'type',\n\t// encoding: 'encoding'\n\t// format: 'format',\n};\n\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass FileCopParamsConfig extends NodeParamsConfig {\n\t// video_time = ParamConfig.FLOAT(1);\n\turl = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t\tdesktop_browse: {file_type: 'texture'},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileCopNode.PARAM_CALLBACK_reload(node as FileCopNode, param);\n\t\t},\n\t});\n\tmapping = ParamConfig.INTEGER(UVMapping, {\n\t\tmenu: {\n\t\t\tentries: MAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_s = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_t = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmag_filter = ParamConfig.INTEGER(Object.values(MAG_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MAG_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmin_filter = ParamConfig.INTEGER(Object.values(MIN_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MIN_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new FileCopParamsConfig();\n\nexport class FileCopNode extends TypedCopNode<FileCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\t// @ParamF('video_time') _param_video_time: number;\n\t// @ParamS('url') _param_url: string;\n\tprivate _previous_param_url: string | undefined;\n\tprivate _video: HTMLVideoElement | undefined;\n\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\t// _param_video_time_param: BaseParam\n\tprivate _texture_loader: CoreTextureLoader | undefined;\n\n\tstatic readonly VIDEO_TIME_PARAM_NAME = 'video_time';\n\tstatic readonly DEFAULT_NODE_PATH = {\n\t\tUV: '/COP/file_uv',\n\t\tENV_MAP: '/COP/env_map',\n\t};\n\n\t// initialize_node() {\n\t// \t// this.io.inputs.set_count_to_zero();\n\t// }\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT, {\n\t// \t// \tdesktop_browse: {file_type: 'texture'},\n\t// \t// });\n\t// \t// this.add_param(ParamType.BUTTON, 'reload', null, {\n\t// \t// \tcallback: this._reload.bind(this),\n\t// \t// });\n\t// \t// this.add_param(ParamType.FLOAT, 'video_time', 0, {range: [0, 10]})\n\t// \t// this.add_param(ParamType.INTEGER, 'mapping', UVMapping as number, {\n\t// \t// \tmenu: {\n\t// \t// \t\tentries: MAPPINGS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// for (let wrap_name of ['wrap_s', 'wrap_t']) {\n\t// \t// \tconst wrap = Object.values(WRAPPINGS[0])[0] as number;\n\t// \t// \tthis.add_param(ParamType.INTEGER, wrap_name, wrap, {\n\t// \t// \t\tmenu: {\n\t// \t// \t\t\t// type: 'radio',\n\t// \t// \t\t\tentries: WRAPPINGS.map((m) => {\n\t// \t// \t\t\t\treturn {\n\t// \t// \t\t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t\t};\n\t// \t// \t\t\t}),\n\t// \t// \t\t},\n\t// \t// \t});\n\t// \t// }\n\t// \t// const mag_filter = Object.values(MAG_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'mag_filter', mag_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MAG_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// const min_filter: number = Object.values(MIN_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'min_filter', min_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MIN_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// TODO: to be added when I have some level of control\n\t// \t// for now, the type attribute overrides what piz_compressed.exr creates\n\t// \t// which in turns fucks up with the env_map\n\t// \t// advanced\n\t// \t// this.add_param(ParamType.TOGGLE, 'advanced', 0)\n\t// \t// this.add_param(ParamType.INTEGER, 'type', THREE[TYPES[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: TYPES.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'format', THREE[FORMATS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: FORMATS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'encoding', THREE[ENCODINGS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: ENCODINGS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// }\n\n\tasync cook() {\n\t\tif (this._is_static_image_url(this.pv.url)) {\n\t\t\tawait this.cook_for_image();\n\t\t} else {\n\t\t\tawait this.cook_for_video();\n\t\t}\n\t}\n\n\tprivate _is_static_image_url(url: string) {\n\t\treturn true;\n\t}\n\n\tprivate async cook_for_image() {\n\t\tconst texture = await this._load_texture(this.pv.url);\n\n\t\tif (texture) {\n\t\t\tthis._update_texture_params(texture);\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.clear_texture();\n\t\t}\n\t}\n\n\tprivate async cook_for_video() {\n\t\tif (this._param_url_changed()) {\n\t\t\tconst texture = await this._load_texture(this.pv.url);\n\t\t\t// if (texture) {\n\t\t\t// \tthis._texture = texture;\n\t\t\t// }\n\n\t\t\tif (texture) {\n\t\t\t\tthis._add_video_spare_params_if_required(texture);\n\t\t\t}\n\t\t\tthis._previous_param_url = this.pv.url;\n\n\t\t\tthis._set_video_current_time();\n\n\t\t\tif (texture) {\n\t\t\t\tthis._update_texture_params(texture);\n\t\t\t\tthis.set_texture(texture);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\t// this._set_video_current_time();\n\t\t\t// this._update_texture_params();\n\t\t\t// if (texture?.needsUpdate) {\n\t\t\t// \tthis.set_texture(texture);\n\t\t\t// } else {\n\t\t\t// \tthis.cook_controller.end_cook();\n\t\t\t// }\n\t\t}\n\t}\n\n\tresolved_url() {\n\t\treturn this.pv.url;\n\t}\n\n\tprivate _update_texture_params(texture: Texture) {\n\t\t// const keys = Object.keys(ATTRIB_MAPPING) as keyof AttribMapping\n\t\tfor (let texture_attrib of ATTRIB_MAPPING_KEYS) {\n\t\t\tconst param_name = ATTRIB_MAPPING[texture_attrib];\n\t\t\tconst param_value = this.params.float(param_name);\n\t\t\t// const texture_attrib = ATTRIB_MAPPING[attrib];\n\n\t\t\tif (param_value != null && texture) {\n\t\t\t\tif (texture[texture_attrib] != param_value) {\n\t\t\t\t\ttexture[texture_attrib] = param_value;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_reload(node: FileCopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\tthis._previous_param_url = undefined;\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_successors_dirty();\n\t\t// this.set_dirty()\n\t}\n\n\tprivate _set_video_current_time() {\n\t\tif (this._video) {\n\t\t\tif (this.params.has('video_time')) {\n\t\t\t\tthis._video.currentTime = this.params.float('video_time');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_video_spare_params_if_required(texture: Texture | VideoTexture | null) {\n\t\tif (texture) {\n\t\t\tconst is_video = texture.constructor == VideoTexture;\n\t\t\tif (is_video) {\n\t\t\t\tthis._video = texture.image;\n\t\t\t\tif (this._video) {\n\t\t\t\t\tif (!this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\t\t\t\tconst duration = this._video.duration;\n\n\t\t\t\t\t\tthis.add_param(ParamType.FLOAT, FileCopNode.VIDEO_TIME_PARAM_NAME, '$T', {\n\t\t\t\t\t\t\tspare: true,\n\t\t\t\t\t\t\tcook: true,\n\t\t\t\t\t\t\trange: [0, duration],\n\t\t\t\t\t\t\trange_locked: [true, true],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._remove_spare_params();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remove_spare_params();\n\t\t}\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tif (this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\tthis.params.update_params({names_to_delete: [FileCopNode.VIDEO_TIME_PARAM_NAME]});\n\t\t\t// this.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\n\tprivate _param_url_changed(): boolean {\n\t\treturn this._previous_param_url != this.pv.url;\n\t}\n\n\tprivate async _load_texture(url: string) {\n\t\tlet texture: Texture | VideoTexture | null = null;\n\t\tconst param = this.params.get('url');\n\t\tif (url && param) {\n\t\t\tthis._texture_loader = this._texture_loader || new CoreTextureLoader(this, param);\n\t\t\t// const ext = lodash_last(url.split('.')).toLowerCase()\n\t\t\ttry {\n\t\t\t\ttexture = await this._texture_loader.load_texture_from_url_or_op(url);\n\t\t\t} catch (e) {\n\t\t\t\t//console.log('FAIL');\n\t\t\t}\n\t\t\t// if(texture){\n\t\t\t// \tcallback(texture)\n\t\t\t// } else {\n\t\t\tif (!texture) {\n\t\t\t\tthis.states.error.set(`could not load texture '${url}'`);\n\t\t\t}\n\t\t\t// }).catch(error=>{\n\t\t\t// \tthis.self.set_error(`could not load texture ${url} (${error})`);\n\t\t\t// })\n\t\t} else {\n\t\t\tthis.states.error.set('not url given to Mat/Base._load_texture');\n\t\t}\n\t\treturn texture;\n\t}\n}\n","// import {Vector3} from 'three/src/math/Vector3';\n// import {Texture} from 'three/src/textures/Texture';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n// const THREE = {Color, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Raycaster, Texture, Vector3}\n// import lodash_isNaN from 'lodash/isNaN'\n// import lodash_sum from 'lodash/sum'\n// import {BaseParam} from '../../../../../../Engine/Param/_Base'\n// import {BaseNodePostProcess} from '../../../../../../Engine/Node/PostProcess/_Base'\nimport {BaseCameraObjNodeType} from '../../../_BaseCamera';\nimport {BaseMatNodeType} from '../../../../mat/_Base';\n// import {NodeContext} from '../../../../../poly/NodeContext';\n// import {ParamType} from '../../../../../poly/ParamType';\n// import {EffectComposer} from '../../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer'\n// import {RenderPass} from '../../../../../../../modules/three/examples/jsm/postprocessing/RenderPass'\n\n// import {File} from '../../../../../../Engine/Node/Cop/File'\n\n// import {ScreenQuad} from '../Camera/ScreenQuad'\nimport {NodeContext} from '../../../../../poly/NodeContext';\n\nimport {ParamConfig} from '../../../../utils/params/ParamsConfig';\nexport function CameraBackgroundParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tbackground = ParamConfig.FOLDER();\n\t\tuse_background = ParamConfig.BOOLEAN(0);\n\t\tuse_material = ParamConfig.BOOLEAN(0, {\n\t\t\tvisible_if: {use_background: true},\n\t\t});\n\t\tbackground_color = ParamConfig.COLOR([0, 0, 0], {\n\t\t\tvisible_if: {use_background: true, use_material: false},\n\t\t});\n\t\tbackground_material = ParamConfig.OPERATOR_PATH('', {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t\tnode_selection: {context: NodeContext.MAT},\n\t\t\tdependent_on_found_node: false,\n\t\t});\n\t\tbackground_ratio = ParamConfig.FLOAT(1, {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t});\n\t};\n}\n\nexport class BaseBackgroundController {\n\t// private _param_use_background: boolean;\n\t// private _param_use_material: boolean;\n\t// private _param_background_color: Color;\n\t// private _param_background_material: string;\n\t// private _param_background_ratio: number;\n\n\tprivate _screen_quad: Mesh | undefined;\n\tprivate _screen_quad_flat_material: MeshBasicMaterial | undefined;\n\n\tprotected _bg_raycaster = new Raycaster();\n\n\tconstructor(protected node: BaseCameraObjNodeType) {}\n\n\tget screen_quad() {\n\t\treturn (this._screen_quad = this._screen_quad || this._create_screen_quad()); // new ScreenQuad()\n\t}\n\tprivate _create_screen_quad() {\n\t\tconst size = 2; // better than 1 for color, as the edges can be visible if canvas ratio extreme\n\t\tconst segments = 1;\n\t\tconst geometry = new PlaneBufferGeometry(size, size, segments, segments);\n\t\tconst quad = new Mesh(geometry);\n\t\tthis.node.object.add(quad);\n\t\treturn quad;\n\t}\n\tscreen_quad_flat_material() {\n\t\treturn (this._screen_quad_flat_material = this._screen_quad_flat_material || new MeshBasicMaterial());\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('background', () => {\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_background', 0);\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_material', 0, {\n\t\t// \tvisible_if: {use_background: true},\n\t\t// });\n\t\t// this.node.add_param(ParamType.COLOR, 'background_color', [0, 0, 0], {\n\t\t// \tvisible_if: {use_background: true, use_material: false},\n\t\t// });\n\t\t// this.node.add_param(ParamType.OPERATOR_PATH, 'background_material', '', {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// \tnode_selection: {context: NodeContext.MAT},\n\t\t// \tdependent_on_found_node: false,\n\t\t// });\n\t\t// this.node.add_param(ParamType.FLOAT, 'background_ratio', 1, {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// });\n\t\t// });\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_color', 1 )\n\t\t// this.self.add_param( ParamType.COLOR, 'background_color', [0,0,0], {\n\t\t// \tvisible_if: {use_background_color: 1}\n\t\t// })\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_image', 0 )\n\t\t// this.self.add_param( ParamType.OPERATOR_PATH, 'background_image', File.DEFAULT_NODE_PATH.UV, {\n\t\t// \tvisible_if: {use_background_image: true},\n\t\t// \tnode_selection: {context: NodeContext.COP}\n\t\t// } )\n\t}\n\n\tget use_background(): boolean {\n\t\treturn this.node.params.boolean('use_background');\n\t}\n\tget use_background_material(): boolean {\n\t\treturn this.use_background && this.node.params.boolean('use_material');\n\t}\n\tget use_background_color(): boolean {\n\t\treturn this.use_background && !this.node.params.boolean('use_material');\n\t}\n\tget background_color(): Color | null {\n\t\tif (this.use_background_color) {\n\t\t\treturn this.node.params.color('background_color');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t// background_image_url(){\n\t// \tif(this._param_use_background_image){\n\t// \t\t// this.param('background_image').mark_as_referencing_asset(this._param_background_image)\n\t// \t\t// return this._param_background_image\n\t// \t\treturn this._background_image_url\n\t// \t}\n\t// }\n\t// background_texture(){\n\t// \tif(this._param_use_background_image){\n\t// \t\treturn this._background_texture\n\t// \t}\n\t// }\n\tprotected update_screen_quad() {}\n\tasync update() {\n\t\tif (this.use_background) {\n\t\t\tthis.update_screen_quad();\n\n\t\t\tawait this.update_background_color();\n\t\t\tif (this.use_background_material) {\n\t\t\t\tawait this.update_background_material();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._screen_quad) {\n\t\t\t\tthis.node.object.remove(this._screen_quad);\n\t\t\t}\n\t\t}\n\n\t\t// if(this._param_use_background_image){\n\t\t// \tconst bg_node = this.self.param('background_image').found_node();\n\t\t// \tif(bg_node){\n\t\t// \t\tconst container = await bg_node.request_container();\n\t\t// \t\tthis._background_texture = container.core_content()\n\t\t// \t\t// this._background_image_url = bg_node.resolved_url()\n\t\t// \t} else {\n\t\t// \t\tthis._background_texture = null\n\t\t// \t}\n\t\t// } else {\n\t\t// \tthis._background_texture = null\n\t\t// }\n\t}\n\tprivate async update_background_color() {\n\t\tconst material = this.screen_quad_flat_material();\n\t\tmaterial.color = this.node.pv.background_color;\n\t\tthis.screen_quad.material = material;\n\t}\n\n\tprivate async update_background_material() {\n\t\tconst bg_node = this.node.p.background_material.found_node() as BaseMatNodeType;\n\t\tif (bg_node) {\n\t\t\tawait bg_node.request_container();\n\t\t\tconst material = bg_node.material;\n\t\t\tthis.screen_quad.material = material;\n\t\t\t// this.screen_quad().material.uniforms.uTexture.value = texture\n\t\t} else {\n\t\t\tthis.node.states.error.set('bg node not found');\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\nimport {TypedParam} from './_Base';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport abstract class TypedMultipleParam<T extends ParamType> extends TypedParam<T> {\n\tprivate _components_contructor = FloatParam;\n\tprotected _components!: FloatParam[];\n\tget components() {\n\t\treturn this._components;\n\t}\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default() {\n\t\tfor (let c of this.components) {\n\t\t\tif (!c.is_default) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._components.map((c) => c.raw_input) as ParamInitValueSerializedTypeMap[T];\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\n\tinit_components() {\n\t\tif (this._components != null) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = 0;\n\t\tthis._components = new Array(this.component_names.length);\n\t\tfor (let component_name of this.component_names) {\n\t\t\tconst component = new this._components_contructor(this.scene); //, `${this.name}${name}`);\n\t\t\tlet default_val;\n\t\t\tif (lodash_isArray(this._default_value)) {\n\t\t\t\tdefault_val = this._default_value[index];\n\t\t\t} else {\n\t\t\t\tdefault_val = (this._default_value as any)[component_name];\n\t\t\t}\n\t\t\tcomponent.options.copy(this.options);\n\t\t\tcomponent.set_init_value(default_val);\n\n\t\t\t// component.set_scene(this.scene);\n\t\t\tcomponent.set_name(`${this.name}${component_name}`);\n\t\t\tcomponent.set_parent_param(this);\n\n\t\t\tthis.add_graph_input(component);\n\t\t\t// component.initialize();\n\t\t\tthis._components[index] = component;\n\t\t\tindex++;\n\t\t}\n\t\t// this.compute();\n\t}\n\n\tprotected async process_computation(): Promise<void> {\n\t\tawait this.compute_components();\n\t\tthis.set_value_from_components();\n\t}\n\tset_value_from_components() {}\n\t// set_raw_input_from_components() {}\n\n\thas_expression() {\n\t\tfor (let c of this.components) {\n\t\t\tif (c.expression_controller?.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async compute_components() {\n\t\tconst components = this.components;\n\t\t// const component_evaluation_states = lodash_map(components, ()=> false);\n\t\t// const expected_values_count = components.length;\n\t\t// const component_values = [];\n\t\t// let component;\n\t\t// return lodash_each(this.components(), (component, index)=> {\n\t\tconst promises = [];\n\t\tfor (let c of components) {\n\t\t\tif (c.is_dirty) {\n\t\t\t\tpromises.push(c.compute()); //component_value=> {\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\t// component_values[index] = component_value;\n\t\t// component_evaluation_states[index] = true;\n\t\t// const evaluated_values_count = lodash_compact(component_evaluation_states).length;\n\t\t// check if all components have been evaluated succesfully\n\t\t// if (evaluated_values_count === expected_values_count) {\n\t\tthis.remove_dirty_state();\n\t\t// return component_values;\n\t\t// }\n\t\t// });\n\t\t// }\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (!lodash_isArray(raw_input)) {\n\t\t\tconst number_or_string = raw_input as number | string;\n\t\t\tconst raw_input_wrapped_in_array: StringOrNumber[] = this.components.map(() => number_or_string);\n\t\t\treturn raw_input_wrapped_in_array as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tconst cooker = this.scene.cooker;\n\t\tcooker.block();\n\t\tconst components = this.components;\n\t\tfor (let c of components) {\n\t\t\tc.emit_controller.block_parent_emit();\n\t\t}\n\n\t\t// if (lodash_isArray(values)) {\n\t\tconst value = this._raw_input;\n\t\tif (lodash_isArray(value)) {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tcomponents[i].set((value as any)[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tconst component_name = this.component_names[i];\n\t\t\t\tcomponents[i].set((value as any)[component_name]);\n\t\t\t}\n\t\t}\n\t\t// } else {\n\t\t// \tconst component_names = this.component_names()\n\t\t// \tfor (let i = 0; i < components.length; i++) {\n\t\t// \t\tcomponents[i].set(values[component_names[i]])\n\t\t// \t}\n\t\t// }\n\n\t\tcooker.unblock();\n\n\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\tcomponents[i].emit_controller.unblock_parent_emit();\n\t\t}\n\t\t// this.emit(ParamEvent.UPDATED);\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n}\n\n// export class BaseMultipleParam extends TypedMultipleParam<Vector> {}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nimport {ParamOptions} from '../../../params/utils/OptionsController';\n\ntype OverridenOptions = Dictionary<string>;\n\nexport type SimpleParamJsonExporterData<T extends ParamType> = ParamInitValueSerializedTypeMap[T];\n\nexport interface ComplexParamJsonExporterData<T extends ParamType> {\n\ttype?: T;\n\tdefault_value?: ParamInitValueSerializedTypeMap[T];\n\traw_input?: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n\toverriden_options?: OverridenOptions;\n\t// components?: ParamJsonExporterDataByName;\n\t// expression?: string;\n}\nexport type ParamJsonExporterData<T extends ParamType> =\n\t| SimpleParamJsonExporterData<T>\n\t| ComplexParamJsonExporterData<T>;\nexport type ParamJsonExporterDataByName = Dictionary<ParamJsonExporterData<ParamType>>;\n\nexport class ParamJsonExporter<T extends BaseParamType> {\n\t// protected _simple_data: SimpleParamJsonExporterData<ParamType>=0;\n\tprotected _complex_data: ComplexParamJsonExporterData<ParamType> = {};\n\tconstructor(protected _param: T) {}\n\n\tget required(): boolean {\n\t\tconst is_spare_and_not_component = this._param.options.is_spare && !this._param.parent_param;\n\n\t\t// we should not need to check if it has an expression anymore,\n\t\t// as it could have an expression AND be of default value\n\t\tconst value_changed = !this._param.is_default; //|| this._param.has_expression();\n\t\t// const referencing_asset = this._param.is_referencing_asset()\n\t\treturn is_spare_and_not_component || value_changed; // || referencing_asset\n\t}\n\n\tdata() {\n\t\tif (this._param.parent_param) {\n\t\t\tconsole.warn('no component should be saved');\n\t\t\tthrow 'no component should be saved';\n\t\t}\n\n\t\tif (this._require_data_complex()) {\n\t\t\treturn this._data_complex();\n\t\t} else {\n\t\t\treturn this._data_simple();\n\t\t}\n\t}\n\n\tprivate _data_simple() {\n\t\treturn this._param.raw_input_serialized;\n\t}\n\n\tprivate _data_complex() {\n\t\tthis._complex_data = {};\n\n\t\tif (this._param.options.is_spare && !this._param.parent_param) {\n\t\t\tthis._complex_data['type'] = this._param.type;\n\t\t\tthis._complex_data['default_value'] = this._param.default_value_serialized;\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t\tthis._complex_data['options'] = this._param.options.current;\n\t\t}\n\n\t\tif (!this._param.is_default) {\n\t\t\tthis.add_main();\n\t\t}\n\n\t\t// if(this._param.is_referencing_asset()){\n\t\t// \t// console.log(\"this._param.is_referencing_asset()\", this._param.is_referencing_asset())\n\t\t// \tthis._data['referenced_asset'] = this._param.referenced_asset()\n\t\t// }\n\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\tconst overridden_options: OverridenOptions = {};\n\t\t\tconst options_overridden = this._param.options.overridden_options;\n\t\t\tfor (let option_name of Object.keys(options_overridden)) {\n\t\t\t\tconst option_value = options_overridden[option_name as keyof ParamOptions];\n\t\t\t\toverridden_options[option_name] = JSON.stringify(option_value);\n\t\t\t}\n\t\t\tthis._complex_data['overriden_options'] = overridden_options;\n\t\t}\n\t\treturn this._complex_data;\n\t}\n\n\tprotected _require_data_complex() {\n\t\tif (this._param.options.is_spare) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// default_value(): ParamValueSerialized {\n\t// \treturn this._param.default_value_serialized;\n\t// }\n\n\t// cannot remember why this is useful, but it messes up\n\t// with gl nodes like the noise node, as the default value\n\t// gets saved as a string '[1,1]' instead of an array [1,1] (should be without quotes)\n\t// protected default_value(){\n\t// \tlet default_value = this._param.default_value()\n\t// \tif(lodash_isString(default_value)){\n\t// \t\tdefault_value = `'${default_value}'`\n\t// \t}\n\t// \tif (lodash_isArray(default_value)){\n\t// \t\tdefault_value = `[${default_value}]`\n\t// \t}\n\t// \treturn default_value\n\t// }\n\n\tprotected add_main() {}\n}\n","// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderChunk} from 'three/src/renderers/shaders/ShaderChunk';\n// import {Shader} from 'three/src/renderers/shaders/ShaderLib'\n// import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n// import {MeshPhysicalMaterial} from 'three/src/materials/MeshPhysicalMaterial';\n// import {Material} from 'three/src/materials/Material';\nimport {Vector2} from 'three/src/math/Vector2';\n\n// import {Connection} from '../../../../../Engine/Node/Gl/GlData';\nimport {LineType} from '../utils/LineType';\n// import {Output} from '../../../../../Engine/Node/Gl/Output'\n\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {VariableConfig} from '../configs/VariableConfig';\n// import {ThreeToGl} from '../../../../../core/ThreeToGl';\n// const BODY_SPLIT_LINE = 'void main() {'\n// export const BODY_SEPARATOR_LINES = lodash_range(3).map(i=>'\t')\nimport {CodeBuilder} from '../utils/CodeBuilder';\n// import {BaseNode} from '../../../../../Engine/Node/_Base';\nimport {BaseGlNodeType} from '../../_Base';\nimport {GlobalsGeometryHandler} from '../globals/Geometry';\nimport {TypedAssembler} from '../../../utils/shaders/BaseAssembler';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n// import {IUniformsWithFrame, IUniformsWithResolution} from '../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../Output';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\nimport {AssemblerControllerNode} from '../Controller';\nimport {GlobalsBaseController} from '../globals/_Base';\nimport {CustomMaterialName} from './materials/_BaseMaterial';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\nimport {IUniforms} from '../../../../../core/geometry/Material';\n\ntype StringArrayByShaderName = Map<ShaderName, string[]>;\n\ninterface ITemplateShader {\n\tvertexShader?: string;\n\tfragmentShader?: string;\n\tuniforms?: IUniforms;\n}\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <common>'],\n\t[ShaderName.FRAGMENT, '#include <common>'],\n]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <color_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( diffuse, opacity );'],\n]);\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', '#include <beginnormal_vertex>']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst SPACED_LINES = 3;\n\nexport class BaseGlShaderAssembler extends TypedAssembler<BaseGlNodeType> {\n\tprotected _shaders_by_name: Map<ShaderName, string> = new Map();\n\tprotected _lines: StringArrayByShaderName = new Map();\n\tprotected _code_builder: CodeBuilder | undefined;\n\tprivate _param_config_owner: CodeBuilder | undefined;\n\tprotected _root_nodes: BaseGlNodeType[] = [];\n\tprotected _leaf_nodes: BaseGlNodeType[] = [];\n\tprotected _material: ShaderMaterial | undefined;\n\n\tprivate _shader_configs: ShaderConfig[] | undefined;\n\tprivate _variable_configs: VariableConfig[] | undefined;\n\n\tprivate _uniforms_time_dependent: boolean = false;\n\tprivate _resolution_dependent: boolean = false;\n\n\tconstructor(protected _gl_parent_node: AssemblerControllerNode) {\n\t\tsuper();\n\t}\n\n\tasync compile() {}\n\n\t// private get material() {\n\t// \treturn (this._material = this._material || this._create_material());\n\t// }\n\t// async get_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tthis._material = this._material || this._create_material();\n\n\t// \tawait this._update_material(/*master_assembler*/);\n\t// \treturn this._material;\n\t// }\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName): string | undefined {\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX:\n\t\t\t\treturn this._template_shader?.vertexShader;\n\t\t\tcase ShaderName.FRAGMENT:\n\t\t\t\treturn this._template_shader?.fragmentShader;\n\t\t}\n\t}\n\n\tget globals_handler(): GlobalsBaseController | undefined {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler;\n\t}\n\tcompile_allowed(): boolean {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler != null;\n\t}\n\tshaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\n\t// protected create_material(): ShaderMaterial | undefined {\n\t// \treturn undefined;\n\t// }\n\tprotected _build_lines() {\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._replace_template(template, shader_name);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _build_lines_for_shader_name(shader_name: ShaderName){\n\t// \tconst template = this._template_shader()\n\t// \tthis._replace_template(template[`${shader_name}Shader`], shader_name)\n\t// }\n\n\tset_root_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tthis._root_nodes = root_nodes;\n\t}\n\tprotected get _template_shader(): ITemplateShader | undefined {\n\t\treturn undefined;\n\t} //Shader - could not find the import?\n\t// abstract _color_declaration(): string\n\t// private async _update_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tif (!this.material || !this._material) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst template_shader = this._template_shader;\n\t// \tif (!template_shader) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis._lines = new Map();\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t// \t\tif (template) {\n\t// \t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t// \t\t}\n\t// \t}\n\t// \tif (this._root_nodes.length > 0) {\n\t// \t\t// this._output_node.set_color_declaration(this._color_declaration())\n\t// \t\t// if(!master_assembler){\n\t// \t\t// this._output_node.set_assembler(this)\n\t// \t\tawait this.build_code_from_nodes(this._root_nodes);\n\t// \t\t// }\n\n\t// \t\t(this._material as any).extensions = {derivatives: true};\n\t// \t\t// this._material?.derivatives = true;\n\t// \t\tthis._build_lines();\n\t// \t\t// this._lines[ShaderName.FRAGMENT].unshift('#extension GL_OES_standard_derivatives : enable')\n\t// \t}\n\n\t// \t// TODO: typescript - not sure that is still useful\n\t// \t// for (let param_config of this.param_configs()) {\n\t// \t// \tparam_config.material = this._material;\n\t// \t// }\n\n\t// \t// instead of replacing fully the uniforms,\n\t// \t// I simply add to them the new ones or replace the existing ones\n\t// \t// otherwise this would break the particles_system_gpu\n\t// \t// which would not reset correctly when going back to first frame.\n\t// \t// Not entirely sure why, but this seems to be due to the texture uniforms\n\t// \t// which are removed and then readded. This seems to mess up somewhere with how\n\t// \t// the material updates itself...\n\t// \t// this._material.uniforms = this.build_uniforms(template_shader)\n\t// \tconst new_uniforms = this.build_uniforms(template_shader.uniforms);\n\t// \tthis.material.uniforms = this.material.uniforms || {};\n\t// \tfor (let uniform_name of Object.keys(new_uniforms)) {\n\t// \t\tthis.material.uniforms[uniform_name] = new_uniforms[uniform_name];\n\t// \t}\n\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst lines = this._lines.get(shader_name);\n\t// \t\tif (lines) {\n\t// \t\t\tconst shader = lines.join('\\n');\n\t// \t\t\tswitch (shader_name) {\n\t// \t\t\t\tcase ShaderName.VERTEX: {\n\t// \t\t\t\t\tthis._material.vertexShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t\tcase ShaderName.FRAGMENT: {\n\t// \t\t\t\t\tthis._material.fragmentShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tconst scene = this._gl_parent_node.scene;\n\t// \t// const id = this._gl_parent_node.graph_node_id()\n\t// \tif (this.frame_dependent()) {\n\t// \t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t// \t\t// as we need several materials:\n\t// \t\t// - the visible one\n\t// \t\t// - the multiple shadow ones\n\t// \t\t// - and possibly a depth one\n\t// \t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithFrame\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\n\t// \tif (this.resolution_dependent()) {\n\t// \t\tscene.uniforms_controller.add_resolution_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithResolution\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_resolution_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\t// }\n\n\tprotected add_uniforms(current_uniforms: IUniforms) {\n\t\t// const new_uniforms = UniformsUtils.clone(template_uniforms);\n\n\t\t// copy the new uniforms onto the old ones, only adding, not removing\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\n\t\t// }\n\n\t\t// copy the values of the old uniform\n\t\t// for (let uniform_name of Object.keys(old_uniforms)) {\n\t\t// \tconst new_uniform = new_uniforms[uniform_name];\n\t\t// \tif (new_uniform) {\n\t\t// \t\tnew_uniform.value = old_uniforms[uniform_name].value;\n\t\t// \t}\n\t\t// }\n\n\t\tfor (let param_config of this.param_configs()) {\n\t\t\tcurrent_uniforms[param_config.uniform_name] = param_config.uniform;\n\t\t}\n\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tcurrent_uniforms['time'] = {\n\t\t\t\t// type: '1f',\n\t\t\t\tvalue: this._gl_parent_node.scene.time,\n\t\t\t};\n\t\t}\n\t\tif (this.resolution_dependent()) {\n\t\t\tcurrent_uniforms['resolution'] = {\n\t\t\t\tvalue: new Vector2(1000, 1000),\n\t\t\t};\n\t\t}\n\n\t\t// return new_uniforms;\n\t}\n\n\t//\n\t//\n\t// ROOT NODES AND SHADER NAMES\n\t//\n\t//\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\t// const attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase GlobalsGlNode.type(): {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase AttributeGlNode.type(): {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\t// const attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tget code_builder() {\n\t\treturn (this._code_builder = this._code_builder || new CodeBuilder(this, this._gl_parent_node));\n\t}\n\tasync build_code_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tawait this.code_builder.build_from_nodes(root_nodes);\n\t}\n\tallow_new_param_configs() {\n\t\tthis.code_builder.allow_new_param_configs();\n\t}\n\tdisallow_new_param_configs() {\n\t\tthis.code_builder.disallow_new_param_configs();\n\t}\n\tbuilder_param_configs() {\n\t\treturn this.code_builder.param_configs();\n\t}\n\tbuilder_lines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this.code_builder.lines(shader_name, line_type);\n\t}\n\tall_builder_lines() {\n\t\treturn this.code_builder.all_lines();\n\t}\n\tparam_configs() {\n\t\tconst code_builder = this._param_config_owner || this.code_builder;\n\t\treturn code_builder.param_configs();\n\t}\n\tset_param_configs_owner(param_config_owner: CodeBuilder) {\n\t\tthis._param_config_owner = param_config_owner;\n\t\tif (this._param_config_owner) {\n\t\t\tthis.code_builder.disallow_new_param_configs();\n\t\t} else {\n\t\t\tthis.code_builder.allow_new_param_configs();\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tstatic add_output_params(output_child: OutputGlNode) {\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'position', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'normal', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR2, 'uv', [0, 0], {hidden: true});\n\t}\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t}\n\tstatic create_globals_node_output_connections() {\n\t\treturn [\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('normal', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('color', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('uv', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC4),\n\t\t\tnew TypedNamedConnectionPoint('resolution', ConnectionPointType.VEC2),\n\t\t\t// new Connection.Vec2('gl_PointCoord'),\n\t\t\t// new TypedConnectionVec2('uv'),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t];\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections();\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points(this.create_globals_node_output_connections());\n\t}\n\tallow_attribute_exports() {\n\t\treturn false;\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\treset_configs() {\n\t\tthis._reset_shader_configs();\n\t\tthis._reset_variable_configs();\n\t\tthis._reset_uniforms_time_dependency();\n\t\tthis._reset_resolution_dependency();\n\t}\n\tget shader_configs() {\n\t\treturn (this._shader_configs = this._shader_configs || this.create_shader_configs());\n\t}\n\tset_shader_configs(shader_configs: ShaderConfig[]) {\n\t\tthis._shader_configs = shader_configs;\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.shader_configs?.map((sc) => sc.name()) || [];\n\t}\n\tprotected _reset_shader_configs() {\n\t\tthis._shader_configs = undefined;\n\t\t// this.shader_configs; // TODO: typescript - why do I need to re-initialize here?\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tshader_config(name: string): ShaderConfig | undefined {\n\t\treturn this.shader_configs?.filter((sc) => {\n\t\t\treturn sc.name() == name;\n\t\t})[0];\n\t}\n\tvariable_configs() {\n\t\treturn (this._variable_configs = this._variable_configs || this.create_variable_configs());\n\t}\n\tset_variable_configs(variable_configs: VariableConfig[]) {\n\t\tthis._variable_configs = variable_configs;\n\t}\n\tvariable_config(name: string) {\n\t\treturn this.variable_configs().filter((vc) => {\n\t\t\treturn vc.name() == name;\n\t\t})[0];\n\t}\n\tstatic create_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('position', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t\t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t\t\tprefix: 'vec3 transformed = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('normal', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\tprefix: 'vec3 objectNormal = ',\n\t\t\t\t// post_lines: ['#ifdef USE_TANGENT', 'vec3 objectTangent = vec3( tangent.xyz );', '#endif'],\n\t\t\t}),\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('uv', {\n\t\t\t\t// default_from_attribute: true,\n\t\t\t\tprefix: 'vUv = ',\n\t\t\t\tif: GlobalsGeometryHandler.IF_RULE.uv,\n\t\t\t}),\n\t\t];\n\t}\n\tcreate_variable_configs(): VariableConfig[] {\n\t\treturn BaseGlShaderAssembler.create_variable_configs();\n\t}\n\tprotected _reset_variable_configs() {\n\t\tthis._variable_configs = undefined;\n\t\tthis.variable_configs();\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.shader_config(shader_name)?.input_names() || [];\n\t}\n\n\t// time dependency\n\tprotected _reset_uniforms_time_dependency() {\n\t\tthis._uniforms_time_dependent = false;\n\t}\n\tset_uniforms_time_dependent() {\n\t\tthis._uniforms_time_dependent = true;\n\t}\n\tuniforms_time_dependent(): boolean {\n\t\treturn this._uniforms_time_dependent;\n\t}\n\t// resolution dependency\n\tprotected _reset_resolution_dependency() {\n\t\tthis._resolution_dependent = false;\n\t}\n\tset_resolution_dependent() {\n\t\tthis._resolution_dependent = true;\n\t}\n\tresolution_dependent(): boolean {\n\t\treturn this._resolution_dependent;\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName): string[] | undefined {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\n\tprivate _replace_template(template: string, shader_name: ShaderName) {\n\t\tconst function_declaration = this.builder_lines(shader_name, LineType.FUNCTION_DECLARATION);\n\t\tconst define = this.builder_lines(shader_name, LineType.DEFINE);\n\t\t// let all_define = function_declaration.concat(define);\n\t\tconst body = this.builder_lines(shader_name, LineType.BODY);\n\n\t\tlet template_lines = template.split('\\n');\n\t\t// const scene = this._gl_parent_node.scene;\n\t\tconst new_lines = [\n\t\t\t// `#define FPS ${ThreeToGl.float(scene.time_controller.fps)}`,\n\t\t\t// `#define TIME_INCREMENT (1.0/${ThreeToGl.float(scene.time_controller.fps)})`,\n\t\t\t// `#define FRAME_RANGE_START ${ThreeToGl.float(scene.time_controller.frame_range[0])}`,\n\t\t\t// `#define FRAME_RANGE_END ${ThreeToGl.float(scene.time_controller.frame_range[1])}`,\n\t\t];\n\n\t\tconst line_before_define = this.insert_define_after(shader_name);\n\t\tconst line_before_body = this.insert_body_after(shader_name);\n\t\tconst lines_to_remove = this.lines_to_remove(shader_name);\n\t\tlet line_before_define_found = false;\n\t\tlet line_before_body_found = false;\n\n\t\tfor (let template_line of template_lines) {\n\t\t\tif (line_before_define_found == true) {\n\t\t\t\tif (function_declaration) {\n\t\t\t\t\tthis._insert_lines(new_lines, function_declaration);\n\t\t\t\t}\n\t\t\t\tif (define) {\n\t\t\t\t\tthis._insert_lines(new_lines, define);\n\t\t\t\t}\n\t\t\t\tline_before_define_found = false;\n\t\t\t}\n\t\t\tif (line_before_body_found == true) {\n\t\t\t\t// this._insert_default_body_declarations(new_lines, shader_name)\n\t\t\t\tif (body) {\n\t\t\t\t\tthis._insert_lines(new_lines, body);\n\t\t\t\t}\n\t\t\t\tline_before_body_found = false;\n\t\t\t}\n\n\t\t\tlet line_remove_required = false;\n\t\t\tif (lines_to_remove) {\n\t\t\t\tfor (let line_to_remove of lines_to_remove) {\n\t\t\t\t\tif (template_line.indexOf(line_to_remove) >= 0) {\n\t\t\t\t\t\tline_remove_required = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line_remove_required) {\n\t\t\t\tnew_lines.push(template_line);\n\t\t\t} else {\n\t\t\t\tnew_lines.push('// removed:');\n\t\t\t\tnew_lines.push(`//${template_line}`);\n\t\t\t}\n\n\t\t\tif (line_before_define && template_line.indexOf(line_before_define) >= 0) {\n\t\t\t\tline_before_define_found = true;\n\t\t\t}\n\t\t\tif (line_before_body && template_line.indexOf(line_before_body) >= 0) {\n\t\t\t\tline_before_body_found = true;\n\t\t\t}\n\n\t\t\t// if(template_line.indexOf('// INSERT DEFINE') >= 0){\n\t\t\t// } else {\n\t\t\t// \tif(template_line.indexOf('// INSERT BODY') >= 0){\n\t\t\t// \t\tif(body.length > 0){\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t\tbody.forEach(body_line=>{\n\t\t\t// \t\t\t\tnew_lines.push(body_line)\n\t\t\t// \t\t\t})\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\tif(template_line.indexOf('// TO REMOVE') < 0){\n\t\t\t// \t\t\tnew_lines.push(template_line)\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\tthis._lines.set(shader_name, new_lines);\n\t}\n\n\t// protected _insert_default_body_declarations(new_lines, shader_name){\n\t// \tnew_lines.push('float POLY_roughness = 1.0;')\n\t// }\n\n\tprivate _insert_lines(new_lines: string[], lines_to_add: string[]) {\n\t\tif (lines_to_add.length > 0) {\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\n\t\t\tfor (let line_to_add of lines_to_add) {\n\t\t\t\tnew_lines.push(line_to_add);\n\t\t\t}\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync get_custom_materials(): Promise<Map<CustomMaterialName, ShaderMaterial>> {\n\t\treturn new Map<CustomMaterialName, ShaderMaterial>();\n\t}\n\n\t// protected expand_shader(shader_string: string) {\n\t// \tfunction parseIncludes(string: string) {\n\t// \t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\t// \t\tfunction replace(match: string, include: string) {\n\t// \t\t\tvar replace = ShaderChunk[include];\n\n\t// \t\t\tif (replace === undefined) {\n\t// \t\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t// \t\t\t}\n\n\t// \t\t\treturn parseIncludes(replace);\n\t// \t\t}\n\n\t// \t\treturn string.replace(pattern, replace);\n\t// \t}\n\t// \treturn parseIncludes(shader_string);\n\t// }\n\n\t//\n\t//\n\t// GLTF EXPORT\n\t//\n\t//\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material{\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial\n\t// \tconst options = {}\n\t// \tthis._match_uniform('color', options, material, 'diffuse')\n\t// \tthis._match_uniform('map', options, material)\n\t// \tthis._match_uniform('envMap', options, material)\n\t// \tthis._match_uniform('envMapIntensity', options, material)\n\t// \tthis._match_uniform('metalness', options, material)\n\t// \tthis._match_uniform('roughness', options, material)\n\t// \tconst gltf_material = new gltf_constructor(options)\n\t// \treturn gltf_material\n\t// }\n\t// static _match_uniform(name: string, options: object, material: ShaderMaterial, uniform_name?: string) {\n\t// \tuniform_name = uniform_name || name;\n\t// \toptions[name] = material.uniforms[uniform_name].value;\n\t// }\n}\n","import {BaseMatNodeType} from '../_Base';\n\nexport class BaseController {\n\tconstructor(protected node: BaseMatNodeType) {}\n\tadd_params() {}\n\n\tupdate() {}\n\n\tget material() {\n\t\treturn this.node.material;\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {PolyScene} from '../../engine/scene/PolyScene';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\nexport interface MaterialWithUniforms extends Material {\n\tuniforms: IUniforms;\n}\n\nenum CustomMaterialName {\n\tcustomDistanceMaterial = 'customDistanceMaterial',\n\tcustomDepthMaterial = 'customDepthMaterial',\n\tcustomDepthDOFMaterial = 'customDepthDOFMaterial',\n}\nexport interface ObjectWithCustomMaterials extends Mesh {\n\t// customDistanceMaterial?: Material;\n\t// customDepthMaterial?: Material;\n\tcustomDepthDOFMaterial?: Material;\n}\nexport interface ShaderMaterialWithCustomMaterials extends ShaderMaterial {\n\tcustom_materials: {\n\t\t[key in CustomMaterialName]?: ShaderMaterial;\n\t};\n}\nexport interface MaterialWithSkinning extends Material {\n\tskinning: boolean;\n\tmorphTargets: boolean;\n}\n\nexport class CoreMaterial {\n\tstatic node(scene: PolyScene, material: Material) {\n\t\treturn scene.node(material.name);\n\t}\n\n\tstatic clone(src_material: Material | Material[]) {\n\t\tif (lodash_isArray(src_material)) {\n\t\t\treturn src_material.map((material) => {\n\t\t\t\treturn this.clone_single(material);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.clone_single(src_material);\n\t\t}\n\t}\n\n\tstatic clone_single(src_material: Material) {\n\t\tconst material = src_material.clone();\n\t\t// linewidth doesn't seem cloned correctly for ShaderMaterial\n\t\t(material as LineBasicMaterial).linewidth = (src_material as LineBasicMaterial).linewidth;\n\n\t\treturn material;\n\t}\n\n\tstatic apply_custom_materials(object: Object3D, material: Material) {\n\t\tconst material_with_custom = material as ShaderMaterialWithCustomMaterials;\n\t\tif (material_with_custom.custom_materials) {\n\t\t\tfor (let name of Object.keys(material_with_custom.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\t// http://blog.edankwan.com/post/three-js-advanced-tips-shadow\n\t\t\t\tconst custom_material = material_with_custom.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\t(object as ObjectWithCustomMaterials)[mat_name] = custom_material;\n\t\t\t\t\tcustom_material.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// object.material = material.custom_materials.customDepthDOFMaterial\n\t\t\t// object.material = material.custom_materials.customDepthMaterial\n\t\t\t// object.material = material.custom_materials.customDistanceMaterial\n\t\t}\n\t}\n\tstatic assign_custom_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name].value = uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic init_custom_material_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name] = custom_material.uniforms[uniform_name] || uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","import lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isBoolean from 'lodash/isBoolean';\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamEvent} from '../poly/ParamEvent';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\n// interface NumericParamVisitor extends TypedParamVisitor {\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\nexport abstract class TypedNumericParam<T extends ParamType> extends TypedParam<T> {\n\t// private _raw_input: ParamInitValuesTypeMap[T] | undefined;\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\t// accepts_visitor(visitor: NumericParamVisitor): any {\n\t// \treturn visitor.visit_numeric_param(this);\n\t// }\n\t// init_expression() {\n\t// \tif (this.is_value_expression(this._default_value)) {\n\t// \t\treturn this.set_expression(this._default_value)\n\t// \t}\n\t// }\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (lodash_isArray(raw_input)) {\n\t\t\treturn raw_input[0] as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input;\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tconst converted = this.convert(this._raw_input);\n\t\tif (converted != null) {\n\t\t\tif (this._expression_controller) {\n\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t}\n\t\t\tif (converted != this._value) {\n\t\t\t\tthis._update_value(converted);\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (lodash_isString(this._raw_input)) {\n\t\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`param input is invalid (${this.full_path()})`);\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(\n\t\t\t\t\t`expression error: \"${this.expression_controller.expression}\" (${this.expression_controller.error_message})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tif (this.states.error.active) {\n\t\t\t\t\t\tthis.states.error.clear();\n\t\t\t\t\t}\n\t\t\t\t\tthis._update_value(converted);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`expression returns an invalid type (${expression_result}) (${this.expression_controller.expression})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate _update_value(new_value: ParamValuesTypeMap[T]) {\n\t\tthis._value = new_value;\n\t\tif (this.parent_param) {\n\t\t\tthis.parent_param.set_value_from_components();\n\t\t}\n\t\tthis.options.execute_callback();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\tthis.remove_dirty_state();\n\t}\n}\n","export class TypeAssert {\n\tstatic unreachable(x: never): never {\n\t\tthrow new Error(\"Didn't expect to get here\");\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {CoreString} from '../../../../core/String';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from './Node';\nimport {JsonExportDispatcher} from './Dispatcher';\n\nexport interface SceneJsonExporterData {\n\tproperties?: {\n\t\tframe: number;\n\t\tframe_range: Number2;\n\t\tframe_range_locked: Boolean2;\n\t\t// fps: number;\n\t\tmaster_camera_node_path: string | null;\n\t};\n\troot?: NodeJsonExporterData;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneJsonExporter {\n\tprivate _data: SceneJsonExporterData = {};\n\tconstructor(private _scene: PolyScene) {}\n\n\tdata(): SceneJsonExporterData {\n\t\tthis._scene.nodes_controller.reset_node_context_signatures();\n\t\tconst root_exporter = JsonExportDispatcher.dispatch_node(this._scene.root);\n\t\tconst nodes_data = root_exporter.data();\n\t\tconst ui_data = root_exporter.ui_data();\n\n\t\tthis._data = {\n\t\t\t// __js_version: this._scene.js_version(),\n\t\t\tproperties: {\n\t\t\t\t// name: this._scene.name(), // this conflicts with saving the name from the admin page\n\t\t\t\tframe: this._scene.frame || 1,\n\t\t\t\tframe_range: this._scene.frame_range,\n\t\t\t\tframe_range_locked: this._scene.time_controller.frame_range_locked,\n\t\t\t\t// fps: this._scene.time_controller.fps,\n\t\t\t\tmaster_camera_node_path: this._scene.cameras_controller.master_camera_node_path,\n\t\t\t},\n\t\t\troot: nodes_data,\n\t\t\tui: ui_data,\n\t\t};\n\n\t\treturn this._data;\n\t}\n\n\tstatic sanitize_string(word: string): string {\n\t\tword = word.replace(/'/g, \"'\"); // escapes ' (used to be with 2 /, but now only one to have Ian's Mediation saved and loaded correctly - but is actually 2 in Code Exporter)\n\t\tword = CoreString.escape_line_breaks(word);\n\t\treturn word;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class ShaderConfig {\n\tconstructor(private _name: ShaderName, private _input_names: string[], private _dependencies: ShaderName[]) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tinput_names() {\n\t\treturn this._input_names;\n\t}\n\tdependencies() {\n\t\treturn this._dependencies;\n\t}\n}\n","interface VariableConfigOptions {\n\t// asset refererences\n\tdefault_from_attribute?: boolean;\n\tdefault?: string;\n\tif?: string;\n\tprefix?: string;\n\tsuffix?: string;\n}\n\nexport class VariableConfig {\n\tconstructor(private _name: string, private _options: VariableConfigOptions = {}) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tdefault_from_attribute() {\n\t\treturn this._options['default_from_attribute'] || false;\n\t}\n\tdefault() {\n\t\treturn this._options['default'];\n\t}\n\tif_condition() {\n\t\treturn this._options['if'];\n\t}\n\t// required_definitions(){\n\t// \treturn this._options['required_definitions']\n\t// }\n\tprefix() {\n\t\treturn this._options['prefix'] || '';\n\t}\n\tsuffix() {\n\t\treturn this._options['suffix'] || '';\n\t}\n}\n","import {ParamConfig} from '../configs/ParamConfig';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\n\nexport class ParamConfigsController {\n\tprivate _param_configs: ParamConfig<ParamType>[] = [];\n\n\treset() {\n\t\tthis._param_configs = [];\n\t}\n\n\tpush(param_config: ParamConfig<ParamType>) {\n\t\tthis._param_configs.push(param_config);\n\t}\n\tcreate_and_push<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\tuniform_name: string\n\t) {\n\t\tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t\tthis._param_configs.push(param_config);\n\t}\n\n\tget list(): Readonly<ParamConfig<ParamType>[]> {\n\t\treturn this._param_configs;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Color} from 'three/src/math/Color';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tuse_vertex_colors = ParamConfig.BOOLEAN(0);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tpublic color!: Color;\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tconst new_vertex_color = pv.use_vertex_colors; // ? VertexColors : NoColors;\n\t\tif (new_vertex_color != material.vertexColors) {\n\t\t\tmaterial.vertexColors = new_vertex_color;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// color = ParamConfig.COLOR([1, 1, 1]);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n\tuniforms!: IUniforms;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\n\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\n\t\tif (material.uniforms.opacity) {\n\t\t\tmaterial.uniforms.opacity.value = pv.opacity;\n\t\t}\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {TypedMatNode} from './_Base';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShaderAssemblerMaterial} from '../gl/code/assemblers/materials/_BaseMaterial';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ShaderMaterialWithCustomMaterials} from '../../../core/geometry/Material';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport abstract class TypedBuilderMatNode<\n\tA extends ShaderAssemblerMaterial,\n\tK extends NodeParamsConfig\n> extends TypedMatNode<ShaderMaterialWithCustomMaterials, K> {\n\tprotected _assembler_controller: GlAssemblerController<A> | undefined;\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t}\n\n\t//\n\t//\n\t// MATERIAL\n\t//\n\t//\n\tcreate_material() {\n\t\treturn this.assembler_controller.assembler.create_material() as ShaderMaterialWithCustomMaterials;\n\t}\n\t//\n\t//\n\t// ASSEMBLER\n\t//\n\t//\n\tget assembler_controller() {\n\t\treturn (this._assembler_controller = this._assembler_controller || this._create_assembler_controller());\n\t}\n\tprotected abstract _create_assembler_controller(): GlAssemblerController<A>;\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// COMPILATION\n\t//\n\t//\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprotected async _compile() {\n\t\tif (this.material) {\n\t\t\tawait this.assembler_controller.assembler.compile_material(this.material);\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\t}\n}\n\nexport type BaseBuilderMatNodeType = TypedBuilderMatNode<ShaderAssemblerMaterial, NodeParamsConfig>;\n","import {TypedLightObjNode} from './_BaseLight';\nimport {Light} from 'three/src/lights/Light';\n// import {CoreTransform} from '../../../core/Transform';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TransformController, TransformedParamConfig} from './utils/TransformController';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\n// import {Transformed} from './Concerns/Transformed';\nclass TransformedObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\n\nexport abstract class BaseLightTransformedObjNode<\n\tL extends Light,\n\tK extends TransformedObjParamConfig\n> extends TypedLightObjNode<L, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../../utils/params/ParamsConfig';\nimport {TypedObjNode} from '../../_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {Light} from 'three/src/lights/Light';\nimport {FlagsControllerD} from '../../../utils/FlagsController';\nexport function BaseLightHelperParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\nclass BaseLightHelperParamsConfig extends BaseLightHelperParamConfig(NodeParamsConfig) {}\nexport abstract class BaseLightHelperObjNode<L extends Light> extends TypedObjNode<Group, BaseLightHelperParamsConfig> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\t// public readonly helper: BaseLightHelper<L> | undefined;\n\tabstract get light(): L;\n}\n\nexport abstract class BaseLightHelper<L extends Light, N extends BaseLightHelperObjNode<L>> {\n\tprotected _object = new Mesh();\n\tprotected _material = new MeshBasicMaterial({wireframe: true, fog: false});\n\tconstructor(protected node: N, private _name: string) {}\n\n\tbuild() {\n\t\tthis._object.name = this._name;\n\t\tthis.build_helper();\n\t}\n\tprotected abstract build_helper(): void;\n\tget object() {\n\t\treturn this._object;\n\t}\n\n\tabstract update(): void;\n}\n","import {Light} from 'three/src/lights/Light';\nimport {BaseLightHelper, BaseLightHelperObjNode} from './helpers/_BaseLightHelper';\n\n// interface Helper<L extends Light> extends BaseLightHelper<L> {\n// \tdispose: () => void;\n// \tupdate: () => void;\n// }\nexport interface HelperConstructor<L extends Light> {\n\tnew (node: BaseLightHelperObjNode<L>, name: string): BaseLightHelper<L, BaseLightHelperObjNode<L>>;\n}\n\nexport class HelperController<L extends Light> {\n\tprivate _helper: BaseLightHelper<L, BaseLightHelperObjNode<L>> | undefined;\n\tconstructor(\n\t\tprivate node: BaseLightHelperObjNode<L>,\n\t\tprivate _helper_constructor: HelperConstructor<L>,\n\t\tprivate _name: string\n\t) {}\n\n\tinitialize_node() {\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.update_helper_attachment();\n\t\t});\n\t}\n\n\tprivate update_helper_attachment() {\n\t\tif (this.node.flags.display.active) {\n\t\t\tconst object = this.helper?.object; // use this.helper to create if needed\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.add(object);\n\t\t\t\tthis._helper?.update();\n\t\t\t}\n\t\t} else {\n\t\t\tconst object = this._helper?.object; // use this._helper to NOT create if not already existing\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.remove(object);\n\t\t\t}\n\t\t}\n\t}\n\tget helper() {\n\t\tif (this.node.flags.display.active) {\n\t\t\treturn (this._helper = this._helper || this._create_helper());\n\t\t}\n\t}\n\tget visible() {\n\t\treturn this.node.flags.display.active && this.node.pv.show_helper;\n\t}\n\n\tprivate _create_helper(): BaseLightHelper<L, BaseLightHelperObjNode<L>> {\n\t\tconst helper = new this._helper_constructor(this.node, this._name);\n\t\thelper.build();\n\t\tthis.node.light.add(helper.object);\n\t\treturn helper;\n\t}\n\n\tupdate() {\n\t\tif (this.visible) {\n\t\t\tif (!this._helper) {\n\t\t\t\tthis._helper = this._create_helper();\n\t\t\t}\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = true;\n\t\t\t\tthis._helper.update();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = false;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass BaseManagerObjParamsConfig extends NodeParamsConfig {}\nexport class BaseManagerObjNode extends TypedObjNode<Group, BaseManagerObjParamsConfig> {\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\t// _init_manager(options = {}) {\n\t// \t// this._init_hierarchy_children_owner(options['children'] || {});\n\t// \t// this.flags.add_display({\n\t// \t// \thas_display_flag: false,\n\t// \t// \tmultiple_display_flags_allowed: true,\n\t// \t// });\n\t// \t// this.set_inputs_count_to_zero();\n\t// \t// this._init_outputs({has_outputs: false});\n\t// }\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {BaseObjNodeType} from '../_Base';\n// import {ParamType} from '../../../poly/ParamType';\n\nconst PARAM_NAME = 'layer';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function LayerParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tlayer = ParamConfig.INTEGER(0, {\n\t\t\trange: [0, 31],\n\t\t\trange_locked: [true, true],\n\t\t});\n\t};\n}\n\nexport class LayersController {\n\tconstructor(private node: BaseObjNodeType) {}\n\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.INTEGER, PARAM_NAME, 0, {\n\t// \t\trange: [0, 31],\n\t// \t\trange_locked: [true, true],\n\t// \t});\n\t// }\n\n\tupdate() {\n\t\tconst object = this.node.object;\n\t\t// const affected_objects = [object];\n\t\t// if (object.cloned_cameras != null) {\n\t\t// \tlodash_each(object.cloned_cameras, cloned_camera=> {\n\t\t// \t\taffected_objects.push(cloned_camera);\n\t\t// \t});\n\t\t// }\n\n\t\t// affected_objects.forEach((affected_object)=> {\n\t\tobject.layers.set(0);\n\t\tobject.layers.enable(this.node.params.integer(PARAM_NAME));\n\t\t// });\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ACESFilmicToneMapping, sRGBEncoding} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport lodash_range from 'lodash/range';\n// import {BaseParam} from '../../../../params/_Base';\nimport {BooleanParam} from '../../../../params/Boolean';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {BasePostProcessNodeType} from '../../../post/_Base';\nimport {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {EffectComposer} from '../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer';\nimport {RenderPass} from '../../../../../../modules/three/examples/jsm/postprocessing/RenderPass';\nimport {Pass} from '../../../../../../modules/three/examples/jsm/postprocessing/Pass';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {POLY} from '../../../../Poly';\n\ninterface DisposablePass extends Pass {\n\tdispose: () => void;\n}\n\nfunction boolean_param_options(index: number) {\n\treturn {\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t},\n\t};\n}\nfunction operator_path_param_options(index: number) {\n\treturn {\n\t\tnode_selection: {context: NodeContext.POST},\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t\t[`use_post_process_node${index}`]: 1,\n\t\t},\n\t};\n}\n\nimport {ParamConfig} from '../../../utils/params/ParamsConfig';\nexport function CameraPostProcessParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tpost_process = ParamConfig.FOLDER();\n\n\t\tdo_post_process = ParamConfig.BOOLEAN(0);\n\t\tuse_post_process_node0 = ParamConfig.BOOLEAN(0, boolean_param_options(0));\n\t\tpost_process_node0 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(0));\n\t\tuse_post_process_node1 = ParamConfig.BOOLEAN(0, boolean_param_options(1));\n\t\tpost_process_node1 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(1));\n\t\tuse_post_process_node2 = ParamConfig.BOOLEAN(0, boolean_param_options(2));\n\t\tpost_process_node2 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(2));\n\t\tuse_post_process_node3 = ParamConfig.BOOLEAN(0, boolean_param_options(3));\n\t\tpost_process_node3 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(3));\n\t};\n}\n\nexport class PostProcessController {\n\t// private _param_do_post_process: boolean;\n\t// private _param_do_sao: boolean;\n\tprivate _renderers_by_canvas_id: Dictionary<WebGLRenderer> = {};\n\tprivate _composers_by_canvas_id: Dictionary<EffectComposer> = {};\n\tprivate _resolution_by_canvas_id: Dictionary<Vector2> = {};\n\tprivate _composers_set_in_progress_by_canvas_id: Dictionary<boolean> = {};\n\tprivate _fetch_post_process_nodes_in_progress: boolean = false;\n\t// private _render_passes: any[] = []\n\tprivate _post_process_nodes: BasePostProcessNodeType[] = [];\n\n\tprivate _post_process_use_node_path_params: BooleanParam[] = [];\n\tprivate _post_process_node_path_params: OperatorPathParam[] = [];\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\t// private _prev_t = 0;\n\trender(canvas: HTMLCanvasElement, size: Vector2, aspect: number) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tif (this.node.pv.do_post_process) {\n\t\t\t\tconst composer = this.composer(canvas);\n\t\t\t\tif (composer) {\n\t\t\t\t\tcomposer.setSize(size.x, size.y);\n\t\t\t\t\tcomposer.render();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.setup_for_aspect_ratio(aspect);\n\t\t\t\t// const cur_t = performance.now();\n\t\t\t\t// const delta = cur_t - this._prev_t;\n\t\t\t\t// this._prev_t = cur_t;\n\t\t\t\t// console.log(cur_t, delta);\n\t\t\t\trenderer.render(this.node.scene.default_scene, this.node.object);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderer(canvas: HTMLCanvasElement) {\n\t\treturn this._renderers_by_canvas_id[canvas.id];\n\t}\n\n\tcreate_renderer(canvas: HTMLCanvasElement, size: Vector2): WebGLRenderer {\n\t\tconst gl = POLY.renderers_controller.rendering_context(canvas);\n\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: true,\n\t\t\tcontext: gl,\n\t\t});\n\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.physicallyCorrectLights = true; // https://discourse.threejs.org/t/three-js-white-is-too-bright/11873/3\n\n\t\t// TODO: find a way to have those accessible via params\n\t\trenderer.toneMapping = ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 1;\n\t\trenderer.outputEncoding = sRGBEncoding;\n\n\t\t// https://github.com/mrdoob/js/issues/15493\n\t\t// This below is an attempt to fix env map not being loaded in firefox, but that doesn't work.\n\t\t// Since the threejs example (https://threejs.org/examples/?q=exr#webgl_materials_envmaps_exr) also only works in chrome, not in firefox, I assume this is a firefox+linux bug\n\t\t// console.log(renderer.extensions)\n\t\t// renderer.extensions.get( 'EXT_color_buffer_float' );\n\n\t\t// attempt to have particle systems work in firefox on mobile\n\t\t// (current solution is to have the node SOP/particlesSystemGPU force webgl2 to be used)\n\t\t// renderer.extensions.get( 'WEBGL_color_buffer_float' );\n\t\t// renderer.extensions.get( 'WEBGL_draw_buffers' );\n\n\t\tPOLY.renderers_controller.register_renderer(renderer);\n\t\tthis._renderers_by_canvas_id[canvas.id] = renderer;\n\t\tthis.set_renderer_size(canvas, size);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\n\t\treturn renderer;\n\t}\n\tdelete_renderer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tPOLY.renderers_controller.deregister_renderer(renderer);\n\t\t}\n\t}\n\tset_renderer_size(canvas: HTMLCanvasElement, size: Vector2) {\n\t\tthis._resolution_by_canvas_id[canvas.id] = this._resolution_by_canvas_id[canvas.id] || new Vector2();\n\t\tthis._resolution_by_canvas_id[canvas.id].copy(size);\n\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.x, size.y);\n\t\t}\n\t\tconst composer = this.composer(canvas);\n\t\tif (composer) {\n\t\t\tcomposer.setSize(size.x, size.y);\n\t\t}\n\t}\n\n\tprivate composer(canvas: HTMLCanvasElement): EffectComposer {\n\t\treturn (this._composers_by_canvas_id[canvas.id] =\n\t\t\tthis._composers_by_canvas_id[canvas.id] || this._create_composer(canvas));\n\t}\n\n\tprivate _create_composer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\t// const parameters = {\n\t\t\t// \tminFilter: LinearFilter,\n\t\t\t// \tmagFilter: LinearFilter,\n\t\t\t// \tformat: RGBAFormat,\n\t\t\t// \tstencilBuffer: true\n\t\t\t// }\n\t\t\t// const renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, parameters );\n\t\t\tconst composer = new EffectComposer(renderer); //, renderTarget );\n\t\t\t// to achieve better antialiasing\n\t\t\t// while using post:\n\t\t\t// composer.setPixelRatio( window.devicePixelRatio*2 )\n\t\t\tcomposer.setPixelRatio(window.devicePixelRatio * 2);\n\t\t\tthis.set_composer_passes(canvas.id, composer, renderer);\n\n\t\t\treturn composer;\n\t\t} /*else {\n\t\t\tconsole.warn(this._renderers_by_canvas_id)\n\t\t\tthrow \"failed to create composer, no renderer ready\"\n\t\t}*/\n\t}\n\n\tasync update_composer_passes() {\n\t\tif (this.node.pv.do_post_process) {\n\t\t\tthis._post_process_nodes = [];\n\t\t\tif (this._fetch_post_process_nodes_in_progress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = true;\n\n\t\t\tif (this.composer_passes_nodes_changed()) {\n\t\t\t\tthis._post_process_nodes = [];\n\n\t\t\t\tfor (let i of lodash_range(4)) {\n\t\t\t\t\tconst toggle_param = this._post_process_use_node_path_params[i];\n\t\t\t\t\t// const use_node = await toggle_param.eval_p()\n\t\t\t\t\tconst use_node = toggle_param.value;\n\t\t\t\t\tif (use_node) {\n\t\t\t\t\t\tconst param = this._post_process_node_path_params[i];\n\t\t\t\t\t\tconst post_process_node = param.found_node() as BasePostProcessNodeType;\n\t\t\t\t\t\tif (post_process_node) {\n\t\t\t\t\t\t\tawait post_process_node.request_container();\n\t\t\t\t\t\t\t// const render_pass = container.render_pass()\n\t\t\t\t\t\t\t// this._render_passes.push(render_pass)\n\t\t\t\t\t\t\tthis._post_process_nodes.push(post_process_node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set_composers_passes();\n\t\t\t\t// this._previous_post_process_nodes_paths = this.composer_passes_nodes_paths()\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = false;\n\t\t} else {\n\t\t\tthis._post_process_nodes = [];\n\t\t}\n\t}\n\n\tprivate set_composers_passes() {\n\t\tconst ids = Object.keys(this._composers_by_canvas_id);\n\n\t\tfor (let id of ids) {\n\t\t\tconst composer = this._composers_by_canvas_id[id];\n\t\t\tconst renderer = this._renderers_by_canvas_id[id];\n\t\t\tif (composer) {\n\t\t\t\tthis.set_composer_passes(id, composer, renderer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_composer_passes(id: string, composer: EffectComposer, renderer: WebGLRenderer) {\n\t\tconst set_in_progress = this._composers_set_in_progress_by_canvas_id[id];\n\t\tif (set_in_progress) {\n\t\t\treturn;\n\t\t}\n\t\tthis._composers_set_in_progress_by_canvas_id[id] = true;\n\n\t\tthis.clear_render_passes(composer);\n\n\t\tconst render_scene_pass = new RenderPass(this.node.scene.default_scene, this.node.object);\n\t\trender_scene_pass.clearAlpha = 0;\n\t\tcomposer.addPass(render_scene_pass);\n\n\t\tfor (let post_process_node of this._post_process_nodes) {\n\t\t\tpost_process_node.apply_to_composer(\n\t\t\t\tcomposer,\n\t\t\t\tthis.node.object,\n\t\t\t\tthis._resolution_by_canvas_id[id],\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\n\t\tdelete this._composers_set_in_progress_by_canvas_id[id];\n\t}\n\n\tprivate clear_render_passes(composer: EffectComposer) {\n\t\tlet render_pass: Pass | undefined;\n\t\twhile ((render_pass = composer.passes.pop())) {\n\t\t\tif (render_pass) {\n\t\t\t\tconst disposable_pass: DisposablePass = render_pass as DisposablePass;\n\t\t\t\tif (typeof disposable_pass.dispose === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdisposable_pass.dispose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this._render_passes = []\n\t\tcomposer.passes = [];\n\t}\n\n\tprivate composer_passes_nodes_changed(): boolean {\n\t\treturn true;\n\t\t// I have to evaluate the nodes anyway, in case they changed\n\t\t// unless I can create a method that can store if one of those nodes are the ones that\n\t\t// made this current node dirty\n\t}\n\n\t// add_params() {\n\t// \t// this.node.within_param_folder('post_process', () => {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'do_post_process', 0);\n\n\t// \tlodash_range(4).forEach((i) => {\n\t// \t\tconst toggle_param = this.node.add_param(ParamType.BOOLEAN, `use_post_process_node${i + 1}`, 0, {\n\t// \t\t\tvisible_if: {do_post_process: 1},\n\t// \t\t});\n\n\t// \t\tif (toggle_param) {\n\t// \t\t\tconst visible_options = {\n\t// \t\t\t\tdo_post_process: 1,\n\t// \t\t\t\t[toggle_param.name]: 1,\n\t// \t\t\t};\n\t// \t\t\tconst node_path_options = {\n\t// \t\t\t\tnode_selection: {context: NodeContext.POST},\n\t// \t\t\t\tvisible_if: visible_options,\n\t// \t\t\t};\n\t// \t\t\tconst param = this.node.add_param(\n\t// \t\t\t\tParamType.OPERATOR_PATH,\n\t// \t\t\t\t`post_process_node${i + 1}`,\n\t// \t\t\t\t'',\n\t// \t\t\t\tnode_path_options\n\t// \t\t\t);\n\t// \t\t\tif (param) {\n\t// \t\t\t\tthis._post_process_use_node_path_params.push(toggle_param);\n\t// \t\t\t\tthis._post_process_node_path_params.push(param);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// \t// });\n\t// }\n}\n","import {BaseParamType} from '../../../params/_Base';\nimport {ComplexParamJsonExporterData} from '../export/Param';\nimport {ParamType} from '../../../poly/ParamType';\n\nexport class ParamJsonImporter<T extends BaseParamType> {\n\tconstructor(protected _param: T) {}\n\n\tprocess_data(data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst raw_input = data['raw_input'];\n\t\t// const expression = data['expression'];\n\t\t// const components = data['components'];\n\t\t// if (expression !== undefined) {\n\t\t// \tthis._param.set(expression);\n\t\t// }\n\t\tif (raw_input !== undefined) {\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\n\t\t// const referenced_asset = data['referenced_asset']\n\t\t// if(referenced_asset){\n\t\t// \tthis._param.mark_as_referencing_asset(referenced_asset)\n\t\t// }\n\n\t\tthis.add_main(data);\n\t}\n\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {}\n}\n","import {TypedNode} from '../_Base';\nimport {EventContainer} from '../../containers/Event';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nexport class TypedEventNode<K extends NodeParamsConfig> extends TypedNode<'EVENT', BaseEventNodeType, K> {\n\tcontainer_controller: TypedContainerController<EventContainer> = new TypedContainerController<EventContainer>(\n\t\tthis,\n\t\tEventContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.EVENT;\n\t}\n\n\tprivate _eval_all_params_on_dirty_bound = this._eval_all_params_on_dirty.bind(this);\n\tinitialize_base_node() {\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false\n\t\t// });\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.add_post_dirty_hook('_eval_all_params_on_dirty', this._eval_all_params_on_dirty_bound);\n\t}\n\n\t// ensures that event nodes are cooked when scene is loaded\n\t_eval_all_params_on_dirty() {\n\t\tthis.params.eval_all();\n\t}\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n}\n\nexport type BaseEventNodeType = TypedEventNode<any>;\nexport class BaseEventNodeClass extends TypedEventNode<any> {}\n","import {BaseNodeType} from '../_Base';\nimport lodash_isNaN from 'lodash/isNaN';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\ntype Callback = () => void;\n\nexport class NameController {\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _on_set_name_hooks: Callback[] | undefined;\n\tprivate _on_set_full_path_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'node_name_controller');\n\t\t// this._graph_node.set_scene(this.node.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tstatic base_name(node: BaseNodeType) {\n\t\tlet base = node.type; //CoreString.class_name_to_type(this.self.type())\n\t\tconst last_char = base[base.length - 1];\n\t\tif (!lodash_isNaN(parseInt(last_char))) {\n\t\t\tbase += '_';\n\t\t}\n\t\treturn `${base}1`;\n\t}\n\n\trequest_name_to_parent(new_name: string) {\n\t\tconst parent = this.node.parent;\n\t\tif (parent && parent.children_allowed() && parent.children_controller) {\n\t\t\tparent.children_controller.set_child_name(this.node, new_name);\n\t\t} else {\n\t\t\tconsole.warn('request_name_to_parent failed, no parent found');\n\t\t}\n\t}\n\tset_name(new_name: string) {\n\t\tif (new_name != this.node.name) {\n\t\t\tthis.request_name_to_parent(new_name);\n\t\t}\n\t}\n\tupdate_name_from_parent(new_name: string) {\n\t\tthis.node._set_core_name(new_name);\n\t\tthis.post_set_name();\n\t\tthis.post_set_full_path();\n\t\tif (this.node.children_allowed()) {\n\t\t\tthis.node.children_controller?.children().forEach((child_node) => {\n\t\t\t\tchild_node.name_controller.post_set_full_path(); // TODO: typescript: replace post_set_full_path with execute_on_update_full_path_hooks or on_update_full_path\n\t\t\t});\n\t\t}\n\n\t\tif (this.node.lifecycle.creation_completed) {\n\t\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(this.node);\n\t\t\tthis.node.scene.expressions_controller.regenerate_referring_expressions(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAME_UPDATED);\n\t}\n\n\tadd_post_set_name_hook(hook: Callback) {\n\t\tthis._on_set_name_hooks = this._on_set_name_hooks || [];\n\t\tthis._on_set_name_hooks.push(hook);\n\t}\n\tadd_post_set_full_path_hook(hook: Callback) {\n\t\tthis._on_set_full_path_hooks = this._on_set_full_path_hooks || [];\n\t\tthis._on_set_full_path_hooks.push(hook);\n\t}\n\n\tpost_set_name() {\n\t\tif (this._on_set_name_hooks) {\n\t\t\tfor (let hook of this._on_set_name_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tpost_set_full_path() {\n\t\tif (this._on_set_full_path_hooks) {\n\t\t\tfor (let hook of this._on_set_full_path_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport lodash_compact from 'lodash/compact';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isEqual from 'lodash/isEqual';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamEvent} from '../../poly/ParamEvent';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nconst ALWAYS_REFERENCE_ASSET_OPTION = 'always_reference_asset';\nconst CALLBACK_OPTION = 'callback';\nconst CALLBACK_STRING_OPTION = 'callback_string';\n// const COLOR_OPTION = 'color';\nconst COOK_OPTION = 'cook';\nconst DESKTOP_BROWSE_OPTION = 'desktop_browse';\nconst FILE_TYPE_OPTION = 'file_type';\n// const EXPRESSION_ONLY_OPTION = 'expression_only';\nconst EXPRESSION = 'expression';\nconst FOR_ENTITIES = 'for_entities';\nconst LEVEL = 'level';\nconst MENU = 'menu';\nconst ENTRIES = 'entries';\n// const TYPE = 'type';\n// const RADIO = 'radio';\nconst MULTILINE_OPTION = 'multiline';\nconst LANGUAGE_OPTION = 'language';\nconst NODE_SELECTION = 'node_selection';\nconst NODE_SELECTION_CONTEXT = 'context';\nconst DEPENDENT_ON_FOUND_NODE = 'dependent_on_found_node';\nconst RANGE_OPTION = 'range';\nconst RANGE_LOCKED_OPTION = 'range_locked';\nconst STEP_OPTION = 'step';\nconst SPARE_OPTION = 'spare';\nconst TEXTURE_OPTION = 'texture';\nconst ENV_OPTION = 'env';\nconst HIDDEN_OPTION = 'hidden';\nconst LABEL_OPTION = 'label';\nconst FIELD_OPTION = 'field';\nconst VISIBLE_IF_OPTION = 'visible_if';\n\nexport interface ParamOptionsMenuEntry {\n\tname: string;\n\tvalue: number;\n}\nexport enum StringParamLanguage {\n\t// JAVASCRIPT = 'javascript',\n\tTYPESCRIPT = 'typescript',\n\t// GLSL = 'glsl',\n}\n\ninterface BaseParamOptions {\n\t// cook\n\tcook?: boolean;\n\t// spare\n\tspare?: boolean;\n\t// visible\n\thidden?: boolean;\n\tlabel?: boolean;\n\tfield?: boolean;\n\tvisible_if?: Dictionary<number | boolean>;\n}\ninterface MenuParamOptions {\n\tmenu?: {\n\t\t// type: 'radio';\n\t\tentries: ParamOptionsMenuEntry[];\n\t};\n}\ninterface ExpressionParamOptions {\n\texpression?: {\n\t\tfor_entities?: boolean;\n\t};\n}\n\ninterface NumberParamOptions extends BaseParamOptions {\n\trange?: Number2;\n\trange_locked?: Boolean2;\n\tstep?: number;\n}\ninterface AssetParamOptions {\n\talways_reference_asset?: boolean;\n}\ninterface DesktopParamOptions {\n\tdesktop_browse?: Dictionary<string>;\n}\ninterface CallbackParamOptions {\n\tcallback?: (node: BaseNodeType, param: BaseParamType) => any;\n\tcallback_string?: string;\n}\n\n// actual param options\nexport interface BooleanParamOptions\n\textends BaseParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface ButtonParamOptions extends BaseParamOptions, CallbackParamOptions {}\nexport interface ColorParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface FloatParamOptions\n\textends NumberParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface FolderParamOptions extends BaseParamOptions {\n\tlevel?: number;\n}\nexport interface IntegerParamOptions extends NumberParamOptions, MenuParamOptions, CallbackParamOptions {}\nexport interface OperatorPathParamOptions extends BaseParamOptions, DesktopParamOptions, CallbackParamOptions {\n\tnode_selection?: {\n\t\tcontext?: NodeContext;\n\t};\n\tdependent_on_found_node?: boolean;\n}\nexport interface RampParamOptions extends BaseParamOptions {}\nexport interface SeparatorParamOptions extends BaseParamOptions {}\nexport interface StringParamOptions\n\textends BaseParamOptions,\n\t\tAssetParamOptions,\n\t\tDesktopParamOptions,\n\t\tExpressionParamOptions {\n\tmultiline?: boolean;\n\tlanguage?: StringParamLanguage;\n}\nexport interface Vector2ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector3ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector4ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\n\nexport interface ParamOptions\n\textends NumberParamOptions,\n\t\tFolderParamOptions,\n\t\tExpressionParamOptions,\n\t\tButtonParamOptions,\n\t\tDesktopParamOptions,\n\t\tMenuParamOptions,\n\t\tStringParamOptions,\n\t\tOperatorPathParamOptions {\n\t// asset refererences\n\t// always_reference_asset?: boolean;\n\t// callback\n\t// callback?: (node: BaseNodeType, param: BaseParamType) => any;\n\t// callback_string?: string;\n\t// color\n\t// color?: [number, number, number] | string;\n\t// cook\n\t// cook?: boolean;\n\t// desktop\n\t// desktop_browse?: Dictionary<string>;\n\t// expression\n\t// expression_only?: boolean;\n\t// expression?: {\n\t// \tfor_entities?: boolean;\n\t// };\n\t// folder\n\t// level?:number\n\t// menu\n\t// menu?: {\n\t// \t// type: 'radio';\n\t// \tentries: ParamOptionsMenuEntry[];\n\t// };\n\t// multiline\n\t// multiline?: boolean;\n\t// node selection\n\t// node_selection?: {\n\t// \tcontext?: NodeContext;\n\t// };\n\t// dependent_on_found_node?: boolean;\n\t// spare\n\t// spare?: boolean;\n\t// texture\n\ttexture?: {\n\t\tenv?: boolean;\n\t};\n\t// visible\n\t// hidden?: boolean;\n\t// label?: boolean;\n\t// field?: boolean;\n\t// visible_if?: Dictionary<number | boolean>;\n}\n\nexport class OptionsController {\n\tprivate _programatic_visible_state: boolean = true;\n\tprivate _options!: ParamOptions;\n\tprivate _default_options!: ParamOptions;\n\tconstructor(private _param: BaseParamType) {\n\t\t// this._options = lodash_cloneDeep(this._default_options);\n\t}\n\n\tset(options: ParamOptions) {\n\t\tthis._default_options = options;\n\t\tthis._options = lodash_cloneDeep(this._default_options);\n\t}\n\tcopy(options_controller: OptionsController) {\n\t\tthis._default_options = lodash_cloneDeep(options_controller.default);\n\t\tthis._options = lodash_cloneDeep(options_controller.current);\n\t}\n\tset_option(name: keyof ParamOptions, value: any) {\n\t\treturn Object.assign(this._options, name, value);\n\t}\n\tget param() {\n\t\treturn this._param;\n\t}\n\tget node(): BaseNodeType {\n\t\treturn this._param.node;\n\t}\n\tget default() {\n\t\treturn this._default_options;\n\t}\n\tget current() {\n\t\treturn this._options;\n\t}\n\n\t// utils\n\tget has_options_overridden(): boolean {\n\t\treturn !lodash_isEqual(this._options, this._default_options);\n\t}\n\tget overridden_options(): ParamOptions {\n\t\tconst overriden: ParamOptions = {};\n\t\tconst option_names = Object.keys(this._options) as Array<keyof ParamOptions>;\n\t\tfor (let option_name of option_names) {\n\t\t\tif (!lodash_isEqual(this._options[option_name], this._default_options[option_name])) {\n\t\t\t\tObject.assign(overriden, option_name, lodash_cloneDeep(this._options[option_name]));\n\t\t\t}\n\t\t}\n\t\treturn overriden;\n\t}\n\tget overridden_option_names(): Array<keyof ParamOptions> {\n\t\treturn Object.keys(this.overridden_options) as Array<keyof ParamOptions>;\n\t}\n\n\t// referenced assets\n\tget always_reference_asset(): boolean {\n\t\treturn this._options[ALWAYS_REFERENCE_ASSET_OPTION] || false;\n\t}\n\n\t// callback\n\thas_callback() {\n\t\treturn this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n\t}\n\n\texecute_callback() {\n\t\t// we only allow execution when scene is loaded\n\t\t// to avoid errors such as an operator_path param\n\t\t// executing its callback before the node it points to is created\n\t\tif (!(this.node && this.node.scene.loading_controller.loaded)) {\n\t\t\treturn;\n\t\t}\n\t\tconst callback = this.get_callback();\n\t\tif (callback != null) {\n\t\t\tif (this.node && !this.node.cook_controller.is_cooking) {\n\t\t\t\tcallback(this.node, this.param);\n\t\t\t}\n\t\t}\n\t}\n\tprivate get_callback() {\n\t\tif (this.has_callback()) {\n\t\t\treturn (this._options[CALLBACK_OPTION] =\n\t\t\t\tthis._options[CALLBACK_OPTION] || this.create_callback_from_string());\n\t\t}\n\t}\n\tprivate create_callback_from_string() {\n\t\tconst callback_string = this._options[CALLBACK_STRING_OPTION];\n\t\tif (callback_string) {\n\t\t\tconst callback_function = new Function('node', 'scene', 'window', 'location', callback_string);\n\t\t\treturn () => {\n\t\t\t\tcallback_function(this.node, this.node.scene, null, null);\n\t\t\t};\n\t\t}\n\t}\n\n\t// color\n\t// color() {\n\t// \treturn this._options[COLOR_OPTION];\n\t// }\n\n\t// cook\n\tmakes_node_dirty_when_dirty() {\n\t\tlet cook_options;\n\n\t\t// false as the dirty state will go through the parent param\n\t\tif (this.param.parent_param != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet value = true;\n\t\tif ((cook_options = this._options[COOK_OPTION]) != null) {\n\t\t\tvalue = cook_options;\n\t\t}\n\t\treturn value;\n\t}\n\n\t// desktop\n\tget desktop_browse_option() {\n\t\treturn this._options[DESKTOP_BROWSE_OPTION];\n\t}\n\tget desktop_browse_allowed(): boolean {\n\t\treturn this.desktop_browse_option != null;\n\t}\n\tdesktop_browse_file_type(): string | null {\n\t\tif (this.desktop_browse_option) {\n\t\t\treturn this.desktop_browse_option[FILE_TYPE_OPTION];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// expression\n\t// get displays_expression_only() {\n\t// \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n\t// }\n\tget is_expression_for_entities(): boolean {\n\t\tconst expr_option = this._options[EXPRESSION];\n\t\tif (expr_option) {\n\t\t\treturn expr_option[FOR_ENTITIES] || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// folder\n\tget level() {\n\t\treturn this._options[LEVEL] || 0;\n\t}\n\n\t// menu\n\tget has_menu() {\n\t\treturn this.menu_options != null;\n\t}\n\n\tprivate get menu_options() {\n\t\treturn this._options[MENU];\n\t}\n\t// private get menu_type() {\n\t// \tif(this.menu_options){\n\t// \t\treturn this.menu_options[TYPE];\n\t// \t}\n\t// }\n\n\tget menu_entries() {\n\t\tif (this.menu_options) {\n\t\t\treturn this.menu_options[ENTRIES];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tget has_menu_radio() {\n\t\treturn this.has_menu; //&& this.menu_options[TYPE] === RADIO;\n\t}\n\n\t// multiline\n\tget is_multiline(): boolean {\n\t\treturn this._options[MULTILINE_OPTION] === true;\n\t}\n\tget language(): StringParamLanguage | undefined {\n\t\treturn this._options[LANGUAGE_OPTION];\n\t}\n\tget is_code(): boolean {\n\t\treturn this.language != null;\n\t}\n\n\t// node selection\n\tget node_selection_options() {\n\t\treturn this._options[NODE_SELECTION];\n\t}\n\tget node_selection_context() {\n\t\tif (this.node_selection_options) {\n\t\t\treturn this.node_selection_options[NODE_SELECTION_CONTEXT];\n\t\t}\n\t}\n\n\tdependent_on_found_node() {\n\t\tif (DEPENDENT_ON_FOUND_NODE in this._options) {\n\t\t\treturn this._options[DEPENDENT_ON_FOUND_NODE];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// range\n\tget range(): Number2 {\n\t\t// cannot force range easily, as values are not necessarily from 0 to N\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [0, this.self.menu_entries().length-1 ]\n\t\t// } else {\n\t\treturn this._options[RANGE_OPTION] || [0, 1];\n\t\t// }\n\t}\n\tget step(): number {\n\t\treturn this._options[STEP_OPTION] || 0.01;\n\t}\n\n\tprivate range_locked(): Boolean2 {\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [true, true]\n\t\t// } else {\n\t\treturn this._options[RANGE_LOCKED_OPTION] || [false, false];\n\t\t// }\n\t}\n\n\tensure_in_range(value: number): number {\n\t\tconst range = this.range;\n\n\t\tif (value >= range[0] && value <= range[1]) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tif (value < range[0]) {\n\t\t\t\treturn this.range_locked()[0] === true ? range[0] : value;\n\t\t\t} else {\n\t\t\t\treturn this.range_locked()[1] === true ? range[1] : value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// spare\n\tget is_spare(): boolean {\n\t\treturn this._options[SPARE_OPTION] || false;\n\t}\n\n\t// texture\n\tget texture_options() {\n\t\treturn this._options[TEXTURE_OPTION];\n\t}\n\ttexture_as_env(): boolean {\n\t\tconst texture_options = this.texture_options;\n\t\tif (texture_options != null) {\n\t\t\treturn texture_options[ENV_OPTION] === true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// visible\n\tget is_hidden(): boolean {\n\t\treturn this._options[HIDDEN_OPTION] === true || this._programatic_visible_state === false;\n\t}\n\tget is_visible(): boolean {\n\t\treturn !this.is_hidden;\n\t}\n\tset_visible_state(state: boolean) {\n\t\tthis._options[HIDDEN_OPTION] = !state;\n\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t}\n\n\tget is_label_hidden(): boolean {\n\t\tconst type = this.param.type;\n\t\treturn (\n\t\t\tthis._options[LABEL_OPTION] === false ||\n\t\t\ttype === ParamType.BUTTON ||\n\t\t\ttype === ParamType.SEPARATOR ||\n\t\t\t(type === ParamType.BOOLEAN && this.is_field_hidden())\n\t\t);\n\t}\n\tis_field_hidden(): boolean {\n\t\treturn this._options[FIELD_OPTION] === false;\n\t}\n\n\t// programatic visibility\n\tui_data_depends_on_other_params(): boolean {\n\t\treturn VISIBLE_IF_OPTION in this._options;\n\t}\n\tvisibility_predecessors() {\n\t\tconst predecessor_names = Object.keys(this._options[VISIBLE_IF_OPTION] || {});\n\t\tconst node = this.param.node;\n\t\treturn lodash_compact(\n\t\t\tpredecessor_names.map((name) => {\n\t\t\t\tconst param = node.params.get(name);\n\t\t\t\tif (param) {\n\t\t\t\t\treturn param;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`param ${name} not found as visibility condition for ${this.param.name} in node ${this.param.node.type}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate _update_visibility_and_remove_dirty_bound = this.update_visibility_and_remove_dirty.bind(this);\n\tprivate _visibility_graph_node: CoreGraphNode | undefined;\n\tprivate _ui_data_dependency_set: boolean = false;\n\tset_ui_data_dependency() {\n\t\tif (this._ui_data_dependency_set) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ui_data_dependency_set = true;\n\t\tconst predecessors = this.visibility_predecessors();\n\t\tif (predecessors.length > 0) {\n\t\t\tthis._visibility_graph_node = new CoreGraphNode(this.param.scene, 'param_visibility');\n\t\t\tfor (let predecessor of predecessors) {\n\t\t\t\tthis._visibility_graph_node.add_graph_input(predecessor);\n\t\t\t}\n\t\t\tthis._visibility_graph_node.add_post_dirty_hook(\n\t\t\t\t'_update_visibility_and_remove_dirty',\n\t\t\t\tthis._update_visibility_and_remove_dirty_bound\n\t\t\t);\n\t\t}\n\t}\n\tprivate update_visibility_and_remove_dirty() {\n\t\tthis.update_visibility();\n\t\tthis.param.remove_dirty_state();\n\t}\n\n\tasync update_visibility() {\n\t\tconst options = this._options[VISIBLE_IF_OPTION];\n\t\tif (options) {\n\t\t\tconst params = this.visibility_predecessors();\n\t\t\tconst promises = params.map((p) => p.compute());\n\t\t\tthis._programatic_visible_state = true;\n\t\t\tawait Promise.all(promises);\n\t\t\tfor (let param of params) {\n\t\t\t\tconst expected_val = options[param.name];\n\t\t\t\tconst val = param.value;\n\t\t\t\tif (expected_val != val) {\n\t\t\t\t\tthis._programatic_visible_state = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport lodash_isString from 'lodash/isString';\n// import {ParsedTree} from './ParsedTree'\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesController} from './MissingReferencesController'\nexport const VARIABLE_PREFIX = '$';\n\nexport abstract class BaseTraverser {\n\t// private _parsed_tree: ParsedTree\n\tpublic _error_message: string | undefined;\n\n\tconstructor(public param: BaseParamType) {}\n\n\tprotected clear_error() {\n\t\tthis._error_message = undefined;\n\t}\n\tprotected set_error(message: string) {\n\t\tthis._error_message = this._error_message || message;\n\t\t// throw this.error_message\n\t}\n\tprotected _set_error_from_error_bound = this._set_error_from_error.bind(this);\n\tprivate _set_error_from_error(error: Error | string) {\n\t\tif (lodash_isString(error)) {\n\t\t\tthis._error_message = error;\n\t\t} else {\n\t\t\tthis._error_message = error.message;\n\t\t}\n\t}\n\tget is_errored(): boolean {\n\t\treturn this._error_message != null;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\treset() {\n\t\tthis._error_message = undefined;\n\t}\n\n\ttraverse_node(node: jsep.Expression): string | undefined {\n\t\tconst method_name = `traverse_${node.type}`;\n\t\tconst method = (this as any)[method_name];\n\t\tif (method) {\n\t\t\treturn (this as any)[method_name](node);\n\t\t} else {\n\t\t\tthis.set_error(`expression unknown node type: ${node.type}`);\n\t\t}\n\t}\n\n\tprotected abstract traverse_CallExpression(node: jsep.CallExpression): string | undefined; //{\n\n\t// const method_arguments = node.arguments.map((arg)=>{\n\t// \treturn this.traverse_node(arg)\n\t// })\n\t// const method_name = node.callee.name\n\n\t// // literal construct (if...)\n\t// const literal_contruct = this[`traverse_literal_construct_${node.type}`] //LITERAL_CONSTRUCT[method_name]\n\t// if(literal_contruct){\n\t// \treturn literal_contruct.bind(this)(method_arguments)\n\t// }\n\n\t// // direct expressions (Math.floor, Math.sin...)\n\t// const arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`\n\t// const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name]\n\t// if(direct_function_name){\n\t// \treturn `${direct_function_name}(${arguments_joined})`\n\t// }\n\n\t// // indirect methods (points_count, asset...)\n\t// const indirect_method = INDIRECT_EXPRESSION_METHODS[method_name]\n\t// if(indirect_method){\n\t// \tthis._create_method_and_dependencies(node, method_name, arguments_joined)\n\t// \treturn `await methods[${this.method_index}].process_arguments(${arguments_joined})`\n\t// }\n\n\t// this.set_error(`unknown method: ${method_name}`)\n\t//}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_ConditionalExpression(node: jsep.ConditionalExpression): string {\n\t\treturn `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n\t\t\tnode.alternate\n\t\t)})`;\n\t}\n\n\t// currently only used for string expressions such as\n\t// pt_`@ptnum+1`\n\tprotected traverse_Compound(node: jsep.Compound): string {\n\t\tconst args = node.body;\n\t\tlet traversed_args = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg_node = args[i];\n\t\t\tif (arg_node.type == 'Identifier') {\n\t\t\t\tif ((arg_node as jsep.Identifier).name[0] == VARIABLE_PREFIX) {\n\t\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t\t} else {\n\t\t\t\t\ttraversed_args.push(`'${(arg_node as jsep.Identifier).name}'`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t}\n\t\t}\n\t\treturn traversed_args.join(' + ');\n\t\t// this may work for things like  [1,-2,3][$F%2]\n\t\t// but can be confusing for more operators like [1,-2,3][$F%2][2]\n\n\t\t// console.log(node)\n\t\t// return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(node.alternate)})`\n\t\t// this.set_error(\"unrecognised expression Compound\")\n\t\t// return \"\"\n\t}\n\tprotected abstract traverse_UnaryExpression(node: jsep.UnaryExpression): string; //{\n\n\t// if (node.operator === ATTRIBUTE_PREFIX) {\n\t// \tconst attrib_name = this.traverse_node(node.argument);\n\t// \treturn `param.entity_attrib_value(${QUOTE}${attrib_name}${QUOTE})`\n\t// } else {\n\t// \treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t// }\n\t//}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected abstract traverse_Identifier(node: jsep.Identifier): string | undefined; //{\n\t// const identifier_first_char = node.name[0]\n\t// if(identifier_first_char == VARIABLE_PREFIX){\n\t// \tconst identifier_name_without_dollar_sign = node.name.substr(1)\n\n\t// \t// globals constants: Math.PI or Math.E\n\t// \tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign]\n\t// \tif(direct_constant_name){\n\t// \t\treturn direct_constant_name\n\t// \t}\n\n\t// \t// scene or node globals: $F, $CH, $OS\n\t// \tconst method_name = `Identifier_${identifier_name_without_dollar_sign}_body`\n\t// \tconst method = this[method_name]\n\t// \tif(method){\n\t// \t\treturn this[method_name]()\n\t// \t}else{\n\t// \t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t// \t}\n\n\t// } else {\n\t// \treturn node.name // @ptnum will call this method and return \"ptnum\"\n\t// }\n\t//}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\t// abstract Identifier_F_body(): string //{\n\t// this.dependencies.push(this.param.scene().context())\n\t// return `param.scene().frame()`\n\t//}\n\t// abstract Identifier_CH_body(): string //{\n\t// return `${QUOTE}${this.param.name()}${QUOTE}`\n\t//}\n\t// TODO:\n\t// '$CEX': '_eval_identifier_as_expression_centroid_x',\n\t// '$CEY': '_eval_identifier_as_expression_centroid_y',\n\t// '$CEZ': '_eval_identifier_as_expression_centroid_z',\n\t// '$CH': '_eval_identifier_as_param_name',\n\t// '$OS': '_eval_identifier_as_node_name',\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\t// protected _create_method_and_dependencies(node: jsep.CallExpression, method_name: string, arguments_joined: string) {\n\t// \tconst method_constructor = Method[method_name]\n\t// \tconst method = new method_constructor(this.param)\n\t// \tthis.method_index += 1\n\t// \tthis.methods[this.method_index] = method\n\n\t// \tconst dependency_arguments_function = new Function(`return [${arguments_joined}]`)\n\t// \tconst dependency_arguments = dependency_arguments_function()\n\n\t// \tconst reference_search_result = method.find_dependencies(dependency_arguments)\n\t// \treference_search_result.found_graph_nodes.forEach((graph_node)=>{\n\t// \t\tthis.dependencies.push(graph_node)\n\t// \t})\n\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(node)\n\t// \t})\n\t// }\n}\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\nexport const AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n","// import lodash_each from 'lodash/each'\nimport lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber'\nimport {TypedParam} from './_Base';\n// import {TypedParamVisitor} from './_Base';\n// import {AsCodeString} from './concerns/visitors/String';\n// import {ExpressionController} from '../expressions/ExpressionController'\nimport {ParsedTree} from '../expressions/traversers/ParsedTree';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\n\nexport class StringParam extends TypedParam<ParamType.STRING> {\n\tstatic type() {\n\t\treturn ParamType.STRING;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.STRING]) {\n\t\treturn `${raw_input}`;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.STRING],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.STRING]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.STRING], val2: ParamValuesTypeMap[ParamType.STRING]) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\tconvert(raw_val: any): string {\n\t\tif (lodash_isString(raw_val)) {\n\t\t\treturn raw_val;\n\t\t}\n\t\treturn `${raw_val}`;\n\t}\n\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tif (this._value_elements(this._raw_input).length >= 3) {\n\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\tthis.set_dirty();\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._raw_input != this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\tif (this._expression_controller) {\n\t\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(`expression error: ${this.expression_controller.error_message}`);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\t// we need to check if equal nulls explicitely\n\t\t\t\t// as the empty string '' evals to false...\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tthis._value = converted;\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`expression returns an invalid type (${expression_result})`);\n\t\t\t\t}\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _value_elements(v: string): string[] {\n\t\treturn ParsedTree.string_value_elements(v);\n\t}\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedGlNode, BaseGlNodeType} from './_Base';\n// import {BaseNodeGlMathFunctionArg1} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {BaseNamedConnectionPointType} from '../utils/connections/NamedConnectionPoint';\nimport {ParamType} from '../../poly/ParamType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport const ConnectionPointTypesAvailableForAttribute = [\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttributeGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypesAvailableForAttribute.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\nconst ParamsConfig = new AttributeGlParamsConfig();\n\nexport class AttributeGlNode extends TypedGlNode<AttributeGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attribute';\n\t}\n\tstatic readonly INPUT_NAME = 'export';\n\tstatic readonly OUTPUT_NAME = 'val';\n\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile_if_is_exporting.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [\n\t\t\tConnectionPointTypesAvailableForAttribute[this.pv.type],\n\t\t]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\tcreate_params() {\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.add_param(ParamType.BOOLEAN, 'export_when_connected', 0);\n\t\t}\n\t}\n\t// inputless_params_names(): string[] {\n\t// \treturn ['type'];\n\t// }\n\n\tget input_name() {\n\t\treturn AttributeGlNode.INPUT_NAME;\n\t}\n\tget output_name() {\n\t\treturn AttributeGlNode.OUTPUT_NAME;\n\t}\n\n\t// private create_inputs_from_params() {\n\t// \tif (this.material_node.allow_attribute_exports) {\n\t// \t\t// this.set_named_inputs([new TypedConnectionFloat(AttributeGlNode.input_name())]);\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(INPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t// \t\t]);\n\t// \t\t// this._init_graph_node_inputs();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_attribute(\n\t\t\tthis,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// }\n\t}\n\n\t// update_output_type(constructor) {\n\t// \tconst named_output = new constructor(Attribute.output_name());\n\t// \tthis.set_named_outputs([named_output]);\n\t// }\n\t// update_input_type(constructor) {\n\t// \tconst named_input = new constructor(Attribute.input_name());\n\t// \tthis.set_named_inputs([named_input]);\n\t// \tthis._init_graph_node_inputs();\n\t// }\n\n\tget attribute_name(): string {\n\t\treturn lodash_trim(this.pv.name);\n\t}\n\tgl_type(): ConnectionPointType {\n\t\treturn this.io.outputs.named_output_connection_points[0].type;\n\t}\n\t//\n\t//\n\t// Utility methods for SOP/ParticlesSystemGPU and Assembler/Particles\n\t//\n\t//\n\tconnected_input_node(): BaseGlNodeType | null {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t// }\n\t}\n\tconnected_input_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\treturn this.io.inputs.named_input_connection_point(AttributeGlNode.INPUT_NAME);\n\t}\n\t// connected_input(): NamedConnection {\n\t// \tconst connection_point = this.connected_input_connection_point();\n\t// \tif (connection_point) {\n\t// \t\treturn this.io.inputs.named_inputs().filter((ni) => ni.name() == Attribute.input_name())[0];\n\t// \t}\n\t// }\n\toutput_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.outputs.named_output_connection_points_by_name(this.input_name);\n\t\t// }\n\t}\n\t// connected_output(): NamedConnection {\n\t// \tconst output = this.named_output(0);\n\t// \tif (output) {\n\t// \t\treturn output; //this.named_inputs().filter(ni=>ni.name() == Attribute.input_name())[0]\n\t// \t}\n\t// }\n\tget is_importing(): boolean {\n\t\treturn this.io.outputs.used_output_names().length > 0; // TODO: typescript - ensure that we can check that the connected outputs are part of the nodes retrived by the node traverser\n\t}\n\tget is_exporting(): boolean {\n\t\tif (this.pv.export_when_connected) {\n\t\t\tconst input_node = this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t\treturn input_node != null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tprivate _set_mat_to_recompile_if_is_exporting() {\n\t\tif (this.is_exporting) {\n\t\t\tthis._set_mat_to_recompile();\n\t\t}\n\t}\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// SIGNATURE\n\t//\n\t//\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_input_and_output_types();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// \tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t// }\n\t// private update_input_and_output_types() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this.output_name, ConnectionPointTypesAvailableForAttribute[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// \tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(this.input_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t// \t\t]);\n\t// \t}\n\t// }\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonExporter} from './Node';\n// import {BaseNodeObjJsonExporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonExporter} from './node/Subnetwork';\n\nimport {ParamJsonExporter} from './Param';\n// import {ParamMultipleJsonExporter} from './param/Multiple';\nimport {ParamNumericJsonExporter} from './param/Numeric';\nimport {ParamOperatorPathJsonExporter} from './param/OperatorPath';\nimport {ParamStringJsonExporter} from './param/String';\nimport {ParamRampJsonExporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\n// import {TypedMultipleParam} from '../../../params/_Multiple';\nimport {TypedNumericParam} from '../../../params/_Numeric';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonExportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonExporter(node);\n\t\t// }\n\t\treturn new NodeJsonExporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\t// if (param instanceof TypedMultipleParam) {\n\t\t// \treturn new ParamMultipleJsonExporter(param);\n\t\t// }\n\t\tif (param instanceof TypedNumericParam) {\n\t\t\treturn new ParamNumericJsonExporter(param);\n\t\t}\n\t\tif (param instanceof OperatorPathParam) {\n\t\t\treturn new ParamOperatorPathJsonExporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonExporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonExporter(param);\n\t\t}\n\t\treturn new ParamJsonExporter(param);\n\t}\n}\n","export enum LineType {\n\tFUNCTION_DECLARATION = 'function_declaration',\n\tDEFINE = 'define',\n\tBODY = 'body',\n}\n","import {AssemblerControllerNode} from '../Controller';\n\nexport class GlNodeFinder {\n\tstatic find_output_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('output');\n\t\treturn nodes;\n\t\t// if (nodes.length > 1) {\n\t\t// \tnode.states.error.set('only one output node allowed');\n\t\t// }\n\t\t// return nodes[0];\n\t}\n\tstatic find_attribute_export_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('attribute');\n\t\treturn nodes.filter((node) => {\n\t\t\t// do not use attributes that are used as an input, as export\n\t\t\t// return (node.used_output_names().length == 0) &&\n\t\t\treturn node.is_exporting;\n\t\t});\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedCameraControlsEventNode, CameraControls} from './_BaseCameraControls';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CameraOrbitEventParamsConfig extends NodeParamsConfig {\n\tallow_pan = ParamConfig.BOOLEAN(1);\n\tallow_rotate = ParamConfig.BOOLEAN(1);\n\tallow_zoom = ParamConfig.BOOLEAN(1);\n\ttdamping = ParamConfig.BOOLEAN(1);\n\tdamping = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {tdamping: true},\n\t});\n\tscreen_space_panning = ParamConfig.BOOLEAN(1);\n\trotate_speed = ParamConfig.FLOAT(0.5);\n\tmin_distance = ParamConfig.FLOAT(1, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tmax_distance = ParamConfig.FLOAT(50, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tpolar_angle_range = ParamConfig.VECTOR2([0, '$PI']);\n}\nconst ParamsConfig = new CameraOrbitEventParamsConfig();\n\nexport class CameraOrbitControlsEventNode extends TypedCameraControlsEventNode<CameraOrbitEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'camera_orbit_controls';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['controls/OrbitControls'];\n\t// }\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// const c = this.constructor as typeof CameraOrbitControlsEventNode;\n\t\t// const {OrbitControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\tconst controls = new OrbitControls(camera, element);\n\t\treturn controls;\n\t}\n\n\tsetup_controls(controls: OrbitControls) {\n\t\tcontrols.enablePan = this.pv.allow_pan;\n\t\tcontrols.enableRotate = this.pv.allow_rotate;\n\t\tcontrols.enableZoom = this.pv.allow_zoom;\n\n\t\tcontrols.enableDamping = this.pv.tdamping;\n\t\tcontrols.dampingFactor = this.pv.damping;\n\n\t\tcontrols.rotateSpeed = this.pv.rotate_speed;\n\n\t\tcontrols.screenSpacePanning = this.pv.screen_space_panning;\n\n\t\tcontrols.minDistance = this.pv.min_distance;\n\t\tcontrols.maxDistance = this.pv.max_distance;\n\n\t\tcontrols.minPolarAngle = this.pv.polar_angle_range.x;\n\t\tcontrols.maxPolarAngle = this.pv.polar_angle_range.y;\n\n\t\t// to prevent moving the camera when using the arrows to change frame\n\t\tcontrols.enableKeys = false;\n\t}\n\n\tset_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void {\n\t\tconst target = camera_node.params.vector3('target');\n\t\tcontrols.target.copy(target);\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {BaseMatNodeType} from '../_Base';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {BaseCopNodeType} from '../../cop/_Base';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {BooleanParam} from '../../../params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.OPERATOR_PATH(FileCopNode.DEFAULT_NODE_PATH.UV, {visible_if: {use_map: 1}});\n\t};\n}\n// class TextureMapMaterial<T extends string> extends Material {\n// \t[T]!: Texture | null;\n// }\n// class TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\n// class TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n// \tcreate_material() {\n// \t\treturn new TextureMapMaterial();\n// \t}\n// }\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\n// type test = FilterFlags<MeshLambertMaterial, Texture|null>\n// type test2 = AllowedNames<MeshLambertMaterial, Texture|null>\n// type test3 = SubType<MeshLambertMaterial, Texture|null>\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\nexport function OperatorPathOptions(controller: typeof BaseTextureMapController, use_map_name: string) {\n\treturn {\n\t\tvisible_if: {[use_map_name]: 1},\n\t\tnode_selection: {context: NodeContext.COP},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\ntype TextureUpdateCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\ttexture: Texture\n) => void;\ntype TextureRemoveCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>\n) => void;\n\ntype CurrentMaterial = Material | ShaderMaterial;\n\nexport interface UpdateOptions {\n\tdirect_params?: boolean;\n\tuniforms?: boolean;\n\tdefine?: boolean;\n}\nexport class BaseTextureMapController extends BaseController {\n\tconstructor(protected node: BaseMatNodeType, protected _update_options: UpdateOptions) {\n\t\tsuper(node);\n\t\tif (this._update_options.define == null) {\n\t\t\tthis._update_options.define = true;\n\t\t}\n\t}\n\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: OperatorPathParam) {\n\t\tuse_map_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t\tpath_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\tstatic update(node: BaseNodeType) {}\n\n\tasync _update<M extends CurrentMaterial>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: string,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tif (this._update_options.uniforms) {\n\t\t\tconst shader_material = material as ShaderMaterial;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<IUniforms, Texture | null>;\n\t\t\tawait this._update_texture_on_uniforms(shader_material, attr_name, use_map_param, path_param);\n\t\t}\n\t\tif (this._update_options.direct_params) {\n\t\t\tconst mat = material as Material;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<Material, Texture | null>;\n\t\t\tawait this._update_texture_on_material(mat, attr_name, use_map_param, path_param);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE UNIFORMS\n\t//\n\t//\n\tasync _update_texture_on_uniforms<O extends IUniform>(\n\t\tmaterial: ShaderMaterial,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial.uniforms,\n\t\t\tmat_attrib_name as never,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_uniforms.bind(this),\n\t\t\tthis._remove_texture_from_uniforms.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_uniforms<O extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = uniforms[mat_attrib_name] != null && uniforms[mat_attrib_name].value != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>uniforms[mat_attrib_name].value) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\tuniforms[mat_attrib_name].value = texture as any;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tmaterial.defines[define_name] = 1;\n\t\t\t}\n\t\t\tmaterial.defines['USE_UV'] = 1;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_uniforms<U extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: U,\n\t\tmat_attrib_name: keyof SubType<U, Texture | null>\n\t) {\n\t\tif (uniforms[mat_attrib_name].value) {\n\t\t\tuniforms[mat_attrib_name].value = null;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tdelete material.defines[define_name];\n\t\t\t}\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _define_name(mat_attrib_name: string): string {\n\t\treturn 'USE_' + mat_attrib_name.replace('_', '').toUpperCase();\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL\n\t//\n\t//\n\tasync _update_texture_on_material<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial,\n\t\t\tmat_attrib_name,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_material.bind(this),\n\t\t\tthis._remove_texture_from_material.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = texture_owner[mat_attrib_name] != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>texture_owner[mat_attrib_name]) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\ttexture_owner[mat_attrib_name] = texture as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>\n\t) {\n\t\tif (texture_owner[mat_attrib_name]) {\n\t\t\ttexture_owner[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// MAIN ALGO to decide if texture should be updated\n\t//\n\t//\n\tprivate async _update_required_attribute<O extends Object>(\n\t\tmaterial: Material,\n\t\ttexture_owner: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam,\n\t\tupdate_callback: TextureUpdateCallback<O>,\n\t\tremove_callback: TextureRemoveCallback<O>\n\t) {\n\t\tif (use_map_param.is_dirty) {\n\t\t\tawait use_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.is_dirty) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst found_node = path_param.found_node();\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t\t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t\t\t\t\tconst container = await texture_node.request_container();\n\t\t\t\t\tconst texture = container.texture();\n\n\t\t\t\t\tif (texture) {\n\t\t\t\t\t\tupdate_callback(material, texture_owner, mat_attrib_name, texture);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.node.states.error.set(`found node has no texture`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set(`found map node is not a COP node`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set(`could not find map node ${path_param.name} with path ${path_param.value}`);\n\t\t\t}\n\t\t}\n\t\t// this is not wrapped in an else clause after the \"if (use_map) {\"\n\t\t// as we should come here after any of the errors above, if any is triggered\n\t\tremove_callback(material, texture_owner, mat_attrib_name);\n\t}\n\n\tprivate _do_update_define(): boolean {\n\t\tif (this._update_options.define == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._update_options.define;\n\t}\n}\n","import {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderAssemblerCustomMeshDistance} from './CustomMeshDistance';\nimport {ShaderAssemblerCustomMeshDepth} from './CustomMeshDepth';\nimport {ShaderAssemblerCustomMeshDepthDOF} from './CustomMeshDepthDOF';\n\nconst ASSEMBLER_MAP: CustomAssemblerMap = new Map([\n\t// [CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance],\n\t// [CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth],\n\t// [CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF],\n]);\nASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF);\n\nexport abstract class ShaderAssemblerMesh extends ShaderAssemblerMaterial {\n\t// TODO: I've noticed a case where instances would not display when those shadow shaders were exported\n\t// But the objects display fine if those are not assigned\n\t// so it could be a bug at render time (not sure if my code, threejs or hardware)\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn ASSEMBLER_MAP;\n\t}\n}\n","import {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {Light} from 'three/src/lights/Light';\nimport {Color} from 'three/src/math/Color';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {Group} from 'three/src/objects/Group';\n\nexport abstract class TypedLightObjNode<L extends Light, K extends NodeParamsConfig> extends TypedObjNode<Group, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.LIGHT;\n\tprotected _color_with_intensity = new Color(0x00000);\n\tprotected _light!: L;\n\tget light() {\n\t\treturn this._light;\n\t}\n\tprotected abstract create_light(): L;\n\tprotected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis._light = this.create_light();\n\t\tthis.object.add(this._light);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis.update_light_attachment();\n\t\t});\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.used_in_scene) {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\tprivate update_light_attachment() {\n\t\tif (this.flags.display.active) {\n\t\t\tthis.object.add(this.light);\n\t\t\tthis._cook_main_without_inputs_when_dirty();\n\t\t} else {\n\t\t\tthis.object.remove(this.light);\n\t\t}\n\t}\n\n\t// create_params() {\n\t// \t// this.create_light_params();\n\t// \t// this.create_shadow_params_main();\n\t// }\n\n\tcreate_shadow_params_main() {\n\t\tif (this._light.shadow != null) {\n\t\t\treturn this.create_shadow_params();\n\t\t}\n\t}\n\n\tprotected create_light_params(): void {}\n\tprotected update_light_params(): void {}\n\n\tprotected create_shadow_params() {\n\t\treturn;\n\t\t// this.add_param('toggle', 'cast_shadows', 1);\n\t\t// shadow_options = {visible_if: {cast_shadows: 1}}\n\t\t// this.add_param( 'vector2', 'shadow_res', [1024, 1024], shadow_options );\n\t\t// this.add_param( 'float', 'shadow_near', 0.1, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_far', 100, shadow_options );\n\t\t// // this.add_param( 'float', 'shadow_far', 500 ) # same as param distance\n\t\t// this.add_param( 'float', 'shadow_bias', -0.0001, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_blur', 1, shadow_options );\n\t}\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tcook() {\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\tupdate_shadow_params() {\n\t\t// let object;\n\t\t// return;\n\t\t// if (((object = this.object()) != null) && (object.shadow != null)) {\n\t\t// \tobject.castShadow = this._param_cast_shadow;\n\t\t// \tobject.shadow.mapSize.width = this._param_shadow_res.x;\n\t\t// \tobject.shadow.mapSize.height = this._param_shadow_res.y;\n\t\t// \tobject.shadow.camera.near = this._param_shadow_near;\n\t\t// \tobject.shadow.camera.far = this._param_shadow_far;\n\t\t// \treturn object.shadow.bias = this._param_shadow_bias;\n\t\t// }\n\t}\n\n\tget color_with_intensity() {\n\t\tconst color = this.params.color('color');\n\t\tconst intensity = this.params.float('intensity');\n\t\tthis._color_with_intensity.copy(color).multiplyScalar(intensity);\n\t\treturn this._color_with_intensity;\n\t}\n\tget active(): boolean {\n\t\treturn this.flags.display.active;\n\t}\n}\n\nexport type BaseLightObjNodeType = TypedLightObjNode<Light, NodeParamsConfig>;\n// export class BaseLightObjNodeClass extends TypedLightObjNode<Light, NodeParamsConfig> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {Material} from 'three/src/materials/Material';\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Bone} from 'three/src/objects/Bone';\n\n// import {CoreConstant} from './Constant'\nimport {CoreGeometry} from './Geometry';\nimport {GroupString} from './Group';\nimport {CoreAttribute} from './Attribute';\nimport {CoreConstant} from './Constant';\nimport {CorePoint} from './Point';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from './Material';\nimport {CoreString} from '../String';\n\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreEntity} from './Entity';\nconst PTNUM = 'ptnum';\nconst NAME_ATTR = 'name';\nconst ATTRIBUTES = 'attributes';\n\ninterface Object3DWithAnimations extends Object3D {\n\tanimations: AnimationClip[];\n}\ninterface MaterialWithColor extends Material {\n\tcolor: Color;\n}\n// interface SkinnedMeshWithisSkinnedMesh extends SkinnedMesh {\n// \treadonly isSkinnedMesh: boolean;\n// }\n\nexport class CoreObject extends CoreEntity {\n\tconstructor(private _object: Object3D, index: number) {\n\t\tsuper(index);\n\t\tif (this._object.userData[ATTRIBUTES] == null) {\n\t\t\tthis._object.userData[ATTRIBUTES] = {};\n\t\t}\n\t}\n\n\t// set_index(i: number) {\n\t// \tthis._index = i;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tgeometry() {\n\t\treturn (this._object as Mesh).geometry as BufferGeometry;\n\t}\n\tcore_geometry(): CoreGeometry {\n\t\tconst geo = this.geometry();\n\t\treturn new CoreGeometry(geo);\n\t\t// const geo = this.geometry()\n\t\t// if (geo) {\n\t\t// \treturn new CoreGeometry(geo)\n\t\t// } else {\n\t\t// \treturn null\n\t\t// }\n\t}\n\tpoints() {\n\t\treturn this.core_geometry().points();\n\t}\n\tpoints_from_group(group: GroupString): CorePoint[] {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tif (indices) {\n\t\t\t\tconst points = this.points();\n\t\t\t\treturn indices.map((i) => points[i]);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis.core_geometry().compute_vertex_normals();\n\t}\n\n\tadd_attribute(name: string, value: AttribValue) {\n\t\tlet data;\n\t\tif (!lodash_isNumber(value) && !lodash_isArray(value) && !lodash_isString(value)) {\n\t\t\tdata = (value as Vector3).toArray();\n\t\t} else {\n\t\t\tdata = value;\n\t\t}\n\t\tthis._object.userData[ATTRIBUTES][name] = data;\n\t}\n\tadd_numeric_attrib(name: string, value: NumericAttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tset_attrib_value(name: string, value: AttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\t\tthis.core_geometry().add_numeric_attrib(name, size, default_value);\n\t}\n\n\tattribute_names(): string[] {\n\t\t// TODO: to remove\n\t\treturn Object.keys(this._object.userData[ATTRIBUTES]);\n\t}\n\tattrib_names(): string[] {\n\t\treturn this.attribute_names();\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\treturn this.attribute_names().includes(name);\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tthis.add_attribute(new_name, this.attrib_value(old_name));\n\t\tthis.delete_attribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tdelete this._object.userData[ATTRIBUTES][name];\n\t}\n\n\tattrib_value(name: string): AttribValue {\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet val = this._object.userData[ATTRIBUTES][name];\n\t\t\tif (val == null) {\n\t\t\t\tif (name == NAME_ATTR) {\n\t\t\t\t\tval = this._object.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t}\n\tname(): string {\n\t\treturn this.attrib_value(NAME_ATTR) as string;\n\t}\n\thuman_type(): string {\n\t\treturn CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[this._object.constructor.name];\n\t}\n\n\tattrib_type(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (lodash_isString(val)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_size(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (lodash_isString(val) || lodash_isNumber(val)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tswitch (val.constructor) {\n\t\t\t\tcase Vector2:\n\t\t\t\t\treturn 2;\n\t\t\t\tcase Vector3:\n\t\t\t\t\treturn 3;\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn CoreObject.clone(this._object);\n\t}\n\n\tstatic clone(src_object: Object3D) {\n\t\tconst new_object = src_object.clone();\n\n\t\tvar sourceLookup = new Map<Object3D, Object3D>();\n\t\tvar cloneLookup = new Map<Object3D, Object3D>();\n\t\tCoreObject.parallelTraverse(src_object, new_object, function (sourceNode: Object3D, clonedNode: Object3D) {\n\t\t\tsourceLookup.set(clonedNode, sourceNode);\n\t\t\tcloneLookup.set(sourceNode, clonedNode);\n\t\t});\n\t\tnew_object.traverse(function (node) {\n\t\t\tconst src_node = sourceLookup.get(node) as SkinnedMesh;\n\t\t\tconst mesh_node = node as Mesh;\n\n\t\t\tif (mesh_node.geometry) {\n\t\t\t\tconst src_node_geometry = src_node.geometry as BufferGeometry;\n\t\t\t\tmesh_node.geometry = CoreGeometry.clone(src_node_geometry);\n\t\t\t\tconst mesh_node_geometry = mesh_node.geometry as BufferGeometry;\n\t\t\t\tif (mesh_node_geometry.userData) {\n\t\t\t\t\tmesh_node_geometry.userData = lodash_cloneDeep(src_node_geometry.userData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mesh_node.material) {\n\t\t\t\tmesh_node.material = src_node.material;\n\t\t\t\tCoreMaterial.apply_custom_materials(node, mesh_node.material as ShaderMaterialWithCustomMaterials);\n\n\t\t\t\t// prevents crashes for linesegments with shader material such as the line dashed instance\n\t\t\t\t// TODO: test\n\t\t\t\tconst material_with_color = mesh_node.material as MaterialWithColor;\n\t\t\t\tif (material_with_color.color == null) {\n\t\t\t\t\tmaterial_with_color.color = new Color(1, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src_object.userData) {\n\t\t\t\tnode.userData = lodash_cloneDeep(src_node.userData);\n\t\t\t}\n\n\t\t\tconst src_node_with_animations = (<unknown>src_node) as Object3DWithAnimations;\n\t\t\tif (src_node_with_animations.animations) {\n\t\t\t\t(node as Object3DWithAnimations).animations = src_node_with_animations.animations.map((animation) =>\n\t\t\t\t\tanimation.clone()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst skinned_node = node as SkinnedMesh;\n\t\t\tif (skinned_node.isSkinnedMesh) {\n\t\t\t\tvar clonedMesh = skinned_node;\n\t\t\t\tvar sourceMesh = src_node;\n\t\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\t\tclonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n\n\t\t\t\tconst new_bones = sourceBones.map(function (bone) {\n\t\t\t\t\treturn cloneLookup.get(bone);\n\t\t\t\t}) as Bone[];\n\n\t\t\t\tclonedMesh.skeleton.bones = new_bones;\n\n\t\t\t\tclonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n\t\t\t}\n\t\t});\n\n\t\treturn new_object;\n\t}\n\n\tstatic parallelTraverse(a: Object3D, b: Object3D, callback: (a: Object3D, b: Object3D) => void) {\n\t\tcallback(a, b);\n\t\tfor (var i = 0; i < a.children.length; i++) {\n\t\t\tthis.parallelTraverse(a.children[i], b.children[i], callback);\n\t\t}\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InterleavedBuffer} from 'three/src/core/InterleavedBuffer';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\nimport {TriangleFanDrawMode} from 'three/src/constants';\nimport {TriangleStripDrawMode} from 'three/src/constants';\nimport {TrianglesDrawMode} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tvar vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new Vector3(), tmp2 = new Vector3();\n\t\tvar n = new Vector3(), n2 = new Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) return null;\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) return null;\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) return null;\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) return null;\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) return null;\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) return null;\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) return null;\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) return null;\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.warn( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n\nexport { BufferGeometryUtils };\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {BaseGlNodeType} from '../../_Base';\n// import {Definition} from '../../Definition/_Module'\n// import { VariableConfig } from '../Config/VariableConfig';\nimport {TextureAllocationsController} from '../utils/TextureAllocationsController';\nimport {GlobalsGeometryHandler} from './Geometry';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {UniformGLDefinition, AttributeGLDefinition, VaryingGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig'\n// import {UniformConfig} from '../Config/UniformConfig'\n// import {AttributeConfig} from '../Config/AttributeConfig'\n// import { Attribute } from '../../Attribute';\n\nexport class GlobalsTextureHandler extends GlobalsBaseController {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tstatic UV_ATTRIB = 'particles_sim_uv_attrib';\n\tstatic UV_VARYING = 'particles_sim_uv_varying';\n\tstatic PARTICLE_SIM_UV = 'particleUV';\n\n\tprivate globals_geometry_handler: GlobalsGeometryHandler | undefined;\n\n\tconstructor(private _uv_name: string) {\n\t\tsuper();\n\t}\n\n\tset_texture_allocations_controller(controller: TextureAllocationsController) {\n\t\tthis._texture_allocations_controller = controller;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\n\t\tconst variable = this._texture_allocations_controller.variable(output_name);\n\n\t\tif (variable && connection_point) {\n\t\t\tconst gl_type = connection_point.type;\n\t\t\tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shaders_collection_controller);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t} else {\n\t\t\tthis.globals_geometry_handler = this.globals_geometry_handler || new GlobalsGeometryHandler();\n\t\t\tthis.globals_geometry_handler.handle_globals_node(\n\t\t\t\tglobals_node,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t// body_lines,\n\t\t\t\t// dependencies,\n\t\t\t\t// shader_name\n\t\t\t);\n\t\t}\n\n\t\t// definitions\n\t\t// const gl_type = named_output.gl_type()\n\t\t// const definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t// definitions_by_shader_name[shader_name].push(definition)\n\n\t\t// const new_value = this.read_attribute(globals_node, gl_type, output_name)\n\t\t// const body_line = `${var_name} = ${new_value}`\n\t\t// if(allocation){\n\t\t// \tconst var_name_texture = allocation.texture_name()\n\t\t// \t// add another definition if a texture was allocated by ParticlesSystemGPU\n\t\t// \tconst texture_definition = new Definition.Uniform(globals_node, 'sampler2D', var_name_texture)\n\t\t// \tdefinitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t// \t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', GlobalsTextureHandler.UV_ATTRIB)\n\t\t// \t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t// \t// this.add_particles_sim_uv_attribute(globals_node)\n\n\t\t// \tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shader_name)\n\t\t// \tbody_line = `${var_name} = ${new_value}`\n\n\t\t// } else {\n\t\t// \tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// }\n\n\t\t// const new_body_lines = [\n\t\t// \t// `${var_name} = vec3(${output_name})`,\n\t\t// \t`vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz;`\n\t\t// ]\n\t\t// const body_line = `vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz`\n\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// if(dependencies.length == 0){\n\t\t// \tbody_lines.push(body_line)\n\t\t// }\n\t}\n\t// variable_config_default(variable_name: string): string {\n\t// \t// const allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \t// if(allocation){\n\t// \t// \treturn `texture2D( texture_${allocation.name()}, ${GlobalsTextureHandler.UV_VARYING} ).xyz`\n\t// \t// } else {\n\t// \t// \tGlobalsGeometryHandler.variable_config_default(variable_name)\n\t// \t// }\n\t// \tthrow 'do I go through here?';\n\t// \treturn this.read_attribute(variable_name);\n\t// }\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \tconst allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \tif(allocation){\n\t// \t\treturn [\n\t// \t\t\tnew AttributeConfig('vec2', GlobalsTextureHandler.UV_ATTRIB),\n\t// \t\t\tnew UniformConfig('sampler2D', `texture_${allocation.name()}`)\n\t// \t\t]\n\t// \t}\n\t// }\n\n\t// static remap_instance_attribute(name:string):string{\n\t// \tif(name == 'instancePosition'){\n\t// \t\treturn 'position'\n\t// \t}\n\t// \treturn name\n\t// }\n\t// static variable_name_to_instance_attrib(name:string):string{\n\t// \tif(name == 'position'){\n\t// \t\treturn 'instancePosition'\n\t// \t}\n\t// \treturn name\n\t// }\n\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\t\t// attrib_name = GlobalsTextureHandler.remap_instance_attribute(attrib_name)\n\n\t\tconst texture_variable = this._texture_allocations_controller.variable(attrib_name);\n\n\t\tif (texture_variable) {\n\t\t\tthis.add_particles_sim_uv_attribute(node, shaders_collection_controller);\n\t\t\t// const texture_variable = allocation.variable(attrib_name)\n\t\t\t// if(!texture_variable){\n\t\t\t// \tconsole.error(`no tex var found for ${attrib_name}`)\n\t\t\t// \tthis._texture_allocations_controller.print(node.scene())\n\t\t\t// }\n\t\t\tconst component = texture_variable.component;\n\t\t\tconst allocation = texture_variable.allocation;\n\t\t\tif (allocation) {\n\t\t\t\t// const definitions_by_shader_name = {}\n\t\t\t\t// definitions_by_shader_name[shader_name] = []\n\t\t\t\tconst var_name_texture = allocation.texture_name;\n\t\t\t\tconst texture_definition = new UniformGLDefinition(\n\t\t\t\t\tnode,\n\t\t\t\t\tConnectionPointType.SAMPLER_2D,\n\t\t\t\t\tvar_name_texture\n\t\t\t\t);\n\t\t\t\t// definitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t\t\tshaders_collection_controller.add_definitions(node, [texture_definition]);\n\n\t\t\t\t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', 'particles_sim_uv')\n\t\t\t\t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t\t\tconst body_line = `texture2D( ${var_name_texture}, ${this._uv_name} ).${component}`;\n\t\t\t\treturn body_line;\n\t\t\t}\n\t\t} else {\n\t\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t\t}\n\t}\n\n\tadd_particles_sim_uv_attribute(node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const shader_names = ['vertex', 'fragment'];\n\t\t// const definitions_by_shader_name:Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t// definitions_by_shader_name.set(ShaderName.FRAGMENT, [])\n\t\t// for (let shader_name of shader_names) {\n\t\t// \tdefinitions_by_shader_name[shader_name] = [];\n\t\t// }\n\n\t\tconst particles_sim_uv_attrib_definition = new AttributeGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_ATTRIB\n\t\t);\n\t\tconst particles_sim_uv_varying_definition = new VaryingGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_VARYING\n\t\t);\n\n\t\tshaders_collection_controller.add_definitions(\n\t\t\tnode,\n\t\t\t[particles_sim_uv_attrib_definition, particles_sim_uv_varying_definition],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t\tshaders_collection_controller.add_definitions(node, [particles_sim_uv_varying_definition], ShaderName.FRAGMENT);\n\n\t\tshaders_collection_controller.add_body_lines(\n\t\t\tnode,\n\t\t\t[`${GlobalsTextureHandler.UV_VARYING} = ${GlobalsTextureHandler.UV_ATTRIB}`],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten'\n// import lodash_map from 'lodash/map'\n\nimport {CoreGeometry} from '../Geometry';\nimport {CorePoint} from '../Point';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nexport class CoreGeometryUtilCurve {\n\tstatic accumulated_curve_point_indices(indices: number[]) {\n\t\tlet curve_point_indices: number[] = [];\n\t\tconst accumulated_curve_point_indices = [];\n\t\tlet last_index_added: number | null = null;\n\n\t\t// indices.forEach((index, i) => {\n\t\tlet index: number;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tif (i % 2 === 1) {\n\t\t\t\tindex = indices[i];\n\t\t\t\tconst previous_index = indices[i - 1];\n\n\t\t\t\t// if the last added index, from the previous segment\n\t\t\t\t// is the same as the start of the current segment (indices[i-1])\n\t\t\t\t// then this is part of the same curve\n\t\t\t\tif (last_index_added == null || previous_index === last_index_added) {\n\t\t\t\t\t// add the first point\n\t\t\t\t\tif (curve_point_indices.length === 0) {\n\t\t\t\t\t\tcurve_point_indices.push(previous_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve_point_indices.push(index);\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise we create a new curve\n\t\t\t\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\t\t\t\t\t//current_points = lodash_map curve_point_indices, (index)->points[index]\n\t\t\t\t\t//curve_point_indices_groups.push(current_points)\n\t\t\t\t\t//this._create_curve_from_points(current_points)\n\n\t\t\t\t\t// and reset the array\n\t\t\t\t\tcurve_point_indices = [previous_index, index];\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// also create with the remaining ones\n\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\n\t\treturn accumulated_curve_point_indices;\n\t}\n\n\tstatic create_line_segment_geometry(\n\t\tpoints: CorePoint[],\n\t\tindices: number[],\n\t\tattrib_names: string[],\n\t\tattrib_sizes_by_name: Dictionary<number>\n\t) {\n\t\t// let new_positions: number[] = []\n\t\tconst new_indices: number[] = [];\n\n\t\tconst new_attribute_values_by_name: Dictionary<number[]> = {};\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tnew_attribute_values_by_name[attrib_name] = [];\n\t\t});\n\n\t\tindices.forEach((index, i) => {\n\t\t\tconst point = points[index];\n\t\t\t// const position = point.position();\n\t\t\t// new_positions.push(position.toArray());\n\t\t\tattrib_names.forEach((attrib_name) => {\n\t\t\t\tlet attrib_value = point.attrib_value(attrib_name);\n\t\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\t\tif (attrib_size > 1) {\n\t\t\t\t\tattrib_value = attrib_value.toArray();\n\t\t\t\t} else {\n\t\t\t\t\tattrib_value = [attrib_value];\n\t\t\t\t}\n\t\t\t\tattrib_value.forEach((v: number) => {\n\t\t\t\t\tnew_attribute_values_by_name[attrib_name].push(v);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (i > 0) {\n\t\t\t\tnew_indices.push(i - 1);\n\t\t\t\tnew_indices.push(i);\n\t\t\t}\n\t\t});\n\n\t\t// new_positions = lodash_flatten(new_positions)\n\t\tconst geometry = new BufferGeometry();\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\tconst values = new_attribute_values_by_name[attrib_name];\n\t\t\tgeometry.setAttribute(attrib_name, new Float32BufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tgeometry.setIndex(new_indices);\n\t\treturn geometry;\n\t}\n\n\tstatic line_segment_to_geometries(geometry: BufferGeometry) {\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst attrib_names = core_geometry.attrib_names();\n\t\tconst points = core_geometry.points();\n\t\tconst indices = (geometry.getIndex()?.array as number[]) || [];\n\n\t\tconst accumulated_curve_point_indices = this.accumulated_curve_point_indices(indices);\n\t\tconsole.log(indices, accumulated_curve_point_indices);\n\n\t\tif (accumulated_curve_point_indices.length > 0) {\n\t\t\tconst attribute_sizes_by_name = core_geometry.attrib_sizes();\n\n\t\t\taccumulated_curve_point_indices.forEach((curve_point_indices, i) => {\n\t\t\t\tgeometry = this.create_line_segment_geometry(\n\t\t\t\t\tpoints,\n\t\t\t\t\tcurve_point_indices,\n\t\t\t\t\tattrib_names,\n\t\t\t\t\tattribute_sizes_by_name\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t});\n\t\t}\n\n\t\treturn geometries;\n\t}\n}\n","// import {Scene} from 'three/src/scenes/Scene'\n// import {CoreGraph} from '../../core/graph/CoreGraph'\n// import {CorePerformance} from '../../core/performance/CorePerformance'\n// import {Cooker} from '../../core/graph/Cooker'\n// import {EmitPayload} from '../../core/graph/NodeScene'\n// import {BaseNode} from '../nodes/_Base'\n\n// import {CoreObject} from '../../core/Object';\n// import {Debug} from './concerns/Debug';\n// import {Env} from './concerns/Env'\n// import {ExpressionRegister} from './concerns/ExpressionRegister';\n// import {Frame} from './concerns/Frame';\n// import {GraphMixin} from './concerns/Graph';\n// import {Js} from './concerns/Js';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/LifeCycle';\n// import {Loading} from './concerns/Loading';\n// import {Name} from './concerns/Name';\n// import {Nodes} from './concerns/Nodes';\n// import {ObjectMixin} from './concerns/Object';\n// import {PickerNodes} from './concerns/PickerNodes';\n// import {PerformanceMixin} from './concerns/Performance';\n// import {Renderer} from './concerns/Renderer';\n// import {Store} from './concerns/Store';\n// import {Uniforms} from './concerns/Uniforms';\n\n// import {CubeCamerasController} from './utils/CubeCamerasController';\nimport {CamerasController} from './utils/CamerasController';\nimport {Cooker} from './utils/Cooker';\nimport {CoreGraph} from '../../core/graph/CoreGraph';\nimport {CookController} from './utils/CookController';\nimport {DispatchController} from './utils/DispatchController';\nimport {EventsController} from './utils/events/EventsController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {LoadingController} from './utils/LoadingController';\nimport {ExpressionsController} from './utils/ExpressionsController';\nimport {MissingReferencesController} from './utils/MissingReferencesController';\nimport {NodesController} from './utils/NodesController';\nimport {CorePerformance} from '../../core/performance/CorePerformance';\nimport {TimeController} from './utils/TimeController';\nimport {PolySceneSerializer} from './utils/Serializer';\nimport {UniformsController} from './utils/UniformsController';\nimport {WebGLController} from './utils/WebGLController';\n\nimport {Scene} from 'three/src/scenes/Scene';\n\nexport class PolyScene {\n\tprotected _default_scene = new Scene();\n\tget default_scene() {\n\t\treturn this._default_scene;\n\t}\n\t_uuid!: string;\n\tset_uuid(uuid: string) {\n\t\treturn (this._uuid = uuid);\n\t}\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\t_name: string | undefined;\n\tset_name(name: string) {\n\t\treturn (this._name = name);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tprotected _cameras_controller = new CamerasController(this);\n\tget cameras_controller() {\n\t\treturn this._cameras_controller;\n\t}\n\n\tprivate _cooker = new Cooker(this);\n\tget cooker() {\n\t\treturn this._cooker;\n\t}\n\n\t// private _cube_cameras_controller: CubeCamerasController;\n\t// get cube_cameras_controller() {\n\t// \treturn (this._cube_cameras_controller = this._cube_cameras_controller || new CubeCamerasController(this));\n\t// }\n\tpublic readonly cook_controller = new CookController();\n\tasync wait_for_cooks_completed() {\n\t\treturn this.cook_controller.wait_for_cooks_completed();\n\t}\n\n\tprivate _dispatch_controller: DispatchController | undefined;\n\tget dispatch_controller() {\n\t\treturn (this._dispatch_controller = this._dispatch_controller || new DispatchController(this));\n\t}\n\tprivate _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\n\tprivate _graph = new CoreGraph();\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\n\tprivate _lifecycle_controller: LifeCycleController | undefined;\n\tget lifecycle_controller() {\n\t\treturn (this._lifecycle_controller = this._lifecycle_controller || new LifeCycleController(this));\n\t}\n\tprivate _loading_controller: LoadingController | undefined;\n\tget loading_controller() {\n\t\treturn (this._loading_controller = this._loading_controller || new LoadingController(this));\n\t}\n\n\tprivate _missing_expression_references_controller: MissingReferencesController = new MissingReferencesController();\n\tget missing_expression_references_controller() {\n\t\treturn this._missing_expression_references_controller;\n\t}\n\tprivate _expressions_controller: ExpressionsController = new ExpressionsController();\n\tget expressions_controller() {\n\t\treturn this._expressions_controller;\n\t}\n\n\tprotected _nodes_controller = new NodesController(this);\n\tget nodes_controller() {\n\t\treturn this._nodes_controller;\n\t}\n\n\tprotected _performance: CorePerformance | undefined;\n\tget performance() {\n\t\treturn (this._performance = this._performance || new CorePerformance());\n\t}\n\n\t//\n\t//\n\t// time\n\t//\n\t//\n\tprotected _time_controller = new TimeController(this);\n\tget time_controller() {\n\t\treturn this._time_controller;\n\t}\n\tset_frame(frame: number) {\n\t\tthis.time_controller.set_frame(frame);\n\t}\n\tget frame() {\n\t\treturn this.time_controller.frame;\n\t}\n\tget time() {\n\t\treturn this.time_controller.time;\n\t}\n\tget frame_range() {\n\t\treturn this.time_controller.frame_range;\n\t}\n\tplay() {\n\t\tthis.time_controller.play();\n\t}\n\tpause() {\n\t\tthis.time_controller.pause();\n\t}\n\n\t//\n\t//\n\t// serializer\n\t//\n\t//\n\tprivate _serializer: PolySceneSerializer | undefined;\n\tprivate get serializer() {\n\t\treturn (this._serializer = this._serializer || new PolySceneSerializer(this));\n\t}\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n\n\t//\n\t//\n\t// uniforms\n\t//\n\t//\n\tprivate _uniforms_controller: UniformsController | undefined;\n\tget uniforms_controller() {\n\t\treturn (this._uniforms_controller = this._uniforms_controller || new UniformsController(this));\n\t}\n\n\t//\n\t//\n\t// webgl\n\t//\n\t//\n\tprivate _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController());\n\t}\n\n\t//\n\t//\n\t// constructor\n\t//\n\t//\n\tconstructor() {\n\t\t// this.mark_as_loaded()\n\t\tthis._graph.set_scene(this);\n\t\t// this.time_controller.init();\n\t\tthis.nodes_controller.init();\n\t}\n\n\t//\n\t//\n\t// cooker\n\t//\n\t//\n\tbatch_update(callback: () => void) {\n\t\tthis._cooker.block();\n\n\t\tcallback();\n\n\t\tthis._cooker.unblock();\n\t}\n\n\t//\n\t//\n\t// nodes\n\t//\n\t//\n\tnode(path: string) {\n\t\treturn this.nodes_controller.node(path);\n\t}\n\tget root() {\n\t\treturn this.nodes_controller.root;\n\t}\n}\n","import {TypedEventNode, BaseEventNodeType} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ACCEPTED_MOUSE_EVENT_TYPES} from '../../scene/utils/events/MouseEventsController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MouseEventParamsConfig extends NodeParamsConfig {\n\tactive = ParamConfig.BOOLEAN(true, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tMouseEventNode.PARAM_CALLBACK_toggle_active(node as MouseEventNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new MouseEventParamsConfig();\n\nexport class MouseEventNode extends TypedEventNode<MouseEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mouse_event';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\tACCEPTED_MOUSE_EVENT_TYPES.map((event_type) => {\n\t\t\t\treturn new TypedNamedConnectionPoint(event_type, ConnectionPointType.BOOL);\n\t\t\t})\n\t\t);\n\n\t\tthis.lifecycle.add_on_add_hook(() => {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t});\n\t\tthis.lifecycle.add_delete_hook(() => {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t});\n\t}\n\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tif (!this.pv.active) {\n\t\t\treturn;\n\t\t}\n\t\tconst index = this.io.outputs.get_output_index(event.type);\n\t\tif (index >= 0) {\n\t\t\tconst connections = this.io.connections.output_connections();\n\t\t\tconst current_connections = connections.filter((connection) => connection.output_index == index);\n\t\t\tconst nodes: BaseEventNodeType[] = current_connections.map(\n\t\t\t\t(connection) => connection.node_dest\n\t\t\t) as BaseEventNodeType[];\n\t\t\tfor (let node of nodes) {\n\t\t\t\tnode.process_event(event, canvas, camera_node);\n\t\t\t}\n\t\t}\n\t}\n\n\t_update_register() {\n\t\tif (this.pv.active) {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t} else {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_toggle_active(node: MouseEventNode) {\n\t\tnode._update_register();\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nexport class BaseState {\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseNodeType} from '../_Base';\nimport {NodeUIDataJson} from './UIData';\nimport {TypedNamedConnectionPointData} from './connections/NamedConnectionPoint';\nimport {ConnectionPointType} from './connections/ConnectionPointType';\n\nexport interface NodeSerializerData {\n\tname: string;\n\ttype: string;\n\tgraph_node_id: string;\n\tis_dirty: boolean;\n\tui_data_json: NodeUIDataJson;\n\terror_message: string | undefined;\n\tchildren: string[];\n\tinputs: Array<string | undefined>;\n\tinput_connection_output_indices: Array<number | undefined> | undefined;\n\tnamed_input_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tnamed_output_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tparam_ids: string[];\n\t// spare_params: Dictionary<string>;\n\toverride_clonable_state: boolean;\n\tinputs_clonable_state_with_override: boolean[];\n\tflags?: {\n\t\t//has_display: this.has_display_flag()\n\t\tdisplay?: boolean;\n\t\tbypass?: boolean;\n\t};\n\tselection?: string[];\n}\n\nexport class NodeSerializer {\n\tconstructor(private node: BaseNodeType) {}\n\n\t// serialize() {\n\t// \treturn this.to_json();\n\t// }\n\n\t// TODO: find a way to not re-create a json everytime\n\tto_json(include_param_components: boolean = false): NodeSerializerData {\n\t\t// const spare_params_json_by_name = {};\n\t\t// lodash_each(this.node.spare_param_names(), param_name=> {\n\t\t// \tconst param = this.node.spare_param(param_name);\n\t\t// \tspare_params_json_by_name[param_name] = param.graph_node_id;\n\t\t// });\n\n\t\tconst data = {\n\t\t\tname: this.node.name,\n\t\t\ttype: this.node.type,\n\t\t\tgraph_node_id: this.node.graph_node_id,\n\t\t\tis_dirty: this.node.is_dirty,\n\t\t\tui_data_json: this.node.ui_data.to_json(),\n\t\t\terror_message: this.node.states.error.message,\n\t\t\tchildren: this.children_ids(),\n\t\t\tinputs: this.input_ids(),\n\t\t\tinput_connection_output_indices: this.connection_input_indices(),\n\t\t\tnamed_input_connections: this.named_input_connections(),\n\t\t\tnamed_output_connections: this.named_output_connections(),\n\t\t\tparam_ids: this.to_json_params(include_param_components),\n\t\t\t// spare_params: this.to_json_spare_params(include_param_components),\n\t\t\toverride_clonable_state: this.node.io.inputs.override_clonable_state(),\n\t\t\tinputs_clonable_state_with_override: this.node.io.inputs.inputs_clonable_state_with_override(),\n\t\t\tflags: {\n\t\t\t\t//has_display: this.has_display_flag()\n\t\t\t\tdisplay: this.node.flags?.display?.active,\n\t\t\t\tbypass: this.node.flags?.bypass?.active,\n\t\t\t},\n\t\t\tselection: undefined as string[] | undefined,\n\t\t};\n\n\t\tif (this.node.children_allowed() && this.node.children_controller) {\n\t\t\tdata['selection'] = this.node.children_controller.selection.to_json();\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tchildren_ids(): string[] {\n\t\treturn this.node.children().map((node) => node.graph_node_id);\n\t}\n\n\tinput_ids(): (string | undefined)[] {\n\t\treturn this.node.io.inputs.inputs().map((node) => (node != null ? node.graph_node_id : undefined));\n\t}\n\n\tconnection_input_indices() {\n\t\treturn this.node.io.connections\n\t\t\t.input_connections()\n\t\t\t?.map((connection) => (connection != null ? connection.output_index : undefined));\n\t}\n\tnamed_input_connections() {\n\t\treturn this.node.io.inputs.named_input_connection_points.map((i) => i.to_json());\n\t}\n\tnamed_output_connections() {\n\t\treturn this.node.io.outputs.named_output_connection_points.map((o) => o.to_json());\n\t}\n\n\tto_json_params_from_names(param_names: string[], include_components: boolean = false) {\n\t\treturn param_names.map((param_name) => {\n\t\t\treturn this.node.params.get(param_name)!.graph_node_id;\n\t\t});\n\t\t// const params_json_by_name: Dictionary<string> = {};\n\t\t// for (let param_name of param_names) {\n\t\t// \tconst param = this.node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tparams_json_by_name[param_name] = param.graph_node_id;\n\n\t\t// \t\tif (include_components && param.is_multiple && param.components) {\n\t\t// \t\t\tfor (let component of param.components) {\n\t\t// \t\t\t\tparams_json_by_name[component.name] = component.graph_node_id;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t\t// return params_json_by_name;\n\t}\n\tto_json_params(include_components: boolean = false) {\n\t\treturn this.to_json_params_from_names(this.node.params.names, include_components);\n\t}\n\t// to_json_params_without_components(){\n\t// \treturn this.to_json_params(false)\n\t// }\n\t// to_json_params_with_components(){\n\t// \treturn this.to_json_params(true)\n\t// }\n\t// to_json_spare_params(include_components: boolean = false) {\n\t// \treturn this.to_json_params_from_names(this.node.params.spare_names, include_components);\n\t// }\n}\n","import {BooleanParam} from '../Boolean';\nimport {ButtonParam} from '../Button';\nimport {ColorParam} from '../Color';\nimport {FloatParam} from '../Float';\nimport {FolderParam} from '../Folder';\nimport {IntegerParam} from '../Integer';\nimport {OperatorPathParam} from '../OperatorPath';\nimport {RampParam} from '../Ramp';\nimport {SeparatorParam} from '../Separator';\nimport {StringParam} from '../String';\nimport {Vector2Param} from '../Vector2';\nimport {Vector3Param} from '../Vector3';\nimport {Vector4Param} from '../Vector4';\n\nimport {ParamType} from '../../poly/ParamType';\n\ntype ParamClassMapType = {[key in ParamType]: any};\nexport const ParamConstructorByType: ParamClassMapType = {\n\t[ParamType.BOOLEAN]: BooleanParam,\n\t[ParamType.BUTTON]: ButtonParam,\n\t[ParamType.COLOR]: ColorParam,\n\t[ParamType.FLOAT]: FloatParam,\n\t[ParamType.FOLDER]: FolderParam,\n\t[ParamType.INTEGER]: IntegerParam,\n\t[ParamType.OPERATOR_PATH]: OperatorPathParam,\n\t[ParamType.RAMP]: RampParam,\n\t[ParamType.SEPARATOR]: SeparatorParam,\n\t[ParamType.STRING]: StringParam,\n\t[ParamType.VECTOR2]: Vector2Param,\n\t[ParamType.VECTOR3]: Vector3Param,\n\t[ParamType.VECTOR4]: Vector4Param,\n};\n","import {BaseParamType} from '../_Base';\nimport {ExpressionManager} from '../../expressions/ExpressionManager';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreEntity} from '../../../core/geometry/Entity';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamValuesTypeMap} from '../types/ParamValuesTypeMap';\nimport {CoreObject} from '../../../core/geometry/Object';\n\n// type ParamTypeElem = ParamType;\ntype EntityCallback<T extends ParamType> = (\n\tentity: CoreEntity,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype PointEntityCallback<T extends ParamType> = (\n\tentity: CorePoint,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype ObjectEntityCallback<T extends ParamType> = (\n\tentity: CoreObject,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\n\nexport class ExpressionController<T extends ParamType> {\n\tprotected _expression: string | undefined;\n\tprotected _entities: CoreEntity[] | undefined;\n\tprotected _entity_callback: EntityCallback<T> | undefined;\n\tprotected _manager: ExpressionManager | undefined;\n\t// private _reset_bound = this.reset.bind(this);\n\tconstructor(protected param: BaseParamType) {\n\t\t// this.param.dirty_controller.add_post_dirty_hook('expression_controller_reset', this._reset_bound);\n\t}\n\t// remove_dirty_hook() {\n\t// \t// this.param.dirty_controller.remove_post_dirty_hook('expression_controller_reset');\n\t// }\n\n\tget active() {\n\t\treturn this._expression != null;\n\t}\n\tget expression() {\n\t\treturn this._expression;\n\t}\n\tget is_errored() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.is_errored;\n\t\t}\n\t\treturn false;\n\t}\n\tget error_message() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.error_message;\n\t\t}\n\t\treturn null;\n\t}\n\tget requires_entities() {\n\t\treturn this.param.options.is_expression_for_entities;\n\t}\n\t// private reset() {\n\t// \tthis._manager?.clear_error();\n\t// }\n\n\tset_expression(expression: string | undefined, set_dirty: boolean = true) {\n\t\tthis.param.scene.missing_expression_references_controller.deregister_param(this.param);\n\t\tthis.param.scene.expressions_controller.deregister_param(this.param);\n\n\t\tif (this._expression != expression) {\n\t\t\tthis._expression = expression;\n\n\t\t\tif (this._expression) {\n\t\t\t\tthis._manager = this._manager || new ExpressionManager(this.param);\n\t\t\t\tthis._manager.parse_expression(this._expression);\n\t\t\t} else {\n\t\t\t\tthis._manager?.reset();\n\t\t\t}\n\n\t\t\tif (set_dirty) {\n\t\t\t\tthis.param.set_dirty();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tif (this._manager && this.active) {\n\t\t\tthis._manager.update_from_method_dependency_name_change();\n\t\t}\n\t}\n\n\tasync compute_expression() {\n\t\tif (this._manager && this.active) {\n\t\t\tconst result = await this._manager.compute_function();\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate async compute_expression_for_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis.set_entities(entities, callback);\n\t\tawait this.compute_expression();\n\t\tif (this._manager?.error_message) {\n\t\t\tthis.param.node.states.error.set(`expression evalution error: ${this._manager?.error_message}`);\n\t\t}\n\n\t\tthis.reset_entities();\n\t}\n\tcompute_expression_for_points(entities: CorePoint[], callback: PointEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tcompute_expression_for_objects(entities: CoreObject[], callback: ObjectEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tget entities() {\n\t\treturn this._entities;\n\t}\n\tget entity_callback() {\n\t\treturn this._entity_callback;\n\t}\n\tset_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis._entities = entities;\n\t\tthis._entity_callback = callback;\n\t}\n\treset_entities() {\n\t\tthis._entities = undefined;\n\t\tthis._entity_callback = undefined;\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n\nimport jsep from 'jsep';\njsep.addUnaryOp('@');\n// self.jsep = jsep\nlet precedence = 10;\njsep.addBinaryOp('**', precedence);\n// precedence = 1\n// jsep.addBinaryOp('`', precedence)\n// const HOUDINI_QUOTE_CODE = 96; // houdini quote\n// const JSEP_COMPOUND = 'Compound'\nconst JSEP_IDENTIFIER = 'Identifier';\nconst JSEP_LITERAL = 'Literal';\n// const JSEP_BINARY_EXPRESSION = 'BynaryExpression'\nconst JSEP_CALL_EXPRESSION = 'CallExpression';\nconst STRING_EXPRESSION_SEPARATOR = '`';\n\nexport class ParsedTree {\n\tpublic node: jsep.Expression | undefined;\n\tpublic error_message: string | undefined;\n\n\tconstructor() {}\n\n\tparse_expression(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\t\t\tthis.node = jsep(string);\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\tparse_expression_for_string_param(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\n\t\t\tconst elements = ParsedTree.string_value_elements(string);\n\t\t\tconst nodes = [];\n\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\tconst element = elements[i];\n\t\t\t\tlet node;\n\t\t\t\tif (i % 2 == 1) {\n\t\t\t\t\tnode = jsep(element);\n\t\t\t\t} else {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: JSEP_LITERAL,\n\t\t\t\t\t\tvalue: `'${element}'`,\n\t\t\t\t\t\traw: `'${element}'`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tnodes.push(node);\n\t\t\t\t// nodes.push({\n\t\t\t\t// \ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\t// \targuments: [node],\n\t\t\t\t// \tcallee: {\n\t\t\t\t// \t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t// \t\tname: 'toString',\n\t\t\t\t// \t}\n\t\t\t\t// })\n\t\t\t}\n\t\t\t// let last_plus_node;\n\t\t\t// for(let i=0; i<(nodes.length-1); i++){\n\t\t\t// \tconst plus_node = {\n\t\t\t// \t\ttype: JSEP_BINARY_EXPRESSION,\n\t\t\t// \t\toperator: '+',\n\t\t\t// \t\tleft: last_plus_node || nodes[i],\n\t\t\t// \t\tright: nodes[i+1],\n\t\t\t// \t}\n\t\t\t// \tlast_plus_node = plus_node;\n\t\t\t// }\n\t\t\t// this.node = last_plus_node\n\t\t\tthis.node = (<unknown>{\n\t\t\t\ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\targuments: nodes,\n\t\t\t\tcallee: {\n\t\t\t\t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t\tname: 'str_concat',\n\t\t\t\t},\n\t\t\t}) as jsep.Compound;\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\n\tstatic string_value_elements(v: string): string[] {\n\t\tif (v != null) {\n\t\t\tif (lodash_isString(v)) {\n\t\t\t\treturn v.split(STRING_EXPRESSION_SEPARATOR);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// static string_value_contains_expression(v:string): boolean{\n\t// \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n\t// }\n\n\t// deep_parse_for_string_expressions(){\n\t// \t// for string expressions which have more than a single `<expr>` element\n\t// \t// pt_`@ptnum`\n\t// \t// `@ptnum`_pt\n\t// \t// pt_`@ptnum`_`1+1`\n\t// \tif(this.node.type == JSEP_COMPOUND){\n\t// \t\tconst args = this.node.body\n\t// \t\tlet arg;\n\t// \t\tfor(let i=0; i<args.length; i++){\n\t// \t\t\targ = args[i]\n\t// \t\t\tif(arg.type == JSEP_LITERAL){\n\t// \t\t\t\tconst arg_node = jsep(arg.value)\n\t// \t\t\t\targs[i] = arg_node\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// for string expressions which havea single `<expr>` element\n\t// \t\t// `@ptnum`\n\t// \t\tif(this.node.type == JSEP_LITERAL){\n\t// \t\t\tconst raw = this.node.raw\n\t// \t\t\tconst first_char_code = raw.charCodeAt(0)\n\t// \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n\t// \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n\t// \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate reset() {\n\t\tthis.node = undefined;\n\t\tthis.error_message = undefined;\n\t}\n}\n","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {CoreWalker} from './Walker';\n// import {NodeSimple} from '/Graph/NodeSimple'\n\n// import {NamedGraphNodeClass} from './graph/NamedGraphNode'\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class DecomposedPath {\n\tprivate index = -1;\n\tprivate path_elements: (string | null)[] = [];\n\tprivate _named_nodes: (NodeOrParam | null)[] = [];\n\tprivate graph_node_ids: string[] = [];\n\tprivate node_element_by_graph_node_id: Dictionary<string> = {};\n\n\tconstructor() {\n\t\t// console.warn('create decomposed path');\n\t}\n\tadd_node(name: string, node: NodeOrParam) {\n\t\tthis.index += 1;\n\t\tif (name == node.name) {\n\t\t\tthis.named_nodes[this.index] = node;\n\t\t}\n\n\t\tthis.graph_node_ids[this.index] = node.graph_node_id;\n\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = name;\n\t}\n\tadd_path_element(path_element: string) {\n\t\tthis.index += 1;\n\t\tthis.path_elements[this.index] = path_element;\n\t}\n\n\tget named_nodes() {\n\t\treturn this._named_nodes;\n\t}\n\n\tupdate_from_name_change(node: NodeOrParam) {\n\t\tconst named_graph_node_ids = this.named_nodes.map((n) => n?.graph_node_id);\n\n\t\tif (named_graph_node_ids.includes(node.graph_node_id)) {\n\t\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = node.name;\n\t\t}\n\t}\n\n\tto_path(): string {\n\t\tconst elements = new Array<string>(this.index);\n\t\tfor (let i = 0; i <= this.index; i++) {\n\t\t\tconst node = this.named_nodes[i];\n\t\t\tif (node) {\n\t\t\t\telements[i] = this.node_element_by_graph_node_id[node.graph_node_id];\n\t\t\t} else {\n\t\t\t\tconst path_element = this.path_elements[i];\n\t\t\t\tif (path_element) {\n\t\t\t\t\telements[i] = path_element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet joined_path = elements.join(CoreWalker.SEPARATOR);\n\t\t// if the first character is a letter, we need to prefix with /\n\t\tconst first_char = joined_path[0];\n\t\tif (first_char) {\n\t\t\tif (!CoreWalker.NON_LETTER_PREFIXES.includes(first_char)) {\n\t\t\t\tjoined_path = `${CoreWalker.SEPARATOR}${joined_path}`;\n\t\t\t}\n\t\t}\n\n\t\treturn joined_path;\n\t}\n}\n","// https://gist.github.com/gre/1650294\n\n// const ease_in = function(t:number, power:number){return Math.pow(t, power)}\n// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}\n// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}\n\nconst ease_i = function(power:number){return function(t:number){return Math.pow(t, power)}};\nconst ease_o = function(power:number){return function(t:number){return 1 - Math.abs(Math.pow(t-1, power))}};\nconst ease_io = function(power:number){return function(t:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}}\n\nexport const Easing = {\n  linear: ease_io(1),\n\n  ease_i: function(t:number, power:number){ return ease_i(power)(t) },\n  ease_o: function(t:number, power:number){ return ease_o(power)(t) },\n  ease_io: function(t:number, power:number){ return ease_io(power)(t) },\n\n  ease_i2: ease_i(2),\n  ease_o2: ease_o(2),\n  ease_io2: ease_io(2),\n\n  ease_i3: ease_io(3),\n  ease_o3: ease_io(3),\n  ease_io3: ease_io(3),\n\n  ease_i4: ease_io(4),\n  ease_o4: ease_io(4),\n  ease_io4: ease_io(4),\n  // easeInQuart: EaseIn(4),\n  // easeOutQuart: EaseOut(4),\n  // easeInOutQuart: EaseInOut(4),\n  // easeInQuint: EaseIn(5),\n  // easeOutQuint: EaseOut(5),\n  // easeInOutQuint: EaseInOut(5)\n\n  ease_i_sin: function(t:number){ return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },\n  ease_o_sin: function(t:number){ return Math.sin(Math.PI / 2 * t); },\n  ease_io_sin: function(t:number){ return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2; },\n\n  ease_i_elastic: function (t:number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n  ease_o_elastic: function (t:number) { return .04 * t / (--t) * Math.sin(25 * t) },\n  ease_io_elastic: function (t:number) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n}\n\n// export class Easing {\n//   // no easing, no acceleration\n//   static linear(t:number):number{ return t }\n//   // accelerating from zero velocity\n//   static easeinquad (t:number):number{ return t*t }\n//   // decelerating to zero velocity\n//   static easeoutquad (t:number):number{ return t*(2-t) }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }\n//   // accelerating from zero velocity\n//   static easeincubic (t:number):number{ return t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n//   // accelerating from zero velocity\n//   static easeinquart (t:number):number{ return t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }\n//   // accelerating from zero velocity\n//   static easeinquint (t:number):number{ return t*t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\n// }","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\n// import lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class FloatParam extends TypedNumericParam<ParamType.FLOAT> {\n\tstatic type() {\n\t\treturn ParamType.FLOAT;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FLOAT], val2: ParamValuesTypeMap[ParamType.FLOAT]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tconst result = FloatParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {CoreWalker} from '../../core/Walker';\n\n// import {AsCodeOperatorPath} from './concerns/visitors/OperatorPath';\nimport {BaseNodeType} from '../nodes/_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class OperatorPathParam extends TypedParam<ParamType.OPERATOR_PATH> {\n\tprivate _found_node: BaseNodeType | null = null;\n\n\tstatic type() {\n\t\treturn ParamType.OPERATOR_PATH;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\tval2: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._value == this.default_value;\n\t}\n\tprotected process_raw_input() {\n\t\tthis._value = this._raw_input;\n\t\tthis.set_dirty();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\tprotected async process_computation() {\n\t\tconst path = this._value;\n\t\tlet node = null;\n\t\tconst path_non_empty = path != null && path !== '';\n\n\t\tif (path_non_empty) {\n\t\t\tnode = CoreWalker.find_node(this.node, path);\n\t\t\t// not sure I want the param to be errored,\n\t\t\t// as it may block the node, even if the param is not necessary\n\t\t\t// if (!node) {\n\t\t\t// \tthis.states.error.set('node not found');\n\t\t\t// }\n\t\t}\n\n\t\tif (this._found_node !== node) {\n\t\t\tconst dependent_on_found_node = this.options.dependent_on_found_node();\n\n\t\t\tif (this._found_node) {\n\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\tthis.remove_graph_input(this._found_node);\n\t\t\t\t} else {\n\t\t\t\t\t// this._found_node.remove_param_referree(this) // TODO: typescript\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._found_node = node;\n\t\t\tif (node) {\n\t\t\t\tconst expected_context = this.options.node_selection_context;\n\t\t\t\tconst node_context = node.parent?.children_controller?.context;\n\t\t\t\tif (expected_context == node_context || expected_context == null) {\n\t\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\t\tthis.add_graph_input(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this._found_node.add_param_referree(this) // TODO: typescript\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`node context is ${expected_context} but the params expects a ${node_context}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} // else {\n\t\t\t// \tif (path_non_empty) {\n\t\t\t// \t\tthis.states.error.set('node not found');\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.options.execute_callback();\n\t\t}\n\t\tthis.remove_dirty_state();\n\t}\n\n\tfound_node() {\n\t\treturn this._found_node;\n\t}\n}\n","import {BaseEventsController} from './_BaseEventsController';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\n\nenum MouseEventType {\n\tDOWN = 'mousedown',\n\tMOVE = 'mousemove',\n\tUP = 'mouseup',\n\tENTER = 'mouseenter',\n\tLEAVE = 'mouseleave',\n}\nexport const ACCEPTED_MOUSE_EVENT_TYPES: MouseEventType[] = [\n\tMouseEventType.DOWN,\n\tMouseEventType.MOVE,\n\tMouseEventType.UP,\n\tMouseEventType.ENTER,\n\tMouseEventType.LEAVE,\n];\n\nexport class MouseEventsController extends BaseEventsController<MouseEvent, MouseEventNode> {\n\taccepts_event(event: MouseEvent) {\n\t\treturn ACCEPTED_MOUSE_EVENT_TYPES.includes(event.type as MouseEventType);\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ntype FlagHookCallback = () => void;\n\nexport class BaseFlag {\n\t// protected _available_states: [boolean, boolean] = [];\n\tprotected _state: boolean = true;\n\tprotected _hooks: FlagHookCallback[] | null = null;\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// set_available_states(states: T[]) {}\n\tadd_hook(hook: FlagHookCallback) {\n\t\tthis._hooks = this._hooks || [];\n\t\tthis._hooks.push(hook);\n\t}\n\tprotected on_update() {}\n\tset(new_state: boolean) {\n\t\tif (this._state != new_state) {\n\t\t\tthis._state = new_state;\n\t\t\tthis.on_update();\n\t\t\tthis.run_hooks();\n\t\t}\n\t}\n\tget active() {\n\t\treturn this._state;\n\t}\n\ttoggle() {\n\t\tthis.set(!this._state);\n\t}\n\trun_hooks() {\n\t\tif (this._hooks) {\n\t\t\tfor (let hook of this._hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {GlobalsGlNode} from '../../Globals';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nexport abstract class GlobalsBaseController {\n\tprivate static __next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor() {\n\t\tthis._id = GlobalsBaseController.__next_id++;\n\t}\n\tid() {\n\t\treturn this._id;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {}\n\n\tabstract read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined;\n}\n","import {TypedGLDefinition, GLDefinitionType} from './GLDefinition';\n\nexport class TypedGLDefinitionCollection<T extends GLDefinitionType> {\n\t_errored: boolean = false;\n\t_error_message: string | undefined;\n\n\tconstructor(private _definitions: TypedGLDefinition<T>[] = []) {}\n\n\tget errored() {\n\t\treturn this._errored;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tuniq(): TypedGLDefinition<T>[] {\n\t\tconst definitions_by_name: Map<string, TypedGLDefinition<T>> = new Map();\n\t\tconst names: string[] = [];\n\n\t\tfor (let definition of this._definitions) {\n\t\t\tif (!this._errored) {\n\t\t\t\tconst name = definition.name;\n\t\t\t\tconst existing = definitions_by_name.get(name);\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.data_type != definition.data_type) {\n\t\t\t\t\t\tthis._errored = true;\n\t\t\t\t\t\tthis._error_message = `attempt to create ${definition.name} with types ${definition.data_type}`;\n\t\t\t\t\t\tconsole.warn('emitting error message', this._error_message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdefinitions_by_name.set(name, definition);\n\t\t\t\t\tnames.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uniq_definitions: TypedGLDefinition<T>[] = [];\n\t\tfor (let name of names) {\n\t\t\tconst definition = definitions_by_name.get(name);\n\t\t\tif (definition) {\n\t\t\t\tuniq_definitions.push(definition);\n\t\t\t}\n\t\t}\n\t\t// sorting may make dependencies be declared after the function calling them\n\t\t// const sorted_definitions = lodash_sortBy(uniq_definitions, (d)=>d.name())\n\t\treturn uniq_definitions;\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport lodash_uniq from 'lodash/uniq';\n// import {BaseGlNodeType} from '../../gl/_Base';\n// import {OutputGlNode} from '../gl/Output';\nimport {CoreGraph} from '../../../../core/graph/CoreGraph';\nimport {BaseNodeType, TypedNode} from '../../_Base';\nimport {TypedAssembler} from './BaseAssembler';\nimport {MapUtils} from '../../../../core/MapUtils';\nimport {ShaderName} from './ShaderName';\n\ntype NumberByString = Map<string, number>;\ntype BooleanByString = Map<string, boolean>;\ntype BooleanByStringByShaderName = Map<ShaderName, BooleanByString>;\ntype StringArrayByString = Map<string, string[]>;\n\n// interface BaseNodeGlArrayByString {\n// \t[propName: string]: BaseNodeGl[]\n// }\n// interface StringArrayByString {\n// \t[propName: string]: string[]\n// }\n\n// import {LineType, LINE_TYPES} from './CodeBuilder'\n\n// const VERTEX_INPUT_NAMES = [\n// \t'position',\n// \t'normal',\n// \t'gl_PointSize'\n// ]\n// const FRAGMENT_INPUT_NAMES = [\n// \t'color',\n// \t'alpha'\n// ]\n\nexport class TypedNodeTraverser<T extends TypedNode<any, T, any>> {\n\tprivate _leaves_graph_id: BooleanByStringByShaderName = new Map();\n\tprivate _graph_ids_by_shader_name: BooleanByStringByShaderName = new Map();\n\tprivate _outputs_by_graph_id: StringArrayByString = new Map();\n\tprivate _depth_by_graph_id: NumberByString = new Map();\n\tprivate _graph_id_by_depth: Map<number, string[]> = new Map();\n\tprivate _graph: CoreGraph;\n\tprivate _shader_name!: ShaderName;\n\n\tconstructor(private _assembler: TypedAssembler<T>, private _gl_parent_node: BaseNodeType) {\n\t\tthis._graph = this._gl_parent_node.scene.graph;\n\t}\n\n\tprivate reset() {\n\t\tthis._leaves_graph_id.clear();\n\t\tthis._outputs_by_graph_id.clear();\n\t\tthis._depth_by_graph_id.clear();\n\t\tthis._graph_id_by_depth.clear();\n\n\t\tthis.shader_names().forEach((shader_name) => {\n\t\t\tthis._graph_ids_by_shader_name.set(shader_name, new Map());\n\t\t});\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\tinput_names_for_shader_name(root_node: T, shader_name: ShaderName) {\n\t\treturn this._assembler.input_names_for_shader_name(root_node, shader_name);\n\t}\n\n\ttraverse(root_nodes: T[]) {\n\t\tthis.reset();\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._leaves_graph_id.set(shader_name, new Map());\n\t\t}\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._shader_name = shader_name;\n\t\t\tfor (let root_node of root_nodes) {\n\t\t\t\tthis.find_leaves_from_root_node(root_node);\n\t\t\t\tthis.set_nodes_depth();\n\t\t\t}\n\t\t}\n\n\t\t// graph_ids.forEach((graph_id) => {\n\t\tthis._depth_by_graph_id.forEach((depth: number, graph_id: string) => {\n\t\t\tif (depth != null) {\n\t\t\t\t// this._graph_id_by_depth.set(depth, this._graph_id_by_depth.get(depth) || []);\n\t\t\t\t// this._graph_id_by_depth.get(depth)?.push(graph_id);\n\t\t\t\tMapUtils.push_on_array_at_entry(this._graph_id_by_depth, depth, graph_id);\n\t\t\t}\n\t\t});\n\t}\n\n\tleaves_from_nodes(nodes: T[]) {\n\t\tthis._shader_name = ShaderName.LEAVES_FROM_NODES_SHADER;\n\t\tthis._graph_ids_by_shader_name.set(this._shader_name, new Map());\n\t\tthis._leaves_graph_id.set(this._shader_name, new Map());\n\t\tfor (let node of nodes) {\n\t\t\tthis.find_leaves(node);\n\t\t}\n\n\t\tconst node_ids: string[] = [];\n\t\tthis._leaves_graph_id.get(this._shader_name)?.forEach((value: boolean, key: string) => {\n\t\t\tnode_ids.push(key);\n\t\t});\n\t\treturn this._graph.nodes_from_ids(node_ids) as T[];\n\t}\n\n\tnodes_for_shader_name(shader_name: ShaderName) {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((value: string[], key: number) => {\n\t\t\tdepths.push(key);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tgraph_ids_for_depth.forEach((graph_id: string) => {\n\t\t\t\t\tconst is_present = this._graph_ids_by_shader_name.get(shader_name)?.get(graph_id);\n\t\t\t\t\tif (is_present) {\n\t\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tsorted_nodes() {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((ids: string[], depth: number) => {\n\t\t\tdepths.push(depth);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tfor (let graph_id of graph_ids_for_depth) {\n\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tprivate find_leaves_from_root_node(root_node: T) {\n\t\t// if(this._shader_name == ShaderName.VERTEX){\n\t\t// this._leaves_graph_id[this._shader_name] = {}\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(root_node.graph_node_id, true);\n\n\t\tconst input_names = this.input_names_for_shader_name(root_node, this._shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\t// if (root_node.type == 'output') {\n\t\t\t\tconst input = root_node.io.inputs.named_input(input_name);\n\t\t\t\tif (input) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(\n\t\t\t\t\t\tthis._outputs_by_graph_id,\n\t\t\t\t\t\tinput.graph_node_id,\n\t\t\t\t\t\troot_node.graph_node_id\n\t\t\t\t\t);\n\t\t\t\t\tthis.find_leaves(input);\n\t\t\t\t}\n\t\t\t\t// TODO: typescript - GL - check that I dont need to consider the Attrib as a special case\n\t\t\t\t// } else {\n\t\t\t\t// \t// if attribute\n\t\t\t\t// \tconst input = root_node.io.inputs.connected_named_input();\n\t\t\t\t// \tif (input) {\n\t\t\t\t// \t\tthis.find_leaves(input);\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// const position_input = this._output.named_input('position')\n\t\t// const normal_input = this._output.named_input('normal')\n\t\t// const instancePosition_input = this._output.named_input('instancePosition')\n\t\t// if(position_input){ this.find_leaves(position_input) }\n\t\t// if(normal_input){ this.find_leaves(normal_input) }\n\t\t// if(instancePosition_input){ this.find_leaves(instancePosition_input) }\n\t\t// }\n\t\t// if(this._shader_name == ShaderName.FRAGMENT){\n\t\t// \tthis._leaves_graph_id[this._shader_name] = {}\n\t\t// \tFRAGMENT_INPUT_NAMES.forEach(name=>{\n\t\t// \t\tconst input = this._output.named_input(name)\n\t\t// \t\tif(input){\n\t\t// \t\t\tthis.find_leaves(input)\n\t\t// \t\t}\n\t\t// \t})\n\t\t// \t// const color_input = this._output.named_input('color')\n\t\t// \t// const alpha_input = this._output.named_input('alpha')\n\t\t// \t// if(color_input){ this.find_leaves(color_input) }\n\t\t// \t// if(alpha_input){ this.find_leaves(alpha_input) }\n\t\t// }\n\n\t\tthis._outputs_by_graph_id.forEach((outputs: string[], graph_id: string) => {\n\t\t\tthis._outputs_by_graph_id.set(graph_id, lodash_uniq(outputs));\n\t\t});\n\t}\n\n\tprivate find_leaves(node: T) {\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(node.graph_node_id, true);\n\n\t\tconst inputs = lodash_compact(node.io.inputs.inputs());\n\t\tconst input_graph_ids = lodash_uniq(inputs.map((n) => n.graph_node_id));\n\t\tconst unique_inputs = input_graph_ids.map((graph_id) => this._graph.node_from_id(graph_id)) as T[];\n\t\tif (unique_inputs.length > 0) {\n\t\t\t// const promises = unique_inputs.forEach((input)=>{\n\t\t\tfor (let input of unique_inputs) {\n\t\t\t\tMapUtils.push_on_array_at_entry(this._outputs_by_graph_id, input.graph_node_id, node.graph_node_id);\n\n\t\t\t\tthis.find_leaves(input);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._leaves_graph_id.get(this._shader_name)!.set(node.graph_node_id, true);\n\t\t}\n\t}\n\n\tprivate set_nodes_depth() {\n\t\tthis._leaves_graph_id.forEach((booleans_by_graph_id, shader_name) => {\n\t\t\tbooleans_by_graph_id.forEach((boolean, graph_id) => {\n\t\t\t\tthis.set_node_depth(graph_id);\n\t\t\t});\n\t\t});\n\t\t// const leave_ids = Object.keys(this._leaves_graph_id[this._shader_name]);\n\t\t// leave_ids.forEach((graph_id) => {\n\t\t// \tthis.set_node_depth(graph_id);\n\t\t// });\n\t}\n\n\tprivate set_node_depth(graph_id: string, depth: number = 0) {\n\t\tconst current_depth = this._depth_by_graph_id.get(graph_id);\n\t\tif (current_depth != null) {\n\t\t\tthis._depth_by_graph_id.set(graph_id, Math.max(current_depth, depth));\n\t\t} else {\n\t\t\tthis._depth_by_graph_id.set(graph_id, depth);\n\t\t}\n\n\t\t// const node = this._graph.node_from_id(graph_id);\n\n\t\tconst output_ids = this._outputs_by_graph_id.get(graph_id);\n\t\tif (output_ids) {\n\t\t\toutput_ids.forEach((output_id) => {\n\t\t\t\tthis.set_node_depth(output_id, depth + 1);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {Connection} from './GlData';\n// import {Definition} from './Definition/_Module';\n// import {ShaderName} from './Assembler/Util/CodeBuilder';\n\n// list of globals\n// https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)\n// gl_PointCoord\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass GlobalsGlParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new GlobalsGlParamsConfig();\n\nexport class GlobalsGlNode extends TypedGlNode<GlobalsGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'globals';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_globals_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller?.assembler.set_node_lines_globals(this, shaders_collection_controller);\n\t\t// }\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// // const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\t// const body_lines = []\n\n\t\t// const shader_config = this.shader_config(this._shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\t// let definition\n\t\t// let body_line\n\t\t// for(let output_name of this.used_output_names()){\n\t\t// \tconst var_name = this.gl_var_name(output_name)\n\n\t\t// \tswitch (output_name){\n\t\t// \t\tcase 'frame':\n\t\t// \t\t\tdefinition = new Definition.Uniform(this, 'float', output_name)\n\t\t// \t\t\t// vertex_definitions.push(definition)\n\t\t// \t\t\t// fragment_definitions.push(definition)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\n\t\t// \t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t// \t\t\tbody_lines.push(body_line)\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_FragCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tfragment_body_lines.push(`vec4 ${var_name} = gl_FragCoord`)\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_PointCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tif(this.parent().is_point_material()){\n\t\t// \t\t\t\t\tfragment_body_lines.push(`vec2 ${var_name} = gl_PointCoord`)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tdefault:\n\t\t// \t\t\tconst named_output = this.named_output_by_name(output_name)\n\t\t// \t\t\tconst gl_type = named_output.gl_type()\n\t\t// \t\t\tdefinition = new Definition.Varying(this, gl_type, var_name)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\t\t// \t\t\tif(dependencies.length == 0){\n\t\t// \t\t\t\tbody_lines.push(body_line)\n\t\t// \t\t\t}\n\t\t// \t}\n\t\t// }\n\t\t// // this.set_vertex_definitions(vertex_definitions)\n\t\t// // this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tthis.set_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tthis.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// // this.add_definitions(definitions)\n\t\t// // this.set_vertex_body_lines(vertex_body_lines)\n\t\t// // this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// this.add_body_lines(body_lines)\n\t}\n}\n","import {EventDispatcher} from 'three/src/core/EventDispatcher';\nimport {MOUSE} from 'three/src/constants';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Spherical} from 'three/src/math/Spherical';\nimport {TOUCH} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","export class TranspiledFilter {\n\tstatic filter(transpiled_javascript: string) {\n\t\tconst lines = transpiled_javascript.split('\\n');\n\t\tconsole.log(lines);\n\t\tconst filtered_lines: string[] = [];\n\t\tfor (let line of lines) {\n\t\t\tif (!line.match(/import {.*} from '.*'/)) {\n\t\t\t\tline = line.replace('export ', 'return');\n\t\t\t\tfiltered_lines.push(line);\n\t\t\t}\n\t\t}\n\t\tconsole.log('filtered_lines', filtered_lines);\n\t\treturn filtered_lines.join('\\n');\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {ThreeToGl} from '../../../Core/ThreeToGl'\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n// import {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n// import {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nclass BaseAdaptiveParamsConfig extends NodeParamsConfig {}\n\nexport abstract class BaseAdaptiveGlNode<T extends BaseAdaptiveParamsConfig> extends TypedGlNode<T> {\n\t// protected abstract gl_output_name(): string;\n\t// protected abstract gl_input_name(index: number): string;\n\t// protected abstract expected_input_types(): ConnectionPointType[];\n\t// protected abstract expected_output_types(): ConnectionPointType[];\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\ninterface MathArg2Options {\n\tin?: [string, string];\n\tout?: string;\n\tdefault_in_type?: ConnectionPointType;\n\tallowed_in_types?: ConnectionPointType[];\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg2Factory(type: string, options: MathArg2Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1'];\n\tconst default_in_type = options.default_in_type;\n\tconst allowed_in_types = options.allowed_in_types;\n\tconst out_type = options.out_type;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\n\t\t\tif (out_type) {\n\t\t\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [out_type]);\n\t\t\t}\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\tif (out_type) {\n\t\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst_input_type = default_in_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || default_in_type || ConnectionPointType.FLOAT;\n\t\t\treturn [type, type];\n\t\t}\n\t};\n}\nexport class DistanceGlNode extends MathFunctionArg2Factory('distance', {\n\tin: ['p0', 'p1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class DotGlNode extends MathFunctionArg2Factory('dot', {\n\tin: ['vec0', 'vec1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class MaxGlNode extends MathFunctionArg2Factory('max') {}\nexport class MinGlNode extends MathFunctionArg2Factory('min') {}\nexport class ModGlNode extends MathFunctionArg2Factory('mod') {}\nexport class PowGlNode extends MathFunctionArg2Factory('pow', {in: ['x', 'y']}) {}\nexport class ReflectGlNode extends MathFunctionArg2Factory('reflect', {\n\tin: ['I', 'N'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n}) {}\nexport class StepGlNode extends MathFunctionArg2Factory('step', {in: ['edge', 'x']}) {}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport {ConnectionPointType, ConnectionPointTypes} from '../utils/connections/ConnectionPointType';\n\nfunction typed_visible_options(type: ConnectionPointType) {\n\tconst val = ConnectionPointTypes.indexOf(type);\n\treturn {visible_if: {type: val}};\n}\n\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nclass ConstantGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tbool = ParamConfig.BOOLEAN(0, typed_visible_options(ConnectionPointType.BOOL));\n\tint = ParamConfig.INTEGER(0, typed_visible_options(ConnectionPointType.INT));\n\tfloat = ParamConfig.FLOAT(0, typed_visible_options(ConnectionPointType.FLOAT));\n\tvec2 = ParamConfig.VECTOR2([0, 0], typed_visible_options(ConnectionPointType.VEC2));\n\tvec3 = ParamConfig.VECTOR3([0, 0, 0], typed_visible_options(ConnectionPointType.VEC3));\n\tvec4 = ParamConfig.VECTOR4([0, 0, 0, 0], typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new ConstantGlParamsConfig();\nexport class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'constant';\n\t}\n\tstatic readonly OUTPUT_NAME = 'val';\n\tprivate _params_by_type: Map<ConnectionPointType, BaseParamType> | undefined;\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => ConstantGlNode.OUTPUT_NAME);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [this._current_connection_type]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\t// _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst param = this._current_param;\n\t\tif (param) {\n\t\t\tconst connection_type = this._current_connection_type;\n\t\t\tconst value = ThreeToGl.any(param.value);\n\t\t\tconst var_value = this._current_var_name;\n\t\t\tconst body_line = `${connection_type} ${var_value} = ${value}`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t} else {\n\t\t\tconsole.warn(`no param found for constant node for type '${this.pv.type}'`);\n\t\t}\n\t}\n\n\tprivate get _current_connection_type() {\n\t\tif (this.pv.type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\tif (connection_type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\treturn connection_type;\n\t}\n\n\tprivate get _current_param(): BaseParamType {\n\t\tthis._params_by_type =\n\t\t\tthis._params_by_type ||\n\t\t\tnew Map<ConnectionPointType, BaseParamType>([\n\t\t\t\t[ConnectionPointType.BOOL, this.p.bool],\n\t\t\t\t[ConnectionPointType.INT, this.p.int],\n\t\t\t\t[ConnectionPointType.FLOAT, this.p.float],\n\t\t\t\t[ConnectionPointType.VEC2, this.p.vec2],\n\t\t\t\t[ConnectionPointType.VEC3, this.p.vec3],\n\t\t\t\t[ConnectionPointType.VEC4, this.p.vec4],\n\t\t\t]);\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\treturn this._params_by_type.get(connection_type)!;\n\t}\n\tprivate get _current_var_name(): string {\n\t\treturn this.gl_var_name(ConstantGlNode.OUTPUT_NAME);\n\t}\n\n\t// private update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tconst current_connection = this.io.outputs.named_output_connection_points[0];\n\t// \tif (current_connection && current_connection.type == this._current_connection_type) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this._current_connection_type, this._current_connection_type)],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\ninterface MathArg3Options {\n\tin?: [string, string, string];\n\tout?: string;\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tdefault?: Dictionary<any>;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg3Factory(type: string, options: MathArg3Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1', 'in2'];\n\tconst gl_input_default_values = options.default || {};\n\tconst out_type = options.out_type || ConnectionPointType.FLOAT;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg3GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\treturn [out_type];\n\t\t}\n\t\tgl_input_default_value(name: string) {\n\t\t\treturn gl_input_default_values[name];\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t}\n\t};\n}\nexport class ClampGlNode extends MathFunctionArg3Factory('clamp', {in: ['value', 'min', 'max'], default: {max: 1}}) {}\nexport class FaceforwardGlNode extends MathFunctionArg3Factory('face_forward', {in: ['N', 'I', 'Nref']}) {}\nexport class SmoothStepGlNode extends MathFunctionArg3Factory('smoothstep', {in: ['edge0', 'edge1', 'x']}) {}\n","export default \"\\nfloat fit01(float val, float src_min, float src_max){\\n\\tfloat size = src_max - src_min;\\n\\treturn (val - src_min) / size;\\n}\\nvec2 fit01(vec2 val, vec2 src_min, vec2 src_max){\\n\\treturn vec2(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y)\\n\\t);\\n}\\nvec3 fit01(vec3 val, vec3 src_min, vec3 src_max){\\n\\treturn vec3(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z)\\n\\t);\\n}\\nvec4 fit01(vec4 val, vec4 src_min, vec4 src_max){\\n\\treturn vec4(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z),\\n\\t\\tfit01(val.w, src_min.w, src_max.w)\\n\\t);\\n}\\n\\nfloat fit(float val, float src_min, float src_max, float dest_min, float dest_max){\\n\\tfloat  src_range = src_max - src_min;\\n\\tfloat dest_range = dest_max - dest_min;\\n\\n\\tfloat r = (val - src_min) / src_range;\\n\\treturn (r * dest_range) + dest_min;\\n}\\nvec2 fit(vec2 val, vec2 src_min, vec2 src_max, vec2 dest_min, vec2 dest_max){\\n\\treturn vec2(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y)\\n\\t);\\n}\\nvec3 fit(vec3 val, vec3 src_min, vec3 src_max, vec3 dest_min, vec3 dest_max){\\n\\treturn vec3(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z)\\n\\t);\\n}\\nvec4 fit(vec4 val, vec4 src_min, vec4 src_max, vec4 dest_min, vec4 dest_max){\\n\\treturn vec4(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z),\\n\\t\\tfit(val.w, src_min.w, src_max.w, dest_min.w, dest_max.w)\\n\\t);\\n}\\n\"","export default \"uniform float mNear;\\nuniform float mFar;\\n\\nvarying float vViewZDepth;\\n\\nvoid main() {\\n\\n\\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\\n\\tgl_FragColor = vec4( vec3( color ), 1.0 );\\n\\n}\\n\"","import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\n\nexport const SHADER_DEFAULTS = {\n\tmetalness: 1,\n\troughness: 0.5,\n};\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness);\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness);\n}\n// TODO: add the following texture params:\n// - aoMap+aoMapIntensity\n// - bumpMap+bumpScale\n// - displacementMap+displaycementScale+displacementBias\n// - emissiveMap\n// - envMap\n// - lightMap\n// - metalnessMap\n// - normalMap\n// - roughnessMap,\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends TypedMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\t\tthis.texture_env_map_controller.update();\n\n\t\tif (this._material) {\n\t\t\tthis._material.envMapIntensity = this.pv.env_map_intensity;\n\t\t\tthis._material.roughness = this.pv.roughness;\n\t\t\tthis._material.metalness = this.pv.metalness;\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureEnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_env_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEnvMapController));\n\t\tenv_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.ENV_MAP,\n\t\t\tOperatorPathOptions(TextureEnvMapController, 'use_env_map')\n\t\t);\n\t\tenv_map_intensity = ParamConfig.FLOAT(1, {visible_if: {use_env_map: 1}});\n\t};\n}\nclass TextureEnvMaterial extends Material {\n\tenvMap!: Texture | null;\n}\ntype CurrentMaterial = TextureEnvMaterial | ShaderMaterial;\nclass TextureEnvMapParamsConfig extends TextureEnvMapParamConfig(NodeParamsConfig) {}\nabstract class TextureEnvMapMatNode extends TypedMatNode<CurrentMaterial, TextureEnvMapParamsConfig> {\n\ttexture_env_map_controller!: TextureEnvMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(node: TextureEnvMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'envMap', this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tstatic async update(node: TextureEnvMapMatNode) {\n\t\tnode.texture_env_map_controller.update();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerPoints} from '../gl/code/assemblers/materials/Points';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass PointsMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerPoints, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points_builder';\n\t}\n\n\tinitialize_node() {}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerPoints>(this, ShaderAssemblerPoints);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import lodash_isNaN from 'lodash/isNaN';\nimport {Camera} from 'three/src/cameras/Camera';\n\nimport {CoreTransform} from '../../../core/Transform';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {ControlsController} from './utils/cameras/ControlsController';\nimport {LayersController} from './utils/LayersController';\nimport {PostProcessController} from './utils/cameras/PostProcessController';\n\n// import {Dirtyable} from './Concerns/Dirtyable';\n// import {Layers} from './Concerns/Layers';\n// import {PostProcess} from './Concerns/PostProcess';\n// import {Transformed} from './Concerns/Transformed';\n// import {Background} from './Concerns/Background';\n// import {CoreTextureLoader} from '../../../Core/Loader/Texture'\n// import {CameraControls} from './Concerns/CameraControls';\n// import {File} from '../../../Engine/Node/Cop/File'\nimport {ThreejsViewer} from '../../viewers/Threejs';\nimport {BaseBackgroundController} from './utils/cameras/background/_BaseController';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport interface OrthoOrPerspCamera extends Camera {\n\tnear: number;\n\tfar: number;\n\tupdateProjectionMatrix: () => void;\n\tgetFocalLength?: () => void;\n}\n\nconst EVENT_CHANGE = {type: 'change'};\n\nexport const BASE_CAMERA_DEFAULT = {\n\tnear: 1.0,\n\tfar: 100.0,\n};\n\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\nimport {TypedObjNode} from './_Base';\n\nexport function CameraTransformParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcamera = ParamConfig.FOLDER();\n\t\tcontrols = ParamConfig.OPERATOR_PATH('', {\n\t\t\tnode_selection: {\n\t\t\t\tcontext: NodeContext.EVENT,\n\t\t\t},\n\t\t});\n\t\t// add transform params\n\t\t// t = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// r = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// s = ParamConfig.VECTOR3([1, 1, 1]);\n\t\t// scale = ParamConfig.FLOAT(1);\n\t\ttarget = ParamConfig.VECTOR3([0, 0, 0], {cook: false});\n\t\tnear = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t\tfar = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t\t// aspect = ParamConfig.FLOAT(1);\n\t\t// lock_width = ParamConfig.BOOLEAN(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('');\n\n\t\tset_master_camera = ParamConfig.BUTTON(null, {\n\t\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\t\tBaseCameraObjNodeClass.PARAM_CALLBACK_set_master_camera(node as BaseCameraObjNodeType);\n\t\t\t},\n\t\t});\n\t};\n}\n\nexport class BaseCameraObjParamsConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(TransformedParamConfig(LayerParamConfig(CameraTransformParamConfig(NodeParamsConfig))))\n) {}\n\nexport class TypedCameraObjNode<O extends OrthoOrPerspCamera, K extends BaseCameraObjParamsConfig> extends TypedObjNode<\n\tO,\n\tK\n> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.CAMERA;\n\tprotected _object!: O;\n\tprotected _aspect: number = -1;\n\tget object() {\n\t\treturn this._object;\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprotected _background_controller: BaseBackgroundController | undefined;\n\tget background_controller(): BaseBackgroundController {\n\t\treturn (this._background_controller =\n\t\t\tthis._background_controller || new this.background_controller_constructor(this));\n\t}\n\tprotected get background_controller_constructor() {\n\t\treturn BaseBackgroundController;\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller(): ControlsController {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _layers_controller: LayersController | undefined;\n\tget layers_controller() {\n\t\treturn (this._layers_controller = this._layers_controller || new LayersController(this));\n\t}\n\tprotected _post_process_controller: PostProcessController | undefined;\n\tget post_process_controller(): PostProcessController {\n\t\treturn (this._post_process_controller = this._post_process_controller || new PostProcessController(this));\n\t}\n\n\t// protected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active || false);\n\t\t// });\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\t// create_common_params() {\n\t// \t// this.within_param_folder('transform', () => {\n\t// \t// \t// this.add_param(ParamType.OPERATOR_PATH, 'controls', '', {\n\t// \t// \t// \tnode_selection: {\n\t// \t// \t// \t\tcontext: NodeContext.EVENT,\n\t// \t// \t// \t},\n\t// \t// \t// });\n\t// \t// \t// CoreTransform.create_params(this); // removed since they are now added Persp Camera\n\t// \t// \t// this.add_param( ParamType.TOGGLE, 'is_updating', 0, {cook: false, hidden: true}); //, hidden: true} )\n\t// \t// \t// this.add_param(ParamType.VECTOR3, 'target', [0, 0, 0], {cook: false}); //, hidden: true} )\n\t// \t// });\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.layers_controller.add_params();\n\t// \t// this.add_param(ParamType.FLOAT, 'near', BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.FLOAT, 'far', BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.BOOLEAN, 'lock_width', 1);\n\t// \t// });\n\t// \t// this.background_controller.add_params();\n\t// \t// this.post_process_controller.add_params();\n\t// }\n\n\t// create_player_camera_params() {\n\t// \tthis.add_param(ParamType.BUTTON, 'set_master_camera', null, {callback: this.set_as_master_camera.bind(this)});\n\t// }\n\t// is_updating():boolean{\n\t// \treturn this.param('is_updating').value()\n\t// }\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tasync cook() {\n\t\tthis.transform_controller.update();\n\t\tthis.layers_controller.update();\n\t\tawait this.background_controller.update();\n\n\t\tif (this._object.near != this.pv.near || this._object.far != this.pv.far) {\n\t\t\tthis._object.near = this.pv.near;\n\t\t\tthis._object.far = this.pv.far;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\n\t\tawait this.post_process_controller.update_composer_passes();\n\t\tthis.update_camera();\n\t\tthis.controls_controller.update_controls();\n\n\t\t// TODO: ideally the update transform and update camera\n\t\t// can both return if the camera has changed\n\t\t// and we can run this here instead of inside the update_transform and update_camera\n\t\t// this._object.dispatchEvent( EVENT_CHANGE )\n\t\tthis._object.dispatchEvent(EVENT_CHANGE);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\ton_create() {}\n\t//\n\ton_delete() {}\n\t//\n\n\tcamera() {\n\t\treturn this._object;\n\t}\n\n\tupdate_camera() {}\n\n\t//\n\tstatic PARAM_CALLBACK_set_master_camera(node: BaseCameraObjNodeType) {\n\t\tnode.set_as_master_camera();\n\t}\n\tset_as_master_camera() {\n\t\tthis.scene.cameras_controller.set_master_camera_node_path(this.full_path());\n\t}\n\n\tsetup_for_aspect_ratio(aspect: number) {\n\t\tif (lodash_isNaN(aspect)) {\n\t\t\treturn;\n\t\t}\n\t\tif (aspect && this._aspect != aspect) {\n\t\t\tthis._aspect = aspect;\n\t\t\tthis._update_for_aspect_ratio();\n\t\t}\n\t}\n\tprotected _update_for_aspect_ratio(): void {}\n\n\tupdate_transform_params_from_object() {\n\t\t// CoreTransform.set_params_from_matrix(this._object.matrix, this, {scale: false})\n\t\tCoreTransform.set_params_from_object(this._object, this);\n\t}\n\tcreate_viewer(element: HTMLElement): ThreejsViewer {\n\t\treturn new ThreejsViewer(element, this.scene, this);\n\t}\n}\n// \tconsole.warn \"camera #{this.full_path()} has no controls assigned\"\n\n// controls_node: ->\n// \tif @_param_controls? && @_param_controls != ''\n// \t\tCore.Walker.find_node(this, @_param_controls)\n\nexport type BaseCameraObjNodeType = TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig>;\nexport class BaseCameraObjNodeClass extends TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig> {}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_compact from 'lodash/compact';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_trim from 'lodash/trim';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_sum from 'lodash/sum';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\n// const THREE = {Box3, BufferGeometry, Group, LineSegments, Mesh, Object3D, Points, Vector3}\nimport {CoreObject} from './Object';\nimport {CoreGeometry} from './Geometry';\nimport {CoreAttribute} from './Attribute';\n// import {Core} from '../_Module'\nimport {CoreString} from '../String';\nimport {CoreConstant, AttribClass} from './Constant';\n\n// import './MonkeyPatch'\n\nexport type GroupString = string;\n\nexport interface Object3DWithGeometry extends Object3D {\n\tgeometry: BufferGeometry;\n}\n\nexport class CoreGroup {\n\t// _group: Group\n\tprivate _timestamp: number | undefined;\n\t// _core_objects:\n\tprivate _objects: Object3D[] | undefined;\n\tprivate _core_objects: CoreObject[] | undefined;\n\n\t// _geometries: BufferGeometry[];\n\tprivate _core_geometries: CoreGeometry[] | undefined;\n\n\tprivate _bounding_box: Box3 | undefined;\n\t// private _bounding_sphere: Sphere | undefined;\n\n\tconstructor() {\n\t\t//_group: Group){\n\t\t// this._group = _group;\n\t\tthis.touch();\n\t}\n\n\t//\n\t//\n\t// TIMESTAMP\n\t//\n\t//\n\ttimestamp() {\n\t\treturn this._timestamp;\n\t}\n\ttouch() {\n\t\tthis._timestamp = performance.now();\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._bounding_box = undefined;\n\t\t// this._bounding_sphere = undefined;\n\t\tthis._core_geometries = undefined;\n\t\tthis._core_objects = undefined;\n\t}\n\n\t//\n\t//\n\t// CLONE\n\t//\n\t//\n\tclone() {\n\t\tconst core_group = new CoreGroup();\n\t\tif (this._objects) {\n\t\t\tconst objects = [];\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tobjects.push(CoreObject.clone(object));\n\t\t\t}\n\t\t\tcore_group.set_objects(objects);\n\t\t}\n\t\treturn core_group;\n\t}\n\t//\n\t//\n\t// OBJECTS\n\t//\n\t//\n\tset_objects(objects: Object3D[]) {\n\t\tthis._objects = objects;\n\t\tthis.touch();\n\t}\n\tobjects() {\n\t\treturn this._objects as Object3DWithGeometry[];\n\t}\n\tcore_objects() {\n\t\treturn (this._core_objects = this._core_objects || this._create_core_objects());\n\t}\n\tprivate _create_core_objects(): CoreObject[] {\n\t\tconst list: CoreObject[] = [];\n\t\tif (this._objects) {\n\t\t\tfor (let i = 0; i < this._objects.length; i++) {\n\t\t\t\tthis._objects[i].traverse((object) => {\n\t\t\t\t\tconst core_object = new CoreObject(object, i);\n\t\t\t\t\tlist.push(core_object);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\t// group() {\n\t// \treturn this._group;\n\t// }\n\t// uuid() {\n\t// \treturn this._group.uuid;\n\t// }\n\n\tgeometries(): BufferGeometry[] {\n\t\t// this._geometries = [];\n\t\t// for (let object of this._objects) {\n\t\t// \tobject.traverse((object) => this.__geometry_from_object.bind(this)(this._geometries, object));\n\t\t// \t// \tconst geometry = this.geometry_from_object(object)\n\t\t// \t// \tif (geometry != null) {\n\t\t// \t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t// \t// \t}\n\t\t// \t// });\n\t\t// }\n\t\t// return this._geometries;\n\t\tconst list: BufferGeometry[] = [];\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tconst geometry = (core_object.object() as Mesh).geometry as BufferGeometry;\n\t\t\tif (geometry) {\n\t\t\t\tlist.push(geometry);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tcore_geometries(): CoreGeometry[] {\n\t\treturn (this._core_geometries = this._core_geometries || this.create_core_geometries());\n\t}\n\tprivate create_core_geometries() {\n\t\tconst list: CoreGeometry[] = [];\n\t\tfor (let geometry of this.geometries()) {\n\t\t\tlist.push(new CoreGeometry(geometry));\n\t\t\t// object.traverse(object=> this.__core_geometry_from_object.bind(this)(this._core_geometries, object))\n\t\t\t// \tconst geometry = this.geometry_from_object(object)\n\t\t\t// \tif (geometry != null) {\n\t\t\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t\t// \t}\n\t\t\t// });\n\t\t}\n\t\treturn list;\n\t}\n\t__geometry_from_object(list: BufferGeometry[], object: Mesh) {\n\t\tif (object.geometry) {\n\t\t\treturn list.push(object.geometry as BufferGeometry);\n\t\t}\n\t}\n\t// __core_geometry_from_object(list, object){\n\t// \tconst geometry = CoreGroup.geometry_from_object(object)\n\t// \tif (geometry != null) {\n\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t// \t}\n\t// }\n\tstatic geometry_from_object(object: Object3D): BufferGeometry | null {\n\t\tif ((object as Mesh).isMesh || (object as LineSegments).isLine || (object as Points).isPoints) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t}\n\t\treturn null;\n\t}\n\tfaces() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.faces()));\n\t}\n\tpoints() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.points()));\n\t}\n\tpoints_count() {\n\t\treturn lodash_sum(this.core_geometries().map((g) => g.points_count()));\n\t}\n\tpoints_from_group(group: GroupString) {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tconst points = this.points();\n\t\t\treturn lodash_compact(indices.map((i) => points[i]));\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tstatic from_objects(objects: Object3D[]): CoreGroup {\n\t\tconst core_group = new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\treturn core_group;\n\t}\n\n\t// objects() {\n\t// \treturn this._objects = lodash_map(this._group.children, (object, i)=> {\n\t// \t\tconst object_wrapper = new CoreObject(object);\n\t// \t\tobject_wrapper.set_index(i);\n\t// \t\treturn object_wrapper;\n\t// \t});\n\t// }\n\tobjects_from_group(group_name: string): Object3D[] {\n\t\treturn this.core_objects_from_group(group_name).map((co) => co.object());\n\t}\n\tcore_objects_from_group(group_name: string): CoreObject[] {\n\t\tgroup_name = lodash_trim(group_name);\n\n\t\tif (group_name !== '') {\n\t\t\tconst index = parseInt(group_name);\n\t\t\tif (!lodash_isNaN(index)) {\n\t\t\t\treturn lodash_compact([this.core_objects()[index]]);\n\t\t\t} else {\n\t\t\t\treturn this.core_objects().filter((core_object) => {\n\t\t\t\t\treturn CoreString.match_mask(group_name, core_object.name());\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.core_objects();\n\t\t}\n\t}\n\n\t// reset: ->\n\t// \t@_geometries = []\n\t// \t@_points = []\n\n\t// _find_geometries: ->\n\t// \tlist = []\n\t// \t@_group.traverse (object)=>\n\t// \t\tif (geometry = object.geometry)?\n\t// \t\t\tlist.push new Geometry(geometry)\n\t// \tlist\n\n\t// _find_points: ->\n\t// \tlodash_flatten( lodash_map(this.objects(), (g)->g.points()) )\n\n\t// bounding_box() {\n\t// \treturn new Box3().setFromObject(this._group);\n\t// }\n\tbounding_box(): Box3 {\n\t\treturn (this._bounding_box = this._bounding_box || this._compute_bounding_box());\n\t}\n\t// bounding_sphere(): Sphere {\n\t// \treturn (this._bounding_sphere = this._bounding_sphere || this._compute_bounding_sphere());\n\t// }\n\tcenter(): Vector3 {\n\t\tconst center = new Vector3();\n\t\tthis.bounding_box().getCenter(center);\n\t\treturn center;\n\t}\n\tsize(): Vector3 {\n\t\tconst size = new Vector3();\n\t\tthis.bounding_box().getSize(size);\n\t\treturn size;\n\t}\n\n\tprivate _compute_bounding_box() {\n\t\tlet bbox: Box3 | undefined; // = new Box3();\n\t\tif (this._objects) {\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\tif (bbox) {\n\t\t\t\t\tbbox.expandByObject(object);\n\t\t\t\t} else {\n\t\t\t\t\tif (geometry.boundingBox) {\n\t\t\t\t\t\tbbox = geometry.boundingBox.clone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbbox = bbox || new Box3(new Vector3(-1, -1, -1), new Vector3(+1, +1, +1));\n\t\treturn bbox;\n\t}\n\t// private _compute_bounding_sphere() {\n\t// \tlet sphere: Sphere | undefined; // = new Box3();\n\t// \tif (this._objects) {\n\t// \t\tfor (let object of this._objects) {\n\t// \t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t// \t\t\tgeometry.computeBoundingSphere();\n\t// \t\t\tif (sphere) {\n\t// \t\t\t\tsphere.expandByObject(object);\n\t// \t\t\t} else {\n\t// \t\t\t\tsphere = geometry.boundingBox.clone();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tsphere = sphere || new Sphere(new Vector3(0, 0, 0), 1);\n\t// \treturn sphere;\n\t// }\n\tcompute_vertex_normals() {\n\t\tfor (let object of this.core_objects()) {\n\t\t\tobject.compute_vertex_normals();\n\t\t}\n\t}\n\n\thas_attrib(name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.has_attrib(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tattrib_type(name: string) {\n\t\tconst first_geometry = this.core_geometries()[0];\n\t\tif (first_geometry != null) {\n\t\t\treturn first_geometry.attrib_type(name);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trename_attrib(old_name: string, new_name: string, attrib_class: AttribClass) {\n\t\tswitch (attrib_class) {\n\t\t\tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst geometry = CoreGroup.geometry_from_object(child);\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\t\t\t\t\t\t\t\tcore_geometry.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst core_object = new CoreObject(child, 0);\n\t\t\t\t\t\t\t\tcore_object.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tattrib_names() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tobject_attrib_names() {\n\t\tlet first_object;\n\t\tif ((first_object = this.core_objects()[0]) != null) {\n\t\t\treturn first_object.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tattrib_names_matching_mask(masks_string: GroupString) {\n\t\tconst masks = CoreString.attrib_names(masks_string);\n\n\t\tconst matching_attrib_names = [];\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\tfor (let mask of masks) {\n\t\t\t\tif (CoreString.match_mask(attrib_name, mask)) {\n\t\t\t\t\tmatching_attrib_names.push(attrib_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lodash_uniq(matching_attrib_names);\n\t}\n\n\tattrib_sizes() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_sizes();\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\tattrib_size(attrib_name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_size(attrib_name);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_geometry of this.core_geometries()) {\n\t\t\tcore_geometry.add_numeric_attrib(name, size, default_value);\n\t\t}\n\t}\n\n\tadd_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tcore_object.add_numeric_attrib(name, default_value);\n\t\t}\n\t}\n\n\tstatic clone(src_group: Group) {\n\t\tconst new_group = new Group();\n\n\t\tsrc_group.children.forEach((src_object) => {\n\t\t\tconst new_object = CoreObject.clone(src_object);\n\t\t\tnew_group.add(new_object);\n\t\t});\n\n\t\treturn new_group;\n\t}\n}\n","import {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// const THREE = {BufferGeometry, Vector2, Vector3, Vector4}\nimport {CoreAttribute} from './Attribute';\nimport {CoreGeometry} from './Geometry';\nimport {CoreEntity} from './Entity';\n// import Geometry from './Geometry';\n\nconst ATTRIB_NAMES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n};\n\nenum ComponentName {\n\tx = 'x',\n\ty = 'y',\n\tz = 'z',\n\tw = 'w',\n\tr = 'r',\n\tg = 'g',\n\tb = 'b',\n}\nconst COMPONENT_INDICES = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\nconst PTNUM = 'ptnum';\nconst DOT = '.';\n\nexport class CorePoint extends CoreEntity {\n\t_geometry: BufferGeometry;\n\t_position: Vector3 | undefined;\n\t_normal: Vector3 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, index: number) {\n\t\tsuper(index);\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\n\tgeometry_wrapper() {\n\t\treturn this._core_geometry;\n\t}\n\tgeometry() {\n\t\treturn (this._geometry = this._geometry || this._core_geometry.geometry());\n\t}\n\n\t// add_attribute: (name, size, value)->\n\t// \t@_attributes[name] = new Attribute(size, value)\n\n\tattrib_size(name: string): number {\n\t\t//@_attributes[name].size()\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.getAttribute(name).itemSize;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tconst remapped_name = CoreAttribute.remap_name(name);\n\t\treturn this._core_geometry.has_attrib(remapped_name);\n\t}\n\n\tattrib_value(name: string) {\n\t\t//, target){ // target could be used, but not entirely sure I am ready now\n\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet component_name = null;\n\t\t\tlet component_index = null;\n\t\t\tif (name[name.length - 2] === DOT) {\n\t\t\t\tcomponent_name = name[name.length - 1] as ComponentName;\n\t\t\t\tcomponent_index = COMPONENT_INDICES[component_name];\n\t\t\t\tname = name.substring(0, name.length - 2);\n\t\t\t}\n\t\t\tconst remaped_name = CoreAttribute.remap_name(name);\n\n\t\t\t//if (attrib = @_attributes[name])?\n\t\t\tconst attrib = this._geometry.getAttribute(remaped_name);\n\t\t\tif (attrib) {\n\t\t\t\tconst {array} = attrib;\n\t\t\t\tif (this._core_geometry.is_attrib_indexed(remaped_name)) {\n\t\t\t\t\tconst value_index = this.attrib_value_index(remaped_name); //attrib.value()\n\t\t\t\t\treturn this._core_geometry.user_data_attrib(remaped_name)[value_index];\n\t\t\t\t} else {\n\t\t\t\t\tconst size = attrib.itemSize;\n\t\t\t\t\tconst start_index = this._index * size;\n\n\t\t\t\t\tif (component_index == null) {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn new Vector2(array[start_index + 0], array[start_index + 1]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// target.fromArray(array, start_index)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn new Vector4(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2],\n\t\t\t\t\t\t\t\t\tarray[start_index + 3]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow `size not valid (${size})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn array[start_index + component_index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst message = `attrib ${name} not found. availables are: ${Object.keys(\n\t\t\t\t\tthis._geometry.attributes || {}\n\t\t\t\t).join(',')}`;\n\t\t\t\tconsole.warn(message);\n\t\t\t\tthrow message;\n\t\t\t}\n\t\t}\n\t}\n\n\tattrib_value_index(name: string) {\n\t\tif (this._core_geometry.is_attrib_indexed(name)) {\n\t\t\t//@_attributes[name].value()\n\t\t\treturn this._geometry.getAttribute(name).array[this._index];\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tposition(): Vector3 {\n\t\t//@_attributes['position'].value()\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.POSITION);\n\t\tthis._position = this._position || new Vector3();\n\t\treturn this._position.fromArray(array, this._index * 3);\n\t}\n\tset_position(new_position: Vector3) {\n\t\tthis.set_attrib_value_vector3(ATTRIB_NAMES.POSITION, new_position);\n\t}\n\n\tnormal(): Vector3 {\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.NORMAL);\n\t\tthis._normal = this._normal || new Vector3();\n\t\treturn this._normal.fromArray(array, this._index * 3);\n\t}\n\tset_normal(new_normal: Vector3) {\n\t\treturn this.set_attrib_value_vector3(ATTRIB_NAMES.NORMAL, new_normal);\n\t}\n\n\tset_attrib_value(name: string, value: NumericAttribValue | string) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(value)\n\t\t//value = attrib.value()\n\t\t//value = this.attrib_value()\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst attrib_size = attrib.itemSize;\n\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tarray[this._index] = value as number;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tconst v2 = value as Vector2Like;\n\t\t\t\tarray[this._index * 2 + 0] = v2.x;\n\t\t\t\tarray[this._index * 2 + 1] = v2.y;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tconst is_color = (value as ColorLike).r != null;\n\t\t\t\tif (is_color) {\n\t\t\t\t\tconst col = value as ColorLike;\n\t\t\t\t\tarray[this._index * 3 + 0] = col.r;\n\t\t\t\t\tarray[this._index * 3 + 1] = col.g;\n\t\t\t\t\tarray[this._index * 3 + 2] = col.b;\n\t\t\t\t} else {\n\t\t\t\t\tconst v3 = value as Vector3Like;\n\t\t\t\t\tarray[this._index * 3 + 0] = v3.x;\n\t\t\t\t\tarray[this._index * 3 + 1] = v3.y;\n\t\t\t\t\tarray[this._index * 3 + 2] = v3.z;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Point.set_attrib_value does not yet allow attrib size ${attrib_size}`);\n\t\t\t\tthrow `attrib size ${attrib_size} not implemented`;\n\t\t}\n\t}\n\tset_attrib_value_vector3(name: string, value: Vector3) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst i = this._index * 3;\n\n\t\tarray[i] = value.x;\n\t\tarray[i + 1] = value.y;\n\t\tarray[i + 2] = value.z;\n\t}\n\n\tset_attrib_index(name: string, new_value_index: number) {\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(new_value_index)\n\t\t//value = attrib.value()\n\t\tconst array = this._geometry.getAttribute(name).array as number[];\n\t\treturn (array[this._index] = new_value_index);\n\t}\n}\n","export class CoreEntity {\n\tconstructor(protected _index: number) {}\n\tget index() {\n\t\treturn this._index;\n\t}\n}\n","type IterateeMethod = (element: any, index?: number) => void;\ntype IterateeMethodArray = IterateeMethod; // TODO: check this, as the element may be an array\ntype IterateeMethodCount = (index: number) => void;\n\ninterface CoreIteratorOptions {\n\tmax_time_per_chunk?: number;\n\tcheck_every_interations?: number;\n}\n\nexport class CoreIterator {\n\t// array\n\tprivate _array: any[] | undefined;\n\tprivate _iteratee_method_array: IterateeMethodArray | undefined;\n\tprivate _bound_next_with_array: (() => void) | undefined;\n\tprivate _current_array_element: any;\n\tprivate _array_index: number = 0;\n\n\t// count\n\tprivate _count: number = 0;\n\tprivate _iteratee_method_count: IterateeMethodCount | undefined;\n\tprivate _bound_next_with_count: (() => void) | undefined;\n\tprivate _current_count_index: number = 0;\n\n\tprivate _max_time_per_chunk: number;\n\tprivate _check_every_interations: number;\n\n\tprivate _resolve: null | (() => void) = null;\n\n\tconstructor(options: CoreIteratorOptions = {}) {\n\t\tthis._max_time_per_chunk = options.max_time_per_chunk || 10;\n\t\tthis._check_every_interations = options.check_every_interations || 100;\n\t}\n\n\tasync start_with_count(count: number, iteratee_method: IterateeMethodCount) {\n\t\tthis._count = count;\n\t\tthis._current_count_index = 0;\n\t\tthis._iteratee_method_count = iteratee_method;\n\t\tthis._bound_next_with_count = this.next_with_count.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_count();\n\t\t});\n\t}\n\tnext_with_count() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_count && this._bound_next_with_count) {\n\t\t\twhile (this._current_count_index < this._count) {\n\t\t\t\tthis._iteratee_method_count(this._current_count_index);\n\n\t\t\t\tthis._current_count_index++;\n\n\t\t\t\tif (this._current_count_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_count, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_count_index >= this._count) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ARRAY\n\t//\n\t//\n\tasync start_with_array(array: any[], iteratee_method: IterateeMethod) {\n\t\tthis._array = array;\n\t\tthis._array_index = 0;\n\t\tthis._iteratee_method_array = iteratee_method;\n\t\tthis._bound_next_with_array = this.next_with_array.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_array();\n\t\t});\n\t}\n\tnext_with_array() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_array && this._bound_next_with_array && this._array) {\n\t\t\twhile ((this._current_array_element = this._array[this._array_index])) {\n\t\t\t\tthis._iteratee_method_array(this._current_array_element, this._array_index);\n\n\t\t\t\tthis._array_index++;\n\n\t\t\t\tif (this._array_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_array, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_array_element === undefined) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreMath} from '../../math/_Module'\nimport {Vector2} from 'three/src/math/Vector2'\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\n\nexport class CoreGeometryUtilCircle {\n\tstatic positions(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst radian_per_segment =\n\t\t\tCoreMath.degrees_to_radians(arc_angle) / segments_count\n\n\t\tconst positions = []\n\t\tfor (let i = 0; i < segments_count; i++) {\n\t\t\tconst point_radian = radian_per_segment * i\n\t\t\tconst x = radius * Math.cos(point_radian)\n\t\t\tconst y = radius * Math.sin(point_radian)\n\n\t\t\tpositions.push(new Vector2(x, y))\n\t\t}\n\n\t\treturn positions\n\t}\n\n\tstatic create(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst positions_2d = this.positions(radius, segments_count, arc_angle)\n\n\t\tconst positions = []\n\t\tconst indices = []\n\t\tlet position_2d\n\t\tfor (let i = 0; i < positions_2d.length; i++) {\n\t\t\tposition_2d = positions_2d[i]\n\n\t\t\tpositions.push(position_2d.x)\n\t\t\tpositions.push(position_2d.y)\n\t\t\tpositions.push(0)\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1)\n\t\t\t\tindices.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// also add the last segment\n\t\tindices.push(segments_count - 1)\n\t\tindices.push(0)\n\n\t\tconst geometry = new BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(positions, 3)\n\t\t)\n\t\tgeometry.setIndex(indices)\n\n\t\treturn geometry\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {InstancedBufferGeometry} from 'three/src/core/InstancedBufferGeometry';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\n// import {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry'\n// const THREE = {BoxBufferGeometry, InstancedBufferAttribute, InstancedBufferGeometry, Matrix4, Quaternion, Vector2, Vector3}\n\nimport {CorePoint} from './Point';\n// import {Core} from '../_Module';\nimport {CoreGroup} from './Group';\nimport {CoreGeometry} from './Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nconst DEFAULT = {\n\tSCALE: new Vector3(1, 1, 1),\n\tPSCALE: 1,\n\tEYE: new Vector3(0, 0, 0),\n\tUP: new Vector3(0, 1, 0),\n};\nconst SCALE_ATTRIB_NAME = 'scale';\nconst PSCALE_ATTRIB_NAME = 'pscale';\nconst NORMAL_ATTRIB_NAME = 'normal';\nconst UP_ATTRIB_NAME = 'up';\nconst MATRIX_T = 'translate';\nconst MATRIX_R = 'rotate';\nconst MATRIX_S = 'scale';\n\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst ATTRIB_NAME_UV = 'uv';\nconst ATTRIB_NAME_COLOR = 'color';\n\nexport class CoreInstancer {\n\tprivate _is_pscale_present: boolean;\n\tprivate _is_scale_present: boolean;\n\tprivate _is_normal_present: boolean;\n\tprivate _is_up_present: boolean;\n\tprivate _do_rotate_matrices: boolean;\n\tprivate _matrices: Dictionary<Matrix4> = {};\n\n\tconstructor(private _group_wrapper: CoreGroup) {\n\t\tthis._is_pscale_present = this._group_wrapper.has_attrib('pscale');\n\t\tthis._is_scale_present = this._group_wrapper.has_attrib('scale');\n\n\t\tthis._is_normal_present = this._group_wrapper.has_attrib('normal');\n\t\tthis._is_up_present = this._group_wrapper.has_attrib('up');\n\n\t\tthis._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;\n\t}\n\n\tmatrices(): Matrix4[] {\n\t\tthis._matrices = {};\n\t\tthis._matrices[MATRIX_T] = new Matrix4();\n\t\tthis._matrices[MATRIX_R] = new Matrix4();\n\t\tthis._matrices[MATRIX_S] = new Matrix4();\n\n\t\treturn this._group_wrapper.points().map((point) => {\n\t\t\treturn this._matrix_from_point(point);\n\t\t});\n\t}\n\n\t_matrix_from_point(point: CorePoint): Matrix4 {\n\t\tconst t = point.position();\n\t\t//r = new Vector3(0,0,0)\n\t\tlet scale = this._is_scale_present ? point.attrib_value(SCALE_ATTRIB_NAME) : DEFAULT.SCALE;\n\t\tconst pscale = this._is_pscale_present ? point.attrib_value(PSCALE_ATTRIB_NAME) : DEFAULT.PSCALE;\n\t\tscale = scale.clone().multiplyScalar(pscale);\n\n\t\t//matrix = #Core.Transform.matrix(t, r, s, scale)\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.identity();\n\n\t\tconst scale_matrix = this._matrices[MATRIX_S];\n\t\tscale_matrix.makeScale(scale.x, scale.y, scale.z);\n\n\t\tconst translate_matrix = this._matrices[MATRIX_T];\n\t\ttranslate_matrix.makeTranslation(t.x, t.y, t.z);\n\n\t\tmatrix.multiply(translate_matrix);\n\n\t\tif (this._do_rotate_matrices) {\n\t\t\tconst rotate_matrix = this._matrices[MATRIX_R];\n\t\t\tconst eye = DEFAULT.EYE;\n\t\t\tconst center = point.attrib_value(NORMAL_ATTRIB_NAME).multiplyScalar(-1);\n\t\t\tconst up = this._is_up_present ? point.attrib_value(UP_ATTRIB_NAME) : DEFAULT.UP;\n\t\t\tup.normalize();\n\t\t\trotate_matrix.lookAt(eye, center, up);\n\n\t\t\tmatrix.multiply(rotate_matrix);\n\t\t}\n\n\t\tmatrix.multiply(scale_matrix);\n\n\t\treturn matrix;\n\t}\n\n\tstatic create_instance_buffer_geo(\n\t\tgeometry_to_instance: BufferGeometry,\n\t\ttemplate_core_group: CoreGroup,\n\t\tattributes_to_copy: string\n\t) {\n\t\tconst instance_pts = template_core_group.points();\n\t\t// geometry_to_instance = new BoxBufferGeometry( 2, 2, 2 )\n\t\t// geometry = new InstancedBufferGeometry()\n\t\t// geometry.index = geometry_to_instance.index\n\t\t// geometry.attributes.position = geometry_to_instance.attributes.position\n\t\t// geometry.attributes.uv = geometry_to_instance.attributes.uv\n\n\t\tconst geometry = new InstancedBufferGeometry();\n\t\tgeometry.copy(geometry_to_instance);\n\n\t\tconst instances_count = instance_pts.length;\n\t\tconst positions = new Float32Array(instances_count * 3);\n\t\tconst colors = new Float32Array(instances_count * 3);\n\t\tconst scales = new Float32Array(instances_count * 3);\n\t\tconst orients = new Float32Array(instances_count * 4);\n\n\t\tconst has_color = template_core_group.has_attrib(ATTRIB_NAME_COLOR);\n\n\t\tconst position = new Vector3(0, 0, 0);\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tconst instance_matrices = instancer.matrices();\n\n\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\tconst index3 = i * 3;\n\t\t\tconst index4 = i * 4;\n\n\t\t\tconst matrix = instance_matrices[i];\n\t\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\t\tposition.toArray(positions, index3);\n\t\t\tquaternion.toArray(orients, index4);\n\t\t\tscale.toArray(scales, index3);\n\n\t\t\tconst color = has_color ? instance_pt.attrib_value(ATTRIB_NAME_COLOR) : DEFAULT_COLOR;\n\t\t\tcolor.toArray(colors, index3);\n\t\t});\n\n\t\t// if(this._param_add_uv_offset){\n\t\tconst has_uv = template_core_group.has_attrib(ATTRIB_NAME_UV);\n\t\tif (has_uv) {\n\t\t\tconst uvs = new Float32Array(instances_count * 2);\n\t\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\t\tconst index2 = i * 2;\n\t\t\t\tconst uv = has_uv ? instance_pt.attrib_value(ATTRIB_NAME_UV) : DEFAULT_UV;\n\t\t\t\tuv.toArray(uvs, index2);\n\t\t\t});\n\t\t\tgeometry.setAttribute('instanceUv', new InstancedBufferAttribute(uvs, 2));\n\t\t}\n\t\t// }\n\n\t\tgeometry.setAttribute('instancePosition', new InstancedBufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('instanceScale', new InstancedBufferAttribute(scales, 3));\n\t\tgeometry.setAttribute('instanceOrientation', new InstancedBufferAttribute(orients, 4));\n\t\tgeometry.setAttribute('instanceColor', new InstancedBufferAttribute(colors, 3));\n\n\t\tconst attrib_names = template_core_group.attrib_names_matching_mask(attributes_to_copy);\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = template_core_group.attrib_size(attrib_name);\n\t\t\tconst values = new Float32Array(instances_count * attrib_size);\n\t\t\tinstance_pts.forEach((pt, i) => {\n\t\t\t\tconst value = pt.attrib_value(attrib_name);\n\t\t\t\tif (lodash_isNumber(value)) {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue.toArray(values, i * attrib_size);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgeometry.setAttribute(attrib_name, new InstancedBufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\tgeometry_wrapper.mark_as_instance();\n\n\t\treturn geometry;\n\t}\n}\n","// import {Core} from '../../_Module';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isString from 'lodash/isString';\nimport lodash_flatten from 'lodash/flatten';\nimport {Points} from 'three/src/objects/Points';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nconst THREE = {BufferGeometry, Float32BufferAttribute, Points};\n\n// import UrlLoader from '../UrlLoader';\nimport {CoreString} from '../../String';\nimport {CoreGeometry} from '../../geometry/Geometry';\nimport {CoreConstant} from '../../geometry/Constant';\nimport {CoreAttributeData} from '../../geometry/AttributeData';\nimport {CoreAttribute} from '../../geometry/Attribute';\n// import {BaseNodeType} from '../../../engine/nodes/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nconst DEEP_ATTRIB_SEPARATOR = ':';\n\nexport interface JsonDataLoaderOptions {\n\tdata_keys_prefix?: string;\n\tskip_entries?: string;\n\tdo_convert?: boolean;\n\tconvert_to_numeric?: string;\n}\n\nexport class JsonDataLoader {\n\t_json: any[] | undefined;\n\t_attribute_datas_by_name: Dictionary<CoreAttributeData> = {};\n\tprivate _options: JsonDataLoaderOptions = {};\n\n\tconstructor(options: JsonDataLoaderOptions = {}) {\n\t\tthis._options.data_keys_prefix = options.data_keys_prefix;\n\t\tthis._options.skip_entries = options.skip_entries;\n\t\tthis._options.do_convert = options.do_convert || false;\n\t\tthis._options.convert_to_numeric = options.convert_to_numeric;\n\t}\n\t//\n\n\tload(\n\t\turl: string,\n\t\tsuccess_callback: (object: Object3D) => void,\n\t\tprogress_callback: (() => void) | undefined,\n\t\terror_callback: (error: ErrorEvent) => void | undefined\n\t) {\n\t\t// const url_loader = new UrlLoader();\n\t\t// const start_time = performance.now();\n\t\t// const config = {\n\t\t// \tcrossdomain: true\n\t\t// }\n\t\tfetch(url)\n\t\t\t.then(async (response) => {\n\t\t\t\t// const end_time = performance.now();\n\n\t\t\t\tthis._json = await response.json();\n\t\t\t\tif (this._options.data_keys_prefix != null && this._options.data_keys_prefix != '') {\n\t\t\t\t\tthis._json = this.get_prefixed_json(this._json, this._options.data_keys_prefix.split('.'));\n\t\t\t\t}\n\t\t\t\tconst object = this.create_object();\n\t\t\t\tsuccess_callback(object);\n\t\t\t})\n\t\t\t.catch((error: ErrorEvent) => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\terror_callback(error);\n\t\t\t});\n\t}\n\n\tget_prefixed_json(json: any, prefixes: string[]): any[] {\n\t\tif (prefixes.length == 0) {\n\t\t\treturn json;\n\t\t} else {\n\t\t\tconst first_prefix = prefixes.shift();\n\t\t\tif (first_prefix) {\n\t\t\t\treturn this.get_prefixed_json(json[first_prefix], prefixes);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tset_json(json: any) {\n\t\treturn (this._json = json);\n\t}\n\n\tcreate_object() {\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tconst core_geo = new CoreGeometry(geometry);\n\n\t\tif (this._json != null) {\n\t\t\tconst points_count = this._json.length;\n\t\t\tcore_geo.init_position_attribute(points_count);\n\n\t\t\tthis._find_attributes();\n\t\t\t// for(let attrib_name of Object.keys(this._attribute_names)){\n\t\t\t// \tconst attrib_data = this._attribute_datas_by_name[attrib_name];\n\t\t\t// \treturn core_geo.add_attribute(attrib_name, attrib_data);\n\t\t\t// }\n\n\t\t\tconst convert_to_numeric_masks = CoreString.attrib_names(this._options.convert_to_numeric || '');\n\n\t\t\t// set values\n\t\t\tfor (let attrib_name of Object.keys(this._attribute_datas_by_name)) {\n\t\t\t\tlet attrib_values = lodash_flatten(this._attribute_values_for_name(attrib_name));\n\n\t\t\t\tconst data = this._attribute_datas_by_name[attrib_name];\n\t\t\t\tconst size = data.size();\n\n\t\t\t\tif (data.type() === CoreConstant.ATTRIB_TYPE.STRING) {\n\t\t\t\t\t// const index_data = CoreAttribute.array_to_indexed_arrays(\n\t\t\t\t\t// \tattrib_values as string[]\n\t\t\t\t\t// )\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options.do_convert &&\n\t\t\t\t\t\tCoreString.matches_one_mask(attrib_name, convert_to_numeric_masks)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst numerical_attrib_values: number[] = attrib_values.map((v) => {\n\t\t\t\t\t\t\tif (lodash_isString(v)) {\n\t\t\t\t\t\t\t\treturn parseFloat(v) || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t\t\tattrib_name,\n\t\t\t\t\t\t\tnew THREE.Float32BufferAttribute(numerical_attrib_values, size)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(attrib_values as string[]);\n\t\t\t\t\t\tcore_geo.set_indexed_attribute(attrib_name, index_data['values'], index_data['indices']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst numerical_attrib_values = attrib_values as number[];\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new THREE.Float32BufferAttribute(numerical_attrib_values, size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Points(geometry, CoreConstant.MATERIALS[THREE.Points.name]);\n\t}\n\n\tprivate _find_attributes() {\n\t\tlet first_pt;\n\n\t\tconst masks = CoreString.attrib_names(this._options.skip_entries || '');\n\n\t\tif (this._json) {\n\t\t\tif ((first_pt = this._json[0]) != null) {\n\t\t\t\tfor (let attrib_name of Object.keys(first_pt)) {\n\t\t\t\t\tconst attrib_value = first_pt[attrib_name];\n\n\t\t\t\t\tif (this._value_has_subentries(attrib_value)) {\n\t\t\t\t\t\tfor (let key of Object.keys(attrib_value)) {\n\t\t\t\t\t\t\tconst deep_attrib_name = [attrib_name, key].join(DEEP_ATTRIB_SEPARATOR);\n\t\t\t\t\t\t\tconst deep_attrib_value = attrib_value[attrib_name];\n\n\t\t\t\t\t\t\tif (!CoreString.matches_one_mask(deep_attrib_name, masks)) {\n\t\t\t\t\t\t\t\tthis._attribute_datas_by_name[deep_attrib_name] = CoreAttributeData.from_value(\n\t\t\t\t\t\t\t\t\tdeep_attrib_value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!CoreString.matches_one_mask(attrib_name, masks)) {\n\t\t\t\t\t\t\tthis._attribute_datas_by_name[attrib_name] = CoreAttributeData.from_value(attrib_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _attribute_values_for_name(attrib_name: string): StringOrNumber[] {\n\t\tif (this._json) {\n\t\t\treturn this._json.map((json_element: Dictionary<any>) => {\n\t\t\t\tconst prefix = attrib_name.split(DEEP_ATTRIB_SEPARATOR)[0];\n\t\t\t\tconst value = json_element[prefix];\n\t\t\t\tif (this._value_has_subentries(value)) {\n\t\t\t\t\tconst deep_attrib_name = attrib_name.substring(prefix.length + 1);\n\t\t\t\t\treturn value[deep_attrib_name] || 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn value || 0;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t_value_has_subentries(value: any): boolean {\n\t\treturn lodash_isObject(value) && !lodash_isArray(value);\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\tgeometryPending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {CoreGeometry} from '../Geometry'\n// import lodash_range from 'lodash/range'\nimport lodash_flatten from 'lodash/flatten'\nimport lodash_intersection from 'lodash/intersection'\nimport lodash_concat from 'lodash/concat'\n\nexport class CoreGeometryOperationSkin {\n\tconstructor(\n\t\tprivate geometry: BufferGeometry,\n\t\tprivate geometry1: BufferGeometry,\n\t\tprivate geometry0: BufferGeometry\n\t) {}\n\n\tprocess() {\n\t\tconst geometry_wrapper0 = new CoreGeometry(this.geometry0)\n\t\tconst geometry_wrapper1 = new CoreGeometry(this.geometry1)\n\t\tconst segments0 = geometry_wrapper0.segments()\n\t\tconst segments1 = geometry_wrapper1.segments()\n\n\t\tif (segments0.length === 0 || segments1.length === 0) {\n\t\t\treturn\n\t\t}\n\t\t// find smallest geo to iterate on its array\n\t\tconst geometries_by_segments_count =\n\t\t\tsegments0.length < segments1.length\n\t\t\t\t? [geometry_wrapper0, geometry_wrapper1]\n\t\t\t\t: [geometry_wrapper1, geometry_wrapper0]\n\n\t\tconst smallest_geometry = geometries_by_segments_count[0]\n\t\tconst largest_geometry = geometries_by_segments_count[1]\n\n\t\tconst smallest_segments = smallest_geometry.segments()\n\t\tconst largest_segments = largest_geometry.segments()\n\n\t\tconst smallest_points = smallest_geometry.points()\n\t\tconst largest_points = largest_geometry.points()\n\t\tconst smallest_points_count = smallest_points.length\n\t\t// const largest_points_count = largest_points.length;\n\t\tconst all_points = lodash_concat(smallest_points, largest_points)\n\n\t\t// const half_faces_count = smallest_segments.length;\n\t\tconst points_indices: number[] = []\n\t\tsmallest_segments.forEach((segment, i) => {\n\t\t\tconst matched_segment = largest_segments[i]\n\t\t\t// face 1\n\t\t\tpoints_indices.push(segment[0])\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t\t// face 2\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[1] + smallest_points_count)\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t})\n\n\t\tconst attributes_in_common = lodash_intersection(\n\t\t\tsmallest_geometry.attrib_names(),\n\t\t\tlargest_geometry.attrib_names()\n\t\t)\n\t\t// const points = all_points //points_indices.map(index=> all_points[index]);\n\t\tattributes_in_common.forEach((attrib_name) => {\n\t\t\tconst attrib_size = smallest_geometry.attrib_size(attrib_name)\n\t\t\tlet attrib_values = all_points.map((point) =>\n\t\t\t\tpoint.attrib_value(attrib_name)\n\t\t\t)\n\t\t\tif (attrib_size > 1) {\n\t\t\t\tattrib_values = lodash_flatten(\n\t\t\t\t\tattrib_values.map((v) => v.toArray())\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.geometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew Float32BufferAttribute(attrib_values, attrib_size)\n\t\t\t)\n\t\t})\n\n\t\t// const new_indices = lodash_range(points.length);\n\t\tthis.geometry.setIndex(points_indices)\n\t\tthis.geometry.computeVertexNormals()\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonImporter} from './Node';\n// import {BaseNodeObjJsonImporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonImporter} from './node/Subnetwork';\n\nimport {ParamJsonImporter} from './Param';\nimport {ParamMultipleJsonImporter} from './param/Multiple';\nimport {ParamStringJsonImporter} from './param/String';\nimport {ParamRampJsonImporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\nimport {TypedMultipleParam} from '../../../params/_Multiple';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonImportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonImporter(node);\n\t\t// }\n\t\treturn new NodeJsonImporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\tif (param instanceof TypedMultipleParam) {\n\t\t\treturn new ParamMultipleJsonImporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonImporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonImporter(param);\n\t\t}\n\t\treturn new ParamJsonImporter(param);\n\t}\n}\n\n// export class CodeImporterVisitor {\n// \tstatic node(node: BaseNode): NodeCodeImporter {\n// \t\treturn new NodeCodeImporter(node);\n// \t}\n// \tstatic node_obj(node: BaseNode) {\n// \t\treturn new BaseNodeObjCodeImporter(node);\n// \t}\n// \tstatic node_sop_subnetwork(node: BaseNode) {\n// \t\treturn new BaseNodeSopSubnetworkCodeImporter(node);\n// \t}\n\n// \tstatic visit_param(param: BaseParam) {\n// \t\treturn new ParamCodeImporter(param);\n// \t}\n// \tstatic param_multiple(param: BaseParam) {\n// \t\treturn new ParamMultipleCodeImporter(param);\n// \t}\n// \tstatic param_numeric(param: BaseParam) {\n// \t\treturn new ParamNumericCodeImporter(param);\n// \t}\n// \tstatic param_operator_path(param: BaseParam) {\n// \t\treturn new ParamOperatorPathCodeImporter(param);\n// \t}\n// \tstatic param_string(param: BaseParam) {\n// \t\treturn new ParamStringCodeImporter(param);\n// \t}\n// \tstatic param_ramp(param: BaseParam) {\n// \t\treturn new ParamRampCodeImporter(param);\n// \t}\n// }\n","import {PolyScene} from './scene/PolyScene';\nimport {AllRegister} from './poly/registers/All';\nAllRegister.run();\n\nimport {SceneJsonExporter, SceneJsonExporterData} from './io/json/export/Scene';\nimport default_scene_data from '../../public/examples/scenes/default_simple.json';\nimport {SceneJsonImporter} from './io/json/import/Scene';\n\nexport class Tester {\n\tstatic async load_scene() {\n\t\tconst scene = await SceneJsonImporter.load_data(default_scene_data as SceneJsonExporterData);\n\n\t\treturn scene;\n\t}\n\tstatic create_scene() {\n\t\tconst scene = new PolyScene();\n\t\tscene.root.create_node('ambient_light');\n\n\t\tscene.loading_controller.mark_as_loaded();\n\n\t\tconst perspective_camera1 = scene.root.create_node('perspective_camera');\n\t\tscene.cameras_controller.set_master_camera_node_path(perspective_camera1.full_path());\n\t\tperspective_camera1.p.t.z.set(10);\n\n\t\tconst geo1 = scene.root.create_node('geo');\n\t\tgeo1.flags.display.set(true);\n\t\tconst box1 = geo1.create_node('box');\n\t\tbox1.flags.display.set(true);\n\t\tgeo1.p.r.y.set('$F+20');\n\n\t\treturn scene;\n\t}\n\n\tstatic async test_save_and_load(scene: PolyScene) {\n\t\tconst data = new SceneJsonExporter(scene).data();\n\t\tconsole.log(JSON.stringify(data));\n\t\tconst scene2 = await SceneJsonImporter.load_data(data);\n\t\tconst data2 = new SceneJsonExporter(scene2).data();\n\t\tconsole.log(JSON.stringify(data2));\n\t}\n}\n\nconst stylesheet = document.createElement('style');\nstylesheet.innerText = 'html, body, canvas, .canvas_container {height: 100%; margin: 0px;} canvas {display: block;}';\ndocument.body.appendChild(stylesheet);\nconst container = document.createElement('div');\ncontainer.classList.add('canvas_container');\ndocument.body.appendChild(container);\n\nTester.load_scene().then((scene) => {\n\t(window as any).scene = scene;\n\tscene.cameras_controller.master_camera_node?.create_viewer(container);\n\tscene.play();\n});\n\n// Tester.test_save_and_load(scene);\n","import {PolyScene} from '../PolyScene';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\n\nexport class CamerasController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_master_camera_node_path: string | null = null;\n\n\tset_master_camera_node_path(camera_node_path: string) {\n\t\tthis._master_camera_node_path = camera_node_path;\n\t}\n\tget master_camera_node_path() {\n\t\treturn this._master_camera_node_path;\n\t}\n\tget master_camera_node(): BaseCameraObjNodeType | null {\n\t\tif (this.master_camera_node_path) {\n\t\t\tconst camera_node = this.scene.node(this.master_camera_node_path) as BaseCameraObjNodeType | null;\n\t\t\treturn camera_node;\n\t\t} else {\n\t\t\tconsole.warn('master camera node not found');\n\t\t\treturn this._find_any_camera();\n\t\t}\n\t}\n\n\tprivate _find_any_camera(): BaseCameraObjNodeType | null {\n\t\tconst root = this.scene.root;\n\t\treturn root.nodes_by_type('perspective_camera')[0] || root.nodes_by_type('orthographic_camera')[0];\n\t}\n}\n","// import {CoreGraphNode} from './CoreGraphNode';\n// import { CoreGraphNodeScene } from './CoreGraphNodeScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../PolyScene';\n\n// interface CookerQueue {\n// \t[propName: string]: CoreGraphNodeSceneNamed;\n// }\n\nexport class Cooker {\n\tprivate _queue: Map<string, CoreGraphNode | undefined> = new Map<string, CoreGraphNode | undefined>();\n\tprivate _block_level: number = 0;\n\tprivate _process_item_bound = this._process_item.bind(this);\n\n\tconstructor(private _scene: PolyScene) {\n\t\tthis._block_level = 0;\n\t}\n\n\tblock() {\n\t\tthis._block_level += 1;\n\t}\n\tunblock() {\n\t\tthis._block_level -= 1;\n\t\tif (this._block_level < 0) {\n\t\t\tthis._block_level = 0;\n\t\t}\n\n\t\tthis.process_queue();\n\t}\n\t// unblock_later: ->\n\t// \tsetTimeout( this.unblock.bind(this), 0 )\n\tget blocked() {\n\t\treturn this._block_level > 0;\n\t}\n\n\tenqueue(node: CoreGraphNode, original_trigger_graph_node?: CoreGraphNode) {\n\t\tthis._queue.set(node.graph_node_id, original_trigger_graph_node);\n\t}\n\n\tprocess_queue() {\n\t\tif (this.blocked) {\n\t\t\treturn;\n\t\t}\n\t\t// let node: CoreGraphNode;\n\t\t// console.warn('FLUSH', Object.keys(this._queue).length);\n\n\t\tthis._queue.forEach(this._process_item_bound);\n\t\t// for (let id of Object.keys(this._queue)) {\n\t\t// \tnode = this._queue[id];\n\t\t// \tif (node) {\n\t\t// \t\tdelete this._queue[id];\n\t\t// \t\tnode.dirty_controller.run_post_dirty_hooks();\n\t\t// \t}\n\t\t// }\n\t}\n\tprivate _process_item(original_trigger_graph_node: CoreGraphNode | undefined, id: string) {\n\t\tconst node = this._scene.graph.node_from_id(id);\n\t\tif (node) {\n\t\t\tthis._queue.delete(id);\n\t\t\tnode.dirty_controller.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t}\n\t}\n}\n","import {Graph, alg} from '@dagrejs/graphlib';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {NodeSimple} from './NodeSimple'\n// import {GraphNode} from './concerns/GraphNode'\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// class DummyClass {}\n// class GraphNodeDummy extends Dirtyable(DummyClass) {}\n\n// TODO: typescript, using ids with a specific type (https://basarat.gitbook.io/typescript/main-1/nominaltyping)\n// export interface CoreGraphNodeId extends String {\n// \t// _CoreGraphNodeIdBrand: string;\n// }\nexport type CoreGraphNodeId = string;\nimport {CoreGraphNode} from './CoreGraphNode';\n\nexport class CoreGraph {\n\t_graph: Graph;\n\t_next_id: number = 0;\n\t_scene: PolyScene | undefined;\n\n\tconstructor() {\n\t\tthis._graph = new Graph({\n\t\t\tdirected: true,\n\t\t\tcompound: false,\n\t\t\tmultigraph: true,\n\t\t});\n\t}\n\n\tgraph() {\n\t\treturn this._graph;\n\t}\n\tset_scene(scene: PolyScene) {\n\t\tthis._scene = scene;\n\t}\n\tscene() {\n\t\treturn this._scene;\n\t}\n\n\tnext_id(): CoreGraphNodeId {\n\t\treturn (<unknown>`${(this._next_id += 1)}`) as CoreGraphNodeId;\n\t}\n\n\tsetNode(node: CoreGraphNode) {\n\t\tthis._graph.setNode(node.graph_node_id, node);\n\t}\n\n\tremoveNode(node: CoreGraphNode) {\n\t\tthis._graph.removeNode(node.graph_node_id);\n\t}\n\n\tnodes_from_ids(ids: string[]) {\n\t\tconst nodes: CoreGraphNode[] = [];\n\t\tfor (let id of ids) {\n\t\t\tconst node = this.node_from_id(id);\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t\t// if (ids) {\n\t\t// \tlet node: any;\n\t\t// \treturn ids.map((id) => {\n\t\t// \t\tif ((node = this.node_from_id(id)) != null) {\n\t\t// \t\t\treturn node;\n\t\t// \t\t} else {\n\t\t// \t\t\treturn console.warn(`could not find node with id ${id}`);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// } else {\n\t\t// \treturn [];\n\t\t// }\n\t}\n\t// TODO: typescript: this should return CoreGraphNodeId|null\n\tnode_from_id(id: string): CoreGraphNode {\n\t\treturn this._graph.node(id);\n\t}\n\n\tconnect(src: CoreGraphNode, dest: CoreGraphNode): boolean {\n\t\tconst src_id = src.graph_node_id;\n\t\tconst dest_id = dest.graph_node_id;\n\n\t\tif (this._graph.hasNode(src_id) && this._graph.hasNode(dest_id)) {\n\t\t\tthis._graph.setEdge(src_id, dest_id);\n\n\t\t\t// const scene_auto_updating = this.scene().auto_updating();\n\t\t\tconst scene_loading = this._scene ? this._scene.loading_controller.is_loading : true;\n\t\t\tconst check_if_graph_has_cycle = !scene_loading;\n\t\t\tlet graph_has_cycle = false;\n\t\t\tif (check_if_graph_has_cycle) {\n\t\t\t\tgraph_has_cycle = !alg.isAcyclic(this._graph);\n\t\t\t}\n\n\t\t\tif (graph_has_cycle) {\n\t\t\t\tthis._graph.removeEdge(src_id, dest_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`attempt to connect non existing node ${src_id} or ${dest_id}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisconnect(src: CoreGraphNode, dest: CoreGraphNode) {\n\t\tif (src && dest) {\n\t\t\tconst src_id_s = src.graph_node_id;\n\t\t\tconst dest_id_s = dest.graph_node_id;\n\t\t\tthis._graph.removeEdge(src_id_s, dest_id_s);\n\n\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\t\t}\n\t}\n\tdisconnect_predecessors(node: CoreGraphNode) {\n\t\tconst predecessors = this.predecessors(node);\n\t\tfor (let predecessor of predecessors) {\n\t\t\tthis.disconnect(predecessor, node);\n\t\t}\n\t}\n\tdisconnect_successors(node: CoreGraphNode) {\n\t\tconst successors = this.successors(node);\n\t\tfor (let successor of successors) {\n\t\t\tthis.disconnect(node, successor);\n\t\t}\n\t}\n\t// disconnect_predecessors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst predecessor_ids = this._graph.predecessors(node_id);\n\t// \tif( predecessor_ids ){\n\t// \t\tfor(let predecessor_id of predecessor_ids){\n\t// \t\t\tthis._graph.removeEdge(predecessor_id, node_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// disconnect_successors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst successor_ids = this._graph.successors(node_id);\n\t// \tif (successor_ids) {\n\t// \t\tfor(let successor_id of successor_ids){\n\t// \t\t\tthis._graph.removeEdge(node_id, successor_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tpredecessor_ids(id: CoreGraphNodeId) {\n\t\treturn this._graph.predecessors(id) || [];\n\t}\n\tpredecessors(node: CoreGraphNode) {\n\t\tconst ids = this.predecessor_ids(node.graph_node_id);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tsuccessor_ids(id: string): CoreGraphNodeId[] {\n\t\treturn this._graph.successors(id) || [];\n\t}\n\tsuccessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.successor_ids(node.graph_node_id) || [];\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\n\tprivate all_next_ids(node: CoreGraphNode, method: 'successor_ids' | 'predecessor_ids'): CoreGraphNodeId[] {\n\t\tconst ids: CoreGraphNodeId[] = [];\n\t\tlet next_ids = this[method](node.graph_node_id);\n\n\t\twhile (next_ids.length > 0) {\n\t\t\tconst next_next_ids = [];\n\t\t\tfor (let next_id of next_ids) {\n\t\t\t\tfor (let next_next_id of this[method](next_id)) {\n\t\t\t\t\tnext_next_ids.push(next_next_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let id of next_ids) {\n\t\t\t\tids.push(id);\n\t\t\t}\n\t\t\tfor (let id of next_next_ids) {\n\t\t\t\tnext_ids.push(id);\n\t\t\t}\n\t\t\tnext_ids = next_next_ids;\n\t\t}\n\t\treturn ids;\n\t}\n\tall_predecessor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'predecessor_ids');\n\t}\n\tall_successor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'successor_ids');\n\t}\n\tall_predecessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_predecessor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tall_successors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_successor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\n\ntype Callback = (value: void) => void;\n\nexport class CookController {\n\tprivate _cooking_nodes_by_id: Map<string, BaseNodeType> = new Map();\n\tprivate _resolves: Callback[] = [];\n\tconstructor() {}\n\n\tadd_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.set(node.graph_node_id, node);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.delete(node.graph_node_id);\n\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tprivate flush() {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync wait_for_cooks_completed(): Promise<void> {\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport '../../Poly';\nimport {POLY} from '../../Poly';\nimport {SceneEvent} from '../../poly/SceneEvent';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\n// type Callback = (emitter: CoreGraphNodeScene) => void; // TODO: typescript: maybe arg should be an event instead of the emitter\ninterface EventsListener {\n\tprocess_events: (emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) => void;\n}\n\nexport class DispatchController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _events_listener: EventsListener | undefined;\n\n\tset_listener(events_listener: EventsListener) {\n\t\tthis._events_listener = events_listener;\n\t\t// this._store.scene = this;\n\t}\n\tget events_listener() {\n\t\treturn this._events_listener;\n\t}\n\tdispatch(emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) {\n\t\tthis._events_listener?.process_events(emitter, event_name, data);\n\t}\n\tget emit_allowed(): boolean {\n\t\treturn (\n\t\t\tthis.scene.loading_controller.loaded &&\n\t\t\tthis._events_listener != null &&\n\t\t\tthis.scene.loading_controller.auto_updating &&\n\t\t\t!POLY.player_mode() // TODO: typecript: maybe I should still be able to emit events in player mode? - check how the Event Sop works\n\t\t);\n\t}\n\t// store_commit(event_name: string, payload: any = this) {\n\t// \tif (this._store) {\n\t// \t\tthis._store.commit(`engine/${event_name}`, payload);\n\t// \t}\n\t// }\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter, LinearEncoding, HalfFloatType} from 'three/src/constants'\n// import EquirectangularToCubeGenerator from 'src/core/Utils/EquirectangularToCubeGenerator';\n// import PMREMGenerator from 'src/core/Utils/PMREMGenerator';\n// import PMREMCubeUVPacker from 'src/core/Utils/PMREMCubeUVPacker';\n\ninterface RendererByString {\n\t[propName: string]: WebGLRenderer;\n}\ninterface TextureByString {\n\t[propName: string]: Texture;\n}\n\ninterface POLYWebGLRenderer extends WebGLRenderer {\n\t_polygon_id: number;\n}\n\nconst CONTEXT_OPTIONS = {\n\tantialias: true,\n\t// preserveDrawingBuffer: true, // this could only be useful to capture static images\n};\n\ntype Callback = (value: WebGLRenderer) => void;\n\nexport class RenderersController {\n\t_next_renderer_id: number = 0;\n\t_next_env_map_id: number = 0;\n\t_renderers: RendererByString = {};\n\t_env_maps: TextureByString = {};\n\tprivate _require_webgl2: boolean = false;\n\tprivate _resolves: Callback[] = [];\n\n\tconstructor() {}\n\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t}\n\t}\n\trendering_context(canvas: HTMLCanvasElement): WebGLRenderingContext {\n\t\tlet gl: WebGLRenderingContext | null = null;\n\t\tif (this._require_webgl2) {\n\t\t\tgl = this._rendering_context_webgl(canvas, true);\n\t\t}\n\t\tif (!gl) {\n\t\t\tgl = this._rendering_context_webgl(canvas, false);\n\t\t}\n\n\t\t// gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)\n\t\t// to test data texture\n\t\t// gl.getExtension('OES_texture_float')\n\t\t// gl.getExtension('OES_texture_float_linear')\n\n\t\treturn gl;\n\t}\n\tprivate _rendering_context_webgl(canvas: HTMLCanvasElement, webgl2: boolean): WebGLRenderingContext {\n\t\tlet context_name = webgl2 ? 'webgl2' : 'webgl';\n\t\tlet gl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\tif (!gl) {\n\t\t\tcontext_name = webgl2 ? 'experimental-webgl2' : 'experimental-webgl';\n\t\t\tgl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\t}\n\t\treturn gl as WebGLRenderingContext;\n\t}\n\t// private _rendering_context_webgl(\n\t// \tcanvas: HTMLCanvasElement\n\t// ): WebGLRenderingContext {\n\t// \tlet gl = canvas.getContext('webgl', CONTEXT_OPTIONS)\n\t// \tif (!gl) {\n\t// \t\tgl = canvas.getContext('experimental-webgl', CONTEXT_OPTIONS)\n\t// \t}\n\t// \treturn gl as WebGLRenderingContext\n\t// }\n\n\tregister_renderer(renderer: WebGLRenderer) {\n\t\tif ((renderer as POLYWebGLRenderer)._polygon_id) {\n\t\t\tthrow new Error('render already registered');\n\t\t}\n\t\t(renderer as POLYWebGLRenderer)._polygon_id = this._next_renderer_id += 1;\n\n\t\t// there is a bug where 2 renderers are created from the beginning\n\t\t// because the from_json of the viewer_component is called after\n\t\t// the camera being set for the first time\n\t\t// console.log(\"register renderer\", renderer, renderer._polygon_id)\n\n\t\t// this is being tested in PostProcess\n\t\t// const canvas = renderer.domElement\n\t\t// const gl = canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' )\n\t\t// const extension_exist = gl.getExtension('OES_standard_derivatives')\n\t\t// if(!extension_exist){\n\t\t// \tconsole.warn(\"renderers controller: gl extension not available\")\n\t\t// }\n\n\t\tthis._renderers[(renderer as POLYWebGLRenderer)._polygon_id] = renderer;\n\n\t\tif (Object.keys(this._renderers).length == 1) {\n\t\t\tthis.flush_callbacks_with_renderer(renderer);\n\t\t}\n\t}\n\tderegister_renderer(renderer: WebGLRenderer) {\n\t\tdelete this._renderers[(renderer as POLYWebGLRenderer)._polygon_id];\n\t\trenderer.dispose();\n\t}\n\tprivate first_renderer(): WebGLRenderer | null {\n\t\tconst first_id = Object.keys(this._renderers)[0];\n\t\tif (first_id) {\n\t\t\treturn this._renderers[first_id];\n\t\t}\n\t\treturn null;\n\t}\n\trenderers(): WebGLRenderer[] {\n\t\treturn Object.values(this._renderers);\n\t}\n\n\tprivate flush_callbacks_with_renderer(renderer: WebGLRenderer) {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback(renderer);\n\t\t}\n\t}\n\n\tasync wait_for_renderer(): Promise<WebGLRenderer> {\n\t\tconst renderer = this.first_renderer();\n\t\tif (renderer) {\n\t\t\treturn renderer;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n\n\t// async register_env_map(env_map: Texture){\n\t// \tconsole.log(\"register_env_map\", env_map)\n\t// \tif(env_map._polygon_id){\n\t// \t\tthrow new Error('cube_map already registered')\n\t// \t}\n\t// \tconst texture = await this.prepare_env_map(env_map)\n\t// \ttexture._polygon_id = (this._next_env_map_id += 1)\n\t// \tthis._env_maps[texture._polygon_id] = texture\n\t// \treturn texture\n\t// }\n\t// deregister_env_map(env_map: Texture){\n\t// \tconsole.log(\"deregister_env_map\", env_map)\n\t// \tdelete this._env_maps[env_map._polygon_id]\n\t// \tenv_map.dispose()\n\t// }\n\n\t// private async prepare_env_map(texture: Texture): Texture{\n\t// \ttexture.minFilter = NearestFilter;\n\t// \ttexture.magFilter = NearestFilter;\n\t// \ttexture.encoding = LinearEncoding;\n\n\t// \tawait CoreScriptLoader.load_three('loaders/EXRLoader')\n\t// \tawait CoreScriptLoader.load_three('loaders/EquirectangularToCubeGenerator')\n\t// \tconst EquirectangularToCubeGenerator_name = 'EquirectangularToCubeGenerator'\n\t// \tconst PMREMGenerator_name = 'PMREMGenerator'\n\t// \tconst PMREMCubeUVPacker_name = 'PMREMCubeUVPacker'\n\n\t// \tconst cubemapGenerator = new THREE[EquirectangularToCubeGenerator_name]( texture, { resolution: 512, type: HalfFloatType } );\n\n\t// \tconst renderer = this.first_renderer()\n\t// \tif(renderer){\n\t// \t\tconst cubeMapTexture = cubemapGenerator.update( renderer );\n\n\t// \t\tconst pmremGenerator = new THREE[PMREMGenerator_name]( cubeMapTexture );\n\t// \t\tpmremGenerator.update( renderer );\n\n\t// \t\tconst pmremCubeUVPacker = new THREE[PMREMCubeUVPacker_name]( pmremGenerator.cubeLods );\n\t// \t\tpmremCubeUVPacker.update( renderer );\n\n\t// \t\trenderer.gammaInput = false;\n\t// \t\trenderer.gammaOutput = true;\n\n\t// \t\tconst exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;\n\n\t// \t\ttexture.dispose();\n\t// \t\tcubemapGenerator.dispose();\n\t// \t\tpmremGenerator.dispose();\n\t// \t\tpmremCubeUVPacker.dispose();\n\n\t// \t\treturn exrCubeRenderTarget.texture;\n\t// \t}\n\t// }\n}\n","import {BaseNodeClass} from '../nodes/_Base';\nimport {NodeContext} from './NodeContext';\n\nexport interface RegisterOptions {\n\tonly?: string[];\n\texcept?: string[];\n}\n\n// export interface BaseNodeConstructor {\n// \tnew (): BaseNode;\n// }\n\nexport type BaseNodeConstructor = typeof BaseNodeClass;\ntype NodeConstructorByType = Dictionary<BaseNodeConstructor>;\ntype NodeConstructorByTypeByContext = Dictionary<NodeConstructorByType>;\ntype TabMenuByTypeByContext = Dictionary<Dictionary<string>>;\ntype RegisterOptionsByTypeByContext = Dictionary<Dictionary<RegisterOptions>>;\n\nexport class NodesRegister {\n\tprivate _node_register: NodeConstructorByTypeByContext = {};\n\tprivate _node_register_categories: TabMenuByTypeByContext = {};\n\tprivate _node_register_options: RegisterOptionsByTypeByContext = {};\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type();\n\t\tthis._node_register[context] = this._node_register[context] || {};\n\n\t\tconst already_registered_node = this._node_register[context][node_type];\n\t\tif (already_registered_node) {\n\t\t\tthrow new Error(`node ${context}/${node_type} already registered`);\n\t\t}\n\t\tthis._node_register[context][node_type] = node;\n\n\t\tif (tab_menu_category) {\n\t\t\tthis._node_register_categories[context] = this._node_register_categories[context] || {};\n\t\t\tthis._node_register_categories[context][node_type] = tab_menu_category;\n\t\t}\n\t\tthis._node_register_options[context] = this._node_register_options[context] || {};\n\t\tif (options) {\n\t\t\tthis._node_register_options[context][node_type] = options;\n\t\t}\n\t}\n\tderegister_node(context: string, node_type: string) {\n\t\tdelete this._node_register[context][node_type];\n\t\tdelete this._node_register_categories[context][node_type];\n\t\tdelete this._node_register_options[context][node_type];\n\t}\n\tregistered_nodes_for_context_and_parent_type(context: NodeContext, parent_node_type: string) {\n\t\tconst map = this._node_register[context];\n\t\tif (map) {\n\t\t\tconst nodes_for_context = Object.values(this._node_register[context]);\n\t\t\treturn nodes_for_context.filter((node) => {\n\t\t\t\tconst options = this._node_register_options[context][node.type()];\n\t\t\t\tif (!options) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconst option_only = options['only'];\n\t\t\t\t\tconst option_except = options['except'];\n\t\t\t\t\tconst context_and_type = `${context}/${parent_node_type}`;\n\t\t\t\t\tif (option_only) {\n\t\t\t\t\t\treturn option_only.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t\tif (option_except) {\n\t\t\t\t\t\treturn !option_except.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !options || options['only']?.includes(parent_node_type);\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tregistered_nodes(context: NodeContext, parent_node_type: string): Dictionary<BaseNodeConstructor> {\n\t\tconst nodes_by_type: Dictionary<BaseNodeConstructor> = {};\n\t\tconst nodes = this.registered_nodes_for_context_and_parent_type(context, parent_node_type);\n\t\tfor (let node of nodes) {\n\t\t\tconst type = node.type();\n\t\t\tnodes_by_type[type] = node;\n\t\t}\n\t\treturn nodes_by_type;\n\t}\n\tregistered_category(context: NodeContext, type: string) {\n\t\treturn this._node_register_categories[context][type];\n\t}\n}\n","import {PolyScene} from '../../PolyScene';\nimport {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\nimport {MouseEventsController} from './MouseEventsController';\nimport {BaseEventsController} from './_BaseEventsController';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\n\nexport class EventsController {\n\tprivate _mouse_events_controller: BaseEventsController<MouseEvent, MouseEventNode> = new MouseEventsController();\n\tprivate _controllers: BaseEventsController<Event, BaseEventNodeType>[] = [this._mouse_events_controller];\n\tconstructor(scene: PolyScene) {}\n\n\tregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.register_node(node);\n\t\t}\n\t}\n\tunregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.unregister_node(node);\n\t\t}\n\t}\n\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tfor (let controller of this._controllers) {\n\t\t\tif (controller.accepts_event(event)) {\n\t\t\t\tcontroller.process(event, canvas, camera_node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _get_controller_for_node<T extends BaseEventNodeType>(\n\t\tnode: T\n\t): BaseEventsController<Event, BaseEventNodeType> | undefined {\n\t\tswitch (node.type) {\n\t\t\tcase MouseEventNode.type():\n\t\t\t\treturn this._mouse_events_controller;\n\t\t}\n\t}\n}\n","// import lodash_filter from 'lodash/filter';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\n// import {Cooker} from './Cooker';\nimport {CoreGraphNode} from './CoreGraphNode';\n\n// not sure how I can have caller: DirtyableMixin if DirtyableMixin is not yet defined\nexport type PostDirtyHook = (caller?: CoreGraphNode) => void;\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class DirtyController {\n\t_dirty_count: number = 0;\n\t_dirty: boolean = true;\n\t_dirty_timestamp: number | undefined;\n\t_cached_successors: CoreGraphNode[] | undefined;\n\t_forbidden_trigger_nodes: string[] | undefined;\n\n\t// hooks\n\t_post_dirty_hooks: PostDirtyHook[] | undefined;\n\t_post_dirty_hook_names: string[] | undefined;\n\n\tconstructor(private node: CoreGraphNode) {}\n\n\t// _init_dirtyable(): void {\n\t// \tthis._dirty_count = 0;\n\t// \tthis._dirty = true;\n\t// }\n\tget is_dirty(): boolean {\n\t\treturn this._dirty === true;\n\t}\n\tget dirty_timestamp() {\n\t\treturn this._dirty_timestamp;\n\t}\n\tget dirty_count(): number {\n\t\treturn this._dirty_count;\n\t}\n\tadd_post_dirty_hook(name: string, method: PostDirtyHook) {\n\t\tthis._post_dirty_hook_names = this._post_dirty_hook_names || [];\n\t\tthis._post_dirty_hooks = this._post_dirty_hooks || [];\n\n\t\tif (!this._post_dirty_hook_names.includes(name)) {\n\t\t\tthis._post_dirty_hook_names.push(name);\n\t\t\tthis._post_dirty_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tremove_post_dirty_hook(name: string) {\n\t\tif (this._post_dirty_hook_names && this._post_dirty_hooks) {\n\t\t\tconst index = this._post_dirty_hook_names.indexOf(name);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._post_dirty_hook_names.splice(index, 1);\n\t\t\t\tthis._post_dirty_hooks.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\thas_hook(name: string): boolean {\n\t\tif (this._post_dirty_hook_names) {\n\t\t\treturn this._post_dirty_hook_names.includes(name);\n\t\t}\n\t\treturn false;\n\t}\n\t// using a dirty block doesn't quite work, as I would need to be able\n\t// to fetch the graph for all successors that haven't been blocked\n\t// block_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = false\n\t// unblock_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = true\n\tremove_dirty_state(): void {\n\t\tthis._dirty = false;\n\t}\n\tset_forbidden_trigger_nodes(nodes: CoreGraphNode[]) {\n\t\tthis._forbidden_trigger_nodes = nodes.map((n) => n.graph_node_id);\n\t}\n\t//@_clean_for_frame = this.context().frame()\n\t//this.post_remove_dirty_state(message)\n\n\tset_dirty(original_trigger_graph_node?: CoreGraphNode | null, propagate?: boolean): void {\n\t\tif (propagate == null) {\n\t\t\tpropagate = true;\n\t\t}\n\t\tif (\n\t\t\toriginal_trigger_graph_node &&\n\t\t\tthis._forbidden_trigger_nodes &&\n\t\t\tthis._forbidden_trigger_nodes.includes(original_trigger_graph_node.graph_node_id)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (original_trigger_graph_node == null) {\n\t\t\toriginal_trigger_graph_node = this.node;\n\t\t}\n\n\t\t//return if this.set_dirty_allowed? && !this.set_dirty_allowed(original_trigger_graph_node)\n\n\t\t// if (this.scene && this.scene() != null && this.scene().loaded()){\n\t\t// \tlet id = null\n\t\t// \tif (this.full_path){id = this.full_path()} else {id = this}\n\t\t// \tconsole.log(\"set dirty\", id)\n\t\t// }\n\n\t\t// TODO: why can't I not propagate if the node is already dirty?\n\t\t// one possible reason is that node might be cooking, and this would not update the dirty_timestamp correctly?\n\t\t//return if this.is_dirty()\n\t\t// if(!this.scene().is_loading()){\n\t\t// \tconsole.log(\"set dirty\", (this.full_path ? this.full_path() : this))\n\t\t// }\n\n\t\tthis._dirty = true;\n\t\tthis._dirty_timestamp = performance.now();\n\t\tthis._dirty_count += 1;\n\n\t\tthis.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t// this.post_set_dirty(original_trigger_graph_node);\n\n\t\tif (propagate === true) {\n\t\t\t//&& @_dirty #&& window.scene.auto_updating()\n\t\t\tthis.set_successors_dirty(original_trigger_graph_node);\n\t\t}\n\t}\n\n\trun_post_dirty_hooks(original_trigger_graph_node?: CoreGraphNode) {\n\t\tif (this._post_dirty_hooks) {\n\t\t\tconst cooker = this.node.scene.cooker;\n\t\t\tif (cooker.blocked) {\n\t\t\t\tcooker.enqueue(this.node, original_trigger_graph_node);\n\t\t\t} else {\n\t\t\t\tfor (let hook of this._post_dirty_hooks) {\n\t\t\t\t\thook(original_trigger_graph_node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// cooker(): Cooker {\n\t// \tthrow 'Dirtyable.cooker requires implementation';\n\t// }\n\tset_successors_dirty(original_trigger_graph_node?: CoreGraphNode): void {\n\t\t// const cooker = this.node.scene.cooker;\n\t\t// cooker.block();\n\n\t\tconst propagate = false;\n\t\tthis._cached_successors = this._cached_successors || this.node.graph_all_successors(); //this._dirtyable_all_successors(original_trigger_graph_node);\n\t\t// successors = successors.filter(n=>!n.is_dirty())\n\t\tfor (let successor of this._cached_successors) {\n\t\t\tsuccessor.dirty_controller.set_dirty(original_trigger_graph_node, propagate);\n\t\t\t// console.log(successor);\n\t\t}\n\n\t\t// cooker.unblock();\n\t}\n\n\t// _dirtyable_all_successors(original_trigger_graph_node: CoreGraphNode): CoreGraphNode[] {\n\t// \treturn this.graph_all_predecessors()\n\t// \t// const successors = [];\n\t// \t// let newly_added_successors = this._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// successors.push(newly_added_successors);\n\n\t// \t// while (newly_added_successors.length > 0) {\n\t// \t// \tnewly_added_successors = lodash_flatten(\n\t// \t// \t\tnewly_added_successors.map((newly_added_successor) => {\n\t// \t// \t\t\treturn newly_added_successor._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// \t\t})\n\t// \t// \t);\n\t// \t// \tsuccessors.push(newly_added_successors);\n\t// \t// }\n\n\t// \t// return lodash_uniq(lodash_flatten(successors));\n\t// }\n\n\tclear_successors_cache() {\n\t\tthis._cached_successors = undefined;\n\t}\n\tclear_successors_cache_with_predecessors() {\n\t\tthis.clear_successors_cache();\n\t\tfor (let predecessor of this.node.graph_all_predecessors()) {\n\t\t\tpredecessor.dirty_controller.clear_successors_cache();\n\t\t}\n\t}\n\t// graph_all_predecessors(): CoreGraphNode[] {\n\t// \treturn this.node.graph_all_predecessors()\n\t// \t// console.log('dirtyable graph_all_predecessors should be overwritten');\n\t// \t// return [];\n\t// }\n\n\t// dirty_successors(): Array<CoreGraphNode> {\n\t// \tthrow 'Dirtyable.dirty_successors requires implementation';\n\t// }\n\t// set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \tthrow 'Dirtyable.set_dirty_allowed requires implementation';\n\t// }\n\t// _dirtyable_direct_successors(original_trigger_graph_node: CoreGraphNode): Array<CoreGraphNode> {\n\t// \treturn this.dirty_successors().filter((successor) => {\n\t// \t\treturn successor.set_dirty_allowed == null || successor.set_dirty_allowed(original_trigger_graph_node);\n\t// \t});\n\t// }\n\n\t// set_graph_successors_dirty_via_graph: (original_trigger_graph_node)->\n\t// \tcooker = this.scene().cooker()\n\t// \tcooker.block()\n\n\t// \tmake_successors_dirty = false\n\t// \tlodash_each lodash_flatten(this.graph_all_successors()), (successor)=>\n\t// \t\tsuccessor.set_dirty(original_trigger_graph_node, this, false)\n\n\t// \tcooker.unblock()\n\n\t// post_set_dirty(original_trigger_graph_node?: Dirtyable, direct_trigger_graph_node?: Dirtyable): void{}\n}\n","import {Vector2} from 'three/src/math/Vector2';\nimport {Color} from 'three/src/math/Color';\nimport {BaseNodeType} from '../_Base';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\nexport interface NodeUIDataJson {\n\tx: number;\n\ty: number;\n\tcomment?: string;\n}\n\nexport class UIData {\n\tprivate _position: Vector2 = new Vector2();\n\tprivate _width: number = 50;\n\tprivate _border_radius: number = 3;\n\tprivate _color: Color = new Color(0.75, 0.75, 0.75);\n\t// private _icon: string | null = null;\n\tprivate _layout_vertical: boolean = true;\n\tprivate _comment: string | undefined;\n\tprivate _json: NodeUIDataJson = {\n\t\tx: 0,\n\t\ty: 0,\n\t};\n\n\tconstructor(private node: BaseNodeType, x: number = 0, y: number = 0) {\n\t\tthis._position.x = x;\n\t\tthis._position.y = y;\n\t}\n\n\tset_border_radius(radius: number) {\n\t\tthis._border_radius = radius;\n\t}\n\tborder_radius() {\n\t\treturn this._border_radius;\n\t}\n\tset_width(width: number) {\n\t\tthis._width = width;\n\t}\n\twidth() {\n\t\treturn this._width;\n\t}\n\tset_comment(comment: string | undefined) {\n\t\tthis._comment = comment;\n\t\tthis.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n\t}\n\tget comment(): string | undefined {\n\t\treturn this._comment;\n\t}\n\tset_color(color: Color) {\n\t\tthis._color = color;\n\t}\n\tcolor() {\n\t\treturn this._color;\n\t}\n\t// set_icon(icon: string) {\n\t// \tthis._icon = icon;\n\t// }\n\t// icon() {\n\t// \treturn this._icon;\n\t// }\n\tset_layout_horizontal() {\n\t\tthis._layout_vertical = false;\n\t}\n\tis_layout_vertical() {\n\t\treturn this._layout_vertical;\n\t}\n\n\tcopy(ui_data: UIData) {\n\t\tthis._position.copy(ui_data.position);\n\t\tthis._color.copy(ui_data.color());\n\t}\n\n\tget position() {\n\t\treturn this._position;\n\t}\n\n\tset_position(new_position: Vector2 | number, y: number = 0) {\n\t\tif (new_position instanceof Vector2) {\n\t\t\tthis._position.copy(new_position);\n\t\t} else {\n\t\t\tconst x = new_position;\n\t\t\tthis._position.set(x, y);\n\t\t}\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\n\ttranslate(offset: Vector2, snap: boolean = false) {\n\t\tthis._position.add(offset);\n\n\t\tif (snap) {\n\t\t\tthis._position.x = Math.round(this._position.x);\n\t\t\tthis._position.y = Math.round(this._position.y);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\t// arguments_to_vector(x: number,y: number){\n\t// \tif (arguments.length === 2) {\n\t// \t\tthis._position.x = arguments[0];\n\t// \t\tthis._position.y = arguments[1];\n\t// \t} else {\n\t// \t\tthis._position.x = new_position.x;\n\t// \t\tthis._position.y = new_position.y;\n\t// \t}\n\t// }\n\tto_json(): NodeUIDataJson {\n\t\tthis._json.x = this._position.x;\n\t\tthis._json.y = this._position.y;\n\t\tthis._json.comment = this._comment;\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.node);\n\terror = new ErrorState(this.node);\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseState} from './Base';\n\nexport class TimeDependentState extends BaseState {\n\tget active() {\n\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n\t}\n\n\tare_params_time_dependent(): boolean {\n\t\tconst param_names = this.node.params.names;\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param && param.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tare_inputs_time_dependent(): boolean {\n\t\tconst inputs = this.node.io.inputs.inputs();\n\t\tfor (let input of inputs) {\n\t\t\tif (input && input.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tforce_time_dependent() {\n\t\tconst predecessor_ids = this.node.graph_predecessors().map((n) => n.graph_node_id);\n\t\tconst frame_node = this.node.scene.time_controller.graph_node; // context();\n\t\tif (!predecessor_ids.includes(frame_node.graph_node_id)) {\n\t\t\tthis.node.add_graph_input(frame_node);\n\t\t}\n\t}\n\tunforce_time_dependent() {\n\t\tconst frame_node = this.node.scene.time_controller.graph_node;\n\t\tthis.node.remove_graph_input(frame_node);\n\t}\n}\n","import {NodeEvent} from '../../../poly/NodeEvent';\nimport {BaseState} from './Base';\n\nexport class ErrorState extends BaseState {\n\tprivate _message: string | undefined;\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tconsole.warn('error', message, this.node.full_path());\n\t\t\tthis._message = message;\n\t\t\tthis.on_update();\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n\n\tprotected on_update() {\n\t\tif (this._message != null) {\n\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n\t\t\tthis.node.set_container(null, `from error '${this._message}'`);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.ERROR_UPDATED);\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {NameController} from '../NameController';\n\ntype Callback = () => void;\nimport {CoreWalker} from '../../../../core/Walker';\n\nexport class HierarchyParentController {\n\tprivate _parent: BaseNodeType | null = null;\n\tprivate _on_set_parent_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\tset_parent(parent: BaseNodeType | null) {\n\t\tif (parent != this.node.parent_controller.parent) {\n\t\t\tthis._parent = parent;\n\t\t\tif (this._parent) {\n\t\t\t\t// this.node.set_scene(this._parent.scene);\n\t\t\t\tthis.node.name_controller.request_name_to_parent(NameController.base_name(this.node));\n\t\t\t}\n\t\t\t// this.on_set_parent();\n\t\t}\n\t}\n\tis_selected(): boolean {\n\t\treturn this.parent?.children_controller?.selection?.contains(this.node) || false;\n\t}\n\tfull_path(): string {\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (this._parent != null) {\n\t\t\tconst parent_full_path = this._parent.full_path();\n\t\t\tif (parent_full_path === separator) {\n\t\t\t\treturn parent_full_path + this.node.name;\n\t\t\t} else {\n\t\t\t\treturn parent_full_path + separator + this.node.name;\n\t\t\t}\n\t\t} else {\n\t\t\treturn separator;\n\t\t}\n\t}\n\n\ton_set_parent() {\n\t\tif (this._on_set_parent_hooks) {\n\t\t\tfor (let hook of this._on_set_parent_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tfind_node(path: string): BaseNodeType | null {\n\t\t// if (!this._children_allowed) {\n\t\t// \treturn null;\n\t\t// }\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (path === CoreWalker.CURRENT || path === CoreWalker.CURRENT_WITH_SLASH) {\n\t\t\treturn this.node;\n\t\t}\n\t\tif (path === CoreWalker.PARENT || path === CoreWalker.PARENT_WITH_SLASH) {\n\t\t\treturn this.node.parent;\n\t\t}\n\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (path[0] === separator) {\n\t\t\tpath = path.substring(1, path.length);\n\t\t}\n\n\t\tconst elements = path.split(separator);\n\t\tif (elements.length === 1) {\n\t\t\tconst name = elements[0];\n\t\t\tif (this.node.children_controller) {\n\t\t\t\treturn this.node.children_controller.child_by_name(name);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn CoreWalker.find_node(this.node, path);\n\t\t}\n\t}\n}\n","import {CoreString} from '../../../../core/String';\n\nimport {BaseNodeType} from '../../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport lodash_includes from 'lodash/includes';\nimport lodash_keys from 'lodash/keys';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_values from 'lodash/values';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {NameController} from '../NameController';\nimport {CoreNodeSelection} from '../../../../core/NodeSelection';\n\nimport {POLY} from '../../../Poly';\n// import {NameController} from '../NameController';\n\n// interface HierarchyOptions {\n// \tcontext: NodeContext\n// \tdependent?: boolean;\n// }\nconst NODE_SIMPLE_NAME = 'children';\n\nexport class HierarchyChildrenController {\n\t// private _context: NodeContext | undefined;\n\t// private _children_allowed: boolean = false;\n\tprivate _children: Dictionary<BaseNodeType> = {};\n\tprivate _children_by_type: Dictionary<string[]> = {};\n\tprivate _children_and_grandchildren_by_context: Dictionary<string[]> = {};\n\n\tprivate _is_dependent_on_children: boolean = false;\n\tprivate _children_node: CoreGraphNode | undefined;\n\n\tprivate _selection: CoreNodeSelection | undefined;\n\tget selection(): CoreNodeSelection {\n\t\treturn (this._selection = this._selection || new CoreNodeSelection(this.node));\n\t}\n\tconstructor(protected node: BaseNodeType, private _context: NodeContext) {}\n\tget context() {\n\t\treturn this._context;\n\t}\n\tinit(dependent: boolean = false) {\n\t\t// const context = this.node.children_context();\n\t\t// if (context) {\n\t\t// this._available_children_classes = options['children'] || {};\n\t\t// this._available_children_classes = window.POLY.registered_nodes(context, this.self.type())\n\n\t\t// this._children_allowed = true;\n\t\tthis._children = {};\n\n\t\t// const is_dependent = options['dependent'];\n\t\tif (dependent) {\n\t\t\tthis._is_dependent_on_children = dependent;\n\t\t\tif (this._is_dependent_on_children) {\n\t\t\t\tthis._children_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t\t// this._children_node.set_scene(this.node.scene);\n\t\t\t\tthis.node.add_graph_input(this._children_node);\n\t\t\t}\n\t\t}\n\t\t// }\n\t}\n\n\t// TODO: when copy pasting a node called bla_11, the next one will be renamed bla_110 instead of 12\n\tset_child_name(node: BaseNodeType, new_name: string): void {\n\t\t//return if node.name() == new_name\n\t\tlet current_child_with_name;\n\t\tnew_name = new_name.replace(/[^A-Za-z0-9]/g, '_');\n\t\tnew_name = new_name.replace(/^[0-9]/, '_'); // replace first char if not a letter\n\n\t\tif ((current_child_with_name = this._children[new_name]) != null) {\n\t\t\t// only return if found node is same as argument node, and if new_name is same as current_name\n\t\t\tif (node.name === new_name && current_child_with_name.graph_node_id === node.graph_node_id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// increment new_name\n\t\t\tnew_name = CoreString.increment(new_name);\n\n\t\t\treturn this.set_child_name(node, new_name);\n\t\t} else {\n\t\t\t// let current_child;\n\t\t\tconst current_name = node.name;\n\n\t\t\t// delete old entry if node was in _children with old name\n\t\t\tconst current_child = this._children[current_name];\n\t\t\tif (current_child) {\n\t\t\t\tdelete this._children[current_name];\n\t\t\t}\n\n\t\t\t// add to new name\n\t\t\tthis._children[new_name] = node;\n\t\t\tnode.name_controller.update_name_from_parent(new_name);\n\t\t\tthis._add_to_nodes_by_type(node);\n\t\t\tthis.node.scene.nodes_controller.add_to_instanciated_node(node);\n\t\t}\n\t}\n\n\tnode_context_signature() {\n\t\treturn `${this.node.node_context()}/${this.node.type}`;\n\t}\n\n\tavailable_children_classes() {\n\t\treturn POLY.registered_nodes(this._context, this.node.type);\n\t}\n\t// children_allowed(): boolean {\n\t// \t// return (this.self.available_children_classes != null) &&\n\t// \t// (Object.keys(this.self.available_children_classes()).length > 0);\n\t// \tconst available_classes = this.available_children_classes();\n\t// \treturn available_classes && Object.keys(available_classes).length > 0;\n\t// }\n\n\tis_valid_child_type(node_type: string): boolean {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\t\treturn node_class != null;\n\t}\n\n\tcreate_node(node_type: string): BaseNodeType {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\n\t\tif (node_class == null) {\n\t\t\tconst message = `child node type '${node_type}' not found for node '${this.node.full_path()}'. Available types are: ${Object.keys(\n\t\t\t\tthis.available_children_classes()\n\t\t\t).join(', ')}, ${this._context}, ${this.node.type}`;\n\t\t\tconsole.error(message);\n\t\t\tthrow message;\n\t\t} else {\n\t\t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`);\n\t\t\tchild_node.initialize_base_and_node();\n\t\t\t// child_node.set_scene(this.node.scene);\n\t\t\tthis.add_node(child_node);\n\t\t\tchild_node.lifecycle.set_creation_completed();\n\t\t\treturn child_node;\n\t\t}\n\t}\n\n\tadd_node(child_node: BaseNodeType) {\n\t\t// if (!this._children_allowed) {\n\t\t// \tthrow `node ${this.node.full_path()} cannot have children`;\n\t\t// }\n\n\t\tchild_node.set_parent(this.node);\n\t\tchild_node.params.init();\n\t\tchild_node.parent_controller.on_set_parent();\n\t\tchild_node.name_controller.post_set_full_path();\n\t\tif (child_node.children_allowed() && child_node.children_controller) {\n\t\t\tfor (let child of child_node.children_controller.children()) {\n\t\t\t\tchild.name_controller.post_set_full_path();\n\t\t\t}\n\t\t}\n\t\tthis.node.emit(NodeEvent.CREATED, {child_node_json: child_node.to_json()});\n\t\tif (this.node.scene.lifecycle_controller.on_create_hook_allowed()) {\n\t\t\tchild_node.lifecycle.run_on_create_hooks();\n\t\t}\n\t\tchild_node.lifecycle.run_on_add_hooks();\n\t\tthis.set_child_name(child_node, NameController.base_name(child_node));\n\t\tthis.node.lifecycle.run_on_child_add_hooks(child_node);\n\t\t// this.post_add_node(child_node);\n\n\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\tthis._children_node.add_graph_input(child_node);\n\t\t}\n\t\tif (child_node.require_webgl2()) {\n\t\t\tthis.node.scene.webgl_controller.set_require_webgl2();\n\t\t}\n\n\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(child_node);\n\n\t\treturn child_node;\n\t}\n\t// that's redondant with the lifecycle on_child_add and on_child_remove\n\t// post_add_node(node: BaseNode) {}\n\t// post_remove_node(node: BaseNode) {}\n\n\tremove_node(child_node: BaseNodeType): void {\n\t\tif (child_node.parent != this.node) {\n\t\t\treturn console.warn(`node ${child_node.name} not under parent ${this.node.full_path()}`);\n\t\t} else {\n\t\t\t// set other dependencies dirty\n\t\t\tchild_node.set_successors_dirty(this.node);\n\n\t\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\t\tthis._children_node.remove_graph_input(child_node);\n\t\t\t}\n\n\t\t\tif (this.selection.contains(child_node)) {\n\t\t\t\tthis.selection.remove([child_node]);\n\t\t\t}\n\n\t\t\tconst first_connection = child_node.io.connections.first_input_connection();\n\t\t\tchild_node.io.connections.input_connections()?.forEach((input_connection) => {\n\t\t\t\tif (input_connection) {\n\t\t\t\t\tinput_connection.disconnect({set_input: true});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchild_node.io.connections.output_connections()?.forEach((output_connection) => {\n\t\t\t\tif (output_connection) {\n\t\t\t\t\toutput_connection.disconnect({set_input: true});\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tconst old_src = first_connection.node_src;\n\t\t\t\t\t\tconst old_output_index = output_connection.output_index;\n\t\t\t\t\t\tconst old_dest = output_connection.node_dest;\n\t\t\t\t\t\tconst old_input_index = output_connection.input_index;\n\t\t\t\t\t\told_dest.io.inputs.set_input(old_input_index, old_src, old_output_index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// disconnect successors\n\t\t\tchild_node.graph_disconnect_successors();\n\n\t\t\t// remove from children\n\t\t\tchild_node.set_parent(null);\n\t\t\tdelete this._children[child_node.name];\n\t\t\tthis._remove_from_nodes_by_type(child_node);\n\t\t\tthis.node.scene.nodes_controller.remove_from_instanciated_node(child_node);\n\n\t\t\tthis.node.lifecycle.run_on_child_remove_hooks(child_node);\n\t\t\tchild_node.lifecycle.run_on_delete_hooks();\n\t\t\tchild_node.emit(NodeEvent.DELETED, {parent_id: this.node.graph_node_id});\n\t\t}\n\t}\n\n\t_add_to_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tthis._children_by_type[type] = this._children_by_type[type] || [];\n\t\tif (!lodash_includes(this._children_by_type[type], node_id)) {\n\t\t\tthis._children_by_type[type].push(node_id);\n\t\t}\n\t\tthis.add_to_children_and_grandchildren_by_context(node);\n\t}\n\t_remove_from_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tif (this._children_by_type[type]) {\n\t\t\tconst index = this._children_by_type[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_by_type[type].splice(index, 1);\n\t\t\t\tif (this._children_by_type[type].length == 0) {\n\t\t\t\t\tdelete this._children_by_type[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.remove_from_children_and_grandchildren_by_context(node);\n\t}\n\tadd_to_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tthis._children_and_grandchildren_by_context[type] = this._children_and_grandchildren_by_context[type] || [];\n\t\tif (!lodash_includes(this._children_and_grandchildren_by_context[type], node_id)) {\n\t\t\tthis._children_and_grandchildren_by_context[type].push(node_id);\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.add_to_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\tremove_from_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tif (this._children_and_grandchildren_by_context[type]) {\n\t\t\tconst index = this._children_and_grandchildren_by_context[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_and_grandchildren_by_context[type].splice(index, 1);\n\t\t\t\tif (this._children_and_grandchildren_by_context[type].length == 0) {\n\t\t\t\t\tdelete this._children_and_grandchildren_by_context[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.remove_from_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\n\tnodes_by_type(type: string): BaseNodeType[] {\n\t\tconst node_ids = this._children_by_type[type] || [];\n\t\tconst graph = this.node.scene.graph;\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tnode_ids.forEach((node_id) => {\n\t\t\tconst node = graph.node_from_id(node_id) as BaseNodeType;\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t});\n\t\treturn nodes;\n\t}\n\tchild_by_name(name: string) {\n\t\treturn this._children[name];\n\t}\n\t// children_and_grandchildren_by_context(context: NodeContext): BaseNode[]{\n\t// \tconst node_ids = this._children_and_grandchildren_by_context[context] || []\n\t// \tconst graph = this.self.scene().graph()\n\t// \treturn node_ids.map(node_id=>graph.node_from_id(node_id))\n\t// }\n\thas_children_and_grandchildren_with_context(context: NodeContext) {\n\t\treturn this._children_and_grandchildren_by_context[context] != null;\n\t}\n\t//lodash_filter this.children(), (child)=>\n\t//\tchild.type() == type\n\n\tchildren(): BaseNodeType[] {\n\t\treturn lodash_values(this._children);\n\t}\n\tchildren_names() {\n\t\treturn lodash_sortBy(lodash_keys(this._children));\n\t}\n\t// children_map: ->\n\t// \t@_children\n\n\ttraverse_children(callback: (arg0: BaseNodeType) => void) {\n\t\tfor (let child of this.children()) {\n\t\t\tcallback(child);\n\n\t\t\tchild.children_controller?.traverse_children(callback);\n\t\t}\n\t}\n}\n","// import UIData from './UIData';\nimport {BaseNodeType} from '../engine/nodes/_Base';\nimport lodash_difference from 'lodash/difference';\nimport lodash_union from 'lodash/union';\n// import lodash_isArray from 'lodash/isArray'\nimport lodash_isEqual from 'lodash/isEqual';\nimport {NodeEvent} from '../engine/poly/NodeEvent';\n\nexport class CoreNodeSelection {\n\t_node_ids: string[] = [];\n\tconstructor(private _node: BaseNodeType) {\n\t\t// super();\n\t\t// this._node_ids = [];\n\t}\n\n\tnode() {\n\t\treturn this._node;\n\t}\n\n\tnodes(): BaseNodeType[] {\n\t\treturn this._node.scene.graph.nodes_from_ids(this._node_ids) as BaseNodeType[];\n\t}\n\n\tcontains(node: BaseNodeType): boolean {\n\t\treturn this._node_ids.includes(node.graph_node_id);\n\t}\n\tequals(nodes: BaseNodeType[]): boolean {\n\t\tconst node_ids = nodes.map((node) => node.graph_node_id).sort();\n\t\treturn lodash_isEqual(node_ids, this._node_ids);\n\t}\n\n\tclear() {\n\t\tthis._node_ids = [];\n\t\tthis.send_update_event();\n\t}\n\tset(nodes: BaseNodeType[]) {\n\t\t// this.remove(this.nodes());\n\t\tthis._node_ids = [];\n\t\tthis.add(nodes);\n\t}\n\n\tadd(nodes_to_add: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_add)) { nodes_to_add = [nodes_to_add]; }\n\n\t\tconst node_ids_to_add = nodes_to_add.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_union(this._node_ids, node_ids_to_add);\n\n\t\tthis.send_update_event();\n\t}\n\n\tremove(nodes_to_remove: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_remove)) { nodes_to_remove = [nodes_to_remove]; }\n\n\t\tconst node_ids_to_remove = nodes_to_remove.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_difference(this._node_ids, node_ids_to_remove);\n\n\t\tthis.send_update_event();\n\t}\n\n\tprivate send_update_event() {\n\t\tthis._node.emit(NodeEvent.SELECTION_UPDATED);\n\t}\n\n\tprivate _json: string[] = [];\n\tto_json() {\n\t\tthis._json = this._json || [];\n\t\tthis._json = this._node_ids.map((id) => id);\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\ntype Callback = () => void;\ntype CallbackWithChildNode = (child_node: BaseNodeType) => void;\n\nexport class LifeCycleController {\n\tprotected _creation_completed = false;\n\tprotected _on_child_add_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_child_remove_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_create_hooks: Callback[] | undefined;\n\tprivate _on_add_hooks: Callback[] | undefined;\n\tprivate _on_delete_hooks: Callback[] | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset_creation_completed() {\n\t\tthis._creation_completed = true;\n\t}\n\tget creation_completed() {\n\t\treturn this.node.scene.loading_controller.loaded && this._creation_completed;\n\t}\n\t//\n\t//\n\t// ON CHILD ADD\n\t//\n\t//\n\tadd_on_child_add_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_add_hooks = this._on_child_add_hooks || [];\n\t\tthis._on_child_add_hooks.push(callback);\n\t}\n\trun_on_child_add_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_add_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CHILD REMOVE\n\t//\n\t//\n\tadd_on_child_remove_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_remove_hooks = this._on_child_remove_hooks || [];\n\t\tthis._on_child_remove_hooks.push(callback);\n\t}\n\trun_on_child_remove_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_remove_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CREATE\n\t//\n\t//\n\tadd_on_create_hook(callback: Callback) {\n\t\tthis._on_create_hooks = this._on_create_hooks || [];\n\t\tthis._on_create_hooks.push(callback);\n\t}\n\trun_on_create_hooks() {\n\t\tthis.execute_hooks(this._on_create_hooks);\n\t}\n\n\t//\n\t//\n\t// ON ADD\n\t//\n\t//\n\tadd_on_add_hook(callback: Callback) {\n\t\tthis._on_add_hooks = this._on_add_hooks || [];\n\t\tthis._on_add_hooks.push(callback);\n\t}\n\trun_on_add_hooks() {\n\t\tthis.execute_hooks(this._on_add_hooks);\n\t}\n\n\t//\n\t//\n\t// ON DELETE\n\t//\n\t//\n\tadd_delete_hook(callback: Callback) {\n\t\tthis._on_delete_hooks = this._on_delete_hooks || [];\n\t\tthis._on_delete_hooks.push(callback);\n\t}\n\trun_on_delete_hooks() {\n\t\tthis.execute_hooks(this._on_delete_hooks);\n\t}\n\n\t//\n\t//\n\t// UTILS\n\t//\n\t//\n\tprotected execute_hooks(hooks: Callback[] | undefined) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tprotected execute_hooks_with_child_node(hooks: CallbackWithChildNode[] | undefined, child_node: BaseNodeType) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook(child_node);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../_Base';\nimport {BaseContainer} from '../../containers/_Base';\nimport {POLY} from '../../Poly';\n\nexport class CookController {\n\t_cooking: boolean = false;\n\t_cooks_count: number = 0;\n\t_max_cook_time: number = -1;\n\t_cooking_dirty_timestamp: number | undefined;\n\t_cook_time_with_inputs: number = 0;\n\t_cook_time_with_inputs_start: number | undefined;\n\t_cook_time_start: number | undefined;\n\t_cook_time: number = 0;\n\t_cook_time_params_start: number | undefined;\n\t_cook_time_params: number = 0;\n\t_last_eval_key: string | undefined;\n\n\t_inputs_evaluation_required: boolean = true; //currently only for switch SOP\n\n\tconstructor(private node: BaseNodeType) {}\n\n\tdisallow_inputs_evaluation() {\n\t\tthis._inputs_evaluation_required = false;\n\t}\n\n\tget is_cooking(): boolean {\n\t\treturn this._cooking === true;\n\t}\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\tget cook_time(): number {\n\t\treturn this._cook_time;\n\t}\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t//this.emit 'node_dirty_updated'\n\t// this.node_post_set_dirty()\n\t// post_remove_dirty_state: (message)->\n\t// \tif !message?\n\t// \t\tthrow \"remove dirty state without message\"\n\n\t// node_post_set_dirty: ->\n\t// \t#\n\tprivate _init_cooking_state() {\n\t\tthis._cooking = true;\n\t\tthis._cooking_dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t}\n\tprivate _init_cooking_start_time(perf_active?: boolean) {\n\t\tif (perf_active == null) {\n\t\t\tperf_active = this.node.scene.performance.started;\n\t\t}\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_start = performance.now();\n\t\t}\n\t}\n\n\tprivate async _start_cook_if_no_errors(input_contents: any[]) {\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.end_cook();\n\t\t} else {\n\t\t\t// this.self.cook(input_containers);\n\t\t\ttry {\n\t\t\t\tawait this.node.cook(input_contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.node.states.error.set(`node internal error: '${e}'.`);\n\t\t\t\tconsole.error(this.node.full_path(), e);\n\t\t\t\tthis.end_cook();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cook_main() {\n\t\tif (this.is_cooking) {\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tconst perf_active = this.node.scene.performance.started;\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_with_inputs_start = performance.now();\n\t\t}\n\t\tthis.node.states.error.clear();\n\n\t\t//this._block_params_dirty_propagation()\n\t\tconst input_containers = await this.evaluate_inputs_and_params();\n\n\t\tthis._init_cooking_start_time(perf_active);\n\n\t\tconst input_contents = [];\n\t\tif (input_containers) {\n\t\t\tlet input_container;\n\t\t\tfor (let i = 0; i < input_containers.length; i++) {\n\t\t\t\tinput_container = input_containers[i];\n\t\t\t\tif (input_container) {\n\t\t\t\t\tif (this.node.io.inputs.input_clonable_state_with_override(i)) {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content_cloned());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this._start_cook_if_no_errors(input_contents);\n\t}\n\tasync cook_main_without_inputs() {\n\t\tthis.node.scene.cook_controller.add_node(this.node);\n\t\tif (this.is_cooking) {\n\t\t\t// TODO:\n\t\t\t// this seems to happen because when we flush the cooker queue,\n\t\t\t// some graph nodes will trigger more updates, which will then make dependent nodes\n\t\t\t// dirty again\n\t\t\tconsole.warn('cook_main_without_inputs already cooking', this.node.full_path());\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tthis._init_cooking_start_time();\n\t\tthis.node.states.error.clear();\n\n\t\tawait this.node.params.eval_all();\n\t\tawait this._start_cook_if_no_errors([]);\n\t}\n\t// catch e\n\t// \tthis.set_error(\"failed to cook: #{e}\")\n\n\tend_cook(message?: string | null) {\n\t\tthis._increment_cooks_count();\n\n\t\tconst dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t\tif (dirty_timestamp == null || dirty_timestamp === this._cooking_dirty_timestamp) {\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis._terminate_cook_process();\n\t\t} else {\n\t\t\tPOLY.log('COOK AGAIN', dirty_timestamp, this._cooking_dirty_timestamp, this.node.full_path());\n\t\t\tthis._cooking = false;\n\t\t\tthis.cook_main();\n\t\t}\n\t}\n\n\t_terminate_cook_process() {\n\t\tif (this.is_cooking) {\n\t\t\t//this._unblock_params_dirty_propagation()\n\t\t\tthis._cooking = false;\n\n\t\t\t// this._cook_eval_key = `${this.graph_node_id}/${performance.now()}@${this.context().frame()}`;\n\n\t\t\tthis._record_cook_time();\n\t\t\t//console.log(\"END COOK: #{this.full_path()} #{this.cook_time()} (with inputs:#{this.cook_time_with_inputs()}) (cook count: #{@_cooks_count}): #{message}\")\n\t\t\t//this.notify_requesters()\n\t\t\tsetTimeout(this.node.container_controller.notify_requesters.bind(this.node.container_controller), 0);\n\t\t}\n\t}\n\tprivate _increment_cooks_count() {\n\t\tif (this.is_cooking) {\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cooks_count += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// cook_eval_key() {\n\t// \tif (!this.is_dirty()) {\n\t// \t\treturn this._cook_eval_key;\n\t// \t} else {\n\t// \t\treturn performance.now();\n\t// \t}\n\t// }\n\n\t_record_cook_time() {\n\t\tif (this.node.scene.performance.started) {\n\t\t\tconst cook_time_end = performance.now();\n\n\t\t\tif (this._cook_time_with_inputs_start != null) {\n\t\t\t\tthis._cook_time_with_inputs = cook_time_end - this._cook_time_with_inputs_start;\n\t\t\t\tthis._cook_time_with_inputs_start = undefined;\n\t\t\t}\n\n\t\t\tif (this._cook_time_params_start != null && this._cook_time_start != null) {\n\t\t\t\tthis._cook_time_params = this._cook_time_start - this._cook_time_params_start;\n\t\t\t}\n\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cook_time = cook_time_end - this._cook_time_start;\n\t\t\t\tthis._cook_time_start = undefined;\n\t\t\t}\n\n\t\t\tthis._max_cook_time = Math.max(this._max_cook_time, this._cook_time);\n\t\t}\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis.node.scene.performance.record_node_cook_data(this.node);\n\t\t}\n\t}\n\n\t// allow_eval_key_check() {\n\t// \treturn false;\n\t// }\n\n\tasync evaluate_inputs_and_params() {\n\t\t//t0 = performance.now()\n\n\t\tlet input_containers: (BaseContainer | null)[] = [];\n\t\tif (this._inputs_evaluation_required) {\n\t\t\tinput_containers = await this.node.io.inputs.eval_required_inputs_p();\n\t\t}\n\t\t// const inputs_eval_key = input_containers.map( c => c.eval_key()).join('-');\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis._cook_time_params_start = performance.now();\n\t\t}\n\n\t\t/*const params_eval_key = */ await this.node.params.eval_all();\n\t\t// const full_eval_key = [inputs_eval_key, params_eval_key].join('+');\n\t\t// if (this.allow_eval_key_check() && (this._last_eval_key != null) && (this._last_eval_key === full_eval_key)) {\n\t\t// \tthis._terminate_cook_process('no need to cook');\n\t\t// } else {\n\t\t// \tthis._last_eval_key = full_eval_key;\n\t\t// }\n\t\treturn input_containers;\n\t}\n\n\t//this._time_with_precision(@_cook_time)\n\tget cook_time_with_inputs() {\n\t\treturn this._cook_time_with_inputs;\n\t}\n\t//this._time_with_precision(@_cook_time_with_inputs)\n\tget cook_time_params() {\n\t\treturn this._cook_time_params;\n\t}\n\t_time_with_precision(time: number) {\n\t\tconst precision = 1000;\n\t\treturn Math.round(time * precision) / precision;\n\t}\n}\n","import lodash_groupBy from 'lodash/groupBy';\nimport {BaseNodeType, BaseNodeClass} from '../_Base';\n\nimport {BaseParamType, BaseParamClass} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nenum METHODS {\n\tSUCCESSORS = 'graph_successors',\n\tPREDECESSORS = 'graph_predecessors',\n}\n\n// finally, guard ALL the types!\nfunction typeGuard<T extends PrimitiveOrConstructor>(o: any, className: T): o is GuardedType<T> {\n\tconst localPrimitiveOrConstructor: PrimitiveOrConstructor = className;\n\tif (typeof localPrimitiveOrConstructor === 'string') {\n\t\treturn typeof o === localPrimitiveOrConstructor;\n\t}\n\treturn o instanceof localPrimitiveOrConstructor;\n}\n\nexport class DependenciesController {\n\tprivate _params_referrees_by_graph_node_id: Dictionary<BaseParamType> | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// debug_dependencies() {\n\t// \tconst nodes = this.scene_successors();\n\t// \tconsole.log('--------------------');\n\t// \tnodes.forEach((n) => {\n\t// \t\tconsole.log(n.full_path());\n\t// \t});\n\t// }\n\n\tscene_successors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.SUCCESSORS);\n\t}\n\n\tscene_predecessors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.PREDECESSORS);\n\t}\n\tprivate _find_scene_node_scene_nodes(method: METHODS): BaseNodeType[] {\n\t\tconst params = this.node.params.all;\n\t\tconst graph_nodes: CoreGraphNode[] = [];\n\t\tfor (let param of params) {\n\t\t\tgraph_nodes.push(param);\n\t\t}\n\t\tgraph_nodes.push(this.node);\n\t\tconst start_nodes = graph_nodes;\n\t\tlet base_nodes: BaseNodeType[] = [];\n\t\tfor (let start_node of start_nodes) {\n\t\t\tthis._find_base_nodes_from_node(start_node, method, base_nodes);\n\t\t}\n\n\t\tif (method == METHODS.SUCCESSORS) {\n\t\t\tfor (let node of this.param_nodes_referree()) {\n\t\t\t\tbase_nodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\t// ensure uniq and not current node\n\t\tbase_nodes = base_nodes.filter((scene_node) => {\n\t\t\treturn scene_node.graph_node_id != this.node.graph_node_id;\n\t\t});\n\t\tconst base_nodes_by_graph_node_id = lodash_groupBy(base_nodes, (n) => n.graph_node_id);\n\t\tconst uniq_base_nodes: BaseNodeType[] = [];\n\t\tObject.keys(base_nodes_by_graph_node_id).forEach((graph_node_id) => {\n\t\t\tuniq_base_nodes.push(base_nodes_by_graph_node_id[graph_node_id][0]);\n\t\t});\n\t\treturn uniq_base_nodes;\n\t}\n\n\tprivate _find_base_nodes_from_node(node: CoreGraphNode, method: METHODS, base_nodes: BaseNodeType[]) {\n\t\tconst next_nodes = node[method]();\n\t\tfor (let next_node of next_nodes) {\n\t\t\tif (next_node instanceof BaseParamClass) {\n\t\t\t\tbase_nodes.push(next_node.node);\n\t\t\t} else {\n\t\t\t\tif (typeGuard(next_node, BaseNodeClass)) {\n\t\t\t\t\tbase_nodes.push(next_node);\n\t\t\t\t} else {\n\t\t\t\t\tthis._find_base_nodes_from_node(next_node, method, base_nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn base_nodes;\n\t}\n\n\t//\n\t//\n\t// REFERRED BY\n\t// which is used for operator path referring nodes without creating a graph edge\n\t//\n\t//\n\tadd_param_referree(param: BaseParamType) {\n\t\tthis._params_referrees_by_graph_node_id = this._params_referrees_by_graph_node_id || {};\n\t\tthis._params_referrees_by_graph_node_id[param.graph_node_id] = param;\n\t}\n\tremove_param_referree(param: BaseParamType) {\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tdelete this._params_referrees_by_graph_node_id[param.graph_node_id];\n\t\t}\n\t}\n\tparams_referree(): BaseParamType[] {\n\t\tconst list = [];\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tfor (let graph_node_id of Object.keys(this._params_referrees_by_graph_node_id)) {\n\t\t\t\tlist.push(this._params_referrees_by_graph_node_id[graph_node_id]);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tparam_nodes_referree(): BaseNodeType[] {\n\t\tconst node_by_graph_node_id: Dictionary<BaseNodeType> = {};\n\t\tlet node;\n\t\tfor (let param of this.params_referree()) {\n\t\t\tnode = param.node;\n\t\t\tnode_by_graph_node_id[node.graph_node_id] = node;\n\t\t}\n\t\tconst list = [];\n\t\tfor (let graph_node_id of Object.keys(node_by_graph_node_id)) {\n\t\t\tlist.push(node_by_graph_node_id[graph_node_id]);\n\t\t}\n\t\treturn list;\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\nexport class EmitController {\n\t_blocked_emit: boolean = false;\n\t_blocked_parent_emit: boolean = false;\n\t_count_by_event_name: Dictionary<number> = {};\n\tconstructor(protected param: BaseParamType) {}\n\n\tget emit_allowed(): boolean {\n\t\tif (this._blocked_emit === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.param.scene.loading_controller.is_loading) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: should I also prevent nodes from updating\n\t\t// when they are being called in a loop such as from the Copy SOP?\n\t\t//node = this.node()\n\t\t//node? && !node.is_cooking() && this.scene().emit_allowed() # this prevents a camera from updating its param for instance\n\t\t// although maybe I should send a dirty to the store, and then that store queries the param?\n\t\treturn this.param.scene.dispatch_controller.emit_allowed;\n\t}\n\n\tblock_emit() {\n\t\tthis._blocked_emit = true;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.block_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tunblock_emit() {\n\t\tthis._blocked_emit = false;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.unblock_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tblock_parent_emit() {\n\t\tthis._blocked_parent_emit = true;\n\t\treturn true;\n\t}\n\tunblock_parent_emit() {\n\t\tthis._blocked_parent_emit = false;\n\t\treturn true;\n\t}\n\n\tincrement_count(event_name: ParamEvent) {\n\t\tthis._count_by_event_name[event_name] = this._count_by_event_name[event_name] || 0;\n\t\tthis._count_by_event_name[event_name] += 1;\n\t}\n\tevents_count(event_name: ParamEvent): number {\n\t\treturn this._count_by_event_name[event_name] || 0;\n\t}\n\n\temit(event: ParamEvent) {\n\t\tif (this.emit_allowed) {\n\t\t\tthis.param.emit(event);\n\n\t\t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t\t\t\tthis.param.parent_param.emit(event);\n\t\t\t}\n\t\t}\n\t}\n\t// emit_param_updated() {\n\t// \tconsole.log('emit_param_updated', this.param.name, this.emit_allowed);\n\t// \tif (this.emit_allowed) {\n\t// \t\tthis.param.emit(ParamEvent.UPDATED);\n\n\t// \t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t// \t\t\tthis.param.parent_param.emit(ParamEvent.UPDATED);\n\t// \t\t}\n\t// \t}\n\t// \t//else\n\t// \t//\tthis.emit('param_updated')\n\n\t// \t// return null\n\t// }\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamValueSerializedTypeMap} from '../types/ParamValueSerializedTypeMap';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../types/ParamInitValueSerializedTypeMap';\n\nexport interface ParamSerializerData {\n\tname: string;\n\ttype: string;\n\traw_input: ParamInitValueSerializedTypeMap[ParamType];\n\tvalue: ParamValueSerializedTypeMap[ParamType];\n\texpression?: string;\n\tgraph_node_id: string;\n\t// is_dirty: boolean;\n\terror_message?: string;\n\tis_visible: boolean;\n\tfolder_name?: string;\n\tcomponents?: string[];\n}\n\nexport class ParamSerializer {\n\tconstructor(protected param: BaseParamType) {}\n\n\tto_json(): ParamSerializerData {\n\t\tconst data: ParamSerializerData = {\n\t\t\tname: this.param.name,\n\t\t\ttype: this.param.type,\n\t\t\traw_input: this.raw_input(),\n\t\t\tvalue: this.value(),\n\t\t\texpression: this.expression(),\n\t\t\tgraph_node_id: this.param.graph_node_id,\n\t\t\t// is_dirty: this.param.is_dirty,\n\t\t\terror_message: this.error_message(),\n\t\t\tis_visible: this.is_visible(),\n\t\t\t// folder_name: this.param.ui_data.folder_name,\n\t\t\tcomponents: undefined,\n\t\t};\n\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tdata['components'] = this.param.components.map((component) => component.graph_node_id);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\traw_input() {\n\t\treturn this.param.raw_input_serialized;\n\t}\n\tvalue() {\n\t\treturn this.param.value_serialized;\n\t}\n\texpression() {\n\t\treturn this.param.has_expression() ? this.param.expression_controller?.expression : undefined;\n\t}\n\terror_message() {\n\t\treturn this.param.states.error.message;\n\t}\n\tis_visible() {\n\t\treturn this.param.options.is_visible;\n\t}\n}\n","import {BaseParamType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.param);\n\terror = new ErrorState(this.param);\n\tconstructor(protected param: BaseParamType) {}\n}\n","import {BaseParamType} from '../../_Base';\n\nexport class TimeDependentState {\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active(): boolean {\n\t\tconst frame_graph_node_id = this.param.scene.time_controller.graph_node.graph_node_id;\n\n\t\treturn this.param.graph_predecessor_ids().includes(frame_graph_node_id);\n\t}\n}\n","import {BaseParamType} from '../../_Base';\nimport {ParamEvent} from '../../../poly/ParamEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(private param: BaseParamType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tthis._message = message;\n\t\t\tif (this._message) {\n\t\t\t\tconsole.log(this.param.full_path(), this._message);\n\t\t\t}\n\t\t\tthis.param.emit_controller.emit(ParamEvent.ERROR_UPDATED);\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport {FloatParam} from '../../../params/Float';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\n\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamEvent} from '../../../poly/ParamEvent';\nimport {NodeParamsConfig} from './ParamsConfig';\n\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamConstructorByType} from '../../../params/types/ParamConstructorByType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nconst NODE_SIMPLE_NAME = 'params';\n\nexport type OnSceneLoadHook = () => void;\ntype PostCreateParamsHook = () => void;\n\nexport interface ParamOptionToAdd<T extends ParamType> {\n\tname: string;\n\ttype: T;\n\tinit_value: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n}\nexport interface ParamsUpdateOptions {\n\tnames_to_delete?: string[];\n\tto_add?: ParamOptionToAdd<ParamType>[];\n}\n\nexport class ParamsController {\n\tprivate _param_create_mode: boolean = false;\n\tprivate _params_by_name: Dictionary<BaseParamType> = {};\n\t// caches\n\tprivate _params_list: BaseParamType[] = [];\n\tprivate _param_names: string[] = [];\n\tprivate _non_spare_params: BaseParamType[] = [];\n\tprivate _spare_params: BaseParamType[] = [];\n\tprivate _non_spare_param_names: string[] = [];\n\tprivate _spare_param_names: string[] = [];\n\n\tprivate _params_node: CoreGraphNode | undefined;\n\t// private _params_eval_key: string;\n\tprivate _params_added_since_last_params_eval: boolean = false;\n\t// private _current_param_folder_name: string | undefined;\n\n\t// hooks\n\tprivate _post_create_params_hook: PostCreateParamsHook | undefined;\n\tprivate _on_scene_load_hooks: OnSceneLoadHook[] | undefined;\n\tprivate _on_scene_load_hook_names: string[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tprivate init_dependency_node() {\n\t\tif (!this._params_node) {\n\t\t\t// TODO: consider not having a params_node for nodes which have no parameters\n\t\t\tthis._params_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t// this._params_node.set_scene(this.node.scene);\n\t\t\tthis.node.add_graph_input(this._params_node);\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.init_dependency_node();\n\t\t// this.reset_params()\n\t\tthis._param_create_mode = true;\n\n\t\tthis.init_from_params_config();\n\t\tthis.node.create_params();\n\t\tthis._post_create_params();\n\t}\n\tprivate _post_create_params() {\n\t\tthis._update_caches();\n\t\t// this._create_params_ui_data_dependencies();\n\t\tthis.init_param_accessors();\n\t\tthis._param_create_mode = false;\n\n\t\tthis.run_post_create_params_hook();\n\n\t\t// This was to debug a weird bug where I was adding nodes to the list\n\t\t// of params, from the DependenciesController\n\t\t// this._params_list.push = (...items: BaseParamType[]) => {\n\t\t// \tif (items[0] && !items[0].compute) {\n\t\t// \t\tconsole.warn('adding params', items);\n\t\t// \t}\n\t\t// \tfor (let i of items) {\n\t\t// \t\tthis._params_list[this._params_list.length] = i;\n\t\t// \t}\n\t\t// \treturn 0;\n\t\t// };\n\t}\n\tupdate_params(options: ParamsUpdateOptions) {\n\t\tlet has_created_a_param = false;\n\t\tlet has_deleted_a_param = false;\n\t\tif (options.names_to_delete) {\n\t\t\tfor (let name of options.names_to_delete) {\n\t\t\t\tif (this.has(name)) {\n\t\t\t\t\tthis.delete_param(name);\n\t\t\t\t\thas_deleted_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.to_add) {\n\t\t\tfor (let param_data of options.to_add) {\n\t\t\t\tconst param = this.add_param(\n\t\t\t\t\tparam_data.type,\n\t\t\t\t\tparam_data.name,\n\t\t\t\t\tparam_data.init_value,\n\t\t\t\t\tparam_data.options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\thas_created_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (has_deleted_a_param || has_created_a_param) {\n\t\t\tthis._update_caches();\n\t\t\tthis.init_param_accessors();\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\tpost_create_spare_params() {\n\t\tthis._update_caches();\n\t\tthis.init_param_accessors();\n\t}\n\n\tprivate init_from_params_config() {\n\t\tconst params_config = this.node.params_config as NodeParamsConfig;\n\t\tif (params_config) {\n\t\t\tfor (let name of Object.keys(params_config)) {\n\t\t\t\tconst config = params_config[name];\n\t\t\t\tthis.add_param(config.type, name, config.init_value, config.options);\n\t\t\t}\n\t\t}\n\t}\n\tprivate init_param_accessors() {\n\t\tlet current_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\t\tthis._remove_unneeded_accessors(current_names_in_accessor);\n\t\t// update var after having removed accessors\n\t\tcurrent_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\n\t\tfor (let param of this.all) {\n\t\t\tconst is_spare: boolean = param.options.is_spare;\n\n\t\t\tconst param_not_yet_in_accessors = !current_names_in_accessor.includes(param.name);\n\n\t\t\tif (param_not_yet_in_accessors || is_spare) {\n\t\t\t\tObject.defineProperty(this.node.pv, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param.value;\n\t\t\t\t\t},\n\t\t\t\t\t// only spare parameters can be removed\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t\tObject.defineProperty(this.node.p, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param;\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprivate _remove_unneeded_accessors(current_names_in_accessor: string[]) {\n\t\tconst current_param_names = this._param_names;\n\t\tconst names_to_remove = [];\n\t\tfor (let current_name_in_accessor of current_names_in_accessor) {\n\t\t\tif (!current_param_names.includes(current_name_in_accessor)) {\n\t\t\t\tnames_to_remove.push(current_name_in_accessor);\n\t\t\t}\n\t\t}\n\n\t\tfor (let name_to_remove of names_to_remove) {\n\t\t\tObject.defineProperty(this.node.pv, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t\tObject.defineProperty(this.node.p, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tget params_node() {\n\t\treturn this._params_node;\n\t}\n\tget all() {\n\t\treturn this._params_list;\n\t}\n\tget non_spare() {\n\t\treturn this._non_spare_params;\n\t}\n\tget spare() {\n\t\treturn this._spare_params;\n\t}\n\tget names(): string[] {\n\t\treturn this._param_names;\n\t}\n\tget non_spare_names(): string[] {\n\t\treturn this._non_spare_param_names;\n\t}\n\tget spare_names(): string[] {\n\t\treturn this._spare_param_names;\n\t}\n\t// get params_by_name() {\n\t// \treturn this._params_by_name;\n\t// }\n\t// get all_params() {\n\t// \t// return lodash_concat(lodash_values(this._params), lodash_values(this._spare_params));\n\t// \treturn lodash_values(this._params);\n\t// }\n\n\tprivate set_with_type<T extends ParamType>(name: string, value: ParamInitValuesTypeMap[T], type: T) {\n\t\tconst param = this.param_with_type(name, type);\n\t\tif (param) {\n\t\t\tparam.set(value as never);\n\t\t} else {\n\t\t\tconsole.warn(`param ${name} not found with type ${type}`);\n\t\t}\n\t}\n\tset_float(name: string, value: ParamInitValuesTypeMap[ParamType.FLOAT]) {\n\t\tthis.set_with_type(name, value, ParamType.FLOAT);\n\t}\n\tset_vector3(name: string, value: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tthis.set_with_type(name, value, ParamType.VECTOR3);\n\t}\n\n\thas_param(name: string) {\n\t\treturn this._params_by_name[name] != null;\n\t}\n\thas(name: string) {\n\t\treturn this.has_param(name);\n\t}\n\tget(name: string) {\n\t\treturn this.param(name);\n\t}\n\tparam_with_type<T extends ParamType>(name: string, type: T): ParamConstructorMap[T] | undefined {\n\t\tconst param = this.param(name);\n\t\tif (param && param.type == type) {\n\t\t\treturn param as ParamConstructorMap[T];\n\t\t}\n\t}\n\tget_float(name: string): FloatParam {\n\t\treturn this.param_with_type(name, ParamType.FLOAT) as FloatParam;\n\t}\n\tget_operator_path(name: string): OperatorPathParam {\n\t\treturn this.param_with_type(name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n\t}\n\tvalue(name: string) {\n\t\treturn this.param(name)?.value;\n\t}\n\tvalue_with_type<T extends ParamType>(name: string, type: T): ParamValuesTypeMap[T] {\n\t\treturn this.param_with_type(name, type)?.value as ParamValuesTypeMap[T];\n\t\t// const param = this.param(name);\n\t\t// if (param && param.type() == type) {\n\t\t// \treturn param.value();\n\t\t// }\n\t}\n\tboolean(name: string) {\n\t\treturn this.value_with_type(name, ParamType.BOOLEAN);\n\t}\n\tfloat(name: string) {\n\t\treturn this.value_with_type(name, ParamType.FLOAT);\n\t}\n\tinteger(name: string) {\n\t\treturn this.value_with_type(name, ParamType.INTEGER);\n\t}\n\tstring(name: string) {\n\t\treturn this.value_with_type(name, ParamType.STRING);\n\t}\n\tvector2(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR2);\n\t}\n\tvector3(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR3);\n\t}\n\tcolor(name: string) {\n\t\treturn this.value_with_type(name, ParamType.COLOR);\n\t}\n\n\tparam(name: string) {\n\t\tconst p = this._params_by_name[name];\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`tried to access param '${name}' in node ${this.node.full_path()}, but existing params are: ${\n\t\t\t\t\tthis.names\n\t\t\t\t} on node ${this.node.full_path()}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\t// param_cache_name(param_name: string) {\n\t// \treturn `_param_${param_name}`;\n\t// }\n\n\t// delete_params(param_names: string[]) {\n\t// \tfor (let param_name of param_names) {\n\t// \t\tthis.delete_param(param_name);\n\t// \t}\n\n\t// }\n\t// call update_params instead\n\tprivate delete_param(param_name: string) {\n\t\tconst param = this._params_by_name[param_name];\n\t\tif (param) {\n\t\t\tif (this._params_node) {\n\t\t\t\tthis._params_node.remove_graph_input(this._params_by_name[param_name]);\n\t\t\t}\n\t\t\tparam.set_node(null);\n\t\t\tdelete this._params_by_name[param_name];\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tconst child_name = component.name;\n\t\t\t\t\tdelete this._params_by_name[child_name];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// const name_index = this._param_names.indexOf(param_name)\n\t\t\t// if(name_index >= 0){\n\t\t\t// \tthis._param_names.splice(name_index, 1)\n\t\t\t// }\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t} else {\n\t\t\tthrow new Error(`param '${param_name}' does not exist on node ${this.node.full_path()}`);\n\t\t}\n\t}\n\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tinit_value: ParamInitValuesTypeMap[T],\n\t\toptions: ParamOptions = {}\n\t): ParamConstructorMap[T] | undefined {\n\t\tconst is_spare = options['spare'] || false;\n\t\tif (this._param_create_mode === false && !is_spare) {\n\t\t\tconsole.warn(\n\t\t\t\t`node ${this.node.full_path()} (${\n\t\t\t\t\tthis.node.type\n\t\t\t\t}) param '${name}' cannot be created outside of create_params`\n\t\t\t);\n\t\t}\n\t\tif (this.node.scene == null) {\n\t\t\tconsole.warn(`node ${this.node.full_path()} (${this.node.type}) has no scene assigned`);\n\t\t}\n\n\t\tconst constructor = ParamConstructorByType[type];\n\t\tif (constructor != null) {\n\t\t\tconst existing_param = this._params_by_name[name];\n\t\t\tif (existing_param) {\n\t\t\t\tif (is_spare) {\n\t\t\t\t\t// delete the old one, otherwise the gl nodes when saved will attempt to set the value\n\t\t\t\t\t// of a param with the potentially wrong type\n\t\t\t\t\tif (existing_param.type != type) {\n\t\t\t\t\t\tthis.delete_param(existing_param.name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check that the param is spare, so that the ones generated by gl nodes are not generating an exception\n\t\t\t\t\tconsole.warn(`a param named ${name} already exists`, this.node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst param: ParamConstructorMap[T] = new constructor(this.node.scene);\n\t\t\tparam.options.set(options);\n\n\t\t\tparam.set_name(name);\n\t\t\tparam.set_init_value(init_value as never);\n\t\t\tparam.init_components();\n\t\t\tparam.set(init_value as never);\n\t\t\tparam.set_node(this.node);\n\n\t\t\tthis._params_by_name[param.name] = param as BaseParamType;\n\n\t\t\t// we add the components, so that we can access them with expressions like ch('ty')\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tthis._params_by_name[component.name] = component as BaseParamType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._params_added_since_last_params_eval = true;\n\n\t\t\treturn param;\n\t\t}\n\t}\n\n\tprivate _update_caches() {\n\t\tthis._params_list = Object.values(this._params_by_name);\n\t\tthis._param_names = Object.keys(this._params_by_name);\n\t\tthis._non_spare_params = Object.values(this._params_by_name).filter((p) => !p.options.is_spare);\n\t\tthis._spare_params = Object.values(this._params_by_name).filter((p) => p.options.is_spare);\n\t\tthis._non_spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => !p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\tthis._spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t}\n\n\tasync _eval_param(param: BaseParamType) {\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// const param_cache_name = this.param_cache_name(param.name());\n\t\t// const cached_value = this[param_cache_name] || null;\n\t\tif (/*cached_value == null ||*/ param.is_dirty /* || param.is_errored()*/) {\n\t\t\t/*const param_value =*/ await param.compute(); //.then(param_value=>{\n\t\t\t// this[param_cache_name] = param_value;\n\t\t\tif (param.states.error.active) {\n\t\t\t\tthis.node.states.error.set(`param '${param.name}' error: ${param.states.error.message}`);\n\t\t\t}\n\t\t\t// return param_value;\n\t\t} else {\n\t\t\t// return param.value;\n\t\t}\n\t\t// });\n\t}\n\n\tasync eval_params(params: BaseParamType[]) {\n\t\tconst promises = [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (params[i].is_dirty) {\n\t\t\t\tpromises.push(this._eval_param(params[i]));\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.node.set_container(null);\n\t\t}\n\t}\n\n\tasync eval_all() {\n\t\tif (this._params_node) {\n\t\t\tif (this._params_node.is_dirty || this._params_added_since_last_params_eval) {\n\t\t\t\tawait this.eval_params(this._params_list);\n\n\t\t\t\tthis._params_node.remove_dirty_state();\n\t\t\t\tthis._params_added_since_last_params_eval = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tset_post_create_params_hook(hook: PostCreateParamsHook) {\n\t\tthis._post_create_params_hook = hook;\n\t}\n\tadd_on_scene_load_hook(name: string, method: OnSceneLoadHook) {\n\t\tthis._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n\t\tthis._on_scene_load_hooks = this._on_scene_load_hooks || [];\n\n\t\tif (!this._on_scene_load_hook_names.includes(name)) {\n\t\t\tthis._on_scene_load_hook_names.push(name);\n\t\t\tthis._on_scene_load_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\trun_post_create_params_hook() {\n\t\tif (this._post_create_params_hook) {\n\t\t\tthis._post_create_params_hook();\n\t\t}\n\t}\n\trun_on_scene_load_hooks() {\n\t\tif (this._on_scene_load_hooks) {\n\t\t\tfor (let hook of this._on_scene_load_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\n// import lodash_includes from 'lodash/includes'\nimport lodash_isString from 'lodash/isString';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class BooleanParam extends TypedNumericParam<ParamType.BOOLEAN> {\n\tstatic type() {\n\t\treturn ParamType.BOOLEAN;\n\t}\n\t// TODO: be careful as this does not allow serialization of expressions as default value\n\tget default_value_serialized() {\n\t\tif (lodash_isString(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.convert(this.default_value) || false;\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BOOLEAN], val2: ParamValuesTypeMap[ParamType.BOOLEAN]) {\n\t\treturn val1 == val2;\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.BOOLEAN]): boolean | null {\n\t\tif (lodash_isBoolean(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (lodash_isNumber(raw_val)) {\n\t\t\t\treturn raw_val >= 1;\n\t\t\t} else {\n\t\t\t\tif (lodash_isString(raw_val)) {\n\t\t\t\t\tif (CoreString.is_boolean(raw_val)) {\n\t\t\t\t\t\treturn CoreString.to_boolean(raw_val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\t\t\t\treturn parsed >= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t// convert_value(v: ParamInputValue): boolean {\n\t// \treturn this.value_to_boolean(v)\n\t// }\n\t// convert_default_value(v: ParamInputValue): number {\n\t// \tif (lodash_isString(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\treturn this.value_to_boolean(v) // ? 1 : 0\n\t// \t}\n\t// }\n\t// is_value_expression(v: ParamInputValue): boolean {\n\t// \treturn !lodash_includes([true, false, 0, 1, '0', '1'], v)\n\t// }\n\n\t// value_to_boolean(v: ParamInputValue): boolean {\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\tif (lodash_isNumber(v)) {\n\t// \t\t\treturn v > 0\n\t// \t\t} else {\n\t// \t\t\treturn parseInt(v) > 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// eval(callback) {\n\t// \treturn this.eval_raw((val) => {\n\t// \t\tconst boolean_result = this.value_to_boolean(val)\n\t// \t\treturn callback(boolean_result)\n\t// \t})\n\t// }\n}\n","import {BaseParamType} from '../params/_Base';\nimport {ParsedTree} from './traversers/ParsedTree';\n// import {MissingReferencesController} from './MissingReferencesController'\n// import CoreWalker from 'src/core/Walker'\n\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\nimport {ExpressionStringGenerator} from './traversers/ExpressionStringGenerator';\nimport {DependenciesController} from './DependenciesController';\nimport {ParamType} from '../poly/ParamType';\n\nexport class ExpressionManager {\n\tpublic parse_completed: boolean = false;\n\tprivate parse_started: boolean = false;\n\tprivate function_generator: FunctionGenerator;\n\tprivate expression_string_generator: ExpressionStringGenerator | undefined;\n\tpublic dependencies_controller: DependenciesController;\n\t// private _error_message: string | undefined;\n\tprivate parsed_tree: ParsedTree = new ParsedTree();\n\n\tconstructor(\n\t\tpublic param: BaseParamType // public element_index: number=0\n\t) {\n\t\tthis.function_generator = new FunctionGenerator(this.param);\n\t\tthis.dependencies_controller = new DependenciesController(this.param);\n\t}\n\n\tparse_expression(expression: string) {\n\t\tif (this.parse_started) {\n\t\t\tthrow new Error(`parse in progress for param ${this.param.full_path()}`);\n\t\t}\n\t\tthis.parse_started = true;\n\t\tthis.parse_completed = false;\n\t\tthis.parsed_tree = this.parsed_tree || new ParsedTree();\n\n\t\tthis.reset();\n\t\tif (this.param.type == ParamType.STRING) {\n\t\t\tthis.parsed_tree.parse_expression_for_string_param(expression);\n\t\t} else {\n\t\t\tthis.parsed_tree.parse_expression(expression);\n\t\t}\n\t\tthis.function_generator.parse_tree(this.parsed_tree);\n\n\t\tif (this.function_generator.error_message == null) {\n\t\t\tthis.dependencies_controller.update(this.function_generator);\n\t\t\tif (this.dependencies_controller.error_message) {\n\t\t\t\tthis.param.states.error.set(this.dependencies_controller.error_message);\n\t\t\t} else {\n\t\t\t\tthis.parse_completed = true;\n\t\t\t\tthis.parse_started = false;\n\t\t\t}\n\t\t} //else {\n\t\t//this.set_error(this.function_generator.error_message);\n\t\t//}\n\t}\n\tasync compute_function(): Promise<any> {\n\t\t// this.parse_and_update_dependencies_if_not_done(expression);\n\t\tif (this.compute_allowed()) {\n\t\t\ttry {\n\t\t\t\tconst new_value = await this.function_generator.eval_function();\n\t\t\t\treturn new_value;\n\t\t\t} catch (e) {\n\t\t\t\t// if (this.function_generator.is_errored && this.function_generator.error_message) {\n\t\t\t\t// \tthis.set_error(this.function_generator.error_message);\n\t\t\t\t// }\n\t\t\t\treturn new Promise((resolve, reject) => resolve());\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.parse_completed = false;\n\t\tthis.parse_started = false;\n\t\t// this._error_message = undefined;\n\t\t// if(force){ // || this.element_index <= 1){\n\t\tthis.dependencies_controller.reset();\n\t\t// }\n\t\tthis.function_generator.reset();\n\t}\n\n\tget is_errored(): boolean {\n\t\treturn this.function_generator.is_errored;\n\t}\n\tget error_message() {\n\t\treturn this.function_generator.error_message;\n\t}\n\n\tprivate compute_allowed(): boolean {\n\t\treturn /*this._error_message == null &&*/ this.function_generator.eval_allowed();\n\t}\n\n\t// private parse_and_update_dependencies(expression: string) {\n\t// \tif (this.param.has_expression()) {\n\t// \t\tthis.parse_expression(expression);\n\n\t// \t\tif (this.error_message != null) {\n\t// \t\t\tthis.param.states.error.set(`expression error: \"${expression}\" (${this.error_message})`);\n\t// \t\t}\n\t// \t\t// this.parse_completed = true\n\t// \t}\n\t// }\n\t// private parse_and_update_dependencies_if_not_done(expression: string) {\n\t// \tif (!this.parse_completed) {\n\t// \t\tthis.parse_and_update_dependencies(expression);\n\t// \t}\n\t// }\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.expression_string_generator =\n\t\t\tthis.expression_string_generator || new ExpressionStringGenerator(this.param);\n\n\t\tconst new_expression_string = this.expression_string_generator.parse_tree(this.parsed_tree);\n\n\t\tif (new_expression_string) {\n\t\t\tthis.param.set(new_expression_string);\n\t\t} else {\n\t\t\tconsole.warn('failed to regenerate expression');\n\t\t}\n\t\t// this.param.expression_controller?.set_expression(new_expression_string);\n\n\t\t// this.reset()\n\t\t// if (new_expression_string) {\n\t\t// this.parse_expression(new_expression_string);\n\t\t// }\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {ParsedTree} from './ParsedTree';\nimport {LiteralConstructsController, LiteralConstructMethod} from '../LiteralConstructsController';\nimport {BaseMethod} from '../methods/_Base';\nimport {MethodModule} from '../methods/_Module';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\nimport lodash_isString from 'lodash/isString';\n\n// import {JsepsByString} from '../DependenciesController'\nimport jsep from 'jsep';\n\n// import {Vector3} from 'three/src/math/Vector3'\ntype LiteralConstructDictionary = Dictionary<LiteralConstructMethod>;\ntype AnyDictionary = Dictionary<any>;\n\nconst NATIVE_MATH_METHODS = [\n\t'abs',\n\t'acos',\n\t'acosh',\n\t'asin',\n\t'asinh',\n\t'atan',\n\t'atan2',\n\t'atanh',\n\t'ceil',\n\t'cos',\n\t'cosh',\n\t'exp',\n\t'expm1',\n\t'floor',\n\t'log',\n\t'log1p',\n\t'log2',\n\t'log10',\n\t'max',\n\t'min',\n\t'pow',\n\t'round',\n\t'sign',\n\t'sin',\n\t'sinh',\n\t'sqrt',\n\t'tan',\n\t'tanh',\n];\nconst NATIVE_ES6_MATH_METHODS = ['cbrt', 'hypot', 'log10', 'trunc'];\nconst NATIVE_MATH_METHODS_RENAMED: AnyDictionary = {\n\tmath_random: 'random',\n};\nconst CORE_MATH_METHODS = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'];\nimport {Easing} from '../../../core/math/Easing';\nconst EASING_METHODS = Object.keys(Easing);\n\nconst CORE_STRING_METHODS = ['precision'];\nconst NATIVE_MATH_CONSTANTS = ['E', 'LN2', 'LN10', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];\n\nconst DIRECT_EXPRESSION_FUNCTIONS: AnyDictionary = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nNATIVE_ES6_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n\tconst remaped = NATIVE_MATH_METHODS_RENAMED[name];\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.String.${name}`;\n});\n\nconst LITERAL_CONSTRUCT: LiteralConstructDictionary = {\n\tif: LiteralConstructsController.if,\n};\n\nconst GLOBAL_CONSTANTS: Dictionary<string> = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n\tGLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\n\nconst INDIRECT_EXPRESSION_METHODS: AnyDictionary = MethodModule;\n\n// const NODE_TYPE_METHODS = {\n// \tCallExpression: 'setup_graph_call_expression',\n// \tMemberExpression: 'setup_graph_member_expression',\n// \tBinaryExpression: 'setup_graph_binary_expression',\n// \tUnaryExpression: 'setup_graph_unary_expression',\n// \tLogicalExpression: 'setup_graph_logical_expression',\n// \tLiteral: 'setup_graph_literal',\n// \tIdentifier: 'setup_graph_identifier'\n// };\n//\n\n// const IDENTIFIER_METHODS = {\n// \t'$F': '_setup_graph_identifier_as_global_frame'\n// }\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = ', ';\nconst ATTRIBUTE_PREFIX = '@';\nimport {VARIABLE_PREFIX} from './_Base';\n\nconst PROPERTY_OFFSETS: AnyDictionary = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n\nimport {BaseTraverser} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {AttributeRequirementsController} from '../AttributeRequirementsController';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreString} from '../../../core/String';\n\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nexport class FunctionGenerator extends BaseTraverser {\n\tprivate function: Function | undefined;\n\t// private function_pre_entities_loop_lines: string[] = [];\n\tprivate _attribute_requirements_controller = new AttributeRequirementsController();\n\t// private function_pre_body:string\n\tprivate function_main_string: string | undefined;\n\tprivate methods: BaseMethod[] = [];\n\tprivate method_index: number = -1;\n\n\tpublic method_dependencies: MethodDependency[] = [];\n\tpublic immutable_dependencies: CoreGraphNode[] = [];\n\t// public jsep_dependencies: JsepDependency[] = []\n\t// public jsep_nodes_by_missing_paths: JsepsByString = {}\n\n\t// private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tpublic parse_tree(parsed_tree: ParsedTree) {\n\t\tthis.reset();\n\n\t\tif (parsed_tree.error_message == null) {\n\t\t\ttry {\n\t\t\t\t// this.function_pre_entities_loop_lines = [];\n\t\t\t\tthis._attribute_requirements_controller.reset();\n\t\t\t\t// this.function_pre_body = ''\n\t\t\t\tif (parsed_tree.node) {\n\t\t\t\t\tconst function_main_string = this.traverse_node(parsed_tree.node);\n\t\t\t\t\tif (function_main_string && !this.is_errored) {\n\t\t\t\t\t\tthis.function_main_string = function_main_string;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('no parsed_tree.node');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`error in expression for param ${this.param.full_path()}`);\n\t\t\t\tconsole.warn(e);\n\t\t\t}\n\n\t\t\tif (this.function_main_string) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.function = new AsyncFunction(\n\t\t\t\t\t\t'Core',\n\t\t\t\t\t\t'param',\n\t\t\t\t\t\t'methods',\n\t\t\t\t\t\t'_set_error_from_error',\n\t\t\t\t\t\t`\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${this.function_body()}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\tthis.set_error('cannot generate function');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.set_error('cannot generate function body');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse expression');\n\t\t}\n\t}\n\n\treset() {\n\t\tsuper.reset();\n\t\tthis.function_main_string = undefined;\n\t\tthis.methods = [];\n\t\tthis.method_index = -1;\n\t\tthis.function = undefined;\n\t\tthis.method_dependencies = [];\n\t\tthis.immutable_dependencies = [];\n\t}\n\n\tfunction_body() {\n\t\tif (this.param.options.is_expression_for_entities) {\n\t\t\treturn `\n\t\t\tconst entities = param.expression_controller.entities;\n\t\t\tif(entities){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\tlet entity;\n\t\t\t\t\tconst entity_callback = param.expression_controller.entity_callback;\n\t\t\t\t\t${this._attribute_requirements_controller.assign_attributes_lines()}\n\t\t\t\t\tif( ${this._attribute_requirements_controller.attribute_presence_check_line()} ){\n\t\t\t\t\t\t${this._attribute_requirements_controller.assign_arrays_lines()}\n\t\t\t\t\t\tfor(let index=0; index < entities.length; index++){\n\t\t\t\t\t\t\tentity = entities[index];\n\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\tentity_callback(entity, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = new Error('attribute not found')\n\t\t\t\t\t\t_set_error_from_error(error)\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n\t\t} else {\n\t\t\treturn `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\ttry {\n\t\t\t\t\tconst value = ${this.function_main_string}\n\t\t\t\t\tresolve(value)\n\t\t\t\t} catch(e) {\n\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\treject()\n\t\t\t\t}\n\t\t\t})\n\t\t\t`;\n\t\t}\n\t}\n\n\teval_allowed(): boolean {\n\t\treturn this.function != null;\n\t}\n\teval_function() {\n\t\t// this.param.entity_attrib_values = this.param.entity_attrib_values || {}\n\t\t// this.param.entity_attrib_values.position =\n\t\t// \tthis.param.entity_attrib_values.position || new THREE.Vector3()\n\t\tif (this.function) {\n\t\t\tthis.clear_error();\n\n\t\t\tconst Core = {\n\t\t\t\tMath: CoreMath,\n\t\t\t\tString: CoreString,\n\t\t\t};\n\t\t\tconst result = this.function(Core, this.param, this.methods, this._set_error_from_error_bound);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TRAVERSE METHODS\n\t//\n\t//\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string | undefined {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst callee = node.callee as jsep.Identifier;\n\t\tconst method_name = callee.name;\n\t\tif (method_name) {\n\t\t\t// literal construct (if...)\n\t\t\tconst literal_contruct = LITERAL_CONSTRUCT[method_name];\n\t\t\tif (literal_contruct) {\n\t\t\t\treturn literal_contruct(method_arguments);\n\t\t\t}\n\n\t\t\t// direct expressions (Math.floor, Math.sin...)\n\t\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\t\t\tconst direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n\t\t\tif (direct_function_name) {\n\t\t\t\treturn `${direct_function_name}(${arguments_joined})`;\n\t\t\t}\n\n\t\t\t// indirect methods (points_count, asset...)\n\t\t\tconst indirect_method = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\t\tif (indirect_method) {\n\t\t\t\tconst path_node = node.arguments[0];\n\t\t\t\t// const path_argument = this.string_generator.traverse_node(path_node)\n\t\t\t\tconst function_string = `return ${method_arguments[0]}`;\n\t\t\t\tlet path_argument_function;\n\t\t\t\tlet path_argument = [];\n\t\t\t\ttry {\n\t\t\t\t\tpath_argument_function = new Function(function_string);\n\t\t\t\t\tpath_argument = path_argument_function();\n\t\t\t\t} catch {\n\t\t\t\t\t// path_argument_function = new AsyncFunction(function_string)\n\t\t\t\t\t// it looks like if the input contains an await,\n\t\t\t\t\t// it is because it has been generated by another indirect function.\n\t\t\t\t\t// This means that the dependencies have been generated already\n\t\t\t\t\t// so we may not need to do it now\n\t\t\t\t}\n\n\t\t\t\tthis._create_method_and_dependencies(method_name, path_argument, path_node);\n\t\t\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_error(`unknown method: ${method_name}`);\n\t}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\tif (node.operator === ATTRIBUTE_PREFIX) {\n\t\t\tlet argument = node.argument;\n\t\t\tlet attribute_name;\n\t\t\tlet property;\n\t\t\tswitch (argument.type) {\n\t\t\t\tcase 'Identifier': {\n\t\t\t\t\tconst argument_identifier = (<unknown>argument) as jsep.Identifier;\n\t\t\t\t\tattribute_name = argument_identifier.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'MemberExpression': {\n\t\t\t\t\tconst argument_member_expression = (<unknown>argument) as jsep.MemberExpression;\n\t\t\t\t\tconst attrib_node = argument_member_expression.object as jsep.Identifier;\n\t\t\t\t\tconst property_node = argument_member_expression.property as jsep.Identifier;\n\t\t\t\t\tattribute_name = attrib_node.name;\n\t\t\t\t\tproperty = property_node.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// this.function_pre_body += `\n\t\t\t// param.entity_attrib_value(${QUOTE}${attrib_node.name}${QUOTE}, param.entity_attrib_values.position);\n\t\t\t// `\n\t\t\tif (attribute_name) {\n\t\t\t\tattribute_name = CoreAttribute.remap_name(attribute_name);\n\t\t\t\tif (attribute_name == 'ptnum') {\n\t\t\t\t\treturn '((entity != null) ? entity.index : 0)';\n\t\t\t\t} else {\n\t\t\t\t\tconst var_attribute_size = this._attribute_requirements_controller.var_attribute_size(\n\t\t\t\t\t\tattribute_name\n\t\t\t\t\t);\n\t\t\t\t\tconst var_array = this._attribute_requirements_controller.var_array(attribute_name);\n\t\t\t\t\tthis._attribute_requirements_controller.add(attribute_name);\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tconst property_offset = PROPERTY_OFFSETS[property];\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}+${property_offset}]`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn('attribute not found');\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t\t}\n\t}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string | undefined {\n\t\tconst identifier_first_char = node.name[0];\n\t\tif (identifier_first_char == VARIABLE_PREFIX) {\n\t\t\tconst identifier_name_without_dollar_sign = node.name.substr(1);\n\n\t\t\t// globals constants: Math.PI or Math.E\n\t\t\tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n\t\t\tif (direct_constant_name) {\n\t\t\t\treturn direct_constant_name;\n\t\t\t}\n\n\t\t\t// scene or node globals: $F, $FPS, $T, $CH, $OS\n\t\t\tconst method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n\t\t\tconst method = (this as any)[method_name];\n\t\t\tif (method) {\n\t\t\t\treturn (this as any)[method_name]();\n\t\t\t} else {\n\t\t\t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn node.name; // @ptnum will call this method and return \"ptnum\"\n\t\t}\n\t}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\tprotected traverse_Identifier_F(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.frame`;\n\t}\n\tprotected traverse_Identifier_FPS(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.fps`;\n\t}\n\tprotected traverse_Identifier_T(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.time`;\n\t}\n\tprotected traverse_Identifier_CH(): string {\n\t\treturn `${QUOTE}${this.param.name}${QUOTE}`;\n\t}\n\tprotected traverse_Identifier_CEX(): string {\n\t\treturn this._method_centroid('x');\n\t}\n\tprotected traverse_Identifier_CEY(): string {\n\t\treturn this._method_centroid('y');\n\t}\n\tprotected traverse_Identifier_CEZ(): string {\n\t\treturn this._method_centroid('z');\n\t}\n\t// TODO:\n\t// '$OS': '_eval_identifier_as_node_name',\n\t// '$BBX': '_eval_identifier_as_bounding_box_relative',\n\n\tprivate _method_centroid(component: string): string {\n\t\tconst method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n\t\tconst arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n\t\tthis._create_method_and_dependencies('centroid', 0);\n\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t}\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\tprivate _create_method_and_dependencies(\n\t\tmethod_name: string,\n\t\tpath_argument: number | string,\n\t\tpath_node?: jsep.Expression\n\t) {\n\t\tconst method_constructor = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\tconst method = new method_constructor(this.param) as BaseMethod;\n\t\tthis.method_index += 1;\n\t\tthis.methods[this.method_index] = method;\n\n\t\tconst method_dependency = method.find_dependency(path_argument);\n\t\tif (method_dependency) {\n\t\t\tif (path_node) {\n\t\t\t\tmethod_dependency.set_jsep_node(path_node);\n\t\t\t}\n\t\t\tthis.method_dependencies.push(method_dependency);\n\t\t} else {\n\t\t\tif (path_node && lodash_isString(path_argument)) {\n\t\t\t\tthis.param.scene.missing_expression_references_controller.register(\n\t\t\t\t\tthis.param,\n\t\t\t\t\tpath_node,\n\t\t\t\t\tpath_argument\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t// method_dependencies.resolved_graph_nodes.forEach((graph_node)=>{\n\t\t// \tif(path_node){\n\t\t// \t\tconst jsep_dependency = new JsepDependency(graph_node, path_node)\n\t\t// \t\tthis.jsep_dependencies.push(jsep_dependency)\n\t\t// \t} else {\n\t\t// \t\tthis.immutable_dependencies.push(graph_node)\n\t\t// \t}\n\n\t\t// })\n\n\t\t// if(path_node){\n\t\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(path_node)\n\t\t// \t})\n\t\t// }\n\t}\n}\n","export type LiteralConstructMethod = (args: any[]) => string\n\nexport class LiteralConstructsController {\n\tstatic if(args: any[]): string {\n\t\tconst condition = args[0]\n\t\tconst val_true = args[1]\n\t\tconst val_false = args[2]\n\t\treturn `(${condition}) ? (${val_true}) : (${val_false})`\n\t}\n}\n","// TODO: create an expression object that knows how many args it can accept, their type\n// and can throw an error and give it to the param, and then to the node\n// TODO: the expression should know how to update the node dependencies\n\n// import abs from './abs'\n// import {Asset} from './asset'\nimport {Bbox} from './bbox';\n// import ceil from './ceil'\nimport {Centroid} from './centroid';\nimport {Ch} from './ch';\nimport {Copy} from './copy';\nimport {CopRes} from './cop_res';\n// import clamp from './clamp'\n// import {Easein} from './easein'\n// import {Easeinout} from './easeinout'\n// import floor from './floor'\n// import humanize from './humanize'\nimport {Local} from './local';\n// import if_ from './if'\n// import max from './max'\n// import min from './min'\nimport {Opdigits} from './opdigits';\n// import object from './object'\n// import objects_count from './objects_count'\n// import objects_visible_count from './objects_visible_count'\nimport {Point} from './point';\nimport {PointsCount} from './points_count';\n// import {Precision} from './precision'\n// import rand from './rand'\n// import round from './round'\n// import sign from './sign'\nimport {StrCharsCount} from './str_chars_count';\nimport {StrConcat} from './str_concat';\nimport {StrIndex} from './str_index';\nimport {StrSub} from './str_sub';\n\nexport const MethodModule = {\n\t// 'asset': Asset,\n\tbbox: Bbox,\n\tch: Ch,\n\tcentroid: Centroid,\n\tcop_res: CopRes,\n\tlocal: Local,\n\topdigits: Opdigits,\n\tpoint: Point,\n\tpoints_count: PointsCount,\n\t// 'precision': Precision,\n\tcopy: Copy,\n\tstr_chars_count: StrCharsCount,\n\tstr_concat: StrConcat,\n\tstr_index: StrIndex,\n\tstr_sub: StrSub,\n};\n\n// import cos from './cos'\n// import sin from './sin'\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {GeometryContainer} from '../../containers/Geometry';\n\n// import Walker from 'src/core/Walker';\n\ninterface BoxComponents {\n\tmin: Vector3;\n\tmax: Vector3;\n\tsize: Vector3;\n\tcenter: Vector3;\n}\n\nconst VECTOR_NAMES: Array<keyof BoxComponents> = ['min', 'max', 'size', 'center'];\nconst COMPONENT_NAMES = ['x', 'y', 'z'];\n\nexport class Bbox extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'vector name, min, max, size or center'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\tlet value = 0;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst vector_name = args[1];\n\t\t\t\tconst component_name = args[2];\n\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tvalue = this._get_value_from_container(container, vector_name, component_name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _get_value_from_container(\n\t\tcontainer: GeometryContainer,\n\t\tvector_name: keyof BoxComponents,\n\t\tcomponent_name: keyof Vector3Like\n\t) {\n\t\tif (VECTOR_NAMES.indexOf(vector_name) >= 0) {\n\t\t\tconst bbox = container.bounding_box();\n\n\t\t\tlet vector = new Vector3();\n\t\t\tswitch (vector_name) {\n\t\t\t\tcase 'size':\n\t\t\t\t\tbbox.getSize(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\tbbox.getCenter(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvector = bbox[vector_name];\n\t\t\t}\n\n\t\t\tif (COMPONENT_NAMES.indexOf(component_name) >= 0) {\n\t\t\t\t//(value = vector[component_name])?\n\t\t\t\treturn vector[component_name];\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import BaseNode from 'src/engine/nodes/_Base'\nimport {DecomposedPath} from '../../core/DecomposedPath';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\nimport {BaseParamType} from '../params/_Base';\n// import {CoreObject} from '../../core/Object';\nimport {BaseNodeType} from '../nodes/_Base';\nimport jsep from 'jsep';\n\nexport class MethodDependency extends CoreGraphNode {\n\tpublic jsep_node: jsep.Expression | undefined;\n\tpublic resolved_graph_node: CoreGraphNode | undefined;\n\tpublic unresolved_path: string | undefined;\n\tprivate _update_from_name_change_bound = this._update_from_name_change.bind(this);\n\n\tconstructor(\n\t\tpublic param: BaseParamType,\n\t\tpublic path_argument: number | string,\n\t\tpublic decomposed_path?: DecomposedPath\n\t) {\n\t\tsuper(param.scene, 'MethodDependency');\n\n\t\t// this.set_scene(this.param.scene);\n\n\t\tthis.add_post_dirty_hook('_update_from_name_change', this._update_from_name_change_bound);\n\t}\n\t_update_from_name_change(trigger?: CoreGraphNode) {\n\t\tif (trigger && this.decomposed_path) {\n\t\t\tconst node = trigger as BaseNodeType;\n\t\t\tthis.decomposed_path.update_from_name_change(node);\n\t\t\tconst new_path = this.decomposed_path.to_path();\n\n\t\t\tconst literal = this.jsep_node as jsep.Literal;\n\t\t\tif (literal) {\n\t\t\t\tliteral.value = `${literal.value}`.replace(`${this.path_argument}`, new_path);\n\t\t\t\tliteral.raw = literal.raw.replace(`${this.path_argument}`, new_path);\n\t\t\t}\n\t\t\tif (this.param.expression_controller) {\n\t\t\t\tthis.param.expression_controller.update_from_method_dependency_name_change();\n\t\t\t}\n\t\t}\n\t}\n\treset() {\n\t\tthis.graph_disconnect_predecessors();\n\t}\n\n\tlisten_for_name_changes() {\n\t\tif (this.jsep_node && this.decomposed_path) {\n\t\t\tthis.decomposed_path.named_nodes.forEach((node_in_path) => {\n\t\t\t\tif (node_in_path) {\n\t\t\t\t\tconst node = node_in_path as BaseNodeType;\n\t\t\t\t\tif (node.name_controller) {\n\t\t\t\t\t\tthis.add_graph_input(node.name_controller.graph_node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tset_jsep_node(jsep_node: jsep.Expression) {\n\t\tthis.jsep_node = jsep_node;\n\t}\n\tset_resolved_graph_node(node: CoreGraphNode) {\n\t\tthis.resolved_graph_node = node;\n\t}\n\tset_unresolved_path(path: string) {\n\t\tthis.unresolved_path = path;\n\t}\n\n\tstatic create(\n\t\tparam: BaseParamType,\n\t\tindex_or_path: number | string,\n\t\tnode: CoreGraphNode,\n\t\tdecomposed_path?: DecomposedPath\n\t) {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\n\t\t// if(!decomposed_path){\n\t\t// \tconsole.log('nodes_in_path', decomposed_path.named_nodes);\n\t\t// \tfor (let node_in_path of decomposed_path.named_nodes) {\n\t\t// \t\tif (node_in_path) {\n\t\t// \t\t\tdecomposed_path.add_node(node_in_path.name, node_in_path);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst instance = new MethodDependency(param, index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\tinstance.set_resolved_graph_node(node);\n\t\t} else {\n\t\t\tif (!is_index) {\n\t\t\t\tconst path = index_or_path as string;\n\t\t\t\tinstance.set_unresolved_path(path);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {GeometryContainer} from '../../containers/Geometry';\n\nexport class Centroid extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// const path = args\n\t\t\t// this.get_referenced_param(path).eval_p().then(val=>{\n\t\t\t// \tresolve(val)\n\t\t\t// })\n\t\t\tif (args.length == 2) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst component_name = args[1] as keyof Vector3Like;\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst bbox = container.bounding_box();\n\t\t\t\t\tconst center = bbox.min\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.add(bbox.max)\n\t\t\t\t\t\t.multiplyScalar(0.5);\n\n\t\t\t\t\tconst value = center[component_name];\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// throw \"only component names are x, y and z\";\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t\t// return this._get_param_value(args[0], args[1], callback);\n\t}\n\n\t// _get_param_value(index_or_path, component_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tlet value;\n\t// \t\tconst bbox = container.bounding_box();\n\t// \t\tconst size = bbox.min.clone().add(bbox.max).multiplyScalar(0.5);\n\n\t// \t\tif ((value = size[component_name]) != null) {\n\t// \t\t\treturn callback(value);\n\t// \t\t} else {\n\t// \t\t\tthrow \"only component names are x, y and z\";\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","// import lodash_isNumber from 'lodash/isNumber';\n\nimport {BaseMethod} from './_Base';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\n\nexport class Ch extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to param']];\n\t}\n\n\t// dependencies(args: any[]): any[]{\n\t// \tconst path = args[0]\n\t// \treturn [this.get_referenced_param(path)]\n\t// }\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst param = this.get_referenced_param(index_or_path as string, decomposed_path);\n\t\tif (param) {\n\t\t\treturn this.create_dependency(param, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('could not find param');\n\t\t}\n\t\treturn null;\n\t\t// const reference_search_result = new ReferenceSearchResult()\n\t\t// const param = this.get_referenced_param(index_or_path)\n\t\t// if(param){\n\t\t// \treference_search_result.set_found_graph_nodes([param])\n\t\t// } else {\n\t\t// \treference_search_result.set_missing_paths([path])\n\t\t// }\n\n\t\t// return reference_search_result\n\t}\n\t// find_dependencies(index_or_path: number|string): MethodDependency{\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<any> {\n\t\tlet val: any = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst path = args[0];\n\t\t\tconst ref = this.get_referenced_param(path);\n\t\t\tif (ref) {\n\t\t\t\tawait ref.compute();\n\t\t\t\tconst result = ref.value;\n\t\t\t\tif (result != null) {\n\t\t\t\t\t// if (lodash_isNumber(result)) {\n\t\t\t\t\tval = result;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn val;\n\t}\n\n\t// _get_param_value(path, callback){\n\t// \treturn this.get_referenced_param(path).eval(val=> {\n\t// \t\treturn callback(val);\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {CoreWalker} from '../../../core/Walker';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class Copy extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to copy'],\n\t\t\t['integer', 'default value'],\n\t\t];\n\t}\n\tstatic optional_arguments() {\n\t\treturn [['string', 'attribute name (optional)']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path) as BaseNodeType;\n\t\t// I'd prefer testing with if(node instanceof CopySopNode)\n\t\t// but tslib generates an error when doing so\n\t\tif (node && node.type == 'copy') {\n\t\t\tconst stamp_node = (node as CopySopNode).stamp_node;\n\t\t\treturn this.create_dependency(stamp_node, index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\t// \t// return this.find_node_dependency_from_index_or_path(index_or_path)\n\t// \tconst node = this.find_dependency_from_index_or_path(index_or_path)\n\t// \treturn this.create_search_result(stamp_node, index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 2 || args.length == 3) {\n\t\t\t\tconst path = args[0];\n\t\t\t\tconst default_value = args[1];\n\t\t\t\tconst attribute_name = args[2];\n\n\t\t\t\tconst node = CoreWalker.find_node(this.node, path);\n\n\t\t\t\tlet value;\n\t\t\t\tif (node && node.type == 'copy') {\n\t\t\t\t\tvalue = (node as CopySopNode).stamp_value(attribute_name);\n\t\t\t\t}\n\t\t\t\t// if (node && node instanceof CopySopNode) {\n\t\t\t\t// \tvalue = node.stamp_value(attribute_name);\n\t\t\t\t// }\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = default_value;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\t// update_dependencies() {\n\t// \treturn this.jsep_node()._graph_node.add_graph_input( this.copy_sop.stamp_node() );\n\t// }\n\n\t// process_arguments(args, callback){\n\t// \tconst path = args[0];\n\t// \tconst default_value = args[1];\n\t// \tconst attribute_name = args[2];\n\n\t// \tthis.copy_sop = Walker.find_node(this.node(), path);\n\t// \tlet value = (this.copy_sop != null) ?\n\t// \t\tthis.copy_sop.stamp_value(attribute_name) : undefined;\n\n\t// \tif (value == null) { value = default_value; }\n\n\t// \treturn callback(value);\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {TextureContainer} from '../../containers/Texture';\n\nexport class CopRes extends BaseMethod {\n\t// cop_res(0, 'x')\n\t// cop_res('../REF_bbox', 'x')\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name: x or y'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 2) {\n\t\t\tconst index_or_path = args[0];\n\t\t\tconst component_name = args[1];\n\t\t\tconst container = (await this.get_referenced_node_container(index_or_path)) as TextureContainer;\n\n\t\t\tif (container) {\n\t\t\t\tconst resolution = container.resolution();\n\t\t\t\tif ([0, '0', 'x'].includes(component_name)) {\n\t\t\t\t\tvalue = resolution[0];\n\t\t\t\t} else {\n\t\t\t\t\tif ([1, '1', 'y'].includes(component_name)) {\n\t\t\t\t\t\tvalue = resolution[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {POLY} from '../../Poly';\n\nexport class Local extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path']];\n\t}\n\n\tprocess_arguments(args: any[]): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.request_asset_url(args[0]).then((url) => {\n\t\t\t\tresolve(url);\n\t\t\t});\n\t\t});\n\t}\n\t// find_dependency(index_or_path: number | string): MethodDependency {\n\t// \treturn null\n\t// }\n\n\t// TODO: add error management\n\trequest_asset_url(name: string): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// const scene = this.node.scene()\n\t\t\t// const scene_uuid = scene.uuid();\n\n\t\t\tlet url;\n\n\t\t\tif (POLY.desktop_controller().active()) {\n\t\t\t\tPOLY.desktop_controller().add_local_path(name, this.param);\n\t\t\t\turl = POLY.desktop_controller().local_path_server_url(name);\n\t\t\t\tresolve(url);\n\t\t\t} else {\n\t\t\t\treturn resolve('');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {CoreString} from '../../../core/String';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class Opdigits extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst graph_node = this.find_referenced_graph_node(index_or_path);\n\t\tif (graph_node) {\n\t\t\tconst node = graph_node as BaseNodeType;\n\t\t\tif (node.name_controller) {\n\t\t\t\tconst name_node = node.name_controller.graph_node;\n\t\t\t\treturn this.create_dependency(name_node, index_or_path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t\t// return [this.create_dependency_from_index_or_path(index_or_path)]\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\n\t// \t// TODO: ensure the dependency update works for space params when they get renamed\n\t// \tconsole.log(node)\n\t// \tconst name_node = node.name_graph_node()\n\t// \treturn this.create_search_result(name_node, index_or_path)\n\t// \t// return this.create_reference_search_result_from_index_or_path(index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst node = this.get_referenced_node(index_or_path);\n\t\t\t\tif (node) {\n\t\t\t\t\tconst name = node.name;\n\t\t\t\t\tconst value = CoreString.tail_digits(name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group'\n\nexport class Point extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['index', 'point index'],\n\t\t\t['string', 'attribute name'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst attrib_name = args[1];\n\t\t\t\tconst point_index = args[2];\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = this._get_value_from_container(container, attrib_name, point_index);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\t_get_value_from_container(container: GeometryContainer, attrib_name: string, point_index: number) {\n\t\tconst core_group = container.core_content();\n\t\t// TODO: optimise and store the group_wrapper in the json_node\n\t\tif (core_group) {\n\t\t\tconst point = core_group.points()[point_index];\n\n\t\t\tif (point) {\n\t\t\t\treturn point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// _get_param_value(index_or_path, point_index, attrib_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tconst group = container.group({clone: false});\n\t// \t\tconst group_wrapper = new Core.Geometry.Group(group);\n\t// \t\t// TODO: optimise and store the group_wrapper in the json_node\n\t// \t\tconst point = group_wrapper.points()[point_index];\n\n\t// \t\tif (point != null) {\n\t// \t\t\tconst value = point.attrib_value(attrib_name);\n\t// \t\t\tif (value != null) {\n\t// \t\t\t\treturn callback(value);\n\t// \t\t\t} else {\n\t// \t\t\t\t//throw \"no attribute #{attrib_name} found\"\n\t// \t\t\t\tconsole.error(`no attribute ${attrib_name} found`);\n\t// \t\t\t\treturn callback(0);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`no point found with index ${point_index}`);\n\t// \t\t\treturn callback(0);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group';\n\nexport class PointsCount extends BaseMethod {\n\t// npoints(0)\n\t// npoints('../REF_bbox')\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tlet container: GeometryContainer;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = container.points_count();\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrCharsCount extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [['string', 'string to count characters of']];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst string = args[0];\n\t\t\tvalue = string.length;\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrConcat extends BaseMethod {\n\t// str_concat(1,2) => '12'\n\t// str_concat(1,\"a\") => '1a'\n\t// str_concat(\"a\",12, \"b\", \" \", 17) => 'a12b 17'\n\tstatic required_arguments(): any[] {\n\t\treturn [\n\t\t\t// ['string', 'string to get range from'],\n\t\t\t// ['integer', 'range start'],\n\t\t\t// ['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg == null) {\n\t\t\t\targ = '';\n\t\t\t}\n\t\t\tvalue += `${arg}`;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrIndex extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get index from'],\n\t\t\t['string', 'char to find index of'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = -1;\n\t\tif (args.length == 2) {\n\t\t\tconst string = args[0];\n\t\t\tconst sub_string = args[1];\n\t\t\tvalue = string.indexOf(sub_string);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrSub extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get range from'],\n\t\t\t['integer', 'range start'],\n\t\t\t['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): MethodDependency | null {\n\t// \treturn null;\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\t\tconst string = args[0];\n\t\tconst range_start = args[1] || 0;\n\t\tlet range_size = args[2] || 1;\n\t\tif (string) {\n\t\t\tvalue = string.substr(range_start, range_size);\n\t\t}\n\t\treturn value;\n\t}\n}\n","export class AttributeRequirementsController {\n\tprivate _attribute_names: Set<string> | undefined;\n\tconstructor() {}\n\n\treset() {\n\t\tif (this._attribute_names) {\n\t\t\tthis._attribute_names.clear();\n\t\t}\n\t}\n\tassign_attributes_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_attribute_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tassign_arrays_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_item_size_line(attribute_name));\n\t\t\t\tlines.push(AttributeRequirementsController.assign_array_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tattribute_presence_check_line(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst var_names: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tconst var_name = AttributeRequirementsController.var_attribute(attribute_name);\n\t\t\t\tvar_names.push(var_name);\n\t\t\t});\n\t\t\treturn var_names.join(' && ');\n\t\t} else {\n\t\t\treturn 'true';\n\t\t}\n\t}\n\n\tadd(attribute_name: string) {\n\t\tthis._attribute_names = this._attribute_names || new Set<string>();\n\t\tthis._attribute_names.add(attribute_name);\n\t}\n\n\tstatic assign_attribute_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\treturn `const ${var_attribute} = entities[0].geometry().attributes['${attribute_name}']`;\n\t}\n\tstatic assign_item_size_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_attribute_size = this.var_attribute_size(attribute_name);\n\t\treturn `const ${var_attribute_size} = ${var_attribute}.itemSize`;\n\t}\n\tstatic assign_array_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_array = this.var_array(attribute_name);\n\t\treturn `const ${var_array} = ${var_attribute}.array`;\n\t}\n\n\tstatic var_attribute(attribute_name: string) {\n\t\treturn `attrib_${attribute_name}`;\n\t}\n\tstatic var_attribute_size(attribute_name: string) {\n\t\treturn `attrib_size_${attribute_name}`;\n\t}\n\tstatic var_array(attribute_name: string) {\n\t\treturn `array_${attribute_name}`;\n\t}\n\tvar_attribute_size(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_attribute_size(attribute_name);\n\t}\n\tvar_array(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_array(attribute_name);\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {ParsedTree} from './ParsedTree';\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesControler} from './MissingReferencesController'\n\nconst ARGUMENTS_SEPARATOR = ', ';\n// const ATTRIBUTE_PREFIX = '@'\n// const VARIABLE_PREFIX = '$'\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n// interface JsepsByString {\n// \t[propName: string]: jsep.Expression[];\n// }\nimport {BaseTraverser} from './_Base';\n\nexport class ExpressionStringGenerator extends BaseTraverser {\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tparse_tree(parsed_tree: ParsedTree) {\n\t\tif (parsed_tree.error_message == null && parsed_tree.node) {\n\t\t\ttry {\n\t\t\t\treturn this.traverse_node(parsed_tree.node);\n\t\t\t} catch (e) {\n\t\t\t\tthis.set_error('could not traverse tree');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse tree');\n\t\t}\n\t}\n\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\n\t\tconst method_name = (node.callee as jsep.Identifier).name;\n\t\treturn `${method_name}(${arguments_joined})`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string {\n\t\treturn `${node.name}`;\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import {ParsedTree} from './Traverser/ParsedTree'\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\n// import {NodeSimple} from '../../core/graph/NodeSimple'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import {NamesListener} from './NamesListener'\nimport {MethodDependency} from './MethodDependency';\nimport jsep from 'jsep';\n\nexport interface JsepsByString {\n\t[propName: string]: jsep.Expression[];\n}\n\nexport class DependenciesController {\n\terror_message: string | undefined;\n\t// private references_controller: MissingReferencesController\n\tprivate cyclic_graph_detected: boolean = false;\n\t// private jsep_nodes_by_missing_paths: JsepsByString = {}\n\tprivate method_dependencies: MethodDependency[] = [];\n\n\t// private names_listeners: NamesListener[] = []\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this.references_controller = this.param.scene().missing_expression_references_controller\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t}\n\n\treset() {\n\t\tthis.param.graph_disconnect_predecessors();\n\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.reset();\n\t\t});\n\t\tthis.method_dependencies = [];\n\n\t\t// this.jsep_nodes_by_missing_paths = {}\n\t\t// const ref_ids = Object.keys(this.missing_expression_references_by_id)\n\t\t// ref_ids.forEach(ref_id=>{\n\t\t// \tconst ref = this.missing_expression_references_by_id[ref_id]\n\t\t// \tthis.references_controller.unregister(ref)\n\t\t// })\n\t\t// this.missing_expression_references_by_id = {}\n\n\t\t// this.names_listeners.forEach(names_listener=>{names_listener.reset()})\n\t}\n\n\tupdate(function_generator: FunctionGenerator) {\n\t\t// const immutable_dependencies = function_generator.immutable_dependencies\n\t\t// const jsep_dependencies = function_generator.jsep_dependencies\n\t\t// const jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\n\t\t// if(jsep_dependencies.length > 0){\n\t\t// \tconsole.log(\"connect_param_to_dependencies\", this.param.full_path())\n\t\t// }\n\n\t\tthis.cyclic_graph_detected = false;\n\n\t\tthis.connect_immutable_dependencies(function_generator);\n\t\tthis.method_dependencies = function_generator.method_dependencies;\n\t\tthis.handle_method_dependencies();\n\t\t// this.connect_missing_paths(function_generator)\n\n\t\tthis.listen_for_name_changes();\n\t}\n\n\tprivate connect_immutable_dependencies(function_generator: FunctionGenerator) {\n\t\tfunction_generator.immutable_dependencies.forEach((dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tif (this.param.add_graph_input(dependency) == false) {\n\t\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tprivate handle_method_dependencies() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tthis.handle_method_dependency(method_dependency);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handle_method_dependency(method_dependency: MethodDependency) {\n\t\tconst node_simple = method_dependency.resolved_graph_node;\n\n\t\tif (node_simple) {\n\t\t\t// this should update the jsep_node, and run the expression to string parser\n\t\t\t// when a name in the referenced nodes is updated\n\t\t\t// const names_listener = new NamesListener(this.param, node_simple, jsep_node)\n\t\t\t// TODO: test that it is no longer active if expression is updated\n\n\t\t\tif (!this.param.add_graph_input(node_simple)) {\n\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} // else {\n\t\t// const jsep_node = method_dependency.jsep_node\n\t\t//}\n\t}\n\n\tprivate listen_for_name_changes() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.listen_for_name_changes();\n\t\t});\n\t}\n\n\t// private connect_missing_paths(function_generator: FunctionGenerator){\n\n\t// \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\t// \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n\n\t// \tmissing_paths.forEach((missing_path)=>{\n\t// \t\tconst full_path = CoreWalker.make_absolute(this.param.node(), missing_path)\n\t// \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n\t// \t\tjsep_nodes.forEach(jsep_node=>{\n\t// \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, full_path)\n\n\t// \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n\t// \t\t})\n\t// \t})\n\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class ButtonParam extends TypedParam<ParamType.BUTTON> {\n\tstatic type() {\n\t\treturn ParamType.BUTTON;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BUTTON], val2: ParamValuesTypeMap[ParamType.BUTTON]) {\n\t\treturn true;\n\t}\n\tpress_button() {\n\t\tthis.options.execute_callback();\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {Color} from 'three/src/math/Color';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_COLOR = ['r', 'g', 'b'];\nexport class ColorParam extends TypedMultipleParam<ParamType.COLOR> {\n\tprotected _value = new Color();\n\tr!: FloatParam;\n\tg!: FloatParam;\n\tb!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.COLOR;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_COLOR;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.COLOR]) {\n\t\tif (raw_input instanceof Color) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.COLOR]\n\t) {\n\t\tif (raw_input1 instanceof Color) {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.r == raw_input2[0] && raw_input1.g == raw_input2[1] && raw_input1.b == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1[0] == raw_input2.r && raw_input1[1] == raw_input2.g && raw_input1[2] == raw_input2.b;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.COLOR], val2: ParamValuesTypeMap[ParamType.COLOR]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.r = this.components[0];\n\t\tthis.g = this.components[1];\n\t\tthis.b = this.components[2];\n\t}\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.r.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.g.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.b.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.r = this.r.raw_input;\n\t// \t\t\tthis._raw_input.g = this.g.raw_input;\n\t// \t\t\tthis._raw_input.b = this.b.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.r.raw_input, this.g.raw_input, this.b.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.r.raw_input;\n\t// \t\tthis._raw_input[1] = this.g.raw_input;\n\t// \t\tthis._raw_input[2] = this.b.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.r = this.r.value;\n\t\tthis._value.g = this.g.value;\n\t\tthis._value.b = this.b.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.COLOR]): Color | null {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\tif(input.length == 3){\n\t// \t\t\tif( input.filter(lodash_isNumber).length > 0 ){\n\t// \t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t}\n\t// \t\t\tif(first){\n\t// \t\t\t\tif(lodash_isNumber(first)){\n\t// \t\t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn new Color();\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class FolderParam extends TypedParam<ParamType.FOLDER> {\n\tstatic type() {\n\t\treturn ParamType.FOLDER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FOLDER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FOLDER], val2: ParamValuesTypeMap[ParamType.FOLDER]) {\n\t\treturn true;\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean'\n\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class IntegerParam extends TypedNumericParam<ParamType.INTEGER> {\n\tstatic type() {\n\t\treturn ParamType.INTEGER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.INTEGER], val2: ParamValuesTypeMap[ParamType.INTEGER]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn Math.round(raw_val);\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseInt(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tconst result = IntegerParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\n\nexport interface RampPointJson {\n\tposition: number;\n\tvalue: number;\n}\nexport interface RampValueJson {\n\tpoints: RampPointJson[];\n\tinterpolation: string;\n}\n\nexport class RampPoint {\n\tconstructor(private _position: number = 0, private _value: number = 0) {}\n\n\tto_json(): RampPointJson {\n\t\treturn {\n\t\t\tposition: this._position,\n\t\t\tvalue: this._value,\n\t\t};\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tcopy(point: RampPoint) {\n\t\tthis._position = point.position;\n\t\tthis._value = point.value;\n\t}\n\tclone() {\n\t\tconst point = new RampPoint();\n\t\tpoint.copy(this);\n\t\treturn point;\n\t}\n\tis_equal(other_point: RampPoint) {\n\t\treturn this._position == other_point.position && this._value == other_point.value;\n\t}\n\tis_equal_json(json: RampPointJson) {\n\t\treturn this._position == json.position && this._value == json.value;\n\t}\n\tfrom_json(json: RampPointJson) {\n\t\tthis._position = json.position;\n\t\tthis._value = json.value;\n\t}\n\tstatic are_equal_json(json1: RampPointJson, json2: RampPointJson) {\n\t\treturn json1.position == json2.position && json1.value == json2.value;\n\t}\n\tstatic from_json(json: RampPointJson) {\n\t\treturn new RampPoint(json.position, json.value);\n\t}\n}\n\nexport enum RampInterpolation {\n\tLINEAR = 'linear',\n}\nexport class RampValue {\n\tprivate _uuid: string;\n\n\tconstructor(private _interpolation: string = RampInterpolation.LINEAR, private _points: RampPoint[] = []) {\n\t\tthis._uuid = MathUtils.generateUUID();\n\t}\n\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\tget interpolation() {\n\t\treturn this._interpolation;\n\t}\n\tget points() {\n\t\treturn this._points;\n\t}\n\tstatic from_json(json: RampValueJson): RampValue {\n\t\tconst points = [];\n\t\tfor (let json_point of json.points) {\n\t\t\tpoints.push(RampPoint.from_json(json_point));\n\t\t}\n\t\treturn new RampValue(json.interpolation, points);\n\t}\n\tto_json(): RampValueJson {\n\t\treturn {\n\t\t\tinterpolation: this._interpolation,\n\t\t\tpoints: this._points.map((p) => p.to_json()),\n\t\t};\n\t}\n\tclone(): RampValue {\n\t\tconst ramp = new RampValue();\n\t\tramp.copy(this);\n\t\treturn ramp;\n\t}\n\tcopy(ramp: RampValue) {\n\t\tthis._interpolation = ramp.interpolation;\n\t\tlet index = 0;\n\t\tfor (let point of ramp.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.copy(point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(point.clone());\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n\n\tis_equal(other_ramp_value: RampValue): boolean {\n\t\tif (this._interpolation != other_ramp_value.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst other_points = other_ramp_value.points;\n\t\tif (this._points.length != other_points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = other_points[index];\n\t\t\tif (!point.is_equal(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn true;\n\t}\n\tis_equal_json(json: RampValueJson) {\n\t\tif (this._interpolation != json.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._points.length != json.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = json.points[index];\n\t\t\tif (!point.is_equal_json(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tstatic are_json_equal(json1: RampValueJson, json2: RampValueJson) {\n\t\tif (json1.interpolation != json2.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (json1.points.length != json2.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point1 of json1.points) {\n\t\t\tconst point2 = json2.points[index];\n\t\t\tif (!RampPoint.are_equal_json(point1, point2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tfrom_json(json: RampValueJson) {\n\t\tthis._interpolation = json.interpolation;\n\n\t\tlet index = 0;\n\t\tfor (let json_point of json.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.from_json(json_point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(RampPoint.from_json(json_point));\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class SeparatorParam extends TypedParam<ParamType.SEPARATOR> {\n\tstatic type() {\n\t\treturn ParamType.SEPARATOR;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.SEPARATOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.SEPARATOR],\n\t\tval2: ParamValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR2 = ['x', 'y'];\nexport class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {\n\tprotected _value = new Vector2();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR2;\n\t}\n\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR2;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number2;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector2) {\n\t// \t\treturn this._raw_input.toArray() as Number2;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number2;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]) {\n\t\tif (raw_input instanceof Vector2) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber2 = [raw_input[0], raw_input[1]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]\n\t) {\n\t\tif (raw_input1 instanceof Vector2) {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y;\n\t\t\t} else {\n\t\t\t\treturn raw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1];\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector2().fromArray(input);\n\t// \t}\n\t// \treturn new Vector2();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {FloatParam} from './Float';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_VECTOR3 = ['x', 'y', 'z'];\nexport class Vector3Param extends TypedMultipleParam<ParamType.VECTOR3> {\n\tprotected _value = new Vector3();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR3;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR3;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tif (raw_input instanceof Vector3) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR3]\n\t) {\n\t\tif (raw_input1 instanceof Vector3) {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1] && raw_input1.z == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y && raw_input1[2] == raw_input2.z;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR3], val2: ParamValuesTypeMap[ParamType.VECTOR3]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t}\n\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.x.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.y.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.z.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.x = this.x.raw_input;\n\t// \t\t\tthis._raw_input.y = this.y.raw_input;\n\t// \t\t\tthis._raw_input.z = this.z.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.x.raw_input;\n\t// \t\tthis._raw_input[1] = this.y.raw_input;\n\t// \t\tthis._raw_input[2] = this.z.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector3().fromArray(input);\n\t// \t}\n\t// \treturn new Vector3();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR4 = ['x', 'y', 'z', 'w'];\nexport class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {\n\tprotected _value = new Vector4();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tw!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR4;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR4;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number4;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector4) {\n\t// \t\treturn this._raw_input.toArray() as Number4;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber4 = [\n\t// \t\t\tthis._raw_input[0],\n\t// \t\t\tthis._raw_input[1],\n\t// \t\t\tthis._raw_input[2],\n\t// \t\t\tthis._raw_input[3],\n\t// \t\t];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number4;\n\t}\n\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR4]) {\n\t\tif (raw_input instanceof Vector4) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber4 = [raw_input[0], raw_input[1], raw_input[2], raw_input[3]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR4]\n\t) {\n\t\tif (raw_input1 instanceof Vector4) {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1.x == raw_input2[0] &&\n\t\t\t\t\traw_input1.y == raw_input2[1] &&\n\t\t\t\t\traw_input1.z == raw_input2[2] &&\n\t\t\t\t\traw_input1.w == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2.x &&\n\t\t\t\t\traw_input1[1] == raw_input2.y &&\n\t\t\t\t\traw_input1[2] == raw_input2.z &&\n\t\t\t\t\traw_input1[3] == raw_input2.w\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] &&\n\t\t\t\t\traw_input1[1] == raw_input2[1] &&\n\t\t\t\t\traw_input1[2] == raw_input2[2] &&\n\t\t\t\t\traw_input1[3] == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t\tthis.w = this.components[3];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t\tthis._value.w = this.w.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector4().fromArray(input);\n\t// \t}\n\t// \treturn new Vector4();\n\t// }\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsValueAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['value_type'];\n};\n\nexport class ParamsValueAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nexport class ProcessingContext {\n\tprivate _frame: number = 0;\n\tconstructor(node: BaseNodeType) {}\n\tcopy(src_context: ProcessingContext) {\n\t\tthis._frame = src_context.frame;\n\t}\n\tget frame() {\n\t\treturn this._frame;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nimport {ConnectionsController} from './ConnectionsController';\nimport {InputsController} from './InputsController';\nimport {OutputsController} from './OutputsController';\n\nexport class IOController<T extends BaseNodeType> {\n\tprotected _connections: ConnectionsController = new ConnectionsController(this.node);\n\tprotected _inputs: InputsController<T> | undefined;\n\tprotected _outputs: OutputsController<T> | undefined;\n\n\tconstructor(protected node: T) {}\n\n\t// add_connections_controller() {\n\t// \tthis._connections =\n\t// }\n\tget connections() {\n\t\treturn this._connections;\n\t}\n\n\t// inputs\n\t// init_inputs(options: InputsControllerOptions) {\n\t// \tthis.inputs.set_options(options);\n\t// }\n\tget inputs(): InputsController<T> {\n\t\treturn (this._inputs = this._inputs || new InputsController<T>(this.node));\n\t}\n\thas_inputs() {\n\t\treturn this._inputs != null;\n\t}\n\n\t// outputs\n\t// init_outputs() {\n\t// \tthis._outputs = this._outputs || new OutputsController(this.node);\n\t// }\n\tget outputs(): OutputsController<T> {\n\t\treturn (this._outputs = this._outputs || new OutputsController<T>(this.node));\n\t}\n\thas_outputs() {\n\t\treturn this._outputs != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport lodash_compact from 'lodash/compact';\nimport {NodeConnection} from './NodeConnection';\n\n// interface NodeConnectionByString {\n// \t[propName: string]: NodeConnection;\n// }\n// interface NodeConnectionByStringByString {\n// \t[propName: string]: NodeConnectionByString;\n// }\n\nexport class ConnectionsController {\n\tprivate _input_connections: Array<NodeConnection | undefined> | undefined;\n\tprivate _output_connections: Map<number, Map<number, NodeConnection>> = new Map();\n\n\tconstructor(protected _node: BaseNodeType) {}\n\n\tinit_inputs() {\n\t\tconst count = this._node.io.inputs.max_inputs_count;\n\t\tthis._input_connections = new Array(count);\n\t}\n\n\t//\n\t//\n\t// INPUT CONNECTIONS\n\t//\n\t//\n\tadd_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\t// if (connection.input_index < this._input_connections.length) {\n\t\t\tthis._input_connections[connection.input_index] = connection;\n\t\t\t// } else {\n\t\t\t// \tconsole.warn(`attempt to add an input connection at index ${connection.input_index}`);\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tremove_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\tif (connection.input_index < this._input_connections.length) {\n\t\t\t\tthis._input_connections[connection.input_index] = undefined;\n\t\t\t\t// if all connections after are also undefined, we can safely shrink the array\n\t\t\t\tlet all_connections_after_are_undefined = true;\n\t\t\t\tfor (let i = connection.input_index; i < this._input_connections.length; i++) {\n\t\t\t\t\tif (this._input_connections[i]) {\n\t\t\t\t\t\tall_connections_after_are_undefined = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (all_connections_after_are_undefined) {\n\t\t\t\t\tthis._input_connections = this._input_connections.slice(0, connection.input_index);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`attempt to remove an input connection at index ${connection.input_index}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tinput_connection(index: number): NodeConnection | undefined {\n\t\tif (this._input_connections) {\n\t\t\treturn this._input_connections[index];\n\t\t}\n\t}\n\tfirst_input_connection(): NodeConnection {\n\t\treturn lodash_compact(this._input_connections)[0];\n\t}\n\t// last_input_connection(): NodeConnection {\n\t// \tconst connections = lodash_compact(this._input_connections);\n\t// \treturn connections[connections.length - 1];\n\t// }\n\tinput_connections() {\n\t\treturn this._input_connections;\n\t}\n\n\t//\n\t//\n\t// OUTPUT CONNECTIONS\n\t//\n\t//\n\tadd_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (!connections_by_id) {\n\t\t\tconnections_by_id = new Map<number, NodeConnection>();\n\t\t\tthis._output_connections.set(output_index, connections_by_id);\n\t\t}\n\t\tconnections_by_id.set(id, connection);\n\t\t// this._output_connections[output_index] = this._output_connections[output_index] || {};\n\t\t// this._output_connections[output_index][id] = connection;\n\t}\n\tremove_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (connections_by_id) {\n\t\t\tconnections_by_id.delete(id);\n\t\t}\n\t\t// delete this._output_connections[output_index][id];\n\t}\n\n\toutput_connections() {\n\t\tlet list: NodeConnection[] = [];\n\n\t\tthis._output_connections.forEach((connections_by_id, output_index) => {\n\t\t\tconnections_by_id.forEach((connection, id) => {\n\t\t\t\tif (connection) {\n\t\t\t\t\tlist.push(connection);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t// Object.keys(this._output_connections).forEach((index) => {\n\t\t// \tconst connections_for_index = this._output_connections[index];\n\t\t// \tObject.keys(connections_for_index).forEach((id) => {\n\t\t// \t\tlist.push(connections_for_index[id]);\n\t\t// \t});\n\t\t// });\n\t\treturn list;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseContainer} from '../../../containers/_Base';\n// import lodash_includes from 'lodash/includes'\n// import lodash_filter from 'lodash/filter'\nimport lodash_each from 'lodash/each';\nimport lodash_isString from 'lodash/isString';\n// import lodash_compact from 'lodash/compact'\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport {NodeConnection} from './NodeConnection';\n\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {InputCloneMode} from '../../../poly/InputCloneMode';\nimport {TypeAssert} from '../../../poly/Assert';\n\n// export class InputGraphNode extends NodeSimple {\n// \tconstructor(name: string) {\n// \t\tsuper(name);\n// \t}\n// }\n\n// export interface InputsControllerOptions {\n// \tmin_inputs?: number;\n// \tmax_inputs?: number;\n// \tdepends_on_inputs?: boolean;\n// }\ntype OnUpdateHook = () => void;\n\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class InputsController<T extends BaseNodeType> {\n\tprivate _graph_node_inputs: CoreGraphNode[] = [];\n\tprivate _inputs: Array<T | null> = [];\n\tprivate _has_named_inputs: boolean = false;\n\t// _input_connections: NodeConnection[] = []\n\tprivate _named_input_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _min_inputs_count: number = 0;\n\tprivate _max_inputs_count: number = 0;\n\tprivate _depends_on_inputs: boolean = true;\n\n\t// hooks\n\tprivate _on_update_hooks: OnUpdateHook[] | undefined;\n\tprivate _on_update_hook_names: string[] | undefined;\n\n\t// clonable\n\tprivate _user_inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _override_clonable_state: boolean = false;\n\n\tconstructor(protected node: T) {\n\t\t//, options: InputsControllerOptions = {}) {\n\t\t// this.set_options(options);\n\t}\n\n\t// set_options(options: InputsControllerOptions) {\n\t// \tif (options['min_inputs']) {\n\t// \t\tthis.set_min_inputs_count(options['min_inputs']);\n\t// \t}\n\t// \tif (options['max_inputs']) {\n\t// \t\tthis.set_max_inputs_count(options['max_inputs']);\n\t// \t}\n\t// \tif (options['depends_on_inputs']) {\n\t// \t\tthis.set_depends_on_inputs(options['depends_on_inputs']);\n\t// \t}\n\t// }\n\n\t// _init_inputs() {\n\t// \tthis._inputs = [];\n\t// }\n\tset_depends_on_inputs(depends_on_inputs: boolean) {\n\t\tthis._depends_on_inputs = depends_on_inputs;\n\t}\n\tprivate set_min_inputs_count(min_inputs_count: number) {\n\t\tthis._min_inputs_count = min_inputs_count;\n\t}\n\t// min_inputs_count() {\n\t// \treturn this._min_inputs_count || 0;\n\t// }\n\tprivate set_max_inputs_count(max_inputs_count: number) {\n\t\tthis._max_inputs_count = max_inputs_count;\n\t\tthis.init_graph_node_inputs();\n\t}\n\n\tnamed_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let connection_point of this._named_input_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_inputs = true;\n\t\tthis._named_input_connection_points = connection_points;\n\t\tthis.set_min_inputs_count(0);\n\t\tthis.set_max_inputs_count(connection_points.length);\n\t\tthis.init_graph_node_inputs();\n\t\tthis.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n\t}\n\tget has_named_inputs() {\n\t\treturn this._has_named_inputs;\n\t}\n\tget named_input_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_input_connection_points || [];\n\t}\n\tprivate init_graph_node_inputs() {\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\tthis._graph_node_inputs[i] = this._graph_node_inputs[i] || this._create_graph_node_input(i);\n\t\t}\n\t}\n\tprivate _create_graph_node_input(index: number): CoreGraphNode {\n\t\tconst graph_input_node = new CoreGraphNode(this.node.scene, `input_${index}`);\n\t\t// graph_input_node.set_scene(this.node.scene);\n\t\tthis.node.add_graph_input(graph_input_node);\n\t\treturn graph_input_node;\n\t}\n\n\tget max_inputs_count(): number {\n\t\treturn this._max_inputs_count || 0;\n\t}\n\tinput_graph_node(input_index: number): CoreGraphNode {\n\t\treturn this._graph_node_inputs[input_index];\n\t}\n\n\t// set_count_to_zero() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(0);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\t// set_count_to_one_max() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(1);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\tset_count(min: number, max?: number) {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t}\n\t\tthis.set_min_inputs_count(min);\n\t\tthis.set_max_inputs_count(max);\n\n\t\tthis.init_inputs_clonable_state();\n\t\tthis.init_connections_controller_inputs();\n\t}\n\tprivate init_connections_controller_inputs() {\n\t\tthis.node.io.connections.init_inputs();\n\t}\n\t// requires_two_inputs: ->\n\t// \tthis.set_min_inputs_count(2)\n\t// \tthis.set_max_inputs_count(2)\n\n\t// requires_one_input() {\n\t// \treturn this._min_inputs_count > 0;\n\t// }\n\n\t// eval_required_inputs(callback){\n\t// \tconst containers = [];\n\t// \tif (this._max_inputs_count === 0) {\n\t// \t\treturn callback(containers);\n\t// \t} else {\n\t// \t\tconst existing_inputs = lodash_compact(this.inputs());\n\t// \t\tif (existing_inputs.length < this._min_inputs_count) {\n\t// \t\t\treturn this.self.set_error(\"inputs are missing\");\n\t// \t\t} else {\n\t// \t\t\t// const frame = this.self.context().frame();\n\t// \t\t\t// const full_path = this.self.full_path();\n\n\t// \t\t\tswitch (existing_inputs.length) {\n\t// \t\t\t\tcase 0:\n\t// \t\t\t\t\treturn callback(containers);\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container=> {\n\t// \t\t\t\t\t\tcontainers.push(container);\n\t// \t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t});\n\t// \t\t\t\tcase 2:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container0=> {\n\t// \t\t\t\t\t\treturn this.eval_required_input(1, container1=> {\n\t// \t\t\t\t\t\t\tcontainers.push(container0);\n\t// \t\t\t\t\t\t\tcontainers.push(container1);\n\t// \t\t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t});\n\t// \t\t\t\t\t// TODO: I could also here check if the inputs are dirty\n\t// \t\t\t\t\t// instead of going through the callback chain\n\t// \t\t\t\t\t// input_node0 = this.input(0)\n\t// \t\t\t\t\t// input_node0.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// input_node0.request_container (container0)=>\n\t// \t\t\t\t\t// \tinput_node1 = this.input(1)\n\t// \t\t\t\t\t// \tinput_node1.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// \tinput_node1.request_container (container1)=>\n\t// \t\t\t\t\t// \t\tcontainers.push(container0)\n\t// \t\t\t\t\t// \t\tcontainers.push(container1)\n\t// \t\t\t\t\t// \t\tcallback([container0, container1])\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(`${this.self.full_path()} inputs not evaluated`);\n\t// \t\t\t\t\treturn callback();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tasync eval_required_inputs_p() {\n\t\tlet containers: Array<BaseContainer | null> = [];\n\t\tif (this._max_inputs_count > 0) {\n\t\t\tconst existing_input_indices: number[] = [];\n\t\t\tthis.inputs().forEach((input, i) => {\n\t\t\t\tif (input) {\n\t\t\t\t\texisting_input_indices.push(i);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// const existing_inputs = lodash_compact(this.inputs());\n\t\t\tif (existing_input_indices.length < this._min_inputs_count) {\n\t\t\t\tthis.node.states.error.set('inputs are missing');\n\t\t\t} else {\n\t\t\t\tif (existing_input_indices.length > 0) {\n\t\t\t\t\tconst promises = existing_input_indices.map((input_index) => {\n\t\t\t\t\t\treturn this.node.io.inputs.eval_required_input(input_index);\n\t\t\t\t\t});\n\t\t\t\t\tcontainers = await Promise.all(promises);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containers;\n\t}\n\t// eval_required_input(input_index: number, callback){\n\t// \treturn this.self.request_input_container(input_index, container=> {\n\t// \t\t// we do not clone here, as we just check if a group is present\n\t// \t\tlet group;\n\t// \t\tif ((container != null) && ((group = container.object({clone: false})) != null)) {\n\t// \t\t\treturn callback(container);\n\t// \t\t} else {\n\t// \t\t\tconst input_node = this.input(input_index);\n\t// \t\t\tif (input_node != null) {\n\t// \t\t\t\tconst input_error_message = input_node.error_message();\n\t// \t\t\t\treturn this.self.set_error(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\tasync eval_required_input(input_index: number) {\n\t\tconst container = await this.node.container_controller.request_input_container(input_index);\n\t\t// we do not clone here, as we just check if a group is present\n\t\tif (container && container.core_content()) {\n\t\t\t// return container;\n\t\t} else {\n\t\t\tconst input_node = this.input(input_index);\n\t\t\tif (input_node) {\n\t\t\t\tconst input_error_message = input_node.states.error.message;\n\t\t\t\tif (input_error_message) {\n\t\t\t\t\tthis.node.states.error.set(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\t// protected _get_named_input_index_without_error(name: string): number {\n\t// \tconst connections = this.named_input_connections;\n\t// \tlet index = -1;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn index;\n\t// }\n\tget_named_input_index(name: string): number {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n\t\t\t\tif (this._named_input_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t\t// const index = this._get_named_input_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connections = this.named_input_connections;\n\t\t// \tconst available_names = connections.map((o) => o.name).join(', ');\n\t\t// \tconsole.log('named_input_connections', connections);\n\t\t// \tthrow new Error(\n\t\t// \t\t`${this.node.full_path()}: no inputs named '${name}'. available names are '${available_names}' (${\n\t\t// \t\t\tconnections.length\n\t\t// \t\t} inputs)`\n\t\t// \t);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_input_index(input_index_or_name: number | string): number {\n\t\tif (lodash_isString(input_index_or_name)) {\n\t\t\tif (this.has_named_inputs) {\n\t\t\t\treturn this.get_named_input_index(input_index_or_name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`node ${this.node.full_path()} has no named inputs`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn input_index_or_name;\n\t\t}\n\t}\n\n\tset_input(input_index_or_name: number | string, node: T | null, output_index_or_name: number | string = 0) {\n\t\tconst input_index = this.get_input_index(input_index_or_name) || 0;\n\t\tif (input_index < 0) {\n\t\t\tconst message = `invalid input (${input_index_or_name}) for node ${this.node.full_path()}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tlet output_index = 0;\n\t\tif (node) {\n\t\t\tif (node.io.outputs.has_named_outputs) {\n\t\t\t\t// if(node.has_named_output(output_index_or_name)){\n\t\t\t\toutput_index = node.io.outputs.get_output_index(output_index_or_name);\n\t\t\t\tif (output_index == null || output_index < 0) {\n\t\t\t\t\tconsole.warn(`node ${node.full_path()} does not have an output named ${output_index_or_name}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// this seems to prevent connecting output 1 from a vec to float to something else\n\t\t\t\t// } else {\n\t\t\t\t// \tconsole.warn(`${node.full_path()} has no output '${output_index_or_name}'`)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tconst graph_input_node = this._graph_node_inputs[input_index];\n\t\tif (graph_input_node == null) {\n\t\t\tconst message = `graph_input_node not found at index ${input_index}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tif (node && this.node.parent != node.parent) {\n\t\t\treturn;\n\t\t}\n\t\t// use the name if the node is either not defined or in another parent\n\t\t// const parent = this.self.parent()\n\t\t// if ((node == null) || (node.parent().graph_node_id !== parent.graph_node_id)) {\n\t\t// \tif (node_name != null) {\n\t\t// \t\tnode = parent.node(node_name);\n\t\t// \t}\n\t\t// }\n\n\t\tconst old_input_node = this._inputs[input_index];\n\t\tlet old_output_index: number | null = null;\n\t\tlet old_connection: NodeConnection | undefined = undefined;\n\t\tif (this.node.io.connections) {\n\t\t\told_connection = this.node.io.connections.input_connection(input_index);\n\t\t}\n\t\tif (old_connection) {\n\t\t\told_output_index = old_connection.output_index;\n\t\t}\n\n\t\tif (node !== old_input_node || output_index != old_output_index) {\n\t\t\t// TODO: test: add test to make sure this is necessary\n\t\t\tif (old_input_node != null) {\n\t\t\t\tif (this._depends_on_inputs) {\n\t\t\t\t\tgraph_input_node.remove_graph_input(old_input_node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node != null) {\n\t\t\t\tif (graph_input_node.add_graph_input(node)) {\n\t\t\t\t\t// we do test if we can create the graph connection\n\t\t\t\t\t// to ensure we are not in a cyclical graph,\n\t\t\t\t\t// but we delete it right after\n\t\t\t\t\tif (!this._depends_on_inputs) {\n\t\t\t\t\t\tgraph_input_node.remove_graph_input(node);\n\t\t\t\t\t}\n\n\t\t\t\t\t//this._input_connections[input_index] = new NodeConnection(node, this.self, output_index, input_index);\n\t\t\t\t\tif (old_connection) {\n\t\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t\t}\n\t\t\t\t\tthis._inputs[input_index] = node;\n\t\t\t\t\tnew NodeConnection(node, this.node, output_index, input_index);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`cannot connect ${node.full_path()} to ${this.node.full_path()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._inputs[input_index] = null;\n\t\t\t\tif (old_connection) {\n\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t}\n\t\t\t\t// this._input_connections[input_index] = null;\n\t\t\t}\n\n\t\t\tthis._run_on_set_input_hooks();\n\t\t\tgraph_input_node.set_successors_dirty();\n\t\t\t// this.node.set_dirty(node);\n\t\t\tthis.node.emit(NodeEvent.INPUTS_UPDATED);\n\t\t}\n\t}\n\n\tremove_input(node: T) {\n\t\tlodash_each(this.inputs(), (input, index) => {\n\t\t\tif (input != null && node != null) {\n\t\t\t\tif (input.graph_node_id === node.graph_node_id) {\n\t\t\t\t\tthis.set_input(index, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tinput(input_index: number): T | null {\n\t\treturn this._inputs[input_index];\n\t}\n\t// TODO: the named_input and named_output API really needs to change\n\tnamed_input(input_name: string): T | null {\n\t\tif (this.has_named_inputs) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._inputs[input_index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tnamed_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this.has_named_inputs && this._named_input_connection_points) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._named_input_connection_points[input_index];\n\t\t}\n\t}\n\thas_named_input(name: string): boolean {\n\t\treturn this.get_named_input_index(name) >= 0;\n\t}\n\thas_input(input_index: number): boolean {\n\t\treturn this._inputs[input_index] != null;\n\t}\n\tinputs() {\n\t\treturn this._inputs;\n\t}\n\n\t// outputs(): BaseNode[] {\n\t// \treturn lodash_filter(this.self.graph_successors(), successor=> {\n\t// \t\tif (successor.is_a(Node)) {\n\t// \t\t\treturn lodash_includes(successor.inputs(), this.self);\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// clonable states\n\toverride_clonable_state_allowed() {\n\t\tlet value = false;\n\t\tfor (let state of this.inputs_clonable_state()) {\n\t\t\tif (state == InputCloneMode.FROM_NODE) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\tinputs_clonable_state(): InputCloneMode[] {\n\t\treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n\t}\n\tinput_cloned(index: number): boolean {\n\t\treturn this.input_clonable_state_with_override(index);\n\t}\n\tinputs_clonable_state_with_override(): boolean[] {\n\t\tconst list = [];\n\t\tconst states = this.inputs_clonable_state();\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tlist.push(this.input_clonable_state_with_override(i));\n\t\t}\n\t\treturn list;\n\t}\n\tinput_clonable_state_with_override(index: number): boolean {\n\t\tconst states = this.inputs_clonable_state();\n\t\t// for (let i = 0; i < states.length; i++) {\n\t\t// TODO: typescript: not sure if this loop was justified\n\t\tconst state = states[index];\n\t\tswitch (state) {\n\t\t\tcase InputCloneMode.ALWAYS:\n\t\t\t\treturn true;\n\t\t\tcase InputCloneMode.NEVER:\n\t\t\t\treturn false;\n\t\t\tcase InputCloneMode.FROM_NODE:\n\t\t\t\treturn !this._override_clonable_state;\n\t\t\t// default:\n\t\t\t// \tthrow new Error('unsupported type');\n\t\t}\n\t\treturn TypeAssert.unreachable(state);\n\t\t// }\n\t}\n\n\tinit_inputs_clonable_state(values: InputCloneMode[] | null = null) {\n\t\tif (values) {\n\t\t\tthis._user_inputs_clonable_states = values;\n\t\t}\n\t\tthis._inputs_clonable_states = this._user_inputs_clonable_states || this._default_inputs_clonale_state_values();\n\n\t\treturn this._inputs_clonable_states;\n\t}\n\tprivate _default_inputs_clonale_state_values() {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\t// lodash_times(this.self._max_inputs_count, (i)=>{\n\t\t\tlist.push(InputCloneMode.ALWAYS);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset_override_clonable_state(state: boolean) {\n\t\tthis._override_clonable_state = state;\n\t\tthis.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n\t}\n\toverride_clonable_state() {\n\t\treturn this._override_clonable_state;\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tadd_on_set_input_hook(name: string, hook: OnUpdateHook) {\n\t\tthis._on_update_hooks = this._on_update_hooks || [];\n\t\tthis._on_update_hook_names = this._on_update_hook_names || [];\n\n\t\tif (!this._on_update_hook_names.includes(name)) {\n\t\t\tthis._on_update_hooks.push(hook);\n\t\t\tthis._on_update_hook_names.push(name);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tprivate _run_on_set_input_hooks() {\n\t\tif (this._on_update_hooks) {\n\t\t\tfor (let hook of this._on_update_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ninterface DisconnectionOptions {\n\tset_input?: boolean;\n}\n\nexport class NodeConnection {\n\tprivate static _next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor(\n\t\tprivate _node_src: BaseNodeType,\n\t\tprivate _node_dest: BaseNodeType,\n\t\tprivate _output_index: number = 0,\n\t\tprivate _input_index: number = 0\n\t) {\n\t\tthis._id = NodeConnection._next_id++;\n\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.add_output_connection(this);\n\t\t\tthis._node_dest.io.connections.add_input_connection(this);\n\t\t}\n\t}\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget node_src() {\n\t\treturn this._node_src;\n\t}\n\tget node_dest() {\n\t\treturn this._node_dest;\n\t}\n\tget output_index() {\n\t\treturn this._output_index;\n\t}\n\tget input_index() {\n\t\treturn this._input_index;\n\t}\n\n\tdisconnect(options: DisconnectionOptions = {}) {\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.remove_output_connection(this);\n\t\t\tthis._node_dest.io.connections.remove_input_connection(this);\n\t\t}\n\n\t\tif (options.set_input === true) {\n\t\t\tthis._node_dest.io.inputs.set_input(this._input_index, null);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isString from 'lodash/isString';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// interface OutputsOptions {\n// \thas_outputs?: boolean;\n// }\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class OutputsController<T extends BaseNodeType> {\n\tprivate _has_outputs: boolean = false;\n\tprivate _named_output_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _has_named_outputs: boolean = false;\n\n\tconstructor(private node: T) {}\n\n\t// init(options?: OutputsOptions) {\n\t// \tif (options == null) {\n\t// \t\toptions = {};\n\t// \t}\n\t// \tif (options['has_outputs'] == null) {\n\t// \t\toptions['has_outputs'] = true;\n\t// \t}\n\t// \tthis._has_outputs = options['has_outputs'];\n\t// }\n\tset_has_one_output() {\n\t\tthis._has_outputs = true;\n\t}\n\tset_has_no_output() {\n\t\tthis._has_outputs = false;\n\t}\n\n\tget has_outputs() {\n\t\treturn this._has_outputs;\n\t}\n\tget has_named_outputs() {\n\t\treturn this._has_named_outputs;\n\t}\n\thas_named_output(name: string): boolean {\n\t\t// return this._get_named_output_index_without_error(name) != null;\n\t\treturn this.get_named_output_index(name) >= 0;\n\t}\n\tget named_output_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_output_connection_points || [];\n\t}\n\tnamed_output_connection(index: number): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\treturn this._named_output_connection_points[index];\n\t\t}\n\t}\n\t// protected _get_named_output_index_without_error(name: string): number {\n\t// \tconst connections = this.named_output_connection_points;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn -1;\n\t// }\n\tget_named_output_index(name: string): number {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_output_connection_points.length; i++) {\n\t\t\t\tif (this._named_output_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\n\t\t// const index = this._get_named_output_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connection_points = this.named_output_connection_points;\n\t\t// \tconst available_names = connection_points.map((o) => o.name).join(', ');\n\t\t// \tthrow new Error(`no outputs named '${name}'. available names are ${available_names}`);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_output_index(output_index_or_name: number | string): number {\n\t\tif (output_index_or_name != null) {\n\t\t\tif (lodash_isString(output_index_or_name)) {\n\t\t\t\tif (this.has_named_outputs) {\n\t\t\t\t\treturn this.get_named_output_index(output_index_or_name);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`node ${this.node.full_path()} has no named outputs`);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn output_index_or_name;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tnamed_output_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let connection_point of this._named_output_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_named_output_connection_points(connection_points: BaseNamedConnectionPointType[], set_dirty: boolean = true) {\n\t\tthis._has_named_outputs = true;\n\t\tthis._named_output_connection_points = connection_points;\n\t\tif (set_dirty && this.node.scene) {\n\t\t\t// why do I need this set dirty here?\n\t\t\t// I currently have to have a flag to optionally prevent this,\n\t\t\t// for instance from gl nodes which have their outputs updated in a post dirty hook\n\t\t\tthis.node.set_dirty(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n\t}\n\tused_output_names(): string[] {\n\t\tif (this.node.io.connections) {\n\t\t\tconst output_indices = lodash_uniq(\n\t\t\t\tthis.node.io.connections\n\t\t\t\t\t.output_connections()\n\t\t\t\t\t.map((connection) => (connection ? connection.output_index : null))\n\t\t\t);\n\t\t\tconst used_output_indices: number[] = [];\n\t\t\toutput_indices.forEach((index) => {\n\t\t\t\tif (lodash_isNumber(index)) {\n\t\t\t\t\tused_output_indices.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst used_output_names: string[] = used_output_indices.map((index) => {\n\t\t\t\treturn this.named_output_connection_points[index].name;\n\t\t\t});\n\t\t\treturn used_output_names;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['param_class'];\n};\n\nexport class ParamsAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class EventContainer extends TypedContainer<ContainableMap['EVENT']> {\n\tset_content(content: ContainableMap['EVENT']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\nexport abstract class BaseEventsController<E extends Event, T extends BaseEventNodeType> {\n\tprotected _nodes_by_graph_node_id: Map<string, T> = new Map();\n\tregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.set(node.graph_node_id, node);\n\t}\n\tunregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.delete(node.graph_node_id);\n\t}\n\tabstract accepts_event(event: Event): boolean;\n\tprocess(event: E, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._nodes_by_graph_node_id.forEach((node) => node.process_event(event, canvas, camera_node));\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LifeCycleController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _lifecycle_on_create_allowed: boolean = true;\n\n\ton_create_hook_allowed(): boolean {\n\t\treturn this.scene.loading_controller.loaded && this._lifecycle_on_create_allowed;\n\t}\n\n\ton_create_prevent(callback: () => void) {\n\t\tthis._lifecycle_on_create_allowed = false;\n\t\tcallback();\n\t\tthis._lifecycle_on_create_allowed = true;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LoadingController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_loading_state: boolean = true;\n\t_auto_updating: boolean = true;\n\t_first_object_loaded: boolean = false;\n\n\tmark_as_loading() {\n\t\tthis._set_loading_state(true);\n\t}\n\tasync mark_as_loaded() {\n\t\tawait this._set_loading_state(false);\n\t\t// POLY.notify_scene_loaded(this.scene);\n\t\t// this.cooker().block()\n\t\t// this.root().set_children_dirty_without_propagation()\n\t\t// this.cooker().unblock()\n\t}\n\tprivate async _set_loading_state(state: boolean) {\n\t\tthis._loading_state = state;\n\t\tawait this.set_auto_update(!this._loading_state);\n\t}\n\tget is_loading() {\n\t\treturn this._loading_state;\n\t}\n\tget loaded() {\n\t\treturn !this._loading_state;\n\t}\n\tget auto_updating() {\n\t\treturn this._auto_updating;\n\t} // _init_auto_update: ->\n\t// \tthis.set_auto_update(true)\n\tasync set_auto_update(new_state: boolean) {\n\t\tif (this._auto_updating !== new_state) {\n\t\t\tthis._auto_updating = new_state;\n\t\t\tif (this._auto_updating) {\n\t\t\t\t// if this.env_is_development()\n\t\t\t\t// \tthis.performance().start()\n\n\t\t\t\tconst root = this.scene.root;\n\t\t\t\tif (root) {\n\t\t\t\t\tawait root.process_queue();\n\t\t\t\t\t// const c = async () => {\n\t\t\t\t\t// \tawait root.process_queue();\n\t\t\t\t\t// };\n\t\t\t\t\t// setTimeout(c, 50);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if (callback != null) { callback(); }\n\t\t\t}\n\t\t} else {\n\t\t\t// if (callback != null) { callback(); }\n\t\t}\n\t}\n\n\ton_first_object_loaded() {\n\t\tif (!this._first_object_loaded) {\n\t\t\tthis._first_object_loaded = true;\n\n\t\t\tconst loader = document.getElementById('scene_loading_container');\n\t\t\tif (loader) {\n\t\t\t\tloader.parentElement?.removeChild(loader);\n\t\t\t}\n\t\t}\n\t}\n\n\t// on_all_objects_loaded() {\n\t// \t// POLY.viewer_loaders_manager().dipose_loaders()\n\t// }\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class ExpressionsController {\n\tprivate _params_by_id: Map<string, BaseParamType> = new Map();\n\tconstructor() {}\n\n\tregister_param(param: BaseParamType) {\n\t\tthis._params_by_id.set(param.graph_node_id, param);\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis._params_by_id.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\tregenerate_referring_expressions(node: BaseNodeType) {\n\t\tnode.name_controller.graph_node.set_successors_dirty(node);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {MissingExpressionReference} from '../../expressions/MissingReference';\nimport jsep from 'jsep';\nimport {MapUtils} from '../../../core/MapUtils';\n\n// type MissingExpressionReferenceById = Map<number, MissingExpressionReference>;\n// type MissingExpressionReferenceByIdByPath = Map<string, MissingExpressionReferenceById>;\n\nexport class MissingReferencesController {\n\tprivate references: Map<string, MissingExpressionReference[]> = new Map<string, MissingExpressionReference[]>();\n\n\tregister(param: BaseParamType, jsep_node: jsep.Expression, path_argument: string): MissingExpressionReference {\n\t\tconst missing_expression_reference = new MissingExpressionReference(param, path_argument);\n\n\t\tMapUtils.push_on_array_at_entry(this.references, param.graph_node_id, missing_expression_reference);\n\n\t\treturn missing_expression_reference;\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis.references.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t// MISSING REFERENCES\n\t//\n\t//\n\t// call this from node.create and node.rename\n\tcheck_for_missing_references(node: BaseNodeType) {\n\t\tthis._check_for_missing_references_for_node(node);\n\t\tfor (let param of node.params.all) {\n\t\t\tthis._check_for_missing_references_for_param(param);\n\t\t}\n\t}\n\tprivate _check_for_missing_references_for_node(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(node.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n\tprivate _check_for_missing_references_for_param(param: BaseParamType) {\n\t\tconst id = param.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(param.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import jsep from 'jsep';\nimport {CoreWalker} from '../../core/Walker';\n\nexport class MissingExpressionReference {\n\tconstructor(private param: BaseParamType /*, private jsep_node: jsep.Expression*/, public path: string) {\n\t\t// console.log(this.jsep_node, this.param); // TODO: typescript, to not have the missing ref\n\t}\n\n\tmatches_path(path: string): boolean {\n\t\tconst absolute = CoreWalker.make_absolute_path(this.param.node, this.path);\n\t\treturn absolute == path;\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.param.expression_controller?.update_from_method_dependency_name_change();\n\t}\n\n\tresolve_missing_dependencies() {\n\t\tconst input = this.param.raw_input_serialized;\n\t\tthis.param.set(this.param.default_value);\n\t\tthis.param.set(input);\n\t\t// parse_expression_and_update_dependencies()\n\t}\n}\n\n// export class ReferenceSearchResult {\n// \tpublic found_graph_nodes: CoreGraphNode[] = [];\n// \tpublic missing_paths: string[] = [];\n\n// \tconstructor() {}\n// \tset_found_graph_nodes(graph_nodes: CoreGraphNode[]) {\n// \t\tthis.found_graph_nodes = graph_nodes;\n// \t}\n// \tset_missing_paths(paths: string[]) {\n// \t\tthis.missing_paths = paths;\n// \t}\n// }\n","import {PolyScene} from '../PolyScene';\n\nimport {Object3D} from 'three/src/core/Object3D';\nimport lodash_concat from 'lodash/concat';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_compact from 'lodash/compact';\nimport {ObjectsManagerNode} from '../../nodes/manager/ObjectsManager';\nimport {CoreString} from '../../../core/String';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {BaseObjNodeType} from '../../nodes/obj/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class NodesController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_root!: ObjectsManagerNode;\n\t_node_context_signatures: Dictionary<boolean> = {};\n\t_instanciated_nodes_by_context_and_type: Dictionary<Dictionary<Dictionary<BaseNodeType>>> = {};\n\n\tinit() {\n\t\tthis._root = new ObjectsManagerNode(this.scene);\n\t\tthis._root.initialize_base_and_node();\n\t\t// this._root.set_scene(this.scene);\n\t\tthis._root.init_default_scene();\n\t}\n\n\tget root() {\n\t\treturn this._root;\n\t}\n\tobjects_from_mask(mask: string): Object3D[] {\n\t\tconst masks = mask.split(' ');\n\t\t// let geos = this.root().nodes_by_type('geo') as BaseNodeObj[];\n\t\tlet nodes = this.root.children() as BaseObjNodeType[];\n\t\tnodes = nodes.filter((node) => CoreString.matches_one_mask(node.name, masks));\n\t\tconst objects = nodes.map((geo) => geo.object);\n\t\treturn lodash_compact(objects);\n\t}\n\tclear() {\n\t\tconst children = this.root.children();\n\t\tfor (let child of children) {\n\t\t\tthis.root.children_controller?.remove_node(child);\n\t\t}\n\t\t// return children.forEach(child=> {\n\t\t// \treturn this.root().remove_node(child);\n\t\t// });\n\t}\n\n\tnode(path: string) {\n\t\tif (path === '/') {\n\t\t\treturn this.root;\n\t\t} else {\n\t\t\treturn this.root.node(path);\n\t\t}\n\t}\n\tall_nodes() {\n\t\tlet nodes: BaseNodeType[] = [this.root];\n\t\tlet current_parents: BaseNodeType[] = [this.root];\n\t\tlet cmptr = 0;\n\t\twhile (current_parents.length > 0 && cmptr < 10) {\n\t\t\tconst children = lodash_flatten(\n\t\t\t\tcurrent_parents.map((current_parent) => {\n\t\t\t\t\tif (current_parent.children_allowed()) {\n\t\t\t\t\t\treturn current_parent.children();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tnodes = lodash_concat(nodes, children);\n\t\t\tcurrent_parents = children;\n\t\t\tcmptr += 1;\n\t\t}\n\t\treturn lodash_flatten(nodes);\n\t}\n\n\treset_node_context_signatures() {\n\t\tthis._node_context_signatures = {};\n\t}\n\tregister_node_context_signature(node: BaseNodeType) {\n\t\tif (node.children_allowed() && node.children_controller) {\n\t\t\tthis._node_context_signatures[node.children_controller.node_context_signature()] = true;\n\t\t}\n\t}\n\tnode_context_signatures() {\n\t\treturn Object.keys(this._node_context_signatures)\n\t\t\t.sort()\n\t\t\t.map((s) => s.toLowerCase());\n\t}\n\n\tadd_to_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tthis._instanciated_nodes_by_context_and_type[context] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id] = node;\n\t}\n\n\tremove_from_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tdelete this._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id];\n\t}\n\n\tinstanciated_nodes(context: NodeContext, node_type: string) {\n\t\tconst nodes = [];\n\t\tif (this._instanciated_nodes_by_context_and_type[context]) {\n\t\t\tconst nodes_by_ids = this._instanciated_nodes_by_context_and_type[context][node_type];\n\t\t\tif (nodes_by_ids) {\n\t\t\t\tfor (let id of Object.keys(nodes_by_ids)) {\n\t\t\t\t\tnodes.push(nodes_by_ids[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t}\n}\n","import {Group} from 'three/src/objects/Group';\n// import lodash_isEqual from 'lodash/isEqual';\n// import lodash_map from 'lodash/map';\n\nimport {TypedBaseManagerNode} from './_Base';\n// import {CoreObject} from '../../../core/Object';\n// import {BaseNode} from '../_Base';\nimport {BaseObjNodeType} from '../obj/_Base';\n\n// import {BaseManagerObjNode} from '../obj/_BaseManager';\n// import {BaseCameraObjNodeClass} from '../obj/_BaseCamera';\n// import {BaseLightObjNodeClass} from '../obj/_BaseLight';\n\n// obj nodes\n// import {EventsObjNode} from '../obj/Events';\n// import {MaterialsObjNode} from '../obj/Materials';\n// import {FogObjNode} from '../obj/Fog';\nimport {GeoObjNode} from '../obj/Geo';\n\nimport {POLY} from '../../Poly';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {PolyScene} from '../../scene/PolyScene';\n// TODO:\n// ensure removing a node removes its content from the scene (spotlight?)\n\nimport {ObjNodeChildrenMap} from '../../poly/registers/Obj';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nclass ObjectsManagerParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ObjectsManagerParamsConfig();\n\nexport class ObjectsManagerNode extends TypedBaseManagerNode<ObjectsManagerParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'obj';\n\t}\n\t// children_context() {\n\t// \treturn NodeContext.OBJ;\n\t// }\n\n\tprivate _object: Group = new Group();\n\tprivate _queued_nodes_by_id: Dictionary<BaseObjNodeType> = {};\n\tprivate _queued_nodes_by_path: Dictionary<BaseObjNodeType> = {};\n\tprivate _expected_geo_nodes: Dictionary<GeoObjNode> = {};\n\t// private _loaded_geo_node_by_id: Dictionary<boolean> = {};\n\tprivate _process_queue_start: number = -1;\n\n\tprotected _children_controller_context = NodeContext.OBJ;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.flags.add_display();\n\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add.bind(this));\n\t\tthis.lifecycle.add_on_child_remove_hook(this._on_child_remove.bind(this));\n\t\t// this.flags.add_bypass({has_bypass_flag: false});\n\n\t\t// this.set_min_inputs_count(0);\n\t\t// this.set_max_inputs_count(0);\n\t}\n\t//@_object_uuid_by_node_graph_id = {}\n\n\tinit_default_scene() {\n\t\tthis._object.name = '_WORLD_';\n\t\tthis._scene.default_scene.add(this._object);\n\t}\n\n\t// TODO: is this method still used?\n\t// available_children_classes() {\n\t// \treturn POLY.Engine.Node.Obj;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tcreate_node<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as ObjNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseObjNodeType[];\n\t}\n\tnodes_by_type<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as ObjNodeChildrenMap[K][];\n\t}\n\n\tmultiple_display_flags_allowed() {\n\t\treturn true;\n\t}\n\n\tadd_to_queue(node: BaseObjNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._queued_nodes_by_id[id] == null) {\n\t\t\treturn (this._queued_nodes_by_id[id] = node);\n\t\t}\n\t}\n\n\tasync process_queue() {\n\t\tthis._queued_nodes_by_path = {};\n\t\tconst ids = Object.keys(this._queued_nodes_by_id);\n\t\tfor (let id of ids) {\n\t\t\tconst node = this._queued_nodes_by_id[id];\n\t\t\tdelete this._queued_nodes_by_id[id];\n\n\t\t\tconst full_path = `_____${node.render_order}__${node.full_path()}`;\n\t\t\t// we want to process managers, cameras, then lights, then everything else\n\t\t\t// so we add a prefix for those\n\t\t\t// if (this._is_node_manager(node)) {\n\t\t\t// \tfull_path = `/_____005_${full_path}`;\n\t\t\t// } else if (this._is_node_fog(node)) {\n\t\t\t// \tfull_path = `/_____002_${full_path}`;\n\t\t\t// } else if (this._is_node_camera(node)) {\n\t\t\t// \tfull_path = `/_____003_${full_path}`;\n\t\t\t// } else if (this._is_node_light(node)) {\n\t\t\t// \tfull_path = `/_____004_${full_path}`;\n\t\t\t// }\n\n\t\t\tthis._queued_nodes_by_path[full_path] = node;\n\t\t}\n\n\t\tconst promises = Object.keys(this._queued_nodes_by_path)\n\t\t\t.sort()\n\t\t\t.map((path_id) => {\n\t\t\t\tconst node = this._queued_nodes_by_path[path_id];\n\t\t\t\treturn this.update_object(node);\n\t\t\t});\n\n\t\tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t\tthis._process_queue_start = performance.now();\n\t\tPromise.all(promises).then(() => {\n\t\t\tPOLY.log(`SCENE LOADED '${this.scene.name}' in ${performance.now() - this._process_queue_start}`);\n\t\t\t// this.scene().performance().print()\n\n\t\t\t// do the update here if there are no objects to load\n\t\t\t// otherwise an empty scene will have a loader that never gets removed\n\t\t\t// if (Object.keys(this._expected_geo_nodes).length == 0) {\n\t\t\t// \tthis.update_on_all_objects_loaded();\n\t\t\t// }\n\t\t});\n\t}\n\n\tupdate_object(node: BaseObjNodeType) {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\tthis.add_to_queue(node);\n\t\t} else {\n\t\t\t// if (node.object) {\n\t\t\tthis.add_to_scene(node);\n\t\t\t// } else {\n\t\t\t// \t//if POLY.env != 'test'\n\t\t\t// \t// console.warn(`no object from ${node.full_path()} (error:${node.error_message()}) (${POLY.env})`);\n\t\t\t// }\n\t\t}\n\t}\n\n\t// _is_node_fog(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, FogObjNode);\n\t// }\n\t// _is_node_camera(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, BaseCameraObjNodeClass);\n\t// }\n\n\t// _is_node_event(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, EventsObjNode);\n\t// }\n\t// _is_node_mat(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, MaterialsObjNode);\n\t// }\n\n\t//\n\t//\n\t// OBJ PARENTING\n\t//\n\t//\n\n\t// TODO:\n\t// a OBJ node should be able to submit its group for transform\n\t// apart from the geometry. This would allow parenting to function\n\t// regardless if the underlying geo is valid or not\n\tget_parent_for_node(node: BaseObjNodeType) {\n\t\t// if (this._is_node_event(node) || this._is_node_mat(node)) {\n\t\t// \treturn null;\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\t// if (this._is_node_camera(node)) {\n\t\t\t// \treturn this.scene.display_scene;\n\t\t\t// } else {\n\t\t\tconst node_input = node.io.inputs.input(0);\n\t\t\tif (node_input) {\n\t\t\t\t//node_input.request_container (container)=>\n\t\t\t\t//\tcallback(container.object() || @_object)\n\t\t\t\treturn node_input.children_group;\n\t\t\t} else {\n\t\t\t\treturn this._object;\n\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tadd_to_scene(node: BaseObjNodeType): void {\n\t\t// if (this._is_node_fog(node)) {\n\t\t// console.log(\"fog\")\n\t\t// # TODO: ensure fog is removed if we set display or bypass flag\n\t\t// # TODO: ensure we get a warning if more than 1 fog\n\t\t// # TODO: why does it get added twice when its parameters are changed?\n\t\t// node.get_fog (fog)=>\n\t\t// \t@_scene.display_scene().fog = fog\n\t\t// #console.log(\"added fog\", node.object())\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\tconst parent_object = this.get_parent_for_node(node);\n\t\t\tif (parent_object) {\n\t\t\t\t// await node.params.eval_all().then((params_eval_key) => {\n\t\t\t\t// \tnode.request_container();\n\t\t\t\t// });\n\n\t\t\t\tif (node.used_in_scene) {\n\t\t\t\t\t// parent_object.add(node.object);\n\t\t\t\t\tnode.add_object_to_parent(parent_object);\n\t\t\t\t\t// await node.cook_controller.cook_main_without_inputs();\n\t\t\t\t} else {\n\t\t\t\t\tnode.remove_object_from_parent();\n\t\t\t\t\t// parent_object.remove(node.object);\n\t\t\t\t}\n\n\t\t\t\t// node.request_display_node();\n\t\t\t} else {\n\t\t\t\t// node.request_container().then(() => {\n\t\t\t\t// \t// force events and mat to cook and remove the dirty state\n\t\t\t\t// \t// ensure that pickers are cooked\n\t\t\t\t// \t// TODO: although there has been cases with two picker and\n\t\t\t\t// \t// one referencing the other with an expression, and that\n\t\t\t\t// \t// expression be evaluated before the second was created\n\t\t\t\t// \t// which led to an error. This should not happen\n\t\t\t\t// \tnode.children_controller.traverse_children((child) => child.set_dirty());\n\t\t\t\t// });\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_from_scene(node: BaseObjNodeType) {\n\t\tnode.remove_object_from_parent();\n\t}\n\tare_children_cooking(): boolean {\n\t\tconst children = this.children();\n\t\tfor (let child of children) {\n\t\t\tif (child.is_display_node_cooking()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync expected_loading_geo_nodes_by_id() {\n\t\tconst geo_nodes = this.nodes_by_type('geo');\n\t\tconst node_by_id: Dictionary<GeoObjNode> = {};\n\t\tfor (let geo_node of geo_nodes) {\n\t\t\tconst is_displayed = await geo_node.is_displayed();\n\t\t\tif (is_displayed) {\n\t\t\t\tnode_by_id[geo_node.graph_node_id] = geo_node;\n\t\t\t}\n\t\t}\n\t\treturn node_by_id;\n\t}\n\n\t// async notify_geo_loaded(geo_node: GeoObjNode) {\n\t// \tthis._loaded_geo_node_by_id = this._loaded_geo_node_by_id || {};\n\t// \tthis._loaded_geo_node_by_id[geo_node.graph_node_id] = true;\n\n\t// \tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t// \tif (this.scene) {\n\t// \t\tthis.scene.loading_controller.on_first_object_loaded();\n\n\t// \t\tif (lodash_isEqual(Object.keys(this._loaded_geo_node_by_id), Object.keys(this._expected_geo_nodes))) {\n\t// \t\t\tthis.update_on_all_objects_loaded();\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// update_on_all_objects_loaded() {\n\t// \tthis.scene.loading_controller.on_all_objects_loaded();\n\t// \t// this.scene.cube_cameras_controller.on_all_objects_loaded(); // TODO: typescript\n\t// }\n\n\tadd_to_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)->\n\t// \tobject = input_container.object()\n\n\t// \ttransformed_node.request_input_container 0, (parent_input_container)->\n\t// \t\tparent = parent_input_container.object()\n\t// \t\tparent.add(object)\n\n\tremove_from_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)=>\n\t// \tobject = input_container.object()\n\n\t// \tthis.get_parent_for_node transformed_node, (parent_object)=>\n\t// \t\tparent_object.add(object)\n\n\tprivate _on_child_add(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.update_object(node as BaseObjNodeType);\n\t\t}\n\t}\n\tprivate _on_child_remove(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.remove_from_scene(node as BaseObjNodeType);\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ManagerContainer} from '../../containers/Manager';\n\nexport class TypedBaseManagerNode<K extends NodeParamsConfig> extends TypedNode<'MANAGER', BaseManagerNodeType, K> {\n\tcontainer_controller: TypedContainerController<ManagerContainer> = new TypedContainerController<ManagerContainer>(\n\t\tthis,\n\t\tManagerContainer\n\t);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MANAGER;\n\t}\n}\n\nexport type BaseManagerNodeType = TypedBaseManagerNode<any>;\nexport class BaseManagerNodeClass extends TypedBaseManagerNode<any> {}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ManagerContainer extends TypedContainer<ContainableMap['MANAGER']> {\n\tset_content(content: ContainableMap['MANAGER']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_clone from 'lodash/clone';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {PerformanceNode} from './PerformanceNode';\nimport {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport class CorePerformance {\n\tprivate _started: boolean = false;\n\t_start_time: number | null = 0;\n\t_previous_timestamp: number = 0;\n\t_nodes_cook_data: Dictionary<PerformanceNode> = {};\n\t_durations_by_name: Dictionary<number> = {};\n\t_durations_count_by_name: Dictionary<number> = {};\n\t// _performance_id: number;\n\n\t// constructor(){\n\t// \tconsole.log(\"creating perf\")\n\t// \tthis._performance_id = Math.random()\n\t// }\n\n\tprofile(name: string, method: (args?: any) => any) {\n\t\tconst start_time = performance.now();\n\t\tmethod();\n\t\tconst total_time = performance.now() - start_time;\n\t\tconsole.log(`${name}: ${total_time}`);\n\t}\n\n\tstart() {\n\t\tif (!this._started) {\n\t\t\tthis.reset();\n\t\t\tthis._started = true;\n\t\t\tthis._start_time = performance.now();\n\t\t\tthis._nodes_cook_data = {};\n\t\t\tthis._previous_timestamp = this._start_time;\n\t\t}\n\t}\n\t// else\n\t// \tthrow \"performance already started\"\n\tstop() {\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._started = false;\n\t\tthis._start_time = null;\n\t\tthis._durations_by_name = {};\n\t\tthis._durations_count_by_name = {};\n\t\tthis._nodes_cook_data = {};\n\t}\n\n\tget started(): boolean {\n\t\treturn this._started;\n\t}\n\n\trecord_node_cook_data(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._nodes_cook_data[id] == null) {\n\t\t\tthis._nodes_cook_data[id] = new PerformanceNode(node);\n\t\t}\n\t\tthis._nodes_cook_data[id].update_cook_data();\n\t}\n\n\trecord(name: string) {\n\t\tif (!this.started) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tconst current_timestamp = performance.now();\n\n\t\tif (this._durations_by_name[name] == null) {\n\t\t\tthis._durations_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_by_name[name] += current_timestamp - this._previous_timestamp;\n\t\tif (this._durations_count_by_name[name] == null) {\n\t\t\tthis._durations_count_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_count_by_name[name] += 1;\n\n\t\treturn (this._previous_timestamp = current_timestamp);\n\t}\n\n\tprint() {\n\t\tthis.print_node_cook_data();\n\t\tthis.print_recordings();\n\t}\n\n\tprint_node_cook_data() {\n\t\tlet performance_nodes = Object.values(this._nodes_cook_data);\n\t\tperformance_nodes = lodash_sortBy(performance_nodes, (performance_node) => -performance_node.cook_time_total);\n\n\t\tconst print_objects = performance_nodes.map((performance_node) => performance_node.print_object());\n\n\t\tconsole.log('--------------- NODES COOK TIME -----------');\n\n\t\tconst table_entries = [];\n\t\tconst sorted_print_objects = lodash_sortBy(print_objects, (print_object) => -print_object['cook_time_total']);\n\t\tfor (let print_object of sorted_print_objects) {\n\t\t\ttable_entries.push(print_object);\n\t\t}\n\n\t\tconsole.table(table_entries);\n\n\t\treturn print_objects;\n\t}\n\n\tprint_recordings() {\n\t\t// const start_time = this._start_time\n\t\tconst durations_by_name = lodash_clone(this._durations_by_name);\n\t\tconst durations_count_by_name = lodash_clone(this._durations_count_by_name);\n\t\t//this.reset()\n\n\t\tconst durations = [];\n\t\t//durations_by_name = {}\n\t\tconst names_by_duration: Dictionary<string[]> = {};\n\n\t\tfor (let name of Object.keys(durations_by_name)) {\n\t\t\tconst duration = durations_by_name[name];\n\n\t\t\t//durations_by_name[name] = duration\n\t\t\tdurations.push(duration);\n\t\t\tif (names_by_duration[duration] == null) {\n\t\t\t\tnames_by_duration[duration] = [];\n\t\t\t}\n\t\t\tnames_by_duration[duration].push(name);\n\t\t}\n\n\t\tdurations.sort((a, b) => a - b);\n\t\tconst sorted_durations = lodash_uniq(durations);\n\n\t\tconsole.log('--------------- PERF RECORDINGS -----------');\n\t\t//console.log(\"sorted_durations\", sorted_durations)\n\t\t// let previous_duration = start_time\n\t\tconst table_entries = [];\n\t\tfor (let duration of sorted_durations) {\n\t\t\tconst names = names_by_duration[duration];\n\t\t\tfor (let name of names) {\n\t\t\t\tconst count = durations_count_by_name[name];\n\t\t\t\tconst duration_per_iteration = duration / count;\n\n\t\t\t\tconst entry = {duration, name, count, duration_per_iteration};\n\t\t\t\ttable_entries.push(entry);\n\t\t\t}\n\n\t\t\t// previous_duration = duration\n\t\t}\n\n\t\tconsole.table(table_entries);\n\t\treturn table_entries;\n\t}\n}\n","import {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport interface PerformancePrintObject {\n\tfull_path: string;\n\tcooks_count: number;\n\tcook_time_total: number;\n\tcook_time_per_iteration: number;\n\tcook_time_total_with_inputs: number;\n\tcook_time_total_with_inputs_per_iteration: number;\n\tcook_time_total_params: number;\n\tcook_time_total_params_per_iteration: number;\n}\n\nexport class PerformanceNode {\n\t_cooks_count: number = 0;\n\t_cook_time_total: number = 0;\n\t_cook_time_total_with_inputs: number = 0;\n\t_cook_time_total_params: number = 0;\n\tconstructor(private _node: BaseNodeType) {}\n\n\tupdate_cook_data(): void {\n\t\tthis._cooks_count += 1;\n\t\tthis._cook_time_total += this._node.cook_controller.cook_time;\n\t\tthis._cook_time_total_with_inputs += this._node.cook_controller.cook_time_with_inputs;\n\t\tthis._cook_time_total_params += this._node.cook_controller.cook_time_params;\n\t}\n\n\tget cook_time_total(): number {\n\t\treturn this._cook_time_total;\n\t}\n\tget cook_time_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tget cook_time_total_with_inputs(): number {\n\t\treturn this._cook_time_total_with_inputs;\n\t}\n\tget cook_time_total_with_inputs_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_with_inputs / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cook_time_total_params(): number {\n\t\treturn this._cook_time_total_params;\n\t}\n\tget cook_time_total_params_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_params / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\n\tprint_object(): PerformancePrintObject {\n\t\treturn {\n\t\t\tfull_path: this._node.full_path(),\n\t\t\tcooks_count: this.cooks_count,\n\t\t\tcook_time_total: this.cook_time_total,\n\t\t\tcook_time_per_iteration: this.cook_time_per_iteration,\n\t\t\tcook_time_total_with_inputs: this.cook_time_total_with_inputs,\n\t\t\tcook_time_total_with_inputs_per_iteration: this.cook_time_total_with_inputs_per_iteration,\n\t\t\tcook_time_total_params: this.cook_time_total_params,\n\t\t\tcook_time_total_params_per_iteration: this.cook_time_total_params_per_iteration,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {SceneEvent} from '../../poly/SceneEvent';\n\ntype FrameRange = [number, number];\n\n// ensure that FPS remains a float\n// to have divisions and multiplications also give a float\nconst FPS = 60.0;\n\nexport class TimeController {\n\tprotected self: PolyScene = (<unknown>this) as PolyScene;\n\tprivate _frame: number = 1;\n\tprivate _time: number = 0;\n\tprivate _prev_performance_now: number = 0;\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _frame_range: FrameRange = [1, 600];\n\tprivate _frame_range_locked: [boolean, boolean] = [true, true];\n\tprivate _playing: boolean = false;\n\n\tconstructor(private scene: PolyScene) {\n\t\tthis._graph_node = new CoreGraphNode(scene, 'time controller');\n\t\t// this._graph_node.set_scene(this.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tget frame(): number {\n\t\treturn this._frame;\n\t}\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\tget frame_range(): FrameRange {\n\t\treturn this._frame_range;\n\t}\n\tget frame_range_locked(): [boolean, boolean] {\n\t\treturn this._frame_range_locked;\n\t}\n\tset_frame_range(start_frame: number, end_frame: number) {\n\t\tthis._frame_range[0] = Math.floor(start_frame);\n\t\tthis._frame_range[1] = Math.floor(end_frame);\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_frame_range_locked(start_locked: boolean, end_locked: boolean) {\n\t\tthis._frame_range_locked[0] = start_locked;\n\t\tthis._frame_range_locked[1] = end_locked;\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\t// set_fps(fps: number) {\n\t// \tthis._fps = Math.floor(fps);\n\t// \tthis._frame_interval = 1000 / this._fps;\n\t// \tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t// }\n\tset_time(time: number, update_frame = true) {\n\t\tif (time != this._time) {\n\t\t\tthis._time = time;\n\n\t\t\tif (update_frame) {\n\t\t\t\tconst new_frame = Math.floor(this._time * FPS);\n\t\t\t\tthis._frame = new_frame;\n\t\t\t}\n\n\t\t\t// update time dependents\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_UPDATED);\n\t\t\tthis.scene.uniforms_controller.update_time_dependent_uniform_owners();\n\n\t\t\t// we block updates here, so that dependent nodes only cook once\n\t\t\tthis.scene.cooker.block();\n\t\t\tthis.graph_node.set_successors_dirty();\n\t\t\tthis.scene.cooker.unblock();\n\t\t}\n\t}\n\n\tset_frame(frame: number, update_time = true) {\n\t\tif (frame != this._frame) {\n\t\t\tframe = this._ensure_frame_within_bounds(frame);\n\t\t\tif (frame != this._frame) {\n\t\t\t\tthis._frame = frame;\n\t\t\t\tif (update_time) {\n\t\t\t\t\tthis.set_time(this._frame / FPS, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time_if_playing() {\n\t\tif (this._playing) {\n\t\t\tif (!this.scene.root.are_children_cooking()) {\n\t\t\t\tthis.increment_time();\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time() {\n\t\tconst performance_now = performance.now();\n\t\tconst delta = (performance_now - this._prev_performance_now) / 1000.0;\n\t\tconst new_time = this._time + delta;\n\t\tthis._prev_performance_now = performance_now;\n\t\tthis.set_time(new_time);\n\t}\n\n\t_ensure_frame_within_bounds(frame: number): number {\n\t\tif (this._frame_range_locked[0] && frame < this._frame_range[0]) {\n\t\t\treturn this._frame_range[1];\n\t\t}\n\t\tif (this._frame_range_locked[1] && frame > this._frame_range[1]) {\n\t\t\treturn this._frame_range[0];\n\t\t}\n\t\treturn frame;\n\t}\n\tget playing() {\n\t\treturn this._playing === true;\n\t}\n\tpause() {\n\t\tif (this._playing == true) {\n\t\t\tthis._playing = false;\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\tplay() {\n\t\tif (this._playing !== true) {\n\t\t\tthis._playing = true;\n\t\t\tthis._prev_performance_now = performance.now();\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\ttoggle_play_pause() {\n\t\tif (this.playing) {\n\t\t\tthis.pause();\n\t\t} else {\n\t\t\tthis.play();\n\t\t}\n\t}\n}\n","export enum SceneEvent {\n\tFRAME_RANGE_UPDATED = 'scene_frame_range_updated',\n\tFRAME_UPDATED = 'scene_frame_updated',\n\tPLAY_STATE_UPDATED = 'scene_play_state_updated',\n}\n","import {PolyScene} from '../PolyScene';\nimport {NodeSerializer} from '../../../engine/nodes/utils/Serializer';\n\nexport class PolySceneSerializer {\n\tconstructor(private scene: PolyScene) {}\n\n\tto_json(include_node_param_components: boolean = false) {\n\t\tconst nodes_by_graph_node_id: Dictionary<object> = {};\n\t\tconst params_by_graph_node_id: Dictionary<object> = {};\n\n\t\tfor (let node of this.scene.nodes_controller.all_nodes()) {\n\t\t\tconst node_serializer = new NodeSerializer(node);\n\t\t\tnodes_by_graph_node_id[node.graph_node_id] = node_serializer.to_json(include_node_param_components);\n\n\t\t\tconst params = node.params.all; //lodash_compact(lodash_concat( lodash_values(node.params()), lodash_values(node.spare_params()) ));\n\t\t\tfor (let param of params) {\n\t\t\t\tparams_by_graph_node_id[param.graph_node_id] = param.to_json();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnodes_by_graph_node_id,\n\t\t\tparams_by_graph_node_id,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ntype IUniforms = Dictionary<IUniform>;\nexport interface IUniformsWithTime extends IUniforms {\n\ttime: IUniform;\n}\nexport interface IUniformsWithResolution extends IUniforms {\n\tresolution: {\n\t\tvalue: Vector2Like;\n\t};\n}\n\nexport class UniformsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _time_dependent_uniform_owners: Dictionary<IUniformsWithTime> = {}; //new Map()\n\tprivate _time_dependent_uniform_owners_ids: string[] | null = null;\n\n\tprivate _resolution: Vector2 = new Vector2(1, 1);\n\tprivate _resolution_dependent_uniform_owners: Dictionary<IUniformsWithResolution> = {};\n\tprivate _resolution_dependent_uniform_owners_ids: string[] = [];\n\n\t// time\n\tadd_time_dependent_uniform_owner(id: string, uniforms: IUniformsWithTime) {\n\t\tthis._time_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tremove_time_dependent_uniform_owner(id: string) {\n\t\tdelete this._time_dependent_uniform_owners[id];\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_time_dependent_uniform_owners_ids() {\n\t\tthis._time_dependent_uniform_owners_ids = Object.keys(this._time_dependent_uniform_owners);\n\t}\n\tpublic update_time_dependent_uniform_owners() {\n\t\tconst time = this.scene.time;\n\t\tif (this._time_dependent_uniform_owners_ids) {\n\t\t\tfor (let id of this._time_dependent_uniform_owners_ids) {\n\t\t\t\tconst uniforms = this._time_dependent_uniform_owners[id];\n\t\t\t\tuniforms.time.value = time;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolution\n\tadd_resolution_dependent_uniform_owner(id: string, uniforms: IUniformsWithResolution) {\n\t\tthis._resolution_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t\tif (this._resolution) {\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tremove_resolution_dependent_uniform_owner(id: string) {\n\t\tdelete this._resolution_dependent_uniform_owners[id];\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_resolution_dependent_uniform_owners_ids() {\n\t\tthis._resolution_dependent_uniform_owners_ids = Object.keys(this._resolution_dependent_uniform_owners);\n\t}\n\tupdate_resolution_dependent_uniform_owners(resolution: Vector2) {\n\t\tthis._resolution.copy(resolution);\n\t\tfor (let id of this._resolution_dependent_uniform_owners_ids) {\n\t\t\tconst uniforms = this._resolution_dependent_uniform_owners[id];\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tupdate_resolution_dependent_uniforms(uniforms: IUniformsWithResolution) {\n\t\tuniforms.resolution.value.x = this._resolution.x * window.devicePixelRatio;\n\t\tuniforms.resolution.value.y = this._resolution.y * window.devicePixelRatio;\n\t}\n}\n","import {POLY} from '../../Poly';\n\n// import {PolyScene} from '../PolyScene';\n\nexport class WebGLController {\n\tconstructor() {}\n\n\t_require_webgl2: boolean = false;\n\n\trequire_webgl2() {\n\t\treturn this._require_webgl2;\n\t}\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t\tPOLY.renderers_controller.set_require_webgl2();\n\t\t}\n\t}\n}\n","import {CopRegister} from './Cop';\nimport {EventRegister} from './Event';\nimport {GlRegister} from './Gl';\nimport {MatRegister} from './Mat';\nimport {ObjRegister} from './Obj';\nimport {SopRegister} from './Sop';\n\nimport {POLY} from '../../Poly';\n\nexport class AllRegister {\n\tstatic run() {\n\t\tCopRegister.run(POLY);\n\t\tEventRegister.run(POLY);\n\t\tGlRegister.run(POLY);\n\t\tMatRegister.run(POLY);\n\t\tObjRegister.run(POLY);\n\t\tSopRegister.run(POLY);\n\t}\n}\n","import {CATEGORY_COP} from './Category';\n\nimport {BuilderCopNode} from '../../nodes/cop/Builder';\nimport {EnvMapCopNode} from '../../nodes/cop/EnvMap';\nimport {FileCopNode} from '../../nodes/cop/File';\nimport {NullCopNode} from '../../nodes/cop/Null';\nimport {SwitchCopNode} from '../../nodes/cop/Switch';\n\nexport interface CopNodeChildrenMap {\n\tbuilder: BuilderCopNode;\n\tenv_map: EnvMapCopNode;\n\tfile: FileCopNode;\n\tnull: NullCopNode;\n\tswitch: SwitchCopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class CopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(BuilderCopNode, CATEGORY_COP.ADVANCED);\n\t\tpoly.register_node(EnvMapCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(FileCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(NullCopNode, CATEGORY_COP.MISC);\n\t\tpoly.register_node(SwitchCopNode, CATEGORY_COP.MISC);\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {RGBAFormat} from 'three/src/constants';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {NearestFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {HalfFloatType} from 'three/src/constants';\nimport {FloatType} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {ClampToEdgeWrapping} from 'three/src/constants';\nimport {Camera} from 'three/src/cameras/Camera';\n\n// import NodeBase from '../_Base'\n\n// import Container from '../../Container/Texture'\n// import {CoreImage} from '../../../Core/Image'\n\nimport {TypedCopNode} from './_Base';\n\n// import { GlobalsGeometryHandler } from \"src/Engine/Node/Gl/Assembler/Globals/Geometry\";\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerTexture} from '../gl/code/assemblers/textures/Texture';\n\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\n\nconst PASS_THROUGH_SHADER = `\nvoid main()\t{\n\tgl_Position = vec4( position, 1.0 );\n}\n`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreSleep} from '../../../core/Sleep';\nclass BuilderCopParamsConfig extends NodeParamsConfig {\n\tresolution = ParamConfig.VECTOR2([256, 256]);\n}\n\nconst ParamsConfig = new BuilderCopParamsConfig();\n\nexport class BuilderCopNode extends TypedCopNode<BuilderCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'builder';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<\n\t\tShaderAssemblerTexture\n\t> = this._create_assembler_controller();\n\n\tprivate _create_assembler_controller() {\n\t\tconst globals_handler = new GlobalsGeometryHandler();\n\t\tconst assembler_controller = new GlAssemblerController<ShaderAssemblerTexture>(this, ShaderAssemblerTexture);\n\t\tassembler_controller.set_assembler_globals_handler(globals_handler);\n\t\treturn assembler_controller;\n\t}\n\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tprivate _texture_mesh: Mesh = new Mesh(new PlaneBufferGeometry(2, 2));\n\tprivate _fragment_shader: string | undefined;\n\tprivate _uniforms: IUniforms | undefined;\n\tprivate _texture_material: ShaderMaterial = new ShaderMaterial({\n\t\tuniforms: {},\n\t\tvertexShader: PASS_THROUGH_SHADER,\n\t\tfragmentShader: '',\n\t});\n\tprivate _texture_scene: Scene = new Scene();\n\tprivate _texture_camera: Camera = new Camera();\n\tprivate _render_target: WebGLRenderTarget | undefined;\n\tprivate _renderer: WebGLRenderer | undefined;\n\tprivate _pixelBuffer: Float32Array | undefined;\n\t// private _assembler: ShaderAssemblerTexture;\n\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_node() {\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t\tthis._texture_mesh.material = this._texture_material;\n\t\tthis._texture_scene.add(this._texture_mesh);\n\t\tthis._texture_camera.position.z = 1;\n\n\t\t// this._init_common_shader_builder(ShaderAssemblerTexture, {\n\t\t// \thas_display_flag: true\n\t\t// });\n\t\t// this.set_inputs_count_to_zero();\n\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_reset_if_resolution_changed',\n\t\t\tthis._reset_if_resolution_changed.bind(this)\n\t\t);\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis._render_target = this._create_render_target();\n\t\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\t});\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tprivate _reset_if_resolution_changed(trigger?: CoreGraphNode) {\n\t\tif (trigger && trigger.graph_node_id == this.p.resolution.graph_node_id) {\n\t\t\tthis._reset();\n\t\t}\n\t}\n\tprivate _reset() {\n\t\tthis._render_target = this._create_render_target();\n\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\tthis._pixelBuffer = this._create_pixel_buffer();\n\t}\n\tprivate _create_pixel_buffer() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\t\treturn new Float32Array(width * height * 4);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\t\t// await this.assembler_controller.assign_uniform_values();\n\n\t\tthis.render_on_target();\n\t}\n\n\tshaders_by_name() {\n\t\treturn {\n\t\t\tfragment: this._fragment_shader,\n\t\t};\n\t}\n\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\t// && !this.pv.locked){\n\t\t\t// this._texture_material = undefined;\n\t\t\tawait this.run_assembler();\n\t\t\t// const fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\t// const uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\t// if (fragment_shader && uniforms) {\n\t\t\t// \t// await this.eval_params(this._new_params);\n\t\t\t// \tthis._fragment_shader = fragment_shader;\n\t\t\t// \tthis._uniforms = uniforms;\n\t\t\t// } else {\n\t\t\t// \tthrow 'STOP';\n\t\t\t// }\n\t\t\tthis.assembler_controller.post_compile();\n\t\t}\n\t}\n\tprivate async run_assembler() {\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node allowed');\n\t\t\treturn;\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tthis.assembler_controller.assembler.set_root_nodes([output_node]);\n\n\t\t\t// main compilation\n\t\t\tawait this.assembler_controller.assembler.update_fragment_shader();\n\n\t\t\t// receives fragment and uniforms\n\t\t\tconst fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\tconst uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\tif (fragment_shader && uniforms) {\n\t\t\t\tthis._fragment_shader = fragment_shader;\n\t\t\t\tthis._uniforms = uniforms;\n\t\t\t}\n\n\t\t\t// TODO: remove this once the scene knows how to re-render\n\t\t\t// the render target if it is .uniforms_time_dependent()\n\t\t\tif (this.assembler_controller.assembler.uniforms_time_dependent()) {\n\t\t\t\tthis.states.time_dependent.force_time_dependent();\n\t\t\t} else {\n\t\t\t\tthis.states.time_dependent.unforce_time_dependent();\n\t\t\t}\n\t\t}\n\n\t\tif (this._fragment_shader && this._uniforms) {\n\t\t\tthis._texture_material.fragmentShader = this._fragment_shader;\n\t\t\tthis._texture_material.uniforms = this._uniforms;\n\t\t\tthis._texture_material.needsUpdate = true;\n\t\t\tthis._texture_material.uniforms.resolution = {\n\t\t\t\tvalue: this.pv.resolution,\n\t\t\t};\n\t\t}\n\n\t\t// this._compile_required = false;\n\t}\n\n\tprivate _create_renderer(render_target: WebGLRenderTarget) {\n\t\tconst renderer = new WebGLRenderer({antialias: true});\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\t// document.body.appendChild( renderer.domElement )\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setRenderTarget(render_target);\n\n\t\treturn renderer;\n\t}\n\n\tasync render_on_target() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\n\t\t// var passThruUniforms = {\n\t\t// \tpassThruTexture: { value: null }\n\t\t// };\n\n\t\tif (!(this._renderer && this._render_target)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._renderer.clear();\n\t\tthis._renderer.render(this._texture_scene, this._texture_camera);\n\t\t// renderer.setClearColor( 0x000000 ) // cancels the bg color\n\n\t\t//read the pixel\n\t\tthis._pixelBuffer = this._pixelBuffer || this._create_pixel_buffer();\n\t\tthis._renderer.readRenderTargetPixels(this._render_target, 0, 0, width, height, this._pixelBuffer);\n\n\t\t// renderer.setRenderTarget( null );\n\n\t\t// var pixelBuffer2 = new Uint8Array( width * height * 4 );\n\t\t// var pixelBuffer2 = Uint8Array.from(pixelBuffer)\n\n\t\t// be careful about the type FloatType\n\t\t// as this may require webgl extensions\n\t\t// see https://threejs.org/docs/#api/en/textures/DataTexture\n\t\tconst texture = new DataTexture(this._pixelBuffer, width, height, RGBAFormat, FloatType);\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// this._texture.needsUpdate = true;\n\n\t\tawait CoreSleep.sleep(2000);\n\n\t\tif (texture) {\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\n\t\t// this.set_texture(this._texture);\n\t\t// this.cook_controller.end_cook();\n\t}\n\n\tprivate _create_render_target() {\n\t\tconst wrapS = ClampToEdgeWrapping;\n\t\tconst wrapT = ClampToEdgeWrapping;\n\n\t\tconst minFilter = NearestFilter;\n\t\tconst magFilter = NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget(this.pv.resolution.x, this.pv.resolution.y, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false,\n\t\t});\n\t\treturn renderTarget;\n\t}\n\n\t// create_material(fragment_shader:string, uniforms:IUniforms) {\n\t// \tvar material = new ShaderMaterial({\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: PASS_THROUGH_SHADER,\n\t// \t\tfragmentShader: fragment_shader\n\t// \t});\n\n\t// \t// addResolutionDefine( material );\n\n\t// \treturn material;\n\t// }\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class TextureContainer extends TypedContainer<ContainableMap['TEXTURE']> {\n\t// _content: Texture;\n\tset_content(content: ContainableMap['TEXTURE']) {\n\t\tsuper.set_content(content);\n\t}\n\n\t// set_texture(texture: Texture){\n\t// \tif (this._content != null) {\n\t// \t\tthis._content.dispose();\n\t// \t}\n\t// \tthis.set_content(texture);\n\t// }\n\ttexture(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content_cloned(): ContainableMap['TEXTURE'] | undefined {\n\t\tconsole.log('clone', this._content);\n\t\tconst texture = this._content?.clone();\n\t\tif (texture) {\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t\treturn texture;\n\t}\n\n\tobject() {\n\t\treturn this.texture();\n\t}\n\n\tinfos() {\n\t\tif (this._content != null) {\n\t\t\treturn [this._content];\n\t\t}\n\t}\n\tresolution(): [number, number] {\n\t\tif (this._content) {\n\t\t\tif (this._content.image) {\n\t\t\t\treturn [this._content.image.width, this._content.image.height];\n\t\t\t}\n\t\t}\n\t\treturn [-1, -1];\n\t}\n}\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// export interface BypassOptions {\n// \thas_bypass_flag?: boolean;\n// }\n\nexport class BypassFlag extends BaseFlag {\n\tprotected _state: boolean = false;\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n\t\tthis.node.set_dirty();\n\t}\n}\n\n// export function Bypass<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\t_has_bypass_flag: boolean = true;\n// \t\t_bypass_flag: boolean = false;\n\n// \t\t_init_bypass_flag(options: BypassOptions = {}) {\n// \t\t\tif (options['has_bypass_flag'] == null) {\n// \t\t\t\toptions['has_bypass_flag'] = true;\n// \t\t\t}\n\n// \t\t\tthis._has_bypass_flag = options['has_bypass_flag'];\n// \t\t\tthis._bypass_flag = false;\n// \t\t}\n\n// \t\thas_bypass_flag(): boolean {\n// \t\t\treturn this._has_bypass_flag;\n// \t\t}\n\n// \t\tis_bypassed(): boolean {\n// \t\t\treturn this._bypass_flag;\n// \t\t}\n\n// \t\tset_bypass_flag(state: boolean) {\n// \t\t\tif (state == null) {\n// \t\t\t\tstate = true;\n// \t\t\t}\n// \t\t\tif (state !== this._bypass_flag) {\n// \t\t\t\tthis._bypass_flag = state;\n// \t\t\t\tthis.self.emit('bypass_flag_update');\n// \t\t\t\tthis.self.set_dirty();\n// \t\t\t\t// this.post_set_bypass_flag()\n// \t\t\t}\n// \t\t}\n\n// \t\t// post_process_container_request_as_bypassed(input_node: BaseNode){}\n// \t\t// post_set_bypass_flag(){}\n\n// \t\ttoggle_bypass_flag() {\n// \t\t\tthis.set_bypass_flag(!this.is_bypassed());\n// \t\t}\n// \t};\n// }\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\nexport class DisplayFlag extends BaseFlag {\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n\t\t// this.node.set_dirty();\n\t}\n}\n","import {ParamTypeToConnectionPointTypeMap} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {BaseNamedConnectionPointType, TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\n// import {ParamValue} from '../../../params/types/ParamValue';\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamValueToDefaultConverter} from '../../utils/params/ParamValueToDefaultConverter';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValueSerialized} from '../../../params/types/ParamInitValueSerialized';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\n\nexport class GlNodeSpareParamsController {\n\tprivate _allow_inputs_created_from_params: boolean = true;\n\tprivate _inputless_param_names: string[] | undefined;\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tdisallow_inputs_created_from_params() {\n\t\tthis._allow_inputs_created_from_params = false;\n\t}\n\n\tinitialize_node() {\n\t\tthis.node.params.set_post_create_params_hook(this.create_inputs_from_params.bind(this));\n\t}\n\n\tcreate_inputs_from_params() {\n\t\tif (!this._allow_inputs_created_from_params) {\n\t\t\treturn;\n\t\t}\n\t\tconst connections: BaseNamedConnectionPointType[] = [];\n\t\tfor (let param_name of this.node.params.names) {\n\t\t\tlet add_input = true;\n\t\t\tif (\n\t\t\t\tthis._inputless_param_names &&\n\t\t\t\tthis._inputless_param_names.length > 0 &&\n\t\t\t\tthis._inputless_param_names.includes(param_name)\n\t\t\t) {\n\t\t\t\tadd_input = false;\n\t\t\t}\n\t\t\tif (add_input) {\n\t\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\t\tif (param && !param.parent_param) {\n\t\t\t\t\t\tconst connection_type = ParamTypeToConnectionPointTypeMap[param.type];\n\t\t\t\t\t\tif (connection_type) {\n\t\t\t\t\t\t\tconst connection = new TypedNamedConnectionPoint(param.name, connection_type);\n\t\t\t\t\t\t\tconnections.push(connection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.node.io.inputs.set_named_input_connection_points(connections);\n\t}\n\n\tset_inputless_param_names(names: string[]) {\n\t\treturn (this._inputless_param_names = names);\n\t}\n\n\tcreate_spare_parameters() {\n\t\tconst raw_input_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst default_value_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst current_param_names: string[] = this.node.params.spare_names;\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\tfor (let param_name of current_param_names) {\n\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\tif (param) {\n\t\t\t\t\traw_input_serialized_by_param_name.set(param_name, param.raw_input_serialized);\n\t\t\t\t\tdefault_value_serialized_by_param_name.set(param_name, param.default_value_serialized);\n\t\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let connection_point of this.node.io.inputs.named_input_connection_points) {\n\t\t\tconst param_name = connection_point.name;\n\t\t\tconst param_type: ParamType = connection_point.param_type;\n\t\t\tlet init_value = connection_point.init_value;\n\t\t\t// let raw_input: ParamInitValueSerialized= null\n\n\t\t\t// const raw_input = raw_input_serialized_by_param_name.get(param_name);\n\t\t\tconst last_param_init_value = default_value_serialized_by_param_name.get(param_name);\n\t\t\t// if (last_param_raw_input != null && last_param_init_value != null) {\n\t\t\t// init_value = ParamValueToDefaultConverter.from_value(param_type, last_param_raw_input);\n\t\t\t// if (init_value == null) {\n\t\t\tconst default_value_from_name = this.node.gl_input_default_value(param_name);\n\n\t\t\t// TODO: this should really store the largest set value\n\t\t\t// (as in the ones with the most components)\n\t\t\t// so that for an Add Gl Node, if I set a vec4 to [1,2,3,4]\n\t\t\t// and then set an input type, which will transform the param to a float\n\t\t\t// it will have a value of 1.\n\t\t\t// But if I then set it to a vec4 again, it will remember [1,2,3,4]\n\t\t\tif (default_value_from_name != null) {\n\t\t\t\tinit_value = default_value_from_name;\n\t\t\t} else {\n\t\t\t\tif (last_param_init_value != null) {\n\t\t\t\t\tinit_value = last_param_init_value;\n\t\t\t\t} else {\n\t\t\t\t\tinit_value = connection_point.init_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lodash_isArray(connection_point.init_value) && lodash_isNumber(init_value)) {\n\t\t\t\tconst array = new Array(connection_point.init_value.length) as Number2;\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] = init_value;\n\t\t\t\t}\n\t\t\t\tinit_value = array;\n\t\t\t}\n\n\t\t\tif (init_value != null) {\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: lodash_clone(init_value as any),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tspare: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (!this.node.scene.loading_controller.is_loading) {\n\t\t\tthis.node.params.update_params(params_update_options);\n\n\t\t\tfor (let spare_param of this.node.params.spare) {\n\t\t\t\tif (!spare_param.parent_param) {\n\t\t\t\t\tconst raw_input = raw_input_serialized_by_param_name.get(spare_param.name);\n\t\t\t\t\tif (raw_input) {\n\t\t\t\t\t\tspare_param.set(raw_input as any);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {SceneJsonExporter} from './Scene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {JsonExportDispatcher} from './Dispatcher';\nimport {ParamJsonExporterData} from './Param';\nimport {ParamType} from '../../../poly/ParamType';\n\ninterface NamedInputData {\n\tname: string;\n\tnode: string;\n\toutput: string;\n}\ntype IndexedInputData = string | null;\nexport type InputData = NamedInputData | IndexedInputData;\n\ninterface FlagsData {\n\tbypass?: boolean;\n\tdisplay?: boolean;\n}\n\nexport interface NodeJsonExporterData {\n\ttype: string;\n\tnodes: Dictionary<NodeJsonExporterData>;\n\tchildren_context: NodeContext;\n\tparams?: Dictionary<ParamJsonExporterData<ParamType>>;\n\tinputs?: InputData[];\n\tselection?: string[];\n\tflags?: FlagsData;\n\toverride_clonable_state: boolean;\n}\n\nexport interface NodeJsonExporterUIData {\n\tpos?: Number2;\n\tcomment?: string;\n\tnodes: Dictionary<NodeJsonExporterUIData>;\n}\n\nexport class NodeJsonExporter<T extends BaseNodeType> {\n\tprivate _data: NodeJsonExporterData | undefined; // = {} as NodeJsonExporterData;\n\tconstructor(protected _node: T) {}\n\n\tdata(): NodeJsonExporterData {\n\t\tif (!this.is_root()) {\n\t\t\tthis._node.scene.nodes_controller.register_node_context_signature(this._node);\n\t\t}\n\t\tthis._data = {\n\t\t\ttype: this._node.type,\n\t\t} as NodeJsonExporterData;\n\n\t\t// const required_imports = this._node.required_imports()\n\t\t// if(required_imports){\n\t\t// \tthis._data['required_imports'] = required_imports\n\t\t// }\n\n\t\tconst nodes_data = this.nodes_data();\n\t\tif (Object.keys(nodes_data).length > 0) {\n\t\t\tthis._data['nodes'] = nodes_data;\n\n\t\t\t// required by the Store::Scene::Exporter.rb\n\t\t\tconst context = this._node.children_controller?.context;\n\t\t\tif (context) {\n\t\t\t\tthis._data['children_context'] = context;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is_root()) {\n\t\t\tthis._data['params'] = this.params_data();\n\t\t\t//data['custom'] = []\n\t\t\tthis._data['inputs'] = this.inputs_data();\n\t\t}\n\n\t\t// TODO: does that create flags automatically? it should not\n\t\tif (this._node.flags) {\n\t\t\tthis._data['flags'] = {};\n\t\t\tif (this._node.flags.has_bypass()) {\n\t\t\t\tif (this._node.flags.bypass?.active) {\n\t\t\t\t\tthis._data['flags']['bypass'] = this._node.flags.bypass.active;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._node.flags.has_display()) {\n\t\t\t\tthis._data['flags']['display'] = this._node.flags.display?.active;\n\t\t\t}\n\t\t}\n\n\t\tif (this._node.children_allowed()) {\n\t\t\tconst selection = this._node.children_controller?.selection;\n\t\t\tif (selection && this._node.children().length > 0) {\n\t\t\t\t// only save the nodes that are still present, in case the selection just got deleted\n\t\t\t\tconst selected_children: BaseNodeType[] = [];\n\t\t\t\tconst selected_ids: Dictionary<boolean> = {};\n\t\t\t\tfor (let selected_node of selection.nodes()) {\n\t\t\t\t\tselected_ids[selected_node.graph_node_id] = true;\n\t\t\t\t}\n\t\t\t\tfor (let child of this._node.children()) {\n\t\t\t\t\tif (child.graph_node_id in selected_ids) {\n\t\t\t\t\t\tselected_children.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data['selection'] = selected_children.map((n) => n.name);\n\t\t\t}\n\t\t}\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = this._node.io.inputs.override_clonable_state();\n\t\t\tif (override) {\n\t\t\t\tthis._data['override_clonable_state'] = override;\n\t\t\t}\n\t\t}\n\n\t\t// custom\n\t\tthis.add_custom();\n\n\t\treturn this._data;\n\t}\n\n\tui_data(): NodeJsonExporterUIData {\n\t\tconst data: NodeJsonExporterUIData = {} as NodeJsonExporterUIData;\n\t\tif (!this.is_root()) {\n\t\t\tconst ui_data = this._node.ui_data;\n\t\t\tdata['pos'] = ui_data.position.toArray() as Number2;\n\t\t\tconst comment = ui_data.comment;\n\t\t\tif (comment) {\n\t\t\t\tdata['comment'] = SceneJsonExporter.sanitize_string(comment);\n\t\t\t}\n\t\t}\n\t\tconst children = this._node.children();\n\t\tif (children.length > 0) {\n\t\t\tdata['nodes'] = {};\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tdata['nodes'][child.name] = node_exporter.ui_data();\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate is_root() {\n\t\treturn this._node.parent === null && this._node.graph_node_id == this._node.root.graph_node_id;\n\t}\n\n\tprotected inputs_data() {\n\t\tconst data: InputData[] = [];\n\t\t// Object.keys(this._node.io.inputs.inputs()).forEach((input_index) => {\n\t\tthis._node.io.inputs.inputs().forEach((input, input_index) => {\n\t\t\t// const input = this._node.io.inputs.input(input_index);\n\t\t\tif (input) {\n\t\t\t\t// const connection_point = this._node.io.inputs.named_input_connection_points;\n\t\t\t\tconst connection = this._node.io.connections.input_connection(input_index)!;\n\t\t\t\tif (this._node.io.inputs.has_named_inputs) {\n\t\t\t\t\tconst input_name = this._node.io.inputs.named_input_connection_points[input_index].name;\n\t\t\t\t\t// const output_index = input_connections[input_index].output_index();\n\t\t\t\t\tconst output_index = connection.output_index;\n\t\t\t\t\tconst output_name = input.io.outputs.named_output_connection_points[output_index].name;\n\t\t\t\t\tdata.push({name: input_name, node: input.name, output: output_name});\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(input.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tprotected params_data() {\n\t\tconst data: Dictionary<ParamJsonExporterData<ParamType>> = {};\n\n\t\tfor (let param_name of this._node.params.names) {\n\t\t\tconst param = this._node.params.get(param_name);\n\t\t\tif (param && !param.parent_param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tdata[param.name] = params_data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprotected nodes_data() {\n\t\tconst data: Dictionary<NodeJsonExporterData> = {};\n\t\tfor (let child of this._node.children()) {\n\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.json_exporter()\n\t\t\tdata[child.name] = node_exporter.data();\n\t\t}\n\t\treturn data;\n\t}\n\n\tprotected add_custom() {}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {TypedNumericParam} from '../../../../params/_Numeric';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamNumericJsonExporter extends ParamJsonExporter<TypedNumericParam<ParamType>> {\n\tadd_main() {\n\t\t// if (this._param.has_expression() && this._param.expression_controller?.expression) {\n\t\t// \t// const escaped_expression = this._param.expression().replace(/'/g, \"\\\\'\");\n\t\t// \tthis._data['expression'] = this._param.expression_controller?.expression;\n\t\t// } else {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t\t// }\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {SceneJsonExporter} from '../Scene';\n\nexport class ParamOperatorPathJsonExporter extends ParamJsonExporter<OperatorPathParam> {\n\tadd_main() {\n\t\tlet val = this._param.raw_input;\n\t\t// val = val.replace(/'/g, \"\\\\'\");\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","// import lodash_isString from 'lodash/isString'\nimport {ParamJsonExporter} from '../Param';\nimport {SceneJsonExporter} from '../Scene';\nimport {StringParam} from '../../../../params/String';\n\nexport class ParamStringJsonExporter extends ParamJsonExporter<StringParam> {\n\tadd_main() {\n\t\t// let val = this._param.input_value();\n\t\tlet val = this._param.raw_input;\n\t\t// if (lodash_isString(val)){\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\t\t// }\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {RampParam} from '../../../../params/Ramp';\n\nexport class ParamRampJsonExporter extends ParamJsonExporter<RampParam> {\n\tadd_main() {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\nimport {IUniforms} from '../../../../../../core/geometry/Material';\n// import {GlobalsTextureHandler} from '../../../../../Engine/Node/Gl/Assembler/Globals/Texture'\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport TemplateDefault from '../../templates/textures/Default.frag.glsl';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\n// import {BaseGlNodeType} from '../../../_Base';\n\nexport class ShaderAssemblerTexture extends BaseGlShaderAssembler {\n\tprivate _uniforms: IUniforms | undefined;\n\n\tget _template_shader() {\n\t\treturn {\n\t\t\tfragmentShader: TemplateDefault,\n\t\t\tvertexShader: undefined,\n\t\t\tuniforms: undefined,\n\t\t};\n\t}\n\n\t// async compile() {\n\t// \tawait this.update_fragment_shader();\n\t// }\n\n\tfragment_shader() {\n\t\treturn this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tuniforms() {\n\t\treturn this._uniforms;\n\t}\n\t// _create_material() {\n\t// \treturn undefined;\n\t// }\n\n\tasync update_fragment_shader() {\n\t\tthis._lines = new Map();\n\t\tthis._shaders_by_name = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\tconst template = this._template_shader.fragmentShader;\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\n\t\tthis._uniforms = this._uniforms || {};\n\t\tthis.add_uniforms(this._uniforms);\n\t\t// const new_uniforms = this.build_uniforms({}, this._uniforms || {});\n\t\t// this._uniforms = new_uniforms;\n\t\t// this._uniforms = this._uniforms || {};\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\t\t// \tthis._uniforms[uniform_name] = new_uniforms[uniform_name];\n\t\t// }\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\n\t\t// That's actually useless, since this doesn't make the texture recook\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst id = this._gl_parent_node.graph_node_id;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tif (this._uniforms) {\n\t\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(id, this._uniforms as IUniformsWithTime);\n\t\t\t}\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(id);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t\t// new Connection.Vec2('resolution'),\n\t\t]);\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn [new ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [])];\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t\tdefault: '1.0',\n\t\t\t}),\n\t\t];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == 'fragment') {\n\t\t\tbody_lines.push(`vec2 ${var_name} = vec2(gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y)`);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\t// add_export_body_line(\n\t// \texport_node: BaseGlNodeType,\n\t// \tshader_name: ShaderName,\n\t// \tinput_name: string,\n\t// \tinput: BaseGlNodeType,\n\t// \tvariable_name: string\n\t// ) {\n\t// \t// let input\n\t// \t// let variable_name\n\t// \t// if(export_node.type() == 'output'){\n\t// \t// \tinput = export_node.named_input(input_name)\n\t// \t// \tvariable_name = input_name\n\t// \t// } else {\n\t// \t// \t// if attribute\n\t// \t// \tinput = export_node.connected_named_input()\n\t// \t// \tvariable_name = export_node.attribute_name()\n\t// \t// }\n\n\t// \tif (input) {\n\t// \t\tconst var_input = export_node.variable_for_input(input_name);\n\t// \t\tconst new_var = ThreeToGl.vector3(var_input);\n\t// \t\tif (new_var) {\n\t// \t\t\t// const texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\t\t// \texport_node,\n\t// \t\t\t// \tshader_name,\n\t// \t\t\t// \tvariable_name\n\t// \t\t\t// )\n\t// \t\t\tconst texture_variable = this._texture_allocations_controller.variable(variable_name);\n\t// \t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t// \t\t\tif (texture_variable.allocation().shader_name() == shader_name) {\n\t// \t\t\t\tconst component = texture_variable.component();\n\n\t// \t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t// \t\t\t\texport_node.add_body_lines([line], shader_name);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\t// add_import_body_line(\n\t// \timport_node: BaseNodeGl,\n\t// \tshader_name: ShaderName,\n\t// \toutput_name: string,\n\t// \tvariable_name: string\n\t// \t){\n\t// \t\tthrow \"not sure I want to use this method anymore\"\n\t// \tconst named_output = import_node.named_output_by_name(output_name)\n\t// \tconst gl_type = named_output.gl_type()\n\n\t// \tconst map_name = `texture_${shader_name}`\n\t// \tconst definition = new Definition.Uniform(import_node, 'sampler2D', map_name)\n\t// \t// definitions_by_shader_name[import_node._shader_name].push(definition)\n\t// \timport_node.add_definitions([definition])\n\n\t// \tconst var_name = import_node.gl_var_name(output_name)\n\n\t// \tconst texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\timport_node,\n\t// \t\tshader_name,\n\t// \t\tvariable_name\n\t// \t)\n\t// \tif(!texture_variable){\n\t// \t\tthis._texture_allocations_controller.print(this._gl_parent_node.scene())\n\t// \t}\n\t// \tconst component = texture_variable.component()\n\t// \tconst lines = [\n\t// \t\t`${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).${component}`,\n\t// \t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t]\n\t// \timport_node.add_body_lines(lines, shader_name)\n\t// }\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst input_names = this.input_names_for_shader_name(\n\t\t\toutput_node,\n\t\t\tshaders_collection_controller.current_shader_name\n\t\t);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst gl_var = output_node.variable_for_input(input_name);\n\n\t\t\t\t\tlet body_line: string | undefined;\n\t\t\t\t\tif (input_name == 'color') {\n\t\t\t\t\t\tbody_line = `diffuseColor.xyz = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (input_name == 'alpha') {\n\t\t\t\t\t\tbody_line = `diffuseColor.a = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (body_line) {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [body_line]);\n\t\t\t\t\t}\n\t\t\t\t\t// this.add_export_body_line(\n\t\t\t\t\t// \toutput_node,\n\t\t\t\t\t// \tshaders_collection_controller.current_shader_name,\n\t\t\t\t\t// \tinput_name,\n\t\t\t\t\t// \tinput,\n\t\t\t\t\t// \tvariable_name\n\t\t\t\t\t// \t)\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// set_node_lines_attribute(attribute_node: Attribute, shader_name: ShaderName){\n\n\t// \tif(attribute_node.is_importing()){\n\t// \t\tconst gl_type = attribute_node.gl_type()\n\t// \t\tconst attribute_name = attribute_node.attribute_name()\n\t// \t\tconst new_value = this.globals_handler().read_attribute(\n\t// \t\t\tattribute_node,\n\t// \t\t\tgl_type,\n\t// \t\t\tattribute_name,\n\t// \t\t\tshader_name\n\t// \t\t\t)\n\t// \t\tconst var_name = attribute_node.gl_var_name(Attribute.output_name())\n\t// \t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`\n\t// \t\tattribute_node.add_body_lines([body_line])\n\n\t// \t\t// re-export to ensure it is available on next frame\n\t// \t\tconst texture_variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\tif(texture_variable.allocation().shader_name() == shader_name){\n\n\t// \t\t\tconst variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\t\tconst component = variable.component()\n\t// \t\t\tattribute_node.add_body_lines([\n\t// \t\t\t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t\t\t])\n\t// \t\t}\n\n\t// \t\t// this.add_import_body_line(\n\t// \t\t// \tattribute_node,\n\t// \t\t// \tshader_name,\n\t// \t\t// \tAttribute.output_name(),\n\t// \t\t// \tattribute_node.attribute_name()\n\t// \t\t// \t)\n\t// \t}\n\t// \tif(attribute_node.is_exporting()){\n\t// \t\tconst input = attribute_node.connected_named_input()\n\t// \t\tconst variable_name = attribute_node.attribute_name()\n\n\t// \t\tthis.add_export_body_line(\n\t// \t\t\tattribute_node,\n\t// \t\t\tshader_name,\n\t// \t\t\tAttribute.input_name(),\n\t// \t\t\tinput,\n\t// \t\t\tvariable_name\n\t// \t\t\t)\n\t// \t}\n\t// }\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst body_lines: string[] = [];\n\t\tconst definitions: UniformGLDefinition[] = [];\n\n\t\t// const shader_config = this.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\t// const globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinitions.push(new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name));\n\t\t\t\t\t// vertex_definitions.push(definition)\n\t\t\t\t\t// fragment_definitions.push(definition)\n\t\t\t\t\t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t\tbody_lines.push(`float ${var_name} = ${output_name}`);\n\t\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t\t// }\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\t// body_lines.push(body_line)\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\t\t\t\t// default:\n\t\t\t\t// \t// this.add_import_body_line(globals_node, shader_name, output_name, output_name)\n\t\t\t\t// \tconst named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// \tconst gl_type = named_output.gl_type()\n\n\t\t\t\t// \tconst attrib_read = this.globals_handler().read_attribute(\n\t\t\t\t// \t\tglobals_node,\n\t\t\t\t// \t\tgl_type,\n\t\t\t\t// \t\toutput_name,\n\t\t\t\t// \t\tshader_name\n\t\t\t\t// \t)\n\t\t\t\t// \tbody_line = `${gl_type} ${var_name} = ${attrib_read}`\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// \t//\n\n\t\t\t\t// \t// const map_name = `texture_${output_name}`\n\t\t\t\t// \t// definition = new Definition.Uniform(globals_node, 'sampler2D', map_name)\n\t\t\t\t// \t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t// \t// body_line = `${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).xyz`\n\n\t\t\t\t// \t// // // if(dependencies.length == 0){\n\t\t\t\t// \t// body_lines.push(body_line)\n\t\t\t\t// \t// }\n\t\t\t}\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tglobals_node.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tglobals_node.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// globals_node.add_body_lines(body_lines)\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport {BaseGlNodeType} from '../../_Base';\nimport {TypedNodeTraverser} from '../../../utils/shaders/NodeTraverser';\nimport {BaseNodeType} from '../../../_Base';\nimport {BaseGlShaderAssembler} from '../assemblers/_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {GLDefinitionType, BaseGLDefinition} from '../../utils/GLDefinition';\nimport {TypedGLDefinitionCollection} from '../../utils/GLDefinitionCollection';\nimport {ParamConfigsController} from '../../../../nodes/utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './ShadersCollectionController';\nimport {CodeFormatter} from './CodeFormatter';\n\nimport {LineType} from './LineType';\n\nexport class CodeBuilder {\n\t_param_configs_controller: ParamConfigsController = new ParamConfigsController();\n\t_param_configs_set_allowed: boolean = true;\n\n\tprivate _shaders_collection_controller: ShadersCollectionController | undefined;\n\t_lines: Map<ShaderName, Map<LineType, string[]>> = new Map();\n\t_function_declared: Map<ShaderName, Map<string, boolean>> = new Map();\n\n\tconstructor(private _assembler: BaseGlShaderAssembler, private _gl_parent_node: BaseNodeType) {}\n\n\tasync build_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this._assembler, this._gl_parent_node);\n\t\tnode_traverser.traverse(root_nodes);\n\n\t\tconst nodes_by_shader_name: Map<ShaderName, BaseGlNodeType[]> = new Map();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tnodes_by_shader_name.set(shader_name, node_traverser.nodes_for_shader_name(shader_name));\n\t\t}\n\t\tconst sorted_nodes = node_traverser.sorted_nodes();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst root_nodes_for_shader = this._assembler.root_nodes_by_shader_name(shader_name);\n\t\t\t// const leaf_nodes_for_shader = this._assembler.leaf_nodes_by_shader_name(shader_name);\n\n\t\t\t// keep track of which nodes are both leaf and root, and do not use their code twice\n\t\t\t// as this may happen with an attribute node, when used as both import and export\n\t\t\t// TODO: that seems useless, as I surely should be able to filter duplicates if needed\n\n\t\t\t// ensure nodes are unique\n\t\t\t// const node_ids: Map<string, boolean> = new Map();\n\t\t\t// nodes_by_shader_name.forEach((nodes, shader_name) => {\n\t\t\t// \tfor (let node of nodes) {\n\t\t\t// \t\tnode_ids.set(node.graph_node_id, true);\n\t\t\t// \t}\n\t\t\t// });\n\n\t\t\tfor (let root_node of root_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[root_node.graph_node_id()]){\n\t\t\t\t// if (!node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tMapUtils.push_on_array_at_entry(nodes_by_shader_name, shader_name, root_node);\n\t\t\t\t// node_ids.set(root_node.graph_node_id, true);\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t}\n\t\t\t// for (let leaf_node of leaf_nodes_for_shader) {\n\t\t\t// if(!both_leaf_and_root_nodes_by_id[leaf_node.graph_node_id()]){\n\t\t\t// if (!node_ids.get(leaf_node.graph_node_id)) {\n\t\t\t// MapUtils.unshift_on_array_at_entry(nodes_by_shader_name, shader_name, leaf_node);\n\t\t\t// }\n\t\t\t// }\n\t\t\t// }\n\t\t}\n\n\t\t// ensure nodes are not added if already present\n\t\tconst sorted_node_ids: Map<string, boolean> = new Map();\n\t\tfor (let node of sorted_nodes) {\n\t\t\tsorted_node_ids.set(node.graph_node_id, true);\n\t\t}\n\n\t\tfor (let root_node of root_nodes) {\n\t\t\tif (!sorted_node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tsorted_nodes.push(root_node);\n\t\t\t\tsorted_node_ids.set(root_node.graph_node_id, true);\n\t\t\t}\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\t// node.set_assembler(this._assembler);\n\t\t\tnode.reset_code();\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\t// const param_promises = sorted_nodes.map(node=>{\n\t\t// \treturn node.eval_all_params()\n\t\t// })\n\t\t// await Promise.all(param_promises)\n\n\t\tthis._shaders_collection_controller = new ShadersCollectionController(\n\t\t\tthis.shader_names(),\n\t\t\tthis.shader_names()[0]\n\t\t);\n\t\tthis.reset();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst nodes = lodash_uniq(nodes_by_shader_name.get(shader_name));\n\t\t\tthis._shaders_collection_controller.set_current_shader_name(shader_name);\n\t\t\tif (nodes) {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\t// node.set_shader_name(shader_name);\n\t\t\t\t\tif (this._param_configs_set_allowed) {\n\t\t\t\t\t\tnode.set_param_configs();\n\t\t\t\t\t}\n\t\t\t\t\tnode.set_lines(this._shaders_collection_controller);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// fragment_nodes.forEach(node=>{\n\t\t// \tnode.set_shader_name(ShaderName.FRAGMENT)\n\t\t// \tnode.set_param_configs()\n\t\t// \tnode.set_lines()\n\t\t// })\n\t\tif (this._param_configs_set_allowed) {\n\t\t\tthis.set_param_configs(sorted_nodes);\n\t\t}\n\t\tthis.set_code_lines(sorted_nodes);\n\t}\n\n\tdisallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = false;\n\t}\n\tallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = true;\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\n\tprivate reset() {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst lines_map = new Map();\n\t\t\t// for (let line_type of LINE_TYPES) {\n\t\t\t// \tlines_map.set(line_type, []);\n\t\t\t// }\n\t\t\tthis._lines.set(shader_name, lines_map);\n\t\t\tthis._function_declared.set(shader_name, new Map());\n\t\t}\n\t}\n\n\tparam_configs() {\n\t\treturn this._param_configs_controller.list || [];\n\t}\n\tlines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this._lines.get(shader_name)!.get(line_type);\n\t}\n\tall_lines() {\n\t\treturn this._lines;\n\t}\n\n\tset_param_configs(nodes: BaseGlNodeType[]) {\n\t\tthis._param_configs_controller.reset();\n\t\tfor (let node of nodes) {\n\t\t\tconst param_configs = node.param_configs();\n\t\t\tif (param_configs) {\n\t\t\t\tfor (let param_config of param_configs) {\n\t\t\t\t\tthis._param_configs_controller.push(param_config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_code_lines(nodes: BaseGlNodeType[]) {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\t// nodes.forEach((node, i)=>{\n\t\t\tthis.add_code_lines(nodes, shader_name);\n\t\t\t// })\n\t\t}\n\t}\n\n\tadd_code_lines(nodes: BaseGlNodeType[], shader_name: ShaderName) {\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.FUNCTION, LineType.FUNCTION_DECLARATION);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.UNIFORM, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.VARYING, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.ATTRIBUTE, LineType.DEFINE);\n\n\t\tthis.add_code_line_for_nodes_and_line_type(nodes, shader_name, LineType.BODY);\n\t}\n\n\tprivate add_definitions(\n\t\tnodes: BaseGlNodeType[],\n\t\tshader_name: ShaderName,\n\t\tdefinition_type: GLDefinitionType,\n\t\tline_type: LineType\n\t) {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst definitions = [];\n\t\tfor (let node of nodes) {\n\t\t\tlet node_definitions = this._shaders_collection_controller.definitions(shader_name, node);\n\t\t\tif (node_definitions) {\n\t\t\t\tnode_definitions = node_definitions.filter((d) => d.definition_type == definition_type);\n\t\t\t\tfor (let definition of node_definitions) {\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (definitions.length > 0) {\n\t\t\tconst collection = new TypedGLDefinitionCollection<GLDefinitionType>(definitions);\n\t\t\tconst uniq_definitions = collection.uniq();\n\t\t\tif (collection.errored) {\n\t\t\t\t// TODO: handle error\n\t\t\t\tthrow `code builder error: ${collection.error_message}`;\n\t\t\t}\n\n\t\t\tconst definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tfor (let definition of uniq_definitions) {\n\t\t\t\tconst node_id = definition.node.graph_node_id;\n\t\t\t\tif (!node_ids.has(node_id)) {\n\t\t\t\t\tnode_ids.set(node_id, true);\n\t\t\t\t}\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_node_id, node_id, definition);\n\t\t\t}\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tnode_ids.forEach((boolean: boolean, node_id: string) => {\n\t\t\t\tconst definitions = definitions_by_node_id.get(node_id);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tconst first_definition = definitions[0];\n\n\t\t\t\t\tif (first_definition) {\n\t\t\t\t\t\tconst comment = CodeFormatter.node_comment(first_definition.node, line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\n\t\t\t\t\t\tfor (let definition of definitions) {\n\t\t\t\t\t\t\tconst line = CodeFormatter.line_wrap(definition.line, line_type);\n\t\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tadd_code_line_for_nodes_and_line_type(nodes: BaseGlNodeType[], shader_name: ShaderName, line_type: LineType) {\n\t\tnodes = nodes.filter((node) => {\n\t\t\tif (this._shaders_collection_controller) {\n\t\t\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\t\t\t\treturn lines && lines.length > 0;\n\t\t\t}\n\t\t});\n\n\t\tvar nodes_count = nodes.length;\n\t\tfor (let i = 0; i < nodes_count; i++) {\n\t\t\tconst is_last = i == nodes.length - 1;\n\t\t\tthis.add_code_line_for_node_and_line_type(nodes[i], shader_name, line_type, is_last);\n\t\t}\n\t}\n\tadd_code_line_for_node_and_line_type(\n\t\tnode: BaseGlNodeType,\n\t\tshader_name: ShaderName,\n\t\tline_type: LineType,\n\t\tis_last: boolean\n\t): void {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\n\t\tif (lines && lines.length > 0) {\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tconst comment = CodeFormatter.node_comment(node, line_type);\n\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\t\t\tlodash_uniq(lines).forEach((line) => {\n\t\t\t\tline = CodeFormatter.line_wrap(line, line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t});\n\t\t\tif (!(line_type == LineType.BODY && is_last)) {\n\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../../params/types/ParamValuesTypeMap';\nimport {ParamConstructorByType} from '../../../../params/types/ParamConstructorByType';\n\nimport {BaseNodeType} from '../../../_Base';\nimport {TypedParam, BaseParamType} from '../../../../params/_Base';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {TypeAssert} from '../../../../poly/Assert';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import { RampValue } from '../../../../params/ramp/RampValue';\nimport {RampParam} from '../../../../params/Ramp';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\n// import {ParamValueComparer} from '../../params/ParamValueComparer';\n// import {ParamValueCloner} from '../../params/ParamValueCloner';\n// import {CoreTextureLoader} from '../../../../../Core/Loader/Texture'\n\nexport class ParamConfig<T extends ParamType> {\n\tprivate _uniform: IUniform | undefined;\n\tprivate _cached_param_value: ParamValuesTypeMap[T] | undefined;\n\t// private _texture_loader: CoreTextureLoader\n\n\tconstructor(\n\t\tprivate _type: T,\n\t\tprivate _name: string,\n\t\tprivate _default_value: ParamInitValuesTypeMap[T],\n\t\tprivate _uniform_name: string\n\t) {}\n\n\tstatic from_param<K extends ParamType>(param: TypedParam<K>, uniform_name: string): ParamConfig<K> {\n\t\treturn new ParamConfig<K>(param.type, param.name, param.default_value, uniform_name);\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget uniform_name() {\n\t\treturn this._uniform_name;\n\t}\n\n\tget uniform() {\n\t\treturn (this._uniform = this._uniform || this._create_uniform());\n\t}\n\n\tprivate _create_uniform() {\n\t\treturn ParamConfig.uniform_by_type(this._type);\n\t}\n\n\tget param_options() {\n\t\tconst callback_bound = this._callback.bind(this);\n\t\tswitch (this._type) {\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {callback: callback_bound, node_selection: {context: NodeContext.COP}};\n\t\t\tdefault:\n\t\t\t\treturn {callback: callback_bound};\n\t\t}\n\t}\n\n\tprivate _callback(node: BaseNodeType, param: BaseParamType) {\n\t\tthis.uniform.value = param.value;\n\t}\n\n\t// TODO: refactor that to use the default values map?\n\tstatic uniform_by_type(type: ParamType): IUniform {\n\t\tswitch (type) {\n\t\t\tcase ParamType.BOOLEAN:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.BUTTON:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.COLOR:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.FLOAT:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.FOLDER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.INTEGER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {value: 0};\n\t\t\t// case ParamType.STRING: return {type: 't', value: null} // new Texture()}\n\t\t\tcase ParamType.RAMP:\n\t\t\t\treturn {value: null}; // new Texture()}\n\t\t\tcase ParamType.SEPARATOR:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.STRING:\n\t\t\t\treturn {value: null};\n\t\t\tcase ParamType.VECTOR2:\n\t\t\t\treturn {value: new Vector2(0, 0)};\n\t\t\tcase ParamType.VECTOR3:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.VECTOR4:\n\t\t\t\treturn {value: new Vector4(0, 0, 0, 0)};\n\t\t}\n\t\tTypeAssert.unreachable(type);\n\t}\n\n\tasync set_uniform_value(node: BaseNodeType) {\n\t\t// return new Promise( async (resolve, reject)=>{\n\t\tconst uniform = this.uniform;\n\t\t// the cache cannot be trusted...\n\t\tconst param = node.params.get(this._name) as TypedParam<T>;\n\t\tif (param) {\n\t\t\tawait param.compute(); //node[node.param_cache_name(this._name)]\n\t\t\tconst value = param.value;\n\n\t\t\tif ((value != null && this.has_value_changed(value)) || this.is_video_texture()) {\n\t\t\t\t// this._update_cached_value(value);\n\t\t\t\t// console.log(this._name, value)\n\n\t\t\t\tswitch (this._type) {\n\t\t\t\t\tcase ParamType.OPERATOR_PATH: {\n\t\t\t\t\t\tawait this.set_uniform_value_from_texture((<unknown>param) as OperatorPathParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ParamType.RAMP: {\n\t\t\t\t\t\tthis.set_uniform_value_from_ramp((<unknown>param) as RampParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tuniform.value = param.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// resolve()\n\t\t\t} // else {\n\t\t\t//\tresolve()\n\t\t\t//}\n\t\t\t// })\n\t\t}\n\t}\n\n\tasync set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n\t\t// this._texture_loader = this._texture_loader || new CoreTextureLoader(node, node.param(this.name()))\n\n\t\t// // param.graph_disconnect_predecessors()\n\t\t// const texture = await this._texture_loader.load_texture_from_url_or_op( url );\n\t\t// uniform.value = texture\n\t\tconst found_node = param.found_node();\n\t\tif (found_node) {\n\t\t\tconst container = await found_node.request_container();\n\t\t\tconst texture = container.texture();\n\t\t\tuniform.value = texture;\n\t\t} else {\n\t\t\tuniform.value = null;\n\t\t}\n\t}\n\n\tset_uniform_value_from_ramp(param: RampParam, uniform: IUniform) {\n\t\tuniform.value = param.ramp_texture();\n\t}\n\n\thas_value_changed(new_value: ParamValuesTypeMap[T]): boolean {\n\t\tconst param_constructor = ParamConstructorByType[this._type];\n\t\tif (this._cached_param_value) {\n\t\t\tconst has_changed = !param_constructor.are_values_equal(new_value, this._cached_param_value);\n\t\t\tif (has_changed) {\n\t\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\t}\n\t\t\treturn has_changed;\n\t\t} else {\n\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\treturn false;\n\t\t}\n\n\t\t// let has_changed = false;\n\t\t// if (this._type == ParamType.RAMP) {\n\t\t// \thas_changed = new_value.uuid() != this._cached_param_value;\n\t\t// \t// if(has_changed){ this._cached_param_value = new_value.uuid() }\n\t\t// } else {\n\t\t// \tif (this._cached_param_value != null) {\n\t\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t\t// \t\t\t// console.log(\"new f\", new_value, this._cached_param_value)\n\t\t// \t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t} else {\n\t\t// \t\t\tif (new_value != null) {\n\t\t// \t\t\t\t// console.log(\"new v\", new_value, this._cached_param_value)\n\t\t// \t\t\t\thas_changed = new_value.toArray().join('.') != this._cached_param_value.toArray().join('.');\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\thas_changed = true;\n\t\t// \t}\n\t\t// \t// this._cached_param_value = new_value\n\t\t// }\n\t\t// return has_changed;\n\t}\n\t// private _update_cached_value(new_value) {\n\t// \t// console.log(\"_update_cached_value\", this._name, new_value)\n\t// \tif (this._type == 'ramp') {\n\t// \t\tthis._cached_param_value = new_value.uuid();\n\t// \t} else {\n\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t// \t\t\tthis._cached_param_value = new_value;\n\t// \t\t} else {\n\t// \t\t\t// make sure to copy the value, not assign to it\n\t// \t\t\t// otherwise we won't detect changes (since the objects would be the same)\n\t// \t\t\tthis._cached_param_value = this._cached_param_value || new_value.clone();\n\t// \t\t\tthis._cached_param_value.copy(new_value);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_video_texture(): boolean {\n\t\tlet result = false;\n\t\tconst uniform = this.uniform;\n\t\tif (uniform) {\n\t\t\tconst value = uniform.value;\n\t\t\tif (value) {\n\t\t\t\tresult = value.constructor == VideoTexture;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {LinesController} from './LinesController';\nimport {BaseGlNodeType} from '../../_Base';\n\nexport class ShadersCollectionController {\n\tprivate _lines_controller_by_shader_name: Map<ShaderName, LinesController> = new Map();\n\tconstructor(private _shader_names: ShaderName[], private _current_shader_name: ShaderName) {\n\t\tfor (let shader_name of this._shader_names) {\n\t\t\tthis._lines_controller_by_shader_name.set(shader_name, new LinesController(shader_name));\n\t\t}\n\t}\n\n\tget shader_names() {\n\t\treturn this._shader_names;\n\t}\n\n\tset_current_shader_name(shader_name: ShaderName) {\n\t\tthis._current_shader_name = shader_name;\n\t}\n\tget current_shader_name() {\n\t\treturn this._current_shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[], shader_name?: ShaderName) {\n\t\tif (definitions.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_definitions(node, definitions);\n\t\t}\n\t}\n\tdefinitions(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.definitions(node);\n\t\t}\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[], shader_name?: ShaderName) {\n\t\tif (lines.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_body_lines(node, lines);\n\t\t}\n\t}\n\tbody_lines(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.body_lines(node);\n\t\t}\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {BaseGlNodeType} from '../../_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\n\nexport class LinesController {\n\tprivate _definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\tprivate _body_lines_by_node_id: Map<string, string[]> = new Map();\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tget shader_name() {\n\t\treturn this._shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[]) {\n\t\tfor (let definition of definitions) {\n\t\t\tMapUtils.push_on_array_at_entry(this._definitions_by_node_id, node.graph_node_id, definition);\n\t\t}\n\t}\n\tdefinitions(node: BaseGlNodeType): BaseGLDefinition[] | undefined {\n\t\treturn this._definitions_by_node_id.get(node.graph_node_id);\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[]) {\n\t\tfor (let line of lines) {\n\t\t\tMapUtils.push_on_array_at_entry(this._body_lines_by_node_id, node.graph_node_id, line);\n\t\t}\n\t}\n\tbody_lines(node: BaseGlNodeType): string[] | undefined {\n\t\treturn this._body_lines_by_node_id.get(node.graph_node_id);\n\t}\n}\n","import {BaseGlNodeType} from '../../_Base';\nimport {LineType} from './LineType';\n\nconst LINE_SUFFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: ';',\n\t[LineType.BODY]: ';',\n};\n\nconst LINE_PREFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: '',\n\t[LineType.BODY]: '\t',\n};\n\nexport class CodeFormatter {\n\tstatic node_comment(node: BaseGlNodeType, line_type: LineType): string {\n\t\tlet line = `// ${node.full_path()}`;\n\t\tif (line_type == LineType.BODY) {\n\t\t\tline = `\t${line}`;\n\t\t}\n\t\treturn line;\n\t}\n\tstatic line_wrap(line: string, line_type: LineType) {\n\t\tlet add_suffix = true;\n\t\tif (line.indexOf('#if') == 0 || line.indexOf('#endif') == 0) {\n\t\t\tadd_suffix = false;\n\t\t}\n\t\tif (add_suffix) {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}${LINE_SUFFIXES[line_type]}`;\n\t\t} else {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}`;\n\t\t}\n\t}\n\tstatic post_line_separator(line_type: LineType) {\n\t\treturn line_type == LineType.BODY ? '\t' : '';\n\t}\n}\n","import {TypedNode} from '../../_Base';\nimport {ShaderName} from './ShaderName';\n\nexport abstract class TypedAssembler<T extends TypedNode<any, any, any>> {\n\tabstract get shader_names(): ShaderName[];\n\tabstract input_names_for_shader_name(node: T, shader_name: ShaderName): string[];\n}\n","export default \"#include <common>\\n\\nuniform vec2 resolution;\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec4 diffuseColor = vec4(1.0,0.0,1.0,1.0);\\n\\n\\n\\t// INSERT BODY\\n\\n\\tgl_FragColor = vec4( diffuseColor );\\n}\"","export class CoreSleep {\n\tstatic sleep(time: number): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve();\n\t\t\t}, time);\n\t\t});\n\t}\n}\n","import {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter} from 'three/src/constants';\n// import {LinearEncoding} from 'three/src/constants';\n// import {HalfFloatType} from 'three/src/constants';\n// import {WebGLRenderTargetCube} from 'three/src/renderers/WebGLRenderTargetCube';\nimport {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\n\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\n// import {CoreTextureLoader} from '../../../core/loader/Texture';\n// import { CoreScriptLoader } from \"src/Core/Loader/Script\";\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {POLY} from '../../Poly';\nclass EnvMapCopParamsConfig extends NodeParamsConfig {\n\t// url = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t// \tdesktop_browse: {file_type: 'texture'},\n\t// });\n}\nconst ParamsConfig = new EnvMapCopParamsConfig();\nexport class EnvMapCopNode extends TypedCopNode<EnvMapCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'env_map';\n\t}\n\t// static required_three_imports() {\n\t// \treturn [\n\t// \t\t'loaders/EXRLoader',\n\t// \t\t// 'pmrem/PMREMGenerator',\n\t// \t\t// 'pmrem/PMREMCubeUVPacker',\n\t// \t];\n\t// }\n\n\t// private _texture_loader: CoreTextureLoader\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\n\t\t// for now, if I clone the input, it gets messed up\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT)\n\t// }\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tconst env_map = await this.convert_texture_to_env_map(texture);\n\t\tif (env_map) {\n\t\t\tthis.set_texture(env_map);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate async convert_texture_to_env_map(texture: Texture): Promise<Texture | undefined> {\n\t\t// texture.minFilter = NearestFilter;\n\t\t// texture.encoding = LinearEncoding;\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t// if (!renderer) {\n\t\t// \tawait CoreSleep.sleep(1000);\n\t\t// \tconsole.log('waited 1s');\n\t\t// \trenderer = POLY.renderers_controller.first_renderer();\n\t\t// \tconsole.log('renderer', renderer, texture);\n\t\t// }\n\n\t\tif (renderer) {\n\t\t\tconst pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t// console.log('env inout', texture);\n\t\t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\n\t\t\t// pmremGenerator.dispose();\n\t\t\t// texture.dispose();\n\t\t\t// console.log('exrCubeRenderTarget.texture', exrCubeRenderTarget.texture);\n\t\t\tconst env_map_texture = exrCubeRenderTarget.texture;\n\t\t\t// (window.scene as any).background = env_map_texture;\n\t\t\t// (window.scene as any).environment = env_map_texture;\n\t\t\treturn env_map_texture;\n\t\t} else {\n\t\t\tthis.states.error.set('no renderer found to convert the texture to an env map');\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {TextureLoader} from 'three/src/loaders/TextureLoader';\nimport {Texture} from 'three/src/textures/Texture';\n// import {RepeatWrapping} from 'three/src/constants';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreScriptLoader} from '/Script';\n// import {CoreGeometry} from '../geometry/Geometry';\nimport {UnsignedByteType} from 'three/src/constants';\nimport {CoreWalker} from '../Walker';\n\nimport {BaseNodeType} from '../../engine/nodes/_Base';\nimport {BaseParamType} from '../../engine/params/_Base';\nimport {BaseCopNodeClass} from '../../engine/nodes/cop/_Base';\nimport {TextureContainer} from '../../engine/containers/Texture';\nimport {POLY} from '../../engine/Poly';\n// import {BufferGeometry} from 'three/src/core/BufferGeometry';\n\ninterface VideoSourceTypeByExt {\n\togg: string;\n\togv: string;\n\tmp4: string;\n}\n// interface ImageScriptUrlByExt {\n// \texr: string;\n// \tbasis: string;\n// }\ninterface ThreeLoaderByExt {\n\texr: string;\n\tbasis: string;\n\thdr: string;\n}\n\nenum Extension {\n\tEXR = 'exr',\n\tBASIS = 'basis',\n\tHDR = 'hdr',\n}\n\nexport class CoreTextureLoader {\n\tstatic PARAM_DEFAULT = '/examples/textures/uv.jpg';\n\tstatic PARAM_ENV_DEFAULT = '/examples/textures/piz_compressed.exr';\n\n\tstatic VIDEO_EXTENSIONS = ['mp4', 'webm', 'ogv'];\n\tstatic VIDEO_SOURCE_TYPE_BY_EXT: VideoSourceTypeByExt = {\n\t\togg: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\togv: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\tmp4: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"',\n\t};\n\t// static SCRIPT_URL_BY_EXT: ImageScriptUrlByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// static THREE_LOADER_BY_EXT: ThreeLoaderByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// @load_texture: (url, callback)->\n\t// \tif url\n\t// \t\tloader = this._texture_loader(url)\n\n\t// \t\tloader.load(\n\t// \t\t\turl,\n\t// \t\t\tcallback,\n\t// \t\t\tnull,\n\t// \t\t\t(error)=>\n\t// \t\t\t\tthis.set_error(\"could not load texture #{url}\")\n\t// \t\t\t\t#this._on_error(error)\n\t// \t\t\t)\n\t// \telse\n\t// \t\tthis.set_error(\"not url given to Mat/Base._load_texture\")\n\t// _on_error: (error)->\n\t// \tconsole.log(\"ERROR\")\n\t// \tconsole.log(error)\n\t// \tthis.set_error_message()\n\n\tconstructor(private _node: BaseNodeType, private _param: BaseParamType) {}\n\n\tasync load_texture_from_url_or_op(url: string): Promise<Texture | VideoTexture | null> {\n\t\tlet texture: Texture | null = null;\n\t\tlet found_node;\n\n\t\tif (url.substring(0, 3) == 'op:') {\n\t\t\tconst node_path = url.substring(3);\n\t\t\tfound_node = CoreWalker.find_node(this._node, node_path);\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node instanceof BaseCopNodeClass) {\n\t\t\t\t\tconst container: TextureContainer = await found_node.request_container();\n\t\t\t\t\ttexture = container.texture();\n\t\t\t\t} else {\n\t\t\t\t\tthis._node.states.error.set(`found node is not a texture node`);\n\t\t\t\t}\n\n\t\t\t\t// this._assign_texture(attrib, texture)\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`no node found in path '${node_path}'`);\n\t\t\t}\n\t\t} else {\n\t\t\ttexture = await this.load_url(url);\n\t\t\tif (texture) {\n\t\t\t\t// param.mark_as_referencing_asset(url)\n\t\t\t\tif (this._param.options.texture_as_env()) {\n\t\t\t\t\t// texture = await CoreTextureLoader.set_texture_for_env(texture, this._node);\n\t\t\t\t} else {\n\t\t\t\t\ttexture = CoreTextureLoader.set_texture_for_mapping(texture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`could not load texture ${url}`);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE: if this._param gets its value from an expression like `ch('/CONTROL/photo_url')`\n\t\t// then found_node will be null, so the graph should not be changed\n\t\tif (found_node && this._param.graph_predecessors()[0] != found_node) {\n\t\t\tthis._param.graph_disconnect_predecessors();\n\t\t\tthis._param.add_graph_input(found_node);\n\t\t}\n\n\t\t// this._assign_texture(attrib, texture)\n\t\treturn texture;\n\t}\n\n\tasync load_url(url: string): Promise<Texture> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// url = this._resolve_url(url)\n\t\t\tconst ext = CoreTextureLoader._ext(url);\n\n\t\t\tif (CoreTextureLoader.VIDEO_EXTENSIONS.includes(ext)) {\n\t\t\t\tconst texture: VideoTexture = await this._load_as_video(url);\n\t\t\t\treturn texture;\n\t\t\t} else {\n\t\t\t\tthis.loader_for_ext(ext).then((loader) => {\n\t\t\t\t\tloader.load(url, resolve, undefined, (error: any) => {\n\t\t\t\t\t\tconsole.warn('error', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loader_for_ext(ext: string) {\n\t\tconst ext_lowercase = ext.toLowerCase() as keyof ThreeLoaderByExt;\n\t\t// const script_name = CoreTextureLoader.SCRIPT_URL_BY_EXT[ext_lowercase];\n\t\t// var loader;\n\n\t\tswitch (ext_lowercase) {\n\t\t\tcase Extension.EXR: {\n\t\t\t\tconst {EXRLoader} = await import('../../../modules/three/examples/jsm/loaders/EXRLoader');\n\t\t\t\treturn new EXRLoader();\n\t\t\t}\n\t\t\tcase Extension.HDR: {\n\t\t\t\tconst {RGBELoader} = await import('../../../modules/three/examples/jsm/loaders/RGBELoader');\n\t\t\t\tconst loader = new RGBELoader();\n\t\t\t\tloader.setDataType(UnsignedByteType); // FloatType,HalfFloatType\n\t\t\t\t// loader.setPath('/examples/textures/equirectangular/');\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t\tcase Extension.BASIS: {\n\t\t\t\tconst {BasisTextureLoader} = await import(\n\t\t\t\t\t'../../../modules/three/examples/jsm/loaders/BasisTextureLoader'\n\t\t\t\t);\n\t\t\t\tconst loader = new BasisTextureLoader();\n\t\t\t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t\t\tif (renderer) {\n\t\t\t\t\tloader.detectSupport(renderer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('texture loader found no renderer for basis texture loader');\n\t\t\t\t}\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\t// if (script_name) {\n\t\t// const imported_classes = await CoreScriptLoader.load_module_three_loader(script_name)\n\t\t// const imported_classes = await CoreScriptLoader.three_module(`loaders/${script_name}`);\n\t\t// const imported_classes = await import(`modules/three/examples/jsm/loaders/${script_name}`);\n\t\t// const loader_class_name = CoreTextureLoader.THREE_LOADER_BY_EXT[ext_lowercase];\n\t\t// const loader_class = imported_classes[loader_class_name];\n\t\t// if (loader_class) {\n\t\t// \tloader = new loader_class();\n\t\t// \tif (ext == 'basis') {\n\t\t// \t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t// \t\tconst renderer = POLY.renderers_controller.first_renderer();\n\t\t// \t\tloader.detectSupport(renderer);\n\t\t// \t}\n\t\t// }\n\t\t// }\n\t\treturn new TextureLoader();\n\n\t\t// const constructor = (() => { switch (ext) {\n\t\t// \tcase 'exr': return EXRLoader;\n\t\t// \tdefault: return TextureLoader;\n\t\t// } })();\n\t\t// return new constructor();\n\t}\n\n\t_load_as_video(url: string): Promise<VideoTexture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video');\n\t\t\t// document.body.appendChild(video)\n\t\t\t// video.id = 'video'\n\t\t\t// console.log(\"video\", video)\n\t\t\tvideo.setAttribute('crossOrigin', 'anonymous');\n\t\t\tvideo.setAttribute('autoplay', `${true}`); // to ensure it loads\n\t\t\tvideo.setAttribute('loop', `${true}`);\n\n\t\t\t// wait for onloadedmetadata to ensure that we have a duration\n\t\t\tvideo.onloadedmetadata = function() {\n\t\t\t\tvideo.pause();\n\t\t\t\tconst texture = new VideoTexture(video);\n\t\t\t\tresolve(texture);\n\t\t\t};\n\t\t\t// video.setAttribute('controls', true)\n\t\t\t// video.style=\"display:none\"\n\t\t\tconst source = document.createElement('source');\n\t\t\tconst ext = CoreTextureLoader._ext(url) as keyof VideoSourceTypeByExt;\n\t\t\tlet type: string = CoreTextureLoader.VIDEO_SOURCE_TYPE_BY_EXT[ext];\n\t\t\ttype = type || CoreTextureLoader._default_video_source_type(url);\n\t\t\tsource.setAttribute('type', type);\n\t\t\tsource.setAttribute('src', url);\n\n\t\t\tvideo.appendChild(source);\n\t\t});\n\t}\n\tstatic _default_video_source_type(url: string) {\n\t\tconst ext = this._ext(url);\n\t\treturn `video/${ext}`;\n\t}\n\n\tstatic pixel_data(texture: Texture) {\n\t\tconst img = texture.image;\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.drawImage(img, 0, 0, img.width, img.height);\n\t\t\treturn context.getImageData(0, 0, img.width, img.height);\n\t\t}\n\t}\n\n\t// TODO: typescript: check what type the pixel_data is\n\t// static pixel_data_to_attribute(pixel_data: Pixel, geometry: BufferGeometry, attrib_name_with_component:string, convert_method: (x:number, y:number, z:number, w:number)=>number) {\n\t// \tconst {data} = pixel_data;\n\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t// \t// TODO: add error if no uvs\n\t// \tconst values = [];\n\t// \tconst points = geometry_wrapper.points();\n\t// \tfor (let point of points) {\n\t// \t\tconst uv = point.attrib_value('uv');\n\t// \t\tconst x = Math.floor((pixel_data.width - 1) * uv.x);\n\t// \t\tconst y = Math.floor((pixel_data.height - 1) * (1 - uv.y));\n\t// \t\tconst i = y * pixel_data.width + x;\n\t// \t\t// const val = data[4*i] / 255.0;\n\t// \t\tif (convert_method) {\n\t// \t\t\tconst val = convert_method(data[4 * i + 0], data[4 * i + 1], data[4 * i + 2], data[4 * i + 3]);\n\t// \t\t\tvalues.push(val);\n\t// \t\t} else {\n\t// \t\t\tvalues.push([data[4 * i + 0], data[4 * i + 1], data[4 * i + 2]]);\n\t// \t\t}\n\t// \t}\n\n\t// \tconst attrib_name_elements = attrib_name_with_component.split('.');\n\t// \tlet attrib_name = attrib_name_elements[0];\n\t// \tlet component_offset = null;\n\t// \tif (attrib_name_elements.length > 1) {\n\t// \t\tconst component = attrib_name_elements[1] as keyof Vector4Like\n\t// \t\tcomponent_offset = {x: 0, y: 1, z: 2, w: 3}[component];\n\t// \t}\n\n\t// \tlet attrib = geometry.attributes[attrib_name];\n\t// \tif (attrib) {\n\t// \t\tconst array = attrib.array;\n\t// \t\tlet index = 0;\n\t// \t\tlet is_array = null;\n\t// \t\tfor (let value of values) {\n\t// \t\t\tif (is_array || lodash_isArray(value)) {\n\t// \t\t\t\tis_array = true;\n\t// \t\t\t\tlet component_index = 0;\n\t// \t\t\t\tfor (let value_c of value) {\n\t// \t\t\t\t\tarray[attrib.itemSize * index + component_index] = value_c;\n\t// \t\t\t\t\tcomponent_index++;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tarray[attrib.itemSize * index + component_offset] = value;\n\t// \t\t\t}\n\t// \t\t\tindex++;\n\t// \t\t}\n\t// \t} else {\n\t// \t\tattrib = geometry.setAttribute(attrib_name, new Float32BufferAttribute(values, 1));\n\t// \t}\n\t// \tattrib.needsUpdate = true;\n\t// }\n\n\tstatic _ext(url: string) {\n\t\tconst elements = url.split('.');\n\t\treturn elements[elements.length - 1].toLowerCase();\n\t}\n\t// static private _resolve_url(url: string):string{\n\t// \tif(url[0] == '/'){\n\t// \t\tconst root_url = POLY.env_is_production() ? 'https://polygonjs.com' : 'http://localhost:5000'\n\t// \t\turl = `${root_url}${url}`\n\t// \t}\n\t// \treturn url\n\t// }\n\n\tstatic set_texture_for_mapping(texture: Texture) {\n\t\t// let val = texture['wrapS']\n\t\t// Object.defineProperty(texture, 'wrapS', {\n\t\t// \tget () {\n\t\t// \t\treturn val // Simply return the cached value\n\t\t// \t},\n\t\t// \tset (newVal) {\n\t\t// \t\tval = newVal // Save the newVal\n\t\t// \t\tconsole.warn(\"set\", newVal)\n\t\t// \t}\n\t\t// })\n\n\t\t// texture.wrapS = RepeatWrapping\n\t\t// texture.wrapT = RepeatWrapping\n\t\t// console.log(\"set_texture_for_mapping\", RepeatWrapping, texture, texture.wrapS)\n\t\treturn texture;\n\t}\n\n\t// static async set_texture_for_env(texture: Texture, registerer: BaseNode) {\n\t// \tif (registerer._registered_env_map) {\n\t// \t\tPOLY.renderers_controller.deregister_env_map(registerer._registered_env_map);\n\t// \t}\n\t// \tregisterer._registered_env_map = await POLY.renderers_controller.register_env_map(texture);\n\t// \treturn registerer._registered_env_map;\n\t// }\n}\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_BPTC_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tbptcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.bptcSupported = !! renderer.extensions.get( 'EXT_texture_compression_bptc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.bptcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n","import {Texture} from 'three/src/textures/Texture';\nimport {TypedCopNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst ParamsConfig = new NodeParamsConfig();\nexport class NullCopNode extends TypedCopNode<NodeParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tthis.set_texture(texture);\n\t}\n}\n","import {TypedCopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchCopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchCopParamsConfig();\n\nexport class SwitchCopNode extends TypedCopNode<SwitchCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_texture(container.texture());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import {CATEGORY_EVENT} from './Category';\n\nimport {CameraMapControlsEventNode} from '../../nodes/event/CameraMapControls';\nimport {CameraOrbitControlsEventNode} from '../../nodes/event/CameraOrbitControls';\nimport {CodeEventNode} from '../../nodes/event/Code';\nimport {MouseEventNode} from '../../nodes/event/MouseEvent';\n\nexport interface EventNodeChildrenMap {\n\tcamera_orbit_controls: CameraMapControlsEventNode;\n\tcamera_map_controls: CameraOrbitControlsEventNode;\n\tcode: CodeEventNode;\n\tmouse_event: MouseEventNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class EventRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(CameraMapControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CameraOrbitControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CodeEventNode, CATEGORY_EVENT.MISC);\n\t\tpoly.register_node(MouseEventNode, CATEGORY_EVENT.MISC);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {MapControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {CameraOrbitControlsEventNode} from './CameraOrbitControls';\n\nexport class CameraMapControlsEventNode extends CameraOrbitControlsEventNode {\n\tstatic type() {\n\t\treturn 'camera_map_controls';\n\t}\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// await CoreScriptLoader.load_module_three_example('controls/OrbitControls')\n\t\t// const constructor_name = 'MapControls'\n\t\t// const constructor = THREE[constructor_name]\n\t\t// const c = this.constructor as typeof CameraMapControlsEventNode;\n\t\t// const {MapControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\treturn new MapControls(camera, element);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedEventNode} from './_Base';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport interface CameraControls extends OrbitControls {\n\tname?: string;\n\t// this_is_a_control: any;\n\t// name: string;\n}\n\nexport abstract class TypedCameraControlsEventNode<K extends NodeParamsConfig> extends TypedEventNode<K> {\n\t// controls() {\n\t// \treturn this._controls;\n\t// }\n\n\tasync apply_controls(camera: Camera, html_element: HTMLElement) {\n\t\t// I don't think I can just assign the camera at the moment\n\t\t// so the controls may need to be re-created everytime\n\t\t// TODO: the controls should be created (and disposed?) by the viewer\n\t\t//this.dispose_controls()\n\n\t\tconst controls = await this.create_controls_instance(camera, html_element);\n\t\tconst timestamp = performance.now();\n\t\tcontrols.name = `${this.full_path()}:${camera.name}:${timestamp}:${this.controls_id()}`;\n\t\t// console.log(this._controls)\n\t\tawait this.params.eval_all();\n\t\tthis.setup_controls(controls);\n\t\treturn controls;\n\t\t// })\n\t\t// });\n\t}\n\tcontrols_id() {\n\t\treturn JSON.stringify(this.params.all.map((p) => p.value_serialized));\n\t}\n\t//this.cook()\n\n\t// dispose_controls: (controls_instance)->\n\t// \tif controls_instance?\n\t// \t\tcontrols_instance.dispose()\n\n\tabstract setup_controls(controls: CameraControls): void;\n\t//\n\n\tabstract async create_controls_instance(camera: Camera, element: HTMLElement): Promise<CameraControls>;\n\tabstract set_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void;\n}\n\nexport type BaseCameraControlsEventNodeType = TypedCameraControlsEventNode<any>;\n","import {TypedEventNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\nconst DEFAULT_FUNCTION_CODE = `import {BaseMouseEventProcessor} from 'BaseMouseEventProcessor'\nexport class EventProcessor extends BaseMouseEventProcessor {\n\tconstructor(){\n\t}\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: any){\n\t\tthis._set_mouse_from_event_and_canvas(event, canvas)\n\t\tconsole.log(\"processing event\", this.mouse.x, this.mouse.y);\n\t}\n}\n\n\n\n\n`;\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\nimport * as THREE from 'three';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\n\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Raycaster} from 'three/src/core/Raycaster';\nclass BaseMouseEventProcessor {\n\tprotected node!: CodeEventNode;\n\tprotected raycaster = new Raycaster();\n\tprotected mouse = new Vector2();\n\tconstructor() {}\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n\tset_node(node: CodeEventNode) {\n\t\tthis.node = node;\n\t}\n\tprotected _set_mouse_from_event_and_canvas(event: MouseEvent, canvas: HTMLCanvasElement) {\n\t\tthis.mouse.x = (event.clientX / canvas.offsetWidth) * 2 - 1;\n\t\tthis.mouse.y = -(event.clientY / canvas.offsetHeight) * 2 + 1;\n\t}\n}\n\ntype EvaluatedFunction = (\n\tnode: CodeEventNode,\n\tbase_event_processor_class: typeof BaseMouseEventProcessor,\n\tTHREE: any\n) => typeof BaseMouseEventProcessor;\n\nclass CodeEventParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeEventParamsConfig();\n\nexport class CodeEventNode extends TypedEventNode<CodeEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _event_processor: BaseMouseEventProcessor | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.inputs.set_named_input_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('trigger', ConnectionPointType.BOOL),\n\t\t]);\n\t}\n\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._event_processor) {\n\t\t\tthis._event_processor.process_event(event, canvas, camera_node);\n\t\t}\n\t}\n\tprivate _compile_if_required() {\n\t\tif (!this._event_processor || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprivate _compile() {\n\t\ttry {\n\t\t\tconst function_body = `try {\n\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t} catch(e) {\n\t\t\t\tthis.states.error.set(e)\n\t\t\t}`;\n\t\t\tconst event_processor_creator_function: EvaluatedFunction = new AsyncFunction(\n\t\t\t\t'node',\n\t\t\t\t'BaseMouseEventProcessor',\n\t\t\t\t'THREE',\n\t\t\t\tfunction_body\n\t\t\t);\n\t\t\tconst event_processor_class = event_processor_creator_function(this, BaseMouseEventProcessor, THREE);\n\t\t\tthis._event_processor = new event_processor_class();\n\t\t\tthis._event_processor.set_node(this);\n\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._event_processor = undefined;\n\t\t}\n\t}\n}\n","import {CATEGORY_GL} from './Category';\n\nimport {FloatToIntGlNode, IntToFloatGlNode} from '../../nodes/gl/_ConversionMisc';\nimport {FloatToVec2GlNode, FloatToVec3GlNode, FloatToVec4GlNode} from '../../nodes/gl/_ConversionToVec';\n\nimport {\n\tVec2ToFloatGlNode,\n\tVec3ToFloatGlNode,\n\tVec4ToFloatGlNode,\n\tVec4ToVectorGlNode,\n} from '../../nodes/gl/_ConversionVecTo';\n\nimport {\n\tAbsGlNode,\n\tAcosGlNode,\n\tAsinGlNode,\n\tAtanGlNode,\n\tCeilGlNode,\n\tCosGlNode,\n\tDegreesGlNode,\n\tExpGlNode,\n\tExp2GlNode,\n\tFloorGlNode,\n\tFractGlNode,\n\tInverseSqrtGlNode,\n\tLogGlNode,\n\tLog2GlNode,\n\tNormalizeGlNode,\n\tRadiansGlNode,\n\tSignGlNode,\n\tSinGlNode,\n\tSqrtGlNode,\n\tTanGlNode,\n} from '../../nodes/gl/_Math_Arg1';\n\nimport {\n\tDistanceGlNode,\n\tDotGlNode,\n\tMaxGlNode,\n\tMinGlNode,\n\tModGlNode,\n\tPowGlNode,\n\tReflectGlNode,\n\tStepGlNode,\n} from '../../nodes/gl/_Math_Arg2';\n\nimport {AddGlNode, DivideGlNode, MultGlNode, SubstractGlNode} from '../../nodes/gl/_Math_Arg2Operation';\n\nimport {AndGlNode, OrGlNode} from '../../nodes/gl/_Math_Arg2Boolean';\nimport {AlignGlNode} from '../../nodes/gl/Align';\nimport {AttributeGlNode} from '../../nodes/gl/Attribute';\nimport {ConstantGlNode} from '../../nodes/gl/Constant';\nimport {ComplementGlNode} from '../../nodes/gl/Complement';\nimport {CrossGlNode} from '../../nodes/gl/Cross';\nimport {CycleGlNode} from '../../nodes/gl/Cycle';\nimport {DiskGlNode} from '../../nodes/gl/Disk';\nimport {EasingGlNode} from '../../nodes/gl/Easing';\nimport {FitGlNode} from '../../nodes/gl/Fit';\nimport {Fit01GlNode} from '../../nodes/gl/Fit01';\nimport {GlobalsGlNode} from '../../nodes/gl/Globals';\nimport {HsvToRgbGlNode} from '../../nodes/gl/HsvToRgb';\nimport {InstanceTransformGlNode} from '../../nodes/gl/InstanceTransform';\nimport {LengthGlNode} from '../../nodes/gl/Length';\nimport {LuminanceGlNode} from '../../nodes/gl/Luminance';\nimport {MixGlNode} from '../../nodes/gl/Mix';\nimport {MultAddGlNode} from '../../nodes/gl/MultAdd';\nimport {NegateGlNode} from '../../nodes/gl/Negate';\nimport {NoiseGlNode} from '../../nodes/gl/Noise';\nimport {NullGlNode} from '../../nodes/gl/Null';\nimport {OutputGlNode} from '../../nodes/gl/Output';\nimport {ParamGlNode} from '../../nodes/gl/Param';\nimport {RefractGlNode} from '../../nodes/gl/Refract';\nimport {QuatMultGlNode} from '../../nodes/gl/QuatMult';\nimport {QuatFromAxisAngleGlNode} from '../../nodes/gl/QuatFromAxisAngle';\nimport {QuatToAngleGlNode} from '../../nodes/gl/QuatToAngle';\nimport {QuatToAxisGlNode} from '../../nodes/gl/QuatToAxis';\nimport {RampGlNode} from '../../nodes/gl/Ramp';\nimport {RandomGlNode} from '../../nodes/gl/Random';\nimport {RgbToHsvGlNode} from '../../nodes/gl/RgbToHsv';\nimport {RotateGlNode} from '../../nodes/gl/Rotate';\nimport {RoundGlNode} from '../../nodes/gl/Round';\nimport {TextureGlNode} from '../../nodes/gl/Texture';\nimport {TwoWaySwitchGlNode} from '../../nodes/gl/TwoWaySwitch';\nimport {VectorAlignGlNode} from '../../nodes/gl/VectorAlign';\nimport {VectorAngleGlNode} from '../../nodes/gl/VectorAngle';\n\nexport interface GlNodeChildrenMap {\n\tabs: AbsGlNode;\n\tacos: AcosGlNode;\n\tadd: AddGlNode;\n\talign: AlignGlNode;\n\tand: AndGlNode;\n\tasin: AsinGlNode;\n\tatan: AtanGlNode;\n\tattribute: AttributeGlNode;\n\tceil: CeilGlNode;\n\tconstant: ConstantGlNode;\n\tcos: CosGlNode;\n\tcomplement: ComplementGlNode;\n\tcross: CrossGlNode;\n\tcycle: CycleGlNode;\n\tdegrees: DegreesGlNode;\n\tdisk: DiskGlNode;\n\tdistance: DistanceGlNode;\n\tdivide: DivideGlNode;\n\tdot: DotGlNode;\n\teasing: EasingGlNode;\n\texp: ExpGlNode;\n\texp2: Exp2GlNode;\n\tfit: FitGlNode;\n\tfit01: Fit01GlNode;\n\tfloat_to_int: FloatToIntGlNode;\n\tfloat_to_vec2: FloatToVec2GlNode;\n\tfloat_to_vec3: FloatToVec3GlNode;\n\tfloat_to_vec4: FloatToVec4GlNode;\n\tfloor: FloorGlNode;\n\tfract: FractGlNode;\n\thsv_to_rgb: HsvToRgbGlNode;\n\tint_to_float: FloatToIntGlNode;\n\tinverse_sqrt: InverseSqrtGlNode;\n\tinstance_transform: InstanceTransformGlNode;\n\tlength: LengthGlNode;\n\tlog: LogGlNode;\n\tlog2: Log2GlNode;\n\tluminance: LuminanceGlNode;\n\tglobals: GlobalsGlNode;\n\tmax: MaxGlNode;\n\tmin: MinGlNode;\n\tmix: MixGlNode;\n\tmod: ModGlNode;\n\tmult: MultGlNode;\n\tmult_add: MultAddGlNode;\n\tnegate: NegateGlNode;\n\tnoise: NoiseGlNode;\n\tnormalize: NormalizeGlNode;\n\tnull: NullGlNode;\n\tor: OrGlNode;\n\toutput: OutputGlNode;\n\tparam: ParamGlNode;\n\tpow: PowGlNode;\n\tquat_mult: QuatMultGlNode;\n\tquat_from_axis_angle: QuatFromAxisAngleGlNode;\n\tquat_to_angle: QuatToAngleGlNode;\n\tquat_to_axis: QuatToAxisGlNode;\n\tradians: RadiansGlNode;\n\tramp: RampGlNode;\n\trandom: RandomGlNode;\n\treflect: ReflectGlNode;\n\trefract: RefractGlNode;\n\trgb_to_hsv: RgbToHsvGlNode;\n\trotate: RotateGlNode;\n\tround: RoundGlNode;\n\tsign: SignGlNode;\n\tsin: SinGlNode;\n\tsqrt: SqrtGlNode;\n\tstep: StepGlNode;\n\tsubstract: SubstractGlNode;\n\ttan: TanGlNode;\n\ttexture: TextureGlNode;\n\ttwo_way_switch: TwoWaySwitchGlNode;\n\tvec2_to_float: Vec2ToFloatGlNode;\n\tvec3_to_float: Vec3ToFloatGlNode;\n\tvec4_to_float: Vec4ToFloatGlNode;\n\tvec4_to_vector: Vec4ToVectorGlNode;\n\tvector_align: VectorAlignGlNode;\n\tvector_angle: VectorAngleGlNode;\n}\n\nimport {NodeContext} from '../NodeContext';\nimport {Poly} from '../../Poly';\nexport class GlRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AbsGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AcosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AlignGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AndGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(AsinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AtanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AttributeGlNode, CATEGORY_GL.GLOBALS, {except: [`${NodeContext.COP}/builder`]});\n\t\tpoly.register_node(CeilGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(ConstantGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ComplementGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CrossGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(CycleGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DegreesGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(DiskGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DistanceGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DivideGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DotGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(EasingGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ExpGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Exp2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FitGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Fit01GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FloatToIntGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec2GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec3GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec4GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloorGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(GlobalsGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(HsvToRgbGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(IntToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(InverseSqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(InstanceTransformGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LengthGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LuminanceGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(NegateGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(LogGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Log2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MaxGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MinGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ModGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MixGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultAddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(NullGlNode, CATEGORY_GL.UTIL);\n\t\tpoly.register_node(NoiseGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(NormalizeGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(OrGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(OutputGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ParamGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(PowGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(QuatMultGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatFromAxisAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAxisGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(RampGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RandomGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RadiansGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(ReflectGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RefractGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RgbToHsvGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(RotateGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RoundGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SignGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(SqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(StepGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(SubstractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(TanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(TextureGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(TwoWaySwitchGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(Vec2ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec3ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToVectorGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(VectorAlignGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(VectorAngleGlNode, CATEGORY_GL.GEOMETRY);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO INT\n//\n//\nconst OUTPUT_NAME_INT = 'int';\nclass FloatToIntGlParamsConfig extends NodeParamsConfig {\n\tfloat = ParamConfig.FLOAT(0);\n}\nconst ParamsConfigFloatToInt = new FloatToIntGlParamsConfig();\nexport class FloatToIntGlNode extends TypedGlNode<FloatToIntGlParamsConfig> {\n\tparams_config = ParamsConfigFloatToInt;\n\tstatic type() {\n\t\treturn 'float_to_int';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_INT, ConnectionPointType.INT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst float = this.variable_for_input('float');\n\n\t\tconst int = this.gl_var_name('int');\n\t\tconst body_line = `int ${int} = int(${ThreeToGl.float(float)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// INT TO FLOAT\n//\n//\nconst OUTPUT_NAME_FLOAT = 'float';\nclass IntToFloatGlParamsConfig extends NodeParamsConfig {\n\tint = ParamConfig.INTEGER(0);\n}\nconst ParamsConfigIntToFloat = new IntToFloatGlParamsConfig();\nexport class IntToFloatGlNode extends TypedGlNode<IntToFloatGlParamsConfig> {\n\tparams_config = ParamsConfigIntToFloat;\n\tstatic type() {\n\t\treturn 'int_to_float';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_FLOAT, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst int = this.variable_for_input('int');\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = float(${ThreeToGl.int(int)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO VEC2\n//\n//\nclass FloatToVec2GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig2 = new FloatToVec2GlParamsConfig();\nexport class FloatToVec2GlNode extends TypedGlNode<FloatToVec2GlParamsConfig> {\n\tparams_config = ParamsConfig2;\n\tstatic type() {\n\t\treturn 'float_to_vec2';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec2';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec2GlNode.OUTPUT_NAME, ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\n\t\tconst vec = this.gl_var_name(FloatToVec2GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec2 ${vec} = ${ThreeToGl.float2(x, y)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC3\n//\n//\nclass FloatToVec3GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig3 = new FloatToVec3GlParamsConfig();\nexport class FloatToVec3GlNode extends TypedGlNode<FloatToVec3GlParamsConfig> {\n\tparams_config = ParamsConfig3;\n\tstatic type() {\n\t\treturn 'float_to_vec3';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec3';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec3GlNode.OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\n\t\tconst vec = this.gl_var_name(FloatToVec3GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${vec} = ${ThreeToGl.float3(x, y, z)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC4\n//\n//\nclass FloatToVec4GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n\tw = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig4 = new FloatToVec4GlParamsConfig();\nexport class FloatToVec4GlNode extends TypedGlNode<FloatToVec4GlParamsConfig> {\n\tparams_config = ParamsConfig4;\n\tstatic type() {\n\t\treturn 'float_to_vec4';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec4';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec4GlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\t\tconst w = this.variable_for_input('w');\n\n\t\tconst vec = this.gl_var_name(FloatToVec4GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec4 ${vec} = ${ThreeToGl.float4(x, y, z, w)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nclass VecToParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new VecToParamsConfig();\nclass BaseVecToGlNode extends TypedGlNode<VecToParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n\ninterface VecToGlOptions {\n\tcomponents: string[];\n\tparam_type: ParamType;\n}\n\nfunction VecToGlFactory(type: string, options: VecToGlOptions) {\n\tconst components = options.components;\n\tconst param_type = options.param_type;\n\treturn class VecToGlNode extends BaseVecToGlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\n\t\tinitialize_node() {\n\t\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\t\tcomponents.map((c) => {\n\t\t\t\t\treturn new TypedNamedConnectionPoint(c, ConnectionPointType.FLOAT);\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tcreate_params() {\n\t\t\tthis.add_param(param_type, 'vec', components.map((c) => 0) as Number2);\n\t\t}\n\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst body_lines: string[] = [];\n\n\t\t\tconst vec = this.variable_for_input('vec');\n\n\t\t\tthis.io.outputs.used_output_names().forEach((c) => {\n\t\t\t\tconst var_name = this.gl_var_name(c);\n\t\t\t\tbody_lines.push(`float ${var_name} = ${vec}.${c}`);\n\t\t\t});\n\t\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\t}\n\t};\n}\n\nconst components_v4 = ['x', 'y', 'z', 'w'];\n\nexport class Vec2ToFloatGlNode extends VecToGlFactory('vec2_to_float', {\n\tcomponents: ['x', 'y'],\n\tparam_type: ParamType.VECTOR2,\n}) {}\nexport class Vec3ToFloatGlNode extends VecToGlFactory('vec3_to_float', {\n\tcomponents: ['x', 'y', 'z'],\n\tparam_type: ParamType.VECTOR3,\n}) {}\nexport class Vec4ToFloatGlNode extends VecToGlFactory('vec4_to_float', {\n\tcomponents: components_v4,\n\tparam_type: ParamType.VECTOR4,\n}) {}\n\nexport class Vec4ToVectorGlNode extends BaseVecToGlNode {\n\tstatic type() {\n\t\treturn 'vec4_to_vector';\n\t}\n\tstatic readonly INPUT_NAME_VEC4 = 'vec4';\n\tstatic readonly OUTPUT_NAME_VEC3 = 'vec3';\n\tstatic readonly OUTPUT_NAME_W = 'w';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_VEC3, ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_W, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tcreate_params() {\n\t\tthis.add_param(ParamType.VECTOR4, Vec4ToVectorGlNode.INPUT_NAME_VEC4, components_v4.map((c) => 0) as Number4);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\n\t\tconst in_vec4 = Vec4ToVectorGlNode.INPUT_NAME_VEC4;\n\t\tconst out_vec3 = Vec4ToVectorGlNode.OUTPUT_NAME_VEC3;\n\t\tconst out_w = Vec4ToVectorGlNode.OUTPUT_NAME_W;\n\t\tconst vec = this.variable_for_input(in_vec4);\n\n\t\tconst used_output_names = this.io.outputs.used_output_names();\n\n\t\tif (used_output_names.indexOf(out_vec3) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_vec3);\n\t\t\tbody_lines.push(`vec3 ${var_name} = ${vec}.xyz`);\n\t\t}\n\t\tif (used_output_names.indexOf(out_w) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_w);\n\t\t\tbody_lines.push(`float ${var_name} = ${vec}.w`);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n\ninterface MathArg1Options {\n\tin?: string;\n\tout?: string;\n\tmethod?: string;\n}\n\nfunction MathFunctionArg1Factory(type: string, options: MathArg1Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_name = options.in || 'in';\n\treturn class Node extends BaseNodeGlMathFunctionArg1GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_name;\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t};\n}\nexport class AbsGlNode extends MathFunctionArg1Factory('abs') {}\nexport class AcosGlNode extends MathFunctionArg1Factory('acos', {out: 'radians'}) {}\nexport class AsinGlNode extends MathFunctionArg1Factory('asin', {out: 'radians'}) {}\nexport class AtanGlNode extends MathFunctionArg1Factory('atan', {out: 'radians'}) {}\nexport class CeilGlNode extends MathFunctionArg1Factory('ceil') {}\nexport class CosGlNode extends MathFunctionArg1Factory('cos', {in: 'radians'}) {}\nexport class DegreesGlNode extends MathFunctionArg1Factory('degrees', {in: 'radians', out: 'degrees'}) {}\n\nexport class ExpGlNode extends MathFunctionArg1Factory('exp') {}\nexport class Exp2GlNode extends MathFunctionArg1Factory('exp2') {}\nexport class FloorGlNode extends MathFunctionArg1Factory('floor') {}\nexport class FractGlNode extends MathFunctionArg1Factory('fract') {}\nexport class InverseSqrtGlNode extends MathFunctionArg1Factory('inverse_sqrt', {method: 'inversesqrt'}) {}\nexport class LogGlNode extends MathFunctionArg1Factory('log') {}\nexport class Log2GlNode extends MathFunctionArg1Factory('log2') {}\nexport class NormalizeGlNode extends MathFunctionArg1Factory('normalize', {out: 'normalized'}) {}\nexport class RadiansGlNode extends MathFunctionArg1Factory('radians', {in: 'degrees', out: 'radians'}) {}\nexport class SignGlNode extends MathFunctionArg1Factory('sign') {}\nexport class SinGlNode extends MathFunctionArg1Factory('sin', {in: 'radians'}) {}\nexport class SqrtGlNode extends MathFunctionArg1Factory('sqrt') {}\nexport class TanGlNode extends MathFunctionArg1Factory('tan') {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\ninterface MathArg2OperationOptions {\n\tin_prefix: string;\n\tout: string;\n\toperation: string;\n\tallowed_in_types?: ConnectionPointType[];\n}\n\nfunction MathFunctionArg2OperationFactory(type: string, options: MathArg2OperationOptions) {\n\tconst in_prefix = options.in_prefix || type;\n\tconst output_name = options.out || 'val';\n\tconst operation = options.operation;\n\tconst allowed_in_types = options.allowed_in_types;\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\t\tconst name = connection.name;\n\t\t\t\tconst variable = this.variable_for_input(name);\n\t\t\t\tif (variable) {\n\t\t\t\t\treturn ThreeToGl.any(variable);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst joined_args = args.join(` ${this.gl_operation()} `);\n\n\t\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn `${in_prefix}${index}`;\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn output_name;\n\t\t}\n\t\tgl_operation(): string {\n\t\t\treturn operation;\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || ConnectionPointType.FLOAT;\n\n\t\t\tconst current_connections = this.io.connections.input_connections();\n\t\t\tconst expected_count = current_connections ? Math.max(current_connections.length + 1, 2) : 2;\n\t\t\tconst expected_input_types = [];\n\t\t\tfor (let i = 0; i < expected_count; i++) {\n\t\t\t\texpected_input_types.push(type);\n\t\t\t}\n\t\t\treturn expected_input_types;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\tconst type = this._expected_input_types()[0];\n\t\t\treturn [type];\n\t\t}\n\t};\n}\nexport class AddGlNode extends MathFunctionArg2OperationFactory('add', {\n\tin_prefix: 'add',\n\tout: 'sum',\n\toperation: '+',\n}) {}\nexport class DivideGlNode extends MathFunctionArg2OperationFactory('divide', {\n\tin_prefix: 'div',\n\tout: 'divide',\n\toperation: '/',\n}) {}\nexport class SubstractGlNode extends MathFunctionArg2OperationFactory('substract', {\n\tin_prefix: 'sub',\n\tout: 'substract',\n\toperation: '-',\n}) {}\n\nexport class MultGlNode extends MathFunctionArg2OperationFactory('mult', {\n\tin_prefix: 'mult',\n\tout: 'product',\n\toperation: '*',\n}) {\n\tstatic type() {\n\t\treturn 'mult';\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn 1;\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_output_type() {\n\t\tconst input_types = this._expected_input_types();\n\t\tconst type = input_types[input_types.length - 1];\n\t\treturn [type];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst input_connections = this.io.connections.input_connections();\n\t\tif (input_connections) {\n\t\t\tconst first_connection = input_connections[0];\n\n\t\t\tif (first_connection) {\n\t\t\t\tconst connection_point_for_first_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\tfirst_connection.input_index\n\t\t\t\t];\n\t\t\t\tconst type = connection_point_for_first_connection.type;\n\t\t\t\tconst expected_count = input_connections ? input_connections.length + 1 : 2;\n\t\t\t\tconst empty_array = new Array(expected_count);\n\n\t\t\t\tif (type == ConnectionPointType.FLOAT) {\n\t\t\t\t\tconst second_connection = input_connections ? input_connections[1] : null;\n\t\t\t\t\tif (second_connection) {\n\t\t\t\t\t\tconst connection_point_for_second_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\t\t\tsecond_connection.input_index\n\t\t\t\t\t\t];\n\t\t\t\t\t\tconst second_type = connection_point_for_second_connection.type;\n\t\t\t\t\t\tif (second_type == ConnectionPointType.FLOAT) {\n\t\t\t\t\t\t\t// if first 2 inputs are float: n+1 float inputs\n\t\t\t\t\t\t\treturn empty_array.map((i) => type);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// if first input is float and 2nd is different: 1 float, 1 like second, and no other input\n\t\t\t\t\t\t\treturn [type, second_type];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if only 1 input: 2 with same type\n\t\t\t\t\t\treturn [type, type];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// if first input is not a float: n+1 inputs with same type\n\t\t\t\t\treturn empty_array.map(() => type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [ConnectionPointType.FLOAT, ConnectionPointType.FLOAT];\n\t}\n}\n","import {BaseNodeGlMathFunctionArgBoolean2GlNode} from './_BaseMathFunctionArgBoolean2';\n\ninterface MathArg2BooleanOptions {\n\top: string;\n}\n\nfunction MathFunctionArg2BooleanFactory(type: string, options: MathArg2BooleanOptions) {\n\treturn class Node extends BaseNodeGlMathFunctionArgBoolean2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\n\t\tboolean_operation(): string {\n\t\t\treturn options.op;\n\t\t}\n\t\tprotected _gl_output_name(index: number) {\n\t\t\treturn type;\n\t\t}\n\t\tprotected _gl_input_name(index = 0) {\n\t\t\treturn `${type}${index}`;\n\t\t}\n\t};\n}\nexport class AndGlNode extends MathFunctionArg2BooleanFactory('and', {op: '&&'}) {}\nexport class OrGlNode extends MathFunctionArg2BooleanFactory('or', {op: '||'}) {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\n\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport abstract class BaseNodeGlMathFunctionArgBoolean2GlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_input_types() {\n\t\treturn [ConnectionPointType.BOOL, ConnectionPointType.BOOL];\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.BOOL];\n\t}\n\n\tabstract boolean_operation(): string;\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst args = this.io.inputs.named_input_connection_points.map((named_input, i) => {\n\t\t\tconst name = named_input.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(` ${this.boolean_operation()} `);\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `bool ${sum} = ${joined_args}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tDIR = 'dir',\n\tUP = 'up',\n}\nconst InputNames: Array<InputName> = [InputName.DIR, InputName.UP];\ninterface IDefaultValues {\n\t[InputName.DIR]: Number3;\n\t[InputName.UP]: Number3;\n}\nconst DEFAULT_DIR: Number3 = [0, 0, 1];\nconst DEFAULT_UP: Number3 = [0, 1, 0];\nconst DefaultValues: IDefaultValues = {\n\t[InputName.DIR]: DEFAULT_DIR,\n\t[InputName.UP]: DEFAULT_UP,\n};\n\nexport class AlignGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'align';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.VEC3,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'align';\n\t}\n\n\t// protected expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.VEC3];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport ComplementMethods from './gl/complement.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class ComplementGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'complement';\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'complement';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [\n\t\t\tnew FunctionGLDefinition(\n\t\t\t\tthis,\n\t\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT,\n\t\t\t\tComplementMethods\n\t\t\t),\n\t\t];\n\t}\n}\n","export default \"float complement(float x){return 1.0-x;}\\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\\n\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'cross';\n\nclass CrossGlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.VECTOR3([0, 0, 1]);\n\ty = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CrossGlParamsConfig();\nexport class CrossGlNode extends TypedGlNode<CrossGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cross';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = ThreeToGl.float(this.variable_for_input('x'));\n\t\tconst y = ThreeToGl.float(this.variable_for_input('y'));\n\n\t\tconst result = this.gl_var_name(OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${result} = cross(${x}, ${y})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import CycleMethods from './gl/cycle.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\n\nexport class CycleGlNode extends MathFunctionArg3Factory('cycle', {\n\tin: ['in', 'min', 'max'],\n\tdefault: {max: 1},\n\tfunctions: [CycleMethods],\n}) {}\n","export default \"float cycle(float val, float val_min, float val_max){\\n\\tif(val >= val_min && val < val_max){\\n\\t\\treturn val;\\n\\t} else {\\n\\t\\tfloat range = val_max - val_min;\\n\\t\\tif(val >= val_max){\\n\\t\\t\\tfloat delta = (val - val_max);\\n\\t\\t\\treturn val_min + mod(delta, range);\\n\\t\\t} else {\\n\\t\\t\\tfloat delta = (val_min - val);\\n\\t\\t\\treturn val_max - mod(delta, range);\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport DiskMethods from './gl/disk.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nconst OUTPUT_NAME = 'float';\nclass DiskGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR2([0, 0]);\n\tcenter = ParamConfig.VECTOR2([0, 0]);\n\tradius = ParamConfig.FLOAT(1);\n\tfeather = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new DiskGlParamsConfig();\nexport class DiskGlNode extends TypedGlNode<DiskGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'disk';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst position = ThreeToGl.vector2(this.variable_for_input('position'));\n\t\tconst center = ThreeToGl.vector2(this.variable_for_input('center'));\n\t\tconst radius = ThreeToGl.float(this.variable_for_input('radius'));\n\t\tconst feather = ThreeToGl.float(this.variable_for_input('feather'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = disk(${position}, ${center}, ${radius}, ${feather})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\n\t\tshaders_collection_controller.add_definitions(this, [\n\t\t\tnew FunctionGLDefinition(this, ConnectionPointType.FLOAT, DiskMethods),\n\t\t]);\n\t}\n}\n","export default \"float disk(vec2 pos, vec2 center, float radius, float feather){\\n\\tfloat dist = distance(pos, center);\\n\\tif(feather <= 0.0){\\n\\t\\tif(dist < radius){return 1.0;}else{return 0.0;}\\n\\t} else {\\n\\t\\tfloat half_feather = feather * 0.5;\\n\\t\\tif(dist < (radius - half_feather)){\\n\\t\\t\\treturn 1.0;\\n\\t\\t} else {\\n\\t\\t\\tif(dist > (radius + half_feather)){\\n\\t\\t\\t\\treturn 0.0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfloat feather_start = (radius - half_feather);\\n\\t\\t\\t\\tfloat blend = 1.0 - (dist - feather_start) / feather;\\n\\t\\t\\t\\treturn blend;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\n// https://github.com/glslify/glsl-easings\nimport CircularInOut from './gl/easing/circular-in-out.glsl';\nimport ExponentialInOut from './gl/easing/exponential-in-out.glsl';\nimport CircularIn from './gl/easing/circular-in.glsl';\nimport ElasticOut from './gl/easing/elastic-out.glsl';\nimport CubicIn from './gl/easing/cubic-in.glsl';\nimport ExponentialOut from './gl/easing/exponential-out.glsl';\nimport QuinticOut from './gl/easing/quintic-out.glsl';\nimport ElasticInOut from './gl/easing/elastic-in-out.glsl';\nimport Linear from './gl/easing/linear.glsl';\nimport CircularOut from './gl/easing/circular-out.glsl';\nimport BackInOut from './gl/easing/back-in-out.glsl';\nimport BackIn from './gl/easing/back-in.glsl';\nimport SineIn from './gl/easing/sine-in.glsl';\nimport BackOut from './gl/easing/back-out.glsl';\nimport QuarticInOut from './gl/easing/quartic-in-out.glsl';\nimport QuadraticIn from './gl/easing/quadratic-in.glsl';\nimport CubicInOut from './gl/easing/cubic-in-out.glsl';\nimport ElasticIn from './gl/easing/elastic-in.glsl';\nimport BounceOut from './gl/easing/bounce-out.glsl';\nimport QuadraticInOut from './gl/easing/quadratic-in-out.glsl';\nimport ExponentialIn from './gl/easing/exponential-in.glsl';\nimport QuinticInOut from './gl/easing/quintic-in-out.glsl';\nimport SineInOut from './gl/easing/sine-in-out.glsl';\nimport CubicOut from './gl/easing/cubic-out.glsl';\nimport QuadraticOut from './gl/easing/quadratic-out.glsl';\nimport BounceInOut from './gl/easing/bounce-in-out.glsl';\nimport QuinticIn from './gl/easing/quintic-in.glsl';\nimport QuarticIn from './gl/easing/quartic-in.glsl';\nimport QuarticOut from './gl/easing/quartic-out.glsl';\nimport BounceIn from './gl/easing/bounce-in.glsl';\nimport SineOut from './gl/easing/sine-out.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst EASE_NAMES = [\n\t'back-in-out',\n\t'back-in',\n\t'back-out',\n\t'bounce-in-out',\n\t'bounce-in',\n\t'bounce-out',\n\t'circular-in-out',\n\t'circular-in',\n\t'circular-out',\n\t'cubic-in-out',\n\t'cubic-in',\n\t'cubic-out',\n\t'elastic-in-out',\n\t'elastic-in',\n\t'elastic-out',\n\t'exponential-in-out',\n\t'exponential-in',\n\t'exponential-out',\n\t'linear',\n\t'quadratic-in-out',\n\t'quadratic-in',\n\t'quadratic-out',\n\t// \"quartic-in-out\",\n\t// \"quartic-in\",\n\t// \"quartic-out\",\n\t// \"quintic-in-out\",\n\t// \"quintic-in\",\n\t// \"quintic-out\",\n\t'sine-in-out',\n\t'sine-in',\n\t'sine-out',\n];\n\nconst IMPORT_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': CircularInOut,\n\t'exponential-in-out': ExponentialInOut,\n\t'circular-in': CircularIn,\n\t'elastic-out': ElasticOut,\n\t'cubic-in': CubicIn,\n\t'exponential-out': ExponentialOut,\n\t'quintic-out': QuinticOut,\n\t'elastic-in-out': ElasticInOut,\n\tlinear: Linear,\n\t'circular-out': CircularOut,\n\t'back-in-out': BackInOut,\n\t'back-in': BackIn,\n\t'sine-in': SineIn,\n\t'back-out': BackOut,\n\t'quartic-in-out': QuarticInOut,\n\t'quadratic-in': QuadraticIn,\n\t'cubic-in-out': CubicInOut,\n\t'elastic-in': ElasticIn,\n\t'bounce-out': BounceOut,\n\t'quadratic-in-out': QuadraticInOut,\n\t'exponential-in': ExponentialIn,\n\t'quintic-in-out': QuinticInOut,\n\t'sine-in-out': SineInOut,\n\t'cubic-out': CubicOut,\n\t'quadratic-out': QuadraticOut,\n\t'bounce-in-out': BounceInOut,\n\t'quintic-in': QuinticIn,\n\t'quartic-in': QuarticIn,\n\t'quartic-out': QuarticOut,\n\t'bounce-in': BounceIn,\n\t'sine-out': SineOut,\n};\nconst IMPORT_DEPENDENCIES_BY_EASE_NAME: Dictionary<string[]> = {\n\t'bounce-in': [BounceOut],\n\t'bounce-in-out': [BounceOut],\n};\n\nconst METHOD_NAMES_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': 'circularInOut',\n\t'exponential-in-out': 'exponentialInOut',\n\t'circular-in': 'circularIn',\n\t'elastic-out': 'elasticOut',\n\t'cubic-in': 'cubicIn',\n\t'exponential-out': 'exponentialOut',\n\t'quintic-out': 'quinticOut',\n\t'elastic-in-out': 'elasticInOut',\n\tlinear: 'linear',\n\t'circular-out': 'circularOut',\n\t'back-in-out': 'backInOut',\n\t'back-in': 'backIn',\n\t'sine-in': 'sineIn',\n\t'back-out': 'backOut',\n\t'quartic-in-out': 'quarticInOut',\n\t'quadratic-in': 'quadraticIn',\n\t'cubic-in-out': 'cubicInOut',\n\t'elastic-in': 'elasticIn',\n\t'bounce-out': 'bounceOut',\n\t'quadratic-in-out': 'quadraticInOut',\n\t'exponential-in': 'exponentialIn',\n\t'quintic-in-out': 'quinticInOut',\n\t'sine-in-out': 'sineInOut',\n\t'cubic-out': 'cubicOut',\n\t'quadratic-out': 'quadraticOut',\n\t'bounce-in-out': 'bounceInOut',\n\t'quintic-in': 'quinticIn',\n\t'quartic-in': 'quarticIn',\n\t'quartic-out': 'quarticOut',\n\t'bounce-in': 'bounceIn',\n\t'sine-out': 'sineOut',\n};\n\nconst OUTPUT_NAME = 'out';\nconst default_ease_type = EASE_NAMES.indexOf('sine-in-out');\nclass EasingGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_ease_type, {\n\t\tmenu: {\n\t\t\tentries: EASE_NAMES.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new EasingGlParamsConfig();\nexport class EasingGlNode extends TypedGlNode<EasingGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'easing';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.spare_params_controller.set_inputless_param_names(['type']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst ease_name = EASE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_EASE_NAME[ease_name];\n\t\tconst glsl_function_code = IMPORT_BY_EASE_NAME[ease_name];\n\n\t\tlet ease_functions = [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, glsl_function_code)];\n\t\tconst function_dependencies = (IMPORT_DEPENDENCIES_BY_EASE_NAME[ease_name] || []).map(\n\t\t\t(f) => new FunctionGLDefinition(this, ConnectionPointType.FLOAT, f)\n\t\t);\n\t\tif (function_dependencies) {\n\t\t\tease_functions = function_dependencies.concat(ease_functions);\n\t\t}\n\t\t// ease_functions.forEach(ease_function=>{\n\t\t// \tfunction_declaration_lines.push(ease_function)\n\t\t// })\n\n\t\tconst in_value = ThreeToGl.float(this.variable_for_input('input'));\n\t\tconst out_value = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst body_line = `float ${out_value} = ${method_name}(${in_value})`;\n\t\tshaders_collection_controller.add_definitions(this, ease_functions);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","export default \"float circularInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\\n}\\n\\n\"","export default \"float exponentialInOut(float t) {\\n  return t == 0.0 || t == 1.0\\n    ? t\\n    : t < 0.5\\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\\n}\\n\\n\"","export default \"float circularIn(float t) {\\n  return 1.0 - sqrt(1.0 - t * t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticOut(float t) {\\n  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;\\n}\\n\\n\"","export default \"float cubicIn(float t) {\\n  return t * t * t;\\n}\\n\\n\"","export default \"float exponentialOut(float t) {\\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\\n}\\n\\n\"","export default \"float quinticOut(float t) {\\n  return 1.0 - (pow(t - 1.0, 5.0));\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\\n}\\n\\n\"","export default \"float linear(float t) {\\n  return t;\\n}\\n\\n\"","export default \"float circularOut(float t) {\\n  return sqrt((2.0 - t) * t);\\n}\\n\\n\"","export default \"\\nfloat backInOut(float t) {\\n  float f = t < 0.5\\n    ? 2.0 * t\\n    : 1.0 - (2.0 * t - 1.0);\\n\\n  float g = pow(f, 3.0) - f * sin(f * PI);\\n\\n  return t < 0.5\\n    ? 0.5 * g\\n    : 0.5 * (1.0 - g) + 0.5;\\n}\\n\\n\"","export default \"\\nfloat backIn(float t) {\\n  return pow(t, 3.0) - t * sin(t * PI);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineIn(float t) {\\n  return sin((t - 1.0) * HALF_PI) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat backOut(float t) {\\n  float f = 1.0 - t;\\n  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\\n}\\n\\n\"","export default \"float quarticInOut(float t) {\\n  return t < 0.5\\n    ? +8.0 * pow(t, 4.0)\\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\\n}\\n\\n\"","export default \"float quadraticIn(float t) {\\n  return t * t;\\n}\\n\\n\"","export default \"float cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticIn(float t) {\\n  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"\\nfloat bounceOut(float t) {\\n  const float a = 4.0 / 11.0;\\n  const float b = 8.0 / 11.0;\\n  const float c = 9.0 / 10.0;\\n\\n  const float ca = 4356.0 / 361.0;\\n  const float cb = 35442.0 / 1805.0;\\n  const float cc = 16061.0 / 1805.0;\\n\\n  float t2 = t * t;\\n\\n  return t < a\\n    ? 7.5625 * t2\\n    : t < b\\n      ? 9.075 * t2 - 9.9 * t + 3.4\\n      : t < c\\n        ? ca * t2 - cb * t + cc\\n        : 10.8 * t * t - 20.52 * t + 10.72;\\n}\\n\\n\"","export default \"float quadraticInOut(float t) {\\n  float p = 2.0 * t * t;\\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\\n}\\n\\n\"","export default \"float exponentialIn(float t) {\\n  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"float quinticInOut(float t) {\\n  return t < 0.5\\n    ? +16.0 * pow(t, 5.0)\\n    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat sineInOut(float t) {\\n  return -0.5 * (cos(PI * t) - 1.0);\\n}\\n\\n\"","export default \"float cubicOut(float t) {\\n  float f = t - 1.0;\\n  return f * f * f + 1.0;\\n}\\n\\n\"","export default \"float quadraticOut(float t) {\\n  return -t * (t - 2.0);\\n}\\n\\n\"","export default \"\\nfloat bounceInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\\n}\\n\\n\\n\\n\"","export default \"float quinticIn(float t) {\\n  return pow(t, 5.0);\\n}\\n\\n\"","export default \"float quarticIn(float t) {\\n  return pow(t, 4.0);\\n}\\n\\n\"","export default \"float quarticOut(float t) {\\n  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat bounceIn(float t) {\\n  return 1.0 - bounceOut(1.0 - t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineOut(float t) {\\n  return sin(t * HALF_PI);\\n}\\n\\n\"","import {BaseNodeGlMathFunctionArg5GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class FitGlNode extends BaseNodeGlMathFunctionArg5GlNode {\n\tstatic type() {\n\t\treturn 'fit';\n\t}\n\n\tprotected _gl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max', 'dest_min', 'dest_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tprotected gl_method_name(): string {\n\t\treturn 'fit';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class Fit01GlNode extends BaseNodeGlMathFunctionArg3GlNode {\n\tstatic type() {\n\t\treturn 'fit01';\n\t}\n\n\tgl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'fit01';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Hsv2Rgb from './gl/hsv2rgb.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst OUTPUT_NAME = 'rgb';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HsvToRgbGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new HsvToRgbGlParamsConfig();\nexport class HsvToRgbGlNode extends TypedGlNode<HsvToRgbGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hsv_to_rgb';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Hsv2Rgb));\n\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input(this.p.hsv.name));\n\n\t\tconst rgb = this.gl_var_name(OUTPUT_NAME);\n\t\tbody_lines.push(`vec3 ${rgb} = hsv2rgb(${value})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://github.com/hughsk/glsl-hsv2rgb\\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 hsv2rgb(vec3 c) {\\n\\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n\\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n\\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport QuaternionMethods from './gl/quaternion.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst VARS = {\n\tposition: 'position',\n\tnormal: 'normal',\n\tinstance_position: 'instancePosition',\n\tinstance_orientation: 'instanceOrientation',\n\tinstance_scale: 'instanceScale',\n};\n\nclass InstanceTransformGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR3([0, 0, 0]);\n\tnormal = ParamConfig.VECTOR3([0, 0, 1]);\n\tinstance_position = ParamConfig.VECTOR3([0, 0, 0]);\n\tinstance_orientation = ParamConfig.VECTOR4([0, 0, 0, 0]);\n\tinstance_scale = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new InstanceTransformGlParamsConfig();\nexport class InstanceTransformGlNode extends TypedGlNode<InstanceTransformGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance_transform';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_position(), ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_normal(), ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\t\tconst function_declaration_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC4, QuaternionMethods));\n\n\t\tconst input_position = this.io.inputs.named_input(this.p.position.name);\n\t\tconst position = input_position\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.position.name))\n\t\t\t: this._default_position();\n\n\t\tconst input_normal = this.io.inputs.named_input(this.p.normal.name);\n\t\tconst normal = input_normal\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.normal.name))\n\t\t\t: this._default_normal();\n\n\t\tconst input_instancePosition = this.io.inputs.named_input(this.p.instance_position.name);\n\t\tconst instancePosition = input_instancePosition\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_position.name))\n\t\t\t: this._default_instance_position(shaders_collection_controller);\n\t\t// const instancePosition = ThreeToGl.float(this.variable_for_input('instancePosition'))\n\n\t\tconst input_instanceOrientation = this.io.inputs.named_input(this.p.instance_orientation.name);\n\t\tconst instanceOrientation = input_instanceOrientation\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_orientation.name))\n\t\t\t: this._default_input_instance_orientation(shaders_collection_controller);\n\n\t\tconst input_instanceScale = this.io.inputs.named_input(this.p.instance_scale.name);\n\t\tconst instanceScale = input_instanceScale\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_scale.name))\n\t\t\t: this._default_input_instance_scale(shaders_collection_controller);\n\n\t\tconst result_position = this.gl_var_name(this.gl_output_name_position());\n\t\tconst result_normal = this.gl_var_name(this.gl_output_name_normal());\n\t\tbody_lines.push(`vec3 ${result_position} = vec3(${position})`);\n\t\tbody_lines.push(`${result_position} *= ${instanceScale}`);\n\t\tbody_lines.push(`${result_position} = rotate_with_quat( ${result_position}, ${instanceOrientation} )`);\n\t\tbody_lines.push(`${result_position} += ${instancePosition}`);\n\t\tbody_lines.push(`vec3 ${result_normal} = vec3(${normal})`);\n\t\tbody_lines.push(`${result_normal} = rotate_with_quat( ${result_normal}, ${instanceOrientation} )`);\n\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t}\n\tgl_output_name_position() {\n\t\treturn 'position';\n\t}\n\tgl_output_name_normal() {\n\t\treturn 'normal';\n\t}\n\n\tprivate _default_position(): string {\n\t\treturn VARS.position;\n\t}\n\tprivate _default_normal(): string {\n\t\treturn VARS.normal;\n\t}\n\tprivate _default_instance_position(shaders_collection_controller: ShadersCollectionController): string | undefined {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_position,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_position, this._shader_name);\n\t}\n\tprivate _default_input_instance_orientation(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC4,\n\t\t\tVARS.instance_orientation,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec4', VARS.instance_orientation, this._shader_name);\n\t}\n\tprivate _default_input_instance_scale(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_scale,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_scale, this._shader_name);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class LengthGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'length';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['x'][index];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'length';\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'lum';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LuminanceGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new LuminanceGlParamsConfig();\nexport class LuminanceGlNode extends TypedGlNode<LuminanceGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'luminance';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input('color'));\n\n\t\tconst lum = this.gl_var_name('lum');\n\t\t// linearToRelativeLuminance is declared in threejs common.glsl.js\n\t\tconst body_line = `float ${lum} = linearToRelativeLuminance(${value})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class MixGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'mix';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['value0', 'value1', 'blend'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_output_name() {\n\t\treturn 'mix';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg4GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst DefaultValues: Dictionary<number> = {\n\tmult: 1,\n};\n\nenum InputName {\n\tVALUE = 'value',\n\tPRE_ADD = 'pre_add',\n\tMULT = 'mult',\n\tPOST_ADD = 'post_add',\n}\n\nexport class MultAddGlNode extends BaseNodeGlMathFunctionArg4GlNode {\n\tstatic type() {\n\t\treturn 'mult_add';\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.VALUE, InputName.PRE_ADD, InputName.MULT, InputName.POST_ADD][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.any(this.variable_for_input(InputName.VALUE));\n\t\tconst pre_add = ThreeToGl.any(this.variable_for_input(InputName.PRE_ADD));\n\t\tconst mult = ThreeToGl.any(this.variable_for_input(InputName.MULT));\n\t\tconst post_add = ThreeToGl.any(this.variable_for_input(InputName.POST_ADD));\n\n\t\tconst gl_type = this._expected_output_types()[0];\n\t\tconst out_name = this.io.outputs.named_output_connection_points[0].name;\n\t\tconst out = this.gl_var_name(out_name);\n\t\tconst body_line = `${gl_type} ${out} = (${mult}*(${value} + ${pre_add})) + ${post_add}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NegateGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'negate';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['in'][index]);\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['in'][index];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input(this._gl_input_name(0)));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${gl_type} ${out} = -1.0 * ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport {TypedGlNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\n// https://github.com/stegu/webgl-noise/\nimport NoiseCommon from './gl/noise/common.glsl';\n// import cellular2D from './Gl/noise/cellular2D.glsl'\n// import cellular2x2 from './Gl/noise/cellular2x2.glsl'\n// import cellular2x2x2 from './Gl/noise/cellular2x2x2.glsl'\n// import cellular3D from './Gl/noise/cellular3D.glsl'\nimport classicnoise2D from './gl/noise/classicnoise2D.glsl';\nimport classicnoise3D from './gl/noise/classicnoise3D.glsl';\nimport classicnoise4D from './gl/noise/classicnoise4D.glsl';\nimport noise2D from './gl/noise/noise2D.glsl';\nimport noise3D from './gl/noise/noise3D.glsl';\n// import noise3Dgrad from './Gl/noise/noise3Dgrad.glsl'\nimport noise4D from './gl/noise/noise4D.glsl';\nimport {ConnectionPointType, ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n// import psrdnoise2D from './Gl/noise/psrdnoise2D.glsl'\n\nenum NOISE_NAME {\n\t// 'cellular2D',\n\t// 'cellular2x2',\n\t// 'cellular2x2x2',\n\t// 'cellular3D',\n\tCLASSIC_PERLIN_2D = 'Classic Perlin 2D',\n\t// 'Classic Perlin 2D with periodic variant',\n\tCLASSIC_PERLIN_3D = 'Classic Perlin 3D',\n\t// 'Classic Perlin 3D with periodic variant',\n\tCLASSIC_PERLIN_4D = 'Classic Perlin 4D',\n\t// 'Classic Perlin 4D with periodic variant',\n\tNOISE_2D = 'noise2D',\n\tNOISE_3D = 'noise3D',\n\t// 'noise3Dgrad',\n\tNOISE_4D = 'noise4D',\n\t// 'Periodic Simplex Rotating Derivative', // psrdnoise\n\t// 'Periodic Simplex Derivative', // psdnoise\n\t// 'Periodic Simplex Rotating', // psrnoise\n\t// 'Periodic Simplex', // psnoise\n\t// 'Simplex Rotating Derivating', // srdnoise\n\t// 'Simplex Derivating', // sdnoise\n\t// 'Simplex Rotating', // srnoise\n\t// 'Simplex', // snoise\n}\nconst NOISE_NAMES: Array<NOISE_NAME> = [\n\tNOISE_NAME.CLASSIC_PERLIN_2D,\n\tNOISE_NAME.CLASSIC_PERLIN_3D,\n\tNOISE_NAME.CLASSIC_PERLIN_4D,\n\tNOISE_NAME.NOISE_2D,\n\tNOISE_NAME.NOISE_3D,\n\tNOISE_NAME.NOISE_4D,\n];\n\ntype StringByNoise = {[key in NOISE_NAME]: string};\nconst IMPORT_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: classicnoise2D,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: classicnoise3D,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: classicnoise4D,\n\t[NOISE_NAME.NOISE_2D]: noise2D,\n\t[NOISE_NAME.NOISE_3D]: noise3D,\n\t[NOISE_NAME.NOISE_4D]: noise4D,\n};\ntype ConnectionTypeByNoise = {[key in NOISE_NAME]: ConnectionPointType};\nconst INPUT_TYPES_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.VEC4,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.VEC4,\n};\n\nconst OUTPUT_TYPE_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.FLOAT,\n};\nconst METHOD_NAMES_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: 'cnoise',\n\t[NOISE_NAME.NOISE_2D]: 'snoise',\n\t[NOISE_NAME.NOISE_3D]: 'snoise',\n\t[NOISE_NAME.NOISE_4D]: 'snoise',\n};\n\nenum OUTPUT_TYPE {\n\tNoChange = 0,\n\tFloat = 1,\n\tVec2 = 2,\n\tVec3 = 3,\n\tVec4 = 4,\n}\nconst OUTPUT_TYPES: Array<OUTPUT_TYPE> = [\n\tOUTPUT_TYPE.NoChange,\n\tOUTPUT_TYPE.Float,\n\tOUTPUT_TYPE.Vec2,\n\tOUTPUT_TYPE.Vec3,\n\tOUTPUT_TYPE.Vec4,\n];\ntype StringByOutputType = {[key in OUTPUT_TYPE]: string};\nconst OUTPUT_TYPE_LABEL: StringByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: 'Same as noise',\n\t[OUTPUT_TYPE.Float]: 'Float',\n\t[OUTPUT_TYPE.Vec2]: 'Vec2',\n\t[OUTPUT_TYPE.Vec3]: 'Vec3',\n\t[OUTPUT_TYPE.Vec4]: 'Vec4',\n};\ntype ConnectionTypeByOutputType = {[key in OUTPUT_TYPE]: ConnectionPointType};\nconst CONNECTION_TYPE_BY_OUTPUT_TYPE: ConnectionTypeByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Float]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Vec2]: ConnectionPointType.VEC2,\n\t[OUTPUT_TYPE.Vec3]: ConnectionPointType.VEC3,\n\t[OUTPUT_TYPE.Vec4]: ConnectionPointType.VEC4,\n};\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\nconst OUTPUT_NAME = 'noise';\nconst default_noise_type = NOISE_NAMES.indexOf(NOISE_NAME.NOISE_3D);\nconst default_output_type = OUTPUT_TYPE.NoChange;\n\nconst DefaultValues: Dictionary<number> = {\n\tamp: 1,\n\tfreq: 1,\n};\n\nenum InputName {\n\tAMP = 'amp',\n\tPOSITION = 'position',\n\tFREQ = 'freq',\n\tOFFSET = 'offset',\n}\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nclass NoiseGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_noise_type, {\n\t\tmenu: {\n\t\t\tentries: NOISE_NAMES.map((noise_name, i) => {\n\t\t\t\tconst noise_output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\t\tconst name = `${noise_name} (output: ${noise_output_type})`;\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\toutput_type = ParamConfig.INTEGER(default_output_type, {\n\t\tmenu: {\n\t\t\tentries: OUTPUT_TYPES.map((output_type) => {\n\t\t\t\tconst val = OUTPUT_TYPES[output_type];\n\t\t\t\tconst name = OUTPUT_TYPE_LABEL[val];\n\t\t\t\treturn {name: name, value: val};\n\t\t\t}),\n\t\t},\n\t});\n\toctaves = ParamConfig.INTEGER(3, {range: [1, 10], range_locked: [true, false]});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseparator = ParamConfig.SEPARATOR();\n}\nconst ParamsConfig = new NoiseGlParamsConfig();\nexport class NoiseGlNode extends TypedGlNode<NoiseGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t\tthis.spare_params_controller.set_inputless_param_names(['octaves', 'amp_attenuation', 'freq_increase']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.AMP, InputName.POSITION, InputName.FREQ, InputName.OFFSET][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tprivate _expected_input_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\treturn [type, type, type, type];\n\t}\n\tprivate _expected_output_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst output_type = OUTPUT_TYPES[this.pv.output_type];\n\t\tif (output_type == OUTPUT_TYPE.NoChange) {\n\t\t\treturn [OUTPUT_TYPE_BY_NOISE_NAME[noise_name]];\n\t\t} else {\n\t\t\treturn [CONNECTION_TYPE_BY_OUTPUT_TYPE[output_type]];\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst noise_function = IMPORT_BY_NOISE_NAME[noise_name];\n\t\tconst noise_output_gl_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, NoiseCommon));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, noise_function));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, this.fbm_function()));\n\n\t\tconst output_gl_type = this._expected_output_types()[0];\n\n\t\t// if the requested output type matches the noise signature\n\t\tif (output_gl_type == noise_output_gl_type) {\n\t\t\tconst line = this.single_noise_line();\n\t\t\t// body_lines.push( `${output_gl_type} ${noise} = ${amp}*${method_name}(${joined_args})` )\n\t\t\tbody_lines.push(line);\n\t\t} else {\n\t\t\t// if the requested output type does not match the noise signature\n\t\t\tconst requested_components_count = ConnectionPointComponentsCountMap[output_gl_type];\n\t\t\t// const noise_output_components_count = OUTPUT_TYPE_BY_NOISE_NAME[output_gl_type]\n\n\t\t\t// console.log(\"compare\", output_gl_type, requested_components_count, noise_output_components_count)\n\t\t\t// if(requested_components_count < noise_output_components_count){\n\t\t\t// \t// not sure we ever go through here with the current noise set\n\t\t\t// \tlet component = lodash_range(requested_components_count).map(i=>ALL_COMPONENTS[i]).join('')\n\t\t\t// \tconst line = this.single_noise_line('', component)\n\t\t\t// \tbody_lines.push(line)\n\t\t\t// } else {\n\t\t\tconst lines_count_required = requested_components_count;\n\t\t\tconst assembly_args: string[] = [];\n\t\t\tconst noise = this.gl_var_name('noise');\n\t\t\tfor (let i = 0; i < lines_count_required; i++) {\n\t\t\t\tconst component = ALL_COMPONENTS[i];\n\t\t\t\tassembly_args.push(`${noise}${component}`);\n\t\t\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t\t\t// if (lodash_isArray(input_constructor)) {\n\t\t\t\t// TODO: for noise3Dgrad and other noises with 2 inputs\n\t\t\t\t// } else {\n\t\t\t\t// console.log(INPUT_TYPES_BY_NOISE_NAME, noise_name)\n\t\t\t\tconst offset_gl_type = input_type;\n\t\t\t\tconst offset_components_count = ConnectionPointComponentsCountMap[offset_gl_type];\n\t\t\t\tconst offset_values = lodash_range(offset_components_count)\n\t\t\t\t\t.map((j) => ThreeToGl.float(1000 * i))\n\t\t\t\t\t.join(', ');\n\t\t\t\tconst offset2 = `${offset_gl_type}(${offset_values})`;\n\t\t\t\tconst line = this.single_noise_line(component, component, offset2);\n\t\t\t\tbody_lines.push(line);\n\t\t\t\t// }\n\t\t\t}\n\t\t\tconst joined_args = assembly_args.join(', ');\n\t\t\tconst assembly_line = `vec${lines_count_required} ${noise} = vec${lines_count_required}(${joined_args})`;\n\t\t\tbody_lines.push(assembly_line);\n\t\t\t// }\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate fbm_method_name() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\t\treturn `fbm_${method_name}_${this.name}`;\n\t}\n\n\tprivate fbm_function() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\n\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\n\t\treturn `\nfloat ${this.fbm_method_name()} (in ${input_type} st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < ${ThreeToGl.int(this.pv.octaves)}; i++) {\n\t\tvalue += amplitude * ${method_name}(st);\n\t\tst *= ${ThreeToGl.float(this.pv.freq_increase)};\n\t\tamplitude *= ${ThreeToGl.float(this.pv.amp_attenuation)};\n\t}\n\treturn value;\n}\n`;\n\t}\n\n\tprivate single_noise_line(output_name_suffix?: string, component?: string, offset2?: string) {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\t// const method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name]\n\t\tconst method_name = this.fbm_method_name();\n\n\t\tconst amp = ThreeToGl.any(this.variable_for_input(InputName.AMP));\n\t\tconst position = ThreeToGl.any(this.variable_for_input(InputName.POSITION));\n\t\tconst freq = ThreeToGl.any(this.variable_for_input(InputName.FREQ));\n\t\tlet offset = ThreeToGl.any(this.variable_for_input(InputName.OFFSET));\n\t\tif (offset2) {\n\t\t\toffset = `(${offset}+${offset2})`;\n\t\t}\n\t\tconst args = [`(${position}*${freq})+${offset}`];\n\n\t\t// we cannot use amp as is in all cases\n\t\t// if the noise outputs a vec2 and the amp is vec3, we cannot simply do vec3*vec2\n\t\t// therefore, in such a case, we must only take the required component of vec3\n\t\t// examples:\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is float:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is vec2:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec3) and requested output is vec2:\n\t\t//\t\twe have:\n\t\t//\t\t\tx = amp.x * vec2.x\n\t\t//\t\t\ty = amp.y * vec2.y\n\t\t//\t\t\tz = amp.z * 0\n\t\t//\t\t\toutput = vec3(x,y,z)\n\n\t\t// add other args if required\n\t\t// const input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t// if (lodash_isArray(input_constructor)) {\n\t\t// \tconst properties = lodash_clone(input_constructor);\n\t\t// \tproperties.shift(); // remove position\n\t\t// \tproperties.forEach((property) => {\n\t\t// \t\tconst arg_name = Object.keys(property)[0];\n\t\t// \t\tconst arg = ThreeToGl.any(this.variable_for_input(arg_name));\n\t\t// \t\targs.push(arg);\n\t\t// \t});\n\t\t// }\n\t\tconst joined_args = args.join(', ');\n\n\t\t// let output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name]\n\n\t\tconst noise = this.gl_var_name(OUTPUT_NAME);\n\t\tconst right_hand = `${amp}*${method_name}(${joined_args})`;\n\t\tif (component) {\n\t\t\treturn `float ${noise}${output_name_suffix} = (${right_hand}).${component}`;\n\t\t} else {\n\t\t\t// it looks like we never go here with the current set of noises\n\t\t\tconst output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\treturn `${output_type} ${noise} = ${right_hand}`;\n\t\t}\n\t}\n}\n","export default \"// Modulo 289 without a division (only multiplications)\\nfloat mod289(float x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n// Modulo 7 without a division\\nvec3 mod7(vec3 x) {\\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\\n}\\n\\n// Permutation polynomial: (34x^2 + x) mod 289\\nfloat permute(float x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\nvec3 permute(vec3 x) {\\n  return mod289((34.0 * x + 1.0) * x);\\n}\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec2 fade(vec2 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec4 fade(vec4 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\"","export default \"//\\n// GLSL textureless classic 2D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec2 P)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec2 P, vec2 rep)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec3 P, vec3 rep)\\n{\\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 4D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec4 P)\\n{\\n  vec4 Pi0 = floor(P); // Integer part for indexing\\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\\n// Classic Perlin noise, periodic version\\nfloat pnoise(vec4 P, vec4 rep)\\n{\\n  vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\\n  vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n\\t\\t+ i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\n\\n\\n\\n\\nvec4 grad4(float j, vec4 ip)\\n  {\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n  vec4 p,s;\\n\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n  s = vec4(lessThan(p, vec4(0.0)));\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \\n\\n  return p;\\n  }\\n\\t\\t\\t\\t\\t\\t\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n  {\\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n                        0.276393202250021,  // 2 * G4\\n                        0.414589803375032,  // 3 * G4\\n                       -0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\\n  vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\n  vec4 i0;\\n  vec3 isX = step( x0.yzw, x0.xxx );\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\n  i0.x = isX.x + isX.y + isX.z;\\n  i0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\n  i0.y += isYZ.x + isYZ.y;\\n  i0.zw += 1.0 - isYZ.xy;\\n  i0.z += isYZ.z;\\n  i0.w += 1.0 - isYZ.z;\\n\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\\n  vec4 x1 = x0 - i1 + C.xxxx;\\n  vec4 x2 = x0 - i2 + C.yyyy;\\n  vec4 x3 = x0 - i3 + C.zzzz;\\n  vec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\n  i = mod289(i); \\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n  vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n  vec4 p0 = grad4(j0,   ip);\\n  vec4 p1 = grad4(j1.x, ip);\\n  vec4 p2 = grad4(j1.y, ip);\\n  vec4 p3 = grad4(j1.z, ip);\\n  vec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\n  m0 = m0 * m0;\\n  m1 = m1 * m1;\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n  }\\n\"","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {TypedConnectionFloat} from './GlData'\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NullGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input('in'));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name('value');\n\t\tconst body_line = `${gl_type} ${out} = ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ThreeToGl} from '../../../Core/ThreeToGl';\n// import {CodeBuilder} from './Util/CodeBuilder'\n// import {Definition} from './Definition/_Module';\n// import {ShaderName, LineType, LINE_TYPES} from './Assembler/Util/CodeBuilder';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass OutputGlParamsConfig extends NodeParamsConfig {\n\t// type = ParamConfig.INTEGER(0, {\n\t// \tmenu: {\n\t// \t\tentries: ConnectionPointTypes.map((name, i) => {\n\t// \t\t\treturn {name: name, value: i};\n\t// \t\t}),\n\t// \t},\n\t// });\n\t// value_float = ParamConfig.FLOAT(0, ConstantGlNode.typed_visible_options(ConnectionPointType.FLOAT));\n\t// value_vec2 = ParamConfig.VECTOR2([0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC2));\n\t// value_vec3 = ParamConfig.VECTOR3([0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC3));\n\t// value_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new OutputGlParamsConfig();\n\nexport class OutputGlNode extends TypedGlNode<OutputGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'output';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_output_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (shaders_collection_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_output(this, shaders_collection_controller);\n\t\t// }\n\t}\n\n\t// set_color_declaration(color_declaration: string){\n\t// \tthis._color_declaration = color_declaration\n\t// }\n}\n","import {TypedGlNode} from './_Base';\nimport {\n\tConnectionPointTypes,\n\tConnectionPointType,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n} from '../utils/connections/ConnectionPointType';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ParamType} from '../../poly/ParamType';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\nclass ParamGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tas_color = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {type: ConnectionPointTypes.indexOf(ConnectionPointType.VEC3)},\n\t});\n}\nconst ParamsConfig = new ParamGlParamsConfig();\n\nexport class ParamGlNode extends TypedGlNode<ParamGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'param';\n\t}\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointTypes[this.pv.type]]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_if_type_changed', this._update_signature_if_required_bound);\n\t}\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst definitions = [];\n\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst var_name = this.uniform_name();\n\n\t\tdefinitions.push(new UniformGLDefinition(this, gl_type, var_name));\n\t\tshaders_collection_controller.add_definitions(this, definitions);\n\t}\n\tset_param_configs() {\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst default_value = ConnectionPointInitValueMap[gl_type];\n\t\tlet param_type = ConnectionPointTypeToParamTypeMap[gl_type];\n\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tif (\n\t\t\tparam_type == ParamType.VECTOR3 &&\n\t\t\tthis.p.as_color.value &&\n\t\t\tlodash_isArray(default_value) &&\n\t\t\tdefault_value.length == 3\n\t\t) {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tParamType.COLOR,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tparam_type,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t}\n\t}\n\tuniform_name() {\n\t\tconst output_connection_point = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection_point.name);\n\t\treturn var_name;\n\t}\n\n\t// update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointTypes[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class RefractGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'refract';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['I', 'N', 'eta'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => 'refract');\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'refract';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.VEC3;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatMultGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_mult';\n\t}\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat0', 'quat1'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC4,\n\t\t\tConnectionPointType.VEC4,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat0', 'quat1'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_mult';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4, ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tAXIS = 'axis',\n\tANGLE = 'angle',\n}\nconst InputNames: Array<InputName> = [InputName.AXIS, InputName.ANGLE];\ninterface IDefaultValues {\n\t[InputName.AXIS]: Number3;\n\t[InputName.ANGLE]: number;\n}\nconst DEFAULT_AXIS: Number3 = [0, 0, 1];\nconst DEFAULT_ANGLE: number = 0;\nconst DefaultValues: IDefaultValues = {\n\t[InputName.AXIS]: DEFAULT_AXIS,\n\t[InputName.ANGLE]: DEFAULT_ANGLE,\n};\n\nexport class QuatFromAxisAngleGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.FLOAT,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.FLOAT];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAngleGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.FLOAT]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.FLOAT];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAxisGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_axis';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC3]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_axis';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC3];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC3, Quaternion)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {RampParam} from '../../params/Ramp';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nconst OUTPUT_NAME = 'val';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RampGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('ramp');\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new RampGlParamsConfig();\nexport class RampGlNode extends TypedGlNode<RampGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ramp';\n\t}\n\n\tinitialize() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst gl_type = ConnectionPointType.FLOAT;\n\t\tconst texture_name = this._uniform_name();\n\t\tconst var_name = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, texture_name);\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\n\t\tconst input_val = this.variable_for_input(this.p.input.name);\n\t\tconst body_line = `${gl_type} ${var_name} = texture2D(${this._uniform_name()}, vec2(${input_val}, 0.0)).x`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.RAMP,\n\t\t\tthis.pv.name,\n\t\t\tRampParam.DEFAULT_VALUE,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn 'ramp_texture_' + this.gl_var_name(OUTPUT_NAME);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'rand';\n\nclass RandomGlParamsConfig extends NodeParamsConfig {\n\tseed = ParamConfig.VECTOR2([1, 1]);\n}\nconst ParamsConfig = new RandomGlParamsConfig();\nexport class RandomGlNode extends TypedGlNode<RandomGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'random';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n\t\t// \t\tfunction_declaration_lines.push(`highp float rand2(vec2 co){\n\t\t// \thighp float a = 12.9898;\n\t\t// \thighp float b = 78.233;\n\t\t// \thighp float c = 43758.5453;\n\t\t// \thighp float dt= dot(co.xy ,vec2(a,b));\n\t\t// \thighp float sn= mod(dt,3.14);\n\t\t// \treturn fract(sin(sn) * c);\n\t\t// }`)\n\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input('vec2'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = rand(${value})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Rgb2Hsv from './gl/rgb2hsv.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'hsv';\nclass RgbToHsvGlParamsConfig extends NodeParamsConfig {\n\trgb = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new RgbToHsvGlParamsConfig();\nexport class RgbToHsvGlNode extends TypedGlNode<RgbToHsvGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rgb_to_hsv';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Rgb2Hsv));\n\n\t\tconst rgb = ThreeToGl.vector3(this.variable_for_input('rgb'));\n\n\t\tconst hsv = this.gl_var_name('hsv');\n\t\tbody_lines.push(`vec3 ${hsv} = rgb2hsv(${rgb})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 rgb2hsv(vec3 c)\\n{\\n\\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n\\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n\\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n\\tfloat d = q.x - min(q.w, q.y);\\n\\tfloat e = 1.0e-10;\\n\\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\"","import {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport Quaternion from './gl/quaternion.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nenum Mode {\n\tAXIS = 0,\n\tQUAT = 1,\n}\nconst Modes: Array<Mode> = [Mode.AXIS, Mode.QUAT];\n\ntype StringByMode = {[key in Mode]: string};\nconst LabelByMode: StringByMode = {\n\t[Mode.AXIS]: 'from axis + angle',\n\t[Mode.QUAT]: 'from quaternion',\n};\ntype StringArrayByMode = {[key in Mode]: string[]};\nconst InputNamesByMode: StringArrayByMode = {\n\t[Mode.AXIS]: ['vector', 'axis', 'angle'],\n\t[Mode.QUAT]: ['vector', 'quat'],\n};\nconst MethodNameByMode: StringByMode = {\n\t[Mode.AXIS]: 'rotate_with_axis_angle',\n\t[Mode.QUAT]: 'rotate_with_quat',\n};\ntype ConnectionTypeArrayByMode = {[key in Mode]: ConnectionPointType[]};\nconst InputTypesByMode: ConnectionTypeArrayByMode = {\n\t[Mode.AXIS]: [ConnectionPointType.VEC3, ConnectionPointType.VEC3, ConnectionPointType.FLOAT],\n\t[Mode.QUAT]: [ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n};\n\nconst DefaultValues: Dictionary<Number3> = {\n\tvector: [0, 0, 1],\n\taxis: [0, 1, 0],\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nclass RotateParamsConfig extends NodeParamsConfig {\n\tsignature = ParamConfig.INTEGER(Mode.AXIS, {\n\t\tmenu: {\n\t\t\tentries: Modes.map((mode, i) => {\n\t\t\t\tconst label = LabelByMode[mode];\n\t\t\t\treturn {name: label, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new RotateParamsConfig();\nexport class RotateGlNode extends BaseAdaptiveGlNode<RotateParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rotate';\n\t}\n\n\t// _signature_name: string = 'AXIS';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputNamesByMode[mode][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn MethodNameByMode[mode];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputTypesByMode[mode];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC3];\n\t}\n\tgl_function_definitions() {\n\t\tconst type = this._expected_output_types()[0];\n\t\treturn [new FunctionGLDefinition(this, type, Quaternion)];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\n// const OUTPUT_NAME = 'round'\n\nexport class RoundGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'round';\n\t}\n\n\t// initialize_node() {\n\t// \tsuper.initialize_node();\n\t// \tthis.set_named_outputs([new TypedConnectionFloat(v)]);\n\t// }\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'value', 1);\n\t// }\n\t// https://hub.jmonkeyengine.org/t/round-with-glsl/8186/6\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// \t\tfunction_declaration_lines.push(`highp float round(float num){\n\t\t// \treturn floor(num)-fract(num);\n\t\t// }`)\n\t\tconst input_connection = this.io.inputs.named_input_connection_points[0];\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input(input_connection.name));\n\n\t\tconst output_connection = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection.name);\n\n\t\tconst body_lines: string[] = [];\n\t\tconst lines_count = ConnectionPointComponentsCountMap[output_connection.type];\n\t\tif (lines_count == 1) {\n\t\t\tbody_lines.push(`${output_connection.type} ${var_name} = ${this._simple_line(value)}`);\n\t\t} else {\n\t\t\tconst simple_lines: string[] = ALL_COMPONENTS.map((c) => {\n\t\t\t\treturn this._simple_line(`${value}.${c}`);\n\t\t\t});\n\t\t\tbody_lines.push(\n\t\t\t\t`${output_connection.type} ${var_name} = ${output_connection.type}(${simple_lines.join(',')})`\n\t\t\t);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate _simple_line(value: string) {\n\t\treturn `sign(${value})*floor(abs(${value})+0.5)`;\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {FileCopNode} from '../cop/File';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextureParamsConfig extends NodeParamsConfig {\n\tparam_name = ParamConfig.STRING('texture_map');\n\tdefault_value = ParamConfig.STRING(FileCopNode.DEFAULT_NODE_PATH.UV);\n\tuv = ParamConfig.VECTOR2([0, 0]);\n}\nconst ParamsConfig = new TextureParamsConfig();\nexport class TextureGlNode extends TypedGlNode<TextureParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'texture';\n\t}\n\tstatic readonly OUTPUT_NAME = 'rgba';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(TextureGlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst uv = ThreeToGl.vector2(this.variable_for_input(this.p.uv.name));\n\n\t\tconst rgba = this.gl_var_name(TextureGlNode.OUTPUT_NAME);\n\t\tconst map = this._uniform_name();\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, map);\n\t\tconst body_line = `vec4 ${rgba} = texture2D(${map}, ${uv})`;\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.OPERATOR_PATH,\n\t\t\tthis.pv.param_name,\n\t\t\tthis.pv.default_value,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn this.gl_var_name(this.pv.param_name);\n\t}\n}\n","import {ParamlessTypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nconst OUTPUT_NAME = 'value';\nenum InputName {\n\tCONDITION = 'condition',\n\tIF_TRUE = 'if_true',\n\tIF_FALSE = 'if_false',\n}\nconst InputNames: Array<InputName> = [InputName.CONDITION, InputName.IF_TRUE, InputName.IF_FALSE];\n\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nexport class TwoWaySwitchGlNode extends ParamlessTypedGlNode {\n\tstatic type() {\n\t\treturn 'two_way_switch';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn InputNames[index];\n\t}\n\tprotected _gl_output_name() {\n\t\treturn OUTPUT_NAME;\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst second_or_third_connection =\n\t\t\tthis.io.connections.input_connection(1) || this.io.connections.input_connection(2);\n\t\tconst type: ConnectionPointType = second_or_third_connection\n\t\t\t? this.gl_connections_controller.connection_type_from_connection(second_or_third_connection)\n\t\t\t: ConnectionPointType.FLOAT;\n\t\treturn [ConnectionPointType.BOOL, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[1];\n\t\treturn [type];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines: string[] = [];\n\n\t\tconst value = this.gl_var_name(OUTPUT_NAME);\n\t\tconst condition = ThreeToGl.bool(this.variable_for_input(InputName.CONDITION));\n\t\tconst if_true = ThreeToGl.any(this.variable_for_input(InputName.IF_TRUE));\n\t\tconst if_false = ThreeToGl.any(this.variable_for_input(InputName.IF_FALSE));\n\n\t\tconst gl_type = this._expected_output_types()[1];\n\t\tbody_lines.push(`${gl_type} ${value}`);\n\t\tbody_lines.push(`if(${condition}){`);\n\t\tbody_lines.push(`${value} = ${if_true}`);\n\t\tbody_lines.push(`} else {`);\n\t\tbody_lines.push(`${value} = ${if_false}`);\n\t\tbody_lines.push(`}`);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n\tup: [0, 1, 0],\n};\n\nexport class VectorAlignGlNode extends MathFunctionArg3Factory('vector_align', {\n\tin: ['start', 'end', 'up'],\n\tmethod: 'vector_align_with_up',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC4];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg2Factory} from './_Math_Arg2';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n};\n\nexport class VectorAngleGlNode extends MathFunctionArg2Factory('vector_angle', {\n\tin: ['start', 'end'],\n\tmethod: 'vector_angle',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import {CATEGORY_MAT} from './Category';\n\nimport {MeshBasicMatNode} from '../../nodes/mat/MeshBasic';\nimport {MeshBasicBuilderMatNode} from '../../nodes/mat/MeshBasicBuilder';\nimport {MeshLambertMatNode} from '../../nodes/mat/MeshLambert';\nimport {MeshLambertBuilderMatNode} from '../../nodes/mat/MeshLambertBuilder';\nimport {MeshStandardMatNode} from '../../nodes/mat/MeshStandard';\nimport {MeshStandardBuilderMatNode} from '../../nodes/mat/MeshStandardBuilder';\nimport {PointsMatNode} from '../../nodes/mat/Points';\nimport {PointsBuilderMatNode} from '../../nodes/mat/PointsBuilder';\n\nexport interface MatNodeChildrenMap {\n\tmesh_basic: MeshBasicMatNode;\n\tmesh_basic_builder: MeshBasicBuilderMatNode;\n\tmesh_lambert: MeshLambertMatNode;\n\tmesh_lambert_builder: MeshLambertBuilderMatNode;\n\tmesh_standard: MeshStandardMatNode;\n\tmesh_standard_builder: MeshStandardBuilderMatNode;\n\tpoints: PointsMatNode;\n\tpoints_builder: PointsBuilderMatNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class MatRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(MeshBasicMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshBasicBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshLambertMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshLambertBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshStandardMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshStandardBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(PointsMatNode, CATEGORY_MAT.POINTS);\n\t\tpoly.register_node(PointsBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t}\n}\n","import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends TypedMatNode<MeshBasicMaterial, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class MaterialContainer extends TypedContainer<ContainableMap['MATERIAL']> {\n\tset_content(content: ContainableMap['MATERIAL']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_material(material: Material) {\n\t\tif (this._content != null) {\n\t\t\tthis._content.dispose();\n\t\t}\n\t\tthis.set_content(material);\n\t}\n\thas_material() {\n\t\treturn this.has_content();\n\t}\n\tmaterial() {\n\t\treturn this.content();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerBasic} from '../gl/code/assemblers/materials/Basic';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerBasic, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerBasic>(this, ShaderAssemblerBasic);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerBasic extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.basic;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst material = new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\tlights: false,\n\t\t\t// depthTest: true,\n\t\t\t// alphaTest: 0.5,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {RGBADepthPacking} from 'three/src/constants';\n// import {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomMeshDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n// fragment: 'vec4 diffuseColor = vec4( 1.0 );' // do not change? unless there is a texture lookup\n\nexport class ShaderAssemblerCustomMeshDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n}\"","import {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends TypedMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerLambert} from '../gl/code/assemblers/materials/Lambert';\n\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerLambert, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerLambert>(this, ShaderAssemblerLambert);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerLambert extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.lambert;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\tconst material = new ShaderMaterial({\n\t\t\tlights: true,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerStandard} from '../gl/code/assemblers/materials/Standard';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\n\nimport {SHADER_DEFAULTS} from './MeshStandard';\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_metalness(node as MeshStandardBuilderMatNode),\n\t});\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_roughness(node as MeshStandardBuilderMatNode),\n\t});\n}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardBuilderMatNode extends TypedBuilderMatNode<\n\tShaderAssemblerStandard,\n\tMeshStandardMatParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tuniforms: true,\n\t\tdirect_params: true,\n\t\tdefine: false,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerStandard>(this, ShaderAssemblerStandard);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\t\tawait TextureEnvMapController.update(this);\n\n\t\tif (this._material) {\n\t\t\tthis._material.uniforms.envMapIntensity.value = this.pv.env_map_intensity;\n\t\t\tMeshStandardBuilderMatNode._update_metalness(this);\n\t\t\tMeshStandardBuilderMatNode._update_roughness(this);\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n\tstatic _update_metalness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.metalness.value = node.pv.metalness;\n\t}\n\tstatic _update_roughness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.roughness.value = node.pv.roughness;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMesh} from './_BaseMesh';\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport metalnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl';\nimport roughnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl';\nimport {OutputGlNode} from '../../../Output';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {ParamType} from '../../../../../poly/ParamType';\n\nexport class ShaderAssemblerStandard extends ShaderAssemblerMesh {\n\tis_physical() {\n\t\treturn false;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = this.is_physical() ? ShaderLib.physical : ShaderLib.standard;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst options = {\n\t\t\tlights: true,\n\t\t\textensions: {\n\t\t\t\tderivatives: true,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t};\n\t\t// if(this.constructor.is_physical()){\n\t\t// \toptions['defines'] = {\n\t\t// \t\tPHYSICAL: 1\n\t\t// \t}\n\t\t// }\n\n\t\tconst material = new ShaderMaterial(options);\n\n\t\t// replace some shader chunks\n\t\tmaterial.onBeforeCompile = function(shader) {\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <metalnessmap_fragment>',\n\t\t\t\tmetalnessmap_fragment\n\t\t\t);\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <roughnessmap_fragment>',\n\t\t\t\troughnessmap_fragment\n\t\t\t);\n\t\t};\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material {\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial;\n\t// \tconst options = {};\n\t// \tthis._match_uniform('color', options, material, 'diffuse');\n\t// \tthis._match_uniform('map', options, material);\n\t// \tthis._match_uniform('envMap', options, material);\n\t// \tthis._match_uniform('envMapIntensity', options, material);\n\t// \tthis._match_uniform('metalness', options, material);\n\t// \tthis._match_uniform('roughness', options, material);\n\t// \tconst gltf_material = new gltf_constructor(options);\n\t// \treturn gltf_material;\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\t// those defaults should be 1. If they were 0, using the params\n\t\t// at the material level would appear not to work\n\t\toutput_child.add_param(ParamType.FLOAT, 'metalness', 1);\n\t\toutput_child.add_param(ParamType.FLOAT, 'roughness', 1);\n\t}\n\t// create_globals_node_output_connections(){\n\t// \treturn BaseShaderAssembler.create_globals_node_output_connections().concat([\n\t// \t\tnew Connection.Float('metalness'),\n\t// \t\tnew Connection.Float('roughness'),\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha', 'metalness', 'roughness'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('metalness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_metalness = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('roughness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_roughness = ',\n\t\t\t}),\n\t\t]);\n\t}\n}\n","export default \"float metalnessFactor = metalness * POLY_metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\"","export default \"float roughnessFactor = roughness * POLY_roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\"","import {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\n// import {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\n// import {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\tsize_attenuation = ParamConfig.BOOLEAN(1);\n\t};\n}\n\nclass PointsMatParamsConfig extends SideParamConfig(ColorParamConfig(PointsParamConfig(NodeParamsConfig))) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends TypedMatNode<PointsMaterial, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points';\n\t}\n\n\tcreate_material() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.material.size = this.pv.size;\n\t\tthis.material.sizeAttenuation = this.pv.size_attenuation;\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderAssemblerCustomPointsDepth} from './CustomPointsDepth';\nimport {ShaderAssemblerCustomPointsDistance} from './CustomPointsDistance';\nimport {ShaderAssemblerCustomPointsDepthDOF} from './CustomPointsDepthDOF';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', 'gl_PointSize = size;']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst CUSTOM_ASSEMBLER_MAP: CustomAssemblerMap = new Map();\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomPointsDistance);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomPointsDepth);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomPointsDepthDOF);\n\nexport class ShaderAssemblerPoints extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'diffuseColor' }\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn CUSTOM_ASSEMBLER_MAP;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = ShaderLib.points;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\t// const uniforms = UniformsUtils.clone( template_shader.uniforms )\n\t\t// uniforms.size.value = 10\n\n\t\tconst material = new ShaderMaterial({\n\t\t\ttransparent: true,\n\t\t\tfog: true,\n\n\t\t\t// size: 10,\n\t\t\t// //blending: AdditiveBlending\n\t\t\t// depthTest: true,\n\t\t\t// depthwrite: true,\n\t\t\t// alphaTest: 0.5,\n\t\t\tdefines: {\n\t\t\t\t// ALPHATEST: 0.5,\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\t// protected insert_body_after(shader_name){\n\t// \treturn {\n\t// \t\tvertex: 'gl_PointSize = size;',\n\t// \t\tfragment: 'vec4 diffuseColor = vec4( diffuse, opacity );'\n\t// \t}[shader_name]\n\t// }\n\t// those shadow shaders should ideally be overriden\n\t// to properly take into account point size\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\toutput_child.add_param(ParamType.FLOAT, 'gl_PointSize', 1);\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections().concat([\n\t\t\tnew TypedNamedConnectionPoint('gl_PointCoord', ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\t// add_globals_params(globals_node){\n\t// \tBaseShaderAssembler.add_globals_params(globals_node)\n\t// \tglobals_node.set_named_outputs([\n\t// \t\tnew Connection.Vec3('position'),\n\t// \t\tnew Connection.Vec3('color'),\n\t// \t\tnew Connection.Vec3('normal'),\n\t// \t\tnew Connection.Vec4('gl_FragCoord'),\n\t// \t\tnew Connection.Vec2('gl_PointCoord'),\n\t// \t\t// new TypedConnectionVec2('uv'),\n\t// \t\tnew Connection.Float('frame')\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv', 'gl_PointSize'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('gl_PointSize', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'gl_PointSize = ',\n\t\t\t\tsuffix: ' * size * 10.0', // currently using 10 as 1 seems really small\n\t\t\t}),\n\t\t]);\n\t\t// \tnew VariableConfig('position', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t// \t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t// \t\tprefix: 'vec3 transformed = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('normal', {\n\t\t// \t\tprefix: 'objectNormal = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('color', {\n\t\t// \t\tprefix: 'diffuseColor.xyz = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('alpha', {\n\t\t// \t\tprefix: 'diffuseColor.w = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('uv', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\tprefix: 'vUv = ',\n\t\t// \t\tif: 'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )'\n\t\t// \t}),\n\t\t// \tnew VariableConfig('gl_PointSize', {\n\t\t// \t\tdefault: '1.0',\n\t\t// \t\tprefix: 'gl_PointSize = ',\n\t\t// \t\tsuffix: ' * size',\n\t\t// \t}),\n\t\t// ]\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepth.vert.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDistance.vert.glsl';\n\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\\n// #define DISTANCE\\n// varying vec3 vWorldPosition;\\n// #include <common>\\n// #include <uv_pars_vertex>\\n// #include <displacementmap_pars_vertex>\\n// #include <morphtarget_pars_vertex>\\n// #include <skinning_pars_vertex>\\n// #include <clipping_planes_pars_vertex>\\n// void main() {\\n// \\t#include <uv_vertex>\\n// \\t#include <skinbase_vertex>\\n// \\t#ifdef USE_DISPLACEMENTMAP\\n// \\t\\t#include <beginnormal_vertex>\\n// \\t\\t#include <morphnormal_vertex>\\n// \\t\\t#include <skinnormal_vertex>\\n// \\t#endif\\n// \\t#include <begin_vertex>\\n// \\t#include <morphtarget_vertex>\\n// \\t#include <skinning_vertex>\\n// \\t#include <displacementmap_vertex>\\n// \\t#include <project_vertex>\\n// \\t#include <worldpos_vertex>\\n// \\t#include <clipping_planes_vertex>\\n// \\tvWorldPosition = worldPosition.xyz;\\n// }\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib'\n// import {RGBADepthPacking} from 'three/src/constants'\n// import {BasicDepthPacking} from 'three/src/constants'\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tsize: {value: 1},\n\t\t\t\tscale: {value: 1},\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\t\t\tdepthTest: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\"","import {CATEGORY_OBJ} from './Category';\n\nimport {AmbientLightObjNode} from '../../nodes/obj/AmbientLight';\nimport {AreaLightObjNode} from '../../nodes/obj/AreaLight';\nimport {DirectionalLightObjNode} from '../../nodes/obj/DirectionalLight';\nimport {HemisphereLightObjNode} from '../../nodes/obj/HemisphereLight';\nimport {PointLightObjNode} from '../../nodes/obj/PointLight';\nimport {SpotLightObjNode} from '../../nodes/obj/SpotLight';\n\nimport {EventsObjNode} from '../../nodes/obj/Events';\nimport {MaterialsObjNode} from '../../nodes/obj/Materials';\nimport {CopObjNode} from '../../nodes/obj/Cop';\nimport {PostProcessObjNode} from '../../nodes/obj/PostProcess';\n\nimport {GeoObjNode} from '../../nodes/obj/Geo';\nimport {NullObjNode} from '../../nodes/obj/Null';\nimport {FogObjNode} from '../../nodes/obj/Fog';\nimport {SceneObjNode} from '../../nodes/obj/Scene';\n\nimport {OrthographicCameraObjNode} from '../../nodes/obj/OrthographicCamera';\nimport {PerspectiveCameraObjNode} from '../../nodes/obj/PerspectiveCamera';\n// import {CubeCameraObj} from '../../nodes/obj/CubeCamera';\n\nexport interface ObjNodeChildrenMap {\n\tambient_light: AmbientLightObjNode;\n\tarea_light: AreaLightObjNode;\n\tcop: CopObjNode;\n\tdirectional_light: DirectionalLightObjNode;\n\tevents: EventsObjNode;\n\tfog: FogObjNode;\n\tgeo: GeoObjNode;\n\themisphere_light: HemisphereLightObjNode;\n\tmaterials: MaterialsObjNode;\n\tnull: NullObjNode;\n\torthographic_camera: OrthographicCameraObjNode;\n\tperspective_camera: PerspectiveCameraObjNode;\n\tpoint_light: PointLightObjNode;\n\tpost_process: PostProcessObjNode;\n\tscene: SceneObjNode;\n\tspot_light: SpotLightObjNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class ObjRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AmbientLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(AreaLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(DirectionalLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(HemisphereLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(PointLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(SpotLightObjNode, CATEGORY_OBJ.LIGHT);\n\n\t\tpoly.register_node(EventsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(MaterialsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(CopObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(PostProcessObjNode, CATEGORY_OBJ.MANAGER);\n\n\t\tpoly.register_node(GeoObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(NullObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(SceneObjNode, CATEGORY_OBJ.MISC);\n\n\t\tpoly.register_node(OrthographicCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\tpoly.register_node(PerspectiveCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\t// poly.register_node(CubeCameraObj, CATEGORY_OBJ.CAMERA)\n\n\t\tpoly.register_node(FogObjNode, CATEGORY_OBJ.MISC);\n\t}\n}\n","import {AmbientLight} from 'three/src/lights/AmbientLight';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AmbientLightObjParamsConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n}\nconst ParamsConfig = new AmbientLightObjParamsConfig();\n\nexport class AmbientLightObjNode extends TypedLightObjNode<AmbientLight, AmbientLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'ambient_light';\n\t}\n\n\tcreate_light() {\n\t\treturn new AmbientLight();\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ObjectContainer extends TypedContainer<ContainableMap['OBJECT']> {\n\tset_content(content: ContainableMap['OBJECT']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_object(object: Object3D) {\n\t\treturn this.set_content(object);\n\t}\n\thas_object() {\n\t\treturn this.has_content();\n\t}\n\tobject() {\n\t\treturn this.content();\n\t}\n\n\t// infos() {\n\t// \tconst node = this.node()\n\t// \treturn [\n\t// \t\t`full path: ${node.full_path()}`,\n\t// \t\t`${node.cooks_count()} cooks`,\n\t// \t\t`cook time: ${node.cook_time()}`,\n\t// \t\tthis.content(),\n\t// \t]\n\t// }\n}\n","import {RectAreaLight} from 'three/src/lights/RectAreaLight';\n// import {RectAreaLightHelper} from '../../../../modules/three/examples/jsm/helpers/RectAreaLightHelper';\nimport {RectAreaLightUniformsLib} from '../../../../modules/three/examples/jsm/lights/RectAreaLightUniformsLib';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {HelperController, HelperParamConfig} from './utils/HelperController';\n\nexport function AreaLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\twidth = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\theight = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t};\n}\n\nclass AreaLightObjParamsConfig extends AreaLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new AreaLightObjParamsConfig();\n\nexport class AreaLightObjNode extends BaseLightTransformedObjNode<RectAreaLight, AreaLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'area_light';\n\t}\n\t// private _helper_controller = new HelperController<RectAreaLightHelper, RectAreaLight>(this, RectAreaLightHelper);\n\t// initialize_node() {\n\t// \tthis._helper_controller.initialize_node();\n\t// }\n\n\tcreate_light() {\n\t\tconst object = new RectAreaLight(0xffffff, 1, 1, 1);\n\n\t\treturn object;\n\t}\n\n\t// create_light_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \tthis.add_param(ParamType.FLOAT, 'intensity', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'width', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'height', 1, {range: [0, 10]});\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.width = this.pv.width;\n\t\tthis.light.height = this.pv.height;\n\t\t// this._helper_controller.update();\n\t}\n\n\tasync cook() {\n\t\t// const {RectAreaLightUniformsLib} = await CoreScriptLoader.load_module_three_light('RectAreaLightUniformsLib');\n\t\t// const module = RectAreaLightUniformsLib\n\t\tif (!(RectAreaLightUniformsLib as any).initialized) {\n\t\t\tRectAreaLightUniformsLib.init();\n\t\t\t(RectAreaLightUniformsLib as any).initialized = true;\n\t\t}\n\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {DirectionalLightHelper} from './utils/helpers/DirectionalLightHelper';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {NodeContext} from '../../poly/NodeContext';\n// import {BaseObjNodeType} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nexport function DirectionalLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// transform = ParamConfig.FOLDER();\n\t\t// directional\n\t\t// position = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// target = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// lookat = ParamConfig.OPERATOR_PATH('', {dependent_on_found_node: false});\n\n\t\tlight = ParamConfig.FOLDER();\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1);\n\t\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t\t// shadows\n\t\tcast_shadows = ParamConfig.BOOLEAN(1);\n\t\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\t\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t\t// helper\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\n\nclass DirectionalLightObjParamsConfig extends DirectionalLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new DirectionalLightObjParamsConfig();\n\nexport class DirectionalLightObjNode extends BaseLightTransformedObjNode<\n\tDirectionalLight,\n\tDirectionalLightObjParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'directional_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<DirectionalLight>(\n\t\tthis,\n\t\t(<unknown>DirectionalLightHelper) as HelperConstructor<DirectionalLight>,\n\t\t'DirectionalLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new DirectionalLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'DirectionalLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\t// this.light.position.copy(this.pv.t);\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.shadow.camera.far = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\n\t\t// updating the camera matrix is not necessary for point light\n\t\t// so probably should not for this\n\t\tthis.light.shadow.camera.updateProjectionMatrix();\n\t}\n}\n","// import {Object3D} from 'three/src/core/Object3D';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {DirectionalLightObjNode} from '../../DirectionalLight';\nimport {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {Line} from 'three/src/objects/Line';\n\nexport class DirectionalLightHelper extends BaseLightHelper<DirectionalLight, DirectionalLightObjNode> {\n\tprivate _square = new Line();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst size = 1;\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(\n\t\t\t\t[-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tthis._square.geometry = geometry;\n\t\tthis._square.material = this._line_material;\n\t\tthis._square.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._square);\n\t}\n\n\t// private _v1 = new Vector3();\n\t// private _v2 = new Vector3();\n\t// private _v3 = new Vector3();\n\tupdate() {\n\t\t// this._v1.copy(this.node.light.position);\n\t\t// this._v2.copy(this.node.light.target.position);\n\t\t// this._v3.subVectors(this._v2, this._v1);\n\n\t\t// this._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\t// this._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\t// this._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {HemisphereLight} from 'three/src/lights/HemisphereLight';\nimport {HemisphereLightHelper} from './utils/helpers/HemisphereLightHelper';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nclass HemisphereLightObjParamsConfig extends NodeParamsConfig {\n\tsky_color = ParamConfig.COLOR([0.2, 0.7, 1]);\n\tground_color = ParamConfig.COLOR([0.1, 0.1, 0.25]);\n\tintensity = ParamConfig.FLOAT(1);\n\tposition = ParamConfig.VECTOR3([0, 1, 0]);\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new HemisphereLightObjParamsConfig();\n\nexport class HemisphereLightObjNode extends TypedLightObjNode<HemisphereLight, HemisphereLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hemisphere_light';\n\t}\n\tprivate _helper_controller = new HelperController<HemisphereLight>(\n\t\tthis,\n\t\t(<unknown>HemisphereLightHelper) as HelperConstructor<HemisphereLight>,\n\t\t'HemisphereLightHelper'\n\t);\n\n\tcreate_light() {\n\t\tconst light = new HemisphereLight();\n\n\t\treturn light;\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.sky_color;\n\t\tthis.light.groundColor = this.pv.ground_color;\n\t\tthis.light.position.copy(this.pv.position);\n\t\tthis.light.intensity = this.pv.intensity;\n\n\t\tthis._helper_controller.update();\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {OctahedronBufferGeometry} from 'three/src/geometries/OctahedronGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\nimport {HemisphereLightObjNode} from '../../HemisphereLight';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {HemisphereLight} from 'three/src/lights/HemisphereLight';\n\nexport class HemisphereLightHelper extends BaseLightHelper<HemisphereLight, HemisphereLightObjNode> {\n\tprivate _geometry = new OctahedronBufferGeometry(1);\n\n\tprotected build_helper() {\n\t\tthis._geometry.rotateZ(Math.PI * 0.5);\n\n\t\tthis._material.vertexColors = true;\n\n\t\tconst position = this._geometry.getAttribute('position');\n\t\tconst colors = new Float32Array(position.count * 3);\n\n\t\tthis._geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\tthis._object.geometry = this._geometry;\n\t\tthis._object.material = this._material;\n\t}\n\n\t// private _inverse_position = new Vector3();\n\tprivate _quat = new Quaternion();\n\tprivate _default_position = new Vector3(0, 1, 0);\n\tprivate _color1 = new Color();\n\tprivate _color2 = new Color();\n\tupdate() {\n\t\tif (!this.node.pv.position) {\n\t\t\treturn;\n\t\t}\n\t\t// this._inverse_position.copy(this.node.pv.position).multiplyScalar(-1)\n\t\tthis._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\tthis._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\tthis._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tconst colors = this._geometry.getAttribute('color') as BufferAttribute;\n\n\t\tthis._color1.copy(this.node.light.color);\n\t\tthis._color2.copy(this.node.light.groundColor);\n\n\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\tconst color = i < l / 2 ? this._color1 : this._color2;\n\n\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\t}\n}\n","import {PointLight} from 'three/src/lights/PointLight';\nimport {PointLightHelper} from './utils/helpers/PointLightHelper';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\n// import {HelperController} from './utils/HelperController';\nclass PointLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tdecay = ParamConfig.FLOAT(0.1);\n\tdistance = ParamConfig.FLOAT(100);\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024], {visible_if: {cast_shadows: 1}});\n\tshadow_bias = ParamConfig.FLOAT(0.001, {visible_if: {cast_shadows: 1}});\n\tshadow_near = ParamConfig.FLOAT(1, {visible_if: {cast_shadows: 1}});\n\tshadow_far = ParamConfig.FLOAT(100, {visible_if: {cast_shadows: 1}});\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new PointLightObjParamsConfig();\n\nexport class PointLightObjNode extends BaseLightTransformedObjNode<PointLight, PointLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point_light';\n\t}\n\tprivate _helper_controller = new HelperController<PointLight>(\n\t\tthis,\n\t\t(<unknown>PointLightHelper) as HelperConstructor<PointLight>,\n\t\t'PointLightHelper'\n\t);\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new PointLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\treturn light;\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.decay = this.pv.decay;\n\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\tthis.light.shadow.camera.near = this.pv.shadow_near;\n\t\tthis.light.shadow.camera.far = this.pv.shadow_far;\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {PointLightObjNode} from '../../PointLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {PointLight} from 'three/src/lights/PointLight';\n\nexport class PointLightHelper extends BaseLightHelper<PointLight, PointLightObjNode> {\n\tprotected build_helper() {\n\t\tconst size = 1;\n\t\tthis._object.geometry = new SphereBufferGeometry(size, 4, 2);\n\t\tthis._object.material = this._material;\n\t}\n\n\tupdate() {\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\t\tthis._material.color.copy(this.node.light.color);\n\t}\n}\n","import {SpotLight} from 'three/src/lights/SpotLight';\n// import {SpotLightHelper} from 'three/src/helpers/SpotLightHelper';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {SpotLightHelper} from './utils/helpers/SpotLightHelper';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {HelperController} from './utils/HelperController';\nclass SpotLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tangle = ParamConfig.FLOAT(45, {range: [0, 180]});\n\tpenumbra = ParamConfig.FLOAT(0.1);\n\tdecay = ParamConfig.FLOAT(0.1, {range: [0, 1]});\n\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t// target = ParamConfig.OPERATOR_PATH('');\n\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new SpotLightObjParamsConfig();\n\nexport class SpotLightObjNode extends BaseLightTransformedObjNode<SpotLight, SpotLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'spot_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<SpotLight>(\n\t\tthis,\n\t\t(<unknown>SpotLightHelper) as HelperConstructor<SpotLight>,\n\t\t'SpotLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new SpotLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'SpotLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.angle = this.pv.angle * (Math.PI / 180);\n\t\tthis.light.penumbra = this.pv.penumbra;\n\t\tthis.light.decay = this.pv.decay;\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {SpotLightObjNode} from '../../SpotLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {SpotLight} from 'three/src/lights/SpotLight';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n\nexport class SpotLightHelper extends BaseLightHelper<SpotLight, SpotLightObjNode> {\n\tprivate _cone = new LineSegments();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\tconst p1 = (i / l) * Math.PI * 2;\n\t\t\tconst p2 = (j / l) * Math.PI * 2;\n\n\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t}\n\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tthis._cone.geometry = geometry;\n\n\t\tthis._cone.material = this._line_material;\n\t\tthis._cone.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._cone);\n\t}\n\n\tupdate() {\n\t\tconst coneLength = (this.node.light.distance ? this.node.light.distance : 1000) * this.node.pv.helper_size;\n\t\tconst coneWidth = coneLength * Math.tan(this.node.light.angle);\n\n\t\tthis._cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {EventNodeChildrenMap} from '../../poly/registers/Event';\nimport {BaseEventNodeType} from '../event/_Base';\n\nexport class EventsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.EVENT;\n\tstatic type() {\n\t\treturn 'events';\n\t}\n\n\tprotected _children_controller_context = NodeContext.EVENT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as EventNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseEventNodeType[];\n\t}\n\tnodes_by_type<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as EventNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {MatNodeChildrenMap} from '../../poly/registers/Mat';\nimport {BaseMatNodeType} from '../mat/_Base';\n\nexport class MaterialsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MAT;\n\tstatic type() {\n\t\treturn 'materials';\n\t}\n\t// children_context(){ return NodeContext.MAT }\n\n\tprotected _children_controller_context = NodeContext.MAT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as MatNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseMatNodeType[];\n\t}\n\tnodes_by_type<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as MatNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CopNodeChildrenMap} from '../../poly/registers/Cop';\nimport {BaseCopNodeType} from '../cop/_Base';\n\nexport class CopObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'cop';\n\t}\n\t// children_context(){ return NodeContext.COP }\n\n\tprotected _children_controller_context = NodeContext.COP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n\n\tcreate_node<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as CopNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseCopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as CopNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class PostProcessObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'post_process';\n\t}\n\t// children_context(){ return NodeContext.POST }\n\n\tprotected _children_controller_context = NodeContext.POST;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n// const THREE = {Group};\n\n// import {CoreTransform} from '../../../core/Transform';\n\nimport {BaseNodeType} from '../_Base';\nimport {DisplayNodeController} from '../utils/DisplayNodeController';\nimport {NodeContext} from '../../poly/NodeContext';\n\n//import Layers from './Concerns/Layers'\n// import {Transformed} from './Concerns/Transformed';\n\n// sop map\nimport {BaseSopNodeType} from '../sop/_Base';\n// import {PolyScene} from '../../scene/PolyScene';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n\nimport {GeoNodeChildrenMap} from '../../poly/registers/Sop';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass GeoObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tdisplay = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new GeoObjParamConfig();\n\nexport class GeoObjNode extends TypedObjNode<Group, GeoObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'geo';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tprotected _display_node_controller: DisplayNodeController = new DisplayNodeController(this);\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprivate _sop_group = this._create_sop_group();\n\tprivate _create_sop_group() {\n\t\treturn new Group();\n\t}\n\tget sop_group() {\n\t\treturn this._sop_group;\n\t}\n\tset_sop_group_name() {\n\t\tthis._sop_group.name = `${this.full_path()}:sop_group`;\n\t}\n\n\t// children_context() {\n\t// \treturn NodeContext.SOP;\n\t// }\n\n\tprotected _children_controller_context = NodeContext.SOP;\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tprivate _on_child_add_bound = this._on_child_add.bind(this);\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add_bound);\n\n\t\tthis.display_node_controller.initialize_node();\n\t\tthis.transform_controller.initialize_node();\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active);\n\t\t// });\n\n\t\tthis.object.add(this.sop_group);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_sop_group_name.bind(this));\n\t\tthis._create_sop_group();\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.outputs.set_has_one_output();\n\t}\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\t//base_layers_included: -> false\n\n\t// create_params() {\n\t// \t// CoreTransform.create_params(this);\n\t// }\n\t//this.create_layers_params()\n\n\trequest_display_node() {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: typescript\n\t\t// if (this.is_displayed)\n\t\t// \tconst display_node = this.display_node();\n\t\t// \tif (display_node) {\n\t\t// \t\tdisplay_node.request_container_p().then(async (container) => {\n\t\t// \t\t\tif (!this._sop_loaded) {\n\t\t// \t\t\t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._sop_loaded = true;\n\n\t\t// \t\t\tconst update_needed = await this.display_node_objects_changed(container);\n\t\t// \t\t\tif (update_needed) {\n\t\t// \t\t\t\tthis.remove_display_node_group();\n\t\t// \t\t\t\tawait this.add_display_node_group(container);\n\t\t// \t\t\t}\n\t\t// \t\t\t// this.set_needsUpdate(container)\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\tthis._sop_loaded = true;\n\t\t// \t}\n\t\t// }\n\t}\n\n\tis_display_node_cooking(): boolean {\n\t\tif (this.flags.display.active) {\n\t\t\tconst display_node = this._display_node_controller.display_node;\n\t\t\treturn display_node ? display_node.is_dirty : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcreate_node<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GeoNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseSopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GeoNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// HOOK\n\t//\n\t//\n\t_on_create() {\n\t\tthis.create_node('text');\n\t}\n\t_on_child_add(node: BaseNodeType) {\n\t\tif (this.scene.loading_controller.loaded) {\n\t\t\tif (this.children().length == 1) {\n\t\t\t\tnode.flags?.display?.set(true);\n\t\t\t}\n\t\t}\n\t}\n\t// post_display_flag_node_set_dirty() {\n\t// \tthis.request_display_node();\n\t// }\n\n\t//\n\t//\n\t// COOK\n\t//\n\t//\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\t//this.update_layers()\n\n\t\tthis.object.visible = this.pv.display;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {GeoObjNode} from '../obj/Geo';\nimport {BaseSopNodeType} from '../sop/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class DisplayNodeController {\n\t_graph_node: CoreGraphNode;\n\t_display_node: BaseSopNodeType | undefined;\n\t_children_uuids_dict: Dictionary<boolean> = {};\n\t_children_length: number = 0;\n\tprivate _request_display_node_container_bound = this.request_display_node_container.bind(this);\n\tconstructor(protected node: GeoObjNode) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'DisplayNodeController');\n\n\t\tthis._graph_node.dirty_controller.add_post_dirty_hook(\n\t\t\t'_request_display_node_container',\n\t\t\tthis._request_display_node_container_bound\n\t\t);\n\t}\n\n\tget display_node() {\n\t\treturn this._display_node;\n\t}\n\tprivate _parent_object: Object3D | undefined;\n\tset_parent_object(object: Object3D) {\n\t\tthis._parent_object = object;\n\t}\n\tget parent_object() {\n\t\treturn this._parent_object || this.node.object;\n\t}\n\n\tinitialize_node() {\n\t\tthis.set_parent_object(this.node.sop_group);\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.node.sop_group.visible = this.used_in_scene;\n\t\t\tif (this.node.flags.display.active) {\n\t\t\t\tthis.request_display_node_container();\n\t\t\t}\n\t\t});\n\n\t\tthis.node.lifecycle.add_on_child_add_hook((child_node) => {\n\t\t\tif (!this._display_node) {\n\t\t\t\tchild_node.flags?.display?.set(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync set_display_node(new_display_node: BaseSopNodeType) {\n\t\tif (this._display_node != new_display_node) {\n\t\t\tconst old_display_node = this._display_node;\n\t\t\tif (old_display_node) {\n\t\t\t\told_display_node.flags.display.set(false);\n\t\t\t\tthis._graph_node.remove_graph_input(old_display_node);\n\t\t\t\tthis.remove_children();\n\t\t\t}\n\t\t\tthis._display_node = new_display_node;\n\t\t\tif (this._display_node) {\n\t\t\t\tthis._graph_node.add_graph_input(this._display_node);\n\t\t\t}\n\t\t\tthis.request_display_node_container();\n\t\t}\n\t}\n\n\tremove_children() {\n\t\tlet child: Object3D | undefined;\n\t\twhile ((child = this.parent_object.children.pop())) {\n\t\t\tthis.parent_object.remove(child);\n\t\t}\n\t}\n\n\tget used_in_scene() {\n\t\treturn this.node.used_in_scene && this.node.flags.display.active && this.node.pv.display == true;\n\t}\n\n\tprivate async request_display_node_container() {\n\t\tif (!this.node.scene.loading_controller.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.used_in_scene) {\n\t\t\tif (this._display_node) {\n\t\t\t\tconst container = await this._display_node.request_container();\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\t// check if the new objects are different\n\t\t\t\t\tconst new_objects = core_group.objects();\n\t\t\t\t\tlet new_objects_are_different = new_objects.length != this._children_length;\n\t\t\t\t\tif (!new_objects_are_different) {\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tif (!(object.uuid in this._children_uuids_dict)) {\n\t\t\t\t\t\t\t\tnew_objects_are_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update hierarchy if different\n\t\t\t\t\tif (new_objects_are_different) {\n\t\t\t\t\t\tthis.remove_children();\n\t\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tthis.parent_object.add(object);\n\t\t\t\t\t\t\tthis._children_uuids_dict[object.uuid] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._children_length = new_objects.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.remove_children();\n\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\tthis._children_length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n// import {CoreTransform} from '../../../core/Transform';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {AxesHelper} from 'three/src/helpers/AxesHelper';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass NullObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\nconst ParamsConfig = new NullObjParamConfig();\n\nexport class NullObjNode extends TypedObjNode<Group, NullObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tprivate _helper = new AxesHelper(1);\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\tinitialize_node() {\n\t\tthis.transform_controller.initialize_node();\n\t\tthis.object.add(this._helper);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis._helper.visible = this.flags.display.active;\n\t\t});\n\t}\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {BaseNode} from '../_Base';\nimport {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {FogExp2} from 'three/src/scenes/FogExp2';\nimport {Fog} from 'three/src/scenes/Fog';\nimport {Color} from 'three/src/math/Color';\n\nconst DEFAULT = {\n\tcolor: new Color(1, 1, 1),\n\tnear: 0,\n\tfar: 100,\n\tdensity: 0.00025,\n};\n\n// export Fog = (function() {\n// \tlet DEFAULT = undefined;\n// \tFog = class Fog extends BaseModules {\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {FlagsControllerD} from '../utils/FlagsController';\nclass FogObjParamConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR(DEFAULT.color.toArray() as [number, number, number]);\n\texponential = ParamConfig.BOOLEAN(0);\n\tdensity = ParamConfig.FLOAT(1);\n\tnear = ParamConfig.FLOAT(0, {range: [0, 100]});\n\tfar = ParamConfig.FLOAT(100, {range: [0, 100]});\n}\nconst ParamsConfig = new FogObjParamConfig();\nexport class FogObjNode extends TypedObjNode<Object3D, FogObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\n\tprotected _linear_fog!: Fog;\n\tprotected _linear_fogexp2!: FogExp2;\n\n\tinitialize_node() {\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_dirtyable_hook();\n\n\t\tthis._linear_fog = new Fog(DEFAULT.color.getHex(), DEFAULT.near, DEFAULT.far);\n\t\tthis._linear_fogexp2 = new FogExp2(DEFAULT.color.getHex(), DEFAULT.density);\n\t}\n\tstatic type() {\n\t\treturn 'fog';\n\t}\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', DEFAULT.color.toArray() as [number, number, number]);\n\t// \tthis.add_param(ParamType.BOOLEAN, 'exponential', 0);\n\t// \tthis.add_param(ParamType.FLOAT, 'density', DEFAULT.density);\n\t// \tthis.add_param(ParamType.FLOAT, 'near', DEFAULT.near, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// \tthis.add_param(ParamType.FLOAT, 'far', DEFAULT.far, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// }\n\n\t// get_fog: (callback)->\n\t// \tthis.param('exponential').eval (val)=>\n\t// \t\tfog = if val then @_exponential_fog else @_linear_fog\n\t// \t\tcallback(fog)\n\n\tcook() {\n\t\tlet fog: Fog | FogExp2;\n\t\tif (this.pv.exponential) {\n\t\t\tthis._linear_fogexp2.density = this.pv.density;\n\t\t\tfog = this._linear_fogexp2;\n\t\t} else {\n\t\t\tthis._linear_fog.near = this.pv.near;\n\t\t\tthis._linear_fog.far = this.pv.far; // * (1/@_param_intensity)\n\t\t\tfog = this._linear_fog;\n\t\t}\n\n\t\tfog.color.copy(this.pv.color);\n\n\t\tthis.scene.default_scene.fog = fog;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Scene} from 'three/src/scenes/Scene';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass SceneObjParamConfig extends NodeParamsConfig {\n\tbg_color = ParamConfig.COLOR([0, 0, 0]);\n}\nconst ParamsConfig = new SceneObjParamConfig();\n\nexport class SceneObjNode extends TypedObjNode<Scene, SceneObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scene';\n\t}\n\n\tcreate_object() {\n\t\treturn new Scene();\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.io.outputs.set_has_one_output();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {Vector2} from 'three/src/math/Vector2';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\n// import {Group} from 'three/src/objects/Group';\n// import {CameraHelper} from 'three/src/helpers/CameraHelper';\n// import lodash_clamp from 'lodash/clamp';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\n\nimport {OrthographicCameraBackgroundController} from './utils/cameras/background/OrthographicCameraController';\n// import {ParamType} from '../../poly/ParamType';\n\nconst DEFAULT = {\n\tleft: -0.5,\n\tright: 0.5,\n\ttop: 0.5,\n\tbottom: -0.5,\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function OrthographicCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\t// vertical_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t\t// horizontal_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t};\n}\n\nclass OrthographicCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(OrthographicCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new OrthographicCameraObjParamConfig();\n\nexport class OrthographicCameraObjNode extends TypedCameraObjNode<\n\tOrthographicCamera,\n\tOrthographicCameraObjParamConfig\n> {\n\tparams_config = ParamsConfig;\n\n\tprotected get background_controller_constructor() {\n\t\treturn OrthographicCameraBackgroundController;\n\t}\n\n\tstatic type() {\n\t\treturn 'orthographic_camera';\n\t}\n\n\tcreate_object() {\n\t\treturn new OrthographicCamera(\n\t\t\tDEFAULT.left * 2,\n\t\t\tDEFAULT.right * 2,\n\t\t\tDEFAULT.top * 2,\n\t\t\tDEFAULT.bottom * 2,\n\t\t\tBASE_CAMERA_DEFAULT.near,\n\t\t\tBASE_CAMERA_DEFAULT.far\n\t\t);\n\t}\n\t//@_helper = new CameraHelper( @_camera )\n\t//group = new Group()\n\t//group.add(@_camera)\n\t//group.add(@_helper)\n\n\t//this.set_object(@_camera)\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.add_param('float', 'left', DEFAULT.left)\n\t// \t// this.add_param('float', 'right', DEFAULT.right)\n\t// \t// this.add_param('float', 'top', DEFAULT.top)\n\t// \t// this.add_param('float', 'bottom', DEFAULT.bottom)\n\n\t// \t// this.within_param_folder('render', () => {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 2, {range: [0, 10]});\n\t// \t// left : Number, right : Number, top : Number, bottom : Number, near : Number, far : Number\n\t// \tthis.add_param(ParamType.VECTOR2, 'vertical_size_range', [0, 10], {visible_if: {lock_width: 1}});\n\t// \tthis.add_param(ParamType.VECTOR2, 'horizontal_size_range', [0, 10], {visible_if: {lock_width: 0}});\n\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\tconst size = this.pv.size || 1;\n\t\t\t// let lock_width = this.pv.lock_width;\n\t\t\t// if (lock_width == null) {\n\t\t\t// \tlock_width = true;\n\t\t\t// }\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst vertical_size = size / this._aspect;\n\t\t\t// \tconst zoom = 1 //this.get_zoom(vertical_size, this.pv.vertical_size_range);\n\t\t\t// \tthis._object.left = DEFAULT.left * size * zoom;\n\t\t\t// \tthis._object.right = DEFAULT.right * size * zoom;\n\t\t\t// \tthis._object.top = DEFAULT.top * vertical_size * zoom;\n\t\t\t// \tthis._object.bottom = DEFAULT.bottom * vertical_size * zoom;\n\t\t\t// } else {\n\t\t\tconst horizontal_size = size * this._aspect;\n\t\t\tconst zoom = 1; //this.get_zoom(horizontal_size, this.pv.horizontal_size_range);\n\t\t\tthis._object.left = DEFAULT.left * horizontal_size * zoom;\n\t\t\tthis._object.right = DEFAULT.right * horizontal_size * zoom;\n\t\t\tthis._object.top = DEFAULT.top * size * zoom;\n\t\t\tthis._object.bottom = DEFAULT.bottom * size * zoom;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\n\t// private get_zoom(size: number, range: Vector2) {\n\t// \tlet zoom = 1;\n\t// \tif (range) {\n\t// \t\tif (size < range.x || size > range.y) {\n\t// \t\t\tconst new_size = lodash_clamp(size, range.x, range.y);\n\t// \t\t\tzoom = new_size / size;\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {BaseCameraControlsEventNodeType, CameraControls} from '../../../event/_BaseCameraControls';\nimport {CameraControlsConfig} from '../../../event/utils/CameraControlConfig';\nimport {BaseParamType} from '../../../../params/_Base';\nimport {CameraOrbitControlsEventNode} from '../../../event/CameraOrbitControls';\n\nconst CONTROLS_PARAM_NAME = 'controls';\n\nexport class ControlsController {\n\t_applied_controls_by_element_id: Dictionary<Dictionary<boolean>> = {};\n\tprivate _controls_node: BaseCameraControlsEventNodeType | null = null;\n\tprivate controls_start_listener: (() => void) | undefined;\n\tprivate controls_end_listener: (() => void) | undefined;\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\tcontrols_param(): BaseParamType | null {\n\t\tif (this.node.params.has(CONTROLS_PARAM_NAME)) {\n\t\t\treturn this.node.params.get(CONTROLS_PARAM_NAME);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync controls_node(): Promise<BaseCameraControlsEventNodeType | null> {\n\t\tconst controls_param = this.node.p.controls;\n\t\tconst raw_input = controls_param.raw_input;\n\t\tif (raw_input && raw_input != '') {\n\t\t\tif (controls_param.is_dirty) {\n\t\t\t\tawait controls_param.compute();\n\t\t\t}\n\t\t\tconst node = controls_param.found_node();\n\t\t\tif (node) {\n\t\t\t\tif (node instanceof CameraOrbitControlsEventNode) {\n\t\t\t\t\treturn node;\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('found node is not of a camera control type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set('no node has been found');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync update_controls() {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\tif (this._controls_node != controls_node) {\n\t\t\t\tthis.dispose_control_refs();\n\t\t\t}\n\t\t}\n\n\t\tthis._controls_node = controls_node;\n\t}\n\n\tasync apply_controls(html_element: HTMLElement) {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\t// keep last_control_node_id to ensure we don't apply the controls more than once\n\t\t\t// OR it allow the viewer to remain in control of this\n\t\t\t//if !@_last_control_node_id? || (@_last_control_node_id != controls_node.graph_node_id)\n\t\t\t// but for now, the controls are still applied again after mouse up\n\t\t\tconst controls_id = controls_node.controls_id();\n\t\t\tlet controls_aleady_applied = false;\n\t\t\tif (\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] &&\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t\t) {\n\t\t\t\tcontrols_aleady_applied = true;\n\t\t\t}\n\t\t\tif (!controls_aleady_applied) {\n\t\t\t\t// this._last_control_node_id = controls_id;\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] =\n\t\t\t\t\tthis._applied_controls_by_element_id[html_element.id] || {};\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id] = true;\n\n\t\t\t\t// request_container forces a cook\n\t\t\t\t//controls_node.request_container (controls_container)=>\n\t\t\t\tconst controls = await controls_node.apply_controls(this.node.object, html_element);\n\t\t\t\tconst config = new CameraControlsConfig(this.node.graph_node_id, controls_node, controls);\n\t\t\t\tcontrols_node.set_from_camera_node(controls, this.node);\n\t\t\t\tthis.set_controls_events(controls);\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\tdispose_control_refs() {\n\t\tthis._applied_controls_by_element_id = {};\n\t}\n\n\t// calling dispose controls\n\t// ensure that we can set the camera menu to camera1, then camera2 and back to camera1\n\t// and controls will be cleared each time\n\tasync dispose_controls(html_element: HTMLElement) {\n\t\tdelete this._applied_controls_by_element_id[html_element.id];\n\t\t// if (this._applied_controls_by_element_id[html_element.id]) {\n\t\t// \tconst controls_node = await this.controls_node();\n\t\t// \tif (controls_node) {\n\t\t// \t\tconst controls_id = controls_node.controls_id();\n\t\t// \t\tdelete this._applied_controls_by_element_id[html_element.id][controls_id];\n\t\t// \t}\n\t\t// }\n\t\t// @_controls_node?.dispose_controls()\n\t\t// if(this._applied_controls_by_element_id[html_element.id]){\n\t\t// \tdelete this._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t// }\n\t\t// this._last_control_node_id = null\n\t}\n\tset_controls_events(controls: CameraControls) {\n\t\t// restore target (for orbit controls only for now)\n\t\t// to ensure that camera does not reset its target on 0,0,0 on first move\n\t\t// const controls_node = this.controls_node()\n\t\t// if (controls_node){\n\t\t// \tcontrols_node.\n\t\t// }\n\t\t// if(controls.target){\n\t\t// \tcontrols.target.copy(this._param_target) //.clone()\n\t\t// }\n\n\t\tthis.controls_start_listener = () => {\n\t\t\tthis.on_controls_start(controls);\n\t\t};\n\t\tthis.controls_end_listener = () => {\n\t\t\tthis.on_controls_end(controls);\n\t\t};\n\t\tcontrols.addEventListener('start', this.controls_start_listener);\n\t\tcontrols.addEventListener('end', this.controls_end_listener);\n\t}\n\n\ton_controls_start(controls: CameraControls) {\n\t\t// this.param('is_updating').set(1)\n\t}\n\ton_controls_end(controls: CameraControls) {\n\t\t// this.param('is_updating').set(0)\n\t\tif (controls.target) {\n\t\t\tconst val = controls.target.toArray() as [number, number, number];\n\t\t\tthis.node.params.set_vector3('target', val);\n\t\t}\n\t\tthis.node.update_transform_params_from_object();\n\t}\n}\n","import {BaseCameraControlsEventNodeType, CameraControls} from '../_BaseCameraControls';\n\nexport class CameraControlsConfig {\n\tconstructor(\n\t\tprivate _camera_node_id: string,\n\t\tprivate _controls_node: BaseCameraControlsEventNodeType,\n\t\tprivate _controls: CameraControls\n\t) {}\n\n\tget camera_node_id() {\n\t\treturn this._camera_node_id;\n\t}\n\t// camera_controls_node_id(){\n\t// \treturn this._camera_controls_node_id\n\t// }\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\tget controls_node() {\n\t\treturn this._controls_node;\n\t}\n\n\tis_equal(other_config: CameraControlsConfig): boolean {\n\t\treturn (\n\t\t\tother_config.camera_node_id == this._camera_node_id &&\n\t\t\tother_config.controls_node.graph_node_id == this._controls_node.graph_node_id\n\t\t);\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer'\n// import {Color} from 'three/src/math/Color'\n\nimport {BaseViewer} from './_Base';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import 'src/engine/Poly';\n// import {POLY} from '../Poly';\n\nconst CSS_CLASS = 'CoreThreejsViewer';\n\ndeclare global {\n\tinterface HTMLCanvasElement {\n\t\tonwebglcontextlost: () => void;\n\t\tonwebglcontextrestored: () => void;\n\t}\n}\n\nexport class ThreejsViewer extends BaseViewer {\n\tprivate _request_animation_frame_id: number | undefined;\n\tprivate do_render: boolean = true;\n\n\tprivate _animate_method: () => void = this.animate.bind(this);\n\n\tconstructor(_container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tsuper(_container, _scene, camera_node);\n\n\t\tthis._canvas = document.createElement('canvas');\n\t\tthis._canvas.id = `canvas_id_${Math.random()}`.replace('.', '_');\n\t\tthis._canvas.style.display = 'block';\n\t\tthis._canvas.style.outline = 'none';\n\n\t\tthis._container.appendChild(this._canvas);\n\t\tthis._container.classList.add(CSS_CLASS);\n\t\tthis._container.style.height = '100%';\n\n\t\tthis._set_events();\n\t}\n\n\tpublic _build() {\n\t\tthis._init_display();\n\t\tthis.activate();\n\t}\n\n\tdispose() {\n\t\tthis._cancel_animate();\n\t\tthis.controls_controller.dispose_controls();\n\t\t// this._dispose_graph_node()\n\t}\n\n\tprivate _set_events() {\n\t\tthis.events_controller.init();\n\t\tthis.webgl_controller.init();\n\n\t\t// if (POLY.player_mode()) {\n\t\twindow.onresize = () => {\n\t\t\tthis.cameras_controller.on_resize();\n\t\t};\n\t\t// }\n\t}\n\t// protected _on_touchmove(event: TouchEvent){\n\t// \tconsole.log(\"touch\", event)\n\t// }\n\n\tprivate _init_display() {\n\t\tif (!this._canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cameras_controller.compute_size_and_aspect();\n\t\tconst size: Vector2 = this.cameras_controller.size;\n\n\t\tthis.cameras_controller.camera_node?.post_process_controller.create_renderer(this._canvas, size);\n\t\t// this.canvas_context = canvas.getContext('2d')\n\n\t\t// init renderer\n\t\t// @renderer = new THREE.WebGLRenderer\n\t\t// \tcanvas: canvas\n\t\t// \tantialias: true\n\t\t// \talpha: true\n\n\t\t// @renderer.shadowMap.enabled = true\n\t\t// this.compute_size_and_aspect()\n\n\t\t//\n\t\t// https://stackoverflow.com/questions/31407778/display-scene-at-lower-resolution-in-three-js\n\t\t// TODO: this article mentions that setSize should be called after\n\t\t// @renderer.setSize(this._size[0], this._size[1])\n\t\t// @renderer.setPixelRatio(window.devicePixelRatio)\n\t\t// @renderer.setSize(size[0]*1.5, size[1]*1.5)\n\t\t// canvas.width = \"//{size[0]}px\"\n\t\t// canvas.height = \"//{size[1]}px\"\n\t\t// canvas.style.width = \"//{size[0]}px\"\n\t\t// canvas.style.height = \"//{size[1]}px\"\n\n\t\t// TODO: ensure the renderers get added to a list\n\t\t//if !this.player_mode\n\t\t//\tconsole.log(\"set window.viewer_renderer from Threejs.vue component\")\n\t\t// window.viewer_renderer = @renderer\n\t\t// POLY.renderers_controller.register_renderer(@renderer)\n\n\t\t//this._init_webgl_utils()\n\n\t\t// init scene\n\t\t// @display_scene.background = new THREE.Color(\"//111\")\n\n\t\t//window.display_scene = @display_scene\n\n\t\t// this._init_ray_helper(); // TODO: typescript\n\n\t\t//@cam_animation_helper = new CameraAnimationHelper(@ray_helper, @event_helper)\n\n\t\tthis.cameras_controller.prepare_current_camera();\n\t\t// this._add_helpers_to_scene()\n\n\t\tthis.animate();\n\t}\n\n\tanimate() {\n\t\tif (this.do_render) {\n\t\t\tthis._scene.time_controller.increment_time_if_playing();\n\t\t\tthis.render();\n\t\t\tthis._controls_controller?.update();\n\t\t\t// this.update_stats()\n\t\t\t// this._controls?.update(false)\n\n\t\t\t// @_renders_count ?= 0\n\t\t\t// @_renders_count += 1\n\t\t\t// if @_renders_count < 6\n\t\t\tthis._request_animation_frame_id = requestAnimationFrame(this._animate_method);\n\t\t}\n\t}\n\n\tprivate _cancel_animate() {\n\t\tthis.do_render = false;\n\t\tif (this._request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this._request_animation_frame_id);\n\t\t}\n\t\tif (this._canvas) {\n\t\t\tthis.cameras_controller.camera_node?.post_process_controller.delete_renderer(this._canvas);\n\t\t}\n\t\t// POLY.renderers_controller.deregister_renderer(@renderer)\n\t\t// this.dispose_camera()\n\t}\n\n\trender() {\n\t\tif (this.cameras_controller.camera_node && this._canvas) {\n\t\t\tconst size = this.cameras_controller.size;\n\t\t\tconst aspect = this.cameras_controller.aspect;\n\t\t\tthis.cameras_controller.camera_node.post_process_controller.render(this._canvas, size, aspect);\n\t\t} else {\n\t\t\tconsole.warn('no camera to render with');\n\t\t}\n\t}\n}\n","import {Scene} from 'three/src/scenes/Scene';\nimport {PolyScene} from '../scene/PolyScene';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import {CameraMixin} from './concerns/Camera';\n// import {Capturer} from './concerns/Capturer';\n// import {ContainerClass} from './concerns/ContainerClass';\n// import {Controls} from './concerns/Controls';\n// import {PickerForViewer} from './concerns/Picker';\n\nimport {CamerasController} from './utils/CamerasController';\nimport {ControlsController} from './utils/ControlsController';\nimport {EventsController} from './utils/EventsController';\nimport {WebGLController} from './utils/WebglController';\n\n// class AbstractViewer {}\n\nconst HOVERED_CLASS_NAME = 'hovered';\n\nexport abstract class BaseViewer {\n\tprotected _display_scene: Scene;\n\tprotected _canvas: HTMLCanvasElement | undefined;\n\tprotected _active: boolean = false;\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tactivate() {\n\t\tthis._active = true;\n\t}\n\tdeactivate() {\n\t\tthis._active = false;\n\t}\n\n\tprotected _cameras_controller: CamerasController | undefined;\n\tget cameras_controller() {\n\t\treturn (this._cameras_controller = this._cameras_controller || new CamerasController(this));\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller() {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\tprotected _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController(this));\n\t}\n\n\tconstructor(protected _container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tthis._display_scene = this._scene.default_scene;\n\t\tthis._init_from_scene(camera_node).then(() => {\n\t\t\tthis._build();\n\t\t});\n\t}\n\tget container() {\n\t\treturn this._container;\n\t}\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget canvas() {\n\t\treturn this._canvas;\n\t}\n\n\tprivate async _init_from_scene(camera_node: BaseCameraObjNodeType) {\n\t\tawait this.cameras_controller.set_camera_node(camera_node || this._scene.cameras_controller.master_camera_node);\n\t\t// await this.update_picker_nodes(); // TODO: typescript\n\t}\n\tprotected abstract _build(): void;\n\n\t// html container class\n\treset_container_class() {\n\t\tthis.container.classList.remove(HOVERED_CLASS_NAME);\n\t}\n\tset_container_class_hovered() {\n\t\tthis.container.classList.add(HOVERED_CLASS_NAME);\n\t}\n}\n","// import {Camera} from 'three/src/cameras/Camera';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\nimport {BaseViewer} from '../_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class CamerasController {\n\t// private _is_active: boolean = false;\n\tprivate _camera_node: BaseCameraObjNodeType | null = null;\n\t// private _camera: Camera;\n\n\tprivate _size: Vector2 = new Vector2(100, 100);\n\tprivate _aspect: number = 1;\n\t// private current_camera_controls_node_graph_id: number = null;\n\n\tconstructor(private viewer: BaseViewer) {}\n\n\t// activate() {\n\t// \tthis._is_active = true;\n\t// }\n\tasync set_camera_node(camera_node: BaseCameraObjNodeType) {\n\t\tif (!this._camera_node || camera_node.graph_node_id != this._camera_node.graph_node_id) {\n\t\t\tthis._camera_node = camera_node;\n\t\t\t// this._camera = camera_node.object;\n\t\t\tthis._update_graph_node();\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t}\n\t}\n\tprivate _graph_node: CoreGraphNode | undefined;\n\tprivate _update_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn;\n\t\t}\n\t\tconst controls_param = this._camera_node.params.get_operator_path('controls');\n\t\tif (!controls_param) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node = this._graph_node || this._create_graph_node();\n\t\tif (!this._graph_node) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node.graph_disconnect_predecessors();\n\t\tthis._graph_node.add_graph_input(controls_param);\n\t}\n\tprivate _create_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst node = new CoreGraphNode(this._camera_node.scene, 'viewer-controls');\n\t\tnode.add_post_dirty_hook('this.viewer.controls_controller', async () => {\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t});\n\t\treturn node;\n\t}\n\n\tget camera_node() {\n\t\treturn this._camera_node;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\tget aspect() {\n\t\treturn this._aspect;\n\t}\n\n\ton_resize() {\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.compute_size_and_aspect();\n\t\tthis._camera_node?.post_process_controller.set_renderer_size(this.viewer.canvas, this._size);\n\t\tthis.update_camera_aspect();\n\t}\n\tcompute_size_and_aspect() {\n\t\tthis._update_size();\n\t\tthis._camera_node?.scene.uniforms_controller.update_resolution_dependent_uniform_owners(this._size);\n\t\tthis._aspect = this._get_aspect();\n\t}\n\n\tprivate _update_size() {\n\t\tthis._size.x = this.viewer.container.offsetWidth;\n\t\tthis._size.y = this.viewer.container.offsetHeight;\n\t}\n\tprivate _get_aspect(): number {\n\t\treturn this._size.x / this._size.y;\n\t}\n\n\tupdate_camera_aspect() {\n\t\tthis._camera_node?.setup_for_aspect_ratio(this._aspect);\n\t}\n\t// dispose_camera: ->\n\t// \tthis.$emit('before_controls_apply', null)\n\t// \t// if @_controls?\n\t// \t// \t@_controls.dispose()\n\t// \t// camera_graph_node_id ?= this.current_camera_node_graph_id\n\t// \t// camera_node = this.$store.scene.graph().node_from_id(camera_graph_node_id)\n\t// \t// this.current_camera_node.dipose_controls()\n\t// \t//if this.current_camera_node?\n\t// \t//\tthis.current_camera_node.dispose_controls()\n\tasync prepare_current_camera() {\n\t\tif (this._camera_node) {\n\t\t\t// we dispose the controls first, so they can be applied\n\t\t\t// if they were not disposed properly when we closed the viewer\n\t\t\t// but I'm now trying in the destroyed callback\n\t\t\t//this.current_camera_node.dispose_controls()\n\n\t\t\t//this.current_camera_node.apply_controls()\n\t\t\t//this.current_camera_node.prepare_for_viewer(this.aspect())\n\t\t\t// const name = this.current_camera_node.name()\n\t\t\t// const graph_node_id = this._camera_node.graph_node_id\n\t\t\t/*const container = */ await this._camera_node.request_container(); // ensure the camera is cooked\n\t\t\tawait this._update_from_camera_container(); //container, graph_node_id)\n\t\t}\n\t}\n\t// remove_cloned_camera: ->\n\t// \tif @_current_camera?\n\t// \t\t@_current_camera.camera_source.node.remove_clone(@_current_camera)\n\n\tasync _update_from_camera_container() {\n\t\t//container, graph_node_id:number){\n\t\t// ensure that we get the same as we requested\n\t\t// if(graph_node_id == this._camera_node.graph_node_id){\n\n\t\t// this.remove_cloned_camera()\n\t\t// cloned_camera = this.current_camera_node.clone_camera()\n\t\t// @_current_camera = cloned_camera\n\t\tthis.update_camera_aspect();\n\n\t\t//this.dispose_camera()\n\n\t\t// @_is_active is use to check if the component has been destroyed\n\t\t// which can happen on app load, but also when user switches the camera menu\n\n\t\t// if this.current_camera_controls_node_graph_id == null || ()\n\n\t\t// if(@_is_active == true)\n\t\tawait this.viewer.controls_controller.create_controls();\n\n\t\t// }\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {CameraControls} from '../../nodes/event/_BaseCameraControls';\n\nexport class ControlsController {\n\tprotected _active: boolean = false;\n\tprotected _controls: CameraControls | null = null;\n\t_bound_on_controls_start: () => void = this._on_controls_start.bind(this);\n\t_bound_on_controls_end: () => void = this._on_controls_end.bind(this);\n\tconstructor(private viewer: BaseViewer) {}\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\n\tasync create_controls() {\n\t\tthis.dispose_controls();\n\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = await this.camera_node?.controls_controller.apply_controls(this.viewer.canvas);\n\t\tif (config) {\n\t\t\t// this.current_camera_controls_node_graph_id = config.camera_controls_node_id()\n\t\t\tthis._controls = config.controls;\n\t\t\t// this._controls_node = config.controls_node()\n\n\t\t\tif (this._controls) {\n\t\t\t\tif (this.viewer.active) {\n\t\t\t\t\tthis._controls.addEventListener('start', this._bound_on_controls_start);\n\t\t\t\t\tthis._controls.addEventListener('end', this._bound_on_controls_end);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dispose_controls();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// test in case @_is_active has changed\n\t\t\t// if (this._is_active != true && this._controls){\n\t\t\t// \tthis._dispose_controls()\n\n\t\t\t// }\n\t\t\t// TODO\n\t\t\t// we have to reassign the camera here, as this method is called twice\n\t\t\t// and the first time without the controls being present apparently.. (more tests needed)\n\t\t\t// CURRENT ANSWER: the method this.prepare_current_camera() is called twice on app load\n\t\t\t// which only cause problems when switching back to perspective.\n\t\t\t// @_current_camera = cloned_camera\n\t\t\t//@_controls = controls\n\t\t\t// this.$emit('before_controls_apply', controls)\n\t\t}\n\t}\n\tupdate() {\n\t\tif (this._controls) {\n\t\t\tthis._controls.update();\n\t\t}\n\t}\n\n\tdispose_controls() {\n\t\tif (this._controls) {\n\t\t\tif (this.viewer.canvas) {\n\t\t\t\tthis.camera_node?.controls_controller.dispose_controls(this.viewer.canvas);\n\t\t\t}\n\n\t\t\tif (this._bound_on_controls_start) {\n\t\t\t\tthis._controls.removeEventListener('start', this._bound_on_controls_start);\n\t\t\t}\n\t\t\tif (this._bound_on_controls_end) {\n\t\t\t\tthis._controls.removeEventListener('end', this._bound_on_controls_end);\n\t\t\t}\n\n\t\t\tthis._controls.dispose();\n\t\t\tthis._controls = null;\n\t\t}\n\t}\n\tprivate _on_controls_start() {\n\t\tthis._active = true;\n\t}\n\tprivate _on_controls_end() {\n\t\tthis._active = false;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n// import {Vector2} from 'three/src/math/Vector2';\n\n// const DIST_UNINITIALIZED = -1;\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype MouseOrTouchEventCallback = (e: MouseOrTouchEvent) => void;\n\nexport class EventsController {\n\t// private _mousedown_pos = new Vector2();\n\t// private _mouse_distance_travelled: number = DIST_UNINITIALIZED;\n\tprotected _bound_on_mousedown: MouseOrTouchEventCallback = this._on_mousedown.bind(this);\n\tprotected _bound_on_mousemove: MouseOrTouchEventCallback = this._on_mousemove.bind(this);\n\tprotected _bound_on_mouseup: MouseOrTouchEventCallback = this._on_mouseup.bind(this);\n\t// protected _bound_on_click: MouseEventCallback\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget canvas() {\n\t\treturn this.viewer.canvas;\n\t}\n\n\tinit() {\n\t\tif (!this.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._bound_on_mousedown) {\n\t\t\tthis.canvas.removeEventListener('mousedown', this._bound_on_mousedown);\n\t\t}\n\t\tif (this._bound_on_mousemove) {\n\t\t\tthis.canvas.removeEventListener('mousemove', this._bound_on_mousemove);\n\t\t}\n\t\tif (this._bound_on_mouseup) {\n\t\t\tthis.canvas.removeEventListener('mouseup', this._bound_on_mouseup);\n\t\t}\n\t\tthis._bound_on_mousedown = this._bound_on_mousedown || this._on_mousedown.bind(this);\n\t\tthis._bound_on_mousemove = this._bound_on_mousemove || this._on_mousemove.bind(this);\n\t\tthis._bound_on_mouseup = this._bound_on_mouseup || this._on_mouseup.bind(this);\n\n\t\tthis.canvas.addEventListener('mousedown', this._bound_on_mousedown);\n\t\tthis.canvas.addEventListener('mousemove', this._bound_on_mousemove);\n\t\tthis.canvas.addEventListener('mouseup', this._bound_on_mouseup);\n\n\t\t// this._bound_on_touchmove = this._bound_on_touchmove || this._on_touchmove.bind(this)\n\t\tthis.canvas.addEventListener('touchstart', this._bound_on_mousedown, false);\n\t\tthis.canvas.addEventListener('touchmove', this._bound_on_mousemove, false);\n\t\tthis.canvas.addEventListener('touchend', this._bound_on_mouseup, false);\n\t\tthis.canvas.addEventListener('touchcancel', this._bound_on_mouseup, false);\n\t}\n\n\tprotected _on_mousedown(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\n\t\t// this._mouse_distance_travelled = 0;\n\t\t// if (event instanceof MouseEvent) {\n\t\t// \tthis._mousedown_pos.x = event.pageX;\n\t\t// \tthis._mousedown_pos.y = event.pageY;\n\t\t// } else {\n\t\t// \tconst touch = event.touches[0];\n\t\t// \tthis._mousedown_pos.x = touch.pageX;\n\t\t// \tthis._mousedown_pos.y = touch.pageY;\n\t\t// }\n\t}\n\n\tprotected _on_mousemove(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled !== DIST_UNINITIALIZED) {\n\t\t// \tlet distance: number = 0;\n\t\t// \tif (event instanceof MouseEvent) {\n\t\t// \t\tdistance = event.pageX - this._mousedown_pos.x + (event.pageY - this._mousedown_pos.y);\n\t\t// \t} else {\n\t\t// \t\tconst touch = event.touches[0];\n\t\t// \t\tdistance = touch.pageX - this._mousedown_pos.x + (touch.pageY - this._mousedown_pos.y);\n\t\t// \t}\n\t\t// \tthis._mouse_distance_travelled += Math.abs(distance);\n\t\t// }\n\n\t\t// if (!this.viewer.controls_controller.active) {\n\t\t// \t// this.viewer.process_picker_nodes_on_mouse_move(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t}\n\n\tprotected _on_mouseup(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled < 2) {\n\t\t// \t// this.viewer.process_picker_nodes_on_click(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t\t// this._mouse_distance_travelled = DIST_UNINITIALIZED;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n\nexport class WebGLController {\n\tpublic request_animation_frame_id: number | undefined;\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tinit() {\n\t\tconst canvas = this.viewer.canvas;\n\t\tif (canvas) {\n\t\t\tcanvas.onwebglcontextlost = this._on_webglcontextlost.bind(this);\n\t\t\tcanvas.onwebglcontextrestored = this._on_webglcontextrestored.bind(this);\n\t\t}\n\t}\n\n\tprotected _on_webglcontextlost() {\n\t\tconsole.warn('context lost at frame', this.viewer.scene.frame);\n\t\t// event.preventDefault();\n\t\tif (this.request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this.request_animation_frame_id);\n\t\t} else {\n\t\t\tconsole.warn('request_animation_frame_id not initialized');\n\t\t}\n\t\tconsole.warn('not canceled', this.request_animation_frame_id);\n\t}\n\tprotected _on_webglcontextrestored() {\n\t\tconsole.log('context restored');\n\t}\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport lodash_isNaN from 'lodash/isNaN';\n\nexport class OrthographicCameraBackgroundController extends BaseBackgroundController {\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tlet width = this.node.params.float('size');\n\t\tlet height = width;\n\n\t\tconst far = this.node.params.float('far');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tquad.scale.x = width;\n\t\t\tquad.scale.y = height;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n}\n","// import lodash_clamp from 'lodash/clamp';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\nimport {PerspectiveCameraBackgroundController} from './utils/cameras/background/PerspectiveCameraController';\n// import {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nconst DEFAULT = {\n\tfov: 50,\n};\n\n// const EVENT_CHANGE = { type: 'change' };\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function PerspectiveCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tfov = ParamConfig.FLOAT(DEFAULT.fov, {range: [0, 100]});\n\t\t// vertical_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 1}});\n\t\t// horizontal_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 0}});\n\t};\n}\nclass PerspectiveCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(PerspectiveCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PerspectiveCameraObjParamConfig();\n\nexport class PerspectiveCameraObjNode extends TypedCameraObjNode<PerspectiveCamera, PerspectiveCameraObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'perspective_camera';\n\t}\n\n\tprotected get background_controller_constructor() {\n\t\treturn PerspectiveCameraBackgroundController;\n\t}\n\n\tcreate_object() {\n\t\treturn new PerspectiveCamera(DEFAULT.fov, 1, BASE_CAMERA_DEFAULT.near, BASE_CAMERA_DEFAULT.far);\n\t}\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.add_param(ParamType.FLOAT, 'fov', DEFAULT.fov, {\n\t// \t// \trange: [0, 180],\n\t// \t// \trange_locked: [true, true],\n\t// \t// });\n\t// \t// this.add_param(ParamType.VECTOR2, 'vertical_fov_range', [0, 100], {visible_if: {lock_width: 1}});\n\t// \t// this.add_param(ParamType.VECTOR2, 'horizontal_fov_range', [0, 100], {visible_if: {lock_width: 0}});\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tif (this._object.fov != this.pv.fov) {\n\t\t\tthis._object.fov = this.pv.fov;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\t// let lock_width = true;//this.pv.lock_width;\n\n\t\t\tthis._object.aspect = this._aspect;\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst other_fov = this.pv.fov / this._aspect;\n\t\t\t// \tthis._object.zoom = this.get_zoom(this._aspect, other_fov, this.pv.vertical_fov_range);\n\t\t\t// } else {\n\t\t\t// \tthis._object.zoom = 1;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\t// private get_zoom(start_zoom: number, other_fov: number, range: Vector2) {\n\t// \tlet zoom = start_zoom;\n\t// \tif (range) {\n\t// \t\tif (other_fov < range.x || other_fov > range.y) {\n\t// \t\t\tconst new_other_fov = lodash_clamp(other_fov, range.x, range.y);\n\t// \t\t\tzoom = start_zoom * (other_fov / new_other_fov);\n\t// \t\t\t// zoom = Math.min(start_zoom, zoom)\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_sum from 'lodash/sum';\n// import { Vector2 } from 'three';\n\n// enum CornerNames {\n// \tbl = 'bl',\n// \tbr = 'br',\n// \ttl = 'tl',\n// \ttr = 'tr',\n// }\ninterface Corners2D {\n\tbl: Vector2Like;\n\tbr: Vector2Like;\n\ttl: Vector2Like;\n\ttr: Vector2Like;\n}\ninterface Corners3D {\n\tbl: Vector3;\n\tbr: Vector3;\n\ttl: Vector3;\n\ttr: Vector3;\n}\nconst SCREEN_COORD: Corners2D = {\n\tbl: {x: -1, y: -1},\n\tbr: {x: +1, y: -1},\n\ttl: {x: -1, y: +1},\n\ttr: {x: +1, y: +1},\n};\nconst CORNER_NAMES: Array<keyof Corners3D> = ['bl', 'br', 'tl', 'tr'];\n\nexport class PerspectiveCameraBackgroundController extends BaseBackgroundController {\n\tprivate _bg_corner: Corners3D = {\n\t\tbl: new Vector3(),\n\t\tbr: new Vector3(),\n\t\ttl: new Vector3(),\n\t\ttr: new Vector3(),\n\t};\n\tprivate _bg_center = new Vector3();\n\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tfor (let corner_name of CORNER_NAMES) {\n\t\t\tthis._update_corner_vector(this._bg_corner[corner_name], SCREEN_COORD[corner_name]);\n\t\t}\n\t\tlet width = this._bg_corner.bl.distanceTo(this._bg_corner.br);\n\t\tlet height = this._bg_corner.bl.distanceTo(this._bg_corner.tl);\n\n\t\tthis._bg_center.x = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].x)) / 4;\n\t\tthis._bg_center.y = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].y)) / 4;\n\t\tthis._bg_center.z = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].z)) / 4;\n\n\t\tconst far = this.node.params.float('far');\n\t\tconst background_ratio = this.node.params.float('background_ratio');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tconst z = this._bg_center.distanceTo(this.node.object.position);\n\t\t\tconst z_ratio = far / z;\n\t\t\tconst desired_ratio = background_ratio || 1;\n\n\t\t\tif (width > height) {\n\t\t\t\theight = width / desired_ratio;\n\t\t\t} else {\n\t\t\t\theight = width * desired_ratio;\n\t\t\t}\n\n\t\t\tquad.scale.x = width * z_ratio;\n\t\t\tquad.scale.y = height * z_ratio;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n\t_update_corner_vector(vector: Vector3, coord: Vector2Like) {\n\t\tthis._bg_raycaster.setFromCamera(coord, this.node.object);\n\t\tvector\n\t\t\t.copy(this._bg_raycaster.ray.direction)\n\t\t\t.multiplyScalar(this.node.params.float('far'))\n\t\t\t.add(this._bg_raycaster.ray.origin);\n\t}\n}\n","import {CATEGORY_SOP} from './Category';\n\nimport {AddSopNode} from '../../nodes/sop/Add';\nimport {AnimationCopySopNode} from '../../nodes/sop/AnimationCopy';\nimport {AnimationMixerSopNode} from '../../nodes/sop/AnimationMixer';\nimport {AttribAddMultSopNode} from '../../nodes/sop/AttribAddMult';\nimport {AttribCopySopNode} from '../../nodes/sop/AttribCopy';\nimport {AttribCreateSopNode} from '../../nodes/sop/AttribCreate';\nimport {AttribDeleteSopNode} from '../../nodes/sop/AttribDelete';\nimport {AttribNormalizeSopNode} from '../../nodes/sop/AttribNormalize';\nimport {AttribPromoteSopNode} from '../../nodes/sop/AttribPromote';\nimport {AttribRemapSopNode} from '../../nodes/sop/AttribRemap';\nimport {AttribRenameSopNode} from '../../nodes/sop/AttribRename';\nimport {AttribTransferSopNode} from '../../nodes/sop/AttribTransfer';\nimport {BboxScatterSopNode} from '../../nodes/sop/BboxScatter';\nimport {BlendSopNode} from '../../nodes/sop/Blend';\nimport {BoxSopNode} from '../../nodes/sop/Box';\nimport {CacheSopNode} from '../../nodes/sop/Cache';\nimport {CircleSopNode} from '../../nodes/sop/Circle';\nimport {CodeSopNode} from '../../nodes/sop/Code';\nimport {ColorSopNode} from '../../nodes/sop/Color';\nimport {ConeSopNode} from '../../nodes/sop/Cone';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {DataSopNode} from '../../nodes/sop/Data';\nimport {DataUrlSopNode} from '../../nodes/sop/DataUrl';\nimport {DelaySopNode} from '../../nodes/sop/Delay';\nimport {DeleteSopNode} from '../../nodes/sop/Delete';\nimport {FaceSopNode} from '../../nodes/sop/Face';\nimport {FileSopNode} from '../../nodes/sop/File';\nimport {FuseSopNode} from '../../nodes/sop/Fuse';\nimport {HexagonsSopNode} from '../../nodes/sop/Hexagons';\nimport {HierarchySopNode} from '../../nodes/sop/Hierarchy';\n// TODO: heightmap\nimport {InstanceSopNode} from '../../nodes/sop/Instance';\nimport {JitterSopNode} from '../../nodes/sop/Jitter';\nimport {LayerSopNode} from '../../nodes/sop/Layer';\nimport {LineSopNode} from '../../nodes/sop/Line';\nimport {MaterialSopNode} from '../../nodes/sop/Material';\nimport {MergeSopNode} from '../../nodes/sop/Merge';\nimport {NoiseSopNode} from '../../nodes/sop/Noise';\nimport {NormalsSopNode} from '../../nodes/sop/Normals';\nimport {NullSopNode} from '../../nodes/sop/Null';\nimport {ObjectMergeSopNode} from '../../nodes/sop/ObjectMerge';\nimport {OcclusionSopNode} from '../../nodes/sop/Occlusion';\nimport {ParticlesSystemGpuSopNode} from '../../nodes/sop/ParticlesSystemGpu';\nimport {PeakSopNode} from '../../nodes/sop/Peak';\nimport {PlaneSopNode} from '../../nodes/sop/Plane';\nimport {PointSopNode} from '../../nodes/sop/Point';\nimport {PolywireSopNode} from '../../nodes/sop/Polywire';\nimport {RaySopNode} from '../../nodes/sop/Ray';\nimport {ResampleSopNode} from '../../nodes/sop/Resample';\nimport {ScatterSopNode} from '../../nodes/sop/Scatter';\nimport {ShadowsSopNode} from '../../nodes/sop/Shadows';\nimport {SkinSopNode} from '../../nodes/sop/Skin';\nimport {SphereSopNode} from '../../nodes/sop/Sphere';\nimport {SwitchSopNode} from '../../nodes/sop/Switch';\nimport {TextSopNode} from '../../nodes/sop/Text';\nimport {TorusSopNode} from '../../nodes/sop/Torus';\nimport {TorusKnotSopNode} from '../../nodes/sop/TorusKnot';\nimport {TransformSopNode} from '../../nodes/sop/Transform';\nimport {TubeSopNode} from '../../nodes/sop/Tube';\nimport {UvProjectSopNode} from '../../nodes/sop/UvProject';\n\nexport interface GeoNodeChildrenMap {\n\tadd: AddSopNode;\n\tanimation_copy: AnimationCopySopNode;\n\tanimation_mixer: AnimationMixerSopNode;\n\tattrib_add_mult: AttribAddMultSopNode;\n\tattrib_copy: AttribCopySopNode;\n\tattrib_create: AttribCreateSopNode;\n\tattrib_delete: AttribDeleteSopNode;\n\tattrib_normalize: AttribNormalizeSopNode;\n\tattrib_promote: AttribPromoteSopNode;\n\tattrib_remap: AttribRemapSopNode;\n\tattrib_rename: AttribRenameSopNode;\n\tattrib_transfer: AttribTransferSopNode;\n\tbbox_scatter: BboxScatterSopNode;\n\tblend: BlendSopNode;\n\tbox: BoxSopNode;\n\tcache: CacheSopNode;\n\tcircle: CircleSopNode;\n\tcode: CodeSopNode;\n\tcolor: ColorSopNode;\n\tcopy: CopySopNode;\n\tdata: DataSopNode;\n\tdata_url: DataUrlSopNode;\n\tdelay: DelaySopNode;\n\tdelete: DeleteSopNode;\n\tface: FaceSopNode;\n\tfile: FileSopNode;\n\tfuse: FuseSopNode;\n\thexagons: HexagonsSopNode;\n\thierarchy: HierarchySopNode;\n\tinstance: InstanceSopNode;\n\tjitter: JitterSopNode;\n\tlayer: LayerSopNode;\n\tline: LineSopNode;\n\tmaterial: MaterialSopNode;\n\tmerge: MergeSopNode;\n\tnoise: NoiseSopNode;\n\tnormals: NormalsSopNode;\n\tnull: NullSopNode;\n\tobject_merge: ObjectMergeSopNode;\n\tocclusion: OcclusionSopNode;\n\tparticles_system_gpu: ParticlesSystemGpuSopNode;\n\tpeak: PeakSopNode;\n\tplane: PlaneSopNode;\n\tpoint: PointSopNode;\n\tpolywire: PolywireSopNode;\n\tray: RaySopNode;\n\tresample: ResampleSopNode;\n\tscatter: ScatterSopNode;\n\tshadows: ShadowsSopNode;\n\tskin: SkinSopNode;\n\tsphere: SphereSopNode;\n\tswitch: SwitchSopNode;\n\ttext: TextSopNode;\n\ttorus: TorusSopNode;\n\ttorus_knot: TorusKnotSopNode;\n\ttransform: TransformSopNode;\n\ttube: TubeSopNode;\n\tuv_project: UvProjectSopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class SopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AddSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(AnimationCopySopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AnimationMixerSopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AttribAddMultSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCopySopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCreateSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribDeleteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribNormalizeSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribPromoteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRemapSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRenameSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribTransferSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(BboxScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BlendSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BoxSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CacheSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(CodeSopNode, CATEGORY_SOP.ADVANCED);\n\t\tpoly.register_node(CircleSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(ColorSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ConeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CopySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(DataSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DataUrlSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DelaySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(DeleteSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FaceSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FileSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(FuseSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(HexagonsSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(HierarchySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(InstanceSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(JitterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LayerSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LineSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(MaterialSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(MergeSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NoiseSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NormalsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(NullSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ObjectMergeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(OcclusionSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(ParticlesSystemGpuSopNode, CATEGORY_SOP.DYNAMICS);\n\t\tpoly.register_node(PeakSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PlaneSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(PointSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PolywireSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(RaySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ResampleSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SkinSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ShadowsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SphereSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(SwitchSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(TextSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusKnotSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TransformSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(TubeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(UvProjectSopNode, CATEGORY_SOP.MODIFIER);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten';\n// import lodash_last from 'lodash/last';\nimport lodash_times from 'lodash/times';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometryUtilShape} from '../../../core/geometry/util/Shape';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AddSopParamsConfig extends NodeParamsConfig {\n\tcreate_point = ParamConfig.BOOLEAN(1);\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 100],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {create_point: true},\n\t});\n\tposition = ParamConfig.VECTOR3([0, 0, 0], {visible_if: {create_point: true}});\n\t// create_polygon = ParamConfig.BOOLEAN(0);\n\topen = ParamConfig.BOOLEAN(0);\n\tconnect_to_last_point = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new AddSopParamsConfig();\n\nexport class AddSopNode extends TypedSopNode<AddSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'add';\n\t}\n\t_objects: Object3D[] | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create polygons from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._objects = [];\n\t\tthis._create_point();\n\t\t// if (this.pv.create_polygon) {\n\t\t// \tthis._create_polygon(input_contents[0]);\n\t\t// }\n\n\t\tthis.set_objects(this._objects);\n\t}\n\n\tprivate _create_point() {\n\t\tif (this.pv.create_point) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions: number[] = [];\n\t\t\tlodash_times(this.pv.points_count, (i) => {\n\t\t\t\tthis.pv.position.toArray(positions, i * 3);\n\t\t\t});\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\t\t\tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\n\t\t\tif (this._objects) {\n\t\t\t\tthis._objects.push(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_polygon(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\t// \tconst is_polygon_closed = !this.pv.open && points.length >= 3;\n\t// \tif (points.length > 0) {\n\t// \t\tif (is_polygon_closed) {\n\t// \t\t\tthis._create_polygon_closed(core_group);\n\t// \t\t} else {\n\t// \t\t\tthis._create_polygon_open(core_group);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _create_polygon_closed(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tconst geometry = CoreGeometryUtilShape.geometry_from_points(points);\n\t// \tconst object = this.create_object(geometry);\n\t// \tthis._objects.push(object);\n\t// }\n\n\t// _create_polygon_open(core_group:CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tlet positions:number[][] = [];\n\t// \tconst indices:number[] = [];\n\t// \tpoints.forEach((point, i) => {\n\t// \t\tpoint.position().toArray(positions, i * 3);\n\t// \t\t// positions.push(point.position().toArray());\n\n\t// \t\tif (i > 0) {\n\t// \t\t\tindices.push(i - 1);\n\t// \t\t\tindices.push(i);\n\t// \t\t}\n\t// \t});\n\n\t// \tif (points.length > 2 && this.pv.connect_to_last_point) {\n\t// \t\tpositions.push(points[0].position().toArray());\n\t// \t\tindices.push(lodash_last(indices));\n\t// \t\tindices.push(0);\n\t// \t}\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new BufferGeometry();\n\t// \tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \tthis._objects.push(object);\n\t// }\n}\n","import lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Triangle} from 'three/src/math/Triangle';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferGeometry, Triangle, Vector2, Vector3}\nimport {CorePoint} from './Point';\nimport {CoreGeometry} from './Geometry';\nimport {CoreMath} from '../math/_Module';\n// import {CoreInterpolate} from '../Math/Interpolate'\n\ninterface FaceLike {\n\ta: number;\n\tb: number;\n\tc: number;\n}\n\ntype CorePointArray3 = [CorePoint, CorePoint, CorePoint];\ntype Vector3Array2 = [Vector3, Vector3];\ntype Vector3Array3 = [Vector3, Vector3, Vector3];\n\nexport class CoreFace {\n\t_geometry: BufferGeometry;\n\t_points: CorePointArray3 | undefined;\n\t_triangle: Triangle | undefined;\n\t_positions: Vector3Array3 | undefined;\n\t_deltas: Vector3Array2 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, private _index: number) {\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\tget index() {\n\t\treturn this._index;\n\t}\n\tget points() {\n\t\treturn (this._points = this._points || this._get_points());\n\t}\n\tprivate _get_points(): CorePointArray3 {\n\t\tconst index_array = this._geometry.index?.array || [];\n\t\tconst start = this._index * 3;\n\t\treturn [\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 0]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 1]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 2]),\n\t\t];\n\t}\n\tget positions() {\n\t\treturn (this._positions = this._positions || this._get_positions());\n\t}\n\tprivate _get_positions(): Vector3Array3 {\n\t\tconst points = this.points;\n\t\treturn [points[0].position(), points[1].position(), points[2].position()];\n\t}\n\tget triangle() {\n\t\treturn (this._triangle = this._triangle || this._get_triangle());\n\t}\n\tprivate _get_triangle(): Triangle {\n\t\tconst positions = this.positions;\n\t\treturn new Triangle(positions[0], positions[1], positions[2]);\n\t}\n\tget deltas() {\n\t\treturn (this._deltas = this._deltas || this._get_deltas());\n\t}\n\tprivate _get_deltas(): Vector3Array2 {\n\t\treturn [this.positions[1].clone().sub(this.positions[0]), this.positions[2].clone().sub(this.positions[0])];\n\t}\n\n\tget area(): number {\n\t\treturn this.triangle.getArea();\n\t}\n\tcenter(target: Vector3) {\n\t\tconst positions = this.positions;\n\t\ttarget.x = (positions[0].x + positions[1].x + positions[2].x) / 3;\n\t\ttarget.y = (positions[0].y + positions[1].y + positions[2].y) / 3;\n\t\ttarget.z = (positions[0].z + positions[1].z + positions[2].z) / 3;\n\n\t\treturn target;\n\t}\n\n\trandom_position(seed: number) {\n\t\tlet weights = [CoreMath.rand_float(seed), CoreMath.rand_float(seed * 6541)];\n\n\t\tif (weights[0] + weights[1] > 1) {\n\t\t\tweights[0] = 1 - weights[0];\n\t\t\tweights[1] = 1 - weights[1];\n\t\t}\n\n\t\treturn this.positions[0]\n\t\t\t.clone()\n\t\t\t.add(this.deltas[0].clone().multiplyScalar(weights[0]))\n\t\t\t.add(this.deltas[1].clone().multiplyScalar(weights[1]));\n\t}\n\t// random_position(seed: number){\n\t// \tlet weights = [\n\t// \t\tCoreMath.rand_float(seed),\n\t// \t\tCoreMath.rand_float(seed*524),\n\t// \t\tCoreMath.rand_float(seed*4631)\n\t// \t]\n\t// \tconst sum = lodash_sum(weights)\n\t// \tweights = weights.map(w=>w/sum)\n\t// \tconst pos = new Vector3()\n\t// \tlet positions = this.positions().map((p,i)=> p.multiplyScalar(weights[i]))\n\t// \tpositions.forEach(p=>{\n\t// \t\tpos.add(p)\n\t// \t})\n\t// \treturn pos\n\t// }\n\n\tattrib_value_at_position(attrib_name: string, position: Vector3) {\n\t\t// const weights = CoreInterpolate._weights_from_3(position, this._positions)\n\t\tconst barycentric_coordinates = new Vector3();\n\t\tthis.triangle.getBarycoord(position, barycentric_coordinates);\n\t\tconst weights = barycentric_coordinates.toArray();\n\n\t\tconst attrib = this._geometry.attributes[attrib_name];\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst point_values = this.points.map((point) => point.attrib_value(attrib_name));\n\n\t\tlet new_attrib_value;\n\t\tlet sum;\n\t\tlet index = 0;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tsum += point_value * weights[index];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tconst weighted_value = point_value.multiplyScalar(weights[index]);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\tsum.add(weighted_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum = weighted_value;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t}\n\t\t}\n\t\treturn new_attrib_value;\n\t}\n\n\tstatic interpolated_value(\n\t\tgeometry: BufferGeometry,\n\t\tface: FaceLike,\n\t\tintersect_point: Vector3,\n\t\tattrib: BufferAttribute\n\t) {\n\t\t// let point_index, i, sum\n\t\tconst point_indices = [face.a, face.b, face.c];\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_attrib_array = position_attrib.array;\n\t\tconst point_positions = point_indices.map(\n\t\t\t(point_index) =>\n\t\t\t\tnew Vector3(\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 0],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 1],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 2]\n\t\t\t\t)\n\t\t);\n\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst attrib_array = attrib.array;\n\t\tlet attrib_values: NumericAttribValue[] = [];\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tattrib_values = point_indices.map((point_index) => attrib_array[point_index]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) => new Vector2(attrib_array[point_index * 2 + 0], attrib_array[point_index * 2 + 1])\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) =>\n\t\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 0],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 1],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 2]\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst dist_to_points = point_indices.map((point_index, i) => intersect_point.distanceTo(point_positions[i]));\n\n\t\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-points\n\t\t// TODO: replace this with Core.Math.Interpolate\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_points[0] * dist_to_points[1],\n\t\t\tdist_to_points[0] * dist_to_points[2],\n\t\t\tdist_to_points[1] * dist_to_points[2],\n\t\t]);\n\n\t\tconst weights = [\n\t\t\t(dist_to_points[1] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[1]) / distance_total,\n\t\t];\n\n\t\tlet new_attrib_value;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tnew_attrib_value = lodash_sum(\n\t\t\t\t\tpoint_indices.map((point_indx, i) => weights[i] * (attrib_values[i] as number))\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar values = point_indices.map((point_index, i) =>\n\t\t\t\t\t(attrib_values[i] as Vector3).multiplyScalar(weights[i])\n\t\t\t\t);\n\t\t\t\tnew_attrib_value = null;\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (new_attrib_value) {\n\t\t\t\t\t\tnew_attrib_value.add(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew_attrib_value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn new_attrib_value;\n\t}\n}\n","import {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute'\n\nexport class MonkeyPatcher {\n\t// this allows cloning of geometries containing InterleavedBufferAttribute such as soldier.glb\n\tstatic patch(attribute: InterleavedBufferAttribute) {\n\t\tObject.assign(attribute, {\n\t\t\tclone: function() {\n\t\t\t\treturn new InterleavedBufferAttribute(\n\t\t\t\t\tattribute.data.clone(),\n\t\t\t\t\tattribute.itemSize,\n\t\t\t\t\tattribute.offset,\n\t\t\t\t\tattribute.normalized\n\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Object3D} from 'three/src/core/Object3D'\n// import {Group} from 'three/src/objects/Group'\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Box3} from 'three/src/math/Box3';\nimport {TypedContainer} from './_Base';\nimport {CoreGroup} from '../../core/geometry/Group';\n// import {CoreObject} from '../../core/geometry/Object'\nimport {CoreGeometry} from '../../core/geometry/Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {ContainableMap} from './utils/ContainableMap';\n// import {CoreConstant} from '../../core/geometry/Constant'\n\n// const CoreGeometryGroup = CoreGroup\n\n// export type RequestContainerGeometryCallback = (container: Geometry)=>void\n\n// interface GroupOptions {\n// \tclone?: boolean\n// }\n// interface BooleanByString {\n// \t[propName: string]: boolean\n// }\nexport class GeometryContainer extends TypedContainer<ContainableMap['GEOMETRY']> {\n\t// protected _group: Group = new Group()\n\t// private _objects_by_uuid: BooleanByString = {}\n\t// protected _content: Object3D[] = []\n\t// protected _core_group: CoreGroup | null;\n\n\t// _points_count: number | null;\n\t// _bounding_box: Box3 | null;\n\n\t// constructor() {\n\t// \tsuper();\n\t// \t// this._materials = [];\n\t// }\n\n\t// _post_set_content() {\n\t// \tthis._core_group = this._core_group || new CoreGroup();\n\t// \tthis._core_group.touch();\n\t// \tthis._core_group.set_objects(this._content);\n\t// }\n\tset_objects(objects: Object3D[]) {}\n\n\t// clone_content(){\n\t// \treturn this._content.map(object=>CoreObject.clone(object))\n\t// }\n\t// core_content(): CoreGroup | null {\n\t// \treturn this._core_group; //= this._core_group || this._create_core_group()\n\t// }\n\tcore_content_cloned(): CoreGroup | undefined {\n\t\tif (this._content) {\n\t\t\treturn this._content.clone();\n\t\t}\n\t}\n\t// private _create_core_group(){\n\t// \tif(this._content){\n\t// \t\tconst core_group = new CoreGroup()\n\t// \t\tcore_group.set_objects(this._content)\n\t// \t\treturn core_group\n\t// \t}\n\t// }\n\t// reset_caches() {\n\t// \tconsole.log('reset cache');\n\t// \t// this._content = null;\n\t// \t// this._points_count = null;\n\t// \t// this._bounding_box = null;\n\t// }\n\t// _default_content() {\n\t// \treturn new CoreGroup();\n\t// }\n\n\t// set_geometry: (geometry)->\n\t// \tif @_content?\n\t// \t\t@_content.dispose()\n\t// \tthis.set_content(geometry)\n\t// has_group: ->\n\t// \tthis.has_content()\n\t// group(options?: GroupOptions): Group | null{\n\t// \tlet src_group;\n\t// \tif (options == null) { options = {}; }\n\t// \tif ((options['clone'] == null)) {\n\t// \t\toptions['clone'] = true;\n\t// \t}\n\n\t// \tlet new_group = null;\n\t// \tif ((src_group = this.content()) != null) {\n\t// \t\tif (options['clone'] === true) {\n\t// \t\t\tnew_group = CoreGroup.clone(src_group);\n\t// \t\t} else {\n\t// \t\t\tnew_group = src_group;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn new_group;\n\t// }\n\n\t// group_wrapper(options){\n\t// \t// if (options == null) { options = {}; }\n\t// \t// return new CoreGroup(this.group(options));\n\t// }\n\t// core_group() {\n\t// \treturn this._core_group; //this.group_wrapper(options)\n\t// }\n\tset_content(content: ContainableMap['GEOMETRY']) {\n\t\tsuper.set_content(content);\n\t}\n\t// object(options){\n\t// \tif (options == null) { options = {}; }\n\t// \treturn this.group(options);\n\t// }\n\t// _post_set_content(){\n\t// \t// const objects_to_remove = []\n\t// \t// const objects_to_add = []\n\t// \t// const new_objects_by_uuid = {}\n\t// \t// for(let object of this._content){\n\t// \t// \tif(!this._objects_by_uuid[object.uuid]){\n\t// \t// \t\tobjects_to_add.push(object)\n\t// \t// \t}\n\t// \t// \tnew_objects_by_uuid[object.uuid] = true\n\t// \t// }\n\t// \t// for(let uuid of Object.keys(this._objects_by_uuid)){\n\n\t// \t// }\n\t// \tlet child\n\t// \twhile(child = this._group.children[0]){\n\t// \t\tthis._group.remove(child)\n\t// \t}\n\t// \tfor(let object of this._content){\n\t// \t\tthis._group.add(object)\n\t// \t}\n\t// }\n\n\t//\n\t//\n\t// INFOS\n\t//\n\t//\n\t// infos() {\n\t// \tif (this._content != null) {\n\t// \t\tconst bbox = this.bounding_box();\n\t// \t\tconst center = this.center(); //bbox.min.clone().add(bbox.max).multiplyScalar(0.5)\n\t// \t\tconst size = this.size(); //bbox.max.clone().sub(bbox.min)\n\n\t// \t\tconst node = this.node();\n\t// \t\tconst part_1 = [\n\t// \t\t\t`time dependent: ${node.is_time_dependent()}`,\n\t// \t\t\t`${node.cooks_count()} cooks`,\n\t// \t\t\t`cook time: ${node.cook_time()}`,\n\t// \t\t\t`cook time with inputs: ${node.cook_time_with_inputs()}`,\n\t// \t\t\t`${this.points_count()} points`,\n\t// \t\t\t`${this.objects_count()} object(s)  (${this.objects_visible_count()} visible)`\n\t// \t\t];\n\n\t// \t\tconst part_2 = [];\n\t// \t\tconst count_by_type = this.objects_count_by_type();\n\t// \t\tObject.keys(count_by_type).forEach((type)=>{\n\n\t// \t\t\tconst count = count_by_type[type];\n\t// \t\t\treturn part_2.push(`${count} ${type}`);\n\t// \t\t});\n\n\t// \t\tconst vertex_attributes = this.vertex_attribute_names();\n\t// \t\tconst object_attributes = this.object_attribute_names();\n\t// \t\tpart_2.push(`vertex attributes (${vertex_attributes.length}): ${vertex_attributes.join(', ')}`);\n\t// \t\tpart_2.push(`object attributes (${object_attributes.length}): ${object_attributes.join(', ')}`);\n\n\t// \t\tconst part_3 = [\n\t// \t\t\t\"bbox:\",\n\t// \t\t\t[bbox.min.x, bbox.min.y, bbox.min.z],\n\t// \t\t\t[bbox.max.x, bbox.max.y, bbox.max.z],\n\t// \t\t\t\"center:\",\n\t// \t\t\t[center.x, center.y, center.z],\n\t// \t\t\t\"size:\",\n\t// \t\t\t[size.x, size.y, size.z],\n\t// \t\t\tthis._content\n\t// \t\t];\n\n\t// \t\treturn lodash_concat( part_1, part_2, part_3 );\n\t// \t}\n\t// }\n\n\tprivate first_object() {\n\t\tif (this._content) {\n\t\t\treturn this._content.objects()[0];\n\t\t}\n\t}\n\tprivate first_geometry(): BufferGeometry | null {\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tobjects_count(): number {\n\t\t// let count = 0\n\t\t// if(this._content){\n\t\t// \tcount = this._content.children.length\n\t\t// }\n\t\t// return count\n\t\tif (this._content) {\n\t\t\treturn this._content.objects().length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tobjects_visible_count(): number {\n\t\tlet count = 0;\n\t\tif (this._content) {\n\t\t\tcount = this._content.objects().filter((c) => c.visible).length; // lodash_filter(this._content, c=> c.visible).length;\n\t\t}\n\t\treturn count;\n\t}\n\tobjects_count_by_type() {\n\t\tconst count_by_type: Dictionary<number> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tif (count_by_type[human_type] == null) {\n\t\t\t\t\tcount_by_type[human_type] = 0;\n\t\t\t\t}\n\t\t\t\tcount_by_type[human_type] += 1;\n\t\t\t}\n\t\t}\n\t\treturn count_by_type;\n\t}\n\tobjects_names_by_type() {\n\t\tconst names_by_type: Dictionary<string[]> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tnames_by_type[human_type] = names_by_type[human_type] || [];\n\t\t\t\tnames_by_type[human_type].push(core_object.name());\n\t\t\t}\n\t\t}\n\t\treturn names_by_type;\n\t}\n\n\tvertex_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tnames = Object.keys(geometry.attributes);\n\t\t}\n\t\treturn names;\n\t}\n\tvertex_attribute_sizes_by_name() {\n\t\tlet sizes_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\tsizes_by_name[attrib_name] = attrib.itemSize;\n\t\t\t});\n\t\t}\n\t\treturn sizes_by_name;\n\t}\n\tvertex_attribute_types_by_name() {\n\t\tlet types_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tconst core_geo = new CoreGeometry(geometry);\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\ttypes_by_name[attrib_name] = core_geo.attrib_type(attrib_name);\n\t\t\t});\n\t\t}\n\t\treturn types_by_name;\n\t}\n\tobject_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\tnames = Object.keys(object.userData['attributes'] || {});\n\t\t}\n\t\treturn names;\n\t}\n\n\tpoints_count(): number {\n\t\tif (this._content) {\n\t\t\treturn this._content.points_count();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// return this._points_count != null ? this._points_count : (this._points_count = this._compute_points_count());\n\t}\n\n\t// _compute_points_count() {\n\t// \tlet points_count = 0;\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\tobject.traverse((object) => {\n\t// \t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t// \t\t\t\tif (geometry) {\n\t// \t\t\t\t\tpoints_count += CoreGeometry.points_count(geometry);\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// \treturn points_count;\n\t// }\n\t//@_content.userData['points_count']\n\t//Core.Geometry.Geometry.points_count(@_content)\n\t// count = 0\n\t// if (position = @_content.getAttribute('position'))?\n\t// \tif (array = position.array)?\n\t// \t\tcount = array.length / 3\n\n\t// count\n\n\t// points_for_geometry: (geometry)->\n\t// \tCore.Geometry.Geometry.points_from_geometry(geometry)\n\n\t// create_geometry_from_points: (points, index_mode)->\n\t// \tCore.Geometry.Geometry.geometry_from_points(points, index_mode)\n\n\t//\n\t//\n\t// BBOX\n\t//\n\t//\n\tbounding_box(): Box3 {\n\t\treturn this._content.bounding_box();\n\t\t// return this._bounding_box != null ? this._bounding_box : (this._bounding_box = this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\treturn this._content.center();\n\t\t// const center = new Vector3();\n\t\t// this.bounding_box().getCenter(center);\n\t\t// return center;\n\t}\n\tsize(): Vector3 {\n\t\treturn this._content.size();\n\t\t// const size = new Vector3();\n\t\t// this.bounding_box().getSize(size);\n\t\t// return size;\n\t}\n\n\t// private _compute_bounding_box() {\n\t// \tconst bbox = new Box3();\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\t// const box = new Box3()\n\t// \t\t\t// bbox.setFromObject(object);\n\t// \t\t\tbbox.expandByObject(object);\n\t// \t\t}\n\t// \t}\n\t// \treturn bbox;\n\t// }\n}\n","import {TypedSopNode} from './_Base';\n// import {CoreTransform} from '../../../Core/Transform';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// interface ActionsByName {\n// \t[propName: string]: THREE.AnimationClip;\n// }\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nclass AnimationCopySopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new AnimationCopySopParamsConfig();\n\nexport class AnimationCopySopNode extends TypedSopNode<AnimationCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy animation to', 'geometry to copy animation from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_target = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst src_object = core_group_src.objects()[0] as Object3DWithAnimation;\n\t\tconst target_object = core_group_target.objects()[0] as Object3DWithAnimation;\n\n\t\tconst src_animations = src_object.animations;\n\t\tif (src_animations) {\n\t\t\ttarget_object.animations = src_animations.map((a) => a.clone());\n\t\t\tthis.set_core_group(core_group_target);\n\t\t} else {\n\t\t\tthis.states.error.set('no animation found');\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport lodash_isArray from 'lodash/isArray';\n// import {Object3D} from 'three/src/core/Object3D';\nimport {AnimationMixer} from 'three/src/animation/AnimationMixer';\n// import {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nimport {ParamType} from '../../poly/ParamType';\nimport {AnimationAction} from 'three/src/animation/AnimationAction';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {Material} from 'three/src/materials/Materials';\nimport {MaterialWithSkinning} from '../../../core/geometry/Material';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseNodeType} from '../_Base';\nclass AnimationMixerSopParamsConfig extends NodeParamsConfig {\n\ttime = ParamConfig.FLOAT('$T', {range: [0, 10]});\n\tprepare = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tAnimationMixerSopNode.PARAM_CALLBACK_prepare(node as AnimationMixerSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new AnimationMixerSopParamsConfig();\n\nexport class AnimationMixerSopNode extends TypedSopNode<AnimationMixerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_mixer';\n\t}\n\n\t_previous_time: number | null = null;\n\t_mixer: AnimationMixer | null = null;\n\t_actions_by_name: Dictionary<AnimationAction> = {};\n\t_values_by_param_name: Dictionary<number> = {};\n\t// _mixer_used_once: boolean = false\n\t_animation_target: Object3DWithAnimation | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be animated'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tif (!this._mixer) {\n\t\t\tthis.create_mixer(input_contents[0]);\n\t\t} else {\n\t\t\tthis._update_mixer();\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate create_mixer(core_group: CoreGroup) {\n\t\tthis._animation_target = core_group.objects()[0] as Object3DWithAnimation;\n\t\tthis._mixer = new AnimationMixer(this._animation_target);\n\n\t\tthis._remove_spare_params();\n\t\tthis._actions_by_name = {};\n\n\t\tif (this._animation_target.animations) {\n\t\t\tthis._animation_target.animations.forEach((animation, i) => {\n\t\t\t\tconst param_name = animation.name;\n\t\t\t\tconst previous_value = this._values_by_param_name[param_name];\n\t\t\t\tlet default_value = previous_value;\n\t\t\t\tif (default_value == null) {\n\t\t\t\t\tdefault_value = i == 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tconst param = this.add_param(ParamType.FLOAT, param_name, default_value, {spare: true});\n\t\t\t\tif (param) {\n\t\t\t\t\tconst prev_value = this._values_by_param_name[param_name];\n\t\t\t\t\tif (prev_value) {\n\t\t\t\t\t\tparam.set(prev_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._mixer) {\n\t\t\t\t\tconst action = this._mixer.clipAction(animation);\n\t\t\t\t\tthis._actions_by_name[animation.name] = action;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\n\t\tObject.keys(this._actions_by_name).forEach((name) => {\n\t\t\tthis._actions_by_name[name].play();\n\t\t});\n\n\t\t// set material skinning\n\t\tconst materials_by_id: Dictionary<Material> = {};\n\t\tthis._animation_target.traverse((object3d: Object3D) => {\n\t\t\tconst child = object3d as Mesh;\n\t\t\tif (child.material) {\n\t\t\t\tif (!lodash_isArray(child.material)) {\n\t\t\t\t\tmaterials_by_id[child.material.uuid] = child.material;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.keys(materials_by_id).forEach((uuid) => {\n\t\t\tconst material = materials_by_id[uuid] as MaterialWithSkinning;\n\t\t\tmaterial.skinning = true;\n\t\t\tmaterial.morphTargets = true;\n\t\t});\n\t\tthis._previous_time = null;\n\t\tthis._update_mixer();\n\t\tthis._update_mixer_weights(); // might be redundant with _update_mixer, but ensures this is done on load\n\t\tthis.set_object(this._animation_target);\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tthis._values_by_param_name = {};\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tconst names_to_delete: string[] = [];\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get_float(param_name);\n\t\t\tif (param) {\n\t\t\t\tthis._values_by_param_name[param_name] = param.value;\n\t\t\t\tnames_to_delete.push(param_name);\n\t\t\t}\n\t\t});\n\t\tif (names_to_delete.length > 0) {\n\t\t\tthis.params.update_params({names_to_delete: names_to_delete});\n\t\t}\n\t}\n\n\tprivate _update_mixer() {\n\t\tif (this.pv.time != this._previous_time) {\n\t\t\tthis._update_mixer_time();\n\t\t} else {\n\t\t\tthis._update_mixer_weights();\n\t\t}\n\t}\n\tprivate _update_mixer_time() {\n\t\tconst delta = this.pv.time - (this._previous_time || 0);\n\t\tif (this._mixer) {\n\t\t\tthis._mixer.update(delta);\n\t\t}\n\t\tthis._previous_time = this.pv.time;\n\t}\n\n\tprivate _update_mixer_weights() {\n\t\tfor (let name of Object.keys(this._actions_by_name)) {\n\t\t\tconst action = this._actions_by_name[name];\n\t\t\tconst cache_value = this.params.get_float(name).value;\n\t\t\tif (cache_value != null) {\n\t\t\t\taction.setEffectiveWeight(cache_value);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_prepare(node: AnimationMixerSopNode, param: BaseParamType) {\n\t\tnode.prepare_animation_mixer();\n\t}\n\tasync prepare_animation_mixer() {\n\t\tthis._mixer = null;\n\t\tconst container = await this.io.inputs.eval_required_input(0);\n\t\tthis.create_mixer(container.core_content_cloned());\n\t\tthis.set_dirty();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribAddMultSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tpre_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n\tmult = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tpost_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n}\nconst ParamsConfig = new AttribAddMultSopParamsConfig();\n\nexport class AttribAddMultSopNode extends TypedSopNode<AttribAddMultSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_add_mult';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tthis._update_attrib(attrib_name, geometry);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _update_attrib(attrib_name: string, geometry: BufferGeometry) {\n\t\tconst attribute = geometry.getAttribute(attrib_name) as BufferAttribute;\n\t\tif (attribute) {\n\t\t\tconst values = attribute.array as number[];\n\n\t\t\tconst pre_add = this.pv.pre_add;\n\t\t\tconst mult = this.pv.mult;\n\t\t\tconst post_add = this.pv.post_add;\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i];\n\t\t\t\tvalues[i] = (value + pre_add) * mult + post_add;\n\t\t\t}\n\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\tattribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nclass AttribCopySopParamsConfig extends NodeParamsConfig {\n\t// class = ParamConfig.INTEGER(CoreConstant.ATTRIB_CLASS.VERTEX, {\n\t// \tmenu: {\n\t// \t\tentries: [\n\t// \t\t\t{name: 'vertex', value: CoreConstant.ATTRIB_CLASS.VERTEX},\n\t// \t\t\t{name: 'object', value: CoreConstant.ATTRIB_CLASS.OBJECT},\n\t// \t\t],\n\t// \t},\n\t// })\n\tname = ParamConfig.STRING('');\n\ttnew_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {tnew_name: 1}});\n\t// to_all_components = ParamConfig.BOOLEAN(1)\n\t// src_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n\t// dest_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n}\nconst ParamsConfig = new AttribCopySopParamsConfig();\n\n// TODO: attrib copy should handle string attributes\nexport class AttribCopySopNode extends TypedSopNode<AttribCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy attributes to', 'geometry to copy attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_dest = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst attrib_names = core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tthis.copy_vertex_attribute_between_core_groups(core_group_dest, core_group_src, attrib_name);\n\t\t}\n\n\t\t// switch (this.pv.class) {\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t// \t\tthis.copy_vertex_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t// \t\tthis.copy_object_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// }\n\n\t\treturn this.set_core_group(core_group_dest);\n\t}\n\n\tprivate copy_vertex_attribute_between_core_groups(\n\t\tcore_group_dest: CoreGroup,\n\t\tcore_group_src: CoreGroup,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_objects = core_group_src.objects();\n\t\tconst dest_objects = core_group_dest.objects();\n\n\t\tif (dest_objects.length > src_objects.length) {\n\t\t\tthis.states.error.set('second input does not have enough objects to copy attributes from');\n\t\t} else {\n\t\t\tfor (let i = 0; i < dest_objects.length; i++) {\n\t\t\t\tconst dest_geometry = dest_objects[i].geometry;\n\t\t\t\tconst src_geometry = dest_objects[i].geometry;\n\t\t\t\tthis.copy_vertex_attribute_between_geometries(dest_geometry, src_geometry, attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\tprivate copy_vertex_attribute_between_geometries(\n\t\tdest_geometry: BufferGeometry,\n\t\tsrc_geometry: BufferGeometry,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_attrib = src_geometry.getAttribute(attrib_name);\n\t\tif (src_attrib) {\n\t\t\tconst size = src_attrib.itemSize;\n\t\t\tconst src_points_count = src_geometry.getAttribute('position').array.length / 3;\n\t\t\tconst dest_points_count = dest_geometry.getAttribute('position').array.length / 3;\n\t\t\tif (dest_points_count > src_points_count) {\n\t\t\t\tthis.states.error.set('not enough points in second input');\n\t\t\t}\n\t\t\tconst src_array = src_attrib.array as number[];\n\t\t\tconst sub_array = src_array.slice(0, dest_points_count * size);\n\t\t\tconst dest_name = this.pv.tnew_name ? this.pv.new_name : attrib_name;\n\t\t\tdest_geometry.setAttribute(dest_name, new Float32BufferAttribute(sub_array, size));\n\t\t} else {\n\t\t\tthis.states.error.set(`attribute '${attrib_name}' does not exist on second input`);\n\t\t}\n\t}\n\n\t// _src_value_to_all_components(src_attrib_value: NumericAttribValue, dest_attrib_size) {\n\t// \tif (lodash_isNumber(src_attrib_value)) {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value, src_attrib_value);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(src_attrib_value, src_attrib_value, src_attrib_value);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.x;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value.x, src_attrib_value.y);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(\n\t// \t\t\t\t\tsrc_attrib_value.x,\n\t// \t\t\t\t\tsrc_attrib_value.y,\n\t// \t\t\t\t\tsrc_attrib_value.z || src_attrib_value.y\n\t// \t\t\t\t);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _src_value_to_component(src_attrib_value, current_dest_value, src_component, dest_component) {\n\t// \tconst src_component_value = (() => {\n\t// \t\tswitch (src_component) {\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn src_attrib_value.x || src_attrib_value;\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.y;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn src_attrib_value.z;\n\t// \t\t}\n\t// \t})();\n\n\t// \tconst dest_component_name = ['x', 'y', 'z'][dest_component];\n\t// \tif (current_dest_value[dest_component_name] != null) {\n\t// \t\tcurrent_dest_value[dest_component_name] = src_component_value;\n\t// \t\treturn current_dest_value;\n\t// \t} else {\n\t// \t\tconst src_component_name = ['x', 'y', 'z'][src_component];\n\t// \t\treturn src_attrib_value[src_component_name];\n\t// \t}\n\t// }\n\n\t// TODO: find a way to use the point method, but have the group api allow easy switch\n\t// private  copy_object_attribute(core_group_dest: CoreGroup, core_group_src:CoreGroup) {\n\t// \t// const objects_dest = core_group_dest.objects();\n\t// \t// const objects_src = core_group_src.objects();\n\n\t// \t//attribute_names = core_group_src.attrib_names_matching_mask(@_param_name)\n\n\t// \t//lodash_each attribute_names, (attrib_name) =>\n\t// \tconst attrib_name = this.pv.name;\n\n\t// \tif (!core_group_dest.has_attrib(attrib_name)) {\n\t// \t\tconst attrib_size = core_group_src.attrib_size(attrib_name);\n\t// \t\tcore_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t// \t}\n\n\t// \tlodash_each(points_dest, (point_dest, i) => {\n\t// \t\tlet point_src;\n\t// \t\tif ((point_src = points_src[i]) != null) {\n\t// \t\t\tconst attrib_value = point_src.attrib_value(attrib_name);\n\t// \t\t\tpoint_dest.set_attrib_value(attrib_name, attrib_value);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedSopNode} from './_Base';\nimport {\n\tCoreConstant,\n\tAttribClassMenuEntries,\n\tAttribTypeMenuEntries,\n\tAttribClass,\n\tAttribType,\n} from '../../../core/geometry/Constant';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const VALUE_PARAM = {\n// \tVALUEX: 'valuex',\n// \tVALUE: 'value',\n// \tSTRING: 'string',\n// };\n// const DEFAULT_VALUE = {\n// \tvaluex: 0,\n// \tvalue: [0, 0, 0],\n// \tstring: '',\n// };\n// type COMPONENT_INDEX = keyof Vector4Like;\n// const COMPONENT_INDEX: Array<COMPONENT_INDEX> = ['x', 'y', 'z', 'w'];\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribCreateSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\ttype = ParamConfig.INTEGER(AttribType.NUMERIC, {\n\t\tmenu: {\n\t\t\tentries: AttribTypeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('new_attrib');\n\tsize = ParamConfig.INTEGER(1, {\n\t\trange: [1, 4],\n\t\trange_locked: [true, true],\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC},\n\t});\n\tvalue1 = ParamConfig.FLOAT(0, {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue2 = ParamConfig.VECTOR2([0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 2},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue3 = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 3},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue4 = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 4},\n\t\texpression: {for_entities: true},\n\t});\n\tstring = ParamConfig.STRING('', {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.STRING},\n\t\texpression: {for_entities: true},\n\t});\n}\nconst ParamsConfig = new AttribCreateSopParamsConfig();\nexport class AttribCreateSopNode extends TypedSopNode<AttribCreateSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_create';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _w_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.name && lodash_trim(this.pv.name) != '') {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.add_point_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.add_object_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('attribute name is not valid');\n\t\t}\n\t}\n\n\tasync add_point_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tconst core_object = core_objects[i];\n\t\t\tswitch (this.pv.type) {\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\t\tawait this.add_numeric_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\t\tawait this.add_string_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync add_object_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects_from_group(this.pv.group);\n\t\tswitch (this.pv.type) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\tawait this.add_numeric_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\tawait this.add_string_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tasync add_numeric_attribute_to_points(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\n\t\tif (param.has_expression()) {\n\t\t\tif (!core_geometry.has_attrib(this.pv.name)) {\n\t\t\t\tcore_geometry.add_numeric_attrib(this.pv.name, this.pv.size, param.value);\n\t\t\t}\n\n\t\t\tconst geometry = core_geometry.geometry();\n\t\t\tconst array = geometry.getAttribute(this.pv.name).array as number[];\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\t\tarray[point.index * this.pv.size + 0] = value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tconst tmp_arrays = new Array(params.length);\n\t\t\t\tlet component_param;\n\n\t\t\t\tconst arrays_by_geometry_uuid = [\n\t\t\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._w_arrays_by_geometry_uuid,\n\t\t\t\t];\n\n\t\t\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\t\t\tcomponent_param = params[i];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\ttmp_arrays[i] = this._init_array_if_required(\n\t\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\t\tarrays_by_geometry_uuid[i],\n\t\t\t\t\t\t\tpoints.length\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(point, value) => {\n\t\t\t\t\t\t\t\t// array[point.index()*this.pv.size+i] = value\n\t\t\t\t\t\t\t\ttmp_arrays[i][point.index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value = component_param.value;\n\t\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t\tarray[point.index * this.pv.size + i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// commit the tmp values\n\t\t\t\tfor (let j = 0; j < tmp_arrays.length; j++) {\n\t\t\t\t\tconst tmp_array = tmp_arrays[j];\n\t\t\t\t\tif (tmp_array) {\n\t\t\t\t\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\t\t\t\t\tarray[i * this.pv.size + j] = tmp_array[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// const value = await param.eval_p();\n\t\t\tcore_object.add_numeric_vertex_attrib(this.pv.name, this.pv.size, param.value);\n\t\t}\n\t}\n\n\tasync add_numeric_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\t\tif (param.has_expression()) {\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tlet values_by_core_object_index: Dictionary<NumericAttribValueAsArray> = {};\n\t\t\t\t// for (let component_param of params) {\n\t\t\t\t// \tvalues.push(component_param.value);\n\t\t\t\t// }\n\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\tvalues_by_core_object_index[core_object.index] = (<unknown>[]) as NumericAttribValueAsArray;\n\t\t\t\t}\n\t\t\t\tfor (let component_index = 0; component_index < params.length; component_index++) {\n\t\t\t\t\tconst component_param = params[component_index];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = component_param.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\t\tconst value = values_by_core_object_index[core_object.index];\n\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// let value = await param.eval_p();\n\t\t\t// if (this.pv.size > 1) {\n\t\t\t// \tvalue = this._convert_object_numeric_value(value);\n\t\t\t// }\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _convert_object_numeric_value(value: Vector4) {\n\t// \tlet converted_value;\n\t// \tswitch (this.pv.size) {\n\t// \t\tcase 1: {\n\t// \t\t\tconverted_value = value.x;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 2: {\n\t// \t\t\tconverted_value = new Vector2(value.x, value.y);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 3: {\n\t// \t\t\tconverted_value = new Vector3(value.x, value.y, value.z);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 4: {\n\t// \t\t\tconverted_value = new Vector4(value.x, value.y, value.z, value.w);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn converted_value;\n\t// }\n\n\tasync add_string_attribute_to_points(core_object: CoreObject) {\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\t\tconst param = this.p.string;\n\n\t\tconst string_values: string[] = [];\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tstring_values[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tstring_values.push(param.value);\n\t\t}\n\n\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(string_values);\n\t\tcore_object.core_geometry().set_indexed_attribute(this.pv.name, index_data['values'], index_data['indices']);\n\t}\n\n\tasync add_string_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = this.p.string;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t\t// this.context().set_entity(object);\n\n\t\t// const core_object = new CoreObject(object);\n\n\t\t// this.param('string').eval(val => {\n\t\t// \tcore_object.add_attribute(this.pv.name, val);\n\t\t// });\n\t}\n\n\t//\n\t//\n\t// PRIVATE\n\t//\n\t//\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\t// async _eval_params_for_entities(entities){\n\t// \t// let p = Promise.resolve(); // Q() in q\n\n\t// \tconst param = this._value_param();\n\n\t// \tif (param.has_expression()) {\n\t// \t\t// const iterator = new CoreIterator()\n\t// \t\t// await iterator.start_with_array(entities, (element, index)=>{\n\n\t// \t\t// })\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tawait this._eval_param_for_entity(param, entity);\n\t// \t\t}\n\n\t// \t\t// entities.forEach((entity, index)=> {\n\t// \t\t// \tp = p.then(() => {\n\t// \t\t// \t\treturn this._eval_param_for_entity(param, entity);\n\t// \t\t// \t});\n\t// \t\t// });\n\t// \t} else {\n\t// \t\tconst val = await param.eval_p();\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tthis._values.push(val);\n\t// \t\t}\n\t// \t\t// entities.forEach(entity=> {\n\t// \t\t// \treturn this._values.push(val);\n\t// \t\t// });\n\t// \t}\n\n\t// \t// return p;\n\t// }\n\n\t// async _eval_param_for_entity(value_param, entity){\n\t// \tthis.context().set_entity(entity);\n\n\t// \tlet val = await value_param.eval_p()\n\n\t// \t // TODO: optimize. pass directly to the entity instead\n\t// \tif(val.clone){\n\t// \t\tval = val.clone()\n\t// \t}\n\t// \tthis._values.push(val);\n\t// }\n\n\t// private _default_attrib_value() {\n\t// \treturn DEFAULT_VALUE[this._value_param_name()];\n\t// }\n\n\t// private _value_param_name() {\n\t// \tif (this.pv.type == CoreConstant.ATTRIB_TYPE.NUMERIC) {\n\t// \t\tif (this.pv.size == 1) {\n\t// \t\t\treturn VALUE_PARAM.VALUEX;\n\t// \t\t} else {\n\t// \t\t\treturn VALUE_PARAM.VALUE;\n\t// \t\t}\n\t// \t} else {\n\t// \t\treturn VALUE_PARAM.STRING;\n\t// \t}\n\t// }\n\t// private _value_param() {\n\t// \treturn this.params.get(this._value_param_name());\n\t// }\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\t// private _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t// \tfor (let i = 0; i < tmp_array.length; i++) {\n\t// \t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribDeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribDeleteSopParamsConfig();\n\nexport class AttribDeleteSopNode extends TypedSopNode<AttribDeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_delete';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.delete_vertex_attribute(core_group, attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.delete_object_attribute(core_group, attrib_name);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tdelete_vertex_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tif (child.geometry) {\n\t\t\t\t\tconst core_geometry = new CoreGeometry(child.geometry as BufferGeometry);\n\t\t\t\t\tcore_geometry.delete_attribute(attrib_name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdelete_object_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tlet index = 0;\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tconst core_object = new CoreObject(child, index);\n\t\t\t\tcore_object.delete_attribute(attrib_name);\n\t\t\t\tindex++;\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribNormalizeSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tchange_name = ParamConfig.BOOLEAN(false);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribNormalizeSopParamsConfig();\n\nexport class AttribNormalizeSopNode extends TypedSopNode<AttribNormalizeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_normalize';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._normalize_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_normalize_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet normalized_values: NumericAttribValue[] = [];\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\t// if (this._param_only_integer_values) {\n\t\t\t\t// \tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t// \tconst index_by_value = {};\n\t\t\t\t// \tlodash_each(sorted_values, (sorted_value, i)=> index_by_value[sorted_value] = i);\n\t\t\t\t// \tnormalized_values = lodash_map(values, value=> index_by_value[value]);\n\n\t\t\t\t// } else {\n\t\t\t\tmin = lodash_min(values);\n\t\t\t\tmax = lodash_max(values);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_max\", max)\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypedSopNode} from './_Base';\nimport {AttribClass, AttribClassMenuEntries} from '../../../core/geometry/Constant';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreString} from '../../../core/String';\n\nexport enum AttribPromoteMode {\n\tMIN = 0,\n\tMAX = 1,\n\tFIRST_FOUND = 3,\n}\n// const PROMOTE_MODE:PROMOTE_MODE = {\n// \tMIN: 0,\n// \tMAX: 1,\n// \t// AVERAGE: 2,\n// \tFIRST_FOUND: 3,\n// };\nconst PromoteModeMenuEntries = [\n\t{name: 'min', value: AttribPromoteMode.MIN},\n\t{name: 'max', value: AttribPromoteMode.MAX},\n\t{name: 'first_found', value: AttribPromoteMode.FIRST_FOUND},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribPromoteSopParamsConfig extends NodeParamsConfig {\n\tclass_from = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tclass_to = ParamConfig.INTEGER(AttribClass.OBJECT, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tmode = ParamConfig.INTEGER(AttribPromoteMode.MIN, {\n\t\tmenu: {\n\t\t\tentries: PromoteModeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribPromoteSopParamsConfig();\n\nexport class AttribPromoteSopNode extends TypedSopNode<AttribPromoteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_promote';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('sort-amount-up');\n\t}\n\n\tcreate_params() {}\n\n\tprivate _core_group: CoreGroup | undefined;\n\tprivate _core_object: CoreObject | undefined;\n\tprivate _values_per_attrib_name: Dictionary<number[]> = {};\n\tprivate _filtered_values_per_attrib_name: Dictionary<number | undefined> = {};\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._core_group = input_contents[0];\n\n\t\tthis._values_per_attrib_name = {};\n\t\tthis._filtered_values_per_attrib_name = {};\n\n\t\tfor (let core_object of this._core_group.core_objects()) {\n\t\t\tthis._core_object = core_object;\n\t\t\tthis.find_values();\n\t\t\tthis.filter_values();\n\t\t\tthis.set_values();\n\t\t}\n\n\t\t// switch @_param_class_from\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.VERTEX then this.promote_attribute_from_vertex()\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.OBJECT then this.promote_attribute_from_object()\n\t\tthis.set_core_group(this._core_group);\n\t}\n\n\t// private promote_attribute_from_vertex() {\n\t// \t// switch (this.pv.class_to) {\n\t// \t// \tcase AttribClass.VERTEX:\n\t// \t\t\treturn this.promote_attribute_from_vertex_to_vertex();\n\t// \t\t// case AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_vertex_to_object();\n\t// \t// }\n\t// }\n\n\t// private promote_attribute_from_object() {\n\t// \tswitch (this.pv.class_to) {\n\t// \t\tcase AttribClass.VERTEX:\n\t// \t\t// return this.promote_attribute_from_object_to_vertex();\n\t// \t\tcase AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_object_to_object();\n\t// \t}\n\t// }\n\n\t// private promote_attribute_from_vertex_to_vertex() {\n\t// \tif (this._core_group) {\n\t// \t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t// \t\tconst points = this._core_group.points();\n\t// \t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\tconst values = lodash_map(points, (point) => point.attrib_value(attrib_name));\n\t// \t\t\tconst new_value = (() => {\n\t// \t\t\t\tswitch (this.pv.mode) {\n\t// \t\t\t\t\tcase PromoteMode.MIN:\n\t// \t\t\t\t\t\treturn lodash_min(values);\n\t// \t\t\t\t\tcase PromoteMode.MAX:\n\t// \t\t\t\t\t\treturn lodash_max(values);\n\t// \t\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t// \t\t\t\t\tdefault:\n\t// \t\t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t})();\n\n\t// \t\t\tif (new_value != null) {\n\t// \t\t\t\tlodash_each(points, (point) => point.set_attrib_value(attrib_name, new_value));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate find_values() {\n\t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class_from) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\treturn this.find_values_from_points(attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\treturn this.find_values_from_object(attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_values_from_points(attrib_name: string) {\n\t\tif (this._core_object) {\n\t\t\tconst points = this._core_object.points();\n\t\t\tthis._values_per_attrib_name[attrib_name] = points.map((point) => point.attrib_value(attrib_name));\n\t\t}\n\t}\n\n\tprivate find_values_from_object(attrib_name: string) {\n\t\tthis._values_per_attrib_name[attrib_name] = [];\n\t\tif (this._core_object) {\n\t\t\tthis._values_per_attrib_name[attrib_name].push(this._core_object.attrib_value(attrib_name) as number);\n\t\t}\n\t}\n\n\tprivate filter_values() {\n\t\tconst attrib_names = Object.keys(this._values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst values = this._values_per_attrib_name[attrib_name];\n\t\t\tswitch (this.pv.mode) {\n\t\t\t\tcase AttribPromoteMode.MIN:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_min(values);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribPromoteMode.MAX:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_max(values);\n\t\t\t\t\tbreak;\n\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t\t\t\tcase AttribPromoteMode.FIRST_FOUND:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = values[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values() {\n\t\tconst attrib_names = Object.keys(this._filtered_values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst new_value = this._filtered_values_per_attrib_name[attrib_name];\n\t\t\tif (new_value != null) {\n\t\t\t\tswitch (this.pv.class_to) {\n\t\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\t\tthis.set_values_to_points(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\t\tthis.set_values_to_object(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values_to_points(attrib_name: string, new_value: NumericAttribValue) {\n\t\tif (this._core_group && this._core_object) {\n\t\t\tconst attribute_exists = this._core_group.has_attrib(attrib_name);\n\t\t\tif (!attribute_exists) {\n\t\t\t\tconst param_size = 1; // TODO: allow size with larger params\n\t\t\t\tthis._core_group.add_numeric_vertex_attrib(attrib_name, param_size, new_value);\n\t\t\t}\n\n\t\t\tconst points = this._core_object.points();\n\t\t\tpoints.forEach((point) => point.set_attrib_value(attrib_name, new_value));\n\t\t}\n\t}\n\n\tprivate set_values_to_object(attrib_name: string, new_value: NumericAttribValue) {\n\t\tthis._core_object?.set_attrib_value(attrib_name, new_value);\n\t}\n}\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribRemapSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING();\n\tramp = ParamConfig.RAMP();\n\tchange_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribRemapSopParamsConfig();\n\nexport class AttribRemapSopNode extends TypedSopNode<AttribRemapSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_remap';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._remap_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_remap_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tlet normalized_values: NumericAttribValue[] = new Array(points.length);\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tif (this.pv.only_integer_values) {\n\t\t\t\t\tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t\tconst index_by_value: Dictionary<number> = {};\n\t\t\t\t\tsorted_values.forEach((sorted_value, i) => (index_by_value[sorted_value] = i));\n\t\t\t\t\tnormalized_values = values.map((value) => index_by_value[value]);\n\t\t\t\t} else {\n\t\t\t\t\tmin = lodash_min(values);\n\t\t\t\t\tmax = lodash_max(values);\n\t\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_max\", max)\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribRenameSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\told_name = ParamConfig.STRING();\n\tnew_name = ParamConfig.STRING();\n}\nconst ParamsConfig = new AttribRenameSopParamsConfig();\n\nexport class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_rename';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// const group = input_containers[0].group();\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.rename_attrib(this.pv.old_name, this.pv.new_name, this.pv.class);\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreMath} from '../../../core/math/_Module';\nimport {CoreInterpolate} from '../../../core/math/Interpolate';\nimport {CoreOctree} from '../../../core/math/octree/Octree';\nimport {CoreIterator} from '../../../core/Iterator';\n// import lodash_sum from 'lodash/sum';\n\n// enum TransferMethod {\n// \tAUTO = 0,\n// \tARTISTIC = 1,\n// }\n// const TransferMethodMenuEntries = [\n// \t{name: 'auto', value: TransferMethod.AUTO},\n// \t{name: 'artistic', value: TransferMethod.ARTISTIC},\n// ];\n\n// const LATITUDE = 'Latitude'\n// const LONGITUDE = 'Longitude'\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribTransferSopParamsConfig extends NodeParamsConfig {\n\tsrc_group = ParamConfig.STRING();\n\tdest_group = ParamConfig.STRING();\n\tname = ParamConfig.STRING();\n\tmax_samples_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\t// method = ParamConfig.INTEGER(TransferMethod.AUTO, {\n\t// \tmenu: {\n\t// \t\tentries: TransferMethodMenuEntries,\n\t// \t},\n\t// });\n\tdistance_threshold = ParamConfig.FLOAT(1);\n\tblend_width = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new AttribTransferSopParamsConfig();\n\nexport class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_transfer';\n\t}\n\n\t_core_group_dest!: CoreGroup;\n\t_core_group_src!: CoreGroup;\n\n\t// utils\n\t_attrib_names!: string[];\n\t_octree_timestamp: number | undefined;\n\t_prev_param_src_group: string | undefined;\n\t_octree: CoreOctree | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transfer attributes to', 'geometry to transfer attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// this._group_dest = input_containers[0].group();\n\t\t// const container1 = input_containers[1];\n\n\t\tthis._core_group_dest = input_contents[0]; //new CoreGroup(this._group_dest);\n\t\tconst dest_points = this._core_group_dest.points_from_group(this.pv.dest_group);\n\n\t\t// this._group_src = input_containers[1] //container1.group({ clone: false });\n\t\tthis._core_group_src = input_contents[1]; //new CoreGroup(this._group_src);\n\n\t\tthis._attrib_names = this._core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tthis._error_if_attribute_not_found_on_second_input();\n\t\tthis._build_octree_if_required(this._core_group_src);\n\t\tthis._add_attribute_if_required();\n\n\t\tawait this._transfer_attributes(dest_points);\n\t\tthis.set_core_group(this._core_group_dest);\n\t}\n\n\t_error_if_attribute_not_found_on_second_input() {\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tif (!this._core_group_src.has_attrib(attrib_name)) {\n\t\t\t\tthis.states.error.set(`attribute '${attrib_name}' not found on second input`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _build_octree_if_required(core_group: CoreGroup) {\n\t\tconst second_input_changed =\n\t\t\tthis._octree_timestamp == null || this._octree_timestamp !== core_group.timestamp();\n\t\tconst src_group_changed = this._prev_param_src_group !== this.pv.src_group;\n\n\t\tif (src_group_changed || second_input_changed) {\n\t\t\tthis._octree_timestamp = core_group.timestamp();\n\t\t\tthis._prev_param_src_group = this.pv.src_group;\n\n\t\t\tconst points_src = this._core_group_src.points_from_group(this.pv.src_group);\n\n\t\t\tthis._octree = new CoreOctree(this._core_group_src.bounding_box());\n\t\t\tthis._octree.set_points(points_src);\n\t\t}\n\t}\n\n\tprivate _add_attribute_if_required() {\n\t\tthis._attrib_names.forEach((attrib_name) => {\n\t\t\tif (!this._core_group_dest.has_attrib(attrib_name)) {\n\t\t\t\tconst attrib_size = this._core_group_src.attrib_size(attrib_name);\n\t\t\t\tthis._core_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _transfer_attributes(dest_points: CorePoint[]) {\n\t\t// const start_time = performance.now()\n\t\tconst iterator = new CoreIterator();\n\t\tawait iterator.start_with_array(dest_points, this._transfer_attributes_for_point.bind(this));\n\t\t// for(let dest_point of dest_points){\n\n\t\t// \tthis._transfer_attributes_for_point(dest_point)\n\n\t\t// }\n\t}\n\tprivate _transfer_attributes_for_point(dest_point: CorePoint) {\n\t\tconst total_dist = this.pv.distance_threshold + this.pv.blend_width;\n\t\tconst nearest_points: CorePoint[] =\n\t\t\tthis._octree?.find_points(dest_point.position(), total_dist, this.pv.max_samples_count) || [];\n\n\t\t// test[nearest_points.length] = test[nearest_points.length] || 0\n\t\t// test[nearest_points.length] += 1\n\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tthis._interpolate_points(dest_point, nearest_points, attrib_name);\n\t\t}\n\t}\n\n\t// if @_param_draw_connections\n\t// \tlodash_each nearest_points, (nearest_point)=>\n\t// \t\t@_connection_point_pairs.push([ nearest_point.position(), dest_point.position() ])\n\n\t// if @_param_draw_connections\n\t// \tthis._draw_connections()\n\n\tprivate _interpolate_points(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t\tlet new_value: number;\n\t\t// if (this.pv.method == TransferMethod.ARTISTIC) {\n\n\t\tnew_value = CoreInterpolate.perform(\n\t\t\tpoint_dest,\n\t\t\tsrc_points,\n\t\t\tattrib_name,\n\t\t\tthis.pv.distance_threshold,\n\t\t\tthis.pv.blend_width\n\t\t);\n\t\t// } else {\n\t\t// \tnew_value = this._select(point_dest, src_points, attrib_name);\n\t\t// \tconsole.log('B new_value', new_value);\n\t\t// }\n\n\t\tif (new_value != null) {\n\t\t\tpoint_dest.set_attrib_value(attrib_name, new_value);\n\t\t}\n\t}\n\n\t// private _select(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t// \tconst src_values = [];\n\t// \tconst inverse_distances = [];\n\t// \tconst dest_position = point_dest.position();\n\t// \tconst dest_lng_lat = {lng: dest_position.x, lat: dest_position.z};\n\t// \tfor (let src_point of src_points) {\n\t// \t\t// const dist = dest_position.distanceTo(src_point.position()) //* 0.1\n\t// \t\tconst src_position = src_point.position();\n\t// \t\tconst src_lng_lat = {lng: src_position.x, lat: src_position.z};\n\t// \t\tconst dist = CoreMath.geodesic_distance(src_lng_lat, dest_lng_lat);\n\t// \t\tconst dist_squared = dist * dist;\n\t// \t\tconst attrib_value = src_point.attrib_value(attrib_name);\n\n\t// \t\tsrc_values.push(attrib_value / dist_squared);\n\t// \t\tinverse_distances.push(1 / dist_squared);\n\t// \t}\n\n\t// \tconst sum = lodash_sum(src_values) / lodash_sum(inverse_distances);\n\t// \treturn sum;\n\t// }\n\n\t// ROUND(\n\n\t// \tSUM(\n\t// \t\tValue\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\t// \t/\n\t// \tSUM(\n\t// \t\t1\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\n\t// \t,1\n\n\t// )\n\n\t// _draw_connections() {\n\t// \tlet positions = [];\n\t// \tconst indices = [];\n\n\t// \tlodash_each(this._connection_point_pairs, function(current_positions, i) {\n\n\t// \t\tpositions.push(current_positions[0].toArray());\n\t// \t\tpositions.push(current_positions[1].toArray());\n\n\t// \t\tindices.push((2 * i) + 0);\n\t// \t\treturn indices.push((2 * i) + 1);\n\t// \t});\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new THREE.BufferGeometry();\n\t// \tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \treturn this._group_dest.add(object);\n\t// }\n}\n","import lodash_max from 'lodash/max';\n// import lodash_last from 'lodash/last'\nimport lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n// import {_Math} from 'three/src/math/MathU';\n// const THREE = {Math: _Math, Vector2, Vector3}\nimport {CorePoint} from '../geometry/Point';\n\nexport class CoreInterpolate {\n\tstatic perform(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tswitch (points_src.length) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn this._interpolate_with_1_point(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src[0],\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\t// positions_src = lodash_map(points_src, (point) -> point.position())\n\t\t\t\t// values_src = lodash_map(points_src, (point) -> point.attrib_value(attrib_name))\n\t\t\t\t// position_dest = point_dest.position()\n\t\t\t\t//if positions_src.length > 3\n\t\t\t\t//\tpositions_src = positions_src.slice(0,3)\n\t\t\t\t//this._interpolate_with_3_points_max(positions_src, values_src, position_dest, dest_value)\n\t\t\t\treturn this._interpolate_with_multiple_points(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src,\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t}\n\t}\n\n\tstatic _interpolate_with_1_point(\n\t\tpoint_dest: CorePoint,\n\t\tpoint_src: CorePoint,\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tconst position_dest = point_dest.position();\n\t\tconst position_src = point_src.position();\n\t\tconst distance = position_dest.distanceTo(position_src);\n\n\t\tconst value_src = point_src.attrib_value(attrib_name);\n\t\treturn this._weighted_value_from_distance(\n\t\t\tpoint_dest,\n\t\t\tvalue_src,\n\t\t\tattrib_name,\n\t\t\tdistance,\n\t\t\tdistance_threshold,\n\t\t\tblend_with\n\t\t);\n\t}\n\n\tstatic _weight_from_distance(distance: number, distance_threshold: number, blend_with: number) {\n\t\treturn (distance - distance_threshold) / blend_with;\n\t}\n\n\tstatic _weighted_value_from_distance(\n\t\tpoint_dest: CorePoint,\n\t\tvalue_src: number,\n\t\tattrib_name: string,\n\t\tdistance: number,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tif (distance <= distance_threshold) {\n\t\t\treturn value_src;\n\t\t} else {\n\t\t\tconst value_dest = point_dest.attrib_value(attrib_name);\n\t\t\tconst blend = this._weight_from_distance(distance, distance_threshold, blend_with);\n\t\t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// switch (point_dest.attrib_size(attrib_name)) {\n\t\t\t// \tcase 1:\n\t\t\t// \t\t// const value_src_as_number = value_src as number;\n\t\t\t// \t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// \tcase 2:\n\t\t\t// \t\tconst value_src_as_vec2 = value_src as Vector2Like;\n\t\t\t// \t\treturn new Vector2(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec2.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec2.y\n\t\t\t// \t\t);\n\t\t\t// \tcase 3:\n\t\t\t// \t\tconst value_src_as_vec3 = value_src as Vector3Like;\n\t\t\t// \t\treturn new Vector3(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec3.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec3.y,\n\t\t\t// \t\t\tblend * value_dest.z + (1 - blend) * value_src_as_vec3.z\n\t\t\t// \t\t);\n\t\t\t// \tdefault:\n\t\t\t// \t\treturn 0;\n\t\t\t// }\n\t\t}\n\t}\n\n\t// @_interpolate_with_3_points_max: (positions_src, values_src, position_dest, dest_value)->\n\t// \tweights = this.weights( position_dest, positions_src )\n\t// \tinterpolated_value = lodash_sum lodash_map values_src, (src_value, i)=>\n\t// \t\tweights[i] * src_value\n\n\t// \tif dest_value?\n\t// \t\t0.5 * (dest_value + src_value)\n\t// \telse\n\t// \t\tinterpolated_value\n\n\t// weights: http://www.sidefx.com/docs/houdini/nodes/vop/pcfilter.html\n\t// w_i = 1-smooth(0, maxd*1.1, d_i);\n\t// maxd is the farthest point, and w_i is the weight for a given point at distance (d_i). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.\n\tstatic _interpolate_with_multiple_points(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\t// let new_value\n\t\t// const positions_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.position()\n\t\t// )\n\t\t// const values_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.attrib_value(attrib_name)\n\t\t// )\n\t\t// const position_dest = point_dest.position()\n\t\t// const attrib_size = point_dest.attrib_size(attrib_name);\n\n\t\t// const distances = lodash_map(positions_src, (src_position) =>\n\t\t// \tsrc_position.distanceTo(position_dest)\n\t\t// )\n\t\t// distances = distances.sort()\n\t\t// max_dist = lodash_last(distances)\n\t\t// const max_dist = distance_threshold + blend_with\n\n\t\t// const weights = lodash_map(positions_src, (src_position, i) => {\n\t\t// \tconst distance = distances[i]\n\t\t// \t//1 - Math.smootherstep(distance, 0, max_dist*1.1)\n\t\t// \treturn this._weight_from_distance(\n\t\t// \t\tdistance,\n\t\t// \t\tdistance_threshold,\n\t\t// \t\tblend_with\n\t\t// \t)\n\t\t// })\n\n\t\t// const total_weight = lodash_sum(weights)\n\n\t\t// weighted_values = lodash_map values_src, (src_value, i)->\n\t\t// \tswitch attrib_size\n\t\t// \t\twhen 1 then src_value * weights[i]\n\t\t// \t\telse\n\t\t// \t\t\tsrc_value.clone().multiplyScalar(weights[i])\n\t\tconst weighted_values_src = points_src.map((point_src) => {\n\t\t\treturn this._interpolate_with_1_point(point_dest, point_src, attrib_name, distance_threshold, blend_with);\n\t\t});\n\t\treturn lodash_max(weighted_values_src) || 0;\n\n\t\t// // TODO: we could have 2 modes of interpolation?\n\t\t// // return (new_value = (() => {\n\t\t// switch (attrib_size) {\n\t\t// \t// when 1 then lodash_sum(weighted_values_src) / values_src.length # mode 1\n\t\t// \tcase 1:\n\t\t// \t\treturn lodash_max(weighted_values_src); // mode 2\n\t\t// \tdefault:\n\t\t// \t\tthrow 'interpolation with multiple vectors not implemented yet';\n\t\t// \t// var new_vector = weighted_values_src[0].clone();\n\t\t// \t// new_vector.x = lodash_sum(lodash_map(weighted_values, 'x')) / total_weight;\n\t\t// \t// new_vector.y = lodash_sum(lodash_map(weighted_values, 'y')) / total_weight;\n\t\t// \t// if (new_vector.z != null) {\n\t\t// \t// \tnew_vector.z = lodash_sum(lodash_map(weighted_values, 'z')) / total_weight;\n\t\t// \t// }\n\t\t// \t// return new_vector;\n\t\t// }\n\t\t// })())\n\t}\n\n\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-positions\n\tstatic weights(current_position: Vector3, other_positions: Vector3[]) {\n\t\tswitch (other_positions.length) {\n\t\t\tcase 1:\n\t\t\t\treturn 1;\n\t\t\tcase 2:\n\t\t\t\treturn this._weights_from_2(current_position, other_positions);\n\t\t\tdefault:\n\t\t\t\tother_positions = other_positions.slice(0, 3);\n\t\t\t\treturn this._weights_from_3(current_position, other_positions);\n\t\t}\n\t}\n\n\tstatic _weights_from_2(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum(dist_to_positions);\n\n\t\treturn [dist_to_positions[1] / distance_total, dist_to_positions[0] / distance_total];\n\t}\n\n\tstatic _weights_from_3(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_positions[0] * dist_to_positions[1],\n\t\t\tdist_to_positions[0] * dist_to_positions[2],\n\t\t\tdist_to_positions[1] * dist_to_positions[2],\n\t\t]);\n\n\t\treturn [\n\t\t\t(dist_to_positions[1] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[1]) / distance_total,\n\t\t];\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {CorePoint} from '../../geometry/Point';\n// import {CoreMath} from './_Module'\n// import OctreeModule from './Octree/_Module';\nimport {OctreeNode, OctreeNodeTraverseCallback} from './Node';\n\nexport class CoreOctree {\n\tprivate _root: OctreeNode;\n\n\tconstructor(bbox: Box3) {\n\t\tthis._root = new OctreeNode(bbox);\n\t}\n\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._root.set_bounding_box(bbox)\n\t// }\n\n\tset_points(points: CorePoint[]) {\n\t\tthis._root.set_points(points);\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tthis._root.traverse(callback);\n\t}\n\n\t// TODO: I am tempted to stop going through the leaves if\n\t// the ones currently seen already have the required number of points.\n\t// but that probably doesn't work as those points may end up being further\n\t// than the ones from the following leaf\n\tfind_points(position: Vector3, distance: number, max_points_count?: number): CorePoint[] {\n\t\tconst sphere = new Sphere(position, distance);\n\t\tlet found_points: CorePoint[] = [];\n\n\t\tif (this._root.intersects_sphere(sphere)) {\n\t\t\tthis._root.points_in_sphere(sphere, found_points);\n\t\t}\n\n\t\tif (max_points_count == null) {\n\t\t\treturn found_points;\n\t\t} else {\n\t\t\tif (found_points.length > max_points_count) {\n\t\t\t\tfound_points = lodash_sortBy(found_points, (point) => {\n\t\t\t\t\treturn point.position().distanceTo(position);\n\t\t\t\t});\n\t\t\t\t// const lng_lat = {lng: position.x, lat: position.z}\n\t\t\t\t// found_points = lodash_sortBy(found_points, (point)=>{\n\t\t\t\t// \tconst src_position = point.position()\n\t\t\t\t// \tconst src_lng_lat = {lng: src_position.x, lat: src_position.z}\n\t\t\t\t// \treturn CoreMath.geodesic_distance(src_lng_lat, lng_lat)\n\t\t\t\t// });\n\n\t\t\t\tfound_points = found_points.slice(0, max_points_count);\n\t\t\t}\n\n\t\t\treturn found_points;\n\t\t}\n\t}\n}\n\n// Octree.Node = OctreeNode;\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_flatten from 'lodash/flatten';\nimport {CorePoint} from '../../geometry/Point';\n\nexport type OctreeNodeTraverseCallback = (node: OctreeNode) => void;\n\nexport class OctreeNode {\n\t_leaves_by_octant: Dictionary<OctreeNode> = {};\n\t_points_by_octant_id: Dictionary<CorePoint[]> = {};\n\t_leaves: OctreeNode[] = [];\n\t// _bbox: Box3 | undefined;\n\t_center: Vector3;\n\t_bounding_boxes_by_octant: Dictionary<Box3> = {};\n\t_bounding_boxes_by_octant_prepared: boolean = false;\n\n\tconstructor(private _bbox: Box3, private _level: number = 0) {\n\t\tthis._center = this._bbox.max\n\t\t\t.clone()\n\t\t\t.add(this._bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._bbox = bbox;\n\t// }\n\n\tlevel() {\n\t\treturn this._level;\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tcallback(this);\n\t\tconst octants = Object.values(this._leaves_by_octant);\n\t\toctants.forEach((node) => {\n\t\t\tnode.traverse(callback);\n\t\t});\n\t}\n\n\tintersects_sphere(sphere: Sphere): boolean {\n\t\tif (this._bbox) {\n\t\t\treturn this._bbox.intersectsSphere(sphere);\n\t\t}\n\t\treturn false;\n\t}\n\n\t//@PERF = 0\n\tpoints_in_sphere(sphere: Sphere, accumulated_points: CorePoint[]): void {\n\t\tif (this._leaves.length == 0) {\n\t\t\tconst found_points = lodash_flatten(Object.values(this._points_by_octant_id));\n\t\t\tconst selected_points = found_points.filter((point) => sphere.containsPoint(point.position()));\n\t\t\tselected_points.forEach((point) => {\n\t\t\t\taccumulated_points.push(point);\n\t\t\t});\n\t\t} else {\n\t\t\t//start_time = performance.now()\n\t\t\tconst leaves_intersecting_with_sphere = this._leaves.filter((leaf) => leaf.intersects_sphere(sphere));\n\n\t\t\t//console.log(\"level: #{@_level}, found #{leaves_intersecting_with_sphere.length} leaves \")\n\t\t\tleaves_intersecting_with_sphere.forEach((leaf) => leaf.points_in_sphere(sphere, accumulated_points));\n\t\t}\n\t}\n\t//this.constructor.PERF += performance.now()-start_time\n\n\tbounding_box(): Box3 | undefined {\n\t\treturn this._bbox;\n\t}\n\n\t// points_count: ->\n\t// \t@_points_count\n\n\tset_points(points: CorePoint[]) {\n\t\t//@_points_count = points.length\n\n\t\tthis._points_by_octant_id = {};\n\t\tfor (let point of points) {\n\t\t\tthis.add_point(point);\n\t\t}\n\n\t\tconst octant_ids = Object.keys(this._points_by_octant_id);\n\t\tif (octant_ids.length > 1) {\n\t\t\toctant_ids.forEach((octant_id) => {\n\t\t\t\tthis.create_leaf(octant_id);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate_leaf(octant_id: string) {\n\t\tconst box = this._leaf_bbox(octant_id);\n\t\tconst leaf = new OctreeNode(box, this._level + 1);\n\t\tthis._leaves_by_octant[octant_id] = leaf;\n\t\tthis._leaves.push(leaf);\n\t\t//throw \"test #{@_level}\"\n\n\t\tleaf.set_points(this._points_by_octant_id[octant_id]);\n\t}\n\n\tadd_point(point: CorePoint) {\n\t\tconst octant_id = this._octant_id(point.position());\n\t\tif (this._points_by_octant_id[octant_id] == null) {\n\t\t\tthis._points_by_octant_id[octant_id] = [];\n\t\t}\n\t\tthis._points_by_octant_id[octant_id].push(point);\n\t}\n\n\tprivate _octant_id(position: Vector3): string {\n\t\tconst x_pos = position.x > this._center.x ? 1 : 0;\n\t\tconst y_pos = position.y > this._center.y ? 1 : 0;\n\t\tconst z_pos = position.z > this._center.z ? 1 : 0;\n\t\treturn `${x_pos}${y_pos}${z_pos}`;\n\t}\n\n\t_leaf_bbox(octant_id: string): Box3 {\n\t\tif (!this._bounding_boxes_by_octant_prepared) {\n\t\t\tthis._prepare_leaves_bboxes();\n\t\t\tthis._bounding_boxes_by_octant_prepared = true;\n\t\t}\n\t\treturn this._bounding_boxes_by_octant[octant_id];\n\t}\n\n\tprivate _bbox_center(x_pos: number, y_pos: number, z_pos: number) {\n\t\tconst corner = this._bbox.min.clone();\n\t\tif (x_pos) {\n\t\t\tcorner.x = this._bbox.max.x;\n\t\t}\n\t\tif (y_pos) {\n\t\t\tcorner.y = this._bbox.max.y;\n\t\t}\n\t\tif (z_pos) {\n\t\t\tcorner.z = this._bbox.max.z;\n\t\t}\n\n\t\treturn corner\n\t\t\t.clone()\n\t\t\t.add(this._center)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\n\tprivate _prepare_leaves_bboxes() {\n\t\tconst bbox_centers = [];\n\t\tbbox_centers.push(this._bbox_center(0, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 1));\n\n\t\tconst bbox_size_quarter = this._bbox.max\n\t\t\t.clone()\n\t\t\t.sub(this._bbox.min)\n\t\t\t.multiplyScalar(0.25);\n\t\tfor (let bbox_center of bbox_centers) {\n\t\t\tconst octant_id = this._octant_id(bbox_center);\n\t\t\tconst bbox = new Box3(\n\t\t\t\tbbox_center.clone().sub(bbox_size_quarter),\n\t\t\t\tbbox_center.clone().add(bbox_size_quarter)\n\t\t\t);\n\t\t\tthis._bounding_boxes_by_octant[octant_id] = bbox;\n\t\t}\n\t\t// this._bounding_boxes_by_octant;\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport lodash_range from 'lodash/range';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass BboxScatterSopParamsConfig extends NodeParamsConfig {\n\tstep_size = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new BboxScatterSopParamsConfig();\n\nexport class BboxScatterSopNode extends TypedSopNode<BboxScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'bbox_scatter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create points from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst container = input_contents[0];\n\t\t// const group = container.group();\n\n\t\tconst step_size = this.pv.step_size;\n\t\t// jitter = @_param_jitter\n\n\t\tconst bbox = container.bounding_box();\n\n\t\tconst range = {\n\t\t\tx: lodash_range(bbox.min.x, bbox.max.x, step_size),\n\t\t\ty: lodash_range(bbox.min.y, bbox.max.y, step_size),\n\t\t\tz: lodash_range(bbox.min.z, bbox.max.z, step_size),\n\t\t};\n\n\t\t// create buffer geometry\n\t\t// const vertices_count = range.x * range.y * range.z;\n\t\tconst positions: number[] = [];\n\t\trange.x.forEach((x) => {\n\t\t\trange.y.forEach((y) => {\n\t\t\t\trange.z.forEach((z) => {\n\t\t\t\t\tpositions.push(x);\n\t\t\t\t\tpositions.push(y);\n\t\t\t\t\tpositions.push(z);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nclass BlendSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING();\n\tblend = ParamConfig.FLOAT(0.5, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new BlendSopParamsConfig();\n\nexport class BlendSopNode extends TypedSopNode<BlendSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'blend';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to blend from', 'geometry to blend to'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// this.request_input_container 0, (container0)=>\n\t\t// \tif container0? && (group0 = container0.group())?\n\t\t// \t\tthis.request_input_container 1, (container1)=>\n\t\t// \t\t\tif container1? && (group1 = container1.group({clone: false}))?\n\n\t\t//this.eval_all_params =>\n\t\t// const container0 = input_containers[0];\n\t\t// const container1 = input_containers[1];\n\n\t\t// const group0 = container0.group();\n\t\t// const group1 = container1.group();\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\n\t\tconst objects0 = core_group0.objects();\n\t\tconst objects1 = core_group1.objects();\n\n\t\tlet object0, object1;\n\t\tfor (let i = 0; i < objects0.length; i++) {\n\t\t\tobject0 = objects0[i];\n\t\t\tobject1 = objects1[i];\n\t\t\tthis.blend(object0, object1, this.pv.blend);\n\t\t}\n\t\tthis.set_core_group(core_group0);\n\t}\n\n\t// \t\telse\n\t// \t\t\tthis.set_error(\"input 1 required\")\n\n\t// else\n\t// \tthis.set_error(\"input 0 required\")\n\tprivate blend(object0: Object3D, object1: Object3D, blend: number) {\n\t\tconst geometry0 = (object0 as Mesh).geometry as BufferGeometry;\n\t\tconst geometry1 = (object1 as Mesh).geometry as BufferGeometry;\n\t\tif (geometry0 == null || geometry1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0 = geometry0.getAttribute(this.pv.attrib_name);\n\t\tconst attrib1 = geometry1.getAttribute(this.pv.attrib_name);\n\t\tif (attrib0 == null || attrib1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0_array = attrib0.array as number[];\n\t\tconst attrib1_array = attrib1.array as number[];\n\n\t\tlet c0, c1;\n\t\tfor (let i = 0; i < attrib0_array.length; i++) {\n\t\t\tc0 = attrib0_array[i];\n\t\t\tc1 = attrib1_array[i];\n\t\t\tif (c1 != null) {\n\t\t\t\tattrib0_array[i] = (1 - blend) * c0 + blend * c1;\n\t\t\t}\n\t\t}\n\n\t\tgeometry0.computeVertexNormals();\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\nimport {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass BoxSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.FLOAT(1);\n\tdivisions = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new BoxSopParamsConfig();\n\nexport class BoxSopNode extends TypedSopNode<BoxSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'box';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create bounding box from (optional)'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\t// }\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 1);\n\t// \tthis.add_param(ParamType.INTEGER, 'divisions', 1, {\n\t// \t\trange: [1, 10],\n\t// \t\trange_locked: [true, false],\n\t// \t});\n\t// \tthis.add_param(ParamType.VECTOR3, 'center', [0, 0, 0]);\n\t// }\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\n\tprivate _cook_without_input() {\n\t\t//\t\tthis.eval_all_params =>\n\t\tconst divisions = this.pv.divisions;\n\t\tconst size = this.pv.size;\n\t\tconst geometry = new BoxBufferGeometry(size, size, size, divisions, divisions, divisions);\n\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tgeometry.computeVertexNormals();\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst divisions = this.pv.divisions;\n\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max.clone().add(bbox.min).multiplyScalar(0.5);\n\n\t\tconst geometry = new BoxBufferGeometry(size.x, size.y, size.z, divisions, divisions, divisions);\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t// else\n\t// \tthis.set_error(\"first input is invalid\")\n\n\t// _divisions() {\n\t// \treturn Math.max(1, this.pv.divisions);\n\t// }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass CacheSopParamsConfig extends NodeParamsConfig {\n\tcache = ParamConfig.STRING('', {hidden: true});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tCacheSopNode.PARAM_CALLBACK_reset(node as CacheSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new CacheSopParamsConfig();\n\nexport class CacheSopNode extends TypedSopNode<CacheSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cache';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to cache'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst is_cache_empty = this.pv.cache == '' || this.pv.cache == null;\n\t\tconst core_group = input_contents[0];\n\t\tif (is_cache_empty && core_group) {\n\t\t\tconst json = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tjson.push(object.toJSON());\n\t\t\t}\n\t\t\tthis.set_core_group(core_group);\n\t\t\tthis.p.cache.set(JSON.stringify(json));\n\t\t} else {\n\t\t\tif (this.pv.cache) {\n\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\tconst jsons = JSON.parse(this.pv.cache);\n\t\t\t\tconst all_objects = [];\n\t\t\t\tfor (let json of jsons) {\n\t\t\t\t\tconst parent = obj_loader.parse(json);\n\t\t\t\t\t// for(let child of parent.children){\n\t\t\t\t\tall_objects.push(parent);\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tthis.set_objects(all_objects);\n\t\t\t} else {\n\t\t\t\tthis.set_objects([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_reset(node: CacheSopNode, param: BaseParamType) {\n\t\tnode.param_callback_PARAM_CALLBACK_reset();\n\t}\n\tasync param_callback_PARAM_CALLBACK_reset() {\n\t\tthis.p.cache.set('');\n\t\tthis.request_container();\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {CircleBufferGeometry} from 'three/src/geometries/CircleGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CircleSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\topen = ParamConfig.BOOLEAN(1);\n\tarc_angle = ParamConfig.FLOAT(360, {\n\t\trange: [0, 360],\n\t\trange_locked: [false, false],\n\t\tvisible_if: {open: 1},\n\t});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CircleSopParamsConfig();\n\nexport class CircleSopNode extends TypedSopNode<CircleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'circle';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0);\n\t\t// this.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook() {\n\t\tif (this.pv.open) {\n\t\t\tthis._create_circle();\n\t\t} else {\n\t\t\tthis._create_disk();\n\t\t}\n\t}\n\n\t_create_circle() {\n\t\tconst geometry = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments, this.pv.arc_angle);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry, ObjectType.LINE_SEGMENTS);\n\t}\n\n\t_create_disk() {\n\t\tconst geometry = new CircleBufferGeometry(this.pv.radius, this.pv.segments);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nconst DEFAULT_FUNCTION_CODE = `const core_group = core_groups[0];\nconst object = core_group.objects()[0];\nobject.position.y = -1;\nnode.set_core_group(core_groups[0]);\n\n\n`;\n\ntype EvaluatedFunction = (node: CodeSopNode, scene: PolyScene, core_groups: CoreGroup[]) => void;\n\nimport {PolyScene} from '../../scene/PolyScene';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\nclass CodeSopParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeSopParamsConfig();\nexport class CodeSopNode extends TypedSopNode<CodeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _function: EvaluatedFunction | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.ui_data.set_width(100);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._function) {\n\t\t\tthis._function(this, this.scene, core_groups);\n\t\t} else {\n\t\t\tthis.set_core_group(core_groups[0]);\n\t\t}\n\t}\n\n\tprivate _compile_if_required() {\n\t\tif (!this._function || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\n\tprivate _compile() {\n\t\ttry {\n\t\t\tthis._function = new AsyncFunction(\n\t\t\t\t'node',\n\t\t\t\t'scene',\n\t\t\t\t'core_groups',\n\t\t\t\t`try {\n\t\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tthis.states.error.set(e)\n\t\t\t\t}`\n\t\t\t);\n\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._function = undefined;\n\t\t}\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {CoreColor} from '../../../core/Color';\n// import lodash_times from 'lodash/times'\n// import lodash_each from 'lodash/each'\n// import {CoreGroup} from '../../../core/geometry/Group';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst COLOR_ATTRIB_NAME = 'color';\n\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ColorSopParamsConfig extends NodeParamsConfig {\n\tfrom_attribute = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {from_attribute: 1},\n\t});\n\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\tvisible_if: {from_attribute: 0},\n\t\texpression: {for_entities: true},\n\t});\n\tas_hsv = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {from_attribute: 0},\n\t});\n}\nconst ParamsConfig = new ColorSopParamsConfig();\n\nexport class ColorSopNode extends TypedSopNode<ColorSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'color';\n\t}\n\n\tprivate _r_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _g_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _b_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update color of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tif (this.pv.from_attribute) {\n\t\t\t\tthis._set_from_attribute(core_object);\n\t\t\t} else {\n\t\t\t\tconst has_expression = this.p.color.has_expression();\n\t\t\t\tif (has_expression) {\n\t\t\t\t\tawait this._eval_expressions(core_object);\n\t\t\t\t} else {\n\t\t\t\t\tthis._eval_simple_values(core_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\t(geometry.getAttribute(COLOR_ATTRIB_NAME) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_set_from_attribute(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst points = core_geometry.points();\n\n\t\tconst src_attrib_size = core_geometry.attrib_size(this.pv.attrib_name);\n\t\tconst geometry = core_geometry.geometry();\n\t\tconst src_array = geometry.getAttribute(this.pv.attrib_name).array;\n\t\tconst dest_array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\tswitch (src_attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[i];\n\t\t\t\t\tdest_array[dest_i + 1] = 1 - src_array[i];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 2;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tfor (let i = 0; i < src_array.length; i++) {\n\t\t\t\t\tdest_array[i] = src_array[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 4;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = src_array[src_i + 2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_init_color(core_geometry: CoreGeometry, color: Color) {\n\t\tif (!core_geometry.has_attrib(COLOR_ATTRIB_NAME)) {\n\t\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, DEFAULT_COLOR);\n\t\t}\n\t}\n\n\t_eval_simple_values(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\n\t\tlet new_color: Color;\n\t\tif (this.pv.as_hsv) {\n\t\t\tnew_color = new Color();\n\t\t\tCoreColor.set_hsv(this.pv.color.r, this.pv.color.g, this.pv.color.b, new_color);\n\t\t} else {\n\t\t\tnew_color = this.pv.color; //.clone();\n\t\t}\n\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, new_color);\n\t}\n\n\tasync _eval_expressions(core_object: CoreObject) {\n\t\tconst points = core_object.points();\n\t\tconst object = core_object.object();\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tif (geometry) {\n\t\t\tconst array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\t\tconst tmp_array_r = await this._update_from_param(geometry, array, points, 0);\n\t\t\tconst tmp_array_g = await this._update_from_param(geometry, array, points, 1);\n\t\t\tconst tmp_array_b = await this._update_from_param(geometry, array, points, 2);\n\n\t\t\tif (tmp_array_r) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_r, array, 0);\n\t\t\t}\n\t\t\tif (tmp_array_g) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_g, array, 1);\n\t\t\t}\n\t\t\tif (tmp_array_b) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_b, array, 2);\n\t\t\t}\n\n\t\t\t// to hsv\n\t\t\tif (this.pv.as_hsv) {\n\t\t\t\tlet current = new Color();\n\t\t\t\tlet target = new Color();\n\t\t\t\tlet index;\n\t\t\t\tfor (let point of points) {\n\t\t\t\t\tindex = point.index * 3;\n\t\t\t\t\tcurrent.fromArray(array, index);\n\t\t\t\t\tCoreColor.set_hsv(current.r, current.g, current.b, target);\n\t\t\t\t\ttarget.toArray(array, index);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// const colorr_param = this.param('colorr');\n\t\t// const colorg_param = this.param('colorg');\n\t\t// const colorb_param = this.param('colorb');\n\n\t\t// r\n\t\t// if(colorr_param.has_expression()){\n\t\t// \tawait colorr_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+0] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+0] = this.pv.color.r\n\t\t// \t}\n\t\t// }\n\t\t// g\n\t\t// if(colorg_param.has_expression()){\n\t\t// \tawait colorg_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+1] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+1] = this.pv.color.g\n\t\t// \t}\n\t\t// }\n\t\t// b\n\t\t// if(colorb_param.has_expression()){\n\t\t// \tawait colorb_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+2] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+2] = this.pv.color.b\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\toffset: number\n\t): Promise<number[] | undefined> {\n\t\t// const component_name = ['r', 'g', 'b'][offset];\n\t\tconst param = this.p.color.components[offset];\n\t\tconst param_value = [this.pv.color.r, this.pv.color.g, this.pv.color.b][offset];\n\t\tconst arrays_by_geometry_uuid = [\n\t\t\tthis._r_arrays_by_geometry_uuid,\n\t\t\tthis._g_arrays_by_geometry_uuid,\n\t\t\tthis._b_arrays_by_geometry_uuid,\n\t\t][offset];\n\n\t\tlet tmp_array: number[] | undefined;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\ttmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length);\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t// array[point.index()*3+2] = value\n\t\t\t\t(tmp_array as number[])[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let point of points) {\n\t\t\t\tarray[point.index * 3 + offset] = param_value;\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\nimport {Color} from 'three/src/math/Color';\n\nexport class CoreColor {\n\t// use color.toStyle() if needed\n\t// static to_css(color: Color): string {\n\t// \tconst color_elements = color.toArray().map((e) => e * 255)\n\t// \treturn `rgb(${color_elements.join(', ')})`\n\t// }\n\n\t// from THREE.js examples ColorConverter.js\n\tstatic set_hsv(h: number, s: number, v: number, target: Color) {\n\t\th = MathUtils.euclideanModulo(h, 1);\n\t\ts = MathUtils.clamp(s, 0, 1);\n\t\tv = MathUtils.clamp(v, 0, 1);\n\n\t\ttarget.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ConeBufferGeometry} from 'three/src/geometries/ConeGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ConeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\ttheta_start = ParamConfig.FLOAT(1, {range: [0, 1]});\n\ttheta_length = ParamConfig.FLOAT('2*$PI', {range: [0, 1]});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new ConeSopParamsConfig();\n\nexport class ConeSopNode extends TypedSopNode<ConeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cone';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new ConeBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap,\n\t\t\tthis.pv.theta_start,\n\t\t\tthis.pv.theta_length\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreString} from '../../../core/String';\n// import {NodeSimple} from '../../../Core/Graph/NodeSimple'\nimport {CopyStamp} from './utils/CopyStamp';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nclass CopySopParamsConfig extends NodeParamsConfig {\n\tcount = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t});\n\ttransform_only = ParamConfig.BOOLEAN(0);\n\tcopy_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_copy = ParamConfig.STRING('', {\n\t\tvisible_if: {copy_attributes: true},\n\t});\n\tuse_copy_expr = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new CopySopParamsConfig();\n\nexport class CopySopNode extends TypedSopNode<CopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'copy';\n\t}\n\n\tprivate _attribute_names_to_copy: string[] = [];\n\t// private _group: Group|undefined;\n\tprivate _objects: Object3D[] = [];\n\tprivate _stamp_node!: CopyStamp;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be copied', 'points to copy to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\t// async evaluate_inputs_and_params() {\n\t// \tawait this.eval_all_params()\n\t// }\n\n\tasync cook() {\n\t\tlet core_group0;\n\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\tif (container0 != null && (core_group0 = container0.core_content()) != null) {\n\t\t\tif (this.io.inputs.has_input(1)) {\n\t\t\t\tlet core_group1;\n\t\t\t\tconst container1 = await this.container_controller.request_input_container(1);\n\t\t\t\tif (container1 != null && (core_group1 = container1.core_content()) != null) {\n\t\t\t\t\tawait this.cook_with_template(core_group0, core_group1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set('second input required');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.cook_without_template(core_group0);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('first input required');\n\t\t}\n\t}\n\n\tprivate async cook_with_template(instance_core_group: CoreGroup, template_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\n\t\tconst template_points = template_core_group.points();\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tlet instance_matrices = instancer.matrices();\n\n\t\tthis._attribute_names_to_copy = CoreString.attrib_names(this.pv.attributes_to_copy).filter((attrib_name) =>\n\t\t\ttemplate_core_group.has_attrib(attrib_name)\n\t\t);\n\t\tawait this._copy_moved_objects_on_template_points(instance_core_group, instance_matrices, template_points);\n\t\tthis.set_objects(this._objects);\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_on_template_points(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[]\n\t) {\n\t\tfor (let point_index = 0; point_index < template_points.length; point_index++) {\n\t\t\tawait this._copy_moved_object_on_template_point(\n\t\t\t\tinstance_core_group,\n\t\t\t\tinstance_matrices,\n\t\t\t\ttemplate_points,\n\t\t\t\tpoint_index\n\t\t\t);\n\t\t}\n\t\t// template_points.forEach((template_point, point_index) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_object_on_template_point(\n\t\t// \t\t\tinstance_core_group,\n\t\t// \t\t\tinstance_matrices,\n\t\t// \t\t\ttemplate_points,\n\t\t// \t\t\tpoint_index\n\t\t// \t\t);\n\t\t// \t});\n\t\t// });\n\t}\n\n\tprivate _copy_moved_object_on_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[],\n\t\tpoint_index: number\n\t) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst matrix = instance_matrices[point_index];\n\t\t\tconst template_point = template_points[point_index];\n\t\t\tthis.stamp_node.set_point(template_point);\n\n\t\t\tconst moved_objects = await this._get_moved_objects_for_template_point(instance_core_group, point_index);\n\n\t\t\tmoved_objects.forEach((moved_object) => {\n\t\t\t\tif (this.pv.copy_attributes) {\n\t\t\t\t\tthis._copy_attributes_from_template(moved_object, template_point);\n\t\t\t\t}\n\n\t\t\t\t// TODO: that node is getting inconsistent...\n\t\t\t\t// should I always only move the object?\n\t\t\t\t// and have a toggle to bake back to the geo?\n\t\t\t\t// or just enfore the use of a merge?\n\t\t\t\tif (this.pv.transform_only) {\n\t\t\t\t\tmoved_object.applyMatrix4(matrix);\n\t\t\t\t} else {\n\t\t\t\t\tmoved_object.geometry.applyMatrix4(matrix);\n\t\t\t\t}\n\n\t\t\t\treturn this._objects.push(moved_object);\n\t\t\t});\n\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tprivate _get_moved_objects_for_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tpoint_index: number\n\t): Promise<Object3DWithGeometry[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\t// duplicate or select from instance children\n\t\t\t\tconst moved_objects = this.pv.transform_only\n\t\t\t\t\t? // TODO: why is doing a transform slower than cloning the input??\n\t\t\t\t\t  lodash_compact([instance_core_group.objects()[point_index]])\n\t\t\t\t\t: instance_core_group.clone().objects();\n\n\t\t\t\tresolve(moved_objects);\n\t\t\t} else {\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _stamp_instance_group_if_required(instance_core_group: CoreGroup): Promise<CoreGroup | undefined> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (this.pv.use_copy_expr) {\n\t\t\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\t\t\tlet core_group0: CoreGroup;\n\t\t\t\tif (container0 && (core_group0 = container0.core_content()) != null) {\n\t\t\t\t\t// this.stamp_node.increment_global_value()\n\t\t\t\t\tresolve(core_group0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`input failed for index ${this.stamp_value()}`);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(instance_core_group);\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_for_each_instance(instance_core_group: CoreGroup) {\n\t\t// let p = Promise.resolve(); // Q() in q\n\n\t\tfor (let i = 0; i < this.pv.count; i++) {\n\t\t\tawait this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t}\n\t\t// lodash_times(this.pv.count, (i) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t// \t});\n\t\t// });\n\n\t\t// return p;\n\t}\n\n\tprivate _copy_moved_objects_for_instance(instance_core_group: CoreGroup, i: number) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.stamp_node.set_global_index(i);\n\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\tstamped_instance_core_group.objects().forEach((object) => {\n\t\t\t\t\t// TODO: I should use the Group wrapper, to ensure that material.linewidth is properly cloned\n\t\t\t\t\tconst new_object = CoreObject.clone(object);\n\t\t\t\t\tthis._objects.push(new_object);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// TODO: what if I combine both @_param_count and stamping?!\n\tprivate cook_without_template(instance_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\t\tthis._copy_moved_objects_for_each_instance(instance_core_group).then(() => {\n\t\t\tthis.set_objects(this._objects);\n\t\t});\n\t}\n\n\tprivate _copy_attributes_from_template(object: Object3D, template_point: CorePoint) {\n\t\tthis._attribute_names_to_copy.forEach((attrib_name, i) => {\n\t\t\tconst attrib_value = template_point.attrib_value(attrib_name);\n\t\t\tconst object_wrapper = new CoreObject(object, i);\n\t\t\tobject_wrapper.add_attribute(attrib_name, attrib_value);\n\t\t});\n\t}\n\n\t//\n\t//\n\t// STAMP\n\t//\n\t//\n\tstamp_value(attrib_name?: string) {\n\t\treturn this.stamp_node.value(attrib_name);\n\t}\n\tget stamp_node() {\n\t\treturn (this._stamp_node = this._stamp_node || this.create_stamp_node());\n\t}\n\tprivate create_stamp_node() {\n\t\tconst stamp_node = new CopyStamp(this.scene);\n\t\tthis.dirty_controller.set_forbidden_trigger_nodes([stamp_node]);\n\t\treturn stamp_node;\n\t}\n\n\t// private set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \treturn original_trigger_graph_node.graph_node_id !== this.stamp_node.graph_node_id;\n\t// }\n}\n","import {CorePoint} from '../../../../core/geometry/Point';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../../../scene/PolyScene';\n\nexport class CopyStamp extends CoreGraphNode {\n\tprivate _global_index: number = 0;\n\tprivate _point: CorePoint | undefined;\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'CopyStamp');\n\t}\n\n\tset_point(point: CorePoint) {\n\t\tthis._point = point;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\tset_global_index(index: number) {\n\t\tthis._global_index = index;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\n\tvalue(attrib_name?: string) {\n\t\tif (this._point) {\n\t\t\tif (attrib_name) {\n\t\t\t\treturn this._point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn this._point.index;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._global_index;\n\t\t}\n\t}\n}\n","// import {Core} from '../../../Core/_Module';\nimport {TypedSopNode} from './_Base';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nconst DEFAULT_DATA = [\n\t{value: -40},\n\t{value: -30},\n\t{value: -20},\n\t{value: -10},\n\t{value: 0},\n\t{value: 10},\n\t{value: 20},\n\t{value: 30},\n\t{value: 40},\n\t{value: 50},\n\t{value: 60},\n\t{value: 70},\n\t{value: 80},\n];\nconst DEFAULT_DATA_STR = JSON.stringify(DEFAULT_DATA);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DataSopParamsConfig extends NodeParamsConfig {\n\tdata = ParamConfig.STRING(DEFAULT_DATA_STR);\n}\nconst ParamsConfig = new DataSopParamsConfig();\n\nexport class DataSopNode extends TypedSopNode<DataSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data';\n\t}\n\n\tcook() {\n\t\tlet json = null;\n\t\ttry {\n\t\t\tjson = JSON.parse(this.pv.data);\n\t\t} catch (e) {\n\t\t\tthis.states.error.set('could not parse json');\n\t\t}\n\n\t\tif (json) {\n\t\t\tconst loader = new JsonDataLoader();\n\t\t\tloader.set_json(json);\n\t\t\tconst object = loader.create_object();\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray'\nimport lodash_isString from 'lodash/isString'\nimport {CoreConstant} from './Constant'\n\nexport class CoreAttributeData {\n\tconstructor(private _size: number, private _type: number) {}\n\n\tsize() {\n\t\treturn this._size\n\t}\n\ttype() {\n\t\treturn this._type\n\t}\n\n\tstatic from_value(attrib_value: any) {\n\t\tconst type = lodash_isString(attrib_value)\n\t\t\t? CoreConstant.ATTRIB_TYPE.STRING\n\t\t\t: CoreConstant.ATTRIB_TYPE.NUMERIC\n\t\tconst size = lodash_isArray(attrib_value) ? attrib_value.length : 1\n\n\t\treturn new this(size, type)\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n// import lodash_flatten from 'lodash/flatten';\nimport {TypedSopNode} from './_Base';\n\n// import {CoreLoaderGeometry, LoaderType, LOADER_TYPES} from '../../../Core/Loader/Geometry';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass DataUrlSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('/examples/sop/data_url/basic.json');\n\tjson_data_keys_prefix = ParamConfig.STRING('');\n\tskip_entries = ParamConfig.STRING('');\n\tconvert = ParamConfig.BOOLEAN(0);\n\tconvert_to_numeric = ParamConfig.STRING('', {\n\t\tvisible_if: {convert: 1},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tDataUrlSopNode.PARAM_CALLBACK_reload(node as DataUrlSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new DataUrlSopParamsConfig();\n\nexport class DataUrlSopNode extends TypedSopNode<DataUrlSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data_url';\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tasync cook() {\n\t\tconst loader = new JsonDataLoader({\n\t\t\tdata_keys_prefix: this.pv.json_data_keys_prefix,\n\t\t\tskip_entries: this.pv.skip_entries,\n\t\t\tdo_convert: this.pv.convert,\n\t\t\tconvert_to_numeric: this.pv.convert_to_numeric,\n\t\t});\n\t\tloader.load(this.pv.url, this._on_load.bind(this), undefined, this._on_error.bind(this));\n\t}\n\n\t_on_load(objects: Object3D) {\n\t\t// objects = lodash_flatten(objects);\n\t\tthis.set_objects([objects]);\n\t}\n\t_on_error(error: ErrorEvent) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${error})`);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\t// async _on_open_url(){\n\t// \tconst url = await this.param('url').eval_p()\n\t// \tconst a = document.createElement('a')\n\t// \ta.href = url\n\t// \ta.setAttribute('target', '_blank')\n\t// \ta.click()\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: DataUrlSopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tparam_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass DelaySopParamsConfig extends NodeParamsConfig {\n\tduration = ParamConfig.INTEGER(1000);\n}\nconst ParamsConfig = new DelaySopParamsConfig();\n\nexport class DelaySopNode extends TypedSopNode<DelaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delay';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS]);\n\t}\n\n\tcook(inputs_contents: CoreGroup[]) {\n\t\tconst core_group = inputs_contents[0];\n\t\tconst c = () => {\n\t\t\tthis.set_core_group(core_group);\n\t\t};\n\t\tsetTimeout(c, this.pv.duration);\n\t}\n}\n","import {Box3} from 'three/src/math/Box3';\nimport lodash_isString from 'lodash/isString';\nimport lodash_each from 'lodash/each';\nimport {TypedSopNode} from './_Base';\nimport {CoreString} from '../../../core/String';\nimport {\n\tAttribClass,\n\tAttribClassMenuEntries,\n\tObjectType,\n\tObjectTypeMenuEntries,\n\tObjectTypes,\n} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreObject} from '../../../core/geometry/Object';\n\nenum ComparisonOperator {\n\t'==' = 0,\n\t'<' = 1,\n\t'<=' = 2,\n\t'>=' = 3,\n\t'>' = 4,\n\t'!=' = 5,\n}\nconst ComparisonOperatorMenuEntries = [\n\t{name: '==', value: ComparisonOperator['==']},\n\t{name: '<', value: ComparisonOperator['<']},\n\t{name: '<=', value: ComparisonOperator['<=']},\n\t{name: '>=', value: ComparisonOperator['>=']},\n\t{name: '>', value: ComparisonOperator['>']},\n\t{name: '!=', value: ComparisonOperator['!=']},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n\thide_objects = ParamConfig.BOOLEAN(0);\n\n\t// by_object_type\n\tby_object_type = ParamConfig.BOOLEAN(0);\n\tobject_type = ParamConfig.INTEGER(ObjectTypes.indexOf(ObjectType.MESH), {\n\t\tmenu: {\n\t\t\tentries: ObjectTypeMenuEntries,\n\t\t},\n\t\tvisible_if: {by_object_type: true},\n\t});\n\n\t// by_expression\n\tby_expression = ParamConfig.BOOLEAN(0);\n\texpression = ParamConfig.BOOLEAN('@ptnum==0', {\n\t\tvisible_if: {by_expression: true},\n\t\texpression: {for_entities: true},\n\t});\n\n\t// by_attrib\n\tby_attrib = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_string = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\t// attrib_float = ParamConfig.FLOAT(0, {\n\t// \tvisible_if: {by_attrib: true},\n\t// })\n\tattrib_numeric = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_comparison_operator = ParamConfig.INTEGER(ComparisonOperator['=='], {\n\t\tmenu: {\n\t\t\tentries: ComparisonOperatorMenuEntries,\n\t\t},\n\t\tvisible_if: {by_attrib: true},\n\t});\n\n\t// by_bbox\n\tby_bbox = ParamConfig.BOOLEAN(0);\n\tbbox_size = ParamConfig.VECTOR3([1, 1, 1], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\tbbox_center = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\t//this.add_param( ParamType.STRING, 'index_mode', Core.Geometry.Geometry.INDEX_MODE_FACES )\n\n\t// by_visible\n\tby_visible = ParamConfig.BOOLEAN(0);\n\tkeep_points = ParamConfig.BOOLEAN(1, {\n\t\tvisible_if: {\n\t\t\tclass: AttribClass.OBJECT,\n\t\t},\n\t});\n}\nconst ParamsConfig = new DeleteSopParamsConfig();\n\nexport class DeleteSopNode extends TypedSopNode<DeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delete';\n\t}\n\n\t// _param_attrib_class: number;\n\t// _param_invert: boolean;\n\t// _param_hide_objects: boolean;\n\t// _param_by_object_type: boolean;\n\t// _param_object_type: number;\n\t// _param_by_attrib: boolean;\n\t// _param_attrib_name: string;\n\t// _param_attrib_float: number;\n\t// _param_attrib_string: string;\n\t// _param_attrib_vector: Vector3;\n\t// _param_attrib_ComparisonOperator: number;\n\t// _param_by_expression: boolean;\n\t// _param_expression: string;\n\t// _param_by_bbox: boolean;\n\t// _param_bbox_size: Vector3;\n\t// _param_bbox_center: Vector3;\n\t// _param_by_visible: boolean;\n\n\tprivate _bbox_cache: Box3 | undefined;\n\n\tprivate _marked_for_deletion_per_object_index: Map<number, boolean> = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._bbox_cache = undefined;\n\t\tswitch (this.pv.class) {\n\t\t\tcase AttribClass.VERTEX:\n\t\t\t\tawait this._eval_for_points(core_group);\n\t\t\t\tbreak;\n\t\t\tcase AttribClass.OBJECT:\n\t\t\t\tawait this._eval_for_objects(core_group);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _eval_for_objects(core_group: CoreGroup) {\n\t\t// const objects_to_delete = [];\n\t\tconst objects_to_keep = [];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tthis._marked_for_deletion_per_object_index = new Map();\n\t\tfor (let core_object of core_objects) {\n\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, false);\n\t\t}\n\n\t\tif (this.pv.by_expression) {\n\t\t\tawait this._eval_expressions_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_object_type) {\n\t\t\tthis._eval_type_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\tthis._eval_attrib_for_objects(core_objects);\n\n\t\t\t// \tif !is_deleted && @_param_by_bbox\n\t\t\t// \t\tis_deleted = this._eval_bbox_for_object(object)\n\n\t\t\t// \tif !is_deleted && @_param_by_visible\n\t\t\t// \t\tis_deleted = !object.visible\n\n\t\t\t// \tif @_param_invert\n\t\t\t// \t\tis_deleted = !is_deleted\n\n\t\t\t// \tif @_param_hide_objects\n\t\t\t// \t\tobject.visible = !is_deleted\n\t\t\t// \telse\n\t\t\t// \t\tif is_deleted\n\t\t\t// \t\t\tobjects_to_delete.push(object)\n\n\t\t\t// true; // to ensure the loop isn't breaking, which is what happens when setting the object.visible to false...\n\t\t}\n\n\t\tif (this.pv.invert) {\n\t\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(object_index, !marked_for_deletion);\n\t\t\t});\n\t\t}\n\n\t\tlet core_object, object;\n\t\tconst point_objects_from_deleted_objects: Object3DWithGeometry[] = [];\n\t\t// for (let object_index of Object.keys(this._marked_for_deletion_per_object_index)) {\n\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\tcore_object = core_objects[object_index];\n\t\t\tobject = core_object.object();\n\n\t\t\tif (this.pv.hide_objects) {\n\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tobject.visible = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!marked_for_deletion) {\n\t\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\t}\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tpoint_objects_from_deleted_objects.push(this._point_object(core_object));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if (marked_for_deletion) {\n\t\t\t// \tcmptr += 1;\n\t\t\t// \tif (this.pv.hide_objects) {\n\t\t\t// \t\tobject.visible = true;\n\n\t\t\t// \t} else {\n\t\t\t// \t\t// object.parent.remove(object);\n\t\t\t// \t\t// const c = () =>\n\t\t\t// \t\t// \tobject.traverse(function(object_child) {\n\t\t\t// \t\t// \t\tif (object_child.geometry != null) {\n\t\t\t// \t\t// \t\t\tobject_child.geometry.dispose();\n\t\t\t// \t\t// \t\t}\n\t\t\t// \t\t// \t\t// const material = object_child.material\n\t\t\t// \t\t// \t\t// if(material){ material.dispose() }\n\t\t\t// \t\t// \t})\n\t\t\t// \t\t// ;\n\t\t\t// \t\t// setTimeout(c, 25);\n\t\t\t// \t}\n\t\t\t// }\n\t\t});\n\n\t\tfor (let object of point_objects_from_deleted_objects) {\n\t\t\tobjects_to_keep.push(object);\n\t\t}\n\n\t\tthis.set_objects(objects_to_keep);\n\t}\n\n\t//console.log(\"#{cmptr} marked for deletion\")\n\n\t// TODO: ensure that geometries with no remaining points are removed from the group\n\tprivate async _eval_for_points(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tlet core_object;\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tcore_object = core_objects[i];\n\t\t\tlet core_geometry = core_object.core_geometry();\n\t\t\tif (core_geometry) {\n\t\t\t\tlet points = core_geometry.points_from_geometry();\n\t\t\t\tconst init_points_count = points.length;\n\t\t\t\tif (this.pv.by_expression) {\n\t\t\t\t\tpoints = await this._eval_expressions_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\t\t\tpoints = this._eval_attrib_for_points(points);\n\t\t\t\t}\n\t\t\t\tif (this.pv.by_bbox) {\n\t\t\t\t\tpoints = this._eval_bbox_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (points.length != init_points_count) {\n\t\t\t\t\tconst object = core_object.object() as Object3DWithGeometry;\n\t\t\t\t\tcore_geometry.geometry().dispose();\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\t// TODO: if the new geo only has unconnected points, how do I know it and how do I change the material if it was previously a mesh?\n\t\t\t\t\t\tobject.geometry = CoreGeometry.geometry_from_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: do not dispose material if not cloned\n\t\t\t\t\t\t// if (object.material != null) {\n\t\t\t\t\t\t// \tobject.material.dispose();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tobject.parent != null ? object.parent.remove(object) : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_points(points: CorePoint[]) {\n\t\tconst kept_points = [];\n\n\t\t// const promises = points.map((point, i)=> {\n\t\t// \treturn new Promise( async (resolve, reject)=> {\n\t\t// \t\tthis.context().set_entity(point);\n\t\t// \t\tconst val = await(this.param('expression').eval_p());\n\t\t// \t\tconst keep_point = this.pv.invert ?\n\t\t// \t\t\tval === true\n\t\t// \t\t:\n\t\t// \t\t\tval === false;\n\n\t\t// \t\tif (keep_point) {\n\t\t// \t\t\tkept_points.push(point);\n\t\t// \t\t}\n\t\t// \t\tresolve();\n\t\t// \t});\n\t\t// });\n\n\t\t// await(Promise.all(promises));\n\t\tconst param = this.p.expression;\n\t\tif (this.p.expression.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tlet keep_point = !value;\n\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t}\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(point);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst value = this.pv.expression;\n\t\t\tlet keep_point = !value;\n\t\t\tif (this.pv.invert) {\n\t\t\t\tkeep_point = !keep_point;\n\t\t\t}\n\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(kept_points);\n\t\treturn kept_points;\n\t}\n\n\tprivate async _eval_expressions_for_objects(core_objects: CoreObject[]) {\n\t\tconst param = this.p.expression;\n\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\t\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t\t}\n\t\t}\n\n\t\t// for (let core_object of core_objects) {\n\t\t// \tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t// \tif (!is_marked_for_deletion) {\n\t\t// \t\tthis.processing_context.set_entity(core_object);\n\t\t// \t\t// param.set_dirty();\n\t\t// \t\tawait param.compute();\n\t\t// \t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _eval_attrib_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tif (points.length > 0) {\n\t\t\tconst first_attrib_value = points[0].attrib_value(this.pv.attrib_name);\n\t\t\t// TODO: should I just have @_param_attrib_string?\n\t\t\t// although I may need a vector one... maybe a multiple string?\n\t\t\tconst comparison_attrib_values = lodash_isString(first_attrib_value)\n\t\t\t\t? //@_param_attrib_string\n\t\t\t\t  CoreString.attrib_names(this.pv.attrib_string)\n\t\t\t\t: [this.pv.attrib_numeric.x];\n\n\t\t\tcomparison_attrib_values.forEach((comparison_attrib_value: string | number) => {\n\t\t\t\treturn points.forEach((point) => {\n\t\t\t\t\tconst attrib_value = point.attrib_value(this.pv.attrib_name);\n\n\t\t\t\t\t// TODO: and for vectors? should I have a point.attrib(name).is_equal(value)\n\t\t\t\t\t// or point.is_attrib_equal(name, value) ?\n\t\t\t\t\t//keep_point = (attrib_value != comparison_attrib_value)\n\t\t\t\t\tlet keep_point = !this._comparison(attrib_value, comparison_attrib_value);\n\n\t\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keep_point) {\n\t\t\t\t\t\treturn kept_points.push(point);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn kept_points;\n\t}\n\n\tprivate _comparison(attrib_value: number | string, comparison_attrib_value: number | string) {\n\t\tswitch (this.pv.attrib_ComparisonOperator) {\n\t\t\tcase ComparisonOperator['==']:\n\t\t\t\treturn attrib_value === comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<=']:\n\t\t\t\treturn attrib_value <= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<']:\n\t\t\t\treturn attrib_value < comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>']:\n\t\t\t\treturn attrib_value > comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>=']:\n\t\t\t\treturn attrib_value >= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['!=']:\n\t\t\t\treturn attrib_value !== comparison_attrib_value;\n\t\t}\n\t}\n\n\tprivate _eval_type_for_objects(core_objects: CoreObject[]) {\n\t\tconst object_type_name = ObjectTypes[this.pv.object_type];\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\tconst object = core_object.object();\n\n\t\t\t\tif (object.constructor.name === object_type_name) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_attrib_for_objects(core_objects: CoreObject[]) {\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t// const object = core_object.object();\n\t\t\t\tconst attrib_value = core_object.attrib_value(this.pv.attrib_name);\n\n\t\t\t\tconst comparison_attrib_value = lodash_isString(attrib_value)\n\t\t\t\t\t? this.pv.attrib_string\n\t\t\t\t\t: this.pv.attrib_float;\n\n\t\t\t\tif (attrib_value === comparison_attrib_value) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_bbox_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tlodash_each(points, (point, i) => {\n\t\t\tconst in_bbox = this._bbox.containsPoint(point.position());\n\n\t\t\tconst keep_point = this.pv.invert ? in_bbox : !in_bbox;\n\n\t\t\tif (keep_point) {\n\t\t\t\treturn kept_points.push(point);\n\t\t\t}\n\t\t});\n\n\t\treturn kept_points;\n\t}\n\n\t// private _eval_bbox_for_object(object: Object3D): boolean {\n\t// \tconst object_bbox = new Box3().setFromObject(object);\n\t// \tconst center = new Vector3();\n\t// \tobject_bbox.getCenter(center);\n\n\t// \treturn this.pv.bbox().containsPoint(center);\n\t// }\n\n\tprivate get _bbox() {\n\t\treturn this._bbox_cache != null\n\t\t\t? this._bbox_cache\n\t\t\t: (this._bbox_cache = new Box3(\n\t\t\t\t\tthis.pv.bbox_center.clone().sub(this.pv.bbox_size.clone().multiplyScalar(0.5)),\n\t\t\t\t\tthis.pv.bbox_center.clone().add(this.pv.bbox_size.clone().multiplyScalar(0.5))\n\t\t\t  ));\n\t}\n\n\tprivate _point_object(core_object: CoreObject) {\n\t\tconst core_points = core_object.points();\n\t\tconst geometry = CoreGeometry.geometry_from_points(\n\t\t\tcore_points,\n\t\t\t(<unknown>core_object.object().constructor) as ObjectType\n\t\t);\n\t\treturn this.create_object(geometry, ObjectType.POINTS);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport lodash_chunk from 'lodash/chunk';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreFace} from '../../../core/geometry/Face';\nclass FaceSopParamsConfig extends NodeParamsConfig {\n\tmake_faces_unique = ParamConfig.BOOLEAN(0);\n\tadd_face_center_attribute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tadd_face_id = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\ttransform = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tscale = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {make_faces_unique: 1, transform: 1},\n\t});\n}\nconst ParamsConfig = new FaceSopParamsConfig();\n\nexport class FaceSopNode extends TypedSopNode<FaceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'face';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.make_faces_unique) {\n\t\t\tthis._make_faces_unique(core_group);\n\n\t\t\t// we can only add face_center attrib\n\t\t\t// if the faces have been split\n\t\t\t// otherwise a point may belong to multiple faces\n\t\t\tif (this.pv.add_face_center_attribute) {\n\t\t\t\tthis._add_face_center_attribute(core_group);\n\t\t\t}\n\t\t\tif (this.pv.add_face_id) {\n\t\t\t\tthis._add_face_id(core_group);\n\t\t\t}\n\t\t\tif (this.pv.transform) {\n\t\t\t\tthis._transform_faces(core_group);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _make_faces_unique(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst faces = lodash_chunk(geometry.index?.array || [], 3);\n\t\t\t\tconst points_count = faces.length * 3;\n\t\t\t\tfor (let attrib_name of Object.keys(geometry.attributes)) {\n\t\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\t\tconst attrib_size = attrib.itemSize;\n\t\t\t\t\tconst new_values = new Float32Array(points_count * attrib_size);\n\t\t\t\t\tlet new_value_index = 0;\n\t\t\t\t\tfaces.forEach((face) => {\n\t\t\t\t\t\tface.forEach((index) => {\n\t\t\t\t\t\t\tlodash_times(attrib_size, (i) => {\n\t\t\t\t\t\t\t\tconst current_value = attrib.array[index * attrib_size + i];\n\t\t\t\t\t\t\t\tnew_values[new_value_index] = current_value;\n\t\t\t\t\t\t\t\tnew_value_index += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new BufferAttribute(new_values, attrib_size));\n\t\t\t\t}\n\t\t\t\tconst new_indices = lodash_range(points_count);\n\t\t\t\tgeometry.setIndex(new_indices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_face_center_attribute(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_center';\n\t\tconst face_center = new Vector3();\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, face_center);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _add_face_id(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_id';\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst faces = core_geometry.faces();\n\t\t\t\t// const points_count = core_geometry.points_count();\n\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 1, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < faces.length; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst points = face.points;\n\t\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\t\tconst point = points[j];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _transform_faces(core_group: CoreGroup) {\n\t\tconst attrib_name = 'position';\n\t\tconst face_center = new Vector3();\n\t\tconst new_position = new Vector3();\n\t\tconst scale = this.pv.scale;\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tnew_position.x = position.x * scale + face_center.x * (1 - scale);\n\t\t\t\t\t\tnew_position.y = position.y * scale + face_center.y * (1 - scale);\n\t\t\t\t\t\tnew_position.z = position.z * scale + face_center.z * (1 - scale);\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, new_position);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import lodash_flatten from 'lodash/flatten';\n// import lodash_clone from 'lodash/clone';\n// import lodash_merge from 'lodash/merge';\nimport {TypedSopNode} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {CoreLoaderGeometry} from '../../../core/loader/Geometry';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass FileSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('', {\n\t\tdesktop_browse: {file_type: 'geometry'},\n\t\talways_reference_asset: true,\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileSopNode.PARAM_CALLBACK_reload(node as FileSopNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new FileSopParamsConfig();\n\nexport class FileSopNode extends TypedSopNode<FileSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count_to_zero();\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tcook() {\n\t\tconst loader = new CoreLoaderGeometry(this.pv.url);\n\t\tloader.load(this._on_load.bind(this), this._on_error.bind(this));\n\t}\n\n\tprivate _on_load(objects: Object3D[]) {\n\t\tconsole.log('objects', objects);\n\t\tobjects = lodash_flatten(objects);\n\t\tthis.set_objects(objects);\n\t}\n\tprivate _on_error(message: string) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${message})`);\n\t}\n\n\t// if I add this again, check if it can also work for desktop\n\t// async _on_open_url() {\n\t// \tconst url = this.pv.url\n\t// \tconst a = document.createElement('a');\n\t// \ta.href = url;\n\t// \ta.setAttribute('target', '_blank');\n\t// \ta.click();\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: FileSopNode) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n\t// json_data_keys_prefix(){ return this.pv.json_data_keys_prefix }\n\t// json_skip_entries(){ return this.pv.skip_entries }\n\t// json_convert(){ return this.pv.convert }\n\t// json_convert_to_numeric(){ return this.pv.convert_to_numeric }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {Object3D} from 'three/src/core/Object3D';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreString} from '../String';\n\n// import {GeometryLoaderModule} from './Geometry/_Module';\n// import {DRACOLoader} from './Geometry/DRACOLoader';\n// import {JsonData} from './Geometry/JsonData'\n// import {CoreScriptLoader} from './Script';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\n\n// import {DDSLoader} from '../../../modules/three/examples/jsm/loaders/DDSLoader';\n// import {DRACOLoader} from '../../../modules/three/examples/jsm/loaders/DRACOLoader';\n// import {GLTFLoader} from '../../../modules/three/examples/jsm/loaders/GLTFLoader';\n// import {OBJLoader} from '../../../modules/three/examples/jsm/loaders/OBJLoader';\n\n// const GLTFLoaders = ['DDSLoader', 'DRACOLoader', 'GLTFLoader'];\n// const SCRIPT_URLS_BY_EXT = {\n// \tgltf: GLTFLoaders,\n// \tglb: GLTFLoaders,\n// \tobj: 'OBJLoader',\n// };\n// const THREE_LOADER_BY_EXT = {\n// \tgltf: 'GLTFLoader',\n// \tglb: 'GLTFLoader',\n// \tobj: 'OBJLoader',\n// };\n// const DRACO_EXTENSIONS = ['gltf', 'glb']\n// const DRACO_EXTENSIONS = ['drc'];\n\n// export enum LoaderType {\n// \tAUTO = 'auto',\n// \tJSON_DATA = 'json_data',\n// \t// THREEJS_JSON = 'threejs_json',\n// }\n// export const LOADER_TYPES = [\n// \tLoaderType.AUTO,\n// \tLoaderType.JSON_DATA,\n// \t// LoaderType.THREEJS_JSON,\n// ];\n\nexport class CoreLoaderGeometry {\n\tprivate ext: string;\n\n\tconstructor(\n\t\tprivate url: string // private type: LoaderType, // private requester: any\n\t) {\n\t\tconst elements = this.url.split('.');\n\t\tthis.ext = elements[elements.length - 1].toLowerCase();\n\t\tif (this.ext === 'zip') {\n\t\t\tthis.ext = elements[elements.length - 2];\n\t\t}\n\t\t// if(!this.type){\n\t\t// \tconsole.error(\"CoreLoaderGeometry type is not valid\", this.type)\n\t\t// }\n\t}\n\n\tload(on_success: (objects: Object3D[]) => void, on_error: (error: string) => void) {\n\t\tthis.load_auto()\n\t\t\t.then((object) => {\n\t\t\t\ton_success(object);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ton_error(error);\n\t\t\t});\n\t}\n\n\tprivate load_auto(): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = this.url; //.includes('?') ? this.url : `${this.url}?${Date.now()}`;\n\n\t\t\tif (this.ext == 'json') {\n\t\t\t\tfetch(url)\n\t\t\t\t\t.then(async (response) => {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\t\t\tobj_loader.parse(data, (obj) => {\n\t\t\t\t\t\t\tresolve(this.on_load_success(obj.children[0]));\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst loader = await this.loader_for_ext();\n\t\t\t\tif (loader) {\n\t\t\t\t\tloader.load(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\t(object: any) => {\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t\t\t\t\tresolve(object2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(error_message: ErrorEvent) => {\n\t\t\t\t\t\t\treject(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t\treject(error_message);\n\t\t\t\t}\n\t\t\t\t// CoreLoaderGeometry.loader_for_ext().then((loader) => {\n\t\t\t\t// \tif (loader) {\n\t\t\t\t// \t\tloader.load(\n\t\t\t\t// \t\t\turl,\n\t\t\t\t// \t\t\t(object: Object3D) => {\n\t\t\t\t// \t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t// \t\t\t\t\tresolve(object2);\n\t\t\t\t// \t\t\t\t});\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tnull,\n\t\t\t\t// \t\t\t(error_message: string) => {\n\t\t\t\t// \t\t\t\treject(error_message);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t);\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t// \t\tconsole.warn(error_message);\n\t\t\t\t// \t\treject(error_message);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async on_load_success(object: Object3D | BufferGeometry | object): Promise<Object3D[]> {\n\t\t// console.log(\"animation?\", object.animations)\n\t\t// if(object.animations){\n\t\t// \tawait CoreScriptLoader.load('/three/js/utils/SkeletonUtils')\n\t\t// }\n\t\tif (object instanceof Object3D) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'gltf':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\tcase 'glb':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\t// case 'drc':\n\t\t\t\t// \treturn this.on_load_succes_drc(object);\n\t\t\t\tcase 'obj':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tcase 'json':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tdefault:\n\t\t\t\t\treturn [object];\n\t\t\t}\n\t\t}\n\t\tif (object instanceof BufferGeometry) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'drc':\n\t\t\t\t\treturn this.on_load_succes_drc(object);\n\t\t\t\tdefault:\n\t\t\t\t\treturn [new Mesh(object)];\n\t\t\t}\n\t\t}\n\n\t\t// if it's an object, such as returned by glb\n\t\tswitch (this.ext) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tcase 'glb':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate on_load_succes_gltf(gltf: any): Object3D[] {\n\t\tconst scene = gltf['scene'];\n\t\tscene.animations = gltf.animations;\n\n\t\tconsole.log('[scene]', [scene]);\n\t\treturn [scene]; //.children\n\t}\n\tprivate on_load_succes_drc(geometry: BufferGeometry): Object3D[] {\n\t\tconst mat = new MeshLambertMaterial();\n\t\tconst mesh = new Mesh(geometry, mat);\n\n\t\treturn [mesh]; //.children\n\t}\n\n\tasync loader_for_ext() {\n\t\tswitch (this.ext.toLowerCase()) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.loader_for_gltf();\n\t\t\tcase 'glb':\n\t\t\t\treturn this.loader_for_glb();\n\t\t\tcase 'drc':\n\t\t\t\treturn this.loader_for_drc();\n\t\t\tcase 'obj':\n\t\t\t\treturn this.loader_for_obj();\n\t\t}\n\t}\n\n\tasync loader_for_gltf() {\n\t\t// 'DDSLoader', 'DRACOLoader', 'GLTFLoader'\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\t// const {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\treturn new GLTFLoader();\n\t}\n\tasync loader_for_glb() {\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\n\t\tconst loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/gltf/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\tloader.setDRACOLoader(draco_loader);\n\n\t\treturn loader;\n\t}\n\tasync loader_for_drc() {\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\t// const {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\n\t\t// const loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\t// loader.setDRACOLoader(draco_loader);\n\t\t// console.log('loader', loader);\n\t\treturn draco_loader;\n\t}\n\tasync loader_for_obj() {\n\t\tconst {OBJLoader} = await import(`../../../modules/three/examples/jsm/loaders/OBJLoader`);\n\t\treturn new OBJLoader();\n\t}\n\n\t// \tconst ext_lowercase = this.ext.toLowerCase();\n\t// \tlet script_names = SCRIPT_URLS_BY_EXT[ext_lowercase];\n\t// \tif (script_names) {\n\t// \t\tif (!lodash_isArray(script_names)) {\n\t// \t\t\tscript_names = [script_names];\n\t// \t\t}\n\t// \t\tlet imported_modules = {};\n\t// \t\tlet imported_module;\n\t// \t\tfor (let script_name of script_names) {\n\t// \t\t\timported_module = await CoreScriptLoader.load_module_three_loader(script_name);\n\t// \t\t\timported_modules[script_name] = imported_module;\n\t// \t\t}\n\n\t// \t\tconst loader_class_name = THREE_LOADER_BY_EXT[ext_lowercase];\n\t// \t\tconst loader_class = imported_module[loader_class_name];\n\t// \t\tif (loader_class) {\n\t// \t\t\tconst loader = new loader_class();\n\n\t// \t\t\tif (DRACO_EXTENSIONS.includes(ext_lowercase)) {\n\t// \t\t\t\tconst DRACOLoader = imported_modules.DRACOLoader.DRACOLoader;\n\t// \t\t\t\tconst draco_loader = new DRACOLoader();\n\t// \t\t\t\t// const decoder_path = '/three/js/libs/draco/gltf/'\n\t// \t\t\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t// \t\t\t\t// draco_loader.setDecoderPath( decoder_path );\n\t// \t\t\t\tloader.setDRACOLoader(draco_loader);\n\t// \t\t\t}\n\n\t// \t\t\treturn loader;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Group} from 'three/src/objects/Group';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshPhongMaterial} from 'three/src/materials/MeshPhongMaterial';\nimport {Points} from 'three/src/objects/Points';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterials: {},\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\tvar material = state.materials[ materialHash ];\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n\nexport { OBJLoader };\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {ObjectType} from '../../../core/geometry/Constant';\nclass FuseSopParamsConfig extends NodeParamsConfig {\n\tdist = ParamConfig.FLOAT(0.1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new FuseSopParamsConfig();\n\nexport class FuseSopNode extends TypedSopNode<FuseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'fuse';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to fuse together'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tconst new_objects = [];\n\t\tlet new_object;\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tnew_object = this._fuse_core_object(core_object);\n\t\t\tif (new_object) {\n\t\t\t\tnew_objects.push(new_object);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(new_objects);\n\t}\n\n\tprivate _fuse_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tif (!object) {\n\t\t\treturn;\n\t\t}\n\t\tconst points = core_object.points();\n\n\t\tconst precision = this.pv.dist;\n\t\tconst points_by_position: Dictionary<CorePoint[]> = {};\n\t\tfor (let point of points) {\n\t\t\tconst position = point.position();\n\t\t\tconst rounded_position = new Vector3(\n\t\t\t\tMath.round(position.x / precision),\n\t\t\t\tMath.round(position.y / precision),\n\t\t\t\tMath.round(position.z / precision)\n\t\t\t);\n\t\t\tconst key = rounded_position.toArray().join('-');\n\t\t\tpoints_by_position[key] = points_by_position[key] || [];\n\t\t\tpoints_by_position[key].push(point);\n\t\t}\n\n\t\tconst kept_points: CorePoint[] = [];\n\t\tObject.keys(points_by_position).forEach((key) => {\n\t\t\tkept_points.push(points_by_position[key][0]);\n\t\t});\n\n\t\t(object as Mesh).geometry.dispose();\n\t\tif (kept_points.length > 0) {\n\t\t\t(object as Mesh).geometry = CoreGeometry.geometry_from_points(\n\t\t\t\tkept_points,\n\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t);\n\t\t\treturn object;\n\t\t} else {\n\t\t\t// if(object.material){ object.material.dispose() }\n\t\t\t// if(object.parent){ object.parent.remove(object) }\n\t\t}\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {CoreGeometryOperationHexagon} from '../../../core/geometry/operation/Hexagon';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HexagonsSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\thexagon_radius = ParamConfig.FLOAT(0.1);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tpoints_only = ParamConfig.BOOLEAN(0);\n\t// no need to have centers, as all points are centers anyway\n\t//this.add_param( ParamType.TOGGLE, 'centers_only', 0, {visible_if: {points_only: 1}})\n}\nconst ParamsConfig = new HexagonsSopParamsConfig();\n\nexport class HexagonsSopNode extends TypedSopNode<HexagonsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hexagons';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst operation = new CoreGeometryOperationHexagon(this.pv.size, this.pv.hexagon_radius, this.pv.points_only);\n\t\tconst geometry = operation.process();\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tif (this.pv.points_only) {\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t\t} else {\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {BufferAttribute} from 'three/src/core/BufferAttribute'\nconst THREE = {BufferAttribute, BufferGeometry, Vector2}\nimport lodash_flatten from 'lodash/flatten'\n// import {CoreGeometry} from '../Geometry';\n\nexport class CoreGeometryOperationHexagon {\n\tconstructor(\n\t\tprivate _param_size: THREE.Vector2,\n\t\tprivate _param_hexagon_radius: number,\n\t\tprivate _param_points_only: boolean\n\t) {}\n\n\tprocess(): THREE.BufferGeometry {\n\t\tconst side_length = this._param_hexagon_radius\n\t\tconst half_side_length = side_length * 0.5\n\t\tconst step_size = {\n\t\t\tx: side_length,\n\t\t\ty: Math.cos(Math.PI / 6) * this._param_hexagon_radius,\n\t\t}\n\t\tconst steps_count = {\n\t\t\tx: Math.floor(this._param_size.x / step_size.x),\n\t\t\ty: Math.floor(this._param_size.y / step_size.y),\n\t\t}\n\t\tlet positions = []\n\t\tlet indices = []\n\t\tfor (let y = 0; y < steps_count.y; y++) {\n\t\t\tfor (let x = 0; x < steps_count.x; x++) {\n\t\t\t\tpositions.push([\n\t\t\t\t\t-(this._param_size.x * 0.5) +\n\t\t\t\t\t\tx * step_size.x +\n\t\t\t\t\t\t(y % 2 == 0 ? half_side_length : 0),\n\t\t\t\t\t0,\n\t\t\t\t\t-(this._param_size.y * 0.5) + y * step_size.y,\n\t\t\t\t])\n\n\t\t\t\tif (!this._param_points_only) {\n\t\t\t\t\tif (y >= 1) {\n\t\t\t\t\t\tif (x == 0 || x == steps_count.x - 1) {\n\t\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpositions = lodash_flatten(positions)\n\n\t\tconst geometry = new THREE.BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(new Float32Array(positions), 3)\n\t\t)\n\n\t\tif (!this._param_points_only) {\n\t\t\tindices = lodash_flatten(indices)\n\t\t\tgeometry.setIndex(indices)\n\t\t\tgeometry.computeVertexNormals()\n\t\t}\n\n\t\treturn geometry\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Group} from 'three/src/objects/Group';\nconst THREE = {Group, Object3D};\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGroup} from '../../../Core/Geometry/Group';\n// import {CoreConstant} from '../../../Core/Geometry/Constant'\n\nexport enum HierarchyMode {\n\tADD_PARENT = 'add_parent',\n\tREMOVE_PARENT = 'remove_parent',\n}\nexport const HIERARCHY_MODES: Array<HierarchyMode> = [HierarchyMode.ADD_PARENT, HierarchyMode.REMOVE_PARENT];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HierarchySopParamsConfig extends NodeParamsConfig {\n\tmode = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: HIERARCHY_MODES.map((m, i) => {\n\t\t\t\treturn {name: m, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tlevels = ParamConfig.INTEGER(1, {range: [0, 5]});\n}\nconst ParamsConfig = new HierarchySopParamsConfig();\n\nexport class HierarchySopNode extends TypedSopNode<HierarchySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hierarchy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add or remove parents to/from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\t// const group_wrapper = new CoreGroup(group);\n\n\t\tif (HIERARCHY_MODES[this.pv.mode] == HierarchyMode.ADD_PARENT) {\n\t\t\tconst objects = this._add_parent_to_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t} else {\n\t\t\tconst objects = this._remove_parent_from_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t}\n\t}\n\n\tprivate _add_parent_to_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tlet new_object;\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tnew_object = this._add_parent_to_object(object);\n\t\t\t\tif (new_object) {\n\t\t\t\t\tnew_objects.push(new_object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\tprivate _add_parent_to_object(object: THREE.Object3D): THREE.Object3D {\n\t\tlet new_parent = new THREE.Group();\n\n\t\t// while(child = object.children[0]){\n\t\tnew_parent.add(object);\n\t\t// }\n\n\t\tif (this.pv.levels > 0) {\n\t\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\t\t// for (let i of lodash_range(this.pv.levels - 1)) {\n\t\t\t\tnew_parent = this._add_new_parent(new_parent);\n\t\t\t}\n\t\t}\n\n\t\treturn new_parent;\n\t}\n\n\tprivate _add_new_parent(object: THREE.Object3D): THREE.Group {\n\t\tconst new_parent2 = new THREE.Group();\n\t\tnew_parent2.add(object);\n\t\treturn new_parent2;\n\t}\n\n\tprivate _remove_parent_from_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tconst new_children = this._remove_parent_from_object(object);\n\t\t\t\tfor (let new_child of new_children) {\n\t\t\t\t\tnew_objects.push(new_child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\n\tprivate _remove_parent_from_object(object: THREE.Object3D): THREE.Object3D[] {\n\t\tlet current_children = object.children;\n\n\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\tcurrent_children = this._get_children_from_objects(current_children);\n\t\t}\n\n\t\treturn current_children;\n\t}\n\n\tprivate _get_children_from_objects(objects: THREE.Object3D[]): THREE.Object3D[] {\n\t\tlet object;\n\t\tconst children: Object3D[] = [];\n\t\twhile ((object = objects.pop())) {\n\t\t\tif (object.children) {\n\t\t\t\tfor (let child of object.children) {\n\t\t\t\t\tchildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {ObjectTypeByObject} from '../../../core/geometry/Constant';\nclass InstanceSopParamsConfig extends NodeParamsConfig {\n\tattributes_to_copy = ParamConfig.STRING('instance*');\n\tapply_material = ParamConfig.BOOLEAN(1);\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tvisible_if: {apply_material: 1},\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new InstanceSopParamsConfig();\n\nexport class InstanceSopNode extends TypedSopNode<InstanceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance';\n\t}\n\n\tprivate _globals_handler: GlobalsGeometryHandler | undefined;\n\tprivate _geometry: BufferGeometry | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be instanciated', 'points to instance to'];\n\t}\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group_to_instance = input_contents[0];\n\t\tthis._geometry = undefined;\n\n\t\tconst object_to_instance = core_group_to_instance.objects()[0];\n\t\tif (object_to_instance) {\n\t\t\tconst geometry_to_instance = object_to_instance.geometry;\n\t\t\tif (geometry_to_instance) {\n\t\t\t\tconst core_group = input_contents[1];\n\t\t\t\tthis._create_instance(geometry_to_instance, core_group);\n\t\t\t}\n\t\t}\n\n\t\t// const type = object_to_instance.constructor.name;\n\t\tif (this._geometry) {\n\t\t\tconst type = ObjectTypeByObject(object_to_instance);\n\t\t\tif (type) {\n\t\t\t\tconst object = this.create_object(this._geometry, type);\n\t\t\t\t// object.customDepthMaterial = this._create_depth_material();\n\n\t\t\t\tif (this.pv.apply_material) {\n\t\t\t\t\tawait this._apply_material(object as Mesh);\n\t\t\t\t}\n\n\t\t\t\tthis.set_object(object);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tasync _apply_material(object: Mesh) {\n\t\tconst found_node = this.p.material.found_node();\n\t\tif (found_node) {\n\t\t\tif (found_node.node_context() == NodeContext.MAT) {\n\t\t\t\tconst material_node = found_node as BaseMatNodeType;\n\t\t\t\tthis._globals_handler = this._globals_handler || new GlobalsGeometryHandler();\n\t\t\t\tconst mat_builder_node = material_node as BaseBuilderMatNodeType;\n\t\t\t\tif (mat_builder_node.assembler_controller) {\n\t\t\t\t\tmat_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tconst container = await material_node.request_container();\n\t\t\t\tconst material: Material = container.material();\n\t\t\t\tif (material) {\n\t\t\t\t\tobject.material = material;\n\t\t\t\t\tCoreMaterial.apply_custom_materials(object, material);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a material');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('material node invalid');\n\t\t}\n\t}\n\n\t_create_instance(geometry_to_instance: BufferGeometry, template_core_group: CoreGroup) {\n\t\tthis._geometry = CoreInstancer.create_instance_buffer_geo(\n\t\t\tgeometry_to_instance,\n\t\t\ttemplate_core_group,\n\t\t\tthis.pv.attributes_to_copy\n\t\t);\n\t}\n\n\tprivate _on_create() {\n\t\tconst root = this.scene.root;\n\t\tconst mat_type = 'materials';\n\t\tconst mesh_lambert_builder_type = 'mesh_lambert_builder';\n\t\tconst mat_name = 'MAT';\n\t\tconst mesh_lambert_mat_name = 'mesh_lambert_builder1';\n\t\tlet MAT: MaterialsObjNode | undefined;\n\t\tconst node_with_mat_name = root.node(mat_name);\n\t\tif (node_with_mat_name && node_with_mat_name.type == mat_type) {\n\t\t\tMAT = node_with_mat_name as MaterialsObjNode;\n\t\t} else {\n\t\t\tMAT = root.create_node('materials');\n\t\t\tMAT.set_name(mat_name);\n\t\t}\n\n\t\tconst create_mesh_lambert = (MAT: MaterialsObjNode, mesh_lambert_mat_name: string) => {\n\t\t\tconst mat_node = MAT.create_node(mesh_lambert_builder_type);\n\t\t\tmat_node.set_name(mesh_lambert_mat_name);\n\n\t\t\tconst instance_transform1 = mat_node.create_node('instance_transform');\n\t\t\tlet output1 = mat_node.node('output1');\n\t\t\tif (!output1) {\n\t\t\t\toutput1 = mat_node.create_node('output');\n\t\t\t}\n\t\t\toutput1.set_input('position', instance_transform1, 'position');\n\t\t\toutput1.set_input('normal', instance_transform1, 'normal');\n\n\t\t\treturn mat_node;\n\t\t};\n\t\tconst mesh_lambert_mat = MAT.node(mesh_lambert_mat_name) || create_mesh_lambert(MAT, mesh_lambert_mat_name);\n\n\t\tthis.p.material.set(mesh_lambert_mat.full_path());\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nconst THREE = {Vector3};\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass JitterSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tseed = ParamConfig.INTEGER(1, {range: [0, 100]});\n}\nconst ParamsConfig = new JitterSopParamsConfig();\n\nexport class JitterSopNode extends TypedSopNode<JitterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'jitter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to jitter points of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.points().forEach((point, i) => {\n\t\t\t// TODO: replace by a pseudo random\n\t\t\tconst offset = new THREE.Vector3(\n\t\t\t\t2 * (CoreMath.rand(i * 75 + 764 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 5678 + 3653 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 657 + 48464 + this.pv.seed) - 0.5)\n\t\t\t);\n\t\t\toffset.normalize();\n\t\t\toffset.multiplyScalar(this.pv.amount);\n\n\t\t\tconst new_position = point\n\t\t\t\t.position()\n\t\t\t\t.clone()\n\t\t\t\t.add(offset);\n\t\t\tpoint.set_position(new_position);\n\t\t});\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass LayerSopParamsConfig extends NodeParamsConfig {\n\tlayer = ParamConfig.INTEGER(0, {\n\t\trange: [0, 31],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new LayerSopParamsConfig();\n\nexport class LayerSopNode extends TypedSopNode<LayerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'layer';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change layers of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.layers.set(this.pv.layer);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport lodash_times from 'lodash/times';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LineSopParamsConfig extends NodeParamsConfig {\n\tlength = ParamConfig.FLOAT(1, {range: [0, 10]});\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [2, 100],\n\t\trange_locked: [true, false],\n\t});\n\torigin = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new LineSopParamsConfig();\n\nexport class LineSopNode extends TypedSopNode<LineSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'line';\n\t}\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst points_count = Math.max(2, this.pv.points_count);\n\n\t\tconst positions: number[] = new Array(points_count * 3);\n\t\tconst indices: number[] = new Array(points_count);\n\n\t\tconst last_pt = this.pv.direction\n\t\t\t.clone()\n\t\t\t.normalize()\n\t\t\t.multiplyScalar(this.pv.length);\n\n\t\tlodash_times(points_count, (i) => {\n\t\t\tconst i_n = i / (points_count - 1);\n\t\t\tconst point = last_pt.clone().multiplyScalar(i_n);\n\t\t\tpoint.add(this.pv.origin);\n\t\t\tpoint.toArray(positions, i * 3);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices[(i - 1) * 2] = i - 1;\n\t\t\t\tindices[(i - 1) * 2 + 1] = i;\n\t\t\t}\n\t\t});\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {BaseNodeMat} from '../Mat/_Base'\n\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nclass MaterialSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tmaterial = ParamConfig.OPERATOR_PATH('/MAT/mesh_standard1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new MaterialSopParamsConfig();\n\nexport class MaterialSopNode extends TypedSopNode<MaterialSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'material';\n\t}\n\n\t_param_material: BaseMatNodeType | undefined;\n\t_globals_handler: GlobalsGeometryHandler = new GlobalsGeometryHandler();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to assign material to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\t// TODO: optimize by not fetching the material node everytime\n\t// and maybe have a method in all operator_path params to do that quickly\n\t// TODO: does this apply the material to only 1 node?\n\tasync cook(core_groups: CoreGroup[]) {\n\t\t// let container = input_containers[0];\n\t\t// const group =\tcontainer.group(); // {clone: this.do_clone_inputs()})\n\t\tconst core_group = core_groups[0];\n\n\t\tconst node = this.p.material.found_node();\n\t\tif (node) {\n\t\t\tif (node.node_context() != NodeContext.MAT) {\n\t\t\t\tthis.states.error.set('node is not a material');\n\t\t\t} else {\n\t\t\t\tconst material_node = node as BaseMatNodeType;\n\t\t\t\tconst material = material_node.material;\n\t\t\t\tif (material instanceof ShaderMaterial) {\n\t\t\t\t\tconst material_builder_node = node as BaseBuilderMatNodeType;\n\t\t\t\t\tmaterial_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tawait material_node.request_container();\n\t\t\t\tif (material) {\n\t\t\t\t\tfor (let object of core_group.objects_from_group(this.pv.group)) {\n\t\t\t\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\t\t\t\tobject.traverse((grand_child) => {\n\t\t\t\t\t\t\t\tthis.apply_material(grand_child, material);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.apply_material(object, material);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.set_core_group(core_group);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`material invalid. (error: '${material_node.states.error.message}')`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node '${this.pv.material}' not found`);\n\t\t}\n\t}\n\n\tapply_material(object: Object3D, material: Material) {\n\t\tconst object_with_material = object as Mesh;\n\t\t// if (object.material != null) {\n\t\t// \tobject.material.dispose();\n\t\t// }\n\t\t// TODO: do I really need to clone this material?\n\t\t// does it get cloned when a node fetches the container?\n\t\t// I may only need to clone it for the copy SOP\n\t\tobject_with_material.material = material;\n\t\tCoreMaterial.apply_custom_materials(object, material);\n\t}\n}\n","// import lodash_times from 'lodash/times';\n// import lodash_each from 'lodash/each';\n// import lodash_difference from 'lodash/difference';\n// import lodash_keys from 'lodash/keys';\n// import {Object3D} from 'three/src/core/Object3D';\n// import {Group} from 'three/src/objects/Group';\n// import {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferAttribute, Group, Object3D};\nimport {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {CoreConstant} from '../../../Core/Geometry/Constant';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Points} from 'three/src/objects/Points';\ntype ObjectsByType = {[key in ObjectType]: Object3DWithGeometry[]};\ntype ObjectTypes = Array<ObjectType>;\n\nconst INPUT_NAME = 'geometry to merge';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MergeSopParamsConfig extends NodeParamsConfig {\n\tcompact = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new MergeSopParamsConfig();\n\nexport class MergeSopNode extends TypedSopNode<MergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'merge';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 4);\n\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('compress-arrows-alt');\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tlet all_objects: Object3DWithGeometry[] = []; //new Group()\n\t\tfor (let input_core_group of input_contents) {\n\t\t\tif (input_core_group) {\n\t\t\t\tconst objects = input_core_group.objects();\n\t\t\t\tfor (let object of objects) {\n\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\tall_objects.push(child as Object3DWithGeometry);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.pv.compact) {\n\t\t\tall_objects = this._make_compact(all_objects);\n\t\t}\n\t\tthis.set_objects(all_objects);\n\t}\n\n\t_make_compact(all_objects: Object3DWithGeometry[]): Object3DWithGeometry[] {\n\t\tconst objects_by_type: ObjectsByType = {\n\t\t\t[ObjectType.MESH]: [],\n\t\t\t[ObjectType.POINTS]: [],\n\t\t\t[ObjectType.LINE_SEGMENTS]: [],\n\t\t};\n\t\tconst merged_objects: Object3DWithGeometry[] = [];\n\n\t\tfor (let object of all_objects) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst object = object3d as Object3DWithGeometry;\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\t// const type = child.constructor.name;\n\t\t\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\t\t\tobjects_by_type[ObjectType.MESH].push(object);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((object as LineSegments).isLineSegments) {\n\t\t\t\t\t\t\tobjects_by_type[ObjectType.LINE_SEGMENTS].push(object);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((object as Points).isPoints) {\n\t\t\t\t\t\t\t\tobjects_by_type[ObjectType.POINTS].push(object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfor (let type of Object.keys(objects_by_type) as ObjectTypes) {\n\t\t\tconst objects = objects_by_type[type];\n\n\t\t\tconst geometries = [];\n\t\t\tfor (let object of objects) {\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tgeometry.applyMatrix4(object.matrix);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\n\t\t\t// TODO: test that this works with geometries with same attributes\n\t\t\tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t\tif (merged_geometry) {\n\t\t\t\tconst object = this.create_object(merged_geometry, type);\n\t\t\t\tmerged_objects.push(object);\n\t\t\t}\n\n\t\t\t// objects.forEach( object=> {\n\t\t\t// \tif (object.parent != null) {\n\t\t\t// \t\tobject.parent.remove(object);\n\t\t\t// \t}\n\t\t\t// \tif (object.geometry != null) {\n\t\t\t// \t\tobject.geometry.dispose();\n\t\t\t// \t}\n\t\t\t// \t(object.material != null ? object.material.dispose() : undefined);\n\t\t\t// });\n\t\t}\n\t\treturn merged_objects;\n\t}\n}\n\n// _add_missing_attributes: (geo0, geo1)->\n// \tgeo0_attribute_names = lodash_keys(geo0.attributes)\n// \tgeo1_attribute_names = lodash_keys(geo1.attributes)\n\n// \tattributes_not_in_geo0 = lodash_difference(geo1_attribute_names, geo0_attribute_names)\n// \tattributes_not_in_geo1 = lodash_difference(geo0_attribute_names, geo1_attribute_names)\n\n// \tlodash_each attributes_not_in_geo0, (attribute_not_in_geo0)=>\n// \t\tthis._add_attribute(geo0, attribute_not_in_geo0, geo1.attributes[attribute_not_in_geo0])\n// \tlodash_each attributes_not_in_geo1, (attribute_not_in_geo1)=>\n// \t\tthis._add_attribute(geo1, attribute_not_in_geo1, geo0.attributes[attribute_not_in_geo1])\n\n// _add_attribute: (geo, attrib_name, attribute_template)->\n\n// \titem_size = attribute_template['itemSize']\n// \tnormalized = attribute_template['normalized']\n// \tpoints_count = geo.getAttribute('position').array.length / 3\n\n// \traw_values = []\n// \tlodash_times points_count, (i)->\n// \t\tlodash_times item_size, (j)->\n// \t\t\traw_values.push(0)\n\n// \tvalues = new Float32Array(raw_values)\n// \tgeo.setAttribute( attrib_name, new BufferAttribute( values, item_size, normalized) )\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypeAssert} from '../../poly/Assert';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {SimplexNoise} from '../../../../modules/three/examples/jsm/math/SimplexNoise';\n\nenum Operation {\n\tADD = 'add',\n\tSET = 'set',\n\tMULT = 'mult',\n\tSUBSTRACT = 'substract',\n\tDIVIDE = 'divide',\n}\ntype Operations = Array<Operation>;\nconst Operations: Operations = [Operation.ADD, Operation.SET, Operation.MULT, Operation.SUBSTRACT, Operation.DIVIDE];\n\n// const COMPONENT_OFFSETS = [\n// \tnew Vector3(545, 125454, 2142),\n// \tnew Vector3(425, 25746, 95242),\n// \tnew Vector3(765132, 21, 9245),\n// ]\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NoiseSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tfreq = ParamConfig.VECTOR3([1, 1, 1]);\n\toffset = ParamConfig.VECTOR3([0, 0, 0]);\n\toctaves = ParamConfig.INTEGER(3, {\n\t\trange: [1, 8],\n\t\trange_locked: [true, false],\n\t});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseed = ParamConfig.INTEGER(0, {range: [0, 100]});\n\tseparator = ParamConfig.SEPARATOR();\n\tuse_normals = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('position');\n\toperation = ParamConfig.INTEGER(Operations.indexOf(Operation.ADD), {\n\t\tmenu: {\n\t\t\tentries: Operations.map((operation) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: operation,\n\t\t\t\t\tvalue: Operations.indexOf(operation),\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcompute_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new NoiseSopParamsConfig();\n\nexport class NoiseSopNode extends TypedSopNode<NoiseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\t// _param_amount: number;\n\t// _param_offset: Vector3;\n\t// _param_freq: Vector3;\n\t// _param_seed: number;\n\t// _param_use_normals: boolean;\n\t// _param_attrib_name: string;\n\t// _param_operation: number;\n\t// _param_compute_normals: boolean;\n\n\tprivate _simplex_by_seed: Map<number, SimplexNoise> = new Map();\n\n\tprivate _rest_core_group_timestamp: number | undefined;\n\tprivate _rest_points: CorePoint[] = [];\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add noise to', 'rest geometry'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_rest = input_contents[1];\n\n\t\tconst dest_points = core_group.points();\n\t\tif (core_group_rest) {\n\t\t\tif (\n\t\t\t\tthis._rest_core_group_timestamp == null ||\n\t\t\t\tthis._rest_core_group_timestamp != core_group_rest.timestamp()\n\t\t\t) {\n\t\t\t\tthis._rest_points = core_group_rest.points();\n\t\t\t\tthis._rest_core_group_timestamp = core_group_rest.timestamp();\n\t\t\t}\n\t\t}\n\n\t\t// const {SimplexNoise} = await import(`three/examples/jsm/math/SimplexNoise`)\n\t\tconst simplex = this._get_simplex();\n\n\t\tconst use_normals = this.pv.use_normals && core_group.has_attrib('normal');\n\t\tconst target_attrib_size = core_group.attrib_size(this.pv.attrib_name);\n\n\t\tfor (let i = 0; i < dest_points.length; i++) {\n\t\t\tconst dest_point = dest_points[i];\n\t\t\tlet rest_point = core_group_rest ? this._rest_points[i] : dest_point;\n\t\t\tconst current_attrib_value = rest_point.attrib_value(this.pv.attrib_name);\n\t\t\tconst pos = rest_point\n\t\t\t\t.position()\n\t\t\t\t.add(this.pv.offset)\n\t\t\t\t.multiply(this.pv.freq);\n\n\t\t\tlet noise_value = (() => {\n\t\t\t\tif (use_normals) {\n\t\t\t\t\tconst normal = rest_point.attrib_value('normal');\n\t\t\t\t\tconst noise = this.pv.amount * this._fbm(simplex, pos.x, pos.y, pos.z);\n\t\t\t\t\treturn normal.clone().multiplyScalar(noise);\n\t\t\t\t\t//vertex.add(noise_vector)\n\t\t\t\t} else {\n\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 545, pos.y + 125454, pos.z + 2142),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x - 425, pos.y - 25746, pos.z + 95242),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 765132, pos.y + 21, pos.z - 9245)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tnoise_value = (() => {\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn noise_value.x;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturn new Vector2(noise_value.x, noise_value.y);\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturn noise_value;\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tconst new_attrib_value = (() => {\n\t\t\t\tconst operation = Operations[this.pv.operation];\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value + noise_value;\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value * noise_value;\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value / noise_value;\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value - noise_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value.add(noise_value);\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.multiply(noise_value);\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value.divide(noise_value);\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.sub(noise_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tdest_point.set_attrib_value(this.pv.attrib_name, new_attrib_value);\n\t\t}\n\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tfor (let geometry of core_group.geometries()) {\n\t\t\t\t(geometry.getAttribute(this.pv.attrib_name) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.pv.compute_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _fbm(simplex: SimplexNoise, x: number, y: number, z: number): number {\n\t\tlet value = 0.0;\n\t\tlet amplitude = 1.0;\n\t\tfor (let i = 0; i < this.pv.octaves; i++) {\n\t\t\tvalue += amplitude * simplex.noise3d(x, y, z);\n\t\t\tx *= this.pv.freq_increase;\n\t\t\ty *= this.pv.freq_increase;\n\t\t\tz *= this.pv.freq_increase;\n\t\t\tamplitude *= this.pv.amp_attenuation;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _get_simplex(): SimplexNoise {\n\t\tconst simplex = this._simplex_by_seed.get(this.pv.seed);\n\t\tif (simplex) {\n\t\t\treturn simplex;\n\t\t} else {\n\t\t\tconst simplex = this._create_simplex();\n\t\t\tthis._simplex_by_seed.set(this.pv.seed, simplex);\n\t\t\treturn simplex;\n\t\t}\n\t}\n\tprivate _create_simplex(): SimplexNoise {\n\t\tconst seed = this.pv.seed;\n\t\tconst random_generator = {\n\t\t\trandom: function() {\n\t\t\t\treturn CoreMath.rand_float(seed);\n\t\t\t},\n\t\t};\n\t\tconst simplex = new SimplexNoise(random_generator);\n\t\t// for (let key of Object.keys(this._simplex_by_seed)) {\n\t\tthis._simplex_by_seed.delete(seed);\n\t\t// }\n\t\treturn simplex;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n","// import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const DEFAULT_NORMAL = new Vector3(0, 0, 1);\nconst NORMAL_ATTRIB_NAME = 'normal';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NormalsSopParamsConfig extends NodeParamsConfig {\n\tedit = ParamConfig.BOOLEAN(0);\n\tupdate_x = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tx = ParamConfig.FLOAT('@N.x', {\n\t\tvisible_if: {update_x: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\ty = ParamConfig.FLOAT('@N.y', {\n\t\tvisible_if: {update_y: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tz = ParamConfig.FLOAT('@N.z', {\n\t\tvisible_if: {update_z: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\n\trecompute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 0},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new NormalsSopParamsConfig();\n\nexport class NormalsSopNode extends TypedSopNode<NormalsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'normals';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update normals of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.edit) {\n\t\t\tawait this._eval_expressions_for_core_group(core_group);\n\t\t} else {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tif (this.pv.invert) {\n\t\t\tthis._invert_normals(core_group);\n\t\t}\n\n\t\t// add attr if not present\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\t\t// \t\tif(!geometry.getAttribute('normal')){\n\t\t// \t\t\tconst position_values = geometry.attributes['position'].array;\n\t\t// \t\t\tconst normal_values = [];\n\t\t// \t\t\tposition_values.forEach(p=> normal_values.push(0));\n\t\t// \t\t\tgeometry.setAttribute('normal', new Float32BufferAttribute(normal_values, 3));\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (this.pv.edit) {\n\t\t// \tthis._eval_expressions(core_group);\n\t\t// } else {\n\t\t// \tif(this.pv.recompute){\n\t\t// \t\tcore_group.compute_vertex_normals()\n\t\t// \t}\n\t\t// }\n\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\n\t\t// \t\tif (this.pv.invert) {\n\t\t// \t\t\tthis._invert_normals(geometry);\n\t\t// \t\t}\n\n\t\t// \t\tif (!this.pv.edit) {\n\t\t// \t\t\tgeometry.computeVertexNormals();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\t// const points = core_group.points();\n\n\t\t// const attrib_name = 'normal';\n\t\t// for(let point of points){\n\n\t\t// \tthis.context().set_entity(point);\n\n\t\t// \tthis.param(attrib_name).eval(val=> {\n\t\t// \t\tval.normalize();\n\t\t// \t\tpoint.set_attrib_value(attrib_name, val);\n\t\t// \t});\n\t\t// }\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\t}\n\tprivate async _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(NORMAL_ATTRIB_NAME).array as number[];\n\n\t\t// x\n\t\tif (this.pv.update_x) {\n\t\t\tif (this.p.x.has_expression() && this.p.x.expression_controller) {\n\t\t\t\tawait this.p.x.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 0] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 0] = this.pv.x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// y\n\t\tif (this.pv.update_y) {\n\t\t\tif (this.p.y.has_expression() && this.p.y.expression_controller) {\n\t\t\t\tawait this.p.y.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 1] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 1] = this.pv.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// z\n\t\tif (this.pv.update_z) {\n\t\t\tif (this.p.z.has_expression() && this.p.z.expression_controller) {\n\t\t\t\tawait this.p.z.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 2] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 2] = this.pv.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_init_normal(core_geometry: CoreGeometry) {\n\t// \tif (!core_geometry.has_attrib(NORMAL_ATTRIB_NAME)) {\n\t// \t\tcore_geometry.add_numeric_attrib(NORMAL_ATTRIB_NAME, 3, DEFAULT_NORMAL);\n\t// \t}\n\t// }\n\n\tprivate _invert_normals(core_group: CoreGroup) {\n\t\t// this._create_init_normal();\n\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tconst geometry = core_object.core_geometry().geometry();\n\t\t\tconst normal_attrib = geometry.attributes[NORMAL_ATTRIB_NAME];\n\t\t\tif (normal_attrib) {\n\t\t\t\tconst array = normal_attrib.array as number[];\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] *= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// let index_attrib;\n\t\t// if ((index_attrib = geometry.getIndex()) != null) {\n\t\t// \tconst { array } = index_attrib;\n\n\t\t// \tconst faces_count = array.length / 3;\n\t\t// \tfor(let i=0; i<faces_count; i++){\n\t\t// \t\tconst tmp = array[i*3];\n\t\t// \t\tarray[i*3] = array[(i*3)+2];\n\t\t// \t\tarray[(i*3)+2] = tmp;\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\t// \tconst points = geometry_wrapper.points();\n\n\t\t// \tconst attrib_name = 'normal';\n\t\t// \tfor(let point of points){\n\t\t// \t\tconst normal = point.normal();\n\t\t// \t\tnormal.multiplyScalar(-1);\n\t\t// \t\tpoint.set_attrib_value(attrib_name, normal);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass NullSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new NullSopParamsConfig();\n\nexport class NullSopNode extends TypedSopNode<NullSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\tthis.ui_data.set_border_radius(1000);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n}\n","import {TypedSopNode, BaseSopNodeType} from './_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {CoreWalker} from '../../../Core/Walker';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GeometryContainer} from '../../containers/Geometry';\nclass ObjectMergeSopParamsConfig extends NodeParamsConfig {\n\tgeometry = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n}\nconst ParamsConfig = new ObjectMergeSopParamsConfig();\n\nexport class ObjectMergeSopNode extends TypedSopNode<ObjectMergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'object_merge';\n\t}\n\n\t// _param_apply_parent_transform: boolean\n\tinitialize_node() {}\n\n\tasync cook(input_containers: CoreGroup[]) {\n\t\tconst geometry_node = this.p.geometry.found_node();\n\t\tif (geometry_node) {\n\t\t\tif (geometry_node.node_context() == NodeContext.SOP) {\n\t\t\t\tconst container = await geometry_node.request_container();\n\t\t\t\tthis.import_input(geometry_node as BaseSopNodeType, container);\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a geometry');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.geometry}'`);\n\t\t}\n\t}\n\n\timport_input(geometry_node: BaseSopNodeType, container: GeometryContainer) {\n\t\tlet core_group;\n\t\t// I unfortunately need to do a clone here,\n\t\t// because if 2 objectmerge nodes import the same geometry,\n\t\t// they would try to place it under 2 different geo nodes\n\t\t// which is not possible\n\t\tif ((core_group = container.core_content_cloned()) != null) {\n\t\t\t// cannot do that until i know how to make it recook\n\t\t\t// when the obj changes\n\t\t\t// if (this._param_apply_parent_transform){\n\t\t\t// \tconst matrix = geometry_node.parent().object().matrixWorld\n\t\t\t// \tgroup.children.forEach(child=>{\n\t\t\t// \t\tconsole.log(child)\n\t\t\t// \t\tconst geometry = child.geometry\n\t\t\t// \t\tif(geometry){\n\t\t\t// \t\t\tgeometry.applyMatrix(matrix)\n\t\t\t// \t\t}\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.states.error.set('invalid target');\n\t\t}\n\t}\n\n\t// geometry_node() {\n\t// \tif ((this._param_geometry != null) && (this._param_geometry !== '')) {\n\t// \t\tCoreWalker.find_node(this, this._param_geometry);\n\t// \t}\n\t// }\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {Float32BufferAttribute};\nimport {TypedSopNode} from './_Base';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../Core/Geometry/Geometry'\n// import {CorePoint} from '../../../Core/Geometry/Point'\n\n// https://github.com/wwwtyro/geo-ambient-occlusion\nimport geoao from 'geo-ambient-occlusion';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass OcclusionSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING('occlusion');\n\tsamples = ParamConfig.INTEGER(256, {\n\t\trange: [1, 256],\n\t\trange_locked: [true, false],\n\t});\n\tsep = ParamConfig.SEPARATOR();\n\tbuffer_resolution = ParamConfig.INTEGER(512);\n\tbias = ParamConfig.FLOAT(0.01);\n}\nconst ParamsConfig = new OcclusionSopParamsConfig();\n\nexport class OcclusionSopNode extends TypedSopNode<OcclusionSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'occlusion';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tawait this._process_occlusion_on_object(core_object);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _process_occlusion_on_object(core_object: CoreObject) {\n\t\tconst geometry = core_object.core_geometry().geometry();\n\n\t\tconst position_array = geometry.attributes.position.array;\n\t\tconst normal_array = geometry.attributes.normal.array;\n\t\tconst index_array = geometry.getIndex()?.array;\n\t\tconst aoSampler = geoao(position_array, {\n\t\t\tcells: index_array,\n\t\t\tnormals: normal_array,\n\t\t\tresolution: this.pv.buffer_resolution,\n\t\t\tbias: this.pv.bias,\n\t\t});\n\n\t\tfor (let i = 0; i < this.pv.samples; i++) {\n\t\t\taoSampler.sample();\n\t\t}\n\t\tconst ao = aoSampler.report();\n\n\t\tgeometry.setAttribute(this.pv.attrib_name, new THREE.Float32BufferAttribute(ao, 1));\n\n\t\taoSampler.dispose();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// import {Lifespan} from './Concerns/ParticlesSystemGPU/Lifespan';\n// import {GPUCompute} from './Concerns/ParticlesSystemGPU/GPUCompute';\n// import {RenderMaterial} from './Concerns/ParticlesSystemGPU/RenderMaterial';\n// import {ParticleShaderBuilder} from './Concerns/ParticlesSystemGPU/ParticleShaderBuilder'\n// import {AssemblerOwner} from '../../../Engine/Node/Gl/Assembler/Owner';\nimport {ShaderAssemblerParticles} from '../gl/code/assemblers/particles/Particles';\nimport {GlobalsTextureHandler} from '../gl/code/globals/Texture';\n\n// SPECS:\n// - simulation shaders should update the particles at any frame, and resimulate accordingly when at later frames\n// - render material should update at any frame, without having to resimulate\n// - changing the input will recompute, when on first frame only (otherwise an animated geo could make it recompute all the time)\n\n// AssemblerOwner(\n// \tRenderMaterial(\n// \tLifespan(\n// \tGPUCompute(\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ParticlesSystemGpuRenderController} from './utils/ParticlesSystemGPU/RenderController';\nimport {ParticlesSystemGpuComputeController} from './utils/ParticlesSystemGPU/GPUComputeController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShaderName} from '../utils/shaders/ShaderName';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {PointsBuilderMatNode} from '../mat/PointsBuilder';\nimport {ConstantGlNode} from '../gl/Constant';\nclass ParticlesSystemGpuSopParamsConfig extends NodeParamsConfig {\n\t// gpu compute\n\tstart_frame = ParamConfig.FLOAT(1, {range: [1, 100]});\n\tauto_textures_size = ParamConfig.BOOLEAN(1);\n\tmax_textures_size = ParamConfig.VECTOR2([1024, 1024], {visible_if: {auto_textures_size: 1}});\n\ttextures_size = ParamConfig.VECTOR2([64, 64], {visible_if: {auto_textures_size: 0}});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tParticlesSystemGpuSopNode.PARAM_CALLBACK_reset(node as ParticlesSystemGpuSopNode);\n\t\t},\n\t});\n\n\t// render\n\t// this.self.within_param_folder(\"setup\", () => {\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new ParticlesSystemGpuSopParamsConfig();\nexport class ParticlesSystemGpuSopNode extends TypedSopNode<ParticlesSystemGpuSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'particles_system_gpu';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<ShaderAssemblerParticles> = new GlAssemblerController<\n\t\tShaderAssemblerParticles\n\t>(this, ShaderAssemblerParticles);\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tpublic readonly gpu_controller = new ParticlesSystemGpuComputeController(this);\n\tpublic readonly render_controller = new ParticlesSystemGpuRenderController(this);\n\n\tstatic require_webgl2() {\n\t\treturn true;\n\t}\n\tstatic PARAM_CALLBACK_reset(node: ParticlesSystemGpuSopNode) {\n\t\tnode.PARAM_CALLBACK_reset();\n\t}\n\tPARAM_CALLBACK_reset() {\n\t\tthis.gpu_controller.reset_gpu_compute_and_set_dirty();\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to emit particles from'];\n\t}\n\n\tprivate _reset_material_if_dirty_bound = this._reset_material_if_dirty.bind(this);\n\tprotected _children_controller_context = NodeContext.GL;\n\tprivate _on_create_prepare_material_bound = this._on_create_prepare_material.bind(this);\n\tinitialize_node() {\n\t\t// this._init_common_shader_builder(ShaderAssemblerParticles, {\n\t\t// \thas_display_flag: true,\n\t\t// \tupdate_on_dirty: false,\n\t\t// });\n\n\t\tthis.io.inputs.set_count(1);\n\t\t// set to never at the moment\n\t\t// otherwise the input is cloned on every frame inside cook_main()\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\n\t\tthis.add_post_dirty_hook('_reset_material_if_dirty', this._reset_material_if_dirty_bound);\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_prepare_material_bound);\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t// create_params() {\n\t// \t// this._create_gpu_compute_params();\n\t// \t// this._create_render_params();\n\t// \tthis._create_lifespan_params();\n\t// }\n\n\tasync _reset_material_if_dirty() {\n\t\t// if(\n\t\t// \tdirty_trigger.graph_node_id &&\n\t\t// \tthis._render_material_node &&\n\t\t// \tdirty_trigger.graph_node_id() == this._render_material_node.graph_node_id()\n\t\t// ){\n\t\t// \tthis.remove_dirty_state()\n\t\t// } else {\n\t\tif (this.p.material.is_dirty) {\n\t\t\tthis.render_controller.reset_render_material();\n\t\t\tif (!this.is_on_frame_start()) {\n\t\t\t\tawait this.render_controller.init_render_material();\n\t\t\t}\n\t\t}\n\t\t// }\n\t\t// that seems to create an infinite loop\n\t\t// maybe only check if the type of geo has changed?\n\t\t// if(this.input_graph_node(0).is_dirty()){\n\t\t// \tthis.set_compilation_required()\n\t\t// }\n\t}\n\n\tis_on_frame_start(): boolean {\n\t\treturn this.scene.frame == this.pv.start_frame;\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tthis.gpu_controller.set_restart_not_required();\n\t\tconst core_group = input_contents[0];\n\t\t// this._simulation_restart_required = false;\n\t\t// let set_group_required = false;\n\t\t// let points:CorePoint[] = [];\n\t\tconsole.log('particles cook');\n\t\tawait this.compile_if_required();\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.gpu_controller.reset_particle_groups();\n\t\t}\n\n\t\tif (!this.gpu_controller.initialized) {\n\t\t\tawait this.gpu_controller.init(core_group);\n\t\t\t// this.gpu_controller.init_particle_group_points(core_group)\n\t\t\t// await this.gpu_controller.create_gpu_compute();\n\t\t}\n\n\t\t// if (!this._gpu_compute) {\n\t\t// \tawait this.gpu_controller.create_gpu_compute(points);\n\t\t// \t// set_group_required = true\n\t\t// }\n\t\tif (!this.render_controller.initialized) {\n\t\t\tthis.render_controller.init_core_group(core_group);\n\t\t\tawait this.render_controller.init_render_material();\n\t\t}\n\n\t\tthis.gpu_controller.restart_simulation_if_required();\n\t\tthis.gpu_controller.compute_similation_if_required();\n\t\t// if (frame >= this.pv.start_frame) {\n\t\t// \tif (this._last_simulated_frame == null) {\n\t\t// \t\tthis._last_simulated_frame = this._param_start_frame - 1;\n\t\t// \t}\n\t\t// \tif (frame > this._last_simulated_frame) {\n\t\t// \t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t// \t}\n\t\t// }\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tawait this.run_assembler();\n\t\t}\n\t}\n\tasync run_assembler() {\n\t\tconst root_nodes = this._find_root_nodes();\n\t\tconsole.log('root_nodes', root_nodes);\n\t\tif (root_nodes.length > 0) {\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.PARTICLE_SIM_UV);\n\t\t\tthis.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tthis.assembler_controller.assembler.set_root_nodes(root_nodes);\n\n\t\t\tawait this.assembler_controller.assembler.compile();\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\n\t\tconst shaders_by_name: Map<ShaderName, string> = this.assembler_controller.assembler.shaders_by_name();\n\t\tthis.gpu_controller.set_shaders_by_name(shaders_by_name);\n\t\tthis.render_controller.set_shaders_by_name(shaders_by_name);\n\t\t// if (shaders_by_name) {\n\t\t// \tawait this.eval_params(this._new_params);\n\t\t// \tthis._shaders_by_name = lodash_cloneDeep(shaders_by_name);\n\t\t// } else {\n\t\t// \tconsole.warn('no shaders by name from assembler');\n\t\t// }\n\t\tthis.gpu_controller.reset_gpu_compute();\n\t\tthis.gpu_controller.reset_particle_groups(); // this\n\n\t\tawait this.assembler_controller.assign_uniform_values(); // TODO: needed?\n\t}\n\t// shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\t// shaders(): string[] {\n\t// \treturn Object.keys(this._shaders_by_name).map((k) => this._shaders_by_name[k]);\n\t// }\n\n\tprivate _find_root_nodes() {\n\t\tconst nodes: BaseGlNodeType[] = GlNodeFinder.find_attribute_export_nodes(this);\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node is allowed');\n\t\t\treturn [];\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tnodes.push(output_node);\n\t\t}\n\t\treturn nodes;\n\t}\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n\n\tprivate _on_create_prepare_material() {\n\t\t// that's mostly to have the default shader work when creating the node\n\t\t// output.set_input('position', globals, 'position')\n\t\t// or instead we could create the default shader\n\t\tconst root = this.scene.root;\n\t\tconst mat_name = 'MAT';\n\t\tconst particles_mat_name = 'points_particles';\n\t\tconst MAT: MaterialsObjNode = root.nodes_by_type('materials')[0] || this.scene.root.create_node('materials');\n\t\tMAT.set_name(mat_name);\n\n\t\tconst create_points_mat = (MAT: MaterialsObjNode, name: string) => {\n\t\t\tlet points_mat = MAT.node('points_builder1') as PointsBuilderMatNode;\n\t\t\tif (!(points_mat && points_mat.type == PointsBuilderMatNode.type())) {\n\t\t\t\tpoints_mat = MAT.create_node('points_builder');\n\t\t\t}\n\t\t\tpoints_mat.set_name(name);\n\n\t\t\tlet points_mat_constant_point_size = points_mat.node('constant') as ConstantGlNode;\n\t\t\tif (!(points_mat_constant_point_size && points_mat_constant_point_size.type == ConstantGlNode.type())) {\n\t\t\t\tpoints_mat_constant_point_size = points_mat.create_node('constant');\n\t\t\t\tpoints_mat_constant_point_size.set_name('constant_point_size');\n\t\t\t}\n\t\t\tpoints_mat_constant_point_size.p.float.set(4); // to match the default point material\n\t\t\tconst points_mat_output1 = points_mat.node('output1');\n\t\t\tif (points_mat_output1) {\n\t\t\t\tpoints_mat_output1.set_input(\n\t\t\t\t\t'gl_PointSize',\n\t\t\t\t\tpoints_mat_constant_point_size,\n\t\t\t\t\tConstantGlNode.OUTPUT_NAME\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn points_mat;\n\t\t};\n\t\tconst points_mat = MAT.node(particles_mat_name) || create_points_mat(MAT, particles_mat_name);\n\t\tif (points_mat) {\n\t\t\tconst new_path = points_mat.full_path();\n\t\t\tif (this.p.material.raw_input != new_path) {\n\t\t\t\tthis.p.material.set(new_path);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n// import {GlobalsTextureHandler} from '../../Assembler/Globals/Texture';\n\nimport TemplateDefault from '../../templates/particles/Default.glsl';\n// import TemplatePosition from './Template/Particle/Position.glsl'\n// import TemplateVelocity from './Template/Particle/Velocity.glsl'\n// import TemplateAcceleration from './Template/Particle/Acceleration.glsl'\n\n// import {ShaderConfig} from './Config/ShaderConfig';\n// import {VariableConfig} from './Config/VariableConfig';\n// import {ShaderName, LineType} from '../../../../../Engine/Node/Gl/Assembler/Util/CodeBuilder';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {TextureAllocationsController} from '../../utils/TextureAllocationsController';\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {BaseGlNodeType} from '../../../_Base';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNodeTraverser} from '../../../../utils/shaders/NodeTraverser';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {GlobalsTextureHandler} from '../../globals/Texture';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\n\nexport class ShaderAssemblerParticles extends BaseGlShaderAssembler {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tget _template_shader() {\n\t\treturn undefined;\n\t}\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName) {\n\t\treturn TemplateDefault;\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tasync compile() {\n\t\tawait this.setup_shader_names_and_variables();\n\t\tawait this.update_shaders();\n\t}\n\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\tconst attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\tconst attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tasync setup_shader_names_and_variables() {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this, this._gl_parent_node);\n\t\tthis._leaf_nodes = node_traverser.leaves_from_nodes(this._root_nodes);\n\n\t\tfor (let node of this._root_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\tconsole.log('root and leaf:', this._root_nodes, this._leaf_nodes);\n\t\tthis._texture_allocations_controller = new TextureAllocationsController();\n\t\tthis._texture_allocations_controller.allocate_connections_from_root_nodes(this._root_nodes, this._leaf_nodes);\n\n\t\t// const globals_handler = new GlobalsTextureHandler()\n\t\t// this.set_assembler_globals_handler(globals_handler)\n\t\tif (this.globals_handler) {\n\t\t\t((<unknown>this.globals_handler) as GlobalsTextureHandler)?.set_texture_allocations_controller(\n\t\t\t\tthis._texture_allocations_controller\n\t\t\t);\n\t\t}\n\n\t\tthis._reset_shader_configs();\n\t}\n\tasync update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tconsole.log('this.shader_names', this.shader_names);\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tconsole.log(shader_name, lines.join('\\n'));\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.VECTOR3, 'position', [0, 0, 0]);\n\t\toutput_child.add_param(ParamType.VECTOR3, 'velocity', [0, 0, 0]);\n\t\t// output_child.add_param(ParamType.VECTOR3, 'accacceleration', [0, 0, 0]);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('velocity', ConnectionPointType.VEC3),\n\t\t\t// new TypedNamedConnectionPoint('acceleration', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tallow_attribute_exports() {\n\t\treturn true;\n\t}\n\n\tget texture_allocations_controller() {\n\t\treturn (this._texture_allocations_controller =\n\t\t\tthis._texture_allocations_controller || new TextureAllocationsController());\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn this._texture_allocations_controller?.create_shader_configs() || [];\n\t\t// [\n\t\t// \tnew ShaderConfig('position', ['position'], []),\n\t\t// \t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t// ]\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\t// new VariableConfig('position', {\n\t\t\t// \tdefault: 'vec3( position )',\n\t\t\t// \tprefix: 'vec3 transformed = '\n\t\t\t// }),\n\t\t];\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.texture_allocations_controller.shader_names() || [];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.texture_allocations_controller.input_names_for_shader_name(root_node, shader_name) || [];\n\t\t// return this.shader_config(shader_name).input_names()\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\tadd_export_body_line(\n\t\texport_node: BaseGlNodeType,\n\t\tinput_name: string,\n\t\tinput: BaseGlNodeType,\n\t\tvariable_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (input) {\n\t\t\tconst var_input = export_node.variable_for_input(input_name);\n\t\t\tconst new_var = ThreeToGl.vector3(var_input);\n\t\t\tif (new_var) {\n\t\t\t\tconst texture_variable = this.texture_allocations_controller.variable(variable_name);\n\n\t\t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\t\tconst component = texture_variable.component;\n\n\t\t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(export_node, [line], shader_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.texture_allocations_controller.input_names_for_shader_name(output_node, shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst variable_name = input_name;\n\t\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tvariable_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (attribute_node.is_importing) {\n\t\t\tconst gl_type = attribute_node.gl_type();\n\t\t\tconst attribute_name = attribute_node.attribute_name;\n\t\t\tconst new_value = this.globals_handler?.read_attribute(\n\t\t\t\tattribute_node,\n\t\t\t\tgl_type,\n\t\t\t\tattribute_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\n\t\t\t// re-export to ensure it is available on next frame\n\t\t\tconst texture_variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\tconst variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\t\tif (variable) {\n\t\t\t\t\tconst component = variable.component;\n\t\t\t\t\tconst body_line = `gl_FragColor.${component} = ${var_name}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this.add_import_body_line(\n\t\t\t// \tattribute_node,\n\t\t\t// \tshader_name,\n\t\t\t// \tAttribute.output_name(),\n\t\t\t// \tattribute_node.attribute_name()\n\t\t\t// \t)\n\t\t}\n\t\tif (attribute_node.is_exporting) {\n\t\t\tconst input = attribute_node.connected_input_node();\n\t\t\tif (input) {\n\t\t\t\tconst variable_name = attribute_node.attribute_name;\n\n\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\tattribute_node,\n\t\t\t\t\tattribute_node.input_name,\n\t\t\t\t\tinput,\n\t\t\t\t\tvariable_name,\n\t\t\t\t\tshaders_collection_controller\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tthis._handle_globals_time(globals_node, output_name, shaders_collection_controller);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._handle_globals_default(globals_node, output_name, shaders_collection_controller);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handle_globals_time(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst definition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst body_line = `float ${var_name} = ${output_name}`;\n\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\tthis.set_uniforms_time_dependent();\n\t}\n\n\tprivate _handle_globals_default(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst output_connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (output_connection_point) {\n\t\t\tconst gl_type = output_connection_point.type;\n\n\t\t\tconst attrib_read = this.globals_handler?.read_attribute(\n\t\t\t\tglobals_node,\n\t\t\t\tgl_type,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${attrib_read}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n}\n","export default \"#include <common>\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec2 particleUV = (gl_FragCoord.xy / resolution.xy);\\n\\n\\t// INSERT BODY\\n\\n}\"","import lodash_flatten from 'lodash/flatten';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_includes from 'lodash/includes';\nimport {TextureAllocation} from './TextureAllocation';\nimport {BaseGlNodeType} from '../../_Base';\n\n// import {TypedConnection, COMPONENTS_COUNT_BY_TYPE} from '../../../../../Engine/Node/Gl/GlData';\nimport {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {ShaderName, ParticleShaderNames} from '../../../utils/shaders/ShaderName';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ConnectionPointComponentsCountMap} from '../../../utils/connections/ConnectionPointType';\nimport {AttributeGlNode} from '../../Attribute';\nimport {BaseNamedConnectionPointType} from '../../../utils/connections/NamedConnectionPoint';\nimport {GlobalsGlNode} from '../../Globals';\n\nexport type TextureAllocationsControllerData = Dictionary<TextureVariableData[] | undefined>[];\n\nexport class TextureAllocationsController {\n\tprivate _allocations: TextureAllocation[] = [];\n\tprivate _next_allocation_index: number = 0;\n\n\tconstructor() {}\n\tallocate_connections_from_root_nodes(root_nodes: BaseGlNodeType[], leaf_nodes: BaseGlNodeType[]) {\n\t\t// const connections_by_node_id = {}\n\t\tconst variables = [];\n\n\t\t// TODO: let's go through the output node first, in case there is a name conflict, it will have priority\n\t\tfor (let node of root_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tfor (let connection_point of node.io.inputs.named_input_connection_points) {\n\t\t\t\t\t\tconst input = node.io.inputs.named_input(connection_point.name);\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\tconnection_point.name,\n\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attrib_node = node as AttributeGlNode;\n\t\t\t\t\tconst named_input: BaseGlNodeType | null = attrib_node.connected_input_node();\n\t\t\t\t\tconst connection_point:\n\t\t\t\t\t\t| BaseNamedConnectionPointType\n\t\t\t\t\t\t| undefined = attrib_node.connected_input_connection_point();\n\t\t\t\t\tif (named_input && connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattrib_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let node of leaf_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tconst globals_node = node as GlobalsGlNode;\n\t\t\t\t\tconst output_names_attributes = ['position', 'normal', 'color', 'uv'];\n\t\t\t\t\t// const output_names_not_attributes = ['frame', 'gl_FragCoord', 'gl_PointCoord'];\n\t\t\t\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\t\t\t\t// const is_attribute = !lodash_includes(output_names_not_attributes, output_name)\n\n\t\t\t\t\t\t// is_attribute, as opposed to frame, gl_FragCoord and gl_PointCoord which are either uniforms or provided by the renderer\n\t\t\t\t\t\tconst is_attribute = output_names_attributes.includes(output_name);\n\n\t\t\t\t\t\tif (is_attribute) {\n\t\t\t\t\t\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(\n\t\t\t\t\t\t\t\toutput_name\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[gl_type]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attribute_node = node as AttributeGlNode;\n\t\t\t\t\tconst connection_point = attribute_node.output_connection_point();\n\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_output)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattribute_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.allocate_variables(variables);\n\t}\n\tallocate_variables(variables: TextureVariable[]) {\n\t\tconst variables_by_size_inverse = lodash_sortBy(variables, (variable) => {\n\t\t\treturn -variable.size;\n\t\t});\n\t\tfor (let variable of variables_by_size_inverse) {\n\t\t\tthis.allocate_variable(variable);\n\t\t}\n\t}\n\tallocate_variable(new_variable: TextureVariable) {\n\t\tlet allocated = this.has_variable(new_variable.name);\n\t\tif (allocated) {\n\t\t\tconst allocated_variable = this.variables().filter((v) => v.name == new_variable.name)[0];\n\t\t\tnew_variable.graph_node_ids?.forEach((boolean, graph_node_id: string) => {\n\t\t\t\tallocated_variable.add_graph_node_id(graph_node_id);\n\t\t\t});\n\t\t} else {\n\t\t\tif (!allocated) {\n\t\t\t\tfor (let allocation of this._allocations) {\n\t\t\t\t\tif (!allocated && allocation.has_space_for_variable(new_variable)) {\n\t\t\t\t\t\tallocation.add_variable(new_variable);\n\t\t\t\t\t\tallocated = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!allocated) {\n\t\t\t\tconst new_allocation = new TextureAllocation(this.next_allocation_name());\n\t\t\t\tthis._allocations.push(new_allocation);\n\t\t\t\tnew_allocation.add_variable(new_variable);\n\t\t\t}\n\t\t}\n\t}\n\n\tnext_allocation_name(): ShaderName {\n\t\tconst name = ParticleShaderNames[this._next_allocation_index];\n\t\tthis._next_allocation_index += 1;\n\t\treturn name;\n\t}\n\n\tshader_names(): ShaderName[] {\n\t\tconst explicit_shader_names = this._allocations.map((a) => a.shader_name);\n\n\t\t// include dependencies if needed\n\t\t// TODO: typescript - do I need those?\n\t\t// if (lodash_includes(explicit_shader_names, 'acceleration')) {\n\t\t// \texplicit_shader_names.push('velocity');\n\t\t// }\n\t\t// if (lodash_includes(explicit_shader_names, 'velocity')) {\n\t\t// \texplicit_shader_names.push('position');\n\t\t// }\n\n\t\treturn lodash_uniq(explicit_shader_names);\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\t// new ShaderConfig('position', ['position'], []),\n\t\t\t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t];\n\t}\n\tallocation_for_shader_name(shader_name: ShaderName): TextureAllocation {\n\t\treturn this._allocations.filter((a) => a.shader_name == shader_name)[0];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\tconst allocation = this.allocation_for_shader_name(shader_name);\n\t\tif (allocation) {\n\t\t\treturn allocation.input_names_for_node(root_node);\n\t\t}\n\t}\n\t// find_variable(root_node: BaseNodeGl, shader_name: ShaderName, input_name: string): TextureVariable{\n\t// \tconst allocation = this.allocation_for_shader_name(shader_name)\n\t// \tif(allocation){\n\t// \t\treturn allocation.find_variable_with_node(root_node, input_name)\n\t// \t}\n\t// }\n\tvariable(variable_name: string): TextureVariable | undefined {\n\t\tfor (let allocation of this._allocations) {\n\t\t\tconst variable = allocation.variable(variable_name);\n\t\t\tif (variable) {\n\t\t\t\treturn variable;\n\t\t\t}\n\t\t}\n\t}\n\tvariables(): TextureVariable[] {\n\t\treturn lodash_flatten(this._allocations.map((a) => a.variables || []));\n\t}\n\thas_variable(name: string): boolean {\n\t\tconst names = this.variables().map((v) => v.name);\n\t\treturn lodash_includes(names, name);\n\t}\n\t// allocation_for_variable(name:string):TextureAllocation{\n\t// \tfor(let allocation of this._allocations){\n\t// \t\tconst variables = allocation.variables()\n\t// \t\tfor(let variable of variables){\n\t// \t\t\tif(variable.name() == name){\n\t// \t\t\t\treturn allocation\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tto_json(scene: PolyScene): TextureAllocationsControllerData {\n\t\treturn this._allocations.map((allocation: TextureAllocation) => {\n\t\t\tconst data = {\n\t\t\t\t[allocation.texture_name]: allocation.to_json(scene),\n\t\t\t};\n\t\t\treturn data;\n\t\t});\n\t}\n\tprint(scene: PolyScene) {\n\t\tconsole.log(JSON.stringify(this.to_json(scene), [''], 2));\n\t}\n}\n","import {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {BaseGlNodeType} from '../../_Base';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class TextureAllocation {\n\tprivate _variables: TextureVariable[] | undefined;\n\tprivate _size: number = 0;\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tadd_variable(variable: TextureVariable) {\n\t\tthis._variables = this._variables || [];\n\t\tthis._variables.push(variable);\n\t\tvariable.set_position(this._size);\n\t\tvariable.set_allocation(this);\n\t\tthis._size += variable.size;\n\t}\n\n\thas_space_for_variable(variable: TextureVariable): boolean {\n\t\treturn this._size + variable.size <= 4;\n\t}\n\tget shader_name() {\n\t\treturn this._shader_name; //this._variables[0].name()\n\t}\n\tget texture_name(): string {\n\t\treturn `texture_${this._shader_name}`;\n\t}\n\n\tget variables(): TextureVariable[] | undefined {\n\t\treturn this._variables;\n\t}\n\tvariables_for_input_node(root_node: BaseGlNodeType): TextureVariable[] | undefined {\n\t\treturn this._variables?.filter((variable) => variable.graph_node_ids?.has(root_node.graph_node_id) || false);\n\t}\n\tinput_names_for_node(root_node: BaseGlNodeType): string[] | undefined {\n\t\treturn this.variables_for_input_node(root_node)?.map((v) => v.name);\n\t}\n\t// find_variable_with_node(root_node: BaseNodeGl, input_name: string): TextureVariable{\n\t// \treturn this.variables_for_input_node(root_node).filter(v=>v.name() == input_name)[0]\n\t// }\n\t// find_variable_without_node(input_name: string): TextureVariable{\n\t// \treturn this._variables.filter(v=>v.name() == input_name)[0]\n\t// }\n\tvariable(variable_name: string) {\n\t\tif (this._variables) {\n\t\t\tfor (let variable of this._variables) {\n\t\t\t\tif (variable.name == variable_name) {\n\t\t\t\t\treturn variable;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tto_json(scene: PolyScene): TextureVariableData[] | undefined {\n\t\treturn this._variables?.map((v) => v.to_json(scene));\n\t\t// for(let variable of this._variables){\n\t\t// \tdata[variable.name()] = variable.to_json(scene)\n\t\t// }\n\t\t// return data\n\t}\n}\n","import {TextureAllocation} from './TextureAllocation';\nimport {PolyScene} from '../../../../scene/PolyScene';\n\nexport interface TextureVariableData {\n\tname: string;\n\tnodes: string[];\n}\n\nexport class TextureVariable {\n\tprivate _allocation: TextureAllocation | undefined;\n\tprivate _position: number = -1;\n\n\tprivate _graph_node_ids: Map<string, boolean> | undefined;\n\n\tconstructor(private _name: string, private _size: number) {\n\t\tif (!_name) {\n\t\t\tthrow 'TextureVariable requires a name';\n\t\t}\n\t}\n\n\tset_allocation(allocation: TextureAllocation) {\n\t\tthis._allocation = allocation;\n\t}\n\tget allocation() {\n\t\treturn this._allocation;\n\t}\n\n\tget graph_node_ids() {\n\t\treturn this._graph_node_ids;\n\t}\n\tadd_graph_node_id(id: string) {\n\t\tthis._graph_node_ids = this._graph_node_ids || new Map();\n\t\tthis._graph_node_ids.set(id, true);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\n\tset_position(position: number) {\n\t\tthis._position = position;\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget component(): string {\n\t\treturn 'xyzw'\n\t\t\t.split('')\n\t\t\t.splice(this._position, this._size)\n\t\t\t.join('');\n\t}\n\tto_json(scene: PolyScene): TextureVariableData {\n\t\tconst names: string[] = [];\n\t\tif (this._graph_node_ids) {\n\t\t\tthis._graph_node_ids.forEach((boolean, node_id: string) => {\n\t\t\t\tconst name = scene.graph.node_from_id(node_id).name;\n\t\t\t\tnames.push(name);\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tnodes: names.sort(),\n\t\t};\n\t}\n}\n","import lodash_cloneDeep from 'lodash/cloneDeep';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {BaseNodeSop} from '../_Base'\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseBuilderMatNodeType} from '../../../mat/_BaseBuilder';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\n\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from '../../../../../core/geometry/Material';\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {TextureAllocationsControllerData} from '../../../gl/code/utils/TextureAllocationsController';\n\nexport class ParticlesSystemGpuRenderController {\n\tprivate _render_material: ShaderMaterial | undefined;\n\tprotected _particles_group_objects: Object3D[] = [];\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprivate _texture_allocations_json: TextureAllocationsControllerData | undefined;\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// _create_render_params() {\n\t// \tthis.self.within_param_folder(\"setup\", () => {\n\t// \t\tthis.self.add_param(ParamType.OPERATOR_PATH, \"material\", \"\", {\n\t// \t\t\tnode_selection: {\n\t// \t\t\t\tcontext: NodeContext.MAT\n\t// \t\t\t},\n\t// \t\t\tdependent_on_found_node: false\n\t// \t\t});\n\t// \t});\n\t// }\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_render_material();\n\t}\n\n\tassign_render_material() {\n\t\tif (!this._render_material) {\n\t\t\t// throw 'cannot assign non existing material';\n\t\t\treturn;\n\t\t}\n\t\tfor (let object3d of this._particles_group_objects) {\n\t\t\tconst object = object3d as Mesh;\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.material = this._render_material;\n\t\t\t\tCoreMaterial.apply_custom_materials(object, this._render_material as ShaderMaterialWithCustomMaterials);\n\t\t\t\tobject.matrixAutoUpdate = false;\n\t\t\t\tobject.updateMatrix();\n\t\t\t}\n\t\t}\n\t\t// if this material is recomputed on a frame after the frame_start\n\t\t// we need to:\n\t\t// - mark the material as needsUpdate (to ensure it gets recompiled by the renderer)\n\t\t// - update the uniforms (to ensure the material gets the right values, as the uniforms have been reset)\n\t\tthis._render_material.needsUpdate = true;\n\t\tthis.update_render_material_uniforms();\n\t}\n\tupdate_render_material_uniforms() {\n\t\tif (!this._render_material) {\n\t\t\treturn;\n\t\t}\n\t\t// if (!this.self._gpu_compute) {\n\t\t// \treturn;\n\t\t// }\n\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis._shaders_by_name?.forEach((string, shader_name) => {\n\t\t\tconst texture = this.node.gpu_controller.getCurrentRenderTarget(shader_name)?.texture;\n\t\t\tif (texture) {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tthis._render_material.uniforms[uniform_name].value = texture;\n\t\t\t\t\tCoreMaterial.assign_custom_uniforms(this._render_material, uniform_name, texture);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// console.log(this._render_material.vertexShader);\n\t\t// console.log(this._render_material.fragmentShader);\n\t}\n\n\treset_render_material() {\n\t\tthis._render_material = undefined;\n\t\tthis._particles_group_objects = []; //this._particles_core_group.objects()\n\t}\n\tget initialized(): boolean {\n\t\treturn this._render_material != null;\n\t}\n\n\tinit_core_group(core_group: CoreGroup) {\n\t\tfor (let child of core_group.objects()) {\n\t\t\tthis._particles_group_objects.push(child);\n\t\t}\n\t}\n\tasync init_render_material() {\n\t\t// if (this.self.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\tif (this._render_material) {\n\t\t\treturn;\n\t\t}\n\n\t\t// const uniforms_particles = {\n\t\t// \t\"texture_position\": { value: null },\n\t\t// \t// \"debugX\": { value: 0 },\n\t\t// \t// \"textureVelocity\": { value: null },\n\t\t// \t// \"cameraConstant\": { value: 1 }, //( camera ) },\n\t\t// \t// \"density\": { value: 1.0 }\n\t\t// };\n\n\t\t// ShaderMaterial\n\t\tif (this.node.p.material.is_dirty) {\n\t\t\tawait this.node.p.material.compute();\n\t\t}\n\t\tconst mat_node = this.node.p.material.found_node() as BaseBuilderMatNodeType; // TODO: typescript - ensure node selection is safe, as it would currently crash with a non builder mat selected\n\n\t\tif (mat_node) {\n\t\t\tconst new_texture_allocations_json: TextureAllocationsControllerData = this.node.assembler_controller.assembler.texture_allocations_controller.to_json(\n\t\t\t\tthis.node.scene\n\t\t\t);\n\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.UV_VARYING);\n\t\t\tglobals_handler.set_texture_allocations_controller(\n\t\t\t\tthis.node.assembler_controller.assembler.texture_allocations_controller\n\t\t\t);\n\t\t\tmat_node.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tif (\n\t\t\t\t!this._texture_allocations_json ||\n\t\t\t\tJSON.stringify(this._texture_allocations_json) != JSON.stringify(new_texture_allocations_json)\n\t\t\t) {\n\t\t\t\t// we need to set the node to dirty if a recompile is needed\n\t\t\t\t// otherwise it won't cook\n\t\t\t\t// but we also need to check if the texture_allocation has changed,\n\t\t\t\t// otherwise we'll have an infinite loop\n\t\t\t\tthis._texture_allocations_json = lodash_cloneDeep(new_texture_allocations_json);\n\t\t\t\tmat_node.set_dirty();\n\t\t\t}\n\t\t\t// set compilation required in case the texture allocation has changed\n\t\t\t// but not needed as it is done by set_assembler_globals_handler\n\t\t\t//found_node.set_compilation_required() //_and_dirty()\n\t\t\tconst container = await mat_node.request_container();\n\t\t\tthis._render_material = container.material() as ShaderMaterial; //.clone()\n\t\t\t// this._render_material.needsUpdate = true\n\t\t\t// this.self._assembler.texture_allocations_controller().print()\n\t\t\t// throw \"DEBUGGIN...\"\n\t\t} else {\n\t\t\tthis.node.states.error.set('render material not valid');\n\t\t\t// this._render_material = this._render_material || new ShaderMaterial( {\n\t\t\t// \tuniforms: {},\n\t\t\t// \tvertexShader: particleVertexShader,\n\t\t\t// \tfragmentShader: particleFragmentShader\n\t\t\t// } );\n\t\t}\n\n\t\t// add uniforms\n\t\tif (this._render_material) {\n\t\t\tconst uniforms = this._render_material.uniforms;\n\t\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tconst uniform_value = {value: null};\n\t\t\t\tuniforms[uniform_name] = uniform_value;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tCoreMaterial.init_custom_material_uniforms(this._render_material, uniform_name, uniform_value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// this._render_material.extensions.drawBuffers = true;\n\t\tthis.assign_render_material();\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2';\n\nimport {MathUtils} from 'three/src/math/MathUtils';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\n// import {BaseNodeSop} from '../_Base'\n\n// import {CoreConstant} from '../../../../../Core/Geometry/Constant'\n\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {CoreMath} from '../../../../../core/math/_Module';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\nimport {GPUComputationRenderer} from './GPUComputationRenderer';\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {POLY} from '../../../../Poly';\nimport {CorePoint} from '../../../../../core/geometry/Point';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\ninterface GPUComputationRendererVariable {\n\tname: string;\n\trenderTargets: WebGLRenderTarget[];\n\tmaterial: ShaderMaterial;\n}\ninterface GPUComputationRenderer {\n\tnew (x: number, y: number, renderer: WebGLRenderer): GPUComputationRenderer;\n\tcompute(): void;\n\tinit(): string | null;\n\taddVariable(name: string, fragment_shader: string, variable: DataTexture): GPUComputationRendererVariable;\n\tsetVariableDependencies(variable: GPUComputationRendererVariable, vars: GPUComputationRendererVariable[]): void;\n\trenderTexture(texture: DataTexture, render_target: WebGLRenderTarget): void;\n\tcreateTexture(): DataTexture;\n\tgetCurrentRenderTarget(variable: GPUComputationRendererVariable): WebGLRenderTarget;\n}\n\nexport class ParticlesSystemGpuComputeController {\n\tprotected _gpu_compute: GPUComputationRenderer | undefined;\n\tprotected _simulation_restart_required: boolean = false;\n\n\tprotected _renderer: WebGLRenderer | undefined;\n\t// private _particles_group: CoreGroup\n\n\tprotected _particles_core_group: CoreGroup | undefined;\n\tprotected _points: CorePoint[] = [];\n\n\tprivate variables_by_name: Map<ShaderName, GPUComputationRendererVariable> = new Map();\n\tprivate _created_textures_by_name: Map<ShaderName, DataTexture> = new Map();\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprotected _last_simulated_frame: number | undefined;\n\t// private _use_instancing: boolean = false\n\n\t// private _param_auto_textures_size: boolean;\n\t// private _param_max_textures_size: Vector2;\n\t// private _param_textures_sizes: Vector2;\n\tprivate _used_textures_size: Vector2 = new Vector2();\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// protected _create_gpu_compute_params() {\n\t// \tthis.self.within_param_folder('setup', () => {\n\t// \t\tthis.self.add_param(ParamType.INTEGER, 'start_frame', 1, {\n\t// \t\t\trange: [1, 100],\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.TOGGLE, 'auto_textures_size', 1);\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'max_textures_size', [1024, 1024], {\n\t// \t\t\tvisible_if: {auto_textures_size: 1},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'textures_size', [64, 64], {\n\t// \t\t\tvisible_if: {auto_textures_size: 0},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.BUTTON, 'reset', '', {\n\t// \t\t\tcallback: this._reset_gpu_compute_and_set_dirty.bind(this),\n\t// \t\t});\n\t// \t});\n\t// \t// this.self.add_param(ParamType.BUTTON, 'force_compute', '', {callback: this._force_compute.bind(this)})\n\t// }\n\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_gpu_compute();\n\t}\n\tasync init(core_group: CoreGroup) {\n\t\tthis.init_particle_group_points(core_group);\n\t\tawait this.create_gpu_compute();\n\t}\n\n\tgetCurrentRenderTarget(shader_name: ShaderName) {\n\t\tconst variable = this.variables_by_name.get(shader_name);\n\t\tif (variable) {\n\t\t\treturn this._gpu_compute?.getCurrentRenderTarget(variable);\n\t\t}\n\t}\n\n\tinit_particle_group_points(core_group: CoreGroup) {\n\t\tthis.reset_gpu_compute();\n\n\t\tif (!core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._particles_core_group = core_group;\n\t\t// this._particles_group_objects = []; //this._particles_core_group.objects()\n\n\t\t// in order to have proper copy on each children, I need to do .push for each\n\t\t// and not just my_array = group.children, as the array would then be empty\n\t\t// after have done .set_group(group)\n\t\t// I may need to rethink the whole\n\t\t// for (let child of this._particles_core_group.objects()) {\n\t\t// \tthis._particles_group_objects.push(child);\n\t\t// }\n\t\t// this._particles_core_group = new CoreGroup(this._particles_group)\n\t\tthis._points = this._get_points() || [];\n\t}\n\n\tcompute_similation_if_required() {\n\t\tconst frame = this.node.scene.frame;\n\t\tconst start_frame: number = this.node.pv.start_frame;\n\t\tif (frame >= start_frame) {\n\t\t\tif (this._last_simulated_frame == null) {\n\t\t\t\tthis._last_simulated_frame = start_frame - 1;\n\t\t\t}\n\t\t\tif (frame > this._last_simulated_frame) {\n\t\t\t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _compute_simulation(count = 1) {\n\t\tif (!this._gpu_compute) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update_simulation_material_uniforms();\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tthis._gpu_compute.compute();\n\t\t}\n\t\tthis.node.render_controller.update_render_material_uniforms();\n\t\tthis._last_simulated_frame = this.node.scene.frame;\n\n\t\t// this._renderer.render(this._gpu_scene, this._gpu_camera)\n\t}\n\n\tasync create_gpu_compute() {\n\t\tif (this.node.pv.auto_textures_size) {\n\t\t\tconst nearest_power_of_two = CoreMath.nearestPower2(Math.sqrt(this._points.length));\n\t\t\tthis._used_textures_size.x = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.x);\n\t\t\tthis._used_textures_size.y = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.y);\n\t\t} else {\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.x) &&\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.y)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.node.states.error.set('texture size must be a power of 2');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max_particles_count = this.node.pv.textures_size.x * this.node.pv.textures_size.y;\n\t\t\tif (this._points.length > max_particles_count) {\n\t\t\t\tthis.node.states.error.set(\n\t\t\t\t\t`max particles is set to (${this.node.pv.textures_size.x}x${this.node.pv.textures_size.y}=) ${max_particles_count}`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._used_textures_size.copy(this.node.pv.textures_size);\n\t\t}\n\n\t\tthis.node.states.time_dependent.force_time_dependent();\n\t\tthis._init_particles_uvs();\n\t\t// we need to recreate the material if the texture allocation changes\n\t\tthis.node.render_controller.reset_render_material();\n\t\t// await this.node.render_controller.init_render_material();\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer(); //new WebGLRenderer();\n\t\tif (renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t} else {\n\t\t\tthis.node.states.error.set('no renderer found');\n\t\t}\n\t\t// console.log(this._renderer.extensions, this._renderer.capabilities)\n\t\t// if(!this._renderer.extensions.get( 'WEBGL_draw_buffers' )){\n\t\t// \tthis.self.set_error(\"this operator requires the browser extension WEBGL_draw_buffers\")\n\t\t// \talert(\"no extension found\")\n\t\t// \treturn\n\t\t// }\n\t\t// this._renderer = new WebGLRenderer();\n\t\t// this._gpu_scene = new Scene()\n\t\t// this._gpu_camera = new Camera()\n\t\t// this._renderer.setPixelRatio( window.devicePixelRatio );\n\t\t// this._renderer.setSize( this.node.pv.textures_size.x, this.node.pv.textures_size.y );\n\n\t\tconst compute = new GPUComputationRenderer(\n\t\t\tthis._used_textures_size.x,\n\t\t\tthis._used_textures_size.y,\n\t\t\tthis._renderer\n\t\t);\n\t\tthis._gpu_compute = (<unknown>compute) as GPUComputationRenderer;\n\n\t\tif (!this._gpu_compute) {\n\t\t\tthis.node.states.error.set('failed to create the GPUComputationRenderer');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._last_simulated_frame = undefined;\n\n\t\t// document.body.style = ''\n\t\t// document.body.appendChild( renderer.domElement );\n\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.renderTargets[0].dispose();\n\t\t\tvariable.renderTargets[1].dispose();\n\t\t\tthis.variables_by_name.delete(shader_name);\n\t\t});\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tconst all_variables: GPUComputationRendererVariable[] = [];\n\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tconst variable = this._gpu_compute.addVariable(\n\t\t\t\t\t`texture_${shader_name}`,\n\t\t\t\t\tshader,\n\t\t\t\t\tthis._created_textures_by_name.get(shader_name)!\n\t\t\t\t);\n\t\t\t\tthis.variables_by_name.set(shader_name, variable);\n\t\t\t\tall_variables.push(variable);\n\t\t\t}\n\t\t});\n\n\t\t// this._gpu_compute.setVariableDependencies( this.var_v, [ this.var_P, this.var_v ] );\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis.variables_by_name?.forEach((variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._gpu_compute.setVariableDependencies(\n\t\t\t\t\tvariable,\n\t\t\t\t\tall_variables // currently all depend on all\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis._create_texture_render_targets();\n\t\tthis._fill_textures();\n\t\tthis.create_simulation_material_uniforms();\n\n\t\tvar error = this._gpu_compute.init();\n\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tthis.node.states.error.set(error);\n\t\t}\n\t}\n\n\tprivate create_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst uniforms = variable.material.uniforms;\n\t\t\tuniforms['frame'] = {value: this.node.scene.frame};\n\n\t\t\tfor (let param_config of this.node.assembler_controller.assembler.param_configs()) {\n\t\t\t\tuniforms[param_config.uniform_name] = param_config.uniform;\n\t\t\t}\n\t\t});\n\t}\n\tprivate update_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.material.uniforms['frame'].value = this.node.scene.frame;\n\t\t});\n\t}\n\n\tprivate _init_particles_uvs() {\n\t\t// var uvs = new Float32Array( this.node.pv.textures_size.x * this.node.pv.textures_size.y * 2 );\n\t\tvar uvs = new Float32Array(this._points.length * 2);\n\t\t// const rows_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.y, (points.length / this.node.pv.textures_size.y)\n\t\t// ))\n\t\t// const columns_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.x, (points.length / rows_count)\n\t\t// ))\n\t\tlet p = 0;\n\t\tvar cmptr = 0;\n\t\tfor (var j = 0; j < this._used_textures_size.x; j++) {\n\t\t\tfor (var i = 0; i < this._used_textures_size.y; i++) {\n\t\t\t\tuvs[p++] = i / (this._used_textures_size.x - 1);\n\t\t\t\tuvs[p++] = j / (this._used_textures_size.y - 1);\n\n\t\t\t\tcmptr += 2;\n\t\t\t\tif (cmptr >= uvs.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uv_attrib_name = GlobalsTextureHandler.UV_ATTRIB;\n\t\tif (this._particles_core_group) {\n\t\t\tfor (let core_geometry of this._particles_core_group.core_geometries()) {\n\t\t\t\t// geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\t\tconst geometry = core_geometry.geometry();\n\t\t\t\tconst attribute_constructor = core_geometry.marked_as_instance()\n\t\t\t\t\t? InstancedBufferAttribute\n\t\t\t\t\t: BufferAttribute;\n\t\t\t\tgeometry.setAttribute(uv_attrib_name, new attribute_constructor(uvs, 2));\n\t\t\t}\n\t\t}\n\t}\n\n\tcreated_textures_by_name() {\n\t\treturn this._created_textures_by_name;\n\t}\n\n\tprivate _fill_textures() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\tconst assembler = this.node.assembler_controller.assembler;\n\t\t\tconst texture_allocations_controller = assembler.texture_allocations_controller;\n\n\t\t\tconst texture_allocation = texture_allocations_controller.allocation_for_shader_name(shader_name);\n\t\t\tif (!texture_allocation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texture_variables = texture_allocation.variables;\n\t\t\tif (!texture_variables) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst array = texture.image.data;\n\n\t\t\tfor (let texture_variable of texture_variables) {\n\t\t\t\tconst texture_position = texture_variable.position;\n\t\t\t\tlet variable_name = texture_variable.name;\n\t\t\t\t// if(this._use_instancing){\n\t\t\t\t// \tvariable_name = GlobalsTextureHandler.variable_name_to_instance_attrib(variable_name)\n\t\t\t\t// }\n\n\t\t\t\tconst first_point = this._points[0];\n\t\t\t\tif (first_point) {\n\t\t\t\t\tconst has_attrib = first_point.has_attrib(variable_name);\n\t\t\t\t\tif (has_attrib) {\n\t\t\t\t\t\tconst attrib_size = first_point.attrib_size(variable_name);\n\t\t\t\t\t\tlet cmptr = texture_position;\n\t\t\t\t\t\tfor (let point of this._points) {\n\t\t\t\t\t\t\tif (attrib_size == 1) {\n\t\t\t\t\t\t\t\tconst val = point.attrib_value(variable_name);\n\t\t\t\t\t\t\t\tarray[cmptr] = val;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpoint.attrib_value(variable_name).toArray(array, cmptr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcmptr += 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// var posArray = texture_P.image.data;\n\t\t// var velArray = texture_v.image.data;\n\n\t\t// let cmptr = 0\n\t\t// for(let point of points){\n\t\t// \tpoint.position().toArray(posArray, cmptr)\n\t\t// \tposArray[ cmptr + 3 ] = 1;\n\t\t// \tcmptr += 4\n\t\t// }\n\t}\n\n\treset_gpu_compute() {\n\t\tthis._gpu_compute = undefined;\n\t\tthis._simulation_restart_required = true;\n\t}\n\tset_restart_not_required() {\n\t\tthis._simulation_restart_required = false;\n\t}\n\treset_gpu_compute_and_set_dirty() {\n\t\tthis.reset_gpu_compute();\n\t\tthis.node.set_dirty();\n\t}\n\treset_particle_groups() {\n\t\t// this._particles_group = null\n\t\t// this._particles_group_objects = [];\n\t\tthis._particles_core_group = undefined;\n\t}\n\tget initialized(): boolean {\n\t\treturn this._particles_core_group != null && this._gpu_compute != null;\n\t}\n\t// private _force_compute(){\n\t// \tthis.self.run_assembler()\n\t// }\n\n\tprivate _create_texture_render_targets() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\ttexture.dispose();\n\t\t});\n\n\t\tthis._created_textures_by_name.clear();\n\t\tthis.variables_by_name.forEach((texture_variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._created_textures_by_name.set(shader_name, this._gpu_compute.createTexture());\n\t\t\t}\n\t\t});\n\t}\n\trestart_simulation_if_required() {\n\t\tif (this._simulation_restart_required) {\n\t\t\tthis._restart_simulation();\n\t\t}\n\t}\n\tprivate _restart_simulation() {\n\t\tthis._last_simulated_frame = undefined;\n\n\t\tthis._create_texture_render_targets();\n\t\tconst points = this._get_points(); // TODO: typescript - not sure that's right\n\t\tif (!points) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._fill_textures();\n\n\t\t// for (let variable_name of Object.keys(this.variables_by_name)) {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst texture = this._created_textures_by_name.get(shader_name);\n\t\t\tif (this._gpu_compute && texture) {\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[0]);\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[1]);\n\t\t\t}\n\t\t});\n\t}\n\n\t// if we have a mix of marked_as_instance and non marked_as_instance\n\t// we take all geos that are the type that comes first\n\tprivate _get_points() {\n\t\tif (!this._particles_core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet geometries = this._particles_core_group.core_geometries();\n\t\tconst first_geometry = geometries[0];\n\t\tif (first_geometry) {\n\t\t\tconst type = first_geometry.marked_as_instance();\n\t\t\t// this._use_instancing = type\n\t\t\tconst selected_geometries = [];\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tif (geometry.marked_as_instance() == type) {\n\t\t\t\t\tselected_geometries.push(geometry);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst points = [];\n\t\t\tfor (let geometry of selected_geometries) {\n\t\t\t\tfor (let point of geometry.points()) {\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn points;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","/**\n * @author yomboprime https://github.com/yomboprime\n *\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n*/\n\nimport {Camera} from 'three/src/cameras/Camera'\nimport {ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat} from 'three/src/constants'\nimport {DataTexture} from 'three/src/textures/DataTexture'\nimport {Mesh} from 'three/src/objects/Mesh'\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry'\nimport {Scene} from 'three/src/scenes/Scene'\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial'\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget'\n// const THREE = {Camera, ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat, DataTexture, mesh, PlaneBufferGeometry, Scene, ShaderMaterial, WebGLRenderTarget}\n\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\n\n\tthis.variables = [];\n\n\tthis.currentTextureIndex = 0;\n\n\tvar scene = new Scene();\n\n\tvar camera = new Camera();\n\tcamera.position.z = 1;\n\n\tvar passThruUniforms = {\n\t\tpassThruTexture: { value: null }\n\t};\n\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\n\tscene.add( mesh );\n\n\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\n\n\t\tvar variable = {\n\t\t\tname: variableName,\n\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\tmaterial: material,\n\t\t\tdependencies: null,\n\t\t\trenderTargets: [],\n\t\t\twrapS: null,\n\t\t\twrapT: null,\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t};\n\n\t\tthis.variables.push( variable );\n\n\t\treturn variable;\n\n\t};\n\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\tvariable.dependencies = dependencies;\n\n\t};\n\n\tthis.init = function () {\n\n\t\tif ( ! renderer.capabilities.isWebGL2 &&\n\t\t\t ! renderer.extensions.get( \"OES_texture_float\" ) ) {\n\n\t\t\treturn \"No OES_texture_float support for float textures.\";\n\n\t\t}\n\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\treturn \"No support for vertex shader textures.\";\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\tvar material = variable.material;\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\t// material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\treturn null;\n\n\t};\n\n\tthis.compute = function () {\n\n\t\tvar currentTextureIndex = this.currentTextureIndex;\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Sets texture dependencies uniforms\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tvar uniforms = variable.material.uniforms;\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Performs the computation for this variable\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t}\n\n\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t};\n\n\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t};\n\n\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t};\n\n\tfunction addResolutionDefine( materialShader ) {\n\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\n\n\t}\n\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t// The following functions can be used to compute things manually\n\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\tuniforms = uniforms || {};\n\n\t\tvar material = new ShaderMaterial( {\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\tfragmentShader: computeFragmentShader\n\t\t} );\n\n\t\taddResolutionDefine( material );\n\n\t\treturn material;\n\n\t}\n\n\tthis.createShaderMaterial = createShaderMaterial;\n\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\twrapS = wrapS || ClampToEdgeWrapping;\n\t\twrapT = wrapT || ClampToEdgeWrapping;\n\n\t\tminFilter = minFilter || NearestFilter;\n\t\tmagFilter = magFilter || NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false\n\t\t} );\n\n\t\treturn renderTarget;\n\n\t};\n\n\tthis.createTexture = function () {\n\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\n\n\t};\n\n\tthis.renderTexture = function ( input, output ) {\n\n\t\t// Takes a texture, and render out in rendertarget\n\t\t// input = Texture\n\t\t// output = RenderTarget\n\n\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t};\n\n\tthis.doRenderTarget = function ( material, output ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tmesh.material = material;\n\t\trenderer.setRenderTarget( output );\n\t\trenderer.render( scene, camera );\n\t\tmesh.material = passThruShader;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\t// Shaders\n\n\tfunction getPassThroughVertexShader() {\n\n\t\treturn\t\"void main()\t{\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n\tfunction getPassThroughFragmentShader() {\n\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"void main() {\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n};\n\nexport { GPUComputationRenderer };\n","import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst POSITION = 'position';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PeakSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1, {range: [-1, 1]});\n}\nconst ParamsConfig = new PeakSopParamsConfig();\n\nexport class PeakSopNode extends TypedSopNode<PeakSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'peak';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tlet core_geometry, point;\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((child_object) => {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = (child_object as Mesh).geometry as BufferGeometry) != null) {\n\t\t\t\t\tcore_geometry = new CoreGeometry(geometry);\n\t\t\t\t\tfor (point of core_geometry.points()) {\n\t\t\t\t\t\tconst normal = point.normal();\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tconst new_position = position.clone().add(normal.multiplyScalar(this.pv.amount));\n\t\t\t\t\t\tpoint.set_position(new_position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\t\t\tconst attrib = core_geometry.geometry().getAttribute(POSITION) as BufferAttribute;\n\t\t\t\t\t\tattrib.needsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst ROTATE_START = new Vector3(0, 0, 1);\nconst ROTATE_END = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\tuse_segments_count = ParamConfig.BOOLEAN(0);\n\tstep_size = ParamConfig.FLOAT(1, {visible_if: {use_segments_count: 0}});\n\tsegments = ParamConfig.VECTOR2([1, 1], {visible_if: {use_segments_count: 1}});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\n\nexport class PlaneSopNode extends TypedSopNode<PlaneSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'plane';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create plane from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\t_cook_without_input() {\n\t\tconst geometry = this._create_plane(this.pv.size);\n\n\t\t// convert to buffer geo, as some render problems can occur otherwise\n\t\t// geometry = BufferGeometryUtils.mergeBufferGeometries([geometry])\n\t\t// console.log(geometry, geometry.isBufferGeometry)\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tconst matrix = this._core_transform.translation_matrix(this.pv.center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\tthis.set_geometry(geometry);\n\t}\n\t_cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = new Vector3();\n\t\tbbox.getSize(size);\n\t\tconst center = new Vector3();\n\t\tbbox.getCenter(center);\n\n\t\t// TODO: rotate the input geo to get the accurate bbox\n\t\tconst size2d = new Vector2(size.x, size.z);\n\t\tconst geometry = this._create_plane(size2d);\n\n\t\tthis._core_transform.rotate_geometry(geometry, ROTATE_START, ROTATE_END);\n\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t_create_plane(size: Vector2) {\n\t\tlet segments_count;\n\t\tsize = size.clone();\n\t\tif (this.pv.use_segments_count) {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(this.pv.segments.x),\n\t\t\t\ty: Math.floor(this.pv.segments.y),\n\t\t\t};\n\t\t} else {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(size.x / this.pv.step_size),\n\t\t\t\ty: Math.floor(size.y / this.pv.step_size),\n\t\t\t};\n\t\t\tsize.x = segments_count.x * this.pv.step_size;\n\t\t\tsize.y = segments_count.y * this.pv.step_size;\n\t\t}\n\t\treturn new PlaneBufferGeometry(size.x, size.y, segments_count.x, segments_count.y);\n\t}\n}\n","// import lodash_map from 'lodash/map'\n\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BooleanParam} from '../../params/Boolean';\nimport {FloatParam} from '../../params/Float';\n\nconst POSITION_ATTRIB_NAME = 'position';\n\ntype ValueArrayByName = Map<string, number[]>;\ntype ComponentOffset = 0 | 1 | 2;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PointSopParamsConfig extends NodeParamsConfig {\n\tupdate_x = ParamConfig.BOOLEAN(0);\n\tx = ParamConfig.FLOAT('@P.x', {\n\t\tvisible_if: {update_x: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0);\n\ty = ParamConfig.FLOAT('@P.y', {\n\t\tvisible_if: {update_y: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0);\n\tz = ParamConfig.FLOAT('@P.z', {\n\t\tvisible_if: {update_z: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new PointSopParamsConfig();\n\nexport class PointSopNode extends TypedSopNode<PointSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to move'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('dot-circle');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tawait this._eval_expressions_for_core_group(core_group);\n\t}\n\n\t// group.traverse (object)=>\n\t// \tif (geometry = object.geometry)?\n\t// \t\tthis._eval_expressions(geometry)\n\t// \t\tgeometry.computeVertexNormals()\n\n\tasync _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\t// this._allocate_arrays(core_objects)\n\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\n\t\tif (this.pv.update_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\n\t\tconst geometries = core_group.geometries();\n\t\tfor (let geometry of geometries) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tconst attrib = geometry.getAttribute(POSITION_ATTRIB_NAME) as BufferAttribute;\n\t\t\t\tattrib.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(POSITION_ATTRIB_NAME).array as number[];\n\n\t\tconst tmp_array_x = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_x,\n\t\t\tthis.p.x,\n\t\t\tthis.pv.x,\n\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t0\n\t\t);\n\t\tconst tmp_array_y = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_y,\n\t\t\tthis.p.y,\n\t\t\tthis.pv.y,\n\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t1\n\t\t);\n\t\tconst tmp_array_z = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_z,\n\t\t\tthis.p.z,\n\t\t\tthis.pv.z,\n\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t2\n\t\t);\n\n\t\tif (tmp_array_x) {\n\t\t\tthis._commit_tmp_values(tmp_array_x, array, 0);\n\t\t}\n\t\tif (tmp_array_y) {\n\t\t\tthis._commit_tmp_values(tmp_array_y, array, 1);\n\t\t}\n\t\tif (tmp_array_z) {\n\t\t\tthis._commit_tmp_values(tmp_array_z, array, 2);\n\t\t}\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\tdo_update_param: BooleanParam,\n\t\tvalue_param: FloatParam,\n\t\tparam_value: number,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst do_update = do_update_param;\n\t\tconst param = value_param;\n\n\t\tlet tmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length, offset);\n\t\tif (do_update.value) {\n\t\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\ttmp_array[point.index] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\ttmp_array[point.index] = param_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid.get(uuid);\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\t\treturn new_array;\n\t\t\t} else {\n\t\t\t\treturn current_array;\n\t\t\t}\n\t\t} else {\n\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tprivate _array_for_component(geometry: BufferGeometry, points_count: number, offset: ComponentOffset) {\n\t\tconst new_array = new Array<number>(points_count);\n\t\tconst src_array = geometry.getAttribute(POSITION_ATTRIB_NAME).array;\n\t\tfor (let i = 0; i < new_array.length; i++) {\n\t\t\tnew_array[i] = src_array[i * 3 + offset];\n\t\t}\n\t\treturn new_array;\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {TubeBufferGeometry} from 'three/src/geometries/TubeGeometry';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n// import {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_R = new Vector3(0, 0, 0);\nconst DEFAULT_S = new Vector3(1, 1, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nclass PolywireSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(8, {\n\t\trange: [3, 20],\n\t\trange_locked: [true, false],\n\t});\n\tclosed = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new PolywireSopParamsConfig();\n\nexport class PolywireSopNode extends TypedSopNode<PolywireSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'polywire';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create tubes from'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tprivate _geometries: BufferGeometry[] = [];\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._geometries = [];\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (object instanceof LineSegments) {\n\t\t\t\tthis._create_tube(object);\n\t\t\t}\n\t\t}\n\n\t\t//if @_param_merge\n\t\t//geometries = lodash_map @_geometries, (object)->object.geometry\n\t\tconst merged_geometry = CoreGeometry.merge_geometries(this._geometries);\n\t\tfor (let geometry of this._geometries) {\n\t\t\tgeometry.dispose();\n\t\t}\n\t\tif (merged_geometry) {\n\t\t\tconst object = this.create_object(merged_geometry);\n\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n\t//else\n\t//\tthis.set_objects( @_objects )\n\n\t_create_tube(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst wrapper = new CoreGeometry(geometry);\n\t\tconst points = wrapper.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\n\t\tfor (let curve_point_indices of accumulated_curve_point_indices) {\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tthis._create_tube_from_points(current_points);\n\t\t}\n\t}\n\n\t_create_tube_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positions = points.map((point) => point.attrib_value('position'));\n\n\t\tconst circle_template = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments_radial);\n\t\tconst circles: BufferGeometry[] = [];\n\t\tconst scale = 1;\n\t\tfor (let position of positions) {\n\t\t\tconst t = position;\n\t\t\tconst matrix = this._core_transform.matrix(t, DEFAULT_R, DEFAULT_S, scale);\n\n\t\t\tconst new_circle = circle_template.clone();\n\t\t\tnew_circle.applyMatrix4(matrix);\n\t\t\tcircles.push(new_circle);\n\t\t}\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tconst circle = circles[i];\n\t\t\t\tconst prev_circle = circles[i - 1];\n\n\t\t\t\tconst geometry = this._skin(prev_circle, circle);\n\t\t\t\tthis._geometries.push(geometry);\n\t\t\t}\n\t\t}\n\t}\n\n\t//this.set_geometries(circles, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS)\n\n\t// curve = new CatmullRomCurve3(positions)\n\t// segments_count = positions.length-1\n\n\t// geometry = new TubeBufferGeometry(\n\t// \tcurve,\n\t// \tsegments_count,\n\t// \t@_param_radius,\n\t// \t@_param_segments_radial,\n\t// \t@_param_closed\n\t// \t)\n\n\t// object = this.create_object(geometry)\n\t// @_objects.push(object)\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Raycaster, Intersection} from 'three/src/core/Raycaster';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {DoubleSide} from 'three/src/constants';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst MAT_DOUBLE_SIDED = new MeshBasicMaterial({\n\tside: DoubleSide,\n});\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RaySopParamsConfig extends NodeParamsConfig {\n\tuse_normals = ParamConfig.BOOLEAN(1);\n\tdirection = ParamConfig.VECTOR3([0, -1, 0], {\n\t\tvisible_if: {use_normals: 0},\n\t});\n\ttransfer_face_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new RaySopParamsConfig();\n\nexport class RaySopNode extends TypedSopNode<RaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ray';\n\t}\n\n\t// _material_by_object_uuid: MaterialByString\n\tprivate _bound_assign_mat = this._assign_double_sided_material_to_object.bind(this); //(Object3D)=>void;\n\tprivate _raycaster = new Raycaster();\n\n\tstatic double_sided_material() {\n\t\treturn MAT_DOUBLE_SIDED;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to move', 'geometry to ray onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.FROM_NODE,\n\t\t\tInputCloneMode.ALWAYS, // to assign double sided mat\n\t\t]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_collision = input_contents[1];\n\n\t\tthis.ray(core_group, core_group_collision);\n\t}\n\n\tray(core_group: CoreGroup, core_group_collision: CoreGroup) {\n\t\t// this._material_by_object_uuid = {}\n\t\tthis._assign_double_sided_material_to_core_group(core_group_collision);\n\n\t\tlet direction: Vector3, first_intersect: Intersection;\n\t\tfor (let point of core_group.points()) {\n\t\t\tdirection = this.pv.use_normals ? point.normal() : this.pv.direction;\n\t\t\tthis._raycaster.set(point.position(), direction);\n\n\t\t\tfirst_intersect = this._raycaster.intersectObjects(core_group_collision.objects(), true)[0];\n\t\t\tif (first_intersect) {\n\t\t\t\tpoint.set_position(first_intersect.point);\n\t\t\t\tif (this.pv.transfer_face_normals && first_intersect.face) {\n\t\t\t\t\tpoint.set_normal(first_intersect.face.normal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_assign_double_sided_material_to_core_group(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse(this._bound_assign_mat);\n\t\t}\n\t}\n\t_assign_double_sided_material_to_object(object: Object3D) {\n\t\t// this._material_by_object_uuid[object.uuid] = object.material\n\t\t(object as Mesh).material = RaySopNode.double_sided_material();\n\t}\n\n\t// average_normals(geometry){\n\t// \tconst normals = [];\n\t// \tconst vertex_index_names = ['a', 'b', 'c'];\n\t// \tlodash_each(geometry.faces, face=> {\n\t// \t\treturn lodash_each(vertex_index_names, (vertex_index_name, i)=> {\n\t// \t\t\tconst vertex_index = face[vertex_index_name];\n\t// \t\t\tif (normals[vertex_index] == null) { normals[vertex_index] = []; }\n\t// \t\t\treturn normals[vertex_index].push(face.vertexNormals[i].clone());\n\t// \t\t});\n\t// \t});\n\n\t// \tlodash_each(normals, function(normal_group, i){\n\t// \t\tconst average = new Vector3(\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'x')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'y')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'z')) / normal_group.length)\n\t// \t\t);\n\t// \t\treturn normals[i] = average;\n\t// \t});\n\n\t// \treturn normals;\n\t// }\n}\n","import {LineSegments} from 'three/src/objects/LineSegments';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\n// import {CubicBezierCurve3} from 'three/src/extras/curves/CubicBezierCurve3';\n// import {LineCurve3} from 'three/src/extras/curves/LineCurve3';\n// import {QuadraticBezierCurve3} from 'three/src/extras/curves/QuadraticBezierCurve3';\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_map from 'lodash/map';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\n\nexport enum METHOD {\n\tPOINTS_COUNT = 'points_count',\n\tSEGMENT_LENGTH = 'segment_length',\n}\nexport const METHODS = [METHOD.POINTS_COUNT, METHOD.SEGMENT_LENGTH];\n\n// matches threejs curve type in CatmullRomCurve3.js\nexport enum CURVE_TYPE {\n\tCENTRIPETAL = 'centripetal',\n\tCHORDAL = 'chordal',\n\tCATMULLROM = 'catmullrom',\n}\nexport const CURVE_TYPES = [CURVE_TYPE.CENTRIPETAL, CURVE_TYPE.CHORDAL, CURVE_TYPE.CATMULLROM];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {TypeAssert} from '../../poly/Assert';\nclass ResampleSopParamsConfig extends NodeParamsConfig {\n\tmethod = ParamConfig.INTEGER(METHODS.indexOf(METHOD.POINTS_COUNT), {\n\t\tmenu: {\n\t\t\tentries: METHODS.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcurve_type = ParamConfig.INTEGER(CURVE_TYPES.indexOf(CURVE_TYPE.CATMULLROM), {\n\t\trange: [0, 2],\n\t\trange_locked: [true, true],\n\t\tmenu: {\n\t\t\tentries: CURVE_TYPES.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\ttension = ParamConfig.FLOAT(0.01, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.POINTS_COUNT)},\n\t});\n\tsegment_length = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.SEGMENT_LENGTH)},\n\t});\n}\nconst ParamsConfig = new ResampleSopParamsConfig();\n\nexport class ResampleSopNode extends TypedSopNode<ResampleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'resample';\n\t}\n\n\t// private _objects: Object3D\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\t// this._objects = [];\n\t\tconst resampled_objects = [];\n\t\tif (this.pv.points_count >= 2) {\n\t\t\tconst core_objects = core_group.core_objects();\n\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\tconst object = core_object.object();\n\t\t\t\tif (object instanceof LineSegments) {\n\t\t\t\t\tconst resampled_object = this._resample(object);\n\t\t\t\t\tresampled_objects.push(resampled_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if (this.pv.merge) {\n\t\t// \tconst geometries = lodash_map(this._objects, object => object.geometry);\n\t\t// \tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t// \tlodash_each(geometries, geometry => geometry.dispose());\n\t\t// \tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// \tthis.set_object( object );\n\t\t// } else {\n\t\tthis.set_objects(resampled_objects);\n\t\t// }\n\t}\n\n\t_resample(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst points = core_geometry.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\t\t// accumulated_curve_point_indices = [accumulated_curve_point_indices[0]]\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tfor (let i = 0; i < accumulated_curve_point_indices.length; i++) {\n\t\t\tconst curve_point_indices = accumulated_curve_point_indices[i];\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tconst geometry = this._create_curve_from_points(current_points);\n\t\t\tif (geometry) {\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t}\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\treturn object;\n\t}\n\n\t_create_curve_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst old_curve_positions = lodash_map(points, (point) => point.attrib_value('position'));\n\t\tconst closed = false;\n\t\tconst curve_type = CURVE_TYPES[this.pv.curve_type];\n\t\tconst tension = this.pv.tension;\n\t\tconst curve = new CatmullRomCurve3(old_curve_positions, closed, curve_type, tension);\n\t\t// const curve = new LineCurve3(old_curve_positions);\n\t\t// const curve = new CubicBezierCurve3(old_curve_positions);\n\t\t// const curve = new QuadraticBezierCurve3(old_curve_positions);\n\n\t\t// TODO: could I detect when a curve has points that are very close\n\t\t// and prevent a curve to go too far\n\t\tconst new_curve_points = this._get_points_from_curve(curve);\n\n\t\tlet positions = [];\n\t\tconst indices = [];\n\n\t\tfor (let i = 0; i < new_curve_points.length; i++) {\n\t\t\tconst point_position = new_curve_points[i];\n\n\t\t\tconst position = point_position.toArray();\n\t\t\tpositions.push(position);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1);\n\t\t\t\tindices.push(i);\n\t\t\t}\n\t\t}\n\n\t\tpositions = lodash_flatten(positions);\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\n\t\treturn geometry;\n\t\t// const object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// this._objects.push(object);\n\t}\n\n\t_get_points_from_curve(curve: CatmullRomCurve3) {\n\t\tconst method = METHODS[this.pv.method];\n\t\tswitch (method) {\n\t\t\tcase METHOD.POINTS_COUNT:\n\t\t\t\treturn curve.getSpacedPoints(Math.max(2, this.pv.points_count));\n\t\t\tcase METHOD.SEGMENT_LENGTH:\n\t\t\t\tvar length = curve.getLength();\n\n\t\t\t\tvar points_count = this.pv.segment_length !== 0 ? 1 + length / this.pv.segment_length : 2;\n\n\t\t\t\tpoints_count = Math.max(2, points_count);\n\n\t\t\t\treturn curve.getSpacedPoints(points_count);\n\t\t}\n\t\tTypeAssert.unreachable(method);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {BufferAttribute, BufferGeometry};\nimport lodash_range from 'lodash/range';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreIterator} from '../../../core/Iterator';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass ScatterSopParamsConfig extends NodeParamsConfig {\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tseed = ParamConfig.INTEGER(0, {\n\t\trange: [0, 100],\n\t\trange_locked: [false, false],\n\t});\n\ttransfer_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_transfer = ParamConfig.STRING('normal', {\n\t\tvisible_if: {transfer_attributes: 1},\n\t});\n\tadd_id_attribute = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new ScatterSopParamsConfig();\n\nexport class ScatterSopNode extends TypedSopNode<ScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scatter';\n\t}\n\n\t// private _positions: number[];\n\t// private _areas_thresholds: number[];\n\t// private _attrib_values_by_name = {};\n\t// private _area_sum: number;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to scatter points onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// const objects = input_contents[0] //.group({clone: false})\n\t\tconst core_group = input_contents[0]; //CoreGroup.from_objects(objects)\n\t\tlet faces = core_group.faces();\n\t\t// const areas_by_face_index = []\n\t\tconst areas_thresholds: number[] = [];\n\t\tlet area_sum = 0;\n\t\tconst area_by_face_index: Map<number, number> = new Map();\n\n\t\tfor (let face of faces) {\n\t\t\tconst area = face.area;\n\t\t\tarea_by_face_index.set(face.index, area);\n\t\t}\n\t\tconst sorted_faces = lodash_sortBy(faces, (f) => {\n\t\t\treturn area_by_face_index.get(f.index);\n\t\t});\n\n\t\tlet i = 0;\n\t\tfor (let face of sorted_faces) {\n\t\t\tarea_sum += area_by_face_index.get(face.index) as number;\n\t\t\tareas_thresholds[i] = area_sum;\n\t\t\ti++;\n\t\t}\n\n\t\tconst positions: number[] = [];\n\t\tlet attrib_names: string[] = [];\n\t\tif (this.pv.transfer_attributes) {\n\t\t\tattrib_names = core_group.attrib_names_matching_mask(this.pv.attributes_to_transfer);\n\t\t}\n\n\t\tconst attrib_values_by_name: Map<string, number[]> = new Map();\n\t\tconst attrib_sizes_by_name: Map<string, number> = new Map();\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tattrib_values_by_name.set(attrib_name, []);\n\t\t\tattrib_sizes_by_name.set(attrib_name, core_group.attrib_size(attrib_name));\n\t\t}\n\n\t\tconst iterator = new CoreIterator();\n\t\t// await iterator.start_with_count(this.pv.points_count, this._add_point.bind(this))\n\t\tawait iterator.start_with_count(this.pv.points_count, (point_index: number) => {\n\t\t\tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * area_sum;\n\n\t\t\tfor (let face_index = 0; face_index < areas_thresholds.length; face_index++) {\n\t\t\t\tconst areas_threshold = areas_thresholds[face_index];\n\n\t\t\t\tif (rand <= areas_threshold) {\n\t\t\t\t\tconst face = sorted_faces[face_index];\n\t\t\t\t\tconst position = face.random_position(rand);\n\t\t\t\t\tposition.toArray(positions, positions.length);\n\n\t\t\t\t\tfor (let attrib_name of attrib_names) {\n\t\t\t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t\t\t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.push(attrib_value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrib_value.toArray(\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name),\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.length\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// for(let point_index=0; point_index<this.pv.points_count; point_index++){\n\n\t\t// \tconst rand = CoreMath.rand_float(this.pv.seed+point_index) * area_sum\n\n\t\t// \tfor(let face_index=0; face_index<areas_thresholds.length; face_index++){\n\n\t\t// \t\tconst areas_threshold = areas_thresholds[face_index]\n\n\t\t// \t\tif(rand <= areas_threshold){\n\t\t// \t\t\tconst face = sorted_faces[face_index]\n\t\t// \t\t\tconst position = face.random_position(rand)\n\t\t// \t\t\tposition.toArray(positions, positions.length)\n\n\t\t// \t\t\tfor(let attrib_name of attrib_names){\n\t\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position)\n\t\t// \t\t\t\tif (lodash_isNumber(attrib_value)){\n\t\t// \t\t\t\t\tattrib_values_by_name[attrib_name].push(attrib_value)\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\tattrib_value.toArray(\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name],\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name].length\n\t\t// \t\t\t\t\t)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\n\t\t// \t\t\tbreak;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tgeometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(attrib_values_by_name.get(attrib_name)!),\n\t\t\t\t\tattrib_sizes_by_name.get(attrib_name)!\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (this.pv.add_id_attribute) {\n\t\t\tconst ids = lodash_range(this.pv.points_count);\n\t\t\tgeometry.setAttribute('id', new THREE.BufferAttribute(new Float32Array(ids), 1));\n\t\t}\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n\n\t// private _add_point(point_index: number) {\n\t// \tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * this._area_sum;\n\n\t// \tfor (let face_index = 0; face_index < this._areas_thresholds.length; face_index++) {\n\t// \t\tconst areas_threshold = this._areas_thresholds[face_index];\n\n\t// \t\tif (rand <= areas_threshold) {\n\t// \t\t\tconst face = this._sorted_faces[face_index];\n\t// \t\t\tconst position = face.random_position(rand);\n\t// \t\t\tposition.toArray(positions, positions.length);\n\n\t// \t\t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t// \t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t// \t\t\t\t\tthis._attrib_values_by_name[attrib_name].push(attrib_value);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tattrib_value.toArray(\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name],\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name].length\n\t// \t\t\t\t\t);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ShadowsSopParamsConfig extends NodeParamsConfig {\n\tcast_shadow = ParamConfig.BOOLEAN(1);\n\treceive_shadow = ParamConfig.BOOLEAN(1);\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new ShadowsSopParamsConfig();\n\nexport class ShadowsSopNode extends TypedSopNode<ShadowsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'shadows';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change shadows properties of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\tchild.castShadow = this.pv.cast_shadow;\n\t\t\t\t\tchild.receiveShadow = this.pv.receive_shadow;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobject.castShadow = this.pv.cast_shadow;\n\t\t\t\tobject.receiveShadow = this.pv.receive_shadow;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(core_group.objects());\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_reverse from 'lodash/reverse';\nimport lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass SkinSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new SkinSopParamsConfig();\n\nexport class SkinSopNode extends TypedSopNode<SkinSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'skin';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create polygons from', 'if used, lines from both inputs will be used'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tswitch (lodash_compact(this.io.inputs.inputs()).length) {\n\t\t\tcase 1:\n\t\t\t\treturn this.process_one_input(input_contents);\n\t\t\tcase 2:\n\t\t\t\treturn this.process_two_inputs(input_contents);\n\t\t\tdefault:\n\t\t\t\treturn this.states.error.set('inputs count not valid');\n\t\t}\n\t}\n\n\tprocess_one_input(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tif (line_segments0) {\n\t\t\tconst first_line_segment = line_segments0[0] as Mesh;\n\t\t\tif (first_line_segment) {\n\t\t\t\tconst src_geometries = CoreGeometryUtilCurve.line_segment_to_geometries(\n\t\t\t\t\tfirst_line_segment.geometry as BufferGeometry\n\t\t\t\t);\n\t\t\t\tsrc_geometries.forEach((src_geometry, i) => {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tconst prev_src_geometry = src_geometries[i - 1];\n\n\t\t\t\t\t\tconst geometry = this._skin(prev_src_geometry, src_geometry);\n\t\t\t\t\t\tgeometries.push(geometry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\tprocess_two_inputs(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\t\tconst line_segments1 = this._get_line_segments(core_group1);\n\t\tconst line_segments = lodash_reverse(lodash_sortBy([line_segments0, line_segments1], (array) => array.length));\n\t\tconst smallest_array = line_segments[0];\n\t\tconst largest_array = line_segments[1];\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tsmallest_array.forEach((line_segment, i) => {\n\t\t\tconst other_line_segment = largest_array[i];\n\n\t\t\tif (line_segment != null && other_line_segment != null) {\n\t\t\t\tconst geo = (line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst other_geo = (other_line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst geometry = this._skin(geo, other_geo);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t});\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\t_get_line_segments(core_group: CoreGroup) {\n\t\treturn core_group.objects().filter((child) => (child as LineSegments).isLineSegments);\n\t}\n\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\t// TODO: maybe instead of doing this,\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {IcosahedronBufferGeometry} from 'three/src/geometries/IcosahedronGeometry';\nimport {TypedSopNode} from './_Base';\n\nenum SphereType {\n\tDEFAULT = 'default',\n\tISOCAHEDRON = 'isocahedron',\n}\ntype SphereTypes = {[key in SphereType]: number};\nconst SPHERE_TYPE: SphereTypes = {\n\tdefault: 0,\n\tisocahedron: 1,\n};\nconst SPHERE_TYPES: Array<SphereType> = [SphereType.DEFAULT, SphereType.ISOCAHEDRON];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass SphereSopParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(SPHERE_TYPE.default, {\n\t\tmenu: {\n\t\t\tentries: SPHERE_TYPES.map((name) => {\n\t\t\t\treturn {name: name, value: SPHERE_TYPE[name]};\n\t\t\t}),\n\t\t},\n\t});\n\tradius = ParamConfig.FLOAT(1, {visible_if: {type: SPHERE_TYPE.default}});\n\tresolution = ParamConfig.VECTOR2([8, 6], {visible_if: {type: SPHERE_TYPE.default}});\n\topen = ParamConfig.BOOLEAN(0, {visible_if: {type: SPHERE_TYPE.default}});\n\tangle_range_x = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tangle_range_y = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tdetail = ParamConfig.INTEGER(1, {\n\t\trange: [0, 5],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {type: SPHERE_TYPE.isocahedron},\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new SphereSopParamsConfig();\n\nexport class SphereSopNode extends TypedSopNode<SphereSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'sphere';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\tprivate _cook_without_input() {\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max\n\t\t\t.clone()\n\t\t\t.add(bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tgeometry.translate(center.x, center.y, center.z);\n\t\tgeometry.scale(size.x, size.y, size.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _create_required_geometry() {\n\t\tif (this.pv.type == SPHERE_TYPE.default) {\n\t\t\treturn this._create_default_sphere();\n\t\t} else {\n\t\t\treturn this._create_default_isocahedron();\n\t\t}\n\t}\n\n\tprivate _create_default_sphere() {\n\t\tif (this.pv.open) {\n\t\t\treturn new SphereBufferGeometry(\n\t\t\t\tthis.pv.radius,\n\t\t\t\tthis.pv.resolution.x,\n\t\t\t\tthis.pv.resolution.y,\n\t\t\t\tthis.pv.angle_range_x.x,\n\t\t\t\tthis.pv.angle_range_x.y,\n\t\t\t\tthis.pv.angle_range_y.x,\n\t\t\t\tthis.pv.angle_range_y.y\n\t\t\t);\n\t\t} else {\n\t\t\treturn new SphereBufferGeometry(this.pv.radius, this.pv.resolution.x, this.pv.resolution.y);\n\t\t}\n\t}\n\t_create_default_isocahedron() {\n\t\treturn new IcosahedronBufferGeometry(this.pv.radius, this.pv.detail);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nconst INPUT_NAME = 'geometry to switch to';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchSopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchSopParamsConfig();\n\nexport class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_core_group(container.core_content());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import lodash_range from 'lodash/range';\n\n// import {CoreFont} from '../../../Core/Font'\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {TextBufferGeometry} from 'three/src/geometries/TextGeometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {ShapeBufferGeometry} from 'three/src/geometries/ShapeGeometry';\nimport {FontLoader} from 'three/src/loaders/FontLoader';\nimport {Font} from 'three/src/extras/core/Font';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Path} from 'three/src/extras/core/Path';\nimport {Shape} from 'three/src/extras/core/Shape';\n\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nvar opentype = require('opentype.js');\n\nimport {TTFLoader} from '../../../../modules/three/examples/jsm/loaders/TTFLoader';\nimport {SVGLoader} from '../../../../modules/three/examples/jsm/loaders/SVGLoader';\n\nconst DEFAULT_URL = '/fonts/droid_sans_regular.typeface.json';\n\ndeclare global {\n\tinterface Window {\n\t\topentype: any;\n\t}\n}\n\n// const DEFAULT_PARAMS = {\n// \tsize: 1,\n// \theight: 0.1,\n// \tcurveSegments: 1\n// };\n\nexport enum TEXT_TYPE {\n\tMESH = 'mesh',\n\tFLAT = 'flat',\n\tLINE = 'line',\n\tSTROKE = 'stroke',\n}\nexport const TEXT_TYPES: Array<TEXT_TYPE> = [TEXT_TYPE.MESH, TEXT_TYPE.FLAT, TEXT_TYPE.LINE, TEXT_TYPE.STROKE];\n\ninterface FontByUrl {\n\t[propName: string]: Font;\n}\n\nconst GENERATION_ERROR_MESSAGE = `failed to generate geometry. Try to remove some characters`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextSopParamsConfig extends NodeParamsConfig {\n\tfont = ParamConfig.STRING('');\n\ttext = ParamConfig.STRING('polygonjs', {multiline: true});\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: TEXT_TYPES.map((type, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: type,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tsize = ParamConfig.FLOAT(1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n\textrude = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tsegments = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tstroke_width = ParamConfig.FLOAT(0.02, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.STROKE),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new TextSopParamsConfig();\n\nexport class TextSopNode extends TypedSopNode<TextSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'text';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['loaders/TTFLoader', 'loaders/SVGLoader'];\n\t// }\n\n\tprivate _font_loader: FontLoader = new FontLoader();\n\tprivate _ttf_loader: TTFLoader | undefined;\n\tprivate _svg_loader: typeof SVGLoader | undefined;\n\tprivate _loaded_fonts: FontByUrl = {};\n\n\tinitialize_node() {}\n\n\tasync cook() {\n\t\ttry {\n\t\t\tthis._loaded_fonts[this.pv.font] = this._loaded_fonts[this.pv.font] || (await this._load_url(this.pv.font));\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(`count not load font (${this.pv.font})`);\n\t\t\treturn;\n\t\t}\n\t\tconst font = this._loaded_fonts[this.pv.font];\n\t\tif (font) {\n\t\t\tswitch (TEXT_TYPES[this.pv.type]) {\n\t\t\t\tcase TEXT_TYPE.MESH:\n\t\t\t\t\treturn this._create_geometry_from_type_mesh(font);\n\t\t\t\tcase TEXT_TYPE.FLAT:\n\t\t\t\t\treturn this._create_geometry_from_type_flat(font);\n\t\t\t\tcase TEXT_TYPE.LINE:\n\t\t\t\t\treturn this._create_geometry_from_type_line(font);\n\t\t\t\tcase TEXT_TYPE.STROKE:\n\t\t\t\t\treturn this._create_geometry_from_type_stroke(font);\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('type is not valid');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_mesh(font: Font) {\n\t\tconst text = this.displayed_text();\n\n\t\tconst parameters = {\n\t\t\tfont: font,\n\t\t\tsize: this.pv.size,\n\t\t\theight: this.pv.extrude,\n\t\t\tcurveSegments: this.pv.segments,\n\t\t};\n\n\t\ttry {\n\t\t\tconst geometry = new TextBufferGeometry(text, parameters);\n\t\t\tif (!geometry.index) {\n\t\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t\t}\n\t\t\tthis.set_geometry(geometry);\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_flat(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tvar geometry = new ShapeBufferGeometry(shapes);\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n\tprivate _create_geometry_from_type_line(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\tconst positions = [];\n\t\t\tconst indices = [];\n\t\t\tlet current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\tconst point = points[j];\n\t\t\t\t\tpositions.push(point.x);\n\t\t\t\t\tpositions.push(point.y);\n\t\t\t\t\tpositions.push(0);\n\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\tif (j > 0 && j < points.length - 1) {\n\t\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_index += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.setIndex(indices);\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\tprivate async _create_geometry_from_type_stroke(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\t// const color = new Color( 0xffffff );\n\t\t\tthis._svg_loader = this._svg_loader || (await this._load_svg_loader());\n\t\t\t// TODO: typescript: correct definition for last 3 optional args\n\t\t\tvar style = this._svg_loader.getStrokeStyle(this.pv.stroke_width, 'white', 'miter', 'butt', 4);\n\t\t\tconst geometries = [];\n\n\t\t\t// const positions = [];\n\t\t\t// const indices = [];\n\t\t\t// let current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t// TODO: typescript: correct definition for points, arcDivisions, and minDistance\n\t\t\t\tconst arcDivisions = 12;\n\t\t\t\tconst minDistance = 0.001;\n\t\t\t\tconst geometry = this._svg_loader.pointsToStroke(\n\t\t\t\t\t(<unknown>points) as Vector3[],\n\t\t\t\t\tstyle,\n\t\t\t\t\tarcDivisions,\n\t\t\t\t\tminDistance\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\t\tthis.set_geometry(merged_geometry); //, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\n\tprivate shapes_from_font(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tconst holeShapes: Path[] = [];\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tif (shape.holes && shape.holes.length > 0) {\n\t\t\t\t\tfor (let j = 0; j < shape.holes.length; j++) {\n\t\t\t\t\t\tconst hole = shape.holes[j];\n\t\t\t\t\t\tholeShapes.push(hole);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshapes.push.apply(shapes, holeShapes as Shape[]);\n\t\t\treturn shapes;\n\t\t}\n\t}\n\n\tprivate _get_shapes(font: Font) {\n\t\tconst text = this.displayed_text();\n\t\ttry {\n\t\t\tconst shapes = font.generateShapes(text, this.pv.size);\n\t\t\treturn shapes;\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate displayed_text(): string {\n\t\treturn this.pv.text || '';\n\t}\n\n\t// _create_shape(font){\n\t// \tconst shapes = font.generateShapes( this.displayed_text(), 100 );\n\t// \tvar geometry = new ShapeBufferGeometry( shapes );\n\t// \treturn geometry\n\t// \t// geometry.computeBoundingBox();\n\t// \t// xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\t// \t// geometry.translate( xMid, 0, 0 );\n\t// \t// make shape ( N.B. edge view not visible )\n\t// \t// text = new Mesh( geometry, matLite );\n\t// \t// text.position.z = - 150;\n\t// }\n\n\tprivate _load_url(url: string) {\n\t\tif (url === '') {\n\t\t\turl = DEFAULT_URL;\n\t\t}\n\t\tconst elements1 = url.split('?')[0];\n\t\tconst elements2 = elements1.split('.');\n\t\tconst ext = elements2[elements2.length - 1];\n\t\turl = `${url}?${Date.now()}`;\n\t\tswitch (ext) {\n\t\t\tcase 'ttf': {\n\t\t\t\treturn this._load_ttf(url);\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treturn this._load_json(url);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _load_ttf(url: string): Promise<Font> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._ttf_loader = this._ttf_loader || (await this._load_ttf_loader());\n\t\t\twindow.opentype = opentype;\n\t\t\tthis._ttf_loader.load(\n\t\t\t\turl,\n\t\t\t\t(fnt: object) => {\n\t\t\t\t\tconst parsed = this._font_loader.parse(fnt);\n\t\t\t\t\t// make sure not to delete opentype from window, as it may be required by other nodes\n\t\t\t\t\t// delete window.opentype;\n\t\t\t\t\tresolve(parsed);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tprivate _load_json(url: string): Promise<Font> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._font_loader.load(\n\t\t\t\turl,\n\t\t\t\t(font) => {\n\t\t\t\t\tresolve(font);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t// private _default_font_parameters(options){\n\t// \tif (options == null) { options = {}; }\n\t// \tconst default_options = lodash_clone(DEFAULT_PARAMS);\n\t// \tif (options['font'] == null) { options['font'] = this.font(); }\n\n\t// \tfor(let key of Object.keys(options)){\n\t// \t\tdefault_options[key] = options[key];\n\t// \t}\n\n\t// \treturn default_options;\n\t// }\n\tprivate async _load_ttf_loader(): Promise<TTFLoader> {\n\t\tconst {TTFLoader} = await import(`../../../../modules/three/examples/jsm/loaders/TTFLoader`);\n\t\tconst loader_constructor = (<unknown>TTFLoader) as typeof TTFLoader;\n\t\treturn new loader_constructor();\n\t}\n\tprivate async _load_svg_loader(): Promise<typeof SVGLoader> {\n\t\tconst {SVGLoader} = await import(`../../../../modules/three/examples/jsm/loaders/SVGLoader`);\n\t\treturn (<unknown>SVGLoader) as typeof SVGLoader;\n\t}\n}\n","import {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author gero3 / https://github.com/gero3\n * @author tentone / https://github.com/tentone\n * @author troy351 / https://github.com/troy351\n *\n * Requires opentype.js to be included in the project.\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n */\n\n\nvar TTFLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.reversed = false;\n\n};\n\n\nTTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TTFLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tvar round = Math.round;\n\n\t\t\tvar glyphs = {};\n\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tvar token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tvar paths = [];\n\t\t\tvar path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n} );\n\nexport { TTFLoader };\n","import {TorusBufferGeometry} from 'three/src/geometries/TorusGeometry';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tradius_tube = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(20, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\tsegments_tube = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new TorusSopParamsConfig();\n\nexport class TorusSopNode extends TypedSopNode<TorusSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\t//radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float\n\n\t\tconst geometry = new TorusBufferGeometry(radius, radius_tube, segments_radial, segments_tube);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TorusKnotBufferGeometry} from 'three/src/geometries/TorusKnotGeometry';\nconst THREE = {TorusKnotBufferGeometry};\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusKnotSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tradius_tube = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(64, {range: [1, 128]});\n\tsegments_tube = ParamConfig.INTEGER(8, {range: [1, 32]});\n\tp = ParamConfig.INTEGER(2, {range: [1, 10]});\n\tq = ParamConfig.INTEGER(3, {range: [1, 10]});\n}\nconst ParamsConfig = new TorusKnotSopParamsConfig();\n\nexport class TorusKnotSopNode extends TypedSopNode<TorusKnotSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus_knot';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\tconst p = this.pv.p;\n\t\tconst q = this.pv.q;\n\n\t\tconst geometry = new THREE.TorusKnotBufferGeometry(radius, radius_tube, segments_radial, segments_tube, p, q);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {GroupParamController} from './utils/GroupParamController';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreTransform} from '../../../core/Transform';\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\n// const DEFAULT_PARAMS = {\n// \tPIVOT: [0, 0, 0] as [number, number, number],\n// };\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TransformSopParamConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\n\t// transform\n\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\tscale = ParamConfig.FLOAT(1);\n\tlook_at = ParamConfig.OPERATOR_PATH('');\n\tup = ParamConfig.VECTOR3([0, 1, 0]);\n\tpivot = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new TransformSopParamConfig();\n\nexport class TransformSopNode extends TypedSopNode<TransformSopParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'transform';\n\t}\n\t// allow_eval_key_check() {\n\t// \treturn true;\n\t// }\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transform'];\n\t}\n\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst objects = input_contents[0].objects();\n\t\tconst matrix = this._core_transform.matrix(this.pv.t, this.pv.r, this.pv.s, this.pv.scale);\n\n\t\tif (this.pv.group === '') {\n\t\t\tfor (let object of objects) {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = object.geometry) != null) {\n\t\t\t\t\tgeometry.translate(-this.pv.pivot.x, -this.pv.pivot.y, -this.pv.pivot.z);\n\t\t\t\t\tgeometry.applyMatrix4(matrix);\n\t\t\t\t\tgeometry.translate(this.pv.pivot.x, this.pv.pivot.y, this.pv.pivot.z);\n\t\t\t\t} else {\n\t\t\t\t\tobject.applyMatrix4(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst core_group = CoreGroup.from_objects(objects);\n\t\t\tconst points = core_group.points_from_group(this.pv.group);\n\t\t\tfor (let point of points) {\n\t\t\t\tconst position = point.position().sub(this.pv.pivot);\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tpoint.set_position(position.add(this.pv.pivot));\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(objects);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {CylinderBufferGeometry} from 'three/src/geometries/CylinderGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TubeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new TubeSopParamsConfig();\n\nexport class TubeSopNode extends TypedSopNode<TubeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'tube';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new CylinderBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CameraController} from '../../../core/CameraController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\n// const MODE = [];\nconst UV_NAME = 'uv';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseObjNodeType} from '../obj/_Base';\nclass UvProjectSopParamsConfig extends NodeParamsConfig {\n\tcamera = ParamConfig.OPERATOR_PATH('/perspective_camera1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.OBJ,\n\t\t},\n\t});\n\t// force_aspect = ParamConfig.BOOLEAN(0)\n\t// aspect = ParamConfig.FLOAT(1, {\n\t// \trange: [0, 2],\n\t// \tvisible_if: {force_aspect: 1},\n\t// })\n}\nconst ParamsConfig = new UvProjectSopParamsConfig();\n\nexport class UvProjectSopNode extends TypedSopNode<UvProjectSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'uv_project';\n\t}\n\n\tprivate _camera_controller: CameraController = new CameraController(this._update_uvs_from_camera.bind(this));\n\t// private _param_camera: string\n\tprivate _processed_core_group: CoreGroup | undefined;\n\t// private _camera_node: BaseCameraObjNodeType | undefined;\n\tprivate _camera_object: Camera | undefined;\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._processed_core_group = core_groups[0];\n\n\t\tconst camera_node = this.p.camera.found_node();\n\t\tif (camera_node != null) {\n\t\t\tthis._camera_object = (camera_node as BaseCameraObjNodeType).object;\n\t\t\tthis._camera_controller.set_target(this._camera_object);\n\t\t\t// this._add_camera_event()\n\t\t} else {\n\t\t\tthis._camera_object = undefined;\n\t\t\t//this._remove_camera_event()\n\t\t\tthis._camera_controller.remove_target();\n\t\t}\n\n\t\tthis.set_core_group(this._processed_core_group);\n\t}\n\n\t_update_uvs_from_camera(look_at_target: Object3D) {\n\t\t// let old_aspect;\n\t\t// if (this.pv.force_aspect) {\n\t\t// \told_aspect = this._camera_object.aspect;\n\t\t// \tthis._camera_node.setup_for_aspect_ratio(this.pv.aspect);\n\t\t// }\n\n\t\tif (this._processed_core_group && this.parent) {\n\t\t\tconst points = this._processed_core_group.points();\n\t\t\tconst obj_world_matrix = (this.parent as BaseObjNodeType).object.matrixWorld;\n\t\t\tpoints.forEach((point) => {\n\t\t\t\tconst position = point.position();\n\t\t\t\tconst uvw = this._vector_in_camera_space(position, obj_world_matrix);\n\t\t\t\tif (uvw) {\n\t\t\t\t\tconst uv = {\n\t\t\t\t\t\tx: 1 - (uvw[0] * 0.5 + 0.5),\n\t\t\t\t\t\ty: uvw[1] * 0.5 + 0.5,\n\t\t\t\t\t};\n\t\t\t\t\tpoint.set_attrib_value(UV_NAME, uv);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if (this.pv.force_aspect) {\n\t\t\t// \tthis._camera_node.setup_for_aspect_ratio(old_aspect);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate _vector_in_camera_space(vector: Vector3, obj_world_matrix: Matrix4) {\n\t\tif (this._camera_object) {\n\t\t\tvector.applyMatrix4(obj_world_matrix);\n\t\t\treturn vector.project(this._camera_object).toArray();\n\t\t}\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nenum EVENT {\n\tCHANGE = 'change',\n\tMOVEEND = 'moveend',\n}\n\ntype CameraControllerCallback = (target: Object3D) => void;\n\nexport class CameraController {\n\tprivate _update_always: boolean = true;\n\tprivate _listener: any;\n\tprivate _target: Object3D | undefined;\n\tprivate _listener_added: boolean = false;\n\n\tconstructor(private _callback: CameraControllerCallback) {\n\t\tthis._listener = this._execute_callback.bind(this);\n\t}\n\n\tremove_target() {\n\t\tthis.set_target(undefined);\n\t}\n\tset_target(target: Object3D | undefined) {\n\t\tif (!target) {\n\t\t\tthis._remove_camera_event();\n\t\t}\n\n\t\tconst old_target = this._target;\n\t\tthis._target = target;\n\n\t\tif (this._target != null) {\n\t\t\tthis._execute_callback();\n\t\t}\n\n\t\tif (\n\t\t\t(this._target != null ? this._target.uuid : undefined) !==\n\t\t\t(old_target != null ? old_target.uuid : undefined)\n\t\t) {\n\t\t\tthis._add_camera_event();\n\t\t}\n\t}\n\n\tset_update_always(new_update_always: boolean) {\n\t\tthis._remove_camera_event();\n\n\t\tthis._update_always = new_update_always;\n\n\t\tthis._add_camera_event();\n\t}\n\n\tprivate _current_event_name() {\n\t\tif (this._update_always) {\n\t\t\treturn EVENT.CHANGE;\n\t\t} else {\n\t\t\treturn EVENT.MOVEEND;\n\t\t}\n\t}\n\n\tprivate _add_camera_event() {\n\t\tif (this._listener_added) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.addEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = true;\n\t\t}\n\t}\n\n\tprivate _remove_camera_event() {\n\t\tif (this._listener_added !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.removeEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = false;\n\t\t}\n\t}\n\n\tprivate _execute_callback() {\n\t\tif (this._target != null) {\n\t\t\tthis._callback(this._target);\n\t\t}\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonImporterVisitor} from './Visitor'\nimport {SceneJsonExporterData} from '../export/Scene';\nimport {JsonImportDispatcher} from './Dispatcher';\n\nexport class SceneJsonImporter {\n\tconstructor(private _data: SceneJsonExporterData) {}\n\n\tstatic load_data(data: SceneJsonExporterData) {\n\t\tconst importer = new SceneJsonImporter(data);\n\t\treturn importer.scene();\n\t}\n\n\tasync scene(): Promise<PolyScene> {\n\t\tconst scene = new PolyScene();\n\t\tscene.loading_controller.mark_as_loading();\n\n\t\t// scene.set_js_version(this._data['__js_version'])\n\t\tconst properties = this._data['properties'];\n\t\tif (properties) {\n\t\t\t// scene.set_name(properties['name'])\n\t\t\tscene.set_frame(properties['frame'] || 1);\n\t\t\tconst frame_range = properties['frame_range'] || [];\n\t\t\tscene.time_controller.set_frame_range(frame_range[0] || 1, frame_range[1] || 100);\n\t\t\tconst frame_range_locked = properties['frame_range_locked'];\n\t\t\tif (frame_range_locked) {\n\t\t\t\tscene.time_controller.set_frame_range_locked(frame_range_locked[0], frame_range_locked[1]);\n\t\t\t}\n\t\t\t// scene.time_controller.set_fps(properties['fps'] || 30);\n\t\t\tif (properties['master_camera_node_path']) {\n\t\t\t\tscene.cameras_controller.set_master_camera_node_path(properties['master_camera_node_path']);\n\t\t\t}\n\t\t}\n\n\t\t// we block to ensure that nodes will not run their dirty_hooks\n\t\t// which would trigger operator_path params to search for nodes that\n\t\t// may not exist yet\n\t\tscene.cooker.block();\n\n\t\tconst importer = JsonImportDispatcher.dispatch_node(scene.root);\n\t\tif (this._data['root']) {\n\t\t\timporter.process_data(this._data['root']);\n\t\t}\n\t\tif (this._data['ui']) {\n\t\t\timporter.process_ui_data(this._data['ui']);\n\t\t}\n\n\t\tawait scene.loading_controller.mark_as_loaded();\n\t\tscene.cooker.unblock();\n\t\t// DO NOT wait for cooks here,\n\t\t// as a viewer will only be created once everything has cooked\n\t\t// which would be a problem for env_map or other nodes relying on the renderer being created\n\t\t// await scene.wait_for_cooks_completed();\n\n\t\treturn scene;\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeJsonExporterData, NodeJsonExporterUIData, InputData} from '../export/Node';\nimport {ParamJsonExporterData, SimpleParamJsonExporterData, ComplexParamJsonExporterData} from '../export/Param';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {JsonImportDispatcher} from './Dispatcher';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../../nodes/utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nexport class NodeJsonImporter<T extends BaseNodeType> {\n\tconstructor(protected _node: T) {}\n\n\tprocess_data(data: NodeJsonExporterData) {\n\t\tthis.create_nodes(data['nodes']);\n\t\tthis.set_selection(data['selection']);\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = data['override_clonable_state'];\n\t\t\tif (override) {\n\t\t\t\tthis._node.io.inputs.set_override_clonable_state(override);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_flags(data);\n\t\tthis.set_params(data['params']);\n\n\t\tthis.from_data_custom(data);\n\n\t\tthis._node.lifecycle.set_creation_completed();\n\t}\n\tprocess_inputs_data(data: NodeJsonExporterData) {\n\t\tthis.set_inputs(data['inputs']);\n\t}\n\n\tprocess_ui_data(data: NodeJsonExporterUIData) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst ui_data = this._node.ui_data;\n\t\tconst pos = data['pos'];\n\t\tif (pos) {\n\t\t\tconst vector = new Vector2().fromArray(pos);\n\t\t\tui_data.set_position(vector);\n\t\t}\n\t\tconst comment = data['comment'];\n\t\tif (comment) {\n\t\t\tui_data.set_comment(comment);\n\t\t}\n\t\tthis.process_nodes_ui_data(data['nodes']);\n\t}\n\n\tcreate_nodes(data?: Dictionary<NodeJsonExporterData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tfor (let node_name of node_names) {\n\t\t\tconst node_data = data[node_name];\n\t\t\tconst node_type = node_data['type'];\n\t\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\t\tconst node = this._node.create_node(node_type);\n\t\t\t\tif (node) {\n\t\t\t\t\tnode.set_name(node_name);\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst importers = [];\n\t\tlet index = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = JsonImportDispatcher.dispatch_node(node); //.visit(JsonImporterVisitor)\n\t\t\timporters.push(importer);\n\t\t\timporter.process_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t\tindex = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = importers[index];\n\t\t\timporter.process_inputs_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t}\n\tset_selection(data?: string[]) {\n\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\tif (data && data.length > 0) {\n\t\t\t\tconst selected_nodes: BaseNodeType[] = [];\n\t\t\t\tdata.forEach((node_name) => {\n\t\t\t\t\tconst node = this._node.node(node_name);\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tselected_nodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._node.children_controller.selection.set(selected_nodes);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_flags(data: NodeJsonExporterData) {\n\t\tconst flags = data['flags'];\n\t\tif (flags) {\n\t\t\tconst bypass = flags['bypass'];\n\t\t\tif (bypass != null) {\n\t\t\t\tthis._node.flags?.bypass?.set(bypass);\n\t\t\t}\n\t\t\tconst display = flags['display'];\n\t\t\tif (display != null) {\n\t\t\t\tthis._node.flags?.display?.set(display);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_inputs(inputs_data?: InputData[]) {\n\t\tif (!inputs_data) {\n\t\t\treturn;\n\t\t}\n\n\t\tinputs_data.forEach((input_data, i) => {\n\t\t\tif (input_data && this._node.parent) {\n\t\t\t\tif (lodash_isString(input_data)) {\n\t\t\t\t\tconst input_node_name = input_data;\n\t\t\t\t\tconst input_node = this._node.parent.node(input_node_name);\n\t\t\t\t\tthis._node.set_input(i, input_node);\n\t\t\t\t} else {\n\t\t\t\t\tconst input_node = this._node.parent.node(input_data['node']);\n\t\t\t\t\tconst input_name = input_data['name'];\n\t\t\t\t\tif (this._node.io.inputs.has_named_input(input_name)) {\n\t\t\t\t\t\tthis._node.set_input(input_data['name'], input_node, input_data['output']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`${this._node.full_path()} has no input named ${input_name}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprocess_nodes_ui_data(data: Dictionary<NodeJsonExporterUIData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tnode_names.forEach((node_name) => {\n\t\t\tconst node = this._node.node(node_name);\n\t\t\tif (node) {\n\t\t\t\tconst node_data = data[node_name];\n\t\t\t\tJsonImportDispatcher.dispatch_node(node).process_ui_data(node_data);\n\t\t\t\t// node.visit(JsonImporterVisitor).process_ui_data(node_data);\n\t\t\t}\n\t\t});\n\t}\n\n\t//\n\t//\n\t// PARAMS\n\t//\n\t//\n\tset_params(data?: Dictionary<ParamJsonExporterData<ParamType>>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst param_names = Object.keys(data);\n\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param_data = data[param_name] as ComplexParamJsonExporterData<ParamType>;\n\t\t\tconst options = param_data['options'];\n\t\t\t// const is_spare = options && options['spare'] === true;\n\n\t\t\tconst param_type = param_data['type']!;\n\t\t\tconst has_param = this._node.params.has_param(param_name);\n\t\t\tlet has_param_and_same_type = false;\n\t\t\tlet param;\n\t\t\tif (has_param) {\n\t\t\t\tparam = this._node.params.get(param_name);\n\t\t\t\t// we can safely consider same type if param_type is not mentioned\n\t\t\t\tif ((param && param.type == param_type) || param_type == null) {\n\t\t\t\t\thas_param_and_same_type = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (has_param_and_same_type) {\n\t\t\t\tif (this._is_param_data_complex(param_data)) {\n\t\t\t\t\tthis._process_param_data_complex(param_name, param_data);\n\t\t\t\t} else {\n\t\t\t\t\tthis._process_param_data_simple(param_name, param_data as SimpleParamJsonExporterData<ParamType>);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// it the param is a spare one,\n\t\t\t\t// we check if it is currently exists with same type first.\n\t\t\t\t// - if it is, we only update the value\n\t\t\t\t// - if it's not, we delete it and add it again\n\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: param_data['default_value'] as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (options && param_type) {\n\t\t\t\t// \tif (param_data['default_value']) {\n\t\t\t\t// \t\tif (has_param) {\n\t\t\t\t// \t\t\tthis._node.params.delete_param(param_name);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\tparam = this._node.add_param(param_type, param_name, param_data['default_value'], options);\n\t\t\t\t// \t\tif (param) {\n\t\t\t\t// \t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\t// delete and create the spare params we need to\n\t\tconst params_delete_required =\n\t\t\tparams_update_options.names_to_delete && params_update_options.names_to_delete.length > 0;\n\t\tconst params_add_required = params_update_options.to_add && params_update_options.to_add.length > 0;\n\n\t\tif (params_delete_required || params_add_required) {\n\t\t\tthis._node.params.update_params(params_update_options);\n\t\t\t// update them based on the imported data\n\t\t\tfor (let spare_param of this._node.params.spare) {\n\t\t\t\tconst param_data = data[spare_param.name] as ComplexParamJsonExporterData<ParamType>;\n\t\t\t\t// JsonImportDispatcher.dispatch_param(spare_param).process_data(param_data);\n\t\t\t\tif (!spare_param.parent_param && param_data) {\n\t\t\t\t\tif (this._is_param_data_complex(param_data)) {\n\t\t\t\t\t\tthis._process_param_data_complex(spare_param.name, param_data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._process_param_data_simple(\n\t\t\t\t\t\t\tspare_param.name,\n\t\t\t\t\t\t\tparam_data as SimpleParamJsonExporterData<ParamType>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// those hooks are useful for some gl nodes,\n\t\t// such as the constant, which needs to update its connections\n\t\t// based on another parameter, which will be set just before\n\t\tthis._node.params.run_on_scene_load_hooks();\n\t}\n\n\tprivate _process_param_data_simple(param_name: string, param_data: SimpleParamJsonExporterData<ParamType>) {\n\t\tthis._node.params.get(param_name)?.set(param_data);\n\t}\n\n\tprivate _process_param_data_complex(param_name: string, param_data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst param = this._node.params.get(param_name);\n\t\tif (param) {\n\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t}\n\t\t// return\n\t\t// const has_param = this._node.params.has_param(param_name);\n\t\t// const param_type = param_data['type']!;\n\n\t\t// let has_param_and_same_type = false;\n\t\t// let param;\n\t\t// if (has_param) {\n\t\t// \tparam = this._node.params.get(param_name);\n\t\t// \t// we can safely consider same type if param_type is not mentioned\n\t\t// \tif ((param && param.type == param_type) || param_type == null) {\n\t\t// \t\thas_param_and_same_type = true;\n\t\t// \t}\n\t\t// }\n\t\t// if (has_param_and_same_type) {\n\t\t// \tparam = this._node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t// \t\t// param.visit(JsonImporterVisitor).process_data(param_data);\n\t\t// \t}\n\t\t// } else {\n\t\t// \tconst options = param_data['options'];\n\t\t// \tif (options && param_type) {\n\t\t// \t\tconst is_spare = options['spare'] === true;\n\t\t// \t\tif (is_spare && param_data['default_value']) {\n\t\t// \t\t\tif (has_param) {\n\t\t// \t\t\t\tthis._node.params.delete_param(param_name);\n\t\t// \t\t\t}\n\t\t// \t\t\tparam = this._node.add_param(param_type, param_name, param_data['default_value'], options);\n\t\t// \t\t\tif (param) {\n\t\t// \t\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _is_param_data_complex(param_data: ParamJsonExporterData<ParamType>): boolean {\n\t\t// we can test here most param value serialized, except for ramp\n\t\tif (\n\t\t\tlodash_isString(param_data) ||\n\t\t\tlodash_isNumber(param_data) ||\n\t\t\tlodash_isArray(param_data) ||\n\t\t\tlodash_isBoolean(param_data)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lodash_isObject(param_data)) {\n\t\t\tif (Object.keys(param_data).includes('type')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfrom_data_custom(data: NodeJsonExporterData) {}\n}\n","import {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {TypedMultipleParam} from '../../../../params/_Multiple';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamMultipleJsonImporter extends ParamJsonImporter<TypedMultipleParam<ParamType>> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {\n\t\t// const components = data['components'];\n\t\t// if (components) {\n\t\t// \tObject.keys(components).forEach((component_name) => {\n\t\t// \t\tconst param_name = `${this._param.name}${component_name}`;\n\t\t// \t\tconst component_param = this._param.node.params\n\t\t// \t\t\t.get(this._param.name)\n\t\t// \t\t\t?.components?.filter((c) => c.name == param_name)[0];\n\t\t// \t\tif (component_param) {\n\t\t// \t\t\tconst component_data = components[component_name];\n\t\t// \t\t\tJsonImportDispatcher.dispatch_param(component_param as FloatParam).process_data(component_data);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// }\n\t}\n}\n","// import lodash_isString from 'lodash/isString';\nimport {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {StringParam} from '../../../../params/String';\nimport {ParamType} from '../../../../poly/ParamType';\n\nconst LINE_BREAK_REGEXP = /\\\\n+/g;\n\nexport class ParamStringJsonImporter extends ParamJsonImporter<StringParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.STRING>) {\n\t\tlet raw_input = data['raw_input'];\n\t\tif (raw_input !== undefined) {\n\t\t\t// if (lodash_isString(value)) {\n\t\t\traw_input = raw_input.replace(LINE_BREAK_REGEXP, '\\n');\n\t\t\tthis._param.set(raw_input);\n\t\t\t// }\n\t\t}\n\t}\n}\n","import {ParamJsonImporter} from '../Param';\n// import {RampValueJson} from '../../../../params/ramp/RampValue';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {RampParam} from '../../../../params/Ramp';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamRampJsonImporter extends ParamJsonImporter<RampParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.RAMP>) {\n\t\tconst raw_input = data['raw_input']; // as RampValueJson;\n\t\tif (raw_input) {\n\t\t\t// const ramp_value = RampValue.from_json(value);\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","import {Clock} from 'three/src/core/Clock';\nimport {LinearFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {RGBAFormat} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"sourceRoot":""}