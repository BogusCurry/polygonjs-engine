{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine/nodes/utils/params/ParamsConfig.ts","webpack:///./src/engine/nodes/sop/_Base.ts","webpack:///./src/engine/poly/InputCloneMode.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionPointType.ts","webpack:///./src/engine/poly/ParamType.ts","webpack:///./src/engine/poly/NodeContext.ts","webpack:///./src/core/geometry/Constant.ts","webpack:///./src/core/ThreeToGl.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinition.ts","webpack:///./src/core/String.ts","webpack:///./src/engine/nodes/utils/shaders/ShaderName.ts","webpack:///./src/core/geometry/Geometry.ts","webpack:///./src/engine/poly/NodeEvent.ts","webpack:///./src/engine/expressions/methods/_Base.ts","webpack:///./src/engine/nodes/gl/_Base.ts","webpack:///./src/engine/nodes/utils/connections/NamedConnectionPoint.ts","webpack:///./src/engine/Poly.ts","webpack:///./src/core/graph/CoreGraphNode.ts","webpack:///./src/engine/nodes/mat/_Base.ts","webpack:///./modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./src/engine/nodes/obj/_Base.ts","webpack:///./src/engine/nodes/obj/utils/TransformController.ts","webpack:///./src/core/Walker.ts","webpack:///./src/engine/nodes/_Base.ts","webpack:///./src/engine/params/_Base.ts","webpack:///./src/engine/nodes/utils/FlagsController.ts","webpack:///./src/core/Transform.ts","webpack:///./src/engine/poly/ParamEvent.ts","webpack:///./src/core/math/_Module.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunctionArg1.ts","webpack:///./src/engine/nodes/mat/utils/SideController.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/_BaseMaterial.ts","webpack:///./src/engine/nodes/utils/ContainerController.ts","webpack:///./src/core/geometry/Attribute.ts","webpack:///./src/engine/containers/_Base.ts","webpack:///./src/engine/nodes/mat/utils/SkinningController.ts","webpack:///./src/engine/nodes/mat/utils/TextureMapController.ts","webpack:///./src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack:///./src/core/MapUtils.ts","webpack:///./src/engine/poly/registers/Category.ts","webpack:///./src/engine/nodes/cop/_Base.ts","webpack:///./src/engine/nodes/gl/code/Controller.ts","webpack:///./src/engine/nodes/gl/gl/quaternion.glsl","webpack:///./src/engine/nodes/obj/utils/cameras/background/_BaseController.ts","webpack:///./src/engine/params/_Multiple.ts","webpack:///./src/engine/params/Ramp.ts","webpack:///./src/engine/io/json/export/Param.ts","webpack:///./src/engine/nodes/gl/code/assemblers/_Base.ts","webpack:///./src/engine/nodes/gl/code/globals/Geometry.ts","webpack:///./src/engine/nodes/cop/File.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunction.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunctionArg2.ts","webpack:///./src/engine/nodes/mat/utils/_BaseController.ts","webpack:///./src/core/geometry/Material.ts","webpack:///./src/engine/params/_Numeric.ts","webpack:///./src/engine/poly/Assert.ts","webpack:///./src/engine/io/json/export/Scene.ts","webpack:///./src/engine/nodes/gl/code/configs/ShaderConfig.ts","webpack:///./src/engine/nodes/gl/code/configs/VariableConfig.ts","webpack:///./src/engine/nodes/gl/utils/ConnectionsController.ts","webpack:///./src/engine/nodes/mat/utils/ColorsController.ts","webpack:///./src/engine/nodes/mat/utils/UniformsColorsController.ts","webpack:///./src/engine/nodes/mat/_BaseBuilder.ts","webpack:///./src/engine/nodes/obj/_BaseLightTransformed.ts","webpack:///./src/engine/nodes/obj/utils/helpers/_BaseLightHelper.ts","webpack:///./src/engine/nodes/obj/utils/HelperController.ts","webpack:///./src/engine/nodes/obj/_BaseManager.ts","webpack:///./src/engine/nodes/obj/utils/LayersController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/PostProcessController.ts","webpack:///./src/engine/io/json/import/Param.ts","webpack:///./src/engine/nodes/utils/NameController.ts","webpack:///./src/engine/expressions/traversers/_Base.ts","webpack:///./src/engine/params/String.ts","webpack:///./src/engine/io/json/export/Dispatcher.ts","webpack:///./src/engine/nodes/gl/code/utils/LineType.ts","webpack:///./src/engine/nodes/gl/Attribute.ts","webpack:///./src/engine/nodes/gl/code/utils/NodeFinder.ts","webpack:///./src/engine/nodes/event/CameraOrbitControls.ts","webpack:///./src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/_BaseMesh.ts","webpack:///./src/engine/nodes/obj/_BaseLight.ts","webpack:///./src/core/geometry/Object.ts","webpack:///./modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack:///./src/engine/nodes/gl/code/globals/Texture.ts","webpack:///./src/core/geometry/util/Curve.ts","webpack:///./modules/three/examples/jsm/libs/inflate.module.min.js","webpack:///./src/engine/scene/PolyScene.ts","webpack:///./src/engine/nodes/utils/states/Base.ts","webpack:///./src/engine/nodes/utils/Serializer.ts","webpack:///./src/engine/params/types/ParamConstructorByType.ts","webpack:///./src/engine/params/utils/ExpressionController.ts","webpack:///./src/engine/expressions/traversers/ParsedTree.ts","webpack:///./src/core/DecomposedPath.ts","webpack:///./src/core/math/Easing.ts","webpack:///./src/engine/params/Float.ts","webpack:///./src/engine/params/OperatorPath.ts","webpack:///./src/engine/nodes/utils/flags/Base.ts","webpack:///./src/engine/nodes/utils/shaders/NodeTraverser.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinitionCollection.ts","webpack:///./src/engine/nodes/utils/code/controllers/ParamConfigsController.ts","webpack:///./src/engine/nodes/gl/code/globals/_Base.ts","webpack:///./src/engine/nodes/gl/Globals.ts","webpack:///./modules/three/examples/jsm/controls/OrbitControls.js","webpack:///./src/engine/nodes/gl/Constant.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.frag.glsl","webpack:///./src/engine/nodes/mat/MeshStandard.ts","webpack:///./src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack:///./src/engine/nodes/mat/PointsBuilder.ts","webpack:///./src/engine/nodes/obj/_BaseCamera.ts","webpack:///./src/core/geometry/Group.ts","webpack:///./src/core/geometry/Point.ts","webpack:///./src/core/geometry/Entity.ts","webpack:///./src/core/Iterator.ts","webpack:///./src/core/geometry/util/Circle.ts","webpack:///./src/core/geometry/Instancer.ts","webpack:///./src/core/loader/geometry/JsonData.ts","webpack:///./modules/three/examples/jsm/loaders/DRACOLoader.js","webpack:///./src/core/geometry/operation/Skin.ts","webpack:///./src/engine/io/json/import/Dispatcher.ts","webpack:///./src/engine/index.ts","webpack:///./src/engine/scene/utils/CamerasController.ts","webpack:///./src/engine/scene/utils/Cooker.ts","webpack:///./src/core/graph/CoreGraph.ts","webpack:///./src/engine/scene/utils/CookController.ts","webpack:///./src/engine/scene/utils/EventsController.ts","webpack:///./src/engine/poly/RenderersController.ts","webpack:///./src/engine/poly/NodesRegister.ts","webpack:///./src/engine/scene/utils/LifeCycleController.ts","webpack:///./src/engine/scene/utils/LoadingController.ts","webpack:///./src/engine/scene/utils/ExpressionsController.ts","webpack:///./src/engine/scene/utils/MissingReferencesController.ts","webpack:///./src/engine/expressions/MissingReference.ts","webpack:///./src/engine/scene/utils/NodesController.ts","webpack:///./src/engine/nodes/manager/ObjectsManager.ts","webpack:///./src/engine/nodes/manager/_Base.ts","webpack:///./src/core/graph/DirtyController.ts","webpack:///./src/engine/nodes/utils/UIData.ts","webpack:///./src/engine/nodes/utils/StatesController.ts","webpack:///./src/engine/nodes/utils/states/TimeDependent.ts","webpack:///./src/engine/nodes/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/hierarchy/ParentController.ts","webpack:///./src/engine/nodes/utils/hierarchy/ChildrenController.ts","webpack:///./src/core/NodeSelection.ts","webpack:///./src/engine/nodes/utils/LifeCycleController.ts","webpack:///./src/engine/nodes/utils/CookController.ts","webpack:///./src/engine/nodes/utils/DependenciesController.ts","webpack:///./src/engine/params/utils/OptionsController.ts","webpack:///./src/engine/params/utils/EmitController.ts","webpack:///./src/engine/params/utils/Serializer.ts","webpack:///./src/engine/params/utils/StatesController.ts","webpack:///./src/engine/params/utils/states/TimeDependent.ts","webpack:///./src/engine/params/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/params/ParamsController.ts","webpack:///./src/engine/params/Boolean.ts","webpack:///./src/engine/expressions/ExpressionManager.ts","webpack:///./src/engine/expressions/traversers/FunctionGenerator.ts","webpack:///./src/engine/expressions/LiteralConstructsController.ts","webpack:///./src/engine/expressions/methods/_Module.ts","webpack:///./src/engine/expressions/methods/bbox.ts","webpack:///./src/engine/expressions/MethodDependency.ts","webpack:///./src/engine/expressions/methods/centroid.ts","webpack:///./src/engine/expressions/methods/ch.ts","webpack:///./src/engine/expressions/methods/copy.ts","webpack:///./src/engine/expressions/methods/cop_res.ts","webpack:///./src/engine/expressions/methods/local.ts","webpack:///./src/engine/expressions/methods/opdigits.ts","webpack:///./src/engine/expressions/methods/point.ts","webpack:///./src/engine/expressions/methods/points_count.ts","webpack:///./src/engine/expressions/methods/str_chars_count.ts","webpack:///./src/engine/expressions/methods/str_concat.ts","webpack:///./src/engine/expressions/methods/str_index.ts","webpack:///./src/engine/expressions/methods/str_sub.ts","webpack:///./src/engine/expressions/AttributeRequirementsController.ts","webpack:///./src/engine/expressions/traversers/ExpressionStringGenerator.ts","webpack:///./src/engine/expressions/DependenciesController.ts","webpack:///./src/engine/params/Button.ts","webpack:///./src/engine/params/Color.ts","webpack:///./src/engine/params/Folder.ts","webpack:///./src/engine/params/Integer.ts","webpack:///./src/engine/params/ramp/RampValue.ts","webpack:///./src/engine/params/Separator.ts","webpack:///./src/engine/params/Vector2.ts","webpack:///./src/engine/params/Vector3.ts","webpack:///./src/engine/params/Vector4.ts","webpack:///./src/engine/nodes/utils/params/ParamsValueAccessor.ts","webpack:///./src/engine/nodes/utils/ProcessingContext.ts","webpack:///./src/engine/nodes/utils/connections/IOController.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionsController.ts","webpack:///./src/engine/nodes/utils/connections/InputsController.ts","webpack:///./src/engine/nodes/utils/connections/NodeConnection.ts","webpack:///./src/engine/nodes/utils/connections/OutputsController.ts","webpack:///./src/engine/nodes/utils/params/ParamsAccessor.ts","webpack:///./src/engine/containers/Manager.ts","webpack:///./src/core/performance/CorePerformance.ts","webpack:///./src/core/performance/PerformanceNode.ts","webpack:///./src/engine/scene/utils/TimeController.ts","webpack:///./src/engine/poly/SceneEvent.ts","webpack:///./src/engine/scene/utils/Serializer.ts","webpack:///./src/engine/scene/utils/UniformsController.ts","webpack:///./src/engine/scene/utils/WebGLController.ts","webpack:///./src/engine/poly/registers/All.ts","webpack:///./src/engine/poly/registers/Cop.ts","webpack:///./src/engine/nodes/cop/Builder.ts","webpack:///./src/engine/containers/Texture.ts","webpack:///./src/engine/nodes/utils/flags/Bypass.ts","webpack:///./src/engine/nodes/utils/flags/Display.ts","webpack:///./src/engine/io/json/export/Node.ts","webpack:///./src/engine/io/json/export/param/Numeric.ts","webpack:///./src/engine/io/json/export/param/OperatorPath.ts","webpack:///./src/engine/io/json/export/param/String.ts","webpack:///./src/engine/io/json/export/param/Ramp.ts","webpack:///./src/engine/nodes/gl/code/assemblers/textures/Texture.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeBuilder.ts","webpack:///./src/engine/nodes/utils/code/configs/ParamConfig.ts","webpack:///./src/engine/nodes/gl/code/utils/ShadersCollectionController.ts","webpack:///./src/engine/nodes/gl/code/utils/LinesController.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeFormatter.ts","webpack:///./src/engine/nodes/gl/utils/SpareParamsController.ts","webpack:///./src/engine/nodes/utils/shaders/BaseAssembler.ts","webpack:///./src/engine/nodes/gl/code/templates/textures/Default.frag.glsl","webpack:///./src/core/Sleep.ts","webpack:///./src/engine/nodes/cop/EnvMap.ts","webpack:///./src/core/loader/Texture.ts","webpack:///./modules/three/examples/jsm/loaders/RGBELoader.js","webpack:///./modules/three/examples/jsm/loaders/BasisTextureLoader.js","webpack:///./src/engine/nodes/cop/Null.ts","webpack:///./src/engine/nodes/cop/Switch.ts","webpack:///./src/engine/poly/registers/Event.ts","webpack:///./src/engine/nodes/event/CameraMapControls.ts","webpack:///./src/engine/nodes/event/_BaseCameraControls.ts","webpack:///./src/engine/nodes/event/_Base.ts","webpack:///./src/engine/containers/Event.ts","webpack:///./src/engine/poly/registers/Gl.ts","webpack:///./src/engine/nodes/gl/_ConversionMisc.ts","webpack:///./src/engine/nodes/gl/_ConversionToVec.ts","webpack:///./src/engine/nodes/gl/_ConversionVecTo.ts","webpack:///./src/engine/nodes/gl/_Math_Arg1.ts","webpack:///./src/engine/nodes/gl/_BaseAdaptive.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2Operation.ts","webpack:///./src/engine/nodes/gl/_Math_Arg2Boolean.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunctionArgBoolean2.ts","webpack:///./src/engine/nodes/gl/Align.ts","webpack:///./src/engine/nodes/gl/Complement.ts","webpack:///./src/engine/nodes/gl/gl/complement.glsl","webpack:///./src/engine/nodes/gl/Cross.ts","webpack:///./src/engine/nodes/gl/Cycle.ts","webpack:///./src/engine/nodes/gl/gl/cycle.glsl","webpack:///./src/engine/nodes/gl/_Math_Arg3.ts","webpack:///./src/engine/nodes/gl/_BaseMathFunctionArg3.ts","webpack:///./src/engine/nodes/gl/Disk.ts","webpack:///./src/engine/nodes/gl/gl/disk.glsl","webpack:///./src/engine/nodes/gl/Easing.ts","webpack:///./src/engine/nodes/gl/gl/easing/circular-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/circular-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/linear.glsl","webpack:///./src/engine/nodes/gl/gl/easing/circular-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/back-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/elastic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/exponential-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/cubic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quadratic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-in-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quintic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/quartic-out.glsl","webpack:///./src/engine/nodes/gl/gl/easing/bounce-in.glsl","webpack:///./src/engine/nodes/gl/gl/easing/sine-out.glsl","webpack:///./src/engine/nodes/gl/InstanceTransform.ts","webpack:///./src/engine/nodes/gl/Length.ts","webpack:///./src/engine/nodes/gl/Mix.ts","webpack:///./src/engine/nodes/gl/Negate.ts","webpack:///./src/engine/nodes/gl/Null.ts","webpack:///./src/engine/nodes/gl/Output.ts","webpack:///./src/engine/nodes/gl/Param.ts","webpack:///./src/engine/nodes/gl/Refract.ts","webpack:///./src/engine/nodes/gl/QuatMult.ts","webpack:///./src/engine/nodes/gl/QuatFromAxisAngle.ts","webpack:///./src/engine/nodes/gl/QuatToAngle.ts","webpack:///./src/engine/nodes/gl/QuatToAxis.ts","webpack:///./src/engine/poly/registers/Mat.ts","webpack:///./src/engine/nodes/mat/MeshBasic.ts","webpack:///./src/engine/containers/Material.ts","webpack:///./src/engine/nodes/mat/MeshBasicBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Basic.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDistance.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepth.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepthDOF.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.vert.glsl","webpack:///./src/engine/nodes/mat/MeshLambert.ts","webpack:///./src/engine/nodes/mat/MeshLambertBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Lambert.ts","webpack:///./src/engine/nodes/mat/MeshStandardBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Standard.ts","webpack:///./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl","webpack:///./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl","webpack:///./src/engine/nodes/mat/Points.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/Points.ts","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepth.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDepth.vert.glsl","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDistance.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDistance.vert.glsl","webpack:///./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepthDOF.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomPointsDepthDOF.vert.glsl","webpack:///./src/engine/poly/registers/Obj.ts","webpack:///./src/engine/nodes/obj/AmbientLight.ts","webpack:///./src/engine/containers/Object.ts","webpack:///./src/engine/nodes/obj/AreaLight.ts","webpack:///./src/engine/nodes/obj/DirectionalLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/DirectionalLightHelper.ts","webpack:///./src/engine/nodes/obj/HemisphereLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/HemisphereLightHelper.ts","webpack:///./src/engine/nodes/obj/PointLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/PointLightHelper.ts","webpack:///./src/engine/nodes/obj/SpotLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/SpotLightHelper.ts","webpack:///./src/engine/nodes/obj/Events.ts","webpack:///./src/engine/nodes/obj/Materials.ts","webpack:///./src/engine/nodes/obj/Cop.ts","webpack:///./src/engine/nodes/obj/PostProcess.ts","webpack:///./src/engine/nodes/obj/Geo.ts","webpack:///./src/engine/nodes/utils/DisplayNodeController.ts","webpack:///./src/engine/nodes/obj/Null.ts","webpack:///./src/engine/nodes/obj/Fog.ts","webpack:///./src/engine/nodes/obj/OrthographicCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/ControlsController.ts","webpack:///./src/engine/nodes/event/utils/CameraControlConfig.ts","webpack:///./modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./src/engine/viewers/Threejs.ts","webpack:///./src/engine/viewers/_Base.ts","webpack:///./src/engine/viewers/utils/CamerasController.ts","webpack:///./src/engine/viewers/utils/ControlsController.ts","webpack:///./src/engine/viewers/utils/EventsController.ts","webpack:///./src/engine/viewers/utils/WebglController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/OrthographicCameraController.ts","webpack:///./src/engine/nodes/obj/PerspectiveCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/PerspectiveCameraController.ts","webpack:///./src/engine/poly/registers/Sop.ts","webpack:///./src/engine/nodes/sop/Add.ts","webpack:///./src/core/geometry/Face.ts","webpack:///./src/core/geometry/MonkeyPatcher.ts","webpack:///./src/engine/containers/Geometry.ts","webpack:///./src/engine/nodes/sop/AnimationCopy.ts","webpack:///./src/engine/nodes/sop/AnimationMixer.ts","webpack:///./src/engine/nodes/sop/AttribAddMult.ts","webpack:///./src/engine/nodes/sop/AttribCopy.ts","webpack:///./src/engine/nodes/sop/AttribCreate.ts","webpack:///./src/engine/nodes/sop/AttribDelete.ts","webpack:///./src/engine/nodes/sop/AttribNormalize.ts","webpack:///./src/engine/nodes/sop/AttribPromote.ts","webpack:///./src/engine/nodes/sop/AttribRemap.ts","webpack:///./src/engine/nodes/sop/AttribRename.ts","webpack:///./src/engine/nodes/sop/AttribTransfer.ts","webpack:///./src/core/math/Interpolate.ts","webpack:///./src/core/math/octree/Octree.ts","webpack:///./src/core/math/octree/Node.ts","webpack:///./src/engine/nodes/sop/BboxScatter.ts","webpack:///./src/engine/nodes/sop/Blend.ts","webpack:///./src/engine/nodes/sop/Box.ts","webpack:///./src/engine/nodes/sop/Cache.ts","webpack:///./src/engine/nodes/sop/Circle.ts","webpack:///./src/engine/nodes/sop/Color.ts","webpack:///./src/core/Color.ts","webpack:///./src/engine/nodes/sop/Copy.ts","webpack:///./src/engine/nodes/sop/utils/CopyStamp.ts","webpack:///./src/engine/nodes/sop/Data.ts","webpack:///./src/core/geometry/AttributeData.ts","webpack:///./src/engine/nodes/sop/DataUrl.ts","webpack:///./src/engine/nodes/sop/Delay.ts","webpack:///./src/engine/nodes/sop/Delete.ts","webpack:///./src/engine/nodes/sop/Face.ts","webpack:///./src/engine/nodes/sop/File.ts","webpack:///./src/core/loader/Geometry.ts","webpack:///./modules/three/examples/jsm/loaders/OBJLoader.js","webpack:///./src/engine/nodes/sop/Fuse.ts","webpack:///./src/engine/nodes/sop/Hexagons.ts","webpack:///./src/core/geometry/operation/Hexagon.ts","webpack:///./src/engine/nodes/sop/Hierarchy.ts","webpack:///./src/engine/nodes/sop/Instance.ts","webpack:///./src/engine/nodes/sop/Jitter.ts","webpack:///./src/engine/nodes/sop/Layer.ts","webpack:///./src/engine/nodes/sop/Line.ts","webpack:///./src/engine/nodes/sop/Material.ts","webpack:///./src/engine/nodes/sop/Merge.ts","webpack:///./src/engine/nodes/sop/Noise.ts","webpack:///./modules/three/examples/jsm/math/SimplexNoise.js","webpack:///./src/engine/nodes/sop/Normals.ts","webpack:///./src/engine/nodes/sop/Null.ts","webpack:///./src/engine/nodes/sop/ObjectMerge.ts","webpack:///./src/engine/nodes/sop/Occlusion.ts","webpack:///./src/engine/nodes/sop/ParticlesSystemGpu.ts","webpack:///./src/engine/nodes/gl/code/assemblers/particles/Particles.ts","webpack:///./src/engine/nodes/gl/code/templates/particles/Default.glsl","webpack:///./src/engine/nodes/gl/code/utils/TextureAllocationsController.ts","webpack:///./src/engine/nodes/gl/code/utils/TextureAllocation.ts","webpack:///./src/engine/nodes/gl/code/utils/TextureVariable.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/RenderController.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputeController.ts","webpack:///./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputationRenderer.js","webpack:///./src/engine/nodes/sop/Peak.ts","webpack:///./src/engine/nodes/sop/Plane.ts","webpack:///./src/engine/nodes/sop/Point.ts","webpack:///./src/engine/nodes/sop/Polywire.ts","webpack:///./src/engine/nodes/sop/Ray.ts","webpack:///./src/engine/nodes/sop/Resample.ts","webpack:///./src/engine/nodes/sop/Scatter.ts","webpack:///./src/engine/nodes/sop/Shadows.ts","webpack:///./src/engine/nodes/sop/Skin.ts","webpack:///./src/engine/nodes/sop/Sphere.ts","webpack:///./src/engine/nodes/sop/Switch.ts","webpack:///./src/engine/nodes/sop/Text.ts","webpack:///./modules/three/examples/jsm/loaders/TTFLoader.js","webpack:///./src/engine/nodes/sop/Torus.ts","webpack:///./src/engine/nodes/sop/TorusKnot.ts","webpack:///./src/engine/nodes/sop/Transform.ts","webpack:///./src/engine/nodes/sop/Tube.ts","webpack:///./src/engine/nodes/sop/UvProject.ts","webpack:///./src/core/CameraController.ts","webpack:///./src/engine/io/json/import/Scene.ts","webpack:///./src/engine/io/json/import/Node.ts","webpack:///./src/engine/io/json/import/param/Multiple.ts","webpack:///./src/engine/io/json/import/param/String.ts","webpack:///./src/engine/io/json/import/param/Ramp.ts","webpack:///./modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./modules/three/examples/jsm/postprocessing/EffectComposer.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","type","init_value","options","ParamTemplate","BUTTON","ParamType","BOOLEAN","COLOR","FLOAT","FOLDER","INTEGER","OPERATOR_PATH","RAMP","RampParam","DEFAULT_VALUE","SEPARATOR","STRING","VECTOR2","VECTOR3","VECTOR4","ParamConfig","NodeParamsConfig","MESSAGE","DEFAULT_INPUT_NAMES","container_controller","TypedContainerController","GeometryContainer","flags","FlagsControllerDB","node_context","NodeContext","SOP","displayed_input_names","initialize_base_node","this","display","set","add_hook","active","parent","display_node_controller","set_display_node","io","outputs","set_has_one_output","set_core_group","core_group","objects","_set_object_attributes","set_container","FROM_SET_CORE_GROUP","set_object","set_container_objects","FROM_SET_OBJECT","set_objects","FROM_SET_OBJECTS","set_geometry","geometry","create_object","FROM_SET_GEOMETRY","set_geometries","geometries","forEach","FROM_SET_GEOMETRIES","message","container","core_content","CoreGroup","touch","index","position_array","getAttribute","array","setIndex","CoreConstant","OBJECT_TYPE","MESH","object_constructor","CONSTRUCTORS_BY_NAME","MATERIALS","clone","castShadow","receiveShadow","frustumCulled","material","scene","console","log","material_node","CoreMaterial","node","add_render_hook","_add_index","points_count","indices","TypedNode","TypedSopNode","BaseSopNodeClass","InputCloneMode","ConnectionPointType","ConnectionPointTypes","BOOL","INT","VEC2","VEC3","VEC4","ConnectionPointTypeToParamTypeMap","SAMPLER_2D","ParamTypeToConnectionPointTypeMap","undefined","ConnectionPointInitValueMap","DEFAULT_VALUE_JSON","ConnectionPointComponentsCountMap","ObjectType","ObjectTypes","POINTS","LINE_SEGMENTS","ObjectTypeMenuEntries","indexOf","Mesh","LineSegments","Points","warn","AttribClass","AttribType","materials","MeshStandard","MeshStandardMaterial","color","side","FrontSide","metalness","roughness","MeshLambertMaterial","Color","vertexColors","NoColors","transparent","depthTest","PointsMaterial","size","LineBasicMaterial","linewidth","AttribClassMenuEntries","VERTEX","OBJECT","AttribTypeMenuEntries","NUMERIC","ATTRIB_CLASS","ATTRIB_TYPE","OBJECT_TYPES","CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME","Scene","Group","Object3D","Bone","SkinnedMesh","any","CoreString","ensure_float","values","toArray","map","v","join","vector3","vec","vector2","vector3_float","num","float4","x","y","z","w","float3","float2","float","int","bool","ThreeToGl","GLDefinitionType","_definition_type","_data_type","_node","_name","collection_instance","TypedGLDefinitionCollection","TypedGLDefinition","ATTRIBUTE","data_type","AttributeGLDefinition","FUNCTION","FunctionGLDefinition","UNIFORM","UniformGLDefinition","VARYING","VaryingGLDefinition","BooleanString","ATTRIB_NAMES_SEPARATOR","TAIL_DIGIT_MATCH_REGEXP","INDICES_LIST_SEPARATOR","NUM_REGEXP","is_boolean","word","TRUE","FALSE","to_boolean","is_number","test","tail_digits","match","parseInt","increment","digits","substring","pluralize","camel_case","upper_first","snake_case","titleize","replace","type_to_class_name","timestamp_to_seconds","Date","parse","seconds_to_timestamp","seconds","setTime","toISOString","substr","precision","val","decimals","Math","max","elements","split","frac","string_to_pad","pad","num_as_string","match_mask","rule","RegExp","matches_one_mask","masks","mask","attrib_names","trimed_elements","e","to_id","reverse","id","exp","element","charCodeAt","Number","MAX_SAFE_INTEGER","indices_string","sort","a","b","range_elements","escape_line_breaks","ShaderName","ParticleShaderNames","PARTICLES_0","PARTICLES_1","PARTICLES_2","PARTICLES_3","PARTICLES_4","PARTICLES_5","PARTICLES_6","PARTICLES_7","PARTICLES_8","PARTICLES_9","_geometry","uuid","bounding_box","_bounding_box","_create_bounding_box","computeBoundingBox","boundingBox","mark_as_instance","userData","marked_as_instance","CoreGeometry","position_attrib_name","compute_vertex_normals","computeVertexNormals","user_data_attribs","indexed_attribute_names","keys","user_data_attrib","CoreAttribute","remap_name","is_attrib_indexed","has_attrib","attributes","attrib_type","attrib_sizes","h","attrib_name","itemSize","attrib_size","attrib","set_indexed_attribute_values","set_indexed_attribute","setAttribute","Int32BufferAttribute","add_numeric_attrib","default_value","attribute_added","vec2","vec3","col","g","vec4","Float32BufferAttribute","init_position_attribute","Vector3","add_attribute","attrib_data","rename_attribute","old_name","new_name","old_attrib","deleteAttribute","delete_attribute","src_geometry","src_userData","attribute_name","attribute","constructor","InterleavedBufferAttribute","MonkeyPatcher","patch","new_geometry","position","count","points","_points","points_from_geometry","reset_points","position_attrib","point_index","point","CorePoint","geometry_from_points","object_type","BufferGeometry","geometry_wrapper","first_point","old_geometry","old_geometry_wrapper","_indices_from_points","new_values","attrib_value","new_value","new_attrib_indices","new_index","new_index_by_old_index","index_attrib","old_index","old_index0","old_index1","old_index2","new_index0","new_index1","new_index2","merge_geometries","core_geometries","new_values_by_attribute_name","indexed_attribute_name","index_by_values","all_geometries_points","set_attrib_index","merged_geometry","BufferGeometryUtils","mergeBufferGeometries","merged_geometry_wrapper","mergedUserData","segments","faces","faces_from_geometry","faces_count","CoreFace","NodeEvent","param","required_arguments","optional_arguments","min_allowed_arguments_count","max_allowed_arguments_count","allowed_arguments_count","process_arguments","args","get_referenced_node_container","index_or_path","referenced_node","get_referenced_node","request_container","full_path","get_referenced_param","path","decomposed_path","CoreWalker","find_param","find_referenced_graph_node","inputs","input_graph_node","find_node","input","find_dependency","create_dependency_from_index_or_path","DecomposedPath","create_dependency","MethodDependency","BaseMethod","spare_params_controller","GlNodeSpareParamsController","GL","connections","init_inputs","ui_data","set_layout_horizontal","set_named_output_connection_points","initialize_node","cook","_set_mat_to_recompile","assembler_controller","set_compilation_required_and_dirty","gl_var_name","variable_for_input","input_index","get_input_index","connection","input_connection","input_node","node_src","output_name","named_output_connection_points","output_index","params","set_lines","shaders_collection_controller","reset_code","_param_configs_controller","reset","set_param_configs","param_configs","list","gl_input_default_value","TypedGlNode","BaseGlNodeClass","ParamsConfig","params_config","ParamlessTypedGlNode","_type","_init_value","to_json","_json","_create_json","TypedNamedConnectionPoint","renderers_controller","RenderersController","nodes_register","NodesRegister","scenes_by_uuid","instance","_instance","Poly","register_node","tab_menu_category","registered_nodes","parent_context","in_worker_thread","desktop_controller","player_mode","set_env","env","_env","POLY","_scene","_dirty_controller","DirtyController","_graph_node_id","graph","next_id","setNode","_graph","set_name","set_dirty","trigger","set_successors_dirty","remove_dirty_state","is_dirty","add_post_dirty_hook","callback","graph_remove","removeNode","add_graph_input","src","connect","remove_graph_input","disconnect","graph_disconnect_predecessors","disconnect_predecessors","graph_disconnect_successors","disconnect_successors","graph_predecessor_ids","predecessor_ids","graph_predecessors","predecessors","graph_successors","successors","graph_all_predecessors","all_predecessors","graph_all_successors","all_successors","CoreGraphNode","MaterialContainer","_cook_main_without_inputs_when_dirty_bound","_cook_main_without_inputs_when_dirty","MAT","name_controller","add_post_set_full_path_hook","set_material_name","cook_controller","cook_main_without_inputs","_material","create_material","set_material","TypedMatNode","Material","BaseMatNodeClass","camera","FullScreenQuad","Pass","enabled","needsSwap","clear","renderToScreen","assign","setSize","render","error","_mesh","dispose","renderer","ObjNodeRenderOrder","ObjectContainer","render_order","MANAGER","_children_group","_attachable_to_hierarchy","_used_in_scene","OBJ","set_used_in_scene","state","loading_controller","is_loading","root","update_object","add_object_to_parent","attachable_to_hierarchy","add","remove_object_from_parent","remove","_object","_create_object_with_attributes","set_object_name","is_display_node_cooking","is_displayed","TypedObjNode","BaseObjNodeClass","TransformedParamConfig","Base","transform","scale","transform_controller","TransformController","TransformedObjNode","_update_transform_from_params_scale","set_count","set_depends_on_inputs","add_on_set_input_hook","on_input_updated","hook_name","dirty_controller","has_hook","add_to_parent_transform","remove_from_parent_transform","update","matrix","update_transform_with_matrix","equals","update_transform_from_params","matrixAutoUpdate","dispatchEvent","pv","rotation","copy","multiplyScalar","radians","CoreMath","degrees_to_radians","euler","Euler","updateMatrix","set_params_from_matrix","CoreTransform","filter","first_element","next_node","PARENT","add_path_element","CURRENT","add_node","remainder","path_from_root","node_path","param_name","relative_path","src_graph_node","dest_graph_node","closest_common_parent","distance","distance_to_parent","up","ups","parent_path_elements","remaining_elements","cmptr","dest_path_element","graph_node1","graph_node2","parents1","parents","parents2","min_depth","min","found_parent","graph_node_id","graph_node","dest","current","dest_id","make_absolute_path","path_elements","DOT","CURRENT_WITH_SLASH","PARENT_WITH_SLASH","NON_LETTER_PREFIXES","BaseContainer","ParamsValueAccessor","ParamsAccessor","_initialized","_display_node_controller","_parent_controller","HierarchyParentController","_children_controller_context","_create_children_controller","HierarchyChildrenController","_children_controller","children_allowed","_ui_data","UIData","_dependencies_controller","DependenciesController","_states","StatesController","_lifecycle","LifeCycleController","_serializer","NodeSerializer","_cook_controller","CookController","_io","IOController","_name_controller","NameController","_set_core_name","_params_controller","ParamsController","_processing_context","ProcessingContext","initialize_base_and_node","required_three_imports","required_imports","three_imports","require_webgl2","set_parent","parent_controller","create_params","add_param","input_contents","content","set_content","end_cook","create_node","children_controller","remove_node","children","nodes_by_type","set_input","input_index_or_name","output_index_or_name","emit","event_name","events_controller","dispatch","include_param_components","serializer","BaseNodeClass","_options","OptionsController","_emit_controller","EmitController","_is_computing","initialize_param","_expression_controller","ParamSerializer","initialize_value","_value","convert","raw_val","are_raw_input_equal","val1","val2","is_raw_input_equal","other_raw_input","_raw_input","are_values_equal","is_value_equal","other_val","_clone_raw_input","raw_input","_prefilter_invalid_raw_input","emit_controller","ParamEvent","RAW_INPUT_UPDATED","process_raw_input","_default_value","compute","process_computation","_compute_resolves","pop","Promise","resolve","reject","set_init_value","set_node","makes_node_dirty_when_dirty","parent_param","params_node","components","set_parent_param","_parent_param","has_parent_param","path_relative_to","emit_allowed","increment_count","_components","component_names","init_components","has_expression","expression_controller","TypedParam","BaseParamClass","has_display","has_bypass","Display","DisplayFlag","Bypass","bypass","BypassFlag","FlagsController","FlagsControllerD","FlagsControllerB","_translation_matrix","Matrix4","_translation_matrix_q","Quaternion","_translation_matrix_s","_matrix","identity","_matrix_q","_matrix_e","_matrix_s","_rotate_geometry_m","_rotate_geometry_q","_rotate_geometry_vec_dest","update_scale","quaternion","decompose","setFromQuaternion","toVector3","divideScalar","PI","batch_update","set_vector3","set_float","set_params_from_object","translation_matrix","compose","matrix_quaternion","quat","setFromEuler","rotate_geometry","vec_origin","vec_dest","normalize","setFromUnitVectors","makeRotationFromQuaternion","applyMatrix","THREE","Triangle","RAD_DEG_RATIO","clamp","fit01","dest_min","dest_max","fit","src_min","src_max","degrees","radians_to_degrees","deg2rad","deg","rad2deg","rad","rand","number","rand_float","rand_vec2","round","step_size","steps_count","rounded_steps_count","ceil","floor","highest_even","uv","sn","fract","sin","geodesic_distance","lnglat1","lnglat2","φ1","lat","φ2","Δφ","Δλ","lng","cos","atan2","sqrt","expand_triangle","triangle","margin","TriangleProp","mid_point","getMidpoint","prop","delta","sub","delta_n","nearestPower2","pow","Easing","gl_connections_controller","set_input_name_function","_gl_input_name","set_expected_input_types_function","_expected_input_types","first_input_connection_type","BaseGlMathFunctionGlNode","BaseNodeGlMathFunctionArg1GlNode","SideParamConfig","double_sided","front","visible_if","SidedMaterial","single_side","BackSide","new_side","DoubleSide","needsUpdate","BaseController","SideController","CustomMaterialName","_assemblers_by_custom_name","Map","ShaderMaterial","custom_assembler_class_by_custom_name","_add_custom_materials","class_by_custom_name","assembler_class","custom_name","_add_custom_material","custom_assembler","_gl_parent_node","custom_materials","compile_custom_materials","_code_builder","assembler","set_root_nodes","_root_nodes","set_param_configs_owner","set_shader_configs","shader_configs","set_variable_configs","variable_configs","custom_material","compile_material","compile_allowed","output_nodes","GlNodeFinder","find_output_nodes","states","_update_shaders","new_vertex_shader","_shaders_by_name","new_fragment_shader","FRAGMENT","vertexShader","fragmentShader","add_uniforms","uniforms","_lines","shader_names","shader_name","template","_template_shader_for_shader_name","build_code_from_nodes","_build_lines","lines","shadow_assembler_class_by_custom_name","add_output_body_line","output_node","input_name","named_input","var_input","variable_config","new_var","default_from_attribute","connection_point","named_input_connection_points_by_name","gl_type","attr_read","globals_handler","read_attribute","variable_config_default","default","prefix","suffix","if_condition","add_body_lines","set_node_lines_output","current_shader_name","input_names","shader_config","set_node_lines_attribute","attribute_node","var_name","handle_gl_FragCoord","body_lines","handle_resolution","set_node_lines_globals","globals_node","definition","body_line","dependencies","definitions_by_shader_name","body_lines_by_shader_name","used_output_names","globals_shader_name","MapUtils","push_on_array_at_entry","dependency","set_frame_dependent","set_resolution_dependent","handle_globals_node","definitions","add_definitions","BaseGlShaderAssembler","ShaderAssemblerMaterial","container_class","_callbacks","_container","setTimeout","process_container_request","request_input_container","then","notify_requesters","reset_caches","cook_main","processing_context","callbacks","BaseContainerController","Vector2","ATTRIB_NAME_MAP","P","N","Cd","array_to_indexed_arrays","index_by_value","current_index","cloned_container","_content","_post_set_content","has_content","core_content_cloned","infos","TypedContainer","SkinningParamConfig","skinning","SkinnedMaterial","new_skinning","SkinningController","TextureMapParamConfig","use_map","BooleanParamOptions","TextureMapController","FileCopNode","DEFAULT_NODE_PATH","UV","OperatorPathOptions","_update_options","add_hooks","_update","texture_map_controller","BaseTextureMapController","TextureAlphaMapParamConfig","use_alpha_map","TextureAlphaMapController","alpha_map","texture_alpha_map_controller","new_element","has","unshift_on_array_at_entry","unshift","concat_on_array_at_entry","new_elements","CATEGORY_OBJ","LIGHT","GEOMETRY","CAMERA","MISC","CATEGORY_COP","INPUT","ADVANCED","CATEGORY_EVENT","CATEGORY_GL","CONVERSION","DYNAMICS","GLOBALS","LOGIC","MATH","QUAT","TRIGO","UTIL","INSTANCE","CATEGORY_MAT","LINE","VOLUME","CATEGORY_SOP","ANIMATION","MODIFIER","RENDER","CATEGORY_POST","PASS","Uint16Array","EMPTY_DATA_TEXTURE","DataTexture","LuminanceFormat","HalfFloatType","TextureContainer","COP","set_texture","texture","clear_texture","TypedCopNode","BaseCopNodeClass","AssemblerControllerNode","_compile_required","_deleted_params_data","_assembler","set_assembler_globals_handler","_globals_handler","reset_configs","add_output_params","output_child","add_globals_params","allow_attribute_exports","on_create","globals","output","set_position","set_compilation_required","trigger_node","compile_required","post_compile","create_spare_parameters","assign_uniform_values","set_uniform_value","current_spare_param_names","spare_names","assembler_param_names","spare_param_names_to_add","spare_param_names_to_remove","params_update_options","current_param_names","names","spare_params_with_same_name_as_params","error_message","param_exporter","JsonExportDispatcher","dispatch_param","required","params_data","names_to_delete","param_config","param_options","spare","to_add","update_params","GlAssemblerController","background","use_background","use_material","background_color","background_material","node_selection","context","dependent_on_found_node","background_ratio","_bg_raycaster","Raycaster","_screen_quad","_create_screen_quad","PlaneBufferGeometry","quad","screen_quad_flat_material","_screen_quad_flat_material","MeshBasicMaterial","add_params","boolean","use_background_color","update_screen_quad","update_background_color","use_background_material","update_background_material","screen_quad","bg_node","found_node","BaseBackgroundController","_components_contructor","FloatParam","is_default","Array","component_name","component","default_val","compute_components","set_value_from_components","promises","all","cooker","block","block_parent_emit","unblock","unblock_parent_emit","VALUE_UPDATED","TypedMultipleParam","_reset_ramp_interpolant_and_texture_bound","_reset_ramp_interpolant_and_texture","RampValue","from_json","raw_input1","raw_input2","is_equal","is_equal_json","are_json_equal","_ramp_interpolant","_ramp_texture","ramp_texture","_create_ramp_texture","Uint8Array","stride","width","value_at_position","RGBFormat","create_interpolant","positions","interpolated_values","Float32Array","CubicInterpolant","interpolant","_create_interpolant","sorted_points","sorted_point","evaluate","RampInterpolation","LINEAR","RampPoint","_param","_complex_data","is_spare_and_not_component","is_spare","value_changed","_require_data_complex","_data_complex","_data_simple","raw_input_serialized","default_value_serialized","add_main","has_options_overridden","overridden_options","options_overridden","option_name","option_value","JSON","stringify","ParamJsonExporter","INSERT_DEFINE_AFTER_MAP","INSERT_BODY_AFTER_MAP","LINES_TO_REMOVE_MAP","_leaf_nodes","_frame_dependent","_resolution_dependent","compile","_template_shader","shaders_by_name","_replace_template","root_nodes","current_uniforms","uniform_name","uniform","frame_dependent","frame","resolution_dependent","root_nodes_by_shader_name","leaf_nodes_by_shader_name","GlobalsGlNode","AttributeGlNode","CodeBuilder","code_builder","build_from_nodes","allow_new_param_configs","disallow_new_param_configs","builder_param_configs","builder_lines","line_type","all_builder_lines","all_lines","_param_config_owner","param_config_owner","hidden","create_globals_node_output_connections","_reset_shader_configs","_reset_variable_configs","_reset_frame_dependency","_reset_resolution_dependency","_shader_configs","create_shader_configs","sc","ShaderConfig","_variable_configs","create_variable_configs","vc","VariableConfig","if","GlobalsGeometryHandler","IF_RULE","input_names_for_shader_name","root_node","insert_define_after","insert_body_after","lines_to_remove","function_declaration","LineType","FUNCTION_DECLARATION","define","DEFINE","body","BODY","template_lines","new_lines","time_controller","fps","frame_range","line_before_define","line_before_body","line_before_define_found","line_before_body_found","template_line","_insert_lines","line_remove_required","line_to_remove","lines_to_add","line_to_add","get_custom_materials","TypedAssembler","VARIABLE_CONFIG_DEFAULT_BY_NAME","named_output_connection_points_by_name","variable_name","PRE_DEFINED_ATTRIBUTES","varying_definition","set_varying_body_line","handle_attribute_node","GlobalsBaseController","MAPPINGS","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","WRAPPINGS","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","MAG_FILTERS","LinearFilter","NearestFilter","MIN_FILTERS","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","ATTRIB_MAPPING_KEYS","ATTRIB_MAPPING","mapping","wrapS","wrapT","minFilter","magFilter","url","CoreTextureLoader","PARAM_DEFAULT","desktop_browse","file_type","reload","PARAM_CALLBACK_reload","menu","entries","wrap_s","wrap_t","mag_filter","min_filter","_is_static_image_url","cook_for_image","cook_for_video","_load_texture","_update_texture_params","_param_url_changed","_add_video_spare_params_if_required","_previous_param_url","_set_video_current_time","resolved_url","texture_attrib","param_value","param_callback_reload","_video","currentTime","VideoTexture","image","has_param","VIDEO_TIME_PARAM_NAME","duration","range","range_locked","PARAMS_UPDATED","_remove_spare_params","_texture_loader","load_texture_from_url_or_op","ENV_MAP","gl_method_name","gl_function_definitions","first_input_connection","input_connections","var_type","joined_args","named_input_connection_points","BaseAdaptiveGlNode","set_expected_output_types_function","_expected_output_types","BaseNodeGlMathFunctionArg2GlNode","src_material","clone_single","apply_custom_materials","material_with_custom","mat_name","assign_custom_uniforms","mat","uniform_value","init_custom_material_uniforms","converted","set_expression","EXPRESSION_UPDATED","_update_value","ExpressionController","expression","requires_entities","compute_expression","expression_result","is_errored","execute_callback","TypedNumericParam","unreachable","Error","TypeAssert","_data","nodes_controller","reset_node_context_signatures","root_exporter","dispatch_node","nodes_data","properties","frame_range_locked","master_camera_node_path","cameras_controller","ui","sanitize_string","SceneJsonExporter","_input_names","_dependencies","_input_name_function","_output_name_function","_expected_input_types_function","_expected_output_types_function","_update_signature_if_required_bound","update_signature_if_required","func","set_output_name_function","add_on_scene_load_hook","set_post_create_params_hook","dirty_trigger","lifecycle","creation_completed","_connections_match_inputs","update_connection_types","make_successors_update_signatures","gl_node","expected_input_types","expected_output_types","named_input_connections","named_outputs","set_named_input_connection_points","current_input_types","current_output_types","first_connection","GlConnectionsController","ColorParamConfig","use_vertex_colors","opacity","alpha_test","use_fog","ColoredMaterial","new_vertex_color","VertexColors","alphaTest","fog","ColorsController","add_on_create_hook","init","_assembler_controller","_create_assembler_controller","compile_if_required","_compile","TypedBuilderMatNode","update_light_params","update_shadow_params","TypedLightObjNode","BaseLightTransformedObjNode","BaseLightHelperParamConfig","show_helper","helper_size","BaseLightHelperObjNode","wireframe","build","build_helper","BaseLightHelper","_helper_constructor","update_helper_attachment","helper","_helper","_create_helper","light","visible","HelperController","BaseManagerObjNode","layer","layers","enable","integer","LayersController","operator_path_param_options","POST","do_post_process","post_process","use_post_process_node0","post_process_node0","use_post_process_node1","post_process_node1","use_post_process_node2","post_process_node2","use_post_process_node3","post_process_node3","_renderers_by_canvas_id","_composers_by_canvas_id","_resolution_by_canvas_id","_composers_set_in_progress_by_canvas_id","_fetch_post_process_nodes_in_progress","_post_process_nodes","_post_process_use_node_path_params","_post_process_node_path_params","canvas","aspect","composer","setup_for_aspect_ratio","display_scene","create_renderer","gl","rendering_context","WebGLRenderer","antialias","alpha","shadowMap","physicallyCorrectLights","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","register_renderer","set_renderer_size","setPixelRatio","devicePixelRatio","delete_renderer","deregister_renderer","_create_composer","EffectComposer","set_composer_passes","update_composer_passes","composer_passes_nodes_changed","toggle_param","post_process_node","set_composers_passes","clear_render_passes","render_scene_pass","RenderPass","clearAlpha","addPass","apply_to_composer","render_pass","passes","disposable_pass","visible_options","node_path_options","PostProcessController","process_data","ParamJsonImporter","_graph_node","base_name","base","last_char","request_name_to_parent","set_child_name","update_name_from_parent","post_set_name","post_set_full_path","child_node","missing_expression_references_controller","check_for_missing_references","expressions_controller","regenerate_referring_expressions","NAME_UPDATED","add_post_set_name_hook","hook","_on_set_name_hooks","_on_set_full_path_hooks","VARIABLE_PREFIX","_set_error_from_error_bound","_set_error_from_error","clear_error","_error_message","set_error","traverse_node","method_name","traverse_BinaryExpression","left","operator","right","traverse_LogicalExpression","traverse_MemberExpression","traverse_ConditionalExpression","consequent","alternate","traverse_Compound","traversed_args","arg_node","traverse_Literal","raw","BaseTraverser","_value_elements","ParsedTree","string_value_elements","StringParam","NodeJsonExporter","ParamNumericJsonExporter","OperatorPathParam","ParamOperatorPathJsonExporter","ParamStringJsonExporter","ParamRampJsonExporter","ConnectionPointTypesAvailableForAttribute","_on_create_set_name_if_none_bound","_on_create_set_name_if_none","_set_mat_to_recompile_if_is_exporting","connected_input_node","connected_input_connection_point","named_input_connection_point","output_connection_point","export_when_connected","is_exporting","find_attribute_export_nodes","allow_pan","allow_rotate","allow_zoom","tdamping","damping","screen_space_panning","rotate_speed","min_distance","max_distance","polar_angle_range","create_controls_instance","OrbitControls","setup_controls","controls","enablePan","enableRotate","enableZoom","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableKeys","set_from_camera_node","camera_node","target","TypedCameraControlsEventNode","CameraOrbitControlsEventNode","controller_class","controller","use_map_name","use_map_param","path_param","mat_attrib_name","shader_material","attr_name","_update_texture_on_uniforms","direct_params","_update_texture_on_material","_update_required_attribute","_apply_texture_on_uniforms","_remove_texture_from_uniforms","has_texture","new_texture_is_different","_do_update_define","define_name","_define_name","defines","toUpperCase","_apply_texture_on_material","_remove_texture_from_material","texture_owner","update_callback","remove_callback","ASSEMBLER_MAP","DISTANCE","ShaderAssemblerCustomMeshDistance","DEPTH","ShaderAssemblerCustomMeshDepth","DEPTH_DOF","ShaderAssemblerCustomMeshDepthDOF","ShaderAssemblerMesh","_color_with_intensity","_light","create_light","update_light_attachment","create_shadow_params_main","shadow","create_shadow_params","create_light_params","intensity","core_geometry","geo","points_from_group","group","set_attrib_value","add_numeric_vertex_attrib","attribute_names","includes","human_type","CoreObject","src_object","new_object","sourceLookup","cloneLookup","parallelTraverse","sourceNode","clonedNode","traverse","src_node","mesh_node","src_node_geometry","mesh_node_geometry","material_with_color","src_node_with_animations","animations","animation","skinned_node","isSkinnedMesh","clonedMesh","sourceMesh","sourceBones","skeleton","bones","bindMatrix","new_bones","bone","CoreEntity","computeTangents","normal","normals","uvs","nVertices","tangent","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","groups","start","il","jl","handleTriangle","tmp","tmp2","n2","handleVertex","fromArray","isFinite","addScaledVector","dot","crossVectors","useGroups","isIndexed","attributesUsed","Set","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","addGroup","indexOffset","mergedIndex","getX","mergedAttribute","mergeBufferAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","normalized","arrayLength","isInterleavedBufferAttribute","interleaveAttributes","interleavedBuffer","res","getters","setters","iba","k","estimateBytesUsed","mem","attr","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","EPSILON","hashToIndex","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","fill","decimalShift","log10","shiftMultiplier","hash","newarray","newMorphArrays","getterFunc","ml","oldAttribute","buffer","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","_uv_name","set_texture_allocations_controller","_texture_allocations_controller","variable","globals_geometry_handler","texture_variable","add_particles_sim_uv_attribute","allocation","var_name_texture","texture_name","texture_definition","particles_sim_uv_attrib_definition","GlobalsTextureHandler","UV_ATTRIB","particles_sim_uv_varying_definition","UV_VARYING","PARTICLE_SIM_UV","accumulated_curve_point_indices","curve_point_indices","last_index_added","previous_index","create_line_segment_geometry","attrib_sizes_by_name","new_indices","new_attribute_values_by_name","line_segment_to_geometries","CoreGeometryUtilCurve","mod","aa","execScript","Uint32Array","DataView","f","POSITIVE_INFINITY","bufferSize","bufferType","resize","A","B","C","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","fa","G","H","I","J","K","L","da","ea","O","R","ga","Q","W","verify","ha","method","Y","Z","$","ia","X","ADAPTIVE","BLOCK","Zlib","_display_scene","_cameras_controller","CamerasController","_cooker","Cooker","CoreGraph","_missing_expression_references_controller","MissingReferencesController","_expressions_controller","ExpressionsController","_nodes_controller","NodesController","_time_controller","TimeController","set_scene","set_uuid","_uuid","wait_for_cooks_completed","_events_controller","EventsController","_lifecycle_controller","_loading_controller","LoadingController","_performance","CorePerformance","set_frame","play","pause","PolySceneSerializer","_uniforms_controller","UniformsController","_webgl_controller","WebGLController","PolyScene","BaseState","ui_data_json","children_ids","input_ids","input_connection_output_indices","connection_input_indices","named_output_connections","param_ids","to_json_params","override_clonable_state","inputs_clonable_state_with_override","selection","to_json_params_from_names","param_names","include_components","ParamConstructorByType","BooleanParam","ButtonParam","ColorParam","FolderParam","IntegerParam","SeparatorParam","Vector2Param","Vector3Param","Vector4Param","_expression","_manager","is_expression_for_entities","deregister_param","ExpressionManager","parse_expression","update_from_method_dependency_name_change","compute_function","compute_expression_for_entities","entities","set_entities","reset_entities","compute_expression_for_points","compute_expression_for_objects","_entities","_entity_callback","addUnaryOp","addBinaryOp","string","parse_expression_for_string_param","nodes","arguments","callee","_named_nodes","graph_node_ids","node_element_by_graph_node_id","named_nodes","path_element","update_from_name_change","to_path","joined_path","first_char","ease_i","power","ease_o","abs","ease_io","linear","ease_i2","ease_o2","ease_io2","ease_i3","ease_o3","ease_io3","ease_i4","ease_o4","ease_io4","ease_i_sin","ease_o_sin","ease_io_sin","ease_i_elastic","ease_o_elastic","ease_io_elastic","parsed","parseFloat","ensure_in_range","_found_node","expected_context","node_selection_context","_state","_hooks","on_update","new_state","run_hooks","toggle","BaseFlag","_leaves_graph_id","_graph_ids_by_shader_name","_outputs_by_graph_id","_depth_by_graph_id","_graph_id_by_depth","_shader_name","find_leaves_from_root_node","set_nodes_depth","depth","graph_id","leaves_from_nodes","LEAVES_FROM_NODES_SHADER","find_leaves","node_ids","nodes_from_ids","nodes_for_shader_name","depths","graph_ids_for_depth","node_from_id","sorted_nodes","ids","unique_inputs","booleans_by_graph_id","set_node_depth","current_depth","output_ids","output_id","TypedNodeTraverser","_definitions","_errored","uniq","definitions_by_name","existing","uniq_definitions","_param_configs","create_and_push","ParamConfigsController","_id","__next_id","domElement","quatInverse","lastPosition","lastQuaternion","document","Infinity","minZoom","maxZoom","minAzimuthAngle","maxAzimuthAngle","zoomSpeed","panSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","updateProjectionMatrix","changeEvent","STATE","NONE","inverse","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","distanceToSquared","EPS","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyIn","dollyScale","dollyOut","handleMouseDownRotate","event","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","preventDefault","focus","button","ctrlKey","metaKey","shiftKey","handleMouseDownDolly","addEventListener","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","typed_visible_options","_allow_inputs_created_from_params","ConstantGlNode","OUTPUT_NAME","_current_connection_type","_current_param","connection_type","_current_var_name","_params_by_type","SHADER_DEFAULTS","TextureEnvMapParamConfig","texture_env_map_controller","TextureEnvMapController","envMapIntensity","env_map_intensity","MeshStandardMatNode","use_env_map","env_map","ShaderAssemblerPoints","PointsBuilderMatNode","EVENT_CHANGE","BASE_CAMERA_DEFAULT","near","far","CameraTransformParamConfig","EVENT","set_master_camera","BaseCameraObjNodeClass","PARAM_CALLBACK_set_master_camera","CameraPostProcessParamConfig","CameraBackgroundParamConfig","LayerParamConfig","BaseCameraObjParamsConfig","_aspect","_background_controller","background_controller_constructor","_controls_controller","ControlsController","_layers_controller","_post_process_controller","layers_controller","background_controller","post_process_controller","update_camera","controls_controller","update_controls","on_delete","set_as_master_camera","set_master_camera_node_path","_update_for_aspect_ratio","update_transform_params_from_object","create_viewer","ThreejsViewer","TypedCameraObjNode","timestamp","_timestamp","performance","now","_core_geometries","_core_objects","_objects","core_objects","_create_core_objects","core_object","create_core_geometries","__geometry_from_object","geometry_from_object","isMesh","isLine","isPoints","from_objects","objects_from_group","group_name","core_objects_from_group","co","_compute_bounding_box","center","getCenter","getSize","bbox","Box3","expandByObject","first_geometry","rename_attrib","attrib_class","child","object_attrib_names","first_object","attrib_names_matching_mask","masks_string","matching_attrib_names","add_numeric_object_attrib","src_group","new_group","ComponentName","ATTRIB_NAMES","COMPONENT_INDICES","_core_geometry","remapped_name","component_index","remaped_name","value_index","attrib_value_index","start_index","_index","Vector4","_position","new_position","set_attrib_value_vector3","_normal","set_normal","new_normal","v2","v3","new_value_index","_array_index","_count","_current_count_index","_resolve","_max_time_per_chunk","max_time_per_chunk","_check_every_interations","check_every_interations","start_with_count","iteratee_method","_iteratee_method_count","_bound_next_with_count","next_with_count","start_time","start_with_array","_array","_iteratee_method_array","_bound_next_with_array","next_with_array","_current_array_element","CoreIterator","segments_count","arc_angle","radian_per_segment","point_radian","position_2d","positions_2d","CoreGeometryUtilCircle","DEFAULT","SCALE","PSCALE","EYE","DEFAULT_COLOR","DEFAULT_UV","_group_wrapper","_matrices","_is_pscale_present","_is_scale_present","_is_normal_present","_is_up_present","_do_rotate_matrices","matrices","_matrix_from_point","pscale","scale_matrix","makeScale","translate_matrix","makeTranslation","multiply","rotate_matrix","eye","create_instance_buffer_geo","geometry_to_instance","template_core_group","attributes_to_copy","instance_pts","InstancedBufferGeometry","instances_count","colors","scales","orients","has_color","instance_matrices","CoreInstancer","instance_pt","index3","index4","has_uv","index2","InstancedBufferAttribute","pt","_attribute_datas_by_name","data_keys_prefix","skip_entries","do_convert","convert_to_numeric","load","success_callback","progress_callback","error_callback","response","get_prefixed_json","catch","json","prefixes","first_prefix","set_json","core_geo","_find_attributes","convert_to_numeric_masks","attrib_values","_attribute_values_for_name","numerical_attrib_values","index_data","first_pt","_value_has_subentries","deep_attrib_name","deep_attrib_value","CoreAttributeData","from_value","json_element","JsonDataLoader","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","onLoad","onProgress","onError","loader","setPath","setResponseType","crossOrigin","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","lastIndexOf","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","indexArray","GetFaceFromMesh","buffers","WeakMap","releaseDecoderModule","getDecoderModule","geometry1","geometry0","process","geometry_wrapper0","geometry_wrapper1","segments0","segments1","geometries_by_segments_count","smallest_geometry","largest_geometry","smallest_segments","largest_segments","smallest_points","largest_points","smallest_points_count","all_points","points_indices","segment","matched_segment","CoreGeometryOperationSkin","NodeJsonImporter","ParamMultipleJsonImporter","ParamStringJsonImporter","ParamRampJsonImporter","JsonImportDispatcher","AllRegister","run","load_scene","SceneJsonImporter","load_data","create_scene","mark_as_loaded","perspective_camera1","geo1","test_save_and_load","scene2","data2","Tester","stylesheet","createElement","innerText","appendChild","classList","master_camera_node","_master_camera_node_path","camera_node_path","_find_any_camera","_queue","_block_level","_process_item_bound","_process_item","process_queue","enqueue","original_trigger_graph_node","blocked","delete","run_post_dirty_hooks","_next_id","Graph","directed","compound","multigraph","src_id","hasNode","setEdge","graph_has_cycle","alg","isAcyclic","removeEdge","clear_successors_cache_with_predecessors","src_id_s","dest_id_s","predecessor","successor","successor_ids","all_next_ids","next_ids","next_next_ids","next_next_id","all_predecessor_ids","all_successor_ids","_cooking_nodes_by_id","_resolves","flush","set_listener","events_listener","_events_listener","emitter","process_events","loaded","auto_updating","CONTEXT_OPTIONS","_next_renderer_id","_next_env_map_id","_renderers","_env_maps","_require_webgl2","set_require_webgl2","_rendering_context_webgl","webgl2","context_name","getContext","_polygon_id","flush_callbacks_with_renderer","first_renderer","first_id","renderers","wait_for_renderer","_node_register","_node_register_categories","_node_register_options","node_type","deregister_node","registered_nodes_for_context_and_parent_type","parent_node_type","option_only","option_except","context_and_type","registered_category","_lifecycle_on_create_allowed","on_create_hook_allowed","on_create_prevent","_loading_state","_auto_updating","_first_object_loaded","mark_as_loading","_set_loading_state","set_auto_update","on_first_object_loaded","getElementById","parentElement","removeChild","_params_by_id","register_param","references","register","jsep_node","path_argument","missing_expression_reference","MissingExpressionReference","_check_for_missing_references_for_node","_check_for_missing_references_for_param","missing_references","node_id","match_found","ref","matches_path","resolve_missing_dependencies","_node_context_signatures","_instanciated_nodes_by_context_and_type","_root","ObjectsManagerNode","init_display_scene","objects_from_mask","all_nodes","current_parents","current_parent","register_node_context_signature","node_context_signature","node_context_signatures","toLowerCase","add_to_instanciated_node","remove_from_instanciated_node","instanciated_nodes","nodes_by_ids","_queued_nodes_by_id","_queued_nodes_by_path","_expected_geo_nodes","_process_queue_start","add_on_child_add_hook","_on_child_add","add_on_child_remove_hook","_on_child_remove","multiple_display_flags_allowed","add_to_queue","path_id","expected_loading_geo_nodes_by_id","add_to_scene","get_parent_for_node","node_input","children_group","parent_object","used_in_scene","remove_from_scene","are_children_cooking","geo_nodes","node_by_id","geo_node","TypedBaseManagerNode","ManagerContainer","BaseManagerNodeClass","_dirty_count","_dirty","_dirty_timestamp","_post_dirty_hook_names","_post_dirty_hooks","remove_post_dirty_hook","set_forbidden_trigger_nodes","_forbidden_trigger_nodes","propagate","_cached_successors","clear_successors_cache","_width","_border_radius","_color","_layout_vertical","set_border_radius","border_radius","set_width","set_comment","comment","_comment","UI_DATA_COMMENT_UPDATED","set_color","is_layout_vertical","UI_DATA_POSITION_UPDATED","translate","snap","time_dependent","TimeDependentState","ErrorState","are_params_time_dependent","are_inputs_time_dependent","force_time_dependent","frame_node","unforce_time_dependent","_message","ERROR_UPDATED","_parent","is_selected","contains","separator","parent_full_path","on_set_parent","_on_set_parent_hooks","_context","_children","_children_by_type","_children_and_grandchildren_by_context","_is_dependent_on_children","_selection","CoreNodeSelection","dependent","_children_node","current_child_with_name","current_name","_add_to_nodes_by_type","available_children_classes","is_valid_child_type","node_class","set_creation_completed","CREATED","child_node_json","lifecycle_controller","run_on_create_hooks","run_on_child_add_hooks","webgl_controller","output_connections","output_connection","old_src","old_output_index","old_dest","node_dest","old_input_index","_remove_from_nodes_by_type","run_on_child_remove_hooks","run_on_delete_hooks","DELETED","parent_id","add_to_children_and_grandchildren_by_context","remove_from_children_and_grandchildren_by_context","has_children_and_grandchildren_with_context","children_names","traverse_children","_node_ids","send_update_event","nodes_to_add","node_ids_to_add","nodes_to_remove","node_ids_to_remove","SELECTION_UPDATED","_creation_completed","_on_child_add_hooks","_on_child_remove_hooks","_on_create_hooks","_on_delete_hooks","execute_hooks_with_child_node","execute_hooks","add_delete_hook","hooks","_cooking","_cooks_count","_max_cook_time","_cook_time_with_inputs","_cook_time","_cook_time_params","_inputs_evaluation_required","disallow_inputs_evaluation","_init_cooking_state","_cooking_dirty_timestamp","dirty_timestamp","_init_cooking_start_time","perf_active","started","_cook_time_start","_start_cook_if_no_errors","is_cooking","_cook_time_with_inputs_start","evaluate_inputs_and_params","input_containers","input_container","input_clonable_state_with_override","eval_all","_increment_cooks_count","_terminate_cook_process","_record_cook_time","cook_time_end","_cook_time_params_start","record_node_cook_data","eval_required_inputs_p","_time_with_precision","time","METHODS","scene_successors","_find_scene_node_scene_nodes","SUCCESSORS","scene_predecessors","PREDECESSORS","graph_nodes","base_nodes","start_node","_find_base_nodes_from_node","param_nodes_referree","scene_node","base_nodes_by_graph_node_id","uniq_base_nodes","className","add_param_referree","_params_referrees_by_graph_node_id","remove_param_referree","params_referree","node_by_graph_node_id","_programatic_visible_state","_update_visibility_and_remove_dirty_bound","update_visibility_and_remove_dirty","_ui_data_dependency_set","_default_options","options_controller","set_option","overriden","has_callback","get_callback","create_callback_from_string","callback_string","Function","cook_options","desktop_browse_option","desktop_browse_file_type","expr_option","menu_options","has_menu","node_selection_options","texture_as_env","texture_options","is_hidden","set_visible_state","VISIBLE_UPDATED","is_field_hidden","ui_data_depends_on_other_params","visibility_predecessors","predecessor_names","set_ui_data_dependency","_visibility_graph_node","update_visibility","expected_val","_blocked_emit","_blocked_parent_emit","_count_by_event_name","block_emit","is_multiple","unblock_emit","events_count","is_visible","value_serialized","frame_graph_node_id","_param_create_mode","_params_by_name","_params_list","_param_names","_non_spare_params","_spare_params","_non_spare_param_names","_spare_param_names","_params_added_since_last_params_eval","init_dependency_node","_params_node","init_from_params_config","_post_create_params","_update_caches","init_param_accessors","run_post_create_params_hook","has_created_a_param","has_deleted_a_param","delete_param","param_data","post_create_spare_params","current_names_in_accessor","getOwnPropertyNames","_remove_unneeded_accessors","configurable","names_to_remove","current_name_in_accessor","name_to_remove","set_with_type","param_with_type","get_float","get_operator_path","value_with_type","child_name","existing_param","_eval_param","eval_params","_post_create_params_hook","_on_scene_load_hook_names","_on_scene_load_hooks","run_on_scene_load_hooks","parse_completed","parse_started","parsed_tree","function_generator","FunctionGenerator","dependencies_controller","parse_tree","compute_allowed","eval_function","eval_allowed","expression_string_generator","ExpressionStringGenerator","new_expression_string","NATIVE_MATH_METHODS_RENAMED","math_random","EASING_METHODS","DIRECT_EXPRESSION_FUNCTIONS","remaped","LITERAL_CONSTRUCT","LiteralConstructsController","GLOBAL_CONSTANTS","INDIRECT_EXPRESSION_METHODS","MethodModule","PROPERTY_OFFSETS","AsyncFunction","getPrototypeOf","_attribute_requirements_controller","AttributeRequirementsController","methods","method_index","method_dependencies","immutable_dependencies","function_main_string","function","function_body","assign_attributes_lines","attribute_presence_check_line","assign_arrays_lines","Core","String","traverse_CallExpression","method_arguments","arg","literal_contruct","arguments_joined","direct_function_name","path_node","function_string","path_argument_function","_create_method_and_dependencies","traverse_UnaryExpression","argument","argument_member_expression","attrib_node","property_node","var_attribute_size","var_array","traverse_Identifier","identifier_name_without_dollar_sign","direct_constant_name","traverse_Identifier_F","traverse_Identifier_FPS","traverse_Identifier_T","traverse_Identifier_CH","traverse_Identifier_CEX","_method_centroid","traverse_Identifier_CEY","traverse_Identifier_CEZ","method_constructor","method_dependency","set_jsep_node","Bbox","ch","Ch","centroid","Centroid","cop_res","CopRes","local","Local","opdigits","Opdigits","Point","PointsCount","Copy","str_chars_count","StrCharsCount","str_concat","StrConcat","str_index","StrIndex","str_sub","StrSub","VECTOR_NAMES","COMPONENT_NAMES","vector_name","_get_value_from_container","vector","_update_from_name_change_bound","_update_from_name_change","new_path","literal","listen_for_name_changes","node_in_path","set_resolved_graph_node","resolved_graph_node","set_unresolved_path","unresolved_path","is_index","stamp_node","stamp_value","resolution","request_asset_url","add_local_path","local_path_server_url","name_node","sub_string","range_start","range_size","_attribute_names","assign_attribute_line","assign_item_size_line","assign_array_line","var_attribute","cyclic_graph_detected","connect_immutable_dependencies","handle_method_dependencies","handle_method_dependency","node_simple","press_button","COMPONENT_NAMES_COLOR","other_point","are_equal_json","json1","json2","_interpolation","_Math","generateUUID","json_point","interpolation","ramp","current_point","other_ramp_value","other_points","point1","point2","COMPONENT_NAMES_VECTOR2","COMPONENT_NAMES_VECTOR3","COMPONENT_NAMES_VECTOR4","_frame","src_context","_connections","ConnectionsController","_inputs","InputsController","has_inputs","_outputs","OutputsController","has_outputs","_output_connections","max_inputs_count","_input_connections","add_input_connection","remove_input_connection","add_output_connection","connections_by_id","remove_output_connection","_graph_node_inputs","_has_named_inputs","_min_inputs_count","_max_inputs_count","_depends_on_inputs","_override_clonable_state","depends_on_inputs","set_min_inputs_count","min_inputs_count","set_max_inputs_count","init_graph_node_inputs","_named_input_connection_points","connection_points","NAMED_INPUTS_UPDATED","_create_graph_node_input","graph_input_node","init_inputs_clonable_state","init_connections_controller_inputs","containers","eval_required_input","input_error_message","get_named_input_index","has_named_inputs","has_named_outputs","get_output_index","old_input_node","old_connection","NodeConnection","_run_on_set_input_hooks","INPUTS_UPDATED","remove_input","has_named_input","has_input","override_clonable_state_allowed","inputs_clonable_state","FROM_NODE","_inputs_clonable_states","input_cloned","ALWAYS","NEVER","_user_inputs_clonable_states","_default_inputs_clonale_state_values","set_override_clonable_state","OVERRIDE_CLONABLE_STATE_UPDATE","_on_update_hooks","_on_update_hook_names","_node_src","_node_dest","_output_index","_input_index","_has_outputs","_has_named_outputs","set_has_no_output","has_named_output","get_named_output_index","_named_output_connection_points","named_output_connection","NAMED_OUTPUTS_UPDATED","output_indices","_started","_start_time","_previous_timestamp","_nodes_cook_data","_durations_by_name","_durations_count_by_name","profile","total_time","stop","PerformanceNode","update_cook_data","record","current_timestamp","print","print_node_cook_data","print_recordings","performance_nodes","print_objects","performance_node","cook_time_total","print_object","table_entries","table","durations_by_name","durations_count_by_name","durations","names_by_duration","sorted_durations","entry","duration_per_iteration","_cook_time_total","_cook_time_total_with_inputs","_cook_time_total_params","cook_time","cook_time_with_inputs","cook_time_params","cooks_count","cook_time_per_iteration","cook_time_total_with_inputs","cook_time_total_with_inputs_per_iteration","cook_time_total_params","cook_time_total_params_per_iteration","_frame_range","_frame_range_locked","_playing","_fps","_frame_interval","_next_frame_bound","play_next_frame","set_frame_range","start_frame","end_frame","SceneEvent","FRAME_RANGE_UPDATED","set_frame_range_locked","start_locked","end_locked","set_fps","_ensure_frame_within_bounds","FRAME_UPDATED","uniforms_controller","update_frame_dependent_uniform_owners","increment_frame","decrement_frame","set_first_frame","PLAY_STATE_UPDATED","toggle_play_pause","playing","include_node_param_components","nodes_by_graph_node_id","params_by_graph_node_id","node_serializer","_frame_dependent_uniform_owners","_frame_dependent_uniform_owners_ids","_resolution","_resolution_dependent_uniform_owners","_resolution_dependent_uniform_owners_ids","add_frame_dependent_uniform_owner","_update_frame_dependent_uniform_owners_ids","remove_frame_dependent_uniform_owner","add_resolution_dependent_uniform_owner","_update_resolution_dependent_uniform_owners_ids","update_resolution_dependent_uniforms","remove_resolution_dependent_uniform_owner","update_resolution_dependent_uniform_owners","CopRegister","EventRegister","GlRegister","MatRegister","ObjRegister","SopRegister","poly","BuilderCopNode","EnvMapCopNode","NullCopNode","SwitchCopNode","PASS_THROUGH_SHADER","_texture_mesh","_texture_material","_texture_scene","_texture_camera","Camera","ShaderAssemblerTexture","_reset_if_resolution_changed","_render_target","_create_render_target","_renderer","_create_renderer","_reset","_pixelBuffer","_create_pixel_buffer","height","render_on_target","fragment","_fragment_shader","run_assembler","update_fragment_shader","fragment_shader","_uniforms","render_target","autoClear","setRenderTarget","readRenderTargetPixels","RGBAFormat","FloatType","CoreSleep","sleep","WebGLRenderTarget","format","navigator","userAgent","stencilBuffer","depthBuffer","FLAG_BYPASS_UPDATED","FLAG_DISPLAY_UPDATED","is_root","inputs_data","selected_children","selected_ids","override","add_custom","node_exporter","gl_var","_param_configs_set_allowed","_function_declared","node_traverser","nodes_by_shader_name","root_nodes_for_shader","sorted_node_ids","_shaders_collection_controller","ShadersCollectionController","set_current_shader_name","set_code_lines","lines_map","add_code_lines","add_code_line_for_nodes_and_line_type","definition_type","node_definitions","collection","errored","first_definition","CodeFormatter","node_comment","line","line_wrap","post_line_separator","nodes_count","is_last","add_code_line_for_node_and_line_type","_uniform_name","from_param","_uniform","_create_uniform","uniform_by_type","callback_bound","_callback","has_value_changed","is_video_texture","set_uniform_value_from_texture","set_uniform_value_from_ramp","param_constructor","_cached_param_value","has_changed","clone_value","_shader_names","_current_shader_name","_lines_controller_by_shader_name","LinesController","lines_controller","_definitions_by_node_id","_body_lines_by_node_id","LINE_SUFFIXES","LINE_PREFIXES","add_suffix","disallow_inputs_created_from_params","create_inputs_from_params","add_input","_inputless_param_names","set_inputless_param_names","raw_input_serialized_by_param_name","default_value_serialized_by_param_name","param_type","last_param_init_value","default_value_from_name","spare_param","convert_texture_to_env_map","pmremGenerator","PMREMGenerator","exrCubeRenderTarget","fromEquirectangular","Extension","load_url","set_texture_for_mapping","ext","_ext","VIDEO_EXTENSIONS","_load_as_video","loader_for_ext","ext_lowercase","EXR","HDR","BASIS","EXRLoader","RGBELoader","setDataType","UnsignedByteType","BasisTextureLoader","setTranscoderPath","detectSupport","TextureLoader","video","onloadedmetadata","source","VIDEO_SOURCE_TYPE_BY_EXT","_default_video_source_type","pixel_data","img","drawImage","getImageData","PARAM_ENV_DEFAULT","ogg","ogv","mp4","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","pos","len","chunk","fromCharCode","RGBEByteToRGBHalf","floatView","int32View","toHalf","bits","sourceArray","sourceOffset","destArray","destOffset","byteArray","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","comments","programtype","gamma","exposure","charAt","RGBE_ReadHeader","image_rgba_data","data_rgba","byteValue","scanline_buffer","ptr_end","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","texData","encoding","generateMipmaps","flipY","transcoderPath","transcoderBinary","transcoderPending","workerConfig","astcSupported","etcSupported","dxtSupported","pvrtcSupported","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC3","cTFPVRTC1_4_RGBA","cTFETC1","_createTexture","texturePending","_allocateWorker","mipmaps","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","_initTranscoder","jsLoader","binaryLoader","binaryContent","BasisWorker","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFBC7_M5","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","BasisModule","onRuntimeInitialized","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","CameraMapControlsEventNode","apply_controls","html_element","controls_id","TypedEventNode","EventContainer","_eval_all_params_on_dirty_bound","_eval_all_params_on_dirty","BaseEventNodeClass","AbsGlNode","AcosGlNode","AddGlNode","AlignGlNode","AndGlNode","AsinGlNode","AtanGlNode","except","CeilGlNode","CosGlNode","ComplementGlNode","CrossGlNode","CycleGlNode","DegreesGlNode","DiskGlNode","DistanceGlNode","DivideGlNode","DotGlNode","EasingGlNode","ExpGlNode","Exp2GlNode","FloatToIntGlNode","FloatToVec2GlNode","FloatToVec3GlNode","FloatToVec4GlNode","FloorGlNode","FractGlNode","IntToFloatGlNode","InverseSqrtGlNode","InstanceTransformGlNode","LengthGlNode","NegateGlNode","LogGlNode","Log2GlNode","MaxGlNode","MinGlNode","ModGlNode","MixGlNode","MultGlNode","NullGlNode","NormalizeGlNode","OrGlNode","OutputGlNode","ParamGlNode","PowGlNode","QuatMultGlNode","QuatFromAxisAngleGlNode","QuatToAngleGlNode","QuatToAxisGlNode","RadiansGlNode","ReflectGlNode","RefractGlNode","SignGlNode","SinGlNode","SqrtGlNode","StepGlNode","SubstractGlNode","TanGlNode","Vec2ToFloatGlNode","Vec3ToFloatGlNode","Vec4ToFloatGlNode","Vec4ToVectorGlNode","ParamsConfigFloatToInt","ParamsConfigIntToFloat","ParamsConfig2","ParamsConfig3","ParamsConfig4","VecToGlFactory","BaseVecToGlNode","components_v4","MathFunctionArg1Factory","gl_output_name","out","gl_input_name","in","_gl_output_name","MathFunctionArg2Factory","gl_input_names","default_in_type","allowed_in_types","out_type","first_input_type","MathFunctionArg2OperationFactory","in_prefix","operation","gl_operation","current_connections","expected_count","_expected_output_type","input_types","empty_array","second_connection","second_type","MathFunctionArg2BooleanFactory","boolean_operation","op","BaseNodeGlMathFunctionArgBoolean2GlNode","InputName","InputNames","DIR","DefaultValues","MathFunctionArg3Factory","functions","gl_input_default_values","BaseNodeGlMathFunctionArg3GlNode","ClampGlNode","FaceforwardGlNode","feather","EASE_NAMES","IMPORT_BY_EASE_NAME","IMPORT_DEPENDENCIES_BY_EASE_NAME","METHOD_NAMES_BY_EASE_NAME","default_ease_type","ease_name","glsl_function_code","ease_functions","function_dependencies","concat","in_value","VARS","instance_position","instance_orientation","instance_scale","gl_output_name_position","gl_output_name_normal","function_declaration_lines","_default_position","_default_normal","instancePosition","_default_instance_position","instanceOrientation","_default_input_instance_orientation","instanceScale","_default_input_instance_scale","result_position","result_normal","as_color","AXIS","ANGLE","MeshBasicMatNode","MeshBasicBuilderMatNode","MeshLambertMatNode","MeshLambertBuilderMatNode","MeshStandardBuilderMatNode","PointsMatNode","has_material","ShaderAssemblerBasic","ShaderLib","basic","template_shader","lights","UniformsUtils","distanceRGBA","DEPTH_PACKING","RGBADepthPacking","BasicDepthPacking","mNear","mFar","ShaderAssemblerLambert","lambert","_update_metalness","_update_roughness","ShaderAssemblerStandard","is_physical","physical","standard","derivatives","onBeforeCompile","shader","PointsParamConfig","size_attenuation","sizeAttenuation","CUSTOM_ASSEMBLER_MAP","ShaderAssemblerCustomPointsDistance","ShaderAssemblerCustomPointsDepth","ShaderAssemblerCustomPointsDepthDOF","USE_SIZEATTENUATION","AmbientLightObjNode","AreaLightObjNode","DirectionalLightObjNode","HemisphereLightObjNode","PointLightObjNode","SpotLightObjNode","EventsObjNode","MaterialsObjNode","CopObjNode","PostProcessObjNode","GeoObjNode","NullObjNode","OrthographicCameraObjNode","PerspectiveCameraObjNode","FogObjNode","AmbientLight","has_object","AreaLightParamConfig","RectAreaLight","RectAreaLightUniformsLib","initialized","DirectionalLightParamConfig","cast_shadows","shadow_res","shadow_bias","_helper_controller","DirectionalLightHelper","DirectionalLight","bias","mapSize","_target_target","_square","Line","_line_material","rotateX","setScalar","sky_color","ground_color","HemisphereLightHelper","HemisphereLight","groundColor","OctahedronBufferGeometry","_quat","_color1","_color2","rotateZ","BufferAttribute","setRotationFromQuaternion","setXYZ","decay","shadow_near","shadow_far","PointLightHelper","PointLight","SphereBufferGeometry","penumbra","SpotLightHelper","SpotLight","_cone","p1","p2","coneLength","coneWidth","DisplayNodeController","_sop_group","_create_sop_group","_on_create_bound","_on_create","_on_child_add_bound","set_sop_group_name","sop_group","request_display_node","display_node","_children_uuids_dict","_children_length","_request_display_node_container_bound","request_display_node_container","_display_node","set_parent_object","_parent_object","new_display_node","old_display_node","remove_children","new_objects","new_objects_are_different","AxesHelper","density","exponential","_linear_fog","Fog","getHex","_linear_fogexp2","FogExp2","OrthographicCameraObjParamConfigMixin","OrthographicCameraBackgroundController","OrthographicCamera","horizontal_size","_applied_controls_by_element_id","_controls_node","controls_param","controls_node","dispose_control_refs","controls_aleady_applied","CameraControlsConfig","set_controls_events","dispose_controls","controls_start_listener","on_controls_start","controls_end_listener","on_controls_end","_camera_node_id","_controls","other_config","camera_node_id","overrideMaterial","clearColor","clearDepth","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldAutoClear","getClearColor","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","do_render","_animate_method","animate","_canvas","random","style","outline","_set_events","_build","_init_display","activate","_cancel_animate","onresize","on_resize","compute_size_and_aspect","prepare_current_camera","_request_animation_frame_id","requestAnimationFrame","cancelAnimationFrame","BaseViewer","_active","_init_from_scene","deactivate","set_camera_node","reset_container_class","set_container_class_hovered","viewer","_camera_node","_size","_update_graph_node","create_controls","_create_graph_node","update_camera_aspect","_update_size","_get_aspect","offsetWidth","offsetHeight","_update_from_camera_container","_bound_on_controls_start","_on_controls_start","_bound_on_controls_end","_on_controls_end","_mousedown_pos","_mouse_distance_travelled","_bound_on_mousedown","_on_mousedown","_bound_on_mousemove","_on_mousemove","_bound_on_mouseup","_on_mouseup","MouseEvent","onwebglcontextlost","_on_webglcontextlost","onwebglcontextrestored","_on_webglcontextrestored","request_animation_frame_id","PerspectiveCameraObjParamConfigMixin","PerspectiveCameraBackgroundController","PerspectiveCamera","SCREEN_COORD","bl","br","tl","tr","CORNER_NAMES","_bg_corner","_bg_center","corner_name","_update_corner_vector","distanceTo","z_ratio","desired_ratio","coord","setFromCamera","ray","direction","origin","AddSopNode","AnimationCopySopNode","AnimationMixerSopNode","AttribAddMultSopNode","AttribCopySopNode","AttribCreateSopNode","AttribDeleteSopNode","AttribNormalizeSopNode","AttribPromoteSopNode","AttribRemapSopNode","AttribRenameSopNode","AttribTransferSopNode","BboxScatterSopNode","BlendSopNode","BoxSopNode","CacheSopNode","CircleSopNode","ColorSopNode","CopySopNode","DataSopNode","DataUrlSopNode","DelaySopNode","DeleteSopNode","FaceSopNode","FileSopNode","FuseSopNode","HexagonsSopNode","HierarchySopNode","InstanceSopNode","JitterSopNode","LayerSopNode","LineSopNode","MaterialSopNode","MergeSopNode","NoiseSopNode","NormalsSopNode","NullSopNode","ObjectMergeSopNode","OcclusionSopNode","ParticlesSystemGpuSopNode","PeakSopNode","PlaneSopNode","PointSopNode","PolywireSopNode","RaySopNode","ResampleSopNode","ScatterSopNode","SkinSopNode","ShadowsSopNode","SphereSopNode","SwitchSopNode","TextSopNode","TorusSopNode","TorusKnotSopNode","TransformSopNode","TubeSopNode","UvProjectSopNode","create_point","open","connect_to_last_point","_create_point","_get_points","index_array","_positions","_get_positions","_triangle","_get_triangle","_deltas","_get_deltas","getArea","random_position","seed","weights","deltas","attrib_value_at_position","barycentric_coordinates","getBarycoord","new_attrib_value","sum","point_values","weighted_value","interpolated_value","face","intersect_point","point_indices","position_attrib_array","point_positions","attrib_array","dist_to_points","distance_total","point_indx","objects_count","objects_visible_count","objects_count_by_type","count_by_type","objects_names_by_type","names_by_type","vertex_attribute_names","vertex_attribute_sizes_by_name","sizes_by_name","vertex_attribute_types_by_name","types_by_name","object_attribute_names","core_group_target","target_object","src_animations","prepare","PARAM_CALLBACK_prepare","_previous_time","_mixer","_actions_by_name","_values_by_param_name","_update_mixer","create_mixer","_animation_target","AnimationMixer","prev_value","action","clipAction","materials_by_id","object3d","morphTargets","_update_mixer_weights","_update_mixer_time","cache_value","setEffectiveWeight","prepare_animation_mixer","pre_add","mult","post_add","_update_attrib","tnew_name","core_group_dest","core_group_src","copy_vertex_attribute_between_core_groups","src_objects","dest_objects","dest_geometry","copy_vertex_attribute_between_geometries","src_attrib","src_points_count","dest_points_count","sub_array","dest_name","class","value1","for_entities","value2","value3","value4","_x_arrays_by_geometry_uuid","_y_arrays_by_geometry_uuid","_z_arrays_by_geometry_uuid","_w_arrays_by_geometry_uuid","add_point_attribute","add_object_attribute","add_numeric_attribute_to_points","add_string_attribute_to_points","add_numeric_attribute_to_object","add_string_attribute_to_object","vparam","component_param","arrays_by_geometry_uuid","_init_array_if_required","tmp_array","string_values","current_array","delete_vertex_attribute","delete_object_attribute","change_name","_normalize_attribute","normalized_values","normalized_value","target_name","AttribPromoteMode","PromoteModeMenuEntries","MIN","MAX","FIRST_FOUND","class_from","class_to","_values_per_attrib_name","_filtered_values_per_attrib_name","_core_group","_core_object","find_values","filter_values","set_values","find_values_from_points","find_values_from_object","set_values_to_points","set_values_to_object","_remap_attribute","only_integer_values","sorted_values","sorted_value","dest_group","max_samples_count","distance_threshold","blend_width","_core_group_dest","dest_points","_core_group_src","_attrib_names","_error_if_attribute_not_found_on_second_input","_build_octree_if_required","_add_attribute_if_required","_transfer_attributes","second_input_changed","_octree_timestamp","_prev_param_src_group","points_src","_octree","CoreOctree","set_points","_transfer_attributes_for_point","dest_point","total_dist","nearest_points","find_points","_interpolate_points","point_dest","src_points","CoreInterpolate","perform","blend_with","_interpolate_with_1_point","_interpolate_with_multiple_points","point_src","position_dest","position_src","value_src","_weighted_value_from_distance","_weight_from_distance","value_dest","blend","weighted_values_src","current_position","other_positions","_weights_from_2","_weights_from_3","dist_to_positions","other_position","OctreeNode","max_points_count","sphere","Sphere","found_points","intersects_sphere","points_in_sphere","_bbox","_level","_leaves_by_octant","_points_by_octant_id","_leaves","_bounding_boxes_by_octant","_bounding_boxes_by_octant_prepared","_center","level","intersectsSphere","accumulated_points","containsPoint","leaf","add_point","octant_ids","octant_id","create_leaf","_leaf_bbox","_octant_id","_prepare_leaves_bboxes","_bbox_center","x_pos","y_pos","z_pos","corner","bbox_centers","bbox_size_quarter","bbox_center","object0","object1","core_group0","core_group1","objects0","objects1","attrib0","attrib1","c0","c1","attrib0_array","attrib1_array","divisions","_core_transform","_cook_with_input","_cook_without_input","BoxBufferGeometry","cache","PARAM_CALLBACK_reset","is_cache_empty","toJSON","obj_loader","ObjectLoader","all_objects","param_callback_PARAM_CALLBACK_reset","DEFAULT_UP","_create_circle","_create_disk","CircleBufferGeometry","from_attribute","as_hsv","_r_arrays_by_geometry_uuid","_g_arrays_by_geometry_uuid","_b_arrays_by_geometry_uuid","_set_from_attribute","_eval_expressions","_eval_simple_values","_create_init_color","src_attrib_size","src_array","dest_array","dest_i","src_i","new_color","CoreColor","set_hsv","_update_from_param","tmp_array_r","tmp_array_g","tmp_array_b","_commit_tmp_values","target_array","euclideanModulo","setHSL","transform_only","copy_attributes","use_copy_expr","_attribute_names_to_copy","container0","container1","cook_with_template","cook_without_template","instance_core_group","template_points","instancer","_copy_moved_objects_on_template_points","_copy_moved_object_on_template_point","template_point","set_point","_get_moved_objects_for_template_point","moved_object","_copy_attributes_from_template","_stamp_instance_group_if_required","moved_objects","_copy_moved_objects_for_each_instance","_copy_moved_objects_for_instance","set_global_index","stamped_instance_core_group","_stamp_node","create_stamp_node","CopyStamp","_global_index","_point","DEFAULT_DATA_STR","json_data_keys_prefix","_on_load","_on_error","inputs_contents","ComparisonOperator","ComparisonOperatorMenuEntries","invert","hide_objects","by_object_type","by_expression","by_attrib","attrib_string","attrib_numeric","attrib_comparison_operator","by_bbox","bbox_size","by_visible","keep_points","_marked_for_deletion_per_object_index","_bbox_cache","_eval_for_points","_eval_for_objects","objects_to_keep","_eval_expressions_for_objects","_eval_type_for_objects","_eval_attrib_for_objects","marked_for_deletion","object_index","point_objects_from_deleted_objects","_point_object","init_points_count","_eval_expressions_for_points","_eval_attrib_for_points","_eval_bbox_for_points","kept_points","keep_point","first_attrib_value","comparison_attrib_value","_comparison","attrib_ComparisonOperator","object_type_name","attrib_float","in_bbox","core_points","make_faces_unique","add_face_center_attribute","add_face_id","_make_faces_unique","_add_face_center_attribute","_add_face_id","_transform_faces","current_value","face_center","fi","pi","always_reference_asset","CoreLoaderGeometry","on_success","on_error","load_auto","obj","on_load_success","object2","on_load_succes_gltf","on_load_succes_drc","gltf","loader_for_gltf","loader_for_glb","loader_for_drc","loader_for_obj","GLTFLoader","draco_loader","setDRACOLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","vertices","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","isArray","groupStart","groupEnd","cloned","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ib","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","text","setMaterials","lineFirstChar","trimLeft","trim","vertexData","faceVertices","vertex","vertexParts","v1","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","hasVertexColors","buffergeometry","mesh","createdMaterials","miLen","sourceMaterial","materialPoints","materialLine","flatShading","timeEnd","dist","_fuse_core_object","points_by_position","hexagon_radius","points_only","CoreGeometryOperationHexagon","_param_size","_param_hexagon_radius","_param_points_only","side_length","half_side_length","HierarchyMode","HIERARCHY_MODES","ADD_PARENT","REMOVE_PARENT","_add_parent_to_core_group","_remove_parent_from_core_group","_add_parent_to_object","new_parent","_add_new_parent","new_parent2","_remove_parent_from_object","new_child","current_children","_get_children_from_objects","apply_material","core_group_to_instance","object_to_instance","_create_instance","ObjectTypeByObject","_apply_material","mat_builder_node","node_with_mat_name","mesh_lambert_mat","mesh_lambert_mat_name","mat_node","instance_transform1","output1","create_mesh_lambert","amount","last_pt","i_n","apply_to_children","core_groups","grand_child","INPUT_NAME","compact","input_core_group","_make_compact","objects_by_type","merged_objects","isLineSegments","Operation","Operations","ADD","SET","MULT","SUBSTRACT","DIVIDE","freq","octaves","amp_attenuation","freq_increase","use_normals","compute_normals","_simplex_by_seed","_rest_points","core_group_rest","_rest_core_group_timestamp","simplex","_get_simplex","target_attrib_size","rest_point","current_attrib_value","noise_value","noise","_fbm","divide","amplitude","noise3d","_create_simplex","random_generator","SimplexNoise","grad3","grad4","perm","dot3","dot4","xin","yin","i1","j1","G2","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","w0","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","edit","update_x","update_y","update_z","recompute","_eval_expressions_for_core_group","_invert_normals","_eval_expressions_for_core_object","normal_attrib","geometry_node","import_input","samples","sep","buffer_resolution","_process_occlusion_on_object","normal_array","aoSampler","cells","sample","ao","report","auto_textures_size","max_textures_size","textures_size","ShaderAssemblerParticles","gpu_controller","ParticlesSystemGpuComputeController","render_controller","ParticlesSystemGpuRenderController","_reset_material_if_dirty_bound","_reset_material_if_dirty","_on_create_prepare_material_bound","_on_create_prepare_material","reset_gpu_compute_and_set_dirty","reset_render_material","is_on_frame_start","init_render_material","set_restart_not_required","reset_particle_groups","init_core_group","restart_simulation_if_required","compute_similation_if_required","_find_root_nodes","set_shaders_by_name","reset_gpu_compute","points_mat","points_mat_constant_point_size","points_mat_output1","create_points_mat","setup_shader_names_and_variables","update_shaders","TextureAllocationsController","allocate_connections_from_root_nodes","texture_allocations_controller","add_export_body_line","export_node","is_importing","_handle_globals_frame","_handle_globals_default","attrib_read","_allocations","_next_allocation_index","leaf_nodes","variables","TextureVariable","add_graph_node_id","output_names_attributes","allocate_variables","allocate_variable","new_variable","allocated","has_variable","has_space_for_variable","add_variable","new_allocation","TextureAllocation","next_allocation_name","explicit_shader_names","allocation_for_shader_name","input_names_for_node","_variables","set_allocation","variables_for_input_node","_allocation","_graph_node_ids","_particles_group_objects","assign_render_material","_render_material","update_render_material_uniforms","getCurrentRenderTarget","new_texture_allocations_json","_texture_allocations_json","_simulation_restart_required","variables_by_name","_created_textures_by_name","_used_textures_size","init_particle_group_points","create_gpu_compute","_gpu_compute","_particles_core_group","_last_simulated_frame","_compute_simulation","update_simulation_material_uniforms","nearest_power_of_two","isPowerOfTwo","max_particles_count","_init_particles_uvs","GPUComputationRenderer","renderTargets","all_variables","addVariable","setVariableDependencies","_create_texture_render_targets","_fill_textures","create_simulation_material_uniforms","uv_attrib_name","attribute_constructor","created_textures_by_name","texture_allocation","texture_variables","texture_position","createTexture","_restart_simulation","renderTexture","selected_geometries","sizeX","sizeY","currentTextureIndex","passThruUniforms","passThruTexture","passThruShader","createShaderMaterial","addResolutionDefine","materialShader","toFixed","computeFragmentShader","variableName","initialValueTexture","capabilities","isWebGL2","maxVertexTextures","createRenderTarget","depVar","found","nextTextureIndex","dl","doRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","currentRenderTarget","getRenderTarget","child_object","ROTATE_START","ROTATE_END","use_segments_count","_create_plane","size2d","update_normals","tmp_array_x","tmp_array_y","tmp_array_z","do_update_param","value_param","do_update","new_array","_array_for_component","DEFAULT_R","DEFAULT_S","segments_radial","closed","_geometries","_create_tube","line_segment","current_points","_create_tube_from_points","circle_template","circles","new_circle","circle","prev_circle","_skin","MAT_DOUBLE_SIDED","transfer_face_normals","_bound_assign_mat","_assign_double_sided_material_to_object","_raycaster","double_sided_material","core_group_collision","first_intersect","_assign_double_sided_material_to_core_group","intersectObjects","METHOD","CURVE_TYPE","POINTS_COUNT","SEGMENT_LENGTH","CURVE_TYPES","CENTRIPETAL","CHORDAL","CATMULLROM","curve_type","tension","segment_length","resampled_objects","resampled_object","_resample","_create_curve_from_points","old_curve_positions","curve","CatmullRomCurve3","new_curve_points","_get_points_from_curve","getSpacedPoints","getLength","transfer_attributes","attributes_to_transfer","add_id_attribute","areas_thresholds","area_sum","area_by_face_index","area","sorted_faces","attrib_values_by_name","face_index","cast_shadow","receive_shadow","process_one_input","process_two_inputs","line_segments0","_get_line_segments","first_line_segment","prev_src_geometry","line_segments1","line_segments","smallest_array","largest_array","other_line_segment","other_geo","SphereType","SPHERE_TYPE","isocahedron","SPHERE_TYPES","ISOCAHEDRON","angle_range_x","angle_range_y","detail","_create_default_sphere","_create_default_isocahedron","IcosahedronBufferGeometry","TEXT_TYPE","opentype","TEXT_TYPES","FLAT","STROKE","font","multiline","extrude","stroke_width","_font_loader","FontLoader","_loaded_fonts","_load_url","_create_geometry_from_type_mesh","_create_geometry_from_type_flat","_create_geometry_from_type_line","_create_geometry_from_type_stroke","displayed_text","parameters","curveSegments","TextBufferGeometry","err","shapes","_get_shapes","ShapeBufferGeometry","shapes_from_font","getPoints","_svg_loader","_load_svg_loader","getStrokeStyle","shape","pointsToStroke","holeShapes","holes","hole","generateShapes","elements2","_load_ttf","_load_json","_ttf_loader","_load_ttf_loader","fnt","TTFLoader","reversed","arraybuffer","reverseCommands","commands","paths","command","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","glyph","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","head","yMin","yMax","original_font_information","radius_tube","segments_tube","TorusBufferGeometry","TorusKnotBufferGeometry","look_at","pivot","applyMatrix4","segments_height","cap","CylinderBufferGeometry","_camera_controller","CameraController","_update_uvs_from_camera","_processed_core_group","_camera_object","set_target","remove_target","look_at_target","matrixWorld","uvw","_vector_in_camera_space","obj_world_matrix","project","_update_always","_listener_added","_listener","_execute_callback","_remove_camera_event","old_target","_target","_add_camera_event","set_update_always","new_update_always","_current_event_name","CHANGE","MOVEEND","importer","process_ui_data","create_nodes","set_selection","set_flags","set_params","from_data_custom","process_inputs_data","set_inputs","process_nodes_ui_data","node_name","importers","input_data","input_node_name","node_data","has_param_and_same_type","_is_param_data_complex","_process_param_data_complex","_process_param_data_simple","params_delete_required","params_add_required","LINE_BREAK_REGEXP","CopyShader","ShaderPass","textureID","fsQuad","MaskPass","writeValue","clearValue","setMask","setLocked","stencil","setTest","setOp","REPLACE","setFunc","setClear","EQUAL","KEEP","ClearMaskPass","renderTarget","_pixelRatio","getPixelRatio","_height","renderTarget1","renderTarget2","copyPass","clock","Clock","swapBuffers","pass","insertPass","isLastEnabledPass","passIndex","deltaTime","getDelta","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","pixelRatio"],"mappings":"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","file":"polygonjs-engine.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([414,8,0,5,7,3,1,2,4,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// import {BaseNode} from '../../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {RampParam} from '../../../params/Ramp';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamOptionsByTypeMap} from '../../../params/types/ParamOptionsByTypeMap';\n\n// function _ParamCheckNameConsistency<T extends BaseNode>(name: string, target: T, key: keyof T, type: ParamType) {\n// \tconst key_s = key as string;\n// \tif (key_s != `_param_${name}`) {\n// \t\tconsole.warn('param name inconsistent');\n// \t}\n// \tconst param = target.params.get(name);\n// \tif (param && param.type != type) {\n// \t\tconsole.warn('param type inconsistent');\n// \t}\n// }\n// export const _ParamBoolean = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.BOOLEAN);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.boolean(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.float(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(default_value: number, options?: ParamOptions) {\n// \treturn <T extends NodeParamsConfig>(target: T, key: string) => {\n// \t\t// _ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\t// const config = new ParamConfig(ParamType.FLOAT, default_value, options);\n// \t\t// target.add_config(key, config);\n// \t\t// target.set_default_value(key, default_value);\n// \t\t// target.set_options(key, options);\n// \t\t// Object.defineProperty(target.options, key, {\n// \t\t// \tget: () => target.params.float(name),\n// \t\t// });\n// \t};\n// };\n// export const _ParamString = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.STRING);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.string(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector2 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR2);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector2(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector3 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR3);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector3(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamColor = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.COLOR);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.color(name),\n// \t\t});\n// \t};\n// };\n// declare global {\n// \tconst ParamB: typeof _ParamBoolean;\n// \tconst ParamF: typeof _ParamFloat;\n// \tconst ParamS: typeof _ParamString;\n// \tconst ParamV2: typeof _ParamVector2;\n// \tconst ParamV3: typeof _ParamVector3;\n// \tconst ParamC: typeof _ParamColor;\n// }\n// class ParamConfig<T extends ParamType> {\n// \tconstructor(readonly type: T, readonly default_value: ParamValuesTypeMap[T], readonly options: ParamOptions = {}) {}\n// }\nexport class ParamTemplate<T extends ParamType> {\n\treadonly value_type!: ParamValuesTypeMap[T];\n\treadonly param_class!: ParamConstructorMap[T];\n\t// readonly options?: ParamOptions;\n\n\tconstructor(public type: T, public init_value: ParamInitValuesTypeMap[T], public options?: ParamOptions) {}\n}\n\n// class Test1 {\n// \ta: number\n// \tb: string\n// }\n// type test = Extract<typeof Test1, string>;\n// type test2 = Pick<typeof Test1, 'b'>;\n// type test3 = Test1['b'];\n// type test2 = keyof BoxSopParamConfig;\nexport class ParamConfig {\n\t// static _GENERIC<T extends ParamType> (type: T, init_value: ParamInitValuesTypeMap[T], options?: ParamOptions) {\n\t// \treturn new ParamTemplate<T>(type, init_value, options);\n\t// }\n\t// static BUTTON(init_value: ParamInitValuesTypeMap[ParamType.BUTTON], options?: ParamOptions) {\n\t// \treturn this._GENERIC<ParamType.BUTTON>(ParamType.BUTTON, init_value, options)\n\t// }\n\tstatic BUTTON(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BUTTON>(ParamType.BUTTON, init_value, options);\n\t}\n\tstatic BOOLEAN(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BOOLEAN>(ParamType.BOOLEAN, init_value, options);\n\t}\n\tstatic COLOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.COLOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.COLOR>(ParamType.COLOR, init_value, options);\n\t}\n\tstatic FLOAT(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FLOAT>(ParamType.FLOAT, init_value, options);\n\t}\n\tstatic FOLDER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FOLDER] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FOLDER>(ParamType.FOLDER, init_value, options);\n\t}\n\tstatic INTEGER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.INTEGER>(ParamType.INTEGER, init_value, options);\n\t}\n\tstatic OPERATOR_PATH(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n\t}\n\tstatic RAMP(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.RAMP] = RampParam.DEFAULT_VALUE,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.RAMP]\n\t) {\n\t\treturn new ParamTemplate<ParamType.RAMP>(ParamType.RAMP, init_value, options);\n\t}\n\tstatic SEPARATOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.SEPARATOR] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.SEPARATOR>(ParamType.SEPARATOR, init_value, options);\n\t}\n\tstatic STRING(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.STRING] = '',\n\t\toptions?: ParamOptionsByTypeMap[ParamType.STRING]\n\t) {\n\t\treturn new ParamTemplate<ParamType.STRING>(ParamType.STRING, init_value, options);\n\t}\n\tstatic VECTOR2(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR2]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR2>(ParamType.VECTOR2, init_value, options);\n\t}\n\tstatic VECTOR3(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR3]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR3>(ParamType.VECTOR3, init_value, options);\n\t}\n\tstatic VECTOR4(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR4]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR4>(ParamType.VECTOR4, init_value, options);\n\t}\n}\n\nexport class NodeParamsConfig implements Dictionary<ParamTemplate<ParamType>> {\n\t[name: string]: ParamTemplate<ParamType>;\n}\n// export class NodeParamsConfig {}\n\n// interface ParamConfig {\n// \ttype: ParamType;\n// \tvalue: any;\n// \toptions?: ParamOptions;\n// }\n// export type ParamConfigsArray = ParamConfig[];\n\n// declare global {\n// \tinterface Window {\n// \t\tParamB: typeof _ParamB;\n// \t\tParamC: typeof _ParamC;\n// \t}\n// }\n// window.ParamC = _ParamC;\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\n// import {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// import lodash_includes from 'lodash/includes';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport {TypedNode} from '../_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {ObjectType} from '../../../core/geometry/Constant';\n\nimport {GeometryContainer} from '../../containers/Geometry';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerDB} from '../utils/FlagsController';\n// import * as Container from '../../Container/Geometry';\n\n// import {AttribTypeParam} from './concerns/AttribTypeParam';\n// import {Bypass} from './Concerns/Bypass';\n// import {GroupParam} from './concerns/GroupParam';\n// import {Named} from './concerns/Named'; // TODO; typescript\n// import {ObjectTypeParam} from './concerns/ObjectTypeParam';\n\n// TODO: do I really need to add attributes in objects?\n// TODO: after setting a node dirty, it should clear its object\n\n// import {RequestContainerGeometryCallback} from '../../../Engine/Container/Geometry'\n// const CONTAINER_CLASS = 'Geometry';\n\nenum MESSAGE {\n\tFROM_SET_CORE_GROUP = 'from set_core_group',\n\tFROM_SET_GROUP = 'from set_group',\n\tFROM_SET_OBJECTS = 'from set_objects',\n\tFROM_SET_OBJECT = 'from set_object',\n\tFROM_SET_GEOMETRIES = 'from set_geometries',\n\tFROM_SET_GEOMETRY = 'from set_geometry',\n}\n\nconst INPUT_GEOMETRY_NAME = 'input geometry';\nconst DEFAULT_INPUT_NAMES = [INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME];\n\nexport class TypedSopNode<K extends NodeParamsConfig> extends TypedNode<'GEOMETRY', BaseSopNodeType, K> {\n\tcontainer_controller: TypedContainerController<GeometryContainer> = new TypedContainerController<GeometryContainer>(\n\t\tthis,\n\t\tGeometryContainer\n\t);\n\tpublic readonly flags: FlagsControllerDB = new FlagsControllerDB(this);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.SOP;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// _master_group: Group\n\t// _objects: Object3D[] = []\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\tif (this.flags.display) {\n\t\t\tthis.flags.display.set(false);\n\t\t\tthis.flags.display.add_hook(() => {\n\t\t\t\tif (this.flags.display.active) {\n\t\t\t\t\tconst parent = this.parent;\n\t\t\t\t\tif (parent && parent.display_node_controller) {\n\t\t\t\t\t\tparent.display_node_controller.set_display_node(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\t// request_container() {\n\t// \treturn super.request_container(); //as Promise<GeometryContainer>;\n\t// }\n\n\t//\n\t//\n\t// GEOMETRY\n\t//\n\t//\n\t// group(): Group {\n\t// \treturn this._master_group = this._master_group || this._create_group()\n\t// }\n\t// set_group(group: Group){\n\t// \tthis._clear_objectsI() //(MESSAGE.FROM_SET_GROUP);\n\t// \tthis._master_group.add(group)\n\t// \t// let child;\n\n\t// \t// const new_children = [];\n\t// \t// while (child = group.children[0]) {\n\t// \t// \tnew_children.push(child);\n\t// \t// \tgroup.remove(child);\n\t// \t// }\n\n\t// \t// new_children.forEach(child=> {\n\t// \t// \tthis._master_group.add( child );\n\t// \t// });\n\n\t// \t// // if (this.allow_add_object_attributes()) {\n\t// \t// \tthis._master_group.traverse(object=> {\n\t// \t// \t\tthis._set_object_attributes(object);\n\t// \t// \t});\n\t// \t// // }\n\t// \tthis.set_container(this._master_group, MESSAGE.FROM_SET_GROUP);\n\t// }\n\tset_core_group(core_group: CoreGroup) {\n\t\tconst objects = core_group.objects();\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\tthis.set_container(core_group, MESSAGE.FROM_SET_CORE_GROUP);\n\t}\n\n\tset_object(object: Object3D) {\n\t\t// this._clear_objects();\n\t\t// this.add_object(object);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_OBJECT);\n\t\tthis._set_object_attributes(object);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_OBJECT);\n\t}\n\tset_objects(objects: Object3D[]) {\n\t\t// this._clear_objects();\n\t\t// const list = objects;\n\t\t// lodash_times(list.length, i=> {\n\t\t// \tconst object = list[i];\n\t\t// \tthis.add_object(object);\n\t\t// });\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_OBJECTS);\n\t}\n\n\t// add_object(object: Object3D) {\n\t// \tif (object != null) {\n\t// \t\tthis.group().add(object);\n\t// \t\t// if (this.allow_add_object_attributes()) {\n\t// \t\tthis._set_object_attributes(object);\n\t// \t\t// }\n\t// \t\treturn object;\n\t// \t}\n\t// }\n\t// add_geometry(geometry: BufferGeometry, type: ObjectType) {\n\t// \tlet object;\n\t// \tif (geometry.index == null) {\n\t// \t\tthis._add_index(geometry);\n\t// \t}\n\n\t// \tif ((object = this.create_object(geometry, type)) != null) {\n\t// \t\tthis.add_object(object);\n\t// \t}\n\t// }\n\n\tset_geometry(geometry: BufferGeometry, type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\t// this.add_geometry(geometry, type);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_GEOMETRY);\n\t\tconst object = this.create_object(geometry, type);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_GEOMETRY);\n\t}\n\t//this.end_cook()\n\n\tset_geometries(geometries: BufferGeometry[], type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\tconst objects: Object3D[] = [];\n\t\tlet object;\n\t\tgeometries.forEach((geometry) => {\n\t\t\tobject = this.create_object(geometry, type);\n\t\t\tthis._set_object_attributes(object);\n\t\t\tobjects.push(object);\n\t\t});\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_GEOMETRIES);\n\t}\n\n\tset_container_objects(objects: Object3D[], message: MESSAGE) {\n\t\tconst core_group = this.container_controller.container.core_content() || new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\tcore_group.touch();\n\t\tthis.set_container(core_group);\n\t}\n\n\t// do_clone_inputs() {\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_clone_inputs')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\t// allow_add_object_attributes() {\n\t// \tif (!this.do_clone_inputs()) { return false; }\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_add_object_attributes')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\n\t// _create_group() {\n\t// \tconst group = new Group();\n\t// \tgroup.name = this.full_path();\n\n\t// \tthis._init_sop_bypass_group(group)\n\n\t// \treturn group;\n\t// }\n\n\tcreate_object(geometry: BufferGeometry, type?: ObjectType): Object3DWithGeometry {\n\t\t// ensure it has an index\n\t\tif (!geometry.index) {\n\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t}\n\n\t\tif (type == null) {\n\t\t\ttype = CoreConstant.OBJECT_TYPE.MESH;\n\t\t}\n\t\t// if (!lodash_includes(CoreConstant.OBJECT_TYPES, type)) {\n\t\t// \tconst human_type = CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[type];\n\t\t// \tconst human_names = CoreConstant.OBJECT_TYPES.map(\n\t\t// \t\t(n) => CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[n]\n\t\t// \t);\n\t\t// \tthrow `type '${human_type}' not recognized. Available types are ${human_names.join(', ')}.`;\n\t\t// }\n\n\t\t// if (geometry != null) {\n\t\tconst object_constructor = CoreConstant.CONSTRUCTORS_BY_NAME[type]; //THREE[type];\n\t\tconst material = CoreConstant.MATERIALS[type].clone();\n\t\tconst object = new object_constructor(geometry, material) as Object3DWithGeometry;\n\t\tobject.castShadow = true;\n\t\tobject.receiveShadow = true;\n\t\tobject.frustumCulled = false;\n\n\t\treturn object;\n\t\t// }\n\t}\n\n\t_set_object_attributes(object: Object3D) {\n\t\t// if (!this.allow_add_object_attributes()) { return; }\n\t\t// TODO: the exception below are just to debug when a geo could be reused or not cloned properly\n\t\t// I could remove that when more sure it all refreshes fine, and this would allow the null or merge to\n\t\t// not have to clone the data\n\t\t// if ((object.name == null) && (object.name !== '')) {\n\t\t// \tif (this.do_clone_inputs()) {\n\t\t// \t\tthrow `object.name already set to ${object.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t}\n\t\t// } else {\n\t\t// \tobject.name = this.full_path();\n\t\t// }\n\n\t\t// if ((geometry = object.geometry) != null) {\n\t\t// \tif ((geometry.name == null) && (geometry.name !== '')) {\n\t\t// \t\tif (this.do_clone_inputs()) {\n\t\t// \t\t\tthrow `geometry.node_name already set to ${geometry.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tgeometry.name = this.full_path();\n\t\t// \t}\n\t\t// }\n\t\tconst material: Material = (object as Mesh).material as Material;\n\t\tif (material) {\n\t\t\tif (!this.scene) {\n\t\t\t\tconsole.log('no scene');\n\t\t\t\tthrow 'no scene';\n\t\t\t}\n\t\t\tconst material_node = CoreMaterial.node(this.scene, material) as BaseMatNodeType;\n\t\t\tif (material_node) {\n\t\t\t\tmaterial_node.add_render_hook(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// _clear_objects() {\n\t// \tconst group = this.group();\n\n\t// \tlet child\n\t// \twhile(child = group.children[0]) {\n\t// \t\tgroup.remove(child);\n\t// \t}\n\t// \t// const children = lodash_clone(group.children);\n\t// \t// let child;\n\t// \t// for(let i=0; i < children.length; i++){\n\t// \t// \tchild = children[i]\n\t// \t// \tgroup.remove(child);\n\t// \t// \tchild.traverse((object)=>{\n\t// \t// \t\tif (object.geometry != null) {\n\t// \t// \t\t\tobject.geometry.dispose();\n\t// \t// \t\t}\n\t// \t// \t\t// no more material dispose since each the materials are not cloned\n\t// \t// \t\t// if (object.material){\n\t// \t// \t\t// \tif (lodash_isArray(object.material)){\n\t// \t// \t\t// \t\tobject.material.forEach((mat)=>{mat.dispose()})\n\t// \t// \t\t// \t} else {\n\t// \t// \t\t// \t\tobject.material.dispose()\n\t// \t// \t\t// \t}\n\t// \t// \t\t// }\n\t// \t// \t});\n\t// \t// }\n\t// }\n\n\t_add_index(geometry: BufferGeometry) {\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_array = position_attrib.array;\n\t\tconst points_count = position_array.length / 3;\n\t\tconst indices: number[] = [];\n\t\tlodash_times(points_count, (i) => indices.push(i));\n\n\t\tgeometry.setIndex(indices);\n\t}\n}\n\nexport type BaseSopNodeType = TypedSopNode<NodeParamsConfig>;\nexport class BaseSopNodeClass extends TypedSopNode<NodeParamsConfig> {}\n","export enum InputCloneMode {\n\tALWAYS = 'always',\n\tNEVER = 'never',\n\tFROM_NODE = 'from_node',\n}\n","import {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\n\nimport {ParamType} from '../../../poly/ParamType';\nimport {RampParam} from '../../../params/Ramp';\n\n// TODO: simplify GLDataType into one enum\n// http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html\n\n//\n//\n// GL Data types\n//\n//\nexport enum ConnectionPointType {\n\tBOOL = 'bool',\n\t// BVEC2 = 'bvec2',\n\t// BVEC3 = 'bvec3',\n\t// BVEC4 = 'bvec4',\n\tINT = 'int',\n\t// IVEC2 = 'ivec2',\n\t// IVEC3 = 'ivec3',\n\t// IVEC4 = 'ivec4',\n\tFLOAT = 'float',\n\tVEC2 = 'vec2',\n\tVEC3 = 'vec3',\n\tVEC4 = 'vec4',\n\t// matrices to be used later\n\t// MAT2 = 'mat2',\n\t// MAT3 = 'mat3',\n\t// MAT4 = 'mat4',\n\tSAMPLER_2D = 'sampler2D',\n}\n\n//\n//\n// ALL GL Data types in an array\n//\n//\nexport const ConnectionPointTypes: Array<ConnectionPointType> = [\n\tConnectionPointType.BOOL,\n\t// ConnectionPointType.BVEC2,\n\t// ConnectionPointType.BVEC3,\n\t// ConnectionPointType.BVEC4,\n\tConnectionPointType.INT,\n\t// ConnectionPointType.IVEC2,\n\t// ConnectionPointType.IVEC3,\n\t// ConnectionPointType.IVEC4,\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\n//\n//\n// Map to convert from a GL Data type to a ParamType\n//\n//\ntype ConnectionPointTypeToParamTypeMapGeneric = {[key in ConnectionPointType]: ParamType};\nexport interface IConnectionPointTypeToParamTypeMap extends ConnectionPointTypeToParamTypeMapGeneric {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT;\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2;\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3;\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4;\n}\nexport const ConnectionPointTypeToParamTypeMap: IConnectionPointTypeToParamTypeMap = {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT,\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2,\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3,\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4,\n\n\t[ConnectionPointType.SAMPLER_2D]: ParamType.RAMP,\n};\n\n//\n//\n// Map to convert from a ParamType to GL Data type\n//\n//\ntype ParamTypeToConnectionPointTypeMapGeneric = {[key in ParamType]: ConnectionPointType | undefined};\nexport interface IParamTypeToConnectionPointTypeMap extends ParamTypeToConnectionPointTypeMapGeneric {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL;\n\t[ParamType.COLOR]: ConnectionPointType.VEC3;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT;\n\t[ParamType.FOLDER]: undefined;\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2;\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3;\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4;\n\t[ParamType.BUTTON]: undefined;\n\t[ParamType.OPERATOR_PATH]: undefined;\n\t[ParamType.RAMP]: undefined;\n\t[ParamType.SEPARATOR]: undefined;\n\t[ParamType.STRING]: undefined;\n}\nexport const ParamTypeToConnectionPointTypeMap: IParamTypeToConnectionPointTypeMap = {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL,\n\t[ParamType.COLOR]: ConnectionPointType.VEC3,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT,\n\t[ParamType.FOLDER]: undefined,\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2,\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3,\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4,\n\t[ParamType.BUTTON]: undefined,\n\t[ParamType.OPERATOR_PATH]: undefined,\n\t[ParamType.RAMP]: undefined,\n\t[ParamType.SEPARATOR]: undefined,\n\t[ParamType.STRING]: undefined,\n};\n\n//\n//\n// Map of GL Data type default values\n//\n//\nexport type ConnectionPointInitValueMapGeneric = {\n\t[key in ConnectionPointType]: ParamInitValuesTypeMap[IConnectionPointTypeToParamTypeMap[key]];\n};\nexport const ConnectionPointInitValueMap: ConnectionPointInitValueMapGeneric = {\n\t[ConnectionPointType.BOOL]: false,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 0,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 0,\n\t[ConnectionPointType.VEC2]: [0, 0],\n\t[ConnectionPointType.VEC3]: [0, 0, 0],\n\t[ConnectionPointType.VEC4]: [0, 0, 0, 0],\n\n\t[ConnectionPointType.SAMPLER_2D]: RampParam.DEFAULT_VALUE_JSON,\n};\n\n//\n//\n// Map of GL Data type component counts\n//\n//\nexport type ConnectionPointComponentsCountMapGeneric = {\n\t[key in ConnectionPointType]: number;\n};\nexport const ConnectionPointComponentsCountMap: ConnectionPointComponentsCountMapGeneric = {\n\t[ConnectionPointType.BOOL]: 1,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 1,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 1,\n\t[ConnectionPointType.VEC2]: 2,\n\t[ConnectionPointType.VEC3]: 3,\n\t[ConnectionPointType.VEC4]: 4,\n\t[ConnectionPointType.SAMPLER_2D]: 1,\n};\n","export enum ParamType {\n\tBOOLEAN = 'boolean',\n\tBUTTON = 'button',\n\tCOLOR = 'color',\n\tFLOAT = 'float',\n\tFOLDER = 'folder',\n\tINTEGER = 'integer',\n\tOPERATOR_PATH = 'operator_path',\n\tRAMP = 'ramp',\n\tSEPARATOR = 'separator',\n\tSTRING = 'string',\n\tVECTOR2 = 'vector2',\n\tVECTOR3 = 'vector3',\n\tVECTOR4 = 'vector4',\n}\n// export type ParamTypeKey = ParamType\n// export type ParamTypeKeysArray = Array<ParamTypeKey>\n// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]\n","export enum NodeContext {\n\tCOP = 'cop',\n\tEVENT = 'event',\n\tGL = 'gl',\n\tJS = 'js',\n\tMANAGER = 'managers',\n\tMAT = 'mat',\n\tOBJ = 'objects',\n\tSOP = 'sop',\n\tPOST = 'post',\n}\n\nexport interface NodeContextAndType {\n\tcontext: NodeContext;\n\ttype: string;\n}\n","// import {VertexColors} from 'three/src/constants'\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NoColors} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {FrontSide} from 'three/src/constants';\n// import {DoubleSide} from 'three/src/constants'\nimport {Color} from 'three/src/math/Color';\nimport {Bone} from 'three/src/objects/Bone';\n// import {AdditiveBlending} from 'three/src/constants'\nimport {Material} from 'three/src/materials/Material';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\n// const THREE = {AdditiveBlending, Bone, Color, DoubleSide, FrontSide, Group, LineBasicMaterial, LineSegments, Mesh, MeshLambertMaterial, MeshStandardMaterial, NoColors, Object3D, Points, PointsMaterial, Scene, SkinnedMesh, VertexColors}\n\ninterface MaterialsByString {\n\t[propName: string]: Material;\n}\n\n// export enum AttribClass {\n// \tVERTEX = \"vertex\",\n// \tOBJECT = \"object\"\n// }\n// materials['MeshStandard'] = new MeshStandardMaterial({\n// \tcolor: 0xffffff,\n// \t//vertexColors: VertexColors\n// \tside: FrontSide, // DoubleSide\n// \tmetalness: 0.5,\n// \troughness: 0.9\n// })\n// materials[Mesh.name] = new MeshLambertMaterial({ // MeshStandardMaterial\n// \tcolor: new Color(0.5,0.5,1),\n// \tside: FrontSide,\n// \tvertexColors: NoColors,\n// \ttransparent: true,\n// \tdepthTest: true\n// })\n// materials[Points.name] = new PointsMaterial({\n// \tcolor: 0xffffff,\n// \tsize: 0.1,\n// \t//blending: AdditiveBlending\n// \tdepthTest: true\n// })\n// materials[LineSegments.name] = new LineBasicMaterial({\n// \tcolor: 0xffffff,\n// \tlinewidth: 1\n// })\nexport enum ObjectType {\n\tMESH = 'MESH',\n\tPOINTS = 'POINTS',\n\tLINE_SEGMENTS = 'LINE_SEGMENTS',\n}\nexport const ObjectTypes = [ObjectType.MESH, ObjectType.POINTS, ObjectType.LINE_SEGMENTS];\nexport const ObjectTypeMenuEntries = [\n\t{name: 'Mesh', value: ObjectTypes.indexOf(ObjectType.MESH)},\n\t{name: 'Points', value: ObjectTypes.indexOf(ObjectType.POINTS)},\n\t{name: 'LineSegments', value: ObjectTypes.indexOf(ObjectType.LINE_SEGMENTS)},\n];\n\nexport function ObjectTypeByObject(object: Object3D): ObjectType | undefined {\n\tif (object instanceof Mesh) {\n\t\treturn ObjectType.MESH;\n\t}\n\tif (object instanceof LineSegments) {\n\t\treturn ObjectType.LINE_SEGMENTS;\n\t}\n\tif (object instanceof Points) {\n\t\treturn ObjectType.POINTS;\n\t}\n\tconsole.warn('ObjectTypeByObject received an unknown object type', object);\n}\n\nconst materials: MaterialsByString = {\n\tMeshStandard: new MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\t//vertexColors: VertexColors\n\t\tside: FrontSide, // DoubleSide\n\t\tmetalness: 0.5,\n\t\troughness: 0.9,\n\t}),\n\t[ObjectType.MESH]: new MeshLambertMaterial({\n\t\t// MeshStandardMaterial\n\t\tcolor: new Color(0.5, 0.5, 1),\n\t\tside: FrontSide,\n\t\tvertexColors: NoColors,\n\t\ttransparent: true,\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.POINTS]: new PointsMaterial({\n\t\tcolor: 0xffffff,\n\t\tsize: 0.1,\n\t\t//blending: AdditiveBlending\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.LINE_SEGMENTS]: new LineBasicMaterial({\n\t\tcolor: 0xffffff,\n\t\tlinewidth: 1,\n\t}),\n};\n\n// TODO: typescript: check that this works after using uglifier\n\nexport enum AttribClass {\n\tVERTEX = 0,\n\tOBJECT = 1,\n}\n\nexport const AttribClassMenuEntries = [\n\t{name: 'vertex', value: AttribClass.VERTEX},\n\t{name: 'object', value: AttribClass.OBJECT},\n];\n\nexport enum AttribType {\n\tNUMERIC = 0,\n\tSTRING = 1,\n}\nexport const AttribTypeMenuEntries = [\n\t{name: 'numeric', value: AttribType.NUMERIC},\n\t{name: 'string', value: AttribType.STRING},\n];\n\nexport const CoreConstant = {\n\tATTRIB_CLASS: {\n\t\tVERTEX: AttribClass.VERTEX,\n\t\tOBJECT: AttribClass.OBJECT,\n\t},\n\n\tATTRIB_TYPE: {\n\t\tNUMERIC: 0,\n\t\tSTRING: 1,\n\t},\n\n\tOBJECT_TYPE: {\n\t\t// TODO: typescript\n\t\tMESH: ObjectType.MESH,\n\t\tPOINTS: ObjectType.POINTS,\n\t\tLINE_SEGMENTS: ObjectType.LINE_SEGMENTS,\n\t},\n\tOBJECT_TYPES: ObjectTypes,\n\tCONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {\n\t\t[Scene.name]: 'Scene',\n\t\t[Group.name]: 'Group',\n\t\t[Object3D.name]: 'Object3D',\n\t\t[Mesh.name]: 'Mesh',\n\t\t[Points.name]: 'Points',\n\t\t[LineSegments.name]: 'LineSegments',\n\t\t[Bone.name]: 'Bone',\n\t\t[SkinnedMesh.name]: 'SkinnedMesh',\n\t},\n\tCONSTRUCTORS_BY_NAME: {\n\t\t[ObjectType.MESH]: Mesh,\n\t\t[ObjectType.POINTS]: Points,\n\t\t[ObjectType.LINE_SEGMENTS]: LineSegments,\n\t},\n\t// CONSTRUCTORS_BY_TYPE: {\n\t// \t['MESH']: Mesh,\n\t// \t['POINTS']: Points,\n\t// \t['LINE_SEGMENTS']: LineSegments,\n\t// },\n\t// OBJECT_TYPE_BY_CONSTRUCTOR_NAME: {\n\t// \t[Mesh.name]: 'MESH',\n\t// \t[Points.name]: 'POINTS',\n\t// \t[LineSegments.name]: 'LINE_SEGMENTS',\n\t// },\n\tMATERIALS: materials,\n};\n\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Scene.name] = 'Scene'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Group.name] = 'Group'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Object3D.name] = 'Object3D'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Mesh.name] = 'Mesh'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Points.name] = 'Points'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LineSegments'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Bone.name] = 'Bone'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[SkinnedMesh.name] = 'SkinnedMesh'\n\n// CoreConstant.CONSTRUCTORS_BY_NAME[Mesh.name] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_NAME[Points.name] = Points\n// CoreConstant.CONSTRUCTORS_BY_NAME[LineSegments.name] = LineSegments\n\n// CoreConstant.CONSTRUCTORS_BY_TYPE['MESH'] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_TYPE['POINTS'] = Points\n// CoreConstant.CONSTRUCTORS_BY_TYPE['LINE_SEGMENTS'] = LineSegments\n\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Mesh.name] = 'MESH'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Points.name] = 'POINTS'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LINE_SEGMENTS'\n","import {CoreString} from './String';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isString from 'lodash/isString';\n\nexport class ThreeToGl {\n\tstatic any(value: any) {\n\t\tif (lodash_isString(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (lodash_isBoolean(value)) {\n\t\t\treturn `${value}`;\n\t\t}\n\n\t\tif (lodash_isNumber(value)) {\n\t\t\treturn `${CoreString.ensure_float(value)}`;\n\t\t} else {\n\t\t\tconst values = value.toArray().map((v: number) => {\n\t\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t\t});\n\t\t\tconst gl_type = `vec${values.length}`;\n\t\t\treturn `${gl_type}(${values.join(', ')})`;\n\t\t}\n\t}\n\n\tstatic vector3(vec: Vector3 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec3(${values.join(', ')})`;\n\t}\n\tstatic vector2(vec: Vector2 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec2(${values.join(', ')})`;\n\t}\n\n\tstatic vector3_float(vec: Vector3 | string, num: number | string): string {\n\t\tif (!lodash_isString(num)) {\n\t\t\tnum = CoreString.ensure_float(num);\n\t\t}\n\t\treturn `vec4(${this.vector3(vec)}, ${num})`;\n\t}\n\n\tstatic float4(x: number | string, y: number | string, z: number | string, w: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\tif (!lodash_isString(w)) {\n\t\t\tw = CoreString.ensure_float(w);\n\t\t}\n\t\treturn `vec4(${x}, ${y}, ${z}, ${w})`;\n\t}\n\tstatic float3(x: number | string, y: number | string, z: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\treturn `vec3(${x}, ${y}, ${z})`;\n\t}\n\tstatic float2(x: number | string, y: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\treturn `vec2(${x}, ${y})`;\n\t}\n\tstatic float(x: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\treturn `${x}`;\n\t}\n\tstatic int(x: number | string) {\n\t\treturn `${x}`;\n\t}\n\tstatic bool(x: number | string) {\n\t\treturn `${x}`;\n\t}\n}\n","import {BaseGlNodeType} from '../_Base';\nimport {TypedGLDefinitionCollection} from './GLDefinitionCollection';\nimport {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\n\nexport enum GLDefinitionType {\n\tATTRIBUTE = 'attribute',\n\tFUNCTION = 'function',\n\tUNIFORM = 'uniform',\n\tVARYING = 'varying',\n}\n\nexport abstract class TypedGLDefinition<T extends GLDefinitionType> {\n\t// constructor(protected _node: BaseGlNodeType, protected _name: string) {}\n\tconstructor(\n\t\tprotected _definition_type: T,\n\t\tprotected _data_type: ConnectionPointType,\n\t\tprotected _node: BaseGlNodeType,\n\t\tprotected _name: string\n\t) {\n\t\t// super(_node, _name);\n\t}\n\n\tget definition_type() {\n\t\treturn this._definition_type;\n\t}\n\tget data_type() {\n\t\treturn this._data_type;\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\t// get id() {\n\t// \treturn this._data_type;\n\t// }\n\n\tabstract get line(): string;\n\tcollection_instance() {\n\t\treturn new TypedGLDefinitionCollection<T>();\n\t}\n}\n\nexport class AttributeGLDefinition extends TypedGLDefinition<GLDefinitionType.ATTRIBUTE> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.ATTRIBUTE, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `attribute ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class FunctionGLDefinition extends TypedGLDefinition<GLDefinitionType.FUNCTION> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.FUNCTION, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn this.name;\n\t}\n}\n\nexport class UniformGLDefinition extends TypedGLDefinition<GLDefinitionType.UNIFORM> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.UNIFORM, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `uniform ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class VaryingGLDefinition extends TypedGLDefinition<GLDefinitionType.VARYING> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.VARYING, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `varying ${this.data_type} ${this.name}`;\n\t}\n}\nexport type BaseGLDefinition = TypedGLDefinition<GLDefinitionType>;\n","import lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_trim from 'lodash/trim';\nimport lodash_compact from 'lodash/compact';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_padEnd from 'lodash/padEnd';\nimport lodash_capitalize from 'lodash/capitalize';\nimport lodash_snakeCase from 'lodash/snakeCase';\nimport lodash_upperFirst from 'lodash/upperFirst';\nimport lodash_camelCase from 'lodash/camelCase';\n\nconst ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']\n\n// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n// const LETTERS_UPPERCASE = LETTERS.toUpperCase()\n// const NUMBERS = '0123645789'\n// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS\n\nconst TAIL_DIGIT_MATCH_REGEXP = /\\d+$/;\n// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\\d$/\nconst INDICES_LIST_SEPARATOR = /,| /;\n\n// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number\nconst NUM_REGEXP = /^-?\\d+\\.?\\d*$/;\nenum BooleanString {\n\tTRUE = 'true',\n\tFALSE = 'false',\n}\n\nexport class CoreString {\n\t// static has_tail_digits(word: string): boolean {\n\t// \tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP)\n\t// \treturn (match != null)\n\t// }\n\tstatic is_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE || word == BooleanString.FALSE;\n\t}\n\tstatic to_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE;\n\t}\n\tstatic is_number(word: string): boolean {\n\t\treturn NUM_REGEXP.test(word);\n\t}\n\n\tstatic tail_digits(word: string): number {\n\t\tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP);\n\t\tif (match) {\n\t\t\treturn parseInt(match[0]);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic increment(word: string): string {\n\t\tlet match;\n\t\tif ((match = word.match(TAIL_DIGIT_MATCH_REGEXP))) {\n\t\t\tconst digits = parseInt(match[0]);\n\t\t\tconst prefix = word.substring(0, word.length - match[0].length);\n\t\t\treturn `${prefix}${digits + 1}`;\n\t\t} else {\n\t\t\treturn `${word}1`;\n\t\t}\n\t}\n\n\tstatic pluralize(word: string): string {\n\t\tconst last_char = word[word.length - 1];\n\t\tif (last_char !== 's') {\n\t\t\treturn `${word}s`;\n\t\t} else {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\tstatic camel_case(word: string): string {\n\t\treturn lodash_camelCase(word);\n\t}\n\tstatic upper_first(word: string): string {\n\t\treturn lodash_upperFirst(word);\n\t}\n\tstatic snake_case(word: string): string {\n\t\treturn lodash_snakeCase(word);\n\t}\n\tstatic titleize(word: string): string {\n\t\treturn lodash_capitalize(word.replace(/_/g, ' '));\n\t}\n\n\tstatic type_to_class_name(word: string): string {\n\t\treturn this.upper_first(lodash_camelCase(word));\n\t}\n\t// static class_name_to_type(word): string {\n\t// \t// if(this.has_tail_digits(word)){\n\t// \t// \tconst tail_digits = `${this.tail_digits(word)}`\n\t// \t// \tconst head = word.substr(0, word.length-tail_digits.length)\n\t// \t// \tconst head_snake_case = this.snake_case(head)\n\t// \t// \tconsole.log(word, tail_digits, head, head_snake_case)\n\t// \t// \treturn `${head_snake_case}${tail_digits}`;\n\t// \t// } else {\n\t// \t// \treturn this.snake_case(word)\n\t// \t// }\n\t// \tconst snake_case = this.snake_case(word)\n\t// \tconst match = snake_case.match(DIGIT_PREDEDED_BY_UNDERSCOPE)\n\t// \tconsole.log(\"-----\", snake_case, match)\n\t// \treturn snake_case\n\t// }\n\t// static class_name_to_human(word): string {\n\t// \tconst human_name = this.class_name_to_type(word).replace(/\\s/, ' ');\n\t// \treturn human_name.replace(/_/g, \" \");\n\t// }\n\n\tstatic timestamp_to_seconds(word: string): number {\n\t\treturn Date.parse(word) / 1000;\n\t}\n\tstatic seconds_to_timestamp(seconds: number): string {\n\t\tconst d = new Date();\n\t\td.setTime(seconds * 1000);\n\t\treturn d.toISOString().substr(11, 8);\n\t}\n\n\tstatic precision(val: number, decimals: number = 2): string {\n\t\t// if (decimals == null) { decimals = 2; }\n\t\t// const factor = Math.pow(10, decimals);\n\t\t// const num = Math.floor(factor * val) / factor;\n\t\t// let number_s = `${num}`;\n\n\t\t// let elements = number_s.split('.');\n\t\t// if (decimals <= 0){\n\t\t// \treturn elements[0];\n\t\t// }\n\n\t\t// if (elements.length === 1) {\n\t\t// \t// number_s = `${number_s}.00`;\n\t\t// \tconst string_to_pad = `${number_s}.`\n\t\t// \tconst pad = string_to_pad.length + decimals\n\t\t// \treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t// } else {\n\t\t// \tconst integer_element = elements[0];\n\t\t// \tlet fraction_element = elements[1];\n\t\t// \tif (fraction_element.length === 1) {\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}0`;\n\t\t// \t} else if (fraction_element.length > 2) {\n\t\t// \t\tfraction_element = fraction_element.slice(0, 2);\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}`;\n\t\t// \t}\n\t\t// }\n\n\t\t// elements = number_s.split('.');\n\t\t// console.log(\"decimals:\", decimals, elements[1].length, number_s)\n\t\t// if (elements[1].length < decimals){\n\t\t// \tconst string_to_pad = number_s\n\t\t// \tconst pad = string_to_pad.length + (decimals - elements[1].length)\n\t\t// \tnumber_s = lodash_padEnd(string_to_pad, pad, '0');\n\t\t// }\n\n\t\t// return number_s;\n\t\tdecimals = Math.max(decimals, 0);\n\t\tconst elements = `${val}`.split('.');\n\n\t\tif (decimals <= 0) {\n\t\t\treturn elements[0];\n\t\t}\n\n\t\tlet frac = elements[1];\n\t\tif (frac !== undefined) {\n\t\t\tif (frac.length > decimals) {\n\t\t\t\tfrac = frac.substring(0, decimals);\n\t\t\t}\n\n\t\t\tfrac = lodash_padEnd(frac, decimals, '0');\n\t\t\treturn `${elements[0]}.${frac}`;\n\t\t} else {\n\t\t\tconst string_to_pad = `${val}.`;\n\t\t\tconst pad = string_to_pad.length + decimals;\n\t\t\treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t}\n\t}\n\n\tstatic ensure_float(num: number): string {\n\t\t// const integer = Math.floor(num)\n\t\t// const delta = num - integer\n\t\t// if(delta)\n\t\tconst num_as_string = `${num}`;\n\t\tconst dot_pos = num_as_string.indexOf('.');\n\t\tif (dot_pos >= 0) {\n\t\t\treturn num_as_string;\n\t\t} else {\n\t\t\treturn `${num_as_string}.0`;\n\t\t}\n\t}\n\n\t// https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438\n\tstatic match_mask(word: string, rule: string) {\n\t\tif (rule === '*') {\n\t\t\treturn true;\n\t\t}\n\t\t// \".\"  => Find a single character, except newline or line terminator\n\t\t// \".*\" => Matches any string that contains zero or more characters\n\t\trule = rule.split('*').join('.*');\n\n\t\t// \"^\"  => Matches any string with the following at the beginning of it\n\t\t// \"$\"  => Matches any string with that in front at the end of it\n\t\trule = `^${rule}$`;\n\n\t\t// Create a regular expression object for matching string\n\t\tconst regex = new RegExp(rule);\n\n\t\t// Returns true if it finds a match, otherwise it returns false\n\t\treturn regex.test(word);\n\t}\n\tstatic matches_one_mask(word: string, masks: string[]): boolean {\n\t\tlet matches_one_mask = false;\n\t\tfor (let mask of masks) {\n\t\t\tif (CoreString.match_mask(word, mask)) {\n\t\t\t\tmatches_one_mask = true;\n\t\t\t}\n\t\t}\n\t\treturn matches_one_mask;\n\t}\n\n\tstatic attrib_names(word: string): string[] {\n\t\t// let elements = [word];\n\t\t// lodash_each(ATTRIB_NAMES_SEPARATORS, separator => elements = lodash_flatten(lodash_map(elements, element => element.split(separator))));\n\t\tconst elements = word.split(ATTRIB_NAMES_SEPARATOR);\n\t\tconst trimed_elements = lodash_compact(\n\t\t\telements.map((e) => {\n\t\t\t\treturn lodash_trim(e);\n\t\t\t})\n\t\t);\n\t\tconst uniq = lodash_uniq(trimed_elements);\n\n\t\t// const names: string[] = []\n\t\t// ATTRIB_NAMES_SEPARATORS.forEach(separator=>{\n\t\t// \tword.split(separator).forEach( element=>{\n\t\t// \t\tnames.push(element.trim())\n\t\t// \t} )\n\t\t// })\n\n\t\t// // elements = lodash_filter(elements, element => (element != null) && (element.length > 0));\n\t\t// return lodash_uniq(names)\n\n\t\t// return lodash_map(elements, attr_name => lodash_trim(attr_name));\n\t\treturn uniq;\n\t}\n\tstatic to_id(val: string): number {\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst elements = val.split('').reverse();\n\t\tlet id = 0;\n\t\tlet exp = 0;\n\t\telements.forEach((element, i) => {\n\t\t\tlet index = element.charCodeAt(0);\n\n\t\t\tif (index >= 0) {\n\t\t\t\texp = i % 10;\n\t\t\t\tid += index * 10 ** exp;\n\t\t\t\tid = id % Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\t\t});\n\t\treturn id;\n\t}\n\n\tstatic indices(indices_string: string): number[] {\n\t\tconst elements = indices_string.split(INDICES_LIST_SEPARATOR);\n\t\tif (elements.length > 1) {\n\t\t\treturn lodash_uniq(lodash_flatten(elements.map((element) => this.indices(element)))).sort((a, b) => a - b);\n\t\t} else {\n\t\t\tconst element = elements[0];\n\t\t\tif (element) {\n\t\t\t\tconst range_separator = '-';\n\t\t\t\tif (element.indexOf(range_separator) > 0) {\n\t\t\t\t\tconst range_elements = element.split(range_separator);\n\t\t\t\t\treturn lodash_range(parseInt(range_elements[0]), parseInt(range_elements[1]) + 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn [parseInt(element)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic escape_line_breaks(word: string): string {\n\t\treturn word.replace(/(\\r\\n|\\n|\\r)/gm, '\\\\n');\n\t}\n}\n","export enum ShaderName {\n\tVERTEX = 'vertex',\n\tFRAGMENT = 'fragment',\n\tLEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader',\n\tPARTICLES_0 = 'particles_0',\n\tPARTICLES_1 = 'particles_1',\n\tPARTICLES_2 = 'particles_2',\n\tPARTICLES_3 = 'particles_3',\n\tPARTICLES_4 = 'particles_4',\n\tPARTICLES_5 = 'particles_5',\n\tPARTICLES_6 = 'particles_6',\n\tPARTICLES_7 = 'particles_7',\n\tPARTICLES_8 = 'particles_8',\n\tPARTICLES_9 = 'particles_9',\n}\nexport const ParticleShaderNames: Array<ShaderName> = [\n\tShaderName.PARTICLES_0,\n\tShaderName.PARTICLES_1,\n\tShaderName.PARTICLES_2,\n\tShaderName.PARTICLES_3,\n\tShaderName.PARTICLES_4,\n\tShaderName.PARTICLES_5,\n\tShaderName.PARTICLES_6,\n\tShaderName.PARTICLES_7,\n\tShaderName.PARTICLES_8,\n\tShaderName.PARTICLES_9,\n];\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2'\nimport {Int32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\n\n// const THREE = {\n// \tBox3,\n// \tBufferGeometry,\n// \tFloat32BufferAttribute,\n// \tInt32BufferAttribute,\n// \tInterleavedBufferAttribute,\n// \tVector2,\n// \tVector3,\n// }\nimport lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_each from 'lodash/each';\nimport lodash_chunk from 'lodash/chunk';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CorePoint} from './Point';\nimport {CoreFace} from './Face';\nimport {CoreConstant, ObjectType} from './Constant';\nimport {CoreAttribute} from './Attribute';\nimport {MonkeyPatcher} from './MonkeyPatcher';\n\nimport {BufferGeometryUtils} from '../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\nimport {CoreAttributeData} from './AttributeData';\n\nexport class CoreGeometry {\n\t_bounding_box: Box3 | undefined;\n\tprivate _points: CorePoint[] | undefined;\n\n\t// @INDEX_MODE_POINTS = 'INDEX_MODE_POINTS'\n\t// @INDEX_MODE_FACES = 'INDEX_MODE_FACES'\n\t// @INDEX_MODE_LINES = 'INDEX_MODE_LINES'\n\n\tconstructor(private _geometry: BufferGeometry) {}\n\t//\n\n\tgeometry() {\n\t\treturn this._geometry;\n\t}\n\tuuid() {\n\t\treturn this._geometry.uuid;\n\t}\n\n\tbounding_box() {\n\t\treturn (this._bounding_box = this._bounding_box || this._create_bounding_box());\n\t}\n\t_create_bounding_box() {\n\t\tthis._geometry.computeBoundingBox();\n\t\treturn this._geometry.boundingBox;\n\t}\n\n\tmark_as_instance() {\n\t\tthis._geometry.userData['is_instance'] = true;\n\t}\n\tstatic marked_as_instance(geometry: BufferGeometry): boolean {\n\t\treturn geometry.userData['is_instance'] === true;\n\t}\n\tmarked_as_instance(): boolean {\n\t\treturn CoreGeometry.marked_as_instance(this._geometry);\n\t}\n\tposition_attrib_name() {\n\t\tlet name = 'position';\n\t\tif (this.marked_as_instance()) {\n\t\t\tname = 'instancePosition';\n\t\t}\n\t\treturn name;\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis._geometry.computeVertexNormals();\n\t}\n\n\tuser_data_attribs() {\n\t\tconst key = 'indexed_attrib_values';\n\t\treturn (this._geometry.userData[key] = this._geometry.userData[key] || {});\n\t}\n\tindexed_attribute_names() {\n\t\treturn Object.keys(this.user_data_attribs() || {});\n\t}\n\tuser_data_attrib(name: string) {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attribs()[name];\n\t}\n\tis_attrib_indexed(name: string): boolean {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attrib(name) != null;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tif (name === 'ptnum') {\n\t\t\treturn true;\n\t\t}\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.attributes[name] != null;\n\t}\n\tattrib_type(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_names(): string[] {\n\t\treturn Object.keys(this._geometry.attributes);\n\t}\n\tattrib_sizes() {\n\t\tconst h: Dictionary<number> = {};\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\th[attrib_name] = this._geometry.attributes[attrib_name].itemSize;\n\t\t}\n\t\treturn h;\n\t}\n\tattrib_size(name: string): number {\n\t\tlet attrib;\n\t\tname = CoreAttribute.remap_name(name);\n\t\tif ((attrib = this._geometry.attributes[name]) != null) {\n\t\t\treturn attrib.itemSize;\n\t\t} else {\n\t\t\tif (name === 'ptnum') {\n\t\t\t\t// to ensure attrib copy with ptnum as source works\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tset_indexed_attribute_values(name: string, values: string[]) {\n\t\tthis.user_data_attribs()[name] = values;\n\t}\n\n\tset_indexed_attribute(name: string, values: string[], indices: number[]) {\n\t\tthis.set_indexed_attribute_values(name, values);\n\t\tthis._geometry.setAttribute(name, new Int32BufferAttribute(indices, 1));\n\t}\n\n\tadd_numeric_attrib(name: string, size: number = 1, default_value: NumericAttribValue = 0) {\n\t\tconst values = [];\n\n\t\tlet attribute_added = false;\n\t\tif (lodash_isNumber(default_value)) {\n\t\t\t// adding number\n\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\tvalues.push(default_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute_added = true;\n\t\t} else {\n\t\t\tif (size > 1) {\n\t\t\t\tif (lodash_isArray(default_value)) {\n\t\t\t\t\t// adding array\n\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\t\t\tvalues.push(default_value[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tattribute_added = true;\n\t\t\t\t} else {\n\t\t\t\t\t// adding Vector2\n\t\t\t\t\tconst vec2 = default_value as Vector2Like;\n\t\t\t\t\tif (size == 2 && vec2.x != null && vec2.y != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec2.x);\n\t\t\t\t\t\t\tvalues.push(vec2.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector3\n\t\t\t\t\tconst vec3 = default_value as Vector3Like;\n\t\t\t\t\tif (size == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec3.x);\n\t\t\t\t\t\t\tvalues.push(vec3.y);\n\t\t\t\t\t\t\tvalues.push(vec3.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Color\n\t\t\t\t\tconst col = default_value as ColorLike;\n\t\t\t\t\tif (size == 3 && col.r != null && col.g != null && col.b != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(col.r);\n\t\t\t\t\t\t\tvalues.push(col.g);\n\t\t\t\t\t\t\tvalues.push(col.b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector4\n\t\t\t\t\tconst vec4 = default_value as Vector4Like;\n\t\t\t\t\tif (size == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec4.x);\n\t\t\t\t\t\t\tvalues.push(vec4.y);\n\t\t\t\t\t\t\tvalues.push(vec4.z);\n\t\t\t\t\t\t\tvalues.push(vec4.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (attribute_added) {\n\t\t\tthis._geometry.setAttribute(name, new Float32BufferAttribute(values, size));\n\t\t} else {\n\t\t\tthrow 'no other default value allowed for now in add_numeric_attrib';\n\t\t}\n\t}\n\n\tinit_position_attribute(points_count: number, default_value?: Vector3) {\n\t\tconst values = [];\n\t\tif (default_value == null) {\n\t\t\tdefault_value = new Vector3();\n\t\t}\n\n\t\tfor (let i = 0; i < points_count; i++) {\n\t\t\tvalues.push(default_value.x);\n\t\t\tvalues.push(default_value.y);\n\t\t\tvalues.push(default_value.z);\n\t\t}\n\n\t\treturn this._geometry.setAttribute('position', new Float32BufferAttribute(values, 3));\n\t}\n\n\tadd_attribute(name: string, attrib_data: CoreAttributeData) {\n\t\tswitch (attrib_data.type()) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\treturn console.log('TODO: to implement');\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\treturn this.add_numeric_attrib(name, attrib_data.size());\n\t\t}\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tif (this.is_attrib_indexed(old_name)) {\n\t\t\tthis.user_data_attribs()[new_name] = lodash_clone(this.user_data_attribs()[old_name]);\n\t\t\tdelete this.user_data_attribs()[old_name];\n\t\t}\n\n\t\tconst old_attrib = this._geometry.getAttribute(old_name);\n\t\tthis._geometry.setAttribute(new_name, new Float32BufferAttribute(old_attrib.array, old_attrib.itemSize));\n\t\treturn this._geometry.deleteAttribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\tdelete this.user_data_attribs()[name];\n\t\t}\n\n\t\treturn this._geometry.deleteAttribute(name);\n\t}\n\n\tclone(): BufferGeometry {\n\t\treturn CoreGeometry.clone(this._geometry);\n\t}\n\n\tstatic clone(src_geometry: BufferGeometry): BufferGeometry {\n\t\tlet src_userData;\n\n\t\t// monkey path\n\t\tfor (let attribute_name of Object.keys(src_geometry.attributes)) {\n\t\t\tconst attribute = src_geometry.getAttribute(attribute_name);\n\t\t\tif (attribute.constructor.name == InterleavedBufferAttribute.name) {\n\t\t\t\tMonkeyPatcher.patch(attribute as InterleavedBufferAttribute);\n\t\t\t}\n\t\t}\n\n\t\tconst new_geometry = src_geometry.clone();\n\t\tif ((src_userData = src_geometry.userData) != null) {\n\t\t\tnew_geometry.userData = lodash_cloneDeep(src_userData);\n\t\t}\n\t\treturn new_geometry;\n\t}\n\n\tpoints_count(): number {\n\t\treturn CoreGeometry.points_count(this._geometry);\n\t}\n\n\tstatic points_count(geometry: BufferGeometry): number {\n\t\tlet position;\n\t\tlet count = 0;\n\t\tconst core_geometry = new this(geometry);\n\t\tlet position_attrib_name = 'position';\n\t\tif (core_geometry.marked_as_instance()) {\n\t\t\tposition_attrib_name = 'instancePosition';\n\t\t}\n\n\t\tif ((position = geometry.getAttribute(position_attrib_name)) != null) {\n\t\t\tlet array;\n\t\t\tif ((array = position.array) != null) {\n\t\t\t\tcount = array.length / 3;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t// TODO: use lodash_chunk\n\t// like: lodash_chunk(template_geometry.getAttribute('position').array, 3)\n\tpoints(): CorePoint[] {\n\t\treturn (this._points = this._points || this.points_from_geometry());\n\t}\n\treset_points() {\n\t\tthis._points = undefined;\n\t}\n\tpoints_from_geometry(): CorePoint[] {\n\t\tconst points = [];\n\t\tconst position_attrib = this._geometry.getAttribute(this.position_attrib_name());\n\n\t\tif (position_attrib != null) {\n\t\t\tconst points_count = position_attrib.array.length / 3;\n\t\t\tfor (let point_index = 0; point_index < points_count; point_index++) {\n\t\t\t\tconst point = new CorePoint(this, point_index);\n\n\t\t\t\t// lodash_each lodash_keys(@_geometry.attributes), (attrib_name) =>\n\n\t\t\t\t// \tattribute = @_geometry.getAttribute(attrib_name)\n\t\t\t\t// \titem_size = attribute.itemSize\n\t\t\t\t// \tcurrent_index = point_index  *item_size\n\n\t\t\t\t// \tattrib_value = switch item_size\n\t\t\t\t// \t\twhen 1\n\t\t\t\t// \t\t\tattribute.array[current_index]\n\t\t\t\t// \t\twhen 2\n\t\t\t\t// \t\t\tnew Vector2(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\t)\n\t\t\t\t// \t\twhen 3\n\t\t\t\t// \t\t\tnew Vector3(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 2]\n\t\t\t\t// \t\t\t\t)\n\n\t\t\t\t// \tpoint.add_attribute(attrib_name, item_size, attrib_value)\n\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\tstatic geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst geometry_wrapper = new this(geometry);\n\n\t\tconst first_point = points[0];\n\t\tif (first_point != null) {\n\t\t\tconst old_geometry = first_point.geometry();\n\t\t\tconst old_geometry_wrapper = first_point.geometry_wrapper();\n\n\t\t\t// index\n\t\t\tconst new_index_by_old_index: Dictionary<number> = {};\n\t\t\tlodash_each(points, (point, i) => (new_index_by_old_index[point.index] = i));\n\n\t\t\tconst indices = this._indices_from_points(new_index_by_old_index, old_geometry, object_type);\n\t\t\tif (indices != null && indices.length !== 0) {\n\t\t\t\tgeometry.setIndex(indices);\n\t\t\t}\n\n\t\t\t// attributes\n\t\t\tconst {attributes} = old_geometry;\n\t\t\t// const new_attributes = {}\n\t\t\tfor (let attribute_name of Object.keys(attributes)) {\n\t\t\t\tconst attrib_values = old_geometry_wrapper.user_data_attribs()[attribute_name];\n\t\t\t\tconst is_attrib_indexed = attrib_values != null;\n\n\t\t\t\tif (is_attrib_indexed) {\n\t\t\t\t\tconst new_values = lodash_uniq(points.map((point) => point.attrib_value(attribute_name)));\n\t\t\t\t\tconst new_index_by_value: Dictionary<number> = {};\n\t\t\t\t\tlodash_each(new_values, (new_value, i) => (new_index_by_value[new_value] = i));\n\n\t\t\t\t\tgeometry_wrapper.user_data_attribs()[attribute_name] = new_values;\n\n\t\t\t\t\t// const old_attrib = old_geometry.getAttribute(attribute_name)\n\t\t\t\t\t// const old_attrib_array = old_attrib.array\n\t\t\t\t\tconst new_attrib_indices = [];\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t// const old_index = old_attrib_array[point.index()]\n\t\t\t\t\t\tconst new_index = new_index_by_value[point.attrib_value(attribute_name)];\n\t\t\t\t\t\tnew_attrib_indices.push(new_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(new_attrib_indices, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tconst attrib_size = attributes[attribute_name].itemSize;\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\tconst value = point.attrib_value(attribute_name);\n\t\t\t\t\t\tswitch (attrib_size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tvalues.push(value.x);\n\t\t\t\t\t\t\t\tvalues.push(value.y);\n\t\t\t\t\t\t\t\tvalues.push(value.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(values, attrib_size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn geometry;\n\t}\n\n\tstatic _indices_from_points(\n\t\tnew_index_by_old_index: Dictionary<number>,\n\t\told_geometry: BufferGeometry,\n\t\tobject_type: ObjectType\n\t) {\n\t\tconst index_attrib = old_geometry.index;\n\t\tif (index_attrib != null) {\n\t\t\tconst old_indices = index_attrib.array;\n\n\t\t\tconst new_indices: number[] = [];\n\n\t\t\tswitch (object_type) {\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.POINTS:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tconst new_index = new_index_by_old_index[old_index];\n\t\t\t\t\t\tif (new_index != null) {\n\t\t\t\t\t\t\tnew_indices.push(new_index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.MESH:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst old_index2 = old_indices[i + 2];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tconst new_index2 = new_index_by_old_index[old_index2];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null && new_index2 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.LINE_SEGMENTS:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn new_indices;\n\t\t}\n\t}\n\n\tstatic merge_geometries(geometries: BufferGeometry[]) {\n\t\tif (geometries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// 1/3. set the new attrib indices for the indexed attributes\n\t\t//\n\t\tconst core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));\n\t\tconst indexed_attribute_names = core_geometries[0].indexed_attribute_names();\n\n\t\tconst new_values_by_attribute_name: Dictionary<string[]> = {};\n\t\tfor (let indexed_attribute_name of indexed_attribute_names) {\n\t\t\tconst index_by_values: Dictionary<number> = {};\n\t\t\tconst all_geometries_points = [];\n\t\t\tfor (let core_geometry of core_geometries) {\n\t\t\t\tconst geometry_points = core_geometry.points();\n\t\t\t\tfor (let point of geometry_points) {\n\t\t\t\t\tall_geometries_points.push(point);\n\t\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\t\t//value_index = point.attrib_value_index(indexed_attribute_name)\n\t\t\t\t\t// TODO: typescript: that doesn't seem right\n\t\t\t\t\tindex_by_values[value] != null\n\t\t\t\t\t\t? index_by_values[value]\n\t\t\t\t\t\t: (index_by_values[value] = Object.keys(index_by_values).length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst values = Object.keys(index_by_values);\n\t\t\tfor (let point of all_geometries_points) {\n\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\tconst new_index = index_by_values[value];\n\t\t\t\tpoint.set_attrib_index(indexed_attribute_name, new_index);\n\t\t\t}\n\n\t\t\tnew_values_by_attribute_name[indexed_attribute_name] = values;\n\t\t}\n\n\t\t//\n\t\t// 2/3. merge the geos\n\t\t//\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\n\t\t//\n\t\t// 3/3. add the index attrib values\n\t\t//\n\n\t\tconst merged_geometry_wrapper = new this(merged_geometry);\n\t\tObject.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n\t\t\tconst values = new_values_by_attribute_name[indexed_attribute_name];\n\t\t\tmerged_geometry_wrapper.set_indexed_attribute_values(indexed_attribute_name, values);\n\t\t});\n\n\t\tif (merged_geometry) {\n\t\t\tdelete merged_geometry.userData.mergedUserData;\n\t\t}\n\n\t\treturn merged_geometry;\n\t}\n\n\tsegments() {\n\t\t// const points = this.points();\n\t\tconst index = this.geometry().index?.array || [];\n\t\treturn lodash_chunk(index, 2);\n\t}\n\n\tfaces(): CoreFace[] {\n\t\treturn this.faces_from_geometry();\n\t}\n\tfaces_from_geometry(): CoreFace[] {\n\t\tconst index_array = this.geometry().index?.array || [];\n\t\tconst faces_count = index_array.length / 3;\n\t\treturn lodash_range(faces_count).map((i) => new CoreFace(this, i));\n\t}\n}\n\n// segments_count = 0.5*index.length\n// segments = []\n// lodash_times segments_count, (i)->\n// \tindices = [i, i+1]\n// \tsegments.push(indices) #lodash_map(indices, (index)->points[index])\n\n// segments\n","// events\nexport enum NodeEvent {\n\tCREATED = 'node_created',\n\tDELETED = 'node_deleted',\n\tNAME_UPDATED = 'node_name_update',\n\tOVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update',\n\tNAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated',\n\tNAMED_INPUTS_UPDATED = 'node_named_inputs_updated',\n\tINPUTS_UPDATED = 'node_inputs_updated',\n\tPARAMS_UPDATED = 'node_params_updated',\n\tUI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated',\n\tUI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated',\n\tERROR_UPDATED = 'node_error_updated',\n\tFLAG_BYPASS_UPDATED = 'bypass_flag_updated',\n\tFLAG_DISPLAY_UPDATED = 'display_flag_updated',\n\tSELECTION_UPDATED = 'selection_updated',\n}\n","import {CoreWalker} from '../../../core/Walker';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\n// import {NodeSimple} from '../../../core/graph/NodeSimple'\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {BaseContainer} from '../../containers/_Base';\n\n// type NodeOrParam = BaseNode | BaseParam;\n\nexport abstract class BaseMethod {\n\tpublic node: BaseNodeType;\n\n\tconstructor(public readonly param: BaseParamType) {\n\t\t// this._init_update_dependencies_mode();\n\t\tthis.node = this.param.node;\n\t}\n\n\tstatic required_arguments(): any[] {\n\t\tconsole.warn('Expression.Method._Base.required_arguments virtual method call. Please override');\n\t\treturn [];\n\t}\n\tstatic optional_arguments(): any[] {\n\t\treturn [];\n\t}\n\tstatic min_allowed_arguments_count() {\n\t\treturn this.required_arguments().length;\n\t}\n\tstatic max_allowed_arguments_count() {\n\t\treturn this.min_allowed_arguments_count() + this.optional_arguments().length;\n\t}\n\tstatic allowed_arguments_count(count: number) {\n\t\treturn count >= this.min_allowed_arguments_count() && count <= this.max_allowed_arguments_count();\n\t}\n\n\tprocess_arguments(args: any): Promise<any> {\n\t\tthrow 'Expression.Method._Base.process_arguments virtual method call. Please override';\n\t}\n\n\tasync get_referenced_node_container(index_or_path: number | string): Promise<BaseContainer> {\n\t\tconst referenced_node = this.get_referenced_node(index_or_path);\n\n\t\tif (referenced_node) {\n\t\t\tconst container = await referenced_node.request_container();\n\t\t\tif (container) {\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\treturn container;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow `referenced node invalid: ${referenced_node.full_path()}`;\n\t\t} else {\n\t\t\tthrow `invalid input (${index_or_path})`;\n\t\t}\n\t}\n\n\tget_referenced_param(path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tconst referenced_param = CoreWalker.find_param(this.node, path, decomposed_path);\n\n\t\t// if (referenced_param != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\n\t\t// \t\t//param_connect_result = this.param().add_graph_input(referenced_param)\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_param);\n\t\t// \t\t//if !(param_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no param found for argument ${path}`;\n\t\t// }\n\n\t\treturn referenced_param || null;\n\t}\n\n\tfind_referenced_graph_node(index_or_path: number | string, decomposed_path?: DecomposedPath): CoreGraphNode | null {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\t\t// let node\n\t\tif (is_index) {\n\t\t\tconst index = index_or_path as number;\n\t\t\tconst input_graph_node = this.node.io.inputs.input_graph_node(index);\n\t\t\treturn input_graph_node;\n\t\t} else {\n\t\t\tconst path = index_or_path as string;\n\t\t\treturn this.get_referenced_node(path, decomposed_path);\n\t\t}\n\t}\n\tget_referenced_node(index_or_path: string | number, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\t// if ((index_or_path != null) && (index_or_path.is_a != null) && index_or_path.is_a(BaseNode)) {\n\t\t// \tindex_or_path = index_or_path.full_path();\n\t\t// }\n\t\tif (lodash_isString(index_or_path)) {\n\t\t\tconst path = index_or_path;\n\t\t\treturn CoreWalker.find_node(this.node, path, decomposed_path);\n\t\t} else {\n\t\t\tconst index = index_or_path;\n\t\t\tthis.node.io.inputs.input(index);\n\t\t\treturn this.node.io.inputs.input(index);\n\t\t}\n\n\t\t// if (referenced_node != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\t\t// \t\t//node_connect_result = this.param().add_graph_input(referenced_node)\n\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_node);\n\t\t// \t\t//if !(node_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no node found for argument ${index_or_path}`;\n\t\t// }\n\n\t\t// return referenced_node;\n\t}\n\n\tfind_dependency(args: any): MethodDependency | null {\n\t\treturn null;\n\t}\n\n\tprotected create_dependency_from_index_or_path(index_or_path: number | string): MethodDependency | null {\n\t\t// console.log(\"is_index\", index_or_path)\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst node = this.find_referenced_graph_node(index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\treturn this.create_dependency(node, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('node not found for path', index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\tprotected create_dependency(\n\t\tnode: CoreGraphNode,\n\t\tindex_or_path: number | string,\n\t\tdecomposed_path?: DecomposedPath\n\t): MethodDependency | null {\n\t\t// if (CoreObject.is_a(node, TypedNode) || CoreObject.is_a(node, TypedParam)) {\n\t\t// \tconst node_or_param = node as BaseNodeType;\n\t\t// \treturn MethodDependency.create(this.param, index_or_path, node_or_param, decomposed_path?.named_nodes);\n\t\t// }\n\t\tconst dependency = MethodDependency.create(this.param, index_or_path, node, decomposed_path);\n\t\treturn dependency;\n\t}\n\n\t//\n\t//\n\t// UPDATE DEPENDENCIES\n\t//\n\t//\n\t// _init_update_dependencies_mode() {\n\t// \treturn this.set_update_dependencies_mode(false);\n\t// }\n\t// set_update_dependencies_mode(mode){\n\t// \treturn this._update_dependencies_mode = mode;\n\t// }\n\t// update_dependencies_mode() {\n\t// \treturn this._update_dependencies_mode;\n\t// }\n\t// update_dependencies() {}\n}\n//\n","import {TypedNode} from '../_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {BaseGlShaderAssembler} from './code/assemblers/_Base';\nimport {AssemblerControllerNode} from './code/Controller';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamInitValueSerialized} from '../../params/types/ParamInitValueSerialized';\nimport {GlNodeSpareParamsController} from './utils/SpareParamsController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport class TypedGlNode<K extends NodeParamsConfig> extends TypedNode<'GL', BaseGlNodeType, K> {\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.GL;\n\t}\n\tprotected _param_configs_controller: ParamConfigsController | undefined;\n\tprotected _assembler: BaseGlShaderAssembler | undefined;\n\n\treadonly spare_params_controller: GlNodeSpareParamsController = new GlNodeSpareParamsController(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController | undefined;\n\n\tinitialize_base_node() {\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.io.outputs.set_named_output_connection_points([]);\n\n\t\tthis.spare_params_controller.initialize_node();\n\t}\n\tcook() {\n\t\tthrow 'gl nodes should never cook';\n\t}\n\n\tprotected _set_mat_to_recompile() {\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tget material_node(): AssemblerControllerNode | undefined {\n\t\tif (this.parent) {\n\t\t\tif (this.parent.type == this.type) {\n\t\t\t\treturn (this.parent as BaseGlNodeType)?.material_node;\n\t\t\t} else {\n\t\t\t\treturn this.parent as AssemblerControllerNode;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// VARIABLES\n\t//\n\t//\n\tgl_var_name(name: string) {\n\t\treturn `v_POLY_${this.name}_${name}`;\n\t}\n\n\tvariable_for_input(name: string): string {\n\t\tconst input_index = this.io.inputs.get_input_index(name);\n\t\tconst connection = this.io.connections.input_connection(input_index);\n\t\tif (connection) {\n\t\t\tconst input_node = (<unknown>connection.node_src) as BaseGlNodeType;\n\t\t\tconst output_name = input_node.io.outputs.named_output_connection_points[connection.output_index].name;\n\t\t\treturn input_node.gl_var_name(output_name);\n\t\t} else {\n\t\t\treturn ThreeToGl.any(this.params.get(name)?.value);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ADDED LINES\n\t//\n\t//\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {}\n\n\treset_code() {\n\t\tthis._param_configs_controller?.reset();\n\t\t// this.reset_lines();\n\t}\n\n\t//\n\t//\n\t// PARAM CONFIGS\n\t//\n\t//\n\tpublic set_param_configs() {}\n\tparam_configs() {\n\t\treturn this._param_configs_controller?.list;\n\t}\n\t// private reset_param_configs() {\n\t// \tthis._param_configs = [];\n\t// }\n\t// add_param_config<T extends ParamType>(\n\t// \ttype: T,\n\t// \tname: string,\n\t// \tdefault_value: ParamInitValuesTypeMap[T],\n\t// \tuniform_name: string\n\t// ) {\n\t// \tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t// \tthis._param_configs.push(param_config);\n\t// }\n\t// param_configs() {\n\t// \treturn this._param_configs;\n\t// }\n\t//\n\t//\n\t// INPUT\n\t//\n\t//\n\tgl_input_default_value(name: string): ParamInitValueSerialized {\n\t\treturn null;\n\t}\n\n\t//\n\t//\n\t// MISC\n\t//\n\t//\n\n\t//\n\t//\n\t// NEEDED?\n\t//\n\t//\n\t// set_assembler(assembler: BaseGlShaderAssembler) {\n\t// \tthis._assembler = assembler;\n\t// }\n\t// get assembler(): BaseGlShaderAssembler | undefined {\n\t// \treturn this._assembler;\n\t// }\n\n\t// shader_configs() {\n\t// \treturn this.assembler?.shader_configs || [];\n\t// }\n\t// shader_config(name: string) {\n\t// \treturn this.assembler?.shader_config(name);\n\t// }\n\t// shader_names() {\n\t// \treturn this.assembler?.shader_names || [];\n\t// }\n}\n\nexport type BaseGlNodeType = TypedGlNode<NodeParamsConfig>;\nexport class BaseGlNodeClass extends TypedGlNode<NodeParamsConfig> {}\n\nclass ParamlessParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ParamlessParamsConfig();\nexport class ParamlessTypedGlNode extends TypedGlNode<ParamlessParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n","import {\n\tConnectionPointType,\n\tConnectionPointInitValueMapGeneric,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n\tIConnectionPointTypeToParamTypeMap,\n} from './ConnectionPointType';\n// import {ParamInitValuesTypeMap} from '../params/ParamsController';\n\nexport interface TypedNamedConnectionPointData<T extends ConnectionPointType> {\n\tname: string;\n\ttype: T;\n}\n\nexport class TypedNamedConnectionPoint<T extends ConnectionPointType> {\n\tprivate _json: TypedNamedConnectionPointData<T> | undefined;\n\n\tconstructor(\n\t\tprotected _name: string,\n\t\tprotected _type: T,\n\t\tprotected _init_value?: ConnectionPointInitValueMapGeneric[T]\n\t) {\n\t\tif (this._init_value === undefined) {\n\t\t\tthis._init_value = ConnectionPointInitValueMap[this._type];\n\t\t}\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget param_type(): IConnectionPointTypeToParamTypeMap[T] {\n\t\treturn ConnectionPointTypeToParamTypeMap[this._type];\n\t}\n\tget init_value() {\n\t\treturn this._init_value;\n\t}\n\n\tto_json(): TypedNamedConnectionPointData<T> {\n\t\treturn (this._json = this._json || this._create_json());\n\t}\n\tprivate _create_json(): TypedNamedConnectionPointData<T> {\n\t\treturn {\n\t\t\tname: this._name,\n\t\t\ttype: this._type,\n\t\t};\n\t}\n}\n\nexport type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;\n","import {BaseNodeClass} from './nodes/_Base';\nimport {PolyScene} from './scene/PolyScene';\nimport {RenderersController} from './poly/RenderersController';\nimport {NodesRegister, RegisterOptions, BaseNodeConstructor} from './poly/NodesRegister';\nimport {NodeContext} from './poly/NodeContext';\n// import {ViewerLoadersManager} from '/viewers/LoadersManager';\n\nexport class Poly {\n\tstatic _instance: Poly | undefined;\n\trenderers_controller: RenderersController = new RenderersController();\n\tnodes_register: NodesRegister = new NodesRegister();\n\n\tscenes_by_uuid: Dictionary<PolyScene> = {};\n\t_env: string | undefined;\n\t// public viewer_loaders_manager: ViewerLoadersManager = new ViewerLoadersManager();\n\n\tstatic instance() {\n\t\treturn (this._instance = this._instance || new Poly());\n\t}\n\tprivate constructor() {}\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tthis.nodes_register.register_node(node, tab_menu_category, options);\n\t}\n\tregistered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass> {\n\t\treturn this.nodes_register.registered_nodes(parent_context, type);\n\t}\n\tin_worker_thread() {\n\t\treturn false;\n\t}\n\tdesktop_controller(): any {}\n\t// notify_scene_loaded(scene: PolyScene) {}\n\n\tplayer_mode(): boolean {\n\t\treturn false;\n\t}\n\n\tlog(...args: any[]) {\n\t\tconsole.log(...args);\n\t}\n\tset_env(env: string) {\n\t\tthis._env = env;\n\t}\n\tget env() {\n\t\treturn this._env;\n\t}\n}\n\n// declare global {\n// \tconst POLY: Poly;\n// }\n\n// declare global {\n// \tinterface Window {\n// \t\tPOLY: Poly;\n// \t}\n// }\n// make sure not to have library: 'POLY' in webpack for this to work\nexport const POLY = Poly.instance();\n","import {CoreGraph, CoreGraphNodeId} from './CoreGraph';\nimport {DirtyController, PostDirtyHook} from './DirtyController';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class CoreGraphNode {\n\t// protected _scene: PolyScene;\n\tprivate _graph: CoreGraph;\n\tprivate _graph_node_id: CoreGraphNodeId;\n\tprivate _dirty_controller: DirtyController = new DirtyController(this);\n\t// protected _name: string;\n\tconstructor(protected _scene: PolyScene, protected _name: string) {\n\t\t// super(...args);\n\t\tthis._graph_node_id = _scene.graph.next_id();\n\t\t_scene.graph.setNode(this);\n\t\tthis._graph = _scene.graph;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset_name(name: string) {\n\t\tthis._name = name;\n\t}\n\t// set_scene(scene: PolyScene) {\n\t// \tthis._scene = scene;\n\t// \t// this._graph_node = new CoreGraphNode();\n\t// \t// this._graph_node.init(this._scene.graph);\n\t// \tthis._graph = scene.graph;\n\t// \tthis._graph_node_id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// init(graph: CoreGraph) {\n\t// \tthis._graph = graph;\n\t// \tthis._id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// full_path: ->\n\t// \t\"node with unknown path #{this.graph_node_id}\"\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\tget graph_node_id(): CoreGraphNodeId {\n\t\treturn this._graph_node_id;\n\t}\n\n\t//\n\t//\n\t// DIRTY CONTROLLER\n\t//\n\t//\n\tget dirty_controller() {\n\t\treturn this._dirty_controller;\n\t}\n\tset_dirty(trigger?: CoreGraphNode | null) {\n\t\ttrigger = trigger || this;\n\t\tthis._dirty_controller.set_dirty(trigger);\n\t}\n\tset_successors_dirty(trigger?: CoreGraphNode) {\n\t\tthis._dirty_controller.set_successors_dirty(trigger);\n\t}\n\tremove_dirty_state() {\n\t\tthis._dirty_controller.remove_dirty_state();\n\t}\n\tget is_dirty() {\n\t\treturn this._dirty_controller.is_dirty;\n\t}\n\tadd_post_dirty_hook(name: string, callback: PostDirtyHook) {\n\t\tthis._dirty_controller.add_post_dirty_hook(name, callback);\n\t}\n\n\t//\n\t//\n\t// GRAPH\n\t//\n\t//\n\n\t// private graph_add() {\n\t// }\n\tgraph_remove() {\n\t\tthis.graph.removeNode(this);\n\t}\n\n\t// _graph_connect: (src, dest)->\n\t// \tthis.graph().connect(src, dest)\n\tadd_graph_input(src: CoreGraphNode): boolean {\n\t\treturn this.graph.connect(src, this);\n\t}\n\tremove_graph_input(src: CoreGraphNode) {\n\t\tthis.graph.disconnect(src, this);\n\t}\n\n\t// graph_disconnect: (src, dest)->\n\t// \tthis.graph().disconnect(src, dest)\n\n\tgraph_disconnect_predecessors() {\n\t\tthis.graph.disconnect_predecessors(this);\n\t}\n\tgraph_disconnect_successors() {\n\t\tthis.graph.disconnect_successors(this);\n\t}\n\n\tgraph_predecessor_ids(): CoreGraphNodeId[] {\n\t\treturn this.graph.predecessor_ids(this._graph_node_id) || [];\n\t}\n\tgraph_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.predecessors(this);\n\t}\n\tgraph_successors(): CoreGraphNode[] {\n\t\treturn this.graph.successors(this);\n\t}\n\tgraph_all_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.all_predecessors(this);\n\t}\n\tgraph_all_successors(): CoreGraphNode[] {\n\t\treturn this.graph.all_successors(this);\n\t}\n}\n","import {TypedNode} from '../_Base';\n\nimport {Material} from 'three/src/materials/Material';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {MaterialContainer} from '../../containers/Material';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// type RenderHook = (object: Object3D) => void;\n\nexport abstract class TypedMatNode<M extends Material, K extends NodeParamsConfig> extends TypedNode<\n\t'MATERIAL',\n\tBaseMatNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<MaterialContainer> = new TypedContainerController<MaterialContainer>(\n\t\tthis,\n\t\tMaterialContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MAT;\n\t}\n\n\tprotected _material: M | undefined;\n\t// protected _update_methods: RenderHook[] = [];\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this._update_methods = [];\n\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_outputs({has_outputs: false});\n\n\t\t// this.container_controller.init(MaterialContainer);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_material_name.bind(this));\n\n\t\tthis.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\n\t\t// it's probably good not to have to create any material in the constructor\n\t\t// but only on request\n\t\t// this._material = this.create_material();\n\t\t// this.set_material(this._material);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t}\n\n\tprivate set_material_name() {\n\t\t// ensures the material has a full path set\n\t\t// allowing the render hook to be set\n\t\t//this.set_material(@_material)\n\t\tif (this._material) {\n\t\t\tthis._material.name = this.full_path();\n\t\t}\n\t}\n\n\tabstract create_material(): M;\n\tget material() {\n\t\treturn (this._material = this._material || this.create_material());\n\t}\n\t//\n\n\tset_material(material: Material) {\n\t\tthis.set_container(material);\n\t}\n\n\t// add_update_method(method, arg?: any) {\n\t// \tthis._update_methods.push([method.bind(this), arg]);\n\t// }\n\n\t//run_update_methods: ->\n\n\tadd_render_hook(object: Object3D) {}\n}\n//delete object.onBeforeRender\n\nexport type BaseMatNodeType = TypedMatNode<Material, any>;\nexport class BaseMatNodeClass extends TypedMatNode<Material, any> {\n\tcreate_material() {\n\t\treturn new Material();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {Object3D} from 'three/src/core/Object3D';\n\nimport {TypedNode, BaseNodeType} from '../_Base';\n// import {BaseSopNode} from '../sop/_Base';\n// import {LookAt} from './Concerns/LookAt';\nimport {ObjectContainer} from '../../containers/Object';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {ObjectsManagerNode} from '../manager/ObjectsManager';\nimport {Group} from 'three/src/objects/Group';\n\nconst INPUT_OBJECT_NAME = 'parent object';\nconst DEFAULT_INPUT_NAMES = [INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME];\n\ninterface Object3DWithNode extends Object3D {\n\tnode: BaseNodeType;\n}\n// interface BaseObjNodeVisitor extends BaseNodeVisitor {\n// \tvisit_node_obj: (node: BaseObjNodeType) => any;\n// }\n\nexport enum ObjNodeRenderOrder {\n\tMANAGER = 0,\n\tFOG = 1,\n\tCAMERA = 2,\n\tLIGHT = 3,\n\tEVENT = 4,\n\tMAT = 5,\n}\n\nexport class TypedObjNode<O extends Object3D, K extends NodeParamsConfig> extends TypedNode<\n\t'OBJECT',\n\tBaseObjNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<ObjectContainer> = new TypedContainerController<ObjectContainer>(\n\t\tthis,\n\t\tObjectContainer\n\t);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = true;\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.OBJ;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// protected _main_group = new Group();\n\tprotected _children_group = new Group();\n\tprotected _object!: O;\n\t// _sop_loaded: boolean = false;\n\n\t// protected _look_at_controller: LookAtController | undefined;\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\t// protected _transform_controller: TransformController | undefined;\n\t// get transform_controller(): TransformController {\n\t// \treturn (this._transform_controller = this._transform_controller || new TransformController(this));\n\t// }\n\n\tprotected _attachable_to_hierarchy: boolean = true;\n\tget attachable_to_hierarchy() {\n\t\treturn this._attachable_to_hierarchy;\n\t}\n\tprotected _used_in_scene: boolean = true;\n\tget used_in_scene() {\n\t\treturn this._used_in_scene;\n\t}\n\t// TODO call set_used_in_scene(false) when node is deleted\n\tset_used_in_scene(state: boolean) {\n\t\tthis._used_in_scene = state;\n\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\tconst root = this.parent as ObjectsManagerNode;\n\t\t\tif (root) {\n\t\t\t\troot.update_object(this);\n\t\t\t}\n\t\t}\n\t}\n\tadd_object_to_parent(parent: Object3D) {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tparent.add(this.object);\n\t\t}\n\t}\n\tremove_object_from_parent() {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tconst parent = this.object.parent;\n\t\t\tif (parent) {\n\t\t\t\tparent.remove(this.object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _displayed_in_scene: boolean = true;\n\t// get displayed_in_scene() {\n\t// \treturn this._displayed_in_scene;\n\t// }\n\t// set_displayed_in_scene(state:boolean){\n\t// \tthis._displayed_in_scene = state;\n\t// }\n\n\tinitialize_base_node() {\n\t\t// this.container_controller.init(ObjectContainer);\n\t\tthis._object = this._create_object_with_attributes();\n\t\t// this._init_container_owner('Object');\n\t\t// this.flags.add_display();\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_object_name.bind(this));\n\t\tthis.set_object_name();\n\n\t\t// this.io.inputs.add_hook(() => {\n\t\t// \tthis.transform_controller.on_input_updated();\n\t\t// });\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\n\t\t// this._sop_loaded = false; // TODO: typescript, this should be moved to GeoObjNode\n\t}\n\n\t// this.add_param 'toggle', 'display', 1,\n\t// \tcallback: this.post_state_display_flag.bind(this)\n\n\t// cook: ->\n\t// \tsuper\n\t// \tconsole.error(this.constructor, 'cook method is not overloaded')\n\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t// \t#console.log(\"#{this.full_path()} set dirty by #{original_trigger_graph_node?.full_path()} and #{direct_trigger_graph_node?.full_path()}\")\n\t// \tthis.is_displayed (is_displayed)=>\n\t// \t\tif is_displayed\n\t// \t\t\tthis.parent().update_object(this)\n\n\t//post_remove_dirty_state: ->\n\t//console.log(\"obj #{this.full_path()} remove dirty\")\n\t//console.log(\"remove_dirty_state: #{this.full_path()}\")\n\n\t// set_object: (object)->\n\n\t// \tif object?\n\t// \t\tobject.name = this.name()\n\t// \t\tthis.set_container(object)\n\t// get main_group() {\n\t// \treturn this._main_group;\n\t// }\n\tget children_group() {\n\t\treturn this._children_group;\n\t}\n\tget object() {\n\t\treturn this._object; //= this._object || this._create_object_with_attributes()\n\t}\n\n\t_create_object_with_attributes(): O {\n\t\tconst object = this.create_object();\n\t\t// object.name = 'content';\n\t\t// if (object != null) {\n\t\t// \tobject.name = this.full_path();\n\t\t(object as Object3DWithNode).node = this;\n\t\t// }\n\t\t// this._main_group.add(this._children_group);\n\t\tobject.add(this._children_group);\n\t\treturn object as O;\n\t}\n\tprivate set_object_name() {\n\t\tif (this._object) {\n\t\t\tthis._object.name = this.full_path();\n\t\t\tthis._children_group.name = `${this.full_path()}:parented_outputs`;\n\t\t}\n\t}\n\t// private set_group_name() {\n\t// \t// ensures the material has a full path set\n\t// \t// allowing the render hook to be set\n\t// \t//this.set_material(@_material)\n\t// \tconst group = this.group;\n\t// \tif (group) {\n\t// \t\tgroup.name = this.full_path();\n\t// \t}\n\t// }\n\n\tcreate_object(): Object3D {\n\t\treturn new Object3D();\n\t}\n\n\t// request_display_node() {}\n\n\tis_display_node_cooking(): boolean {\n\t\treturn false;\n\t}\n\n\t// post_state_display_flag() {\n\t// \tconst object = this.object;\n\t// \tif (object != null) {\n\t// \t\tconst displayed = this.is_displayed();\n\t// \t\tif (displayed) {\n\t// \t\t\tobject.visible = displayed;\n\n\t// \t\t\tif (!this._sop_loaded) {\n\t// \t\t\t\tthis.request_display_node();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_displayed(): boolean {\n\t\treturn this.flags?.display?.active || false;\n\t\t// if (callback == null) {\n\t\t// \tthrow 'no callback given to is_displayed';\n\t\t// }\n\n\t\t// const display_flag_state = this.display_flag_state();\n\t\t// return callback(display_flag_state);\n\t}\n\t// if !display_flag_state\n\t// \tcallback(false)\n\n\t// else\n\t// \tthis.param('display').eval (val)->\n\t// \t\tcallback(val)\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node_obj']> {\n\t// \treturn visitor.visit_node_obj(this);\n\t// }\n\n\t// replaces Dirtyable (TODO: try and replace this method name)\n\t// protected _init_dirtyable_hook() {\n\t// this.add_post_dirty_hook(this._cook_main_without_inputs_later.bind(this));\n\t// }\n\t// private _cook_main_without_inputs_later() {\n\t// \tconst c = () => {\n\t// \t\tthis.cook_controller.cook_main_without_inputs();\n\t// \t};\n\t// \tsetTimeout(c, 0);\n\t// \t// this.eval_all_params().then( ()=>{ this.cook() } )\n\t// }\n}\n\nexport type BaseObjNodeType = TypedObjNode<Object3D, any>;\nexport class BaseObjNodeClass extends TypedObjNode<Object3D, any> {}\n","import {Euler} from 'three/src/math/Euler';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\n\n// import {Object3D} from 'three/src/core/Object3D';\n// import {BaseTransformedObjNodeType} from '../_BaseTransformed';\nimport {CoreMath} from '../../../../core/math/_Module';\nimport {CoreTransform, SetParamsFromMatrixOptions} from '../../../../core/Transform';\n// import {BaseObjNodeType} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\nimport {TypedObjNode, BaseObjNodeType} from '../_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {FlagsControllerD} from '../../utils/FlagsController';\n// import {LookAtController} from './LookAtController';\nexport function TransformedParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttransform = ParamConfig.FOLDER();\n\t\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\t\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\t\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\t\tscale = ParamConfig.FLOAT(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('', {node_selection: {context: NodeContext.OBJ}});\n\t\t// up = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// pivot = ParamConfig.VECTOR3([0, 0, 0]);\n\t};\n}\nclass TransformedParamsConfig extends TransformedParamConfig(NodeParamsConfig) {}\nexport class TransformedObjNode extends TypedObjNode<Object3D, TransformedParamsConfig> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\t// get transform_controller(): TransformController {\n\t// \treturn this._transform_controller; // = this._transform_controller || new TransformController(this));\n\t// }\n}\n\nexport class TransformController {\n\tconstructor(private node: TransformedObjNode) {}\n\n\t// protected _look_at_controller = new LookAtController(this.node);\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\n\tinitialize_node() {\n\t\t// not sure we should change if it is used in the scene, as parented children may still be\n\t\t// this.node.flags.display.add_hook(() => {\n\t\t// \t// this.node.set_used_in_scene(this.node.flags.display.active || false);\n\t\t// \tthis.node.object.visible = this.node.flags.display.active;\n\t\t// });\n\t\t// this.node.set_used_in_scene(true);\n\n\t\tthis.node.io.inputs.set_count(0, 1);\n\t\tthis.node.io.inputs.set_depends_on_inputs(false);\n\t\tthis.node.io.outputs.set_has_one_output();\n\t\tthis.node.io.inputs.add_on_set_input_hook('on_input_updated', () => {\n\t\t\tthis.on_input_updated();\n\t\t});\n\n\t\tconst hook_name = '_cook_main_without_inputs_when_dirty';\n\t\tif (!this.node.dirty_controller.has_hook(hook_name)) {\n\t\t\tthis.node.dirty_controller.add_post_dirty_hook(hook_name, this._cook_main_without_inputs_when_dirty_bound);\n\t\t}\n\t}\n\t// TODO: this will have to be checked via the parent, when I will have obj managers at lower levels than root\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.node.used_in_scene) {\n\t\tawait this.node.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\n\tstatic on_input_updated(node: BaseObjNodeType) {\n\t\tif (node.io.inputs.input(0) != null) {\n\t\t\tnode.root.add_to_parent_transform(node);\n\t\t} else {\n\t\t\tnode.root.remove_from_parent_transform(node);\n\t\t}\n\t}\n\ton_input_updated() {\n\t\tTransformController.on_input_updated(this.node);\n\t}\n\n\tupdate(matrix?: Matrix4) {\n\t\t// const object = this.node.object;\n\t\t// const update_full_matrix = false; // if true the camera controls do not work anymore\n\t\t//matrix = Core.Transform.matrix_from_node_with_transform_params(this)\n\n\t\t// if (object) {\n\t\t// if update_full_matrix\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\n\t\t// if (this._look_at_controller.active == true) {\n\t\t// \treturn this._look_at_controller.compute(); //this._use_look_at_param();\n\t\t// } else {\n\t\tthis.update_transform_with_matrix(matrix);\n\t\t// }\n\t\t// if matrix?\n\t\t// \t# do not apply to cameras with control\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\t\t// \tthis.update_transform_from_params()\n\t\t// } else {\n\t\t// \tconsole.warn(`no object to update for ${this.node.full_path()}`);\n\t\t// \t// return false;\n\t\t// }\n\t}\n\n\tupdate_transform_with_matrix(matrix?: Matrix4) {\n\t\t//console.warn \"no object to update for #{this.full_path()}\"\n\t\tconst object = this.node.object;\n\t\t//matrix ?= Core.Transform.matrix_from_node_with_transform_params(this)\n\t\tif (matrix != null && !matrix.equals(object.matrix)) {\n\t\t\t// do not apply to cameras with control\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.matrix = matrix;\n\n\t\t\treturn object.dispatchEvent({type: 'change'});\n\t\t} else {\n\t\t\treturn this.update_transform_from_params();\n\t\t}\n\t}\n\n\tprivate _update_transform_from_params_scale = new Vector3();\n\tupdate_transform_from_params() {\n\t\tconst object = this.node.object;\n\t\tif (object) {\n\t\t\tconst position: Vector3 = this.node.pv.t;\n\t\t\t//quaternion = new Quaternion()\n\t\t\tconst rotation: Vector3 = this.node.pv.r;\n\n\t\t\tthis._update_transform_from_params_scale.copy(this.node.pv.s).multiplyScalar(this.node.pv.scale);\n\t\t\t// const scale: Vector3 = this.node.pv.s\n\t\t\t// \t.clone()\n\t\t\t// \t.multiplyScalar(this.node.pv.scale);\n\t\t\t//matrix.decompose( position, quaternion, scale )\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.position.copy(position);\n\t\t\t//object.quaternion.copy(quaternion)\n\t\t\tconst radians = [\n\t\t\t\tCoreMath.degrees_to_radians(rotation.x),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.y),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.z),\n\t\t\t];\n\t\t\tconst euler = new Euler(\n\t\t\t\tradians[0],\n\t\t\t\tradians[1],\n\t\t\t\tradians[2]\n\t\t\t\t//'XYZ'\n\t\t\t);\n\t\t\tobject.rotation.copy(euler);\n\t\t\tobject.scale.copy(this._update_transform_from_params_scale);\n\t\t\tobject.matrixAutoUpdate = true;\n\t\t\tobject.updateMatrix();\n\n\t\t\tobject.dispatchEvent({type: 'change'});\n\t\t}\n\t}\n\n\tset_params_from_matrix(matrix: Matrix4, options: SetParamsFromMatrixOptions = {}) {\n\t\tCoreTransform.set_params_from_matrix(matrix, this.node, options);\n\t}\n}\n","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {DecomposedPath} from './DecomposedPath';\n// import {NodeSimple} from '/graph/NodeSimple'\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class CoreWalker {\n\tpublic static readonly SEPARATOR = '/';\n\tpublic static readonly DOT = '.';\n\tpublic static readonly CURRENT = CoreWalker.DOT;\n\tpublic static readonly PARENT = '..';\n\tpublic static readonly CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;\n\tpublic static readonly PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;\n\tpublic static readonly NON_LETTER_PREFIXES = [CoreWalker.SEPARATOR, CoreWalker.DOT];\n\n\tstatic find_node(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements: string[] = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);\n\t\tconst first_element = elements[0];\n\n\t\tlet next_node: BaseNodeType | null = null;\n\t\tif (path[0] === CoreWalker.SEPARATOR) {\n\t\t\tconst path_from_root = path.substr(1);\n\t\t\tnext_node = this.find_node(node_src.root, path_from_root, decomposed_path);\n\t\t} else {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase CoreWalker.PARENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src.parent;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreWalker.CURRENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: What does .node means?? in which case is this not a node? (it is for nodes which cannot have children - but I'd like to unify the api)\n\t\t\t\t\t// console.error(\"rethink this method Walker.find_node\")\n\t\t\t\t\t// if (node_src.node != null) {\n\t\t\t\t\tnext_node = node_src.node(first_element);\n\t\t\t\t\tif (next_node) {\n\t\t\t\t\t\tdecomposed_path?.add_node(first_element, next_node);\n\t\t\t\t\t}\n\n\t\t\t\t// if (next_node == null) { this.find_node_warning(node_src, first_element); }\n\t\t\t\t// return next_node;\n\t\t\t\t// break\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\tif (next_node != null && elements.length > 1) {\n\t\t\t\tconst remainder = elements.slice(1).join(CoreWalker.SEPARATOR);\n\t\t\t\tnext_node = this.find_node(next_node, remainder, decomposed_path);\n\t\t\t}\n\t\t\treturn next_node;\n\t\t}\n\n\t\treturn next_node;\n\t}\n\n\tstatic find_param(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = path.split(CoreWalker.SEPARATOR);\n\n\t\tif (elements.length === 1) {\n\t\t\treturn node_src.params.get(elements[0]);\n\t\t} else {\n\t\t\tconst node_path = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);\n\t\t\tconst node = this.find_node(node_src, node_path, decomposed_path);\n\t\t\tif (node != null) {\n\t\t\t\tconst param_name = elements[elements.length - 1];\n\t\t\t\tconst param = node.params.get(param_name);\n\t\t\t\tif (decomposed_path && param) {\n\t\t\t\t\tdecomposed_path.add_node(param_name, param);\n\t\t\t\t}\n\t\t\t\treturn param;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t\t// throw `no node found for path ${node_path}`;\n\t\t\t}\n\t\t}\n\t}\n\tstatic relative_path(src_graph_node: Readonly<NodeOrParam>, dest_graph_node: Readonly<NodeOrParam>): string {\n\t\tconst parent = this.closest_common_parent(src_graph_node, dest_graph_node);\n\t\tif (!parent) {\n\t\t\treturn dest_graph_node.full_path();\n\t\t} else {\n\t\t\tconst distance = this.distance_to_parent(src_graph_node, parent);\n\t\t\t// const up = lodash_padStart(\"\", (distance-1)*3, \"../\")\n\t\t\tlet up = '';\n\t\t\tif (distance - 1 > 0) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst ups = [];\n\t\t\t\twhile (i++ < distance - 1) {\n\t\t\t\t\tups.push(CoreWalker.PARENT);\n\t\t\t\t}\n\t\t\t\tup = ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;\n\t\t\t}\n\n\t\t\tconst parent_path_elements = parent\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst dest_path_elements = dest_graph_node\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst remaining_elements = [];\n\t\t\tlet cmptr = 0;\n\t\t\tfor (let dest_path_element of dest_path_elements) {\n\t\t\t\tif (!parent_path_elements[cmptr]) {\n\t\t\t\t\tremaining_elements.push(dest_path_element);\n\t\t\t\t}\n\t\t\t\tcmptr++;\n\t\t\t}\n\t\t\tconst down = remaining_elements.join(CoreWalker.SEPARATOR);\n\t\t\treturn `${up}${down}`;\n\t\t}\n\t}\n\n\tstatic closest_common_parent(\n\t\tgraph_node1: Readonly<NodeOrParam>,\n\t\tgraph_node2: Readonly<NodeOrParam>\n\t): BaseNodeType | null {\n\t\tconst parents1 = this.parents(graph_node1).reverse();\n\t\tconst parents2 = this.parents(graph_node2).reverse();\n\n\t\tconst min_depth = Math.min(parents1.length, parents2.length);\n\t\tlet found_parent = null;\n\n\t\tfor (let i = 0; i < min_depth; i++) {\n\t\t\tif (parents1[i].graph_node_id == parents2[i].graph_node_id) {\n\t\t\t\tfound_parent = parents1[i];\n\t\t\t}\n\t\t}\n\t\treturn found_parent;\n\t}\n\tstatic parents(graph_node: Readonly<NodeOrParam>): BaseNodeType[] {\n\t\tconst parents = [];\n\t\tlet parent = graph_node.parent;\n\t\twhile (parent) {\n\t\t\tparents.push(parent);\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn parents;\n\t}\n\tstatic distance_to_parent(graph_node: Readonly<NodeOrParam>, dest: Readonly<BaseNodeType>): number {\n\t\tlet distance = 0;\n\t\tlet current: Readonly<NodeOrParam | null> = graph_node;\n\t\tconst dest_id = dest.graph_node_id;\n\t\twhile (current && current.graph_node_id != dest_id) {\n\t\t\tdistance += 1;\n\t\t\tcurrent = current.parent;\n\t\t}\n\t\tif (current && current.graph_node_id == dest_id) {\n\t\t\treturn distance;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tstatic make_absolute_path(node_src: BaseNodeType | BaseParamType, path: string): string | null {\n\t\tconst path_elements = path.split(CoreWalker.SEPARATOR);\n\t\tconst first_element = path_elements.shift();\n\n\t\tif (first_element) {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase '..': {\n\t\t\t\t\tif (node_src.parent) {\n\t\t\t\t\t\treturn this.make_absolute_path(node_src.parent, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase '.': {\n\t\t\t\t\treturn this.make_absolute_path(node_src, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn [node_src.full_path(), path].join(CoreWalker.SEPARATOR);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn node_src.full_path();\n\t\t}\n\t}\n}\n","import {PolyScene} from '../scene/PolyScene';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\n\n// import {BaseParam} from '../params/_Base';\n// import {GeometryContainer} from '../containers/Geometry';\n// import {UIData} from './UIData';\n\n// import {Bypass} from './concerns/Bypass';\n// import {ConnectionsOwner} from './concerns/ConnectionsOwner';\n// import {ContainerOwner} from './concerns/ContainerOwner';\n// import {Cook} from './concerns/Cook';\n// import {CustomNode} from './concerns/CustomNode';\n// import {Dependencies} from './concerns/old/Dependencies';\n// import {DisplayFlag} from './concerns/DisplayFlag';\n// import {Errored} from './concerns/Errored';\n// import {HierarchyChildrenOwner} from './concerns/HierarchyChildrenOwner';\n// import {HierarchyParentOwner} from './concerns/old/HierarchyParentOwner';\n// import {InputsClonable} from './concerns/InputsClonable';\n// import {InputsOwner} from './concerns/InputsOwner';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/old/LifeCycle';\n// import {Named} from './concerns/Named';\n// import {OutputsOwner} from './concerns/OutputsOwner';\n// import {ParamsOwner} from './concerns/ParamsOwner';\n// import {Selectable} from './concerns/old/Selectable';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {Visit} from './concerns/Visit';\n\nimport {UIData} from './utils/UIData';\nimport {FlagsController} from './utils/FlagsController';\nimport {StatesController} from './utils/StatesController';\nimport {HierarchyParentController} from './utils/hierarchy/ParentController';\nimport {HierarchyChildrenController} from './utils/hierarchy/ChildrenController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {TypedContainerController} from './utils/ContainerController';\nimport {CookController} from './utils/CookController';\nimport {DependenciesController} from './utils/DependenciesController';\nimport {NameController} from './utils/NameController';\nimport {NodeSerializer, NodeSerializerData} from './utils/Serializer';\nimport {ParamsController} from './utils/params/ParamsController';\nimport {ParamConstructorMap} from '../params/types/ParamConstructorMap';\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\n\nimport {NodeParamsConfig} from './utils/params/ParamsConfig';\nimport {ParamsValueAccessor, ParamsValueAccessorType} from './utils/params/ParamsValueAccessor';\nimport {ProcessingContext} from './utils/ProcessingContext';\nimport {IOController} from './utils/connections/IOController';\n\n// import {BaseContainer} from '../containers/_Base';\n\n// import {BaseParam} from '../params/_Base';\n// import {BooleanParam} from '../params/Boolean';\n// import {ButtonParam} from '../params/Button';\n// import {ColorParam} from '../params/Color';\n// import {FloatParam} from '../params/Float';\n// import {IntegerParam} from '../params/Integer';\n// import {OperatorPathParam} from '../params/OperatorPath';\n// import {RampParam} from '../params/Ramp';\n// import {SeparatorParam} from '../params/Separator';\n// import {StringParam} from '../params/String';\n// import {Vector2Param} from '../params/Vector2';\n// import {Vector3Param} from '../params/Vector3';\n// import {Vector4Param} from '../params/Vector4';\nimport {NodeEvent} from '../poly/NodeEvent';\nimport {NodeContext} from '../poly/NodeContext';\n\n// import {TypedContainer} from '../containers/_Base';\nimport {ParamsAccessorType, ParamsAccessor} from './utils/params/ParamsAccessor';\n\nexport interface NodeVisitor {\n\tvisit_node: (node: BaseNodeType) => any;\n\tvisit_node_obj: (node: BaseNodeType) => any;\n}\n\ninterface NodeDeletedEmitData {\n\tparent_id: string;\n}\ninterface NodeCreatedEmitData {\n\tchild_node_json: NodeSerializerData;\n}\ntype EmitDataByNodeEventMapGeneric = {[key in NodeEvent]: any};\nexport interface EmitDataByNodeEventMap extends EmitDataByNodeEventMapGeneric {\n\t[NodeEvent.CREATED]: NodeCreatedEmitData;\n\t[NodeEvent.DELETED]: NodeDeletedEmitData;\n\t[NodeEvent.ERROR_UPDATED]: undefined;\n}\n// emit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n// \temit(event_name: NodeEvent.DELETED, data: NodeDeletedEmitData): void;\n// \temit(event_name: NodeEvent.NAME_UPDATED): void;\n// \temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n// \temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n// \temit(event_name: NodeEvent.ERROR_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n// \temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\nimport {ContainerMap} from '../containers/utils/ContainerMap';\nimport {ContainableMap} from '../containers/utils/ContainableMap';\nimport {BaseContainer} from '../containers/_Base';\nimport {ParamOptions} from '../params/utils/OptionsController';\nimport {ParamType} from '../poly/ParamType';\nimport {DisplayNodeController} from './utils/DisplayNodeController';\n\n// type Container = ContainerMap[KT];\ntype KT = keyof ContainerMap;\nexport class TypedNode<T extends KT, NT extends BaseNodeType, K extends NodeParamsConfig> extends CoreGraphNode {\n\tcontainer_controller: TypedContainerController<ContainerMap[T]> = new TypedContainerController<ContainerMap[T]>(\n\t\tthis,\n\t\tBaseContainer\n\t);\n\n\tprivate _parent_controller: HierarchyParentController | undefined;\n\n\tprivate _ui_data: UIData | undefined;\n\n\tprivate _dependencies_controller: DependenciesController | undefined;\n\tprivate _states: StatesController | undefined;\n\tprivate _lifecycle: LifeCycleController | undefined;\n\tprivate _serializer: NodeSerializer | undefined;\n\tprivate _cook_controller: CookController | undefined;\n\tpublic readonly flags: FlagsController | undefined;\n\tprotected _display_node_controller: DisplayNodeController | undefined;\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\n\tprivate _params_controller: ParamsController | undefined;\n\treadonly params_config: K | undefined;\n\treadonly pv: ParamsValueAccessorType<K> = (<unknown>new ParamsValueAccessor<K>()) as ParamsValueAccessorType<K>;\n\t// readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n\treadonly p: ParamsAccessorType<K> = (<unknown>new ParamsAccessor<K>()) as ParamsAccessorType<K>;\n\t// readonly p: ParamsAccessor<K> = new ParamsAccessor<K>(this);\n\n\tprivate _processing_context: ProcessingContext | undefined;\n\tprivate _name_controller: NameController | undefined;\n\tprivate _io: IOController<NT> | undefined;\n\tget parent_controller(): HierarchyParentController {\n\t\treturn (this._parent_controller = this._parent_controller || new HierarchyParentController(this));\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate _children_controller: HierarchyChildrenController | undefined;\n\tprotected _children_controller_context: NodeContext | undefined;\n\tget children_controller_context() {\n\t\treturn this._children_controller_context;\n\t}\n\tprivate _create_children_controller(): HierarchyChildrenController | undefined {\n\t\tif (this._children_controller_context) {\n\t\t\treturn new HierarchyChildrenController(this, this._children_controller_context);\n\t\t}\n\t}\n\tget children_controller(): HierarchyChildrenController | undefined {\n\t\treturn (this._children_controller = this._children_controller || this._create_children_controller());\n\t}\n\tchildren_allowed(): boolean {\n\t\treturn this._children_controller_context != null;\n\t}\n\n\tget ui_data(): UIData {\n\t\treturn (this._ui_data = this._ui_data || new UIData(this));\n\t}\n\tget dependencies_controller(): DependenciesController {\n\t\treturn (this._dependencies_controller = this._dependencies_controller || new DependenciesController(this));\n\t}\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\tget lifecycle(): LifeCycleController {\n\t\treturn (this._lifecycle = this._lifecycle || new LifeCycleController(this));\n\t}\n\tget serializer(): NodeSerializer {\n\t\treturn (this._serializer = this._serializer || new NodeSerializer(this));\n\t}\n\t// get container_controller(): TypedContainerController<T> {\n\t// \treturn (this._container_controller = this._container_controller || new TypedContainerController<T>(this));\n\t// }\n\tget cook_controller(): CookController {\n\t\treturn (this._cook_controller = this._cook_controller || new CookController(this));\n\t}\n\tget io(): IOController<NT> {\n\t\treturn (this._io = this._io || new IOController<NT>((<unknown>this) as NT));\n\t}\n\tget name_controller(): NameController {\n\t\treturn (this._name_controller = this._name_controller || new NameController(this));\n\t}\n\tset_name(name: string) {\n\t\tthis.name_controller.set_name(name);\n\t}\n\t_set_core_name(name: string) {\n\t\tthis._name = name;\n\t}\n\tget params(): ParamsController {\n\t\treturn (this._params_controller = this._params_controller || new ParamsController(this));\n\t}\n\tget processing_context(): ProcessingContext {\n\t\treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n\t}\n\n\tconstructor(scene: PolyScene, name: string = 'BaseNode') {\n\t\tsuper(scene, name);\n\t}\n\n\tprivate _initialized: boolean = false;\n\tpublic initialize_base_and_node() {\n\t\tif (!this._initialized) {\n\t\t\tthis.initialize_base_node(); // for base classes of Sop, Obj...\n\t\t\tthis.initialize_node(); // for Derivated node clases, like BoxSop, TransformSop...\n\t\t\tthis._initialized = true;\n\t\t} else {\n\t\t\tconsole.warn('node already initialized');\n\t\t}\n\t}\n\tprotected initialize_base_node() {}\n\tprotected initialize_node() {}\n\t// constructor() {\n\t// \tsuper('base_node');\n\n\t// \t// this._init_node_scene()\n\t// \t// this._init_context_owner()\n\t// \t// this._init_dirtyable()\n\t// \t// this._init_graph_node()\n\n\t// \t// this._init_bypass_flag();\n\t// \t// this._init_display_flag();\n\t// \t//this._init_context()\n\t// \t// this._init_cook();\n\t// \t// this._init_error();\n\t// \t// this._init_inputs();\n\t// \t// this._init_outputs();\n\t// \t// this._init_hierarchy_parent_owner();\n\t// \t//this._init_time_dependent()\n\t// \t// this._init_ui_data();\n\t// }\n\tstatic type(): string {\n\t\tthrow 'type to be overriden';\n\t}\n\tget type() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.type();\n\t}\n\tstatic node_context(): NodeContext {\n\t\tthrow 'requires override';\n\t}\n\tnode_context(): NodeContext {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.node_context();\n\t}\n\n\tstatic required_three_imports(): string[] {\n\t\treturn [];\n\t}\n\tstatic required_imports() {\n\t\tlet three_imports = this.required_three_imports();\n\t\tif (three_imports) {\n\t\t\t// if (!lodash_isArray(three_imports)) {\n\t\t\t// \tthree_imports = [<unknown>three_imports as string];\n\t\t\t// }\n\t\t\treturn three_imports.map((e) => `three/examples/jsm/${e}`);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\trequired_imports() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.required_imports();\n\t}\n\tstatic require_webgl2(): boolean {\n\t\treturn false;\n\t}\n\trequire_webgl2(): boolean {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.require_webgl2();\n\t}\n\n\t// set_scene(scene: PolyScene) {\n\t// \tsuper.set_scene(scene);\n\t// \t// this.io.inputs._init_graph_node_inputs();\n\t// }\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node']> {\n\t// \treturn visitor.visit_node(this);\n\t// }\n\tset_parent(parent: BaseNodeType | null) {\n\t\tthis.parent_controller.set_parent(parent);\n\t}\n\tget parent() {\n\t\treturn this.parent_controller.parent;\n\t}\n\tget root() {\n\t\treturn this._scene.root;\n\t}\n\tfull_path(): string {\n\t\treturn this.parent_controller.full_path();\n\t}\n\n\t// params\n\tcreate_params() {}\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\toptions?: ParamOptions\n\t): ParamConstructorMap[T] | undefined {\n\t\treturn this._params_controller?.add_param(type, name, default_value, options);\n\t}\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tthis._params_controller?.within_param_folder(folder_name, callback);\n\t// }\n\n\t// cook\n\tcook(input_contents: any[]): any {\n\t\treturn null;\n\t}\n\n\t// container\n\tasync request_container() {\n\t\treturn await this.container_controller.request_container();\n\t}\n\tset_container(content: ContainableMap[T], message: string | null = null) {\n\t\t// if message?\n\t\t// TODO: typescript: why is this a type of never\n\t\tthis.container_controller.container.set_content(content as never); //, this.self.cook_eval_key());\n\t\tif (content != null) {\n\t\t\tif (!(content as any).name) {\n\t\t\t\t(content as any).name = this.full_path();\n\t\t\t}\n\t\t\tif (!(content as any).node) {\n\t\t\t\t(content as any).node = this;\n\t\t\t}\n\t\t}\n\t\t//if @_container.has_content()?\n\t\tthis.cook_controller.end_cook(message);\n\t}\n\n\t// hierarchy\n\tcreate_node(type: string) {\n\t\treturn this.children_controller?.create_node(type);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis.children_controller?.remove_node(node);\n\t}\n\tchildren() {\n\t\treturn this.children_controller?.children() || [];\n\t}\n\tnode(path: string) {\n\t\treturn this.children_controller?.find_node(path) || null;\n\t}\n\tnodes_by_type(type: string) {\n\t\treturn this.children_controller?.nodes_by_type(type) || [];\n\t}\n\n\t// inputs\n\tset_input(input_index_or_name: number | string, node: NT | null, output_index_or_name: number | string = 0) {\n\t\tthis.io.inputs.set_input(input_index_or_name, node, output_index_or_name);\n\t}\n\n\t// emit\n\n\temit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n\temit(event_name: NodeEvent.DELETED, data: EmitDataByNodeEventMap[NodeEvent.DELETED]): void;\n\temit(event_name: NodeEvent.NAME_UPDATED): void;\n\temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n\temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n\temit(event_name: NodeEvent.ERROR_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n\temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\temit(event_name: NodeEvent, data: object | null = null): void {\n\t\t// super.emit(event_name, data);\n\t\tthis.scene.events_controller.dispatch(this, event_name, data);\n\t}\n\n\t// serializer\n\tto_json(include_param_components: boolean = false) {\n\t\treturn this.serializer.to_json(include_param_components);\n\t}\n}\n\nexport type BaseNodeType = TypedNode<any, BaseNodeType, any>;\nexport class BaseNodeClass extends TypedNode<any, BaseNodeType, any> {}\n","// import {Vector3} from 'three/src/math/Vector3'\n// import {Vector2} from 'three/src/math/Vector2'\n\nimport {CoreWalker} from '../../core/Walker';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NodeScene} from '../../core/graph/NodeScene';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\nimport {BaseNodeType} from '../nodes/_Base';\n\n// import {CallbackOption} from './concerns/options/Callback'\n// import {ColorOption} from './concerns/options/Color'\n// import {CookOption} from './concerns/options/Cook'\n// import {DesktopOption} from './concerns/options/Desktop'\n// import {ExpressionOption} from './concerns/options/Expression'\n// import {MenuOption} from './concerns/options/Menu'\n// import {NodeSelectionOption} from './concerns/options/NodeSelection'\n// import {RangeOption} from './concerns/options/Range'\n// import {AssetReferenceOption} from './concerns/options/AssetReference'\n// import {SpareOption} from './concerns/options/Spare'\n// import {MultilineOption} from './concerns/options/Multiline'\n// import {TextureOption} from './concerns/options/Texture'\n// import {VisibleOption} from './concerns/options/Visible'\n\n// import {Emit} from './concerns/Emit';\n// import {Errored} from './concerns/Errored';\n// import {Eval} from './concerns/Eval';\n// import {Expression} from './concerns/Expression';\n// import {Hierarchy} from './concerns/Hierarchy';\n// import {Json} from './concerns/Json';\n// import {Named} from './concerns/Named';\n// import {Node} from './concerns/Node';\n// import {Options} from './concerns/Options';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {Type} from './concerns/Type';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {VisitorsBase} from './concerns/visitors/_Base';\n\nimport {OptionsController} from './utils/OptionsController';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {EmitController} from './utils/EmitController';\nimport {ParamSerializer} from './utils/Serializer';\nimport {StatesController} from './utils/StatesController';\n// import {UIData} from './utils/UIData';\n\nimport {TypedMultipleParam} from './_Multiple';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {PolyScene} from '../scene/PolyScene';\n\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../params/types/ParamValuesTypeMap';\nimport {ParamValueSerializedTypeMap} from '../params/types/ParamValueSerializedTypeMap';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n// import {TypedNumericParam} from './_Numeric';\n\n// export interface ParamVisitor {\n// \tvisit_param: (param: BaseParamType) => any;\n// \tvisit_multiple_param: (param: TypedMultipleParam<any>) => any;\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\n// type ParamTypeElem = ParamType;\ntype ComputeCallback = (value: void) => void;\n\nexport abstract class TypedParam<T extends ParamType> extends CoreGraphNode {\n\t// protected _raw_input: ParamInitValuesTypeMap[T];\n\tprotected _default_value!: ParamInitValuesTypeMap[T];\n\tprotected _raw_input!: ParamInitValuesTypeMap[T];\n\tprotected _value!: ParamValuesTypeMap[T];\n\t// protected _expression: string;\n\tprotected _node!: BaseNodeType;\n\tprotected _parent_param: TypedMultipleParam<any> | undefined;\n\tprotected _components: FloatParam[] | undefined;\n\tprotected _compute_resolves: ComputeCallback[] | undefined;\n\n\tprivate _options: OptionsController = new OptionsController(this);\n\tget options(): OptionsController {\n\t\treturn (this._options = this._options || new OptionsController(this));\n\t}\n\tprivate _emit_controller: EmitController = new EmitController(this);\n\tget emit_controller(): EmitController {\n\t\treturn (this._emit_controller = this._emit_controller || new EmitController(this));\n\t}\n\tprotected _expression_controller: ExpressionController<T> | undefined;\n\tget expression_controller(): ExpressionController<T> | undefined {\n\t\treturn this._expression_controller; // =\n\t\t//this._expression_controller || new ExpressionController(this);\n\t}\n\tprivate _serializer: ParamSerializer | undefined;\n\tget serializer(): ParamSerializer {\n\t\treturn (this._serializer = this._serializer || new ParamSerializer(this));\n\t}\n\tprivate _states: StatesController | undefined;\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\t// private _ui_data: UIData | undefined;\n\t// get ui_data(): UIData {\n\t// \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n\t// }\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseParam');\n\t\tthis.initialize_param();\n\t}\n\tinitialize_value() {}\n\tinitialize_param() {}\n\t// \t// this.add_post_dirty_hook(this._remove_node_param_cache.bind(this))\n\t// }\n\t// initialize() {\n\t// \tthis.init_components();\n\t// \t// this.init_expression()\n\t// \t// this._init_ui_data()\n\t// }\n\t// accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n\t// \treturn visitor.visit_param(this);\n\t// }\n\n\t//\n\t// init_expression() {}\n\n\t// type\n\tstatic type(): ParamType {\n\t\treturn ParamType.FLOAT; // adding a type here, but just to not have a compile error\n\t}\n\tget type(): T {\n\t\treturn (this.constructor as typeof BaseParamClass).type() as T;\n\t}\n\tget is_numeric(): boolean {\n\t\treturn false;\n\t}\n\n\t// name\n\tset_name(name: string) {\n\t\tsuper.set_name(name);\n\t}\n\n\tget value(): ParamValuesTypeMap[T] {\n\t\treturn this._value;\n\t}\n\tabstract get default_value_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get raw_input_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get value_serialized(): ParamValueSerializedTypeMap[T];\n\tconvert(raw_val: any): ParamValuesTypeMap[T] | null {\n\t\treturn null;\n\t}\n\tstatic are_raw_input_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_raw_input_equal(other_raw_input: ParamInitValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_raw_input_equal(this._raw_input, other_raw_input);\n\t}\n\tstatic are_values_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_value_equal(other_val: ParamValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_values_equal(this.value, other_val);\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input;\n\t}\n\tset(raw_input: ParamInitValuesTypeMap[T]): void {\n\t\tthis._raw_input = this._clone_raw_input(this._prefilter_invalid_raw_input(raw_input));\n\t\tthis.emit_controller.emit(ParamEvent.RAW_INPUT_UPDATED);\n\t\tthis.process_raw_input();\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget is_default(): boolean {\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\n\tprotected process_raw_input() {}\n\tprivate _is_computing: boolean = false;\n\tasync compute(): Promise<void> {\n\t\tif (this.scene.loading_controller.is_loading) {\n\t\t\tconsole.warn(`param attempt to compute ${this.full_path()}`);\n\t\t}\n\n\t\tif (this.is_dirty) {\n\t\t\tif (!this._is_computing) {\n\t\t\t\tthis._is_computing = true;\n\t\t\t\tawait this.process_computation();\n\t\t\t\tthis._is_computing = false;\n\n\t\t\t\tif (this._compute_resolves) {\n\t\t\t\t\tlet callback: ComputeCallback | undefined;\n\t\t\t\t\twhile ((callback = this._compute_resolves.pop())) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._compute_resolves = this._compute_resolves || [];\n\t\t\t\t\tthis._compute_resolves.push(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {}\n\t// set_default_value(default_value: ParamValuesTypeMap[T]) {\n\t// \tthis._default_value = default_value;\n\t// }\n\tset_init_value(init_value: ParamInitValuesTypeMap[T]) {\n\t\tthis._default_value = init_value; //this.convert(init_value);\n\t\t// this._raw_input = this._clone_raw_input(init_value);\n\n\t\t// if (this.is_multiple) {\n\t\t// \tthis.init_components();\n\t\t// }\n\n\t\t// this.set(init_value);\n\t}\n\t// eval_p(): Promise<ParamValuesTypeMap[T]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tresolve();\n\t// \t});\n\t// }\n\n\t// node\n\tset_node(node: BaseNodeType | null) {\n\t\tif (!node) {\n\t\t\tif (this._node) {\n\t\t\t\tthis._node.params.params_node?.remove_graph_input(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._node = node;\n\t\t\tif (this.options.makes_node_dirty_when_dirty() && !this.parent_param) {\n\t\t\t\tnode.params.params_node?.add_graph_input(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.components) {\n\t\t\tfor (let c of this.components) {\n\t\t\t\tc.set_node(node);\n\t\t\t}\n\t\t}\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget parent() {\n\t\treturn this.node;\n\t}\n\n\t// hierarchy\n\tset_parent_param(param: TypedMultipleParam<any>) {\n\t\tparam.add_graph_input(this);\n\t\tthis._parent_param = param;\n\t}\n\tget parent_param(): TypedMultipleParam<any> | undefined {\n\t\treturn this._parent_param;\n\t}\n\thas_parent_param(): boolean {\n\t\treturn this._parent_param != null;\n\t}\n\tfull_path(): string {\n\t\treturn this.node?.full_path() + '/' + this.name;\n\t}\n\tpath_relative_to(node: BaseNodeType | BaseParamType): string {\n\t\treturn CoreWalker.relative_path(node, this);\n\t}\n\n\t// emit\n\temit(event_name: ParamEvent): void {\n\t\tif (this.emit_controller.emit_allowed) {\n\t\t\tthis.emit_controller.increment_count(event_name);\n\t\t\tthis.scene.events_controller.dispatch(this, event_name);\n\t\t}\n\t}\n\n\t// multiple\n\tget components() {\n\t\treturn this._components;\n\t}\n\tstatic get component_names(): string[] {\n\t\treturn [];\n\t}\n\tget component_names(): string[] {\n\t\tconst c = (<unknown>this.constructor) as TypedParam<T>;\n\t\treturn c.component_names;\n\t}\n\tget is_multiple(): boolean {\n\t\treturn this.component_names.length > 0;\n\t}\n\t// create_components() {}\n\tinit_components() {}\n\n\t// expression\n\t// set_expression(expression: string | null) {\n\t// \tthis.expression_controller.set_expression(expression);\n\t// }\n\thas_expression(): boolean {\n\t\treturn this.expression_controller != null && this.expression_controller.active; // use this._expression_controller to avoid creating it\n\t}\n\n\t// serialize\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n}\nexport type BaseParamType = TypedParam<ParamType>;\nexport class BaseParamClass extends TypedParam<ParamType> {\n\tget default_value_serialized() {\n\t\treturn 'BaseParamClass.default_value_serialized overriden';\n\t}\n\tget raw_input_serialized() {\n\t\treturn 'BaseParamClass.raw_input_serialized overriden';\n\t}\n\tget value_serialized() {\n\t\treturn 'BaseParamClass.value_serialized overriden';\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {BypassFlag} from './flags/Bypass';\nimport {DisplayFlag} from './flags/Display';\n\nexport class FlagsController {\n\tpublic readonly bypass: DisplayFlag | undefined;\n\tpublic readonly display: BypassFlag | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\thas_display(): boolean {\n\t\treturn false;\n\t}\n\thas_bypass(): boolean {\n\t\treturn false;\n\t}\n}\n\nfunction Display<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic display: DisplayFlag = new DisplayFlag(this.node);\n\t\thas_display(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\nfunction Bypass<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic readonly bypass: BypassFlag = new BypassFlag(this.node);\n\t\thas_bypass(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n\nexport class FlagsControllerD extends Display(FlagsController) {}\nexport class FlagsControllerB extends Bypass(FlagsController) {}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Euler} from 'three/src/math/Euler';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {BaseNodeType} from '../engine/nodes/_Base';\n\nconst ROTATION_ORDER = 'XYZ';\n\nexport interface SetParamsFromMatrixOptions {\n\tscale?: boolean;\n}\n\n// TODO: remove the \"new\" in this whole file\n// const euler = new Euler(0, 0, 0, ROTATION_ORDER)\n\nexport class CoreTransform {\n\t// static create_params(node: BaseNodeType) {\n\t// \tnode.add_param(ParamType.VECTOR3, 't', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 'r', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 's', [1, 1, 1]);\n\t// \tnode.add_param(ParamType.FLOAT, 'scale', 1, {range: [0, 10]});\n\t// \tnode.add_param(ParamType.OPERATOR_PATH, 'look_at', '');\n\t// \tnode.add_param(ParamType.VECTOR3, 'up', [0, 1, 0]);\n\t// }\n\n\t// static matrix_from_node_with_transform_params(node: BaseNodeType): Matrix4 {\n\t// \tconst t = node.params.vector3('t');\n\t// \tconst r = node.params\n\t// \t\t.vector3('r')\n\t// \t\t.clone()\n\t// \t\t.multiplyScalar(Math.PI / 180);\n\t// \tconst s = node.params.vector3('s');\n\t// \tconst scale = node.params.float('scale');\n\t// \treturn this.matrix(t, r, s, scale);\n\t// }\n\n\t// if this is done, make sure to use eval with a  callback\n\t// @matrix_from_params: (node) ->\n\t// \tt = node.param('t').eval()\n\t// \tr = node.param('r').eval().multiplyScalar( Math.PI / 180 )\n\t// \ts = node.param('s').eval()\n\t// \tscale = node.param('scale').eval()\n\t// \tthis.matrix(t, r, s, scale)\n\n\tstatic set_params_from_matrix(matrix: Matrix4, node: BaseNodeType, options: SetParamsFromMatrixOptions = {}) {\n\t\tlet update_scale = options['scale'];\n\t\tif (update_scale == null) {\n\t\t\tupdate_scale = true;\n\t\t}\n\n\t\t// EPSILON = 0.0000001\n\t\t// PRECISION = 1000\n\t\t// components = ['x', 'y', 'z']\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3();\n\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\tconst euler = new Euler().setFromQuaternion(quaternion);\n\t\tconst rotation = euler.toVector3();\n\t\trotation.divideScalar(Math.PI / 180);\n\n\t\t// limit precision of position and rotation\n\t\t// lodash_each [position, rotation], (vector)->\n\t\t// \tlodash_each ['x', 'y', 'z'], (c)->\n\t\t// \t\tval = vector[c]\n\t\t// \t\tapproximation = parseInt(val * PRECISION) / PRECISION\n\t\t// \t\tvector[c] = approximation\n\n\t\t// round scale if we get values like 0.9999999999 or 1.00000000001\n\t\t// lodash_each ['x', 'y', 'z'], (c)->\n\t\t// \tval = scale[c]\n\t\t// \trounded = Math.round(val)\n\t\t// \tif Math.abs(val - rounded) < EPSILON\n\t\t// \t\tscale[c] = rounded\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('r', rotation.toArray() as Number3);\n\t\t\tnode.params.set_vector3('t', position.toArray() as Number3);\n\t\t\tnode.params.set_vector3('s', scale.toArray() as Number3);\n\t\t\tif (update_scale) {\n\t\t\t\tnode.params.set_float('scale', 1);\n\t\t\t}\n\t\t});\n\t}\n\t// this.object().position.copy(position)\n\t// this.object().quaternion.copy(quaternion)\n\t// this.object().scale.copy(scale)\n\n\tstatic set_params_from_object(object: Object3D, node: BaseNodeType) {\n\t\tconst position = object.position.toArray() as Number3;\n\t\tconst rotation = object.rotation.toArray().map((c) => c * (180 / Math.PI)) as Number3;\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('t', position);\n\t\t\tnode.params.set_vector3('r', rotation);\n\t\t});\n\t}\n\n\t// static translation_matrix(x: number, y: number, z: number): Matrix4 {\n\t// \tconst t = new Vector3(x, y, z);\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst s = new Vector3(1, 1, 1);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\n\tprivate _translation_matrix: Matrix4 = new Matrix4();\n\tprivate _translation_matrix_q = new Quaternion();\n\tprivate _translation_matrix_s = new Vector3(1, 1, 1);\n\ttranslation_matrix(t: Vector3): Matrix4 {\n\t\tthis._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n\t\treturn this._translation_matrix;\n\t}\n\n\tstatic matrix_quaternion(matrix: Matrix4): Quaternion {\n\t\tconst t = new Vector3();\n\t\tconst quat = new Quaternion();\n\t\tconst s = new Vector3();\n\t\tmatrix.decompose(t, quat, s);\n\t\treturn quat;\n\t}\n\n\t// static matrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t// \t// if I don't clone here, it created issues in the transform SOP\n\t// \ts = s.clone().multiplyScalar(scale);\n\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst euler = new Euler(r.x, r.y, r.z, ROTATION_ORDER);\n\t// \tquaternion.setFromEuler(euler);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\tprivate _matrix = new Matrix4().identity();\n\tprivate _matrix_q = new Quaternion();\n\tprivate _matrix_e = new Euler();\n\tprivate _matrix_s = new Vector3();\n\tmatrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t\tthis._matrix_e.set(r.x, r.y, r.z, ROTATION_ORDER);\n\t\tthis._matrix_q.setFromEuler(this._matrix_e);\n\n\t\tthis._matrix_s.copy(s).multiplyScalar(scale);\n\n\t\tthis._matrix.compose(t, this._matrix_q, this._matrix_s);\n\t\treturn this._matrix;\n\t}\n\n\t// static rotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t// \tconst quaternion = new Quaternion();\n\t// \tquaternion.setFromUnitVectors(vec_origin, vec_dest.clone().normalize());\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.makeRotationFromQuaternion(quaternion);\n\t// \tgeometry.applyMatrix(matrix);\n\t// }\n\n\tprivate _rotate_geometry_m = new Matrix4();\n\tprivate _rotate_geometry_q = new Quaternion();\n\tprivate _rotate_geometry_vec_dest = new Vector3();\n\trotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t\tthis._rotate_geometry_vec_dest.copy(vec_dest);\n\t\tthis._rotate_geometry_vec_dest.normalize();\n\t\tthis._rotate_geometry_q.setFromUnitVectors(vec_origin, this._rotate_geometry_vec_dest);\n\t\t// this._rotate_geometry_m.identity(); // not entirely sure this is necessary\n\t\tthis._rotate_geometry_m.makeRotationFromQuaternion(this._rotate_geometry_q);\n\t\tgeometry.applyMatrix(this._rotate_geometry_m);\n\t}\n}\n","export enum ParamEvent {\n\tVISIBLE_UPDATED = 'param_visible_updated',\n\t// UPDATED = 'param_updated',\n\tRAW_INPUT_UPDATED = 'raw_input_updated',\n\tVALUE_UPDATED = 'param_value_updated',\n\tEXPRESSION_UPDATED = 'param_expression_update',\n\tERROR_UPDATED = 'param_error_updated',\n\tDELETED = 'param_deleted',\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Triangle} from 'three/src/math/Triangle';\nconst THREE = {Triangle, Vector3};\nimport lodash_isNumber from 'lodash/isNumber';\n// import {Octree} from './Octree'\n// import Interpolate from './Interpolate'\nimport {Easing} from './Easing';\n\nconst RAD_DEG_RATIO = Math.PI / 180;\n\nexport class CoreMath {\n\t// static Octree = Octree\n\t// static Interpolate = Interpolate\n\tstatic Easing = Easing; // used in expressins\n\n\tstatic clamp(val: number, min: number, max: number): number {\n\t\tif (val < min) {\n\t\t\treturn min;\n\t\t} else if (val > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tstatic fit01(val: number, dest_min: number, dest_max: number): number {\n\t\t// const size = max - min;\n\t\t// return (val - min) / size;\n\t\treturn this.fit(val, 0, 1, dest_min, dest_max);\n\t}\n\n\tstatic fit(val: number, src_min: number, src_max: number, dest_min: number, dest_max: number): number {\n\t\tconst src_range = src_max - src_min;\n\t\tconst dest_range = dest_max - dest_min;\n\n\t\tconst r = (val - src_min) / src_range;\n\t\treturn r * dest_range + dest_min;\n\t}\n\n\tstatic degrees_to_radians(degrees: number): number {\n\t\treturn degrees * RAD_DEG_RATIO;\n\t}\n\tstatic radians_to_degrees(radians: number): number {\n\t\treturn radians / RAD_DEG_RATIO;\n\t}\n\tstatic deg2rad(deg: number): number {\n\t\treturn this.degrees_to_radians(deg);\n\t}\n\tstatic rad2deg(rad: number): number {\n\t\treturn this.radians_to_degrees(rad);\n\t}\n\n\tstatic fract = (number: number) => number - Math.floor(number);\n\n\t// from threejs glsl rand\n\tstatic rand(number: number): number {\n\t\tif (lodash_isNumber(number)) {\n\t\t\treturn this.rand_float(number);\n\t\t} else {\n\t\t\treturn this.rand_vec2(number);\n\t\t}\n\t}\n\n\tstatic round(number: number, step_size: number): number {\n\t\tconst steps_count = number / step_size;\n\t\tconst rounded_steps_count = number < 0 ? Math.ceil(steps_count) : Math.floor(steps_count);\n\t\tconsole.log('round', step_size, number, steps_count, rounded_steps_count, rounded_steps_count * step_size);\n\t\treturn rounded_steps_count * step_size;\n\t}\n\n\tstatic highest_even(number: number): number {\n\t\treturn 2 * Math.ceil(number * 0.5);\n\t}\n\n\tstatic rand_float(number: number): number {\n\t\tconst vec = {\n\t\t\tx: number,\n\t\t\ty: 136574,\n\t\t};\n\t\treturn this.rand_vec2(vec);\n\t}\n\n\tstatic rand_vec2(uv: Vector2Like) {\n\t\tconst a = 12.9898;\n\t\tconst b = 78.233;\n\t\tconst c = 43758.5453;\n\t\tconst dt = uv.x * a + uv.y * b; //dot( uv.xy, vec2( a,b ) )\n\t\tconst sn = dt % Math.PI;\n\t\treturn this.fract(Math.sin(sn) * c);\n\t}\n\n\t// https://www.movable-type.co.uk/scripts/latlong.html\n\tstatic geodesic_distance(lnglat1: LngLatLike, lnglat2: LngLatLike): number {\n\t\tvar R = 6371e3; // metres\n\t\tvar φ1 = this.deg2rad(lnglat1.lat);\n\t\tvar φ2 = this.deg2rad(lnglat2.lat);\n\t\tvar Δφ = this.deg2rad(lnglat2.lat - lnglat1.lat);\n\t\tvar Δλ = this.deg2rad(lnglat2.lng - lnglat1.lng);\n\n\t\tvar a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tvar d = R * c;\n\t\treturn d;\n\t}\n\n\tstatic expand_triangle(triangle: Triangle, margin: number): Triangle {\n\t\tconst mid_point = new THREE.Vector3();\n\t\ttriangle.getMidpoint(mid_point);\n\n\t\tenum TriangleProp {\n\t\t\ta = 'a',\n\t\t\tb = 'b',\n\t\t\tc = 'c',\n\t\t}\n\t\tfor (let prop of ['a', 'b', 'c']) {\n\t\t\tconst delta = triangle[prop as TriangleProp].clone().sub(mid_point);\n\t\t\tconst delta_n = delta.clone().normalize();\n\t\t\tconst length = delta.length() + margin;\n\n\t\t\ttriangle[prop as TriangleProp] = mid_point.clone().add(delta_n.multiplyScalar(length));\n\t\t}\n\t\treturn triangle;\n\t}\n\n\tstatic nearestPower2(num: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport abstract class BaseNodeGlMathFunctionArg1GlNode extends BaseGlMathFunctionGlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t}\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type];\n\t}\n\n\t// protected expected_named_input_constructors() {\n\t// \tconst constructor = this.input_connection_constructor() || Connection.Float;\n\t// \treturn [constructor];\n\t// }\n\n\t// protected expected_named_output_constructors() {\n\t// \tconst constructor = this.output_connection_constructor();\n\t// \treturn [constructor];\n\t// }\n}\n","import {BaseController} from './_BaseController';\n\nimport {FrontSide} from 'three/src/constants';\nimport {DoubleSide} from 'three/src/constants';\nimport {BackSide} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function SideParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdouble_sided = ParamConfig.BOOLEAN(0);\n\t\tfront = ParamConfig.BOOLEAN(1, {visible_if: {double_sided: false}});\n\t};\n}\n\nclass SidedMaterial extends Material {\n\tside!: number;\n}\nclass SideParamsConfig extends SideParamConfig(NodeParamsConfig) {}\nclass SideMatNode extends TypedMatNode<SidedMaterial, SideParamsConfig> {\n\tcreate_material() {\n\t\treturn new SidedMaterial();\n\t}\n}\n\nexport class SideController extends BaseController {\n\tstatic update(node: SideMatNode) {\n\t\tconst single_side = node.pv.front ? FrontSide : BackSide;\n\t\tconst new_side = node.pv.double_sided ? DoubleSide : single_side;\n\t\tif (new_side != node.material.side) {\n\t\t\tnode.material.side = new_side;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {OutputGlNode} from '../../../Output';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {BaseGLDefinition, UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {MapUtils} from '../../../../../../core/MapUtils';\nimport {ShaderMaterialWithCustomMaterials} from '../../../../../../core/geometry/Material';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {ShaderMaterial} from 'three';\nimport {GlNodeFinder} from '../../utils/NodeFinder';\n// import {BaseNodeType} from '../../_Base';\n// import {GlobalsGeometryHandler} from './Globals/Geometry'\n\nexport enum CustomMaterialName {\n\tDISTANCE = 'customDistanceMaterial',\n\tDEPTH = 'customDepthMaterial',\n\tDEPTH_DOF = 'customDepthDOFMaterial',\n}\n// export type ShaderAssemblerRenderDerivated = {new (node: BaseNodeType): ShaderAssemblerRender};\n// type ShaderAssemblerRenderDerivatedClass = new (...args: any[]) => ShaderAssemblerRender;\nexport type CustomAssemblerMap = Map<CustomMaterialName, typeof ShaderAssemblerMaterial>;\n\nexport class ShaderAssemblerMaterial extends BaseGlShaderAssembler {\n\tprivate _assemblers_by_custom_name: Map<CustomMaterialName, ShaderAssemblerMaterial> = new Map();\n\n\tcreate_material(): ShaderMaterial {\n\t\treturn new ShaderMaterial();\n\t}\n\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap | undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected _add_custom_materials(material: ShaderMaterial) {\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\t(assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tthis._add_custom_material(\n\t\t\t\t\t\tmaterial as ShaderMaterialWithCustomMaterials,\n\t\t\t\t\t\tcustom_name,\n\t\t\t\t\t\tassembler_class\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\tprivate _add_custom_material(\n\t\tmaterial: ShaderMaterialWithCustomMaterials,\n\t\tcustom_name: CustomMaterialName,\n\t\tassembler_class: typeof ShaderAssemblerMaterial\n\t) {\n\t\tlet custom_assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(custom_name);\n\t\tif (!custom_assembler) {\n\t\t\tcustom_assembler = new assembler_class(this._gl_parent_node);\n\t\t\tthis._assemblers_by_custom_name.set(custom_name, custom_assembler);\n\t\t}\n\t\tmaterial.custom_materials = material.custom_materials || {};\n\t\tmaterial.custom_materials[custom_name] = custom_assembler.create_material();\n\t}\n\n\tasync compile_custom_materials(material: ShaderMaterialWithCustomMaterials): Promise<void> {\n\t\t// const custom_materials_by_name: Map<CustomMaterialName, ShaderMaterial> = new Map();\n\t\t// this._assemblers_by_custom_name.clear();\n\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\tasync (assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tif (this._code_builder) {\n\t\t\t\t\t\tlet assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(\n\t\t\t\t\t\t\tcustom_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!assembler) {\n\t\t\t\t\t\t\tassembler = new assembler_class(this._gl_parent_node);\n\t\t\t\t\t\t\tthis._assemblers_by_custom_name.set(custom_name, assembler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tassembler.set_root_nodes(this._root_nodes);\n\t\t\t\t\t\tassembler.set_param_configs_owner(this._code_builder);\n\t\t\t\t\t\tassembler.set_shader_configs(this.shader_configs);\n\t\t\t\t\t\tassembler.set_variable_configs(this.variable_configs());\n\n\t\t\t\t\t\tconst custom_material = material.custom_materials[custom_name];\n\t\t\t\t\t\tif (custom_material) {\n\t\t\t\t\t\t\tawait assembler.compile_material(custom_material);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if (material) {\n\t\t\t\t\t\t// \t// add needsUpdate = true, as we always get the same material\n\t\t\t\t\t\t// \t// material.needsUpdate = true;\n\t\t\t\t\t\t// \tcustom_materials_by_name.set(custom_name, material);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// for (let custom_name of Object.keys(class_by_custom_name)) {\n\t\t// \tconst assembler_class = class_by_custom_name[custom_name];\n\t\t// \t// const assembler = new assembler_class(this._gl_parent_node)\n\n\t\t// }\n\n\t\t// return custom_materials_by_name;\n\t}\n\tasync compile_material(material: ShaderMaterial) {\n\t\t// no need to compile if the globals handler has not been declared\n\t\tif (!this.compile_allowed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this._gl_parent_node);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis._gl_parent_node.states.error.set('only one output node allowed');\n\t\t}\n\t\tthis.set_root_nodes(output_nodes);\n\t\tawait this._update_shaders();\n\n\t\tconst new_vertex_shader = this._shaders_by_name.get(ShaderName.VERTEX);\n\t\tconst new_fragment_shader = this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t\tif (new_vertex_shader && new_fragment_shader) {\n\t\t\tmaterial.vertexShader = new_vertex_shader;\n\t\t\tmaterial.fragmentShader = new_fragment_shader;\n\t\t\t// if (this._template_shader && this._template_shader.uniforms) {\n\t\t\tthis.add_uniforms(material.uniforms);\n\t\t\t// }\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\t// const material = await this._assembler.get_material();\n\t\t// if (material) {\n\t\t// this._shaders_by_name.set(ShaderName.VERTEX, this._template_shader!.vertexShader!);\n\t\t// this._shaders_by_name.set(ShaderName.FRAGMENT, this._template_shader!.fragmentShader!);\n\n\t\t// assign custom materials\n\t\tif ((material as ShaderMaterialWithCustomMaterials).custom_materials) {\n\t\t\tawait this.compile_custom_materials(material as ShaderMaterialWithCustomMaterials);\n\t\t}\n\t\t// const custom_materials = await this.get_custom_materials();\n\t\t// const material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t\t// material_with_custom_materials.custom_materials = {};\n\t\t// custom_materials.forEach((custom_material, shader_name) => {\n\t\t// \tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t\t// });\n\n\t\t// material.needsUpdate = true;\n\t\t// }\n\n\t\t// this.create_spare_parameters();\n\t}\n\tprivate async _update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\tshadow_assembler_class_by_custom_name() {\n\t\treturn {};\n\t}\n\n\tadd_output_body_line(\n\t\toutput_node: OutputGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController,\n\t\tinput_name: string\n\t) {\n\t\tconst input = output_node.io.inputs.named_input(input_name);\n\t\tconst var_input = output_node.variable_for_input(input_name);\n\t\tconst variable_config = this.variable_config(input_name);\n\n\t\tlet new_var: string | null = null;\n\t\tif (input) {\n\t\t\tnew_var = ThreeToGl.vector3(var_input);\n\t\t} else {\n\t\t\tif (variable_config.default_from_attribute()) {\n\t\t\t\tconst connection_point = output_node.io.inputs.named_input_connection_points_by_name(input_name);\n\t\t\t\tif (connection_point) {\n\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\tconst attr_read = this.globals_handler?.read_attribute(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tgl_type,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t\tif (attr_read) {\n\t\t\t\t\t\tnew_var = attr_read;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst variable_config_default = variable_config.default();\n\t\t\t\tif (variable_config_default) {\n\t\t\t\t\tnew_var = variable_config_default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// const default_value = variable_config.default()\n\t\t\t// new_var = default_value\n\t\t\t// const definition_configs = variable_config.required_definitions() || []\n\t\t\t// for(let definition_config of definition_configs){\n\t\t\t// \tconst definition = definition_config.create_definition(output_node)\n\t\t\t// \toutput_node.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\t\tif (new_var) {\n\t\t\tconst prefix = variable_config.prefix();\n\t\t\tconst suffix = variable_config.suffix();\n\t\t\tconst if_condition = variable_config.if_condition();\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#if ${if_condition}`]);\n\t\t\t}\n\t\t\tshaders_collection_controller.add_body_lines(output_node, [`${prefix}${new_var}${suffix}`]);\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#endif`]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.shader_config(shader_name)?.input_names();\n\t\tif (input_names) {\n\t\t\t// shaders_collection_controller.set_body_lines([], shader_name);\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tthis.add_output_body_line(output_node, shaders_collection_controller, input_name);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\t// const named_output = attribute_node.connected_output()\n\t\t// const named_connection = attribute_node.connected_input()\n\t\tconst gl_type = attribute_node.gl_type();\n\t\tconst new_var = this.globals_handler?.read_attribute(\n\t\t\tattribute_node,\n\t\t\tgl_type,\n\t\t\tattribute_node.attribute_name,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\tshaders_collection_controller.add_body_lines(attribute_node, [`${gl_type} ${var_name} = ${new_var}`]);\n\t\t// this.add_output_body_line(\n\t\t// \tattribute_node,\n\t\t// \tshader_name,\n\t\t// \tinput_name\n\t\t// \t)\n\n\t\t// const vertex_definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_definitions = []\n\n\t\t// const named_output = attribute_node.named_outputs()[0]\n\t\t// const gl_type = named_output.type()\n\t\t// const var_name = attribute_node.gl_var_name(named_output.name())\n\n\t\t// const attribute_name = attribute_node.attribute_name()\n\t\t// // TODO: I should probably raise an error in the node\n\t\t// // maybe when doint the initial eval of all nodes and check for errors?\n\t\t// if(!attribute_name){\n\t\t// \tconsole.error(attribute_node.full_path())\n\t\t// \tthrow new Error(\"empty attr name\")\n\t\t// }\n\t\t// if(GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attribute_name) < 0){\n\t\t// \tvertex_definitions.push(new Definition.Attribute(attribute_node, gl_type, attribute_name))\n\t\t// }\n\t\t// vertex_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\t\t// vertex_body_lines.push( `${var_name} = ${attribute_name}` )\n\t\t// fragment_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\n\t\t// attribute_node.set_definitions(vertex_definitions, 'vertex')\n\t\t// attribute_node.set_definitions(fragment_definitions, 'fragment')\n\t\t// attribute_node.add_body_lines(vertex_body_lines, 'vertex')\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec4 ${var_name} = gl_FragCoord`);\n\t\t}\n\t}\n\thandle_resolution(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec2 ${var_name} = resolution`);\n\t\t}\n\t}\n\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = [];\n\t\t// const fragment_definitions = [];\n\t\t// const definitions = [];\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = [];\n\t\tconst body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_nameshader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tdefinitions_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t// body_lines_by_shader_name[shader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tbody_lines_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tlet definition;\n\t\tlet body_line;\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'frame':\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tbody_line = `float ${var_name} = ${output_name}`;\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\tbody_lines.push(body_line);\n\t\t\t\t\tthis.set_frame_dependent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tthis.handle_resolution(body_lines, shader_name, var_name);\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.VEC2, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set_resolution_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_PointCoord':\n\t\t\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\t\t\tbody_lines.push(`vec2 ${var_name} = gl_PointCoord`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t\t// const new_var = this.globals_handler().read_attribute(\n\t\t\t\t\t// \tglobals_node,\n\t\t\t\t\t// \tgl_type,\n\t\t\t\t\t// \toutput_name\n\t\t\t\t\t// )\n\t\t\t\t\t// const body_line = `${var_name} = ${new_var}`\n\t\t\t\t\t// globals_node.add_body_lines([body_line])\n\t\t\t\t\tthis.globals_handler?.handle_globals_node(\n\t\t\t\t\t\tglobals_node,\n\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t\t\t// body_lines,\n\t\t\t\t\t\t// dependencies,\n\t\t\t\t\t\t// shader_name\n\t\t\t\t\t);\n\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t// definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t\t\t// definitions_by_shader_name[shader_name].push(definition)\n\t\t\t\t// throw \"debug\"\n\n\t\t\t\t// body_line = `${var_name} = vec3(${output_name})`\n\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t// }\n\t\t\t\t// if(dependencies.length == 0){\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\t});\n\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines, shader_name);\n\t\t});\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t}\n}\n","import {BaseContainer, TypedContainer} from '../../containers/_Base';\nimport {BaseNodeType} from '../_Base';\n\ntype Callback<T extends TypedContainer<any>> = (container: T | undefined) => void;\n\nexport class TypedContainerController<T extends TypedContainer<any>> {\n\tprivate _callbacks: Callback<T>[] = [];\n\tprotected _container: T;\n\n\tconstructor(protected node: BaseNodeType, container_class: typeof BaseContainer) {\n\t\tthis._container = new container_class(this.node) as T;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\trequest_container(): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._callbacks.push(resolve);\n\t\t\tthis.node.scene.cook_controller.add_node(this.node);\n\n\t\t\t// const cooker = this.node.scene.cooker;\n\t\t\t// if (cooker.blocked()) {\n\t\t\t// \tcooker.enqueue(this.node);\n\t\t\t// } else {\n\t\t\tsetTimeout(this.process_container_request.bind(this), 0);\n\t\t\t// }\n\t\t});\n\t}\n\n\tprocess_container_request() {\n\t\tif (this.node.flags?.bypass?.active) {\n\t\t\tconst input_index = 0;\n\t\t\tthis.request_input_container(input_index).then((container) => {\n\t\t\t\tthis.node.remove_dirty_state();\n\t\t\t\tif (container) {\n\t\t\t\t\tthis.notify_requesters(container);\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('input invalid');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.node.is_dirty) {\n\t\t\t\tthis.node.container_controller.container.reset_caches();\n\t\t\t\tthis.node.cook_controller.cook_main();\n\t\t\t} else {\n\t\t\t\tthis.notify_requesters();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync request_input_container(input_index: number) {\n\t\tconst input_node = this.node.io.inputs.input(input_index);\n\t\tif (input_node) {\n\t\t\tinput_node.processing_context.copy(this.node.processing_context);\n\t\t\tconst container = await input_node.container_controller.request_container();\n\t\t\treturn container;\n\t\t} else {\n\t\t\tthis.node.states.error.set(`input ${input_index} required`);\n\t\t\tthis.notify_requesters();\n\t\t\treturn null;\n\t\t}\n\t}\n\tnotify_requesters(container?: T) {\n\t\t// make a copy of the callbacks first,\n\t\t// to ensure that new ones are not added to this list\n\t\t// in side effects from those callbacks\n\t\t// (the test suite for the File SOP is a good test for this)\n\t\tlet callback;\n\t\tconst callbacks = [];\n\t\twhile ((callback = this._callbacks.pop())) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\n\t\tif (!container) {\n\t\t\tcontainer = this.node.container_controller.container.clone();\n\t\t}\n\t\t// removing the clone, as this seems to defeat the no cloning of inputs\n\t\t// container = container || this._container\n\t\twhile ((callback = callbacks.pop())) {\n\t\t\tcallback(container);\n\t\t}\n\t\tthis.node.scene.cook_controller.remove_node(this.node);\n\t}\n}\n\nexport class BaseContainerController extends TypedContainerController<any> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nconst THREE = {Vector2, Vector3};\n\nconst ATTRIB_NAME_MAP: Dictionary<string> = {\n\tP: 'position',\n\tN: 'normal',\n\tCd: 'color',\n};\n\nexport class CoreAttribute {\n\t// constructor: (@_size, @_value)->\n\t// \t#\n\n\t// size: ->\n\t// \t@_size\n\n\t// value: ->\n\t// \t@_value\n\n\t// set_value: (value)->\n\t// \t@_value = value\n\n\tstatic remap_name(name: string): string {\n\t\treturn ATTRIB_NAME_MAP[name] || name;\n\t}\n\n\tstatic array_to_indexed_arrays(array: string[]) {\n\t\tconst index_by_value: Dictionary<number> = {};\n\t\tlet current_index = 0;\n\t\tconst indices = [];\n\t\tconst values = [];\n\n\t\tlet i = 0;\n\t\twhile (i < array.length) {\n\t\t\t//(value = array[i++])?\n\t\t\tconst value = array[i];\n\t\t\tconst index = index_by_value[value];\n\t\t\tif (index != null) {\n\t\t\t\tindices.push(index);\n\t\t\t} else {\n\t\t\t\tvalues.push(value);\n\t\t\t\tindices.push(current_index);\n\t\t\t\tindex_by_value[value] = current_index;\n\t\t\t\tcurrent_index += 1;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn {\n\t\t\tindices,\n\t\t\tvalues,\n\t\t};\n\t}\n\n\tstatic default_value(size: number) {\n\t\tswitch (size) {\n\t\t\tcase 1:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn new THREE.Vector2(0, 0);\n\t\t\tcase 3:\n\t\t\t\treturn new THREE.Vector3(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow `size ${size} not yet implemented`;\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../nodes/_Base';\n\n// interface ContentOption {\n// \tclone?: boolean\n// }\n\nimport {ContainableMap} from './utils/ContainableMap';\ntype K = keyof ContainableMap;\ntype Containable = ContainableMap[K];\n\nexport abstract class TypedContainer<T extends Containable> {\n\t// protected _node: BaseNode;\n\t// protected _eval_key: number\n\tprotected _content!: T;\n\n\tconstructor(protected _node: BaseNodeType) {\n\t\t// this.update_eval_key();\n\t\t// this.set_content(this._default_content());\n\t}\n\n\tset_node(node: BaseNodeType) {\n\t\tthis._node = node;\n\t}\n\tnode(): BaseNodeType {\n\t\treturn this._node;\n\t}\n\n\tclone() {\n\t\tlet content;\n\t\tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n\t\tcloned_container.set_node(this.node());\n\t\tif ((content = this.content()) != null) {\n\t\t\tcloned_container.set_content(content); //, this.eval_key() );\n\t\t}\n\t\treturn cloned_container;\n\t}\n\treset_caches() {}\n\t// abstract _default_content(): T;\n\n\tset_content(content: T) {\n\t\t//, eval_key?: number){\n\t\tthis.reset_caches();\n\t\tthis._content = content; //|| this._default_content();\n\t\t// this.update_eval_key(eval_key);\n\t\tthis._post_set_content();\n\t}\n\thas_content(): boolean {\n\t\treturn this._content != null;\n\t}\n\t// content(options: ContentOption = {}) {\n\t// \tconst clone = options['clone'] || false\n\t// \tif (clone) {\n\t// \t\treturn this.clone_content()\n\t// \t} else {\n\t// \t\treturn this._content\n\t// \t}\n\t// }\n\tcontent() {\n\t\treturn this._content;\n\t}\n\tprotected _post_set_content() {}\n\tpublic core_content(): T | undefined {\n\t\treturn this._content;\n\t}\n\tpublic core_content_cloned(): T | undefined {\n\t\treturn this._content;\n\t}\n\t// abstract clone_content(): T\n\n\t// update_eval_key(eval_key?: number){\n\t// \tthis._eval_key = eval_key || performance.now();\n\t// }\n\t// eval_key(): number {\n\t// \treturn this._eval_key;\n\t// }\n\n\tinfos(): any {\n\t\treturn [];\n\t}\n}\n\nexport class BaseContainer extends TypedContainer<any> {}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {TypedMatNode} from '../_Base';\nexport function SkinningParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tskinning = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass SkinnedMaterial extends Material {\n\tskinning!: boolean;\n}\nclass SkinningParamsConfig extends SkinningParamConfig(NodeParamsConfig) {}\nclass SkinningMatNode extends TypedMatNode<SkinnedMaterial, SkinningParamsConfig> {\n\tcreate_material() {\n\t\treturn new SkinnedMaterial();\n\t}\n}\n\nexport class SkinningController extends BaseController {\n\tstatic update(node: SkinningMatNode) {\n\t\tconst new_skinning = node.pv.skinning;\n\t\tif (new_skinning != node.material.skinning) {\n\t\t\tnode.material.skinning = new_skinning;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMapController));\n\t\tmap = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureMapController, 'use_map')\n\t\t);\n\t};\n}\nclass TextureMapMaterial extends Material {\n\tmap!: Texture | null;\n}\ntype CurrentMaterial = TextureMapMaterial | ShaderMaterial;\nclass TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\nabstract class TextureMapMatNode extends TypedMatNode<CurrentMaterial, TextureMapParamsConfig> {\n\ttexture_map_controller!: TextureMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(node: TextureMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_map, this.node.p.map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'map', this.node.p.use_map, this.node.p.map);\n\t}\n\tstatic async update(node: TextureMapMatNode) {\n\t\tnode.texture_map_controller.update();\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nexport function TextureAlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_alpha_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureAlphaMapController));\n\t\talpha_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureAlphaMapController, 'use_alpha_map')\n\t\t);\n\t};\n}\nclass TextureAlphaMaterial extends Material {\n\talphaMap!: Texture | null;\n}\ntype CurrentMaterial = TextureAlphaMaterial | ShaderMaterial;\nclass TextureAlphaMapParamsConfig extends TextureAlphaMapParamConfig(NodeParamsConfig) {}\nabstract class TextureAlphaMapMatNode extends TypedMatNode<CurrentMaterial, TextureAlphaMapParamsConfig> {\n\ttexture_alpha_map_controller!: TextureAlphaMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(node: TextureAlphaMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'alphaMap', this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tstatic async update(node: TextureAlphaMapMatNode) {\n\t\tnode.texture_alpha_map_controller.update();\n\t}\n}\n","export class MapUtils {\n\tstatic push_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.push(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic unshift_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.unshift(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic concat_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_elements: V[]) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tlet array: V[] = map.get(key)!;\n\t\t\tfor (let element of new_elements) {\n\t\t\t\tarray.push(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmap.set(key, new_elements);\n\t\t}\n\t}\n}\n","export const CATEGORY_OBJ = {\n\tLIGHT: 'lights',\n\tMANAGER: 'managers',\n\tGEOMETRY: 'geometries',\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_COP = {\n\tINPUT: 'inputs',\n\tADVANCED: 'advanced',\n\tMISC: 'misc',\n};\nexport const CATEGORY_EVENT = {\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_GL = {\n\tCOLOR: 'color',\n\tCONVERSION: 'conversion',\n\tDYNAMICS: 'dynamics',\n\tGEOMETRY: 'geometry',\n\tGLOBALS: 'globals',\n\tLOGIC: 'logic',\n\tMATH: 'math',\n\tQUAT: 'quat',\n\tTRIGO: 'trigo',\n\tUTIL: 'util',\n\tINSTANCE: 'instance',\n};\nexport const CATEGORY_MAT = {\n\tADVANCED: 'advanced',\n\tMESH: 'meshes',\n\tPOINTS: 'points',\n\tLINE: 'lines',\n\tVOLUME: 'volumes',\n\tINSTANCE: 'instances',\n};\nexport const CATEGORY_SOP = {\n\tANIMATION: 'animation',\n\tATTRIBUTE: 'attributes',\n\tDYNAMICS: 'dynamics',\n\tINPUT: 'inputs',\n\tMISC: 'misc',\n\tMODIFIER: 'modifiers',\n\tRENDER: 'render',\n};\nexport const CATEGORY_POST = {\n\tPASS: 'passes',\n};\n","import {TypedNode} from '../_Base';\nimport {TextureContainer} from '../../containers/Texture';\nimport {Texture} from 'three/src/textures/Texture';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {PolyScene} from '../../scene/PolyScene';\nimport {FlagsControllerB} from '../utils/FlagsController';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {LuminanceFormat, HalfFloatType} from 'three/src/constants';\n\nconst INPUT_COP_NAME = 'input texture';\nconst DEFAULT_INPUT_NAMES = [INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME];\n\nvar size = 32;\nvar data = new Uint16Array(size);\nfor (var i = 0; i < size; i++) {\n\tdata[i] = 0x70e2; // Half float 10000\n}\nconst EMPTY_DATA_TEXTURE = new DataTexture(data, size, 1, LuminanceFormat, HalfFloatType);\n\nexport class TypedCopNode<K extends NodeParamsConfig> extends TypedNode<'TEXTURE', BaseCopNodeType, K> {\n\tcontainer_controller: TypedContainerController<TextureContainer> = new TypedContainerController<TextureContainer>(\n\t\tthis,\n\t\tTextureContainer\n\t);\n\tpublic readonly flags: FlagsControllerB = new FlagsControllerB(this);\n\t// private _typed_array = new Uint8ClampedArray(512 * 512 * 4);\n\t// protected _texture: Texture = new DataTexture(this._typed_array, 512, 512, RGBFormat);\n\t// get texture() {\n\t// \treturn this._data_texture;\n\t// }\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.COP;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseCopNode');\n\t}\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\t// if (this.flags.display) {\n\t\t// \tthis.flags.display.set(false);\n\t\t// }\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\tset_texture(texture: Texture) {\n\t\t// this._copy_texture(texture);\n\t\ttexture.name = this.full_path();\n\t\tthis.set_container(texture);\n\t}\n\tclear_texture() {\n\t\tthis.set_container(EMPTY_DATA_TEXTURE);\n\t}\n\n\t// private _copy_texture(texture: Texture) {\n\t// \tconsole.log('_copy_texture', texture);\n\t// \tif (texture instanceof DataTexture) {\n\t// \t\tthis._data_texture.image = texture.image;\n\t// \t} else {\n\t// \t\tconst canvas = document.createElement('canvas');\n\t// \t\t// document.body.appendChild(canvas);\n\t// \t\tconst width = texture.image.width;\n\t// \t\tconst height = texture.image.height;\n\t// \t\tcanvas.width = width;\n\t// \t\tcanvas.height = height;\n\t// \t\tconst context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\t// \t\tcontext.drawImage(texture.image, 0, 0);\n\t// \t\tconst image_data = context.getImageData(0, 0, width, height);\n\t// \t\tconsole.log(this._typed_array.length, image_data.data.length, image_data);\n\t// \t\tthis._data_texture.image = image_data;\n\t// \t}\n\t// \tthis._data_texture.format = texture.format;\n\t// \t// this._data_texture.mapping = texture.mapping;\n\t// \t// this._data_texture.wrapS = texture.wrapS;\n\t// \t// this._data_texture.wrapT = texture.wrapT;\n\t// \t// this._data_texture.minFilter = texture.minFilter;\n\t// \t// this._data_texture.magFilter = texture.magFilter;\n\t// \tthis._data_texture.needsUpdate = true;\n\t// \tconsole.log('updated data tex', this._data_texture);\n\n\t// \t// if (!this._texture || this._texture.uuid != texture.uuid) {\n\t// \t// \tif (!this._texture) {\n\t// \t// \t\tconsole.log('assign');\n\t// \t// \t\tthis._texture = texture.clone();\n\t// \t// \t\t// this._texture.name = this.full_path();\n\t// \t// \t} else {\n\t// \t// \t\tconsole.log('copy');\n\t// \t// \t\tconst keys = Object.keys(texture) as Array<keyof Texture>;\n\t// \t// \t\tconst protected_keys = ['uuid', 'name', 'node'];\n\t// \t// \t\tfor (let key of keys) {\n\t// \t// \t\t\tif (!protected_keys.includes(key)) {\n\t// \t// \t\t\t\tthis._texture[key] = texture[key] as never; // but why is 'never' needed?!\n\t// \t// \t\t\t}\n\t// \t// \t\t}\n\t// \t// \t}\n\t// \t// }\n\t// }\n}\n\nexport type BaseCopNodeType = TypedCopNode<any>;\nexport class BaseCopNodeClass extends TypedCopNode<any> {}\n","import lodash_merge from 'lodash/merge';\nimport lodash_intersection from 'lodash/intersection';\nimport lodash_difference from 'lodash/difference';\n// import {VertexColors} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n// import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\n// const THREE = {FrontSide, ShaderLib, ShaderMaterial, UniformsUtils, Vector2, VertexColors};\nimport {BaseNodeType, TypedNode} from '../../_Base';\n// import {ParamType} from '../../../../Engine/Param/_Module'\n\nimport {BaseGlShaderAssembler} from './assemblers/_Base';\nimport {GlobalsBaseController} from './globals/_Base';\n\n// import {JsonImportDispatcher} from '../../../io/json/import/Dispatcher';\nimport {JsonExportDispatcher} from '../../../io/json/export/Dispatcher';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {ShaderName} from '../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../Output';\nimport {GlobalsGlNode} from '../Globals';\n// import {BaseParamType} from '../../../params/_Base';\nimport {ParamJsonExporterData} from '../../../io/json/export/Param';\nimport {GlNodeChildrenMap} from '../../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n\n// interface BaseShaderAssemblerConstructor {\n// \tnew (): BaseGlShaderAssembler;\n// }\n// interface GlobalsBaseControllerConstructor {\n// \tnew (): GlobalsBaseController;\n// }\n\n// export function AssemblerOwner<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\tchildren_context() {\n// \t\t\treturn NodeContext.GL;\n// \t\t}\n\nexport class AssemblerControllerNode extends TypedNode<any, BaseNodeType, any> {\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tassembler_controller!: GlAssemblerController<BaseGlShaderAssembler>;\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n}\n\ntype BaseGlShaderAssemblerConstructor<A extends BaseGlShaderAssembler> = new (...args: any[]) => A;\nexport class GlAssemblerController<A extends BaseGlShaderAssembler> {\n\tprotected _assembler!: A;\n\tprivate _globals_handler: GlobalsBaseController | undefined; // = new GlobalsGeometryHandler(this);\n\tprivate _compile_required: boolean = true;\n\t// private _requester: BaseNodeSop;\n\t// private _recompiled: boolean = false;\n\tprivate _shaders_by_name: Map<ShaderName, string> = new Map();\n\n\tprivate _deleted_params_data: Map<string, ParamJsonExporterData<ParamType>> = new Map();\n\t// private _new_params: BaseParamType[] = [];\n\n\tconstructor(private node: AssemblerControllerNode, assembler_class: BaseGlShaderAssemblerConstructor<A>) {\n\t\t// if (assembler_class) {\n\t\tthis._assembler = new assembler_class(this.node);\n\t\t// }\n\t\t// this._shadow_depth_assembler = new ShaderAssemblerDepth()\n\t\t// this._shadow_distance_assembler = new ShaderAssemblerDistance()\n\n\t\t// this.self._init_hierarchy_children_owner();\n\n\t\t// let has_display_flag = false;\n\t\t// if (options['has_display_flag']) {\n\t\t// \thas_display_flag = options['has_display_flag'];\n\t\t// }\n\n\t\t// this.self._init_display_flag({\n\t\t// \thas_display_flag: has_display_flag,\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\n\t\t// this ensures that material re evaluate their uniforms\n\t\t// without having the SOP/Material recook\n\t\t// which can be a killer in an animation\n\t\t// But this should be tweaked so that it can recook all params of a node\n\t\t// this.self.add_post_dirty_hook(this.eval_params_and_assign_uniform_values.bind(this))\n\t\t// - UPDATE: this seems to work at the moment. The only issue is that\n\t\t// the particle system now updates 2x when recreating the shaders\n\t\t// but that's fixed with update_on_dirty\n\t\t// - UPDATE 2: now that the params have been refactored, let's try without this\n\t\t// if (options['update_on_dirty'] != false) {\n\t\t// \tthis.self.add_post_dirty_hook(this.cook_main_if_scene_loaded.bind(this));\n\t\t// }\n\t}\n\tset_assembler_globals_handler(globals_handler: GlobalsBaseController) {\n\t\tconst current_id = this._globals_handler ? this._globals_handler.id() : null;\n\t\tconst new_id = globals_handler ? globals_handler.id() : null;\n\n\t\tif (current_id != new_id) {\n\t\t\tthis._globals_handler = globals_handler;\n\t\t\tthis.set_compilation_required_and_dirty();\n\t\t\tthis._assembler.reset_configs();\n\t\t}\n\t}\n\tget assembler() {\n\t\treturn this._assembler;\n\t}\n\tget shaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\tget globals_handler() {\n\t\treturn this._globals_handler;\n\t}\n\n\t// gltf_supported_material() {\n\t// \treturn this._assembler.constructor.convert_material_to_gltf_supported(this._material);\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tthis._assembler.add_output_params(output_child);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tthis._assembler.add_globals_params(globals_node);\n\t}\n\tallow_attribute_exports() {\n\t\treturn this._assembler.allow_attribute_exports();\n\t}\n\n\ton_create() {\n\t\tconst globals = this.node.create_node('globals');\n\t\tconst output = this.node.create_node('output');\n\n\t\tglobals.ui_data.set_position(new Vector2(-200, 0));\n\t\toutput.ui_data.set_position(new Vector2(200, 0));\n\t}\n\n\t// async compile_if_required() {\n\t// \t// this._recompiled = false;\n\t// \tif (this.compile_required()) {\n\t// \t\t// && !this._param_locked){\n\t// \t\tconst new_material = await this.run_assembler();\n\t// \t\tif (new_material) {\n\t// \t\t\tawait this.node.params.eval_params(this._new_params);\n\t// \t\t\tthis._material = new_material;\n\t// \t\t\t// this._recompiled = true;\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`${this.node.full_path()} failed to generate a material`);\n\t// \t\t}\n\t// \t}\n\t// \tawait this.assign_uniform_values();\n\t// }\n\tset_compilation_required() {\n\t\tthis._compile_required = true;\n\t}\n\tset_compilation_required_and_dirty(trigger_node?: BaseGlNodeType) {\n\t\t// it may be useful to send the trigger node here\n\t\t// but in the end, the material needs to recook fully\n\t\t// in order to properly assign the uniforms\n\t\t// (unless there is a way to re-assign the same value to a uniform that is not meant to be updated)\n\t\tthis.set_compilation_required();\n\t\tthis.node.set_dirty(trigger_node);\n\t}\n\tcompile_required(): boolean {\n\t\treturn this._compile_required;\n\t}\n\n\t// set_root_nodes(nodes: BaseGlNodeType[]) {\n\t// \tthis.assembler.set_root_nodes(nodes);\n\t// }\n\t// set_node_lines_globals(globals_node: GlobalsGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_globals(globals_node, shader_name);\n\t// }\n\t// set_node_lines_output(output_node: OutputGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_output(output_node, shader_name);\n\t// }\n\t// set_node_lines_attribute(attribute_node: AttributeGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_attribute(attribute_node, shader_name);\n\t// }\n\n\tasync post_compile() {\n\t\tif (!this._compile_required) {\n\t\t\treturn;\n\t\t}\n\t\t// this.assembler.compile_for_node(this._gl);\n\t\tthis.create_spare_parameters();\n\t\tthis._compile_required = false;\n\t}\n\n\t// private async run_assembler() {\n\t// \tconst output_node = this.find_output_node();\n\t// \tif (output_node) {\n\t// \t\tthis._assembler.set_root_nodes([output_node]);\n\t// \t}\n\t// \tthis.assembler.compile();\n\t// \tconst material = await this._assembler.get_material();\n\t// \tif (material) {\n\t// \t\tthis._shaders_by_name.set(ShaderName.VERTEX, material.vertexShader);\n\t// \t\tthis._shaders_by_name.set(ShaderName.FRAGMENT, material.fragmentShader);\n\n\t// \t\t// assign custom materials\n\t// \t\tconst custom_materials = await this._assembler.get_custom_materials();\n\t// \t\tconst material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t// \t\tmaterial_with_custom_materials.custom_materials = {};\n\t// \t\tcustom_materials.forEach((custom_material, shader_name) => {\n\t// \t\t\tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t// \t\t});\n\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tthis._compile_required = false;\n\t// \treturn material;\n\t// }\n\n\t// find_output_node() {\n\t// \tconst nodes = this.node.nodes_by_type('output');\n\t// \tif (nodes.length > 1) {\n\t// \t\tthis.node.states.error.set('only one output node allowed');\n\t// \t}\n\t// \treturn nodes[0];\n\t// }\n\t// find_attribute_export_nodes() {\n\t// \tconst nodes = this.node.nodes_by_type('attribute');\n\t// \treturn nodes.filter((node) => {\n\t// \t\t// do not use attributes that are used as an input, as export\n\t// \t\t// return (node.used_output_names().length == 0) &&\n\t// \t\treturn node.is_exporting;\n\t// \t});\n\t// }\n\t// add_output_body_line(output_node, shader_name: ShaderName, input_name: string){\n\t// \tconst input = output_node.named_input(input_name)\n\t// \tconst var_input = output_node.variable_for_input(input_name)\n\t// \tconst variable_config = this.variable_config(input_name)\n\t// \tconst default_value = variable_config.default()\n\t// \tconst prefix = variable_config.prefix()\n\t// \tconst suffix = variable_config.suffix()\n\t// \tconst new_var = input ? ThreeToGl.vector3(var_input) : default_value\n\t// \tif(new_var){\n\t// \t\toutput_node.add_body_lines([`${prefix}${new_var}${suffix}`], shader_name)\n\t// \t}\n\t// }\n\t// set_output_node_lines(output_node){\n\t// \tfor(let shader_name of this.shader_names()){\n\t// \t\tconst body_lines = []\n\t// \t\tconst input_names = this.shader_config(shader_name).input_names()\n\t// \t\toutput_node.set_body_lines([], shader_name)\n\t// \t\tif(input_names){\n\t// \t\t\tfor(let input_name of input_names){\n\t// \t\t\t\tthis.add_output_body_line(output_node, shader_name, input_name)\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t// const vertex_body_lines = []\n\t// \t// const fragment_body_lines = []\n\n\t// \t// const named_input_position = this.named_input('position')\n\t// \t// const named_input_point_size = this.named_input('gl_PointSize')\n\t// \t// const named_input_normal = this.named_input('normal')\n\n\t// \t// const var_position = this.variable_for_input('position')\n\t// \t// const var_normal = this.variable_for_input('normal')\n\t// \t// const color = this.variable_for_input('color')\n\t// \t// const alpha = this.variable_for_input('alpha')\n\t// \t// const var_point_size = this.variable_for_input('gl_PointSize')\n\n\t// \t// fragment_body_lines.push( `${this._color_declaration} = ${ThreeToGl.vector3_float(color, alpha)}` )\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \t// const new_position_var = named_input_position ? ThreeToGl.vector3(var_position) : 'vec3( position )'\n\t// \t// vertex_body_lines.push( `vec3 transformed = ${new_position_var}` )\n\n\t// \t// if(this.parent().is_point_material()){\n\t// \t// \tconst new_point_size_var = named_input_point_size ? ThreeToGl.float(var_point_size) : '1.0'\n\t// \t// \tvertex_body_lines.push( `float size2 = size * ${new_point_size_var}` )\n\t// \t// }\n\n\t// \t// if(named_input_normal){\n\t// \t// \tconst new_normal_var = ThreeToGl.vector3(var_normal)\n\t// \t// \tvertex_body_lines.push(`objectNormal = ${new_normal_var}`)\n\t// \t// }\n\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\t// }\n\t// private async eval_params_and_assign_uniform_values() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tif (this._assembler) {\n\t// \t\tawait this.self.eval_all_params();\n\t// \t\tawait this.assign_uniform_values();\n\t// \t}\n\t// }\n\t// private async cook_main_if_scene_loaded() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (this.self.params_referree().length > 0) {\n\t// \t\tawait this.self.cook_main();\n\t// \t}\n\t// \t// this.cook_main_without_inputs()\n\t// }\n\tasync assign_uniform_values() {\n\t\tif (this._assembler) {\n\t\t\tfor (let param_config of this._assembler.param_configs()) {\n\t\t\t\tawait param_config.set_uniform_value(this.node);\n\t\t\t}\n\t\t}\n\t}\n\n\t// process_uniforms(renderer, display_scene, camera, geometry, material, group) {\n\t// \tconst scene_frame = this.scene().frame()\n\n\t// \tconst material_frame = material.uniforms.frame\n\t// \tif(material_frame){ // check needed in case this method is given a post process material\n\t// \t\tmaterial.uniforms.frame.value = scene_frame\n\t// \t}\n\n\t// \tconst custom_materials = material.custom_materials\n\t// \tif(custom_materials){\n\t// \t\tfor(let custom_material_name of Object.keys(custom_materials)){\n\t// \t\t\tconst custom_material = custom_materials[custom_material_name]\n\t// \t\t\tcustom_material.uniforms.frame.value = scene_frame\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// create_material(){\n\t// \tconst template_shader = THREE.ShaderLib.basic\n\n\t// \tconst uniforms = THREE.UniformsUtils.clone( template_shader.uniforms )\n\t// \t// uniforms['frame'] = {\n\t// \t// \ttype: '1f',\n\t// \t// \tvalue: 1\n\t// \t// }\n\n\t// \tconst material = new THREE.ShaderMaterial({\n\t// \t\t// vertexColors: THREE.VertexColors,\n\t// \t\t// side: THREE.FrontSide,\n\t// \t\t// transparent: true,\n\t// \t\t// fog: true,\n\t// \t\t// lights: false,\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: template_shader.vertexShader,\n\t// \t\tfragmentShader: template_shader.fragmentShader\n\t// \t})\n\t// \tthrow \"wtf\"\n\t// \treturn material\n\t// }\n\tcreate_spare_parameters() {\n\t\tconst current_spare_param_names: string[] = this.node.params.spare_names;\n\t\tconst param_configs = this._assembler.param_configs();\n\t\tconst assembler_param_names = param_configs.map((c) => c.name);\n\t\t// TODO: also remove the params that change type\n\t\tconst spare_param_names_to_add = lodash_difference(assembler_param_names, current_spare_param_names);\n\t\tconst spare_param_names_to_remove = lodash_difference(current_spare_param_names, assembler_param_names);\n\t\t// this._new_params = [];\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\t// check that param_names_to_add does not include any currently existing param names (that are not spare)\n\t\tconst current_param_names = this.node.params.names;\n\t\tconst spare_params_with_same_name_as_params = lodash_intersection(\n\t\t\tspare_param_names_to_add,\n\t\t\tcurrent_param_names\n\t\t);\n\t\tif (spare_params_with_same_name_as_params.length > 0) {\n\t\t\tconst error_message = `${this.node.full_path()} attempts to create spare params called '${spare_params_with_same_name_as_params.join(\n\t\t\t\t', '\n\t\t\t)}' with same name as params`;\n\t\t\tconsole.warn(error_message);\n\t\t\tthis.node.states.error.set(error_message);\n\t\t}\n\n\t\tspare_param_names_to_remove.forEach((param_name) => {\n\t\t\t// store the param data, in case it gets recreated later\n\t\t\t// this allows expressions to be kept in memory\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param);\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tthis._deleted_params_data.set(param.name, params_data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t});\n\n\t\t// this.within_param_folder('spare_params', () => {\n\t\tfor (let param_config of param_configs) {\n\t\t\tif (spare_param_names_to_add.indexOf(param_config.name) >= 0) {\n\t\t\t\t// TODO: shouldn't it be cook: false ??\n\t\t\t\t// as there is no need to cook the node if I'm only changing the uniform\n\t\t\t\t// unless maybe for textures?\n\t\t\t\t// but if cook is false, there is no reason for it to be updated\n\t\t\t\tconst options = lodash_merge(param_config.param_options, {spare: true, cook: true});\n\n\t\t\t\t// const param = this.node.add_param(\n\t\t\t\t// \tparam_config.type,\n\t\t\t\t// \tparam_config.name,\n\t\t\t\t// \tparam_config.default_value,\n\t\t\t\t// \toptions\n\t\t\t\t// );\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_config.name,\n\t\t\t\t\ttype: param_config.type,\n\t\t\t\t\tinit_value: param_config.default_value as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (param) {\n\t\t\t\t// \t// restore saved state, like expressions\n\t\t\t\t// \tconst param_data = this._deleted_params_data.get(param.name);\n\t\t\t\t// \tif (param_data) {\n\t\t\t\t// \t\t// TODO: typescript\n\t\t\t\t// \t\t// JsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t// looks like there are still some cases where the expression are not recreated\n\t\t\t\t// \t\t// so commenting this out now\n\t\t\t\t// \t\t// delete this._deleted_params_data[param.name()]\n\t\t\t\t// \t}\n\n\t\t\t\t// \tthis._new_params.push(param);\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tthis.node.params.update_params(params_update_options);\n\t\t// if (spare_param_names_to_add.length > 0 || spare_param_names_to_remove.length > 0) {\n\t\t// \tthis.node.params.post_create_spare_params();\n\t\t// \tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t// }\n\t}\n}\n","export default \"\\n\\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\\nvec4 quat_mult(vec4 q1, vec4 q2)\\n{\\n\\treturn vec4(\\n\\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\\n\\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\\n\\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\\n\\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\\n\\t);\\n}\\n// http://glmatrix.net/docs/quat.js.html#line97\\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\\n\\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\\n\\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\\n\\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\\n\\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\\n\\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\\n\\n//   return out\\n\\n\\n\\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\\nmat4 rotationMatrix(vec3 axis, float angle)\\n{\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\n \\treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\\n}\\n\\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\\nvec4 quat_from_axis_angle(vec3 axis, float angle)\\n{\\n\\tvec4 qr;\\n\\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\\n\\tfloat sin_half_angle = sin(half_angle);\\n\\tqr.x = axis.x * sin_half_angle;\\n\\tqr.y = axis.y * sin_half_angle;\\n\\tqr.z = axis.z * sin_half_angle;\\n\\tqr.w = cos(half_angle);\\n\\treturn qr;\\n}\\nvec3 rotate_with_axis_angle(vec3 position, vec3 axis, float angle)\\n{\\n\\tvec4 q = quat_from_axis_angle(axis, angle);\\n\\tvec3 v = position.xyz;\\n\\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\\n// \\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n// }\\nvec3 rotate_with_quat( vec3 v, vec4 q )\\n{\\n\\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\\n\\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\\n\\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n}\\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target - origin);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n// mat3 rotation_matrix(vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n\\nfloat vector_angle(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 c1 = cross(start, dest);\\n\\t// We use the dot product of the cross with the Y axis.\\n\\t// This is a little arbitrary, but can still give a good sense of direction\\n\\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\\n\\tfloat d1 = dot(c1, y_axis);\\n\\tfloat angle = acos(cosTheta) * sign(d1);\\n\\treturn angle;\\n}\\n\\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\\nvec4 vector_align(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 axis;\\n\\n\\t// if (cosTheta < -1 + 0.001f){\\n\\t// \\t// special case when vectors in opposite directions:\\n\\t// \\t// there is no \\\"ideal\\\" rotation axis\\n\\t// \\t// So guess one; any will do as long as it's perpendicular to start\\n\\t// \\taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\\n\\t// \\tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\\n\\t// \\t\\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\\n\\n\\t// \\taxis = normalize(axis);\\n\\t// \\treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\\n\\t// }\\n\\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\\n\\t\\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\\n\\t\\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\\n\\t\\t\\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\\n\\t\\t}\\n\\t} else {\\n\\t\\taxis = normalize(cross(start, dest));\\n\\t}\\n\\n\\tfloat angle = acos(cosTheta);\\n\\n\\treturn quat_from_axis_angle(axis, angle);\\n}\\nvec4 vector_align_with_up(vec3 start, vec3 dest, vec3 up){\\n\\tvec4 rot1 = vector_align(start, dest);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\t// vec3 right = normalize(cross(dest, up));\\n\\t// up = normalize(cross(right, dest));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(up, newUp);\\n\\n\\t// return rot1;\\n\\treturn rot2;\\n\\t// return multQuat(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\\n\\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\nfloat quat_to_angle(vec4 q){\\n\\treturn 2.0 * acos(q.w);\\n}\\nvec3 quat_to_axis(vec4 q){\\n\\treturn vec3(\\n\\t\\tq.x / sqrt(1.0-q.w*q.w),\\n\\t\\tq.y / sqrt(1.0-q.w*q.w),\\n\\t\\tq.z / sqrt(1.0-q.w*q.w)\\n\\t);\\n}\\n\\nvec4 align(vec3 dir, vec3 up){\\n\\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\\n\\tvec3 start_up = vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot1 = vector_align(start_dir, dir);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\tvec3 right = normalize(cross(dir, up));\\n\\tif(length(right)<0.001){\\n\\t\\tright = vec3(1.0, 0.0, 0.0);\\n\\t}\\n\\tup = normalize(cross(right, dir));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(normalize(newUp), up);\\n\\n\\t// return rot1;\\n\\treturn quat_mult(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\"","// import {Vector3} from 'three/src/math/Vector3';\n// import {Texture} from 'three/src/textures/Texture';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n// const THREE = {Color, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Raycaster, Texture, Vector3}\n// import lodash_isNaN from 'lodash/isNaN'\n// import lodash_sum from 'lodash/sum'\n// import {BaseParam} from '../../../../../../Engine/Param/_Base'\n// import {BaseNodePostProcess} from '../../../../../../Engine/Node/PostProcess/_Base'\nimport {BaseCameraObjNodeType} from '../../../_BaseCamera';\nimport {BaseMatNodeType} from '../../../../mat/_Base';\n// import {NodeContext} from '../../../../../poly/NodeContext';\n// import {ParamType} from '../../../../../poly/ParamType';\n// import {EffectComposer} from '../../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer'\n// import {RenderPass} from '../../../../../../../modules/three/examples/jsm/postprocessing/RenderPass'\n\n// import {File} from '../../../../../../Engine/Node/Cop/File'\n\n// import {ScreenQuad} from '../Camera/ScreenQuad'\nimport {NodeContext} from '../../../../../poly/NodeContext';\n\nimport {ParamConfig} from '../../../../utils/params/ParamsConfig';\nexport function CameraBackgroundParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tbackground = ParamConfig.FOLDER();\n\t\tuse_background = ParamConfig.BOOLEAN(0);\n\t\tuse_material = ParamConfig.BOOLEAN(0, {\n\t\t\tvisible_if: {use_background: true},\n\t\t});\n\t\tbackground_color = ParamConfig.COLOR([0, 0, 0], {\n\t\t\tvisible_if: {use_background: true, use_material: false},\n\t\t});\n\t\tbackground_material = ParamConfig.OPERATOR_PATH('', {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t\tnode_selection: {context: NodeContext.MAT},\n\t\t\tdependent_on_found_node: false,\n\t\t});\n\t\tbackground_ratio = ParamConfig.FLOAT(1, {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t});\n\t};\n}\n\nexport class BaseBackgroundController {\n\t// private _param_use_background: boolean;\n\t// private _param_use_material: boolean;\n\t// private _param_background_color: Color;\n\t// private _param_background_material: string;\n\t// private _param_background_ratio: number;\n\n\tprivate _screen_quad: Mesh | undefined;\n\tprivate _screen_quad_flat_material: MeshBasicMaterial | undefined;\n\n\tprotected _bg_raycaster = new Raycaster();\n\n\tconstructor(protected node: BaseCameraObjNodeType) {}\n\n\tget screen_quad() {\n\t\treturn (this._screen_quad = this._screen_quad || this._create_screen_quad()); // new ScreenQuad()\n\t}\n\tprivate _create_screen_quad() {\n\t\tconst size = 2; // better than 1 for color, as the edges can be visible if canvas ratio extreme\n\t\tconst segments = 1;\n\t\tconst geometry = new PlaneBufferGeometry(size, size, segments, segments);\n\t\tconst quad = new Mesh(geometry);\n\t\tthis.node.object.add(quad);\n\t\treturn quad;\n\t}\n\tscreen_quad_flat_material() {\n\t\treturn (this._screen_quad_flat_material = this._screen_quad_flat_material || new MeshBasicMaterial());\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('background', () => {\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_background', 0);\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_material', 0, {\n\t\t// \tvisible_if: {use_background: true},\n\t\t// });\n\t\t// this.node.add_param(ParamType.COLOR, 'background_color', [0, 0, 0], {\n\t\t// \tvisible_if: {use_background: true, use_material: false},\n\t\t// });\n\t\t// this.node.add_param(ParamType.OPERATOR_PATH, 'background_material', '', {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// \tnode_selection: {context: NodeContext.MAT},\n\t\t// \tdependent_on_found_node: false,\n\t\t// });\n\t\t// this.node.add_param(ParamType.FLOAT, 'background_ratio', 1, {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// });\n\t\t// });\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_color', 1 )\n\t\t// this.self.add_param( ParamType.COLOR, 'background_color', [0,0,0], {\n\t\t// \tvisible_if: {use_background_color: 1}\n\t\t// })\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_image', 0 )\n\t\t// this.self.add_param( ParamType.OPERATOR_PATH, 'background_image', File.DEFAULT_NODE_PATH.UV, {\n\t\t// \tvisible_if: {use_background_image: true},\n\t\t// \tnode_selection: {context: NodeContext.COP}\n\t\t// } )\n\t}\n\n\tget use_background(): boolean {\n\t\treturn this.node.params.boolean('use_background');\n\t}\n\tget use_background_material(): boolean {\n\t\treturn this.use_background && this.node.params.boolean('use_material');\n\t}\n\tget use_background_color(): boolean {\n\t\treturn this.use_background && !this.node.params.boolean('use_material');\n\t}\n\tget background_color(): Color | null {\n\t\tif (this.use_background_color) {\n\t\t\treturn this.node.params.color('background_color');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t// background_image_url(){\n\t// \tif(this._param_use_background_image){\n\t// \t\t// this.param('background_image').mark_as_referencing_asset(this._param_background_image)\n\t// \t\t// return this._param_background_image\n\t// \t\treturn this._background_image_url\n\t// \t}\n\t// }\n\t// background_texture(){\n\t// \tif(this._param_use_background_image){\n\t// \t\treturn this._background_texture\n\t// \t}\n\t// }\n\tprotected update_screen_quad() {}\n\tasync update() {\n\t\tif (this.use_background) {\n\t\t\tthis.update_screen_quad();\n\n\t\t\tawait this.update_background_color();\n\t\t\tif (this.use_background_material) {\n\t\t\t\tawait this.update_background_material();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._screen_quad) {\n\t\t\t\tthis.node.object.remove(this._screen_quad);\n\t\t\t}\n\t\t}\n\n\t\t// if(this._param_use_background_image){\n\t\t// \tconst bg_node = this.self.param('background_image').found_node();\n\t\t// \tif(bg_node){\n\t\t// \t\tconst container = await bg_node.request_container();\n\t\t// \t\tthis._background_texture = container.core_content()\n\t\t// \t\t// this._background_image_url = bg_node.resolved_url()\n\t\t// \t} else {\n\t\t// \t\tthis._background_texture = null\n\t\t// \t}\n\t\t// } else {\n\t\t// \tthis._background_texture = null\n\t\t// }\n\t}\n\tprivate async update_background_color() {\n\t\tconst material = this.screen_quad_flat_material();\n\t\tmaterial.color = this.node.pv.background_color;\n\t\tthis.screen_quad.material = material;\n\t}\n\n\tprivate async update_background_material() {\n\t\tconst bg_node = this.node.p.background_material.found_node() as BaseMatNodeType;\n\t\tif (bg_node) {\n\t\t\tawait bg_node.request_container();\n\t\t\tconst material = bg_node.material;\n\t\t\tthis.screen_quad.material = material;\n\t\t\t// this.screen_quad().material.uniforms.uTexture.value = texture\n\t\t} else {\n\t\t\tthis.node.states.error.set('bg node not found');\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\nimport {TypedParam} from './_Base';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport abstract class TypedMultipleParam<T extends ParamType> extends TypedParam<T> {\n\tprivate _components_contructor = FloatParam;\n\tprotected _components!: FloatParam[];\n\tget components() {\n\t\treturn this._components;\n\t}\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default() {\n\t\tfor (let c of this.components) {\n\t\t\tif (!c.is_default) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._components.map((c) => c.raw_input) as ParamInitValueSerializedTypeMap[T];\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\n\tinit_components() {\n\t\tif (this._components != null) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = 0;\n\t\tthis._components = new Array(this.component_names.length);\n\t\tfor (let component_name of this.component_names) {\n\t\t\tconst component = new this._components_contructor(this.scene); //, `${this.name}${name}`);\n\t\t\tlet default_val;\n\t\t\tif (lodash_isArray(this._default_value)) {\n\t\t\t\tdefault_val = this._default_value[index];\n\t\t\t} else {\n\t\t\t\tdefault_val = (this._default_value as any)[component_name];\n\t\t\t}\n\t\t\tcomponent.options.copy(this.options);\n\t\t\tcomponent.set_init_value(default_val);\n\n\t\t\t// component.set_scene(this.scene);\n\t\t\tcomponent.set_name(`${this.name}${component_name}`);\n\t\t\tcomponent.set_parent_param(this);\n\n\t\t\tthis.add_graph_input(component);\n\t\t\t// component.initialize();\n\t\t\tthis._components[index] = component;\n\t\t\tindex++;\n\t\t}\n\t\t// this.compute();\n\t}\n\n\tprotected async process_computation(): Promise<void> {\n\t\tawait this.compute_components();\n\t\tthis.set_value_from_components();\n\t}\n\tset_value_from_components() {}\n\t// set_raw_input_from_components() {}\n\n\thas_expression() {\n\t\tfor (let c of this.components) {\n\t\t\tif (c.expression_controller?.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async compute_components() {\n\t\tconst components = this.components;\n\t\t// const component_evaluation_states = lodash_map(components, ()=> false);\n\t\t// const expected_values_count = components.length;\n\t\t// const component_values = [];\n\t\t// let component;\n\t\t// return lodash_each(this.components(), (component, index)=> {\n\t\tconst promises = [];\n\t\tfor (let c of components) {\n\t\t\tif (c.is_dirty) {\n\t\t\t\tpromises.push(c.compute()); //component_value=> {\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\t// component_values[index] = component_value;\n\t\t// component_evaluation_states[index] = true;\n\t\t// const evaluated_values_count = lodash_compact(component_evaluation_states).length;\n\t\t// check if all components have been evaluated succesfully\n\t\t// if (evaluated_values_count === expected_values_count) {\n\t\tthis.remove_dirty_state();\n\t\t// return component_values;\n\t\t// }\n\t\t// });\n\t\t// }\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (!lodash_isArray(raw_input)) {\n\t\t\tconst number_or_string = raw_input as number | string;\n\t\t\tconst raw_input_wrapped_in_array: StringOrNumber[] = this.components.map(() => number_or_string);\n\t\t\treturn raw_input_wrapped_in_array as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tconst cooker = this.scene.cooker;\n\t\tcooker.block();\n\t\tconst components = this.components;\n\t\tfor (let c of components) {\n\t\t\tc.emit_controller.block_parent_emit();\n\t\t}\n\n\t\t// if (lodash_isArray(values)) {\n\t\tconst value = this._raw_input;\n\t\tif (lodash_isArray(value)) {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tcomponents[i].set((value as any)[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tconst component_name = this.component_names[i];\n\t\t\t\tcomponents[i].set((value as any)[component_name]);\n\t\t\t}\n\t\t}\n\t\t// } else {\n\t\t// \tconst component_names = this.component_names()\n\t\t// \tfor (let i = 0; i < components.length; i++) {\n\t\t// \t\tcomponents[i].set(values[component_names[i]])\n\t\t// \t}\n\t\t// }\n\n\t\tcooker.unblock();\n\n\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\tcomponents[i].emit_controller.unblock_parent_emit();\n\t\t}\n\t\t// this.emit(ParamEvent.UPDATED);\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n}\n\n// export class BaseMultipleParam extends TypedMultipleParam<Vector> {}\n","import lodash_sortBy from 'lodash/sortBy';\n// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {RGBFormat} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {CubicInterpolant} from 'three/src/math/interpolants/CubicInterpolant';\n// import {ClampToEdgeWrapping} from 'three/src/constants'\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {RampValue, RampPoint, RampValueJson, RampInterpolation} from './ramp/RampValue';\n\n// import {AsCodeRamp} from './concerns/visitors/Ramp';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\n\n// interface RampParamVisitor extends TypedParamVisitor {\n// \tvisit_ramp_param: (param: RampParam) => any;\n// }\n\nexport class RampParam extends TypedParam<ParamType.RAMP> {\n\tstatic type() {\n\t\treturn ParamType.RAMP;\n\t}\n\n\tprivate _ramp_interpolant: CubicInterpolant | undefined;\n\tprivate _ramp_texture: DataTexture | undefined;\n\n\tstatic DEFAULT_VALUE = new RampValue(RampInterpolation.LINEAR, [new RampPoint(0, 0), new RampPoint(1, 1)]);\n\tstatic DEFAULT_VALUE_JSON: RampValueJson = RampParam.DEFAULT_VALUE.to_json();\n\n\tget default_value_serialized() {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.default_value.to_json();\n\t\t} else {\n\t\t\treturn this.default_value;\n\t\t}\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.RAMP]) {\n\t\tif (raw_input instanceof RampValue) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\treturn RampValue.from_json(raw_input).to_json();\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\treturn this._raw_input.to_json();\n\t\t} else {\n\t\t\treturn RampValue.from_json(this._raw_input).to_json();\n\t\t}\n\t}\n\tget value_serialized() {\n\t\treturn this.value.to_json();\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.RAMP],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.RAMP]\n\t) {\n\t\tif (raw_input1 instanceof RampValue) {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input1.is_equal(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.is_equal_json(raw_input2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input2.is_equal_json(raw_input1);\n\t\t\t} else {\n\t\t\t\treturn RampValue.are_json_equal(raw_input1, raw_input2);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.RAMP], val2: ParamValuesTypeMap[ParamType.RAMP]) {\n\t\treturn val1.is_equal(val2);\n\t}\n\tprivate _reset_ramp_interpolant_and_texture_bound = this._reset_ramp_interpolant_and_texture.bind(this);\n\tinitialize_param() {\n\t\tthis.add_post_dirty_hook('_reset_ramp_interpolant_and_texture', this._reset_ramp_interpolant_and_texture_bound);\n\t}\n\t// accepts_visitor(visitor: RampParamVisitor) {\n\t// \treturn visitor.visit_ramp_param(this);\n\t// }\n\tget is_default(): boolean {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.value.is_equal(this.default_value);\n\t\t} else {\n\t\t\treturn this.value.is_equal_json(this.default_value);\n\t\t}\n\t}\n\tprotected process_raw_input() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t} else {\n\t\t\t\tthis._value.copy(this._raw_input);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = RampValue.from_json(this._raw_input);\n\t\t\t} else {\n\t\t\t\tthis._value.from_json(this._raw_input);\n\t\t\t}\n\t\t}\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\t// convert_value(v) {\n\t// \tlet is_json = false\n\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = JSON.parse(v)\n\t// \t\tis_json = true\n\t// \t}\n\n\t// \tif (!is_json) {\n\t// \t\tif (v.interpolation && v.points) {\n\t// \t\t\tif (lodash_isArray(v.points)) {\n\t// \t\t\t\tis_json = true\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (is_json) {\n\t// \t\tv = RampValue.from_json(v)\n\t// \t}\n\n\t// \treturn v\n\t// }\n\t// convert_default_value(v) {\n\t// \treturn this.convert_value(v)\n\t// }\n\n\thas_expression() {\n\t\treturn false;\n\t}\n\n\t_reset_ramp_interpolant_and_texture() {\n\t\tthis._ramp_interpolant = undefined;\n\t\tthis._ramp_texture = undefined;\n\t}\n\tramp_texture() {\n\t\treturn (this._ramp_texture = this._ramp_texture || this._create_ramp_texture());\n\t}\n\t_create_ramp_texture() {\n\t\tconst width = 1024;\n\t\tconst height = 1;\n\n\t\tconst size = width * height;\n\t\tconst data = new Uint8Array(3 * size);\n\n\t\tlet stride = 0;\n\t\tlet position = 0;\n\t\tlet value = 0;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tstride = i * 3;\n\t\t\tposition = i / width;\n\t\t\tvalue = this.value_at_position(position);\n\t\t\tdata[stride] = value * 255; // if I set 256, a value of 1 will become 0\n\t\t\t// data[ stride+1 ] = 1\n\t\t\t// data[ stride+2 ] = 2\n\t\t}\n\n\t\tconst texture = new DataTexture(data, width, height, RGBFormat);\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\tstatic create_interpolant(positions: Float32Array, values: Float32Array) {\n\t\tconst values_count = 1;\n\t\tconst interpolated_values = new Float32Array(values_count);\n\t\treturn new CubicInterpolant(positions, values, values_count, interpolated_values);\n\t}\n\tinterpolant() {\n\t\treturn (this._ramp_interpolant = this._ramp_interpolant || this._create_interpolant());\n\t}\n\t_create_interpolant() {\n\t\tconst points = this.value.points;\n\t\tconst sorted_points = lodash_sortBy(points, (point) => point.position);\n\t\tconst positions = new Float32Array(sorted_points.length);\n\t\tconst values = new Float32Array(sorted_points.length);\n\n\t\tlet i = 0;\n\t\tfor (let sorted_point of sorted_points) {\n\t\t\tpositions[i] = sorted_point.position;\n\t\t\tvalues[i] = sorted_point.value;\n\t\t\ti++;\n\t\t}\n\n\t\treturn RampParam.create_interpolant(positions, values);\n\t}\n\n\tvalue_at_position(position: number): number {\n\t\treturn (<unknown>this.interpolant().evaluate(position)[0]) as number;\n\t}\n}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nimport {ParamOptions} from '../../../params/utils/OptionsController';\n\ntype OverridenOptions = Dictionary<string>;\n\nexport type SimpleParamJsonExporterData<T extends ParamType> = ParamInitValueSerializedTypeMap[T];\n\nexport interface ComplexParamJsonExporterData<T extends ParamType> {\n\ttype?: T;\n\tdefault_value?: ParamInitValueSerializedTypeMap[T];\n\traw_input?: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n\toverriden_options?: OverridenOptions;\n\t// components?: ParamJsonExporterDataByName;\n\t// expression?: string;\n}\nexport type ParamJsonExporterData<T extends ParamType> =\n\t| SimpleParamJsonExporterData<T>\n\t| ComplexParamJsonExporterData<T>;\nexport type ParamJsonExporterDataByName = Dictionary<ParamJsonExporterData<ParamType>>;\n\nexport class ParamJsonExporter<T extends BaseParamType> {\n\t// protected _simple_data: SimpleParamJsonExporterData<ParamType>=0;\n\tprotected _complex_data: ComplexParamJsonExporterData<ParamType> = {};\n\tconstructor(protected _param: T) {}\n\n\tget required(): boolean {\n\t\tconst is_spare_and_not_component = this._param.options.is_spare && !this._param.parent_param;\n\n\t\t// we should not need to check if it has an expression anymore,\n\t\t// as it could have an expression AND be of default value\n\t\tconst value_changed = !this._param.is_default; //|| this._param.has_expression();\n\t\t// const referencing_asset = this._param.is_referencing_asset()\n\t\treturn is_spare_and_not_component || value_changed; // || referencing_asset\n\t}\n\n\tdata() {\n\t\tif (this._param.parent_param) {\n\t\t\tconsole.warn('no component should be saved');\n\t\t\tthrow 'no component should be saved';\n\t\t}\n\n\t\tif (this._require_data_complex()) {\n\t\t\treturn this._data_complex();\n\t\t} else {\n\t\t\treturn this._data_simple();\n\t\t}\n\t}\n\n\tprivate _data_simple() {\n\t\treturn this._param.raw_input_serialized;\n\t}\n\n\tprivate _data_complex() {\n\t\tthis._complex_data = {};\n\n\t\tif (this._param.options.is_spare && !this._param.parent_param) {\n\t\t\tthis._complex_data['type'] = this._param.type;\n\t\t\tthis._complex_data['default_value'] = this._param.default_value_serialized;\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t\tthis._complex_data['options'] = this._param.options.current;\n\t\t}\n\n\t\tif (!this._param.is_default) {\n\t\t\tthis.add_main();\n\t\t}\n\n\t\t// if(this._param.is_referencing_asset()){\n\t\t// \t// console.log(\"this._param.is_referencing_asset()\", this._param.is_referencing_asset())\n\t\t// \tthis._data['referenced_asset'] = this._param.referenced_asset()\n\t\t// }\n\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\tconst overridden_options: OverridenOptions = {};\n\t\t\tconst options_overridden = this._param.options.overridden_options;\n\t\t\tfor (let option_name of Object.keys(options_overridden)) {\n\t\t\t\tconst option_value = options_overridden[option_name as keyof ParamOptions];\n\t\t\t\toverridden_options[option_name] = JSON.stringify(option_value);\n\t\t\t}\n\t\t\tthis._complex_data['overriden_options'] = overridden_options;\n\t\t}\n\t\treturn this._complex_data;\n\t}\n\n\tprotected _require_data_complex() {\n\t\tif (this._param.options.is_spare) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// default_value(): ParamValueSerialized {\n\t// \treturn this._param.default_value_serialized;\n\t// }\n\n\t// cannot remember why this is useful, but it messes up\n\t// with gl nodes like the noise node, as the default value\n\t// gets saved as a string '[1,1]' instead of an array [1,1] (should be without quotes)\n\t// protected default_value(){\n\t// \tlet default_value = this._param.default_value()\n\t// \tif(lodash_isString(default_value)){\n\t// \t\tdefault_value = `'${default_value}'`\n\t// \t}\n\t// \tif (lodash_isArray(default_value)){\n\t// \t\tdefault_value = `[${default_value}]`\n\t// \t}\n\t// \treturn default_value\n\t// }\n\n\tprotected add_main() {}\n}\n","// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderChunk} from 'three/src/renderers/shaders/ShaderChunk';\n// import {Shader} from 'three/src/renderers/shaders/ShaderLib'\n// import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n// import {MeshPhysicalMaterial} from 'three/src/materials/MeshPhysicalMaterial';\n// import {Material} from 'three/src/materials/Material';\nimport {Vector2} from 'three/src/math/Vector2';\n\n// import {Connection} from '../../../../../Engine/Node/Gl/GlData';\nimport {LineType} from '../utils/LineType';\n// import {Output} from '../../../../../Engine/Node/Gl/Output'\n\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {VariableConfig} from '../configs/VariableConfig';\nimport {ThreeToGl} from '../../../../../core/ThreeToGl';\n// const BODY_SPLIT_LINE = 'void main() {'\n// export const BODY_SEPARATOR_LINES = lodash_range(3).map(i=>'\t')\nimport {CodeBuilder} from '../utils/CodeBuilder';\n// import {BaseNode} from '../../../../../Engine/Node/_Base';\nimport {BaseGlNodeType} from '../../_Base';\nimport {GlobalsGeometryHandler} from '../globals/Geometry';\nimport {TypedAssembler} from '../../../utils/shaders/BaseAssembler';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n// import {IUniformsWithFrame, IUniformsWithResolution} from '../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../Output';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\nimport {AssemblerControllerNode} from '../Controller';\nimport {GlobalsBaseController} from '../globals/_Base';\nimport {CustomMaterialName} from './materials/_BaseMaterial';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\nimport {IUniforms} from '../../../../../core/geometry/Material';\n\ntype StringArrayByShaderName = Map<ShaderName, string[]>;\n\ninterface ITemplateShader {\n\tvertexShader?: string;\n\tfragmentShader?: string;\n\tuniforms?: IUniforms;\n}\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <common>'],\n\t[ShaderName.FRAGMENT, '#include <common>'],\n]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <color_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( diffuse, opacity );'],\n]);\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', '#include <beginnormal_vertex>']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst SPACED_LINES = 3;\n\nexport class BaseGlShaderAssembler extends TypedAssembler<BaseGlNodeType> {\n\tprotected _shaders_by_name: Map<ShaderName, string> = new Map();\n\tprotected _lines: StringArrayByShaderName = new Map();\n\tprotected _code_builder: CodeBuilder | undefined;\n\tprivate _param_config_owner: CodeBuilder | undefined;\n\tprotected _root_nodes: BaseGlNodeType[] = [];\n\tprotected _leaf_nodes: BaseGlNodeType[] = [];\n\tprotected _material: ShaderMaterial | undefined;\n\n\tprivate _shader_configs: ShaderConfig[] | undefined;\n\tprivate _variable_configs: VariableConfig[] | undefined;\n\n\tprivate _frame_dependent: boolean = false;\n\tprivate _resolution_dependent: boolean = false;\n\n\tconstructor(protected _gl_parent_node: AssemblerControllerNode) {\n\t\tsuper();\n\t}\n\n\tasync compile() {}\n\n\t// private get material() {\n\t// \treturn (this._material = this._material || this._create_material());\n\t// }\n\t// async get_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tthis._material = this._material || this._create_material();\n\n\t// \tawait this._update_material(/*master_assembler*/);\n\t// \treturn this._material;\n\t// }\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName): string | undefined {\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX:\n\t\t\t\treturn this._template_shader?.vertexShader;\n\t\t\tcase ShaderName.FRAGMENT:\n\t\t\t\treturn this._template_shader?.fragmentShader;\n\t\t}\n\t}\n\n\tget globals_handler(): GlobalsBaseController | undefined {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler;\n\t}\n\tcompile_allowed(): boolean {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler != null;\n\t}\n\tshaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\n\t// protected create_material(): ShaderMaterial | undefined {\n\t// \treturn undefined;\n\t// }\n\tprotected _build_lines() {\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._replace_template(template, shader_name);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _build_lines_for_shader_name(shader_name: ShaderName){\n\t// \tconst template = this._template_shader()\n\t// \tthis._replace_template(template[`${shader_name}Shader`], shader_name)\n\t// }\n\n\tset_root_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tthis._root_nodes = root_nodes;\n\t}\n\tprotected get _template_shader(): ITemplateShader | undefined {\n\t\treturn undefined;\n\t} //Shader - could not find the import?\n\t// abstract _color_declaration(): string\n\t// private async _update_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tif (!this.material || !this._material) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst template_shader = this._template_shader;\n\t// \tif (!template_shader) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis._lines = new Map();\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t// \t\tif (template) {\n\t// \t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t// \t\t}\n\t// \t}\n\t// \tif (this._root_nodes.length > 0) {\n\t// \t\t// this._output_node.set_color_declaration(this._color_declaration())\n\t// \t\t// if(!master_assembler){\n\t// \t\t// this._output_node.set_assembler(this)\n\t// \t\tawait this.build_code_from_nodes(this._root_nodes);\n\t// \t\t// }\n\n\t// \t\t(this._material as any).extensions = {derivatives: true};\n\t// \t\t// this._material?.derivatives = true;\n\t// \t\tthis._build_lines();\n\t// \t\t// this._lines[ShaderName.FRAGMENT].unshift('#extension GL_OES_standard_derivatives : enable')\n\t// \t}\n\n\t// \t// TODO: typescript - not sure that is still useful\n\t// \t// for (let param_config of this.param_configs()) {\n\t// \t// \tparam_config.material = this._material;\n\t// \t// }\n\n\t// \t// instead of replacing fully the uniforms,\n\t// \t// I simply add to them the new ones or replace the existing ones\n\t// \t// otherwise this would break the particles_system_gpu\n\t// \t// which would not reset correctly when going back to first frame.\n\t// \t// Not entirely sure why, but this seems to be due to the texture uniforms\n\t// \t// which are removed and then readded. This seems to mess up somewhere with how\n\t// \t// the material updates itself...\n\t// \t// this._material.uniforms = this.build_uniforms(template_shader)\n\t// \tconst new_uniforms = this.build_uniforms(template_shader.uniforms);\n\t// \tthis.material.uniforms = this.material.uniforms || {};\n\t// \tfor (let uniform_name of Object.keys(new_uniforms)) {\n\t// \t\tthis.material.uniforms[uniform_name] = new_uniforms[uniform_name];\n\t// \t}\n\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst lines = this._lines.get(shader_name);\n\t// \t\tif (lines) {\n\t// \t\t\tconst shader = lines.join('\\n');\n\t// \t\t\tswitch (shader_name) {\n\t// \t\t\t\tcase ShaderName.VERTEX: {\n\t// \t\t\t\t\tthis._material.vertexShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t\tcase ShaderName.FRAGMENT: {\n\t// \t\t\t\t\tthis._material.fragmentShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tconst scene = this._gl_parent_node.scene;\n\t// \t// const id = this._gl_parent_node.graph_node_id()\n\t// \tif (this.frame_dependent()) {\n\t// \t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t// \t\t// as we need several materials:\n\t// \t\t// - the visible one\n\t// \t\t// - the multiple shadow ones\n\t// \t\t// - and possibly a depth one\n\t// \t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithFrame\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\n\t// \tif (this.resolution_dependent()) {\n\t// \t\tscene.uniforms_controller.add_resolution_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithResolution\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_resolution_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\t// }\n\n\tprotected add_uniforms(current_uniforms: IUniforms) {\n\t\t// const new_uniforms = UniformsUtils.clone(template_uniforms);\n\n\t\t// copy the new uniforms onto the old ones, only adding, not removing\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\n\t\t// }\n\n\t\t// copy the values of the old uniform\n\t\t// for (let uniform_name of Object.keys(old_uniforms)) {\n\t\t// \tconst new_uniform = new_uniforms[uniform_name];\n\t\t// \tif (new_uniform) {\n\t\t// \t\tnew_uniform.value = old_uniforms[uniform_name].value;\n\t\t// \t}\n\t\t// }\n\n\t\tfor (let param_config of this.param_configs()) {\n\t\t\tcurrent_uniforms[param_config.uniform_name] = param_config.uniform;\n\t\t}\n\n\t\tif (this.frame_dependent()) {\n\t\t\tcurrent_uniforms['frame'] = {\n\t\t\t\t// type: '1f',\n\t\t\t\tvalue: this._gl_parent_node.scene.frame,\n\t\t\t};\n\t\t}\n\t\tif (this.resolution_dependent()) {\n\t\t\tcurrent_uniforms['resolution'] = {\n\t\t\t\tvalue: new Vector2(1000, 1000),\n\t\t\t};\n\t\t}\n\n\t\t// return new_uniforms;\n\t}\n\n\t//\n\t//\n\t// ROOT NODES AND SHADER NAMES\n\t//\n\t//\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\t// const attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase GlobalsGlNode.type(): {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase AttributeGlNode.type(): {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\t// const attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tget code_builder() {\n\t\treturn (this._code_builder = this._code_builder || new CodeBuilder(this, this._gl_parent_node));\n\t}\n\tasync build_code_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tawait this.code_builder.build_from_nodes(root_nodes);\n\t}\n\tallow_new_param_configs() {\n\t\tthis.code_builder.allow_new_param_configs();\n\t}\n\tdisallow_new_param_configs() {\n\t\tthis.code_builder.disallow_new_param_configs();\n\t}\n\tbuilder_param_configs() {\n\t\treturn this.code_builder.param_configs();\n\t}\n\tbuilder_lines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this.code_builder.lines(shader_name, line_type);\n\t}\n\tall_builder_lines() {\n\t\treturn this.code_builder.all_lines();\n\t}\n\tparam_configs() {\n\t\tconst code_builder = this._param_config_owner || this.code_builder;\n\t\treturn code_builder.param_configs();\n\t}\n\tset_param_configs_owner(param_config_owner: CodeBuilder) {\n\t\tthis._param_config_owner = param_config_owner;\n\t\tif (this._param_config_owner) {\n\t\t\tthis.code_builder.disallow_new_param_configs();\n\t\t} else {\n\t\t\tthis.code_builder.allow_new_param_configs();\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tstatic add_output_params(output_child: OutputGlNode) {\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'position', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'normal', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR2, 'uv', [0, 0], {hidden: true});\n\t}\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t}\n\tstatic create_globals_node_output_connections() {\n\t\treturn [\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('normal', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('color', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('uv', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC4),\n\t\t\tnew TypedNamedConnectionPoint('resolution', ConnectionPointType.VEC2),\n\t\t\t// new Connection.Vec2('gl_PointCoord'),\n\t\t\t// new TypedConnectionVec2('uv'),\n\t\t\tnew TypedNamedConnectionPoint('frame', ConnectionPointType.FLOAT),\n\t\t];\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections();\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points(this.create_globals_node_output_connections());\n\t}\n\tallow_attribute_exports() {\n\t\treturn false;\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\treset_configs() {\n\t\tthis._reset_shader_configs();\n\t\tthis._reset_variable_configs();\n\t\tthis._reset_frame_dependency();\n\t\tthis._reset_resolution_dependency();\n\t}\n\tget shader_configs() {\n\t\treturn (this._shader_configs = this._shader_configs || this.create_shader_configs());\n\t}\n\tset_shader_configs(shader_configs: ShaderConfig[]) {\n\t\tthis._shader_configs = shader_configs;\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.shader_configs?.map((sc) => sc.name()) || [];\n\t}\n\tprotected _reset_shader_configs() {\n\t\tthis._shader_configs = undefined;\n\t\t// this.shader_configs; // TODO: typescript - why do I need to re-initialize here?\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tshader_config(name: string): ShaderConfig | undefined {\n\t\treturn this.shader_configs?.filter((sc) => {\n\t\t\treturn sc.name() == name;\n\t\t})[0];\n\t}\n\tvariable_configs() {\n\t\treturn (this._variable_configs = this._variable_configs || this.create_variable_configs());\n\t}\n\tset_variable_configs(variable_configs: VariableConfig[]) {\n\t\tthis._variable_configs = variable_configs;\n\t}\n\tvariable_config(name: string) {\n\t\treturn this.variable_configs().filter((vc) => {\n\t\t\treturn vc.name() == name;\n\t\t})[0];\n\t}\n\tstatic create_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('position', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t\t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t\t\tprefix: 'vec3 transformed = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('normal', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\tprefix: 'vec3 objectNormal = ',\n\t\t\t\t// post_lines: ['#ifdef USE_TANGENT', 'vec3 objectTangent = vec3( tangent.xyz );', '#endif'],\n\t\t\t}),\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('uv', {\n\t\t\t\t// default_from_attribute: true,\n\t\t\t\tprefix: 'vUv = ',\n\t\t\t\tif: GlobalsGeometryHandler.IF_RULE.uv,\n\t\t\t}),\n\t\t];\n\t}\n\tcreate_variable_configs(): VariableConfig[] {\n\t\treturn BaseGlShaderAssembler.create_variable_configs();\n\t}\n\tprotected _reset_variable_configs() {\n\t\tthis._variable_configs = undefined;\n\t\tthis.variable_configs();\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.shader_config(shader_name)?.input_names() || [];\n\t}\n\n\t// frame dependency\n\tprotected _reset_frame_dependency() {\n\t\tthis._frame_dependent = false;\n\t}\n\tset_frame_dependent() {\n\t\tthis._frame_dependent = true;\n\t}\n\tframe_dependent(): boolean {\n\t\treturn this._frame_dependent;\n\t}\n\t// resolution dependency\n\tprotected _reset_resolution_dependency() {\n\t\tthis._resolution_dependent = false;\n\t}\n\tset_resolution_dependent() {\n\t\tthis._resolution_dependent = true;\n\t}\n\tresolution_dependent(): boolean {\n\t\treturn this._resolution_dependent;\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName): string[] | undefined {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\n\tprivate _replace_template(template: string, shader_name: ShaderName) {\n\t\tconst function_declaration = this.builder_lines(shader_name, LineType.FUNCTION_DECLARATION);\n\t\tconst define = this.builder_lines(shader_name, LineType.DEFINE);\n\t\t// let all_define = function_declaration.concat(define);\n\t\tconst body = this.builder_lines(shader_name, LineType.BODY);\n\n\t\tlet template_lines = template.split('\\n');\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst new_lines = [\n\t\t\t`#define FPS ${ThreeToGl.float(scene.time_controller.fps)}`,\n\t\t\t`#define TIME_INCREMENT (1.0/${ThreeToGl.float(scene.time_controller.fps)})`,\n\t\t\t`#define FRAME_RANGE_START ${ThreeToGl.float(scene.time_controller.frame_range[0])}`,\n\t\t\t`#define FRAME_RANGE_END ${ThreeToGl.float(scene.time_controller.frame_range[1])}`,\n\t\t];\n\n\t\tconst line_before_define = this.insert_define_after(shader_name);\n\t\tconst line_before_body = this.insert_body_after(shader_name);\n\t\tconst lines_to_remove = this.lines_to_remove(shader_name);\n\t\tlet line_before_define_found = false;\n\t\tlet line_before_body_found = false;\n\n\t\tfor (let template_line of template_lines) {\n\t\t\tif (line_before_define_found == true) {\n\t\t\t\tif (function_declaration) {\n\t\t\t\t\tthis._insert_lines(new_lines, function_declaration);\n\t\t\t\t}\n\t\t\t\tif (define) {\n\t\t\t\t\tthis._insert_lines(new_lines, define);\n\t\t\t\t}\n\t\t\t\tline_before_define_found = false;\n\t\t\t}\n\t\t\tif (line_before_body_found == true) {\n\t\t\t\t// this._insert_default_body_declarations(new_lines, shader_name)\n\t\t\t\tif (body) {\n\t\t\t\t\tthis._insert_lines(new_lines, body);\n\t\t\t\t}\n\t\t\t\tline_before_body_found = false;\n\t\t\t}\n\n\t\t\tlet line_remove_required = false;\n\t\t\tif (lines_to_remove) {\n\t\t\t\tfor (let line_to_remove of lines_to_remove) {\n\t\t\t\t\tif (template_line.indexOf(line_to_remove) >= 0) {\n\t\t\t\t\t\tline_remove_required = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line_remove_required) {\n\t\t\t\tnew_lines.push(template_line);\n\t\t\t} else {\n\t\t\t\tnew_lines.push('// removed:');\n\t\t\t\tnew_lines.push(`//${template_line}`);\n\t\t\t}\n\n\t\t\tif (line_before_define && template_line.indexOf(line_before_define) >= 0) {\n\t\t\t\tline_before_define_found = true;\n\t\t\t}\n\t\t\tif (line_before_body && template_line.indexOf(line_before_body) >= 0) {\n\t\t\t\tline_before_body_found = true;\n\t\t\t}\n\n\t\t\t// if(template_line.indexOf('// INSERT DEFINE') >= 0){\n\t\t\t// } else {\n\t\t\t// \tif(template_line.indexOf('// INSERT BODY') >= 0){\n\t\t\t// \t\tif(body.length > 0){\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t\tbody.forEach(body_line=>{\n\t\t\t// \t\t\t\tnew_lines.push(body_line)\n\t\t\t// \t\t\t})\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\tif(template_line.indexOf('// TO REMOVE') < 0){\n\t\t\t// \t\t\tnew_lines.push(template_line)\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\tthis._lines.set(shader_name, new_lines);\n\t}\n\n\t// protected _insert_default_body_declarations(new_lines, shader_name){\n\t// \tnew_lines.push('float POLY_roughness = 1.0;')\n\t// }\n\n\tprivate _insert_lines(new_lines: string[], lines_to_add: string[]) {\n\t\tif (lines_to_add.length > 0) {\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\n\t\t\tfor (let line_to_add of lines_to_add) {\n\t\t\t\tnew_lines.push(line_to_add);\n\t\t\t}\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync get_custom_materials(): Promise<Map<CustomMaterialName, ShaderMaterial>> {\n\t\treturn new Map<CustomMaterialName, ShaderMaterial>();\n\t}\n\n\t// protected expand_shader(shader_string: string) {\n\t// \tfunction parseIncludes(string: string) {\n\t// \t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\t// \t\tfunction replace(match: string, include: string) {\n\t// \t\t\tvar replace = ShaderChunk[include];\n\n\t// \t\t\tif (replace === undefined) {\n\t// \t\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t// \t\t\t}\n\n\t// \t\t\treturn parseIncludes(replace);\n\t// \t\t}\n\n\t// \t\treturn string.replace(pattern, replace);\n\t// \t}\n\t// \treturn parseIncludes(shader_string);\n\t// }\n\n\t//\n\t//\n\t// GLTF EXPORT\n\t//\n\t//\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material{\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial\n\t// \tconst options = {}\n\t// \tthis._match_uniform('color', options, material, 'diffuse')\n\t// \tthis._match_uniform('map', options, material)\n\t// \tthis._match_uniform('envMap', options, material)\n\t// \tthis._match_uniform('envMapIntensity', options, material)\n\t// \tthis._match_uniform('metalness', options, material)\n\t// \tthis._match_uniform('roughness', options, material)\n\t// \tconst gltf_material = new gltf_constructor(options)\n\t// \treturn gltf_material\n\t// }\n\t// static _match_uniform(name: string, options: object, material: ShaderMaterial, uniform_name?: string) {\n\t// \tuniform_name = uniform_name || name;\n\t// \toptions[name] = material.uniforms[uniform_name].value;\n\t// }\n}\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\n// import {Definition} from '../../Definition/_Module';\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig';\n// import {BaseGlNodeType} from '../../_Base';\nimport {VaryingGLDefinition, AttributeGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\n// import {TypeAssert} from '../../../../poly/Assert';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nconst VARIABLE_CONFIG_DEFAULT_BY_NAME: Dictionary<string> = {\n\tposition: 'vec3( position )',\n};\n\nexport class GlobalsGeometryHandler extends GlobalsBaseController {\n\tstatic PRE_DEFINED_ATTRIBUTES = [\n\t\t'position',\n\t\t'color',\n\t\t'normal',\n\t\t'uv',\n\t\t'uv2',\n\t\t'morphTarget0',\n\t\t'morphTarget1',\n\t\t'morphTarget2',\n\t\t'morphTarget3',\n\t\t'skinIndex',\n\t\t'skinWeight',\n\t];\n\n\tstatic IF_RULE = {\n\t\tuv:\n\t\t\t'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',\n\t};\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (!connection_point) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst gl_type = connection_point.type;\n\t\tconst definition = new VaryingGLDefinition(globals_node, gl_type, var_name);\n\n\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, definition);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\t\t// definitions_by_shader_name.get(shader_name)!.push(definition);\n\t\tconst assembler = globals_node.material_node?.assembler_controller.assembler;\n\t\tif (!assembler) {\n\t\t\treturn;\n\t\t}\n\t\tconst shader_config = assembler.shader_config(shaders_collection_controller.current_shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst body_line = `${var_name} = ${gl_type}(${output_name})`;\n\t\tfor (let dependency of dependencies) {\n\t\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t// MapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\tshaders_collection_controller.add_definitions(globals_node, [definition], dependency);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line], dependency);\n\t\t}\n\t\tif (dependencies.length == 0) {\n\t\t\t// body_lines.push(body_line);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n\n\tstatic variable_config_default(variable_name: string): string | undefined {\n\t\treturn VARIABLE_CONFIG_DEFAULT_BY_NAME[variable_name];\n\t}\n\tvariable_config_default(variable_name: string): string | undefined {\n\t\treturn GlobalsGeometryHandler.variable_config_default(variable_name);\n\t}\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \treturn null\n\t// }\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n\n\tstatic read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined {\n\t\tif (GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attrib_name) < 0) {\n\t\t\tshaders_collection_controller.add_definitions(\n\t\t\t\tnode,\n\t\t\t\t[new AttributeGLDefinition(node, gl_type, attrib_name)],\n\t\t\t\tShaderName.VERTEX\n\t\t\t);\n\t\t} else {\n\t\t\t// const if_rule = GlobalsGeometryHandler.IF_RULE[attrib_name]\n\t\t\t// if(if_rule){\n\t\t\t// \tconst definition = new Definition.Attribute(node, gl_type, attrib_name)\n\t\t\t// \tdefinition.set_if_rule(if_rule)\n\t\t\t// \tnode.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\n\t\t// if (!shader_name) {\n\t\t// \tthrow 'no shader name';\n\t\t// }\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX: {\n\t\t\t\treturn attrib_name;\n\t\t\t}\n\t\t\tcase ShaderName.FRAGMENT: {\n\t\t\t\t// let's assume it can only be an attribute gl node\n\t\t\t\tif (!(node instanceof AttributeGlNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst var_name = 'varying_' + node.gl_var_name(node.output_name);\n\t\t\t\tconst varying_definition = new VaryingGLDefinition(node, gl_type, var_name);\n\n\t\t\t\tconst definitions_by_shader_name: Map<ShaderName, VaryingGLDefinition[]> = new Map();\n\t\t\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tdefinitions_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\t// {\n\t\t\t\t// \t[ShaderName.VERTEX]: [],\n\t\t\t\t// \t[ShaderName.FRAGMENT]: [],\n\t\t\t\t// };\n\t\t\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t\t\t// body_lines_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tbody_lines_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, varying_definition);\n\n\t\t\t\tconst set_varying_body_line = `${var_name} = ${gl_type}(${attrib_name})`;\n\n\t\t\t\tconst shader_config = node.material_node?.assembler_controller.assembler.shader_config(shader_name);\n\t\t\t\tif (shader_config) {\n\t\t\t\t\tconst dependencies = shader_config.dependencies();\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, varying_definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, set_varying_body_line);\n\t\t\t\t\t}\n\t\t\t\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_definitions(node, definitions, shader_name);\n\t\t\t\t\t});\n\t\t\t\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(node, body_lines, shader_name);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn var_name;\n\t\t\t}\n\t\t}\n\t\t// TypeAssert.unreachable(shader_name);\n\n\t\t// const shader_name = node._shader_name // TODO: this is hack\n\t\t// const varying_definition = new Definition.Varying(node, gl_type, attrib_name)\n\t\t// const var_name = varying_definition.name()\n\t\t// definitions_by_shader_name[shader_name].push(varying_definition)\n\t\t// const shader_config = node.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\t\t// const body_line = `${var_name} = ${gl_type}(${attrib_name})`\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(varying_definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// // if(dependencies.length == 0){\n\t\t// \t// body_lines.push(body_line)\n\t\t// \tnode.add_body_lines([body_line])\n\t\t// // }\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tnode.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tnode.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// node.add_body_lines(body_lines)\n\t}\n\thandle_attribute_node(\n\t\tnode: AttributeGlNode,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {\n\tUVMapping,\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tEquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping,\n\tSphericalReflectionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tMirroredRepeatWrapping,\n\tLinearFilter,\n\tNearestFilter,\n\tNearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter,\n\tLinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter,\n\t// UnsignedByteType,\n\t// ByteType,\n\t// ShortType,\n\t// UnsignedShortType,\n\t// IntType,\n\t// UnsignedIntType,\n\t// FloatType,\n\t// HalfFloatType,\n\t// UnsignedShort4444Type,\n\t// UnsignedShort5551Type,\n\t// UnsignedShort565Type,\n\t// UnsignedInt248Type,\n\t// AlphaFormat,\n\t// RGBFormat,\n\t// RGBAFormat,\n\t// LuminanceFormat,\n\t// LuminanceAlphaFormat,\n\t// RGBEFormat,\n\t// DepthFormat,\n\t// DepthStencilFormat,\n\t// LinearEncoding,\n\t// sRGBEncoding,\n\t// GammaEncoding,\n\t// RGBEEncoding,\n\t// LogLuvEncoding,\n\t// RGBM7Encoding,\n\t// RGBM16Encoding,\n\t// RGBDEncoding,\n\t// BasicDepthPacking,\n\t// RGBADepthPacking,\n} from 'three/src/constants';\nimport {Texture} from 'three/src/textures/Texture';\n// const THREE = {\n// \tTexture,\n// \tUVMapping,\n// \tVideoTexture,\n// \tCubeReflectionMapping,\n// \tCubeRefractionMapping,\n// \tEquirectangularReflectionMapping,\n// \tEquirectangularRefractionMapping,\n// \tSphericalReflectionMapping,\n// \tCubeUVReflectionMapping,\n// \tCubeUVRefractionMapping,\n// \tClampToEdgeWrapping,\n// \tRepeatWrapping,\n// \tMirroredRepeatWrapping,\n// \tLinearFilter,\n// \tNearestFilter,\n// \tNearestMipMapNearestFilter,\n// \tNearestMipMapLinearFilter,\n// \tLinearMipMapNearestFilter,\n// \tLinearMipMapLinearFilter,\n// \tUnsignedByteType,\n// \tByteType,\n// \tShortType,\n// \tUnsignedShortType,\n// \tIntType,\n// \tUnsignedIntType,\n// \tFloatType,\n// \tHalfFloatType,\n// \tUnsignedShort4444Type,\n// \tUnsignedShort5551Type,\n// \tUnsignedShort565Type,\n// \tUnsignedInt248Type,\n// \tAlphaFormat,\n// \tRGBFormat,\n// \tRGBAFormat,\n// \tLuminanceFormat,\n// \tLuminanceAlphaFormat,\n// \tRGBEFormat,\n// \tDepthFormat,\n// \tDepthStencilFormat,\n// \tLinearEncoding,\n// \tsRGBEncoding,\n// \tGammaEncoding,\n// \tRGBEEncoding,\n// \tLogLuvEncoding,\n// \tRGBM7Encoding,\n// \tRGBM16Encoding,\n// \tRGBDEncoding,\n// \tBasicDepthPacking,\n// \tRGBADepthPacking,\n// };\n// import lodash_last from 'lodash/last';\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\nimport {CoreTextureLoader} from '../../../core/loader/Texture';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\n// this used to be named file_in, but I can't recall the decision of not calling it simply 'file'\n// so renaming it back to file for now\n\nconst MAPPINGS = [\n\t{UVMapping},\n\t{CubeReflectionMapping},\n\t{CubeRefractionMapping},\n\t{EquirectangularReflectionMapping},\n\t{EquirectangularRefractionMapping},\n\t{SphericalReflectionMapping},\n\t{CubeUVReflectionMapping},\n\t{CubeUVRefractionMapping},\n];\n\nconst WRAPPINGS: Dictionary<number>[] = [{ClampToEdgeWrapping}, {RepeatWrapping}, {MirroredRepeatWrapping}];\n\nconst MAG_FILTERS: Dictionary<number>[] = [{LinearFilter}, {NearestFilter}];\nconst MIN_FILTERS: Dictionary<number>[] = [\n\t{NearestFilter},\n\t{NearestMipMapNearestFilter},\n\t{NearestMipMapLinearFilter},\n\t{LinearFilter},\n\t{LinearMipMapNearestFilter},\n\t{LinearMipMapLinearFilter},\n];\n\n// const TYPES = [\n// \t\"UnsignedByteType\",\n// \t\"ByteType\",\n// \t\"ShortType\",\n// \t\"UnsignedShortType\",\n// \t\"IntType\",\n// \t\"UnsignedIntType\",\n// \t\"FloatType\",\n// \t\"HalfFloatType\",\n// \t\"UnsignedShort4444Type\",\n// \t\"UnsignedShort5551Type\",\n// \t\"UnsignedShort565Type\",\n// \t\"UnsignedInt248Type\"\n// ];\n\n// const FORMATS = [\n// \t\"AlphaFormat\",\n// \t\"RGBFormat\",\n// \t\"RGBAFormat\",\n// \t\"LuminanceFormat\",\n// \t\"LuminanceAlphaFormat\",\n// \t\"RGBEFormat\",\n// \t\"DepthFormat\",\n// \t\"DepthStencilFormat\"\n// ];\n\n// const ENCODINGS = [\n// \t\"LinearEncoding\",\n// \t\"sRGBEncoding\",\n// \t\"GammaEncoding\",\n// \t\"RGBEEncoding\",\n// \t\"LogLuvEncoding\",\n// \t\"RGBM7Encoding\",\n// \t\"RGBM16Encoding\",\n// \t\"RGBDEncoding\",\n// \t\"BasicDepthPacking\",\n// \t\"RGBADepthPacking\"\n// ];\n\ninterface AttribMapping {\n\tmapping: string;\n\twrapS: string;\n\twrapT: string;\n\tminFilter: string;\n\tmagFilter: string;\n}\nconst ATTRIB_MAPPING_KEYS: Array<keyof AttribMapping> = ['mapping', 'wrapS', 'wrapT', 'minFilter', 'magFilter'];\nconst ATTRIB_MAPPING: AttribMapping = {\n\tmapping: 'mapping',\n\twrapS: 'wrap_s',\n\twrapT: 'wrap_t',\n\tminFilter: 'min_filter',\n\tmagFilter: 'mag_filter',\n\t// type: 'type',\n\t// encoding: 'encoding'\n\t// format: 'format',\n};\n\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass FileCopParamsConfig extends NodeParamsConfig {\n\t// video_time = ParamConfig.FLOAT(1);\n\turl = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t\tdesktop_browse: {file_type: 'texture'},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileCopNode.PARAM_CALLBACK_reload(node as FileCopNode, param);\n\t\t},\n\t});\n\tmapping = ParamConfig.INTEGER(UVMapping, {\n\t\tmenu: {\n\t\t\tentries: MAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_s = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_t = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmag_filter = ParamConfig.INTEGER(Object.values(MAG_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MAG_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmin_filter = ParamConfig.INTEGER(Object.values(MIN_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MIN_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new FileCopParamsConfig();\n\nexport class FileCopNode extends TypedCopNode<FileCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\t// @ParamF('video_time') _param_video_time: number;\n\t// @ParamS('url') _param_url: string;\n\tprivate _previous_param_url: string | undefined;\n\tprivate _video: HTMLVideoElement | undefined;\n\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\t// _param_video_time_param: BaseParam\n\tprivate _texture_loader: CoreTextureLoader | undefined;\n\n\tstatic VIDEO_TIME_PARAM_NAME = 'video_time';\n\tstatic DEFAULT_NODE_PATH = {\n\t\tUV: '/COP/file_uv',\n\t\tENV_MAP: '/COP/env_map',\n\t};\n\n\t// initialize_node() {\n\t// \t// this.io.inputs.set_count_to_zero();\n\t// }\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT, {\n\t// \t// \tdesktop_browse: {file_type: 'texture'},\n\t// \t// });\n\t// \t// this.add_param(ParamType.BUTTON, 'reload', null, {\n\t// \t// \tcallback: this._reload.bind(this),\n\t// \t// });\n\t// \t// this.add_param(ParamType.FLOAT, 'video_time', 0, {range: [0, 10]})\n\t// \t// this.add_param(ParamType.INTEGER, 'mapping', UVMapping as number, {\n\t// \t// \tmenu: {\n\t// \t// \t\tentries: MAPPINGS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// for (let wrap_name of ['wrap_s', 'wrap_t']) {\n\t// \t// \tconst wrap = Object.values(WRAPPINGS[0])[0] as number;\n\t// \t// \tthis.add_param(ParamType.INTEGER, wrap_name, wrap, {\n\t// \t// \t\tmenu: {\n\t// \t// \t\t\t// type: 'radio',\n\t// \t// \t\t\tentries: WRAPPINGS.map((m) => {\n\t// \t// \t\t\t\treturn {\n\t// \t// \t\t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t\t};\n\t// \t// \t\t\t}),\n\t// \t// \t\t},\n\t// \t// \t});\n\t// \t// }\n\t// \t// const mag_filter = Object.values(MAG_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'mag_filter', mag_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MAG_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// const min_filter: number = Object.values(MIN_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'min_filter', min_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MIN_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// TODO: to be added when I have some level of control\n\t// \t// for now, the type attribute overrides what piz_compressed.exr creates\n\t// \t// which in turns fucks up with the env_map\n\t// \t// advanced\n\t// \t// this.add_param(ParamType.TOGGLE, 'advanced', 0)\n\t// \t// this.add_param(ParamType.INTEGER, 'type', THREE[TYPES[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: TYPES.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'format', THREE[FORMATS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: FORMATS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'encoding', THREE[ENCODINGS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: ENCODINGS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// }\n\n\tasync cook() {\n\t\tif (this._is_static_image_url(this.pv.url)) {\n\t\t\tawait this.cook_for_image();\n\t\t} else {\n\t\t\tawait this.cook_for_video();\n\t\t}\n\t}\n\n\tprivate _is_static_image_url(url: string) {\n\t\treturn true;\n\t}\n\n\tprivate async cook_for_image() {\n\t\tconst texture = await this._load_texture(this.pv.url);\n\n\t\tif (texture) {\n\t\t\tthis._update_texture_params(texture);\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.clear_texture();\n\t\t}\n\t}\n\n\tprivate async cook_for_video() {\n\t\tif (this._param_url_changed()) {\n\t\t\tconst texture = await this._load_texture(this.pv.url);\n\t\t\t// if (texture) {\n\t\t\t// \tthis._texture = texture;\n\t\t\t// }\n\n\t\t\tif (texture) {\n\t\t\t\tthis._add_video_spare_params_if_required(texture);\n\t\t\t}\n\t\t\tthis._previous_param_url = this.pv.url;\n\n\t\t\tthis._set_video_current_time();\n\n\t\t\tif (texture) {\n\t\t\t\tthis._update_texture_params(texture);\n\t\t\t\tthis.set_texture(texture);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\t// this._set_video_current_time();\n\t\t\t// this._update_texture_params();\n\t\t\t// if (texture?.needsUpdate) {\n\t\t\t// \tthis.set_texture(texture);\n\t\t\t// } else {\n\t\t\t// \tthis.cook_controller.end_cook();\n\t\t\t// }\n\t\t}\n\t}\n\n\tresolved_url() {\n\t\treturn this.pv.url;\n\t}\n\n\tprivate _update_texture_params(texture: Texture) {\n\t\t// const keys = Object.keys(ATTRIB_MAPPING) as keyof AttribMapping\n\t\tfor (let texture_attrib of ATTRIB_MAPPING_KEYS) {\n\t\t\tconst param_name = ATTRIB_MAPPING[texture_attrib];\n\t\t\tconst param_value = this.params.float(param_name);\n\t\t\t// const texture_attrib = ATTRIB_MAPPING[attrib];\n\n\t\t\tif (param_value != null && texture) {\n\t\t\t\tif (texture[texture_attrib] != param_value) {\n\t\t\t\t\ttexture[texture_attrib] = param_value;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_reload(node: FileCopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\tthis._previous_param_url = undefined;\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_successors_dirty();\n\t\t// this.set_dirty()\n\t}\n\n\tprivate _set_video_current_time() {\n\t\tif (this._video) {\n\t\t\tif (this.params.has('video_time')) {\n\t\t\t\tthis._video.currentTime = this.params.float('video_time');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_video_spare_params_if_required(texture: Texture | VideoTexture | null) {\n\t\tif (texture) {\n\t\t\tconst is_video = texture.constructor == VideoTexture;\n\t\t\tif (is_video) {\n\t\t\t\tthis._video = texture.image;\n\t\t\t\tif (this._video) {\n\t\t\t\t\tif (!this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\t\t\t\tconst duration = this._video.duration;\n\n\t\t\t\t\t\tthis.add_param(ParamType.FLOAT, FileCopNode.VIDEO_TIME_PARAM_NAME, '$T', {\n\t\t\t\t\t\t\tspare: true,\n\t\t\t\t\t\t\tcook: true,\n\t\t\t\t\t\t\trange: [0, duration],\n\t\t\t\t\t\t\trange_locked: [true, true],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._remove_spare_params();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remove_spare_params();\n\t\t}\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tif (this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\tthis.params.update_params({names_to_delete: [FileCopNode.VIDEO_TIME_PARAM_NAME]});\n\t\t\t// this.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\n\tprivate _param_url_changed(): boolean {\n\t\treturn this._previous_param_url != this.pv.url;\n\t}\n\n\tprivate async _load_texture(url: string) {\n\t\tlet texture: Texture | VideoTexture | null = null;\n\t\tconst param = this.params.get('url');\n\t\tif (url && param) {\n\t\t\tthis._texture_loader = this._texture_loader || new CoreTextureLoader(this, param);\n\t\t\t// const ext = lodash_last(url.split('.')).toLowerCase()\n\t\t\ttry {\n\t\t\t\ttexture = await this._texture_loader.load_texture_from_url_or_op(url);\n\t\t\t} catch (e) {\n\t\t\t\t//console.log('FAIL');\n\t\t\t}\n\t\t\t// if(texture){\n\t\t\t// \tcallback(texture)\n\t\t\t// } else {\n\t\t\tif (!texture) {\n\t\t\t\tthis.states.error.set(`could not load texture '${url}'`);\n\t\t\t}\n\t\t\t// }).catch(error=>{\n\t\t\t// \tthis.self.set_error(`could not load texture ${url} (${error})`);\n\t\t\t// })\n\t\t} else {\n\t\t\tthis.states.error.set('not url given to Mat/Base._load_texture');\n\t\t}\n\t\treturn texture;\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport lodash_compact from 'lodash/compact';\nimport {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GLDefinitionType, TypedGLDefinition} from './utils/GLDefinition';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nclass BaseGlMathFunctionParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new BaseGlMathFunctionParamsConfig();\nexport abstract class BaseGlMathFunctionGlNode extends BaseAdaptiveGlNode<BaseGlMathFunctionParamsConfig> {\n\tparams_config = ParamsConfig;\n\tprotected gl_method_name() {\n\t\treturn '';\n\t}\n\tprotected gl_function_definitions(): TypedGLDefinition<GLDefinitionType>[] {\n\t\treturn [];\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst type: ConnectionPointType =\n\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\tif (this.io.connections.first_input_connection()) {\n\t\t\tlet count = Math.max(lodash_compact(this.io.connections.input_connections()).length + 1, 2);\n\t\t\treturn lodash_range(count).map((i) => type);\n\t\t} else {\n\t\t\treturn lodash_range(2).map((i) => type);\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nexport abstract class BaseNodeGlMathFunctionArg2GlNode extends BaseGlMathFunctionGlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseMatNodeType} from '../_Base';\n\nexport class BaseController {\n\tconstructor(protected node: BaseMatNodeType) {}\n\tadd_params() {}\n\n\tupdate() {}\n\n\tget material() {\n\t\treturn this.node.material;\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {PolyScene} from '../../engine/scene/PolyScene';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\nexport interface MaterialWithUniforms extends Material {\n\tuniforms: IUniforms;\n}\n\nenum CustomMaterialName {\n\tcustomDistanceMaterial = 'customDistanceMaterial',\n\tcustomDepthMaterial = 'customDepthMaterial',\n\tcustomDepthDOFMaterial = 'customDepthDOFMaterial',\n}\nexport interface ObjectWithCustomMaterials extends Mesh {\n\t// customDistanceMaterial?: Material;\n\t// customDepthMaterial?: Material;\n\tcustomDepthDOFMaterial?: Material;\n}\nexport interface ShaderMaterialWithCustomMaterials extends ShaderMaterial {\n\tcustom_materials: {\n\t\t[key in CustomMaterialName]?: ShaderMaterial;\n\t};\n}\nexport interface MaterialWithSkinning extends Material {\n\tskinning: boolean;\n\tmorphTargets: boolean;\n}\n\nexport class CoreMaterial {\n\tstatic node(scene: PolyScene, material: Material) {\n\t\treturn scene.node(material.name);\n\t}\n\n\tstatic clone(src_material: Material | Material[]) {\n\t\tif (lodash_isArray(src_material)) {\n\t\t\treturn src_material.map((material) => {\n\t\t\t\treturn this.clone_single(material);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.clone_single(src_material);\n\t\t}\n\t}\n\n\tstatic clone_single(src_material: Material) {\n\t\tconst material = src_material.clone();\n\t\t// linewidth doesn't seem cloned correctly for ShaderMaterial\n\t\t(material as LineBasicMaterial).linewidth = (src_material as LineBasicMaterial).linewidth;\n\n\t\treturn material;\n\t}\n\n\tstatic apply_custom_materials(object: Object3D, material: Material) {\n\t\tconst material_with_custom = material as ShaderMaterialWithCustomMaterials;\n\t\tif (material_with_custom.custom_materials) {\n\t\t\tfor (let name of Object.keys(material_with_custom.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\t// http://blog.edankwan.com/post/three-js-advanced-tips-shadow\n\t\t\t\tconst custom_material = material_with_custom.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\t(object as ObjectWithCustomMaterials)[mat_name] = custom_material;\n\t\t\t\t\tcustom_material.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// object.material = material.custom_materials.customDepthDOFMaterial\n\t\t\t// object.material = material.custom_materials.customDepthMaterial\n\t\t\t// object.material = material.custom_materials.customDistanceMaterial\n\t\t}\n\t}\n\tstatic assign_custom_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name].value = uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic init_custom_material_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name] = custom_material.uniforms[uniform_name] || uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isBoolean from 'lodash/isBoolean';\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamEvent} from '../poly/ParamEvent';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\n// interface NumericParamVisitor extends TypedParamVisitor {\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\nexport abstract class TypedNumericParam<T extends ParamType> extends TypedParam<T> {\n\t// private _raw_input: ParamInitValuesTypeMap[T] | undefined;\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\t// accepts_visitor(visitor: NumericParamVisitor): any {\n\t// \treturn visitor.visit_numeric_param(this);\n\t// }\n\t// init_expression() {\n\t// \tif (this.is_value_expression(this._default_value)) {\n\t// \t\treturn this.set_expression(this._default_value)\n\t// \t}\n\t// }\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (lodash_isArray(raw_input)) {\n\t\t\treturn raw_input[0] as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input;\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tconst converted = this.convert(this._raw_input);\n\t\tif (converted != null) {\n\t\t\tif (this._expression_controller) {\n\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t}\n\t\t\tif (converted != this._value) {\n\t\t\t\tthis._update_value(converted);\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (lodash_isString(this._raw_input)) {\n\t\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`param input is invalid (${this.full_path()})`);\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(\n\t\t\t\t\t`expression error: \"${this.expression_controller.expression}\" (${this.expression_controller.error_message})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tif (this.states.error.active) {\n\t\t\t\t\t\tthis.states.error.clear();\n\t\t\t\t\t}\n\t\t\t\t\tthis._update_value(converted);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`expression returns an invalid type (${expression_result}) (${this.expression_controller.expression})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate _update_value(new_value: ParamValuesTypeMap[T]) {\n\t\tthis._value = new_value;\n\t\tif (this.parent_param) {\n\t\t\tthis.parent_param.set_value_from_components();\n\t\t}\n\t\tthis.options.execute_callback();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\tthis.remove_dirty_state();\n\t}\n}\n","export class TypeAssert {\n\tstatic unreachable(x: never): never {\n\t\tthrow new Error(\"Didn't expect to get here\");\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {CoreString} from '../../../../core/String';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from './Node';\nimport {JsonExportDispatcher} from './Dispatcher';\n\nexport interface SceneJsonExporterData {\n\tproperties?: {\n\t\tframe: number;\n\t\tframe_range: Number2;\n\t\tframe_range_locked: Boolean2;\n\t\tfps: number;\n\t\tmaster_camera_node_path: string | null;\n\t};\n\troot?: NodeJsonExporterData;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneJsonExporter {\n\tprivate _data: SceneJsonExporterData = {};\n\tconstructor(private _scene: PolyScene) {}\n\n\tdata(): SceneJsonExporterData {\n\t\tthis._scene.nodes_controller.reset_node_context_signatures();\n\t\tconst root_exporter = JsonExportDispatcher.dispatch_node(this._scene.root);\n\t\tconst nodes_data = root_exporter.data();\n\t\tconst ui_data = root_exporter.ui_data();\n\n\t\tthis._data = {\n\t\t\t// __js_version: this._scene.js_version(),\n\t\t\tproperties: {\n\t\t\t\t// name: this._scene.name(), // this conflicts with saving the name from the admin page\n\t\t\t\tframe: this._scene.frame || 1,\n\t\t\t\tframe_range: this._scene.frame_range,\n\t\t\t\tframe_range_locked: this._scene.time_controller.frame_range_locked,\n\t\t\t\tfps: this._scene.time_controller.fps,\n\t\t\t\tmaster_camera_node_path: this._scene.cameras_controller.master_camera_node_path,\n\t\t\t},\n\t\t\troot: nodes_data,\n\t\t\tui: ui_data,\n\t\t};\n\n\t\treturn this._data;\n\t}\n\n\tstatic sanitize_string(word: string): string {\n\t\tword = word.replace(/'/g, \"'\"); // escapes ' (used to be with 2 /, but now only one to have Ian's Mediation saved and loaded correctly - but is actually 2 in Code Exporter)\n\t\tword = CoreString.escape_line_breaks(word);\n\t\treturn word;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class ShaderConfig {\n\tconstructor(private _name: ShaderName, private _input_names: string[], private _dependencies: ShaderName[]) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tinput_names() {\n\t\treturn this._input_names;\n\t}\n\tdependencies() {\n\t\treturn this._dependencies;\n\t}\n}\n","interface VariableConfigOptions {\n\t// asset refererences\n\tdefault_from_attribute?: boolean;\n\tdefault?: string;\n\tif?: string;\n\tprefix?: string;\n\tsuffix?: string;\n}\n\nexport class VariableConfig {\n\tconstructor(private _name: string, private _options: VariableConfigOptions = {}) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tdefault_from_attribute() {\n\t\treturn this._options['default_from_attribute'] || false;\n\t}\n\tdefault() {\n\t\treturn this._options['default'];\n\t}\n\tif_condition() {\n\t\treturn this._options['if'];\n\t}\n\t// required_definitions(){\n\t// \treturn this._options['required_definitions']\n\t// }\n\tprefix() {\n\t\treturn this._options['prefix'] || '';\n\t}\n\tsuffix() {\n\t\treturn this._options['suffix'] || '';\n\t}\n}\n","import {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\n\ntype IONameFunction = (index: number) => string;\ntype ExpectedConnectionTypesFunction = () => ConnectionPointType[];\n\nexport class GlConnectionsController {\n\tprivate _input_name_function: IONameFunction = (index: number) => {\n\t\treturn `in${index}`;\n\t};\n\tprivate _output_name_function: IONameFunction = (index: number) => {\n\t\treturn index == 0 ? 'val' : `val${index}`;\n\t};\n\t// private _default_input_type: ConnectionPointType = ConnectionPointType.FLOAT;\n\tprivate _expected_input_types_function: ExpectedConnectionTypesFunction = () => {\n\t\tconst type = this.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t};\n\tprivate _expected_output_types_function: ExpectedConnectionTypesFunction = () => {\n\t\treturn [this._expected_input_types_function()[0]];\n\t};\n\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tset_input_name_function(func: IONameFunction) {\n\t\tthis._input_name_function = func;\n\t}\n\tset_output_name_function(func: IONameFunction) {\n\t\tthis._output_name_function = func;\n\t}\n\t// set_default_input_type(type: ConnectionPointType) {\n\t// \tthis._default_input_type = type;\n\t// }\n\tset_expected_input_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_input_types_function = func;\n\t}\n\tset_expected_output_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_output_types_function = func;\n\t}\n\n\toutput_name(index: number) {\n\t\treturn this._output_name_function(index);\n\t}\n\n\tprivate _update_signature_if_required_bound = this.update_signature_if_required.bind(this);\n\tprivate _initialized: boolean = false;\n\tinitialize_node() {\n\t\tif (this._initialized) {\n\t\t\tconsole.warn('already initialized', this.node);\n\t\t\treturn;\n\t\t}\n\t\tthis._initialized = true;\n\n\t\tthis.node.io.inputs.add_on_set_input_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.add_on_scene_load_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\tthis.node.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\n\tupdate_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.node.lifecycle.creation_completed || !this._connections_match_inputs()) {\n\t\t\tthis.update_connection_types();\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis.make_successors_update_signatures();\n\t\t}\n\t}\n\t// used when a node changes its signature, adn the output nodes need to adapt their own signatures\n\tprivate make_successors_update_signatures() {\n\t\tfor (let successor of this.node.graph_all_successors()) {\n\t\t\tconst gl_node = successor as BaseGlNodeType;\n\t\t\tif (gl_node.gl_connections_controller) {\n\t\t\t\tgl_node.gl_connections_controller.update_signature_if_required(this.node);\n\t\t\t}\n\t\t}\n\t\t// this.node.io.connections\n\t\t// \t.output_connections()\n\t\t// \t.map((c) => c.node_dest)\n\t\t// \t.forEach((o) => {\n\t\t// \t\to.set_dirty(this.node);\n\t\t// \t});\n\t}\n\n\tupdate_connection_types() {\n\t\tconst set_dirty = false;\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tconst named_input_connections = expected_input_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._input_name_function(i), type);\n\t\t});\n\t\tconst named_outputs = expected_output_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._output_name_function(i), type);\n\t\t});\n\n\t\tthis.node.io.inputs.set_named_input_connection_points(named_input_connections);\n\t\tthis.node.io.outputs.set_named_output_connection_points(named_outputs, set_dirty);\n\t\tthis.node.spare_params_controller.create_spare_parameters();\n\t}\n\n\tprotected _connections_match_inputs(): boolean {\n\t\tconst current_input_types = this.node.io.inputs.named_input_connection_points.map((c) => c.type);\n\t\tconst current_output_types = this.node.io.outputs.named_output_connection_points.map((c) => c.type);\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tif (this.node.name == 'add1')\n\t\t\tif (expected_input_types.length != current_input_types.length) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\tif (expected_output_types.length != current_output_types.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < current_input_types.length; i++) {\n\t\t\tif (current_input_types[i] != expected_input_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < current_output_types.length; i++) {\n\t\t\tif (current_output_types[i] != expected_output_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// protected input_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\t// protected output_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\n\tfirst_input_connection_type(): ConnectionPointType | undefined {\n\t\tconst connections = this.node.io.connections.input_connections();\n\t\tif (connections) {\n\t\t\tconst first_connection = connections[0];\n\t\t\tif (first_connection) {\n\t\t\t\tconst node_src = first_connection.node_src;\n\t\t\t\tconst output_index = first_connection.output_index;\n\t\t\t\tconst node_src_output_connection = node_src.io.outputs.named_output_connection_points[output_index];\n\t\t\t\treturn node_src_output_connection.type;\n\t\t\t}\n\t\t}\n\t\t// return ConnectionPointType.FLOAT;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {VertexColors} from 'three/src/constants';\nimport {NoColors} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {Color} from 'three/src/math/Color';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tuse_vertex_colors = ParamConfig.BOOLEAN(0);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tpublic color!: Color;\n\tvertexColors!: number;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tconst new_vertex_color = pv.use_vertex_colors ? VertexColors : NoColors;\n\t\tif (new_vertex_color != material.vertexColors) {\n\t\t\tmaterial.vertexColors = new_vertex_color;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// color = ParamConfig.COLOR([1, 1, 1]);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tvertexColors!: number;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n\tuniforms!: IUniforms;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\n\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\n\t\tif (material.uniforms.opacity) {\n\t\t\tmaterial.uniforms.opacity.value = pv.opacity;\n\t\t}\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {TypedMatNode} from './_Base';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShaderAssemblerMaterial} from '../gl/code/assemblers/materials/_BaseMaterial';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ShaderMaterialWithCustomMaterials} from '../../../core/geometry/Material';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport abstract class TypedBuilderMatNode<\n\tA extends ShaderAssemblerMaterial,\n\tK extends NodeParamsConfig\n> extends TypedMatNode<ShaderMaterialWithCustomMaterials, K> {\n\tprotected _assembler_controller: GlAssemblerController<A> | undefined;\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t}\n\n\t//\n\t//\n\t// MATERIAL\n\t//\n\t//\n\tcreate_material() {\n\t\treturn this.assembler_controller.assembler.create_material() as ShaderMaterialWithCustomMaterials;\n\t}\n\t//\n\t//\n\t// ASSEMBLER\n\t//\n\t//\n\tget assembler_controller() {\n\t\treturn (this._assembler_controller = this._assembler_controller || this._create_assembler_controller());\n\t}\n\tprotected abstract _create_assembler_controller(): GlAssemblerController<A>;\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// COMPILATION\n\t//\n\t//\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprotected async _compile() {\n\t\tif (this._material) {\n\t\t\tawait this.assembler_controller.assembler.compile_material(this._material);\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\t}\n}\n\nexport type BaseBuilderMatNodeType = TypedBuilderMatNode<ShaderAssemblerMaterial, NodeParamsConfig>;\n","import {TypedLightObjNode} from './_BaseLight';\nimport {Light} from 'three/src/lights/Light';\n// import {CoreTransform} from '../../../core/Transform';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TransformController, TransformedParamConfig} from './utils/TransformController';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\n// import {Transformed} from './Concerns/Transformed';\nclass TransformedObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\n\nexport abstract class BaseLightTransformedObjNode<\n\tL extends Light,\n\tK extends TransformedObjParamConfig\n> extends TypedLightObjNode<L, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../../utils/params/ParamsConfig';\nimport {TypedObjNode} from '../../_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {Light} from 'three/src/lights/Light';\nimport {FlagsControllerD} from '../../../utils/FlagsController';\nexport function BaseLightHelperParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\nclass BaseLightHelperParamsConfig extends BaseLightHelperParamConfig(NodeParamsConfig) {}\nexport abstract class BaseLightHelperObjNode<L extends Light> extends TypedObjNode<Group, BaseLightHelperParamsConfig> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\t// public readonly helper: BaseLightHelper<L> | undefined;\n\tabstract get light(): L;\n}\n\nexport abstract class BaseLightHelper<L extends Light, N extends BaseLightHelperObjNode<L>> {\n\tprotected _object = new Mesh();\n\tprotected _material = new MeshBasicMaterial({wireframe: true, fog: false});\n\tconstructor(protected node: N, private _name: string) {}\n\n\tbuild() {\n\t\tthis._object.name = this._name;\n\t\tthis.build_helper();\n\t}\n\tprotected abstract build_helper(): void;\n\tget object() {\n\t\treturn this._object;\n\t}\n\n\tabstract update(): void;\n}\n","import {Light} from 'three/src/lights/Light';\nimport {BaseLightHelper, BaseLightHelperObjNode} from './helpers/_BaseLightHelper';\n\n// interface Helper<L extends Light> extends BaseLightHelper<L> {\n// \tdispose: () => void;\n// \tupdate: () => void;\n// }\nexport interface HelperConstructor<L extends Light> {\n\tnew (node: BaseLightHelperObjNode<L>, name: string): BaseLightHelper<L, BaseLightHelperObjNode<L>>;\n}\n\nexport class HelperController<L extends Light> {\n\tprivate _helper: BaseLightHelper<L, BaseLightHelperObjNode<L>> | undefined;\n\tconstructor(\n\t\tprivate node: BaseLightHelperObjNode<L>,\n\t\tprivate _helper_constructor: HelperConstructor<L>,\n\t\tprivate _name: string\n\t) {}\n\n\tinitialize_node() {\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.update_helper_attachment();\n\t\t});\n\t}\n\n\tprivate update_helper_attachment() {\n\t\tif (this.node.flags.display.active) {\n\t\t\tconst object = this.helper?.object; // use this.helper to create if needed\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.add(object);\n\t\t\t\tthis._helper?.update();\n\t\t\t}\n\t\t} else {\n\t\t\tconst object = this._helper?.object; // use this._helper to NOT create if not already existing\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.remove(object);\n\t\t\t}\n\t\t}\n\t}\n\tget helper() {\n\t\tif (this.node.flags.display.active) {\n\t\t\treturn (this._helper = this._helper || this._create_helper());\n\t\t}\n\t}\n\tget visible() {\n\t\treturn this.node.flags.display.active && this.node.pv.show_helper;\n\t}\n\n\tprivate _create_helper(): BaseLightHelper<L, BaseLightHelperObjNode<L>> {\n\t\tconst helper = new this._helper_constructor(this.node, this._name);\n\t\thelper.build();\n\t\tthis.node.light.add(helper.object);\n\t\treturn helper;\n\t}\n\n\tupdate() {\n\t\tif (this.visible) {\n\t\t\tif (!this._helper) {\n\t\t\t\tthis._helper = this._create_helper();\n\t\t\t}\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = true;\n\t\t\t\tthis._helper.update();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = false;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass BaseManagerObjParamsConfig extends NodeParamsConfig {}\nexport class BaseManagerObjNode extends TypedObjNode<Group, BaseManagerObjParamsConfig> {\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\t// _init_manager(options = {}) {\n\t// \t// this._init_hierarchy_children_owner(options['children'] || {});\n\t// \t// this.flags.add_display({\n\t// \t// \thas_display_flag: false,\n\t// \t// \tmultiple_display_flags_allowed: true,\n\t// \t// });\n\t// \t// this.set_inputs_count_to_zero();\n\t// \t// this._init_outputs({has_outputs: false});\n\t// }\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {BaseObjNodeType} from '../_Base';\n// import {ParamType} from '../../../poly/ParamType';\n\nconst PARAM_NAME = 'layer';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function LayerParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tlayer = ParamConfig.INTEGER(0, {\n\t\t\trange: [0, 31],\n\t\t\trange_locked: [true, true],\n\t\t});\n\t};\n}\n\nexport class LayersController {\n\tconstructor(private node: BaseObjNodeType) {}\n\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.INTEGER, PARAM_NAME, 0, {\n\t// \t\trange: [0, 31],\n\t// \t\trange_locked: [true, true],\n\t// \t});\n\t// }\n\n\tupdate() {\n\t\tconst object = this.node.object;\n\t\t// const affected_objects = [object];\n\t\t// if (object.cloned_cameras != null) {\n\t\t// \tlodash_each(object.cloned_cameras, cloned_camera=> {\n\t\t// \t\taffected_objects.push(cloned_camera);\n\t\t// \t});\n\t\t// }\n\n\t\t// affected_objects.forEach((affected_object)=> {\n\t\tobject.layers.set(0);\n\t\tobject.layers.enable(this.node.params.integer(PARAM_NAME));\n\t\t// });\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ACESFilmicToneMapping, sRGBEncoding} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport lodash_range from 'lodash/range';\n// import {BaseParam} from '../../../../params/_Base';\nimport {BooleanParam} from '../../../../params/Boolean';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {BasePostProcessNodeType} from '../../../post/_Base';\nimport {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {EffectComposer} from '../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer';\nimport {RenderPass} from '../../../../../../modules/three/examples/jsm/postprocessing/RenderPass';\nimport {Pass} from '../../../../../../modules/three/examples/jsm/postprocessing/Pass';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {POLY} from '../../../../Poly';\n\ninterface DisposablePass extends Pass {\n\tdispose: () => void;\n}\n\nfunction boolean_param_options(index: number) {\n\treturn {\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t},\n\t};\n}\nfunction operator_path_param_options(index: number) {\n\treturn {\n\t\tnode_selection: {context: NodeContext.POST},\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t\t[`use_post_process_node${index}`]: 1,\n\t\t},\n\t};\n}\n\nimport {ParamConfig} from '../../../utils/params/ParamsConfig';\nexport function CameraPostProcessParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tpost_process = ParamConfig.FOLDER();\n\n\t\tdo_post_process = ParamConfig.BOOLEAN(0);\n\t\tuse_post_process_node0 = ParamConfig.BOOLEAN(0, boolean_param_options(0));\n\t\tpost_process_node0 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(0));\n\t\tuse_post_process_node1 = ParamConfig.BOOLEAN(0, boolean_param_options(1));\n\t\tpost_process_node1 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(1));\n\t\tuse_post_process_node2 = ParamConfig.BOOLEAN(0, boolean_param_options(2));\n\t\tpost_process_node2 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(2));\n\t\tuse_post_process_node3 = ParamConfig.BOOLEAN(0, boolean_param_options(3));\n\t\tpost_process_node3 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(3));\n\t};\n}\n\nexport class PostProcessController {\n\t// private _param_do_post_process: boolean;\n\t// private _param_do_sao: boolean;\n\tprivate _renderers_by_canvas_id: Dictionary<WebGLRenderer> = {};\n\tprivate _composers_by_canvas_id: Dictionary<EffectComposer> = {};\n\tprivate _resolution_by_canvas_id: Dictionary<Vector2> = {};\n\tprivate _composers_set_in_progress_by_canvas_id: Dictionary<boolean> = {};\n\tprivate _fetch_post_process_nodes_in_progress: boolean = false;\n\t// private _render_passes: any[] = []\n\tprivate _post_process_nodes: BasePostProcessNodeType[] = [];\n\n\tprivate _post_process_use_node_path_params: BooleanParam[] = [];\n\tprivate _post_process_node_path_params: OperatorPathParam[] = [];\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\t// private _prev_t = 0;\n\trender(canvas: HTMLCanvasElement, size: Vector2, aspect: number) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tif (this.node.params.boolean('do_post_process')) {\n\t\t\t\tconst composer = this.composer(canvas);\n\t\t\t\tif (composer) {\n\t\t\t\t\tcomposer.setSize(size.x, size.y);\n\t\t\t\t\tcomposer.render();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.setup_for_aspect_ratio(aspect);\n\t\t\t\t// const cur_t = performance.now();\n\t\t\t\t// const delta = cur_t - this._prev_t;\n\t\t\t\t// this._prev_t = cur_t;\n\t\t\t\t// console.log(cur_t, delta);\n\t\t\t\trenderer.render(this.node.scene.display_scene, this.node.object);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderer(canvas: HTMLCanvasElement) {\n\t\treturn this._renderers_by_canvas_id[canvas.id];\n\t}\n\n\tcreate_renderer(canvas: HTMLCanvasElement, size: Vector2): WebGLRenderer {\n\t\tconst gl = POLY.renderers_controller.rendering_context(canvas);\n\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: true,\n\t\t\tcontext: gl,\n\t\t});\n\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.physicallyCorrectLights = true; // https://discourse.threejs.org/t/three-js-white-is-too-bright/11873/3\n\n\t\t// TODO: find a way to have those accessible via params\n\t\trenderer.toneMapping = ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 1;\n\t\trenderer.outputEncoding = sRGBEncoding;\n\n\t\t// https://github.com/mrdoob/js/issues/15493\n\t\t// This below is an attempt to fix env map not being loaded in firefox, but that doesn't work.\n\t\t// Since the threejs example (https://threejs.org/examples/?q=exr#webgl_materials_envmaps_exr) also only works in chrome, not in firefox, I assume this is a firefox+linux bug\n\t\t// console.log(renderer.extensions)\n\t\t// renderer.extensions.get( 'EXT_color_buffer_float' );\n\n\t\t// attempt to have particle systems work in firefox on mobile\n\t\t// (current solution is to have the node SOP/particlesSystemGPU force webgl2 to be used)\n\t\t// renderer.extensions.get( 'WEBGL_color_buffer_float' );\n\t\t// renderer.extensions.get( 'WEBGL_draw_buffers' );\n\n\t\tPOLY.renderers_controller.register_renderer(renderer);\n\t\tthis._renderers_by_canvas_id[canvas.id] = renderer;\n\t\tthis.set_renderer_size(canvas, size);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\n\t\treturn renderer;\n\t}\n\tdelete_renderer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tPOLY.renderers_controller.deregister_renderer(renderer);\n\t\t}\n\t}\n\tset_renderer_size(canvas: HTMLCanvasElement, size: Vector2) {\n\t\tthis._resolution_by_canvas_id[canvas.id] = this._resolution_by_canvas_id[canvas.id] || new Vector2();\n\t\tthis._resolution_by_canvas_id[canvas.id].copy(size);\n\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.x, size.y);\n\t\t}\n\t\tconst composer = this.composer(canvas);\n\t\tif (composer) {\n\t\t\tcomposer.setSize(size.x, size.y);\n\t\t}\n\t}\n\n\tprivate composer(canvas: HTMLCanvasElement): EffectComposer {\n\t\treturn (this._composers_by_canvas_id[canvas.id] =\n\t\t\tthis._composers_by_canvas_id[canvas.id] || this._create_composer(canvas));\n\t}\n\n\tprivate _create_composer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\t// const parameters = {\n\t\t\t// \tminFilter: LinearFilter,\n\t\t\t// \tmagFilter: LinearFilter,\n\t\t\t// \tformat: RGBAFormat,\n\t\t\t// \tstencilBuffer: true\n\t\t\t// }\n\t\t\t// const renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, parameters );\n\t\t\tconst composer = new EffectComposer(renderer); //, renderTarget );\n\t\t\t// to achieve better antialiasing\n\t\t\t// while using post:\n\t\t\t// composer.setPixelRatio( window.devicePixelRatio*2 )\n\t\t\tcomposer.setPixelRatio(window.devicePixelRatio * 2);\n\t\t\tthis.set_composer_passes(canvas.id, composer, renderer);\n\n\t\t\treturn composer;\n\t\t} /*else {\n\t\t\tconsole.warn(this._renderers_by_canvas_id)\n\t\t\tthrow \"failed to create composer, no renderer ready\"\n\t\t}*/\n\t}\n\n\tasync update_composer_passes() {\n\t\tif (this.node.params.boolean('do_post_process')) {\n\t\t\tthis._post_process_nodes = [];\n\t\t\tif (this._fetch_post_process_nodes_in_progress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = true;\n\n\t\t\tif (this.composer_passes_nodes_changed()) {\n\t\t\t\tthis._post_process_nodes = [];\n\n\t\t\t\tfor (let i of lodash_range(4)) {\n\t\t\t\t\tconst toggle_param = this._post_process_use_node_path_params[i];\n\t\t\t\t\t// const use_node = await toggle_param.eval_p()\n\t\t\t\t\tconst use_node = toggle_param.value;\n\t\t\t\t\tif (use_node) {\n\t\t\t\t\t\tconst param = this._post_process_node_path_params[i];\n\t\t\t\t\t\tconst post_process_node = param.found_node() as BasePostProcessNodeType;\n\t\t\t\t\t\tif (post_process_node) {\n\t\t\t\t\t\t\tawait post_process_node.request_container();\n\t\t\t\t\t\t\t// const render_pass = container.render_pass()\n\t\t\t\t\t\t\t// this._render_passes.push(render_pass)\n\t\t\t\t\t\t\tthis._post_process_nodes.push(post_process_node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set_composers_passes();\n\t\t\t\t// this._previous_post_process_nodes_paths = this.composer_passes_nodes_paths()\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = false;\n\t\t} else {\n\t\t\tthis._post_process_nodes = [];\n\t\t}\n\t}\n\n\tprivate set_composers_passes() {\n\t\tconst ids = Object.keys(this._composers_by_canvas_id);\n\n\t\tfor (let id of ids) {\n\t\t\tconst composer = this._composers_by_canvas_id[id];\n\t\t\tconst renderer = this._renderers_by_canvas_id[id];\n\t\t\tif (composer) {\n\t\t\t\tthis.set_composer_passes(id, composer, renderer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_composer_passes(id: string, composer: EffectComposer, renderer: WebGLRenderer) {\n\t\tconst set_in_progress = this._composers_set_in_progress_by_canvas_id[id];\n\t\tif (set_in_progress) {\n\t\t\treturn;\n\t\t}\n\t\tthis._composers_set_in_progress_by_canvas_id[id] = true;\n\n\t\tthis.clear_render_passes(composer);\n\n\t\tconst render_scene_pass = new RenderPass(this.node.scene.display_scene, this.node.object);\n\t\trender_scene_pass.clearAlpha = 0;\n\t\tcomposer.addPass(render_scene_pass);\n\n\t\tfor (let post_process_node of this._post_process_nodes) {\n\t\t\tpost_process_node.apply_to_composer(\n\t\t\t\tcomposer,\n\t\t\t\tthis.node.object,\n\t\t\t\tthis._resolution_by_canvas_id[id],\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\n\t\tdelete this._composers_set_in_progress_by_canvas_id[id];\n\t}\n\n\tprivate clear_render_passes(composer: EffectComposer) {\n\t\tlet render_pass: Pass | undefined;\n\t\twhile ((render_pass = composer.passes.pop())) {\n\t\t\tif (render_pass) {\n\t\t\t\tconst disposable_pass: DisposablePass = render_pass as DisposablePass;\n\t\t\t\tif (typeof disposable_pass.dispose === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdisposable_pass.dispose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this._render_passes = []\n\t\tcomposer.passes = [];\n\t}\n\n\tprivate composer_passes_nodes_changed(): boolean {\n\t\treturn true;\n\t\t// I have to evaluate the nodes anyway, in case they changed\n\t\t// unless I can create a method that can store if one of those nodes are the ones that\n\t\t// made this current node dirty\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('post_process', () => {\n\t\tthis.node.add_param(ParamType.BOOLEAN, 'do_post_process', 0);\n\n\t\tlodash_range(4).forEach((i) => {\n\t\t\tconst toggle_param = this.node.add_param(ParamType.BOOLEAN, `use_post_process_node${i + 1}`, 0, {\n\t\t\t\tvisible_if: {do_post_process: 1},\n\t\t\t});\n\n\t\t\tif (toggle_param) {\n\t\t\t\tconst visible_options = {\n\t\t\t\t\tdo_post_process: 1,\n\t\t\t\t\t[toggle_param.name]: 1,\n\t\t\t\t};\n\t\t\t\tconst node_path_options = {\n\t\t\t\t\tnode_selection: {context: NodeContext.POST},\n\t\t\t\t\tvisible_if: visible_options,\n\t\t\t\t};\n\t\t\t\tconst param = this.node.add_param(\n\t\t\t\t\tParamType.OPERATOR_PATH,\n\t\t\t\t\t`post_process_node${i + 1}`,\n\t\t\t\t\t'',\n\t\t\t\t\tnode_path_options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\tthis._post_process_use_node_path_params.push(toggle_param);\n\t\t\t\t\tthis._post_process_node_path_params.push(param);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// });\n\t}\n}\n","import {BaseParamType} from '../../../params/_Base';\nimport {ComplexParamJsonExporterData} from '../export/Param';\nimport {ParamType} from '../../../poly/ParamType';\n\nexport class ParamJsonImporter<T extends BaseParamType> {\n\tconstructor(protected _param: T) {}\n\n\tprocess_data(data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst raw_input = data['raw_input'];\n\t\t// const expression = data['expression'];\n\t\t// const components = data['components'];\n\t\t// if (expression !== undefined) {\n\t\t// \tthis._param.set(expression);\n\t\t// }\n\t\tif (raw_input !== undefined) {\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\n\t\t// const referenced_asset = data['referenced_asset']\n\t\t// if(referenced_asset){\n\t\t// \tthis._param.mark_as_referencing_asset(referenced_asset)\n\t\t// }\n\n\t\tthis.add_main(data);\n\t}\n\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {}\n}\n","import {BaseNodeType} from '../_Base';\nimport lodash_isNaN from 'lodash/isNaN';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\ntype Callback = () => void;\n\nexport class NameController {\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _on_set_name_hooks: Callback[] | undefined;\n\tprivate _on_set_full_path_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'node_name_controller');\n\t\t// this._graph_node.set_scene(this.node.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tstatic base_name(node: BaseNodeType) {\n\t\tlet base = node.type; //CoreString.class_name_to_type(this.self.type())\n\t\tconst last_char = base[base.length - 1];\n\t\tif (!lodash_isNaN(parseInt(last_char))) {\n\t\t\tbase += '_';\n\t\t}\n\t\treturn `${base}1`;\n\t}\n\n\trequest_name_to_parent(new_name: string) {\n\t\tconst parent = this.node.parent;\n\t\tif (parent && parent.children_allowed() && parent.children_controller) {\n\t\t\tparent.children_controller.set_child_name(this.node, new_name);\n\t\t} else {\n\t\t\tconsole.warn('request_name_to_parent failed, no parent found');\n\t\t}\n\t}\n\tset_name(new_name: string) {\n\t\tif (new_name != this.node.name) {\n\t\t\tthis.request_name_to_parent(new_name);\n\t\t}\n\t}\n\tupdate_name_from_parent(new_name: string) {\n\t\tthis.node._set_core_name(new_name);\n\t\tthis.post_set_name();\n\t\tthis.post_set_full_path();\n\t\tif (this.node.children_allowed()) {\n\t\t\tthis.node.children_controller?.children().forEach((child_node) => {\n\t\t\t\tchild_node.name_controller.post_set_full_path(); // TODO: typescript: replace post_set_full_path with execute_on_update_full_path_hooks or on_update_full_path\n\t\t\t});\n\t\t}\n\n\t\tif (this.node.lifecycle.creation_completed) {\n\t\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(this.node);\n\t\t\tthis.node.scene.expressions_controller.regenerate_referring_expressions(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAME_UPDATED);\n\t}\n\n\tadd_post_set_name_hook(hook: Callback) {\n\t\tthis._on_set_name_hooks = this._on_set_name_hooks || [];\n\t\tthis._on_set_name_hooks.push(hook);\n\t}\n\tadd_post_set_full_path_hook(hook: Callback) {\n\t\tthis._on_set_full_path_hooks = this._on_set_full_path_hooks || [];\n\t\tthis._on_set_full_path_hooks.push(hook);\n\t}\n\n\tpost_set_name() {\n\t\tif (this._on_set_name_hooks) {\n\t\t\tfor (let hook of this._on_set_name_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tpost_set_full_path() {\n\t\tif (this._on_set_full_path_hooks) {\n\t\t\tfor (let hook of this._on_set_full_path_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport lodash_isString from 'lodash/isString';\n// import {ParsedTree} from './ParsedTree'\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesController} from './MissingReferencesController'\nexport const VARIABLE_PREFIX = '$';\n\nexport abstract class BaseTraverser {\n\t// private _parsed_tree: ParsedTree\n\tpublic _error_message: string | undefined;\n\n\tconstructor(public param: BaseParamType) {}\n\n\tprotected clear_error() {\n\t\tthis._error_message = undefined;\n\t}\n\tprotected set_error(message: string) {\n\t\tthis._error_message = this._error_message || message;\n\t\t// throw this.error_message\n\t}\n\tprotected _set_error_from_error_bound = this._set_error_from_error.bind(this);\n\tprivate _set_error_from_error(error: Error | string) {\n\t\tif (lodash_isString(error)) {\n\t\t\tthis._error_message = error;\n\t\t} else {\n\t\t\tthis._error_message = error.message;\n\t\t}\n\t}\n\tget is_errored(): boolean {\n\t\treturn this._error_message != null;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\treset() {\n\t\tthis._error_message = undefined;\n\t}\n\n\ttraverse_node(node: jsep.Expression): string | undefined {\n\t\tconst method_name = `traverse_${node.type}`;\n\t\tconst method = (this as any)[method_name];\n\t\tif (method) {\n\t\t\treturn (this as any)[method_name](node);\n\t\t} else {\n\t\t\tthis.set_error(`expression unknown node type: ${node.type}`);\n\t\t}\n\t}\n\n\tprotected abstract traverse_CallExpression(node: jsep.CallExpression): string | undefined; //{\n\n\t// const method_arguments = node.arguments.map((arg)=>{\n\t// \treturn this.traverse_node(arg)\n\t// })\n\t// const method_name = node.callee.name\n\n\t// // literal construct (if...)\n\t// const literal_contruct = this[`traverse_literal_construct_${node.type}`] //LITERAL_CONSTRUCT[method_name]\n\t// if(literal_contruct){\n\t// \treturn literal_contruct.bind(this)(method_arguments)\n\t// }\n\n\t// // direct expressions (Math.floor, Math.sin...)\n\t// const arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`\n\t// const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name]\n\t// if(direct_function_name){\n\t// \treturn `${direct_function_name}(${arguments_joined})`\n\t// }\n\n\t// // indirect methods (points_count, asset...)\n\t// const indirect_method = INDIRECT_EXPRESSION_METHODS[method_name]\n\t// if(indirect_method){\n\t// \tthis._create_method_and_dependencies(node, method_name, arguments_joined)\n\t// \treturn `await methods[${this.method_index}].process_arguments(${arguments_joined})`\n\t// }\n\n\t// this.set_error(`unknown method: ${method_name}`)\n\t//}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_ConditionalExpression(node: jsep.ConditionalExpression): string {\n\t\treturn `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n\t\t\tnode.alternate\n\t\t)})`;\n\t}\n\n\t// currently only used for string expressions such as\n\t// pt_`@ptnum+1`\n\tprotected traverse_Compound(node: jsep.Compound): string {\n\t\tconst args = node.body;\n\t\tlet traversed_args = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg_node = args[i];\n\t\t\tif (arg_node.type == 'Identifier') {\n\t\t\t\tif ((arg_node as jsep.Identifier).name[0] == VARIABLE_PREFIX) {\n\t\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t\t} else {\n\t\t\t\t\ttraversed_args.push(`'${(arg_node as jsep.Identifier).name}'`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t}\n\t\t}\n\t\treturn traversed_args.join(' + ');\n\t\t// this may work for things like  [1,-2,3][$F%2]\n\t\t// but can be confusing for more operators like [1,-2,3][$F%2][2]\n\n\t\t// console.log(node)\n\t\t// return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(node.alternate)})`\n\t\t// this.set_error(\"unrecognised expression Compound\")\n\t\t// return \"\"\n\t}\n\tprotected abstract traverse_UnaryExpression(node: jsep.UnaryExpression): string; //{\n\n\t// if (node.operator === ATTRIBUTE_PREFIX) {\n\t// \tconst attrib_name = this.traverse_node(node.argument);\n\t// \treturn `param.entity_attrib_value(${QUOTE}${attrib_name}${QUOTE})`\n\t// } else {\n\t// \treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t// }\n\t//}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected abstract traverse_Identifier(node: jsep.Identifier): string | undefined; //{\n\t// const identifier_first_char = node.name[0]\n\t// if(identifier_first_char == VARIABLE_PREFIX){\n\t// \tconst identifier_name_without_dollar_sign = node.name.substr(1)\n\n\t// \t// globals constants: Math.PI or Math.E\n\t// \tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign]\n\t// \tif(direct_constant_name){\n\t// \t\treturn direct_constant_name\n\t// \t}\n\n\t// \t// scene or node globals: $F, $CH, $OS\n\t// \tconst method_name = `Identifier_${identifier_name_without_dollar_sign}_body`\n\t// \tconst method = this[method_name]\n\t// \tif(method){\n\t// \t\treturn this[method_name]()\n\t// \t}else{\n\t// \t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t// \t}\n\n\t// } else {\n\t// \treturn node.name // @ptnum will call this method and return \"ptnum\"\n\t// }\n\t//}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\t// abstract Identifier_F_body(): string //{\n\t// this.dependencies.push(this.param.scene().context())\n\t// return `param.scene().frame()`\n\t//}\n\t// abstract Identifier_CH_body(): string //{\n\t// return `${QUOTE}${this.param.name()}${QUOTE}`\n\t//}\n\t// TODO:\n\t// '$CEX': '_eval_identifier_as_expression_centroid_x',\n\t// '$CEY': '_eval_identifier_as_expression_centroid_y',\n\t// '$CEZ': '_eval_identifier_as_expression_centroid_z',\n\t// '$CH': '_eval_identifier_as_param_name',\n\t// '$OS': '_eval_identifier_as_node_name',\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\t// protected _create_method_and_dependencies(node: jsep.CallExpression, method_name: string, arguments_joined: string) {\n\t// \tconst method_constructor = Method[method_name]\n\t// \tconst method = new method_constructor(this.param)\n\t// \tthis.method_index += 1\n\t// \tthis.methods[this.method_index] = method\n\n\t// \tconst dependency_arguments_function = new Function(`return [${arguments_joined}]`)\n\t// \tconst dependency_arguments = dependency_arguments_function()\n\n\t// \tconst reference_search_result = method.find_dependencies(dependency_arguments)\n\t// \treference_search_result.found_graph_nodes.forEach((graph_node)=>{\n\t// \t\tthis.dependencies.push(graph_node)\n\t// \t})\n\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(node)\n\t// \t})\n\t// }\n}\n","// import lodash_each from 'lodash/each'\nimport lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber'\nimport {TypedParam} from './_Base';\n// import {TypedParamVisitor} from './_Base';\n// import {AsCodeString} from './concerns/visitors/String';\n// import {ExpressionController} from '../expressions/ExpressionController'\nimport {ParsedTree} from '../expressions/traversers/ParsedTree';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\n\nexport class StringParam extends TypedParam<ParamType.STRING> {\n\tstatic type() {\n\t\treturn ParamType.STRING;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.STRING]) {\n\t\treturn `${raw_input}`;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.STRING],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.STRING]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.STRING], val2: ParamValuesTypeMap[ParamType.STRING]) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\tconvert(raw_val: any): string {\n\t\tif (lodash_isString(raw_val)) {\n\t\t\treturn raw_val;\n\t\t}\n\t\treturn `${raw_val}`;\n\t}\n\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tif (this._value_elements(this._raw_input).length >= 3) {\n\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\tthis.set_dirty();\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._raw_input != this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\tif (this._expression_controller) {\n\t\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(`expression error: ${this.expression_controller.error_message}`);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\t// we need to check if equal nulls explicitely\n\t\t\t\t// as the empty string '' evals to false...\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tthis._value = converted;\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`expression returns an invalid type (${expression_result})`);\n\t\t\t\t}\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _value_elements(v: string): string[] {\n\t\treturn ParsedTree.string_value_elements(v);\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonExporter} from './Node';\n// import {BaseNodeObjJsonExporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonExporter} from './node/Subnetwork';\n\nimport {ParamJsonExporter} from './Param';\n// import {ParamMultipleJsonExporter} from './param/Multiple';\nimport {ParamNumericJsonExporter} from './param/Numeric';\nimport {ParamOperatorPathJsonExporter} from './param/OperatorPath';\nimport {ParamStringJsonExporter} from './param/String';\nimport {ParamRampJsonExporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\n// import {TypedMultipleParam} from '../../../params/_Multiple';\nimport {TypedNumericParam} from '../../../params/_Numeric';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonExportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonExporter(node);\n\t\t// }\n\t\treturn new NodeJsonExporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\t// if (param instanceof TypedMultipleParam) {\n\t\t// \treturn new ParamMultipleJsonExporter(param);\n\t\t// }\n\t\tif (param instanceof TypedNumericParam) {\n\t\t\treturn new ParamNumericJsonExporter(param);\n\t\t}\n\t\tif (param instanceof OperatorPathParam) {\n\t\t\treturn new ParamOperatorPathJsonExporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonExporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonExporter(param);\n\t\t}\n\t\treturn new ParamJsonExporter(param);\n\t}\n}\n","export enum LineType {\n\tFUNCTION_DECLARATION = 'function_declaration',\n\tDEFINE = 'define',\n\tBODY = 'body',\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedGlNode, BaseGlNodeType} from './_Base';\n// import {BaseNodeGlMathFunctionArg1} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {BaseNamedConnectionPointType} from '../utils/connections/NamedConnectionPoint';\nimport {ParamType} from '../../poly/ParamType';\n\nconst INPUT_NAME = 'export';\nconst OUTPUT_NAME = 'val';\n\nconst ConnectionPointTypesAvailableForAttribute = [\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {GlConnectionsController} from './utils/ConnectionsController';\nclass AttributeGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypesAvailableForAttribute.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\nconst ParamsConfig = new AttributeGlParamsConfig();\n\nexport class AttributeGlNode extends TypedGlNode<AttributeGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attribute';\n\t}\n\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile_if_is_exporting.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [\n\t\t\tConnectionPointTypesAvailableForAttribute[this.pv.type],\n\t\t]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\tcreate_params() {\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.add_param(ParamType.BOOLEAN, 'export_when_connected', 0);\n\t\t}\n\t}\n\t// inputless_params_names(): string[] {\n\t// \treturn ['type'];\n\t// }\n\n\tget input_name() {\n\t\treturn INPUT_NAME;\n\t}\n\tget output_name() {\n\t\treturn OUTPUT_NAME;\n\t}\n\n\t// private create_inputs_from_params() {\n\t// \tif (this.material_node.allow_attribute_exports) {\n\t// \t\t// this.set_named_inputs([new TypedConnectionFloat(AttributeGlNode.input_name())]);\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(INPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t// \t\t]);\n\t// \t\t// this._init_graph_node_inputs();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_attribute(\n\t\t\tthis,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// }\n\t}\n\n\t// update_output_type(constructor) {\n\t// \tconst named_output = new constructor(Attribute.output_name());\n\t// \tthis.set_named_outputs([named_output]);\n\t// }\n\t// update_input_type(constructor) {\n\t// \tconst named_input = new constructor(Attribute.input_name());\n\t// \tthis.set_named_inputs([named_input]);\n\t// \tthis._init_graph_node_inputs();\n\t// }\n\n\tget attribute_name(): string {\n\t\treturn lodash_trim(this.pv.name);\n\t}\n\tgl_type(): ConnectionPointType {\n\t\treturn this.io.outputs.named_output_connection_points[0].type;\n\t}\n\t//\n\t//\n\t// Utility methods for SOP/ParticlesSystemGPU and Assembler/Particles\n\t//\n\t//\n\tconnected_input_node(): BaseGlNodeType | null {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.inputs.named_input(INPUT_NAME);\n\t\t// }\n\t}\n\tconnected_input_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\treturn this.io.inputs.named_input_connection_point(INPUT_NAME);\n\t}\n\t// connected_input(): NamedConnection {\n\t// \tconst connection_point = this.connected_input_connection_point();\n\t// \tif (connection_point) {\n\t// \t\treturn this.io.inputs.named_inputs().filter((ni) => ni.name() == Attribute.input_name())[0];\n\t// \t}\n\t// }\n\toutput_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.outputs.named_output_connection_points_by_name(this.input_name);\n\t\t// }\n\t}\n\t// connected_output(): NamedConnection {\n\t// \tconst output = this.named_output(0);\n\t// \tif (output) {\n\t// \t\treturn output; //this.named_inputs().filter(ni=>ni.name() == Attribute.input_name())[0]\n\t// \t}\n\t// }\n\tget is_importing(): boolean {\n\t\treturn this.io.outputs.used_output_names().length > 0; // TODO: typescript - ensure that we can check that the connected outputs are part of the nodes retrived by the node traverser\n\t}\n\tget is_exporting(): boolean {\n\t\tif (this.pv.export_when_connected) {\n\t\t\tconst input_node = this.io.inputs.named_input(INPUT_NAME);\n\t\t\treturn input_node != null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tprivate _set_mat_to_recompile_if_is_exporting() {\n\t\tif (this.is_exporting) {\n\t\t\tthis._set_mat_to_recompile();\n\t\t}\n\t}\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// SIGNATURE\n\t//\n\t//\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_input_and_output_types();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// \tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t// }\n\t// private update_input_and_output_types() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this.output_name, ConnectionPointTypesAvailableForAttribute[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// \tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(this.input_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t// \t\t]);\n\t// \t}\n\t// }\n}\n","import {AssemblerControllerNode} from '../Controller';\n\nexport class GlNodeFinder {\n\tstatic find_output_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('output');\n\t\treturn nodes;\n\t\t// if (nodes.length > 1) {\n\t\t// \tnode.states.error.set('only one output node allowed');\n\t\t// }\n\t\t// return nodes[0];\n\t}\n\tstatic find_attribute_export_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('attribute');\n\t\treturn nodes.filter((node) => {\n\t\t\t// do not use attributes that are used as an input, as export\n\t\t\t// return (node.used_output_names().length == 0) &&\n\t\t\treturn node.is_exporting;\n\t\t});\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedCameraControlsEventNode, CameraControls} from './_BaseCameraControls';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CameraOrbitEventParamsConfig extends NodeParamsConfig {\n\tallow_pan = ParamConfig.BOOLEAN(1);\n\tallow_rotate = ParamConfig.BOOLEAN(1);\n\tallow_zoom = ParamConfig.BOOLEAN(1);\n\ttdamping = ParamConfig.BOOLEAN(1);\n\tdamping = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {tdamping: true},\n\t});\n\tscreen_space_panning = ParamConfig.BOOLEAN(1);\n\trotate_speed = ParamConfig.FLOAT(0.5);\n\tmin_distance = ParamConfig.FLOAT(1, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tmax_distance = ParamConfig.FLOAT(50, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tpolar_angle_range = ParamConfig.VECTOR2([0, '$PI']);\n}\nconst ParamsConfig = new CameraOrbitEventParamsConfig();\n\nexport class CameraOrbitControlsEventNode extends TypedCameraControlsEventNode<CameraOrbitEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'camera_orbit_controls';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['controls/OrbitControls'];\n\t// }\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// const c = this.constructor as typeof CameraOrbitControlsEventNode;\n\t\t// const {OrbitControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\tconst controls = new OrbitControls(camera, element);\n\t\treturn controls;\n\t}\n\n\tsetup_controls(controls: OrbitControls) {\n\t\tcontrols.enablePan = this.pv.allow_pan;\n\t\tcontrols.enableRotate = this.pv.allow_rotate;\n\t\tcontrols.enableZoom = this.pv.allow_zoom;\n\n\t\tcontrols.enableDamping = this.pv.tdamping;\n\t\tcontrols.dampingFactor = this.pv.damping;\n\n\t\tcontrols.rotateSpeed = this.pv.rotate_speed;\n\n\t\tcontrols.screenSpacePanning = this.pv.screen_space_panning;\n\n\t\tcontrols.minDistance = this.pv.min_distance;\n\t\tcontrols.maxDistance = this.pv.max_distance;\n\n\t\tcontrols.minPolarAngle = this.pv.polar_angle_range.x;\n\t\tcontrols.maxPolarAngle = this.pv.polar_angle_range.y;\n\n\t\t// to prevent moving the camera when using the arrows to change frame\n\t\tcontrols.enableKeys = false;\n\t}\n\n\tset_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void {\n\t\tconst target = camera_node.params.vector3('target');\n\t\tcontrols.target.copy(target);\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {BaseMatNodeType} from '../_Base';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {BaseCopNodeType} from '../../cop/_Base';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {BooleanParam} from '../../../params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ShaderMaterial, IUniform} from 'three';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.OPERATOR_PATH(FileCopNode.DEFAULT_NODE_PATH.UV, {visible_if: {use_map: 1}});\n\t};\n}\n// class TextureMapMaterial<T extends string> extends Material {\n// \t[T]!: Texture | null;\n// }\n// class TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\n// class TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n// \tcreate_material() {\n// \t\treturn new TextureMapMaterial();\n// \t}\n// }\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\n// type test = FilterFlags<MeshLambertMaterial, Texture|null>\n// type test2 = AllowedNames<MeshLambertMaterial, Texture|null>\n// type test3 = SubType<MeshLambertMaterial, Texture|null>\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\nexport function OperatorPathOptions(controller: typeof BaseTextureMapController, use_map_name: string) {\n\treturn {\n\t\tvisible_if: {[use_map_name]: 1},\n\t\tnode_selection: {context: NodeContext.COP},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\ntype TextureUpdateCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\ttexture: Texture\n) => void;\ntype TextureRemoveCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>\n) => void;\n\ntype CurrentMaterial = Material | ShaderMaterial;\n\nexport interface UpdateOptions {\n\tdirect_params?: boolean;\n\tuniforms?: boolean;\n\tdefine?: boolean;\n}\nexport class BaseTextureMapController extends BaseController {\n\tconstructor(protected node: BaseMatNodeType, protected _update_options: UpdateOptions) {\n\t\tsuper(node);\n\t\tif (this._update_options.define == null) {\n\t\t\tthis._update_options.define = true;\n\t\t}\n\t}\n\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: OperatorPathParam) {\n\t\tuse_map_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t\tpath_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\tstatic update(node: BaseNodeType) {}\n\n\tasync _update<M extends CurrentMaterial>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: string,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tif (this._update_options.uniforms) {\n\t\t\tconst shader_material = material as ShaderMaterial;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<IUniforms, Texture | null>;\n\t\t\tawait this._update_texture_on_uniforms(shader_material, attr_name, use_map_param, path_param);\n\t\t}\n\t\tif (this._update_options.direct_params) {\n\t\t\tconst mat = material as Material;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<Material, Texture | null>;\n\t\t\tawait this._update_texture_on_material(mat, attr_name, use_map_param, path_param);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE UNIFORMS\n\t//\n\t//\n\tasync _update_texture_on_uniforms<O extends IUniform>(\n\t\tmaterial: ShaderMaterial,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial.uniforms,\n\t\t\tmat_attrib_name as never,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_uniforms.bind(this),\n\t\t\tthis._remove_texture_from_uniforms.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_uniforms<O extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = uniforms[mat_attrib_name] != null && uniforms[mat_attrib_name].value != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>uniforms[mat_attrib_name].value) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\tuniforms[mat_attrib_name].value = texture as any;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tmaterial.defines[define_name] = 1;\n\t\t\t}\n\t\t\tmaterial.defines['USE_UV'] = 1;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_uniforms<U extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: U,\n\t\tmat_attrib_name: keyof SubType<U, Texture | null>\n\t) {\n\t\tif (uniforms[mat_attrib_name].value) {\n\t\t\tuniforms[mat_attrib_name].value = null;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tdelete material.defines[define_name];\n\t\t\t}\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _define_name(mat_attrib_name: string): string {\n\t\treturn 'USE_' + mat_attrib_name.replace('_', '').toUpperCase();\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL\n\t//\n\t//\n\tasync _update_texture_on_material<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial,\n\t\t\tmat_attrib_name,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_material.bind(this),\n\t\t\tthis._remove_texture_from_material.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = texture_owner[mat_attrib_name] != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>texture_owner[mat_attrib_name]) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\ttexture_owner[mat_attrib_name] = texture as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>\n\t) {\n\t\tif (texture_owner[mat_attrib_name]) {\n\t\t\ttexture_owner[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// MAIN ALGO to decide if texture should be updated\n\t//\n\t//\n\tprivate async _update_required_attribute<O extends Object>(\n\t\tmaterial: Material,\n\t\ttexture_owner: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam,\n\t\tupdate_callback: TextureUpdateCallback<O>,\n\t\tremove_callback: TextureRemoveCallback<O>\n\t) {\n\t\tif (use_map_param.is_dirty) {\n\t\t\tawait use_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.is_dirty) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst found_node = path_param.found_node();\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t\t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t\t\t\t\tconst container = await texture_node.request_container();\n\t\t\t\t\tconst texture = container.texture();\n\n\t\t\t\t\tif (texture) {\n\t\t\t\t\t\tupdate_callback(material, texture_owner, mat_attrib_name, texture);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.node.states.error.set(`found node has no texture`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set(`found map node is not a COP node`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set(`could not find map node ${path_param.name} with path ${path_param.value}`);\n\t\t\t}\n\t\t}\n\t\t// this is not wrapped in an else clause after the \"if (use_map) {\"\n\t\t// as we should come here after any of the errors above, if any is triggered\n\t\tremove_callback(material, texture_owner, mat_attrib_name);\n\t}\n\n\tprivate _do_update_define(): boolean {\n\t\tif (this._update_options.define == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._update_options.define;\n\t}\n}\n","import {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderAssemblerCustomMeshDistance} from './CustomMeshDistance';\nimport {ShaderAssemblerCustomMeshDepth} from './CustomMeshDepth';\nimport {ShaderAssemblerCustomMeshDepthDOF} from './CustomMeshDepthDOF';\n\nconst ASSEMBLER_MAP: CustomAssemblerMap = new Map([\n\t// [CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance],\n\t// [CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth],\n\t// [CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF],\n]);\nASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF);\n\nexport abstract class ShaderAssemblerMesh extends ShaderAssemblerMaterial {\n\t// TODO: I've noticed a case where instances would not display when those shadow shaders were exported\n\t// But the objects display fine if those are not assigned\n\t// so it could be a bug at render time (not sure if my code, threejs or hardware)\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn ASSEMBLER_MAP;\n\t}\n}\n","import {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {Light} from 'three/src/lights/Light';\nimport {Color} from 'three/src/math/Color';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {Group} from 'three/src/objects/Group';\n\nexport abstract class TypedLightObjNode<L extends Light, K extends NodeParamsConfig> extends TypedObjNode<Group, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.LIGHT;\n\tprotected _color_with_intensity = new Color(0x00000);\n\tprotected _light!: L;\n\tget light() {\n\t\treturn this._light;\n\t}\n\tprotected abstract create_light(): L;\n\tprotected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis._light = this.create_light();\n\t\tthis.object.add(this._light);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis.update_light_attachment();\n\t\t});\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.used_in_scene) {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\tprivate update_light_attachment() {\n\t\tif (this.flags.display.active) {\n\t\t\tthis.object.add(this.light);\n\t\t\tthis._cook_main_without_inputs_when_dirty();\n\t\t} else {\n\t\t\tthis.object.remove(this.light);\n\t\t}\n\t}\n\n\t// create_params() {\n\t// \t// this.create_light_params();\n\t// \t// this.create_shadow_params_main();\n\t// }\n\n\tcreate_shadow_params_main() {\n\t\tif (this._light.shadow != null) {\n\t\t\treturn this.create_shadow_params();\n\t\t}\n\t}\n\n\tprotected create_light_params(): void {}\n\tprotected update_light_params(): void {}\n\n\tprotected create_shadow_params() {\n\t\treturn;\n\t\t// this.add_param('toggle', 'cast_shadows', 1);\n\t\t// shadow_options = {visible_if: {cast_shadows: 1}}\n\t\t// this.add_param( 'vector2', 'shadow_res', [1024, 1024], shadow_options );\n\t\t// this.add_param( 'float', 'shadow_near', 0.1, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_far', 100, shadow_options );\n\t\t// // this.add_param( 'float', 'shadow_far', 500 ) # same as param distance\n\t\t// this.add_param( 'float', 'shadow_bias', -0.0001, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_blur', 1, shadow_options );\n\t}\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tcook() {\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\tupdate_shadow_params() {\n\t\t// let object;\n\t\t// return;\n\t\t// if (((object = this.object()) != null) && (object.shadow != null)) {\n\t\t// \tobject.castShadow = this._param_cast_shadow;\n\t\t// \tobject.shadow.mapSize.width = this._param_shadow_res.x;\n\t\t// \tobject.shadow.mapSize.height = this._param_shadow_res.y;\n\t\t// \tobject.shadow.camera.near = this._param_shadow_near;\n\t\t// \tobject.shadow.camera.far = this._param_shadow_far;\n\t\t// \treturn object.shadow.bias = this._param_shadow_bias;\n\t\t// }\n\t}\n\n\tget color_with_intensity() {\n\t\tconst color = this.params.color('color');\n\t\tconst intensity = this.params.float('intensity');\n\t\tthis._color_with_intensity.copy(color).multiplyScalar(intensity);\n\t\treturn this._color_with_intensity;\n\t}\n\tget active(): boolean {\n\t\treturn this.flags.display.active;\n\t}\n}\n\nexport type BaseLightObjNodeType = TypedLightObjNode<Light, NodeParamsConfig>;\n// export class BaseLightObjNodeClass extends TypedLightObjNode<Light, NodeParamsConfig> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {Material} from 'three/src/materials/Material';\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Bone} from 'three/src/objects/Bone';\n\n// import {CoreConstant} from './Constant'\nimport {CoreGeometry} from './Geometry';\nimport {GroupString} from './Group';\nimport {CoreAttribute} from './Attribute';\nimport {CoreConstant} from './Constant';\nimport {CorePoint} from './Point';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from './Material';\nimport {CoreString} from '../String';\n\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreEntity} from './Entity';\nconst PTNUM = 'ptnum';\nconst NAME_ATTR = 'name';\nconst ATTRIBUTES = 'attributes';\n\ninterface Object3DWithAnimations extends Object3D {\n\tanimations: AnimationClip[];\n}\ninterface MaterialWithColor extends Material {\n\tcolor: Color;\n}\ninterface SkinnedMeshWithisSkinnedMesh extends SkinnedMesh {\n\treadonly isSkinnedMesh: boolean;\n}\n\nexport class CoreObject extends CoreEntity {\n\tconstructor(private _object: Object3D, index: number) {\n\t\tsuper(index);\n\t\tif (this._object.userData[ATTRIBUTES] == null) {\n\t\t\tthis._object.userData[ATTRIBUTES] = {};\n\t\t}\n\t}\n\n\t// set_index(i: number) {\n\t// \tthis._index = i;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tgeometry() {\n\t\treturn (this._object as Mesh).geometry as BufferGeometry;\n\t}\n\tcore_geometry(): CoreGeometry {\n\t\tconst geo = this.geometry();\n\t\treturn new CoreGeometry(geo);\n\t\t// const geo = this.geometry()\n\t\t// if (geo) {\n\t\t// \treturn new CoreGeometry(geo)\n\t\t// } else {\n\t\t// \treturn null\n\t\t// }\n\t}\n\tpoints() {\n\t\treturn this.core_geometry().points();\n\t}\n\tpoints_from_group(group: GroupString): CorePoint[] {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tif (indices) {\n\t\t\t\tconst points = this.points();\n\t\t\t\treturn indices.map((i) => points[i]);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis.core_geometry().compute_vertex_normals();\n\t}\n\n\tadd_attribute(name: string, value: AttribValue) {\n\t\tlet data;\n\t\tif (!lodash_isNumber(value) && !lodash_isArray(value) && !lodash_isString(value)) {\n\t\t\tdata = (value as Vector3).toArray();\n\t\t} else {\n\t\t\tdata = value;\n\t\t}\n\t\tthis._object.userData[ATTRIBUTES][name] = data;\n\t}\n\tadd_numeric_attrib(name: string, value: NumericAttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tset_attrib_value(name: string, value: AttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\t\tthis.core_geometry().add_numeric_attrib(name, size, default_value);\n\t}\n\n\tattribute_names(): string[] {\n\t\t// TODO: to remove\n\t\treturn Object.keys(this._object.userData[ATTRIBUTES]);\n\t}\n\tattrib_names(): string[] {\n\t\treturn this.attribute_names();\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\treturn this.attribute_names().includes(name);\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tthis.add_attribute(new_name, this.attrib_value(old_name));\n\t\tthis.delete_attribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tdelete this._object.userData[ATTRIBUTES][name];\n\t}\n\n\tattrib_value(name: string): AttribValue {\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet val = this._object.userData[ATTRIBUTES][name];\n\t\t\tif (val == null) {\n\t\t\t\tif (name == NAME_ATTR) {\n\t\t\t\t\tval = this._object.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t}\n\tname(): string {\n\t\treturn this.attrib_value(NAME_ATTR) as string;\n\t}\n\thuman_type(): string {\n\t\treturn CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[this._object.constructor.name];\n\t}\n\n\tattrib_type(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (lodash_isString(val)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_size(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (lodash_isString(val) || lodash_isNumber(val)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tswitch (val.constructor) {\n\t\t\t\tcase Vector2:\n\t\t\t\t\treturn 2;\n\t\t\t\tcase Vector3:\n\t\t\t\t\treturn 3;\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn CoreObject.clone(this._object);\n\t}\n\n\tstatic clone(src_object: Object3D) {\n\t\tconst new_object = src_object.clone();\n\n\t\tvar sourceLookup = new Map<Object3D, Object3D>();\n\t\tvar cloneLookup = new Map<Object3D, Object3D>();\n\t\tCoreObject.parallelTraverse(src_object, new_object, function(sourceNode: Object3D, clonedNode: Object3D) {\n\t\t\tsourceLookup.set(clonedNode, sourceNode);\n\t\t\tcloneLookup.set(sourceNode, clonedNode);\n\t\t});\n\t\tnew_object.traverse(function(node) {\n\t\t\tconst src_node = sourceLookup.get(node) as SkinnedMesh;\n\t\t\tconst mesh_node = node as Mesh;\n\n\t\t\tif (mesh_node.geometry) {\n\t\t\t\tconst src_node_geometry = src_node.geometry as BufferGeometry;\n\t\t\t\tmesh_node.geometry = CoreGeometry.clone(src_node_geometry);\n\t\t\t\tconst mesh_node_geometry = mesh_node.geometry as BufferGeometry;\n\t\t\t\tif (mesh_node_geometry.userData) {\n\t\t\t\t\tmesh_node_geometry.userData = lodash_cloneDeep(src_node_geometry.userData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mesh_node.material) {\n\t\t\t\tmesh_node.material = src_node.material;\n\t\t\t\tCoreMaterial.apply_custom_materials(node, mesh_node.material as ShaderMaterialWithCustomMaterials);\n\n\t\t\t\t// prevents crashes for linesegments with shader material such as the line dashed instance\n\t\t\t\t// TODO: test\n\t\t\t\tconst material_with_color = mesh_node.material as MaterialWithColor;\n\t\t\t\tif (material_with_color.color == null) {\n\t\t\t\t\tmaterial_with_color.color = new Color(1, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src_object.userData) {\n\t\t\t\tnode.userData = lodash_cloneDeep(src_node.userData);\n\t\t\t}\n\n\t\t\tconst src_node_with_animations = (<unknown>src_node) as Object3DWithAnimations;\n\t\t\tif (src_node_with_animations.animations) {\n\t\t\t\t(node as Object3DWithAnimations).animations = src_node_with_animations.animations.map((animation) =>\n\t\t\t\t\tanimation.clone()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst skinned_node = node as SkinnedMesh;\n\t\t\tif ((skinned_node as SkinnedMeshWithisSkinnedMesh).isSkinnedMesh) {\n\t\t\t\tvar clonedMesh = skinned_node;\n\t\t\t\tvar sourceMesh = src_node;\n\t\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\t\tclonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n\n\t\t\t\tconst new_bones = sourceBones.map(function(bone) {\n\t\t\t\t\treturn cloneLookup.get(bone);\n\t\t\t\t}) as Bone[];\n\n\t\t\t\tclonedMesh.skeleton.bones = new_bones;\n\n\t\t\t\tclonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n\t\t\t}\n\t\t});\n\n\t\treturn new_object;\n\t}\n\n\tstatic parallelTraverse(a: Object3D, b: Object3D, callback: (a: Object3D, b: Object3D) => void) {\n\t\tcallback(a, b);\n\t\tfor (var i = 0; i < a.children.length; i++) {\n\t\t\tthis.parallelTraverse(a.children[i], b.children[i], callback);\n\t\t}\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InterleavedBuffer} from 'three/src/core/InterleavedBuffer';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\nimport {TriangleFanDrawMode} from 'three/src/constants';\nimport {TriangleStripDrawMode} from 'three/src/constants';\nimport {TrianglesDrawMode} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tvar vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new Vector3(), tmp2 = new Vector3();\n\t\tvar n = new Vector3(), n2 = new Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) return null;\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) return null;\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) return null;\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) return null;\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) return null;\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) return null;\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) return null;\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) return null;\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.warn( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n\nexport { BufferGeometryUtils };\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {BaseGlNodeType} from '../../_Base';\n// import {Definition} from '../../Definition/_Module'\n// import { VariableConfig } from '../Config/VariableConfig';\nimport {TextureAllocationsController} from '../utils/TextureAllocationsController';\nimport {GlobalsGeometryHandler} from './Geometry';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {UniformGLDefinition, AttributeGLDefinition, VaryingGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig'\n// import {UniformConfig} from '../Config/UniformConfig'\n// import {AttributeConfig} from '../Config/AttributeConfig'\n// import { Attribute } from '../../Attribute';\n\nexport class GlobalsTextureHandler extends GlobalsBaseController {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tstatic UV_ATTRIB = 'particles_sim_uv_attrib';\n\tstatic UV_VARYING = 'particles_sim_uv_varying';\n\tstatic PARTICLE_SIM_UV = 'particleUV';\n\n\tprivate globals_geometry_handler: GlobalsGeometryHandler | undefined;\n\n\tconstructor(private _uv_name: string) {\n\t\tsuper();\n\t}\n\n\tset_texture_allocations_controller(controller: TextureAllocationsController) {\n\t\tthis._texture_allocations_controller = controller;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\n\t\tconst variable = this._texture_allocations_controller.variable(output_name);\n\n\t\tif (variable && connection_point) {\n\t\t\tconst gl_type = connection_point.type;\n\t\t\tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shaders_collection_controller);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t} else {\n\t\t\tthis.globals_geometry_handler = this.globals_geometry_handler || new GlobalsGeometryHandler();\n\t\t\tthis.globals_geometry_handler.handle_globals_node(\n\t\t\t\tglobals_node,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t// body_lines,\n\t\t\t\t// dependencies,\n\t\t\t\t// shader_name\n\t\t\t);\n\t\t}\n\n\t\t// definitions\n\t\t// const gl_type = named_output.gl_type()\n\t\t// const definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t// definitions_by_shader_name[shader_name].push(definition)\n\n\t\t// const new_value = this.read_attribute(globals_node, gl_type, output_name)\n\t\t// const body_line = `${var_name} = ${new_value}`\n\t\t// if(allocation){\n\t\t// \tconst var_name_texture = allocation.texture_name()\n\t\t// \t// add another definition if a texture was allocated by ParticlesSystemGPU\n\t\t// \tconst texture_definition = new Definition.Uniform(globals_node, 'sampler2D', var_name_texture)\n\t\t// \tdefinitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t// \t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', GlobalsTextureHandler.UV_ATTRIB)\n\t\t// \t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t// \t// this.add_particles_sim_uv_attribute(globals_node)\n\n\t\t// \tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shader_name)\n\t\t// \tbody_line = `${var_name} = ${new_value}`\n\n\t\t// } else {\n\t\t// \tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// }\n\n\t\t// const new_body_lines = [\n\t\t// \t// `${var_name} = vec3(${output_name})`,\n\t\t// \t`vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz;`\n\t\t// ]\n\t\t// const body_line = `vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz`\n\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// if(dependencies.length == 0){\n\t\t// \tbody_lines.push(body_line)\n\t\t// }\n\t}\n\t// variable_config_default(variable_name: string): string {\n\t// \t// const allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \t// if(allocation){\n\t// \t// \treturn `texture2D( texture_${allocation.name()}, ${GlobalsTextureHandler.UV_VARYING} ).xyz`\n\t// \t// } else {\n\t// \t// \tGlobalsGeometryHandler.variable_config_default(variable_name)\n\t// \t// }\n\t// \tthrow 'do I go through here?';\n\t// \treturn this.read_attribute(variable_name);\n\t// }\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \tconst allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \tif(allocation){\n\t// \t\treturn [\n\t// \t\t\tnew AttributeConfig('vec2', GlobalsTextureHandler.UV_ATTRIB),\n\t// \t\t\tnew UniformConfig('sampler2D', `texture_${allocation.name()}`)\n\t// \t\t]\n\t// \t}\n\t// }\n\n\t// static remap_instance_attribute(name:string):string{\n\t// \tif(name == 'instancePosition'){\n\t// \t\treturn 'position'\n\t// \t}\n\t// \treturn name\n\t// }\n\t// static variable_name_to_instance_attrib(name:string):string{\n\t// \tif(name == 'position'){\n\t// \t\treturn 'instancePosition'\n\t// \t}\n\t// \treturn name\n\t// }\n\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\t\t// attrib_name = GlobalsTextureHandler.remap_instance_attribute(attrib_name)\n\n\t\tconst texture_variable = this._texture_allocations_controller.variable(attrib_name);\n\n\t\tif (texture_variable) {\n\t\t\tthis.add_particles_sim_uv_attribute(node, shaders_collection_controller);\n\t\t\t// const texture_variable = allocation.variable(attrib_name)\n\t\t\t// if(!texture_variable){\n\t\t\t// \tconsole.error(`no tex var found for ${attrib_name}`)\n\t\t\t// \tthis._texture_allocations_controller.print(node.scene())\n\t\t\t// }\n\t\t\tconst component = texture_variable.component;\n\t\t\tconst allocation = texture_variable.allocation;\n\t\t\tif (allocation) {\n\t\t\t\t// const definitions_by_shader_name = {}\n\t\t\t\t// definitions_by_shader_name[shader_name] = []\n\t\t\t\tconst var_name_texture = allocation.texture_name;\n\t\t\t\tconst texture_definition = new UniformGLDefinition(\n\t\t\t\t\tnode,\n\t\t\t\t\tConnectionPointType.SAMPLER_2D,\n\t\t\t\t\tvar_name_texture\n\t\t\t\t);\n\t\t\t\t// definitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t\t\tshaders_collection_controller.add_definitions(node, [texture_definition]);\n\n\t\t\t\t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', 'particles_sim_uv')\n\t\t\t\t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t\t\tconst body_line = `texture2D( ${var_name_texture}, ${this._uv_name} ).${component}`;\n\t\t\t\treturn body_line;\n\t\t\t}\n\t\t} else {\n\t\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t\t}\n\t}\n\n\tadd_particles_sim_uv_attribute(node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const shader_names = ['vertex', 'fragment'];\n\t\t// const definitions_by_shader_name:Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t// definitions_by_shader_name.set(ShaderName.FRAGMENT, [])\n\t\t// for (let shader_name of shader_names) {\n\t\t// \tdefinitions_by_shader_name[shader_name] = [];\n\t\t// }\n\n\t\tconst particles_sim_uv_attrib_definition = new AttributeGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_ATTRIB\n\t\t);\n\t\tconst particles_sim_uv_varying_definition = new VaryingGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_VARYING\n\t\t);\n\n\t\tshaders_collection_controller.add_definitions(\n\t\t\tnode,\n\t\t\t[particles_sim_uv_attrib_definition, particles_sim_uv_varying_definition],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t\tshaders_collection_controller.add_definitions(node, [particles_sim_uv_varying_definition], ShaderName.FRAGMENT);\n\n\t\tshaders_collection_controller.add_body_lines(\n\t\t\tnode,\n\t\t\t[`${GlobalsTextureHandler.UV_VARYING} = ${GlobalsTextureHandler.UV_ATTRIB}`],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten'\n// import lodash_map from 'lodash/map'\n\nimport {CoreGeometry} from '../Geometry';\nimport {CorePoint} from '../Point';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nexport class CoreGeometryUtilCurve {\n\tstatic accumulated_curve_point_indices(indices: number[]) {\n\t\tlet curve_point_indices: number[] = [];\n\t\tconst accumulated_curve_point_indices = [];\n\t\tlet last_index_added: number | null = null;\n\n\t\t// indices.forEach((index, i) => {\n\t\tlet index: number;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tif (i % 2 === 1) {\n\t\t\t\tindex = indices[i];\n\t\t\t\tconst previous_index = indices[i - 1];\n\n\t\t\t\t// if the last added index, from the previous segment\n\t\t\t\t// is the same as the start of the current segment (indices[i-1])\n\t\t\t\t// then this is part of the same curve\n\t\t\t\tif (last_index_added == null || previous_index === last_index_added) {\n\t\t\t\t\t// add the first point\n\t\t\t\t\tif (curve_point_indices.length === 0) {\n\t\t\t\t\t\tcurve_point_indices.push(previous_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve_point_indices.push(index);\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise we create a new curve\n\t\t\t\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\t\t\t\t\t//current_points = lodash_map curve_point_indices, (index)->points[index]\n\t\t\t\t\t//curve_point_indices_groups.push(current_points)\n\t\t\t\t\t//this._create_curve_from_points(current_points)\n\n\t\t\t\t\t// and reset the array\n\t\t\t\t\tcurve_point_indices = [previous_index, index];\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// also create with the remaining ones\n\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\n\t\treturn accumulated_curve_point_indices;\n\t}\n\n\tstatic create_line_segment_geometry(\n\t\tpoints: CorePoint[],\n\t\tindices: number[],\n\t\tattrib_names: string[],\n\t\tattrib_sizes_by_name: Dictionary<number>\n\t) {\n\t\t// let new_positions: number[] = []\n\t\tconst new_indices: number[] = [];\n\n\t\tconst new_attribute_values_by_name: Dictionary<number[]> = {};\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tnew_attribute_values_by_name[attrib_name] = [];\n\t\t});\n\n\t\tindices.forEach((index, i) => {\n\t\t\tconst point = points[index];\n\t\t\t// const position = point.position();\n\t\t\t// new_positions.push(position.toArray());\n\t\t\tattrib_names.forEach((attrib_name) => {\n\t\t\t\tlet attrib_value = point.attrib_value(attrib_name);\n\t\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\t\tif (attrib_size > 1) {\n\t\t\t\t\tattrib_value = attrib_value.toArray();\n\t\t\t\t} else {\n\t\t\t\t\tattrib_value = [attrib_value];\n\t\t\t\t}\n\t\t\t\tattrib_value.forEach((v: number) => {\n\t\t\t\t\tnew_attribute_values_by_name[attrib_name].push(v);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (i > 0) {\n\t\t\t\tnew_indices.push(i - 1);\n\t\t\t\tnew_indices.push(i);\n\t\t\t}\n\t\t});\n\n\t\t// new_positions = lodash_flatten(new_positions)\n\t\tconst geometry = new BufferGeometry();\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\tconst values = new_attribute_values_by_name[attrib_name];\n\t\t\tgeometry.setAttribute(attrib_name, new Float32BufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tgeometry.setIndex(new_indices);\n\t\treturn geometry;\n\t}\n\n\tstatic line_segment_to_geometries(geometry: BufferGeometry) {\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst attrib_names = core_geometry.attrib_names();\n\t\tconst points = core_geometry.points();\n\t\tconst indices = (geometry.getIndex()?.array as number[]) || [];\n\n\t\tconst accumulated_curve_point_indices = this.accumulated_curve_point_indices(indices);\n\t\tconsole.log(indices, accumulated_curve_point_indices);\n\n\t\tif (accumulated_curve_point_indices.length > 0) {\n\t\t\tconst attribute_sizes_by_name = core_geometry.attrib_sizes();\n\n\t\t\taccumulated_curve_point_indices.forEach((curve_point_indices, i) => {\n\t\t\t\tgeometry = this.create_line_segment_geometry(\n\t\t\t\t\tpoints,\n\t\t\t\t\tcurve_point_indices,\n\t\t\t\t\tattrib_names,\n\t\t\t\t\tattribute_sizes_by_name\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t});\n\t\t}\n\n\t\treturn geometries;\n\t}\n}\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","// import {Scene} from 'three/src/scenes/Scene'\n// import {CoreGraph} from '../../core/graph/CoreGraph'\n// import {CorePerformance} from '../../core/performance/CorePerformance'\n// import {Cooker} from '../../core/graph/Cooker'\n// import {EmitPayload} from '../../core/graph/NodeScene'\n// import {BaseNode} from '../nodes/_Base'\n\n// import {CoreObject} from '../../core/Object';\n// import {Debug} from './concerns/Debug';\n// import {Env} from './concerns/Env'\n// import {ExpressionRegister} from './concerns/ExpressionRegister';\n// import {Frame} from './concerns/Frame';\n// import {GraphMixin} from './concerns/Graph';\n// import {Js} from './concerns/Js';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/LifeCycle';\n// import {Loading} from './concerns/Loading';\n// import {Name} from './concerns/Name';\n// import {Nodes} from './concerns/Nodes';\n// import {ObjectMixin} from './concerns/Object';\n// import {PickerNodes} from './concerns/PickerNodes';\n// import {PerformanceMixin} from './concerns/Performance';\n// import {Renderer} from './concerns/Renderer';\n// import {Store} from './concerns/Store';\n// import {Uniforms} from './concerns/Uniforms';\n\n// import {CubeCamerasController} from './utils/CubeCamerasController';\nimport {CamerasController} from './utils/CamerasController';\nimport {Cooker} from './utils/Cooker';\nimport {CoreGraph} from '../../core/graph/CoreGraph';\nimport {CookController} from './utils/CookController';\nimport {EventsController} from './utils/EventsController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {LoadingController} from './utils/LoadingController';\nimport {ExpressionsController} from './utils/ExpressionsController';\nimport {MissingReferencesController} from './utils/MissingReferencesController';\nimport {NodesController} from './utils/NodesController';\nimport {CorePerformance} from '../../core/performance/CorePerformance';\nimport {TimeController} from './utils/TimeController';\nimport {PolySceneSerializer} from './utils/Serializer';\nimport {UniformsController} from './utils/UniformsController';\nimport {WebGLController} from './utils/WebGLController';\n\nimport {Scene} from 'three/src/scenes/Scene';\n\nexport class PolyScene {\n\tprotected _display_scene = new Scene();\n\tget display_scene() {\n\t\treturn this._display_scene;\n\t}\n\t_uuid!: string;\n\tset_uuid(uuid: string) {\n\t\treturn (this._uuid = uuid);\n\t}\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\t_name: string | undefined;\n\tset_name(name: string) {\n\t\treturn (this._name = name);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tprotected _cameras_controller = new CamerasController(this);\n\tget cameras_controller() {\n\t\treturn this._cameras_controller;\n\t}\n\n\tprivate _cooker = new Cooker(this);\n\tget cooker() {\n\t\treturn this._cooker;\n\t}\n\n\t// private _cube_cameras_controller: CubeCamerasController;\n\t// get cube_cameras_controller() {\n\t// \treturn (this._cube_cameras_controller = this._cube_cameras_controller || new CubeCamerasController(this));\n\t// }\n\tpublic readonly cook_controller = new CookController();\n\tasync wait_for_cooks_completed() {\n\t\treturn this.cook_controller.wait_for_cooks_completed();\n\t}\n\n\tprivate _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\n\tprivate _graph = new CoreGraph();\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\n\tprivate _lifecycle_controller: LifeCycleController | undefined;\n\tget lifecycle_controller() {\n\t\treturn (this._lifecycle_controller = this._lifecycle_controller || new LifeCycleController(this));\n\t}\n\tprivate _loading_controller: LoadingController | undefined;\n\tget loading_controller() {\n\t\treturn (this._loading_controller = this._loading_controller || new LoadingController(this));\n\t}\n\n\tprivate _missing_expression_references_controller: MissingReferencesController = new MissingReferencesController();\n\tget missing_expression_references_controller() {\n\t\treturn this._missing_expression_references_controller;\n\t}\n\tprivate _expressions_controller: ExpressionsController = new ExpressionsController();\n\tget expressions_controller() {\n\t\treturn this._expressions_controller;\n\t}\n\n\tprotected _nodes_controller = new NodesController(this);\n\tget nodes_controller() {\n\t\treturn this._nodes_controller;\n\t}\n\n\tprotected _performance: CorePerformance | undefined;\n\tget performance() {\n\t\treturn (this._performance = this._performance || new CorePerformance());\n\t}\n\n\tprotected _time_controller = new TimeController(this);\n\tget time_controller() {\n\t\treturn this._time_controller;\n\t}\n\tset_frame(frame: number) {\n\t\tthis.time_controller.set_frame(frame);\n\t}\n\tget frame() {\n\t\treturn this.time_controller.frame;\n\t}\n\tget frame_range() {\n\t\treturn this.time_controller.frame_range;\n\t}\n\tplay() {\n\t\tthis.time_controller.play();\n\t}\n\tpause() {\n\t\tthis.time_controller.pause();\n\t}\n\n\tprivate _serializer: PolySceneSerializer | undefined;\n\tprivate get serializer() {\n\t\treturn (this._serializer = this._serializer || new PolySceneSerializer(this));\n\t}\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n\n\tprivate _uniforms_controller: UniformsController | undefined;\n\tget uniforms_controller() {\n\t\treturn (this._uniforms_controller = this._uniforms_controller || new UniformsController(this));\n\t}\n\n\tprivate _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController());\n\t}\n\n\tconstructor() {\n\t\t// this.mark_as_loaded()\n\t\tthis._graph.set_scene(this);\n\t\t// this.time_controller.init();\n\t\tthis.nodes_controller.init();\n\t}\n\n\t// cooker\n\tbatch_update(callback: () => void) {\n\t\tthis._cooker.block();\n\n\t\tcallback();\n\n\t\tthis._cooker.unblock();\n\t}\n\n\t// nodes\n\tnode(path: string) {\n\t\treturn this.nodes_controller.node(path);\n\t}\n\tget root() {\n\t\treturn this.nodes_controller.root;\n\t}\n}\n\n// export function ClassDecorator<T>(beanName: string): Function {\n// \treturn (classConstructor: any) => {\n// \t\tconsole.log('classConstructor')\n// \t\tconsole.log(classConstructor)\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n\n// export function Param(param_type: string, default_value: number): Function {\n// \treturn (\n// \t\ttarget: any,\n// \t\tpropertyKey: string,\n// \t\tdescriptor: PropertyDescriptor\n// \t) => {\n// \t\tconsole.log('Param')\n// \t\tconsole.log(target, propertyKey, descriptor)\n// \t\t// Object.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n// export function ParamFloat(default_value: number, options: object = {}): Function {\n// \treturn (target: any, propertyKey: string) => {\n// \t\tconsole.log('Param Float', default_value)\n// \t\tconst param_name = propertyKey.substring(7) // removes _param_\n// \t\tconsole.log('param_name', param_name)\n// \t\t// target.prepare_param_on_init('Float', param_name, default_value)\n// \t\t// console.log(target, propertyKey)\n// \t\t// Object.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n// export function ClassMethod(value: boolean): Function {\n// \treturn (\n// \t\ttarget: any,\n// \t\tpropertyKey: string,\n// \t\tdescriptor: PropertyDescriptor\n// \t) => {\n// \t\tconsole.log('ClassMethod')\n// \t\tconsole.log(target, propertyKey, descriptor)\n// \t\tObject.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n\n// // @ClassDecorator('bla')\n// export class PolyScene {\n// \t_display_scene: Scene = new Scene()\n// \t_graph: CoreGraph\n// \t_performance: CorePerformance\n// \t_cooker: Cooker\n\n// \t// @ParamFloat(3, {visible_if: {test: 2}}) _param_radius: number\n\n// \t// constructor() {\n// \t// \tconst co = new CoreObject()\n// \t// \tconsole.log('CoreObject', co)\n// \t// }\n// \tgraph() {\n// \t\treturn this._graph\n// \t}\n// \tperformance() {\n// \t\treturn this._performance\n// \t}\n// \tcooker() {\n// \t\treturn this._cooker\n// \t}\n// \tstore_commit(event_name: string, payload: EmitPayload) {}\n// \temit_allowed() {\n// \t\treturn true\n// \t}\n// \tnode(path: string): BaseNode {\n// \t\treturn null\n// \t}\n\n// \tdisplay_scene() {\n// \t\treturn this._display_scene\n// \t}\n\n// \tis_loading() {\n// \t\treturn true\n// \t}\n// \tloaded(): boolean {\n// \t\treturn true\n// \t}\n// \troot(): BaseNode {\n// \t\treturn null\n// \t}\n// \tcontext(): any {}\n\n// \tuuid() {\n// \t\treturn 'test-uuid'\n// \t}\n// }\n","import {BaseNodeType} from '../../_Base';\n\nexport class BaseState {\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseNodeType} from '../_Base';\nimport {NodeUIDataJson} from './UIData';\nimport {TypedNamedConnectionPointData} from './connections/NamedConnectionPoint';\nimport {ConnectionPointType} from './connections/ConnectionPointType';\n\nexport interface NodeSerializerData {\n\tname: string;\n\ttype: string;\n\tgraph_node_id: string;\n\tis_dirty: boolean;\n\tui_data_json: NodeUIDataJson;\n\terror_message: string | undefined;\n\tchildren: string[];\n\tinputs: Array<string | undefined>;\n\tinput_connection_output_indices: Array<number | undefined> | undefined;\n\tnamed_input_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tnamed_output_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tparam_ids: string[];\n\t// spare_params: Dictionary<string>;\n\toverride_clonable_state: boolean;\n\tinputs_clonable_state_with_override: boolean[];\n\tflags?: {\n\t\t//has_display: this.has_display_flag()\n\t\tdisplay?: boolean;\n\t\tbypass?: boolean;\n\t};\n\tselection?: string[];\n}\n\nexport class NodeSerializer {\n\tconstructor(private node: BaseNodeType) {}\n\n\t// serialize() {\n\t// \treturn this.to_json();\n\t// }\n\n\t// TODO: find a way to not re-create a json everytime\n\tto_json(include_param_components: boolean = false): NodeSerializerData {\n\t\t// const spare_params_json_by_name = {};\n\t\t// lodash_each(this.node.spare_param_names(), param_name=> {\n\t\t// \tconst param = this.node.spare_param(param_name);\n\t\t// \tspare_params_json_by_name[param_name] = param.graph_node_id;\n\t\t// });\n\n\t\tconst data = {\n\t\t\tname: this.node.name,\n\t\t\ttype: this.node.type,\n\t\t\tgraph_node_id: this.node.graph_node_id,\n\t\t\tis_dirty: this.node.is_dirty,\n\t\t\tui_data_json: this.node.ui_data.to_json(),\n\t\t\terror_message: this.node.states.error.message,\n\t\t\tchildren: this.children_ids(),\n\t\t\tinputs: this.input_ids(),\n\t\t\tinput_connection_output_indices: this.connection_input_indices(),\n\t\t\tnamed_input_connections: this.named_input_connections(),\n\t\t\tnamed_output_connections: this.named_output_connections(),\n\t\t\tparam_ids: this.to_json_params(include_param_components),\n\t\t\t// spare_params: this.to_json_spare_params(include_param_components),\n\t\t\toverride_clonable_state: this.node.io.inputs.override_clonable_state(),\n\t\t\tinputs_clonable_state_with_override: this.node.io.inputs.inputs_clonable_state_with_override(),\n\t\t\tflags: {\n\t\t\t\t//has_display: this.has_display_flag()\n\t\t\t\tdisplay: this.node.flags?.display?.active,\n\t\t\t\tbypass: this.node.flags?.bypass?.active,\n\t\t\t},\n\t\t\tselection: undefined as string[] | undefined,\n\t\t};\n\n\t\tif (this.node.children_allowed() && this.node.children_controller) {\n\t\t\tdata['selection'] = this.node.children_controller.selection.to_json();\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tchildren_ids(): string[] {\n\t\treturn this.node.children().map((node) => node.graph_node_id);\n\t}\n\n\tinput_ids(): (string | undefined)[] {\n\t\treturn this.node.io.inputs.inputs().map((node) => (node != null ? node.graph_node_id : undefined));\n\t}\n\n\tconnection_input_indices() {\n\t\treturn this.node.io.connections\n\t\t\t.input_connections()\n\t\t\t?.map((connection) => (connection != null ? connection.output_index : undefined));\n\t}\n\tnamed_input_connections() {\n\t\treturn this.node.io.inputs.named_input_connection_points.map((i) => i.to_json());\n\t}\n\tnamed_output_connections() {\n\t\treturn this.node.io.outputs.named_output_connection_points.map((o) => o.to_json());\n\t}\n\n\tto_json_params_from_names(param_names: string[], include_components: boolean = false) {\n\t\treturn param_names.map((param_name) => {\n\t\t\treturn this.node.params.get(param_name)!.graph_node_id;\n\t\t});\n\t\t// const params_json_by_name: Dictionary<string> = {};\n\t\t// for (let param_name of param_names) {\n\t\t// \tconst param = this.node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tparams_json_by_name[param_name] = param.graph_node_id;\n\n\t\t// \t\tif (include_components && param.is_multiple && param.components) {\n\t\t// \t\t\tfor (let component of param.components) {\n\t\t// \t\t\t\tparams_json_by_name[component.name] = component.graph_node_id;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t\t// return params_json_by_name;\n\t}\n\tto_json_params(include_components: boolean = false) {\n\t\treturn this.to_json_params_from_names(this.node.params.names, include_components);\n\t}\n\t// to_json_params_without_components(){\n\t// \treturn this.to_json_params(false)\n\t// }\n\t// to_json_params_with_components(){\n\t// \treturn this.to_json_params(true)\n\t// }\n\t// to_json_spare_params(include_components: boolean = false) {\n\t// \treturn this.to_json_params_from_names(this.node.params.spare_names, include_components);\n\t// }\n}\n","import {BooleanParam} from '../Boolean';\nimport {ButtonParam} from '../Button';\nimport {ColorParam} from '../Color';\nimport {FloatParam} from '../Float';\nimport {FolderParam} from '../Folder';\nimport {IntegerParam} from '../Integer';\nimport {OperatorPathParam} from '../OperatorPath';\nimport {RampParam} from '../Ramp';\nimport {SeparatorParam} from '../Separator';\nimport {StringParam} from '../String';\nimport {Vector2Param} from '../Vector2';\nimport {Vector3Param} from '../Vector3';\nimport {Vector4Param} from '../Vector4';\n\nimport {ParamType} from '../../poly/ParamType';\n\ntype ParamClassMapType = {[key in ParamType]: any};\nexport const ParamConstructorByType: ParamClassMapType = {\n\t[ParamType.BOOLEAN]: BooleanParam,\n\t[ParamType.BUTTON]: ButtonParam,\n\t[ParamType.COLOR]: ColorParam,\n\t[ParamType.FLOAT]: FloatParam,\n\t[ParamType.FOLDER]: FolderParam,\n\t[ParamType.INTEGER]: IntegerParam,\n\t[ParamType.OPERATOR_PATH]: OperatorPathParam,\n\t[ParamType.RAMP]: RampParam,\n\t[ParamType.SEPARATOR]: SeparatorParam,\n\t[ParamType.STRING]: StringParam,\n\t[ParamType.VECTOR2]: Vector2Param,\n\t[ParamType.VECTOR3]: Vector3Param,\n\t[ParamType.VECTOR4]: Vector4Param,\n};\n","import {BaseParamType} from '../_Base';\nimport {ExpressionManager} from '../../expressions/ExpressionManager';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreEntity} from '../../../core/geometry/Entity';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamValuesTypeMap} from '../types/ParamValuesTypeMap';\nimport {CoreObject} from '../../../core/geometry/Object';\n\n// type ParamTypeElem = ParamType;\ntype EntityCallback<T extends ParamType> = (\n\tentity: CoreEntity,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype PointEntityCallback<T extends ParamType> = (\n\tentity: CorePoint,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype ObjectEntityCallback<T extends ParamType> = (\n\tentity: CoreObject,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\n\nexport class ExpressionController<T extends ParamType> {\n\tprotected _expression: string | undefined;\n\tprotected _entities: CoreEntity[] | undefined;\n\tprotected _entity_callback: EntityCallback<T> | undefined;\n\tprotected _manager: ExpressionManager | undefined;\n\t// private _reset_bound = this.reset.bind(this);\n\tconstructor(protected param: BaseParamType) {\n\t\t// this.param.dirty_controller.add_post_dirty_hook('expression_controller_reset', this._reset_bound);\n\t}\n\t// remove_dirty_hook() {\n\t// \t// this.param.dirty_controller.remove_post_dirty_hook('expression_controller_reset');\n\t// }\n\n\tget active() {\n\t\treturn this._expression != null;\n\t}\n\tget expression() {\n\t\treturn this._expression;\n\t}\n\tget is_errored() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.is_errored;\n\t\t}\n\t\treturn false;\n\t}\n\tget error_message() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.error_message;\n\t\t}\n\t\treturn null;\n\t}\n\tget requires_entities() {\n\t\treturn this.param.options.is_expression_for_entities;\n\t}\n\t// private reset() {\n\t// \tthis._manager?.clear_error();\n\t// }\n\n\tset_expression(expression: string | undefined, set_dirty: boolean = true) {\n\t\tthis.param.scene.missing_expression_references_controller.deregister_param(this.param);\n\t\tthis.param.scene.expressions_controller.deregister_param(this.param);\n\n\t\tif (this._expression != expression) {\n\t\t\tthis._expression = expression;\n\n\t\t\tif (this._expression) {\n\t\t\t\tthis._manager = this._manager || new ExpressionManager(this.param);\n\t\t\t\tthis._manager.parse_expression(this._expression);\n\t\t\t} else {\n\t\t\t\tthis._manager?.reset();\n\t\t\t}\n\n\t\t\tif (set_dirty) {\n\t\t\t\tthis.param.set_dirty();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tif (this._manager && this.active) {\n\t\t\tthis._manager.update_from_method_dependency_name_change();\n\t\t}\n\t}\n\n\tasync compute_expression() {\n\t\tif (this._manager && this.active) {\n\t\t\tconst result = await this._manager.compute_function();\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate async compute_expression_for_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis.set_entities(entities, callback);\n\t\tawait this.compute_expression();\n\t\tif (this._manager?.error_message) {\n\t\t\tthis.param.node.states.error.set(`expression evalution error: ${this._manager?.error_message}`);\n\t\t}\n\n\t\tthis.reset_entities();\n\t}\n\tcompute_expression_for_points(entities: CorePoint[], callback: PointEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tcompute_expression_for_objects(entities: CoreObject[], callback: ObjectEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tget entities() {\n\t\treturn this._entities;\n\t}\n\tget entity_callback() {\n\t\treturn this._entity_callback;\n\t}\n\tset_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis._entities = entities;\n\t\tthis._entity_callback = callback;\n\t}\n\treset_entities() {\n\t\tthis._entities = undefined;\n\t\tthis._entity_callback = undefined;\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n\nimport jsep from 'jsep';\njsep.addUnaryOp('@');\n// self.jsep = jsep\nlet precedence = 10;\njsep.addBinaryOp('**', precedence);\n// precedence = 1\n// jsep.addBinaryOp('`', precedence)\n// const HOUDINI_QUOTE_CODE = 96; // houdini quote\n// const JSEP_COMPOUND = 'Compound'\nconst JSEP_IDENTIFIER = 'Identifier';\nconst JSEP_LITERAL = 'Literal';\n// const JSEP_BINARY_EXPRESSION = 'BynaryExpression'\nconst JSEP_CALL_EXPRESSION = 'CallExpression';\nconst STRING_EXPRESSION_SEPARATOR = '`';\n\nexport class ParsedTree {\n\tpublic node: jsep.Expression | undefined;\n\tpublic error_message: string | undefined;\n\n\tconstructor() {}\n\n\tparse_expression(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\t\t\tthis.node = jsep(string);\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\tparse_expression_for_string_param(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\n\t\t\tconst elements = ParsedTree.string_value_elements(string);\n\t\t\tconst nodes = [];\n\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\tconst element = elements[i];\n\t\t\t\tlet node;\n\t\t\t\tif (i % 2 == 1) {\n\t\t\t\t\tnode = jsep(element);\n\t\t\t\t} else {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: JSEP_LITERAL,\n\t\t\t\t\t\tvalue: `'${element}'`,\n\t\t\t\t\t\traw: `'${element}'`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tnodes.push(node);\n\t\t\t\t// nodes.push({\n\t\t\t\t// \ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\t// \targuments: [node],\n\t\t\t\t// \tcallee: {\n\t\t\t\t// \t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t// \t\tname: 'toString',\n\t\t\t\t// \t}\n\t\t\t\t// })\n\t\t\t}\n\t\t\t// let last_plus_node;\n\t\t\t// for(let i=0; i<(nodes.length-1); i++){\n\t\t\t// \tconst plus_node = {\n\t\t\t// \t\ttype: JSEP_BINARY_EXPRESSION,\n\t\t\t// \t\toperator: '+',\n\t\t\t// \t\tleft: last_plus_node || nodes[i],\n\t\t\t// \t\tright: nodes[i+1],\n\t\t\t// \t}\n\t\t\t// \tlast_plus_node = plus_node;\n\t\t\t// }\n\t\t\t// this.node = last_plus_node\n\t\t\tthis.node = (<unknown>{\n\t\t\t\ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\targuments: nodes,\n\t\t\t\tcallee: {\n\t\t\t\t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t\tname: 'str_concat',\n\t\t\t\t},\n\t\t\t}) as jsep.Compound;\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\n\tstatic string_value_elements(v: string): string[] {\n\t\tif (v != null) {\n\t\t\tif (lodash_isString(v)) {\n\t\t\t\treturn v.split(STRING_EXPRESSION_SEPARATOR);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// static string_value_contains_expression(v:string): boolean{\n\t// \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n\t// }\n\n\t// deep_parse_for_string_expressions(){\n\t// \t// for string expressions which have more than a single `<expr>` element\n\t// \t// pt_`@ptnum`\n\t// \t// `@ptnum`_pt\n\t// \t// pt_`@ptnum`_`1+1`\n\t// \tif(this.node.type == JSEP_COMPOUND){\n\t// \t\tconst args = this.node.body\n\t// \t\tlet arg;\n\t// \t\tfor(let i=0; i<args.length; i++){\n\t// \t\t\targ = args[i]\n\t// \t\t\tif(arg.type == JSEP_LITERAL){\n\t// \t\t\t\tconst arg_node = jsep(arg.value)\n\t// \t\t\t\targs[i] = arg_node\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// for string expressions which havea single `<expr>` element\n\t// \t\t// `@ptnum`\n\t// \t\tif(this.node.type == JSEP_LITERAL){\n\t// \t\t\tconst raw = this.node.raw\n\t// \t\t\tconst first_char_code = raw.charCodeAt(0)\n\t// \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n\t// \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n\t// \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate reset() {\n\t\tthis.node = undefined;\n\t\tthis.error_message = undefined;\n\t}\n}\n","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {CoreWalker} from './Walker';\n// import {NodeSimple} from '/Graph/NodeSimple'\n\n// import {NamedGraphNodeClass} from './graph/NamedGraphNode'\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class DecomposedPath {\n\tprivate index = -1;\n\tprivate path_elements: (string | null)[] = [];\n\tprivate _named_nodes: (NodeOrParam | null)[] = [];\n\tprivate graph_node_ids: string[] = [];\n\tprivate node_element_by_graph_node_id: Dictionary<string> = {};\n\n\tconstructor() {\n\t\t// console.warn('create decomposed path');\n\t}\n\tadd_node(name: string, node: NodeOrParam) {\n\t\tthis.index += 1;\n\t\tif (name == node.name) {\n\t\t\tthis.named_nodes[this.index] = node;\n\t\t}\n\n\t\tthis.graph_node_ids[this.index] = node.graph_node_id;\n\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = name;\n\t}\n\tadd_path_element(path_element: string) {\n\t\tthis.index += 1;\n\t\tthis.path_elements[this.index] = path_element;\n\t}\n\n\tget named_nodes() {\n\t\treturn this._named_nodes;\n\t}\n\n\tupdate_from_name_change(node: NodeOrParam) {\n\t\tconst named_graph_node_ids = this.named_nodes.map((n) => n?.graph_node_id);\n\n\t\tif (named_graph_node_ids.includes(node.graph_node_id)) {\n\t\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = node.name;\n\t\t}\n\t}\n\n\tto_path(): string {\n\t\tconst elements = new Array<string>(this.index);\n\t\tfor (let i = 0; i <= this.index; i++) {\n\t\t\tconst node = this.named_nodes[i];\n\t\t\tif (node) {\n\t\t\t\telements[i] = this.node_element_by_graph_node_id[node.graph_node_id];\n\t\t\t} else {\n\t\t\t\tconst path_element = this.path_elements[i];\n\t\t\t\tif (path_element) {\n\t\t\t\t\telements[i] = path_element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet joined_path = elements.join(CoreWalker.SEPARATOR);\n\t\t// if the first character is a letter, we need to prefix with /\n\t\tconst first_char = joined_path[0];\n\t\tif (first_char) {\n\t\t\tif (!CoreWalker.NON_LETTER_PREFIXES.includes(first_char)) {\n\t\t\t\tjoined_path = `${CoreWalker.SEPARATOR}${joined_path}`;\n\t\t\t}\n\t\t}\n\n\t\treturn joined_path;\n\t}\n}\n","// https://gist.github.com/gre/1650294\n\n// const ease_in = function(t:number, power:number){return Math.pow(t, power)}\n// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}\n// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}\n\nconst ease_i = function(power:number){return function(t:number){return Math.pow(t, power)}};\nconst ease_o = function(power:number){return function(t:number){return 1 - Math.abs(Math.pow(t-1, power))}};\nconst ease_io = function(power:number){return function(t:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}}\n\nexport const Easing = {\n  linear: ease_io(1),\n\n  ease_i: function(t:number, power:number){ return ease_i(power)(t) },\n  ease_o: function(t:number, power:number){ return ease_o(power)(t) },\n  ease_io: function(t:number, power:number){ return ease_io(power)(t) },\n\n  ease_i2: ease_i(2),\n  ease_o2: ease_o(2),\n  ease_io2: ease_io(2),\n\n  ease_i3: ease_io(3),\n  ease_o3: ease_io(3),\n  ease_io3: ease_io(3),\n\n  ease_i4: ease_io(4),\n  ease_o4: ease_io(4),\n  ease_io4: ease_io(4),\n  // easeInQuart: EaseIn(4),\n  // easeOutQuart: EaseOut(4),\n  // easeInOutQuart: EaseInOut(4),\n  // easeInQuint: EaseIn(5),\n  // easeOutQuint: EaseOut(5),\n  // easeInOutQuint: EaseInOut(5)\n\n  ease_i_sin: function(t:number){ return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },\n  ease_o_sin: function(t:number){ return Math.sin(Math.PI / 2 * t); },\n  ease_io_sin: function(t:number){ return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2; },\n\n  ease_i_elastic: function (t:number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n  ease_o_elastic: function (t:number) { return .04 * t / (--t) * Math.sin(25 * t) },\n  ease_io_elastic: function (t:number) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n}\n\n// export class Easing {\n//   // no easing, no acceleration\n//   static linear(t:number):number{ return t }\n//   // accelerating from zero velocity\n//   static easeinquad (t:number):number{ return t*t }\n//   // decelerating to zero velocity\n//   static easeoutquad (t:number):number{ return t*(2-t) }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }\n//   // accelerating from zero velocity\n//   static easeincubic (t:number):number{ return t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n//   // accelerating from zero velocity\n//   static easeinquart (t:number):number{ return t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }\n//   // accelerating from zero velocity\n//   static easeinquint (t:number):number{ return t*t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\n// }","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\n// import lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class FloatParam extends TypedNumericParam<ParamType.FLOAT> {\n\tstatic type() {\n\t\treturn ParamType.FLOAT;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FLOAT], val2: ParamValuesTypeMap[ParamType.FLOAT]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tconst result = FloatParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {CoreWalker} from '../../core/Walker';\n\n// import {AsCodeOperatorPath} from './concerns/visitors/OperatorPath';\nimport {BaseNodeType} from '../nodes/_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class OperatorPathParam extends TypedParam<ParamType.OPERATOR_PATH> {\n\tprivate _found_node: BaseNodeType | null = null;\n\n\tstatic type() {\n\t\treturn ParamType.OPERATOR_PATH;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\tval2: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._value == this.default_value;\n\t}\n\tprotected process_raw_input() {\n\t\tthis._value = this._raw_input;\n\t\tthis.set_dirty();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\tprotected async process_computation() {\n\t\tconst path = this._value;\n\t\tlet node = null;\n\t\tconst path_non_empty = path != null && path !== '';\n\n\t\tif (path_non_empty) {\n\t\t\tnode = CoreWalker.find_node(this.node, path);\n\t\t\t// not sure I want the param to be errored,\n\t\t\t// as it may block the node, even if the param is not necessary\n\t\t\t// if (!node) {\n\t\t\t// \tthis.states.error.set('node not found');\n\t\t\t// }\n\t\t}\n\n\t\tif (this._found_node !== node) {\n\t\t\tconst dependent_on_found_node = this.options.dependent_on_found_node();\n\n\t\t\tif (this._found_node) {\n\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\tthis.remove_graph_input(this._found_node);\n\t\t\t\t} else {\n\t\t\t\t\t// this._found_node.remove_param_referree(this) // TODO: typescript\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._found_node = node;\n\t\t\tif (node) {\n\t\t\t\tconst expected_context = this.options.node_selection_context;\n\t\t\t\tconst node_context = node.parent?.children_controller?.context;\n\t\t\t\tif (expected_context == node_context || expected_context == null) {\n\t\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\t\tthis.add_graph_input(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this._found_node.add_param_referree(this) // TODO: typescript\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`node context is ${expected_context} but the params expects a ${node_context}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} // else {\n\t\t\t// \tif (path_non_empty) {\n\t\t\t// \t\tthis.states.error.set('node not found');\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.options.execute_callback();\n\t\t}\n\t\tthis.remove_dirty_state();\n\t}\n\n\tfound_node() {\n\t\treturn this._found_node;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ntype FlagHookCallback = () => void;\n\nexport class BaseFlag {\n\t// protected _available_states: [boolean, boolean] = [];\n\tprotected _state: boolean = true;\n\tprotected _hooks: FlagHookCallback[] | null = null;\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// set_available_states(states: T[]) {}\n\tadd_hook(hook: FlagHookCallback) {\n\t\tthis._hooks = this._hooks || [];\n\t\tthis._hooks.push(hook);\n\t}\n\tprotected on_update() {}\n\tset(new_state: boolean) {\n\t\tif (this._state != new_state) {\n\t\t\tthis._state = new_state;\n\t\t\tthis.on_update();\n\t\t\tthis.run_hooks();\n\t\t}\n\t}\n\tget active() {\n\t\treturn this._state;\n\t}\n\ttoggle() {\n\t\tthis.set(!this._state);\n\t}\n\trun_hooks() {\n\t\tif (this._hooks) {\n\t\t\tfor (let hook of this._hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport lodash_uniq from 'lodash/uniq';\n// import {BaseGlNodeType} from '../../gl/_Base';\n// import {OutputGlNode} from '../gl/Output';\nimport {CoreGraph} from '../../../../core/graph/CoreGraph';\nimport {BaseNodeType, TypedNode} from '../../_Base';\nimport {TypedAssembler} from './BaseAssembler';\nimport {MapUtils} from '../../../../core/MapUtils';\nimport {ShaderName} from './ShaderName';\n\ntype NumberByString = Map<string, number>;\ntype BooleanByString = Map<string, boolean>;\ntype BooleanByStringByShaderName = Map<ShaderName, BooleanByString>;\ntype StringArrayByString = Map<string, string[]>;\n\n// interface BaseNodeGlArrayByString {\n// \t[propName: string]: BaseNodeGl[]\n// }\n// interface StringArrayByString {\n// \t[propName: string]: string[]\n// }\n\n// import {LineType, LINE_TYPES} from './CodeBuilder'\n\n// const VERTEX_INPUT_NAMES = [\n// \t'position',\n// \t'normal',\n// \t'gl_PointSize'\n// ]\n// const FRAGMENT_INPUT_NAMES = [\n// \t'color',\n// \t'alpha'\n// ]\n\nexport class TypedNodeTraverser<T extends TypedNode<any, T, any>> {\n\tprivate _leaves_graph_id: BooleanByStringByShaderName = new Map();\n\tprivate _graph_ids_by_shader_name: BooleanByStringByShaderName = new Map();\n\tprivate _outputs_by_graph_id: StringArrayByString = new Map();\n\tprivate _depth_by_graph_id: NumberByString = new Map();\n\tprivate _graph_id_by_depth: Map<number, string[]> = new Map();\n\tprivate _graph: CoreGraph;\n\tprivate _shader_name!: ShaderName;\n\n\tconstructor(private _assembler: TypedAssembler<T>, private _gl_parent_node: BaseNodeType) {\n\t\tthis._graph = this._gl_parent_node.scene.graph;\n\t}\n\n\tprivate reset() {\n\t\tthis._leaves_graph_id.clear();\n\t\tthis._outputs_by_graph_id.clear();\n\t\tthis._depth_by_graph_id.clear();\n\t\tthis._graph_id_by_depth.clear();\n\n\t\tthis.shader_names().forEach((shader_name) => {\n\t\t\tthis._graph_ids_by_shader_name.set(shader_name, new Map());\n\t\t});\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\tinput_names_for_shader_name(root_node: T, shader_name: ShaderName) {\n\t\treturn this._assembler.input_names_for_shader_name(root_node, shader_name);\n\t}\n\n\ttraverse(root_nodes: T[]) {\n\t\tthis.reset();\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._leaves_graph_id.set(shader_name, new Map());\n\t\t}\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._shader_name = shader_name;\n\t\t\tfor (let root_node of root_nodes) {\n\t\t\t\tthis.find_leaves_from_root_node(root_node);\n\t\t\t\tthis.set_nodes_depth();\n\t\t\t}\n\t\t}\n\n\t\t// graph_ids.forEach((graph_id) => {\n\t\tthis._depth_by_graph_id.forEach((depth: number, graph_id: string) => {\n\t\t\tif (depth != null) {\n\t\t\t\t// this._graph_id_by_depth.set(depth, this._graph_id_by_depth.get(depth) || []);\n\t\t\t\t// this._graph_id_by_depth.get(depth)?.push(graph_id);\n\t\t\t\tMapUtils.push_on_array_at_entry(this._graph_id_by_depth, depth, graph_id);\n\t\t\t}\n\t\t});\n\t}\n\n\tleaves_from_nodes(nodes: T[]) {\n\t\tthis._shader_name = ShaderName.LEAVES_FROM_NODES_SHADER;\n\t\tthis._graph_ids_by_shader_name.set(this._shader_name, new Map());\n\t\tthis._leaves_graph_id.set(this._shader_name, new Map());\n\t\tfor (let node of nodes) {\n\t\t\tthis.find_leaves(node);\n\t\t}\n\n\t\tconst node_ids: string[] = [];\n\t\tthis._leaves_graph_id.get(this._shader_name)?.forEach((value: boolean, key: string) => {\n\t\t\tnode_ids.push(key);\n\t\t});\n\t\treturn this._graph.nodes_from_ids(node_ids) as T[];\n\t}\n\n\tnodes_for_shader_name(shader_name: ShaderName) {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((value: string[], key: number) => {\n\t\t\tdepths.push(key);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tgraph_ids_for_depth.forEach((graph_id: string) => {\n\t\t\t\t\tconst is_present = this._graph_ids_by_shader_name.get(shader_name)?.get(graph_id);\n\t\t\t\t\tif (is_present) {\n\t\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tsorted_nodes() {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((ids: string[], depth: number) => {\n\t\t\tdepths.push(depth);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tfor (let graph_id of graph_ids_for_depth) {\n\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tprivate find_leaves_from_root_node(root_node: T) {\n\t\t// if(this._shader_name == ShaderName.VERTEX){\n\t\t// this._leaves_graph_id[this._shader_name] = {}\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(root_node.graph_node_id, true);\n\n\t\tconst input_names = this.input_names_for_shader_name(root_node, this._shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\t// if (root_node.type == 'output') {\n\t\t\t\tconst input = root_node.io.inputs.named_input(input_name);\n\t\t\t\tif (input) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(\n\t\t\t\t\t\tthis._outputs_by_graph_id,\n\t\t\t\t\t\tinput.graph_node_id,\n\t\t\t\t\t\troot_node.graph_node_id\n\t\t\t\t\t);\n\t\t\t\t\tthis.find_leaves(input);\n\t\t\t\t}\n\t\t\t\t// TODO: typescript - GL - check that I dont need to consider the Attrib as a special case\n\t\t\t\t// } else {\n\t\t\t\t// \t// if attribute\n\t\t\t\t// \tconst input = root_node.io.inputs.connected_named_input();\n\t\t\t\t// \tif (input) {\n\t\t\t\t// \t\tthis.find_leaves(input);\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// const position_input = this._output.named_input('position')\n\t\t// const normal_input = this._output.named_input('normal')\n\t\t// const instancePosition_input = this._output.named_input('instancePosition')\n\t\t// if(position_input){ this.find_leaves(position_input) }\n\t\t// if(normal_input){ this.find_leaves(normal_input) }\n\t\t// if(instancePosition_input){ this.find_leaves(instancePosition_input) }\n\t\t// }\n\t\t// if(this._shader_name == ShaderName.FRAGMENT){\n\t\t// \tthis._leaves_graph_id[this._shader_name] = {}\n\t\t// \tFRAGMENT_INPUT_NAMES.forEach(name=>{\n\t\t// \t\tconst input = this._output.named_input(name)\n\t\t// \t\tif(input){\n\t\t// \t\t\tthis.find_leaves(input)\n\t\t// \t\t}\n\t\t// \t})\n\t\t// \t// const color_input = this._output.named_input('color')\n\t\t// \t// const alpha_input = this._output.named_input('alpha')\n\t\t// \t// if(color_input){ this.find_leaves(color_input) }\n\t\t// \t// if(alpha_input){ this.find_leaves(alpha_input) }\n\t\t// }\n\n\t\tthis._outputs_by_graph_id.forEach((outputs: string[], graph_id: string) => {\n\t\t\tthis._outputs_by_graph_id.set(graph_id, lodash_uniq(outputs));\n\t\t});\n\t}\n\n\tprivate find_leaves(node: T) {\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(node.graph_node_id, true);\n\n\t\tconst inputs = lodash_compact(node.io.inputs.inputs());\n\t\tconst input_graph_ids = lodash_uniq(inputs.map((n) => n.graph_node_id));\n\t\tconst unique_inputs = input_graph_ids.map((graph_id) => this._graph.node_from_id(graph_id)) as T[];\n\t\tif (unique_inputs.length > 0) {\n\t\t\t// const promises = unique_inputs.forEach((input)=>{\n\t\t\tfor (let input of unique_inputs) {\n\t\t\t\tMapUtils.push_on_array_at_entry(this._outputs_by_graph_id, input.graph_node_id, node.graph_node_id);\n\n\t\t\t\tthis.find_leaves(input);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._leaves_graph_id.get(this._shader_name)!.set(node.graph_node_id, true);\n\t\t}\n\t}\n\n\tprivate set_nodes_depth() {\n\t\tthis._leaves_graph_id.forEach((booleans_by_graph_id, shader_name) => {\n\t\t\tbooleans_by_graph_id.forEach((boolean, graph_id) => {\n\t\t\t\tthis.set_node_depth(graph_id);\n\t\t\t});\n\t\t});\n\t\t// const leave_ids = Object.keys(this._leaves_graph_id[this._shader_name]);\n\t\t// leave_ids.forEach((graph_id) => {\n\t\t// \tthis.set_node_depth(graph_id);\n\t\t// });\n\t}\n\n\tprivate set_node_depth(graph_id: string, depth: number = 0) {\n\t\tconst current_depth = this._depth_by_graph_id.get(graph_id);\n\t\tif (current_depth != null) {\n\t\t\tthis._depth_by_graph_id.set(graph_id, Math.max(current_depth, depth));\n\t\t} else {\n\t\t\tthis._depth_by_graph_id.set(graph_id, depth);\n\t\t}\n\n\t\t// const node = this._graph.node_from_id(graph_id);\n\n\t\tconst output_ids = this._outputs_by_graph_id.get(graph_id);\n\t\tif (output_ids) {\n\t\t\toutput_ids.forEach((output_id) => {\n\t\t\t\tthis.set_node_depth(output_id, depth + 1);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedGLDefinition, GLDefinitionType} from './GLDefinition';\n\nexport class TypedGLDefinitionCollection<T extends GLDefinitionType> {\n\t_errored: boolean = false;\n\t_error_message: string | undefined;\n\n\tconstructor(private _definitions: TypedGLDefinition<T>[] = []) {}\n\n\tget errored() {\n\t\treturn this._errored;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tuniq(): TypedGLDefinition<T>[] {\n\t\tconst definitions_by_name: Map<string, TypedGLDefinition<T>> = new Map();\n\t\tconst names: string[] = [];\n\n\t\tfor (let definition of this._definitions) {\n\t\t\tif (!this._errored) {\n\t\t\t\tconst name = definition.name;\n\t\t\t\tconst existing = definitions_by_name.get(name);\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.data_type != definition.data_type) {\n\t\t\t\t\t\tthis._errored = true;\n\t\t\t\t\t\tthis._error_message = `attempt to create ${definition.name} with types ${definition.data_type}`;\n\t\t\t\t\t\tconsole.warn('emitting error message', this._error_message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdefinitions_by_name.set(name, definition);\n\t\t\t\t\tnames.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uniq_definitions: TypedGLDefinition<T>[] = [];\n\t\tfor (let name of names) {\n\t\t\tconst definition = definitions_by_name.get(name);\n\t\t\tif (definition) {\n\t\t\t\tuniq_definitions.push(definition);\n\t\t\t}\n\t\t}\n\t\t// sorting may make dependencies be declared after the function calling them\n\t\t// const sorted_definitions = lodash_sortBy(uniq_definitions, (d)=>d.name())\n\t\treturn uniq_definitions;\n\t}\n}\n","import {ParamConfig} from '../configs/ParamConfig';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\n\nexport class ParamConfigsController {\n\tprivate _param_configs: ParamConfig<ParamType>[] = [];\n\n\treset() {\n\t\tthis._param_configs = [];\n\t}\n\n\tpush(param_config: ParamConfig<ParamType>) {\n\t\tthis._param_configs.push(param_config);\n\t}\n\tcreate_and_push<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\tuniform_name: string\n\t) {\n\t\tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t\tthis._param_configs.push(param_config);\n\t}\n\n\tget list(): Readonly<ParamConfig<ParamType>[]> {\n\t\treturn this._param_configs;\n\t}\n}\n","import {GlobalsGlNode} from '../../Globals';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nexport abstract class GlobalsBaseController {\n\tprivate static __next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor() {\n\t\tthis._id = GlobalsBaseController.__next_id++;\n\t}\n\tid() {\n\t\treturn this._id;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {}\n\n\tabstract read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined;\n}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {Connection} from './GlData';\n// import {Definition} from './Definition/_Module';\n// import {ShaderName} from './Assembler/Util/CodeBuilder';\n\n// list of globals\n// https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)\n// gl_PointCoord\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass GlobalsGlParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new GlobalsGlParamsConfig();\n\nexport class GlobalsGlNode extends TypedGlNode<GlobalsGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'globals';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_globals_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller?.assembler.set_node_lines_globals(this, shaders_collection_controller);\n\t\t// }\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// // const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\t// const body_lines = []\n\n\t\t// const shader_config = this.shader_config(this._shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\t// let definition\n\t\t// let body_line\n\t\t// for(let output_name of this.used_output_names()){\n\t\t// \tconst var_name = this.gl_var_name(output_name)\n\n\t\t// \tswitch (output_name){\n\t\t// \t\tcase 'frame':\n\t\t// \t\t\tdefinition = new Definition.Uniform(this, 'float', output_name)\n\t\t// \t\t\t// vertex_definitions.push(definition)\n\t\t// \t\t\t// fragment_definitions.push(definition)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\n\t\t// \t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t// \t\t\tbody_lines.push(body_line)\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_FragCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tfragment_body_lines.push(`vec4 ${var_name} = gl_FragCoord`)\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_PointCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tif(this.parent().is_point_material()){\n\t\t// \t\t\t\t\tfragment_body_lines.push(`vec2 ${var_name} = gl_PointCoord`)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tdefault:\n\t\t// \t\t\tconst named_output = this.named_output_by_name(output_name)\n\t\t// \t\t\tconst gl_type = named_output.gl_type()\n\t\t// \t\t\tdefinition = new Definition.Varying(this, gl_type, var_name)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\t\t// \t\t\tif(dependencies.length == 0){\n\t\t// \t\t\t\tbody_lines.push(body_line)\n\t\t// \t\t\t}\n\t\t// \t}\n\t\t// }\n\t\t// // this.set_vertex_definitions(vertex_definitions)\n\t\t// // this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tthis.set_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tthis.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// // this.add_definitions(definitions)\n\t\t// // this.set_vertex_body_lines(vertex_body_lines)\n\t\t// // this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// this.add_body_lines(body_lines)\n\t}\n}\n","import {EventDispatcher} from 'three/src/core/EventDispatcher';\nimport {MOUSE} from 'three/src/constants';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Spherical} from 'three/src/math/Spherical';\nimport {TOUCH} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyIn( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tswitch ( scope.mouseButtons.LEFT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.mouseButtons.MIDDLE ) {\n\n\t\t\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.mouseButtons.RIGHT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport {ConnectionPointType, ConnectionPointTypes} from '../utils/connections/ConnectionPointType';\n\nfunction typed_visible_options(type: ConnectionPointType) {\n\tconst val = ConnectionPointTypes.indexOf(type);\n\treturn {visible_if: {type: val}};\n}\n\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nclass ConstantGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tbool = ParamConfig.BOOLEAN(0, typed_visible_options(ConnectionPointType.BOOL));\n\tint = ParamConfig.INTEGER(0, typed_visible_options(ConnectionPointType.INT));\n\tfloat = ParamConfig.FLOAT(0, typed_visible_options(ConnectionPointType.FLOAT));\n\tvec2 = ParamConfig.VECTOR2([0, 0], typed_visible_options(ConnectionPointType.VEC2));\n\tvec3 = ParamConfig.VECTOR3([0, 0, 0], typed_visible_options(ConnectionPointType.VEC3));\n\tvec4 = ParamConfig.VECTOR4([0, 0, 0, 0], typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new ConstantGlParamsConfig();\nexport class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'constant';\n\t}\n\tstatic readonly OUTPUT_NAME = 'val';\n\tprivate _params_by_type: Map<ConnectionPointType, BaseParamType> | undefined;\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => ConstantGlNode.OUTPUT_NAME);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [this._current_connection_type]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\t// _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst param = this._current_param;\n\t\tif (param) {\n\t\t\tconst connection_type = this._current_connection_type;\n\t\t\tconst value = ThreeToGl.any(param.value);\n\t\t\tconst var_value = this._current_var_name;\n\t\t\tconst body_line = `${connection_type} ${var_value} = ${value}`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t} else {\n\t\t\tconsole.warn(`no param found for constant node for type '${this.pv.type}'`);\n\t\t}\n\t}\n\n\tprivate get _current_connection_type() {\n\t\tif (this.pv.type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\tif (connection_type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\treturn connection_type;\n\t}\n\n\tprivate get _current_param(): BaseParamType {\n\t\tthis._params_by_type =\n\t\t\tthis._params_by_type ||\n\t\t\tnew Map<ConnectionPointType, BaseParamType>([\n\t\t\t\t[ConnectionPointType.BOOL, this.p.bool],\n\t\t\t\t[ConnectionPointType.INT, this.p.int],\n\t\t\t\t[ConnectionPointType.FLOAT, this.p.float],\n\t\t\t\t[ConnectionPointType.VEC2, this.p.vec2],\n\t\t\t\t[ConnectionPointType.VEC3, this.p.vec3],\n\t\t\t\t[ConnectionPointType.VEC4, this.p.vec4],\n\t\t\t]);\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\treturn this._params_by_type.get(connection_type)!;\n\t}\n\tprivate get _current_var_name(): string {\n\t\treturn this.gl_var_name(ConstantGlNode.OUTPUT_NAME);\n\t}\n\n\t// private update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tconst current_connection = this.io.outputs.named_output_connection_points[0];\n\t// \tif (current_connection && current_connection.type == this._current_connection_type) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this._current_connection_type, this._current_connection_type)],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n}\n","export default \"uniform float mNear;\\nuniform float mFar;\\n\\nvarying float vViewZDepth;\\n\\nvoid main() {\\n\\n\\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\\n\\tgl_FragColor = vec4( vec3( color ), 1.0 );\\n\\n}\\n\"","import {NoColors} from 'three/src/constants';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\n\nexport const SHADER_DEFAULTS = {\n\tmetalness: 1,\n\troughness: 0.5,\n};\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness);\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness);\n}\n// TODO: add the following texture params:\n// - aoMap+aoMapIntensity\n// - bumpMap+bumpScale\n// - displacementMap+displaycementScale+displacementBias\n// - emissiveMap\n// - envMap\n// - lightMap\n// - metalnessMap\n// - normalMap\n// - roughnessMap,\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends TypedMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\t\tthis.texture_env_map_controller.update();\n\n\t\tif (this._material) {\n\t\t\tthis._material.envMapIntensity = this.pv.env_map_intensity;\n\t\t\tthis._material.roughness = this.pv.roughness;\n\t\t\tthis._material.metalness = this.pv.metalness;\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureEnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_env_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEnvMapController));\n\t\tenv_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.ENV_MAP,\n\t\t\tOperatorPathOptions(TextureEnvMapController, 'use_env_map')\n\t\t);\n\t\tenv_map_intensity = ParamConfig.FLOAT(1, {visible_if: {use_env_map: 1}});\n\t};\n}\nclass TextureEnvMaterial extends Material {\n\tenvMap!: Texture | null;\n}\ntype CurrentMaterial = TextureEnvMaterial | ShaderMaterial;\nclass TextureEnvMapParamsConfig extends TextureEnvMapParamConfig(NodeParamsConfig) {}\nabstract class TextureEnvMapMatNode extends TypedMatNode<CurrentMaterial, TextureEnvMapParamsConfig> {\n\ttexture_env_map_controller!: TextureEnvMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(node: TextureEnvMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'envMap', this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tstatic async update(node: TextureEnvMapMatNode) {\n\t\tnode.texture_env_map_controller.update();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerPoints} from '../gl/code/assemblers/materials/Points';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass PointsMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerPoints, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points_builder';\n\t}\n\n\tinitialize_node() {}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerPoints>(this, ShaderAssemblerPoints);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import lodash_isNaN from 'lodash/isNaN';\nimport {Camera} from 'three/src/cameras/Camera';\n\nimport {CoreTransform} from '../../../core/Transform';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {ControlsController} from './utils/cameras/ControlsController';\nimport {LayersController} from './utils/LayersController';\nimport {PostProcessController} from './utils/cameras/PostProcessController';\n\n// import {Dirtyable} from './Concerns/Dirtyable';\n// import {Layers} from './Concerns/Layers';\n// import {PostProcess} from './Concerns/PostProcess';\n// import {Transformed} from './Concerns/Transformed';\n// import {Background} from './Concerns/Background';\n// import {CoreTextureLoader} from '../../../Core/Loader/Texture'\n// import {CameraControls} from './Concerns/CameraControls';\n// import {File} from '../../../Engine/Node/Cop/File'\nimport {ThreejsViewer} from '../../viewers/Threejs';\nimport {BaseBackgroundController} from './utils/cameras/background/_BaseController';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport interface OrthoOrPerspCamera extends Camera {\n\tnear: number;\n\tfar: number;\n\tupdateProjectionMatrix: () => void;\n\tgetFocalLength?: () => void;\n}\n\nconst EVENT_CHANGE = {type: 'change'};\n\nexport const BASE_CAMERA_DEFAULT = {\n\tnear: 1.0,\n\tfar: 100.0,\n};\n\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\nimport {TypedObjNode} from './_Base';\n\nexport function CameraTransformParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcamera = ParamConfig.FOLDER();\n\t\tcontrols = ParamConfig.OPERATOR_PATH('', {\n\t\t\tnode_selection: {\n\t\t\t\tcontext: NodeContext.EVENT,\n\t\t\t},\n\t\t});\n\t\t// add transform params\n\t\t// t = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// r = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// s = ParamConfig.VECTOR3([1, 1, 1]);\n\t\t// scale = ParamConfig.FLOAT(1);\n\t\ttarget = ParamConfig.VECTOR3([0, 0, 0], {cook: false});\n\t\tnear = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t\tfar = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t\t// aspect = ParamConfig.FLOAT(1);\n\t\t// lock_width = ParamConfig.BOOLEAN(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('');\n\n\t\tset_master_camera = ParamConfig.BUTTON(null, {\n\t\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\t\tBaseCameraObjNodeClass.PARAM_CALLBACK_set_master_camera(node as BaseCameraObjNodeType);\n\t\t\t},\n\t\t});\n\t};\n}\n\nexport class BaseCameraObjParamsConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(TransformedParamConfig(LayerParamConfig(CameraTransformParamConfig(NodeParamsConfig))))\n) {}\n\nexport class TypedCameraObjNode<O extends OrthoOrPerspCamera, K extends BaseCameraObjParamsConfig> extends TypedObjNode<\n\tO,\n\tK\n> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.CAMERA;\n\tprotected _object!: O;\n\tprotected _aspect: number = -1;\n\tget object() {\n\t\treturn this._object;\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprotected _background_controller: BaseBackgroundController | undefined;\n\tget background_controller(): BaseBackgroundController {\n\t\treturn (this._background_controller =\n\t\t\tthis._background_controller || new this.background_controller_constructor(this));\n\t}\n\tprotected get background_controller_constructor() {\n\t\treturn BaseBackgroundController;\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller(): ControlsController {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _layers_controller: LayersController | undefined;\n\tget layers_controller() {\n\t\treturn (this._layers_controller = this._layers_controller || new LayersController(this));\n\t}\n\tprotected _post_process_controller: PostProcessController | undefined;\n\tget post_process_controller(): PostProcessController {\n\t\treturn (this._post_process_controller = this._post_process_controller || new PostProcessController(this));\n\t}\n\n\t// protected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active || false);\n\t\t// });\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\t// create_common_params() {\n\t// \t// this.within_param_folder('transform', () => {\n\t// \t// \t// this.add_param(ParamType.OPERATOR_PATH, 'controls', '', {\n\t// \t// \t// \tnode_selection: {\n\t// \t// \t// \t\tcontext: NodeContext.EVENT,\n\t// \t// \t// \t},\n\t// \t// \t// });\n\t// \t// \t// CoreTransform.create_params(this); // removed since they are now added Persp Camera\n\t// \t// \t// this.add_param( ParamType.TOGGLE, 'is_updating', 0, {cook: false, hidden: true}); //, hidden: true} )\n\t// \t// \t// this.add_param(ParamType.VECTOR3, 'target', [0, 0, 0], {cook: false}); //, hidden: true} )\n\t// \t// });\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.layers_controller.add_params();\n\t// \t// this.add_param(ParamType.FLOAT, 'near', BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.FLOAT, 'far', BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.BOOLEAN, 'lock_width', 1);\n\t// \t// });\n\t// \t// this.background_controller.add_params();\n\t// \t// this.post_process_controller.add_params();\n\t// }\n\n\t// create_player_camera_params() {\n\t// \tthis.add_param(ParamType.BUTTON, 'set_master_camera', null, {callback: this.set_as_master_camera.bind(this)});\n\t// }\n\t// is_updating():boolean{\n\t// \treturn this.param('is_updating').value()\n\t// }\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tasync cook() {\n\t\tthis.transform_controller.update();\n\t\tthis.layers_controller.update();\n\t\tawait this.background_controller.update();\n\n\t\tif (this._object.near != this.pv.near || this._object.far != this.pv.far) {\n\t\t\tthis._object.near = this.pv.near;\n\t\t\tthis._object.far = this.pv.far;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\n\t\tawait this.post_process_controller.update_composer_passes();\n\t\tthis.update_camera();\n\t\tthis.controls_controller.update_controls();\n\n\t\t// TODO: ideally the update transform and update camera\n\t\t// can both return if the camera has changed\n\t\t// and we can run this here instead of inside the update_transform and update_camera\n\t\t// this._object.dispatchEvent( EVENT_CHANGE )\n\t\tthis._object.dispatchEvent(EVENT_CHANGE);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\ton_create() {}\n\t//\n\ton_delete() {}\n\t//\n\n\tcamera() {\n\t\treturn this._object;\n\t}\n\n\tupdate_camera() {}\n\n\t//\n\tstatic PARAM_CALLBACK_set_master_camera(node: BaseCameraObjNodeType) {\n\t\tnode.set_as_master_camera();\n\t}\n\tset_as_master_camera() {\n\t\tthis.scene.cameras_controller.set_master_camera_node_path(this.full_path());\n\t}\n\n\tsetup_for_aspect_ratio(aspect: number) {\n\t\tif (lodash_isNaN(aspect)) {\n\t\t\treturn;\n\t\t}\n\t\tif (aspect && this._aspect != aspect) {\n\t\t\tthis._aspect = aspect;\n\t\t\tthis._update_for_aspect_ratio();\n\t\t}\n\t}\n\tprotected _update_for_aspect_ratio(): void {}\n\n\tupdate_transform_params_from_object() {\n\t\t// CoreTransform.set_params_from_matrix(this._object.matrix, this, {scale: false})\n\t\tCoreTransform.set_params_from_object(this._object, this);\n\t}\n\tcreate_viewer(element: HTMLElement): ThreejsViewer {\n\t\treturn new ThreejsViewer(element, this.scene, this);\n\t}\n}\n// \tconsole.warn \"camera #{this.full_path()} has no controls assigned\"\n\n// controls_node: ->\n// \tif @_param_controls? && @_param_controls != ''\n// \t\tCore.Walker.find_node(this, @_param_controls)\n\nexport type BaseCameraObjNodeType = TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig>;\nexport class BaseCameraObjNodeClass extends TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig> {}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_compact from 'lodash/compact';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_trim from 'lodash/trim';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_sum from 'lodash/sum';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\n// const THREE = {Box3, BufferGeometry, Group, LineSegments, Mesh, Object3D, Points, Vector3}\nimport {CoreObject} from './Object';\nimport {CoreGeometry} from './Geometry';\nimport {CoreAttribute} from './Attribute';\n// import {Core} from '../_Module'\nimport {CoreString} from '../String';\nimport {CoreConstant, AttribClass} from './Constant';\n\n// import './MonkeyPatch'\n\nexport type GroupString = string;\n\nexport interface Object3DWithGeometry extends Object3D {\n\tgeometry: BufferGeometry;\n}\n\nexport class CoreGroup {\n\t// _group: Group\n\t_timestamp: number | undefined;\n\t// _core_objects:\n\t_objects: Object3D[] | undefined;\n\t_core_objects: CoreObject[] | undefined;\n\n\t// _geometries: BufferGeometry[];\n\t_core_geometries: CoreGeometry[] | undefined;\n\n\t_bounding_box: Box3 | undefined;\n\n\tconstructor() {\n\t\t//_group: Group){\n\t\t// this._group = _group;\n\t\tthis.touch();\n\t}\n\n\t//\n\t//\n\t// TIMESTAMP\n\t//\n\t//\n\ttimestamp() {\n\t\treturn this._timestamp;\n\t}\n\ttouch() {\n\t\tthis._timestamp = performance.now();\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._bounding_box = undefined;\n\t\tthis._core_geometries = undefined;\n\t\tthis._core_objects = undefined;\n\t}\n\n\t//\n\t//\n\t// CLONE\n\t//\n\t//\n\tclone() {\n\t\tconst core_group = new CoreGroup();\n\t\tif (this._objects) {\n\t\t\tconst objects = [];\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tobjects.push(CoreObject.clone(object));\n\t\t\t}\n\t\t\tcore_group.set_objects(objects);\n\t\t}\n\t\treturn core_group;\n\t}\n\t//\n\t//\n\t// OBJECTS\n\t//\n\t//\n\tset_objects(objects: Object3D[]) {\n\t\tthis._objects = objects;\n\t\tthis.touch();\n\t}\n\tobjects() {\n\t\treturn this._objects as Object3DWithGeometry[];\n\t}\n\tcore_objects() {\n\t\treturn (this._core_objects = this._core_objects || this._create_core_objects());\n\t}\n\tprivate _create_core_objects(): CoreObject[] {\n\t\tconst list: CoreObject[] = [];\n\t\tif (this._objects) {\n\t\t\tfor (let i = 0; i < this._objects.length; i++) {\n\t\t\t\tthis._objects[i].traverse((object) => {\n\t\t\t\t\tconst core_object = new CoreObject(object, i);\n\t\t\t\t\tlist.push(core_object);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\t// group() {\n\t// \treturn this._group;\n\t// }\n\t// uuid() {\n\t// \treturn this._group.uuid;\n\t// }\n\n\tgeometries(): BufferGeometry[] {\n\t\t// this._geometries = [];\n\t\t// for (let object of this._objects) {\n\t\t// \tobject.traverse((object) => this.__geometry_from_object.bind(this)(this._geometries, object));\n\t\t// \t// \tconst geometry = this.geometry_from_object(object)\n\t\t// \t// \tif (geometry != null) {\n\t\t// \t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t// \t// \t}\n\t\t// \t// });\n\t\t// }\n\t\t// return this._geometries;\n\t\tconst list: BufferGeometry[] = [];\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tconst geometry = (core_object.object() as Mesh).geometry as BufferGeometry;\n\t\t\tif (geometry) {\n\t\t\t\tlist.push(geometry);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tcore_geometries(): CoreGeometry[] {\n\t\treturn (this._core_geometries = this._core_geometries || this.create_core_geometries());\n\t}\n\tprivate create_core_geometries() {\n\t\tconst list: CoreGeometry[] = [];\n\t\tfor (let geometry of this.geometries()) {\n\t\t\tlist.push(new CoreGeometry(geometry));\n\t\t\t// object.traverse(object=> this.__core_geometry_from_object.bind(this)(this._core_geometries, object))\n\t\t\t// \tconst geometry = this.geometry_from_object(object)\n\t\t\t// \tif (geometry != null) {\n\t\t\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t\t// \t}\n\t\t\t// });\n\t\t}\n\t\treturn list;\n\t}\n\t__geometry_from_object(list: BufferGeometry[], object: Mesh) {\n\t\tif (object.geometry) {\n\t\t\treturn list.push(object.geometry as BufferGeometry);\n\t\t}\n\t}\n\t// __core_geometry_from_object(list, object){\n\t// \tconst geometry = CoreGroup.geometry_from_object(object)\n\t// \tif (geometry != null) {\n\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t// \t}\n\t// }\n\tstatic geometry_from_object(object: Object3D): BufferGeometry | null {\n\t\tif ((object as Mesh).isMesh || (object as LineSegments).isLine || (object as Points).isPoints) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t}\n\t\treturn null;\n\t}\n\tfaces() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.faces()));\n\t}\n\tpoints() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.points()));\n\t}\n\tpoints_count() {\n\t\treturn lodash_sum(this.core_geometries().map((g) => g.points_count()));\n\t}\n\tpoints_from_group(group: GroupString) {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\t// if (indices) {\n\t\t\tconst points = this.points();\n\t\t\treturn indices.map((i) => points[i]);\n\t\t\t// }\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tstatic from_objects(objects: Object3D[]): CoreGroup {\n\t\tconst core_group = new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\treturn core_group;\n\t}\n\n\t// objects() {\n\t// \treturn this._objects = lodash_map(this._group.children, (object, i)=> {\n\t// \t\tconst object_wrapper = new CoreObject(object);\n\t// \t\tobject_wrapper.set_index(i);\n\t// \t\treturn object_wrapper;\n\t// \t});\n\t// }\n\tobjects_from_group(group_name: string): Object3D[] {\n\t\treturn this.core_objects_from_group(group_name).map((co) => co.object());\n\t}\n\tcore_objects_from_group(group_name: string): CoreObject[] {\n\t\tgroup_name = lodash_trim(group_name);\n\n\t\tif (group_name !== '') {\n\t\t\tconst index = parseInt(group_name);\n\t\t\tif (!lodash_isNaN(index)) {\n\t\t\t\treturn lodash_compact([this.core_objects()[index]]);\n\t\t\t} else {\n\t\t\t\treturn this.core_objects().filter((core_object) => {\n\t\t\t\t\treturn CoreString.match_mask(group_name, core_object.name());\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.core_objects();\n\t\t}\n\t}\n\n\t// reset: ->\n\t// \t@_geometries = []\n\t// \t@_points = []\n\n\t// _find_geometries: ->\n\t// \tlist = []\n\t// \t@_group.traverse (object)=>\n\t// \t\tif (geometry = object.geometry)?\n\t// \t\t\tlist.push new Geometry(geometry)\n\t// \tlist\n\n\t// _find_points: ->\n\t// \tlodash_flatten( lodash_map(this.objects(), (g)->g.points()) )\n\n\t// bounding_box() {\n\t// \treturn new Box3().setFromObject(this._group);\n\t// }\n\tbounding_box(): Box3 {\n\t\treturn (this._bounding_box = this._bounding_box || this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\tconst center = new Vector3();\n\t\tthis.bounding_box().getCenter(center);\n\t\treturn center;\n\t}\n\tsize(): Vector3 {\n\t\tconst size = new Vector3();\n\t\tthis.bounding_box().getSize(size);\n\t\treturn size;\n\t}\n\n\tprivate _compute_bounding_box() {\n\t\tconst bbox = new Box3();\n\t\tif (this._objects) {\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tbbox.expandByObject(object);\n\t\t\t}\n\t\t}\n\t\treturn bbox;\n\t}\n\tcompute_vertex_normals() {\n\t\tfor (let object of this.core_objects()) {\n\t\t\tobject.compute_vertex_normals();\n\t\t}\n\t}\n\n\thas_attrib(name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.has_attrib(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tattrib_type(name: string) {\n\t\tconst first_geometry = this.core_geometries()[0];\n\t\tif (first_geometry != null) {\n\t\t\treturn first_geometry.attrib_type(name);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trename_attrib(old_name: string, new_name: string, attrib_class: AttribClass) {\n\t\tswitch (attrib_class) {\n\t\t\tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst geometry = CoreGroup.geometry_from_object(child);\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\t\t\t\t\t\t\t\tcore_geometry.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst core_object = new CoreObject(child, 0);\n\t\t\t\t\t\t\t\tcore_object.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tattrib_names() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tobject_attrib_names() {\n\t\tlet first_object;\n\t\tif ((first_object = this.core_objects()[0]) != null) {\n\t\t\treturn first_object.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tattrib_names_matching_mask(masks_string: GroupString) {\n\t\tconst masks = CoreString.attrib_names(masks_string);\n\n\t\tconst matching_attrib_names = [];\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\tfor (let mask of masks) {\n\t\t\t\tif (CoreString.match_mask(attrib_name, mask)) {\n\t\t\t\t\tmatching_attrib_names.push(attrib_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lodash_uniq(matching_attrib_names);\n\t}\n\n\tattrib_sizes() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_sizes();\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\tattrib_size(attrib_name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_size(attrib_name);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_geometry of this.core_geometries()) {\n\t\t\tcore_geometry.add_numeric_attrib(name, size, default_value);\n\t\t}\n\t}\n\n\tadd_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tcore_object.add_numeric_attrib(name, default_value);\n\t\t}\n\t}\n\n\tstatic clone(src_group: Group) {\n\t\tconst new_group = new Group();\n\n\t\tsrc_group.children.forEach((src_object) => {\n\t\t\tconst new_object = CoreObject.clone(src_object);\n\t\t\tnew_group.add(new_object);\n\t\t});\n\n\t\treturn new_group;\n\t}\n}\n","import {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// const THREE = {BufferGeometry, Vector2, Vector3, Vector4}\nimport {CoreAttribute} from './Attribute';\nimport {CoreGeometry} from './Geometry';\nimport {CoreEntity} from './Entity';\n// import Geometry from './Geometry';\n\nconst ATTRIB_NAMES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n};\n\nenum ComponentName {\n\tx = 'x',\n\ty = 'y',\n\tz = 'z',\n\tw = 'w',\n\tr = 'r',\n\tg = 'g',\n\tb = 'b',\n}\nconst COMPONENT_INDICES = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\nconst PTNUM = 'ptnum';\nconst DOT = '.';\n\nexport class CorePoint extends CoreEntity {\n\t_geometry: BufferGeometry;\n\t_position: Vector3 | undefined;\n\t_normal: Vector3 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, index: number) {\n\t\tsuper(index);\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\n\tgeometry_wrapper() {\n\t\treturn this._core_geometry;\n\t}\n\tgeometry() {\n\t\treturn (this._geometry = this._geometry || this._core_geometry.geometry());\n\t}\n\n\t// add_attribute: (name, size, value)->\n\t// \t@_attributes[name] = new Attribute(size, value)\n\n\tattrib_size(name: string): number {\n\t\t//@_attributes[name].size()\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.getAttribute(name).itemSize;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tconst remapped_name = CoreAttribute.remap_name(name);\n\t\treturn this._core_geometry.has_attrib(remapped_name);\n\t}\n\n\tattrib_value(name: string) {\n\t\t//, target){ // target could be used, but not entirely sure I am ready now\n\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet component_name = null;\n\t\t\tlet component_index = null;\n\t\t\tif (name[name.length - 2] === DOT) {\n\t\t\t\tcomponent_name = name[name.length - 1] as ComponentName;\n\t\t\t\tcomponent_index = COMPONENT_INDICES[component_name];\n\t\t\t\tname = name.substring(0, name.length - 2);\n\t\t\t}\n\t\t\tconst remaped_name = CoreAttribute.remap_name(name);\n\n\t\t\t//if (attrib = @_attributes[name])?\n\t\t\tconst attrib = this._geometry.getAttribute(remaped_name);\n\t\t\tif (attrib) {\n\t\t\t\tconst {array} = attrib;\n\t\t\t\tif (this._core_geometry.is_attrib_indexed(remaped_name)) {\n\t\t\t\t\tconst value_index = this.attrib_value_index(remaped_name); //attrib.value()\n\t\t\t\t\treturn this._core_geometry.user_data_attrib(remaped_name)[value_index];\n\t\t\t\t} else {\n\t\t\t\t\tconst size = attrib.itemSize;\n\t\t\t\t\tconst start_index = this._index * size;\n\n\t\t\t\t\tif (component_index == null) {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn new Vector2(array[start_index + 0], array[start_index + 1]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// target.fromArray(array, start_index)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn new Vector4(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2],\n\t\t\t\t\t\t\t\t\tarray[start_index + 3]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow `size not valid (${size})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn array[start_index + component_index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst message = `attrib ${name} not found. availables are: ${Object.keys(\n\t\t\t\t\tthis._geometry.attributes || {}\n\t\t\t\t).join(',')}`;\n\t\t\t\tconsole.warn(message);\n\t\t\t\tthrow message;\n\t\t\t}\n\t\t}\n\t}\n\n\tattrib_value_index(name: string) {\n\t\tif (this._core_geometry.is_attrib_indexed(name)) {\n\t\t\t//@_attributes[name].value()\n\t\t\treturn this._geometry.getAttribute(name).array[this._index];\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tposition(): Vector3 {\n\t\t//@_attributes['position'].value()\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.POSITION);\n\t\tthis._position = this._position || new Vector3();\n\t\treturn this._position.fromArray(array, this._index * 3);\n\t}\n\tset_position(new_position: Vector3) {\n\t\tthis.set_attrib_value_vector3(ATTRIB_NAMES.POSITION, new_position);\n\t}\n\n\tnormal(): Vector3 {\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.NORMAL);\n\t\tthis._normal = this._normal || new Vector3();\n\t\treturn this._normal.fromArray(array, this._index * 3);\n\t}\n\tset_normal(new_normal: Vector3) {\n\t\treturn this.set_attrib_value_vector3(ATTRIB_NAMES.NORMAL, new_normal);\n\t}\n\n\tset_attrib_value(name: string, value: NumericAttribValue | string) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(value)\n\t\t//value = attrib.value()\n\t\t//value = this.attrib_value()\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst attrib_size = attrib.itemSize;\n\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tarray[this._index] = value as number;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tconst v2 = value as Vector2Like;\n\t\t\t\tarray[this._index * 2 + 0] = v2.x;\n\t\t\t\tarray[this._index * 2 + 1] = v2.y;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tconst is_color = (value as ColorLike).r != null;\n\t\t\t\tif (is_color) {\n\t\t\t\t\tconst col = value as ColorLike;\n\t\t\t\t\tarray[this._index * 3 + 0] = col.r;\n\t\t\t\t\tarray[this._index * 3 + 1] = col.g;\n\t\t\t\t\tarray[this._index * 3 + 2] = col.b;\n\t\t\t\t} else {\n\t\t\t\t\tconst v3 = value as Vector3Like;\n\t\t\t\t\tarray[this._index * 3 + 0] = v3.x;\n\t\t\t\t\tarray[this._index * 3 + 1] = v3.y;\n\t\t\t\t\tarray[this._index * 3 + 2] = v3.z;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Point.set_attrib_value does not yet allow attrib size ${attrib_size}`);\n\t\t\t\tthrow `attrib size ${attrib_size} not implemented`;\n\t\t}\n\t}\n\tset_attrib_value_vector3(name: string, value: Vector3) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst i = this._index * 3;\n\n\t\tarray[i] = value.x;\n\t\tarray[i + 1] = value.y;\n\t\tarray[i + 2] = value.z;\n\t}\n\n\tset_attrib_index(name: string, new_value_index: number) {\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(new_value_index)\n\t\t//value = attrib.value()\n\t\tconst array = this._geometry.getAttribute(name).array as number[];\n\t\treturn (array[this._index] = new_value_index);\n\t}\n}\n","export class CoreEntity {\n\tconstructor(protected _index: number) {}\n\tget index() {\n\t\treturn this._index;\n\t}\n}\n","type IterateeMethod = (element: any, index?: number) => void;\ntype IterateeMethodArray = IterateeMethod; // TODO: check this, as the element may be an array\ntype IterateeMethodCount = (index: number) => void;\n\ninterface CoreIteratorOptions {\n\tmax_time_per_chunk?: number;\n\tcheck_every_interations?: number;\n}\n\nexport class CoreIterator {\n\t// array\n\tprivate _array: any[] | undefined;\n\tprivate _iteratee_method_array: IterateeMethodArray | undefined;\n\tprivate _bound_next_with_array: (() => void) | undefined;\n\tprivate _current_array_element: any;\n\tprivate _array_index: number = 0;\n\n\t// count\n\tprivate _count: number = 0;\n\tprivate _iteratee_method_count: IterateeMethodCount | undefined;\n\tprivate _bound_next_with_count: (() => void) | undefined;\n\tprivate _current_count_index: number = 0;\n\n\tprivate _max_time_per_chunk: number;\n\tprivate _check_every_interations: number;\n\n\tprivate _resolve: null | (() => void) = null;\n\n\tconstructor(options: CoreIteratorOptions = {}) {\n\t\tthis._max_time_per_chunk = options.max_time_per_chunk || 10;\n\t\tthis._check_every_interations = options.check_every_interations || 100;\n\t}\n\n\tasync start_with_count(count: number, iteratee_method: IterateeMethodCount) {\n\t\tthis._count = count;\n\t\tthis._current_count_index = 0;\n\t\tthis._iteratee_method_count = iteratee_method;\n\t\tthis._bound_next_with_count = this.next_with_count.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_count();\n\t\t});\n\t}\n\tnext_with_count() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_count && this._bound_next_with_count) {\n\t\t\twhile (this._current_count_index < this._count) {\n\t\t\t\tthis._iteratee_method_count(this._current_count_index);\n\n\t\t\t\tthis._current_count_index++;\n\n\t\t\t\tif (this._current_count_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_count, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_count_index >= this._count) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ARRAY\n\t//\n\t//\n\tasync start_with_array(array: any[], iteratee_method: IterateeMethod) {\n\t\tthis._array = array;\n\t\tthis._array_index = 0;\n\t\tthis._iteratee_method_array = iteratee_method;\n\t\tthis._bound_next_with_array = this.next_with_array.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_array();\n\t\t});\n\t}\n\tnext_with_array() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_array && this._bound_next_with_array && this._array) {\n\t\t\twhile ((this._current_array_element = this._array[this._array_index])) {\n\t\t\t\tthis._iteratee_method_array(this._current_array_element, this._array_index);\n\n\t\t\t\tthis._array_index++;\n\n\t\t\t\tif (this._array_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_array, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_array_element === undefined) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreMath} from '../../math/_Module'\nimport {Vector2} from 'three/src/math/Vector2'\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\n\nexport class CoreGeometryUtilCircle {\n\tstatic positions(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst radian_per_segment =\n\t\t\tCoreMath.degrees_to_radians(arc_angle) / segments_count\n\n\t\tconst positions = []\n\t\tfor (let i = 0; i < segments_count; i++) {\n\t\t\tconst point_radian = radian_per_segment * i\n\t\t\tconst x = radius * Math.cos(point_radian)\n\t\t\tconst y = radius * Math.sin(point_radian)\n\n\t\t\tpositions.push(new Vector2(x, y))\n\t\t}\n\n\t\treturn positions\n\t}\n\n\tstatic create(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst positions_2d = this.positions(radius, segments_count, arc_angle)\n\n\t\tconst positions = []\n\t\tconst indices = []\n\t\tlet position_2d\n\t\tfor (let i = 0; i < positions_2d.length; i++) {\n\t\t\tposition_2d = positions_2d[i]\n\n\t\t\tpositions.push(position_2d.x)\n\t\t\tpositions.push(position_2d.y)\n\t\t\tpositions.push(0)\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1)\n\t\t\t\tindices.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// also add the last segment\n\t\tindices.push(segments_count - 1)\n\t\tindices.push(0)\n\n\t\tconst geometry = new BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(positions, 3)\n\t\t)\n\t\tgeometry.setIndex(indices)\n\n\t\treturn geometry\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {InstancedBufferGeometry} from 'three/src/core/InstancedBufferGeometry';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\n// import {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry'\n// const THREE = {BoxBufferGeometry, InstancedBufferAttribute, InstancedBufferGeometry, Matrix4, Quaternion, Vector2, Vector3}\n\nimport {CorePoint} from './Point';\n// import {Core} from '../_Module';\nimport {CoreGroup} from './Group';\nimport {CoreGeometry} from './Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nconst DEFAULT = {\n\tSCALE: new Vector3(1, 1, 1),\n\tPSCALE: 1,\n\tEYE: new Vector3(0, 0, 0),\n\tUP: new Vector3(0, 1, 0),\n};\nconst SCALE_ATTRIB_NAME = 'scale';\nconst PSCALE_ATTRIB_NAME = 'pscale';\nconst NORMAL_ATTRIB_NAME = 'normal';\nconst UP_ATTRIB_NAME = 'up';\nconst MATRIX_T = 'translate';\nconst MATRIX_R = 'rotate';\nconst MATRIX_S = 'scale';\n\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst ATTRIB_NAME_UV = 'uv';\nconst ATTRIB_NAME_COLOR = 'color';\n\nexport class CoreInstancer {\n\tprivate _is_pscale_present: boolean;\n\tprivate _is_scale_present: boolean;\n\tprivate _is_normal_present: boolean;\n\tprivate _is_up_present: boolean;\n\tprivate _do_rotate_matrices: boolean;\n\tprivate _matrices: Dictionary<Matrix4> = {};\n\n\tconstructor(private _group_wrapper: CoreGroup) {\n\t\tthis._is_pscale_present = this._group_wrapper.has_attrib('pscale');\n\t\tthis._is_scale_present = this._group_wrapper.has_attrib('scale');\n\n\t\tthis._is_normal_present = this._group_wrapper.has_attrib('normal');\n\t\tthis._is_up_present = this._group_wrapper.has_attrib('up');\n\n\t\tthis._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;\n\t}\n\n\tmatrices(): Matrix4[] {\n\t\tthis._matrices = {};\n\t\tthis._matrices[MATRIX_T] = new Matrix4();\n\t\tthis._matrices[MATRIX_R] = new Matrix4();\n\t\tthis._matrices[MATRIX_S] = new Matrix4();\n\n\t\treturn this._group_wrapper.points().map((point) => {\n\t\t\treturn this._matrix_from_point(point);\n\t\t});\n\t}\n\n\t_matrix_from_point(point: CorePoint): Matrix4 {\n\t\tconst t = point.position();\n\t\t//r = new Vector3(0,0,0)\n\t\tlet scale = this._is_scale_present ? point.attrib_value(SCALE_ATTRIB_NAME) : DEFAULT.SCALE;\n\t\tconst pscale = this._is_pscale_present ? point.attrib_value(PSCALE_ATTRIB_NAME) : DEFAULT.PSCALE;\n\t\tscale = scale.clone().multiplyScalar(pscale);\n\n\t\t//matrix = #Core.Transform.matrix(t, r, s, scale)\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.identity();\n\n\t\tconst scale_matrix = this._matrices[MATRIX_S];\n\t\tscale_matrix.makeScale(scale.x, scale.y, scale.z);\n\n\t\tconst translate_matrix = this._matrices[MATRIX_T];\n\t\ttranslate_matrix.makeTranslation(t.x, t.y, t.z);\n\n\t\tmatrix.multiply(translate_matrix);\n\n\t\tif (this._do_rotate_matrices) {\n\t\t\tconst rotate_matrix = this._matrices[MATRIX_R];\n\t\t\tconst eye = DEFAULT.EYE;\n\t\t\tconst center = point.attrib_value(NORMAL_ATTRIB_NAME).multiplyScalar(-1);\n\t\t\tconst up = this._is_up_present ? point.attrib_value(UP_ATTRIB_NAME) : DEFAULT.UP;\n\t\t\tup.normalize();\n\t\t\trotate_matrix.lookAt(eye, center, up);\n\n\t\t\tmatrix.multiply(rotate_matrix);\n\t\t}\n\n\t\tmatrix.multiply(scale_matrix);\n\n\t\treturn matrix;\n\t}\n\n\tstatic create_instance_buffer_geo(\n\t\tgeometry_to_instance: BufferGeometry,\n\t\ttemplate_core_group: CoreGroup,\n\t\tattributes_to_copy: string\n\t) {\n\t\tconst instance_pts = template_core_group.points();\n\t\t// geometry_to_instance = new BoxBufferGeometry( 2, 2, 2 )\n\t\t// geometry = new InstancedBufferGeometry()\n\t\t// geometry.index = geometry_to_instance.index\n\t\t// geometry.attributes.position = geometry_to_instance.attributes.position\n\t\t// geometry.attributes.uv = geometry_to_instance.attributes.uv\n\n\t\tconst geometry = new InstancedBufferGeometry();\n\t\tgeometry.copy(geometry_to_instance);\n\n\t\tconst instances_count = instance_pts.length;\n\t\tconst positions = new Float32Array(instances_count * 3);\n\t\tconst colors = new Float32Array(instances_count * 3);\n\t\tconst scales = new Float32Array(instances_count * 3);\n\t\tconst orients = new Float32Array(instances_count * 4);\n\n\t\tconst has_color = template_core_group.has_attrib(ATTRIB_NAME_COLOR);\n\n\t\tconst position = new Vector3(0, 0, 0);\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tconst instance_matrices = instancer.matrices();\n\n\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\tconst index3 = i * 3;\n\t\t\tconst index4 = i * 4;\n\n\t\t\tconst matrix = instance_matrices[i];\n\t\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\t\tposition.toArray(positions, index3);\n\t\t\tquaternion.toArray(orients, index4);\n\t\t\tscale.toArray(scales, index3);\n\n\t\t\tconst color = has_color ? instance_pt.attrib_value(ATTRIB_NAME_COLOR) : DEFAULT_COLOR;\n\t\t\tcolor.toArray(colors, index3);\n\t\t});\n\n\t\t// if(this._param_add_uv_offset){\n\t\tconst has_uv = template_core_group.has_attrib(ATTRIB_NAME_UV);\n\t\tif (has_uv) {\n\t\t\tconst uvs = new Float32Array(instances_count * 2);\n\t\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\t\tconst index2 = i * 2;\n\t\t\t\tconst uv = has_uv ? instance_pt.attrib_value(ATTRIB_NAME_UV) : DEFAULT_UV;\n\t\t\t\tuv.toArray(uvs, index2);\n\t\t\t});\n\t\t\tgeometry.setAttribute('instanceUv', new InstancedBufferAttribute(uvs, 2));\n\t\t}\n\t\t// }\n\n\t\tgeometry.setAttribute('instancePosition', new InstancedBufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('instanceScale', new InstancedBufferAttribute(scales, 3));\n\t\tgeometry.setAttribute('instanceOrientation', new InstancedBufferAttribute(orients, 4));\n\t\tgeometry.setAttribute('instanceColor', new InstancedBufferAttribute(colors, 3));\n\n\t\tconst attrib_names = template_core_group.attrib_names_matching_mask(attributes_to_copy);\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = template_core_group.attrib_size(attrib_name);\n\t\t\tconst values = new Float32Array(instances_count * attrib_size);\n\t\t\tinstance_pts.forEach((pt, i) => {\n\t\t\t\tconst value = pt.attrib_value(attrib_name);\n\t\t\t\tif (lodash_isNumber(value)) {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue.toArray(values, i * attrib_size);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgeometry.setAttribute(attrib_name, new InstancedBufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\tgeometry_wrapper.mark_as_instance();\n\n\t\treturn geometry;\n\t}\n}\n","// import {Core} from '../../_Module';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isString from 'lodash/isString';\nimport lodash_flatten from 'lodash/flatten';\nimport {Points} from 'three/src/objects/Points';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nconst THREE = {BufferGeometry, Float32BufferAttribute, Points};\n\n// import UrlLoader from '../UrlLoader';\nimport axios from 'axios';\nimport {CoreString} from '../../String';\nimport {CoreGeometry} from '../../geometry/Geometry';\nimport {CoreConstant} from '../../geometry/Constant';\nimport {CoreAttributeData} from '../../geometry/AttributeData';\nimport {CoreAttribute} from '../../geometry/Attribute';\n// import {BaseNodeType} from '../../../engine/nodes/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nconst DEEP_ATTRIB_SEPARATOR = ':';\n\nexport interface JsonDataLoaderOptions {\n\tdata_keys_prefix?: string;\n\tskip_entries?: string;\n\tdo_convert?: boolean;\n\tconvert_to_numeric?: string;\n}\n\nexport class JsonDataLoader {\n\t_json: any[] | undefined;\n\t_attribute_datas_by_name: Dictionary<CoreAttributeData> = {};\n\tprivate _options: JsonDataLoaderOptions = {};\n\n\tconstructor(options: JsonDataLoaderOptions = {}) {\n\t\tthis._options.data_keys_prefix = options.data_keys_prefix;\n\t\tthis._options.skip_entries = options.skip_entries;\n\t\tthis._options.do_convert = options.do_convert || false;\n\t\tthis._options.convert_to_numeric = options.convert_to_numeric;\n\t}\n\t//\n\n\tload(\n\t\turl: string,\n\t\tsuccess_callback: (object: Object3D) => void,\n\t\tprogress_callback: (() => void) | undefined,\n\t\terror_callback: (error: ErrorEvent) => void | undefined\n\t) {\n\t\t// const url_loader = new UrlLoader();\n\t\t// const start_time = performance.now();\n\t\t// const config = {\n\t\t// \tcrossdomain: true\n\t\t// }\n\t\taxios\n\t\t\t.get(url)\n\t\t\t.then((response) => {\n\t\t\t\t// const end_time = performance.now();\n\n\t\t\t\tthis._json = response.data;\n\t\t\t\tif (this._options.data_keys_prefix != null && this._options.data_keys_prefix != '') {\n\t\t\t\t\tthis._json = this.get_prefixed_json(this._json, this._options.data_keys_prefix.split('.'));\n\t\t\t\t}\n\t\t\t\tconst object = this.create_object();\n\t\t\t\tsuccess_callback(object);\n\t\t\t})\n\t\t\t.catch((error: ErrorEvent) => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\terror_callback(error);\n\t\t\t});\n\t}\n\n\tget_prefixed_json(json: any, prefixes: string[]): any[] {\n\t\tif (prefixes.length == 0) {\n\t\t\treturn json;\n\t\t} else {\n\t\t\tconst first_prefix = prefixes.shift();\n\t\t\tif (first_prefix) {\n\t\t\t\treturn this.get_prefixed_json(json[first_prefix], prefixes);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tset_json(json: any) {\n\t\treturn (this._json = json);\n\t}\n\n\tcreate_object() {\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tconst core_geo = new CoreGeometry(geometry);\n\n\t\tif (this._json != null) {\n\t\t\tconst points_count = this._json.length;\n\t\t\tcore_geo.init_position_attribute(points_count);\n\n\t\t\tthis._find_attributes();\n\t\t\t// for(let attrib_name of Object.keys(this._attribute_names)){\n\t\t\t// \tconst attrib_data = this._attribute_datas_by_name[attrib_name];\n\t\t\t// \treturn core_geo.add_attribute(attrib_name, attrib_data);\n\t\t\t// }\n\n\t\t\tconst convert_to_numeric_masks = CoreString.attrib_names(this._options.convert_to_numeric || '');\n\n\t\t\t// set values\n\t\t\tfor (let attrib_name of Object.keys(this._attribute_datas_by_name)) {\n\t\t\t\tlet attrib_values = lodash_flatten(this._attribute_values_for_name(attrib_name));\n\n\t\t\t\tconst data = this._attribute_datas_by_name[attrib_name];\n\t\t\t\tconst size = data.size();\n\n\t\t\t\tif (data.type() === CoreConstant.ATTRIB_TYPE.STRING) {\n\t\t\t\t\t// const index_data = CoreAttribute.array_to_indexed_arrays(\n\t\t\t\t\t// \tattrib_values as string[]\n\t\t\t\t\t// )\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options.do_convert &&\n\t\t\t\t\t\tCoreString.matches_one_mask(attrib_name, convert_to_numeric_masks)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst numerical_attrib_values: number[] = attrib_values.map((v) => {\n\t\t\t\t\t\t\tif (lodash_isString(v)) {\n\t\t\t\t\t\t\t\treturn parseFloat(v) || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t\t\tattrib_name,\n\t\t\t\t\t\t\tnew THREE.Float32BufferAttribute(numerical_attrib_values, size)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(attrib_values as string[]);\n\t\t\t\t\t\tcore_geo.set_indexed_attribute(attrib_name, index_data['values'], index_data['indices']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst numerical_attrib_values = attrib_values as number[];\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new THREE.Float32BufferAttribute(numerical_attrib_values, size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Points(geometry, CoreConstant.MATERIALS[THREE.Points.name]);\n\t}\n\n\tprivate _find_attributes() {\n\t\tlet first_pt;\n\n\t\tconst masks = CoreString.attrib_names(this._options.skip_entries || '');\n\n\t\tif (this._json) {\n\t\t\tif ((first_pt = this._json[0]) != null) {\n\t\t\t\tfor (let attrib_name of Object.keys(first_pt)) {\n\t\t\t\t\tconst attrib_value = first_pt[attrib_name];\n\n\t\t\t\t\tif (this._value_has_subentries(attrib_value)) {\n\t\t\t\t\t\tfor (let key of Object.keys(attrib_value)) {\n\t\t\t\t\t\t\tconst deep_attrib_name = [attrib_name, key].join(DEEP_ATTRIB_SEPARATOR);\n\t\t\t\t\t\t\tconst deep_attrib_value = attrib_value[attrib_name];\n\n\t\t\t\t\t\t\tif (!CoreString.matches_one_mask(deep_attrib_name, masks)) {\n\t\t\t\t\t\t\t\tthis._attribute_datas_by_name[deep_attrib_name] = CoreAttributeData.from_value(\n\t\t\t\t\t\t\t\t\tdeep_attrib_value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!CoreString.matches_one_mask(attrib_name, masks)) {\n\t\t\t\t\t\t\tthis._attribute_datas_by_name[attrib_name] = CoreAttributeData.from_value(attrib_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _attribute_values_for_name(attrib_name: string): StringOrNumber[] {\n\t\tif (this._json) {\n\t\t\treturn this._json.map((json_element: Dictionary<any>) => {\n\t\t\t\tconst prefix = attrib_name.split(DEEP_ATTRIB_SEPARATOR)[0];\n\t\t\t\tconst value = json_element[prefix];\n\t\t\t\tif (this._value_has_subentries(value)) {\n\t\t\t\t\tconst deep_attrib_name = attrib_name.substring(prefix.length + 1);\n\t\t\t\t\treturn value[deep_attrib_name] || 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn value || 0;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t_value_has_subentries(value: any): boolean {\n\t\treturn lodash_isObject(value) && !lodash_isArray(value);\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\tgeometryPending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {CoreGeometry} from '../Geometry'\n// import lodash_range from 'lodash/range'\nimport lodash_flatten from 'lodash/flatten'\nimport lodash_intersection from 'lodash/intersection'\nimport lodash_concat from 'lodash/concat'\n\nexport class CoreGeometryOperationSkin {\n\tconstructor(\n\t\tprivate geometry: BufferGeometry,\n\t\tprivate geometry1: BufferGeometry,\n\t\tprivate geometry0: BufferGeometry\n\t) {}\n\n\tprocess() {\n\t\tconst geometry_wrapper0 = new CoreGeometry(this.geometry0)\n\t\tconst geometry_wrapper1 = new CoreGeometry(this.geometry1)\n\t\tconst segments0 = geometry_wrapper0.segments()\n\t\tconst segments1 = geometry_wrapper1.segments()\n\n\t\tif (segments0.length === 0 || segments1.length === 0) {\n\t\t\treturn\n\t\t}\n\t\t// find smallest geo to iterate on its array\n\t\tconst geometries_by_segments_count =\n\t\t\tsegments0.length < segments1.length\n\t\t\t\t? [geometry_wrapper0, geometry_wrapper1]\n\t\t\t\t: [geometry_wrapper1, geometry_wrapper0]\n\n\t\tconst smallest_geometry = geometries_by_segments_count[0]\n\t\tconst largest_geometry = geometries_by_segments_count[1]\n\n\t\tconst smallest_segments = smallest_geometry.segments()\n\t\tconst largest_segments = largest_geometry.segments()\n\n\t\tconst smallest_points = smallest_geometry.points()\n\t\tconst largest_points = largest_geometry.points()\n\t\tconst smallest_points_count = smallest_points.length\n\t\t// const largest_points_count = largest_points.length;\n\t\tconst all_points = lodash_concat(smallest_points, largest_points)\n\n\t\t// const half_faces_count = smallest_segments.length;\n\t\tconst points_indices: number[] = []\n\t\tsmallest_segments.forEach((segment, i) => {\n\t\t\tconst matched_segment = largest_segments[i]\n\t\t\t// face 1\n\t\t\tpoints_indices.push(segment[0])\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t\t// face 2\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[1] + smallest_points_count)\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t})\n\n\t\tconst attributes_in_common = lodash_intersection(\n\t\t\tsmallest_geometry.attrib_names(),\n\t\t\tlargest_geometry.attrib_names()\n\t\t)\n\t\t// const points = all_points //points_indices.map(index=> all_points[index]);\n\t\tattributes_in_common.forEach((attrib_name) => {\n\t\t\tconst attrib_size = smallest_geometry.attrib_size(attrib_name)\n\t\t\tlet attrib_values = all_points.map((point) =>\n\t\t\t\tpoint.attrib_value(attrib_name)\n\t\t\t)\n\t\t\tif (attrib_size > 1) {\n\t\t\t\tattrib_values = lodash_flatten(\n\t\t\t\t\tattrib_values.map((v) => v.toArray())\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.geometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew Float32BufferAttribute(attrib_values, attrib_size)\n\t\t\t)\n\t\t})\n\n\t\t// const new_indices = lodash_range(points.length);\n\t\tthis.geometry.setIndex(points_indices)\n\t\tthis.geometry.computeVertexNormals()\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonImporter} from './Node';\n// import {BaseNodeObjJsonImporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonImporter} from './node/Subnetwork';\n\nimport {ParamJsonImporter} from './Param';\nimport {ParamMultipleJsonImporter} from './param/Multiple';\nimport {ParamStringJsonImporter} from './param/String';\nimport {ParamRampJsonImporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\nimport {TypedMultipleParam} from '../../../params/_Multiple';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonImportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonImporter(node);\n\t\t// }\n\t\treturn new NodeJsonImporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\tif (param instanceof TypedMultipleParam) {\n\t\t\treturn new ParamMultipleJsonImporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonImporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonImporter(param);\n\t\t}\n\t\treturn new ParamJsonImporter(param);\n\t}\n}\n\n// export class CodeImporterVisitor {\n// \tstatic node(node: BaseNode): NodeCodeImporter {\n// \t\treturn new NodeCodeImporter(node);\n// \t}\n// \tstatic node_obj(node: BaseNode) {\n// \t\treturn new BaseNodeObjCodeImporter(node);\n// \t}\n// \tstatic node_sop_subnetwork(node: BaseNode) {\n// \t\treturn new BaseNodeSopSubnetworkCodeImporter(node);\n// \t}\n\n// \tstatic visit_param(param: BaseParam) {\n// \t\treturn new ParamCodeImporter(param);\n// \t}\n// \tstatic param_multiple(param: BaseParam) {\n// \t\treturn new ParamMultipleCodeImporter(param);\n// \t}\n// \tstatic param_numeric(param: BaseParam) {\n// \t\treturn new ParamNumericCodeImporter(param);\n// \t}\n// \tstatic param_operator_path(param: BaseParam) {\n// \t\treturn new ParamOperatorPathCodeImporter(param);\n// \t}\n// \tstatic param_string(param: BaseParam) {\n// \t\treturn new ParamStringCodeImporter(param);\n// \t}\n// \tstatic param_ramp(param: BaseParam) {\n// \t\treturn new ParamRampCodeImporter(param);\n// \t}\n// }\n","import {PolyScene} from './scene/PolyScene';\nimport {AllRegister} from './poly/registers/All';\nAllRegister.run();\n\nimport {SceneJsonExporter, SceneJsonExporterData} from './io/json/export/Scene';\nimport default_scene_data from '../../public/examples/scenes/default_simple.json';\nimport {SceneJsonImporter} from './io/json/import/Scene';\n\nexport class Tester {\n\tstatic async load_scene() {\n\t\tconst scene = await SceneJsonImporter.load_data(default_scene_data as SceneJsonExporterData);\n\n\t\treturn scene;\n\t}\n\tstatic create_scene() {\n\t\tconst scene = new PolyScene();\n\t\tscene.root.create_node('ambient_light');\n\n\t\tscene.loading_controller.mark_as_loaded();\n\n\t\tconst perspective_camera1 = scene.root.create_node('perspective_camera');\n\t\tscene.cameras_controller.set_master_camera_node_path(perspective_camera1.full_path());\n\t\tperspective_camera1.p.t.z.set(10);\n\n\t\tconst geo1 = scene.root.create_node('geo');\n\t\tgeo1.flags.display.set(true);\n\t\tconst box1 = geo1.create_node('box');\n\t\tbox1.flags.display.set(true);\n\t\tgeo1.p.r.y.set('$F+20');\n\n\t\treturn scene;\n\t}\n\n\tstatic async test_save_and_load(scene: PolyScene) {\n\t\tconst data = new SceneJsonExporter(scene).data();\n\t\tconsole.log(JSON.stringify(data));\n\t\tconst scene2 = await SceneJsonImporter.load_data(data);\n\t\tconst data2 = new SceneJsonExporter(scene2).data();\n\t\tconsole.log(JSON.stringify(data2));\n\t}\n}\n\nconst stylesheet = document.createElement('style');\nstylesheet.innerText = 'html, body, canvas, .canvas_container {height: 100%; margin: 0px;} canvas {display: block;}';\ndocument.body.appendChild(stylesheet);\nconst container = document.createElement('div');\ncontainer.classList.add('canvas_container');\ndocument.body.appendChild(container);\n\nTester.load_scene().then((scene) => {\n\t(window as any).scene = scene;\n\tscene.cameras_controller.master_camera_node?.create_viewer(container);\n\tscene.play();\n});\n\n// Tester.test_save_and_load(scene);\n","import {PolyScene} from '../PolyScene';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\n\nexport class CamerasController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_master_camera_node_path: string | null = null;\n\n\tset_master_camera_node_path(camera_node_path: string) {\n\t\tthis._master_camera_node_path = camera_node_path;\n\t}\n\tget master_camera_node_path() {\n\t\treturn this._master_camera_node_path;\n\t}\n\tget master_camera_node(): BaseCameraObjNodeType | null {\n\t\tif (this.master_camera_node_path) {\n\t\t\tconst camera_node = this.scene.node(this.master_camera_node_path) as BaseCameraObjNodeType | null;\n\t\t\treturn camera_node;\n\t\t} else {\n\t\t\tconsole.warn('master camera node not found');\n\t\t\treturn this._find_any_camera();\n\t\t}\n\t}\n\n\tprivate _find_any_camera(): BaseCameraObjNodeType | null {\n\t\tconst root = this.scene.root;\n\t\treturn root.nodes_by_type('perspective_camera')[0] || root.nodes_by_type('orthographic_camera')[0];\n\t}\n}\n","// import {CoreGraphNode} from './CoreGraphNode';\n// import { CoreGraphNodeScene } from './CoreGraphNodeScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../PolyScene';\n\n// interface CookerQueue {\n// \t[propName: string]: CoreGraphNodeSceneNamed;\n// }\n\nexport class Cooker {\n\tprivate _queue: Map<string, CoreGraphNode | undefined> = new Map<string, CoreGraphNode | undefined>();\n\tprivate _block_level: number = 0;\n\tprivate _process_item_bound = this._process_item.bind(this);\n\n\tconstructor(private _scene: PolyScene) {\n\t\tthis._block_level = 0;\n\t}\n\n\tblock() {\n\t\tthis._block_level += 1;\n\t}\n\tunblock() {\n\t\tthis._block_level -= 1;\n\t\tif (this._block_level < 0) {\n\t\t\tthis._block_level = 0;\n\t\t}\n\n\t\tthis.process_queue();\n\t}\n\t// unblock_later: ->\n\t// \tsetTimeout( this.unblock.bind(this), 0 )\n\tget blocked() {\n\t\treturn this._block_level > 0;\n\t}\n\n\tenqueue(node: CoreGraphNode, original_trigger_graph_node?: CoreGraphNode) {\n\t\tthis._queue.set(node.graph_node_id, original_trigger_graph_node);\n\t}\n\n\tprocess_queue() {\n\t\tif (this.blocked) {\n\t\t\treturn;\n\t\t}\n\t\t// let node: CoreGraphNode;\n\t\t// console.warn('FLUSH', Object.keys(this._queue).length);\n\n\t\tthis._queue.forEach(this._process_item_bound);\n\t\t// for (let id of Object.keys(this._queue)) {\n\t\t// \tnode = this._queue[id];\n\t\t// \tif (node) {\n\t\t// \t\tdelete this._queue[id];\n\t\t// \t\tnode.dirty_controller.run_post_dirty_hooks();\n\t\t// \t}\n\t\t// }\n\t}\n\tprivate _process_item(original_trigger_graph_node: CoreGraphNode | undefined, id: string) {\n\t\tconst node = this._scene.graph.node_from_id(id);\n\t\tif (node) {\n\t\t\tthis._queue.delete(id);\n\t\t\tnode.dirty_controller.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t}\n\t}\n}\n","import {Graph, alg} from '@dagrejs/graphlib';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {NodeSimple} from './NodeSimple'\n// import {GraphNode} from './concerns/GraphNode'\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// class DummyClass {}\n// class GraphNodeDummy extends Dirtyable(DummyClass) {}\n\n// TODO: typescript, using ids with a specific type (https://basarat.gitbook.io/typescript/main-1/nominaltyping)\n// export interface CoreGraphNodeId extends String {\n// \t// _CoreGraphNodeIdBrand: string;\n// }\nexport type CoreGraphNodeId = string;\nimport {CoreGraphNode} from './CoreGraphNode';\n\nexport class CoreGraph {\n\t_graph: Graph;\n\t_next_id: number = 0;\n\t_scene: PolyScene | undefined;\n\n\tconstructor() {\n\t\tthis._graph = new Graph({\n\t\t\tdirected: true,\n\t\t\tcompound: false,\n\t\t\tmultigraph: true,\n\t\t});\n\t}\n\n\tgraph() {\n\t\treturn this._graph;\n\t}\n\tset_scene(scene: PolyScene) {\n\t\tthis._scene = scene;\n\t}\n\tscene() {\n\t\treturn this._scene;\n\t}\n\n\tnext_id(): CoreGraphNodeId {\n\t\treturn (<unknown>`${(this._next_id += 1)}`) as CoreGraphNodeId;\n\t}\n\n\tsetNode(node: CoreGraphNode) {\n\t\tthis._graph.setNode(node.graph_node_id, node);\n\t}\n\n\tremoveNode(node: CoreGraphNode) {\n\t\tthis._graph.removeNode(node.graph_node_id);\n\t}\n\n\tnodes_from_ids(ids: string[]) {\n\t\tconst nodes: CoreGraphNode[] = [];\n\t\tfor (let id of ids) {\n\t\t\tconst node = this.node_from_id(id);\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t\t// if (ids) {\n\t\t// \tlet node: any;\n\t\t// \treturn ids.map((id) => {\n\t\t// \t\tif ((node = this.node_from_id(id)) != null) {\n\t\t// \t\t\treturn node;\n\t\t// \t\t} else {\n\t\t// \t\t\treturn console.warn(`could not find node with id ${id}`);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// } else {\n\t\t// \treturn [];\n\t\t// }\n\t}\n\t// TODO: typescript: this should return CoreGraphNodeId|null\n\tnode_from_id(id: string): CoreGraphNode {\n\t\treturn this._graph.node(id);\n\t}\n\n\tconnect(src: CoreGraphNode, dest: CoreGraphNode): boolean {\n\t\tconst src_id = src.graph_node_id;\n\t\tconst dest_id = dest.graph_node_id;\n\n\t\tif (this._graph.hasNode(src_id) && this._graph.hasNode(dest_id)) {\n\t\t\tthis._graph.setEdge(src_id, dest_id);\n\n\t\t\t// const scene_auto_updating = this.scene().auto_updating();\n\t\t\tconst scene_loading = this._scene ? this._scene.loading_controller.is_loading : true;\n\t\t\tconst check_if_graph_has_cycle = !scene_loading;\n\t\t\tlet graph_has_cycle = false;\n\t\t\tif (check_if_graph_has_cycle) {\n\t\t\t\tgraph_has_cycle = !alg.isAcyclic(this._graph);\n\t\t\t}\n\n\t\t\tif (graph_has_cycle) {\n\t\t\t\tthis._graph.removeEdge(src_id, dest_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`attempt to connect non existing node ${src_id} or ${dest_id}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisconnect(src: CoreGraphNode, dest: CoreGraphNode) {\n\t\tif (src && dest) {\n\t\t\tconst src_id_s = src.graph_node_id;\n\t\t\tconst dest_id_s = dest.graph_node_id;\n\t\t\tthis._graph.removeEdge(src_id_s, dest_id_s);\n\n\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\t\t}\n\t}\n\tdisconnect_predecessors(node: CoreGraphNode) {\n\t\tconst predecessors = this.predecessors(node);\n\t\tfor (let predecessor of predecessors) {\n\t\t\tthis.disconnect(predecessor, node);\n\t\t}\n\t}\n\tdisconnect_successors(node: CoreGraphNode) {\n\t\tconst successors = this.successors(node);\n\t\tfor (let successor of successors) {\n\t\t\tthis.disconnect(node, successor);\n\t\t}\n\t}\n\t// disconnect_predecessors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst predecessor_ids = this._graph.predecessors(node_id);\n\t// \tif( predecessor_ids ){\n\t// \t\tfor(let predecessor_id of predecessor_ids){\n\t// \t\t\tthis._graph.removeEdge(predecessor_id, node_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// disconnect_successors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst successor_ids = this._graph.successors(node_id);\n\t// \tif (successor_ids) {\n\t// \t\tfor(let successor_id of successor_ids){\n\t// \t\t\tthis._graph.removeEdge(node_id, successor_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tpredecessor_ids(id: CoreGraphNodeId) {\n\t\treturn this._graph.predecessors(id) || [];\n\t}\n\tpredecessors(node: CoreGraphNode) {\n\t\tconst ids = this.predecessor_ids(node.graph_node_id);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tsuccessor_ids(id: string): CoreGraphNodeId[] {\n\t\treturn this._graph.successors(id) || [];\n\t}\n\tsuccessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.successor_ids(node.graph_node_id) || [];\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\n\tprivate all_next_ids(node: CoreGraphNode, method: 'successor_ids' | 'predecessor_ids'): CoreGraphNodeId[] {\n\t\tconst ids: CoreGraphNodeId[] = [];\n\t\tlet next_ids = this[method](node.graph_node_id);\n\n\t\twhile (next_ids.length > 0) {\n\t\t\tconst next_next_ids = [];\n\t\t\tfor (let next_id of next_ids) {\n\t\t\t\tfor (let next_next_id of this[method](next_id)) {\n\t\t\t\t\tnext_next_ids.push(next_next_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let id of next_ids) {\n\t\t\t\tids.push(id);\n\t\t\t}\n\t\t\tfor (let id of next_next_ids) {\n\t\t\t\tnext_ids.push(id);\n\t\t\t}\n\t\t\tnext_ids = next_next_ids;\n\t\t}\n\t\treturn ids;\n\t}\n\tall_predecessor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'predecessor_ids');\n\t}\n\tall_successor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'successor_ids');\n\t}\n\tall_predecessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_predecessor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tall_successors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_successor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\n\ntype Callback = (value: void) => void;\n\nexport class CookController {\n\tprivate _cooking_nodes_by_id: Map<string, BaseNodeType> = new Map();\n\tprivate _resolves: Callback[] = [];\n\tconstructor() {}\n\n\tadd_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.set(node.graph_node_id, node);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.delete(node.graph_node_id);\n\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tprivate flush() {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync wait_for_cooks_completed(): Promise<void> {\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport '../../Poly';\nimport {POLY} from '../../Poly';\nimport {SceneEvent} from '../../poly/SceneEvent';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\n// type Callback = (emitter: CoreGraphNodeScene) => void; // TODO: typescript: maybe arg should be an event instead of the emitter\ninterface EventsListener {\n\tprocess_events: (emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) => void;\n}\n\nexport class EventsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _events_listener: EventsListener | undefined;\n\n\tset_listener(events_listener: EventsListener) {\n\t\tthis._events_listener = events_listener;\n\t\t// this._store.scene = this;\n\t}\n\tget events_listener() {\n\t\treturn this._events_listener;\n\t}\n\tdispatch(emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) {\n\t\tthis._events_listener?.process_events(emitter, event_name, data);\n\t}\n\tget emit_allowed(): boolean {\n\t\treturn (\n\t\t\tthis.scene.loading_controller.loaded &&\n\t\t\tthis._events_listener != null &&\n\t\t\tthis.scene.loading_controller.auto_updating &&\n\t\t\t!POLY.player_mode() // TODO: typecript: maybe I should still be able to emit events in player mode? - check how the Event Sop works\n\t\t);\n\t}\n\t// store_commit(event_name: string, payload: any = this) {\n\t// \tif (this._store) {\n\t// \t\tthis._store.commit(`engine/${event_name}`, payload);\n\t// \t}\n\t// }\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter, LinearEncoding, HalfFloatType} from 'three/src/constants'\n// import EquirectangularToCubeGenerator from 'src/core/Utils/EquirectangularToCubeGenerator';\n// import PMREMGenerator from 'src/core/Utils/PMREMGenerator';\n// import PMREMCubeUVPacker from 'src/core/Utils/PMREMCubeUVPacker';\n\ninterface RendererByString {\n\t[propName: string]: WebGLRenderer;\n}\ninterface TextureByString {\n\t[propName: string]: Texture;\n}\n\ninterface POLYWebGLRenderer extends WebGLRenderer {\n\t_polygon_id: number;\n}\n\nconst CONTEXT_OPTIONS = {\n\tantialias: true,\n};\n\ntype Callback = (value: WebGLRenderer) => void;\n\nexport class RenderersController {\n\t_next_renderer_id: number = 0;\n\t_next_env_map_id: number = 0;\n\t_renderers: RendererByString = {};\n\t_env_maps: TextureByString = {};\n\tprivate _require_webgl2: boolean = false;\n\tprivate _resolves: Callback[] = [];\n\n\tconstructor() {}\n\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t}\n\t}\n\trendering_context(canvas: HTMLCanvasElement): WebGLRenderingContext {\n\t\tlet gl: WebGLRenderingContext | null = null;\n\t\tif (this._require_webgl2) {\n\t\t\tgl = this._rendering_context_webgl(canvas, true);\n\t\t}\n\t\tif (!gl) {\n\t\t\tgl = this._rendering_context_webgl(canvas, false);\n\t\t}\n\n\t\t// gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)\n\t\t// to test data texture\n\t\t// gl.getExtension('OES_texture_float')\n\t\t// gl.getExtension('OES_texture_float_linear')\n\n\t\treturn gl;\n\t}\n\tprivate _rendering_context_webgl(canvas: HTMLCanvasElement, webgl2: boolean): WebGLRenderingContext {\n\t\tlet context_name = webgl2 ? 'webgl2' : 'webgl';\n\t\tlet gl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\tif (!gl) {\n\t\t\tcontext_name = webgl2 ? 'experimental-webgl2' : 'experimental-webgl';\n\t\t\tgl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\t}\n\t\treturn gl as WebGLRenderingContext;\n\t}\n\t// private _rendering_context_webgl(\n\t// \tcanvas: HTMLCanvasElement\n\t// ): WebGLRenderingContext {\n\t// \tlet gl = canvas.getContext('webgl', CONTEXT_OPTIONS)\n\t// \tif (!gl) {\n\t// \t\tgl = canvas.getContext('experimental-webgl', CONTEXT_OPTIONS)\n\t// \t}\n\t// \treturn gl as WebGLRenderingContext\n\t// }\n\n\tregister_renderer(renderer: WebGLRenderer) {\n\t\tif ((renderer as POLYWebGLRenderer)._polygon_id) {\n\t\t\tthrow new Error('render already registered');\n\t\t}\n\t\t(renderer as POLYWebGLRenderer)._polygon_id = this._next_renderer_id += 1;\n\n\t\t// there is a bug where 2 renderers are created from the beginning\n\t\t// because the from_json of the viewer_component is called after\n\t\t// the camera being set for the first time\n\t\t// console.log(\"register renderer\", renderer, renderer._polygon_id)\n\n\t\t// this is being tested in PostProcess\n\t\t// const canvas = renderer.domElement\n\t\t// const gl = canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' )\n\t\t// const extension_exist = gl.getExtension('OES_standard_derivatives')\n\t\t// if(!extension_exist){\n\t\t// \tconsole.warn(\"renderers controller: gl extension not available\")\n\t\t// }\n\n\t\tthis._renderers[(renderer as POLYWebGLRenderer)._polygon_id] = renderer;\n\n\t\tif (Object.keys(this._renderers).length == 1) {\n\t\t\tthis.flush_callbacks_with_renderer(renderer);\n\t\t}\n\t}\n\tderegister_renderer(renderer: WebGLRenderer) {\n\t\tdelete this._renderers[(renderer as POLYWebGLRenderer)._polygon_id];\n\t\trenderer.dispose();\n\t}\n\tprivate first_renderer(): WebGLRenderer | null {\n\t\tconst first_id = Object.keys(this._renderers)[0];\n\t\tif (first_id) {\n\t\t\treturn this._renderers[first_id];\n\t\t}\n\t\treturn null;\n\t}\n\trenderers(): WebGLRenderer[] {\n\t\treturn Object.values(this._renderers);\n\t}\n\n\tprivate flush_callbacks_with_renderer(renderer: WebGLRenderer) {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback(renderer);\n\t\t}\n\t}\n\n\tasync wait_for_renderer(): Promise<WebGLRenderer> {\n\t\tconst renderer = this.first_renderer();\n\t\tif (renderer) {\n\t\t\treturn renderer;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n\n\t// async register_env_map(env_map: Texture){\n\t// \tconsole.log(\"register_env_map\", env_map)\n\t// \tif(env_map._polygon_id){\n\t// \t\tthrow new Error('cube_map already registered')\n\t// \t}\n\t// \tconst texture = await this.prepare_env_map(env_map)\n\t// \ttexture._polygon_id = (this._next_env_map_id += 1)\n\t// \tthis._env_maps[texture._polygon_id] = texture\n\t// \treturn texture\n\t// }\n\t// deregister_env_map(env_map: Texture){\n\t// \tconsole.log(\"deregister_env_map\", env_map)\n\t// \tdelete this._env_maps[env_map._polygon_id]\n\t// \tenv_map.dispose()\n\t// }\n\n\t// private async prepare_env_map(texture: Texture): Texture{\n\t// \ttexture.minFilter = NearestFilter;\n\t// \ttexture.magFilter = NearestFilter;\n\t// \ttexture.encoding = LinearEncoding;\n\n\t// \tawait CoreScriptLoader.load_three('loaders/EXRLoader')\n\t// \tawait CoreScriptLoader.load_three('loaders/EquirectangularToCubeGenerator')\n\t// \tconst EquirectangularToCubeGenerator_name = 'EquirectangularToCubeGenerator'\n\t// \tconst PMREMGenerator_name = 'PMREMGenerator'\n\t// \tconst PMREMCubeUVPacker_name = 'PMREMCubeUVPacker'\n\n\t// \tconst cubemapGenerator = new THREE[EquirectangularToCubeGenerator_name]( texture, { resolution: 512, type: HalfFloatType } );\n\n\t// \tconst renderer = this.first_renderer()\n\t// \tif(renderer){\n\t// \t\tconst cubeMapTexture = cubemapGenerator.update( renderer );\n\n\t// \t\tconst pmremGenerator = new THREE[PMREMGenerator_name]( cubeMapTexture );\n\t// \t\tpmremGenerator.update( renderer );\n\n\t// \t\tconst pmremCubeUVPacker = new THREE[PMREMCubeUVPacker_name]( pmremGenerator.cubeLods );\n\t// \t\tpmremCubeUVPacker.update( renderer );\n\n\t// \t\trenderer.gammaInput = false;\n\t// \t\trenderer.gammaOutput = true;\n\n\t// \t\tconst exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;\n\n\t// \t\ttexture.dispose();\n\t// \t\tcubemapGenerator.dispose();\n\t// \t\tpmremGenerator.dispose();\n\t// \t\tpmremCubeUVPacker.dispose();\n\n\t// \t\treturn exrCubeRenderTarget.texture;\n\t// \t}\n\t// }\n}\n","import {BaseNodeClass} from '../nodes/_Base';\nimport {NodeContext} from './NodeContext';\n\nexport interface RegisterOptions {\n\tonly?: string[];\n\texcept?: string[];\n}\n\n// export interface BaseNodeConstructor {\n// \tnew (): BaseNode;\n// }\n\nexport type BaseNodeConstructor = typeof BaseNodeClass;\ntype NodeConstructorByType = Dictionary<BaseNodeConstructor>;\ntype NodeConstructorByTypeByContext = Dictionary<NodeConstructorByType>;\ntype TabMenuByTypeByContext = Dictionary<Dictionary<string>>;\ntype RegisterOptionsByTypeByContext = Dictionary<Dictionary<RegisterOptions>>;\n\nexport class NodesRegister {\n\tprivate _node_register: NodeConstructorByTypeByContext = {};\n\tprivate _node_register_categories: TabMenuByTypeByContext = {};\n\tprivate _node_register_options: RegisterOptionsByTypeByContext = {};\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type();\n\t\tthis._node_register[context] = this._node_register[context] || {};\n\n\t\tconst already_registered_node = this._node_register[context][node_type];\n\t\tif (already_registered_node) {\n\t\t\tthrow new Error(`node ${context}/${node_type} already registered`);\n\t\t}\n\t\tthis._node_register[context][node_type] = node;\n\n\t\tif (tab_menu_category) {\n\t\t\tthis._node_register_categories[context] = this._node_register_categories[context] || {};\n\t\t\tthis._node_register_categories[context][node_type] = tab_menu_category;\n\t\t}\n\t\tthis._node_register_options[context] = this._node_register_options[context] || {};\n\t\tif (options) {\n\t\t\tthis._node_register_options[context][node_type] = options;\n\t\t}\n\t}\n\tderegister_node(context: string, node_type: string) {\n\t\tdelete this._node_register[context][node_type];\n\t\tdelete this._node_register_categories[context][node_type];\n\t\tdelete this._node_register_options[context][node_type];\n\t}\n\tregistered_nodes_for_context_and_parent_type(context: NodeContext, parent_node_type: string) {\n\t\tconst map = this._node_register[context];\n\t\tif (map) {\n\t\t\tconst nodes_for_context = Object.values(this._node_register[context]);\n\t\t\treturn nodes_for_context.filter((node) => {\n\t\t\t\tconst options = this._node_register_options[context][node.type()];\n\t\t\t\tif (!options) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconst option_only = options['only'];\n\t\t\t\t\tconst option_except = options['except'];\n\t\t\t\t\tconst context_and_type = `${context}/${parent_node_type}`;\n\t\t\t\t\tif (option_only) {\n\t\t\t\t\t\treturn option_only.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t\tif (option_except) {\n\t\t\t\t\t\treturn !option_except.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !options || options['only']?.includes(parent_node_type);\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tregistered_nodes(context: NodeContext, parent_node_type: string): Dictionary<BaseNodeConstructor> {\n\t\tconst nodes_by_type: Dictionary<BaseNodeConstructor> = {};\n\t\tconst nodes = this.registered_nodes_for_context_and_parent_type(context, parent_node_type);\n\t\tfor (let node of nodes) {\n\t\t\tconst type = node.type();\n\t\t\tnodes_by_type[type] = node;\n\t\t}\n\t\treturn nodes_by_type;\n\t}\n\tregistered_category(context: NodeContext, type: string) {\n\t\treturn this._node_register_categories[context][type];\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LifeCycleController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _lifecycle_on_create_allowed: boolean = true;\n\n\ton_create_hook_allowed(): boolean {\n\t\treturn this.scene.loading_controller.loaded && this._lifecycle_on_create_allowed;\n\t}\n\n\ton_create_prevent(callback: () => void) {\n\t\tthis._lifecycle_on_create_allowed = false;\n\t\tcallback();\n\t\tthis._lifecycle_on_create_allowed = true;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LoadingController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_loading_state: boolean = true;\n\t_auto_updating: boolean = true;\n\t_first_object_loaded: boolean = false;\n\n\tmark_as_loading() {\n\t\tthis._set_loading_state(true);\n\t}\n\tasync mark_as_loaded() {\n\t\tawait this._set_loading_state(false);\n\t\t// POLY.notify_scene_loaded(this.scene);\n\t\t// this.cooker().block()\n\t\t// this.root().set_children_dirty_without_propagation()\n\t\t// this.cooker().unblock()\n\t}\n\tprivate async _set_loading_state(state: boolean) {\n\t\tthis._loading_state = state;\n\t\tawait this.set_auto_update(!this._loading_state);\n\t}\n\tget is_loading() {\n\t\treturn this._loading_state;\n\t}\n\tget loaded() {\n\t\treturn !this._loading_state;\n\t}\n\tget auto_updating() {\n\t\treturn this._auto_updating;\n\t} // _init_auto_update: ->\n\t// \tthis.set_auto_update(true)\n\tasync set_auto_update(new_state: boolean) {\n\t\tif (this._auto_updating !== new_state) {\n\t\t\tthis._auto_updating = new_state;\n\t\t\tif (this._auto_updating) {\n\t\t\t\t// if this.env_is_development()\n\t\t\t\t// \tthis.performance().start()\n\n\t\t\t\tconst root = this.scene.root;\n\t\t\t\tif (root) {\n\t\t\t\t\tawait root.process_queue();\n\t\t\t\t\t// const c = async () => {\n\t\t\t\t\t// \tawait root.process_queue();\n\t\t\t\t\t// };\n\t\t\t\t\t// setTimeout(c, 50);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if (callback != null) { callback(); }\n\t\t\t}\n\t\t} else {\n\t\t\t// if (callback != null) { callback(); }\n\t\t}\n\t}\n\n\ton_first_object_loaded() {\n\t\tif (!this._first_object_loaded) {\n\t\t\tthis._first_object_loaded = true;\n\n\t\t\tconst loader = document.getElementById('scene_loading_container');\n\t\t\tif (loader) {\n\t\t\t\tloader.parentElement?.removeChild(loader);\n\t\t\t}\n\t\t}\n\t}\n\n\t// on_all_objects_loaded() {\n\t// \t// POLY.viewer_loaders_manager().dipose_loaders()\n\t// }\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class ExpressionsController {\n\tprivate _params_by_id: Map<string, BaseParamType> = new Map();\n\tconstructor() {}\n\n\tregister_param(param: BaseParamType) {\n\t\tthis._params_by_id.set(param.graph_node_id, param);\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis._params_by_id.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\tregenerate_referring_expressions(node: BaseNodeType) {\n\t\tnode.name_controller.graph_node.set_successors_dirty(node);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {MissingExpressionReference} from '../../expressions/MissingReference';\nimport jsep from 'jsep';\nimport {MapUtils} from '../../../core/MapUtils';\n\n// type MissingExpressionReferenceById = Map<number, MissingExpressionReference>;\n// type MissingExpressionReferenceByIdByPath = Map<string, MissingExpressionReferenceById>;\n\nexport class MissingReferencesController {\n\tprivate references: Map<string, MissingExpressionReference[]> = new Map<string, MissingExpressionReference[]>();\n\n\tregister(param: BaseParamType, jsep_node: jsep.Expression, path_argument: string): MissingExpressionReference {\n\t\tconst missing_expression_reference = new MissingExpressionReference(param, path_argument);\n\n\t\tMapUtils.push_on_array_at_entry(this.references, param.graph_node_id, missing_expression_reference);\n\n\t\treturn missing_expression_reference;\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis.references.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t// MISSING REFERENCES\n\t//\n\t//\n\t// call this from node.create and node.rename\n\tcheck_for_missing_references(node: BaseNodeType) {\n\t\tthis._check_for_missing_references_for_node(node);\n\t\tfor (let param of node.params.all) {\n\t\t\tthis._check_for_missing_references_for_param(param);\n\t\t}\n\t}\n\tprivate _check_for_missing_references_for_node(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(node.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n\tprivate _check_for_missing_references_for_param(param: BaseParamType) {\n\t\tconst id = param.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(param.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import jsep from 'jsep';\nimport {CoreWalker} from '../../core/Walker';\n\nexport class MissingExpressionReference {\n\tconstructor(private param: BaseParamType /*, private jsep_node: jsep.Expression*/, public path: string) {\n\t\t// console.log(this.jsep_node, this.param); // TODO: typescript, to not have the missing ref\n\t}\n\n\tmatches_path(path: string): boolean {\n\t\tconst absolute = CoreWalker.make_absolute_path(this.param.node, this.path);\n\t\treturn absolute == path;\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.param.expression_controller?.update_from_method_dependency_name_change();\n\t}\n\n\tresolve_missing_dependencies() {\n\t\tconst input = this.param.raw_input_serialized;\n\t\tthis.param.set(this.param.default_value);\n\t\tthis.param.set(input);\n\t\t// parse_expression_and_update_dependencies()\n\t}\n}\n\n// export class ReferenceSearchResult {\n// \tpublic found_graph_nodes: CoreGraphNode[] = [];\n// \tpublic missing_paths: string[] = [];\n\n// \tconstructor() {}\n// \tset_found_graph_nodes(graph_nodes: CoreGraphNode[]) {\n// \t\tthis.found_graph_nodes = graph_nodes;\n// \t}\n// \tset_missing_paths(paths: string[]) {\n// \t\tthis.missing_paths = paths;\n// \t}\n// }\n","import {PolyScene} from '../PolyScene';\n\nimport {Object3D} from 'three/src/core/Object3D';\nimport lodash_concat from 'lodash/concat';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_compact from 'lodash/compact';\nimport {ObjectsManagerNode} from '../../nodes/manager/ObjectsManager';\nimport {CoreString} from '../../../core/String';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {BaseObjNodeType} from '../../nodes/obj/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class NodesController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_root!: ObjectsManagerNode;\n\t_node_context_signatures: Dictionary<boolean> = {};\n\t_instanciated_nodes_by_context_and_type: Dictionary<Dictionary<Dictionary<BaseNodeType>>> = {};\n\n\tinit() {\n\t\tthis._root = new ObjectsManagerNode(this.scene);\n\t\tthis._root.initialize_base_and_node();\n\t\t// this._root.set_scene(this.scene);\n\t\tthis._root.init_display_scene();\n\t}\n\n\tget root() {\n\t\treturn this._root;\n\t}\n\tobjects_from_mask(mask: string): Object3D[] {\n\t\tconst masks = mask.split(' ');\n\t\t// let geos = this.root().nodes_by_type('geo') as BaseNodeObj[];\n\t\tlet nodes = this.root.children() as BaseObjNodeType[];\n\t\tnodes = nodes.filter((node) => CoreString.matches_one_mask(node.name, masks));\n\t\tconst objects = nodes.map((geo) => geo.object);\n\t\treturn lodash_compact(objects);\n\t}\n\tclear() {\n\t\tconst children = this.root.children();\n\t\tfor (let child of children) {\n\t\t\tthis.root.children_controller?.remove_node(child);\n\t\t}\n\t\t// return children.forEach(child=> {\n\t\t// \treturn this.root().remove_node(child);\n\t\t// });\n\t}\n\n\tnode(path: string) {\n\t\tif (path === '/') {\n\t\t\treturn this.root;\n\t\t} else {\n\t\t\treturn this.root.node(path);\n\t\t}\n\t}\n\tall_nodes() {\n\t\tlet nodes: BaseNodeType[] = [this.root];\n\t\tlet current_parents: BaseNodeType[] = [this.root];\n\t\tlet cmptr = 0;\n\t\twhile (current_parents.length > 0 && cmptr < 10) {\n\t\t\tconst children = lodash_flatten(\n\t\t\t\tcurrent_parents.map((current_parent) => {\n\t\t\t\t\tif (current_parent.children_allowed()) {\n\t\t\t\t\t\treturn current_parent.children();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tnodes = lodash_concat(nodes, children);\n\t\t\tcurrent_parents = children;\n\t\t\tcmptr += 1;\n\t\t}\n\t\treturn lodash_flatten(nodes);\n\t}\n\n\treset_node_context_signatures() {\n\t\tthis._node_context_signatures = {};\n\t}\n\tregister_node_context_signature(node: BaseNodeType) {\n\t\tif (node.children_allowed() && node.children_controller) {\n\t\t\tthis._node_context_signatures[node.children_controller.node_context_signature()] = true;\n\t\t}\n\t}\n\tnode_context_signatures() {\n\t\treturn Object.keys(this._node_context_signatures)\n\t\t\t.sort()\n\t\t\t.map((s) => s.toLowerCase());\n\t}\n\n\tadd_to_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tthis._instanciated_nodes_by_context_and_type[context] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id] = node;\n\t}\n\n\tremove_from_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tdelete this._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id];\n\t}\n\n\tinstanciated_nodes(context: NodeContext, node_type: string) {\n\t\tconst nodes = [];\n\t\tif (this._instanciated_nodes_by_context_and_type[context]) {\n\t\t\tconst nodes_by_ids = this._instanciated_nodes_by_context_and_type[context][node_type];\n\t\t\tif (nodes_by_ids) {\n\t\t\t\tfor (let id of Object.keys(nodes_by_ids)) {\n\t\t\t\t\tnodes.push(nodes_by_ids[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t}\n}\n","import {Group} from 'three/src/objects/Group';\n// import lodash_isEqual from 'lodash/isEqual';\n// import lodash_map from 'lodash/map';\n\nimport {TypedBaseManagerNode} from './_Base';\n// import {CoreObject} from '../../../core/Object';\n// import {BaseNode} from '../_Base';\nimport {BaseObjNodeType} from '../obj/_Base';\n\n// import {BaseManagerObjNode} from '../obj/_BaseManager';\n// import {BaseCameraObjNodeClass} from '../obj/_BaseCamera';\n// import {BaseLightObjNodeClass} from '../obj/_BaseLight';\n\n// obj nodes\n// import {EventsObjNode} from '../obj/Events';\n// import {MaterialsObjNode} from '../obj/Materials';\n// import {FogObjNode} from '../obj/Fog';\nimport {GeoObjNode} from '../obj/Geo';\n\nimport {POLY} from '../../Poly';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {PolyScene} from '../../scene/PolyScene';\n// TODO:\n// ensure removing a node removes its content from the scene (spotlight?)\n\nimport {ObjNodeChildrenMap} from '../../poly/registers/Obj';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nclass ObjectsManagerParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ObjectsManagerParamsConfig();\n\nexport class ObjectsManagerNode extends TypedBaseManagerNode<ObjectsManagerParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'obj';\n\t}\n\t// children_context() {\n\t// \treturn NodeContext.OBJ;\n\t// }\n\n\tprivate _object: Group = new Group();\n\tprivate _queued_nodes_by_id: Dictionary<BaseObjNodeType> = {};\n\tprivate _queued_nodes_by_path: Dictionary<BaseObjNodeType> = {};\n\tprivate _expected_geo_nodes: Dictionary<GeoObjNode> = {};\n\t// private _loaded_geo_node_by_id: Dictionary<boolean> = {};\n\tprivate _process_queue_start: number = -1;\n\n\tprotected _children_controller_context = NodeContext.OBJ;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.flags.add_display();\n\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add.bind(this));\n\t\tthis.lifecycle.add_on_child_remove_hook(this._on_child_remove.bind(this));\n\t\t// this.flags.add_bypass({has_bypass_flag: false});\n\n\t\t// this.set_min_inputs_count(0);\n\t\t// this.set_max_inputs_count(0);\n\t}\n\t//@_object_uuid_by_node_graph_id = {}\n\n\tinit_display_scene() {\n\t\tthis._object.name = '_WORLD_';\n\t\tthis._scene.display_scene.add(this._object);\n\t}\n\n\t// TODO: is this method still used?\n\t// available_children_classes() {\n\t// \treturn POLY.Engine.Node.Obj;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tcreate_node<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as ObjNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseObjNodeType[];\n\t}\n\tnodes_by_type<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as ObjNodeChildrenMap[K][];\n\t}\n\n\tmultiple_display_flags_allowed() {\n\t\treturn true;\n\t}\n\n\tadd_to_queue(node: BaseObjNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._queued_nodes_by_id[id] == null) {\n\t\t\treturn (this._queued_nodes_by_id[id] = node);\n\t\t}\n\t}\n\n\tasync process_queue() {\n\t\tthis._queued_nodes_by_path = {};\n\t\tconst ids = Object.keys(this._queued_nodes_by_id);\n\t\tfor (let id of ids) {\n\t\t\tconst node = this._queued_nodes_by_id[id];\n\t\t\tdelete this._queued_nodes_by_id[id];\n\n\t\t\tconst full_path = `_____${node.render_order}__${node.full_path()}`;\n\t\t\t// we want to process managers, cameras, then lights, then everything else\n\t\t\t// so we add a prefix for those\n\t\t\t// if (this._is_node_manager(node)) {\n\t\t\t// \tfull_path = `/_____005_${full_path}`;\n\t\t\t// } else if (this._is_node_fog(node)) {\n\t\t\t// \tfull_path = `/_____002_${full_path}`;\n\t\t\t// } else if (this._is_node_camera(node)) {\n\t\t\t// \tfull_path = `/_____003_${full_path}`;\n\t\t\t// } else if (this._is_node_light(node)) {\n\t\t\t// \tfull_path = `/_____004_${full_path}`;\n\t\t\t// }\n\n\t\t\tthis._queued_nodes_by_path[full_path] = node;\n\t\t}\n\n\t\tconst promises = Object.keys(this._queued_nodes_by_path)\n\t\t\t.sort()\n\t\t\t.map((path_id) => {\n\t\t\t\tconst node = this._queued_nodes_by_path[path_id];\n\t\t\t\treturn this.update_object(node);\n\t\t\t});\n\n\t\tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t\tthis._process_queue_start = performance.now();\n\t\tPromise.all(promises).then(() => {\n\t\t\tPOLY.log(`SCENE LOADED '${this.scene.name}' in ${performance.now() - this._process_queue_start}`);\n\t\t\t// this.scene().performance().print()\n\n\t\t\t// do the update here if there are no objects to load\n\t\t\t// otherwise an empty scene will have a loader that never gets removed\n\t\t\t// if (Object.keys(this._expected_geo_nodes).length == 0) {\n\t\t\t// \tthis.update_on_all_objects_loaded();\n\t\t\t// }\n\t\t});\n\t}\n\n\tupdate_object(node: BaseObjNodeType) {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\tthis.add_to_queue(node);\n\t\t} else {\n\t\t\t// if (node.object) {\n\t\t\tthis.add_to_scene(node);\n\t\t\t// } else {\n\t\t\t// \t//if POLY.env != 'test'\n\t\t\t// \t// console.warn(`no object from ${node.full_path()} (error:${node.error_message()}) (${POLY.env})`);\n\t\t\t// }\n\t\t}\n\t}\n\n\t// _is_node_fog(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, FogObjNode);\n\t// }\n\t// _is_node_camera(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, BaseCameraObjNodeClass);\n\t// }\n\n\t// _is_node_event(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, EventsObjNode);\n\t// }\n\t// _is_node_mat(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, MaterialsObjNode);\n\t// }\n\n\t//\n\t//\n\t// OBJ PARENTING\n\t//\n\t//\n\n\t// TODO:\n\t// a OBJ node should be able to submit its group for transform\n\t// apart from the geometry. This would allow parenting to function\n\t// regardless if the underlying geo is valid or not\n\tget_parent_for_node(node: BaseObjNodeType) {\n\t\t// if (this._is_node_event(node) || this._is_node_mat(node)) {\n\t\t// \treturn null;\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\t// if (this._is_node_camera(node)) {\n\t\t\t// \treturn this.scene.display_scene;\n\t\t\t// } else {\n\t\t\tconst node_input = node.io.inputs.input(0);\n\t\t\tif (node_input) {\n\t\t\t\t//node_input.request_container (container)=>\n\t\t\t\t//\tcallback(container.object() || @_object)\n\t\t\t\treturn node_input.children_group;\n\t\t\t} else {\n\t\t\t\treturn this._object;\n\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tadd_to_scene(node: BaseObjNodeType): void {\n\t\t// if (this._is_node_fog(node)) {\n\t\t// console.log(\"fog\")\n\t\t// # TODO: ensure fog is removed if we set display or bypass flag\n\t\t// # TODO: ensure we get a warning if more than 1 fog\n\t\t// # TODO: why does it get added twice when its parameters are changed?\n\t\t// node.get_fog (fog)=>\n\t\t// \t@_scene.display_scene().fog = fog\n\t\t// #console.log(\"added fog\", node.object())\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\tconst parent_object = this.get_parent_for_node(node);\n\t\t\tif (parent_object) {\n\t\t\t\t// await node.params.eval_all().then((params_eval_key) => {\n\t\t\t\t// \tnode.request_container();\n\t\t\t\t// });\n\n\t\t\t\tif (node.used_in_scene) {\n\t\t\t\t\t// parent_object.add(node.object);\n\t\t\t\t\tnode.add_object_to_parent(parent_object);\n\t\t\t\t\t// await node.cook_controller.cook_main_without_inputs();\n\t\t\t\t} else {\n\t\t\t\t\tnode.remove_object_from_parent();\n\t\t\t\t\t// parent_object.remove(node.object);\n\t\t\t\t}\n\n\t\t\t\t// node.request_display_node();\n\t\t\t} else {\n\t\t\t\t// node.request_container().then(() => {\n\t\t\t\t// \t// force events and mat to cook and remove the dirty state\n\t\t\t\t// \t// ensure that pickers are cooked\n\t\t\t\t// \t// TODO: although there has been cases with two picker and\n\t\t\t\t// \t// one referencing the other with an expression, and that\n\t\t\t\t// \t// expression be evaluated before the second was created\n\t\t\t\t// \t// which led to an error. This should not happen\n\t\t\t\t// \tnode.children_controller.traverse_children((child) => child.set_dirty());\n\t\t\t\t// });\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_from_scene(node: BaseObjNodeType) {\n\t\tnode.remove_object_from_parent();\n\t}\n\tare_children_cooking(): boolean {\n\t\tconst children = this.children();\n\t\tfor (let child of children) {\n\t\t\tif (child.is_display_node_cooking()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync expected_loading_geo_nodes_by_id() {\n\t\tconst geo_nodes = this.nodes_by_type('geo');\n\t\tconst node_by_id: Dictionary<GeoObjNode> = {};\n\t\tfor (let geo_node of geo_nodes) {\n\t\t\tconst is_displayed = await geo_node.is_displayed();\n\t\t\tif (is_displayed) {\n\t\t\t\tnode_by_id[geo_node.graph_node_id] = geo_node;\n\t\t\t}\n\t\t}\n\t\treturn node_by_id;\n\t}\n\n\t// async notify_geo_loaded(geo_node: GeoObjNode) {\n\t// \tthis._loaded_geo_node_by_id = this._loaded_geo_node_by_id || {};\n\t// \tthis._loaded_geo_node_by_id[geo_node.graph_node_id] = true;\n\n\t// \tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t// \tif (this.scene) {\n\t// \t\tthis.scene.loading_controller.on_first_object_loaded();\n\n\t// \t\tif (lodash_isEqual(Object.keys(this._loaded_geo_node_by_id), Object.keys(this._expected_geo_nodes))) {\n\t// \t\t\tthis.update_on_all_objects_loaded();\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// update_on_all_objects_loaded() {\n\t// \tthis.scene.loading_controller.on_all_objects_loaded();\n\t// \t// this.scene.cube_cameras_controller.on_all_objects_loaded(); // TODO: typescript\n\t// }\n\n\tadd_to_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)->\n\t// \tobject = input_container.object()\n\n\t// \ttransformed_node.request_input_container 0, (parent_input_container)->\n\t// \t\tparent = parent_input_container.object()\n\t// \t\tparent.add(object)\n\n\tremove_from_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)=>\n\t// \tobject = input_container.object()\n\n\t// \tthis.get_parent_for_node transformed_node, (parent_object)=>\n\t// \t\tparent_object.add(object)\n\n\tprivate _on_child_add(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.update_object(node as BaseObjNodeType);\n\t\t}\n\t}\n\tprivate _on_child_remove(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.remove_from_scene(node as BaseObjNodeType);\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ManagerContainer} from '../../containers/Manager';\n\nexport class TypedBaseManagerNode<K extends NodeParamsConfig> extends TypedNode<'MANAGER', BaseManagerNodeType, K> {\n\tcontainer_controller: TypedContainerController<ManagerContainer> = new TypedContainerController<ManagerContainer>(\n\t\tthis,\n\t\tManagerContainer\n\t);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MANAGER;\n\t}\n}\n\nexport type BaseManagerNodeType = TypedBaseManagerNode<any>;\nexport class BaseManagerNodeClass extends TypedBaseManagerNode<any> {}\n","// import lodash_filter from 'lodash/filter';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\n// import {Cooker} from './Cooker';\nimport {CoreGraphNode} from './CoreGraphNode';\n\n// not sure how I can have caller: DirtyableMixin if DirtyableMixin is not yet defined\nexport type PostDirtyHook = (caller?: CoreGraphNode) => void;\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class DirtyController {\n\t_dirty_count: number = 0;\n\t_dirty: boolean = true;\n\t_dirty_timestamp: number | undefined;\n\t_cached_successors: CoreGraphNode[] | undefined;\n\t_forbidden_trigger_nodes: string[] | undefined;\n\n\t// hooks\n\t_post_dirty_hooks: PostDirtyHook[] | undefined;\n\t_post_dirty_hook_names: string[] | undefined;\n\n\tconstructor(private node: CoreGraphNode) {}\n\n\t// _init_dirtyable(): void {\n\t// \tthis._dirty_count = 0;\n\t// \tthis._dirty = true;\n\t// }\n\tget is_dirty(): boolean {\n\t\treturn this._dirty === true;\n\t}\n\tget dirty_timestamp() {\n\t\treturn this._dirty_timestamp;\n\t}\n\tget dirty_count(): number {\n\t\treturn this._dirty_count;\n\t}\n\tadd_post_dirty_hook(name: string, method: PostDirtyHook) {\n\t\tthis._post_dirty_hook_names = this._post_dirty_hook_names || [];\n\t\tthis._post_dirty_hooks = this._post_dirty_hooks || [];\n\n\t\tif (!this._post_dirty_hook_names.includes(name)) {\n\t\t\tthis._post_dirty_hook_names.push(name);\n\t\t\tthis._post_dirty_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tremove_post_dirty_hook(name: string) {\n\t\tif (this._post_dirty_hook_names && this._post_dirty_hooks) {\n\t\t\tconst index = this._post_dirty_hook_names.indexOf(name);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._post_dirty_hook_names.splice(index, 1);\n\t\t\t\tthis._post_dirty_hooks.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\thas_hook(name: string): boolean {\n\t\tif (this._post_dirty_hook_names) {\n\t\t\treturn this._post_dirty_hook_names.includes(name);\n\t\t}\n\t\treturn false;\n\t}\n\t// using a dirty block doesn't quite work, as I would need to be able\n\t// to fetch the graph for all successors that haven't been blocked\n\t// block_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = false\n\t// unblock_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = true\n\tremove_dirty_state(): void {\n\t\tthis._dirty = false;\n\t}\n\tset_forbidden_trigger_nodes(nodes: CoreGraphNode[]) {\n\t\tthis._forbidden_trigger_nodes = nodes.map((n) => n.graph_node_id);\n\t}\n\t//@_clean_for_frame = this.context().frame()\n\t//this.post_remove_dirty_state(message)\n\n\tset_dirty(original_trigger_graph_node?: CoreGraphNode | null, propagate?: boolean): void {\n\t\tif (propagate == null) {\n\t\t\tpropagate = true;\n\t\t}\n\t\tif (\n\t\t\toriginal_trigger_graph_node &&\n\t\t\tthis._forbidden_trigger_nodes &&\n\t\t\tthis._forbidden_trigger_nodes.includes(original_trigger_graph_node.graph_node_id)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (original_trigger_graph_node == null) {\n\t\t\toriginal_trigger_graph_node = this.node;\n\t\t}\n\n\t\t//return if this.set_dirty_allowed? && !this.set_dirty_allowed(original_trigger_graph_node)\n\n\t\t// if (this.scene && this.scene() != null && this.scene().loaded()){\n\t\t// \tlet id = null\n\t\t// \tif (this.full_path){id = this.full_path()} else {id = this}\n\t\t// \tconsole.log(\"set dirty\", id)\n\t\t// }\n\n\t\t// TODO: why can't I not propagate if the node is already dirty?\n\t\t// one possible reason is that node might be cooking, and this would not update the dirty_timestamp correctly?\n\t\t//return if this.is_dirty()\n\t\t// if(!this.scene().is_loading()){\n\t\t// \tconsole.log(\"set dirty\", (this.full_path ? this.full_path() : this))\n\t\t// }\n\n\t\tthis._dirty = true;\n\t\tthis._dirty_timestamp = performance.now();\n\t\tthis._dirty_count += 1;\n\n\t\tthis.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t// this.post_set_dirty(original_trigger_graph_node);\n\n\t\tif (propagate === true) {\n\t\t\t//&& @_dirty #&& window.scene.auto_updating()\n\t\t\tthis.set_successors_dirty(original_trigger_graph_node);\n\t\t}\n\t}\n\n\trun_post_dirty_hooks(original_trigger_graph_node?: CoreGraphNode) {\n\t\tif (this._post_dirty_hooks) {\n\t\t\tconst cooker = this.node.scene.cooker;\n\t\t\tif (cooker.blocked) {\n\t\t\t\tcooker.enqueue(this.node, original_trigger_graph_node);\n\t\t\t} else {\n\t\t\t\tfor (let hook of this._post_dirty_hooks) {\n\t\t\t\t\thook(original_trigger_graph_node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// cooker(): Cooker {\n\t// \tthrow 'Dirtyable.cooker requires implementation';\n\t// }\n\tset_successors_dirty(original_trigger_graph_node?: CoreGraphNode): void {\n\t\t// const cooker = this.node.scene.cooker;\n\t\t// cooker.block();\n\n\t\tconst propagate = false;\n\t\tthis._cached_successors = this._cached_successors || this.node.graph_all_successors(); //this._dirtyable_all_successors(original_trigger_graph_node);\n\t\t// successors = successors.filter(n=>!n.is_dirty())\n\t\tfor (let successor of this._cached_successors) {\n\t\t\tsuccessor.dirty_controller.set_dirty(original_trigger_graph_node, propagate);\n\t\t\t// console.log(successor);\n\t\t}\n\n\t\t// cooker.unblock();\n\t}\n\n\t// _dirtyable_all_successors(original_trigger_graph_node: CoreGraphNode): CoreGraphNode[] {\n\t// \treturn this.graph_all_predecessors()\n\t// \t// const successors = [];\n\t// \t// let newly_added_successors = this._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// successors.push(newly_added_successors);\n\n\t// \t// while (newly_added_successors.length > 0) {\n\t// \t// \tnewly_added_successors = lodash_flatten(\n\t// \t// \t\tnewly_added_successors.map((newly_added_successor) => {\n\t// \t// \t\t\treturn newly_added_successor._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// \t\t})\n\t// \t// \t);\n\t// \t// \tsuccessors.push(newly_added_successors);\n\t// \t// }\n\n\t// \t// return lodash_uniq(lodash_flatten(successors));\n\t// }\n\n\tclear_successors_cache() {\n\t\tthis._cached_successors = undefined;\n\t}\n\tclear_successors_cache_with_predecessors() {\n\t\tthis.clear_successors_cache();\n\t\tfor (let predecessor of this.node.graph_all_predecessors()) {\n\t\t\tpredecessor.dirty_controller.clear_successors_cache();\n\t\t}\n\t}\n\t// graph_all_predecessors(): CoreGraphNode[] {\n\t// \treturn this.node.graph_all_predecessors()\n\t// \t// console.log('dirtyable graph_all_predecessors should be overwritten');\n\t// \t// return [];\n\t// }\n\n\t// dirty_successors(): Array<CoreGraphNode> {\n\t// \tthrow 'Dirtyable.dirty_successors requires implementation';\n\t// }\n\t// set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \tthrow 'Dirtyable.set_dirty_allowed requires implementation';\n\t// }\n\t// _dirtyable_direct_successors(original_trigger_graph_node: CoreGraphNode): Array<CoreGraphNode> {\n\t// \treturn this.dirty_successors().filter((successor) => {\n\t// \t\treturn successor.set_dirty_allowed == null || successor.set_dirty_allowed(original_trigger_graph_node);\n\t// \t});\n\t// }\n\n\t// set_graph_successors_dirty_via_graph: (original_trigger_graph_node)->\n\t// \tcooker = this.scene().cooker()\n\t// \tcooker.block()\n\n\t// \tmake_successors_dirty = false\n\t// \tlodash_each lodash_flatten(this.graph_all_successors()), (successor)=>\n\t// \t\tsuccessor.set_dirty(original_trigger_graph_node, this, false)\n\n\t// \tcooker.unblock()\n\n\t// post_set_dirty(original_trigger_graph_node?: Dirtyable, direct_trigger_graph_node?: Dirtyable): void{}\n}\n","import {Vector2} from 'three/src/math/Vector2';\nimport {Color} from 'three/src/math/Color';\nimport {BaseNodeType} from '../_Base';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\nexport interface NodeUIDataJson {\n\tx: number;\n\ty: number;\n\tcomment?: string;\n}\n\nexport class UIData {\n\tprivate _position: Vector2 = new Vector2();\n\tprivate _width: number = 50;\n\tprivate _border_radius: number = 3;\n\tprivate _color: Color = new Color(0.75, 0.75, 0.75);\n\t// private _icon: string | null = null;\n\tprivate _layout_vertical: boolean = true;\n\tprivate _comment: string | undefined;\n\tprivate _json: NodeUIDataJson = {\n\t\tx: 0,\n\t\ty: 0,\n\t};\n\n\tconstructor(private node: BaseNodeType, x: number = 0, y: number = 0) {\n\t\tthis._position.x = x;\n\t\tthis._position.y = y;\n\t}\n\n\tset_border_radius(radius: number) {\n\t\tthis._border_radius = radius;\n\t}\n\tborder_radius() {\n\t\treturn this._border_radius;\n\t}\n\tset_width(width: number) {\n\t\tthis._width = width;\n\t}\n\twidth() {\n\t\treturn this._width;\n\t}\n\tset_comment(comment: string | undefined) {\n\t\tthis._comment = comment;\n\t\tthis.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n\t}\n\tget comment(): string | undefined {\n\t\treturn this._comment;\n\t}\n\tset_color(color: Color) {\n\t\tthis._color = color;\n\t}\n\tcolor() {\n\t\treturn this._color;\n\t}\n\t// set_icon(icon: string) {\n\t// \tthis._icon = icon;\n\t// }\n\t// icon() {\n\t// \treturn this._icon;\n\t// }\n\tset_layout_horizontal() {\n\t\tthis._layout_vertical = false;\n\t}\n\tis_layout_vertical() {\n\t\treturn this._layout_vertical;\n\t}\n\n\tcopy(ui_data: UIData) {\n\t\tthis._position.copy(ui_data.position);\n\t\tthis._color.copy(ui_data.color());\n\t}\n\n\tget position() {\n\t\treturn this._position;\n\t}\n\n\tset_position(new_position: Vector2 | number, y: number = 0) {\n\t\tif (new_position instanceof Vector2) {\n\t\t\tthis._position.copy(new_position);\n\t\t} else {\n\t\t\tconst x = new_position;\n\t\t\tthis._position.set(x, y);\n\t\t}\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\n\ttranslate(offset: Vector2, snap: boolean = false) {\n\t\tthis._position.add(offset);\n\n\t\tif (snap) {\n\t\t\tthis._position.x = Math.round(this._position.x);\n\t\t\tthis._position.y = Math.round(this._position.y);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\t// arguments_to_vector(x: number,y: number){\n\t// \tif (arguments.length === 2) {\n\t// \t\tthis._position.x = arguments[0];\n\t// \t\tthis._position.y = arguments[1];\n\t// \t} else {\n\t// \t\tthis._position.x = new_position.x;\n\t// \t\tthis._position.y = new_position.y;\n\t// \t}\n\t// }\n\tto_json(): NodeUIDataJson {\n\t\tthis._json.x = this._position.x;\n\t\tthis._json.y = this._position.y;\n\t\tthis._json.comment = this._comment;\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.node);\n\terror = new ErrorState(this.node);\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseState} from './Base';\n\nexport class TimeDependentState extends BaseState {\n\tget active() {\n\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n\t}\n\n\tare_params_time_dependent(): boolean {\n\t\tconst param_names = this.node.params.names;\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param && param.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tare_inputs_time_dependent(): boolean {\n\t\tconst inputs = this.node.io.inputs.inputs();\n\t\tfor (let input of inputs) {\n\t\t\tif (input && input.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tforce_time_dependent() {\n\t\tconst predecessor_ids = this.node.graph_predecessors().map((n) => n.graph_node_id);\n\t\tconst frame_node = this.node.scene.time_controller.graph_node; // context();\n\t\tif (!predecessor_ids.includes(frame_node.graph_node_id)) {\n\t\t\tthis.node.add_graph_input(frame_node);\n\t\t}\n\t}\n\tunforce_time_dependent() {\n\t\tconst frame_node = this.node.scene.time_controller.graph_node;\n\t\tthis.node.remove_graph_input(frame_node);\n\t}\n}\n","import {NodeEvent} from '../../../poly/NodeEvent';\nimport {BaseState} from './Base';\n\nexport class ErrorState extends BaseState {\n\tprivate _message: string | undefined;\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tconsole.warn('error', message, this.node.full_path());\n\t\t\tthis._message = message;\n\t\t\tthis.on_update();\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n\n\tprotected on_update() {\n\t\tif (this._message != null) {\n\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n\t\t\tthis.node.set_container(null, `from error '${this._message}'`);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.ERROR_UPDATED);\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {NameController} from '../NameController';\n\ntype Callback = () => void;\nimport {CoreWalker} from '../../../../core/Walker';\n\nexport class HierarchyParentController {\n\tprivate _parent: BaseNodeType | null = null;\n\tprivate _on_set_parent_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\tset_parent(parent: BaseNodeType | null) {\n\t\tif (parent != this.node.parent_controller.parent) {\n\t\t\tthis._parent = parent;\n\t\t\tif (this._parent) {\n\t\t\t\t// this.node.set_scene(this._parent.scene);\n\t\t\t\tthis.node.name_controller.request_name_to_parent(NameController.base_name(this.node));\n\t\t\t}\n\t\t\t// this.on_set_parent();\n\t\t}\n\t}\n\tis_selected(): boolean {\n\t\treturn this.parent?.children_controller?.selection?.contains(this.node) || false;\n\t}\n\tfull_path(): string {\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (this._parent != null) {\n\t\t\tconst parent_full_path = this._parent.full_path();\n\t\t\tif (parent_full_path === separator) {\n\t\t\t\treturn parent_full_path + this.node.name;\n\t\t\t} else {\n\t\t\t\treturn parent_full_path + separator + this.node.name;\n\t\t\t}\n\t\t} else {\n\t\t\treturn separator;\n\t\t}\n\t}\n\n\ton_set_parent() {\n\t\tif (this._on_set_parent_hooks) {\n\t\t\tfor (let hook of this._on_set_parent_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreString} from '../../../../core/String';\nimport {CoreWalker} from '../../../../core/Walker';\nimport {BaseNodeType} from '../../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport lodash_includes from 'lodash/includes';\nimport lodash_keys from 'lodash/keys';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_values from 'lodash/values';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {NameController} from '../NameController';\nimport {CoreNodeSelection} from '../../../../core/NodeSelection';\n\nimport {POLY} from '../../../Poly';\n// import {NameController} from '../NameController';\n\n// interface HierarchyOptions {\n// \tcontext: NodeContext\n// \tdependent?: boolean;\n// }\nconst NODE_SIMPLE_NAME = 'children';\n\nexport class HierarchyChildrenController {\n\t// private _context: NodeContext | undefined;\n\t// private _children_allowed: boolean = false;\n\tprivate _children: Dictionary<BaseNodeType> = {};\n\tprivate _children_by_type: Dictionary<string[]> = {};\n\tprivate _children_and_grandchildren_by_context: Dictionary<string[]> = {};\n\n\tprivate _is_dependent_on_children: boolean = false;\n\tprivate _children_node: CoreGraphNode | undefined;\n\n\tprivate _selection: CoreNodeSelection | undefined;\n\tget selection(): CoreNodeSelection {\n\t\treturn (this._selection = this._selection || new CoreNodeSelection(this.node));\n\t}\n\tconstructor(protected node: BaseNodeType, private _context: NodeContext) {}\n\tget context() {\n\t\treturn this._context;\n\t}\n\tinit(dependent: boolean = false) {\n\t\t// const context = this.node.children_context();\n\t\t// if (context) {\n\t\t// this._available_children_classes = options['children'] || {};\n\t\t// this._available_children_classes = window.POLY.registered_nodes(context, this.self.type())\n\n\t\t// this._children_allowed = true;\n\t\tthis._children = {};\n\n\t\t// const is_dependent = options['dependent'];\n\t\tif (dependent) {\n\t\t\tthis._is_dependent_on_children = dependent;\n\t\t\tif (this._is_dependent_on_children) {\n\t\t\t\tthis._children_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t\t// this._children_node.set_scene(this.node.scene);\n\t\t\t\tthis.node.add_graph_input(this._children_node);\n\t\t\t}\n\t\t}\n\t\t// }\n\t}\n\n\t// TODO: when copy pasting a node called bla_11, the next one will be renamed bla_110 instead of 12\n\tset_child_name(node: BaseNodeType, new_name: string): void {\n\t\t//return if node.name() == new_name\n\t\tlet current_child_with_name;\n\t\tnew_name = new_name.replace(/[^A-Za-z0-9]/g, '_');\n\t\tnew_name = new_name.replace(/^[0-9]/, '_'); // replace first char if not a letter\n\n\t\tif ((current_child_with_name = this._children[new_name]) != null) {\n\t\t\t// only return if found node is same as argument node, and if new_name is same as current_name\n\t\t\tif (node.name === new_name && current_child_with_name.graph_node_id === node.graph_node_id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// increment new_name\n\t\t\tnew_name = CoreString.increment(new_name);\n\n\t\t\treturn this.set_child_name(node, new_name);\n\t\t} else {\n\t\t\t// let current_child;\n\t\t\tconst current_name = node.name;\n\n\t\t\t// delete old entry if node was in _children with old name\n\t\t\tconst current_child = this._children[current_name];\n\t\t\tif (current_child) {\n\t\t\t\tdelete this._children[current_name];\n\t\t\t}\n\n\t\t\t// add to new name\n\t\t\tthis._children[new_name] = node;\n\t\t\tnode.name_controller.update_name_from_parent(new_name);\n\t\t\tthis._add_to_nodes_by_type(node);\n\t\t\tthis.node.scene.nodes_controller.add_to_instanciated_node(node);\n\t\t}\n\t}\n\n\tnode_context_signature() {\n\t\treturn `${this.node.node_context()}/${this.node.type}`;\n\t}\n\n\tavailable_children_classes() {\n\t\treturn POLY.registered_nodes(this._context, this.node.type);\n\t}\n\t// children_allowed(): boolean {\n\t// \t// return (this.self.available_children_classes != null) &&\n\t// \t// (Object.keys(this.self.available_children_classes()).length > 0);\n\t// \tconst available_classes = this.available_children_classes();\n\t// \treturn available_classes && Object.keys(available_classes).length > 0;\n\t// }\n\n\tis_valid_child_type(node_type: string): boolean {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\t\treturn node_class != null;\n\t}\n\n\tcreate_node(node_type: string): BaseNodeType {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\n\t\tif (node_class == null) {\n\t\t\tconst message = `node type ${node_type} not found for ${this.node.full_path()} (${Object.keys(\n\t\t\t\tthis.available_children_classes()\n\t\t\t).join(', ')}, ${this._context}, ${this.node.type})`;\n\t\t\tconsole.error(message);\n\t\t\tthrow message;\n\t\t} else {\n\t\t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`);\n\t\t\tchild_node.initialize_base_and_node();\n\t\t\t// child_node.set_scene(this.node.scene);\n\t\t\tthis.add_node(child_node);\n\t\t\tchild_node.lifecycle.set_creation_completed();\n\t\t\treturn child_node;\n\t\t}\n\t}\n\n\tadd_node(child_node: BaseNodeType) {\n\t\t// if (!this._children_allowed) {\n\t\t// \tthrow `node ${this.node.full_path()} cannot have children`;\n\t\t// }\n\n\t\tchild_node.set_parent(this.node);\n\t\tchild_node.params.init();\n\t\tchild_node.parent_controller.on_set_parent();\n\t\tchild_node.name_controller.post_set_full_path();\n\t\tif (child_node.children_allowed() && child_node.children_controller) {\n\t\t\tfor (let child of child_node.children_controller.children()) {\n\t\t\t\tchild.name_controller.post_set_full_path();\n\t\t\t}\n\t\t}\n\t\tthis.node.emit(NodeEvent.CREATED, {child_node_json: child_node.to_json()});\n\t\tif (this.node.scene.lifecycle_controller.on_create_hook_allowed()) {\n\t\t\tchild_node.lifecycle.run_on_create_hooks();\n\t\t}\n\t\tthis.set_child_name(child_node, NameController.base_name(child_node));\n\t\tthis.node.lifecycle.run_on_child_add_hooks(child_node);\n\t\t// this.post_add_node(child_node);\n\n\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\tthis._children_node.add_graph_input(child_node);\n\t\t}\n\t\tif (child_node.require_webgl2()) {\n\t\t\tthis.node.scene.webgl_controller.set_require_webgl2();\n\t\t}\n\n\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(child_node);\n\n\t\treturn child_node;\n\t}\n\t// that's redondant with the lifecycle on_child_add and on_child_remove\n\t// post_add_node(node: BaseNode) {}\n\t// post_remove_node(node: BaseNode) {}\n\n\tremove_node(child_node: BaseNodeType): void {\n\t\tif (child_node.parent != this.node) {\n\t\t\treturn console.warn(`node ${child_node.name} not under parent ${this.node.full_path()}`);\n\t\t} else {\n\t\t\t// set other dependencies dirty\n\t\t\tchild_node.set_successors_dirty(this.node);\n\n\t\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\t\tthis._children_node.remove_graph_input(child_node);\n\t\t\t}\n\n\t\t\tif (this.selection.contains(child_node)) {\n\t\t\t\tthis.selection.remove([child_node]);\n\t\t\t}\n\n\t\t\tconst first_connection = child_node.io.connections.first_input_connection();\n\t\t\tchild_node.io.connections.input_connections()?.forEach((input_connection) => {\n\t\t\t\tif (input_connection) {\n\t\t\t\t\tinput_connection.disconnect({set_input: true});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchild_node.io.connections.output_connections()?.forEach((output_connection) => {\n\t\t\t\tif (output_connection) {\n\t\t\t\t\toutput_connection.disconnect({set_input: true});\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tconst old_src = first_connection.node_src;\n\t\t\t\t\t\tconst old_output_index = output_connection.output_index;\n\t\t\t\t\t\tconst old_dest = output_connection.node_dest;\n\t\t\t\t\t\tconst old_input_index = output_connection.input_index;\n\t\t\t\t\t\told_dest.io.inputs.set_input(old_input_index, old_src, old_output_index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// disconnect successors\n\t\t\tchild_node.graph_disconnect_successors();\n\n\t\t\t// remove from children\n\t\t\tchild_node.set_parent(null);\n\t\t\tdelete this._children[child_node.name];\n\t\t\tthis._remove_from_nodes_by_type(child_node);\n\t\t\tthis.node.scene.nodes_controller.remove_from_instanciated_node(child_node);\n\n\t\t\tthis.node.lifecycle.run_on_child_remove_hooks(child_node);\n\t\t\tchild_node.lifecycle.run_on_delete_hooks();\n\t\t\tchild_node.emit(NodeEvent.DELETED, {parent_id: this.node.graph_node_id});\n\t\t}\n\t}\n\n\tfind_node(path: string): BaseNodeType | null {\n\t\t// if (!this._children_allowed) {\n\t\t// \treturn null;\n\t\t// }\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (path === CoreWalker.CURRENT || path === CoreWalker.CURRENT_WITH_SLASH) {\n\t\t\treturn this.node;\n\t\t}\n\t\tif (path === CoreWalker.PARENT || path === CoreWalker.PARENT_WITH_SLASH) {\n\t\t\treturn this.node.parent;\n\t\t}\n\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (path[0] === separator) {\n\t\t\tpath = path.substring(1, path.length);\n\t\t}\n\n\t\tconst elements = path.split(separator);\n\t\tif (elements.length === 1) {\n\t\t\tconst name = elements[0];\n\t\t\treturn this._children[name];\n\t\t} else {\n\t\t\treturn CoreWalker.find_node(this.node, path);\n\t\t}\n\t}\n\n\t_add_to_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tthis._children_by_type[type] = this._children_by_type[type] || [];\n\t\tif (!lodash_includes(this._children_by_type[type], node_id)) {\n\t\t\tthis._children_by_type[type].push(node_id);\n\t\t}\n\t\tthis.add_to_children_and_grandchildren_by_context(node);\n\t}\n\t_remove_from_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tif (this._children_by_type[type]) {\n\t\t\tconst index = this._children_by_type[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_by_type[type].splice(index, 1);\n\t\t\t\tif (this._children_by_type[type].length == 0) {\n\t\t\t\t\tdelete this._children_by_type[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.remove_from_children_and_grandchildren_by_context(node);\n\t}\n\tadd_to_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tthis._children_and_grandchildren_by_context[type] = this._children_and_grandchildren_by_context[type] || [];\n\t\tif (!lodash_includes(this._children_and_grandchildren_by_context[type], node_id)) {\n\t\t\tthis._children_and_grandchildren_by_context[type].push(node_id);\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.add_to_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\tremove_from_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tif (this._children_and_grandchildren_by_context[type]) {\n\t\t\tconst index = this._children_and_grandchildren_by_context[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_and_grandchildren_by_context[type].splice(index, 1);\n\t\t\t\tif (this._children_and_grandchildren_by_context[type].length == 0) {\n\t\t\t\t\tdelete this._children_and_grandchildren_by_context[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.remove_from_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\n\tnodes_by_type(type: string): BaseNodeType[] {\n\t\tconst node_ids = this._children_by_type[type] || [];\n\t\tconst graph = this.node.scene.graph;\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tnode_ids.forEach((node_id) => {\n\t\t\tconst node = graph.node_from_id(node_id) as BaseNodeType;\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t});\n\t\treturn nodes;\n\t}\n\t// children_and_grandchildren_by_context(context: NodeContext): BaseNode[]{\n\t// \tconst node_ids = this._children_and_grandchildren_by_context[context] || []\n\t// \tconst graph = this.self.scene().graph()\n\t// \treturn node_ids.map(node_id=>graph.node_from_id(node_id))\n\t// }\n\thas_children_and_grandchildren_with_context(context: NodeContext) {\n\t\treturn this._children_and_grandchildren_by_context[context] != null;\n\t}\n\t//lodash_filter this.children(), (child)=>\n\t//\tchild.type() == type\n\n\tchildren(): BaseNodeType[] {\n\t\treturn lodash_values(this._children);\n\t}\n\tchildren_names() {\n\t\treturn lodash_sortBy(lodash_keys(this._children));\n\t}\n\t// children_map: ->\n\t// \t@_children\n\n\ttraverse_children(callback: (arg0: BaseNodeType) => void) {\n\t\tfor (let child of this.children()) {\n\t\t\tcallback(child);\n\n\t\t\tchild.children_controller?.traverse_children(callback);\n\t\t}\n\t}\n}\n","// import UIData from './UIData';\nimport {BaseNodeType} from '../engine/nodes/_Base';\nimport lodash_difference from 'lodash/difference';\nimport lodash_union from 'lodash/union';\n// import lodash_isArray from 'lodash/isArray'\nimport lodash_isEqual from 'lodash/isEqual';\nimport {NodeEvent} from '../engine/poly/NodeEvent';\n\nexport class CoreNodeSelection {\n\t_node_ids: string[] = [];\n\tconstructor(private _node: BaseNodeType) {\n\t\t// super();\n\t\t// this._node_ids = [];\n\t}\n\n\tnode() {\n\t\treturn this._node;\n\t}\n\n\tnodes(): BaseNodeType[] {\n\t\treturn this._node.scene.graph.nodes_from_ids(this._node_ids) as BaseNodeType[];\n\t}\n\n\tcontains(node: BaseNodeType): boolean {\n\t\treturn this._node_ids.includes(node.graph_node_id);\n\t}\n\tequals(nodes: BaseNodeType[]): boolean {\n\t\tconst node_ids = nodes.map((node) => node.graph_node_id).sort();\n\t\treturn lodash_isEqual(node_ids, this._node_ids);\n\t}\n\n\tclear() {\n\t\tthis._node_ids = [];\n\t\tthis.send_update_event();\n\t}\n\tset(nodes: BaseNodeType[]) {\n\t\t// this.remove(this.nodes());\n\t\tthis._node_ids = [];\n\t\tthis.add(nodes);\n\t}\n\n\tadd(nodes_to_add: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_add)) { nodes_to_add = [nodes_to_add]; }\n\n\t\tconst node_ids_to_add = nodes_to_add.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_union(this._node_ids, node_ids_to_add);\n\n\t\tthis.send_update_event();\n\t}\n\n\tremove(nodes_to_remove: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_remove)) { nodes_to_remove = [nodes_to_remove]; }\n\n\t\tconst node_ids_to_remove = nodes_to_remove.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_difference(this._node_ids, node_ids_to_remove);\n\n\t\tthis.send_update_event();\n\t}\n\n\tprivate send_update_event() {\n\t\tthis._node.emit(NodeEvent.SELECTION_UPDATED);\n\t}\n\n\tprivate _json: string[] = [];\n\tto_json() {\n\t\tthis._json = this._json || [];\n\t\tthis._json = this._node_ids.map((id) => id);\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\ntype Callback = () => void;\ntype CallbackWithChildNode = (child_node: BaseNodeType) => void;\n\nexport class LifeCycleController {\n\tprotected _creation_completed = false;\n\tprotected _on_child_add_hooks: CallbackWithChildNode[] = [];\n\tprivate _on_child_remove_hooks: CallbackWithChildNode[] = [];\n\tprivate _on_create_hooks: Callback[] = [];\n\tprivate _on_delete_hooks: Callback[] = [];\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset_creation_completed() {\n\t\tthis._creation_completed = true;\n\t}\n\tget creation_completed() {\n\t\treturn this.node.scene.loading_controller.loaded && this._creation_completed;\n\t}\n\t//\n\t//\n\t// ON CHILD ADD\n\t//\n\t//\n\tadd_on_child_add_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_add_hooks.push(callback);\n\t}\n\trun_on_child_add_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_add_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CHILD REMOVE\n\t//\n\t//\n\tadd_on_child_remove_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_remove_hooks.push(callback);\n\t}\n\trun_on_child_remove_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_remove_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CREATE\n\t//\n\t//\n\tadd_on_create_hook(callback: Callback) {\n\t\tthis._on_create_hooks.push(callback);\n\t}\n\trun_on_create_hooks() {\n\t\tthis.execute_hooks(this._on_create_hooks);\n\t}\n\n\t//\n\t//\n\t// ON DELETE\n\t//\n\t//\n\tadd_delete_hook(callback: Callback) {\n\t\tthis._on_delete_hooks.push(callback);\n\t}\n\trun_on_delete_hooks() {\n\t\tthis.execute_hooks(this._on_delete_hooks);\n\t}\n\n\t//\n\t//\n\t// UTILS\n\t//\n\t//\n\tprotected execute_hooks(hooks: Callback[]) {\n\t\tfor (let hook of hooks) {\n\t\t\thook();\n\t\t}\n\t}\n\tprotected execute_hooks_with_child_node(hooks: CallbackWithChildNode[], child_node: BaseNodeType) {\n\t\tfor (let hook of hooks) {\n\t\t\thook(child_node);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../_Base';\nimport {BaseContainer} from '../../containers/_Base';\nimport {POLY} from '../../Poly';\n\nexport class CookController {\n\t_cooking: boolean = false;\n\t_cooks_count: number = 0;\n\t_max_cook_time: number = -1;\n\t_cooking_dirty_timestamp: number | undefined;\n\t_cook_time_with_inputs: number = 0;\n\t_cook_time_with_inputs_start: number | undefined;\n\t_cook_time_start: number | undefined;\n\t_cook_time: number = 0;\n\t_cook_time_params_start: number | undefined;\n\t_cook_time_params: number = 0;\n\t_last_eval_key: string | undefined;\n\n\t_inputs_evaluation_required: boolean = true; //currently only for switch SOP\n\n\tconstructor(private node: BaseNodeType) {}\n\n\tdisallow_inputs_evaluation() {\n\t\tthis._inputs_evaluation_required = false;\n\t}\n\n\tget is_cooking(): boolean {\n\t\treturn this._cooking === true;\n\t}\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\tget cook_time(): number {\n\t\treturn this._cook_time;\n\t}\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t//this.emit 'node_dirty_updated'\n\t// this.node_post_set_dirty()\n\t// post_remove_dirty_state: (message)->\n\t// \tif !message?\n\t// \t\tthrow \"remove dirty state without message\"\n\n\t// node_post_set_dirty: ->\n\t// \t#\n\tprivate _init_cooking_state() {\n\t\tthis._cooking = true;\n\t\tthis._cooking_dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t}\n\tprivate _init_cooking_start_time(perf_active?: boolean) {\n\t\tif (perf_active == null) {\n\t\t\tperf_active = this.node.scene.performance.started;\n\t\t}\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_start = performance.now();\n\t\t}\n\t}\n\n\tprivate async _start_cook_if_no_errors(input_contents: any[]) {\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.end_cook();\n\t\t} else {\n\t\t\t// this.self.cook(input_containers);\n\t\t\ttry {\n\t\t\t\tawait this.node.cook(input_contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.node.states.error.set(`node internal error: '${e}'.`);\n\t\t\t\tconsole.error(this.node.full_path(), e);\n\t\t\t\tthis.end_cook();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cook_main() {\n\t\tif (this.is_cooking) {\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tconst perf_active = this.node.scene.performance.started;\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_with_inputs_start = performance.now();\n\t\t}\n\t\tthis.node.states.error.clear();\n\n\t\t//this._block_params_dirty_propagation()\n\t\tconst input_containers = await this.evaluate_inputs_and_params();\n\n\t\tthis._init_cooking_start_time(perf_active);\n\n\t\tconst input_contents = [];\n\t\tif (input_containers) {\n\t\t\tlet input_container;\n\t\t\tfor (let i = 0; i < input_containers.length; i++) {\n\t\t\t\tinput_container = input_containers[i];\n\t\t\t\tif (input_container) {\n\t\t\t\t\tif (this.node.io.inputs.input_clonable_state_with_override(i)) {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content_cloned());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this._start_cook_if_no_errors(input_contents);\n\t}\n\tasync cook_main_without_inputs() {\n\t\tthis.node.scene.cook_controller.add_node(this.node);\n\t\tif (this.is_cooking) {\n\t\t\t// TODO:\n\t\t\t// this seems to happen because when we flush the cooker queue,\n\t\t\t// some graph nodes will trigger more updates, which will then make dependent nodes\n\t\t\t// dirty again\n\t\t\tconsole.warn('cook_main_without_inputs already cooking', this.node.full_path());\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tthis._init_cooking_start_time();\n\t\tthis.node.states.error.clear();\n\n\t\tawait this.node.params.eval_all();\n\t\tawait this._start_cook_if_no_errors([]);\n\t}\n\t// catch e\n\t// \tthis.set_error(\"failed to cook: #{e}\")\n\n\tend_cook(message?: string | null) {\n\t\tthis._increment_cooks_count();\n\n\t\tconst dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t\tif (dirty_timestamp == null || dirty_timestamp === this._cooking_dirty_timestamp) {\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis._terminate_cook_process();\n\t\t} else {\n\t\t\tPOLY.log('COOK AGAIN', dirty_timestamp, this._cooking_dirty_timestamp, this.node.full_path());\n\t\t\tthis._cooking = false;\n\t\t\tthis.cook_main();\n\t\t}\n\t}\n\n\t_terminate_cook_process() {\n\t\tif (this.is_cooking) {\n\t\t\t//this._unblock_params_dirty_propagation()\n\t\t\tthis._cooking = false;\n\n\t\t\t// this._cook_eval_key = `${this.graph_node_id}/${performance.now()}@${this.context().frame()}`;\n\n\t\t\tthis._record_cook_time();\n\t\t\t//console.log(\"END COOK: #{this.full_path()} #{this.cook_time()} (with inputs:#{this.cook_time_with_inputs()}) (cook count: #{@_cooks_count}): #{message}\")\n\t\t\t//this.notify_requesters()\n\t\t\tsetTimeout(this.node.container_controller.notify_requesters.bind(this.node.container_controller), 0);\n\t\t}\n\t}\n\tprivate _increment_cooks_count() {\n\t\tif (this.is_cooking) {\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cooks_count += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// cook_eval_key() {\n\t// \tif (!this.is_dirty()) {\n\t// \t\treturn this._cook_eval_key;\n\t// \t} else {\n\t// \t\treturn performance.now();\n\t// \t}\n\t// }\n\n\t_record_cook_time() {\n\t\tif (this.node.scene.performance.started) {\n\t\t\tconst cook_time_end = performance.now();\n\n\t\t\tif (this._cook_time_with_inputs_start != null) {\n\t\t\t\tthis._cook_time_with_inputs = cook_time_end - this._cook_time_with_inputs_start;\n\t\t\t\tthis._cook_time_with_inputs_start = undefined;\n\t\t\t}\n\n\t\t\tif (this._cook_time_params_start != null && this._cook_time_start != null) {\n\t\t\t\tthis._cook_time_params = this._cook_time_start - this._cook_time_params_start;\n\t\t\t}\n\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cook_time = cook_time_end - this._cook_time_start;\n\t\t\t\tthis._cook_time_start = undefined;\n\t\t\t}\n\n\t\t\tthis._max_cook_time = Math.max(this._max_cook_time, this._cook_time);\n\t\t}\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis.node.scene.performance.record_node_cook_data(this.node);\n\t\t}\n\t}\n\n\t// allow_eval_key_check() {\n\t// \treturn false;\n\t// }\n\n\tasync evaluate_inputs_and_params() {\n\t\t//t0 = performance.now()\n\n\t\tlet input_containers: (BaseContainer | null)[] = [];\n\t\tif (this._inputs_evaluation_required) {\n\t\t\tinput_containers = await this.node.io.inputs.eval_required_inputs_p();\n\t\t}\n\t\t// const inputs_eval_key = input_containers.map( c => c.eval_key()).join('-');\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis._cook_time_params_start = performance.now();\n\t\t}\n\n\t\t/*const params_eval_key = */ await this.node.params.eval_all();\n\t\t// const full_eval_key = [inputs_eval_key, params_eval_key].join('+');\n\t\t// if (this.allow_eval_key_check() && (this._last_eval_key != null) && (this._last_eval_key === full_eval_key)) {\n\t\t// \tthis._terminate_cook_process('no need to cook');\n\t\t// } else {\n\t\t// \tthis._last_eval_key = full_eval_key;\n\t\t// }\n\t\treturn input_containers;\n\t}\n\n\t//this._time_with_precision(@_cook_time)\n\tget cook_time_with_inputs() {\n\t\treturn this._cook_time_with_inputs;\n\t}\n\t//this._time_with_precision(@_cook_time_with_inputs)\n\tget cook_time_params() {\n\t\treturn this._cook_time_params;\n\t}\n\t_time_with_precision(time: number) {\n\t\tconst precision = 1000;\n\t\treturn Math.round(time * precision) / precision;\n\t}\n}\n","import lodash_groupBy from 'lodash/groupBy';\nimport {BaseNodeType, BaseNodeClass} from '../_Base';\n\nimport {BaseParamType, BaseParamClass} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nenum METHODS {\n\tSUCCESSORS = 'graph_successors',\n\tPREDECESSORS = 'graph_predecessors',\n}\n\n// finally, guard ALL the types!\nfunction typeGuard<T extends PrimitiveOrConstructor>(o: any, className: T): o is GuardedType<T> {\n\tconst localPrimitiveOrConstructor: PrimitiveOrConstructor = className;\n\tif (typeof localPrimitiveOrConstructor === 'string') {\n\t\treturn typeof o === localPrimitiveOrConstructor;\n\t}\n\treturn o instanceof localPrimitiveOrConstructor;\n}\n\nexport class DependenciesController {\n\tprivate _params_referrees_by_graph_node_id: Dictionary<BaseParamType> | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// debug_dependencies() {\n\t// \tconst nodes = this.scene_successors();\n\t// \tconsole.log('--------------------');\n\t// \tnodes.forEach((n) => {\n\t// \t\tconsole.log(n.full_path());\n\t// \t});\n\t// }\n\n\tscene_successors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.SUCCESSORS);\n\t}\n\n\tscene_predecessors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.PREDECESSORS);\n\t}\n\tprivate _find_scene_node_scene_nodes(method: METHODS): BaseNodeType[] {\n\t\tconst params = this.node.params.all;\n\t\tconst graph_nodes: CoreGraphNode[] = [];\n\t\tfor (let param of params) {\n\t\t\tgraph_nodes.push(param);\n\t\t}\n\t\tgraph_nodes.push(this.node);\n\t\tconst start_nodes = graph_nodes;\n\t\tlet base_nodes: BaseNodeType[] = [];\n\t\tfor (let start_node of start_nodes) {\n\t\t\tthis._find_base_nodes_from_node(start_node, method, base_nodes);\n\t\t}\n\n\t\tif (method == METHODS.SUCCESSORS) {\n\t\t\tfor (let node of this.param_nodes_referree()) {\n\t\t\t\tbase_nodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\t// ensure uniq and not current node\n\t\tbase_nodes = base_nodes.filter((scene_node) => {\n\t\t\treturn scene_node.graph_node_id != this.node.graph_node_id;\n\t\t});\n\t\tconst base_nodes_by_graph_node_id = lodash_groupBy(base_nodes, (n) => n.graph_node_id);\n\t\tconst uniq_base_nodes: BaseNodeType[] = [];\n\t\tObject.keys(base_nodes_by_graph_node_id).forEach((graph_node_id) => {\n\t\t\tuniq_base_nodes.push(base_nodes_by_graph_node_id[graph_node_id][0]);\n\t\t});\n\t\treturn uniq_base_nodes;\n\t}\n\n\tprivate _find_base_nodes_from_node(node: CoreGraphNode, method: METHODS, base_nodes: BaseNodeType[]) {\n\t\tconst next_nodes = node[method]();\n\t\tfor (let next_node of next_nodes) {\n\t\t\tif (next_node instanceof BaseParamClass) {\n\t\t\t\tbase_nodes.push(next_node.node);\n\t\t\t} else {\n\t\t\t\tif (typeGuard(next_node, BaseNodeClass)) {\n\t\t\t\t\tbase_nodes.push(next_node);\n\t\t\t\t} else {\n\t\t\t\t\tthis._find_base_nodes_from_node(next_node, method, base_nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn base_nodes;\n\t}\n\n\t//\n\t//\n\t// REFERRED BY\n\t// which is used for operator path referring nodes without creating a graph edge\n\t//\n\t//\n\tadd_param_referree(param: BaseParamType) {\n\t\tthis._params_referrees_by_graph_node_id = this._params_referrees_by_graph_node_id || {};\n\t\tthis._params_referrees_by_graph_node_id[param.graph_node_id] = param;\n\t}\n\tremove_param_referree(param: BaseParamType) {\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tdelete this._params_referrees_by_graph_node_id[param.graph_node_id];\n\t\t}\n\t}\n\tparams_referree(): BaseParamType[] {\n\t\tconst list = [];\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tfor (let graph_node_id of Object.keys(this._params_referrees_by_graph_node_id)) {\n\t\t\t\tlist.push(this._params_referrees_by_graph_node_id[graph_node_id]);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tparam_nodes_referree(): BaseNodeType[] {\n\t\tconst node_by_graph_node_id: Dictionary<BaseNodeType> = {};\n\t\tlet node;\n\t\tfor (let param of this.params_referree()) {\n\t\t\tnode = param.node;\n\t\t\tnode_by_graph_node_id[node.graph_node_id] = node;\n\t\t}\n\t\tconst list = [];\n\t\tfor (let graph_node_id of Object.keys(node_by_graph_node_id)) {\n\t\t\tlist.push(node_by_graph_node_id[graph_node_id]);\n\t\t}\n\t\treturn list;\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport lodash_compact from 'lodash/compact';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isEqual from 'lodash/isEqual';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamEvent} from '../../poly/ParamEvent';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nconst ALWAYS_REFERENCE_ASSET_OPTION = 'always_reference_asset';\nconst CALLBACK_OPTION = 'callback';\nconst CALLBACK_STRING_OPTION = 'callback_string';\n// const COLOR_OPTION = 'color';\nconst COOK_OPTION = 'cook';\nconst DESKTOP_BROWSE_OPTION = 'desktop_browse';\nconst FILE_TYPE_OPTION = 'file_type';\n// const EXPRESSION_ONLY_OPTION = 'expression_only';\nconst EXPRESSION = 'expression';\nconst FOR_ENTITIES = 'for_entities';\nconst LEVEL = 'level';\nconst MENU = 'menu';\nconst ENTRIES = 'entries';\n// const TYPE = 'type';\n// const RADIO = 'radio';\nconst MULTILINE_OPTION = 'multiline';\nconst NODE_SELECTION = 'node_selection';\nconst NODE_SELECTION_CONTEXT = 'context';\nconst DEPENDENT_ON_FOUND_NODE = 'dependent_on_found_node';\nconst RANGE_OPTION = 'range';\nconst RANGE_LOCKED_OPTION = 'range_locked';\nconst STEP_OPTION = 'step';\nconst SPARE_OPTION = 'spare';\nconst TEXTURE_OPTION = 'texture';\nconst ENV_OPTION = 'env';\nconst HIDDEN_OPTION = 'hidden';\nconst LABEL_OPTION = 'label';\nconst FIELD_OPTION = 'field';\nconst VISIBLE_IF_OPTION = 'visible_if';\n\nexport interface ParamOptionsMenuEntry {\n\tname: string;\n\tvalue: number;\n}\n\ninterface BaseParamOptions {\n\t// cook\n\tcook?: boolean;\n\t// spare\n\tspare?: boolean;\n\t// visible\n\thidden?: boolean;\n\tlabel?: boolean;\n\tfield?: boolean;\n\tvisible_if?: Dictionary<number | boolean>;\n}\ninterface MenuParamOptions {\n\tmenu?: {\n\t\t// type: 'radio';\n\t\tentries: ParamOptionsMenuEntry[];\n\t};\n}\ninterface ExpressionParamOptions {\n\texpression?: {\n\t\tfor_entities?: boolean;\n\t};\n}\n\ninterface NumberParamOptions extends BaseParamOptions {\n\trange?: Number2;\n\trange_locked?: Boolean2;\n\tstep?: number;\n}\ninterface AssetParamOptions {\n\talways_reference_asset?: boolean;\n}\ninterface DesktopParamOptions {\n\tdesktop_browse?: Dictionary<string>;\n}\ninterface CallbackParamOptions {\n\tcallback?: (node: BaseNodeType, param: BaseParamType) => any;\n\tcallback_string?: string;\n}\n\n// actual param options\nexport interface BooleanParamOptions\n\textends BaseParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface ButtonParamOptions extends BaseParamOptions, CallbackParamOptions {}\nexport interface ColorParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface FloatParamOptions\n\textends NumberParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface FolderParamOptions extends BaseParamOptions {\n\tlevel?: number;\n}\nexport interface IntegerParamOptions extends NumberParamOptions, MenuParamOptions, CallbackParamOptions {}\nexport interface OperatorPathParamOptions extends BaseParamOptions, DesktopParamOptions, CallbackParamOptions {\n\tnode_selection?: {\n\t\tcontext?: NodeContext;\n\t};\n\tdependent_on_found_node?: boolean;\n}\nexport interface RampParamOptions extends BaseParamOptions {}\nexport interface SeparatorParamOptions extends BaseParamOptions {}\nexport interface StringParamOptions\n\textends BaseParamOptions,\n\t\tAssetParamOptions,\n\t\tDesktopParamOptions,\n\t\tExpressionParamOptions {\n\tmultiline?: boolean;\n}\nexport interface Vector2ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector3ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector4ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\n\nexport interface ParamOptions\n\textends NumberParamOptions,\n\t\tFolderParamOptions,\n\t\tExpressionParamOptions,\n\t\tButtonParamOptions,\n\t\tDesktopParamOptions,\n\t\tMenuParamOptions,\n\t\tStringParamOptions,\n\t\tOperatorPathParamOptions {\n\t// asset refererences\n\t// always_reference_asset?: boolean;\n\t// callback\n\t// callback?: (node: BaseNodeType, param: BaseParamType) => any;\n\t// callback_string?: string;\n\t// color\n\t// color?: [number, number, number] | string;\n\t// cook\n\t// cook?: boolean;\n\t// desktop\n\t// desktop_browse?: Dictionary<string>;\n\t// expression\n\t// expression_only?: boolean;\n\t// expression?: {\n\t// \tfor_entities?: boolean;\n\t// };\n\t// folder\n\t// level?:number\n\t// menu\n\t// menu?: {\n\t// \t// type: 'radio';\n\t// \tentries: ParamOptionsMenuEntry[];\n\t// };\n\t// multiline\n\t// multiline?: boolean;\n\t// node selection\n\t// node_selection?: {\n\t// \tcontext?: NodeContext;\n\t// };\n\t// dependent_on_found_node?: boolean;\n\t// spare\n\t// spare?: boolean;\n\t// texture\n\ttexture?: {\n\t\tenv?: boolean;\n\t};\n\t// visible\n\t// hidden?: boolean;\n\t// label?: boolean;\n\t// field?: boolean;\n\t// visible_if?: Dictionary<number | boolean>;\n}\n\nexport class OptionsController {\n\tprivate _programatic_visible_state: boolean = true;\n\tprivate _options!: ParamOptions;\n\tprivate _default_options!: ParamOptions;\n\tconstructor(private _param: BaseParamType) {\n\t\t// this._options = lodash_cloneDeep(this._default_options);\n\t}\n\n\tset(options: ParamOptions) {\n\t\tthis._default_options = options;\n\t\tthis._options = lodash_cloneDeep(this._default_options);\n\t}\n\tcopy(options_controller: OptionsController) {\n\t\tthis._default_options = lodash_cloneDeep(options_controller.default);\n\t\tthis._options = lodash_cloneDeep(options_controller.current);\n\t}\n\tset_option(name: keyof ParamOptions, value: any) {\n\t\treturn Object.assign(this._options, name, value);\n\t}\n\tget param() {\n\t\treturn this._param;\n\t}\n\tget node(): BaseNodeType {\n\t\treturn this._param.node;\n\t}\n\tget default() {\n\t\treturn this._default_options;\n\t}\n\tget current() {\n\t\treturn this._options;\n\t}\n\n\t// utils\n\tget has_options_overridden(): boolean {\n\t\treturn !lodash_isEqual(this._options, this._default_options);\n\t}\n\tget overridden_options(): ParamOptions {\n\t\tconst overriden: ParamOptions = {};\n\t\tconst option_names = Object.keys(this._options) as Array<keyof ParamOptions>;\n\t\tfor (let option_name of option_names) {\n\t\t\tif (!lodash_isEqual(this._options[option_name], this._default_options[option_name])) {\n\t\t\t\tObject.assign(overriden, option_name, lodash_cloneDeep(this._options[option_name]));\n\t\t\t}\n\t\t}\n\t\treturn overriden;\n\t}\n\tget overridden_option_names(): Array<keyof ParamOptions> {\n\t\treturn Object.keys(this.overridden_options) as Array<keyof ParamOptions>;\n\t}\n\n\t// referenced assets\n\tget always_reference_asset(): boolean {\n\t\treturn this._options[ALWAYS_REFERENCE_ASSET_OPTION] || false;\n\t}\n\n\t// callback\n\thas_callback() {\n\t\treturn this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n\t}\n\n\texecute_callback() {\n\t\t// we only allow execution when scene is loaded\n\t\t// to avoid errors such as an operator_path param\n\t\t// executing its callback before the node it points to is created\n\t\tif (!(this.node && this.node.scene.loading_controller.loaded)) {\n\t\t\treturn;\n\t\t}\n\t\tconst callback = this.get_callback();\n\t\tif (callback != null) {\n\t\t\tif (this.node && !this.node.cook_controller.is_cooking) {\n\t\t\t\tcallback(this.node, this.param);\n\t\t\t}\n\t\t}\n\t}\n\tprivate get_callback() {\n\t\tif (this.has_callback()) {\n\t\t\treturn (this._options[CALLBACK_OPTION] =\n\t\t\t\tthis._options[CALLBACK_OPTION] || this.create_callback_from_string());\n\t\t}\n\t}\n\tprivate create_callback_from_string() {\n\t\tconst callback_string = this._options[CALLBACK_STRING_OPTION];\n\t\tif (callback_string) {\n\t\t\tconst callback_function = new Function('node', 'scene', 'window', 'location', callback_string);\n\t\t\treturn () => {\n\t\t\t\tcallback_function(this.node, this.node.scene, null, null);\n\t\t\t};\n\t\t}\n\t}\n\n\t// color\n\t// color() {\n\t// \treturn this._options[COLOR_OPTION];\n\t// }\n\n\t// cook\n\tmakes_node_dirty_when_dirty() {\n\t\tlet cook_options;\n\n\t\t// false as the dirty state will go through the parent param\n\t\tif (this.param.parent_param != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet value = true;\n\t\tif ((cook_options = this._options[COOK_OPTION]) != null) {\n\t\t\tvalue = cook_options;\n\t\t}\n\t\treturn value;\n\t}\n\n\t// desktop\n\tget desktop_browse_option() {\n\t\treturn this._options[DESKTOP_BROWSE_OPTION];\n\t}\n\tget desktop_browse_allowed(): boolean {\n\t\treturn this.desktop_browse_option != null;\n\t}\n\tdesktop_browse_file_type(): string | null {\n\t\tif (this.desktop_browse_option) {\n\t\t\treturn this.desktop_browse_option[FILE_TYPE_OPTION];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// expression\n\t// get displays_expression_only() {\n\t// \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n\t// }\n\tget is_expression_for_entities(): boolean {\n\t\tconst expr_option = this._options[EXPRESSION];\n\t\tif (expr_option) {\n\t\t\treturn expr_option[FOR_ENTITIES] || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// folder\n\tget level() {\n\t\treturn this._options[LEVEL] || 0;\n\t}\n\n\t// menu\n\tget has_menu() {\n\t\treturn this.menu_options != null;\n\t}\n\n\tprivate get menu_options() {\n\t\treturn this._options[MENU];\n\t}\n\t// private get menu_type() {\n\t// \tif(this.menu_options){\n\t// \t\treturn this.menu_options[TYPE];\n\t// \t}\n\t// }\n\n\tget menu_entries() {\n\t\tif (this.menu_options) {\n\t\t\treturn this.menu_options[ENTRIES];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tget has_menu_radio() {\n\t\treturn this.has_menu; //&& this.menu_options[TYPE] === RADIO;\n\t}\n\n\t// multiline\n\tget is_multiline(): boolean {\n\t\treturn this._options[MULTILINE_OPTION] === true;\n\t}\n\n\t// node selection\n\tget node_selection_options() {\n\t\treturn this._options[NODE_SELECTION];\n\t}\n\tget node_selection_context() {\n\t\tif (this.node_selection_options) {\n\t\t\treturn this.node_selection_options[NODE_SELECTION_CONTEXT];\n\t\t}\n\t}\n\n\tdependent_on_found_node() {\n\t\tif (DEPENDENT_ON_FOUND_NODE in this._options) {\n\t\t\treturn this._options[DEPENDENT_ON_FOUND_NODE];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// range\n\tget range(): Number2 {\n\t\t// cannot force range easily, as values are not necessarily from 0 to N\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [0, this.self.menu_entries().length-1 ]\n\t\t// } else {\n\t\treturn this._options[RANGE_OPTION] || [0, 1];\n\t\t// }\n\t}\n\tget step(): number {\n\t\treturn this._options[STEP_OPTION] || 0.01;\n\t}\n\n\tprivate range_locked(): Boolean2 {\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [true, true]\n\t\t// } else {\n\t\treturn this._options[RANGE_LOCKED_OPTION] || [false, false];\n\t\t// }\n\t}\n\n\tensure_in_range(value: number): number {\n\t\tconst range = this.range;\n\n\t\tif (value >= range[0] && value <= range[1]) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tif (value < range[0]) {\n\t\t\t\treturn this.range_locked()[0] === true ? range[0] : value;\n\t\t\t} else {\n\t\t\t\treturn this.range_locked()[1] === true ? range[1] : value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// spare\n\tget is_spare(): boolean {\n\t\treturn this._options[SPARE_OPTION] || false;\n\t}\n\n\t// texture\n\tget texture_options() {\n\t\treturn this._options[TEXTURE_OPTION];\n\t}\n\ttexture_as_env(): boolean {\n\t\tconst texture_options = this.texture_options;\n\t\tif (texture_options != null) {\n\t\t\treturn texture_options[ENV_OPTION] === true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// visible\n\tget is_hidden(): boolean {\n\t\treturn this._options[HIDDEN_OPTION] === true || this._programatic_visible_state === false;\n\t}\n\tget is_visible(): boolean {\n\t\treturn !this.is_hidden;\n\t}\n\tset_visible_state(state: boolean) {\n\t\tthis._options[HIDDEN_OPTION] = !state;\n\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t}\n\n\tget is_label_hidden(): boolean {\n\t\tconst type = this.param.type;\n\t\treturn (\n\t\t\tthis._options[LABEL_OPTION] === false ||\n\t\t\ttype === ParamType.BUTTON ||\n\t\t\ttype === ParamType.SEPARATOR ||\n\t\t\t(type === ParamType.BOOLEAN && this.is_field_hidden())\n\t\t);\n\t}\n\tis_field_hidden(): boolean {\n\t\treturn this._options[FIELD_OPTION] === false;\n\t}\n\n\t// programatic visibility\n\tui_data_depends_on_other_params(): boolean {\n\t\treturn VISIBLE_IF_OPTION in this._options;\n\t}\n\tvisibility_predecessors() {\n\t\tconst predecessor_names = Object.keys(this._options[VISIBLE_IF_OPTION] || {});\n\t\tconst node = this.param.node;\n\t\treturn lodash_compact(\n\t\t\tpredecessor_names.map((name) => {\n\t\t\t\tconst param = node.params.get(name);\n\t\t\t\tif (param) {\n\t\t\t\t\treturn param;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`param ${name} not found as visibility condition for ${this.param.name} in node ${this.param.node.type}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate _update_visibility_and_remove_dirty_bound = this.update_visibility_and_remove_dirty.bind(this);\n\tprivate _visibility_graph_node: CoreGraphNode | undefined;\n\tprivate _ui_data_dependency_set: boolean = false;\n\tset_ui_data_dependency() {\n\t\tif (this._ui_data_dependency_set) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ui_data_dependency_set = true;\n\t\tconst predecessors = this.visibility_predecessors();\n\t\tif (predecessors.length > 0) {\n\t\t\tthis._visibility_graph_node = new CoreGraphNode(this.param.scene, 'param_visibility');\n\t\t\tfor (let predecessor of predecessors) {\n\t\t\t\tthis._visibility_graph_node.add_graph_input(predecessor);\n\t\t\t}\n\t\t\tthis._visibility_graph_node.add_post_dirty_hook(\n\t\t\t\t'_update_visibility_and_remove_dirty',\n\t\t\t\tthis._update_visibility_and_remove_dirty_bound\n\t\t\t);\n\t\t}\n\t}\n\tprivate update_visibility_and_remove_dirty() {\n\t\tthis.update_visibility();\n\t\tthis.param.remove_dirty_state();\n\t}\n\n\tasync update_visibility() {\n\t\tconst options = this._options[VISIBLE_IF_OPTION];\n\t\tif (options) {\n\t\t\tconst params = this.visibility_predecessors();\n\t\t\tconst promises = params.map((p) => p.compute());\n\t\t\tthis._programatic_visible_state = true;\n\t\t\tawait Promise.all(promises);\n\t\t\tfor (let param of params) {\n\t\t\t\tconst expected_val = options[param.name];\n\t\t\t\tconst val = param.value;\n\t\t\t\tif (expected_val != val) {\n\t\t\t\t\tthis._programatic_visible_state = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\nexport class EmitController {\n\t_blocked_emit: boolean = false;\n\t_blocked_parent_emit: boolean = false;\n\t_count_by_event_name: Dictionary<number> = {};\n\tconstructor(protected param: BaseParamType) {}\n\n\tget emit_allowed(): boolean {\n\t\tif (this._blocked_emit === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.param.scene.loading_controller.is_loading) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: should I also prevent nodes from updating\n\t\t// when they are being called in a loop such as from the Copy SOP?\n\t\t//node = this.node()\n\t\t//node? && !node.is_cooking() && this.scene().emit_allowed() # this prevents a camera from updating its param for instance\n\t\t// although maybe I should send a dirty to the store, and then that store queries the param?\n\t\treturn this.param.scene.events_controller.emit_allowed;\n\t}\n\n\tblock_emit() {\n\t\tthis._blocked_emit = true;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.block_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tunblock_emit() {\n\t\tthis._blocked_emit = false;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.unblock_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tblock_parent_emit() {\n\t\tthis._blocked_parent_emit = true;\n\t\treturn true;\n\t}\n\tunblock_parent_emit() {\n\t\tthis._blocked_parent_emit = false;\n\t\treturn true;\n\t}\n\n\tincrement_count(event_name: ParamEvent) {\n\t\tthis._count_by_event_name[event_name] = this._count_by_event_name[event_name] || 0;\n\t\tthis._count_by_event_name[event_name] += 1;\n\t}\n\tevents_count(event_name: ParamEvent): number {\n\t\treturn this._count_by_event_name[event_name] || 0;\n\t}\n\n\temit(event: ParamEvent) {\n\t\tif (this.emit_allowed) {\n\t\t\tthis.param.emit(event);\n\n\t\t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t\t\t\tthis.param.parent_param.emit(event);\n\t\t\t}\n\t\t}\n\t}\n\t// emit_param_updated() {\n\t// \tconsole.log('emit_param_updated', this.param.name, this.emit_allowed);\n\t// \tif (this.emit_allowed) {\n\t// \t\tthis.param.emit(ParamEvent.UPDATED);\n\n\t// \t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t// \t\t\tthis.param.parent_param.emit(ParamEvent.UPDATED);\n\t// \t\t}\n\t// \t}\n\t// \t//else\n\t// \t//\tthis.emit('param_updated')\n\n\t// \t// return null\n\t// }\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamValueSerializedTypeMap} from '../types/ParamValueSerializedTypeMap';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../types/ParamInitValueSerializedTypeMap';\n\nexport interface ParamSerializerData {\n\tname: string;\n\ttype: string;\n\traw_input: ParamInitValueSerializedTypeMap[ParamType];\n\tvalue: ParamValueSerializedTypeMap[ParamType];\n\texpression?: string;\n\tgraph_node_id: string;\n\t// is_dirty: boolean;\n\terror_message?: string;\n\tis_visible: boolean;\n\tfolder_name?: string;\n\tcomponents?: string[];\n}\n\nexport class ParamSerializer {\n\tconstructor(protected param: BaseParamType) {}\n\n\tto_json(): ParamSerializerData {\n\t\tconst data: ParamSerializerData = {\n\t\t\tname: this.param.name,\n\t\t\ttype: this.param.type,\n\t\t\traw_input: this.raw_input(),\n\t\t\tvalue: this.value(),\n\t\t\texpression: this.expression(),\n\t\t\tgraph_node_id: this.param.graph_node_id,\n\t\t\t// is_dirty: this.param.is_dirty,\n\t\t\terror_message: this.error_message(),\n\t\t\tis_visible: this.is_visible(),\n\t\t\t// folder_name: this.param.ui_data.folder_name,\n\t\t\tcomponents: undefined,\n\t\t};\n\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tdata['components'] = this.param.components.map((component) => component.graph_node_id);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\traw_input() {\n\t\treturn this.param.raw_input_serialized;\n\t}\n\tvalue() {\n\t\treturn this.param.value_serialized;\n\t}\n\texpression() {\n\t\treturn this.param.has_expression() ? this.param.expression_controller?.expression : undefined;\n\t}\n\terror_message() {\n\t\treturn this.param.states.error.message;\n\t}\n\tis_visible() {\n\t\treturn this.param.options.is_visible;\n\t}\n}\n","import {BaseParamType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.param);\n\terror = new ErrorState(this.param);\n\tconstructor(protected param: BaseParamType) {}\n}\n","import {BaseParamType} from '../../_Base';\n\nexport class TimeDependentState {\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active(): boolean {\n\t\tconst frame_graph_node_id = this.param.scene.time_controller.graph_node.graph_node_id;\n\n\t\treturn this.param.graph_predecessor_ids().includes(frame_graph_node_id);\n\t}\n}\n","import {BaseParamType} from '../../_Base';\nimport {ParamEvent} from '../../../poly/ParamEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(private param: BaseParamType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tthis._message = message;\n\t\t\tif (this._message) {\n\t\t\t\tconsole.log(this.param.full_path(), this._message);\n\t\t\t}\n\t\t\tthis.param.emit_controller.emit(ParamEvent.ERROR_UPDATED);\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport {FloatParam} from '../../../params/Float';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\n\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamEvent} from '../../../poly/ParamEvent';\nimport {NodeParamsConfig} from './ParamsConfig';\n\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamConstructorByType} from '../../../params/types/ParamConstructorByType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nconst NODE_SIMPLE_NAME = 'params';\n\nexport type OnSceneLoadHook = () => void;\ntype PostCreateParamsHook = () => void;\n\nexport interface ParamOptionToAdd<T extends ParamType> {\n\tname: string;\n\ttype: T;\n\tinit_value: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n}\nexport interface ParamsUpdateOptions {\n\tnames_to_delete?: string[];\n\tto_add?: ParamOptionToAdd<ParamType>[];\n}\n\nexport class ParamsController {\n\tprivate _param_create_mode: boolean = false;\n\tprivate _params_by_name: Dictionary<BaseParamType> = {};\n\t// caches\n\tprivate _params_list: BaseParamType[] = [];\n\tprivate _param_names: string[] = [];\n\tprivate _non_spare_params: BaseParamType[] = [];\n\tprivate _spare_params: BaseParamType[] = [];\n\tprivate _non_spare_param_names: string[] = [];\n\tprivate _spare_param_names: string[] = [];\n\n\tprivate _params_node: CoreGraphNode | undefined;\n\t// private _params_eval_key: string;\n\tprivate _params_added_since_last_params_eval: boolean = false;\n\t// private _current_param_folder_name: string | undefined;\n\n\t// hooks\n\tprivate _post_create_params_hook: PostCreateParamsHook | undefined;\n\tprivate _on_scene_load_hooks: OnSceneLoadHook[] | undefined;\n\tprivate _on_scene_load_hook_names: string[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tprivate init_dependency_node() {\n\t\tif (!this._params_node) {\n\t\t\t// TODO: consider not having a params_node for nodes which have no parameters\n\t\t\tthis._params_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t// this._params_node.set_scene(this.node.scene);\n\t\t\tthis.node.add_graph_input(this._params_node);\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.init_dependency_node();\n\t\t// this.reset_params()\n\t\tthis._param_create_mode = true;\n\n\t\tthis.init_from_params_config();\n\t\tthis.node.create_params();\n\t\tthis._post_create_params();\n\t}\n\tprivate _post_create_params() {\n\t\tthis._update_caches();\n\t\t// this._create_params_ui_data_dependencies();\n\t\tthis.init_param_accessors();\n\t\tthis._param_create_mode = false;\n\n\t\tthis.run_post_create_params_hook();\n\n\t\t// This was to debug a weird bug where I was adding nodes to the list\n\t\t// of params, from the DependenciesController\n\t\t// this._params_list.push = (...items: BaseParamType[]) => {\n\t\t// \tif (items[0] && !items[0].compute) {\n\t\t// \t\tconsole.warn('adding params', items);\n\t\t// \t}\n\t\t// \tfor (let i of items) {\n\t\t// \t\tthis._params_list[this._params_list.length] = i;\n\t\t// \t}\n\t\t// \treturn 0;\n\t\t// };\n\t}\n\tupdate_params(options: ParamsUpdateOptions) {\n\t\tlet has_created_a_param = false;\n\t\tlet has_deleted_a_param = false;\n\t\tif (options.names_to_delete) {\n\t\t\tfor (let name of options.names_to_delete) {\n\t\t\t\tif (this.has(name)) {\n\t\t\t\t\tthis.delete_param(name);\n\t\t\t\t\thas_deleted_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.to_add) {\n\t\t\tfor (let param_data of options.to_add) {\n\t\t\t\tconst param = this.add_param(\n\t\t\t\t\tparam_data.type,\n\t\t\t\t\tparam_data.name,\n\t\t\t\t\tparam_data.init_value,\n\t\t\t\t\tparam_data.options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\thas_created_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (has_deleted_a_param || has_created_a_param) {\n\t\t\tthis._update_caches();\n\t\t\tthis.init_param_accessors();\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\tpost_create_spare_params() {\n\t\tthis._update_caches();\n\t\tthis.init_param_accessors();\n\t}\n\n\tprivate init_from_params_config() {\n\t\tconst params_config = this.node.params_config as NodeParamsConfig;\n\t\tif (params_config) {\n\t\t\tfor (let name of Object.keys(params_config)) {\n\t\t\t\tconst config = params_config[name];\n\t\t\t\tthis.add_param(config.type, name, config.init_value, config.options);\n\t\t\t}\n\t\t}\n\t}\n\tprivate init_param_accessors() {\n\t\tlet current_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\t\tthis._remove_unneeded_accessors(current_names_in_accessor);\n\t\t// update var after having removed accessors\n\t\tcurrent_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\n\t\tfor (let param of this.all) {\n\t\t\tconst is_spare: boolean = param.options.is_spare;\n\n\t\t\tconst param_not_yet_in_accessors = !current_names_in_accessor.includes(param.name);\n\n\t\t\tif (param_not_yet_in_accessors || is_spare) {\n\t\t\t\tObject.defineProperty(this.node.pv, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param.value;\n\t\t\t\t\t},\n\t\t\t\t\t// only spare parameters can be removed\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t\tObject.defineProperty(this.node.p, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param;\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprivate _remove_unneeded_accessors(current_names_in_accessor: string[]) {\n\t\tconst current_param_names = this._param_names;\n\t\tconst names_to_remove = [];\n\t\tfor (let current_name_in_accessor of current_names_in_accessor) {\n\t\t\tif (!current_param_names.includes(current_name_in_accessor)) {\n\t\t\t\tnames_to_remove.push(current_name_in_accessor);\n\t\t\t}\n\t\t}\n\n\t\tfor (let name_to_remove of names_to_remove) {\n\t\t\tObject.defineProperty(this.node.pv, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t\tObject.defineProperty(this.node.p, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tget params_node() {\n\t\treturn this._params_node;\n\t}\n\tget all() {\n\t\treturn this._params_list;\n\t}\n\tget non_spare() {\n\t\treturn this._non_spare_params;\n\t}\n\tget spare() {\n\t\treturn this._spare_params;\n\t}\n\tget names(): string[] {\n\t\treturn this._param_names;\n\t}\n\tget non_spare_names(): string[] {\n\t\treturn this._non_spare_param_names;\n\t}\n\tget spare_names(): string[] {\n\t\treturn this._spare_param_names;\n\t}\n\t// get params_by_name() {\n\t// \treturn this._params_by_name;\n\t// }\n\t// get all_params() {\n\t// \t// return lodash_concat(lodash_values(this._params), lodash_values(this._spare_params));\n\t// \treturn lodash_values(this._params);\n\t// }\n\n\tprivate set_with_type<T extends ParamType>(name: string, value: ParamInitValuesTypeMap[T], type: T) {\n\t\tconst param = this.param_with_type(name, type);\n\t\tif (param) {\n\t\t\tparam.set(value as never);\n\t\t} else {\n\t\t\tconsole.warn(`param ${name} not found with type ${type}`);\n\t\t}\n\t}\n\tset_float(name: string, value: ParamInitValuesTypeMap[ParamType.FLOAT]) {\n\t\tthis.set_with_type(name, value, ParamType.FLOAT);\n\t}\n\tset_vector3(name: string, value: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tthis.set_with_type(name, value, ParamType.VECTOR3);\n\t}\n\n\thas_param(name: string) {\n\t\treturn this._params_by_name[name] != null;\n\t}\n\thas(name: string) {\n\t\treturn this.has_param(name);\n\t}\n\tget(name: string) {\n\t\treturn this.param(name);\n\t}\n\tparam_with_type<T extends ParamType>(name: string, type: T): ParamConstructorMap[T] | undefined {\n\t\tconst param = this.param(name);\n\t\tif (param && param.type == type) {\n\t\t\treturn param as ParamConstructorMap[T];\n\t\t}\n\t}\n\tget_float(name: string): FloatParam {\n\t\treturn this.param_with_type(name, ParamType.FLOAT) as FloatParam;\n\t}\n\tget_operator_path(name: string): OperatorPathParam {\n\t\treturn this.param_with_type(name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n\t}\n\tvalue(name: string) {\n\t\treturn this.param(name)?.value;\n\t}\n\tvalue_with_type<T extends ParamType>(name: string, type: T): ParamValuesTypeMap[T] {\n\t\treturn this.param_with_type(name, type)?.value as ParamValuesTypeMap[T];\n\t\t// const param = this.param(name);\n\t\t// if (param && param.type() == type) {\n\t\t// \treturn param.value();\n\t\t// }\n\t}\n\tboolean(name: string) {\n\t\treturn this.value_with_type(name, ParamType.BOOLEAN);\n\t}\n\tfloat(name: string) {\n\t\treturn this.value_with_type(name, ParamType.FLOAT);\n\t}\n\tinteger(name: string) {\n\t\treturn this.value_with_type(name, ParamType.INTEGER);\n\t}\n\tstring(name: string) {\n\t\treturn this.value_with_type(name, ParamType.STRING);\n\t}\n\tvector2(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR2);\n\t}\n\tvector3(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR3);\n\t}\n\tcolor(name: string) {\n\t\treturn this.value_with_type(name, ParamType.COLOR);\n\t}\n\n\tparam(name: string) {\n\t\tconst p = this._params_by_name[name];\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`tried to access param '${name}' in node ${this.node.full_path()}, but existing params are: ${\n\t\t\t\t\tthis.names\n\t\t\t\t} on node ${this.node.full_path()}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\t// param_cache_name(param_name: string) {\n\t// \treturn `_param_${param_name}`;\n\t// }\n\n\t// delete_params(param_names: string[]) {\n\t// \tfor (let param_name of param_names) {\n\t// \t\tthis.delete_param(param_name);\n\t// \t}\n\n\t// }\n\t// call update_params instead\n\tprivate delete_param(param_name: string) {\n\t\tconst param = this._params_by_name[param_name];\n\t\tif (param) {\n\t\t\tif (this._params_node) {\n\t\t\t\tthis._params_node.remove_graph_input(this._params_by_name[param_name]);\n\t\t\t}\n\t\t\tparam.set_node(null);\n\t\t\tdelete this._params_by_name[param_name];\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tconst child_name = component.name;\n\t\t\t\t\tdelete this._params_by_name[child_name];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// const name_index = this._param_names.indexOf(param_name)\n\t\t\t// if(name_index >= 0){\n\t\t\t// \tthis._param_names.splice(name_index, 1)\n\t\t\t// }\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t} else {\n\t\t\tthrow new Error(`param '${param_name}' does not exist on node ${this.node.full_path()}`);\n\t\t}\n\t}\n\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tinit_value: ParamInitValuesTypeMap[T],\n\t\toptions: ParamOptions = {}\n\t): ParamConstructorMap[T] | undefined {\n\t\tconst is_spare = options['spare'] || false;\n\t\tif (this._param_create_mode === false && !is_spare) {\n\t\t\tconsole.warn(\n\t\t\t\t`node ${this.node.full_path()} (${\n\t\t\t\t\tthis.node.type\n\t\t\t\t}) param '${name}' cannot be created outside of create_params`\n\t\t\t);\n\t\t}\n\t\tif (this.node.scene == null) {\n\t\t\tconsole.warn(`node ${this.node.full_path()} (${this.node.type}) has no scene assigned`);\n\t\t}\n\n\t\tconst constructor = ParamConstructorByType[type];\n\t\tif (constructor != null) {\n\t\t\tconst existing_param = this._params_by_name[name];\n\t\t\tif (existing_param) {\n\t\t\t\tif (is_spare) {\n\t\t\t\t\t// delete the old one, otherwise the gl nodes when saved will attempt to set the value\n\t\t\t\t\t// of a param with the potentially wrong type\n\t\t\t\t\tif (existing_param.type != type) {\n\t\t\t\t\t\tthis.delete_param(existing_param.name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check that the param is spare, so that the ones generated by gl nodes are not generating an exception\n\t\t\t\t\tconsole.warn(`a param named ${name} already exists`, this.node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst param: ParamConstructorMap[T] = new constructor(this.node.scene);\n\t\t\tparam.options.set(options);\n\n\t\t\tparam.set_name(name);\n\t\t\tparam.set_init_value(init_value as never);\n\t\t\tparam.init_components();\n\t\t\tparam.set(init_value as never);\n\t\t\tparam.set_node(this.node);\n\n\t\t\tthis._params_by_name[param.name] = param as BaseParamType;\n\n\t\t\t// we add the components, so that we can access them with expressions like ch('ty')\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tthis._params_by_name[component.name] = component as BaseParamType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._params_added_since_last_params_eval = true;\n\n\t\t\treturn param;\n\t\t}\n\t}\n\n\tprivate _update_caches() {\n\t\tthis._params_list = Object.values(this._params_by_name);\n\t\tthis._param_names = Object.keys(this._params_by_name);\n\t\tthis._non_spare_params = Object.values(this._params_by_name).filter((p) => !p.options.is_spare);\n\t\tthis._spare_params = Object.values(this._params_by_name).filter((p) => p.options.is_spare);\n\t\tthis._non_spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => !p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\tthis._spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t}\n\n\tasync _eval_param(param: BaseParamType) {\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// const param_cache_name = this.param_cache_name(param.name());\n\t\t// const cached_value = this[param_cache_name] || null;\n\t\tif (/*cached_value == null ||*/ param.is_dirty /* || param.is_errored()*/) {\n\t\t\t/*const param_value =*/ await param.compute(); //.then(param_value=>{\n\t\t\t// this[param_cache_name] = param_value;\n\t\t\tif (param.states.error.active) {\n\t\t\t\tthis.node.states.error.set(`param '${param.name}' error: ${param.states.error.message}`);\n\t\t\t}\n\t\t\t// return param_value;\n\t\t} else {\n\t\t\t// return param.value;\n\t\t}\n\t\t// });\n\t}\n\n\tasync eval_params(params: BaseParamType[]) {\n\t\tconst promises = [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (params[i].is_dirty) {\n\t\t\t\tpromises.push(this._eval_param(params[i]));\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.node.set_container(null);\n\t\t}\n\t}\n\n\tasync eval_all() {\n\t\tif (this._params_node) {\n\t\t\tif (this._params_node.is_dirty || this._params_added_since_last_params_eval) {\n\t\t\t\tawait this.eval_params(this._params_list);\n\n\t\t\t\tthis._params_node.remove_dirty_state();\n\t\t\t\tthis._params_added_since_last_params_eval = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tset_post_create_params_hook(hook: PostCreateParamsHook) {\n\t\tthis._post_create_params_hook = hook;\n\t}\n\tadd_on_scene_load_hook(name: string, method: OnSceneLoadHook) {\n\t\tthis._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n\t\tthis._on_scene_load_hooks = this._on_scene_load_hooks || [];\n\n\t\tif (!this._on_scene_load_hook_names.includes(name)) {\n\t\t\tthis._on_scene_load_hook_names.push(name);\n\t\t\tthis._on_scene_load_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\trun_post_create_params_hook() {\n\t\tif (this._post_create_params_hook) {\n\t\t\tthis._post_create_params_hook();\n\t\t}\n\t}\n\trun_on_scene_load_hooks() {\n\t\tif (this._on_scene_load_hooks) {\n\t\t\tfor (let hook of this._on_scene_load_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\n// import lodash_includes from 'lodash/includes'\nimport lodash_isString from 'lodash/isString';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class BooleanParam extends TypedNumericParam<ParamType.BOOLEAN> {\n\tstatic type() {\n\t\treturn ParamType.BOOLEAN;\n\t}\n\t// TODO: be careful as this does not allow serialization of expressions as default value\n\tget default_value_serialized() {\n\t\tif (lodash_isString(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.convert(this.default_value) || false;\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BOOLEAN], val2: ParamValuesTypeMap[ParamType.BOOLEAN]) {\n\t\treturn val1 == val2;\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.BOOLEAN]): boolean | null {\n\t\tif (lodash_isBoolean(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (lodash_isNumber(raw_val)) {\n\t\t\t\treturn raw_val >= 1;\n\t\t\t} else {\n\t\t\t\tif (lodash_isString(raw_val)) {\n\t\t\t\t\tif (CoreString.is_boolean(raw_val)) {\n\t\t\t\t\t\treturn CoreString.to_boolean(raw_val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\t\t\t\treturn parsed >= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t// convert_value(v: ParamInputValue): boolean {\n\t// \treturn this.value_to_boolean(v)\n\t// }\n\t// convert_default_value(v: ParamInputValue): number {\n\t// \tif (lodash_isString(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\treturn this.value_to_boolean(v) // ? 1 : 0\n\t// \t}\n\t// }\n\t// is_value_expression(v: ParamInputValue): boolean {\n\t// \treturn !lodash_includes([true, false, 0, 1, '0', '1'], v)\n\t// }\n\n\t// value_to_boolean(v: ParamInputValue): boolean {\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\tif (lodash_isNumber(v)) {\n\t// \t\t\treturn v > 0\n\t// \t\t} else {\n\t// \t\t\treturn parseInt(v) > 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// eval(callback) {\n\t// \treturn this.eval_raw((val) => {\n\t// \t\tconst boolean_result = this.value_to_boolean(val)\n\t// \t\treturn callback(boolean_result)\n\t// \t})\n\t// }\n}\n","import {BaseParamType} from '../params/_Base';\nimport {ParsedTree} from './traversers/ParsedTree';\n// import {MissingReferencesController} from './MissingReferencesController'\n// import CoreWalker from 'src/core/Walker'\n\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\nimport {ExpressionStringGenerator} from './traversers/ExpressionStringGenerator';\nimport {DependenciesController} from './DependenciesController';\nimport {ParamType} from '../poly/ParamType';\n\nexport class ExpressionManager {\n\tpublic parse_completed: boolean = false;\n\tprivate parse_started: boolean = false;\n\tprivate function_generator: FunctionGenerator;\n\tprivate expression_string_generator: ExpressionStringGenerator | undefined;\n\tpublic dependencies_controller: DependenciesController;\n\t// private _error_message: string | undefined;\n\tprivate parsed_tree: ParsedTree = new ParsedTree();\n\n\tconstructor(\n\t\tpublic param: BaseParamType // public element_index: number=0\n\t) {\n\t\tthis.function_generator = new FunctionGenerator(this.param);\n\t\tthis.dependencies_controller = new DependenciesController(this.param);\n\t}\n\n\tparse_expression(expression: string) {\n\t\tif (this.parse_started) {\n\t\t\tthrow new Error(`parse in progress for param ${this.param.full_path()}`);\n\t\t}\n\t\tthis.parse_started = true;\n\t\tthis.parse_completed = false;\n\t\tthis.parsed_tree = this.parsed_tree || new ParsedTree();\n\n\t\tthis.reset();\n\t\tif (this.param.type == ParamType.STRING) {\n\t\t\tthis.parsed_tree.parse_expression_for_string_param(expression);\n\t\t} else {\n\t\t\tthis.parsed_tree.parse_expression(expression);\n\t\t}\n\t\tthis.function_generator.parse_tree(this.parsed_tree);\n\n\t\tif (this.function_generator.error_message == null) {\n\t\t\tthis.dependencies_controller.update(this.function_generator);\n\t\t\tif (this.dependencies_controller.error_message) {\n\t\t\t\tthis.param.states.error.set(this.dependencies_controller.error_message);\n\t\t\t} else {\n\t\t\t\tthis.parse_completed = true;\n\t\t\t\tthis.parse_started = false;\n\t\t\t}\n\t\t} //else {\n\t\t//this.set_error(this.function_generator.error_message);\n\t\t//}\n\t}\n\tasync compute_function(): Promise<any> {\n\t\t// this.parse_and_update_dependencies_if_not_done(expression);\n\t\tif (this.compute_allowed()) {\n\t\t\ttry {\n\t\t\t\tconst new_value = await this.function_generator.eval_function();\n\t\t\t\treturn new_value;\n\t\t\t} catch (e) {\n\t\t\t\t// if (this.function_generator.is_errored && this.function_generator.error_message) {\n\t\t\t\t// \tthis.set_error(this.function_generator.error_message);\n\t\t\t\t// }\n\t\t\t\treturn new Promise((resolve, reject) => resolve());\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.parse_completed = false;\n\t\tthis.parse_started = false;\n\t\t// this._error_message = undefined;\n\t\t// if(force){ // || this.element_index <= 1){\n\t\tthis.dependencies_controller.reset();\n\t\t// }\n\t\tthis.function_generator.reset();\n\t}\n\n\tget is_errored(): boolean {\n\t\treturn this.function_generator.is_errored;\n\t}\n\tget error_message() {\n\t\treturn this.function_generator.error_message;\n\t}\n\n\tprivate compute_allowed(): boolean {\n\t\treturn /*this._error_message == null &&*/ this.function_generator.eval_allowed();\n\t}\n\n\t// private parse_and_update_dependencies(expression: string) {\n\t// \tif (this.param.has_expression()) {\n\t// \t\tthis.parse_expression(expression);\n\n\t// \t\tif (this.error_message != null) {\n\t// \t\t\tthis.param.states.error.set(`expression error: \"${expression}\" (${this.error_message})`);\n\t// \t\t}\n\t// \t\t// this.parse_completed = true\n\t// \t}\n\t// }\n\t// private parse_and_update_dependencies_if_not_done(expression: string) {\n\t// \tif (!this.parse_completed) {\n\t// \t\tthis.parse_and_update_dependencies(expression);\n\t// \t}\n\t// }\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.expression_string_generator =\n\t\t\tthis.expression_string_generator || new ExpressionStringGenerator(this.param);\n\n\t\tconst new_expression_string = this.expression_string_generator.parse_tree(this.parsed_tree);\n\n\t\tif (new_expression_string) {\n\t\t\tthis.param.set(new_expression_string);\n\t\t} else {\n\t\t\tconsole.warn('failed to regenerate expression');\n\t\t}\n\t\t// this.param.expression_controller?.set_expression(new_expression_string);\n\n\t\t// this.reset()\n\t\t// if (new_expression_string) {\n\t\t// this.parse_expression(new_expression_string);\n\t\t// }\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {ParsedTree} from './ParsedTree';\nimport {LiteralConstructsController, LiteralConstructMethod} from '../LiteralConstructsController';\nimport {BaseMethod} from '../methods/_Base';\nimport {MethodModule} from '../methods/_Module';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\nimport lodash_isString from 'lodash/isString';\n\n// import {JsepsByString} from '../DependenciesController'\nimport jsep from 'jsep';\n\n// import {Vector3} from 'three/src/math/Vector3'\ntype LiteralConstructDictionary = Dictionary<LiteralConstructMethod>;\ntype AnyDictionary = Dictionary<any>;\n\nconst NATIVE_MATH_METHODS = [\n\t'abs',\n\t'acos',\n\t'asin',\n\t'atan',\n\t'ceil',\n\t'cos',\n\t'exp',\n\t'floor',\n\t'max',\n\t'min',\n\t'pow',\n\t'round',\n\t'sign',\n\t'sin',\n\t'sqrt',\n\t'tan',\n];\nconst NATIVE_MATH_METHODS_RENAMED: AnyDictionary = {\n\tmath_random: 'random',\n};\nconst CORE_MATH_METHODS = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'];\nimport {Easing} from '../../../core/math/Easing';\nconst EASING_METHODS = Object.keys(Easing);\n\nconst CORE_STRING_METHODS = ['precision'];\nconst NATIVE_MATH_CONSTANTS = ['PI', 'E'];\n\nconst DIRECT_EXPRESSION_FUNCTIONS: AnyDictionary = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n\tconst remaped = NATIVE_MATH_METHODS_RENAMED[name];\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.String.${name}`;\n});\n\nconst LITERAL_CONSTRUCT: LiteralConstructDictionary = {\n\tif: LiteralConstructsController.if,\n};\n\nconst GLOBAL_CONSTANTS: Dictionary<string> = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n\tGLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\n\nconst INDIRECT_EXPRESSION_METHODS: AnyDictionary = MethodModule;\n\n// const NODE_TYPE_METHODS = {\n// \tCallExpression: 'setup_graph_call_expression',\n// \tMemberExpression: 'setup_graph_member_expression',\n// \tBinaryExpression: 'setup_graph_binary_expression',\n// \tUnaryExpression: 'setup_graph_unary_expression',\n// \tLogicalExpression: 'setup_graph_logical_expression',\n// \tLiteral: 'setup_graph_literal',\n// \tIdentifier: 'setup_graph_identifier'\n// };\n//\n\n// const IDENTIFIER_METHODS = {\n// \t'$F': '_setup_graph_identifier_as_global_frame'\n// }\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = ', ';\nconst ATTRIBUTE_PREFIX = '@';\nimport {VARIABLE_PREFIX} from './_Base';\n\nconst PROPERTY_OFFSETS: AnyDictionary = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n\nimport {BaseTraverser} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {AttributeRequirementsController} from '../AttributeRequirementsController';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreString} from '../../../core/String';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\nconst AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;\n\nexport class FunctionGenerator extends BaseTraverser {\n\tprivate function: Function | undefined;\n\t// private function_pre_entities_loop_lines: string[] = [];\n\tprivate _attribute_requirements_controller = new AttributeRequirementsController();\n\t// private function_pre_body:string\n\tprivate function_main_string: string | undefined;\n\tprivate methods: BaseMethod[] = [];\n\tprivate method_index: number = -1;\n\n\tpublic method_dependencies: MethodDependency[] = [];\n\tpublic immutable_dependencies: CoreGraphNode[] = [];\n\t// public jsep_dependencies: JsepDependency[] = []\n\t// public jsep_nodes_by_missing_paths: JsepsByString = {}\n\n\t// private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tpublic parse_tree(parsed_tree: ParsedTree) {\n\t\tthis.reset();\n\n\t\tif (parsed_tree.error_message == null) {\n\t\t\ttry {\n\t\t\t\t// this.function_pre_entities_loop_lines = [];\n\t\t\t\tthis._attribute_requirements_controller.reset();\n\t\t\t\t// this.function_pre_body = ''\n\t\t\t\tif (parsed_tree.node) {\n\t\t\t\t\tconst function_main_string = this.traverse_node(parsed_tree.node);\n\t\t\t\t\tif (function_main_string && !this.is_errored) {\n\t\t\t\t\t\tthis.function_main_string = function_main_string;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('no parsed_tree.node');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`error in expression for param ${this.param.full_path()}`);\n\t\t\t\tconsole.warn(e);\n\t\t\t}\n\n\t\t\tif (this.function_main_string) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.function = new AsyncFunction(\n\t\t\t\t\t\t'Core',\n\t\t\t\t\t\t'param',\n\t\t\t\t\t\t'methods',\n\t\t\t\t\t\t'_set_error_from_error',\n\t\t\t\t\t\t`\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${this.function_body()}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\tthis.set_error('cannot generate function');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.set_error('cannot generate function body');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse expression');\n\t\t}\n\t}\n\n\treset() {\n\t\tsuper.reset();\n\t\tthis.function_main_string = undefined;\n\t\tthis.methods = [];\n\t\tthis.method_index = -1;\n\t\tthis.function = undefined;\n\t\tthis.method_dependencies = [];\n\t\tthis.immutable_dependencies = [];\n\t}\n\n\tfunction_body() {\n\t\tif (this.param.options.is_expression_for_entities) {\n\t\t\treturn `\n\t\t\tconst entities = param.expression_controller.entities;\n\t\t\tif(entities){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\tlet entity;\n\t\t\t\t\tconst entity_callback = param.expression_controller.entity_callback;\n\t\t\t\t\t${this._attribute_requirements_controller.assign_attributes_lines()}\n\t\t\t\t\tif( ${this._attribute_requirements_controller.attribute_presence_check_line()} ){\n\t\t\t\t\t\t${this._attribute_requirements_controller.assign_arrays_lines()}\n\t\t\t\t\t\tfor(let index=0; index < entities.length; index++){\n\t\t\t\t\t\t\tentity = entities[index];\n\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\tentity_callback(entity, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = new Error('attribute not found')\n\t\t\t\t\t\t_set_error_from_error(error)\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n\t\t} else {\n\t\t\treturn `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\ttry {\n\t\t\t\t\tconst value = ${this.function_main_string}\n\t\t\t\t\tresolve(value)\n\t\t\t\t} catch(e) {\n\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\treject()\n\t\t\t\t}\n\t\t\t})\n\t\t\t`;\n\t\t}\n\t}\n\n\teval_allowed(): boolean {\n\t\treturn this.function != null;\n\t}\n\teval_function() {\n\t\t// this.param.entity_attrib_values = this.param.entity_attrib_values || {}\n\t\t// this.param.entity_attrib_values.position =\n\t\t// \tthis.param.entity_attrib_values.position || new THREE.Vector3()\n\t\tif (this.function) {\n\t\t\tthis.clear_error();\n\n\t\t\tconst Core = {\n\t\t\t\tMath: CoreMath,\n\t\t\t\tString: CoreString,\n\t\t\t};\n\t\t\tconst result = this.function(Core, this.param, this.methods, this._set_error_from_error_bound);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TRAVERSE METHODS\n\t//\n\t//\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string | undefined {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst callee = node.callee as jsep.Identifier;\n\t\tconst method_name = callee.name;\n\t\tif (method_name) {\n\t\t\t// literal construct (if...)\n\t\t\tconst literal_contruct = LITERAL_CONSTRUCT[method_name];\n\t\t\tif (literal_contruct) {\n\t\t\t\treturn literal_contruct(method_arguments);\n\t\t\t}\n\n\t\t\t// direct expressions (Math.floor, Math.sin...)\n\t\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\t\t\tconst direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n\t\t\tif (direct_function_name) {\n\t\t\t\treturn `${direct_function_name}(${arguments_joined})`;\n\t\t\t}\n\n\t\t\t// indirect methods (points_count, asset...)\n\t\t\tconst indirect_method = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\t\tif (indirect_method) {\n\t\t\t\tconst path_node = node.arguments[0];\n\t\t\t\t// const path_argument = this.string_generator.traverse_node(path_node)\n\t\t\t\tconst function_string = `return ${method_arguments[0]}`;\n\t\t\t\tlet path_argument_function;\n\t\t\t\tlet path_argument = [];\n\t\t\t\ttry {\n\t\t\t\t\tpath_argument_function = new Function(function_string);\n\t\t\t\t\tpath_argument = path_argument_function();\n\t\t\t\t} catch {\n\t\t\t\t\t// path_argument_function = new AsyncFunction(function_string)\n\t\t\t\t\t// it looks like if the input contains an await,\n\t\t\t\t\t// it is because it has been generated by another indirect function.\n\t\t\t\t\t// This means that the dependencies have been generated already\n\t\t\t\t\t// so we may not need to do it now\n\t\t\t\t}\n\n\t\t\t\tthis._create_method_and_dependencies(method_name, path_argument, path_node);\n\t\t\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_error(`unknown method: ${method_name}`);\n\t}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\tif (node.operator === ATTRIBUTE_PREFIX) {\n\t\t\tlet argument = node.argument;\n\t\t\tlet attribute_name;\n\t\t\tlet property;\n\t\t\tswitch (argument.type) {\n\t\t\t\tcase 'Identifier': {\n\t\t\t\t\tconst argument_identifier = (<unknown>argument) as jsep.Identifier;\n\t\t\t\t\tattribute_name = argument_identifier.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'MemberExpression': {\n\t\t\t\t\tconst argument_member_expression = (<unknown>argument) as jsep.MemberExpression;\n\t\t\t\t\tconst attrib_node = argument_member_expression.object as jsep.Identifier;\n\t\t\t\t\tconst property_node = argument_member_expression.property as jsep.Identifier;\n\t\t\t\t\tattribute_name = attrib_node.name;\n\t\t\t\t\tproperty = property_node.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// this.function_pre_body += `\n\t\t\t// param.entity_attrib_value(${QUOTE}${attrib_node.name}${QUOTE}, param.entity_attrib_values.position);\n\t\t\t// `\n\t\t\tif (attribute_name) {\n\t\t\t\tattribute_name = CoreAttribute.remap_name(attribute_name);\n\t\t\t\tif (attribute_name == 'ptnum') {\n\t\t\t\t\treturn '((entity != null) ? entity.index : 0)';\n\t\t\t\t} else {\n\t\t\t\t\tconst var_attribute_size = this._attribute_requirements_controller.var_attribute_size(\n\t\t\t\t\t\tattribute_name\n\t\t\t\t\t);\n\t\t\t\t\tconst var_array = this._attribute_requirements_controller.var_array(attribute_name);\n\t\t\t\t\tthis._attribute_requirements_controller.add(attribute_name);\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tconst property_offset = PROPERTY_OFFSETS[property];\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}+${property_offset}]`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn('attribute not found');\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t\t}\n\t}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string | undefined {\n\t\tconst identifier_first_char = node.name[0];\n\t\tif (identifier_first_char == VARIABLE_PREFIX) {\n\t\t\tconst identifier_name_without_dollar_sign = node.name.substr(1);\n\n\t\t\t// globals constants: Math.PI or Math.E\n\t\t\tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n\t\t\tif (direct_constant_name) {\n\t\t\t\treturn direct_constant_name;\n\t\t\t}\n\n\t\t\t// scene or node globals: $F, $FPS, $T, $CH, $OS\n\t\t\tconst method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n\t\t\tconst method = (this as any)[method_name];\n\t\t\tif (method) {\n\t\t\t\treturn (this as any)[method_name]();\n\t\t\t} else {\n\t\t\t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn node.name; // @ptnum will call this method and return \"ptnum\"\n\t\t}\n\t}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\tprotected traverse_Identifier_F(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.frame`;\n\t}\n\tprotected traverse_Identifier_FPS(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.fps`;\n\t}\n\tprotected traverse_Identifier_T(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.time`;\n\t}\n\tprotected traverse_Identifier_CH(): string {\n\t\treturn `${QUOTE}${this.param.name}${QUOTE}`;\n\t}\n\tprotected traverse_Identifier_CEX(): string {\n\t\treturn this._method_centroid('x');\n\t}\n\tprotected traverse_Identifier_CEY(): string {\n\t\treturn this._method_centroid('y');\n\t}\n\tprotected traverse_Identifier_CEZ(): string {\n\t\treturn this._method_centroid('z');\n\t}\n\t// TODO:\n\t// '$OS': '_eval_identifier_as_node_name',\n\t// '$BBX': '_eval_identifier_as_bounding_box_relative',\n\n\tprivate _method_centroid(component: string): string {\n\t\tconst method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n\t\tconst arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n\t\tthis._create_method_and_dependencies('centroid', 0);\n\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t}\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\tprivate _create_method_and_dependencies(\n\t\tmethod_name: string,\n\t\tpath_argument: number | string,\n\t\tpath_node?: jsep.Expression\n\t) {\n\t\tconst method_constructor = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\tconst method = new method_constructor(this.param) as BaseMethod;\n\t\tthis.method_index += 1;\n\t\tthis.methods[this.method_index] = method;\n\n\t\tconst method_dependency = method.find_dependency(path_argument);\n\t\tif (method_dependency) {\n\t\t\tif (path_node) {\n\t\t\t\tmethod_dependency.set_jsep_node(path_node);\n\t\t\t}\n\t\t\tthis.method_dependencies.push(method_dependency);\n\t\t} else {\n\t\t\tif (path_node && lodash_isString(path_argument)) {\n\t\t\t\tthis.param.scene.missing_expression_references_controller.register(\n\t\t\t\t\tthis.param,\n\t\t\t\t\tpath_node,\n\t\t\t\t\tpath_argument\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t// method_dependencies.resolved_graph_nodes.forEach((graph_node)=>{\n\t\t// \tif(path_node){\n\t\t// \t\tconst jsep_dependency = new JsepDependency(graph_node, path_node)\n\t\t// \t\tthis.jsep_dependencies.push(jsep_dependency)\n\t\t// \t} else {\n\t\t// \t\tthis.immutable_dependencies.push(graph_node)\n\t\t// \t}\n\n\t\t// })\n\n\t\t// if(path_node){\n\t\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(path_node)\n\t\t// \t})\n\t\t// }\n\t}\n}\n","export type LiteralConstructMethod = (args: any[]) => string\n\nexport class LiteralConstructsController {\n\tstatic if(args: any[]): string {\n\t\tconst condition = args[0]\n\t\tconst val_true = args[1]\n\t\tconst val_false = args[2]\n\t\treturn `(${condition}) ? (${val_true}) : (${val_false})`\n\t}\n}\n","// TODO: create an expression object that knows how many args it can accept, their type\n// and can throw an error and give it to the param, and then to the node\n// TODO: the expression should know how to update the node dependencies\n\n// import abs from './abs'\n// import {Asset} from './asset'\nimport {Bbox} from './bbox';\n// import ceil from './ceil'\nimport {Centroid} from './centroid';\nimport {Ch} from './ch';\nimport {Copy} from './copy';\nimport {CopRes} from './cop_res';\n// import clamp from './clamp'\n// import {Easein} from './easein'\n// import {Easeinout} from './easeinout'\n// import floor from './floor'\n// import humanize from './humanize'\nimport {Local} from './local';\n// import if_ from './if'\n// import max from './max'\n// import min from './min'\nimport {Opdigits} from './opdigits';\n// import object from './object'\n// import objects_count from './objects_count'\n// import objects_visible_count from './objects_visible_count'\nimport {Point} from './point';\nimport {PointsCount} from './points_count';\n// import {Precision} from './precision'\n// import rand from './rand'\n// import round from './round'\n// import sign from './sign'\nimport {StrCharsCount} from './str_chars_count';\nimport {StrConcat} from './str_concat';\nimport {StrIndex} from './str_index';\nimport {StrSub} from './str_sub';\n\nexport const MethodModule = {\n\t// 'asset': Asset,\n\tbbox: Bbox,\n\tch: Ch,\n\tcentroid: Centroid,\n\tcop_res: CopRes,\n\tlocal: Local,\n\topdigits: Opdigits,\n\tpoint: Point,\n\tpoints_count: PointsCount,\n\t// 'precision': Precision,\n\tcopy: Copy,\n\tstr_chars_count: StrCharsCount,\n\tstr_concat: StrConcat,\n\tstr_index: StrIndex,\n\tstr_sub: StrSub,\n};\n\n// import cos from './cos'\n// import sin from './sin'\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {GeometryContainer} from '../../containers/Geometry';\n\n// import Walker from 'src/core/Walker';\n\ninterface BoxComponents {\n\tmin: Vector3;\n\tmax: Vector3;\n\tsize: Vector3;\n\tcenter: Vector3;\n}\n\nconst VECTOR_NAMES: Array<keyof BoxComponents> = ['min', 'max', 'size', 'center'];\nconst COMPONENT_NAMES = ['x', 'y', 'z'];\n\nexport class Bbox extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'vector name, min, max, size or center'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\tlet value = 0;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst vector_name = args[1];\n\t\t\t\tconst component_name = args[2];\n\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tvalue = this._get_value_from_container(container, vector_name, component_name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _get_value_from_container(\n\t\tcontainer: GeometryContainer,\n\t\tvector_name: keyof BoxComponents,\n\t\tcomponent_name: keyof Vector3Like\n\t) {\n\t\tif (VECTOR_NAMES.indexOf(vector_name) >= 0) {\n\t\t\tconst bbox = container.bounding_box();\n\n\t\t\tlet vector = new Vector3();\n\t\t\tswitch (vector_name) {\n\t\t\t\tcase 'size':\n\t\t\t\t\tbbox.getSize(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\tbbox.getCenter(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvector = bbox[vector_name];\n\t\t\t}\n\n\t\t\tif (COMPONENT_NAMES.indexOf(component_name) >= 0) {\n\t\t\t\t//(value = vector[component_name])?\n\t\t\t\treturn vector[component_name];\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import BaseNode from 'src/engine/nodes/_Base'\nimport {DecomposedPath} from '../../core/DecomposedPath';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\nimport {BaseParamType} from '../params/_Base';\n// import {CoreObject} from '../../core/Object';\nimport {BaseNodeType} from '../nodes/_Base';\nimport jsep from 'jsep';\n\nexport class MethodDependency extends CoreGraphNode {\n\tpublic jsep_node: jsep.Expression | undefined;\n\tpublic resolved_graph_node: CoreGraphNode | undefined;\n\tpublic unresolved_path: string | undefined;\n\tprivate _update_from_name_change_bound = this._update_from_name_change.bind(this);\n\n\tconstructor(\n\t\tpublic param: BaseParamType,\n\t\tpublic path_argument: number | string,\n\t\tpublic decomposed_path?: DecomposedPath\n\t) {\n\t\tsuper(param.scene, 'MethodDependency');\n\n\t\t// this.set_scene(this.param.scene);\n\n\t\tthis.add_post_dirty_hook('_update_from_name_change', this._update_from_name_change_bound);\n\t}\n\t_update_from_name_change(trigger?: CoreGraphNode) {\n\t\tif (trigger && this.decomposed_path) {\n\t\t\tconst node = trigger as BaseNodeType;\n\t\t\tthis.decomposed_path.update_from_name_change(node);\n\t\t\tconst new_path = this.decomposed_path.to_path();\n\n\t\t\tconst literal = this.jsep_node as jsep.Literal;\n\t\t\tif (literal) {\n\t\t\t\tliteral.value = `${literal.value}`.replace(`${this.path_argument}`, new_path);\n\t\t\t\tliteral.raw = literal.raw.replace(`${this.path_argument}`, new_path);\n\t\t\t}\n\t\t\tif (this.param.expression_controller) {\n\t\t\t\tthis.param.expression_controller.update_from_method_dependency_name_change();\n\t\t\t}\n\t\t}\n\t}\n\treset() {\n\t\tthis.graph_disconnect_predecessors();\n\t}\n\n\tlisten_for_name_changes() {\n\t\tif (this.jsep_node && this.decomposed_path) {\n\t\t\tthis.decomposed_path.named_nodes.forEach((node_in_path) => {\n\t\t\t\tif (node_in_path) {\n\t\t\t\t\tconst node = node_in_path as BaseNodeType;\n\t\t\t\t\tif (node.name_controller) {\n\t\t\t\t\t\tthis.add_graph_input(node.name_controller.graph_node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tset_jsep_node(jsep_node: jsep.Expression) {\n\t\tthis.jsep_node = jsep_node;\n\t}\n\tset_resolved_graph_node(node: CoreGraphNode) {\n\t\tthis.resolved_graph_node = node;\n\t}\n\tset_unresolved_path(path: string) {\n\t\tthis.unresolved_path = path;\n\t}\n\n\tstatic create(\n\t\tparam: BaseParamType,\n\t\tindex_or_path: number | string,\n\t\tnode: CoreGraphNode,\n\t\tdecomposed_path?: DecomposedPath\n\t) {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\n\t\t// if(!decomposed_path){\n\t\t// \tconsole.log('nodes_in_path', decomposed_path.named_nodes);\n\t\t// \tfor (let node_in_path of decomposed_path.named_nodes) {\n\t\t// \t\tif (node_in_path) {\n\t\t// \t\t\tdecomposed_path.add_node(node_in_path.name, node_in_path);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst instance = new MethodDependency(param, index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\tinstance.set_resolved_graph_node(node);\n\t\t} else {\n\t\t\tif (!is_index) {\n\t\t\t\tconst path = index_or_path as string;\n\t\t\t\tinstance.set_unresolved_path(path);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {GeometryContainer} from '../../containers/Geometry';\n\nexport class Centroid extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// const path = args\n\t\t\t// this.get_referenced_param(path).eval_p().then(val=>{\n\t\t\t// \tresolve(val)\n\t\t\t// })\n\t\t\tif (args.length == 2) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst component_name = args[1] as keyof Vector3Like;\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst bbox = container.bounding_box();\n\t\t\t\t\tconst center = bbox.min\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.add(bbox.max)\n\t\t\t\t\t\t.multiplyScalar(0.5);\n\n\t\t\t\t\tconst value = center[component_name];\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// throw \"only component names are x, y and z\";\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t\t// return this._get_param_value(args[0], args[1], callback);\n\t}\n\n\t// _get_param_value(index_or_path, component_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tlet value;\n\t// \t\tconst bbox = container.bounding_box();\n\t// \t\tconst size = bbox.min.clone().add(bbox.max).multiplyScalar(0.5);\n\n\t// \t\tif ((value = size[component_name]) != null) {\n\t// \t\t\treturn callback(value);\n\t// \t\t} else {\n\t// \t\t\tthrow \"only component names are x, y and z\";\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","// import lodash_isNumber from 'lodash/isNumber';\n\nimport {BaseMethod} from './_Base';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\n\nexport class Ch extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to param']];\n\t}\n\n\t// dependencies(args: any[]): any[]{\n\t// \tconst path = args[0]\n\t// \treturn [this.get_referenced_param(path)]\n\t// }\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst param = this.get_referenced_param(index_or_path as string, decomposed_path);\n\t\tif (param) {\n\t\t\treturn this.create_dependency(param, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('could not find param');\n\t\t}\n\t\treturn null;\n\t\t// const reference_search_result = new ReferenceSearchResult()\n\t\t// const param = this.get_referenced_param(index_or_path)\n\t\t// if(param){\n\t\t// \treference_search_result.set_found_graph_nodes([param])\n\t\t// } else {\n\t\t// \treference_search_result.set_missing_paths([path])\n\t\t// }\n\n\t\t// return reference_search_result\n\t}\n\t// find_dependencies(index_or_path: number|string): MethodDependency{\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<any> {\n\t\tlet val: any = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst path = args[0];\n\t\t\tconst ref = this.get_referenced_param(path);\n\t\t\tif (ref) {\n\t\t\t\tawait ref.compute();\n\t\t\t\tconst result = ref.value;\n\t\t\t\tif (result != null) {\n\t\t\t\t\t// if (lodash_isNumber(result)) {\n\t\t\t\t\tval = result;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn val;\n\t}\n\n\t// _get_param_value(path, callback){\n\t// \treturn this.get_referenced_param(path).eval(val=> {\n\t// \t\treturn callback(val);\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {CoreWalker} from '../../../core/Walker';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class Copy extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to copy'],\n\t\t\t['integer', 'default value'],\n\t\t];\n\t}\n\tstatic optional_arguments() {\n\t\treturn [['string', 'attribute name (optional)']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path) as BaseNodeType;\n\t\t// I'd prefer testing with if(node instanceof CopySopNode)\n\t\t// but tslib generates an error when doing so\n\t\tif (node && node.type == 'copy') {\n\t\t\tconst stamp_node = (node as CopySopNode).stamp_node;\n\t\t\treturn this.create_dependency(stamp_node, index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\t// \t// return this.find_node_dependency_from_index_or_path(index_or_path)\n\t// \tconst node = this.find_dependency_from_index_or_path(index_or_path)\n\t// \treturn this.create_search_result(stamp_node, index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 2 || args.length == 3) {\n\t\t\t\tconst path = args[0];\n\t\t\t\tconst default_value = args[1];\n\t\t\t\tconst attribute_name = args[2];\n\n\t\t\t\tconst node = CoreWalker.find_node(this.node, path);\n\n\t\t\t\tlet value;\n\t\t\t\tif (node && node.type == 'copy') {\n\t\t\t\t\tvalue = (node as CopySopNode).stamp_value(attribute_name);\n\t\t\t\t}\n\t\t\t\t// if (node && node instanceof CopySopNode) {\n\t\t\t\t// \tvalue = node.stamp_value(attribute_name);\n\t\t\t\t// }\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = default_value;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\t// update_dependencies() {\n\t// \treturn this.jsep_node()._graph_node.add_graph_input( this.copy_sop.stamp_node() );\n\t// }\n\n\t// process_arguments(args, callback){\n\t// \tconst path = args[0];\n\t// \tconst default_value = args[1];\n\t// \tconst attribute_name = args[2];\n\n\t// \tthis.copy_sop = Walker.find_node(this.node(), path);\n\t// \tlet value = (this.copy_sop != null) ?\n\t// \t\tthis.copy_sop.stamp_value(attribute_name) : undefined;\n\n\t// \tif (value == null) { value = default_value; }\n\n\t// \treturn callback(value);\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {TextureContainer} from '../../containers/Texture';\n\nexport class CopRes extends BaseMethod {\n\t// cop_res(0, 'x')\n\t// cop_res('../REF_bbox', 'x')\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name: x or y'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 2) {\n\t\t\tconst index_or_path = args[0];\n\t\t\tconst component_name = args[1];\n\t\t\tconst container = (await this.get_referenced_node_container(index_or_path)) as TextureContainer;\n\n\t\t\tif (container) {\n\t\t\t\tconst resolution = container.resolution();\n\t\t\t\tif ([0, '0', 'x'].includes(component_name)) {\n\t\t\t\t\tvalue = resolution[0];\n\t\t\t\t} else {\n\t\t\t\t\tif ([1, '1', 'y'].includes(component_name)) {\n\t\t\t\t\t\tvalue = resolution[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {POLY} from '../../Poly';\n\nexport class Local extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path']];\n\t}\n\n\tprocess_arguments(args: any[]): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.request_asset_url(args[0]).then((url) => {\n\t\t\t\tresolve(url);\n\t\t\t});\n\t\t});\n\t}\n\t// find_dependency(index_or_path: number | string): MethodDependency {\n\t// \treturn null\n\t// }\n\n\t// TODO: add error management\n\trequest_asset_url(name: string): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// const scene = this.node.scene()\n\t\t\t// const scene_uuid = scene.uuid();\n\n\t\t\tlet url;\n\n\t\t\tif (POLY.desktop_controller().active()) {\n\t\t\t\tPOLY.desktop_controller().add_local_path(name, this.param);\n\t\t\t\turl = POLY.desktop_controller().local_path_server_url(name);\n\t\t\t\tresolve(url);\n\t\t\t} else {\n\t\t\t\treturn resolve('');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {CoreString} from '../../../core/String';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class Opdigits extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst graph_node = this.find_referenced_graph_node(index_or_path);\n\t\tif (graph_node) {\n\t\t\tconst node = graph_node as BaseNodeType;\n\t\t\tif (node.name_controller) {\n\t\t\t\tconst name_node = node.name_controller.graph_node;\n\t\t\t\treturn this.create_dependency(name_node, index_or_path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t\t// return [this.create_dependency_from_index_or_path(index_or_path)]\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\n\t// \t// TODO: ensure the dependency update works for space params when they get renamed\n\t// \tconsole.log(node)\n\t// \tconst name_node = node.name_graph_node()\n\t// \treturn this.create_search_result(name_node, index_or_path)\n\t// \t// return this.create_reference_search_result_from_index_or_path(index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst node = this.get_referenced_node(index_or_path);\n\t\t\t\tif (node) {\n\t\t\t\t\tconst name = node.name;\n\t\t\t\t\tconst value = CoreString.tail_digits(name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group'\n\nexport class Point extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['index', 'point index'],\n\t\t\t['string', 'attribute name'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst attrib_name = args[1];\n\t\t\t\tconst point_index = args[2];\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = this._get_value_from_container(container, attrib_name, point_index);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\t_get_value_from_container(container: GeometryContainer, attrib_name: string, point_index: number) {\n\t\tconst core_group = container.core_content();\n\t\t// TODO: optimise and store the group_wrapper in the json_node\n\t\tif (core_group) {\n\t\t\tconst point = core_group.points()[point_index];\n\n\t\t\tif (point) {\n\t\t\t\treturn point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// _get_param_value(index_or_path, point_index, attrib_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tconst group = container.group({clone: false});\n\t// \t\tconst group_wrapper = new Core.Geometry.Group(group);\n\t// \t\t// TODO: optimise and store the group_wrapper in the json_node\n\t// \t\tconst point = group_wrapper.points()[point_index];\n\n\t// \t\tif (point != null) {\n\t// \t\t\tconst value = point.attrib_value(attrib_name);\n\t// \t\t\tif (value != null) {\n\t// \t\t\t\treturn callback(value);\n\t// \t\t\t} else {\n\t// \t\t\t\t//throw \"no attribute #{attrib_name} found\"\n\t// \t\t\t\tconsole.error(`no attribute ${attrib_name} found`);\n\t// \t\t\t\treturn callback(0);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`no point found with index ${point_index}`);\n\t// \t\t\treturn callback(0);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group';\n\nexport class PointsCount extends BaseMethod {\n\t// npoints(0)\n\t// npoints('../REF_bbox')\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tlet container: GeometryContainer;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = container.points_count();\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrCharsCount extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [['string', 'string to count characters of']];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst string = args[0];\n\t\t\tvalue = string.length;\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrConcat extends BaseMethod {\n\t// str_concat(1,2) => '12'\n\t// str_concat(1,\"a\") => '1a'\n\t// str_concat(\"a\",12, \"b\", \" \", 17) => 'a12b 17'\n\tstatic required_arguments(): any[] {\n\t\treturn [\n\t\t\t// ['string', 'string to get range from'],\n\t\t\t// ['integer', 'range start'],\n\t\t\t// ['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg == null) {\n\t\t\t\targ = '';\n\t\t\t}\n\t\t\tvalue += `${arg}`;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrIndex extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get index from'],\n\t\t\t['string', 'char to find index of'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = -1;\n\t\tif (args.length == 2) {\n\t\t\tconst string = args[0];\n\t\t\tconst sub_string = args[1];\n\t\t\tvalue = string.indexOf(sub_string);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrSub extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get range from'],\n\t\t\t['integer', 'range start'],\n\t\t\t['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): MethodDependency | null {\n\t// \treturn null;\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\t\tconst string = args[0];\n\t\tconst range_start = args[1] || 0;\n\t\tlet range_size = args[2] || 1;\n\t\tif (string) {\n\t\t\tvalue = string.substr(range_start, range_size);\n\t\t}\n\t\treturn value;\n\t}\n}\n","export class AttributeRequirementsController {\n\tprivate _attribute_names: Set<string> | undefined;\n\tconstructor() {}\n\n\treset() {\n\t\tif (this._attribute_names) {\n\t\t\tthis._attribute_names.clear();\n\t\t}\n\t}\n\tassign_attributes_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_attribute_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tassign_arrays_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_item_size_line(attribute_name));\n\t\t\t\tlines.push(AttributeRequirementsController.assign_array_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tattribute_presence_check_line(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst var_names: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tconst var_name = AttributeRequirementsController.var_attribute(attribute_name);\n\t\t\t\tvar_names.push(var_name);\n\t\t\t});\n\t\t\treturn var_names.join(' && ');\n\t\t} else {\n\t\t\treturn 'true';\n\t\t}\n\t}\n\n\tadd(attribute_name: string) {\n\t\tthis._attribute_names = this._attribute_names || new Set<string>();\n\t\tthis._attribute_names.add(attribute_name);\n\t}\n\n\tstatic assign_attribute_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\treturn `const ${var_attribute} = entities[0].geometry().attributes['${attribute_name}']`;\n\t}\n\tstatic assign_item_size_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_attribute_size = this.var_attribute_size(attribute_name);\n\t\treturn `const ${var_attribute_size} = ${var_attribute}.itemSize`;\n\t}\n\tstatic assign_array_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_array = this.var_array(attribute_name);\n\t\treturn `const ${var_array} = ${var_attribute}.array`;\n\t}\n\n\tstatic var_attribute(attribute_name: string) {\n\t\treturn `attrib_${attribute_name}`;\n\t}\n\tstatic var_attribute_size(attribute_name: string) {\n\t\treturn `attrib_size_${attribute_name}`;\n\t}\n\tstatic var_array(attribute_name: string) {\n\t\treturn `array_${attribute_name}`;\n\t}\n\tvar_attribute_size(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_attribute_size(attribute_name);\n\t}\n\tvar_array(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_array(attribute_name);\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {ParsedTree} from './ParsedTree';\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesControler} from './MissingReferencesController'\n\nconst ARGUMENTS_SEPARATOR = ', ';\n// const ATTRIBUTE_PREFIX = '@'\n// const VARIABLE_PREFIX = '$'\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n// interface JsepsByString {\n// \t[propName: string]: jsep.Expression[];\n// }\nimport {BaseTraverser} from './_Base';\n\nexport class ExpressionStringGenerator extends BaseTraverser {\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tparse_tree(parsed_tree: ParsedTree) {\n\t\tif (parsed_tree.error_message == null && parsed_tree.node) {\n\t\t\ttry {\n\t\t\t\treturn this.traverse_node(parsed_tree.node);\n\t\t\t} catch (e) {\n\t\t\t\tthis.set_error('could not traverse tree');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse tree');\n\t\t}\n\t}\n\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\n\t\tconst method_name = (node.callee as jsep.Identifier).name;\n\t\treturn `${method_name}(${arguments_joined})`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string {\n\t\treturn `${node.name}`;\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import {ParsedTree} from './Traverser/ParsedTree'\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\n// import {NodeSimple} from '../../core/graph/NodeSimple'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import {NamesListener} from './NamesListener'\nimport {MethodDependency} from './MethodDependency';\nimport jsep from 'jsep';\n\nexport interface JsepsByString {\n\t[propName: string]: jsep.Expression[];\n}\n\nexport class DependenciesController {\n\terror_message: string | undefined;\n\t// private references_controller: MissingReferencesController\n\tprivate cyclic_graph_detected: boolean = false;\n\t// private jsep_nodes_by_missing_paths: JsepsByString = {}\n\tprivate method_dependencies: MethodDependency[] = [];\n\n\t// private names_listeners: NamesListener[] = []\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this.references_controller = this.param.scene().missing_expression_references_controller\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t}\n\n\treset() {\n\t\tthis.param.graph_disconnect_predecessors();\n\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.reset();\n\t\t});\n\t\tthis.method_dependencies = [];\n\n\t\t// this.jsep_nodes_by_missing_paths = {}\n\t\t// const ref_ids = Object.keys(this.missing_expression_references_by_id)\n\t\t// ref_ids.forEach(ref_id=>{\n\t\t// \tconst ref = this.missing_expression_references_by_id[ref_id]\n\t\t// \tthis.references_controller.unregister(ref)\n\t\t// })\n\t\t// this.missing_expression_references_by_id = {}\n\n\t\t// this.names_listeners.forEach(names_listener=>{names_listener.reset()})\n\t}\n\n\tupdate(function_generator: FunctionGenerator) {\n\t\t// const immutable_dependencies = function_generator.immutable_dependencies\n\t\t// const jsep_dependencies = function_generator.jsep_dependencies\n\t\t// const jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\n\t\t// if(jsep_dependencies.length > 0){\n\t\t// \tconsole.log(\"connect_param_to_dependencies\", this.param.full_path())\n\t\t// }\n\n\t\tthis.cyclic_graph_detected = false;\n\n\t\tthis.connect_immutable_dependencies(function_generator);\n\t\tthis.method_dependencies = function_generator.method_dependencies;\n\t\tthis.handle_method_dependencies();\n\t\t// this.connect_missing_paths(function_generator)\n\n\t\tthis.listen_for_name_changes();\n\t}\n\n\tprivate connect_immutable_dependencies(function_generator: FunctionGenerator) {\n\t\tfunction_generator.immutable_dependencies.forEach((dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tif (this.param.add_graph_input(dependency) == false) {\n\t\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tprivate handle_method_dependencies() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tthis.handle_method_dependency(method_dependency);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handle_method_dependency(method_dependency: MethodDependency) {\n\t\tconst node_simple = method_dependency.resolved_graph_node;\n\n\t\tif (node_simple) {\n\t\t\t// this should update the jsep_node, and run the expression to string parser\n\t\t\t// when a name in the referenced nodes is updated\n\t\t\t// const names_listener = new NamesListener(this.param, node_simple, jsep_node)\n\t\t\t// TODO: test that it is no longer active if expression is updated\n\n\t\t\tif (!this.param.add_graph_input(node_simple)) {\n\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} // else {\n\t\t// const jsep_node = method_dependency.jsep_node\n\t\t//}\n\t}\n\n\tprivate listen_for_name_changes() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.listen_for_name_changes();\n\t\t});\n\t}\n\n\t// private connect_missing_paths(function_generator: FunctionGenerator){\n\n\t// \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\t// \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n\n\t// \tmissing_paths.forEach((missing_path)=>{\n\t// \t\tconst full_path = CoreWalker.make_absolute(this.param.node(), missing_path)\n\t// \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n\t// \t\tjsep_nodes.forEach(jsep_node=>{\n\t// \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, full_path)\n\n\t// \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n\t// \t\t})\n\t// \t})\n\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class ButtonParam extends TypedParam<ParamType.BUTTON> {\n\tstatic type() {\n\t\treturn ParamType.BUTTON;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BUTTON], val2: ParamValuesTypeMap[ParamType.BUTTON]) {\n\t\treturn true;\n\t}\n\tpress_button() {\n\t\tthis.options.execute_callback();\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {Color} from 'three/src/math/Color';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_COLOR = ['r', 'g', 'b'];\nexport class ColorParam extends TypedMultipleParam<ParamType.COLOR> {\n\tprotected _value = new Color();\n\tr!: FloatParam;\n\tg!: FloatParam;\n\tb!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.COLOR;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_COLOR;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.COLOR]) {\n\t\tif (raw_input instanceof Color) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.COLOR], val2: ParamValuesTypeMap[ParamType.COLOR]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.r = this.components[0];\n\t\tthis.g = this.components[1];\n\t\tthis.b = this.components[2];\n\t}\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.r.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.g.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.b.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.r = this.r.raw_input;\n\t// \t\t\tthis._raw_input.g = this.g.raw_input;\n\t// \t\t\tthis._raw_input.b = this.b.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.r.raw_input, this.g.raw_input, this.b.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.r.raw_input;\n\t// \t\tthis._raw_input[1] = this.g.raw_input;\n\t// \t\tthis._raw_input[2] = this.b.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.r = this.r.value;\n\t\tthis._value.g = this.g.value;\n\t\tthis._value.b = this.b.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.COLOR]): Color | null {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\tif(input.length == 3){\n\t// \t\t\tif( input.filter(lodash_isNumber).length > 0 ){\n\t// \t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t}\n\t// \t\t\tif(first){\n\t// \t\t\t\tif(lodash_isNumber(first)){\n\t// \t\t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn new Color();\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class FolderParam extends TypedParam<ParamType.FOLDER> {\n\tstatic type() {\n\t\treturn ParamType.FOLDER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FOLDER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FOLDER], val2: ParamValuesTypeMap[ParamType.FOLDER]) {\n\t\treturn true;\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean'\n\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class IntegerParam extends TypedNumericParam<ParamType.INTEGER> {\n\tstatic type() {\n\t\treturn ParamType.INTEGER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.INTEGER], val2: ParamValuesTypeMap[ParamType.INTEGER]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn Math.round(raw_val);\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseInt(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tconst result = IntegerParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","import {_Math} from 'three/src/math/Math';\n\nexport interface RampPointJson {\n\tposition: number;\n\tvalue: number;\n}\nexport interface RampValueJson {\n\tpoints: RampPointJson[];\n\tinterpolation: string;\n}\n\nexport class RampPoint {\n\tconstructor(private _position: number = 0, private _value: number = 0) {}\n\n\tto_json(): RampPointJson {\n\t\treturn {\n\t\t\tposition: this._position,\n\t\t\tvalue: this._value,\n\t\t};\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tcopy(point: RampPoint) {\n\t\tthis._position = point.position;\n\t\tthis._value = point.value;\n\t}\n\tclone() {\n\t\tconst point = new RampPoint();\n\t\tpoint.copy(this);\n\t\treturn point;\n\t}\n\tis_equal(other_point: RampPoint) {\n\t\treturn this._position == other_point.position && this._value == other_point.value;\n\t}\n\tis_equal_json(json: RampPointJson) {\n\t\treturn this._position == json.position && this._value == json.value;\n\t}\n\tfrom_json(json: RampPointJson) {\n\t\tthis._position = json.position;\n\t\tthis._value = json.value;\n\t}\n\tstatic are_equal_json(json1: RampPointJson, json2: RampPointJson) {\n\t\treturn json1.position == json2.position && json1.value == json2.value;\n\t}\n\tstatic from_json(json: RampPointJson) {\n\t\treturn new RampPoint(json.position, json.value);\n\t}\n}\n\nexport enum RampInterpolation {\n\tLINEAR = 'linear',\n}\nexport class RampValue {\n\tprivate _uuid: string;\n\n\tconstructor(private _interpolation: string = RampInterpolation.LINEAR, private _points: RampPoint[] = []) {\n\t\tthis._uuid = _Math.generateUUID();\n\t}\n\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\tget interpolation() {\n\t\treturn this._interpolation;\n\t}\n\tget points() {\n\t\treturn this._points;\n\t}\n\tstatic from_json(json: RampValueJson): RampValue {\n\t\tconst points = [];\n\t\tfor (let json_point of json.points) {\n\t\t\tpoints.push(RampPoint.from_json(json_point));\n\t\t}\n\t\treturn new RampValue(json.interpolation, points);\n\t}\n\tto_json(): RampValueJson {\n\t\treturn {\n\t\t\tinterpolation: this._interpolation,\n\t\t\tpoints: this._points.map((p) => p.to_json()),\n\t\t};\n\t}\n\tclone(): RampValue {\n\t\tconst ramp = new RampValue();\n\t\tramp.copy(this);\n\t\treturn ramp;\n\t}\n\tcopy(ramp: RampValue) {\n\t\tthis._interpolation = ramp.interpolation;\n\t\tlet index = 0;\n\t\tfor (let point of ramp.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.copy(point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(point.clone());\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n\n\tis_equal(other_ramp_value: RampValue): boolean {\n\t\tif (this._interpolation != other_ramp_value.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst other_points = other_ramp_value.points;\n\t\tif (this._points.length != other_points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = other_points[index];\n\t\t\tif (!point.is_equal(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn true;\n\t}\n\tis_equal_json(json: RampValueJson) {\n\t\tif (this._interpolation != json.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._points.length != json.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = json.points[index];\n\t\t\tif (!point.is_equal_json(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tstatic are_json_equal(json1: RampValueJson, json2: RampValueJson) {\n\t\tif (json1.interpolation != json2.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (json1.points.length != json2.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point1 of json1.points) {\n\t\t\tconst point2 = json2.points[index];\n\t\t\tif (!RampPoint.are_equal_json(point1, point2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tfrom_json(json: RampValueJson) {\n\t\tthis._interpolation = json.interpolation;\n\n\t\tlet index = 0;\n\t\tfor (let json_point of json.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.from_json(json_point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(RampPoint.from_json(json_point));\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class SeparatorParam extends TypedParam<ParamType.SEPARATOR> {\n\tstatic type() {\n\t\treturn ParamType.SEPARATOR;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.SEPARATOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.SEPARATOR],\n\t\tval2: ParamValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR2 = ['x', 'y'];\nexport class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {\n\tprotected _value = new Vector2();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR2;\n\t}\n\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR2;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number2;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector2) {\n\t// \t\treturn this._raw_input.toArray() as Number2;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number2;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]) {\n\t\tif (raw_input instanceof Vector2) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber2 = [raw_input[0], raw_input[1]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]\n\t) {\n\t\tif (raw_input1 instanceof Vector2) {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y;\n\t\t\t} else {\n\t\t\t\treturn raw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1];\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector2().fromArray(input);\n\t// \t}\n\t// \treturn new Vector2();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {FloatParam} from './Float';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_VECTOR3 = ['x', 'y', 'z'];\nexport class Vector3Param extends TypedMultipleParam<ParamType.VECTOR3> {\n\tprotected _value = new Vector3();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR3;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR3;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tif (raw_input instanceof Vector3) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR3]\n\t) {\n\t\tif (raw_input1 instanceof Vector3) {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1] && raw_input1.z == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y && raw_input1[2] == raw_input2.z;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR3], val2: ParamValuesTypeMap[ParamType.VECTOR3]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t}\n\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.x.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.y.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.z.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.x = this.x.raw_input;\n\t// \t\t\tthis._raw_input.y = this.y.raw_input;\n\t// \t\t\tthis._raw_input.z = this.z.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.x.raw_input;\n\t// \t\tthis._raw_input[1] = this.y.raw_input;\n\t// \t\tthis._raw_input[2] = this.z.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector3().fromArray(input);\n\t// \t}\n\t// \treturn new Vector3();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR4 = ['x', 'y', 'z', 'w'];\nexport class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {\n\tprotected _value = new Vector4();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tw!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR4;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR4;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number4;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector4) {\n\t// \t\treturn this._raw_input.toArray() as Number4;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber4 = [\n\t// \t\t\tthis._raw_input[0],\n\t// \t\t\tthis._raw_input[1],\n\t// \t\t\tthis._raw_input[2],\n\t// \t\t\tthis._raw_input[3],\n\t// \t\t];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number4;\n\t}\n\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR4]) {\n\t\tif (raw_input instanceof Vector4) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber4 = [raw_input[0], raw_input[1], raw_input[2], raw_input[3]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR4]\n\t) {\n\t\tif (raw_input1 instanceof Vector4) {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1.x == raw_input2[0] &&\n\t\t\t\t\traw_input1.y == raw_input2[1] &&\n\t\t\t\t\traw_input1.z == raw_input2[2] &&\n\t\t\t\t\traw_input1.w == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2.x &&\n\t\t\t\t\traw_input1[1] == raw_input2.y &&\n\t\t\t\t\traw_input1[2] == raw_input2.z &&\n\t\t\t\t\traw_input1[3] == raw_input2.w\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] &&\n\t\t\t\t\traw_input1[1] == raw_input2[1] &&\n\t\t\t\t\traw_input1[2] == raw_input2[2] &&\n\t\t\t\t\traw_input1[3] == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t\tthis.w = this.components[3];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t\tthis._value.w = this.w.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector4().fromArray(input);\n\t// \t}\n\t// \treturn new Vector4();\n\t// }\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsValueAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['value_type'];\n};\n\nexport class ParamsValueAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nexport class ProcessingContext {\n\tprivate _frame: number = 0;\n\tconstructor(node: BaseNodeType) {}\n\tcopy(src_context: ProcessingContext) {\n\t\tthis._frame = src_context.frame;\n\t}\n\tget frame() {\n\t\treturn this._frame;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nimport {ConnectionsController} from './ConnectionsController';\nimport {InputsController} from './InputsController';\nimport {OutputsController} from './OutputsController';\n\nexport class IOController<T extends BaseNodeType> {\n\tprotected _connections: ConnectionsController = new ConnectionsController(this.node);\n\tprotected _inputs: InputsController<T> | undefined;\n\tprotected _outputs: OutputsController<T> | undefined;\n\n\tconstructor(protected node: T) {}\n\n\t// add_connections_controller() {\n\t// \tthis._connections =\n\t// }\n\tget connections() {\n\t\treturn this._connections;\n\t}\n\n\t// inputs\n\t// init_inputs(options: InputsControllerOptions) {\n\t// \tthis.inputs.set_options(options);\n\t// }\n\tget inputs(): InputsController<T> {\n\t\treturn (this._inputs = this._inputs || new InputsController<T>(this.node));\n\t}\n\thas_inputs() {\n\t\treturn this._inputs != null;\n\t}\n\n\t// outputs\n\t// init_outputs() {\n\t// \tthis._outputs = this._outputs || new OutputsController(this.node);\n\t// }\n\tget outputs(): OutputsController<T> {\n\t\treturn (this._outputs = this._outputs || new OutputsController<T>(this.node));\n\t}\n\thas_outputs() {\n\t\treturn this._outputs != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport lodash_compact from 'lodash/compact';\nimport {NodeConnection} from './NodeConnection';\n\n// interface NodeConnectionByString {\n// \t[propName: string]: NodeConnection;\n// }\n// interface NodeConnectionByStringByString {\n// \t[propName: string]: NodeConnectionByString;\n// }\n\nexport class ConnectionsController {\n\tprivate _input_connections: Array<NodeConnection | undefined> | undefined;\n\tprivate _output_connections: Map<number, Map<number, NodeConnection>> = new Map();\n\n\tconstructor(protected _node: BaseNodeType) {}\n\n\tinit_inputs() {\n\t\tconst count = this._node.io.inputs.max_inputs_count;\n\t\tthis._input_connections = new Array(count);\n\t}\n\n\t//\n\t//\n\t// INPUT CONNECTIONS\n\t//\n\t//\n\tadd_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\t// if (connection.input_index < this._input_connections.length) {\n\t\t\tthis._input_connections[connection.input_index] = connection;\n\t\t\t// } else {\n\t\t\t// \tconsole.warn(`attempt to add an input connection at index ${connection.input_index}`);\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tremove_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\tif (connection.input_index < this._input_connections.length) {\n\t\t\t\tthis._input_connections[connection.input_index] = undefined;\n\t\t\t} else {\n\t\t\t\tconsole.warn(`attempt to remove an input connection at index ${connection.input_index}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tinput_connection(index: number): NodeConnection | undefined {\n\t\tif (this._input_connections) {\n\t\t\treturn this._input_connections[index];\n\t\t}\n\t}\n\tfirst_input_connection(): NodeConnection {\n\t\treturn lodash_compact(this._input_connections)[0];\n\t}\n\t// last_input_connection(): NodeConnection {\n\t// \tconst connections = lodash_compact(this._input_connections);\n\t// \treturn connections[connections.length - 1];\n\t// }\n\tinput_connections() {\n\t\treturn this._input_connections;\n\t}\n\n\t//\n\t//\n\t// OUTPUT CONNECTIONS\n\t//\n\t//\n\tadd_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (!connections_by_id) {\n\t\t\tconnections_by_id = new Map<number, NodeConnection>();\n\t\t\tthis._output_connections.set(output_index, connections_by_id);\n\t\t}\n\t\tconnections_by_id.set(id, connection);\n\t\t// this._output_connections[output_index] = this._output_connections[output_index] || {};\n\t\t// this._output_connections[output_index][id] = connection;\n\t}\n\tremove_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (connections_by_id) {\n\t\t\tconnections_by_id.delete(id);\n\t\t}\n\t\t// delete this._output_connections[output_index][id];\n\t}\n\n\toutput_connections() {\n\t\tlet list: NodeConnection[] = [];\n\n\t\tthis._output_connections.forEach((connections_by_id, output_index) => {\n\t\t\tconnections_by_id.forEach((connection, id) => {\n\t\t\t\tif (connection) {\n\t\t\t\t\tlist.push(connection);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t// Object.keys(this._output_connections).forEach((index) => {\n\t\t// \tconst connections_for_index = this._output_connections[index];\n\t\t// \tObject.keys(connections_for_index).forEach((id) => {\n\t\t// \t\tlist.push(connections_for_index[id]);\n\t\t// \t});\n\t\t// });\n\t\treturn list;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseContainer} from '../../../containers/_Base';\n// import lodash_includes from 'lodash/includes'\n// import lodash_filter from 'lodash/filter'\nimport lodash_each from 'lodash/each';\nimport lodash_isString from 'lodash/isString';\n// import lodash_compact from 'lodash/compact'\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport {NodeConnection} from './NodeConnection';\n\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {InputCloneMode} from '../../../poly/InputCloneMode';\nimport {TypeAssert} from '../../../poly/Assert';\n\n// export class InputGraphNode extends NodeSimple {\n// \tconstructor(name: string) {\n// \t\tsuper(name);\n// \t}\n// }\n\n// export interface InputsControllerOptions {\n// \tmin_inputs?: number;\n// \tmax_inputs?: number;\n// \tdepends_on_inputs?: boolean;\n// }\ntype OnUpdateHook = () => void;\n\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class InputsController<T extends BaseNodeType> {\n\tprivate _graph_node_inputs: CoreGraphNode[] = [];\n\tprivate _inputs: Array<T | null> = [];\n\tprivate _has_named_inputs: boolean = false;\n\t// _input_connections: NodeConnection[] = []\n\tprivate _named_input_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _min_inputs_count: number = 0;\n\tprivate _max_inputs_count: number = 0;\n\tprivate _depends_on_inputs: boolean = true;\n\n\t// hooks\n\tprivate _on_update_hooks: OnUpdateHook[] | undefined;\n\tprivate _on_update_hook_names: string[] | undefined;\n\n\t// clonable\n\tprivate _user_inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _override_clonable_state: boolean = false;\n\n\tconstructor(protected node: T) {\n\t\t//, options: InputsControllerOptions = {}) {\n\t\t// this.set_options(options);\n\t}\n\n\t// set_options(options: InputsControllerOptions) {\n\t// \tif (options['min_inputs']) {\n\t// \t\tthis.set_min_inputs_count(options['min_inputs']);\n\t// \t}\n\t// \tif (options['max_inputs']) {\n\t// \t\tthis.set_max_inputs_count(options['max_inputs']);\n\t// \t}\n\t// \tif (options['depends_on_inputs']) {\n\t// \t\tthis.set_depends_on_inputs(options['depends_on_inputs']);\n\t// \t}\n\t// }\n\n\t// _init_inputs() {\n\t// \tthis._inputs = [];\n\t// }\n\tset_depends_on_inputs(depends_on_inputs: boolean) {\n\t\tthis._depends_on_inputs = depends_on_inputs;\n\t}\n\tprivate set_min_inputs_count(min_inputs_count: number) {\n\t\tthis._min_inputs_count = min_inputs_count;\n\t}\n\t// min_inputs_count() {\n\t// \treturn this._min_inputs_count || 0;\n\t// }\n\tprivate set_max_inputs_count(max_inputs_count: number) {\n\t\tthis._max_inputs_count = max_inputs_count;\n\t\tthis.init_graph_node_inputs();\n\t}\n\n\tnamed_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let connection_point of this._named_input_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_inputs = true;\n\t\tthis._named_input_connection_points = connection_points;\n\t\tthis.set_min_inputs_count(0);\n\t\tthis.set_max_inputs_count(connection_points.length);\n\t\tthis.init_graph_node_inputs();\n\t\tthis.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n\t}\n\tget has_named_inputs() {\n\t\treturn this._has_named_inputs;\n\t}\n\tget named_input_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_input_connection_points || [];\n\t}\n\tprivate init_graph_node_inputs() {\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\tthis._graph_node_inputs[i] = this._graph_node_inputs[i] || this._create_graph_node_input(i);\n\t\t}\n\t}\n\tprivate _create_graph_node_input(index: number): CoreGraphNode {\n\t\tconst graph_input_node = new CoreGraphNode(this.node.scene, `input_${index}`);\n\t\t// graph_input_node.set_scene(this.node.scene);\n\t\tthis.node.add_graph_input(graph_input_node);\n\t\treturn graph_input_node;\n\t}\n\n\tget max_inputs_count(): number {\n\t\treturn this._max_inputs_count || 0;\n\t}\n\tinput_graph_node(input_index: number): CoreGraphNode {\n\t\treturn this._graph_node_inputs[input_index];\n\t}\n\n\t// set_count_to_zero() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(0);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\t// set_count_to_one_max() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(1);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\tset_count(min: number, max?: number) {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t}\n\t\tthis.set_min_inputs_count(min);\n\t\tthis.set_max_inputs_count(max);\n\n\t\tthis.init_inputs_clonable_state();\n\t\tthis.init_connections_controller_inputs();\n\t}\n\tprivate init_connections_controller_inputs() {\n\t\tthis.node.io.connections.init_inputs();\n\t}\n\t// requires_two_inputs: ->\n\t// \tthis.set_min_inputs_count(2)\n\t// \tthis.set_max_inputs_count(2)\n\n\t// requires_one_input() {\n\t// \treturn this._min_inputs_count > 0;\n\t// }\n\n\t// eval_required_inputs(callback){\n\t// \tconst containers = [];\n\t// \tif (this._max_inputs_count === 0) {\n\t// \t\treturn callback(containers);\n\t// \t} else {\n\t// \t\tconst existing_inputs = lodash_compact(this.inputs());\n\t// \t\tif (existing_inputs.length < this._min_inputs_count) {\n\t// \t\t\treturn this.self.set_error(\"inputs are missing\");\n\t// \t\t} else {\n\t// \t\t\t// const frame = this.self.context().frame();\n\t// \t\t\t// const full_path = this.self.full_path();\n\n\t// \t\t\tswitch (existing_inputs.length) {\n\t// \t\t\t\tcase 0:\n\t// \t\t\t\t\treturn callback(containers);\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container=> {\n\t// \t\t\t\t\t\tcontainers.push(container);\n\t// \t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t});\n\t// \t\t\t\tcase 2:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container0=> {\n\t// \t\t\t\t\t\treturn this.eval_required_input(1, container1=> {\n\t// \t\t\t\t\t\t\tcontainers.push(container0);\n\t// \t\t\t\t\t\t\tcontainers.push(container1);\n\t// \t\t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t});\n\t// \t\t\t\t\t// TODO: I could also here check if the inputs are dirty\n\t// \t\t\t\t\t// instead of going through the callback chain\n\t// \t\t\t\t\t// input_node0 = this.input(0)\n\t// \t\t\t\t\t// input_node0.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// input_node0.request_container (container0)=>\n\t// \t\t\t\t\t// \tinput_node1 = this.input(1)\n\t// \t\t\t\t\t// \tinput_node1.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// \tinput_node1.request_container (container1)=>\n\t// \t\t\t\t\t// \t\tcontainers.push(container0)\n\t// \t\t\t\t\t// \t\tcontainers.push(container1)\n\t// \t\t\t\t\t// \t\tcallback([container0, container1])\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(`${this.self.full_path()} inputs not evaluated`);\n\t// \t\t\t\t\treturn callback();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tasync eval_required_inputs_p() {\n\t\tlet containers: Array<BaseContainer | null> = [];\n\t\tif (this._max_inputs_count > 0) {\n\t\t\tconst existing_input_indices: number[] = [];\n\t\t\tthis.inputs().forEach((input, i) => {\n\t\t\t\tif (input) {\n\t\t\t\t\texisting_input_indices.push(i);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// const existing_inputs = lodash_compact(this.inputs());\n\t\t\tif (existing_input_indices.length < this._min_inputs_count) {\n\t\t\t\tthis.node.states.error.set('inputs are missing');\n\t\t\t} else {\n\t\t\t\tif (existing_input_indices.length > 0) {\n\t\t\t\t\tconst promises = existing_input_indices.map((input_index) => {\n\t\t\t\t\t\treturn this.node.io.inputs.eval_required_input(input_index);\n\t\t\t\t\t});\n\t\t\t\t\tcontainers = await Promise.all(promises);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containers;\n\t}\n\t// eval_required_input(input_index: number, callback){\n\t// \treturn this.self.request_input_container(input_index, container=> {\n\t// \t\t// we do not clone here, as we just check if a group is present\n\t// \t\tlet group;\n\t// \t\tif ((container != null) && ((group = container.object({clone: false})) != null)) {\n\t// \t\t\treturn callback(container);\n\t// \t\t} else {\n\t// \t\t\tconst input_node = this.input(input_index);\n\t// \t\t\tif (input_node != null) {\n\t// \t\t\t\tconst input_error_message = input_node.error_message();\n\t// \t\t\t\treturn this.self.set_error(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\tasync eval_required_input(input_index: number) {\n\t\tconst container = await this.node.container_controller.request_input_container(input_index);\n\t\t// we do not clone here, as we just check if a group is present\n\t\tif (container && container.core_content()) {\n\t\t\t// return container;\n\t\t} else {\n\t\t\tconst input_node = this.input(input_index);\n\t\t\tif (input_node) {\n\t\t\t\tconst input_error_message = input_node.states.error.message;\n\t\t\t\tif (input_error_message) {\n\t\t\t\t\tthis.node.states.error.set(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\t// protected _get_named_input_index_without_error(name: string): number {\n\t// \tconst connections = this.named_input_connections;\n\t// \tlet index = -1;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn index;\n\t// }\n\tget_named_input_index(name: string): number {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n\t\t\t\tif (this._named_input_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t\t// const index = this._get_named_input_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connections = this.named_input_connections;\n\t\t// \tconst available_names = connections.map((o) => o.name).join(', ');\n\t\t// \tconsole.log('named_input_connections', connections);\n\t\t// \tthrow new Error(\n\t\t// \t\t`${this.node.full_path()}: no inputs named '${name}'. available names are '${available_names}' (${\n\t\t// \t\t\tconnections.length\n\t\t// \t\t} inputs)`\n\t\t// \t);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_input_index(input_index_or_name: number | string): number {\n\t\tif (lodash_isString(input_index_or_name)) {\n\t\t\tif (this.has_named_inputs) {\n\t\t\t\treturn this.get_named_input_index(input_index_or_name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`node ${this.node.full_path()} has no named inputs`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn input_index_or_name;\n\t\t}\n\t}\n\n\tset_input(input_index_or_name: number | string, node: T | null, output_index_or_name: number | string = 0) {\n\t\tconst input_index = this.get_input_index(input_index_or_name) || 0;\n\t\tlet output_index = 0;\n\t\tif (node) {\n\t\t\tif (node.io.outputs.has_named_outputs) {\n\t\t\t\t// if(node.has_named_output(output_index_or_name)){\n\t\t\t\toutput_index = node.io.outputs.get_output_index(output_index_or_name);\n\t\t\t\tif (output_index == null) {\n\t\t\t\t\tconsole.warn(`node ${node.full_path()} does not have an output named ${output_index_or_name}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// this seems to prevent connecting output 1 from a vec to float to something else\n\t\t\t\t// } else {\n\t\t\t\t// \tconsole.warn(`${node.full_path()} has no output '${output_index_or_name}'`)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tconst graph_input_node = this._graph_node_inputs[input_index];\n\t\tif (graph_input_node == null) {\n\t\t\tthrow `graph_input_node not found at index ${input_index}`;\n\t\t}\n\n\t\tif (node && this.node.parent != node.parent) {\n\t\t\treturn;\n\t\t}\n\t\t// use the name if the node is either not defined or in another parent\n\t\t// const parent = this.self.parent()\n\t\t// if ((node == null) || (node.parent().graph_node_id !== parent.graph_node_id)) {\n\t\t// \tif (node_name != null) {\n\t\t// \t\tnode = parent.node(node_name);\n\t\t// \t}\n\t\t// }\n\n\t\tconst old_input_node = this._inputs[input_index];\n\t\tlet old_output_index: number | null = null;\n\t\tlet old_connection: NodeConnection | undefined = undefined;\n\t\tif (this.node.io.connections) {\n\t\t\told_connection = this.node.io.connections.input_connection(input_index);\n\t\t}\n\t\tif (old_connection) {\n\t\t\told_output_index = old_connection.output_index;\n\t\t}\n\n\t\tif (node !== old_input_node || output_index != old_output_index) {\n\t\t\t// TODO: test: add test to make sure this is necessary\n\t\t\tif (old_input_node != null) {\n\t\t\t\tif (this._depends_on_inputs) {\n\t\t\t\t\tgraph_input_node.remove_graph_input(old_input_node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node != null) {\n\t\t\t\tif (graph_input_node.add_graph_input(node)) {\n\t\t\t\t\t// we do test if we can create the graph connection\n\t\t\t\t\t// to ensure we are not in a cyclical graph,\n\t\t\t\t\t// but we delete it right after\n\t\t\t\t\tif (!this._depends_on_inputs) {\n\t\t\t\t\t\tgraph_input_node.remove_graph_input(node);\n\t\t\t\t\t}\n\n\t\t\t\t\t//this._input_connections[input_index] = new NodeConnection(node, this.self, output_index, input_index);\n\t\t\t\t\tif (old_connection) {\n\t\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t\t}\n\t\t\t\t\tthis._inputs[input_index] = node;\n\t\t\t\t\tnew NodeConnection(node, this.node, output_index, input_index);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`cannot connect ${node.full_path()} to ${this.node.full_path()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._inputs[input_index] = null;\n\t\t\t\tif (old_connection) {\n\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t}\n\t\t\t\t// this._input_connections[input_index] = null;\n\t\t\t}\n\n\t\t\tthis._run_on_set_input_hooks();\n\t\t\tgraph_input_node.set_successors_dirty();\n\t\t\t// this.node.set_dirty(node);\n\t\t\tthis.node.emit(NodeEvent.INPUTS_UPDATED);\n\t\t}\n\t}\n\n\tremove_input(node: T) {\n\t\tlodash_each(this.inputs(), (input, index) => {\n\t\t\tif (input != null && node != null) {\n\t\t\t\tif (input.graph_node_id === node.graph_node_id) {\n\t\t\t\t\tthis.set_input(index, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tinput(input_index: number): T | null {\n\t\treturn this._inputs[input_index];\n\t}\n\t// TODO: the named_input and named_output API really needs to change\n\tnamed_input(input_name: string): T | null {\n\t\tif (this.has_named_inputs) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._inputs[input_index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tnamed_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this.has_named_inputs && this._named_input_connection_points) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._named_input_connection_points[input_index];\n\t\t}\n\t}\n\thas_named_input(name: string): boolean {\n\t\treturn this.get_named_input_index(name) >= 0;\n\t}\n\thas_input(input_index: number): boolean {\n\t\treturn this._inputs[input_index] != null;\n\t}\n\tinputs() {\n\t\treturn this._inputs;\n\t}\n\n\t// outputs(): BaseNode[] {\n\t// \treturn lodash_filter(this.self.graph_successors(), successor=> {\n\t// \t\tif (successor.is_a(Node)) {\n\t// \t\t\treturn lodash_includes(successor.inputs(), this.self);\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// clonable states\n\toverride_clonable_state_allowed() {\n\t\tlet value = false;\n\t\tfor (let state of this.inputs_clonable_state()) {\n\t\t\tif (state == InputCloneMode.FROM_NODE) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\tinputs_clonable_state(): InputCloneMode[] {\n\t\treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n\t}\n\tinput_cloned(index: number): boolean {\n\t\treturn this.input_clonable_state_with_override(index);\n\t}\n\tinputs_clonable_state_with_override(): boolean[] {\n\t\tconst list = [];\n\t\tconst states = this.inputs_clonable_state();\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tlist.push(this.input_clonable_state_with_override(i));\n\t\t}\n\t\treturn list;\n\t}\n\tinput_clonable_state_with_override(index: number): boolean {\n\t\tconst states = this.inputs_clonable_state();\n\t\t// for (let i = 0; i < states.length; i++) {\n\t\t// TODO: typescript: not sure if this loop was justified\n\t\tconst state = states[index];\n\t\tswitch (state) {\n\t\t\tcase InputCloneMode.ALWAYS:\n\t\t\t\treturn true;\n\t\t\tcase InputCloneMode.NEVER:\n\t\t\t\treturn false;\n\t\t\tcase InputCloneMode.FROM_NODE:\n\t\t\t\treturn !this._override_clonable_state;\n\t\t\t// default:\n\t\t\t// \tthrow new Error('unsupported type');\n\t\t}\n\t\treturn TypeAssert.unreachable(state);\n\t\t// }\n\t}\n\n\tinit_inputs_clonable_state(values: InputCloneMode[] | null = null) {\n\t\tif (values) {\n\t\t\tthis._user_inputs_clonable_states = values;\n\t\t}\n\t\tthis._inputs_clonable_states = this._user_inputs_clonable_states || this._default_inputs_clonale_state_values();\n\n\t\treturn this._inputs_clonable_states;\n\t}\n\tprivate _default_inputs_clonale_state_values() {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\t// lodash_times(this.self._max_inputs_count, (i)=>{\n\t\t\tlist.push(InputCloneMode.ALWAYS);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset_override_clonable_state(state: boolean) {\n\t\tthis._override_clonable_state = state;\n\t\tthis.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n\t}\n\toverride_clonable_state() {\n\t\treturn this._override_clonable_state;\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tadd_on_set_input_hook(name: string, hook: OnUpdateHook) {\n\t\tthis._on_update_hooks = this._on_update_hooks || [];\n\t\tthis._on_update_hook_names = this._on_update_hook_names || [];\n\n\t\tif (!this._on_update_hook_names.includes(name)) {\n\t\t\tthis._on_update_hooks.push(hook);\n\t\t\tthis._on_update_hook_names.push(name);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tprivate _run_on_set_input_hooks() {\n\t\tif (this._on_update_hooks) {\n\t\t\tfor (let hook of this._on_update_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n// import {_Math} from 'three/src/math/Math';\n\n// export enum ConnectionType {\n// \tGEOMETRY = 'geometry',\n// \tMATRIX = 'matrix',\n// \tINT = 'int',\n// \tFLOAT = 'float',\n// \tBOOL = 'bool',\n// \tVEC2 = 'vec2',\n// \tVEC3 = 'vec3',\n// \tVEC4 = 'vec4',\n// \tMAT3 = 'mat3',\n// \tRGB = 'rgb',\n// \tRGBA = 'rgba',\n// }\n\ninterface DisconnectionOptions {\n\tset_input?: boolean;\n}\n\nexport class NodeConnection {\n\tprivate static _next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor(\n\t\tprivate _node_src: BaseNodeType,\n\t\tprivate _node_dest: BaseNodeType,\n\t\tprivate _output_index: number = 0,\n\t\tprivate _input_index: number = 0\n\t) {\n\t\tthis._id = NodeConnection._next_id++;\n\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.add_output_connection(this);\n\t\t\tthis._node_dest.io.connections.add_input_connection(this);\n\t\t}\n\t}\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget node_src() {\n\t\treturn this._node_src;\n\t}\n\tget node_dest() {\n\t\treturn this._node_dest;\n\t}\n\tget output_index() {\n\t\treturn this._output_index;\n\t}\n\tget input_index() {\n\t\treturn this._input_index;\n\t}\n\n\tdisconnect(options: DisconnectionOptions = {}) {\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.remove_output_connection(this);\n\t\t\tthis._node_dest.io.connections.remove_input_connection(this);\n\t\t}\n\n\t\tif (options.set_input === true) {\n\t\t\tthis._node_dest.io.inputs.set_input(this._input_index, null);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isString from 'lodash/isString';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// interface OutputsOptions {\n// \thas_outputs?: boolean;\n// }\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class OutputsController<T extends BaseNodeType> {\n\tprivate _has_outputs: boolean = false;\n\tprivate _named_output_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _has_named_outputs: boolean = false;\n\n\tconstructor(private node: T) {}\n\n\t// init(options?: OutputsOptions) {\n\t// \tif (options == null) {\n\t// \t\toptions = {};\n\t// \t}\n\t// \tif (options['has_outputs'] == null) {\n\t// \t\toptions['has_outputs'] = true;\n\t// \t}\n\t// \tthis._has_outputs = options['has_outputs'];\n\t// }\n\tset_has_one_output() {\n\t\tthis._has_outputs = true;\n\t}\n\tset_has_no_output() {\n\t\tthis._has_outputs = false;\n\t}\n\n\tget has_outputs() {\n\t\treturn this._has_outputs;\n\t}\n\tget has_named_outputs() {\n\t\treturn this._has_named_outputs;\n\t}\n\thas_named_output(name: string): boolean {\n\t\t// return this._get_named_output_index_without_error(name) != null;\n\t\treturn this.get_named_output_index(name) >= 0;\n\t}\n\tget named_output_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_output_connection_points || [];\n\t}\n\tnamed_output_connection(index: number): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\treturn this._named_output_connection_points[index];\n\t\t}\n\t}\n\t// protected _get_named_output_index_without_error(name: string): number {\n\t// \tconst connections = this.named_output_connection_points;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn -1;\n\t// }\n\tget_named_output_index(name: string): number {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_output_connection_points.length; i++) {\n\t\t\t\tif (this._named_output_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\n\t\t// const index = this._get_named_output_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connection_points = this.named_output_connection_points;\n\t\t// \tconst available_names = connection_points.map((o) => o.name).join(', ');\n\t\t// \tthrow new Error(`no outputs named '${name}'. available names are ${available_names}`);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_output_index(output_index_or_name: number | string): number {\n\t\tif (output_index_or_name != null) {\n\t\t\tif (lodash_isString(output_index_or_name)) {\n\t\t\t\tif (this.has_named_outputs) {\n\t\t\t\t\treturn this.get_named_output_index(output_index_or_name);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`node ${this.node.full_path()} has no named outputs`);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn output_index_or_name;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tnamed_output_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let connection_point of this._named_output_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_named_output_connection_points(connection_points: BaseNamedConnectionPointType[], set_dirty: boolean = true) {\n\t\tthis._has_named_outputs = true;\n\t\tthis._named_output_connection_points = connection_points;\n\t\tif (set_dirty && this.node.scene) {\n\t\t\t// why do I need this set dirty here?\n\t\t\t// I currently have to have a flag to optionally prevent this,\n\t\t\t// for instance from gl nodes which have their outputs updated in a post dirty hook\n\t\t\tthis.node.set_dirty(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n\t}\n\tused_output_names(): string[] {\n\t\tif (this.node.io.connections) {\n\t\t\tconst output_indices = lodash_uniq(\n\t\t\t\tthis.node.io.connections\n\t\t\t\t\t.output_connections()\n\t\t\t\t\t.map((connection) => (connection ? connection.output_index : null))\n\t\t\t);\n\t\t\tconst used_output_indices: number[] = [];\n\t\t\toutput_indices.forEach((index) => {\n\t\t\t\tif (lodash_isNumber(index)) {\n\t\t\t\t\tused_output_indices.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst used_output_names: string[] = used_output_indices.map((index) => {\n\t\t\t\treturn this.named_output_connection_points[index].name;\n\t\t\t});\n\t\t\treturn used_output_names;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['param_class'];\n};\n\nexport class ParamsAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ManagerContainer extends TypedContainer<ContainableMap['MANAGER']> {\n\tset_content(content: ContainableMap['MANAGER']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_clone from 'lodash/clone';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {PerformanceNode} from './PerformanceNode';\nimport {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport class CorePerformance {\n\tprivate _started: boolean = false;\n\t_start_time: number | null = 0;\n\t_previous_timestamp: number = 0;\n\t_nodes_cook_data: Dictionary<PerformanceNode> = {};\n\t_durations_by_name: Dictionary<number> = {};\n\t_durations_count_by_name: Dictionary<number> = {};\n\t// _performance_id: number;\n\n\t// constructor(){\n\t// \tconsole.log(\"creating perf\")\n\t// \tthis._performance_id = Math.random()\n\t// }\n\n\tprofile(name: string, method: (args?: any) => any) {\n\t\tconst start_time = performance.now();\n\t\tmethod();\n\t\tconst total_time = performance.now() - start_time;\n\t\tconsole.log(`${name}: ${total_time}`);\n\t}\n\n\tstart() {\n\t\tif (!this._started) {\n\t\t\tthis.reset();\n\t\t\tthis._started = true;\n\t\t\tthis._start_time = performance.now();\n\t\t\tthis._nodes_cook_data = {};\n\t\t\tthis._previous_timestamp = this._start_time;\n\t\t}\n\t}\n\t// else\n\t// \tthrow \"performance already started\"\n\tstop() {\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._started = false;\n\t\tthis._start_time = null;\n\t\tthis._durations_by_name = {};\n\t\tthis._durations_count_by_name = {};\n\t\tthis._nodes_cook_data = {};\n\t}\n\n\tget started(): boolean {\n\t\treturn this._started;\n\t}\n\n\trecord_node_cook_data(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._nodes_cook_data[id] == null) {\n\t\t\tthis._nodes_cook_data[id] = new PerformanceNode(node);\n\t\t}\n\t\tthis._nodes_cook_data[id].update_cook_data();\n\t}\n\n\trecord(name: string) {\n\t\tif (!this.started) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tconst current_timestamp = performance.now();\n\n\t\tif (this._durations_by_name[name] == null) {\n\t\t\tthis._durations_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_by_name[name] += current_timestamp - this._previous_timestamp;\n\t\tif (this._durations_count_by_name[name] == null) {\n\t\t\tthis._durations_count_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_count_by_name[name] += 1;\n\n\t\treturn (this._previous_timestamp = current_timestamp);\n\t}\n\n\tprint() {\n\t\tthis.print_node_cook_data();\n\t\tthis.print_recordings();\n\t}\n\n\tprint_node_cook_data() {\n\t\tlet performance_nodes = Object.values(this._nodes_cook_data);\n\t\tperformance_nodes = lodash_sortBy(performance_nodes, (performance_node) => -performance_node.cook_time_total);\n\n\t\tconst print_objects = performance_nodes.map((performance_node) => performance_node.print_object());\n\n\t\tconsole.log('--------------- NODES COOK TIME -----------');\n\n\t\tconst table_entries = [];\n\t\tconst sorted_print_objects = lodash_sortBy(print_objects, (print_object) => -print_object['cook_time_total']);\n\t\tfor (let print_object of sorted_print_objects) {\n\t\t\ttable_entries.push(print_object);\n\t\t}\n\n\t\tconsole.table(table_entries);\n\n\t\treturn print_objects;\n\t}\n\n\tprint_recordings() {\n\t\t// const start_time = this._start_time\n\t\tconst durations_by_name = lodash_clone(this._durations_by_name);\n\t\tconst durations_count_by_name = lodash_clone(this._durations_count_by_name);\n\t\t//this.reset()\n\n\t\tconst durations = [];\n\t\t//durations_by_name = {}\n\t\tconst names_by_duration: Dictionary<string[]> = {};\n\n\t\tfor (let name of Object.keys(durations_by_name)) {\n\t\t\tconst duration = durations_by_name[name];\n\n\t\t\t//durations_by_name[name] = duration\n\t\t\tdurations.push(duration);\n\t\t\tif (names_by_duration[duration] == null) {\n\t\t\t\tnames_by_duration[duration] = [];\n\t\t\t}\n\t\t\tnames_by_duration[duration].push(name);\n\t\t}\n\n\t\tdurations.sort((a, b) => a - b);\n\t\tconst sorted_durations = lodash_uniq(durations);\n\n\t\tconsole.log('--------------- PERF RECORDINGS -----------');\n\t\t//console.log(\"sorted_durations\", sorted_durations)\n\t\t// let previous_duration = start_time\n\t\tconst table_entries = [];\n\t\tfor (let duration of sorted_durations) {\n\t\t\tconst names = names_by_duration[duration];\n\t\t\tfor (let name of names) {\n\t\t\t\tconst count = durations_count_by_name[name];\n\t\t\t\tconst duration_per_iteration = duration / count;\n\n\t\t\t\tconst entry = {duration, name, count, duration_per_iteration};\n\t\t\t\ttable_entries.push(entry);\n\t\t\t}\n\n\t\t\t// previous_duration = duration\n\t\t}\n\n\t\tconsole.table(table_entries);\n\t\treturn table_entries;\n\t}\n}\n","import {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport class PerformanceNode {\n\t_cooks_count: number = 0;\n\t_cook_time_total: number = 0;\n\t_cook_time_total_with_inputs: number = 0;\n\t_cook_time_total_params: number = 0;\n\tconstructor(private _node: BaseNodeType) {}\n\n\tupdate_cook_data(): void {\n\t\tthis._cooks_count += 1;\n\t\tthis._cook_time_total += this._node.cook_controller.cook_time;\n\t\tthis._cook_time_total_with_inputs += this._node.cook_controller.cook_time_with_inputs;\n\t\tthis._cook_time_total_params += this._node.cook_controller.cook_time_params;\n\t}\n\n\tget cook_time_total(): number {\n\t\treturn this._cook_time_total;\n\t}\n\tget cook_time_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tget cook_time_total_with_inputs(): number {\n\t\treturn this._cook_time_total_with_inputs;\n\t}\n\tget cook_time_total_with_inputs_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_with_inputs / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cook_time_total_params(): number {\n\t\treturn this._cook_time_total_params;\n\t}\n\tget cook_time_total_params_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_params / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\n\tprint_object() {\n\t\treturn {\n\t\t\tfull_path: this._node.full_path(),\n\t\t\tcooks_count: this.cooks_count,\n\t\t\tcook_time_total: this.cook_time_total,\n\t\t\tcook_time_per_iteration: this.cook_time_per_iteration,\n\t\t\tcook_time_total_with_inputs: this.cook_time_total_with_inputs,\n\t\t\tcook_time_total_with_inputs_per_iteration: this.cook_time_total_with_inputs_per_iteration,\n\t\t\tcook_time_total_params: this.cook_time_total_params,\n\t\t\tcook_time_total_params_per_iteration: this.cook_time_total_params_per_iteration,\n\t\t};\n\t}\n}\n","// import {SceneContext} from '../../core/context/Scene';\nimport {PolyScene} from '../PolyScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {SceneEvent} from '../../poly/SceneEvent';\n// import {BaseNode} from '../nodes/_Base'\n\ntype FrameRange = [number, number];\n\nexport class TimeController {\n\tprotected self: PolyScene = (<unknown>this) as PolyScene;\n\tprivate _frame: number = 1;\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _frame_range: FrameRange = [1, 600];\n\tprivate _frame_range_locked: [boolean, boolean] = [true, true];\n\tprivate _playing: boolean = false;\n\tprivate _fps: number = 60;\n\tprivate _frame_interval: number = 1000 / 60;\n\tprivate _next_frame_bound = this.play_next_frame.bind(this);\n\n\tconstructor(private scene: PolyScene) {\n\t\tthis._graph_node = new CoreGraphNode(scene, 'time controller');\n\t\t// this._graph_node.set_scene(this.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\t// init() {\n\t// \tthis._context = new SceneContext();\n\t// \tthis._context.set_scene(this.scene);\n\n\t// \tthis.set_frame_range(1, 240); //100 - 288*100-100\n\t// \tthis.set_fps(60);\n\t// }\n\t// context() {\n\t// \treturn this._context;\n\t// }\n\tget fps(): number {\n\t\treturn this._fps;\n\t}\n\tget frame(): number {\n\t\treturn this._frame;\n\t}\n\tget time(): number {\n\t\treturn this._frame / this._fps;\n\t}\n\tget frame_range(): FrameRange {\n\t\treturn this._frame_range;\n\t}\n\tget frame_range_locked(): [boolean, boolean] {\n\t\treturn this._frame_range_locked;\n\t}\n\tset_frame_range(start_frame: number, end_frame: number) {\n\t\tthis._frame_range[0] = Math.floor(start_frame);\n\t\tthis._frame_range[1] = Math.floor(end_frame);\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_frame_range_locked(start_locked: boolean, end_locked: boolean) {\n\t\tthis._frame_range_locked[0] = start_locked;\n\t\tthis._frame_range_locked[1] = end_locked;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_fps(fps: number) {\n\t\tthis._fps = Math.floor(fps);\n\t\tthis._frame_interval = 1000 / this._fps;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\n\tset_frame(frame: number) {\n\t\tframe = this._ensure_frame_within_bounds(frame);\n\t\tif (frame != this.frame) {\n\t\t\tthis._frame = frame;\n\t\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_UPDATED);\n\t\t\tthis.scene.uniforms_controller.update_frame_dependent_uniform_owners();\n\n\t\t\t// we block updates here, so that dependent nodes only cook once\n\t\t\tthis.scene.cooker.block();\n\t\t\tthis.graph_node.set_successors_dirty();\n\t\t\tthis.scene.cooker.unblock();\n\t\t}\n\t}\n\tincrement_frame() {\n\t\t// let frame = this._context.frame() + 1;\n\t\t// frame = this._ensure_frame_within_bounds(frame);\n\t\tthis.set_frame(this.frame + 1);\n\t}\n\tdecrement_frame() {\n\t\tthis.set_frame(this.frame - 1);\n\t\t// let frame = this._context.frame() - 1;\n\t\t// frame = this._ensure_frame_within_bounds(frame);\n\t\t// this.set_frame(frame);\n\t}\n\tset_first_frame() {\n\t\tthis.set_frame(this.frame_range[0]);\n\t}\n\t_ensure_frame_within_bounds(frame: number): number {\n\t\tif (this._frame_range_locked[0] && frame < this._frame_range[0]) {\n\t\t\treturn this._frame_range[1];\n\t\t}\n\t\tif (this._frame_range_locked[1] && frame > this._frame_range[1]) {\n\t\t\treturn this._frame_range[0];\n\t\t}\n\t\treturn frame;\n\t}\n\tget playing() {\n\t\treturn this._playing === true;\n\t}\n\tpause() {\n\t\tthis._playing = false;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t}\n\tplay() {\n\t\tif (this._playing !== true) {\n\t\t\tsetTimeout(this.play_next_frame.bind(this), this._frame_interval);\n\t\t}\n\t\tthis._playing = true;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t}\n\ttoggle_play_pause() {\n\t\tif (this.playing) {\n\t\t\tthis.pause();\n\t\t} else {\n\t\t\tthis.play();\n\t\t}\n\t}\n\n\t// private _prev_t: number = 0;\n\tplay_next_frame() {\n\t\t// const cur_t = performance.now();\n\t\t// console.log(cur_t - this._prev_t, cur_t, this._frame_interval);\n\t\t// this._prev_t = cur_t;\n\t\t//current_time = performance.now()\n\t\t//if !@_last_time_frame_incremented? || ( (current_time - @_last_time_frame_incremented) > 40 )\n\t\tif (this.playing) {\n\t\t\t//@_last_time_frame_incremented = current_time\n\t\t\tif (!this.scene.root.are_children_cooking()) {\n\t\t\t\tthis.increment_frame();\n\t\t\t}\n\n\t\t\tsetTimeout(this._next_frame_bound, this._frame_interval);\n\t\t}\n\t}\n}\n","export enum SceneEvent {\n\tFRAME_RANGE_UPDATED = 'scene_frame_range_updated',\n\tFRAME_UPDATED = 'scene_frame_updated',\n\tPLAY_STATE_UPDATED = 'scene_play_state_updated',\n}\n","import {PolyScene} from '../PolyScene';\nimport {NodeSerializer} from '../../../engine/nodes/utils/Serializer';\n\nexport class PolySceneSerializer {\n\tconstructor(private scene: PolyScene) {}\n\n\tto_json(include_node_param_components: boolean = false) {\n\t\tconst nodes_by_graph_node_id: Dictionary<object> = {};\n\t\tconst params_by_graph_node_id: Dictionary<object> = {};\n\n\t\tfor (let node of this.scene.nodes_controller.all_nodes()) {\n\t\t\tconst node_serializer = new NodeSerializer(node);\n\t\t\tnodes_by_graph_node_id[node.graph_node_id] = node_serializer.to_json(include_node_param_components);\n\n\t\t\tconst params = node.params.all; //lodash_compact(lodash_concat( lodash_values(node.params()), lodash_values(node.spare_params()) ));\n\t\t\tfor (let param of params) {\n\t\t\t\tparams_by_graph_node_id[param.graph_node_id] = param.to_json();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnodes_by_graph_node_id,\n\t\t\tparams_by_graph_node_id,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ntype IUniforms = Dictionary<IUniform>;\nexport interface IUniformsWithFrame extends IUniforms {\n\tframe: IUniform;\n}\nexport interface IUniformsWithResolution extends IUniforms {\n\tresolution: {\n\t\tvalue: Vector2Like;\n\t};\n}\n\nexport class UniformsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _frame_dependent_uniform_owners: Dictionary<IUniformsWithFrame> = {}; //new Map()\n\tprivate _frame_dependent_uniform_owners_ids: string[] | null = null;\n\n\tprivate _resolution: Vector2 = new Vector2(1, 1);\n\tprivate _resolution_dependent_uniform_owners: Dictionary<IUniformsWithResolution> = {};\n\tprivate _resolution_dependent_uniform_owners_ids: string[] = [];\n\n\t// frame\n\tadd_frame_dependent_uniform_owner(id: string, uniforms: IUniformsWithFrame) {\n\t\tthis._frame_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_frame_dependent_uniform_owners_ids();\n\t}\n\tremove_frame_dependent_uniform_owner(id: string) {\n\t\tdelete this._frame_dependent_uniform_owners[id];\n\t\tthis._update_frame_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_frame_dependent_uniform_owners_ids() {\n\t\tthis._frame_dependent_uniform_owners_ids = Object.keys(this._frame_dependent_uniform_owners);\n\t}\n\tpublic update_frame_dependent_uniform_owners() {\n\t\tconst frame = this.scene.frame;\n\t\tif (this._frame_dependent_uniform_owners_ids) {\n\t\t\tfor (let id of this._frame_dependent_uniform_owners_ids) {\n\t\t\t\tconst uniforms = this._frame_dependent_uniform_owners[id];\n\t\t\t\tuniforms.frame.value = frame;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolution\n\tadd_resolution_dependent_uniform_owner(id: string, uniforms: IUniformsWithResolution) {\n\t\tthis._resolution_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t\tif (this._resolution) {\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tremove_resolution_dependent_uniform_owner(id: string) {\n\t\tdelete this._resolution_dependent_uniform_owners[id];\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_resolution_dependent_uniform_owners_ids() {\n\t\tthis._resolution_dependent_uniform_owners_ids = Object.keys(this._resolution_dependent_uniform_owners);\n\t}\n\tupdate_resolution_dependent_uniform_owners(resolution: Vector2) {\n\t\tthis._resolution.copy(resolution);\n\t\tfor (let id of this._resolution_dependent_uniform_owners_ids) {\n\t\t\tconst uniforms = this._resolution_dependent_uniform_owners[id];\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tupdate_resolution_dependent_uniforms(uniforms: IUniformsWithResolution) {\n\t\tuniforms.resolution.value.x = this._resolution.x * window.devicePixelRatio;\n\t\tuniforms.resolution.value.y = this._resolution.y * window.devicePixelRatio;\n\t}\n}\n","import {POLY} from '../../Poly';\n\n// import {PolyScene} from '../PolyScene';\n\nexport class WebGLController {\n\tconstructor() {}\n\n\t_require_webgl2: boolean = false;\n\n\trequire_webgl2() {\n\t\treturn this._require_webgl2;\n\t}\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t\tPOLY.renderers_controller.set_require_webgl2();\n\t\t}\n\t}\n}\n","import {CopRegister} from './Cop';\nimport {EventRegister} from './Event';\nimport {GlRegister} from './Gl';\nimport {MatRegister} from './Mat';\nimport {ObjRegister} from './Obj';\nimport {SopRegister} from './Sop';\n\nimport {POLY} from '../../Poly';\n\nexport class AllRegister {\n\tstatic run() {\n\t\tCopRegister.run(POLY);\n\t\tEventRegister.run(POLY);\n\t\tGlRegister.run(POLY);\n\t\tMatRegister.run(POLY);\n\t\tObjRegister.run(POLY);\n\t\tSopRegister.run(POLY);\n\t}\n}\n","import {CATEGORY_COP} from './Category';\n\nimport {BuilderCopNode} from '../../nodes/cop/Builder';\nimport {EnvMapCopNode} from '../../nodes/cop/EnvMap';\nimport {FileCopNode} from '../../nodes/cop/File';\nimport {NullCopNode} from '../../nodes/cop/Null';\nimport {SwitchCopNode} from '../../nodes/cop/Switch';\n\nexport interface CopNodeChildrenMap {\n\tbuilder: BuilderCopNode;\n\tenv_map: EnvMapCopNode;\n\tfile: FileCopNode;\n\tnull: NullCopNode;\n\tswitch: SwitchCopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class CopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(BuilderCopNode, CATEGORY_COP.ADVANCED);\n\t\tpoly.register_node(EnvMapCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(FileCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(NullCopNode, CATEGORY_COP.MISC);\n\t\tpoly.register_node(SwitchCopNode, CATEGORY_COP.MISC);\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {RGBAFormat} from 'three/src/constants';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {NearestFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {HalfFloatType} from 'three/src/constants';\nimport {FloatType} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {ClampToEdgeWrapping} from 'three/src/constants';\nimport {Camera} from 'three/src/cameras/Camera';\n\n// import NodeBase from '../_Base'\n\n// import Container from '../../Container/Texture'\n// import {CoreImage} from '../../../Core/Image'\n\nimport {TypedCopNode} from './_Base';\n\n// import { GlobalsGeometryHandler } from \"src/Engine/Node/Gl/Assembler/Globals/Geometry\";\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerTexture} from '../gl/code/assemblers/textures/Texture';\n\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\n\nconst PASS_THROUGH_SHADER = `\nvoid main()\t{\n\tgl_Position = vec4( position, 1.0 );\n}\n`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreSleep} from '../../../core/Sleep';\nclass BuilderCopParamsConfig extends NodeParamsConfig {\n\tresolution = ParamConfig.VECTOR2([256, 256]);\n}\n\nconst ParamsConfig = new BuilderCopParamsConfig();\n\nexport class BuilderCopNode extends TypedCopNode<BuilderCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'builder';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<\n\t\tShaderAssemblerTexture\n\t> = this._create_assembler_controller();\n\n\tprivate _create_assembler_controller() {\n\t\tconst globals_handler = new GlobalsGeometryHandler();\n\t\tconst assembler_controller = new GlAssemblerController<ShaderAssemblerTexture>(this, ShaderAssemblerTexture);\n\t\tassembler_controller.set_assembler_globals_handler(globals_handler);\n\t\treturn assembler_controller;\n\t}\n\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tprivate _texture_mesh: Mesh = new Mesh(new PlaneBufferGeometry(2, 2));\n\tprivate _fragment_shader: string | undefined;\n\tprivate _uniforms: IUniforms | undefined;\n\tprivate _texture_material: ShaderMaterial = new ShaderMaterial({\n\t\tuniforms: {},\n\t\tvertexShader: PASS_THROUGH_SHADER,\n\t\tfragmentShader: '',\n\t});\n\tprivate _texture_scene: Scene = new Scene();\n\tprivate _texture_camera: Camera = new Camera();\n\tprivate _render_target: WebGLRenderTarget | undefined;\n\tprivate _renderer: WebGLRenderer | undefined;\n\tprivate _pixelBuffer: Float32Array | undefined;\n\t// private _assembler: ShaderAssemblerTexture;\n\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_node() {\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t\tthis._texture_mesh.material = this._texture_material;\n\t\tthis._texture_scene.add(this._texture_mesh);\n\t\tthis._texture_camera.position.z = 1;\n\n\t\t// this._init_common_shader_builder(ShaderAssemblerTexture, {\n\t\t// \thas_display_flag: true\n\t\t// });\n\t\t// this.set_inputs_count_to_zero();\n\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_reset_if_resolution_changed',\n\t\t\tthis._reset_if_resolution_changed.bind(this)\n\t\t);\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis._render_target = this._create_render_target();\n\t\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\t});\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tprivate _reset_if_resolution_changed(trigger?: CoreGraphNode) {\n\t\tif (trigger && trigger.graph_node_id == this.p.resolution.graph_node_id) {\n\t\t\tthis._reset();\n\t\t}\n\t}\n\tprivate _reset() {\n\t\tthis._render_target = this._create_render_target();\n\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\tthis._pixelBuffer = this._create_pixel_buffer();\n\t}\n\tprivate _create_pixel_buffer() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\t\treturn new Float32Array(width * height * 4);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\t\t// await this.assembler_controller.assign_uniform_values();\n\n\t\tthis.render_on_target();\n\t}\n\n\tshaders_by_name() {\n\t\treturn {\n\t\t\tfragment: this._fragment_shader,\n\t\t};\n\t}\n\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\t// && !this.pv.locked){\n\t\t\t// this._texture_material = undefined;\n\t\t\tawait this.run_assembler();\n\t\t\t// const fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\t// const uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\t// if (fragment_shader && uniforms) {\n\t\t\t// \t// await this.eval_params(this._new_params);\n\t\t\t// \tthis._fragment_shader = fragment_shader;\n\t\t\t// \tthis._uniforms = uniforms;\n\t\t\t// } else {\n\t\t\t// \tthrow 'STOP';\n\t\t\t// }\n\t\t\tthis.assembler_controller.post_compile();\n\t\t}\n\t}\n\tprivate async run_assembler() {\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node allowed');\n\t\t\treturn;\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tthis.assembler_controller.assembler.set_root_nodes([output_node]);\n\n\t\t\t// main compilation\n\t\t\tawait this.assembler_controller.assembler.update_fragment_shader();\n\n\t\t\t// receives fragment and uniforms\n\t\t\tconst fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\tconst uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\tif (fragment_shader && uniforms) {\n\t\t\t\tthis._fragment_shader = fragment_shader;\n\t\t\t\tthis._uniforms = uniforms;\n\t\t\t}\n\n\t\t\tif (this.assembler_controller.assembler.frame_dependent()) {\n\t\t\t\tthis.states.time_dependent.force_time_dependent();\n\t\t\t} else {\n\t\t\t\tthis.states.time_dependent.unforce_time_dependent();\n\t\t\t}\n\t\t}\n\n\t\tif (this._fragment_shader && this._uniforms) {\n\t\t\tthis._texture_material.fragmentShader = this._fragment_shader;\n\t\t\tthis._texture_material.uniforms = this._uniforms;\n\t\t\tthis._texture_material.needsUpdate = true;\n\t\t\tthis._texture_material.uniforms.resolution = {\n\t\t\t\tvalue: this.pv.resolution,\n\t\t\t};\n\t\t}\n\n\t\t// this._compile_required = false;\n\t}\n\n\tprivate _create_renderer(render_target: WebGLRenderTarget) {\n\t\tconst renderer = new WebGLRenderer({antialias: true});\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\t// document.body.appendChild( renderer.domElement )\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setRenderTarget(render_target);\n\n\t\treturn renderer;\n\t}\n\n\tasync render_on_target() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\n\t\t// var passThruUniforms = {\n\t\t// \tpassThruTexture: { value: null }\n\t\t// };\n\n\t\tif (!(this._renderer && this._render_target)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._renderer.clear();\n\t\tthis._renderer.render(this._texture_scene, this._texture_camera);\n\t\t// renderer.setClearColor( 0x000000 ) // cancels the bg color\n\n\t\t//read the pixel\n\t\tthis._pixelBuffer = this._pixelBuffer || this._create_pixel_buffer();\n\t\tthis._renderer.readRenderTargetPixels(this._render_target, 0, 0, width, height, this._pixelBuffer);\n\n\t\t// renderer.setRenderTarget( null );\n\n\t\t// var pixelBuffer2 = new Uint8Array( width * height * 4 );\n\t\t// var pixelBuffer2 = Uint8Array.from(pixelBuffer)\n\n\t\t// be careful about the type FloatType\n\t\t// as this may require webgl extensions\n\t\t// see https://threejs.org/docs/#api/en/textures/DataTexture\n\t\tconst texture = new DataTexture(this._pixelBuffer, width, height, RGBAFormat, FloatType);\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// this._texture.needsUpdate = true;\n\n\t\tawait CoreSleep.sleep(2000);\n\n\t\tif (texture) {\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\n\t\t// this.set_texture(this._texture);\n\t\t// this.cook_controller.end_cook();\n\t}\n\n\tprivate _create_render_target() {\n\t\tconst wrapS = ClampToEdgeWrapping;\n\t\tconst wrapT = ClampToEdgeWrapping;\n\n\t\tconst minFilter = NearestFilter;\n\t\tconst magFilter = NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget(this.pv.resolution.x, this.pv.resolution.y, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false,\n\t\t});\n\t\treturn renderTarget;\n\t}\n\n\t// create_material(fragment_shader:string, uniforms:IUniforms) {\n\t// \tvar material = new ShaderMaterial({\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: PASS_THROUGH_SHADER,\n\t// \t\tfragmentShader: fragment_shader\n\t// \t});\n\n\t// \t// addResolutionDefine( material );\n\n\t// \treturn material;\n\t// }\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class TextureContainer extends TypedContainer<ContainableMap['TEXTURE']> {\n\t// _content: Texture;\n\tset_content(content: ContainableMap['TEXTURE']) {\n\t\tsuper.set_content(content);\n\t}\n\n\t// set_texture(texture: Texture){\n\t// \tif (this._content != null) {\n\t// \t\tthis._content.dispose();\n\t// \t}\n\t// \tthis.set_content(texture);\n\t// }\n\ttexture(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content_cloned(): ContainableMap['TEXTURE'] | undefined {\n\t\tconsole.log('clone', this._content);\n\t\tconst texture = this._content?.clone();\n\t\tif (texture) {\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t\treturn texture;\n\t}\n\n\tobject() {\n\t\treturn this.texture();\n\t}\n\n\tinfos() {\n\t\tif (this._content != null) {\n\t\t\treturn [this._content];\n\t\t}\n\t}\n\tresolution(): [number, number] {\n\t\tif (this._content) {\n\t\t\tif (this._content.image) {\n\t\t\t\treturn [this._content.image.width, this._content.image.height];\n\t\t\t}\n\t\t}\n\t\treturn [-1, -1];\n\t}\n}\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// export interface BypassOptions {\n// \thas_bypass_flag?: boolean;\n// }\n\nexport class BypassFlag extends BaseFlag {\n\tprotected _state: boolean = false;\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n\t\tthis.node.set_dirty();\n\t}\n}\n\n// export function Bypass<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\t_has_bypass_flag: boolean = true;\n// \t\t_bypass_flag: boolean = false;\n\n// \t\t_init_bypass_flag(options: BypassOptions = {}) {\n// \t\t\tif (options['has_bypass_flag'] == null) {\n// \t\t\t\toptions['has_bypass_flag'] = true;\n// \t\t\t}\n\n// \t\t\tthis._has_bypass_flag = options['has_bypass_flag'];\n// \t\t\tthis._bypass_flag = false;\n// \t\t}\n\n// \t\thas_bypass_flag(): boolean {\n// \t\t\treturn this._has_bypass_flag;\n// \t\t}\n\n// \t\tis_bypassed(): boolean {\n// \t\t\treturn this._bypass_flag;\n// \t\t}\n\n// \t\tset_bypass_flag(state: boolean) {\n// \t\t\tif (state == null) {\n// \t\t\t\tstate = true;\n// \t\t\t}\n// \t\t\tif (state !== this._bypass_flag) {\n// \t\t\t\tthis._bypass_flag = state;\n// \t\t\t\tthis.self.emit('bypass_flag_update');\n// \t\t\t\tthis.self.set_dirty();\n// \t\t\t\t// this.post_set_bypass_flag()\n// \t\t\t}\n// \t\t}\n\n// \t\t// post_process_container_request_as_bypassed(input_node: BaseNode){}\n// \t\t// post_set_bypass_flag(){}\n\n// \t\ttoggle_bypass_flag() {\n// \t\t\tthis.set_bypass_flag(!this.is_bypassed());\n// \t\t}\n// \t};\n// }\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\nexport class DisplayFlag extends BaseFlag {\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n\t\t// this.node.set_dirty();\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {SceneJsonExporter} from './Scene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {JsonExportDispatcher} from './Dispatcher';\nimport {ParamJsonExporterData} from './Param';\nimport {ParamType} from '../../../poly/ParamType';\n\ninterface NamedInputData {\n\tname: string;\n\tnode: string;\n\toutput: string;\n}\ntype IndexedInputData = string | null;\nexport type InputData = NamedInputData | IndexedInputData;\n\ninterface FlagsData {\n\tbypass?: boolean;\n\tdisplay?: boolean;\n}\n\nexport interface NodeJsonExporterData {\n\ttype: string;\n\tnodes: Dictionary<NodeJsonExporterData>;\n\tchildren_context: NodeContext;\n\tparams?: Dictionary<ParamJsonExporterData<ParamType>>;\n\tinputs?: InputData[];\n\tselection?: string[];\n\tflags?: FlagsData;\n\toverride_clonable_state: boolean;\n}\n\nexport interface NodeJsonExporterUIData {\n\tpos?: Number2;\n\tcomment?: string;\n\tnodes: Dictionary<NodeJsonExporterUIData>;\n}\n\nexport class NodeJsonExporter<T extends BaseNodeType> {\n\tprivate _data: NodeJsonExporterData | undefined; // = {} as NodeJsonExporterData;\n\tconstructor(protected _node: T) {}\n\n\tdata(): NodeJsonExporterData {\n\t\tif (!this.is_root()) {\n\t\t\tthis._node.scene.nodes_controller.register_node_context_signature(this._node);\n\t\t}\n\t\tthis._data = {\n\t\t\ttype: this._node.type,\n\t\t} as NodeJsonExporterData;\n\n\t\t// const required_imports = this._node.required_imports()\n\t\t// if(required_imports){\n\t\t// \tthis._data['required_imports'] = required_imports\n\t\t// }\n\n\t\tconst nodes_data = this.nodes_data();\n\t\tif (Object.keys(nodes_data).length > 0) {\n\t\t\tthis._data['nodes'] = nodes_data;\n\n\t\t\t// required by the Store::Scene::Exporter.rb\n\t\t\tconst context = this._node.children_controller?.context;\n\t\t\tif (context) {\n\t\t\t\tthis._data['children_context'] = context;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is_root()) {\n\t\t\tthis._data['params'] = this.params_data();\n\t\t\t//data['custom'] = []\n\t\t\tthis._data['inputs'] = this.inputs_data();\n\t\t}\n\n\t\t// TODO: does that create flags automatically? it should not\n\t\tif (this._node.flags) {\n\t\t\tthis._data['flags'] = {};\n\t\t\tif (this._node.flags.has_bypass()) {\n\t\t\t\tif (this._node.flags.bypass?.active) {\n\t\t\t\t\tthis._data['flags']['bypass'] = this._node.flags.bypass.active;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._node.flags.has_display()) {\n\t\t\t\tthis._data['flags']['display'] = this._node.flags.display?.active;\n\t\t\t}\n\t\t}\n\n\t\tif (this._node.children_allowed()) {\n\t\t\tconst selection = this._node.children_controller?.selection;\n\t\t\tif (selection && this._node.children().length > 0) {\n\t\t\t\t// only save the nodes that are still present, in case the selection just got deleted\n\t\t\t\tconst selected_children: BaseNodeType[] = [];\n\t\t\t\tconst selected_ids: Dictionary<boolean> = {};\n\t\t\t\tfor (let selected_node of selection.nodes()) {\n\t\t\t\t\tselected_ids[selected_node.graph_node_id] = true;\n\t\t\t\t}\n\t\t\t\tfor (let child of this._node.children()) {\n\t\t\t\t\tif (child.graph_node_id in selected_ids) {\n\t\t\t\t\t\tselected_children.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data['selection'] = selected_children.map((n) => n.name);\n\t\t\t}\n\t\t}\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = this._node.io.inputs.override_clonable_state();\n\t\t\tif (override) {\n\t\t\t\tthis._data['override_clonable_state'] = override;\n\t\t\t}\n\t\t}\n\n\t\t// custom\n\t\tthis.add_custom();\n\n\t\treturn this._data;\n\t}\n\n\tui_data(): NodeJsonExporterUIData {\n\t\tconst data: NodeJsonExporterUIData = {} as NodeJsonExporterUIData;\n\t\tif (!this.is_root()) {\n\t\t\tconst ui_data = this._node.ui_data;\n\t\t\tdata['pos'] = ui_data.position.toArray() as Number2;\n\t\t\tconst comment = ui_data.comment;\n\t\t\tif (comment) {\n\t\t\t\tdata['comment'] = SceneJsonExporter.sanitize_string(comment);\n\t\t\t}\n\t\t}\n\t\tconst children = this._node.children();\n\t\tif (children.length > 0) {\n\t\t\tdata['nodes'] = {};\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tdata['nodes'][child.name] = node_exporter.ui_data();\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate is_root() {\n\t\treturn this._node.parent === null && this._node.graph_node_id == this._node.root.graph_node_id;\n\t}\n\n\tprotected inputs_data() {\n\t\tconst data: InputData[] = [];\n\t\t// Object.keys(this._node.io.inputs.inputs()).forEach((input_index) => {\n\t\tthis._node.io.inputs.inputs().forEach((input, input_index) => {\n\t\t\t// const input = this._node.io.inputs.input(input_index);\n\t\t\tif (input) {\n\t\t\t\t// const connection_point = this._node.io.inputs.named_input_connection_points;\n\t\t\t\tconst connection = this._node.io.connections.input_connection(input_index)!;\n\t\t\t\tif (this._node.io.inputs.has_named_inputs) {\n\t\t\t\t\tconst input_name = this._node.io.inputs.named_input_connection_points[input_index].name;\n\t\t\t\t\t// const output_index = input_connections[input_index].output_index();\n\t\t\t\t\tconst output_index = connection.output_index;\n\t\t\t\t\tconst output_name = input.io.outputs.named_output_connection_points[output_index].name;\n\t\t\t\t\tdata.push({name: input_name, node: input.name, output: output_name});\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(input.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tprotected params_data() {\n\t\tconst data: Dictionary<ParamJsonExporterData<ParamType>> = {};\n\n\t\tfor (let param_name of this._node.params.names) {\n\t\t\tconst param = this._node.params.get(param_name);\n\t\t\tif (param && !param.parent_param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tdata[param.name] = params_data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprotected nodes_data() {\n\t\tconst data: Dictionary<NodeJsonExporterData> = {};\n\t\tfor (let child of this._node.children()) {\n\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.json_exporter()\n\t\t\tdata[child.name] = node_exporter.data();\n\t\t}\n\t\treturn data;\n\t}\n\n\tprotected add_custom() {}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {TypedNumericParam} from '../../../../params/_Numeric';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamNumericJsonExporter extends ParamJsonExporter<TypedNumericParam<ParamType>> {\n\tadd_main() {\n\t\t// if (this._param.has_expression() && this._param.expression_controller?.expression) {\n\t\t// \t// const escaped_expression = this._param.expression().replace(/'/g, \"\\\\'\");\n\t\t// \tthis._data['expression'] = this._param.expression_controller?.expression;\n\t\t// } else {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t\t// }\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {SceneJsonExporter} from '../Scene';\n\nexport class ParamOperatorPathJsonExporter extends ParamJsonExporter<OperatorPathParam> {\n\tadd_main() {\n\t\tlet val = this._param.raw_input;\n\t\t// val = val.replace(/'/g, \"\\\\'\");\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","// import lodash_isString from 'lodash/isString'\nimport {ParamJsonExporter} from '../Param';\nimport {SceneJsonExporter} from '../Scene';\nimport {StringParam} from '../../../../params/String';\n\nexport class ParamStringJsonExporter extends ParamJsonExporter<StringParam> {\n\tadd_main() {\n\t\t// let val = this._param.input_value();\n\t\tlet val = this._param.raw_input;\n\t\t// if (lodash_isString(val)){\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\t\t// }\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {RampParam} from '../../../../params/Ramp';\n\nexport class ParamRampJsonExporter extends ParamJsonExporter<RampParam> {\n\tadd_main() {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\nimport {IUniforms} from '../../../../../../core/geometry/Material';\n// import {GlobalsTextureHandler} from '../../../../../Engine/Node/Gl/Assembler/Globals/Texture'\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport TemplateDefault from '../../templates/textures/Default.frag.glsl';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {IUniformsWithFrame} from '../../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\n// import {BaseGlNodeType} from '../../../_Base';\n\nexport class ShaderAssemblerTexture extends BaseGlShaderAssembler {\n\tprivate _uniforms: IUniforms | undefined;\n\n\tget _template_shader() {\n\t\treturn {\n\t\t\tfragmentShader: TemplateDefault,\n\t\t\tvertexShader: undefined,\n\t\t\tuniforms: undefined,\n\t\t};\n\t}\n\n\t// async compile() {\n\t// \tawait this.update_fragment_shader();\n\t// }\n\n\tfragment_shader() {\n\t\treturn this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tuniforms() {\n\t\treturn this._uniforms;\n\t}\n\t// _create_material() {\n\t// \treturn undefined;\n\t// }\n\n\tasync update_fragment_shader() {\n\t\tthis._lines = new Map();\n\t\tthis._shaders_by_name = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\tconst template = this._template_shader.fragmentShader;\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\n\t\tthis._uniforms = this._uniforms || {};\n\t\tthis.add_uniforms(this._uniforms);\n\t\t// const new_uniforms = this.build_uniforms({}, this._uniforms || {});\n\t\t// this._uniforms = new_uniforms;\n\t\t// this._uniforms = this._uniforms || {};\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\t\t// \tthis._uniforms[uniform_name] = new_uniforms[uniform_name];\n\t\t// }\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\n\t\t// That's actually useless, since this doesn't make the texture recook\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst id = this._gl_parent_node.graph_node_id;\n\t\tif (this.frame_dependent()) {\n\t\t\tif (this._uniforms) {\n\t\t\t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(id, this._uniforms as IUniformsWithFrame);\n\t\t\t}\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(id);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('frame', ConnectionPointType.FLOAT),\n\t\t\t// new Connection.Vec2('resolution'),\n\t\t]);\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn [new ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [])];\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t\tdefault: '1.0',\n\t\t\t}),\n\t\t];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == 'fragment') {\n\t\t\tbody_lines.push(`vec2 ${var_name} = vec2(gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y)`);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\t// add_export_body_line(\n\t// \texport_node: BaseGlNodeType,\n\t// \tshader_name: ShaderName,\n\t// \tinput_name: string,\n\t// \tinput: BaseGlNodeType,\n\t// \tvariable_name: string\n\t// ) {\n\t// \t// let input\n\t// \t// let variable_name\n\t// \t// if(export_node.type() == 'output'){\n\t// \t// \tinput = export_node.named_input(input_name)\n\t// \t// \tvariable_name = input_name\n\t// \t// } else {\n\t// \t// \t// if attribute\n\t// \t// \tinput = export_node.connected_named_input()\n\t// \t// \tvariable_name = export_node.attribute_name()\n\t// \t// }\n\n\t// \tif (input) {\n\t// \t\tconst var_input = export_node.variable_for_input(input_name);\n\t// \t\tconst new_var = ThreeToGl.vector3(var_input);\n\t// \t\tif (new_var) {\n\t// \t\t\t// const texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\t\t// \texport_node,\n\t// \t\t\t// \tshader_name,\n\t// \t\t\t// \tvariable_name\n\t// \t\t\t// )\n\t// \t\t\tconst texture_variable = this._texture_allocations_controller.variable(variable_name);\n\t// \t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t// \t\t\tif (texture_variable.allocation().shader_name() == shader_name) {\n\t// \t\t\t\tconst component = texture_variable.component();\n\n\t// \t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t// \t\t\t\texport_node.add_body_lines([line], shader_name);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\t// add_import_body_line(\n\t// \timport_node: BaseNodeGl,\n\t// \tshader_name: ShaderName,\n\t// \toutput_name: string,\n\t// \tvariable_name: string\n\t// \t){\n\t// \t\tthrow \"not sure I want to use this method anymore\"\n\t// \tconst named_output = import_node.named_output_by_name(output_name)\n\t// \tconst gl_type = named_output.gl_type()\n\n\t// \tconst map_name = `texture_${shader_name}`\n\t// \tconst definition = new Definition.Uniform(import_node, 'sampler2D', map_name)\n\t// \t// definitions_by_shader_name[import_node._shader_name].push(definition)\n\t// \timport_node.add_definitions([definition])\n\n\t// \tconst var_name = import_node.gl_var_name(output_name)\n\n\t// \tconst texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\timport_node,\n\t// \t\tshader_name,\n\t// \t\tvariable_name\n\t// \t)\n\t// \tif(!texture_variable){\n\t// \t\tthis._texture_allocations_controller.print(this._gl_parent_node.scene())\n\t// \t}\n\t// \tconst component = texture_variable.component()\n\t// \tconst lines = [\n\t// \t\t`${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).${component}`,\n\t// \t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t]\n\t// \timport_node.add_body_lines(lines, shader_name)\n\t// }\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst input_names = this.input_names_for_shader_name(\n\t\t\toutput_node,\n\t\t\tshaders_collection_controller.current_shader_name\n\t\t);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst gl_var = output_node.variable_for_input(input_name);\n\n\t\t\t\t\tlet body_line: string | undefined;\n\t\t\t\t\tif (input_name == 'color') {\n\t\t\t\t\t\tbody_line = `diffuseColor.xyz = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (input_name == 'alpha') {\n\t\t\t\t\t\tbody_line = `diffuseColor.a = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (body_line) {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [body_line]);\n\t\t\t\t\t}\n\t\t\t\t\t// this.add_export_body_line(\n\t\t\t\t\t// \toutput_node,\n\t\t\t\t\t// \tshaders_collection_controller.current_shader_name,\n\t\t\t\t\t// \tinput_name,\n\t\t\t\t\t// \tinput,\n\t\t\t\t\t// \tvariable_name\n\t\t\t\t\t// \t)\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// set_node_lines_attribute(attribute_node: Attribute, shader_name: ShaderName){\n\n\t// \tif(attribute_node.is_importing()){\n\t// \t\tconst gl_type = attribute_node.gl_type()\n\t// \t\tconst attribute_name = attribute_node.attribute_name()\n\t// \t\tconst new_value = this.globals_handler().read_attribute(\n\t// \t\t\tattribute_node,\n\t// \t\t\tgl_type,\n\t// \t\t\tattribute_name,\n\t// \t\t\tshader_name\n\t// \t\t\t)\n\t// \t\tconst var_name = attribute_node.gl_var_name(Attribute.output_name())\n\t// \t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`\n\t// \t\tattribute_node.add_body_lines([body_line])\n\n\t// \t\t// re-export to ensure it is available on next frame\n\t// \t\tconst texture_variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\tif(texture_variable.allocation().shader_name() == shader_name){\n\n\t// \t\t\tconst variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\t\tconst component = variable.component()\n\t// \t\t\tattribute_node.add_body_lines([\n\t// \t\t\t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t\t\t])\n\t// \t\t}\n\n\t// \t\t// this.add_import_body_line(\n\t// \t\t// \tattribute_node,\n\t// \t\t// \tshader_name,\n\t// \t\t// \tAttribute.output_name(),\n\t// \t\t// \tattribute_node.attribute_name()\n\t// \t\t// \t)\n\t// \t}\n\t// \tif(attribute_node.is_exporting()){\n\t// \t\tconst input = attribute_node.connected_named_input()\n\t// \t\tconst variable_name = attribute_node.attribute_name()\n\n\t// \t\tthis.add_export_body_line(\n\t// \t\t\tattribute_node,\n\t// \t\t\tshader_name,\n\t// \t\t\tAttribute.input_name(),\n\t// \t\t\tinput,\n\t// \t\t\tvariable_name\n\t// \t\t\t)\n\t// \t}\n\t// }\n\t// set_node_lines_globals(globals_node: Globals, shader_name: ShaderName){\n\t// \tconst vertex_definitions = []\n\t// \tconst fragment_definitions = []\n\t// \tconst definitions = []\n\t// \t// const vertex_body_lines = []\n\t// \tconst fragment_body_lines = []\n\t// \tconst body_lines = []\n\n\t// \t// const shader_config = this.shader_config(shader_name)\n\t// \t// const dependencies = shader_config.dependencies()\n\n\t// \tconst definitions_by_shader_name = {}\n\t// \tdefinitions_by_shader_name[shader_name] = []\n\t// \t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t// \t// const body_lines_by_shader_name = {}\n\t// \t// body_lines_by_shader_name[shader_name] = []\n\t// \t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t// \tlet definition\n\t// \tlet body_line\n\t// \tfor(let output_name of globals_node.used_output_names()){\n\t// \t\tconst var_name = globals_node.gl_var_name(output_name)\n\n\t// \t\tswitch (output_name){\n\t// \t\t\tcase 'frame':\n\t// \t\t\t\tdefinition = new Definition.Uniform(globals_node, 'float', output_name)\n\t// \t\t\t\t// vertex_definitions.push(definition)\n\t// \t\t\t\t// fragment_definitions.push(definition)\n\t// \t\t\t\tdefinitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t// \t\t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t// \t\t\t\t// for(let dependency of dependencies){\n\t// \t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t// \t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t// \t\t\t\t// }\n\n\t// \t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t// \t\t\t\tbody_lines.push(body_line)\n\t// \t\t\t\tbreak;\n\n\t// \t\t\tdefault:\n\t// \t\t\t\t// this.add_import_body_line(globals_node, shader_name, output_name, output_name)\n\t// \t\t\t\tconst named_output = globals_node.named_output_by_name(output_name)\n\t// \t\t\t\tconst gl_type = named_output.gl_type()\n\n\t// \t\t\t\tconst attrib_read = this.globals_handler().read_attribute(\n\t// \t\t\t\t\tglobals_node,\n\t// \t\t\t\t\tgl_type,\n\t// \t\t\t\t\toutput_name,\n\t// \t\t\t\t\tshader_name\n\t// \t\t\t\t)\n\t// \t\t\t\tbody_line = `${gl_type} ${var_name} = ${attrib_read}`\n\t// \t\t\t\tbody_lines.push(body_line)\n\t// \t\t\t\t//\n\n\t// \t\t\t\t// const map_name = `texture_${output_name}`\n\t// \t\t\t\t// definition = new Definition.Uniform(globals_node, 'sampler2D', map_name)\n\t// \t\t\t\t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t// \t\t\t\t// body_line = `${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).xyz`\n\n\t// \t\t\t\t// // // if(dependencies.length == 0){\n\t// \t\t\t\t// body_lines.push(body_line)\n\t// \t\t\t\t// }\n\t// \t\t}\n\t// \t}\n\t// \t// this.set_vertex_definitions(vertex_definitions)\n\t// \t// this.set_fragment_definitions(fragment_definitions)\n\t// \tfor(let shader_name of Object.keys(definitions_by_shader_name)){\n\t// \t\tglobals_node.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t// \t}\n\t// \t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t// \t// \tglobals_node.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t// \t// }\n\t// \t// this.add_definitions(definitions)\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \tglobals_node.add_body_lines(body_lines)\n\t// }\n}\n","import lodash_uniq from 'lodash/uniq';\nimport {BaseGlNodeType} from '../../_Base';\nimport {TypedNodeTraverser} from '../../../utils/shaders/NodeTraverser';\nimport {BaseNodeType} from '../../../_Base';\nimport {BaseGlShaderAssembler} from '../assemblers/_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {GLDefinitionType, BaseGLDefinition} from '../../utils/GLDefinition';\nimport {TypedGLDefinitionCollection} from '../../utils/GLDefinitionCollection';\nimport {ParamConfigsController} from '../../../../nodes/utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './ShadersCollectionController';\nimport {CodeFormatter} from './CodeFormatter';\n\nimport {LineType} from './LineType';\n\nexport class CodeBuilder {\n\t_param_configs_controller: ParamConfigsController = new ParamConfigsController();\n\t_param_configs_set_allowed: boolean = true;\n\n\tprivate _shaders_collection_controller: ShadersCollectionController | undefined;\n\t_lines: Map<ShaderName, Map<LineType, string[]>> = new Map();\n\t_function_declared: Map<ShaderName, Map<string, boolean>> = new Map();\n\n\tconstructor(private _assembler: BaseGlShaderAssembler, private _gl_parent_node: BaseNodeType) {}\n\n\tasync build_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this._assembler, this._gl_parent_node);\n\t\tnode_traverser.traverse(root_nodes);\n\n\t\tconst nodes_by_shader_name: Map<ShaderName, BaseGlNodeType[]> = new Map();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tnodes_by_shader_name.set(shader_name, node_traverser.nodes_for_shader_name(shader_name));\n\t\t}\n\t\tconst sorted_nodes = node_traverser.sorted_nodes();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst root_nodes_for_shader = this._assembler.root_nodes_by_shader_name(shader_name);\n\t\t\t// const leaf_nodes_for_shader = this._assembler.leaf_nodes_by_shader_name(shader_name);\n\n\t\t\t// keep track of which nodes are both leaf and root, and do not use their code twice\n\t\t\t// as this may happen with an attribute node, when used as both import and export\n\t\t\t// TODO: that seems useless, as I surely should be able to filter duplicates if needed\n\n\t\t\t// ensure nodes are unique\n\t\t\t// const node_ids: Map<string, boolean> = new Map();\n\t\t\t// nodes_by_shader_name.forEach((nodes, shader_name) => {\n\t\t\t// \tfor (let node of nodes) {\n\t\t\t// \t\tnode_ids.set(node.graph_node_id, true);\n\t\t\t// \t}\n\t\t\t// });\n\n\t\t\tfor (let root_node of root_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[root_node.graph_node_id()]){\n\t\t\t\t// if (!node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tMapUtils.push_on_array_at_entry(nodes_by_shader_name, shader_name, root_node);\n\t\t\t\t// node_ids.set(root_node.graph_node_id, true);\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t}\n\t\t\t// for (let leaf_node of leaf_nodes_for_shader) {\n\t\t\t// if(!both_leaf_and_root_nodes_by_id[leaf_node.graph_node_id()]){\n\t\t\t// if (!node_ids.get(leaf_node.graph_node_id)) {\n\t\t\t// MapUtils.unshift_on_array_at_entry(nodes_by_shader_name, shader_name, leaf_node);\n\t\t\t// }\n\t\t\t// }\n\t\t\t// }\n\t\t}\n\n\t\t// ensure nodes are not added if already present\n\t\tconst sorted_node_ids: Map<string, boolean> = new Map();\n\t\tfor (let node of sorted_nodes) {\n\t\t\tsorted_node_ids.set(node.graph_node_id, true);\n\t\t}\n\n\t\tfor (let root_node of root_nodes) {\n\t\t\tif (!sorted_node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tsorted_nodes.push(root_node);\n\t\t\t\tsorted_node_ids.set(root_node.graph_node_id, true);\n\t\t\t}\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\t// node.set_assembler(this._assembler);\n\t\t\tnode.reset_code();\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\t// const param_promises = sorted_nodes.map(node=>{\n\t\t// \treturn node.eval_all_params()\n\t\t// })\n\t\t// await Promise.all(param_promises)\n\n\t\tthis._shaders_collection_controller = new ShadersCollectionController(\n\t\t\tthis.shader_names(),\n\t\t\tthis.shader_names()[0]\n\t\t);\n\t\tthis.reset();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst nodes = lodash_uniq(nodes_by_shader_name.get(shader_name));\n\t\t\tthis._shaders_collection_controller.set_current_shader_name(shader_name);\n\t\t\tif (nodes) {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\t// node.set_shader_name(shader_name);\n\t\t\t\t\tif (this._param_configs_set_allowed) {\n\t\t\t\t\t\tnode.set_param_configs();\n\t\t\t\t\t}\n\t\t\t\t\tnode.set_lines(this._shaders_collection_controller);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// fragment_nodes.forEach(node=>{\n\t\t// \tnode.set_shader_name(ShaderName.FRAGMENT)\n\t\t// \tnode.set_param_configs()\n\t\t// \tnode.set_lines()\n\t\t// })\n\t\tif (this._param_configs_set_allowed) {\n\t\t\tthis.set_param_configs(sorted_nodes);\n\t\t}\n\t\tthis.set_code_lines(sorted_nodes);\n\t}\n\n\tdisallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = false;\n\t}\n\tallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = true;\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\n\tprivate reset() {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst lines_map = new Map();\n\t\t\t// for (let line_type of LINE_TYPES) {\n\t\t\t// \tlines_map.set(line_type, []);\n\t\t\t// }\n\t\t\tthis._lines.set(shader_name, lines_map);\n\t\t\tthis._function_declared.set(shader_name, new Map());\n\t\t}\n\t}\n\n\tparam_configs() {\n\t\treturn this._param_configs_controller.list || [];\n\t}\n\tlines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this._lines.get(shader_name)!.get(line_type);\n\t}\n\tall_lines() {\n\t\treturn this._lines;\n\t}\n\n\tset_param_configs(nodes: BaseGlNodeType[]) {\n\t\tthis._param_configs_controller.reset();\n\t\tfor (let node of nodes) {\n\t\t\tconst param_configs = node.param_configs();\n\t\t\tif (param_configs) {\n\t\t\t\tfor (let param_config of param_configs) {\n\t\t\t\t\tthis._param_configs_controller.push(param_config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_code_lines(nodes: BaseGlNodeType[]) {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\t// nodes.forEach((node, i)=>{\n\t\t\tthis.add_code_lines(nodes, shader_name);\n\t\t\t// })\n\t\t}\n\t}\n\n\tadd_code_lines(nodes: BaseGlNodeType[], shader_name: ShaderName) {\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.FUNCTION, LineType.FUNCTION_DECLARATION);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.UNIFORM, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.VARYING, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.ATTRIBUTE, LineType.DEFINE);\n\n\t\tthis.add_code_line_for_nodes_and_line_type(nodes, shader_name, LineType.BODY);\n\t}\n\n\tprivate add_definitions(\n\t\tnodes: BaseGlNodeType[],\n\t\tshader_name: ShaderName,\n\t\tdefinition_type: GLDefinitionType,\n\t\tline_type: LineType\n\t) {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst definitions = [];\n\t\tfor (let node of nodes) {\n\t\t\tlet node_definitions = this._shaders_collection_controller.definitions(shader_name, node);\n\t\t\tif (node_definitions) {\n\t\t\t\tnode_definitions = node_definitions.filter((d) => d.definition_type == definition_type);\n\t\t\t\tfor (let definition of node_definitions) {\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (definitions.length > 0) {\n\t\t\tconst collection = new TypedGLDefinitionCollection<GLDefinitionType>(definitions);\n\t\t\tconst uniq_definitions = collection.uniq();\n\t\t\tif (collection.errored) {\n\t\t\t\t// TODO: handle error\n\t\t\t\tthrow `code builder error: ${collection.error_message}`;\n\t\t\t}\n\n\t\t\tconst definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tfor (let definition of uniq_definitions) {\n\t\t\t\tconst node_id = definition.node.graph_node_id;\n\t\t\t\tif (!node_ids.has(node_id)) {\n\t\t\t\t\tnode_ids.set(node_id, true);\n\t\t\t\t}\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_node_id, node_id, definition);\n\t\t\t}\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tnode_ids.forEach((boolean: boolean, node_id: string) => {\n\t\t\t\tconst definitions = definitions_by_node_id.get(node_id);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tconst first_definition = definitions[0];\n\n\t\t\t\t\tif (first_definition) {\n\t\t\t\t\t\tconst comment = CodeFormatter.node_comment(first_definition.node, line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\n\t\t\t\t\t\tfor (let definition of definitions) {\n\t\t\t\t\t\t\tconst line = CodeFormatter.line_wrap(definition.line, line_type);\n\t\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tadd_code_line_for_nodes_and_line_type(nodes: BaseGlNodeType[], shader_name: ShaderName, line_type: LineType) {\n\t\tnodes = nodes.filter((node) => {\n\t\t\tif (this._shaders_collection_controller) {\n\t\t\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\t\t\t\treturn lines && lines.length > 0;\n\t\t\t}\n\t\t});\n\n\t\tvar nodes_count = nodes.length;\n\t\tfor (let i = 0; i < nodes_count; i++) {\n\t\t\tconst is_last = i == nodes.length - 1;\n\t\t\tthis.add_code_line_for_node_and_line_type(nodes[i], shader_name, line_type, is_last);\n\t\t}\n\t}\n\tadd_code_line_for_node_and_line_type(\n\t\tnode: BaseGlNodeType,\n\t\tshader_name: ShaderName,\n\t\tline_type: LineType,\n\t\tis_last: boolean\n\t): void {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\n\t\tif (lines && lines.length > 0) {\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tconst comment = CodeFormatter.node_comment(node, line_type);\n\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\t\t\tlodash_uniq(lines).forEach((line) => {\n\t\t\t\tline = CodeFormatter.line_wrap(line, line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t});\n\t\t\tif (!(line_type == LineType.BODY && is_last)) {\n\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../../params/types/ParamValuesTypeMap';\nimport {ParamConstructorByType} from '../../../../params/types/ParamConstructorByType';\n\nimport {BaseNodeType} from '../../../_Base';\nimport {TypedParam, BaseParamType} from '../../../../params/_Base';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {TypeAssert} from '../../../../poly/Assert';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import { RampValue } from '../../../../params/ramp/RampValue';\nimport {RampParam} from '../../../../params/Ramp';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\n// import {ParamValueComparer} from '../../params/ParamValueComparer';\n// import {ParamValueCloner} from '../../params/ParamValueCloner';\n// import {CoreTextureLoader} from '../../../../../Core/Loader/Texture'\n\nexport class ParamConfig<T extends ParamType> {\n\tprivate _uniform: IUniform | undefined;\n\tprivate _cached_param_value: ParamValuesTypeMap[T] | undefined;\n\t// private _texture_loader: CoreTextureLoader\n\n\tconstructor(\n\t\tprivate _type: T,\n\t\tprivate _name: string,\n\t\tprivate _default_value: ParamInitValuesTypeMap[T],\n\t\tprivate _uniform_name: string\n\t) {}\n\n\tstatic from_param<K extends ParamType>(param: TypedParam<K>, uniform_name: string): ParamConfig<K> {\n\t\treturn new ParamConfig<K>(param.type, param.name, param.default_value, uniform_name);\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget uniform_name() {\n\t\treturn this._uniform_name;\n\t}\n\n\tget uniform() {\n\t\treturn (this._uniform = this._uniform || this._create_uniform());\n\t}\n\n\tprivate _create_uniform() {\n\t\treturn ParamConfig.uniform_by_type(this._type);\n\t}\n\n\tget param_options() {\n\t\tconst callback_bound = this._callback.bind(this);\n\t\tswitch (this._type) {\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {callback: callback_bound, node_selection: {context: NodeContext.COP}};\n\t\t\tdefault:\n\t\t\t\treturn {callback: callback_bound};\n\t\t}\n\t}\n\n\tprivate _callback(node: BaseNodeType, param: BaseParamType) {\n\t\tthis.uniform.value = param.value;\n\t}\n\n\t// TODO: refactor that to use the default values map?\n\tstatic uniform_by_type(type: ParamType): IUniform {\n\t\tswitch (type) {\n\t\t\tcase ParamType.BOOLEAN:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.BUTTON:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.COLOR:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.FLOAT:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.FOLDER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.INTEGER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {value: 0};\n\t\t\t// case ParamType.STRING: return {type: 't', value: null} // new Texture()}\n\t\t\tcase ParamType.RAMP:\n\t\t\t\treturn {value: null}; // new Texture()}\n\t\t\tcase ParamType.SEPARATOR:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.STRING:\n\t\t\t\treturn {value: null};\n\t\t\tcase ParamType.VECTOR2:\n\t\t\t\treturn {value: new Vector2(0, 0)};\n\t\t\tcase ParamType.VECTOR3:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.VECTOR4:\n\t\t\t\treturn {value: new Vector4(0, 0, 0, 0)};\n\t\t}\n\t\tTypeAssert.unreachable(type);\n\t}\n\n\tasync set_uniform_value(node: BaseNodeType) {\n\t\t// return new Promise( async (resolve, reject)=>{\n\t\tconst uniform = this.uniform;\n\t\t// the cache cannot be trusted...\n\t\tconst param = node.params.get(this._name) as TypedParam<T>;\n\t\tif (param) {\n\t\t\tawait param.compute(); //node[node.param_cache_name(this._name)]\n\t\t\tconst value = param.value;\n\n\t\t\tif ((value != null && this.has_value_changed(value)) || this.is_video_texture()) {\n\t\t\t\t// this._update_cached_value(value);\n\t\t\t\t// console.log(this._name, value)\n\n\t\t\t\tswitch (this._type) {\n\t\t\t\t\tcase ParamType.OPERATOR_PATH: {\n\t\t\t\t\t\tawait this.set_uniform_value_from_texture((<unknown>param) as OperatorPathParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ParamType.RAMP: {\n\t\t\t\t\t\tthis.set_uniform_value_from_ramp((<unknown>param) as RampParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tuniform.value = param.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// resolve()\n\t\t\t} // else {\n\t\t\t//\tresolve()\n\t\t\t//}\n\t\t\t// })\n\t\t}\n\t}\n\n\tasync set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n\t\t// this._texture_loader = this._texture_loader || new CoreTextureLoader(node, node.param(this.name()))\n\n\t\t// // param.graph_disconnect_predecessors()\n\t\t// const texture = await this._texture_loader.load_texture_from_url_or_op( url );\n\t\t// uniform.value = texture\n\t\tconst found_node = param.found_node();\n\t\tif (found_node) {\n\t\t\tconst container = await found_node.request_container();\n\t\t\tconst texture = container.texture();\n\t\t\tuniform.value = texture;\n\t\t} else {\n\t\t\tuniform.value = null;\n\t\t}\n\t}\n\n\tset_uniform_value_from_ramp(param: RampParam, uniform: IUniform) {\n\t\tuniform.value = param.ramp_texture();\n\t}\n\n\thas_value_changed(new_value: ParamValuesTypeMap[T]): boolean {\n\t\tconst param_constructor = ParamConstructorByType[this._type];\n\t\tif (this._cached_param_value) {\n\t\t\tconst has_changed = !param_constructor.are_values_equal(new_value, this._cached_param_value);\n\t\t\tif (has_changed) {\n\t\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\t}\n\t\t\treturn has_changed;\n\t\t} else {\n\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\treturn false;\n\t\t}\n\n\t\t// let has_changed = false;\n\t\t// if (this._type == ParamType.RAMP) {\n\t\t// \thas_changed = new_value.uuid() != this._cached_param_value;\n\t\t// \t// if(has_changed){ this._cached_param_value = new_value.uuid() }\n\t\t// } else {\n\t\t// \tif (this._cached_param_value != null) {\n\t\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t\t// \t\t\t// console.log(\"new f\", new_value, this._cached_param_value)\n\t\t// \t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t} else {\n\t\t// \t\t\tif (new_value != null) {\n\t\t// \t\t\t\t// console.log(\"new v\", new_value, this._cached_param_value)\n\t\t// \t\t\t\thas_changed = new_value.toArray().join('.') != this._cached_param_value.toArray().join('.');\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\thas_changed = true;\n\t\t// \t}\n\t\t// \t// this._cached_param_value = new_value\n\t\t// }\n\t\t// return has_changed;\n\t}\n\t// private _update_cached_value(new_value) {\n\t// \t// console.log(\"_update_cached_value\", this._name, new_value)\n\t// \tif (this._type == 'ramp') {\n\t// \t\tthis._cached_param_value = new_value.uuid();\n\t// \t} else {\n\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t// \t\t\tthis._cached_param_value = new_value;\n\t// \t\t} else {\n\t// \t\t\t// make sure to copy the value, not assign to it\n\t// \t\t\t// otherwise we won't detect changes (since the objects would be the same)\n\t// \t\t\tthis._cached_param_value = this._cached_param_value || new_value.clone();\n\t// \t\t\tthis._cached_param_value.copy(new_value);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_video_texture(): boolean {\n\t\tlet result = false;\n\t\tconst uniform = this.uniform;\n\t\tif (uniform) {\n\t\t\tconst value = uniform.value;\n\t\t\tif (value) {\n\t\t\t\tresult = value.constructor == VideoTexture;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {LinesController} from './LinesController';\nimport {BaseGlNodeType} from '../../_Base';\n\nexport class ShadersCollectionController {\n\tprivate _lines_controller_by_shader_name: Map<ShaderName, LinesController> = new Map();\n\tconstructor(private _shader_names: ShaderName[], private _current_shader_name: ShaderName) {\n\t\tfor (let shader_name of this._shader_names) {\n\t\t\tthis._lines_controller_by_shader_name.set(shader_name, new LinesController(shader_name));\n\t\t}\n\t}\n\n\tget shader_names() {\n\t\treturn this._shader_names;\n\t}\n\n\tset_current_shader_name(shader_name: ShaderName) {\n\t\tthis._current_shader_name = shader_name;\n\t}\n\tget current_shader_name() {\n\t\treturn this._current_shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[], shader_name?: ShaderName) {\n\t\tif (definitions.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_definitions(node, definitions);\n\t\t}\n\t}\n\tdefinitions(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.definitions(node);\n\t\t}\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[], shader_name?: ShaderName) {\n\t\tif (lines.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_body_lines(node, lines);\n\t\t}\n\t}\n\tbody_lines(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.body_lines(node);\n\t\t}\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {BaseGlNodeType} from '../../_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\n\nexport class LinesController {\n\tprivate _definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\tprivate _body_lines_by_node_id: Map<string, string[]> = new Map();\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tget shader_name() {\n\t\treturn this._shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[]) {\n\t\tfor (let definition of definitions) {\n\t\t\tMapUtils.push_on_array_at_entry(this._definitions_by_node_id, node.graph_node_id, definition);\n\t\t}\n\t}\n\tdefinitions(node: BaseGlNodeType): BaseGLDefinition[] | undefined {\n\t\treturn this._definitions_by_node_id.get(node.graph_node_id);\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[]) {\n\t\tfor (let line of lines) {\n\t\t\tMapUtils.push_on_array_at_entry(this._body_lines_by_node_id, node.graph_node_id, line);\n\t\t}\n\t}\n\tbody_lines(node: BaseGlNodeType): string[] | undefined {\n\t\treturn this._body_lines_by_node_id.get(node.graph_node_id);\n\t}\n}\n","import {BaseGlNodeType} from '../../_Base';\nimport {LineType} from './LineType';\n\nconst LINE_SUFFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: ';',\n\t[LineType.BODY]: ';',\n};\n\nconst LINE_PREFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: '',\n\t[LineType.BODY]: '\t',\n};\n\nexport class CodeFormatter {\n\tstatic node_comment(node: BaseGlNodeType, line_type: LineType): string {\n\t\tlet line = `// ${node.full_path()}`;\n\t\tif (line_type == LineType.BODY) {\n\t\t\tline = `\t${line}`;\n\t\t}\n\t\treturn line;\n\t}\n\tstatic line_wrap(line: string, line_type: LineType) {\n\t\tlet add_suffix = true;\n\t\tif (line.indexOf('#if') == 0 || line.indexOf('#endif') == 0) {\n\t\t\tadd_suffix = false;\n\t\t}\n\t\tif (add_suffix) {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}${LINE_SUFFIXES[line_type]}`;\n\t\t} else {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}`;\n\t\t}\n\t}\n\tstatic post_line_separator(line_type: LineType) {\n\t\treturn line_type == LineType.BODY ? '\t' : '';\n\t}\n}\n","import {ParamTypeToConnectionPointTypeMap} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {BaseNamedConnectionPointType, TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\n// import {ParamValue} from '../../../params/types/ParamValue';\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamValueToDefaultConverter} from '../../utils/params/ParamValueToDefaultConverter';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValueSerialized} from '../../../params/types/ParamInitValueSerialized';\nimport lodash_clone from 'lodash/clone';\n\nexport class GlNodeSpareParamsController {\n\tprivate _allow_inputs_created_from_params: boolean = true;\n\tprivate _inputless_param_names: string[] | undefined;\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tdisallow_inputs_created_from_params() {\n\t\tthis._allow_inputs_created_from_params = false;\n\t}\n\n\tinitialize_node() {\n\t\tthis.node.params.set_post_create_params_hook(this.create_inputs_from_params.bind(this));\n\t}\n\n\tcreate_inputs_from_params() {\n\t\tif (!this._allow_inputs_created_from_params) {\n\t\t\treturn;\n\t\t}\n\t\tconst connections: BaseNamedConnectionPointType[] = [];\n\t\tfor (let param_name of this.node.params.names) {\n\t\t\tlet add_input = true;\n\t\t\tif (\n\t\t\t\tthis._inputless_param_names &&\n\t\t\t\tthis._inputless_param_names.length > 0 &&\n\t\t\t\tthis._inputless_param_names.includes(param_name)\n\t\t\t) {\n\t\t\t\tadd_input = false;\n\t\t\t}\n\t\t\tif (add_input) {\n\t\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\t\tif (param && !param.parent_param) {\n\t\t\t\t\t\tconst connection_type = ParamTypeToConnectionPointTypeMap[param.type];\n\t\t\t\t\t\tif (connection_type) {\n\t\t\t\t\t\t\tconst connection = new TypedNamedConnectionPoint(param.name, connection_type);\n\t\t\t\t\t\t\tconnections.push(connection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.node.io.inputs.set_named_input_connection_points(connections);\n\t}\n\n\tset_inputless_param_names(names: string[]) {\n\t\treturn (this._inputless_param_names = names);\n\t}\n\n\tcreate_spare_parameters() {\n\t\tconst raw_input_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst default_value_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst current_param_names: string[] = this.node.params.spare_names;\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\tfor (let param_name of current_param_names) {\n\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\tif (param) {\n\t\t\t\t\traw_input_serialized_by_param_name.set(param_name, param.raw_input_serialized);\n\t\t\t\t\tdefault_value_serialized_by_param_name.set(param_name, param.default_value_serialized);\n\t\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let connection_point of this.node.io.inputs.named_input_connection_points) {\n\t\t\tconst param_name = connection_point.name;\n\t\t\tconst param_type: ParamType = connection_point.param_type;\n\t\t\tlet init_value = connection_point.init_value;\n\t\t\t// let raw_input: ParamInitValueSerialized= null\n\n\t\t\t// const raw_input = raw_input_serialized_by_param_name.get(param_name);\n\t\t\tconst last_param_init_value = default_value_serialized_by_param_name.get(param_name);\n\t\t\t// if (last_param_raw_input != null && last_param_init_value != null) {\n\t\t\t// init_value = ParamValueToDefaultConverter.from_value(param_type, last_param_raw_input);\n\t\t\t// if (init_value == null) {\n\t\t\tconst default_value_from_name = this.node.gl_input_default_value(param_name);\n\n\t\t\t// TODO: this should really store the largest set value\n\t\t\t// (as in the ones with the most components)\n\t\t\t// so that for an Add Gl Node, if I set a vec4 to [1,2,3,4]\n\t\t\t// and then set an input type, which will transform the param to a float\n\t\t\t// it will have a value of 1.\n\t\t\t// But if I then set it to a vec4 again, it will remember [1,2,3,4]\n\t\t\tif (init_value == null)\n\t\t\t\tif (default_value_from_name != null) {\n\t\t\t\t\tinit_value = default_value_from_name;\n\t\t\t\t} else {\n\t\t\t\t\tif (last_param_init_value != null) {\n\t\t\t\t\t\tinit_value = last_param_init_value;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinit_value = connection_point.init_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t// }\n\t\t\t// }\n\t\t\t// if (default_value == null) {\n\t\t\t// \tdefault_value = gl_connection.default_value();\n\t\t\t// }\n\t\t\t// if (init_value == null && connection_point.init_value) {\n\t\t\t// \tinit_value = connection_point.init_value;\n\t\t\t// }\n\n\t\t\tif (init_value != null) {\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: lodash_clone(init_value as any),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tspare: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t\t// const param = this.node.add_param(param_type, param_name, init_value, {\n\t\t\t\t// \tspare: true,\n\t\t\t\t// \tcook: true,\n\t\t\t\t// });\n\n\t\t\t\t// if (param) {\n\t\t\t\t// \thas_created_a_param = true;\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\tif (!this.node.scene.loading_controller.is_loading) {\n\t\t\tthis.node.params.update_params(params_update_options);\n\n\t\t\tfor (let spare_param of this.node.params.spare) {\n\t\t\t\tif (!spare_param.parent_param) {\n\t\t\t\t\tconst raw_input = raw_input_serialized_by_param_name.get(spare_param.name);\n\t\t\t\t\tif (raw_input) {\n\t\t\t\t\t\tspare_param.set(raw_input as any);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// if (has_created_a_param || has_deleted_a_param) {\n\t\t// \tif (!this.node.scene.loading_controller.is_loading) {\n\t\t// \t\tthis.node.params.post_create_spare_params();\n\n\t\t// \t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedNode} from '../../_Base';\nimport {ShaderName} from './ShaderName';\n\nexport abstract class TypedAssembler<T extends TypedNode<any, any, any>> {\n\tabstract get shader_names(): ShaderName[];\n\tabstract input_names_for_shader_name(node: T, shader_name: ShaderName): string[];\n}\n","export default \"#include <common>\\n\\nuniform vec2 resolution;\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec4 diffuseColor = vec4(1.0,0.0,1.0,1.0);\\n\\n\\n\\t// INSERT BODY\\n\\n\\tgl_FragColor = vec4( diffuseColor );\\n}\"","export class CoreSleep {\n\tstatic sleep(time: number): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve();\n\t\t\t}, time);\n\t\t});\n\t}\n}\n","import {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter} from 'three/src/constants';\n// import {LinearEncoding} from 'three/src/constants';\n// import {HalfFloatType} from 'three/src/constants';\n// import {WebGLRenderTargetCube} from 'three/src/renderers/WebGLRenderTargetCube';\nimport {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\n\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\n// import {CoreTextureLoader} from '../../../core/loader/Texture';\n// import { CoreScriptLoader } from \"src/Core/Loader/Script\";\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {POLY} from '../../Poly';\nclass EnvMapCopParamsConfig extends NodeParamsConfig {\n\t// url = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t// \tdesktop_browse: {file_type: 'texture'},\n\t// });\n}\nconst ParamsConfig = new EnvMapCopParamsConfig();\nexport class EnvMapCopNode extends TypedCopNode<EnvMapCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'env_map';\n\t}\n\t// static required_three_imports() {\n\t// \treturn [\n\t// \t\t'loaders/EXRLoader',\n\t// \t\t// 'pmrem/PMREMGenerator',\n\t// \t\t// 'pmrem/PMREMCubeUVPacker',\n\t// \t];\n\t// }\n\n\t// private _texture_loader: CoreTextureLoader\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\n\t\t// for now, if I clone the input, it gets messed up\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT)\n\t// }\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tconst env_map = await this.convert_texture_to_env_map(texture);\n\t\tif (env_map) {\n\t\t\tthis.set_texture(env_map);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate async convert_texture_to_env_map(texture: Texture): Promise<Texture | undefined> {\n\t\t// texture.minFilter = NearestFilter;\n\t\t// texture.encoding = LinearEncoding;\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t// if (!renderer) {\n\t\t// \tawait CoreSleep.sleep(1000);\n\t\t// \tconsole.log('waited 1s');\n\t\t// \trenderer = POLY.renderers_controller.first_renderer();\n\t\t// \tconsole.log('renderer', renderer, texture);\n\t\t// }\n\n\t\tif (renderer) {\n\t\t\tconst pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t// console.log('env inout', texture);\n\t\t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\n\t\t\t// pmremGenerator.dispose();\n\t\t\t// texture.dispose();\n\t\t\t// console.log('exrCubeRenderTarget.texture', exrCubeRenderTarget.texture);\n\t\t\tconst env_map_texture = exrCubeRenderTarget.texture;\n\t\t\t// (window.scene as any).background = env_map_texture;\n\t\t\t// (window.scene as any).environment = env_map_texture;\n\t\t\treturn env_map_texture;\n\t\t} else {\n\t\t\tthis.states.error.set('no renderer found to convert the texture to an env map');\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {TextureLoader} from 'three/src/loaders/TextureLoader';\nimport {Texture} from 'three/src/textures/Texture';\n// import {RepeatWrapping} from 'three/src/constants';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreScriptLoader} from '/Script';\n// import {CoreGeometry} from '../geometry/Geometry';\nimport {UnsignedByteType} from 'three/src/constants';\nimport {CoreWalker} from '../Walker';\n\nimport {BaseNodeType} from '../../engine/nodes/_Base';\nimport {BaseParamType} from '../../engine/params/_Base';\nimport {BaseCopNodeClass} from '../../engine/nodes/cop/_Base';\nimport {TextureContainer} from '../../engine/containers/Texture';\nimport {POLY} from '../../engine/Poly';\n// import {BufferGeometry} from 'three/src/core/BufferGeometry';\n\ninterface VideoSourceTypeByExt {\n\togg: string;\n\togv: string;\n\tmp4: string;\n}\n// interface ImageScriptUrlByExt {\n// \texr: string;\n// \tbasis: string;\n// }\ninterface ThreeLoaderByExt {\n\texr: string;\n\tbasis: string;\n\thdr: string;\n}\n\nenum Extension {\n\tEXR = 'exr',\n\tBASIS = 'basis',\n\tHDR = 'hdr',\n}\n\nexport class CoreTextureLoader {\n\tstatic PARAM_DEFAULT = '/examples/textures/uv.jpg';\n\tstatic PARAM_ENV_DEFAULT = '/examples/textures/piz_compressed.exr';\n\n\tstatic VIDEO_EXTENSIONS = ['mp4', 'webm', 'ogv'];\n\tstatic VIDEO_SOURCE_TYPE_BY_EXT: VideoSourceTypeByExt = {\n\t\togg: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\togv: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\tmp4: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"',\n\t};\n\t// static SCRIPT_URL_BY_EXT: ImageScriptUrlByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// static THREE_LOADER_BY_EXT: ThreeLoaderByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// @load_texture: (url, callback)->\n\t// \tif url\n\t// \t\tloader = this._texture_loader(url)\n\n\t// \t\tloader.load(\n\t// \t\t\turl,\n\t// \t\t\tcallback,\n\t// \t\t\tnull,\n\t// \t\t\t(error)=>\n\t// \t\t\t\tthis.set_error(\"could not load texture #{url}\")\n\t// \t\t\t\t#this._on_error(error)\n\t// \t\t\t)\n\t// \telse\n\t// \t\tthis.set_error(\"not url given to Mat/Base._load_texture\")\n\t// _on_error: (error)->\n\t// \tconsole.log(\"ERROR\")\n\t// \tconsole.log(error)\n\t// \tthis.set_error_message()\n\n\tconstructor(private _node: BaseNodeType, private _param: BaseParamType) {}\n\n\tasync load_texture_from_url_or_op(url: string): Promise<Texture | VideoTexture | null> {\n\t\tlet texture: Texture | null = null;\n\t\tlet found_node;\n\n\t\tif (url.substring(0, 3) == 'op:') {\n\t\t\tconst node_path = url.substring(3);\n\t\t\tfound_node = CoreWalker.find_node(this._node, node_path);\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node instanceof BaseCopNodeClass) {\n\t\t\t\t\tconst container: TextureContainer = await found_node.request_container();\n\t\t\t\t\ttexture = container.texture();\n\t\t\t\t} else {\n\t\t\t\t\tthis._node.states.error.set(`found node is not a texture node`);\n\t\t\t\t}\n\n\t\t\t\t// this._assign_texture(attrib, texture)\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`no node found in path '${node_path}'`);\n\t\t\t}\n\t\t} else {\n\t\t\ttexture = await this.load_url(url);\n\t\t\tif (texture) {\n\t\t\t\t// param.mark_as_referencing_asset(url)\n\t\t\t\tif (this._param.options.texture_as_env()) {\n\t\t\t\t\t// texture = await CoreTextureLoader.set_texture_for_env(texture, this._node);\n\t\t\t\t} else {\n\t\t\t\t\ttexture = CoreTextureLoader.set_texture_for_mapping(texture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`could not load texture ${url}`);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE: if this._param gets its value from an expression like `ch('/CONTROL/photo_url')`\n\t\t// then found_node will be null, so the graph should not be changed\n\t\tif (found_node && this._param.graph_predecessors()[0] != found_node) {\n\t\t\tthis._param.graph_disconnect_predecessors();\n\t\t\tthis._param.add_graph_input(found_node);\n\t\t}\n\n\t\t// this._assign_texture(attrib, texture)\n\t\treturn texture;\n\t}\n\n\tasync load_url(url: string): Promise<Texture> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// url = this._resolve_url(url)\n\t\t\tconst ext = CoreTextureLoader._ext(url);\n\n\t\t\tif (CoreTextureLoader.VIDEO_EXTENSIONS.includes(ext)) {\n\t\t\t\tconst texture: VideoTexture = await this._load_as_video(url);\n\t\t\t\treturn texture;\n\t\t\t} else {\n\t\t\t\tthis.loader_for_ext(ext).then((loader) => {\n\t\t\t\t\tloader.load(url, resolve, undefined, (error: any) => {\n\t\t\t\t\t\tconsole.warn('error', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loader_for_ext(ext: string) {\n\t\tconst ext_lowercase = ext.toLowerCase() as keyof ThreeLoaderByExt;\n\t\t// const script_name = CoreTextureLoader.SCRIPT_URL_BY_EXT[ext_lowercase];\n\t\t// var loader;\n\n\t\tswitch (ext_lowercase) {\n\t\t\tcase Extension.EXR: {\n\t\t\t\tconst {EXRLoader} = await import('../../../modules/three/examples/jsm/loaders/EXRLoader');\n\t\t\t\treturn new EXRLoader();\n\t\t\t}\n\t\t\tcase Extension.HDR: {\n\t\t\t\tconst {RGBELoader} = await import('../../../modules/three/examples/jsm/loaders/RGBELoader');\n\t\t\t\tconst loader = new RGBELoader();\n\t\t\t\tloader.setDataType(UnsignedByteType); // FloatType,HalfFloatType\n\t\t\t\t// loader.setPath('/examples/textures/equirectangular/');\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t\tcase Extension.BASIS: {\n\t\t\t\tconst {BasisTextureLoader} = await import(\n\t\t\t\t\t'../../../modules/three/examples/jsm/loaders/BasisTextureLoader'\n\t\t\t\t);\n\t\t\t\tconst loader = new BasisTextureLoader();\n\t\t\t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t\t\tif (renderer) {\n\t\t\t\t\tloader.detectSupport(renderer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('texture loader found no renderer for basis texture loader');\n\t\t\t\t}\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\t// if (script_name) {\n\t\t// const imported_classes = await CoreScriptLoader.load_module_three_loader(script_name)\n\t\t// const imported_classes = await CoreScriptLoader.three_module(`loaders/${script_name}`);\n\t\t// const imported_classes = await import(`modules/three/examples/jsm/loaders/${script_name}`);\n\t\t// const loader_class_name = CoreTextureLoader.THREE_LOADER_BY_EXT[ext_lowercase];\n\t\t// const loader_class = imported_classes[loader_class_name];\n\t\t// if (loader_class) {\n\t\t// \tloader = new loader_class();\n\t\t// \tif (ext == 'basis') {\n\t\t// \t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t// \t\tconst renderer = POLY.renderers_controller.first_renderer();\n\t\t// \t\tloader.detectSupport(renderer);\n\t\t// \t}\n\t\t// }\n\t\t// }\n\t\treturn new TextureLoader();\n\n\t\t// const constructor = (() => { switch (ext) {\n\t\t// \tcase 'exr': return EXRLoader;\n\t\t// \tdefault: return TextureLoader;\n\t\t// } })();\n\t\t// return new constructor();\n\t}\n\n\t_load_as_video(url: string): Promise<VideoTexture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video');\n\t\t\t// document.body.appendChild(video)\n\t\t\t// video.id = 'video'\n\t\t\t// console.log(\"video\", video)\n\t\t\tvideo.setAttribute('crossOrigin', 'anonymous');\n\t\t\tvideo.setAttribute('autoplay', `${true}`); // to ensure it loads\n\t\t\tvideo.setAttribute('loop', `${true}`);\n\n\t\t\t// wait for onloadedmetadata to ensure that we have a duration\n\t\t\tvideo.onloadedmetadata = function() {\n\t\t\t\tvideo.pause();\n\t\t\t\tconst texture = new VideoTexture(video);\n\t\t\t\tresolve(texture);\n\t\t\t};\n\t\t\t// video.setAttribute('controls', true)\n\t\t\t// video.style=\"display:none\"\n\t\t\tconst source = document.createElement('source');\n\t\t\tconst ext = CoreTextureLoader._ext(url) as keyof VideoSourceTypeByExt;\n\t\t\tlet type: string = CoreTextureLoader.VIDEO_SOURCE_TYPE_BY_EXT[ext];\n\t\t\ttype = type || CoreTextureLoader._default_video_source_type(url);\n\t\t\tsource.setAttribute('type', type);\n\t\t\tsource.setAttribute('src', url);\n\n\t\t\tvideo.appendChild(source);\n\t\t});\n\t}\n\tstatic _default_video_source_type(url: string) {\n\t\tconst ext = this._ext(url);\n\t\treturn `video/${ext}`;\n\t}\n\n\tstatic pixel_data(texture: Texture) {\n\t\tconst img = texture.image;\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.drawImage(img, 0, 0, img.width, img.height);\n\t\t\treturn context.getImageData(0, 0, img.width, img.height);\n\t\t}\n\t}\n\n\t// TODO: typescript: check what type the pixel_data is\n\t// static pixel_data_to_attribute(pixel_data: Pixel, geometry: BufferGeometry, attrib_name_with_component:string, convert_method: (x:number, y:number, z:number, w:number)=>number) {\n\t// \tconst {data} = pixel_data;\n\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t// \t// TODO: add error if no uvs\n\t// \tconst values = [];\n\t// \tconst points = geometry_wrapper.points();\n\t// \tfor (let point of points) {\n\t// \t\tconst uv = point.attrib_value('uv');\n\t// \t\tconst x = Math.floor((pixel_data.width - 1) * uv.x);\n\t// \t\tconst y = Math.floor((pixel_data.height - 1) * (1 - uv.y));\n\t// \t\tconst i = y * pixel_data.width + x;\n\t// \t\t// const val = data[4*i] / 255.0;\n\t// \t\tif (convert_method) {\n\t// \t\t\tconst val = convert_method(data[4 * i + 0], data[4 * i + 1], data[4 * i + 2], data[4 * i + 3]);\n\t// \t\t\tvalues.push(val);\n\t// \t\t} else {\n\t// \t\t\tvalues.push([data[4 * i + 0], data[4 * i + 1], data[4 * i + 2]]);\n\t// \t\t}\n\t// \t}\n\n\t// \tconst attrib_name_elements = attrib_name_with_component.split('.');\n\t// \tlet attrib_name = attrib_name_elements[0];\n\t// \tlet component_offset = null;\n\t// \tif (attrib_name_elements.length > 1) {\n\t// \t\tconst component = attrib_name_elements[1] as keyof Vector4Like\n\t// \t\tcomponent_offset = {x: 0, y: 1, z: 2, w: 3}[component];\n\t// \t}\n\n\t// \tlet attrib = geometry.attributes[attrib_name];\n\t// \tif (attrib) {\n\t// \t\tconst array = attrib.array;\n\t// \t\tlet index = 0;\n\t// \t\tlet is_array = null;\n\t// \t\tfor (let value of values) {\n\t// \t\t\tif (is_array || lodash_isArray(value)) {\n\t// \t\t\t\tis_array = true;\n\t// \t\t\t\tlet component_index = 0;\n\t// \t\t\t\tfor (let value_c of value) {\n\t// \t\t\t\t\tarray[attrib.itemSize * index + component_index] = value_c;\n\t// \t\t\t\t\tcomponent_index++;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tarray[attrib.itemSize * index + component_offset] = value;\n\t// \t\t\t}\n\t// \t\t\tindex++;\n\t// \t\t}\n\t// \t} else {\n\t// \t\tattrib = geometry.setAttribute(attrib_name, new Float32BufferAttribute(values, 1));\n\t// \t}\n\t// \tattrib.needsUpdate = true;\n\t// }\n\n\tstatic _ext(url: string) {\n\t\tconst elements = url.split('.');\n\t\treturn elements[elements.length - 1].toLowerCase();\n\t}\n\t// static private _resolve_url(url: string):string{\n\t// \tif(url[0] == '/'){\n\t// \t\tconst root_url = POLY.env_is_production() ? 'https://polygonjs.com' : 'http://localhost:5000'\n\t// \t\turl = `${root_url}${url}`\n\t// \t}\n\t// \treturn url\n\t// }\n\n\tstatic set_texture_for_mapping(texture: Texture) {\n\t\t// let val = texture['wrapS']\n\t\t// Object.defineProperty(texture, 'wrapS', {\n\t\t// \tget () {\n\t\t// \t\treturn val // Simply return the cached value\n\t\t// \t},\n\t\t// \tset (newVal) {\n\t\t// \t\tval = newVal // Save the newVal\n\t\t// \t\tconsole.warn(\"set\", newVal)\n\t\t// \t}\n\t\t// })\n\n\t\t// texture.wrapS = RepeatWrapping\n\t\t// texture.wrapT = RepeatWrapping\n\t\t// console.log(\"set_texture_for_mapping\", RepeatWrapping, texture, texture.wrapS)\n\t\treturn texture;\n\t}\n\n\t// static async set_texture_for_env(texture: Texture, registerer: BaseNode) {\n\t// \tif (registerer._registered_env_map) {\n\t// \t\tPOLY.renderers_controller.deregister_env_map(registerer._registered_env_map);\n\t// \t}\n\t// \tregisterer._registered_env_map = await POLY.renderers_controller.register_env_map(texture);\n\t// \treturn registerer._registered_env_map;\n\t// }\n}\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n","import {Texture} from 'three/src/textures/Texture';\nimport {TypedCopNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst ParamsConfig = new NodeParamsConfig();\nexport class NullCopNode extends TypedCopNode<NodeParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tthis.set_texture(texture);\n\t}\n}\n","import {TypedCopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchCopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchCopParamsConfig();\n\nexport class SwitchCopNode extends TypedCopNode<SwitchCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_texture(container.texture());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import {CATEGORY_EVENT} from './Category';\n\nimport {CameraMapControlsEventNode} from '../../nodes/event/CameraMapControls';\nimport {CameraOrbitControlsEventNode} from '../../nodes/event/CameraOrbitControls';\n\nexport interface EventNodeChildrenMap {\n\tcamera_orbit_controls: CameraMapControlsEventNode;\n\tcamera_map_controls: CameraOrbitControlsEventNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class EventRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(CameraMapControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CameraOrbitControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {MapControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {CameraOrbitControlsEventNode} from './CameraOrbitControls';\n\nexport class CameraMapControlsEventNode extends CameraOrbitControlsEventNode {\n\tstatic type() {\n\t\treturn 'camera_map_controls';\n\t}\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// await CoreScriptLoader.load_module_three_example('controls/OrbitControls')\n\t\t// const constructor_name = 'MapControls'\n\t\t// const constructor = THREE[constructor_name]\n\t\t// const c = this.constructor as typeof CameraMapControlsEventNode;\n\t\t// const {MapControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\treturn new MapControls(camera, element);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedEventNode} from './_Base';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport interface CameraControls extends OrbitControls {\n\tname?: string;\n\t// this_is_a_control: any;\n\t// name: string;\n}\n\nexport abstract class TypedCameraControlsEventNode<K extends NodeParamsConfig> extends TypedEventNode<K> {\n\t// controls() {\n\t// \treturn this._controls;\n\t// }\n\n\tasync apply_controls(camera: Camera, html_element: HTMLElement) {\n\t\t// I don't think I can just assign the camera at the moment\n\t\t// so the controls may need to be re-created everytime\n\t\t// TODO: the controls should be created (and disposed?) by the viewer\n\t\t//this.dispose_controls()\n\n\t\tconst controls = await this.create_controls_instance(camera, html_element);\n\t\tconst timestamp = performance.now();\n\t\tcontrols.name = `${this.full_path()}:${camera.name}:${timestamp}:${this.controls_id()}`;\n\t\t// console.log(this._controls)\n\t\tawait this.params.eval_all();\n\t\tthis.setup_controls(controls);\n\t\treturn controls;\n\t\t// })\n\t\t// });\n\t}\n\tcontrols_id() {\n\t\treturn JSON.stringify(this.params.all.map((p) => p.value_serialized));\n\t}\n\t//this.cook()\n\n\t// dispose_controls: (controls_instance)->\n\t// \tif controls_instance?\n\t// \t\tcontrols_instance.dispose()\n\n\tabstract setup_controls(controls: CameraControls): void;\n\t//\n\n\tabstract async create_controls_instance(camera: Camera, element: HTMLElement): Promise<CameraControls>;\n\tabstract set_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void;\n}\n\nexport type BaseCameraControlsEventNodeType = TypedCameraControlsEventNode<any>;\n","import {TypedNode} from '../_Base';\nimport {EventContainer} from '../../containers/Event';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport class TypedEventNode<K extends NodeParamsConfig> extends TypedNode<'EVENT', BaseEventNodeType, K> {\n\tcontainer_controller: TypedContainerController<EventContainer> = new TypedContainerController<EventContainer>(\n\t\tthis,\n\t\tEventContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.EVENT;\n\t}\n\n\tprivate _eval_all_params_on_dirty_bound = this._eval_all_params_on_dirty.bind(this);\n\tinitialize_base_node() {\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false\n\t\t// });\n\n\t\tthis.add_post_dirty_hook('_eval_all_params_on_dirty', this._eval_all_params_on_dirty_bound);\n\t}\n\n\t// ensures that event nodes are cooked when scene is loaded\n\t_eval_all_params_on_dirty() {\n\t\tthis.params.eval_all();\n\t}\n}\n\nexport type BaseEventNodeType = TypedEventNode<any>;\nexport class BaseEventNodeClass extends TypedEventNode<any> {}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class EventContainer extends TypedContainer<ContainableMap['EVENT']> {\n\tset_content(content: ContainableMap['EVENT']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import {CATEGORY_GL} from './Category';\n\nimport {FloatToIntGlNode, IntToFloatGlNode} from '../../nodes/gl/_ConversionMisc';\nimport {FloatToVec2GlNode, FloatToVec3GlNode, FloatToVec4GlNode} from '../../nodes/gl/_ConversionToVec';\n\nimport {\n\tVec2ToFloatGlNode,\n\tVec3ToFloatGlNode,\n\tVec4ToFloatGlNode,\n\tVec4ToVectorGlNode,\n} from '../../nodes/gl/_ConversionVecTo';\n\nimport {\n\tAbsGlNode,\n\tAcosGlNode,\n\tAsinGlNode,\n\tAtanGlNode,\n\tCeilGlNode,\n\tCosGlNode,\n\tDegreesGlNode,\n\tExpGlNode,\n\tExp2GlNode,\n\tFloorGlNode,\n\tFractGlNode,\n\tInverseSqrtGlNode,\n\tLogGlNode,\n\tLog2GlNode,\n\tNormalizeGlNode,\n\tRadiansGlNode,\n\tSignGlNode,\n\tSinGlNode,\n\tSqrtGlNode,\n\tTanGlNode,\n} from '../../nodes/gl/_Math_Arg1';\n\nimport {\n\tDistanceGlNode,\n\tDotGlNode,\n\tMaxGlNode,\n\tMinGlNode,\n\tModGlNode,\n\tPowGlNode,\n\tReflectGlNode,\n\tStepGlNode,\n} from '../../nodes/gl/_Math_Arg2';\n\nimport {AddGlNode, DivideGlNode, MultGlNode, SubstractGlNode} from '../../nodes/gl/_Math_Arg2Operation';\n\nimport {AndGlNode, OrGlNode} from '../../nodes/gl/_Math_Arg2Boolean';\nimport {AlignGlNode} from '../../nodes/gl/Align';\nimport {AttributeGlNode} from '../../nodes/gl/Attribute';\nimport {ConstantGlNode} from '../../nodes/gl/Constant';\nimport {ComplementGlNode} from '../../nodes/gl/Complement';\nimport {CrossGlNode} from '../../nodes/gl/Cross';\nimport {CycleGlNode} from '../../nodes/gl/Cycle';\nimport {DiskGlNode} from '../../nodes/gl/Disk';\nimport {EasingGlNode} from '../../nodes/gl/Easing';\nimport {GlobalsGlNode} from '../../nodes/gl/Globals';\nimport {InstanceTransformGlNode} from '../../nodes/gl/InstanceTransform';\nimport {LengthGlNode} from '../../nodes/gl/Length';\nimport {MixGlNode} from '../../nodes/gl/Mix';\nimport {NegateGlNode} from '../../nodes/gl/Negate';\nimport {NullGlNode} from '../../nodes/gl/Null';\nimport {OutputGlNode} from '../../nodes/gl/Output';\nimport {ParamGlNode} from '../../nodes/gl/Param';\nimport {RefractGlNode} from '../../nodes/gl/Refract';\nimport {QuatMultGlNode} from '../../nodes/gl/QuatMult';\nimport {QuatFromAxisAngleGlNode} from '../../nodes/gl/QuatFromAxisAngle';\nimport {QuatToAngleGlNode} from '../../nodes/gl/QuatToAngle';\nimport {QuatToAxisGlNode} from '../../nodes/gl/QuatToAxis';\n\nexport interface GlNodeChildrenMap {\n\tabs: AbsGlNode;\n\tacos: AcosGlNode;\n\tadd: AddGlNode;\n\talign: AlignGlNode;\n\tand: AndGlNode;\n\tasin: AsinGlNode;\n\tatan: AtanGlNode;\n\tattribute: AttributeGlNode;\n\tceil: CeilGlNode;\n\tconstant: ConstantGlNode;\n\tcos: CosGlNode;\n\tcomplement: ComplementGlNode;\n\tcross: CrossGlNode;\n\tcycle: CycleGlNode;\n\tdegrees: DegreesGlNode;\n\tdisk: DiskGlNode;\n\tdistance: DistanceGlNode;\n\tdivide: DivideGlNode;\n\tdot: DotGlNode;\n\teasing: EasingGlNode;\n\texp: ExpGlNode;\n\texp2: Exp2GlNode;\n\tfloat_to_int: FloatToIntGlNode;\n\tfloat_to_vec2: FloatToVec2GlNode;\n\tfloat_to_vec3: FloatToVec3GlNode;\n\tfloat_to_vec4: FloatToVec4GlNode;\n\tfloor: FloorGlNode;\n\tfract: FractGlNode;\n\tint_to_float: FloatToIntGlNode;\n\tinverse_sqrt: InverseSqrtGlNode;\n\tinstance_transform: InstanceTransformGlNode;\n\tlength: LengthGlNode;\n\tlog: LogGlNode;\n\tlog2: Log2GlNode;\n\tglobals: GlobalsGlNode;\n\tmax: MaxGlNode;\n\tmin: MinGlNode;\n\tmix: MixGlNode;\n\tmod: ModGlNode;\n\tmult: MultGlNode;\n\tnegate: NegateGlNode;\n\tnormalize: NormalizeGlNode;\n\tnull: NullGlNode;\n\tradians: RadiansGlNode;\n\tor: OrGlNode;\n\toutput: OutputGlNode;\n\tparam: ParamGlNode;\n\tpow: PowGlNode;\n\treflect: ReflectGlNode;\n\trefract: RefractGlNode;\n\tsign: SignGlNode;\n\tsin: SinGlNode;\n\tsqrt: SqrtGlNode;\n\tstep: StepGlNode;\n\tsubstract: SubstractGlNode;\n\ttan: TanGlNode;\n\tquat_mult: QuatMultGlNode;\n\tquat_from_axis_angle: QuatFromAxisAngleGlNode;\n\tquat_to_angle: QuatToAngleGlNode;\n\tquat_to_axis: QuatToAxisGlNode;\n\tvec2_to_float: Vec2ToFloatGlNode;\n\tvec3_to_float: Vec3ToFloatGlNode;\n\tvec4_to_float: Vec4ToFloatGlNode;\n\tvec4_to_vector: Vec4ToVectorGlNode;\n}\n\nimport {NodeContext} from '../NodeContext';\nimport {Poly} from '../../Poly';\nexport class GlRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AbsGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AcosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AlignGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AndGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(AsinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AtanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AttributeGlNode, CATEGORY_GL.GLOBALS, {except: [`${NodeContext.COP}/builder`]});\n\t\tpoly.register_node(CeilGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(ConstantGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ComplementGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CrossGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(CycleGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DegreesGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(DiskGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DistanceGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DivideGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DotGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(EasingGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ExpGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Exp2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FloatToIntGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec2GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec3GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec4GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloorGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(GlobalsGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(IntToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(InverseSqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(InstanceTransformGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LengthGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(NegateGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(LogGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Log2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MaxGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MinGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ModGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MixGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(NullGlNode, CATEGORY_GL.UTIL);\n\t\tpoly.register_node(NormalizeGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(OrGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(OutputGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ParamGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(PowGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(QuatMultGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatFromAxisAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAxisGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(RadiansGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(ReflectGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RefractGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(SignGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(SqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(StepGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(SubstractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(TanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(Vec2ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec3ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToVectorGlNode, CATEGORY_GL.CONVERSION);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO INT\n//\n//\nconst OUTPUT_NAME_INT = 'int';\nclass FloatToIntGlParamsConfig extends NodeParamsConfig {\n\tfloat = ParamConfig.FLOAT(0);\n}\nconst ParamsConfigFloatToInt = new FloatToIntGlParamsConfig();\nexport class FloatToIntGlNode extends TypedGlNode<FloatToIntGlParamsConfig> {\n\tparams_config = ParamsConfigFloatToInt;\n\tstatic type() {\n\t\treturn 'float_to_int';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_INT, ConnectionPointType.INT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst float = this.variable_for_input('float');\n\n\t\tconst int = this.gl_var_name('int');\n\t\tconst body_line = `int ${int} = int(${ThreeToGl.float(float)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// INT TO FLOAT\n//\n//\nconst OUTPUT_NAME_FLOAT = 'float';\nclass IntToFloatGlParamsConfig extends NodeParamsConfig {\n\tint = ParamConfig.INTEGER(0);\n}\nconst ParamsConfigIntToFloat = new IntToFloatGlParamsConfig();\nexport class IntToFloatGlNode extends TypedGlNode<IntToFloatGlParamsConfig> {\n\tparams_config = ParamsConfigIntToFloat;\n\tstatic type() {\n\t\treturn 'int_to_float';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_FLOAT, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst int = this.variable_for_input('int');\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = float(${ThreeToGl.int(int)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO VEC2\n//\n//\nconst OUTPUT_NAME_VEC2 = 'vec2';\nclass FloatToVec2GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig2 = new FloatToVec2GlParamsConfig();\nexport class FloatToVec2GlNode extends TypedGlNode<FloatToVec2GlParamsConfig> {\n\tparams_config = ParamsConfig2;\n\tstatic type() {\n\t\treturn 'float_to_vec2';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_VEC2, ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\n\t\tconst vec = this.gl_var_name(OUTPUT_NAME_VEC2);\n\t\tconst body_line = `vec2 ${vec} = ${ThreeToGl.float2(x, y)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC3\n//\n//\nconst OUTPUT_NAME_VEC3 = 'vec3';\nclass FloatToVec3GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig3 = new FloatToVec3GlParamsConfig();\nexport class FloatToVec3GlNode extends TypedGlNode<FloatToVec3GlParamsConfig> {\n\tparams_config = ParamsConfig3;\n\tstatic type() {\n\t\treturn 'float_to_vec3';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_VEC3, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\n\t\tconst vec = this.gl_var_name(OUTPUT_NAME_VEC3);\n\t\tconst body_line = `vec3 ${vec} = ${ThreeToGl.float3(x, y, z)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC4\n//\n//\nconst OUTPUT_NAME_VEC4 = 'vec4';\nclass FloatToVec4GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n\tw = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig4 = new FloatToVec4GlParamsConfig();\nexport class FloatToVec4GlNode extends TypedGlNode<FloatToVec4GlParamsConfig> {\n\tparams_config = ParamsConfig4;\n\tstatic type() {\n\t\treturn 'float_to_vec4';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_VEC4, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\t\tconst w = this.variable_for_input('w');\n\n\t\tconst vec = this.gl_var_name(OUTPUT_NAME_VEC4);\n\t\tconst body_line = `vec4 ${vec} = ${ThreeToGl.float4(x, y, z, w)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nclass VecToParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new VecToParamsConfig();\nclass BaseVecToGlNode extends TypedGlNode<VecToParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n\ninterface VecToGlOptions {\n\tcomponents: string[];\n\tparam_type: ParamType;\n}\n\nfunction VecToGlFactory(type: string, options: VecToGlOptions) {\n\tconst components = options.components;\n\tconst param_type = options.param_type;\n\treturn class VecToGlNode extends BaseVecToGlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\n\t\tinitialize_node() {\n\t\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\t\tcomponents.map((c) => {\n\t\t\t\t\treturn new TypedNamedConnectionPoint(c, ConnectionPointType.FLOAT);\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tcreate_params() {\n\t\t\tthis.add_param(param_type, 'vec', components.map((c) => 0) as Number2);\n\t\t}\n\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst body_lines: string[] = [];\n\n\t\t\tconst vec = this.variable_for_input('vec');\n\n\t\t\tthis.io.outputs.used_output_names().forEach((c) => {\n\t\t\t\tconst var_name = this.gl_var_name(c);\n\t\t\t\tbody_lines.push(`float ${var_name} = ${vec}.${c}`);\n\t\t\t});\n\t\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\t}\n\t};\n}\n\nconst components_v4 = ['x', 'y', 'z', 'w'];\n\nexport class Vec2ToFloatGlNode extends VecToGlFactory('vec2_to_float', {\n\tcomponents: ['x', 'y'],\n\tparam_type: ParamType.VECTOR2,\n}) {}\nexport class Vec3ToFloatGlNode extends VecToGlFactory('vec3_to_float', {\n\tcomponents: ['x', 'y', 'z'],\n\tparam_type: ParamType.VECTOR3,\n}) {}\nexport class Vec4ToFloatGlNode extends VecToGlFactory('vec4_to_float', {\n\tcomponents: components_v4,\n\tparam_type: ParamType.VECTOR4,\n}) {}\n\nexport class Vec4ToVectorGlNode extends BaseVecToGlNode {\n\tstatic type() {\n\t\treturn 'vec4_to_vector';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('vec', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('w', ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tcreate_params() {\n\t\tthis.add_param(ParamType.VECTOR4, 'vec', components_v4.map((c) => 0) as Number4);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\n\t\tconst vec = this.variable_for_input('vec');\n\n\t\tconst used_output_names = this.io.outputs.used_output_names();\n\n\t\tif (used_output_names.indexOf('vec') >= 0) {\n\t\t\tconst var_name = this.gl_var_name('vec');\n\t\t\tbody_lines.push(`vec3 ${var_name} = ${vec}.xyz`);\n\t\t}\n\t\tif (used_output_names.indexOf('w') >= 0) {\n\t\t\tconst var_name = this.gl_var_name('w');\n\t\t\tbody_lines.push(`float ${var_name} = ${vec}.w`);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\n\ninterface MathArg1Options {\n\tin?: string;\n\tout?: string;\n\tmethod?: string;\n}\n\nfunction MathFunctionArg1Factory(type: string, options: MathArg1Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_name = options.in || 'in';\n\treturn class Node extends BaseNodeGlMathFunctionArg1GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_name;\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t};\n}\nexport class AbsGlNode extends MathFunctionArg1Factory('abs') {}\nexport class AcosGlNode extends MathFunctionArg1Factory('acos', {out: 'radians'}) {}\nexport class AsinGlNode extends MathFunctionArg1Factory('asin', {out: 'radians'}) {}\nexport class AtanGlNode extends MathFunctionArg1Factory('atan', {out: 'radians'}) {}\nexport class CeilGlNode extends MathFunctionArg1Factory('ceil') {}\nexport class CosGlNode extends MathFunctionArg1Factory('cos', {in: 'radians'}) {}\nexport class DegreesGlNode extends MathFunctionArg1Factory('degrees', {in: 'radians', out: 'degrees'}) {}\n\nexport class ExpGlNode extends MathFunctionArg1Factory('exp') {}\nexport class Exp2GlNode extends MathFunctionArg1Factory('exp2') {}\nexport class FloorGlNode extends MathFunctionArg1Factory('floor') {}\nexport class FractGlNode extends MathFunctionArg1Factory('fract') {}\nexport class InverseSqrtGlNode extends MathFunctionArg1Factory('inverse_sqrt', {method: 'inversesqrt'}) {}\nexport class LogGlNode extends MathFunctionArg1Factory('log') {}\nexport class Log2GlNode extends MathFunctionArg1Factory('log2') {}\nexport class NormalizeGlNode extends MathFunctionArg1Factory('normalize', {out: 'normalized'}) {}\nexport class RadiansGlNode extends MathFunctionArg1Factory('radians', {in: 'degrees', out: 'radians'}) {}\nexport class SignGlNode extends MathFunctionArg1Factory('sign') {}\nexport class SinGlNode extends MathFunctionArg1Factory('sin', {in: 'radians'}) {}\nexport class SqrtGlNode extends MathFunctionArg1Factory('sqrt') {}\nexport class TanGlNode extends MathFunctionArg1Factory('tan') {}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {ThreeToGl} from '../../../Core/ThreeToGl'\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n// import {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n// import {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nclass BaseAdaptiveParamsConfig extends NodeParamsConfig {}\n\nexport abstract class BaseAdaptiveGlNode<T extends BaseAdaptiveParamsConfig> extends TypedGlNode<T> {\n\t// protected abstract gl_output_name(): string;\n\t// protected abstract gl_input_name(index: number): string;\n\t// protected abstract expected_input_types(): ConnectionPointType[];\n\t// protected abstract expected_output_types(): ConnectionPointType[];\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\n\t// _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || !this._connections_match_inputs()) {\n\t// \t\tthis.update_connection_types();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\t// create_inputs_from_params() {\n\t// \tthis.update_connection_types();\n\t// }\n\n\t// update_connection_types() {\n\t// \tconst set_dirty = false;\n\t// \tconst expected_input_types = this.expected_input_types();\n\t// \tconst expected_output_types = this.expected_output_types();\n\n\t// \tconst named_input_connections = expected_input_types.map((type: ConnectionPointType, i: number) => {\n\t// \t\treturn new TypedNamedConnectionPoint(this.gl_input_name(i), type);\n\t// \t});\n\t// \tthis.io.inputs.set_named_input_connection_points(named_input_connections);\n\t// \t// this._init_graph_node_inputs();\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tconst named_outputs = expected_output_types.map((type: ConnectionPointType, i: number) => {\n\t// \t\treturn new TypedNamedConnectionPoint(this.gl_output_name(), type);\n\t// \t});\n\t// \tthis.io.outputs.set_named_output_connection_points(named_outputs, set_dirty);\n\t// }\n\n\t// protected _connections_match_inputs(): boolean {\n\t// \tconst current_input_types = this.io.inputs.named_input_connection_points.map((c) => c.type);\n\t// \tconst current_output_types = this.io.outputs.named_output_connection_points.map((c) => c.type);\n\t// \tconst expected_input_types = this.expected_input_types();\n\t// \tconst expected_output_types = this.expected_output_types();\n\n\t// \tif (expected_input_types.length != current_input_types.length) {\n\t// \t\treturn false;\n\t// \t}\n\t// \tif (expected_output_types.length != current_output_types.length) {\n\t// \t\treturn false;\n\t// \t}\n\n\t// \tfor (let i = 0; i < current_input_types.length; i++) {\n\t// \t\tif (current_input_types[i] != expected_input_types[i]) {\n\t// \t\t\treturn false;\n\t// \t\t}\n\t// \t}\n\t// \tfor (let i = 0; i < current_output_types.length; i++) {\n\t// \t\tif (current_output_types[i] != expected_output_types[i]) {\n\t// \t\t\treturn false;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn true;\n\t// }\n\n\t// protected input_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\t// protected output_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\n\t// private first_input_connection_type(): ConnectionPointType {\n\t// \tconst connections = this.io.connections.input_connections();\n\t// \tif (connections) {\n\t// \t\tconst first_connection = connections[0];\n\t// \t\tif (first_connection) {\n\t// \t\t\tconst node_src = first_connection.node_src;\n\t// \t\t\tconst output_index = first_connection.output_index;\n\t// \t\t\tconst node_src_output_connection = node_src.io.outputs.named_output_connection_points[output_index];\n\t// \t\t\treturn node_src_output_connection.type;\n\t// \t\t}\n\t// \t}\n\t// \treturn ConnectionPointType.FLOAT;\n\t// }\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunctionArg2';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\ninterface MathArg2Options {\n\tin?: [string, string];\n\tout?: string;\n\tdefault_in_type?: ConnectionPointType;\n\tallowed_in_types?: ConnectionPointType[];\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n}\n\nfunction MathFunctionArg2Factory(type: string, options: MathArg2Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1'];\n\tconst default_in_type = options.default_in_type;\n\tconst allowed_in_types = options.allowed_in_types;\n\tconst out_type = options.out_type;\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\n\t\t\tif (out_type) {\n\t\t\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [out_type]);\n\t\t\t}\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst_input_type = default_in_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || default_in_type || ConnectionPointType.FLOAT;\n\t\t\treturn [type, type];\n\t\t}\n\t};\n}\nexport class DistanceGlNode extends MathFunctionArg2Factory('distance', {\n\tin: ['p0', 'p1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class DotGlNode extends MathFunctionArg2Factory('dot', {\n\tin: ['vec0', 'vec1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class MaxGlNode extends MathFunctionArg2Factory('max') {}\nexport class MinGlNode extends MathFunctionArg2Factory('min') {}\nexport class ModGlNode extends MathFunctionArg2Factory('mod') {}\nexport class PowGlNode extends MathFunctionArg2Factory('pow', {in: ['x', 'y']}) {}\nexport class ReflectGlNode extends MathFunctionArg2Factory('reflect', {\n\tin: ['I', 'N'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n}) {}\nexport class StepGlNode extends MathFunctionArg2Factory('step', {in: ['edge', 'x']}) {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunctionArg2';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\ninterface MathArg2OperationOptions {\n\tin_prefix: string;\n\tout: string;\n\toperation: string;\n\tallowed_in_types?: ConnectionPointType[];\n}\n\nfunction MathFunctionArg2OperationFactory(type: string, options: MathArg2OperationOptions) {\n\tconst in_prefix = options.in_prefix || type;\n\tconst output_name = options.out || 'val';\n\tconst operation = options.operation;\n\tconst allowed_in_types = options.allowed_in_types;\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\t\tconst name = connection.name;\n\t\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t\t});\n\t\t\tconst joined_args = args.join(` ${this.gl_operation()} `);\n\n\t\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn `${in_prefix}${index}`;\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn output_name;\n\t\t}\n\t\tgl_operation(): string {\n\t\t\treturn operation;\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || ConnectionPointType.FLOAT;\n\n\t\t\tconst current_connections = this.io.connections.input_connections();\n\t\t\tconst expected_count = current_connections ? Math.max(current_connections.length + 1, 2) : 2;\n\t\t\tconst expected_input_types = [];\n\t\t\tfor (let i = 0; i < expected_count; i++) {\n\t\t\t\texpected_input_types.push(type);\n\t\t\t}\n\t\t\treturn expected_input_types;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\tconst type = this._expected_input_types()[0];\n\t\t\treturn [type];\n\t\t}\n\t};\n}\nexport class AddGlNode extends MathFunctionArg2OperationFactory('add', {\n\tin_prefix: 'add',\n\tout: 'sum',\n\toperation: '+',\n}) {}\nexport class DivideGlNode extends MathFunctionArg2OperationFactory('divide', {\n\tin_prefix: 'div',\n\tout: 'divide',\n\toperation: '/',\n}) {}\nexport class SubstractGlNode extends MathFunctionArg2OperationFactory('substract', {\n\tin_prefix: 'sub',\n\tout: 'substract',\n\toperation: '-',\n}) {}\n\nexport class MultGlNode extends MathFunctionArg2OperationFactory('mult', {\n\tin_prefix: 'mult',\n\tout: 'product',\n\toperation: '*',\n}) {\n\tstatic type() {\n\t\treturn 'mult';\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn 1;\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_output_type() {\n\t\tconst input_types = this._expected_input_types();\n\t\tconst type = input_types[input_types.length - 1];\n\t\treturn [type];\n\t}\n\n\tprotected expected_input_types() {\n\t\tconst input_connections = this.io.connections.input_connections();\n\t\tif (input_connections) {\n\t\t\tconst first_connection = input_connections[0];\n\n\t\t\tif (first_connection) {\n\t\t\t\tconst connection_point_for_first_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\tfirst_connection.input_index\n\t\t\t\t];\n\t\t\t\tconst type = connection_point_for_first_connection.type;\n\t\t\t\tconst expected_count = input_connections ? input_connections.length + 1 : 2;\n\t\t\t\tconst empty_array = new Array(expected_count);\n\n\t\t\t\tif (type == ConnectionPointType.FLOAT) {\n\t\t\t\t\tconst second_connection = input_connections ? input_connections[1] : null;\n\t\t\t\t\tif (second_connection) {\n\t\t\t\t\t\tconst connection_point_for_second_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\t\t\tsecond_connection.input_index\n\t\t\t\t\t\t];\n\t\t\t\t\t\tconst second_type = connection_point_for_second_connection.type;\n\t\t\t\t\t\tif (second_type == ConnectionPointType.FLOAT) {\n\t\t\t\t\t\t\t// if first 2 inputs are float: n+1 float inputs\n\t\t\t\t\t\t\treturn empty_array.map((i) => type);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// if first input is float and 2nd is different: 1 float, 1 like second, and no other input\n\t\t\t\t\t\t\treturn [type, second_type];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if only 1 input: 2 with same type\n\t\t\t\t\t\treturn [type, type];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// if first input is not a float: n+1 inputs with same type\n\t\t\t\t\treturn empty_array.map(() => type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [ConnectionPointType.FLOAT, ConnectionPointType.FLOAT];\n\t}\n}\n","import {BaseNodeGlMathFunctionArgBoolean2GlNode} from './_BaseMathFunctionArgBoolean2';\n\ninterface MathArg2BooleanOptions {\n\top: string;\n}\n\nfunction MathFunctionArg2BooleanFactory(type: string, options: MathArg2BooleanOptions) {\n\treturn class Node extends BaseNodeGlMathFunctionArgBoolean2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\n\t\tboolean_operation(): string {\n\t\t\treturn options.op;\n\t\t}\n\t\tprotected _gl_output_name(index: number) {\n\t\t\treturn type;\n\t\t}\n\t\tprotected _gl_input_name(index = 0) {\n\t\t\treturn `${type}${index}`;\n\t\t}\n\t};\n}\nexport class AndGlNode extends MathFunctionArg2BooleanFactory('and', {op: '&&'}) {}\nexport class OrGlNode extends MathFunctionArg2BooleanFactory('or', {op: '||'}) {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunctionArg2';\n\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport abstract class BaseNodeGlMathFunctionArgBoolean2GlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_input_types() {\n\t\treturn [ConnectionPointType.BOOL, ConnectionPointType.BOOL];\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.BOOL];\n\t}\n\n\tabstract boolean_operation(): string;\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst args = this.io.inputs.named_input_connection_points.map((named_input, i) => {\n\t\t\tconst name = named_input.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(` ${this.boolean_operation()} `);\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `bool ${sum} = ${joined_args}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunctionArg2';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tDIR = 'dir',\n\tUP = 'up',\n}\nconst InputNames: Array<InputName> = [InputName.DIR, InputName.UP];\ninterface IDefaultValues {\n\t[InputName.DIR]: Number3;\n\t[InputName.UP]: Number3;\n}\nconst DEFAULT_DIR: Number3 = [0, 0, 1];\nconst DEFAULT_UP: Number3 = [0, 1, 0];\nconst DefaultValues: IDefaultValues = {\n\t[InputName.DIR]: DEFAULT_DIR,\n\t[InputName.UP]: DEFAULT_UP,\n};\n\nexport class AlignGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'align';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.VEC3,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'align';\n\t}\n\n\t// protected expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.VEC3];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\nimport ComplementMethods from './gl/complement.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class ComplementGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'complement';\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'complement';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [\n\t\t\tnew FunctionGLDefinition(\n\t\t\t\tthis,\n\t\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT,\n\t\t\t\tComplementMethods\n\t\t\t),\n\t\t];\n\t}\n}\n","export default \"float complement(float x){return 1.0-x;}\\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\\n\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'cross';\n\nclass CrossGlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.VECTOR3([0, 0, 1]);\n\ty = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CrossGlParamsConfig();\nexport class CrossGlNode extends TypedGlNode<CrossGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cross';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = ThreeToGl.float(this.variable_for_input('x'));\n\t\tconst y = ThreeToGl.float(this.variable_for_input('y'));\n\n\t\tconst result = this.gl_var_name(OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${result} = cross(${x}, ${y})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import CycleMethods from './gl/cycle.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\n\nexport class CycleGlNode extends MathFunctionArg3Factory('cycle', {\n\tin: ['in', 'min', 'max'],\n\tdefault: {max: 1},\n\tfunctions: [CycleMethods],\n}) {}\n","export default \"float cycle(float val, float val_min, float val_max){\\n\\tif(val >= val_min && val < val_max){\\n\\t\\treturn val;\\n\\t} else {\\n\\t\\tfloat range = val_max - val_min;\\n\\t\\tif(val >= val_max){\\n\\t\\t\\tfloat delta = (val - val_max);\\n\\t\\t\\treturn val_min + mod(delta, range);\\n\\t\\t} else {\\n\\t\\t\\tfloat delta = (val_min - val);\\n\\t\\t\\treturn val_max - mod(delta, range);\\n\\t\\t}\\n\\t}\\n}\"","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunctionArg3';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\ninterface MathArg3Options {\n\tin?: [string, string, string];\n\tout?: string;\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tdefault?: Dictionary<any>;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg3Factory(type: string, options: MathArg3Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1', 'in2'];\n\tconst gl_input_default_values = options.default || {};\n\tconst out_type = options.out_type || ConnectionPointType.FLOAT;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg3GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\treturn [out_type];\n\t\t}\n\t\tgl_input_default_value(name: string) {\n\t\t\treturn gl_input_default_values[name];\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t}\n\t};\n}\nexport class ClampGlNode extends MathFunctionArg3Factory('clamp', {in: ['value', 'min', 'max'], default: {max: 1}}) {}\nexport class FaceforwardGlNode extends MathFunctionArg3Factory('face_forward', {in: ['N', 'I', 'Nref']}) {}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport abstract class BaseNodeGlMathFunctionArg3GlNode extends BaseGlMathFunctionGlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport DiskMethods from './gl/disk.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nconst OUTPUT_NAME = 'float';\nclass DiskGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR2([0, 0]);\n\tcenter = ParamConfig.VECTOR2([0, 0]);\n\tradius = ParamConfig.FLOAT(1);\n\tfeather = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new DiskGlParamsConfig();\nexport class DiskGlNode extends TypedGlNode<DiskGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'disk';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst position = ThreeToGl.vector2(this.variable_for_input('position'));\n\t\tconst center = ThreeToGl.vector2(this.variable_for_input('center'));\n\t\tconst radius = ThreeToGl.float(this.variable_for_input('radius'));\n\t\tconst feather = ThreeToGl.float(this.variable_for_input('feather'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = disk(${position}, ${center}, ${radius}, ${feather})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\n\t\tshaders_collection_controller.add_definitions(this, [\n\t\t\tnew FunctionGLDefinition(this, ConnectionPointType.FLOAT, DiskMethods),\n\t\t]);\n\t}\n}\n","export default \"float disk(vec2 pos, vec2 center, float radius, float feather){\\n\\tfloat dist = distance(pos, center);\\n\\tif(feather <= 0.0){\\n\\t\\tif(dist < radius){return 1.0;}else{return 0.0;}\\n\\t} else {\\n\\t\\tfloat half_feather = feather * 0.5;\\n\\t\\tif(dist < (radius - half_feather)){\\n\\t\\t\\treturn 1.0;\\n\\t\\t} else {\\n\\t\\t\\tif(dist > (radius + half_feather)){\\n\\t\\t\\t\\treturn 0.0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfloat feather_start = (radius - half_feather);\\n\\t\\t\\t\\tfloat blend = 1.0 - (dist - feather_start) / feather;\\n\\t\\t\\t\\treturn blend;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\n// https://github.com/glslify/glsl-easings\nimport CircularInOut from './gl/easing/circular-in-out.glsl';\nimport ExponentialInOut from './gl/easing/exponential-in-out.glsl';\nimport CircularIn from './gl/easing/circular-in.glsl';\nimport ElasticOut from './gl/easing/elastic-out.glsl';\nimport CubicIn from './gl/easing/cubic-in.glsl';\nimport ExponentialOut from './gl/easing/exponential-out.glsl';\nimport QuinticOut from './gl/easing/quintic-out.glsl';\nimport ElasticInOut from './gl/easing/elastic-in-out.glsl';\nimport Linear from './gl/easing/linear.glsl';\nimport CircularOut from './gl/easing/circular-out.glsl';\nimport BackInOut from './gl/easing/back-in-out.glsl';\nimport BackIn from './gl/easing/back-in.glsl';\nimport SineIn from './gl/easing/sine-in.glsl';\nimport BackOut from './gl/easing/back-out.glsl';\nimport QuarticInOut from './gl/easing/quartic-in-out.glsl';\nimport QuadraticIn from './gl/easing/quadratic-in.glsl';\nimport CubicInOut from './gl/easing/cubic-in-out.glsl';\nimport ElasticIn from './gl/easing/elastic-in.glsl';\nimport BounceOut from './gl/easing/bounce-out.glsl';\nimport QuadraticInOut from './gl/easing/quadratic-in-out.glsl';\nimport ExponentialIn from './gl/easing/exponential-in.glsl';\nimport QuinticInOut from './gl/easing/quintic-in-out.glsl';\nimport SineInOut from './gl/easing/sine-in-out.glsl';\nimport CubicOut from './gl/easing/cubic-out.glsl';\nimport QuadraticOut from './gl/easing/quadratic-out.glsl';\nimport BounceInOut from './gl/easing/bounce-in-out.glsl';\nimport QuinticIn from './gl/easing/quintic-in.glsl';\nimport QuarticIn from './gl/easing/quartic-in.glsl';\nimport QuarticOut from './gl/easing/quartic-out.glsl';\nimport BounceIn from './gl/easing/bounce-in.glsl';\nimport SineOut from './gl/easing/sine-out.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst EASE_NAMES = [\n\t'back-in-out',\n\t'back-in',\n\t'back-out',\n\t'bounce-in-out',\n\t'bounce-in',\n\t'bounce-out',\n\t'circular-in-out',\n\t'circular-in',\n\t'circular-out',\n\t'cubic-in-out',\n\t'cubic-in',\n\t'cubic-out',\n\t'elastic-in-out',\n\t'elastic-in',\n\t'elastic-out',\n\t'exponential-in-out',\n\t'exponential-in',\n\t'exponential-out',\n\t'linear',\n\t'quadratic-in-out',\n\t'quadratic-in',\n\t'quadratic-out',\n\t// \"quartic-in-out\",\n\t// \"quartic-in\",\n\t// \"quartic-out\",\n\t// \"quintic-in-out\",\n\t// \"quintic-in\",\n\t// \"quintic-out\",\n\t'sine-in-out',\n\t'sine-in',\n\t'sine-out',\n];\n\nconst IMPORT_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': CircularInOut,\n\t'exponential-in-out': ExponentialInOut,\n\t'circular-in': CircularIn,\n\t'elastic-out': ElasticOut,\n\t'cubic-in': CubicIn,\n\t'exponential-out': ExponentialOut,\n\t'quintic-out': QuinticOut,\n\t'elastic-in-out': ElasticInOut,\n\tlinear: Linear,\n\t'circular-out': CircularOut,\n\t'back-in-out': BackInOut,\n\t'back-in': BackIn,\n\t'sine-in': SineIn,\n\t'back-out': BackOut,\n\t'quartic-in-out': QuarticInOut,\n\t'quadratic-in': QuadraticIn,\n\t'cubic-in-out': CubicInOut,\n\t'elastic-in': ElasticIn,\n\t'bounce-out': BounceOut,\n\t'quadratic-in-out': QuadraticInOut,\n\t'exponential-in': ExponentialIn,\n\t'quintic-in-out': QuinticInOut,\n\t'sine-in-out': SineInOut,\n\t'cubic-out': CubicOut,\n\t'quadratic-out': QuadraticOut,\n\t'bounce-in-out': BounceInOut,\n\t'quintic-in': QuinticIn,\n\t'quartic-in': QuarticIn,\n\t'quartic-out': QuarticOut,\n\t'bounce-in': BounceIn,\n\t'sine-out': SineOut,\n};\nconst IMPORT_DEPENDENCIES_BY_EASE_NAME: Dictionary<string[]> = {\n\t'bounce-in': [BounceOut],\n\t'bounce-in-out': [BounceOut],\n};\n\nconst METHOD_NAMES_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': 'circularInOut',\n\t'exponential-in-out': 'exponentialInOut',\n\t'circular-in': 'circularIn',\n\t'elastic-out': 'elasticOut',\n\t'cubic-in': 'cubicIn',\n\t'exponential-out': 'exponentialOut',\n\t'quintic-out': 'quinticOut',\n\t'elastic-in-out': 'elasticInOut',\n\tlinear: 'linear',\n\t'circular-out': 'circularOut',\n\t'back-in-out': 'backInOut',\n\t'back-in': 'backIn',\n\t'sine-in': 'sineIn',\n\t'back-out': 'backOut',\n\t'quartic-in-out': 'quarticInOut',\n\t'quadratic-in': 'quadraticIn',\n\t'cubic-in-out': 'cubicInOut',\n\t'elastic-in': 'elasticIn',\n\t'bounce-out': 'bounceOut',\n\t'quadratic-in-out': 'quadraticInOut',\n\t'exponential-in': 'exponentialIn',\n\t'quintic-in-out': 'quinticInOut',\n\t'sine-in-out': 'sineInOut',\n\t'cubic-out': 'cubicOut',\n\t'quadratic-out': 'quadraticOut',\n\t'bounce-in-out': 'bounceInOut',\n\t'quintic-in': 'quinticIn',\n\t'quartic-in': 'quarticIn',\n\t'quartic-out': 'quarticOut',\n\t'bounce-in': 'bounceIn',\n\t'sine-out': 'sineOut',\n};\n\nconst OUTPUT_NAME = 'out';\nconst default_ease_type = EASE_NAMES.indexOf('sine-in-out');\nclass EasingGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_ease_type, {\n\t\tmenu: {\n\t\t\tentries: EASE_NAMES.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new EasingGlParamsConfig();\nexport class EasingGlNode extends TypedGlNode<EasingGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'easing';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.spare_params_controller.set_inputless_param_names(['type']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst ease_name = EASE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_EASE_NAME[ease_name];\n\t\tconst glsl_function_code = IMPORT_BY_EASE_NAME[ease_name];\n\n\t\tlet ease_functions = [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, glsl_function_code)];\n\t\tconst function_dependencies = (IMPORT_DEPENDENCIES_BY_EASE_NAME[ease_name] || []).map(\n\t\t\t(f) => new FunctionGLDefinition(this, ConnectionPointType.FLOAT, f)\n\t\t);\n\t\tif (function_dependencies) {\n\t\t\tease_functions = function_dependencies.concat(ease_functions);\n\t\t}\n\t\t// ease_functions.forEach(ease_function=>{\n\t\t// \tfunction_declaration_lines.push(ease_function)\n\t\t// })\n\n\t\tconst in_value = ThreeToGl.float(this.variable_for_input('input'));\n\t\tconst out_value = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst body_line = `float ${out_value} = ${method_name}(${in_value})`;\n\t\tshaders_collection_controller.add_definitions(this, ease_functions);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","export default \"float circularInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\\n}\\n\\n\"","export default \"float exponentialInOut(float t) {\\n  return t == 0.0 || t == 1.0\\n    ? t\\n    : t < 0.5\\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\\n}\\n\\n\"","export default \"float circularIn(float t) {\\n  return 1.0 - sqrt(1.0 - t * t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticOut(float t) {\\n  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;\\n}\\n\\n\"","export default \"float cubicIn(float t) {\\n  return t * t * t;\\n}\\n\\n\"","export default \"float exponentialOut(float t) {\\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\\n}\\n\\n\"","export default \"float quinticOut(float t) {\\n  return 1.0 - (pow(t - 1.0, 5.0));\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\\n}\\n\\n\"","export default \"float linear(float t) {\\n  return t;\\n}\\n\\n\"","export default \"float circularOut(float t) {\\n  return sqrt((2.0 - t) * t);\\n}\\n\\n\"","export default \"\\nfloat backInOut(float t) {\\n  float f = t < 0.5\\n    ? 2.0 * t\\n    : 1.0 - (2.0 * t - 1.0);\\n\\n  float g = pow(f, 3.0) - f * sin(f * PI);\\n\\n  return t < 0.5\\n    ? 0.5 * g\\n    : 0.5 * (1.0 - g) + 0.5;\\n}\\n\\n\"","export default \"\\nfloat backIn(float t) {\\n  return pow(t, 3.0) - t * sin(t * PI);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineIn(float t) {\\n  return sin((t - 1.0) * HALF_PI) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat backOut(float t) {\\n  float f = 1.0 - t;\\n  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\\n}\\n\\n\"","export default \"float quarticInOut(float t) {\\n  return t < 0.5\\n    ? +8.0 * pow(t, 4.0)\\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\\n}\\n\\n\"","export default \"float quadraticIn(float t) {\\n  return t * t;\\n}\\n\\n\"","export default \"float cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticIn(float t) {\\n  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"\\nfloat bounceOut(float t) {\\n  const float a = 4.0 / 11.0;\\n  const float b = 8.0 / 11.0;\\n  const float c = 9.0 / 10.0;\\n\\n  const float ca = 4356.0 / 361.0;\\n  const float cb = 35442.0 / 1805.0;\\n  const float cc = 16061.0 / 1805.0;\\n\\n  float t2 = t * t;\\n\\n  return t < a\\n    ? 7.5625 * t2\\n    : t < b\\n      ? 9.075 * t2 - 9.9 * t + 3.4\\n      : t < c\\n        ? ca * t2 - cb * t + cc\\n        : 10.8 * t * t - 20.52 * t + 10.72;\\n}\\n\\n\"","export default \"float quadraticInOut(float t) {\\n  float p = 2.0 * t * t;\\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\\n}\\n\\n\"","export default \"float exponentialIn(float t) {\\n  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"float quinticInOut(float t) {\\n  return t < 0.5\\n    ? +16.0 * pow(t, 5.0)\\n    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat sineInOut(float t) {\\n  return -0.5 * (cos(PI * t) - 1.0);\\n}\\n\\n\"","export default \"float cubicOut(float t) {\\n  float f = t - 1.0;\\n  return f * f * f + 1.0;\\n}\\n\\n\"","export default \"float quadraticOut(float t) {\\n  return -t * (t - 2.0);\\n}\\n\\n\"","export default \"\\nfloat bounceInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\\n}\\n\\n\\n\\n\"","export default \"float quinticIn(float t) {\\n  return pow(t, 5.0);\\n}\\n\\n\"","export default \"float quarticIn(float t) {\\n  return pow(t, 4.0);\\n}\\n\\n\"","export default \"float quarticOut(float t) {\\n  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat bounceIn(float t) {\\n  return 1.0 - bounceOut(1.0 - t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineOut(float t) {\\n  return sin(t * HALF_PI);\\n}\\n\\n\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport QuaternionMethods from './gl/quaternion.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst VARS = {\n\tposition: 'position',\n\tnormal: 'normal',\n\tinstance_position: 'instancePosition',\n\tinstance_orientation: 'instanceOrientation',\n\tinstance_scale: 'instanceScale',\n};\n\nclass InstanceTransformGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR3([0, 0, 0]);\n\tnormal = ParamConfig.VECTOR3([0, 0, 1]);\n\tinstance_position = ParamConfig.VECTOR3([0, 0, 0]);\n\tinstance_orientation = ParamConfig.VECTOR4([0, 0, 0, 0]);\n\tinstance_scale = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new InstanceTransformGlParamsConfig();\nexport class InstanceTransformGlNode extends TypedGlNode<InstanceTransformGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance_transform';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_position(), ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_normal(), ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\t\tconst function_declaration_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC4, QuaternionMethods));\n\n\t\tconst input_position = this.io.inputs.named_input(this.p.position.name);\n\t\tconst position = input_position\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.position.name))\n\t\t\t: this._default_position();\n\n\t\tconst input_normal = this.io.inputs.named_input(this.p.normal.name);\n\t\tconst normal = input_normal\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.normal.name))\n\t\t\t: this._default_normal();\n\n\t\tconst input_instancePosition = this.io.inputs.named_input(this.p.instance_position.name);\n\t\tconst instancePosition = input_instancePosition\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_position.name))\n\t\t\t: this._default_instance_position(shaders_collection_controller);\n\t\t// const instancePosition = ThreeToGl.float(this.variable_for_input('instancePosition'))\n\n\t\tconst input_instanceOrientation = this.io.inputs.named_input(this.p.instance_orientation.name);\n\t\tconst instanceOrientation = input_instanceOrientation\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_orientation.name))\n\t\t\t: this._default_input_instance_orientation(shaders_collection_controller);\n\n\t\tconst input_instanceScale = this.io.inputs.named_input(this.p.instance_scale.name);\n\t\tconst instanceScale = input_instanceScale\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_scale.name))\n\t\t\t: this._default_input_instance_scale(shaders_collection_controller);\n\n\t\tconst result_position = this.gl_var_name(this.gl_output_name_position());\n\t\tconst result_normal = this.gl_var_name(this.gl_output_name_normal());\n\t\tbody_lines.push(`vec3 ${result_position} = vec3(${position})`);\n\t\tbody_lines.push(`${result_position} *= ${instanceScale}`);\n\t\tbody_lines.push(`${result_position} = rotate_with_quat( ${result_position}, ${instanceOrientation} )`);\n\t\tbody_lines.push(`${result_position} += ${instancePosition}`);\n\t\tbody_lines.push(`vec3 ${result_normal} = vec3(${normal})`);\n\t\tbody_lines.push(`${result_normal} = rotate_with_quat( ${result_normal}, ${instanceOrientation} )`);\n\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t}\n\tgl_output_name_position() {\n\t\treturn 'position';\n\t}\n\tgl_output_name_normal() {\n\t\treturn 'normal';\n\t}\n\n\tprivate _default_position(): string {\n\t\treturn VARS.position;\n\t}\n\tprivate _default_normal(): string {\n\t\treturn VARS.normal;\n\t}\n\tprivate _default_instance_position(shaders_collection_controller: ShadersCollectionController): string | undefined {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_position,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_position, this._shader_name);\n\t}\n\tprivate _default_input_instance_orientation(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC4,\n\t\t\tVARS.instance_orientation,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec4', VARS.instance_orientation, this._shader_name);\n\t}\n\tprivate _default_input_instance_scale(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_scale,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_scale, this._shader_name);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class LengthGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'length';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['x'][index];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'length';\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class MixGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'mix';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['value0', 'value1', 'blend'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => 'mix');\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn ['value0', 'value1', 'blend'][index];\n\t// }\n\tgl_output_name() {\n\t\treturn 'mix';\n\t}\n\t// gl_method_name(): string {\n\t// \treturn 'mix';\n\t// }\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {TypedConnectionFloat} from './GlData'\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NegateGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'negate';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['in'][index]);\n\t\t// this.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t// \tConnectionPointType.VEC3,\n\t\t// \tConnectionPointType.VEC3,\n\t\t// ]);\n\t\t// this.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn ['in'][index];\n\t// }\n\t// gl_input_default_value(name: string) {\n\t// \treturn {\n\t// \t\tin: 1,\n\t// \t}[name];\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input('in'));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name('value');\n\t\tconst body_line = `${gl_type} ${out} = -1.0 * ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {TypedConnectionFloat} from './GlData'\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NullGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input('in'));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name('value');\n\t\tconst body_line = `${gl_type} ${out} = ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ThreeToGl} from '../../../Core/ThreeToGl';\n// import {CodeBuilder} from './Util/CodeBuilder'\n// import {Definition} from './Definition/_Module';\n// import {ShaderName, LineType, LINE_TYPES} from './Assembler/Util/CodeBuilder';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass OutputGlParamsConfig extends NodeParamsConfig {\n\t// type = ParamConfig.INTEGER(0, {\n\t// \tmenu: {\n\t// \t\tentries: ConnectionPointTypes.map((name, i) => {\n\t// \t\t\treturn {name: name, value: i};\n\t// \t\t}),\n\t// \t},\n\t// });\n\t// value_float = ParamConfig.FLOAT(0, ConstantGlNode.typed_visible_options(ConnectionPointType.FLOAT));\n\t// value_vec2 = ParamConfig.VECTOR2([0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC2));\n\t// value_vec3 = ParamConfig.VECTOR3([0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC3));\n\t// value_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new OutputGlParamsConfig();\n\nexport class OutputGlNode extends TypedGlNode<OutputGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'output';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_output_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (shaders_collection_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_output(this, shaders_collection_controller);\n\t\t// }\n\t}\n\n\t// set_color_declaration(color_declaration: string){\n\t// \tthis._color_declaration = color_declaration\n\t// }\n}\n","import {TypedGlNode} from './_Base';\nimport {\n\tConnectionPointTypes,\n\tConnectionPointType,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n} from '../utils/connections/ConnectionPointType';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ParamType} from '../../poly/ParamType';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\nclass ParamGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tas_color = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {type: ConnectionPointTypes.indexOf(ConnectionPointType.VEC3)},\n\t});\n}\nconst ParamsConfig = new ParamGlParamsConfig();\n\nexport class ParamGlNode extends TypedGlNode<ParamGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'param';\n\t}\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointTypes[this.pv.type]]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_if_type_changed', this._update_signature_if_required_bound);\n\t}\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst definitions = [];\n\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst var_name = this.uniform_name();\n\n\t\tdefinitions.push(new UniformGLDefinition(this, gl_type, var_name));\n\t\tshaders_collection_controller.add_definitions(this, definitions);\n\t}\n\tset_param_configs() {\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst default_value = ConnectionPointInitValueMap[gl_type];\n\t\tlet param_type = ConnectionPointTypeToParamTypeMap[gl_type];\n\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tif (\n\t\t\tparam_type == ParamType.VECTOR3 &&\n\t\t\tthis.p.as_color.value &&\n\t\t\tlodash_isArray(default_value) &&\n\t\t\tdefault_value.length == 3\n\t\t) {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tParamType.COLOR,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tparam_type,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t}\n\t}\n\tuniform_name() {\n\t\tconst output_connection_point = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection_point.name);\n\t\treturn var_name;\n\t}\n\n\t// update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointTypes[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class RefractGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'refract';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['I', 'N', 'eta'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => 'refract');\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'refract';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.VEC3;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatMultGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_mult';\n\t}\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat0', 'quat1'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC4,\n\t\t\tConnectionPointType.VEC4,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat0', 'quat1'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_mult';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4, ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunctionArg2';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tAXIS = 'axis',\n\tANGLE = 'angle',\n}\nconst InputNames: Array<InputName> = [InputName.AXIS, InputName.ANGLE];\ninterface IDefaultValues {\n\t[InputName.AXIS]: Number3;\n\t[InputName.ANGLE]: number;\n}\nconst DEFAULT_AXIS: Number3 = [0, 0, 1];\nconst DEFAULT_ANGLE: number = 0;\nconst DefaultValues: IDefaultValues = {\n\t[InputName.AXIS]: DEFAULT_AXIS,\n\t[InputName.ANGLE]: DEFAULT_ANGLE,\n};\n\nexport class QuatFromAxisAngleGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.FLOAT,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.FLOAT];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAngleGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.FLOAT]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.FLOAT];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunctionArg1';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAxisGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_axis';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC3]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_axis';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC3];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC3, Quaternion)];\n\t}\n}\n","import {CATEGORY_MAT} from './Category';\n\nimport {MeshBasicMatNode} from '../../nodes/mat/MeshBasic';\nimport {MeshBasicBuilderMatNode} from '../../nodes/mat/MeshBasicBuilder';\nimport {MeshLambertMatNode} from '../../nodes/mat/MeshLambert';\nimport {MeshLambertBuilderMatNode} from '../../nodes/mat/MeshLambertBuilder';\nimport {MeshStandardMatNode} from '../../nodes/mat/MeshStandard';\nimport {MeshStandardBuilderMatNode} from '../../nodes/mat/MeshStandardBuilder';\nimport {PointsMatNode} from '../../nodes/mat/Points';\nimport {PointsBuilderMatNode} from '../../nodes/mat/PointsBuilder';\n\nexport interface MatNodeChildrenMap {\n\tmesh_basic: MeshBasicMatNode;\n\tmesh_basic_builder: MeshBasicBuilderMatNode;\n\tmesh_lambert: MeshLambertMatNode;\n\tmesh_lambert_builder: MeshLambertBuilderMatNode;\n\tmesh_standard: MeshStandardMatNode;\n\tmesh_standard_builder: MeshStandardBuilderMatNode;\n\tpoints: PointsMatNode;\n\tpoints_builder: PointsBuilderMatNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class MatRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(MeshBasicMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshBasicBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshLambertMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshLambertBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshStandardMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshStandardBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(PointsMatNode, CATEGORY_MAT.POINTS);\n\t\tpoly.register_node(PointsBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t}\n}\n","import {NoColors} from 'three/src/constants';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends TypedMatNode<MeshBasicMaterial, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class MaterialContainer extends TypedContainer<ContainableMap['MATERIAL']> {\n\tset_content(content: ContainableMap['MATERIAL']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_material(material: Material) {\n\t\tif (this._content != null) {\n\t\t\tthis._content.dispose();\n\t\t}\n\t\tthis.set_content(material);\n\t}\n\thas_material() {\n\t\treturn this.has_content();\n\t}\n\tmaterial() {\n\t\treturn this.content();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerBasic} from '../gl/code/assemblers/materials/Basic';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerBasic, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerBasic>(this, ShaderAssemblerBasic);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerBasic extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.basic;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst material = new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\tlights: false,\n\t\t\t// depthTest: true,\n\t\t\t// alphaTest: 0.5,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {RGBADepthPacking} from 'three/src/constants';\n// import {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomMeshDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n// fragment: 'vec4 diffuseColor = vec4( 1.0 );' // do not change? unless there is a texture lookup\n\nexport class ShaderAssemblerCustomMeshDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n}\"","import {NoColors} from 'three/src/constants';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends TypedMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerLambert} from '../gl/code/assemblers/materials/Lambert';\n\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerLambert, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerLambert>(this, ShaderAssemblerLambert);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerLambert extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.lambert;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\tconst material = new ShaderMaterial({\n\t\t\tlights: true,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerStandard} from '../gl/code/assemblers/materials/Standard';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\n\nimport {SHADER_DEFAULTS} from './MeshStandard';\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_metalness(node as MeshStandardBuilderMatNode),\n\t});\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_roughness(node as MeshStandardBuilderMatNode),\n\t});\n}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardBuilderMatNode extends TypedBuilderMatNode<\n\tShaderAssemblerStandard,\n\tMeshStandardMatParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tuniforms: true,\n\t\tdirect_params: true,\n\t\tdefine: false,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerStandard>(this, ShaderAssemblerStandard);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\t\tawait TextureEnvMapController.update(this);\n\n\t\tif (this._material) {\n\t\t\tthis._material.uniforms.envMapIntensity.value = this.pv.env_map_intensity;\n\t\t\tMeshStandardBuilderMatNode._update_metalness(this);\n\t\t\tMeshStandardBuilderMatNode._update_roughness(this);\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n\tstatic _update_metalness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.metalness.value = node.pv.metalness;\n\t}\n\tstatic _update_roughness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.roughness.value = node.pv.roughness;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMesh} from './_BaseMesh';\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport metalnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl';\nimport roughnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl';\nimport {OutputGlNode} from '../../../Output';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {ParamType} from '../../../../../poly/ParamType';\n\nexport class ShaderAssemblerStandard extends ShaderAssemblerMesh {\n\tis_physical() {\n\t\treturn false;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = this.is_physical() ? ShaderLib.physical : ShaderLib.standard;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst options = {\n\t\t\tlights: true,\n\t\t\textensions: {\n\t\t\t\tderivatives: true,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t};\n\t\t// if(this.constructor.is_physical()){\n\t\t// \toptions['defines'] = {\n\t\t// \t\tPHYSICAL: 1\n\t\t// \t}\n\t\t// }\n\n\t\tconst material = new ShaderMaterial(options);\n\n\t\t// replace some shader chunks\n\t\tmaterial.onBeforeCompile = function(shader) {\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <metalnessmap_fragment>',\n\t\t\t\tmetalnessmap_fragment\n\t\t\t);\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <roughnessmap_fragment>',\n\t\t\t\troughnessmap_fragment\n\t\t\t);\n\t\t};\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material {\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial;\n\t// \tconst options = {};\n\t// \tthis._match_uniform('color', options, material, 'diffuse');\n\t// \tthis._match_uniform('map', options, material);\n\t// \tthis._match_uniform('envMap', options, material);\n\t// \tthis._match_uniform('envMapIntensity', options, material);\n\t// \tthis._match_uniform('metalness', options, material);\n\t// \tthis._match_uniform('roughness', options, material);\n\t// \tconst gltf_material = new gltf_constructor(options);\n\t// \treturn gltf_material;\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\t// those defaults should be 1. If they were 0, using the params\n\t\t// at the material level would appear not to work\n\t\toutput_child.add_param(ParamType.FLOAT, 'metalness', 1);\n\t\toutput_child.add_param(ParamType.FLOAT, 'roughness', 1);\n\t}\n\t// create_globals_node_output_connections(){\n\t// \treturn BaseShaderAssembler.create_globals_node_output_connections().concat([\n\t// \t\tnew Connection.Float('metalness'),\n\t// \t\tnew Connection.Float('roughness'),\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha', 'metalness', 'roughness'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('metalness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_metalness = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('roughness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_roughness = ',\n\t\t\t}),\n\t\t]);\n\t}\n}\n","export default \"float metalnessFactor = metalness * POLY_metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\"","export default \"float roughnessFactor = roughness * POLY_roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\"","import {NoColors} from 'three/src/constants';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\n// import {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\n// import {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\tsize_attenuation = ParamConfig.BOOLEAN(1);\n\t};\n}\n\nclass PointsMatParamsConfig extends SideParamConfig(ColorParamConfig(PointsParamConfig(NodeParamsConfig))) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends TypedMatNode<PointsMaterial, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points';\n\t}\n\n\tcreate_material() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.material.size = this.pv.size;\n\t\tthis.material.sizeAttenuation = this.pv.size_attenuation;\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderAssemblerCustomPointsDepth} from './CustomPointsDepth';\nimport {ShaderAssemblerCustomPointsDistance} from './CustomPointsDistance';\nimport {ShaderAssemblerCustomPointsDepthDOF} from './CustomPointsDepthDOF';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', 'gl_PointSize = size;']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst CUSTOM_ASSEMBLER_MAP: CustomAssemblerMap = new Map();\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomPointsDistance);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomPointsDepth);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomPointsDepthDOF);\n\nexport class ShaderAssemblerPoints extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'diffuseColor' }\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn CUSTOM_ASSEMBLER_MAP;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = ShaderLib.points;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\t// const uniforms = UniformsUtils.clone( template_shader.uniforms )\n\t\t// uniforms.size.value = 10\n\n\t\tconst material = new ShaderMaterial({\n\t\t\ttransparent: true,\n\t\t\tfog: true,\n\n\t\t\t// size: 10,\n\t\t\t// //blending: AdditiveBlending\n\t\t\t// depthTest: true,\n\t\t\t// depthwrite: true,\n\t\t\t// alphaTest: 0.5,\n\t\t\tdefines: {\n\t\t\t\t// ALPHATEST: 0.5,\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\t// protected insert_body_after(shader_name){\n\t// \treturn {\n\t// \t\tvertex: 'gl_PointSize = size;',\n\t// \t\tfragment: 'vec4 diffuseColor = vec4( diffuse, opacity );'\n\t// \t}[shader_name]\n\t// }\n\t// those shadow shaders should ideally be overriden\n\t// to properly take into account point size\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\toutput_child.add_param(ParamType.FLOAT, 'gl_PointSize', 1);\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections().concat([\n\t\t\tnew TypedNamedConnectionPoint('gl_PointCoord', ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\t// add_globals_params(globals_node){\n\t// \tBaseShaderAssembler.add_globals_params(globals_node)\n\t// \tglobals_node.set_named_outputs([\n\t// \t\tnew Connection.Vec3('position'),\n\t// \t\tnew Connection.Vec3('color'),\n\t// \t\tnew Connection.Vec3('normal'),\n\t// \t\tnew Connection.Vec4('gl_FragCoord'),\n\t// \t\tnew Connection.Vec2('gl_PointCoord'),\n\t// \t\t// new TypedConnectionVec2('uv'),\n\t// \t\tnew Connection.Float('frame')\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv', 'gl_PointSize'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('gl_PointSize', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'gl_PointSize = ',\n\t\t\t\tsuffix: ' * size * 10.0', // currently using 10 as 1 seems really small\n\t\t\t}),\n\t\t]);\n\t\t// \tnew VariableConfig('position', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t// \t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t// \t\tprefix: 'vec3 transformed = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('normal', {\n\t\t// \t\tprefix: 'objectNormal = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('color', {\n\t\t// \t\tprefix: 'diffuseColor.xyz = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('alpha', {\n\t\t// \t\tprefix: 'diffuseColor.w = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('uv', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\tprefix: 'vUv = ',\n\t\t// \t\tif: 'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )'\n\t\t// \t}),\n\t\t// \tnew VariableConfig('gl_PointSize', {\n\t\t// \t\tdefault: '1.0',\n\t\t// \t\tprefix: 'gl_PointSize = ',\n\t\t// \t\tsuffix: ' * size',\n\t\t// \t}),\n\t\t// ]\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepth.vert.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDistance.vert.glsl';\n\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\\n// #define DISTANCE\\n// varying vec3 vWorldPosition;\\n// #include <common>\\n// #include <uv_pars_vertex>\\n// #include <displacementmap_pars_vertex>\\n// #include <morphtarget_pars_vertex>\\n// #include <skinning_pars_vertex>\\n// #include <clipping_planes_pars_vertex>\\n// void main() {\\n// \\t#include <uv_vertex>\\n// \\t#include <skinbase_vertex>\\n// \\t#ifdef USE_DISPLACEMENTMAP\\n// \\t\\t#include <beginnormal_vertex>\\n// \\t\\t#include <morphnormal_vertex>\\n// \\t\\t#include <skinnormal_vertex>\\n// \\t#endif\\n// \\t#include <begin_vertex>\\n// \\t#include <morphtarget_vertex>\\n// \\t#include <skinning_vertex>\\n// \\t#include <displacementmap_vertex>\\n// \\t#include <project_vertex>\\n// \\t#include <worldpos_vertex>\\n// \\t#include <clipping_planes_vertex>\\n// \\tvWorldPosition = worldPosition.xyz;\\n// }\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib'\n// import {RGBADepthPacking} from 'three/src/constants'\n// import {BasicDepthPacking} from 'three/src/constants'\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tsize: {value: 1},\n\t\t\t\tscale: {value: 1},\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\t\t\tdepthTest: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\"","import {CATEGORY_OBJ} from './Category';\n\nimport {AmbientLightObjNode} from '../../nodes/obj/AmbientLight';\nimport {AreaLightObjNode} from '../../nodes/obj/AreaLight';\nimport {DirectionalLightObjNode} from '../../nodes/obj/DirectionalLight';\nimport {HemisphereLightObjNode} from '../../nodes/obj/HemisphereLight';\nimport {PointLightObjNode} from '../../nodes/obj/PointLight';\nimport {SpotLightObjNode} from '../../nodes/obj/SpotLight';\n\nimport {EventsObjNode} from '../../nodes/obj/Events';\nimport {MaterialsObjNode} from '../../nodes/obj/Materials';\nimport {CopObjNode} from '../../nodes/obj/Cop';\nimport {PostProcessObjNode} from '../../nodes/obj/PostProcess';\n\nimport {GeoObjNode} from '../../nodes/obj/Geo';\nimport {NullObjNode} from '../../nodes/obj/Null';\nimport {FogObjNode} from '../../nodes/obj/Fog';\n\nimport {OrthographicCameraObjNode} from '../../nodes/obj/OrthographicCamera';\nimport {PerspectiveCameraObjNode} from '../../nodes/obj/PerspectiveCamera';\n// import {CubeCameraObj} from '../../nodes/obj/CubeCamera';\n\nexport interface ObjNodeChildrenMap {\n\tambient_light: AmbientLightObjNode;\n\tarea_light: AreaLightObjNode;\n\tdirectional_light: DirectionalLightObjNode;\n\themisphere_light: HemisphereLightObjNode;\n\tpoint_light: PointLightObjNode;\n\tspot_light: SpotLightObjNode;\n\tcop: CopObjNode;\n\tevents: EventsObjNode;\n\tfog: FogObjNode;\n\tgeo: GeoObjNode;\n\tmaterials: MaterialsObjNode;\n\tnull: NullObjNode;\n\tperspective_camera: PerspectiveCameraObjNode;\n\tpost_process: PostProcessObjNode;\n\torthographic_camera: OrthographicCameraObjNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class ObjRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AmbientLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(AreaLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(DirectionalLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(HemisphereLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(PointLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(SpotLightObjNode, CATEGORY_OBJ.LIGHT);\n\n\t\tpoly.register_node(EventsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(MaterialsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(CopObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(PostProcessObjNode, CATEGORY_OBJ.MANAGER);\n\n\t\tpoly.register_node(GeoObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(NullObjNode, CATEGORY_OBJ.GEOMETRY);\n\n\t\tpoly.register_node(OrthographicCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\tpoly.register_node(PerspectiveCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\t// poly.register_node(CubeCameraObj, CATEGORY_OBJ.CAMERA)\n\n\t\tpoly.register_node(FogObjNode, CATEGORY_OBJ.MISC);\n\t}\n}\n","import {AmbientLight} from 'three/src/lights/AmbientLight';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AmbientLightObjParamsConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n}\nconst ParamsConfig = new AmbientLightObjParamsConfig();\n\nexport class AmbientLightObjNode extends TypedLightObjNode<AmbientLight, AmbientLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'ambient_light';\n\t}\n\n\tcreate_light() {\n\t\treturn new AmbientLight();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ObjectContainer extends TypedContainer<ContainableMap['OBJECT']> {\n\tset_content(content: ContainableMap['OBJECT']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_object(object: Object3D) {\n\t\treturn this.set_content(object);\n\t}\n\thas_object() {\n\t\treturn this.has_content();\n\t}\n\tobject() {\n\t\treturn this.content();\n\t}\n\n\t// infos() {\n\t// \tconst node = this.node()\n\t// \treturn [\n\t// \t\t`full path: ${node.full_path()}`,\n\t// \t\t`${node.cooks_count()} cooks`,\n\t// \t\t`cook time: ${node.cook_time()}`,\n\t// \t\tthis.content(),\n\t// \t]\n\t// }\n}\n","import {RectAreaLight} from 'three/src/lights/RectAreaLight';\n// import {RectAreaLightHelper} from '../../../../modules/three/examples/jsm/helpers/RectAreaLightHelper';\nimport {RectAreaLightUniformsLib} from '../../../../modules/three/examples/jsm/lights/RectAreaLightUniformsLib';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {HelperController, HelperParamConfig} from './utils/HelperController';\n\nexport function AreaLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\twidth = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\theight = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t};\n}\n\nclass AreaLightObjParamsConfig extends AreaLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new AreaLightObjParamsConfig();\n\nexport class AreaLightObjNode extends BaseLightTransformedObjNode<RectAreaLight, AreaLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'area_light';\n\t}\n\t// private _helper_controller = new HelperController<RectAreaLightHelper, RectAreaLight>(this, RectAreaLightHelper);\n\t// initialize_node() {\n\t// \tthis._helper_controller.initialize_node();\n\t// }\n\n\tcreate_light() {\n\t\tconst object = new RectAreaLight(0xffffff, 1, 1, 1);\n\n\t\treturn object;\n\t}\n\n\t// create_light_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \tthis.add_param(ParamType.FLOAT, 'intensity', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'width', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'height', 1, {range: [0, 10]});\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.width = this.pv.width;\n\t\tthis.light.height = this.pv.height;\n\t\t// this._helper_controller.update();\n\t}\n\n\tasync cook() {\n\t\t// const {RectAreaLightUniformsLib} = await CoreScriptLoader.load_module_three_light('RectAreaLightUniformsLib');\n\t\t// const module = RectAreaLightUniformsLib\n\t\tif (!(RectAreaLightUniformsLib as any).initialized) {\n\t\t\tRectAreaLightUniformsLib.init();\n\t\t\t(RectAreaLightUniformsLib as any).initialized = true;\n\t\t}\n\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {DirectionalLightHelper} from './utils/helpers/DirectionalLightHelper';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {NodeContext} from '../../poly/NodeContext';\n// import {BaseObjNodeType} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nexport function DirectionalLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// transform = ParamConfig.FOLDER();\n\t\t// directional\n\t\t// position = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// target = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// lookat = ParamConfig.OPERATOR_PATH('', {dependent_on_found_node: false});\n\n\t\tlight = ParamConfig.FOLDER();\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1);\n\t\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t\t// shadows\n\t\tcast_shadows = ParamConfig.BOOLEAN(1);\n\t\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\t\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t\t// helper\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\n\nclass DirectionalLightObjParamsConfig extends DirectionalLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new DirectionalLightObjParamsConfig();\n\nexport class DirectionalLightObjNode extends BaseLightTransformedObjNode<\n\tDirectionalLight,\n\tDirectionalLightObjParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'directional_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<DirectionalLight>(\n\t\tthis,\n\t\t(<unknown>DirectionalLightHelper) as HelperConstructor<DirectionalLight>,\n\t\t'DirectionalLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new DirectionalLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'DirectionalLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\t// this.light.position.copy(this.pv.t);\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.shadow.camera.far = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\n\t\t// updating the camera matrix is not necessary for point light\n\t\t// so probably should not for this\n\t\tthis.light.shadow.camera.updateProjectionMatrix();\n\t}\n}\n","// import {Object3D} from 'three/src/core/Object3D';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {DirectionalLightObjNode} from '../../DirectionalLight';\nimport {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {Line} from 'three/src/objects/Line';\n\nexport class DirectionalLightHelper extends BaseLightHelper<DirectionalLight, DirectionalLightObjNode> {\n\tprivate _square = new Line();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst size = 1;\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(\n\t\t\t\t[-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tthis._square.geometry = geometry;\n\t\tthis._square.material = this._line_material;\n\t\tthis._square.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._square);\n\t}\n\n\t// private _v1 = new Vector3();\n\t// private _v2 = new Vector3();\n\t// private _v3 = new Vector3();\n\tupdate() {\n\t\t// this._v1.copy(this.node.light.position);\n\t\t// this._v2.copy(this.node.light.target.position);\n\t\t// this._v3.subVectors(this._v2, this._v1);\n\n\t\t// this._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\t// this._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\t// this._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {HemisphereLight} from 'three/src/lights/HemisphereLight';\nimport {HemisphereLightHelper} from './utils/helpers/HemisphereLightHelper';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nclass HemisphereLightObjParamsConfig extends NodeParamsConfig {\n\tsky_color = ParamConfig.COLOR([0.2, 0.7, 1]);\n\tground_color = ParamConfig.COLOR([0.1, 0.1, 0.25]);\n\tintensity = ParamConfig.FLOAT(1);\n\tposition = ParamConfig.VECTOR3([0, 1, 0]);\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new HemisphereLightObjParamsConfig();\n\nexport class HemisphereLightObjNode extends TypedLightObjNode<HemisphereLight, HemisphereLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hemisphere_light';\n\t}\n\tprivate _helper_controller = new HelperController<HemisphereLight>(\n\t\tthis,\n\t\t(<unknown>HemisphereLightHelper) as HelperConstructor<HemisphereLight>,\n\t\t'HemisphereLightHelper'\n\t);\n\n\tcreate_light() {\n\t\tconst light = new HemisphereLight();\n\n\t\treturn light;\n\t}\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.sky_color;\n\t\tthis.light.groundColor = this.pv.ground_color;\n\t\tthis.light.position.copy(this.pv.position);\n\t\tthis.light.intensity = this.pv.intensity;\n\n\t\tthis._helper_controller.update();\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {OctahedronBufferGeometry} from 'three/src/geometries/OctahedronGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {VertexColors} from 'three/src/constants';\n\nimport {HemisphereLightObjNode} from '../../HemisphereLight';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {HemisphereLight} from 'three/src/lights/HemisphereLight';\n\nexport class HemisphereLightHelper extends BaseLightHelper<HemisphereLight, HemisphereLightObjNode> {\n\tprivate _geometry = new OctahedronBufferGeometry(1);\n\n\tprotected build_helper() {\n\t\tthis._geometry.rotateZ(Math.PI * 0.5);\n\n\t\tthis._material.vertexColors = VertexColors;\n\n\t\tconst position = this._geometry.getAttribute('position');\n\t\tconst colors = new Float32Array(position.count * 3);\n\n\t\tthis._geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\tthis._object.geometry = this._geometry;\n\t\tthis._object.material = this._material;\n\t}\n\n\t// private _inverse_position = new Vector3();\n\tprivate _quat = new Quaternion();\n\tprivate _default_position = new Vector3(0, 1, 0);\n\tprivate _color1 = new Color();\n\tprivate _color2 = new Color();\n\tupdate() {\n\t\tif (!this.node.pv.position) {\n\t\t\treturn;\n\t\t}\n\t\t// this._inverse_position.copy(this.node.pv.position).multiplyScalar(-1)\n\t\tthis._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\tthis._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\tthis._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tconst colors = this._geometry.getAttribute('color') as BufferAttribute;\n\n\t\tthis._color1.copy(this.node.light.color);\n\t\tthis._color2.copy(this.node.light.groundColor);\n\n\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\tconst color = i < l / 2 ? this._color1 : this._color2;\n\n\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\t}\n}\n","import {PointLight} from 'three/src/lights/PointLight';\nimport {PointLightHelper} from './utils/helpers/PointLightHelper';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\n// import {HelperController} from './utils/HelperController';\nclass PointLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tdecay = ParamConfig.FLOAT(0.1);\n\tdistance = ParamConfig.FLOAT(100);\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024], {visible_if: {cast_shadows: 1}});\n\tshadow_bias = ParamConfig.FLOAT(0.001, {visible_if: {cast_shadows: 1}});\n\tshadow_near = ParamConfig.FLOAT(1, {visible_if: {cast_shadows: 1}});\n\tshadow_far = ParamConfig.FLOAT(100, {visible_if: {cast_shadows: 1}});\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new PointLightObjParamsConfig();\n\nexport class PointLightObjNode extends BaseLightTransformedObjNode<PointLight, PointLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point_light';\n\t}\n\tprivate _helper_controller = new HelperController<PointLight>(\n\t\tthis,\n\t\t(<unknown>PointLightHelper) as HelperConstructor<PointLight>,\n\t\t'PointLightHelper'\n\t);\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new PointLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\treturn light;\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.decay = this.pv.decay;\n\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\tthis.light.shadow.camera.near = this.pv.shadow_near;\n\t\tthis.light.shadow.camera.far = this.pv.shadow_far;\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {PointLightObjNode} from '../../PointLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {PointLight} from 'three/src/lights/PointLight';\n\nexport class PointLightHelper extends BaseLightHelper<PointLight, PointLightObjNode> {\n\tprotected build_helper() {\n\t\tconst size = 1;\n\t\tthis._object.geometry = new SphereBufferGeometry(size, 4, 2);\n\t\tthis._object.material = this._material;\n\t}\n\n\tupdate() {\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\t\tthis._material.color.copy(this.node.light.color);\n\t}\n}\n","import {SpotLight} from 'three/src/lights/SpotLight';\n// import {SpotLightHelper} from 'three/src/helpers/SpotLightHelper';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {SpotLightHelper} from './utils/helpers/SpotLightHelper';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {HelperController} from './utils/HelperController';\nclass SpotLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tangle = ParamConfig.FLOAT(45, {range: [0, 180]});\n\tpenumbra = ParamConfig.FLOAT(0.1);\n\tdecay = ParamConfig.FLOAT(0.1, {range: [0, 1]});\n\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t// target = ParamConfig.OPERATOR_PATH('');\n\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new SpotLightObjParamsConfig();\n\nexport class SpotLightObjNode extends BaseLightTransformedObjNode<SpotLight, SpotLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'spot_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<SpotLight>(\n\t\tthis,\n\t\t(<unknown>SpotLightHelper) as HelperConstructor<SpotLight>,\n\t\t'SpotLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new SpotLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'SpotLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.angle = this.pv.angle * (Math.PI / 180);\n\t\tthis.light.penumbra = this.pv.penumbra;\n\t\tthis.light.decay = this.pv.decay;\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {SpotLightObjNode} from '../../SpotLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {SpotLight} from 'three/src/lights/SpotLight';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n\nexport class SpotLightHelper extends BaseLightHelper<SpotLight, SpotLightObjNode> {\n\tprivate _cone = new LineSegments();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\tconst p1 = (i / l) * Math.PI * 2;\n\t\t\tconst p2 = (j / l) * Math.PI * 2;\n\n\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t}\n\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tthis._cone.geometry = geometry;\n\n\t\tthis._cone.material = this._line_material;\n\t\tthis._cone.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._cone);\n\t}\n\n\tupdate() {\n\t\tconst coneLength = (this.node.light.distance ? this.node.light.distance : 1000) * this.node.pv.helper_size;\n\t\tconst coneWidth = coneLength * Math.tan(this.node.light.angle);\n\n\t\tthis._cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {EventNodeChildrenMap} from '../../poly/registers/Event';\nimport {BaseEventNodeType} from '../event/_Base';\n\nexport class EventsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.EVENT;\n\tstatic type() {\n\t\treturn 'events';\n\t}\n\n\tprotected _children_controller_context = NodeContext.EVENT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as EventNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseEventNodeType[];\n\t}\n\tnodes_by_type<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as EventNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {MatNodeChildrenMap} from '../../poly/registers/Mat';\nimport {BaseMatNodeType} from '../mat/_Base';\n\nexport class MaterialsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MAT;\n\tstatic type() {\n\t\treturn 'materials';\n\t}\n\t// children_context(){ return NodeContext.MAT }\n\n\tprotected _children_controller_context = NodeContext.MAT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as MatNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseMatNodeType[];\n\t}\n\tnodes_by_type<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as MatNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CopNodeChildrenMap} from '../../poly/registers/Cop';\nimport {BaseCopNodeType} from '../cop/_Base';\n\nexport class CopObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'cop';\n\t}\n\t// children_context(){ return NodeContext.COP }\n\n\tprotected _children_controller_context = NodeContext.COP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n\n\tcreate_node<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as CopNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseCopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as CopNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class PostProcessObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'post_process';\n\t}\n\t// children_context(){ return NodeContext.POST }\n\n\tprotected _children_controller_context = NodeContext.POST;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n// const THREE = {Group};\n\n// import {CoreTransform} from '../../../core/Transform';\n\nimport {BaseNodeType} from '../_Base';\nimport {DisplayNodeController} from '../utils/DisplayNodeController';\nimport {NodeContext} from '../../poly/NodeContext';\n\n//import Layers from './Concerns/Layers'\n// import {Transformed} from './Concerns/Transformed';\n\n// sop map\nimport {BaseSopNodeType} from '../sop/_Base';\n// import {PolyScene} from '../../scene/PolyScene';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n\nimport {GeoNodeChildrenMap} from '../../poly/registers/Sop';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass GeoObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tdisplay = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new GeoObjParamConfig();\n\nexport class GeoObjNode extends TypedObjNode<Group, GeoObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'geo';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tprotected _display_node_controller: DisplayNodeController = new DisplayNodeController(this);\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprivate _sop_group = this._create_sop_group();\n\tprivate _create_sop_group() {\n\t\treturn new Group();\n\t}\n\tget sop_group() {\n\t\treturn this._sop_group;\n\t}\n\tset_sop_group_name() {\n\t\tthis._sop_group.name = `${this.full_path()}:sop_group`;\n\t}\n\n\t// children_context() {\n\t// \treturn NodeContext.SOP;\n\t// }\n\n\tprotected _children_controller_context = NodeContext.SOP;\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tprivate _on_child_add_bound = this._on_child_add.bind(this);\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add_bound);\n\n\t\tthis.display_node_controller.initialize_node();\n\t\tthis.transform_controller.initialize_node();\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active);\n\t\t// });\n\n\t\tthis.object.add(this.sop_group);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_sop_group_name.bind(this));\n\t\tthis._create_sop_group();\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.outputs.set_has_one_output();\n\t}\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\t//base_layers_included: -> false\n\n\t// create_params() {\n\t// \t// CoreTransform.create_params(this);\n\t// }\n\t//this.create_layers_params()\n\n\trequest_display_node() {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: typescript\n\t\t// if (this.is_displayed)\n\t\t// \tconst display_node = this.display_node();\n\t\t// \tif (display_node) {\n\t\t// \t\tdisplay_node.request_container_p().then(async (container) => {\n\t\t// \t\t\tif (!this._sop_loaded) {\n\t\t// \t\t\t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._sop_loaded = true;\n\n\t\t// \t\t\tconst update_needed = await this.display_node_objects_changed(container);\n\t\t// \t\t\tif (update_needed) {\n\t\t// \t\t\t\tthis.remove_display_node_group();\n\t\t// \t\t\t\tawait this.add_display_node_group(container);\n\t\t// \t\t\t}\n\t\t// \t\t\t// this.set_needsUpdate(container)\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\tthis._sop_loaded = true;\n\t\t// \t}\n\t\t// }\n\t}\n\n\tis_display_node_cooking(): boolean {\n\t\tif (this.flags.display.active) {\n\t\t\tconst display_node = this._display_node_controller.display_node;\n\t\t\treturn display_node ? display_node.is_dirty : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcreate_node<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GeoNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseSopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GeoNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// HOOK\n\t//\n\t//\n\t_on_create() {\n\t\tthis.create_node('text');\n\t}\n\t_on_child_add(node: BaseNodeType) {\n\t\tif (this.scene.loading_controller.loaded) {\n\t\t\tif (this.children().length == 1) {\n\t\t\t\tnode.flags?.display?.set(true);\n\t\t\t}\n\t\t}\n\t}\n\t// post_display_flag_node_set_dirty() {\n\t// \tthis.request_display_node();\n\t// }\n\n\t//\n\t//\n\t// COOK\n\t//\n\t//\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\t//this.update_layers()\n\n\t\tthis.object.visible = this.pv.display;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {GeoObjNode} from '../obj/Geo';\nimport {BaseSopNodeType} from '../sop/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class DisplayNodeController {\n\t_graph_node: CoreGraphNode;\n\t_display_node: BaseSopNodeType | undefined;\n\t_children_uuids_dict: Dictionary<boolean> = {};\n\t_children_length: number = 0;\n\tprivate _request_display_node_container_bound = this.request_display_node_container.bind(this);\n\tconstructor(protected node: GeoObjNode) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'DisplayNodeController');\n\n\t\tthis._graph_node.dirty_controller.add_post_dirty_hook(\n\t\t\t'_request_display_node_container',\n\t\t\tthis._request_display_node_container_bound\n\t\t);\n\t}\n\n\tget display_node() {\n\t\treturn this._display_node;\n\t}\n\tprivate _parent_object: Object3D | undefined;\n\tset_parent_object(object: Object3D) {\n\t\tthis._parent_object = object;\n\t}\n\tget parent_object() {\n\t\treturn this._parent_object || this.node.object;\n\t}\n\n\tinitialize_node() {\n\t\tthis.set_parent_object(this.node.sop_group);\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.node.sop_group.visible = this.used_in_scene;\n\t\t\tif (this.node.flags.display.active) {\n\t\t\t\tthis.request_display_node_container();\n\t\t\t}\n\t\t});\n\n\t\tthis.node.lifecycle.add_on_child_add_hook((child_node) => {\n\t\t\tif (!this._display_node) {\n\t\t\t\tchild_node.flags?.display?.set(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync set_display_node(new_display_node: BaseSopNodeType) {\n\t\tif (this._display_node != new_display_node) {\n\t\t\tconst old_display_node = this._display_node;\n\t\t\tif (old_display_node) {\n\t\t\t\told_display_node.flags.display.set(false);\n\t\t\t\tthis._graph_node.remove_graph_input(old_display_node);\n\t\t\t\tthis.remove_children();\n\t\t\t}\n\t\t\tthis._display_node = new_display_node;\n\t\t\tif (this._display_node) {\n\t\t\t\tthis._graph_node.add_graph_input(this._display_node);\n\t\t\t}\n\t\t\tthis.request_display_node_container();\n\t\t}\n\t}\n\n\tremove_children() {\n\t\tlet child: Object3D | undefined;\n\t\twhile ((child = this.parent_object.children.pop())) {\n\t\t\tthis.parent_object.remove(child);\n\t\t}\n\t}\n\n\tget used_in_scene() {\n\t\treturn this.node.used_in_scene && this.node.flags.display.active && this.node.pv.display == true;\n\t}\n\n\tprivate async request_display_node_container() {\n\t\tif (!this.node.scene.loading_controller.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.used_in_scene) {\n\t\t\tif (this._display_node) {\n\t\t\t\tconst container = await this._display_node.request_container();\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\t// check if the new objects are different\n\t\t\t\t\tconst new_objects = core_group.objects();\n\t\t\t\t\tlet new_objects_are_different = new_objects.length != this._children_length;\n\t\t\t\t\tif (!new_objects_are_different) {\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tif (!(object.uuid in this._children_uuids_dict)) {\n\t\t\t\t\t\t\t\tnew_objects_are_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update hierarchy if different\n\t\t\t\t\tif (new_objects_are_different) {\n\t\t\t\t\t\tthis.remove_children();\n\t\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tthis.parent_object.add(object);\n\t\t\t\t\t\t\tthis._children_uuids_dict[object.uuid] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._children_length = new_objects.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.remove_children();\n\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\tthis._children_length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n// import {CoreTransform} from '../../../core/Transform';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {AxesHelper} from 'three/src/helpers/AxesHelper';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass NullObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\nconst ParamsConfig = new NullObjParamConfig();\n\nexport class NullObjNode extends TypedObjNode<Group, NullObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tprivate _helper = new AxesHelper(1);\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\tinitialize_node() {\n\t\tthis.transform_controller.initialize_node();\n\t\tthis.object.add(this._helper);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis._helper.visible = this.flags.display.active;\n\t\t});\n\t}\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {BaseNode} from '../_Base';\nimport {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {FogExp2} from 'three/src/scenes/FogExp2';\nimport {Fog} from 'three/src/scenes/Fog';\nimport {Color} from 'three/src/math/Color';\n\nconst DEFAULT = {\n\tcolor: new Color(1, 1, 1),\n\tnear: 0,\n\tfar: 100,\n\tdensity: 0.00025,\n};\n\n// export Fog = (function() {\n// \tlet DEFAULT = undefined;\n// \tFog = class Fog extends BaseModules {\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {FlagsControllerD} from '../utils/FlagsController';\nclass FogObjParamConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR(DEFAULT.color.toArray() as [number, number, number]);\n\texponential = ParamConfig.BOOLEAN(0);\n\tdensity = ParamConfig.FLOAT(1);\n\tnear = ParamConfig.FLOAT(0, {range: [0, 100]});\n\tfar = ParamConfig.FLOAT(100, {range: [0, 100]});\n}\nconst ParamsConfig = new FogObjParamConfig();\nexport class FogObjNode extends TypedObjNode<Object3D, FogObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\n\tprotected _linear_fog!: Fog;\n\tprotected _linear_fogexp2!: FogExp2;\n\n\tinitialize_node() {\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_dirtyable_hook();\n\n\t\tthis._linear_fog = new Fog(DEFAULT.color.getHex(), DEFAULT.near, DEFAULT.far);\n\t\tthis._linear_fogexp2 = new FogExp2(DEFAULT.color.getHex(), DEFAULT.density);\n\t}\n\tstatic type() {\n\t\treturn 'fog';\n\t}\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', DEFAULT.color.toArray() as [number, number, number]);\n\t// \tthis.add_param(ParamType.BOOLEAN, 'exponential', 0);\n\t// \tthis.add_param(ParamType.FLOAT, 'density', DEFAULT.density);\n\t// \tthis.add_param(ParamType.FLOAT, 'near', DEFAULT.near, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// \tthis.add_param(ParamType.FLOAT, 'far', DEFAULT.far, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// }\n\n\t// get_fog: (callback)->\n\t// \tthis.param('exponential').eval (val)=>\n\t// \t\tfog = if val then @_exponential_fog else @_linear_fog\n\t// \t\tcallback(fog)\n\n\tcook() {\n\t\tlet fog: Fog | FogExp2;\n\t\tif (this.pv.exponential) {\n\t\t\tthis._linear_fogexp2.density = this.pv.density;\n\t\t\tfog = this._linear_fogexp2;\n\t\t} else {\n\t\t\tthis._linear_fog.near = this.pv.near;\n\t\t\tthis._linear_fog.far = this.pv.far; // * (1/@_param_intensity)\n\t\t\tfog = this._linear_fog;\n\t\t}\n\n\t\tfog.color.copy(this.pv.color);\n\n\t\tthis.scene.display_scene.fog = fog;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {Vector2} from 'three/src/math/Vector2';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\n// import {Group} from 'three/src/objects/Group';\n// import {CameraHelper} from 'three/src/helpers/CameraHelper';\n// import lodash_clamp from 'lodash/clamp';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\n\nimport {OrthographicCameraBackgroundController} from './utils/cameras/background/OrthographicCameraController';\n// import {ParamType} from '../../poly/ParamType';\n\nconst DEFAULT = {\n\tleft: -0.5,\n\tright: 0.5,\n\ttop: 0.5,\n\tbottom: -0.5,\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function OrthographicCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\t// vertical_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t\t// horizontal_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t};\n}\n\nclass OrthographicCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(OrthographicCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new OrthographicCameraObjParamConfig();\n\nexport class OrthographicCameraObjNode extends TypedCameraObjNode<\n\tOrthographicCamera,\n\tOrthographicCameraObjParamConfig\n> {\n\tparams_config = ParamsConfig;\n\n\tprotected get background_controller_constructor() {\n\t\treturn OrthographicCameraBackgroundController;\n\t}\n\n\tstatic type() {\n\t\treturn 'orthographic_camera';\n\t}\n\n\tcreate_object() {\n\t\treturn new OrthographicCamera(\n\t\t\tDEFAULT.left * 2,\n\t\t\tDEFAULT.right * 2,\n\t\t\tDEFAULT.top * 2,\n\t\t\tDEFAULT.bottom * 2,\n\t\t\tBASE_CAMERA_DEFAULT.near,\n\t\t\tBASE_CAMERA_DEFAULT.far\n\t\t);\n\t}\n\t//@_helper = new CameraHelper( @_camera )\n\t//group = new Group()\n\t//group.add(@_camera)\n\t//group.add(@_helper)\n\n\t//this.set_object(@_camera)\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.add_param('float', 'left', DEFAULT.left)\n\t// \t// this.add_param('float', 'right', DEFAULT.right)\n\t// \t// this.add_param('float', 'top', DEFAULT.top)\n\t// \t// this.add_param('float', 'bottom', DEFAULT.bottom)\n\n\t// \t// this.within_param_folder('render', () => {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 2, {range: [0, 10]});\n\t// \t// left : Number, right : Number, top : Number, bottom : Number, near : Number, far : Number\n\t// \tthis.add_param(ParamType.VECTOR2, 'vertical_size_range', [0, 10], {visible_if: {lock_width: 1}});\n\t// \tthis.add_param(ParamType.VECTOR2, 'horizontal_size_range', [0, 10], {visible_if: {lock_width: 0}});\n\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\tconst size = this.pv.size || 1;\n\t\t\t// let lock_width = this.pv.lock_width;\n\t\t\t// if (lock_width == null) {\n\t\t\t// \tlock_width = true;\n\t\t\t// }\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst vertical_size = size / this._aspect;\n\t\t\t// \tconst zoom = 1 //this.get_zoom(vertical_size, this.pv.vertical_size_range);\n\t\t\t// \tthis._object.left = DEFAULT.left * size * zoom;\n\t\t\t// \tthis._object.right = DEFAULT.right * size * zoom;\n\t\t\t// \tthis._object.top = DEFAULT.top * vertical_size * zoom;\n\t\t\t// \tthis._object.bottom = DEFAULT.bottom * vertical_size * zoom;\n\t\t\t// } else {\n\t\t\tconst horizontal_size = size * this._aspect;\n\t\t\tconst zoom = 1; //this.get_zoom(horizontal_size, this.pv.horizontal_size_range);\n\t\t\tthis._object.left = DEFAULT.left * horizontal_size * zoom;\n\t\t\tthis._object.right = DEFAULT.right * horizontal_size * zoom;\n\t\t\tthis._object.top = DEFAULT.top * size * zoom;\n\t\t\tthis._object.bottom = DEFAULT.bottom * size * zoom;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\n\t// private get_zoom(size: number, range: Vector2) {\n\t// \tlet zoom = 1;\n\t// \tif (range) {\n\t// \t\tif (size < range.x || size > range.y) {\n\t// \t\t\tconst new_size = lodash_clamp(size, range.x, range.y);\n\t// \t\t\tzoom = new_size / size;\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {BaseCameraControlsEventNodeType, CameraControls} from '../../../event/_BaseCameraControls';\nimport {CameraControlsConfig} from '../../../event/utils/CameraControlConfig';\nimport {BaseParamType} from '../../../../params/_Base';\nimport {CameraOrbitControlsEventNode} from '../../../event/CameraOrbitControls';\n\nconst CONTROLS_PARAM_NAME = 'controls';\n\nexport class ControlsController {\n\t_applied_controls_by_element_id: Dictionary<Dictionary<boolean>> = {};\n\tprivate _controls_node: BaseCameraControlsEventNodeType | null = null;\n\tprivate controls_start_listener: (() => void) | undefined;\n\tprivate controls_end_listener: (() => void) | undefined;\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\tcontrols_param(): BaseParamType | null {\n\t\tif (this.node.params.has(CONTROLS_PARAM_NAME)) {\n\t\t\treturn this.node.params.get(CONTROLS_PARAM_NAME);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync controls_node(): Promise<BaseCameraControlsEventNodeType | null> {\n\t\tconst controls_param = this.node.p.controls;\n\t\tconst raw_input = controls_param.raw_input;\n\t\tif (raw_input && raw_input != '') {\n\t\t\tif (controls_param.is_dirty) {\n\t\t\t\tawait controls_param.compute();\n\t\t\t}\n\t\t\tconst node = controls_param.found_node();\n\t\t\tif (node) {\n\t\t\t\tif (node instanceof CameraOrbitControlsEventNode) {\n\t\t\t\t\treturn node;\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('found node is not of a camera control type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set('no node has been found');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync update_controls() {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\tif (this._controls_node != controls_node) {\n\t\t\t\tthis.dispose_control_refs();\n\t\t\t}\n\t\t}\n\n\t\tthis._controls_node = controls_node;\n\t}\n\n\tasync apply_controls(html_element: HTMLElement) {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\t// keep last_control_node_id to ensure we don't apply the controls more than once\n\t\t\t// OR it allow the viewer to remain in control of this\n\t\t\t//if !@_last_control_node_id? || (@_last_control_node_id != controls_node.graph_node_id)\n\t\t\t// but for now, the controls are still applied again after mouse up\n\t\t\tconst controls_id = controls_node.controls_id();\n\t\t\tlet controls_aleady_applied = false;\n\t\t\tif (\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] &&\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t\t) {\n\t\t\t\tcontrols_aleady_applied = true;\n\t\t\t}\n\t\t\tif (!controls_aleady_applied) {\n\t\t\t\t// this._last_control_node_id = controls_id;\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] =\n\t\t\t\t\tthis._applied_controls_by_element_id[html_element.id] || {};\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id] = true;\n\n\t\t\t\t// request_container forces a cook\n\t\t\t\t//controls_node.request_container (controls_container)=>\n\t\t\t\tconst controls = await controls_node.apply_controls(this.node.object, html_element);\n\t\t\t\tconst config = new CameraControlsConfig(this.node.graph_node_id, controls_node, controls);\n\t\t\t\tcontrols_node.set_from_camera_node(controls, this.node);\n\t\t\t\tthis.set_controls_events(controls);\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\tdispose_control_refs() {\n\t\tthis._applied_controls_by_element_id = {};\n\t}\n\n\t// calling dispose controls\n\t// ensure that we can set the camera menu to camera1, then camera2 and back to camera1\n\t// and controls will be cleared each time\n\tasync dispose_controls(html_element: HTMLElement) {\n\t\tdelete this._applied_controls_by_element_id[html_element.id];\n\t\t// if (this._applied_controls_by_element_id[html_element.id]) {\n\t\t// \tconst controls_node = await this.controls_node();\n\t\t// \tif (controls_node) {\n\t\t// \t\tconst controls_id = controls_node.controls_id();\n\t\t// \t\tdelete this._applied_controls_by_element_id[html_element.id][controls_id];\n\t\t// \t}\n\t\t// }\n\t\t// @_controls_node?.dispose_controls()\n\t\t// if(this._applied_controls_by_element_id[html_element.id]){\n\t\t// \tdelete this._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t// }\n\t\t// this._last_control_node_id = null\n\t}\n\tset_controls_events(controls: CameraControls) {\n\t\t// restore target (for orbit controls only for now)\n\t\t// to ensure that camera does not reset its target on 0,0,0 on first move\n\t\t// const controls_node = this.controls_node()\n\t\t// if (controls_node){\n\t\t// \tcontrols_node.\n\t\t// }\n\t\t// if(controls.target){\n\t\t// \tcontrols.target.copy(this._param_target) //.clone()\n\t\t// }\n\n\t\tthis.controls_start_listener = () => {\n\t\t\tthis.on_controls_start(controls);\n\t\t};\n\t\tthis.controls_end_listener = () => {\n\t\t\tthis.on_controls_end(controls);\n\t\t};\n\t\tcontrols.addEventListener('start', this.controls_start_listener);\n\t\tcontrols.addEventListener('end', this.controls_end_listener);\n\t}\n\n\ton_controls_start(controls: CameraControls) {\n\t\t// this.param('is_updating').set(1)\n\t}\n\ton_controls_end(controls: CameraControls) {\n\t\t// this.param('is_updating').set(0)\n\t\tif (controls.target) {\n\t\t\tconst val = controls.target.toArray() as [number, number, number];\n\t\t\tthis.node.params.set_vector3('target', val);\n\t\t}\n\t\tthis.node.update_transform_params_from_object();\n\t}\n}\n","import {BaseCameraControlsEventNodeType, CameraControls} from '../_BaseCameraControls';\n\nexport class CameraControlsConfig {\n\tconstructor(\n\t\tprivate _camera_node_id: string,\n\t\tprivate _controls_node: BaseCameraControlsEventNodeType,\n\t\tprivate _controls: CameraControls\n\t) {}\n\n\tget camera_node_id() {\n\t\treturn this._camera_node_id;\n\t}\n\t// camera_controls_node_id(){\n\t// \treturn this._camera_controls_node_id\n\t// }\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\tget controls_node() {\n\t\treturn this._controls_node;\n\t}\n\n\tis_equal(other_config: CameraControlsConfig): boolean {\n\t\treturn (\n\t\t\tother_config.camera_node_id == this._camera_node_id &&\n\t\t\tother_config.controls_node.graph_node_id == this._controls_node.graph_node_id\n\t\t);\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer'\n// import {Color} from 'three/src/math/Color'\n\nimport {BaseViewer} from './_Base';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import 'src/engine/Poly';\n// import {POLY} from '../Poly';\n\nconst CSS_CLASS = 'CoreThreejsViewer';\n\ndeclare global {\n\tinterface HTMLCanvasElement {\n\t\tonwebglcontextlost: () => void;\n\t\tonwebglcontextrestored: () => void;\n\t}\n}\n\nexport class ThreejsViewer extends BaseViewer {\n\tprivate _request_animation_frame_id: number | undefined;\n\tprivate do_render: boolean = true;\n\n\tprivate _animate_method: () => void = this.animate.bind(this);\n\n\tconstructor(_container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tsuper(_container, _scene, camera_node);\n\n\t\tthis._canvas = document.createElement('canvas');\n\t\tthis._canvas.id = `canvas_id_${Math.random()}`.replace('.', '_');\n\t\tthis._canvas.style.display = 'block';\n\t\tthis._canvas.style.outline = 'none';\n\n\t\tthis._container.appendChild(this._canvas);\n\t\tthis._container.classList.add(CSS_CLASS);\n\t\tthis._container.style.height = '100%';\n\n\t\tthis._set_events();\n\t}\n\n\tpublic _build() {\n\t\tthis._init_display();\n\t\tthis.activate();\n\t}\n\n\tdispose() {\n\t\tthis._cancel_animate();\n\t\tthis.controls_controller.dispose_controls();\n\t\t// this._dispose_graph_node()\n\t}\n\n\tprivate _set_events() {\n\t\tthis.events_controller.init();\n\t\tthis.webgl_controller.init();\n\n\t\t// if (POLY.player_mode()) {\n\t\twindow.onresize = () => {\n\t\t\tthis.cameras_controller.on_resize();\n\t\t};\n\t\t// }\n\t}\n\t// protected _on_touchmove(event: TouchEvent){\n\t// \tconsole.log(\"touch\", event)\n\t// }\n\n\tprivate _init_display() {\n\t\tif (!this._canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cameras_controller.compute_size_and_aspect();\n\t\tconst size: Vector2 = this.cameras_controller.size;\n\n\t\tthis.cameras_controller.camera_node?.post_process_controller.create_renderer(this._canvas, size);\n\t\t// this.canvas_context = canvas.getContext('2d')\n\n\t\t// init renderer\n\t\t// @renderer = new THREE.WebGLRenderer\n\t\t// \tcanvas: canvas\n\t\t// \tantialias: true\n\t\t// \talpha: true\n\n\t\t// @renderer.shadowMap.enabled = true\n\t\t// this.compute_size_and_aspect()\n\n\t\t//\n\t\t// https://stackoverflow.com/questions/31407778/display-scene-at-lower-resolution-in-three-js\n\t\t// TODO: this article mentions that setSize should be called after\n\t\t// @renderer.setSize(this._size[0], this._size[1])\n\t\t// @renderer.setPixelRatio(window.devicePixelRatio)\n\t\t// @renderer.setSize(size[0]*1.5, size[1]*1.5)\n\t\t// canvas.width = \"//{size[0]}px\"\n\t\t// canvas.height = \"//{size[1]}px\"\n\t\t// canvas.style.width = \"//{size[0]}px\"\n\t\t// canvas.style.height = \"//{size[1]}px\"\n\n\t\t// TODO: ensure the renderers get added to a list\n\t\t//if !this.player_mode\n\t\t//\tconsole.log(\"set window.viewer_renderer from Threejs.vue component\")\n\t\t// window.viewer_renderer = @renderer\n\t\t// POLY.renderers_controller.register_renderer(@renderer)\n\n\t\t//this._init_webgl_utils()\n\n\t\t// init scene\n\t\t// @display_scene.background = new THREE.Color(\"//111\")\n\n\t\t//window.display_scene = @display_scene\n\n\t\t// this._init_ray_helper(); // TODO: typescript\n\n\t\t//@cam_animation_helper = new CameraAnimationHelper(@ray_helper, @event_helper)\n\n\t\tthis.cameras_controller.prepare_current_camera();\n\t\t// this._add_helpers_to_scene()\n\n\t\tthis.animate();\n\t}\n\n\tanimate() {\n\t\tif (this.do_render) {\n\t\t\tthis.render();\n\t\t\t// this.update_stats()\n\t\t\t// this._controls?.update(false)\n\n\t\t\t// @_renders_count ?= 0\n\t\t\t// @_renders_count += 1\n\t\t\t// if @_renders_count < 6\n\t\t\tthis._request_animation_frame_id = requestAnimationFrame(this._animate_method);\n\t\t}\n\t}\n\n\tprivate _cancel_animate() {\n\t\tthis.do_render = false;\n\t\tif (this._request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this._request_animation_frame_id);\n\t\t}\n\t\tif (this._canvas) {\n\t\t\tthis.cameras_controller.camera_node?.post_process_controller.delete_renderer(this._canvas);\n\t\t}\n\t\t// POLY.renderers_controller.deregister_renderer(@renderer)\n\t\t// this.dispose_camera()\n\t}\n\n\trender() {\n\t\tif (this.cameras_controller.camera_node && this._canvas) {\n\t\t\tconst size = this.cameras_controller.size;\n\t\t\tconst aspect = this.cameras_controller.aspect;\n\t\t\tthis.cameras_controller.camera_node.post_process_controller.render(this._canvas, size, aspect);\n\n\t\t\t// TODO: typescript\n\t\t\tthis._controls_controller?.update();\n\n\t\t\t// TODO: typescript\n\t\t\t// if (this._capturer) {\n\t\t\t// \tthis._capturer.perform_capture();\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn('no camera to render with');\n\t\t}\n\t}\n}\n","import {Scene} from 'three/src/scenes/Scene';\nimport {PolyScene} from '../scene/PolyScene';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import {CameraMixin} from './concerns/Camera';\n// import {Capturer} from './concerns/Capturer';\n// import {ContainerClass} from './concerns/ContainerClass';\n// import {Controls} from './concerns/Controls';\n// import {PickerForViewer} from './concerns/Picker';\n\nimport {CamerasController} from './utils/CamerasController';\nimport {ControlsController} from './utils/ControlsController';\nimport {EventsController} from './utils/EventsController';\nimport {WebGLController} from './utils/WebglController';\n\n// class AbstractViewer {}\n\nconst HOVERED_CLASS_NAME = 'hovered';\n\nexport abstract class BaseViewer {\n\tprotected _display_scene: Scene;\n\tprotected _canvas: HTMLCanvasElement | undefined;\n\tprotected _active: boolean = false;\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tactivate() {\n\t\tthis._active = true;\n\t}\n\tdeactivate() {\n\t\tthis._active = false;\n\t}\n\n\tprotected _cameras_controller: CamerasController | undefined;\n\tget cameras_controller() {\n\t\treturn (this._cameras_controller = this._cameras_controller || new CamerasController(this));\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller() {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\tprotected _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController(this));\n\t}\n\n\tconstructor(protected _container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tthis._display_scene = this._scene.display_scene;\n\t\tthis._init_from_scene(camera_node).then(() => {\n\t\t\tthis._build();\n\t\t});\n\t}\n\tget container() {\n\t\treturn this._container;\n\t}\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget canvas() {\n\t\treturn this._canvas;\n\t}\n\n\tprivate async _init_from_scene(camera_node: BaseCameraObjNodeType) {\n\t\tawait this.cameras_controller.set_camera_node(camera_node || this._scene.cameras_controller.master_camera_node);\n\t\t// await this.update_picker_nodes(); // TODO: typescript\n\t}\n\tprotected abstract _build(): void;\n\n\t// html container class\n\treset_container_class() {\n\t\tthis.container.classList.remove(HOVERED_CLASS_NAME);\n\t}\n\tset_container_class_hovered() {\n\t\tthis.container.classList.add(HOVERED_CLASS_NAME);\n\t}\n}\n","// import {Camera} from 'three/src/cameras/Camera';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\nimport {BaseViewer} from '../_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class CamerasController {\n\t// private _is_active: boolean = false;\n\tprivate _camera_node: BaseCameraObjNodeType | null = null;\n\t// private _camera: Camera;\n\n\tprivate _size: Vector2 = new Vector2(100, 100);\n\tprivate _aspect: number = 1;\n\t// private current_camera_controls_node_graph_id: number = null;\n\n\tconstructor(private viewer: BaseViewer) {}\n\n\t// activate() {\n\t// \tthis._is_active = true;\n\t// }\n\tasync set_camera_node(camera_node: BaseCameraObjNodeType) {\n\t\tif (!this._camera_node || camera_node.graph_node_id != this._camera_node.graph_node_id) {\n\t\t\tthis._camera_node = camera_node;\n\t\t\t// this._camera = camera_node.object;\n\t\t\tthis._update_graph_node();\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t}\n\t}\n\tprivate _graph_node: CoreGraphNode | undefined;\n\tprivate _update_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn;\n\t\t}\n\t\tconst controls_param = this._camera_node.params.get_operator_path('controls');\n\t\tif (!controls_param) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node = this._graph_node || this._create_graph_node();\n\t\tif (!this._graph_node) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node.graph_disconnect_predecessors();\n\t\tthis._graph_node.add_graph_input(controls_param);\n\t}\n\tprivate _create_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst node = new CoreGraphNode(this._camera_node.scene, 'viewer-controls');\n\t\tnode.add_post_dirty_hook('this.viewer.controls_controller', async () => {\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t});\n\t\treturn node;\n\t}\n\n\tget camera_node() {\n\t\treturn this._camera_node;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\tget aspect() {\n\t\treturn this._aspect;\n\t}\n\n\ton_resize() {\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.compute_size_and_aspect();\n\t\tthis._camera_node?.post_process_controller.set_renderer_size(this.viewer.canvas, this._size);\n\t\tthis.update_camera_aspect();\n\t}\n\tcompute_size_and_aspect() {\n\t\tthis._update_size();\n\t\tthis._camera_node?.scene.uniforms_controller.update_resolution_dependent_uniform_owners(this._size);\n\t\tthis._aspect = this._get_aspect();\n\t}\n\n\tprivate _update_size() {\n\t\tthis._size.x = this.viewer.container.offsetWidth;\n\t\tthis._size.y = this.viewer.container.offsetHeight;\n\t}\n\tprivate _get_aspect(): number {\n\t\treturn this._size.x / this._size.y;\n\t}\n\n\tupdate_camera_aspect() {\n\t\tthis._camera_node?.setup_for_aspect_ratio(this._aspect);\n\t}\n\t// dispose_camera: ->\n\t// \tthis.$emit('before_controls_apply', null)\n\t// \t// if @_controls?\n\t// \t// \t@_controls.dispose()\n\t// \t// camera_graph_node_id ?= this.current_camera_node_graph_id\n\t// \t// camera_node = this.$store.scene.graph().node_from_id(camera_graph_node_id)\n\t// \t// this.current_camera_node.dipose_controls()\n\t// \t//if this.current_camera_node?\n\t// \t//\tthis.current_camera_node.dispose_controls()\n\tasync prepare_current_camera() {\n\t\tif (this._camera_node) {\n\t\t\t// we dispose the controls first, so they can be applied\n\t\t\t// if they were not disposed properly when we closed the viewer\n\t\t\t// but I'm now trying in the destroyed callback\n\t\t\t//this.current_camera_node.dispose_controls()\n\n\t\t\t//this.current_camera_node.apply_controls()\n\t\t\t//this.current_camera_node.prepare_for_viewer(this.aspect())\n\t\t\t// const name = this.current_camera_node.name()\n\t\t\t// const graph_node_id = this._camera_node.graph_node_id\n\t\t\t/*const container = */ await this._camera_node.request_container(); // ensure the camera is cooked\n\t\t\tawait this._update_from_camera_container(); //container, graph_node_id)\n\t\t}\n\t}\n\t// remove_cloned_camera: ->\n\t// \tif @_current_camera?\n\t// \t\t@_current_camera.camera_source.node.remove_clone(@_current_camera)\n\n\tasync _update_from_camera_container() {\n\t\t//container, graph_node_id:number){\n\t\t// ensure that we get the same as we requested\n\t\t// if(graph_node_id == this._camera_node.graph_node_id){\n\n\t\t// this.remove_cloned_camera()\n\t\t// cloned_camera = this.current_camera_node.clone_camera()\n\t\t// @_current_camera = cloned_camera\n\t\tthis.update_camera_aspect();\n\n\t\t//this.dispose_camera()\n\n\t\t// @_is_active is use to check if the component has been destroyed\n\t\t// which can happen on app load, but also when user switches the camera menu\n\n\t\t// if this.current_camera_controls_node_graph_id == null || ()\n\n\t\t// if(@_is_active == true)\n\t\tawait this.viewer.controls_controller.create_controls();\n\n\t\t// }\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {CameraControls} from '../../nodes/event/_BaseCameraControls';\n\nexport class ControlsController {\n\tprotected _active: boolean = false;\n\tprotected _controls: CameraControls | null = null;\n\t_bound_on_controls_start: () => void = this._on_controls_start.bind(this);\n\t_bound_on_controls_end: () => void = this._on_controls_end.bind(this);\n\tconstructor(private viewer: BaseViewer) {}\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\n\tasync create_controls() {\n\t\tthis.dispose_controls();\n\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = await this.camera_node?.controls_controller.apply_controls(this.viewer.canvas);\n\t\tif (config) {\n\t\t\t// this.current_camera_controls_node_graph_id = config.camera_controls_node_id()\n\t\t\tthis._controls = config.controls;\n\t\t\t// this._controls_node = config.controls_node()\n\n\t\t\tif (this._controls) {\n\t\t\t\tif (this.viewer.active) {\n\t\t\t\t\tthis._controls.addEventListener('start', this._bound_on_controls_start);\n\t\t\t\t\tthis._controls.addEventListener('end', this._bound_on_controls_end);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dispose_controls();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// test in case @_is_active has changed\n\t\t\t// if (this._is_active != true && this._controls){\n\t\t\t// \tthis._dispose_controls()\n\n\t\t\t// }\n\t\t\t// TODO\n\t\t\t// we have to reassign the camera here, as this method is called twice\n\t\t\t// and the first time without the controls being present apparently.. (more tests needed)\n\t\t\t// CURRENT ANSWER: the method this.prepare_current_camera() is called twice on app load\n\t\t\t// which only cause problems when switching back to perspective.\n\t\t\t// @_current_camera = cloned_camera\n\t\t\t//@_controls = controls\n\t\t\t// this.$emit('before_controls_apply', controls)\n\t\t}\n\t}\n\tupdate() {\n\t\tif (this._controls) {\n\t\t\tthis._controls.update();\n\t\t}\n\t}\n\n\tdispose_controls() {\n\t\tif (this._controls) {\n\t\t\tif (this.viewer.canvas) {\n\t\t\t\tthis.camera_node?.controls_controller.dispose_controls(this.viewer.canvas);\n\t\t\t}\n\n\t\t\tif (this._bound_on_controls_start) {\n\t\t\t\tthis._controls.removeEventListener('start', this._bound_on_controls_start);\n\t\t\t}\n\t\t\tif (this._bound_on_controls_end) {\n\t\t\t\tthis._controls.removeEventListener('end', this._bound_on_controls_end);\n\t\t\t}\n\n\t\t\tthis._controls.dispose();\n\t\t\tthis._controls = null;\n\t\t}\n\t}\n\tprivate _on_controls_start() {\n\t\tthis._active = true;\n\t}\n\tprivate _on_controls_end() {\n\t\tthis._active = false;\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {Vector2} from 'three/src/math/Vector2';\n\nconst DIST_UNINITIALIZED = -1;\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype MouseOrTouchEventCallback = (e: MouseOrTouchEvent) => void;\n\nexport class EventsController {\n\tprivate _mousedown_pos = new Vector2();\n\tprivate _mouse_distance_travelled: number = DIST_UNINITIALIZED;\n\tprotected _bound_on_mousedown: MouseOrTouchEventCallback = this._on_mousedown.bind(this);\n\tprotected _bound_on_mousemove: MouseOrTouchEventCallback = this._on_mousemove.bind(this);\n\tprotected _bound_on_mouseup: MouseOrTouchEventCallback = this._on_mouseup.bind(this);\n\t// protected _bound_on_click: MouseEventCallback\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget canvas() {\n\t\treturn this.viewer.canvas;\n\t}\n\n\tinit() {\n\t\tif (!this.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._bound_on_mousedown) {\n\t\t\tthis.canvas.removeEventListener('mousedown', this._bound_on_mousedown);\n\t\t}\n\t\tif (this._bound_on_mousemove) {\n\t\t\tthis.canvas.removeEventListener('mousemove', this._bound_on_mousemove);\n\t\t}\n\t\tif (this._bound_on_mouseup) {\n\t\t\tthis.canvas.removeEventListener('mouseup', this._bound_on_mouseup);\n\t\t}\n\t\tthis._bound_on_mousedown = this._bound_on_mousedown || this._on_mousedown.bind(this);\n\t\tthis._bound_on_mousemove = this._bound_on_mousemove || this._on_mousemove.bind(this);\n\t\tthis._bound_on_mouseup = this._bound_on_mouseup || this._on_mouseup.bind(this);\n\n\t\tthis.canvas.addEventListener('mousedown', this._bound_on_mousedown);\n\t\tthis.canvas.addEventListener('mousemove', this._bound_on_mousemove);\n\t\tthis.canvas.addEventListener('mouseup', this._bound_on_mouseup);\n\n\t\t// this._bound_on_touchmove = this._bound_on_touchmove || this._on_touchmove.bind(this)\n\t\tthis.canvas.addEventListener('touchstart', this._bound_on_mousedown, false);\n\t\tthis.canvas.addEventListener('touchmove', this._bound_on_mousemove, false);\n\t\tthis.canvas.addEventListener('touchend', this._bound_on_mouseup, false);\n\t\tthis.canvas.addEventListener('touchcancel', this._bound_on_mouseup, false);\n\t}\n\n\tprotected _on_mousedown(event: MouseOrTouchEvent) {\n\t\tthis._mouse_distance_travelled = 0;\n\t\tif (event instanceof MouseEvent) {\n\t\t\tthis._mousedown_pos.x = event.pageX;\n\t\t\tthis._mousedown_pos.y = event.pageY;\n\t\t} else {\n\t\t\tconst touch = event.touches[0];\n\t\t\tthis._mousedown_pos.x = touch.pageX;\n\t\t\tthis._mousedown_pos.y = touch.pageY;\n\t\t}\n\t}\n\n\tprotected _on_mousemove(event: MouseOrTouchEvent) {\n\t\tif (this._mouse_distance_travelled !== DIST_UNINITIALIZED) {\n\t\t\tlet distance: number = 0;\n\t\t\tif (event instanceof MouseEvent) {\n\t\t\t\tdistance = event.pageX - this._mousedown_pos.x + (event.pageY - this._mousedown_pos.y);\n\t\t\t} else {\n\t\t\t\tconst touch = event.touches[0];\n\t\t\t\tdistance = touch.pageX - this._mousedown_pos.x + (touch.pageY - this._mousedown_pos.y);\n\t\t\t}\n\t\t\tthis._mouse_distance_travelled += Math.abs(distance);\n\t\t}\n\n\t\tif (!this.viewer.controls_controller.active) {\n\t\t\t// this.viewer.process_picker_nodes_on_mouse_move(event, this.camera_node, this.ray_helper);\n\t\t}\n\t}\n\n\tprotected _on_mouseup(event: MouseOrTouchEvent) {\n\t\tif (this._mouse_distance_travelled < 2) {\n\t\t\t// this.viewer.process_picker_nodes_on_click(event, this.camera_node, this.ray_helper);\n\t\t}\n\t\tthis._mouse_distance_travelled = DIST_UNINITIALIZED;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n\nexport class WebGLController {\n\tpublic request_animation_frame_id: number | undefined;\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tinit() {\n\t\tconst canvas = this.viewer.canvas;\n\t\tif (canvas) {\n\t\t\tcanvas.onwebglcontextlost = this._on_webglcontextlost.bind(this);\n\t\t\tcanvas.onwebglcontextrestored = this._on_webglcontextrestored.bind(this);\n\t\t}\n\t}\n\n\tprotected _on_webglcontextlost() {\n\t\tconsole.warn('context lost at frame', this.viewer.scene.frame);\n\t\t// event.preventDefault();\n\t\tif (this.request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this.request_animation_frame_id);\n\t\t} else {\n\t\t\tconsole.warn('request_animation_frame_id not initialized');\n\t\t}\n\t\tconsole.warn('not canceled', this.request_animation_frame_id);\n\t}\n\tprotected _on_webglcontextrestored() {\n\t\tconsole.log('context restored');\n\t}\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport lodash_isNaN from 'lodash/isNaN';\n\nexport class OrthographicCameraBackgroundController extends BaseBackgroundController {\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tlet width = this.node.params.float('size');\n\t\tlet height = width;\n\n\t\tconst far = this.node.params.float('far');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tquad.scale.x = width;\n\t\t\tquad.scale.y = height;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n}\n","// import lodash_clamp from 'lodash/clamp';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\nimport {PerspectiveCameraBackgroundController} from './utils/cameras/background/PerspectiveCameraController';\n// import {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nconst DEFAULT = {\n\tfov: 50,\n};\n\n// const EVENT_CHANGE = { type: 'change' };\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function PerspectiveCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tfov = ParamConfig.FLOAT(DEFAULT.fov, {range: [0, 100]});\n\t\t// vertical_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 1}});\n\t\t// horizontal_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 0}});\n\t};\n}\nclass PerspectiveCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(PerspectiveCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PerspectiveCameraObjParamConfig();\n\nexport class PerspectiveCameraObjNode extends TypedCameraObjNode<PerspectiveCamera, PerspectiveCameraObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'perspective_camera';\n\t}\n\n\tprotected get background_controller_constructor() {\n\t\treturn PerspectiveCameraBackgroundController;\n\t}\n\n\tcreate_object() {\n\t\treturn new PerspectiveCamera(DEFAULT.fov, 1, BASE_CAMERA_DEFAULT.near, BASE_CAMERA_DEFAULT.far);\n\t}\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.add_param(ParamType.FLOAT, 'fov', DEFAULT.fov, {\n\t// \t// \trange: [0, 180],\n\t// \t// \trange_locked: [true, true],\n\t// \t// });\n\t// \t// this.add_param(ParamType.VECTOR2, 'vertical_fov_range', [0, 100], {visible_if: {lock_width: 1}});\n\t// \t// this.add_param(ParamType.VECTOR2, 'horizontal_fov_range', [0, 100], {visible_if: {lock_width: 0}});\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tif (this._object.fov != this.pv.fov) {\n\t\t\tthis._object.fov = this.pv.fov;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\t// let lock_width = true;//this.pv.lock_width;\n\n\t\t\tthis._object.aspect = this._aspect;\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst other_fov = this.pv.fov / this._aspect;\n\t\t\t// \tthis._object.zoom = this.get_zoom(this._aspect, other_fov, this.pv.vertical_fov_range);\n\t\t\t// } else {\n\t\t\t// \tthis._object.zoom = 1;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\t// private get_zoom(start_zoom: number, other_fov: number, range: Vector2) {\n\t// \tlet zoom = start_zoom;\n\t// \tif (range) {\n\t// \t\tif (other_fov < range.x || other_fov > range.y) {\n\t// \t\t\tconst new_other_fov = lodash_clamp(other_fov, range.x, range.y);\n\t// \t\t\tzoom = start_zoom * (other_fov / new_other_fov);\n\t// \t\t\t// zoom = Math.min(start_zoom, zoom)\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_sum from 'lodash/sum';\n// import { Vector2 } from 'three';\n\n// enum CornerNames {\n// \tbl = 'bl',\n// \tbr = 'br',\n// \ttl = 'tl',\n// \ttr = 'tr',\n// }\ninterface Corners2D {\n\tbl: Vector2Like;\n\tbr: Vector2Like;\n\ttl: Vector2Like;\n\ttr: Vector2Like;\n}\ninterface Corners3D {\n\tbl: Vector3;\n\tbr: Vector3;\n\ttl: Vector3;\n\ttr: Vector3;\n}\nconst SCREEN_COORD: Corners2D = {\n\tbl: {x: -1, y: -1},\n\tbr: {x: +1, y: -1},\n\ttl: {x: -1, y: +1},\n\ttr: {x: +1, y: +1},\n};\nconst CORNER_NAMES: Array<keyof Corners3D> = ['bl', 'br', 'tl', 'tr'];\n\nexport class PerspectiveCameraBackgroundController extends BaseBackgroundController {\n\tprivate _bg_corner: Corners3D = {\n\t\tbl: new Vector3(),\n\t\tbr: new Vector3(),\n\t\ttl: new Vector3(),\n\t\ttr: new Vector3(),\n\t};\n\tprivate _bg_center = new Vector3();\n\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tfor (let corner_name of CORNER_NAMES) {\n\t\t\tthis._update_corner_vector(this._bg_corner[corner_name], SCREEN_COORD[corner_name]);\n\t\t}\n\t\tlet width = this._bg_corner.bl.distanceTo(this._bg_corner.br);\n\t\tlet height = this._bg_corner.bl.distanceTo(this._bg_corner.tl);\n\n\t\tthis._bg_center.x = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].x)) / 4;\n\t\tthis._bg_center.y = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].y)) / 4;\n\t\tthis._bg_center.z = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].z)) / 4;\n\n\t\tconst far = this.node.params.float('far');\n\t\tconst background_ratio = this.node.params.float('background_ratio');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tconst z = this._bg_center.distanceTo(this.node.object.position);\n\t\t\tconst z_ratio = far / z;\n\t\t\tconst desired_ratio = background_ratio || 1;\n\n\t\t\tif (width > height) {\n\t\t\t\theight = width / desired_ratio;\n\t\t\t} else {\n\t\t\t\theight = width * desired_ratio;\n\t\t\t}\n\n\t\t\tquad.scale.x = width * z_ratio;\n\t\t\tquad.scale.y = height * z_ratio;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n\t_update_corner_vector(vector: Vector3, coord: Vector2Like) {\n\t\tthis._bg_raycaster.setFromCamera(coord, this.node.object);\n\t\tvector\n\t\t\t.copy(this._bg_raycaster.ray.direction)\n\t\t\t.multiplyScalar(this.node.params.float('far'))\n\t\t\t.add(this._bg_raycaster.ray.origin);\n\t}\n}\n","import {CATEGORY_SOP} from './Category';\n\nimport {AddSopNode} from '../../nodes/sop/Add';\nimport {AnimationCopySopNode} from '../../nodes/sop/AnimationCopy';\nimport {AnimationMixerSopNode} from '../../nodes/sop/AnimationMixer';\nimport {AttribAddMultSopNode} from '../../nodes/sop/AttribAddMult';\nimport {AttribCopySopNode} from '../../nodes/sop/AttribCopy';\nimport {AttribCreateSopNode} from '../../nodes/sop/AttribCreate';\nimport {AttribDeleteSopNode} from '../../nodes/sop/AttribDelete';\nimport {AttribNormalizeSopNode} from '../../nodes/sop/AttribNormalize';\nimport {AttribPromoteSopNode} from '../../nodes/sop/AttribPromote';\nimport {AttribRemapSopNode} from '../../nodes/sop/AttribRemap';\nimport {AttribRenameSopNode} from '../../nodes/sop/AttribRename';\nimport {AttribTransferSopNode} from '../../nodes/sop/AttribTransfer';\nimport {BboxScatterSopNode} from '../../nodes/sop/BboxScatter';\nimport {BlendSopNode} from '../../nodes/sop/Blend';\nimport {BoxSopNode} from '../../nodes/sop/Box';\nimport {CacheSopNode} from '../../nodes/sop/Cache';\nimport {CircleSopNode} from '../../nodes/sop/Circle';\nimport {ColorSopNode} from '../../nodes/sop/Color';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {DataSopNode} from '../../nodes/sop/Data';\nimport {DataUrlSopNode} from '../../nodes/sop/DataUrl';\nimport {DelaySopNode} from '../../nodes/sop/Delay';\nimport {DeleteSopNode} from '../../nodes/sop/Delete';\nimport {FaceSopNode} from '../../nodes/sop/Face';\nimport {FileSopNode} from '../../nodes/sop/File';\nimport {FuseSopNode} from '../../nodes/sop/Fuse';\nimport {HexagonsSopNode} from '../../nodes/sop/Hexagons';\nimport {HierarchySopNode} from '../../nodes/sop/Hierarchy';\n// TODO: heightmap\nimport {InstanceSopNode} from '../../nodes/sop/Instance';\nimport {JitterSopNode} from '../../nodes/sop/Jitter';\nimport {LayerSopNode} from '../../nodes/sop/Layer';\nimport {LineSopNode} from '../../nodes/sop/Line';\nimport {MaterialSopNode} from '../../nodes/sop/Material';\nimport {MergeSopNode} from '../../nodes/sop/Merge';\nimport {NoiseSopNode} from '../../nodes/sop/Noise';\nimport {NormalsSopNode} from '../../nodes/sop/Normals';\nimport {NullSopNode} from '../../nodes/sop/Null';\nimport {ObjectMergeSopNode} from '../../nodes/sop/ObjectMerge';\nimport {OcclusionSopNode} from '../../nodes/sop/Occlusion';\nimport {ParticlesSystemGpuSopNode} from '../../nodes/sop/ParticlesSystemGpu';\nimport {PeakSopNode} from '../../nodes/sop/Peak';\nimport {PlaneSopNode} from '../../nodes/sop/Plane';\nimport {PointSopNode} from '../../nodes/sop/Point';\nimport {PolywireSopNode} from '../../nodes/sop/Polywire';\nimport {RaySopNode} from '../../nodes/sop/Ray';\nimport {ResampleSopNode} from '../../nodes/sop/Resample';\nimport {ScatterSopNode} from '../../nodes/sop/Scatter';\nimport {ShadowsSopNode} from '../../nodes/sop/Shadows';\nimport {SkinSopNode} from '../../nodes/sop/Skin';\nimport {SphereSopNode} from '../../nodes/sop/Sphere';\nimport {SwitchSopNode} from '../../nodes/sop/Switch';\nimport {TextSopNode} from '../../nodes/sop/Text';\nimport {TorusSopNode} from '../../nodes/sop/Torus';\nimport {TorusKnotSopNode} from '../../nodes/sop/TorusKnot';\nimport {TransformSopNode} from '../../nodes/sop/Transform';\nimport {TubeSopNode} from '../../nodes/sop/Tube';\nimport {UvProjectSopNode} from '../../nodes/sop/UvProject';\n\nexport interface GeoNodeChildrenMap {\n\tadd: AddSopNode;\n\tanimation_copy: AnimationCopySopNode;\n\tanimation_mixer: AnimationMixerSopNode;\n\tattrib_add_mult: AttribAddMultSopNode;\n\tattrib_copy: AttribCopySopNode;\n\tattrib_create: AttribCreateSopNode;\n\tattrib_delete: AttribDeleteSopNode;\n\tattrib_normalize: AttribNormalizeSopNode;\n\tattrib_promote: AttribPromoteSopNode;\n\tattrib_remap: AttribRemapSopNode;\n\tattrib_rename: AttribRenameSopNode;\n\tattrib_transfer: AttribTransferSopNode;\n\tbbox_scatter: BboxScatterSopNode;\n\tblend: BlendSopNode;\n\tbox: BoxSopNode;\n\tcache: CacheSopNode;\n\tcircle: CircleSopNode;\n\tcolor: ColorSopNode;\n\tcopy: CopySopNode;\n\tdata: DataSopNode;\n\tdata_url: DataUrlSopNode;\n\tdelay: DelaySopNode;\n\tdelete: DeleteSopNode;\n\tface: FaceSopNode;\n\tfile: FileSopNode;\n\tfuse: FuseSopNode;\n\thexagons: HexagonsSopNode;\n\thierarchy: HierarchySopNode;\n\tinstance: InstanceSopNode;\n\tjitter: JitterSopNode;\n\tlayer: LayerSopNode;\n\tline: LineSopNode;\n\tmaterial: MaterialSopNode;\n\tmerge: MergeSopNode;\n\tnoise: NoiseSopNode;\n\tnormals: NormalsSopNode;\n\tnull: NullSopNode;\n\tobject_merge: ObjectMergeSopNode;\n\tocclusion: OcclusionSopNode;\n\tparticles_system_gpu: ParticlesSystemGpuSopNode;\n\tpeak: PeakSopNode;\n\tplane: PlaneSopNode;\n\tpoint: PointSopNode;\n\tpolywire: PolywireSopNode;\n\tray: RaySopNode;\n\tresample: ResampleSopNode;\n\tscatter: ScatterSopNode;\n\tshadows: ShadowsSopNode;\n\tskin: SkinSopNode;\n\tsphere: SphereSopNode;\n\tswitch: SwitchSopNode;\n\ttext: TextSopNode;\n\ttorus: TorusSopNode;\n\ttorus_knot: TorusKnotSopNode;\n\ttransform: TransformSopNode;\n\ttube: TubeSopNode;\n\tuv_project: UvProjectSopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class SopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AddSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(AnimationCopySopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AnimationMixerSopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AttribAddMultSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCopySopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCreateSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribDeleteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribNormalizeSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribPromoteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRemapSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRenameSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribTransferSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(BboxScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BlendSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BoxSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(CacheSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(CircleSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(ColorSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(CopySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(DataSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DataUrlSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DelaySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(DeleteSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FaceSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FileSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(FuseSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(HexagonsSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(HierarchySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(InstanceSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(JitterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LayerSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LineSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(MaterialSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(MergeSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NoiseSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NormalsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(NullSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ObjectMergeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(OcclusionSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(ParticlesSystemGpuSopNode, CATEGORY_SOP.DYNAMICS);\n\t\tpoly.register_node(PeakSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PlaneSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(PointSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PolywireSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(RaySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ResampleSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SkinSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ShadowsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SphereSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(SwitchSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(TextSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TorusSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TorusKnotSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TransformSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(TubeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(UvProjectSopNode, CATEGORY_SOP.MODIFIER);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten';\n// import lodash_last from 'lodash/last';\nimport lodash_times from 'lodash/times';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometryUtilShape} from '../../../core/geometry/util/Shape';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AddSopParamsConfig extends NodeParamsConfig {\n\tcreate_point = ParamConfig.BOOLEAN(1);\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 100],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {create_point: true},\n\t});\n\tposition = ParamConfig.VECTOR3([0, 0, 0], {visible_if: {create_point: true}});\n\t// create_polygon = ParamConfig.BOOLEAN(0);\n\topen = ParamConfig.BOOLEAN(0);\n\tconnect_to_last_point = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new AddSopParamsConfig();\n\nexport class AddSopNode extends TypedSopNode<AddSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'add';\n\t}\n\t_objects: Object3D[] | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create polygons from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._objects = [];\n\t\tthis._create_point();\n\t\t// if (this.pv.create_polygon) {\n\t\t// \tthis._create_polygon(input_contents[0]);\n\t\t// }\n\n\t\tthis.set_objects(this._objects);\n\t}\n\n\tprivate _create_point() {\n\t\tif (this.pv.create_point) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions: number[] = [];\n\t\t\tlodash_times(this.pv.points_count, (i) => {\n\t\t\t\tthis.pv.position.toArray(positions, i * 3);\n\t\t\t});\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\t\t\tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\n\t\t\tif (this._objects) {\n\t\t\t\tthis._objects.push(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_polygon(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\t// \tconst is_polygon_closed = !this.pv.open && points.length >= 3;\n\t// \tif (points.length > 0) {\n\t// \t\tif (is_polygon_closed) {\n\t// \t\t\tthis._create_polygon_closed(core_group);\n\t// \t\t} else {\n\t// \t\t\tthis._create_polygon_open(core_group);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _create_polygon_closed(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tconst geometry = CoreGeometryUtilShape.geometry_from_points(points);\n\t// \tconst object = this.create_object(geometry);\n\t// \tthis._objects.push(object);\n\t// }\n\n\t// _create_polygon_open(core_group:CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tlet positions:number[][] = [];\n\t// \tconst indices:number[] = [];\n\t// \tpoints.forEach((point, i) => {\n\t// \t\tpoint.position().toArray(positions, i * 3);\n\t// \t\t// positions.push(point.position().toArray());\n\n\t// \t\tif (i > 0) {\n\t// \t\t\tindices.push(i - 1);\n\t// \t\t\tindices.push(i);\n\t// \t\t}\n\t// \t});\n\n\t// \tif (points.length > 2 && this.pv.connect_to_last_point) {\n\t// \t\tpositions.push(points[0].position().toArray());\n\t// \t\tindices.push(lodash_last(indices));\n\t// \t\tindices.push(0);\n\t// \t}\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new BufferGeometry();\n\t// \tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \tthis._objects.push(object);\n\t// }\n}\n","import lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Triangle} from 'three/src/math/Triangle';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferGeometry, Triangle, Vector2, Vector3}\nimport {CorePoint} from './Point';\nimport {CoreGeometry} from './Geometry';\nimport {CoreMath} from '../math/_Module';\n// import {CoreInterpolate} from '../Math/Interpolate'\n\ninterface FaceLike {\n\ta: number;\n\tb: number;\n\tc: number;\n}\n\ntype CorePointArray3 = [CorePoint, CorePoint, CorePoint];\ntype Vector3Array2 = [Vector3, Vector3];\ntype Vector3Array3 = [Vector3, Vector3, Vector3];\n\nexport class CoreFace {\n\t_geometry: BufferGeometry;\n\t_points: CorePointArray3 | undefined;\n\t_triangle: Triangle | undefined;\n\t_positions: Vector3Array3 | undefined;\n\t_deltas: Vector3Array2 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, private _index: number) {\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\tget index() {\n\t\treturn this._index;\n\t}\n\tget points() {\n\t\treturn (this._points = this._points || this._get_points());\n\t}\n\tprivate _get_points(): CorePointArray3 {\n\t\tconst index_array = this._geometry.index?.array || [];\n\t\tconst start = this._index * 3;\n\t\treturn [\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 0]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 1]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 2]),\n\t\t];\n\t}\n\tget positions() {\n\t\treturn (this._positions = this._positions || this._get_positions());\n\t}\n\tprivate _get_positions(): Vector3Array3 {\n\t\tconst points = this.points;\n\t\treturn [points[0].position(), points[1].position(), points[2].position()];\n\t}\n\tget triangle() {\n\t\treturn (this._triangle = this._triangle || this._get_triangle());\n\t}\n\tprivate _get_triangle(): Triangle {\n\t\tconst positions = this.positions;\n\t\treturn new Triangle(positions[0], positions[1], positions[2]);\n\t}\n\tget deltas() {\n\t\treturn (this._deltas = this._deltas || this._get_deltas());\n\t}\n\tprivate _get_deltas(): Vector3Array2 {\n\t\treturn [this.positions[1].clone().sub(this.positions[0]), this.positions[2].clone().sub(this.positions[0])];\n\t}\n\n\tget area(): number {\n\t\treturn this.triangle.getArea();\n\t}\n\tcenter(target: Vector3) {\n\t\tconst positions = this.positions;\n\t\ttarget.x = (positions[0].x + positions[1].x + positions[2].x) / 3;\n\t\ttarget.y = (positions[0].y + positions[1].y + positions[2].y) / 3;\n\t\ttarget.z = (positions[0].z + positions[1].z + positions[2].z) / 3;\n\n\t\treturn target;\n\t}\n\n\trandom_position(seed: number) {\n\t\tlet weights = [CoreMath.rand_float(seed), CoreMath.rand_float(seed * 6541)];\n\n\t\tif (weights[0] + weights[1] > 1) {\n\t\t\tweights[0] = 1 - weights[0];\n\t\t\tweights[1] = 1 - weights[1];\n\t\t}\n\n\t\treturn this.positions[0]\n\t\t\t.clone()\n\t\t\t.add(this.deltas[0].clone().multiplyScalar(weights[0]))\n\t\t\t.add(this.deltas[1].clone().multiplyScalar(weights[1]));\n\t}\n\t// random_position(seed: number){\n\t// \tlet weights = [\n\t// \t\tCoreMath.rand_float(seed),\n\t// \t\tCoreMath.rand_float(seed*524),\n\t// \t\tCoreMath.rand_float(seed*4631)\n\t// \t]\n\t// \tconst sum = lodash_sum(weights)\n\t// \tweights = weights.map(w=>w/sum)\n\t// \tconst pos = new Vector3()\n\t// \tlet positions = this.positions().map((p,i)=> p.multiplyScalar(weights[i]))\n\t// \tpositions.forEach(p=>{\n\t// \t\tpos.add(p)\n\t// \t})\n\t// \treturn pos\n\t// }\n\n\tattrib_value_at_position(attrib_name: string, position: Vector3) {\n\t\t// const weights = CoreInterpolate._weights_from_3(position, this._positions)\n\t\tconst barycentric_coordinates = new Vector3();\n\t\tthis.triangle.getBarycoord(position, barycentric_coordinates);\n\t\tconst weights = barycentric_coordinates.toArray();\n\n\t\tconst attrib = this._geometry.attributes[attrib_name];\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst point_values = this.points.map((point) => point.attrib_value(attrib_name));\n\n\t\tlet new_attrib_value;\n\t\tlet sum;\n\t\tlet index = 0;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tsum += point_value * weights[index];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tconst weighted_value = point_value.multiplyScalar(weights[index]);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\tsum.add(weighted_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum = weighted_value;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t}\n\t\t}\n\t\treturn new_attrib_value;\n\t}\n\n\tstatic interpolated_value(\n\t\tgeometry: BufferGeometry,\n\t\tface: FaceLike,\n\t\tintersect_point: Vector3,\n\t\tattrib: BufferAttribute\n\t) {\n\t\t// let point_index, i, sum\n\t\tconst point_indices = [face.a, face.b, face.c];\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_attrib_array = position_attrib.array;\n\t\tconst point_positions = point_indices.map(\n\t\t\t(point_index) =>\n\t\t\t\tnew Vector3(\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 0],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 1],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 2]\n\t\t\t\t)\n\t\t);\n\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst attrib_array = attrib.array;\n\t\tlet attrib_values: NumericAttribValue[] = [];\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tattrib_values = point_indices.map((point_index) => attrib_array[point_index]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) => new Vector2(attrib_array[point_index * 2 + 0], attrib_array[point_index * 2 + 1])\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) =>\n\t\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 0],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 1],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 2]\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst dist_to_points = point_indices.map((point_index, i) => intersect_point.distanceTo(point_positions[i]));\n\n\t\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-points\n\t\t// TODO: replace this with Core.Math.Interpolate\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_points[0] * dist_to_points[1],\n\t\t\tdist_to_points[0] * dist_to_points[2],\n\t\t\tdist_to_points[1] * dist_to_points[2],\n\t\t]);\n\n\t\tconst weights = [\n\t\t\t(dist_to_points[1] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[1]) / distance_total,\n\t\t];\n\n\t\tlet new_attrib_value;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tnew_attrib_value = lodash_sum(\n\t\t\t\t\tpoint_indices.map((point_indx, i) => weights[i] * (attrib_values[i] as number))\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar values = point_indices.map((point_index, i) =>\n\t\t\t\t\t(attrib_values[i] as Vector3).multiplyScalar(weights[i])\n\t\t\t\t);\n\t\t\t\tnew_attrib_value = null;\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (new_attrib_value) {\n\t\t\t\t\t\tnew_attrib_value.add(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew_attrib_value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn new_attrib_value;\n\t}\n}\n","import {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute'\n\nexport class MonkeyPatcher {\n\t// this allows cloning of geometries containing InterleavedBufferAttribute such as soldier.glb\n\tstatic patch(attribute: InterleavedBufferAttribute) {\n\t\tObject.assign(attribute, {\n\t\t\tclone: function() {\n\t\t\t\treturn new InterleavedBufferAttribute(\n\t\t\t\t\tattribute.data.clone(),\n\t\t\t\t\tattribute.itemSize,\n\t\t\t\t\tattribute.offset,\n\t\t\t\t\tattribute.normalized\n\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Object3D} from 'three/src/core/Object3D'\n// import {Group} from 'three/src/objects/Group'\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Box3} from 'three/src/math/Box3';\nimport {TypedContainer} from './_Base';\nimport {CoreGroup} from '../../core/geometry/Group';\n// import {CoreObject} from '../../core/geometry/Object'\nimport {CoreGeometry} from '../../core/geometry/Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {ContainableMap} from './utils/ContainableMap';\n// import {CoreConstant} from '../../core/geometry/Constant'\n\n// const CoreGeometryGroup = CoreGroup\n\n// export type RequestContainerGeometryCallback = (container: Geometry)=>void\n\n// interface GroupOptions {\n// \tclone?: boolean\n// }\n// interface BooleanByString {\n// \t[propName: string]: boolean\n// }\nexport class GeometryContainer extends TypedContainer<ContainableMap['GEOMETRY']> {\n\t// protected _group: Group = new Group()\n\t// private _objects_by_uuid: BooleanByString = {}\n\t// protected _content: Object3D[] = []\n\t// protected _core_group: CoreGroup | null;\n\n\t// _points_count: number | null;\n\t// _bounding_box: Box3 | null;\n\n\t// constructor() {\n\t// \tsuper();\n\t// \t// this._materials = [];\n\t// }\n\n\t// _post_set_content() {\n\t// \tthis._core_group = this._core_group || new CoreGroup();\n\t// \tthis._core_group.touch();\n\t// \tthis._core_group.set_objects(this._content);\n\t// }\n\tset_objects(objects: Object3D[]) {}\n\n\t// clone_content(){\n\t// \treturn this._content.map(object=>CoreObject.clone(object))\n\t// }\n\t// core_content(): CoreGroup | null {\n\t// \treturn this._core_group; //= this._core_group || this._create_core_group()\n\t// }\n\tcore_content_cloned(): CoreGroup | undefined {\n\t\tif (this._content) {\n\t\t\treturn this._content.clone();\n\t\t}\n\t}\n\t// private _create_core_group(){\n\t// \tif(this._content){\n\t// \t\tconst core_group = new CoreGroup()\n\t// \t\tcore_group.set_objects(this._content)\n\t// \t\treturn core_group\n\t// \t}\n\t// }\n\t// reset_caches() {\n\t// \tconsole.log('reset cache');\n\t// \t// this._content = null;\n\t// \t// this._points_count = null;\n\t// \t// this._bounding_box = null;\n\t// }\n\t// _default_content() {\n\t// \treturn new CoreGroup();\n\t// }\n\n\t// set_geometry: (geometry)->\n\t// \tif @_content?\n\t// \t\t@_content.dispose()\n\t// \tthis.set_content(geometry)\n\t// has_group: ->\n\t// \tthis.has_content()\n\t// group(options?: GroupOptions): Group | null{\n\t// \tlet src_group;\n\t// \tif (options == null) { options = {}; }\n\t// \tif ((options['clone'] == null)) {\n\t// \t\toptions['clone'] = true;\n\t// \t}\n\n\t// \tlet new_group = null;\n\t// \tif ((src_group = this.content()) != null) {\n\t// \t\tif (options['clone'] === true) {\n\t// \t\t\tnew_group = CoreGroup.clone(src_group);\n\t// \t\t} else {\n\t// \t\t\tnew_group = src_group;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn new_group;\n\t// }\n\n\t// group_wrapper(options){\n\t// \t// if (options == null) { options = {}; }\n\t// \t// return new CoreGroup(this.group(options));\n\t// }\n\t// core_group() {\n\t// \treturn this._core_group; //this.group_wrapper(options)\n\t// }\n\tset_content(content: ContainableMap['GEOMETRY']) {\n\t\tsuper.set_content(content);\n\t}\n\t// object(options){\n\t// \tif (options == null) { options = {}; }\n\t// \treturn this.group(options);\n\t// }\n\t// _post_set_content(){\n\t// \t// const objects_to_remove = []\n\t// \t// const objects_to_add = []\n\t// \t// const new_objects_by_uuid = {}\n\t// \t// for(let object of this._content){\n\t// \t// \tif(!this._objects_by_uuid[object.uuid]){\n\t// \t// \t\tobjects_to_add.push(object)\n\t// \t// \t}\n\t// \t// \tnew_objects_by_uuid[object.uuid] = true\n\t// \t// }\n\t// \t// for(let uuid of Object.keys(this._objects_by_uuid)){\n\n\t// \t// }\n\t// \tlet child\n\t// \twhile(child = this._group.children[0]){\n\t// \t\tthis._group.remove(child)\n\t// \t}\n\t// \tfor(let object of this._content){\n\t// \t\tthis._group.add(object)\n\t// \t}\n\t// }\n\n\t//\n\t//\n\t// INFOS\n\t//\n\t//\n\t// infos() {\n\t// \tif (this._content != null) {\n\t// \t\tconst bbox = this.bounding_box();\n\t// \t\tconst center = this.center(); //bbox.min.clone().add(bbox.max).multiplyScalar(0.5)\n\t// \t\tconst size = this.size(); //bbox.max.clone().sub(bbox.min)\n\n\t// \t\tconst node = this.node();\n\t// \t\tconst part_1 = [\n\t// \t\t\t`time dependent: ${node.is_time_dependent()}`,\n\t// \t\t\t`${node.cooks_count()} cooks`,\n\t// \t\t\t`cook time: ${node.cook_time()}`,\n\t// \t\t\t`cook time with inputs: ${node.cook_time_with_inputs()}`,\n\t// \t\t\t`${this.points_count()} points`,\n\t// \t\t\t`${this.objects_count()} object(s)  (${this.objects_visible_count()} visible)`\n\t// \t\t];\n\n\t// \t\tconst part_2 = [];\n\t// \t\tconst count_by_type = this.objects_count_by_type();\n\t// \t\tObject.keys(count_by_type).forEach((type)=>{\n\n\t// \t\t\tconst count = count_by_type[type];\n\t// \t\t\treturn part_2.push(`${count} ${type}`);\n\t// \t\t});\n\n\t// \t\tconst vertex_attributes = this.vertex_attribute_names();\n\t// \t\tconst object_attributes = this.object_attribute_names();\n\t// \t\tpart_2.push(`vertex attributes (${vertex_attributes.length}): ${vertex_attributes.join(', ')}`);\n\t// \t\tpart_2.push(`object attributes (${object_attributes.length}): ${object_attributes.join(', ')}`);\n\n\t// \t\tconst part_3 = [\n\t// \t\t\t\"bbox:\",\n\t// \t\t\t[bbox.min.x, bbox.min.y, bbox.min.z],\n\t// \t\t\t[bbox.max.x, bbox.max.y, bbox.max.z],\n\t// \t\t\t\"center:\",\n\t// \t\t\t[center.x, center.y, center.z],\n\t// \t\t\t\"size:\",\n\t// \t\t\t[size.x, size.y, size.z],\n\t// \t\t\tthis._content\n\t// \t\t];\n\n\t// \t\treturn lodash_concat( part_1, part_2, part_3 );\n\t// \t}\n\t// }\n\n\tprivate first_object() {\n\t\tif (this._content) {\n\t\t\treturn this._content.objects()[0];\n\t\t}\n\t}\n\tprivate first_geometry(): BufferGeometry | null {\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tobjects_count(): number {\n\t\t// let count = 0\n\t\t// if(this._content){\n\t\t// \tcount = this._content.children.length\n\t\t// }\n\t\t// return count\n\t\tif (this._content) {\n\t\t\treturn this._content.objects().length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tobjects_visible_count(): number {\n\t\tlet count = 0;\n\t\tif (this._content) {\n\t\t\tcount = this._content.objects().filter((c) => c.visible).length; // lodash_filter(this._content, c=> c.visible).length;\n\t\t}\n\t\treturn count;\n\t}\n\tobjects_count_by_type() {\n\t\tconst count_by_type: Dictionary<number> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tif (count_by_type[human_type] == null) {\n\t\t\t\t\tcount_by_type[human_type] = 0;\n\t\t\t\t}\n\t\t\t\tcount_by_type[human_type] += 1;\n\t\t\t}\n\t\t}\n\t\treturn count_by_type;\n\t}\n\tobjects_names_by_type() {\n\t\tconst names_by_type: Dictionary<string[]> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tnames_by_type[human_type] = names_by_type[human_type] || [];\n\t\t\t\tnames_by_type[human_type].push(core_object.name());\n\t\t\t}\n\t\t}\n\t\treturn names_by_type;\n\t}\n\n\tvertex_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tnames = Object.keys(geometry.attributes);\n\t\t}\n\t\treturn names;\n\t}\n\tvertex_attribute_sizes_by_name() {\n\t\tlet sizes_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\tsizes_by_name[attrib_name] = attrib.itemSize;\n\t\t\t});\n\t\t}\n\t\treturn sizes_by_name;\n\t}\n\tvertex_attribute_types_by_name() {\n\t\tlet types_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tconst core_geo = new CoreGeometry(geometry);\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\ttypes_by_name[attrib_name] = core_geo.attrib_type(attrib_name);\n\t\t\t});\n\t\t}\n\t\treturn types_by_name;\n\t}\n\tobject_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\tnames = Object.keys(object.userData['attributes'] || {});\n\t\t}\n\t\treturn names;\n\t}\n\n\tpoints_count(): number {\n\t\tif (this._content) {\n\t\t\treturn this._content.points_count();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// return this._points_count != null ? this._points_count : (this._points_count = this._compute_points_count());\n\t}\n\n\t// _compute_points_count() {\n\t// \tlet points_count = 0;\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\tobject.traverse((object) => {\n\t// \t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t// \t\t\t\tif (geometry) {\n\t// \t\t\t\t\tpoints_count += CoreGeometry.points_count(geometry);\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// \treturn points_count;\n\t// }\n\t//@_content.userData['points_count']\n\t//Core.Geometry.Geometry.points_count(@_content)\n\t// count = 0\n\t// if (position = @_content.getAttribute('position'))?\n\t// \tif (array = position.array)?\n\t// \t\tcount = array.length / 3\n\n\t// count\n\n\t// points_for_geometry: (geometry)->\n\t// \tCore.Geometry.Geometry.points_from_geometry(geometry)\n\n\t// create_geometry_from_points: (points, index_mode)->\n\t// \tCore.Geometry.Geometry.geometry_from_points(points, index_mode)\n\n\t//\n\t//\n\t// BBOX\n\t//\n\t//\n\tbounding_box(): Box3 {\n\t\treturn this._content.bounding_box();\n\t\t// return this._bounding_box != null ? this._bounding_box : (this._bounding_box = this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\treturn this._content.center();\n\t\t// const center = new Vector3();\n\t\t// this.bounding_box().getCenter(center);\n\t\t// return center;\n\t}\n\tsize(): Vector3 {\n\t\treturn this._content.size();\n\t\t// const size = new Vector3();\n\t\t// this.bounding_box().getSize(size);\n\t\t// return size;\n\t}\n\n\t// private _compute_bounding_box() {\n\t// \tconst bbox = new Box3();\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\t// const box = new Box3()\n\t// \t\t\t// bbox.setFromObject(object);\n\t// \t\t\tbbox.expandByObject(object);\n\t// \t\t}\n\t// \t}\n\t// \treturn bbox;\n\t// }\n}\n","import {TypedSopNode} from './_Base';\n// import {CoreTransform} from '../../../Core/Transform';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// interface ActionsByName {\n// \t[propName: string]: THREE.AnimationClip;\n// }\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nclass AnimationCopySopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new AnimationCopySopParamsConfig();\n\nexport class AnimationCopySopNode extends TypedSopNode<AnimationCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy animation to', 'geometry to copy animation from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_target = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst src_object = core_group_src.objects()[0] as Object3DWithAnimation;\n\t\tconst target_object = core_group_target.objects()[0] as Object3DWithAnimation;\n\n\t\tconst src_animations = src_object.animations;\n\t\tif (src_animations) {\n\t\t\ttarget_object.animations = src_animations.map((a) => a.clone());\n\t\t\tthis.set_core_group(core_group_target);\n\t\t} else {\n\t\t\tthis.states.error.set('no animation found');\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport lodash_isArray from 'lodash/isArray';\n// import {Object3D} from 'three/src/core/Object3D';\nimport {AnimationMixer} from 'three/src/animation/AnimationMixer';\n// import {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nimport {ParamType} from '../../poly/ParamType';\nimport {AnimationAction} from 'three/src/animation/AnimationAction';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {Material} from 'three/src/materials/Materials';\nimport {MaterialWithSkinning} from '../../../core/geometry/Material';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseNodeType} from '../_Base';\nclass AnimationMixerSopParamsConfig extends NodeParamsConfig {\n\ttime = ParamConfig.FLOAT('$T', {range: [0, 10]});\n\tprepare = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tAnimationMixerSopNode.PARAM_CALLBACK_prepare(node as AnimationMixerSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new AnimationMixerSopParamsConfig();\n\nexport class AnimationMixerSopNode extends TypedSopNode<AnimationMixerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_mixer';\n\t}\n\n\t_previous_time: number | null = null;\n\t_mixer: AnimationMixer | null = null;\n\t_actions_by_name: Dictionary<AnimationAction> = {};\n\t_values_by_param_name: Dictionary<number> = {};\n\t// _mixer_used_once: boolean = false\n\t_animation_target: Object3DWithAnimation | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be animated'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tif (!this._mixer) {\n\t\t\tthis.create_mixer(input_contents[0]);\n\t\t} else {\n\t\t\tthis._update_mixer();\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate create_mixer(core_group: CoreGroup) {\n\t\tthis._animation_target = core_group.objects()[0] as Object3DWithAnimation;\n\t\tthis._mixer = new AnimationMixer(this._animation_target);\n\n\t\tthis._remove_spare_params();\n\t\tthis._actions_by_name = {};\n\n\t\tif (this._animation_target.animations) {\n\t\t\tthis._animation_target.animations.forEach((animation, i) => {\n\t\t\t\tconst param_name = animation.name;\n\t\t\t\tconst previous_value = this._values_by_param_name[param_name];\n\t\t\t\tlet default_value = previous_value;\n\t\t\t\tif (default_value == null) {\n\t\t\t\t\tdefault_value = i == 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tconst param = this.add_param(ParamType.FLOAT, param_name, default_value, {spare: true});\n\t\t\t\tif (param) {\n\t\t\t\t\tconst prev_value = this._values_by_param_name[param_name];\n\t\t\t\t\tif (prev_value) {\n\t\t\t\t\t\tparam.set(prev_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._mixer) {\n\t\t\t\t\tconst action = this._mixer.clipAction(animation);\n\t\t\t\t\tthis._actions_by_name[animation.name] = action;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\n\t\tObject.keys(this._actions_by_name).forEach((name) => {\n\t\t\tthis._actions_by_name[name].play();\n\t\t});\n\n\t\t// set material skinning\n\t\tconst materials_by_id: Dictionary<Material> = {};\n\t\tthis._animation_target.traverse((object3d: Object3D) => {\n\t\t\tconst child = object3d as Mesh;\n\t\t\tif (child.material) {\n\t\t\t\tif (!lodash_isArray(child.material)) {\n\t\t\t\t\tmaterials_by_id[child.material.uuid] = child.material;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.keys(materials_by_id).forEach((uuid) => {\n\t\t\tconst material = materials_by_id[uuid] as MaterialWithSkinning;\n\t\t\tmaterial.skinning = true;\n\t\t\tmaterial.morphTargets = true;\n\t\t});\n\t\tthis._previous_time = null;\n\t\tthis._update_mixer();\n\t\tthis._update_mixer_weights(); // might be redundant with _update_mixer, but ensures this is done on load\n\t\tthis.set_object(this._animation_target);\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tthis._values_by_param_name = {};\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tconst names_to_delete: string[] = [];\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get_float(param_name);\n\t\t\tif (param) {\n\t\t\t\tthis._values_by_param_name[param_name] = param.value;\n\t\t\t\tnames_to_delete.push(param_name);\n\t\t\t}\n\t\t});\n\t\tif (names_to_delete.length > 0) {\n\t\t\tthis.params.update_params({names_to_delete: names_to_delete});\n\t\t}\n\t}\n\n\tprivate _update_mixer() {\n\t\tif (this.pv.time != this._previous_time) {\n\t\t\tthis._update_mixer_time();\n\t\t} else {\n\t\t\tthis._update_mixer_weights();\n\t\t}\n\t}\n\tprivate _update_mixer_time() {\n\t\tconst delta = this.pv.time - (this._previous_time || 0);\n\t\tif (this._mixer) {\n\t\t\tthis._mixer.update(delta);\n\t\t}\n\t\tthis._previous_time = this.pv.time;\n\t}\n\n\tprivate _update_mixer_weights() {\n\t\tfor (let name of Object.keys(this._actions_by_name)) {\n\t\t\tconst action = this._actions_by_name[name];\n\t\t\tconst cache_value = this.params.get_float(name).value;\n\t\t\tif (cache_value != null) {\n\t\t\t\taction.setEffectiveWeight(cache_value);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_prepare(node: AnimationMixerSopNode, param: BaseParamType) {\n\t\tnode.prepare_animation_mixer();\n\t}\n\tasync prepare_animation_mixer() {\n\t\tthis._mixer = null;\n\t\tconst container = await this.io.inputs.eval_required_input(0);\n\t\tthis.create_mixer(container.core_content_cloned());\n\t\tthis.set_dirty();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribAddMultSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tpre_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n\tmult = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tpost_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n}\nconst ParamsConfig = new AttribAddMultSopParamsConfig();\n\nexport class AttribAddMultSopNode extends TypedSopNode<AttribAddMultSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_add_mult';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tthis._update_attrib(attrib_name, geometry);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _update_attrib(attrib_name: string, geometry: BufferGeometry) {\n\t\tconst attribute = geometry.getAttribute(attrib_name) as BufferAttribute;\n\t\tif (attribute) {\n\t\t\tconst values = attribute.array as number[];\n\n\t\t\tconst pre_add = this.pv.pre_add;\n\t\t\tconst mult = this.pv.mult;\n\t\t\tconst post_add = this.pv.post_add;\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i];\n\t\t\t\tvalues[i] = (value + pre_add) * mult + post_add;\n\t\t\t}\n\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\tattribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nclass AttribCopySopParamsConfig extends NodeParamsConfig {\n\t// class = ParamConfig.INTEGER(CoreConstant.ATTRIB_CLASS.VERTEX, {\n\t// \tmenu: {\n\t// \t\tentries: [\n\t// \t\t\t{name: 'vertex', value: CoreConstant.ATTRIB_CLASS.VERTEX},\n\t// \t\t\t{name: 'object', value: CoreConstant.ATTRIB_CLASS.OBJECT},\n\t// \t\t],\n\t// \t},\n\t// })\n\tname = ParamConfig.STRING('');\n\ttnew_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {tnew_name: 1}});\n\t// to_all_components = ParamConfig.BOOLEAN(1)\n\t// src_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n\t// dest_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n}\nconst ParamsConfig = new AttribCopySopParamsConfig();\n\n// TODO: attrib copy should handle string attributes\nexport class AttribCopySopNode extends TypedSopNode<AttribCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy attributes to', 'geometry to copy attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_dest = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst attrib_names = core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tthis.copy_vertex_attribute_between_core_groups(core_group_dest, core_group_src, attrib_name);\n\t\t}\n\n\t\t// switch (this.pv.class) {\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t// \t\tthis.copy_vertex_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t// \t\tthis.copy_object_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// }\n\n\t\treturn this.set_core_group(core_group_dest);\n\t}\n\n\tprivate copy_vertex_attribute_between_core_groups(\n\t\tcore_group_dest: CoreGroup,\n\t\tcore_group_src: CoreGroup,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_objects = core_group_src.objects();\n\t\tconst dest_objects = core_group_dest.objects();\n\n\t\tif (dest_objects.length > src_objects.length) {\n\t\t\tthis.states.error.set('second input does not have enough objects to copy attributes from');\n\t\t} else {\n\t\t\tfor (let i = 0; i < dest_objects.length; i++) {\n\t\t\t\tconst dest_geometry = dest_objects[i].geometry;\n\t\t\t\tconst src_geometry = dest_objects[i].geometry;\n\t\t\t\tthis.copy_vertex_attribute_between_geometries(dest_geometry, src_geometry, attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\tprivate copy_vertex_attribute_between_geometries(\n\t\tdest_geometry: BufferGeometry,\n\t\tsrc_geometry: BufferGeometry,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_attrib = src_geometry.getAttribute(attrib_name);\n\t\tif (src_attrib) {\n\t\t\tconst size = src_attrib.itemSize;\n\t\t\tconst src_points_count = src_geometry.getAttribute('position').array.length / 3;\n\t\t\tconst dest_points_count = dest_geometry.getAttribute('position').array.length / 3;\n\t\t\tif (dest_points_count > src_points_count) {\n\t\t\t\tthis.states.error.set('not enough points in second input');\n\t\t\t}\n\t\t\tconst src_array = src_attrib.array as number[];\n\t\t\tconst sub_array = src_array.slice(0, dest_points_count * size);\n\t\t\tconst dest_name = this.pv.tnew_name ? this.pv.new_name : attrib_name;\n\t\t\tdest_geometry.setAttribute(dest_name, new Float32BufferAttribute(sub_array, size));\n\t\t} else {\n\t\t\tthis.states.error.set(`attribute '${attrib_name}' does not exist on second input`);\n\t\t}\n\t}\n\n\t// _src_value_to_all_components(src_attrib_value: NumericAttribValue, dest_attrib_size) {\n\t// \tif (lodash_isNumber(src_attrib_value)) {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value, src_attrib_value);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(src_attrib_value, src_attrib_value, src_attrib_value);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.x;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value.x, src_attrib_value.y);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(\n\t// \t\t\t\t\tsrc_attrib_value.x,\n\t// \t\t\t\t\tsrc_attrib_value.y,\n\t// \t\t\t\t\tsrc_attrib_value.z || src_attrib_value.y\n\t// \t\t\t\t);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _src_value_to_component(src_attrib_value, current_dest_value, src_component, dest_component) {\n\t// \tconst src_component_value = (() => {\n\t// \t\tswitch (src_component) {\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn src_attrib_value.x || src_attrib_value;\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.y;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn src_attrib_value.z;\n\t// \t\t}\n\t// \t})();\n\n\t// \tconst dest_component_name = ['x', 'y', 'z'][dest_component];\n\t// \tif (current_dest_value[dest_component_name] != null) {\n\t// \t\tcurrent_dest_value[dest_component_name] = src_component_value;\n\t// \t\treturn current_dest_value;\n\t// \t} else {\n\t// \t\tconst src_component_name = ['x', 'y', 'z'][src_component];\n\t// \t\treturn src_attrib_value[src_component_name];\n\t// \t}\n\t// }\n\n\t// TODO: find a way to use the point method, but have the group api allow easy switch\n\t// private  copy_object_attribute(core_group_dest: CoreGroup, core_group_src:CoreGroup) {\n\t// \t// const objects_dest = core_group_dest.objects();\n\t// \t// const objects_src = core_group_src.objects();\n\n\t// \t//attribute_names = core_group_src.attrib_names_matching_mask(@_param_name)\n\n\t// \t//lodash_each attribute_names, (attrib_name) =>\n\t// \tconst attrib_name = this.pv.name;\n\n\t// \tif (!core_group_dest.has_attrib(attrib_name)) {\n\t// \t\tconst attrib_size = core_group_src.attrib_size(attrib_name);\n\t// \t\tcore_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t// \t}\n\n\t// \tlodash_each(points_dest, (point_dest, i) => {\n\t// \t\tlet point_src;\n\t// \t\tif ((point_src = points_src[i]) != null) {\n\t// \t\t\tconst attrib_value = point_src.attrib_value(attrib_name);\n\t// \t\t\tpoint_dest.set_attrib_value(attrib_name, attrib_value);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedSopNode} from './_Base';\nimport {\n\tCoreConstant,\n\tAttribClassMenuEntries,\n\tAttribTypeMenuEntries,\n\tAttribClass,\n\tAttribType,\n} from '../../../core/geometry/Constant';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const VALUE_PARAM = {\n// \tVALUEX: 'valuex',\n// \tVALUE: 'value',\n// \tSTRING: 'string',\n// };\n// const DEFAULT_VALUE = {\n// \tvaluex: 0,\n// \tvalue: [0, 0, 0],\n// \tstring: '',\n// };\n// type COMPONENT_INDEX = keyof Vector4Like;\n// const COMPONENT_INDEX: Array<COMPONENT_INDEX> = ['x', 'y', 'z', 'w'];\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribCreateSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\ttype = ParamConfig.INTEGER(AttribType.NUMERIC, {\n\t\tmenu: {\n\t\t\tentries: AttribTypeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('new_attrib');\n\tsize = ParamConfig.INTEGER(1, {\n\t\trange: [1, 4],\n\t\trange_locked: [true, true],\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC},\n\t});\n\tvalue1 = ParamConfig.FLOAT(0, {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue2 = ParamConfig.VECTOR2([0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 2},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue3 = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 3},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue4 = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 4},\n\t\texpression: {for_entities: true},\n\t});\n\tstring = ParamConfig.STRING('', {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.STRING},\n\t\texpression: {for_entities: true},\n\t});\n}\nconst ParamsConfig = new AttribCreateSopParamsConfig();\nexport class AttribCreateSopNode extends TypedSopNode<AttribCreateSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_create';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _w_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.name && lodash_trim(this.pv.name) != '') {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.add_point_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.add_object_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('attribute name is not valid');\n\t\t}\n\t}\n\n\tasync add_point_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tconst core_object = core_objects[i];\n\t\t\tswitch (this.pv.type) {\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\t\tawait this.add_numeric_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\t\tawait this.add_string_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync add_object_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects_from_group(this.pv.group);\n\t\tswitch (this.pv.type) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\tawait this.add_numeric_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\tawait this.add_string_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tasync add_numeric_attribute_to_points(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\n\t\tif (param.has_expression()) {\n\t\t\tif (!core_geometry.has_attrib(this.pv.name)) {\n\t\t\t\tcore_geometry.add_numeric_attrib(this.pv.name, this.pv.size, param.value);\n\t\t\t}\n\n\t\t\tconst geometry = core_geometry.geometry();\n\t\t\tconst array = geometry.getAttribute(this.pv.name).array as number[];\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\t\tarray[point.index * this.pv.size + 0] = value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tconst tmp_arrays = new Array(params.length);\n\t\t\t\tlet component_param;\n\n\t\t\t\tconst arrays_by_geometry_uuid = [\n\t\t\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._w_arrays_by_geometry_uuid,\n\t\t\t\t];\n\n\t\t\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\t\t\tcomponent_param = params[i];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\ttmp_arrays[i] = this._init_array_if_required(\n\t\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\t\tarrays_by_geometry_uuid[i],\n\t\t\t\t\t\t\tpoints.length\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(point, value) => {\n\t\t\t\t\t\t\t\t// array[point.index()*this.pv.size+i] = value\n\t\t\t\t\t\t\t\ttmp_arrays[i][point.index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value = component_param.value;\n\t\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t\tarray[point.index * this.pv.size + i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// commit the tmp values\n\t\t\t\tfor (let j = 0; j < tmp_arrays.length; j++) {\n\t\t\t\t\tconst tmp_array = tmp_arrays[j];\n\t\t\t\t\tif (tmp_array) {\n\t\t\t\t\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\t\t\t\t\tarray[i * this.pv.size + j] = tmp_array[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// const value = await param.eval_p();\n\t\t\tcore_object.add_numeric_vertex_attrib(this.pv.name, this.pv.size, param.value);\n\t\t}\n\t}\n\n\tasync add_numeric_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\t\tif (param.has_expression()) {\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tlet values_by_core_object_index: Dictionary<NumericAttribValueAsArray> = {};\n\t\t\t\t// for (let component_param of params) {\n\t\t\t\t// \tvalues.push(component_param.value);\n\t\t\t\t// }\n\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\tvalues_by_core_object_index[core_object.index] = (<unknown>[]) as NumericAttribValueAsArray;\n\t\t\t\t}\n\t\t\t\tfor (let component_index = 0; component_index < params.length; component_index++) {\n\t\t\t\t\tconst component_param = params[component_index];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = component_param.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\t\tconst value = values_by_core_object_index[core_object.index];\n\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// let value = await param.eval_p();\n\t\t\t// if (this.pv.size > 1) {\n\t\t\t// \tvalue = this._convert_object_numeric_value(value);\n\t\t\t// }\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _convert_object_numeric_value(value: Vector4) {\n\t// \tlet converted_value;\n\t// \tswitch (this.pv.size) {\n\t// \t\tcase 1: {\n\t// \t\t\tconverted_value = value.x;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 2: {\n\t// \t\t\tconverted_value = new Vector2(value.x, value.y);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 3: {\n\t// \t\t\tconverted_value = new Vector3(value.x, value.y, value.z);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 4: {\n\t// \t\t\tconverted_value = new Vector4(value.x, value.y, value.z, value.w);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn converted_value;\n\t// }\n\n\tasync add_string_attribute_to_points(core_object: CoreObject) {\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\t\tconst param = this.p.string;\n\n\t\tconst string_values: string[] = [];\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tstring_values[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tstring_values.push(param.value);\n\t\t}\n\n\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(string_values);\n\t\tcore_object.core_geometry().set_indexed_attribute(this.pv.name, index_data['values'], index_data['indices']);\n\t}\n\n\tasync add_string_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = this.p.string;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t\t// this.context().set_entity(object);\n\n\t\t// const core_object = new CoreObject(object);\n\n\t\t// this.param('string').eval(val => {\n\t\t// \tcore_object.add_attribute(this.pv.name, val);\n\t\t// });\n\t}\n\n\t//\n\t//\n\t// PRIVATE\n\t//\n\t//\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\t// async _eval_params_for_entities(entities){\n\t// \t// let p = Promise.resolve(); // Q() in q\n\n\t// \tconst param = this._value_param();\n\n\t// \tif (param.has_expression()) {\n\t// \t\t// const iterator = new CoreIterator()\n\t// \t\t// await iterator.start_with_array(entities, (element, index)=>{\n\n\t// \t\t// })\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tawait this._eval_param_for_entity(param, entity);\n\t// \t\t}\n\n\t// \t\t// entities.forEach((entity, index)=> {\n\t// \t\t// \tp = p.then(() => {\n\t// \t\t// \t\treturn this._eval_param_for_entity(param, entity);\n\t// \t\t// \t});\n\t// \t\t// });\n\t// \t} else {\n\t// \t\tconst val = await param.eval_p();\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tthis._values.push(val);\n\t// \t\t}\n\t// \t\t// entities.forEach(entity=> {\n\t// \t\t// \treturn this._values.push(val);\n\t// \t\t// });\n\t// \t}\n\n\t// \t// return p;\n\t// }\n\n\t// async _eval_param_for_entity(value_param, entity){\n\t// \tthis.context().set_entity(entity);\n\n\t// \tlet val = await value_param.eval_p()\n\n\t// \t // TODO: optimize. pass directly to the entity instead\n\t// \tif(val.clone){\n\t// \t\tval = val.clone()\n\t// \t}\n\t// \tthis._values.push(val);\n\t// }\n\n\t// private _default_attrib_value() {\n\t// \treturn DEFAULT_VALUE[this._value_param_name()];\n\t// }\n\n\t// private _value_param_name() {\n\t// \tif (this.pv.type == CoreConstant.ATTRIB_TYPE.NUMERIC) {\n\t// \t\tif (this.pv.size == 1) {\n\t// \t\t\treturn VALUE_PARAM.VALUEX;\n\t// \t\t} else {\n\t// \t\t\treturn VALUE_PARAM.VALUE;\n\t// \t\t}\n\t// \t} else {\n\t// \t\treturn VALUE_PARAM.STRING;\n\t// \t}\n\t// }\n\t// private _value_param() {\n\t// \treturn this.params.get(this._value_param_name());\n\t// }\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\t// private _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t// \tfor (let i = 0; i < tmp_array.length; i++) {\n\t// \t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribDeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribDeleteSopParamsConfig();\n\nexport class AttribDeleteSopNode extends TypedSopNode<AttribDeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_delete';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.delete_vertex_attribute(core_group, attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.delete_object_attribute(core_group, attrib_name);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tdelete_vertex_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tif (child.geometry) {\n\t\t\t\t\tconst core_geometry = new CoreGeometry(child.geometry as BufferGeometry);\n\t\t\t\t\tcore_geometry.delete_attribute(attrib_name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdelete_object_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tlet index = 0;\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tconst core_object = new CoreObject(child, index);\n\t\t\t\tcore_object.delete_attribute(attrib_name);\n\t\t\t\tindex++;\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribNormalizeSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tchange_name = ParamConfig.BOOLEAN(false);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribNormalizeSopParamsConfig();\n\nexport class AttribNormalizeSopNode extends TypedSopNode<AttribNormalizeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_normalize';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._normalize_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_normalize_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet normalized_values: NumericAttribValue[] = [];\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\t// if (this._param_only_integer_values) {\n\t\t\t\t// \tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t// \tconst index_by_value = {};\n\t\t\t\t// \tlodash_each(sorted_values, (sorted_value, i)=> index_by_value[sorted_value] = i);\n\t\t\t\t// \tnormalized_values = lodash_map(values, value=> index_by_value[value]);\n\n\t\t\t\t// } else {\n\t\t\t\tmin = lodash_min(values);\n\t\t\t\tmax = lodash_max(values);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_max\", max)\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypedSopNode} from './_Base';\nimport {AttribClass, AttribClassMenuEntries} from '../../../core/geometry/Constant';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreString} from '../../../core/String';\n\nexport enum AttribPromoteMode {\n\tMIN = 0,\n\tMAX = 1,\n\tFIRST_FOUND = 3,\n}\n// const PROMOTE_MODE:PROMOTE_MODE = {\n// \tMIN: 0,\n// \tMAX: 1,\n// \t// AVERAGE: 2,\n// \tFIRST_FOUND: 3,\n// };\nconst PromoteModeMenuEntries = [\n\t{name: 'min', value: AttribPromoteMode.MIN},\n\t{name: 'max', value: AttribPromoteMode.MAX},\n\t{name: 'first_found', value: AttribPromoteMode.FIRST_FOUND},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribPromoteSopParamsConfig extends NodeParamsConfig {\n\tclass_from = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tclass_to = ParamConfig.INTEGER(AttribClass.OBJECT, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tmode = ParamConfig.INTEGER(AttribPromoteMode.MIN, {\n\t\tmenu: {\n\t\t\tentries: PromoteModeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribPromoteSopParamsConfig();\n\nexport class AttribPromoteSopNode extends TypedSopNode<AttribPromoteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_promote';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('sort-amount-up');\n\t}\n\n\tcreate_params() {}\n\n\tprivate _core_group: CoreGroup | undefined;\n\tprivate _core_object: CoreObject | undefined;\n\tprivate _values_per_attrib_name: Dictionary<number[]> = {};\n\tprivate _filtered_values_per_attrib_name: Dictionary<number | undefined> = {};\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._core_group = input_contents[0];\n\n\t\tthis._values_per_attrib_name = {};\n\t\tthis._filtered_values_per_attrib_name = {};\n\n\t\tfor (let core_object of this._core_group.core_objects()) {\n\t\t\tthis._core_object = core_object;\n\t\t\tthis.find_values();\n\t\t\tthis.filter_values();\n\t\t\tthis.set_values();\n\t\t}\n\n\t\t// switch @_param_class_from\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.VERTEX then this.promote_attribute_from_vertex()\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.OBJECT then this.promote_attribute_from_object()\n\t\tthis.set_core_group(this._core_group);\n\t}\n\n\t// private promote_attribute_from_vertex() {\n\t// \t// switch (this.pv.class_to) {\n\t// \t// \tcase AttribClass.VERTEX:\n\t// \t\t\treturn this.promote_attribute_from_vertex_to_vertex();\n\t// \t\t// case AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_vertex_to_object();\n\t// \t// }\n\t// }\n\n\t// private promote_attribute_from_object() {\n\t// \tswitch (this.pv.class_to) {\n\t// \t\tcase AttribClass.VERTEX:\n\t// \t\t// return this.promote_attribute_from_object_to_vertex();\n\t// \t\tcase AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_object_to_object();\n\t// \t}\n\t// }\n\n\t// private promote_attribute_from_vertex_to_vertex() {\n\t// \tif (this._core_group) {\n\t// \t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t// \t\tconst points = this._core_group.points();\n\t// \t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\tconst values = lodash_map(points, (point) => point.attrib_value(attrib_name));\n\t// \t\t\tconst new_value = (() => {\n\t// \t\t\t\tswitch (this.pv.mode) {\n\t// \t\t\t\t\tcase PromoteMode.MIN:\n\t// \t\t\t\t\t\treturn lodash_min(values);\n\t// \t\t\t\t\tcase PromoteMode.MAX:\n\t// \t\t\t\t\t\treturn lodash_max(values);\n\t// \t\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t// \t\t\t\t\tdefault:\n\t// \t\t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t})();\n\n\t// \t\t\tif (new_value != null) {\n\t// \t\t\t\tlodash_each(points, (point) => point.set_attrib_value(attrib_name, new_value));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate find_values() {\n\t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class_from) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\treturn this.find_values_from_points(attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\treturn this.find_values_from_object(attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_values_from_points(attrib_name: string) {\n\t\tif (this._core_object) {\n\t\t\tconst points = this._core_object.points();\n\t\t\tthis._values_per_attrib_name[attrib_name] = points.map((point) => point.attrib_value(attrib_name));\n\t\t}\n\t}\n\n\tprivate find_values_from_object(attrib_name: string) {\n\t\tthis._values_per_attrib_name[attrib_name] = [];\n\t\tif (this._core_object) {\n\t\t\tthis._values_per_attrib_name[attrib_name].push(this._core_object.attrib_value(attrib_name) as number);\n\t\t}\n\t}\n\n\tprivate filter_values() {\n\t\tconst attrib_names = Object.keys(this._values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst values = this._values_per_attrib_name[attrib_name];\n\t\t\tswitch (this.pv.mode) {\n\t\t\t\tcase AttribPromoteMode.MIN:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_min(values);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribPromoteMode.MAX:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_max(values);\n\t\t\t\t\tbreak;\n\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t\t\t\tcase AttribPromoteMode.FIRST_FOUND:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = values[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values() {\n\t\tconst attrib_names = Object.keys(this._filtered_values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst new_value = this._filtered_values_per_attrib_name[attrib_name];\n\t\t\tif (new_value != null) {\n\t\t\t\tswitch (this.pv.class_to) {\n\t\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\t\tthis.set_values_to_points(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\t\tthis.set_values_to_object(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values_to_points(attrib_name: string, new_value: NumericAttribValue) {\n\t\tif (this._core_group && this._core_object) {\n\t\t\tconst attribute_exists = this._core_group.has_attrib(attrib_name);\n\t\t\tif (!attribute_exists) {\n\t\t\t\tconst param_size = 1; // TODO: allow size with larger params\n\t\t\t\tthis._core_group.add_numeric_vertex_attrib(attrib_name, param_size, new_value);\n\t\t\t}\n\n\t\t\tconst points = this._core_object.points();\n\t\t\tpoints.forEach((point) => point.set_attrib_value(attrib_name, new_value));\n\t\t}\n\t}\n\n\tprivate set_values_to_object(attrib_name: string, new_value: NumericAttribValue) {\n\t\tthis._core_object?.set_attrib_value(attrib_name, new_value);\n\t}\n}\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribRemapSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING();\n\tramp = ParamConfig.RAMP();\n\tchange_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribRemapSopParamsConfig();\n\nexport class AttribRemapSopNode extends TypedSopNode<AttribRemapSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_remap';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._remap_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_remap_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tlet normalized_values: NumericAttribValue[] = new Array(points.length);\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tif (this.pv.only_integer_values) {\n\t\t\t\t\tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t\tconst index_by_value: Dictionary<number> = {};\n\t\t\t\t\tsorted_values.forEach((sorted_value, i) => (index_by_value[sorted_value] = i));\n\t\t\t\t\tnormalized_values = values.map((value) => index_by_value[value]);\n\t\t\t\t} else {\n\t\t\t\t\tmin = lodash_min(values);\n\t\t\t\t\tmax = lodash_max(values);\n\t\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_max\", max)\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribRenameSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\told_name = ParamConfig.STRING();\n\tnew_name = ParamConfig.STRING();\n}\nconst ParamsConfig = new AttribRenameSopParamsConfig();\n\nexport class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_rename';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// const group = input_containers[0].group();\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.rename_attrib(this.pv.old_name, this.pv.new_name, this.pv.class);\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreMath} from '../../../core/math/_Module';\nimport {CoreInterpolate} from '../../../core/math/Interpolate';\nimport {CoreOctree} from '../../../core/math/octree/Octree';\nimport {CoreIterator} from '../../../core/Iterator';\n// import lodash_sum from 'lodash/sum';\n\n// enum TransferMethod {\n// \tAUTO = 0,\n// \tARTISTIC = 1,\n// }\n// const TransferMethodMenuEntries = [\n// \t{name: 'auto', value: TransferMethod.AUTO},\n// \t{name: 'artistic', value: TransferMethod.ARTISTIC},\n// ];\n\n// const LATITUDE = 'Latitude'\n// const LONGITUDE = 'Longitude'\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribTransferSopParamsConfig extends NodeParamsConfig {\n\tsrc_group = ParamConfig.STRING();\n\tdest_group = ParamConfig.STRING();\n\tname = ParamConfig.STRING();\n\tmax_samples_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\t// method = ParamConfig.INTEGER(TransferMethod.AUTO, {\n\t// \tmenu: {\n\t// \t\tentries: TransferMethodMenuEntries,\n\t// \t},\n\t// });\n\tdistance_threshold = ParamConfig.FLOAT(1);\n\tblend_width = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new AttribTransferSopParamsConfig();\n\nexport class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_transfer';\n\t}\n\n\t_core_group_dest!: CoreGroup;\n\t_core_group_src!: CoreGroup;\n\n\t// utils\n\t_attrib_names!: string[];\n\t_octree_timestamp: number | undefined;\n\t_prev_param_src_group: string | undefined;\n\t_octree: CoreOctree | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transfer attributes to', 'geometry to transfer attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// this._group_dest = input_containers[0].group();\n\t\t// const container1 = input_containers[1];\n\n\t\tthis._core_group_dest = input_contents[0]; //new CoreGroup(this._group_dest);\n\t\tconst dest_points = this._core_group_dest.points_from_group(this.pv.dest_group);\n\n\t\t// this._group_src = input_containers[1] //container1.group({ clone: false });\n\t\tthis._core_group_src = input_contents[1]; //new CoreGroup(this._group_src);\n\n\t\tthis._attrib_names = this._core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tthis._error_if_attribute_not_found_on_second_input();\n\t\tthis._build_octree_if_required(this._core_group_src);\n\t\tthis._add_attribute_if_required();\n\n\t\tawait this._transfer_attributes(dest_points);\n\t\tthis.set_core_group(this._core_group_dest);\n\t}\n\n\t_error_if_attribute_not_found_on_second_input() {\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tif (!this._core_group_src.has_attrib(attrib_name)) {\n\t\t\t\tthis.states.error.set(`attribute '${attrib_name}' not found on second input`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _build_octree_if_required(core_group: CoreGroup) {\n\t\tconst second_input_changed =\n\t\t\tthis._octree_timestamp == null || this._octree_timestamp !== core_group.timestamp();\n\t\tconst src_group_changed = this._prev_param_src_group !== this.pv.src_group;\n\n\t\tif (src_group_changed || second_input_changed) {\n\t\t\tthis._octree_timestamp = core_group.timestamp();\n\t\t\tthis._prev_param_src_group = this.pv.src_group;\n\n\t\t\tconst points_src = this._core_group_src.points_from_group(this.pv.src_group);\n\n\t\t\tthis._octree = new CoreOctree(this._core_group_src.bounding_box());\n\t\t\tthis._octree.set_points(points_src);\n\t\t}\n\t}\n\n\tprivate _add_attribute_if_required() {\n\t\tthis._attrib_names.forEach((attrib_name) => {\n\t\t\tif (!this._core_group_dest.has_attrib(attrib_name)) {\n\t\t\t\tconst attrib_size = this._core_group_src.attrib_size(attrib_name);\n\t\t\t\tthis._core_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _transfer_attributes(dest_points: CorePoint[]) {\n\t\t// const start_time = performance.now()\n\t\tconst iterator = new CoreIterator();\n\t\tawait iterator.start_with_array(dest_points, this._transfer_attributes_for_point.bind(this));\n\t\t// for(let dest_point of dest_points){\n\n\t\t// \tthis._transfer_attributes_for_point(dest_point)\n\n\t\t// }\n\t}\n\tprivate _transfer_attributes_for_point(dest_point: CorePoint) {\n\t\tconst total_dist = this.pv.distance_threshold + this.pv.blend_width;\n\t\tconst nearest_points: CorePoint[] =\n\t\t\tthis._octree?.find_points(dest_point.position(), total_dist, this.pv.max_samples_count) || [];\n\n\t\t// test[nearest_points.length] = test[nearest_points.length] || 0\n\t\t// test[nearest_points.length] += 1\n\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tthis._interpolate_points(dest_point, nearest_points, attrib_name);\n\t\t}\n\t}\n\n\t// if @_param_draw_connections\n\t// \tlodash_each nearest_points, (nearest_point)=>\n\t// \t\t@_connection_point_pairs.push([ nearest_point.position(), dest_point.position() ])\n\n\t// if @_param_draw_connections\n\t// \tthis._draw_connections()\n\n\tprivate _interpolate_points(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t\tlet new_value: number;\n\t\t// if (this.pv.method == TransferMethod.ARTISTIC) {\n\n\t\tnew_value = CoreInterpolate.perform(\n\t\t\tpoint_dest,\n\t\t\tsrc_points,\n\t\t\tattrib_name,\n\t\t\tthis.pv.distance_threshold,\n\t\t\tthis.pv.blend_width\n\t\t);\n\t\t// } else {\n\t\t// \tnew_value = this._select(point_dest, src_points, attrib_name);\n\t\t// \tconsole.log('B new_value', new_value);\n\t\t// }\n\n\t\tif (new_value != null) {\n\t\t\tpoint_dest.set_attrib_value(attrib_name, new_value);\n\t\t}\n\t}\n\n\t// private _select(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t// \tconst src_values = [];\n\t// \tconst inverse_distances = [];\n\t// \tconst dest_position = point_dest.position();\n\t// \tconst dest_lng_lat = {lng: dest_position.x, lat: dest_position.z};\n\t// \tfor (let src_point of src_points) {\n\t// \t\t// const dist = dest_position.distanceTo(src_point.position()) //* 0.1\n\t// \t\tconst src_position = src_point.position();\n\t// \t\tconst src_lng_lat = {lng: src_position.x, lat: src_position.z};\n\t// \t\tconst dist = CoreMath.geodesic_distance(src_lng_lat, dest_lng_lat);\n\t// \t\tconst dist_squared = dist * dist;\n\t// \t\tconst attrib_value = src_point.attrib_value(attrib_name);\n\n\t// \t\tsrc_values.push(attrib_value / dist_squared);\n\t// \t\tinverse_distances.push(1 / dist_squared);\n\t// \t}\n\n\t// \tconst sum = lodash_sum(src_values) / lodash_sum(inverse_distances);\n\t// \treturn sum;\n\t// }\n\n\t// ROUND(\n\n\t// \tSUM(\n\t// \t\tValue\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\t// \t/\n\t// \tSUM(\n\t// \t\t1\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\n\t// \t,1\n\n\t// )\n\n\t// _draw_connections() {\n\t// \tlet positions = [];\n\t// \tconst indices = [];\n\n\t// \tlodash_each(this._connection_point_pairs, function(current_positions, i) {\n\n\t// \t\tpositions.push(current_positions[0].toArray());\n\t// \t\tpositions.push(current_positions[1].toArray());\n\n\t// \t\tindices.push((2 * i) + 0);\n\t// \t\treturn indices.push((2 * i) + 1);\n\t// \t});\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new THREE.BufferGeometry();\n\t// \tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \treturn this._group_dest.add(object);\n\t// }\n}\n","import lodash_max from 'lodash/max';\n// import lodash_last from 'lodash/last'\nimport lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {_Math} from 'three/src/math/Math';\n// const THREE = {Math: _Math, Vector2, Vector3}\nimport {CorePoint} from '../geometry/Point';\n\nexport class CoreInterpolate {\n\tstatic perform(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tswitch (points_src.length) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn this._interpolate_with_1_point(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src[0],\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\t// positions_src = lodash_map(points_src, (point) -> point.position())\n\t\t\t\t// values_src = lodash_map(points_src, (point) -> point.attrib_value(attrib_name))\n\t\t\t\t// position_dest = point_dest.position()\n\t\t\t\t//if positions_src.length > 3\n\t\t\t\t//\tpositions_src = positions_src.slice(0,3)\n\t\t\t\t//this._interpolate_with_3_points_max(positions_src, values_src, position_dest, dest_value)\n\t\t\t\treturn this._interpolate_with_multiple_points(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src,\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t}\n\t}\n\n\tstatic _interpolate_with_1_point(\n\t\tpoint_dest: CorePoint,\n\t\tpoint_src: CorePoint,\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tconst position_dest = point_dest.position();\n\t\tconst position_src = point_src.position();\n\t\tconst distance = position_dest.distanceTo(position_src);\n\n\t\tconst value_src = point_src.attrib_value(attrib_name);\n\t\treturn this._weighted_value_from_distance(\n\t\t\tpoint_dest,\n\t\t\tvalue_src,\n\t\t\tattrib_name,\n\t\t\tdistance,\n\t\t\tdistance_threshold,\n\t\t\tblend_with\n\t\t);\n\t}\n\n\tstatic _weight_from_distance(distance: number, distance_threshold: number, blend_with: number) {\n\t\treturn (distance - distance_threshold) / blend_with;\n\t}\n\n\tstatic _weighted_value_from_distance(\n\t\tpoint_dest: CorePoint,\n\t\tvalue_src: number,\n\t\tattrib_name: string,\n\t\tdistance: number,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tif (distance <= distance_threshold) {\n\t\t\treturn value_src;\n\t\t} else {\n\t\t\tconst value_dest = point_dest.attrib_value(attrib_name);\n\t\t\tconst blend = this._weight_from_distance(distance, distance_threshold, blend_with);\n\t\t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// switch (point_dest.attrib_size(attrib_name)) {\n\t\t\t// \tcase 1:\n\t\t\t// \t\t// const value_src_as_number = value_src as number;\n\t\t\t// \t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// \tcase 2:\n\t\t\t// \t\tconst value_src_as_vec2 = value_src as Vector2Like;\n\t\t\t// \t\treturn new Vector2(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec2.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec2.y\n\t\t\t// \t\t);\n\t\t\t// \tcase 3:\n\t\t\t// \t\tconst value_src_as_vec3 = value_src as Vector3Like;\n\t\t\t// \t\treturn new Vector3(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec3.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec3.y,\n\t\t\t// \t\t\tblend * value_dest.z + (1 - blend) * value_src_as_vec3.z\n\t\t\t// \t\t);\n\t\t\t// \tdefault:\n\t\t\t// \t\treturn 0;\n\t\t\t// }\n\t\t}\n\t}\n\n\t// @_interpolate_with_3_points_max: (positions_src, values_src, position_dest, dest_value)->\n\t// \tweights = this.weights( position_dest, positions_src )\n\t// \tinterpolated_value = lodash_sum lodash_map values_src, (src_value, i)=>\n\t// \t\tweights[i] * src_value\n\n\t// \tif dest_value?\n\t// \t\t0.5 * (dest_value + src_value)\n\t// \telse\n\t// \t\tinterpolated_value\n\n\t// weights: http://www.sidefx.com/docs/houdini/nodes/vop/pcfilter.html\n\t// w_i = 1-smooth(0, maxd*1.1, d_i);\n\t// maxd is the farthest point, and w_i is the weight for a given point at distance (d_i). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.\n\tstatic _interpolate_with_multiple_points(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\t// let new_value\n\t\t// const positions_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.position()\n\t\t// )\n\t\t// const values_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.attrib_value(attrib_name)\n\t\t// )\n\t\t// const position_dest = point_dest.position()\n\t\t// const attrib_size = point_dest.attrib_size(attrib_name);\n\n\t\t// const distances = lodash_map(positions_src, (src_position) =>\n\t\t// \tsrc_position.distanceTo(position_dest)\n\t\t// )\n\t\t// distances = distances.sort()\n\t\t// max_dist = lodash_last(distances)\n\t\t// const max_dist = distance_threshold + blend_with\n\n\t\t// const weights = lodash_map(positions_src, (src_position, i) => {\n\t\t// \tconst distance = distances[i]\n\t\t// \t//1 - Math.smootherstep(distance, 0, max_dist*1.1)\n\t\t// \treturn this._weight_from_distance(\n\t\t// \t\tdistance,\n\t\t// \t\tdistance_threshold,\n\t\t// \t\tblend_with\n\t\t// \t)\n\t\t// })\n\n\t\t// const total_weight = lodash_sum(weights)\n\n\t\t// weighted_values = lodash_map values_src, (src_value, i)->\n\t\t// \tswitch attrib_size\n\t\t// \t\twhen 1 then src_value * weights[i]\n\t\t// \t\telse\n\t\t// \t\t\tsrc_value.clone().multiplyScalar(weights[i])\n\t\tconst weighted_values_src = points_src.map((point_src) => {\n\t\t\treturn this._interpolate_with_1_point(point_dest, point_src, attrib_name, distance_threshold, blend_with);\n\t\t});\n\t\treturn lodash_max(weighted_values_src) || 0;\n\n\t\t// // TODO: we could have 2 modes of interpolation?\n\t\t// // return (new_value = (() => {\n\t\t// switch (attrib_size) {\n\t\t// \t// when 1 then lodash_sum(weighted_values_src) / values_src.length # mode 1\n\t\t// \tcase 1:\n\t\t// \t\treturn lodash_max(weighted_values_src); // mode 2\n\t\t// \tdefault:\n\t\t// \t\tthrow 'interpolation with multiple vectors not implemented yet';\n\t\t// \t// var new_vector = weighted_values_src[0].clone();\n\t\t// \t// new_vector.x = lodash_sum(lodash_map(weighted_values, 'x')) / total_weight;\n\t\t// \t// new_vector.y = lodash_sum(lodash_map(weighted_values, 'y')) / total_weight;\n\t\t// \t// if (new_vector.z != null) {\n\t\t// \t// \tnew_vector.z = lodash_sum(lodash_map(weighted_values, 'z')) / total_weight;\n\t\t// \t// }\n\t\t// \t// return new_vector;\n\t\t// }\n\t\t// })())\n\t}\n\n\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-positions\n\tstatic weights(current_position: Vector3, other_positions: Vector3[]) {\n\t\tswitch (other_positions.length) {\n\t\t\tcase 1:\n\t\t\t\treturn 1;\n\t\t\tcase 2:\n\t\t\t\treturn this._weights_from_2(current_position, other_positions);\n\t\t\tdefault:\n\t\t\t\tother_positions = other_positions.slice(0, 3);\n\t\t\t\treturn this._weights_from_3(current_position, other_positions);\n\t\t}\n\t}\n\n\tstatic _weights_from_2(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum(dist_to_positions);\n\n\t\treturn [dist_to_positions[1] / distance_total, dist_to_positions[0] / distance_total];\n\t}\n\n\tstatic _weights_from_3(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_positions[0] * dist_to_positions[1],\n\t\t\tdist_to_positions[0] * dist_to_positions[2],\n\t\t\tdist_to_positions[1] * dist_to_positions[2],\n\t\t]);\n\n\t\treturn [\n\t\t\t(dist_to_positions[1] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[1]) / distance_total,\n\t\t];\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {CorePoint} from '../../geometry/Point';\n// import {CoreMath} from './_Module'\n// import OctreeModule from './Octree/_Module';\nimport {OctreeNode, OctreeNodeTraverseCallback} from './Node';\n\nexport class CoreOctree {\n\tprivate _root: OctreeNode;\n\n\tconstructor(bbox: Box3) {\n\t\tthis._root = new OctreeNode(bbox);\n\t}\n\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._root.set_bounding_box(bbox)\n\t// }\n\n\tset_points(points: CorePoint[]) {\n\t\tthis._root.set_points(points);\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tthis._root.traverse(callback);\n\t}\n\n\t// TODO: I am tempted to stop going through the leaves if\n\t// the ones currently seen already have the required number of points.\n\t// but that probably doesn't work as those points may end up being further\n\t// than the ones from the following leaf\n\tfind_points(position: Vector3, distance: number, max_points_count?: number): CorePoint[] {\n\t\tconst sphere = new Sphere(position, distance);\n\t\tlet found_points: CorePoint[] = [];\n\n\t\tif (this._root.intersects_sphere(sphere)) {\n\t\t\tthis._root.points_in_sphere(sphere, found_points);\n\t\t}\n\n\t\tif (max_points_count == null) {\n\t\t\treturn found_points;\n\t\t} else {\n\t\t\tif (found_points.length > max_points_count) {\n\t\t\t\tfound_points = lodash_sortBy(found_points, (point) => {\n\t\t\t\t\treturn point.position().distanceTo(position);\n\t\t\t\t});\n\t\t\t\t// const lng_lat = {lng: position.x, lat: position.z}\n\t\t\t\t// found_points = lodash_sortBy(found_points, (point)=>{\n\t\t\t\t// \tconst src_position = point.position()\n\t\t\t\t// \tconst src_lng_lat = {lng: src_position.x, lat: src_position.z}\n\t\t\t\t// \treturn CoreMath.geodesic_distance(src_lng_lat, lng_lat)\n\t\t\t\t// });\n\n\t\t\t\tfound_points = found_points.slice(0, max_points_count);\n\t\t\t}\n\n\t\t\treturn found_points;\n\t\t}\n\t}\n}\n\n// Octree.Node = OctreeNode;\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_flatten from 'lodash/flatten';\nimport {CorePoint} from '../../geometry/Point';\n\nexport type OctreeNodeTraverseCallback = (node: OctreeNode) => void;\n\nexport class OctreeNode {\n\t_leaves_by_octant: Dictionary<OctreeNode> = {};\n\t_points_by_octant_id: Dictionary<CorePoint[]> = {};\n\t_leaves: OctreeNode[] = [];\n\t// _bbox: Box3 | undefined;\n\t_center: Vector3;\n\t_bounding_boxes_by_octant: Dictionary<Box3> = {};\n\t_bounding_boxes_by_octant_prepared: boolean = false;\n\n\tconstructor(private _bbox: Box3, private _level: number = 0) {\n\t\tthis._center = this._bbox.max\n\t\t\t.clone()\n\t\t\t.add(this._bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._bbox = bbox;\n\t// }\n\n\tlevel() {\n\t\treturn this._level;\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tcallback(this);\n\t\tconst octants = Object.values(this._leaves_by_octant);\n\t\toctants.forEach((node) => {\n\t\t\tnode.traverse(callback);\n\t\t});\n\t}\n\n\tintersects_sphere(sphere: Sphere): boolean {\n\t\tif (this._bbox) {\n\t\t\treturn this._bbox.intersectsSphere(sphere);\n\t\t}\n\t\treturn false;\n\t}\n\n\t//@PERF = 0\n\tpoints_in_sphere(sphere: Sphere, accumulated_points: CorePoint[]): void {\n\t\tif (this._leaves.length == 0) {\n\t\t\tconst found_points = lodash_flatten(Object.values(this._points_by_octant_id));\n\t\t\tconst selected_points = found_points.filter((point) => sphere.containsPoint(point.position()));\n\t\t\tselected_points.forEach((point) => {\n\t\t\t\taccumulated_points.push(point);\n\t\t\t});\n\t\t} else {\n\t\t\t//start_time = performance.now()\n\t\t\tconst leaves_intersecting_with_sphere = this._leaves.filter((leaf) => leaf.intersects_sphere(sphere));\n\n\t\t\t//console.log(\"level: #{@_level}, found #{leaves_intersecting_with_sphere.length} leaves \")\n\t\t\tleaves_intersecting_with_sphere.forEach((leaf) => leaf.points_in_sphere(sphere, accumulated_points));\n\t\t}\n\t}\n\t//this.constructor.PERF += performance.now()-start_time\n\n\tbounding_box(): Box3 | undefined {\n\t\treturn this._bbox;\n\t}\n\n\t// points_count: ->\n\t// \t@_points_count\n\n\tset_points(points: CorePoint[]) {\n\t\t//@_points_count = points.length\n\n\t\tthis._points_by_octant_id = {};\n\t\tfor (let point of points) {\n\t\t\tthis.add_point(point);\n\t\t}\n\n\t\tconst octant_ids = Object.keys(this._points_by_octant_id);\n\t\tif (octant_ids.length > 1) {\n\t\t\toctant_ids.forEach((octant_id) => {\n\t\t\t\tthis.create_leaf(octant_id);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate_leaf(octant_id: string) {\n\t\tconst box = this._leaf_bbox(octant_id);\n\t\tconst leaf = new OctreeNode(box, this._level + 1);\n\t\tthis._leaves_by_octant[octant_id] = leaf;\n\t\tthis._leaves.push(leaf);\n\t\t//throw \"test #{@_level}\"\n\n\t\tleaf.set_points(this._points_by_octant_id[octant_id]);\n\t}\n\n\tadd_point(point: CorePoint) {\n\t\tconst octant_id = this._octant_id(point.position());\n\t\tif (this._points_by_octant_id[octant_id] == null) {\n\t\t\tthis._points_by_octant_id[octant_id] = [];\n\t\t}\n\t\tthis._points_by_octant_id[octant_id].push(point);\n\t}\n\n\tprivate _octant_id(position: Vector3): string {\n\t\tconst x_pos = position.x > this._center.x ? 1 : 0;\n\t\tconst y_pos = position.y > this._center.y ? 1 : 0;\n\t\tconst z_pos = position.z > this._center.z ? 1 : 0;\n\t\treturn `${x_pos}${y_pos}${z_pos}`;\n\t}\n\n\t_leaf_bbox(octant_id: string): Box3 {\n\t\tif (!this._bounding_boxes_by_octant_prepared) {\n\t\t\tthis._prepare_leaves_bboxes();\n\t\t\tthis._bounding_boxes_by_octant_prepared = true;\n\t\t}\n\t\treturn this._bounding_boxes_by_octant[octant_id];\n\t}\n\n\tprivate _bbox_center(x_pos: number, y_pos: number, z_pos: number) {\n\t\tconst corner = this._bbox.min.clone();\n\t\tif (x_pos) {\n\t\t\tcorner.x = this._bbox.max.x;\n\t\t}\n\t\tif (y_pos) {\n\t\t\tcorner.y = this._bbox.max.y;\n\t\t}\n\t\tif (z_pos) {\n\t\t\tcorner.z = this._bbox.max.z;\n\t\t}\n\n\t\treturn corner\n\t\t\t.clone()\n\t\t\t.add(this._center)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\n\tprivate _prepare_leaves_bboxes() {\n\t\tconst bbox_centers = [];\n\t\tbbox_centers.push(this._bbox_center(0, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 1));\n\n\t\tconst bbox_size_quarter = this._bbox.max\n\t\t\t.clone()\n\t\t\t.sub(this._bbox.min)\n\t\t\t.multiplyScalar(0.25);\n\t\tfor (let bbox_center of bbox_centers) {\n\t\t\tconst octant_id = this._octant_id(bbox_center);\n\t\t\tconst bbox = new Box3(\n\t\t\t\tbbox_center.clone().sub(bbox_size_quarter),\n\t\t\t\tbbox_center.clone().add(bbox_size_quarter)\n\t\t\t);\n\t\t\tthis._bounding_boxes_by_octant[octant_id] = bbox;\n\t\t}\n\t\t// this._bounding_boxes_by_octant;\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport lodash_range from 'lodash/range';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass BboxScatterSopParamsConfig extends NodeParamsConfig {\n\tstep_size = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new BboxScatterSopParamsConfig();\n\nexport class BboxScatterSopNode extends TypedSopNode<BboxScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'bbox_scatter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create points from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst container = input_contents[0];\n\t\t// const group = container.group();\n\n\t\tconst step_size = this.pv.step_size;\n\t\t// jitter = @_param_jitter\n\n\t\tconst bbox = container.bounding_box();\n\n\t\tconst range = {\n\t\t\tx: lodash_range(bbox.min.x, bbox.max.x, step_size),\n\t\t\ty: lodash_range(bbox.min.y, bbox.max.y, step_size),\n\t\t\tz: lodash_range(bbox.min.z, bbox.max.z, step_size),\n\t\t};\n\n\t\t// create buffer geometry\n\t\t// const vertices_count = range.x * range.y * range.z;\n\t\tconst positions: number[] = [];\n\t\trange.x.forEach((x) => {\n\t\t\trange.y.forEach((y) => {\n\t\t\t\trange.z.forEach((z) => {\n\t\t\t\t\tpositions.push(x);\n\t\t\t\t\tpositions.push(y);\n\t\t\t\t\tpositions.push(z);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nclass BlendSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING();\n\tblend = ParamConfig.FLOAT(0.5, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new BlendSopParamsConfig();\n\nexport class BlendSopNode extends TypedSopNode<BlendSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'blend';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to blend from', 'geometry to blend to'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// this.request_input_container 0, (container0)=>\n\t\t// \tif container0? && (group0 = container0.group())?\n\t\t// \t\tthis.request_input_container 1, (container1)=>\n\t\t// \t\t\tif container1? && (group1 = container1.group({clone: false}))?\n\n\t\t//this.eval_all_params =>\n\t\t// const container0 = input_containers[0];\n\t\t// const container1 = input_containers[1];\n\n\t\t// const group0 = container0.group();\n\t\t// const group1 = container1.group();\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\n\t\tconst objects0 = core_group0.objects();\n\t\tconst objects1 = core_group1.objects();\n\n\t\tlet object0, object1;\n\t\tfor (let i = 0; i < objects0.length; i++) {\n\t\t\tobject0 = objects0[i];\n\t\t\tobject1 = objects1[i];\n\t\t\tthis.blend(object0, object1, this.pv.blend);\n\t\t}\n\t\tthis.set_core_group(core_group0);\n\t}\n\n\t// \t\telse\n\t// \t\t\tthis.set_error(\"input 1 required\")\n\n\t// else\n\t// \tthis.set_error(\"input 0 required\")\n\tprivate blend(object0: Object3D, object1: Object3D, blend: number) {\n\t\tconst geometry0 = (object0 as Mesh).geometry as BufferGeometry;\n\t\tconst geometry1 = (object1 as Mesh).geometry as BufferGeometry;\n\t\tif (geometry0 == null || geometry1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0 = geometry0.getAttribute(this.pv.attrib_name);\n\t\tconst attrib1 = geometry1.getAttribute(this.pv.attrib_name);\n\t\tif (attrib0 == null || attrib1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0_array = attrib0.array as number[];\n\t\tconst attrib1_array = attrib1.array as number[];\n\n\t\tlet c0, c1;\n\t\tfor (let i = 0; i < attrib0_array.length; i++) {\n\t\t\tc0 = attrib0_array[i];\n\t\t\tc1 = attrib1_array[i];\n\t\t\tif (c1 != null) {\n\t\t\t\tattrib0_array[i] = (1 - blend) * c0 + blend * c1;\n\t\t\t}\n\t\t}\n\n\t\tgeometry0.computeVertexNormals();\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\nimport {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass BoxSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.FLOAT(1);\n\tdivisions = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new BoxSopParamsConfig();\n\nexport class BoxSopNode extends TypedSopNode<BoxSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'box';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create bounding box from (optional)'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\t// }\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 1);\n\t// \tthis.add_param(ParamType.INTEGER, 'divisions', 1, {\n\t// \t\trange: [1, 10],\n\t// \t\trange_locked: [true, false],\n\t// \t});\n\t// \tthis.add_param(ParamType.VECTOR3, 'center', [0, 0, 0]);\n\t// }\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\n\tprivate _cook_without_input() {\n\t\t//\t\tthis.eval_all_params =>\n\t\tconst divisions = this.pv.divisions;\n\t\tconst size = this.pv.size;\n\t\tconst geometry = new BoxBufferGeometry(size, size, size, divisions, divisions, divisions);\n\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tgeometry.computeVertexNormals();\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\t// this.request_input_container 0, (container)=>\n\t\t// \tif container? && (group = container.group({clone: false}))?\n\t\t// \t\tthis.eval_all_params =>\n\n\t\tconst divisions = this.pv.divisions;\n\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max\n\t\t\t.clone()\n\t\t\t.add(bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\n\t\tconst geometry = new BoxBufferGeometry(size.x, size.y, size.z, divisions, divisions, divisions);\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t// else\n\t// \tthis.set_error(\"first input is invalid\")\n\n\t// _divisions() {\n\t// \treturn Math.max(1, this.pv.divisions);\n\t// }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass CacheSopParamsConfig extends NodeParamsConfig {\n\tcache = ParamConfig.STRING('', {hidden: true});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tCacheSopNode.PARAM_CALLBACK_reset(node as CacheSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new CacheSopParamsConfig();\n\nexport class CacheSopNode extends TypedSopNode<CacheSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cache';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to cache'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst is_cache_empty = this.pv.cache == '' || this.pv.cache == null;\n\t\tconst core_group = input_contents[0];\n\t\tif (is_cache_empty && core_group) {\n\t\t\tconst json = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tjson.push(object.toJSON());\n\t\t\t}\n\t\t\tthis.set_core_group(core_group);\n\t\t\tthis.p.cache.set(JSON.stringify(json));\n\t\t} else {\n\t\t\tif (this.pv.cache) {\n\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\tconst jsons = JSON.parse(this.pv.cache);\n\t\t\t\tconst all_objects = [];\n\t\t\t\tfor (let json of jsons) {\n\t\t\t\t\tconst parent = obj_loader.parse(json);\n\t\t\t\t\t// for(let child of parent.children){\n\t\t\t\t\tall_objects.push(parent);\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tthis.set_objects(all_objects);\n\t\t\t} else {\n\t\t\t\tthis.set_objects([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_reset(node: CacheSopNode, param: BaseParamType) {\n\t\tnode.param_callback_PARAM_CALLBACK_reset();\n\t}\n\tasync param_callback_PARAM_CALLBACK_reset() {\n\t\tthis.p.cache.set('');\n\t\tthis.request_container();\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {CircleBufferGeometry} from 'three/src/geometries/CircleGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CircleSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\topen = ParamConfig.BOOLEAN(1);\n\tarc_angle = ParamConfig.FLOAT(360, {\n\t\trange: [0, 360],\n\t\trange_locked: [false, false],\n\t\tvisible_if: {open: 1},\n\t});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CircleSopParamsConfig();\n\nexport class CircleSopNode extends TypedSopNode<CircleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'circle';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0);\n\t\t// this.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook() {\n\t\tif (this.pv.open) {\n\t\t\tthis._create_circle();\n\t\t} else {\n\t\t\tthis._create_disk();\n\t\t}\n\t}\n\n\t_create_circle() {\n\t\tconst geometry = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments, this.pv.arc_angle);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry, ObjectType.LINE_SEGMENTS);\n\t}\n\n\t_create_disk() {\n\t\tconst geometry = new CircleBufferGeometry(this.pv.radius, this.pv.segments);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {CoreColor} from '../../../core/Color';\n// import lodash_times from 'lodash/times'\n// import lodash_each from 'lodash/each'\n// import {CoreGroup} from '../../../core/geometry/Group';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst COLOR_ATTRIB_NAME = 'color';\n\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ColorSopParamsConfig extends NodeParamsConfig {\n\tfrom_attribute = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {from_attribute: 1},\n\t});\n\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\tvisible_if: {from_attribute: 0},\n\t\texpression: {for_entities: true},\n\t});\n\tas_hsv = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {from_attribute: 0},\n\t});\n}\nconst ParamsConfig = new ColorSopParamsConfig();\n\nexport class ColorSopNode extends TypedSopNode<ColorSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'color';\n\t}\n\n\tprivate _r_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _g_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _b_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update color of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tif (this.pv.from_attribute) {\n\t\t\t\tthis._set_from_attribute(core_object);\n\t\t\t} else {\n\t\t\t\tconst has_expression = this.p.color.has_expression();\n\t\t\t\tif (has_expression) {\n\t\t\t\t\tawait this._eval_expressions(core_object);\n\t\t\t\t} else {\n\t\t\t\t\tthis._eval_simple_values(core_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\t(geometry.getAttribute(COLOR_ATTRIB_NAME) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_set_from_attribute(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst points = core_geometry.points();\n\n\t\tconst src_attrib_size = core_geometry.attrib_size(this.pv.attrib_name);\n\t\tconst geometry = core_geometry.geometry();\n\t\tconst src_array = geometry.getAttribute(this.pv.attrib_name).array;\n\t\tconst dest_array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\tswitch (src_attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[i];\n\t\t\t\t\tdest_array[dest_i + 1] = 1 - src_array[i];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 2;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tfor (let i = 0; i < src_array.length; i++) {\n\t\t\t\t\tdest_array[i] = src_array[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 4;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = src_array[src_i + 2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_init_color(core_geometry: CoreGeometry, color: Color) {\n\t\tif (!core_geometry.has_attrib(COLOR_ATTRIB_NAME)) {\n\t\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, DEFAULT_COLOR);\n\t\t}\n\t}\n\n\t_eval_simple_values(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\n\t\tlet new_color: Color;\n\t\tif (this.pv.as_hsv) {\n\t\t\tnew_color = new Color();\n\t\t\tCoreColor.set_hsv(this.pv.color.r, this.pv.color.g, this.pv.color.b, new_color);\n\t\t} else {\n\t\t\tnew_color = this.pv.color; //.clone();\n\t\t}\n\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, new_color);\n\t}\n\n\tasync _eval_expressions(core_object: CoreObject) {\n\t\tconst points = core_object.points();\n\t\tconst object = core_object.object();\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tif (geometry) {\n\t\t\tconst array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\t\tconst tmp_array_r = await this._update_from_param(geometry, array, points, 0);\n\t\t\tconst tmp_array_g = await this._update_from_param(geometry, array, points, 1);\n\t\t\tconst tmp_array_b = await this._update_from_param(geometry, array, points, 2);\n\n\t\t\tif (tmp_array_r) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_r, array, 0);\n\t\t\t}\n\t\t\tif (tmp_array_g) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_g, array, 1);\n\t\t\t}\n\t\t\tif (tmp_array_b) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_b, array, 2);\n\t\t\t}\n\n\t\t\t// to hsv\n\t\t\tif (this.pv.as_hsv) {\n\t\t\t\tlet current = new Color();\n\t\t\t\tlet target = new Color();\n\t\t\t\tlet index;\n\t\t\t\tfor (let point of points) {\n\t\t\t\t\tindex = point.index * 3;\n\t\t\t\t\tcurrent.fromArray(array, index);\n\t\t\t\t\tCoreColor.set_hsv(current.r, current.g, current.b, target);\n\t\t\t\t\ttarget.toArray(array, index);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// const colorr_param = this.param('colorr');\n\t\t// const colorg_param = this.param('colorg');\n\t\t// const colorb_param = this.param('colorb');\n\n\t\t// r\n\t\t// if(colorr_param.has_expression()){\n\t\t// \tawait colorr_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+0] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+0] = this.pv.color.r\n\t\t// \t}\n\t\t// }\n\t\t// g\n\t\t// if(colorg_param.has_expression()){\n\t\t// \tawait colorg_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+1] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+1] = this.pv.color.g\n\t\t// \t}\n\t\t// }\n\t\t// b\n\t\t// if(colorb_param.has_expression()){\n\t\t// \tawait colorb_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+2] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+2] = this.pv.color.b\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\toffset: number\n\t): Promise<number[] | undefined> {\n\t\t// const component_name = ['r', 'g', 'b'][offset];\n\t\tconst param = this.p.color.components[offset];\n\t\tconst param_value = [this.pv.color.r, this.pv.color.g, this.pv.color.b][offset];\n\t\tconst arrays_by_geometry_uuid = [\n\t\t\tthis._r_arrays_by_geometry_uuid,\n\t\t\tthis._g_arrays_by_geometry_uuid,\n\t\t\tthis._b_arrays_by_geometry_uuid,\n\t\t][offset];\n\n\t\tlet tmp_array: number[] | undefined;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\ttmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length);\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t// array[point.index()*3+2] = value\n\t\t\t\t(tmp_array as number[])[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let point of points) {\n\t\t\t\tarray[point.index * 3 + offset] = param_value;\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {_Math} from 'three/src/math/Math'\nimport {Color} from 'three/src/math/Color'\n\nexport class CoreColor {\n\t// use color.toStyle() if needed\n\t// static to_css(color: Color): string {\n\t// \tconst color_elements = color.toArray().map((e) => e * 255)\n\t// \treturn `rgb(${color_elements.join(', ')})`\n\t// }\n\n\t// from THREE.js examples ColorConverter.js\n\tstatic set_hsv(h: number, s: number, v: number, target: Color) {\n\t\th = _Math.euclideanModulo(h, 1)\n\t\ts = _Math.clamp(s, 0, 1)\n\t\tv = _Math.clamp(v, 0, 1)\n\n\t\ttarget.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5)\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreString} from '../../../core/String';\n// import {NodeSimple} from '../../../Core/Graph/NodeSimple'\nimport {CopyStamp} from './utils/CopyStamp';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nclass CopySopParamsConfig extends NodeParamsConfig {\n\tcount = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t});\n\ttransform_only = ParamConfig.BOOLEAN(0);\n\tcopy_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_copy = ParamConfig.STRING('', {\n\t\tvisible_if: {copy_attributes: true},\n\t});\n\tuse_copy_expr = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new CopySopParamsConfig();\n\nexport class CopySopNode extends TypedSopNode<CopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'copy';\n\t}\n\n\tprivate _attribute_names_to_copy: string[] = [];\n\t// private _group: Group|undefined;\n\tprivate _objects: Object3D[] = [];\n\tprivate _stamp_node!: CopyStamp;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be copied', 'points to copy to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\t// async evaluate_inputs_and_params() {\n\t// \tawait this.eval_all_params()\n\t// }\n\n\tasync cook() {\n\t\tlet core_group0;\n\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\tif (container0 != null && (core_group0 = container0.core_content()) != null) {\n\t\t\tif (this.io.inputs.has_input(1)) {\n\t\t\t\tlet core_group1;\n\t\t\t\tconst container1 = await this.container_controller.request_input_container(1);\n\t\t\t\tif (container1 != null && (core_group1 = container1.core_content()) != null) {\n\t\t\t\t\tawait this.cook_with_template(core_group0, core_group1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set('second input required');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.cook_without_template(core_group0);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('first input required');\n\t\t}\n\t}\n\n\tprivate async cook_with_template(instance_core_group: CoreGroup, template_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\n\t\tconst template_points = template_core_group.points();\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tlet instance_matrices = instancer.matrices();\n\n\t\tthis._attribute_names_to_copy = CoreString.attrib_names(this.pv.attributes_to_copy).filter((attrib_name) =>\n\t\t\ttemplate_core_group.has_attrib(attrib_name)\n\t\t);\n\t\tawait this._copy_moved_objects_on_template_points(instance_core_group, instance_matrices, template_points);\n\t\tthis.set_objects(this._objects);\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_on_template_points(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[]\n\t) {\n\t\tfor (let point_index = 0; point_index < template_points.length; point_index++) {\n\t\t\tawait this._copy_moved_object_on_template_point(\n\t\t\t\tinstance_core_group,\n\t\t\t\tinstance_matrices,\n\t\t\t\ttemplate_points,\n\t\t\t\tpoint_index\n\t\t\t);\n\t\t}\n\t\t// template_points.forEach((template_point, point_index) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_object_on_template_point(\n\t\t// \t\t\tinstance_core_group,\n\t\t// \t\t\tinstance_matrices,\n\t\t// \t\t\ttemplate_points,\n\t\t// \t\t\tpoint_index\n\t\t// \t\t);\n\t\t// \t});\n\t\t// });\n\t}\n\n\tprivate _copy_moved_object_on_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[],\n\t\tpoint_index: number\n\t) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst matrix = instance_matrices[point_index];\n\t\t\tconst template_point = template_points[point_index];\n\t\t\tthis.stamp_node.set_point(template_point);\n\n\t\t\tconst moved_objects = await this._get_moved_objects_for_template_point(instance_core_group, point_index);\n\n\t\t\tmoved_objects.forEach((moved_object) => {\n\t\t\t\tif (this.pv.copy_attributes) {\n\t\t\t\t\tthis._copy_attributes_from_template(moved_object, template_point);\n\t\t\t\t}\n\n\t\t\t\t// TODO: that node is getting inconsistent...\n\t\t\t\t// should I always only move the object?\n\t\t\t\t// and have a toggle to bake back to the geo?\n\t\t\t\t// or just enfore the use of a merge?\n\t\t\t\tif (this.pv.transform_only) {\n\t\t\t\t\tmoved_object.applyMatrix(matrix);\n\t\t\t\t} else {\n\t\t\t\t\tmoved_object.geometry.applyMatrix(matrix);\n\t\t\t\t}\n\n\t\t\t\treturn this._objects.push(moved_object);\n\t\t\t});\n\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tprivate _get_moved_objects_for_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tpoint_index: number\n\t): Promise<Object3DWithGeometry[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\t// duplicate or select from instance children\n\t\t\t\tconst moved_objects = this.pv.transform_only\n\t\t\t\t\t? // TODO: why is doing a transform slower than cloning the input??\n\t\t\t\t\t  lodash_compact([instance_core_group.objects()[point_index]])\n\t\t\t\t\t: instance_core_group.clone().objects();\n\n\t\t\t\tresolve(moved_objects);\n\t\t\t} else {\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _stamp_instance_group_if_required(instance_core_group: CoreGroup): Promise<CoreGroup | undefined> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (this.pv.use_copy_expr) {\n\t\t\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\t\t\tlet core_group0: CoreGroup;\n\t\t\t\tif (container0 && (core_group0 = container0.core_content()) != null) {\n\t\t\t\t\t// this.stamp_node.increment_global_value()\n\t\t\t\t\tresolve(core_group0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`input failed for index ${this.stamp_value()}`);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(instance_core_group);\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_for_each_instance(instance_core_group: CoreGroup) {\n\t\t// let p = Promise.resolve(); // Q() in q\n\n\t\tfor (let i = 0; i < this.pv.count; i++) {\n\t\t\tawait this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t}\n\t\t// lodash_times(this.pv.count, (i) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t// \t});\n\t\t// });\n\n\t\t// return p;\n\t}\n\n\tprivate _copy_moved_objects_for_instance(instance_core_group: CoreGroup, i: number) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.stamp_node.set_global_index(i);\n\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\tstamped_instance_core_group.objects().forEach((object) => {\n\t\t\t\t\t// TODO: I should use the Group wrapper, to ensure that material.linewidth is properly cloned\n\t\t\t\t\tconst new_object = CoreObject.clone(object);\n\t\t\t\t\tthis._objects.push(new_object);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// TODO: what if I combine both @_param_count and stamping?!\n\tprivate cook_without_template(instance_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\t\tthis._copy_moved_objects_for_each_instance(instance_core_group).then(() => {\n\t\t\tthis.set_objects(this._objects);\n\t\t});\n\t}\n\n\tprivate _copy_attributes_from_template(object: Object3D, template_point: CorePoint) {\n\t\tthis._attribute_names_to_copy.forEach((attrib_name, i) => {\n\t\t\tconst attrib_value = template_point.attrib_value(attrib_name);\n\t\t\tconst object_wrapper = new CoreObject(object, i);\n\t\t\tobject_wrapper.add_attribute(attrib_name, attrib_value);\n\t\t});\n\t}\n\n\t//\n\t//\n\t// STAMP\n\t//\n\t//\n\tstamp_value(attrib_name?: string) {\n\t\treturn this.stamp_node.value(attrib_name);\n\t}\n\tget stamp_node() {\n\t\treturn (this._stamp_node = this._stamp_node || this.create_stamp_node());\n\t}\n\tprivate create_stamp_node() {\n\t\tconst stamp_node = new CopyStamp(this.scene);\n\t\tthis.dirty_controller.set_forbidden_trigger_nodes([stamp_node]);\n\t\treturn stamp_node;\n\t}\n\n\t// private set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \treturn original_trigger_graph_node.graph_node_id !== this.stamp_node.graph_node_id;\n\t// }\n}\n","import {CorePoint} from '../../../../core/geometry/Point';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../../../scene/PolyScene';\n\nexport class CopyStamp extends CoreGraphNode {\n\tprivate _global_index: number = 0;\n\tprivate _point: CorePoint | undefined;\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'CopyStamp');\n\t}\n\n\tset_point(point: CorePoint) {\n\t\tthis._point = point;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\tset_global_index(index: number) {\n\t\tthis._global_index = index;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\n\tvalue(attrib_name?: string) {\n\t\tif (this._point) {\n\t\t\tif (attrib_name) {\n\t\t\t\treturn this._point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn this._point.index;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._global_index;\n\t\t}\n\t}\n}\n","// import {Core} from '../../../Core/_Module';\nimport {TypedSopNode} from './_Base';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nconst DEFAULT_DATA = [\n\t{value: -40},\n\t{value: -30},\n\t{value: -20},\n\t{value: -10},\n\t{value: 0},\n\t{value: 10},\n\t{value: 20},\n\t{value: 30},\n\t{value: 40},\n\t{value: 50},\n\t{value: 60},\n\t{value: 70},\n\t{value: 80},\n];\nconst DEFAULT_DATA_STR = JSON.stringify(DEFAULT_DATA);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DataSopParamsConfig extends NodeParamsConfig {\n\tdata = ParamConfig.STRING(DEFAULT_DATA_STR);\n}\nconst ParamsConfig = new DataSopParamsConfig();\n\nexport class DataSopNode extends TypedSopNode<DataSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data';\n\t}\n\n\tcook() {\n\t\tlet json = null;\n\t\ttry {\n\t\t\tjson = JSON.parse(this.pv.data);\n\t\t} catch (e) {\n\t\t\tthis.states.error.set('could not parse json');\n\t\t}\n\n\t\tif (json) {\n\t\t\tconst loader = new JsonDataLoader();\n\t\t\tloader.set_json(json);\n\t\t\tconst object = loader.create_object();\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray'\nimport lodash_isString from 'lodash/isString'\nimport {CoreConstant} from './Constant'\n\nexport class CoreAttributeData {\n\tconstructor(private _size: number, private _type: number) {}\n\n\tsize() {\n\t\treturn this._size\n\t}\n\ttype() {\n\t\treturn this._type\n\t}\n\n\tstatic from_value(attrib_value: any) {\n\t\tconst type = lodash_isString(attrib_value)\n\t\t\t? CoreConstant.ATTRIB_TYPE.STRING\n\t\t\t: CoreConstant.ATTRIB_TYPE.NUMERIC\n\t\tconst size = lodash_isArray(attrib_value) ? attrib_value.length : 1\n\n\t\treturn new this(size, type)\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n// import lodash_flatten from 'lodash/flatten';\nimport {TypedSopNode} from './_Base';\n\n// import {CoreLoaderGeometry, LoaderType, LOADER_TYPES} from '../../../Core/Loader/Geometry';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass DataUrlSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('/examples/sop/data_url/basic.json');\n\tjson_data_keys_prefix = ParamConfig.STRING('');\n\tskip_entries = ParamConfig.STRING('');\n\tconvert = ParamConfig.BOOLEAN(0);\n\tconvert_to_numeric = ParamConfig.STRING('', {\n\t\tvisible_if: {convert: 1},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tDataUrlSopNode.PARAM_CALLBACK_reload(node as DataUrlSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new DataUrlSopParamsConfig();\n\nexport class DataUrlSopNode extends TypedSopNode<DataUrlSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data_url';\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tasync cook() {\n\t\tconst loader = new JsonDataLoader({\n\t\t\tdata_keys_prefix: this.pv.json_data_keys_prefix,\n\t\t\tskip_entries: this.pv.skip_entries,\n\t\t\tdo_convert: this.pv.convert,\n\t\t\tconvert_to_numeric: this.pv.convert_to_numeric,\n\t\t});\n\t\tloader.load(this.pv.url, this._on_load.bind(this), undefined, this._on_error.bind(this));\n\t}\n\n\t_on_load(objects: Object3D) {\n\t\t// objects = lodash_flatten(objects);\n\t\tthis.set_objects([objects]);\n\t}\n\t_on_error(error: ErrorEvent) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${error})`);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\t// async _on_open_url(){\n\t// \tconst url = await this.param('url').eval_p()\n\t// \tconst a = document.createElement('a')\n\t// \ta.href = url\n\t// \ta.setAttribute('target', '_blank')\n\t// \ta.click()\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: DataUrlSopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tparam_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass DelaySopParamsConfig extends NodeParamsConfig {\n\tduration = ParamConfig.INTEGER(1000);\n}\nconst ParamsConfig = new DelaySopParamsConfig();\n\nexport class DelaySopNode extends TypedSopNode<DelaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delay';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS]);\n\t}\n\n\tcook(inputs_contents: CoreGroup[]) {\n\t\tconst core_group = inputs_contents[0];\n\t\tconst c = () => {\n\t\t\tthis.set_core_group(core_group);\n\t\t};\n\t\tsetTimeout(c, this.pv.duration);\n\t}\n}\n","import {Box3} from 'three/src/math/Box3';\nimport lodash_isString from 'lodash/isString';\nimport lodash_each from 'lodash/each';\nimport {TypedSopNode} from './_Base';\nimport {CoreString} from '../../../core/String';\nimport {\n\tAttribClass,\n\tAttribClassMenuEntries,\n\tObjectType,\n\tObjectTypeMenuEntries,\n\tObjectTypes,\n} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreObject} from '../../../core/geometry/Object';\n\nenum ComparisonOperator {\n\t'==' = 0,\n\t'<' = 1,\n\t'<=' = 2,\n\t'>=' = 3,\n\t'>' = 4,\n\t'!=' = 5,\n}\nconst ComparisonOperatorMenuEntries = [\n\t{name: '==', value: ComparisonOperator['==']},\n\t{name: '<', value: ComparisonOperator['<']},\n\t{name: '<=', value: ComparisonOperator['<=']},\n\t{name: '>=', value: ComparisonOperator['>=']},\n\t{name: '>', value: ComparisonOperator['>']},\n\t{name: '!=', value: ComparisonOperator['!=']},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n\thide_objects = ParamConfig.BOOLEAN(0);\n\n\t// by_object_type\n\tby_object_type = ParamConfig.BOOLEAN(0);\n\tobject_type = ParamConfig.INTEGER(ObjectTypes.indexOf(ObjectType.MESH), {\n\t\tmenu: {\n\t\t\tentries: ObjectTypeMenuEntries,\n\t\t},\n\t\tvisible_if: {by_object_type: true},\n\t});\n\n\t// by_expression\n\tby_expression = ParamConfig.BOOLEAN(0);\n\texpression = ParamConfig.BOOLEAN('@ptnum==0', {\n\t\tvisible_if: {by_expression: true},\n\t\texpression: {for_entities: true},\n\t});\n\n\t// by_attrib\n\tby_attrib = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_string = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\t// attrib_float = ParamConfig.FLOAT(0, {\n\t// \tvisible_if: {by_attrib: true},\n\t// })\n\tattrib_numeric = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_comparison_operator = ParamConfig.INTEGER(ComparisonOperator['=='], {\n\t\tmenu: {\n\t\t\tentries: ComparisonOperatorMenuEntries,\n\t\t},\n\t\tvisible_if: {by_attrib: true},\n\t});\n\n\t// by_bbox\n\tby_bbox = ParamConfig.BOOLEAN(0);\n\tbbox_size = ParamConfig.VECTOR3([1, 1, 1], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\tbbox_center = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\t//this.add_param( ParamType.STRING, 'index_mode', Core.Geometry.Geometry.INDEX_MODE_FACES )\n\n\t// by_visible\n\tby_visible = ParamConfig.BOOLEAN(0);\n\tkeep_points = ParamConfig.BOOLEAN(1, {\n\t\tvisible_if: {\n\t\t\tclass: AttribClass.OBJECT,\n\t\t},\n\t});\n}\nconst ParamsConfig = new DeleteSopParamsConfig();\n\nexport class DeleteSopNode extends TypedSopNode<DeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delete';\n\t}\n\n\t// _param_attrib_class: number;\n\t// _param_invert: boolean;\n\t// _param_hide_objects: boolean;\n\t// _param_by_object_type: boolean;\n\t// _param_object_type: number;\n\t// _param_by_attrib: boolean;\n\t// _param_attrib_name: string;\n\t// _param_attrib_float: number;\n\t// _param_attrib_string: string;\n\t// _param_attrib_vector: Vector3;\n\t// _param_attrib_ComparisonOperator: number;\n\t// _param_by_expression: boolean;\n\t// _param_expression: string;\n\t// _param_by_bbox: boolean;\n\t// _param_bbox_size: Vector3;\n\t// _param_bbox_center: Vector3;\n\t// _param_by_visible: boolean;\n\n\tprivate _bbox_cache: Box3 | undefined;\n\n\tprivate _marked_for_deletion_per_object_index: Map<number, boolean> = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._bbox_cache = undefined;\n\t\tswitch (this.pv.class) {\n\t\t\tcase AttribClass.VERTEX:\n\t\t\t\tawait this._eval_for_points(core_group);\n\t\t\t\tbreak;\n\t\t\tcase AttribClass.OBJECT:\n\t\t\t\tawait this._eval_for_objects(core_group);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _eval_for_objects(core_group: CoreGroup) {\n\t\t// const objects_to_delete = [];\n\t\tconst objects_to_keep = [];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tthis._marked_for_deletion_per_object_index = new Map();\n\t\tfor (let core_object of core_objects) {\n\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, false);\n\t\t}\n\n\t\tif (this.pv.by_expression) {\n\t\t\tawait this._eval_expressions_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_object_type) {\n\t\t\tthis._eval_type_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\tthis._eval_attrib_for_objects(core_objects);\n\n\t\t\t// \tif !is_deleted && @_param_by_bbox\n\t\t\t// \t\tis_deleted = this._eval_bbox_for_object(object)\n\n\t\t\t// \tif !is_deleted && @_param_by_visible\n\t\t\t// \t\tis_deleted = !object.visible\n\n\t\t\t// \tif @_param_invert\n\t\t\t// \t\tis_deleted = !is_deleted\n\n\t\t\t// \tif @_param_hide_objects\n\t\t\t// \t\tobject.visible = !is_deleted\n\t\t\t// \telse\n\t\t\t// \t\tif is_deleted\n\t\t\t// \t\t\tobjects_to_delete.push(object)\n\n\t\t\t// true; // to ensure the loop isn't breaking, which is what happens when setting the object.visible to false...\n\t\t}\n\n\t\tif (this.pv.invert) {\n\t\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(object_index, !marked_for_deletion);\n\t\t\t});\n\t\t}\n\n\t\tlet core_object, object;\n\t\tconst point_objects_from_deleted_objects: Object3DWithGeometry[] = [];\n\t\t// for (let object_index of Object.keys(this._marked_for_deletion_per_object_index)) {\n\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\tcore_object = core_objects[object_index];\n\t\t\tobject = core_object.object();\n\n\t\t\tif (this.pv.hide_objects) {\n\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tobject.visible = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!marked_for_deletion) {\n\t\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\t}\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tpoint_objects_from_deleted_objects.push(this._point_object(core_object));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if (marked_for_deletion) {\n\t\t\t// \tcmptr += 1;\n\t\t\t// \tif (this.pv.hide_objects) {\n\t\t\t// \t\tobject.visible = true;\n\n\t\t\t// \t} else {\n\t\t\t// \t\t// object.parent.remove(object);\n\t\t\t// \t\t// const c = () =>\n\t\t\t// \t\t// \tobject.traverse(function(object_child) {\n\t\t\t// \t\t// \t\tif (object_child.geometry != null) {\n\t\t\t// \t\t// \t\t\tobject_child.geometry.dispose();\n\t\t\t// \t\t// \t\t}\n\t\t\t// \t\t// \t\t// const material = object_child.material\n\t\t\t// \t\t// \t\t// if(material){ material.dispose() }\n\t\t\t// \t\t// \t})\n\t\t\t// \t\t// ;\n\t\t\t// \t\t// setTimeout(c, 25);\n\t\t\t// \t}\n\t\t\t// }\n\t\t});\n\n\t\tfor (let object of point_objects_from_deleted_objects) {\n\t\t\tobjects_to_keep.push(object);\n\t\t}\n\n\t\tthis.set_objects(objects_to_keep);\n\t}\n\n\t//console.log(\"#{cmptr} marked for deletion\")\n\n\t// TODO: ensure that geometries with no remaining points are removed from the group\n\tprivate async _eval_for_points(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tlet core_object;\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tcore_object = core_objects[i];\n\t\t\tlet core_geometry = core_object.core_geometry();\n\t\t\tif (core_geometry) {\n\t\t\t\tlet points = core_geometry.points_from_geometry();\n\t\t\t\tconst init_points_count = points.length;\n\t\t\t\tif (this.pv.by_expression) {\n\t\t\t\t\tpoints = await this._eval_expressions_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\t\t\tpoints = this._eval_attrib_for_points(points);\n\t\t\t\t}\n\t\t\t\tif (this.pv.by_bbox) {\n\t\t\t\t\tpoints = this._eval_bbox_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (points.length != init_points_count) {\n\t\t\t\t\tconst object = core_object.object() as Object3DWithGeometry;\n\t\t\t\t\tcore_geometry.geometry().dispose();\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\t// TODO: if the new geo only has unconnected points, how do I know it and how do I change the material if it was previously a mesh?\n\t\t\t\t\t\tobject.geometry = CoreGeometry.geometry_from_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: do not dispose material if not cloned\n\t\t\t\t\t\t// if (object.material != null) {\n\t\t\t\t\t\t// \tobject.material.dispose();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tobject.parent != null ? object.parent.remove(object) : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_points(points: CorePoint[]) {\n\t\tconst kept_points = [];\n\n\t\t// const promises = points.map((point, i)=> {\n\t\t// \treturn new Promise( async (resolve, reject)=> {\n\t\t// \t\tthis.context().set_entity(point);\n\t\t// \t\tconst val = await(this.param('expression').eval_p());\n\t\t// \t\tconst keep_point = this.pv.invert ?\n\t\t// \t\t\tval === true\n\t\t// \t\t:\n\t\t// \t\t\tval === false;\n\n\t\t// \t\tif (keep_point) {\n\t\t// \t\t\tkept_points.push(point);\n\t\t// \t\t}\n\t\t// \t\tresolve();\n\t\t// \t});\n\t\t// });\n\n\t\t// await(Promise.all(promises));\n\t\tconst param = this.p.expression;\n\t\tif (this.p.expression.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tlet keep_point = !value;\n\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t}\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(point);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst value = this.pv.expression;\n\t\t\tlet keep_point = !value;\n\t\t\tif (this.pv.invert) {\n\t\t\t\tkeep_point = !keep_point;\n\t\t\t}\n\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(kept_points);\n\t\treturn kept_points;\n\t}\n\n\tprivate async _eval_expressions_for_objects(core_objects: CoreObject[]) {\n\t\tconst param = this.p.expression;\n\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\t\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t\t}\n\t\t}\n\n\t\t// for (let core_object of core_objects) {\n\t\t// \tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t// \tif (!is_marked_for_deletion) {\n\t\t// \t\tthis.processing_context.set_entity(core_object);\n\t\t// \t\t// param.set_dirty();\n\t\t// \t\tawait param.compute();\n\t\t// \t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _eval_attrib_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tif (points.length > 0) {\n\t\t\tconst first_attrib_value = points[0].attrib_value(this.pv.attrib_name);\n\t\t\t// TODO: should I just have @_param_attrib_string?\n\t\t\t// although I may need a vector one... maybe a multiple string?\n\t\t\tconst comparison_attrib_values = lodash_isString(first_attrib_value)\n\t\t\t\t? //@_param_attrib_string\n\t\t\t\t  CoreString.attrib_names(this.pv.attrib_string)\n\t\t\t\t: [this.pv.attrib_numeric.x];\n\n\t\t\tcomparison_attrib_values.forEach((comparison_attrib_value: string | number) => {\n\t\t\t\treturn points.forEach((point) => {\n\t\t\t\t\tconst attrib_value = point.attrib_value(this.pv.attrib_name);\n\n\t\t\t\t\t// TODO: and for vectors? should I have a point.attrib(name).is_equal(value)\n\t\t\t\t\t// or point.is_attrib_equal(name, value) ?\n\t\t\t\t\t//keep_point = (attrib_value != comparison_attrib_value)\n\t\t\t\t\tlet keep_point = !this._comparison(attrib_value, comparison_attrib_value);\n\n\t\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keep_point) {\n\t\t\t\t\t\treturn kept_points.push(point);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn kept_points;\n\t}\n\n\tprivate _comparison(attrib_value: number | string, comparison_attrib_value: number | string) {\n\t\tswitch (this.pv.attrib_ComparisonOperator) {\n\t\t\tcase ComparisonOperator['==']:\n\t\t\t\treturn attrib_value === comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<=']:\n\t\t\t\treturn attrib_value <= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<']:\n\t\t\t\treturn attrib_value < comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>']:\n\t\t\t\treturn attrib_value > comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>=']:\n\t\t\t\treturn attrib_value >= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['!=']:\n\t\t\t\treturn attrib_value !== comparison_attrib_value;\n\t\t}\n\t}\n\n\tprivate _eval_type_for_objects(core_objects: CoreObject[]) {\n\t\tconst object_type_name = ObjectTypes[this.pv.object_type];\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\tconst object = core_object.object();\n\n\t\t\t\tif (object.constructor.name === object_type_name) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_attrib_for_objects(core_objects: CoreObject[]) {\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t// const object = core_object.object();\n\t\t\t\tconst attrib_value = core_object.attrib_value(this.pv.attrib_name);\n\n\t\t\t\tconst comparison_attrib_value = lodash_isString(attrib_value)\n\t\t\t\t\t? this.pv.attrib_string\n\t\t\t\t\t: this.pv.attrib_float;\n\n\t\t\t\tif (attrib_value === comparison_attrib_value) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_bbox_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tlodash_each(points, (point, i) => {\n\t\t\tconst in_bbox = this._bbox.containsPoint(point.position());\n\n\t\t\tconst keep_point = this.pv.invert ? in_bbox : !in_bbox;\n\n\t\t\tif (keep_point) {\n\t\t\t\treturn kept_points.push(point);\n\t\t\t}\n\t\t});\n\n\t\treturn kept_points;\n\t}\n\n\t// private _eval_bbox_for_object(object: Object3D): boolean {\n\t// \tconst object_bbox = new Box3().setFromObject(object);\n\t// \tconst center = new Vector3();\n\t// \tobject_bbox.getCenter(center);\n\n\t// \treturn this.pv.bbox().containsPoint(center);\n\t// }\n\n\tprivate get _bbox() {\n\t\treturn this._bbox_cache != null\n\t\t\t? this._bbox_cache\n\t\t\t: (this._bbox_cache = new Box3(\n\t\t\t\t\tthis.pv.bbox_center.clone().sub(this.pv.bbox_size.clone().multiplyScalar(0.5)),\n\t\t\t\t\tthis.pv.bbox_center.clone().add(this.pv.bbox_size.clone().multiplyScalar(0.5))\n\t\t\t  ));\n\t}\n\n\tprivate _point_object(core_object: CoreObject) {\n\t\tconst core_points = core_object.points();\n\t\tconst geometry = CoreGeometry.geometry_from_points(\n\t\t\tcore_points,\n\t\t\t(<unknown>core_object.object().constructor) as ObjectType\n\t\t);\n\t\treturn this.create_object(geometry, ObjectType.POINTS);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport lodash_chunk from 'lodash/chunk';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreFace} from '../../../core/geometry/Face';\nclass FaceSopParamsConfig extends NodeParamsConfig {\n\tmake_faces_unique = ParamConfig.BOOLEAN(0);\n\tadd_face_center_attribute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tadd_face_id = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\ttransform = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tscale = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {make_faces_unique: 1, transform: 1},\n\t});\n}\nconst ParamsConfig = new FaceSopParamsConfig();\n\nexport class FaceSopNode extends TypedSopNode<FaceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'face';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.make_faces_unique) {\n\t\t\tthis._make_faces_unique(core_group);\n\n\t\t\t// we can only add face_center attrib\n\t\t\t// if the faces have been split\n\t\t\t// otherwise a point may belong to multiple faces\n\t\t\tif (this.pv.add_face_center_attribute) {\n\t\t\t\tthis._add_face_center_attribute(core_group);\n\t\t\t}\n\t\t\tif (this.pv.add_face_id) {\n\t\t\t\tthis._add_face_id(core_group);\n\t\t\t}\n\t\t\tif (this.pv.transform) {\n\t\t\t\tthis._transform_faces(core_group);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _make_faces_unique(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst faces = lodash_chunk(geometry.index?.array || [], 3);\n\t\t\t\tconst points_count = faces.length * 3;\n\t\t\t\tfor (let attrib_name of Object.keys(geometry.attributes)) {\n\t\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\t\tconst attrib_size = attrib.itemSize;\n\t\t\t\t\tconst new_values = new Float32Array(points_count * attrib_size);\n\t\t\t\t\tlet new_value_index = 0;\n\t\t\t\t\tfaces.forEach((face) => {\n\t\t\t\t\t\tface.forEach((index) => {\n\t\t\t\t\t\t\tlodash_times(attrib_size, (i) => {\n\t\t\t\t\t\t\t\tconst current_value = attrib.array[index * attrib_size + i];\n\t\t\t\t\t\t\t\tnew_values[new_value_index] = current_value;\n\t\t\t\t\t\t\t\tnew_value_index += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new BufferAttribute(new_values, attrib_size));\n\t\t\t\t}\n\t\t\t\tconst new_indices = lodash_range(points_count);\n\t\t\t\tgeometry.setIndex(new_indices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_face_center_attribute(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_center';\n\t\tconst face_center = new Vector3();\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, face_center);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _add_face_id(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_id';\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst faces = core_geometry.faces();\n\t\t\t\t// const points_count = core_geometry.points_count();\n\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 1, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < faces.length; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst points = face.points;\n\t\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\t\tconst point = points[j];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _transform_faces(core_group: CoreGroup) {\n\t\tconst attrib_name = 'position';\n\t\tconst face_center = new Vector3();\n\t\tconst new_position = new Vector3();\n\t\tconst scale = this.pv.scale;\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tnew_position.x = position.x * scale + face_center.x * (1 - scale);\n\t\t\t\t\t\tnew_position.y = position.y * scale + face_center.y * (1 - scale);\n\t\t\t\t\t\tnew_position.z = position.z * scale + face_center.z * (1 - scale);\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, new_position);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import lodash_flatten from 'lodash/flatten';\n// import lodash_clone from 'lodash/clone';\n// import lodash_merge from 'lodash/merge';\nimport {TypedSopNode} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {CoreLoaderGeometry} from '../../../core/loader/Geometry';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass FileSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('', {\n\t\tdesktop_browse: {file_type: 'geometry'},\n\t\talways_reference_asset: true,\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileSopNode.PARAM_CALLBACK_reload(node as FileSopNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new FileSopParamsConfig();\n\nexport class FileSopNode extends TypedSopNode<FileSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count_to_zero();\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tcook() {\n\t\tconst loader = new CoreLoaderGeometry(this.pv.url);\n\t\tloader.load(this._on_load.bind(this), this._on_error.bind(this));\n\t}\n\n\tprivate _on_load(objects: Object3D[]) {\n\t\tconsole.log('objects', objects);\n\t\tobjects = lodash_flatten(objects);\n\t\tthis.set_objects(objects);\n\t}\n\tprivate _on_error(message: string) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${message})`);\n\t}\n\n\t// if I add this again, check if it can also work for desktop\n\t// async _on_open_url() {\n\t// \tconst url = this.pv.url\n\t// \tconst a = document.createElement('a');\n\t// \ta.href = url;\n\t// \ta.setAttribute('target', '_blank');\n\t// \ta.click();\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: FileSopNode) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n\t// json_data_keys_prefix(){ return this.pv.json_data_keys_prefix }\n\t// json_skip_entries(){ return this.pv.skip_entries }\n\t// json_convert(){ return this.pv.convert }\n\t// json_convert_to_numeric(){ return this.pv.convert_to_numeric }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {Object3D} from 'three/src/core/Object3D';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreString} from '../String';\n\n// import {GeometryLoaderModule} from './Geometry/_Module';\n// import {DRACOLoader} from './Geometry/DRACOLoader';\n// import {JsonData} from './Geometry/JsonData'\n// import {CoreScriptLoader} from './Script';\nimport axios from 'axios';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\n\n// import {DDSLoader} from '../../../modules/three/examples/jsm/loaders/DDSLoader';\n// import {DRACOLoader} from '../../../modules/three/examples/jsm/loaders/DRACOLoader';\n// import {GLTFLoader} from '../../../modules/three/examples/jsm/loaders/GLTFLoader';\n// import {OBJLoader} from '../../../modules/three/examples/jsm/loaders/OBJLoader';\n\n// const GLTFLoaders = ['DDSLoader', 'DRACOLoader', 'GLTFLoader'];\n// const SCRIPT_URLS_BY_EXT = {\n// \tgltf: GLTFLoaders,\n// \tglb: GLTFLoaders,\n// \tobj: 'OBJLoader',\n// };\n// const THREE_LOADER_BY_EXT = {\n// \tgltf: 'GLTFLoader',\n// \tglb: 'GLTFLoader',\n// \tobj: 'OBJLoader',\n// };\n// const DRACO_EXTENSIONS = ['gltf', 'glb']\n// const DRACO_EXTENSIONS = ['drc'];\n\n// export enum LoaderType {\n// \tAUTO = 'auto',\n// \tJSON_DATA = 'json_data',\n// \t// THREEJS_JSON = 'threejs_json',\n// }\n// export const LOADER_TYPES = [\n// \tLoaderType.AUTO,\n// \tLoaderType.JSON_DATA,\n// \t// LoaderType.THREEJS_JSON,\n// ];\n\nexport class CoreLoaderGeometry {\n\tprivate ext: string;\n\n\tconstructor(\n\t\tprivate url: string // private type: LoaderType, // private requester: any\n\t) {\n\t\tconst elements = this.url.split('.');\n\t\tthis.ext = elements[elements.length - 1].toLowerCase();\n\t\tif (this.ext === 'zip') {\n\t\t\tthis.ext = elements[elements.length - 2];\n\t\t}\n\t\t// if(!this.type){\n\t\t// \tconsole.error(\"CoreLoaderGeometry type is not valid\", this.type)\n\t\t// }\n\t}\n\n\tload(on_success: (objects: Object3D[]) => void, on_error: (error: string) => void) {\n\t\tthis.load_auto()\n\t\t\t.then((object) => {\n\t\t\t\ton_success(object);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ton_error(error);\n\t\t\t});\n\t}\n\n\tprivate load_auto(): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = this.url; //.includes('?') ? this.url : `${this.url}?${Date.now()}`;\n\n\t\t\tif (this.ext == 'json') {\n\t\t\t\taxios\n\t\t\t\t\t.get(url)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\t\t\tobj_loader.parse(response.data, (obj) => {\n\t\t\t\t\t\t\tresolve(this.on_load_success(obj.children[0]));\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst loader = await this.loader_for_ext();\n\t\t\t\tif (loader) {\n\t\t\t\t\tloader.load(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\t(object: any) => {\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t\t\t\t\tresolve(object2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(error_message: ErrorEvent) => {\n\t\t\t\t\t\t\treject(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t\treject(error_message);\n\t\t\t\t}\n\t\t\t\t// CoreLoaderGeometry.loader_for_ext().then((loader) => {\n\t\t\t\t// \tif (loader) {\n\t\t\t\t// \t\tloader.load(\n\t\t\t\t// \t\t\turl,\n\t\t\t\t// \t\t\t(object: Object3D) => {\n\t\t\t\t// \t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t// \t\t\t\t\tresolve(object2);\n\t\t\t\t// \t\t\t\t});\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tnull,\n\t\t\t\t// \t\t\t(error_message: string) => {\n\t\t\t\t// \t\t\t\treject(error_message);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t);\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t// \t\tconsole.warn(error_message);\n\t\t\t\t// \t\treject(error_message);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async on_load_success(object: Object3D | BufferGeometry | object): Promise<Object3D[]> {\n\t\t// console.log(\"animation?\", object.animations)\n\t\t// if(object.animations){\n\t\t// \tawait CoreScriptLoader.load('/three/js/utils/SkeletonUtils')\n\t\t// }\n\t\tif (object instanceof Object3D) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'gltf':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\tcase 'glb':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\t// case 'drc':\n\t\t\t\t// \treturn this.on_load_succes_drc(object);\n\t\t\t\tcase 'obj':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tcase 'json':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tdefault:\n\t\t\t\t\treturn [object];\n\t\t\t}\n\t\t}\n\t\tif (object instanceof BufferGeometry) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'drc':\n\t\t\t\t\treturn this.on_load_succes_drc(object);\n\t\t\t\tdefault:\n\t\t\t\t\treturn [new Mesh(object)];\n\t\t\t}\n\t\t}\n\n\t\t// if it's an object, such as returned by glb\n\t\tswitch (this.ext) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tcase 'glb':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate on_load_succes_gltf(gltf: any): Object3D[] {\n\t\tconst scene = gltf['scene'];\n\t\tscene.animations = gltf.animations;\n\n\t\tconsole.log('[scene]', [scene]);\n\t\treturn [scene]; //.children\n\t}\n\tprivate on_load_succes_drc(geometry: BufferGeometry): Object3D[] {\n\t\tconst mat = new MeshLambertMaterial();\n\t\tconst mesh = new Mesh(geometry, mat);\n\n\t\treturn [mesh]; //.children\n\t}\n\n\tasync loader_for_ext() {\n\t\tswitch (this.ext.toLowerCase()) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.loader_for_gltf();\n\t\t\tcase 'glb':\n\t\t\t\treturn this.loader_for_glb();\n\t\t\tcase 'drc':\n\t\t\t\treturn this.loader_for_drc();\n\t\t\tcase 'obj':\n\t\t\t\treturn this.loader_for_obj();\n\t\t}\n\t}\n\n\tasync loader_for_gltf() {\n\t\t// 'DDSLoader', 'DRACOLoader', 'GLTFLoader'\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\t// const {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\treturn new GLTFLoader();\n\t}\n\tasync loader_for_glb() {\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\n\t\tconst loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/gltf/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\tloader.setDRACOLoader(draco_loader);\n\n\t\treturn loader;\n\t}\n\tasync loader_for_drc() {\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\t// const {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\n\t\t// const loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\t// loader.setDRACOLoader(draco_loader);\n\t\t// console.log('loader', loader);\n\t\treturn draco_loader;\n\t}\n\tasync loader_for_obj() {\n\t\tconst {OBJLoader} = await import(`../../../modules/three/examples/jsm/loaders/OBJLoader`);\n\t\treturn new OBJLoader();\n\t}\n\n\t// \tconst ext_lowercase = this.ext.toLowerCase();\n\t// \tlet script_names = SCRIPT_URLS_BY_EXT[ext_lowercase];\n\t// \tif (script_names) {\n\t// \t\tif (!lodash_isArray(script_names)) {\n\t// \t\t\tscript_names = [script_names];\n\t// \t\t}\n\t// \t\tlet imported_modules = {};\n\t// \t\tlet imported_module;\n\t// \t\tfor (let script_name of script_names) {\n\t// \t\t\timported_module = await CoreScriptLoader.load_module_three_loader(script_name);\n\t// \t\t\timported_modules[script_name] = imported_module;\n\t// \t\t}\n\n\t// \t\tconst loader_class_name = THREE_LOADER_BY_EXT[ext_lowercase];\n\t// \t\tconst loader_class = imported_module[loader_class_name];\n\t// \t\tif (loader_class) {\n\t// \t\t\tconst loader = new loader_class();\n\n\t// \t\t\tif (DRACO_EXTENSIONS.includes(ext_lowercase)) {\n\t// \t\t\t\tconst DRACOLoader = imported_modules.DRACOLoader.DRACOLoader;\n\t// \t\t\t\tconst draco_loader = new DRACOLoader();\n\t// \t\t\t\t// const decoder_path = '/three/js/libs/draco/gltf/'\n\t// \t\t\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t// \t\t\t\t// draco_loader.setDecoderPath( decoder_path );\n\t// \t\t\t\tloader.setDRACOLoader(draco_loader);\n\t// \t\t\t}\n\n\t// \t\t\treturn loader;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Group} from 'three/src/objects/Group';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshPhongMaterial} from 'three/src/materials/MeshPhongMaterial';\nimport {NoColors} from 'three/src/constants';\nimport {Points} from 'three/src/objects/Points';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {VertexColors} from 'three/src/constants';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tconsole.time( 'OBJLoader' );\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar material = undefined;\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! material ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\tmaterial.vertexColors = hasVertexColors ? VertexColors : NoColors;\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\tconsole.timeEnd( 'OBJLoader' );\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n\nexport { OBJLoader };\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {ObjectType} from '../../../core/geometry/Constant';\nclass FuseSopParamsConfig extends NodeParamsConfig {\n\tdist = ParamConfig.FLOAT(0.1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new FuseSopParamsConfig();\n\nexport class FuseSopNode extends TypedSopNode<FuseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'fuse';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to fuse together'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tconst new_objects = [];\n\t\tlet new_object;\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tnew_object = this._fuse_core_object(core_object);\n\t\t\tif (new_object) {\n\t\t\t\tnew_objects.push(new_object);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(new_objects);\n\t}\n\n\tprivate _fuse_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tif (!object) {\n\t\t\treturn;\n\t\t}\n\t\tconst points = core_object.points();\n\n\t\tconst precision = this.pv.dist;\n\t\tconst points_by_position: Dictionary<CorePoint[]> = {};\n\t\tfor (let point of points) {\n\t\t\tconst position = point.position();\n\t\t\tconst rounded_position = new Vector3(\n\t\t\t\tMath.round(position.x / precision),\n\t\t\t\tMath.round(position.y / precision),\n\t\t\t\tMath.round(position.z / precision)\n\t\t\t);\n\t\t\tconst key = rounded_position.toArray().join('-');\n\t\t\tpoints_by_position[key] = points_by_position[key] || [];\n\t\t\tpoints_by_position[key].push(point);\n\t\t}\n\n\t\tconst kept_points: CorePoint[] = [];\n\t\tObject.keys(points_by_position).forEach((key) => {\n\t\t\tkept_points.push(points_by_position[key][0]);\n\t\t});\n\n\t\t(object as Mesh).geometry.dispose();\n\t\tif (kept_points.length > 0) {\n\t\t\t(object as Mesh).geometry = CoreGeometry.geometry_from_points(\n\t\t\t\tkept_points,\n\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t);\n\t\t\treturn object;\n\t\t} else {\n\t\t\t// if(object.material){ object.material.dispose() }\n\t\t\t// if(object.parent){ object.parent.remove(object) }\n\t\t}\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {CoreGeometryOperationHexagon} from '../../../core/geometry/operation/Hexagon';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HexagonsSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\thexagon_radius = ParamConfig.FLOAT(0.1);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tpoints_only = ParamConfig.BOOLEAN(0);\n\t// no need to have centers, as all points are centers anyway\n\t//this.add_param( ParamType.TOGGLE, 'centers_only', 0, {visible_if: {points_only: 1}})\n}\nconst ParamsConfig = new HexagonsSopParamsConfig();\n\nexport class HexagonsSopNode extends TypedSopNode<HexagonsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hexagons';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst operation = new CoreGeometryOperationHexagon(this.pv.size, this.pv.hexagon_radius, this.pv.points_only);\n\t\tconst geometry = operation.process();\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tif (this.pv.points_only) {\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t\t} else {\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {BufferAttribute} from 'three/src/core/BufferAttribute'\nconst THREE = {BufferAttribute, BufferGeometry, Vector2}\nimport lodash_flatten from 'lodash/flatten'\n// import {CoreGeometry} from '../Geometry';\n\nexport class CoreGeometryOperationHexagon {\n\tconstructor(\n\t\tprivate _param_size: THREE.Vector2,\n\t\tprivate _param_hexagon_radius: number,\n\t\tprivate _param_points_only: boolean\n\t) {}\n\n\tprocess(): THREE.BufferGeometry {\n\t\tconst side_length = this._param_hexagon_radius\n\t\tconst half_side_length = side_length * 0.5\n\t\tconst step_size = {\n\t\t\tx: side_length,\n\t\t\ty: Math.cos(Math.PI / 6) * this._param_hexagon_radius,\n\t\t}\n\t\tconst steps_count = {\n\t\t\tx: Math.floor(this._param_size.x / step_size.x),\n\t\t\ty: Math.floor(this._param_size.y / step_size.y),\n\t\t}\n\t\tlet positions = []\n\t\tlet indices = []\n\t\tfor (let y = 0; y < steps_count.y; y++) {\n\t\t\tfor (let x = 0; x < steps_count.x; x++) {\n\t\t\t\tpositions.push([\n\t\t\t\t\t-(this._param_size.x * 0.5) +\n\t\t\t\t\t\tx * step_size.x +\n\t\t\t\t\t\t(y % 2 == 0 ? half_side_length : 0),\n\t\t\t\t\t0,\n\t\t\t\t\t-(this._param_size.y * 0.5) + y * step_size.y,\n\t\t\t\t])\n\n\t\t\t\tif (!this._param_points_only) {\n\t\t\t\t\tif (y >= 1) {\n\t\t\t\t\t\tif (x == 0 || x == steps_count.x - 1) {\n\t\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpositions = lodash_flatten(positions)\n\n\t\tconst geometry = new THREE.BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(new Float32Array(positions), 3)\n\t\t)\n\n\t\tif (!this._param_points_only) {\n\t\t\tindices = lodash_flatten(indices)\n\t\t\tgeometry.setIndex(indices)\n\t\t\tgeometry.computeVertexNormals()\n\t\t}\n\n\t\treturn geometry\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Group} from 'three/src/objects/Group';\nconst THREE = {Group, Object3D};\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGroup} from '../../../Core/Geometry/Group';\n// import {CoreConstant} from '../../../Core/Geometry/Constant'\n\nexport enum HierarchyMode {\n\tADD_PARENT = 'add_parent',\n\tREMOVE_PARENT = 'remove_parent',\n}\nexport const HIERARCHY_MODES: Array<HierarchyMode> = [HierarchyMode.ADD_PARENT, HierarchyMode.REMOVE_PARENT];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HierarchySopParamsConfig extends NodeParamsConfig {\n\tmode = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: HIERARCHY_MODES.map((m, i) => {\n\t\t\t\treturn {name: m, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tlevels = ParamConfig.INTEGER(1, {range: [0, 5]});\n}\nconst ParamsConfig = new HierarchySopParamsConfig();\n\nexport class HierarchySopNode extends TypedSopNode<HierarchySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hierarchy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add or remove parents to/from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\t// const group_wrapper = new CoreGroup(group);\n\n\t\tif (HIERARCHY_MODES[this.pv.mode] == HierarchyMode.ADD_PARENT) {\n\t\t\tconst objects = this._add_parent_to_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t} else {\n\t\t\tconst objects = this._remove_parent_from_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t}\n\t}\n\n\tprivate _add_parent_to_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tlet new_object;\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tnew_object = this._add_parent_to_object(object);\n\t\t\t\tif (new_object) {\n\t\t\t\t\tnew_objects.push(new_object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\tprivate _add_parent_to_object(object: THREE.Object3D): THREE.Object3D {\n\t\tlet new_parent = new THREE.Group();\n\n\t\t// while(child = object.children[0]){\n\t\tnew_parent.add(object);\n\t\t// }\n\n\t\tif (this.pv.levels > 0) {\n\t\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\t\t// for (let i of lodash_range(this.pv.levels - 1)) {\n\t\t\t\tnew_parent = this._add_new_parent(new_parent);\n\t\t\t}\n\t\t}\n\n\t\treturn new_parent;\n\t}\n\n\tprivate _add_new_parent(object: THREE.Object3D): THREE.Group {\n\t\tconst new_parent2 = new THREE.Group();\n\t\tnew_parent2.add(object);\n\t\treturn new_parent2;\n\t}\n\n\tprivate _remove_parent_from_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tconst new_children = this._remove_parent_from_object(object);\n\t\t\t\tfor (let new_child of new_children) {\n\t\t\t\t\tnew_objects.push(new_child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\n\tprivate _remove_parent_from_object(object: THREE.Object3D): THREE.Object3D[] {\n\t\tlet current_children = object.children;\n\n\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\tcurrent_children = this._get_children_from_objects(current_children);\n\t\t}\n\n\t\treturn current_children;\n\t}\n\n\tprivate _get_children_from_objects(objects: THREE.Object3D[]): THREE.Object3D[] {\n\t\tlet object;\n\t\tconst children: Object3D[] = [];\n\t\twhile ((object = objects.pop())) {\n\t\t\tif (object.children) {\n\t\t\t\tfor (let child of object.children) {\n\t\t\t\t\tchildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {ObjectTypeByObject} from '../../../core/geometry/Constant';\nclass InstanceSopParamsConfig extends NodeParamsConfig {\n\tattributes_to_copy = ParamConfig.STRING('instance*');\n\tapply_material = ParamConfig.BOOLEAN(1);\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tvisible_if: {apply_material: 1},\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new InstanceSopParamsConfig();\n\nexport class InstanceSopNode extends TypedSopNode<InstanceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance';\n\t}\n\n\tprivate _globals_handler: GlobalsGeometryHandler | undefined;\n\tprivate _geometry: BufferGeometry | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be instanciated', 'points to instance to'];\n\t}\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group_to_instance = input_contents[0];\n\t\tthis._geometry = undefined;\n\n\t\tconst object_to_instance = core_group_to_instance.objects()[0];\n\t\tif (object_to_instance) {\n\t\t\tconst geometry_to_instance = object_to_instance.geometry;\n\t\t\tif (geometry_to_instance) {\n\t\t\t\tconst core_group = input_contents[1];\n\t\t\t\tthis._create_instance(geometry_to_instance, core_group);\n\t\t\t}\n\t\t}\n\n\t\t// const type = object_to_instance.constructor.name;\n\t\tif (this._geometry) {\n\t\t\tconst type = ObjectTypeByObject(object_to_instance);\n\t\t\tif (type) {\n\t\t\t\tconst object = this.create_object(this._geometry, type);\n\t\t\t\t// object.customDepthMaterial = this._create_depth_material();\n\n\t\t\t\tif (this.pv.apply_material) {\n\t\t\t\t\tawait this._apply_material(object as Mesh);\n\t\t\t\t}\n\n\t\t\t\tthis.set_object(object);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tasync _apply_material(object: Mesh) {\n\t\tconst found_node = this.p.material.found_node();\n\t\tif (found_node) {\n\t\t\tif (found_node.node_context() == NodeContext.MAT) {\n\t\t\t\tconst material_node = found_node as BaseMatNodeType;\n\t\t\t\tthis._globals_handler = this._globals_handler || new GlobalsGeometryHandler();\n\t\t\t\tconst mat_builder_node = material_node as BaseBuilderMatNodeType;\n\t\t\t\tif (mat_builder_node.assembler_controller) {\n\t\t\t\t\tmat_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tconst container = await material_node.request_container();\n\t\t\t\tconst material: Material = container.material();\n\t\t\t\tif (material) {\n\t\t\t\t\tobject.material = material;\n\t\t\t\t\tCoreMaterial.apply_custom_materials(object, material);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a material');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('material node invalid');\n\t\t}\n\t}\n\n\t_create_instance(geometry_to_instance: BufferGeometry, template_core_group: CoreGroup) {\n\t\tthis._geometry = CoreInstancer.create_instance_buffer_geo(\n\t\t\tgeometry_to_instance,\n\t\t\ttemplate_core_group,\n\t\t\tthis.pv.attributes_to_copy\n\t\t);\n\t}\n\n\tprivate _on_create() {\n\t\tconst root = this.scene.root;\n\t\tconst mat_type = 'materials';\n\t\tconst mesh_lambert_builder_type = 'mesh_lambert_builder';\n\t\tconst mat_name = 'MAT';\n\t\tconst mesh_lambert_mat_name = 'mesh_lambert_builder1';\n\t\tlet MAT: MaterialsObjNode | undefined;\n\t\tconst node_with_mat_name = root.node(mat_name);\n\t\tif (node_with_mat_name && node_with_mat_name.type == mat_type) {\n\t\t\tMAT = node_with_mat_name as MaterialsObjNode;\n\t\t} else {\n\t\t\tMAT = root.create_node('materials');\n\t\t\tMAT.set_name(mat_name);\n\t\t}\n\n\t\tconst create_mesh_lambert = (MAT: MaterialsObjNode, mesh_lambert_mat_name: string) => {\n\t\t\tconst mat_node = MAT.create_node(mesh_lambert_builder_type);\n\t\t\tmat_node.set_name(mesh_lambert_mat_name);\n\n\t\t\tconst instance_transform1 = mat_node.create_node('instance_transform');\n\t\t\tlet output1 = mat_node.node('output1');\n\t\t\tif (!output1) {\n\t\t\t\toutput1 = mat_node.create_node('output');\n\t\t\t}\n\t\t\toutput1.set_input('position', instance_transform1, 'position');\n\t\t\toutput1.set_input('normal', instance_transform1, 'normal');\n\n\t\t\treturn mat_node;\n\t\t};\n\t\tconst mesh_lambert_mat = MAT.node(mesh_lambert_mat_name) || create_mesh_lambert(MAT, mesh_lambert_mat_name);\n\n\t\tthis.p.material.set(mesh_lambert_mat.full_path());\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nconst THREE = {Vector3};\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass JitterSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tseed = ParamConfig.INTEGER(1, {range: [0, 100]});\n}\nconst ParamsConfig = new JitterSopParamsConfig();\n\nexport class JitterSopNode extends TypedSopNode<JitterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'jitter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to jitter points of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.points().forEach((point, i) => {\n\t\t\t// TODO: replace by a pseudo random\n\t\t\tconst offset = new THREE.Vector3(\n\t\t\t\t2 * (CoreMath.rand(i * 75 + 764 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 5678 + 3653 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 657 + 48464 + this.pv.seed) - 0.5)\n\t\t\t);\n\t\t\toffset.normalize();\n\t\t\toffset.multiplyScalar(this.pv.amount);\n\n\t\t\tconst new_position = point\n\t\t\t\t.position()\n\t\t\t\t.clone()\n\t\t\t\t.add(offset);\n\t\t\tpoint.set_position(new_position);\n\t\t});\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass LayerSopParamsConfig extends NodeParamsConfig {\n\tlayer = ParamConfig.INTEGER(0, {\n\t\trange: [0, 31],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new LayerSopParamsConfig();\n\nexport class LayerSopNode extends TypedSopNode<LayerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'layer';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change layers of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.layers.set(this.pv.layer);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport lodash_times from 'lodash/times';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LineSopParamsConfig extends NodeParamsConfig {\n\tlength = ParamConfig.FLOAT(1, {range: [0, 10]});\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [2, 100],\n\t\trange_locked: [true, false],\n\t});\n\torigin = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new LineSopParamsConfig();\n\nexport class LineSopNode extends TypedSopNode<LineSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'line';\n\t}\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst points_count = Math.max(2, this.pv.points_count);\n\n\t\tconst positions: number[] = new Array(points_count * 3);\n\t\tconst indices: number[] = new Array(points_count);\n\n\t\tconst last_pt = this.pv.direction\n\t\t\t.clone()\n\t\t\t.normalize()\n\t\t\t.multiplyScalar(this.pv.length);\n\n\t\tlodash_times(points_count, (i) => {\n\t\t\tconst i_n = i / (points_count - 1);\n\t\t\tconst point = last_pt.clone().multiplyScalar(i_n);\n\t\t\tpoint.add(this.pv.origin);\n\t\t\tpoint.toArray(positions, i * 3);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices[(i - 1) * 2] = i - 1;\n\t\t\t\tindices[(i - 1) * 2 + 1] = i;\n\t\t\t}\n\t\t});\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {BaseNodeMat} from '../Mat/_Base'\n\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nclass MaterialSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tmaterial = ParamConfig.OPERATOR_PATH('/MAT/mesh_standard1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new MaterialSopParamsConfig();\n\nexport class MaterialSopNode extends TypedSopNode<MaterialSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'material';\n\t}\n\n\t_param_material: BaseMatNodeType | undefined;\n\t_globals_handler: GlobalsGeometryHandler = new GlobalsGeometryHandler();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to assign material to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\t// TODO: optimize by not fetching the material node everytime\n\t// and maybe have a method in all operator_path params to do that quickly\n\t// TODO: does this apply the material to only 1 node?\n\tasync cook(core_groups: CoreGroup[]) {\n\t\t// let container = input_containers[0];\n\t\t// const group =\tcontainer.group(); // {clone: this.do_clone_inputs()})\n\t\tconst core_group = core_groups[0];\n\n\t\tconst node = this.p.material.found_node();\n\t\tif (node) {\n\t\t\tif (node.node_context() != NodeContext.MAT) {\n\t\t\t\tthis.states.error.set('node is not a material');\n\t\t\t} else {\n\t\t\t\tconst material_node = node as BaseMatNodeType;\n\t\t\t\tconst material = material_node.material;\n\t\t\t\tif (material instanceof ShaderMaterial) {\n\t\t\t\t\tconst material_builder_node = node as BaseBuilderMatNodeType;\n\t\t\t\t\tmaterial_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tawait material_node.request_container();\n\t\t\t\tif (material) {\n\t\t\t\t\tfor (let object of core_group.objects_from_group(this.pv.group)) {\n\t\t\t\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\t\t\t\tobject.traverse((grand_child) => {\n\t\t\t\t\t\t\t\tthis.apply_material(grand_child, material);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.apply_material(object, material);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.set_core_group(core_group);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`material invalid. (error: '${material_node.states.error.message}')`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node '${this.pv.material}' not found`);\n\t\t}\n\t}\n\n\tapply_material(object: Object3D, material: Material) {\n\t\tconst object_with_material = object as Mesh;\n\t\t// if (object.material != null) {\n\t\t// \tobject.material.dispose();\n\t\t// }\n\t\t// TODO: do I really need to clone this material?\n\t\t// does it get cloned when a node fetches the container?\n\t\t// I may only need to clone it for the copy SOP\n\t\tobject_with_material.material = material;\n\t\tCoreMaterial.apply_custom_materials(object, material);\n\t}\n}\n","// import lodash_times from 'lodash/times';\n// import lodash_each from 'lodash/each';\n// import lodash_difference from 'lodash/difference';\n// import lodash_keys from 'lodash/keys';\n// import {Object3D} from 'three/src/core/Object3D';\n// import {Group} from 'three/src/objects/Group';\n// import {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferAttribute, Group, Object3D};\nimport {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {CoreConstant} from '../../../Core/Geometry/Constant';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Points} from 'three/src/objects/Points';\ntype ObjectsByType = {[key in ObjectType]: Object3DWithGeometry[]};\ntype ObjectTypes = Array<ObjectType>;\n\nconst INPUT_NAME = 'geometry to merge';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MergeSopParamsConfig extends NodeParamsConfig {\n\tcompact = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new MergeSopParamsConfig();\n\nexport class MergeSopNode extends TypedSopNode<MergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'merge';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 4);\n\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('compress-arrows-alt');\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tlet all_objects: Object3DWithGeometry[] = []; //new Group()\n\t\tfor (let input_core_group of input_contents) {\n\t\t\tif (input_core_group) {\n\t\t\t\tconst objects = input_core_group.objects();\n\t\t\t\tfor (let object of objects) {\n\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\tall_objects.push(child as Object3DWithGeometry);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.pv.compact) {\n\t\t\tall_objects = this._make_compact(all_objects);\n\t\t}\n\t\tthis.set_objects(all_objects);\n\t}\n\n\t_make_compact(all_objects: Object3DWithGeometry[]): Object3DWithGeometry[] {\n\t\tconst objects_by_type: ObjectsByType = {\n\t\t\t[ObjectType.MESH]: [],\n\t\t\t[ObjectType.POINTS]: [],\n\t\t\t[ObjectType.LINE_SEGMENTS]: [],\n\t\t};\n\t\tconst merged_objects: Object3DWithGeometry[] = [];\n\n\t\tfor (let object of all_objects) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst object = object3d as Object3DWithGeometry;\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\t// const type = child.constructor.name;\n\t\t\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\t\t\tobjects_by_type[ObjectType.MESH].push(object);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((object as LineSegments).isLineSegments) {\n\t\t\t\t\t\t\tobjects_by_type[ObjectType.LINE_SEGMENTS].push(object);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((object as Points).isPoints) {\n\t\t\t\t\t\t\t\tobjects_by_type[ObjectType.POINTS].push(object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfor (let type of Object.keys(objects_by_type) as ObjectTypes) {\n\t\t\tconst objects = objects_by_type[type];\n\n\t\t\tconst geometries = [];\n\t\t\tfor (let object of objects) {\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tgeometry.applyMatrix(object.matrix);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\n\t\t\t// TODO: test that this works with geometries with same attributes\n\t\t\tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t\tif (merged_geometry) {\n\t\t\t\tconst object = this.create_object(merged_geometry, type);\n\t\t\t\tmerged_objects.push(object);\n\t\t\t}\n\n\t\t\t// objects.forEach( object=> {\n\t\t\t// \tif (object.parent != null) {\n\t\t\t// \t\tobject.parent.remove(object);\n\t\t\t// \t}\n\t\t\t// \tif (object.geometry != null) {\n\t\t\t// \t\tobject.geometry.dispose();\n\t\t\t// \t}\n\t\t\t// \t(object.material != null ? object.material.dispose() : undefined);\n\t\t\t// });\n\t\t}\n\t\treturn merged_objects;\n\t}\n}\n\n// _add_missing_attributes: (geo0, geo1)->\n// \tgeo0_attribute_names = lodash_keys(geo0.attributes)\n// \tgeo1_attribute_names = lodash_keys(geo1.attributes)\n\n// \tattributes_not_in_geo0 = lodash_difference(geo1_attribute_names, geo0_attribute_names)\n// \tattributes_not_in_geo1 = lodash_difference(geo0_attribute_names, geo1_attribute_names)\n\n// \tlodash_each attributes_not_in_geo0, (attribute_not_in_geo0)=>\n// \t\tthis._add_attribute(geo0, attribute_not_in_geo0, geo1.attributes[attribute_not_in_geo0])\n// \tlodash_each attributes_not_in_geo1, (attribute_not_in_geo1)=>\n// \t\tthis._add_attribute(geo1, attribute_not_in_geo1, geo0.attributes[attribute_not_in_geo1])\n\n// _add_attribute: (geo, attrib_name, attribute_template)->\n\n// \titem_size = attribute_template['itemSize']\n// \tnormalized = attribute_template['normalized']\n// \tpoints_count = geo.getAttribute('position').array.length / 3\n\n// \traw_values = []\n// \tlodash_times points_count, (i)->\n// \t\tlodash_times item_size, (j)->\n// \t\t\traw_values.push(0)\n\n// \tvalues = new Float32Array(raw_values)\n// \tgeo.setAttribute( attrib_name, new BufferAttribute( values, item_size, normalized) )\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypeAssert} from '../../poly/Assert';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {SimplexNoise} from '../../../../modules/three/examples/jsm/math/SimplexNoise';\n\nenum Operation {\n\tADD = 'add',\n\tSET = 'set',\n\tMULT = 'mult',\n\tSUBSTRACT = 'substract',\n\tDIVIDE = 'divide',\n}\ntype Operations = Array<Operation>;\nconst Operations: Operations = [Operation.ADD, Operation.SET, Operation.MULT, Operation.SUBSTRACT, Operation.DIVIDE];\n\n// const COMPONENT_OFFSETS = [\n// \tnew Vector3(545, 125454, 2142),\n// \tnew Vector3(425, 25746, 95242),\n// \tnew Vector3(765132, 21, 9245),\n// ]\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NoiseSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tfreq = ParamConfig.VECTOR3([1, 1, 1]);\n\toffset = ParamConfig.VECTOR3([0, 0, 0]);\n\toctaves = ParamConfig.INTEGER(3, {\n\t\trange: [1, 8],\n\t\trange_locked: [true, false],\n\t});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseed = ParamConfig.INTEGER(0, {range: [0, 100]});\n\tseparator = ParamConfig.SEPARATOR();\n\tuse_normals = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('position');\n\toperation = ParamConfig.INTEGER(Operations.indexOf(Operation.ADD), {\n\t\tmenu: {\n\t\t\tentries: Operations.map((operation) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: operation,\n\t\t\t\t\tvalue: Operations.indexOf(operation),\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcompute_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new NoiseSopParamsConfig();\n\nexport class NoiseSopNode extends TypedSopNode<NoiseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\t// _param_amount: number;\n\t// _param_offset: Vector3;\n\t// _param_freq: Vector3;\n\t// _param_seed: number;\n\t// _param_use_normals: boolean;\n\t// _param_attrib_name: string;\n\t// _param_operation: number;\n\t// _param_compute_normals: boolean;\n\n\tprivate _simplex_by_seed: Map<number, SimplexNoise> = new Map();\n\n\tprivate _rest_core_group_timestamp: number | undefined;\n\tprivate _rest_points: CorePoint[] = [];\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add noise to', 'rest geometry'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_rest = input_contents[1];\n\n\t\tconst dest_points = core_group.points();\n\t\tif (core_group_rest) {\n\t\t\tif (\n\t\t\t\tthis._rest_core_group_timestamp == null ||\n\t\t\t\tthis._rest_core_group_timestamp != core_group_rest.timestamp()\n\t\t\t) {\n\t\t\t\tthis._rest_points = core_group_rest.points();\n\t\t\t\tthis._rest_core_group_timestamp = core_group_rest.timestamp();\n\t\t\t}\n\t\t}\n\n\t\t// const {SimplexNoise} = await import(`three/examples/jsm/math/SimplexNoise`)\n\t\tconst simplex = this._get_simplex();\n\n\t\tconst use_normals = this.pv.use_normals && core_group.has_attrib('normal');\n\t\tconst target_attrib_size = core_group.attrib_size(this.pv.attrib_name);\n\n\t\tfor (let i = 0; i < dest_points.length; i++) {\n\t\t\tconst dest_point = dest_points[i];\n\t\t\tlet rest_point = core_group_rest ? this._rest_points[i] : dest_point;\n\t\t\tconst current_attrib_value = rest_point.attrib_value(this.pv.attrib_name);\n\t\t\tconst pos = rest_point\n\t\t\t\t.position()\n\t\t\t\t.add(this.pv.offset)\n\t\t\t\t.multiply(this.pv.freq);\n\n\t\t\tlet noise_value = (() => {\n\t\t\t\tif (use_normals) {\n\t\t\t\t\tconst normal = rest_point.attrib_value('normal');\n\t\t\t\t\tconst noise = this.pv.amount * this._fbm(simplex, pos.x, pos.y, pos.z);\n\t\t\t\t\treturn normal.clone().multiplyScalar(noise);\n\t\t\t\t\t//vertex.add(noise_vector)\n\t\t\t\t} else {\n\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 545, pos.y + 125454, pos.z + 2142),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x - 425, pos.y - 25746, pos.z + 95242),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 765132, pos.y + 21, pos.z - 9245)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tnoise_value = (() => {\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn noise_value.x;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturn new Vector2(noise_value.x, noise_value.y);\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturn noise_value;\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tconst new_attrib_value = (() => {\n\t\t\t\tconst operation = Operations[this.pv.operation];\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value + noise_value;\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value * noise_value;\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value / noise_value;\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value - noise_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value.add(noise_value);\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.multiply(noise_value);\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value.divide(noise_value);\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.sub(noise_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tdest_point.set_attrib_value(this.pv.attrib_name, new_attrib_value);\n\t\t}\n\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tfor (let geometry of core_group.geometries()) {\n\t\t\t\t(geometry.getAttribute(this.pv.attrib_name) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.pv.compute_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _fbm(simplex: SimplexNoise, x: number, y: number, z: number): number {\n\t\tlet value = 0.0;\n\t\tlet amplitude = 1.0;\n\t\tfor (let i = 0; i < this.pv.octaves; i++) {\n\t\t\tvalue += amplitude * simplex.noise3d(x, y, z);\n\t\t\tx *= this.pv.freq_increase;\n\t\t\ty *= this.pv.freq_increase;\n\t\t\tz *= this.pv.freq_increase;\n\t\t\tamplitude *= this.pv.amp_attenuation;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _get_simplex(): SimplexNoise {\n\t\tconst simplex = this._simplex_by_seed.get(this.pv.seed);\n\t\tif (simplex) {\n\t\t\treturn simplex;\n\t\t} else {\n\t\t\tconst simplex = this._create_simplex();\n\t\t\tthis._simplex_by_seed.set(this.pv.seed, simplex);\n\t\t\treturn simplex;\n\t\t}\n\t}\n\tprivate _create_simplex(): SimplexNoise {\n\t\tconst seed = this.pv.seed;\n\t\tconst random_generator = {\n\t\t\trandom: function() {\n\t\t\t\treturn CoreMath.rand_float(seed);\n\t\t\t},\n\t\t};\n\t\tconst simplex = new SimplexNoise(random_generator);\n\t\t// for (let key of Object.keys(this._simplex_by_seed)) {\n\t\tthis._simplex_by_seed.delete(seed);\n\t\t// }\n\t\treturn simplex;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n","// import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const DEFAULT_NORMAL = new Vector3(0, 0, 1);\nconst NORMAL_ATTRIB_NAME = 'normal';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NormalsSopParamsConfig extends NodeParamsConfig {\n\tedit = ParamConfig.BOOLEAN(0);\n\tupdate_x = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tx = ParamConfig.FLOAT('@N.x', {\n\t\tvisible_if: {update_x: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\ty = ParamConfig.FLOAT('@N.y', {\n\t\tvisible_if: {update_y: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tz = ParamConfig.FLOAT('@N.z', {\n\t\tvisible_if: {update_z: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\n\trecompute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 0},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new NormalsSopParamsConfig();\n\nexport class NormalsSopNode extends TypedSopNode<NormalsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'normals';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update normals of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.edit) {\n\t\t\tawait this._eval_expressions_for_core_group(core_group);\n\t\t} else {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tif (this.pv.invert) {\n\t\t\tthis._invert_normals(core_group);\n\t\t}\n\n\t\t// add attr if not present\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\t\t// \t\tif(!geometry.getAttribute('normal')){\n\t\t// \t\t\tconst position_values = geometry.attributes['position'].array;\n\t\t// \t\t\tconst normal_values = [];\n\t\t// \t\t\tposition_values.forEach(p=> normal_values.push(0));\n\t\t// \t\t\tgeometry.setAttribute('normal', new Float32BufferAttribute(normal_values, 3));\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (this.pv.edit) {\n\t\t// \tthis._eval_expressions(core_group);\n\t\t// } else {\n\t\t// \tif(this.pv.recompute){\n\t\t// \t\tcore_group.compute_vertex_normals()\n\t\t// \t}\n\t\t// }\n\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\n\t\t// \t\tif (this.pv.invert) {\n\t\t// \t\t\tthis._invert_normals(geometry);\n\t\t// \t\t}\n\n\t\t// \t\tif (!this.pv.edit) {\n\t\t// \t\t\tgeometry.computeVertexNormals();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\t// const points = core_group.points();\n\n\t\t// const attrib_name = 'normal';\n\t\t// for(let point of points){\n\n\t\t// \tthis.context().set_entity(point);\n\n\t\t// \tthis.param(attrib_name).eval(val=> {\n\t\t// \t\tval.normalize();\n\t\t// \t\tpoint.set_attrib_value(attrib_name, val);\n\t\t// \t});\n\t\t// }\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\t}\n\tprivate async _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(NORMAL_ATTRIB_NAME).array as number[];\n\n\t\t// x\n\t\tif (this.pv.update_x) {\n\t\t\tif (this.p.x.has_expression() && this.p.x.expression_controller) {\n\t\t\t\tawait this.p.x.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 0] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 0] = this.pv.x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// y\n\t\tif (this.pv.update_y) {\n\t\t\tif (this.p.y.has_expression() && this.p.y.expression_controller) {\n\t\t\t\tawait this.p.y.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 1] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 1] = this.pv.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// z\n\t\tif (this.pv.update_z) {\n\t\t\tif (this.p.z.has_expression() && this.p.z.expression_controller) {\n\t\t\t\tawait this.p.z.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 2] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 2] = this.pv.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_init_normal(core_geometry: CoreGeometry) {\n\t// \tif (!core_geometry.has_attrib(NORMAL_ATTRIB_NAME)) {\n\t// \t\tcore_geometry.add_numeric_attrib(NORMAL_ATTRIB_NAME, 3, DEFAULT_NORMAL);\n\t// \t}\n\t// }\n\n\tprivate _invert_normals(core_group: CoreGroup) {\n\t\t// this._create_init_normal();\n\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tconst geometry = core_object.core_geometry().geometry();\n\t\t\tconst normal_attrib = geometry.attributes[NORMAL_ATTRIB_NAME];\n\t\t\tif (normal_attrib) {\n\t\t\t\tconst array = normal_attrib.array as number[];\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] *= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// let index_attrib;\n\t\t// if ((index_attrib = geometry.getIndex()) != null) {\n\t\t// \tconst { array } = index_attrib;\n\n\t\t// \tconst faces_count = array.length / 3;\n\t\t// \tfor(let i=0; i<faces_count; i++){\n\t\t// \t\tconst tmp = array[i*3];\n\t\t// \t\tarray[i*3] = array[(i*3)+2];\n\t\t// \t\tarray[(i*3)+2] = tmp;\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\t// \tconst points = geometry_wrapper.points();\n\n\t\t// \tconst attrib_name = 'normal';\n\t\t// \tfor(let point of points){\n\t\t// \t\tconst normal = point.normal();\n\t\t// \t\tnormal.multiplyScalar(-1);\n\t\t// \t\tpoint.set_attrib_value(attrib_name, normal);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass NullSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new NullSopParamsConfig();\n\nexport class NullSopNode extends TypedSopNode<NullSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\tthis.ui_data.set_border_radius(1000);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n}\n","import {TypedSopNode, BaseSopNodeType} from './_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {CoreWalker} from '../../../Core/Walker';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GeometryContainer} from '../../containers/Geometry';\nclass ObjectMergeSopParamsConfig extends NodeParamsConfig {\n\tgeometry = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n}\nconst ParamsConfig = new ObjectMergeSopParamsConfig();\n\nexport class ObjectMergeSopNode extends TypedSopNode<ObjectMergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'object_merge';\n\t}\n\n\t// _param_apply_parent_transform: boolean\n\tinitialize_node() {}\n\n\tasync cook(input_containers: CoreGroup[]) {\n\t\tconst geometry_node = this.p.geometry.found_node();\n\t\tif (geometry_node) {\n\t\t\tif (geometry_node.node_context() == NodeContext.SOP) {\n\t\t\t\tconst container = await geometry_node.request_container();\n\t\t\t\tthis.import_input(geometry_node as BaseSopNodeType, container);\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a geometry');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.geometry}'`);\n\t\t}\n\t}\n\n\timport_input(geometry_node: BaseSopNodeType, container: GeometryContainer) {\n\t\tlet core_group;\n\t\t// I unfortunately need to do a clone here,\n\t\t// because if 2 objectmerge nodes import the same geometry,\n\t\t// they would try to place it under 2 different geo nodes\n\t\t// which is not possible\n\t\tif ((core_group = container.core_content_cloned()) != null) {\n\t\t\t// cannot do that until i know how to make it recook\n\t\t\t// when the obj changes\n\t\t\t// if (this._param_apply_parent_transform){\n\t\t\t// \tconst matrix = geometry_node.parent().object().matrixWorld\n\t\t\t// \tgroup.children.forEach(child=>{\n\t\t\t// \t\tconsole.log(child)\n\t\t\t// \t\tconst geometry = child.geometry\n\t\t\t// \t\tif(geometry){\n\t\t\t// \t\t\tgeometry.applyMatrix(matrix)\n\t\t\t// \t\t}\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.states.error.set('invalid target');\n\t\t}\n\t}\n\n\t// geometry_node() {\n\t// \tif ((this._param_geometry != null) && (this._param_geometry !== '')) {\n\t// \t\tCoreWalker.find_node(this, this._param_geometry);\n\t// \t}\n\t// }\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {Float32BufferAttribute};\nimport {TypedSopNode} from './_Base';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../Core/Geometry/Geometry'\n// import {CorePoint} from '../../../Core/Geometry/Point'\n\n// https://github.com/wwwtyro/geo-ambient-occlusion\nimport geoao from 'geo-ambient-occlusion';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass OcclusionSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING('occlusion');\n\tsamples = ParamConfig.INTEGER(256, {\n\t\trange: [1, 256],\n\t\trange_locked: [true, false],\n\t});\n\tsep = ParamConfig.SEPARATOR();\n\tbuffer_resolution = ParamConfig.INTEGER(512);\n\tbias = ParamConfig.FLOAT(0.01);\n}\nconst ParamsConfig = new OcclusionSopParamsConfig();\n\nexport class OcclusionSopNode extends TypedSopNode<OcclusionSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'occlusion';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tawait this._process_occlusion_on_object(core_object);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _process_occlusion_on_object(core_object: CoreObject) {\n\t\tconst geometry = core_object.core_geometry().geometry();\n\n\t\tconst position_array = geometry.attributes.position.array;\n\t\tconst normal_array = geometry.attributes.normal.array;\n\t\tconst index_array = geometry.getIndex()?.array;\n\t\tconst aoSampler = geoao(position_array, {\n\t\t\tcells: index_array,\n\t\t\tnormals: normal_array,\n\t\t\tresolution: this.pv.buffer_resolution,\n\t\t\tbias: this.pv.bias,\n\t\t});\n\n\t\tfor (let i = 0; i < this.pv.samples; i++) {\n\t\t\taoSampler.sample();\n\t\t}\n\t\tconst ao = aoSampler.report();\n\n\t\tgeometry.setAttribute(this.pv.attrib_name, new THREE.Float32BufferAttribute(ao, 1));\n\n\t\taoSampler.dispose();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// import {Lifespan} from './Concerns/ParticlesSystemGPU/Lifespan';\n// import {GPUCompute} from './Concerns/ParticlesSystemGPU/GPUCompute';\n// import {RenderMaterial} from './Concerns/ParticlesSystemGPU/RenderMaterial';\n// import {ParticleShaderBuilder} from './Concerns/ParticlesSystemGPU/ParticleShaderBuilder'\n// import {AssemblerOwner} from '../../../Engine/Node/Gl/Assembler/Owner';\nimport {ShaderAssemblerParticles} from '../gl/code/assemblers/particles/Particles';\nimport {GlobalsTextureHandler} from '../gl/code/globals/Texture';\n\n// SPECS:\n// - simulation shaders should update the particles at any frame, and resimulate accordingly when at later frames\n// - render material should update at any frame, without having to resimulate\n// - changing the input will recompute, when on first frame only (otherwise an animated geo could make it recompute all the time)\n\n// AssemblerOwner(\n// \tRenderMaterial(\n// \tLifespan(\n// \tGPUCompute(\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ParticlesSystemGpuRenderController} from './utils/ParticlesSystemGPU/RenderController';\nimport {ParticlesSystemGpuComputeController} from './utils/ParticlesSystemGPU/GPUComputeController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShaderName} from '../utils/shaders/ShaderName';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {PointsBuilderMatNode} from '../mat/PointsBuilder';\nimport {ConstantGlNode} from '../gl/Constant';\nclass ParticlesSystemGpuSopParamsConfig extends NodeParamsConfig {\n\t// gpu compute\n\tstart_frame = ParamConfig.FLOAT(1, {range: [1, 100]});\n\tauto_textures_size = ParamConfig.BOOLEAN(1);\n\tmax_textures_size = ParamConfig.VECTOR2([1024, 1024], {visible_if: {auto_textures_size: 1}});\n\ttextures_size = ParamConfig.VECTOR2([64, 64], {visible_if: {auto_textures_size: 0}});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tParticlesSystemGpuSopNode.PARAM_CALLBACK_reset(node as ParticlesSystemGpuSopNode);\n\t\t},\n\t});\n\n\t// render\n\t// this.self.within_param_folder(\"setup\", () => {\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new ParticlesSystemGpuSopParamsConfig();\nexport class ParticlesSystemGpuSopNode extends TypedSopNode<ParticlesSystemGpuSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'particles_system_gpu';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<ShaderAssemblerParticles> = new GlAssemblerController<\n\t\tShaderAssemblerParticles\n\t>(this, ShaderAssemblerParticles);\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tpublic readonly gpu_controller = new ParticlesSystemGpuComputeController(this);\n\tpublic readonly render_controller = new ParticlesSystemGpuRenderController(this);\n\n\tstatic require_webgl2() {\n\t\treturn true;\n\t}\n\tstatic PARAM_CALLBACK_reset(node: ParticlesSystemGpuSopNode) {\n\t\tnode.PARAM_CALLBACK_reset();\n\t}\n\tPARAM_CALLBACK_reset() {\n\t\tthis.gpu_controller.reset_gpu_compute_and_set_dirty();\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to emit particles from'];\n\t}\n\n\tprivate _reset_material_if_dirty_bound = this._reset_material_if_dirty.bind(this);\n\tprotected _children_controller_context = NodeContext.GL;\n\tprivate _on_create_prepare_material_bound = this._on_create_prepare_material.bind(this);\n\tinitialize_node() {\n\t\t// this._init_common_shader_builder(ShaderAssemblerParticles, {\n\t\t// \thas_display_flag: true,\n\t\t// \tupdate_on_dirty: false,\n\t\t// });\n\n\t\tthis.io.inputs.set_count(1);\n\t\t// set to never at the moment\n\t\t// otherwise the input is cloned on every frame inside cook_main()\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\n\t\tthis.add_post_dirty_hook('_reset_material_if_dirty', this._reset_material_if_dirty_bound);\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_prepare_material_bound);\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t// create_params() {\n\t// \t// this._create_gpu_compute_params();\n\t// \t// this._create_render_params();\n\t// \tthis._create_lifespan_params();\n\t// }\n\n\tasync _reset_material_if_dirty() {\n\t\t// if(\n\t\t// \tdirty_trigger.graph_node_id &&\n\t\t// \tthis._render_material_node &&\n\t\t// \tdirty_trigger.graph_node_id() == this._render_material_node.graph_node_id()\n\t\t// ){\n\t\t// \tthis.remove_dirty_state()\n\t\t// } else {\n\t\tif (this.p.material.is_dirty) {\n\t\t\tthis.render_controller.reset_render_material();\n\t\t\tif (!this.is_on_frame_start()) {\n\t\t\t\tawait this.render_controller.init_render_material();\n\t\t\t}\n\t\t}\n\t\t// }\n\t\t// that seems to create an infinite loop\n\t\t// maybe only check if the type of geo has changed?\n\t\t// if(this.input_graph_node(0).is_dirty()){\n\t\t// \tthis.set_compilation_required()\n\t\t// }\n\t}\n\n\tis_on_frame_start(): boolean {\n\t\treturn this.scene.frame == this.pv.start_frame;\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tthis.gpu_controller.set_restart_not_required();\n\t\tconst core_group = input_contents[0];\n\t\t// this._simulation_restart_required = false;\n\t\t// let set_group_required = false;\n\t\t// let points:CorePoint[] = [];\n\t\tconsole.log('particles cook');\n\t\tawait this.compile_if_required();\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.gpu_controller.reset_particle_groups();\n\t\t}\n\n\t\tif (!this.gpu_controller.initialized) {\n\t\t\tawait this.gpu_controller.init(core_group);\n\t\t\t// this.gpu_controller.init_particle_group_points(core_group)\n\t\t\t// await this.gpu_controller.create_gpu_compute();\n\t\t}\n\n\t\t// if (!this._gpu_compute) {\n\t\t// \tawait this.gpu_controller.create_gpu_compute(points);\n\t\t// \t// set_group_required = true\n\t\t// }\n\t\tif (!this.render_controller.initialized) {\n\t\t\tthis.render_controller.init_core_group(core_group);\n\t\t\tawait this.render_controller.init_render_material();\n\t\t}\n\n\t\tthis.gpu_controller.restart_simulation_if_required();\n\t\tthis.gpu_controller.compute_similation_if_required();\n\t\t// if (frame >= this.pv.start_frame) {\n\t\t// \tif (this._last_simulated_frame == null) {\n\t\t// \t\tthis._last_simulated_frame = this._param_start_frame - 1;\n\t\t// \t}\n\t\t// \tif (frame > this._last_simulated_frame) {\n\t\t// \t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t// \t}\n\t\t// }\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tawait this.run_assembler();\n\t\t}\n\t}\n\tasync run_assembler() {\n\t\tconst root_nodes = this._find_root_nodes();\n\t\tconsole.log('root_nodes', root_nodes);\n\t\tif (root_nodes.length > 0) {\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.PARTICLE_SIM_UV);\n\t\t\tthis.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tthis.assembler_controller.assembler.set_root_nodes(root_nodes);\n\n\t\t\tawait this.assembler_controller.assembler.compile();\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\n\t\tconst shaders_by_name: Map<ShaderName, string> = this.assembler_controller.assembler.shaders_by_name();\n\t\tthis.gpu_controller.set_shaders_by_name(shaders_by_name);\n\t\tthis.render_controller.set_shaders_by_name(shaders_by_name);\n\t\t// if (shaders_by_name) {\n\t\t// \tawait this.eval_params(this._new_params);\n\t\t// \tthis._shaders_by_name = lodash_cloneDeep(shaders_by_name);\n\t\t// } else {\n\t\t// \tconsole.warn('no shaders by name from assembler');\n\t\t// }\n\t\tthis.gpu_controller.reset_gpu_compute();\n\t\tthis.gpu_controller.reset_particle_groups(); // this\n\n\t\tawait this.assembler_controller.assign_uniform_values(); // TODO: needed?\n\t}\n\t// shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\t// shaders(): string[] {\n\t// \treturn Object.keys(this._shaders_by_name).map((k) => this._shaders_by_name[k]);\n\t// }\n\n\tprivate _find_root_nodes() {\n\t\tconst nodes: BaseGlNodeType[] = GlNodeFinder.find_attribute_export_nodes(this);\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node is allowed');\n\t\t\treturn [];\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tnodes.push(output_node);\n\t\t}\n\t\treturn nodes;\n\t}\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n\n\tprivate _on_create_prepare_material() {\n\t\t// that's mostly to have the default shader work when creating the node\n\t\t// output.set_input('position', globals, 'position')\n\t\t// or instead we could create the default shader\n\t\tconst root = this.scene.root;\n\t\tconst mat_name = 'MAT';\n\t\tconst particles_mat_name = 'points_particles';\n\t\tconst MAT: MaterialsObjNode = root.nodes_by_type('materials')[0] || this.scene.root.create_node('materials');\n\t\tMAT.set_name(mat_name);\n\n\t\tconst create_points_mat = (MAT: MaterialsObjNode, name: string) => {\n\t\t\tlet points_mat = MAT.node('points_builder1') as PointsBuilderMatNode;\n\t\t\tif (!(points_mat && points_mat.type == PointsBuilderMatNode.type())) {\n\t\t\t\tpoints_mat = MAT.create_node('points_builder');\n\t\t\t}\n\t\t\tpoints_mat.set_name(name);\n\n\t\t\tlet points_mat_constant_point_size = points_mat.node('constant') as ConstantGlNode;\n\t\t\tif (!(points_mat_constant_point_size && points_mat_constant_point_size.type == ConstantGlNode.type())) {\n\t\t\t\tpoints_mat_constant_point_size = points_mat.create_node('constant');\n\t\t\t\tpoints_mat_constant_point_size.set_name('constant_point_size');\n\t\t\t}\n\t\t\tpoints_mat_constant_point_size.p.float.set(4); // to match the default point material\n\t\t\tconst points_mat_output1 = points_mat.node('output1');\n\t\t\tif (points_mat_output1) {\n\t\t\t\tpoints_mat_output1.set_input(\n\t\t\t\t\t'gl_PointSize',\n\t\t\t\t\tpoints_mat_constant_point_size,\n\t\t\t\t\tConstantGlNode.OUTPUT_NAME\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn points_mat;\n\t\t};\n\t\tconst points_mat = MAT.node(particles_mat_name) || create_points_mat(MAT, particles_mat_name);\n\t\tif (points_mat) {\n\t\t\tconst new_path = points_mat.full_path();\n\t\t\tif (this.p.material.raw_input != new_path) {\n\t\t\t\tthis.p.material.set(new_path);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n// import {GlobalsTextureHandler} from '../../Assembler/Globals/Texture';\n\nimport TemplateDefault from '../../templates/particles/Default.glsl';\n// import TemplatePosition from './Template/Particle/Position.glsl'\n// import TemplateVelocity from './Template/Particle/Velocity.glsl'\n// import TemplateAcceleration from './Template/Particle/Acceleration.glsl'\n\n// import {ShaderConfig} from './Config/ShaderConfig';\n// import {VariableConfig} from './Config/VariableConfig';\n// import {ShaderName, LineType} from '../../../../../Engine/Node/Gl/Assembler/Util/CodeBuilder';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {TextureAllocationsController} from '../../utils/TextureAllocationsController';\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {BaseGlNodeType} from '../../../_Base';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNodeTraverser} from '../../../../utils/shaders/NodeTraverser';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {GlobalsTextureHandler} from '../../globals/Texture';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\n\nexport class ShaderAssemblerParticles extends BaseGlShaderAssembler {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tget _template_shader() {\n\t\treturn undefined;\n\t}\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName) {\n\t\treturn TemplateDefault;\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tasync compile() {\n\t\tawait this.setup_shader_names_and_variables();\n\t\tawait this.update_shaders();\n\t}\n\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\tconst attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\tconst attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tasync setup_shader_names_and_variables() {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this, this._gl_parent_node);\n\t\tthis._leaf_nodes = node_traverser.leaves_from_nodes(this._root_nodes);\n\n\t\tfor (let node of this._root_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\tconsole.log('root and leaf:', this._root_nodes, this._leaf_nodes);\n\t\tthis._texture_allocations_controller = new TextureAllocationsController();\n\t\tthis._texture_allocations_controller.allocate_connections_from_root_nodes(this._root_nodes, this._leaf_nodes);\n\n\t\t// const globals_handler = new GlobalsTextureHandler()\n\t\t// this.set_assembler_globals_handler(globals_handler)\n\t\tif (this.globals_handler) {\n\t\t\t((<unknown>this.globals_handler) as GlobalsTextureHandler)?.set_texture_allocations_controller(\n\t\t\t\tthis._texture_allocations_controller\n\t\t\t);\n\t\t}\n\n\t\tthis._reset_shader_configs();\n\t}\n\tasync update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tconsole.log('this.shader_names', this.shader_names);\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tconsole.log(shader_name, lines.join('\\n'));\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.VECTOR3, 'position', [0, 0, 0]);\n\t\toutput_child.add_param(ParamType.VECTOR3, 'velocity', [0, 0, 0]);\n\t\t// output_child.add_param(ParamType.VECTOR3, 'accacceleration', [0, 0, 0]);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('velocity', ConnectionPointType.VEC3),\n\t\t\t// new TypedNamedConnectionPoint('acceleration', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('frame', ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tallow_attribute_exports() {\n\t\treturn true;\n\t}\n\n\tget texture_allocations_controller() {\n\t\treturn (this._texture_allocations_controller =\n\t\t\tthis._texture_allocations_controller || new TextureAllocationsController());\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn this._texture_allocations_controller?.create_shader_configs() || [];\n\t\t// [\n\t\t// \tnew ShaderConfig('position', ['position'], []),\n\t\t// \t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t// ]\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\t// new VariableConfig('position', {\n\t\t\t// \tdefault: 'vec3( position )',\n\t\t\t// \tprefix: 'vec3 transformed = '\n\t\t\t// }),\n\t\t];\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.texture_allocations_controller.shader_names() || [];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.texture_allocations_controller.input_names_for_shader_name(root_node, shader_name) || [];\n\t\t// return this.shader_config(shader_name).input_names()\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\tadd_export_body_line(\n\t\texport_node: BaseGlNodeType,\n\t\tinput_name: string,\n\t\tinput: BaseGlNodeType,\n\t\tvariable_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (input) {\n\t\t\tconst var_input = export_node.variable_for_input(input_name);\n\t\t\tconst new_var = ThreeToGl.vector3(var_input);\n\t\t\tif (new_var) {\n\t\t\t\tconst texture_variable = this.texture_allocations_controller.variable(variable_name);\n\n\t\t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\t\tconst component = texture_variable.component;\n\n\t\t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(export_node, [line], shader_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.texture_allocations_controller.input_names_for_shader_name(output_node, shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst variable_name = input_name;\n\t\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tvariable_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (attribute_node.is_importing) {\n\t\t\tconst gl_type = attribute_node.gl_type();\n\t\t\tconst attribute_name = attribute_node.attribute_name;\n\t\t\tconst new_value = this.globals_handler?.read_attribute(\n\t\t\t\tattribute_node,\n\t\t\t\tgl_type,\n\t\t\t\tattribute_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\n\t\t\t// re-export to ensure it is available on next frame\n\t\t\tconst texture_variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\tconst variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\t\tif (variable) {\n\t\t\t\t\tconst component = variable.component;\n\t\t\t\t\tconst body_line = `gl_FragColor.${component} = ${var_name}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this.add_import_body_line(\n\t\t\t// \tattribute_node,\n\t\t\t// \tshader_name,\n\t\t\t// \tAttribute.output_name(),\n\t\t\t// \tattribute_node.attribute_name()\n\t\t\t// \t)\n\t\t}\n\t\tif (attribute_node.is_exporting) {\n\t\t\tconst input = attribute_node.connected_input_node();\n\t\t\tif (input) {\n\t\t\t\tconst variable_name = attribute_node.attribute_name;\n\n\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\tattribute_node,\n\t\t\t\t\tattribute_node.input_name,\n\t\t\t\t\tinput,\n\t\t\t\t\tvariable_name,\n\t\t\t\t\tshaders_collection_controller\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'frame':\n\t\t\t\t\tthis._handle_globals_frame(globals_node, output_name, shaders_collection_controller);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._handle_globals_default(globals_node, output_name, shaders_collection_controller);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handle_globals_frame(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst definition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst body_line = `float ${var_name} = ${output_name}`;\n\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\tthis.set_frame_dependent();\n\t}\n\n\tprivate _handle_globals_default(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst output_connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (output_connection_point) {\n\t\t\tconst gl_type = output_connection_point.type;\n\n\t\t\tconst attrib_read = this.globals_handler?.read_attribute(\n\t\t\t\tglobals_node,\n\t\t\t\tgl_type,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${attrib_read}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n}\n","export default \"#include <common>\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec2 particleUV = (gl_FragCoord.xy / resolution.xy);\\n\\n\\t// INSERT BODY\\n\\n}\"","import lodash_flatten from 'lodash/flatten';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_includes from 'lodash/includes';\nimport {TextureAllocation} from './TextureAllocation';\nimport {BaseGlNodeType} from '../../_Base';\n\n// import {TypedConnection, COMPONENTS_COUNT_BY_TYPE} from '../../../../../Engine/Node/Gl/GlData';\nimport {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {ShaderName, ParticleShaderNames} from '../../../utils/shaders/ShaderName';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ConnectionPointComponentsCountMap} from '../../../utils/connections/ConnectionPointType';\nimport {AttributeGlNode} from '../../Attribute';\nimport {BaseNamedConnectionPointType} from '../../../utils/connections/NamedConnectionPoint';\nimport {GlobalsGlNode} from '../../Globals';\n\nexport type TextureAllocationsControllerData = Dictionary<TextureVariableData[] | undefined>[];\n\nexport class TextureAllocationsController {\n\tprivate _allocations: TextureAllocation[] = [];\n\tprivate _next_allocation_index: number = 0;\n\n\tconstructor() {}\n\tallocate_connections_from_root_nodes(root_nodes: BaseGlNodeType[], leaf_nodes: BaseGlNodeType[]) {\n\t\t// const connections_by_node_id = {}\n\t\tconst variables = [];\n\n\t\t// TODO: let's go through the output node first, in case there is a name conflict, it will have priority\n\t\tfor (let node of root_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tfor (let connection_point of node.io.inputs.named_input_connection_points) {\n\t\t\t\t\t\tconst input = node.io.inputs.named_input(connection_point.name);\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\tconnection_point.name,\n\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attrib_node = node as AttributeGlNode;\n\t\t\t\t\tconst named_input: BaseGlNodeType | null = attrib_node.connected_input_node();\n\t\t\t\t\tconst connection_point:\n\t\t\t\t\t\t| BaseNamedConnectionPointType\n\t\t\t\t\t\t| undefined = attrib_node.connected_input_connection_point();\n\t\t\t\t\tif (named_input && connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattrib_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let node of leaf_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tconst globals_node = node as GlobalsGlNode;\n\t\t\t\t\tconst output_names_attributes = ['position', 'normal', 'color', 'uv'];\n\t\t\t\t\t// const output_names_not_attributes = ['frame', 'gl_FragCoord', 'gl_PointCoord'];\n\t\t\t\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\t\t\t\t// const is_attribute = !lodash_includes(output_names_not_attributes, output_name)\n\n\t\t\t\t\t\t// is_attribute, as opposed to frame, gl_FragCoord and gl_PointCoord which are either uniforms or provided by the renderer\n\t\t\t\t\t\tconst is_attribute = output_names_attributes.includes(output_name);\n\n\t\t\t\t\t\tif (is_attribute) {\n\t\t\t\t\t\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(\n\t\t\t\t\t\t\t\toutput_name\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[gl_type]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attribute_node = node as AttributeGlNode;\n\t\t\t\t\tconst connection_point = attribute_node.output_connection_point();\n\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_output)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattribute_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.allocate_variables(variables);\n\t}\n\tallocate_variables(variables: TextureVariable[]) {\n\t\tconst variables_by_size_inverse = lodash_sortBy(variables, (variable) => {\n\t\t\treturn -variable.size;\n\t\t});\n\t\tfor (let variable of variables_by_size_inverse) {\n\t\t\tthis.allocate_variable(variable);\n\t\t}\n\t}\n\tallocate_variable(new_variable: TextureVariable) {\n\t\tlet allocated = this.has_variable(new_variable.name);\n\t\tif (allocated) {\n\t\t\tconst allocated_variable = this.variables().filter((v) => v.name == new_variable.name)[0];\n\t\t\tnew_variable.graph_node_ids?.forEach((boolean, graph_node_id: string) => {\n\t\t\t\tallocated_variable.add_graph_node_id(graph_node_id);\n\t\t\t});\n\t\t} else {\n\t\t\tif (!allocated) {\n\t\t\t\tfor (let allocation of this._allocations) {\n\t\t\t\t\tif (!allocated && allocation.has_space_for_variable(new_variable)) {\n\t\t\t\t\t\tallocation.add_variable(new_variable);\n\t\t\t\t\t\tallocated = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!allocated) {\n\t\t\t\tconst new_allocation = new TextureAllocation(this.next_allocation_name());\n\t\t\t\tthis._allocations.push(new_allocation);\n\t\t\t\tnew_allocation.add_variable(new_variable);\n\t\t\t}\n\t\t}\n\t}\n\n\tnext_allocation_name(): ShaderName {\n\t\tconst name = ParticleShaderNames[this._next_allocation_index];\n\t\tthis._next_allocation_index += 1;\n\t\treturn name;\n\t}\n\n\tshader_names(): ShaderName[] {\n\t\tconst explicit_shader_names = this._allocations.map((a) => a.shader_name);\n\n\t\t// include dependencies if needed\n\t\t// TODO: typescript - do I need those?\n\t\t// if (lodash_includes(explicit_shader_names, 'acceleration')) {\n\t\t// \texplicit_shader_names.push('velocity');\n\t\t// }\n\t\t// if (lodash_includes(explicit_shader_names, 'velocity')) {\n\t\t// \texplicit_shader_names.push('position');\n\t\t// }\n\n\t\treturn lodash_uniq(explicit_shader_names);\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\t// new ShaderConfig('position', ['position'], []),\n\t\t\t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t];\n\t}\n\tallocation_for_shader_name(shader_name: ShaderName): TextureAllocation {\n\t\treturn this._allocations.filter((a) => a.shader_name == shader_name)[0];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\tconst allocation = this.allocation_for_shader_name(shader_name);\n\t\tif (allocation) {\n\t\t\treturn allocation.input_names_for_node(root_node);\n\t\t}\n\t}\n\t// find_variable(root_node: BaseNodeGl, shader_name: ShaderName, input_name: string): TextureVariable{\n\t// \tconst allocation = this.allocation_for_shader_name(shader_name)\n\t// \tif(allocation){\n\t// \t\treturn allocation.find_variable_with_node(root_node, input_name)\n\t// \t}\n\t// }\n\tvariable(variable_name: string): TextureVariable | undefined {\n\t\tfor (let allocation of this._allocations) {\n\t\t\tconst variable = allocation.variable(variable_name);\n\t\t\tif (variable) {\n\t\t\t\treturn variable;\n\t\t\t}\n\t\t}\n\t}\n\tvariables(): TextureVariable[] {\n\t\treturn lodash_flatten(this._allocations.map((a) => a.variables || []));\n\t}\n\thas_variable(name: string): boolean {\n\t\tconst names = this.variables().map((v) => v.name);\n\t\treturn lodash_includes(names, name);\n\t}\n\t// allocation_for_variable(name:string):TextureAllocation{\n\t// \tfor(let allocation of this._allocations){\n\t// \t\tconst variables = allocation.variables()\n\t// \t\tfor(let variable of variables){\n\t// \t\t\tif(variable.name() == name){\n\t// \t\t\t\treturn allocation\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tto_json(scene: PolyScene): TextureAllocationsControllerData {\n\t\treturn this._allocations.map((allocation: TextureAllocation) => {\n\t\t\tconst data = {\n\t\t\t\t[allocation.texture_name]: allocation.to_json(scene),\n\t\t\t};\n\t\t\treturn data;\n\t\t});\n\t}\n\tprint(scene: PolyScene) {\n\t\tconsole.log(JSON.stringify(this.to_json(scene), [''], 2));\n\t}\n}\n","import {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {BaseGlNodeType} from '../../_Base';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class TextureAllocation {\n\tprivate _variables: TextureVariable[] | undefined;\n\tprivate _size: number = 0;\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tadd_variable(variable: TextureVariable) {\n\t\tthis._variables = this._variables || [];\n\t\tthis._variables.push(variable);\n\t\tvariable.set_position(this._size);\n\t\tvariable.set_allocation(this);\n\t\tthis._size += variable.size;\n\t}\n\n\thas_space_for_variable(variable: TextureVariable): boolean {\n\t\treturn this._size + variable.size <= 4;\n\t}\n\tget shader_name() {\n\t\treturn this._shader_name; //this._variables[0].name()\n\t}\n\tget texture_name(): string {\n\t\treturn `texture_${this._shader_name}`;\n\t}\n\n\tget variables(): TextureVariable[] | undefined {\n\t\treturn this._variables;\n\t}\n\tvariables_for_input_node(root_node: BaseGlNodeType): TextureVariable[] | undefined {\n\t\treturn this._variables?.filter((variable) => variable.graph_node_ids?.has(root_node.graph_node_id) || false);\n\t}\n\tinput_names_for_node(root_node: BaseGlNodeType): string[] | undefined {\n\t\treturn this.variables_for_input_node(root_node)?.map((v) => v.name);\n\t}\n\t// find_variable_with_node(root_node: BaseNodeGl, input_name: string): TextureVariable{\n\t// \treturn this.variables_for_input_node(root_node).filter(v=>v.name() == input_name)[0]\n\t// }\n\t// find_variable_without_node(input_name: string): TextureVariable{\n\t// \treturn this._variables.filter(v=>v.name() == input_name)[0]\n\t// }\n\tvariable(variable_name: string) {\n\t\tif (this._variables) {\n\t\t\tfor (let variable of this._variables) {\n\t\t\t\tif (variable.name == variable_name) {\n\t\t\t\t\treturn variable;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tto_json(scene: PolyScene): TextureVariableData[] | undefined {\n\t\treturn this._variables?.map((v) => v.to_json(scene));\n\t\t// for(let variable of this._variables){\n\t\t// \tdata[variable.name()] = variable.to_json(scene)\n\t\t// }\n\t\t// return data\n\t}\n}\n","import {TextureAllocation} from './TextureAllocation';\nimport {PolyScene} from '../../../../scene/PolyScene';\n\nexport interface TextureVariableData {\n\tname: string;\n\tnodes: string[];\n}\n\nexport class TextureVariable {\n\tprivate _allocation: TextureAllocation | undefined;\n\tprivate _position: number = -1;\n\n\tprivate _graph_node_ids: Map<string, boolean> | undefined;\n\n\tconstructor(private _name: string, private _size: number) {\n\t\tif (!_name) {\n\t\t\tthrow 'TextureVariable requires a name';\n\t\t}\n\t}\n\n\tset_allocation(allocation: TextureAllocation) {\n\t\tthis._allocation = allocation;\n\t}\n\tget allocation() {\n\t\treturn this._allocation;\n\t}\n\n\tget graph_node_ids() {\n\t\treturn this._graph_node_ids;\n\t}\n\tadd_graph_node_id(id: string) {\n\t\tthis._graph_node_ids = this._graph_node_ids || new Map();\n\t\tthis._graph_node_ids.set(id, true);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\n\tset_position(position: number) {\n\t\tthis._position = position;\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget component(): string {\n\t\treturn 'xyzw'\n\t\t\t.split('')\n\t\t\t.splice(this._position, this._size)\n\t\t\t.join('');\n\t}\n\tto_json(scene: PolyScene): TextureVariableData {\n\t\tconst names: string[] = [];\n\t\tif (this._graph_node_ids) {\n\t\t\tthis._graph_node_ids.forEach((boolean, node_id: string) => {\n\t\t\t\tconst name = scene.graph.node_from_id(node_id).name;\n\t\t\t\tnames.push(name);\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tnodes: names.sort(),\n\t\t};\n\t}\n}\n","import lodash_cloneDeep from 'lodash/cloneDeep';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {BaseNodeSop} from '../_Base'\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseBuilderMatNodeType} from '../../../mat/_BaseBuilder';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\n\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from '../../../../../core/geometry/Material';\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {TextureAllocationsControllerData} from '../../../gl/code/utils/TextureAllocationsController';\n\nexport class ParticlesSystemGpuRenderController {\n\tprivate _render_material: ShaderMaterial | undefined;\n\tprotected _particles_group_objects: Object3D[] = [];\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprivate _texture_allocations_json: TextureAllocationsControllerData | undefined;\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// _create_render_params() {\n\t// \tthis.self.within_param_folder(\"setup\", () => {\n\t// \t\tthis.self.add_param(ParamType.OPERATOR_PATH, \"material\", \"\", {\n\t// \t\t\tnode_selection: {\n\t// \t\t\t\tcontext: NodeContext.MAT\n\t// \t\t\t},\n\t// \t\t\tdependent_on_found_node: false\n\t// \t\t});\n\t// \t});\n\t// }\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_render_material();\n\t}\n\n\tassign_render_material() {\n\t\tif (!this._render_material) {\n\t\t\t// throw 'cannot assign non existing material';\n\t\t\treturn;\n\t\t}\n\t\tfor (let object3d of this._particles_group_objects) {\n\t\t\tconst object = object3d as Mesh;\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.material = this._render_material;\n\t\t\t\tCoreMaterial.apply_custom_materials(object, this._render_material as ShaderMaterialWithCustomMaterials);\n\t\t\t\tobject.matrixAutoUpdate = false;\n\t\t\t\tobject.updateMatrix();\n\t\t\t}\n\t\t}\n\t\t// if this material is recomputed on a frame after the frame_start\n\t\t// we need to:\n\t\t// - mark the material as needsUpdate (to ensure it gets recompiled by the renderer)\n\t\t// - update the uniforms (to ensure the material gets the right values, as the uniforms have been reset)\n\t\tthis._render_material.needsUpdate = true;\n\t\tthis.update_render_material_uniforms();\n\t}\n\tupdate_render_material_uniforms() {\n\t\tif (!this._render_material) {\n\t\t\treturn;\n\t\t}\n\t\t// if (!this.self._gpu_compute) {\n\t\t// \treturn;\n\t\t// }\n\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis._shaders_by_name?.forEach((string, shader_name) => {\n\t\t\tconst texture = this.node.gpu_controller.getCurrentRenderTarget(shader_name)?.texture;\n\t\t\tif (texture) {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tthis._render_material.uniforms[uniform_name].value = texture;\n\t\t\t\t\tCoreMaterial.assign_custom_uniforms(this._render_material, uniform_name, texture);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// console.log(this._render_material.vertexShader);\n\t\t// console.log(this._render_material.fragmentShader);\n\t}\n\n\treset_render_material() {\n\t\tthis._render_material = undefined;\n\t\tthis._particles_group_objects = []; //this._particles_core_group.objects()\n\t}\n\tget initialized(): boolean {\n\t\treturn this._render_material != null;\n\t}\n\n\tinit_core_group(core_group: CoreGroup) {\n\t\tfor (let child of core_group.objects()) {\n\t\t\tthis._particles_group_objects.push(child);\n\t\t}\n\t}\n\tasync init_render_material() {\n\t\t// if (this.self.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\tif (this._render_material) {\n\t\t\treturn;\n\t\t}\n\n\t\t// const uniforms_particles = {\n\t\t// \t\"texture_position\": { value: null },\n\t\t// \t// \"debugX\": { value: 0 },\n\t\t// \t// \"textureVelocity\": { value: null },\n\t\t// \t// \"cameraConstant\": { value: 1 }, //( camera ) },\n\t\t// \t// \"density\": { value: 1.0 }\n\t\t// };\n\n\t\t// ShaderMaterial\n\t\tif (this.node.p.material.is_dirty) {\n\t\t\tawait this.node.p.material.compute();\n\t\t}\n\t\tconst mat_node = this.node.p.material.found_node() as BaseBuilderMatNodeType; // TODO: typescript - ensure node selection is safe, as it would currently crash with a non builder mat selected\n\n\t\tif (mat_node) {\n\t\t\tconst new_texture_allocations_json: TextureAllocationsControllerData = this.node.assembler_controller.assembler.texture_allocations_controller.to_json(\n\t\t\t\tthis.node.scene\n\t\t\t);\n\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.UV_VARYING);\n\t\t\tglobals_handler.set_texture_allocations_controller(\n\t\t\t\tthis.node.assembler_controller.assembler.texture_allocations_controller\n\t\t\t);\n\t\t\tmat_node.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tif (\n\t\t\t\t!this._texture_allocations_json ||\n\t\t\t\tJSON.stringify(this._texture_allocations_json) != JSON.stringify(new_texture_allocations_json)\n\t\t\t) {\n\t\t\t\t// we need to set the node to dirty if a recompile is needed\n\t\t\t\t// otherwise it won't cook\n\t\t\t\t// but we also need to check if the texture_allocation has changed,\n\t\t\t\t// otherwise we'll have an infinite loop\n\t\t\t\tthis._texture_allocations_json = lodash_cloneDeep(new_texture_allocations_json);\n\t\t\t\tmat_node.set_dirty();\n\t\t\t}\n\t\t\t// set compilation required in case the texture allocation has changed\n\t\t\t// but not needed as it is done by set_assembler_globals_handler\n\t\t\t//found_node.set_compilation_required() //_and_dirty()\n\t\t\tconst container = await mat_node.request_container();\n\t\t\tthis._render_material = container.material() as ShaderMaterial; //.clone()\n\t\t\t// this._render_material.needsUpdate = true\n\t\t\t// this.self._assembler.texture_allocations_controller().print()\n\t\t\t// throw \"DEBUGGIN...\"\n\t\t} else {\n\t\t\tthis.node.states.error.set('render material not valid');\n\t\t\t// this._render_material = this._render_material || new ShaderMaterial( {\n\t\t\t// \tuniforms: {},\n\t\t\t// \tvertexShader: particleVertexShader,\n\t\t\t// \tfragmentShader: particleFragmentShader\n\t\t\t// } );\n\t\t}\n\n\t\t// add uniforms\n\t\tif (this._render_material) {\n\t\t\tconst uniforms = this._render_material.uniforms;\n\t\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tconst uniform_value = {value: null};\n\t\t\t\tuniforms[uniform_name] = uniform_value;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tCoreMaterial.init_custom_material_uniforms(this._render_material, uniform_name, uniform_value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// this._render_material.extensions.drawBuffers = true;\n\t\tthis.assign_render_material();\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2';\n\nimport {_Math} from 'three/src/math/Math';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\n// import {BaseNodeSop} from '../_Base'\n\n// import {CoreConstant} from '../../../../../Core/Geometry/Constant'\n\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {CoreMath} from '../../../../../core/math/_Module';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\nimport {GPUComputationRenderer} from './GPUComputationRenderer';\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {POLY} from '../../../../Poly';\nimport {CorePoint} from '../../../../../core/geometry/Point';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\ninterface GPUComputationRendererVariable {\n\tname: string;\n\trenderTargets: WebGLRenderTarget[];\n\tmaterial: ShaderMaterial;\n}\ninterface GPUComputationRenderer {\n\tnew (x: number, y: number, renderer: WebGLRenderer): GPUComputationRenderer;\n\tcompute(): void;\n\tinit(): string | null;\n\taddVariable(name: string, fragment_shader: string, variable: DataTexture): GPUComputationRendererVariable;\n\tsetVariableDependencies(variable: GPUComputationRendererVariable, vars: GPUComputationRendererVariable[]): void;\n\trenderTexture(texture: DataTexture, render_target: WebGLRenderTarget): void;\n\tcreateTexture(): DataTexture;\n\tgetCurrentRenderTarget(variable: GPUComputationRendererVariable): WebGLRenderTarget;\n}\n\nexport class ParticlesSystemGpuComputeController {\n\tprotected _gpu_compute: GPUComputationRenderer | undefined;\n\tprotected _simulation_restart_required: boolean = false;\n\n\tprotected _renderer: WebGLRenderer | undefined;\n\t// private _particles_group: CoreGroup\n\n\tprotected _particles_core_group: CoreGroup | undefined;\n\tprotected _points: CorePoint[] = [];\n\n\tprivate variables_by_name: Map<ShaderName, GPUComputationRendererVariable> = new Map();\n\tprivate _created_textures_by_name: Map<ShaderName, DataTexture> = new Map();\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprotected _last_simulated_frame: number | undefined;\n\t// private _use_instancing: boolean = false\n\n\t// private _param_auto_textures_size: boolean;\n\t// private _param_max_textures_size: Vector2;\n\t// private _param_textures_sizes: Vector2;\n\tprivate _used_textures_size: Vector2 = new Vector2();\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// protected _create_gpu_compute_params() {\n\t// \tthis.self.within_param_folder('setup', () => {\n\t// \t\tthis.self.add_param(ParamType.INTEGER, 'start_frame', 1, {\n\t// \t\t\trange: [1, 100],\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.TOGGLE, 'auto_textures_size', 1);\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'max_textures_size', [1024, 1024], {\n\t// \t\t\tvisible_if: {auto_textures_size: 1},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'textures_size', [64, 64], {\n\t// \t\t\tvisible_if: {auto_textures_size: 0},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.BUTTON, 'reset', '', {\n\t// \t\t\tcallback: this._reset_gpu_compute_and_set_dirty.bind(this),\n\t// \t\t});\n\t// \t});\n\t// \t// this.self.add_param(ParamType.BUTTON, 'force_compute', '', {callback: this._force_compute.bind(this)})\n\t// }\n\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_gpu_compute();\n\t}\n\tasync init(core_group: CoreGroup) {\n\t\tthis.init_particle_group_points(core_group);\n\t\tawait this.create_gpu_compute();\n\t}\n\n\tgetCurrentRenderTarget(shader_name: ShaderName) {\n\t\tconst variable = this.variables_by_name.get(shader_name);\n\t\tif (variable) {\n\t\t\treturn this._gpu_compute?.getCurrentRenderTarget(variable);\n\t\t}\n\t}\n\n\tinit_particle_group_points(core_group: CoreGroup) {\n\t\tthis.reset_gpu_compute();\n\n\t\tif (!core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._particles_core_group = core_group;\n\t\t// this._particles_group_objects = []; //this._particles_core_group.objects()\n\n\t\t// in order to have proper copy on each children, I need to do .push for each\n\t\t// and not just my_array = group.children, as the array would then be empty\n\t\t// after have done .set_group(group)\n\t\t// I may need to rethink the whole\n\t\t// for (let child of this._particles_core_group.objects()) {\n\t\t// \tthis._particles_group_objects.push(child);\n\t\t// }\n\t\t// this._particles_core_group = new CoreGroup(this._particles_group)\n\t\tthis._points = this._get_points() || [];\n\t}\n\n\tcompute_similation_if_required() {\n\t\tconst frame = this.node.scene.frame;\n\t\tconst start_frame: number = this.node.pv.start_frame;\n\t\tif (frame >= start_frame) {\n\t\t\tif (this._last_simulated_frame == null) {\n\t\t\t\tthis._last_simulated_frame = start_frame - 1;\n\t\t\t}\n\t\t\tif (frame > this._last_simulated_frame) {\n\t\t\t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _compute_simulation(count = 1) {\n\t\tif (!this._gpu_compute) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update_simulation_material_uniforms();\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tthis._gpu_compute.compute();\n\t\t}\n\t\tthis.node.render_controller.update_render_material_uniforms();\n\t\tthis._last_simulated_frame = this.node.scene.frame;\n\n\t\t// this._renderer.render(this._gpu_scene, this._gpu_camera)\n\t}\n\n\tasync create_gpu_compute() {\n\t\tif (this.node.pv.auto_textures_size) {\n\t\t\tconst nearest_power_of_two = CoreMath.nearestPower2(Math.sqrt(this._points.length));\n\t\t\tthis._used_textures_size.x = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.x);\n\t\t\tthis._used_textures_size.y = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.y);\n\t\t} else {\n\t\t\tif (\n\t\t\t\t!(_Math.isPowerOfTwo(this.node.pv.textures_size.x) && _Math.isPowerOfTwo(this.node.pv.textures_size.y))\n\t\t\t) {\n\t\t\t\tthis.node.states.error.set('texture size must be a power of 2');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max_particles_count = this.node.pv.textures_size.x * this.node.pv.textures_size.y;\n\t\t\tif (this._points.length > max_particles_count) {\n\t\t\t\tthis.node.states.error.set(\n\t\t\t\t\t`max particles is set to (${this.node.pv.textures_size.x}x${this.node.pv.textures_size.y}=) ${max_particles_count}`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._used_textures_size.copy(this.node.pv.textures_size);\n\t\t}\n\n\t\tthis.node.states.time_dependent.force_time_dependent();\n\t\tthis._init_particles_uvs();\n\t\t// we need to recreate the material if the texture allocation changes\n\t\tthis.node.render_controller.reset_render_material();\n\t\t// await this.node.render_controller.init_render_material();\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer(); //new WebGLRenderer();\n\t\tif (renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t} else {\n\t\t\tthis.node.states.error.set('no renderer found');\n\t\t}\n\t\t// console.log(this._renderer.extensions, this._renderer.capabilities)\n\t\t// if(!this._renderer.extensions.get( 'WEBGL_draw_buffers' )){\n\t\t// \tthis.self.set_error(\"this operator requires the browser extension WEBGL_draw_buffers\")\n\t\t// \talert(\"no extension found\")\n\t\t// \treturn\n\t\t// }\n\t\t// this._renderer = new WebGLRenderer();\n\t\t// this._gpu_scene = new Scene()\n\t\t// this._gpu_camera = new Camera()\n\t\t// this._renderer.setPixelRatio( window.devicePixelRatio );\n\t\t// this._renderer.setSize( this.node.pv.textures_size.x, this.node.pv.textures_size.y );\n\n\t\tconst compute = new GPUComputationRenderer(\n\t\t\tthis._used_textures_size.x,\n\t\t\tthis._used_textures_size.y,\n\t\t\tthis._renderer\n\t\t);\n\t\tthis._gpu_compute = (<unknown>compute) as GPUComputationRenderer;\n\n\t\tif (!this._gpu_compute) {\n\t\t\tthis.node.states.error.set('failed to create the GPUComputationRenderer');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._last_simulated_frame = undefined;\n\n\t\t// document.body.style = ''\n\t\t// document.body.appendChild( renderer.domElement );\n\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.renderTargets[0].dispose();\n\t\t\tvariable.renderTargets[1].dispose();\n\t\t\tthis.variables_by_name.delete(shader_name);\n\t\t});\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tconst all_variables: GPUComputationRendererVariable[] = [];\n\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tconst variable = this._gpu_compute.addVariable(\n\t\t\t\t\t`texture_${shader_name}`,\n\t\t\t\t\tshader,\n\t\t\t\t\tthis._created_textures_by_name.get(shader_name)!\n\t\t\t\t);\n\t\t\t\tthis.variables_by_name.set(shader_name, variable);\n\t\t\t\tall_variables.push(variable);\n\t\t\t}\n\t\t});\n\n\t\t// this._gpu_compute.setVariableDependencies( this.var_v, [ this.var_P, this.var_v ] );\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis.variables_by_name?.forEach((variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._gpu_compute.setVariableDependencies(\n\t\t\t\t\tvariable,\n\t\t\t\t\tall_variables // currently all depend on all\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis._create_texture_render_targets();\n\t\tthis._fill_textures();\n\t\tthis.create_simulation_material_uniforms();\n\n\t\tvar error = this._gpu_compute.init();\n\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tthis.node.states.error.set(error);\n\t\t}\n\t}\n\n\tprivate create_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst uniforms = variable.material.uniforms;\n\t\t\tuniforms['frame'] = {value: this.node.scene.frame};\n\n\t\t\tfor (let param_config of this.node.assembler_controller.assembler.param_configs()) {\n\t\t\t\tuniforms[param_config.uniform_name] = param_config.uniform;\n\t\t\t}\n\t\t});\n\t}\n\tprivate update_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.material.uniforms['frame'].value = this.node.scene.frame;\n\t\t});\n\t}\n\n\tprivate _init_particles_uvs() {\n\t\t// var uvs = new Float32Array( this.node.pv.textures_size.x * this.node.pv.textures_size.y * 2 );\n\t\tvar uvs = new Float32Array(this._points.length * 2);\n\t\t// const rows_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.y, (points.length / this.node.pv.textures_size.y)\n\t\t// ))\n\t\t// const columns_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.x, (points.length / rows_count)\n\t\t// ))\n\t\tlet p = 0;\n\t\tvar cmptr = 0;\n\t\tfor (var j = 0; j < this._used_textures_size.x; j++) {\n\t\t\tfor (var i = 0; i < this._used_textures_size.y; i++) {\n\t\t\t\tuvs[p++] = i / (this._used_textures_size.x - 1);\n\t\t\t\tuvs[p++] = j / (this._used_textures_size.y - 1);\n\n\t\t\t\tcmptr += 2;\n\t\t\t\tif (cmptr >= uvs.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uv_attrib_name = GlobalsTextureHandler.UV_ATTRIB;\n\t\tif (this._particles_core_group) {\n\t\t\tfor (let core_geometry of this._particles_core_group.core_geometries()) {\n\t\t\t\t// geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\t\tconst geometry = core_geometry.geometry();\n\t\t\t\tconst attribute_constructor = core_geometry.marked_as_instance()\n\t\t\t\t\t? InstancedBufferAttribute\n\t\t\t\t\t: BufferAttribute;\n\t\t\t\tgeometry.setAttribute(uv_attrib_name, new attribute_constructor(uvs, 2));\n\t\t\t}\n\t\t}\n\t}\n\n\tcreated_textures_by_name() {\n\t\treturn this._created_textures_by_name;\n\t}\n\n\tprivate _fill_textures() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\tconst assembler = this.node.assembler_controller.assembler;\n\t\t\tconst texture_allocations_controller = assembler.texture_allocations_controller;\n\n\t\t\tconst texture_allocation = texture_allocations_controller.allocation_for_shader_name(shader_name);\n\t\t\tif (!texture_allocation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texture_variables = texture_allocation.variables;\n\t\t\tif (!texture_variables) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst array = texture.image.data;\n\n\t\t\tfor (let texture_variable of texture_variables) {\n\t\t\t\tconst texture_position = texture_variable.position;\n\t\t\t\tlet variable_name = texture_variable.name;\n\t\t\t\t// if(this._use_instancing){\n\t\t\t\t// \tvariable_name = GlobalsTextureHandler.variable_name_to_instance_attrib(variable_name)\n\t\t\t\t// }\n\n\t\t\t\tconst first_point = this._points[0];\n\t\t\t\tif (first_point) {\n\t\t\t\t\tconst has_attrib = first_point.has_attrib(variable_name);\n\t\t\t\t\tif (has_attrib) {\n\t\t\t\t\t\tconst attrib_size = first_point.attrib_size(variable_name);\n\t\t\t\t\t\tlet cmptr = texture_position;\n\t\t\t\t\t\tfor (let point of this._points) {\n\t\t\t\t\t\t\tif (attrib_size == 1) {\n\t\t\t\t\t\t\t\tconst val = point.attrib_value(variable_name);\n\t\t\t\t\t\t\t\tarray[cmptr] = val;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpoint.attrib_value(variable_name).toArray(array, cmptr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcmptr += 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// var posArray = texture_P.image.data;\n\t\t// var velArray = texture_v.image.data;\n\n\t\t// let cmptr = 0\n\t\t// for(let point of points){\n\t\t// \tpoint.position().toArray(posArray, cmptr)\n\t\t// \tposArray[ cmptr + 3 ] = 1;\n\t\t// \tcmptr += 4\n\t\t// }\n\t}\n\n\treset_gpu_compute() {\n\t\tthis._gpu_compute = undefined;\n\t\tthis._simulation_restart_required = true;\n\t}\n\tset_restart_not_required() {\n\t\tthis._simulation_restart_required = false;\n\t}\n\treset_gpu_compute_and_set_dirty() {\n\t\tthis.reset_gpu_compute();\n\t\tthis.node.set_dirty();\n\t}\n\treset_particle_groups() {\n\t\t// this._particles_group = null\n\t\t// this._particles_group_objects = [];\n\t\tthis._particles_core_group = undefined;\n\t}\n\tget initialized(): boolean {\n\t\treturn this._particles_core_group != null && this._gpu_compute != null;\n\t}\n\t// private _force_compute(){\n\t// \tthis.self.run_assembler()\n\t// }\n\n\tprivate _create_texture_render_targets() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\ttexture.dispose();\n\t\t});\n\n\t\tthis._created_textures_by_name.clear();\n\t\tthis.variables_by_name.forEach((texture_variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._created_textures_by_name.set(shader_name, this._gpu_compute.createTexture());\n\t\t\t}\n\t\t});\n\t}\n\trestart_simulation_if_required() {\n\t\tif (this._simulation_restart_required) {\n\t\t\tthis._restart_simulation();\n\t\t}\n\t}\n\tprivate _restart_simulation() {\n\t\tthis._last_simulated_frame = undefined;\n\n\t\tthis._create_texture_render_targets();\n\t\tconst points = this._get_points(); // TODO: typescript - not sure that's right\n\t\tif (!points) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._fill_textures();\n\n\t\t// for (let variable_name of Object.keys(this.variables_by_name)) {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst texture = this._created_textures_by_name.get(shader_name);\n\t\t\tif (this._gpu_compute && texture) {\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[0]);\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[1]);\n\t\t\t}\n\t\t});\n\t}\n\n\t// if we have a mix of marked_as_instance and non marked_as_instance\n\t// we take all geos that are the type that comes first\n\tprivate _get_points() {\n\t\tif (!this._particles_core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet geometries = this._particles_core_group.core_geometries();\n\t\tconst first_geometry = geometries[0];\n\t\tif (first_geometry) {\n\t\t\tconst type = first_geometry.marked_as_instance();\n\t\t\t// this._use_instancing = type\n\t\t\tconst selected_geometries = [];\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tif (geometry.marked_as_instance() == type) {\n\t\t\t\t\tselected_geometries.push(geometry);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst points = [];\n\t\t\tfor (let geometry of selected_geometries) {\n\t\t\t\tfor (let point of geometry.points()) {\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn points;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","/**\n * @author yomboprime https://github.com/yomboprime\n *\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n*/\n\nimport {Camera} from 'three/src/cameras/Camera'\nimport {ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat} from 'three/src/constants'\nimport {DataTexture} from 'three/src/textures/DataTexture'\nimport {Mesh} from 'three/src/objects/Mesh'\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry'\nimport {Scene} from 'three/src/scenes/Scene'\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial'\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget'\n// const THREE = {Camera, ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat, DataTexture, mesh, PlaneBufferGeometry, Scene, ShaderMaterial, WebGLRenderTarget}\n\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\n\n\tthis.variables = [];\n\n\tthis.currentTextureIndex = 0;\n\n\tvar scene = new Scene();\n\n\tvar camera = new Camera();\n\tcamera.position.z = 1;\n\n\tvar passThruUniforms = {\n\t\tpassThruTexture: { value: null }\n\t};\n\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\n\tscene.add( mesh );\n\n\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\n\n\t\tvar variable = {\n\t\t\tname: variableName,\n\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\tmaterial: material,\n\t\t\tdependencies: null,\n\t\t\trenderTargets: [],\n\t\t\twrapS: null,\n\t\t\twrapT: null,\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t};\n\n\t\tthis.variables.push( variable );\n\n\t\treturn variable;\n\n\t};\n\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\tvariable.dependencies = dependencies;\n\n\t};\n\n\tthis.init = function () {\n\n\t\tif ( ! renderer.capabilities.isWebGL2 &&\n\t\t\t ! renderer.extensions.get( \"OES_texture_float\" ) ) {\n\n\t\t\treturn \"No OES_texture_float support for float textures.\";\n\n\t\t}\n\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\treturn \"No support for vertex shader textures.\";\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\tvar material = variable.material;\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\t// material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\treturn null;\n\n\t};\n\n\tthis.compute = function () {\n\n\t\tvar currentTextureIndex = this.currentTextureIndex;\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Sets texture dependencies uniforms\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tvar uniforms = variable.material.uniforms;\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Performs the computation for this variable\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t}\n\n\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t};\n\n\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t};\n\n\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t};\n\n\tfunction addResolutionDefine( materialShader ) {\n\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\n\n\t}\n\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t// The following functions can be used to compute things manually\n\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\tuniforms = uniforms || {};\n\n\t\tvar material = new ShaderMaterial( {\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\tfragmentShader: computeFragmentShader\n\t\t} );\n\n\t\taddResolutionDefine( material );\n\n\t\treturn material;\n\n\t}\n\n\tthis.createShaderMaterial = createShaderMaterial;\n\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\twrapS = wrapS || ClampToEdgeWrapping;\n\t\twrapT = wrapT || ClampToEdgeWrapping;\n\n\t\tminFilter = minFilter || NearestFilter;\n\t\tmagFilter = magFilter || NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false\n\t\t} );\n\n\t\treturn renderTarget;\n\n\t};\n\n\tthis.createTexture = function () {\n\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\n\n\t};\n\n\tthis.renderTexture = function ( input, output ) {\n\n\t\t// Takes a texture, and render out in rendertarget\n\t\t// input = Texture\n\t\t// output = RenderTarget\n\n\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t};\n\n\tthis.doRenderTarget = function ( material, output ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tmesh.material = material;\n\t\trenderer.setRenderTarget( output );\n\t\trenderer.render( scene, camera );\n\t\tmesh.material = passThruShader;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\t// Shaders\n\n\tfunction getPassThroughVertexShader() {\n\n\t\treturn\t\"void main()\t{\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n\tfunction getPassThroughFragmentShader() {\n\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"void main() {\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n};\n\nexport { GPUComputationRenderer };\n","import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst POSITION = 'position';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PeakSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1, {range: [-1, 1]});\n}\nconst ParamsConfig = new PeakSopParamsConfig();\n\nexport class PeakSopNode extends TypedSopNode<PeakSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'peak';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tlet core_geometry, point;\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((child_object) => {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = (child_object as Mesh).geometry as BufferGeometry) != null) {\n\t\t\t\t\tcore_geometry = new CoreGeometry(geometry);\n\t\t\t\t\tfor (point of core_geometry.points()) {\n\t\t\t\t\t\tconst normal = point.normal();\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tconst new_position = position.clone().add(normal.multiplyScalar(this.pv.amount));\n\t\t\t\t\t\tpoint.set_position(new_position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\t\t\tconst attrib = core_geometry.geometry().getAttribute(POSITION) as BufferAttribute;\n\t\t\t\t\t\tattrib.needsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst ROTATE_START = new Vector3(0, 0, 1);\nconst ROTATE_END = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\tuse_segments_count = ParamConfig.BOOLEAN(0);\n\tstep_size = ParamConfig.FLOAT(1, {visible_if: {use_segments_count: 0}});\n\tsegments = ParamConfig.VECTOR2([1, 1], {visible_if: {use_segments_count: 1}});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\n\nexport class PlaneSopNode extends TypedSopNode<PlaneSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'plane';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create plane from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\t_cook_without_input() {\n\t\tconst geometry = this._create_plane(this.pv.size);\n\n\t\t// convert to buffer geo, as some render problems can occur otherwise\n\t\t// geometry = BufferGeometryUtils.mergeBufferGeometries([geometry])\n\t\t// console.log(geometry, geometry.isBufferGeometry)\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tconst matrix = this._core_transform.translation_matrix(this.pv.center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\tthis.set_geometry(geometry);\n\t}\n\t_cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = new Vector3();\n\t\tbbox.getSize(size);\n\t\tconst center = new Vector3();\n\t\tbbox.getCenter(center);\n\n\t\t// TODO: rotate the input geo to get the accurate bbox\n\t\tconst size2d = new Vector2(size.x, size.z);\n\t\tconst geometry = this._create_plane(size2d);\n\n\t\tthis._core_transform.rotate_geometry(geometry, ROTATE_START, ROTATE_END);\n\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t_create_plane(size: Vector2) {\n\t\tlet segments_count;\n\t\tsize = size.clone();\n\t\tif (this.pv.use_segments_count) {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(this.pv.segments.x),\n\t\t\t\ty: Math.floor(this.pv.segments.y),\n\t\t\t};\n\t\t} else {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(size.x / this.pv.step_size),\n\t\t\t\ty: Math.floor(size.y / this.pv.step_size),\n\t\t\t};\n\t\t\tsize.x = segments_count.x * this.pv.step_size;\n\t\t\tsize.y = segments_count.y * this.pv.step_size;\n\t\t}\n\t\treturn new PlaneBufferGeometry(size.x, size.y, segments_count.x, segments_count.y);\n\t}\n}\n","// import lodash_map from 'lodash/map'\n\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BooleanParam} from '../../params/Boolean';\nimport {FloatParam} from '../../params/Float';\n\nconst POSITION_ATTRIB_NAME = 'position';\n\ntype ValueArrayByName = Map<string, number[]>;\ntype ComponentOffset = 0 | 1 | 2;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PointSopParamsConfig extends NodeParamsConfig {\n\tupdate_x = ParamConfig.BOOLEAN(0);\n\tx = ParamConfig.FLOAT('@P.x', {\n\t\tvisible_if: {update_x: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0);\n\ty = ParamConfig.FLOAT('@P.y', {\n\t\tvisible_if: {update_y: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0);\n\tz = ParamConfig.FLOAT('@P.z', {\n\t\tvisible_if: {update_z: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new PointSopParamsConfig();\n\nexport class PointSopNode extends TypedSopNode<PointSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to move'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('dot-circle');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tawait this._eval_expressions_for_core_group(core_group);\n\t}\n\n\t// group.traverse (object)=>\n\t// \tif (geometry = object.geometry)?\n\t// \t\tthis._eval_expressions(geometry)\n\t// \t\tgeometry.computeVertexNormals()\n\n\tasync _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\t// this._allocate_arrays(core_objects)\n\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\n\t\tif (this.pv.update_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\n\t\tconst geometries = core_group.geometries();\n\t\tfor (let geometry of geometries) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tconst attrib = geometry.getAttribute(POSITION_ATTRIB_NAME) as BufferAttribute;\n\t\t\t\tattrib.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(POSITION_ATTRIB_NAME).array as number[];\n\n\t\tconst tmp_array_x = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_x,\n\t\t\tthis.p.x,\n\t\t\tthis.pv.x,\n\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t0\n\t\t);\n\t\tconst tmp_array_y = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_y,\n\t\t\tthis.p.y,\n\t\t\tthis.pv.y,\n\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t1\n\t\t);\n\t\tconst tmp_array_z = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_z,\n\t\t\tthis.p.z,\n\t\t\tthis.pv.z,\n\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t2\n\t\t);\n\n\t\tif (tmp_array_x) {\n\t\t\tthis._commit_tmp_values(tmp_array_x, array, 0);\n\t\t}\n\t\tif (tmp_array_y) {\n\t\t\tthis._commit_tmp_values(tmp_array_y, array, 1);\n\t\t}\n\t\tif (tmp_array_z) {\n\t\t\tthis._commit_tmp_values(tmp_array_z, array, 2);\n\t\t}\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\tdo_update_param: BooleanParam,\n\t\tvalue_param: FloatParam,\n\t\tparam_value: number,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst do_update = do_update_param;\n\t\tconst param = value_param;\n\n\t\tlet tmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length, offset);\n\t\tif (do_update.value) {\n\t\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\ttmp_array[point.index] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\ttmp_array[point.index] = param_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid.get(uuid);\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\t\treturn new_array;\n\t\t\t} else {\n\t\t\t\treturn current_array;\n\t\t\t}\n\t\t} else {\n\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tprivate _array_for_component(geometry: BufferGeometry, points_count: number, offset: ComponentOffset) {\n\t\tconst new_array = new Array<number>(points_count);\n\t\tconst src_array = geometry.getAttribute(POSITION_ATTRIB_NAME).array;\n\t\tfor (let i = 0; i < new_array.length; i++) {\n\t\t\tnew_array[i] = src_array[i * 3 + offset];\n\t\t}\n\t\treturn new_array;\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {TubeBufferGeometry} from 'three/src/geometries/TubeGeometry';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n// import {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_R = new Vector3(0, 0, 0);\nconst DEFAULT_S = new Vector3(1, 1, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nclass PolywireSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(8, {\n\t\trange: [3, 20],\n\t\trange_locked: [true, false],\n\t});\n\tclosed = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new PolywireSopParamsConfig();\n\nexport class PolywireSopNode extends TypedSopNode<PolywireSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'polywire';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create tubes from'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tprivate _geometries: BufferGeometry[] = [];\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._geometries = [];\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (object instanceof LineSegments) {\n\t\t\t\tthis._create_tube(object);\n\t\t\t}\n\t\t}\n\n\t\t//if @_param_merge\n\t\t//geometries = lodash_map @_geometries, (object)->object.geometry\n\t\tconst merged_geometry = CoreGeometry.merge_geometries(this._geometries);\n\t\tfor (let geometry of this._geometries) {\n\t\t\tgeometry.dispose();\n\t\t}\n\t\tif (merged_geometry) {\n\t\t\tconst object = this.create_object(merged_geometry);\n\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n\t//else\n\t//\tthis.set_objects( @_objects )\n\n\t_create_tube(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst wrapper = new CoreGeometry(geometry);\n\t\tconst points = wrapper.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\n\t\tfor (let curve_point_indices of accumulated_curve_point_indices) {\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tthis._create_tube_from_points(current_points);\n\t\t}\n\t}\n\n\t_create_tube_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positions = points.map((point) => point.attrib_value('position'));\n\n\t\tconst circle_template = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments_radial);\n\t\tconst circles: BufferGeometry[] = [];\n\t\tconst scale = 1;\n\t\tfor (let position of positions) {\n\t\t\tconst t = position;\n\t\t\tconst matrix = this._core_transform.matrix(t, DEFAULT_R, DEFAULT_S, scale);\n\n\t\t\tconst new_circle = circle_template.clone();\n\t\t\tnew_circle.applyMatrix(matrix);\n\t\t\tcircles.push(new_circle);\n\t\t}\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tconst circle = circles[i];\n\t\t\t\tconst prev_circle = circles[i - 1];\n\n\t\t\t\tconst geometry = this._skin(prev_circle, circle);\n\t\t\t\tthis._geometries.push(geometry);\n\t\t\t}\n\t\t}\n\t}\n\n\t//this.set_geometries(circles, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS)\n\n\t// curve = new CatmullRomCurve3(positions)\n\t// segments_count = positions.length-1\n\n\t// geometry = new TubeBufferGeometry(\n\t// \tcurve,\n\t// \tsegments_count,\n\t// \t@_param_radius,\n\t// \t@_param_segments_radial,\n\t// \t@_param_closed\n\t// \t)\n\n\t// object = this.create_object(geometry)\n\t// @_objects.push(object)\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Raycaster, Intersection} from 'three/src/core/Raycaster';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {DoubleSide} from 'three/src/constants';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst MAT_DOUBLE_SIDED = new MeshBasicMaterial({\n\tside: DoubleSide,\n});\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RaySopParamsConfig extends NodeParamsConfig {\n\tuse_normals = ParamConfig.BOOLEAN(1);\n\tdirection = ParamConfig.VECTOR3([0, -1, 0], {\n\t\tvisible_if: {use_normals: 0},\n\t});\n\ttransfer_face_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new RaySopParamsConfig();\n\nexport class RaySopNode extends TypedSopNode<RaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ray';\n\t}\n\n\t// _material_by_object_uuid: MaterialByString\n\tprivate _bound_assign_mat = this._assign_double_sided_material_to_object.bind(this); //(Object3D)=>void;\n\tprivate _raycaster = new Raycaster();\n\n\tstatic double_sided_material() {\n\t\treturn MAT_DOUBLE_SIDED;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to move', 'geometry to ray onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.FROM_NODE,\n\t\t\tInputCloneMode.ALWAYS, // to assign double sided mat\n\t\t]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_collision = input_contents[1];\n\n\t\tthis.ray(core_group, core_group_collision);\n\t}\n\n\tray(core_group: CoreGroup, core_group_collision: CoreGroup) {\n\t\t// this._material_by_object_uuid = {}\n\t\tthis._assign_double_sided_material_to_core_group(core_group_collision);\n\n\t\tlet direction: Vector3, first_intersect: Intersection;\n\t\tfor (let point of core_group.points()) {\n\t\t\tdirection = this.pv.use_normals ? point.normal() : this.pv.direction;\n\t\t\tthis._raycaster.set(point.position(), direction);\n\n\t\t\tfirst_intersect = this._raycaster.intersectObjects(core_group_collision.objects(), true)[0];\n\t\t\tif (first_intersect) {\n\t\t\t\tpoint.set_position(first_intersect.point);\n\t\t\t\tif (this.pv.transfer_face_normals && first_intersect.face) {\n\t\t\t\t\tpoint.set_normal(first_intersect.face.normal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_assign_double_sided_material_to_core_group(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse(this._bound_assign_mat);\n\t\t}\n\t}\n\t_assign_double_sided_material_to_object(object: Object3D) {\n\t\t// this._material_by_object_uuid[object.uuid] = object.material\n\t\t(object as Mesh).material = RaySopNode.double_sided_material();\n\t}\n\n\t// average_normals(geometry){\n\t// \tconst normals = [];\n\t// \tconst vertex_index_names = ['a', 'b', 'c'];\n\t// \tlodash_each(geometry.faces, face=> {\n\t// \t\treturn lodash_each(vertex_index_names, (vertex_index_name, i)=> {\n\t// \t\t\tconst vertex_index = face[vertex_index_name];\n\t// \t\t\tif (normals[vertex_index] == null) { normals[vertex_index] = []; }\n\t// \t\t\treturn normals[vertex_index].push(face.vertexNormals[i].clone());\n\t// \t\t});\n\t// \t});\n\n\t// \tlodash_each(normals, function(normal_group, i){\n\t// \t\tconst average = new Vector3(\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'x')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'y')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'z')) / normal_group.length)\n\t// \t\t);\n\t// \t\treturn normals[i] = average;\n\t// \t});\n\n\t// \treturn normals;\n\t// }\n}\n","import {LineSegments} from 'three/src/objects/LineSegments';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\n// import {CubicBezierCurve3} from 'three/src/extras/curves/CubicBezierCurve3';\n// import {LineCurve3} from 'three/src/extras/curves/LineCurve3';\n// import {QuadraticBezierCurve3} from 'three/src/extras/curves/QuadraticBezierCurve3';\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_map from 'lodash/map';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\n\nexport enum METHOD {\n\tPOINTS_COUNT = 'points_count',\n\tSEGMENT_LENGTH = 'segment_length',\n}\nexport const METHODS = [METHOD.POINTS_COUNT, METHOD.SEGMENT_LENGTH];\n\n// matches threejs curve type in CatmullRomCurve3.js\nexport enum CURVE_TYPE {\n\tCENTRIPETAL = 'centripetal',\n\tCHORDAL = 'chordal',\n\tCATMULLROM = 'catmullrom',\n}\nexport const CURVE_TYPES = [CURVE_TYPE.CENTRIPETAL, CURVE_TYPE.CHORDAL, CURVE_TYPE.CATMULLROM];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {TypeAssert} from '../../poly/Assert';\nclass ResampleSopParamsConfig extends NodeParamsConfig {\n\tmethod = ParamConfig.INTEGER(METHODS.indexOf(METHOD.POINTS_COUNT), {\n\t\tmenu: {\n\t\t\tentries: METHODS.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcurve_type = ParamConfig.INTEGER(CURVE_TYPES.indexOf(CURVE_TYPE.CATMULLROM), {\n\t\trange: [0, 2],\n\t\trange_locked: [true, true],\n\t\tmenu: {\n\t\t\tentries: CURVE_TYPES.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\ttension = ParamConfig.FLOAT(0.01, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.POINTS_COUNT)},\n\t});\n\tsegment_length = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.SEGMENT_LENGTH)},\n\t});\n}\nconst ParamsConfig = new ResampleSopParamsConfig();\n\nexport class ResampleSopNode extends TypedSopNode<ResampleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'resample';\n\t}\n\n\t// private _objects: Object3D\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\t// this._objects = [];\n\t\tconst resampled_objects = [];\n\t\tif (this.pv.points_count >= 2) {\n\t\t\tconst core_objects = core_group.core_objects();\n\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\tconst object = core_object.object();\n\t\t\t\tif (object instanceof LineSegments) {\n\t\t\t\t\tconst resampled_object = this._resample(object);\n\t\t\t\t\tresampled_objects.push(resampled_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if (this.pv.merge) {\n\t\t// \tconst geometries = lodash_map(this._objects, object => object.geometry);\n\t\t// \tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t// \tlodash_each(geometries, geometry => geometry.dispose());\n\t\t// \tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// \tthis.set_object( object );\n\t\t// } else {\n\t\tthis.set_objects(resampled_objects);\n\t\t// }\n\t}\n\n\t_resample(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst points = core_geometry.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\t\t// accumulated_curve_point_indices = [accumulated_curve_point_indices[0]]\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tfor (let i = 0; i < accumulated_curve_point_indices.length; i++) {\n\t\t\tconst curve_point_indices = accumulated_curve_point_indices[i];\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tconst geometry = this._create_curve_from_points(current_points);\n\t\t\tif (geometry) {\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t}\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\treturn object;\n\t}\n\n\t_create_curve_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst old_curve_positions = lodash_map(points, (point) => point.attrib_value('position'));\n\t\tconst closed = false;\n\t\tconst curve_type = CURVE_TYPES[this.pv.curve_type];\n\t\tconst tension = this.pv.tension;\n\t\tconst curve = new CatmullRomCurve3(old_curve_positions, closed, curve_type, tension);\n\t\t// const curve = new LineCurve3(old_curve_positions);\n\t\t// const curve = new CubicBezierCurve3(old_curve_positions);\n\t\t// const curve = new QuadraticBezierCurve3(old_curve_positions);\n\n\t\t// TODO: could I detect when a curve has points that are very close\n\t\t// and prevent a curve to go too far\n\t\tconst new_curve_points = this._get_points_from_curve(curve);\n\n\t\tlet positions = [];\n\t\tconst indices = [];\n\n\t\tfor (let i = 0; i < new_curve_points.length; i++) {\n\t\t\tconst point_position = new_curve_points[i];\n\n\t\t\tconst position = point_position.toArray();\n\t\t\tpositions.push(position);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1);\n\t\t\t\tindices.push(i);\n\t\t\t}\n\t\t}\n\n\t\tpositions = lodash_flatten(positions);\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\n\t\treturn geometry;\n\t\t// const object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// this._objects.push(object);\n\t}\n\n\t_get_points_from_curve(curve: CatmullRomCurve3) {\n\t\tconst method = METHODS[this.pv.method];\n\t\tswitch (method) {\n\t\t\tcase METHOD.POINTS_COUNT:\n\t\t\t\treturn curve.getSpacedPoints(Math.max(2, this.pv.points_count));\n\t\t\tcase METHOD.SEGMENT_LENGTH:\n\t\t\t\tvar length = curve.getLength();\n\n\t\t\t\tvar points_count = this.pv.segment_length !== 0 ? 1 + length / this.pv.segment_length : 2;\n\n\t\t\t\tpoints_count = Math.max(2, points_count);\n\n\t\t\t\treturn curve.getSpacedPoints(points_count);\n\t\t}\n\t\tTypeAssert.unreachable(method);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {BufferAttribute, BufferGeometry};\nimport lodash_range from 'lodash/range';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreIterator} from '../../../core/Iterator';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass ScatterSopParamsConfig extends NodeParamsConfig {\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tseed = ParamConfig.INTEGER(0, {\n\t\trange: [0, 100],\n\t\trange_locked: [false, false],\n\t});\n\ttransfer_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_transfer = ParamConfig.STRING('normal', {\n\t\tvisible_if: {transfer_attributes: 1},\n\t});\n\tadd_id_attribute = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new ScatterSopParamsConfig();\n\nexport class ScatterSopNode extends TypedSopNode<ScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scatter';\n\t}\n\n\t// private _positions: number[];\n\t// private _areas_thresholds: number[];\n\t// private _attrib_values_by_name = {};\n\t// private _area_sum: number;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to scatter points onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// const objects = input_contents[0] //.group({clone: false})\n\t\tconst core_group = input_contents[0]; //CoreGroup.from_objects(objects)\n\t\tlet faces = core_group.faces();\n\t\t// const areas_by_face_index = []\n\t\tconst areas_thresholds: number[] = [];\n\t\tlet area_sum = 0;\n\t\tconst area_by_face_index: Map<number, number> = new Map();\n\n\t\tfor (let face of faces) {\n\t\t\tconst area = face.area;\n\t\t\tarea_by_face_index.set(face.index, area);\n\t\t}\n\t\tconst sorted_faces = lodash_sortBy(faces, (f) => {\n\t\t\treturn area_by_face_index.get(f.index);\n\t\t});\n\n\t\tlet i = 0;\n\t\tfor (let face of sorted_faces) {\n\t\t\tarea_sum += area_by_face_index.get(face.index) as number;\n\t\t\tareas_thresholds[i] = area_sum;\n\t\t\ti++;\n\t\t}\n\n\t\tconst positions: number[] = [];\n\t\tlet attrib_names: string[] = [];\n\t\tif (this.pv.transfer_attributes) {\n\t\t\tattrib_names = core_group.attrib_names_matching_mask(this.pv.attributes_to_transfer);\n\t\t}\n\n\t\tconst attrib_values_by_name: Map<string, number[]> = new Map();\n\t\tconst attrib_sizes_by_name: Map<string, number> = new Map();\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tattrib_values_by_name.set(attrib_name, []);\n\t\t\tattrib_sizes_by_name.set(attrib_name, core_group.attrib_size(attrib_name));\n\t\t}\n\n\t\tconst iterator = new CoreIterator();\n\t\t// await iterator.start_with_count(this.pv.points_count, this._add_point.bind(this))\n\t\tawait iterator.start_with_count(this.pv.points_count, (point_index: number) => {\n\t\t\tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * area_sum;\n\n\t\t\tfor (let face_index = 0; face_index < areas_thresholds.length; face_index++) {\n\t\t\t\tconst areas_threshold = areas_thresholds[face_index];\n\n\t\t\t\tif (rand <= areas_threshold) {\n\t\t\t\t\tconst face = sorted_faces[face_index];\n\t\t\t\t\tconst position = face.random_position(rand);\n\t\t\t\t\tposition.toArray(positions, positions.length);\n\n\t\t\t\t\tfor (let attrib_name of attrib_names) {\n\t\t\t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t\t\t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.push(attrib_value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrib_value.toArray(\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name),\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.length\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// for(let point_index=0; point_index<this.pv.points_count; point_index++){\n\n\t\t// \tconst rand = CoreMath.rand_float(this.pv.seed+point_index) * area_sum\n\n\t\t// \tfor(let face_index=0; face_index<areas_thresholds.length; face_index++){\n\n\t\t// \t\tconst areas_threshold = areas_thresholds[face_index]\n\n\t\t// \t\tif(rand <= areas_threshold){\n\t\t// \t\t\tconst face = sorted_faces[face_index]\n\t\t// \t\t\tconst position = face.random_position(rand)\n\t\t// \t\t\tposition.toArray(positions, positions.length)\n\n\t\t// \t\t\tfor(let attrib_name of attrib_names){\n\t\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position)\n\t\t// \t\t\t\tif (lodash_isNumber(attrib_value)){\n\t\t// \t\t\t\t\tattrib_values_by_name[attrib_name].push(attrib_value)\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\tattrib_value.toArray(\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name],\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name].length\n\t\t// \t\t\t\t\t)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\n\t\t// \t\t\tbreak;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tgeometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(attrib_values_by_name.get(attrib_name)!),\n\t\t\t\t\tattrib_sizes_by_name.get(attrib_name)!\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (this.pv.add_id_attribute) {\n\t\t\tconst ids = lodash_range(this.pv.points_count);\n\t\t\tgeometry.setAttribute('id', new THREE.BufferAttribute(new Float32Array(ids), 1));\n\t\t}\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n\n\t// private _add_point(point_index: number) {\n\t// \tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * this._area_sum;\n\n\t// \tfor (let face_index = 0; face_index < this._areas_thresholds.length; face_index++) {\n\t// \t\tconst areas_threshold = this._areas_thresholds[face_index];\n\n\t// \t\tif (rand <= areas_threshold) {\n\t// \t\t\tconst face = this._sorted_faces[face_index];\n\t// \t\t\tconst position = face.random_position(rand);\n\t// \t\t\tposition.toArray(positions, positions.length);\n\n\t// \t\t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t// \t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t// \t\t\t\t\tthis._attrib_values_by_name[attrib_name].push(attrib_value);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tattrib_value.toArray(\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name],\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name].length\n\t// \t\t\t\t\t);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ShadowsSopParamsConfig extends NodeParamsConfig {\n\tcast_shadow = ParamConfig.BOOLEAN(1);\n\treceive_shadow = ParamConfig.BOOLEAN(1);\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new ShadowsSopParamsConfig();\n\nexport class ShadowsSopNode extends TypedSopNode<ShadowsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'shadows';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change shadows properties of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\tchild.castShadow = this.pv.cast_shadow;\n\t\t\t\t\tchild.receiveShadow = this.pv.receive_shadow;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobject.castShadow = this.pv.cast_shadow;\n\t\t\t\tobject.receiveShadow = this.pv.receive_shadow;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(core_group.objects());\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_reverse from 'lodash/reverse';\nimport lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass SkinSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new SkinSopParamsConfig();\n\nexport class SkinSopNode extends TypedSopNode<SkinSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'skin';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create polygons from', 'if used, lines from both inputs will be used'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tswitch (lodash_compact(this.io.inputs.inputs()).length) {\n\t\t\tcase 1:\n\t\t\t\treturn this.process_one_input(input_contents);\n\t\t\tcase 2:\n\t\t\t\treturn this.process_two_inputs(input_contents);\n\t\t\tdefault:\n\t\t\t\treturn this.states.error.set('inputs count not valid');\n\t\t}\n\t}\n\n\tprocess_one_input(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tif (line_segments0) {\n\t\t\tconst first_line_segment = line_segments0[0] as Mesh;\n\t\t\tif (first_line_segment) {\n\t\t\t\tconst src_geometries = CoreGeometryUtilCurve.line_segment_to_geometries(\n\t\t\t\t\tfirst_line_segment.geometry as BufferGeometry\n\t\t\t\t);\n\t\t\t\tsrc_geometries.forEach((src_geometry, i) => {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tconst prev_src_geometry = src_geometries[i - 1];\n\n\t\t\t\t\t\tconst geometry = this._skin(prev_src_geometry, src_geometry);\n\t\t\t\t\t\tgeometries.push(geometry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\tprocess_two_inputs(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\t\tconst line_segments1 = this._get_line_segments(core_group1);\n\t\tconst line_segments = lodash_reverse(lodash_sortBy([line_segments0, line_segments1], (array) => array.length));\n\t\tconst smallest_array = line_segments[0];\n\t\tconst largest_array = line_segments[1];\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tsmallest_array.forEach((line_segment, i) => {\n\t\t\tconst other_line_segment = largest_array[i];\n\n\t\t\tif (line_segment != null && other_line_segment != null) {\n\t\t\t\tconst geo = (line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst other_geo = (other_line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst geometry = this._skin(geo, other_geo);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t});\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\t_get_line_segments(core_group: CoreGroup) {\n\t\treturn core_group.objects().filter((child) => (child as LineSegments).isLineSegments);\n\t}\n\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\t// TODO: maybe instead of doing this,\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {IcosahedronBufferGeometry} from 'three/src/geometries/IcosahedronGeometry';\nimport {TypedSopNode} from './_Base';\n\nenum SphereType {\n\tDEFAULT = 'default',\n\tISOCAHEDRON = 'isocahedron',\n}\ntype SphereTypes = {[key in SphereType]: number};\nconst SPHERE_TYPE: SphereTypes = {\n\tdefault: 0,\n\tisocahedron: 1,\n};\nconst SPHERE_TYPES: Array<SphereType> = [SphereType.DEFAULT, SphereType.ISOCAHEDRON];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass SphereSopParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(SPHERE_TYPE.default, {\n\t\tmenu: {\n\t\t\tentries: SPHERE_TYPES.map((name) => {\n\t\t\t\treturn {name: name, value: SPHERE_TYPE[name]};\n\t\t\t}),\n\t\t},\n\t});\n\tradius = ParamConfig.FLOAT(1, {visible_if: {type: SPHERE_TYPE.default}});\n\tresolution = ParamConfig.VECTOR2([8, 6], {visible_if: {type: SPHERE_TYPE.default}});\n\topen = ParamConfig.BOOLEAN(0, {visible_if: {type: SPHERE_TYPE.default}});\n\tangle_range_x = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tangle_range_y = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tdetail = ParamConfig.INTEGER(1, {\n\t\trange: [0, 5],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {type: SPHERE_TYPE.isocahedron},\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new SphereSopParamsConfig();\n\nexport class SphereSopNode extends TypedSopNode<SphereSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'sphere';\n\t}\n\n\tcook() {\n\t\tlet geometry;\n\t\tif (this.pv.type == SPHERE_TYPE.default) {\n\t\t\tgeometry = this._create_default_sphere();\n\t\t} else {\n\t\t\tgeometry = this._create_default_isocahedron();\n\t\t}\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\t_create_default_sphere() {\n\t\tif (this.pv.open) {\n\t\t\treturn new SphereBufferGeometry(\n\t\t\t\tthis.pv.radius,\n\t\t\t\tthis.pv.resolution.x,\n\t\t\t\tthis.pv.resolution.y,\n\t\t\t\tthis.pv.angle_range_x.x,\n\t\t\t\tthis.pv.angle_range_x.y,\n\t\t\t\tthis.pv.angle_range_y.x,\n\t\t\t\tthis.pv.angle_range_y.y\n\t\t\t);\n\t\t} else {\n\t\t\treturn new SphereBufferGeometry(this.pv.radius, this.pv.resolution.x, this.pv.resolution.y);\n\t\t}\n\t}\n\t_create_default_isocahedron() {\n\t\treturn new IcosahedronBufferGeometry(this.pv.radius, this.pv.detail);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nconst INPUT_NAME = 'geometry to switch to';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchSopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchSopParamsConfig();\n\nexport class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_core_group(container.core_content());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import lodash_range from 'lodash/range';\n\n// import {CoreFont} from '../../../Core/Font'\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {TextBufferGeometry} from 'three/src/geometries/TextGeometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {ShapeBufferGeometry} from 'three/src/geometries/ShapeGeometry';\nimport {FontLoader} from 'three/src/loaders/FontLoader';\nimport {Font} from 'three/src/extras/core/Font';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Path} from 'three/src/extras/core/Path';\nimport {Shape} from 'three/src/extras/core/Shape';\n\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nvar opentype = require('opentype.js');\n\nimport {TTFLoader} from '../../../../modules/three/examples/jsm/loaders/TTFLoader';\nimport {SVGLoader} from '../../../../modules/three/examples/jsm/loaders/SVGLoader';\n\nconst DEFAULT_URL = '/fonts/droid_sans_regular.typeface.json';\n\ndeclare global {\n\tinterface Window {\n\t\topentype: any;\n\t}\n}\n\n// const DEFAULT_PARAMS = {\n// \tsize: 1,\n// \theight: 0.1,\n// \tcurveSegments: 1\n// };\n\nexport enum TEXT_TYPE {\n\tMESH = 'mesh',\n\tFLAT = 'flat',\n\tLINE = 'line',\n\tSTROKE = 'stroke',\n}\nexport const TEXT_TYPES: Array<TEXT_TYPE> = [TEXT_TYPE.MESH, TEXT_TYPE.FLAT, TEXT_TYPE.LINE, TEXT_TYPE.STROKE];\n\ninterface FontByUrl {\n\t[propName: string]: Font;\n}\n\nconst GENERATION_ERROR_MESSAGE = `failed to generate geometry. Try to remove some characters`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextSopParamsConfig extends NodeParamsConfig {\n\tfont = ParamConfig.STRING('');\n\ttext = ParamConfig.STRING('polygonjs', {multiline: true});\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: TEXT_TYPES.map((type, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: type,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tsize = ParamConfig.FLOAT(1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n\textrude = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tsegments = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tstroke_width = ParamConfig.FLOAT(0.02, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.STROKE),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new TextSopParamsConfig();\n\nexport class TextSopNode extends TypedSopNode<TextSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'text';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['loaders/TTFLoader', 'loaders/SVGLoader'];\n\t// }\n\n\tprivate _font_loader: FontLoader = new FontLoader();\n\tprivate _ttf_loader: TTFLoader | undefined;\n\tprivate _svg_loader: typeof SVGLoader | undefined;\n\tprivate _loaded_fonts: FontByUrl = {};\n\n\tinitialize_node() {}\n\n\tasync cook() {\n\t\ttry {\n\t\t\tthis._loaded_fonts[this.pv.font] = this._loaded_fonts[this.pv.font] || (await this._load_url(this.pv.font));\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(`count not load font (${this.pv.font})`);\n\t\t\treturn;\n\t\t}\n\t\tconst font = this._loaded_fonts[this.pv.font];\n\t\tif (font) {\n\t\t\tswitch (TEXT_TYPES[this.pv.type]) {\n\t\t\t\tcase TEXT_TYPE.MESH:\n\t\t\t\t\treturn this._create_geometry_from_type_mesh(font);\n\t\t\t\tcase TEXT_TYPE.FLAT:\n\t\t\t\t\treturn this._create_geometry_from_type_flat(font);\n\t\t\t\tcase TEXT_TYPE.LINE:\n\t\t\t\t\treturn this._create_geometry_from_type_line(font);\n\t\t\t\tcase TEXT_TYPE.STROKE:\n\t\t\t\t\treturn this._create_geometry_from_type_stroke(font);\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('type is not valid');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_mesh(font: Font) {\n\t\tconst text = this.displayed_text();\n\n\t\tconst parameters = {\n\t\t\tfont: font,\n\t\t\tsize: this.pv.size,\n\t\t\theight: this.pv.extrude,\n\t\t\tcurveSegments: this.pv.segments,\n\t\t};\n\n\t\ttry {\n\t\t\tconst geometry = new TextBufferGeometry(text, parameters);\n\t\t\tif (!geometry.index) {\n\t\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t\t}\n\t\t\tthis.set_geometry(geometry);\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_flat(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tvar geometry = new ShapeBufferGeometry(shapes);\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n\tprivate _create_geometry_from_type_line(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\tconst positions = [];\n\t\t\tconst indices = [];\n\t\t\tlet current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\tconst point = points[j];\n\t\t\t\t\tpositions.push(point.x);\n\t\t\t\t\tpositions.push(point.y);\n\t\t\t\t\tpositions.push(0);\n\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\tif (j > 0 && j < points.length - 1) {\n\t\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_index += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.setIndex(indices);\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\tprivate async _create_geometry_from_type_stroke(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\t// const color = new Color( 0xffffff );\n\t\t\tthis._svg_loader = this._svg_loader || (await this._load_svg_loader());\n\t\t\t// TODO: typescript: correct definition for last 3 optional args\n\t\t\tvar style = this._svg_loader.getStrokeStyle(this.pv.stroke_width, 'white', 'miter', 'butt', 4);\n\t\t\tconst geometries = [];\n\n\t\t\t// const positions = [];\n\t\t\t// const indices = [];\n\t\t\t// let current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t// TODO: typescript: correct definition for points, arcDivisions, and minDistance\n\t\t\t\tconst arcDivisions = 12;\n\t\t\t\tconst minDistance = 0.001;\n\t\t\t\tconst geometry = this._svg_loader.pointsToStroke(\n\t\t\t\t\t(<unknown>points) as Vector3[],\n\t\t\t\t\tstyle,\n\t\t\t\t\tarcDivisions,\n\t\t\t\t\tminDistance\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\t\tthis.set_geometry(merged_geometry); //, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\n\tprivate shapes_from_font(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tconst holeShapes: Path[] = [];\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tif (shape.holes && shape.holes.length > 0) {\n\t\t\t\t\tfor (let j = 0; j < shape.holes.length; j++) {\n\t\t\t\t\t\tconst hole = shape.holes[j];\n\t\t\t\t\t\tholeShapes.push(hole);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshapes.push.apply(shapes, holeShapes as Shape[]);\n\t\t\treturn shapes;\n\t\t}\n\t}\n\n\tprivate _get_shapes(font: Font) {\n\t\tconst text = this.displayed_text();\n\t\ttry {\n\t\t\tconst shapes = font.generateShapes(text, this.pv.size);\n\t\t\treturn shapes;\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate displayed_text(): string {\n\t\treturn this.pv.text || '';\n\t}\n\n\t// _create_shape(font){\n\t// \tconst shapes = font.generateShapes( this.displayed_text(), 100 );\n\t// \tvar geometry = new ShapeBufferGeometry( shapes );\n\t// \treturn geometry\n\t// \t// geometry.computeBoundingBox();\n\t// \t// xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\t// \t// geometry.translate( xMid, 0, 0 );\n\t// \t// make shape ( N.B. edge view not visible )\n\t// \t// text = new Mesh( geometry, matLite );\n\t// \t// text.position.z = - 150;\n\t// }\n\n\tprivate _load_url(url: string) {\n\t\tif (url === '') {\n\t\t\turl = DEFAULT_URL;\n\t\t}\n\t\tconst elements1 = url.split('?')[0];\n\t\tconst elements2 = elements1.split('.');\n\t\tconst ext = elements2[elements2.length - 1];\n\t\turl = `${url}?${Date.now()}`;\n\t\tswitch (ext) {\n\t\t\tcase 'ttf': {\n\t\t\t\treturn this._load_ttf(url);\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treturn this._load_json(url);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _load_ttf(url: string): Promise<Font> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._ttf_loader = this._ttf_loader || (await this._load_ttf_loader());\n\t\t\twindow.opentype = opentype;\n\t\t\tthis._ttf_loader.load(\n\t\t\t\turl,\n\t\t\t\t(fnt: object) => {\n\t\t\t\t\tconst parsed = this._font_loader.parse(fnt);\n\t\t\t\t\t// make sure not to delete opentype from window, as it may be required by other nodes\n\t\t\t\t\t// delete window.opentype;\n\t\t\t\t\tresolve(parsed);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tprivate _load_json(url: string): Promise<Font> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._font_loader.load(\n\t\t\t\turl,\n\t\t\t\t(font) => {\n\t\t\t\t\tresolve(font);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t// private _default_font_parameters(options){\n\t// \tif (options == null) { options = {}; }\n\t// \tconst default_options = lodash_clone(DEFAULT_PARAMS);\n\t// \tif (options['font'] == null) { options['font'] = this.font(); }\n\n\t// \tfor(let key of Object.keys(options)){\n\t// \t\tdefault_options[key] = options[key];\n\t// \t}\n\n\t// \treturn default_options;\n\t// }\n\tprivate async _load_ttf_loader(): Promise<TTFLoader> {\n\t\tconst {TTFLoader} = await import(`../../../../modules/three/examples/jsm/loaders/TTFLoader`);\n\t\tconst loader_constructor = (<unknown>TTFLoader) as typeof TTFLoader;\n\t\treturn new loader_constructor();\n\t}\n\tprivate async _load_svg_loader(): Promise<typeof SVGLoader> {\n\t\tconst {SVGLoader} = await import(`../../../../modules/three/examples/jsm/loaders/SVGLoader`);\n\t\treturn (<unknown>SVGLoader) as typeof SVGLoader;\n\t}\n}\n","import {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author gero3 / https://github.com/gero3\n * @author tentone / https://github.com/tentone\n * @author troy351 / https://github.com/troy351\n *\n * Requires opentype.js to be included in the project.\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n */\n\n\nvar TTFLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.reversed = false;\n\n};\n\n\nTTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TTFLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tvar round = Math.round;\n\n\t\t\tvar glyphs = {};\n\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tvar token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tvar paths = [];\n\t\t\tvar path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n} );\n\nexport { TTFLoader };\n","import {TorusBufferGeometry} from 'three/src/geometries/TorusGeometry';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tradius_tube = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(20, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\tsegments_tube = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new TorusSopParamsConfig();\n\nexport class TorusSopNode extends TypedSopNode<TorusSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\t//radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float\n\n\t\tconst geometry = new TorusBufferGeometry(radius, radius_tube, segments_radial, segments_tube);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TorusKnotBufferGeometry} from 'three/src/geometries/TorusKnotGeometry';\nconst THREE = {TorusKnotBufferGeometry};\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusKnotSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tradius_tube = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(64, {range: [1, 128]});\n\tsegments_tube = ParamConfig.INTEGER(8, {range: [1, 32]});\n\tp = ParamConfig.INTEGER(2, {range: [1, 10]});\n\tq = ParamConfig.INTEGER(3, {range: [1, 10]});\n}\nconst ParamsConfig = new TorusKnotSopParamsConfig();\n\nexport class TorusKnotSopNode extends TypedSopNode<TorusKnotSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus_knot';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\tconst p = this.pv.p;\n\t\tconst q = this.pv.q;\n\n\t\tconst geometry = new THREE.TorusKnotBufferGeometry(radius, radius_tube, segments_radial, segments_tube, p, q);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {GroupParamController} from './utils/GroupParamController';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreTransform} from '../../../core/Transform';\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\n// const DEFAULT_PARAMS = {\n// \tPIVOT: [0, 0, 0] as [number, number, number],\n// };\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TransformSopParamConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\n\t// transform\n\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\tscale = ParamConfig.FLOAT(1);\n\tlook_at = ParamConfig.OPERATOR_PATH('');\n\tup = ParamConfig.VECTOR3([0, 1, 0]);\n\tpivot = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new TransformSopParamConfig();\n\nexport class TransformSopNode extends TypedSopNode<TransformSopParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'transform';\n\t}\n\t// allow_eval_key_check() {\n\t// \treturn true;\n\t// }\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transform'];\n\t}\n\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst objects = input_contents[0].objects();\n\t\tconst matrix = this._core_transform.matrix(this.pv.t, this.pv.r, this.pv.s, this.pv.scale);\n\n\t\tif (this.pv.group === '') {\n\t\t\tfor (let object of objects) {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = object.geometry) != null) {\n\t\t\t\t\tgeometry.translate(-this.pv.pivot.x, -this.pv.pivot.y, -this.pv.pivot.z);\n\t\t\t\t\tgeometry.applyMatrix(matrix);\n\t\t\t\t\tgeometry.translate(this.pv.pivot.x, this.pv.pivot.y, this.pv.pivot.z);\n\t\t\t\t} else {\n\t\t\t\t\tobject.applyMatrix(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst core_group = CoreGroup.from_objects(objects);\n\t\t\tconst points = core_group.points_from_group(this.pv.group);\n\t\t\tfor (let point of points) {\n\t\t\t\tconst position = point.position().sub(this.pv.pivot);\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tpoint.set_position(position.add(this.pv.pivot));\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(objects);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {CylinderBufferGeometry} from 'three/src/geometries/CylinderGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TubeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new TubeSopParamsConfig();\n\nexport class TubeSopNode extends TypedSopNode<TubeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'tube';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new CylinderBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CameraController} from '../../../core/CameraController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\n// const MODE = [];\nconst UV_NAME = 'uv';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseObjNodeType} from '../obj/_Base';\nclass UvProjectSopParamsConfig extends NodeParamsConfig {\n\tcamera = ParamConfig.OPERATOR_PATH('/perspective_camera1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.OBJ,\n\t\t},\n\t});\n\t// force_aspect = ParamConfig.BOOLEAN(0)\n\t// aspect = ParamConfig.FLOAT(1, {\n\t// \trange: [0, 2],\n\t// \tvisible_if: {force_aspect: 1},\n\t// })\n}\nconst ParamsConfig = new UvProjectSopParamsConfig();\n\nexport class UvProjectSopNode extends TypedSopNode<UvProjectSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'uv_project';\n\t}\n\n\tprivate _camera_controller: CameraController = new CameraController(this._update_uvs_from_camera.bind(this));\n\t// private _param_camera: string\n\tprivate _processed_core_group: CoreGroup | undefined;\n\t// private _camera_node: BaseCameraObjNodeType | undefined;\n\tprivate _camera_object: Camera | undefined;\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._processed_core_group = core_groups[0];\n\n\t\tconst camera_node = this.p.camera.found_node();\n\t\tif (camera_node != null) {\n\t\t\tthis._camera_object = (camera_node as BaseCameraObjNodeType).object;\n\t\t\tthis._camera_controller.set_target(this._camera_object);\n\t\t\t// this._add_camera_event()\n\t\t} else {\n\t\t\tthis._camera_object = undefined;\n\t\t\t//this._remove_camera_event()\n\t\t\tthis._camera_controller.remove_target();\n\t\t}\n\n\t\tthis.set_core_group(this._processed_core_group);\n\t}\n\n\t_update_uvs_from_camera(look_at_target: Object3D) {\n\t\t// let old_aspect;\n\t\t// if (this.pv.force_aspect) {\n\t\t// \told_aspect = this._camera_object.aspect;\n\t\t// \tthis._camera_node.setup_for_aspect_ratio(this.pv.aspect);\n\t\t// }\n\n\t\tif (this._processed_core_group && this.parent) {\n\t\t\tconst points = this._processed_core_group.points();\n\t\t\tconst obj_world_matrix = (this.parent as BaseObjNodeType).object.matrixWorld;\n\t\t\tpoints.forEach((point) => {\n\t\t\t\tconst position = point.position();\n\t\t\t\tconst uvw = this._vector_in_camera_space(position, obj_world_matrix);\n\t\t\t\tif (uvw) {\n\t\t\t\t\tconst uv = {\n\t\t\t\t\t\tx: 1 - (uvw[0] * 0.5 + 0.5),\n\t\t\t\t\t\ty: uvw[1] * 0.5 + 0.5,\n\t\t\t\t\t};\n\t\t\t\t\tpoint.set_attrib_value(UV_NAME, uv);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if (this.pv.force_aspect) {\n\t\t\t// \tthis._camera_node.setup_for_aspect_ratio(old_aspect);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate _vector_in_camera_space(vector: Vector3, obj_world_matrix: Matrix4) {\n\t\tif (this._camera_object) {\n\t\t\tvector.applyMatrix4(obj_world_matrix);\n\t\t\treturn vector.project(this._camera_object).toArray();\n\t\t}\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nenum EVENT {\n\tCHANGE = 'change',\n\tMOVEEND = 'moveend',\n}\n\ntype CameraControllerCallback = (target: Object3D) => void;\n\nexport class CameraController {\n\tprivate _update_always: boolean = true;\n\tprivate _listener: any;\n\tprivate _target: Object3D | undefined;\n\tprivate _listener_added: boolean = false;\n\n\tconstructor(private _callback: CameraControllerCallback) {\n\t\tthis._listener = this._execute_callback.bind(this);\n\t}\n\n\tremove_target() {\n\t\tthis.set_target(undefined);\n\t}\n\tset_target(target: Object3D | undefined) {\n\t\tif (!target) {\n\t\t\tthis._remove_camera_event();\n\t\t}\n\n\t\tconst old_target = this._target;\n\t\tthis._target = target;\n\n\t\tif (this._target != null) {\n\t\t\tthis._execute_callback();\n\t\t}\n\n\t\tif (\n\t\t\t(this._target != null ? this._target.uuid : undefined) !==\n\t\t\t(old_target != null ? old_target.uuid : undefined)\n\t\t) {\n\t\t\tthis._add_camera_event();\n\t\t}\n\t}\n\n\tset_update_always(new_update_always: boolean) {\n\t\tthis._remove_camera_event();\n\n\t\tthis._update_always = new_update_always;\n\n\t\tthis._add_camera_event();\n\t}\n\n\tprivate _current_event_name() {\n\t\tif (this._update_always) {\n\t\t\treturn EVENT.CHANGE;\n\t\t} else {\n\t\t\treturn EVENT.MOVEEND;\n\t\t}\n\t}\n\n\tprivate _add_camera_event() {\n\t\tif (this._listener_added) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.addEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = true;\n\t\t}\n\t}\n\n\tprivate _remove_camera_event() {\n\t\tif (this._listener_added !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.removeEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = false;\n\t\t}\n\t}\n\n\tprivate _execute_callback() {\n\t\tif (this._target != null) {\n\t\t\tthis._callback(this._target);\n\t\t}\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonImporterVisitor} from './Visitor'\nimport {SceneJsonExporterData} from '../export/Scene';\nimport {JsonImportDispatcher} from './Dispatcher';\n\nexport class SceneJsonImporter {\n\tconstructor(private _data: SceneJsonExporterData) {}\n\n\tstatic load_data(data: SceneJsonExporterData) {\n\t\tconst importer = new SceneJsonImporter(data);\n\t\treturn importer.scene();\n\t}\n\n\tasync scene(): Promise<PolyScene> {\n\t\tconst scene = new PolyScene();\n\t\tscene.loading_controller.mark_as_loading();\n\n\t\t// scene.set_js_version(this._data['__js_version'])\n\t\tconst properties = this._data['properties'];\n\t\tif (properties) {\n\t\t\t// scene.set_name(properties['name'])\n\t\t\tscene.set_frame(properties['frame'] || 1);\n\t\t\tconst frame_range = properties['frame_range'] || [];\n\t\t\tscene.time_controller.set_frame_range(frame_range[0] || 1, frame_range[1] || 100);\n\t\t\tconst frame_range_locked = properties['frame_range_locked'];\n\t\t\tif (frame_range_locked) {\n\t\t\t\tscene.time_controller.set_frame_range_locked(frame_range_locked[0], frame_range_locked[1]);\n\t\t\t}\n\t\t\tscene.time_controller.set_fps(properties['fps'] || 30);\n\t\t\tif (properties['master_camera_node_path']) {\n\t\t\t\tscene.cameras_controller.set_master_camera_node_path(properties['master_camera_node_path']);\n\t\t\t}\n\t\t}\n\n\t\t// we block to ensure that nodes will not run their dirty_hooks\n\t\t// which would trigger operator_path params to search for nodes that\n\t\t// may not exist yet\n\t\tscene.cooker.block();\n\n\t\tconst importer = JsonImportDispatcher.dispatch_node(scene.root);\n\t\tif (this._data['root']) {\n\t\t\timporter.process_data(this._data['root']);\n\t\t}\n\t\tif (this._data['ui']) {\n\t\t\timporter.process_ui_data(this._data['ui']);\n\t\t}\n\n\t\tawait scene.loading_controller.mark_as_loaded();\n\t\tscene.cooker.unblock();\n\t\t// DO NOT wait for cooks here,\n\t\t// as a viewer will only be created once everything has cooked\n\t\t// which would be a problem for env_map or other nodes relying on the renderer being created\n\t\t// await scene.wait_for_cooks_completed();\n\n\t\treturn scene;\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeJsonExporterData, NodeJsonExporterUIData, InputData} from '../export/Node';\nimport {ParamJsonExporterData, SimpleParamJsonExporterData, ComplexParamJsonExporterData} from '../export/Param';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {JsonImportDispatcher} from './Dispatcher';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../../nodes/utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nexport class NodeJsonImporter<T extends BaseNodeType> {\n\tconstructor(protected _node: T) {}\n\n\tprocess_data(data: NodeJsonExporterData) {\n\t\tthis.create_nodes(data['nodes']);\n\t\tthis.set_selection(data['selection']);\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = data['override_clonable_state'];\n\t\t\tif (override) {\n\t\t\t\tthis._node.io.inputs.set_override_clonable_state(override);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_flags(data);\n\t\tthis.set_params(data['params']);\n\n\t\tthis.from_data_custom(data);\n\n\t\tthis._node.lifecycle.set_creation_completed();\n\t}\n\tprocess_inputs_data(data: NodeJsonExporterData) {\n\t\tthis.set_inputs(data['inputs']);\n\t}\n\n\tprocess_ui_data(data: NodeJsonExporterUIData) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst ui_data = this._node.ui_data;\n\t\tconst pos = data['pos'];\n\t\tif (pos) {\n\t\t\tconst vector = new Vector2().fromArray(pos);\n\t\t\tui_data.set_position(vector);\n\t\t}\n\t\tconst comment = data['comment'];\n\t\tif (comment) {\n\t\t\tui_data.set_comment(comment);\n\t\t}\n\t\tthis.process_nodes_ui_data(data['nodes']);\n\t}\n\n\tcreate_nodes(data?: Dictionary<NodeJsonExporterData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tfor (let node_name of node_names) {\n\t\t\tconst node_data = data[node_name];\n\t\t\tconst node_type = node_data['type'];\n\t\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\t\tconst node = this._node.create_node(node_type);\n\t\t\t\tif (node) {\n\t\t\t\t\tnode.set_name(node_name);\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst importers = [];\n\t\tlet index = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = JsonImportDispatcher.dispatch_node(node); //.visit(JsonImporterVisitor)\n\t\t\timporters.push(importer);\n\t\t\timporter.process_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t\tindex = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = importers[index];\n\t\t\timporter.process_inputs_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t}\n\tset_selection(data?: string[]) {\n\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\tif (data && data.length > 0) {\n\t\t\t\tconst selected_nodes: BaseNodeType[] = [];\n\t\t\t\tdata.forEach((node_name) => {\n\t\t\t\t\tconst node = this._node.node(node_name);\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tselected_nodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._node.children_controller.selection.set(selected_nodes);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_flags(data: NodeJsonExporterData) {\n\t\tconst flags = data['flags'];\n\t\tif (flags) {\n\t\t\tconst bypass = flags['bypass'];\n\t\t\tif (bypass != null) {\n\t\t\t\tthis._node.flags?.bypass?.set(bypass);\n\t\t\t}\n\t\t\tconst display = flags['display'];\n\t\t\tif (display != null) {\n\t\t\t\tthis._node.flags?.display?.set(display);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_inputs(inputs_data?: InputData[]) {\n\t\tif (!inputs_data) {\n\t\t\treturn;\n\t\t}\n\n\t\tinputs_data.forEach((input_data, i) => {\n\t\t\tif (input_data && this._node.parent) {\n\t\t\t\tif (lodash_isString(input_data)) {\n\t\t\t\t\tconst input_node_name = input_data;\n\t\t\t\t\tconst input_node = this._node.parent.node(input_node_name);\n\t\t\t\t\tthis._node.set_input(i, input_node);\n\t\t\t\t} else {\n\t\t\t\t\tconst input_node = this._node.parent.node(input_data['node']);\n\t\t\t\t\tconst input_name = input_data['name'];\n\t\t\t\t\tif (this._node.io.inputs.has_named_input(input_name)) {\n\t\t\t\t\t\tthis._node.set_input(input_data['name'], input_node, input_data['output']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`${this._node.full_path()} has no input named ${input_name}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprocess_nodes_ui_data(data: Dictionary<NodeJsonExporterUIData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tnode_names.forEach((node_name) => {\n\t\t\tconst node = this._node.node(node_name);\n\t\t\tif (node) {\n\t\t\t\tconst node_data = data[node_name];\n\t\t\t\tJsonImportDispatcher.dispatch_node(node).process_ui_data(node_data);\n\t\t\t\t// node.visit(JsonImporterVisitor).process_ui_data(node_data);\n\t\t\t}\n\t\t});\n\t}\n\n\t//\n\t//\n\t// PARAMS\n\t//\n\t//\n\tset_params(data?: Dictionary<ParamJsonExporterData<ParamType>>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst param_names = Object.keys(data);\n\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param_data = data[param_name] as ComplexParamJsonExporterData<ParamType>;\n\t\t\tconst options = param_data['options'];\n\t\t\t// const is_spare = options && options['spare'] === true;\n\n\t\t\tconst param_type = param_data['type']!;\n\t\t\tconst has_param = this._node.params.has_param(param_name);\n\t\t\tlet has_param_and_same_type = false;\n\t\t\tlet param;\n\t\t\tif (has_param) {\n\t\t\t\tparam = this._node.params.get(param_name);\n\t\t\t\t// we can safely consider same type if param_type is not mentioned\n\t\t\t\tif ((param && param.type == param_type) || param_type == null) {\n\t\t\t\t\thas_param_and_same_type = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (has_param_and_same_type) {\n\t\t\t\tif (this._is_param_data_complex(param_data)) {\n\t\t\t\t\tthis._process_param_data_complex(param_name, param_data);\n\t\t\t\t} else {\n\t\t\t\t\tthis._process_param_data_simple(param_name, param_data as SimpleParamJsonExporterData<ParamType>);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// it the param is a spare one,\n\t\t\t\t// we check if it is currently exists with same type first.\n\t\t\t\t// - if it is, we only update the value\n\t\t\t\t// - if it's not, we delete it and add it again\n\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: param_data['default_value'] as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (options && param_type) {\n\t\t\t\t// \tif (param_data['default_value']) {\n\t\t\t\t// \t\tif (has_param) {\n\t\t\t\t// \t\t\tthis._node.params.delete_param(param_name);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t\tparam = this._node.add_param(param_type, param_name, param_data['default_value'], options);\n\t\t\t\t// \t\tif (param) {\n\t\t\t\t// \t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\t// delete and create the spare params we need to\n\t\tconst params_delete_required =\n\t\t\tparams_update_options.names_to_delete && params_update_options.names_to_delete.length > 0;\n\t\tconst params_add_required = params_update_options.to_add && params_update_options.to_add.length > 0;\n\n\t\tif (params_delete_required || params_add_required) {\n\t\t\tthis._node.params.update_params(params_update_options);\n\t\t\t// update them based on the imported data\n\t\t\tfor (let spare_param of this._node.params.spare) {\n\t\t\t\tconst param_data = data[spare_param.name] as ComplexParamJsonExporterData<ParamType>;\n\t\t\t\t// JsonImportDispatcher.dispatch_param(spare_param).process_data(param_data);\n\t\t\t\tif (!spare_param.parent_param && param_data) {\n\t\t\t\t\tif (this._is_param_data_complex(param_data)) {\n\t\t\t\t\t\tthis._process_param_data_complex(spare_param.name, param_data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis._process_param_data_simple(\n\t\t\t\t\t\t\tspare_param.name,\n\t\t\t\t\t\t\tparam_data as SimpleParamJsonExporterData<ParamType>\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// those hooks are useful for some gl nodes,\n\t\t// such as the constant, which needs to update its connections\n\t\t// based on another parameter, which will be set just before\n\t\tthis._node.params.run_on_scene_load_hooks();\n\t}\n\n\tprivate _process_param_data_simple(param_name: string, param_data: SimpleParamJsonExporterData<ParamType>) {\n\t\tthis._node.params.get(param_name)?.set(param_data);\n\t}\n\n\tprivate _process_param_data_complex(param_name: string, param_data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst param = this._node.params.get(param_name);\n\t\tif (param) {\n\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t}\n\t\t// return\n\t\t// const has_param = this._node.params.has_param(param_name);\n\t\t// const param_type = param_data['type']!;\n\n\t\t// let has_param_and_same_type = false;\n\t\t// let param;\n\t\t// if (has_param) {\n\t\t// \tparam = this._node.params.get(param_name);\n\t\t// \t// we can safely consider same type if param_type is not mentioned\n\t\t// \tif ((param && param.type == param_type) || param_type == null) {\n\t\t// \t\thas_param_and_same_type = true;\n\t\t// \t}\n\t\t// }\n\t\t// if (has_param_and_same_type) {\n\t\t// \tparam = this._node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t// \t\t// param.visit(JsonImporterVisitor).process_data(param_data);\n\t\t// \t}\n\t\t// } else {\n\t\t// \tconst options = param_data['options'];\n\t\t// \tif (options && param_type) {\n\t\t// \t\tconst is_spare = options['spare'] === true;\n\t\t// \t\tif (is_spare && param_data['default_value']) {\n\t\t// \t\t\tif (has_param) {\n\t\t// \t\t\t\tthis._node.params.delete_param(param_name);\n\t\t// \t\t\t}\n\t\t// \t\t\tparam = this._node.add_param(param_type, param_name, param_data['default_value'], options);\n\t\t// \t\t\tif (param) {\n\t\t// \t\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _is_param_data_complex(param_data: ParamJsonExporterData<ParamType>): boolean {\n\t\t// we can test here most param value serialized, except for ramp\n\t\tif (\n\t\t\tlodash_isString(param_data) ||\n\t\t\tlodash_isNumber(param_data) ||\n\t\t\tlodash_isArray(param_data) ||\n\t\t\tlodash_isBoolean(param_data)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lodash_isObject(param_data)) {\n\t\t\tif (Object.keys(param_data).includes('type')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfrom_data_custom(data: NodeJsonExporterData) {}\n}\n","import {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {TypedMultipleParam} from '../../../../params/_Multiple';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamMultipleJsonImporter extends ParamJsonImporter<TypedMultipleParam<ParamType>> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {\n\t\t// const components = data['components'];\n\t\t// if (components) {\n\t\t// \tObject.keys(components).forEach((component_name) => {\n\t\t// \t\tconst param_name = `${this._param.name}${component_name}`;\n\t\t// \t\tconst component_param = this._param.node.params\n\t\t// \t\t\t.get(this._param.name)\n\t\t// \t\t\t?.components?.filter((c) => c.name == param_name)[0];\n\t\t// \t\tif (component_param) {\n\t\t// \t\t\tconst component_data = components[component_name];\n\t\t// \t\t\tJsonImportDispatcher.dispatch_param(component_param as FloatParam).process_data(component_data);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// }\n\t}\n}\n","// import lodash_isString from 'lodash/isString';\nimport {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {StringParam} from '../../../../params/String';\nimport {ParamType} from '../../../../poly/ParamType';\n\nconst LINE_BREAK_REGEXP = /\\\\n+/g;\n\nexport class ParamStringJsonImporter extends ParamJsonImporter<StringParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.STRING>) {\n\t\tlet raw_input = data['raw_input'];\n\t\tif (raw_input !== undefined) {\n\t\t\t// if (lodash_isString(value)) {\n\t\t\traw_input = raw_input.replace(LINE_BREAK_REGEXP, '\\n');\n\t\t\tthis._param.set(raw_input);\n\t\t\t// }\n\t\t}\n\t}\n}\n","import {ParamJsonImporter} from '../Param';\n// import {RampValueJson} from '../../../../params/ramp/RampValue';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {RampParam} from '../../../../params/Ramp';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamRampJsonImporter extends ParamJsonImporter<RampParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.RAMP>) {\n\t\tconst raw_input = data['raw_input']; // as RampValueJson;\n\t\tif (raw_input) {\n\t\t\t// const ramp_value = RampValue.from_json(value);\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","import {Clock} from 'three/src/core/Clock';\nimport {LinearFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {RGBAFormat} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"sourceRoot":""}