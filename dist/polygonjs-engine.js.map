{"version":3,"sources":["webpack://polygonjs-engine/webpack/bootstrap","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/ConnectionPointType.ts","webpack://polygonjs-engine/./src/engine/poly/InputCloneMode.ts","webpack://polygonjs-engine/./src/engine/poly/ParamType.ts","webpack://polygonjs-engine/./src/engine/poly/NodeContext.ts","webpack://polygonjs-engine/./src/core/ThreeToGl.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/GLDefinition.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/NamedConnectionPoint.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Base.ts","webpack://polygonjs-engine/./src/core/geometry/Constant.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseMathFunction.ts","webpack://polygonjs-engine/./src/core/String.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/ShaderName.ts","webpack://polygonjs-engine/./src/core/geometry/Geometry.ts","webpack://polygonjs-engine/./src/core/graph/CoreGraphNode.ts","webpack://polygonjs-engine/./src/engine/poly/NodeEvent.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/_Base.ts","webpack://polygonjs-engine/./src/engine/Poly.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_Base.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/Pass.js","webpack://polygonjs-engine/./src/engine/nodes/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/TransformController.ts","webpack://polygonjs-engine/./src/core/Transform.ts","webpack://polygonjs-engine/./src/engine/params/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/FlagsController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/quaternion.glsl","webpack://polygonjs-engine/./src/core/Walker.ts","webpack://polygonjs-engine/./src/engine/poly/ParamEvent.ts","webpack://polygonjs-engine/./src/core/math/_Module.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/SideController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/_BaseMaterial.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/ContainerController.ts","webpack://polygonjs-engine/./src/core/geometry/Attribute.ts","webpack://polygonjs-engine/./src/engine/containers/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/SkinningController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureMapController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack://polygonjs-engine/./src/core/MapUtils.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Category.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/Controller.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/Geometry.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/ConnectionsController.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/File.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/_BaseController.ts","webpack://polygonjs-engine/./src/engine/nodes/event/_Base.ts","webpack://polygonjs-engine/./src/engine/params/Ramp.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Param.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/_BaseController.ts","webpack://polygonjs-engine/./src/core/geometry/Material.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/libs/inflate.module.min.js","webpack://polygonjs-engine/./src/engine/params/_Numeric.ts","webpack://polygonjs-engine/./src/engine/params/_Multiple.ts","webpack://polygonjs-engine/./src/engine/poly/Assert.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/configs/ShaderConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/configs/VariableConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/controllers/ParamConfigsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/ColorsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/UniformsColorsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/_BaseBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseLightTransformed.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/_BaseLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/HelperController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseManager.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/LayersController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/PostProcessController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/NameController.ts","webpack://polygonjs-engine/./src/engine/params/utils/OptionsController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/_Base.ts","webpack://polygonjs-engine/./src/core/AsyncFunction.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Attribute.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Dispatcher.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Scene.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/LineType.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/NodeFinder.ts","webpack://polygonjs-engine/./src/engine/nodes/event/CameraOrbitControls.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/_BaseMesh.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseLight.ts","webpack://polygonjs-engine/./src/core/geometry/Object.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/Texture.ts","webpack://polygonjs-engine/./src/core/geometry/util/Curve.ts","webpack://polygonjs-engine/./src/engine/nodes/event/MouseEvent.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/params/types/ParamConstructorByType.ts","webpack://polygonjs-engine/./src/engine/params/utils/ExpressionController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/ParsedTree.ts","webpack://polygonjs-engine/./src/core/DecomposedPath.ts","webpack://polygonjs-engine/./src/core/math/Easing.ts","webpack://polygonjs-engine/./src/engine/params/Float.ts","webpack://polygonjs-engine/./src/engine/params/OperatorPath.ts","webpack://polygonjs-engine/./src/engine/params/String.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/MouseEventsController.ts","webpack://polygonjs-engine/./src/engine/nodes/event/Code.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/controllers/TranspiledFilter.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/GLDefinitionCollection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/NodeTraverser.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Globals.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/controls/OrbitControls.js","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseAdaptive.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Constant.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg3.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/fit.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.frag.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshStandard.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/PointsBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseCamera.ts","webpack://polygonjs-engine/./src/core/geometry/Group.ts","webpack://polygonjs-engine/./src/core/geometry/Point.ts","webpack://polygonjs-engine/./src/core/geometry/Entity.ts","webpack://polygonjs-engine/./src/core/Iterator.ts","webpack://polygonjs-engine/./src/core/geometry/util/Circle.ts","webpack://polygonjs-engine/./src/core/geometry/Instancer.ts","webpack://polygonjs-engine/./src/core/loader/geometry/JsonData.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/DRACOLoader.js","webpack://polygonjs-engine/./src/core/geometry/operation/Skin.ts","webpack://polygonjs-engine/./src/engine/index.ts","webpack://polygonjs-engine/./src/engine/scene/PolyScene.ts","webpack://polygonjs-engine/./src/engine/scene/utils/CamerasController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/Cooker.ts","webpack://polygonjs-engine/./src/core/graph/CoreGraph.ts","webpack://polygonjs-engine/./src/engine/scene/utils/CookController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/DispatchController.ts","webpack://polygonjs-engine/./src/engine/poly/RenderersController.ts","webpack://polygonjs-engine/./src/engine/poly/NodesRegister.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/EventsController.ts","webpack://polygonjs-engine/./src/core/graph/DirtyController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/UIData.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/StatesController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/TimeDependent.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/Error.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/hierarchy/ParentController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/hierarchy/ChildrenController.ts","webpack://polygonjs-engine/./src/core/NodeSelection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/LifeCycleController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/CookController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/DependenciesController.ts","webpack://polygonjs-engine/./src/engine/params/utils/EmitController.ts","webpack://polygonjs-engine/./src/engine/params/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/params/utils/StatesController.ts","webpack://polygonjs-engine/./src/engine/params/utils/states/TimeDependent.ts","webpack://polygonjs-engine/./src/engine/params/utils/states/Error.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsController.ts","webpack://polygonjs-engine/./src/engine/params/Boolean.ts","webpack://polygonjs-engine/./src/engine/expressions/ExpressionManager.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/FunctionGenerator.ts","webpack://polygonjs-engine/./src/engine/expressions/LiteralConstructsController.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/_Module.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/bbox.ts","webpack://polygonjs-engine/./src/engine/expressions/MethodDependency.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/centroid.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/ch.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/copy.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/cop_res.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/local.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/opdigits.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/point.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/points_count.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_chars_count.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_concat.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_index.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_sub.ts","webpack://polygonjs-engine/./src/engine/expressions/AttributeRequirementsController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/ExpressionStringGenerator.ts","webpack://polygonjs-engine/./src/engine/expressions/DependenciesController.ts","webpack://polygonjs-engine/./src/engine/params/Button.ts","webpack://polygonjs-engine/./src/engine/params/Color.ts","webpack://polygonjs-engine/./src/engine/params/Folder.ts","webpack://polygonjs-engine/./src/engine/params/Integer.ts","webpack://polygonjs-engine/./src/engine/params/ramp/RampValue.ts","webpack://polygonjs-engine/./src/engine/params/Separator.ts","webpack://polygonjs-engine/./src/engine/params/Vector2.ts","webpack://polygonjs-engine/./src/engine/params/Vector3.ts","webpack://polygonjs-engine/./src/engine/params/Vector4.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsValueAccessor.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/ProcessingContext.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/IOController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/ConnectionsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/InputsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/NodeConnection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/OutputsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsAccessor.ts","webpack://polygonjs-engine/./src/engine/containers/Event.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/_BaseEventsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/LifeCycleController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/LoadingController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/ExpressionsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/MissingReferencesController.ts","webpack://polygonjs-engine/./src/engine/expressions/MissingReference.ts","webpack://polygonjs-engine/./src/engine/scene/utils/NodesController.ts","webpack://polygonjs-engine/./src/engine/nodes/manager/ObjectsManager.ts","webpack://polygonjs-engine/./src/engine/nodes/manager/_Base.ts","webpack://polygonjs-engine/./src/engine/containers/Manager.ts","webpack://polygonjs-engine/./src/core/performance/CorePerformance.ts","webpack://polygonjs-engine/./src/core/performance/PerformanceNode.ts","webpack://polygonjs-engine/./src/engine/scene/utils/TimeController.ts","webpack://polygonjs-engine/./src/engine/poly/SceneEvent.ts","webpack://polygonjs-engine/./src/engine/scene/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/scene/utils/UniformsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/WebGLController.ts","webpack://polygonjs-engine/./src/engine/poly/registers/All.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Cop.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/Builder.ts","webpack://polygonjs-engine/./src/engine/containers/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Bypass.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Display.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/SpareParamsController.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Node.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/Numeric.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/OperatorPath.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/String.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/Ramp.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/textures/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/CodeBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/configs/ParamConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/ShadersCollectionController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/LinesController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/CodeFormatter.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/BaseAssembler.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/textures/Default.frag.glsl","webpack://polygonjs-engine/./src/core/Sleep.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/EnvMap.ts","webpack://polygonjs-engine/./src/core/loader/Texture.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/RGBELoader.js","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/BasisTextureLoader.js","webpack://polygonjs-engine/./src/engine/nodes/cop/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/Switch.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Event.ts","webpack://polygonjs-engine/./src/engine/nodes/event/CameraMapControls.ts","webpack://polygonjs-engine/./src/engine/nodes/event/_BaseCameraControls.ts","webpack://polygonjs-engine/./src/engine/nodes/event/PassEvent.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Gl.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionMisc.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionToVec.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionVecTo.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg1.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2Operation.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2Boolean.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseMathFunctionArgBoolean2.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Align.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Complement.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/complement.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Cross.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Cycle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/cycle.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Disk.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/disk.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Easing.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/linear.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Fit.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Fit01.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/HsvToRgb.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/hsv2rgb.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/InstanceTransform.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Length.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Luminance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Mix.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/MultAdd.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Negate.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Noise.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/common.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise2D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise3D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise4D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise2D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise3D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise4D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Output.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Param.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Refract.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatMult.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatFromAxisAngle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatToAngle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatToAxis.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Ramp.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Random.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/RgbToHsv.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/rgb2hsv.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Rotate.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Round.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/TwoWaySwitch.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/VectorAlign.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/VectorAngle.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Mat.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshBasic.ts","webpack://polygonjs-engine/./src/engine/containers/Material.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshBasicBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Basic.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDistance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepth.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepthDOF.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshLambert.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshLambertBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Lambert.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshStandardBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Standard.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/Points.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Points.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepth.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDepth.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDistance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDistance.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepthDOF.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDepthDOF.vert.glsl","webpack://polygonjs-engine/./src/engine/poly/registers/Obj.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/AmbientLight.ts","webpack://polygonjs-engine/./src/engine/containers/Object.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/AreaLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/DirectionalLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/DirectionalLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/HemisphereLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/HemisphereLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PointLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/PointLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/SpotLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/SpotLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Events.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Materials.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Cop.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PostProcess.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Geo.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/DisplayNodeController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Fog.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Scene.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/OrthographicCamera.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/ControlsController.ts","webpack://polygonjs-engine/./src/engine/nodes/event/utils/CameraControlConfig.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/RenderPass.js","webpack://polygonjs-engine/./src/engine/viewers/Threejs.ts","webpack://polygonjs-engine/./src/engine/viewers/_Base.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/CamerasController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/ControlsController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/EventsController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/WebglController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/OrthographicCameraController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PerspectiveCamera.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/PerspectiveCameraController.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Sop.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Add.ts","webpack://polygonjs-engine/./src/core/geometry/Face.ts","webpack://polygonjs-engine/./src/core/geometry/MonkeyPatcher.ts","webpack://polygonjs-engine/./src/engine/containers/Geometry.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AnimationCopy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AnimationMixer.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribAddMult.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribCopy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribCreate.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribDelete.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribNormalize.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribPromote.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribRemap.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribRename.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribTransfer.ts","webpack://polygonjs-engine/./src/core/math/Interpolate.ts","webpack://polygonjs-engine/./src/core/math/octree/Octree.ts","webpack://polygonjs-engine/./src/core/math/octree/Node.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/BboxScatter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Blend.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Box.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Cache.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Circle.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Code.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Color.ts","webpack://polygonjs-engine/./src/core/Color.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Cone.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Copy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/CopyStamp.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Data.ts","webpack://polygonjs-engine/./src/core/geometry/AttributeData.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/DataUrl.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Delay.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Delete.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Face.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/File.ts","webpack://polygonjs-engine/./src/core/loader/Geometry.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/OBJLoader.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Fuse.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Hexagons.ts","webpack://polygonjs-engine/./src/core/geometry/operation/Hexagon.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Hierarchy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Instance.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Jitter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Layer.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Line.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Material.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Merge.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Noise.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/math/SimplexNoise.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Normals.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/ObjectMerge.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Occlusion.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/ParticlesSystemGpu.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/particles/Particles.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/particles/Default.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureAllocationsController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureAllocation.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureVariable.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/RenderController.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputeController.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputationRenderer.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Peak.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Plane.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Point.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Polywire.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Ray.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Resample.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Scatter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Shadows.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Skin.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Sphere.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Switch.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Text.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/TTFLoader.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Torus.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/TorusKnot.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Transform.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Tube.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/UvProject.ts","webpack://polygonjs-engine/./src/core/CameraController.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/shaders/CopyShader.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/MaskPass.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/EffectComposer.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","ParamTemplate","type","init_value","options","ParamType","BUTTON","BOOLEAN","COLOR","FLOAT","FOLDER","INTEGER","OPERATOR_PATH","RampParam","DEFAULT_VALUE","RAMP","SEPARATOR","STRING","VECTOR2","VECTOR3","VECTOR4","MESSAGE","DEFAULT_INPUT_NAMES","TypedSopNode","TypedNode","container_controller","TypedContainerController","this","GeometryContainer","flags","FlagsControllerDB","NodeContext","SOP","display","set","add_hook","active","parent","display_node_controller","set_display_node","io","outputs","set_has_one_output","core_group","objects","_set_object_attributes","set_container","FROM_SET_CORE_GROUP","set_container_objects","FROM_SET_OBJECT","FROM_SET_OBJECTS","geometry","create_object","FROM_SET_GEOMETRY","geometries","forEach","FROM_SET_GEOMETRIES","message","container","core_content","CoreGroup","set_objects","touch","index","position_array","getAttribute","array","setIndex","CoreConstant","OBJECT_TYPE","MESH","object_constructor","CONSTRUCTORS_BY_NAME","MATERIALS","clone","castShadow","receiveShadow","frustumCulled","material","scene","console","log","material_node","CoreMaterial","node","add_render_hook","points_count","indices","ConnectionPointType","ConnectionPointTypes","BOOL","INT","VEC2","VEC3","VEC4","ConnectionPointTypeToParamTypeMap","SAMPLER_2D","ParamTypeToConnectionPointTypeMap","undefined","ConnectionPointInitValueMap","DEFAULT_VALUE_JSON","ConnectionPointComponentsCountMap","InputCloneMode","CoreString","ensure_float","values","toArray","map","v","join","vec","num","vector3","x","y","z","w","GLDefinitionType","TypedGLDefinition","_definition_type","_data_type","_node","_name","TypedGLDefinitionCollection","super","ATTRIBUTE","data_type","FUNCTION","UNIFORM","VARYING","_type","_init_value","_json","_create_json","TypedGlNode","spare_params_controller","GlNodeSpareParamsController","GL","connections","init_inputs","ui_data","set_layout_horizontal","set_named_output_connection_points","initialize_node","node_sibbling","warn","assembler_controller","set_compilation_required_and_dirty","input_index","inputs","get_input_index","connection","input_connection","input_node","node_src","output_connection_point","named_output_connection_points","output_index","output_name","gl_var_name","full_path","ThreeToGl","any","params","shaders_collection_controller","_param_configs_controller","reset","list","ParamlessParamsConfig","NodeParamsConfig","ParamsConfig","params_config","ObjectType","ObjectTypes","POINTS","LINE_SEGMENTS","ObjectTypeMenuEntries","indexOf","Mesh","LineSegments","Points","materials","MeshStandard","MeshStandardMaterial","color","side","FrontSide","metalness","roughness","MeshLambertMaterial","Color","vertexColors","transparent","depthTest","PointsMaterial","size","LineBasicMaterial","linewidth","AttribClass","AttribType","AttribClassMenuEntries","VERTEX","OBJECT","AttribTypeMenuEntries","NUMERIC","ATTRIB_CLASS","ATTRIB_TYPE","OBJECT_TYPES","CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME","Scene","Group","Object3D","Bone","SkinnedMesh","BaseGlMathFunctionParamsConfig","BaseGlMathFunctionGlNode","BaseAdaptiveGlNode","gl_connections_controller","set_expected_input_types_function","_expected_input_types","set_expected_output_types_function","_expected_output_types","set_input_name_function","_gl_input_name","first_input_connection_type","first_input_connection","count","Math","max","input_connections","var_type","joined_args","named_input_connection_points","variable_for_input","body_line","gl_method_name","add_body_lines","add_definitions","gl_function_definitions","ATTRIB_NAMES_SEPARATOR","TAIL_DIGIT_MATCH_REGEXP","INDICES_LIST_SEPARATOR","NUM_REGEXP","BooleanString","word","TRUE","FALSE","test","match","parseInt","digits","substring","replace","upper_first","Date","parse","seconds","setTime","toISOString","substr","val","decimals","elements","split","frac","string_to_pad","pad","num_as_string","rule","RegExp","masks","matches_one_mask","mask","match_mask","trimed_elements","e","reverse","id","exp","element","charCodeAt","Number","MAX_SAFE_INTEGER","indices_string","sort","a","b","range_separator","range_elements","parsed","ShaderName","ParticleShaderNames","PARTICLES_0","PARTICLES_1","PARTICLES_2","PARTICLES_3","PARTICLES_4","PARTICLES_5","PARTICLES_6","PARTICLES_7","PARTICLES_8","PARTICLES_9","CoreGeometry","_geometry","uuid","_bounding_box","_create_bounding_box","computeBoundingBox","boundingBox","userData","marked_as_instance","computeVertexNormals","keys","user_data_attribs","CoreAttribute","remap_name","user_data_attrib","attributes","is_attrib_indexed","h","attrib_name","attrib_names","itemSize","attrib","set_indexed_attribute_values","setAttribute","Int32BufferAttribute","default_value","attribute_added","vec2","vec3","col","g","vec4","Float32BufferAttribute","Vector3","attrib_data","add_numeric_attrib","old_name","new_name","old_attrib","deleteAttribute","src_geometry","src_userData","attribute_name","attribute","constructor","InterleavedBufferAttribute","MonkeyPatcher","patch","new_geometry","position","position_attrib_name","_points","points_from_geometry","points","position_attrib","point_index","point","CorePoint","object_type","BufferGeometry","geometry_wrapper","first_point","old_geometry","old_geometry_wrapper","new_index_by_old_index","_indices_from_points","new_values","attrib_value","new_index_by_value","new_value","new_attrib_indices","new_index","attrib_size","index_attrib","old_indices","new_indices","old_index","old_index0","old_index1","old_index2","new_index0","new_index1","new_index2","core_geometries","indexed_attribute_names","new_values_by_attribute_name","indexed_attribute_name","index_by_values","all_geometries_points","core_geometry","geometry_points","set_attrib_index","merged_geometry","BufferGeometryUtils","mergeBufferGeometries","merged_geometry_wrapper","mergedUserData","faces_from_geometry","faces_count","CoreFace","_scene","_dirty_controller","DirtyController","_graph_node_id","graph","next_id","setNode","_graph","trigger","set_dirty","set_successors_dirty","remove_dirty_state","is_dirty","callback","add_post_dirty_hook","removeNode","src","connect","disconnect","disconnect_predecessors","disconnect_successors","predecessor_ids","predecessors","successors","all_predecessors","all_successors","NodeEvent","param","required_arguments","min_allowed_arguments_count","optional_arguments","max_allowed_arguments_count","args","index_or_path","referenced_node","get_referenced_node","request_container","path","decomposed_path","CoreWalker","find_param","input_graph_node","find_node","input","DecomposedPath","find_referenced_graph_node","create_dependency","MethodDependency","Poly","renderers_controller","RenderersController","nodes_register","NodesRegister","scenes_by_uuid","_instance","tab_menu_category","register_node","parent_context","registered_nodes","env","_env","POLY","instance","TypedMatNode","MaterialContainer","_cook_main_without_inputs_when_dirty_bound","_cook_main_without_inputs_when_dirty","MAT","initialize_base_node","name_controller","add_post_set_full_path_hook","set_material_name","cook_controller","cook_main_without_inputs","_material","create_material","Material","ObjNodeRenderOrder","TypedObjNode","ObjectContainer","render_order","MANAGER","_children_group","_attachable_to_hierarchy","_used_in_scene","OBJ","state","loading_controller","is_loading","root","update_object","attachable_to_hierarchy","add","remove","_object","_create_object_with_attributes","set_object_name","camera","FullScreenQuad","Pass","enabled","needsSwap","clear","renderToScreen","assign","setSize","render","error","_mesh","dispose","renderer","CoreGraphNode","BaseContainer","pv","ParamsValueAccessor","ParamsAccessor","_initialized","_display_node_controller","_parent_controller","HierarchyParentController","_children_controller_context","HierarchyChildrenController","_children_controller","_create_children_controller","_ui_data","UIData","_dependencies_controller","DependenciesController","_states","StatesController","_lifecycle","LifeCycleController","_serializer","NodeSerializer","_cook_controller","CookController","_io","IOController","_name_controller","NameController","set_name","_params_controller","ParamsController","_processing_context","ProcessingContext","node_context","three_imports","required_three_imports","required_imports","require_webgl2","parent_controller","set_parent","add_param","input_contents","content","set_content","end_cook","children_controller","create_node","remove_node","children","child_by_name","nodes_by_type","input_index_or_name","output_index_or_name","set_input","event_name","dispatch_controller","dispatch","include_param_components","serializer","to_json","TransformedParamConfig","Base","transform","ParamConfig","scale","TransformedObjNode","transform_controller","TransformController","_update_transform_from_params_scale","set_count","set_depends_on_inputs","add_on_set_input_hook","on_input_updated","hook_name","dirty_controller","has_hook","add_to_parent_transform","remove_from_parent_transform","matrix","update_transform_with_matrix","equals","update_transform_from_params","matrixAutoUpdate","dispatchEvent","rotation","copy","multiplyScalar","radians","CoreMath","degrees_to_radians","euler","Euler","updateMatrix","CoreTransform","set_params_from_matrix","_translation_matrix","Matrix4","_translation_matrix_q","Quaternion","_translation_matrix_s","_matrix","identity","_matrix_q","_matrix_e","_matrix_s","_rotate_geometry_m","_rotate_geometry_q","_rotate_geometry_vec_dest","update_scale","quaternion","decompose","setFromQuaternion","toVector3","divideScalar","PI","batch_update","set_vector3","set_float","compose","quat","MathUtils","degToRad","setFromEuler","vec_origin","vec_dest","normalize","setFromUnitVectors","makeRotationFromQuaternion","applyMatrix4","TypedParam","_options","OptionsController","_emit_controller","EmitController","_is_computing","initialize_param","_expression_controller","ParamSerializer","_value","raw_val","val1","val2","other_raw_input","are_raw_input_equal","_raw_input","other_val","are_values_equal","raw_input","_clone_raw_input","_prefilter_invalid_raw_input","emit_controller","emit","ParamEvent","RAW_INPUT_UPDATED","process_raw_input","_default_value","Promise","resolve","reject","_compute_resolves","process_computation","pop","makes_node_dirty_when_dirty","parent_param","params_node","add_graph_input","remove_graph_input","components","set_node","_parent_param","relative_path","emit_allowed","increment_count","_components","component_names","expression_controller","FlagsController","Display","DisplayFlag","Bypass","bypass","BypassFlag","FlagsControllerD","FlagsControllerB","filter","first_element","next_node","PARENT","add_path_element","CURRENT","add_node","remainder","path_from_root","node_path","param_name","src_graph_node","dest_graph_node","closest_common_parent","distance","distance_to_parent","up","ups","parent_path_elements","dest_path_elements","remaining_elements","cmptr","dest_path_element","graph_node1","graph_node2","parents1","parents","parents2","min_depth","min","found_parent","graph_node_id","graph_node","dest","current","dest_id","path_elements","make_absolute_path","DOT","CURRENT_WITH_SLASH","PARENT_WITH_SLASH","NON_LETTER_PREFIXES","THREE","Triangle","RAD_DEG_RATIO","dest_min","dest_max","fit","src_min","src_max","degrees","deg","rad","radians_to_degrees","number","rand_float","rand_vec2","step_size","steps_count","rounded_steps_count","ceil","floor","uv","sn","fract","sin","lnglat1","lnglat2","φ1","deg2rad","lat","φ2","Δφ","Δλ","lng","cos","atan2","sqrt","triangle","margin","mid_point","TriangleProp","getMidpoint","prop","delta","sub","delta_n","pow","Easing","SideParamConfig","double_sided","front","visible_if","SideController","BaseController","single_side","BackSide","new_side","DoubleSide","needsUpdate","CustomMaterialName","ShaderAssemblerMaterial","BaseGlShaderAssembler","_assemblers_by_custom_name","Map","ShaderMaterial","class_by_custom_name","custom_assembler_class_by_custom_name","assembler_class","custom_name","_add_custom_material","custom_assembler","_gl_parent_node","custom_materials","_code_builder","assembler","set_root_nodes","_root_nodes","set_param_configs_owner","set_shader_configs","shader_configs","set_variable_configs","variable_configs","custom_material","compile_material","compile_allowed","output_nodes","GlNodeFinder","find_output_nodes","states","_update_shaders","new_vertex_shader","_shaders_by_name","new_fragment_shader","FRAGMENT","vertexShader","fragmentShader","add_uniforms","uniforms","uniforms_time_dependent","uniforms_controller","add_time_dependent_uniform_owner","remove_time_dependent_uniform_owner","compile_custom_materials","_lines","shader_name","shader_names","template","_template_shader_for_shader_name","build_code_from_nodes","_build_lines","lines","output_node","input_name","named_input","var_input","variable_config","new_var","default_from_attribute","connection_point","named_input_connection_points_by_name","gl_type","attr_read","globals_handler","read_attribute","variable_config_default","default","prefix","suffix","if_condition","current_shader_name","input_names","shader_config","add_output_body_line","attribute_node","var_name","body_lines","globals_node","dependencies","definitions_by_shader_name","body_lines_by_shader_name","definition","used_output_names","globals_shader_name","UniformGLDefinition","MapUtils","push_on_array_at_entry","dependency","set_uniforms_time_dependent","handle_gl_FragCoord","handle_resolution","set_resolution_dependent","handle_globals_node","definitions","container_class","_callbacks","_container","setTimeout","process_container_request","request_input_container","then","notify_requesters","reset_caches","cook_main","processing_context","callbacks","Vector2","ATTRIB_NAME_MAP","P","N","Cd","index_by_value","current_index","TypedContainer","cloned_container","_content","_post_set_content","SkinningParamConfig","skinning","SkinningController","new_skinning","TextureMapParamConfig","use_map","BooleanParamOptions","TextureMapController","FileCopNode","DEFAULT_NODE_PATH","UV","OperatorPathOptions","BaseTextureMapController","_update_options","add_hooks","_update","texture_map_controller","update","TextureAlphaMapParamConfig","use_alpha_map","TextureAlphaMapController","alpha_map","texture_alpha_map_controller","new_element","has","unshift","new_elements","CATEGORY_OBJ","LIGHT","GEOMETRY","CAMERA","MISC","CATEGORY_COP","INPUT","ADVANCED","CATEGORY_EVENT","CATEGORY_GL","CONVERSION","DYNAMICS","GLOBALS","LOGIC","MATH","QUAT","TRIGO","UTIL","INSTANCE","CATEGORY_MAT","LINE","VOLUME","CATEGORY_SOP","ANIMATION","MODIFIER","PRIMITIVES","RENDER","CATEGORY_POST","PASS","Uint16Array","EMPTY_DATA_TEXTURE","DataTexture","LuminanceFormat","HalfFloatType","TypedCopNode","TextureContainer","COP","texture","AssemblerControllerNode","_globals_handler","GlobalsGeometryHandler","_compile_required","_deleted_params_data","_assembler","reset_configs","output_child","add_output_params","add_globals_params","allow_attribute_exports","globals","output","set_position","new_state","trigger_node","set_compilation_required","create_spare_parameters","param_config","param_configs","set_uniform_value","current_spare_param_names","spare_names","assembler_param_names","spare_param_names_to_add","spare_param_names_to_remove","params_update_options","current_param_names","names","spare_params_with_same_name_as_params","error_message","param_exporter","JsonExportDispatcher","dispatch_param","required","params_data","names_to_delete","param_options","spare","cook","to_add","update_params","VARIABLE_CONFIG_DEFAULT_BY_NAME","GlobalsBaseController","named_output_connection_points_by_name","VaryingGLDefinition","variable_name","PRE_DEFINED_ATTRIBUTES","AttributeGLDefinition","AttributeGlNode","varying_definition","set_varying_body_line","IF_RULE","_input_name_function","_output_name_function","_expected_input_types_function","_expected_output_types_function","_update_signature_if_required_bound","update_signature_if_required","func","add_on_scene_load_hook","set_post_create_params_hook","dirty_trigger","lifecycle","creation_completed","_connections_match_inputs","update_connection_types","make_successors_update_signatures","successor","graph_all_successors","gl_node","expected_input_types","expected_output_types","named_input_connections","TypedNamedConnectionPoint","named_outputs","set_named_input_connection_points","current_input_types","current_output_types","first_connection","connection_type_from_connection","MAPPINGS","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","WRAPPINGS","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","MAG_FILTERS","LinearFilter","NearestFilter","MIN_FILTERS","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","ATTRIB_MAPPING_KEYS","ATTRIB_MAPPING","mapping","wrapS","wrapT","minFilter","magFilter","FileCopParamsConfig","url","CoreTextureLoader","PARAM_DEFAULT","desktop_browse","file_type","reload","PARAM_CALLBACK_reload","menu","entries","wrap_s","wrap_t","mag_filter","min_filter","_is_static_image_url","cook_for_image","cook_for_video","_load_texture","_update_texture_params","set_texture","clear_texture","_param_url_changed","_add_video_spare_params_if_required","_previous_param_url","_set_video_current_time","texture_attrib","param_value","float","param_callback_reload","_video","currentTime","VideoTexture","image","has_param","VIDEO_TIME_PARAM_NAME","duration","range","range_locked","PARAMS_UPDATED","_remove_spare_params","_texture_loader","load_texture_from_url_or_op","ENV_MAP","background","use_background","use_material","background_color","background_material","node_selection","context","dependent_on_found_node","background_ratio","_bg_raycaster","Raycaster","_screen_quad","_create_screen_quad","PlaneBufferGeometry","quad","_screen_quad_flat_material","MeshBasicMaterial","boolean","use_background_color","update_screen_quad","update_background_color","use_background_material","update_background_material","screen_quad_flat_material","screen_quad","bg_node","found_node","TypedEventNode","EventContainer","_eval_all_params_on_dirty_bound","_eval_all_params_on_dirty","EVENT","eval_all","event","canvas","camera_node","_reset_ramp_interpolant_and_texture_bound","_reset_ramp_interpolant_and_texture","RampValue","from_json","raw_input1","raw_input2","is_equal","is_equal_json","are_json_equal","VALUE_UPDATED","_ramp_interpolant","_ramp_texture","_create_ramp_texture","Uint8Array","stride","width","value_at_position","RGBFormat","positions","interpolated_values","Float32Array","CubicInterpolant","_create_interpolant","sorted_points","sorted_point","create_interpolant","interpolant","evaluate","RampInterpolation","LINEAR","RampPoint","_param","_complex_data","is_spare_and_not_component","is_spare","value_changed","is_default","_require_data_complex","_data_complex","_data_simple","raw_input_serialized","default_value_serialized","add_main","has_options_overridden","overridden_options","options_overridden","option_name","option_value","JSON","stringify","INSERT_DEFINE_AFTER_MAP","INSERT_BODY_AFTER_MAP","LINES_TO_REMOVE_MAP","TypedAssembler","_leaf_nodes","_uniforms_time_dependent","_resolution_dependent","_template_shader","_replace_template","root_nodes","current_uniforms","uniform_name","uniform","time","resolution_dependent","GlobalsGlNode","CodeBuilder","code_builder","build_from_nodes","allow_new_param_configs","disallow_new_param_configs","line_type","all_lines","_param_config_owner","param_config_owner","hidden","create_globals_node_output_connections","_reset_shader_configs","_reset_variable_configs","_reset_uniforms_time_dependency","_reset_resolution_dependency","_shader_configs","create_shader_configs","sc","ShaderConfig","_variable_configs","create_variable_configs","vc","VariableConfig","if","root_node","function_declaration","builder_lines","LineType","FUNCTION_DECLARATION","define","DEFINE","body","BODY","template_lines","new_lines","line_before_define","insert_define_after","line_before_body","insert_body_after","lines_to_remove","line_before_define_found","line_before_body_found","template_line","_insert_lines","line_remove_required","line_to_remove","lines_to_add","line_to_add","src_material","clone_single","material_with_custom","mat_name","mat","uniform_value","mod","aa","execScript","Uint32Array","DataView","f","k","POSITIVE_INFINITY","Array","bufferSize","bufferType","resize","A","Error","B","C","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","fa","G","H","I","J","K","L","da","ea","O","R","ga","Q","W","verify","ha","method","buffer","Y","Z","$","ia","X","ADAPTIVE","BLOCK","Zlib","TypedNumericParam","converted","convert","set_expression","EXPRESSION_UPDATED","_update_value","ExpressionController","expression","requires_entities","expression_result","compute_expression","is_errored","set_value_from_components","execute_callback","TypedMultipleParam","_components_contructor","FloatParam","component_name","component","default_val","set_init_value","set_parent_param","compute_components","promises","compute","all","number_or_string","cooker","block","block_parent_emit","unblock","unblock_parent_emit","_input_names","_dependencies","_param_configs","ColorParamConfig","use_vertex_colors","opacity","alpha_test","use_fog","ColorsController","new_vertex_color","alphaTest","fog","TypedBuilderMatNode","add_on_create_hook","on_create","init","_assembler_controller","_create_assembler_controller","compile_required","_compile","post_compile","BaseLightTransformedObjNode","TypedLightObjNode","update_light_params","update_shadow_params","BaseLightHelperParamConfig","show_helper","helper_size","BaseLightHelperObjNode","wireframe","build_helper","_helper_constructor","update_helper_attachment","helper","_helper","_create_helper","build","light","visible","BaseManagerObjNode","layer","layers","enable","integer","operator_path_param_options","POST","do_post_process","post_process","use_post_process_node0","post_process_node0","use_post_process_node1","post_process_node1","use_post_process_node2","post_process_node2","use_post_process_node3","post_process_node3","_renderers_by_canvas_id","_composers_by_canvas_id","_resolution_by_canvas_id","_composers_set_in_progress_by_canvas_id","_fetch_post_process_nodes_in_progress","_post_process_nodes","_post_process_use_node_path_params","_post_process_node_path_params","aspect","composer","setup_for_aspect_ratio","default_scene","gl","rendering_context","WebGLRenderer","antialias","alpha","shadowMap","physicallyCorrectLights","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","register_renderer","set_renderer_size","setPixelRatio","devicePixelRatio","deregister_renderer","_create_composer","EffectComposer","set_composer_passes","composer_passes_nodes_changed","post_process_node","set_composers_passes","ids","clear_render_passes","render_scene_pass","RenderPass","clearAlpha","addPass","apply_to_composer","render_pass","passes","disposable_pass","_graph_node","base","last_char","children_allowed","set_child_name","request_name_to_parent","_set_core_name","post_set_name","post_set_full_path","child_node","missing_expression_references_controller","check_for_missing_references","expressions_controller","regenerate_referring_expressions","NAME_UPDATED","hook","_on_set_name_hooks","_on_set_full_path_hooks","StringParamLanguage","_programatic_visible_state","_update_visibility_and_remove_dirty_bound","update_visibility_and_remove_dirty","_ui_data_dependency_set","_default_options","options_controller","overriden","option_names","loaded","get_callback","is_cooking","has_callback","create_callback_from_string","callback_string","callback_function","Function","cook_options","desktop_browse_option","expr_option","menu_options","has_menu","language","node_selection_options","texture_options","is_hidden","VISIBLE_UPDATED","is_field_hidden","predecessor_names","visibility_predecessors","_visibility_graph_node","predecessor","update_visibility","VARIABLE_PREFIX","_set_error_from_error_bound","_set_error_from_error","_error_message","method_name","set_error","traverse_node","left","operator","right","consequent","alternate","traversed_args","arg_node","raw","AsyncFunction","getPrototypeOf","ConnectionPointTypesAvailableForAttribute","AttributeGlParamsConfig","_on_create_set_name_if_none_bound","_on_create_set_name_if_none","GlConnectionsController","_set_mat_to_recompile_if_is_exporting","INPUT_NAME","OUTPUT_NAME","set_node_lines_attribute","named_input_connection_point","export_when_connected","is_exporting","_set_mat_to_recompile","NodeJsonExporter","ParamNumericJsonExporter","OperatorPathParam","ParamOperatorPathJsonExporter","StringParam","ParamStringJsonExporter","ParamRampJsonExporter","ParamJsonExporter","_data","nodes_controller","reset_node_context_signatures","root_exporter","dispatch_node","nodes_data","properties","frame","frame_range","frame_range_locked","time_controller","master_camera_node_path","cameras_controller","ui","escape_line_breaks","CameraOrbitEventParamsConfig","allow_pan","allow_rotate","allow_zoom","tdamping","damping","screen_space_panning","rotate_speed","min_distance","max_distance","polar_angle_range","CameraOrbitControlsEventNode","TypedCameraControlsEventNode","OrbitControls","controls","enablePan","enableRotate","enableZoom","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableKeys","target","controller_class","controller","use_map_name","use_map_param","path_param","mat_attrib_name","shader_material","attr_name","_update_texture_on_uniforms","direct_params","_update_texture_on_material","_update_required_attribute","_apply_texture_on_uniforms","_remove_texture_from_uniforms","has_texture","new_texture_is_different","_do_update_define","define_name","_define_name","defines","toUpperCase","_apply_texture_on_material","_remove_texture_from_material","texture_owner","update_callback","remove_callback","texture_node","ASSEMBLER_MAP","DISTANCE","ShaderAssemblerCustomMeshDistance","DEPTH","ShaderAssemblerCustomMeshDepth","DEPTH_DOF","ShaderAssemblerCustomMeshDepthDOF","ShaderAssemblerMesh","_color_with_intensity","_light","create_light","update_light_attachment","shadow","create_shadow_params","intensity","CoreObject","CoreEntity","geo","group","compute_vertex_normals","add_attribute","attribute_names","includes","delete_attribute","src_object","new_object","sourceLookup","cloneLookup","parallelTraverse","sourceNode","clonedNode","traverse","src_node","mesh_node","src_node_geometry","mesh_node_geometry","apply_custom_materials","material_with_color","src_node_with_animations","animations","animation","skinned_node","isSkinnedMesh","clonedMesh","sourceMesh","sourceBones","skeleton","bones","bindMatrix","new_bones","bone","computeTangents","normal","normals","uvs","nVertices","tangent","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","groups","start","il","jl","handleTriangle","tmp","tmp2","n2","handleVertex","fromArray","isFinite","addScaledVector","dot","crossVectors","useGroups","isIndexed","attributesUsed","Set","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","addGroup","indexOffset","mergedIndex","getX","mergedAttribute","mergeBufferAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","normalized","arrayLength","isInterleavedBufferAttribute","interleaveAttributes","interleavedBuffer","res","getters","setters","iba","estimateBytesUsed","mem","attr","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","EPSILON","hashToIndex","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","fill","decimalShift","log10","shiftMultiplier","hash","newarray","newMorphArrays","getterFunc","ml","oldAttribute","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","GlobalsTextureHandler","_uv_name","_texture_allocations_controller","variable","globals_geometry_handler","texture_variable","add_particles_sim_uv_attribute","allocation","var_name_texture","texture_name","texture_definition","particles_sim_uv_attrib_definition","UV_ATTRIB","particles_sim_uv_varying_definition","UV_VARYING","PARTICLE_SIM_UV","curve_point_indices","accumulated_curve_point_indices","last_index_added","previous_index","attrib_sizes_by_name","new_attribute_values_by_name","attribute_sizes_by_name","attrib_sizes","create_line_segment_geometry","MouseEventParamsConfig","MouseEventNode","PARAM_CALLBACK_toggle_active","ACCEPTED_MOUSE_EVENT_TYPES","event_type","add_on_add_hook","events_controller","register_event_node","add_delete_hook","unregister_event_node","get_output_index","nodes","output_connections","node_dest","process_event","_update_register","ui_data_json","children_ids","input_ids","input_connection_output_indices","connection_input_indices","named_output_connections","param_ids","to_json_params","override_clonable_state","inputs_clonable_state_with_override","selection","param_names","include_components","to_json_params_from_names","ParamConstructorByType","BooleanParam","ButtonParam","ColorParam","FolderParam","IntegerParam","SeparatorParam","Vector2Param","Vector3Param","Vector4Param","_expression","_manager","is_expression_for_entities","deregister_param","ExpressionManager","parse_expression","update_from_method_dependency_name_change","compute_function","entities","set_entities","reset_entities","compute_expression_for_entities","_entities","_entity_callback","addUnaryOp","addBinaryOp","ParsedTree","string","string_value_elements","arguments","callee","_named_nodes","graph_node_ids","node_element_by_graph_node_id","named_nodes","path_element","joined_path","first_char","ease_i","power","ease_o","abs","ease_io","linear","ease_i2","ease_o2","ease_io2","ease_i3","ease_o3","ease_io3","ease_i4","ease_o4","ease_io4","ease_i_sin","ease_o_sin","ease_io_sin","ease_i_elastic","ease_o_elastic","ease_io_elastic","is_number","parseFloat","ensure_in_range","_found_node","expected_context","node_selection_context","_value_elements","MouseEventType","auxclick","click","contextmenu","dblclick","mousedown","mouseenter","mouseleave","mousemove","mouseover","mouseout","mouseup","pointerlockchange","pointerlockerror","select","wheel","MouseEventsController","BaseEventsController","BaseMouseEventProcessor","raycaster","mouse","initialize_processor","MouseEvent","process_mouse_event","KeyboardEvent","process_keyboard_event","clientX","offsetWidth","clientY","offsetHeight","CodeEventParamsConfig","code_typescript","label","TYPESCRIPT","code_javascript","CodeEventNode","_compile_if_required","_processor","_last_compiled_code","function_body","TranspiledFilter","processor_class","processor_creator_function","transpiled_javascript","filtered_lines","line","_state","_hooks","on_update","run_hooks","_id","__next_id","_definitions","_errored","definitions_by_name","existing","uniq_definitions","_leaves_graph_id","_graph_ids_by_shader_name","_outputs_by_graph_id","_depth_by_graph_id","_graph_id_by_depth","input_names_for_shader_name","_shader_name","find_leaves_from_root_node","set_nodes_depth","depth","graph_id","LEAVES_FROM_NODES_SHADER","find_leaves","node_ids","nodes_from_ids","depths","graph_ids_for_depth","node_from_id","unique_inputs","booleans_by_graph_id","set_node_depth","current_depth","output_ids","output_id","GlobalsGlParamsConfig","set_node_lines_globals","domElement","quatInverse","lastPosition","lastQuaternion","document","Infinity","minZoom","maxZoom","minAzimuthAngle","maxAzimuthAngle","zoomSpeed","panSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","updateProjectionMatrix","changeEvent","STATE","NONE","inverse","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","distanceToSquared","EPS","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","mouseAction","preventDefault","focus","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","addEventListener","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","MathFunctionArg2Factory","gl_output_name","out","gl_input_names","in","default_in_type","allowed_in_types","out_type","functions","BaseNodeGlMathFunctionArg2GlNode","set_output_name_function","_gl_output_name","FunctionGLDefinition","first_input_type","DistanceGlNode","DotGlNode","MaxGlNode","MinGlNode","ModGlNode","PowGlNode","ReflectGlNode","StepGlNode","typed_visible_options","ConstantGlParamsConfig","bool","int","ConstantGlNode","_allow_inputs_created_from_params","_current_connection_type","_current_param","connection_type","_current_var_name","_params_by_type","MathFunctionArg3Factory","gl_input_default_values","BaseNodeGlMathFunctionArg3GlNode","ClampGlNode","FaceforwardGlNode","SmoothStepGlNode","SHADER_DEFAULTS","MeshStandardMatParamsConfig","TextureEnvMapParamConfig","MeshStandardMatNode","texture_env_map_controller","TextureEnvMapController","envMapIntensity","env_map_intensity","set_material","use_env_map","env_map","PointsMatParamsConfig","PointsBuilderMatNode","GlAssemblerController","ShaderAssemblerPoints","compile_if_required","EVENT_CHANGE","BASE_CAMERA_DEFAULT","near","far","CameraTransformParamConfig","set_master_camera","BaseCameraObjNodeClass","PARAM_CALLBACK_set_master_camera","BaseCameraObjParamsConfig","CameraPostProcessParamConfig","CameraBackgroundParamConfig","LayerParamConfig","TypedCameraObjNode","_aspect","_background_controller","background_controller_constructor","BaseBackgroundController","_controls_controller","ControlsController","_layers_controller","LayersController","_post_process_controller","PostProcessController","layers_controller","background_controller","post_process_controller","update_composer_passes","update_camera","controls_controller","update_controls","set_as_master_camera","set_master_camera_node_path","_update_for_aspect_ratio","set_params_from_object","ThreejsViewer","_timestamp","performance","now","_core_geometries","_core_objects","_objects","_create_core_objects","core_object","core_objects","create_core_geometries","isMesh","isLine","isPoints","faces","group_name","core_objects_from_group","co","_compute_bounding_box","center","bounding_box","getCenter","getSize","bbox","expandByObject","Box3","first_geometry","has_attrib","attrib_type","attrib_class","child","geometry_from_object","rename_attribute","first_object","masks_string","matching_attrib_names","src_group","new_group","ATTRIB_NAMES","ComponentName","COMPONENT_INDICES","_core_geometry","remapped_name","component_index","remaped_name","value_index","attrib_value_index","start_index","_index","Vector4","_position","new_position","set_attrib_value_vector3","_normal","new_normal","v2","v3","new_value_index","_array_index","_count","_current_count_index","_resolve","_max_time_per_chunk","max_time_per_chunk","_check_every_interations","check_every_interations","iteratee_method","_iteratee_method_count","_bound_next_with_count","next_with_count","start_time","_array","_iteratee_method_array","_bound_next_with_array","next_with_array","_current_array_element","segments_count","arc_angle","radian_per_segment","point_radian","positions_2d","position_2d","DEFAULT","SCALE","PSCALE","EYE","DEFAULT_COLOR","DEFAULT_UV","CoreInstancer","_group_wrapper","_matrices","_is_pscale_present","_is_scale_present","_is_normal_present","_is_up_present","_do_rotate_matrices","_matrix_from_point","pscale","scale_matrix","makeScale","translate_matrix","makeTranslation","multiply","rotate_matrix","eye","geometry_to_instance","template_core_group","attributes_to_copy","instance_pts","InstancedBufferGeometry","instances_count","colors","scales","orients","has_color","instance_matrices","matrices","instance_pt","index3","index4","has_uv","index2","InstancedBufferAttribute","attrib_names_matching_mask","pt","mark_as_instance","_attribute_datas_by_name","data_keys_prefix","skip_entries","do_convert","convert_to_numeric","success_callback","progress_callback","error_callback","fetch","response","json","get_prefixed_json","catch","prefixes","first_prefix","core_geo","init_position_attribute","_find_attributes","convert_to_numeric_masks","attrib_values","_attribute_values_for_name","numerical_attrib_values","index_data","array_to_indexed_arrays","set_indexed_attribute","first_pt","_value_has_subentries","deep_attrib_name","deep_attrib_value","CoreAttributeData","from_value","json_element","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","load","onLoad","onProgress","onError","loader","setPath","setResponseType","crossOrigin","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","lastIndexOf","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","indexArray","GetFaceFromMesh","buffers","WeakMap","releaseDecoderModule","getDecoderModule","geometry1","geometry0","geometry_wrapper0","geometry_wrapper1","segments0","segments","segments1","geometries_by_segments_count","smallest_geometry","largest_geometry","smallest_segments","largest_segments","smallest_points","largest_points","smallest_points_count","all_points","points_indices","segment","matched_segment","PolyScene","AllRegister","run","_default_scene","_cameras_controller","CamerasController","_cooker","Cooker","CoreGraph","_missing_expression_references_controller","MissingReferencesController","_expressions_controller","ExpressionsController","_nodes_controller","NodesController","_time_controller","TimeController","set_scene","_uuid","wait_for_cooks_completed","_dispatch_controller","DispatchController","_events_controller","SceneEventsController","_lifecycle_controller","_loading_controller","LoadingController","_performance","CorePerformance","set_frame","play","pause","PolySceneSerializer","_uniforms_controller","UniformsController","_webgl_controller","WebGLController","_master_camera_node_path","camera_node_path","_find_any_camera","_queue","_block_level","_process_item_bound","_process_item","process_queue","original_trigger_graph_node","blocked","delete","run_post_dirty_hooks","_next_id","Graph","directed","compound","multigraph","src_id","hasNode","setEdge","graph_has_cycle","alg","isAcyclic","removeEdge","clear_successors_cache_with_predecessors","src_id_s","dest_id_s","successor_ids","next_ids","next_next_ids","next_next_id","all_next_ids","all_predecessor_ids","all_successor_ids","_cooking_nodes_by_id","_resolves","flush","events_listener","_events_listener","emitter","process_events","auto_updating","player_mode","CONTEXT_OPTIONS","_next_renderer_id","_next_env_map_id","_renderers","_env_maps","_require_webgl2","_rendering_context_webgl","webgl2","context_name","getContext","_polygon_id","flush_callbacks_with_renderer","first_id","first_renderer","_node_register","_node_register_categories","_node_register_options","node_type","parent_node_type","option_only","option_except","context_and_type","registered_nodes_for_context_and_parent_type","_mouse_events_controller","_controllers","_get_controller_for_node","unregister_node","accepts_event","process","_dirty_count","_dirty","_dirty_timestamp","_post_dirty_hook_names","_post_dirty_hooks","_forbidden_trigger_nodes","propagate","enqueue","_cached_successors","clear_successors_cache","graph_all_predecessors","_width","_border_radius","_color","_layout_vertical","comment","_comment","UI_DATA_COMMENT_UPDATED","UI_DATA_POSITION_UPDATED","snap","round","time_dependent","TimeDependentState","ErrorState","BaseState","are_params_time_dependent","are_inputs_time_dependent","graph_predecessors","frame_node","_message","ERROR_UPDATED","_parent","base_name","contains","separator","parent_full_path","_on_set_parent_hooks","_context","_children","_children_by_type","_children_and_grandchildren_by_context","_is_dependent_on_children","_selection","CoreNodeSelection","dependent","_children_node","current_child_with_name","increment","current_name","update_name_from_parent","_add_to_nodes_by_type","add_to_instanciated_node","available_children_classes","node_class","initialize_base_and_node","set_creation_completed","on_set_parent","CREATED","child_node_json","lifecycle_controller","on_create_hook_allowed","run_on_create_hooks","run_on_add_hooks","run_on_child_add_hooks","webgl_controller","set_require_webgl2","output_connection","old_src","old_output_index","old_dest","old_input_index","graph_disconnect_successors","_remove_from_nodes_by_type","remove_from_instanciated_node","run_on_child_remove_hooks","run_on_delete_hooks","DELETED","parent_id","node_id","add_to_children_and_grandchildren_by_context","remove_from_children_and_grandchildren_by_context","traverse_children","_node_ids","send_update_event","nodes_to_add","node_ids_to_add","nodes_to_remove","node_ids_to_remove","SELECTION_UPDATED","_creation_completed","_on_child_add_hooks","execute_hooks_with_child_node","_on_child_remove_hooks","_on_create_hooks","execute_hooks","_on_add_hooks","_on_delete_hooks","hooks","_cooking","_cooks_count","_max_cook_time","_cook_time_with_inputs","_cook_time","_cook_time_params","_inputs_evaluation_required","_cooking_dirty_timestamp","dirty_timestamp","perf_active","started","_cook_time_start","_init_cooking_state","_cook_time_with_inputs_start","input_containers","evaluate_inputs_and_params","_init_cooking_start_time","input_container","input_clonable_state_with_override","core_content_cloned","_start_cook_if_no_errors","_increment_cooks_count","_terminate_cook_process","_record_cook_time","cook_time_end","_cook_time_params_start","record_node_cook_data","eval_required_inputs_p","METHODS","_find_scene_node_scene_nodes","SUCCESSORS","PREDECESSORS","graph_nodes","start_nodes","base_nodes","start_node","_find_base_nodes_from_node","param_nodes_referree","scene_node","base_nodes_by_graph_node_id","uniq_base_nodes","next_nodes","BaseParamClass","className","BaseNodeClass","_params_referrees_by_graph_node_id","node_by_graph_node_id","params_referree","_blocked_emit","_blocked_parent_emit","_count_by_event_name","is_multiple","block_emit","unblock_emit","is_visible","value_serialized","has_expression","frame_graph_node_id","graph_predecessor_ids","_param_create_mode","_params_by_name","_params_list","_param_names","_non_spare_params","_spare_params","_non_spare_param_names","_spare_param_names","_params_added_since_last_params_eval","_params_node","init_dependency_node","init_from_params_config","create_params","_post_create_params","_update_caches","init_param_accessors","run_post_create_params_hook","has_created_a_param","has_deleted_a_param","delete_param","param_data","current_names_in_accessor","getOwnPropertyNames","_remove_unneeded_accessors","configurable","names_to_remove","current_name_in_accessor","name_to_remove","param_with_type","set_with_type","value_with_type","child_name","existing_param","init_components","_eval_param","eval_params","_post_create_params_hook","_on_scene_load_hook_names","_on_scene_load_hooks","is_boolean","to_boolean","parse_completed","parse_started","parsed_tree","function_generator","FunctionGenerator","dependencies_controller","parse_expression_for_string_param","parse_tree","compute_allowed","eval_function","eval_allowed","expression_string_generator","ExpressionStringGenerator","new_expression_string","NATIVE_MATH_METHODS_RENAMED","math_random","EASING_METHODS","DIRECT_EXPRESSION_FUNCTIONS","remaped","LITERAL_CONSTRUCT","LiteralConstructsController","GLOBAL_CONSTANTS","INDIRECT_EXPRESSION_METHODS","MethodModule","PROPERTY_OFFSETS","BaseTraverser","_attribute_requirements_controller","AttributeRequirementsController","methods","method_index","method_dependencies","immutable_dependencies","function_main_string","function","assign_attributes_lines","attribute_presence_check_line","assign_arrays_lines","clear_error","Core","String","method_arguments","arg","literal_contruct","arguments_joined","direct_function_name","path_node","function_string","path_argument_function","path_argument","_create_method_and_dependencies","argument","argument_member_expression","attrib_node","property_node","var_attribute_size","var_array","identifier_name_without_dollar_sign","direct_constant_name","_method_centroid","method_constructor","method_dependency","find_dependency","set_jsep_node","register","Bbox","ch","Ch","centroid","Centroid","cop_res","CopRes","local","Local","opdigits","Opdigits","Point","PointsCount","Copy","str_chars_count","StrCharsCount","str_concat","StrConcat","str_index","StrIndex","str_sub","StrSub","VECTOR_NAMES","COMPONENT_NAMES","BaseMethod","create_dependency_from_index_or_path","vector_name","get_referenced_node_container","_get_value_from_container","vector","_update_from_name_change_bound","_update_from_name_change","update_from_name_change","new_path","to_path","literal","jsep_node","graph_disconnect_predecessors","node_in_path","resolved_graph_node","unresolved_path","is_index","set_resolved_graph_node","set_unresolved_path","get_referenced_param","ref","stamp_node","stamp_value","resolution","request_asset_url","desktop_controller","add_local_path","local_path_server_url","name_node","tail_digits","sub_string","range_start","range_size","_attribute_names","assign_attribute_line","assign_item_size_line","assign_array_line","var_names","var_attribute","cyclic_graph_detected","connect_immutable_dependencies","handle_method_dependencies","listen_for_name_changes","handle_method_dependency","node_simple","COMPONENT_NAMES_COLOR","other_point","json1","json2","_interpolation","generateUUID","json_point","interpolation","ramp","current_point","other_ramp_value","other_points","point1","point2","are_equal_json","COMPONENT_NAMES_VECTOR2","COMPONENT_NAMES_VECTOR3","COMPONENT_NAMES_VECTOR4","_frame","src_context","_connections","ConnectionsController","_inputs","InputsController","_outputs","OutputsController","_output_connections","max_inputs_count","_input_connections","all_connections_after_are_undefined","connections_by_id","_graph_node_inputs","_has_named_inputs","_min_inputs_count","_max_inputs_count","_depends_on_inputs","_override_clonable_state","depends_on_inputs","min_inputs_count","init_graph_node_inputs","_named_input_connection_points","connection_points","set_min_inputs_count","set_max_inputs_count","NAMED_INPUTS_UPDATED","_create_graph_node_input","graph_input_node","init_inputs_clonable_state","init_connections_controller_inputs","containers","existing_input_indices","eval_required_input","input_error_message","has_named_inputs","get_named_input_index","has_named_outputs","old_input_node","old_connection","NodeConnection","_run_on_set_input_hooks","INPUTS_UPDATED","inputs_clonable_state","FROM_NODE","_inputs_clonable_states","ALWAYS","NEVER","TypeAssert","unreachable","_user_inputs_clonable_states","_default_inputs_clonale_state_values","OVERRIDE_CLONABLE_STATE_UPDATE","_on_update_hooks","_on_update_hook_names","_node_src","_node_dest","_output_index","_input_index","add_output_connection","add_input_connection","remove_output_connection","remove_input_connection","_has_outputs","_has_named_outputs","get_named_output_index","_named_output_connection_points","NAMED_OUTPUTS_UPDATED","output_indices","used_output_indices","_nodes_by_graph_node_id","_lifecycle_on_create_allowed","_loading_state","_auto_updating","_first_object_loaded","_set_loading_state","set_auto_update","getElementById","parentElement","removeChild","_params_by_id","references","missing_expression_reference","MissingExpressionReference","_check_for_missing_references_for_node","_check_for_missing_references_for_param","missing_references","match_found","matches_path","resolve_missing_dependencies","_node_context_signatures","_instanciated_nodes_by_context_and_type","_root","ObjectsManagerNode","init_default_scene","current_parents","current_parent","node_context_signature","toLowerCase","nodes_by_ids","ObjectsManagerParamsConfig","TypedBaseManagerNode","_queued_nodes_by_id","_queued_nodes_by_path","_expected_geo_nodes","_process_queue_start","add_on_child_add_hook","_on_child_add","add_on_child_remove_hook","_on_child_remove","path_id","expected_loading_geo_nodes_by_id","add_to_scene","add_to_queue","node_input","children_group","parent_object","get_parent_for_node","used_in_scene","add_object_to_parent","remove_object_from_parent","is_display_node_cooking","geo_nodes","node_by_id","geo_node","is_displayed","remove_from_scene","ManagerContainer","_started","_start_time","_previous_timestamp","_nodes_cook_data","_durations_by_name","_durations_count_by_name","total_time","PerformanceNode","update_cook_data","current_timestamp","print_node_cook_data","print_recordings","performance_nodes","performance_node","cook_time_total","print_objects","print_object","table_entries","sorted_print_objects","table","durations_by_name","durations_count_by_name","durations","names_by_duration","sorted_durations","entry","duration_per_iteration","_cook_time_total","_cook_time_total_with_inputs","_cook_time_total_params","cook_time","cook_time_with_inputs","cook_time_params","cooks_count","cook_time_per_iteration","cook_time_total_with_inputs","cook_time_total_with_inputs_per_iteration","cook_time_total_params","cook_time_total_params_per_iteration","_time","_prev_performance_now","_frame_range","_frame_range_locked","_playing","start_frame","end_frame","SceneEvent","FRAME_RANGE_UPDATED","start_locked","end_locked","update_frame","new_frame","FRAME_UPDATED","update_time_dependent_uniform_owners","update_time","_ensure_frame_within_bounds","set_time","are_children_cooking","increment_time","performance_now","new_time","PLAY_STATE_UPDATED","playing","include_node_param_components","nodes_by_graph_node_id","params_by_graph_node_id","all_nodes","node_serializer","_time_dependent_uniform_owners","_time_dependent_uniform_owners_ids","_resolution","_resolution_dependent_uniform_owners","_resolution_dependent_uniform_owners_ids","_update_time_dependent_uniform_owners_ids","_update_resolution_dependent_uniform_owners_ids","update_resolution_dependent_uniforms","CopRegister","EventRegister","GlRegister","MatRegister","ObjRegister","SopRegister","poly","BuilderCopNode","EnvMapCopNode","NullCopNode","SwitchCopNode","BuilderCopParamsConfig","_texture_mesh","_texture_material","_texture_scene","_texture_camera","Camera","ShaderAssemblerTexture","set_assembler_globals_handler","_reset_if_resolution_changed","_render_target","_create_render_target","_renderer","_create_renderer","_reset","_pixelBuffer","_create_pixel_buffer","height","render_on_target","fragment","_fragment_shader","run_assembler","update_fragment_shader","fragment_shader","_uniforms","force_time_dependent","unforce_time_dependent","render_target","autoClear","setRenderTarget","readRenderTargetPixels","RGBAFormat","FloatType","CoreSleep","sleep","WebGLRenderTarget","format","navigator","userAgent","stencilBuffer","depthBuffer","BaseFlag","FLAG_BYPASS_UPDATED","FLAG_DISPLAY_UPDATED","create_inputs_from_params","add_input","_inputless_param_names","raw_input_serialized_by_param_name","default_value_serialized_by_param_name","param_type","last_param_init_value","default_value_from_name","gl_input_default_value","spare_param","is_root","register_node_context_signature","inputs_data","has_bypass","has_display","selected_children","selected_ids","selected_node","override_clonable_state_allowed","override","add_custom","SceneJsonExporter","sanitize_string","node_exporter","gl_var","ParamConfigsController","_param_configs_set_allowed","_function_declared","node_traverser","TypedNodeTraverser","nodes_by_shader_name","nodes_for_shader_name","sorted_nodes","root_nodes_for_shader","root_nodes_by_shader_name","sorted_node_ids","reset_code","_shaders_collection_controller","ShadersCollectionController","set_current_shader_name","set_param_configs","set_lines","set_code_lines","lines_map","add_code_lines","add_code_line_for_nodes_and_line_type","definition_type","node_definitions","collection","uniq","errored","definitions_by_node_id","lines_for_shader","first_definition","CodeFormatter","node_comment","line_wrap","post_line_separator","nodes_count","is_last","add_code_line_for_node_and_line_type","_uniform_name","_uniform","_create_uniform","uniform_by_type","callback_bound","_callback","has_value_changed","is_video_texture","set_uniform_value_from_texture","set_uniform_value_from_ramp","ramp_texture","param_constructor","_cached_param_value","has_changed","clone_value","_shader_names","_current_shader_name","_lines_controller_by_shader_name","LinesController","lines_controller","_definitions_by_node_id","_body_lines_by_node_id","LINE_SUFFIXES","LINE_PREFIXES","add_suffix","EnvMapCopParamsConfig","convert_texture_to_env_map","wait_for_renderer","PMREMGenerator","fromEquirectangular","Extension","BaseCopNodeClass","load_url","texture_as_env","set_texture_for_mapping","ext","_ext","VIDEO_EXTENSIONS","_load_as_video","loader_for_ext","EXR","EXRLoader","HDR","RGBELoader","setDataType","UnsignedByteType","BASIS","BasisTextureLoader","setTranscoderPath","detectSupport","TextureLoader","video","createElement","onloadedmetadata","source","VIDEO_SOURCE_TYPE_BY_EXT","_default_video_source_type","appendChild","img","drawImage","getImageData","PARAM_ENV_DEFAULT","ogg","ogv","mp4","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","pos","len","chunk","fromCharCode","RGBEByteToRGBHalf","floatView","int32View","toHalf","bits","sourceArray","sourceOffset","destArray","destOffset","byteArray","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","comments","programtype","gamma","exposure","charAt","RGBE_ReadHeader","image_rgba_data","data_rgba","byteValue","scanline_buffer","ptr_end","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","texData","encoding","generateMipmaps","flipY","transcoderPath","transcoderBinary","transcoderPending","workerConfig","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","cTFETC1","_createTexture","texturePending","_allocateWorker","mipmaps","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","_initTranscoder","jsLoader","binaryLoader","binaryContent","BasisWorker","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","BasisModule","onRuntimeInitialized","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","SwitchCopParamsConfig","set_width","disallow_inputs_evaluation","has_input","CameraMapControlsEventNode","PassEventNode","html_element","create_controls_instance","timestamp","controls_id","setup_controls","PassEventParamsConfig","AbsGlNode","AcosGlNode","AddGlNode","AlignGlNode","AndGlNode","AsinGlNode","AtanGlNode","except","CeilGlNode","CosGlNode","ComplementGlNode","CrossGlNode","CycleGlNode","DegreesGlNode","DiskGlNode","DivideGlNode","EasingGlNode","ExpGlNode","Exp2GlNode","FitGlNode","Fit01GlNode","FloatToIntGlNode","FloatToVec2GlNode","FloatToVec3GlNode","FloatToVec4GlNode","FloorGlNode","FractGlNode","HsvToRgbGlNode","IntToFloatGlNode","InverseSqrtGlNode","InstanceTransformGlNode","LengthGlNode","LuminanceGlNode","NegateGlNode","LogGlNode","Log2GlNode","MixGlNode","MultGlNode","MultAddGlNode","NullGlNode","NoiseGlNode","NormalizeGlNode","OrGlNode","OutputGlNode","ParamGlNode","QuatMultGlNode","QuatFromAxisAngleGlNode","QuatToAngleGlNode","QuatToAxisGlNode","RampGlNode","RandomGlNode","RadiansGlNode","RefractGlNode","RgbToHsvGlNode","RotateGlNode","RoundGlNode","SignGlNode","SinGlNode","SqrtGlNode","SubstractGlNode","TanGlNode","TextureGlNode","TwoWaySwitchGlNode","Vec2ToFloatGlNode","Vec3ToFloatGlNode","Vec4ToFloatGlNode","Vec4ToVectorGlNode","VectorAlignGlNode","VectorAngleGlNode","FloatToIntGlParamsConfig","ParamsConfigFloatToInt","IntToFloatGlParamsConfig","ParamsConfigIntToFloat","FloatToVec2GlParamsConfig","ParamsConfig2","float2","FloatToVec3GlParamsConfig","ParamsConfig3","float3","FloatToVec4GlParamsConfig","ParamsConfig4","float4","VecToParamsConfig","BaseVecToGlNode","VecToGlFactory","components_v4","OUTPUT_NAME_VEC3","OUTPUT_NAME_W","INPUT_NAME_VEC4","in_vec4","out_vec3","out_w","MathFunctionArg1Factory","gl_input_name","BaseNodeGlMathFunctionArg1GlNode","MathFunctionArg2OperationFactory","in_prefix","operation","gl_operation","current_connections","expected_count","input_types","empty_array","second_connection","second_type","MathFunctionArg2BooleanFactory","BaseNodeGlMathFunctionArgBoolean2GlNode","op","boolean_operation","InputName","InputNames","DIR","DefaultValues","CrossGlParamsConfig","DiskGlParamsConfig","feather","vector2","EASE_NAMES","IMPORT_BY_EASE_NAME","IMPORT_DEPENDENCIES_BY_EASE_NAME","METHOD_NAMES_BY_EASE_NAME","default_ease_type","EasingGlParamsConfig","set_inputless_param_names","ease_name","glsl_function_code","ease_functions","function_dependencies","concat","in_value","BaseNodeGlMathFunctionArg5GlNode","HsvToRgbGlParamsConfig","hsv","function_declaration_lines","rgb","VARS","InstanceTransformGlParamsConfig","instance_position","instance_orientation","instance_scale","gl_output_name_position","gl_output_name_normal","_default_position","_default_normal","instancePosition","_default_instance_position","instanceOrientation","_default_input_instance_orientation","instanceScale","_default_input_instance_scale","result_position","result_normal","LuminanceGlParamsConfig","mult","BaseNodeGlMathFunctionArg4GlNode","VALUE","PRE_ADD","MULT","POST_ADD","pre_add","post_add","out_name","NOISE_NAME","NOISE_NAMES","CLASSIC_PERLIN_2D","CLASSIC_PERLIN_3D","CLASSIC_PERLIN_4D","NOISE_2D","NOISE_3D","NOISE_4D","IMPORT_BY_NOISE_NAME","INPUT_TYPES_BY_NOISE_NAME","OUTPUT_TYPE_BY_NOISE_NAME","METHOD_NAMES_BY_NOISE_NAME","OUTPUT_TYPE","OUTPUT_TYPES","NoChange","Float","Vec2","Vec3","Vec4","OUTPUT_TYPE_LABEL","CONNECTION_TYPE_BY_OUTPUT_TYPE","ALL_COMPONENTS","default_noise_type","default_output_type","amp","freq","NoiseGlParamsConfig","noise_name","output_type","octaves","amp_attenuation","freq_increase","AMP","POSITION","FREQ","OFFSET","noise_function","noise_output_gl_type","fbm_function","output_gl_type","single_noise_line","lines_count_required","assembly_args","noise","offset_gl_type","offset_components_count","offset2","assembly_line","input_type","fbm_method_name","output_name_suffix","right_hand","OutputGlParamsConfig","set_node_lines_output","ParamGlParamsConfig","as_color","create_and_push","AXIS","ANGLE","RampGlParamsConfig","input_val","RandomGlParamsConfig","seed","RgbToHsvGlParamsConfig","Mode","Modes","LabelByMode","InputNamesByMode","MethodNameByMode","InputTypesByMode","axis","RotateParamsConfig","signature","_simple_line","simple_lines","TextureParamsConfig","rgba","CONDITION","IF_TRUE","IF_FALSE","ParamlessTypedGlNode","second_or_third_connection","condition","if_true","if_false","end","MeshBasicMatNode","MeshBasicBuilderMatNode","MeshLambertMatNode","MeshLambertBuilderMatNode","MeshStandardBuilderMatNode","PointsMatNode","MeshBasicMatParamsConfig","has_content","ShaderAssemblerBasic","ShaderLib","basic","template_shader","lights","UniformsUtils","_add_custom_materials","distanceRGBA","DEPTH_PACKING","RGBADepthPacking","BasicDepthPacking","mNear","mFar","MeshLambertMatParamsConfig","ShaderAssemblerLambert","lambert","_update_metalness","_update_roughness","ShaderAssemblerStandard","is_physical","physical","standard","derivatives","onBeforeCompile","shader","PointsParamConfig","size_attenuation","sizeAttenuation","CUSTOM_ASSEMBLER_MAP","ShaderAssemblerCustomPointsDistance","ShaderAssemblerCustomPointsDepth","ShaderAssemblerCustomPointsDepthDOF","USE_SIZEATTENUATION","AmbientLightObjNode","AreaLightObjNode","DirectionalLightObjNode","HemisphereLightObjNode","PointLightObjNode","SpotLightObjNode","EventsObjNode","MaterialsObjNode","CopObjNode","PostProcessObjNode","GeoObjNode","NullObjNode","SceneObjNode","OrthographicCameraObjNode","PerspectiveCameraObjNode","FogObjNode","AmbientLightObjParamsConfig","AmbientLight","AreaLightParamConfig","AreaLightObjParamsConfig","RectAreaLight","RectAreaLightUniformsLib","initialized","DirectionalLightParamConfig","cast_shadows","shadow_res","shadow_bias","DirectionalLightObjParamsConfig","_helper_controller","HelperController","DirectionalLightHelper","DirectionalLight","bias","mapSize","_target_target","BaseLightHelper","_square","Line","_line_material","rotateX","setScalar","HemisphereLightObjParamsConfig","sky_color","ground_color","HemisphereLightHelper","HemisphereLight","groundColor","OctahedronBufferGeometry","_quat","_color1","_color2","rotateZ","BufferAttribute","setRotationFromQuaternion","setXYZ","PointLightObjParamsConfig","decay","shadow_near","shadow_far","PointLightHelper","PointLight","SphereBufferGeometry","SpotLightObjParamsConfig","penumbra","SpotLightHelper","SpotLight","_cone","p1","p2","coneLength","coneWidth","GeoObjParamConfig","DisplayNodeController","_sop_group","_create_sop_group","_on_create_bound","_on_create","_on_child_add_bound","sop_group","set_sop_group_name","display_node","_children_uuids_dict","_children_length","_request_display_node_container_bound","request_display_node_container","_display_node","_parent_object","set_parent_object","new_display_node","old_display_node","remove_children","new_objects","new_objects_are_different","NullObjParamConfig","AxesHelper","density","FogObjParamConfig","exponential","_linear_fog","Fog","getHex","_linear_fogexp2","FogExp2","SceneObjParamConfig","bg_color","OrthographicCameraObjParamConfigMixin","OrthographicCameraObjParamConfig","OrthographicCameraBackgroundController","OrthographicCamera","horizontal_size","_applied_controls_by_element_id","_controls_node","controls_param","controls_node","dispose_control_refs","controls_aleady_applied","apply_controls","CameraControlsConfig","set_from_camera_node","set_controls_events","controls_start_listener","on_controls_start","controls_end_listener","on_controls_end","update_transform_params_from_object","_camera_node_id","_controls","other_config","camera_node_id","overrideMaterial","clearColor","clearDepth","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","getClearColor","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","BaseViewer","do_render","_animate_method","animate","_canvas","random","style","outline","classList","_set_events","_init_display","activate","_cancel_animate","dispose_controls","onresize","on_resize","compute_size_and_aspect","create_renderer","prepare_current_camera","increment_time_if_playing","_request_animation_frame_id","requestAnimationFrame","cancelAnimationFrame","delete_renderer","_active","_display_scene","_init_from_scene","_build","ViewerEventsController","set_camera_node","master_camera_node","viewer","_camera_node","_size","_update_graph_node","create_controls","get_operator_path","_create_graph_node","update_camera_aspect","_update_size","update_resolution_dependent_uniform_owners","_get_aspect","_update_from_camera_container","_bound_on_controls_start","_on_controls_start","_bound_on_controls_end","_on_controls_end","_bound_on_mousedown","_on_mousedown","_bound_on_mousemove","_on_mousemove","_bound_on_mouseup","_on_mouseup","onwebglcontextlost","_on_webglcontextlost","onwebglcontextrestored","_on_webglcontextrestored","request_animation_frame_id","PerspectiveCameraObjParamConfigMixin","PerspectiveCameraObjParamConfig","PerspectiveCameraBackgroundController","PerspectiveCamera","SCREEN_COORD","bl","br","tl","tr","CORNER_NAMES","_bg_corner","_bg_center","corner_name","_update_corner_vector","distanceTo","z_ratio","desired_ratio","coord","setFromCamera","ray","direction","origin","AddSopNode","AnimationCopySopNode","AnimationMixerSopNode","AttribAddMultSopNode","AttribCopySopNode","AttribCreateSopNode","AttribDeleteSopNode","AttribNormalizeSopNode","AttribPromoteSopNode","AttribRemapSopNode","AttribRenameSopNode","AttribTransferSopNode","BboxScatterSopNode","BlendSopNode","BoxSopNode","CacheSopNode","CodeSopNode","CircleSopNode","ColorSopNode","ConeSopNode","CopySopNode","DataSopNode","DataUrlSopNode","DelaySopNode","DeleteSopNode","FaceSopNode","FileSopNode","FuseSopNode","HexagonsSopNode","HierarchySopNode","InstanceSopNode","JitterSopNode","LayerSopNode","LineSopNode","MaterialSopNode","MergeSopNode","NoiseSopNode","NormalsSopNode","NullSopNode","ObjectMergeSopNode","OcclusionSopNode","ParticlesSystemGpuSopNode","PeakSopNode","PlaneSopNode","PointSopNode","PolywireSopNode","RaySopNode","ResampleSopNode","ScatterSopNode","SkinSopNode","ShadowsSopNode","SphereSopNode","SwitchSopNode","TextSopNode","TorusSopNode","TorusKnotSopNode","TransformSopNode","TubeSopNode","UvProjectSopNode","AddSopParamsConfig","create_point","open","connect_to_last_point","_create_point","_get_points","index_array","_positions","_get_positions","_triangle","_get_triangle","_deltas","_get_deltas","getArea","weights","deltas","barycentric_coordinates","getBarycoord","point_values","new_attrib_value","sum","point_value","weighted_value","face","intersect_point","point_indices","position_attrib_array","point_positions","attrib_array","dist_to_points","distance_total","point_indx","count_by_type","human_type","names_by_type","sizes_by_name","types_by_name","AnimationCopySopParamsConfig","core_group_target","target_object","src_animations","set_core_group","AnimationMixerSopParamsConfig","prepare","PARAM_CALLBACK_prepare","_previous_time","_mixer","_actions_by_name","_values_by_param_name","_update_mixer","create_mixer","_animation_target","AnimationMixer","prev_value","action","clipAction","materials_by_id","object3d","morphTargets","_update_mixer_weights","set_object","get_float","_update_mixer_time","cache_value","setEffectiveWeight","prepare_animation_mixer","AttribAddMultSopParamsConfig","_update_attrib","input_cloned","AttribCopySopParamsConfig","tnew_name","core_group_dest","core_group_src","copy_vertex_attribute_between_core_groups","src_objects","dest_objects","dest_geometry","copy_vertex_attribute_between_geometries","src_attrib","src_points_count","dest_points_count","sub_array","dest_name","AttribCreateSopParamsConfig","class","value1","for_entities","value2","value3","value4","_x_arrays_by_geometry_uuid","_y_arrays_by_geometry_uuid","_z_arrays_by_geometry_uuid","_w_arrays_by_geometry_uuid","add_point_attribute","add_object_attribute","add_numeric_attribute_to_points","add_string_attribute_to_points","add_numeric_attribute_to_object","add_string_attribute_to_object","points_from_group","compute_expression_for_points","tmp_arrays","component_param","arrays_by_geometry_uuid","_init_array_if_required","tmp_array","add_numeric_vertex_attrib","compute_expression_for_objects","set_attrib_value","values_by_core_object_index","string_values","current_array","AttribDeleteSopParamsConfig","delete_vertex_attribute","delete_object_attribute","AttribNormalizeSopParamsConfig","change_name","_normalize_attribute","normalized_values","normalized_value","target_name","AttribPromoteMode","PromoteModeMenuEntries","MIN","MAX","FIRST_FOUND","AttribPromoteSopParamsConfig","class_from","class_to","_values_per_attrib_name","_filtered_values_per_attrib_name","_core_group","_core_object","find_values","filter_values","set_values","find_values_from_points","find_values_from_object","set_values_to_points","set_values_to_object","param_size","AttribRemapSopParamsConfig","_remap_attribute","only_integer_values","sorted_values","sorted_value","AttribRenameSopParamsConfig","rename_attrib","AttribTransferSopParamsConfig","dest_group","max_samples_count","distance_threshold","blend_width","_core_group_dest","dest_points","_core_group_src","_attrib_names","_error_if_attribute_not_found_on_second_input","_build_octree_if_required","_add_attribute_if_required","_transfer_attributes","second_input_changed","_octree_timestamp","_prev_param_src_group","points_src","_octree","CoreOctree","set_points","iterator","CoreIterator","start_with_array","_transfer_attributes_for_point","dest_point","total_dist","nearest_points","find_points","_interpolate_points","point_dest","src_points","CoreInterpolate","perform","blend_with","_interpolate_with_1_point","_interpolate_with_multiple_points","point_src","position_dest","position_src","value_src","_weighted_value_from_distance","value_dest","blend","_weight_from_distance","weighted_values_src","current_position","other_positions","_weights_from_2","_weights_from_3","dist_to_positions","other_position","OctreeNode","max_points_count","sphere","Sphere","found_points","intersects_sphere","points_in_sphere","_bbox","_level","_leaves_by_octant","_points_by_octant_id","_leaves","_bounding_boxes_by_octant","_bounding_boxes_by_octant_prepared","_center","intersectsSphere","accumulated_points","containsPoint","leaf","add_point","octant_ids","octant_id","create_leaf","box","_leaf_bbox","_octant_id","_prepare_leaves_bboxes","x_pos","y_pos","z_pos","corner","bbox_centers","_bbox_center","bbox_size_quarter","bbox_center","BboxScatterSopParamsConfig","set_geometry","BlendSopParamsConfig","core_group0","core_group1","objects0","objects1","object0","object1","attrib0","attrib1","attrib0_array","attrib1_array","c0","c1","BoxSopParamsConfig","divisions","_core_transform","_cook_with_input","_cook_without_input","BoxBufferGeometry","translate","translation_matrix","CacheSopParamsConfig","cache","PARAM_CALLBACK_reset","is_cache_empty","toJSON","obj_loader","ObjectLoader","jsons","all_objects","param_callback_PARAM_CALLBACK_reset","DEFAULT_UP","CircleSopParamsConfig","_create_circle","_create_disk","CoreGeometryUtilCircle","rotate_geometry","CircleBufferGeometry","BaseCodeSopProcessor","core_groups","CodeSopParamsConfig","ColorSopParamsConfig","from_attribute","as_hsv","_r_arrays_by_geometry_uuid","_g_arrays_by_geometry_uuid","_b_arrays_by_geometry_uuid","_set_from_attribute","_eval_expressions","_eval_simple_values","_create_init_color","src_attrib_size","src_array","dest_array","dest_i","src_i","new_color","CoreColor","set_hsv","tmp_array_r","_update_from_param","tmp_array_g","tmp_array_b","_commit_tmp_values","target_array","euclideanModulo","clamp","setHSL","ConeSopParamsConfig","segments_radial","segments_height","cap","theta_start","theta_length","ConeBufferGeometry","CopySopParamsConfig","transform_only","copy_attributes","use_copy_expr","_attribute_names_to_copy","container0","container1","cook_with_template","cook_without_template","instance_core_group","template_points","_copy_moved_objects_on_template_points","_copy_moved_object_on_template_point","template_point","set_point","_get_moved_objects_for_template_point","moved_object","_copy_attributes_from_template","_stamp_instance_group_if_required","moved_objects","_copy_moved_objects_for_instance","set_global_index","stamped_instance_core_group","_copy_moved_objects_for_each_instance","_stamp_node","create_stamp_node","CopyStamp","set_forbidden_trigger_nodes","_global_index","_point","DEFAULT_DATA_STR","DataSopParamsConfig","JsonDataLoader","set_json","DataUrlSopParamsConfig","json_data_keys_prefix","_on_load","_on_error","DelaySopParamsConfig","inputs_contents","ComparisonOperator","ComparisonOperatorMenuEntries","DeleteSopParamsConfig","invert","hide_objects","by_object_type","by_expression","by_attrib","attrib_string","attrib_numeric","attrib_comparison_operator","by_bbox","bbox_size","by_visible","keep_points","_marked_for_deletion_per_object_index","_bbox_cache","_eval_for_points","_eval_for_objects","objects_to_keep","_eval_expressions_for_objects","_eval_type_for_objects","_eval_attrib_for_objects","marked_for_deletion","object_index","point_objects_from_deleted_objects","_point_object","init_points_count","_eval_expressions_for_points","_eval_attrib_for_points","_eval_bbox_for_points","geometry_from_points","kept_points","keep_point","first_attrib_value","comparison_attrib_value","_comparison","attrib_ComparisonOperator","object_type_name","attrib_float","in_bbox","core_points","FaceSopParamsConfig","make_faces_unique","add_face_center_attribute","add_face_id","_make_faces_unique","_add_face_center_attribute","_add_face_id","_transform_faces","current_value","face_center","fi","pi","FileSopParamsConfig","always_reference_asset","CoreLoaderGeometry","on_success","on_error","load_auto","obj","on_load_success","object2","on_load_succes_gltf","on_load_succes_drc","gltf","loader_for_gltf","loader_for_glb","loader_for_drc","loader_for_obj","GLTFLoader","draco_loader","setDRACOLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","vertices","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","isArray","groupStart","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ib","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","text","setMaterials","lineFirstChar","trimLeft","trim","vertexData","faceVertices","vertex","vertexParts","v1","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","hasVertexColors","buffergeometry","mesh","createdMaterials","miLen","materialHash","sourceMaterial","materialPoints","materialLine","flatShading","FuseSopParamsConfig","dist","_fuse_core_object","precision","points_by_position","HexagonsSopParamsConfig","hexagon_radius","points_only","CoreGeometryOperationHexagon","_param_size","_param_hexagon_radius","_param_points_only","side_length","half_side_length","HierarchyMode","HIERARCHY_MODES","ADD_PARENT","REMOVE_PARENT","HierarchySopParamsConfig","_add_parent_to_core_group","_remove_parent_from_core_group","_add_parent_to_object","new_parent","_add_new_parent","new_parent2","new_children","_remove_parent_from_object","new_child","current_children","_get_children_from_objects","InstanceSopParamsConfig","apply_material","core_group_to_instance","object_to_instance","_create_instance","ObjectTypeByObject","_apply_material","mat_builder_node","create_instance_buffer_geo","node_with_mat_name","mesh_lambert_mat","mesh_lambert_mat_name","mat_node","instance_transform1","output1","create_mesh_lambert","JitterSopParamsConfig","amount","rand","LayerSopParamsConfig","LineSopParamsConfig","last_pt","i_n","MaterialSopParamsConfig","apply_to_children","objects_from_group","grand_child","MergeSopParamsConfig","compact","input_core_group","_make_compact","objects_by_type","merged_objects","isLineSegments","merge_geometries","Operation","Operations","ADD","SET","SUBSTRACT","DIVIDE","NoiseSopParamsConfig","use_normals","compute_normals","_simplex_by_seed","_rest_points","core_group_rest","_rest_core_group_timestamp","simplex","_get_simplex","target_attrib_size","rest_point","current_attrib_value","noise_value","_fbm","divide","amplitude","noise3d","_create_simplex","random_generator","SimplexNoise","grad3","grad4","perm","dot3","dot4","xin","yin","i1","j1","G2","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","w0","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","NormalsSopParamsConfig","edit","update_x","update_y","update_z","recompute","_eval_expressions_for_core_group","_invert_normals","_eval_expressions_for_core_object","normal_attrib","NullSopParamsConfig","set_border_radius","ObjectMergeSopParamsConfig","geometry_node","import_input","OcclusionSopParamsConfig","samples","sep","buffer_resolution","_process_occlusion_on_object","normal_array","aoSampler","cells","sample","ao","report","ParticlesSystemGpuSopParamsConfig","auto_textures_size","max_textures_size","textures_size","ShaderAssemblerParticles","gpu_controller","ParticlesSystemGpuComputeController","render_controller","ParticlesSystemGpuRenderController","_reset_material_if_dirty_bound","_reset_material_if_dirty","_on_create_prepare_material_bound","_on_create_prepare_material","reset_gpu_compute_and_set_dirty","reset_render_material","is_on_frame_start","init_render_material","set_restart_not_required","reset_particle_groups","init_core_group","restart_simulation_if_required","compute_similation_if_required","_find_root_nodes","compile","shaders_by_name","set_shaders_by_name","reset_gpu_compute","assign_uniform_values","find_attribute_export_nodes","points_mat","points_mat_constant_point_size","points_mat_output1","create_points_mat","setup_shader_names_and_variables","update_shaders","leaves_from_nodes","TextureAllocationsController","allocate_connections_from_root_nodes","set_texture_allocations_controller","texture_allocations_controller","export_node","add_export_body_line","is_importing","connected_input_node","_handle_globals_time","_handle_globals_default","attrib_read","_allocations","_next_allocation_index","leaf_nodes","variables","TextureVariable","add_graph_node_id","connected_input_connection_point","output_names_attributes","allocate_variables","variables_by_size_inverse","allocate_variable","new_variable","allocated","has_variable","allocated_variable","has_space_for_variable","add_variable","new_allocation","TextureAllocation","next_allocation_name","explicit_shader_names","allocation_for_shader_name","input_names_for_node","_variables","set_allocation","variables_for_input_node","_allocation","_graph_node_ids","_particles_group_objects","_render_material","update_render_material_uniforms","getCurrentRenderTarget","assign_custom_uniforms","new_texture_allocations_json","_texture_allocations_json","init_custom_material_uniforms","assign_render_material","_simulation_restart_required","variables_by_name","_created_textures_by_name","_used_textures_size","init_particle_group_points","create_gpu_compute","_gpu_compute","_particles_core_group","_last_simulated_frame","_compute_simulation","update_simulation_material_uniforms","nearest_power_of_two","nearestPower2","isPowerOfTwo","max_particles_count","_init_particles_uvs","GPUComputationRenderer","renderTargets","all_variables","addVariable","setVariableDependencies","_create_texture_render_targets","_fill_textures","create_simulation_material_uniforms","uv_attrib_name","attribute_constructor","texture_allocation","texture_variables","texture_position","createTexture","_restart_simulation","renderTexture","selected_geometries","sizeX","sizeY","currentTextureIndex","passThruUniforms","passThruTexture","passThruShader","createShaderMaterial","addResolutionDefine","materialShader","toFixed","computeFragmentShader","variableName","initialValueTexture","capabilities","isWebGL2","maxVertexTextures","createRenderTarget","depVar","found","nextTextureIndex","dl","doRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","currentRenderTarget","getRenderTarget","PeakSopParamsConfig","child_object","ROTATE_START","ROTATE_END","PlaneSopParamsConfig","use_segments_count","_create_plane","size2d","PointSopParamsConfig","update_normals","tmp_array_x","tmp_array_y","tmp_array_z","do_update_param","value_param","do_update","new_array","_array_for_component","DEFAULT_R","DEFAULT_S","PolywireSopParamsConfig","closed","_geometries","_create_tube","line_segment","CoreGeometryUtilCurve","current_points","_create_tube_from_points","circle_template","circles","new_circle","circle","prev_circle","_skin","CoreGeometryOperationSkin","MAT_DOUBLE_SIDED","RaySopParamsConfig","transfer_face_normals","_bound_assign_mat","_assign_double_sided_material_to_object","_raycaster","core_group_collision","first_intersect","_assign_double_sided_material_to_core_group","intersectObjects","set_normal","double_sided_material","METHOD","CURVE_TYPE","POINTS_COUNT","SEGMENT_LENGTH","CURVE_TYPES","CENTRIPETAL","CHORDAL","CATMULLROM","ResampleSopParamsConfig","curve_type","tension","segment_length","resampled_objects","resampled_object","_resample","_create_curve_from_points","old_curve_positions","curve","CatmullRomCurve3","new_curve_points","_get_points_from_curve","getSpacedPoints","getLength","ScatterSopParamsConfig","transfer_attributes","attributes_to_transfer","add_id_attribute","areas_thresholds","area_sum","area_by_face_index","area","sorted_faces","attrib_values_by_name","start_with_count","face_index","random_position","attrib_value_at_position","ShadowsSopParamsConfig","cast_shadow","receive_shadow","SkinSopParamsConfig","process_one_input","process_two_inputs","line_segments0","_get_line_segments","first_line_segment","src_geometries","line_segment_to_geometries","prev_src_geometry","set_geometries","line_segments1","line_segments","smallest_array","largest_array","other_line_segment","other_geo","SphereType","SPHERE_TYPE","isocahedron","SPHERE_TYPES","ISOCAHEDRON","SphereSopParamsConfig","angle_range_x","angle_range_y","detail","_create_required_geometry","_create_default_sphere","_create_default_isocahedron","IcosahedronBufferGeometry","SwitchSopParamsConfig","opentype","TEXT_TYPE","TEXT_TYPES","FLAT","STROKE","TextSopParamsConfig","font","multiline","extrude","stroke_width","_font_loader","FontLoader","_loaded_fonts","_load_url","err","_create_geometry_from_type_mesh","_create_geometry_from_type_flat","_create_geometry_from_type_line","_create_geometry_from_type_stroke","displayed_text","parameters","curveSegments","TextBufferGeometry","shapes","_get_shapes","ShapeBufferGeometry","shapes_from_font","getPoints","_svg_loader","_load_svg_loader","getStrokeStyle","arcDivisions","pointsToStroke","holeShapes","shape","holes","hole","generateShapes","elements2","_load_ttf","_load_json","_ttf_loader","_load_ttf_loader","fnt","TTFLoader","SVGLoader","reversed","arraybuffer","reverseCommands","commands","paths","command","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","glyph","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","head","yMin","yMax","original_font_information","TorusSopParamsConfig","radius_tube","segments_tube","TorusBufferGeometry","TorusKnotBufferGeometry","TorusKnotSopParamsConfig","TransformSopParamConfig","look_at","pivot","from_objects","TubeSopParamsConfig","CylinderBufferGeometry","UvProjectSopParamsConfig","_camera_controller","CameraController","_update_uvs_from_camera","_processed_core_group","_camera_object","set_target","remove_target","look_at_target","obj_world_matrix","matrixWorld","uvw","_vector_in_camera_space","project","_update_always","_listener_added","_listener","_execute_callback","_remove_camera_event","old_target","_target","_add_camera_event","new_update_always","CHANGE","MOVEEND","_current_event_name","CopyShader","ShaderPass","textureID","fsQuad","MaskPass","writeValue","clearValue","setMask","setLocked","stencil","setTest","setOp","REPLACE","setFunc","setClear","EQUAL","KEEP","ClearMaskPass","renderTarget","_pixelRatio","getPixelRatio","_height","renderTarget1","renderTarget2","copyPass","clock","Clock","swapBuffers","pass","insertPass","isLastEnabledPass","passIndex","deltaTime","getDelta","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","pixelRatio"],"mappings":";uCACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,EAAG,GAGAZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAqC,6BAAIA,OAAqC,8BAAK,GAChGC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAM1B,OAFA1C,EAAgBJ,KAAK,CAAC,IAAI,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAEnCM,I,qFCtJT,cAEA,SAuFA,MAAa0C,EAKZ,YAAmBC,EAAgBC,EAA8CC,GAA9D,KAAAF,OAAgB,KAAAC,aAA8C,KAAAC,WALlF,kBAgBA,oBAOC,cACCD,EACAC,GAEA,OAAO,IAAIH,EAAgC,EAAAI,UAAUC,OAAQH,EAAYC,GAE1E,eACCD,EACAC,GAEA,OAAO,IAAIH,EAAiC,EAAAI,UAAUE,QAASJ,EAAYC,GAE5E,aACCD,EACAC,GAEA,OAAO,IAAIH,EAA+B,EAAAI,UAAUG,MAAOL,EAAYC,GAExE,aACCD,EACAC,GAEA,OAAO,IAAIH,EAA+B,EAAAI,UAAUI,MAAON,EAAYC,GAExE,cACCD,EAAuD,KACvDC,GAEA,OAAO,IAAIH,EAAgC,EAAAI,UAAUK,OAAQP,EAAYC,GAE1E,eACCD,EACAC,GAEA,OAAO,IAAIH,EAAiC,EAAAI,UAAUM,QAASR,EAAYC,GAE5E,qBACCD,EACAC,GAEA,OAAO,IAAIH,EAAuC,EAAAI,UAAUO,cAAeT,EAAYC,GAExF,YACCD,EAAqD,EAAAU,UAAUC,cAC/DV,GAEA,OAAO,IAAIH,EAA8B,EAAAI,UAAUU,KAAMZ,EAAYC,GAEtE,iBACCD,EAA0D,KAC1DC,GAEA,OAAO,IAAIH,EAAmC,EAAAI,UAAUW,UAAWb,EAAYC,GAEhF,cACCD,EAAuD,GACvDC,GAEA,OAAO,IAAIH,EAAgC,EAAAI,UAAUY,OAAQd,EAAYC,GAE1E,eACCD,EACAC,GAEA,OAAO,IAAIH,EAAiC,EAAAI,UAAUa,QAASf,EAAYC,GAE5E,eACCD,EACAC,GAEA,OAAO,IAAIH,EAAiC,EAAAI,UAAUc,QAAShB,EAAYC,GAE5E,eACCD,EACAC,GAEA,OAAO,IAAIH,EAAiC,EAAAI,UAAUe,QAASjB,EAAYC,KAI7E,4B,kGC3LA,2BACA,4BACA,QACA,QACA,SACA,SAGA,SACA,SAEA,QAGA,QAeA,IAAKiB,GAAL,SAAKA,GACJ,4CACA,kCACA,sCACA,oCACA,4CACA,wCAND,CAAKA,MAAO,KASZ,MACMC,EAAsB,CADA,qEAG5B,MAAaC,UAAiD,EAAAC,UAA9D,c,oBACC,KAAAC,qBAAoE,IAAI,EAAAC,yBACvEC,KACA,EAAAC,mBAEe,KAAAC,MAA2B,IAAI,EAAAC,kBAAkBH,MAEjE,sBACC,OAAO,EAAAI,YAAYC,IAGpB,+BACC,OAAOV,EAMR,uBAIKK,KAAKE,MAAMI,UACdN,KAAKE,MAAMI,QAAQC,KAAI,GACvBP,KAAKE,MAAMI,QAAQE,SAAS,KAC3B,GAAIR,KAAKE,MAAMI,QAAQG,OAAQ,CAC9B,MAAMC,EAASV,KAAKU,OAChBA,GAAUA,EAAOC,yBACpBD,EAAOC,wBAAwBC,iBAAiBZ,UAKpDA,KAAKa,GAAGC,QAAQC,qBAsCjB,eAAeC,GACd,MAAMC,EAAUD,EAAWC,UAC3B,IAAK,IAAIlD,KAAUkD,EAClBjB,KAAKkB,uBAAuBnD,GAE7BiC,KAAKmB,cAAcH,EAAYtB,EAAQ0B,qBAGxC,WAAWrD,GAIViC,KAAKkB,uBAAuBnD,GAG5BiC,KAAKqB,sBAAsB,CAACtD,GAAS2B,EAAQ4B,iBAE9C,YAAYL,GAOX,IAAK,IAAIlD,KAAUkD,EAClBjB,KAAKkB,uBAAuBnD,GAI7BiC,KAAKqB,sBAAsBJ,EAASvB,EAAQ6B,kBAuB7C,aAAaC,EAA0BjD,GAItC,MAAMR,EAASiC,KAAKyB,cAAcD,EAAUjD,GAG5CyB,KAAKqB,sBAAsB,CAACtD,GAAS2B,EAAQgC,mBAI9C,eAAeC,EAA8BpD,GAE5C,MAAM0C,EAAsB,GAC5B,IAAIlD,EACJ4D,EAAWC,QAASJ,IACnBzD,EAASiC,KAAKyB,cAAcD,EAAUjD,GACtCyB,KAAKkB,uBAAuBnD,GAC5BkD,EAAQ3F,KAAKyC,KAIdiC,KAAKqB,sBAAsBJ,EAASvB,EAAQmC,qBAG7C,sBAAsBZ,EAAqBa,GAC1C,MAAMd,EAAahB,KAAKF,qBAAqBiC,UAAUC,gBAAkB,IAAI,EAAAC,UAC7EjB,EAAWkB,YAAYjB,GACvBD,EAAWmB,QACXnC,KAAKmB,cAAcH,GA4BpB,cAAcQ,EAA0BjD,GAEvC,IAAKiD,EAASY,MAAO,CACpB,MAAMC,EAAiBb,EAASc,aAAa,YAAYC,MACzDf,EAASgB,SAAS,UAAaH,EAAerH,OAAS,IAG5C,MAARuD,IACHA,EAAO,EAAAkE,aAAaC,YAAYC,MAWjC,MAEM5E,EAAS,IAAI6E,EAFQ,EAAAH,aAAaI,qBAAqBtE,IAEvBiD,EADrB,EAAAiB,aAAaK,UAAUvE,GAAMwE,SAM9C,OAJAhF,EAAOiF,YAAa,EACpBjF,EAAOkF,eAAgB,EACvBlF,EAAOmF,eAAgB,EAEhBnF,EAIR,uBAAuBA,GAsBtB,MAAMoF,EAAsBpF,EAAgBoF,SAC5C,GAAIA,EAAU,CACb,IAAKnD,KAAKoD,MAET,MADAC,QAAQC,IAAI,YACN,WAEP,MAAMC,EAAgB,EAAAC,aAAaC,KAAKzD,KAAKoD,MAAOD,GAChDI,GACHA,EAAcG,gBAAgB3F,IAiCjC,WAAWyD,GACV,MAEMmC,EAFkBnC,EAASc,aAAa,YACPC,MACHvH,OAAS,EACvC4I,EAAoB,GAC1B,UAAaD,EAAe7I,GAAM8I,EAAQtI,KAAKR,IAE/C0G,EAASgB,SAASoB,IAxRpB,iBA6RA,iCAAsChE,K,gFC1UtC,cACA,SAUA,IAAYiE,GAAZ,SAAYA,GACX,cAIA,YAIA,gBACA,cACA,cACA,cAKA,yBAjBD,CAAYA,EAAA,EAAAA,sBAAA,EAAAA,oBAAmB,KAyBlB,EAAAC,qBAAmD,CAC/DD,EAAoBE,KAIpBF,EAAoBG,IAIpBH,EAAoB/E,MACpB+E,EAAoBI,KACpBJ,EAAoBK,KACpBL,EAAoBM,MAuBR,EAAAC,kCAAwE,CACpF,CAACP,EAAoBE,MAAO,EAAArF,UAAUE,QAItC,CAACiF,EAAoBG,KAAM,EAAAtF,UAAUM,QAIrC,CAAC6E,EAAoB/E,OAAQ,EAAAJ,UAAUI,MACvC,CAAC+E,EAAoBI,MAAO,EAAAvF,UAAUa,QACtC,CAACsE,EAAoBK,MAAO,EAAAxF,UAAUc,QACtC,CAACqE,EAAoBM,MAAO,EAAAzF,UAAUe,QAEtC,CAACoE,EAAoBQ,YAAa,EAAA3F,UAAUU,MA8BhC,EAAAkF,kCAAwE,CACpF,CAAC,EAAA5F,UAAUE,SAAUiF,EAAoBE,KACzC,CAAC,EAAArF,UAAUG,OAAQgF,EAAoBK,KAIvC,CAAC,EAAAxF,UAAUM,SAAU6E,EAAoBG,IAIzC,CAAC,EAAAtF,UAAUI,OAAQ+E,EAAoB/E,MACvC,CAAC,EAAAJ,UAAUK,aAASwF,EACpB,CAAC,EAAA7F,UAAUa,SAAUsE,EAAoBI,KACzC,CAAC,EAAAvF,UAAUc,SAAUqE,EAAoBK,KACzC,CAAC,EAAAxF,UAAUe,SAAUoE,EAAoBM,KACzC,CAAC,EAAAzF,UAAUC,aAAS4F,EACpB,CAAC,EAAA7F,UAAUO,oBAAgBsF,EAC3B,CAAC,EAAA7F,UAAUU,WAAOmF,EAClB,CAAC,EAAA7F,UAAUW,gBAAYkF,EACvB,CAAC,EAAA7F,UAAUY,aAASiF,GAWR,EAAAC,4BAAkE,CAC9E,CAACX,EAAoBE,OAAO,EAI5B,CAACF,EAAoBG,KAAM,EAI3B,CAACH,EAAoB/E,OAAQ,EAC7B,CAAC+E,EAAoBI,MAAO,CAAC,EAAG,GAChC,CAACJ,EAAoBK,MAAO,CAAC,EAAG,EAAG,GACnC,CAACL,EAAoBM,MAAO,CAAC,EAAG,EAAG,EAAG,GAEtC,CAACN,EAAoBQ,YAAa,EAAAnF,UAAUuF,oBAWhC,EAAAC,kCAA8E,CAC1F,CAACb,EAAoBE,MAAO,EAI5B,CAACF,EAAoBG,KAAM,EAI3B,CAACH,EAAoB/E,OAAQ,EAC7B,CAAC+E,EAAoBI,MAAO,EAC5B,CAACJ,EAAoBK,MAAO,EAC5B,CAACL,EAAoBM,MAAO,EAC5B,CAACN,EAAoBQ,YAAa,I,8ECzLnC,SAAYM,GACX,kBACA,gBACA,wBAHD,CAAY,EAAAA,iBAAA,EAAAA,eAAc,M,oFCA1B,SAAYjG,GACX,oBACA,kBACA,gBACA,gBACA,kBACA,oBACA,gCACA,cACA,wBACA,kBACA,oBACA,oBACA,oBAbD,CAAY,EAAAA,YAAA,EAAAA,UAAS,M,gFCArB,SAAY0B,GACX,YACA,gBACA,UACA,UACA,qBACA,YACA,gBACA,YACA,cATD,CAAY,EAAAA,cAAA,EAAAA,YAAW,M,2FCAvB,QAGA,2BACA,4BACA,2BAEA,kBACC,WAAW9C,GACV,GAAI,UAAgBA,GACnB,OAAOA,EAER,GAAI,UAAiBA,GACpB,MAAO,GAAGA,IAGX,GAAI,UAAgBA,GACnB,MAAO,GAAG,EAAAsH,WAAWC,aAAavH,KAC5B,CACN,MAAMwH,EAASxH,EAAMyH,UAAUC,IAAKC,GAC5B,GAAG,EAAAL,WAAWC,aAAaI,MAGnC,MAAO,GADS,MAAMH,EAAO9J,YACR8J,EAAOI,KAAK,UAInC,eAAeC,GACd,GAAI,UAAgBA,GACnB,OAAOA,EAKR,MAAO,QAHQA,EAAIJ,UAAUC,IAAKC,GAC1B,GAAG,EAAAL,WAAWC,aAAaI,MAEbC,KAAK,SAE5B,eAAeC,GACd,GAAI,UAAgBA,GACnB,OAAOA,EAKR,MAAO,QAHQA,EAAIJ,UAAUC,IAAKC,GAC1B,GAAG,EAAAL,WAAWC,aAAaI,MAEbC,KAAK,SAG5B,qBAAqBC,EAAuBC,GAI3C,OAHK,UAAgBA,KACpBA,EAAM,EAAAR,WAAWC,aAAaO,IAExB,QAAQpF,KAAKqF,QAAQF,OAASC,KAGtC,cAAcE,EAAoBC,EAAoBC,EAAoBC,GAazE,OAZK,UAAgBH,KACpBA,EAAI,EAAAV,WAAWC,aAAaS,IAExB,UAAgBC,KACpBA,EAAI,EAAAX,WAAWC,aAAaU,IAExB,UAAgBC,KACpBA,EAAI,EAAAZ,WAAWC,aAAaW,IAExB,UAAgBC,KACpBA,EAAI,EAAAb,WAAWC,aAAaY,IAEtB,QAAQH,MAAMC,MAAMC,MAAMC,KAElC,cAAcH,EAAoBC,EAAoBC,GAUrD,OATK,UAAgBF,KACpBA,EAAI,EAAAV,WAAWC,aAAaS,IAExB,UAAgBC,KACpBA,EAAI,EAAAX,WAAWC,aAAaU,IAExB,UAAgBC,KACpBA,EAAI,EAAAZ,WAAWC,aAAaW,IAEtB,QAAQF,MAAMC,MAAMC,KAE5B,cAAcF,EAAoBC,GAOjC,OANK,UAAgBD,KACpBA,EAAI,EAAAV,WAAWC,aAAaS,IAExB,UAAgBC,KACpBA,EAAI,EAAAX,WAAWC,aAAaU,IAEtB,QAAQD,MAAMC,KAEtB,aAAaD,GAIZ,OAHK,UAAgBA,KACpBA,EAAI,EAAAV,WAAWC,aAAaS,IAEtB,GAAGA,IAEX,WAAWA,GACV,MAAO,GAAGA,IAEX,YAAYA,GACX,MAAO,GAAGA,O,8EClGZ,eAGA,IAAYI,GAAZ,SAAYA,GACX,wBACA,sBACA,oBACA,oBAJD,CAAYA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KAO5B,MAAsBC,EAErB,YACWC,EACAC,EACAC,EACAC,GAHA,KAAAH,mBACA,KAAAC,aACA,KAAAC,QACA,KAAAC,QAKX,sBACC,OAAO/F,KAAK4F,iBAEb,gBACC,OAAO5F,KAAK6F,WAEb,WACC,OAAO7F,KAAK8F,MAEb,WACC,OAAO9F,KAAK+F,MAOb,sBACC,OAAO,IAAI,EAAAC,6BA7Bb,sBAiCA,sCAA2CL,EAC1C,YAAsBG,EAAiCD,EAA2CE,GACjGE,MAAMP,EAAiBQ,UAAWL,EAAYC,EAAOC,GADhC,KAAAD,QAAiC,KAAAD,aAA2C,KAAAE,QAGlG,WACC,MAAO,aAAa/F,KAAKmG,aAAanG,KAAKnD,SAI7C,qCAA0C8I,EACzC,YAAsBG,EAAiCD,EAA2CE,GACjGE,MAAMP,EAAiBU,SAAUP,EAAYC,EAAOC,GAD/B,KAAAD,QAAiC,KAAAD,aAA2C,KAAAE,QAGlG,WACC,OAAO/F,KAAKnD,OAId,oCAAyC8I,EACxC,YAAsBG,EAAiCD,EAA2CE,GACjGE,MAAMP,EAAiBW,QAASR,EAAYC,EAAOC,GAD9B,KAAAD,QAAiC,KAAAD,aAA2C,KAAAE,QAGlG,WACC,MAAO,WAAW/F,KAAKmG,aAAanG,KAAKnD,SAI3C,oCAAyC8I,EACxC,YAAsBG,EAAiCD,EAA2CE,GACjGE,MAAMP,EAAiBY,QAAST,EAAYC,EAAOC,GAD9B,KAAAD,QAAiC,KAAAD,aAA2C,KAAAE,QAGlG,WACC,MAAO,WAAW/F,KAAKmG,aAAanG,KAAKnD,U,iFC5E3C,cAcA,kCAGC,YACWkJ,EACAQ,EACAC,GAFA,KAAAT,QACA,KAAAQ,QACA,KAAAC,mBAEejC,IAArBvE,KAAKwG,cACRxG,KAAKwG,YAAc,EAAAhC,4BAA4BxE,KAAKuG,QAGtD,WACC,OAAOvG,KAAK+F,MAEb,WACC,OAAO/F,KAAKuG,MAEb,iBACC,OAAO,EAAAnC,kCAAkCpE,KAAKuG,OAE/C,iBACC,OAAOvG,KAAKwG,YAGb,UACC,OAAQxG,KAAKyG,MAAQzG,KAAKyG,OAASzG,KAAK0G,eAEjC,eACP,MAAO,CACN7J,KAAMmD,KAAK+F,MACXxH,KAAMyB,KAAKuG,U,8EC7Cd,cACA,QAGA,QACA,OAIA,SAGA,MAAaI,UAAgD,EAAA9G,UAA7D,c,oBAOU,KAAA+G,wBAAuD,IAAI,EAAAC,4BAA4B7G,MANhG,sBACC,OAAO,EAAAI,YAAY0G,GAQpB,uBAEC9G,KAAKa,GAAGkG,YAAYC,cACpBhH,KAAKiH,QAAQC,wBACblH,KAAKa,GAAGC,QAAQqG,mCAAmC,IAEnDnH,KAAK4G,wBAAwBQ,kBAE9B,cAAcvK,GACb,OAAOoJ,MAAMoB,cAAcxK,GAE5B,OACCwG,QAAQiE,KAAK,8BAGJ,wB,MACS,QAAlB,EAAAtH,KAAKuD,qBAAa,SAAEgE,qBAAqBC,mCAAmCxH,MAE7E,oB,MACC,GAAIA,KAAKU,OACR,OAAIV,KAAKU,OAAOnC,MAAQyB,KAAKzB,KACU,QAA9B,EAAAyB,KAAKU,cAAyB,eAAE6C,cAEjCvD,KAAKU,OAUf,YAAY7D,GACX,MAAO,UAAUmD,KAAKnD,QAAQA,IAG/B,mBAAmBA,G,MAClB,MAAM4K,EAAczH,KAAKa,GAAG6G,OAAOC,gBAAgB9K,GAC7C+K,EAAa5H,KAAKa,GAAGkG,YAAYc,iBAAiBJ,GACxD,GAAIG,EAAY,CACf,MAAME,EAAuBF,EAAWG,SAClCC,EACLF,EAAWjH,GAAGC,QAAQmH,+BAA+BL,EAAWM,cACjE,GAAIF,EAAyB,CAC5B,MAAMG,EAAcH,EAAwBnL,KAC5C,OAAOiL,EAAWM,YAAYD,GAG9B,MADA9E,QAAQiE,KAAK,qBAAqBzK,kBAAqBiL,EAAWO,eAC5D,2BAGP,OAAO,EAAAC,UAAUC,IAAyB,QAAtB,EAACvI,KAAKwI,OAAOtL,IAAIL,UAAK,eAAES,OAS9C,UAAUmL,IAEV,a,MAC+B,QAA9B,EAAAzI,KAAK0I,iCAAyB,SAAEC,QAS1B,qBACP,gB,MACC,OAAqC,QAArC,EAAO3I,KAAK0I,iCAAyB,eAAEE,KAsBxC,uBAAuB/L,GACtB,OAAO,MA5GT,gBA6IA,gCAAqC8J,IAErC,MAAMkC,UAA8B,EAAAC,kBACpC,MAAMC,EAAe,IAAIF,EACzB,qCAA0ClC,EAA1C,c,oBACC,KAAAqC,cAAgBD,K,8EC7JjB,eACA,QACA,QACA,QAEA,QACA,QACA,QACA,OAEA,OACA,SAGA,QACA,QACA,SACA,QAmCA,IAAYE,GAAZ,SAAYA,GACX,cACA,kBACA,gCAHD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAKT,EAAAC,YAAc,CAACD,EAAWtG,KAAMsG,EAAWE,OAAQF,EAAWG,eAC9D,EAAAC,sBAAwB,CACpC,CAACxM,KAAM,OAAQS,MAAO,EAAA4L,YAAYI,QAAQL,EAAWtG,OACrD,CAAC9F,KAAM,SAAUS,MAAO,EAAA4L,YAAYI,QAAQL,EAAWE,SACvD,CAACtM,KAAM,eAAgBS,MAAO,EAAA4L,YAAYI,QAAQL,EAAWG,iBAG9D,8BAAmCrL,GAClC,OAAIA,aAAkB,EAAAwL,KACdN,EAAWtG,KAEf5E,aAAkB,EAAAyL,aACdP,EAAWG,cAEfrL,aAAkB,EAAA0L,OACdR,EAAWE,YAEnB9F,QAAQiE,KAAK,qDAAsDvJ,IAGpE,MAAM2L,EAA+B,CACpCC,aAAc,IAAI,EAAAC,qBAAqB,CACtCC,MAAO,SAEPC,KAAM,EAAAC,UACNC,UAAW,GACXC,UAAW,KAEZ,CAAChB,EAAWtG,MAAO,IAAI,EAAAuH,oBAAoB,CAE1CL,MAAO,IAAI,EAAAM,MAAM,GAAK,GAAK,GAC3BL,KAAM,EAAAC,UACNK,cAAc,EACdC,aAAa,EACbC,WAAW,IAEZ,CAACrB,EAAWE,QAAS,IAAI,EAAAoB,eAAe,CACvCV,MAAO,SACPW,KAAM,GAENF,WAAW,IAEZ,CAACrB,EAAWG,eAAgB,IAAI,EAAAqB,kBAAkB,CACjDZ,MAAO,SACPa,UAAW,KAMb,IAAYC,EAUAC,GAVZ,SAAYD,GACX,uBACA,uBAFD,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAKV,EAAAE,uBAAyB,CACrC,CAAChO,KAAM,SAAUS,MAAOqN,EAAYG,QACpC,CAACjO,KAAM,SAAUS,MAAOqN,EAAYI,SAGrC,SAAYH,GACX,yBACA,uBAFD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAIT,EAAAI,sBAAwB,CACpC,CAACnO,KAAM,UAAWS,MAAOsN,EAAWK,SACpC,CAACpO,KAAM,SAAUS,MAAOsN,EAAWtL,SAGvB,EAAAmD,aAAe,CAC3ByI,aAAc,CACbJ,OAAQH,EAAYG,OACpBC,OAAQJ,EAAYI,QAGrBI,YAAa,CACZF,QAAS,EACT3L,OAAQ,GAGToD,YAAa,CAEZC,KAAMsG,EAAWtG,KACjBwG,OAAQF,EAAWE,OACnBC,cAAeH,EAAWG,eAE3BgC,aAAc,EAAAlC,YACdmC,sCAAuC,CACtC,CAAC,EAAAC,MAAMzO,MAAO,QACd,CAAC,EAAA0O,MAAM1O,MAAO,QACd,CAAC,EAAA2O,SAAS3O,MAAO,WACjB,CAAC,EAAA0M,KAAK1M,MAAO,OACb,CAAC,EAAA4M,OAAO5M,MAAO,SACf,CAAC,EAAA2M,aAAa3M,MAAO,eACrB,CAAC,EAAA4O,KAAK5O,MAAO,OACb,CAAC,EAAA6O,YAAY7O,MAAO,eAErBgG,qBAAsB,CACrB,CAACoG,EAAWtG,MAAO,EAAA4G,KACnB,CAACN,EAAWE,QAAS,EAAAM,OACrB,CAACR,EAAWG,eAAgB,EAAAI,cAY7B1G,UAAW4G,I,2FC1KZ,2BACA,2BACA,SACA,QAEA,QAEA,OAEA,MAAaiC,UAAuC,EAAA7C,kBAApD,mCACA,MAAMC,EAAe,IAAI4C,EACzB,MAAsBC,UAAiC,EAAAC,mBAAvD,c,oBACC,KAAA7C,cAAgBD,EACN,iBACT,MAAO,GAEE,0BACT,MAAO,GAGR,kBACC9C,MAAMmB,kBACNpH,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OACnGA,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAEvE,wBACT,MAAMzB,EACLyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACrF,GAAIkB,KAAKa,GAAGkG,YAAYuF,yBAA0B,CACjD,IAAIC,EAAQC,KAAKC,IAAI,UAAezM,KAAKa,GAAGkG,YAAY2F,qBAAqB1R,OAAS,EAAG,GACzF,OAAO,UAAauR,GAAOvH,IAAKlK,GAAMyD,GAEtC,OAAO,UAAa,GAAGyG,IAAKlK,GAAMyD,GAG1B,yBAET,MAAO,CADMyB,KAAKgM,wBAAwB,IAGjC,eAAe5J,GACxB,MAAO,KAGR,UAAUqG,GACT,MAAMkE,EAAgC3M,KAAKa,GAAGC,QAAQmH,+BAA+B,GAAG1J,KAKlFqO,EAJO5M,KAAKa,GAAG6G,OAAOmF,8BAA8B7H,IAAI,CAAC4C,EAAY9M,KAC1E,MAAM+B,EAAO+K,EAAW/K,KACxB,OAAO,EAAAyL,UAAUC,IAAIvI,KAAK8M,mBAAmBjQ,MAErBqI,KAAK,MAGxB6H,EAAY,GAAGJ,KADT3M,KAAKoI,YAAYpI,KAAK8L,0BAA0B3D,YAAY,SAC9BnI,KAAKgN,oBAAoBJ,KACnEnE,EAA8BwE,eAAejN,KAAM,CAAC+M,IACpDtE,EAA8ByE,gBAAgBlN,KAAMA,KAAKmN,4BA5C3D,6BAqDA,iDAA+DvB,EACpD,eAAexJ,GACxB,MAAO,KAEE,wBAET,MAAO,CADMpC,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,SAUnG,iDAA+D8M,EACpD,wBACT,MAAMrN,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACjG,MAAO,CAACP,EAAMA,KAShB,iDAA+DqN,EACpD,wBACT,MAAMrN,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACjG,MAAO,CAACP,EAAMA,EAAMA,KAQtB,iDAA+DqN,EACpD,wBACT,MAAMrN,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACjG,MAAO,CAACP,EAAMA,EAAMA,EAAMA,KAQ5B,iDAA+DqN,EACpD,wBACT,MAAMrN,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACjG,MAAO,CAACP,EAAMA,EAAMA,EAAMA,EAAMA,M,uGCpHlC,2BACA,2BACA,4BACA,2BACA,2BACA,4BACA,4BACA,4BACA,4BACA,4BACA,2BAEM6O,EAAyB,OAOzBC,EAA0B,OAE1BC,EAAyB,MAGzBC,EAAa,gBACnB,IAAKC,GAAL,SAAKA,GACJ,cACA,gBAFD,CAAKA,MAAa,KAKlB,MAAa5I,EAKZ,kBAAkB6I,GACjB,OAAOA,GAAQD,EAAcE,MAAQD,GAAQD,EAAcG,MAE5D,kBAAkBF,GACjB,OAAOA,GAAQD,EAAcE,KAE9B,iBAAiBD,GAChB,OAAOF,EAAWK,KAAKH,GAGxB,mBAAmBA,GAClB,MAAMI,EAAQJ,EAAKI,MAAMR,GACzB,OAAIQ,EACIC,SAASD,EAAM,IAEf,EAIT,iBAAiBJ,GAChB,IAAII,EACJ,GAAKA,EAAQJ,EAAKI,MAAMR,GAA2B,CAClD,MAAMU,EAASD,SAASD,EAAM,IAE9B,MAAO,GADQJ,EAAKO,UAAU,EAAGP,EAAKzS,OAAS6S,EAAM,GAAG7S,UACrC+S,EAAS,IAE5B,MAAO,GAAGN,KAIZ,iBAAiBA,GAEhB,MAAkB,MADAA,EAAKA,EAAKzS,OAAS,GAE7B,GAAGyS,KAEHA,EAIT,kBAAkBA,GACjB,OAAO,UAAiBA,GAEzB,mBAAmBA,GAClB,OAAO,UAAkBA,GAE1B,kBAAkBA,GACjB,OAAO,UAAiBA,GAEzB,gBAAgBA,GACf,OAAO,UAAkBA,EAAKQ,QAAQ,KAAM,MAG7C,0BAA0BR,GACzB,OAAOzN,KAAKkO,YAAY,UAAiBT,IAsB1C,4BAA4BA,GAC3B,OAAOU,KAAKC,MAAMX,GAAQ,IAE3B,4BAA4BY,GAC3B,MAAMzR,EAAI,IAAIuR,KAEd,OADAvR,EAAE0R,QAAkB,IAAVD,GACHzR,EAAE2R,cAAcC,OAAO,GAAI,GAGnC,iBAAiBC,EAAaC,EAAmB,GAoChDA,EAAWlC,KAAKC,IAAIiC,EAAU,GAC9B,MAAMC,EAAW,GAAGF,IAAMG,MAAM,KAEhC,GAAIF,GAAY,EACf,OAAOC,EAAS,GAGjB,IAAIE,EAAOF,EAAS,GACpB,QAAapK,IAATsK,EAMH,OALIA,EAAK7T,OAAS0T,IACjBG,EAAOA,EAAKb,UAAU,EAAGU,IAG1BG,EAAO,UAAcA,EAAMH,EAAU,KAC9B,GAAGC,EAAS,MAAME,IACnB,CACN,MAAMC,EAAgB,GAAGL,KACnBM,EAAMD,EAAc9T,OAAS0T,EACnC,OAAO,UAAcI,EAAeC,EAAK,MAI3C,oBAAoB3J,GAInB,MAAM4J,EAAgB,GAAG5J,IAEzB,OADgB4J,EAAc1F,QAAQ,MACvB,EACP0F,EAEA,GAAGA,MAKZ,kBAAkBvB,EAAcwB,GAC/B,GAAa,MAATA,EACH,OAAO,EAcR,OANAA,EAAO,IAJPA,EAAOA,EAAKL,MAAM,KAAK1J,KAAK,SAOd,IAAIgK,OAAOD,GAGZrB,KAAKH,GAEnB,wBAAwBA,EAAc0B,GACrC,IAAIC,GAAmB,EACvB,IAAK,IAAIC,KAAQF,EACZvK,EAAW0K,WAAW7B,EAAM4B,KAC/BD,GAAmB,GAGrB,OAAOA,EAGR,oBAAoB3B,GAGnB,MAAMkB,EAAWlB,EAAKmB,MAAMxB,GACtBmC,EAAkB,UACvBZ,EAAS3J,IAAKwK,GACN,UAAYA,KAgBrB,OAba,UAAYD,GAe1B,aAAad,GACZ,GAAW,MAAPA,EACH,OAAO,EAGR,MAAME,EAAWF,EAAIG,MAAM,IAAIa,UAC/B,IAAIC,EAAK,EACLC,EAAM,EAUV,OATAhB,EAAS/M,QAAQ,CAACgO,EAAS9U,KAC1B,IAAIsH,EAAQwN,EAAQC,WAAW,GAE3BzN,GAAS,IACZuN,EAAM7U,EAAI,GACV4U,GAAMtN,EAAQ,YAAMuN,GACpBD,GAAUI,OAAOC,oBAGZL,EAGR,eAAeM,GACd,MAAMrB,EAAWqB,EAAepB,MAAMtB,GACtC,GAAIqB,EAAS3T,OAAS,EACrB,OAAO,UAAY,UAAe2T,EAAS3J,IAAK4K,GAAY5P,KAAK4D,QAAQgM,MAAYK,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAClG,CACN,MAAMP,EAAUjB,EAAS,GACzB,GAAIiB,EAAS,CACZ,MAAMQ,EAAkB,IACxB,GAAIR,EAAQtG,QAAQ8G,GAAmB,EAAG,CACzC,MAAMC,EAAiBT,EAAQhB,MAAMwB,GACrC,OAAO,UAAatC,SAASuC,EAAe,IAAKvC,SAASuC,EAAe,IAAM,GACzE,CACN,MAAMC,EAASxC,SAAS8B,GACxB,OAAI,UAAgBU,GACZ,CAACA,GAED,IAIT,MAAO,IAKV,0BAA0B7C,GACzB,OAAOA,EAAKQ,QAAQ,iBAAkB,QAnQxC,gB,6BC9BA,IAAYsC,E,iDAAZ,SAAYA,GACX,kBACA,sBACA,sDACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BAbD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAeT,EAAAC,oBAAyC,CACrDD,EAAWE,YACXF,EAAWG,YACXH,EAAWI,YACXJ,EAAWK,YACXL,EAAWM,YACXN,EAAWO,YACXP,EAAWQ,YACXR,EAAWS,YACXT,EAAWU,YACXV,EAAWW,c,6FCzBZ,OAEA,OACA,OACA,OAEA,QAWA,2BACA,2BACA,4BACA,4BACA,4BACA,4BACA,2BACA,2BACA,SACA,SACA,QACA,SACA,SAEA,SAGA,MAAaC,EAQZ,YAAoBC,GAAA,KAAAA,YAGpB,WACC,OAAOpR,KAAKoR,UAEb,OACC,OAAOpR,KAAKoR,UAAUC,KAGvB,eACC,OAAQrR,KAAKsR,cAAgBtR,KAAKsR,eAAiBtR,KAAKuR,uBAEzD,uBAEC,GADAvR,KAAKoR,UAAUI,qBACXxR,KAAKoR,UAAUK,YAClB,OAAOzR,KAAKoR,UAAUK,YAIxB,mBACCzR,KAAKoR,UAAUM,SAAsB,aAAI,EAE1C,0BAA0BlQ,GACzB,OAA4C,IAArCA,EAASkQ,SAAsB,YAEvC,qBACC,OAAOP,EAAaQ,mBAAmB3R,KAAKoR,WAE7C,uBACC,IAAIvU,EAAO,WAIX,OAHImD,KAAK2R,uBACR9U,EAAO,oBAEDA,EAGR,yBACCmD,KAAKoR,UAAUQ,uBAGhB,oBACC,MAAMhU,EAAM,wBACZ,OAAQoC,KAAKoR,UAAUM,SAAS9T,GAAOoC,KAAKoR,UAAUM,SAAS9T,IAAQ,GAExE,0BACC,OAAO3C,OAAO4W,KAAK7R,KAAK8R,qBAAuB,IAEhD,iBAAiBjV,GAEhB,OADAA,EAAO,EAAAkV,cAAcC,WAAWnV,GACzBmD,KAAK8R,oBAAoBjV,GAEjC,kBAAkBA,GAEjB,OADAA,EAAO,EAAAkV,cAAcC,WAAWnV,GACM,MAA/BmD,KAAKiS,iBAAiBpV,GAG9B,WAAWA,GACV,MAAa,UAATA,IAGJA,EAAO,EAAAkV,cAAcC,WAAWnV,GACU,MAAnCmD,KAAKoR,UAAUc,WAAWrV,IAElC,YAAYA,GACX,OAAImD,KAAKmS,kBAAkBtV,GACnB,EAAA4F,aAAa0I,YAAY7L,OAEzB,EAAAmD,aAAa0I,YAAYF,QAIlC,eACC,OAAOhQ,OAAO4W,KAAK7R,KAAKoR,UAAUc,YAEnC,eACC,MAAME,EAAwB,GAC9B,IAAK,IAAIC,KAAerS,KAAKsS,eAC5BF,EAAEC,GAAerS,KAAKoR,UAAUc,WAAWG,GAAaE,SAEzD,OAAOH,EAER,YAAYvV,GACX,IAAI2V,EAEJ,OADA3V,EAAO,EAAAkV,cAAcC,WAAWnV,GACkB,OAA7C2V,EAASxS,KAAKoR,UAAUc,WAAWrV,IAChC2V,EAAOD,SAED,UAAT1V,EAEI,EAEA,EAKV,6BAA6BA,EAAciI,GAC1C9E,KAAK8R,oBAAoBjV,GAAQiI,EAGlC,sBAAsBjI,EAAciI,EAAkBlB,GACrD5D,KAAKyS,6BAA6B5V,EAAMiI,GACxC9E,KAAKoR,UAAUsB,aAAa7V,EAAM,IAAI,EAAA8V,qBAAqB/O,EAAS,IAGrE,mBAAmB/G,EAAc2N,EAAe,EAAGoI,EAAoC,GACtF,MAAM9N,EAAS,GAEf,IAAI+N,GAAkB,EACtB,GAAI,UAAgBD,GAAgB,CAEnC,IAAK,IAAI9X,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxC,IAAK,IAAIkB,EAAI,EAAGA,EAAIwO,EAAMxO,IACzB8I,EAAOxJ,KAAKsX,GAGdC,GAAkB,OAElB,GAAIrI,EAAO,EACV,GAAI,UAAeoI,GAAgB,CAElC,IAAK,IAAI9X,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxC,IAAK,IAAIkB,EAAI,EAAGA,EAAIwO,EAAMxO,IACzB8I,EAAOxJ,KAAKsX,EAAc5W,IAG5B6W,GAAkB,MACZ,CAEN,MAAMC,EAAOF,EACb,GAAY,GAARpI,GAAuB,MAAVsI,EAAKxN,GAAuB,MAAVwN,EAAKvN,EAAW,CAClD,IAAK,IAAIzK,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxCgK,EAAOxJ,KAAKwX,EAAKxN,GACjBR,EAAOxJ,KAAKwX,EAAKvN,GAElBsN,GAAkB,EAGnB,MAAME,EAAOH,EACb,GAAY,GAARpI,GAAuB,MAAVuI,EAAKzN,GAAuB,MAAVyN,EAAKxN,GAAuB,MAAVwN,EAAKvN,EAAW,CACpE,IAAK,IAAI1K,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxCgK,EAAOxJ,KAAKyX,EAAKzN,GACjBR,EAAOxJ,KAAKyX,EAAKxN,GACjBT,EAAOxJ,KAAKyX,EAAKvN,GAElBqN,GAAkB,EAGnB,MAAMG,EAAMJ,EACZ,GAAY,GAARpI,GAAsB,MAATwI,EAAI7V,GAAsB,MAAT6V,EAAIC,GAAsB,MAATD,EAAI7C,EAAW,CACjE,IAAK,IAAIrV,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxCgK,EAAOxJ,KAAK0X,EAAI7V,GAChB2H,EAAOxJ,KAAK0X,EAAIC,GAChBnO,EAAOxJ,KAAK0X,EAAI7C,GAEjB0C,GAAkB,EAGnB,MAAMK,EAAON,EACb,GAAY,GAARpI,GAAuB,MAAV0I,EAAK5N,GAAuB,MAAV4N,EAAK3N,GAAuB,MAAV2N,EAAK1N,GAAuB,MAAV0N,EAAKzN,EAAW,CACtF,IAAK,IAAI3K,EAAI,EAAGA,EAAIkF,KAAK2D,eAAgB7I,IACxCgK,EAAOxJ,KAAK4X,EAAK5N,GACjBR,EAAOxJ,KAAK4X,EAAK3N,GACjBT,EAAOxJ,KAAK4X,EAAK1N,GACjBV,EAAOxJ,KAAK4X,EAAKzN,GAElBoN,GAAkB,GAMtB,IAAIA,EAGH,KAAM,+DAFN7S,KAAKoR,UAAUsB,aAAa7V,EAAM,IAAI,EAAAsW,uBAAuBrO,EAAQ0F,IAMvE,wBAAwB7G,EAAsBiP,GAC7C,MAAM9N,EAAS,GACM,MAAjB8N,IACHA,EAAgB,IAAI,EAAAQ,SAGrB,IAAK,IAAItY,EAAI,EAAGA,EAAI6I,EAAc7I,IACjCgK,EAAOxJ,KAAKsX,EAActN,GAC1BR,EAAOxJ,KAAKsX,EAAcrN,GAC1BT,EAAOxJ,KAAKsX,EAAcpN,GAG3B,OAAOxF,KAAKoR,UAAUsB,aAAa,WAAY,IAAI,EAAAS,uBAAuBrO,EAAQ,IAGnF,cAAcjI,EAAcwW,GAC3B,OAAQA,EAAY9U,QACnB,KAAK,EAAAkE,aAAa0I,YAAY7L,OAC7B,OAAO+D,QAAQC,IAAI,sBACpB,KAAK,EAAAb,aAAa0I,YAAYF,QAC7B,OAAOjL,KAAKsT,mBAAmBzW,EAAMwW,EAAY7I,SAIpD,iBAAiB+I,EAAkBC,GAC9BxT,KAAKmS,kBAAkBoB,KAC1BvT,KAAK8R,oBAAoB0B,GAAY,UAAaxT,KAAK8R,oBAAoByB,WACpEvT,KAAK8R,oBAAoByB,IAGjC,MAAME,EAAazT,KAAKoR,UAAU9O,aAAaiR,GAE/C,OADAvT,KAAKoR,UAAUsB,aAAac,EAAU,IAAI,EAAAL,uBAAuBM,EAAWlR,MAAOkR,EAAWlB,WACvFvS,KAAKoR,UAAUsC,gBAAgBH,GAGvC,iBAAiB1W,GAKhB,OAJImD,KAAKmS,kBAAkBtV,WACnBmD,KAAK8R,oBAAoBjV,GAG1BmD,KAAKoR,UAAUsC,gBAAgB7W,GAGvC,QACC,OAAOsU,EAAapO,MAAM/C,KAAKoR,WAGhC,aAAauC,GACZ,IAAIC,EAGJ,IAAK,IAAIC,KAAkB5Y,OAAO4W,KAAK8B,EAAazB,YAAa,CAChE,MAAM4B,EAAYH,EAAarR,aAAauR,GACxCC,EAAUC,YAAYlX,MAAQ,EAAAmX,2BAA2BnX,MAC5D,EAAAoX,cAAcC,MAAMJ,GAItB,MAAMK,EAAeR,EAAa5Q,QAIlC,OAH8C,OAAzC6Q,EAAeD,EAAajC,YAChCyC,EAAazC,SAAW,UAAiBkC,IAEnCO,EAGR,eACC,OAAOhD,EAAaxN,aAAa3D,KAAKoR,WAGvC,oBAAoB5P,GACnB,IAAI4S,EACA7H,EAAQ,EAEZ,IAAI8H,EAAuB,WAK3B,GANsB,IAAIrU,KAAKwB,GAEbmQ,uBACjB0C,EAAuB,oBAGwC,OAA3DD,EAAW5S,EAASc,aAAa+R,IAAgC,CACrE,IAAI9R,EAC4B,OAA3BA,EAAQ6R,EAAS7R,SACrBgK,EAAQhK,EAAMvH,OAAS,GAIzB,OAAOuR,EAKR,SACC,OAAQvM,KAAKsU,QAAUtU,KAAKsU,SAAWtU,KAAKuU,uBAE7C,eACCvU,KAAKsU,aAAU/P,EAEhB,uBACC,MAAMiQ,EAAS,GACTC,EAAkBzU,KAAKoR,UAAU9O,aAAatC,KAAKqU,wBAEzD,GAAuB,MAAnBI,EAAyB,CAC5B,MAAM9Q,EAAe8Q,EAAgBlS,MAAMvH,OAAS,EACpD,IAAK,IAAI0Z,EAAc,EAAGA,EAAc/Q,EAAc+Q,IAAe,CACpE,MAAMC,EAAQ,IAAI,EAAAC,UAAU5U,KAAM0U,GAyBlCF,EAAOlZ,KAAKqZ,IAId,OAAOH,EAGR,4BAA4BA,EAAqBK,GAChD,MAAMrT,EAAW,IAAI,EAAAsT,eACfC,EAAmB,IAAI/U,KAAKwB,GAE5BwT,EAAcR,EAAO,GAC3B,GAAmB,MAAfQ,EAAqB,CACxB,MAAMC,EAAeD,EAAYxT,WAC3B0T,EAAuBF,EAAYD,mBAGnCI,EAA6C,GACnD,UAAYX,EAAQ,CAACG,EAAO7Z,IAAOqa,EAAuBR,EAAMvS,OAAStH,GAEzE,MAAM8I,EAAU5D,KAAKoV,qBAAqBD,EAAwBF,EAAcJ,GACjE,MAAXjR,GAAsC,IAAnBA,EAAQ5I,QAC9BwG,EAASgB,SAASoB,GAInB,MAAM,WAACsO,GAAc+C,EAErB,IAAK,IAAIpB,KAAkB5Y,OAAO4W,KAAKK,GAAa,CAInD,GAF2C,MADrBgD,EAAqBpD,oBAAoB+B,GAGxC,CACtB,MAAMwB,EAAa,UAAYb,EAAOxP,IAAK2P,GAAUA,EAAMW,aAAazB,KAClE0B,EAAyC,GAC/C,UAAYF,EAAY,CAACG,EAAW1a,IAAOya,EAAmBC,GAAa1a,GAE3Eia,EAAiBjD,oBAAoB+B,GAAkBwB,EAIvD,MAAMI,EAAqB,GAC3B,IAAK,IAAId,KAASH,EAAQ,CAEzB,MAAMkB,EAAYH,EAAmBZ,EAAMW,aAAazB,IACxD4B,EAAmBna,KAAKoa,GAGzBlU,EAASkR,aAAamB,EAAgB,IAAI,EAAAV,uBAAuBsC,EAAoB,QAC/E,CACN,MAAM3Q,EAAS,GACT6Q,EAAczD,EAAW2B,GAAgBtB,SAC/C,IAAK,IAAIoC,KAASH,EAAQ,CACzB,MAAMlX,EAAQqX,EAAMW,aAAazB,GACjC,OAAQ8B,GACP,KAAK,EACJ7Q,EAAOxJ,KAAKgC,GACb,KAAK,EACJwH,EAAOxJ,KAAKgC,EAAMgI,GAClBR,EAAOxJ,KAAKgC,EAAMiI,GAClBT,EAAOxJ,KAAKgC,EAAMkI,IAIrBhE,EAASkR,aAAamB,EAAgB,IAAI,EAAAV,uBAAuBrO,EAAQ6Q,MAK5E,OAAOnU,EAGR,4BACC2T,EACAF,EACAJ,GAEA,MAAMe,EAAeX,EAAa7S,MAClC,GAAoB,MAAhBwT,EAAsB,CACzB,MAAMC,EAAcD,EAAarT,MAE3BuT,EAAwB,GAE9B,OAAQjB,GACP,KAAK,EAAApS,aAAaC,YAAYyG,OAC7B,UAAY0M,GAAa,SAAUE,EAAWjb,GAC7C,MAAM4a,EAAYP,EAAuBY,GACxB,MAAbL,GACHI,EAAYxa,KAAKoa,MAGnB,MAED,KAAK,EAAAjT,aAAaC,YAAYC,KAC7B,UAAYkT,GAAa,SAAUE,EAAWjb,GAC7C,GAAIA,EAAI,GAAM,EAAG,CAChB,MAAMkb,EAAaH,EAAY/a,GACzBmb,EAAaJ,EAAY/a,EAAI,GAC7Bob,EAAaL,EAAY/a,EAAI,GAC7Bqb,EAAahB,EAAuBa,GACpCI,EAAajB,EAAuBc,GACpCI,EAAalB,EAAuBe,GACxB,MAAdC,GAAoC,MAAdC,GAAoC,MAAdC,IAC/CP,EAAYxa,KAAK6a,GACjBL,EAAYxa,KAAK8a,GACjBN,EAAYxa,KAAK+a,QAIpB,MAED,KAAK,EAAA5T,aAAaC,YAAY0G,cAC7B,UAAYyM,GAAa,SAAUE,EAAWjb,GAC7C,GAAIA,EAAI,GAAM,EAAG,CAChB,MAAMkb,EAAaH,EAAY/a,GACzBmb,EAAaJ,EAAY/a,EAAI,GAC7Bqb,EAAahB,EAAuBa,GACpCI,EAAajB,EAAuBc,GACxB,MAAdE,GAAoC,MAAdC,IACzBN,EAAYxa,KAAK6a,GACjBL,EAAYxa,KAAK8a,QAOtB,OAAON,GAIT,wBAAwBnU,GACvB,GAA0B,IAAtBA,EAAW3G,OACd,OAMD,MAAMsb,EAAkB3U,EAAWqD,IAAKxD,GAAa,IAAI2P,EAAa3P,IAChE+U,EAA0BD,EAAgB,GAAGC,0BAE7CC,EAAqD,GAC3D,IAAK,IAAIC,KAA0BF,EAAyB,CAC3D,MAAMG,EAAsC,GACtCC,EAAwB,GAC9B,IAAK,IAAIC,KAAiBN,EAAiB,CAC1C,MAAMO,EAAkBD,EAAcpC,SACtC,IAAK,IAAIG,KAASkC,EAAiB,CAClCF,EAAsBrb,KAAKqZ,GAC3B,MAAMrX,EAAQqX,EAAMW,aAAamB,GAGP,MAA1BC,EAAgBpZ,GACboZ,EAAgBpZ,GACfoZ,EAAgBpZ,GAASrC,OAAO4W,KAAK6E,GAAiB1b,QAI5D,MAAM8J,EAAS7J,OAAO4W,KAAK6E,GAC3B,IAAK,IAAI/B,KAASgC,EAAuB,CACxC,MACMjB,EAAYgB,EADJ/B,EAAMW,aAAamB,IAEjC9B,EAAMmC,iBAAiBL,EAAwBf,GAGhDc,EAA6BC,GAA0B3R,EAMxD,MAAMiS,EAAkB,EAAAC,oBAAoBC,sBAAsBtV,GAM5DuV,EAA0B,IAAIlX,KAAK+W,GAUzC,OATA9b,OAAO4W,KAAK2E,GAA8B5U,QAAS6U,IAClD,MAAM3R,EAAS0R,EAA6BC,GAC5CS,EAAwBzE,6BAA6BgE,EAAwB3R,KAG1EiS,UACIA,EAAgBrF,SAASyF,eAG1BJ,EAGR,W,MAEC,MAAM3U,GAA6B,QAArB,EAAApC,KAAKwB,WAAWY,aAAK,eAAEG,QAAS,GAC9C,OAAO,UAAaH,EAAO,GAG5B,QACC,OAAOpC,KAAKoX,sBAEb,sB,MACC,MACMC,IADmC,QAArB,EAAArX,KAAKwB,WAAWY,aAAK,eAAEG,QAAS,IACpBvH,OAAS,EACzC,OAAO,UAAaqc,GAAarS,IAAKlK,GAAM,IAAI,EAAAwc,SAAStX,KAAMlF,KAvgBjE,kB,oFCjCA,eAKA,sBAMC,YAAsByc,EAA6BxR,GAA7B,KAAAwR,SAA6B,KAAAxR,QAF3C,KAAAyR,kBAAqC,IAAI,EAAAC,gBAAgBzX,MAIhEA,KAAK0X,eAAiBH,EAAOI,MAAMC,UACnCL,EAAOI,MAAME,QAAQ7X,MACrBA,KAAK8X,OAASP,EAAOI,MAEtB,WACC,OAAO3X,KAAK+F,MAEb,SAASlJ,GACRmD,KAAK+F,MAAQlJ,EAiBd,YACC,OAAOmD,KAAKuX,OAEb,YACC,OAAOvX,KAAK8X,OAEb,oBACC,OAAO9X,KAAK0X,eAQb,uBACC,OAAO1X,KAAKwX,kBAEb,UAAUO,GACTA,EAAUA,GAAW/X,KACrBA,KAAKwX,kBAAkBQ,UAAUD,GAElC,qBAAqBA,GACpB/X,KAAKwX,kBAAkBS,qBAAqBF,GAE7C,qBACC/X,KAAKwX,kBAAkBU,qBAExB,eACC,OAAOlY,KAAKwX,kBAAkBW,SAE/B,oBAAoBtb,EAAcub,GACjCpY,KAAKwX,kBAAkBa,oBAAoBxb,EAAMub,GAWlD,eACCpY,KAAK2X,MAAMW,WAAWtY,MAKvB,gBAAgBuY,GACf,OAAOvY,KAAK2X,MAAMa,QAAQD,EAAKvY,MAEhC,mBAAmBuY,GAClBvY,KAAK2X,MAAMc,WAAWF,EAAKvY,MAM5B,gCACCA,KAAK2X,MAAMe,wBAAwB1Y,MAEpC,8BACCA,KAAK2X,MAAMgB,sBAAsB3Y,MAGlC,wBACC,OAAOA,KAAK2X,MAAMiB,gBAAgB5Y,KAAK0X,iBAAmB,GAE3D,qBACC,OAAO1X,KAAK2X,MAAMkB,aAAa7Y,MAEhC,mBACC,OAAOA,KAAK2X,MAAMmB,WAAW9Y,MAE9B,yBACC,OAAOA,KAAK2X,MAAMoB,iBAAiB/Y,MAEpC,uBACC,OAAOA,KAAK2X,MAAMqB,eAAehZ,S,8ECrHnC,SAAYiZ,GACX,yBACA,yBACA,kCACA,uEACA,qDACA,mDACA,uCACA,uCACA,2DACA,yDACA,qCACA,4CACA,8CACA,wCAdD,CAAY,EAAAA,YAAA,EAAAA,UAAS,M,2FCDrB,SACA,SAIA,SACA,2BACA,2BAMA,mBAGC,YAA4BC,GAAA,KAAAA,QAE3BlZ,KAAKyD,KAAOzD,KAAKkZ,MAAMzV,KAGxB,4BAEC,OADAJ,QAAQiE,KAAK,mFACN,GAER,4BACC,MAAO,GAER,qCACC,OAAOtH,KAAKmZ,qBAAqBne,OAElC,qCACC,OAAOgF,KAAKoZ,8BAAgCpZ,KAAKqZ,qBAAqBre,OAEvE,+BAA+BuR,GAC9B,OAAOA,GAASvM,KAAKoZ,+BAAiC7M,GAASvM,KAAKsZ,8BAGrE,kBAAkBC,GACjB,KAAM,iFAGD,8BAA8BC,G,mDACnC,MAAMC,EAAkBzZ,KAAK0Z,oBAAoBF,GAEjD,GAAIC,EAAiB,CACpB,MAAM1X,QAAkB0X,EAAgBE,oBACxC,GAAI5X,EAAW,CAEd,GADmBA,EAAUC,eAE5B,OAAOD,EAGT,KAAM,4BAA4B0X,EAAgBpR,cAElD,KAAM,kBAAkBmR,QAI1B,qBAAqBI,EAAcC,GAmBlC,OAlByB,EAAAC,WAAWC,WAAW/Z,KAAKyD,KAAMmW,EAAMC,IAkBrC,KAG5B,2BAA2BL,EAAgCK,GAG1D,GAFiB,UAAgBL,GAEnB,CACb,MAAMpX,EAAQoX,EAEd,OADyBxZ,KAAKyD,KAAK5C,GAAG6G,OAAOsS,iBAAiB5X,GAExD,CACN,MAAMwX,EAAOJ,EACb,OAAOxZ,KAAK0Z,oBAAoBE,EAAMC,IAGxC,oBAAoBL,EAAgCK,GAInD,GAAI,UAAgBL,GAAgB,CACnC,MAAMI,EAAOJ,EACb,OAAO,EAAAM,WAAWG,UAAUja,KAAKyD,KAAMmW,EAAMC,GACvC,CACN,MAAMzX,EAAQoX,EAEd,OADAxZ,KAAKyD,KAAK5C,GAAG6G,OAAOwS,MAAM9X,GACnBpC,KAAKyD,KAAK5C,GAAG6G,OAAOwS,MAAM9X,IAsBnC,gBAAgBmX,GACf,OAAO,KAGE,qCAAqCC,GAE9C,MAAMK,EAAkB,IAAI,EAAAM,eACtB1W,EAAOzD,KAAKoa,2BAA2BZ,EAAeK,GAC5D,OAAIpW,EACIzD,KAAKqa,kBAAkB5W,EAAM+V,EAAeK,IAEnDxW,QAAQiE,KAAK,0BAA2BkS,GAElC,MAEE,kBACT/V,EACA+V,EACAK,GAOA,OADmB,EAAAS,iBAAiB3c,OAAOqC,KAAKkZ,MAAOM,EAAe/V,EAAMoW,M,kFCnJ9E,eACA,SAIA,MAAaU,EAYZ,cAVA,KAAAC,qBAA4C,IAAI,EAAAC,oBAChD,KAAAC,eAAgC,IAAI,EAAAC,cAEpC,KAAAC,eAAwC,GAIxC,kBACC,OAAQ5a,KAAK6a,UAAY7a,KAAK6a,WAAa,IAAIN,EAIhD,cAAc9W,EAA2BqX,EAA4Brc,GACpEuB,KAAK0a,eAAeK,cAActX,EAAMqX,EAAmBrc,GAE5D,iBAAiBuc,EAA6Bzc,GAC7C,OAAOyB,KAAK0a,eAAeO,iBAAiBD,EAAgBzc,GAE7D,mBACC,OAAO,EAER,sBAGA,cACC,OAAO,EAGR,OAAOgb,GACNlW,QAAQC,OAAOiW,GAEhB,QAAQ2B,GACPlb,KAAKmb,KAAOD,EAEb,UACC,OAAOlb,KAAKmb,MArCd,SAmDa,EAAAC,KAAOb,EAAKc,Y,2FC1DzB,QAEA,OAIA,SAEA,QACA,SAIA,MAAsBC,UAAqE,EAAAzb,UAA3F,c,oBAKC,KAAAC,qBAAoE,IAAI,EAAAC,yBACvEC,KACA,EAAAub,mBAwCO,KAAAC,2CAA6Cxb,KAAKyb,qCAAqC5d,KAAKmC,MAtCpG,sBACC,OAAO,EAAAI,YAAYsb,IAMpB,uBACCzV,MAAM0V,uBAeN3b,KAAK4b,gBAAgBC,4BAA4B7b,KAAK8b,kBAAkBje,KAAKmC,OAE7EA,KAAKqY,oBACJ,uCACArY,KAAKwb,4CAQP,cAAc3e,GACb,OAAOoJ,MAAMoB,cAAcxK,GAGd,uC,yDACPmD,KAAK+b,gBAAgBC,8BAGpB,oBAIHhc,KAAKic,YACRjc,KAAKic,UAAUpf,KAAOmD,KAAKqI,aAK7B,eACC,OAAQrI,KAAKic,UAAYjc,KAAKic,WAAajc,KAAKkc,kBAIjD,aAAa/Y,GACZnD,KAAKmB,cAAcgC,GASpB,gBAAgBpF,KA7EjB,iBAkFA,iCAAsCud,EACrC,kBACC,OAAO,IAAI,EAAAa,Y,8ECjGb,cAEA,QAGA,SACA,QAEA,SAEA,QAGMxc,EAAsB,CADF,iEAU1B,IAAYyc,GAAZ,SAAYA,GACX,yBACA,iBACA,uBACA,qBACA,qBACA,iBAND,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAS9B,MAAaC,UAAqE,EAAAxc,UAAlF,c,oBAKC,KAAAC,qBAAkE,IAAI,EAAAC,yBACrEC,KACA,EAAAsc,iBAEe,KAAAC,aAAuBH,EAAmBI,QAUhD,KAAAC,gBAAkB,IAAI,EAAAlR,MAatB,KAAAmR,0BAAoC,EAIpC,KAAAC,gBAA0B,EAzBpC,sBACC,OAAO,EAAAvc,YAAYwc,IAEpB,+BACC,OAAOjd,EAkBR,8BACC,OAAOK,KAAK0c,yBAGb,oBACC,OAAO1c,KAAK2c,eAGb,kBAAkBE,GAEjB,GADA7c,KAAK2c,eAAiBE,GACjB7c,KAAKoD,MAAM0Z,mBAAmBC,WAAY,CAC9C,MAAMC,EAAOhd,KAAKU,OACdsc,GACHA,EAAKC,cAAcjd,OAItB,qBAAqBU,GAChBV,KAAKkd,yBACRxc,EAAOyc,IAAInd,KAAKjC,QAGlB,4BACC,GAAIiC,KAAKkd,wBAAyB,CACjC,MAAMxc,EAASV,KAAKjC,OAAO2C,OACvBA,GACHA,EAAO0c,OAAOpd,KAAKjC,SAatB,uBAECiC,KAAKqd,QAAUrd,KAAKsd,iCAGpBtd,KAAK4b,gBAAgBC,4BAA4B7b,KAAKud,gBAAgB1f,KAAKmC,OAC3EA,KAAKud,kBAWN,cAAc1gB,GACb,OAAOoJ,MAAMoB,cAAcxK,GA4B5B,qBACC,OAAOmD,KAAKyc,gBAEb,aACC,OAAOzc,KAAKqd,QAGb,iCACC,MAAMtf,EAASiC,KAAKyB,gBAQpB,OAJC1D,EAA4B0F,KAAOzD,KAGpCjC,EAAOof,IAAInd,KAAKyc,iBACT1e,EAEA,kBACHiC,KAAKqd,UACRrd,KAAKqd,QAAQxgB,KAAOmD,KAAKqI,YACzBrI,KAAKyc,gBAAgB5f,KAAO,GAAGmD,KAAKqI,gCAatC,gBACC,OAAO,IAAI,EAAAmD,SAKZ,0BACC,OAAO,EAiBR,e,QACC,OAA0B,QAAnB,EAAU,QAAV,EAAAxL,KAAKE,aAAK,eAAEI,eAAO,eAAEG,UAAU,GAjLxC,iBAkNA,iCAAsC4b,K,+BCjPtC,sCAoCKmB,EACAhc,EAEAic,EAvCL,wBAIA,SAASC,IAGR1d,KAAK2d,SAAU,EAGf3d,KAAK4d,WAAY,EAGjB5d,KAAK6d,OAAQ,EAGb7d,KAAK8d,gBAAiB,EAIvB7iB,OAAO8iB,OAAQL,EAAKxiB,UAAW,CAE9B8iB,QAAS,aAETC,OAAQ,WAEP5a,QAAQ6a,MAAO,iEAQjBR,EAAKD,gBAEAD,EAAS,IAAI,sBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GACpDhc,EAAW,IAAI,sBAAqB,EAAG,GAEvCic,EAAiB,SAAWta,GAE/BnD,KAAKme,MAAQ,IAAI,OAAM3c,EAAU2B,IAIlClI,OAAO+B,eAAgBygB,EAAeviB,UAAW,WAAY,CAE5DgC,IAAK,WAEJ,OAAO8C,KAAKme,MAAMhb,UAInB5C,IAAK,SAAWjD,GAEf0C,KAAKme,MAAMhb,SAAW7F,KAMxBrC,OAAO8iB,OAAQN,EAAeviB,UAAW,CAExCkjB,QAAS,WAERpe,KAAKme,MAAM3c,SAAS4c,WAIrBH,OAAQ,SAAWI,GAElBA,EAASJ,OAAQje,KAAKme,MAAOX,MAMxBC,I,mGC5ER,QA6BA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAKA,SACA,SACA,SAqBA,GAJA,MAIA,QAoCA,SAOA,MAAa5d,UAAqF,EAAAye,cA+FjG,YAAYlb,EAAkBvG,EAAe,YAC5CoJ,MAAM7C,EAAOvG,GA/Fd,KAAAiD,qBAAkE,IAAI,EAAAC,yBACrEC,KACA,EAAAue,eAoBQ,KAAAC,GAA2C,IAAI,EAAAC,oBAE/C,KAAAxgB,EAAqC,IAAI,EAAAygB,eA0E1C,KAAAC,cAAwB,EAlFhC,8BACC,OAAO3e,KAAK4e,yBAab,wBACC,OAAQ5e,KAAK6e,mBAAqB7e,KAAK6e,oBAAsB,IAAI,EAAAC,0BAA0B9e,MAE5F,+BACC,MAAO,GAKR,kCACC,OAAOA,KAAK+e,6BAEL,8BACP,GAAI/e,KAAK+e,6BACR,OAAO,IAAI,EAAAC,4BAA4Bhf,KAAMA,KAAK+e,8BAGpD,0BACC,OAAQ/e,KAAKif,qBAAuBjf,KAAKif,sBAAwBjf,KAAKkf,8BAEvE,mBACC,OAA4C,MAArClf,KAAK+e,6BAGb,cACC,OAAQ/e,KAAKmf,SAAWnf,KAAKmf,UAAY,IAAI,EAAAC,OAAOpf,MAErD,8BACC,OAAQA,KAAKqf,yBAA2Brf,KAAKqf,0BAA4B,IAAI,EAAAC,uBAAuBtf,MAErG,aACC,OAAQA,KAAKuf,QAAUvf,KAAKuf,SAAW,IAAI,EAAAC,iBAAiBxf,MAE7D,gBACC,OAAQA,KAAKyf,WAAazf,KAAKyf,YAAc,IAAI,EAAAC,oBAAoB1f,MAEtE,iBACC,OAAQA,KAAK2f,YAAc3f,KAAK2f,aAAe,IAAI,EAAAC,eAAe5f,MAKnE,sBACC,OAAQA,KAAK6f,iBAAmB7f,KAAK6f,kBAAoB,IAAI,EAAAC,eAAe9f,MAE7E,SACC,OAAQA,KAAK+f,IAAM/f,KAAK+f,KAAO,IAAI,EAAAC,aAA2BhgB,MAE/D,sBACC,OAAQA,KAAKigB,iBAAmBjgB,KAAKigB,kBAAoB,IAAI,EAAAC,eAAelgB,MAE7E,SAASnD,GACRmD,KAAK4b,gBAAgBuE,SAAStjB,GAE/B,eAAeA,GACdmD,KAAK+F,MAAQlJ,EAEd,aACC,OAAQmD,KAAKogB,mBAAqBpgB,KAAKogB,oBAAsB,IAAI,EAAAC,iBAAiBrgB,MAEnF,yBACC,OAAQA,KAAKsgB,oBAAsBtgB,KAAKsgB,qBAAuB,IAAI,EAAAC,kBAAkBvgB,MAQ/E,2BACDA,KAAK2e,aAKTtb,QAAQiE,KAAK,6BAJbtH,KAAK2b,uBACL3b,KAAKoH,kBACLpH,KAAK2e,cAAe,GAKZ,wBACA,mBAoBV,cACC,KAAM,uBAEP,WAEC,OADU3e,KAAK+T,YACNxV,OAEV,sBACC,KAAM,oBAEP,eAEC,OADUyB,KAAK+T,YACNyM,eAGV,gCACC,MAAO,GAER,0BACC,IAAIC,EAAgBzgB,KAAK0gB,yBACzB,OAAID,EAIIA,EAAczb,IAAKwK,GAAM,sBAAsBA,KAE/C,GAGT,mBAEC,OADUxP,KAAK+T,YACN4M,mBAEV,wBACC,OAAO,EAER,iBAEC,OADU3gB,KAAK+T,YACN6M,iBAWV,WAAWlgB,GACVV,KAAK6gB,kBAAkBC,WAAWpgB,GAEnC,aACC,OAAOV,KAAK6gB,kBAAkBngB,OAE/B,WACC,OAAOV,KAAKuX,OAAOyF,KAEpB,YACC,OAAOhd,KAAK6gB,kBAAkBxY,YAI/B,iBACA,UACC9J,EACA1B,EACA+V,EACAnU,G,MAEA,OAA8B,QAA9B,EAAOuB,KAAKogB,0BAAkB,eAAEW,UAAUxiB,EAAM1B,EAAM+V,EAAenU,GAOtE,KAAKuiB,GACJ,OAAO,KAIF,oB,mDACL,aAAahhB,KAAKF,qBAAqB6Z,uBAExC,cAAcsH,EAA4Bnf,EAAyB,MAGlE9B,KAAKF,qBAAqBiC,UAAUmf,YAAYD,GACjC,MAAXA,IACGA,EAAgBpkB,OACpBokB,EAAgBpkB,KAAOmD,KAAKqI,aAExB4Y,EAAgBxd,OACpBwd,EAAgBxd,KAAOzD,OAI1BA,KAAK+b,gBAAgBoF,SAASrf,GAI/B,YAAYvD,G,MACX,OAA+B,QAA/B,EAAOyB,KAAKohB,2BAAmB,eAAEC,YAAY9iB,GAE9C,YAAYkF,G,MACa,QAAxB,EAAAzD,KAAKohB,2BAAmB,SAAEE,YAAY7d,GAEvC,W,MACC,OAA+B,QAAxB,EAAAzD,KAAKohB,2BAAmB,eAAEG,aAAc,GAEhD,KAAK3H,G,MACJ,OAA6B,QAAtB,EAAA5Z,KAAK6gB,yBAAiB,eAAE5G,UAAUL,KAAS,KAEnD,cAAc/c,G,MACb,GAAImD,KAAKU,OAAQ,CAChB,MAAM+C,EAAsC,QAAlC,EAAGzD,KAAKU,OAAO0gB,2BAAmB,eAAEI,cAAc3kB,GAC5D,GAAI4G,EACH,OAAOA,EAGT,OAAO,KAER,cAAclF,G,MACb,OAA+B,QAAxB,EAAAyB,KAAKohB,2BAAmB,eAAEK,cAAcljB,KAAS,GAIzD,UAAUmjB,EAAsCje,EAAiBke,EAAwC,GACxG3hB,KAAKa,GAAG6G,OAAOka,UAAUF,EAAqBje,EAAMke,GAmBrD,KAAKE,EAAuBrnB,EAAsB,MAEjDwF,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAM6hB,EAAYrnB,GAI3D,QAAQwnB,GAAoC,GAC3C,OAAOhiB,KAAKiiB,WAAWC,QAAQF,IA7RjC,cAkSA,8BAAmCniB,K,6FClZnC,SAEA,OAIA,SACA,QAGA,OAEA,QAIA,SAAgBsiB,EAAkDC,GACjE,OAAO,cAAoBA,EAApB,c,oBACN,KAAAC,UAAY,EAAAC,YAAYvjB,SACxB,KAAAxB,EAAI,EAAA+kB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAArC,EAAI,EAAAmlB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAApD,EAAI,EAAAkmB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAA+iB,MAAQ,EAAAD,YAAYxjB,MAAM,KAN5B,2BAYsCqjB,EAAuB,EAAArZ,kBAC7D,MAAa0Z,UAA2B,EAAAnG,aAAxC,c,oBAEU,KAAAoG,qBAA4C,IAAIC,EAAoB1iB,OAF9E,uBAQA,MAAa0iB,EACZ,YAAoBjf,GAAA,KAAAA,OA4BZ,KAAA+X,2CAA6Cxb,KAAKyb,qCAAqC5d,KAAKmC,MA8D5F,KAAA2iB,oCAAsC,IAAI,EAAAvP,QAnFlD,kBAQCpT,KAAKyD,KAAK5C,GAAG6G,OAAOkb,UAAU,EAAG,GACjC5iB,KAAKyD,KAAK5C,GAAG6G,OAAOmb,uBAAsB,GAC1C7iB,KAAKyD,KAAK5C,GAAGC,QAAQC,qBACrBf,KAAKyD,KAAK5C,GAAG6G,OAAOob,sBAAsB,mBAAoB,KAC7D9iB,KAAK+iB,qBAGN,MAAMC,EAAY,uCACbhjB,KAAKyD,KAAKwf,iBAAiBC,SAASF,IACxChjB,KAAKyD,KAAKwf,iBAAiB5K,oBAAoB2K,EAAWhjB,KAAKwb,4CAKnD,uC,yDAEPxb,KAAKyD,KAAKsY,gBAAgBC,8BAIjC,wBAAwBvY,GACQ,MAA3BA,EAAK5C,GAAG6G,OAAOwS,MAAM,GACxBzW,EAAKuZ,KAAKmG,wBAAwB1f,GAElCA,EAAKuZ,KAAKoG,6BAA6B3f,GAGzC,mBACCif,EAAoBK,iBAAiB/iB,KAAKyD,MAG3C,OAAO4f,GAcNrjB,KAAKsjB,6BAA6BD,GAcnC,6BAA6BA,GAE5B,MAAMtlB,EAASiC,KAAKyD,KAAK1F,OAEzB,OAAc,MAAVslB,GAAmBA,EAAOE,OAAOxlB,EAAOslB,QAQpCrjB,KAAKwjB,gCALZzlB,EAAO0lB,kBAAmB,EAC1B1lB,EAAOslB,OAASA,EAETtlB,EAAO2lB,cAAc,CAACnlB,KAAM,YAOrC,+BACC,MAAMR,EAASiC,KAAKyD,KAAK1F,OACzB,GAAIA,EAAQ,CACX,MAAMqW,EAAoBpU,KAAKyD,KAAK+a,GAAGjhB,EAEjComB,EAAoB3jB,KAAKyD,KAAK+a,GAAGrhB,EAEvC6C,KAAK2iB,oCAAoCiB,KAAK5jB,KAAKyD,KAAK+a,GAAGpiB,GAAGynB,eAAe7jB,KAAKyD,KAAK+a,GAAG+D,OAM1FxkB,EAAO0lB,kBAAmB,EAC1B1lB,EAAOqW,SAASwP,KAAKxP,GAErB,MAAM0P,EAAU,CACf,EAAAC,SAASC,mBAAmBL,EAASre,GACrC,EAAAye,SAASC,mBAAmBL,EAASpe,GACrC,EAAAwe,SAASC,mBAAmBL,EAASne,IAEhCye,EAAQ,IAAI,EAAAC,MACjBJ,EAAQ,GACRA,EAAQ,GACRA,EAAQ,IAGT/lB,EAAO4lB,SAASC,KAAKK,GACrBlmB,EAAOwkB,MAAMqB,KAAK5jB,KAAK2iB,qCACvB5kB,EAAO0lB,kBAAmB,EAC1B1lB,EAAOomB,eAEPpmB,EAAO2lB,cAAc,CAACnlB,KAAM,YAI9B,uBAAuB8kB,EAAiB5kB,EAAsC,IAC7E,EAAA2lB,cAAcC,uBAAuBhB,EAAQrjB,KAAKyD,KAAMhF,IAjI1D,yB,8ECnCA,aACA,QAEA,QACA,SAEA,QAaA,oCA+FS,KAAA6lB,oBAA+B,IAAI,EAAAC,QACnC,KAAAC,sBAAwB,IAAI,EAAAC,WAC5B,KAAAC,sBAAwB,IAAI,EAAAtR,QAAQ,EAAG,EAAG,GA0B1C,KAAAuR,SAAU,IAAI,EAAAJ,SAAUK,WACxB,KAAAC,UAAY,IAAI,EAAAJ,WAChB,KAAAK,UAAY,IAAI,EAAAZ,MAChB,KAAAa,UAAY,IAAI,EAAA3R,QAmBhB,KAAA4R,mBAAqB,IAAI,EAAAT,QACzB,KAAAU,mBAAqB,IAAI,EAAAR,WACzB,KAAAS,0BAA4B,IAAI,EAAA9R,QAtHxC,8BAA8BiQ,EAAiB5f,EAAoBhF,EAAsC,IACxG,IAAI0mB,EAAe1mB,EAAe,MACd,MAAhB0mB,IACHA,GAAe,GAOhB,MAAM/Q,EAAW,IAAI,EAAAhB,QACfgS,EAAa,IAAI,EAAAX,WACjBlC,EAAQ,IAAI,EAAAnP,QAClBiQ,EAAOgC,UAAUjR,EAAUgR,EAAY7C,GAEvC,MACMoB,GADQ,IAAI,EAAAO,OAAQoB,kBAAkBF,GACrBG,YACvB5B,EAAS6B,aAAahZ,KAAKiZ,GAAK,KAgBhChiB,EAAKL,MAAMsiB,aAAa,KACvBjiB,EAAK+E,OAAOmd,YAAY,IAAKhC,EAAS5e,WACtCtB,EAAK+E,OAAOmd,YAAY,IAAKvR,EAASrP,WACtCtB,EAAK+E,OAAOmd,YAAY,IAAKpD,EAAMxd,WAC/BogB,GACH1hB,EAAK+E,OAAOod,UAAU,QAAS,KAQlC,8BAA8B7nB,EAAkB0F,GAC/C,MAAM2Q,EAAWrW,EAAOqW,SAASrP,UAC3B4e,EAAW5lB,EAAO4lB,SAAS5e,UAAUC,IAAKrI,GAAMA,GAAK,IAAM6P,KAAKiZ,KAEtEhiB,EAAKL,MAAMsiB,aAAa,KACvBjiB,EAAK+E,OAAOmd,YAAY,IAAKvR,GAC7B3Q,EAAK+E,OAAOmd,YAAY,IAAKhC,KAiB/B,mBAAmBpmB,GAElB,OADAyC,KAAKskB,oBAAoBuB,QAAQtoB,EAAGyC,KAAKwkB,sBAAuBxkB,KAAK0kB,uBAC9D1kB,KAAKskB,oBAGb,yBAAyBjB,GACxB,MAAM9lB,EAAI,IAAI,EAAA6V,QACR0S,EAAO,IAAI,EAAArB,WACXroB,EAAI,IAAI,EAAAgX,QAEd,OADAiQ,EAAOgC,UAAU9nB,EAAGuoB,EAAM1pB,GACnB0pB,EAmBR,OAAOvoB,EAAYJ,EAAYf,EAAYmmB,GAO1C,OANAviB,KAAK8kB,UAAUvkB,IAAI,EAAAwlB,UAAUC,SAAS7oB,EAAEmI,GAAI,EAAAygB,UAAUC,SAAS7oB,EAAEoI,GAAI,EAAAwgB,UAAUC,SAAS7oB,EAAEqI,GAzIrE,OA0IrBxF,KAAK6kB,UAAUoB,aAAajmB,KAAK8kB,WAEjC9kB,KAAK+kB,UAAUnB,KAAKxnB,GAAGynB,eAAetB,GAEtCviB,KAAK2kB,QAAQkB,QAAQtoB,EAAGyC,KAAK6kB,UAAW7kB,KAAK+kB,WACtC/kB,KAAK2kB,QAcb,gBAAgBnjB,EAA0B0kB,EAAqBC,GAC9DnmB,KAAKklB,0BAA0BtB,KAAKuC,GACpCnmB,KAAKklB,0BAA0BkB,YAC/BpmB,KAAKilB,mBAAmBoB,mBAAmBH,EAAYlmB,KAAKklB,2BAE5DllB,KAAKglB,mBAAmBsB,2BAA2BtmB,KAAKilB,oBACxDzjB,EAAS+kB,aAAavmB,KAAKglB,uB,kGC5K7B,SACA,QAiCA,SAEA,SACA,SACA,SAKA,QACA,SAkBA,MAAsBwB,UAAwC,EAAAlI,cAqC7D,YAAYlb,GACX6C,MAAM7C,EAAO,aA3BN,KAAAqjB,SAA8B,IAAI,EAAAC,kBAAkB1mB,MAIpD,KAAA2mB,iBAAmC,IAAI,EAAAC,eAAe5mB,MAqGtD,KAAA6mB,eAAyB,EA7EhC7mB,KAAK8mB,mBA3BN,cACC,OAAQ9mB,KAAKymB,SAAWzmB,KAAKymB,UAAY,IAAI,EAAAC,kBAAkB1mB,MAGhE,sBACC,OAAQA,KAAK2mB,iBAAmB3mB,KAAK2mB,kBAAoB,IAAI,EAAAC,eAAe5mB,MAG7E,4BACC,OAAOA,KAAK+mB,uBAIb,iBACC,OAAQ/mB,KAAK2f,YAAc3f,KAAK2f,aAAe,IAAI,EAAAqH,gBAAgBhnB,MAGpE,aACC,OAAQA,KAAKuf,QAAUvf,KAAKuf,SAAW,IAAI,EAAAC,iBAAiBxf,MAW7D,oBACA,oBAgBA,cACC,OAAO,EAAAtB,UAAUI,MAElB,WACC,OAAQkB,KAAK+T,YAAsCxV,OAEpD,iBACC,OAAO,EAIR,SAAS1B,GACRoJ,MAAMka,SAAStjB,GAGhB,YACC,OAAOmD,KAAKinB,OAKb,QAAQC,GACP,OAAO,KAER,2BAA2BC,EAAWC,GACrC,OAAO,EAER,mBAAmBC,GAClB,OAAQrnB,KAAK+T,YAAoBuT,oBAAoBtnB,KAAKunB,WAAYF,GAEvE,wBAAwBF,EAAWC,GAClC,OAAO,EAER,eAAeI,GACd,OAAQxnB,KAAK+T,YAAoB0T,iBAAiBznB,KAAK1C,MAAOkqB,GAErD,iBAAiBE,GAC1B,OAAOA,EAER,IAAIA,GACH1nB,KAAKunB,WAAavnB,KAAK2nB,iBAAiB3nB,KAAK4nB,6BAA6BF,IAC1E1nB,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAWC,mBACrChoB,KAAKioB,oBAEI,6BAA6BP,GACtC,OAAOA,EAER,oBACC,OAAO1nB,KAAKkoB,eAEb,iBACC,OAAO,EAER,gBACC,OAAOloB,KAAKunB,WAGH,qBAEJ,U,mDAKL,GAJIvnB,KAAKoD,MAAM0Z,mBAAmBC,YACjC1Z,QAAQiE,KAAK,4BAA4BtH,KAAKqI,eAG3CrI,KAAKmY,SAAU,CAClB,GAAKnY,KAAK6mB,cAYT,OAAO,IAAIsB,QAAQ,CAACC,EAASC,KAC5BroB,KAAKsoB,kBAAoBtoB,KAAKsoB,mBAAqB,GACnDtoB,KAAKsoB,kBAAkBhtB,KAAK8sB,KAT7B,GAJApoB,KAAK6mB,eAAgB,QACf7mB,KAAKuoB,sBACXvoB,KAAK6mB,eAAgB,EAEjB7mB,KAAKsoB,kBAAmB,CAC3B,IAAIlQ,EACJ,KAAQA,EAAWpY,KAAKsoB,kBAAkBE,OACzCpQ,SAWW,sB,uDAIhB,eAAe5Z,GACdwB,KAAKkoB,eAAiB1pB,EAgBvB,SAASiF,G,QAYR,GAXKA,GAKJzD,KAAK8F,MAAQrC,EACTzD,KAAKvB,QAAQgqB,gCAAkCzoB,KAAK0oB,eAChC,QAAvB,EAAAjlB,EAAK+E,OAAOmgB,mBAAW,SAAEC,gBAAgB5oB,QANtCA,KAAK8F,QACqB,QAA7B,EAAA9F,KAAK8F,MAAM0C,OAAOmgB,mBAAW,SAAEE,mBAAmB7oB,OAShDA,KAAK8oB,WACR,IAAK,IAAInsB,KAAKqD,KAAK8oB,WAClBnsB,EAAEosB,SAAStlB,GAId,WACC,OAAOzD,KAAK8F,MAEb,aACC,OAAO9F,KAAKyD,KAIb,iBAAiByV,GAChBA,EAAM0P,gBAAgB5oB,MACtBA,KAAKgpB,cAAgB9P,EAEtB,mBACC,OAAOlZ,KAAKgpB,cAEb,mBACC,OAA6B,MAAtBhpB,KAAKgpB,cAEb,Y,MACC,OAAgB,QAAT,EAAAhpB,KAAKyD,YAAI,eAAE4E,aAAc,IAAMrI,KAAKnD,KAE5C,iBAAiB4G,GAChB,OAAO,EAAAqW,WAAWmP,cAAcxlB,EAAMzD,MAIvC,KAAK6hB,GACA7hB,KAAK6nB,gBAAgBqB,eACxBlpB,KAAK6nB,gBAAgBsB,gBAAgBtH,GACrC7hB,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAM6hB,IAKhD,iBACC,OAAO7hB,KAAKopB,YAEb,6BACC,MAAO,GAER,sBAEC,OADoBppB,KAAK+T,YAChBsV,gBAEV,kBACC,OAAOrpB,KAAKqpB,gBAAgBruB,OAAS,EAGtC,mBAMA,iBACC,OAAqC,MAA9BgF,KAAKspB,uBAAiCtpB,KAAKspB,sBAAsB7oB,OAIzE,UACC,OAAOT,KAAKiiB,WAAWC,WAjPzB,eAqPA,+BAAoCsE,EACnC,+BACC,MAAO,oDAER,2BACC,MAAO,gDAER,uBACC,MAAO,+C,8EC5TT,eACA,SAEA,MAAa+C,EAGZ,YAAsB9lB,GAAA,KAAAA,OACtB,cACC,OAAO,EAER,aACC,OAAO,GAIT,SAAS+lB,EAAmCpH,GAC3C,OAAO,cAAoBA,EAApB,c,oBAEC,KAAA9hB,QAAuB,IAAI,EAAAmpB,YAAYzpB,KAAKyD,MACnD,cACC,OAAO,IAIV,SAASimB,EAAkCtH,GAC1C,OAAO,cAAoBA,EAApB,c,oBAEU,KAAAuH,OAAqB,IAAI,EAAAC,WAAW5pB,KAAKyD,MACzD,aACC,OAAO,IA1BV,oBA+BA,MAAaomB,UAAyBL,EAAQD,KAA9C,qBACA,MAAaO,UAAyBJ,EAAOH,KAA7C,qBACA,MAAappB,UAA0BupB,EAAOF,EAAQD,MAAtD,uB,6BCtCA,OAAe,85M,mFCOf,MAAazP,EASZ,iBAAiB/R,EAAwB6R,EAAcC,GACtD,IAAK9R,EACJ,OAAO,KAGR,MAAM4G,EAAqBiL,EAAKhL,MAAMkL,EAAWza,WAAW0qB,OAAQva,GAAMA,EAAExU,OAAS,GAC/EgvB,EAAgBrb,EAAS,GAE/B,IAAIsb,EAAiC,KACrC,GAAIrQ,EAAK,KAAOE,EAAWza,UAGpB,CACN,OAAQ2qB,GACP,KAAKlQ,EAAWoQ,OACfrQ,WAAiBsQ,iBAAiBH,GAClCC,EAAYliB,EAASrH,OACrB,MACD,KAAKoZ,EAAWsQ,QACfvQ,WAAiBsQ,iBAAiBH,GAClCC,EAAYliB,EACZ,MACD,QAICkiB,EAAYliB,EAAStE,KAAKumB,GACtBC,IACHpQ,WAAiBwQ,SAASL,EAAeC,IAS5C,GAAiB,MAAbA,GAAqBtb,EAAS3T,OAAS,EAAG,CAC7C,MAAMsvB,EAAY3b,EAAStQ,MAAM,GAAG6G,KAAK4U,EAAWza,WACpD4qB,EAAYjqB,KAAKia,UAAUgQ,EAAWK,EAAWzQ,GAElD,OAAOoQ,EAhC8B,CACrC,MAAMM,EAAiB3Q,EAAKpL,OAAO,GACnCyb,EAAYjqB,KAAKia,UAAUlS,EAASiV,KAAMuN,EAAgB1Q,GAiC3D,OAAOoQ,EAGR,kBAAkBliB,EAAwB6R,EAAcC,GACvD,IAAK9R,EACJ,OAAO,KAGR,MAAM4G,EAAWiL,EAAKhL,MAAMkL,EAAWza,WAEvC,GAAwB,IAApBsP,EAAS3T,OACZ,OAAO+M,EAASS,OAAOtL,IAAIyR,EAAS,IAC9B,CACN,MAAM6b,EAAY7b,EAAStQ,MAAM,IAAKsQ,EAAS3T,OAAS,GAAK,QAAKuJ,GAAWW,KAAK4U,EAAWza,WACvFoE,EAAOzD,KAAKia,UAAUlS,EAAUyiB,EAAW3Q,GACjD,GAAY,MAARpW,EAAc,CACjB,MAAMgnB,EAAa9b,EAASA,EAAS3T,OAAS,GACxCke,EAAQzV,EAAK+E,OAAOtL,IAAIutB,GAI9B,OAHI5Q,GAAmBX,GACtBW,EAAgBwQ,SAASI,EAAYvR,GAE/BA,EAEP,OAAO,MAKV,qBAAqBwR,EAAuCC,GAC3D,MAAMjqB,EAASV,KAAK4qB,sBAAsBF,EAAgBC,GAC1D,GAAKjqB,EAEE,CACN,MAAMmqB,EAAW7qB,KAAK8qB,mBAAmBJ,EAAgBhqB,GAEzD,IAAIqqB,EAAK,GACT,GAAIF,EAAW,EAAI,EAAG,CACrB,IAAI/vB,EAAI,EACR,MAAMkwB,EAAM,GACZ,KAAOlwB,IAAM+vB,EAAW,GACvBG,EAAI1vB,KAAKwe,EAAWoQ,QAErBa,EAAKC,EAAI9lB,KAAK4U,EAAWza,WAAaya,EAAWza,UAGlD,MAAM4rB,EAAuBvqB,EAC3B2H,YACAuG,MAAMkL,EAAWza,WACjB0qB,OAAQva,GAAMA,EAAExU,OAAS,GACrBkwB,EAAqBP,EACzBtiB,YACAuG,MAAMkL,EAAWza,WACjB0qB,OAAQva,GAAMA,EAAExU,OAAS,GACrBmwB,EAAqB,GAC3B,IAAIC,EAAQ,EACZ,IAAK,IAAIC,KAAqBH,EACxBD,EAAqBG,IACzBD,EAAmB7vB,KAAK+vB,GAEzBD,IAGD,MAAO,GAAGL,IADGI,EAAmBjmB,KAAK4U,EAAWza,aA9BhD,OAAOsrB,EAAgBtiB,YAmCzB,6BACCijB,EACAC,GAEA,MAAMC,EAAWxrB,KAAKyrB,QAAQH,GAAa7b,UACrCic,EAAW1rB,KAAKyrB,QAAQF,GAAa9b,UAErCkc,EAAYnf,KAAKof,IAAIJ,EAASxwB,OAAQ0wB,EAAS1wB,QACrD,IAAI6wB,EAAe,KAEnB,IAAK,IAAI/wB,EAAI,EAAGA,EAAI6wB,EAAW7wB,IAC1B0wB,EAAS1wB,GAAGgxB,eAAiBJ,EAAS5wB,GAAGgxB,gBAC5CD,EAAeL,EAAS1wB,IAG1B,OAAO+wB,EAER,eAAeE,GACd,MAAMN,EAAU,GAChB,IAAI/qB,EAASqrB,EAAWrrB,OACxB,KAAOA,GACN+qB,EAAQnwB,KAAKoF,GACbA,EAASA,EAAOA,OAEjB,OAAO+qB,EAER,0BAA0BM,EAAmCC,GAC5D,IAAInB,EAAW,EACXoB,EAAwCF,EAC5C,MAAMG,EAAUF,EAAKF,cACrB,KAAOG,GAAWA,EAAQH,eAAiBI,GAC1CrB,GAAY,EACZoB,EAAUA,EAAQvrB,OAEnB,OAAIurB,GAAWA,EAAQH,eAAiBI,EAChCrB,GAEC,EAIV,0BAA0B9iB,EAAwC6R,GACjE,MAAMuS,EAAgBvS,EAAKhL,MAAMkL,EAAWza,WACtC2qB,EAAgBmC,EAAc1wB,QAEpC,IAAIuuB,EAiBH,OAAOjiB,EAASM,YAhBhB,OAAQ2hB,GACP,IAAK,KACJ,OAAIjiB,EAASrH,OACLV,KAAKosB,mBAAmBrkB,EAASrH,OAAQyrB,EAAcjnB,KAAK4U,EAAWza,YAEvE,KAGT,IAAK,IACJ,OAAOW,KAAKosB,mBAAmBrkB,EAAUokB,EAAcjnB,KAAK4U,EAAWza,YAExE,QACC,MAAO,CAAC0I,EAASM,YAAauR,GAAM1U,KAAK4U,EAAWza,aAjLzD,eACwB,EAAAA,UAAY,IACZ,EAAAgtB,IAAM,IACN,EAAAjC,QAAUtQ,EAAWuS,IACrB,EAAAnC,OAAS,KACT,EAAAoC,mBAAqB,GAAGxS,EAAWsQ,WACnC,EAAAmC,kBAAoB,GAAGzS,EAAWoQ,UAClC,EAAAsC,oBAAsB,CAAC1S,EAAWza,UAAWya,EAAWuS,M,+ECdhF,SAAYtE,GACX,0CAEA,wCACA,sCACA,+CACA,sCACA,0BAPD,CAAY,EAAAA,aAAA,EAAAA,WAAU,M,2FCAtB,OAEM0E,EAAQ,CAACC,SADf,MACeA,SAAUtZ,QAAA,EAAAA,SACzB,2BAGA,SAEMuZ,EAAgBngB,KAAKiZ,GAAK,IAEhC,MAAa1B,EAKZ,aAAatV,EAAamd,EAAanf,GACtC,OAAIgC,EAAMmd,EACFA,EACGnd,EAAMhC,EACTA,EAEAgC,EAIT,aAAaA,EAAame,EAAkBC,GAG3C,OAAO7sB,KAAK8sB,IAAIre,EAAK,EAAG,EAAGme,EAAUC,GAGtC,WAAWpe,EAAase,EAAiBC,EAAiBJ,EAAkBC,GAK3E,OADWpe,EAAMse,IAHCC,EAAUD,IACTF,EAAWD,GAGNA,EAGzB,0BAA0BK,GACzB,OAAOA,EAAUN,EAElB,0BAA0B7I,GACzB,OAAOA,EAAU6I,EAElB,eAAeO,GACd,OAAOltB,KAAKgkB,mBAAmBkJ,GAEhC,eAAeC,GACd,OAAOntB,KAAKotB,mBAAmBD,GAMhC,YAAYE,GACX,OAAI,UAAgBA,GACZrtB,KAAKstB,WAAWD,GAEhBrtB,KAAKutB,UAAUF,GAIxB,aAAaA,EAAgBG,GAC5B,MAAMC,EAAcJ,EAASG,EACvBE,EAAsBL,EAAS,EAAI7gB,KAAKmhB,KAAKF,GAAejhB,KAAKohB,MAAMH,GAE7E,OADApqB,QAAQC,IAAI,QAASkqB,EAAWH,EAAQI,EAAaC,EAAqBA,EAAsBF,GACzFE,EAAsBF,EAG9B,oBAAoBH,GACnB,OAAO,EAAI7gB,KAAKmhB,KAAc,GAATN,GAGtB,kBAAkBA,GACjB,MAAMloB,EAAM,CACXG,EAAG+nB,EACH9nB,EAAG,QAEJ,OAAOvF,KAAKutB,UAAUpoB,GAGvB,iBAAiB0oB,GAChB,MAIMC,GAJI,QAGCD,EAAGvoB,EAFJ,OAEYuoB,EAAGtoB,GACTiH,KAAKiZ,GACrB,OAAOzlB,KAAK+tB,MAHF,WAGQvhB,KAAKwhB,IAAIF,IAI5B,yBAAyBG,EAAqBC,GAC7C,IACIC,EAAKnuB,KAAKouB,QAAQH,EAAQI,KAC1BC,EAAKtuB,KAAKouB,QAAQF,EAAQG,KAC1BE,EAAKvuB,KAAKouB,QAAQF,EAAQG,IAAMJ,EAAQI,KACxCG,EAAKxuB,KAAKouB,QAAQF,EAAQO,IAAMR,EAAQQ,KAExCve,EAAI1D,KAAKwhB,IAAIO,EAAK,GAAK/hB,KAAKwhB,IAAIO,EAAK,GAAK/hB,KAAKkiB,IAAIP,GAAM3hB,KAAKkiB,IAAIJ,GAAM9hB,KAAKwhB,IAAIQ,EAAK,GAAKhiB,KAAKwhB,IAAIQ,EAAK,GAI7G,OAVQ,QAOA,EAAIhiB,KAAKmiB,MAAMniB,KAAKoiB,KAAK1e,GAAI1D,KAAKoiB,KAAK,EAAI1e,KAMpD,uBAAuB2e,EAAoBC,GAC1C,MAAMC,EAAY,IAAItC,EAAMrZ,QAG5B,IAAK4b,EAFLH,EAASI,YAAYF,GAErB,SAAKC,GACJ,QACA,QACA,QAHD,CAAKA,MAAY,KAKjB,IAAK,IAAIE,IAAQ,CAAC,IAAK,IAAK,KAAM,CACjC,MAAMC,EAAQN,EAASK,GAAsBnsB,QAAQqsB,IAAIL,GACnDM,EAAUF,EAAMpsB,QAAQqjB,YACxBprB,EAASm0B,EAAMn0B,SAAW8zB,EAEhCD,EAASK,GAAwBH,EAAUhsB,QAAQoa,IAAIkS,EAAQxL,eAAe7oB,IAE/E,OAAO6zB,EAGR,qBAAqBzpB,GACpB,OAAOoH,KAAK8iB,IAAI,EAAG9iB,KAAKmhB,KAAKnhB,KAAKlJ,IAAI8B,GAAOoH,KAAKlJ,IAAI,MApHxD,aAGQ,EAAAisB,OAAS,EAAAA,OAuCT,EAAAxB,MAASV,GAAmBA,EAAS7gB,KAAKohB,MAAMP,I,8ECpDxD,eAEA,OACA,OACA,OACA,OACA,QAEA,OACA,SAAgBmC,EAA2CpN,GAC1D,OAAO,cAAoBA,EAApB,c,oBACN,KAAAqN,aAAe,EAAAnN,YAAY1jB,QAAQ,GACnC,KAAA8wB,MAAQ,EAAApN,YAAY1jB,QAAQ,EAAG,CAAC+wB,WAAY,CAACF,cAAc,OAH7D,oBAO4B,EAAAtT,SAGGqT,EAAgB,EAAA1mB,kBACrB,EAAAwS,aAM1B,MAAasU,UAAuB,EAAAC,eACnC,cAAcpsB,GACb,MAAMqsB,EAAcrsB,EAAK+a,GAAGkR,MAAQ,EAAA3lB,UAAY,EAAAgmB,SAC1CC,EAAWvsB,EAAK+a,GAAGiR,aAAe,EAAAQ,WAAaH,EACjDE,GAAYvsB,EAAKN,SAAS2G,OAC7BrG,EAAKN,SAAS2G,KAAOkmB,EACrBvsB,EAAKN,SAAS+sB,aAAc,IAN/B,oB,2FC1BA,SAEA,QAGA,QAEA,QACA,QACA,SAGA,QACA,UAKA,SAAYC,GACX,oCACA,8BACA,qCAHD,CAAY,EAAAA,qBAAA,EAAAA,mBAAkB,KAS9B,MAAaC,UAAgC,EAAAC,sBAA7C,c,oBACS,KAAAC,2BAA+E,IAAIC,IAE3F,kBACC,OAAO,IAAI,EAAAC,eAGZ,yCAIU,sBAAsBrtB,GAC/B,MAAMstB,EAAuBzwB,KAAK0wB,wCAC9BD,GACHA,EAAqB7uB,QACpB,CAAC+uB,EAAiDC,KACjD5wB,KAAK6wB,qBACJ1tB,EACAytB,EACAD,KAMG,qBACPxtB,EACAytB,EACAD,GAEA,IAAIG,EAAwD9wB,KAAKswB,2BAA2BpzB,IAAI0zB,GAC3FE,IACJA,EAAmB,IAAIH,EAAgB3wB,KAAK+wB,iBAC5C/wB,KAAKswB,2BAA2B/vB,IAAIqwB,EAAaE,IAElD3tB,EAAS6tB,iBAAmB7tB,EAAS6tB,kBAAoB,GACzD7tB,EAAS6tB,iBAAiBJ,GAAeE,EAAiB5U,kBAGrD,yBAAyB/Y,G,mDAI9B,MAAMstB,EAAuBzwB,KAAK0wB,wCAC9BD,GACHA,EAAqB7uB,QACpB,CAAO+uB,EAAiDC,IAAoC,EAAD,0CAC1F,GAAI5wB,KAAKixB,cAAe,CACvB,IAAIC,EAAiDlxB,KAAKswB,2BAA2BpzB,IACpF0zB,GAEIM,IACJA,EAAY,IAAIP,EAAgB3wB,KAAK+wB,iBACrC/wB,KAAKswB,2BAA2B/vB,IAAIqwB,EAAaM,IAGlDA,EAAUC,eAAenxB,KAAKoxB,aAC9BF,EAAUG,wBAAwBrxB,KAAKixB,eACvCC,EAAUI,mBAAmBtxB,KAAKuxB,gBAClCL,EAAUM,qBAAqBxxB,KAAKyxB,oBAEpC,MAAMC,EAAkBvuB,EAAS6tB,iBAAiBJ,GAC9Cc,UACGR,EAAUS,iBAAiBD,YAoBjC,iBAAiBvuB,G,mDAEtB,IAAKnD,KAAK4xB,kBACT,OAGD,MAAMC,EAAe,EAAAC,aAAaC,kBAAkB/xB,KAAK+wB,iBACrDc,EAAa72B,OAAS,GACzBgF,KAAK+wB,gBAAgBiB,OAAO9T,MAAM3d,IAAI,gCAEvCP,KAAKmxB,eAAeU,SACd7xB,KAAKiyB,kBAEX,MAAMC,EAAoBlyB,KAAKmyB,iBAAiBj1B,IAAI,EAAAqT,WAAWzF,QACzDsnB,EAAsBpyB,KAAKmyB,iBAAiBj1B,IAAI,EAAAqT,WAAW8hB,UAC7DH,GAAqBE,IACxBjvB,EAASmvB,aAAeJ,EACxB/uB,EAASovB,eAAiBH,EAE1BpyB,KAAKwyB,aAAarvB,EAASsvB,UAE3BtvB,EAAS+sB,aAAc,GAGxB,MAAM9sB,EAAQpD,KAAK+wB,gBAAgB3tB,MAC/BpD,KAAK0yB,0BAMRtvB,EAAMuvB,oBAAoBC,iCACzBzvB,EAASkO,KACTlO,EAASsvB,UAGVrvB,EAAMuvB,oBAAoBE,oCAAoC1vB,EAASkO,MASnElO,EAA+C6tB,yBAC7ChxB,KAAK8yB,yBAAyB3vB,OAcxB,kB,mDACbnD,KAAKmyB,iBAAmB,IAAI5B,IAC5BvwB,KAAK+yB,OAAS,IAAIxC,IAClB,IAAK,IAAIyC,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMC,EAAWlzB,KAAKmzB,iCAAiCH,GACnDE,GACHlzB,KAAK+yB,OAAOxyB,IAAIyyB,EAAaE,EAAStkB,MAAM,OAG1C5O,KAAKoxB,YAAYp2B,OAAS,UAEvBgF,KAAKozB,sBAAsBpzB,KAAKoxB,aAEtCpxB,KAAKqzB,gBAGN,IAAK,IAAIL,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMK,EAAQtzB,KAAK+yB,OAAO71B,IAAI81B,GAC1BM,GACHtzB,KAAKmyB,iBAAiB5xB,IAAIyyB,EAAaM,EAAMpuB,KAAK,WAKrD,wCACC,MAAO,GAGR,qBACCquB,EACA9qB,EACA+qB,G,MAEA,MAAMtZ,EAAQqZ,EAAY1yB,GAAG6G,OAAO+rB,YAAYD,GAC1CE,EAAYH,EAAYzmB,mBAAmB0mB,GAC3CG,EAAkB3zB,KAAK2zB,gBAAgBH,GAE7C,IAAII,EAAyB,KAC7B,GAAI1Z,EACH0Z,EAAU,EAAAtrB,UAAUjD,QAAQquB,QAE5B,GAAIC,EAAgBE,yBAA0B,CAC7C,MAAMC,EAAmBP,EAAY1yB,GAAG6G,OAAOqsB,sCAAsCP,GACrF,GAAIM,EAAkB,CACrB,MAAME,EAAUF,EAAiBv1B,KAC3B01B,EAAgC,QAAvB,EAAGj0B,KAAKk0B,uBAAe,eAAEC,eACvCZ,EACAS,EACAR,EACA/qB,GAEGwrB,IACHL,EAAUK,QAGN,CACN,MAAMG,EAA0BT,EAAgBU,UAC5CD,IACHR,EAAUQ,GAWb,GAAIR,EAAS,CACZ,MAAMU,EAASX,EAAgBW,SACzBC,EAASZ,EAAgBY,SACzBC,EAAeb,EAAgBa,eACjCA,GACH/rB,EAA8BwE,eAAesmB,EAAa,CAAC,OAAOiB,MAEnE/rB,EAA8BwE,eAAesmB,EAAa,CAAC,GAAGe,IAASV,IAAUW,MAC7EC,GACH/rB,EAA8BwE,eAAesmB,EAAa,CAAC,YAK9D,sBAAsBA,EAA2B9qB,G,MAEhD,MAAMuqB,EAAcvqB,EAA8BgsB,oBAC5CC,EAA6C,QAAlC,EAAG10B,KAAK20B,cAAc3B,UAAY,eAAE0B,cACrD,GAAIA,EAEH,IAAK,IAAIlB,KAAckB,EACtB10B,KAAK40B,qBAAqBrB,EAAa9qB,EAA+B+qB,GAIzE,yBACCqB,EACApsB,G,MAIA,MAAMurB,EAAUa,EAAeb,UACzBJ,EAA8B,QAAvB,EAAG5zB,KAAKk0B,uBAAe,eAAEC,eACrCU,EACAb,EACAa,EAAehhB,eACfpL,GAEKqsB,EAAWD,EAAezsB,YAAYysB,EAAe1sB,aAC3DM,EAA8BwE,eAAe4nB,EAAgB,CAAC,GAAGb,KAAWc,OAAclB,MAkC3F,oBAAoBmB,EAAsB/B,EAAyB8B,GAC9D9B,GAAe,EAAAziB,WAAW8hB,UAC7B0C,EAAWz5B,KAAK,QAAQw5B,oBAG1B,kBAAkBC,EAAsB/B,EAAyB8B,GAC5D9B,GAAe,EAAAziB,WAAW8hB,UAC7B0C,EAAWz5B,KAAK,QAAQw5B,kBAI1B,uBAAuBE,EAA6BvsB,G,MAMnD,MAAMssB,EAAa,GACb/B,EAAcvqB,EAA8BgsB,oBAC5CE,EAAgB30B,KAAK20B,cAAc3B,GACzC,IAAK2B,EACJ,OAED,MAAMM,EAAeN,EAAcM,eAE7BC,EAAkE,IAAI3E,IAMtE4E,EAAuD,IAAI5E,IAMjE,IAAI6E,EACAroB,EACJ,IAAK,IAAI5E,KAAe6sB,EAAan0B,GAAGC,QAAQu0B,oBAAqB,CACpE,MAAMP,EAAWE,EAAa5sB,YAAYD,GACpCmtB,EAAsB7sB,EAA8BgsB,oBAE1D,OAAQtsB,GACP,IAAK,OACJitB,EAAa,IAAI,EAAAG,oBAAoBP,EAAc,EAAAnxB,oBAAoB/E,MAAOqJ,GAC1EmtB,GACH,EAAAE,SAASC,uBAAuBP,EAA4BI,EAAqBF,GAGlFroB,EAAY,SAAS+nB,OAAc3sB,IACnC,IAAK,IAAIutB,KAAcT,EACtB,EAAAO,SAASC,uBAAuBP,EAA4BQ,EAAYN,GACxE,EAAAI,SAASC,uBAAuBN,EAA2BO,EAAY3oB,GAIxEgoB,EAAWz5B,KAAKyR,GAChB/M,KAAK21B,8BACL,MACD,IAAK,eACJ31B,KAAK41B,oBAAoBb,EAAY/B,EAAa8B,GAClD,MAED,IAAK,aACJ90B,KAAK61B,kBAAkBd,EAAY/B,EAAa8B,GAChDM,EAAa,IAAI,EAAAG,oBAAoBP,EAAc,EAAAnxB,oBAAoBI,KAAMkE,GACzEmtB,GACH,EAAAE,SAASC,uBAAuBP,EAA4BI,EAAqBF,GAElF,IAAK,IAAIM,KAAcT,EACtB,EAAAO,SAASC,uBAAuBP,EAA4BQ,EAAYN,GAGzEp1B,KAAK81B,2BACL,MAED,IAAK,gBACA9C,GAAe,EAAAziB,WAAW8hB,UAC7B0C,EAAWz5B,KAAK,QAAQw5B,qBAEzB,MACD,QAUqB,QAApB,EAAA90B,KAAKk0B,uBAAe,SAAE6B,oBACrBf,EACA7sB,EACAM,IAyBJysB,EAA2BtzB,QAAQ,CAACo0B,EAAahD,KAChDvqB,EAA8ByE,gBAAgB8nB,EAAcgB,EAAahD,KAE1EmC,EAA0BvzB,QAAQ,CAACmzB,EAAY/B,KAC9CvqB,EAA8BwE,eAAe+nB,EAAcD,EAAY/B,KAMxEvqB,EAA8BwE,eAAe+nB,EAAcD,IA/Z7D,6B,iGCtBA,MAAah1B,EAIZ,YAAsB0D,EAAoBwyB,GAApB,KAAAxyB,OAHd,KAAAyyB,WAA4B,GAInCl2B,KAAKm2B,WAAa,IAAIF,EAAgBj2B,KAAKyD,MAG5C,gBACC,OAAOzD,KAAKm2B,WAGb,oBACC,OAAO,IAAIhO,QAAQ,CAACC,EAASC,KAC5BroB,KAAKk2B,WAAW56B,KAAK8sB,GACrBpoB,KAAKyD,KAAKL,MAAM2Y,gBAAgBsO,SAASrqB,KAAKyD,MAM9C2yB,WAAWp2B,KAAKq2B,0BAA0Bx4B,KAAKmC,MAAO,KAKxD,4B,QACC,GAA2B,QAA3B,EAAmB,QAAnB,EAAIA,KAAKyD,KAAKvD,aAAK,eAAEypB,cAAM,eAAElpB,OAAQ,CACpC,MAAMgH,EAAc,EACpBzH,KAAKs2B,wBAAwB7uB,GAAa8uB,KAAMx0B,IAC/C/B,KAAKyD,KAAKyU,qBACNnW,EACH/B,KAAKw2B,kBAAkBz0B,GAEvB/B,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,wBAIzBP,KAAKyD,KAAK0U,UACbnY,KAAKyD,KAAK3D,qBAAqBiC,UAAU00B,eACzCz2B,KAAKyD,KAAKsY,gBAAgB2a,aAE1B12B,KAAKw2B,oBAKF,wBAAwB/uB,G,mDAC7B,MAAMK,EAAa9H,KAAKyD,KAAK5C,GAAG6G,OAAOwS,MAAMzS,GAC7C,GAAIK,EAAY,CAGf,OAFAA,EAAW6uB,mBAAmB/S,KAAK5jB,KAAKyD,KAAKkzB,0BACrB7uB,EAAWhI,qBAAqB6Z,oBAKxD,OAFA3Z,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,SAASkH,cACpCzH,KAAKw2B,oBACE,QAGT,kBAAkBz0B,GAKjB,IAAIqW,EACJ,MAAMwe,EAAY,GAClB,KAAQxe,EAAWpY,KAAKk2B,WAAW1N,OAClCoO,EAAUt7B,KAAK8c,GAQhB,IALKrW,IACJA,EAAY/B,KAAKyD,KAAK3D,qBAAqBiC,UAAUgB,SAI9CqV,EAAWwe,EAAUpO,OAC5BpQ,EAASrW,GAEV/B,KAAKyD,KAAKL,MAAM2Y,gBAAgBuF,YAAYthB,KAAKyD,OA9EnD,6BAkFA,wCAA6C1D,K,8ECvF7C,aAEM0sB,EAAQ,CAACoK,QADf,KACeA,QAASzjB,QAAA,EAAAA,SAElB0jB,EAAsC,CAC3CC,EAAG,WACHC,EAAG,SACHC,GAAI,SAGL,sBAaC,kBAAkBp6B,GACjB,OAAOi6B,EAAgBj6B,IAASA,EAGjC,+BAA+B0F,GAC9B,MAAM20B,EAAqC,GAC3C,IAAIC,EAAgB,EACpB,MAAMvzB,EAAU,GACVkB,EAAS,GAEf,IAAIhK,EAAI,EACR,KAAOA,EAAIyH,EAAMvH,QAAQ,CAExB,MAAMsC,EAAQiF,EAAMzH,GACdsH,EAAQ80B,EAAe55B,GAChB,MAAT8E,EACHwB,EAAQtI,KAAK8G,IAEb0C,EAAOxJ,KAAKgC,GACZsG,EAAQtI,KAAK67B,GACbD,EAAe55B,GAAS65B,EACxBA,GAAiB,GAGlBr8B,IAGD,MAAO,CACN8I,UACAkB,UAIF,qBAAqB0F,GACpB,OAAQA,GACP,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAO,IAAIiiB,EAAMoK,QAAQ,EAAG,GAC7B,KAAK,EACJ,OAAO,IAAIpK,EAAMrZ,QAAQ,EAAG,EAAG,GAChC,QACC,KAAM,QAAQ5I,4B,8ECvDlB,MAAsB4sB,EAKrB,YAAsBtxB,GAAA,KAAAA,QAKtB,SAASrC,GACRzD,KAAK8F,MAAQrC,EAEd,OACC,OAAOzD,KAAK8F,MAGb,QACC,IAAImb,EACJ,MAAMoW,EAAmB,IAAUr3B,KAAK+T,YAKxC,OAJAsjB,EAAiBtO,SAAS/oB,KAAKyD,QACG,OAA7Bwd,EAAUjhB,KAAKihB,YACnBoW,EAAiBnW,YAAYD,GAEvBoW,EAER,gBAGA,YAAYpW,GAEXjhB,KAAKy2B,eACLz2B,KAAKs3B,SAAWrW,EAEhBjhB,KAAKu3B,oBAEN,cACC,OAAwB,MAAjBv3B,KAAKs3B,SAUb,UACC,OAAOt3B,KAAKs3B,SAEH,qBACH,eACN,OAAOt3B,KAAKs3B,SAEN,sBACN,OAAOt3B,KAAKs3B,SAWb,QACC,MAAO,IAnET,mBAuEA,8BAAmCF,K,8ECjFnC,eACA,OACA,OACA,QACA,SAAgBI,EAA+CpV,GAC9D,OAAO,cAAoBA,EAApB,c,oBACN,KAAAqV,SAAW,EAAAnV,YAAY1jB,QAAQ,KAFjC,wBAM8B,EAAAud,SAGKqb,EAAoB,EAAA1uB,kBACzB,EAAAwS,aAM9B,MAAaoc,UAA2B,EAAA7H,eACvC,cAAcpsB,GACb,MAAMk0B,EAAel0B,EAAK+a,GAAGiZ,SACzBE,GAAgBl0B,EAAKN,SAASs0B,WACjCh0B,EAAKN,SAASs0B,SAAWE,EACzBl0B,EAAKN,SAAS+sB,aAAc,IAL/B,wB,2FCpBA,OAEA,SACA,QACA,SAQA,OACA,SAAgB0H,EAAiDxV,GAChE,OAAO,cAAoBA,EAApB,c,oBACN,KAAAyV,QAAU,EAAAvV,YAAY1jB,QAAQ,EAAG,EAAAk5B,oBAAoBC,IACrD,KAAA/yB,IAAM,EAAAsd,YAAYrjB,cACjB,EAAA+4B,YAAYC,kBAAkBC,GAC9B,EAAAC,oBAAoBJ,EAAsB,cAL7C,0BASiC,EAAA5b,SAIIyb,EAAsB,EAAA9uB,kBAClB,EAAAwS,aAKzC,MAAayc,UAA6B,EAAAK,yBACzC,YAAY30B,EAAyB40B,GACpCpyB,MAAMxC,EAAM40B,GAEb,kBACCr4B,KAAKs4B,UAAUt4B,KAAKyD,KAAKxF,EAAE45B,QAAS73B,KAAKyD,KAAKxF,EAAE+G,KAE3C,S,mDACLhF,KAAKu4B,QAAQv4B,KAAKyD,KAAKN,SAAU,MAAOnD,KAAKyD,KAAKxF,EAAE45B,QAAS73B,KAAKyD,KAAKxF,EAAE+G,QAE1E,cAAoBvB,G,mDACnBA,EAAK+0B,uBAAuBC,aAX9B,0B,2FChCA,OAEA,SACA,QACA,SAQA,OAGA,SAAgBC,EAAsDtW,GACrE,OAAO,cAAoBA,EAApB,c,oBACN,KAAAuW,cAAgB,EAAArW,YAAY1jB,QAAQ,EAAG,EAAAk5B,oBAAoBc,IAC3D,KAAAC,UAAY,EAAAvW,YAAYrjB,cACvB,EAAA+4B,YAAYC,kBAAkBC,GAC9B,EAAAC,oBAAoBS,EAA2B,oBALlD,+BASmC,EAAAzc,SAIOuc,EAA2B,EAAA5vB,kBACvB,EAAAwS,aAK9C,MAAasd,UAAkC,EAAAR,yBAC9C,YAAY30B,EAA8B40B,GACzCpyB,MAAMxC,EAAM40B,GAEb,kBACCr4B,KAAKs4B,UAAUt4B,KAAKyD,KAAKxF,EAAE06B,cAAe34B,KAAKyD,KAAKxF,EAAE46B,WAEjD,S,mDACL74B,KAAKu4B,QAAQv4B,KAAKyD,KAAKN,SAAU,WAAYnD,KAAKyD,KAAKxF,EAAE06B,cAAe34B,KAAKyD,KAAKxF,EAAE46B,cAErF,cAAoBp1B,G,mDACnBA,EAAKq1B,6BAA6BL,aAXpC,+B,uFClCA,iBACC,8BAAoCzzB,EAAkBpH,EAAQm7B,GAC7C/zB,EAAIg0B,IAAIp7B,GAEvBoH,EAAI9H,IAAIU,GAAMtC,KAAKy9B,GAEnB/zB,EAAIzE,IAAI3C,EAAK,CAACm7B,IAGhB,iCAAuC/zB,EAAkBpH,EAAQm7B,GAChD/zB,EAAIg0B,IAAIp7B,GAEvBoH,EAAI9H,IAAIU,GAAMq7B,QAAQF,GAEtB/zB,EAAIzE,IAAI3C,EAAK,CAACm7B,IAGhB,gCAAsC/zB,EAAkBpH,EAAQs7B,GAE/D,GADgBl0B,EAAIg0B,IAAIp7B,GACT,CACd,IAAI2E,EAAayC,EAAI9H,IAAIU,GACzB,IAAK,IAAIgS,KAAWspB,EACnB32B,EAAMjH,KAAKsU,QAGZ5K,EAAIzE,IAAI3C,EAAKs7B,M,8ECzBH,EAAAC,aAAe,CAC3BC,MAAO,SACP5c,QAAS,WACT6c,SAAU,aACVC,OAAQ,UACRC,KAAM,QAEM,EAAAC,aAAe,CAC3BC,MAAO,SACPC,SAAU,WACVH,KAAM,QAEM,EAAAI,eAAiB,CAC7BL,OAAQ,UACRC,KAAM,QAEM,EAAAK,YAAc,CAC1B/6B,MAAO,QACPg7B,WAAY,aACZC,SAAU,WACVT,SAAU,WACVU,QAAS,UACTC,MAAO,QACPC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,SAAU,YAEE,EAAAC,aAAe,CAC3BZ,SAAU,WACV/2B,KAAM,SACNwG,OAAQ,SACRoxB,KAAM,QACNC,OAAQ,UACRH,SAAU,aAEE,EAAAI,aAAe,CAC3Bf,SAAU,WACVgB,UAAW,YACXx0B,UAAW,aACX4zB,SAAU,WACVL,MAAO,SACPF,KAAM,OACNoB,SAAU,YACVC,WAAY,aACZC,OAAQ,UAEI,EAAAC,cAAgB,CAC5BC,KAAM,W,8ECjDP,cACA,SAEA,SAEA,QAEA,QACA,QACA,OAGMp7B,EAAsB,CADL,iEAKvB,IAFA,IACInF,EAAO,IAAIwgC,YADJ,IAEFlgC,EAAI,EAAGA,EAFL,GAEeA,IACzBN,EAAKM,GAAK,MAEX,MAAMmgC,EAAqB,IAAI,EAAAC,YAAY1gC,EALhC,GAK4C,EAAG,EAAA2gC,gBAAiB,EAAAC,eAE3E,MAAaC,UAAiD,EAAAx7B,UAmB7D,YAAYuD,GACX6C,MAAM7C,EAAO,eAnBd,KAAAtD,qBAAmE,IAAI,EAAAC,yBACtEC,KACA,EAAAs7B,kBAEe,KAAAp7B,MAA0B,IAAI,EAAA4pB,iBAAiB9pB,MAO/D,sBACC,OAAO,EAAAI,YAAYm7B,IAEpB,+BACC,OAAO57B,EAOR,uBAOCK,KAAKa,GAAGC,QAAQC,qBAGjB,cAAclE,GACb,OAAOoJ,MAAMoB,cAAcxK,GAG5B,YAAY2+B,GAEXA,EAAQ3+B,KAAOmD,KAAKqI,YACpBrI,KAAKmB,cAAcq6B,GAEpB,gBACCx7B,KAAKmB,cAAc85B,IA3CrB,iBA4FA,iCAAsCI,K,2FCjHtC,4BACA,4BACA,4BACA,OACA,QAIA,SAEA,SAyBA,MAAaI,UAAgC,EAAA57B,UAC5C,YAA+CtB,GAC9C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAiDhjB,GAChD,OAAO0H,MAAMwb,cAAcljB,IAR7B,4BAkBA,8BAWC,YAAoBkF,EAA+BktB,GAA/B,KAAAltB,OATZ,KAAAi4B,iBAAsD,IAAI,EAAAC,uBAC1D,KAAAC,mBAA6B,EAK7B,KAAAC,qBAAsE,IAAItL,IAKjFvwB,KAAK87B,WAAa,IAAInL,EAAgB3wB,KAAKyD,MA+B5C,8BAA8BywB,IACVl0B,KAAK07B,iBAAmB17B,KAAK07B,iBAAiBhsB,KAAO,QACzDwkB,EAAkBA,EAAgBxkB,KAAO,QAGvD1P,KAAK07B,iBAAmBxH,EACxBl0B,KAAKwH,qCACLxH,KAAK87B,WAAWC,iBAGlB,gBACC,OAAO/7B,KAAK87B,WAKb,sBACC,OAAO97B,KAAK07B,iBAOb,kBAAkBM,GACjBh8B,KAAK87B,WAAWG,kBAAkBD,GAEnC,mBAAmBhH,GAClBh1B,KAAK87B,WAAWI,mBAAmBlH,GAEpC,0BACC,OAAOh1B,KAAK87B,WAAWK,0BAGxB,YACC,MAAMC,EAAUp8B,KAAKyD,KAAK4d,YAAY,WAChCgb,EAASr8B,KAAKyD,KAAK4d,YAAY,UAErC+a,EAAQn1B,QAAQq1B,aAAa,IAAI,EAAAzF,SAAS,IAAK,IAC/CwF,EAAOp1B,QAAQq1B,aAAa,IAAI,EAAAzF,QAAQ,IAAK,IAkB9C,yBAAyB0F,GAAY,GACpCv8B,KAAK47B,kBAAoBW,EAE1B,mCAAmCC,GAClCx8B,KAAKy8B,2BACLz8B,KAAKyD,KAAKuU,UAAUwkB,GAErB,mBACC,OAAOx8B,KAAK47B,kBAgBP,e,mDAKL57B,KAAK08B,0BACL18B,KAAKy8B,0BAAyB,MA0HzB,wB,mDACL,GAAIz8B,KAAK87B,WACR,IAAK,IAAIa,KAAgB38B,KAAK87B,WAAWc,sBAClCD,EAAaE,kBAAkB78B,KAAKyD,SA4C7C,0BACC,MAAMq5B,EAAsC98B,KAAKyD,KAAK+E,OAAOu0B,YACvDH,EAAgB58B,KAAK87B,WAAWc,gBAChCI,EAAwBJ,EAAc53B,IAAKrI,GAAMA,EAAEE,MAEnDogC,EAA2B,UAAkBD,EAAuBF,GACpEI,EAA8B,UAAkBJ,EAA2BE,GAE3EG,EAA6C,GAG7CC,EAAsBp9B,KAAKyD,KAAK+E,OAAO60B,MACvCC,EAAwC,UAC7CL,EACAG,GAED,GAAIE,EAAsCtiC,OAAS,EAAG,CACrD,MAAMuiC,EAAgB,GAAGv9B,KAAKyD,KAAK4E,uDAAuDi1B,EAAsCp4B,KAC/H,kCAED7B,QAAQiE,KAAKi2B,GACbv9B,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAIg9B,GAG5BL,EAA4Bt7B,QAAS6oB,IAGpC,MAAMvR,EAAQlZ,KAAKyD,KAAK+E,OAAOtL,IAAIutB,GACnC,GAAIvR,EAAO,CACV,MAAMskB,EAAiB,EAAAC,qBAAqBC,eAAexkB,GAC3D,GAAIskB,EAAeG,SAAU,CAC5B,MAAMC,EAAcJ,EAAehjC,OACnCwF,KAAK67B,qBAAqBt7B,IAAI2Y,EAAMrc,KAAM+gC,IAI5CT,EAAsBU,gBAAkBV,EAAsBU,iBAAmB,GACjFV,EAAsBU,gBAAgBviC,KAAKmvB,KAI5C,IAAK,IAAIkS,KAAgBC,EACxB,GAAIK,EAAyB3zB,QAAQqzB,EAAa9/B,OAAS,EAAG,CAK7D,MAAM4B,EAAU,UAAak+B,EAAamB,cAAe,CAACC,OAAO,EAAMC,MAAM,IAQ7Eb,EAAsBc,OAASd,EAAsBc,QAAU,GAC/Dd,EAAsBc,OAAO3iC,KAAK,CACjCuB,KAAM8/B,EAAa9/B,KACnB0B,KAAMo+B,EAAap+B,KACnBC,WAAYm+B,EAAa/pB,cACzBnU,QAASA,IAmBZuB,KAAKyD,KAAK+E,OAAO01B,cAAcf,M,8EChbjC,eAEA,SAIA,QAGA,SACA,QAIMgB,EAAsD,CAC3D/pB,SAAU,oBAGX,MAAaunB,UAA+B,EAAAyC,sBAoB3C,oBACCpJ,EACA7sB,EACAM,G,MAOA,MAAMqrB,EAAmBkB,EAAan0B,GAAGC,QAAQu9B,uCAAuCl2B,GACxF,IAAK2rB,EACJ,OAGD,MAAMgB,EAAWE,EAAa5sB,YAAYD,GACpC6rB,EAAUF,EAAiBv1B,KAC3B62B,EAAa,IAAI,EAAAkJ,oBAAoBtJ,EAAchB,EAASc,GAGlErsB,EAA8ByE,gBAAgB8nB,EAAc,CAACI,IAE7D,MAAMlE,EAAsC,QAA7B,EAAG8D,EAAazxB,qBAAa,eAAEgE,qBAAqB2pB,UACnE,IAAKA,EACJ,OAED,MAAMyD,EAAgBzD,EAAUyD,cAAclsB,EAA8BgsB,qBAC5E,IAAKE,EACJ,OAED,MAAMM,EAAeN,EAAcM,eAE7BloB,EAAY,GAAG+nB,OAAcd,KAAW7rB,KAC9C,IAAK,IAAIutB,KAAcT,EAGtBxsB,EAA8ByE,gBAAgB8nB,EAAc,CAACI,GAAaM,GAC1EjtB,EAA8BwE,eAAe+nB,EAAc,CAACjoB,GAAY2oB,GAE9C,GAAvBT,EAAaj6B,QAEhByN,EAA8BwE,eAAe+nB,EAAc,CAACjoB,IAI9D,+BAA+BwxB,GAC9B,OAAOJ,EAAgCI,GAExC,wBAAwBA,GACvB,OAAO5C,EAAuBvH,wBAAwBmK,GAKvD,eACC96B,EACAuwB,EACA3hB,EACA5J,GAEA,OAAOkzB,EAAuBxH,eAAe1wB,EAAMuwB,EAAS3hB,EAAa5J,GAG1E,sBACChF,EACAuwB,EACA3hB,EACA5J,G,MAEIkzB,EAAuB6C,uBAAuBl1B,QAAQ+I,GAAe,GACxE5J,EAA8ByE,gBAC7BzJ,EACA,CAAC,IAAI,EAAAg7B,sBAAsBh7B,EAAMuwB,EAAS3hB,IAC1C,EAAA9B,WAAWzF,QAcb,MAAMkoB,EAAcvqB,EAA8BgsB,oBAClD,OAAQzB,GACP,KAAK,EAAAziB,WAAWzF,OACf,OAAOuH,EAER,KAAK,EAAA9B,WAAW8hB,SAAU,CAEzB,KAAM5uB,aAAgB,EAAAi7B,iBACrB,OAGD,MAAM5J,EAAW,WAAarxB,EAAK2E,YAAY3E,EAAK0E,aAC9Cw2B,EAAqB,IAAI,EAAAL,oBAAoB76B,EAAMuwB,EAASc,GAE5DI,EAAqE,IAAI3E,IAE/E2E,EAA2B30B,IAAI,EAAAgQ,WAAW8hB,SAAU,IAKpD,MAAM8C,EAAuD,IAAI5E,IAEjE4E,EAA0B50B,IAAI,EAAAgQ,WAAW8hB,SAAU,IACnD,EAAAmD,SAASC,uBAAuBP,EAA4BlC,EAAa2L,GAEzE,MAAMC,EAAwB,GAAG9J,OAAcd,KAAW3hB,KAEpDsiB,EAAkC,QAArB,EAAGlxB,EAAKF,qBAAa,eAAEgE,qBAAqB2pB,UAAUyD,cAAc3B,GACvF,GAAI2B,EAAe,CAClB,MAAMM,EAAeN,EAAcM,eACnC,IAAK,IAAIS,KAAcT,EACtB,EAAAO,SAASC,uBAAuBP,EAA4BQ,EAAYiJ,GACxE,EAAAnJ,SAASC,uBAAuBN,EAA2BO,EAAYkJ,GAExE1J,EAA2BtzB,QAAQ,CAACo0B,EAAahD,KAChDvqB,EAA8ByE,gBAAgBzJ,EAAMuyB,EAAahD,KAElEmC,EAA0BvzB,QAAQ,CAACmzB,EAAY/B,KAC9CvqB,EAA8BwE,eAAexJ,EAAMsxB,EAAY/B,KAIjE,OAAO8B,IA4BV,sBACCrxB,EACAuwB,EACA3hB,EACA5J,GAEA,OAAOkzB,EAAuBxH,eAAe1wB,EAAMuwB,EAAS3hB,EAAa5J,IAxL3E,2BACQ,EAAA+1B,uBAAyB,CAC/B,WACA,QACA,SACA,KACA,MACA,eACA,eACA,eACA,eACA,YACA,cAGM,EAAAK,QAAU,CAChBhR,GACC,kO,8ECnCH,cAGA,QAMA,gCAgBC,YAAoBpqB,GAAA,KAAAA,OAfZ,KAAAq7B,qBAAwC18B,GACxC,KAAKA,IAEL,KAAA28B,sBAAyC38B,GAChC,GAATA,EAAa,MAAQ,MAAMA,IAG3B,KAAA48B,+BAAkE,KACzE,MAAMzgC,EAAOyB,KAAKqM,+BAAiC,EAAAxI,oBAAoB/E,MACvE,MAAO,CAACP,EAAMA,IAEP,KAAA0gC,gCAAmE,IACnE,CAACj/B,KAAKg/B,iCAAiC,IAyBvC,KAAAE,oCAAsCl/B,KAAKm/B,6BAA6BthC,KAAKmC,MAC7E,KAAA2e,cAAwB,EArBhC,wBAAwBygB,GACvBp/B,KAAK8+B,qBAAuBM,EAE7B,yBAAyBA,GACxBp/B,KAAK++B,sBAAwBK,EAK9B,kCAAkCA,GACjCp/B,KAAKg/B,+BAAiCI,EAEvC,mCAAmCA,GAClCp/B,KAAKi/B,gCAAkCG,EAGxC,YAAYh9B,GACX,OAAOpC,KAAK++B,sBAAsB38B,GAKnC,kBACKpC,KAAK2e,aACRtb,QAAQiE,KAAK,sBAAuBtH,KAAKyD,OAG1CzD,KAAK2e,cAAe,EAEpB3e,KAAKyD,KAAK5C,GAAG6G,OAAOob,sBACnB,gCACA9iB,KAAKk/B,qCAENl/B,KAAKyD,KAAK+E,OAAO62B,uBAChB,gCACAr/B,KAAKk/B,qCAENl/B,KAAKyD,KAAK+E,OAAO82B,4BAA4Bt/B,KAAKk/B,qCAClDl/B,KAAKyD,KAAK4U,oBAAoB,gCAAiCrY,KAAKk/B,sCAGrE,6BAA6BK,GACvBv/B,KAAKyD,KAAK+7B,UAAUC,oBAAuBz/B,KAAK0/B,8BACpD1/B,KAAK2/B,0BACL3/B,KAAKyD,KAAKyU,qBACVlY,KAAK4/B,qCAIC,oCACP,IAAK,IAAIC,KAAa7/B,KAAKyD,KAAKq8B,uBAAwB,CACvD,MAAMC,EAAUF,EACZE,EAAQj0B,2BACXi0B,EAAQj0B,0BAA0BqzB,6BAA6Bn/B,KAAKyD,OAWvE,0BACC,MACMu8B,EAAuBhgC,KAAKg/B,iCAC5BiB,EAAwBjgC,KAAKi/B,kCAE7BiB,EAA0BF,EAAqBh7B,IAAI,CAACzG,EAA2BzD,IAC7E,IAAI,EAAAqlC,0BAA0BngC,KAAK8+B,qBAAqBhkC,GAAIyD,IAE9D6hC,EAAgBH,EAAsBj7B,IAAI,CAACzG,EAA2BzD,IACpE,IAAI,EAAAqlC,0BAA0BngC,KAAK++B,sBAAsBjkC,GAAIyD,IAGrEyB,KAAKyD,KAAK5C,GAAG6G,OAAO24B,kCAAkCH,GACtDlgC,KAAKyD,KAAK5C,GAAGC,QAAQqG,mCAAmCi5B,GAZtC,GAalBpgC,KAAKyD,KAAKmD,wBAAwB81B,0BAGzB,4BACT,MAAM4D,EAAsBtgC,KAAKyD,KAAK5C,GAAG6G,OAAOmF,8BAA8B7H,IAAKrI,GAAMA,EAAE4B,MACrFgiC,EAAuBvgC,KAAKyD,KAAK5C,GAAGC,QAAQmH,+BAA+BjD,IAAKrI,GAAMA,EAAE4B,MACxFyhC,EAAuBhgC,KAAKg/B,iCAC5BiB,EAAwBjgC,KAAKi/B,kCAEnC,GAAIe,EAAqBhlC,QAAUslC,EAAoBtlC,OACtD,OAAO,EAER,GAAIilC,EAAsBjlC,QAAUulC,EAAqBvlC,OACxD,OAAO,EAGR,IAAK,IAAIF,EAAI,EAAGA,EAAIwlC,EAAoBtlC,OAAQF,IAC/C,GAAIwlC,EAAoBxlC,IAAMklC,EAAqBllC,GAClD,OAAO,EAGT,IAAK,IAAIA,EAAI,EAAGA,EAAIylC,EAAqBvlC,OAAQF,IAChD,GAAIylC,EAAqBzlC,IAAMmlC,EAAsBnlC,GACpD,OAAO,EAIT,OAAO,EAUR,8BACC,MAAMiM,EAAc/G,KAAKyD,KAAK5C,GAAGkG,YAAY2F,oBAC7C,GAAI3F,EAAa,CAChB,MAAMy5B,EAAmBz5B,EAAY,GACrC,GAAIy5B,EACH,OAAOxgC,KAAKygC,gCAAgCD,IAI/C,gCAAgC54B,GAC/B,MAAMG,EAAWH,EAAWG,SACtBG,EAAeN,EAAWM,aAEhC,OADmCH,EAASlH,GAAGC,QAAQmH,+BAA+BC,GACpD3J,Q,2FC3JpC,SACA,OAwGA,SAEA,SACA,QACA,QAKMmiC,EAAW,CAChB,CAACC,UAAA,EAAAA,WACD,CAACC,sBAAA,EAAAA,uBACD,CAACC,sBAAA,EAAAA,uBACD,CAACC,iCAAA,EAAAA,kCACD,CAACC,iCAAA,EAAAA,kCACD,CAACC,2BAAA,EAAAA,4BACD,CAACC,wBAAA,EAAAA,yBACD,CAACC,wBAAA,EAAAA,0BAGIC,EAAkC,CAAC,CAACC,oBAAA,EAAAA,qBAAsB,CAACC,eAAA,EAAAA,gBAAiB,CAACC,uBAAA,EAAAA,yBAE7EC,EAAoC,CAAC,CAACC,aAAA,EAAAA,cAAe,CAACC,cAAA,EAAAA,gBACtDC,EAAoC,CACzC,CAACD,cAAA,EAAAA,eACD,CAACE,2BAAA,EAAAA,4BACD,CAACC,0BAAA,EAAAA,2BACD,CAACJ,aAAA,EAAAA,cACD,CAACK,0BAAA,EAAAA,2BACD,CAACC,yBAAA,EAAAA,2BAiDIC,EAAkD,CAAC,UAAW,QAAS,QAAS,YAAa,aAC7FC,EAAgC,CACrCC,QAAS,UACTC,MAAO,SACPC,MAAO,SACPC,UAAW,aACXC,UAAW,cAQZ,OACA,MAAMC,UAA4B,EAAAx5B,iBAAlC,c,oBAEC,KAAAy5B,IAAM,EAAAjgB,YAAYhjB,OAAO,EAAAkjC,kBAAkBC,cAAe,CACzDC,eAAgB,CAACC,UAAW,aAE7B,KAAAC,OAAS,EAAAtgB,YAAY3jB,OAAO,KAAM,CACjCyZ,SAAU,CAAC3U,EAAoByV,KAC9B8e,EAAY6K,sBAAsBp/B,EAAqByV,MAGzD,KAAA+oB,QAAU,EAAA3f,YAAYtjB,QAAQ,EAAA2hC,UAAW,CACxCmC,KAAM,CACLC,QAASrC,EAAS17B,IAAKtI,IACf,CACNG,KAAM5B,OAAO4W,KAAKnV,GAAG,GACrBY,MAAOrC,OAAO6J,OAAOpI,GAAG,SAK5B,KAAAsmC,OAAS,EAAA1gB,YAAYtjB,QAAQ/D,OAAO6J,OAAOq8B,EAAU,IAAI,GAAI,CAC5D2B,KAAM,CAELC,QAAS5B,EAAUn8B,IAAKtI,IAChB,CACNG,KAAM5B,OAAO4W,KAAKnV,GAAG,GACrBY,MAAOrC,OAAO6J,OAAOpI,GAAG,SAK5B,KAAAumC,OAAS,EAAA3gB,YAAYtjB,QAAQ/D,OAAO6J,OAAOq8B,EAAU,IAAI,GAAI,CAC5D2B,KAAM,CAELC,QAAS5B,EAAUn8B,IAAKtI,IAChB,CACNG,KAAM5B,OAAO4W,KAAKnV,GAAG,GACrBY,MAAOrC,OAAO6J,OAAOpI,GAAG,SAK5B,KAAAwmC,WAAa,EAAA5gB,YAAYtjB,QAAQ/D,OAAO6J,OAAOy8B,EAAY,IAAI,GAAI,CAClEuB,KAAM,CAELC,QAASxB,EAAYv8B,IAAKtI,IAClB,CACNG,KAAM5B,OAAO4W,KAAKnV,GAAG,GACrBY,MAAOrC,OAAO6J,OAAOpI,GAAG,SAK5B,KAAAymC,WAAa,EAAA7gB,YAAYtjB,QAAQ/D,OAAO6J,OAAO48B,EAAY,IAAI,GAAI,CAClEoB,KAAM,CAELC,QAASrB,EAAY18B,IAAKtI,IAClB,CACNG,KAAM5B,OAAO4W,KAAKnV,GAAG,GACrBY,MAAOrC,OAAO6J,OAAOpI,GAAG,UAO7B,MAAMqM,EAAe,IAAIu5B,EAEzB,MAAatK,UAAoB,EAAAqD,aAAjC,c,oBACC,KAAAryB,cAAgBD,EAMhB,cACC,MAAO,OA2FF,O,mDACD/I,KAAKojC,qBAAqBpjC,KAAKwe,GAAG+jB,WAC/BviC,KAAKqjC,uBAELrjC,KAAKsjC,oBAIL,qBAAqBf,GAC5B,OAAO,EAGM,iB,mDACb,MAAM/G,QAAgBx7B,KAAKujC,cAAcvjC,KAAKwe,GAAG+jB,KAE7C/G,GACHx7B,KAAKwjC,uBAAuBhI,GAC5Bx7B,KAAKyjC,YAAYjI,IAEjBx7B,KAAK0jC,mBAIO,iB,mDACb,GAAI1jC,KAAK2jC,qBAAsB,CAC9B,MAAMnI,QAAgBx7B,KAAKujC,cAAcvjC,KAAKwe,GAAG+jB,KAK7C/G,GACHx7B,KAAK4jC,oCAAoCpI,GAE1Cx7B,KAAK6jC,oBAAsB7jC,KAAKwe,GAAG+jB,IAEnCviC,KAAK8jC,0BAEDtI,GACHx7B,KAAKwjC,uBAAuBhI,GAC5Bx7B,KAAKyjC,YAAYjI,IAEjBx7B,KAAK+b,gBAAgBoF,eAaxB,eACC,OAAOnhB,KAAKwe,GAAG+jB,IAGR,uBAAuB/G,GAE9B,IAAK,IAAIuI,KAAkBhC,EAAqB,CAC/C,MAAMtX,EAAauX,EAAe+B,GAC5BC,EAAchkC,KAAKwI,OAAOy7B,MAAMxZ,GAGnB,MAAfuZ,GAAuBxI,GACtBA,EAAQuI,IAAmBC,IAC9BxI,EAAQuI,GAAkBC,EAC1BxI,EAAQtL,aAAc,IAK1B,6BAA6BzsB,EAAmByV,GAC/CzV,EAAKygC,wBAEE,wBACPlkC,KAAK6jC,yBAAsBt/B,EAG3BvE,KAAK/B,EAAEskC,IAAItqB,uBAIJ,0BACHjY,KAAKmkC,QACJnkC,KAAKwI,OAAOwwB,IAAI,gBACnBh5B,KAAKmkC,OAAOC,YAAcpkC,KAAKwI,OAAOy7B,MAAM,eAKvC,oCAAoCzI,GAC3C,GAAIA,EAAS,CAEZ,GADiBA,EAAQznB,aAAe,EAAAswB,cAGvC,GADArkC,KAAKmkC,OAAS3I,EAAQ8I,MAClBtkC,KAAKmkC,SACHnkC,KAAKwI,OAAO+7B,UAAUvM,EAAYwM,uBAAwB,CAC9D,MAAMC,EAAWzkC,KAAKmkC,OAAOM,SAE7BzkC,KAAK+gB,UAAU,EAAAriB,UAAUI,MAAOk5B,EAAYwM,sBAAuB,KAAM,CACxEzG,OAAO,EACPC,MAAM,EACN0G,MAAO,CAAC,EAAGD,GACXE,aAAc,EAAC,GAAM,KAGtB3kC,KAAK8nB,KAAK,EAAA7O,UAAU2rB,sBAItB5kC,KAAK6kC,4BAGN7kC,KAAK6kC,uBAIC,uBACH7kC,KAAKwI,OAAO+7B,UAAUvM,EAAYwM,wBACrCxkC,KAAKwI,OAAO01B,cAAc,CAACL,gBAAiB,CAAC7F,EAAYwM,yBAKnD,qBACP,OAAOxkC,KAAK6jC,qBAAuB7jC,KAAKwe,GAAG+jB,IAG9B,cAAcA,G,mDAC3B,IAAI/G,EAAyC,KAC7C,MAAMtiB,EAAQlZ,KAAKwI,OAAOtL,IAAI,OAC9B,GAAIqlC,GAAOrpB,EAAO,CACjBlZ,KAAK8kC,gBAAkB9kC,KAAK8kC,iBAAmB,IAAI,EAAAtC,kBAAkBxiC,KAAMkZ,GAE3E,IACCsiB,QAAgBx7B,KAAK8kC,gBAAgBC,4BAA4BxC,GAChE,MAAO/yB,IAMJgsB,GACJx7B,KAAKgyB,OAAO9T,MAAM3d,IAAI,2BAA2BgiC,WAMlDviC,KAAKgyB,OAAO9T,MAAM3d,IAAI,2CAEvB,OAAOi7B,MA5PT,gBAciB,EAAAgJ,sBAAwB,aACxB,EAAAvM,kBAAoB,CACnCC,GAAI,eACJ8M,QAAS,iB,2FCzRX,SACA,QACA,QAEA,QAgBA,QAEA,OACA,uCAAuE5iB,GACtE,OAAO,cAAoBA,EAApB,c,oBACN,KAAA6iB,WAAa,EAAA3iB,YAAYvjB,SACzB,KAAAmmC,eAAiB,EAAA5iB,YAAY1jB,QAAQ,GACrC,KAAAumC,aAAe,EAAA7iB,YAAY1jB,QAAQ,EAAG,CACrC+wB,WAAY,CAACuV,gBAAgB,KAE9B,KAAAE,iBAAmB,EAAA9iB,YAAYzjB,MAAM,CAAC,EAAG,EAAG,GAAI,CAC/C8wB,WAAY,CAACuV,gBAAgB,EAAMC,cAAc,KAElD,KAAAE,oBAAsB,EAAA/iB,YAAYrjB,cAAc,GAAI,CACnD0wB,WAAY,CAACuV,gBAAgB,EAAMC,cAAc,GACjDG,eAAgB,CAACC,QAAS,EAAAnlC,YAAYsb,KACtC8pB,yBAAyB,IAE1B,KAAAC,iBAAmB,EAAAnjB,YAAYxjB,MAAM,EAAG,CACvC6wB,WAAY,CAACuV,gBAAgB,EAAMC,cAAc,QAKpD,iCAYC,YAAsB1hC,GAAA,KAAAA,OAFZ,KAAAiiC,cAAgB,IAAI,EAAAC,UAI9B,kBACC,OAAQ3lC,KAAK4lC,aAAe5lC,KAAK4lC,cAAgB5lC,KAAK6lC,sBAE/C,sBACP,MAEMrkC,EAAW,IAAI,EAAAskC,oBAFR,IACI,KAEXC,EAAO,IAAI,EAAAx8B,KAAK/H,GAEtB,OADAxB,KAAKyD,KAAK1F,OAAOof,IAAI4oB,GACdA,EAER,4BACC,OAAQ/lC,KAAKgmC,2BAA6BhmC,KAAKgmC,4BAA8B,IAAI,EAAAC,kBAGlF,cA6BA,qBACC,OAAOjmC,KAAKyD,KAAK+E,OAAO09B,QAAQ,kBAEjC,8BACC,OAAOlmC,KAAKklC,gBAAkBllC,KAAKyD,KAAK+E,OAAO09B,QAAQ,gBAExD,2BACC,OAAOlmC,KAAKklC,iBAAmBllC,KAAKyD,KAAK+E,OAAO09B,QAAQ,gBAEzD,uBACC,OAAIlmC,KAAKmmC,qBACDnmC,KAAKyD,KAAK+E,OAAOqB,MAAM,oBAEvB,KAeC,sBACJ,S,mDACD7J,KAAKklC,gBACRllC,KAAKomC,2BAECpmC,KAAKqmC,0BACPrmC,KAAKsmC,gCACFtmC,KAAKumC,+BAGRvmC,KAAK4lC,cACR5lC,KAAKyD,KAAK1F,OAAOqf,OAAOpd,KAAK4lC,iBAiBlB,0B,mDACb,MAAMziC,EAAWnD,KAAKwmC,4BACtBrjC,EAAS0G,MAAQ7J,KAAKyD,KAAK+a,GAAG4mB,iBAC9BplC,KAAKymC,YAAYtjC,SAAWA,KAGf,6B,mDACb,MAAMujC,EAAU1mC,KAAKyD,KAAKxF,EAAEonC,oBAAoBsB,aAChD,GAAID,EAAS,OACNA,EAAQ/sB,oBACd,MAAMxW,EAAWujC,EAAQvjC,SACzBnD,KAAKymC,YAAYtjC,SAAWA,OAG5BnD,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,2B,gGC9K9B,cACA,SACA,QACA,SAIA,MAAaqmC,UAAmD,EAAA/mC,UAAhE,c,oBACC,KAAAC,qBAAiE,IAAI,EAAAC,yBACpEC,KACA,EAAA6mC,gBAMO,KAAAC,gCAAkC9mC,KAAK+mC,0BAA0BlpC,KAAKmC,MAJ9E,sBACC,OAAO,EAAAI,YAAY4mC,MAIpB,uBAIChnC,KAAKa,GAAGkG,YAAYC,cACpBhH,KAAKiH,QAAQC,wBACblH,KAAKqY,oBAAoB,4BAA6BrY,KAAK8mC,iCAE5D,cAAcjqC,GACb,OAAOoJ,MAAMoB,cAAcxK,GAI5B,4BACCmD,KAAKwI,OAAOy+B,WAEb,cAAcC,EAAcC,EAA2BC,KA1BxD,mBA8BA,mCAAwCR,K,qFCrCxC,E,KAAA,wBAGA,OACA,QACA,SAGA,QACA,SAGA,QAGA,SAMA,MAAa1nC,UAAkB,EAAAsnB,WAA/B,c,oBAwDS,KAAA6gB,0CAA4CrnC,KAAKsnC,oCAAoCzpC,KAAKmC,MAvDlG,cACC,OAAO,EAAAtB,UAAUU,KASlB,+BACC,OAAIY,KAAK4S,yBAAyB,EAAA20B,UAC1BvnC,KAAK4S,cAAcsP,UAEnBliB,KAAK4S,cAGJ,iBAAiB8U,GAC1B,OAAIA,aAAqB,EAAA6f,UACjB7f,EAAU3kB,QAEV,EAAAwkC,UAAUC,UAAU9f,GAAWxF,UAGxC,2BACC,OAAIliB,KAAKunB,sBAAsB,EAAAggB,UACvBvnC,KAAKunB,WAAWrF,UAEhB,EAAAqlB,UAAUC,UAAUxnC,KAAKunB,YAAYrF,UAG9C,uBACC,OAAOliB,KAAK1C,MAAM4kB,UAEnB,2BACCulB,EACAC,GAEA,OAAID,aAAsB,EAAAF,UACrBG,aAAsB,EAAAH,UAClBE,EAAWE,SAASD,GAEpBD,EAAWG,cAAcF,GAG7BA,aAAsB,EAAAH,UAClBG,EAAWE,cAAcH,GAEzB,EAAAF,UAAUM,eAAeJ,EAAYC,GAI/C,wBAAwBvgB,EAA0CC,GACjE,OAAOD,EAAKwgB,SAASvgB,GAGtB,mBACCpnB,KAAKqY,oBAAoB,sCAAuCrY,KAAKqnC,2CAKtE,iBACC,OAAIrnC,KAAK4S,yBAAyB,EAAA20B,UAC1BvnC,KAAK1C,MAAMqqC,SAAS3nC,KAAK4S,eAEzB5S,KAAK1C,MAAMsqC,cAAc5nC,KAAK4S,eAG7B,oBACL5S,KAAKunB,sBAAsB,EAAAggB,UACzBvnC,KAAKinB,OAGTjnB,KAAKinB,OAAOrD,KAAK5jB,KAAKunB,YAFtBvnB,KAAKinB,OAASjnB,KAAKunB,WAKfvnB,KAAKinB,OAGTjnB,KAAKinB,OAAOugB,UAAUxnC,KAAKunB,YAF3BvnB,KAAKinB,OAAS,EAAAsgB,UAAUC,UAAUxnC,KAAKunB,YAMzCvnB,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,eA4BtC,iBACC,OAAO,EAGR,sCACC9nC,KAAK+nC,uBAAoBxjC,EACzBvE,KAAKgoC,mBAAgBzjC,EAEtB,eACC,OAAQvE,KAAKgoC,cAAgBhoC,KAAKgoC,eAAiBhoC,KAAKioC,uBAEzD,uBACC,MAIMztC,EAAO,IAAI0tC,WAAW,MAE5B,IAAIC,EAAS,EACT/zB,EAAW,EACX9W,EAAQ,EACZ,IAAK,IAAIxC,EAAI,EAAGA,EANHstC,KAMattC,IACzBqtC,EAAa,EAAJrtC,EACTsZ,EAAWtZ,EAXE,KAYbwC,EAAQ0C,KAAKqoC,kBAAkBj0B,GAC/B5Z,EAAK2tC,GAAkB,IAAR7qC,EAKhB,MAAMk+B,EAAU,IAAI,EAAAN,YAAY1gC,EAlBlB,KACC,EAiBsC,EAAA8tC,WAMrD,OADA9M,EAAQtL,aAAc,EACfsL,EAGR,0BAA0B+M,EAAyBzjC,GAClD,MACM0jC,EAAsB,IAAIC,aADX,GAErB,OAAO,IAAI,EAAAC,iBAAiBH,EAAWzjC,EAFlB,EAEwC0jC,GAE9D,cACC,OAAQxoC,KAAK+nC,kBAAoB/nC,KAAK+nC,mBAAqB/nC,KAAK2oC,sBAEjE,sBACC,MAAMn0B,EAASxU,KAAK1C,MAAMkX,OACpBo0B,EAAgB,UAAcp0B,EAASG,GAAUA,EAAMP,UACvDm0B,EAAY,IAAIE,aAAaG,EAAc5tC,QAC3C8J,EAAS,IAAI2jC,aAAaG,EAAc5tC,QAE9C,IAAIF,EAAI,EACR,IAAK,IAAI+tC,KAAgBD,EACxBL,EAAUztC,GAAK+tC,EAAaz0B,SAC5BtP,EAAOhK,GAAK+tC,EAAavrC,MACzBxC,IAGD,OAAOoE,EAAU4pC,mBAAmBP,EAAWzjC,GAGhD,kBAAkBsP,GACjB,OAAiBpU,KAAK+oC,cAAcC,SAAS50B,GAAU,IAjLzD,cAQQ,EAAAjV,cAAgB,IAAI,EAAAooC,UAAU,EAAA0B,kBAAkBC,OAAQ,CAAC,IAAI,EAAAC,UAAU,EAAG,GAAI,IAAI,EAAAA,UAAU,EAAG,KAC/F,EAAA1kC,mBAAoCvF,EAAUC,cAAc+iB,W,8ECJpE,0BAGC,YAAsBknB,GAAA,KAAAA,SADZ,KAAAC,cAAyD,GAGnE,eACC,MAAMC,EAA6BtpC,KAAKopC,OAAO3qC,QAAQ8qC,WAAavpC,KAAKopC,OAAO1gB,aAI1E8gB,GAAiBxpC,KAAKopC,OAAOK,WAEnC,OAAOH,GAA8BE,EAGtC,OACC,GAAIxpC,KAAKopC,OAAO1gB,aAEf,MADArlB,QAAQiE,KAAK,gCACP,+BAGP,OAAItH,KAAK0pC,wBACD1pC,KAAK2pC,gBAEL3pC,KAAK4pC,eAIN,eACP,OAAO5pC,KAAKopC,OAAOS,qBAGZ,gBAmBP,GAlBA7pC,KAAKqpC,cAAgB,GAEjBrpC,KAAKopC,OAAO3qC,QAAQ8qC,WAAavpC,KAAKopC,OAAO1gB,eAChD1oB,KAAKqpC,cAAoB,KAAIrpC,KAAKopC,OAAO7qC,KACzCyB,KAAKqpC,cAA6B,cAAIrpC,KAAKopC,OAAOU,yBAClD9pC,KAAKqpC,cAAyB,UAAIrpC,KAAKopC,OAAOS,qBAC9C7pC,KAAKqpC,cAAuB,QAAIrpC,KAAKopC,OAAO3qC,QAAQwtB,SAGhDjsB,KAAKopC,OAAOK,YAChBzpC,KAAK+pC,WAQF/pC,KAAKopC,OAAO3qC,QAAQurC,uBAAwB,CAC/C,MAAMC,EAAuC,GACvCC,EAAqBlqC,KAAKopC,OAAO3qC,QAAQwrC,mBAC/C,IAAK,IAAIE,KAAelvC,OAAO4W,KAAKq4B,GAAqB,CACxD,MAAME,EAAeF,EAAmBC,GACxCF,EAAmBE,GAAeE,KAAKC,UAAUF,GAElDpqC,KAAKqpC,cAAiC,kBAAIY,EAE3C,OAAOjqC,KAAKqpC,cAGH,wBACT,QAAIrpC,KAAKopC,OAAO3qC,QAAQ8qC,YAGpBvpC,KAAKopC,OAAO3qC,QAAQurC,uBAwBf,e,2FC9GX,OAGA,SAGA,SACA,SAIA,SAGA,SACA,SACA,QAGA,QACA,QACA,QACA,SACA,SAeMO,EAAmD,IAAIha,IAAI,CAChE,CAAC,EAAAhgB,WAAWzF,OAAQ,qBACpB,CAAC,EAAAyF,WAAW8hB,SAAU,uBAEjBmY,EAAiD,IAAIja,IAAI,CAC9D,CAAC,EAAAhgB,WAAWzF,OAAQ,2BACpB,CAAC,EAAAyF,WAAW8hB,SAAU,mDAEjBoY,EAAiD,IAAIla,IAAI,CAC9D,CAAC,EAAAhgB,WAAWzF,OAAQ,CAAC,0BAA2B,kCAChD,CAAC,EAAAyF,WAAW8hB,SAAU,MAKvB,MAAahC,UAA8B,EAAAqa,eAe1C,YAAsB3Z,GACrB9qB,QADqB,KAAA8qB,kBAdZ,KAAAoB,iBAA4C,IAAI5B,IAChD,KAAAwC,OAAkC,IAAIxC,IAGtC,KAAAa,YAAgC,GAChC,KAAAuZ,YAAgC,GAMlC,KAAAC,0BAAoC,EACpC,KAAAC,uBAAiC,EAMnC,U,uDAWI,iCAAiC7X,G,QAC1C,OAAQA,GACP,KAAK,EAAAziB,WAAWzF,OACf,OAA4B,QAA5B,EAAO9K,KAAK8qC,wBAAgB,eAAExY,aAC/B,KAAK,EAAA/hB,WAAW8hB,SACf,OAA4B,QAA5B,EAAOryB,KAAK8qC,wBAAgB,eAAEvY,gBAIjC,sBACC,OAAOvyB,KAAK+wB,gBAAgBxpB,qBAAqB2sB,gBAElD,kBACC,OAAoE,MAA7Dl0B,KAAK+wB,gBAAgBxpB,qBAAqB2sB,gBAElD,kBACC,OAAOl0B,KAAKmyB,iBAMH,eACT,IAAK,IAAIa,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMC,EAAWlzB,KAAKmzB,iCAAiCH,GACnDE,GACHlzB,KAAK+qC,kBAAkB7X,EAAUF,IAUpC,eAAegY,GACdhrC,KAAKoxB,YAAc4Z,EAEpB,wBA8FU,aAAaC,GAgBtB,IAAK,IAAItO,KAAgB38B,KAAK48B,gBAC7BqO,EAAiBtO,EAAauO,cAAgBvO,EAAawO,QAGxDnrC,KAAK0yB,4BACRuY,EAAuB,KAAI,CAE1B3tC,MAAO0C,KAAK+wB,gBAAgB3tB,MAAMgoC,OAGhCprC,KAAKqrC,yBACRJ,EAA6B,WAAI,CAChC3tC,MAAO,IAAI,EAAAu5B,QAAQ,IAAM,OAY5B,0BAA0B7D,GAEzB,MAAMpqB,EAAO,GACb,IAAK,IAAInF,KAAQzD,KAAKoxB,YACrB,OAAQ3tB,EAAKlF,MACZ,IAAK,SACJqK,EAAKtN,KAAKmI,GAiBb,OAAOmF,EAER,0BAA0BoqB,GACzB,MAAMpqB,EAAO,GACb,IAAK,IAAInF,KAAQzD,KAAK2qC,YACrB,OAAQlnC,EAAKlF,MACZ,KAAK,EAAA+sC,cAAc/sC,OAClBqK,EAAKtN,KAAKmI,GACV,MAED,KAAK,EAAAi7B,gBAAgBngC,QAcvB,OAAOqK,EAER,uBAAuBosB,EAA6BvsB,IACpD,sBAAsB8qB,EAA2B9qB,IACjD,yBACCosB,EACApsB,IAQD,mBACC,OAAQzI,KAAKixB,cAAgBjxB,KAAKixB,eAAiB,IAAI,EAAAsa,YAAYvrC,KAAMA,KAAK+wB,iBAEzE,sBAAsBia,G,yDACrBhrC,KAAKwrC,aAAaC,iBAAiBT,MAE1C,0BACChrC,KAAKwrC,aAAaE,0BAEnB,6BACC1rC,KAAKwrC,aAAaG,6BAEnB,wBACC,OAAO3rC,KAAKwrC,aAAa5O,gBAE1B,cAAc5J,EAAyB4Y,GACtC,OAAO5rC,KAAKwrC,aAAalY,MAAMN,EAAa4Y,GAE7C,oBACC,OAAO5rC,KAAKwrC,aAAaK,YAE1B,gBAEC,OADqB7rC,KAAK8rC,qBAAuB9rC,KAAKwrC,cAClC5O,gBAErB,wBAAwBmP,GACvB/rC,KAAK8rC,oBAAsBC,EACvB/rC,KAAK8rC,oBACR9rC,KAAKwrC,aAAaG,6BAElB3rC,KAAKwrC,aAAaE,0BASpB,yBAAyB1P,GACxBA,EAAaxzB,OAAOuY,UAAU,EAAAriB,UAAUc,QAAS,WAAY,CAAC,EAAG,EAAG,GAAI,CAACwsC,QAAQ,IACjFhQ,EAAaxzB,OAAOuY,UAAU,EAAAriB,UAAUc,QAAS,SAAU,CAAC,EAAG,EAAG,GAAI,CAACwsC,QAAQ,IAC/EhQ,EAAaxzB,OAAOuY,UAAU,EAAAriB,UAAUG,MAAO,QAAS,CAAC,EAAG,EAAG,GAAI,CAACmtC,QAAQ,IAC5EhQ,EAAaxzB,OAAOuY,UAAU,EAAAriB,UAAUI,MAAO,QAAS,EAAG,CAACktC,QAAQ,IACpEhQ,EAAaxzB,OAAOuY,UAAU,EAAAriB,UAAUa,QAAS,KAAM,CAAC,EAAG,GAAI,CAACysC,QAAQ,IAEzE,kBAAkBhQ,GACjB3L,EAAsB4L,kBAAkBD,GAEzC,gDACC,MAAO,CACN,IAAI,EAAAmE,0BAA0B,WAAY,EAAAt8B,oBAAoBK,MAC9D,IAAI,EAAAi8B,0BAA0B,SAAU,EAAAt8B,oBAAoBK,MAC5D,IAAI,EAAAi8B,0BAA0B,QAAS,EAAAt8B,oBAAoBK,MAC3D,IAAI,EAAAi8B,0BAA0B,KAAM,EAAAt8B,oBAAoBI,MACxD,IAAI,EAAAk8B,0BAA0B,eAAgB,EAAAt8B,oBAAoBM,MAClE,IAAI,EAAAg8B,0BAA0B,aAAc,EAAAt8B,oBAAoBI,MAGhE,IAAI,EAAAk8B,0BAA0B,OAAQ,EAAAt8B,oBAAoB/E,QAG5D,yCACC,OAAOuxB,EAAsB4b,yCAE9B,mBAAmBjX,GAClBA,EAAan0B,GAAGC,QAAQqG,mCAAmCnH,KAAKisC,0CAEjE,0BACC,OAAO,EAQR,gBACCjsC,KAAKksC,wBACLlsC,KAAKmsC,0BACLnsC,KAAKosC,kCACLpsC,KAAKqsC,+BAEN,qBACC,OAAQrsC,KAAKssC,gBAAkBtsC,KAAKssC,iBAAmBtsC,KAAKusC,wBAE7D,mBAAmBhb,GAClBvxB,KAAKssC,gBAAkB/a,EAExB,mB,MACC,OAA0B,QAAnB,EAAAvxB,KAAKuxB,sBAAc,eAAEvsB,IAAKwnC,GAAOA,EAAG3vC,UAAW,GAE7C,wBACTmD,KAAKssC,qBAAkB/nC,EAGxB,wBACC,MAAO,CACN,IAAI,EAAAkoC,aAAa,EAAAl8B,WAAWzF,OAAQ,CAAC,WAAY,SAAU,MAAO,IAClE,IAAI,EAAA2hC,aAAa,EAAAl8B,WAAW8hB,SAAU,CAAC,QAAS,SAAU,CAAC,EAAA9hB,WAAWzF,UAGxE,cAAcjO,G,MACb,OAA0B,QAA1B,EAAOmD,KAAKuxB,sBAAc,eAAExH,OAAQyiB,GAC5BA,EAAG3vC,QAAUA,GAClB,GAEJ,mBACC,OAAQmD,KAAK0sC,kBAAoB1sC,KAAK0sC,mBAAqB1sC,KAAK2sC,0BAEjE,qBAAqBlb,GACpBzxB,KAAK0sC,kBAAoBjb,EAE1B,gBAAgB50B,GACf,OAAOmD,KAAKyxB,mBAAmB1H,OAAQ6iB,GAC/BA,EAAG/vC,QAAUA,GAClB,GAEJ,iCACC,MAAO,CACN,IAAI,EAAAgwC,eAAe,WAAY,CAC9BhZ,wBAAwB,EAGxBS,OAAQ,wBAET,IAAI,EAAAuY,eAAe,SAAU,CAC5BhZ,wBAAwB,EACxBS,OAAQ,yBAGT,IAAI,EAAAuY,eAAe,QAAS,CAC3BvY,OAAQ,wBAET,IAAI,EAAAuY,eAAe,QAAS,CAC3BvY,OAAQ,sBAET,IAAI,EAAAuY,eAAe,KAAM,CAExBvY,OAAQ,SACRwY,GAAI,EAAAnR,uBAAuBkD,QAAQhR,MAItC,0BACC,OAAOwC,EAAsBsc,0BAEpB,0BACT3sC,KAAK0sC,uBAAoBnoC,EACzBvE,KAAKyxB,mBAEN,4BAA4Bsb,EAA2B/Z,G,MACtD,OAAsC,QAA/B,EAAAhzB,KAAK20B,cAAc3B,UAAY,eAAE0B,gBAAiB,GAIhD,kCACT10B,KAAK4qC,0BAA2B,EAEjC,8BACC5qC,KAAK4qC,0BAA2B,EAEjC,0BACC,OAAO5qC,KAAK4qC,yBAGH,+BACT5qC,KAAK6qC,uBAAwB,EAE9B,2BACC7qC,KAAK6qC,uBAAwB,EAE9B,uBACC,OAAO7qC,KAAK6qC,sBAQH,oBAAoB7X,GAC7B,OAAOuX,EAAwBrtC,IAAI81B,GAE1B,kBAAkBA,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAExB,gBAAgBA,GACzB,OAAOyX,EAAoBvtC,IAAI81B,GASxB,kBAAkBE,EAAkBF,GAC3C,MAAMga,EAAuBhtC,KAAKitC,cAAcja,EAAa,EAAAka,SAASC,sBAChEC,EAASptC,KAAKitC,cAAcja,EAAa,EAAAka,SAASG,QAElDC,EAAOttC,KAAKitC,cAAcja,EAAa,EAAAka,SAASK,MAEtD,IAAIC,EAAiBta,EAAStkB,MAAM,MAEpC,MAAM6+B,EAAY,GAOZC,EAAqB1tC,KAAK2tC,oBAAoB3a,GAC9C4a,EAAmB5tC,KAAK6tC,kBAAkB7a,GAC1C8a,EAAkB9tC,KAAK8tC,gBAAgB9a,GAC7C,IAAI+a,GAA2B,EAC3BC,GAAyB,EAE7B,IAAK,IAAIC,KAAiBT,EAAgB,CACT,GAA5BO,IACCf,GACHhtC,KAAKkuC,cAAcT,EAAWT,GAE3BI,GACHptC,KAAKkuC,cAAcT,EAAWL,GAE/BW,GAA2B,GAEE,GAA1BC,IAECV,GACHttC,KAAKkuC,cAAcT,EAAWH,GAE/BU,GAAyB,GAG1B,IAAIG,GAAuB,EAC3B,GAAIL,EACH,IAAK,IAAIM,KAAkBN,EACtBG,EAAc3kC,QAAQ8kC,IAAmB,IAC5CD,GAAuB,GAIrBA,GAGJV,EAAUnyC,KAAK,eACfmyC,EAAUnyC,KAAK,KAAK2yC,MAHpBR,EAAUnyC,KAAK2yC,GAMZP,GAAsBO,EAAc3kC,QAAQokC,IAAuB,IACtEK,GAA2B,GAExBH,GAAoBK,EAAc3kC,QAAQskC,IAAqB,IAClEI,GAAyB,GAoB3BhuC,KAAK+yB,OAAOxyB,IAAIyyB,EAAaya,GAOtB,cAAcA,EAAqBY,GAC1C,GAAIA,EAAarzC,OAAS,EAAG,CAC5B,IAAK,IAAIF,EAAI,EAAGA,EAtiBE,EAsiBgBA,IACjC2yC,EAAUnyC,KAAK,IAGhB,IAAK,IAAIgzC,KAAeD,EACvBZ,EAAUnyC,KAAKgzC,GAEhB,IAAK,IAAIxzC,EAAI,EAAGA,EA7iBE,EA6iBgBA,IACjC2yC,EAAUnyC,KAAK,KAKZ,uB,mDACL,OAAO,IAAIi1B,QAljBb,2B,8EC1DA,uBACC,YAAsB9sB,GAAA,KAAAA,OACtB,cAEA,UAEA,eACC,OAAOzD,KAAKyD,KAAKN,Y,sFCTnB,E,KAAA,uBAiBA,IAAKgtB,GAAL,SAAKA,GACJ,kDACA,4CACA,kDAHD,CAAKA,MAAkB,KAoBvB,qBACC,YAAY/sB,EAAkBD,GAC7B,OAAOC,EAAMK,KAAKN,EAAStG,MAG5B,aAAa0xC,GACZ,OAAI,UAAeA,GACXA,EAAavpC,IAAK7B,GACjBnD,KAAKwuC,aAAarrC,IAGnBnD,KAAKwuC,aAAaD,GAI3B,oBAAoBA,GACnB,MAAMprC,EAAWorC,EAAaxrC,QAI9B,OAFCI,EAA+BuH,UAAa6jC,EAAmC7jC,UAEzEvH,EAGR,8BAA8BpF,EAAkBoF,GAC/C,MAAMsrC,EAAuBtrC,EAC7B,GAAIsrC,EAAqBzd,iBACxB,IAAK,IAAIn0B,KAAQ5B,OAAO4W,KAAK48B,EAAqBzd,kBAAmB,CACpE,MAAM0d,EAAW7xC,EAEX60B,EAAkB+c,EAAqBzd,iBAAiB0d,GAC1Dhd,IACF3zB,EAAqC2wC,GAAYhd,EAClDA,EAAgBxB,aAAc,IAQlC,8BAA8Bye,EAAezD,EAAsB0D,GAClE,MAAMzrC,EAAWwrC,EACjB,GAAIxrC,EAAS6tB,iBACZ,IAAK,IAAIn0B,KAAQ5B,OAAO4W,KAAK1O,EAAS6tB,kBAAmB,CACxD,MAAM0d,EAAW7xC,EACX60B,EAAkBvuB,EAAS6tB,iBAAiB0d,GAC9Chd,IACHA,EAAgBe,SAASyY,GAAc5tC,MAAQsxC,IAKnD,qCAAqCD,EAAezD,EAAsB0D,GACzE,MAAMzrC,EAAWwrC,EACjB,GAAIxrC,EAAS6tB,iBACZ,IAAK,IAAIn0B,KAAQ5B,OAAO4W,KAAK1O,EAAS6tB,kBAAmB,CACxD,MAAM0d,EAAW7xC,EACX60B,EAAkBvuB,EAAS6tB,iBAAiB0d,GAC9Chd,IACHA,EAAgBe,SAASyY,GAAgBxZ,EAAgBe,SAASyY,IAAiB0D,O,kCChGxF,kCAAyF,IAAIC,EAAI,GAAIpyC,OAAE,EAAOqyC,EAAGD,EAAI,SAAS1xC,EAAER,EAAEC,GAAG,IAAqF4S,EAAjFU,EAAEvT,EAAEiS,MAAM,KAAKuB,EAAE2+B,IAAK5+B,EAAE,KAAKC,IAAIA,EAAE4+B,YAAY5+B,EAAE4+B,WAAW,OAAO7+B,EAAE,IAAI,KAAUA,EAAElV,SAASwU,EAAEU,EAAEzU,UAAWyU,EAAElV,QAAQ4B,IAAIH,EAAS0T,EAAEA,EAAEX,GAAGW,EAAEX,GAAGW,EAAEX,GAAG,GAAxBW,EAAEX,GAAG5S,EAAuB,IAAIW,EAAE,oBAAqB2qC,YAAY,oBAAqBlN,aAAa,oBAAqBgU,aAAa,oBAAqBC,SAAS,SAAShqC,EAAEtI,GAAG,IAA8C6S,EAAE0/B,EAAEj8B,EAAEb,EAAE+8B,EAAEzyC,EAAEoB,EAAEG,EAAE7B,EAAEkJ,EAA5D1I,EAAED,EAAE3B,OAAOkV,EAAE,EAAEC,EAAEL,OAAOs/B,kBAAsC,IAAInxC,EAAE,EAAEA,EAAErB,IAAIqB,EAAEtB,EAAEsB,GAAGiS,IAAIA,EAAEvT,EAAEsB,IAAItB,EAAEsB,GAAGkS,IAAIA,EAAExT,EAAEsB,IAAkD,IAA9CuR,EAAE,GAAGU,EAAEg/B,EAAE,IAAK3xC,EAAEyxC,YAAYK,OAAO7/B,GAAGyD,EAAE,EAAEb,EAAE,EAAM+8B,EAAE,EAAEl8B,GAAG/C,GAAG,CAAC,IAAIjS,EAAE,EAAEA,EAAErB,IAAIqB,EAAE,GAAGtB,EAAEsB,KAAKgV,EAAE,CAAS,IAARvW,EAAE,EAAEoB,EAAEsU,EAAMhW,EAAE,EAAEA,EAAE6W,IAAI7W,EAAEM,EAAEA,GAAG,EAAI,EAAFoB,EAAIA,IAAI,EAAY,IAAVwH,EAAE2N,GAAG,GAAGhV,EAAM7B,EAAEM,EAAEN,EAAEoT,EAAEpT,GAAG+yC,EAAED,EAAE9yC,GAAGkJ,IAAI8M,IAAIa,EAAEb,IAAI,EAAE+8B,IAAI,EAAE,MAAM,CAACD,EAAEh/B,EAAEC,GAAI,SAAS1K,EAAE9I,EAAEC,GAAkQ,OAA/PoD,KAAKiT,EAAE,GAAGjT,KAAKoS,EAAE,MAAMpS,KAAKpD,EAAEoD,KAAKkvC,EAAElvC,KAAKkQ,EAAElQ,KAAKvD,EAAE,EAAEuD,KAAKka,MAAM3c,EAAE,IAAI2qC,WAAWvrC,GAAGA,EAAEqD,KAAKtD,GAAE,EAAGsD,KAAKlF,EAAEyK,EAAEvF,KAAK7C,GAAE,GAAMP,IAAKA,EAAE,MAAIA,EAAEwF,QAAQpC,KAAKkQ,EAAEtT,EAAEwF,OAAOxF,EAAE0yC,aAAatvC,KAAKoS,EAAExV,EAAE0yC,YAAY1yC,EAAE2yC,aAAavvC,KAAKlF,EAAE8B,EAAE2yC,YAAY3yC,EAAE4yC,SAASxvC,KAAK7C,EAAEP,EAAE4yC,SAAexvC,KAAKlF,GAAG,KAAK20C,EAAEzvC,KAAKmQ,EAAE,MAAMnQ,KAAKrD,EAAE,IAAKY,EAAE2qC,WAAWmH,OAAO,MAAMrvC,KAAKoS,EAAE,KAAK,MAAM,KAAK7M,EAAEvF,KAAKmQ,EAAE,EAAEnQ,KAAKrD,EAAE,IAAKY,EAAE2qC,WAAWmH,OAAOrvC,KAAKoS,GAAGpS,KAAKwP,EAAExP,KAAKwF,EAAExF,KAAKlC,EAAEkC,KAAKiF,EAAEjF,KAAKhE,EAAEgE,KAAKyF,EAAE,MAAM,QAAQ,MAAMiqC,MAAM,yBACztC,IAAID,EAAE,EAAElqC,EAAE,EAAEoqC,EAAE,CAACpyC,EAAEkyC,EAAErzC,EAAEmJ,GACvBE,EAAEvK,UAAUi0C,EAAE,WAAW,MAAMnvC,KAAKtD,GAAG,CAAC,IAAIC,EAAEizC,EAAE5vC,KAAK,GAA2B,OAAtB,EAAFrD,IAAMqD,KAAKtD,GAAE,GAAIC,KAAK,GAAY,KAAK,EAAE,IAAIC,EAAEoD,KAAKka,MAAMhK,EAAElQ,KAAKkQ,EAAEC,EAAEnQ,KAAKrD,EAAE6S,EAAExP,KAAKmQ,EAAE++B,EAAEtyC,EAAE5B,OAAOiY,EAAExW,EAAM0yC,EAAEh/B,EAAEnV,OAAO0B,EAAED,EAAkB,GAAhBuD,KAAKpD,EAAEoD,KAAKkvC,EAAE,EAAKh/B,EAAE,GAAGg/B,EAAE,MAAMQ,MAAM,0CAA6D,GAAnBz8B,EAAErW,EAAEsT,KAAKtT,EAAEsT,MAAM,EAAKA,EAAE,GAAGg/B,EAAE,MAAMQ,MAAM,2CAA8D,GAAGz8B,MAApBrW,EAAEsT,KAAKtT,EAAEsT,MAAM,GAAY,MAAMw/B,MAAM,oDAAoD,GAAGx/B,EAAE+C,EAAErW,EAAE5B,OAAO,MAAM00C,MAAM,0BAA0B,OAAO1vC,KAAKlF,GAAG,KAAK20C,EAAE,KAAKjgC,EACjgByD,EAAE9C,EAAEnV,QAAQ,CAAY,GAALiY,GAANvW,EAAEyyC,EAAE3/B,EAAUjS,EAAE4S,EAAE5P,IAAI3D,EAAEizC,SAAS3/B,EAAEA,EAAExT,GAAG8S,GAAGA,GAAG9S,EAAEwT,GAAGxT,OAAO,KAAKA,KAAKyT,EAAEX,KAAK5S,EAAEsT,KAAKlQ,KAAKmQ,EAAEX,EAAEW,EAAEnQ,KAAKwP,IAAIA,EAAExP,KAAKmQ,EAAE,MAAM,KAAK5K,EAAE,KAAKiK,EAAEyD,EAAE9C,EAAEnV,QAAQmV,EAAEnQ,KAAKwP,EAAE,CAACvR,EAAE,IAAI,MAAM,QAAQ,MAAMyxC,MAAM,wBAAyB,GAAGnyC,EAAE4S,EAAE5P,IAAI3D,EAAEizC,SAAS3/B,EAAEA,EAAE+C,GAAGzD,GAAGA,GAAGyD,EAAE/C,GAAG+C,OAAO,KAAKA,KAAK9C,EAAEX,KAAK5S,EAAEsT,KAAKlQ,KAAKkQ,EAAEA,EAAElQ,KAAKmQ,EAAEX,EAAExP,KAAKrD,EAAEwT,EAAE,MAAM,KAAK,EAAEnQ,KAAKhE,EAAE8zC,EAAGC,GAAI,MAAM,KAAK,EAAM,IAAqFC,EAAIC,EAAIC,EAAwBC,EAAjHryC,EAAE8xC,EAAE5vC,KAAK,GAAG,IAAI/B,EAAE2xC,EAAE5vC,KAAK,GAAG,EAAE5D,EAAEwzC,EAAE5vC,KAAK,GAAG,EAAEsF,EAAE,IAAK/H,EAAE2qC,WAAWmH,OAAOe,EAAEp1C,QAAoBq1C,EAAE5zC,EAAE6zC,EAAE7zC,EAAE8zC,EAAE9zC,EAAE+I,EAAE/I,EAAE+zC,EAAE/zC,EAAvH,IAA6H+zC,EAAE,EAAEA,EAAEp0C,IAAIo0C,EAAElrC,EAAE8qC,EAAEI,IACtfZ,EAAE5vC,KAAK,GAAG,IAAIzC,EAAO,IAAJizC,EAAEp0C,EAAMA,EAAEkJ,EAAEtK,OAAOw1C,EAAEp0C,IAAIo0C,EAAElrC,EAAE8qC,EAAEI,IAAI,EAA6C,IAA3CR,EAAE/qC,EAAEK,GAAG+qC,EAAE,IAAK9yC,EAAE2qC,WAAWmH,OAAOvxC,EAAEG,GAAGuyC,EAAE,EAAML,EAAEryC,EAAEG,EAAEuyC,EAAEL,GAAG,OAAOG,EAAEG,EAAEzwC,KAAKgwC,GAAGM,GAAG,KAAK,GAAG,IAAI9qC,EAAE,EAAEoqC,EAAE5vC,KAAK,GAAGwF,KAAK6qC,EAAEG,KAAKD,EAAE,MAAM,KAAK,GAAG,IAAI/qC,EAAE,EAAEoqC,EAAE5vC,KAAK,GAAGwF,KAAK6qC,EAAEG,KAAK,EAAED,EAAE,EAAE,MAAM,KAAK,GAAG,IAAI/qC,EAAE,GAAGoqC,EAAE5vC,KAAK,GAAGwF,KAAK6qC,EAAEG,KAAK,EAAED,EAAE,EAAE,MAAM,QAAQA,EAAEF,EAAEG,KAAKF,EAAEL,EAAIhrC,EAAF1H,EAAI8yC,EAAER,SAAS,EAAE/xC,GAAMuyC,EAAEhyC,MAAM,EAAEP,IAAIoyC,EAAIjrC,EAAF1H,EAAI8yC,EAAER,SAAS/xC,GAAMuyC,EAAEhyC,MAAMP,IAAIkC,KAAKhE,EAAEi0C,EAAEC,GAAG,MAAM,QAAQ,MAAMR,MAAM,kBAAkB/yC,IAAK,OAAOqD,KAAKlC,KAC/b,IACiEi5B,EAAE2Z,EAD/DC,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAIP,EAAE7yC,EAAE,IAAIy9B,YAAY2V,GAAGA,EAAEC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKC,EAAEtzC,EAAE,IAAIy9B,YAAY4V,GAAGA,EAAEE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAGC,EAAExzC,EAAE,IAAI2qC,WAAW4I,GAAGA,EAAEE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,OAAOC,EAAG1zC,EAAE,IAAIy9B,YAAYgW,GAAGA,EAAEE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAClf,GAAG,IAAIla,EAAEz5B,EAAE,IAAI2qC,WAAWgJ,GAAIA,EAAGC,EAAE,IAAK5zC,EAAE2qC,WAAWmH,OAAO,KAAc,IAAJtY,EAAE,EAAM2Z,EAAGS,EAAEn2C,OAAO+7B,EAAE2Z,IAAK3Z,EAAEoa,EAAEpa,GAAG,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,EAAE,IAA2Cqa,EAAEC,EAAzCvB,EAAG7qC,EAAEksC,GAAGG,EAAE,IAAK/zC,EAAE2qC,WAAWmH,OAAO,IAAa,IAAJ+B,EAAE,EAAMC,EAAGC,EAAEt2C,OAAOo2C,EAAEC,IAAKD,EAAEE,EAAEF,GAAG,EAAE,IAAIrB,EAAG9qC,EAAEqsC,GAAG,SAAS1B,EAAEjzC,EAAEC,GAAG,IAAI,IAA2CwV,EAAvClC,EAAEvT,EAAEuyC,EAAE/+B,EAAExT,EAAEC,EAAE4S,EAAE7S,EAAEud,MAAMg1B,EAAEvyC,EAAEuT,EAAE+C,EAAEzD,EAAExU,OAASmV,EAAEvT,GAAG,CAAC,GAAGsyC,GAAGj8B,EAAE,MAAMy8B,MAAM,0BAA0Bx/B,GAAGV,EAAE0/B,MAAM/+B,EAAEA,GAAG,EAAuC,OAArCiC,EAAElC,GAAG,GAAGtT,GAAG,EAAED,EAAEuyC,EAAEh/B,IAAItT,EAAED,EAAEC,EAAEuT,EAAEvT,EAAED,EAAEuT,EAAEg/B,EAAS98B,EACxZ,SAASq+B,EAAE9zC,EAAEC,GAAG,IAAI,IAAyDF,EAAEoB,EAAvDoS,EAAEvT,EAAEuyC,EAAE/+B,EAAExT,EAAEC,EAAE4S,EAAE7S,EAAEud,MAAMg1B,EAAEvyC,EAAEuT,EAAE+C,EAAEzD,EAAExU,OAAOoX,EAAExV,EAAE,GAAGuyC,EAAEvyC,EAAE,GAAOuT,EAAEg/B,KAAKD,GAAGj8B,IAAI/C,GAAGV,EAAE0/B,MAAM/+B,EAAEA,GAAG,EAA2B,IAATrS,GAAhBpB,EAAE0V,EAAElC,GAAG,GAAGi/B,GAAG,MAAS,IAAQh/B,EAAE,MAAMu/B,MAAM,wBAAwB5xC,GAA0B,OAAvBnB,EAAEuyC,EAAEh/B,GAAGpS,EAAEnB,EAAEC,EAAEuT,EAAErS,EAAEnB,EAAEuT,EAAEg/B,EAAW,MAAFxyC,EAMxB,SAAS60C,EAAE50C,EAAEC,GAAG,IAAIsT,EAAEC,EAAwH,OAAtHnQ,KAAKka,MAAMvd,EAAEqD,KAAKkQ,EAAE,GAAKtT,IAAKA,EAAE,MAAIA,EAAEwF,QAAQpC,KAAKkQ,EAAEtT,EAAEwF,OAAOxF,EAAE40C,SAASxxC,KAAKyvC,EAAE7yC,EAAE40C,SAAQthC,EAAEvT,EAAEqD,KAAKkQ,KAAKC,EAAExT,EAAEqD,KAAKkQ,KAAc,GAAFA,GAAM,KAAKuhC,EAAGzxC,KAAK0xC,OAAOD,EAAG,MAAM,QAAQ,MAAM/B,MAAM,kCAAmC,GAAG,KAAMx/B,GAAG,GAAGC,GAAG,GAAG,MAAMu/B,MAAM,yBAAyBx/B,GAAG,GAAGC,GAAG,IAAI,GAAK,GAAFA,EAAK,MAAMu/B,MAAM,+BAA+B1vC,KAAKwwC,EAAE,IAAI/qC,EAAE9I,EAAE,CAACyF,MAAMpC,KAAKkQ,EAAEo/B,WAAW1yC,EAAE0yC,WAAWC,WAAW3yC,EAAE2yC,WAAWC,OAAO5yC,EAAE4yC,SAL7nB/pC,EAAEvK,UAAUc,EAAE,SAASW,EAAEC,GAAG,IAAIsT,EAAElQ,KAAKrD,EAAEwT,EAAEnQ,KAAKmQ,EAAEnQ,KAAKjD,EAAEJ,EAAE,IAAI,IAAmBuyC,EAAEj8B,EAAEb,EAAE+8B,EAArB3/B,EAAEU,EAAElV,OAAO,IAAY,OAAOk0C,EAAEuB,EAAEzwC,KAAKrD,KAAK,GAAG,IAAIuyC,EAAE/+B,GAAGX,IAAIxP,KAAKmQ,EAAEA,EAAED,EAAElQ,KAAKwP,IAAIW,EAAEnQ,KAAKmQ,GAAGD,EAAEC,KAAK++B,OAAmI,IAApHC,EAAE0B,EAAV59B,EAAEi8B,EAAE,KAAW,EAAE6B,EAAE99B,KAAKk8B,GAAGS,EAAE5vC,KAAK+wC,EAAE99B,KAAKi8B,EAAEuB,EAAEzwC,KAAKpD,GAAGwV,EAAE6+B,EAAG/B,GAAG,EAAElY,EAAEkY,KAAK98B,GAAGw9B,EAAE5vC,KAAKg3B,EAAEkY,KAAK/+B,GAAGX,IAAIxP,KAAKmQ,EAAEA,EAAED,EAAElQ,KAAKwP,IAAIW,EAAEnQ,KAAKmQ,GAAQg/B,KAAKj/B,EAAEC,GAAGD,EAAEC,IAAIiC,GAAG,KAAK,GAAGpS,KAAKpD,GAAGoD,KAAKpD,GAAG,EAAEoD,KAAKkQ,IAAIlQ,KAAKmQ,EAAEA,GACzW1K,EAAEvK,UAAUuK,EAAE,SAAS9I,EAAEC,GAAG,IAAIsT,EAAElQ,KAAKrD,EAAEwT,EAAEnQ,KAAKmQ,EAAEnQ,KAAKjD,EAAEJ,EAAE,IAAI,IAAeuyC,EAAEj8B,EAAEb,EAAE+8B,EAAjB3/B,EAAEU,EAAElV,OAAe,OAAOk0C,EAAEuB,EAAEzwC,KAAKrD,KAAK,GAAG,IAAIuyC,EAAE/+B,GAAGX,IAAeA,GAAXU,EAAElQ,KAAKwP,KAAQxU,QAAQkV,EAAEC,KAAK++B,OAA6H,IAA9GC,EAAE0B,EAAV59B,EAAEi8B,EAAE,KAAW,EAAE6B,EAAE99B,KAAKk8B,GAAGS,EAAE5vC,KAAK+wC,EAAE99B,KAAKi8B,EAAEuB,EAAEzwC,KAAKpD,GAAGwV,EAAE6+B,EAAG/B,GAAG,EAAElY,EAAEkY,KAAK98B,GAAGw9B,EAAE5vC,KAAKg3B,EAAEkY,KAAK/+B,EAAEg/B,EAAE3/B,IAAeA,GAAXU,EAAElQ,KAAKwP,KAAQxU,QAAam0C,KAAKj/B,EAAEC,GAAGD,EAAEC,IAAIiC,GAAG,KAAK,GAAGpS,KAAKpD,GAAGoD,KAAKpD,GAAG,EAAEoD,KAAKkQ,IAAIlQ,KAAKmQ,EAAEA,GACxV1K,EAAEvK,UAAUsU,EAAE,WAAW,IAA4DU,EAAEC,EAA1DxT,EAAE,IAAKY,EAAE2qC,WAAWmH,OAAOrvC,KAAKmQ,EAAE,OAAOvT,EAAEoD,KAAKmQ,EAAE,MAAUX,EAAExP,KAAKrD,EAAE,GAAGY,EAAEZ,EAAE4D,IAAIiP,EAAEqgC,SAAS,MAAMlzC,EAAE3B,cAAkB,IAAJkV,EAAE,EAAMC,EAAExT,EAAE3B,OAAOkV,EAAEC,IAAID,EAAEvT,EAAEuT,GAAGV,EAAEU,EAAE,OAAuC,GAAhClQ,KAAKiT,EAAE3X,KAAKqB,GAAGqD,KAAKvD,GAAGE,EAAE3B,OAAUuC,EAAEiS,EAAEjP,IAAIiP,EAAEqgC,SAASjzC,EAAEA,EAAE,aAAa,IAAIsT,EAAE,EAAE,MAAMA,IAAIA,EAAEV,EAAEU,GAAGV,EAAE5S,EAAEsT,GAAgB,OAAblQ,KAAKmQ,EAAE,MAAaX,GACpT/J,EAAEvK,UAAUsK,EAAE,SAAS7I,GAAG,IAAIC,EAAmC4S,EAAE0/B,EAAnCh/B,EAAElQ,KAAKka,MAAMlf,OAAOgF,KAAKkQ,EAAE,EAAE,EAAQ+C,EAAEjT,KAAKka,MAAM9H,EAAEpS,KAAKrD,EAA8M,OAA5MA,IAAI,iBAAkBA,EAAEsB,IAAIiS,EAAEvT,EAAEsB,GAAG,iBAAkBtB,EAAE0zC,IAAIngC,GAAGvT,EAAE0zC,IAAI,EAAEngC,EAA+CV,GAAd0/B,GAA3Bj8B,EAAEjY,OAAOgF,KAAKkQ,GAAGlQ,KAAKjD,EAAE,GAAY,EAAP,IAAU,GAAMqV,EAAEpX,OAAOoX,EAAEpX,OAAOk0C,EAAE98B,EAAEpX,QAAQ,EAAGwU,EAAE4C,EAAEpX,OAAOkV,EAAE3S,GAAGX,EAAE,IAAIsrC,WAAW14B,IAAKjP,IAAI6R,GAAIxV,EAAEwV,EAASpS,KAAKrD,EAAEC,GACrT6I,EAAEvK,UAAU4C,EAAE,WAAW,IAA0BqS,EAAoD++B,EAAEj8B,EAAEb,EAAE+8B,EAAhFxyC,EAAE,EAAEC,EAAEoD,KAAKrD,EAAEuT,EAAElQ,KAAKiT,EAAIzD,EAAE,IAAKjS,EAAE2qC,WAAWmH,OAAOrvC,KAAKvD,GAAGuD,KAAKmQ,EAAE,QAAgB,GAAG,IAAID,EAAElV,OAAO,OAAOuC,EAAEyC,KAAKrD,EAAEkzC,SAAS,MAAM7vC,KAAKmQ,GAAGnQ,KAAKrD,EAAE0B,MAAM,MAAM2B,KAAKmQ,GAAO,IAAJ++B,EAAE,EAAMj8B,EAAE/C,EAAElV,OAAOk0C,EAAEj8B,IAAIi8B,EAAc,IAAJ98B,EAAE,EAAM+8B,GAAfh/B,EAAED,EAAEg/B,IAAel0C,OAAOoX,EAAE+8B,IAAI/8B,EAAE5C,EAAE7S,KAAKwT,EAAEiC,GAAW,IAAR88B,EAAE,MAAUj8B,EAAEjT,KAAKmQ,EAAE++B,EAAEj8B,IAAIi8B,EAAE1/B,EAAE7S,KAAKC,EAAEsyC,GAAa,OAAVlvC,KAAKiT,EAAE,GAAUjT,KAAK2xC,OAAOniC,GACjV/J,EAAEvK,UAAU+J,EAAE,WAAW,IAAItI,EAAEC,EAAEoD,KAAKmQ,EAAkI,OAAhI5S,EAAEyC,KAAK7C,GAAGR,EAAE,IAAIurC,WAAWtrC,IAAK2D,IAAIP,KAAKrD,EAAEkzC,SAAS,EAAEjzC,IAAKD,EAAEqD,KAAKrD,EAAEkzC,SAAS,EAAEjzC,IAAIoD,KAAKrD,EAAE3B,OAAO4B,IAAIoD,KAAKrD,EAAE3B,OAAO4B,GAAGD,EAAEqD,KAAKrD,GAAUqD,KAAK2xC,OAAOh1C,GAC3L40C,EAAEr2C,UAAUi0C,EAAE,WAAW,IAAiBvyC,EAAEsT,EAAfvT,EAAEqD,KAAKka,MAAuC,GAA7Btd,EAAEoD,KAAKwwC,EAAErB,IAAInvC,KAAKkQ,EAAElQ,KAAKwwC,EAAEtgC,EAAKlQ,KAAKyvC,EAAE,CAACv/B,GAAGvT,EAAEqD,KAAKkQ,MAAM,GAAGvT,EAAEqD,KAAKkQ,MAAM,GAAGvT,EAAEqD,KAAKkQ,MAAM,EAAEvT,EAAEqD,KAAKkQ,QAAQ,EAAE,IAAIC,EAAEvT,EAAE,GAAG,iBAAkBuT,EAAE,CAAC,IAAkB++B,EAAEj8B,EAAhBzD,EAAEW,EAAEvB,MAAM,IAAY,IAAJsgC,EAAE,EAAMj8B,EAAEzD,EAAExU,OAAOk0C,EAAEj8B,EAAEi8B,IAAI1/B,EAAE0/B,IAAuB,IAAnB1/B,EAAE0/B,GAAGr/B,WAAW,MAAU,EAAEM,EAAEX,EAAE,IAAI,IAAuB1R,EAAnBsU,EAAE,EAAE+8B,EAAE,EAAEzyC,EAAEyT,EAAEnV,OAASiD,EAAE,EAAE,EAAEvB,GAAG,CAAiBA,GAAhBoB,EAAE,KAAKpB,EAAE,KAAKA,EAAO,GAAayyC,GAAV/8B,GAAGjC,EAAElS,aAAkBH,GAAGsU,GAAG,MAAM+8B,GAAG,MAAM,GAAGj/B,KAAKi/B,GAAG,GAAG/8B,KAAK,EAAE,MAAMs9B,MAAM,6BAA8B,OAAO9yC,GAAG,IAAI60C,EAAG,EAAEt0C,EAAE,eAAeo0C,GAAGp0C,EAAE,oCAAoCo0C,EAAEr2C,UAAUi0C,GAAG,IAA+ByC,EAAEC,EAAEC,EAAEC,EAAjCC,EAAE,CAACC,SAAStC,EAAEvzC,EAAE81C,MAAMvC,EAAEpyC,GAAY,GAAGtC,OAAO4W,KAAK+/B,EAAE32C,OAAO4W,KAAKmgC,QAAQ,IAAIH,KAAKD,EAAE,GAAGE,EAAE,EAAEE,EAAEJ,EAAEE,KAAKD,EAAM,IAAJC,EAAE,EAAMC,EAAGH,EAAE52C,OAAO82C,EAAEC,IAAKD,EAAS30C,EAAE,4BAAT00C,EAAED,EAAEE,IAAkCE,EAAEH,IACrsB,IAAIM,EAAKtD,EAAIsD,M,iHCfb,2BACA,2BAGA,QAGA,SACA,SAWA,MAAsBC,UAA+C,EAAA5rB,WAEpE,iBACC,OAAO,EAER,iBACC,OAAOxmB,KAAKunB,YAAcvnB,KAAK4S,cAWtB,6BAA6B8U,GACtC,OAAI,UAAeA,GACXA,EAAU,GAEVA,EAIC,oBACT1nB,KAAKgyB,OAAO9T,MAAML,QAElB,MAAMw0B,EAAYryC,KAAKsyC,QAAQtyC,KAAKunB,YACnB,MAAb8qB,GACCryC,KAAK+mB,yBACR/mB,KAAK+mB,uBAAuBwrB,oBAAehuC,GAAW,GACtDvE,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAWyqB,qBAElCH,GAAaryC,KAAKinB,SACrBjnB,KAAKyyC,cAAcJ,GACnBryC,KAAKiY,qBAAqBjY,QAGvB,UAAgBA,KAAKunB,aACxBvnB,KAAK+mB,uBAAyB/mB,KAAK+mB,wBAA0B,IAAI,EAAA2rB,qBAAqB1yC,MAClFA,KAAKunB,YAAcvnB,KAAK+mB,uBAAuB4rB,aAClD3yC,KAAK+mB,uBAAuBwrB,eAAevyC,KAAKunB,YAChDvnB,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAWyqB,sBAGtCxyC,KAAKgyB,OAAO9T,MAAM3d,IAAI,2BAA2BP,KAAKqI,gBAIzC,sB,yDACf,IAA8B,QAA1B,EAAArI,KAAKspB,6BAAqB,eAAE7oB,UAAWT,KAAKspB,sBAAsBspB,kBAAmB,CACxF,MAAMC,QAA0B7yC,KAAKspB,sBAAsBwpB,qBAC3D,GAAI9yC,KAAKspB,sBAAsBypB,WAC9B/yC,KAAKgyB,OAAO9T,MAAM3d,IACjB,sBAAsBP,KAAKspB,sBAAsBqpB,gBAAgB3yC,KAAKspB,sBAAsBiU,sBAEvF,CACN,MAAM8U,EAAYryC,KAAKsyC,QAAQO,GACd,MAAbR,GACCryC,KAAKgyB,OAAO9T,MAAMzd,QACrBT,KAAKgyB,OAAO9T,MAAML,QAEnB7d,KAAKyyC,cAAcJ,IAEnBryC,KAAKgyB,OAAO9T,MAAM3d,IACjB,uCAAuCsyC,OAAuB7yC,KAAKspB,sBAAsBqpB,oBAMtF,cAAcn9B,GACrBxV,KAAKinB,OAASzR,EACVxV,KAAK0oB,cACR1oB,KAAK0oB,aAAasqB,4BAEnBhzC,KAAKvB,QAAQw0C,mBACbjzC,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,eACrC9nC,KAAKkY,sBA/EP,uB,2FCnBA,2BACA,QACA,SAEA,SAIA,MAAsBg7B,UAAgD,EAAA1sB,WAAtE,c,oBACS,KAAA2sB,uBAAyB,EAAAC,WAEjC,iBACC,OAAOpzC,KAAKopB,YAEb,iBACC,OAAO,EAER,iBACC,IAAK,IAAIzsB,KAAKqD,KAAK8oB,WAClB,IAAKnsB,EAAE8sC,WACN,OAAO,EAGT,OAAO,EAER,gBACC,OAAOzpC,KAAKopB,YAAYpkB,IAAKrI,GAAMA,EAAE+qB,WAEtC,2BACC,OAAO1nB,KAAK0nB,UAGb,kBACC,GAAwB,MAApB1nB,KAAKopB,YACR,OAED,IAAIhnB,EAAQ,EACZpC,KAAKopB,YAAc,IAAIimB,MAAMrvC,KAAKqpB,gBAAgBruB,QAClD,IAAK,IAAIq4C,KAAkBrzC,KAAKqpB,gBAAiB,CAChD,MAAMiqB,EAAY,IAAItzC,KAAKmzC,uBAAuBnzC,KAAKoD,OACvD,IAAImwC,EAEHA,EADG,UAAevzC,KAAKkoB,gBACTloB,KAAKkoB,eAAe9lB,GAEnBpC,KAAKkoB,eAAuBmrB,GAE5CC,EAAU70C,QAAQmlB,KAAK5jB,KAAKvB,SAC5B60C,EAAUE,eAAeD,GAGzBD,EAAUnzB,SAAS,GAAGngB,KAAKnD,OAAOw2C,KAClCC,EAAUG,iBAAiBzzC,MAE3BA,KAAK4oB,gBAAgB0qB,GAErBtzC,KAAKopB,YAAYhnB,GAASkxC,EAC1BlxC,KAKc,sB,yDACTpC,KAAK0zC,qBACX1zC,KAAKgzC,+BAEN,6BAGA,iB,MACC,IAAK,IAAIr2C,KAAKqD,KAAK8oB,WAClB,GAA2B,QAA3B,EAAInsB,EAAE2sB,6BAAqB,eAAE7oB,OAC5B,OAAO,EAGT,OAAO,EAGM,qB,mDACb,MAAMqoB,EAAa9oB,KAAK8oB,WAMlB6qB,EAAW,GACjB,IAAK,IAAIh3C,KAAKmsB,EACTnsB,EAAEwb,UACLw7B,EAASr4C,KAAKqB,EAAEi3C,iBAGZzrB,QAAQ0rB,IAAIF,GAMlB3zC,KAAKkY,wBAMI,6BAA6BwP,GACtC,GAAK,UAAeA,GAKnB,OAAOA,EALwB,CAC/B,MAAMosB,EAAmBpsB,EAEzB,OADqD1nB,KAAK8oB,WAAW9jB,IAAI,IAAM8uC,IAOvE,oBACT,MAAMC,EAAS/zC,KAAKoD,MAAM2wC,OAC1BA,EAAOC,QACP,MAAMlrB,EAAa9oB,KAAK8oB,WACxB,IAAK,IAAInsB,KAAKmsB,EACbnsB,EAAEkrB,gBAAgBosB,oBAInB,MAAM32C,EAAQ0C,KAAKunB,WACnB,GAAI,UAAejqB,GAClB,IAAK,IAAIxC,EAAI,EAAGA,EAAIguB,EAAW9tB,OAAQF,IACtCguB,EAAWhuB,GAAGyF,IAAKjD,EAAcxC,SAGlC,IAAK,IAAIA,EAAI,EAAGA,EAAIguB,EAAW9tB,OAAQF,IAAK,CAC3C,MAAMu4C,EAAiBrzC,KAAKqpB,gBAAgBvuB,GAC5CguB,EAAWhuB,GAAGyF,IAAKjD,EAAc+1C,IAUnCU,EAAOG,UAEP,IAAK,IAAIp5C,EAAI,EAAGA,EAAIguB,EAAW9tB,OAAQF,IACtCguB,EAAWhuB,GAAG+sB,gBAAgBssB,sBAI/Bn0C,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,gBA1IvC,wB,8ECRA,mBACC,mBAAmBxiC,GAClB,MAAM,IAAIoqC,MAAM,gC,8ECAlB,qBACC,YAAoB3pC,EAA2BquC,EAAgCC,GAA3D,KAAAtuC,QAA2B,KAAAquC,eAAgC,KAAAC,gBAE/E,OACC,OAAOr0C,KAAK+F,MAEb,cACC,OAAO/F,KAAKo0C,aAEb,eACC,OAAOp0C,KAAKq0C,iB,8ECHd,uBACC,YAAoBtuC,EAAuB0gB,EAAkC,IAAzD,KAAA1gB,QAAuB,KAAA0gB,WAE3C,OACC,OAAOzmB,KAAK+F,MAEb,yBACC,OAAO/F,KAAKymB,SAAiC,yBAAK,EAEnD,UACC,OAAOzmB,KAAKymB,SAAkB,QAE/B,eACC,OAAOzmB,KAAKymB,SAAa,GAK1B,SACC,OAAOzmB,KAAKymB,SAAiB,QAAK,GAEnC,SACC,OAAOzmB,KAAKymB,SAAiB,QAAK,M,8EC/BpC,eAIA,6CACS,KAAA6tB,eAA2C,GAEnD,QACCt0C,KAAKs0C,eAAiB,GAGvB,KAAK3X,GACJ38B,KAAKs0C,eAAeh5C,KAAKqhC,GAE1B,gBACCp+B,EACA1B,EACA+V,EACAs4B,GAEA,MAAMvO,EAAe,IAAI,EAAAra,YAAY/jB,EAAM1B,EAAM+V,EAAes4B,GAChElrC,KAAKs0C,eAAeh5C,KAAKqhC,GAG1B,WACC,OAAO38B,KAAKs0C,kB,8ECzBd,eACA,QACA,OAGA,OAEA,SAAgBC,EAA4CnyB,GAC3D,OAAO,cAAoBA,EAApB,c,oBACN,KAAAvY,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAA21C,kBAAoB,EAAAlyB,YAAY1jB,QAAQ,GACxC,KAAAyL,YAAc,EAAAiY,YAAY1jB,QAAQ,GAClC,KAAA61C,QAAU,EAAAnyB,YAAYxjB,MAAM,GAC5B,KAAA41C,WAAa,EAAApyB,YAAYxjB,MAAM,GAC/B,KAAA61C,QAAU,EAAAryB,YAAY1jB,QAAQ,KAPhC,qBAW8B,EAAAud,SAQEo4B,EAAiB,EAAAzrC,kBACpB,EAAAwS,aAM7B,MAAas5B,UAAyB,EAAA/kB,eACrC,cAAcpsB,GACb,MAAMN,EAAWM,EAAKN,SAChBqb,EAAK/a,EAAK+a,GAChBrb,EAAS0G,MAAM+Z,KAAKpF,EAAG3U,OACvB,MAAMgrC,EAAmBr2B,EAAGg2B,kBACxBK,GAAoB1xC,EAASiH,eAChCjH,EAASiH,aAAeyqC,EACxB1xC,EAAS+sB,aAAc,GAGxB/sB,EAASsxC,QAAUj2B,EAAGi2B,QACtBtxC,EAASkH,YAAcmU,EAAGnU,aAAemU,EAAGi2B,QAAU,EACtDtxC,EAASmH,WAAY,EACrBnH,EAAS2xC,UAAYt2B,EAAGk2B,WACxBvxC,EAAS4xC,IAAMv2B,EAAGm2B,SAfpB,sB,8ECjCA,eACA,QACA,OACA,OAGA,SAAgBJ,EAA4CnyB,GAC3D,OAAO,cAAoBA,EAApB,c,oBAEN,KAAA/X,YAAc,EAAAiY,YAAY1jB,QAAQ,GAClC,KAAA61C,QAAU,EAAAnyB,YAAYxjB,MAAM,GAC5B,KAAA41C,WAAa,EAAApyB,YAAYxjB,MAAM,GAC/B,KAAA61C,QAAU,EAAAryB,YAAY1jB,QAAQ,KANhC,qBAU8B,EAAAud,SAQEo4B,EAAiB,EAAAzrC,kBAEpB,EAAAwS,aAM7B,MAAas5B,UAAyB,EAAA/kB,eACrC,cAAcpsB,GACb,MAAMN,EAAWM,EAAKN,SAChBqb,EAAK/a,EAAK+a,GAEZrb,EAASsvB,SAASgiB,UACrBtxC,EAASsvB,SAASgiB,QAAQn3C,MAAQkhB,EAAGi2B,SAEtCtxC,EAASkH,YAAcmU,EAAGnU,aAAemU,EAAGi2B,QAAU,EACtDtxC,EAASmH,WAAY,EACrBnH,EAAS2xC,UAAYt2B,EAAGk2B,WACxBvxC,EAAS4xC,IAAMv2B,EAAGm2B,SAXpB,sB,2FChCA,QAOA,QAEA,MAAsBK,UAGZ,EAAA15B,aAHV,c,oBAKW,KAAAyD,6BAA+B,EAAA3e,YAAY0G,GACrD,uB,MACCb,MAAM0V,uBAEN3b,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKuH,qBAAqB2tC,UAAUr3C,KAAKmC,KAAKuH,uBACxD,QAAxB,EAAAvH,KAAKohB,2BAAmB,SAAE+zB,OAQ3B,kBACC,OAAOn1C,KAAKuH,qBAAqB2pB,UAAUhV,kBAO5C,2BACC,OAAQlc,KAAKo1C,sBAAwBp1C,KAAKo1C,uBAAyBp1C,KAAKq1C,+BAIzE,YAA+C92C,GAC9C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAiDhjB,GAChD,OAAO0H,MAAMwb,cAAcljB,GAQtB,sB,mDACDyB,KAAKuH,qBAAqB+tC,oBAC7Bt1C,KAAKu1C,cAGS,W,mDACXv1C,KAAKmD,iBACFnD,KAAKuH,qBAAqB2pB,UAAUS,iBAAiB3xB,KAAKmD,gBAC1DnD,KAAKuH,qBAAqBiuC,oBAtDnC,yB,8ECTA,eAGA,OACA,QACA,QAGwC,EAAArzB,uBAAuB,EAAArZ,kBAE/D,MAAsB2sC,UAGZ,EAAAC,kBAHV,c,oBAIiB,KAAAx1C,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MACtD,KAAAyiB,qBAA4C,IAAI,EAAAC,oBAAoB1iB,MAE7E,uBACCiG,MAAM0V,uBACN3b,KAAKyiB,qBAAqBrb,kBAG3B,OACCpH,KAAKyiB,qBAAqBgW,SAC1Bz4B,KAAK21C,sBACL31C,KAAK41C,uBACL51C,KAAK+b,gBAAgBoF,YAhBvB,iC,8ECVA,cACA,QAEA,OACA,QAGA,QACA,SAAgB00B,EAAsDzzB,GACrE,OAAO,cAAoBA,EAApB,c,oBACN,KAAA0zB,YAAc,EAAAxzB,YAAY1jB,QAAQ,GAClC,KAAAm3C,YAAc,EAAAzzB,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACmmB,YAAa,OAHhE,+BAM0CD,EAA2B,EAAA/sC,kBACrE,MAAsBktC,UAAgD,EAAA35B,aAAtE,c,oBACiB,KAAAnc,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,OADhE,2BAOA,wBAGC,YAAsByD,EAAiBsC,GAAjB,KAAAtC,OAAiB,KAAAsC,QAF7B,KAAAsX,QAAU,IAAI,EAAA9T,KACd,KAAA0S,UAAY,IAAI,EAAAgqB,kBAAkB,CAACgQ,WAAW,EAAMlB,KAAK,IAGnE,QACC/0C,KAAKqd,QAAQxgB,KAAOmD,KAAK+F,MACzB/F,KAAKk2C,eAGN,aACC,OAAOl2C,KAAKqd,W,8ECtBd,yBAEC,YACS5Z,EACA0yC,EACApwC,GAFA,KAAAtC,OACA,KAAA0yC,sBACA,KAAApwC,QAGT,kBACC/F,KAAKyD,KAAKvD,MAAMI,QAAQE,SAAS,KAChCR,KAAKo2C,6BAIC,2B,UACP,GAAIp2C,KAAKyD,KAAKvD,MAAMI,QAAQG,OAAQ,CACnC,MAAM1C,EAAoB,QAAd,EAAGiC,KAAKq2C,cAAM,eAAEt4C,OACxBA,IACHiC,KAAKyD,KAAK1F,OAAOof,IAAIpf,GACT,QAAZ,EAAAiC,KAAKs2C,eAAO,SAAE7d,cAET,CACN,MAAM16B,EAAqB,QAAf,EAAGiC,KAAKs2C,eAAO,eAAEv4C,OACzBA,GACHiC,KAAKyD,KAAK1F,OAAOqf,OAAOrf,IAI3B,aACC,GAAIiC,KAAKyD,KAAKvD,MAAMI,QAAQG,OAC3B,OAAQT,KAAKs2C,QAAUt2C,KAAKs2C,SAAWt2C,KAAKu2C,iBAG9C,cACC,OAAOv2C,KAAKyD,KAAKvD,MAAMI,QAAQG,QAAUT,KAAKyD,KAAK+a,GAAGs3B,YAG/C,iBACP,MAAMO,EAAS,IAAIr2C,KAAKm2C,oBAAoBn2C,KAAKyD,KAAMzD,KAAK+F,OAG5D,OAFAswC,EAAOG,QACPx2C,KAAKyD,KAAKgzC,MAAMt5B,IAAIk5B,EAAOt4C,QACpBs4C,EAGR,SACKr2C,KAAK02C,SACH12C,KAAKs2C,UACTt2C,KAAKs2C,QAAUt2C,KAAKu2C,kBAEjBv2C,KAAKs2C,UACRt2C,KAAKs2C,QAAQv4C,OAAO24C,SAAU,EAC9B12C,KAAKs2C,QAAQ7d,WAGVz4B,KAAKs2C,UACRt2C,KAAKs2C,QAAQv4C,OAAO24C,SAAU,M,+EClElC,cACA,QAEA,OACyC,EAAA5tC,iBACzC,MAAa6tC,UAA2B,EAAAt6B,aAAxC,c,oBAEW,KAAAK,0BAAoC,EAW9C,gBACC,OAAO,IAAI,EAAAnR,MAGZ,OACCvL,KAAK+b,gBAAgBoF,YAlBvB,wB,8ECFA,MAEA,OACA,4BAA4DiB,GAC3D,OAAO,cAAoBA,EAApB,c,oBACN,KAAAw0B,MAAQ,EAAAt0B,YAAYtjB,QAAQ,EAAG,CAC9B0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,QAKxB,yBACC,YAAoBlhC,GAAA,KAAAA,OASpB,SACC,MAAM1F,EAASiC,KAAKyD,KAAK1F,OASzBA,EAAO84C,OAAOt2C,IAAI,GAClBxC,EAAO84C,OAAOC,OAAO92C,KAAKyD,KAAK+E,OAAOuuC,QAjCrB,a,2FCHnB,SAEA,OACA,OAEA,2BAMA,UACA,SAEA,QACA,QAaA,SAASC,EAA4B50C,GACpC,MAAO,CACNkjC,eAAgB,CAACC,QAAS,EAAAnlC,YAAY62C,MACtCtnB,WAAY,CACXunB,gBAAiB,EACjB,CAAC,wBAAwB90C,KAAU,IAKtC,aACA,wCAAwEggB,GACvE,OAAO,cAAoBA,EAApB,c,oBACN,KAAA+0B,aAAe,EAAA70B,YAAYvjB,SAE3B,KAAAm4C,gBAAkB,EAAA50B,YAAY1jB,QAAQ,GACtC,KAAAw4C,uBAAyB,EAAA90B,YAAY1jB,QAAQ,EAtBvC,CACN+wB,WAAY,CACXunB,gBAAiB,KAqBlB,KAAAG,mBAAqB,EAAA/0B,YAAYrjB,cAAc,GAAI+3C,EAA4B,IAC/E,KAAAM,uBAAyB,EAAAh1B,YAAY1jB,QAAQ,EAxBvC,CACN+wB,WAAY,CACXunB,gBAAiB,KAuBlB,KAAAK,mBAAqB,EAAAj1B,YAAYrjB,cAAc,GAAI+3C,EAA4B,IAC/E,KAAAQ,uBAAyB,EAAAl1B,YAAY1jB,QAAQ,EA1BvC,CACN+wB,WAAY,CACXunB,gBAAiB,KAyBlB,KAAAO,mBAAqB,EAAAn1B,YAAYrjB,cAAc,GAAI+3C,EAA4B,IAC/E,KAAAU,uBAAyB,EAAAp1B,YAAY1jB,QAAQ,EA5BvC,CACN+wB,WAAY,CACXunB,gBAAiB,KA2BlB,KAAAS,mBAAqB,EAAAr1B,YAAYrjB,cAAc,GAAI+3C,EAA4B,OAIjF,8BAcC,YAAoBvzC,GAAA,KAAAA,OAXZ,KAAAm0C,wBAAqD,GACrD,KAAAC,wBAAsD,GACtD,KAAAC,yBAAgD,GAChD,KAAAC,wCAA+D,GAC/D,KAAAC,uCAAiD,EAEjD,KAAAC,oBAAiD,GAEjD,KAAAC,mCAAqD,GACrD,KAAAC,+BAAsD,GAK9D,OAAOhR,EAA2B38B,EAAe4tC,GAChD,MAAM/5B,EAAWre,KAAKqe,SAAS8oB,GAC/B,GAAI9oB,EACH,GAAIre,KAAKyD,KAAK+a,GAAG04B,gBAAiB,CACjC,MAAMmB,EAAWr4C,KAAKq4C,SAASlR,GAC3BkR,IACHA,EAASr6B,QAAQxT,EAAKlF,EAAGkF,EAAKjF,GAC9B8yC,EAASp6B,eAGVje,KAAKyD,KAAK60C,uBAAuBF,GAKjC/5B,EAASJ,OAAOje,KAAKyD,KAAKL,MAAMm1C,cAAev4C,KAAKyD,KAAK1F,QAKpD,SAASopC,GAChB,OAAOnnC,KAAK43C,wBAAwBzQ,EAAOz3B,IAG5C,gBAAgBy3B,EAA2B38B,GAC1C,MAAMguC,EAAK,EAAAp9B,KAAKZ,qBAAqBi+B,kBAAkBtR,GAEjD9oB,EAAW,IAAI,EAAAq6B,cAAc,CAClCvR,OAAQA,EACRwR,WAAW,EACXC,OAAO,EACPrT,QAASiT,IA2BV,OAxBAn6B,EAASw6B,UAAUl7B,SAAU,EAC7BU,EAASy6B,yBAA0B,EAGnCz6B,EAAS06B,YAAc,EAAAC,sBACvB36B,EAAS46B,oBAAsB,EAC/B56B,EAAS66B,eAAiB,EAAAC,aAa1B,EAAA/9B,KAAKZ,qBAAqB4+B,kBAAkB/6B,GAC5Cre,KAAK43C,wBAAwBzQ,EAAOz3B,IAAM2O,EAC1Cre,KAAKq5C,kBAAkBlS,EAAQ38B,GAC/B6T,EAASi7B,cAAcn7C,OAAOo7C,kBAEvBl7B,EAER,gBAAgB8oB,GACf,MAAM9oB,EAAWre,KAAKqe,SAAS8oB,GAC3B9oB,GACH,EAAAjD,KAAKZ,qBAAqBg/B,oBAAoBn7B,GAGhD,kBAAkB8oB,EAA2B38B,GAC5CxK,KAAK83C,yBAAyB3Q,EAAOz3B,IAAM1P,KAAK83C,yBAAyB3Q,EAAOz3B,KAAO,IAAI,EAAAmnB,QAC3F72B,KAAK83C,yBAAyB3Q,EAAOz3B,IAAIkU,KAAKpZ,GAE9C,MAAM6T,EAAWre,KAAKqe,SAAS8oB,GAC3B9oB,GACHA,EAASL,QAAQxT,EAAKlF,EAAGkF,EAAKjF,GAE/B,MAAM8yC,EAAWr4C,KAAKq4C,SAASlR,GAC3BkR,GACHA,EAASr6B,QAAQxT,EAAKlF,EAAGkF,EAAKjF,GAIxB,SAAS4hC,GAChB,OAAQnnC,KAAK63C,wBAAwB1Q,EAAOz3B,IAC3C1P,KAAK63C,wBAAwB1Q,EAAOz3B,KAAO1P,KAAKy5C,iBAAiBtS,GAG3D,iBAAiBA,GACxB,MAAM9oB,EAAWre,KAAKqe,SAAS8oB,GAC/B,GAAI9oB,EAAU,CAQb,MAAMg6B,EAAW,IAAI,EAAAqB,eAAer7B,GAOpC,OAHAg6B,EAASiB,cAAwC,EAA1Bn7C,OAAOo7C,kBAC9Bv5C,KAAK25C,oBAAoBxS,EAAOz3B,GAAI2oC,EAAUh6B,GAEvCg6B,GAOH,yB,mDACL,GAAIr4C,KAAKyD,KAAK+a,GAAG04B,gBAAiB,CAEjC,GADAl3C,KAAKi4C,oBAAsB,GACvBj4C,KAAKg4C,sCACR,OAID,GAFAh4C,KAAKg4C,uCAAwC,EAEzCh4C,KAAK45C,gCAAiC,CACzC55C,KAAKi4C,oBAAsB,GAE3B,IAAK,IAAIn9C,KAAK,UAAa,GAAI,CAI9B,GAHqBkF,KAAKk4C,mCAAmCp9C,GAE/BwC,MAChB,CACb,MACMu8C,EADQ75C,KAAKm4C,+BAA+Br9C,GAClB6rC,aAC5BkT,UACGA,EAAkBlgC,oBAGxB3Z,KAAKi4C,oBAAoB38C,KAAKu+C,KAKjC75C,KAAK85C,uBAGN95C,KAAKg4C,uCAAwC,OAE7Ch4C,KAAKi4C,oBAAsB,MAIrB,uBACP,MAAM8B,EAAM9+C,OAAO4W,KAAK7R,KAAK63C,yBAE7B,IAAK,IAAInoC,KAAMqqC,EAAK,CACnB,MAAM1B,EAAWr4C,KAAK63C,wBAAwBnoC,GACxC2O,EAAWre,KAAK43C,wBAAwBloC,GAC1C2oC,GACHr4C,KAAK25C,oBAAoBjqC,EAAI2oC,EAAUh6B,IAKlC,oBAAoB3O,EAAY2oC,EAA0Bh6B,GAEjE,GADwBre,KAAK+3C,wCAAwCroC,GAEpE,OAED1P,KAAK+3C,wCAAwCroC,IAAM,EAEnD1P,KAAKg6C,oBAAoB3B,GAEzB,MAAM4B,EAAoB,IAAI,EAAAC,WAAWl6C,KAAKyD,KAAKL,MAAMm1C,cAAev4C,KAAKyD,KAAK1F,QAClFk8C,EAAkBE,WAAa,EAC/B9B,EAAS+B,QAAQH,GAEjB,IAAK,IAAIJ,KAAqB75C,KAAKi4C,oBAClC4B,EAAkBQ,kBACjBhC,EACAr4C,KAAKyD,KAAK1F,OACViC,KAAK83C,yBAAyBpoC,GAC9B1P,KAAKyD,aAGAzD,KAAK+3C,wCAAwCroC,GAG7C,oBAAoB2oC,GAC3B,IAAIiC,EACJ,KAAQA,EAAcjC,EAASkC,OAAO/xB,OACrC,GAAI8xB,EAAa,CAChB,MAAME,EAAkCF,EACxC,GAAuC,mBAA5BE,EAAgBp8B,QAC1B,IACCo8B,EAAgBp8B,UACf,MAAO5O,GACRnM,QAAQiE,KAAKkI,IAMjB6oC,EAASkC,OAAS,GAGX,gCACP,OAAO,K,qIC/QT,E,KAAA,wBACA,QACA,QAIA,uBAKC,YAAsB92C,GAAA,KAAAA,OACrBzD,KAAKy6C,YAAc,IAAI,EAAAn8B,cAAc7a,EAAKL,MAAO,wBAGlD,iBACC,OAAOpD,KAAKy6C,YAGb,iBAAiBh3C,GAChB,IAAIi3C,EAAOj3C,EAAKlF,KAChB,MAAMo8C,EAAYD,EAAKA,EAAK1/C,OAAS,GAIrC,OAHK,UAAa8S,SAAS6sC,MAC1BD,GAAQ,KAEF,GAAGA,KAGX,uBAAuBlnC,GACtB,MAAM9S,EAASV,KAAKyD,KAAK/C,OACrBA,GAAUA,EAAOk6C,oBAAsBl6C,EAAO0gB,oBACjD1gB,EAAO0gB,oBAAoBy5B,eAAe76C,KAAKyD,KAAM+P,GAErDnQ,QAAQiE,KAAK,kDAGf,SAASkM,GACJA,GAAYxT,KAAKyD,KAAK5G,MACzBmD,KAAK86C,uBAAuBtnC,GAG9B,wBAAwBA,G,MACvBxT,KAAKyD,KAAKs3C,eAAevnC,GACzBxT,KAAKg7C,gBACLh7C,KAAKi7C,qBACDj7C,KAAKyD,KAAKm3C,qBACgB,QAA7B,EAAA56C,KAAKyD,KAAK2d,2BAAmB,SAAEG,WAAW3f,QAASs5C,IAClDA,EAAWt/B,gBAAgBq/B,wBAIzBj7C,KAAKyD,KAAK+7B,UAAUC,qBACvBz/B,KAAKyD,KAAKL,MAAM+3C,yCAAyCC,6BAA6Bp7C,KAAKyD,MAC3FzD,KAAKyD,KAAKL,MAAMi4C,uBAAuBC,iCAAiCt7C,KAAKyD,OAE9EzD,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUsiC,cAG1B,uBAAuBC,GACtBx7C,KAAKy7C,mBAAqBz7C,KAAKy7C,oBAAsB,GACrDz7C,KAAKy7C,mBAAmBngD,KAAKkgD,GAE9B,4BAA4BA,GAC3Bx7C,KAAK07C,wBAA0B17C,KAAK07C,yBAA2B,GAC/D17C,KAAK07C,wBAAwBpgD,KAAKkgD,GAGnC,gBACC,GAAIx7C,KAAKy7C,mBACR,IAAK,IAAID,KAAQx7C,KAAKy7C,mBACrBD,IAIH,qBACC,GAAIx7C,KAAK07C,wBACR,IAAK,IAAIF,KAAQx7C,KAAK07C,wBACrBF,O,6FC5EJ,2BACA,4BACA,4BACA,QACA,SAEA,SAqCA,SAAYG,GAEX,0BAFD,CAAY,EAAAA,sBAAA,EAAAA,oBAAmB,KAsI/B,0BAIC,YAAoBvS,GAAA,KAAAA,SAHZ,KAAAwS,4BAAsC,EAuStC,KAAAC,0CAA4C77C,KAAK87C,mCAAmCj+C,KAAKmC,MAEzF,KAAA+7C,yBAAmC,EAlS3C,IAAIt9C,GACHuB,KAAKg8C,iBAAmBv9C,EACxBuB,KAAKymB,SAAW,UAAiBzmB,KAAKg8C,kBAEvC,KAAKC,GACJj8C,KAAKg8C,iBAAmB,UAAiBC,EAAmB5nB,SAC5Dr0B,KAAKymB,SAAW,UAAiBw1B,EAAmBhwB,SAErD,WAAWpvB,EAA0BS,GACpC,OAAOrC,OAAO8iB,OAAO/d,KAAKymB,SAAU5pB,EAAMS,GAE3C,YACC,OAAO0C,KAAKopC,OAEb,WACC,OAAOppC,KAAKopC,OAAO3lC,KAEpB,cACC,OAAOzD,KAAKg8C,iBAEb,cACC,OAAOh8C,KAAKymB,SAIb,6BACC,OAAQ,UAAezmB,KAAKymB,SAAUzmB,KAAKg8C,kBAE5C,yBACC,MAAME,EAA0B,GAC1BC,EAAelhD,OAAO4W,KAAK7R,KAAKymB,UACtC,IAAK,IAAI0jB,KAAegS,EAClB,UAAen8C,KAAKymB,SAAS0jB,GAAcnqC,KAAKg8C,iBAAiB7R,KACrElvC,OAAO8iB,OAAOm+B,EAAW/R,EAAa,UAAiBnqC,KAAKymB,SAAS0jB,KAGvE,OAAO+R,EAER,8BACC,OAAOjhD,OAAO4W,KAAK7R,KAAKiqC,oBAIzB,6BACC,OAAOjqC,KAAKymB,SAAsC,yBAAK,EAIxD,eACC,OAAyC,MAAlCzmB,KAAKymB,SAAwB,UAAsD,MAAzCzmB,KAAKymB,SAA+B,gBAGtF,mBAIC,IAAMzmB,KAAKyD,OAAQzD,KAAKyD,KAAKL,MAAM0Z,mBAAmBs/B,OACrD,OAED,MAAMhkC,EAAWpY,KAAKq8C,eACN,MAAZjkC,GACCpY,KAAKyD,OAASzD,KAAKyD,KAAKsY,gBAAgBugC,YAC3ClkC,EAASpY,KAAKyD,KAAMzD,KAAKkZ,OAIpB,eACP,GAAIlZ,KAAKu8C,eACR,OAAQv8C,KAAKymB,SAAwB,SACpCzmB,KAAKymB,SAAwB,UAAKzmB,KAAKw8C,8BAGlC,8BACP,MAAMC,EAAkBz8C,KAAKymB,SAA+B,gBAC5D,GAAIg2B,EAAiB,CACpB,MAAMC,EAAoB,IAAIC,SAAS,OAAQ,QAAS,SAAU,WAAYF,GAC9E,MAAO,KACNC,EAAkB18C,KAAKyD,KAAMzD,KAAKyD,KAAKL,MAAO,KAAM,QAWvD,8BACC,IAAIw5C,EAGJ,GAA+B,MAA3B58C,KAAKkZ,MAAMwP,aACd,OAAO,EAGR,IAAIprB,GAAQ,EAIZ,OAHmD,OAA9Cs/C,EAAe58C,KAAKymB,SAAoB,QAC5CnpB,EAAQs/C,GAEFt/C,EAIR,4BACC,OAAO0C,KAAKymB,SAA8B,eAE3C,6BACC,OAAqC,MAA9BzmB,KAAK68C,sBAEb,2BACC,OAAI78C,KAAK68C,sBACD78C,KAAK68C,sBAAsC,UAE3C,KAQT,iCACC,MAAMC,EAAc98C,KAAKymB,SAAmB,WAC5C,OAAIq2B,GACIA,EAAwB,eAEzB,EAIR,YACC,OAAO98C,KAAKymB,SAAc,OAAK,EAIhC,eACC,OAA4B,MAArBzmB,KAAK+8C,aAGb,mBACC,OAAO/8C,KAAKymB,SAAa,KAQ1B,mBACC,OAAIzmB,KAAK+8C,aACD/8C,KAAK+8C,aAAoB,QAEzB,GAIT,qBACC,OAAO/8C,KAAKg9C,SAIb,mBACC,OAA2C,IAApCh9C,KAAKymB,SAAyB,UAEtC,eACC,OAAOzmB,KAAKymB,SAAwB,SAErC,cACC,OAAwB,MAAjBzmB,KAAKi9C,SAIb,6BACC,OAAOj9C,KAAKymB,SAAuB,eAEpC,6BACC,GAAIzmB,KAAKk9C,uBACR,OAAOl9C,KAAKk9C,uBAA6C,QAI3D,0BACC,QArV8B,4BAqVCl9C,KAAKymB,WAC5BzmB,KAAKymB,SAAgC,wBAO9C,YAKC,OAAOzmB,KAAKymB,SAAqB,OAAK,CAAC,EAAG,GAG3C,WACC,OAAOzmB,KAAKymB,SAAoB,MAAK,IAG9B,eAIP,OAAOzmB,KAAKymB,SAA4B,cAAK,EAAC,GAAO,GAItD,gBAAgBnpB,GACf,MAAMonC,EAAQ1kC,KAAK0kC,MAEnB,OAAIpnC,GAASonC,EAAM,IAAMpnC,GAASonC,EAAM,GAChCpnC,EAEHA,EAAQonC,EAAM,IACiB,IAA3B1kC,KAAK2kC,eAAe,GAAcD,EAAM,GAAKpnC,GAElB,IAA3B0C,KAAK2kC,eAAe,GAAcD,EAAM,GAAKpnC,EAMvD,eACC,OAAO0C,KAAKymB,SAAqB,QAAK,EAIvC,sBACC,OAAOzmB,KAAKymB,SAAuB,QAEpC,iBACC,MAAM02B,EAAkBn9C,KAAKm9C,gBAC7B,OAAuB,MAAnBA,IACoC,IAAhCA,EAA0B,IAMnC,gBACC,OAAwC,IAAjCn9C,KAAKymB,SAAsB,SAAkD,IAApCzmB,KAAK47C,2BAEtD,iBACC,OAAQ57C,KAAKo9C,UAEd,kBAAkBvgC,GACjB7c,KAAKymB,SAAsB,QAAK5J,EAChC7c,KAAKkZ,MAAM4O,KAAK,EAAAC,WAAWs1B,iBAG5B,sBACC,MAAM9+C,EAAOyB,KAAKkZ,MAAM3a,KACxB,OACiC,IAAhCyB,KAAKymB,SAAqB,OAC1BloB,IAAS,EAAAG,UAAUC,QACnBJ,IAAS,EAAAG,UAAUW,WAClBd,IAAS,EAAAG,UAAUE,SAAWoB,KAAKs9C,kBAGtC,kBACC,OAAuC,IAAhCt9C,KAAKymB,SAAqB,MAIlC,kCACC,MAjawB,eAiaIzmB,KAAKymB,SAElC,0BACC,MAAM82B,EAAoBtiD,OAAO4W,KAAK7R,KAAKymB,SAA0B,YAAK,IACpEhjB,EAAOzD,KAAKkZ,MAAMzV,KACxB,OAAO,UACN85C,EAAkBv4C,IAAKnI,IACtB,MAAMqc,EAAQzV,EAAK+E,OAAOtL,IAAIL,GAC9B,GAAIqc,EACH,OAAOA,EAEP7V,QAAQ6a,MACP,SAASrhB,2CAA8CmD,KAAKkZ,MAAMrc,gBAAgBmD,KAAKkZ,MAAMzV,KAAKlF,WAUvG,yBACC,GAAIyB,KAAK+7C,wBACR,OAED/7C,KAAK+7C,yBAA0B,EAC/B,MAAMljC,EAAe7Y,KAAKw9C,0BAC1B,GAAI3kC,EAAa7d,OAAS,EAAG,CAC5BgF,KAAKy9C,uBAAyB,IAAI,EAAAn/B,cAActe,KAAKkZ,MAAM9V,MAAO,oBAClE,IAAK,IAAIs6C,KAAe7kC,EACvB7Y,KAAKy9C,uBAAuB70B,gBAAgB80B,GAE7C19C,KAAKy9C,uBAAuBplC,oBAC3B,sCACArY,KAAK67C,4CAIA,qCACP77C,KAAK29C,oBACL39C,KAAKkZ,MAAMhB,qBAGN,oB,mDACL,MAAMzZ,EAAUuB,KAAKymB,SAA0B,WAC/C,GAAIhoB,EAAS,CACZ,MAAM+J,EAASxI,KAAKw9C,0BACd7J,EAAWnrC,EAAOxD,IAAK/G,GAAMA,EAAE21C,WACrC5zC,KAAK47C,4BAA6B,QAC5BzzB,QAAQ0rB,IAAIF,GAClB,IAAK,IAAIz6B,KAAS1Q,EAAQ,CACJ/J,EAAQya,EAAMrc,OACvBqc,EAAM5b,QAEjB0C,KAAK47C,4BAA6B,GAGpC57C,KAAKkZ,MAAM4O,KAAK,EAAAC,WAAWs1B,wB,oFCjgB9B,E,KAAA,uBAMa,EAAAO,gBAAkB,IAE/B,sBAIC,YAAmB1kC,GAAA,KAAAA,QAST,KAAA2kC,4BAA8B79C,KAAK89C,sBAAsBjgD,KAAKmC,MAP9D,cACTA,KAAK+9C,oBAAiBx5C,EAEb,UAAUzC,GACnB9B,KAAK+9C,eAAiB/9C,KAAK+9C,gBAAkBj8C,EAItC,sBAAsBoc,GACzB,UAAgBA,GACnBle,KAAK+9C,eAAiB7/B,EAEtBle,KAAK+9C,eAAiB7/B,EAAMpc,QAG9B,iBACC,OAA8B,MAAvB9B,KAAK+9C,eAEb,oBACC,OAAO/9C,KAAK+9C,eAEb,QACC/9C,KAAK+9C,oBAAiBx5C,EAGvB,cAAcd,GACb,MAAMu6C,EAAc,YAAYv6C,EAAKlF,OAErC,GADgByB,KAAag+C,GAE5B,OAAQh+C,KAAag+C,GAAav6C,GAElCzD,KAAKi+C,UAAU,iCAAiCx6C,EAAKlF,QAiC7C,0BAA0BkF,GACnC,MAAO,GAAGzD,KAAKk+C,cAAcz6C,EAAK06C,SAAS16C,EAAK26C,YAAYp+C,KAAKk+C,cAAcz6C,EAAK46C,SAE3E,2BAA2B56C,GAEpC,MAAO,GAAGzD,KAAKk+C,cAAcz6C,EAAK06C,SAAS16C,EAAK26C,YAAYp+C,KAAKk+C,cAAcz6C,EAAK46C,SAE3E,0BAA0B56C,GACnC,MAAO,GAAGzD,KAAKk+C,cAAcz6C,EAAK1F,WAAWiC,KAAKk+C,cAAcz6C,EAAKzF,YAE5D,+BAA+ByF,GACxC,MAAO,IAAIzD,KAAKk+C,cAAcz6C,EAAKmK,aAAa5N,KAAKk+C,cAAcz6C,EAAK66C,mBAAmBt+C,KAAKk+C,cAC/Fz6C,EAAK86C,cAMG,kBAAkB96C,GAC3B,MAAM8V,EAAO9V,EAAK6pC,KAClB,IAAIkR,EAAiB,GACrB,IAAK,IAAI1jD,EAAI,EAAGA,EAAIye,EAAKve,OAAQF,IAAK,CACrC,MAAM2jD,EAAWllC,EAAKze,GACD,cAAjB2jD,EAASlgD,KACPkgD,EAA6B5hD,KAAK,IAAM,EAAA+gD,gBAC5CY,EAAeljD,KAAK,MAAQ0E,KAAKk+C,cAAcO,GAAY,MAE3DD,EAAeljD,KAAK,IAAKmjD,EAA6B5hD,SAGvD2hD,EAAeljD,KAAK,MAAQ0E,KAAKk+C,cAAcO,GAAY,MAG7D,OAAOD,EAAet5C,KAAK,OAmBlB,iBAAiBzB,GAC1B,MAAO,GAAGA,EAAKi7C,S,2FCnIJ,EAAAC,cAAgB1jD,OAAO2jD,gBAAe,W,0DAAsB7qC,a,qFCDzE,E,KAAA,wBAEA,QAEA,QAEA,QAEA,SAEa,EAAA8qC,0CAA4C,CACxD,EAAAh7C,oBAAoB/E,MACpB,EAAA+E,oBAAoBI,KACpB,EAAAJ,oBAAoBK,KACpB,EAAAL,oBAAoBM,MAGrB,aACA,MAAM26C,UAAgC,EAAAh2C,iBAAtC,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,IAC1B,KAAAf,KAAO,EAAA+jB,YAAYtjB,QAAQ,EAAG,CAC7B8jC,KAAM,CACLC,QAAS,EAAA8b,0CAA0C75C,IAAI,CAACnI,EAAM/B,KACtD,CAAC+B,KAAMA,EAAMS,MAAOxC,SAK/B,MAAMiO,EAAe,IAAI+1C,EAEzB,MAAapgB,UAAwB,EAAA/3B,YAArC,c,oBACC,KAAAqC,cAAgBD,EAOR,KAAAg2C,kCAAoC/+C,KAAKg/C,4BAA4BnhD,KAAKmC,MAElE,KAAA8L,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MARjG,cACC,MAAO,YAQR,kBACCA,KAAKqY,oBAAoB,wBAAyBrY,KAAKk/C,sCAAsCrhD,KAAKmC,OAClGA,KAAKw/B,UAAUyV,mBAAmBj1C,KAAK++C,mCACvC/+C,KAAK8L,0BAA0B1E,kBAE/BpH,KAAK8L,0BAA0BC,kCAAkC,IAAM,IACvE/L,KAAK8L,0BAA0BG,mCAAmC,IAAM,CACvE,EAAA4yC,0CAA0C7+C,KAAKwe,GAAGjgB,QAMpD,gB,OACuB,QAAtB,EAAIyB,KAAKuD,qBAAa,eAAEgE,qBAAqB40B,4BAC5Cn8B,KAAK+gB,UAAU,EAAAriB,UAAUE,QAAS,wBAAyB,GAO7D,iBACC,OAAO8/B,EAAgBygB,WAExB,kBACC,OAAOzgB,EAAgB0gB,YAaxB,UAAU32C,G,MAES,QAAlB,EAAAzI,KAAKuD,qBAAa,SAAEgE,qBAAqB2pB,UAAUmuB,yBAClDr/C,KACAyI,GAeF,qBACC,OAAO,UAAYzI,KAAKwe,GAAG3hB,MAE5B,UACC,OAAOmD,KAAKa,GAAGC,QAAQmH,+BAA+B,GAAG1J,KAO1D,uBAEC,OAAOyB,KAAKa,GAAG6G,OAAO+rB,YAAYiL,EAAgBygB,YAGnD,mCACC,OAAOn/C,KAAKa,GAAG6G,OAAO43C,6BAA6B5gB,EAAgBygB,YAQpE,0BAEC,OAAOn/C,KAAKa,GAAGC,QAAQu9B,uCAAuCr+B,KAAKwzB,YASpE,mBACC,OAAOxzB,KAAKa,GAAGC,QAAQu0B,oBAAoBr6B,OAAS,EAErD,mBACC,GAAIgF,KAAKwe,GAAG+gC,sBAAuB,CAElC,OAAqB,MADFv/C,KAAKa,GAAG6G,OAAO+rB,YAAYiL,EAAgBygB,YAG9D,OAAO,EAGD,wCACHn/C,KAAKw/C,cACRx/C,KAAKy/C,wBAQC,8BACa,IAAhBz/C,KAAKwe,GAAG3hB,MACXmD,KAAK/B,EAAEpB,KAAK0D,IAAIP,KAAKnD,OAhIxB,oBAKiB,EAAAsiD,WAAa,SACb,EAAAC,YAAc,O,8ECjC/B,eAIA,SAEA,SACA,SACA,SACA,SAGA,SACA,SACA,SACA,SAEA,6BACC,qBAAqB37C,GAIpB,OAAO,IAAI,EAAAi8C,iBAAiBj8C,GAG7B,sBAAsByV,GAIrB,OAAIA,aAAiB,EAAAk5B,kBACb,IAAI,EAAAuN,yBAAyBzmC,GAEjCA,aAAiB,EAAA0mC,kBACb,IAAI,EAAAC,8BAA8B3mC,GAEtCA,aAAiB,EAAA4mC,YACb,IAAI,EAAAC,wBAAwB7mC,GAEhCA,aAAiB,EAAAha,UACb,IAAI,EAAA8gD,sBAAsB9mC,GAE3B,IAAI,EAAA+mC,kBAAkB/mC,M,8EC1C/B,cAEA,SAcA,0BAEC,YAAoB3B,GAAA,KAAAA,SADZ,KAAA2oC,MAA+B,GAGvC,OACClgD,KAAKuX,OAAO4oC,iBAAiBC,gCAC7B,MAAMC,EAAgB,EAAA5iB,qBAAqB6iB,cAActgD,KAAKuX,OAAOyF,MAC/DujC,EAAaF,EAAc7lD,OAC3ByM,EAAUo5C,EAAcp5C,UAgB9B,OAdAjH,KAAKkgD,MAAQ,CAEZM,WAAY,CAEXC,MAAOzgD,KAAKuX,OAAOkpC,OAAS,EAC5BC,YAAa1gD,KAAKuX,OAAOmpC,YACzBC,mBAAoB3gD,KAAKuX,OAAOqpC,gBAAgBD,mBAEhDE,wBAAyB7gD,KAAKuX,OAAOupC,mBAAmBD,yBAEzD7jC,KAAMujC,EACNQ,GAAI95C,GAGEjH,KAAKkgD,MAGb,uBAAuBzyC,GAGtB,OAFAA,EAAOA,EAAKQ,QAAQ,KAAM,KAC1BR,EAAO,EAAA7I,WAAWo8C,mBAAmBvzC,M,8EC/CvC,SAAYy/B,GACX,8CACA,kBACA,cAHD,CAAY,EAAAA,WAAA,EAAAA,SAAQ,M,+ECEpB,qBACC,yBAAyBzpC,GAExB,OADcA,EAAKge,cAAc,UAOlC,mCAAmChe,GAElC,OADcA,EAAKge,cAAc,aACpBsI,OAAQtmB,GAGbA,EAAK+7C,iB,2FCdf,SAGA,SAEA,OACA,MAAMyB,UAAqC,EAAAn4C,iBAA3C,c,oBACC,KAAAo4C,UAAY,EAAA5+B,YAAY1jB,QAAQ,GAChC,KAAAuiD,aAAe,EAAA7+B,YAAY1jB,QAAQ,GACnC,KAAAwiD,WAAa,EAAA9+B,YAAY1jB,QAAQ,GACjC,KAAAyiD,SAAW,EAAA/+B,YAAY1jB,QAAQ,GAC/B,KAAA0iD,QAAU,EAAAh/B,YAAYxjB,MAAM,GAAK,CAChC6wB,WAAY,CAAC0xB,UAAU,KAExB,KAAAE,qBAAuB,EAAAj/B,YAAY1jB,QAAQ,GAC3C,KAAA4iD,aAAe,EAAAl/B,YAAYxjB,MAAM,IACjC,KAAA2iD,aAAe,EAAAn/B,YAAYxjB,MAAM,EAAG,CACnC4lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,KAAA+c,aAAe,EAAAp/B,YAAYxjB,MAAM,GAAI,CACpC4lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,KAAAgd,kBAAoB,EAAAr/B,YAAY/iB,QAAQ,CAAC,EAAG,SAE7C,MAAMwJ,EAAe,IAAIk4C,EAEzB,MAAaW,UAAqC,EAAAC,6BAAlD,c,oBACC,KAAA74C,cAAgBD,EAChB,cACC,MAAO,wBAMF,yBAAyByU,EAAgB5N,G,mDAK9C,OADiB,IAAI,EAAAkyC,cAActkC,EAAQ5N,MAI5C,eAAemyC,GACdA,EAASC,UAAYhiD,KAAKwe,GAAG0iC,UAC7Ba,EAASE,aAAejiD,KAAKwe,GAAG2iC,aAChCY,EAASG,WAAaliD,KAAKwe,GAAG4iC,WAE9BW,EAASI,cAAgBniD,KAAKwe,GAAG6iC,SACjCU,EAASK,cAAgBpiD,KAAKwe,GAAG8iC,QAEjCS,EAASM,YAAcriD,KAAKwe,GAAGgjC,aAE/BO,EAASO,mBAAqBtiD,KAAKwe,GAAG+iC,qBAEtCQ,EAASQ,YAAcviD,KAAKwe,GAAGijC,aAC/BM,EAASS,YAAcxiD,KAAKwe,GAAGkjC,aAE/BK,EAASU,cAAgBziD,KAAKwe,GAAGmjC,kBAAkBr8C,EACnDy8C,EAASW,cAAgB1iD,KAAKwe,GAAGmjC,kBAAkBp8C,EAGnDw8C,EAASY,YAAa,EAGvB,qBAAqBZ,EAA0B3a,GAC9C,MAAMwb,EAASxb,EAAY5+B,OAAOnD,QAAQ,UAC1C08C,EAASa,OAAOh/B,KAAKg/B,IAzCvB,kC,2FC9BA,SAGA,SAGA,OACA,QAUA,iCAAiExgC,GAChE,OAAO,cAAoBA,EAApB,c,oBACN,KAAAyV,QAAU,EAAAvV,YAAY1jB,QAAQ,GAC9B,KAAAoG,IAAM,EAAAsd,YAAYrjB,cAAc,EAAA+4B,YAAYC,kBAAkBC,GAAI,CAACvI,WAAY,CAACkI,QAAS,QAuB3F,+BAAoCgrB,GACnC,MAAO,CACN7kB,MAAM,EACN5lB,SAAU,CAAC3U,EAAoByV,KAC9B2pC,EAAiBpqB,OAAOh1B,MAI3B,+BAAoCq/C,EAA6CC,GAChF,MAAO,CACNpzB,WAAY,CAAC,CAACozB,GAAe,GAC7Bzd,eAAgB,CAACC,QAAS,EAAAnlC,YAAYm7B,KACtCyC,MAAM,EACN5lB,SAAU,CAAC3U,EAAoByV,KAC9B4pC,EAAWrqB,OAAOh1B,MAwBrB,MAAa20B,UAAiC,EAAAvI,eAC7C,YAAsBpsB,EAAiC40B,GACtDpyB,MAAMxC,GADe,KAAAA,OAAiC,KAAA40B,kBAEnB,MAA/Br4B,KAAKq4B,gBAAgB+U,SACxBptC,KAAKq4B,gBAAgB+U,QAAS,GAItB,UAAU4V,EAA6BC,GAChDD,EAAc3qC,oBAAoB,oBAAqB,KACtDrY,KAAKy4B,WAENwqB,EAAW5qC,oBAAoB,oBAAqB,KACnDrY,KAAKy4B,WAGP,cAAch1B,IAER,QACLN,EACA+/C,EACAF,EACAC,G,mDAEA,GAAIjjD,KAAKq4B,gBAAgB5F,SAAU,CAClC,MAAM0wB,EAAkBhgD,EAClBigD,EAAYF,QACZljD,KAAKqjD,4BAA4BF,EAAiBC,EAAWJ,EAAeC,GAEnF,GAAIjjD,KAAKq4B,gBAAgBirB,cAAe,CACvC,MAAM3U,EAAMxrC,EACNigD,EAAYF,QACZljD,KAAKujD,4BAA4B5U,EAAKyU,EAAWJ,EAAeC,OASlE,4BACL9/C,EACA+/C,EACAF,EACAC,G,mDAEAjjD,KAAKwjD,2BACJrgD,EACAA,EAASsvB,SACTywB,EACAF,EACAC,EACAjjD,KAAKyjD,2BAA2B5lD,KAAKmC,MACrCA,KAAK0jD,8BAA8B7lD,KAAKmC,UAGlC,2BACPmD,EACAsvB,EACAywB,EACA1nB,GAEA,MAAMmoB,EAA2C,MAA7BlxB,EAASywB,IAA+D,MAAnCzwB,EAASywB,GAAiB5lD,MACnF,IAAIsmD,GAA2B,EAC/B,GAAID,EAAa,CAC2BlxB,EAASywB,GAAiB5lD,MACjD+T,MAAQmqB,EAAQnqB,OACnCuyC,GAA2B,GAG7B,IAAKD,GAAeC,EAA0B,CAE7C,GADAnxB,EAASywB,GAAiB5lD,MAAQk+B,EAC9Bx7B,KAAK6jD,oBAAqB,CAC7B,MAAMC,EAAc9jD,KAAK+jD,aAAa,GAAGb,KACzC//C,EAAS6gD,QAAQF,GAAe,EAEjC3gD,EAAS6gD,QAAgB,OAAI,EAC7B7gD,EAAS+sB,aAAc,GAGjB,8BACP/sB,EACAsvB,EACAywB,GAEA,GAAIzwB,EAASywB,GAAiB5lD,MAAO,CAEpC,GADAm1B,EAASywB,GAAiB5lD,MAAQ,KAC9B0C,KAAK6jD,oBAAqB,CAC7B,MAAMC,EAAc9jD,KAAK+jD,aAAa,GAAGb,YAClC//C,EAAS6gD,QAAQF,GAEzB3gD,EAAS+sB,aAAc,GAGjB,aAAagzB,GACpB,MAAO,OAASA,EAAgBj1C,QAAQ,IAAK,IAAIg2C,cAQ5C,4BACL9gD,EACA+/C,EACAF,EACAC,G,mDAEAjjD,KAAKwjD,2BACJrgD,EACAA,EACA+/C,EACAF,EACAC,EACAjjD,KAAKkkD,2BAA2BrmD,KAAKmC,MACrCA,KAAKmkD,8BAA8BtmD,KAAKmC,UAGlC,2BACPmD,EACAihD,EACAlB,EACA1nB,GAEA,MAAMmoB,EAAgD,MAAlCS,EAAclB,GAClC,IAAIU,GAA2B,EAC/B,GAAID,EAAa,CAC2BS,EAAclB,GACrC7xC,MAAQmqB,EAAQnqB,OACnCuyC,GAA2B,GAGxBD,IAAeC,IACnBQ,EAAclB,GAAmB1nB,EACjCr4B,EAAS+sB,aAAc,GAGjB,8BACP/sB,EACAihD,EACAlB,GAEIkB,EAAclB,KACjBkB,EAAclB,GAAmB,KACjC//C,EAAS+sB,aAAc,GASX,2BACb/sB,EACAihD,EACAlB,EACAF,EACAC,EACAoB,EACAC,G,mDAOA,GALItB,EAAc7qC,iBACX6qC,EAAcpP,WAEIoP,EAAc1lD,MAE1B,CACR2lD,EAAW9qC,iBACR8qC,EAAWrP,WAGlB,MAAMjN,EAAasc,EAAWtc,aAC9B,GAAIA,EACH,GAAIA,EAAWnmB,gBAAkB,EAAApgB,YAAYm7B,IAAK,CACjD,MAAMgpB,EAAe5d,EAGfnL,SADkB+oB,EAAa5qC,qBACX6hB,UAE1B,GAAIA,EAEH,YADA6oB,EAAgBlhD,EAAUihD,EAAelB,EAAiB1nB,GAG1Dx7B,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,kCAG5BP,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,yCAG5BP,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,2BAA2B0iD,EAAWpmD,kBAAkBomD,EAAW3lD,SAKhGgnD,EAAgBnhD,EAAUihD,EAAelB,MAGlC,oBACP,OAAmC,MAA/BljD,KAAKq4B,gBAAgB+U,QAGlBptC,KAAKq4B,gBAAgB+U,QA5M9B,8B,8ECjFA,eAEA,SACA,SACA,SAEMoX,EAAoC,IAAIj0B,IAAI,IAKlDi0B,EAAcjkD,IAAI,EAAA4vB,mBAAmBs0B,SAAU,EAAAC,mCAC/CF,EAAcjkD,IAAI,EAAA4vB,mBAAmBw0B,MAAO,EAAAC,gCAC5CJ,EAAcjkD,IAAI,EAAA4vB,mBAAmB00B,UAAW,EAAAC,mCAEhD,MAAsBC,UAA4B,EAAA30B,wBAIjD,wCACC,OAAOo0B,GALT,yB,2FCfA,QAEA,OAEA,QAGA,MAAsB9O,UAAuE,EAAAr5B,aAA7F,c,oBACiB,KAAAnc,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MAC/C,KAAAuc,aAAuB,EAAAH,mBAAmBgd,MAChD,KAAA4rB,sBAAwB,IAAI,EAAA76C,MAAM,GAMlC,KAAAwS,gBAA0B,EAc5B,KAAAnB,2CAA6Cxb,KAAKyb,qCAAqC5d,KAAKmC,MAlBpG,YACC,OAAOA,KAAKilD,OAIb,uBACCh/C,MAAM0V,uBAEN3b,KAAKilD,OAASjlD,KAAKklD,eACnBllD,KAAKjC,OAAOof,IAAInd,KAAKilD,QACrBjlD,KAAKE,MAAMI,QAAQE,SAAS,KAC3BR,KAAKmlD,4BAENnlD,KAAKijB,iBAAiB5K,oBACrB,uCACArY,KAAKwb,4CAIO,uC,yDAEPxb,KAAK+b,gBAAgBC,8BAGpB,0BACHhc,KAAKE,MAAMI,QAAQG,QACtBT,KAAKjC,OAAOof,IAAInd,KAAKy2C,OACrBz2C,KAAKyb,wCAELzb,KAAKjC,OAAOqf,OAAOpd,KAAKy2C,OAS1B,4BACC,GAA0B,MAAtBz2C,KAAKilD,OAAOG,OACf,OAAOplD,KAAKqlD,uBAIJ,uBACA,uBAEA,wBAiBV,OACCrlD,KAAK21C,sBACL31C,KAAK41C,uBACL51C,KAAK+b,gBAAgBoF,WAGtB,wBAaA,2BACC,MAAMtX,EAAQ7J,KAAKwI,OAAOqB,MAAM,SAC1By7C,EAAYtlD,KAAKwI,OAAOy7B,MAAM,aAEpC,OADAjkC,KAAKglD,sBAAsBphC,KAAK/Z,GAAOga,eAAeyhC,GAC/CtlD,KAAKglD,sBAEb,aACC,OAAOhlD,KAAKE,MAAMI,QAAQG,QA/F5B,uB,2FCPA,OACA,OAGA,OAQA,QAEA,SACA,QAEA,SACA,QAEA,4BACA,2BACA,2BACA,2BACA,SAeA,MAAa8kD,UAAmB,EAAAC,WAC/B,YAAoBnoC,EAAmBjb,GACtC6D,MAAM7D,GADa,KAAAib,UAEsB,MAArCrd,KAAKqd,QAAQ3L,SAAmB,aACnC1R,KAAKqd,QAAQ3L,SAAmB,WAAI,IAQtC,SACC,OAAO1R,KAAKqd,QAEb,WACC,OAAQrd,KAAKqd,QAAiB7b,SAE/B,gBACC,MAAMikD,EAAMzlD,KAAKwB,WACjB,OAAO,IAAI,EAAA2P,aAAas0C,GAQzB,SACC,OAAOzlD,KAAK4W,gBAAgBpC,SAE7B,kBAAkBkxC,GACjB,GAAIA,EAAO,CACV,MAAM9hD,EAAU,EAAAgB,WAAWhB,QAAQ8hD,GACnC,GAAI9hD,EAAS,CACZ,MAAM4Q,EAASxU,KAAKwU,SACpB,OAAO5Q,EAAQoB,IAAKlK,GAAM0Z,EAAO1Z,IAEjC,MAAO,GAGR,OAAOkF,KAAKwU,SAId,yBACCxU,KAAK4W,gBAAgB+uC,yBAGtB,cAAc9oD,EAAcS,GAC3B,IAAI9C,EAIHA,EAHI,UAAgB8C,IAAW,UAAeA,IAAW,UAAgBA,GAGlEA,EAFCA,EAAkByH,UAI3B/E,KAAKqd,QAAQ3L,SAAmB,WAAE7U,GAAQrC,EAE3C,mBAAmBqC,EAAcS,GAChC0C,KAAK4lD,cAAc/oD,EAAMS,GAE1B,iBAAiBT,EAAcS,GAC9B0C,KAAK4lD,cAAc/oD,EAAMS,GAE1B,0BAA0BT,EAAc2N,EAAcoI,GAChC,MAAjBA,IACHA,EAAgB,EAAAb,cAAca,cAAcpI,IAE7CxK,KAAK4W,gBAAgBtD,mBAAmBzW,EAAM2N,EAAMoI,GAGrD,kBAEC,OAAO3X,OAAO4W,KAAK7R,KAAKqd,QAAQ3L,SAAmB,YAEpD,eACC,OAAO1R,KAAK6lD,kBAGb,WAAWhpD,GACV,OAAOmD,KAAK6lD,kBAAkBC,SAASjpD,GAGxC,iBAAiB0W,EAAkBC,GAClCxT,KAAK4lD,cAAcpyC,EAAUxT,KAAKsV,aAAa/B,IAC/CvT,KAAK+lD,iBAAiBxyC,GAGvB,iBAAiB1W,UACTmD,KAAKqd,QAAQ3L,SAAmB,WAAE7U,GAG1C,aAAaA,GACZ,GA3GY,UA2GRA,EACH,OAAOmD,KAAKoC,MACN,CACN,IAAIqM,EAAMzO,KAAKqd,QAAQ3L,SAAmB,WAAE7U,GAM5C,OALW,MAAP4R,GA9GW,QA+GV5R,IACH4R,EAAMzO,KAAKqd,QAAQxgB,MAGd4R,GAGT,OACC,OAAOzO,KAAKsV,aAvHI,QAyHjB,aACC,OAAO,EAAA7S,aAAa4I,sCAAsCrL,KAAKqd,QAAQtJ,YAAYlX,MAGpF,YAAYA,GACX,MAAM4R,EAAMzO,KAAKsV,aAAazY,GAC9B,OAAI,UAAgB4R,GACZ,EAAAhM,aAAa0I,YAAY7L,OAEzB,EAAAmD,aAAa0I,YAAYF,QAIlC,YAAYpO,GACX,MAAM4R,EAAMzO,KAAKsV,aAAazY,GAC9B,GAAW,MAAP4R,EACH,OAAO,EAGR,GAAI,UAAgBA,IAAQ,UAAgBA,GAC3C,OAAO,EAEP,OAAQA,EAAIsF,aACX,KAAK,EAAA8iB,QACJ,OAAO,EACR,KAAK,EAAAzjB,QACJ,OAAO,EACR,QACC,OAAO,GAKX,QACC,OAAOmyC,EAAWxiD,MAAM/C,KAAKqd,SAG9B,aAAa2oC,GACZ,MAAMC,EAAaD,EAAWjjD,QAE9B,IAAImjD,EAAe,IAAI31B,IACnB41B,EAAc,IAAI51B,IA0DtB,OAzDAg1B,EAAWa,iBAAiBJ,EAAYC,GAAY,SAAUI,EAAsBC,GACnFJ,EAAa3lD,IAAI+lD,EAAYD,GAC7BF,EAAY5lD,IAAI8lD,EAAYC,MAE7BL,EAAWM,UAAS,SAAU9iD,GAC7B,MAAM+iD,EAAWN,EAAahpD,IAAIuG,GAC5BgjD,EAAYhjD,EAElB,GAAIgjD,EAAUjlD,SAAU,CACvB,MAAMklD,EAAoBF,EAAShlD,SACnCilD,EAAUjlD,SAAW,EAAA2P,aAAapO,MAAM2jD,GACxC,MAAMC,EAAqBF,EAAUjlD,SACjCmlD,EAAmBj1C,WACtBi1C,EAAmBj1C,SAAW,UAAiBg1C,EAAkBh1C,WAGnE,GAAI+0C,EAAUtjD,SAAU,CACvBsjD,EAAUtjD,SAAWqjD,EAASrjD,SAC9B,EAAAK,aAAaojD,uBAAuBnjD,EAAMgjD,EAAUtjD,UAIpD,MAAM0jD,EAAsBJ,EAAUtjD,SACL,MAA7B0jD,EAAoBh9C,QACvBg9C,EAAoBh9C,MAAQ,IAAI,EAAAM,MAAM,EAAG,EAAG,IAG1C67C,EAAWt0C,WACdjO,EAAKiO,SAAW,UAAiB80C,EAAS90C,WAG3C,MAAMo1C,EAAqCN,EACvCM,EAAyBC,aAC3BtjD,EAAgCsjD,WAAaD,EAAyBC,WAAW/hD,IAAKgiD,GACtFA,EAAUjkD,UAIZ,MAAMkkD,EAAexjD,EACrB,GAAIwjD,EAAaC,cAAe,CAC/B,IAAIC,EAAaF,EACbG,EAAaZ,EACba,EAAcD,EAAWE,SAASC,MAEtCJ,EAAWG,SAAWF,EAAWE,SAASvkD,QAC1CokD,EAAWK,WAAW5jC,KAAKwjC,EAAWI,YAEtC,MAAMC,EAAYJ,EAAYriD,KAAI,SAAU0iD,GAC3C,OAAOvB,EAAYjpD,IAAIwqD,MAGxBP,EAAWG,SAASC,MAAQE,EAE5BN,EAAWtpD,KAAKspD,EAAWG,SAAUH,EAAWK,gBAI3CvB,EAGR,wBAAwB/1C,EAAaC,EAAaiI,GACjDA,EAASlI,EAAGC,GACZ,IAAK,IAAIrV,EAAI,EAAGA,EAAIoV,EAAEqR,SAASvmB,OAAQF,IACtCkF,KAAKomD,iBAAiBl2C,EAAEqR,SAASzmB,GAAIqV,EAAEoR,SAASzmB,GAAIsd,IArNvD,gB,6BCvCA,mHAcIpB,EAAsB,CAEzB2wC,gBAAiB,SAAWnmD,GAE3B,IAAIY,EAAQZ,EAASY,MACjB8P,EAAa1Q,EAAS0Q,WAK1B,GAAe,OAAV9P,QACqBmC,IAAxB2N,EAAWkC,eACW7P,IAAtB2N,EAAW01C,aACOrjD,IAAlB2N,EAAW2b,GAHb,CAUA,IAAIjqB,EAAUxB,EAAMG,MAChBgmC,EAAYr2B,EAAWkC,SAAS7R,MAChCslD,EAAU31C,EAAW01C,OAAOrlD,MAC5BulD,EAAM51C,EAAW2b,GAAGtrB,MAEpBwlD,EAAYxf,EAAUvtC,OAAS,OAEPuJ,IAAvB2N,EAAW81C,SAEfxmD,EAASkR,aAAc,UAAW,IAAI,kBAAiB,IAAI+1B,aAAc,EAAIsf,GAAa,IAQ3F,IAJA,IAAIE,EAAW/1C,EAAW81C,QAAQzlD,MAE9B2lD,EAAO,GAAIC,EAAO,GAEZrtD,EAAI,EAAGA,EAAIitD,EAAWjtD,IAE/BotD,EAAMptD,GAAM,IAAI,UAChBqtD,EAAMrtD,GAAM,IAAI,UAIjB,IAAIstD,EAAK,IAAI,UACZC,EAAK,IAAI,UACTC,EAAK,IAAI,UAETC,EAAM,IAAI,UACVC,EAAM,IAAI,UACVC,EAAM,IAAI,UAEVC,EAAO,IAAI,UACXC,EAAO,IAAI,UAqCRC,EAASpnD,EAASonD,OAEC,IAAlBA,EAAO5tD,SAEX4tD,EAAS,CAAE,CACVC,MAAO,EACPt8C,MAAO3I,EAAQ5I,UAKPF,EAAI,EAAd,IAAM,IAAWguD,EAAKF,EAAO5tD,OAAQF,EAAIguD,IAAOhuD,EAO/C,IALA,IAKUkB,EAHN6sD,GAFAnD,EAAQkD,EAAQ9tD,IAEF+tD,MAGGE,EAAKF,EAFdnD,EAAMn5C,MAEuBvQ,EAAI+sD,EAAI/sD,GAAK,EAErDgtD,EACCplD,EAAS5H,EAAI,GACb4H,EAAS5H,EAAI,GACb4H,EAAS5H,EAAI,IAOhB,IAEIyJ,EAAGlI,EAAGqQ,EAFNq7C,EAAM,IAAI,UAAWC,EAAO,IAAI,UAChCprD,EAAI,IAAI,UAAWqrD,EAAK,IAAI,UA4BhC,IAAUruD,EAAI,EAAGguD,EAAKF,EAAO5tD,OAAQF,EAAIguD,IAAOhuD,EAE/C,KAAI4qD,EAEAmD,EAGJ,IAAU7sD,EAHN6sD,GAFAnD,EAAQkD,EAAQ9tD,IAEF+tD,MAGGE,EAAKF,EAFdnD,EAAMn5C,MAEuBvQ,EAAI+sD,EAAI/sD,GAAK,EAErDotD,EAAcxlD,EAAS5H,EAAI,IAC3BotD,EAAcxlD,EAAS5H,EAAI,IAC3BotD,EAAcxlD,EAAS5H,EAAI,UAjJ5BqH,QAAQiE,KAAM,yHAwCf,SAAS0hD,EAAgB94C,EAAGC,EAAGxT,GAE9ByrD,EAAGiB,UAAW9gB,EAAe,EAAJr4B,GACzBm4C,EAAGgB,UAAW9gB,EAAe,EAAJp4B,GACzBm4C,EAAGe,UAAW9gB,EAAe,EAAJ5rC,GAEzB4rD,EAAIc,UAAWvB,EAAS,EAAJ53C,GACpBs4C,EAAIa,UAAWvB,EAAS,EAAJ33C,GACpBs4C,EAAIY,UAAWvB,EAAS,EAAJnrD,GAEpB0rD,EAAGj5B,IAAKg5B,GACRE,EAAGl5B,IAAKg5B,GAERI,EAAIp5B,IAAKm5B,GACTE,EAAIr5B,IAAKm5B,GAET,IAAIprD,EAAI,GAAQqrD,EAAIljD,EAAImjD,EAAIljD,EAAIkjD,EAAInjD,EAAIkjD,EAAIjjD,GAIrC+jD,SAAUnsD,KAEjBurD,EAAK9kC,KAAMykC,GAAKxkC,eAAgB4kC,EAAIljD,GAAIgkD,gBAAiBjB,GAAME,EAAIjjD,GAAIse,eAAgB1mB,GACvFwrD,EAAK/kC,KAAM0kC,GAAKzkC,eAAgB2kC,EAAIljD,GAAIikD,gBAAiBlB,GAAMI,EAAInjD,GAAIue,eAAgB1mB,GAEvF+qD,EAAMh4C,GAAIiN,IAAKurC,GACfR,EAAM/3C,GAAIgN,IAAKurC,GACfR,EAAMvrD,GAAIwgB,IAAKurC,GAEfP,EAAMj4C,GAAIiN,IAAKwrC,GACfR,EAAMh4C,GAAIgN,IAAKwrC,GACfR,EAAMxrD,GAAIwgB,IAAKwrC,IAsChB,SAASS,EAAcnkD,GAEtBnH,EAAEurD,UAAWxB,EAAa,EAAJ5iD,GACtBkkD,EAAGvlC,KAAM9lB,GAETP,EAAI2qD,EAAMjjD,GAIVgkD,EAAIrlC,KAAMrmB,GACV0rD,EAAI75B,IAAKtxB,EAAE+lB,eAAgB/lB,EAAE0rD,IAAKjsD,KAAQ6oB,YAI1C8iC,EAAKO,aAAcN,EAAI5rD,GACvBqQ,EAAOs7C,EAAKM,IAAKrB,EAAMljD,IACvBQ,EAAMmI,EAAO,GAAU,EAAM,EAE7Bq6C,EAAc,EAAJhjD,GAAUgkD,EAAI3jD,EACxB2iD,EAAc,EAAJhjD,EAAQ,GAAMgkD,EAAI1jD,EAC5B0iD,EAAc,EAAJhjD,EAAQ,GAAMgkD,EAAIzjD,EAC5ByiD,EAAc,EAAJhjD,EAAQ,GAAMQ,IA4B1BwR,sBAAuB,SAAWtV,EAAY+nD,GAgB7C,IAdA,IAAIC,EAAsC,OAA1BhoD,EAAY,GAAIS,MAE5BwnD,EAAiB,IAAIC,IAAK5uD,OAAO4W,KAAMlQ,EAAY,GAAIuQ,aACvD43C,EAAsB,IAAID,IAAK5uD,OAAO4W,KAAMlQ,EAAY,GAAIooD,kBAE5D73C,EAAa,GACb63C,EAAkB,GAElBC,EAAuBroD,EAAY,GAAIqoD,qBAEvCC,EAAiB,IAAI,iBAErBC,EAAS,EAEHpvD,EAAI,EAAGA,EAAI6G,EAAW3G,SAAWF,EAAI,CAE9C,IAAI0G,EAAWG,EAAY7G,GAI3B,GAAK6uD,KAAmC,OAAnBnoD,EAASY,OAAmB,OAAO,KAIxD,IAAM,IAAIvF,KAAQ2E,EAAS0Q,WAAa,CAEvC,IAAO03C,EAAe5wB,IAAKn8B,GAAS,OAAO,UAEf0H,IAAvB2N,EAAYrV,KAAuBqV,EAAYrV,GAAS,IAE7DqV,EAAYrV,GAAOvB,KAAMkG,EAAS0Q,WAAYrV,IAM/C,GAAKmtD,IAAyBxoD,EAASwoD,qBAAuB,OAAO,KAErE,IAAM,IAAIntD,KAAQ2E,EAASuoD,gBAAkB,CAE5C,IAAOD,EAAoB9wB,IAAKn8B,GAAS,OAAO,UAEf0H,IAA5BwlD,EAAiBltD,KAAuBktD,EAAiBltD,GAAS,IAEvEktD,EAAiBltD,GAAOvB,KAAMkG,EAASuoD,gBAAiBltD,IASzD,GAHAotD,EAAev4C,SAASyF,eAAiB8yC,EAAev4C,SAASyF,gBAAkB,GACnF8yC,EAAev4C,SAASyF,eAAe7b,KAAMkG,EAASkQ,UAEjDg4C,EAAY,CAEhB,IAAIn9C,EAEJ,GAAKo9C,EAEJp9C,EAAQ/K,EAASY,MAAMmK,UAEjB,SAAsChI,IAAjC/C,EAAS0Q,WAAWkC,SAM/B,OAAO,KAJP7H,EAAQ/K,EAAS0Q,WAAWkC,SAAS7H,MAQtC09C,EAAeE,SAAUD,EAAQ39C,EAAOzR,GAExCovD,GAAU39C,GAQZ,GAAKo9C,EAAY,CAEhB,IAAIS,EAAc,EACdC,EAAc,GAElB,IAAUvvD,EAAI,EAAGA,EAAI6G,EAAW3G,SAAWF,EAAI,CAI9C,IAFA,IAAIsH,EAAQT,EAAY7G,GAAIsH,MAElBpG,EAAI,EAAGA,EAAIoG,EAAMmK,QAAUvQ,EAEpCquD,EAAY/uD,KAAM8G,EAAMkoD,KAAMtuD,GAAMouD,GAIrCA,GAAezoD,EAAY7G,GAAIoX,WAAWkC,SAAS7H,MAIpD09C,EAAeznD,SAAU6nD,GAM1B,IAAM,IAAIxtD,KAAQqV,EAAa,CAE9B,IAAIq4C,EAAkBvqD,KAAKwqD,sBAAuBt4C,EAAYrV,IAE9D,IAAO0tD,EAAkB,OAAO,KAEhCN,EAAev3C,aAAc7V,EAAM0tD,GAMpC,IAAM,IAAI1tD,KAAQktD,EAAkB,CAEnC,IAAIU,EAAkBV,EAAiBltD,GAAQ,GAAI7B,OAEnD,GAAyB,IAApByvD,EAAwB,MAE7BR,EAAeF,gBAAkBE,EAAeF,iBAAmB,GACnEE,EAAeF,gBAAiBltD,GAAS,GAEzC,IAAU/B,EAAI,EAAGA,EAAI2vD,IAAoB3vD,EAAI,CAE5C,IAAI4vD,EAAyB,GAE7B,IAAU1uD,EAAI,EAAGA,EAAI+tD,EAAiBltD,GAAO7B,SAAWgB,EAEvD0uD,EAAuBpvD,KAAMyuD,EAAiBltD,GAAQb,GAAKlB,IAI5D,IAAI6vD,EAAuB3qD,KAAKwqD,sBAAuBE,GAEvD,IAAOC,EAAuB,OAAO,KAErCV,EAAeF,gBAAiBltD,GAAOvB,KAAMqvD,IAM/C,OAAOV,GAQRO,sBAAuB,SAAWt4C,GAOjC,IALA,IAAI04C,EACAr4C,EACAs4C,EACAC,EAAc,EAERhwD,EAAI,EAAGA,EAAIoX,EAAWlX,SAAWF,EAAI,CAE9C,IAAIgZ,EAAY5B,EAAYpX,GAE5B,GAAKgZ,EAAUi3C,6BAA+B,OAAO,KAGrD,QADoBxmD,IAAfqmD,IAA2BA,EAAa92C,EAAUvR,MAAMwR,aACxD62C,IAAe92C,EAAUvR,MAAMwR,YAAc,OAAO,KAGzD,QADkBxP,IAAbgO,IAAyBA,EAAWuB,EAAUvB,UAC9CA,IAAauB,EAAUvB,SAAW,OAAO,KAG9C,QADoBhO,IAAfsmD,IAA2BA,EAAa/2C,EAAU+2C,YAClDA,IAAe/2C,EAAU+2C,WAAa,OAAO,KAElDC,GAAeh3C,EAAUvR,MAAMvH,OAIhC,IAAIuH,EAAQ,IAAIqoD,EAAYE,GACxBZ,EAAS,EAEb,IAAUpvD,EAAI,EAAGA,EAAIoX,EAAWlX,SAAWF,EAE1CyH,EAAMhC,IAAK2R,EAAYpX,GAAIyH,MAAO2nD,GAElCA,GAAUh4C,EAAYpX,GAAIyH,MAAMvH,OAIjC,OAAO,IAAI,kBAAiBuH,EAAOgQ,EAAUs4C,IAQ9CG,qBAAsB,SAAW94C,GAShC,IALA,IAAI04C,EACAE,EAAc,EACd3iB,EAAS,EAGHrtC,EAAI,EAAG2B,EAAIyV,EAAWlX,OAAQF,EAAI2B,IAAM3B,EAAI,CAErD,IAAIgZ,EAAY5B,EAAYpX,GAG5B,QADoByJ,IAAfqmD,IAA2BA,EAAa92C,EAAUvR,MAAMwR,aACxD62C,IAAe92C,EAAUvR,MAAMwR,YAGnC,OADA1Q,QAAQiE,KAAM,6DACP,KAIRwjD,GAAeh3C,EAAUvR,MAAMvH,OAC/BmtC,GAAUr0B,EAAUvB,SAKrB,IAAI04C,EAAoB,IAAI,IAAmB,IAAIL,EAAYE,GAAe3iB,GAC1E+hB,EAAS,EACTgB,EAAM,GACNC,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QACpCC,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QAE9BpvD,EAAI,EAAd,IAAiBS,EAAIyV,EAAWlX,OAAQgB,EAAIS,EAAGT,IAAO,CAErD,IACIuW,GADAuB,EAAY5B,EAAYlW,IACHuW,SACrBhG,EAAQuH,EAAUvH,MAClB8+C,EAAM,IAAI,6BAA4BJ,EAAmB14C,EAAU23C,EAAQp2C,EAAU+2C,YACzFK,EAAI5vD,KAAM+vD,GAEVnB,GAAU33C,EAIV,IAAM,IAAI5V,EAAI,EAAGA,EAAI4P,EAAO5P,IAE3B,IAAM,IAAIwyC,EAAI,EAAGA,EAAI58B,EAAU48B,IAE9Bkc,EAAKD,EAASjc,IAAOxyC,EAAGmX,EAAWq3C,EAAShc,IAAOxyC,IAQtD,OAAOuuD,GAQRI,kBAAmB,SAAW9pD,GAK7B,IAAI+pD,EAAM,EACV,IAAM,IAAI1uD,KAAQ2E,EAAS0Q,WAAa,CAEvC,IAAIs5C,EAAOhqD,EAASc,aAAczF,GAClC0uD,GAAOC,EAAKj/C,MAAQi/C,EAAKj5C,SAAWi5C,EAAKjpD,MAAMkpD,kBAIhD,IAAI7nD,EAAUpC,EAASkqD,WAEvB,OADAH,GAAO3nD,EAAUA,EAAQ2I,MAAQ3I,EAAQ2O,SAAW3O,EAAQrB,MAAMkpD,kBAAoB,GAUvFE,cAAe,SAAWnqD,EAAUoqD,EAAY,MAE/CA,EAAYp/C,KAAKC,IAAKm/C,EAAW97C,OAAO+7C,SAoBxC,IAhBA,IAAIC,EAAc,GACdloD,EAAUpC,EAASkqD,WACnBnjB,EAAY/mC,EAASc,aAAc,YACnCypD,EAAcnoD,EAAUA,EAAQ2I,MAAQg8B,EAAUh8B,MAGlDy/C,EAAY,EAGZC,EAAiBhxD,OAAO4W,KAAMrQ,EAAS0Q,YACvCg6C,EAAa,GACbC,EAAmB,GACnBC,EAAa,GACbjB,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QAG9BrwD,EAAI,EAAG2B,EAAIwvD,EAAejxD,OAAQF,EAAI2B,EAAG3B,IAAO,CAIzDoxD,EAFIrvD,EAAOovD,EAAgBnxD,IAEN,IAEjBuxD,EAAY7qD,EAASuoD,gBAAiBltD,MAGzCsvD,EAAkBtvD,GAAS,IAAIwyC,MAAOgd,EAAUrxD,QAASsxD,OAAOtnD,IAAK,IAAM,KAO7E,IAAIunD,EAAe//C,KAAKggD,MAAO,EAAIZ,GAC/Ba,EAAkBjgD,KAAK8iB,IAAK,GAAIi9B,GACpC,IAAUzxD,EAAI,EAAGA,EAAIixD,EAAajxD,IAAO,CAExC,IAAIsH,EAAQwB,EAAUA,EAAQ0mD,KAAMxvD,GAAMA,EAGtC4xD,EAAO,GACD1wD,EAAI,EAAd,IAAiBS,EAAIwvD,EAAejxD,OAAQgB,EAAIS,EAAGT,IAMlD,IAJA,IAAIa,EAAOovD,EAAgBjwD,GAEvBuW,GADAuB,EAAYtS,EAASc,aAAczF,IACd0V,SAEf48B,EAAI,EAAGA,EAAI58B,EAAU48B,IAG9Bud,GAAQ,MAAU54C,EAAWq3C,EAAShc,IAAO/sC,GAAUqqD,MAQzD,GAAKC,KAAQZ,EAEZM,EAAW9wD,KAAMwwD,EAAaY,QAExB,CAGN,IAAU1wD,EAAI,EAAGS,EAAIwvD,EAAejxD,OAAQgB,EAAIS,EAAGT,IAElD,CAAIa,EAAOovD,EAAgBjwD,GAA3B,IACI8X,EAAYtS,EAASc,aAAczF,GACnCwvD,EAAY7qD,EAASuoD,gBAAiBltD,GAEtC8vD,GADAp6C,EAAWuB,EAAUvB,SACV25C,EAAYrvD,IACvB+vD,EAAiBT,EAAkBtvD,GAEvC,IAAUsyC,EAAI,EAAGA,EAAI58B,EAAU48B,IAAO,CAErC,IAAI0d,EAAa1B,EAAShc,GAG1B,GAFAwd,EAASrxD,KAAMwY,EAAW+4C,GAAczqD,IAEnCiqD,EAEJ,IAAM,IAAI3vD,EAAI,EAAGowD,EAAKT,EAAUrxD,OAAQ0B,EAAIowD,EAAIpwD,IAE/CkwD,EAAgBlwD,GAAIpB,KAAM+wD,EAAW3vD,GAAKmwD,GAAczqD,KAU5D0pD,EAAaY,GAASV,EACtBI,EAAW9wD,KAAM0wD,GACjBA,KAQF,MAAMnwD,EAAS2F,EAASuB,QACxB,IAAUjI,EAAI,EAAG2B,EAAIwvD,EAAejxD,OAAQF,EAAI2B,EAAG3B,IAAO,CAErD+B,EAAOovD,EAAgBnxD,GAA3B,IACIiyD,EAAevrD,EAASc,aAAczF,GAEtC80C,EAAS,IAAIob,EAAaxqD,MAAMwR,YAAam4C,EAAYrvD,IACzDiX,EAAY,IAAI,kBAAiB69B,EAAQob,EAAax6C,SAAUw6C,EAAalC,YAKjF,GAHAhvD,EAAO6W,aAAc7V,EAAMiX,GAGtBjX,KAAQsvD,EAEZ,IAAUnwD,EAAI,EAAGA,EAAImwD,EAAkBtvD,GAAO7B,OAAQgB,IAAO,CAE5D,IAAIgxD,EAAoBxrD,EAASuoD,gBAAiBltD,GAAQb,GAGtDixD,GADAtb,EAAS,IAAIqb,EAAkBzqD,MAAMwR,YAAao4C,EAAkBtvD,GAAQb,IAC3D,IAAI,kBAAiB21C,EAAQqb,EAAkBz6C,SAAUy6C,EAAkBnC,aAChGhvD,EAAOkuD,gBAAiBltD,GAAQb,GAAMixD,GAYzC,OAFApxD,EAAO2G,SAAU4pD,GAEVvwD,GASRqxD,oBAAqB,SAAW1rD,EAAU2rD,GAEzC,GAAKA,IAAa,oBAGjB,OADA9pD,QAAQiE,KAAM,2FACP9F,EAIR,GAAK2rD,IAAa,uBAAuBA,IAAa,wBAAwB,CAE7E,IAAI/qD,EAAQZ,EAASkqD,WAIrB,GAAe,OAAVtpD,EAAiB,CAErB,IAAIwB,EAAU,GAEVwQ,EAAW5S,EAASc,aAAc,YAEtC,QAAkBiC,IAAb6P,EAcJ,OADA/Q,QAAQ6a,MAAO,2GACR1c,EAZP,IAAM,IAAI1G,EAAI,EAAGA,EAAIsZ,EAAS7H,MAAOzR,IAEpC8I,EAAQtI,KAAMR,GAIf0G,EAASgB,SAAUoB,GACnBxB,EAAQZ,EAASkqD,WAanB,IAAI0B,EAAoBhrD,EAAMmK,MAAQ,EAClC6/C,EAAa,GAEjB,GAAKe,IAAa,sBAIjB,IAAUryD,EAAI,EAAGA,GAAKsyD,EAAmBtyD,IAExCsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAM,IAC7B8B,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,IAC7BsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,EAAI,SAQlC,IAAUA,EAAI,EAAGA,EAAIsyD,EAAmBtyD,IAElCA,EAAI,GAAM,GAEdsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,IAC7BsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,EAAI,IACjCsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,EAAI,MAKjCsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,EAAI,IACjCsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,EAAI,IACjCsxD,EAAW9wD,KAAM8G,EAAMkoD,KAAMxvD,KAQzBsxD,EAAWpxD,OAAS,IAAQoyD,GAElC/pD,QAAQ6a,MAAO,oGAMhB,IAAImvC,EAAc7rD,EAASuB,QAI3B,OAHAsqD,EAAY7qD,SAAU4pD,GACtBiB,EAAYC,cAELD,EAKP,OADAhqD,QAAQ6a,MAAO,sEAAuEivC,GAC/E3rD,K,kFCvtBV,eAMA,SACA,QACA,QACA,QAQA,MAAa+rD,UAA8B,EAAAnvB,sBAS1C,YAAoBovB,GACnBvnD,QADmB,KAAAunD,WAIpB,mCAAmC1K,GAClC9iD,KAAKytD,gCAAkC3K,EAGxC,oBACC9tB,EACA7sB,EACAM,GAOA,IAAKzI,KAAKytD,gCACT,OAGD,MAAM35B,EAAmBkB,EAAan0B,GAAGC,QAAQu9B,uCAAuCl2B,GAClF2sB,EAAWE,EAAa5sB,YAAYD,GAI1C,GAFiBnI,KAAKytD,gCAAgCC,SAASvlD,IAE/C2rB,EAAkB,CACjC,MAAME,EAAUF,EAAiBv1B,KAE3BwO,EAAY,GAAGinB,KAAWc,OADd90B,KAAKm0B,eAAea,EAAchB,EAAS7rB,EAAaM,KAE1EA,EAA8BwE,eAAe+nB,EAAc,CAACjoB,SAE5D/M,KAAK2tD,yBAA2B3tD,KAAK2tD,0BAA4B,IAAI,EAAAhyB,uBACrE37B,KAAK2tD,yBAAyB53B,oBAC7Bf,EACA7sB,EACAM,GAgFH,eACChF,EACAuwB,EACA3hB,EACA5J,GAEA,IAAKzI,KAAKytD,gCACT,OAID,MAAMG,EAAmB5tD,KAAKytD,gCAAgCC,SAASr7C,GAEvE,IAAIu7C,EA4BH,OAAO,EAAAjyB,uBAAuBxH,eAAe1wB,EAAMuwB,EAAS3hB,EAAa5J,GA5BpD,CACrBzI,KAAK6tD,+BAA+BpqD,EAAMgF,GAM1C,MAAM6qC,EAAYsa,EAAiBta,UAC7Bwa,EAAaF,EAAiBE,WACpC,GAAIA,EAAY,CAGf,MAAMC,EAAmBD,EAAWE,aAC9BC,EAAqB,IAAI,EAAA14B,oBAC9B9xB,EACA,EAAAI,oBAAoBQ,WACpB0pD,GASD,OALAtlD,EAA8ByE,gBAAgBzJ,EAAM,CAACwqD,IAInC,cAAcF,MAAqB/tD,KAAKwtD,cAAcla,MAQ3E,+BAA+B7vC,EAAsBgF,GASpD,MAAMylD,EAAqC,IAAI,EAAAzvB,sBAC9Ch7B,EACA,EAAAI,oBAAoBI,KACpBspD,EAAsBY,WAEjBC,EAAsC,IAAI,EAAA9vB,oBAC/C76B,EACA,EAAAI,oBAAoBI,KACpBspD,EAAsBc,YAGvB5lD,EAA8ByE,gBAC7BzJ,EACA,CAACyqD,EAAoCE,GACrC,EAAA79C,WAAWzF,QAEZrC,EAA8ByE,gBAAgBzJ,EAAM,CAAC2qD,GAAsC,EAAA79C,WAAW8hB,UAEtG5pB,EAA8BwE,eAC7BxJ,EACA,CAAC,GAAG8pD,EAAsBc,gBAAgBd,EAAsBY,aAChE,EAAA59C,WAAWzF,SAzMd,0BAGQ,EAAAqjD,UAAY,0BACZ,EAAAE,WAAa,2BACb,EAAAC,gBAAkB,c,8ECnB1B,cAEA,OACA,OAEA,8BACC,uCAAuC1qD,GACtC,IAAI2qD,EAAgC,GACpC,MAAMC,EAAkC,GACxC,IAGIpsD,EAHAqsD,EAAkC,KAItC,IAAK,IAAI3zD,EAAI,EAAGA,EAAI8I,EAAQ5I,OAAQF,IACnC,GAAIA,EAAI,GAAM,EAAG,CAChBsH,EAAQwB,EAAQ9I,GAChB,MAAM4zD,EAAiB9qD,EAAQ9I,EAAI,GAKX,MAApB2zD,GAA4BC,IAAmBD,GAEf,IAA/BF,EAAoBvzD,QACvBuzD,EAAoBjzD,KAAKozD,GAG1BH,EAAoBjzD,KAAK8G,GACzBqsD,EAAmBrsD,IAGnBosD,EAAgClzD,KAAKizD,GAMrCA,EAAsB,CAACG,EAAgBtsD,GACvCqsD,EAAmBrsD,GAQtB,OAFAosD,EAAgClzD,KAAKizD,GAE9BC,EAGR,oCACCh6C,EACA5Q,EACA0O,EACAq8C,GAGA,MAAM74C,EAAwB,GAExB84C,EAAqD,GAC3Dt8C,EAAa1Q,QAASyQ,IACrBu8C,EAA6Bv8C,GAAe,KAG7CzO,EAAQhC,QAAQ,CAACQ,EAAOtH,KACvB,MAAM6Z,EAAQH,EAAOpS,GAGrBkQ,EAAa1Q,QAASyQ,IACrB,IAAIiD,EAAeX,EAAMW,aAAajD,GAGrCiD,EAFmBq5C,EAAqBt8C,GACvB,EACFiD,EAAavQ,UAEb,CAACuQ,GAEjBA,EAAa1T,QAASqD,IACrB2pD,EAA6Bv8C,GAAa/W,KAAK2J,OAI7CnK,EAAI,IACPgb,EAAYxa,KAAKR,EAAI,GACrBgb,EAAYxa,KAAKR,MAKnB,MAAM0G,EAAW,IAAI,EAAAsT,eASrB,OAPAxC,EAAa1Q,QAASyQ,IACrB,MAAMsD,EAAcg5C,EAAqBt8C,GACnCvN,EAAS8pD,EAA6Bv8C,GAC5C7Q,EAASkR,aAAaL,EAAa,IAAI,EAAAc,uBAAuBrO,EAAQ6Q,MAGvEnU,EAASgB,SAASsT,GACXtU,EAGR,kCAAkCA,G,MACjC,MAAMG,EAA+B,GAC/BiV,EAAgB,IAAI,EAAAzF,aAAa3P,GACjC8Q,EAAesE,EAActE,eAC7BkC,EAASoC,EAAcpC,SACvB5Q,GAA8B,QAAnB,EAAApC,EAASkqD,kBAAU,eAAEnpD,QAAsB,GAEtDisD,EAAkCxuD,KAAKwuD,gCAAgC5qD,GAG7E,GAFAP,QAAQC,IAAIM,EAAS4qD,GAEjBA,EAAgCxzD,OAAS,EAAG,CAC/C,MAAM6zD,EAA0Bj4C,EAAck4C,eAE9CN,EAAgC5sD,QAAQ,CAAC2sD,EAAqBzzD,KAC7D0G,EAAWxB,KAAK+uD,6BACfv6C,EACA+5C,EACAj8C,EACAu8C,GAEDltD,EAAWrG,KAAKkG,KAIlB,OAAOG,K,kJC9HT,eACA,QACA,QACA,SAKA,OACA,MAAMqtD,UAA+B,EAAAlmD,iBAArC,c,oBACC,KAAArI,OAAS,EAAA6hB,YAAY1jB,SAAQ,EAAM,CAClCwZ,SAAU,CAAC3U,EAAoByV,KAC9B+1C,EAAeC,6BAA6BzrD,OAI/C,MAAMsF,EAAe,IAAIimD,EAEzB,MAAaC,UAAuB,EAAAroB,eAApC,c,oBACC,KAAA59B,cAAgBD,EAChB,cACC,MAAO,cAER,kBAEC/I,KAAKa,GAAGC,QAAQqG,mCACf,EAAAgoD,2BAA2BnqD,IAAKoqD,GACxB,IAAI,EAAAjvB,0BAA0BivB,EAAY,EAAAvrD,oBAAoBE,QAIvE/D,KAAKw/B,UAAU6vB,gBAAgB,KAC9BrvD,KAAKoD,MAAMksD,kBAAkBC,oBAAoBvvD,QAElDA,KAAKw/B,UAAUgwB,gBAAgB,KAC9BxvD,KAAKoD,MAAMksD,kBAAkBG,sBAAsBzvD,QAIrD,cAAcknC,EAAmBC,EAA2BC,GAC3D,IAAKpnC,KAAKwe,GAAG/d,OACZ,OAED,MAAM2B,EAAQpC,KAAKa,GAAGC,QAAQ4uD,iBAAiBxoB,EAAM3oC,MACrD,GAAI6D,GAAS,EAAG,CACf,MAEMutD,EAFc3vD,KAAKa,GAAGkG,YAAY6oD,qBACA7lC,OAAQniB,GAAeA,EAAWM,cAAgB9F,GACnC4C,IACrD4C,GAAeA,EAAWioD,WAE5B,IAAK,IAAIpsD,KAAQksD,EAChBlsD,EAAKqsD,cAAc5oB,EAAOC,EAAQC,IAKrC,mBACKpnC,KAAKwe,GAAG/d,OACXT,KAAKoD,MAAMksD,kBAAkBC,oBAAoBvvD,MAEjDA,KAAKoD,MAAMksD,kBAAkBG,sBAAsBzvD,MAGrD,oCAAoCyD,GACnCA,EAAKssD,oBA9CP,oB,8EChBA,kBACC,YAAsBtsD,GAAA,KAAAA,U,sFC0BvB,uBACC,YAAoBA,GAAA,KAAAA,OAOpB,QAAQue,GAAoC,G,YAO3C,MAAMxnB,EAAO,CACZqC,KAAMmD,KAAKyD,KAAK5G,KAChB0B,KAAMyB,KAAKyD,KAAKlF,KAChButB,cAAe9rB,KAAKyD,KAAKqoB,cACzB3T,SAAUnY,KAAKyD,KAAK0U,SACpB63C,aAAchwD,KAAKyD,KAAKwD,QAAQib,UAChCqb,cAAev9B,KAAKyD,KAAKuuB,OAAO9T,MAAMpc,QACtCyf,SAAUvhB,KAAKiwD,eACfvoD,OAAQ1H,KAAKkwD,YACbC,gCAAiCnwD,KAAKowD,2BACtClwB,wBAAyBlgC,KAAKkgC,0BAC9BmwB,yBAA0BrwD,KAAKqwD,2BAC/BC,UAAWtwD,KAAKuwD,eAAevuC,GAE/BwuC,wBAAyBxwD,KAAKyD,KAAK5C,GAAG6G,OAAO8oD,0BAC7CC,oCAAqCzwD,KAAKyD,KAAK5C,GAAG6G,OAAO+oD,sCACzDvwD,MAAO,CAENI,QAAiC,QAA1B,EAAiB,QAAjB,EAAEN,KAAKyD,KAAKvD,aAAK,eAAEI,eAAO,eAAEG,OACnCkpB,OAA+B,QAAzB,EAAiB,QAAjB,EAAE3pB,KAAKyD,KAAKvD,aAAK,eAAEypB,cAAM,eAAElpB,QAElCiwD,eAAWnsD,GAOZ,OAJIvE,KAAKyD,KAAKm3C,oBAAsB56C,KAAKyD,KAAK2d,sBAC7C5mB,EAAgB,UAAIwF,KAAKyD,KAAK2d,oBAAoBsvC,UAAUxuC,WAGtD1nB,EAGR,eACC,OAAOwF,KAAKyD,KAAK8d,WAAWvc,IAAKvB,GAASA,EAAKqoB,eAGhD,YACC,OAAO9rB,KAAKyD,KAAK5C,GAAG6G,OAAOA,SAAS1C,IAAKvB,GAAkB,MAARA,EAAeA,EAAKqoB,mBAAgBvnB,GAGxF,2B,MACC,OACqB,QADrB,EAAOvE,KAAKyD,KAAK5C,GAAGkG,YAClB2F,2BAAmB,eAClB1H,IAAK4C,GAA8B,MAAdA,EAAqBA,EAAWM,kBAAe3D,GAExE,0BACC,OAAOvE,KAAKyD,KAAK5C,GAAG6G,OAAOmF,8BAA8B7H,IAAKlK,GAAMA,EAAEonB,WAEvE,2BACC,OAAOliB,KAAKyD,KAAK5C,GAAGC,QAAQmH,+BAA+BjD,IAAKjI,GAAMA,EAAEmlB,WAGzE,0BAA0ByuC,EAAuBC,GAA8B,GAC9E,OAAOD,EAAY3rD,IAAKylB,GAChBzqB,KAAKyD,KAAK+E,OAAOtL,IAAIutB,GAAaqB,eAiB3C,eAAe8kC,GAA8B,GAC5C,OAAO5wD,KAAK6wD,0BAA0B7wD,KAAKyD,KAAK+E,OAAO60B,MAAOuzB,M,8ECnHhE,eACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,QAGa,EAAAE,uBAA4C,CACxD,CAAC,EAAApyD,UAAUE,SAAU,EAAAmyD,aACrB,CAAC,EAAAryD,UAAUC,QAAS,EAAAqyD,YACpB,CAAC,EAAAtyD,UAAUG,OAAQ,EAAAoyD,WACnB,CAAC,EAAAvyD,UAAUI,OAAQ,EAAAs0C,WACnB,CAAC,EAAA10C,UAAUK,QAAS,EAAAmyD,YACpB,CAAC,EAAAxyD,UAAUM,SAAU,EAAAmyD,aACrB,CAAC,EAAAzyD,UAAUO,eAAgB,EAAA2gD,kBAC3B,CAAC,EAAAlhD,UAAUU,MAAO,EAAAF,UAClB,CAAC,EAAAR,UAAUW,WAAY,EAAA+xD,eACvB,CAAC,EAAA1yD,UAAUY,QAAS,EAAAwgD,YACpB,CAAC,EAAAphD,UAAUa,SAAU,EAAA8xD,aACrB,CAAC,EAAA3yD,UAAUc,SAAU,EAAA8xD,aACrB,CAAC,EAAA5yD,UAAUe,SAAU,EAAA8xD,e,4FC7BtB,SAqBA,6BAMC,YAAsBr4C,GAAA,KAAAA,QAOtB,aACC,OAA2B,MAApBlZ,KAAKwxD,YAEb,iBACC,OAAOxxD,KAAKwxD,YAEb,iBACC,QAAIxxD,KAAKyxD,UACDzxD,KAAKyxD,SAAS1e,WAIvB,oBACC,OAAI/yC,KAAKyxD,SACDzxD,KAAKyxD,SAASl0B,cAEf,KAER,wBACC,OAAOv9B,KAAKkZ,MAAMza,QAAQizD,2BAM3B,eAAe/e,EAAgC36B,GAAqB,G,MACnEhY,KAAKkZ,MAAM9V,MAAM+3C,yCAAyCwW,iBAAiB3xD,KAAKkZ,OAChFlZ,KAAKkZ,MAAM9V,MAAMi4C,uBAAuBsW,iBAAiB3xD,KAAKkZ,OAE1DlZ,KAAKwxD,aAAe7e,IACvB3yC,KAAKwxD,YAAc7e,EAEf3yC,KAAKwxD,aACRxxD,KAAKyxD,SAAWzxD,KAAKyxD,UAAY,IAAI,EAAAG,kBAAkB5xD,KAAKkZ,OAC5DlZ,KAAKyxD,SAASI,iBAAiB7xD,KAAKwxD,cAEvB,QAAb,EAAAxxD,KAAKyxD,gBAAQ,SAAE9oD,QAGZqP,GACHhY,KAAKkZ,MAAMlB,aAKd,4CACKhY,KAAKyxD,UAAYzxD,KAAKS,QACzBT,KAAKyxD,SAASK,4CAIV,qB,mDACL,GAAI9xD,KAAKyxD,UAAYzxD,KAAKS,OAAQ,CAEjC,aADqBT,KAAKyxD,SAASM,uBAIvB,gCAAgCC,EAAwB55C,G,2DACrEpY,KAAKiyD,aAAaD,EAAU55C,SACtBpY,KAAK8yC,sBACM,QAAjB,EAAI9yC,KAAKyxD,gBAAQ,eAAEl0B,gBAClBv9B,KAAKkZ,MAAMzV,KAAKuuB,OAAO9T,MAAM3d,IAAI,+BAA4C,QAAb,EAAAP,KAAKyxD,gBAAQ,eAAEl0B,iBAGhFv9B,KAAKkyD,oBAEN,8BAA8BF,EAAuB55C,GACpD,OAAOpY,KAAKmyD,gCAAgCH,EAAU55C,GAEvD,+BAA+B45C,EAAwB55C,GACtD,OAAOpY,KAAKmyD,gCAAgCH,EAAU55C,GAEvD,eACC,OAAOpY,KAAKoyD,UAEb,sBACC,OAAOpyD,KAAKqyD,iBAEb,aAAaL,EAAwB55C,GACpCpY,KAAKoyD,UAAYJ,EACjBhyD,KAAKqyD,iBAAmBj6C,EAEzB,iBACCpY,KAAKoyD,eAAY7tD,EACjBvE,KAAKqyD,sBAAmB9tD,K,2FCvH1B,2BAEA,4BACA,UAAK+tD,WAAW,KAGhB,UAAKC,YAAY,KADA,IAYjB,MAAaC,EAIZ,eAEA,iBAAiBC,GAChB,IACCzyD,KAAK2I,QACL3I,KAAKyD,KAAO,UAAKgvD,GAChB,MAAOjjD,GACR,MAAM1N,EAAU,mCAAmC2wD,cAAmBjjD,KACtExP,KAAKu9B,cAAgBz7B,GAGvB,kCAAkC2wD,GACjC,IACCzyD,KAAK2I,QAEL,MAAMgG,EAAW6jD,EAAWE,sBAAsBD,GAC5C9C,EAAQ,GACd,IAAK,IAAI70D,EAAI,EAAGA,EAAI6T,EAAS3T,OAAQF,IAAK,CACzC,MAAM8U,EAAUjB,EAAS7T,GACzB,IAAI2I,EAEHA,EADG3I,EAAI,GAAK,EACL,UAAK8U,GAEL,CACNrR,KAjCe,UAkCfjB,MAAO,IAAIsS,KACX8uC,IAAK,IAAI9uC,MAGX+/C,EAAMr0D,KAAKmI,GAqBZzD,KAAKyD,KAAiB,CACrBlF,KA1DyB,iBA2DzBo0D,UAAWhD,EACXiD,OAAQ,CACPr0D,KAhEmB,aAiEnB1B,KAAM,eAGP,MAAO2S,GACR,MAAM1N,EAAU,mCAAmC2wD,cAAmBjjD,KACtExP,KAAKu9B,cAAgBz7B,GAIvB,6BAA6BmD,GAC5B,OAAS,MAALA,GACC,UAAgBA,GACZA,EAAE2J,MAzEuB,KA8E1B,GAoCD,QACP5O,KAAKyD,UAAOc,EACZvE,KAAKu9B,mBAAgBh5B,GAlHvB,gB,8ECfA,eAMA,uBAOC,cANQ,KAAAnC,OAAS,EACT,KAAA+pB,cAAmC,GACnC,KAAA0mC,aAAuC,GACvC,KAAAC,eAA2B,GAC3B,KAAAC,8BAAoD,GAK5D,SAASl2D,EAAc4G,GACtBzD,KAAKoC,OAAS,EACVvF,GAAQ4G,EAAK5G,OAChBmD,KAAKgzD,YAAYhzD,KAAKoC,OAASqB,GAGhCzD,KAAK8yD,eAAe9yD,KAAKoC,OAASqB,EAAKqoB,cACvC9rB,KAAK+yD,8BAA8BtvD,EAAKqoB,eAAiBjvB,EAE1D,iBAAiBo2D,GAChBjzD,KAAKoC,OAAS,EACdpC,KAAKmsB,cAAcnsB,KAAKoC,OAAS6wD,EAGlC,kBACC,OAAOjzD,KAAK6yD,aAGb,wBAAwBpvD,GACMzD,KAAKgzD,YAAYhuD,IAAKlH,GAAMA,aAAC,EAADA,EAAGguB,eAEnCg6B,SAASriD,EAAKqoB,iBACtC9rB,KAAK+yD,8BAA8BtvD,EAAKqoB,eAAiBroB,EAAK5G,MAIhE,UACC,MAAM8R,EAAW,IAAI0gC,MAAcrvC,KAAKoC,OACxC,IAAK,IAAItH,EAAI,EAAGA,GAAKkF,KAAKoC,MAAOtH,IAAK,CACrC,MAAM2I,EAAOzD,KAAKgzD,YAAYl4D,GAC9B,GAAI2I,EACHkL,EAAS7T,GAAKkF,KAAK+yD,8BAA8BtvD,EAAKqoB,mBAChD,CACN,MAAMmnC,EAAejzD,KAAKmsB,cAAcrxB,GACpCm4D,IACHtkD,EAAS7T,GAAKm4D,IAKjB,IAAIC,EAAcvkD,EAASzJ,KAAK,EAAA4U,WAAWza,WAE3C,MAAM8zD,EAAaD,EAAY,GAO/B,OANIC,IACE,EAAAr5C,WAAW0S,oBAAoBs5B,SAASqN,KAC5CD,EAAc,GAAG,EAAAp5C,WAAWza,YAAY6zD,MAInCA,K,8EC7DT,MAAME,EAAS,SAASC,GAAc,OAAO,SAAS91D,GAAU,OAAOiP,KAAK8iB,IAAI/xB,EAAG81D,KAC7EC,EAAS,SAASD,GAAc,OAAO,SAAS91D,GAAU,OAAO,EAAIiP,KAAK+mD,IAAI/mD,KAAK8iB,IAAI/xB,EAAE,EAAG81D,MAC5FG,EAAU,SAASH,GAAc,OAAO,SAAS91D,GAAU,OAAOA,EAAE,GAAK61D,EAAOC,EAAPD,CAAgB,EAAF71D,GAAK,EAAI+1D,EAAOD,EAAPC,CAAgB,EAAF/1D,EAAM,GAAG,EAAE,KAElH,EAAAgyB,OAAS,CACpBkkC,OAAQD,EAAQ,GAEhBJ,OAAQ,SAAS71D,EAAU81D,GAAe,OAAOD,EAAOC,EAAPD,CAAc71D,IAC/D+1D,OAAQ,SAAS/1D,EAAU81D,GAAe,OAAOC,EAAOD,EAAPC,CAAc/1D,IAC/Di2D,QAAS,SAASj2D,EAAU81D,GAAe,OAAOG,EAAQH,EAARG,CAAej2D,IAEjEm2D,QAASN,EAAO,GAChBO,QAASL,EAAO,GAChBM,SAAUJ,EAAQ,GAElBK,QAASL,EAAQ,GACjBM,QAASN,EAAQ,GACjBO,SAAUP,EAAQ,GAElBQ,QAASR,EAAQ,GACjBS,QAAST,EAAQ,GACjBU,SAAUV,EAAQ,GAQlBW,WAAY,SAAS52D,GAAW,OAAO,EAAIiP,KAAKwhB,IAAIxhB,KAAKiZ,GAAK,EAAIloB,EAAIiP,KAAKiZ,GAAK,IAChF2uC,WAAY,SAAS72D,GAAW,OAAOiP,KAAKwhB,IAAIxhB,KAAKiZ,GAAK,EAAIloB,IAC9D82D,YAAa,SAAS92D,GAAW,OAAQ,EAAIiP,KAAKwhB,IAAIxhB,KAAKiZ,GAAKloB,EAAIiP,KAAKiZ,GAAK,IAAM,GAEpF6uC,eAAgB,SAAU/2D,GAAY,OAAQ,IAAM,IAAMA,GAAKiP,KAAKwhB,IAAI,GAAKzwB,GAAK,GAClFg3D,eAAgB,SAAUh3D,GAAY,MAAO,IAAMA,IAAOA,EAAKiP,KAAKwhB,IAAI,GAAKzwB,IAC7Ei3D,gBAAiB,SAAUj3D,GAAY,OAAQA,GAAK,IAAM,GAAK,IAAM,IAAMA,GAAKiP,KAAKwhB,IAAI,GAAKzwB,IAAM,IAAM,IAAMA,GAAKiP,KAAKwhB,IAAI,GAAKzwB,GAAK,K,oFCtC1I,E,KAAA,uBACA,SACA,QACA,QAIA,MAAa61C,UAAmB,EAAAhB,kBAC/B,cACC,OAAO,EAAA1zC,UAAUI,MAElB,+BACC,OAAOkB,KAAK4S,cAEb,2BACC,OAAO5S,KAAKunB,WAEb,uBACC,OAAOvnB,KAAK1C,MAEb,2BACCmqC,EACAC,GAEA,OAAOD,GAAcC,EAEtB,wBAAwBvgB,EAA2CC,GAClE,OAAOD,GAAQC,EAEhB,eAAeF,GACd,GAAI,UAAgBA,GACnB,OAAOA,EAEP,GAAI,EAAAtiB,WAAW6vD,UAAUvtC,GAAU,CAClC,MAAM5W,EAASokD,WAAWxtC,GAC1B,GAAI,UAAgB5W,GACnB,OAAOA,EAGT,OAAO,KAGT,QAAQ4W,GACP,MAAMrrB,EAASu3C,EAAWd,QAAQprB,GAClC,OAAIrrB,EACImE,KAAKvB,QAAQk2D,gBAAgB94D,GAE7BA,GAxCV,gB,2FCTA,QACA,SAIA,QAGA,SAGA,MAAa+jD,UAA0B,EAAAp5B,WAAvC,c,oBACS,KAAAouC,YAAmC,KAE3C,cACC,OAAO,EAAAl2D,UAAUO,cAElB,+BACC,OAAOe,KAAK4S,cAEb,2BACC,MAAO,GAAG5S,KAAKunB,aAEhB,uBACC,MAAO,GAAGvnB,KAAK1C,QAEhB,2BACCmqC,EACAC,GAEA,OAAOD,GAAcC,EAEtB,wBACCvgB,EACAC,GAEA,OAAOD,GAAQC,EAEhB,iBACC,OAAOpnB,KAAKinB,QAAUjnB,KAAK4S,cAElB,oBACT5S,KAAKinB,OAASjnB,KAAKunB,WACnBvnB,KAAKgY,YACLhY,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,eAGtB,sB,2DACf,MAAMluB,EAAO5Z,KAAKinB,OAClB,IAAIxjB,EAAO,KAYX,GAX+B,MAARmW,GAAyB,KAATA,IAGtCnW,EAAO,EAAAqW,WAAWG,UAAUja,KAAKyD,KAAMmW,IAQpC5Z,KAAK40D,cAAgBnxD,EAAM,CAC9B,MAAM+hC,EAA0BxlC,KAAKvB,QAAQ+mC,0BAU7C,GARIxlC,KAAK40D,aACJpvB,GACHxlC,KAAK6oB,mBAAmB7oB,KAAK40D,aAK/B50D,KAAK40D,YAAcnxD,EACfA,EAAM,CACT,MAAMoxD,EAAmB70D,KAAKvB,QAAQq2D,uBAChCt0C,EAA+C,QAAnC,EAAc,QAAd,EAAG/c,EAAK/C,cAAM,eAAE0gB,2BAAmB,eAAEmkB,QACnDsvB,GAAoBr0C,GAAoC,MAApBq0C,EACnCrvB,GACHxlC,KAAK4oB,gBAAgBnlB,GAKtBzD,KAAKgyB,OAAO9T,MAAM3d,IACjB,mBAAmBs0D,8BAA6Cr0C,KAQnExgB,KAAKvB,QAAQw0C,mBAEdjzC,KAAKkY,wBAGN,aACC,OAAOlY,KAAK40D,aAtFd,uB,2FCXA,2BAEA,QAIA,SACA,QAGA,SACA,SAEA,MAAa9U,UAAoB,EAAAt5B,WAChC,cACC,OAAO,EAAA9nB,UAAUY,OAElB,+BACC,OAAOU,KAAK4S,cAEH,iBAAiB8U,GAC1B,MAAO,GAAGA,IAEX,2BACC,MAAO,GAAG1nB,KAAKunB,aAEhB,uBACC,MAAO,GAAGvnB,KAAK1C,QAEhB,2BACCmqC,EACAC,GAEA,OAAOD,GAAcC,EAEtB,wBAAwBvgB,EAA4CC,GACnE,OAAOD,GAAQC,EAEhB,iBACC,OAAOpnB,KAAKunB,YAAcvnB,KAAK4S,cAGhC,QAAQsU,GACP,OAAI,UAAgBA,GACZA,EAED,GAAGA,IAGX,gBACC,OAAOlnB,KAAKunB,WAEH,oBACTvnB,KAAKgyB,OAAO9T,MAAML,QAEd7d,KAAK+0D,gBAAgB/0D,KAAKunB,YAAYvsB,QAAU,GACnDgF,KAAK+mB,uBAAyB/mB,KAAK+mB,wBAA0B,IAAI,EAAA2rB,qBAAqB1yC,MAClFA,KAAKunB,YAAcvnB,KAAK+mB,uBAAuB4rB,aAClD3yC,KAAK+mB,uBAAuBwrB,eAAevyC,KAAKunB,YAChDvnB,KAAKgY,YACLhY,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAWyqB,sBAGlCxyC,KAAKunB,YAAcvnB,KAAKinB,SAC3BjnB,KAAKinB,OAASjnB,KAAKunB,WACnBvnB,KAAKkY,qBACLlY,KAAKiY,qBAAqBjY,MAC1BA,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,eACjC9nC,KAAK+mB,yBACR/mB,KAAK+mB,uBAAuBwrB,oBAAehuC,GAAW,GACtDvE,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAWyqB,sBAKzB,sB,yDACf,IAA8B,QAA1B,EAAAxyC,KAAKspB,6BAAqB,eAAE7oB,UAAWT,KAAKspB,sBAAsBspB,kBAAmB,CACxF,MAAMC,QAA0B7yC,KAAKspB,sBAAsBwpB,qBAC3D,GAAI9yC,KAAKspB,sBAAsBypB,WAC9B/yC,KAAKgyB,OAAO9T,MAAM3d,IAAI,qBAAqBP,KAAKspB,sBAAsBiU,qBAChE,CACN,MAAM8U,EAAYryC,KAAKsyC,QAAQO,GAGd,MAAbR,GACHryC,KAAKinB,OAASorB,EACdryC,KAAK6nB,gBAAgBC,KAAK,EAAAC,WAAW+f,gBAErC9nC,KAAKgyB,OAAO9T,MAAM3d,IAAI,uCAAuCsyC,MAE9D7yC,KAAKkY,0BAKA,gBAAgBjT,GACvB,OAAO,EAAAutD,WAAWE,sBAAsBztD,IAnF1C,iB,8ECdA,eAIA,IAAK+vD,GAAL,SAAKA,GACJ,sBACA,gBACA,4BACA,sBACA,wBACA,0BACA,0BACA,wBACA,wBACA,sBACA,oBACA,wCACA,sCACA,kBACA,gBAfD,CAAKA,MAAc,KAiBN,EAAA7F,2BAA+C,CAC3D6F,EAAeC,SACfD,EAAeE,MACfF,EAAeG,YACfH,EAAeI,SACfJ,EAAeK,UACfL,EAAeM,WACfN,EAAeO,WACfP,EAAeQ,UACfR,EAAeS,UACfT,EAAeU,SACfV,EAAeW,QACfX,EAAeY,kBACfZ,EAAea,iBACfb,EAAec,OACfd,EAAee,OAGhB,MAAaC,UAA8B,EAAAC,qBAC1C,cAAc/uB,GACb,OAAO,EAAAioB,2BAA2BrJ,SAAS5e,EAAM3oC,OAFnD,2B,4FCvCA,SACA,QACA,QACA,SAiBA,SAEA,OAEA,SAEA,OACA,SACA,yBACA,MAAa23D,EAKZ,YAAsBzyD,GAAA,KAAAA,OAFZ,KAAA0yD,UAAY,IAAI,EAAAxwB,UAChB,KAAAywB,MAAQ,IAAI,EAAAv/B,QAErB72B,KAAKq2D,uBAEN,cAAcnvB,EAAcC,EAA2BC,GAClDF,aAAiBovB,WACpBt2D,KAAKu2D,oBAAoBrvB,EAAOC,EAAQC,GAC9BF,aAAiBsvB,eAC3Bx2D,KAAKy2D,uBAAuBvvB,EAAOC,EAAQC,GAG7C,oBAAoBF,EAAmBC,EAA2BC,IAClE,uBAAuBF,EAAsBC,EAA2BC,IACxE,SAAS3jC,GACRzD,KAAKyD,KAAOA,EAEb,wBACU,iCAAiCyjC,EAAmBC,GAC7DnnC,KAAKo2D,MAAM9wD,EAAK4hC,EAAMwvB,QAAUvvB,EAAOwvB,YAAe,EAAI,EAC1D32D,KAAKo2D,MAAM7wD,GAAM2hC,EAAM0vB,QAAUzvB,EAAO0vB,aAAgB,EAAI,GAvB9D,4BAgCA,MAAMC,UAA8B,EAAAhuD,iBAApC,c,oBACC,KAAAiuD,gBAAkB,EAAAz0C,YAAYhjB,OA1DD,sdA0D+B,CAC3D03D,OAAO,EACP/Z,SAAU,EAAAtB,oBAAoBsb,aAE/B,KAAAC,gBAAkB,EAAA50C,YAAYhjB,OAAO,GAAI,CAAC0sC,QAAQ,KAEnD,MAAMjjC,EAAe,IAAI+tD,EAEzB,MAAaK,UAAsB,EAAAvwB,eAAnC,c,oBACC,KAAA59B,cAAgBD,EAKhB,cACC,MAAO,OAER,kBAEC/I,KAAKa,GAAG6G,OAAO24B,kCAAkC,CAChD,IAAI,EAAAF,0BAA0B,UAAW,EAAAt8B,oBAAoBE,QAI/D,cAAcmjC,EAAcC,EAA2BC,GACtDpnC,KAAKo3D,uBAEDp3D,KAAKq3D,YACRr3D,KAAKq3D,WAAWvH,cAAc5oB,EAAOC,EAAQC,GAGvC,uBACFpnC,KAAKq3D,YAAcr3D,KAAKs3D,qBAAuBt3D,KAAKwe,GAAG04C,iBAC3Dl3D,KAAKu1C,WAGC,WACP,IACC,MAAMgiB,EAAgB,kBACnB,EAAAC,iBAAiBztC,OAAO/pB,KAAKwe,GAAG04C,kFAInC7zD,QAAQC,IAAI,iBACZD,QAAQC,IAAIi0D,GACZ,MAKME,EALgD,IAAI,EAAA9Y,cACzD,0BACA,QACA4Y,EAEuBG,CAA2BxB,EAAyBzpC,GACxEgrC,GACHz3D,KAAKq3D,WAAa,IAAII,EAAgBz3D,MACtCA,KAAKs3D,oBAAsBt3D,KAAKwe,GAAG04C,kBAEnCl3D,KAAKgyB,OAAO9T,MAAM3d,IAAI,4BACtBP,KAAKq3D,gBAAa9yD,GAElB,MAAOiL,GACRnM,QAAQiE,KAAKkI,GACbxP,KAAKgyB,OAAO9T,MAAM3d,IAAI,6BAA6BiP,MACnDxP,KAAKq3D,gBAAa9yD,IArDrB,mB,8ECtEA,yBACC,cAAcozD,GACb,MAAMrkC,EAAQqkC,EAAsB/oD,MAAM,MACpCgpD,EAA2B,GACjC,IAAK,IAAIC,KAAQvkC,EACXukC,EAAKhqD,MAAM,2BACfgqD,EAAOA,EAAK5pD,QAAQ,UAAW,WAC/B2pD,EAAet8D,KAAKu8D,IAItB,OADAx0D,QAAQC,IAAI,iBAAkBs0D,GACvBA,EAAe1yD,KAAK,S,8ECP7B,iBAIC,YAAsBzB,GAAA,KAAAA,OAFZ,KAAAq0D,QAAkB,EAClB,KAAAC,OAAoC,KAI9C,SAASvc,GACRx7C,KAAK+3D,OAAS/3D,KAAK+3D,QAAU,GAC7B/3D,KAAK+3D,OAAOz8D,KAAKkgD,GAER,aACV,IAAIjf,GACCv8B,KAAK83D,QAAUv7B,IAClBv8B,KAAK83D,OAASv7B,EACdv8B,KAAKg4D,YACLh4D,KAAKi4D,aAGP,aACC,OAAOj4D,KAAK83D,OAEb,SACC93D,KAAKO,KAAKP,KAAK83D,QAEhB,YACC,GAAI93D,KAAK+3D,OACR,IAAK,IAAIvc,KAAQx7C,KAAK+3D,OACrBvc,O,iFC3BJ,MAAsBpd,EAIrB,cACCp+B,KAAKk4D,IAAM95B,EAAsB+5B,YAElC,KACC,OAAOn4D,KAAKk4D,IAGb,oBACCljC,EACA7sB,EACAM,KAdF,0BACgB,EAAA0vD,UAAoB,G,8ECJpC,oCAIC,YAAoBC,EAAuC,IAAvC,KAAAA,eAHpB,KAAAC,UAAoB,EAKpB,cACC,OAAOr4D,KAAKq4D,SAEb,oBACC,OAAOr4D,KAAK+9C,eAGb,OACC,MAAMua,EAAyD,IAAI/nC,IAC7D8M,EAAkB,GAExB,IAAK,IAAIjI,KAAcp1B,KAAKo4D,aAC3B,IAAKp4D,KAAKq4D,SAAU,CACnB,MAAMx7D,EAAOu4B,EAAWv4B,KAClB07D,EAAWD,EAAoBp7D,IAAIL,GACrC07D,EACCA,EAASpyD,WAAaivB,EAAWjvB,YACpCnG,KAAKq4D,UAAW,EAChBr4D,KAAK+9C,eAAiB,qBAAqB3oB,EAAWv4B,mBAAmBu4B,EAAWjvB,YACpF9C,QAAQiE,KAAK,yBAA0BtH,KAAK+9C,kBAG7Cua,EAAoB/3D,IAAI1D,EAAMu4B,GAC9BiI,EAAM/hC,KAAKuB,IAKd,MAAM27D,EAA2C,GACjD,IAAK,IAAI37D,KAAQwgC,EAAO,CACvB,MAAMjI,EAAakjC,EAAoBp7D,IAAIL,GACvCu4B,GACHojC,EAAiBl9D,KAAK85B,GAKxB,OAAOojC,K,2FC7CT,2BACA,2BAMA,SACA,QA0BA,2BASC,YAAoB18B,EAAuC/K,GAAvC,KAAA+K,aAAuC,KAAA/K,kBARnD,KAAA0nC,iBAAgD,IAAIloC,IACpD,KAAAmoC,0BAAyD,IAAInoC,IAC7D,KAAAooC,qBAA4C,IAAIpoC,IAChD,KAAAqoC,mBAAqC,IAAIroC,IACzC,KAAAsoC,mBAA4C,IAAItoC,IAKvDvwB,KAAK8X,OAAS9X,KAAK+wB,gBAAgB3tB,MAAMuU,MAGlC,QACP3X,KAAKy4D,iBAAiB56C,QACtB7d,KAAK24D,qBAAqB96C,QAC1B7d,KAAK44D,mBAAmB/6C,QACxB7d,KAAK64D,mBAAmBh7C,QAExB7d,KAAKizB,eAAerxB,QAASoxB,IAC5BhzB,KAAK04D,0BAA0Bn4D,IAAIyyB,EAAa,IAAIzC,OAItD,eACC,OAAOvwB,KAAK87B,WAAW7I,aAExB,4BAA4B8Z,EAAc/Z,GACzC,OAAOhzB,KAAK87B,WAAWg9B,4BAA4B/rB,EAAW/Z,GAG/D,SAASgY,GACRhrC,KAAK2I,QAEL,IAAK,IAAIqqB,KAAehzB,KAAKizB,eAC5BjzB,KAAKy4D,iBAAiBl4D,IAAIyyB,EAAa,IAAIzC,KAG5C,IAAK,IAAIyC,KAAehzB,KAAKizB,eAAgB,CAC5CjzB,KAAK+4D,aAAe/lC,EACpB,IAAK,IAAI+Z,KAAa/B,EACrBhrC,KAAKg5D,2BAA2BjsB,GAChC/sC,KAAKi5D,kBAKPj5D,KAAK44D,mBAAmBh3D,QAAQ,CAACs3D,EAAeC,KAClC,MAATD,GAGH,EAAA1jC,SAASC,uBAAuBz1B,KAAK64D,mBAAoBK,EAAOC,KAKnE,kBAAkBxJ,G,MACjB3vD,KAAK+4D,aAAe,EAAAxoD,WAAW6oD,yBAC/Bp5D,KAAK04D,0BAA0Bn4D,IAAIP,KAAK+4D,aAAc,IAAIxoC,KAC1DvwB,KAAKy4D,iBAAiBl4D,IAAIP,KAAK+4D,aAAc,IAAIxoC,KACjD,IAAK,IAAI9sB,KAAQksD,EAChB3vD,KAAKq5D,YAAY51D,GAGlB,MAAM61D,EAAqB,GAI3B,OAH4C,QAA5C,EAAAt5D,KAAKy4D,iBAAiBv7D,IAAI8C,KAAK+4D,qBAAa,SAAEn3D,QAAQ,CAACtE,EAAgBM,KACtE07D,EAASh+D,KAAKsC,KAERoC,KAAK8X,OAAOyhD,eAAeD,GAGnC,sBAAsBtmC,GACrB,MAAMwmC,EAAmB,GACzBx5D,KAAK64D,mBAAmBj3D,QAAQ,CAACtE,EAAiBM,KACjD47D,EAAOl+D,KAAKsC,KAEb47D,EAAOvpD,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAC1B,MAAMw/C,EAAa,GAcnB,OAbA6J,EAAO53D,QAASs3D,IACf,MAAMO,EAAsBz5D,KAAK64D,mBAAmB37D,IAAIg8D,GACpDO,GACHA,EAAoB73D,QAASu3D,I,MAE5B,GADkE,QAAlD,EAAGn5D,KAAK04D,0BAA0Bx7D,IAAI81B,UAAY,eAAE91B,IAAIi8D,GACxD,CACf,MAAM11D,EAAOzD,KAAK8X,OAAO4hD,aAAaP,GACtCxJ,EAAMr0D,KAAKmI,QAMRksD,EAER,eACC,MAAM6J,EAAmB,GACzBx5D,KAAK64D,mBAAmBj3D,QAAQ,CAACm4C,EAAemf,KAC/CM,EAAOl+D,KAAK49D,KAEbM,EAAOvpD,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAC1B,MAAMw/C,EAAa,GAanB,OAZA6J,EAAO53D,QAASs3D,IACf,MAAMO,EAAsBz5D,KAAK64D,mBAAmB37D,IAAIg8D,GACxD,GAAIO,EACH,IAAK,IAAIN,KAAYM,EAAqB,CACzC,MAAMh2D,EAAOzD,KAAK8X,OAAO4hD,aAAaP,GAClC11D,GACHksD,EAAMr0D,KAAKmI,MAMRksD,EAEA,2BAA2B5iB,G,MAGmB,QAArD,EAAA/sC,KAAK04D,0BAA0Bx7D,IAAI8C,KAAK+4D,qBAAa,SAAEx4D,IAAIwsC,EAAUjhB,eAAe,GAEpF,MAAM4I,EAAc10B,KAAK84D,4BAA4B/rB,EAAW/sC,KAAK+4D,cACrE,GAAIrkC,EACH,IAAK,IAAIlB,KAAckB,EAAa,CAEnC,MAAMxa,EAAQ6yB,EAAUlsC,GAAG6G,OAAO+rB,YAAYD,GAC1CtZ,IACH,EAAAsb,SAASC,uBACRz1B,KAAK24D,qBACLz+C,EAAM4R,cACNihB,EAAUjhB,eAEX9rB,KAAKq5D,YAAYn/C,IAiCpBla,KAAK24D,qBAAqB/2D,QAAQ,CAACd,EAAmBq4D,KACrDn5D,KAAK24D,qBAAqBp4D,IAAI44D,EAAU,UAAYr4D,MAI9C,YAAY2C,G,MACkC,QAArD,EAAAzD,KAAK04D,0BAA0Bx7D,IAAI8C,KAAK+4D,qBAAa,SAAEx4D,IAAIkD,EAAKqoB,eAAe,GAE/E,MAAMpkB,EAAS,UAAejE,EAAK5C,GAAG6G,OAAOA,UAEvCiyD,EADkB,UAAYjyD,EAAO1C,IAAKlH,GAAMA,EAAEguB,gBAClB9mB,IAAKm0D,GAAan5D,KAAK8X,OAAO4hD,aAAaP,IACjF,GAAIQ,EAAc3+D,OAAS,EAE1B,IAAK,IAAIkf,KAASy/C,EACjB,EAAAnkC,SAASC,uBAAuBz1B,KAAK24D,qBAAsBz+C,EAAM4R,cAAeroB,EAAKqoB,eAErF9rB,KAAKq5D,YAAYn/C,QAGlBla,KAAKy4D,iBAAiBv7D,IAAI8C,KAAK+4D,cAAex4D,IAAIkD,EAAKqoB,eAAe,GAIhE,kBACP9rB,KAAKy4D,iBAAiB72D,QAAQ,CAACg4D,EAAsB5mC,KACpD4mC,EAAqBh4D,QAAQ,CAACskC,EAASizB,KACtCn5D,KAAK65D,eAAeV,OASf,eAAeA,EAAkBD,EAAgB,GACxD,MAAMY,EAAgB95D,KAAK44D,mBAAmB17D,IAAIi8D,GAC7B,MAAjBW,EACH95D,KAAK44D,mBAAmBr4D,IAAI44D,EAAU3sD,KAAKC,IAAIqtD,EAAeZ,IAE9Dl5D,KAAK44D,mBAAmBr4D,IAAI44D,EAAUD,GAKvC,MAAMa,EAAa/5D,KAAK24D,qBAAqBz7D,IAAIi8D,GAC7CY,GACHA,EAAWn4D,QAASo4D,IACnBh6D,KAAK65D,eAAeG,EAAWd,EAAQ,Q,8ECrP3C,cAUA,OAEA,MAAMe,UAA8B,EAAAnxD,kBACpC,MAAMC,EAAe,IAAIkxD,EAEzB,MAAa3uB,UAAsB,EAAA3kC,YAAnC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,UAGR,gB,MACmB,QAAlB,EAAA/I,KAAKuD,qBAAa,SAAEgE,qBAAqB20B,mBAAmBl8B,MAG7D,UAAUyI,G,QAE+B,QAAxC,EAAkB,QAAlB,EAAAzI,KAAKuD,qBAAa,eAAEgE,4BAAoB,SAAE2pB,UAAUgpC,uBAAuBl6D,KAAMyI,IAZnF,mB,6BCfA,mJAwBIq5C,EAAgB,SAAW/jD,EAAQo8D,GAkHxB,IAETjQ,EAGApkC,EACAs0C,EAEAC,EACAC,OAzHe/1D,IAAf41D,GAA2B92D,QAAQiE,KAAM,4EACzC6yD,IAAeI,UAAWl3D,QAAQ6a,MAAO,4HAE9Cle,KAAKjC,OAASA,EACdiC,KAAKm6D,WAAaA,EAGlBn6D,KAAK2d,SAAU,EAGf3d,KAAK4iD,OAAS,IAAI,UAGlB5iD,KAAKuiD,YAAc,EACnBviD,KAAKwiD,YAAcgY,IAGnBx6D,KAAKy6D,QAAU,EACfz6D,KAAK06D,QAAUF,IAIfx6D,KAAKyiD,cAAgB,EACrBziD,KAAK0iD,cAAgBl2C,KAAKiZ,GAI1BzlB,KAAK26D,iBAAoBH,IACzBx6D,KAAK46D,gBAAkBJ,IAIvBx6D,KAAKmiD,eAAgB,EACrBniD,KAAKoiD,cAAgB,IAIrBpiD,KAAKkiD,YAAa,EAClBliD,KAAK66D,UAAY,EAGjB76D,KAAKiiD,cAAe,EACpBjiD,KAAKqiD,YAAc,EAGnBriD,KAAKgiD,WAAY,EACjBhiD,KAAK86D,SAAW,EAChB96D,KAAKsiD,oBAAqB,EAC1BtiD,KAAK+6D,YAAc,EAInB/6D,KAAKg7D,YAAa,EAClBh7D,KAAKi7D,gBAAkB,EAGvBj7D,KAAK2iD,YAAa,EAGlB3iD,KAAK6R,KAAO,CAAEqpD,KAAM,GAAIC,GAAI,GAAIC,MAAO,GAAIC,OAAQ,IAGnDr7D,KAAKs7D,aAAe,CAAEJ,KAAM,QAAMK,OAAQC,OAAQ,QAAMC,MAAOL,MAAO,QAAMM,KAG5E17D,KAAK27D,QAAU,CAAEC,IAAK,QAAML,OAAQM,IAAK,QAAMC,WAG/C97D,KAAK+7D,QAAU/7D,KAAK4iD,OAAO7/C,QAC3B/C,KAAKg8D,UAAYh8D,KAAKjC,OAAOqW,SAASrR,QACtC/C,KAAKi8D,MAAQj8D,KAAKjC,OAAOm+D,KAMzBl8D,KAAKm8D,cAAgB,WAEpB,OAAOC,EAAUC,KAIlBr8D,KAAKs8D,kBAAoB,WAExB,OAAOF,EAAUG,OAIlBv8D,KAAKw8D,UAAY,WAEhBC,EAAMV,QAAQn4C,KAAM64C,EAAM7Z,QAC1B6Z,EAAMT,UAAUp4C,KAAM64C,EAAM1+D,OAAOqW,UACnCqoD,EAAMR,MAAQQ,EAAM1+D,OAAOm+D,MAI5Bl8D,KAAK2I,MAAQ,WAEZ8zD,EAAM7Z,OAAOh/B,KAAM64C,EAAMV,SACzBU,EAAM1+D,OAAOqW,SAASwP,KAAM64C,EAAMT,WAClCS,EAAM1+D,OAAOm+D,KAAOO,EAAMR,MAE1BQ,EAAM1+D,OAAO2+D,yBACbD,EAAM/4C,cAAei5C,GAErBF,EAAMhkC,SAEN5b,EAAQ+/C,EAAMC,MAKf78D,KAAKy4B,QAEAyxB,EAAS,IAAI,UAGbpkC,GAAO,IAAI,cAAaO,mBAAoBtoB,EAAOgtB,GAAI,IAAI,UAAS,EAAG,EAAG,IAC1EqvC,EAAct0C,EAAK/iB,QAAQ+5D,UAE3BzC,EAAe,IAAI,UACnBC,EAAiB,IAAI,aAElB,WAEN,IAAIlmD,EAAWqoD,EAAM1+D,OAAOqW,SAoF5B,OAlFA81C,EAAOtmC,KAAMxP,GAAWgb,IAAKqtC,EAAM7Z,QAGnCsH,EAAO6S,gBAAiBj3C,GAGxBs2C,EAAUY,eAAgB9S,GAErBuS,EAAMzB,YAAcn+C,IAAU+/C,EAAMC,MAExCI,EA8JK,EAAIzwD,KAAKiZ,GAAK,GAAK,GAAKg3C,EAAMxB,iBA1J/BwB,EAAMta,eAEVia,EAAUG,OAASW,EAAeX,MAAQE,EAAMra,cAChDga,EAAUC,KAAOa,EAAeb,IAAMI,EAAMra,gBAI5Cga,EAAUG,OAASW,EAAeX,MAClCH,EAAUC,KAAOa,EAAeb,KAKjCD,EAAUG,MAAQ/vD,KAAKC,IAAKgwD,EAAM9B,gBAAiBnuD,KAAKof,IAAK6wC,EAAM7B,gBAAiBwB,EAAUG,QAG9FH,EAAUC,IAAM7vD,KAAKC,IAAKgwD,EAAMha,cAAej2C,KAAKof,IAAK6wC,EAAM/Z,cAAe0Z,EAAUC,MAExFD,EAAUe,WAGVf,EAAUgB,QAAU76C,EAGpB65C,EAAUgB,OAAS5wD,KAAKC,IAAKgwD,EAAMla,YAAa/1C,KAAKof,IAAK6wC,EAAMja,YAAa4Z,EAAUgB,UAI1D,IAAxBX,EAAMta,cAEVsa,EAAM7Z,OAAO2G,gBAAiB8T,EAAWZ,EAAMra,eAI/Cqa,EAAM7Z,OAAOzlC,IAAKkgD,GAInBnT,EAAOoT,iBAAkBlB,GAGzBlS,EAAO6S,gBAAiB3C,GAExBhmD,EAASwP,KAAM64C,EAAM7Z,QAASzlC,IAAK+sC,GAEnCuS,EAAM1+D,OAAOw/D,OAAQd,EAAM7Z,SAEE,IAAxB6Z,EAAMta,eAEV+a,EAAeX,OAAW,EAAIE,EAAMra,cACpC8a,EAAeb,KAAS,EAAII,EAAMra,cAElCib,EAAUx5C,eAAgB,EAAI44C,EAAMra,iBAIpC8a,EAAe38D,IAAK,EAAG,EAAG,GAE1B88D,EAAU98D,IAAK,EAAG,EAAG,IAItBgiB,EAAQ,KAMHi7C,GACJnD,EAAaoD,kBAAmBhB,EAAM1+D,OAAOqW,UAAaspD,GAC1D,GAAM,EAAIpD,EAAe9Q,IAAKiT,EAAM1+D,OAAOqnB,aAAiBs4C,KAE5DjB,EAAM/4C,cAAei5C,GAErBtC,EAAaz2C,KAAM64C,EAAM1+D,OAAOqW,UAChCkmD,EAAe12C,KAAM64C,EAAM1+D,OAAOqnB,YAClCo4C,GAAc,GAEP,KAUVx9D,KAAKoe,QAAU,WAEdq+C,EAAMtC,WAAWwD,oBAAqB,cAAeC,IAAe,GACpEnB,EAAMtC,WAAWwD,oBAAqB,YAAaE,GAAa,GAChEpB,EAAMtC,WAAWwD,oBAAqB,QAASG,GAAc,GAE7DrB,EAAMtC,WAAWwD,oBAAqB,aAAcI,IAAc,GAClEtB,EAAMtC,WAAWwD,oBAAqB,WAAYK,IAAY,GAC9DvB,EAAMtC,WAAWwD,oBAAqB,YAAaM,IAAa,GAEhE1D,SAASoD,oBAAqB,YAAaO,GAAa,GACxD3D,SAASoD,oBAAqB,UAAWQ,GAAW,GAEpD1B,EAAMtC,WAAWwD,oBAAqB,UAAWS,IAAW,IAU7D,IAAI3B,EAAQz8D,KAER28D,EAAc,CAAEp+D,KAAM,UACtB8/D,EAAa,CAAE9/D,KAAM,SACrB+/D,EAAW,CAAE//D,KAAM,OAEnBq+D,EAAQ,CACXC,MAAQ,EACRtB,OAAQ,EACRE,MAAO,EACPC,IAAK,EACL6C,aAAc,EACdC,UAAW,EACXC,gBAAiB,EACjBC,mBAAoB,GAGjB7hD,EAAQ+/C,EAAMC,KAEda,EAAM,KAGNtB,EAAY,IAAI,IAChBc,EAAiB,IAAI,IAErB36C,EAAQ,EACR86C,EAAY,IAAI,UAChBG,GAAc,EAEdmB,EAAc,IAAI,UAClBC,EAAY,IAAI,UAChBC,EAAc,IAAI,UAElBC,EAAW,IAAI,UACfC,EAAS,IAAI,UACbC,EAAW,IAAI,UAEfC,EAAa,IAAI,UACjBC,EAAW,IAAI,UACfC,EAAa,IAAI,UAQrB,SAASC,IAER,OAAO5yD,KAAK8iB,IAAK,IAAMmtC,EAAM5B,WAI9B,SAASoC,EAAYoC,GAEpBnC,EAAeX,OAAS8C,EAIzB,SAASC,EAAUD,GAElBnC,EAAeb,KAAOgD,EAIvB,IAEKp6D,EAFDs6D,GAECt6D,EAAI,IAAI,UAEL,SAAkB4lB,EAAU20C,GAElCv6D,EAAEw6D,oBAAqBD,EAAc,GACrCv6D,EAAE4e,gBAAkBgH,GAEpBwyC,EAAUlgD,IAAKlY,KAMby6D,EAAQ,WAEX,IAAIz6D,EAAI,IAAI,UAEZ,OAAO,SAAgB4lB,EAAU20C,IAEE,IAA7B/C,EAAMna,mBAEVr9C,EAAEw6D,oBAAqBD,EAAc,IAIrCv6D,EAAEw6D,oBAAqBD,EAAc,GACrCv6D,EAAEwkD,aAAcgT,EAAM1+D,OAAOgtB,GAAI9lB,IAIlCA,EAAE4e,eAAgBgH,GAElBwyC,EAAUlgD,IAAKlY,IAnBL,GA0BR06D,EAAM,WAET,IAAIzV,EAAS,IAAI,UAEjB,OAAO,SAAc0V,EAAQC,GAE5B,IAAIjwD,EAAU6sD,EAAMtC,WAEpB,GAAKsC,EAAM1+D,OAAO+hE,oBAAsB,CAGvC,IAAI1rD,EAAWqoD,EAAM1+D,OAAOqW,SAC5B81C,EAAOtmC,KAAMxP,GAAWgb,IAAKqtC,EAAM7Z,QACnC,IAAImd,EAAiB7V,EAAOlvD,SAG5B+kE,GAAkBvzD,KAAKwzD,IAAOvD,EAAM1+D,OAAOkiE,IAAM,EAAMzzD,KAAKiZ,GAAK,KAGjE85C,EAAS,EAAIK,EAASG,EAAiBnwD,EAAQswD,aAAczD,EAAM1+D,OAAOslB,QAC1Eq8C,EAAO,EAAIG,EAASE,EAAiBnwD,EAAQswD,aAAczD,EAAM1+D,OAAOslB,aAE7Do5C,EAAM1+D,OAAOoiE,sBAGxBZ,EAASK,GAAWnD,EAAM1+D,OAAOsgD,MAAQoe,EAAM1+D,OAAOogD,MAASse,EAAM1+D,OAAOm+D,KAAOtsD,EAAQwwD,YAAa3D,EAAM1+D,OAAOslB,QACrHq8C,EAAOG,GAAWpD,EAAM1+D,OAAOsiE,IAAM5D,EAAM1+D,OAAOuiE,QAAW7D,EAAM1+D,OAAOm+D,KAAOtsD,EAAQswD,aAAczD,EAAM1+D,OAAOslB,UAKpHhgB,QAAQiE,KAAM,gFACdm1D,EAAMza,WAAY,IAhCX,GAwCV,SAASue,EAAUC,GAEb/D,EAAM1+D,OAAO+hE,oBAEjBv9C,GAASi+C,EAEE/D,EAAM1+D,OAAOoiE,sBAExB1D,EAAM1+D,OAAOm+D,KAAO1vD,KAAKC,IAAKgwD,EAAMhC,QAASjuD,KAAKof,IAAK6wC,EAAM/B,QAAS+B,EAAM1+D,OAAOm+D,KAAOsE,IAC1F/D,EAAM1+D,OAAO2+D,yBACbc,GAAc,IAIdn6D,QAAQiE,KAAM,uFACdm1D,EAAMva,YAAa,GAMrB,SAASue,EAASD,GAEZ/D,EAAM1+D,OAAO+hE,oBAEjBv9C,GAASi+C,EAEE/D,EAAM1+D,OAAOoiE,sBAExB1D,EAAM1+D,OAAOm+D,KAAO1vD,KAAKC,IAAKgwD,EAAMhC,QAASjuD,KAAKof,IAAK6wC,EAAM/B,QAAS+B,EAAM1+D,OAAOm+D,KAAOsE,IAC1F/D,EAAM1+D,OAAO2+D,yBACbc,GAAc,IAIdn6D,QAAQiE,KAAM,uFACdm1D,EAAMva,YAAa,GAUrB,SAASwe,EAAuBx5B,GAE/By3B,EAAYp+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAUvC,SAAS+J,EAAoBz5B,GAE5B43B,EAASv+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAwHpC,SAASgK,EAAwB15B,GAEhC,GAA6B,GAAxBA,EAAMy0B,QAAQ3gE,OAElB2jE,EAAYp+D,IAAK2mC,EAAMy0B,QAAS,GAAIkF,MAAO35B,EAAMy0B,QAAS,GAAImF,WAExD,CAEN,IAAIx7D,EAAI,IAAQ4hC,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,OAC1Dt7D,EAAI,IAAQ2hC,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,OAE9DnC,EAAYp+D,IAAK+E,EAAGC,IAMtB,SAASw7D,EAAqB75B,GAE7B,GAA6B,GAAxBA,EAAMy0B,QAAQ3gE,OAElB8jE,EAASv+D,IAAK2mC,EAAMy0B,QAAS,GAAIkF,MAAO35B,EAAMy0B,QAAS,GAAImF,WAErD,CAEN,IAAIx7D,EAAI,IAAQ4hC,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,OAC1Dt7D,EAAI,IAAQ2hC,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,OAE9DhC,EAASv+D,IAAK+E,EAAGC,IAMnB,SAASy7D,EAAuB95B,GAE/B,IAAI+5B,EAAK/5B,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,MACnDK,EAAKh6B,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,MAEnDj2C,EAAWre,KAAKoiB,KAAMqyC,EAAKA,EAAKC,EAAKA,GAEzCjC,EAAW1+D,IAAK,EAAGsqB,GAoBpB,SAASs2C,EAAuBj6B,GAE/B,GAA6B,GAAxBA,EAAMy0B,QAAQ3gE,OAElB4jE,EAAUr+D,IAAK2mC,EAAMy0B,QAAS,GAAIkF,MAAO35B,EAAMy0B,QAAS,GAAImF,WAEtD,CAEN,IAAIx7D,EAAI,IAAQ4hC,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,OAC1Dt7D,EAAI,IAAQ2hC,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,OAE9DlC,EAAUr+D,IAAK+E,EAAGC,GAInBs5D,EAAYuC,WAAYxC,EAAWD,GAAc96C,eAAgB44C,EAAMpa,aAEvE,IAAIzyC,EAAU6sD,EAAMtC,WAEpB8C,EAAY,EAAIzwD,KAAKiZ,GAAKo5C,EAAYv5D,EAAIsK,EAAQswD,cAElDZ,EAAU,EAAI9yD,KAAKiZ,GAAKo5C,EAAYt5D,EAAIqK,EAAQswD,cAEhDvB,EAAY/6C,KAAMg7C,GAInB,SAASyC,EAAoBn6B,GAE5B,GAA6B,GAAxBA,EAAMy0B,QAAQ3gE,OAElB+jE,EAAOx+D,IAAK2mC,EAAMy0B,QAAS,GAAIkF,MAAO35B,EAAMy0B,QAAS,GAAImF,WAEnD,CAEN,IAAIx7D,EAAI,IAAQ4hC,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,OAC1Dt7D,EAAI,IAAQ2hC,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,OAE9D/B,EAAOx+D,IAAK+E,EAAGC,GAIhBy5D,EAASoC,WAAYrC,EAAQD,GAAWj7C,eAAgB44C,EAAM3B,UAE9D6E,EAAKX,EAAS15D,EAAG05D,EAASz5D,GAE1Bu5D,EAASl7C,KAAMm7C,GAIhB,SAASuC,EAAsBp6B,GAE9B,IAAI+5B,EAAK/5B,EAAMy0B,QAAS,GAAIkF,MAAQ35B,EAAMy0B,QAAS,GAAIkF,MACnDK,EAAKh6B,EAAMy0B,QAAS,GAAImF,MAAQ55B,EAAMy0B,QAAS,GAAImF,MAEnDj2C,EAAWre,KAAKoiB,KAAMqyC,EAAKA,EAAKC,EAAKA,GAEzChC,EAAS3+D,IAAK,EAAGsqB,GAEjBs0C,EAAW5+D,IAAK,EAAGiM,KAAK8iB,IAAK4vC,EAAS35D,EAAI05D,EAAW15D,EAAGk3D,EAAM5B,YAE9D0F,EAAUpB,EAAW55D,GAErB05D,EAAWr7C,KAAMs7C,GA8BlB,SAASrB,EAAa32B,GAErB,IAAuB,IAAlBu1B,EAAM9+C,QAAX,CAUA,IAAI4jD,EAEJ,OATAr6B,EAAMs6B,iBAKN/E,EAAMtC,WAAWsH,MAAQhF,EAAMtC,WAAWsH,QAAUtjE,OAAOsjE,QAIlDv6B,EAAMw6B,QAEd,KAAK,EAEJH,EAAc9E,EAAMnB,aAAaJ,KACjC,MAED,KAAK,EAEJqG,EAAc9E,EAAMnB,aAAaE,OACjC,MAED,KAAK,EAEJ+F,EAAc9E,EAAMnB,aAAaF,MACjC,MAED,QAECmG,GAAgB,EAIlB,OAASA,GAER,KAAK,QAAM9F,MAEV,IAA0B,IAArBgB,EAAMva,WAAuB,QAnUrC,SAA+Bhb,GAE9B+3B,EAAW1+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAmUnC+K,CAAsBz6B,GAEtBrqB,EAAQ+/C,EAAMnB,MAEd,MAED,KAAK,QAAMF,OAEV,GAAKr0B,EAAM06B,SAAW16B,EAAM26B,SAAW36B,EAAM46B,SAAW,CAEvD,IAAyB,IAApBrF,EAAMza,UAAsB,OAEjC2e,EAAoBz5B,GAEpBrqB,EAAQ+/C,EAAMlB,QAER,CAEN,IAA4B,IAAvBe,EAAMxa,aAAyB,OAEpCye,EAAuBx5B,GAEvBrqB,EAAQ+/C,EAAMrB,OAIf,MAED,KAAK,QAAMG,IAEV,GAAKx0B,EAAM06B,SAAW16B,EAAM26B,SAAW36B,EAAM46B,SAAW,CAEvD,IAA4B,IAAvBrF,EAAMxa,aAAyB,OAEpCye,EAAuBx5B,GAEvBrqB,EAAQ+/C,EAAMrB,WAER,CAEN,IAAyB,IAApBkB,EAAMza,UAAsB,OAEjC2e,EAAoBz5B,GAEpBrqB,EAAQ+/C,EAAMlB,IAIf,MAED,QAEC7+C,EAAQ+/C,EAAMC,KAIXhgD,IAAU+/C,EAAMC,OAEpBtC,SAASwH,iBAAkB,YAAa7D,GAAa,GACrD3D,SAASwH,iBAAkB,UAAW5D,GAAW,GAEjD1B,EAAM/4C,cAAe26C,KAMvB,SAASH,EAAah3B,GAErB,IAAuB,IAAlBu1B,EAAM9+C,QAIX,OAFAupB,EAAMs6B,iBAEG3kD,GAER,KAAK+/C,EAAMrB,OAEV,IAA4B,IAAvBkB,EAAMxa,aAAyB,QAtYvC,SAAgC/a,GAE/B03B,EAAUr+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAEpCiI,EAAYuC,WAAYxC,EAAWD,GAAc96C,eAAgB44C,EAAMpa,aAEvE,IAAIzyC,EAAU6sD,EAAMtC,WAEpB8C,EAAY,EAAIzwD,KAAKiZ,GAAKo5C,EAAYv5D,EAAIsK,EAAQswD,cAElDZ,EAAU,EAAI9yD,KAAKiZ,GAAKo5C,EAAYt5D,EAAIqK,EAAQswD,cAEhDvB,EAAY/6C,KAAMg7C,GAElBnC,EAAMhkC,SA0XJupC,CAAuB96B,GAEvB,MAED,KAAK01B,EAAMnB,MAEV,IAA0B,IAArBgB,EAAMva,WAAuB,QA5XrC,SAA+Bhb,GAE9Bg4B,EAAS3+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAEnCuI,EAAWiC,WAAYlC,EAAUD,GAE5BE,EAAW55D,EAAI,EAEnBg7D,EAAUnB,KAECD,EAAW55D,EAAI,GAE1Bk7D,EAASrB,KAIVH,EAAWr7C,KAAMs7C,GAEjBzC,EAAMhkC,SA4WJwpC,CAAsB/6B,GAEtB,MAED,KAAK01B,EAAMlB,IAEV,IAAyB,IAApBe,EAAMza,UAAsB,QA9WpC,SAA6B9a,GAE5B63B,EAAOx+D,IAAK2mC,EAAMwvB,QAASxvB,EAAM0vB,SAEjCoI,EAASoC,WAAYrC,EAAQD,GAAWj7C,eAAgB44C,EAAM3B,UAE9D6E,EAAKX,EAAS15D,EAAG05D,EAASz5D,GAE1Bu5D,EAASl7C,KAAMm7C,GAEftC,EAAMhkC,SAsWJypC,CAAoBh7B,IAQvB,SAASi3B,EAAWj3B,IAEI,IAAlBu1B,EAAM9+C,UAIX48C,SAASoD,oBAAqB,YAAaO,GAAa,GACxD3D,SAASoD,oBAAqB,UAAWQ,GAAW,GAEpD1B,EAAM/4C,cAAe46C,GAErBzhD,EAAQ+/C,EAAMC,MAIf,SAASiB,EAAc52B,IAEC,IAAlBu1B,EAAM9+C,UAA0C,IAArB8+C,EAAMva,YAA0BrlC,IAAU+/C,EAAMC,MAAQhgD,IAAU+/C,EAAMrB,SAExGr0B,EAAMs6B,iBACNt6B,EAAMi7B,kBAEN1F,EAAM/4C,cAAe26C,GA1XtB,SAA2Bn3B,GAErBA,EAAM24B,OAAS,EAEnBY,EAASrB,KAEEl4B,EAAM24B,OAAS,GAE1BU,EAAUnB,KAIX3C,EAAMhkC,SAgXN2pC,CAAkBl7B,GAElBu1B,EAAM/4C,cAAe46C,IAItB,SAASF,GAAWl3B,IAEI,IAAlBu1B,EAAM9+C,UAA0C,IAArB8+C,EAAM9Z,aAA4C,IAApB8Z,EAAMza,WApXrE,SAAwB9a,GAEvB,IAAIhX,GAAc,EAElB,OAASgX,EAAMm7B,SAEd,KAAK5F,EAAM5qD,KAAKspD,GACfwE,EAAK,EAAGlD,EAAM1B,aACd7qC,GAAc,EACd,MAED,KAAKusC,EAAM5qD,KAAKwpD,OACfsE,EAAK,GAAKlD,EAAM1B,aAChB7qC,GAAc,EACd,MAED,KAAKusC,EAAM5qD,KAAKqpD,KACfyE,EAAKlD,EAAM1B,YAAa,GACxB7qC,GAAc,EACd,MAED,KAAKusC,EAAM5qD,KAAKupD,MACfuE,GAAOlD,EAAM1B,YAAa,GAC1B7qC,GAAc,EAKXA,IAGJgX,EAAMs6B,iBAEN/E,EAAMhkC,UAqVP6pC,CAAep7B,GAIhB,SAAS62B,GAAc72B,GAEtB,IAAuB,IAAlBu1B,EAAM9+C,QAAX,CAIA,OAFAupB,EAAMs6B,iBAEGt6B,EAAMy0B,QAAQ3gE,QAEtB,KAAK,EAEJ,OAASyhE,EAAMd,QAAQC,KAEtB,KAAK,QAAML,OAEV,IAA4B,IAAvBkB,EAAMxa,aAAyB,OAEpC2e,EAAwB15B,GAExBrqB,EAAQ+/C,EAAM2B,aAEd,MAED,KAAK,QAAM7C,IAEV,IAAyB,IAApBe,EAAMza,UAAsB,OAEjC+e,EAAqB75B,GAErBrqB,EAAQ+/C,EAAM4B,UAEd,MAED,QAEC3hD,EAAQ+/C,EAAMC,KAIhB,MAED,KAAK,EAEJ,OAASJ,EAAMd,QAAQE,KAEtB,KAAK,QAAMC,UAEV,IAA0B,IAArBW,EAAMva,aAA4C,IAApBua,EAAMza,UAAsB,QAnVpE,SAAmC9a,GAE7Bu1B,EAAMva,YAAa8e,EAAuB95B,GAE1Cu1B,EAAMza,WAAY+e,EAAqB75B,GAiVxCq7B,CAA0Br7B,GAE1BrqB,EAAQ+/C,EAAM6B,gBAEd,MAED,KAAK,QAAM+D,aAEV,IAA0B,IAArB/F,EAAMva,aAA+C,IAAvBua,EAAMxa,aAAyB,QArVvE,SAAsC/a,GAEhCu1B,EAAMva,YAAa8e,EAAuB95B,GAE1Cu1B,EAAMxa,cAAe2e,EAAwB15B,GAmV9Cu7B,CAA6Bv7B,GAE7BrqB,EAAQ+/C,EAAM8B,mBAEd,MAED,QAEC7hD,EAAQ+/C,EAAMC,KAIhB,MAED,QAEChgD,EAAQ+/C,EAAMC,KAIXhgD,IAAU+/C,EAAMC,MAEpBJ,EAAM/4C,cAAe26C,IAMvB,SAASJ,GAAa/2B,GAErB,IAAuB,IAAlBu1B,EAAM9+C,QAKX,OAHAupB,EAAMs6B,iBACNt6B,EAAMi7B,kBAEGtlD,GAER,KAAK+/C,EAAM2B,aAEV,IAA4B,IAAvB9B,EAAMxa,aAAyB,OAEpCkf,EAAuBj6B,GAEvBu1B,EAAMhkC,SAEN,MAED,KAAKmkC,EAAM4B,UAEV,IAAyB,IAApB/B,EAAMza,UAAsB,OAEjCqf,EAAoBn6B,GAEpBu1B,EAAMhkC,SAEN,MAED,KAAKmkC,EAAM6B,gBAEV,IAA0B,IAArBhC,EAAMva,aAA4C,IAApBua,EAAMza,UAAsB,QAvUlE,SAAkC9a,GAE5Bu1B,EAAMva,YAAaof,EAAsBp6B,GAEzCu1B,EAAMza,WAAYqf,EAAoBn6B,GAqUzCw7B,CAAyBx7B,GAEzBu1B,EAAMhkC,SAEN,MAED,KAAKmkC,EAAM8B,mBAEV,IAA0B,IAArBjC,EAAMva,aAA+C,IAAvBua,EAAMxa,aAAyB,QAzUrE,SAAqC/a,GAE/Bu1B,EAAMva,YAAaof,EAAsBp6B,GAEzCu1B,EAAMxa,cAAekf,EAAuBj6B,GAuU/Cy7B,CAA4Bz7B,GAE5Bu1B,EAAMhkC,SAEN,MAED,QAEC5b,EAAQ+/C,EAAMC,MAMjB,SAASmB,GAAY92B,IAEG,IAAlBu1B,EAAM9+C,UAIX8+C,EAAM/4C,cAAe46C,GAErBzhD,EAAQ+/C,EAAMC,MAIf,SAASe,GAAe12B,IAEA,IAAlBu1B,EAAM9+C,SAEXupB,EAAMs6B,iBAMP/E,EAAMtC,WAAW4H,iBAAkB,cAAenE,IAAe,GAEjEnB,EAAMtC,WAAW4H,iBAAkB,YAAalE,GAAa,GAC7DpB,EAAMtC,WAAW4H,iBAAkB,QAASjE,GAAc,GAE1DrB,EAAMtC,WAAW4H,iBAAkB,aAAchE,IAAc,GAC/DtB,EAAMtC,WAAW4H,iBAAkB,WAAY/D,IAAY,GAC3DvB,EAAMtC,WAAW4H,iBAAkB,YAAa9D,IAAa,GAE7DxB,EAAMtC,WAAW4H,iBAAkB,UAAW3D,IAAW,IAIpB,IAAhC3B,EAAMtC,WAAWyI,WAErBnG,EAAMtC,WAAWyI,SAAW,GAM7B5iE,KAAKy4B,UAINqpB,EAAc5mD,UAAYD,OAAO0C,OAAQ,IAAgBzC,WACzD4mD,EAAc5mD,UAAU6Y,YAAc+tC,EAWtC,IAAI+gB,EAAc,SAAW9kE,EAAQo8D,GAEpCrY,EAAc1mD,KAAM4E,KAAMjC,EAAQo8D,GAElCn6D,KAAKs7D,aAAaJ,KAAO,QAAMQ,IAC/B17D,KAAKs7D,aAAaF,MAAQ,QAAMG,OAEhCv7D,KAAK27D,QAAQC,IAAM,QAAMF,IACzB17D,KAAK27D,QAAQE,IAAM,QAAM2G,cAI1BK,EAAY3nE,UAAYD,OAAO0C,OAAQ,IAAgBzC,WACvD2nE,EAAY3nE,UAAU6Y,YAAc8uD,G,8ECroCpC,cAIA,OAGA,SAGuC,EAAA/5D,iBAEvC,MAAsB+C,UAA+D,EAAAlF,YAArF,c,oBAMiB,KAAAmF,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MAEjG,kBACCiG,MAAMmB,kBACNpH,KAAK8L,0BAA0B1E,mBAVjC,wB,8ECZA,cACA,QACA,QAYA,SAAgB07D,EAAwBvkE,EAAcE,EAA2B,IAChF,MAAMuO,EAAiBvO,EAAQizC,QAAUnzC,EACnCwkE,EAAiBtkE,EAAQukE,KAAO,MAChCC,EAAiBxkE,EAAQykE,IAAM,CAAC,MAAO,OACvCC,EAAkB1kE,EAAQ0kE,gBAC1BC,EAAmB3kE,EAAQ2kE,iBAC3BC,EAAW5kE,EAAQ4kE,SACnBC,EAAY7kE,EAAQ6kE,WAAa,GACvC,OAAO,cAAmB,EAAAC,iCACzB,cACC,OAAOhlE,EAER,kBACC0H,MAAMmB,kBACNpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAElFA,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OAE7FqjE,GACHrjE,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAACo3D,IAG3E,eAAejhE,GACd,OAAO6gE,EAAe7gE,GAEvB,gBAAgBA,GACf,OAAO2gE,EAER,iBACC,OAAO/1D,EAER,0BACC,OAAIq2D,EACIC,EAAUt+D,IAAKkqC,GAAM,IAAI,EAAAw0B,qBAAqB1jE,KAAMqjE,EAAUn0B,IAE9D,GAGC,wBACT,IAAIy0B,EAAmB3jE,KAAK8L,0BAA0BO,8BACtD,GAAIs3D,GAAoBP,IAClBA,EAAiBtd,SAAS6d,GAAmB,CAGjD,MAAMnjC,EAAmBxgC,KAAKa,GAAG6G,OAAOmF,8BAA8B,GAErE82D,EADGnjC,EACgBA,EAAiBjiC,KAEjB4kE,EAItB,MAAM5kE,EAAOolE,GAAoBR,GAAmB,EAAAt/D,oBAAoB/E,MACxE,MAAO,CAACP,EAAMA,KAtDjB,4BA0DA,MAAaqlE,UAAuBd,EAAwB,WAAY,CACvEI,GAAI,CAAC,KAAM,MACXC,gBAAiB,EAAAt/D,oBAAoBK,KACrCk/D,iBAAkB,CAAC,EAAAv/D,oBAAoBI,KAAM,EAAAJ,oBAAoBK,KAAM,EAAAL,oBAAoBM,MAC3Fk/D,SAAU,EAAAx/D,oBAAoB/E,UAJ/B,mBAMA,MAAa+kE,UAAkBf,EAAwB,MAAO,CAC7DI,GAAI,CAAC,OAAQ,QACbC,gBAAiB,EAAAt/D,oBAAoBK,KACrCk/D,iBAAkB,CAAC,EAAAv/D,oBAAoBI,KAAM,EAAAJ,oBAAoBK,KAAM,EAAAL,oBAAoBM,MAC3Fk/D,SAAU,EAAAx/D,oBAAoB/E,UAJ/B,cAMA,MAAaglE,UAAkBhB,EAAwB,SAAvD,cACA,MAAaiB,UAAkBjB,EAAwB,SAAvD,cACA,MAAakB,UAAkBlB,EAAwB,SAAvD,cACA,MAAamB,UAAkBnB,EAAwB,MAAO,CAACI,GAAI,CAAC,IAAK,SAAzE,cACA,MAAagB,UAAsBpB,EAAwB,UAAW,CACrEI,GAAI,CAAC,IAAK,KACVC,gBAAiB,EAAAt/D,oBAAoBK,SAFtC,kBAIA,MAAaigE,UAAmBrB,EAAwB,OAAQ,CAACI,GAAI,CAAC,OAAQ,SAA9E,gB,8EC5FA,cACA,QAEA,QAEA,SAASkB,EAAsB7lE,GAE9B,MAAO,CAACoxB,WAAY,CAACpxB,KADT,EAAAuF,qBAAqBwF,QAAQ/K,KAK1C,aAEA,SAEA,MAAM8lE,UAA+B,EAAAv7D,iBAArC,c,oBACC,KAAAvK,KAAO,EAAA+jB,YAAYtjB,QAAQ,EAAA8E,qBAAqBwF,QAAQ,EAAAzF,oBAAoB/E,OAAQ,CACnFgkC,KAAM,CACLC,QAAS,EAAAj/B,qBAAqBkB,IAAI,CAACnI,EAAM/B,KACjC,CAAC+B,KAAMA,EAAMS,MAAOxC,QAI9B,KAAAwpE,KAAO,EAAAhiD,YAAY1jB,QAAQ,EAAGwlE,EAAsB,EAAAvgE,oBAAoBE,OACxE,KAAAwgE,IAAM,EAAAjiD,YAAYtjB,QAAQ,EAAGolE,EAAsB,EAAAvgE,oBAAoBG,MACvE,KAAAigC,MAAQ,EAAA3hB,YAAYxjB,MAAM,EAAGslE,EAAsB,EAAAvgE,oBAAoB/E,QACvE,KAAAgU,KAAO,EAAAwP,YAAY/iB,QAAQ,CAAC,EAAG,GAAI6kE,EAAsB,EAAAvgE,oBAAoBI,OAC7E,KAAA8O,KAAO,EAAAuP,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI4kE,EAAsB,EAAAvgE,oBAAoBK,OAChF,KAAAgP,KAAO,EAAAoP,YAAY7iB,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAI2kE,EAAsB,EAAAvgE,oBAAoBM,QAEpF,MAAM4E,EAAe,IAAIs7D,EACzB,MAAaG,UAAuB,EAAA79D,YAApC,c,oBACC,KAAAqC,cAAgBD,EAMA,KAAA+C,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MACvF,KAAAykE,mCAA6C,EANvD,cACC,MAAO,WAOR,kBACCzkE,KAAK8L,0BAA0B1E,kBAE/BpH,KAAK8L,0BAA0B03D,yBAA0BphE,GAAkBoiE,EAAeplB,aAC1Fp/C,KAAK8L,0BAA0BC,kCAAkC,IAAM,IACvE/L,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAACjM,KAAK0kE,2BAa/E,UAAUj8D,GACT,MAAMyQ,EAAQlZ,KAAK2kE,eACnB,GAAIzrD,EAAO,CACV,MAAM0rD,EAAkB5kE,KAAK0kE,yBACvBpnE,EAAQ,EAAAgL,UAAUC,IAAI2Q,EAAM5b,OAE5ByP,EAAY,GAAG63D,KADH5kE,KAAK6kE,uBACgCvnE,IACvDmL,EAA8BwE,eAAejN,KAAM,CAAC+M,SAEpD1J,QAAQiE,KAAK,8CAA8CtH,KAAKwe,GAAGjgB,SAIrE,+BACqB,MAAhByB,KAAKwe,GAAGjgB,MACX8E,QAAQiE,KAAK,sCAEd,MAAMs9D,EAAkB,EAAA9gE,qBAAqB9D,KAAKwe,GAAGjgB,MAIrD,OAHuB,MAAnBqmE,GACHvhE,QAAQiE,KAAK,sCAEPs9D,EAGR,qBACC5kE,KAAK8kE,gBACJ9kE,KAAK8kE,iBACL,IAAIv0C,IAAwC,CAC3C,CAAC,EAAA1sB,oBAAoBE,KAAM/D,KAAK/B,EAAEqmE,MAClC,CAAC,EAAAzgE,oBAAoBG,IAAKhE,KAAK/B,EAAEsmE,KACjC,CAAC,EAAA1gE,oBAAoB/E,MAAOkB,KAAK/B,EAAEgmC,OACnC,CAAC,EAAApgC,oBAAoBI,KAAMjE,KAAK/B,EAAE6U,MAClC,CAAC,EAAAjP,oBAAoBK,KAAMlE,KAAK/B,EAAE8U,MAClC,CAAC,EAAAlP,oBAAoBM,KAAMnE,KAAK/B,EAAEiV,QAEpC,MAAM0xD,EAAkB,EAAA9gE,qBAAqB9D,KAAKwe,GAAGjgB,MACrD,OAAOyB,KAAK8kE,gBAAgB5nE,IAAI0nE,GAEjC,wBACC,OAAO5kE,KAAKoI,YAAYo8D,EAAeplB,cAnEzC,mBAKiB,EAAAA,YAAc,O,8ECpC/B,cACA,QACA,QAUA,SAAgB2lB,EAAwBxmE,EAAcE,EAA2B,IAChF,MAAMuO,EAAiBvO,EAAQizC,QAAUnzC,EACnCwkE,EAAiBtkE,EAAQukE,KAAO,MAChCC,EAAiBxkE,EAAQykE,IAAM,CAAC,MAAO,MAAO,OAC9C8B,EAA0BvmE,EAAQ41B,SAAW,GAC7CgvC,EAAW5kE,EAAQ4kE,UAAY,EAAAx/D,oBAAoB/E,MACnDwkE,EAAY7kE,EAAQ6kE,WAAa,GACvC,OAAO,cAAmB,EAAA2B,iCACzB,cACC,OAAO1mE,EAER,kBACC0H,MAAMmB,kBACNpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAClFA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAE1F,eAAeoC,GACxB,OAAO6gE,EAAe7gE,GAEb,gBAAgBA,GACzB,OAAO2gE,EAER,iBACC,OAAO/1D,EAEE,yBACT,MAAO,CAACq2D,GAET,uBAAuBxmE,GACtB,OAAOmoE,EAAwBnoE,GAEhC,0BACC,OAAOymE,EAAUt+D,IAAKkqC,GAAM,IAAI,EAAAw0B,qBAAqB1jE,KAAMqjE,EAAUn0B,MAjCxE,4BAqCA,MAAag2B,UAAoBH,EAAwB,QAAS,CAAC7B,GAAI,CAAC,QAAS,MAAO,OAAQ7uC,QAAS,CAAC5nB,IAAK,OAA/G,gBACA,MAAa04D,UAA0BJ,EAAwB,eAAgB,CAAC7B,GAAI,CAAC,IAAK,IAAK,YAA/F,sBACA,MAAakC,UAAyBL,EAAwB,aAAc,CAAC7B,GAAI,CAAC,QAAS,QAAS,SAApG,sB,6BCnDA,OAAe,80D,6BCAf,OAAe,4N,2FCAf,QACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SACA,SAEa,EAAAmC,gBAAkB,CAC9Br7D,UAAW,EACXC,UAAW,IAGZ,MAAMq7D,UAAoC,EAAAC,yBACzC,EAAA7sC,2BACC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAF7E,c,oBAKC,KAAAkB,UAAY,EAAAsY,YAAYxjB,MAAM,EAAAumE,gBAAgBr7D,WAC9C,KAAAC,UAAY,EAAAqY,YAAYxjB,MAAM,EAAAumE,gBAAgBp7D,YAY/C,MAAMlB,EAAe,IAAIu8D,EAEzB,MAAaE,UAA4B,EAAAlqD,aAAzC,c,oBACC,KAAAtS,cAAgBD,EAgBP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACsjD,eAAe,IAC9F,KAAAxqB,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGsjD,eAAe,IAEP,KAAAmiB,2BAAsD,IAAI,EAAAC,wBAAwB1lE,KAAM,CAChGsjD,eAAe,IApBhB,cACC,MAAO,gBAGR,kBACC,OAAO,IAAI,EAAA15C,qBAAqB,CAC/BQ,cAAc,EACdN,KAAM,EAAAC,UACNF,MAAO,SACP4qC,QAAS,EACTzqC,UAAW,EACXC,UAAW,IAWb,kBACCjK,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,kBAClCpH,KAAKylE,2BAA2Br+D,oBAI5B,O,mDACL,EAAAwtC,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,MAC1BA,KAAKw4B,uBAAuBC,SAC5Bz4B,KAAK84B,6BAA6BL,SAClCz4B,KAAKylE,2BAA2BhtC,SAE5Bz4B,KAAKic,YACRjc,KAAKic,UAAU0pD,gBAAkB3lE,KAAKwe,GAAGonD,kBACzC5lE,KAAKic,UAAUhS,UAAYjK,KAAKwe,GAAGvU,UACnCjK,KAAKic,UAAUjS,UAAYhK,KAAKwe,GAAGxU,WAGpChK,KAAK6lE,aAAa7lE,KAAKmD,cA9CzB,yB,2FCrCA,OAEA,SACA,QACA,SAQA,OACA,SAAgBoiE,EAAoDnjD,GACnE,OAAO,cAAoBA,EAApB,c,oBACN,KAAA0jD,YAAc,EAAAxjD,YAAY1jB,QAAQ,EAAG,EAAAk5B,oBAAoB4tC,IACzD,KAAAK,QAAU,EAAAzjD,YAAYrjB,cACrB,EAAA+4B,YAAYC,kBAAkB+M,QAC9B,EAAA7M,oBAAoButC,EAAyB,gBAE9C,KAAAE,kBAAoB,EAAAtjD,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACm2C,YAAa,OAPtE,6BAUiC,EAAA3pD,SAIOopD,EAAyB,EAAAz8D,kBACrB,EAAAwS,aAK5C,MAAaoqD,UAAgC,EAAAttC,yBAC5C,YAAY30B,EAA4B40B,GACvCpyB,MAAMxC,EAAM40B,GAEb,kBACCr4B,KAAKs4B,UAAUt4B,KAAKyD,KAAKxF,EAAE6nE,YAAa9lE,KAAKyD,KAAKxF,EAAE8nE,SAE/C,S,mDACL/lE,KAAKu4B,QAAQv4B,KAAKyD,KAAKN,SAAU,SAAUnD,KAAKyD,KAAKxF,EAAE6nE,YAAa9lE,KAAKyD,KAAKxF,EAAE8nE,YAEjF,cAAoBtiE,G,mDACnBA,EAAKgiE,2BAA2BhtC,aAXlC,6B,2FCjCA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,MAAMutC,UAA8B,EAAAttC,2BACnC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAE5E,MAAMC,EAAe,IAAIi9D,EAEzB,MAAaC,UAA6B,EAAAjxB,oBAA1C,c,oBACC,KAAAhsC,cAAgBD,EAChB,cACC,MAAO,iBAGR,mBAEU,+BACT,OAAO,IAAI,EAAAm9D,sBAA6ClmE,KAAM,EAAAmmE,uBAGzD,O,yDACCnmE,KAAKomE,sBAEX,EAAAxxB,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,MAE1BA,KAAK6lE,aAAa7lE,KAAKmD,cAnBzB,0B,2FCdA,4BAGA,QACA,QACA,SACA,SACA,SAUA,SACA,SACA,QASMkjE,EAAe,CAAC9nE,KAAM,UAEf,EAAA+nE,oBAAsB,CAClCC,KAAM,EACNC,IAAK,KAGN,cACA,SACA,SACA,SAEA,OAGA,QACA,QAEA,SAAgBC,EAAsDrkD,GACrE,OAAO,cAAoBA,EAApB,c,oBACN,KAAA5E,OAAS,EAAA8E,YAAYvjB,SACrB,KAAAgjD,SAAW,EAAAz/B,YAAYrjB,cAAc,GAAI,CACxCqmC,eAAgB,CACfC,QAAS,EAAAnlC,YAAY4mC,SAQvB,KAAA4b,OAAS,EAAAtgC,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI,CAACw+B,MAAM,IAC/C,KAAAuoC,KAAO,EAAAjkD,YAAYxjB,MAAM,EAAAwnE,oBAAoBC,KAAM,CAAC7hC,MAAO,CAAC,EAAG,OAC/D,KAAA8hC,IAAM,EAAAlkD,YAAYxjB,MAAM,EAAAwnE,oBAAoBE,IAAK,CAAC9hC,MAAO,CAAC,EAAG,OAK7D,KAAAgiC,kBAAoB,EAAApkD,YAAY3jB,OAAO,KAAM,CAC5CyZ,SAAU,CAAC3U,EAAoByV,KAC9BytD,EAAuBC,iCAAiCnjE,QAtB5D,+BA4BA,MAAaojE,UAAkC,EAAAC,6BAC9C,EAAAC,4BAA4B,EAAA5kD,uBAAuB,EAAA6kD,iBAAiBP,EAA2B,EAAA39D,wBADhG,8BAIA,MAAam+D,UAA8F,EAAA5qD,aAA3G,c,oBAKiB,KAAAE,aAAuB,EAAAH,mBAAmBkd,OAEhD,KAAA4tC,SAAmB,EAIpB,KAAAzkD,qBAA4C,IAAI,EAAAC,oBAAoB1iB,MAC7D,KAAAE,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MAJ/D,aACC,OAAOA,KAAKqd,QAMb,4BACC,OAAQrd,KAAKmnE,uBACZnnE,KAAKmnE,wBAA0B,IAAInnE,KAAKonE,kCAAkCpnE,MAE5E,wCACC,OAAO,EAAAqnE,yBAGR,0BACC,OAAQrnE,KAAKsnE,qBAAuBtnE,KAAKsnE,sBAAwB,IAAI,EAAAC,mBAAmBvnE,MAGzF,wBACC,OAAQA,KAAKwnE,mBAAqBxnE,KAAKwnE,oBAAsB,IAAI,EAAAC,iBAAiBznE,MAGnF,8BACC,OAAQA,KAAK0nE,yBAA2B1nE,KAAK0nE,0BAA4B,IAAI,EAAAC,sBAAsB3nE,MAIpG,uBACCiG,MAAM0V,uBAEN3b,KAAKa,GAAGC,QAAQC,qBAMhBf,KAAKyiB,qBAAqBrb,kBAoCrB,O,mDACLpH,KAAKyiB,qBAAqBgW,SAC1Bz4B,KAAK4nE,kBAAkBnvC,eACjBz4B,KAAK6nE,sBAAsBpvC,SAE7Bz4B,KAAKqd,QAAQkpD,MAAQvmE,KAAKwe,GAAG+nD,MAAQvmE,KAAKqd,QAAQmpD,KAAOxmE,KAAKwe,GAAGgoD,MACpExmE,KAAKqd,QAAQkpD,KAAOvmE,KAAKwe,GAAG+nD,KAC5BvmE,KAAKqd,QAAQmpD,IAAMxmE,KAAKwe,GAAGgoD,IAC3BxmE,KAAKqd,QAAQq/C,gCAGR18D,KAAK8nE,wBAAwBC,yBACnC/nE,KAAKgoE,gBACLhoE,KAAKioE,oBAAoBC,kBAMzBloE,KAAKqd,QAAQqG,cAAc2iD,GAC3BrmE,KAAK+b,gBAAgBoF,cAGtB,aAEA,aAGA,SACC,OAAOnhB,KAAKqd,QAGb,iBAGA,wCAAwC5Z,GACvCA,EAAK0kE,uBAEN,uBACCnoE,KAAKoD,MAAM09C,mBAAmBsnB,4BAA4BpoE,KAAKqI,aAGhE,uBAAuB+vC,GAClB,UAAaA,IAGbA,GAAUp4C,KAAKknE,SAAW9uB,IAC7Bp4C,KAAKknE,QAAU9uB,EACfp4C,KAAKqoE,4BAGG,4BAEV,sCAEC,EAAAjkD,cAAckkD,uBAAuBtoE,KAAKqd,QAASrd,MAEpD,cAAc4P,GACb,OAAO,IAAI,EAAA24D,cAAc34D,EAAS5P,KAAKoD,MAAOpD,OA3IhD,uBAqJA,MAAa2mE,UAA+BM,GAA5C,4B,2FCnOA,2BACA,2BACA,4BACA,4BACA,2BACA,4BACA,OAKA,QAEA,QAEA,SACA,QACA,SAEA,QACA,QAUA,MAAahlE,EAaZ,cAGCjC,KAAKmC,QAQN,YACC,OAAOnC,KAAKwoE,WAEb,QACCxoE,KAAKwoE,WAAaC,YAAYC,MAC9B1oE,KAAK2I,QAEN,QACC3I,KAAKsR,mBAAgB/M,EAErBvE,KAAK2oE,sBAAmBpkE,EACxBvE,KAAK4oE,mBAAgBrkE,EAQtB,QACC,MAAMvD,EAAa,IAAIiB,EACvB,GAAIjC,KAAK6oE,SAAU,CAClB,MAAM5nE,EAAU,GAChB,IAAK,IAAIlD,KAAUiC,KAAK6oE,SACvB5nE,EAAQ3F,KAAK,EAAAiqD,WAAWxiD,MAAMhF,IAE/BiD,EAAWkB,YAAYjB,GAExB,OAAOD,EAOR,YAAYC,GACXjB,KAAK6oE,SAAW5nE,EAChBjB,KAAKmC,QAEN,UACC,OAAOnC,KAAK6oE,SAEb,eACC,OAAQ7oE,KAAK4oE,cAAgB5oE,KAAK4oE,eAAiB5oE,KAAK8oE,uBAEjD,uBACP,MAAMlgE,EAAqB,GAC3B,GAAI5I,KAAK6oE,SACR,IAAK,IAAI/tE,EAAI,EAAGA,EAAIkF,KAAK6oE,SAAS7tE,OAAQF,IACzCkF,KAAK6oE,SAAS/tE,GAAGyrD,SAAUxoD,IAC1B,MAAMgrE,EAAc,IAAI,EAAAxjB,WAAWxnD,EAAQjD,GAC3C8N,EAAKtN,KAAKytE,KAIb,OAAOngE,EAUR,aAWC,MAAMA,EAAyB,GAC/B,IAAK,IAAImgE,KAAe/oE,KAAKgpE,eAAgB,CAC5C,MAAMxnE,EAAYunE,EAAYhrE,SAAkByD,SAC5CA,GACHoH,EAAKtN,KAAKkG,GAGZ,OAAOoH,EAER,kBACC,OAAQ5I,KAAK2oE,iBAAmB3oE,KAAK2oE,kBAAoB3oE,KAAKipE,yBAEvD,yBACP,MAAMrgE,EAAuB,GAC7B,IAAK,IAAIpH,KAAYxB,KAAK2B,aACzBiH,EAAKtN,KAAK,IAAI,EAAA6V,aAAa3P,IAQ5B,OAAOoH,EAER,uBAAuBA,EAAwB7K,GAC9C,GAAIA,EAAOyD,SACV,OAAOoH,EAAKtN,KAAKyC,EAAOyD,UAS1B,4BAA4BzD,GAC3B,OAAKA,EAAgBmrE,QAAWnrE,EAAwBorE,QAAWprE,EAAkBqrE,SAC5ErrE,EAAgByD,SAElB,KAER,QACC,OAAO,UAAexB,KAAKsW,kBAAkBtR,IAAKiO,GAAMA,EAAEo2D,UAE3D,SACC,OAAO,UAAerpE,KAAKsW,kBAAkBtR,IAAKiO,GAAMA,EAAEuB,WAE3D,eACC,OAAO,UAAWxU,KAAKsW,kBAAkBtR,IAAKiO,GAAMA,EAAEtP,iBAEvD,kBAAkB+hD,GACjB,GAAIA,EAAO,CACV,MAAM9hD,EAAU,EAAAgB,WAAWhB,QAAQ8hD,GAC7BlxC,EAASxU,KAAKwU,SACpB,OAAO,UAAe5Q,EAAQoB,IAAKlK,GAAM0Z,EAAO1Z,KAEhD,OAAOkF,KAAKwU,SAId,oBAAoBvT,GACnB,MAAMD,EAAa,IAAIiB,EAEvB,OADAjB,EAAWkB,YAAYjB,GAChBD,EAUR,mBAAmBsoE,GAClB,OAAOtpE,KAAKupE,wBAAwBD,GAAYtkE,IAAKwkE,GAAOA,EAAGzrE,UAEhE,wBAAwBurE,GAGvB,GAAmB,MAFnBA,EAAa,UAAYA,IAEF,CACtB,MAAMlnE,EAAQ0L,SAASw7D,GACvB,OAAK,UAAalnE,GAGVpC,KAAKgpE,eAAej/C,OAAQg/C,GAC3B,EAAAnkE,WAAW0K,WAAWg6D,EAAYP,EAAYlsE,SAH/C,UAAe,CAACmD,KAAKgpE,eAAe5mE,KAO5C,OAAOpC,KAAKgpE,eAqBd,eACC,OAAQhpE,KAAKsR,cAAgBtR,KAAKsR,eAAiBtR,KAAKypE,wBAKzD,SACC,MAAMC,EAAS,IAAI,EAAAt2D,QAEnB,OADApT,KAAK2pE,eAAeC,UAAUF,GACvBA,EAER,OACC,MAAMl/D,EAAO,IAAI,EAAA4I,QAEjB,OADApT,KAAK2pE,eAAeE,QAAQr/D,GACrBA,EAGA,wBACP,IAAIs/D,EACJ,GAAI9pE,KAAK6oE,SACR,IAAK,IAAI9qE,KAAUiC,KAAK6oE,SAAU,CACjC,MAAMrnE,EAAYzD,EAAgCyD,SAClDA,EAASgQ,qBACLs4D,EACHA,EAAKC,eAAehsE,GAEhByD,EAASiQ,cACZq4D,EAAOtoE,EAASiQ,YAAY1O,SAMhC,OADA+mE,EAAOA,GAAQ,IAAI,EAAAE,KAAK,IAAI,EAAA52D,SAAS,GAAI,GAAI,GAAI,IAAI,EAAAA,QAAQ,EAAI,EAAI,IAC9D02D,EAkBR,yBACC,IAAK,IAAI/rE,KAAUiC,KAAKgpE,eACvBjrE,EAAO4nD,yBAIT,WAAW9oD,GACV,IAAIotE,EACJ,OAAoD,OAA/CA,EAAiBjqE,KAAKsW,kBAAkB,KACrC2zD,EAAeC,WAAWrtE,GAKnC,YAAYA,GACX,MAAMotE,EAAiBjqE,KAAKsW,kBAAkB,GAC9C,OAAsB,MAAlB2zD,EACIA,EAAeE,YAAYttE,GAE3B,KAIT,cAAc0W,EAAkBC,EAAkB42D,GACjD,OAAQA,GACP,KAAK,EAAA3nE,aAAayI,aAAaJ,OAC9B,GAAI9K,KAAKkqE,WAAW32D,IACfvT,KAAK6oE,SACR,IAAK,IAAI9qE,KAAUiC,KAAK6oE,SACvB9qE,EAAOwoD,SAAU8jB,IAChB,MAAM7oE,EAAWS,EAAUqoE,qBAAqBD,GAChD,GAAI7oE,EAAU,CACS,IAAI,EAAA2P,aAAa3P,GACzB+oE,iBAAiBh3D,EAAUC,MAM9C,MAED,KAAK,EAAA/Q,aAAayI,aAAaH,OAC9B,GAAI/K,KAAKkqE,WAAW32D,IACfvT,KAAK6oE,SACR,IAAK,IAAI9qE,KAAUiC,KAAK6oE,SACvB9qE,EAAOwoD,SAAU8jB,IACI,IAAI,EAAA9kB,WAAW8kB,EAAO,GAC9BE,iBAAiBh3D,EAAUC,MAS9C,eACC,IAAIy2D,EACJ,OAAoD,OAA/CA,EAAiBjqE,KAAKsW,kBAAkB,IACrC2zD,EAAe33D,eAEf,GAGT,sBACC,IAAIk4D,EACJ,OAA+C,OAA1CA,EAAexqE,KAAKgpE,eAAe,IAChCwB,EAAal4D,eAEb,GAIT,2BAA2Bm4D,GAC1B,MAAMt7D,EAAQ,EAAAvK,WAAW0N,aAAam4D,GAEhCC,EAAwB,GAC9B,IAAK,IAAIr4D,KAAerS,KAAKsS,eAC5B,IAAK,IAAIjD,KAAQF,EACZ,EAAAvK,WAAW0K,WAAW+C,EAAahD,IACtCq7D,EAAsBpvE,KAAK+W,GAK9B,OAAO,UAAYq4D,GAGpB,eACC,IAAIT,EACJ,OAAoD,OAA/CA,EAAiBjqE,KAAKsW,kBAAkB,IACrC2zD,EAAenb,eAEf,GAGT,YAAYz8C,GACX,IAAI43D,EACJ,OAAoD,OAA/CA,EAAiBjqE,KAAKsW,kBAAkB,IACrC2zD,EAAet0D,YAAYtD,GAE3B,EAIT,0BAA0BxV,EAAc2N,EAAcoI,GAChC,MAAjBA,IACHA,EAAgB,EAAAb,cAAca,cAAcpI,IAG7C,IAAK,IAAIoM,KAAiB5W,KAAKsW,kBAC9BM,EAActD,mBAAmBzW,EAAM2N,EAAMoI,GAI/C,0BAA0B/V,EAAc2N,EAAcoI,GAChC,MAAjBA,IACHA,EAAgB,EAAAb,cAAca,cAAcpI,IAG7C,IAAK,IAAIu+D,KAAe/oE,KAAKgpE,eAC5BD,EAAYz1D,mBAAmBzW,EAAM+V,GAIvC,aAAa+3D,GACZ,MAAMC,EAAY,IAAI,EAAAr/D,MAOtB,OALAo/D,EAAUppD,SAAS3f,QAASokD,IAC3B,MAAMC,EAAa,EAAAV,WAAWxiD,MAAMijD,GACpC4kB,EAAUztD,IAAI8oC,KAGR2kB,GA3YT,e,+EC9BA,cACA,OACA,OAGA,SAEA,SAGMC,EACK,WADLA,EAEG,SAGT,IAAKC,GAAL,SAAKA,GACJ,QACA,QACA,QACA,QACA,QACA,QACA,QAPD,CAAKA,MAAa,KASlB,MAAMC,EAAoB,CACzBzlE,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHtI,EAAG,EACH8V,EAAG,EACH9C,EAAG,GAMJ,MAAayE,UAAkB,EAAA4wC,WAK9B,YAAoBwlB,EAA8B5oE,GACjD6D,MAAM7D,GADa,KAAA4oE,iBAEnBhrE,KAAKoR,UAAYpR,KAAKgrE,eAAexpE,WAGtC,mBACC,OAAOxB,KAAKgrE,eAEb,WACC,OAAQhrE,KAAKoR,UAAYpR,KAAKoR,WAAapR,KAAKgrE,eAAexpE,WAMhE,YAAY3E,GAGX,OADAA,EAAO,EAAAkV,cAAcC,WAAWnV,GACzBmD,KAAKoR,UAAU9O,aAAazF,GAAM0V,SAG1C,WAAW1V,GACV,MAAMouE,EAAgB,EAAAl5D,cAAcC,WAAWnV,GAC/C,OAAOmD,KAAKgrE,eAAed,WAAWe,GAGvC,aAAapuE,GAGZ,GArCY,UAqCRA,EACH,OAAOmD,KAAKoC,MACN,CACN,IAAIixC,EAAiB,KACjB63B,EAAkB,KAxCb,MAyCLruE,EAAKA,EAAK7B,OAAS,KACtBq4C,EAAiBx2C,EAAKA,EAAK7B,OAAS,GACpCkwE,EAAkBH,EAAkB13B,GACpCx2C,EAAOA,EAAKmR,UAAU,EAAGnR,EAAK7B,OAAS,IAExC,MAAMmwE,EAAe,EAAAp5D,cAAcC,WAAWnV,GAGxC2V,EAASxS,KAAKoR,UAAU9O,aAAa6oE,GAC3C,IAAI34D,EA8CG,CACN,MAAM1Q,EAAU,UAAUjF,gCAAmC5B,OAAO4W,KACnE7R,KAAKoR,UAAUc,YAAc,IAC5BhN,KAAK,OAEP,MADA7B,QAAQiE,KAAKxF,GACPA,EAnDK,CACX,MAAM,MAACS,GAASiQ,EAChB,GAAIxS,KAAKgrE,eAAe74D,kBAAkBg5D,GAAe,CACxD,MAAMC,EAAcprE,KAAKqrE,mBAAmBF,GAC5C,OAAOnrE,KAAKgrE,eAAe/4D,iBAAiBk5D,GAAcC,GACpD,CACN,MAAM5gE,EAAOgI,EAAOD,SACd+4D,EAActrE,KAAKurE,OAAS/gE,EAElC,GAAuB,MAAnB0gE,EACH,OAAQ1gE,GACP,KAAK,EACJ,OAAOjI,EAAM+oE,GAEd,KAAK,EACJ,OAAO,IAAI,EAAAz0C,QAAQt0B,EAAM+oE,EAAc,GAAI/oE,EAAM+oE,EAAc,IAEhE,KAAK,EACJ,OAAO,IAAI,EAAAl4D,QACV7Q,EAAM+oE,EAAc,GACpB/oE,EAAM+oE,EAAc,GACpB/oE,EAAM+oE,EAAc,IAItB,KAAK,EACJ,OAAO,IAAI,EAAAE,QACVjpE,EAAM+oE,EAAc,GACpB/oE,EAAM+oE,EAAc,GACpB/oE,EAAM+oE,EAAc,GACpB/oE,EAAM+oE,EAAc,IAGtB,QACC,KAAM,mBAAmB9gE,UAG3B,OAAQA,GACP,KAAK,EACJ,OAAOjI,EAAM+oE,GAEd,QACC,OAAO/oE,EAAM+oE,EAAcJ,OAclC,mBAAmBruE,GAClB,OAAImD,KAAKgrE,eAAe74D,kBAAkBtV,GAElCmD,KAAKoR,UAAU9O,aAAazF,GAAM0F,MAAMvC,KAAKurE,SAE5C,EAIV,WAEC,MAAM,MAAChpE,GAASvC,KAAKoR,UAAU9O,aAAauoE,GAE5C,OADA7qE,KAAKyrE,UAAYzrE,KAAKyrE,WAAa,IAAI,EAAAr4D,QAChCpT,KAAKyrE,UAAUpiB,UAAU9mD,EAAqB,EAAdvC,KAAKurE,QAE7C,aAAaG,GACZ1rE,KAAK2rE,yBAAyBd,EAAuBa,GAGtD,SACC,MAAM,MAACnpE,GAASvC,KAAKoR,UAAU9O,aAAauoE,GAE5C,OADA7qE,KAAK4rE,QAAU5rE,KAAK4rE,SAAW,IAAI,EAAAx4D,QAC5BpT,KAAK4rE,QAAQviB,UAAU9mD,EAAqB,EAAdvC,KAAKurE,QAE3C,WAAWM,GACV,OAAO7rE,KAAK2rE,yBAAyBd,EAAqBgB,GAG3D,iBAAiBhvE,EAAcS,GAE9B,GAAa,MAATA,EACH,OAED,GAAY,MAART,EACH,KAAM,yCAOP,MAAM2V,EAASxS,KAAKoR,UAAU9O,aAAazF,GACrC0F,EAAQiQ,EAAOjQ,MACfoT,EAAcnD,EAAOD,SAE3B,OAAQoD,GACP,KAAK,EACJpT,EAAMvC,KAAKurE,QAAUjuE,EACrB,MACD,KAAK,EACJ,MAAMwuE,EAAKxuE,EACXiF,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKO,EAAGxmE,EAChC/C,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKO,EAAGvmE,EAChC,MACD,KAAK,EAEJ,GAD2C,MAAzBjI,EAAoBH,EACxB,CACb,MAAM6V,EAAM1V,EACZiF,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKv4D,EAAI7V,EACjCoF,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKv4D,EAAIC,EACjC1Q,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKv4D,EAAI7C,MAC3B,CACN,MAAM47D,EAAKzuE,EACXiF,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKQ,EAAGzmE,EAChC/C,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKQ,EAAGxmE,EAChChD,EAAoB,EAAdvC,KAAKurE,OAAa,GAAKQ,EAAGvmE,EAEjC,MACD,QAEC,MADAnC,QAAQiE,KAAK,yDAAyDqO,KAChE,eAAeA,qBAGxB,yBAAyB9Y,EAAcS,GAEtC,GAAa,MAATA,EACH,OAED,GAAY,MAART,EACH,KAAM,yCAGP,MACM0F,EADSvC,KAAKoR,UAAU9O,aAAazF,GACtB0F,MACfzH,EAAkB,EAAdkF,KAAKurE,OAEfhpE,EAAMzH,GAAKwC,EAAMgI,EACjB/C,EAAMzH,EAAI,GAAKwC,EAAMiI,EACrBhD,EAAMzH,EAAI,GAAKwC,EAAMkI,EAGtB,iBAAiB3I,EAAcmvE,GAK9B,OADchsE,KAAKoR,UAAU9O,aAAazF,GAAM0F,MAClCvC,KAAKurE,QAAUS,GAxM/B,e,8ECrCA,mBACC,YAAsBT,GAAA,KAAAA,SACtB,YACC,OAAOvrE,KAAKurE,U,4FCMd,qBAmBC,YAAY9sE,EAA+B,IAbnC,KAAAwtE,aAAuB,EAGvB,KAAAC,OAAiB,EAGjB,KAAAC,qBAA+B,EAK/B,KAAAC,SAAgC,KAGvCpsE,KAAKqsE,oBAAsB5tE,EAAQ6tE,oBAAsB,GACzDtsE,KAAKusE,yBAA2B9tE,EAAQ+tE,yBAA2B,IAG9D,iBAAiBjgE,EAAekgE,G,mDAMrC,GALAzsE,KAAKksE,OAAS3/D,EACdvM,KAAKmsE,qBAAuB,EAC5BnsE,KAAK0sE,uBAAyBD,EAC9BzsE,KAAK2sE,uBAAyB3sE,KAAK4sE,gBAAgB/uE,KAAKmC,MAEpDA,KAAKosE,SACR,KAAM,sCAEP,OAAO,IAAIjkD,QAAQ,CAACC,EAASC,KAC5BroB,KAAKosE,SAAWhkD,EAChBpoB,KAAK4sE,uBAGP,kBACC,MAAMC,EAAapE,YAAYC,MAE/B,GAAI1oE,KAAK0sE,wBAA0B1sE,KAAK2sE,uBACvC,KAAO3sE,KAAKmsE,qBAAuBnsE,KAAKksE,QAKvC,GAJAlsE,KAAK0sE,uBAAuB1sE,KAAKmsE,sBAEjCnsE,KAAKmsE,uBAEDnsE,KAAKmsE,qBAAuBnsE,KAAKusE,0BAA4B,GAC5D9D,YAAYC,MAAQmE,EAAa7sE,KAAKqsE,oBAAqB,CAC9Dj2C,WAAWp2B,KAAK2sE,uBAAwB,GACxC,MAMA3sE,KAAKmsE,sBAAwBnsE,KAAKksE,QACjClsE,KAAKosE,UACRpsE,KAAKosE,WAUF,iBAAiB7pE,EAAckqE,G,mDAMpC,GALAzsE,KAAK8sE,OAASvqE,EACdvC,KAAKisE,aAAe,EACpBjsE,KAAK+sE,uBAAyBN,EAC9BzsE,KAAKgtE,uBAAyBhtE,KAAKitE,gBAAgBpvE,KAAKmC,MAEpDA,KAAKosE,SACR,KAAM,sCAEP,OAAO,IAAIjkD,QAAQ,CAACC,EAASC,KAC5BroB,KAAKosE,SAAWhkD,EAChBpoB,KAAKitE,uBAGP,kBACC,MAAMJ,EAAapE,YAAYC,MAE/B,GAAI1oE,KAAK+sE,wBAA0B/sE,KAAKgtE,wBAA0BhtE,KAAK8sE,OACtE,KAAQ9sE,KAAKktE,uBAAyBltE,KAAK8sE,OAAO9sE,KAAKisE,eAKtD,GAJAjsE,KAAK+sE,uBAAuB/sE,KAAKktE,uBAAwBltE,KAAKisE,cAE9DjsE,KAAKisE,eAEDjsE,KAAKisE,aAAejsE,KAAKusE,0BAA4B,GACpD9D,YAAYC,MAAQmE,EAAa7sE,KAAKqsE,oBAAqB,CAC9Dj2C,WAAWp2B,KAAKgtE,uBAAwB,GACxC,WAMgCzoE,IAAhCvE,KAAKktE,wBACJltE,KAAKosE,UACRpsE,KAAKosE,c,8EC/GT,eACA,OACA,OACA,OAEA,+BACC,iBACChP,EACA+P,EACAC,EAAoB,KAEpB,MAAMC,EACL,EAAAtpD,SAASC,mBAAmBopD,GAAaD,EAEpC5kC,EAAY,GAClB,IAAK,IAAIztC,EAAI,EAAGA,EAAIqyE,EAAgBryE,IAAK,CACxC,MAAMwyE,EAAeD,EAAqBvyE,EACpCwK,EAAI83D,EAAS5wD,KAAKkiB,IAAI4+C,GACtB/nE,EAAI63D,EAAS5wD,KAAKwhB,IAAIs/C,GAE5B/kC,EAAUjtC,KAAK,IAAI,EAAAu7B,QAAQvxB,EAAGC,IAG/B,OAAOgjC,EAGR,cACC60B,EACA+P,EACAC,EAAoB,KAEpB,MAAMG,EAAevtE,KAAKuoC,UAAU60B,EAAQ+P,EAAgBC,GAEtD7kC,EAAY,GACZ3kC,EAAU,GAChB,IAAI4pE,EACJ,IAAK,IAAI1yE,EAAI,EAAGA,EAAIyyE,EAAavyE,OAAQF,IACxC0yE,EAAcD,EAAazyE,GAE3BytC,EAAUjtC,KAAKkyE,EAAYloE,GAC3BijC,EAAUjtC,KAAKkyE,EAAYjoE,GAC3BgjC,EAAUjtC,KAAK,GAEXR,EAAI,IACP8I,EAAQtI,KAAKR,EAAI,GACjB8I,EAAQtI,KAAKR,IAKf8I,EAAQtI,KAAK6xE,EAAiB,GAC9BvpE,EAAQtI,KAAK,GAEb,MAAMkG,EAAW,IAAI,EAAAsT,eAOrB,OANAtT,EAASkR,aACR,WACA,IAAI,EAAAS,uBAAuBo1B,EAAW,IAEvC/mC,EAASgB,SAASoB,GAEXpC,K,oFC5DT,E,KAAA,uBAEA,OACA,OACA,QACA,QACA,SACA,SAOA,QAGMisE,EAAU,CACfC,MAAO,IAAI,EAAAt6D,QAAQ,EAAG,EAAG,GACzBu6D,OAAQ,EACRC,IAAK,IAAI,EAAAx6D,QAAQ,EAAG,EAAG,GACvB+nD,GAAI,IAAI,EAAA/nD,QAAQ,EAAG,EAAG,IAUjBy6D,EAAgB,IAAI,EAAAz6D,QAAQ,EAAG,EAAG,GAClC06D,EAAa,IAAI,EAAAj3C,QAAQ,EAAG,GAIlC,MAAak3C,EAQZ,YAAoBC,GAAA,KAAAA,iBAFZ,KAAAC,UAAiC,GAGxCjuE,KAAKkuE,mBAAqBluE,KAAKguE,eAAe9D,WAAW,UACzDlqE,KAAKmuE,kBAAoBnuE,KAAKguE,eAAe9D,WAAW,SAExDlqE,KAAKouE,mBAAqBpuE,KAAKguE,eAAe9D,WAAW,UACzDlqE,KAAKquE,eAAiBruE,KAAKguE,eAAe9D,WAAW,MAErDlqE,KAAKsuE,oBAAsBtuE,KAAKouE,mBAGjC,WAMC,OALApuE,KAAKiuE,UAAY,GACjBjuE,KAAKiuE,UAAkB,UAAI,IAAI,EAAA1pD,QAC/BvkB,KAAKiuE,UAAkB,OAAI,IAAI,EAAA1pD,QAC/BvkB,KAAKiuE,UAAkB,MAAI,IAAI,EAAA1pD,QAExBvkB,KAAKguE,eAAex5D,SAASxP,IAAK2P,GACjC3U,KAAKuuE,mBAAmB55D,IAIjC,mBAAmBA,GAClB,MAAMpX,EAAIoX,EAAMP,WAEhB,IAAImO,EAAQviB,KAAKmuE,kBAAoBx5D,EAAMW,aA7CnB,SA6CqDm4D,EAAQC,MACrF,MAAMc,EAASxuE,KAAKkuE,mBAAqBv5D,EAAMW,aA7CtB,UA6CyDm4D,EAAQE,OAC1FprD,EAAQA,EAAMxf,QAAQ8gB,eAAe2qD,GAGrC,MAAMnrD,EAAS,IAAI,EAAAkB,QACnBlB,EAAOuB,WAEP,MAAM6pD,EAAezuE,KAAKiuE,UAAkB,MAC5CQ,EAAaC,UAAUnsD,EAAMjd,EAAGid,EAAMhd,EAAGgd,EAAM/c,GAE/C,MAAMmpE,EAAmB3uE,KAAKiuE,UAAkB,UAKhD,GAJAU,EAAiBC,gBAAgBrxE,EAAE+H,EAAG/H,EAAEgI,EAAGhI,EAAEiI,GAE7C6d,EAAOwrD,SAASF,GAEZ3uE,KAAKsuE,oBAAqB,CAC7B,MAAMQ,EAAgB9uE,KAAKiuE,UAAkB,OACvCc,EAAMtB,EAAQG,IACdlE,EAAS/0D,EAAMW,aA9DG,UA8D8BuO,gBAAgB,GAChEkH,EAAK/qB,KAAKquE,eAAiB15D,EAAMW,aA9DnB,MA8DkDm4D,EAAQtS,GAC9EpwC,EAAG3E,YACH0oD,EAAcvR,OAAOwR,EAAKrF,EAAQ3+C,GAElC1H,EAAOwrD,SAASC,GAKjB,OAFAzrD,EAAOwrD,SAASJ,GAETprD,EAGR,kCACC2rD,EACAC,EACAC,GAEA,MAAMC,EAAeF,EAAoBz6D,SAOnChT,EAAW,IAAI,EAAA4tE,wBACrB5tE,EAASoiB,KAAKorD,GAEd,MAAMK,EAAkBF,EAAan0E,OAC/ButC,EAAY,IAAIE,aAA+B,EAAlB4mC,GAC7BC,EAAS,IAAI7mC,aAA+B,EAAlB4mC,GAC1BE,EAAS,IAAI9mC,aAA+B,EAAlB4mC,GAC1BG,EAAU,IAAI/mC,aAA+B,EAAlB4mC,GAE3BI,EAAYR,EAAoB/E,WAvFd,SAyFlB91D,EAAW,IAAI,EAAAhB,QAAQ,EAAG,EAAG,GAC7BgS,EAAa,IAAI,EAAAX,WACjBlC,EAAQ,IAAI,EAAAnP,QAAQ,EAAG,EAAG,GAG1Bs8D,EADY,IAAI3B,EAAckB,GACAU,WAEpCR,EAAavtE,QAAQ,CAACguE,EAAa90E,KAClC,MAAM+0E,EAAa,EAAJ/0E,EACTg1E,EAAa,EAAJh1E,EAEA40E,EAAkB50E,GAC1BuqB,UAAUjR,EAAUgR,EAAY7C,GAEvCnO,EAASrP,QAAQwjC,EAAWsnC,GAC5BzqD,EAAWrgB,QAAQyqE,EAASM,GAC5BvtD,EAAMxd,QAAQwqE,EAAQM,IAERJ,EAAYG,EAAYt6D,aA3Gf,SA2GiDu4D,GAClE9oE,QAAQuqE,EAAQO,KAIvB,MAAME,EAASd,EAAoB/E,WAjHd,MAkHrB,GAAI6F,EAAQ,CACX,MAAMjoB,EAAM,IAAIrf,aAA+B,EAAlB4mC,GAC7BF,EAAavtE,QAAQ,CAACguE,EAAa90E,KAClC,MAAMk1E,EAAa,EAAJl1E,GACJi1E,EAASH,EAAYt6D,aAtHb,MAsH4Cw4D,GAC5D/oE,QAAQ+iD,EAAKkoB,KAEjBxuE,EAASkR,aAAa,aAAc,IAAI,EAAAu9D,yBAAyBnoB,EAAK,IA4BvE,OAxBAtmD,EAASkR,aAAa,mBAAoB,IAAI,EAAAu9D,yBAAyB1nC,EAAW,IAClF/mC,EAASkR,aAAa,gBAAiB,IAAI,EAAAu9D,yBAAyBV,EAAQ,IAC5E/tE,EAASkR,aAAa,sBAAuB,IAAI,EAAAu9D,yBAAyBT,EAAS,IACnFhuE,EAASkR,aAAa,gBAAiB,IAAI,EAAAu9D,yBAAyBX,EAAQ,IAEvDL,EAAoBiB,2BAA2BhB,GAEvDttE,QAASyQ,IACrB,MAAMsD,EAAcs5D,EAAoBt5D,YAAYtD,GAC9CvN,EAAS,IAAI2jC,aAAa4mC,EAAkB15D,GAClDw5D,EAAavtE,QAAQ,CAACuuE,EAAIr1E,KACzB,MAAMwC,EAAQ6yE,EAAG76D,aAAajD,GAC1B,UAAgB/U,GACnBwH,EAAOhK,GAAKwC,EAEZA,EAAMyH,QAAQD,EAAQhK,EAAI6a,KAG5BnU,EAASkR,aAAaL,EAAa,IAAI,EAAA49D,yBAAyBnrE,EAAQ6Q,MAGhD,IAAI,EAAAxE,aAAa3P,GACzB4uE,mBAEV5uE,GAlJT,mB,2FCnCA,2BACA,2BACA,2BACA,2BACA,QACA,OAEMirB,EAAQ,CAAC3X,eADf,KACeA,eAAgB3B,uBAAA,EAAAA,uBAAwB1J,OAAA,EAAAA,QAGvD,QACA,QACA,QACA,SACA,SAaA,uBAKC,YAAYhL,EAAiC,IAH7C,KAAA4xE,yBAA0D,GAClD,KAAA5pD,SAAkC,GAGzCzmB,KAAKymB,SAAS6pD,iBAAmB7xE,EAAQ6xE,iBACzCtwE,KAAKymB,SAAS8pD,aAAe9xE,EAAQ8xE,aACrCvwE,KAAKymB,SAAS+pD,WAAa/xE,EAAQ+xE,aAAc,EACjDxwE,KAAKymB,SAASgqD,mBAAqBhyE,EAAQgyE,mBAI5C,KACCluC,EACAmuC,EACAC,EACAC,GAOAC,MAAMtuC,GACJhM,KAAYu6C,GAAa,EAAD,0CAGxB9wE,KAAKyG,YAAcqqE,EAASC,OACU,MAAlC/wE,KAAKymB,SAAS6pD,kBAA8D,IAAlCtwE,KAAKymB,SAAS6pD,mBAC3DtwE,KAAKyG,MAAQzG,KAAKgxE,kBAAkBhxE,KAAKyG,MAAOzG,KAAKymB,SAAS6pD,iBAAiB1hE,MAAM,OAEtF,MAAM7Q,EAASiC,KAAKyB,gBACpBivE,EAAiB3yE,OAEjBkzE,MAAO/yD,IACP7a,QAAQC,IAAI,QAAS4a,GACrB0yD,EAAe1yD,KAIlB,kBAAkB6yD,EAAWG,GAC5B,GAAuB,GAAnBA,EAASl2E,OACZ,OAAO+1E,EACD,CACN,MAAMI,EAAeD,EAASz1E,QAC9B,GAAI01E,EACH,OAAOnxE,KAAKgxE,kBAAkBD,EAAKI,GAAeD,GAGpD,MAAO,GAGR,SAASH,GACR,OAAQ/wE,KAAKyG,MAAQsqE,EAGtB,gBACC,MAAMvvE,EAAW,IAAIirB,EAAM3X,eACrBs8D,EAAW,IAAI,EAAAjgE,aAAa3P,GAElC,GAAkB,MAAdxB,KAAKyG,MAAe,CACvB,MAAM9C,EAAe3D,KAAKyG,MAAMzL,OAChCo2E,EAASC,wBAAwB1tE,GAEjC3D,KAAKsxE,mBAML,MAAMC,EAA2B,EAAA3sE,WAAW0N,aAAatS,KAAKymB,SAASgqD,oBAAsB,IAG7F,IAAK,IAAIp+D,KAAepX,OAAO4W,KAAK7R,KAAKqwE,0BAA2B,CACnE,IAAImB,EAAgB,UAAexxE,KAAKyxE,2BAA2Bp/D,IAEnE,MAAM7X,EAAOwF,KAAKqwE,yBAAyBh+D,GACrC7H,EAAOhQ,EAAKgQ,OAElB,GAAIhQ,EAAK+D,SAAW,EAAAkE,aAAa0I,YAAY7L,OAK5C,GACCU,KAAKymB,SAAS+pD,YACd,EAAA5rE,WAAWwK,iBAAiBiD,EAAak/D,GACxC,CACD,MAAMG,EAAoCF,EAAcxsE,IAAKC,GACxD,UAAgBA,GACZyvD,WAAWzvD,IAAM,EAEjBA,GAGTzD,EAASkR,aACRL,EACA,IAAIoa,EAAMtZ,uBAAuBu+D,EAAyBlnE,QAErD,CACN,MAAMmnE,EAAa,EAAA5/D,cAAc6/D,wBAAwBJ,GACzDJ,EAASS,sBAAsBx/D,EAAas/D,EAAmB,OAAGA,EAAoB,aAEjF,CACN,MAAMD,EAA0BF,EAChChwE,EAASkR,aAAaL,EAAa,IAAIoa,EAAMtZ,uBAAuBu+D,EAAyBlnE,MAIhG,OAAO,IAAIiiB,EAAMhjB,OAAOjI,EAAU,EAAAiB,aAAaK,UAAU2pB,EAAMhjB,OAAO5M,OAG/D,mBACP,IAAIi1E,EAEJ,MAAM3iE,EAAQ,EAAAvK,WAAW0N,aAAatS,KAAKymB,SAAS8pD,cAAgB,IAEpE,GAAIvwE,KAAKyG,OAC0B,OAA7BqrE,EAAW9xE,KAAKyG,MAAM,IAC1B,IAAK,IAAI4L,KAAepX,OAAO4W,KAAKigE,GAAW,CAC9C,MAAMx8D,EAAew8D,EAASz/D,GAE9B,GAAIrS,KAAK+xE,sBAAsBz8D,GAC9B,IAAK,IAAI1X,KAAO3C,OAAO4W,KAAKyD,GAAe,CAC1C,MAAM08D,EAAmB,CAAC3/D,EAAazU,GAAKsH,KAtIrB,KAuIjB+sE,EAAoB38D,EAAajD,GAElC,EAAAzN,WAAWwK,iBAAiB4iE,EAAkB7iE,KAClDnP,KAAKqwE,yBAAyB2B,GAAoB,EAAAE,kBAAkBC,WACnEF,SAKE,EAAArtE,WAAWwK,iBAAiBiD,EAAalD,KAC7CnP,KAAKqwE,yBAAyBh+D,GAAe,EAAA6/D,kBAAkBC,WAAW78D,KAQxE,2BAA2BjD,GAClC,OAAIrS,KAAKyG,MACDzG,KAAKyG,MAAMzB,IAAKotE,IACtB,MAAM99C,EAASjiB,EAAYzD,MA5JD,KA4J8B,GAClDtR,EAAQ80E,EAAa99C,GAC3B,GAAIt0B,KAAK+xE,sBAAsBz0E,GAAQ,CAEtC,OAAOA,EADkB+U,EAAYrE,UAAUsmB,EAAOt5B,OAAS,KAC7B,EAElC,OAAOsC,GAAS,IAIX,GAIT,sBAAsBA,GACrB,OAAO,UAAgBA,KAAW,UAAeA,M,8BC9LnD,qFASI+0E,EAAc,SAAWC,GAE5B,IAAOl3E,KAAM4E,KAAMsyE,GAEnBtyE,KAAKuyE,YAAc,GACnBvyE,KAAKwyE,cAAgB,GACrBxyE,KAAKyyE,cAAgB,KACrBzyE,KAAK0yE,eAAiB,KAEtB1yE,KAAK2yE,YAAc,EACnB3yE,KAAK4yE,WAAa,GAClB5yE,KAAK6yE,iBAAmB,EACxB7yE,KAAK8yE,gBAAkB,GAEvB9yE,KAAK+yE,oBAAsB,CAC1B3+D,SAAU,WACVwzC,OAAQ,SACR/9C,MAAO,QACPgkB,GAAI,aAEL7tB,KAAKgzE,sBAAwB,CAC5B5+D,SAAU,eACVwzC,OAAQ,eACR/9C,MAAO,eACPgkB,GAAI,iBAKNwkD,EAAYn3E,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEzE6Y,YAAas+D,EAEbY,eAAgB,SAAWr5D,GAI1B,OAFA5Z,KAAKuyE,YAAc34D,EAEZ5Z,MAIRkzE,iBAAkB,SAAWC,GAI5B,OAFAnzE,KAAKwyE,cAAgBW,EAEdnzE,MAIRozE,eAAgB,SAAWT,GAI1B,OAFA3yE,KAAK2yE,YAAcA,EAEZ3yE,MAKRqzE,aAAc,WAEbhwE,QAAQiE,KAAM,oEAKfgsE,YAAa,WAEZjwE,QAAQiE,KAAM,mEAKfisE,sBAAuB,WAEtBlwE,QAAQiE,KAAM,6EAIfksE,KAAM,SAAWjxC,EAAKkxC,EAAQC,EAAYC,GAEzC,IAAIC,EAAS,IAAI,IAAY5zE,KAAKsyE,SAElCsB,EAAOC,QAAS7zE,KAAK4Z,MACrBg6D,EAAOE,gBAAiB,eAEE,oBAArB9zE,KAAK+zE,aAETH,EAAOI,oBAAoB,GAI5BJ,EAAOJ,KAAMjxC,EAAOoP,IAEnB,IAAIsiC,EAAa,CAChBC,aAAcl0E,KAAK+yE,oBACnBoB,eAAgBn0E,KAAKgzE,sBACrBoB,cAAc,GAGfp0E,KAAKq0E,eAAgB1iC,EAAQsiC,GAC3B19C,KAAMk9C,GACNxC,MAAO0C,IAEPD,EAAYC,IAKhBW,gBAAiB,SAAW3iC,EAAQv5B,EAAU87D,EAAcC,GAE3D,IAAIF,EAAa,CAChBC,aAAcA,GAAgBl0E,KAAK+yE,oBACnCoB,eAAgBA,GAAkBn0E,KAAKgzE,sBACvCoB,eAAiBF,GAGlBl0E,KAAKq0E,eAAgB1iC,EAAQsiC,GAAa19C,KAAMne,IAIjDi8D,eAAgB,SAAW1iC,EAAQsiC,GAKlC,IAAM,IAAIngE,KAAamgE,EAAWE,eAAiB,CAElD,IAAI51E,EAAO01E,EAAWE,eAAgBrgE,QAENvP,IAA3BhG,EAAKktD,oBAETwoB,EAAWE,eAAgBrgE,GAAcvV,EAAK1B,MAQhD,IA+BI03E,EA/BAC,EAAUnqC,KAAKC,UAAW2pC,GAI9B,GAAK5B,EAAYoC,UAAUz7C,IAAK2Y,GAAW,CAE1C,IAAI+iC,EAAarC,EAAYoC,UAAUv3E,IAAKy0C,GAE5C,GAAK+iC,EAAW92E,MAAQ42E,EAEvB,OAAOE,EAAWC,QAEZ,GAA2B,IAAtBhjC,EAAOijC,WAMlB,MAAM,IAAIllC,MAET,iHAYH,IAAImlC,EAAS70E,KAAK6yE,mBACdiC,EAAWnjC,EAAOijC,WAIlBG,EAAkB/0E,KAAKg1E,WAAYH,EAAQC,GAC7Cv+C,KAAQ0+C,IAERV,EAASU,EAEF,IAAI9sD,QAAS,CAAEC,EAASC,KAE9BksD,EAAOr+C,WAAY2+C,GAAW,CAAEzsD,UAASC,UAEzCksD,EAAOW,YAAa,CAAE32E,KAAM,SAAUmR,GAAImlE,EAAQZ,aAAYtiC,UAAU,CAAEA,QAO3Epb,KAAQz0B,GAAa9B,KAAKm1E,gBAAiBrzE,EAAQN,WAwBrD,OArBAuzE,EACEK,QAAS,KAEJb,GAAUM,GAEd70E,KAAKq1E,aAAcd,EAAQM,KAS9BxC,EAAYoC,UAAUl0E,IAAKoxC,EAAQ,CAElC/zC,IAAK42E,EACLG,QAASI,IAIHA,GAIRI,gBAAiB,SAAWG,GAE3B,IAAI9zE,EAAW,IAAI,iBAEd8zE,EAAalzE,OAEjBZ,EAASgB,SAAU,IAAI,kBAAiB8yE,EAAalzE,MAAMG,MAAO,IAInE,IAAM,IAAIzH,EAAI,EAAGA,EAAIw6E,EAAapjE,WAAWlX,OAAQF,IAAO,CAE3D,IAAIgZ,EAAYwhE,EAAapjE,WAAYpX,GACrC+B,EAAOiX,EAAUjX,KACjB0F,EAAQuR,EAAUvR,MAClBgQ,EAAWuB,EAAUvB,SAEzB/Q,EAASkR,aAAc7V,EAAM,IAAI,kBAAiB0F,EAAOgQ,IAI1D,OAAO/Q,GAIR+zE,aAAc,SAAWhzC,EAAKizC,GAE7B,IAAI5B,EAAS,IAAI,IAAY5zE,KAAKsyE,SAIlC,OAHAsB,EAAOC,QAAS7zE,KAAKuyE,aACrBqB,EAAOE,gBAAiB0B,GAEjB,IAAIrtD,QAAS,CAAEC,EAASC,KAE9BurD,EAAOJ,KAAMjxC,EAAKna,OAAS7jB,EAAW8jB,MAMxCotD,QAAS,WAIR,OAFAz1E,KAAK01E,eAEE11E,MAIR01E,aAAc,WAEb,GAAK11E,KAAK0yE,eAAiB,OAAO1yE,KAAK0yE,eAEvC,IAAIiD,EAA+B,iBAAhBC,aAAwD,OAA5B51E,KAAKwyE,cAAcj0E,KAC9Ds3E,EAAmB,GAsCvB,OApCKF,EAEJE,EAAiBv6E,KAAM0E,KAAKu1E,aAAc,mBAAoB,UAI9DM,EAAiBv6E,KAAM0E,KAAKu1E,aAAc,wBAAyB,SACnEM,EAAiBv6E,KAAM0E,KAAKu1E,aAAc,qBAAsB,iBAIjEv1E,KAAK0yE,eAAiBvqD,QAAQ0rB,IAAKgiC,GACjCt/C,KAAQu/C,IAER,IAAIC,EAAYD,EAAW,GAEpBH,IAEN31E,KAAKwyE,cAAcwD,WAAaF,EAAW,IAI5C,IAAIG,EAAK5D,EAAY6D,YAAYC,WAE7B7oC,EAAO,CACV,sBACAyoC,EACA,GACA,eACAE,EAAGjoE,UAAWioE,EAAG3sE,QAAS,KAAQ,EAAG2sE,EAAGG,YAAa,OACpDlxE,KAAM,MAERlF,KAAK8yE,gBAAkBuD,IAAIC,gBAAiB,IAAIC,KAAM,CAAEjpC,OAInDttC,KAAK0yE,gBAIbsC,WAAY,SAAWH,EAAQC,GAE9B,OAAO90E,KAAK01E,eAAen/C,KAAM,KAI/B,IAyCGg+C,EA3CCv0E,KAAK4yE,WAAW53E,OAASgF,KAAK2yE,cAE9B4B,EAAS,IAAIiC,OAAQx2E,KAAK8yE,kBAEvB58C,WAAa,GACpBq+C,EAAOkC,WAAa,GACpBlC,EAAOmC,UAAY,EAEnBnC,EAAOW,YAAa,CAAE32E,KAAM,OAAQi0E,cAAexyE,KAAKwyE,gBAExD+B,EAAOoC,UAAY,SAAWnnE,GAE7B,IAAI1N,EAAU0N,EAAEhV,KAEhB,OAASsH,EAAQvD,MAEhB,IAAK,SACJg2E,EAAOr+C,WAAYp0B,EAAQ4N,IAAK0Y,QAAStmB,GACzC,MAED,IAAK,QACJyyE,EAAOr+C,WAAYp0B,EAAQ4N,IAAK2Y,OAAQvmB,GACxC,MAED,QACCuB,QAAQ6a,MAAO,2CAA6Cpc,EAAQvD,KAAO,OAM9EyB,KAAK4yE,WAAWt3E,KAAMi5E,IAItBv0E,KAAK4yE,WAAW3iE,MAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAEwmE,UAAYvmE,EAAEumE,WAAc,EAAI,KAS3C,OAHInC,EAASv0E,KAAK4yE,WAAY5yE,KAAK4yE,WAAW53E,OAAS,IAChDy7E,WAAY5B,GAAWC,EAC9BP,EAAOmC,WAAa5B,EACbP,KAMTc,aAAc,SAAWd,EAAQM,GAEhCN,EAAOmC,WAAanC,EAAOkC,WAAY5B,UAChCN,EAAOr+C,WAAY2+C,UACnBN,EAAOkC,WAAY5B,IAI3B+B,MAAO,WAENvzE,QAAQC,IAAK,cAAetD,KAAK4yE,WAAW5tE,IAAOuvE,GAAYA,EAAOmC,aAIvEt4D,QAAS,WAER,IAAM,IAAItjB,EAAI,EAAGA,EAAIkF,KAAK4yE,WAAW53E,SAAWF,EAE/CkF,KAAK4yE,WAAY93E,GAAI+7E,YAMtB,OAFA72E,KAAK4yE,WAAW53E,OAAS,EAElBgF,QAQTqyE,EAAY6D,YAAc,WAEzB,IAAI1D,EACAE,EAkKJ,SAASoE,EAAiBC,EAAOC,EAASC,EAAeC,EAAeC,EAAerjE,GAEtF,IAGIsjE,EAEA70E,EALA80E,EAAgBvjE,EAAUwjE,iBAE1BC,EADYN,EAAcO,aACFH,EAK5B,OAASF,GAER,KAAK1uC,aACJ2uC,EAAa,IAAIL,EAAMU,kBACvBT,EAAQU,8BAA+BT,EAAenjE,EAAWsjE,GACjE70E,EAAQ,IAAIkmC,aAAc8uC,GAC1B,MAED,KAAKI,UACJP,EAAa,IAAIL,EAAMa,eACvBZ,EAAQa,6BAA8BZ,EAAenjE,EAAWsjE,GAChE70E,EAAQ,IAAIo1E,UAAWJ,GACvB,MAED,KAAKO,WACJV,EAAa,IAAIL,EAAMgB,gBACvBf,EAAQgB,8BAA+Bf,EAAenjE,EAAWsjE,GACjE70E,EAAQ,IAAIu1E,WAAYP,GACxB,MAED,KAAKU,WACJb,EAAa,IAAIL,EAAMmB,gBACvBlB,EAAQmB,8BAA+BlB,EAAenjE,EAAWsjE,GACjE70E,EAAQ,IAAI01E,WAAYV,GACxB,MAED,KAAKrvC,WACJkvC,EAAa,IAAIL,EAAMqB,gBACvBpB,EAAQqB,8BAA+BpB,EAAenjE,EAAWsjE,GACjE70E,EAAQ,IAAI2lC,WAAYqvC,GACxB,MAED,KAAKv8C,YACJo8C,EAAa,IAAIL,EAAMuB,iBACvBtB,EAAQuB,+BAAgCtB,EAAenjE,EAAWsjE,GAClE70E,EAAQ,IAAIy4B,YAAau8C,GACzB,MAED,KAAKvoC,YACJooC,EAAa,IAAIL,EAAMyB,iBACvBxB,EAAQyB,+BAAgCxB,EAAenjE,EAAWsjE,GAClE70E,EAAQ,IAAIysC,YAAauoC,GACzB,MAED,QACC,MAAM,IAAI7nC,MAAO,iDAInB,IAAM,IAAI50C,EAAI,EAAGA,EAAIy8E,EAAWz8E,IAE/ByH,EAAOzH,GAAMs8E,EAAWsB,SAAU59E,GAMnC,OAFAi8E,EAAM4B,QAASvB,GAER,CACNv6E,KAAMq6E,EACN30E,MAAOA,EACPgQ,SAAU8kE,GArOZV,UAAY,SAAWnnE,GAEtB,IAAI1N,EAAU0N,EAAEhV,KAEhB,OAASsH,EAAQvD,MAEhB,IAAK,OACJi0E,EAAgB1wE,EAAQ0wE,cACxBE,EAAiB,IAAIvqD,SAAS,SAAWC,GAExCoqD,EAAcoG,eAAiB,SAAW7B,GAGzC3uD,EAAS,CAAE2uD,MAAOA,KAInB8B,mBAAoBrG,MAGrB,MAED,IAAK,SACJ,IAAI7gC,EAAS7vC,EAAQ6vC,OACjBsiC,EAAanyE,EAAQmyE,WACzBvB,EAAen8C,KAAQ/5B,IAEtB,IAAIu6E,EAAQv6E,EAAOu6E,MACfC,EAAU,IAAID,EAAM+B,QACpBC,EAAgB,IAAIhC,EAAMiC,cAC9BD,EAAcE,KAAM,IAAItB,UAAWhmC,GAAUA,EAAOijC,YAEpD,IAEC,IAAIpzE,EA4BT,SAAyBu1E,EAAOC,EAAS+B,EAAe9E,GAEvD,IAGIgD,EACAiC,EAJAhF,EAAeD,EAAWC,aAC1BC,EAAiBF,EAAWE,eAK5BgF,EAAenC,EAAQoC,uBAAwBL,GAEnD,GAAKI,IAAiBpC,EAAMsC,gBAE3BpC,EAAgB,IAAIF,EAAMxtE,KAC1B2vE,EAAiBlC,EAAQsC,mBAAoBP,EAAe9B,OAEtD,IAAKkC,IAAiBpC,EAAMwC,YAOlC,MAAM,IAAI7pC,MAAO,gDALjBunC,EAAgB,IAAIF,EAAMyC,WAC1BN,EAAiBlC,EAAQyC,yBAA0BV,EAAe9B,GAQnE,IAAOiC,EAAeQ,MAA8B,IAAtBzC,EAAc0C,IAE3C,MAAM,IAAIjqC,MAAO,uCAAyCwpC,EAAeU,aAI1E,IAAIp4E,EAAW,CAAEY,MAAO,KAAM8P,WAAY,IAG1C,IAAM,IAAIglE,KAAiBhD,EAAe,CAEzC,IAEIpgE,EACA+lE,EAHA1C,EAAgB2C,KAAM3F,EAAgB+C,IAS1C,GAAKjD,EAAWG,aAEfyF,EAAc3F,EAAcgD,GAC5BpjE,EAAYkjE,EAAQ+C,uBAAwB9C,EAAe4C,OAErD,CAIN,IAAuB,KAFvBA,EAAc7C,EAAQgD,eAAgB/C,EAAeF,EAAO7C,EAAcgD,MAE/C,SAE3BpjE,EAAYkjE,EAAQiD,aAAchD,EAAe4C,GAIlDr4E,EAAS0Q,WAAW5W,KAAMw7E,EAAiBC,EAAOC,EAASC,EAAeC,EAAeC,EAAerjE,IAKzG,GAAKqlE,IAAiBpC,EAAMsC,gBAAkB,CAQ7C,IALA,IAAIa,EAAWjD,EAAckD,YAEzB/3E,EAAQ,IAAI4sC,YADY,EAAXkrC,GAEbE,EAAa,IAAIrD,EAAMmB,gBAEjBp9E,EAAI,EAAGA,EAAIo/E,IAAap/E,EAAI,CAErCk8E,EAAQqD,gBAAiBpD,EAAen8E,EAAGs/E,GAE3C,IAAM,IAAIp+E,EAAI,EAAGA,EAAI,IAAMA,EAE1BoG,EAAW,EAAJtH,EAAQkB,GAAMo+E,EAAW1B,SAAU18E,GAM5CwF,EAASY,MAAQ,CAAEG,MAAOH,EAAOmQ,SAAU,GAE3CwkE,EAAM4B,QAASyB,GAMhB,OAFArD,EAAM4B,QAAS1B,GAERz1E,EA1HY6yE,CAAgB0C,EAAOC,EAAS+B,EAAe9E,GAE1DqG,EAAU94E,EAAS0Q,WAAWlN,IAAOwmD,GAAUA,EAAKjpD,MAAMovC,QAEzDnwC,EAASY,OAAQk4E,EAAQh/E,KAAMkG,EAASY,MAAMG,MAAMovC,QAEzDmoC,KAAK5E,YAAa,CAAE32E,KAAM,SAAUmR,GAAI5N,EAAQ4N,GAAIlO,YAAY84E,GAE/D,MAAQp8D,GAET7a,QAAQ6a,MAAOA,GAEf47D,KAAK5E,YAAa,CAAE32E,KAAM,QAASmR,GAAI5N,EAAQ4N,GAAIwO,MAAOA,EAAMpc,UAE/D,QAEDi1E,EAAM4B,QAASI,GACfhC,EAAM4B,QAAS3B,SAyLrB3E,EAAYoC,UAAY,IAAI8F,QAK5BlI,EAAYY,eAAiB,WAE5B5vE,QAAQiE,KAAM,4FAKf+qE,EAAYa,iBAAmB,WAE9B7vE,QAAQiE,KAAM,8FAKf+qE,EAAYmI,qBAAuB,WAElCn3E,QAAQiE,KAAM,kGAKf+qE,EAAYoI,iBAAmB,WAE9Bp3E,QAAQiE,KAAM,+F,8GCxqBf,OAEA,QAEA,2BACA,4BACA,4BAEA,kCACC,YACS9F,EACAk5E,EACAC,GAFA,KAAAn5E,WACA,KAAAk5E,YACA,KAAAC,YAGT,UACC,MAAMC,EAAoB,IAAI,EAAAzpE,aAAanR,KAAK26E,WAC1CE,EAAoB,IAAI,EAAA1pE,aAAanR,KAAK06E,WAC1CI,EAAYF,EAAkBG,WAC9BC,EAAYH,EAAkBE,WAEpC,GAAyB,IAArBD,EAAU9/E,QAAqC,IAArBggF,EAAUhgF,OACvC,OAGD,MAAMigF,EACLH,EAAU9/E,OAASggF,EAAUhgF,OAC1B,CAAC4/E,EAAmBC,GACpB,CAACA,EAAmBD,GAElBM,EAAoBD,EAA6B,GACjDE,EAAmBF,EAA6B,GAEhDG,EAAoBF,EAAkBH,WACtCM,EAAmBF,EAAiBJ,WAEpCO,EAAkBJ,EAAkB1mE,SACpC+mE,EAAiBJ,EAAiB3mE,SAClCgnE,EAAwBF,EAAgBtgF,OAExCygF,EAAa,UAAcH,EAAiBC,GAG5CG,EAA2B,GACjCN,EAAkBx5E,QAAQ,CAAC+5E,EAAS7gF,KACnC,MAAM8gF,EAAkBP,EAAiBvgF,GAEzC4gF,EAAepgF,KAAKqgF,EAAQ,IAC5BD,EAAepgF,KAAKqgF,EAAQ,IAC5BD,EAAepgF,KAAKsgF,EAAgB,GAAKJ,GAEzCE,EAAepgF,KAAKqgF,EAAQ,IAC5BD,EAAepgF,KAAKsgF,EAAgB,GAAKJ,GACzCE,EAAepgF,KAAKsgF,EAAgB,GAAKJ,KAGb,UAC5BN,EAAkB5oE,eAClB6oE,EAAiB7oE,gBAGG1Q,QAASyQ,IAC7B,MAAMsD,EAAculE,EAAkBvlE,YAAYtD,GAClD,IAAIm/D,EAAgBiK,EAAWz2E,IAAK2P,GACnCA,EAAMW,aAAajD,IAEhBsD,EAAc,IACjB67D,EAAgB,UACfA,EAAcxsE,IAAKC,GAAMA,EAAEF,aAG7B/E,KAAKwB,SAASkR,aACbL,EACA,IAAI,EAAAc,uBAAuBq+D,EAAe77D,MAK5C3V,KAAKwB,SAASgB,SAASk5E,GACvB17E,KAAKwB,SAASoQ,0B,mFC/EhB,eAMQ,EAAAiqE,UANA,EAAAA,UAER,cAImB,EAAAv9D,cAJX,EAAAA,cACR,cAGkD,EAAAze,UAH1C,EAAAA,UACR,eAEkC,EAAA+mC,eAF1B,EAAAA,eACR,eAC6D,EAAAuwB,cADrD,EAAAA,cAGR,OACA2kB,YAAYC,O,2FCkBZ,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,QAEA,kBAmJC,cAlJU,KAAAC,eAAiB,IAAI,EAAA1wE,MAmBrB,KAAA2wE,oBAAsB,IAAI,EAAAC,kBAAkBl8E,MAK9C,KAAAm8E,QAAU,IAAI,EAAAC,OAAOp8E,MASb,KAAA+b,gBAAkB,IAAI,EAAA+D,eAc9B,KAAAhI,OAAS,IAAI,EAAAukE,UAcb,KAAAC,0CAAyE,IAAI,EAAAC,4BAI7E,KAAAC,wBAAiD,IAAI,EAAAC,sBAKnD,KAAAC,kBAAoB,IAAI,EAAAC,gBAAgB38E,MAexC,KAAA48E,iBAAmB,IAAI,EAAAC,eAAe78E,MA+D/CA,KAAK8X,OAAOglE,UAAU98E,MAEtBA,KAAKmgD,iBAAiBhL,OArJvB,oBACC,OAAOn1C,KAAKg8E,eAGb,SAAS3qE,GACR,OAAQrR,KAAK+8E,MAAQ1rE,EAEtB,WACC,OAAOrR,KAAK+8E,MAGb,SAASlgF,GACR,OAAQmD,KAAK+F,MAAQlJ,EAEtB,WACC,OAAOmD,KAAK+F,MAIb,yBACC,OAAO/F,KAAKi8E,oBAIb,aACC,OAAOj8E,KAAKm8E,QAQP,2B,mDACL,OAAOn8E,KAAK+b,gBAAgBihE,8BAI7B,0BACC,OAAQh9E,KAAKi9E,qBAAuBj9E,KAAKi9E,sBAAwB,IAAI,EAAAC,mBAAmBl9E,MAGzF,wBACC,OAAQA,KAAKm9E,mBAAqBn9E,KAAKm9E,oBAAsB,IAAI,EAAAC,sBAAsBp9E,MAIxF,YACC,OAAOA,KAAK8X,OAIb,2BACC,OAAQ9X,KAAKq9E,sBAAwBr9E,KAAKq9E,uBAAyB,IAAI,EAAA39D,oBAAoB1f,MAG5F,yBACC,OAAQA,KAAKs9E,oBAAsBt9E,KAAKs9E,qBAAuB,IAAI,EAAAC,kBAAkBv9E,MAItF,+CACC,OAAOA,KAAKs8E,0CAGb,6BACC,OAAOt8E,KAAKw8E,wBAIb,uBACC,OAAOx8E,KAAK08E,kBAIb,kBACC,OAAQ18E,KAAKw9E,aAAex9E,KAAKw9E,cAAgB,IAAI,EAAAC,gBAStD,sBACC,OAAOz9E,KAAK48E,iBAEb,UAAUn8B,GACTzgD,KAAK4gD,gBAAgB88B,UAAUj9B,GAEhC,YACC,OAAOzgD,KAAK4gD,gBAAgBH,MAE7B,WACC,OAAOzgD,KAAK4gD,gBAAgBxV,KAE7B,kBACC,OAAOprC,KAAK4gD,gBAAgBF,YAE7B,OACC1gD,KAAK4gD,gBAAgB+8B,OAEtB,QACC39E,KAAK4gD,gBAAgBg9B,QAStB,iBACC,OAAQ59E,KAAK2f,YAAc3f,KAAK2f,aAAe,IAAI,EAAAk+D,oBAAoB79E,MAExE,UACC,OAAOA,KAAKiiB,WAAWC,UASxB,0BACC,OAAQliB,KAAK89E,qBAAuB99E,KAAK89E,sBAAwB,IAAI,EAAAC,mBAAmB/9E,MASzF,uBACC,OAAQA,KAAKg+E,kBAAoBh+E,KAAKg+E,mBAAqB,IAAI,EAAAC,gBAoBhE,aAAa7lE,GACZpY,KAAKm8E,QAAQnoC,QAEb57B,IAEApY,KAAKm8E,QAAQjoC,UAQd,KAAKt6B,GACJ,OAAO5Z,KAAKmgD,iBAAiB18C,KAAKmW,GAEnC,WACC,OAAO5Z,KAAKmgD,iBAAiBnjC,Q,8EC3N/B,0BACC,YAAoB5Z,GAAA,KAAAA,QAEpB,KAAA86E,yBAA0C,KAE1C,4BAA4BC,GAC3Bn+E,KAAKk+E,yBAA2BC,EAEjC,8BACC,OAAOn+E,KAAKk+E,yBAEb,yBACC,GAAIl+E,KAAK6gD,wBAAyB,CAEjC,OADoB7gD,KAAKoD,MAAMK,KAAKzD,KAAK6gD,yBAIzC,OADAx9C,QAAQiE,KAAK,gCACNtH,KAAKo+E,mBAIN,mBACP,MAAMphE,EAAOhd,KAAKoD,MAAM4Z,KACxB,OAAOA,EAAKyE,cAAc,sBAAsB,IAAMzE,EAAKyE,cAAc,uBAAuB,M,8ECjBlG,eAKC,YAAoBlK,GAAA,KAAAA,SAJZ,KAAA8mE,OAAiD,IAAI9tD,IACrD,KAAA+tD,aAAuB,EACvB,KAAAC,oBAAsBv+E,KAAKw+E,cAAc3gF,KAAKmC,MAGrDA,KAAKs+E,aAAe,EAGrB,QACCt+E,KAAKs+E,cAAgB,EAEtB,UACCt+E,KAAKs+E,cAAgB,EACjBt+E,KAAKs+E,aAAe,IACvBt+E,KAAKs+E,aAAe,GAGrBt+E,KAAKy+E,gBAIN,cACC,OAAOz+E,KAAKs+E,aAAe,EAG5B,QAAQ76E,EAAqBi7E,GAC5B1+E,KAAKq+E,OAAO99E,IAAIkD,EAAKqoB,cAAe4yD,GAGrC,gBACK1+E,KAAK2+E,SAMT3+E,KAAKq+E,OAAOz8E,QAAQ5B,KAAKu+E,qBASlB,cAAcG,EAAwDhvE,GAC7E,MAAMjM,EAAOzD,KAAKuX,OAAOI,MAAM+hD,aAAahqD,GACxCjM,IACHzD,KAAKq+E,OAAOO,OAAOlvE,GACnBjM,EAAKwf,iBAAiB47D,qBAAqBH,O,8EC1D9C,eAkBA,kBAKC,cAHA,KAAAI,SAAmB,EAIlB9+E,KAAK8X,OAAS,IAAI,EAAAinE,MAAM,CACvBC,UAAU,EACVC,UAAU,EACVC,YAAY,IAId,QACC,OAAOl/E,KAAK8X,OAEb,UAAU1U,GACTpD,KAAKuX,OAASnU,EAEf,QACC,OAAOpD,KAAKuX,OAGb,UACC,MAAiB,GAAIvX,KAAK8+E,UAAY,IAGvC,QAAQr7E,GACPzD,KAAK8X,OAAOD,QAAQpU,EAAKqoB,cAAeroB,GAGzC,WAAWA,GACVzD,KAAK8X,OAAOQ,WAAW7U,EAAKqoB,eAG7B,eAAeiuB,GACd,MAAM4V,EAAyB,GAC/B,IAAK,IAAIjgD,KAAMqqC,EAAK,CACnB,MAAMt2C,EAAOzD,KAAK05D,aAAahqD,GAC3BjM,GACHksD,EAAMr0D,KAAKmI,GAGb,OAAOksD,EAeR,aAAajgD,GACZ,OAAO1P,KAAK8X,OAAOrU,KAAKiM,GAGzB,QAAQ6I,EAAoByT,GAC3B,MAAMmzD,EAAS5mE,EAAIuT,cACbI,EAAUF,EAAKF,cAErB,GAAI9rB,KAAK8X,OAAOsnE,QAAQD,IAAWn/E,KAAK8X,OAAOsnE,QAAQlzD,GAAU,CAChElsB,KAAK8X,OAAOunE,QAAQF,EAAQjzD,GAK5B,IAAIozD,GAAkB,EAKtB,SAPsBt/E,KAAKuX,QAASvX,KAAKuX,OAAOuF,mBAAmBC,cAIlEuiE,GAAmB,EAAAC,IAAIC,UAAUx/E,KAAK8X,SAGnCwnE,GACHt/E,KAAK8X,OAAO2nE,WAAWN,EAAQjzD,IACxB,IAEP3T,EAAI0K,iBAAiBy8D,4CAEd,GAIR,OADAr8E,QAAQiE,KAAK,wCAAwC63E,QAAajzD,MAC3D,EAIT,WAAW3T,EAAoByT,GAC9B,GAAIzT,GAAOyT,EAAM,CAChB,MAAM2zD,EAAWpnE,EAAIuT,cACf8zD,EAAY5zD,EAAKF,cACvB9rB,KAAK8X,OAAO2nE,WAAWE,EAAUC,GAEjCrnE,EAAI0K,iBAAiBy8D,4CAGvB,wBAAwBj8E,GACvB,MAAMoV,EAAe7Y,KAAK6Y,aAAapV,GACvC,IAAK,IAAIi6C,KAAe7kC,EACvB7Y,KAAKyY,WAAWilC,EAAaj6C,GAG/B,sBAAsBA,GACrB,MAAMqV,EAAa9Y,KAAK8Y,WAAWrV,GACnC,IAAK,IAAIo8B,KAAa/mB,EACrB9Y,KAAKyY,WAAWhV,EAAMo8B,GAsBxB,gBAAgBnwB,GACf,OAAO1P,KAAK8X,OAAOe,aAAanJ,IAAO,GAExC,aAAajM,GACZ,MAAMs2C,EAAM/5C,KAAK4Y,gBAAgBnV,EAAKqoB,eACtC,OAAO9rB,KAAKu5D,eAAexf,GAE5B,cAAcrqC,GACb,OAAO1P,KAAK8X,OAAOgB,WAAWpJ,IAAO,GAEtC,WAAWjM,GACV,MAAMs2C,EAAM/5C,KAAK6/E,cAAcp8E,EAAKqoB,gBAAkB,GACtD,OAAO9rB,KAAKu5D,eAAexf,GAGpB,aAAat2C,EAAqBiuC,GACzC,MAAMqI,EAAyB,GAC/B,IAAI+lC,EAAW9/E,KAAK0xC,GAAQjuC,EAAKqoB,eAEjC,KAAOg0D,EAAS9kF,OAAS,GAAG,CAC3B,MAAM+kF,EAAgB,GACtB,IAAK,IAAInoE,KAAWkoE,EACnB,IAAK,IAAIE,KAAgBhgF,KAAK0xC,GAAQ95B,GACrCmoE,EAAczkF,KAAK0kF,GAIrB,IAAK,IAAItwE,KAAMowE,EACd/lC,EAAIz+C,KAAKoU,GAEV,IAAK,IAAIA,KAAMqwE,EACdD,EAASxkF,KAAKoU,GAEfowE,EAAWC,EAEZ,OAAOhmC,EAER,oBAAoBt2C,GACnB,OAAOzD,KAAKigF,aAAax8E,EAAM,mBAEhC,kBAAkBA,GACjB,OAAOzD,KAAKigF,aAAax8E,EAAM,iBAEhC,iBAAiBA,GAChB,MAAMs2C,EAAM/5C,KAAKkgF,oBAAoBz8E,GACrC,OAAOzD,KAAKu5D,eAAexf,GAE5B,eAAet2C,GACd,MAAMs2C,EAAM/5C,KAAKmgF,kBAAkB18E,GACnC,OAAOzD,KAAKu5D,eAAexf,M,yMCnM7B,uBAGC,cAFQ,KAAAqmC,qBAAkD,IAAI7vD,IACtD,KAAA8vD,UAAwB,GAGhC,SAAS58E,GACRzD,KAAKogF,qBAAqB7/E,IAAIkD,EAAKqoB,cAAeroB,GAEnD,YAAYA,GACXzD,KAAKogF,qBAAqBxB,OAAOn7E,EAAKqoB,eAEA,GAAlC9rB,KAAKogF,qBAAqB51E,MAC7BxK,KAAKsgF,QAIC,QACP,IAAIloE,EACJ,KAAQA,EAAWpY,KAAKqgF,UAAU73D,OACjCpQ,IAII,2B,mDACL,OAAsC,GAAlCpY,KAAKogF,qBAAqB51E,UAC7B,EAEO,IAAI2d,QAAQ,CAACC,EAASC,KAC5BroB,KAAKqgF,UAAU/kF,KAAK8sB,W,8EC7BxB,MACA,cAUA,2BACC,YAAoBhlB,GAAA,KAAAA,QAIpB,aAAam9E,GACZvgF,KAAKwgF,iBAAmBD,EAGzB,sBACC,OAAOvgF,KAAKwgF,iBAEb,SAASC,EAAwB5+D,EAAiDrnB,G,MAC5D,QAArB,EAAAwF,KAAKwgF,wBAAgB,SAAEE,eAAeD,EAAS5+D,EAAYrnB,GAE5D,mBACC,OACCwF,KAAKoD,MAAM0Z,mBAAmBs/B,QACL,MAAzBp8C,KAAKwgF,kBACLxgF,KAAKoD,MAAM0Z,mBAAmB6jE,gBAC7B,EAAAvlE,KAAKwlE,iB,2FChBHC,EAAkB,CACvBloC,WAAW,GAMZ,4BAQC,cAPA,KAAAmoC,kBAA4B,EAC5B,KAAAC,iBAA2B,EAC3B,KAAAC,WAA+B,GAC/B,KAAAC,UAA6B,GACrB,KAAAC,iBAA2B,EAC3B,KAAAb,UAAwB,GAIhC,qBACMrgF,KAAKkhF,kBACTlhF,KAAKkhF,iBAAkB,GAGzB,kBAAkB/5C,GACjB,IAAIqR,EAAmC,KAavC,OAZIx4C,KAAKkhF,kBACR1oC,EAAKx4C,KAAKmhF,yBAAyBh6C,GAAQ,IAEvCqR,IACJA,EAAKx4C,KAAKmhF,yBAAyBh6C,GAAQ,IAQrCqR,EAEA,yBAAyBrR,EAA2Bi6C,GAC3D,IAAIC,EAAeD,EAAS,SAAW,QACnC5oC,EAAKrR,EAAOm6C,WAAWD,EAAcR,GAKzC,OAJKroC,IACJ6oC,EAAeD,EAAS,sBAAwB,qBAChD5oC,EAAKrR,EAAOm6C,WAAWD,EAAcR,IAE/BroC,EAYR,kBAAkBn6B,GACjB,GAAKA,EAA+BkjE,YACnC,MAAM,IAAI7xC,MAAM,6BAEhBrxB,EAA+BkjE,YAAcvhF,KAAK8gF,mBAAqB,EAexE9gF,KAAKghF,WAAY3iE,EAA+BkjE,aAAeljE,EAEpB,GAAvCpjB,OAAO4W,KAAK7R,KAAKghF,YAAYhmF,QAChCgF,KAAKwhF,8BAA8BnjE,GAGrC,oBAAoBA,UACZre,KAAKghF,WAAY3iE,EAA+BkjE,aACvDljE,EAASD,UAEF,iBACP,MAAMqjE,EAAWxmF,OAAO4W,KAAK7R,KAAKghF,YAAY,GAC9C,OAAIS,EACIzhF,KAAKghF,WAAWS,GAEjB,KAER,YACC,OAAOxmF,OAAO6J,OAAO9E,KAAKghF,YAGnB,8BAA8B3iE,GACrC,IAAIjG,EACJ,KAAQA,EAAWpY,KAAKqgF,UAAU73D,OACjCpQ,EAASiG,GAIL,oB,mDACL,MAAMA,EAAWre,KAAK0hF,iBACtB,OAAIrjE,GAGI,IAAI8J,QAAQ,CAACC,EAASC,KAC5BroB,KAAKqgF,UAAU/kF,KAAK8sB,W,8EC9GxB,oCACS,KAAAu5D,eAAiD,GACjD,KAAAC,0BAAoD,GACpD,KAAAC,uBAAyD,GAEjE,cAAcp+E,EAA2BqX,EAA4Brc,GACpE,MAAM8mC,EAAU9hC,EAAK+c,eACfshE,EAAYr+E,EAAKlF,OAIvB,GAHAyB,KAAK2hF,eAAep8C,GAAWvlC,KAAK2hF,eAAep8C,IAAY,GAE/BvlC,KAAK2hF,eAAep8C,GAASu8C,GAE5D,MAAM,IAAIpyC,MAAM,QAAQnK,KAAWu8C,wBAEpC9hF,KAAK2hF,eAAep8C,GAASu8C,GAAar+E,EAEtCqX,IACH9a,KAAK4hF,0BAA0Br8C,GAAWvlC,KAAK4hF,0BAA0Br8C,IAAY,GACrFvlC,KAAK4hF,0BAA0Br8C,GAASu8C,GAAahnE,GAEtD9a,KAAK6hF,uBAAuBt8C,GAAWvlC,KAAK6hF,uBAAuBt8C,IAAY,GAC3E9mC,IACHuB,KAAK6hF,uBAAuBt8C,GAASu8C,GAAarjF,GAGpD,gBAAgB8mC,EAAiBu8C,UACzB9hF,KAAK2hF,eAAep8C,GAASu8C,UAC7B9hF,KAAK4hF,0BAA0Br8C,GAASu8C,UACxC9hF,KAAK6hF,uBAAuBt8C,GAASu8C,GAE7C,6CAA6Cv8C,EAAsBw8C,GAElE,GADY/hF,KAAK2hF,eAAep8C,GACvB,CAER,OAD0BtqC,OAAO6J,OAAO9E,KAAK2hF,eAAep8C,IACnCxb,OAAQtmB,I,MAChC,MAAMhF,EAAUuB,KAAK6hF,uBAAuBt8C,GAAS9hC,EAAKlF,QAC1D,IAAKE,EACJ,OAAO,EACD,CACN,MAAMujF,EAAcvjF,EAAc,KAC5BwjF,EAAgBxjF,EAAgB,OAChCyjF,EAAmB,GAAG38C,KAAWw8C,IACvC,GAAIC,EACH,OAAOA,EAAYl8B,SAASo8B,GAE7B,GAAID,EACH,OAAQA,EAAcn8B,SAASo8B,GAGjC,OAAQzjF,IAA0B,QAAnB,EAAIA,EAAc,YAAC,eAAEqnD,SAASi8B,MAG9C,MAAO,GAGT,iBAAiBx8C,EAAsBw8C,GACtC,MAAMtgE,EAAiD,GACjDkuC,EAAQ3vD,KAAKmiF,6CAA6C58C,EAASw8C,GACzE,IAAK,IAAIt+E,KAAQksD,EAAO,CAEvBluC,EADahe,EAAKlF,QACIkF,EAEvB,OAAOge,EAER,oBAAoB8jB,EAAsBhnC,GACzC,OAAOyB,KAAK4hF,0BAA0Br8C,GAAShnC,M,8ECjFjD,eACA,SAIA,8BAGC,YAAY6E,GAFJ,KAAAg/E,yBAA6E,IAAI,EAAApsB,sBACjF,KAAAqsB,aAAiE,CAACriF,KAAKoiF,0BAG/E,oBAAoB3+E,GACnB,MAAMq/C,EAAa9iD,KAAKsiF,yBAAyB7+E,GAC7Cq/C,GACHA,EAAW/nC,cAActX,GAG3B,sBAAsBA,GACrB,MAAMq/C,EAAa9iD,KAAKsiF,yBAAyB7+E,GAC7Cq/C,GACHA,EAAWy/B,gBAAgB9+E,GAI7B,cAAcyjC,EAAcC,EAA2BC,GACtD,IAAK,IAAI0b,KAAc9iD,KAAKqiF,aAC3B,GAAIv/B,EAAW0/B,cAAct7C,GAE5B,YADA4b,EAAW2/B,QAAQv7C,EAAOC,EAAQC,GAM7B,yBACP3jC,GAEA,OAAQA,EAAKlF,MACZ,KAAK,EAAA0wD,eAAe1wD,OACnB,OAAOyB,KAAKoiF,6B,8EC7BhB,wBAWC,YAAoB3+E,GAAA,KAAAA,OAVpB,KAAAi/E,aAAuB,EACvB,KAAAC,QAAkB,EAelB,eACC,OAAuB,IAAhB3iF,KAAK2iF,OAEb,sBACC,OAAO3iF,KAAK4iF,iBAEb,kBACC,OAAO5iF,KAAK0iF,aAEb,oBAAoB7lF,EAAc60C,GACjC1xC,KAAK6iF,uBAAyB7iF,KAAK6iF,wBAA0B,GAC7D7iF,KAAK8iF,kBAAoB9iF,KAAK8iF,mBAAqB,GAE9C9iF,KAAK6iF,uBAAuB/8B,SAASjpD,GAIzCwG,QAAQiE,KAAK,kBAAkBzK,mBAAuBmD,KAAKyD,OAH3DzD,KAAK6iF,uBAAuBvnF,KAAKuB,GACjCmD,KAAK8iF,kBAAkBxnF,KAAKo2C,IAK9B,uBAAuB70C,GACtB,GAAImD,KAAK6iF,wBAA0B7iF,KAAK8iF,kBAAmB,CAC1D,MAAM1gF,EAAQpC,KAAK6iF,uBAAuBv5E,QAAQzM,GAC9CuF,GAAS,IACZpC,KAAK6iF,uBAAuB3mF,OAAOkG,EAAO,GAC1CpC,KAAK8iF,kBAAkB5mF,OAAOkG,EAAO,KAIxC,SAASvF,GACR,QAAImD,KAAK6iF,wBACD7iF,KAAK6iF,uBAAuB/8B,SAASjpD,GAU9C,qBACCmD,KAAK2iF,QAAS,EAEf,4BAA4BhzB,GAC3B3vD,KAAK+iF,yBAA2BpzB,EAAM3qD,IAAKlH,GAAMA,EAAEguB,eAKpD,UAAU4yD,EAAoDsE,GAC5C,MAAbA,IACHA,GAAY,GAGZtE,GACA1+E,KAAK+iF,0BACL/iF,KAAK+iF,yBAAyBj9B,SAAS44B,EAA4B5yD,iBAKjC,MAA/B4yD,IACHA,EAA8B1+E,KAAKyD,MAkBpCzD,KAAK2iF,QAAS,EACd3iF,KAAK4iF,iBAAmBna,YAAYC,MACpC1oE,KAAK0iF,cAAgB,EAErB1iF,KAAK6+E,qBAAqBH,IAGR,IAAdsE,GAEHhjF,KAAKiY,qBAAqBymE,IAI5B,qBAAqBA,GACpB,GAAI1+E,KAAK8iF,kBAAmB,CAC3B,MAAM/uC,EAAS/zC,KAAKyD,KAAKL,MAAM2wC,OAC/B,GAAIA,EAAO4qC,QACV5qC,EAAOkvC,QAAQjjF,KAAKyD,KAAMi7E,QAE1B,IAAK,IAAIljC,KAAQx7C,KAAK8iF,kBACrBtnC,EAAKkjC,IAST,qBAAqBA,GAKpB1+E,KAAKkjF,mBAAqBljF,KAAKkjF,oBAAsBljF,KAAKyD,KAAKq8B,uBAE/D,IAAK,IAAID,KAAa7/B,KAAKkjF,mBAC1BrjD,EAAU5c,iBAAiBjL,UAAU0mE,GAJpB,GA6BnB,yBACC1+E,KAAKkjF,wBAAqB3+E,EAE3B,2CACCvE,KAAKmjF,yBACL,IAAK,IAAIzlC,KAAe19C,KAAKyD,KAAK2/E,yBACjC1lC,EAAYz6B,iBAAiBkgE,4B,8EChLhC,aACA,OAEA,QAQA,eAaC,YAAoB1/E,EAAoB6B,EAAY,EAAGC,EAAY,GAA/C,KAAA9B,OAZZ,KAAAgoE,UAAqB,IAAI,EAAA50C,QACzB,KAAAwsD,OAAiB,GACjB,KAAAC,eAAyB,EACzB,KAAAC,OAAgB,IAAI,EAAAp5E,MAAM,IAAM,IAAM,KAEtC,KAAAq5E,kBAA4B,EAE5B,KAAA/8E,MAAwB,CAC/BnB,EAAG,EACHC,EAAG,GAIHvF,KAAKyrE,UAAUnmE,EAAIA,EACnBtF,KAAKyrE,UAAUlmE,EAAIA,EAGpB,kBAAkB63D,GACjBp9D,KAAKsjF,eAAiBlmB,EAEvB,gBACC,OAAOp9D,KAAKsjF,eAEb,UAAUl7C,GACTpoC,KAAKqjF,OAASj7C,EAEf,QACC,OAAOpoC,KAAKqjF,OAEb,YAAYI,GACXzjF,KAAK0jF,SAAWD,EAChBzjF,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU0qE,yBAE1B,cACC,OAAO3jF,KAAK0jF,SAEb,UAAU75E,GACT7J,KAAKujF,OAAS15E,EAEf,QACC,OAAO7J,KAAKujF,OAQb,wBACCvjF,KAAKwjF,kBAAmB,EAEzB,qBACC,OAAOxjF,KAAKwjF,iBAGb,KAAKv8E,GACJjH,KAAKyrE,UAAU7nD,KAAK3c,EAAQmN,UAC5BpU,KAAKujF,OAAO3/D,KAAK3c,EAAQ4C,SAG1B,eACC,OAAO7J,KAAKyrE,UAGb,aAAaC,EAAgCnmE,EAAY,GACxD,GAAImmE,aAAwB,EAAA70C,QAC3B72B,KAAKyrE,UAAU7nD,KAAK8nD,OACd,CACN,MAAMpmE,EAAIomE,EACV1rE,KAAKyrE,UAAUlrE,IAAI+E,EAAGC,GAEvBvF,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU2qE,0BAG1B,UAAU15B,EAAiB25B,GAAgB,GAC1C7jF,KAAKyrE,UAAUtuD,IAAI+sC,GAEf25B,IACH7jF,KAAKyrE,UAAUnmE,EAAIkH,KAAKs3E,MAAM9jF,KAAKyrE,UAAUnmE,GAC7CtF,KAAKyrE,UAAUlmE,EAAIiH,KAAKs3E,MAAM9jF,KAAKyrE,UAAUlmE,IAG9CvF,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU2qE,0BAW1B,UAIC,OAHA5jF,KAAKyG,MAAMnB,EAAItF,KAAKyrE,UAAUnmE,EAC9BtF,KAAKyG,MAAMlB,EAAIvF,KAAKyrE,UAAUlmE,EAC9BvF,KAAKyG,MAAMg9E,QAAUzjF,KAAK0jF,SACnB1jF,KAAKyG,S,8EC3Gd,eACA,SAEA,yBAGC,YAAsBhD,GAAA,KAAAA,OAFtB,KAAAsgF,eAAiB,IAAI,EAAAC,mBAAmBhkF,KAAKyD,MAC7C,KAAAya,MAAQ,IAAI,EAAA+lE,WAAWjkF,KAAKyD,S,8ECP7B,eAEA,MAAaugF,UAA2B,EAAAE,UACvC,aACC,OAAOlkF,KAAKmkF,6BAA+BnkF,KAAKokF,4BAGjD,4BACC,MAAMzzB,EAAc3wD,KAAKyD,KAAK+E,OAAO60B,MACrC,IAAK,IAAI5S,KAAckmC,EAAa,CACnC,MAAMz3C,EAAQlZ,KAAKyD,KAAK+E,OAAOtL,IAAIutB,GACnC,GAAIvR,GAASA,EAAM8Y,OAAO+xD,eAAetjF,OACxC,OAAO,EAGT,OAAO,EAGR,4BACC,MAAMiH,EAAS1H,KAAKyD,KAAK5C,GAAG6G,OAAOA,SACnC,IAAK,IAAIwS,KAASxS,EACjB,GAAIwS,GAASA,EAAM8X,OAAO+xD,eAAetjF,OACxC,OAAO,EAGT,OAAO,EAGR,uBACC,MAAMmY,EAAkB5Y,KAAKyD,KAAK4gF,qBAAqBr/E,IAAKlH,GAAMA,EAAEguB,eAC9Dw4D,EAAatkF,KAAKyD,KAAKL,MAAMw9C,gBAAgB70B,WAC9CnT,EAAgBktC,SAASw+B,EAAWx4D,gBACxC9rB,KAAKyD,KAAKmlB,gBAAgB07D,GAG5B,yBACC,MAAMA,EAAatkF,KAAKyD,KAAKL,MAAMw9C,gBAAgB70B,WACnD/rB,KAAKyD,KAAKolB,mBAAmBy7D,IAnC/B,wB,8ECFA,cACA,SAEA,MAAaL,UAAmB,EAAAC,UAG/B,IAAIpiF,GACC9B,KAAKukF,UAAYziF,IACpBuB,QAAQiE,KAAK,QAASxF,EAAS9B,KAAKyD,KAAK4E,aACzCrI,KAAKukF,SAAWziF,EAChB9B,KAAKg4D,aAGP,cACC,OAAOh4D,KAAKukF,SAEb,QACCvkF,KAAKO,SAAIgE,GAEV,aACC,OAAwB,MAAjBvE,KAAKukF,SAGH,YACY,MAAjBvkF,KAAKukF,UAERvkF,KAAKyD,KAAKtC,cAAc,KAAM,eAAenB,KAAKukF,aAGnDvkF,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUurE,gBA1B3B,gB,8ECFA,eAGA,SAEA,kCAIC,YAAsB/gF,GAAA,KAAAA,OAHd,KAAAghF,QAA+B,KAKvC,aACC,OAAOzkF,KAAKykF,QAGb,WAAW/jF,GACNA,GAAUV,KAAKyD,KAAKod,kBAAkBngB,SACzCV,KAAKykF,QAAU/jF,EACXV,KAAKykF,SAERzkF,KAAKyD,KAAKmY,gBAAgBk/B,uBAAuB,EAAA56B,eAAewkE,UAAU1kF,KAAKyD,QAKlF,c,UACC,OAAkD,QAA3C,EAAgC,QAAhC,EAAW,QAAX,EAAAzD,KAAKU,cAAM,eAAE0gB,2BAAmB,eAAEsvC,iBAAS,eAAEi0B,SAAS3kF,KAAKyD,SAAS,EAE5E,YACC,MAAMmhF,EAAY,EAAA9qE,WAAWza,UAC7B,GAAoB,MAAhBW,KAAKykF,QAAiB,CACzB,MAAMI,EAAmB7kF,KAAKykF,QAAQp8E,YACtC,OAAIw8E,IAAqBD,EACjBC,EAAmB7kF,KAAKyD,KAAK5G,KAE7BgoF,EAAmBD,EAAY5kF,KAAKyD,KAAK5G,KAGjD,OAAO+nF,EAIT,gBACC,GAAI5kF,KAAK8kF,qBACR,IAAK,IAAItpC,KAAQx7C,KAAK8kF,qBACrBtpC,IAIH,UAAU5hC,GAIT,GAAY,MAARA,EACH,OAAO,KAER,GAAIA,IAAS,EAAAE,WAAWsQ,SAAWxQ,IAAS,EAAAE,WAAWwS,mBACtD,OAAOtsB,KAAKyD,KAEb,GAAImW,IAAS,EAAAE,WAAWoQ,QAAUtQ,IAAS,EAAAE,WAAWyS,kBACrD,OAAOvsB,KAAKyD,KAAK/C,OAGlB,MAAMkkF,EAAY,EAAA9qE,WAAWza,UACzBua,EAAK,KAAOgrE,IACfhrE,EAAOA,EAAK5L,UAAU,EAAG4L,EAAK5e,SAG/B,MAAM2T,EAAWiL,EAAKhL,MAAMg2E,GAC5B,GAAwB,IAApBj2E,EAAS3T,OAAc,CAC1B,MAAM6B,EAAO8R,EAAS,GACtB,OAAI3O,KAAKyD,KAAK2d,oBACNphB,KAAKyD,KAAK2d,oBAAoBI,cAAc3kB,GAE5C,KAGR,OAAO,EAAAid,WAAWG,UAAUja,KAAKyD,KAAMmW,M,2FC9E1C,QAGA,QAEA,4BACA,2BACA,4BACA,4BACA,QAEA,SACA,SAEA,QASA,oCAcC,YAAsBnW,EAA4BshF,GAA5B,KAAAthF,OAA4B,KAAAshF,WAX1C,KAAAC,UAAsC,GACtC,KAAAC,kBAA0C,GAC1C,KAAAC,uCAA+D,GAE/D,KAAAC,2BAAqC,EAI7C,gBACC,OAAQnlF,KAAKolF,WAAaplF,KAAKolF,YAAc,IAAI,EAAAC,kBAAkBrlF,KAAKyD,MAGzE,cACC,OAAOzD,KAAK+kF,SAEb,KAAKO,GAAqB,GAOzBtlF,KAAKglF,UAAY,GAGbM,IACHtlF,KAAKmlF,0BAA4BG,EAC7BtlF,KAAKmlF,4BACRnlF,KAAKulF,eAAiB,IAAI,EAAAjnE,cAActe,KAAKyD,KAAKL,MAjC7B,YAmCrBpD,KAAKyD,KAAKmlB,gBAAgB5oB,KAAKulF,kBAOlC,eAAe9hF,EAAoB+P,GAElC,IAAIgyE,EAIJ,GAFAhyE,GADAA,EAAWA,EAASvF,QAAQ,gBAAiB,MACzBA,QAAQ,SAAU,KAEsB,OAAvDu3E,EAA0BxlF,KAAKglF,UAAUxxE,IAAoB,CAEjE,GAAI/P,EAAK5G,OAAS2W,GAAYgyE,EAAwB15D,gBAAkBroB,EAAKqoB,cAC5E,OAMD,OAFAtY,EAAW,EAAA5O,WAAW6gF,UAAUjyE,GAEzBxT,KAAK66C,eAAep3C,EAAM+P,GAC3B,CAEN,MAAMkyE,EAAejiF,EAAK5G,KAGJmD,KAAKglF,UAAUU,WAE7B1lF,KAAKglF,UAAUU,GAIvB1lF,KAAKglF,UAAUxxE,GAAY/P,EAC3BA,EAAKmY,gBAAgB+pE,wBAAwBnyE,GAC7CxT,KAAK4lF,sBAAsBniF,GAC3BzD,KAAKyD,KAAKL,MAAM+8C,iBAAiB0lC,yBAAyBpiF,IAI5D,yBACC,MAAO,GAAGzD,KAAKyD,KAAK+c,kBAAkBxgB,KAAKyD,KAAKlF,OAGjD,6BACC,OAAO,EAAA6c,KAAKH,iBAAiBjb,KAAK+kF,SAAU/kF,KAAKyD,KAAKlF,MASvD,oBAAoBujF,GAEnB,OAAqB,MADF9hF,KAAK8lF,6BAA6BhE,GAItD,YAAYA,GACX,MAAMiE,EAAa/lF,KAAK8lF,6BAA6BhE,GAErD,GAAkB,MAAdiE,EAAoB,CACvB,MAAMjkF,EAAU,oBAAoBggF,0BAAkC9hF,KAAKyD,KAAK4E,sCAAsCpN,OAAO4W,KAC5H7R,KAAK8lF,8BACJ5gF,KAAK,UAAUlF,KAAK+kF,aAAa/kF,KAAKyD,KAAKlF,OAE7C,MADA8E,QAAQ6a,MAAMpc,GACRA,EACA,CACN,MAAMo5C,EAAa,IAAI6qC,EAAW/lF,KAAKyD,KAAKL,MAAO,cAAc0+E,KAKjE,OAJA5mC,EAAW8qC,2BAEXhmF,KAAKqqB,SAAS6wB,GACdA,EAAW1b,UAAUymD,yBACd/qC,GAIT,SAASA,GASR,GAJAA,EAAWp6B,WAAW9gB,KAAKyD,MAC3By3C,EAAW1yC,OAAO2sC,OAClB+F,EAAWr6B,kBAAkBqlE,gBAC7BhrC,EAAWt/B,gBAAgBq/B,qBACvBC,EAAWN,oBAAsBM,EAAW95B,oBAC/C,IAAK,IAAIipD,KAASnvB,EAAW95B,oBAAoBG,WAChD8oD,EAAMzuD,gBAAgBq/B,qBAqBxB,OAlBAj7C,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUktE,QAAS,CAACC,gBAAiBlrC,EAAWh5B,YAC3DliB,KAAKyD,KAAKL,MAAMijF,qBAAqBC,0BACxCprC,EAAW1b,UAAU+mD,sBAEtBrrC,EAAW1b,UAAUgnD,mBACrBxmF,KAAK66C,eAAeK,EAAY,EAAAh7B,eAAewkE,UAAUxpC,IACzDl7C,KAAKyD,KAAK+7B,UAAUinD,uBAAuBvrC,GAGvCl7C,KAAKmlF,2BAA6BnlF,KAAKulF,gBAC1CvlF,KAAKulF,eAAe38D,gBAAgBsyB,GAEjCA,EAAWt6B,kBACd5gB,KAAKyD,KAAKL,MAAMsjF,iBAAiBC,qBAGlC3mF,KAAKyD,KAAKL,MAAM+3C,yCAAyCC,6BAA6BF,GAE/EA,EAMR,YAAYA,G,QACX,GAAIA,EAAWx6C,QAAUV,KAAKyD,KAC7B,OAAOJ,QAAQiE,KAAK,QAAQ4zC,EAAWr+C,yBAAyBmD,KAAKyD,KAAK4E,eACpE,CAEN6yC,EAAWjjC,qBAAqBjY,KAAKyD,MAEjCzD,KAAKmlF,2BAA6BnlF,KAAKulF,gBAC1CvlF,KAAKulF,eAAe18D,mBAAmBqyB,GAGpCl7C,KAAK0wD,UAAUi0B,SAASzpC,IAC3Bl7C,KAAK0wD,UAAUtzC,OAAO,CAAC89B,IAGxB,MAAM1a,EAAmB0a,EAAWr6C,GAAGkG,YAAYuF,yBACN,QAA7C,EAAA4uC,EAAWr6C,GAAGkG,YAAY2F,2BAAmB,SAAE9K,QAASiG,IACnDA,GACHA,EAAiB4Q,WAAW,CAACmJ,WAAW,MAGI,QAA9C,EAAAs5B,EAAWr6C,GAAGkG,YAAY6oD,4BAAoB,SAAEhuD,QAASglF,IACxD,GAAIA,IACHA,EAAkBnuE,WAAW,CAACmJ,WAAW,IACrC4e,GAAkB,CACrB,MAAMqmD,EAAUrmD,EAAiBz4B,SAC3B++E,EAAmBF,EAAkB1+E,aACrC6+E,EAAWH,EAAkB/2B,UAC7Bm3B,EAAkBJ,EAAkBn/E,YAC1Cs/E,EAASlmF,GAAG6G,OAAOka,UAAUolE,EAAiBH,EAASC,MAM1D5rC,EAAW+rC,8BAGX/rC,EAAWp6B,WAAW,aACf9gB,KAAKglF,UAAU9pC,EAAWr+C,MACjCmD,KAAKknF,2BAA2BhsC,GAChCl7C,KAAKyD,KAAKL,MAAM+8C,iBAAiBgnC,8BAA8BjsC,GAE/Dl7C,KAAKyD,KAAK+7B,UAAU4nD,0BAA0BlsC,GAC9CA,EAAW1b,UAAU6nD,sBACrBnsC,EAAWpzB,KAAK,EAAA7O,UAAUquE,QAAS,CAACC,UAAWvnF,KAAKyD,KAAKqoB,iBAI3D,sBAAsBroB,GACrB,MAAM+jF,EAAU/jF,EAAKqoB,cACfvtB,EAAOkF,EAAKlF,KAClByB,KAAKilF,kBAAkB1mF,GAAQyB,KAAKilF,kBAAkB1mF,IAAS,GAC1D,UAAgByB,KAAKilF,kBAAkB1mF,GAAOipF,IAClDxnF,KAAKilF,kBAAkB1mF,GAAMjD,KAAKksF,GAEnCxnF,KAAKynF,6CAA6ChkF,GAEnD,2BAA2BA,GAC1B,MAAM+jF,EAAU/jF,EAAKqoB,cACfvtB,EAAOkF,EAAKlF,KAClB,GAAIyB,KAAKilF,kBAAkB1mF,GAAO,CACjC,MAAM6D,EAAQpC,KAAKilF,kBAAkB1mF,GAAM+K,QAAQk+E,GAC/CplF,GAAS,IACZpC,KAAKilF,kBAAkB1mF,GAAMrC,OAAOkG,EAAO,GACA,GAAvCpC,KAAKilF,kBAAkB1mF,GAAMvD,eACzBgF,KAAKilF,kBAAkB1mF,IAIjCyB,KAAK0nF,kDAAkDjkF,GAExD,6CAA6CA,G,MAC5C,MAAM+jF,EAAU/jF,EAAKqoB,cACfvtB,EAAOkF,EAAK+c,eAClBxgB,KAAKklF,uCAAuC3mF,GAAQyB,KAAKklF,uCAAuC3mF,IAAS,GACpG,UAAgByB,KAAKklF,uCAAuC3mF,GAAOipF,IACvExnF,KAAKklF,uCAAuC3mF,GAAMjD,KAAKksF,GAEpDxnF,KAAKyD,KAAK/C,QAAUV,KAAKyD,KAAK/C,OAAOk6C,qBACJ,QAApC,EAAA56C,KAAKyD,KAAK/C,OAAO0gB,2BAAmB,SAAEqmE,6CAA6ChkF,IAGrF,kDAAkDA,G,MACjD,MAAM+jF,EAAU/jF,EAAKqoB,cACfvtB,EAAOkF,EAAK+c,eAClB,GAAIxgB,KAAKklF,uCAAuC3mF,GAAO,CACtD,MAAM6D,EAAQpC,KAAKklF,uCAAuC3mF,GAAM+K,QAAQk+E,GACpEplF,GAAS,IACZpC,KAAKklF,uCAAuC3mF,GAAMrC,OAAOkG,EAAO,GACA,GAA5DpC,KAAKklF,uCAAuC3mF,GAAMvD,eAC9CgF,KAAKklF,uCAAuC3mF,IAIlDyB,KAAKyD,KAAK/C,QAAUV,KAAKyD,KAAK/C,OAAOk6C,qBACJ,QAApC,EAAA56C,KAAKyD,KAAK/C,OAAO0gB,2BAAmB,SAAEsmE,kDAAkDjkF,IAI1F,cAAclF,GACb,MAAM+6D,EAAWt5D,KAAKilF,kBAAkB1mF,IAAS,GAC3CoZ,EAAQ3X,KAAKyD,KAAKL,MAAMuU,MACxBg4C,EAAwB,GAO9B,OANA2J,EAAS13D,QAAS4lF,IACjB,MAAM/jF,EAAOkU,EAAM+hD,aAAa8tB,GAC5B/jF,GACHksD,EAAMr0D,KAAKmI,KAGNksD,EAER,cAAc9yD,GACb,OAAOmD,KAAKglF,UAAUnoF,GAOvB,4CAA4C0oC,GAC3C,OAA+D,MAAxDvlC,KAAKklF,uCAAuC3/C,GAKpD,WACC,OAAO,UAAcvlC,KAAKglF,WAE3B,iBACC,OAAO,UAAc,UAAYhlF,KAAKglF,YAKvC,kBAAkB5sE,G,MACjB,IAAK,IAAIiyD,KAASrqE,KAAKuhB,WACtBnJ,EAASiyD,GAEgB,QAAzB,EAAAA,EAAMjpD,2BAAmB,SAAEumE,kBAAkBvvE,M,mHCtThD,4BACA,4BAEA,4BACA,QAEA,0BAEC,YAAoBtS,GAAA,KAAAA,QADpB,KAAA8hF,UAAsB,GAsDd,KAAAnhF,MAAkB,GAhD1B,OACC,OAAOzG,KAAK8F,MAGb,QACC,OAAO9F,KAAK8F,MAAM1C,MAAMuU,MAAM4hD,eAAev5D,KAAK4nF,WAGnD,SAASnkF,GACR,OAAOzD,KAAK4nF,UAAU9hC,SAASriD,EAAKqoB,eAErC,OAAO6jC,GACN,MAAM2J,EAAW3J,EAAM3qD,IAAKvB,GAASA,EAAKqoB,eAAe7b,OACzD,OAAO,UAAeqpD,EAAUt5D,KAAK4nF,WAGtC,QACC5nF,KAAK4nF,UAAY,GACjB5nF,KAAK6nF,oBAEN,IAAIl4B,GAEH3vD,KAAK4nF,UAAY,GACjB5nF,KAAKmd,IAAIwyC,GAGV,IAAIm4B,GAGH,MAAMC,EAAkBD,EAAa9iF,IAAKvB,GAASA,EAAKqoB,eACxD9rB,KAAK4nF,UAAY,UAAa5nF,KAAK4nF,UAAWG,GAE9C/nF,KAAK6nF,oBAGN,OAAOG,GAGN,MAAMC,EAAqBD,EAAgBhjF,IAAKvB,GAASA,EAAKqoB,eAC9D9rB,KAAK4nF,UAAY,UAAkB5nF,KAAK4nF,UAAWK,GAEnDjoF,KAAK6nF,oBAGE,oBACP7nF,KAAK8F,MAAMgiB,KAAK,EAAA7O,UAAUivE,mBAI3B,UAGC,OAFAloF,KAAKyG,MAAQzG,KAAKyG,OAAS,GAC3BzG,KAAKyG,MAAQzG,KAAK4nF,UAAU5iF,IAAK0K,GAAOA,GACjC1P,KAAKyG,S,+EC9Dd,4BAOC,YAAsBhD,GAAA,KAAAA,OANZ,KAAA0kF,qBAAsB,EAQhC,yBACCnoF,KAAKmoF,qBAAsB,EAE5B,yBACC,OAAOnoF,KAAKyD,KAAKL,MAAM0Z,mBAAmBs/B,QAAUp8C,KAAKmoF,oBAO1D,sBAAsB/vE,GACrBpY,KAAKooF,oBAAsBpoF,KAAKooF,qBAAuB,GACvDpoF,KAAKooF,oBAAoB9sF,KAAK8c,GAE/B,uBAAuB3U,GACtBzD,KAAKqoF,8BAA8BroF,KAAKooF,oBAAqB3kF,GAQ9D,yBAAyB2U,GACxBpY,KAAKsoF,uBAAyBtoF,KAAKsoF,wBAA0B,GAC7DtoF,KAAKsoF,uBAAuBhtF,KAAK8c,GAElC,0BAA0B3U,GACzBzD,KAAKqoF,8BAA8BroF,KAAKsoF,uBAAwB7kF,GAQjE,mBAAmB2U,GAClBpY,KAAKuoF,iBAAmBvoF,KAAKuoF,kBAAoB,GACjDvoF,KAAKuoF,iBAAiBjtF,KAAK8c,GAE5B,sBACCpY,KAAKwoF,cAAcxoF,KAAKuoF,kBAQzB,gBAAgBnwE,GACfpY,KAAKyoF,cAAgBzoF,KAAKyoF,eAAiB,GAC3CzoF,KAAKyoF,cAAcntF,KAAK8c,GAEzB,mBACCpY,KAAKwoF,cAAcxoF,KAAKyoF,eAQzB,gBAAgBrwE,GACfpY,KAAK0oF,iBAAmB1oF,KAAK0oF,kBAAoB,GACjD1oF,KAAK0oF,iBAAiBptF,KAAK8c,GAE5B,sBACCpY,KAAKwoF,cAAcxoF,KAAK0oF,kBAQf,cAAcC,GACvB,GAAIA,EACH,IAAK,IAAIntC,KAAQmtC,EAChBntC,IAIO,8BAA8BmtC,EAA4CztC,GACnF,GAAIytC,EACH,IAAK,IAAIntC,KAAQmtC,EAChBntC,EAAKN,M,2FClGT,QAEA,uBAeC,YAAoBz3C,GAAA,KAAAA,OAdpB,KAAAmlF,UAAoB,EACpB,KAAAC,aAAuB,EACvB,KAAAC,gBAA0B,EAE1B,KAAAC,uBAAiC,EAGjC,KAAAC,WAAqB,EAErB,KAAAC,kBAA4B,EAG5B,KAAAC,6BAAuC,EAIvC,6BACClpF,KAAKkpF,6BAA8B,EAGpC,iBACC,OAAyB,IAAlBlpF,KAAK4oF,SAEb,kBACC,OAAO5oF,KAAK6oF,aAEb,gBACC,OAAO7oF,KAAKgpF,WAWL,sBACPhpF,KAAK4oF,UAAW,EAChB5oF,KAAKmpF,yBAA2BnpF,KAAKyD,KAAKwf,iBAAiBmmE,gBAEpD,yBAAyBC,GACb,MAAfA,IACHA,EAAcrpF,KAAKyD,KAAKL,MAAMqlE,YAAY6gB,SAEvCD,IACHrpF,KAAKupF,iBAAmB9gB,YAAYC,OAIxB,yBAAyB1nD,G,mDACtC,GAAIhhB,KAAKyD,KAAKuuB,OAAO9T,MAAMzd,OAC1BT,KAAKmhB,gBAGL,UACOnhB,KAAKyD,KAAKu6B,KAAKhd,GACpB,MAAOxR,GACRxP,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,yBAAyBiP,OACpDnM,QAAQ6a,MAAMle,KAAKyD,KAAK4E,YAAamH,GACrCxP,KAAKmhB,eAKF,Y,mDACL,GAAInhB,KAAKs8C,WACR,OAEDt8C,KAAKwpF,sBACL,MAAMH,EAAcrpF,KAAKyD,KAAKL,MAAMqlE,YAAY6gB,QAC5CD,IACHrpF,KAAKypF,6BAA+BhhB,YAAYC,OAEjD1oE,KAAKyD,KAAKuuB,OAAO9T,MAAML,QAGvB,MAAM6rE,QAAyB1pF,KAAK2pF,6BAEpC3pF,KAAK4pF,yBAAyBP,GAE9B,MAAMroE,EAAiB,GACvB,GAAI0oE,EAAkB,CACrB,IAAIG,EACJ,IAAK,IAAI/uF,EAAI,EAAGA,EAAI4uF,EAAiB1uF,OAAQF,IAC5C+uF,EAAkBH,EAAiB5uF,GAC/B+uF,IACC7pF,KAAKyD,KAAK5C,GAAG6G,OAAOoiF,mCAAmChvF,GAC1DkmB,EAAe1lB,KAAKuuF,EAAgBE,uBAEpC/oE,EAAe1lB,KAAKuuF,EAAgB7nF,uBAMlChC,KAAKgqF,yBAAyBhpE,MAE/B,2B,mDACLhhB,KAAKyD,KAAKL,MAAM2Y,gBAAgBsO,SAASrqB,KAAKyD,MAC1CzD,KAAKs8C,WAKRj5C,QAAQiE,KAAK,2CAA4CtH,KAAKyD,KAAK4E,cAGpErI,KAAKwpF,sBACLxpF,KAAK4pF,2BACL5pF,KAAKyD,KAAKuuB,OAAO9T,MAAML,cAEjB7d,KAAKyD,KAAK+E,OAAOy+B,iBACjBjnC,KAAKgqF,yBAAyB,QAKrC,SAASloF,GACR9B,KAAKiqF,yBAEL,MAAMb,EAAkBppF,KAAKyD,KAAKwf,iBAAiBmmE,gBAC5B,MAAnBA,GAA2BA,IAAoBppF,KAAKmpF,0BACvDnpF,KAAKyD,KAAKyU,qBACVlY,KAAKkqF,4BAEL,EAAA9uE,KAAK9X,IAAI,aAAc8lF,EAAiBppF,KAAKmpF,yBAA0BnpF,KAAKyD,KAAK4E,aACjFrI,KAAK4oF,UAAW,EAChB5oF,KAAK02B,aAIP,0BACK12B,KAAKs8C,aAERt8C,KAAK4oF,UAAW,EAIhB5oF,KAAKmqF,oBAGL/zD,WAAWp2B,KAAKyD,KAAK3D,qBAAqB02B,kBAAkB34B,KAAKmC,KAAKyD,KAAK3D,sBAAuB,IAG5F,yBACHE,KAAKs8C,YACqB,MAAzBt8C,KAAKupF,mBACRvpF,KAAK6oF,cAAgB,GAaxB,oBACC,GAAI7oF,KAAKyD,KAAKL,MAAMqlE,YAAY6gB,QAAS,CACxC,MAAMc,EAAgB3hB,YAAYC,MAEO,MAArC1oE,KAAKypF,+BACRzpF,KAAK+oF,uBAAyBqB,EAAgBpqF,KAAKypF,6BACnDzpF,KAAKypF,kCAA+BllF,GAGD,MAAhCvE,KAAKqqF,yBAA4D,MAAzBrqF,KAAKupF,mBAChDvpF,KAAKipF,kBAAoBjpF,KAAKupF,iBAAmBvpF,KAAKqqF,yBAG1B,MAAzBrqF,KAAKupF,mBACRvpF,KAAKgpF,WAAaoB,EAAgBpqF,KAAKupF,iBACvCvpF,KAAKupF,sBAAmBhlF,GAGzBvE,KAAK8oF,eAAiBt8E,KAAKC,IAAIzM,KAAK8oF,eAAgB9oF,KAAKgpF,YAGtDhpF,KAAKyD,KAAKL,MAAMqlE,YAAY6gB,SAC/BtpF,KAAKyD,KAAKL,MAAMqlE,YAAY6hB,sBAAsBtqF,KAAKyD,MAQnD,6B,mDAGL,IAAIimF,EAA6C,GAiBjD,OAhBI1pF,KAAKkpF,8BACRQ,QAAyB1pF,KAAKyD,KAAK5C,GAAG6G,OAAO6iF,0BAI1CvqF,KAAKyD,KAAKL,MAAMqlE,YAAY6gB,UAC/BtpF,KAAKqqF,wBAA0B5hB,YAAYC,aAGT1oE,KAAKyD,KAAK+E,OAAOy+B,WAO7CyiD,KAIR,4BACC,OAAO1pF,KAAK+oF,uBAGb,uBACC,OAAO/oF,KAAKipF,kBAEb,qBAAqB79C,GAEpB,OAAO5+B,KAAKs3E,MADM,IACA14C,GADA,O,8EC3NpB,Q,KAAA,wBACA,QAEA,QAGA,IAAKo/C,GAAL,SAAKA,GACJ,gCACA,oCAFD,CAAKA,MAAO,KAKZ,+BAGC,YAAsB/mF,GAAA,KAAAA,OAUtB,mBACC,OAAOzD,KAAKyqF,6BAA6BD,EAAQE,YAGlD,qBACC,OAAO1qF,KAAKyqF,6BAA6BD,EAAQG,cAE1C,6BAA6Bj5C,GACpC,MAAMlpC,EAASxI,KAAKyD,KAAK+E,OAAOqrC,IAC1B+2C,EAA+B,GACrC,IAAK,IAAI1xE,KAAS1Q,EACjBoiF,EAAYtvF,KAAK4d,GAElB0xE,EAAYtvF,KAAK0E,KAAKyD,MACtB,MAAMonF,EAAcD,EACpB,IAAIE,EAA6B,GACjC,IAAK,IAAIC,KAAcF,EACtB7qF,KAAKgrF,2BAA2BD,EAAYr5C,EAAQo5C,GAGrD,GAAIp5C,GAAU84C,EAAQE,WACrB,IAAK,IAAIjnF,KAAQzD,KAAKirF,uBACrBH,EAAWxvF,KAAKmI,GAKlBqnF,EAAaA,EAAW/gE,OAAQmhE,GACxBA,EAAWp/D,eAAiB9rB,KAAKyD,KAAKqoB,eAE9C,MAAMq/D,EAA8B,UAAeL,EAAahtF,GAAMA,EAAEguB,eAClEs/D,EAAkC,GAIxC,OAHAnwF,OAAO4W,KAAKs5E,GAA6BvpF,QAASkqB,IACjDs/D,EAAgB9vF,KAAK6vF,EAA4Br/D,GAAe,MAE1Ds/D,EAGA,2BAA2B3nF,EAAqBiuC,EAAiBo5C,GACxE,MAAMO,EAAa5nF,EAAKiuC,KACxB,IAAK,IAAIznB,KAAaohE,EACjBphE,aAAqB,EAAAqhE,eACxBR,EAAWxvF,KAAK2uB,EAAUxmB,OA1EuB1G,EA4EnCktB,GA1E0B,iBAFiBshE,EA4EhC,EAAAC,sBAzEbzuF,IAF6CwuF,EAIrDxuF,aAJqDwuF,GA4ExDT,EAAWxvF,KAAK2uB,GAEhBjqB,KAAKgrF,2BAA2B/gE,EAAWynB,EAAQo5C,IA/ExD,IAAqD/tF,EAAQwuF,EAoF3D,OAAOT,EASR,mBAAmB5xE,GAClBlZ,KAAKyrF,mCAAqCzrF,KAAKyrF,oCAAsC,GACrFzrF,KAAKyrF,mCAAmCvyE,EAAM4S,eAAiB5S,EAEhE,sBAAsBA,GACjBlZ,KAAKyrF,2CACDzrF,KAAKyrF,mCAAmCvyE,EAAM4S,eAGvD,kBACC,MAAMljB,EAAO,GACb,GAAI5I,KAAKyrF,mCACR,IAAK,IAAI3/D,KAAiB7wB,OAAO4W,KAAK7R,KAAKyrF,oCAC1C7iF,EAAKtN,KAAK0E,KAAKyrF,mCAAmC3/D,IAGpD,OAAOljB,EAER,uBACC,MAAM8iF,EAAkD,GACxD,IAAIjoF,EACJ,IAAK,IAAIyV,KAASlZ,KAAK2rF,kBACtBloF,EAAOyV,EAAMzV,KACbioF,EAAsBjoF,EAAKqoB,eAAiBroB,EAE7C,MAAMmF,EAAO,GACb,IAAK,IAAIkjB,KAAiB7wB,OAAO4W,KAAK65E,GACrC9iF,EAAKtN,KAAKowF,EAAsB5/D,IAEjC,OAAOljB,K,kFCzHT,uBAIC,YAAsBsQ,GAAA,KAAAA,QAHtB,KAAA0yE,eAAyB,EACzB,KAAAC,sBAAgC,EAChC,KAAAC,qBAA2C,GAG3C,mBACC,OAA2B,IAAvB9rF,KAAK4rF,iBAIL5rF,KAAKkZ,MAAM9V,MAAM0Z,mBAAmBC,YAQjC/c,KAAKkZ,MAAM9V,MAAM0e,oBAAoBoH,cAG7C,aAKC,OAJAlpB,KAAK4rF,eAAgB,EACjB5rF,KAAKkZ,MAAM6yE,aAAe/rF,KAAKkZ,MAAM4P,YACxC9oB,KAAKkZ,MAAM4P,WAAWlnB,QAASjF,GAAMA,EAAEkrB,gBAAgBmkE,eAEjD,EAER,eAKC,OAJAhsF,KAAK4rF,eAAgB,EACjB5rF,KAAKkZ,MAAM6yE,aAAe/rF,KAAKkZ,MAAM4P,YACxC9oB,KAAKkZ,MAAM4P,WAAWlnB,QAASjF,GAAMA,EAAEkrB,gBAAgBokE,iBAEjD,EAER,oBAEC,OADAjsF,KAAK6rF,sBAAuB,GACrB,EAER,sBAEC,OADA7rF,KAAK6rF,sBAAuB,GACrB,EAGR,gBAAgBhqE,GACf7hB,KAAK8rF,qBAAqBjqE,GAAc7hB,KAAK8rF,qBAAqBjqE,IAAe,EACjF7hB,KAAK8rF,qBAAqBjqE,IAAe,EAE1C,aAAaA,GACZ,OAAO7hB,KAAK8rF,qBAAqBjqE,IAAe,EAGjD,KAAKqlB,GACAlnC,KAAKkpB,eACRlpB,KAAKkZ,MAAM4O,KAAKof,GAEe,MAA3BlnC,KAAKkZ,MAAMwP,eAAsD,IAA9B1oB,KAAK6rF,sBAC3C7rF,KAAKkZ,MAAMwP,aAAaZ,KAAKof,O,8EC1CjC,wBACC,YAAsBhuB,GAAA,KAAAA,QAEtB,UACC,MAAM1e,EAA4B,CACjCqC,KAAMmD,KAAKkZ,MAAMrc,KACjB0B,KAAMyB,KAAKkZ,MAAM3a,KACjBmpB,UAAW1nB,KAAK0nB,YAChBpqB,MAAO0C,KAAK1C,QACZq1C,WAAY3yC,KAAK2yC,aACjB7mB,cAAe9rB,KAAKkZ,MAAM4S,cAE1ByR,cAAev9B,KAAKu9B,gBACpB2uD,WAAYlsF,KAAKksF,aAEjBpjE,gBAAYvkB,GAOb,OAJIvE,KAAKkZ,MAAM6yE,aAAe/rF,KAAKkZ,MAAM4P,aACxCtuB,EAAiB,WAAIwF,KAAKkZ,MAAM4P,WAAW9jB,IAAKsuC,GAAcA,EAAUxnB,gBAGlEtxB,EAGR,YACC,OAAOwF,KAAKkZ,MAAM2wB,qBAEnB,QACC,OAAO7pC,KAAKkZ,MAAMizE,iBAEnB,a,MACC,OAAOnsF,KAAKkZ,MAAMkzE,iBAAmD,QAAjC,EAACpsF,KAAKkZ,MAAMoQ,6BAAqB,eAAEqpB,gBAAapuC,EAErF,gBACC,OAAOvE,KAAKkZ,MAAM8Y,OAAO9T,MAAMpc,QAEhC,aACC,OAAO9B,KAAKkZ,MAAMza,QAAQytF,c,8ECvD5B,eACA,SAEA,yBAGC,YAAsBhzE,GAAA,KAAAA,QAFtB,KAAA6qE,eAAiB,IAAI,EAAAC,mBAAmBhkF,KAAKkZ,OAC7C,KAAAgF,MAAQ,IAAI,EAAA+lE,WAAWjkF,KAAKkZ,U,8ECL7B,2BACC,YAAsBA,GAAA,KAAAA,QAEtB,aACC,MAAMmzE,EAAsBrsF,KAAKkZ,MAAM9V,MAAMw9C,gBAAgB70B,WAAWD,cAExE,OAAO9rB,KAAKkZ,MAAMozE,wBAAwBxmC,SAASumC,M,8ECPrD,eAIA,mBAEC,YAAoBnzE,GAAA,KAAAA,QAEpB,IAAIpX,GACC9B,KAAKukF,UAAYziF,IACpB9B,KAAKukF,SAAWziF,EACZ9B,KAAKukF,UACRlhF,QAAQC,IAAItD,KAAKkZ,MAAM7Q,YAAarI,KAAKukF,UAE1CvkF,KAAKkZ,MAAM2O,gBAAgBC,KAAK,EAAAC,WAAWy8D,gBAG7C,cACC,OAAOxkF,KAAKukF,SAEb,QACCvkF,KAAKO,SAAIgE,GAEV,aACC,OAAwB,MAAjBvE,KAAKukF,Y,2FCtBd,QAKA,QAKA,SAGA,QAmBA,yBAqBC,YAAsB9gF,GAAA,KAAAA,OApBd,KAAA8oF,oBAA8B,EAC9B,KAAAC,gBAA6C,GAE7C,KAAAC,aAAgC,GAChC,KAAAC,aAAyB,GACzB,KAAAC,kBAAqC,GACrC,KAAAC,cAAiC,GACjC,KAAAC,uBAAmC,GACnC,KAAAC,mBAA+B,GAI/B,KAAAC,sCAAgD,EAUhD,uBACF/sF,KAAKgtF,eAEThtF,KAAKgtF,aAAe,IAAI,EAAA1uE,cAActe,KAAKyD,KAAKL,MA1C1B,UA4CtBpD,KAAKyD,KAAKmlB,gBAAgB5oB,KAAKgtF,eAIjC,OACChtF,KAAKitF,uBAELjtF,KAAKusF,oBAAqB,EAE1BvsF,KAAKktF,0BACLltF,KAAKyD,KAAK0pF,gBACVntF,KAAKotF,sBAEE,sBACPptF,KAAKqtF,iBAELrtF,KAAKstF,uBACLttF,KAAKusF,oBAAqB,EAE1BvsF,KAAKutF,8BAcN,cAAc9uF,GACb,IAAI+uF,GAAsB,EACtBC,GAAsB,EAC1B,GAAIhvF,EAAQo/B,gBACX,IAAK,IAAIhhC,KAAQ4B,EAAQo/B,gBACpB79B,KAAKg5B,IAAIn8B,KACZmD,KAAK0tF,aAAa7wF,GAClB4wF,GAAsB,GAIzB,GAAIhvF,EAAQw/B,OACX,IAAK,IAAI0vD,KAAclvF,EAAQw/B,OAAQ,CACxBj+B,KAAK+gB,UAClB4sE,EAAWpvF,KACXovF,EAAW9wF,KACX8wF,EAAWnvF,WACXmvF,EAAWlvF,WAGX+uF,GAAsB,IAKrBC,GAAuBD,KAC1BxtF,KAAKqtF,iBACLrtF,KAAKstF,uBAELttF,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU2rB,iBAG3B,2BACC5kC,KAAKqtF,iBACLrtF,KAAKstF,uBAGE,0BACP,MAAMtkF,EAAgBhJ,KAAKyD,KAAKuF,cAChC,GAAIA,EACH,IAAK,IAAInM,KAAQ5B,OAAO4W,KAAK7I,GAAgB,CAC5C,MAAMmqE,EAASnqE,EAAcnM,GAC7BmD,KAAK+gB,UAAUoyD,EAAO50E,KAAM1B,EAAMs2E,EAAO30E,WAAY20E,EAAO10E,UAIvD,uBACP,IAAImvF,EAA4B3yF,OAAO4yF,oBAAoB7tF,KAAKyD,KAAK+a,IACrExe,KAAK8tF,2BAA2BF,GAEhCA,EAA4B3yF,OAAO4yF,oBAAoB7tF,KAAKyD,KAAK+a,IAEjE,IAAK,IAAItF,KAASlZ,KAAK6zC,IAAK,CAC3B,MAAMtK,EAAoBrwB,EAAMza,QAAQ8qC,WAEJqkD,EAA0B9nC,SAAS5sC,EAAMrc,OAE3C0sC,KACjCtuC,OAAO+B,eAAegD,KAAKyD,KAAK+a,GAAItF,EAAMrc,KAAM,CAC/CK,IAAK,IACGgc,EAAM5b,MAGdywF,aAAcxkD,IAEftuC,OAAO+B,eAAegD,KAAKyD,KAAKxF,EAAGib,EAAMrc,KAAM,CAC9CK,IAAK,IACGgc,EAER60E,aAAcxkD,MAKV,2BAA2BqkD,GAClC,MAAMxwD,EAAsBp9B,KAAK0sF,aAC3BsB,EAAkB,GACxB,IAAK,IAAIC,KAA4BL,EAC/BxwD,EAAoB0oB,SAASmoC,IACjCD,EAAgB1yF,KAAK2yF,GAIvB,IAAK,IAAIC,KAAkBF,EAC1B/yF,OAAO+B,eAAegD,KAAKyD,KAAK+a,GAAI0vE,EAAgB,CACnDhxF,IAAK,OAGL6wF,cAAc,IAEf9yF,OAAO+B,eAAegD,KAAKyD,KAAKxF,EAAGiwF,EAAgB,CAClDhxF,IAAK,OAGL6wF,cAAc,IAKjB,kBACC,OAAO/tF,KAAKgtF,aAEb,UACC,OAAOhtF,KAAKysF,aAEb,gBACC,OAAOzsF,KAAK2sF,kBAEb,YACC,OAAO3sF,KAAK4sF,cAEb,YACC,OAAO5sF,KAAK0sF,aAEb,sBACC,OAAO1sF,KAAK6sF,uBAEb,kBACC,OAAO7sF,KAAK8sF,mBAUL,cAAmCjwF,EAAcS,EAAkCiB,GAC1F,MAAM2a,EAAQlZ,KAAKmuF,gBAAgBtxF,EAAM0B,GACrC2a,EACHA,EAAM3Y,IAAIjD,GAEV+F,QAAQiE,KAAK,SAASzK,yBAA4B0B,KAGpD,UAAU1B,EAAcS,GACvB0C,KAAKouF,cAAcvxF,EAAMS,EAAO,EAAAoB,UAAUI,OAE3C,YAAYjC,EAAcS,GACzB0C,KAAKouF,cAAcvxF,EAAMS,EAAO,EAAAoB,UAAUc,SAG3C,UAAU3C,GACT,OAAqC,MAA9BmD,KAAKwsF,gBAAgB3vF,GAE7B,IAAIA,GACH,OAAOmD,KAAKukC,UAAU1nC,GAEvB,IAAIA,GACH,OAAOmD,KAAKkZ,MAAMrc,GAEnB,gBAAqCA,EAAc0B,GAClD,MAAM2a,EAAQlZ,KAAKkZ,MAAMrc,GACzB,GAAIqc,GAASA,EAAM3a,MAAQA,EAC1B,OAAO2a,EAGT,UAAUrc,GACT,OAAOmD,KAAKmuF,gBAAgBtxF,EAAM,EAAA6B,UAAUI,OAE7C,kBAAkBjC,GACjB,OAAOmD,KAAKmuF,gBAAgBtxF,EAAM,EAAA6B,UAAUO,eAE7C,MAAMpC,G,MACL,OAAuB,QAAvB,EAAOmD,KAAKkZ,MAAMrc,UAAK,eAAES,MAE1B,gBAAqCT,EAAc0B,G,MAClD,OAAuC,QAAhC,EAAAyB,KAAKmuF,gBAAgBtxF,EAAM0B,UAAK,eAAEjB,MAM1C,QAAQT,GACP,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUE,SAE7C,MAAM/B,GACL,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUI,OAE7C,QAAQjC,GACP,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUM,SAE7C,OAAOnC,GACN,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUY,QAE7C,QAAQzC,GACP,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUa,SAE7C,QAAQ1C,GACP,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUc,SAE7C,MAAM3C,GACL,OAAOmD,KAAKquF,gBAAgBxxF,EAAM,EAAA6B,UAAUG,OAG7C,MAAMhC,GACL,MAAMoB,EAAI+B,KAAKwsF,gBAAgB3vF,GAC/B,OAAS,MAALoB,EACIA,GAEPoF,QAAQiE,KACP,0BAA0BzK,cAAiBmD,KAAKyD,KAAK4E,yCACpDrI,KAAKq9B,iBACMr9B,KAAKyD,KAAK4E,eAEhB,MAcD,aAAaoiB,GACpB,MAAMvR,EAAQlZ,KAAKwsF,gBAAgB/hE,GACnC,IAAIvR,EAmBH,MAAM,IAAIw2B,MAAM,UAAUjlB,6BAAsCzqB,KAAKyD,KAAK4E,eAb1E,GALIrI,KAAKgtF,cACRhtF,KAAKgtF,aAAankE,mBAAmB7oB,KAAKwsF,gBAAgB/hE,IAE3DvR,EAAM6P,SAAS,aACR/oB,KAAKwsF,gBAAgB/hE,GACxBvR,EAAM6yE,aAAe7yE,EAAM4P,WAC9B,IAAK,IAAIwqB,KAAap6B,EAAM4P,WAAY,CACvC,MAAMwlE,EAAah7C,EAAUz2C,YACtBmD,KAAKwsF,gBAAgB8B,IAchC,UACC/vF,EACA1B,EACA2B,EACAC,EAAwB,IAExB,MAAM8qC,EAAW9qC,EAAe,QAAK,GACL,IAA5BuB,KAAKusF,oBAAiChjD,GACzClmC,QAAQiE,KACP,QAAQtH,KAAKyD,KAAK4E,gBACjBrI,KAAKyD,KAAKlF,gBACC1B,iDAGS,MAAnBmD,KAAKyD,KAAKL,OACbC,QAAQiE,KAAK,QAAQtH,KAAKyD,KAAK4E,gBAAgBrI,KAAKyD,KAAKlF,+BAG1D,MAAMwV,EAAc,EAAA+8C,uBAAuBvyD,GAC3C,GAAmB,MAAfwV,EAAqB,CACxB,MAAMw6E,EAAiBvuF,KAAKwsF,gBAAgB3vF,GACxC0xF,IACChlD,EAGCglD,EAAehwF,MAAQA,GAC1ByB,KAAK0tF,aAAaa,EAAe1xF,MAIlCwG,QAAQiE,KAAK,iBAAiBzK,mBAAuBmD,KAAKyD,OAG5D,MAAMyV,EAAgC,IAAInF,EAAY/T,KAAKyD,KAAKL,OAYhE,GAXA8V,EAAMza,QAAQ8B,IAAI9B,GAElBya,EAAMiH,SAAStjB,GACfqc,EAAMs6B,eAAeh1C,GACrB0a,EAAMs1E,kBACNt1E,EAAM3Y,IAAI/B,GACV0a,EAAM6P,SAAS/oB,KAAKyD,MAEpBzD,KAAKwsF,gBAAgBtzE,EAAMrc,MAAQqc,EAG/BA,EAAM6yE,aAAe7yE,EAAM4P,WAC9B,IAAK,IAAIwqB,KAAap6B,EAAM4P,WAC3B9oB,KAAKwsF,gBAAgBl5C,EAAUz2C,MAAQy2C,EAMzC,OAFAtzC,KAAK+sF,sCAAuC,EAErC7zE,GAID,iBACPlZ,KAAKysF,aAAexxF,OAAO6J,OAAO9E,KAAKwsF,iBACvCxsF,KAAK0sF,aAAezxF,OAAO4W,KAAK7R,KAAKwsF,iBACrCxsF,KAAK2sF,kBAAoB1xF,OAAO6J,OAAO9E,KAAKwsF,iBAAiBziE,OAAQ9rB,IAAOA,EAAEQ,QAAQ8qC,UACtFvpC,KAAK4sF,cAAgB3xF,OAAO6J,OAAO9E,KAAKwsF,iBAAiBziE,OAAQ9rB,GAAMA,EAAEQ,QAAQ8qC,UACjFvpC,KAAK6sF,uBAAyB5xF,OAAO6J,OAAO9E,KAAKwsF,iBAC/CziE,OAAQ9rB,IAAOA,EAAEQ,QAAQ8qC,UACzBvkC,IAAK/G,GAAMA,EAAEpB,MACfmD,KAAK8sF,mBAAqB7xF,OAAO6J,OAAO9E,KAAKwsF,iBAC3CziE,OAAQ9rB,GAAMA,EAAEQ,QAAQ8qC,UACxBvkC,IAAK/G,GAAMA,EAAEpB,MAGV,YAAYqc,G,mDAIeA,EAAMf,iBACPe,EAAM06B,UAEhC16B,EAAM8Y,OAAO9T,MAAMzd,QACtBT,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,UAAU2Y,EAAMrc,gBAAgBqc,EAAM8Y,OAAO9T,MAAMpc,eAS3E,YAAY0G,G,mDACjB,MAAMmrC,EAAW,GACjB,IAAK,IAAI74C,EAAI,EAAGA,EAAI0N,EAAOxN,OAAQF,IAC9B0N,EAAO1N,GAAGqd,UACbw7B,EAASr4C,KAAK0E,KAAKyuF,YAAYjmF,EAAO1N,WAGlCqtB,QAAQ0rB,IAAIF,GAEd3zC,KAAKyD,KAAKuuB,OAAO9T,MAAMzd,QAC1BT,KAAKyD,KAAKtC,cAAc,SAIpB,W,mDACDnB,KAAKgtF,eACJhtF,KAAKgtF,aAAa70E,UAAYnY,KAAK+sF,8CAChC/sF,KAAK0uF,YAAY1uF,KAAKysF,cAE5BzsF,KAAKgtF,aAAa90E,qBAClBlY,KAAK+sF,sCAAuC,MAU/C,4BAA4BvxC,GAC3Bx7C,KAAK2uF,yBAA2BnzC,EAEjC,uBAAuB3+C,EAAc60C,GACpC1xC,KAAK4uF,0BAA4B5uF,KAAK4uF,2BAA6B,GACnE5uF,KAAK6uF,qBAAuB7uF,KAAK6uF,sBAAwB,GAEpD7uF,KAAK4uF,0BAA0B9oC,SAASjpD,GAI5CwG,QAAQiE,KAAK,kBAAkBzK,mBAAuBmD,KAAKyD,OAH3DzD,KAAK4uF,0BAA0BtzF,KAAKuB,GACpCmD,KAAK6uF,qBAAqBvzF,KAAKo2C,IAKjC,8BACK1xC,KAAK2uF,0BACR3uF,KAAK2uF,2BAGP,0BACC,GAAI3uF,KAAK6uF,qBACR,IAAK,IAAIrzC,KAAQx7C,KAAK6uF,qBACrBrzC,O,2FCheJ,2BACA,4BAEA,2BACA,SACA,QACA,QAIA,MAAauV,UAAqB,EAAA3e,kBACjC,cACC,OAAO,EAAA1zC,UAAUE,QAGlB,+BACC,OAAI,UAAgBoB,KAAK4S,eACjB5S,KAAK4S,cAEL5S,KAAKsyC,QAAQtyC,KAAK4S,iBAAkB,EAG7C,2BACC,OAAO5S,KAAKunB,WAEb,uBACC,OAAOvnB,KAAK1C,MAEb,2BACCmqC,EACAC,GAEA,OAAOD,GAAcC,EAEtB,wBAAwBvgB,EAA6CC,GACpE,OAAOD,GAAQC,EAEhB,QAAQF,GACP,GAAI,UAAiBA,GACpB,OAAOA,EAEP,GAAI,UAAgBA,GACnB,OAAOA,GAAW,EAElB,GAAI,UAAgBA,GAAU,CAC7B,GAAI,EAAAtiB,WAAWkqF,WAAW5nE,GACzB,OAAO,EAAAtiB,WAAWmqF,WAAW7nE,GAE7B,GAAI,EAAAtiB,WAAW6vD,UAAUvtC,GAAU,CAElC,OADewtC,WAAWxtC,IACT,GAMtB,OAAO,MA9CT,kB,2FCTA,SAIA,SACA,SACA,SACA,QAEA,0BASC,YACQhO,GAAA,KAAAA,QATD,KAAA81E,iBAA2B,EAC1B,KAAAC,eAAyB,EAKzB,KAAAC,YAA0B,IAAI,EAAA18B,WAKrCxyD,KAAKmvF,mBAAqB,IAAI,EAAAC,kBAAkBpvF,KAAKkZ,OACrDlZ,KAAKqvF,wBAA0B,IAAI,EAAA/vE,uBAAuBtf,KAAKkZ,OAGhE,iBAAiBy5B,GAChB,GAAI3yC,KAAKivF,cACR,MAAM,IAAIv/C,MAAM,+BAA+B1vC,KAAKkZ,MAAM7Q,eAE3DrI,KAAKivF,eAAgB,EACrBjvF,KAAKgvF,iBAAkB,EACvBhvF,KAAKkvF,YAAclvF,KAAKkvF,aAAe,IAAI,EAAA18B,WAE3CxyD,KAAK2I,QACD3I,KAAKkZ,MAAM3a,MAAQ,EAAAG,UAAUY,OAChCU,KAAKkvF,YAAYI,kCAAkC38C,GAEnD3yC,KAAKkvF,YAAYr9B,iBAAiBlf,GAEnC3yC,KAAKmvF,mBAAmBI,WAAWvvF,KAAKkvF,aAEK,MAAzClvF,KAAKmvF,mBAAmB5xD,gBAC3Bv9B,KAAKqvF,wBAAwB52D,OAAOz4B,KAAKmvF,oBACrCnvF,KAAKqvF,wBAAwB9xD,cAChCv9B,KAAKkZ,MAAM8Y,OAAO9T,MAAM3d,IAAIP,KAAKqvF,wBAAwB9xD,gBAEzDv9B,KAAKgvF,iBAAkB,EACvBhvF,KAAKivF,eAAgB,IAMlB,mB,mDAEL,IAAIjvF,KAAKwvF,kBAWR,OAAO,IAAIrnE,QAAQ,CAACC,EAASC,KAC5BD,EAAQ,QAXT,IAEC,aADwBpoB,KAAKmvF,mBAAmBM,gBAE/C,MAAOjgF,GAIR,OAAO,IAAI2Y,QAAQ,CAACC,EAASC,IAAWD,SAS3C,QACCpoB,KAAKgvF,iBAAkB,EACvBhvF,KAAKivF,eAAgB,EAGrBjvF,KAAKqvF,wBAAwB1mF,QAE7B3I,KAAKmvF,mBAAmBxmF,QAGzB,iBACC,OAAO3I,KAAKmvF,mBAAmBp8C,WAEhC,oBACC,OAAO/yC,KAAKmvF,mBAAmB5xD,cAGxB,kBACP,OAA0Cv9B,KAAKmvF,mBAAmBO,eAmBnE,4CACC1vF,KAAK2vF,4BACJ3vF,KAAK2vF,6BAA+B,IAAI,EAAAC,0BAA0B5vF,KAAKkZ,OAExE,MAAM22E,EAAwB7vF,KAAK2vF,4BAA4BJ,WAAWvvF,KAAKkvF,aAE3EW,EACH7vF,KAAKkZ,MAAM3Y,IAAIsvF,GAEfxsF,QAAQiE,KAAK,sC,4FCpHhB,SAEA,SACA,SACA,2BAwCMwoF,EAA6C,CAClDC,YAAa,UAGd,SACMC,EAAiB/0F,OAAO4W,KAAK,EAAA0d,QAK7B0gE,EAA6C,GAzCvB,CAC3B,MACA,OACA,QACA,OACA,QACA,OACA,QACA,QACA,OACA,MACA,OACA,MACA,QACA,QACA,MACA,QACA,OACA,QACA,MACA,MACA,MACA,QACA,OACA,MACA,OACA,OACA,MACA,QAcmBruF,QAAS/E,IAC5BozF,EAA4BpzF,GAAQ,QAAQA,MAbb,CAAC,OAAQ,QAAS,QAAS,SAenC+E,QAAS/E,IAChCozF,EAA4BpzF,GAAQ,QAAQA,MAE7C5B,OAAO4W,KAAKi+E,GAA6BluF,QAAS/E,IACjD,MAAMqzF,EAAUJ,EAA4BjzF,GAC5CozF,EAA4BpzF,GAAQ,QAAQqzF,MAhBnB,CAAC,MAAO,QAAS,QAAS,UAAW,UAAW,OAAQ,SAkBhEtuF,QAAS/E,IAC1BozF,EAA4BpzF,GAAQ,aAAaA,MAElDmzF,EAAepuF,QAAS/E,IACvBozF,EAA4BpzF,GAAQ,oBAAoBA,MAlB7B,CAAC,aAoBT+E,QAAS/E,IAC5BozF,EAA4BpzF,GAAQ,eAAeA,MAGpD,MAAMszF,EAAgD,CACrDrjD,GAAI,EAAAsjD,4BAA4BtjD,IAG3BujD,EAAuC,GA3Bf,CAAC,IAAK,MAAO,OAAQ,SAAU,QAAS,KAAM,UAAW,SA4BjEzuF,QAAS/E,IAC9BwzF,EAAiBxzF,GAAQ,QAAQA,MAGlC,MAAMyzF,EAA6C,EAAAC,aAmBnD,SAEMC,EAAkC,CACvClrF,EAAG,EACHC,EAAG,EACHC,EAAG,EACHC,EAAG,EACHtI,EAAG,EACH8V,EAAG,EACH9C,EAAG,GAOJ,SAEA,SACA,SACA,QAEA,SAEA,MAAai/E,UAA0B,EAAAqB,cAgBtC,YAAmBv3E,GAClBjT,MAAMiT,GADY,KAAAA,QAbX,KAAAw3E,mCAAqC,IAAI,EAAAC,gCAGzC,KAAAC,QAAwB,GACxB,KAAAC,cAAwB,EAEzB,KAAAC,oBAA0C,GAC1C,KAAAC,uBAA0C,GAU1C,WAAW7B,GAGjB,GAFAlvF,KAAK2I,QAE4B,MAA7BumF,EAAY3xD,cAAuB,CACtC,IAIC,GAFAv9B,KAAK0wF,mCAAmC/nF,QAEpCumF,EAAYzrF,KAAM,CACrB,MAAMutF,EAAuBhxF,KAAKk+C,cAAcgxC,EAAYzrF,MACxDutF,IAAyBhxF,KAAK+yC,aACjC/yC,KAAKgxF,qBAAuBA,QAG7B3tF,QAAQiE,KAAK,uBAEb,MAAOkI,GACRnM,QAAQiE,KAAK,iCAAiCtH,KAAKkZ,MAAM7Q,eACzDhF,QAAQiE,KAAKkI,GAGd,GAAIxP,KAAKgxF,qBACR,IACChxF,KAAKixF,SAAW,IAAI,EAAAtyC,cACnB,OACA,QACA,UACA,wBACA,kCAEE3+C,KAAKu3D,wHAMP,MAAO/nD,GACRnM,QAAQiE,KAAKkI,GACbxP,KAAKi+C,UAAU,iCAGhBj+C,KAAKi+C,UAAU,sCAGhBj+C,KAAKi+C,UAAU,2BAIjB,QACCh4C,MAAM0C,QACN3I,KAAKgxF,0BAAuBzsF,EAC5BvE,KAAK4wF,QAAU,GACf5wF,KAAK6wF,cAAgB,EACrB7wF,KAAKixF,cAAW1sF,EAChBvE,KAAK8wF,oBAAsB,GAC3B9wF,KAAK+wF,uBAAyB,GAG/B,gBACC,OAAI/wF,KAAKkZ,MAAMza,QAAQizD,2BACf,iQAMH1xD,KAAK0wF,mCAAmCQ,4CACpClxF,KAAK0wF,mCAAmCS,mDAC3CnxF,KAAK0wF,mCAAmCU,2JAG9BpxF,KAAKgxF,sTAab,kGAGWhxF,KAAKgxF,4JAWzB,eACC,OAAwB,MAAjBhxF,KAAKixF,SAEb,gBAIC,GAAIjxF,KAAKixF,SAAU,CAClBjxF,KAAKqxF,cAEL,MAAMC,EAAO,CACZ9kF,KAAM,EAAAuX,SACNwtE,OAAQ,EAAA3sF,YAGT,OADe5E,KAAKixF,SAASK,EAAMtxF,KAAKkZ,MAAOlZ,KAAK4wF,QAAS5wF,KAAK69C,8BAU1D,wBAAwBp6C,GACjC,MAAM+tF,EAAmB/tF,EAAKkvD,UAAU3tD,IAAKysF,GACrCzxF,KAAKk+C,cAAcuzC,IAGrBzzC,EADSv6C,EAAKmvD,OACO/1D,KAC3B,GAAImhD,EAAa,CAEhB,MAAM0zC,EAAmBvB,EAAkBnyC,GAC3C,GAAI0zC,EACH,OAAOA,EAAiBF,GAIzB,MAAMG,EAAmB,GAAGH,EAAiBtsF,KAtLpB,QAuLnB0sF,EAAuB3B,EAA4BjyC,GACzD,GAAI4zC,EACH,MAAO,GAAGA,KAAwBD,KAKnC,GADwBrB,EAA4BtyC,GAC/B,CACpB,MAAM6zC,EAAYpuF,EAAKkvD,UAAU,GAE3Bm/B,EAAkB,UAAUN,EAAiB,KACnD,IAAIO,EACAC,EAAgB,GACpB,IACCD,EAAyB,IAAIp1C,SAASm1C,GACtCE,EAAgBD,IACf,UASF,OADA/xF,KAAKiyF,gCAAgCj0C,EAAag0C,EAAeH,GAC1D,kBAAkB7xF,KAAK6wF,oCAAoCc,QAIpE3xF,KAAKi+C,UAAU,mBAAmBD,KAEzB,0BAA0Bv6C,GAKnC,MAAO,IAAIzD,KAAKk+C,cAAcz6C,EAAK06C,SAAS16C,EAAK26C,YAAYp+C,KAAKk+C,cAAcz6C,EAAK46C,UAE5E,2BAA2B56C,GAMpC,MAAO,IAAIzD,KAAKk+C,cAAcz6C,EAAK06C,SAAS16C,EAAK26C,YAAYp+C,KAAKk+C,cAAcz6C,EAAK46C,UAE5E,0BAA0B56C,GACnC,MAAO,GAAGzD,KAAKk+C,cAAcz6C,EAAK1F,WAAWiC,KAAKk+C,cAAcz6C,EAAKzF,YAE5D,yBAAyByF,GAClC,GAxOuB,MAwOnBA,EAAK26C,SAA+B,CACvC,IACIvqC,EACA7V,EAFAk0F,EAAWzuF,EAAKyuF,SAGpB,OAAQA,EAAS3zF,MAChB,IAAK,aAEJsV,EADsCq+E,EACDr1F,KACrC,MAED,IAAK,mBAAoB,CACxB,MAAMs1F,EAAuCD,EACvCE,EAAcD,EAA2Bp0F,OACzCs0F,EAAgBF,EAA2Bn0F,SACjD6V,EAAiBu+E,EAAYv1F,KAC7BmB,EAAWq0F,EAAcx1F,KACzB,OAMF,GAAIgX,EAAgB,CAEnB,GADAA,EAAiB,EAAA9B,cAAcC,WAAW6B,GACpB,SAAlBA,EACH,MAAO,wCACD,CACN,MAAMy+E,EAAqBtyF,KAAK0wF,mCAAmC4B,mBAClEz+E,GAEK0+E,EAAYvyF,KAAK0wF,mCAAmC6B,UAAU1+E,GAEpE,GADA7T,KAAK0wF,mCAAmCvzE,IAAItJ,GACxC7V,EAAU,CAEb,MAAO,GAAGu0F,kBAA0BD,KADZ9B,EAAiBxyF,MAGzC,MAAO,GAAGu0F,kBAA0BD,MAKtC,OADAjvF,QAAQiE,KAAK,uBACN,GAGR,MAAO,GAAG7D,EAAK26C,WAAWp+C,KAAKk+C,cAAcz6C,EAAKyuF,YAI1C,iBAAiBzuF,GAC1B,MAAO,GAAGA,EAAKi7C,MAGN,oBAAoBj7C,GAE7B,GAD8BA,EAAK5G,KAAK,IACX,EAAA+gD,gBAkB5B,OAAOn6C,EAAK5G,KAlBiC,CAC7C,MAAM21F,EAAsC/uF,EAAK5G,KAAK2R,OAAO,GAGvDikF,EAAuBpC,EAAiBmC,GAC9C,GAAIC,EACH,OAAOA,EAIR,MAAMz0C,EAAc,uBAAuBw0C,IAE3C,GADgBxyF,KAAag+C,GAE5B,OAAQh+C,KAAag+C,KAErBh+C,KAAKi+C,UAAU,uBAAuBx6C,EAAK5G,SAYpC,wBAET,OADAmD,KAAK+wF,uBAAuBz1F,KAAK0E,KAAKkZ,MAAM9V,MAAMw9C,gBAAgB70B,YAC3D,oCAEE,0BAET,OADA/rB,KAAK+wF,uBAAuBz1F,KAAK0E,KAAKkZ,MAAM9V,MAAMw9C,gBAAgB70B,YAC3D,kCAEE,wBAET,OADA/rB,KAAK+wF,uBAAuBz1F,KAAK0E,KAAKkZ,MAAM9V,MAAMw9C,gBAAgB70B,YAC3D,mCAEE,yBACT,MAAO,IAAW/rB,KAAKkZ,MAAMrc,QAEpB,0BACT,OAAOmD,KAAK0yF,iBAAiB,KAEpB,0BACT,OAAO1yF,KAAK0yF,iBAAiB,KAEpB,0BACT,OAAO1yF,KAAK0yF,iBAAiB,KAMtB,iBAAiBp/C,GACxB,MACMq+C,EADmB,CAAC,EAAG,IAAWr+C,MACEpuC,KAxVhB,MA0V1B,OADAlF,KAAKiyF,gCAAgC,WAAY,GAC1C,kBAAkBjyF,KAAK6wF,oCAAoCc,OAQ3D,gCACP3zC,EACAg0C,EACAH,GAEA,MACMngD,EAAS,IAAIihD,EADQrC,EAA4BtyC,IACjBh+C,KAAKkZ,OAC3ClZ,KAAK6wF,cAAgB,EACrB7wF,KAAK4wF,QAAQ5wF,KAAK6wF,cAAgBn/C,EAElC,MAAMkhD,EAAoBlhD,EAAOmhD,gBAAgBb,GAC7CY,GACCf,GACHe,EAAkBE,cAAcjB,GAEjC7xF,KAAK8wF,oBAAoBx1F,KAAKs3F,IAE1Bf,GAAa,UAAgBG,IAChChyF,KAAKkZ,MAAM9V,MAAM+3C,yCAAyC43C,SACzD/yF,KAAKkZ,MACL24E,EACAG,IA7VL,uB,8EChIA,oCACC,UAAUz4E,GAIT,MAAO,IAHWA,EAAK,UACNA,EAAK,UACJA,EAAK,S,8ECAzB,eAEA,SACA,SACA,SACA,SAMA,SAIA,SAIA,SACA,SAKA,SACA,SACA,SACA,SAEa,EAAAg3E,aAAe,CAE3BzmB,KAAM,EAAAkpB,KACNC,GAAI,EAAAC,GACJC,SAAU,EAAAC,SACVC,QAAS,EAAAC,OACTC,MAAO,EAAAC,MACPC,SAAU,EAAAC,SACV/+E,MAAO,EAAAg/E,MACPhwF,aAAc,EAAAiwF,YAEdhwE,KAAM,EAAAiwE,KACNC,gBAAiB,EAAAC,cACjBC,WAAY,EAAAC,UACZC,UAAW,EAAAC,SACXC,QAAS,EAAAC,S,2FCnDV,QAEA,OAYMC,EAA2C,CAAC,MAAO,MAAO,OAAQ,UAClEC,EAAkB,CAAC,IAAK,IAAK,KAEnC,MAAavB,UAAa,EAAAwB,WAGzB,4BACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,yCACX,CAAC,SAAU,6BAIb,gBAAgBh7E,GACf,OAAOxZ,KAAKy0F,qCAAqCj7E,GAGlD,kBAAkBD,GACjB,IAAIjc,EAAQ,EACZ,OAAO,IAAI6qB,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,GAAmB,GAAf9O,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GACrBm7E,EAAcn7E,EAAK,GACnB85B,EAAiB95B,EAAK,GAE5B,IAAIxX,EAAsC,KAC1C,IACCA,QAAmB/B,KAAK20F,8BAA8Bn7E,GACrD,MAAOhK,GACR6Y,EAAO7Y,GAEJzN,IACHzE,EAAQ0C,KAAK40F,0BAA0B7yF,EAAW2yF,EAAarhD,GAC/DjrB,EAAQ9qB,SAGT8qB,EAAQ,OAKH,0BACPrmB,EACA2yF,EACArhD,GAEA,GAAIihD,EAAahrF,QAAQorF,IAAgB,EAAG,CAC3C,MAAM5qB,EAAO/nE,EAAU4nE,eAEvB,IAAIkrB,EAAS,IAAI,EAAAzhF,QACjB,OAAQshF,GACP,IAAK,OACJ5qB,EAAKD,QAAQgrB,GACb,MACD,IAAK,SACJ/qB,EAAKF,UAAUirB,GACf,MACD,QACCA,EAAS/qB,EAAK4qB,GAGhB,OAAIH,EAAgBjrF,QAAQ+pC,IAAmB,EAEvCwhD,EAAOxhD,IAEN,EAGT,OAAQ,GAlEX,U,oFCjBA,E,KAAA,uBAGA,QAMA,MAAa/4B,UAAyB,EAAAgE,cAMrC,YACQpF,EACA84E,EACAn4E,GAEP5T,MAAMiT,EAAM9V,MAAO,oBAJZ,KAAA8V,QACA,KAAA84E,gBACA,KAAAn4E,kBALA,KAAAi7E,+BAAiC90F,KAAK+0F,yBAAyBl3F,KAAKmC,MAW3EA,KAAKqY,oBAAoB,2BAA4BrY,KAAK80F,gCAE3D,yBAAyB/8E,GACxB,GAAIA,GAAW/X,KAAK6Z,gBAAiB,CACpC,MAAMpW,EAAOsU,EACb/X,KAAK6Z,gBAAgBm7E,wBAAwBvxF,GAC7C,MAAMwxF,EAAWj1F,KAAK6Z,gBAAgBq7E,UAEhCC,EAAUn1F,KAAKo1F,UACjBD,IACHA,EAAQ73F,MAAQ,GAAG63F,EAAQ73F,QAAQ2Q,QAAQ,GAAGjO,KAAKgyF,gBAAiBiD,GACpEE,EAAQz2C,IAAMy2C,EAAQz2C,IAAIzwC,QAAQ,GAAGjO,KAAKgyF,gBAAiBiD,IAExDj1F,KAAKkZ,MAAMoQ,uBACdtpB,KAAKkZ,MAAMoQ,sBAAsBwoC,6CAIpC,QACC9xD,KAAKq1F,gCAGN,0BACKr1F,KAAKo1F,WAAap1F,KAAK6Z,iBAC1B7Z,KAAK6Z,gBAAgBm5C,YAAYpxD,QAAS0zF,IACzC,GAAIA,EAAc,CACjB,MAAM7xF,EAAO6xF,EACT7xF,EAAKmY,iBACR5b,KAAK4oB,gBAAgBnlB,EAAKmY,gBAAgBmQ,eAO/C,cAAcqpE,GACbp1F,KAAKo1F,UAAYA,EAElB,wBAAwB3xF,GACvBzD,KAAKu1F,oBAAsB9xF,EAE5B,oBAAoBmW,GACnB5Z,KAAKw1F,gBAAkB57E,EAGxB,cACCV,EACAM,EACA/V,EACAoW,GAEA,MAAM47E,EAAW,UAAgBj8E,GAW3B6B,EAAW,IAAIf,EAAiBpB,EAAOM,EAAeK,GAC5D,GAAIpW,EACH4X,EAASq6E,wBAAwBjyF,QAEjC,IAAKgyF,EAAU,CACd,MAAM77E,EAAOJ,EACb6B,EAASs6E,oBAAoB/7E,GAG/B,OAAOyB,GAtFT,sB,2FCTA,QAKA,MAAa+3E,UAAiB,EAAAoB,WAG7B,4BACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,6BAIb,gBAAgBh7E,GACf,OAAOxZ,KAAKy0F,qCAAqCj7E,GAGlD,kBAAkBD,GACjB,OAAO,IAAI4O,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAK5C,GAAmB,GAAf9O,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GACrB85B,EAAiB95B,EAAK,GAC5B,IAAIxX,EAAsC,KAC1C,IACCA,QAAmB/B,KAAK20F,8BAA8Bn7E,GACrD,MAAOhK,GACR6Y,EAAO7Y,GAGR,GAAIzN,EAAW,CACd,MAAM+nE,EAAO/nE,EAAU4nE,eAMjBrsE,EALSwsE,EAAKl+C,IAClB7oB,QACAoa,IAAI2sD,EAAKr9D,KACToX,eAAe,IAEIwvB,GAEpBjrB,EADY,MAAT9qB,EACKA,EAGA,SAIV8qB,EAAQ,QA9CZ,c,2FCHA,QACA,SAIA,MAAa8qE,UAAW,EAAAsB,WAKvB,4BACC,MAAO,CAAC,CAAC,SAAU,kBAOpB,gBAAgBh7E,GACf,MAAMK,EAAkB,IAAI,EAAAM,eACtBjB,EAAQlZ,KAAK41F,qBAAqBp8E,EAAyBK,GACjE,OAAIX,EACIlZ,KAAKqa,kBAAkBnB,EAAOM,EAAeK,IAEpDxW,QAAQiE,KAAK,wBAEP,MAcF,kBAAkBiS,G,mDACvB,IAAI9K,EAAW,EACf,GAAmB,GAAf8K,EAAKve,OAAa,CACrB,MAAM4e,EAAOL,EAAK,GACZs8E,EAAM71F,KAAK41F,qBAAqBh8E,GACtC,GAAIi8E,EAAK,OACFA,EAAIjiD,UACV,MAAM/3C,EAASg6F,EAAIv4F,MACL,MAAVzB,IAEH4S,EAAM5S,IAKT,OAAO4S,MAlDT,Q,8ECPA,cAEA,SAIA,MAAaolF,UAAa,EAAAW,WACzB,4BACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,UAAW,kBAGd,4BACC,MAAO,CAAC,CAAC,SAAU,8BAGpB,gBAAgBh7E,GACf,MAAM/V,EAAOzD,KAAKoa,2BAA2BZ,GAG7C,GAAI/V,GAAqB,QAAbA,EAAKlF,KAAgB,CAChC,MAAMu3F,EAAcryF,EAAqBqyF,WACzC,OAAO91F,KAAKqa,kBAAkBy7E,EAAYt8E,GAE3C,OAAO,KAQR,kBAAkBD,GACjB,OAAO,IAAI4O,QAAQ,CAACC,EAASC,KAC5B,GAAmB,GAAf9O,EAAKve,QAA8B,GAAfue,EAAKve,OAAa,CACzC,MAAM4e,EAAOL,EAAK,GACZ3G,EAAgB2G,EAAK,GACrB1F,EAAiB0F,EAAK,GAEtB9V,EAAO,EAAAqW,WAAWG,UAAUja,KAAKyD,KAAMmW,GAE7C,IAAItc,EACAmG,GAAqB,QAAbA,EAAKlF,OAChBjB,EAASmG,EAAqBsyF,YAAYliF,IAM9B,MAATvW,IACHA,EAAQsV,GAETwV,EAAQ9qB,QAER8qB,EAAQ,MAjDZ,U,2FCNA,QAIA,MAAakrE,UAAe,EAAAkB,WAG3B,4BACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,2BAIb,gBAAgBh7E,GACf,OAAOxZ,KAAKy0F,qCAAqCj7E,GAG5C,kBAAkBD,G,mDACvB,IAAIjc,EAAQ,EACZ,GAAmB,GAAfic,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GACrB85B,EAAiB95B,EAAK,GACtBxX,QAAmB/B,KAAK20F,8BAA8Bn7E,GAE5D,GAAIzX,EAAW,CACd,MAAMi0F,EAAaj0F,EAAUi0F,aACzB,CAAC,EAAG,IAAK,KAAKlwC,SAASzS,GAC1B/1C,EAAQ04F,EAAW,GAEf,CAAC,EAAG,IAAK,KAAKlwC,SAASzS,KAC1B/1C,EAAQ04F,EAAW,KAKvB,OAAO14F,MAhCT,Y,8ECJA,cACA,QAEA,MAAak2F,UAAc,EAAAgB,WAK1B,4BACC,MAAO,CAAC,CAAC,SAAU,SAGpB,kBAAkBj7E,GACjB,OAAO,IAAI4O,QAAQ,CAACC,EAASC,KAC5BroB,KAAKi2F,kBAAkB18E,EAAK,IAAIgd,KAAMgM,IACrCna,EAAQma,OASX,kBAAkB1lC,GACjB,OAAO,IAAIsrB,QAAQ,CAACC,EAASC,KAI5B,IAAIka,EAEJ,IAAI,EAAAnnB,KAAK86E,qBAAqBz1F,SAK7B,OAAO2nB,EAAQ,IAJf,EAAAhN,KAAK86E,qBAAqBC,eAAet5F,EAAMmD,KAAKkZ,OACpDqpB,EAAM,EAAAnnB,KAAK86E,qBAAqBE,sBAAsBv5F,GACtDurB,EAAQma,MA/BZ,W,8ECHA,cAIA,QAGA,MAAamxD,UAAiB,EAAAc,WAC7B,4BACC,MAAO,CAAC,CAAC,SAAU,iBAGpB,gBAAgBh7E,GACf,MAAMuS,EAAa/rB,KAAKoa,2BAA2BZ,GACnD,GAAIuS,EAAY,CACf,MAAMtoB,EAAOsoB,EACb,GAAItoB,EAAKmY,gBAAiB,CACzB,MAAMy6E,EAAY5yF,EAAKmY,gBAAgBmQ,WACvC,OAAO/rB,KAAKqa,kBAAkBg8E,EAAW78E,IAG3C,OAAO,KAYR,kBAAkBD,GACjB,OAAO,IAAI4O,QAAQ,CAACC,EAASC,KAC5B,GAAmB,GAAf9O,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GACrB9V,EAAOzD,KAAK0Z,oBAAoBF,GACtC,GAAI/V,EAAM,CACT,MAAM5G,EAAO4G,EAAK5G,KAElBurB,EADc,EAAAxjB,WAAW0xF,YAAYz5F,SAGrCurB,EAAQ,QAGTA,EAAQ,MAvCZ,c,2FCPA,QAKA,MAAaurE,UAAc,EAAAa,WAC1B,4BACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,QAAS,eACV,CAAC,SAAU,mBAIb,gBAAgBh7E,GACf,OAAOxZ,KAAKy0F,qCAAqCj7E,GAGlD,kBAAkBD,GACjB,OAAO,IAAI4O,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,GAAmB,GAAf9O,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GACrBlH,EAAckH,EAAK,GACnB7E,EAAc6E,EAAK,GACzB,IAAIxX,EAAsC,KAC1C,IACCA,QAAmB/B,KAAK20F,8BAA8Bn7E,GACrD,MAAOhK,GACR6Y,EAAO7Y,GAER,GAAIzN,EAAW,CACd,MAAMzE,EAAQ0C,KAAK40F,0BAA0B7yF,EAAWsQ,EAAaqC,GACrE0T,EAAQ9qB,SAGT8qB,EAAQ,OAKX,0BAA0BrmB,EAA8BsQ,EAAqBqC,GAC5E,MAAM1T,EAAae,EAAUC,eAE7B,GAAIhB,EAAY,CACf,MAAM2T,EAAQ3T,EAAWwT,SAASE,GAElC,OAAIC,EACIA,EAAMW,aAAajD,GAEnB,EAGR,OAAO,MA/CV,W,2FCLA,QAKA,MAAauhF,UAAoB,EAAAY,WAGhC,4BACC,MAAO,CAAC,CAAC,SAAU,iBAGpB,gBAAgBh7E,GACf,OAAOxZ,KAAKy0F,qCAAqCj7E,GAGlD,kBAAkBD,GACjB,OAAO,IAAI4O,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,GAAmB,GAAf9O,EAAKve,OAAa,CACrB,MAAMwe,EAAgBD,EAAK,GAC3B,IAAIxX,EACJ,IACCA,QAAmB/B,KAAK20F,8BAA8Bn7E,GACrD,MAAOhK,GAER,YADA6Y,EAAO7Y,GAIR,GAAIzN,EAAW,CACd,MAAMzE,EAAQyE,EAAU4B,eACxBykB,EAAQ9qB,SAGT8qB,EAAQ,QA5BZ,iB,2FCLA,QAGA,MAAa2rE,UAAsB,EAAAS,WAElC,4BACC,MAAO,CAAC,CAAC,SAAU,kCAQd,kBAAkBj7E,G,mDACvB,IAAIjc,EAAQ,EACZ,GAAmB,GAAfic,EAAKve,OAAa,CAErBsC,EADeic,EAAK,GACLve,OAEhB,OAAOsC,MAjBT,mB,2FCHA,QAGA,MAAa22F,UAAkB,EAAAO,WAI9B,4BACC,MAAO,GAYF,kBAAkBj7E,G,mDACvB,IAAIjc,EAAQ,GAEZ,IAAK,IAAIm0F,KAAOl4E,EACJ,MAAPk4E,IACHA,EAAM,IAEPn0F,GAAS,GAAGm0F,IAGb,OAAOn0F,MA3BT,e,2FCHA,QAGA,MAAa62F,UAAiB,EAAAK,WAE7B,4BACC,MAAO,CACN,CAAC,SAAU,4BACX,CAAC,SAAU,0BASP,kBAAkBj7E,G,mDACvB,IAAIjc,GAAS,EACb,GAAmB,GAAfic,EAAKve,OAAa,CACrB,MAAMy3D,EAASl5C,EAAK,GACdg9E,EAAah9E,EAAK,GACxBjc,EAAQm1D,EAAOnpD,QAAQitF,GAExB,OAAOj5F,MArBT,c,2FCHA,QAGA,MAAa+2F,UAAe,EAAAG,WAE3B,4BACC,MAAO,CACN,CAAC,SAAU,4BACX,CAAC,UAAW,eACZ,CAAC,UAAW,eASR,kBAAkBj7E,G,mDACvB,IAAIjc,EAAQ,GACZ,MAAMm1D,EAASl5C,EAAK,GACdi9E,EAAcj9E,EAAK,IAAM,EAC/B,IAAIk9E,EAAal9E,EAAK,IAAM,EAI5B,OAHIk5C,IACHn1D,EAAQm1D,EAAOjkD,OAAOgoF,EAAaC,IAE7Bn5F,MAvBT,Y,8ECHA,MAAaqzF,EAEZ,eAEA,QACK3wF,KAAK02F,kBACR12F,KAAK02F,iBAAiB74E,QAGxB,0B,MACC,GAAI7d,KAAK02F,iBAAkB,CAC1B,MAAMpjE,EAAkB,GAIxB,OAHqB,QAArB,EAAAtzB,KAAK02F,wBAAgB,SAAE90F,QAASiS,IAC/Byf,EAAMh4B,KAAKq1F,EAAgCgG,sBAAsB9iF,MAE3Dyf,EAAMpuB,KAAK,OAElB,MAAO,GAGT,sB,MACC,GAAIlF,KAAK02F,iBAAkB,CAC1B,MAAMpjE,EAAkB,GAKxB,OAJqB,QAArB,EAAAtzB,KAAK02F,wBAAgB,SAAE90F,QAASiS,IAC/Byf,EAAMh4B,KAAKq1F,EAAgCiG,sBAAsB/iF,IACjEyf,EAAMh4B,KAAKq1F,EAAgCkG,kBAAkBhjF,MAEvDyf,EAAMpuB,KAAK,OAElB,MAAO,GAGT,gC,MACC,GAAIlF,KAAK02F,iBAAkB,CAC1B,MAAMI,EAAsB,GAK5B,OAJqB,QAArB,EAAA92F,KAAK02F,wBAAgB,SAAE90F,QAASiS,IAC/B,MAAMihB,EAAW67D,EAAgCoG,cAAcljF,GAC/DijF,EAAUx7F,KAAKw5B,KAETgiE,EAAU5xF,KAAK,QAEtB,MAAO,OAIT,IAAI2O,GACH7T,KAAK02F,iBAAmB12F,KAAK02F,kBAAoB,IAAI7sC,IACrD7pD,KAAK02F,iBAAiBv5E,IAAItJ,GAG3B,6BAA6BA,GAE5B,MAAO,SADe7T,KAAK+2F,cAAcljF,2CAC6BA,MAEvE,6BAA6BA,GAC5B,MAAMkjF,EAAgB/2F,KAAK+2F,cAAcljF,GAEzC,MAAO,SADoB7T,KAAKsyF,mBAAmBz+E,QACXkjF,aAEzC,yBAAyBljF,GACxB,MAAMkjF,EAAgB/2F,KAAK+2F,cAAcljF,GAEzC,MAAO,SADW7T,KAAKuyF,UAAU1+E,QACFkjF,UAGhC,qBAAqBljF,GACpB,MAAO,UAAUA,IAElB,0BAA0BA,GACzB,MAAO,eAAeA,IAEvB,iBAAiBA,GAChB,MAAO,SAASA,IAEjB,mBAAmBA,GAClB,OAAO88E,EAAgC2B,mBAAmBz+E,GAE3D,UAAUA,GACT,OAAO88E,EAAgC4B,UAAU1+E,IA9EnD,qC,8ECOA,MAUA,SAEA,MAAa+7E,UAAkC,EAAAa,cAC9C,YAAmBv3E,GAClBjT,MAAMiT,GADY,KAAAA,QAInB,WAAWg2E,GACV,GAAiC,MAA7BA,EAAY3xD,eAAyB2xD,EAAYzrF,KACpD,IACC,OAAOzD,KAAKk+C,cAAcgxC,EAAYzrF,MACrC,MAAO+L,GACRxP,KAAKi+C,UAAU,gCAGhBj+C,KAAKi+C,UAAU,qBAIP,wBAAwBx6C,GACjC,MAGMkuF,EAAmB,GAHAluF,EAAKkvD,UAAU3tD,IAAKysF,GACrCzxF,KAAKk+C,cAAcuzC,IAEkBvsF,KAjCnB,QAoC1B,MAAO,GADczB,EAAKmvD,OAA2B/1D,QAC5B80F,KAEhB,yBAAyBluF,GAClC,MAAO,GAAGA,EAAK26C,WAAWp+C,KAAKk+C,cAAcz6C,EAAKyuF,YAGzC,oBAAoBzuF,GAC7B,MAAO,GAAGA,EAAK5G,QA/BjB,+B,8ECNA,+BASC,YAAmBqc,GAAA,KAAAA,QANX,KAAA89E,uBAAiC,EAEjC,KAAAlG,oBAA0C,GAQxC,UAAUhvF,GACnB9B,KAAKu9B,cAAgBv9B,KAAKu9B,eAAiBz7B,EAG5C,QACC9B,KAAKkZ,MAAMm8E,gCAEXr1F,KAAK8wF,oBAAoBlvF,QAASgxF,IACjCA,EAAkBjqF,UAEnB3I,KAAK8wF,oBAAsB,GAa5B,OAAO3B,GASNnvF,KAAKg3F,uBAAwB,EAE7Bh3F,KAAKi3F,+BAA+B9H,GACpCnvF,KAAK8wF,oBAAsB3B,EAAmB2B,oBAC9C9wF,KAAKk3F,6BAGLl3F,KAAKm3F,0BAGE,+BAA+BhI,GACtCA,EAAmB4B,uBAAuBnvF,QAAS8zB,IAClD,GAAkC,GAA9B11B,KAAKg3F,uBACsC,GAA1Ch3F,KAAKkZ,MAAM0P,gBAAgB8M,GAI9B,OAHA11B,KAAKg3F,uBAAwB,EAC7Bh3F,KAAKi+C,UAAU,0DACfj+C,KAAK2I,UAMD,6BACP3I,KAAK8wF,oBAAoBlvF,QAASgxF,IACC,GAA9B5yF,KAAKg3F,uBACRh3F,KAAKo3F,yBAAyBxE,KAKzB,yBAAyBA,GAChC,MAAMyE,EAAczE,EAAkB2C,oBAEtC,GAAI8B,IAMEr3F,KAAKkZ,MAAM0P,gBAAgByuE,GAI/B,OAHAr3F,KAAKg3F,uBAAwB,EAC7Bh3F,KAAKi+C,UAAU,0DACfj+C,KAAK2I,QAQA,0BACP3I,KAAK8wF,oBAAoBlvF,QAASgxF,IACjCA,EAAkBuE,+B,8EC9GrB,cACA,QAIA,MAAanmC,UAAoB,EAAAxqC,WAChC,cACC,OAAO,EAAA9nB,UAAUC,OAElB,+BACC,OAAOqB,KAAK4S,cAEb,2BACC,OAAO5S,KAAKunB,WAEb,uBACC,OAAOvnB,KAAK1C,MAEb,2BACCmqC,EACAC,GAEA,OAAO,EAER,wBAAwBvgB,EAA4CC,GACnE,OAAO,EAER,eACCpnB,KAAKvB,QAAQw0C,oBAvBf,iB,2FCLA,SACA,2BAEA,OACA,QAOMqkD,EAAwB,CAAC,IAAK,IAAK,KACzC,MAAarmC,UAAmB,EAAA/d,mBAAhC,c,oBACW,KAAAjsB,OAAS,IAAI,EAAA9c,MAIvB,cACC,OAAO,EAAAzL,UAAUG,MAElB,6BACC,OAAOy4F,EAER,+BACC,OAAI,UAAet3F,KAAK4S,eAChB5S,KAAK4S,cAEL5S,KAAK4S,cAAc7N,UAW5B,uBACC,OAAO/E,KAAK1C,MAAMyH,UAET,iBAAiB2iB,GAC1B,GAAIA,aAAqB,EAAAvd,MACxB,OAAOud,EAAU3kB,QAGjB,MADmC,CAAC2kB,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAI5E,2BACC+f,EACAC,GAEA,OAAID,aAAsB,EAAAt9B,MACrBu9B,aAAsB,EAAAv9B,MAClBs9B,EAAWlkB,OAAOmkB,GAElBD,EAAWtqC,GAAKuqC,EAAW,IAAMD,EAAWx0B,GAAKy0B,EAAW,IAAMD,EAAWt3B,GAAKu3B,EAAW,GAGjGA,aAAsB,EAAAv9B,MAClBs9B,EAAW,IAAMC,EAAWvqC,GAAKsqC,EAAW,IAAMC,EAAWz0B,GAAKw0B,EAAW,IAAMC,EAAWv3B,EAGpGs3B,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,GAKpG,wBAAwBvgB,EAA2CC,GAClE,OAAOD,EAAK5D,OAAO6D,GAEpB,kBACCnhB,MAAMuoF,kBACNxuF,KAAK7C,EAAI6C,KAAK8oB,WAAW,GACzB9oB,KAAKiT,EAAIjT,KAAK8oB,WAAW,GACzB9oB,KAAKmQ,EAAInQ,KAAK8oB,WAAW,GAqB1B,4BACC9oB,KAAKinB,OAAO9pB,EAAI6C,KAAK7C,EAAEG,MACvB0C,KAAKinB,OAAOhU,EAAIjT,KAAKiT,EAAE3V,MACvB0C,KAAKinB,OAAO9W,EAAInQ,KAAKmQ,EAAE7S,OAxFzB,gB,8ECZA,cACA,QAIA,MAAa4zD,UAAoB,EAAA1qC,WAChC,cACC,OAAO,EAAA9nB,UAAUK,OAElB,+BACC,OAAOiB,KAAK4S,cAEb,2BACC,OAAO5S,KAAKunB,WAEb,uBACC,OAAOvnB,KAAK1C,MAEb,2BACCmqC,EACAC,GAEA,OAAO,EAER,wBAAwBvgB,EAA4CC,GACnE,OAAO,GApBT,iB,oFCLA,E,KAAA,uBAGA,SACA,QACA,QAIA,MAAa+pC,UAAqB,EAAA/e,kBACjC,cACC,OAAO,EAAA1zC,UAAUM,QAElB,+BACC,OAAOgB,KAAK4S,cAEb,2BACC,OAAO5S,KAAK0nB,UAEb,uBACC,OAAO1nB,KAAK1C,MAGb,2BACCmqC,EACAC,GAEA,OAAOD,GAAcC,EAEtB,wBAAwBvgB,EAA6CC,GACpE,OAAOD,GAAQC,EAEhB,eAAeF,GACd,GAAI,UAAgBA,GACnB,OAAO1a,KAAKs3E,MAAM58D,GAElB,GAAI,EAAAtiB,WAAW6vD,UAAUvtC,GAAU,CAClC,MAAM5W,EAASxC,SAASoZ,GACxB,GAAI,UAAgB5W,GACnB,OAAOA,EAGT,OAAO,KAGT,QAAQ4W,GACP,MAAMrrB,EAASs1D,EAAa7e,QAAQprB,GACpC,OAAIrrB,EACImE,KAAKvB,QAAQk2D,gBAAgB94D,GAE7BA,GAzCV,kB,8ECTA,cAWA,MAAastC,EACZ,YAAoBsiC,EAAoB,EAAWxkD,EAAiB,GAAhD,KAAAwkD,YAA+B,KAAAxkD,SAEnD,UACC,MAAO,CACN7S,SAAUpU,KAAKyrE,UACfnuE,MAAO0C,KAAKinB,QAGd,eACC,OAAOjnB,KAAKyrE,UAEb,YACC,OAAOzrE,KAAKinB,OAEb,KAAKtS,GACJ3U,KAAKyrE,UAAY92D,EAAMP,SACvBpU,KAAKinB,OAAStS,EAAMrX,MAErB,QACC,MAAMqX,EAAQ,IAAIw0B,EAElB,OADAx0B,EAAMiP,KAAK5jB,MACJ2U,EAER,SAAS4iF,GACR,OAAOv3F,KAAKyrE,WAAa8rB,EAAYnjF,UAAYpU,KAAKinB,QAAUswE,EAAYj6F,MAE7E,cAAcyzE,GACb,OAAO/wE,KAAKyrE,WAAasF,EAAK38D,UAAYpU,KAAKinB,QAAU8pD,EAAKzzE,MAE/D,UAAUyzE,GACT/wE,KAAKyrE,UAAYsF,EAAK38D,SACtBpU,KAAKinB,OAAS8pD,EAAKzzE,MAEpB,sBAAsBk6F,EAAsBC,GAC3C,OAAOD,EAAMpjF,UAAYqjF,EAAMrjF,UAAYojF,EAAMl6F,OAASm6F,EAAMn6F,MAEjE,iBAAiByzE,GAChB,OAAO,IAAI5nC,EAAU4nC,EAAK38D,SAAU28D,EAAKzzE,QAI3C,IAAY2rC,EA1CZ,cA0CA,SAAYA,GACX,kBADD,CAAYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KAG7B,MAAa1B,EAGZ,YAAoBmwD,EAAyBzuD,EAAkBC,OAAgB50B,EAAuB,IAAlF,KAAAojF,iBAA2D,KAAApjF,UAC9EtU,KAAK+8E,MAAQ,EAAAh3D,UAAU4xE,eAGxB,WACC,OAAO33F,KAAK+8E,MAEb,oBACC,OAAO/8E,KAAK03F,eAEb,aACC,OAAO13F,KAAKsU,QAEb,iBAAiBy8D,GAChB,MAAMv8D,EAAS,GACf,IAAK,IAAIojF,KAAc7mB,EAAKv8D,OAC3BA,EAAOlZ,KAAK6tC,EAAU3B,UAAUowD,IAEjC,OAAO,IAAIrwD,EAAUwpC,EAAK8mB,cAAerjF,GAE1C,UACC,MAAO,CACNqjF,cAAe73F,KAAK03F,eACpBljF,OAAQxU,KAAKsU,QAAQtP,IAAK/G,GAAMA,EAAEikB,YAGpC,QACC,MAAM41E,EAAO,IAAIvwD,EAEjB,OADAuwD,EAAKl0E,KAAK5jB,MACH83F,EAER,KAAKA,GACJ93F,KAAK03F,eAAiBI,EAAKD,cAC3B,IAAIz1F,EAAQ,EACZ,IAAK,IAAIuS,KAASmjF,EAAKtjF,OAAQ,CAC9B,MAAMujF,EAAgB/3F,KAAKsU,QAAQlS,GAC/B21F,EACHA,EAAcn0E,KAAKjP,GAEnB3U,KAAKsU,QAAQhZ,KAAKqZ,EAAM5R,SAEzBX,GAAS,GAIX,SAAS41F,GACR,GAAIh4F,KAAK03F,gBAAkBM,EAAiBH,cAC3C,OAAO,EAER,MAAMI,EAAeD,EAAiBxjF,OACtC,GAAIxU,KAAKsU,QAAQtZ,QAAUi9F,EAAaj9F,OACvC,OAAO,EAER,IAAIoH,EAAQ,EACZ,IAAK,IAAIuS,KAAS3U,KAAKsU,QAAS,CAC/B,MAAMijF,EAAcU,EAAa71F,GACjC,IAAKuS,EAAMgzB,SAAS4vD,GACnB,OAAO,EAERn1F,GAAS,EAGV,OAAO,EAER,cAAc2uE,GACb,GAAI/wE,KAAK03F,gBAAkB3mB,EAAK8mB,cAC/B,OAAO,EAER,GAAI73F,KAAKsU,QAAQtZ,QAAU+1E,EAAKv8D,OAAOxZ,OACtC,OAAO,EAER,IAAIoH,EAAQ,EACZ,IAAK,IAAIuS,KAAS3U,KAAKsU,QAAS,CAC/B,MAAMijF,EAAcxmB,EAAKv8D,OAAOpS,GAChC,IAAKuS,EAAMizB,cAAc2vD,GACxB,OAAO,EAERn1F,GAAS,EAEV,OAAO,EAER,sBAAsBo1F,EAAsBC,GAC3C,GAAID,EAAMK,eAAiBJ,EAAMI,cAChC,OAAO,EAER,GAAIL,EAAMhjF,OAAOxZ,QAAUy8F,EAAMjjF,OAAOxZ,OACvC,OAAO,EAER,IAAIoH,EAAQ,EACZ,IAAK,IAAI81F,KAAUV,EAAMhjF,OAAQ,CAChC,MAAM2jF,EAASV,EAAMjjF,OAAOpS,GAC5B,IAAK+mC,EAAUivD,eAAeF,EAAQC,GACrC,OAAO,EAER/1F,GAAS,EAEV,OAAO,EAER,UAAU2uE,GACT/wE,KAAK03F,eAAiB3mB,EAAK8mB,cAE3B,IAAIz1F,EAAQ,EACZ,IAAK,IAAIw1F,KAAc7mB,EAAKv8D,OAAQ,CACnC,MAAMujF,EAAgB/3F,KAAKsU,QAAQlS,GAC/B21F,EACHA,EAAcvwD,UAAUowD,GAExB53F,KAAKsU,QAAQhZ,KAAK6tC,EAAU3B,UAAUowD,IAEvCx1F,GAAS,IAhHZ,e,8ECxDA,cACA,QAIA,MAAagvD,UAAuB,EAAA5qC,WACnC,cACC,OAAO,EAAA9nB,UAAUW,UAElB,+BACC,OAAOW,KAAK4S,cAEb,2BACC,OAAO5S,KAAKunB,WAEb,uBACC,OAAOvnB,KAAK1C,MAEb,2BACCmqC,EACAC,GAEA,OAAO,EAER,wBACCvgB,EACAC,GAEA,OAAO,GAvBT,oB,2FCLA,SAEA,2BACA,OACA,QAKMixE,EAA0B,CAAC,IAAK,KACtC,MAAahnC,UAAqB,EAAAne,mBAAlC,c,oBACW,KAAAjsB,OAAS,IAAI,EAAA4P,QAGvB,cACC,OAAO,EAAAn4B,UAAUa,QAGlB,6BACC,OAAO84F,EAER,+BACC,OAAI,UAAer4F,KAAK4S,eAChB5S,KAAK4S,cAEL5S,KAAK4S,cAAc7N,UAW5B,uBACC,OAAO/E,KAAK1C,MAAMyH,UAET,iBAAiB2iB,GAC1B,GAAIA,aAAqB,EAAAmP,QACxB,OAAOnP,EAAU3kB,QAGjB,MADmC,CAAC2kB,EAAU,GAAIA,EAAU,IAI9D,2BACC+f,EACAC,GAEA,OAAID,aAAsB,EAAA5Q,QACrB6Q,aAAsB,EAAA7Q,QAClB4Q,EAAWlkB,OAAOmkB,GAElBD,EAAWniC,GAAKoiC,EAAW,IAAMD,EAAWliC,GAAKmiC,EAAW,GAGhEA,aAAsB,EAAA7Q,QAClB4Q,EAAW,IAAMC,EAAWpiC,GAAKmiC,EAAW,IAAMC,EAAWniC,EAE7DkiC,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,GAIxE,wBAAwBvgB,EAA6CC,GACpE,OAAOD,EAAK5D,OAAO6D,GAEpB,kBACCnhB,MAAMuoF,kBACNxuF,KAAKsF,EAAItF,KAAK8oB,WAAW,GACzB9oB,KAAKuF,EAAIvF,KAAK8oB,WAAW,GAG1B,4BACC9oB,KAAKinB,OAAO3hB,EAAItF,KAAKsF,EAAEhI,MACvB0C,KAAKinB,OAAO1hB,EAAIvF,KAAKuF,EAAEjI,OAlEzB,kB,2FCVA,SACA,2BAGA,OACA,QAKMg7F,EAA0B,CAAC,IAAK,IAAK,KAC3C,MAAahnC,UAAqB,EAAApe,mBAAlC,c,oBACW,KAAAjsB,OAAS,IAAI,EAAA7T,QAIvB,cACC,OAAO,EAAA1U,UAAUc,QAElB,6BACC,OAAO84F,EAER,+BACC,OAAI,UAAet4F,KAAK4S,eAChB5S,KAAK4S,cAEL5S,KAAK4S,cAAc7N,UAW5B,uBACC,OAAO/E,KAAK1C,MAAMyH,UAET,iBAAiB2iB,GAC1B,GAAIA,aAAqB,EAAAtU,QACxB,OAAOsU,EAAU3kB,QAGjB,MADmC,CAAC2kB,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAK5E,2BACC+f,EACAC,GAEA,OAAID,aAAsB,EAAAr0B,QACrBs0B,aAAsB,EAAAt0B,QAClBq0B,EAAWlkB,OAAOmkB,GAElBD,EAAWniC,GAAKoiC,EAAW,IAAMD,EAAWliC,GAAKmiC,EAAW,IAAMD,EAAWjiC,GAAKkiC,EAAW,GAGjGA,aAAsB,EAAAt0B,QAClBq0B,EAAW,IAAMC,EAAWpiC,GAAKmiC,EAAW,IAAMC,EAAWniC,GAAKkiC,EAAW,IAAMC,EAAWliC,EAGpGiiC,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,GAKpG,wBAAwBvgB,EAA6CC,GACpE,OAAOD,EAAK5D,OAAO6D,GAEpB,kBACCnhB,MAAMuoF,kBACNxuF,KAAKsF,EAAItF,KAAK8oB,WAAW,GACzB9oB,KAAKuF,EAAIvF,KAAK8oB,WAAW,GACzB9oB,KAAKwF,EAAIxF,KAAK8oB,WAAW,GAsB1B,4BACC9oB,KAAKinB,OAAO3hB,EAAItF,KAAKsF,EAAEhI,MACvB0C,KAAKinB,OAAO1hB,EAAIvF,KAAKuF,EAAEjI,MACvB0C,KAAKinB,OAAOzhB,EAAIxF,KAAKwF,EAAElI,OA1FzB,kB,2FCXA,SAEA,2BACA,QACA,QAKMi7F,EAA0B,CAAC,IAAK,IAAK,IAAK,KAChD,MAAahnC,UAAqB,EAAAre,mBAAlC,c,oBACW,KAAAjsB,OAAS,IAAI,EAAAukD,QAKvB,cACC,OAAO,EAAA9sE,UAAUe,QAElB,6BACC,OAAO84F,EAER,+BACC,OAAI,UAAev4F,KAAK4S,eAChB5S,KAAK4S,cAEL5S,KAAK4S,cAAc7N,UAgB5B,uBACC,OAAO/E,KAAK1C,MAAMyH,UAGT,iBAAiB2iB,GAC1B,GAAIA,aAAqB,EAAA8jD,QACxB,OAAO9jD,EAAU3kB,QAGjB,MADmC,CAAC2kB,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAI1F,2BACC+f,EACAC,GAEA,OAAID,aAAsB,EAAA+jC,QACrB9jC,aAAsB,EAAA8jC,QAClB/jC,EAAWlkB,OAAOmkB,GAGxBD,EAAWniC,GAAKoiC,EAAW,IAC3BD,EAAWliC,GAAKmiC,EAAW,IAC3BD,EAAWjiC,GAAKkiC,EAAW,IAC3BD,EAAWhiC,GAAKiiC,EAAW,GAIzBA,aAAsB,EAAA8jC,QAExB/jC,EAAW,IAAMC,EAAWpiC,GAC5BmiC,EAAW,IAAMC,EAAWniC,GAC5BkiC,EAAW,IAAMC,EAAWliC,GAC5BiiC,EAAW,IAAMC,EAAWjiC,EAI5BgiC,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,GAKhC,wBAAwBvgB,EAA6CC,GACpE,OAAOD,EAAK5D,OAAO6D,GAEpB,kBACCnhB,MAAMuoF,kBACNxuF,KAAKsF,EAAItF,KAAK8oB,WAAW,GACzB9oB,KAAKuF,EAAIvF,KAAK8oB,WAAW,GACzB9oB,KAAKwF,EAAIxF,KAAK8oB,WAAW,GACzB9oB,KAAKyF,EAAIzF,KAAK8oB,WAAW,GAG1B,4BACC9oB,KAAKinB,OAAO3hB,EAAItF,KAAKsF,EAAEhI,MACvB0C,KAAKinB,OAAO1hB,EAAIvF,KAAKuF,EAAEjI,MACvB0C,KAAKinB,OAAOzhB,EAAIxF,KAAKwF,EAAElI,MACvB0C,KAAKinB,OAAOxhB,EAAIzF,KAAKyF,EAAEnI,OA5FzB,kB,8ECQA,4BACC,kB,8ECjBD,0BAEC,YAAYmG,GADJ,KAAA+0F,OAAiB,EAEzB,KAAKC,GACJz4F,KAAKw4F,OAASC,EAAYh4C,MAE3B,YACC,OAAOzgD,KAAKw4F,U,8ECPd,eACA,SACA,SAEA,qBAKC,YAAsB/0F,GAAA,KAAAA,OAJZ,KAAAi1F,aAAsC,IAAI,EAAAC,sBAAsB34F,KAAKyD,MAS/E,kBACC,OAAOzD,KAAK04F,aAOb,aACC,OAAQ14F,KAAK44F,QAAU54F,KAAK44F,SAAW,IAAI,EAAAC,iBAAoB74F,KAAKyD,MAErE,aACC,OAAuB,MAAhBzD,KAAK44F,QAOb,cACC,OAAQ54F,KAAK84F,SAAW94F,KAAK84F,UAAY,IAAI,EAAAC,kBAAqB/4F,KAAKyD,MAExE,cACC,OAAwB,MAAjBzD,KAAK84F,Y,oFCtCd,E,KAAA,uBAUA,8BAIC,YAAsBhzF,GAAA,KAAAA,QAFd,KAAAkzF,oBAAgE,IAAIzoE,IAI5E,cACC,MAAMhkB,EAAQvM,KAAK8F,MAAMjF,GAAG6G,OAAOuxF,iBACnCj5F,KAAKk5F,mBAAqB,IAAI7pD,MAAM9iC,GAQrC,qBAAqB3E,GAChB5H,KAAKk5F,mBAERl5F,KAAKk5F,mBAAmBtxF,EAAWH,aAAeG,EAKlDvE,QAAQiE,KAAK,2CAGf,wBAAwBM,GACvB,GAAI5H,KAAKk5F,mBACR,GAAItxF,EAAWH,YAAczH,KAAKk5F,mBAAmBl+F,OAAQ,CAC5DgF,KAAKk5F,mBAAmBtxF,EAAWH,kBAAelD,EAElD,IAAI40F,GAAsC,EAC1C,IAAK,IAAIr+F,EAAI8M,EAAWH,YAAa3M,EAAIkF,KAAKk5F,mBAAmBl+F,OAAQF,IACpEkF,KAAKk5F,mBAAmBp+F,KAC3Bq+F,GAAsC,GAGpCA,IACHn5F,KAAKk5F,mBAAqBl5F,KAAKk5F,mBAAmB76F,MAAM,EAAGuJ,EAAWH,mBAGvEpE,QAAQiE,KAAK,kDAAkDM,EAAWH,oBAG3EpE,QAAQiE,KAAK,2CAGf,iBAAiBlF,GAChB,GAAIpC,KAAKk5F,mBACR,OAAOl5F,KAAKk5F,mBAAmB92F,GAGjC,yBACC,OAAO,UAAepC,KAAKk5F,oBAAoB,GAMhD,oBACC,OAAOl5F,KAAKk5F,mBAQb,sBAAsBtxF,GACrB,MAAMM,EAAeN,EAAWM,aAC1BwH,EAAK9H,EAAW8H,GACtB,IAAI0pF,EAAoBp5F,KAAKg5F,oBAAoB97F,IAAIgL,GAChDkxF,IACJA,EAAoB,IAAI7oE,IACxBvwB,KAAKg5F,oBAAoBz4F,IAAI2H,EAAckxF,IAE5CA,EAAkB74F,IAAImP,EAAI9H,GAI3B,yBAAyBA,GACxB,MAAMM,EAAeN,EAAWM,aAC1BwH,EAAK9H,EAAW8H,GACtB,IAAI0pF,EAAoBp5F,KAAKg5F,oBAAoB97F,IAAIgL,GACjDkxF,GACHA,EAAkBxa,OAAOlvE,GAK3B,qBACC,IAAI9G,EAAyB,GAe7B,OAbA5I,KAAKg5F,oBAAoBp3F,QAAQ,CAACw3F,EAAmBlxF,KACpDkxF,EAAkBx3F,QAAQ,CAACgG,EAAY8H,KAClC9H,GACHgB,EAAKtN,KAAKsM,OAUNgB,K,2FClHT,4BACA,2BAGA,SAEA,QACA,QACA,QACA,SAgBA,yBAmBC,YAAsBnF,GAAA,KAAAA,OAlBd,KAAA41F,mBAAsC,GACtC,KAAAT,QAA2B,GAC3B,KAAAU,mBAA6B,EAG7B,KAAAC,kBAA4B,EAC5B,KAAAC,kBAA4B,EAC5B,KAAAC,oBAA8B,EAS9B,KAAAC,0BAAoC,EAsB5C,sBAAsBC,GACrB35F,KAAKy5F,mBAAqBE,EAEnB,qBAAqBC,GAC5B55F,KAAKu5F,kBAAoBK,EAKlB,qBAAqBX,GAC5Bj5F,KAAKw5F,kBAAoBP,EACzBj5F,KAAK65F,yBAGN,sCAAsCh9F,GACrC,GAAImD,KAAK85F,+BACR,IAAK,IAAIhmE,KAAoB9zB,KAAK85F,+BACjC,GAAIhmE,EAAiBj3B,MAAQA,EAC5B,OAAOi3B,EAKX,kCAAkCimE,GACjC/5F,KAAKs5F,mBAAoB,EACzBt5F,KAAK85F,+BAAiCC,EACtC/5F,KAAKg6F,qBAAqB,GAC1Bh6F,KAAKi6F,qBAAqBF,EAAkB/+F,QAC5CgF,KAAK65F,yBACL75F,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUihF,sBAE1B,uBACC,OAAOl6F,KAAKs5F,kBAEb,oCACC,OAAOt5F,KAAK85F,gCAAkC,GAEvC,yBACP,IAAK,IAAIh/F,EAAI,EAAGA,EAAIkF,KAAKw5F,kBAAmB1+F,IAC3CkF,KAAKq5F,mBAAmBv+F,GAAKkF,KAAKq5F,mBAAmBv+F,IAAMkF,KAAKm6F,yBAAyBr/F,GAGnF,yBAAyBsH,GAChC,MAAMg4F,EAAmB,IAAI,EAAA97E,cAActe,KAAKyD,KAAKL,MAAO,SAAShB,KAGrE,OADApC,KAAKyD,KAAKmlB,gBAAgBwxE,GACnBA,EAGR,uBACC,OAAOp6F,KAAKw5F,mBAAqB,EAElC,iBAAiB/xF,GAChB,OAAOzH,KAAKq5F,mBAAmB5xF,GAehC,UAAUmkB,EAAanf,GACX,MAAPA,IACHA,EAAMmf,GAEP5rB,KAAKg6F,qBAAqBpuE,GAC1B5rB,KAAKi6F,qBAAqBxtF,GAE1BzM,KAAKq6F,6BACLr6F,KAAKs6F,qCAEE,qCACPt6F,KAAKyD,KAAK5C,GAAGkG,YAAYC,cAwDpB,yB,mDACL,IAAIuzF,EAA0C,GAC9C,GAAIv6F,KAAKw5F,kBAAoB,EAAG,CAC/B,MAAMgB,EAAmC,GAOzC,GANAx6F,KAAK0H,SAAS9F,QAAQ,CAACsY,EAAOpf,KACzBof,GACHsgF,EAAuBl/F,KAAKR,KAI1B0/F,EAAuBx/F,OAASgF,KAAKu5F,kBACxCv5F,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,2BAE3B,GAAIi6F,EAAuBx/F,OAAS,EAAG,CACtC,MAAM24C,EAAW6mD,EAAuBx1F,IAAKyC,GACrCzH,KAAKyD,KAAK5C,GAAG6G,OAAO+yF,oBAAoBhzF,IAEhD8yF,QAAmBpyE,QAAQ0rB,IAAIF,IAIlC,OAAO4mD,KAiBF,oBAAoB9yF,G,mDACzB,MAAM1F,QAAkB/B,KAAKyD,KAAK3D,qBAAqBw2B,wBAAwB7uB,GAE/E,GAAI1F,GAAaA,EAAUC,oBAEpB,CACN,MAAM8F,EAAa9H,KAAKka,MAAMzS,GAC9B,GAAIK,EAAY,CACf,MAAM4yF,EAAsB5yF,EAAWkqB,OAAO9T,MAAMpc,QAChD44F,GACH16F,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,SAASkH,wBAAkCizF,OAIzE,OAAO34F,KAaR,sBAAsBlF,GACrB,GAAImD,KAAK85F,+BACR,IAAK,IAAIh/F,EAAI,EAAGA,EAAIkF,KAAK85F,+BAA+B9+F,OAAQF,IAC/D,GAAIkF,KAAK85F,+BAA+Bh/F,GAAG+B,MAAQA,EAClD,OAAO/B,EAIV,OAAQ,EAcT,gBAAgB4mB,GACf,GAAI,UAAgBA,GAAsB,CACzC,GAAI1hB,KAAK26F,iBACR,OAAO36F,KAAK46F,sBAAsBl5E,GAElC,MAAM,IAAIguB,MAAM,QAAQ1vC,KAAKyD,KAAK4E,mCAGnC,OAAOqZ,EAIT,UAAUA,EAAsCje,EAAgBke,EAAwC,GACvG,MAAMla,EAAczH,KAAK2H,gBAAgB+Z,IAAwB,EACjE,GAAIja,EAAc,EAAG,CACpB,MAAM3F,EAAU,kBAAkB4f,eAAiC1hB,KAAKyD,KAAK4E,cAE7E,MADAhF,QAAQiE,KAAKxF,GACP,IAAI4tC,MAAM5tC,GAGjB,IAAIoG,EAAe,EACnB,GAAIzE,GACCA,EAAK5C,GAAGC,QAAQ+5F,oBAEnB3yF,EAAezE,EAAK5C,GAAGC,QAAQ4uD,iBAAiB/tC,GAC5B,MAAhBzZ,GAAwBA,EAAe,GAE1C,YADA7E,QAAQiE,KAAK,QAAQ7D,EAAK4E,6CAA6CsZ,KAU1E,MAAMy4E,EAAmBp6F,KAAKq5F,mBAAmB5xF,GACjD,GAAwB,MAApB2yF,EAA0B,CAC7B,MAAMt4F,EAAU,uCAAuC2F,IAEvD,MADApE,QAAQiE,KAAKxF,GACP,IAAI4tC,MAAM5tC,GAGjB,GAAI2B,GAAQzD,KAAKyD,KAAK/C,QAAU+C,EAAK/C,OACpC,OAUD,MAAMo6F,EAAiB96F,KAAK44F,QAAQnxF,GACpC,IAAIq/E,EAAkC,KAClCiU,OAA6Cx2F,EAC7CvE,KAAKyD,KAAK5C,GAAGkG,cAChBg0F,EAAiB/6F,KAAKyD,KAAK5C,GAAGkG,YAAYc,iBAAiBJ,IAExDszF,IACHjU,EAAmBiU,EAAe7yF,cAG/BzE,IAASq3F,GAAkB5yF,GAAgB4+E,IAExB,MAAlBgU,GACC96F,KAAKy5F,oBACRW,EAAiBvxE,mBAAmBiyE,GAI1B,MAARr3F,EACC22F,EAAiBxxE,gBAAgBnlB,IAI/BzD,KAAKy5F,oBACTW,EAAiBvxE,mBAAmBplB,GAIjCs3F,GACHA,EAAetiF,WAAW,CAACmJ,WAAW,IAEvC5hB,KAAK44F,QAAQnxF,GAAehE,EAC5B,IAAI,EAAAu3F,eAAev3F,EAAMzD,KAAKyD,KAAMyE,EAAcT,IAElDpE,QAAQiE,KAAK,kBAAkB7D,EAAK4E,kBAAkBrI,KAAKyD,KAAK4E,gBAGjErI,KAAK44F,QAAQnxF,GAAe,KACxBszF,GACHA,EAAetiF,WAAW,CAACmJ,WAAW,KAKxC5hB,KAAKi7F,0BACLb,EAAiBniF,uBAEjBjY,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUiiF,iBAI3B,aAAaz3F,GACZ,UAAYzD,KAAK0H,SAAU,CAACwS,EAAO9X,KACrB,MAAT8X,GAAyB,MAARzW,GAChByW,EAAM4R,gBAAkBroB,EAAKqoB,eAChC9rB,KAAK4hB,UAAUxf,EAAO,QAM1B,MAAMqF,GACL,OAAOzH,KAAK44F,QAAQnxF,GAGrB,YAAY+rB,GACX,GAAIxzB,KAAK26F,iBAAkB,CAC1B,MAAMlzF,EAAczH,KAAK2H,gBAAgB6rB,GACzC,OAAOxzB,KAAK44F,QAAQnxF,GAEpB,OAAO,KAGT,6BAA6B+rB,GAC5B,GAAIxzB,KAAK26F,kBAAoB36F,KAAK85F,+BAAgC,CACjE,MAAMryF,EAAczH,KAAK2H,gBAAgB6rB,GACzC,OAAOxzB,KAAK85F,+BAA+BryF,IAG7C,gBAAgB5K,GACf,OAAOmD,KAAK46F,sBAAsB/9F,IAAS,EAE5C,UAAU4K,GACT,OAAoC,MAA7BzH,KAAK44F,QAAQnxF,GAErB,SACC,OAAOzH,KAAK44F,QAYb,kCACC,IAAIt7F,GAAQ,EACZ,IAAK,IAAIuf,KAAS7c,KAAKm7F,wBAClBt+E,GAAS,EAAAlY,eAAey2F,YAC3B99F,GAAQ,GAGV,OAAOA,EAGR,wBACC,OAAQ0C,KAAKq7F,wBAA0Br7F,KAAKq7F,yBAA2Br7F,KAAKq6F,6BAE7E,aAAaj4F,GACZ,OAAOpC,KAAK8pF,mCAAmC1nF,GAEhD,sCACC,MAAMwG,EAAO,GACPopB,EAAShyB,KAAKm7F,wBACpB,IAAK,IAAIrgG,EAAI,EAAGA,EAAIk3B,EAAOh3B,OAAQF,IAClC8N,EAAKtN,KAAK0E,KAAK8pF,mCAAmChvF,IAEnD,OAAO8N,EAER,mCAAmCxG,GAClC,MAGMya,EAHS7c,KAAKm7F,wBAGC/4F,GACrB,OAAQya,GACP,KAAK,EAAAlY,eAAe22F,OACnB,OAAO,EACR,KAAK,EAAA32F,eAAe42F,MACnB,OAAO,EACR,KAAK,EAAA52F,eAAey2F,UACnB,OAAQp7F,KAAK05F,yBAIf,OAAO,EAAA8B,WAAWC,YAAY5+E,GAI/B,2BAA2B/X,EAAkC,MAM5D,OALIA,IACH9E,KAAK07F,6BAA+B52F,GAErC9E,KAAKq7F,wBAA0Br7F,KAAK07F,8BAAgC17F,KAAK27F,uCAElE37F,KAAKq7F,wBAEL,uCACP,MAAMzyF,EAAO,GACb,IAAK,IAAI9N,EAAI,EAAGA,EAAIkF,KAAKw5F,kBAAmB1+F,IAE3C8N,EAAKtN,KAAK,EAAAqJ,eAAe22F,QAE1B,OAAO1yF,EAGR,4BAA4BiU,GAC3B7c,KAAK05F,yBAA2B78E,EAChC7c,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU2iF,gCAE1B,0BACC,OAAO57F,KAAK05F,yBAQb,sBAAsB78F,EAAc2+C,GACnCx7C,KAAK67F,iBAAmB77F,KAAK67F,kBAAoB,GACjD77F,KAAK87F,sBAAwB97F,KAAK87F,uBAAyB,GAEtD97F,KAAK87F,sBAAsBh2C,SAASjpD,GAIxCwG,QAAQiE,KAAK,kBAAkBzK,mBAAuBmD,KAAKyD,OAH3DzD,KAAK67F,iBAAiBvgG,KAAKkgD,GAC3Bx7C,KAAK87F,sBAAsBxgG,KAAKuB,IAK1B,0BACP,GAAImD,KAAK67F,iBACR,IAAK,IAAIrgD,KAAQx7C,KAAK67F,iBACrBrgD,O,8EC3gBJ,MAAaw/C,EAIZ,YACSe,EACAC,EACAC,EAAwB,EACxBC,EAAuB,GAHvB,KAAAH,YACA,KAAAC,aACA,KAAAC,gBACA,KAAAC,eAERl8F,KAAKk4D,IAAM8iC,EAAelc,WAEtB9+E,KAAK+7F,UAAUl7F,GAAGkG,aAAe/G,KAAKg8F,WAAWn7F,GAAGkG,cACvD/G,KAAK+7F,UAAUl7F,GAAGkG,YAAYo1F,sBAAsBn8F,MACpDA,KAAKg8F,WAAWn7F,GAAGkG,YAAYq1F,qBAAqBp8F,OAGtD,SACC,OAAOA,KAAKk4D,IAGb,eACC,OAAOl4D,KAAK+7F,UAEb,gBACC,OAAO/7F,KAAKg8F,WAEb,mBACC,OAAOh8F,KAAKi8F,cAEb,kBACC,OAAOj8F,KAAKk8F,aAGb,WAAWz9F,EAAgC,IACtCuB,KAAK+7F,UAAUl7F,GAAGkG,aAAe/G,KAAKg8F,WAAWn7F,GAAGkG,cACvD/G,KAAK+7F,UAAUl7F,GAAGkG,YAAYs1F,yBAAyBr8F,MACvDA,KAAKg8F,WAAWn7F,GAAGkG,YAAYu1F,wBAAwBt8F,QAG9B,IAAtBvB,EAAQmjB,WACX5hB,KAAKg8F,WAAWn7F,GAAG6G,OAAOka,UAAU5hB,KAAKk8F,aAAc,OAzC1D,mBACgB,EAAApd,SAAmB,G,2FCLnC,2BACA,2BACA,2BACA,QAMA,0BAKC,YAAoBr7E,GAAA,KAAAA,OAJZ,KAAA84F,cAAwB,EAExB,KAAAC,oBAA8B,EAatC,qBACCx8F,KAAKu8F,cAAe,EAErB,oBACCv8F,KAAKu8F,cAAe,EAGrB,kBACC,OAAOv8F,KAAKu8F,aAEb,wBACC,OAAOv8F,KAAKw8F,mBAEb,iBAAiB3/F,GAEhB,OAAOmD,KAAKy8F,uBAAuB5/F,IAAS,EAE7C,qCACC,OAAOmD,KAAK08F,iCAAmC,GAEhD,wBAAwBt6F,GACvB,GAAIpC,KAAK08F,gCACR,OAAO18F,KAAK08F,gCAAgCt6F,GAa9C,uBAAuBvF,GACtB,GAAImD,KAAK08F,gCACR,IAAK,IAAI5hG,EAAI,EAAGA,EAAIkF,KAAK08F,gCAAgC1hG,OAAQF,IAChE,GAAIkF,KAAK08F,gCAAgC5hG,GAAG+B,MAAQA,EACnD,OAAO/B,EAIV,OAAQ,EAUT,iBAAiB6mB,GAChB,OAA4B,MAAxBA,EACC,UAAgBA,GACf3hB,KAAK66F,kBACD76F,KAAKy8F,uBAAuB96E,IAEnCte,QAAQiE,KAAK,QAAQtH,KAAKyD,KAAK4E,qCACvB,GAGFsZ,GAGD,EAGT,uCAAuC9kB,GACtC,GAAImD,KAAK08F,gCACR,IAAK,IAAI5oE,KAAoB9zB,KAAK08F,gCACjC,GAAI5oE,EAAiBj3B,MAAQA,EAC5B,OAAOi3B,EAMX,mCAAmCimE,EAAmD/hF,GAAqB,GAC1GhY,KAAKw8F,oBAAqB,EAC1Bx8F,KAAK08F,gCAAkC3C,EACnC/hF,GAAahY,KAAKyD,KAAKL,OAI1BpD,KAAKyD,KAAKuU,UAAUhY,KAAKyD,MAE1BzD,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAU0jF,uBAE1B,oBACC,GAAI38F,KAAKyD,KAAK5C,GAAGkG,YAAa,CAC7B,MAAM61F,EAAiB,UACtB58F,KAAKyD,KAAK5C,GAAGkG,YACX6oD,qBACA5qD,IAAK4C,GAAgBA,EAAaA,EAAWM,aAAe,OAEzD20F,EAAgC,GAStC,OARAD,EAAeh7F,QAASQ,IACnB,UAAgBA,IACnBy6F,EAAoBvhG,KAAK8G,KAGSy6F,EAAoB73F,IAAK5C,GACrDpC,KAAKiI,+BAA+B7F,GAAOvF,MAInD,MAAO,M,8ECrHV,uBACC,kB,8ECnBD,eAGA,MAAagqC,UAAuB,EAAAzP,eACnC,YAAYnW,GACXhb,MAAMib,YAAYD,IAFpB,oB,8ECDA,2CACW,KAAA67E,wBAA0C,IAAIvsE,IACxD,cAAc9sB,GACbzD,KAAK88F,wBAAwBv8F,IAAIkD,EAAKqoB,cAAeroB,GAEtD,gBAAgBA,GACfzD,KAAK88F,wBAAwBle,OAAOn7E,EAAKqoB,eAG1C,QAAQob,EAAUC,EAA2BC,GAC5CpnC,KAAK88F,wBAAwBl7F,QAAS6B,GAASA,EAAKqsD,cAAc5oB,EAAOC,EAAQC,O,8ECVnF,4BACC,YAAoBhkC,GAAA,KAAAA,QAEZ,KAAA25F,8BAAwC,EAEhD,yBACC,OAAO/8F,KAAKoD,MAAM0Z,mBAAmBs/B,QAAUp8C,KAAK+8F,6BAGrD,kBAAkB3kF,GACjBpY,KAAK+8F,8BAA+B,EACpC3kF,IACApY,KAAK+8F,8BAA+B,K,2FCZtC,0BACC,YAAoB35F,GAAA,KAAAA,QAEpB,KAAA45F,gBAA0B,EAC1B,KAAAC,gBAA0B,EAC1B,KAAAC,sBAAgC,EAEhC,kBACCl9F,KAAKm9F,oBAAmB,GAEnB,iB,yDACCn9F,KAAKm9F,oBAAmB,MAMjB,mBAAmBtgF,G,mDAChC7c,KAAKg9F,eAAiBngF,QAChB7c,KAAKo9F,iBAAiBp9F,KAAKg9F,mBAElC,iBACC,OAAOh9F,KAAKg9F,eAEb,aACC,OAAQh9F,KAAKg9F,eAEd,oBACC,OAAOh9F,KAAKi9F,eAGP,gBAAgB1gE,G,mDACrB,GAAIv8B,KAAKi9F,iBAAmB1gE,IAC3Bv8B,KAAKi9F,eAAiB1gE,EAClBv8B,KAAKi9F,gBAAgB,CAIxB,MAAMjgF,EAAOhd,KAAKoD,MAAM4Z,KACpBA,UACGA,EAAKyhE,qBAcf,yB,MACC,IAAKz+E,KAAKk9F,qBAAsB,CAC/Bl9F,KAAKk9F,sBAAuB,EAE5B,MAAMtpB,EAASrZ,SAAS8iC,eAAe,2BACnCzpB,IACiB,QAApB,EAAAA,EAAO0pB,qBAAa,SAAEC,YAAY3pB,Q,8EC3DtC,8BAEC,cADQ,KAAA4pB,cAA4C,IAAIjtE,IAGxD,eAAerX,GACdlZ,KAAKw9F,cAAcj9F,IAAI2Y,EAAM4S,cAAe5S,GAE7C,iBAAiBA,GAChBlZ,KAAKw9F,cAAc5e,OAAO1lE,EAAM4S,eAOjC,iCAAiCroB,GAChCA,EAAKmY,gBAAgBmQ,WAAW9T,qBAAqBxU,M,8ECjBvD,eAEA,SAKA,kDACS,KAAAg6F,WAAwD,IAAIltE,IAEpE,SAASrX,EAAsBk8E,EAA4BpD,GAC1D,MAAM0L,EAA+B,IAAI,EAAAC,2BAA2BzkF,EAAO84E,GAI3E,OAFA,EAAAx8D,SAASC,uBAAuBz1B,KAAKy9F,WAAYvkF,EAAM4S,cAAe4xE,GAE/DA,EAER,iBAAiBxkF,GAChBlZ,KAAKy9F,WAAW7e,OAAO1lE,EAAM4S,eAS9B,6BAA6BroB,GAC5BzD,KAAK49F,uCAAuCn6F,GAC5C,IAAK,IAAIyV,KAASzV,EAAK+E,OAAOqrC,IAC7B7zC,KAAK69F,wCAAwC3kF,GAGvC,uCAAuCzV,GAC9C,MAAMiM,EAAKjM,EAAKqoB,cAEhB9rB,KAAKy9F,WAAW77F,QAAQ,CAACk8F,EAAoBtW,KAC5C,IAAIuW,GAAc,EAClB,IAAK,IAAIlI,KAAOiI,EACXjI,EAAImI,aAAav6F,EAAK4E,eACzB01F,GAAc,EACdlI,EAAIoI,gCAGFF,GACH/9F,KAAKy9F,WAAW7e,OAAOlvE,KAIlB,wCAAwCwJ,GAC/C,MAAMxJ,EAAKwJ,EAAM4S,cAEjB9rB,KAAKy9F,WAAW77F,QAAQ,CAACk8F,EAAoBtW,KAC5C,IAAIuW,GAAc,EAClB,IAAK,IAAIlI,KAAOiI,EACXjI,EAAImI,aAAa9kF,EAAM7Q,eAC1B01F,GAAc,EACdlI,EAAIoI,gCAGFF,GACH/9F,KAAKy9F,WAAW7e,OAAOlvE,Q,8EC7D3B,eAEA,mCACC,YAAoBwJ,EAAsEU,GAAtE,KAAAV,QAAsE,KAAAU,OAI1F,aAAaA,GAEZ,OADiB,EAAAE,WAAWsS,mBAAmBpsB,KAAKkZ,MAAMzV,KAAMzD,KAAK4Z,OAClDA,EAGpB,4C,MACiC,QAAhC,EAAA5Z,KAAKkZ,MAAMoQ,6BAAqB,SAAEwoC,4CAGnC,+BACC,MAAM53C,EAAQla,KAAKkZ,MAAM2wB,qBACzB7pC,KAAKkZ,MAAM3Y,IAAIP,KAAKkZ,MAAMtG,eAC1B5S,KAAKkZ,MAAM3Y,IAAI2Z,M,2FClBjB,4BACA,2BACA,2BACA,SACA,QAKA,wBACC,YAAoB9W,GAAA,KAAAA,QAGpB,KAAA86F,yBAAgD,GAChD,KAAAC,wCAA4F,GAE5F,OACCn+F,KAAKo+F,MAAQ,IAAI,EAAAC,mBAAmBr+F,KAAKoD,OACzCpD,KAAKo+F,MAAMpY,2BAEXhmF,KAAKo+F,MAAME,qBAGZ,WACC,OAAOt+F,KAAKo+F,MAEb,kBAAkB/uF,GACjB,MAAMF,EAAQE,EAAKT,MAAM,KAEzB,IAAI+gD,EAAQ3vD,KAAKgd,KAAKuE,WACtBouC,EAAQA,EAAM5lC,OAAQtmB,GAAS,EAAAmB,WAAWwK,iBAAiB3L,EAAK5G,KAAMsS,IACtE,MAAMlO,EAAU0uD,EAAM3qD,IAAKygD,GAAQA,EAAI1nD,QACvC,OAAO,UAAekD,GAEvB,Q,MACC,MAAMsgB,EAAWvhB,KAAKgd,KAAKuE,WAC3B,IAAK,IAAI8oD,KAAS9oD,EACY,QAA7B,EAAAvhB,KAAKgd,KAAKoE,2BAAmB,SAAEE,YAAY+oD,GAO7C,KAAKzwD,GACJ,MAAa,MAATA,EACI5Z,KAAKgd,KAELhd,KAAKgd,KAAKvZ,KAAKmW,GAGxB,YACC,IAAI+1C,EAAwB,CAAC3vD,KAAKgd,MAC9BuhF,EAAkC,CAACv+F,KAAKgd,MACxCoO,EAAQ,EACZ,KAAOmzE,EAAgBvjG,OAAS,GAAKowB,EAAQ,IAAI,CAChD,MAAM7J,EAAW,UAChBg9E,EAAgBv5F,IAAKw5F,GAChBA,EAAe5jD,mBACX4jD,EAAej9E,WAEf,KAIVouC,EAAQ,UAAcA,EAAOpuC,GAC7Bg9E,EAAkBh9E,EAClB6J,GAAS,EAEV,OAAO,UAAeukC,GAGvB,gCACC3vD,KAAKk+F,yBAA2B,GAEjC,gCAAgCz6F,GAC3BA,EAAKm3C,oBAAsBn3C,EAAK2d,sBACnCphB,KAAKk+F,yBAAyBz6F,EAAK2d,oBAAoBq9E,2BAA4B,GAGrF,0BACC,OAAOxjG,OAAO4W,KAAK7R,KAAKk+F,0BACtBjuF,OACAjL,IAAK5I,GAAMA,EAAEsiG,eAGhB,yBAAyBj7F,GACxB,MAAM8hC,EAAU9hC,EAAK+c,eACfshE,EAAYr+E,EAAKlF,KACvByB,KAAKm+F,wCAAwC54D,GAC5CvlC,KAAKm+F,wCAAwC54D,IAAY,GAC1DvlC,KAAKm+F,wCAAwC54D,GAASu8C,GACrD9hF,KAAKm+F,wCAAwC54D,GAASu8C,IAAc,GACrE9hF,KAAKm+F,wCAAwC54D,GAASu8C,GAAWr+E,EAAKqoB,eAAiBroB,EAGxF,8BAA8BA,GAC7B,MAAM8hC,EAAU9hC,EAAK+c,eACfshE,EAAYr+E,EAAKlF,YAChByB,KAAKm+F,wCAAwC54D,GAASu8C,GAAWr+E,EAAKqoB,eAG9E,mBAAmByZ,EAAsBu8C,GACxC,MAAMnyB,EAAQ,GACd,GAAI3vD,KAAKm+F,wCAAwC54D,GAAU,CAC1D,MAAMo5D,EAAe3+F,KAAKm+F,wCAAwC54D,GAASu8C,GAC3E,GAAI6c,EACH,IAAK,IAAIjvF,KAAMzU,OAAO4W,KAAK8sF,GAC1BhvC,EAAMr0D,KAAKqjG,EAAajvF,IAI3B,OAAOigD,K,2FCnHT,QAIA,SAeA,QACA,QAOA,OAEA,MAAMivC,UAAmC,EAAA91F,kBACzC,MAAMC,EAAe,IAAI61F,EAEzB,MAAaP,UAA2B,EAAAQ,qBAAxC,c,oBACC,KAAA71F,cAAgBD,EAQR,KAAAsU,QAAiB,IAAI,EAAA9R,MACrB,KAAAuzF,oBAAmD,GACnD,KAAAC,sBAAqD,GACrD,KAAAC,oBAA8C,GAE9C,KAAAC,sBAAgC,EAE9B,KAAAlgF,6BAA+B,EAAA3e,YAAYwc,IAdrD,cACC,MAAO,MAcR,kB,MACyB,QAAxB,EAAA5c,KAAKohB,2BAAmB,SAAE+zB,OAI1Bn1C,KAAKw/B,UAAU0/D,sBAAsBl/F,KAAKm/F,cAActhG,KAAKmC,OAC7DA,KAAKw/B,UAAU4/D,yBAAyBp/F,KAAKq/F,iBAAiBxhG,KAAKmC,OAQpE,qBACCA,KAAKqd,QAAQxgB,KAAO,UACpBmD,KAAKuX,OAAOghC,cAAcp7B,IAAInd,KAAKqd,SAQpC,SACC,OAAOrd,KAAKqd,QAEb,YAAgD9e,GAC/C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAkDhjB,GACjD,OAAO0H,MAAMwb,cAAcljB,GAG5B,iCACC,OAAO,EAGR,aAAakF,GACZ,MAAMiM,EAAKjM,EAAKqoB,cAChB,GAAoC,MAAhC9rB,KAAK8+F,oBAAoBpvF,GAC5B,OAAQ1P,KAAK8+F,oBAAoBpvF,GAAMjM,EAInC,gB,mDACLzD,KAAK++F,sBAAwB,GAC7B,MAAMhlD,EAAM9+C,OAAO4W,KAAK7R,KAAK8+F,qBAC7B,IAAK,IAAIpvF,KAAMqqC,EAAK,CACnB,MAAMt2C,EAAOzD,KAAK8+F,oBAAoBpvF,UAC/B1P,KAAK8+F,oBAAoBpvF,GAEhC,MAAMrH,EAAY,QAAQ5E,EAAK8Y,iBAAiB9Y,EAAK4E,cAarDrI,KAAK++F,sBAAsB12F,GAAa5E,EAGzC,MAAMkwC,EAAW14C,OAAO4W,KAAK7R,KAAK++F,uBAChC9uF,OACAjL,IAAKs6F,IACL,MAAM77F,EAAOzD,KAAK++F,sBAAsBO,GACxC,OAAOt/F,KAAKid,cAAcxZ,KAG5BzD,KAAKg/F,oBAAsBh/F,KAAKg/F,4BAA8Bh/F,KAAKu/F,oCAEnEv/F,KAAKi/F,qBAAuBx2B,YAAYC,MACxCvgD,QAAQ0rB,IAAIF,GAAUpd,KAAK,KAC1B,EAAAnb,KAAK9X,IAAI,iBAAiBtD,KAAKoD,MAAMvG,YAAY4rE,YAAYC,MAAQ1oE,KAAKi/F,6BAW5E,cAAcx7F,GACRzD,KAAKoD,MAAM0Z,mBAAmB6jE,cAIlC3gF,KAAKw/F,aAAa/7F,GAHlBzD,KAAKy/F,aAAah8F,GAmCpB,oBAAoBA,GAGnB,GAAIA,EAAKyZ,wBAAyB,CAIjC,MAAMwiF,EAAaj8F,EAAK5C,GAAG6G,OAAOwS,MAAM,GACxC,OAAIwlF,EAGIA,EAAWC,eAEX3/F,KAAKqd,QAIb,OAAO,KAIT,aAAa5Z,GASZ,GAAIA,EAAKyZ,wBAAyB,CACjC,MAAM0iF,EAAgB5/F,KAAK6/F,oBAAoBp8F,GAC3Cm8F,IAKCn8F,EAAKq8F,cAERr8F,EAAKs8F,qBAAqBH,GAG1Bn8F,EAAKu8F,8BAmBT,kBAAkBv8F,GACjBA,EAAKu8F,4BAEN,uBACC,MAAMz+E,EAAWvhB,KAAKuhB,WACtB,IAAK,IAAI8oD,KAAS9oD,EACjB,GAAI8oD,EAAM41B,0BACT,OAAO,EAGT,OAAO,EAGF,mC,mDACL,MAAMC,EAAYlgG,KAAKyhB,cAAc,OAC/B0+E,EAAqC,GAC3C,IAAK,IAAIC,KAAYF,EAAW,QACJE,EAASC,kBAEnCF,EAAWC,EAASt0E,eAAiBs0E,GAGvC,OAAOD,KAuBR,wBAAwB18F,GACvBzD,KAAKid,cAAcxZ,GAWpB,6BAA6BA,GAC5BzD,KAAKid,cAAcxZ,GAUZ,cAAcA,GACjBA,GACHzD,KAAKid,cAAcxZ,GAGb,iBAAiBA,GACpBA,GACHzD,KAAKsgG,kBAAkB78F,IA3R1B,wB,8EChCA,cACA,QACA,SAEA,SAEA,MAAao7F,UAAyD,EAAAh/F,UAAtE,c,oBACC,KAAAC,qBAAmE,IAAI,EAAAC,yBACtEC,KACA,EAAAugG,kBAGD,sBACC,OAAO,EAAAngG,YAAYoc,QAEpB,cAAc3f,GACb,OAAOoJ,MAAMoB,cAAcxK,IAV7B,yBAeA,qCAA0CgiG,K,8ECrB1C,eAGA,MAAa0B,UAAyB,EAAAnpE,eACrC,YAAYnW,GACXhb,MAAMib,YAAYD,IAFpB,sB,2FCHA,2BACA,4BACA,4BACA,SAGA,sCACS,KAAAu/E,UAAoB,EAC5B,KAAAC,YAA6B,EAC7B,KAAAC,oBAA8B,EAC9B,KAAAC,iBAAgD,GAChD,KAAAC,mBAAyC,GACzC,KAAAC,yBAA+C,GAQ/C,QAAQhkG,EAAc60C,GACrB,MAAMm7B,EAAapE,YAAYC,MAC/Bh3B,IACA,MAAMovD,EAAar4B,YAAYC,MAAQmE,EACvCxpE,QAAQC,IAAI,GAAGzG,MAASikG,KAGzB,QACM9gG,KAAKwgG,WACTxgG,KAAK2I,QACL3I,KAAKwgG,UAAW,EAChBxgG,KAAKygG,YAAch4B,YAAYC,MAC/B1oE,KAAK2gG,iBAAmB,GACxB3gG,KAAK0gG,oBAAsB1gG,KAAKygG,aAKlC,OACCzgG,KAAK2I,QAEN,QACC3I,KAAKwgG,UAAW,EAChBxgG,KAAKygG,YAAc,KACnBzgG,KAAK4gG,mBAAqB,GAC1B5gG,KAAK6gG,yBAA2B,GAChC7gG,KAAK2gG,iBAAmB,GAGzB,cACC,OAAO3gG,KAAKwgG,SAGb,sBAAsB/8F,GACrB,MAAMiM,EAAKjM,EAAKqoB,cACiB,MAA7B9rB,KAAK2gG,iBAAiBjxF,KACzB1P,KAAK2gG,iBAAiBjxF,GAAM,IAAI,EAAAqxF,gBAAgBt9F,IAEjDzD,KAAK2gG,iBAAiBjxF,GAAIsxF,mBAG3B,OAAOnkG,GACDmD,KAAKspF,SACTtpF,KAAK6oD,QAGN,MAAMo4C,EAAoBx4B,YAAYC,MAWtC,OATqC,MAAjC1oE,KAAK4gG,mBAAmB/jG,KAC3BmD,KAAK4gG,mBAAmB/jG,GAAQ,GAEjCmD,KAAK4gG,mBAAmB/jG,IAASokG,EAAoBjhG,KAAK0gG,oBACf,MAAvC1gG,KAAK6gG,yBAAyBhkG,KACjCmD,KAAK6gG,yBAAyBhkG,GAAQ,GAEvCmD,KAAK6gG,yBAAyBhkG,IAAS,EAE/BmD,KAAK0gG,oBAAsBO,EAGpC,QACCjhG,KAAKkhG,uBACLlhG,KAAKmhG,mBAGN,uBACC,IAAIC,EAAoBnmG,OAAO6J,OAAO9E,KAAK2gG,kBAC3CS,EAAoB,UAAcA,EAAoBC,IAAsBA,EAAiBC,iBAE7F,MAAMC,EAAgBH,EAAkBp8F,IAAKq8F,GAAqBA,EAAiBG,gBAEnFn+F,QAAQC,IAAI,+CAEZ,MAAMm+F,EAAgB,GAChBC,EAAuB,UAAcH,EAAgBC,IAAkBA,EAA8B,iBAC3G,IAAK,IAAIA,KAAgBE,EACxBD,EAAcnmG,KAAKkmG,GAKpB,OAFAn+F,QAAQs+F,MAAMF,GAEPF,EAGR,mBAEC,MAAMK,EAAoB,UAAa5hG,KAAK4gG,oBACtCiB,EAA0B,UAAa7hG,KAAK6gG,0BAG5CiB,EAAY,GAEZC,EAA0C,GAEhD,IAAK,IAAIllG,KAAQ5B,OAAO4W,KAAK+vF,GAAoB,CAChD,MAAMn9D,EAAWm9D,EAAkB/kG,GAGnCilG,EAAUxmG,KAAKmpC,GACoB,MAA/Bs9D,EAAkBt9D,KACrBs9D,EAAkBt9D,GAAY,IAE/Bs9D,EAAkBt9D,GAAUnpC,KAAKuB,GAGlCilG,EAAU7xF,KAAK,CAACC,EAAGC,IAAMD,EAAIC,GAC7B,MAAM6xF,EAAmB,UAAYF,GAErCz+F,QAAQC,IAAI,+CAGZ,MAAMm+F,EAAgB,GACtB,IAAK,IAAIh9D,KAAYu9D,EAAkB,CACtC,MAAM3kE,EAAQ0kE,EAAkBt9D,GAChC,IAAK,IAAI5nC,KAAQwgC,EAAO,CACvB,MAAM9wB,EAAQs1F,EAAwBhlG,GAGhColG,EAAQ,CAACx9D,WAAU5nC,OAAM0P,QAAO21F,uBAFPz9D,EAAWl4B,GAG1Ck1F,EAAcnmG,KAAK2mG,IAOrB,OADA5+F,QAAQs+F,MAAMF,GACPA,K,8ECrIT,wBAKC,YAAoB37F,GAAA,KAAAA,QAJpB,KAAA+iF,aAAuB,EACvB,KAAAsZ,iBAA2B,EAC3B,KAAAC,6BAAuC,EACvC,KAAAC,wBAAkC,EAGlC,mBACCriG,KAAK6oF,cAAgB,EACrB7oF,KAAKmiG,kBAAoBniG,KAAK8F,MAAMiW,gBAAgBumF,UACpDtiG,KAAKoiG,8BAAgCpiG,KAAK8F,MAAMiW,gBAAgBwmF,sBAChEviG,KAAKqiG,yBAA2BriG,KAAK8F,MAAMiW,gBAAgBymF,iBAG5D,sBACC,OAAOxiG,KAAKmiG,iBAEb,8BACC,OAAIniG,KAAK6oF,aAAe,EAChB7oF,KAAKmiG,iBAAmBniG,KAAK6oF,aAE7B,EAGT,kCACC,OAAO7oF,KAAKoiG,6BAEb,gDACC,OAAIpiG,KAAK6oF,aAAe,EAChB7oF,KAAKoiG,6BAA+BpiG,KAAK6oF,aAEzC,EAIT,6BACC,OAAO7oF,KAAKqiG,wBAEb,2CACC,OAAIriG,KAAK6oF,aAAe,EAChB7oF,KAAKqiG,wBAA0BriG,KAAK6oF,aAEpC,EAIT,kBACC,OAAO7oF,KAAK6oF,aAGb,eACC,MAAO,CACNxgF,UAAWrI,KAAK8F,MAAMuC,YACtBo6F,YAAaziG,KAAKyiG,YAClBnB,gBAAiBthG,KAAKshG,gBACtBoB,wBAAyB1iG,KAAK0iG,wBAC9BC,4BAA6B3iG,KAAK2iG,4BAClCC,0CAA2C5iG,KAAK4iG,0CAChDC,uBAAwB7iG,KAAK6iG,uBAC7BC,qCAAsC9iG,KAAK8iG,yC,8ECvE9C,cACA,SAQA,uBAUC,YAAoB1/F,GAAA,KAAAA,QATV,KAAA02E,KAA4B95E,KAC9B,KAAAw4F,OAAiB,EACjB,KAAAuK,MAAgB,EAChB,KAAAC,sBAAgC,EAEhC,KAAAC,aAA2B,CAAC,EAAG,KAC/B,KAAAC,oBAA0C,EAAC,GAAM,GACjD,KAAAC,UAAoB,EAG3BnjG,KAAKy6C,YAAc,IAAI,EAAAn8B,cAAclb,EAAO,mBAG7C,iBACC,OAAOpD,KAAKy6C,YAGb,YACC,OAAOz6C,KAAKw4F,OAEb,WACC,OAAOx4F,KAAK+iG,MAEb,kBACC,OAAO/iG,KAAKijG,aAEb,yBACC,OAAOjjG,KAAKkjG,oBAEb,gBAAgBE,EAAqBC,GACpCrjG,KAAKijG,aAAa,GAAKz2F,KAAKohB,MAAMw1E,GAClCpjG,KAAKijG,aAAa,GAAKz2F,KAAKohB,MAAMy1E,GAClCrjG,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAKy6C,YAAa,EAAA6oD,WAAWC,qBAEtE,uBAAuBC,EAAuBC,GAC7CzjG,KAAKkjG,oBAAoB,GAAKM,EAC9BxjG,KAAKkjG,oBAAoB,GAAKO,EAC9BzjG,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAKy6C,YAAa,EAAA6oD,WAAWC,qBAOtE,SAASn4D,EAAcs4D,GAAe,GACrC,GAAIt4D,GAAQprC,KAAK+iG,MAAO,CAGvB,GAFA/iG,KAAK+iG,MAAQ33D,EAETs4D,EAAc,CACjB,MAAMC,EAAYn3F,KAAKohB,MApDf,GAoDqB5tB,KAAK+iG,OAClC/iG,KAAKw4F,OAASmL,EAIf3jG,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAKy6C,YAAa,EAAA6oD,WAAWM,eACrE5jG,KAAKoD,MAAMuvB,oBAAoBkxE,uCAG/B7jG,KAAKoD,MAAM2wC,OAAOC,QAClBh0C,KAAK+rB,WAAW9T,uBAChBjY,KAAKoD,MAAM2wC,OAAOG,WAIpB,UAAUuM,EAAeqjD,GAAc,GAClCrjD,GAASzgD,KAAKw4F,SACjB/3C,EAAQzgD,KAAK+jG,4BAA4BtjD,KAC5BzgD,KAAKw4F,SACjBx4F,KAAKw4F,OAAS/3C,EACVqjD,GACH9jG,KAAKgkG,SAAShkG,KAAKw4F,OAzEZ,IAyE0B,IAKrC,4BACKx4F,KAAKmjG,WACHnjG,KAAKoD,MAAM4Z,KAAKinF,wBACpBjkG,KAAKkkG,kBAIR,iBACC,MAAMC,EAAkB17B,YAAYC,MAC9Bv5C,GAASg1E,EAAkBnkG,KAAKgjG,uBAAyB,IACzDoB,EAAWpkG,KAAK+iG,MAAQ5zE,EAC9BnvB,KAAKgjG,sBAAwBmB,EAC7BnkG,KAAKgkG,SAASI,GAGf,4BAA4B3jD,GAC3B,OAAIzgD,KAAKkjG,oBAAoB,IAAMziD,EAAQzgD,KAAKijG,aAAa,GACrDjjG,KAAKijG,aAAa,GAEtBjjG,KAAKkjG,oBAAoB,IAAMziD,EAAQzgD,KAAKijG,aAAa,GACrDjjG,KAAKijG,aAAa,GAEnBxiD,EAER,cACC,OAAyB,IAAlBzgD,KAAKmjG,SAEb,QACsB,GAAjBnjG,KAAKmjG,WACRnjG,KAAKmjG,UAAW,EAChBnjG,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAKy6C,YAAa,EAAA6oD,WAAWe,qBAGvE,QACuB,IAAlBrkG,KAAKmjG,WACRnjG,KAAKmjG,UAAW,EAChBnjG,KAAKgjG,sBAAwBv6B,YAAYC,MACzC1oE,KAAKoD,MAAM0e,oBAAoBC,SAAS/hB,KAAKy6C,YAAa,EAAA6oD,WAAWe,qBAGvE,oBACKrkG,KAAKskG,QACRtkG,KAAK49E,QAEL59E,KAAK29E,U,8EClIR,SAAY2lB,GACX,kDACA,sCACA,gDAHD,CAAY,EAAAA,aAAA,EAAAA,WAAU,M,8ECCtB,eAEA,4BACC,YAAoBlgG,GAAA,KAAAA,QAEpB,QAAQmhG,GAAyC,GAChD,MAAMC,EAA6C,GAC7CC,EAA8C,GAEpD,IAAK,IAAIhhG,KAAQzD,KAAKoD,MAAM+8C,iBAAiBukD,YAAa,CACzD,MAAMC,EAAkB,IAAI,EAAA/kF,eAAenc,GAC3C+gG,EAAuB/gG,EAAKqoB,eAAiB64E,EAAgBziF,QAAQqiF,GAErE,MAAM/7F,EAAS/E,EAAK+E,OAAOqrC,IAC3B,IAAK,IAAI36B,KAAS1Q,EACjBi8F,EAAwBvrF,EAAM4S,eAAiB5S,EAAMgJ,UAIvD,MAAO,CACNsiF,yBACAC,8B,8ECrBH,aAaA,2BACC,YAAoBrhG,GAAA,KAAAA,QAEZ,KAAAwhG,+BAAgE,GAChE,KAAAC,mCAAsD,KAEtD,KAAAC,YAAuB,IAAI,EAAAjuE,QAAQ,EAAG,GACtC,KAAAkuE,qCAA4E,GAC5E,KAAAC,yCAAqD,GAG7D,iCAAiCt1F,EAAY+iB,GAC5CzyB,KAAK4kG,+BAA+Bl1F,GAAM+iB,EAC1CzyB,KAAKilG,4CAEN,oCAAoCv1F,UAC5B1P,KAAK4kG,+BAA+Bl1F,GAC3C1P,KAAKilG,4CAEI,4CACTjlG,KAAK6kG,mCAAqC5pG,OAAO4W,KAAK7R,KAAK4kG,gCAErD,uCACN,MAAMx5D,EAAOprC,KAAKoD,MAAMgoC,KACxB,GAAIprC,KAAK6kG,mCACR,IAAK,IAAIn1F,KAAM1P,KAAK6kG,mCAAoC,CACtC7kG,KAAK4kG,+BAA+Bl1F,GAC5C07B,KAAK9tC,MAAQ8tC,GAMzB,uCAAuC17B,EAAY+iB,GAClDzyB,KAAK+kG,qCAAqCr1F,GAAM+iB,EAChDzyB,KAAKklG,kDACDllG,KAAK8kG,aACR9kG,KAAKmlG,qCAAqC1yE,GAG5C,0CAA0C/iB,UAClC1P,KAAK+kG,qCAAqCr1F,GACjD1P,KAAKklG,kDAEI,kDACTllG,KAAKglG,yCAA2C/pG,OAAO4W,KAAK7R,KAAK+kG,sCAElE,2CAA2C/O,GAC1Ch2F,KAAK8kG,YAAYlhF,KAAKoyE,GACtB,IAAK,IAAItmF,KAAM1P,KAAKglG,yCAA0C,CAC7D,MAAMvyE,EAAWzyB,KAAK+kG,qCAAqCr1F,GAC3D1P,KAAKmlG,qCAAqC1yE,IAG5C,qCAAqCA,GACpCA,EAASujE,WAAW14F,MAAMgI,EAAItF,KAAK8kG,YAAYx/F,EAAInH,OAAOo7C,iBAC1D9mB,EAASujE,WAAW14F,MAAMiI,EAAIvF,KAAK8kG,YAAYv/F,EAAIpH,OAAOo7C,oB,8ECtE5D,cAIA,wBACC,cAEA,KAAA2nC,iBAA2B,EAE3B,iBACC,OAAOlhF,KAAKkhF,gBAEb,qBACMlhF,KAAKkhF,kBACTlhF,KAAKkhF,iBAAkB,EACvB,EAAA9lE,KAAKZ,qBAAqBmsE,yB,+ECf7B,eACA,SACA,SACA,SACA,SACA,SAEA,QAEA,oBACC,aACC,EAAAye,YAAYrpB,IAAI,EAAA3gE,MAChB,EAAAiqF,cAActpB,IAAI,EAAA3gE,MAClB,EAAAkqF,WAAWvpB,IAAI,EAAA3gE,MACf,EAAAmqF,YAAYxpB,IAAI,EAAA3gE,MAChB,EAAAoqF,YAAYzpB,IAAI,EAAA3gE,MAChB,EAAAqqF,YAAY1pB,IAAI,EAAA3gE,S,8EChBlB,eAEA,SACA,SACA,SACA,SACA,SAWA,oBACC,WAAWsqF,GACVA,EAAK3qF,cAAc,EAAA4qF,eAAgB,EAAAnsE,aAAaE,UAChDgsE,EAAK3qF,cAAc,EAAA6qF,cAAe,EAAApsE,aAAaC,OAC/CisE,EAAK3qF,cAAc,EAAAid,YAAa,EAAAwB,aAAaC,OAC7CisE,EAAK3qF,cAAc,EAAA8qF,YAAa,EAAArsE,aAAaD,MAC7CmsE,EAAK3qF,cAAc,EAAA+qF,cAAe,EAAAtsE,aAAaD,S,2FCvBjD,SACA,QACA,QACA,QACA,OACA,QACA,OACA,QACA,OACA,OACA,QACA,OACA,QAOA,SAGA,SACA,SAaA,OAEA,SAGA,SACA,QACA,SACA,MAAMwsE,UAA+B,EAAAj9F,iBAArC,c,oBACC,KAAAktF,WAAa,EAAA1zE,YAAY/iB,QAAQ,CAAC,IAAK,OAGxC,MAAMwJ,EAAe,IAAIg9F,EAEzB,MAAaJ,UAAuB,EAAAtqE,aAApC,c,oBACC,KAAAryB,cAAgBD,EAIN,KAAAqsC,sBAENp1C,KAAKq1C,+BAaD,KAAA2wD,cAAsB,IAAI,EAAAz8F,KAAK,IAAI,EAAAu8B,oBAAoB,EAAG,IAG1D,KAAAmgE,kBAAoC,IAAI,EAAAz1E,eAAe,CAC9DiC,SAAU,GACVH,aA7C0B,gEA8C1BC,eAAgB,KAET,KAAA2zE,eAAwB,IAAI,EAAA56F,MAC5B,KAAA66F,gBAA0B,IAAI,EAAAC,OAM5B,KAAArnF,6BAA+B,EAAA3e,YAAY0G,GAjCrD,cACC,MAAO,UAMA,+BACP,MAAMotB,EAAkB,IAAI,EAAAyH,uBACtBp0B,EAAuB,IAAI,EAAA2+D,sBAA8ClmE,KAAM,EAAAqmG,wBAErF,OADA9+F,EAAqB++F,8BAA8BpyE,GAC5C3sB,EAGR,2BACC,OAAOvH,KAAKo1C,sBAmBb,kB,MACCp1C,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKuH,qBAAqB2tC,UAAUr3C,KAAKmC,KAAKuH,uBACxD,QAAxB,EAAAvH,KAAKohB,2BAAmB,SAAE+zB,OAC1Bn1C,KAAKgmG,cAAc7iG,SAAWnD,KAAKimG,kBACnCjmG,KAAKkmG,eAAe/oF,IAAInd,KAAKgmG,eAC7BhmG,KAAKmmG,gBAAgB/xF,SAAS5O,EAAI,EAOlCxF,KAAKijB,iBAAiB5K,oBACrB,+BACArY,KAAKumG,6BAA6B1oG,KAAKmC,OAExCA,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKwmG,eAAiBxmG,KAAKymG,wBAC3BzmG,KAAK0mG,UAAY1mG,KAAK2mG,iBAAiB3mG,KAAKwmG,kBAI9C,YAA+CjoG,GAC9C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAiDhjB,GAChD,OAAO0H,MAAMwb,cAAcljB,GAGpB,6BAA6BwZ,GAChCA,GAAWA,EAAQ+T,eAAiB9rB,KAAK/B,EAAE+3F,WAAWlqE,eACzD9rB,KAAK4mG,SAGC,SACP5mG,KAAKwmG,eAAiBxmG,KAAKymG,wBAC3BzmG,KAAK0mG,UAAY1mG,KAAK2mG,iBAAiB3mG,KAAKwmG,gBAC5CxmG,KAAK6mG,aAAe7mG,KAAK8mG,uBAElB,uBACP,MAAM1+D,EAAQpoC,KAAKwe,GAAGw3E,WAAW1wF,EAC3ByhG,EAAS/mG,KAAKwe,GAAGw3E,WAAWzwF,EAClC,OAAO,IAAIkjC,aAAaL,EAAQ2+D,EAAS,GAGpC,O,yDACC/mG,KAAKomE,sBAGXpmE,KAAKgnG,sBAGN,kBACC,MAAO,CACNC,SAAUjnG,KAAKknG,kBAIX,sB,mDACDlnG,KAAKuH,qBAAqB+tC,2BAGvBt1C,KAAKmnG,gBAUXnnG,KAAKuH,qBAAqBiuC,mBAGd,gB,mDACb,MAAM3jB,EAAe,EAAAC,aAAaC,kBAAkB/xB,MACpD,GAAI6xB,EAAa72B,OAAS,EAEzB,YADAgF,KAAKgyB,OAAO9T,MAAM3d,IAAI,gCAGvB,MAAMgzB,EAAc1B,EAAa,GACjC,GAAI0B,EAAa,CAChBvzB,KAAKuH,qBAAqB2pB,UAAUC,eAAe,CAACoC,UAG9CvzB,KAAKuH,qBAAqB2pB,UAAUk2E,yBAG1C,MAAMC,EAAkBrnG,KAAKuH,qBAAqB2pB,UAAUm2E,kBACtD50E,EAAWzyB,KAAKuH,qBAAqB2pB,UAAUuB,WACjD40E,GAAmB50E,IACtBzyB,KAAKknG,iBAAmBG,EACxBrnG,KAAKsnG,UAAY70E,GAKdzyB,KAAKuH,qBAAqB2pB,UAAUwB,0BACvC1yB,KAAKgyB,OAAO+xD,eAAewjB,uBAE3BvnG,KAAKgyB,OAAO+xD,eAAeyjB,yBAIzBxnG,KAAKknG,kBAAoBlnG,KAAKsnG,YACjCtnG,KAAKimG,kBAAkB1zE,eAAiBvyB,KAAKknG,iBAC7ClnG,KAAKimG,kBAAkBxzE,SAAWzyB,KAAKsnG,UACvCtnG,KAAKimG,kBAAkB/1E,aAAc,EACrClwB,KAAKimG,kBAAkBxzE,SAASujE,WAAa,CAC5C14F,MAAO0C,KAAKwe,GAAGw3E,gBAOV,iBAAiByR,GACxB,MAAMppF,EAAW,IAAI,EAAAq6B,cAAc,CAACC,WAAW,IAO/C,OANAt6B,EAASi7B,cAAcn7C,OAAOo7C,kBAE9Bl7B,EAASqpF,WAAY,EAErBrpF,EAASspF,gBAAgBF,GAElBppF,EAGF,mB,mDACL,MAAM+pB,EAAQpoC,KAAKwe,GAAGw3E,WAAW1wF,EAC3ByhG,EAAS/mG,KAAKwe,GAAGw3E,WAAWzwF,EAMlC,IAAMvF,KAAK0mG,YAAa1mG,KAAKwmG,eAC5B,OAEDxmG,KAAK0mG,UAAU7oF,QACf7d,KAAK0mG,UAAUzoF,OAAOje,KAAKkmG,eAAgBlmG,KAAKmmG,iBAIhDnmG,KAAK6mG,aAAe7mG,KAAK6mG,cAAgB7mG,KAAK8mG,uBAC9C9mG,KAAK0mG,UAAUkB,uBAAuB5nG,KAAKwmG,eAAgB,EAAG,EAAGp+D,EAAO2+D,EAAQ/mG,KAAK6mG,cAUrF,MAAMrrE,EAAU,IAAI,EAAAN,YAAYl7B,KAAK6mG,aAAcz+D,EAAO2+D,EAAQ,EAAAc,WAAY,EAAAC,iBAOxE,EAAAC,UAAUC,MAAM,KAElBxsE,EACHx7B,KAAKyjC,YAAYjI,GAEjBx7B,KAAK+b,gBAAgBoF,cAOf,wBACP,MAAM+gB,EAAQ,EAAAd,oBACRe,EAAQ,EAAAf,oBAERgB,EAAY,EAAAX,cACZY,EAAY,EAAAZ,cAYlB,OAVmB,IAAI,EAAAwmE,kBAAkBjoG,KAAKwe,GAAGw3E,WAAW1wF,EAAGtF,KAAKwe,GAAGw3E,WAAWzwF,EAAG,CACpF28B,MAAOA,EACPC,MAAOA,EACPC,UAAWA,EACXC,UAAWA,EACX6lE,OAAQ,EAAAL,WACRtpG,KAAM,sBAAsBqP,KAAKu6F,UAAUC,WAAa,EAAAhtE,cAAgB,EAAA0sE,UACxEO,eAAe,EACfC,aAAa,KApOhB,oB,8EClDA,eAGA,MAAahtE,UAAyB,EAAAlE,eAErC,YAAYnW,GACXhb,MAAMib,YAAYD,GASnB,UACC,OAAOjhB,KAAKs3B,SAEb,eACC,OAAOt3B,KAAKs3B,SAEb,sB,MACCj0B,QAAQC,IAAI,QAAStD,KAAKs3B,UAC1B,MAAMkE,EAAuB,QAAhB,EAAGx7B,KAAKs3B,gBAAQ,eAAEv0B,QAI/B,OAHIy4B,IACHA,EAAQtL,aAAc,GAEhBsL,EAGR,SACC,OAAOx7B,KAAKw7B,UAGb,QACC,GAAqB,MAAjBx7B,KAAKs3B,SACR,MAAO,CAACt3B,KAAKs3B,UAGf,aACC,OAAIt3B,KAAKs3B,UACJt3B,KAAKs3B,SAASgN,MACV,CAACtkC,KAAKs3B,SAASgN,MAAM8D,MAAOpoC,KAAKs3B,SAASgN,MAAMyiE,QAGlD,EAAE,GAAI,IA1Cf,sB,8ECHA,eACA,QAMA,MAAan9E,UAAmB,EAAA2+E,SAAhC,c,oBACW,KAAAzwC,QAAkB,EAC5B,YACC93D,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUuvF,qBACzBxoG,KAAKyD,KAAKuU,aAJZ,gB,8ECPA,eACA,QAEA,MAAayR,UAAoB,EAAA8+E,SAChC,YACCvoG,KAAKyD,KAAKqkB,KAAK,EAAA7O,UAAUwvF,uBAF3B,iB,mGCHA,QAEA,QAQA,4BACA,2BACA,2BAEA,oCAGC,YAAoBhlG,GAAA,KAAAA,OAFZ,KAAAghE,mCAA6C,EAIrD,sCACCzkE,KAAKykE,mCAAoC,EAG1C,kBACCzkE,KAAKyD,KAAK+E,OAAO82B,4BAA4Bt/B,KAAK0oG,0BAA0B7qG,KAAKmC,OAGlF,4BACC,IAAKA,KAAKykE,kCACT,OAED,MAAM19D,EAA8C,GACpD,IAAK,IAAI0jB,KAAczqB,KAAKyD,KAAK+E,OAAO60B,MAAO,CAC9C,IAAIsrE,GAAY,EAQhB,GANC3oG,KAAK4oG,wBACL5oG,KAAK4oG,uBAAuB5tG,OAAS,GACrCgF,KAAK4oG,uBAAuB9iD,SAASr7B,KAErCk+E,GAAY,GAETA,GACC3oG,KAAKyD,KAAK+E,OAAOwwB,IAAIvO,GAAa,CACrC,MAAMvR,EAAQlZ,KAAKyD,KAAK+E,OAAOtL,IAAIutB,GACnC,GAAIvR,IAAUA,EAAMwP,aAAc,CACjC,MAAMk8C,EAAkB,EAAAtgE,kCAAkC4U,EAAM3a,MAChE,GAAIqmE,EAAiB,CACpB,MAAMh9D,EAAa,IAAI,EAAAu4B,0BAA0BjnB,EAAMrc,KAAM+nE,GAC7D79D,EAAYzL,KAAKsM,MAMtB5H,KAAKyD,KAAK5C,GAAG6G,OAAO24B,kCAAkCt5B,GAGvD,0BAA0Bs2B,GACzB,OAAQr9B,KAAK4oG,uBAAyBvrE,EAGvC,0BACC,MAAMwrE,EAA4E,IAAIt4E,IAChFu4E,EAAgF,IAAIv4E,IACpF6M,EAAgCp9B,KAAKyD,KAAK+E,OAAOu0B,YACjDI,EAA6C,GAEnD,IAAK,IAAI1S,KAAc2S,EACtB,GAAIp9B,KAAKyD,KAAK+E,OAAOwwB,IAAIvO,GAAa,CACrC,MAAMvR,EAAQlZ,KAAKyD,KAAK+E,OAAOtL,IAAIutB,GAC/BvR,IACH2vF,EAAmCtoG,IAAIkqB,EAAYvR,EAAM2wB,sBACzDi/D,EAAuCvoG,IAAIkqB,EAAYvR,EAAM4wB,0BAC7D3M,EAAsBU,gBAAkBV,EAAsBU,iBAAmB,GACjFV,EAAsBU,gBAAgBviC,KAAKmvB,IAK9C,IAAK,IAAIqJ,KAAoB9zB,KAAKyD,KAAK5C,GAAG6G,OAAOmF,8BAA+B,CAC/E,MAAM4d,EAAaqJ,EAAiBj3B,KAC9BksG,EAAwBj1E,EAAiBi1E,WAC/C,IAAIvqG,EAAas1B,EAAiBt1B,WAIlC,MAAMwqG,EAAwBF,EAAuC5rG,IAAIutB,GAInEw+E,EAA0BjpG,KAAKyD,KAAKylG,uBAAuBz+E,GAiBjE,GARCjsB,EAD8B,MAA3ByqG,EACUA,EAEgB,MAAzBD,EACUA,EAEAl1E,EAAiBt1B,WAG5B,UAAes1B,EAAiBt1B,aAAe,UAAgBA,GAAa,CAC/E,MAAM+D,EAAQ,IAAI8sC,MAAMvb,EAAiBt1B,WAAWxD,QACpD,IAAK,IAAIF,EAAI,EAAGA,EAAIyH,EAAMvH,OAAQF,IACjCyH,EAAMzH,GAAK0D,EAEZA,EAAa+D,EAGI,MAAd/D,IACH2+B,EAAsBc,OAASd,EAAsBc,QAAU,GAC/Dd,EAAsBc,OAAO3iC,KAAK,CACjCuB,KAAM4tB,EACNlsB,KAAMwqG,EACNvqG,WAAY,UAAaA,GACzBC,QAAS,CACRs/B,OAAO,MAKX,IAAK/9B,KAAKyD,KAAKL,MAAM0Z,mBAAmBC,WAAY,CACnD/c,KAAKyD,KAAK+E,OAAO01B,cAAcf,GAE/B,IAAK,IAAIgsE,KAAenpG,KAAKyD,KAAK+E,OAAOu1B,MACxC,IAAKorE,EAAYzgF,aAAc,CAC9B,MAAMhB,EAAYmhF,EAAmC3rG,IAAIisG,EAAYtsG,MACjE6qB,GACHyhF,EAAY5oG,IAAImnB,Q,8ECrItB,eAGA,SAkCA,yBAEC,YAAsB5hB,GAAA,KAAAA,QAEtB,O,YACM9F,KAAKopG,WACTppG,KAAK8F,MAAM1C,MAAM+8C,iBAAiBkpD,gCAAgCrpG,KAAK8F,OAExE9F,KAAKkgD,MAAQ,CACZ3hD,KAAMyB,KAAK8F,MAAMvH,MAQlB,MAAMgiD,EAAavgD,KAAKugD,aACxB,GAAItlD,OAAO4W,KAAK0uC,GAAYvlD,OAAS,EAAG,CACvCgF,KAAKkgD,MAAa,MAAIK,EAGtB,MAAMhb,EAAwC,QAAjC,EAAGvlC,KAAK8F,MAAMsb,2BAAmB,eAAEmkB,QAC5CA,IACHvlC,KAAKkgD,MAAwB,iBAAI3a,GAuBnC,GAnBKvlC,KAAKopG,YACTppG,KAAKkgD,MAAc,OAAIlgD,KAAK49B,cAE5B59B,KAAKkgD,MAAc,OAAIlgD,KAAKspG,eAIzBtpG,KAAK8F,MAAM5F,QACdF,KAAKkgD,MAAa,MAAI,GAClBlgD,KAAK8F,MAAM5F,MAAMqpG,eACO,QAA3B,EAAIvpG,KAAK8F,MAAM5F,MAAMypB,cAAM,eAAElpB,UAC5BT,KAAKkgD,MAAa,MAAU,OAAIlgD,KAAK8F,MAAM5F,MAAMypB,OAAOlpB,QAGtDT,KAAK8F,MAAM5F,MAAMspG,gBACpBxpG,KAAKkgD,MAAa,MAAW,QAA4B,QAA3B,EAAGlgD,KAAK8F,MAAM5F,MAAMI,eAAO,eAAEG,SAIzDT,KAAK8F,MAAM80C,mBAAoB,CAClC,MAAM8V,EAA0C,QAAjC,EAAG1wD,KAAK8F,MAAMsb,2BAAmB,eAAEsvC,UAClD,GAAIA,GAAa1wD,KAAK8F,MAAMyb,WAAWvmB,OAAS,EAAG,CAElD,MAAMyuG,EAAoC,GACpCC,EAAoC,GAC1C,IAAK,IAAIC,KAAiBj5C,EAAUf,QACnC+5C,EAAaC,EAAc79E,gBAAiB,EAE7C,IAAK,IAAIu+C,KAASrqE,KAAK8F,MAAMyb,WACxB8oD,EAAMv+C,iBAAiB49E,GAC1BD,EAAkBnuG,KAAK+uE,GAGzBrqE,KAAKkgD,MAAiB,UAAIupD,EAAkBzkG,IAAKlH,GAAMA,EAAEjB,OAK3D,GAAImD,KAAK8F,MAAMjF,GAAG6G,OAAOkiG,kCAAmC,CAC3D,MAAMC,EAAW7pG,KAAK8F,MAAMjF,GAAG6G,OAAO8oD,0BAClCq5C,IACH7pG,KAAKkgD,MAA+B,wBAAI2pD,GAO1C,OAFA7pG,KAAK8pG,aAEE9pG,KAAKkgD,MAGb,UACC,MAAM1lD,EAA+B,GACrC,IAAKwF,KAAKopG,UAAW,CACpB,MAAMniG,EAAUjH,KAAK8F,MAAMmB,QAC3BzM,EAAU,IAAIyM,EAAQmN,SAASrP,UAC/B,MAAM0+E,EAAUx8E,EAAQw8E,QACpBA,IACHjpF,EAAc,QAAI,EAAAuvG,kBAAkBC,gBAAgBvmB,IAGtD,MAAMliE,EAAWvhB,KAAK8F,MAAMyb,WAS5B,OARIA,EAASvmB,OAAS,IACrBR,EAAY,MAAI,GAChB+mB,EAAS3f,QAASyoE,IACjB,MAAM4/B,EAAgB,EAAAxsE,qBAAqB6iB,cAAc+pB,GACzD7vE,EAAY,MAAE6vE,EAAMxtE,MAAQotG,EAAchjG,aAIrCzM,EAGA,UACP,OAA6B,OAAtBwF,KAAK8F,MAAMpF,QAAmBV,KAAK8F,MAAMgmB,eAAiB9rB,KAAK8F,MAAMkX,KAAK8O,cAGxE,cACT,MAAMtxB,EAAoB,GAmB1B,OAjBAwF,KAAK8F,MAAMjF,GAAG6G,OAAOA,SAAS9F,QAAQ,CAACsY,EAAOzS,KAE7C,GAAIyS,EAAO,CAEV,MAAMtS,EAAa5H,KAAK8F,MAAMjF,GAAGkG,YAAYc,iBAAiBJ,GAC9D,GAAIzH,KAAK8F,MAAMjF,GAAG6G,OAAOizF,iBAAkB,CAC1C,MAAMnnE,EAAaxzB,KAAK8F,MAAMjF,GAAG6G,OAAOmF,8BAA8BpF,GAAa5K,KAE7EqL,EAAeN,EAAWM,aAC1BC,EAAc+R,EAAMrZ,GAAGC,QAAQmH,+BAA+BC,GAAcrL,KAClFrC,EAAKc,KAAK,CAACuB,KAAM22B,EAAY/vB,KAAMyW,EAAMrd,KAAMw/B,OAAQl0B,SAEvD3N,EAAKc,KAAK4e,EAAMrd,SAKZrC,EAGE,cACT,MAAMA,EAAqD,GAE3D,IAAK,IAAIiwB,KAAczqB,KAAK8F,MAAM0C,OAAO60B,MAAO,CAC/C,MAAMnkB,EAAQlZ,KAAK8F,MAAM0C,OAAOtL,IAAIutB,GACpC,GAAIvR,IAAUA,EAAMwP,aAAc,CACjC,MAAM8U,EAAiB,EAAAC,qBAAqBC,eAAexkB,GAC3D,GAAIskB,EAAeG,SAAU,CAC5B,MAAMC,EAAcJ,EAAehjC,OACnCA,EAAK0e,EAAMrc,MAAQ+gC,IAKtB,OAAOpjC,EAGE,aACT,MAAMA,EAAyC,GAC/C,IAAK,IAAI6vE,KAASrqE,KAAK8F,MAAMyb,WAAY,CACxC,MAAM0oF,EAAgB,EAAAxsE,qBAAqB6iB,cAAc+pB,GACzD7vE,EAAK6vE,EAAMxtE,MAAQotG,EAAczvG,OAElC,OAAOA,EAGE,iB,8EChMX,eAIA,MAAamlD,UAAiC,EAAAM,kBAC7C,WAKC,IAAIjgD,KAAK0pC,wBAGR,OAAO1pC,KAAKopC,OAAOS,qBAFnB7pC,KAAKqpC,cAAyB,UAAIrpC,KAAKopC,OAAOS,sBAPjD,8B,8ECJA,eAEA,SAEA,MAAagW,UAAsC,EAAAI,kBAClD,WACC,IAAIxxC,EAAMzO,KAAKopC,OAAO1hB,UAItB,GAFAjZ,EAAM,EAAAs7F,kBAAkBC,gBAAgBv7F,IAEpCzO,KAAK0pC,wBAGR,OAAOj7B,EAFPzO,KAAKqpC,cAAyB,UAAI56B,GAPrC,mC,8ECHA,eACA,SAGA,MAAasxC,UAAgC,EAAAE,kBAC5C,WAEC,IAAIxxC,EAAMzO,KAAKopC,OAAO1hB,UAItB,GAFAjZ,EAAM,EAAAs7F,kBAAkBC,gBAAgBv7F,IAEpCzO,KAAK0pC,wBAGR,OAAOj7B,EAFPzO,KAAKqpC,cAAyB,UAAI56B,GARrC,6B,8ECLA,eAGA,MAAauxC,UAA8B,EAAAC,kBAC1C,WACC,IAAIjgD,KAAK0pC,wBAGR,OAAO1pC,KAAKopC,OAAOS,qBAFnB7pC,KAAKqpC,cAAyB,UAAIrpC,KAAKopC,OAAOS,sBAHjD,2B,2FCHA,SAGA,QACA,4BAEA,SACA,SACA,QAGA,QAEA,QACA,QAEA,QAGA,MAAaw8D,UAA+B,EAAAh2E,sBAG3C,uBACC,MAAO,CACNkC,eAAgB,UAChBD,kBAAc/tB,EACdkuB,cAAUluB,GAQZ,kBACC,OAAOvE,KAAKmyB,iBAAiBj1B,IAAI,EAAAqT,WAAW8hB,UAO7C,WACC,OAAOryB,KAAKsnG,UAMP,yB,mDACLtnG,KAAK+yB,OAAS,IAAIxC,IAClBvwB,KAAKmyB,iBAAmB,IAAI5B,IAC5B,IAAK,IAAIyC,KAAehzB,KAAKizB,aAC5B,GAAID,GAAe,EAAAziB,WAAW8hB,SAAU,CACvC,MAAMa,EAAWlzB,KAAK8qC,iBAAiBvY,eACvCvyB,KAAK+yB,OAAOxyB,IAAIyyB,EAAaE,EAAStkB,MAAM,OAG1C5O,KAAKoxB,YAAYp2B,OAAS,UAEvBgF,KAAKozB,sBAAsBpzB,KAAKoxB,aAEtCpxB,KAAKqzB,gBAGNrzB,KAAKsnG,UAAYtnG,KAAKsnG,WAAa,GACnCtnG,KAAKwyB,aAAaxyB,KAAKsnG,WAQvB,IAAK,IAAIt0E,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMK,EAAQtzB,KAAK+yB,OAAO71B,IAAI81B,GAC1BM,GACHtzB,KAAKmyB,iBAAiB5xB,IAAIyyB,EAAaM,EAAMpuB,KAAK,OAKpD,MAAM9B,EAAQpD,KAAK+wB,gBAAgB3tB,MAC7BsM,EAAK1P,KAAK+wB,gBAAgBjF,cAC5B9rB,KAAK0yB,0BACJ1yB,KAAKsnG,WACRlkG,EAAMuvB,oBAAoBC,iCAAiCljB,EAAI1P,KAAKsnG,WAGrElkG,EAAMuvB,oBAAoBE,oCAAoCnjB,MAShE,kBAAkBssB,GACjBA,EAAajb,UAAU,EAAAriB,UAAUG,MAAO,QAAS,CAAC,EAAG,EAAG,GAAI,CAACmtC,QAAQ,IACrEhQ,EAAajb,UAAU,EAAAriB,UAAUI,MAAO,QAAS,EAAG,CAACktC,QAAQ,IAE9D,mBAAmBhX,GAClBA,EAAan0B,GAAGC,QAAQqG,mCAAmC,CAC1D,IAAI,EAAAg5B,0BAA0B,eAAgB,EAAAt8B,oBAAoBI,MAClE,IAAI,EAAAk8B,0BAA0B,OAAQ,EAAAt8B,oBAAoB/E,SAU5D,wBACC,MAAO,CAAC,IAAI,EAAA2tC,aAAa,EAAAl8B,WAAW8hB,SAAU,CAAC,QAAS,SAAU,KAEnE,0BACC,MAAO,CACN,IAAI,EAAAwa,eAAe,QAAS,CAC3BvY,OAAQ,wBAET,IAAI,EAAAuY,eAAe,QAAS,CAC3BvY,OAAQ,oBACRD,QAAS,SAUF,oBAAoBrB,GAC7B,MAAO,mBAEE,kBAAkBA,GAC3B,MAAO,iBAEE,gBAAgBA,GACzB,MAAO,CAAC,mBAAoB,kBAG7B,oBAAoB+B,EAAsB/B,EAAyB8B,GAC/C,YAAf9B,GACH+B,EAAWz5B,KAAK,QAAQw5B,0EAgF1B,sBAAsBvB,EAA2B9qB,GAChD,MAAMisB,EAAc10B,KAAK84D,4BACxBvlC,EACA9qB,EAA8BgsB,qBAE/B,GAAIC,EACH,IAAK,IAAIlB,KAAckB,EAAa,CAGnC,GAFcnB,EAAY1yB,GAAG6G,OAAO+rB,YAAYD,GAErC,CACV,MAAM02E,EAAS32E,EAAYzmB,mBAAmB0mB,GAE9C,IAAIzmB,EACc,SAAdymB,IACHzmB,EAAY,sBAAsB,EAAAzE,UAAUC,IAAI2hG,MAE/B,SAAd12E,IACHzmB,EAAY,oBAAoB,EAAAzE,UAAUC,IAAI2hG,MAE3Cn9F,GACHtE,EAA8BwE,eAAesmB,EAAa,CAACxmB,MAiEhE,uBAAuBioB,EAA6BvsB,GAMnD,MAAMuqB,EAAcvqB,EAA8BgsB,oBAElD,IADsBz0B,KAAK20B,cAAc3B,GAExC,OAED,MAAM+B,EAAuB,GACvBiB,EAAqC,GAa3C,IAAK,IAAI7tB,KAAe6sB,EAAan0B,GAAGC,QAAQu0B,oBAAqB,CACpE,MAAMP,EAAWE,EAAa5sB,YAAYD,GAG1C,OAAQA,GACP,IAAK,OACJ6tB,EAAY16B,KAAK,IAAI,EAAAi6B,oBAAoBP,EAAc,EAAAnxB,oBAAoB/E,MAAOqJ,IAKlF4sB,EAAWz5B,KAAK,SAASw5B,OAAc3sB,KAQvCnI,KAAK21B,8BACL,MAED,IAAK,eACJ31B,KAAK41B,oBAAoBb,EAAY/B,EAAa8B,IA6BrDrsB,EAA8ByE,gBAAgB8nB,EAAcgB,EAAahD,GACzEvqB,EAA8BwE,eAAe+nB,EAAcD,IAnX7D,4B,2FCnBA,2BAEA,SAGA,SAEA,QACA,SACA,SACA,SACA,SAEA,SAEA,oBAQC,YAAoB+G,EAA2C/K,GAA3C,KAAA+K,aAA2C,KAAA/K,kBAP/D,KAAAroB,0BAAoD,IAAI,EAAAyhG,uBACxD,KAAAC,4BAAsC,EAGtC,KAAAr3E,OAAmD,IAAIxC,IACvD,KAAA85E,mBAA4D,IAAI95E,IAI1D,iBAAiBya,G,mDACtB,MAAMs/D,EAAiB,IAAI,EAAAC,mBAAmCvqG,KAAK87B,WAAY97B,KAAK+wB,iBACpFu5E,EAAe/jD,SAASvb,GAExB,MAAMw/D,EAA0D,IAAIj6E,IACpE,IAAK,IAAIyC,KAAehzB,KAAKizB,eAC5Bu3E,EAAqBjqG,IAAIyyB,EAAas3E,EAAeG,sBAAsBz3E,IAE5E,MAAM03E,EAAeJ,EAAeI,eACpC,IAAK,IAAI13E,KAAehzB,KAAKizB,eAAgB,CAC5C,MAAM03E,EAAwB3qG,KAAK87B,WAAW8uE,0BAA0B53E,GAexE,IAAK,IAAI+Z,KAAa49D,EAGrB,EAAAn1E,SAASC,uBAAuB+0E,EAAsBx3E,EAAa+Z,GAerE,MAAM89D,EAAwC,IAAIt6E,IAClD,IAAK,IAAI9sB,KAAQinG,EAChBG,EAAgBtqG,IAAIkD,EAAKqoB,eAAe,GAGzC,IAAK,IAAIihB,KAAa/B,EAChB6/D,EAAgB3tG,IAAI6vC,EAAUjhB,iBAClC4+E,EAAapvG,KAAKyxC,GAClB89D,EAAgBtqG,IAAIwsC,EAAUjhB,eAAe,IAG/C,IAAK,IAAIroB,KAAQinG,EAEhBjnG,EAAKqnG,aAEN,IAAK,IAAIrnG,KAAQinG,QACVjnG,EAAK+E,OAAOy+B,WAQnBjnC,KAAK+qG,+BAAiC,IAAI,EAAAC,4BACzChrG,KAAKizB,eACLjzB,KAAKizB,eAAe,IAErBjzB,KAAK2I,QACL,IAAK,IAAIqqB,KAAehzB,KAAKizB,eAAgB,CAC5C,MAAM08B,EAAQ,UAAY66C,EAAqBttG,IAAI81B,IAEnD,GADAhzB,KAAK+qG,+BAA+BE,wBAAwBj4E,GACxD28B,EACH,IAAK,IAAIlsD,KAAQksD,EAEZ3vD,KAAKoqG,4BACR3mG,EAAKynG,oBAENznG,EAAK0nG,UAAUnrG,KAAK+qG,gCASnB/qG,KAAKoqG,4BACRpqG,KAAKkrG,kBAAkBR,GAExB1qG,KAAKorG,eAAeV,MAGrB,6BACC1qG,KAAKoqG,4BAA6B,EAEnC,0BACCpqG,KAAKoqG,4BAA6B,EAGnC,eACC,OAAOpqG,KAAK87B,WAAW7I,aAGhB,QACP,IAAK,IAAID,KAAehzB,KAAKizB,eAAgB,CAC5C,MAAMo4E,EAAY,IAAI96E,IAItBvwB,KAAK+yB,OAAOxyB,IAAIyyB,EAAaq4E,GAC7BrrG,KAAKqqG,mBAAmB9pG,IAAIyyB,EAAa,IAAIzC,MAI/C,gBACC,OAAOvwB,KAAK0I,0BAA0BE,MAAQ,GAE/C,MAAMoqB,EAAyB4Y,GAC9B,OAAO5rC,KAAK+yB,OAAO71B,IAAI81B,GAAc91B,IAAI0uC,GAE1C,YACC,OAAO5rC,KAAK+yB,OAGb,kBAAkB48B,GACjB3vD,KAAK0I,0BAA0BC,QAC/B,IAAK,IAAIlF,KAAQksD,EAAO,CACvB,MAAM/yB,EAAgBn5B,EAAKm5B,gBAC3B,GAAIA,EACH,IAAK,IAAID,KAAgBC,EACxB58B,KAAK0I,0BAA0BpN,KAAKqhC,IAMxC,eAAegzB,GACd,IAAK,IAAI38B,KAAehzB,KAAKizB,eAE5BjzB,KAAKsrG,eAAe37C,EAAO38B,GAK7B,eAAe28B,EAAyB38B,GACvChzB,KAAKkN,gBAAgByiD,EAAO38B,EAAa,EAAAttB,iBAAiBU,SAAU,EAAA8mC,SAASC,sBAC7EntC,KAAKkN,gBAAgByiD,EAAO38B,EAAa,EAAAttB,iBAAiBW,QAAS,EAAA6mC,SAASG,QAC5ErtC,KAAKkN,gBAAgByiD,EAAO38B,EAAa,EAAAttB,iBAAiBY,QAAS,EAAA4mC,SAASG,QAC5ErtC,KAAKkN,gBAAgByiD,EAAO38B,EAAa,EAAAttB,iBAAiBQ,UAAW,EAAAgnC,SAASG,QAE9ErtC,KAAKurG,sCAAsC57C,EAAO38B,EAAa,EAAAka,SAASK,MAGjE,gBACPoiB,EACA38B,EACAw4E,EACA5/D,GAEA,IAAK5rC,KAAK+qG,+BACT,OAED,MAAM/0E,EAAc,GACpB,IAAK,IAAIvyB,KAAQksD,EAAO,CACvB,IAAI87C,EAAmBzrG,KAAK+qG,+BAA+B/0E,YAAYhD,EAAavvB,GACpF,GAAIgoG,EAAkB,CACrBA,EAAmBA,EAAiB1hF,OAAQntB,GAAMA,EAAE4uG,iBAAmBA,GACvE,IAAK,IAAIp2E,KAAcq2E,EACtBz1E,EAAY16B,KAAK85B,IAKpB,GAAIY,EAAYh7B,OAAS,EAAG,CAC3B,MAAM0wG,EAAa,IAAI,EAAA1lG,4BAA8CgwB,GAC/DwiC,EAAmBkzC,EAAWC,OACpC,GAAID,EAAWE,QAEd,KAAM,uBAAuBF,EAAWnuE,gBAGzC,MAAMsuE,EAA0D,IAAIt7E,IAC9D+oC,EAAiC,IAAI/oC,IAC3C,IAAK,IAAI6E,KAAcojC,EAAkB,CACxC,MAAMgvB,EAAUpyD,EAAW3xB,KAAKqoB,cAC3BwtC,EAAStgC,IAAIwuD,IACjBluB,EAAS/4D,IAAIinF,GAAS,GAEvB,EAAAhyD,SAASC,uBAAuBo2E,EAAwBrkB,EAASpyD,GAElE,MAAM02E,EAAmB9rG,KAAK+yB,OAAO71B,IAAI81B,GACzCsmC,EAAS13D,QAAQ,CAACskC,EAAkBshD,KACnC,MAAMxxD,EAAc61E,EAAuB3uG,IAAIsqF,GAC/C,GAAIxxD,EAAa,CAChB,MAAM+1E,EAAmB/1E,EAAY,GAErC,GAAI+1E,EAAkB,CACrB,MAAMtoB,EAAU,EAAAuoB,cAAcC,aAAaF,EAAiBtoG,KAAMmoC,GAClE,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAW63C,GAE7D,IAAK,IAAIruD,KAAcY,EAAa,CACnC,MAAM6hC,EAAO,EAAAm0C,cAAcE,UAAU92E,EAAWyiC,KAAMjsB,GACtD,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAWisB,GAE9D,MAAM+sB,EAAY,EAAAonB,cAAcG,oBAAoBvgE,GACpD,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAWg5C,QAMlE,sCAAsCj1B,EAAyB38B,EAAyB4Y,GAQvF,IAAIwgE,GAPJz8C,EAAQA,EAAM5lC,OAAQtmB,IACrB,GAAIzD,KAAK+qG,+BAAgC,CACxC,MAAMz3E,EAAQtzB,KAAK+qG,+BAA+Bh2E,WAAW/B,EAAavvB,GAC1E,OAAO6vB,GAASA,EAAMt4B,OAAS,MAITA,OACxB,IAAK,IAAIF,EAAI,EAAGA,EAAIsxG,EAAatxG,IAAK,CACrC,MAAMuxG,EAAUvxG,GAAK60D,EAAM30D,OAAS,EACpCgF,KAAKssG,qCAAqC38C,EAAM70D,GAAIk4B,EAAa4Y,EAAWygE,IAG9E,qCACC5oG,EACAuvB,EACA4Y,EACAygE,GAEA,IAAKrsG,KAAK+qG,+BACT,OAED,MAAMz3E,EAAQtzB,KAAK+qG,+BAA+Bh2E,WAAW/B,EAAavvB,GAE1E,GAAI6vB,GAASA,EAAMt4B,OAAS,EAAG,CAC9B,MAAM8wG,EAAmB9rG,KAAK+yB,OAAO71B,IAAI81B,GACnCywD,EAAU,EAAAuoB,cAAcC,aAAaxoG,EAAMmoC,GAMjD,GALA,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAW63C,GAC7D,UAAYnwD,GAAO1xB,QAASi2D,IAC3BA,EAAO,EAAAm0C,cAAcE,UAAUr0C,EAAMjsB,GACrC,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAWisB,KAExDjsB,GAAa,EAAAsB,SAASK,OAAQ8+D,EAAU,CAC7C,MAAMznB,EAAY,EAAAonB,cAAcG,oBAAoBvgE,GACpD,EAAApW,SAASC,uBAAuBq2E,EAAkBlgE,EAAWg5C,Q,2FCnRjE,SACA,QACA,OACA,OAEA,QAGA,SAIA,QACA,SASA,MAAatiE,EAKZ,YACS/b,EACAR,EACAmiB,EACAqkF,GAHA,KAAAhmG,QACA,KAAAR,QACA,KAAAmiB,iBACA,KAAAqkF,gBAGT,kBAAuCrzF,EAAsBgyB,GAC5D,OAAO,IAAI5oB,EAAepJ,EAAM3a,KAAM2a,EAAMrc,KAAMqc,EAAMtG,cAAes4B,GAGxE,WACC,OAAOlrC,KAAKuG,MAEb,WACC,OAAOvG,KAAK+F,MAEb,oBACC,OAAO/F,KAAKkoB,eAEb,mBACC,OAAOloB,KAAKusG,cAGb,cACC,OAAQvsG,KAAKwsG,SAAWxsG,KAAKwsG,UAAYxsG,KAAKysG,kBAGvC,kBACP,OAAOnqF,EAAYoqF,gBAAgB1sG,KAAKuG,OAGzC,oBACC,MAAMomG,EAAiB3sG,KAAK4sG,UAAU/uG,KAAKmC,MAC3C,OAAQA,KAAKuG,OACZ,KAAK,EAAA7H,UAAUO,cACd,MAAO,CAACmZ,SAAUu0F,EAAgBrnE,eAAgB,CAACC,QAAS,EAAAnlC,YAAYm7B,MACzE,QACC,MAAO,CAACnjB,SAAUu0F,IAIb,UAAUlpG,EAAoByV,GACrClZ,KAAKmrC,QAAQ7tC,MAAQ4b,EAAM5b,MAI5B,uBAAuBiB,GACtB,OAAQA,GACP,KAAK,EAAAG,UAAUE,QAEf,KAAK,EAAAF,UAAUC,OACd,MAAO,CAACrB,MAAO,GAChB,KAAK,EAAAoB,UAAUG,MACd,MAAO,CAACvB,MAAO,IAAI,EAAA8V,QAAQ,EAAG,EAAG,IAClC,KAAK,EAAA1U,UAAUI,MAEf,KAAK,EAAAJ,UAAUK,OAEf,KAAK,EAAAL,UAAUM,QAEf,KAAK,EAAAN,UAAUO,cACd,MAAO,CAAC3B,MAAO,GAEhB,KAAK,EAAAoB,UAAUU,KACd,MAAO,CAAC9B,MAAO,MAChB,KAAK,EAAAoB,UAAUW,UACd,MAAO,CAAC/B,MAAO,GAChB,KAAK,EAAAoB,UAAUY,OACd,MAAO,CAAChC,MAAO,MAChB,KAAK,EAAAoB,UAAUa,QACd,MAAO,CAACjC,MAAO,IAAI,EAAAu5B,QAAQ,EAAG,IAC/B,KAAK,EAAAn4B,UAAUc,QACd,MAAO,CAAClC,MAAO,IAAI,EAAA8V,QAAQ,EAAG,EAAG,IAClC,KAAK,EAAA1U,UAAUe,QACd,MAAO,CAACnC,MAAO,IAAI,EAAAkuE,QAAQ,EAAG,EAAG,EAAG,IAEtC,EAAAgwB,WAAWC,YAAYl9F,GAGlB,kBAAkBkF,G,mDAEvB,MAAM0nC,EAAUnrC,KAAKmrC,QAEfjyB,EAAQzV,EAAK+E,OAAOtL,IAAI8C,KAAK+F,OACnC,GAAImT,EAAO,OACJA,EAAM06B,UACZ,MAAMt2C,EAAQ4b,EAAM5b,MAEpB,GAAc,MAATA,GAAiB0C,KAAK6sG,kBAAkBvvG,IAAW0C,KAAK8sG,mBAI5D,OAAQ9sG,KAAKuG,OACZ,KAAK,EAAA7H,UAAUO,oBACRe,KAAK+sG,+BAAyC7zF,EAA6BiyB,GACjF,MAED,KAAK,EAAAzsC,UAAUU,KACdY,KAAKgtG,4BAAsC9zF,EAAqBiyB,GAChE,MAED,QACCA,EAAQ7tC,MAAQ4b,EAAM5b,WAYrB,+BAA+B4b,EAA0BiyB,G,mDAM9D,MAAMxE,EAAaztB,EAAMytB,aACzB,GAAIA,EAAY,CACf,MACMnL,SADkBmL,EAAWhtB,qBACT6hB,UAC1B2P,EAAQ7tC,MAAQk+B,OAEhB2P,EAAQ7tC,MAAQ,QAIlB,4BAA4B4b,EAAkBiyB,GAC7CA,EAAQ7tC,MAAQ4b,EAAM+zF,eAGvB,kBAAkBz3F,GACjB,MAAM03F,EAAoB,EAAAp8C,uBAAuB9wD,KAAKuG,OACtD,GAAIvG,KAAKmtG,oBAAqB,CAC7B,MAAMC,GAAeF,EAAkBzlF,iBAAiBjS,EAAWxV,KAAKmtG,qBAIxE,OAHIC,IACHptG,KAAKmtG,oBAAsBD,EAAkBG,YAAY73F,IAEnD43F,EAGP,OADAptG,KAAKmtG,oBAAsBD,EAAkBG,YAAY73F,IAClD,EA2CT,mBACC,IAAI3Z,GAAS,EACb,MAAMsvC,EAAUnrC,KAAKmrC,QACrB,GAAIA,EAAS,CACZ,MAAM7tC,EAAQ6tC,EAAQ7tC,MAClBA,IACHzB,EAASyB,EAAMyW,aAAe,EAAAswB,cAIhC,OAAOxoC,GA3MT,iB,8ECpBA,eAGA,oCAEC,YAAoByxG,EAAqCC,GAArC,KAAAD,gBAAqC,KAAAC,uBADjD,KAAAC,iCAAqE,IAAIj9E,IAEhF,IAAK,IAAIyC,KAAehzB,KAAKstG,cAC5BttG,KAAKwtG,iCAAiCjtG,IAAIyyB,EAAa,IAAI,EAAAy6E,gBAAgBz6E,IAI7E,mBACC,OAAOhzB,KAAKstG,cAGb,wBAAwBt6E,GACvBhzB,KAAKutG,qBAAuBv6E,EAE7B,0BACC,OAAOhzB,KAAKutG,qBAGb,gBAAgB9pG,EAAsBuyB,EAAiChD,GACtE,GAA0B,GAAtBgD,EAAYh7B,OACf,OAEDg4B,EAAcA,GAAehzB,KAAKutG,qBAClC,MAAMG,EAAmB1tG,KAAKwtG,iCAAiCtwG,IAAI81B,GAC/D06E,GACHA,EAAiBxgG,gBAAgBzJ,EAAMuyB,GAGzC,YAAYhD,EAAyBvvB,GACpC,MAAMiqG,EAAmB1tG,KAAKwtG,iCAAiCtwG,IAAI81B,GACnE,GAAI06E,EACH,OAAOA,EAAiB13E,YAAYvyB,GAItC,eAAeA,EAAsB6vB,EAAiBN,GACrD,GAAoB,GAAhBM,EAAMt4B,OACT,OAEDg4B,EAAcA,GAAehzB,KAAKutG,qBAClC,MAAMG,EAAmB1tG,KAAKwtG,iCAAiCtwG,IAAI81B,GAC/D06E,GACHA,EAAiBzgG,eAAexJ,EAAM6vB,GAGxC,WAAWN,EAAyBvvB,GACnC,MAAMiqG,EAAmB1tG,KAAKwtG,iCAAiCtwG,IAAI81B,GACnE,GAAI06E,EACH,OAAOA,EAAiB34E,WAAWtxB,M,8ECnDtC,eAEA,wBAIC,YAAoBs1D,GAAA,KAAAA,eAHZ,KAAA40C,wBAA2D,IAAIp9E,IAC/D,KAAAq9E,uBAAgD,IAAIr9E,IAI5D,kBACC,OAAOvwB,KAAK+4D,aAGb,gBAAgBt1D,EAAsBuyB,GACrC,IAAK,IAAIZ,KAAcY,EACtB,EAAAR,SAASC,uBAAuBz1B,KAAK2tG,wBAAyBlqG,EAAKqoB,cAAesJ,GAGpF,YAAY3xB,GACX,OAAOzD,KAAK2tG,wBAAwBzwG,IAAIuG,EAAKqoB,eAG9C,eAAeroB,EAAsB6vB,GACpC,IAAK,IAAIukC,KAAQvkC,EAChB,EAAAkC,SAASC,uBAAuBz1B,KAAK4tG,uBAAwBnqG,EAAKqoB,cAAe+rC,GAGnF,WAAWp0D,GACV,OAAOzD,KAAK4tG,uBAAuB1wG,IAAIuG,EAAKqoB,kB,8EC7B9C,eAEM+hF,EAAgB,CACrB,CAAC,EAAA3gE,SAASC,sBAAuB,GACjC,CAAC,EAAAD,SAASG,QAAS,IACnB,CAAC,EAAAH,SAASK,MAAO,KAGZugE,EAAgB,CACrB,CAAC,EAAA5gE,SAASC,sBAAuB,GACjC,CAAC,EAAAD,SAASG,QAAS,GACnB,CAAC,EAAAH,SAASK,MAAO,MAGlB,sBACC,oBAAoB9pC,EAAsBmoC,GACzC,IAAIisB,EAAO,MAAMp0D,EAAK4E,cAItB,OAHIujC,GAAa,EAAAsB,SAASK,OACzBsqB,EAAO,KAAIA,KAELA,EAER,iBAAiBA,EAAcjsB,GAC9B,IAAImiE,GAAa,EAIjB,OAH2B,GAAvBl2C,EAAKvuD,QAAQ,QAAyC,GAA1BuuD,EAAKvuD,QAAQ,YAC5CykG,GAAa,GAEVA,EACI,GAAGD,EAAcliE,KAAaisB,IAAOg2C,EAAcjiE,KAEnD,GAAGkiE,EAAcliE,KAAaisB,IAGvC,2BAA2BjsB,GAC1B,OAAOA,GAAa,EAAAsB,SAASK,KAAO,KAAM,M,8EChC5C,0B,6BCHA,OAAe,mN,8ECAf,kBACC,aAAanC,GACZ,OAAO,IAAIjjB,QAAQ,CAACC,EAASC,KAC5B+N,WAAW,KACVhO,KACEgjB,Q,2FCAN,SAIA,SAIA,OACA,QACA,QACA,MAAM4iE,UAA8B,EAAAllG,kBAKpC,MAAMC,EAAe,IAAIilG,EACzB,MAAapI,UAAsB,EAAAvqE,aAAnC,c,oBACC,KAAAryB,cAAgBD,EAChB,cACC,MAAO,UAYR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GAGzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAOrD,KAAKv6E,G,mDACV,MAAMwa,EAAUxa,EAAe,GACzB+kD,QAAgB/lE,KAAKiuG,2BAA2BzyE,GAClDuqC,EACH/lE,KAAKyjC,YAAYsiC,GAEjB/lE,KAAK+b,gBAAgBoF,cAIT,2BAA2Bqa,G,mDAIxC,MAAMnd,QAAiB,EAAAjD,KAAKZ,qBAAqB0zF,oBAQjD,GAAI7vF,EAAU,CAWb,OAVuB,IAAI,EAAA8vF,eAAe9vF,GAEC+vF,oBAAoB5yE,GAKnBA,QAK5Cx7B,KAAKgyB,OAAO9T,MAAM3d,IAAI,8DA7DzB,mB,4FCtBA,SACA,SAOA,OACA,SAIA,SAEA,QAkBA,IAAK8tG,GAAL,SAAKA,GACJ,YACA,gBACA,YAHD,CAAKA,MAAS,KAMd,MAAa7rE,EAqCZ,YAAoB18B,EAA6BsjC,GAA7B,KAAAtjC,QAA6B,KAAAsjC,SAE3C,4BAA4B7G,G,mDACjC,IACIoE,EADAnL,EAA0B,KAG9B,GAA2B,OAAvB+G,EAAIv0B,UAAU,EAAG,GAAa,CACjC,MAAMwc,EAAY+X,EAAIv0B,UAAU,GAEhC,GADA24B,EAAa,EAAA7sB,WAAWG,UAAUja,KAAK8F,MAAO0kB,GAC1Cmc,EACH,GAAIA,aAAsB,EAAA2nE,iBAAkB,CAE3C9yE,SAD0CmL,EAAWhtB,qBACjC6hB,eAEpBx7B,KAAK8F,MAAMksB,OAAO9T,MAAM3d,IAAI,yCAK7BP,KAAK8F,MAAMksB,OAAO9T,MAAM3d,IAAI,0BAA0BiqB,WAGvDgR,QAAgBx7B,KAAKuuG,SAAShsE,GAC1B/G,EAECx7B,KAAKopC,OAAO3qC,QAAQ+vG,mBAGvBhzE,EAAUgH,EAAkBisE,wBAAwBjzE,IAGrDx7B,KAAK8F,MAAMksB,OAAO9T,MAAM3d,IAAI,0BAA0BgiC,KAYxD,OANIoE,GAAc3mC,KAAKopC,OAAOi7C,qBAAqB,IAAM19C,IACxD3mC,KAAKopC,OAAOisD,gCACZr1F,KAAKopC,OAAOxgB,gBAAgB+d,IAItBnL,KAGF,SAAS+G,G,mDACd,OAAO,IAAIpa,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAE5C,MAAMqmF,EAAMlsE,EAAkBmsE,KAAKpsE,GAEnC,GAAIC,EAAkBosE,iBAAiB9oD,SAAS4oD,GAAM,CAErD,aADoC1uG,KAAK6uG,eAAetsE,GAGxDviC,KAAK8uG,eAAeJ,GAAKn4E,KAAMq9C,IAC9BA,EAAOJ,KAAKjxC,EAAKna,OAAS7jB,EAAY2Z,IACrC7a,QAAQiE,KAAK,QAAS4W,GACtBmK,eAOC,eAAeqmF,G,mDAKpB,OAJsBA,EAAIhQ,eAKzB,KAAK2P,EAAUU,IAAK,CACnB,MAAM,UAACC,SAAa,4CAAa,OACjC,OAAO,IAAIA,EAEZ,KAAKX,EAAUY,IAAK,CACnB,MAAM,WAACC,SAAc,4CAAa,OAC5Bt7B,EAAS,IAAIs7B,EAGnB,OAFAt7B,EAAOu7B,YAAY,EAAAC,kBAEZx7B,EAER,KAAKy6B,EAAUgB,MAAO,CACrB,MAAM,mBAACC,SAAsB,4CAC5B,OAEK17B,EAAS,IAAI07B,EACnB17B,EAAO27B,kBAAkB,yBACzB,MAAMlxF,QAAiB,EAAAjD,KAAKZ,qBAAqB0zF,oBAMjD,OALI7vF,EACHu1D,EAAO47B,cAAcnxF,GAErBhb,QAAQiE,KAAK,6DAEPssE,GAmBT,OAAO,IAAI,EAAA67B,iBASZ,eAAeltE,GACd,OAAO,IAAIpa,QAAQ,CAACC,EAASC,KAC5B,MAAMqnF,EAAQn1C,SAASo1C,cAAc,SAIrCD,EAAMh9F,aAAa,cAAe,aAClCg9F,EAAMh9F,aAAa,WAAY,QAC/Bg9F,EAAMh9F,aAAa,OAAQ,QAG3Bg9F,EAAME,iBAAmB,WACxBF,EAAM9xB,QACN,MAAMpiD,EAAU,IAAI,EAAA6I,aAAaqrE,GACjCtnF,EAAQoT,IAIT,MAAMq0E,EAASt1C,SAASo1C,cAAc,UAChCjB,EAAMlsE,EAAkBmsE,KAAKpsE,GACnC,IAAIhkC,EAAeikC,EAAkBstE,yBAAyBpB,GAC9DnwG,EAAOA,GAAQikC,EAAkButE,2BAA2BxtE,GAC5DstE,EAAOn9F,aAAa,OAAQnU,GAC5BsxG,EAAOn9F,aAAa,MAAO6vB,GAE3BmtE,EAAMM,YAAYH,KAGpB,kCAAkCttE,GAEjC,MAAO,SADKviC,KAAK2uG,KAAKpsE,KAIvB,kBAAkB/G,GACjB,MAAMy0E,EAAMz0E,EAAQ8I,MACd6C,EAASozB,SAASo1C,cAAc,UACtCxoE,EAAOiB,MAAQ6nE,EAAI7nE,MACnBjB,EAAO4/D,OAASkJ,EAAIlJ,OACpB,MAAMxhE,EAAU4B,EAAOm6C,WAAW,MAClC,GAAI/7C,EAEH,OADAA,EAAQ2qE,UAAUD,EAAK,EAAG,EAAGA,EAAI7nE,MAAO6nE,EAAIlJ,QACrCxhE,EAAQ4qE,aAAa,EAAG,EAAGF,EAAI7nE,MAAO6nE,EAAIlJ,QAyDnD,YAAYxkE,GACX,MAAM5zB,EAAW4zB,EAAI3zB,MAAM,KAC3B,OAAOD,EAASA,EAAS3T,OAAS,GAAG0jG,cAUtC,+BAA+BljE,GAe9B,OAAOA,GA5RT,sBACQ,EAAAiH,cAAgB,4BAChB,EAAA2tE,kBAAoB,wCAEpB,EAAAxB,iBAAmB,CAAC,MAAO,OAAQ,OACnC,EAAAkB,yBAAiD,CACvDO,IAAK,qCACLC,IAAK,qCACLC,IAAK,+C,8BC/CP,sEAkBIrB,EAAa,SAAW58B,GAE3B,IAAkBl3E,KAAM4E,KAAMsyE,GAE9BtyE,KAAKzB,KAAO,oBAIb2wG,EAAWh0G,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAkBzC,WAAa,CAEnF6Y,YAAam7F,EAIb9gG,MAAO,SAAWujC,GAEjB,IAUC6+D,EAAa,SAAWC,EAAiBC,GAExC,OAASD,GAER,KARgB,EAQMptG,QAAQ6a,MAAO,2BAA8BwyF,GAAO,KACzE,MACD,KATiB,EASMrtG,QAAQ6a,MAAO,4BAA+BwyF,GAAO,KAC3E,MACD,KAVkB,EAUMrtG,QAAQ6a,MAAO,gCAAmCwyF,GAAO,KAChF,MACD,QACA,KAZkB,EAYMrtG,QAAQ6a,MAAO,uBAA0BwyF,GAAO,KAGzE,OArBqB,GAwCtBC,EAAQ,SAAWh/D,EAAQi/D,EAAWC,GAErCD,EAAcA,GAAY,KAK1B,IAJA,IAAI3yG,EAAI0zC,EAAOm/D,IACdh2G,GAAM,EAAGi2G,EAAM,EAAG30G,EAAI,GACtB40G,EAAQzf,OAAO0f,aAAat1G,MAAO,KAAM,IAAIq/B,YAAa2W,EAAO9B,SAAU5xC,EAAGA,EADxC,OAG7B,GAAMnD,EAAIk2G,EAAM1nG,QATjB,QAS6CynG,EAAMH,GAAiB3yG,EAAI0zC,EAAOijC,YAEvFx4E,GAAK40G,EAAOD,GAAOC,EAAMh2G,OACzBiD,GANsC,IAOtC+yG,GAASzf,OAAO0f,aAAat1G,MAAO,KAAM,IAAIq/B,YAAa2W,EAAO9B,SAAU5xC,EAAGA,EAPzC,OAWvC,OAAO,EAAInD,KAQL,IAAU+1G,IAAUl/D,EAAOm/D,KAAOC,EAAMj2G,EAAI,GAC1CsB,EAAI40G,EAAM3yG,MAAO,EAAGvD,KAiP1Bo2G,EAAoB,WAIvB,IAAIC,EAAY,IAAI1oE,aAAc,GAC9B2oE,EAAY,IAAIn5B,WAAYk5B,EAAUx/D,QAK1C,SAAS0/D,EAAQ5iG,GAEhB0iG,EAAW,GAAM1iG,EACjB,IAAInJ,EAAI8rG,EAAW,GAEfE,EAAShsG,GAAK,GAAO,MACrB5I,EAAM4I,GAAK,GAAO,KAClBkK,EAAMlK,GAAK,GAAO,IAItB,OAAKkK,EAAI,IAAa8hG,EAGjB9hG,EAAI,KAER8hG,GAAQ,MAGRA,IAAiB,KAAL9hG,EAAa,EAAI,IAAa,QAAJlK,GAMlCkK,EAAI,IAKR8hG,KAHA50G,GAAK,OAGY,IAAM8S,IAAY9S,GAAO,IAAM8S,EAAQ,IAKzD8hG,GAAY9hG,EAAI,KAAS,GAAS9S,GAAK,EAGvC40G,GAAY,EAAJ50G,GAKT,OAAO,SAAW60G,EAAaC,EAAcC,EAAWC,GAEvD,IAAIliG,EAAI+hG,EAAaC,EAAe,GAChCjvF,EAAQ/V,KAAK8iB,IAAK,EAAK9f,EAAI,KAAU,IAEzCiiG,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMjvF,GACxEkvF,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMjvF,GACxEkvF,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMjvF,IA5DlD,GAkEpBovF,EAAY,IAAIzpE,WAAYyJ,GAChCggE,EAAUb,IAAM,EAChB,IA/EoCS,EAAaC,EAAcC,EAAWC,EAErEliG,EACA+S,EA4EDqvF,EA7Se,SAAWjgE,GAE5B,IAAIkmB,EAAMhqD,EAITgkG,EAAW,oCACXC,EAAc,uCACdC,EAAY,uBACZC,EAAgB,oCAGhBC,EAAS,CAERC,MAAO,EAEPz/C,OAAQ,GAER0/C,SAAU,GAEVC,YAAa,OAEblK,OAAQ,GAERmK,MAAO,EAEPC,SAAU,EAEVlqE,MAAO,EAAG2+D,OAAQ,GAIpB,GAAKp1D,EAAOm/D,KAAOn/D,EAAOijC,cAAkB/c,EAAO84C,EAAOh/D,IAEzD,OAAO6+D,EAvGS,EAuGoB,mBAIrC,KAAS3iG,EAAQgqD,EAAKhqD,MAjCJ,eAmCjB,OAAO2iG,EA3GW,EA2GoB,qBAOvC,IAJAyB,EAAOC,OAjFiB,EAkFxBD,EAAOG,YAAcvkG,EAAO,GAC5BokG,EAAOx/C,QAAUoF,EAAO,MAKlB,KADLA,EAAO84C,EAAOh/D,KAId,GAFAsgE,EAAOx/C,QAAUoF,EAAO,KAEnB,MAAQA,EAAK06C,OAAQ,IA+B1B,IAxBK1kG,EAAQgqD,EAAKhqD,MAAOgkG,MAExBI,EAAOI,MAAQ39C,WAAY7mD,EAAO,GAAK,MAGnCA,EAAQgqD,EAAKhqD,MAAOikG,MAExBG,EAAOK,SAAW59C,WAAY7mD,EAAO,GAAK,MAGtCA,EAAQgqD,EAAKhqD,MAAOkkG,MAExBE,EAAOC,OA7GU,EA8GjBD,EAAO/J,OAASr6F,EAAO,KAGnBA,EAAQgqD,EAAKhqD,MAAOmkG,MAExBC,EAAOC,OAlHc,EAmHrBD,EAAOlL,OAASj5F,SAAUD,EAAO,GAAK,IACtCokG,EAAO7pE,MAAQt6B,SAAUD,EAAO,GAAK,KArHpB,EAyHXokG,EAAOC,OAxHQ,EAwHyBD,EAAOC,MAAkC,WA7BvFD,EAAOE,UAAYt6C,EAAO,KAiC5B,OA7HmB,EA6HVo6C,EAAOC,MA5HO,EAiIdD,EAAOC,MAMTD,EAJCzB,EAlKW,EAkKoB,gCAL/BA,EA7JW,EA6JoB,4BAmNlBgC,CAAiBb,GAExC,IAvXuB,IAuXMC,EAAmB,CAE/C,IAAInsG,EAAImsG,EAAiBxpE,MACxBh2B,EAAIw/F,EAAiB7K,OACrB0L,EA5MqB,SAAW9gE,EAAQlsC,EAAG2M,GAE3C,IAAIsgG,EAAWxoD,EAAQ4mD,EAAKvkG,EAAOomG,EAClCC,EAAiBj5B,EAAKk5B,EAAS/3G,EAAG2B,EAAGq2G,EAAKC,EACHC,EAAvCC,EAAiBxtG,EAAGytG,EAAgB9gG,EAGrC,GAEK6gG,EAAiB,GAASA,EAAiB,OAE3C,IAAMthE,EAAQ,IAAW,IAAMA,EAAQ,IAAyB,IAAdA,EAAQ,GAI9D,OAAO,IAAIzJ,WAAYyJ,GAIxB,GAAKshE,KAAuBthE,EAAQ,IAAO,EAAMA,EAAQ,IAExD,OAAO6+D,EA/LW,EA+LoB,wBAMvC,KAFAkC,EAAY,IAAIxqE,WAAY,EAAIziC,EAAI2M,MAEdsgG,EAAU13G,OAE/B,OAAOw1G,EAtMW,EAsMoB,mCASvC,IALAtmD,EAAS,EAAG4mD,EAAM,EAAG+B,EAAU,EAAII,EACnCD,EAAY,IAAI9qE,WAAY,GAC5B0qE,EAAkB,IAAI1qE,WAAY2qE,GAGxBK,EAAgB,GAASpC,EAAMn/D,EAAOijC,YAAe,CAE9D,GAAKk8B,EAAM,EAAIn/D,EAAOijC,WAErB,OAAO47B,EAtNQ,GA+NhB,GALAwC,EAAW,GAAMrhE,EAAQm/D,KACzBkC,EAAW,GAAMrhE,EAAQm/D,KACzBkC,EAAW,GAAMrhE,EAAQm/D,KACzBkC,EAAW,GAAMrhE,EAAQm/D,KAElB,GAAKkC,EAAW,IAAW,GAAKA,EAAW,KAAeA,EAAW,IAAO,EAAMA,EAAW,KAASC,EAE5G,OAAOzC,EA/NU,EA+NqB,4BAOvC,IADA72B,EAAM,EACIA,EAAMk5B,GAAe/B,EAAMn/D,EAAOijC,YAAe,CAM1D,IAHAm+B,GADAxmG,EAAQolC,EAAQm/D,MACO,OACHvkG,GAAS,KAEtB,IAAMA,GAAaotE,EAAMptE,EAAQsmG,EAEvC,OAAOrC,EA9OS,EA8OsB,qBAIvC,GAAKuC,EAIJ,IADAJ,EAAYhhE,EAAQm/D,KACdh2G,EAAI,EAAGA,EAAIyR,EAAOzR,IAEvB83G,EAAiBj5B,KAAWg5B,OAQ7BC,EAAgBryG,IAAKoxC,EAAO9B,SAAUihE,EAAKA,EAAMvkG,GAASotE,GAC1DA,GAAOptE,EAAOukG,GAAOvkG,EAUvB,IADA9P,EAAIw2G,EACEn4G,EAAI,EAAGA,EAAI2B,EAAG3B,IAEnBg4G,EAAM,EACNJ,EAAWxoD,GAAW0oD,EAAiB93G,EAAIg4G,GAC3CA,GAAOG,EACPP,EAAWxoD,EAAS,GAAM0oD,EAAiB93G,EAAIg4G,GAC/CA,GAAOG,EACPP,EAAWxoD,EAAS,GAAM0oD,EAAiB93G,EAAIg4G,GAC/CA,GAAOG,EACPP,EAAWxoD,EAAS,GAAM0oD,EAAiB93G,EAAIg4G,GAC/C5oD,GAAU,EAIXgpD,IAID,OAAOR,EAyFWS,CAAqBxB,EAAU9hE,SAAU8hE,EAAUb,KAAOrrG,EAAG2M,GAEhF,IA7XsB,IA6XOqgG,EAAkB,CAE9C,OAASzyG,KAAKzB,MAEb,KAAK,mBAEJ,IAAI/D,EAAOi4G,EACPvK,EAAS,aACT3pG,EAAO,mBACX,MAED,KAAK,YAKJ,IAHA,IAAI60G,EAAgBX,EAAgBz3G,OAAS,EAAM,EAC/Cq4G,EAAa,IAAI5qE,aAAc2qE,GAEzBp3G,EAAI,EAAGA,EAAIo3G,EAAap3G,IAvGyBy1G,EAyGd4B,EAzGyB3B,EAyGT,EAAJ11G,EAvGxDwT,SACA+S,SADA/S,GAF+B+hG,EAyGXkB,IAzGwBjB,EAyGH,EAAJx1G,GAvGL,GAChCumB,EAAQ/V,KAAK8iB,IAAK,EAAK9f,EAAI,KAAU,IAEzCiiG,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMjvF,EAChEkvF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMjvF,EAChEkvF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMjvF,EAsGzD/nB,EAAO64G,EACPnL,EAAS,YACT3pG,EAAO,YACX,MAED,KAAK,gBAEA60G,EAAgBX,EAAgBz3G,OAAS,EAAM,EAAnD,IACIs4G,EAAY,IAAIt4E,YAAao4E,GAEjC,IAAUp3G,EAAI,EAAGA,EAAIo3G,EAAap3G,IAEjCk1G,EAAmBuB,EAAqB,EAAJz2G,EAAOs3G,EAAe,EAAJt3G,GAInDxB,EAAO84G,EACPpL,EAAS,YACT3pG,EAAO,gBACX,MAED,QAEC8E,QAAQ6a,MAAO,uCAAwCle,KAAKzB,MAK9D,MAAO,CACN6pC,MAAO3iC,EAAGshG,OAAQ30F,EAClB5X,KAAMA,EACNy3G,OAAQL,EAAiBn/C,OACzB4/C,MAAOT,EAAiBS,MACxBC,SAAUV,EAAiBU,SAC3BpK,OAAQA,EACR3pG,KAAMA,IAOT,OAAO,MAIR4wG,YAAa,SAAW7xG,GAGvB,OADA0C,KAAKzB,KAAOjB,EACL0C,MAIRwzE,KAAM,SAAWjxC,EAAKkxC,EAAQC,EAAYC,GAuCzC,OAAO,IAAkBz4E,UAAUs4E,KAAKp4E,KAAM4E,KAAMuiC,GArCpD,SAAyB/G,EAAS+3E,GAEjC,OAAS/3E,EAAQj9B,MAEhB,KAAK,mBAEJi9B,EAAQg4E,SAAW,eACnBh4E,EAAQ4G,UAAY,gBACpB5G,EAAQ6G,UAAY,gBACpB7G,EAAQi4E,iBAAkB,EAC1Bj4E,EAAQk4E,OAAQ,EAChB,MAED,KAAK,YASL,KAAK,gBAEJl4E,EAAQg4E,SAAW,iBACnBh4E,EAAQ4G,UAAY,eACpB5G,EAAQ6G,UAAY,eACpB7G,EAAQi4E,iBAAkB,EAC1Bj4E,EAAQk4E,OAAQ,EAKbjgC,GAASA,EAAQj4C,EAAS+3E,KAIyC7/B,EAAYC,O,6BCphBvF,8FA8BI27B,EAAqB,SAAWh9B,GAEnC,IAAOl3E,KAAM4E,KAAMsyE,GAEnBtyE,KAAK2zG,eAAiB,GACtB3zG,KAAK4zG,iBAAmB,KACxB5zG,KAAK6zG,kBAAoB,KAEzB7zG,KAAK2yE,YAAc,EACnB3yE,KAAK4yE,WAAa,GAClB5yE,KAAK6yE,iBAAmB,EACxB7yE,KAAK8yE,gBAAkB,GACvB9yE,KAAK8zG,aAAe,CACnB5L,OAAQ,KACR6L,eAAe,EACfC,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,gBAAgB,IAKlB7E,EAAmBp0G,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEhF6Y,YAAau7F,EAEbC,kBAAmB,SAAW31F,GAI7B,OAFA5Z,KAAK2zG,eAAiB/5F,EAEf5Z,MAIRozE,eAAgB,SAAWT,GAI1B,OAFA3yE,KAAK2yE,YAAcA,EAEZ3yE,MAIRwvG,cAAe,SAAWnxF,GAEzB,IAAI80D,EAASnzE,KAAK8zG,aASlB,GAPA3gC,EAAO4gC,gBAAmB11F,EAAS+1F,WAAWl3G,IAAK,iCACnDi2E,EAAO6gC,gBAAmB31F,EAAS+1F,WAAWl3G,IAAK,gCACnDi2E,EAAO8gC,eAAkB51F,EAAS+1F,WAAWl3G,IAAK,iCAClDi2E,EAAO+gC,eAAkB71F,EAAS+1F,WAAWl3G,IAAK,iCAClDi2E,EAAOghC,iBAAoB91F,EAAS+1F,WAAWl3G,IAAK,qCAC7CmhB,EAAS+1F,WAAWl3G,IAAK,yCAE3Bi2E,EAAO4gC,cAEX5gC,EAAO+0B,OAASoH,EAAmB+E,aAAaC,iBAE1C,GAAKnhC,EAAO6gC,cAElB7gC,EAAO+0B,OAASoH,EAAmB+E,aAAaE,eAE1C,GAAKphC,EAAO+gC,aAElB/gC,EAAO+0B,OAASoH,EAAmB+E,aAAaG,YAE1C,GAAKrhC,EAAOghC,eAElBhhC,EAAO+0B,OAASoH,EAAmB+E,aAAaI,qBAE1C,KAAKthC,EAAO8gC,aAMlB,MAAM,IAAIvkE,MAAO,0EAJjByjC,EAAO+0B,OAASoH,EAAmB+E,aAAaK,QAQjD,OAAO10G,MAIRwzE,KAAM,SAAWjxC,EAAKkxC,EAAQC,EAAYC,GAEzC,IAAIC,EAAS,IAAI,IAAY5zE,KAAKsyE,SAElCsB,EAAOE,gBAAiB,eAExBF,EAAOJ,KAAMjxC,EAAOoP,IAEnB3xC,KAAK20G,eAAgBhjE,GACnBpb,KAAMk9C,GACNxC,MAAO0C,IAEPD,EAAYC,IAQhBghC,eAAgB,SAAWhjE,GAE1B,IAAI4iC,EACAM,EAEAC,EAAWnjC,EAAOijC,WAElBggC,EAAiB50G,KAAK60G,gBAAiB//B,GACzCv+C,KAAQ0+C,IAERV,EAASU,EACTJ,EAAS70E,KAAK6yE,mBAEP,IAAI1qD,QAAS,CAAEC,EAASC,KAE9BksD,EAAOr+C,WAAY2+C,GAAW,CAAEzsD,UAASC,UAEzCksD,EAAOW,YAAa,CAAE32E,KAAM,YAAamR,GAAImlE,EAAQljC,UAAU,CAAEA,QAKlEpb,KAAQz0B,IAER,IAII05B,EAJA23C,EAASnzE,KAAK8zG,cAEd,MAAE1rE,EAAK,OAAE2+D,EAAM,QAAE+N,EAAO,OAAE5M,GAAWpmG,EAIzC,OAASomG,GAER,KAAKoH,EAAmB+E,aAAaC,YACpC94E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQ,wBACzD,MACD,KAAKuI,EAAmB+E,aAAaE,UACpC/4E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQ,oBACzD,MACD,KAAKuI,EAAmB+E,aAAaU,OACrC,KAAKzF,EAAmB+E,aAAaG,OACpCh5E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQuI,EAAmB0F,eAAgB7hC,EAAO+0B,QAAU,oBAC7G,MACD,KAAKoH,EAAmB+E,aAAaK,QACpCl5E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQ,mBACzD,MACD,KAAKuI,EAAmB+E,aAAaY,gBACpCz5E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQ,2BACzD,MACD,KAAKuI,EAAmB+E,aAAaI,iBACpCj5E,EAAU,IAAI,IAAmBs5E,EAAS1sE,EAAO2+D,EAAQ,4BACzD,MACD,QACC,MAAM,IAAIr3D,MAAO,4DASnB,OALAlU,EAAQ4G,UAA+B,IAAnB0yE,EAAQ95G,OAAe,eAAe,2BAC1DwgC,EAAQ6G,UAAY,eACpB7G,EAAQi4E,iBAAkB,EAC1Bj4E,EAAQtL,aAAc,EAEfsL,IAgBT,OAZAo5E,EACEx/B,QAAS,KAEJb,GAAUM,IAEdN,EAAOmC,WAAa5B,SACbP,EAAOr+C,WAAY2+C,MAMtB+/B,GAIRM,gBAAiB,WAEhB,IAAOl1G,KAAK6zG,kBAAoB,CAG/B,IAAIsB,EAAW,IAAI,IAAYn1G,KAAKsyE,SACpC6iC,EAASthC,QAAS7zE,KAAK2zG,gBACvB,IAAI59B,EAAY,IAAI5tD,QAAS,CAAEC,EAASC,KAEvC8sF,EAAS3hC,KAAM,sBAAuBprD,OAAS7jB,EAAW8jB,KAKvD+sF,EAAe,IAAI,IAAYp1G,KAAKsyE,SACxC8iC,EAAavhC,QAAS7zE,KAAK2zG,gBAC3ByB,EAAathC,gBAAiB,eAC9B,IAAIuhC,EAAgB,IAAIltF,QAAS,CAAEC,EAASC,KAE3C+sF,EAAa5hC,KAAM,wBAAyBprD,OAAS7jB,EAAW8jB,KAIjEroB,KAAK6zG,kBAAoB1rF,QAAQ0rB,IAAK,CAAEkiC,EAAWs/B,IACjD9+E,KAAM,EAAIw/C,EAAWs/B,MAErB,IAAIp/B,EAAKq5B,EAAmBgG,YAAYn/B,WAEpC7oC,EAAO,CACV,4BACAyoC,EACA,eACAE,EAAGjoE,UAAWioE,EAAG3sE,QAAS,KAAQ,EAAG2sE,EAAGG,YAAa,OACpDlxE,KAAM,MAERlF,KAAK8yE,gBAAkBuD,IAAIC,gBAAiB,IAAIC,KAAM,CAAEjpC,KACxDttC,KAAK4zG,iBAAmByB,IAM3B,OAAOr1G,KAAK6zG,mBAIbgB,gBAAiB,SAAW//B,GAE3B,OAAO90E,KAAKk1G,kBAAkB3+E,KAAM,KAIlC,IA4CGg+C,EA9CCv0E,KAAK4yE,WAAW53E,OAASgF,KAAK2yE,cAE9B4B,EAAS,IAAIiC,OAAQx2E,KAAK8yE,kBAEvB58C,WAAa,GACpBq+C,EAAOmC,UAAY,EAEnBnC,EAAOW,YAAa,CACnB32E,KAAM,OACN40E,OAAQnzE,KAAK8zG,aACbF,iBAAkB5zG,KAAK4zG,mBAGxBr/B,EAAOoC,UAAY,SAAWnnE,GAE7B,IAAI1N,EAAU0N,EAAEhV,KAEhB,OAASsH,EAAQvD,MAEhB,IAAK,YACJg2E,EAAOr+C,WAAYp0B,EAAQ4N,IAAK0Y,QAAStmB,GACzC,MAED,IAAK,QACJyyE,EAAOr+C,WAAYp0B,EAAQ4N,IAAK2Y,OAAQvmB,GACxC,MAED,QACCuB,QAAQ6a,MAAO,kDAAoDpc,EAAQvD,KAAO,OAMrFyB,KAAK4yE,WAAWt3E,KAAMi5E,IAItBv0E,KAAK4yE,WAAW3iE,MAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAEwmE,UAAYvmE,EAAEumE,WAAc,EAAI,KAU3C,OAJInC,EAASv0E,KAAK4yE,WAAY5yE,KAAK4yE,WAAW53E,OAAS,IAEhD07E,WAAa5B,EAEbP,KAMTn2D,QAAS,WAER,IAAM,IAAItjB,EAAI,EAAGA,EAAIkF,KAAK4yE,WAAW53E,OAAQF,IAE5CkF,KAAK4yE,WAAY93E,GAAI+7E,YAMtB,OAFA72E,KAAK4yE,WAAW53E,OAAS,EAElBgF,QAQTsvG,EAAmB+E,aAAe,CACjCK,QAAS,EACTa,QAAS,EACTR,OAAQ,EACRP,OAAQ,EACRgB,OAAQ,EACRC,OAAQ,EACRC,sBAAuB,EACvBnB,UAAW,EACXU,gBAAiB,EACjBR,iBAAkB,EAClBH,YAAa,GACbqB,WAAY,GACZC,+BAAgC,GAChCC,UAAW,GACXC,UAAW,GACXC,UAAW,GACXC,YAAa,IAKd1G,EAAmB2G,WAAa,CAC/BC,6BAA8B,MAC9BC,8BAA+B,MAC/BC,8BAA+B,MAC/BC,8BAA+B,OAEhC/G,EAAmB0F,eAAiB,GACpC1F,EAAmB0F,eAAgB1F,EAAmB+E,aAAaU,QAClEzF,EAAmB2G,WAAWC,6BAC/B5G,EAAmB0F,eAAgB1F,EAAmB+E,aAAaG,QAClElF,EAAmB2G,WAAWI,8BAI/B/G,EAAmBgG,YAAc,WAEhC,IAAIniC,EACA0gC,EACAyC,EAEJ3/B,UAAY,SAAWnnE,GAEtB,IAyCcwmE,EAEVugC,EA3CAz0G,EAAU0N,EAAEhV,KAEhB,OAASsH,EAAQvD,MAEhB,IAAK,OACJ40E,EAASrxE,EAAQqxE,OAoCL6C,EAnCNl0E,EAAQ8xG,iBAsChBC,EAAoB,IAAI1rF,QAAWC,IAElCmuF,EAAc,CAAEvgC,aAAYwgC,qBAAsBpuF,GAClDinF,MAAOkH,KAEJhgF,KAAM,KAET,IAAI,UAAEkgF,EAAS,gBAAEC,GAAoBH,EAErCD,EAAaG,EAEbC,MAhDC,MAED,IAAK,YACJ7C,EAAkBt9E,KAAM,KAEvB,IAMC,IAJA,IAAI,MAAE6R,EAAK,OAAE2+D,EAAM,SAAE4P,EAAQ,QAAE7B,EAAO,OAAE5M,GA+C7C,SAAoBv2D,GAEnB,IAAIilE,EAAY,IAAIN,EAAY,IAAIpuE,WAAYyJ,IAE5CvJ,EAAQwuE,EAAUC,cAAe,EAAG,GACpC9P,EAAS6P,EAAUE,eAAgB,EAAG,GACtCC,EAASH,EAAUI,aAAc,GACjCL,EAAWC,EAAUK,cAEzB,SAASC,IAERN,EAAUO,QACVP,EAAUh4B,SAIX,IAAO+3B,EAEN,OAASxjC,EAAO+0B,QAEf,KAAK,EACJ/0B,EAAO+0B,OAAS,EASnB,IAAO9/D,IAAW2+D,IAAYgQ,EAG7B,MADAG,IACM,IAAIxnE,MAAO,kDAIlB,IAAOknE,EAAUQ,mBAGhB,MADAF,IACM,IAAIxnE,MAAO,sDAMlB,IAFA,IAAIolE,EAAU,GAEJuC,EAAM,EAAGA,EAAMN,EAAQM,IAAS,CAEzC,IAAIC,EAAWV,EAAUC,cAAe,EAAGQ,GACvCE,EAAYX,EAAUE,eAAgB,EAAGO,GACzCG,EAAM,IAAItvE,WAAY0uE,EAAUa,8BAA+B,EAAGJ,EAAKlkC,EAAO+0B,SAWlF,IATa0O,EAAUc,eACtBF,EACA,EACAH,EACAlkC,EAAO+0B,OACP,EACAyO,GAMA,MADAO,IACM,IAAIxnE,MAAO,qDAIlBolE,EAAQx5G,KAAM,CAAEd,KAAMg9G,EAAKpvE,MAAOkvE,EAAUvQ,OAAQwQ,IAMrD,OAFAL,IAEO,CAAE9uE,QAAO2+D,SAAQ4P,WAAU7B,UAAS5M,OAAQ/0B,EAAO+0B,QAzHHyP,CAAW71G,EAAQ6vC,QAElE2oC,EAAU,GAEJx/E,EAAI,EAAGA,EAAIg6G,EAAQ95G,SAAWF,EAEvCw/E,EAAQh/E,KAAMw5G,EAASh6G,GAAIN,KAAKm3C,QAIjCmoC,KAAK5E,YAAa,CAAE32E,KAAM,YAAamR,GAAI5N,EAAQ4N,GAAI04B,QAAO2+D,SAAQ4P,WAAU7B,UAAS5M,UAAU5tB,GAElG,MAAQp8D,GAET7a,QAAQ6a,MAAOA,GAEf47D,KAAK5E,YAAa,CAAE32E,KAAM,QAASmR,GAAI5N,EAAQ4N,GAAIwO,MAAOA,EAAMpc,iB,2FC5ZtE,SACA,OACA,QAEMiH,EAAe,IAAI,EAAAD,iBACzB,MAAa+8F,UAAoB,EAAAxqE,aAAjC,c,oBACC,KAAAryB,cAAgBD,EAChB,cACC,MAAO,OAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAGrD,KAAKv6E,G,mDACV,MAAMwa,EAAUxa,EAAe,GAC/BhhB,KAAKyjC,YAAYjI,OAbnB,iB,2FCNA,SAEA,OACA,QACA,MAAMo8E,UAA8B,EAAA9uG,iBAApC,c,oBACC,KAAAoR,MAAQ,EAAAoI,YAAYtjB,QAAQ,EAAG,CAC9B0lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAI6uG,EAEzB,MAAa9R,UAAsB,EAAAzqE,aAAnC,c,oBACC,KAAAryB,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CACzC,EAAA11F,eAAe42F,MACf,EAAA52F,eAAe42F,MACf,EAAA52F,eAAe42F,MACf,EAAA52F,eAAe42F,QAEhBv7F,KAAKiH,QAAQ4wG,UAAU,KAGvB73G,KAAK+b,gBAAgB+7F,6BAGhB,O,mDACL,MAAMrwG,EAAczH,KAAKwe,GAAGtE,MAC5B,GAAIla,KAAKa,GAAG6G,OAAOqwG,UAAUtwG,GAAc,CAC1C,MAAM1F,QAAkB/B,KAAKF,qBAAqBw2B,wBAAwB7uB,GAC1EzH,KAAKyjC,YAAY1hC,EAAUy5B,gBAE3Bx7B,KAAKgyB,OAAO9T,MAAM3d,IAAI,YAAYkH,SA1BrC,mB,8ECZA,eAEA,SACA,SACA,SACA,SACA,SAWA,sBACC,WAAWi+F,GACVA,EAAK3qF,cAAc,EAAAi9F,2BAA4B,EAAAr+E,eAAeL,QAC9DosE,EAAK3qF,cAAc,EAAA6mC,6BAA8B,EAAAjoB,eAAeL,QAChEosE,EAAK3qF,cAAc,EAAAo8C,cAAe,EAAAx9B,eAAeJ,MACjDmsE,EAAK3qF,cAAc,EAAAk0C,eAAgB,EAAAt1B,eAAeJ,MAClDmsE,EAAK3qF,cAAc,EAAAk9F,cAAe,EAAAt+E,eAAeJ,S,2FCtBnD,SACA,SAEA,MAAay+E,UAAmC,EAAAp2D,6BAC/C,cACC,MAAO,sBAGF,yBAAyBpkC,EAAgB5N,G,mDAO9C,OAAO,IAAI,EAAAizD,YAAYrlD,EAAQ5N,OAZjC,gC,2FCFA,SAYA,MAAsBiyC,UAAiE,EAAAjb,eAKhF,eAAeppB,EAAgB06F,G,mDAMpC,MAAMn2D,QAAiB/hD,KAAKm4G,yBAAyB36F,EAAQ06F,GACvDE,EAAY3vC,YAAYC,MAK9B,OAJA3mB,EAASllD,KAAO,GAAGmD,KAAKqI,eAAemV,EAAO3gB,QAAQu7G,KAAap4G,KAAKq4G,sBAElEr4G,KAAKwI,OAAOy+B,WAClBjnC,KAAKs4G,eAAev2D,GACbA,KAIR,cACC,OAAO1X,KAAKC,UAAUtqC,KAAKwI,OAAOqrC,IAAI7uC,IAAK/G,GAAMA,EAAEkuF,oBAtBrD,kC,8ECdA,eACA,QACA,QACA,OAGA,MAAMosB,UAA8B,EAAAzvG,kBACpC,MAAMC,EAAe,IAAIwvG,EAEzB,MAAaN,UAAsB,EAAArxE,eAAnC,c,oBACC,KAAA59B,cAAgBD,EAEhB,cACC,MAAO,OAER,kBAEC/I,KAAKa,GAAG6G,OAAO24B,kCACd,CAAC,EAAG,EAAG,EAAG,GAAGr7B,IAAKlK,GAAM,IAAI,EAAAqlC,0BAA0B,UAAUrlC,IAAK,EAAA+I,oBAAoBE,QAE1F/D,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0B,QAAS,EAAAt8B,oBAAoBE,QAI7D,cAAcmjC,EAAcC,EAA2BC,GACtD,MACMuoB,EADc3vD,KAAKa,GAAGkG,YAAY6oD,qBACO5qD,IAAK4C,GAAeA,EAAWioD,WAC9E,IAAK,IAAIpsD,KAAQksD,EAChBlsD,EAAKqsD,cAAc5oB,EAAOC,EAAQC,IApBrC,mB,8ECTA,eAEA,SACA,SAEA,SAOA,SAuBA,SAWA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAoFA,QAEA,mBACC,WAAWs+D,GACVA,EAAK3qF,cAAc,EAAAy9F,UAAW,EAAA5+E,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA09F,WAAY,EAAA7+E,YAAYO,OAC3CurE,EAAK3qF,cAAc,EAAA29F,UAAW,EAAA9+E,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA49F,YAAa,EAAA/+E,YAAYO,OAC5CurE,EAAK3qF,cAAc,EAAA69F,UAAW,EAAAh/E,YAAYI,OAC1C0rE,EAAK3qF,cAAc,EAAA89F,WAAY,EAAAj/E,YAAYO,OAC3CurE,EAAK3qF,cAAc,EAAA+9F,WAAY,EAAAl/E,YAAYO,OAC3CurE,EAAK3qF,cAAc,EAAA2jB,gBAAiB,EAAA9E,YAAYG,QAAS,CAACg/E,OAAQ,CAAC,GAAG,EAAA34G,YAAYm7B,iBAClFmqE,EAAK3qF,cAAc,EAAAi+F,WAAY,EAAAp/E,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAAk+F,UAAW,EAAAr/E,YAAYO,OAC1CurE,EAAK3qF,cAAc,EAAAypD,eAAgB,EAAA5qC,YAAYG,SAC/C2rE,EAAK3qF,cAAc,EAAAm+F,iBAAkB,EAAAt/E,YAAYK,MACjDyrE,EAAK3qF,cAAc,EAAAo+F,YAAa,EAAAv/E,YAAYP,UAC5CqsE,EAAK3qF,cAAc,EAAAq+F,YAAa,EAAAx/E,YAAYK,MAC5CyrE,EAAK3qF,cAAc,EAAAs+F,cAAe,EAAAz/E,YAAYC,YAC9C6rE,EAAK3qF,cAAc,EAAAu+F,WAAY,EAAA1/E,YAAYP,UAC3CqsE,EAAK3qF,cAAc,EAAA6oD,eAAgB,EAAAhqC,YAAYP,UAC/CqsE,EAAK3qF,cAAc,EAAAw+F,aAAc,EAAA3/E,YAAYK,MAC7CyrE,EAAK3qF,cAAc,EAAA8oD,UAAW,EAAAjqC,YAAYP,UAC1CqsE,EAAK3qF,cAAc,EAAAy+F,aAAc,EAAA5/E,YAAYK,MAC7CyrE,EAAK3qF,cAAc,EAAA0+F,UAAW,EAAA7/E,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA2+F,WAAY,EAAA9/E,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAA4+F,UAAW,EAAA//E,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA6+F,YAAa,EAAAhgF,YAAYK,MAC5CyrE,EAAK3qF,cAAc,EAAA8+F,iBAAkB,EAAAjgF,YAAYC,YACjD6rE,EAAK3qF,cAAc,EAAA++F,kBAAmB,EAAAlgF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAAg/F,kBAAmB,EAAAngF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAAi/F,kBAAmB,EAAApgF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAAk/F,YAAa,EAAArgF,YAAYK,MAC5CyrE,EAAK3qF,cAAc,EAAAm/F,YAAa,EAAAtgF,YAAYK,MAC5CyrE,EAAK3qF,cAAc,EAAAuwB,cAAe,EAAA1R,YAAYG,SAC9C2rE,EAAK3qF,cAAc,EAAAo/F,eAAgB,EAAAvgF,YAAY/6B,OAC/C6mG,EAAK3qF,cAAc,EAAAq/F,iBAAkB,EAAAxgF,YAAYC,YACjD6rE,EAAK3qF,cAAc,EAAAs/F,kBAAmB,EAAAzgF,YAAYK,MAClDyrE,EAAK3qF,cAAc,EAAAu/F,wBAAyB,EAAA1gF,YAAYP,UACxDqsE,EAAK3qF,cAAc,EAAAw/F,aAAc,EAAA3gF,YAAYP,UAC7CqsE,EAAK3qF,cAAc,EAAAy/F,gBAAiB,EAAA5gF,YAAY/6B,OAChD6mG,EAAK3qF,cAAc,EAAA0/F,aAAc,EAAA7gF,YAAYK,MAC7CyrE,EAAK3qF,cAAc,EAAA2/F,UAAW,EAAA9gF,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA4/F,WAAY,EAAA/gF,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAA+oD,UAAW,EAAAlqC,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAAgpD,UAAW,EAAAnqC,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAAipD,UAAW,EAAApqC,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA6/F,UAAW,EAAAhhF,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAA8/F,WAAY,EAAAjhF,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAA+/F,cAAe,EAAAlhF,YAAYK,MAC9CyrE,EAAK3qF,cAAc,EAAAggG,WAAY,EAAAnhF,YAAYQ,MAC3CsrE,EAAK3qF,cAAc,EAAAigG,YAAa,EAAAphF,YAAYP,UAC5CqsE,EAAK3qF,cAAc,EAAAkgG,gBAAiB,EAAArhF,YAAYK,MAChDyrE,EAAK3qF,cAAc,EAAAmgG,SAAU,EAAAthF,YAAYI,OACzC0rE,EAAK3qF,cAAc,EAAAogG,aAAc,EAAAvhF,YAAYG,SAC7C2rE,EAAK3qF,cAAc,EAAAqgG,YAAa,EAAAxhF,YAAYG,SAC5C2rE,EAAK3qF,cAAc,EAAAkpD,UAAW,EAAArqC,YAAYK,MAC1CyrE,EAAK3qF,cAAc,EAAAsgG,eAAgB,EAAAzhF,YAAYM,MAC/CwrE,EAAK3qF,cAAc,EAAAugG,wBAAyB,EAAA1hF,YAAYM,MACxDwrE,EAAK3qF,cAAc,EAAAwgG,kBAAmB,EAAA3hF,YAAYM,MAClDwrE,EAAK3qF,cAAc,EAAAygG,iBAAkB,EAAA5hF,YAAYM,MACjDwrE,EAAK3qF,cAAc,EAAA0gG,WAAY,EAAA7hF,YAAYG,SAC3C2rE,EAAK3qF,cAAc,EAAA2gG,aAAc,EAAA9hF,YAAYG,SAC7C2rE,EAAK3qF,cAAc,EAAA4gG,cAAe,EAAA/hF,YAAYC,YAC9C6rE,EAAK3qF,cAAc,EAAAmpD,cAAe,EAAAtqC,YAAYP,UAC9CqsE,EAAK3qF,cAAc,EAAA6gG,cAAe,EAAAhiF,YAAYP,UAC9CqsE,EAAK3qF,cAAc,EAAA8gG,eAAgB,EAAAjiF,YAAY/6B,OAC/C6mG,EAAK3qF,cAAc,EAAA+gG,aAAc,EAAAliF,YAAYP,UAC7CqsE,EAAK3qF,cAAc,EAAAghG,YAAa,EAAAniF,YAAYK,MAC5CyrE,EAAK3qF,cAAc,EAAAihG,WAAY,EAAApiF,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAAkhG,UAAW,EAAAriF,YAAYO,OAC1CurE,EAAK3qF,cAAc,EAAAmhG,WAAY,EAAAtiF,YAAYK,MAC3CyrE,EAAK3qF,cAAc,EAAAopD,WAAY,EAAAvqC,YAAYP,UAC3CqsE,EAAK3qF,cAAc,EAAAohG,gBAAiB,EAAAviF,YAAYK,MAChDyrE,EAAK3qF,cAAc,EAAAqhG,UAAW,EAAAxiF,YAAYO,OAC1CurE,EAAK3qF,cAAc,EAAAshG,cAAe,EAAAziF,YAAY/6B,OAC9C6mG,EAAK3qF,cAAc,EAAAuhG,mBAAoB,EAAA1iF,YAAYO,OACnDurE,EAAK3qF,cAAc,EAAAwhG,kBAAmB,EAAA3iF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAAyhG,kBAAmB,EAAA5iF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAA0hG,kBAAmB,EAAA7iF,YAAYC,YAClD6rE,EAAK3qF,cAAc,EAAA2hG,mBAAoB,EAAA9iF,YAAYC,YACnD6rE,EAAK3qF,cAAc,EAAA4hG,kBAAmB,EAAA/iF,YAAYP,UAClDqsE,EAAK3qF,cAAc,EAAA6hG,kBAAmB,EAAAhjF,YAAYP,a,8EC1PpD,cACA,QACA,QACA,QACA,OASA,MAAMwjF,UAAiC,EAAA/zG,iBAAvC,c,oBACC,KAAAm7B,MAAQ,EAAA3hB,YAAYxjB,MAAM,IAE3B,MAAMg+G,EAAyB,IAAID,EACnC,MAAahD,UAAyB,EAAAlzG,YAAtC,c,oBACC,KAAAqC,cAAgB8zG,EAChB,cACC,MAAO,eAGR,kBACC98G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAbiB,MAa0B,EAAAt8B,oBAAoBG,OAIrE,UAAUyE,GACT,MAAMw7B,EAAQjkC,KAAK8M,mBAAmB,SAGhCC,EAAY,OADN/M,KAAKoI,YAAY,gBACS,EAAAE,UAAU27B,MAAMA,MACtDx7B,EAA8BwE,eAAejN,KAAM,CAAC+M,KAjBtD,qBA2BA,MAAMgwG,UAAiC,EAAAj0G,iBAAvC,c,oBACC,KAAAy7D,IAAM,EAAAjiD,YAAYtjB,QAAQ,IAE3B,MAAMg+G,EAAyB,IAAID,EACnC,MAAa3C,UAAyB,EAAAzzG,YAAtC,c,oBACC,KAAAqC,cAAgBg0G,EAChB,cACC,MAAO,eAGR,kBACCh9G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAbmB,QAa0B,EAAAt8B,oBAAoB/E,SAIvE,UAAU2J,GACT,MAAM87D,EAAMvkE,KAAK8M,mBAAmB,OAG9BC,EAAY,SADJ/M,KAAKoI,YAAY,oBACa,EAAAE,UAAUi8D,IAAIA,MAC1D97D,EAA8BwE,eAAejN,KAAM,CAAC+M,KAjBtD,sB,8EChDA,cACA,QACA,QACA,QACA,OAQA,MAAMkwG,UAAkC,EAAAn0G,iBAAxC,c,oBACC,KAAAxD,EAAI,EAAAgd,YAAYxjB,MAAM,GACtB,KAAAyG,EAAI,EAAA+c,YAAYxjB,MAAM,IAEvB,MAAMo+G,EAAgB,IAAID,EAC1B,MAAanD,UAA0B,EAAAnzG,YAAvC,c,oBACC,KAAAqC,cAAgBk0G,EAChB,cACC,MAAO,gBAIR,kBACCl9G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0B25E,EAAkB16D,YAAa,EAAAv7C,oBAAoBI,QAInF,UAAUwE,GACT,MAAMnD,EAAItF,KAAK8M,mBAAmB,KAC5BvH,EAAIvF,KAAK8M,mBAAmB,KAG5BC,EAAY,QADN/M,KAAKoI,YAAY0xG,EAAkB16D,kBACZ,EAAA92C,UAAU60G,OAAO73G,EAAGC,KACvDkD,EAA8BwE,eAAejN,KAAM,CAAC+M,KAnBtD,sBAKiB,EAAAqyC,YAAc,OAuB/B,MAAMg+D,UAAkC,EAAAt0G,iBAAxC,c,oBACC,KAAAxD,EAAI,EAAAgd,YAAYxjB,MAAM,GACtB,KAAAyG,EAAI,EAAA+c,YAAYxjB,MAAM,GACtB,KAAA0G,EAAI,EAAA8c,YAAYxjB,MAAM,IAEvB,MAAMu+G,EAAgB,IAAID,EAC1B,MAAarD,UAA0B,EAAApzG,YAAvC,c,oBACC,KAAAqC,cAAgBq0G,EAChB,cACC,MAAO,gBAIR,kBACCr9G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0B45E,EAAkB36D,YAAa,EAAAv7C,oBAAoBK,QAInF,UAAUuE,GACT,MAAMnD,EAAItF,KAAK8M,mBAAmB,KAC5BvH,EAAIvF,KAAK8M,mBAAmB,KAC5BtH,EAAIxF,KAAK8M,mBAAmB,KAG5BC,EAAY,QADN/M,KAAKoI,YAAY2xG,EAAkB36D,kBACZ,EAAA92C,UAAUg1G,OAAOh4G,EAAGC,EAAGC,KAC1DiD,EAA8BwE,eAAejN,KAAM,CAAC+M,KApBtD,sBAKiB,EAAAqyC,YAAc,OAwB/B,MAAMm+D,UAAkC,EAAAz0G,iBAAxC,c,oBACC,KAAAxD,EAAI,EAAAgd,YAAYxjB,MAAM,GACtB,KAAAyG,EAAI,EAAA+c,YAAYxjB,MAAM,GACtB,KAAA0G,EAAI,EAAA8c,YAAYxjB,MAAM,GACtB,KAAA2G,EAAI,EAAA6c,YAAYxjB,MAAM,IAEvB,MAAM0+G,EAAgB,IAAID,EAC1B,MAAavD,UAA0B,EAAArzG,YAAvC,c,oBACC,KAAAqC,cAAgBw0G,EAChB,cACC,MAAO,gBAIR,kBACCx9G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0B65E,EAAkB56D,YAAa,EAAAv7C,oBAAoBM,QAInF,UAAUsE,GACT,MAAMnD,EAAItF,KAAK8M,mBAAmB,KAC5BvH,EAAIvF,KAAK8M,mBAAmB,KAC5BtH,EAAIxF,KAAK8M,mBAAmB,KAC5BrH,EAAIzF,KAAK8M,mBAAmB,KAG5BC,EAAY,QADN/M,KAAKoI,YAAY4xG,EAAkB56D,kBACZ,EAAA92C,UAAUm1G,OAAOn4G,EAAGC,EAAGC,EAAGC,KAC7DgD,EAA8BwE,eAAejN,KAAM,CAAC+M,KArBtD,sBAKiB,EAAAqyC,YAAc,Q,8EC5F/B,cACA,QACA,OACA,QACA,QAGA,MAAMs+D,UAA0B,EAAA50G,kBAChC,MAAMC,EAAe,IAAI20G,EACzB,MAAMC,UAAwB,EAAAh3G,YAA9B,c,oBACC,KAAAqC,cAAgBD,GAQjB,SAAS60G,EAAer/G,EAAcE,GACrC,MAAMqqB,EAAarqB,EAAQqqB,WACrBigF,EAAatqG,EAAQsqG,WAC3B,OAAO,cAA0B4U,EAChC,cACC,OAAOp/G,EAGR,kBACCyB,KAAKa,GAAGC,QAAQqG,mCACf2hB,EAAW9jB,IAAKrI,GACR,IAAI,EAAAwjC,0BAA0BxjC,EAAG,EAAAkH,oBAAoB/E,SAI/D,gBACCkB,KAAK+gB,UAAUgoF,EAAY,MAAOjgF,EAAW9jB,IAAKrI,GAAM,IAGzD,UAAU8L,GACT,MAAMssB,EAAuB,GAEvB5vB,EAAMnF,KAAK8M,mBAAmB,OAEpC9M,KAAKa,GAAGC,QAAQu0B,oBAAoBzzB,QAASjF,IAC5C,MAAMm4B,EAAW90B,KAAKoI,YAAYzL,GAClCo4B,EAAWz5B,KAAK,SAASw5B,OAAc3vB,KAAOxI,OAE/C8L,EAA8BwE,eAAejN,KAAM+0B,KAKtD,MAAM8oF,EAAgB,CAAC,IAAK,IAAK,IAAK,KAEtC,MAAatB,UAA0BqB,EAAe,gBAAiB,CACtE90F,WAAY,CAAC,IAAK,KAClBigF,WAAY,EAAArqG,UAAUa,YAFvB,sBAIA,MAAai9G,UAA0BoB,EAAe,gBAAiB,CACtE90F,WAAY,CAAC,IAAK,IAAK,KACvBigF,WAAY,EAAArqG,UAAUc,YAFvB,sBAIA,MAAai9G,UAA0BmB,EAAe,gBAAiB,CACtE90F,WAAY+0F,EACZ9U,WAAY,EAAArqG,UAAUe,YAFvB,sBAKA,MAAai9G,UAA2BiB,EACvC,cACC,MAAO,iBAMR,kBACC39G,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0Bu8E,EAAmBoB,iBAAkB,EAAAj6G,oBAAoBK,MACvF,IAAI,EAAAi8B,0BAA0Bu8E,EAAmBqB,cAAe,EAAAl6G,oBAAoB/E,SAGtF,gBACCkB,KAAK+gB,UAAU,EAAAriB,UAAUe,QAASi9G,EAAmBsB,gBAAiBH,EAAc74G,IAAKrI,GAAM,IAGhG,UAAU8L,GACT,MAAMssB,EAAa,GAEbkpF,EAAUvB,EAAmBsB,gBAC7BE,EAAWxB,EAAmBoB,iBAC9BK,EAAQzB,EAAmBqB,cAC3B54G,EAAMnF,KAAK8M,mBAAmBmxG,GAE9B5oF,EAAoBr1B,KAAKa,GAAGC,QAAQu0B,oBAE1C,GAAIA,EAAkB/rB,QAAQ40G,IAAa,EAAG,CAC7C,MAAMppF,EAAW90B,KAAKoI,YAAY81G,GAClCnpF,EAAWz5B,KAAK,QAAQw5B,OAAc3vB,SAEvC,GAAIkwB,EAAkB/rB,QAAQ60G,IAAU,EAAG,CAC1C,MAAMrpF,EAAW90B,KAAKoI,YAAY+1G,GAClCppF,EAAWz5B,KAAK,SAASw5B,OAAc3vB,OAExCsD,EAA8BwE,eAAejN,KAAM+0B,IApCrD,uBAIiB,EAAAipF,gBAAkB,OAClB,EAAAF,iBAAmB,OACnB,EAAAC,cAAgB,K,8ECxEjC,cAQA,SAASK,EAAwB7/G,EAAcE,EAA2B,IACzE,MAAMuO,EAAiBvO,EAAQizC,QAAUnzC,EACnCwkE,EAAiBtkE,EAAQukE,KAAO,MAChCq7C,EAAgB5/G,EAAQykE,IAAM,KACpC,OAAO,cAAmB,EAAAo7C,iCACzB,cACC,OAAO//G,EAER,kBACC0H,MAAMmB,kBACNpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAEzE,eAAeoC,GACxB,OAAOi8G,EAEE,gBAAgBj8G,GACzB,OAAO2gE,EAER,iBACC,OAAO/1D,IAIV,MAAawrG,UAAkB4F,EAAwB,SAAvD,cACA,MAAa3F,UAAmB2F,EAAwB,OAAQ,CAACp7C,IAAK,cAAtE,eACA,MAAa61C,UAAmBuF,EAAwB,OAAQ,CAACp7C,IAAK,cAAtE,eACA,MAAa81C,UAAmBsF,EAAwB,OAAQ,CAACp7C,IAAK,cAAtE,eACA,MAAag2C,UAAmBoF,EAAwB,UAAxD,eACA,MAAanF,UAAkBmF,EAAwB,MAAO,CAACl7C,GAAI,cAAnE,cACA,MAAam2C,UAAsB+E,EAAwB,UAAW,CAACl7C,GAAI,UAAWF,IAAK,cAA3F,kBAEA,MAAay2C,UAAkB2E,EAAwB,SAAvD,cACA,MAAa1E,UAAmB0E,EAAwB,UAAxD,eACA,MAAanE,UAAoBmE,EAAwB,WAAzD,gBACA,MAAalE,UAAoBkE,EAAwB,WAAzD,gBACA,MAAa/D,UAA0B+D,EAAwB,eAAgB,CAAC1sE,OAAQ,kBAAxF,sBACA,MAAagpE,UAAkB0D,EAAwB,SAAvD,cACA,MAAazD,UAAmByD,EAAwB,UAAxD,eACA,MAAanD,UAAwBmD,EAAwB,YAAa,CAACp7C,IAAK,iBAAhF,oBACA,MAAa24C,UAAsByC,EAAwB,UAAW,CAACl7C,GAAI,UAAWF,IAAK,cAA3F,kBACA,MAAag5C,UAAmBoC,EAAwB,UAAxD,eACA,MAAanC,UAAkBmC,EAAwB,MAAO,CAACl7C,GAAI,cAAnE,cACA,MAAag5C,UAAmBkC,EAAwB,UAAxD,eACA,MAAahC,UAAkBgC,EAAwB,SAAvD,e,8ECpDA,cACA,QAEA,QASA,SAASG,EAAiChgH,EAAcE,GACvD,MAAM+/G,EAAY//G,EAAQ+/G,WAAajgH,EACjC4J,EAAc1J,EAAQukE,KAAO,MAC7By7C,EAAYhgH,EAAQggH,UACpBr7C,EAAmB3kE,EAAQ2kE,iBACjC,OAAO,cAAmB,EAAAG,iCACzB,cACC,OAAOhlE,EAER,kBACC0H,MAAMmB,kBACNpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAElFA,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAEpG,UAAUyI,GACT,MAAMkE,EAAgC3M,KAAKa,GAAGC,QAAQmH,+BAA+B,GAAG1J,KAQlFqO,EAPO5M,KAAKa,GAAG6G,OAAOmF,8BAA8B7H,IAAI,CAAC4C,EAAY9M,KAC1E,MAAM+B,EAAO+K,EAAW/K,KAClB6wD,EAAW1tD,KAAK8M,mBAAmBjQ,GACzC,GAAI6wD,EACH,OAAO,EAAAplD,UAAUC,IAAImlD,KAGExoD,KAAK,IAAIlF,KAAK0+G,mBAGjC3xG,EAAY,GAAGJ,KADT3M,KAAKoI,YAAYpI,KAAK8L,0BAA0B3D,YAAY,SAC9BnI,KAAKgN,oBAAoBJ,KACnEnE,EAA8BwE,eAAejN,KAAM,CAAC+M,IAErD,eAAe3K,GACd,MAAO,GAAGo8G,IAAYp8G,IAEvB,gBAAgBA,GACf,OAAO+F,EAER,eACC,OAAOs2G,EAEE,wBACT,IAAI96C,EAAmB3jE,KAAK8L,0BAA0BO,8BACtD,GAAIs3D,GAAoBP,IAClBA,EAAiBtd,SAAS6d,GAAmB,CAGjD,MAAMnjC,EAAmBxgC,KAAKa,GAAG6G,OAAOmF,8BAA8B,GAClE2zB,IACHmjC,EAAmBnjC,EAAiBjiC,MAIvC,MAAMA,EAAOolE,GAAoB,EAAA9/D,oBAAoB/E,MAE/C6/G,EAAsB3+G,KAAKa,GAAGkG,YAAY2F,oBAC1CkyG,EAAiBD,EAAsBnyG,KAAKC,IAAIkyG,EAAoB3jH,OAAS,EAAG,GAAK,EACrFglC,EAAuB,GAC7B,IAAK,IAAIllC,EAAI,EAAGA,EAAI8jH,EAAgB9jH,IACnCklC,EAAqB1kC,KAAKiD,GAE3B,OAAOyhC,EAEE,yBAET,MAAO,CADMhgC,KAAKgM,wBAAwB,MAK7C,MAAa0sG,UAAkB6F,EAAiC,MAAO,CACtEC,UAAW,MACXx7C,IAAK,MACLy7C,UAAW,QAHZ,cAKA,MAAalF,UAAqBgF,EAAiC,SAAU,CAC5EC,UAAW,MACXx7C,IAAK,SACLy7C,UAAW,QAHZ,iBAKA,MAAatC,UAAwBoC,EAAiC,YAAa,CAClFC,UAAW,MACXx7C,IAAK,YACLy7C,UAAW,QAHZ,oBAMA,MAAa5D,UAAmB0D,EAAiC,OAAQ,CACxEC,UAAW,OACXx7C,IAAK,UACLy7C,UAAW,OAEX,cACC,MAAO,OAER,uBAAuB5hH,GACtB,OAAO,EAGR,kBACCoJ,MAAMmB,kBACNpH,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAE1F,wBACT,MAAM6+G,EAAc7+G,KAAKgM,wBAEzB,MAAO,CADM6yG,EAAYA,EAAY7jH,OAAS,IAIrC,wBACT,MAAM0R,EAAoB1M,KAAKa,GAAGkG,YAAY2F,oBAC9C,GAAIA,EAAmB,CACtB,MAAM8zB,EAAmB9zB,EAAkB,GAE3C,GAAI8zB,EAAkB,CACrB,MAGMjiC,EAHwCyB,KAAKa,GAAG6G,OAAOmF,8BAC5D2zB,EAAiB/4B,aAEiClJ,KAC7CqgH,EAAiBlyG,EAAoBA,EAAkB1R,OAAS,EAAI,EACpE8jH,EAAc,IAAIzvE,MAAMuvE,GAE9B,GAAIrgH,GAAQ,EAAAsF,oBAAoB/E,MAAO,CACtC,MAAMigH,EAAoBryG,EAAoBA,EAAkB,GAAK,KACrE,GAAIqyG,EAAmB,CACtB,MAGMC,EAHyCh/G,KAAKa,GAAG6G,OAAOmF,8BAC7DkyG,EAAkBt3G,aAEwClJ,KAC3D,OAAIygH,GAAe,EAAAn7G,oBAAoB/E,MAE/BggH,EAAY95G,IAAKlK,GAAMyD,GAGvB,CAACA,EAAMygH,GAIf,MAAO,CAACzgH,EAAMA,GAIf,OAAOugH,EAAY95G,IAAI,IAAMzG,IAIhC,MAAO,CAAC,EAAAsF,oBAAoB/E,MAAO,EAAA+E,oBAAoB/E,QA5DzD,gB,8ECjGA,eAMA,SAASmgH,EAA+B1gH,EAAcE,GACrD,OAAO,cAAmB,EAAAygH,wCACzB,cACC,OAAO3gH,EAER,kBACC0H,MAAMmB,kBACNpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAGnF,oBACC,OAAOvB,EAAQ0gH,GAEN,gBAAgB/8G,GACzB,OAAO7D,EAEE,eAAe6D,EAAQ,GAChC,MAAO,GAAG7D,IAAO6D,MAIpB,MAAaw2G,UAAkBqG,EAA+B,MAAO,CAACE,GAAI,SAA1E,cACA,MAAajE,UAAiB+D,EAA+B,KAAM,CAACE,GAAI,SAAxE,c,8EC7BA,cAEA,QACA,QAGA,MAAsBD,UAAgD,EAAA37C,iCACrE,kBACCt9D,MAAMmB,kBACNpH,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAE1F,wBACT,MAAO,CAAC,EAAA6D,oBAAoBE,KAAM,EAAAF,oBAAoBE,MAG7C,yBACT,MAAO,CAAC,EAAAF,oBAAoBE,MAK7B,UAAU0E,GACT,MAIMmE,EAJO5M,KAAKa,GAAG6G,OAAOmF,8BAA8B7H,IAAI,CAACyuB,EAAa34B,KAC3E,MAAM+B,EAAO42B,EAAY52B,KACzB,OAAO,EAAAyL,UAAUC,IAAIvI,KAAK8M,mBAAmBjQ,MAErBqI,KAAK,IAAIlF,KAAKo/G,wBAGjCryG,EAAY,QADN/M,KAAKoI,YAAYpI,KAAK8L,0BAA0B3D,YAAY,SACrCyE,IACnCnE,EAA8BwE,eAAejN,KAAM,CAAC+M,KAzBtD,6C,2FCNA,QACA,2BACA,QACA,QAEA,IAAKsyG,GAAL,SAAKA,GACJ,YACA,UAFD,CAAKA,MAAS,KAId,MAAMC,EAA+B,CAACD,EAAUE,IAAKF,EAAUlkD,IAOzDqkD,EAAgC,CACrC,CAACH,EAAUE,KAHiB,CAAC,EAAG,EAAG,GAInC,CAACF,EAAUlkD,IAHgB,CAAC,EAAG,EAAG,IAMnC,MAAaw9C,UAAoB,EAAAp1C,iCAChC,cACC,MAAO,QAGR,kBACCt9D,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkBk9G,EAAWl9G,IACrFpC,KAAK8L,0BAA0BC,kCAAkC,IAAM,CACtE,EAAAlI,oBAAoBK,KACpB,EAAAL,oBAAoBK,OAErBlE,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAApI,oBAAoBM,OAM9F,uBAAuBtH,GACtB,OAAO2iH,EAAc3iH,GAEtB,iBACC,MAAO,QASR,0BACC,MAAO,CAAC,IAAI,EAAA6mE,qBAAqB1jE,KAAM,EAAA6D,oBAAoBM,KAAM,aAjCnE,iB,2FCrBA,QACA,4BACA,QACA,QAEA,MAAa+0G,UAAyB,EAAAoF,iCACrC,cACC,MAAO,aAGR,iBACC,MAAO,aAGR,0BACC,MAAO,CACN,IAAI,EAAA56C,qBACH1jE,KACAA,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACpF,aAdJ,sB,6BCLA,OAAe,8P,8ECAf,cACA,QACA,OACA,QACA,QAKA,MAAM2gH,UAA4B,EAAA32G,iBAAlC,c,oBACC,KAAAxD,EAAI,EAAAgd,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAA+F,EAAI,EAAA+c,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAEhC,MAAMuJ,EAAe,IAAI02G,EACzB,MAAatG,UAAoB,EAAAxyG,YAAjC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,QAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAjBa,QAiB0B,EAAAt8B,oBAAoBK,QAIjE,UAAUuE,GACT,MAAMnD,EAAI,EAAAgD,UAAU27B,MAAMjkC,KAAK8M,mBAAmB,MAC5CvH,EAAI,EAAA+C,UAAU27B,MAAMjkC,KAAK8M,mBAAmB,MAG5CC,EAAY,QADH/M,KAAKoI,YAzBF,oBA0B0B9C,MAAMC,KAClDkD,EAA8BwE,eAAejN,KAAM,CAAC+M,KApBtD,iB,oFCdA,E,KAAA,wBACA,SAEA,MAAaqsG,UAAoB,EAAAr0C,wBAAwB,QAAS,CACjE7B,GAAI,CAAC,KAAM,MAAO,OAClB7uC,QAAS,CAAC5nB,IAAK,GACf62D,UAAW,CAAC,eAHb,iB,6BCHA,OAAe,sY,2FCAf,QACA,QACA,4BACA,OACA,QAEA,QACA,QAGA,MAAMo8C,UAA2B,EAAA52G,iBAAjC,c,oBACC,KAAAsL,SAAW,EAAAkO,YAAY/iB,QAAQ,CAAC,EAAG,IACnC,KAAAmqE,OAAS,EAAApnD,YAAY/iB,QAAQ,CAAC,EAAG,IACjC,KAAA69D,OAAS,EAAA96C,YAAYxjB,MAAM,GAC3B,KAAA6gH,QAAU,EAAAr9F,YAAYxjB,MAAM,KAE7B,MAAMiK,EAAe,IAAI22G,EACzB,MAAapG,UAAmB,EAAA3yG,YAAhC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,OAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAlBa,QAkB0B,EAAAt8B,oBAAoB/E,SAIjE,UAAU2J,GACT,MAAM2L,EAAW,EAAA9L,UAAUs3G,QAAQ5/G,KAAK8M,mBAAmB,aACrD48D,EAAS,EAAAphE,UAAUs3G,QAAQ5/G,KAAK8M,mBAAmB,WACnDswD,EAAS,EAAA90D,UAAU27B,MAAMjkC,KAAK8M,mBAAmB,WACjD6yG,EAAU,EAAAr3G,UAAU27B,MAAMjkC,KAAK8M,mBAAmB,YAGlDC,EAAY,SADJ/M,KAAKoI,YAAY,mBACYgM,MAAas1D,MAAWtM,MAAWuiD,KAE9El3G,EAA8BwE,eAAejN,KAAM,CAAC+M,IAEpDtE,EAA8ByE,gBAAgBlN,KAAM,CACnD,IAAI,EAAA0jE,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAO,cA1B7D,gB,6BCjBA,OAAe,qjB,2FCAf,QACA,QAGA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,OACA,QAEA,QACA,QAEM+gH,EAAa,CAClB,cACA,UACA,WACA,gBACA,YACA,aACA,kBACA,cACA,eACA,eACA,WACA,YACA,iBACA,aACA,cACA,qBACA,iBACA,kBACA,SACA,mBACA,eACA,gBAOA,cACA,UACA,YAGKC,EAA0C,CAC/C,kBAAmB,UACnB,qBAAsB,UACtB,cAAe,UACf,cAAe,UACf,WAAY,UACZ,kBAAmB,UACnB,cAAe,UACf,iBAAkB,UAClBrsD,OAAQ,UACR,eAAgB,UAChB,cAAe,UACf,UAAW,UACX,UAAW,UACX,WAAY,UACZ,iBAAkB,UAClB,eAAgB,UAChB,eAAgB,UAChB,aAAc,UACd,aAAc,UACd,mBAAoB,UACpB,iBAAkB,UAClB,iBAAkB,UAClB,cAAe,UACf,YAAa,UACb,gBAAiB,UACjB,gBAAiB,UACjB,aAAc,UACd,aAAc,UACd,cAAe,UACf,YAAa,UACb,WAAY,WAEPssD,EAAyD,CAC9D,YAAa,CAAC,WACd,gBAAiB,CAAC,YAGbC,EAAgD,CACrD,kBAAmB,gBACnB,qBAAsB,mBACtB,cAAe,aACf,cAAe,aACf,WAAY,UACZ,kBAAmB,iBACnB,cAAe,aACf,iBAAkB,eAClBvsD,OAAQ,SACR,eAAgB,cAChB,cAAe,YACf,UAAW,SACX,UAAW,SACX,WAAY,UACZ,iBAAkB,eAClB,eAAgB,cAChB,eAAgB,aAChB,aAAc,YACd,aAAc,YACd,mBAAoB,iBACpB,iBAAkB,gBAClB,iBAAkB,eAClB,cAAe,YACf,YAAa,WACb,gBAAiB,eACjB,gBAAiB,cACjB,aAAc,YACd,aAAc,YACd,cAAe,aACf,YAAa,WACb,WAAY,WAIPwsD,EAAoBJ,EAAWv2G,QAAQ,eAC7C,MAAM42G,UAA6B,EAAAp3G,iBAAnC,c,oBACC,KAAAvK,KAAO,EAAA+jB,YAAYtjB,QAAQihH,EAAmB,CAC7Cn9E,KAAM,CACLC,QAAS88E,EAAW76G,IAAI,CAACnI,EAAM/B,KACvB,CAAC+B,KAAMA,EAAMS,MAAOxC,QAI9B,KAAAof,MAAQ,EAAAoI,YAAYxjB,MAAM,IAE3B,MAAMiK,EAAe,IAAIm3G,EACzB,MAAa1G,UAAqB,EAAA7yG,YAAlC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC9C,MAAMmB,kBAENpH,KAAK4G,wBAAwBu5G,0BAA0B,CAAC,SAExDngH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAzBa,MAyB0B,EAAAt8B,oBAAoB/E,SAIjE,UAAU2J,GACT,MAAM23G,EAAYP,EAAW7/G,KAAKwe,GAAGjgB,MAC/By/C,EAAcgiE,EAA0BI,GACxCC,EAAqBP,EAAoBM,GAE/C,IAAIE,EAAiB,CAAC,IAAI,EAAA58C,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAOuhH,IAChF,MAAME,GAAyBR,EAAiCK,IAAc,IAAIp7G,IAChFkqC,GAAM,IAAI,EAAAw0B,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAOowC,IAE9DqxE,IACHD,EAAiBC,EAAsBC,OAAOF,IAM/C,MAAMG,EAAW,EAAAn4G,UAAU27B,MAAMjkC,KAAK8M,mBAAmB,UAGnDC,EAAY,SAFA/M,KAAKoI,YA9CL,YAgDwB41C,KAAeyiE,KACzDh4G,EAA8ByE,gBAAgBlN,KAAMsgH,GACpD73G,EAA8BwE,eAAejN,KAAM,CAAC+M,KArCtD,kB,6BChKA,OAAe,gL,6BCAf,OAAe,4M,6BCAf,OAAe,mF,6BCAf,OAAe,uL,6BCAf,OAAe,kE,6BCAf,OAAe,wG,6BCAf,OAAe,qF,6BCAf,OAAe,yT,6BCAf,OAAe,yD,6BCAf,OAAe,gF,6BCAf,OAAe,kO,6BCAf,OAAe,uF,6BCAf,OAAe,qJ,6BCAf,OAAe,sH,6BCAf,OAAe,qI,6BCAf,OAAe,kE,6BCAf,OAAe,qI,6BCAf,OAAe,8K,6BCAf,OAAe,0c,6BCAf,OAAe,4H,6BCAf,OAAe,wG,6BCAf,OAAe,4I,6BCAf,OAAe,uF,6BCAf,OAAe,+F,6BCAf,OAAe,4E,6BCAf,OAAe,oK,6BCAf,OAAe,sE,6BCAf,OAAe,sE,6BCAf,OAAe,+F,6BCAf,OAAe,oF,6BCAf,OAAe,wI,2FCAf,QACA,4BACA,QACA,QAEMyyG,EAAoC,CACzCzyF,QAAS,EACTC,QAAS,GAGV,MAAa2sF,UAAkB,EAAA+G,iCAC9B,cACC,MAAO,MAGE,eAAet+G,GACxB,MAAO,CAAC,MAAO,UAAW,UAAW,WAAY,YAAYA,GAE9D,uBAAuBvF,GACtB,OAAO2iH,EAAc3iH,GAEZ,iBACT,MAAO,MAGR,0BACC,MAAO,CAAC,IAAI,EAAA6mE,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAO,aAhBpE,e,2FCVA,QACA,4BACA,QACA,QAEM0gH,EAAoC,CACzCzyF,QAAS,EACTC,QAAS,GAGV,MAAa4sF,UAAoB,EAAA30C,iCAChC,cACC,MAAO,QAGR,cAAc7iE,GACb,MAAO,CAAC,MAAO,UAAW,WAAWA,GAEtC,uBAAuBvF,GACtB,OAAO2iH,EAAc3iH,GAEtB,iBACC,MAAO,QAGR,0BACC,MAAO,CAAC,IAAI,EAAA6mE,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAO,aAhBpE,iB,2FCVA,QACA,QAEA,4BACA,QACA,QAEA,QAGA,OACA,MAAM6hH,UAA+B,EAAA73G,iBAArC,c,oBACC,KAAA83G,IAAM,EAAAt+F,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAElC,MAAMuJ,EAAe,IAAI43G,EACzB,MAAaxG,UAAuB,EAAAxzG,YAApC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,aAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAhBa,MAgB0B,EAAAt8B,oBAAoBK,QAIjE,UAAUuE,GACT,MAAMo4G,EAA6B,GAC7B9rF,EAAa,GAEnB8rF,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM,EAAA6D,oBAAoBK,KAAM,YAEzF,MAAM5G,EAAQ,EAAAgL,UAAUjD,QAAQrF,KAAK8M,mBAAmB9M,KAAK/B,EAAE2iH,IAAI/jH,OAE7DikH,EAAM9gH,KAAKoI,YA5BC,OA6BlB2sB,EAAWz5B,KAAK,QAAQwlH,eAAiBxjH,MACzCmL,EAA8ByE,gBAAgBlN,KAAM6gH,GACpDp4G,EAA8BwE,eAAejN,KAAM+0B,IAzBrD,oB,6BCfA,OAAe,sU,2FCAf,QACA,QAEA,2BACA,OACA,QACA,QAEA,QAEMgsF,EACK,WADLA,EAEG,SAFHA,EAGc,mBAHdA,EAIiB,sBAJjBA,EAKW,gBAGjB,MAAMC,UAAwC,EAAAl4G,iBAA9C,c,oBACC,KAAAsL,SAAW,EAAAkO,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACtC,KAAAooD,OAAS,EAAAtlC,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACpC,KAAAyhH,kBAAoB,EAAA3+F,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/C,KAAA0hH,qBAAuB,EAAA5+F,YAAY7iB,QAAQ,CAAC,EAAG,EAAG,EAAG,IACrD,KAAA0hH,eAAiB,EAAA7+F,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAE7C,MAAMuJ,EAAe,IAAIi4G,EACzB,MAAa1G,UAAgC,EAAA3zG,YAA7C,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,qBAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0BngC,KAAKohH,0BAA2B,EAAAv9G,oBAAoBK,MAClF,IAAI,EAAAi8B,0BAA0BngC,KAAKqhH,wBAAyB,EAAAx9G,oBAAoBK,QAIlF,UAAUuE,GACT,MAAMssB,EAAa,GACb8rF,EAA6B,GAEnCA,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM,EAAA6D,oBAAoBM,KAAM,YAEzF,MACMiQ,EADiBpU,KAAKa,GAAG6G,OAAO+rB,YAAYzzB,KAAK/B,EAAEmW,SAASvX,MAE/D,EAAAyL,UAAU27B,MAAMjkC,KAAK8M,mBAAmB9M,KAAK/B,EAAEmW,SAASvX,OACxDmD,KAAKshH,oBAGF15D,EADe5nD,KAAKa,GAAG6G,OAAO+rB,YAAYzzB,KAAK/B,EAAE2pD,OAAO/qD,MAE3D,EAAAyL,UAAU27B,MAAMjkC,KAAK8M,mBAAmB9M,KAAK/B,EAAE2pD,OAAO/qD,OACtDmD,KAAKuhH,kBAGFC,EADyBxhH,KAAKa,GAAG6G,OAAO+rB,YAAYzzB,KAAK/B,EAAEgjH,kBAAkBpkH,MAEhF,EAAAyL,UAAU27B,MAAMjkC,KAAK8M,mBAAmB9M,KAAK/B,EAAEgjH,kBAAkBpkH,OACjEmD,KAAKyhH,2BAA2Bh5G,GAI7Bi5G,EAD4B1hH,KAAKa,GAAG6G,OAAO+rB,YAAYzzB,KAAK/B,EAAEijH,qBAAqBrkH,MAEtF,EAAAyL,UAAU27B,MAAMjkC,KAAK8M,mBAAmB9M,KAAK/B,EAAEijH,qBAAqBrkH,OACpEmD,KAAK2hH,oCAAoCl5G,GAGtCm5G,EADsB5hH,KAAKa,GAAG6G,OAAO+rB,YAAYzzB,KAAK/B,EAAEkjH,eAAetkH,MAE1E,EAAAyL,UAAU27B,MAAMjkC,KAAK8M,mBAAmB9M,KAAK/B,EAAEkjH,eAAetkH,OAC9DmD,KAAK6hH,8BAA8Bp5G,GAEhCq5G,EAAkB9hH,KAAKoI,YAAYpI,KAAKohH,2BACxCW,EAAgB/hH,KAAKoI,YAAYpI,KAAKqhH,yBAC5CtsF,EAAWz5B,KAAK,QAAQwmH,YAA0B1tG,MAClD2gB,EAAWz5B,KAAK,GAAGwmH,QAAsBF,KACzC7sF,EAAWz5B,KAAK,GAAGwmH,yBAAuCA,MAAoBJ,OAC9E3sF,EAAWz5B,KAAK,GAAGwmH,QAAsBN,KACzCzsF,EAAWz5B,KAAK,QAAQymH,YAAwBn6D,MAChD7yB,EAAWz5B,KAAK,GAAGymH,yBAAqCA,MAAkBL,OAE1Ej5G,EAA8BwE,eAAejN,KAAM+0B,GACnDtsB,EAA8ByE,gBAAgBlN,KAAM6gH,GAErD,0BACC,MAAO,WAER,wBACC,MAAO,SAGA,oBACP,OAAOE,EAEA,kBACP,OAAOA,EAEA,2BAA2Bt4G,G,QAClC,OAAyE,QAAzE,EAAyB,QAAzB,EAAOzI,KAAKuD,qBAAa,eAAEgE,qBAAqB2pB,UAAUgD,uBAAe,eAAEC,eAC1En0B,KACA,EAAA6D,oBAAoBK,KACpB68G,EACAt4G,GAMM,oCAAoCA,G,QAC3C,OAAyE,QAAzE,EAAyB,QAAzB,EAAOzI,KAAKuD,qBAAa,eAAEgE,qBAAqB2pB,UAAUgD,uBAAe,eAAEC,eAC1En0B,KACA,EAAA6D,oBAAoBM,KACpB48G,EACAt4G,GAMM,8BAA8BA,G,QACrC,OAAyE,QAAzE,EAAyB,QAAzB,EAAOzI,KAAKuD,qBAAa,eAAEgE,qBAAqB2pB,UAAUgD,uBAAe,eAAEC,eAC1En0B,KACA,EAAA6D,oBAAoBK,KACpB68G,EACAt4G,IAnGH,6B,8EC1BA,cACA,QAEA,MAAa8xG,UAAqB,EAAA+D,iCACjC,cACC,MAAO,SAGR,kBACCr4G,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAG1F,eAAeoC,GACxB,MAAO,CAAC,KAAKA,GAEd,iBACC,MAAO,SAGE,yBACT,MAAO,CAAC,EAAAyB,oBAAoB/E,QApB9B,kB,8ECHA,cACA,QACA,QACA,QAIA,OACA,MAAMkjH,UAAgC,EAAAl5G,iBAAtC,c,oBACC,KAAA83G,IAAM,EAAAt+F,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAElC,MAAMuJ,EAAe,IAAIi5G,EACzB,MAAaxH,UAAwB,EAAA7zG,YAArC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,YAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAhBa,MAgB0B,EAAAt8B,oBAAoB/E,SAIjE,UAAU2J,GACT,MAAMnL,EAAQ,EAAAgL,UAAUjD,QAAQrF,KAAK8M,mBAAmB,UAIlDC,EAAY,SAFN/M,KAAKoI,YAAY,sCAEiC9K,KAC9DmL,EAA8BwE,eAAejN,KAAM,CAAC+M,KApBtD,qB,8ECZA,cACA,QAEA,MAAa6tG,UAAkB,EAAAhvG,yBAC9B,cACC,MAAO,MAGR,kBACC3F,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,SAAU,SAAU,SAASA,IACxGpC,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAClFA,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAG1F,kBACT,MAAO,MAGE,wBACT,MAAMzB,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoB/E,MACjG,MAAO,CAACP,EAAMA,EAAM,EAAAsF,oBAAoB/E,OAG/B,yBAET,MAAO,CADMkB,KAAKgM,wBAAwB,KAxB5C,e,8ECHA,cACA,QAGMwzG,EAAoC,CACzCyC,KAAM,GAGP,IAAK5C,GAAL,SAAKA,GACJ,gBACA,oBACA,cACA,sBAJD,CAAKA,MAAS,KAOd,MAAavE,UAAsB,EAAAoH,iCAClC,cACC,MAAO,WAGE,eAAe9/G,GACxB,MAAO,CAACi9G,EAAU8C,MAAO9C,EAAU+C,QAAS/C,EAAUgD,KAAMhD,EAAUiD,UAAUlgH,GAEjF,uBAAuBvF,GACtB,OAAO2iH,EAAc3iH,GAGtB,UAAU4L,GACT,MAAMnL,EAAQ,EAAAgL,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAU8C,QACxDI,EAAU,EAAAj6G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAU+C,UAC1DH,EAAO,EAAA35G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUgD,OACvDG,EAAW,EAAAl6G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUiD,WAE3DtuF,EAAUh0B,KAAKkM,yBAAyB,GACxCu2G,EAAWziH,KAAKa,GAAGC,QAAQmH,+BAA+B,GAAGpL,KAE7DkQ,EAAY,GAAGinB,KADTh0B,KAAKoI,YAAYq6G,SACaR,MAAS3kH,OAAWilH,SAAeC,IAC7E/5G,EAA8BwE,eAAejN,KAAM,CAAC+M,KAtBtD,mB,8ECfA,cACA,QAGA,MAAa0tG,UAAqB,EAAA6D,iCACjC,cACC,MAAO,SAGR,kBACCr4G,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,MAAMA,IAGxE,eAAeA,GACxB,MAAO,CAAC,MAAMA,GAGf,UAAUqG,GACT,MAAMg4G,EAAW,EAAAn4G,UAAUC,IAAIvI,KAAK8M,mBAAmB9M,KAAKoM,eAAe,KAIrEW,EAAY,GAFF/M,KAAKa,GAAG6G,OAAOmF,8BAA8B,GAAGtO,QACpDyB,KAAKoI,YAAYpI,KAAK8L,0BAA0B3D,YAAY,gBACxBs4G,IAChDh4G,EAA8BwE,eAAejN,KAAM,CAAC+M,KArBtD,kB,2FCJA,2BACA,QACA,QACA,SAGA,4BAKA,4BACA,4BACA,4BACA,4BACA,4BAEA,4BACA,QAGA,IAAK21G,GAAL,SAAKA,GAKJ,wCAEA,wCAEA,wCAEA,qBACA,qBAEA,qBAdD,CAAKA,MAAU,KAwBf,MAAMC,EAAiC,CACtCD,EAAWE,kBACXF,EAAWG,kBACXH,EAAWI,kBACXJ,EAAWK,SACXL,EAAWM,SACXN,EAAWO,UAINC,EAAsC,CAC3C,CAACR,EAAWE,mBAAoB,UAChC,CAACF,EAAWG,mBAAoB,UAChC,CAACH,EAAWI,mBAAoB,UAChC,CAACJ,EAAWK,UAAW,UACvB,CAACL,EAAWM,UAAW,UACvB,CAACN,EAAWO,UAAW,WAGlBE,EAAmD,CACxD,CAACT,EAAWE,mBAAoB,EAAA/+G,oBAAoBI,KACpD,CAACy+G,EAAWG,mBAAoB,EAAAh/G,oBAAoBK,KACpD,CAACw+G,EAAWI,mBAAoB,EAAAj/G,oBAAoBM,KACpD,CAACu+G,EAAWK,UAAW,EAAAl/G,oBAAoBI,KAC3C,CAACy+G,EAAWM,UAAW,EAAAn/G,oBAAoBK,KAC3C,CAACw+G,EAAWO,UAAW,EAAAp/G,oBAAoBM,MAGtCi/G,EAAmD,CACxD,CAACV,EAAWE,mBAAoB,EAAA/+G,oBAAoB/E,MACpD,CAAC4jH,EAAWG,mBAAoB,EAAAh/G,oBAAoB/E,MACpD,CAAC4jH,EAAWI,mBAAoB,EAAAj/G,oBAAoB/E,MACpD,CAAC4jH,EAAWK,UAAW,EAAAl/G,oBAAoB/E,MAC3C,CAAC4jH,EAAWM,UAAW,EAAAn/G,oBAAoB/E,MAC3C,CAAC4jH,EAAWO,UAAW,EAAAp/G,oBAAoB/E,OAEtCukH,EAA4C,CACjD,CAACX,EAAWE,mBAAoB,SAChC,CAACF,EAAWG,mBAAoB,SAChC,CAACH,EAAWI,mBAAoB,SAChC,CAACJ,EAAWK,UAAW,SACvB,CAACL,EAAWM,UAAW,SACvB,CAACN,EAAWO,UAAW,UAGxB,IAAKK,GAAL,SAAKA,GACJ,2BACA,qBACA,mBACA,mBACA,mBALD,CAAKA,MAAW,KAOhB,MAAMC,EAAmC,CACxCD,EAAYE,SACZF,EAAYG,MACZH,EAAYI,KACZJ,EAAYK,KACZL,EAAYM,MAGPC,EAAwC,CAC7C,CAACP,EAAYE,UAAW,gBACxB,CAACF,EAAYG,OAAQ,QACrB,CAACH,EAAYI,MAAO,OACpB,CAACJ,EAAYK,MAAO,OACpB,CAACL,EAAYM,MAAO,QAGfE,EAA6D,CAClE,CAACR,EAAYE,UAAW,EAAA3/G,oBAAoB/E,MAC5C,CAACwkH,EAAYG,OAAQ,EAAA5/G,oBAAoB/E,MACzC,CAACwkH,EAAYI,MAAO,EAAA7/G,oBAAoBI,KACxC,CAACq/G,EAAYK,MAAO,EAAA9/G,oBAAoBK,KACxC,CAACo/G,EAAYM,MAAO,EAAA//G,oBAAoBM,MAGnC4/G,EAAiB,CAAC,IAAK,IAAK,IAAK,KAEjCC,EAAqBrB,EAAYr5G,QAAQo5G,EAAWM,UACpDiB,EAAsBX,EAAYE,SAElChE,EAAoC,CACzC0E,IAAK,EACLC,KAAM,GAGP,IAAK9E,GAAL,SAAKA,GACJ,YACA,sBACA,cACA,kBAJD,CAAKA,MAAS,KAOd,aAEA,QACA,QACA,MAAM+E,UAA4B,EAAAt7G,iBAAlC,c,oBACC,KAAAvK,KAAO,EAAA+jB,YAAYtjB,QAAQglH,EAAoB,CAC9ClhF,KAAM,CACLC,QAAS4/E,EAAY39G,IAAI,CAACq/G,EAAYvpH,KAG9B,CAAC+B,KADK,GAAGwnH,cADUjB,EAA0BiB,MAEhC/mH,MAAOxC,QAI9B,KAAAwpH,YAAc,EAAAhiG,YAAYtjB,QAAQilH,EAAqB,CACtDnhF,KAAM,CACLC,QAASwgF,EAAav+G,IAAKs/G,IAC1B,MAAM71G,EAAM80G,EAAae,GAEzB,MAAO,CAACznH,KADKgnH,EAAkBp1G,GACXnR,MAAOmR,QAI9B,KAAA81G,QAAU,EAAAjiG,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KACvE,KAAA6/E,gBAAkB,EAAAliG,YAAYxjB,MAAM,GAAK,CAAC4lC,MAAO,CAAC,EAAG,KACrD,KAAA+/E,cAAgB,EAAAniG,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MACjD,KAAAkgD,UAAY,EAAAtiE,YAAYjjB,aAEzB,MAAM0J,EAAe,IAAIq7G,EACzB,MAAapJ,UAAoB,EAAAr0G,YAAjC,c,oBACC,KAAAqC,cAAgBD,EAMA,KAAA+C,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MAJjG,cACC,MAAO,QAIR,kBACCiG,MAAMmB,kBACNpH,KAAK8L,0BAA0B1E,kBAC/BpH,KAAK4G,wBAAwBu5G,0BAA0B,CAAC,UAAW,kBAAmB,kBAEtFngH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BA3Da,QA2D0B,EAAAt8B,oBAAoB/E,SAGhEkB,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAG1F,eAAeoC,GACxB,MAAO,CAACi9G,EAAUqF,IAAKrF,EAAUsF,SAAUtF,EAAUuF,KAAMvF,EAAUwF,QAAQziH,GAE9E,uBAAuBvF,GACtB,OAAO2iH,EAAc3iH,GAGd,wBACP,MAAMwnH,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MACjCA,EAAO4kH,EAA0BkB,GACvC,MAAO,CAAC9lH,EAAMA,EAAMA,EAAMA,GAEnB,yBACP,MAAM8lH,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MACjC+lH,EAAcf,EAAavjH,KAAKwe,GAAG8lG,aACzC,OAAIA,GAAehB,EAAYE,SACvB,CAACJ,EAA0BiB,IAE3B,CAACP,EAA+BQ,IAIzC,UAAU77G,GACT,MAAMo4G,EAA6B,GAC7B9rF,EAAa,GAEbsvF,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MACjCumH,EAAiB5B,EAAqBmB,GACtCU,EAAuB3B,EAA0BiB,GACvDxD,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM+kH,EAAsB,YACrFlE,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM+kH,EAAsBD,IACrFjE,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM+kH,EAAsB/kH,KAAKglH,iBAE1F,MAAMC,EAAiBjlH,KAAKkM,yBAAyB,GAGrD,GAAI+4G,GAAkBF,EAAsB,CAC3C,MAAMltD,EAAO73D,KAAKklH,oBAElBnwF,EAAWz5B,KAAKu8D,OACV,CAEN,MAUMstD,EAV6B,EAAAzgH,kCAAkCugH,GAW/DG,EAA0B,GAC1BC,EAAQrlH,KAAKoI,YAAY,SAC/B,IAAK,IAAItN,EAAI,EAAGA,EAAIqqH,EAAsBrqH,IAAK,CAC9C,MAAMw4C,EAAYywE,EAAejpH,GACjCsqH,EAAc9pH,KAAK,GAAG+pH,IAAQ/xE,KAC9B,MAKMgyE,EALanC,EAA0BkB,GAMvCkB,EAA0B,EAAA7gH,kCAAkC4gH,GAI5DE,EAAU,GAAGF,KAHG,UAAaC,GACjCvgH,IAAKhJ,GAAM,EAAAsM,UAAU27B,MAAM,IAAOnpC,IAClCoK,KAAK,SAED2yD,EAAO73D,KAAKklH,kBAAkB5xE,EAAWA,EAAWkyE,GAC1DzwF,EAAWz5B,KAAKu8D,GAGjB,MACM4tD,EAAgB,MAAMN,KAAwBE,UAAcF,KAD9CC,EAAclgH,KAAK,SAEvC6vB,EAAWz5B,KAAKmqH,GAIjBh9G,EAA8ByE,gBAAgBlN,KAAM6gH,GACpDp4G,EAA8BwE,eAAejN,KAAM+0B,GAG5C,kBACP,MAAMsvF,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MAEvC,MAAO,OADa8kH,EAA2BgB,MAClBrkH,KAAKnD,OAG3B,eACP,MAAMwnH,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MACjCy/C,EAAcqlE,EAA2BgB,GAEzCqB,EAAavC,EAA0BkB,GAE7C,MAAO,WACDrkH,KAAK2lH,yBAAyBD,kFAGf,EAAAp9G,UAAUi8D,IAAIvkE,KAAKwe,GAAG+lG,8CACpBvmE,qBACf,EAAA11C,UAAU27B,MAAMjkC,KAAKwe,GAAGimG,qCACjB,EAAAn8G,UAAU27B,MAAMjkC,KAAKwe,GAAGgmG,+CAOhC,kBAAkBoB,EAA6BtyE,EAAoBkyE,GAC1E,MAAMnB,EAAa1B,EAAY3iH,KAAKwe,GAAGjgB,MAEjCy/C,EAAch+C,KAAK2lH,kBAEnBzB,EAAM,EAAA57G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUqF,MACtDtwG,EAAW,EAAA9L,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUsF,WAC3DR,EAAO,EAAA77G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUuF,OAC7D,IAAI16D,EAAS,EAAA5hD,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUwF,SACzDW,IACHt7D,EAAS,IAAIA,KAAUs7D,MAExB,MA4BM54G,EA5BO,CAAC,IAAIwH,KAAY+vG,MAASj6D,KA4BdhlD,KAAK,MAIxBmgH,EAAQrlH,KAAKoI,YA3ND,SA4NZy9G,EAAa,GAAG3B,KAAOlmE,KAAepxC,KAC5C,GAAI0mC,EACH,MAAO,SAAS+xE,IAAQO,QAAyBC,MAAevyE,IAIhE,MAAO,GADa8vE,EAA0BiB,MACrBgB,OAAWQ,KArLvC,iB,6BCvKA,OAAe,2jC,6BCAf,OAAe,kxF,6BCAf,OAAe,gvK,6BCAf,OAAe,swV,6BCAf,OAAe,i/D,6BCAf,OAAe,qqF,6BCAf,OAAe,24G,8ECAf,cAGA,QAGA,MAAa9K,UAAmB,EAAAuD,iCAC/B,cACC,MAAO,OAGR,UAAU71G,GACT,MAAMg4G,EAAW,EAAAn4G,UAAUC,IAAIvI,KAAK8M,mBAAmB,OAIjDC,EAAY,GAFF/M,KAAKa,GAAG6G,OAAOmF,8BAA8B,GAAGtO,QACpDyB,KAAKoI,YAAY,cACYq4G,IACzCh4G,EAA8BwE,eAAejN,KAAM,CAAC+M,KAXtD,gB,8ECNA,cAMA,OAEA,MAAM+4G,UAA6B,EAAAh9G,kBAanC,MAAMC,EAAe,IAAI+8G,EAEzB,MAAa3K,UAAqB,EAAAx0G,YAAlC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC9C,MAAMmB,kBACNpH,KAAKqY,oBAAoB,wBAAyBrY,KAAKy/C,sBAAsB5hD,KAAKmC,OAGnF,gB,MACmB,QAAlB,EAAAA,KAAKuD,qBAAa,SAAEgE,qBAAqB00B,kBAAkBj8B,MAG5D,UAAUyI,G,MAES,QAAlB,EAAAzI,KAAKuD,qBAAa,SAAEgE,qBAAqB2pB,UAAU60F,sBAAsB/lH,KAAMyI,IAjBjF,kB,2FCvBA,QACA,QAMA,2BAEA,OACA,QACA,QACA,SAEA,SACA,MAAMu9G,UAA4B,EAAAl9G,iBAAlC,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,IAC1B,KAAAf,KAAO,EAAA+jB,YAAYtjB,QAAQ,EAAA8E,qBAAqBwF,QAAQ,EAAAzF,oBAAoB/E,OAAQ,CACnFgkC,KAAM,CACLC,QAAS,EAAAj/B,qBAAqBkB,IAAI,CAACnI,EAAM/B,KACjC,CAAC+B,KAAMA,EAAMS,MAAOxC,QAI9B,KAAAmrH,SAAW,EAAA3jG,YAAY1jB,QAAQ,EAAG,CACjC+wB,WAAY,CAACpxB,KAAM,EAAAuF,qBAAqBwF,QAAQ,EAAAzF,oBAAoBK,UAGtE,MAAM6E,EAAe,IAAIi9G,EAEzB,MAAa5K,UAAoB,EAAAz0G,YAAjC,c,oBACC,KAAAqC,cAAgBD,EAIN,KAAA07D,mCAA6C,EAC/C,KAAA1lB,kCAAoC/+C,KAAKg/C,4BAA4BnhD,KAAKmC,MAClE,KAAA8L,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MALjG,cACC,MAAO,QAMR,kBACCA,KAAKqY,oBAAoB,wBAAyBrY,KAAKy/C,sBAAsB5hD,KAAKmC,OAClFA,KAAKw/B,UAAUyV,mBAAmBj1C,KAAK++C,mCACvC/+C,KAAK8L,0BAA0B1E,kBAE/BpH,KAAK8L,0BAA0BC,kCAAkC,IAAM,IACvE/L,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAAnI,qBAAqB9D,KAAKwe,GAAGjgB,QAavG,UAAUkK,GACT,MAAMutB,EAAc,GAEdhC,EAAU,EAAAlwB,qBAAqB9D,KAAKwe,GAAGjgB,MACvCu2B,EAAW90B,KAAKkrC,eAEtBlV,EAAY16B,KAAK,IAAI,EAAAi6B,oBAAoBv1B,KAAMg0B,EAASc,IACxDrsB,EAA8ByE,gBAAgBlN,KAAMg2B,GAErD,oBACC,MAAMhC,EAAU,EAAAlwB,qBAAqB9D,KAAKwe,GAAGjgB,MACvCqU,EAAgB,EAAApO,4BAA4BwvB,GAClD,IAAI+0E,EAAa,EAAA3kG,kCAAkC4vB,GAEnDh0B,KAAK0I,0BAA4B1I,KAAK0I,2BAA6B,IAAI,EAAAyhG,uBACvEnqG,KAAK0I,0BAA0BC,QAG9BogG,GAAc,EAAArqG,UAAUc,SACxBQ,KAAK/B,EAAEgoH,SAAS3oH,OAChB,UAAesV,IACS,GAAxBA,EAAc5X,OAEdgF,KAAK0I,0BAA0Bw9G,gBAC9B,EAAAxnH,UAAUG,MACVmB,KAAKwe,GAAG3hB,KACR+V,EACA5S,KAAKkrC,gBAGNlrC,KAAK0I,0BAA0Bw9G,gBAC9Bnd,EACA/oG,KAAKwe,GAAG3hB,KACR+V,EACA5S,KAAKkrC,gBAIR,eACC,MAAMljC,EAA0BhI,KAAKa,GAAGC,QAAQmH,+BAA+B,GAE/E,OADiBjI,KAAKoI,YAAYJ,EAAwBnL,MAgBnD,8BACa,IAAhBmD,KAAKwe,GAAG3hB,MACXmD,KAAK/B,EAAEpB,KAAK0D,IAAIP,KAAKnD,OAtFxB,iB,8EC9BA,cACA,QAEA,MAAa++G,UAAsB,EAAAhwG,yBAClC,cACC,MAAO,UAGR,kBACC3F,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,IAAK,IAAK,OAAOA,IAC5FpC,KAAK8L,0BAA0B03D,yBAA0BphE,GAAkB,WAC3EpC,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OAGpG,iBACC,MAAO,UAGE,wBACT,MAAMzB,EAAOyB,KAAK8L,0BAA0BO,+BAAiC,EAAAxI,oBAAoBK,KACjG,MAAO,CAAC3F,EAAMA,EAAM,EAAAsF,oBAAoB/E,OAG/B,yBAET,MAAO,CADMkB,KAAKgM,wBAAwB,KAxB5C,mB,2FCHA,QACA,2BACA,QACA,QAEA,MAAaqvG,UAAuB,EAAAiD,iCACnC,cACC,MAAO,YAER,kBACCr4G,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,QAAS,SAASA,IAC7FpC,KAAK8L,0BAA0BC,kCAAkC,IAAM,CACtE,EAAAlI,oBAAoBM,KACpB,EAAAN,oBAAoBM,OAErBnE,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAApI,oBAAoBM,OAM9F,iBACC,MAAO,YASR,0BACC,MAAO,CAAC,IAAI,EAAAu/D,qBAAqB1jE,KAAM,EAAA6D,oBAAoBM,KAAM,aA7BnE,oB,2FCLA,QACA,2BACA,QACA,QAEA,IAAKk7G,GAAL,SAAKA,GACJ,cACA,gBAFD,CAAKA,MAAS,KAId,MAAMC,EAA+B,CAACD,EAAU8G,KAAM9G,EAAU+G,OAO1D5G,EAAgC,CACrC,CAACH,EAAU8G,MAHkB,CAAC,EAAG,EAAG,GAIpC,CAAC9G,EAAU+G,OAHkB,GAM9B,MAAa9K,UAAgC,EAAA/3C,iCAC5C,cACC,MAAO,uBAGR,kBACCt9D,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkBk9G,EAAWl9G,IACrFpC,KAAK8L,0BAA0BC,kCAAkC,IAAM,CACtE,EAAAlI,oBAAoBK,KACpB,EAAAL,oBAAoB/E,QAErBkB,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAApI,oBAAoBM,OAM9F,uBAAuBtH,GACtB,OAAO2iH,EAAc3iH,GAEtB,iBACC,MAAO,uBASR,0BACC,MAAO,CAAC,IAAI,EAAA6mE,qBAAqB1jE,KAAM,EAAA6D,oBAAoBM,KAAM,aAjCnE,6B,2FCrBA,QACA,2BACA,QACA,QAEA,MAAao3G,UAA0B,EAAA+C,iCACtC,cACC,MAAO,gBAGR,kBACCr4G,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,QAAQA,IACnFpC,KAAK8L,0BAA0BC,kCAAkC,IAAM,CAAC,EAAAlI,oBAAoBM,OAC5FnE,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAApI,oBAAoB/E,QAM9F,iBACC,MAAO,gBASR,0BACC,MAAO,CAAC,IAAI,EAAA4kE,qBAAqB1jE,KAAM,EAAA6D,oBAAoB/E,MAAO,aA3BpE,uB,2FCLA,QACA,2BACA,QACA,QAEA,MAAa08G,UAAyB,EAAA8C,iCACrC,cACC,MAAO,eAGR,kBACCr4G,MAAMmB,kBAENpH,KAAK8L,0BAA0BK,wBAAyB/J,GAAkB,CAAC,QAAQA,IACnFpC,KAAK8L,0BAA0BC,kCAAkC,IAAM,CAAC,EAAAlI,oBAAoBM,OAC5FnE,KAAK8L,0BAA0BG,mCAAmC,IAAM,CAAC,EAAApI,oBAAoBK,OAM9F,iBACC,MAAO,eASR,0BACC,MAAO,CAAC,IAAI,EAAAw/D,qBAAqB1jE,KAAM,EAAA6D,oBAAoBK,KAAM,aA3BnE,sB,8ECLA,cACA,QACA,QAEA,QACA,SACA,SACA,QAIA,OACA,MAAMmiH,UAA2B,EAAAv9G,iBAAjC,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,QAC1B,KAAA4a,MAAQ,EAAAoI,YAAYxjB,MAAM,IAE3B,MAAMiK,EAAe,IAAIs9G,EACzB,MAAa5K,UAAmB,EAAA90G,YAAhC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,OAGR,aACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAlBa,MAkB0B,EAAAt8B,oBAAoB/E,SAIjE,UAAU2J,GACT,MAAMurB,EAAU,EAAAnwB,oBAAoB/E,MAC9BkvD,EAAehuD,KAAKusG,gBACpBz3E,EAAW90B,KAAKoI,YAzBJ,OA2BZgtB,EAAa,IAAI,EAAAG,oBAAoBv1B,KAAM,EAAA6D,oBAAoBQ,WAAY2pD,GACjFvlD,EAA8ByE,gBAAgBlN,KAAM,CAACo1B,IAErD,MAAMkxF,EAAYtmH,KAAK8M,mBAAmB9M,KAAK/B,EAAEic,MAAMrd,MACjDkQ,EAAY,GAAGinB,KAAWc,iBAAwB90B,KAAKusG,yBAAyB+Z,aACtF79G,EAA8BwE,eAAejN,KAAM,CAAC+M,IAErD,oBACC/M,KAAK0I,0BAA4B1I,KAAK0I,2BAA6B,IAAI,EAAAyhG,uBACvEnqG,KAAK0I,0BAA0BC,QAC/B3I,KAAK0I,0BAA0Bw9G,gBAC9B,EAAAxnH,UAAUU,KACVY,KAAKwe,GAAG3hB,KACR,EAAAqC,UAAUC,cACVa,KAAKusG,iBAGC,gBACP,MAAO,gBAAkBvsG,KAAKoI,YA7CZ,QAQpB,gB,8ECjBA,cACA,QACA,OACA,QACA,QAKA,MAAMm+G,UAA6B,EAAAz9G,iBAAnC,c,oBACC,KAAA09G,KAAO,EAAAlkG,YAAY/iB,QAAQ,CAAC,EAAG,KAEhC,MAAMwJ,EAAe,IAAIw9G,EACzB,MAAa7K,UAAqB,EAAA/0G,YAAlC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAhBa,OAgB0B,EAAAt8B,oBAAoB/E,SAIjE,UAAU2J,GAaT,MAAMnL,EAAQ,EAAAgL,UAAUs3G,QAAQ5/G,KAAK8M,mBAAmB,SAGlDC,EAAY,SADJ/M,KAAKoI,YAAY,mBACY9K,KAE3CmL,EAA8BwE,eAAejN,KAAM,CAAC+M,KAhCtD,kB,2FCbA,QACA,QAEA,4BACA,OACA,QACA,QACA,QAIA,MAAM05G,UAA+B,EAAA39G,iBAArC,c,oBACC,KAAAg4G,IAAM,EAAAx+F,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAElC,MAAMuJ,EAAe,IAAI09G,EACzB,MAAa5K,UAAuB,EAAAl1G,YAApC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,aAGR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAfa,MAe0B,EAAAt8B,oBAAoBK,QAIjE,UAAUuE,GACT,MAAMo4G,EAA6B,GAC7B9rF,EAAa,GAEnB8rF,EAA2BvlH,KAAK,IAAI,EAAAooE,qBAAqB1jE,KAAM,EAAA6D,oBAAoBK,KAAM,YAEzF,MAAM48G,EAAM,EAAAx4G,UAAUjD,QAAQrF,KAAK8M,mBAAmB,QAEhD8zG,EAAM5gH,KAAKoI,YAAY,OAC7B2sB,EAAWz5B,KAAK,QAAQslH,eAAiBE,MACzCr4G,EAA8ByE,gBAAgBlN,KAAM6gH,GACpDp4G,EAA8BwE,eAAejN,KAAM+0B,IAzBrD,oB,6BCfA,OAAe,4b,2FCAf,SACA,2BACA,QACA,QAEA,IAAK2xF,GAAL,SAAKA,GACJ,mBACA,mBAFD,CAAKA,MAAI,KAIT,MAAMC,EAAqB,CAACD,EAAKP,KAAMO,EAAKxsF,MAGtC0sF,EAA4B,CACjC,CAACF,EAAKP,MAAO,oBACb,CAACO,EAAKxsF,MAAO,mBAGR2sF,EAAsC,CAC3C,CAACH,EAAKP,MAAO,CAAC,SAAU,OAAQ,SAChC,CAACO,EAAKxsF,MAAO,CAAC,SAAU,SAEnB4sF,EAAiC,CACtC,CAACJ,EAAKP,MAAO,yBACb,CAACO,EAAKxsF,MAAO,oBAGR6sF,EAA8C,CACnD,CAACL,EAAKP,MAAO,CAAC,EAAAtiH,oBAAoBK,KAAM,EAAAL,oBAAoBK,KAAM,EAAAL,oBAAoB/E,OACtF,CAAC4nH,EAAKxsF,MAAO,CAAC,EAAAr2B,oBAAoBK,KAAM,EAAAL,oBAAoBM,OAGvDq7G,EAAqC,CAC1C3qB,OAAQ,CAAC,EAAG,EAAG,GACfmyB,KAAM,CAAC,EAAG,EAAG,IAGd,OAEA,QAEA,MAAMC,UAA2B,EAAAn+G,iBAAjC,c,oBACC,KAAAo+G,UAAY,EAAA5kG,YAAYtjB,QAAQ0nH,EAAKP,KAAM,CAC1CrjF,KAAM,CACLC,QAAS4jF,EAAM3hH,IAAI,CAACxH,EAAM1C,KAElB,CAAC+B,KADM+pH,EAAYppH,GACLF,MAAOxC,SAMhC,MAAMiO,EAAe,IAAIk+G,EACzB,MAAanL,UAAqB,EAAAjwG,mBAAlC,c,oBACC,KAAA7C,cAAgBD,EAChB,cACC,MAAO,SAKR,kBACC9C,MAAMmB,kBACNpH,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OACnGA,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAGvE,eAAeoC,GACxB,MAAM5E,EAAOmpH,EAAM3mH,KAAKwe,GAAG0oG,WAC3B,OAAOL,EAAiBrpH,GAAM4E,GAE/B,uBAAuBvF,GACtB,OAAO2iH,EAAc3iH,GAEtB,iBACC,MAAMW,EAAOmpH,EAAM3mH,KAAKwe,GAAG0oG,WAC3B,OAAOJ,EAAiBtpH,GAGf,wBACT,MAAMA,EAAOmpH,EAAM3mH,KAAKwe,GAAG0oG,WAC3B,OAAOH,EAAiBvpH,GAEf,yBACT,MAAO,CAAC,EAAAqG,oBAAoBK,MAE7B,0BACC,MAAM3F,EAAOyB,KAAKkM,yBAAyB,GAC3C,MAAO,CAAC,IAAI,EAAAw3D,qBAAqB1jE,KAAMzB,EAAM,YAG9C,UAAUkK,GACT,MAAMkE,EAAgC3M,KAAKa,GAAGC,QAAQmH,+BAA+B,GAAG1J,KAKlFqO,EAJO5M,KAAKa,GAAG6G,OAAOmF,8BAA8B7H,IAAI,CAAC4C,EAAY9M,KAC1E,MAAM+B,EAAO+K,EAAW/K,KACxB,OAAO,EAAAyL,UAAUC,IAAIvI,KAAK8M,mBAAmBjQ,MAErBqI,KAAK,MAGxB6H,EAAY,GAAGJ,KADT3M,KAAKoI,YAAYpI,KAAK8L,0BAA0B3D,YAAY,SAC9BnI,KAAKgN,oBAAoBJ,KACnEnE,EAA8BwE,eAAejN,KAAM,CAAC+M,IACpDtE,EAA8ByE,gBAAgBlN,KAAMA,KAAKmN,4BAlD3D,kB,8ECpDA,cACA,QAEA,QAEM42G,EAAiB,CAAC,IAAK,IAAK,IAAK,KAGvC,MAAahI,UAAoB,EAAAuC,iCAChC,cACC,MAAO,QAYR,UAAU71G,GAMT,MAAMZ,EAAmB7H,KAAKa,GAAG6G,OAAOmF,8BAA8B,GAChEvP,EAAQ,EAAAgL,UAAUs3G,QAAQ5/G,KAAK8M,mBAAmBjF,EAAiBhL,OAEnE+pF,EAAoB5mF,KAAKa,GAAGC,QAAQmH,+BAA+B,GACnE6sB,EAAW90B,KAAKoI,YAAYw+E,EAAkB/pF,MAE9Ck4B,EAAuB,GAE7B,GAAmB,GADC,EAAArwB,kCAAkCkiF,EAAkBroF,MAEvEw2B,EAAWz5B,KAAK,GAAGsrF,EAAkBroF,QAAQu2B,OAAc90B,KAAKmnH,aAAa7pH,UACvE,CACN,MAAM8pH,EAAyBrD,EAAe/+G,IAAKrI,GAC3CqD,KAAKmnH,aAAa,GAAG7pH,KAASX,MAEtCo4B,EAAWz5B,KACV,GAAGsrF,EAAkBroF,QAAQu2B,OAAc8xD,EAAkBroF,QAAQ6oH,EAAaliH,KAAK,SAGzFuD,EAA8BwE,eAAejN,KAAM+0B,GAG5C,aAAaz3B,GACpB,MAAO,QAAQA,gBAAoBA,WA1CrC,iB,8ECRA,cACA,SAEA,QACA,QACA,QACA,QAEA,SACA,QAEA,OACA,MAAM+pH,UAA4B,EAAAv+G,iBAAlC,c,oBACC,KAAA2hB,WAAa,EAAAnI,YAAYhjB,OAAO,eAChC,KAAAsT,cAAgB,EAAA0P,YAAYhjB,OAAO,EAAA04B,YAAYC,kBAAkBC,IACjE,KAAArK,GAAK,EAAAvL,YAAY/iB,QAAQ,CAAC,EAAG,KAE9B,MAAMwJ,EAAe,IAAIs+G,EACzB,MAAahL,UAAsB,EAAA11G,YAAnC,c,oBACC,KAAAqC,cAAgBD,EAChB,cACC,MAAO,UAIR,kBACC9C,MAAMmB,kBAENpH,KAAKa,GAAGC,QAAQqG,mCAAmC,CAClD,IAAI,EAAAg5B,0BAA0Bk8E,EAAcj9D,YAAa,EAAAv7C,oBAAoBM,QAI/E,UAAUsE,GACT,MAAMolB,EAAK,EAAAvlB,UAAUs3G,QAAQ5/G,KAAK8M,mBAAmB9M,KAAK/B,EAAE4vB,GAAGhxB,OAEzDyqH,EAAOtnH,KAAKoI,YAAYi0G,EAAcj9D,aACtCp6C,EAAMhF,KAAKusG,gBACXn3E,EAAa,IAAI,EAAAG,oBAAoBv1B,KAAM,EAAA6D,oBAAoBQ,WAAYW,GAC3E+H,EAAY,QAAQu6G,iBAAoBtiH,MAAQ6oB,KACtDplB,EAA8ByE,gBAAgBlN,KAAM,CAACo1B,IACrD3sB,EAA8BwE,eAAejN,KAAM,CAAC+M,IAGrD,oBACC/M,KAAK0I,0BAA4B1I,KAAK0I,2BAA6B,IAAI,EAAAyhG,uBACvEnqG,KAAK0I,0BAA0BC,QAE/B3I,KAAK0I,0BAA0Bw9G,gBAC9B,EAAAxnH,UAAUO,cACVe,KAAKwe,GAAGiM,WACRzqB,KAAKwe,GAAG5L,cACR5S,KAAKusG,iBAGC,gBACP,OAAOvsG,KAAKoI,YAAYpI,KAAKwe,GAAGiM,aAtClC,kBAKiB,EAAA20B,YAAc,Q,8ECvB/B,cACA,QACA,SAGA,IAAKigE,GAAL,SAAKA,GACJ,wBACA,oBACA,sBAHD,CAAKA,MAAS,KAKd,MAAMC,EAA+B,CAACD,EAAUkI,UAAWlI,EAAUmI,QAASnI,EAAUoI,UAExF,QAEA,MAAanL,UAA2B,EAAAoL,qBAAxC,c,oBAKiB,KAAA57G,0BAAqD,IAAI,EAAAmzC,wBAAwBj/C,MAJjG,cACC,MAAO,iBAIR,kBACCiG,MAAMmB,kBACNpH,KAAK8L,0BAA0B1E,kBAE/BpH,KAAK8L,0BAA0BC,kCAAkC/L,KAAKgM,sBAAsBnO,KAAKmC,OACjGA,KAAK8L,0BAA0BG,mCAAmCjM,KAAKkM,uBAAuBrO,KAAKmC,OACnGA,KAAK8L,0BAA0BK,wBAAwBnM,KAAKoM,eAAevO,KAAKmC,OAChFA,KAAK8L,0BAA0B03D,yBAAyBxjE,KAAKyjE,gBAAgB5lE,KAAKmC,OAGzE,eAAeoC,GACxB,OAAOk9G,EAAWl9G,GAET,kBACT,MA9BkB,QAgCT,wBACT,MAAMulH,EACL3nH,KAAKa,GAAGkG,YAAYc,iBAAiB,IAAM7H,KAAKa,GAAGkG,YAAYc,iBAAiB,GAC3EtJ,EAA4BopH,EAC/B3nH,KAAK8L,0BAA0B20B,gCAAgCknF,GAC/D,EAAA9jH,oBAAoB/E,MACvB,MAAO,CAAC,EAAA+E,oBAAoBE,KAAMxF,EAAMA,GAE/B,yBAET,MAAO,CADMyB,KAAKgM,wBAAwB,IAI3C,UAAUvD,GACT,MAAMssB,EAAuB,GAEvBz3B,EAAQ0C,KAAKoI,YAhDD,SAiDZw/G,EAAY,EAAAt/G,UAAUg8D,KAAKtkE,KAAK8M,mBAAmBuyG,EAAUkI,YAC7DM,EAAU,EAAAv/G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUmI,UAC1DM,EAAW,EAAAx/G,UAAUC,IAAIvI,KAAK8M,mBAAmBuyG,EAAUoI,WAE3DzzF,EAAUh0B,KAAKkM,yBAAyB,GAC9C6oB,EAAWz5B,KAAK,GAAG04B,KAAW12B,KAC9By3B,EAAWz5B,KAAK,MAAMssH,OACtB7yF,EAAWz5B,KAAK,GAAGgC,OAAWuqH,KAC9B9yF,EAAWz5B,KAAK,YAChBy5B,EAAWz5B,KAAK,GAAGgC,OAAWwqH,KAC9B/yF,EAAWz5B,KAAK,KAChBmN,EAA8BwE,eAAejN,KAAM+0B,IAlDrD,wB,oFCdA,E,KAAA,uBACA,SACA,QAEMyqF,EAAqC,CAC1C32D,MAAO,CAAC,EAAG,EAAG,GACdk/D,IAAK,CAAC,EAAG,EAAG,GACZh9F,GAAI,CAAC,EAAG,EAAG,IAGZ,MAAa4xF,UAA0B,EAAA53C,wBAAwB,eAAgB,CAC9E7B,GAAI,CAAC,QAAS,MAAO,MACrBxxB,OAAQ,uBACR4xB,UAAW,CAAC,cAEF,wBACT,MAAM/kE,EAAO,EAAAsF,oBAAoBK,KACjC,MAAO,CAAC3F,EAAMA,EAAMA,GAEX,yBACT,MAAO,CAAC,EAAAsF,oBAAoBM,MAE7B,uBAAuBtH,GACtB,OAAO2iH,EAAc3iH,IAbvB,uB,oFCVA,E,KAAA,uBACA,SACA,QAEM2iH,EAAqC,CAC1C32D,MAAO,CAAC,EAAG,EAAG,GACdk/D,IAAK,CAAC,EAAG,EAAG,IAGb,MAAanL,UAA0B,EAAA95C,wBAAwB,eAAgB,CAC9EI,GAAI,CAAC,QAAS,OACdxxB,OAAQ,eACR4xB,UAAW,CAAC,cAEF,wBACT,MAAM/kE,EAAO,EAAAsF,oBAAoBK,KACjC,MAAO,CAAC3F,EAAMA,GAEL,yBACT,MAAO,CAAC,EAAAsF,oBAAoB/E,OAE7B,uBAAuBjC,GACtB,OAAO2iH,EAAc3iH,IAbvB,uB,8ECTA,eAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAcA,oBACC,WAAW6oG,GACVA,EAAK3qF,cAAc,EAAAitG,iBAAkB,EAAA1tF,aAAa33B,MAClD+iG,EAAK3qF,cAAc,EAAAktG,wBAAyB,EAAA3tF,aAAaZ,UACzDgsE,EAAK3qF,cAAc,EAAAmtG,mBAAoB,EAAA5tF,aAAa33B,MACpD+iG,EAAK3qF,cAAc,EAAAotG,0BAA2B,EAAA7tF,aAAaZ,UAC3DgsE,EAAK3qF,cAAc,EAAAyqD,oBAAqB,EAAAlrC,aAAa33B,MACrD+iG,EAAK3qF,cAAc,EAAAqtG,2BAA4B,EAAA9tF,aAAaZ,UAC5DgsE,EAAK3qF,cAAc,EAAAstG,cAAe,EAAA/tF,aAAanxB,QAC/Cu8F,EAAK3qF,cAAc,EAAAkrD,qBAAsB,EAAA3rC,aAAaZ,a,2FChCxD,QACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SACA,MAAM4uF,UAAiC,EAAA5vF,2BACtC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAE5E,MAAMC,EAAe,IAAIu/G,EAEzB,MAAaN,UAAyB,EAAA1sG,aAAtC,c,oBACC,KAAAtS,cAAgBD,EAaP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACsjD,eAAe,IAC9F,KAAAxqB,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGsjD,eAAe,IAdhB,cACC,MAAO,aAGR,kBACC,OAAO,IAAI,EAAArd,kBAAkB,CAC5B77B,cAAc,EACdN,KAAM,EAAAC,UACNF,MAAO,SACP4qC,QAAS,IAOX,kBACCz0C,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,oBAG9B,O,mDACL,EAAAwtC,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,MAC1BA,KAAKw4B,uBAAuBC,SAC5Bz4B,KAAK84B,6BAA6BL,SAElCz4B,KAAK6lE,aAAa7lE,KAAKmD,cA/BzB,sB,8ECdA,eAGA,MAAaoY,UAA0B,EAAA6b,eACtC,YAAYnW,GACXhb,MAAMib,YAAYD,GAEnB,aAAa9d,GACS,MAAjBnD,KAAKs3B,UACRt3B,KAAKs3B,SAASlZ,UAEfpe,KAAKkhB,YAAY/d,GAElB,eACC,OAAOnD,KAAKuoH,cAEb,WACC,OAAOvoH,KAAKihB,WAdd,uB,2FCJA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,MAAMqnG,UAAiC,EAAA5vF,2BACtC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAE5E,MAAMC,EAAe,IAAIu/G,EAEzB,MAAaL,UAAgC,EAAAjzE,oBAA7C,c,oBACC,KAAAhsC,cAAgBD,EAKP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACyyB,UAAU,IACzF,KAAAqG,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGyyB,UAAU,IANX,cACC,MAAO,qBAOR,kBACCzyB,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,oBAI1B,+BACT,OAAO,IAAI,EAAA8+D,sBAA4ClmE,KAAM,EAAAwoH,sBAGxD,O,yDACCxoH,KAAKomE,sBAEX,EAAAxxB,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,YACpB,EAAA+3B,qBAAqBU,OAAOz4B,YAC5B,EAAA44B,0BAA0BH,OAAOz4B,MAEvCA,KAAK6lE,aAAa7lE,KAAKmD,cA9BzB,6B,8ECbA,cACA,QACA,QAEA,SAEA,MAAaqlH,UAA6B,EAAAzjE,oBACzC,uBACC,MAAM7xB,EAAW,EAAAu1F,UAAUC,MAC3B,MAAO,CACNp2F,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAGrB,kBACC,MAAMk2F,EAAkB3oH,KAAK8qC,iBAEvB3nC,EAAW,IAAI,EAAAqtB,eAAe,CAKnCo4F,QAAQ,EAIRn2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,iBAGjC,OADAvyB,KAAK8oH,sBAAsB3lH,GACpBA,GA1BT,0B,8ECPA,cACA,QACA,QACA,OACA,OAEA,SACA,QAEMqnC,EAAiD,IAAIja,IAAI,CAC9D,CAAC,EAAAhgB,WAAWzF,OAAQ,2BACpB,CAAC,EAAAyF,WAAW8hB,SAAU,sCAGvB,MAAaqyB,UAA0C,EAAAt0B,wBAGtD,uBACC,MAAM8C,EAAW,EAAAu1F,UAAUM,aAC3B,MAAO,CACNz2F,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAGX,kBAAkBO,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAMzBwzB,QAAS,CACRglE,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtDz2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBA7BnC,uC,8ECdA,cACA,QACA,QACA,OACA,OAEA,SACA,QAEMiY,EAAiD,IAAIja,IAAI,CAC9D,CAAC,EAAAhgB,WAAWzF,OAAQ,2BACpB,CAAC,EAAAyF,WAAW8hB,SAAU,sCAGvB,MAAauyB,UAAuC,EAAAx0B,wBAGnD,uBACC,MAAM8C,EAAW,EAAAu1F,UAAUvvD,MAC3B,MAAO,CACN5mC,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAGX,kBAAkBO,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAMzBwzB,QAAS,CACRglE,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtDz2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBA7BnC,oC,2FCdA,QACA,QAKA,SAEA,4BACA,4BACA,QAEMgY,EAAmD,IAAIha,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,uBAChF0/B,EAAiD,IAAIja,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,oBAGpF,MAAag6C,UAA0C,EAAA10B,wBAGtD,uBACC,MAAO,CACNkC,aAAc,UACdC,eAAgB,UAChBE,SAAU,CACT02F,MAAO,CAAC7rH,MAAO,GACf8rH,KAAM,CAAC9rH,MAAO,MAIP,oBAAoB01B,GAC7B,OAAOuX,EAAwBrtC,IAAI81B,GAE1B,kBAAkBA,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAKzBiC,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBA7BnC,uC,6BChBA,OAAe,kM,2FCAf,SACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SACA,MAAM82F,UAAmC,EAAA3wF,2BACxC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAE5E,MAAMC,EAAe,IAAIsgH,EAEzB,MAAanB,UAA2B,EAAA5sG,aAAxC,c,oBACC,KAAAtS,cAAgBD,EAaP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACsjD,eAAe,IAC9F,KAAAxqB,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGsjD,eAAe,IAdhB,cACC,MAAO,eAGR,kBACC,OAAO,IAAI,EAAAp5C,oBAAoB,CAC9BE,cAAc,EACdN,KAAM,EAAAC,UACNF,MAAO,SACP4qC,QAAS,IAOX,kBACCz0C,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,oBAG9B,O,mDACL,EAAAwtC,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,MAC1BA,KAAKw4B,uBAAuBC,SAC5Bz4B,KAAK84B,6BAA6BL,SAElCz4B,KAAK6lE,aAAa7lE,KAAKmD,cA/BzB,wB,2FCfA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,MAAMkmH,UAAmC,EAAA3wF,2BACxC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAE5E,MAAMC,EAAe,IAAIsgH,EAEzB,MAAalB,UAAkC,EAAAnzE,oBAA/C,c,oBACC,KAAAhsC,cAAgBD,EAKP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACyyB,UAAU,IACzF,KAAAqG,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGyyB,UAAU,IANX,cACC,MAAO,uBAOR,kBACCzyB,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,oBAI1B,+BACT,OAAO,IAAI,EAAA8+D,sBAA8ClmE,KAAM,EAAAspH,wBAG1D,O,yDACCtpH,KAAKomE,sBAEX,EAAAxxB,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,YACpB,EAAA+3B,qBAAqBU,OAAOz4B,YAC5B,EAAA44B,0BAA0BH,OAAOz4B,MAEvCA,KAAK6lE,aAAa7lE,KAAKmD,cA9BzB,+B,8ECdA,cACA,QACA,QAEA,SAEA,MAAammH,UAA+B,EAAAvkE,oBAC3C,uBACC,MAAM7xB,EAAW,EAAAu1F,UAAUc,QAC3B,MAAO,CACNj3F,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAGrB,kBACC,MAAMk2F,EAAkB3oH,KAAK8qC,iBACvB3nC,EAAW,IAAI,EAAAqtB,eAAe,CACnCo4F,QAAQ,EAERn2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,iBAGjC,OADAvyB,KAAK8oH,sBAAsB3lH,GACpBA,GAnBT,4B,2FCPA,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAIA,SAEA,MAAMmiE,UAAoC,EAAAC,yBACzC,EAAA7sC,2BACC,EAAAd,sBAAsB,EAAAJ,oBAAoB,EAAAhI,gBAAgB,EAAA+kB,iBAAiB,EAAAzrC,wBAF7E,c,oBAKC,KAAAkB,UAAY,EAAAsY,YAAYxjB,MAAM,EAAAumE,gBAAgBr7D,UAAW,CACxDg0B,MAAM,EACN5lB,SAAU,CAAC3U,EAAoByV,IAC9BkvG,EAA2BoB,kBAAkB/lH,KAE/C,KAAAwG,UAAY,EAAAqY,YAAYxjB,MAAM,EAAAumE,gBAAgBp7D,UAAW,CACxD+zB,MAAM,EACN5lB,SAAU,CAAC3U,EAAoByV,IAC9BkvG,EAA2BqB,kBAAkBhmH,MAGhD,MAAMsF,EAAe,IAAIu8D,EAEzB,MAAa8iD,UAAmC,EAAApzE,oBAAhD,c,oBAIC,KAAAhsC,cAAgBD,EAKP,KAAAyvB,uBAA+C,IAAI,EAAAT,qBAAqB/3B,KAAM,CAACyyB,UAAU,IACzF,KAAAqG,6BAA0D,IAAI,EAAAF,0BAA0B54B,KAAM,CACtGyyB,UAAU,IAEF,KAAAgzC,2BAAsD,IAAI,EAAAC,wBAAwB1lE,KAAM,CAChGyyB,UAAU,EACV6wB,eAAe,EACflW,QAAQ,IAXT,cACC,MAAO,wBAYR,kBACCptC,KAAKwI,OAAO82B,4BAA4B,KACvCt/B,KAAKw4B,uBAAuBpxB,kBAC5BpH,KAAK84B,6BAA6B1xB,kBAClCpH,KAAKylE,2BAA2Br+D,oBAIxB,+BACT,OAAO,IAAI,EAAA8+D,sBAA+ClmE,KAAM,EAAA0pH,yBAG3D,O,yDACC1pH,KAAKomE,sBAEX,EAAAxxB,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MACtB,EAAA03B,mBAAmBe,OAAOz4B,YACpB,EAAA+3B,qBAAqBU,OAAOz4B,YAC5B,EAAA44B,0BAA0BH,OAAOz4B,YACjC,EAAA0lE,wBAAwBjtC,OAAOz4B,MAEjCA,KAAKic,YACRjc,KAAKic,UAAUwW,SAASkzC,gBAAgBroE,MAAQ0C,KAAKwe,GAAGonD,kBACxDwiD,EAA2BoB,kBAAkBxpH,MAC7CooH,EAA2BqB,kBAAkBzpH,OAG9CA,KAAK6lE,aAAa7lE,KAAKmD,aAExB,yBAAyBM,GACxBA,EAAKN,SAASsvB,SAASzoB,UAAU1M,MAAQmG,EAAK+a,GAAGxU,UAElD,yBAAyBvG,GACxBA,EAAKN,SAASsvB,SAASxoB,UAAU3M,MAAQmG,EAAK+a,GAAGvU,WApDnD,gC,2FCjCA,QACA,QACA,QAEA,SACA,SACA,SACA,SAEA,4BACA,4BAEA,QACA,QAEA,MAAay/G,UAAgC,EAAA3kE,oBAC5C,cACC,OAAO,EAGR,uBACC,MAAM7xB,EAAWlzB,KAAK2pH,cAAgB,EAAAlB,UAAUmB,SAAW,EAAAnB,UAAUoB,SACrE,MAAO,CACNv3F,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAIrB,kBACC,MAAMk2F,EAAkB3oH,KAAK8qC,iBAEvBrsC,EAAU,CACfmqH,QAAQ,EACRxU,WAAY,CACX0V,aAAa,GAGdr3F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,gBAQ3BpvB,EAAW,IAAI,EAAAqtB,eAAe/xB,GAcpC,OAXA0E,EAAS4mH,gBAAkB,SAASC,GACnCA,EAAOz3F,eAAiBy3F,EAAOz3F,eAAetkB,QAC7C,mCACA,WAED+7G,EAAOz3F,eAAiBy3F,EAAOz3F,eAAetkB,QAC7C,mCACA,YAGFjO,KAAK8oH,sBAAsB3lH,GACpBA,EAgBR,kBAAkB64B,GACjB,EAAA3L,sBAAsB4L,kBAAkBD,GAGxCA,EAAajb,UAAU,EAAAriB,UAAUI,MAAO,YAAa,GACrDk9B,EAAajb,UAAU,EAAAriB,UAAUI,MAAO,YAAa,GAQtD,wBACC,MAAO,CACN,IAAI,EAAA2tC,aAAa,EAAAl8B,WAAWzF,OAAQ,CAAC,WAAY,SAAU,MAAO,IAClE,IAAI,EAAA2hC,aAAa,EAAAl8B,WAAW8hB,SAAU,CAAC,QAAS,QAAS,YAAa,aAAc,CAAC,EAAA9hB,WAAWzF,UAGlG,0BACC,OAAO,EAAAulB,sBAAsBsc,0BAA0B6zE,OAAO,CAC7D,IAAI,EAAA3zE,eAAe,YAAa,CAC/BxY,QAAS,MACTC,OAAQ,4BAET,IAAI,EAAAuY,eAAe,YAAa,CAC/BxY,QAAS,MACTC,OAAQ,+BA1FZ,6B,6BCfA,OAAe,wS,6BCAf,OAAe,wS,2FCAf,QACA,OACA,QAEA,SACA,SAIA,OACA,SAAgB21F,EAA6C7nG,GAC5D,OAAO,cAAoBA,EAApB,c,oBACN,KAAA5X,KAAO,EAAA8X,YAAYxjB,MAAM,GACzB,KAAAorH,iBAAmB,EAAA5nG,YAAY1jB,QAAQ,KAHzC,sBAOA,MAAMonE,UAA8B,EAAAx2C,gBAAgB,EAAA+kB,iBAAiB01E,EAAkB,EAAAnhH,sBACvF,MAAMC,EAAe,IAAIi9D,EAEzB,MAAaqiD,UAAsB,EAAA/sG,aAAnC,c,oBACC,KAAAtS,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC,OAAO,IAAI,EAAAwB,eAAe,CACzBH,cAAc,EACdN,KAAM,EAAAC,UACNF,MAAO,SACP4qC,QAAS,IAIL,O,mDACL,EAAAG,iBAAiBnc,OAAOz4B,MACxB,EAAA4vB,eAAe6I,OAAOz4B,MAItBA,KAAKmD,SAASqH,KAAOxK,KAAKwe,GAAGhU,KAC7BxK,KAAKmD,SAASgnH,gBAAkBnqH,KAAKwe,GAAG0rG,iBAExClqH,KAAK6lE,aAAa7lE,KAAKmD,cAxBzB,mB,8ECpBA,cACA,QACA,QAEA,SAEA,SACA,SAEA,SACA,SACA,SACA,SAEA,QACA,QACA,QACA,QAEMsnC,EAAiD,IAAIla,IAAI,CAC9D,CAAC,EAAAhgB,WAAWzF,OAAQ,CAAC,0BAA2B,yBAChD,CAAC,EAAAyF,WAAW8hB,SAAU,MAGjB+3F,EAA2C,IAAI75F,IACrD65F,EAAqB7pH,IAAI,EAAA4vB,mBAAmBs0B,SAAU,EAAA4lE,qCACtDD,EAAqB7pH,IAAI,EAAA4vB,mBAAmBw0B,MAAO,EAAA2lE,kCACnDF,EAAqB7pH,IAAI,EAAA4vB,mBAAmB00B,UAAW,EAAA0lE,qCAEvD,MAAapkD,UAA8B,EAAA/1C,wBAE1C,wCACC,OAAOg6F,EAGR,uBACC,MAAMl3F,EAAW,EAAAu1F,UAAUj0G,OAC3B,MAAO,CACN8d,aAAcY,EAASZ,aACvBC,eAAgBW,EAASX,eACzBE,SAAUS,EAAST,UAGrB,kBACC,MAAMk2F,EAAkB3oH,KAAK8qC,iBAKvB3nC,EAAW,IAAI,EAAAqtB,eAAe,CACnCnmB,aAAa,EACb0qC,KAAK,EAOLiP,QAAS,CAERwmE,oBAAqB,GAGtB/3F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,iBAGjC,OADAvyB,KAAK8oH,sBAAsB3lH,GACpBA,EAWR,kBAAkB64B,GACjB,EAAA3L,sBAAsB4L,kBAAkBD,GACxCA,EAAajb,UAAU,EAAAriB,UAAUI,MAAO,eAAgB,GAEzD,yCACC,OAAO,EAAAuxB,sBAAsB4b,yCAAyCu0E,OAAO,CAC5E,IAAI,EAAArgF,0BAA0B,gBAAiB,EAAAt8B,oBAAoBI,QAgBrE,wBACC,MAAO,CACN,IAAI,EAAAwoC,aAAa,EAAAl8B,WAAWzF,OAAQ,CAAC,WAAY,SAAU,KAAM,gBAAiB,IAClF,IAAI,EAAA2hC,aAAa,EAAAl8B,WAAW8hB,SAAU,CAAC,QAAS,SAAU,CAAC,EAAA9hB,WAAWzF,UAGxE,0BACC,OAAO,EAAAulB,sBAAsBsc,0BAA0B6zE,OAAO,CAC7D,IAAI,EAAA3zE,eAAe,eAAgB,CAClCxY,QAAS,MACTC,OAAQ,kBACRC,OAAQ,qBA8BD,gBAAgBvB,GACzB,OAAOyX,EAAoBvtC,IAAI81B,IAlHjC,2B,2FC7BA,QACA,QACA,QACA,OACA,OAEA,SAEA,4BACA,QAEMuX,EAAmD,IAAIha,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,uBAChF0/B,EAAiD,IAAIja,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,oBAEpF,MAAaw/G,UAAyC,EAAAl6F,wBAGrD,uBACC,MAAM8C,EAAW,EAAAu1F,UAAUvvD,MAErBzmC,EAAW,EAAAo2F,cAAc9lH,MAAMmwB,EAAST,UAI9C,OAHAA,EAAe,KAAI,CAACn1B,MAAO,GAC3Bm1B,EAAgB,MAAI,CAACn1B,MAAO,GAErB,CACNg1B,aAAc,UACdC,eAAgBW,EAASX,eACzBE,SAAUA,GAGF,oBAAoBO,GAC7B,OAAOuX,EAAwBrtC,IAAI81B,GAE1B,kBAAkBA,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAMzBwzB,QAAS,CACRwmE,oBAAqB,EACrBxB,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtDz2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBAtCnC,sC,6BCdA,OAAe,khB,2FCAf,QACA,QACA,QACA,OACA,OAEA,SAEA,4BAEA,QAEMgY,EAAmD,IAAIha,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,uBAChF0/B,EAAiD,IAAIja,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,oBAEpF,MAAau/G,UAA4C,EAAAj6F,wBAGxD,uBACC,MAAM8C,EAAW,EAAAu1F,UAAUM,aAErBt2F,EAAW,EAAAo2F,cAAc9lH,MAAMmwB,EAAST,UAI9C,OAHAA,EAAe,KAAI,CAACn1B,MAAO,GAC3Bm1B,EAAgB,MAAI,CAACn1B,MAAO,GAErB,CACNg1B,aAAc,UACdC,eAAgBW,EAASX,eACzBE,SAAUA,GAGF,oBAAoBO,GAC7B,OAAOuX,EAAwBrtC,IAAI81B,GAE1B,kBAAkBA,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAMzBwzB,QAAS,CACRwmE,oBAAqB,EACrBxB,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtDz2F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBAtCnC,yC,6BCfA,OAAe,i2C,2FCAf,QACA,QAKA,SAEA,4BACA,4BACA,QAEMgY,EAAmD,IAAIha,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,uBAChF0/B,EAAiD,IAAIja,IAAI,CAAC,CAAC,EAAAhgB,WAAWzF,OAAQ,oBAEpF,MAAay/G,UAA4C,EAAAn6F,wBAGxD,uBACC,MAAO,CACNkC,aAAc,UACdC,eAAgB,UAChBE,SAAU,CACTjoB,KAAM,CAAClN,MAAO,GACdilB,MAAO,CAACjlB,MAAO,GACf6rH,MAAO,CAAC7rH,MAAO,GACf8rH,KAAM,CAAC9rH,MAAO,MAIP,oBAAoB01B,GAC7B,OAAOuX,EAAwBrtC,IAAI81B,GAE1B,kBAAkBA,GAC3B,OAAOwX,EAAsBttC,IAAI81B,GAGlC,kBACC,MAAM21F,EAAkB3oH,KAAK8qC,iBAC7B,OAAO,IAAI,EAAAta,eAAe,CAIzBlmB,WAAW,EACX05C,QAAS,CACRwmE,oBAAqB,GAGtB/3F,SAAU,EAAAo2F,cAAc9lH,MAAM4lH,EAAgBl2F,UAC9CH,aAAcq2F,EAAgBr2F,aAC9BC,eAAgBo2F,EAAgBp2F,kBAnCnC,yC,6BCfA,OAAe,oa,8ECAf,eAEA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SAEA,SACA,SAuBA,oBACC,WAAWmzE,GACVA,EAAK3qF,cAAc,EAAA0vG,oBAAqB,EAAAtxF,aAAaC,OACrDssE,EAAK3qF,cAAc,EAAA2vG,iBAAkB,EAAAvxF,aAAaC,OAClDssE,EAAK3qF,cAAc,EAAA4vG,wBAAyB,EAAAxxF,aAAaC,OACzDssE,EAAK3qF,cAAc,EAAA6vG,uBAAwB,EAAAzxF,aAAaC,OACxDssE,EAAK3qF,cAAc,EAAA8vG,kBAAmB,EAAA1xF,aAAaC,OACnDssE,EAAK3qF,cAAc,EAAA+vG,iBAAkB,EAAA3xF,aAAaC,OAElDssE,EAAK3qF,cAAc,EAAAgwG,cAAe,EAAA5xF,aAAa3c,SAC/CkpF,EAAK3qF,cAAc,EAAAiwG,iBAAkB,EAAA7xF,aAAa3c,SAClDkpF,EAAK3qF,cAAc,EAAAkwG,WAAY,EAAA9xF,aAAa3c,SAC5CkpF,EAAK3qF,cAAc,EAAAmwG,mBAAoB,EAAA/xF,aAAa3c,SAEpDkpF,EAAK3qF,cAAc,EAAAowG,WAAY,EAAAhyF,aAAaE,UAC5CqsE,EAAK3qF,cAAc,EAAAqwG,YAAa,EAAAjyF,aAAaE,UAC7CqsE,EAAK3qF,cAAc,EAAAswG,aAAc,EAAAlyF,aAAaI,MAE9CmsE,EAAK3qF,cAAc,EAAAuwG,0BAA2B,EAAAnyF,aAAaG,QAC3DosE,EAAK3qF,cAAc,EAAAwwG,yBAA0B,EAAApyF,aAAaG,QAG1DosE,EAAK3qF,cAAc,EAAAywG,WAAY,EAAAryF,aAAaI,S,8ECjE9C,eACA,SAEA,OACA,MAAMkyF,UAAoC,EAAA3iH,iBAA1C,c,oBACC,KAAAe,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,IAE/B,MAAMiK,EAAe,IAAI0iH,EAEzB,MAAahB,UAA4B,EAAA/0E,kBAAzC,c,oBACC,KAAA1sC,cAAgBD,EAEhB,cACC,MAAO,gBAGR,eACC,OAAO,IAAI,EAAA2iH,aAEZ,kBACC1rH,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAG7B,sBACC5iB,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG3U,MAC3B7J,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,WAhBjC,yB,8ECTA,eAGA,MAAahpC,UAAwB,EAAA8a,eACpC,YAAYnW,GACXhb,MAAMib,YAAYD,GAEnB,WAAWljB,GACV,OAAOiC,KAAKkhB,YAAYnjB,GAEzB,aACC,OAAOiC,KAAKuoH,cAEb,SACC,OAAOvoH,KAAKihB,WAXd,qB,2FCJA,SAEA,SAEA,SACA,QAEA,OAGA,SAAgB0qG,EAAgDvpG,GAC/D,OAAO,cAAoBA,EAApB,c,oBACN,KAAAvY,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MAC7C,KAAA0D,MAAQ,EAAA9lB,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MACzC,KAAAqiE,OAAS,EAAAzkF,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,QAL5C,yBASA,MAAMknF,UAAiCD,EAAqB,EAAAxpG,uBAAuB,EAAArZ,qBACnF,MAAMC,EAAe,IAAI6iH,EAEzB,MAAalB,UAAyB,EAAAj1E,4BAAtC,c,oBACC,KAAAzsC,cAAgBD,EAChB,cACC,MAAO,aAOR,eAGC,OAFe,IAAI,EAAA8iH,cAAc,SAAU,EAAG,EAAG,GAYlD,sBACC7rH,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG3U,MAC3B7J,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,UAC/BtlD,KAAKy2C,MAAMrO,MAAQpoC,KAAKwe,GAAG4pB,MAC3BpoC,KAAKy2C,MAAMswD,OAAS/mG,KAAKwe,GAAGuoF,OAIvB,O,mDAGC,EAAA+kB,yBAAiCC,cACtC,EAAAD,yBAAyB32E,OACxB,EAAA22E,yBAAiCC,aAAc,GAGjD/rH,KAAKyiB,qBAAqBgW,SAC1Bz4B,KAAK21C,sBACL31C,KAAK41C,uBACL51C,KAAK+b,gBAAgBoF,eA1CvB,sB,+ECtBA,eACA,SAEA,OAIA,SACA,SACA,QAEA,SAAgB6qG,EAAuD5pG,GACtE,OAAO,cAAoBA,EAApB,c,oBAON,KAAAq0B,MAAQ,EAAAn0B,YAAYvjB,SACpB,KAAA8K,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,GAC9B,KAAA+rB,SAAW,EAAAvI,YAAYxjB,MAAM,IAAK,CAAC4lC,MAAO,CAAC,EAAG,OAE9C,KAAAunF,aAAe,EAAA3pG,YAAY1jB,QAAQ,GACnC,KAAAstH,WAAa,EAAA5pG,YAAY/iB,QAAQ,CAAC,KAAM,OACxC,KAAA4sH,YAAc,EAAA7pG,YAAYxjB,MAAM,MAGhC,KAAAg3C,YAAc,EAAAxzB,YAAY1jB,QAAQ,GAClC,KAAAm3C,YAAc,EAAAzzB,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACmmB,YAAa,OAnBhE,gCAuBA,MAAMs2E,UAAwCJ,EAA4B,EAAA7pG,uBAAuB,EAAArZ,qBACjG,MAAMC,EAAe,IAAIqjH,EAEzB,MAAazB,UAAgC,EAAAl1E,4BAA7C,c,oBAIC,KAAAzsC,cAAgBD,EAKR,KAAAsjH,mBAAqB,IAAI,EAAAC,iBAChCtsH,KACU,EAAAusH,uBACV,0BAPD,cACC,MAAO,oBAQR,kBAICvsH,KAAKqsH,mBAAmBjlH,kBAGzB,eACC,MAAMqvC,EAAQ,IAAI,EAAA+1E,iBAYlB,OAVA/1E,EAAMzzC,YAAa,EACnByzC,EAAM2O,OAAOqnE,MAAQ,KACrBh2E,EAAM2O,OAAOsnE,QAAQpnH,EAAI,KACzBmxC,EAAM2O,OAAOsnE,QAAQnnH,EAAI,KACzBkxC,EAAM2O,OAAO5nC,OAAO+oD,KAAO,GAE3BvmE,KAAK2sH,eAAiBl2E,EAAMmM,OAC5B5iD,KAAK2sH,eAAe9vH,KAAO,kCAC3BmD,KAAKjC,OAAOof,IAAInd,KAAK2sH,gBAEdl2E,EAcR,sBAECz2C,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG3U,MAC3B7J,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,UAC/BtlD,KAAKy2C,MAAM2O,OAAO5nC,OAAOgpD,IAAMxmE,KAAKwe,GAAGqM,SAEvC7qB,KAAKqsH,mBAAmB5zF,SAEzB,uBACCz4B,KAAKy2C,MAAMzzC,WAAahD,KAAKwe,GAAGytG,aAChCjsH,KAAKy2C,MAAM2O,OAAOsnE,QAAQ9oG,KAAK5jB,KAAKwe,GAAG0tG,YAGvClsH,KAAKy2C,MAAM2O,OAAOqnE,KAAOzsH,KAAKwe,GAAG2tG,YAIjCnsH,KAAKy2C,MAAM2O,OAAO5nC,OAAOk/C,0BAjE3B,6B,8ECpCA,aACA,OACA,QAGA,SACA,QAEA,MAAa6vD,UAA+B,EAAAK,gBAA5C,c,oBACS,KAAAC,QAAU,IAAI,EAAAC,KACd,KAAAC,eAAiB,IAAI,EAAAtiH,kBAAkB,CAACsqC,KAAK,IAC3C,eACT,MAAMvzC,EAAW,IAAI,EAAAsT,eAErBtT,EAASkR,aACR,WACA,IAAI,EAAAS,uBACH,EAJW,IAIG,EAJH,IAIkB,EAJlB,KAIkC,GAJlC,KAImD,GAJnD,IAImE,GAC9E,IAIFnT,KAAK6sH,QAAQrrH,SAAWA,EACxBxB,KAAK6sH,QAAQ1pH,SAAWnD,KAAK+sH,eAC7B/sH,KAAK6sH,QAAQG,QAAkB,GAAVxgH,KAAKiZ,IAE1BzlB,KAAKjC,OAAOof,IAAInd,KAAK6sH,SAMtB,SAQC7sH,KAAKqd,QAAQkF,MAAM0qG,UAAUjtH,KAAKyD,KAAK+a,GAAGu3B,aAE1C/1C,KAAK+sH,eAAeljH,MAAM+Z,KAAK5jB,KAAKyD,KAAKgzC,MAAM5sC,QAlCjD,4B,8ECTA,eACA,SACA,SAEA,OACA,SACA,MAAMqjH,UAAuC,EAAApkH,iBAA7C,c,oBACC,KAAAqkH,UAAY,EAAA7qG,YAAYzjB,MAAM,CAAC,GAAK,GAAK,IACzC,KAAAuuH,aAAe,EAAA9qG,YAAYzjB,MAAM,CAAC,GAAK,GAAK,MAC5C,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,GAC9B,KAAAsV,SAAW,EAAAkO,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACtC,KAAAs2C,YAAc,EAAAxzB,YAAY1jB,QAAQ,GAClC,KAAAm3C,YAAc,EAAAzzB,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACmmB,YAAa,MAE/D,MAAM/sC,EAAe,IAAImkH,EAEzB,MAAatC,UAA+B,EAAAl1E,kBAA5C,c,oBACC,KAAA1sC,cAAgBD,EAIR,KAAAsjH,mBAAqB,IAAI,EAAAC,iBAChCtsH,KACU,EAAAqtH,sBACV,yBAND,cACC,MAAO,mBAQR,eAGC,OAFc,IAAI,EAAAC,gBAInB,kBACCttH,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKqsH,mBAAmBjlH,kBAGzB,sBACCpH,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG2uG,UAC3BntH,KAAKy2C,MAAM82E,YAAcvtH,KAAKwe,GAAG4uG,aACjCptH,KAAKy2C,MAAMriC,SAASwP,KAAK5jB,KAAKwe,GAAGpK,UACjCpU,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,UAE/BtlD,KAAKqsH,mBAAmB5zF,UA3B1B,4B,8EChBA,aACA,SACA,OAGA,QACA,OACA,SAGA,MAAa40F,UAA8B,EAAAT,gBAA3C,c,oBACS,KAAAx7G,UAAY,IAAI,EAAAo8G,yBAAyB,GAgBzC,KAAAC,MAAQ,IAAI,EAAAhpG,WACZ,KAAA68F,kBAAoB,IAAI,EAAAluG,QAAQ,EAAG,EAAG,GACtC,KAAAs6G,QAAU,IAAI,EAAAvjH,MACd,KAAAwjH,QAAU,IAAI,EAAAxjH,MAjBZ,eACTnK,KAAKoR,UAAUw8G,QAAkB,GAAVphH,KAAKiZ,IAE5BzlB,KAAKic,UAAU7R,cAAe,EAE9B,MAAMgK,EAAWpU,KAAKoR,UAAU9O,aAAa,YACvCgtE,EAAS,IAAI7mC,aAA8B,EAAjBr0B,EAAS7H,OAEzCvM,KAAKoR,UAAUsB,aAAa,QAAS,IAAI,EAAAm7G,gBAAgBv+C,EAAQ,IACjEtvE,KAAKqd,QAAQ7b,SAAWxB,KAAKoR,UAC7BpR,KAAKqd,QAAQla,SAAWnD,KAAKic,UAQ9B,SACC,IAAKjc,KAAKyD,KAAK+a,GAAGpK,SACjB,OAGDpU,KAAKqd,QAAQjJ,SAASwP,KAAK5jB,KAAKyD,KAAK+a,GAAGpK,UAAUyP,gBAAgB,GAClE7jB,KAAKytH,MAAMpnG,mBAAmBrmB,KAAKshH,kBAAmBthH,KAAKyD,KAAK+a,GAAGpK,UACnEpU,KAAKqd,QAAQywG,0BAA0B9tH,KAAKytH,OAC5CztH,KAAKqd,QAAQkF,MAAM0qG,UAAUjtH,KAAKyD,KAAK+a,GAAGu3B,aAE1C,MAAMu5B,EAAStvE,KAAKoR,UAAU9O,aAAa,SAE3CtC,KAAK0tH,QAAQ9pG,KAAK5jB,KAAKyD,KAAKgzC,MAAM5sC,OAClC7J,KAAK2tH,QAAQ/pG,KAAK5jB,KAAKyD,KAAKgzC,MAAM82E,aAElC,IAAK,IAAIzyH,EAAI,EAAG2B,EAAI6yE,EAAO/iE,MAAOzR,EAAI2B,EAAG3B,IAAK,CAC7C,MAAM+O,EAAQ/O,EAAI2B,EAAI,EAAIuD,KAAK0tH,QAAU1tH,KAAK2tH,QAE9Cr+C,EAAOy+C,OAAOjzH,EAAG+O,EAAM1M,EAAG0M,EAAMoJ,EAAGpJ,EAAMsG,GAG1Cm/D,EAAOp/C,aAAc,GA1CvB,2B,8ECVA,eACA,SAEA,SACA,QAEA,OACA,SAEA,MAAM89F,UAAkC,EAAA7rG,uBAAuB,EAAArZ,mBAA/D,c,oBACC,KAAA2tC,MAAQ,EAAAn0B,YAAYvjB,SACpB,KAAA8K,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,GAC9B,KAAAmvH,MAAQ,EAAA3rG,YAAYxjB,MAAM,IAC1B,KAAA+rB,SAAW,EAAAvI,YAAYxjB,MAAM,KAE7B,KAAAmtH,aAAe,EAAA3pG,YAAY1jB,QAAQ,GACnC,KAAAstH,WAAa,EAAA5pG,YAAY/iB,QAAQ,CAAC,KAAM,MAAO,CAACowB,WAAY,CAACs8F,aAAc,KAC3E,KAAAE,YAAc,EAAA7pG,YAAYxjB,MAAM,KAAO,CAAC6wB,WAAY,CAACs8F,aAAc,KACnE,KAAAiC,YAAc,EAAA5rG,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACs8F,aAAc,KAC/D,KAAAkC,WAAa,EAAA7rG,YAAYxjB,MAAM,IAAK,CAAC6wB,WAAY,CAACs8F,aAAc,KAGhE,KAAAn2E,YAAc,EAAAxzB,YAAY1jB,QAAQ,GAClC,KAAAm3C,YAAc,EAAAzzB,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACmmB,YAAa,MAE/D,MAAM/sC,EAAe,IAAIilH,EAEzB,MAAanD,UAA0B,EAAAp1E,4BAAvC,c,oBACC,KAAAzsC,cAAgBD,EAIR,KAAAsjH,mBAAqB,IAAI,EAAAC,iBAChCtsH,KACU,EAAAouH,iBACV,oBAND,cACC,MAAO,cAOR,kBACCpuH,KAAKqsH,mBAAmBjlH,kBAGzB,eACC,MAAMqvC,EAAQ,IAAI,EAAA43E,WAQlB,OANA53E,EAAMzzC,YAAa,EACnByzC,EAAM2O,OAAOqnE,MAAQ,KACrBh2E,EAAM2O,OAAOsnE,QAAQpnH,EAAI,KACzBmxC,EAAM2O,OAAOsnE,QAAQnnH,EAAI,KACzBkxC,EAAM2O,OAAO5nC,OAAO+oD,KAAO,GAEpB9vB,EAGR,sBACCz2C,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG3U,MAC3B7J,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,UAC/BtlD,KAAKy2C,MAAMw3E,MAAQjuH,KAAKwe,GAAGyvG,MAE3BjuH,KAAKy2C,MAAM5rB,SAAW7qB,KAAKwe,GAAGqM,SAE9B7qB,KAAKqsH,mBAAmB5zF,SAEzB,uBACCz4B,KAAKy2C,MAAMzzC,WAAahD,KAAKwe,GAAGytG,aAChCjsH,KAAKy2C,MAAM2O,OAAOsnE,QAAQ9oG,KAAK5jB,KAAKwe,GAAG0tG,YACvClsH,KAAKy2C,MAAM2O,OAAO5nC,OAAO+oD,KAAOvmE,KAAKwe,GAAG0vG,YACxCluH,KAAKy2C,MAAM2O,OAAO5nC,OAAOgpD,IAAMxmE,KAAKwe,GAAG2vG,WACvCnuH,KAAKy2C,MAAM2O,OAAOqnE,KAAOzsH,KAAKwe,GAAG2tG,aAxCnC,uB,8ECzBA,eACA,SAGA,MAAaiC,UAAyB,EAAAxB,gBAC3B,eAET5sH,KAAKqd,QAAQ7b,SAAW,IAAI,EAAA8sH,qBADf,EAC0C,EAAG,GAC1DtuH,KAAKqd,QAAQla,SAAWnD,KAAKic,UAG9B,SACCjc,KAAKqd,QAAQkF,MAAM0qG,UAAUjtH,KAAKyD,KAAK+a,GAAGu3B,aAC1C/1C,KAAKic,UAAUpS,MAAM+Z,KAAK5jB,KAAKyD,KAAKgzC,MAAM5sC,QAT5C,sB,8ECPA,eAEA,SACA,QAEA,OACA,SACA,SAGA,MAAM0kH,UAAiC,EAAApsG,uBAAuB,EAAArZ,mBAA9D,c,oBACC,KAAA2tC,MAAQ,EAAAn0B,YAAYvjB,SACpB,KAAA8K,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,IACjC,KAAAymD,UAAY,EAAAhjC,YAAYxjB,MAAM,GAC9B,KAAAugE,MAAQ,EAAA/8C,YAAYxjB,MAAM,GAAI,CAAC4lC,MAAO,CAAC,EAAG,OAC1C,KAAA8pF,SAAW,EAAAlsG,YAAYxjB,MAAM,IAC7B,KAAAmvH,MAAQ,EAAA3rG,YAAYxjB,MAAM,GAAK,CAAC4lC,MAAO,CAAC,EAAG,KAC3C,KAAA7Z,SAAW,EAAAvI,YAAYxjB,MAAM,IAAK,CAAC4lC,MAAO,CAAC,EAAG,OAI9C,KAAAunF,aAAe,EAAA3pG,YAAY1jB,QAAQ,GACnC,KAAAstH,WAAa,EAAA5pG,YAAY/iB,QAAQ,CAAC,KAAM,OACxC,KAAA4sH,YAAc,EAAA7pG,YAAYxjB,MAAM,MAGhC,KAAAg3C,YAAc,EAAAxzB,YAAY1jB,QAAQ,GAClC,KAAAm3C,YAAc,EAAAzzB,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACmmB,YAAa,MAE/D,MAAM/sC,EAAe,IAAIwlH,EAEzB,MAAazD,UAAyB,EAAAr1E,4BAAtC,c,oBACC,KAAAzsC,cAAgBD,EAKR,KAAAsjH,mBAAqB,IAAI,EAAAC,iBAChCtsH,KACU,EAAAyuH,gBACV,mBAPD,cACC,MAAO,aAQR,kBAECzuH,KAAKqsH,mBAAmBjlH,kBAGzB,eACC,MAAMqvC,EAAQ,IAAI,EAAAi4E,UAYlB,OAVAj4E,EAAMzzC,YAAa,EACnByzC,EAAM2O,OAAOqnE,MAAQ,KACrBh2E,EAAM2O,OAAOsnE,QAAQpnH,EAAI,KACzBmxC,EAAM2O,OAAOsnE,QAAQnnH,EAAI,KACzBkxC,EAAM2O,OAAO5nC,OAAO+oD,KAAO,GAE3BvmE,KAAK2sH,eAAiBl2E,EAAMmM,OAC5B5iD,KAAK2sH,eAAe9vH,KAAO,2BAC3BmD,KAAKjC,OAAOof,IAAInd,KAAK2sH,gBAEdl2E,EAcR,sBACCz2C,KAAKy2C,MAAM5sC,MAAQ7J,KAAKwe,GAAG3U,MAC3B7J,KAAKy2C,MAAM6O,UAAYtlD,KAAKwe,GAAG8mC,UAC/BtlD,KAAKy2C,MAAM4oB,MAAQr/D,KAAKwe,GAAG6gD,OAAS7yD,KAAKiZ,GAAK,KAC9CzlB,KAAKy2C,MAAM+3E,SAAWxuH,KAAKwe,GAAGgwG,SAC9BxuH,KAAKy2C,MAAMw3E,MAAQjuH,KAAKwe,GAAGyvG,MAC3BjuH,KAAKy2C,MAAM5rB,SAAW7qB,KAAKwe,GAAGqM,SAE9B7qB,KAAKqsH,mBAAmB5zF,SAEzB,uBACCz4B,KAAKy2C,MAAMzzC,WAAahD,KAAKwe,GAAGytG,aAChCjsH,KAAKy2C,MAAM2O,OAAOsnE,QAAQ9oG,KAAK5jB,KAAKwe,GAAG0tG,YAGvClsH,KAAKy2C,MAAM2O,OAAOqnE,KAAOzsH,KAAKwe,GAAG2tG,aA1DnC,sB,8EC5BA,eAEA,OACA,OACA,QACA,QAEA,MAAasC,UAAwB,EAAA7B,gBAArC,c,oBACS,KAAA+B,MAAQ,IAAI,EAAAnlH,aACZ,KAAAujH,eAAiB,IAAI,EAAAtiH,kBAAkB,CAACsqC,KAAK,IAC3C,eACT,MAAMvzC,EAAW,IAAI,EAAAsT,eAEfyzB,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAE5G,IAAK,IAAIztC,EAAI,EAAGkB,EAAI,EAAGS,EAAI,GAAI3B,EAAI2B,EAAG3B,IAAKkB,IAAK,CAC/C,MAAM4yH,EAAM9zH,EAAI2B,EAAK+P,KAAKiZ,GAAK,EACzBopG,EAAM7yH,EAAIS,EAAK+P,KAAKiZ,GAAK,EAE/B8iB,EAAUjtC,KAAKkR,KAAKkiB,IAAIkgG,GAAKpiH,KAAKwhB,IAAI4gG,GAAK,EAAGpiH,KAAKkiB,IAAImgG,GAAKriH,KAAKwhB,IAAI6gG,GAAK,GAG3ErtH,EAASkR,aAAa,WAAY,IAAI,EAAAS,uBAAuBo1B,EAAW,IACxEvoC,KAAK2uH,MAAMntH,SAAWA,EAEtBxB,KAAK2uH,MAAMxrH,SAAWnD,KAAK+sH,eAC3B/sH,KAAK2uH,MAAM3B,QAAkB,GAAVxgH,KAAKiZ,IAExBzlB,KAAKjC,OAAOof,IAAInd,KAAK2uH,OAGtB,SACC,MAAMG,GAAc9uH,KAAKyD,KAAKgzC,MAAM5rB,SAAW7qB,KAAKyD,KAAKgzC,MAAM5rB,SAAW,KAAQ7qB,KAAKyD,KAAK+a,GAAGu3B,YACzFg5E,EAAYD,EAAatiH,KAAKwzD,IAAIhgE,KAAKyD,KAAKgzC,MAAM4oB,OAExDr/D,KAAK2uH,MAAMpsG,MAAMhiB,IAAIwuH,EAAWA,EAAWD,GAE3C9uH,KAAK+sH,eAAeljH,MAAM+Z,KAAK5jB,KAAKyD,KAAKgzC,MAAM5sC,QA9BjD,qB,8ECVA,eACA,QACA,QAIA,MAAakhH,UAAsB,EAAAp0E,mBAAnC,c,oBACiB,KAAAp6B,aAAuB,EAAAH,mBAAmB4qB,MAKhD,KAAAjoB,6BAA+B,EAAA3e,YAAY4mC,MAJrD,cACC,MAAO,SAIR,kB,MACyB,QAAxB,EAAAhnC,KAAKohB,2BAAmB,SAAE+zB,OAG3B,YAAkD52C,GACjD,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAoDhjB,GACnD,OAAO0H,MAAMwb,cAAcljB,IAlB7B,mB,8ECNA,eACA,QACA,QAIA,MAAaysH,UAAyB,EAAAr0E,mBAAtC,c,oBACiB,KAAAp6B,aAAuB,EAAAH,mBAAmBV,IAMhD,KAAAqD,6BAA+B,EAAA3e,YAAYsb,IALrD,cACC,MAAO,YAKR,kB,MACyB,QAAxB,EAAA1b,KAAKohB,2BAAmB,SAAE+zB,OAG3B,YAAgD52C,GAC/C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAkDhjB,GACjD,OAAO0H,MAAMwb,cAAcljB,IAnB7B,sB,8ECNA,eACA,QAIA,MAAa0sH,UAAmB,EAAAt0E,mBAAhC,c,oBAMW,KAAA53B,6BAA+B,EAAA3e,YAAYm7B,IALrD,cACC,MAAO,MAKR,kB,MACyB,QAAxB,EAAAv7B,KAAKohB,2BAAmB,SAAE+zB,OAI3B,YAAgD52C,GAC/C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAkDhjB,GACjD,OAAO0H,MAAMwb,cAAcljB,IAnB7B,gB,8ECLA,eACA,QAEA,MAAa2sH,UAA2B,EAAAv0E,mBAAxC,c,oBAMW,KAAA53B,6BAA+B,EAAA3e,YAAY62C,KALrD,cACC,MAAO,eAKR,kB,MACyB,QAAxB,EAAAj3C,KAAKohB,2BAAmB,SAAE+zB,QAR5B,wB,8ECHA,cACA,QAMA,SACA,QAQA,QAGA,QAEA,OACA,MAAM65E,UAA0B,EAAA7sG,uBAAuB,EAAArZ,mBAAvD,c,oBACC,KAAAxI,QAAU,EAAAgiB,YAAY1jB,QAAQ,IAE/B,MAAMmK,EAAe,IAAIimH,EAEzB,MAAa7D,UAAmB,EAAA9uG,aAAhC,c,oBACC,KAAArT,cAAgBD,EAIP,KAAA0Z,qBAA4C,IAAI,EAAAC,oBAAoB1iB,MACnE,KAAA4e,yBAAkD,IAAI,EAAAqwG,sBAAsBjvH,MAItE,KAAAE,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MAEvD,KAAAkvH,WAAalvH,KAAKmvH,oBAehB,KAAApwG,6BAA+B,EAAA3e,YAAYC,IAE7C,KAAA+uH,iBAAmBpvH,KAAKqvH,WAAWxxH,KAAKmC,MACxC,KAAAsvH,oBAAsBtvH,KAAKm/F,cAActhG,KAAKmC,MA5BtD,cACC,MAAO,MAIR,8BACC,OAAOA,KAAK4e,yBAKL,oBACP,OAAO,IAAI,EAAArT,MAEZ,gBACC,OAAOvL,KAAKkvH,WAEb,qBACClvH,KAAKkvH,WAAWryH,KAAO,GAAGmD,KAAKqI,wBAWhC,kB,MACyB,QAAxB,EAAArI,KAAKohB,2BAAmB,SAAE+zB,OAC1Bn1C,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKovH,kBACvCpvH,KAAKw/B,UAAU0/D,sBAAsBl/F,KAAKsvH,qBAE1CtvH,KAAKW,wBAAwByG,kBAC7BpH,KAAKyiB,qBAAqBrb,kBAK1BpH,KAAKjC,OAAOof,IAAInd,KAAKuvH,WAErBvvH,KAAK4b,gBAAgBC,4BAA4B7b,KAAKwvH,mBAAmB3xH,KAAKmC,OAC9EA,KAAKmvH,oBAWN,gBACC,OAAO,IAAI,EAAA5jH,MAUZ,uBACMvL,KAAKoD,MAAM0Z,mBAAmB6jE,cA4BpC,0BACC,GAAI3gF,KAAKE,MAAMI,QAAQG,OAAQ,CAC9B,MAAMgvH,EAAezvH,KAAK4e,yBAAyB6wG,aACnD,QAAOA,GAAeA,EAAat3G,SAEnC,OAAO,EAIT,YAAgD5Z,GAC/C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAkDhjB,GACjD,OAAO0H,MAAMwb,cAAcljB,GAQ5B,aACCyB,KAAKqhB,YAAY,QAElB,cAAc5d,G,QACTzD,KAAKoD,MAAM0Z,mBAAmBs/B,QACH,GAA1Bp8C,KAAKuhB,WAAWvmB,SACA,QAAnB,EAAU,QAAV,EAAAyI,EAAKvD,aAAK,eAAEI,eAAO,SAAEC,KAAI,IAa5B,OACCP,KAAKyiB,qBAAqBgW,SAG1Bz4B,KAAKjC,OAAO24C,QAAU12C,KAAKwe,GAAGle,QAE9BN,KAAK+b,gBAAgBoF,YAjJvB,gB,2FCxBA,QAEA,8BAMC,YAAsB1d,GAAA,KAAAA,OAHtB,KAAAisH,qBAA4C,GAC5C,KAAAC,iBAA2B,EACnB,KAAAC,sCAAwC5vH,KAAK6vH,+BAA+BhyH,KAAKmC,MAExFA,KAAKy6C,YAAc,IAAI,EAAAn8B,cAAc7a,EAAKL,MAAO,yBAEjDpD,KAAKy6C,YAAYx3B,iBAAiB5K,oBACjC,kCACArY,KAAK4vH,uCAIP,mBACC,OAAO5vH,KAAK8vH,cAGb,kBAAkB/xH,GACjBiC,KAAK+vH,eAAiBhyH,EAEvB,oBACC,OAAOiC,KAAK+vH,gBAAkB/vH,KAAKyD,KAAK1F,OAGzC,kBACCiC,KAAKgwH,kBAAkBhwH,KAAKyD,KAAK8rH,WACjCvvH,KAAKyD,KAAKvD,MAAMI,QAAQE,SAAS,KAChCR,KAAKyD,KAAK8rH,UAAU74E,QAAU12C,KAAK8/F,cAC/B9/F,KAAKyD,KAAKvD,MAAMI,QAAQG,QAC3BT,KAAK6vH,mCAIP7vH,KAAKyD,KAAK+7B,UAAU0/D,sBAAuBhkD,I,QACrCl7C,KAAK8vH,eACgB,QAAzB,EAAgB,QAAhB,EAAA50E,EAAWh7C,aAAK,eAAEI,eAAO,SAAEC,KAAI,KAK5B,iBAAiB0vH,G,mDACtB,GAAIjwH,KAAK8vH,eAAiBG,EAAkB,CAC3C,MAAMC,EAAmBlwH,KAAK8vH,cAC1BI,IACHA,EAAiBhwH,MAAMI,QAAQC,KAAI,GACnCP,KAAKy6C,YAAY5xB,mBAAmBqnG,GACpClwH,KAAKmwH,mBAENnwH,KAAK8vH,cAAgBG,EACjBjwH,KAAK8vH,eACR9vH,KAAKy6C,YAAY7xB,gBAAgB5oB,KAAK8vH,eAEvC9vH,KAAK6vH,qCAIP,kBACC,IAAIxlD,EACJ,KAAQA,EAAQrqE,KAAK4/F,cAAcr+E,SAASiH,OAC3CxoB,KAAK4/F,cAAcxiF,OAAOitD,GAI5B,oBACC,OAAOrqE,KAAKyD,KAAKq8F,eAAiB9/F,KAAKyD,KAAKvD,MAAMI,QAAQG,QAAkC,GAAxBT,KAAKyD,KAAK+a,GAAGle,QAGpE,iC,mDACb,GAAKN,KAAKyD,KAAKL,MAAM0Z,mBAAmBs/B,QAGpCp8C,KAAK8/F,eACJ9/F,KAAK8vH,cAAe,CACvB,MACM9uH,SADkBhB,KAAK8vH,cAAcn2G,qBACd3X,eAC7B,GAAIhB,EAAY,CAEf,MAAMovH,EAAcpvH,EAAWC,UAC/B,IAAIovH,EAA4BD,EAAYp1H,QAAUgF,KAAK2vH,iBAC3D,IAAKU,EACJ,IAAK,IAAItyH,KAAUqyH,EACZryH,EAAOsT,QAAQrR,KAAK0vH,uBACzBW,GAA4B,GAK/B,GAAIA,EAA2B,CAC9BrwH,KAAKmwH,kBACLnwH,KAAK0vH,qBAAuB,GAC5B,IAAK,IAAI3xH,KAAUqyH,EAClBpwH,KAAK4/F,cAAcziF,IAAIpf,GACvBiC,KAAK0vH,qBAAqB3xH,EAAOsT,OAAQ,EAE1CrR,KAAK2vH,iBAAmBS,EAAYp1H,aAGrCgF,KAAKmwH,kBACLnwH,KAAK0vH,qBAAuB,GAC5B1vH,KAAK2vH,iBAAmB,S,8EC1G7B,cACA,QACA,QAEA,QACA,SAEA,OACA,MAAMW,UAA2B,EAAAnuG,uBAAuB,EAAArZ,oBACxD,MAAMC,EAAe,IAAIunH,EAEzB,MAAalF,UAAoB,EAAA/uG,aAAjC,c,oBACC,KAAArT,cAAgBD,EAIP,KAAA0Z,qBAA4C,IAAI,EAAAC,oBAAoB1iB,MAC7D,KAAAE,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MACvD,KAAAs2C,QAAU,IAAI,EAAAi6E,WAAW,GALjC,cACC,MAAO,OAMR,gBACC,OAAO,IAAI,EAAAhlH,MAEZ,kBACCvL,KAAKyiB,qBAAqBrb,kBAC1BpH,KAAKjC,OAAOof,IAAInd,KAAKs2C,SACrBt2C,KAAKE,MAAMI,QAAQE,SAAS,KAC3BR,KAAKs2C,QAAQI,QAAU12C,KAAKE,MAAMI,QAAQG,SAG5C,OACCT,KAAKyiB,qBAAqBgW,SAC1Bz4B,KAAK+b,gBAAgBoF,YArBvB,iB,+ECVA,cACA,SACA,SAGMssD,EAAU,CACf5jE,MAAO,IAHR,KAGYM,OAAM,EAAG,EAAG,GACvBo8D,KAAM,EACNC,IAAK,IACLgqD,QAAS,OAMV,OAEA,QACA,MAAMC,UAA0B,EAAA3nH,iBAAhC,c,oBACC,KAAAe,MAAQ,EAAAyY,YAAYzjB,MAAM4uE,EAAQ5jE,MAAM9E,WACxC,KAAA2rH,YAAc,EAAApuG,YAAY1jB,QAAQ,GAClC,KAAA4xH,QAAU,EAAAluG,YAAYxjB,MAAM,GAC5B,KAAAynE,KAAO,EAAAjkD,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,OACxC,KAAA8hC,IAAM,EAAAlkD,YAAYxjB,MAAM,IAAK,CAAC4lC,MAAO,CAAC,EAAG,QAE1C,MAAM37B,EAAe,IAAI0nH,EACzB,MAAajF,UAAmB,EAAAnvG,aAAhC,c,oBACC,KAAArT,cAAgBD,EACA,KAAA7I,MAA0B,IAAI,EAAA2pB,iBAAiB7pB,MAC/C,KAAAuc,aAAuB,EAAAH,mBAAmBI,QAEhD,KAAAE,0BAAoC,EAK9C,kBAQC1c,KAAK2wH,YAAc,IAAI,EAAAC,IAAInjD,EAAQ5jE,MAAMgnH,SAAUpjD,EAAQlH,KAAMkH,EAAQjH,KACzExmE,KAAK8wH,gBAAkB,IAAI,EAAAC,QAAQtjD,EAAQ5jE,MAAMgnH,SAAUpjD,EAAQ+iD,SAEpE,cACC,MAAO,MAoBR,OACC,IAAIz7E,EACA/0C,KAAKwe,GAAGkyG,aACX1wH,KAAK8wH,gBAAgBN,QAAUxwH,KAAKwe,GAAGgyG,QACvCz7E,EAAM/0C,KAAK8wH,kBAEX9wH,KAAK2wH,YAAYpqD,KAAOvmE,KAAKwe,GAAG+nD,KAChCvmE,KAAK2wH,YAAYnqD,IAAMxmE,KAAKwe,GAAGgoD,IAC/BzxB,EAAM/0C,KAAK2wH,aAGZ57E,EAAIlrC,MAAM+Z,KAAK5jB,KAAKwe,GAAG3U,OAEvB7J,KAAKoD,MAAMm1C,cAAcxD,IAAMA,EAE/B/0C,KAAK+b,gBAAgBoF,YAzDvB,gB,8EC3BA,cACA,QAEA,OACA,MAAM6vG,UAA4B,EAAAloH,iBAAlC,c,oBACC,KAAAmoH,SAAW,EAAA3uG,YAAYzjB,MAAM,CAAC,EAAG,EAAG,KAErC,MAAMkK,EAAe,IAAIioH,EAEzB,MAAa3F,UAAqB,EAAAhvG,aAAlC,c,oBACC,KAAArT,cAAgBD,EAChB,cACC,MAAO,QAGR,gBACC,OAAO,IAAI,EAAAuC,MAGZ,kBACCrF,MAAMmB,kBACNpH,KAAKa,GAAGC,QAAQC,qBAGjB,OACCf,KAAK+b,gBAAgBoF,YAhBvB,kB,8ECRA,cAIA,SAEA,SAGMssD,GACE,GADFA,EAEE,GAFFA,EAGA,GAHAA,GAII,GAGV,OACA,SACA,SACA,SACA,QACA,SAAgByjD,EAAiE9uG,GAChF,OAAO,cAAoBA,EAApB,c,oBACN,KAAA5X,KAAO,EAAA8X,YAAYxjB,MAAM,KAF3B,0CAQA,MAAMqyH,UAAyC,EAAArqD,6BAC9C,EAAAC,4BACC,EAAA5kD,uBACC,EAAA6kD,iBAAiBkqD,EAAsC,EAAAzqD,2BAA2B,EAAA39D,yBAIrF,MAAMC,EAAe,IAAIooH,EAEzB,MAAa7F,UAAkC,EAAArkD,mBAA/C,c,oBAIC,KAAAj+D,cAAgBD,EAEhB,wCACC,OAAO,EAAAqoH,uCAGR,cACC,MAAO,sBAGR,gBACC,OAAO,IAAI,EAAAC,mBACK,EAAf5jD,EACgB,EAAhBA,EACc,EAAdA,EACiB,EAAjBA,EACA,EAAAnH,oBAAoBC,KACpB,EAAAD,oBAAoBE,KA2BtB,gBACCxmE,KAAKqoE,2BAGI,2BACT,GAAIroE,KAAKknE,QAAS,CACjB,MAAM18D,EAAOxK,KAAKwe,GAAGhU,MAAQ,EAavB8mH,EAAkB9mH,EAAOxK,KAAKknE,QAC9BhL,EAAO,EACbl8D,KAAKqd,QAAQ8gC,KAAOsvB,EAAe6jD,EAAkBp1D,EACrDl8D,KAAKqd,QAAQghC,MAAQovB,EAAgB6jD,EAAkBp1D,EACvDl8D,KAAKqd,QAAQgjD,IAAMoN,EAAcjjE,EAAO0xD,EACxCl8D,KAAKqd,QAAQijD,OAASmN,EAAiBjjE,EAAO0xD,EAE9Cl8D,KAAKqd,QAAQq/C,2BA1EhB,+B,2FCrCA,SAEA,SAIA,2BAMC,YAAoBj5D,GAAA,KAAAA,OALpB,KAAA8tH,gCAAmE,GAC3D,KAAAC,eAAyD,KAMjE,iBACC,OAAIxxH,KAAKyD,KAAK+E,OAAOwwB,IAXK,YAYlBh5B,KAAKyD,KAAK+E,OAAOtL,IAZC,YAcnB,KAGF,gB,mDACL,MAAMu0H,EAAiBzxH,KAAKyD,KAAKxF,EAAE8jD,SAC7Br6B,EAAY+pG,EAAe/pG,UACjC,GAAIA,GAA0B,IAAbA,EAAiB,CAC7B+pG,EAAet5G,iBACZs5G,EAAe79E,WAEtB,MAAMnwC,EAAOguH,EAAe9qF,aAC5B,GAAIljC,EAAM,CACT,GAAIA,aAAgB,EAAAm+C,6BACnB,OAAOn+C,EAEPzD,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,mDAG5BP,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,0BAG7B,OAAO,QAGF,kB,mDACL,MAAMmxH,QAAsB1xH,KAAK0xH,gBAC7BA,GACC1xH,KAAKwxH,gBAAkBE,GAC1B1xH,KAAK2xH,uBAIP3xH,KAAKwxH,eAAiBE,KAGjB,eAAexZ,G,mDACpB,MAAMwZ,QAAsB1xH,KAAK0xH,gBACjC,GAAIA,EAAe,CAKlB,MAAMrZ,EAAcqZ,EAAcrZ,cAClC,IAAIuZ,GAA0B,EAO9B,GALC5xH,KAAKuxH,gCAAgCrZ,EAAaxoG,KAClD1P,KAAKuxH,gCAAgCrZ,EAAaxoG,IAAI2oG,KAEtDuZ,GAA0B,IAEtBA,EAAyB,CAE7B5xH,KAAKuxH,gCAAgCrZ,EAAaxoG,IACjD1P,KAAKuxH,gCAAgCrZ,EAAaxoG,KAAO,GAC1D1P,KAAKuxH,gCAAgCrZ,EAAaxoG,IAAI2oG,IAAe,EAIrE,MAAMt2D,QAAiB2vE,EAAcG,eAAe7xH,KAAKyD,KAAK1F,OAAQm6G,GAChE/kC,EAAS,IAAI,EAAA2+C,qBAAqB9xH,KAAKyD,KAAKqoB,cAAe4lG,EAAe3vE,GAGhF,OAFA2vE,EAAcK,qBAAqBhwE,EAAU/hD,KAAKyD,MAClDzD,KAAKgyH,oBAAoBjwE,GAClBoxB,OAIV,uBACCnzE,KAAKuxH,gCAAkC,GAMlC,iBAAiBrZ,G,0DACfl4G,KAAKuxH,gCAAgCrZ,EAAaxoG,OAc1D,oBAAoBqyC,GAWnB/hD,KAAKiyH,wBAA0B,KAC9BjyH,KAAKkyH,kBAAkBnwE,IAExB/hD,KAAKmyH,sBAAwB,KAC5BnyH,KAAKoyH,gBAAgBrwE,IAEtBA,EAASggB,iBAAiB,QAAS/hE,KAAKiyH,yBACxClwE,EAASggB,iBAAiB,MAAO/hE,KAAKmyH,uBAGvC,kBAAkBpwE,IAGlB,gBAAgBA,GAEf,GAAIA,EAASa,OAAQ,CACpB,MAAMn0C,EAAMszC,EAASa,OAAO79C,UAC5B/E,KAAKyD,KAAK+E,OAAOmd,YAAY,SAAUlX,GAExCzO,KAAKyD,KAAK4uH,yC,8ECxIZ,6BACC,YACSC,EACAd,EACAe,GAFA,KAAAD,kBACA,KAAAd,iBACA,KAAAe,YAGT,qBACC,OAAOvyH,KAAKsyH,gBAKb,eACC,OAAOtyH,KAAKuyH,UAEb,oBACC,OAAOvyH,KAAKwxH,eAGb,SAASgB,GACR,OACCA,EAAaC,gBAAkBzyH,KAAKsyH,iBACpCE,EAAad,cAAc5lG,eAAiB9rB,KAAKwxH,eAAe1lG,iB,6BCzBnE,8DAOIouB,EAAa,SAAW92C,EAAOoa,EAAQk1G,EAAkBC,EAAYx4E,GAExE,IAAK/+C,KAAM4E,MAEXA,KAAKoD,MAAQA,EACbpD,KAAKwd,OAASA,EAEdxd,KAAK0yH,iBAAmBA,EAExB1yH,KAAK2yH,WAAaA,EAClB3yH,KAAKm6C,gBAA8B51C,IAAf41C,EAA6BA,EAAa,EAE9Dn6C,KAAK6d,OAAQ,EACb7d,KAAK4yH,YAAa,EAClB5yH,KAAK4d,WAAY,GAIlBs8B,EAAWh/C,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAKzC,WAAa,CAEtE6Y,YAAammC,EAEbj8B,OAAQ,SAAWI,EAAUw0G,EAAaC,GAEzC,IAGIC,EAAeC,EAAeC,EAH9BC,EAAe70G,EAASqpF,UAC5BrpF,EAASqpF,WAAY,OAIUnjG,IAA1BvE,KAAK0yH,mBAETO,EAAsBjzH,KAAKoD,MAAMsvH,iBAEjC1yH,KAAKoD,MAAMsvH,iBAAmB1yH,KAAK0yH,kBAI/B1yH,KAAK2yH,aAETI,EAAgB10G,EAAS80G,gBAAgBtC,SACzCmC,EAAgB30G,EAAS+0G,gBAEzB/0G,EAASg1G,cAAerzH,KAAK2yH,WAAY3yH,KAAKm6C,aAI1Cn6C,KAAK4yH,YAETv0G,EAASu0G,aAIVv0G,EAASspF,gBAAiB3nG,KAAK8d,eAAiB,KAAOg1G,GAGlD9yH,KAAK6d,OAAQQ,EAASR,MAAOQ,EAASi1G,eAAgBj1G,EAASk1G,eAAgBl1G,EAASm1G,kBAC7Fn1G,EAASJ,OAAQje,KAAKoD,MAAOpD,KAAKwd,QAE7Bxd,KAAK2yH,YAETt0G,EAASg1G,cAAeN,EAAeC,QAITzuH,IAA1BvE,KAAK0yH,mBAET1yH,KAAKoD,MAAMsvH,iBAAmBO,GAI/B50G,EAASqpF,UAAYwrB,M,8ECxEvB,eAeA,MAAa3qD,UAAsB,EAAAkrD,WAMlC,YAAYt9F,EAAmC5e,EAAmB6vB,GACjEnhC,MAAMkwB,EAAY5e,EAAQ6vB,GADoB,KAAA7vB,SAJvC,KAAAm8G,WAAqB,EAErB,KAAAC,gBAA8B3zH,KAAK4zH,QAAQ/1H,KAAKmC,MAKvDA,KAAK6zH,QAAUt5D,SAASo1C,cAAc,UACtC3vG,KAAK6zH,QAAQnkH,GAAK,aAAalD,KAAKsnH,WAAW7lH,QAAQ,IAAK,KAC5DjO,KAAK6zH,QAAQE,MAAMzzH,QAAU,QAC7BN,KAAK6zH,QAAQE,MAAMC,QAAU,OAE7Bh0H,KAAKm2B,WAAW65E,YAAYhwG,KAAK6zH,SACjC7zH,KAAKm2B,WAAW89F,UAAU92G,IAxBV,qBAyBhBnd,KAAKm2B,WAAW49F,MAAMhtB,OAAS,OAE/B/mG,KAAKk0H,cAGC,SACNl0H,KAAKm0H,gBACLn0H,KAAKo0H,WAGN,UACCp0H,KAAKq0H,kBACLr0H,KAAKioE,oBAAoBqsD,mBAIlB,cACPt0H,KAAKsvD,kBAAkBna,OACvBn1C,KAAK0mF,iBAAiBvxC,OAGtBh3C,OAAOo2H,SAAW,KACjBv0H,KAAK8gD,mBAAmB0zE,aAQlB,gB,MACP,IAAKx0H,KAAK6zH,QACT,OAED7zH,KAAK8gD,mBAAmB2zE,0BACxB,MAAMjqH,EAAgBxK,KAAK8gD,mBAAmBt2C,KAEX,QAAnC,EAAAxK,KAAK8gD,mBAAmB1Z,mBAAW,SAAE0gC,wBAAwB4sD,gBAAgB10H,KAAK6zH,QAASrpH,GAwC3FxK,KAAK8gD,mBAAmB6zE,yBAGxB30H,KAAK4zH,UAGN,U,MACK5zH,KAAK0zH,YACR1zH,KAAKuX,OAAOqpC,gBAAgBg0E,4BAC5B50H,KAAKie,SACoB,QAAzB,EAAAje,KAAKsnE,4BAAoB,SAAE7uC,SAO3Bz4B,KAAK60H,4BAA8BC,sBAAsB90H,KAAK2zH,kBAIxD,kB,MACP3zH,KAAK0zH,WAAY,EACb1zH,KAAK60H,6BACRE,qBAAqB/0H,KAAK60H,6BAEvB70H,KAAK6zH,UAC2B,QAAnC,EAAA7zH,KAAK8gD,mBAAmB1Z,mBAAW,SAAE0gC,wBAAwBktD,gBAAgBh1H,KAAK6zH,UAMpF,SACC,GAAI7zH,KAAK8gD,mBAAmB1Z,aAAepnC,KAAK6zH,QAAS,CACxD,MAAMrpH,EAAOxK,KAAK8gD,mBAAmBt2C,KAC/B4tC,EAASp4C,KAAK8gD,mBAAmB1I,OACvCp4C,KAAK8gD,mBAAmB1Z,YAAY0gC,wBAAwB7pD,OAAOje,KAAK6zH,QAASrpH,EAAM4tC,QAEvF/0C,QAAQiE,KAAK,6BApIhB,mB,2FCVA,SACA,SACA,SACA,SAMA,mBAgCC,YAAsB6uB,EAAmC5e,EAAmB6vB,GAAtD,KAAAjR,aAAmC,KAAA5e,SA7B/C,KAAA09G,SAAmB,EA8B5Bj1H,KAAKk1H,eAAiBl1H,KAAKuX,OAAOghC,cAClCv4C,KAAKm1H,iBAAiB/tF,GAAa7Q,KAAK,KACvCv2B,KAAKo1H,WA9BP,aACC,OAAOp1H,KAAKi1H,QAEb,WACCj1H,KAAKi1H,SAAU,EAEhB,aACCj1H,KAAKi1H,SAAU,EAIhB,yBACC,OAAQj1H,KAAKi8E,oBAAsBj8E,KAAKi8E,qBAAuB,IAAI,EAAAC,kBAAkBl8E,MAGtF,0BACC,OAAQA,KAAKsnE,qBAAuBtnE,KAAKsnE,sBAAwB,IAAI,EAAAC,mBAAmBvnE,MAGzF,wBACC,OAAQA,KAAKm9E,mBAAqBn9E,KAAKm9E,oBAAsB,IAAI,EAAAk4C,uBAAuBr1H,MAGzF,uBACC,OAAQA,KAAKg+E,kBAAoBh+E,KAAKg+E,mBAAqB,IAAI,EAAAC,gBAAgBj+E,MAShF,gBACC,OAAOA,KAAKm2B,WAEb,YACC,OAAOn2B,KAAKuX,OAEb,aACC,OAAOvX,KAAK6zH,QAGC,iBAAiBzsF,G,yDACxBpnC,KAAK8gD,mBAAmBw0E,gBAAgBluF,GAAepnC,KAAKuX,OAAOupC,mBAAmBy0E,uBAM7F,wBACCv1H,KAAK+B,UAAUkyH,UAAU72G,OA1DA,WA4D1B,8BACCpd,KAAK+B,UAAUkyH,UAAU92G,IA7DA,c,2FChB3B,OAGA,QAEA,0BASC,YAAoBq4G,GAAA,KAAAA,SAPZ,KAAAC,aAA6C,KAG7C,KAAAC,MAAiB,IAAI,EAAA7+F,QAAQ,IAAK,KAClC,KAAAqwC,QAAkB,EAQpB,gBAAgB9/B,G,mDAChBpnC,KAAKy1H,cAAgBruF,EAAYtb,eAAiB9rB,KAAKy1H,aAAa3pG,gBACxE9rB,KAAKy1H,aAAeruF,EAEpBpnC,KAAK21H,2BACC31H,KAAKw1H,OAAOvtD,oBAAoB2tD,sBAIhC,qBACP,IAAK51H,KAAKy1H,aACT,OAED,MAAMhE,EAAiBzxH,KAAKy1H,aAAajtH,OAAOqtH,kBAAkB,YAC7DpE,IAGLzxH,KAAKy6C,YAAcz6C,KAAKy6C,aAAez6C,KAAK81H,qBACvC91H,KAAKy6C,cAGVz6C,KAAKy6C,YAAY46C,gCACjBr1F,KAAKy6C,YAAY7xB,gBAAgB6oG,KAE1B,qBACP,IAAKzxH,KAAKy1H,aACT,OAED,MAAMhyH,EAAO,IAAI,EAAA6a,cAActe,KAAKy1H,aAAaryH,MAAO,mBAIxD,OAHAK,EAAK4U,oBAAoB,kCAAmC,IAAY,EAAD,gDAChErY,KAAKw1H,OAAOvtD,oBAAoB2tD,sBAEhCnyH,EAGR,kBACC,OAAOzD,KAAKy1H,aAEb,WACC,OAAOz1H,KAAK01H,MAEb,aACC,OAAO11H,KAAKknE,QAGb,Y,MACMlnE,KAAKw1H,OAAOruF,SAGjBnnC,KAAKy0H,0BACY,QAAjB,EAAAz0H,KAAKy1H,oBAAY,SAAE3tD,wBAAwBzuB,kBAAkBr5C,KAAKw1H,OAAOruF,OAAQnnC,KAAK01H,OACtF11H,KAAK+1H,wBAEN,0B,MACC/1H,KAAKg2H,eACY,QAAjB,EAAAh2H,KAAKy1H,oBAAY,SAAEryH,MAAMuvB,oBAAoBsjG,2CAA2Cj2H,KAAK01H,OAC7F11H,KAAKknE,QAAUlnE,KAAKk2H,cAGb,eACPl2H,KAAK01H,MAAMpwH,EAAItF,KAAKw1H,OAAOzzH,UAAU40D,YACrC32D,KAAK01H,MAAMnwH,EAAIvF,KAAKw1H,OAAOzzH,UAAU80D,aAE9B,cACP,OAAO72D,KAAK01H,MAAMpwH,EAAItF,KAAK01H,MAAMnwH,EAGlC,uB,MACkB,QAAjB,EAAAvF,KAAKy1H,oBAAY,SAAEn9E,uBAAuBt4C,KAAKknE,SAW1C,yB,mDACDlnE,KAAKy1H,qBAUqBz1H,KAAKy1H,aAAa97G,0BACzC3Z,KAAKm2H,oCAOP,gC,mDAQLn2H,KAAK+1H,6BAUC/1H,KAAKw1H,OAAOvtD,oBAAoB2tD,wB,2FCrIxC,2BAKC,YAAoBJ,GAAA,KAAAA,SAJV,KAAAP,SAAmB,EACnB,KAAA1C,UAAmC,KAC7C,KAAA6D,yBAAuCp2H,KAAKq2H,mBAAmBx4H,KAAKmC,MACpE,KAAAs2H,uBAAqCt2H,KAAKu2H,iBAAiB14H,KAAKmC,MAGhE,aACC,OAAOA,KAAKi1H,QAEb,kBACC,OAAOj1H,KAAKw1H,OAAO10E,mBAAmB1Z,YAEvC,eACC,OAAOpnC,KAAKuyH,UAGP,kB,yDAGL,GAFAvyH,KAAKs0H,oBAEAt0H,KAAKw1H,OAAOruF,OAChB,OAGD,MAAMgsC,QAA+B,QAAtB,EAAMnzE,KAAKonC,mBAAW,eAAE6gC,oBAAoB4pD,eAAe7xH,KAAKw1H,OAAOruF,QAClFgsC,IAEHnzE,KAAKuyH,UAAYp/C,EAAOpxB,SAGpB/hD,KAAKuyH,YACJvyH,KAAKw1H,OAAO/0H,QACfT,KAAKuyH,UAAUxwD,iBAAiB,QAAS/hE,KAAKo2H,0BAC9Cp2H,KAAKuyH,UAAUxwD,iBAAiB,MAAO/hE,KAAKs2H,yBAE5Ct2H,KAAKs0H,wBAmBT,SACKt0H,KAAKuyH,WACRvyH,KAAKuyH,UAAU95F,SAIjB,mB,MACKz4B,KAAKuyH,YACJvyH,KAAKw1H,OAAOruF,SACC,QAAhB,EAAAnnC,KAAKonC,mBAAW,SAAE6gC,oBAAoBqsD,iBAAiBt0H,KAAKw1H,OAAOruF,SAGhEnnC,KAAKo2H,0BACRp2H,KAAKuyH,UAAU50D,oBAAoB,QAAS39D,KAAKo2H,0BAE9Cp2H,KAAKs2H,wBACRt2H,KAAKuyH,UAAU50D,oBAAoB,MAAO39D,KAAKs2H,wBAGhDt2H,KAAKuyH,UAAUn0G,UACfpe,KAAKuyH,UAAY,MAGX,qBACPvyH,KAAKi1H,SAAU,EAER,mBACPj1H,KAAKi1H,SAAU,K,8EC7EjB,+BAQC,YAAsBO,GAAA,KAAAA,SALZ,KAAAgB,oBAAiDx2H,KAAKy2H,cAAc54H,KAAKmC,MACzE,KAAA02H,oBAAiD12H,KAAK22H,cAAc94H,KAAKmC,MACzE,KAAA42H,kBAA+C52H,KAAK62H,YAAYh5H,KAAKmC,MAK/E,kBACC,OAAOA,KAAKw1H,OAAO10E,mBAAmB1Z,YAEvC,aACC,OAAOpnC,KAAKw1H,OAAOruF,OAGpB,OACMnnC,KAAKmnC,SAGNnnC,KAAKw2H,qBACRx2H,KAAKmnC,OAAOw2B,oBAAoB,YAAa39D,KAAKw2H,qBAE/Cx2H,KAAK02H,qBACR12H,KAAKmnC,OAAOw2B,oBAAoB,YAAa39D,KAAK02H,qBAE/C12H,KAAK42H,mBACR52H,KAAKmnC,OAAOw2B,oBAAoB,UAAW39D,KAAK42H,mBAEjD52H,KAAKw2H,oBAAsBx2H,KAAKw2H,qBAAuBx2H,KAAKy2H,cAAc54H,KAAKmC,MAC/EA,KAAK02H,oBAAsB12H,KAAK02H,qBAAuB12H,KAAK22H,cAAc94H,KAAKmC,MAC/EA,KAAK42H,kBAAoB52H,KAAK42H,mBAAqB52H,KAAK62H,YAAYh5H,KAAKmC,MAEzEA,KAAKmnC,OAAO46B,iBAAiB,YAAa/hE,KAAKw2H,qBAC/Cx2H,KAAKmnC,OAAO46B,iBAAiB,YAAa/hE,KAAK02H,qBAC/C12H,KAAKmnC,OAAO46B,iBAAiB,UAAW/hE,KAAK42H,mBAG7C52H,KAAKmnC,OAAO46B,iBAAiB,aAAc/hE,KAAKw2H,qBAAqB,GACrEx2H,KAAKmnC,OAAO46B,iBAAiB,YAAa/hE,KAAK02H,qBAAqB,GACpE12H,KAAKmnC,OAAO46B,iBAAiB,WAAY/hE,KAAK42H,mBAAmB,GACjE52H,KAAKmnC,OAAO46B,iBAAiB,cAAe/hE,KAAK42H,mBAAmB,IAG3D,cAAc1vF,GACvBlnC,KAAKw1H,OAAOpyH,MAAMksD,kBAAkBQ,cAAc5oB,EAAOlnC,KAAKmnC,OAASnnC,KAAKonC,aAanE,cAAcF,GACvBlnC,KAAKw1H,OAAOpyH,MAAMksD,kBAAkBQ,cAAc5oB,EAAOlnC,KAAKmnC,OAASnnC,KAAKonC,aAiBnE,YAAYF,GACrBlnC,KAAKw1H,OAAOpyH,MAAMksD,kBAAkBQ,cAAc5oB,EAAOlnC,KAAKmnC,OAASnnC,KAAKonC,gB,8ECnF9E,wBAGC,YAAsBouF,GAAA,KAAAA,SAEtB,OACC,MAAMruF,EAASnnC,KAAKw1H,OAAOruF,OACvBA,IACHA,EAAO2vF,mBAAqB92H,KAAK+2H,qBAAqBl5H,KAAKmC,MAC3DmnC,EAAO6vF,uBAAyBh3H,KAAKi3H,yBAAyBp5H,KAAKmC,OAI3D,uBACTqD,QAAQiE,KAAK,wBAAyBtH,KAAKw1H,OAAOpyH,MAAMq9C,OAEpDzgD,KAAKk3H,2BACRnC,qBAAqB/0H,KAAKk3H,4BAE1B7zH,QAAQiE,KAAK,8CAEdjE,QAAQiE,KAAK,eAAgBtH,KAAKk3H,4BAEzB,2BACT7zH,QAAQC,IAAI,uB,2FC1Bd,SAEA,4BAEA,MAAa8tH,UAA+C,EAAA/pD,yBACjD,qBACT,MAAMthC,EAAO/lC,KAAKymC,YAElB,IAAI2B,EAAQpoC,KAAKyD,KAAK+E,OAAOy7B,MAAM,QAC/B8iE,EAAS3+D,EAEb,MAAMo+B,EAAMxmE,KAAKyD,KAAK+E,OAAOy7B,MAAM,QAC/BuiC,GAAQ,UAAap+B,IAAW,UAAa2+D,KAChDhhE,EAAKxjB,MAAMjd,EAAI8iC,EACfrC,EAAKxjB,MAAMhd,EAAIwhG,EACfhhE,EAAK3xB,SAAS5O,GAAK,MAASghE,IAX/B,4C,8ECFA,cACA,SACA,SAGMiH,EACA,GAIN,OACA,SACA,SACA,SACA,QACA,SAAgB0pD,EAAgE/0G,GAC/E,OAAO,cAAoBA,EAApB,c,oBACN,KAAA69C,IAAM,EAAA39C,YAAYxjB,MAAM2uE,EAAa,CAAC/oC,MAAO,CAAC,EAAG,SAFnD,yCAOA,MAAM0yF,UAAwC,EAAAtwD,6BAC7C,EAAAC,4BACC,EAAA5kD,uBACC,EAAA6kD,iBAAiBmwD,EAAqC,EAAA1wD,2BAA2B,EAAA39D,yBAIpF,MAAMC,EAAe,IAAIquH,EAEzB,MAAa7L,UAAiC,EAAAtkD,mBAA9C,c,oBACC,KAAAj+D,cAAgBD,EAChB,cACC,MAAO,qBAGR,wCACC,OAAO,EAAAsuH,sCAGR,gBACC,OAAO,IAAI,EAAAC,kBAAkB7pD,EAAa,EAAG,EAAAnH,oBAAoBC,KAAM,EAAAD,oBAAoBE,KAgB5F,gBACKxmE,KAAKqd,QAAQ4iD,KAAOjgE,KAAKwe,GAAGyhD,MAC/BjgE,KAAKqd,QAAQ4iD,IAAMjgE,KAAKwe,GAAGyhD,IAC3BjgE,KAAKqd,QAAQq/C,0BAEd18D,KAAKqoE,2BAGI,2BACLroE,KAAKknE,UAGRlnE,KAAKqd,QAAQ+6B,OAASp4C,KAAKknE,QAO3BlnE,KAAKqd,QAAQq/C,2BA9ChB,8B,2FCjCA,SAEA,OACA,4BACA,4BAqBM66D,EAA0B,CAC/BC,GAAI,CAAClyH,GAAI,EAAGC,GAAI,GAChBkyH,GAAI,CAACnyH,EAAG,EAAIC,GAAI,GAChBmyH,GAAI,CAACpyH,GAAI,EAAGC,EAAG,GACfoyH,GAAI,CAACryH,EAAG,EAAIC,EAAG,IAEVqyH,EAAuC,CAAC,KAAM,KAAM,KAAM,MAEhE,MAAaP,UAA8C,EAAAhwD,yBAA3D,c,oBACS,KAAAwwD,WAAwB,CAC/BL,GAAI,IAAI,EAAApkH,QACRqkH,GAAI,IAAI,EAAArkH,QACRskH,GAAI,IAAI,EAAAtkH,QACRukH,GAAI,IAAI,EAAAvkH,SAED,KAAA0kH,WAAa,IAAI,EAAA1kH,QAEf,qBACT,MAAM2yB,EAAO/lC,KAAKymC,YAElB,IAAK,IAAIsxF,KAAeH,EACvB53H,KAAKg4H,sBAAsBh4H,KAAK63H,WAAWE,GAAcR,EAAaQ,IAEvE,IAAI3vF,EAAQpoC,KAAK63H,WAAWL,GAAGS,WAAWj4H,KAAK63H,WAAWJ,IACtD1wB,EAAS/mG,KAAK63H,WAAWL,GAAGS,WAAWj4H,KAAK63H,WAAWH,IAE3D13H,KAAK83H,WAAWxyH,EAAI,UAAWsyH,EAAa5yH,IAAKnI,GAASmD,KAAK63H,WAAWh7H,GAAMyI,IAAM,EACtFtF,KAAK83H,WAAWvyH,EAAI,UAAWqyH,EAAa5yH,IAAKnI,GAASmD,KAAK63H,WAAWh7H,GAAM0I,IAAM,EACtFvF,KAAK83H,WAAWtyH,EAAI,UAAWoyH,EAAa5yH,IAAKnI,GAASmD,KAAK63H,WAAWh7H,GAAM2I,IAAM,EAEtF,MAAMghE,EAAMxmE,KAAKyD,KAAK+E,OAAOy7B,MAAM,OAC7BwB,EAAmBzlC,KAAKyD,KAAK+E,OAAOy7B,MAAM,oBAChD,GAAIuiC,IAAQ,UAAap+B,KAAW,UAAa2+D,GAAS,CACzD,MACMmxB,EAAU1xD,EADNxmE,KAAK83H,WAAWG,WAAWj4H,KAAKyD,KAAK1F,OAAOqW,UAEhD+jH,EAAgB1yF,GAAoB,EAGzCshE,EADG3+D,EAAQ2+D,EACF3+D,EAAQ+vF,EAER/vF,EAAQ+vF,EAGlBpyF,EAAKxjB,MAAMjd,EAAI8iC,EAAQ8vF,EACvBnyF,EAAKxjB,MAAMhd,EAAIwhG,EAASmxB,EACxBnyF,EAAK3xB,SAAS5O,GAAK,MAASghE,GAG9B,sBAAsBquB,EAAiBujC,GACtCp4H,KAAK0lC,cAAc2yF,cAAcD,EAAOp4H,KAAKyD,KAAK1F,QAClD82F,EACEjxE,KAAK5jB,KAAK0lC,cAAc4yF,IAAIC,WAC5B10G,eAAe7jB,KAAKyD,KAAK+E,OAAOy7B,MAAM,QACtC9mB,IAAInd,KAAK0lC,cAAc4yF,IAAIE,SA7C/B,2C,+ECjCA,eAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WAgEA,oBACC,WAAW9yB,GACVA,EAAK3qF,cAAc,EAAA09G,WAAY,EAAAh+F,aAAahB,OAC5CisE,EAAK3qF,cAAc,EAAA29G,qBAAsB,EAAAj+F,aAAaC,WACtDgrE,EAAK3qF,cAAc,EAAA49G,sBAAuB,EAAAl+F,aAAaC,WACvDgrE,EAAK3qF,cAAc,EAAA69G,qBAAsB,EAAAn+F,aAAav0B,WACtDw/F,EAAK3qF,cAAc,EAAA89G,kBAAmB,EAAAp+F,aAAav0B,WACnDw/F,EAAK3qF,cAAc,EAAA+9G,oBAAqB,EAAAr+F,aAAav0B,WACrDw/F,EAAK3qF,cAAc,EAAAg+G,oBAAqB,EAAAt+F,aAAav0B,WACrDw/F,EAAK3qF,cAAc,EAAAi+G,uBAAwB,EAAAv+F,aAAav0B,WACxDw/F,EAAK3qF,cAAc,EAAAk+G,qBAAsB,EAAAx+F,aAAav0B,WACtDw/F,EAAK3qF,cAAc,EAAAm+G,mBAAoB,EAAAz+F,aAAav0B,WACpDw/F,EAAK3qF,cAAc,EAAAo+G,oBAAqB,EAAA1+F,aAAav0B,WACrDw/F,EAAK3qF,cAAc,EAAAq+G,sBAAuB,EAAA3+F,aAAav0B,WACvDw/F,EAAK3qF,cAAc,EAAAs+G,mBAAoB,EAAA5+F,aAAaE,UACpD+qE,EAAK3qF,cAAc,EAAAu+G,aAAc,EAAA7+F,aAAaE,UAC9C+qE,EAAK3qF,cAAc,EAAAw+G,WAAY,EAAA9+F,aAAaG,YAC5C8qE,EAAK3qF,cAAc,EAAAy+G,aAAc,EAAA/+F,aAAalB,MAC9CmsE,EAAK3qF,cAAc,EAAA0+G,YAAa,EAAAh/F,aAAaf,UAC7CgsE,EAAK3qF,cAAc,EAAA2+G,cAAe,EAAAj/F,aAAaG,YAC/C8qE,EAAK3qF,cAAc,EAAA4+G,aAAc,EAAAl/F,aAAaE,UAC9C+qE,EAAK3qF,cAAc,EAAA6+G,YAAa,EAAAn/F,aAAaG,YAC7C8qE,EAAK3qF,cAAc,EAAA8+G,YAAa,EAAAp/F,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAA++G,YAAa,EAAAr/F,aAAahB,OAC7CisE,EAAK3qF,cAAc,EAAAg/G,eAAgB,EAAAt/F,aAAahB,OAChDisE,EAAK3qF,cAAc,EAAAi/G,aAAc,EAAAv/F,aAAalB,MAC9CmsE,EAAK3qF,cAAc,EAAAk/G,cAAe,EAAAx/F,aAAaE,UAC/C+qE,EAAK3qF,cAAc,EAAAm/G,YAAa,EAAAz/F,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAAo/G,YAAa,EAAA1/F,aAAahB,OAC7CisE,EAAK3qF,cAAc,EAAAq/G,YAAa,EAAA3/F,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAAs/G,gBAAiB,EAAA5/F,aAAaG,YACjD8qE,EAAK3qF,cAAc,EAAAu/G,iBAAkB,EAAA7/F,aAAalB,MAClDmsE,EAAK3qF,cAAc,EAAAw/G,gBAAiB,EAAA9/F,aAAaI,QACjD6qE,EAAK3qF,cAAc,EAAAy/G,cAAe,EAAA//F,aAAaE,UAC/C+qE,EAAK3qF,cAAc,EAAA0/G,aAAc,EAAAhgG,aAAaE,UAC9C+qE,EAAK3qF,cAAc,EAAA2/G,YAAa,EAAAjgG,aAAaG,YAC7C8qE,EAAK3qF,cAAc,EAAA4/G,gBAAiB,EAAAlgG,aAAaI,QACjD6qE,EAAK3qF,cAAc,EAAA6/G,aAAc,EAAAngG,aAAalB,MAC9CmsE,EAAK3qF,cAAc,EAAA8/G,aAAc,EAAApgG,aAAalB,MAC9CmsE,EAAK3qF,cAAc,EAAA+/G,eAAgB,EAAArgG,aAAaE,UAChD+qE,EAAK3qF,cAAc,EAAAggH,YAAa,EAAAtgG,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAAigH,mBAAoB,EAAAvgG,aAAahB,OACpDisE,EAAK3qF,cAAc,EAAAkgH,iBAAkB,EAAAxgG,aAAaI,QAClD6qE,EAAK3qF,cAAc,EAAAmgH,0BAA2B,EAAAzgG,aAAaX,UAC3D4rE,EAAK3qF,cAAc,EAAAogH,YAAa,EAAA1gG,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAAqgH,aAAc,EAAA3gG,aAAaG,YAC9C8qE,EAAK3qF,cAAc,EAAAsgH,aAAc,EAAA5gG,aAAaE,UAC9C+qE,EAAK3qF,cAAc,EAAAugH,gBAAiB,EAAA7gG,aAAaE,UACjD+qE,EAAK3qF,cAAc,EAAAwgH,WAAY,EAAA9gG,aAAaE,UAC5C+qE,EAAK3qF,cAAc,EAAAygH,gBAAiB,EAAA/gG,aAAaE,UACjD+qE,EAAK3qF,cAAc,EAAA0gH,eAAgB,EAAAhhG,aAAaE,UAChD+qE,EAAK3qF,cAAc,GAAA2gH,YAAa,EAAAjhG,aAAaE,UAC7C+qE,EAAK3qF,cAAc,EAAA4gH,eAAgB,EAAAlhG,aAAaE,UAChD+qE,EAAK3qF,cAAc,GAAA6gH,cAAe,EAAAnhG,aAAaG,YAC/C8qE,EAAK3qF,cAAc,GAAA8gH,cAAe,EAAAphG,aAAalB,MAC/CmsE,EAAK3qF,cAAc,GAAA+gH,YAAa,EAAArhG,aAAaG,YAC7C8qE,EAAK3qF,cAAc,GAAAghH,aAAc,EAAAthG,aAAaG,YAC9C8qE,EAAK3qF,cAAc,GAAAihH,iBAAkB,EAAAvhG,aAAaG,YAClD8qE,EAAK3qF,cAAc,GAAAkhH,iBAAkB,EAAAxhG,aAAaE,UAClD+qE,EAAK3qF,cAAc,GAAAmhH,YAAa,EAAAzhG,aAAaG,YAC7C8qE,EAAK3qF,cAAc,GAAAohH,iBAAkB,EAAA1hG,aAAaE,a,oFCvLpD,E,KAAA,wBAGA,OACA,OACA,QAEA,QAIA,OACA,MAAMyhG,UAA2B,EAAAtzH,iBAAjC,c,oBACC,KAAAuzH,aAAe,EAAA/5G,YAAY1jB,QAAQ,GACnC,KAAA+E,aAAe,EAAA2e,YAAYtjB,QAAQ,EAAG,CACrC0lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,GACrBhV,WAAY,CAAC0sG,cAAc,KAE5B,KAAAjoH,SAAW,EAAAkO,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI,CAACmwB,WAAY,CAAC0sG,cAAc,KAEtE,KAAAC,KAAO,EAAAh6G,YAAY1jB,QAAQ,GAC3B,KAAA29H,sBAAwB,EAAAj6G,YAAY1jB,QAAQ,IAE7C,MAAMmK,EAAe,IAAIqzH,EAEzB,MAAa3D,UAAmB,EAAA74H,aAAhC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,MAIR,+BACC,MAAO,CAAC,+CAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAG7B,KAAK5B,GACJhhB,KAAK6oE,SAAW,GAChB7oE,KAAKw8H,gBAKLx8H,KAAKkC,YAAYlC,KAAK6oE,UAGf,gBACP,GAAI7oE,KAAKwe,GAAG69G,aAAc,CACzB,MAAM76H,EAAW,IAAI,EAAAsT,eACfyzB,EAAsB,GAC5B,UAAavoC,KAAKwe,GAAG7a,aAAe7I,IACnCkF,KAAKwe,GAAGpK,SAASrP,QAAQwjC,EAAe,EAAJztC,KAErC0G,EAASkR,aAAa,WAAY,IAAI,EAAAm7G,gBAAgB,IAAIplF,aAAaF,GAAY,IACnF,MAAMxqC,EAASiC,KAAKyB,cAAcD,EAAU,EAAAiB,aAAaC,YAAYyG,QAEjEnJ,KAAK6oE,UACR7oE,KAAK6oE,SAASvtE,KAAKyC,KApCvB,gB,oFC5BA,E,KAAA,wBAEA,OACA,OACA,QAIA,SAEA,SAaA,iBAOC,YAAoBitE,EAAsCO,GAAtC,KAAAP,iBAAsC,KAAAO,SACzDvrE,KAAKoR,UAAYpR,KAAKgrE,eAAexpE,WAEtC,YACC,OAAOxB,KAAKurE,OAEb,aACC,OAAQvrE,KAAKsU,QAAUtU,KAAKsU,SAAWtU,KAAKy8H,cAErC,c,MACP,MAAMC,GAAkC,QAApB,EAAA18H,KAAKoR,UAAUhP,aAAK,eAAEG,QAAS,GAC7CsmD,EAAsB,EAAd7oD,KAAKurE,OACnB,MAAO,CACN,IAAI,EAAA32D,UAAU5U,KAAKgrE,eAAgB0xD,EAAY7zE,EAAQ,IACvD,IAAI,EAAAj0C,UAAU5U,KAAKgrE,eAAgB0xD,EAAY7zE,EAAQ,IACvD,IAAI,EAAAj0C,UAAU5U,KAAKgrE,eAAgB0xD,EAAY7zE,EAAQ,KAGzD,gBACC,OAAQ7oD,KAAK28H,WAAa38H,KAAK28H,YAAc38H,KAAK48H,iBAE3C,iBACP,MAAMpoH,EAASxU,KAAKwU,OACpB,MAAO,CAACA,EAAO,GAAGJ,WAAYI,EAAO,GAAGJ,WAAYI,EAAO,GAAGJ,YAE/D,eACC,OAAQpU,KAAK68H,UAAY78H,KAAK68H,WAAa78H,KAAK88H,gBAEzC,gBACP,MAAMv0F,EAAYvoC,KAAKuoC,UACvB,OAAO,IAAI,EAAA7b,SAAS6b,EAAU,GAAIA,EAAU,GAAIA,EAAU,IAE3D,aACC,OAAQvoC,KAAK+8H,QAAU/8H,KAAK+8H,SAAW/8H,KAAKg9H,cAErC,cACP,MAAO,CAACh9H,KAAKuoC,UAAU,GAAGxlC,QAAQqsB,IAAIpvB,KAAKuoC,UAAU,IAAKvoC,KAAKuoC,UAAU,GAAGxlC,QAAQqsB,IAAIpvB,KAAKuoC,UAAU,KAGxG,WACC,OAAOvoC,KAAK6uB,SAASouG,UAEtB,OAAOr6E,GACN,MAAMra,EAAYvoC,KAAKuoC,UAKvB,OAJAqa,EAAOt9C,GAAKijC,EAAU,GAAGjjC,EAAIijC,EAAU,GAAGjjC,EAAIijC,EAAU,GAAGjjC,GAAK,EAChEs9C,EAAOr9C,GAAKgjC,EAAU,GAAGhjC,EAAIgjC,EAAU,GAAGhjC,EAAIgjC,EAAU,GAAGhjC,GAAK,EAChEq9C,EAAOp9C,GAAK+iC,EAAU,GAAG/iC,EAAI+iC,EAAU,GAAG/iC,EAAI+iC,EAAU,GAAG/iC,GAAK,EAEzDo9C,EAGR,gBAAgB4jE,GACf,IAAI0W,EAAU,CAAC,EAAAn5G,SAASuJ,WAAWk5F,GAAO,EAAAziG,SAASuJ,WAAkB,KAAPk5F,IAO9D,OALI0W,EAAQ,GAAKA,EAAQ,GAAK,IAC7BA,EAAQ,GAAK,EAAIA,EAAQ,GACzBA,EAAQ,GAAK,EAAIA,EAAQ,IAGnBl9H,KAAKuoC,UAAU,GACpBxlC,QACAoa,IAAInd,KAAKm9H,OAAO,GAAGp6H,QAAQ8gB,eAAeq5G,EAAQ,KAClD//G,IAAInd,KAAKm9H,OAAO,GAAGp6H,QAAQ8gB,eAAeq5G,EAAQ,KAkBrD,yBAAyB7qH,EAAqB+B,GAE7C,MAAMgpH,EAA0B,IAAI,EAAAhqH,QACpCpT,KAAK6uB,SAASwuG,aAAajpH,EAAUgpH,GACrC,MAAMF,EAAUE,EAAwBr4H,UAGlC4Q,EADS3V,KAAKoR,UAAUc,WAAWG,GACdE,SACrB+qH,EAAet9H,KAAKwU,OAAOxP,IAAK2P,GAAUA,EAAMW,aAAajD,IAEnE,IAAIkrH,EACAC,EACAp7H,EAAQ,EACZ,OAAQuT,GACP,KAAK,EACJ6nH,EAAM,EACN,IAAK,IAAIC,KAAeH,EACvBE,GAAOC,EAAcP,EAAQ96H,GAC7BA,IAEDm7H,EAAmBC,EACnB,MAED,QACC,IAAK,IAAIC,KAAeH,EAAc,CACrC,MAAMI,EAAiBD,EAAY55G,eAAeq5G,EAAQ96H,IACtDo7H,EACHA,EAAIrgH,IAAIugH,GAERF,EAAME,EAEPt7H,IAEDm7H,EAAmBC,EAGrB,OAAOD,EAGR,0BACC/7H,EACAm8H,EACAC,EACAprH,GAGA,MAAMqrH,EAAgB,CAACF,EAAKztH,EAAGytH,EAAKxtH,EAAGwtH,EAAKhhI,GAEtCmhI,EADkBt8H,EAASc,aAAa,YACAC,MACxCw7H,EAAkBF,EAAc74H,IACpC0P,GACA,IAAI,EAAAtB,QACH0qH,EAAoC,EAAdppH,EAAkB,GACxCopH,EAAoC,EAAdppH,EAAkB,GACxCopH,EAAoC,EAAdppH,EAAkB,KAIrCiB,EAAcnD,EAAOD,SACrByrH,EAAexrH,EAAOjQ,MAC5B,IAAIivE,EAAsC,GAC1C,OAAQ77D,GACP,KAAK,EACJ67D,EAAgBqsD,EAAc74H,IAAK0P,GAAgBspH,EAAatpH,IAChE,MACD,KAAK,EACJ88D,EAAgBqsD,EAAc74H,IAC5B0P,GAAgB,IAAI,EAAAmiB,QAAQmnG,EAA2B,EAAdtpH,EAAkB,GAAIspH,EAA2B,EAAdtpH,EAAkB,KAEhG,MACD,KAAK,EACJ88D,EAAgBqsD,EAAc74H,IAC5B0P,GACA,IAAI,EAAAtB,QACH4qH,EAA2B,EAAdtpH,EAAkB,GAC/BspH,EAA2B,EAAdtpH,EAAkB,GAC/BspH,EAA2B,EAAdtpH,EAAkB,KAMpC,MAAMupH,EAAiBJ,EAAc74H,IAAI,CAAC0P,EAAa5Z,IAAM8iI,EAAgB3F,WAAW8F,EAAgBjjI,KAIlGojI,EAAiB,UAAW,CACjCD,EAAe,GAAKA,EAAe,GACnCA,EAAe,GAAKA,EAAe,GACnCA,EAAe,GAAKA,EAAe,KAG9Bf,EAAU,CACde,EAAe,GAAKA,EAAe,GAAMC,EACzCD,EAAe,GAAKA,EAAe,GAAMC,EACzCD,EAAe,GAAKA,EAAe,GAAMC,GAG3C,IAAIX,EACJ,OAAQ5nH,GACP,KAAK,EACJ4nH,EAAmB,UAClBM,EAAc74H,IAAI,CAACm5H,EAAYrjI,IAAMoiI,EAAQpiI,GAAM02E,EAAc12E,KAElE,MACD,QACC,IAAIgK,EAAS+4H,EAAc74H,IAAI,CAAC0P,EAAa5Z,IAC3C02E,EAAc12E,GAAe+oB,eAAeq5G,EAAQpiI,KAEtDyiI,EAAmB,KACnB,IAAK,IAAIjgI,KAASwH,EACby4H,EACHA,EAAiBpgH,IAAI7f,GAErBigI,EAAmBjgI,EAKvB,OAAOigI,K,8ECrOT,cAEA,sBAEC,aAAazpH,GACZ7Y,OAAO8iB,OAAOjK,EAAW,CACxB/Q,MAAO,WACN,OAAO,IAAI,EAAAiR,2BACVF,EAAUtZ,KAAKuI,QACf+Q,EAAUvB,SACVuB,EAAUo2C,OACVp2C,EAAU+2C,kB,8ECNf,eAGA,QAgBA,MAAa5qD,UAA0B,EAAAm3B,eAmBtC,YAAYn2B,IAQZ,sBACC,GAAIjB,KAAKs3B,SACR,OAAOt3B,KAAKs3B,SAASv0B,QAoDvB,YAAYke,GACXhb,MAAMib,YAAYD,GA6EX,eACP,GAAIjhB,KAAKs3B,SACR,OAAOt3B,KAAKs3B,SAASr2B,UAAU,GAGzB,iBACP,MAAMlD,EAASiC,KAAKwqE,eACpB,OAAIzsE,EACKA,EAAgByD,SAEjB,KAIT,gBAMC,OAAIxB,KAAKs3B,SACDt3B,KAAKs3B,SAASr2B,UAAUjG,OAExB,EAGT,wBACC,IAAIuR,EAAQ,EAIZ,OAHIvM,KAAKs3B,WACR/qB,EAAQvM,KAAKs3B,SAASr2B,UAAU8oB,OAAQptB,GAAMA,EAAE+5C,SAAS17C,QAEnDuR,EAER,wBACC,MAAM6xH,EAAoC,GACpCp9H,EAAahB,KAAKs3B,SACxB,GAAIt3B,KAAKs3B,UAAYt2B,EACpB,IAAK,IAAI+nE,KAAe/nE,EAAWgoE,eAAgB,CAClD,MAAMq1D,EAAat1D,EAAYs1D,aACE,MAA7BD,EAAcC,KACjBD,EAAcC,GAAc,GAE7BD,EAAcC,IAAe,EAG/B,OAAOD,EAER,wBACC,MAAME,EAAsC,GACtCt9H,EAAahB,KAAKs3B,SACxB,GAAIt3B,KAAKs3B,UAAYt2B,EACpB,IAAK,IAAI+nE,KAAe/nE,EAAWgoE,eAAgB,CAClD,MAAMq1D,EAAat1D,EAAYs1D,aAC/BC,EAAcD,GAAcC,EAAcD,IAAe,GACzDC,EAAcD,GAAY/iI,KAAKytE,EAAYlsE,QAG7C,OAAOyhI,EAGR,yBACC,IAAIjhG,EAAkB,GACtB,MAAM77B,EAAWxB,KAAKiqE,iBAItB,OAHIzoE,IACH67B,EAAQpiC,OAAO4W,KAAKrQ,EAAS0Q,aAEvBmrB,EAER,iCACC,IAAIkhG,EAAoC,GACxC,MAAM/8H,EAAWxB,KAAKiqE,iBAOtB,OANIzoE,GACHvG,OAAO4W,KAAKrQ,EAAS0Q,YAAYtQ,QAASyQ,IACzC,MAAMG,EAAShR,EAAS0Q,WAAWG,GACnCksH,EAAclsH,GAAeG,EAAOD,WAG/BgsH,EAER,iCACC,IAAIC,EAAoC,GACxC,MAAMh9H,EAAWxB,KAAKiqE,iBACtB,GAAIzoE,EAAU,CACb,MAAM4vE,EAAW,IAAI,EAAAjgE,aAAa3P,GAClCvG,OAAO4W,KAAKrQ,EAAS0Q,YAAYtQ,QAASyQ,IACzCmsH,EAAcnsH,GAAe++D,EAASjH,YAAY93D,KAGpD,OAAOmsH,EAER,yBACC,IAAInhG,EAAkB,GACtB,MAAMt/B,EAASiC,KAAKwqE,eAIpB,OAHIzsE,IACHs/B,EAAQpiC,OAAO4W,KAAK9T,EAAO2T,SAAqB,YAAK,KAE/C2rB,EAGR,eACC,OAAIr9B,KAAKs3B,SACDt3B,KAAKs3B,SAAS3zB,eAEd,EAwCT,eACC,OAAO3D,KAAKs3B,SAASqyC,eAGtB,SACC,OAAO3pE,KAAKs3B,SAASoyC,SAKtB,OACC,OAAO1pE,KAAKs3B,SAAS9sB,QAzTvB,uB,8ECxBA,cAQA,OACA,QAGA,MAAMi0H,UAAqC,EAAA31H,kBAC3C,MAAMC,EAAe,IAAI01H,EAEzB,MAAa/F,UAA6B,EAAA94H,aAA1C,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,iBAGR,+BACC,MAAO,CAAC,gCAAiC,mCAG1C,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,UAAW,EAAAz2F,eAAe42F,QAGrF,KAAKv6E,GACJ,MAAM09G,EAAoB19G,EAAe,GAGnCglC,EAFiBhlC,EAAe,GAEJ/f,UAAU,GACtC09H,EAAgBD,EAAkBz9H,UAAU,GAE5C29H,EAAiB54E,EAAWe,WAC9B63E,GACHD,EAAc53E,WAAa63E,EAAe55H,IAAKkL,GAAMA,EAAEnN,SACvD/C,KAAK6+H,eAAeH,IAEpB1+H,KAAKgyB,OAAO9T,MAAM3d,IAAI,uBA3BzB,0B,2FCfA,QACA,2BAEA,UAEA,QAGA,QAMA,QAEA,OAGA,MAAMu+H,UAAsC,EAAAh2H,iBAA5C,c,oBACC,KAAAsiC,KAAO,EAAA9oB,YAAYxjB,MAAM,KAAM,CAAC4lC,MAAO,CAAC,EAAG,MAC3C,KAAAq6F,QAAU,EAAAz8G,YAAY3jB,OAAO,KAAM,CAClCyZ,SAAU,CAAC3U,EAAoByV,KAC9By/G,EAAsBqG,uBAAuBv7H,EAA+ByV,OAI/E,MAAMnQ,EAAe,IAAI+1H,EAEzB,MAAanG,UAA8B,EAAA/4H,aAA3C,c,oBACC,KAAAoJ,cAAgBD,EAKhB,KAAAk2H,eAAgC,KAChC,KAAAC,OAAgC,KAChC,KAAAC,iBAAgD,GAChD,KAAAC,sBAA4C,GAP5C,cACC,MAAO,kBAUR,+BACC,MAAO,CAAC,2BAGT,kBACCp/H,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACChhB,KAAKk/H,QAGTl/H,KAAKq/H,gBACLr/H,KAAK+b,gBAAgBoF,YAHrBnhB,KAAKs/H,aAAat+G,EAAe,IAO3B,aAAahgB,GACpBhB,KAAKu/H,kBAAoBv+H,EAAWC,UAAU,GAC9CjB,KAAKk/H,OAAS,IAAI,EAAAM,eAAex/H,KAAKu/H,mBAEtCv/H,KAAK6kC,uBACL7kC,KAAKm/H,iBAAmB,GAEpBn/H,KAAKu/H,kBAAkBx4E,YAC1B/mD,KAAKu/H,kBAAkBx4E,WAAWnlD,QAAQ,CAAColD,EAAWlsD,KACrD,MAAM2vB,EAAau8B,EAAUnqD,KAE7B,IAAI+V,EADmB5S,KAAKo/H,sBAAsB30G,GAE7B,MAAjB7X,IACHA,EAAqB,GAAL9X,EAAS,EAAI,GAE9B,MAAMoe,EAAQlZ,KAAK+gB,UAAU,EAAAriB,UAAUI,MAAO2rB,EAAY7X,EAAe,CAACmrB,OAAO,IACjF,GAAI7kB,EAAO,CACV,MAAMumH,EAAaz/H,KAAKo/H,sBAAsB30G,GAC1Cg1G,GACHvmH,EAAM3Y,IAAIk/H,GAIZ,GAAIz/H,KAAKk/H,OAAQ,CAChB,MAAMQ,EAAS1/H,KAAKk/H,OAAOS,WAAW34E,GACtChnD,KAAKm/H,iBAAiBn4E,EAAUnqD,MAAQ6iI,KAI3C1/H,KAAK8nB,KAAK,EAAA7O,UAAU2rB,gBAEpB3pC,OAAO4W,KAAK7R,KAAKm/H,kBAAkBv9H,QAAS/E,IAC3CmD,KAAKm/H,iBAAiBtiI,GAAM8gF,SAI7B,MAAMiiD,EAAwC,GAC9C5/H,KAAKu/H,kBAAkBh5E,SAAUs5E,IAChC,MAAMx1D,EAAQw1D,EACVx1D,EAAMlnE,WACJ,UAAeknE,EAAMlnE,YACzBy8H,EAAgBv1D,EAAMlnE,SAASkO,MAAQg5D,EAAMlnE,aAIhDlI,OAAO4W,KAAK+tH,GAAiBh+H,QAASyP,IACrC,MAAMlO,EAAWy8H,EAAgBvuH,GACjClO,EAASs0B,UAAW,EACpBt0B,EAAS28H,cAAe,IAEzB9/H,KAAKi/H,eAAiB,KACtBj/H,KAAKq/H,gBACLr/H,KAAK+/H,wBACL//H,KAAKggI,WAAWhgI,KAAKu/H,mBAGd,uBACPv/H,KAAKo/H,sBAAwB,GAC7B,MAAMhiG,EAAgCp9B,KAAKwI,OAAOu0B,YAC5Cc,EAA4B,GAClCT,EAAoBx7B,QAAS6oB,IAC5B,MAAMvR,EAAQlZ,KAAKwI,OAAOy3H,UAAUx1G,GAChCvR,IACHlZ,KAAKo/H,sBAAsB30G,GAAcvR,EAAM5b,MAC/CugC,EAAgBviC,KAAKmvB,MAGnBoT,EAAgB7iC,OAAS,GAC5BgF,KAAKwI,OAAO01B,cAAc,CAACL,gBAAiBA,IAItC,gBACH79B,KAAKwe,GAAG4sB,MAAQprC,KAAKi/H,eACxBj/H,KAAKkgI,qBAELlgI,KAAK+/H,wBAGC,qBACP,MAAM5wG,EAAQnvB,KAAKwe,GAAG4sB,MAAQprC,KAAKi/H,gBAAkB,GACjDj/H,KAAKk/H,QACRl/H,KAAKk/H,OAAOzmG,OAAOtJ,GAEpBnvB,KAAKi/H,eAAiBj/H,KAAKwe,GAAG4sB,KAGvB,wBACP,IAAK,IAAIvuC,KAAQ5B,OAAO4W,KAAK7R,KAAKm/H,kBAAmB,CACpD,MAAMO,EAAS1/H,KAAKm/H,iBAAiBtiI,GAC/BsjI,EAAcngI,KAAKwI,OAAOy3H,UAAUpjI,GAAMS,MAC7B,MAAf6iI,GACHT,EAAOU,mBAAmBD,IAK7B,8BAA8B18H,EAA6ByV,GAC1DzV,EAAK48H,0BAEA,0B,mDACLrgI,KAAKk/H,OAAS,KACd,MAAMn9H,QAAkB/B,KAAKa,GAAG6G,OAAO+yF,oBAAoB,GAC3Dz6F,KAAKs/H,aAAav9H,EAAUgoF,uBAC5B/pF,KAAKgY,gBAvIP,2B,8EC7BA,cAIA,OAGA,QACA,MAAMsoH,UAAqC,EAAAx3H,iBAA3C,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,IAC1B,KAAAijH,QAAU,EAAAjgG,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC3C,KAAAu9E,KAAO,EAAA3/F,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KACxC,KAAA89E,SAAW,EAAAlgG,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MAE7C,MAAM37B,EAAe,IAAIu3H,EAEzB,MAAa1H,UAA6B,EAAAh5H,aAA1C,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,kBAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC5B1O,EAAetR,EAAWkvE,2BAA2BlwE,KAAKwe,GAAG3hB,MAEnE,IAAK,IAAIwV,KAAeC,EAAc,CACrC,MAAM3Q,EAAaX,EAAWW,aAC9B,IAAK,IAAIH,KAAYG,EACpB3B,KAAKugI,eAAeluH,EAAa7Q,GAInCxB,KAAK6+H,eAAe79H,GAGb,eAAeqR,EAAqB7Q,GAC3C,MAAMsS,EAAYtS,EAASc,aAAa+P,GACxC,GAAIyB,EAAW,CACd,MAAMhP,EAASgP,EAAUvR,MAEnBggH,EAAUviH,KAAKwe,GAAG+jG,QAClBN,EAAOjiH,KAAKwe,GAAGyjG,KACfO,EAAWxiH,KAAKwe,GAAGgkG,SACzB,IAAK,IAAI1nH,EAAI,EAAGA,EAAIgK,EAAO9J,OAAQF,IAAK,CACvC,MAAMwC,EAAQwH,EAAOhK,GACrBgK,EAAOhK,IAAMwC,EAAQilH,GAAWN,EAAOO,EAEnCxiH,KAAKa,GAAG6G,OAAO84H,aAAa,KAChC1sH,EAAUoc,aAAc,KAtC5B,0B,8EChBA,cAEA,OACA,QAGA,OACA,MAAMuwG,UAAkC,EAAA33H,iBAAxC,c,oBASC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,IAC1B,KAAAohI,UAAY,EAAAp+G,YAAY1jB,QAAQ,GAChC,KAAA4U,SAAW,EAAA8O,YAAYhjB,OAAO,GAAI,CAACqwB,WAAY,CAAC+wG,UAAW,MAa5D,MAAM33H,EAAe,IAAI03H,EAGzB,MAAa5H,UAA0B,EAAAj5H,aAAvC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,cAGR,+BACC,MAAO,CAAC,iCAAkC,oCAG3C,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,UAAW,EAAAz2F,eAAe42F,QAGrF,iBAEA,KAAKv6E,GACJ,MAAM2/G,EAAkB3/G,EAAe,GACjC4/G,EAAiB5/G,EAAe,GAEhC1O,EAAesuH,EAAe1wD,2BAA2BlwE,KAAKwe,GAAG3hB,MACvE,IAAK,IAAIwV,KAAeC,EACvBtS,KAAK6gI,0CAA0CF,EAAiBC,EAAgBvuH,GAYjF,OAAOrS,KAAK6+H,eAAe8B,GAGpB,0CACPA,EACAC,EACAvuH,GAEA,MAAMyuH,EAAcF,EAAe3/H,UAC7B8/H,EAAeJ,EAAgB1/H,UAErC,GAAI8/H,EAAa/lI,OAAS8lI,EAAY9lI,OACrCgF,KAAKgyB,OAAO9T,MAAM3d,IAAI,0EAEtB,IAAK,IAAIzF,EAAI,EAAGA,EAAIimI,EAAa/lI,OAAQF,IAAK,CAC7C,MAAMkmI,EAAgBD,EAAajmI,GAAG0G,SAChCmS,EAAeotH,EAAajmI,GAAG0G,SACrCxB,KAAKihI,yCAAyCD,EAAertH,EAActB,IAItE,yCACP2uH,EACArtH,EACAtB,GAEA,MAAM6uH,EAAavtH,EAAarR,aAAa+P,GAC7C,GAAI6uH,EAAY,CACf,MAAM12H,EAAO02H,EAAW3uH,SAClB4uH,EAAmBxtH,EAAarR,aAAa,YAAYC,MAAMvH,OAAS,EACxEomI,EAAoBJ,EAAc1+H,aAAa,YAAYC,MAAMvH,OAAS,EAC5EomI,EAAoBD,GACvBnhI,KAAKgyB,OAAO9T,MAAM3d,IAAI,qCAEvB,MACM8gI,EADYH,EAAW3+H,MACDlE,MAAM,EAAG+iI,EAAoB52H,GACnD82H,EAAYthI,KAAKwe,GAAGkiH,UAAY1gI,KAAKwe,GAAGhL,SAAWnB,EACzD2uH,EAActuH,aAAa4uH,EAAW,IAAI,EAAAnuH,uBAAuBkuH,EAAW72H,SAE5ExK,KAAKgyB,OAAO9T,MAAM3d,IAAI,cAAc8R,sCA1EvC,uB,2FClCA,4BAEA,QACA,QAOA,SAQA,QAiBA,OACA,MAAMkvH,UAAoC,EAAAz4H,iBAA1C,c,oBACC,KAAA48C,MAAQ,EAAApjC,YAAYhjB,OAAO,IAC3B,KAAAkiI,MAAQ,EAAAl/G,YAAYtjB,QAAQ,EAAA2L,YAAYG,OAAQ,CAC/Cg4B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAAtM,KAAO,EAAA+jB,YAAYtjB,QAAQ,EAAA4L,WAAWK,QAAS,CAC9C63B,KAAM,CACLC,QAAS,EAAA/3B,yBAGX,KAAAnO,KAAO,EAAAylB,YAAYhjB,OAAO,cAC1B,KAAAkL,KAAO,EAAA8X,YAAYtjB,QAAQ,EAAG,CAC7B0lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrBhV,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAYF,WAE7C,KAAAw2H,OAAS,EAAAn/G,YAAYxjB,MAAM,EAAG,CAC7B6wB,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAYF,QAAST,KAAM,GAC3DmoC,WAAY,CAAC+uF,cAAc,KAE5B,KAAAC,OAAS,EAAAr/G,YAAY/iB,QAAQ,CAAC,EAAG,GAAI,CACpCowB,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAYF,QAAST,KAAM,GAC3DmoC,WAAY,CAAC+uF,cAAc,KAE5B,KAAAE,OAAS,EAAAt/G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI,CACvCmwB,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAYF,QAAST,KAAM,GAC3DmoC,WAAY,CAAC+uF,cAAc,KAE5B,KAAAG,OAAS,EAAAv/G,YAAY7iB,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,CAC1CkwB,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAYF,QAAST,KAAM,GAC3DmoC,WAAY,CAAC+uF,cAAc,KAE5B,KAAAjvE,OAAS,EAAAnwC,YAAYhjB,OAAO,GAAI,CAC/BqwB,WAAY,CAACpxB,KAAM,EAAAkE,aAAa0I,YAAY7L,QAC5CqzC,WAAY,CAAC+uF,cAAc,MAG7B,MAAM34H,EAAe,IAAIw4H,EACzB,MAAazI,UAA4B,EAAAl5H,aAAzC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAA+4H,2BAA+C,GAC/C,KAAAC,2BAA+C,GAC/C,KAAAC,2BAA+C,GAC/C,KAAAC,2BAA+C,GAPvD,cACC,MAAO,gBAQR,kBACCjiI,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAElC,GAAIhhB,KAAKwe,GAAG3hB,MAAqC,IAA7B,UAAYmD,KAAKwe,GAAG3hB,MACvC,OAAQmD,KAAKwe,GAAGgjH,OACf,KAAK,EAAA72H,YAAYG,OAChB9K,KAAKkiI,oBAAoBlhI,GACzB,MACD,KAAK,EAAA2J,YAAYI,OAChB/K,KAAKmiI,qBAAqBnhI,QAI5BhB,KAAKgyB,OAAO9T,MAAM3d,IAAI,+BAIlB,oBAAoBS,G,mDACzB,MAAMgoE,EAAehoE,EAAWgoE,eAChC,IAAK,IAAIluE,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,IAAK,CAC7C,MAAMiuE,EAAcC,EAAaluE,GACjC,OAAQkF,KAAKwe,GAAGjgB,MACf,KAAK,EAAAkE,aAAa0I,YAAYF,cACvBjL,KAAKoiI,gCAAgCr5D,GAC3C,MACD,KAAK,EAAAtmE,aAAa0I,YAAY7L,aACvBU,KAAKqiI,+BAA+Bt5D,IAI7C/oE,KAAK6+H,eAAe79H,MAEf,qBAAqBA,G,mDAC1B,MAAMgoE,EAAehoE,EAAWuoE,wBAAwBvpE,KAAKwe,GAAGknC,OAChE,OAAQ1lD,KAAKwe,GAAGjgB,MACf,KAAK,EAAAkE,aAAa0I,YAAYF,cACvBjL,KAAKsiI,gCAAgCt5D,GAC3C,MACD,KAAK,EAAAvmE,aAAa0I,YAAY7L,aACvBU,KAAKuiI,+BAA+Bv5D,GAG5ChpE,KAAK6+H,eAAe79H,MAGf,gCAAgC+nE,G,mDACrC,MAAMnyD,EAAgBmyD,EAAYnyD,gBAC5BpC,EAASu0D,EAAYy5D,kBAAkBxiI,KAAKwe,GAAGknC,OAE/CxsC,EAAQ,CAAClZ,KAAK/B,EAAEwjI,OAAQzhI,KAAK/B,EAAE0jI,OAAQ3hI,KAAK/B,EAAE2jI,OAAQ5hI,KAAK/B,EAAE4jI,QAAQ7hI,KAAKwe,GAAGhU,KAAO,GAE1F,GAAI0O,EAAMkzE,iBAAkB,CACtBx1E,EAAcszD,WAAWlqE,KAAKwe,GAAG3hB,OACrC+Z,EAActD,mBAAmBtT,KAAKwe,GAAG3hB,KAAMmD,KAAKwe,GAAGhU,KAAM0O,EAAM5b,OAGpE,MAAMkE,EAAWoV,EAAcpV,WACzBe,EAAQf,EAASc,aAAatC,KAAKwe,GAAG3hB,MAAM0F,MAClD,GAAoB,GAAhBvC,KAAKwe,GAAGhU,KACPxK,KAAK/B,EAAEwjI,OAAOn4G,8BACXtpB,KAAK/B,EAAEwjI,OAAOn4G,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KACvFiF,EAAMoS,EAAMvS,MAAQpC,KAAKwe,GAAGhU,KAAO,GAAKlN,SAGpC,CAEN,IAAIkL,EADW,CAACxI,KAAK/B,EAAE0jI,OAAQ3hI,KAAK/B,EAAE2jI,OAAQ5hI,KAAK/B,EAAE4jI,QAAQ7hI,KAAKwe,GAAGhU,KAAO,GACxDse,WACpB,MAAM45G,EAAa,IAAIrzF,MAAM7mC,EAAOxN,QACpC,IAAI2nI,EAEJ,MAAMC,EAA0B,CAC/B5iI,KAAK8hI,2BACL9hI,KAAK+hI,2BACL/hI,KAAKgiI,2BACLhiI,KAAKiiI,4BAGN,IAAK,IAAInnI,EAAI,EAAGA,EAAI0N,EAAOxN,OAAQF,IAElC,GADA6nI,EAAkBn6H,EAAO1N,GACrB6nI,EAAgBv2C,kBAAoBu2C,EAAgBr5G,sBACvDo5G,EAAW5nI,GAAKkF,KAAK6iI,wBACpBrhI,EACAohI,EAAwB9nI,GACxB0Z,EAAOxZ,cAEF2nI,EAAgBr5G,sBAAsBm5G,8BAC3CjuH,EACA,CAACG,EAAOrX,KAEPolI,EAAW5nI,GAAG6Z,EAAMvS,OAAS9E,QAGzB,CACN,MAAMA,EAAQqlI,EAAgBrlI,MAC9B,IAAK,IAAIqX,KAASH,EACjBjS,EAAMoS,EAAMvS,MAAQpC,KAAKwe,GAAGhU,KAAO1P,GAAKwC,EAK3C,IAAK,IAAItB,EAAI,EAAGA,EAAI0mI,EAAW1nI,OAAQgB,IAAK,CAC3C,MAAM8mI,EAAYJ,EAAW1mI,GAC7B,GAAI8mI,EACH,IAAK,IAAIhoI,EAAI,EAAGA,EAAIgoI,EAAU9nI,OAAQF,IACrCyH,EAAMzH,EAAIkF,KAAKwe,GAAGhU,KAAOxO,GAAK8mI,EAAUhoI,UAO5CiuE,EAAYg6D,0BAA0B/iI,KAAKwe,GAAG3hB,KAAMmD,KAAKwe,GAAGhU,KAAM0O,EAAM5b,UAIpE,gCAAgC0rE,G,mDACrC,MAAM9vD,EAAQ,CAAClZ,KAAK/B,EAAEwjI,OAAQzhI,KAAK/B,EAAE0jI,OAAQ3hI,KAAK/B,EAAE2jI,OAAQ5hI,KAAK/B,EAAE4jI,QAAQ7hI,KAAKwe,GAAGhU,KAAO,GAC1F,GAAI0O,EAAMkzE,iBACT,GAAoB,GAAhBpsF,KAAKwe,GAAGhU,KACPxK,KAAK/B,EAAEwjI,OAAOn4G,8BACXtpB,KAAK/B,EAAEwjI,OAAOn4G,sBAAsB05G,+BACzCh6D,EACA,CAACD,EAAazrE,KACbyrE,EAAYk6D,iBAAiBjjI,KAAKwe,GAAG3hB,KAAMS,UAIxC,CAEN,IAAIkL,EADW,CAACxI,KAAK/B,EAAE0jI,OAAQ3hI,KAAK/B,EAAE2jI,OAAQ5hI,KAAK/B,EAAE4jI,QAAQ7hI,KAAKwe,GAAGhU,KAAO,GACxDse,WAChBo6G,EAAqE,GAIzE,IAAK,IAAIn6D,KAAeC,EACvBk6D,EAA4Bn6D,EAAY3mE,OAAmB,GAE5D,IAAK,IAAI8oE,EAAkB,EAAGA,EAAkB1iE,EAAOxN,OAAQkwE,IAAmB,CACjF,MAAMy3D,EAAkBn6H,EAAO0iE,GAC/B,GAAIy3D,EAAgBv2C,kBAAoBu2C,EAAgBr5G,4BACjDq5G,EAAgBr5G,sBAAsB05G,+BAC3Ch6D,EACA,CAACD,EAAazrE,KACb4lI,EAA4Bn6D,EAAY3mE,OAAO8oE,GAAmB5tE,SAIpE,IAAK,IAAIyrE,KAAeC,EACvBk6D,EAA4Bn6D,EAAY3mE,OAAO8oE,GAAmBy3D,EAAgBrlI,MAIrF,IAAK,IAAIxC,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,IAAK,CAC7C,MAAMiuE,EAAcC,EAAaluE,GAC3BwC,EAAQ4lI,EAA4Bn6D,EAAY3mE,OACtD2mE,EAAYk6D,iBAAiBjjI,KAAKwe,GAAG3hB,KAAMS,SAQ7C,IAAK,IAAIyrE,KAAeC,EACvBD,EAAYk6D,iBAAiBjjI,KAAKwe,GAAG3hB,KAAMqc,EAAM5b,UA4B9C,+BAA+ByrE,G,mDACpC,MAAMv0D,EAASu0D,EAAYy5D,kBAAkBxiI,KAAKwe,GAAGknC,OAC/CxsC,EAAQlZ,KAAK/B,EAAEw0D,OAEf0wE,EAA0B,GAC5BjqH,EAAMkzE,kBAAoBlzE,EAAMoQ,4BAC7BpQ,EAAMoQ,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAC/E6lI,EAAcxuH,EAAMvS,OAAS9E,IAG9B6lI,EAAc7nI,KAAK4d,EAAM5b,OAG1B,MAAMq0E,EAAa,EAAA5/D,cAAc6/D,wBAAwBuxD,GACzDp6D,EAAYnyD,gBAAgBi7D,sBAAsB7xE,KAAKwe,GAAG3hB,KAAM80E,EAAmB,OAAGA,EAAoB,YAGrG,+BAA+B3I,G,mDACpC,MAAM9vD,EAAQlZ,KAAK/B,EAAEw0D,OACrB,GAAIv5C,EAAMkzE,kBAAoBlzE,EAAMoQ,4BAC7BpQ,EAAMoQ,sBAAsB05G,+BAA+Bh6D,EAAc,CAACD,EAAazrE,KAC5FyrE,EAAYk6D,iBAAiBjjI,KAAKwe,GAAG3hB,KAAMS,UAG5C,IAAK,IAAIyrE,KAAeC,EACvBD,EAAYk6D,iBAAiBjjI,KAAKwe,GAAG3hB,KAAMqc,EAAM5b,UAkF5C,wBACPkE,EACAohI,EACAj/H,GAEA,MAAM0N,EAAO7P,EAAS6P,KAChB+xH,EAAgBR,EAAwBvxH,GAS9C,OARI+xH,EAECA,EAAcpoI,OAAS2I,IAC1Bi/H,EAAwBvxH,GAAQ,IAAIg+B,MAAM1rC,IAG3Ci/H,EAAwBvxH,GAAQ,IAAIg+B,MAAM1rC,GAEpCi/H,EAAwBvxH,IA1UjC,yB,8EC5EA,cAEA,SACA,QACA,QAEA,QAKA,OACA,MAAMgyH,UAAoC,EAAAv6H,iBAA1C,c,oBACC,KAAA04H,MAAQ,EAAAl/G,YAAYtjB,QAAQ,EAAA2L,YAAYG,OAAQ,CAC/Cg4B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAAhO,KAAO,EAAAylB,YAAYhjB,OAAO,KAE3B,MAAMyJ,EAAe,IAAIs6H,EAEzB,MAAatK,UAA4B,EAAAn5H,aAAzC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,gBAGR,+BACC,MAAO,CAAC,sCAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC5B1O,EAAetR,EAAWkvE,2BAA2BlwE,KAAKwe,GAAG3hB,MAEnE,IAAK,IAAIwV,KAAeC,EACvB,OAAQtS,KAAKwe,GAAGgjH,OACf,KAAK,EAAA72H,YAAYG,OAChB9K,KAAKsjI,wBAAwBtiI,EAAYqR,GAC1C,KAAK,EAAA1H,YAAYI,OAChB/K,KAAKujI,wBAAwBviI,EAAYqR,GAI5CrS,KAAK6+H,eAAe79H,GAGrB,wBAAwBA,EAAuBqR,GAC9C,IAAK,IAAItU,KAAUiD,EAAWC,UAC7BlD,EAAOwoD,SAAUs5E,IAChB,MAAMx1D,EAAQw1D,EACd,GAAIx1D,EAAM7oE,SAAU,CACG,IAAI,EAAA2P,aAAak5D,EAAM7oE,UAC/BukD,iBAAiB1zC,MAKnC,wBAAwBrR,EAAuBqR,GAC9C,IAAK,IAAItU,KAAUiD,EAAWC,UAAW,CACxC,IAAImB,EAAQ,EACZrE,EAAOwoD,SAAUs5E,IAChB,MAAMx1D,EAAQw1D,EACM,IAAI,EAAAt6E,WAAW8kB,EAAOjoE,GAC9B2jD,iBAAiB1zC,GAC7BjQ,QAjDJ,yB,2FCtBA,QACA,OACA,4BACA,4BACA,2BAEA,QAEA,OACA,MAAMohI,UAAuC,EAAA16H,iBAA7C,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,OAAO,IAC1B,KAAAmkI,YAAc,EAAAnhH,YAAY1jB,SAAQ,GAClC,KAAA4U,SAAW,EAAA8O,YAAYhjB,OAAO,GAAI,CAACqwB,WAAY,CAAC8zG,YAAa,MAE9D,MAAM16H,EAAe,IAAIy6H,EAEzB,MAAaxK,UAA+B,EAAAp5H,aAA5C,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,mBAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAClChhB,KAAK0jI,qBAAqB1iI,GAC1BhB,KAAK6+H,eAAe79H,GAGrB,qBAAqBA,GACpB,MAAMwT,EAASxT,EAAWwT,SAC1B,GAAsB,IAAlBA,EAAOxZ,OACV,OAED,GAAqB,KAAjBgF,KAAKwe,GAAG3hB,KACX,OAGD,MAAM8Y,EAAcnB,EAAO,GAAGmB,YAAY3V,KAAKwe,GAAG3hB,MAC5CiI,EAAS0P,EAAOxP,IAAK2P,GAAUA,EAAMW,aAAatV,KAAKwe,GAAG3hB,OAChE,IACI+uB,EAAyBnf,EADzBk3H,EAA0C,GAE9C,OAAQhuH,GACP,KAAK,EAWJ,GAHAiW,EAAM,UAAW9mB,GACjB2H,EAAM,UAAW3H,GAEb,UAAgB8mB,IAAQ,UAAgBnf,GAC3C,IAAK,IAAInP,KAASwH,EAAQ,CACzB,MAAM8+H,EAAmBn3H,EAAMmf,GAAOtuB,EAAQsuB,IAAQnf,EAAMmf,GAAO,EACnE+3G,EAAkBroI,KAAKsoI,GAGzB,MAED,KAAK,EAYJ,GAXAh4G,EAAM,IAAI,EAAAxY,QACT,UAAWtO,EAAOE,IAAKC,GAAMA,EAAEK,IAC/B,UAAWR,EAAOE,IAAKC,GAAMA,EAAEM,IAC/B,UAAWT,EAAOE,IAAKC,GAAMA,EAAEO,KAEhCiH,EAAM,IAAI,EAAA2G,QACT,UAAWtO,EAAOE,IAAKC,GAAMA,EAAEK,IAC/B,UAAWR,EAAOE,IAAKC,GAAMA,EAAEM,IAC/B,UAAWT,EAAOE,IAAKC,GAAMA,EAAEO,KAG5BomB,aAAe,EAAAxY,SAAW3G,aAAe,EAAA2G,QAC5C,IAAK,IAAI9V,KAASwH,EAAQ,CACzB,MAAM8+H,EAAmB,IAAI,EAAAxwH,SAC3B9V,EAAMgI,EAAIsmB,EAAItmB,IAAMmH,EAAInH,EAAIsmB,EAAItmB,IAChChI,EAAMiI,EAAIqmB,EAAIrmB,IAAMkH,EAAIlH,EAAIqmB,EAAIrmB,IAChCjI,EAAMkI,EAAIomB,EAAIpmB,IAAMiH,EAAIjH,EAAIomB,EAAIpmB,IAElCm+H,EAAkBroI,KAAKsoI,IAM3B,IAAIC,EAAc7jI,KAAKwe,GAAG3hB,KACtBmD,KAAKwe,GAAGilH,cACXI,EAAc7jI,KAAKwe,GAAGhL,SACjBxS,EAAWkpE,WAAW25D,IAC1B7iI,EAAW+hI,0BAA0Bc,EAAaluH,EAAa,IAIjEguH,EAAkB/hI,QAAQ,CAACgiI,EAAkB9oI,KAC9B0Z,EAAO1Z,GACfmoI,iBAAiBY,EAAaD,MArFvC,4B,6FChBA,4BACA,4BAEA,QACA,QACA,QAGA,QAEA,IAAYE,GAAZ,SAAYA,GACX,iBACA,iBACA,iCAHD,CAAYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KAW7B,MAAMC,EAAyB,CAC9B,CAAClnI,KAAM,MAAOS,MAAOwmI,EAAkBE,KACvC,CAACnnI,KAAM,MAAOS,MAAOwmI,EAAkBG,KACvC,CAACpnI,KAAM,cAAeS,MAAOwmI,EAAkBI,cAGhD,OACA,MAAMC,UAAqC,EAAAr7H,iBAA3C,c,oBACC,KAAAs7H,WAAa,EAAA9hH,YAAYtjB,QAAQ,EAAA2L,YAAYG,OAAQ,CACpDg4B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAAw5H,SAAW,EAAA/hH,YAAYtjB,QAAQ,EAAA2L,YAAYI,OAAQ,CAClD+3B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAArN,KAAO,EAAA8kB,YAAYtjB,QAAQ8kI,EAAkBE,IAAK,CACjDlhG,KAAM,CACLC,QAASghG,KAGX,KAAAlnI,KAAO,EAAAylB,YAAYhjB,OAAO,KAE3B,MAAMyJ,EAAe,IAAIo7H,EAEzB,MAAalL,UAA6B,EAAAr5H,aAA1C,c,oBACC,KAAAoJ,cAAgBD,EAeR,KAAAu7H,wBAAgD,GAChD,KAAAC,iCAAmE,GAf3E,cACC,MAAO,iBAGR,kBACCvkI,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAI3D,iBAMA,KAAKp6E,GACJhhB,KAAKwkI,YAAcxjH,EAAe,GAElChhB,KAAKskI,wBAA0B,GAC/BtkI,KAAKukI,iCAAmC,GAExC,IAAK,IAAIx7D,KAAe/oE,KAAKwkI,YAAYx7D,eACxChpE,KAAKykI,aAAe17D,EACpB/oE,KAAK0kI,cACL1kI,KAAK2kI,gBACL3kI,KAAK4kI,aAMN5kI,KAAK6+H,eAAe7+H,KAAKwkI,aA8ClB,cACP,MAAMlyH,EAAe,EAAA1N,WAAW0N,aAAatS,KAAKwe,GAAG3hB,MACrD,IAAK,IAAIwV,KAAeC,EACvB,OAAQtS,KAAKwe,GAAG4lH,YACf,KAAK,EAAAz5H,YAAYG,OAChB,OAAO9K,KAAK6kI,wBAAwBxyH,GACrC,KAAK,EAAA1H,YAAYI,OAChB,OAAO/K,KAAK8kI,wBAAwBzyH,IAKhC,wBAAwBA,GAC/B,GAAIrS,KAAKykI,aAAc,CACtB,MAAMjwH,EAASxU,KAAKykI,aAAajwH,SACjCxU,KAAKskI,wBAAwBjyH,GAAemC,EAAOxP,IAAK2P,GAAUA,EAAMW,aAAajD,KAI/E,wBAAwBA,GAC/BrS,KAAKskI,wBAAwBjyH,GAAe,GACxCrS,KAAKykI,cACRzkI,KAAKskI,wBAAwBjyH,GAAa/W,KAAK0E,KAAKykI,aAAanvH,aAAajD,IAIxE,gBACP,MAAMC,EAAerX,OAAO4W,KAAK7R,KAAKskI,yBACtC,IAAK,IAAIjyH,KAAeC,EAAc,CACrC,MAAMxN,EAAS9E,KAAKskI,wBAAwBjyH,GAC5C,OAAQrS,KAAKwe,GAAGhhB,MACf,KAAKsmI,EAAkBE,IACtBhkI,KAAKukI,iCAAiClyH,GAAe,UAAWvN,GAChE,MACD,KAAKg/H,EAAkBG,IACtBjkI,KAAKukI,iCAAiClyH,GAAe,UAAWvN,GAChE,MAED,KAAKg/H,EAAkBI,YACtBlkI,KAAKukI,iCAAiClyH,GAAevN,EAAO,KAQxD,aACP,MAAMwN,EAAerX,OAAO4W,KAAK7R,KAAKukI,kCACtC,IAAK,IAAIlyH,KAAeC,EAAc,CACrC,MAAMkD,EAAYxV,KAAKukI,iCAAiClyH,GACxD,GAAiB,MAAbmD,EACH,OAAQxV,KAAKwe,GAAG6lH,UACf,KAAK,EAAA15H,YAAYG,OAChB9K,KAAK+kI,qBAAqB1yH,EAAamD,GACvC,MACD,KAAK,EAAA7K,YAAYI,OAChB/K,KAAKglI,qBAAqB3yH,EAAamD,KAOpC,qBAAqBnD,EAAqBmD,GACjD,GAAIxV,KAAKwkI,aAAexkI,KAAKykI,aAAc,CAE1C,IADyBzkI,KAAKwkI,YAAYt6D,WAAW73D,GAC9B,CACtB,MAAM4yH,EAAa,EACnBjlI,KAAKwkI,YAAYzB,0BAA0B1wH,EAAa4yH,EAAYzvH,GAGtDxV,KAAKykI,aAAajwH,SAC1B5S,QAAS+S,GAAUA,EAAMsuH,iBAAiB5wH,EAAamD,KAIxD,qBAAqBnD,EAAqBmD,G,MAChC,QAAjB,EAAAxV,KAAKykI,oBAAY,SAAExB,iBAAiB5wH,EAAamD,IA9JnD,0B,2FChDA,4BACA,4BACA,4BACA,2BACA,2BACA,OACA,QAGA,OACA,MAAM0vH,UAAmC,EAAAp8H,iBAAzC,c,oBACC,KAAAjM,KAAO,EAAAylB,YAAYhjB,SACnB,KAAAw4F,KAAO,EAAAx1E,YAAYljB,OACnB,KAAAqkI,YAAc,EAAAnhH,YAAY1jB,QAAQ,GAClC,KAAA4U,SAAW,EAAA8O,YAAYhjB,OAAO,GAAI,CAACqwB,WAAY,CAAC8zG,YAAa,MAE9D,MAAM16H,EAAe,IAAIm8H,EAEzB,MAAahM,UAA2B,EAAAt5H,aAAxC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,eAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GAG1B,KAAK5B,GACJ,MAAMhgB,EAAaggB,EAAe,GAClChhB,KAAKmlI,iBAAiBnkI,GACtBhB,KAAK6+H,eAAe79H,GAGrB,iBAAiBA,GAChB,MAAMwT,EAASxT,EAAWwT,SAC1B,GAAsB,IAAlBA,EAAOxZ,OACV,OAED,GAAqB,KAAjBgF,KAAKwe,GAAG3hB,KACX,OAGD,MAAM8Y,EAAcnB,EAAO,GAAGmB,YAAY3V,KAAKwe,GAAG3hB,MAC5CiI,EAAS0P,EAAOxP,IAAK2P,GAAUA,EAAMW,aAAatV,KAAKwe,GAAG3hB,OAChE,IAAI+uB,EAAyBnf,EACzBk3H,EAA0C,IAAIt0F,MAAM76B,EAAOxZ,QAC/D,OAAQ2a,GACP,KAAK,EACJ,GAAI3V,KAAKwe,GAAG4mH,oBAAqB,CAChC,MAAMC,EAAgB,UAAY,UAAcvgI,IAC1CoyB,EAAqC,GAC3CmuG,EAAczjI,QAAQ,CAAC0jI,EAAcxqI,IAAOo8B,EAAeouG,GAAgBxqI,GAC3E6oI,EAAoB7+H,EAAOE,IAAK1H,GAAU45B,EAAe55B,SAKzD,GAHAsuB,EAAM,UAAW9mB,GACjB2H,EAAM,UAAW3H,GAEb,UAAgB8mB,IAAQ,UAAgBnf,GAC3C,IAAK,IAAI3R,EAAI,EAAGA,EAAIgK,EAAO9J,OAAQF,IAAK,CACvC,MAAMwC,EAAQwH,EAAOhK,GACf8oI,EAAmBn3H,EAAMmf,GAAOtuB,EAAQsuB,IAAQnf,EAAMmf,GAAO,EACnE+3G,EAAkB7oI,GAAK8oI,EAI1B,MAED,KAAK,EAYJ,GAXAh4G,EAAM,IAAI,EAAAxY,QACT,UAAWtO,EAAOE,IAAKC,GAAMA,EAAEK,IAC/B,UAAWR,EAAOE,IAAKC,GAAMA,EAAEM,IAC/B,UAAWT,EAAOE,IAAKC,GAAMA,EAAEO,KAEhCiH,EAAM,IAAI,EAAA2G,QACT,UAAWtO,EAAOE,IAAKC,GAAMA,EAAEK,IAC/B,UAAWR,EAAOE,IAAKC,GAAMA,EAAEM,IAC/B,UAAWT,EAAOE,IAAKC,GAAMA,EAAEO,KAG5BomB,aAAe,EAAAxY,SAAW3G,aAAe,EAAA2G,QAC5C,IAAK,IAAItY,EAAI,EAAGA,EAAIgK,EAAO9J,OAAQF,IAAK,CACvC,MAAMwC,EAAQwH,EAAOhK,GACf8oI,EAAmB,IAAI,EAAAxwH,SAC3B9V,EAAMgI,EAAIsmB,EAAItmB,IAAMmH,EAAInH,EAAIsmB,EAAItmB,IAChChI,EAAMiI,EAAIqmB,EAAIrmB,IAAMkH,EAAIlH,EAAIqmB,EAAIrmB,IAChCjI,EAAMkI,EAAIomB,EAAIpmB,IAAMiH,EAAIjH,EAAIomB,EAAIpmB,IAElCm+H,EAAkB7oI,GAAK8oI,GAM3B,IAAIC,EAAc7jI,KAAKwe,GAAG3hB,KACtBmD,KAAKwe,GAAGilH,cACXI,EAAc7jI,KAAKwe,GAAGhL,SACjBxS,EAAWkpE,WAAW25D,IAC1B7iI,EAAW+hI,0BAA0Bc,EAAaluH,EAAa,IAIjEguH,EAAkB/hI,QAAQ,CAACgiI,EAAkB9oI,KAC9B0Z,EAAO1Z,GACfmoI,iBAAiBY,EAAaD,MAtFvC,wB,8EClBA,cAGA,OACA,QACA,QACA,MAAM2B,UAAoC,EAAAz8H,iBAA1C,c,oBACC,KAAA04H,MAAQ,EAAAl/G,YAAYtjB,QAAQ,EAAA2L,YAAYG,OAAQ,CAC/Cg4B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAA0I,SAAW,EAAA+O,YAAYhjB,SACvB,KAAAkU,SAAW,EAAA8O,YAAYhjB,UAExB,MAAMyJ,EAAe,IAAIw8H,EAEzB,MAAapM,UAA4B,EAAAv5H,aAAzC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,gBAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GAEJ,MAAMhgB,EAAaggB,EAAe,GAElChgB,EAAWwkI,cAAcxlI,KAAKwe,GAAGjL,SAAUvT,KAAKwe,GAAGhL,SAAUxT,KAAKwe,GAAGgjH,OAErExhI,KAAK6+H,eAAe79H,IAjBtB,yB,2FCjBA,QAIA,SACA,SACA,SAcA,OACA,QACA,MAAMykI,UAAsC,EAAA38H,iBAA5C,c,oBACC,KAAA6hE,UAAY,EAAAroD,YAAYhjB,SACxB,KAAAomI,WAAa,EAAApjH,YAAYhjB,SACzB,KAAAzC,KAAO,EAAAylB,YAAYhjB,SACnB,KAAAqmI,kBAAoB,EAAArjH,YAAYtjB,QAAQ,EAAG,CAC1C0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAOtB,KAAAihG,mBAAqB,EAAAtjH,YAAYxjB,MAAM,GACvC,KAAA+mI,YAAc,EAAAvjH,YAAYxjB,MAAM,IAEjC,MAAMiK,EAAe,IAAI08H,EAEzB,MAAarM,UAA8B,EAAAx5H,aAA3C,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,kBAYR,+BACC,MAAO,CAAC,qCAAsC,wCAG/C,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,UAAW,EAAAz2F,eAAe42F,QAG/E,KAAKv6E,G,mDAIVhhB,KAAK8lI,iBAAmB9kH,EAAe,GACvC,MAAM+kH,EAAc/lI,KAAK8lI,iBAAiBtD,kBAAkBxiI,KAAKwe,GAAGknH,YAGpE1lI,KAAKgmI,gBAAkBhlH,EAAe,GAEtChhB,KAAKimI,cAAgBjmI,KAAKgmI,gBAAgB91D,2BAA2BlwE,KAAKwe,GAAG3hB,MAC7EmD,KAAKkmI,gDACLlmI,KAAKmmI,0BAA0BnmI,KAAKgmI,iBACpChmI,KAAKomI,mCAECpmI,KAAKqmI,qBAAqBN,GAChC/lI,KAAK6+H,eAAe7+H,KAAK8lI,qBAG1B,gDACC,IAAK,IAAIzzH,KAAerS,KAAKimI,cACvBjmI,KAAKgmI,gBAAgB97D,WAAW73D,IACpCrS,KAAKgyB,OAAO9T,MAAM3d,IAAI,cAAc8R,gCAK/B,0BAA0BrR,GACjC,MAAMslI,EACqB,MAA1BtmI,KAAKumI,mBAA6BvmI,KAAKumI,oBAAsBvlI,EAAWo3G,YAGzE,GAF0Bp4G,KAAKwmI,wBAA0BxmI,KAAKwe,GAAGmsD,WAExC27D,EAAsB,CAC9CtmI,KAAKumI,kBAAoBvlI,EAAWo3G,YACpCp4G,KAAKwmI,sBAAwBxmI,KAAKwe,GAAGmsD,UAErC,MAAM87D,EAAazmI,KAAKgmI,gBAAgBxD,kBAAkBxiI,KAAKwe,GAAGmsD,WAElE3qE,KAAK0mI,QAAU,IAAI,EAAAC,WAAW3mI,KAAKgmI,gBAAgBr8D,gBACnD3pE,KAAK0mI,QAAQE,WAAWH,IAIlB,6BACPzmI,KAAKimI,cAAcrkI,QAASyQ,IAC3B,IAAKrS,KAAK8lI,iBAAiB57D,WAAW73D,GAAc,CACnD,MAAMsD,EAAc3V,KAAKgmI,gBAAgBrwH,YAAYtD,GACrDrS,KAAK8lI,iBAAiB/C,0BAA0B1wH,EAAasD,EAAa,MAK/D,qBAAqBowH,G,mDAElC,MAAMc,EAAW,IAAI,EAAAC,mBACfD,EAASE,iBAAiBhB,EAAa/lI,KAAKgnI,+BAA+BnpI,KAAKmC,UAO/E,+BAA+BinI,G,MACtC,MAAMC,EAAalnI,KAAKwe,GAAGonH,mBAAqB5lI,KAAKwe,GAAGqnH,YAClDsB,GACO,QAAZ,EAAAnnI,KAAK0mI,eAAO,eAAEU,YAAYH,EAAW7yH,WAAY8yH,EAAYlnI,KAAKwe,GAAGmnH,qBAAsB,GAK5F,IAAK,IAAItzH,KAAerS,KAAKimI,cAC5BjmI,KAAKqnI,oBAAoBJ,EAAYE,EAAgB90H,GAW/C,oBAAoBi1H,EAAuBC,EAAyBl1H,GAC3E,IAAImD,EAGJA,EAAY,EAAAgyH,gBAAgBC,QAC3BH,EACAC,EACAl1H,EACArS,KAAKwe,GAAGonH,mBACR5lI,KAAKwe,GAAGqnH,aAOQ,MAAbrwH,GACH8xH,EAAWrE,iBAAiB5wH,EAAamD,IA3H5C,2B,2FCxCA,4BAEA,4BAQA,wBACC,eACC8xH,EACAb,EACAp0H,EACAuzH,EACA8B,GAEA,OAAQjB,EAAWzrI,QAClB,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAOgF,KAAK2nI,0BACXL,EACAb,EAAW,GACXp0H,EACAuzH,EACA8B,GAEF,QAOC,OAAO1nI,KAAK4nI,kCACXN,EACAb,EACAp0H,EACAuzH,EACA8B,IAKJ,iCACCJ,EACAO,EACAx1H,EACAuzH,EACA8B,GAEA,MAAMI,EAAgBR,EAAWlzH,WAC3B2zH,EAAeF,EAAUzzH,WACzByW,EAAWi9G,EAAc7P,WAAW8P,GAEpCC,EAAYH,EAAUvyH,aAAajD,GACzC,OAAOrS,KAAKioI,8BACXX,EACAU,EACA31H,EACAwY,EACA+6G,EACA8B,GAIF,6BAA6B78G,EAAkB+6G,EAA4B8B,GAC1E,OAAQ78G,EAAW+6G,GAAsB8B,EAG1C,qCACCJ,EACAU,EACA31H,EACAwY,EACA+6G,EACA8B,GAEA,GAAI78G,GAAY+6G,EACf,OAAOoC,EACD,CACN,MAAME,EAAaZ,EAAWhyH,aAAajD,GACrC81H,EAAQnoI,KAAKooI,sBAAsBv9G,EAAU+6G,EAAoB8B,GACvE,OAAOS,EAAQD,GAAc,EAAIC,GAASH,GAqC5C,yCACCV,EACAb,EACAp0H,EACAuzH,EACA8B,GAoCA,MAAMW,EAAsB5B,EAAWzhI,IAAK6iI,GACpC7nI,KAAK2nI,0BAA0BL,EAAYO,EAAWx1H,EAAauzH,EAAoB8B,IAE/F,OAAO,UAAWW,IAAwB,EAsB3C,eAAeC,EAA2BC,GACzC,OAAQA,EAAgBvtI,QACvB,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAOgF,KAAKwoI,gBAAgBF,EAAkBC,GAC/C,QAEC,OADAA,EAAkBA,EAAgBlqI,MAAM,EAAG,GACpC2B,KAAKyoI,gBAAgBH,EAAkBC,IAIjD,uBAAuBD,EAA2BC,GACjD,MAAMG,EAAoBH,EAAgBvjI,IAAK2jI,GAAmBL,EAAiBrQ,WAAW0Q,IAExFzK,EAAiB,UAAWwK,GAElC,MAAO,CAACA,EAAkB,GAAKxK,EAAgBwK,EAAkB,GAAKxK,GAGvE,uBAAuBoK,EAA2BC,GACjD,MAAMG,EAAoBH,EAAgBvjI,IAAK2jI,GAAmBL,EAAiBrQ,WAAW0Q,IAExFzK,EAAiB,UAAW,CACjCwK,EAAkB,GAAKA,EAAkB,GACzCA,EAAkB,GAAKA,EAAkB,GACzCA,EAAkB,GAAKA,EAAkB,KAG1C,MAAO,CACLA,EAAkB,GAAKA,EAAkB,GAAMxK,EAC/CwK,EAAkB,GAAKA,EAAkB,GAAMxK,EAC/CwK,EAAkB,GAAKA,EAAkB,GAAMxK,M,2FC3NnD,QAEA,4BAIA,SAEA,mBAGC,YAAYp0D,GACX9pE,KAAKo+F,MAAQ,IAAI,EAAAwqC,WAAW9+D,GAO7B,WAAWt1D,GACVxU,KAAKo+F,MAAMwoC,WAAWpyH,GAGvB,SAAS4D,GACRpY,KAAKo+F,MAAM73C,SAASnuC,GAOrB,YAAYhE,EAAmByW,EAAkBg+G,GAChD,MAAMC,EAAS,IAAI,EAAAC,OAAO30H,EAAUyW,GACpC,IAAIm+G,EAA4B,GAMhC,OAJIhpI,KAAKo+F,MAAM6qC,kBAAkBH,IAChC9oI,KAAKo+F,MAAM8qC,iBAAiBJ,EAAQE,GAGb,MAApBH,GAGCG,EAAahuI,OAAS6tI,IACzBG,EAAe,UAAcA,EAAer0H,GACpCA,EAAMP,WAAW6jH,WAAW7jH,IASpC40H,EAAeA,EAAa3qI,MAAM,EAAGwqI,IAb/BG,K,2FCvCV,QACA,2BAKA,MAAaJ,EASZ,YAAoBO,EAAqBC,EAAiB,GAAtC,KAAAD,QAAqB,KAAAC,SARzC,KAAAC,kBAA4C,GAC5C,KAAAC,qBAAgD,GAChD,KAAAC,QAAwB,GAGxB,KAAAC,0BAA8C,GAC9C,KAAAC,oCAA8C,EAG7CzpI,KAAK0pI,QAAU1pI,KAAKmpI,MAAM18H,IACxB1J,QACAoa,IAAInd,KAAKmpI,MAAMv9G,KACf/H,eAAe,IAMlB,QACC,OAAO7jB,KAAKopI,OAGb,SAAShxH,GACRA,EAASpY,MACO/E,OAAO6J,OAAO9E,KAAKqpI,mBAC3BznI,QAAS6B,IAChBA,EAAK8iD,SAASnuC,KAIhB,kBAAkB0wH,GACjB,QAAI9oI,KAAKmpI,OACDnpI,KAAKmpI,MAAMQ,iBAAiBb,GAMrC,iBAAiBA,EAAgBc,GAChC,GAA2B,GAAvB5pI,KAAKupI,QAAQvuI,OAAa,CACR,UAAeC,OAAO6J,OAAO9E,KAAKspI,uBAClBv/G,OAAQpV,GAAUm0H,EAAOe,cAAcl1H,EAAMP,aAClExS,QAAS+S,IACxBi1H,EAAmBtuI,KAAKqZ,SAEnB,CAEkC3U,KAAKupI,QAAQx/G,OAAQ+/G,GAASA,EAAKb,kBAAkBH,IAG7DlnI,QAASkoI,GAASA,EAAKZ,iBAAiBJ,EAAQc,KAKlF,eACC,OAAO5pI,KAAKmpI,MAMb,WAAW30H,GAGVxU,KAAKspI,qBAAuB,GAC5B,IAAK,IAAI30H,KAASH,EACjBxU,KAAK+pI,UAAUp1H,GAGhB,MAAMq1H,EAAa/uI,OAAO4W,KAAK7R,KAAKspI,sBAChCU,EAAWhvI,OAAS,GACvBgvI,EAAWpoI,QAASqoI,IACnBjqI,KAAKkqI,YAAYD,KAKpB,YAAYA,GACX,MAAME,EAAMnqI,KAAKoqI,WAAWH,GACtBH,EAAO,IAAIlB,EAAWuB,EAAKnqI,KAAKopI,OAAS,GAC/CppI,KAAKqpI,kBAAkBY,GAAaH,EACpC9pI,KAAKupI,QAAQjuI,KAAKwuI,GAGlBA,EAAKlD,WAAW5mI,KAAKspI,qBAAqBW,IAG3C,UAAUt1H,GACT,MAAMs1H,EAAYjqI,KAAKqqI,WAAW11H,EAAMP,YACI,MAAxCpU,KAAKspI,qBAAqBW,KAC7BjqI,KAAKspI,qBAAqBW,GAAa,IAExCjqI,KAAKspI,qBAAqBW,GAAW3uI,KAAKqZ,GAGnC,WAAWP,GAIlB,MAAO,GAHOA,EAAS9O,EAAItF,KAAK0pI,QAAQpkI,EAAI,EAAI,IAClC8O,EAAS7O,EAAIvF,KAAK0pI,QAAQnkI,EAAI,EAAI,IAClC6O,EAAS5O,EAAIxF,KAAK0pI,QAAQlkI,EAAI,EAAI,IAIjD,WAAWykI,GAKV,OAJKjqI,KAAKypI,qCACTzpI,KAAKsqI,yBACLtqI,KAAKypI,oCAAqC,GAEpCzpI,KAAKwpI,0BAA0BS,GAG/B,aAAaM,EAAeC,EAAeC,GAClD,MAAMC,EAAS1qI,KAAKmpI,MAAMv9G,IAAI7oB,QAW9B,OAVIwnI,IACHG,EAAOplI,EAAItF,KAAKmpI,MAAM18H,IAAInH,GAEvBklI,IACHE,EAAOnlI,EAAIvF,KAAKmpI,MAAM18H,IAAIlH,GAEvBklI,IACHC,EAAOllI,EAAIxF,KAAKmpI,MAAM18H,IAAIjH,GAGpBklI,EACL3nI,QACAoa,IAAInd,KAAK0pI,SACT7lH,eAAe,IAGV,yBACP,MAAM8mH,EAAe,GACrBA,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAC1CD,EAAarvI,KAAK0E,KAAK4qI,aAAa,EAAG,EAAG,IAE1C,MAAMC,EAAoB7qI,KAAKmpI,MAAM18H,IACnC1J,QACAqsB,IAAIpvB,KAAKmpI,MAAMv9G,KACf/H,eAAe,KACjB,IAAK,IAAIinH,KAAeH,EAAc,CACrC,MAAMV,EAAYjqI,KAAKqqI,WAAWS,GAC5BhhE,EAAO,IAAI,EAAAE,KAChB8gE,EAAY/nI,QAAQqsB,IAAIy7G,GACxBC,EAAY/nI,QAAQoa,IAAI0tH,IAEzB7qI,KAAKwpI,0BAA0BS,GAAangE,IAvJ/C,gB,2FCRA,OACA,OACA,2BACA,QACA,QAEA,OAEA,MAAMihE,UAAmC,EAAAjiI,iBAAzC,c,oBACC,KAAA0kB,UAAY,EAAAlL,YAAYxjB,MAAM,KAE/B,MAAMiK,EAAe,IAAIgiI,EAEzB,MAAa1R,UAA2B,EAAAz5H,aAAxC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,eAGR,+BACC,MAAO,CAAC,kCAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GAG1B,KAAK5B,GACJ,MAAMjf,EAAYif,EAAe,GAG3BwM,EAAYxtB,KAAKwe,GAAGgP,UAGpBs8C,EAAO/nE,EAAU4nE,eAEjBjlC,EAAQ,CACbp/B,EAAG,UAAawkE,EAAKl+C,IAAItmB,EAAGwkE,EAAKr9D,IAAInH,EAAGkoB,GACxCjoB,EAAG,UAAaukE,EAAKl+C,IAAIrmB,EAAGukE,EAAKr9D,IAAIlH,EAAGioB,GACxChoB,EAAG,UAAaskE,EAAKl+C,IAAIpmB,EAAGskE,EAAKr9D,IAAIjH,EAAGgoB,IAKnC+a,EAAsB,GAC5B7D,EAAMp/B,EAAE1D,QAAS0D,IAChBo/B,EAAMn/B,EAAE3D,QAAS2D,IAChBm/B,EAAMl/B,EAAE5D,QAAS4D,IAChB+iC,EAAUjtC,KAAKgK,GACfijC,EAAUjtC,KAAKiK,GACfgjC,EAAUjtC,KAAKkK,SAKlB,MAAMhE,EAAW,IAAI,EAAAsT,eACrBtT,EAASkR,aAAa,WAAY,IAAI,EAAAm7G,gBAAgB,IAAIplF,aAAaF,GAAY,IAEnFvoC,KAAKgrI,aAAaxpI,EAAU,EAAAiB,aAAaC,YAAYyG,SA7CvD,wB,8ECbA,cAIA,OACA,QAKA,MAAM8hI,UAA6B,EAAAniI,iBAAnC,c,oBACC,KAAAuJ,YAAc,EAAAiQ,YAAYhjB,SAC1B,KAAA6oI,MAAQ,EAAA7lH,YAAYxjB,MAAM,GAAK,CAC9B4lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAIkiI,EAEzB,MAAa3R,UAAqB,EAAA15H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAGR,+BACC,MAAO,CAAC,yBAA0B,wBAEnC,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,UAAW,EAAAz2F,eAAe42F,QAGrF,KAAKv6E,GAYJ,MAAMkqH,EAAclqH,EAAe,GAC7BmqH,EAAcnqH,EAAe,GAE7BoqH,EAAWF,EAAYjqI,UACvBoqI,EAAWF,EAAYlqI,UAE7B,IAAIqqI,EAASC,EACb,IAAK,IAAIzwI,EAAI,EAAGA,EAAIswI,EAASpwI,OAAQF,IACpCwwI,EAAUF,EAAStwI,GACnBywI,EAAUF,EAASvwI,GACnBkF,KAAKmoI,MAAMmD,EAASC,EAASvrI,KAAKwe,GAAG2pH,OAEtCnoI,KAAK6+H,eAAeqM,GAQb,MAAMI,EAAmBC,EAAmBpD,GACnD,MAAMxtD,EAAa2wD,EAAiB9pI,SAC9Bk5E,EAAa6wD,EAAiB/pI,SACpC,GAAiB,MAAbm5E,GAAkC,MAAbD,EACxB,OAGD,MAAM8wD,EAAU7wD,EAAUr4E,aAAatC,KAAKwe,GAAGnM,aACzCo5H,EAAU/wD,EAAUp4E,aAAatC,KAAKwe,GAAGnM,aAC/C,GAAe,MAAXm5H,GAA8B,MAAXC,EACtB,OAGD,MAAMC,EAAgBF,EAAQjpI,MACxBopI,EAAgBF,EAAQlpI,MAE9B,IAAIqpI,EAAIC,EACR,IAAK,IAAI/wI,EAAI,EAAGA,EAAI4wI,EAAc1wI,OAAQF,IACzC8wI,EAAKF,EAAc5wI,GACnB+wI,EAAKF,EAAc7wI,GACT,MAAN+wI,IACHH,EAAc5wI,IAAM,EAAIqtI,GAASyD,EAAKzD,EAAQ0D,GAIhDlxD,EAAU/oE,wBAvEZ,kB,8ECnBA,cACA,QAIA,SAGA,QAEA,OACA,MAAMk6H,UAA2B,EAAAhjI,iBAAjC,c,oBACC,KAAA0B,KAAO,EAAA8X,YAAYxjB,MAAM,GACzB,KAAAitI,UAAY,EAAAzpH,YAAYtjB,QAAQ,EAAG,CAClC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,KAAA+kC,OAAS,EAAApnD,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAErC,MAAMuJ,EAAe,IAAI+iI,EAEzB,MAAavS,UAAmB,EAAA35H,aAAhC,c,oBACC,KAAAoJ,cAAgBD,EASR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAR9B,cACC,MAAO,MAGR,+BACC,MAAO,CAAC,mDAOT,kBACCpkB,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAW3D,KAAKv6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC9BhgB,EACHhB,KAAKisI,iBAAiBjrI,GAEtBhB,KAAKksI,sBAIC,sBAEP,MAAMH,EAAY/rI,KAAKwe,GAAGutH,UACpBvhI,EAAOxK,KAAKwe,GAAGhU,KACfhJ,EAAW,IAAI,EAAA2qI,kBAAkB3hI,EAAMA,EAAMA,EAAMuhI,EAAWA,EAAWA,GAE/EvqI,EAAS4qI,UAAUpsI,KAAKwe,GAAGkrD,OAAOpkE,EAAGtF,KAAKwe,GAAGkrD,OAAOnkE,EAAGvF,KAAKwe,GAAGkrD,OAAOlkE,GAEtEhE,EAASoQ,uBAGT5R,KAAKgrI,aAAaxpI,GAGX,iBAAiBR,GACxB,MAAM+qI,EAAY/rI,KAAKwe,GAAGutH,UAEpBjiE,EAAO9oE,EAAW2oE,eAClBn/D,EAAOs/D,EAAKr9D,IAAI1J,QAAQqsB,IAAI06C,EAAKl+C,KACjC89C,EAASI,EAAKr9D,IAAI1J,QAAQoa,IAAI2sD,EAAKl+C,KAAK/H,eAAe,IAEvDriB,EAAW,IAAI,EAAA2qI,kBAAkB3hI,EAAKlF,EAAGkF,EAAKjF,EAAGiF,EAAKhF,EAAGumI,EAAWA,EAAWA,GAC/E1oH,EAASrjB,KAAKgsI,gBAAgBK,mBAAmB3iE,GACvDloE,EAAS+kB,aAAalD,GAGtBrjB,KAAKgrI,aAAaxpI,IA9DpB,gB,2FCrBA,SACA,QAEA,OAIA,MAAM8qI,UAA6B,EAAAxjI,iBAAnC,c,oBACC,KAAAyjI,MAAQ,EAAAjqH,YAAYhjB,OAAO,GAAI,CAAC0sC,QAAQ,IACxC,KAAArjC,MAAQ,EAAA2Z,YAAY3jB,OAAO,KAAM,CAChCyZ,SAAU,CAAC3U,EAAoByV,KAC9BsgH,EAAagT,qBAAqB/oI,EAAsByV,OAI3D,MAAMnQ,EAAe,IAAIujI,EAEzB,MAAa9S,UAAqB,EAAA55H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAGR,+BACC,MAAO,CAAC,qBAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAG7B,KAAK5B,GACJ,MAAMyrH,EAAkC,IAAjBzsI,KAAKwe,GAAG+tH,OAAgC,MAAjBvsI,KAAKwe,GAAG+tH,MAChDvrI,EAAaggB,EAAe,GAClC,GAAIyrH,GAAkBzrI,EAAY,CACjC,MAAM+vE,EAAO,GACb,IAAK,IAAIhzE,KAAUiD,EAAWC,UAC7B8vE,EAAKz1E,KAAKyC,EAAO2uI,UAElB1sI,KAAK6+H,eAAe79H,GACpBhB,KAAK/B,EAAEsuI,MAAMhsI,IAAI8pC,KAAKC,UAAUymC,SAEhC,GAAI/wE,KAAKwe,GAAG+tH,MAAO,CAClB,MAAMI,EAAa,IAAI,EAAAC,aACjBC,EAAQxiG,KAAKj8B,MAAMpO,KAAKwe,GAAG+tH,OAC3BO,EAAc,GACpB,IAAK,IAAI/7D,KAAQ87D,EAAO,CACvB,MAAMnsI,EAASisI,EAAWv+H,MAAM2iE,GAEhC+7D,EAAYxxI,KAAKoF,GAGlBV,KAAKkC,YAAY4qI,QAEjB9sI,KAAKkC,YAAY,IAKpB,4BAA4BuB,EAAoByV,GAC/CzV,EAAKspI,sCAEA,sC,mDACL/sI,KAAK/B,EAAEsuI,MAAMhsI,IAAI,IACjBP,KAAK2Z,wBA/CP,kB,8ECjBA,aACA,SACA,QACA,SACA,QACA,QAEMqzH,EAAa,IAAI,EAAA55H,QAAQ,EAAG,EAAG,GAErC,OACA,MAAM65H,UAA8B,EAAAnkI,iBAApC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,GAC3B,KAAAi8E,SAAW,EAAAz4D,YAAYtjB,QAAQ,GAAI,CAClC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,KAAA23F,KAAO,EAAAh6G,YAAY1jB,QAAQ,GAC3B,KAAAwuE,UAAY,EAAA9qD,YAAYxjB,MAAM,IAAK,CAClC4lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAO,GACtBhV,WAAY,CAAC2sG,KAAM,KAEpB,KAAA/D,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAExC,MAAMuJ,EAAe,IAAIkkI,EAEzB,MAAavT,UAAsB,EAAA95H,aAAnC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAJ9B,cACC,MAAO,SAKR,mBAKA,OACKpkB,KAAKwe,GAAG89G,KACXt8H,KAAKktI,iBAELltI,KAAKmtI,eAIP,iBACC,MAAM3rI,EAAW,EAAA4rI,uBAAuBzvI,OAAOqC,KAAKwe,GAAG4+C,OAAQp9D,KAAKwe,GAAGu8D,SAAU/6E,KAAKwe,GAAG4uD,WAEzFptE,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WAEnEv4H,KAAKgrI,aAAaxpI,EAAU,EAAAyH,WAAWG,eAGxC,eACC,MAAM5H,EAAW,IAAI,EAAA8rI,qBAAqBttI,KAAKwe,GAAG4+C,OAAQp9D,KAAKwe,GAAGu8D,UAElE/6E,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WAEnEv4H,KAAKgrI,aAAaxpI,IAlCpB,mB,8EC1BA,cACA,QAEA,SACA,SAkBA,MAAa+rI,EAEZ,eACA,SAAS9pI,GACRzD,KAAKyD,KAAOA,EAEb,KAAK+pI,IACK,eAAexsI,GACxBhB,KAAKyD,KAAKo7H,eAAe79H,IAR3B,yBAcA,aACA,SACA,MAAMysI,UAA4B,EAAA3kI,iBAAlC,c,oBACC,KAAAiuD,gBAAkB,EAAAz0C,YAAYhjB,OAjCD,kXAiC+B,CAC3D03D,OAAO,EACP/Z,SAAU,EAAAtB,oBAAoBsb,aAE/B,KAAAC,gBAAkB,EAAA50C,YAAYhjB,OAAO,GAAI,CAAC0sC,QAAQ,KAEnD,MAAMjjC,EAAe,IAAI0kI,EACzB,MAAahU,UAAoB,EAAA75H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAKhB,cACC,MAAO,OAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKiH,QAAQ4wG,UAAU,KACvB73G,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKoyC,GACJxtI,KAAKo3D,uBAEDp3D,KAAKq3D,WACRr3D,KAAKq3D,WAAWr5B,KAAKwvG,GAErBxtI,KAAK6+H,eAAe2O,EAAY,IAI1B,uBACFxtI,KAAKq3D,YAAcr3D,KAAKs3D,qBAAuBt3D,KAAKwe,GAAG04C,iBAC3Dl3D,KAAKu1C,WAIC,WACP,IACC,MAAMgiB,EAAgB,kBACnB,EAAAC,iBAAiBztC,OAAO/pB,KAAKwe,GAAG04C,kFAInC7zD,QAAQC,IAAI,iBACZD,QAAQC,IAAIi0D,GACZ,MAIME,EAJgD,IAAI,EAAA9Y,cACzD,uBACA4Y,EAEuBG,CAA2B61E,GAC/C91E,GACHz3D,KAAKq3D,WAAa,IAAII,EACtBz3D,KAAKq3D,WAAWtuC,SAAS/oB,MACzBA,KAAKs3D,oBAAsBt3D,KAAKwe,GAAG04C,kBAEnCl3D,KAAKgyB,OAAO9T,MAAM3d,IAAI,4BACtBP,KAAKq3D,gBAAa9yD,GAElB,MAAOiL,GACRnM,QAAQiE,KAAKkI,GACbxP,KAAKgyB,OAAO9T,MAAM3d,IAAI,6BAA6BiP,MACnDxP,KAAKq3D,gBAAa9yD,IAzDrB,iB,2FC9CA,OAEA,SAIA,QAOA,QAIMspE,EAAgB,IAAI,EAAA1jE,MAAM,EAAG,EAAG,GAKtC,OACA,MAAMujI,UAA6B,EAAA5kI,iBAAnC,c,oBACC,KAAA6kI,eAAiB,EAAArrH,YAAY1jB,QAAQ,GACrC,KAAAyT,YAAc,EAAAiQ,YAAYhjB,OAAO,GAAI,CACpCqwB,WAAY,CAACg+G,eAAgB,KAE9B,KAAA9jI,MAAQ,EAAAyY,YAAYzjB,MAAM,CAAC,EAAG,EAAG,GAAI,CACpC8wB,WAAY,CAACg+G,eAAgB,GAC7Bh7F,WAAY,CAAC+uF,cAAc,KAE5B,KAAAkM,OAAS,EAAAtrH,YAAY1jB,QAAQ,EAAG,CAC/B+wB,WAAY,CAACg+G,eAAgB,MAG/B,MAAM5kI,EAAe,IAAI2kI,EAEzB,MAAa/T,UAAqB,EAAA/5H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAA8kI,2BAA+C,GAC/C,KAAAC,2BAA+C,GAC/C,KAAAC,2BAA+C,GANvD,cACC,MAAO,QAOR,+BACC,MAAO,CAAC,+BAGT,kBACC/tI,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAIrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAC5BgoD,EAAehoE,EAAWgoE,eAEhC,IAAK,IAAID,KAAeC,EACvB,GAAIhpE,KAAKwe,GAAGmvH,eACX3tI,KAAKguI,oBAAoBjlE,OACnB,CACiB/oE,KAAK/B,EAAE4L,MAAMuiF,uBAE7BpsF,KAAKiuI,kBAAkBllE,GAE7B/oE,KAAKkuI,oBAAoBnlE,GAM5B,IAAK/oE,KAAKa,GAAG6G,OAAO84H,aAAa,GAAI,CACpC,MAAM7+H,EAAaX,EAAWW,aAC9B,IAAK,IAAIH,KAAYG,EACnBH,EAASc,aA7DY,SA6DwC4tB,aAAc,EAI9ElwB,KAAK6+H,eAAe79H,MAGrB,oBAAoB+nE,GACnB,MAAMnyD,EAAgBmyD,EAAYnyD,gBAClC5W,KAAKmuI,mBAAmBv3H,EAAei3D,GACvC,MAAMr5D,EAASoC,EAAcpC,SAEvB45H,EAAkBx3H,EAAcjB,YAAY3V,KAAKwe,GAAGnM,aACpD7Q,EAAWoV,EAAcpV,WACzB6sI,EAAY7sI,EAASc,aAAatC,KAAKwe,GAAGnM,aAAa9P,MACvD+rI,EAAa9sI,EAASc,aA5EJ,SA4EoCC,MAE5D,OAAQ6rI,GACP,KAAK,EACJ,IAAK,IAAItzI,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAAK,CACvC,MAAMyzI,EAAa,EAAJzzI,EACfwzI,EAAWC,EAAS,GAAKF,EAAUvzI,GACnCwzI,EAAWC,EAAS,GAAK,EAAIF,EAAUvzI,GACvCwzI,EAAWC,EAAS,GAAK,EAE1B,MAED,KAAK,EACJ,IAAK,IAAIzzI,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAAK,CACvC,MAAMyzI,EAAa,EAAJzzI,EACT0zI,EAAY,EAAJ1zI,EACdwzI,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAK,EAE1B,MAED,KAAK,EACJ,IAAK,IAAIzzI,EAAI,EAAGA,EAAIuzI,EAAUrzI,OAAQF,IACrCwzI,EAAWxzI,GAAKuzI,EAAUvzI,GAE3B,MAED,KAAK,EACJ,IAAK,IAAIA,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAAK,CACvC,MAAMyzI,EAAa,EAAJzzI,EACT0zI,EAAY,EAAJ1zI,EACdwzI,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,KAOvC,mBAAmB53H,EAA6B/M,GAClD+M,EAAcszD,WAtHK,UAuHvBtzD,EAActD,mBAvHS,QAuH6B,EAAGu6D,GAIzD,oBAAoB9E,GACnB,MAAMnyD,EAAgBmyD,EAAYnyD,gBAGlC,IAAI63H,EAFJzuI,KAAKmuI,mBAAmBv3H,EAAei3D,GAGnC7tE,KAAKwe,GAAGovH,QACXa,EAAY,IAAI,EAAAtkI,MAChB,EAAAukI,UAAUC,QAAQ3uI,KAAKwe,GAAG3U,MAAM1M,EAAG6C,KAAKwe,GAAG3U,MAAMoJ,EAAGjT,KAAKwe,GAAG3U,MAAMsG,EAAGs+H,IAErEA,EAAYzuI,KAAKwe,GAAG3U,MAErB+M,EAActD,mBAtIU,QAsI4B,EAAGm7H,GAGlD,kBAAkB1lE,G,mDACvB,MAAMv0D,EAASu0D,EAAYv0D,SACrBzW,EAASgrE,EAAYhrE,SACrB6Y,EAAgBmyD,EAAYnyD,gBAClC5W,KAAKmuI,mBAAmBv3H,EAAei3D,GACvC,MAAMrsE,EAAYzD,EAAgByD,SAClC,GAAIA,EAAU,CACb,MAAMe,EAAQf,EAASc,aAhJA,SAgJgCC,MAEjDqsI,QAAoB5uI,KAAK6uI,mBAAmBrtI,EAAUe,EAAOiS,EAAQ,GACrEs6H,QAAoB9uI,KAAK6uI,mBAAmBrtI,EAAUe,EAAOiS,EAAQ,GACrEu6H,QAAoB/uI,KAAK6uI,mBAAmBrtI,EAAUe,EAAOiS,EAAQ,GAa3E,GAXIo6H,GACH5uI,KAAKgvI,mBAAmBJ,EAAarsI,EAAO,GAEzCusI,GACH9uI,KAAKgvI,mBAAmBF,EAAavsI,EAAO,GAEzCwsI,GACH/uI,KAAKgvI,mBAAmBD,EAAaxsI,EAAO,GAIzCvC,KAAKwe,GAAGovH,OAAQ,CACnB,IAEIxrI,EAFA6pB,EAAU,IAAI,EAAA9hB,MACdy4C,EAAS,IAAI,EAAAz4C,MAEjB,IAAK,IAAIwK,KAASH,EACjBpS,EAAsB,EAAduS,EAAMvS,MACd6pB,EAAQo9B,UAAU9mD,EAAOH,GACzB,EAAAssI,UAAUC,QAAQ1iH,EAAQ9uB,EAAG8uB,EAAQhZ,EAAGgZ,EAAQ9b,EAAGyyC,GACnDA,EAAO79C,QAAQxC,EAAOH,QAyCZ,mBACbZ,EACAe,EACAiS,EACA01C,G,mDAGA,MAAMhxC,EAAQlZ,KAAK/B,EAAE4L,MAAMif,WAAWohC,GAChClmB,EAAc,CAAChkC,KAAKwe,GAAG3U,MAAM1M,EAAG6C,KAAKwe,GAAG3U,MAAMoJ,EAAGjT,KAAKwe,GAAG3U,MAAMsG,GAAG+5C,GAClE04E,EAA0B,CAC/B5iI,KAAK6tI,2BACL7tI,KAAK8tI,2BACL9tI,KAAK+tI,4BACJ7jF,GAEF,IAAI44E,EACJ,GAAI5pH,EAAMkzE,kBAAoBlzE,EAAMoQ,sBACnCw5G,EAAY9iI,KAAK6iI,wBAAwBrhI,EAAUohI,EAAyBpuH,EAAOxZ,cAC7Eke,EAAMoQ,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAE9EwlI,EAAuBnuH,EAAMvS,OAAS9E,SAGxC,IAAK,IAAIqX,KAASH,EACjBjS,EAAoB,EAAdoS,EAAMvS,MAAY8nD,GAAUlmB,EAGpC,OAAO8+F,KAGA,wBACPthI,EACAohI,EACAj/H,GAEA,MAAM0N,EAAO7P,EAAS6P,KAChB+xH,EAAgBR,EAAwBvxH,GAS9C,OARI+xH,EAECA,EAAcpoI,OAAS2I,IAC1Bi/H,EAAwBvxH,GAAQ,IAAIg+B,MAAM1rC,IAG3Ci/H,EAAwBvxH,GAAQ,IAAIg+B,MAAM1rC,GAEpCi/H,EAAwBvxH,GAGxB,mBAAmByxH,EAAqBmM,EAAwB/kF,GACvE,IAAK,IAAIpvD,EAAI,EAAGA,EAAIgoI,EAAU9nI,OAAQF,IACrCm0I,EAAiB,EAAJn0I,EAAQovD,GAAU44E,EAAUhoI,IAhP5C,kB,8ECtCA,cAGA,kBAQC,eAAesX,EAAWhW,EAAW6I,EAAW29C,GAC/CxwC,EAAI,EAAA2T,UAAUmpH,gBAAgB98H,EAAG,GACjChW,EAAI,EAAA2pB,UAAUopH,MAAM/yI,EAAG,EAAG,GAC1B6I,EAAI,EAAA8gB,UAAUopH,MAAMlqI,EAAG,EAAG,GAE1B29C,EAAOwsF,OAAOh9H,EAAIhW,EAAI6I,IAAOmN,GAAK,EAAIhW,GAAK6I,GAAK,EAAImN,EAAI,EAAIA,GAAQ,GAAJA,M,8EChBlE,cAEA,OACA,SACA,QAEM46H,EAAa,IAAI,EAAA55H,QAAQ,EAAG,EAAG,GAErC,OACA,MAAMi8H,UAA4B,EAAAvmI,iBAAlC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC1C,KAAAqiE,OAAS,EAAAzkF,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC1C,KAAA4qG,gBAAkB,EAAAhtH,YAAYtjB,QAAQ,GAAI,CAAC0lC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAChF,KAAA4qG,gBAAkB,EAAAjtH,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAC/E,KAAA6qG,IAAM,EAAAltH,YAAY1jB,QAAQ,GAC1B,KAAA6wI,YAAc,EAAAntH,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC/C,KAAAgrG,aAAe,EAAAptH,YAAYxjB,MAAM,QAAS,CAAC4lC,MAAO,CAAC,EAAG,KACtD,KAAAglC,OAAS,EAAApnD,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACpC,KAAA+4H,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAExC,MAAMuJ,EAAe,IAAIsmI,EAEzB,MAAazV,UAAoB,EAAAh6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAJ9B,cACC,MAAO,OAKR,OACC,MAAM5iB,EAAW,IAAI,EAAAmuI,mBACpB3vI,KAAKwe,GAAG4+C,OACRp9D,KAAKwe,GAAGuoF,OACR/mG,KAAKwe,GAAG8wH,gBACRtvI,KAAKwe,GAAG+wH,iBACPvvI,KAAKwe,GAAGgxH,IACTxvI,KAAKwe,GAAGixH,YACRzvI,KAAKwe,GAAGkxH,cAGT1vI,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WACnE/2H,EAAS4qI,UAAUpsI,KAAKwe,GAAGkrD,OAAOpkE,EAAGtF,KAAKwe,GAAGkrD,OAAOnkE,EAAGvF,KAAKwe,GAAGkrD,OAAOlkE,GAEtExF,KAAKgrI,aAAaxpI,IAtBpB,iB,2FCtBA,2BACA,QAEA,SAEA,SACA,QAEA,SAIA,OACA,QAEA,MAAMouI,UAA4B,EAAA9mI,iBAAlC,c,oBACC,KAAAyD,MAAQ,EAAA+V,YAAYtjB,QAAQ,EAAG,CAC9B0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,KAAAkrG,eAAiB,EAAAvtH,YAAY1jB,QAAQ,GACrC,KAAAkxI,gBAAkB,EAAAxtH,YAAY1jB,QAAQ,GACtC,KAAAswE,mBAAqB,EAAA5sD,YAAYhjB,OAAO,GAAI,CAC3CqwB,WAAY,CAACmgH,iBAAiB,KAE/B,KAAAC,cAAgB,EAAAztH,YAAY1jB,QAAQ,IAErC,MAAMmK,EAAe,IAAI6mI,EAEzB,MAAa/V,UAAoB,EAAAj6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAinI,yBAAqC,GAErC,KAAAnnE,SAAuB,GAN/B,cACC,MAAO,OAQR,+BACC,MAAO,CAAC,wBAAyB,qBAGlC,kBACC7oE,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe22F,OAAQ,EAAA32F,eAAe42F,QAO5E,O,mDACL,IAAI2vC,EACJ,MAAM+E,QAAmBjwI,KAAKF,qBAAqBw2B,wBAAwB,GAC3E,GAAkB,MAAd25G,GAAmE,OAA5C/E,EAAc+E,EAAWjuI,gBACnD,GAAIhC,KAAKa,GAAG6G,OAAOqwG,UAAU,GAAI,CAChC,IAAIozB,EACJ,MAAM+E,QAAmBlwI,KAAKF,qBAAqBw2B,wBAAwB,GACzD,MAAd45G,GAAmE,OAA5C/E,EAAc+E,EAAWluI,sBAC7ChC,KAAKmwI,mBAAmBjF,EAAaC,GAE3CnrI,KAAKgyB,OAAO9T,MAAM3d,IAAI,8BAGvBP,KAAKowI,sBAAsBlF,QAG5BlrI,KAAKgyB,OAAO9T,MAAM3d,IAAI,2BAIV,mBAAmB8vI,EAAgCphE,G,mDAChEjvE,KAAK6oE,SAAW,GAEhB,MAAMynE,EAAkBrhE,EAAoBz6D,SAG5C,IAAIk7D,EADc,IAAI,EAAA3B,cAAckB,GACFU,WAElC3vE,KAAKgwI,yBAA2B,EAAAprI,WAAW0N,aAAatS,KAAKwe,GAAG0wD,oBAAoBnlD,OAAQ1X,GAC3F48D,EAAoB/E,WAAW73D,UAE1BrS,KAAKuwI,uCAAuCF,EAAqB3gE,EAAmB4gE,GAC1FtwI,KAAKkC,YAAYlC,KAAK6oE,aAIT,uCACbwnE,EACA3gE,EACA4gE,G,mDAEA,IAAK,IAAI57H,EAAc,EAAGA,EAAc47H,EAAgBt1I,OAAQ0Z,UACzD1U,KAAKwwI,qCACVH,EACA3gE,EACA4gE,EACA57H,MAeK,qCACP27H,EACA3gE,EACA4gE,EACA57H,GAEA,OAAO,IAAIyT,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,MAAMhF,EAASqsD,EAAkBh7D,GAC3B+7H,EAAiBH,EAAgB57H,GAuBvC,OAtBA1U,KAAK81F,WAAW46C,UAAUD,UAEEzwI,KAAK2wI,sCAAsCN,EAAqB37H,IAE9E9S,QAASgvI,IAClB5wI,KAAKwe,GAAGsxH,iBACX9vI,KAAK6wI,+BAA+BD,EAAcH,GAO/CzwI,KAAKwe,GAAGqxH,eACXe,EAAarqH,aAAalD,GAE1ButH,EAAapvI,SAAS+kB,aAAalD,GAG7BrjB,KAAK6oE,SAASvtE,KAAKs1I,KAGpBxoH,QAID,sCACPioH,EACA37H,GAEA,OAAO,IAAIyT,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAE5C,SAD0CroB,KAAK8wI,kCAAkCT,GAChD,CAEhC,MAAMU,EAAgB/wI,KAAKwe,GAAGqxH,eAE3B,UAAe,CAACQ,EAAoBpvI,UAAUyT,KAC9C27H,EAAoBttI,QAAQ9B,UAE/BmnB,EAAQ2oH,QAER3oH,EAAQ,QAKH,kCAAkCioH,GACzC,OAAO,IAAIloH,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,GAAIroB,KAAKwe,GAAGuxH,cAAe,CAC1B,MAAME,QAAmBjwI,KAAKF,qBAAqBw2B,wBAAwB,GAC3E,IAAI40G,EACA+E,GAA2D,OAA5C/E,EAAc+E,EAAWjuI,gBAE3ComB,EAAQ8iH,IAERlrI,KAAKgyB,OAAO9T,MAAM3d,IAAI,0BAA0BP,KAAK+1F,iBACrD3tE,UAGDA,EAAQioH,OAMG,sCAAsCA,G,mDAGnD,IAAK,IAAIv1I,EAAI,EAAGA,EAAIkF,KAAKwe,GAAGjS,MAAOzR,UAC5BkF,KAAKgxI,iCAAiCX,EAAqBv1I,MAW3D,iCAAiCu1I,EAAgCv1I,GACxE,OAAO,IAAIqtB,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5CroB,KAAK81F,WAAWm7C,iBAAiBn2I,GAEjC,MAAMo2I,QAAoClxI,KAAK8wI,kCAAkCT,GAC7Ea,GACHA,EAA4BjwI,UAAUW,QAAS7D,IAE9C,MAAMkoD,EAAa,EAAAV,WAAWxiD,MAAMhF,GACpCiC,KAAK6oE,SAASvtE,KAAK2qD,KAIrB79B,QAKM,sBAAsBioH,GAC7BrwI,KAAK6oE,SAAW,GAChB7oE,KAAKmxI,sCAAsCd,GAAqB95G,KAAK,KACpEv2B,KAAKkC,YAAYlC,KAAK6oE,YAIhB,+BAA+B9qE,EAAkB0yI,GACxDzwI,KAAKgwI,yBAAyBpuI,QAAQ,CAACyQ,EAAavX,KACnD,MAAMwa,EAAem7H,EAAen7H,aAAajD,GAC1B,IAAI,EAAAkzC,WAAWxnD,EAAQjD,GAC/B8qD,cAAcvzC,EAAaiD,KAS5C,YAAYjD,GACX,OAAOrS,KAAK81F,WAAWx4F,MAAM+U,GAE9B,iBACC,OAAQrS,KAAKoxI,YAAcpxI,KAAKoxI,aAAepxI,KAAKqxI,oBAE7C,oBACP,MAAMv7C,EAAa,IAAI,EAAAw7C,UAAUtxI,KAAKoD,OAEtC,OADApD,KAAKijB,iBAAiBsuH,4BAA4B,CAACz7C,IAC5CA,GA7NT,iB,8EC5BA,cAGA,MAAaw7C,UAAkB,EAAAhzH,cAI9B,YAAYlb,GACX6C,MAAM7C,EAAO,aAJN,KAAAouI,cAAwB,EAOhC,UAAU78H,GACT3U,KAAKyxI,OAAS98H,EACd3U,KAAKgY,YACLhY,KAAKkY,qBAEN,iBAAiB9V,GAChBpC,KAAKwxI,cAAgBpvI,EACrBpC,KAAKgY,YACLhY,KAAKkY,qBAGN,MAAM7F,GACL,OAAIrS,KAAKyxI,OACJp/H,EACIrS,KAAKyxI,OAAOn8H,aAAajD,GAEzBrS,KAAKyxI,OAAOrvI,MAGbpC,KAAKwxI,eA3Bf,e,8ECHA,cACA,SAiBME,EAAmBrnG,KAAKC,UAfT,CACpB,CAAChtC,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,MAAO,GACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,MAIT,OACA,MAAMq0I,UAA4B,EAAA7oI,iBAAlC,c,oBACC,KAAAtO,KAAO,EAAA8nB,YAAYhjB,OAAOoyI,IAE3B,MAAM3oI,EAAe,IAAI4oI,EAEzB,MAAa7X,UAAoB,EAAAl6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,OACC,IAAIgoE,EAAO,KACX,IACCA,EAAO1mC,KAAKj8B,MAAMpO,KAAKwe,GAAGhkB,MACzB,MAAOgV,GACRxP,KAAKgyB,OAAO9T,MAAM3d,IAAI,wBAGvB,GAAIwwE,EAAM,CACT,MAAM6C,EAAS,IAAI,EAAAg+D,eACnBh+D,EAAOi+D,SAAS9gE,GAChB,MAAMhzE,EAAS61E,EAAOnyE,gBACtBzB,KAAKggI,WAAWjiI,QAEhBiC,KAAK+b,gBAAgBoF,YApBxB,iB,2FC3BA,2BACA,2BACA,QAEA,0BACC,YAAoBu0G,EAAuBnvH,GAAvB,KAAAmvH,QAAuB,KAAAnvH,QAE3C,OACC,OAAOvG,KAAK01H,MAEb,OACC,OAAO11H,KAAKuG,MAGb,kBAAkB+O,GACjB,MAAM/W,EAAO,UAAgB+W,GAC1B,EAAA7S,aAAa0I,YAAY7L,OACzB,EAAAmD,aAAa0I,YAAYF,QAG5B,OAAO,IAAIjL,KAFE,UAAesV,GAAgBA,EAAata,OAAS,EAE5CuD,M,2FClBxB,QAGA,SAEA,OAGA,MAAMuzI,UAA+B,EAAAhpI,iBAArC,c,oBACC,KAAAy5B,IAAM,EAAAjgB,YAAYhjB,OAAO,qCACzB,KAAAyyI,sBAAwB,EAAAzvH,YAAYhjB,OAAO,IAC3C,KAAAixE,aAAe,EAAAjuD,YAAYhjB,OAAO,IAClC,KAAAgzC,QAAU,EAAAhwB,YAAY1jB,QAAQ,GAC9B,KAAA6xE,mBAAqB,EAAAnuD,YAAYhjB,OAAO,GAAI,CAC3CqwB,WAAY,CAAC2iB,QAAS,KAEvB,KAAA1P,OAAS,EAAAtgB,YAAY3jB,OAAO,KAAM,CACjCyZ,SAAU,CAAC3U,EAAoByV,KAC9B6gH,EAAel3F,sBAAsBp/B,EAAwByV,OAIhE,MAAMnQ,EAAe,IAAI+oI,EAEzB,MAAa/X,UAAuB,EAAAn6H,aAApC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,WAIF,O,mDACU,IAAI,EAAA6oI,eAAe,CACjCthE,iBAAkBtwE,KAAKwe,GAAGuzH,sBAC1BxhE,aAAcvwE,KAAKwe,GAAG+xD,aACtBC,WAAYxwE,KAAKwe,GAAG8zB,QACpBm+B,mBAAoBzwE,KAAKwe,GAAGiyD,qBAEtB+C,KAAKxzE,KAAKwe,GAAG+jB,IAAKviC,KAAKgyI,SAASn0I,KAAKmC,WAAOuE,EAAWvE,KAAKiyI,UAAUp0I,KAAKmC,UAGnF,SAASiB,GAERjB,KAAKkC,YAAY,CAACjB,IAEnB,UAAUid,GACTle,KAAKgyB,OAAO9T,MAAM3d,IAAI,gCAAgCP,KAAKwe,GAAG+jB,QAAQrkB,MACtEle,KAAK+b,gBAAgBoF,WAWtB,6BAA6B1d,EAAsByV,GAClDzV,EAAKygC,wBAEN,wBAIClkC,KAAK/B,EAAEskC,IAAIvqB,aAzCb,oB,8EC1BA,cAEA,OACA,QAEA,MAAMk6H,UAA6B,EAAAppI,iBAAnC,c,oBACC,KAAA27B,SAAW,EAAAniB,YAAYtjB,QAAQ,MAEhC,MAAM+J,EAAe,IAAImpI,EAEzB,MAAalY,UAAqB,EAAAp6H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe22F,SAG3D,KAAK62C,GACJ,MAAMnxI,EAAamxI,EAAgB,GAInC/7G,WAHU,KACTp2B,KAAK6+H,eAAe79H,IAEPhB,KAAKwe,GAAGimB,WAhBxB,kB,2FCVA,QACA,2BACA,4BACA,QACA,QACA,QAQA,QACA,QAIA,IAAK2tG,GAAL,SAAKA,GACJ,kBACA,gBACA,kBACA,kBACA,gBACA,kBAND,CAAKA,MAAkB,KAQvB,MAAMC,EAAgC,CACrC,CAACx1I,KAAM,KAAMS,MAAO80I,EAAmB,OACvC,CAACv1I,KAAM,IAAKS,MAAO80I,EAAmB,MACtC,CAACv1I,KAAM,KAAMS,MAAO80I,EAAmB,OACvC,CAACv1I,KAAM,KAAMS,MAAO80I,EAAmB,OACvC,CAACv1I,KAAM,IAAKS,MAAO80I,EAAmB,MACtC,CAACv1I,KAAM,KAAMS,MAAO80I,EAAmB,QAGxC,OACA,MAAME,UAA8B,EAAAxpI,iBAApC,c,oBACC,KAAA04H,MAAQ,EAAAl/G,YAAYtjB,QAAQ,EAAA2L,YAAYG,OAAQ,CAC/Cg4B,KAAM,CACLC,QAAS,EAAAl4B,0BAGX,KAAA0nI,OAAS,EAAAjwH,YAAY1jB,QAAQ,GAC7B,KAAA4zI,aAAe,EAAAlwH,YAAY1jB,QAAQ,GAGnC,KAAA6zI,eAAiB,EAAAnwH,YAAY1jB,QAAQ,GACrC,KAAAiW,YAAc,EAAAyN,YAAYtjB,QAAQ,EAAAkK,YAAYI,QAAQ,EAAAL,WAAWtG,MAAO,CACvEmgC,KAAM,CACLC,QAAS,EAAA15B,uBAEVsmB,WAAY,CAAC8iH,gBAAgB,KAI9B,KAAAC,cAAgB,EAAApwH,YAAY1jB,QAAQ,GACpC,KAAA+zC,WAAa,EAAArwB,YAAY1jB,QAAQ,YAAa,CAC7C+wB,WAAY,CAAC+iH,eAAe,GAC5B//F,WAAY,CAAC+uF,cAAc,KAI5B,KAAAiR,UAAY,EAAArwH,YAAY1jB,QAAQ,GAChC,KAAAyT,YAAc,EAAAiQ,YAAYhjB,OAAO,GAAI,CACpCqwB,WAAY,CAACgjH,WAAW,KAEzB,KAAAC,cAAgB,EAAAtwH,YAAYhjB,OAAO,GAAI,CACtCqwB,WAAY,CAACgjH,WAAW,KAKzB,KAAAE,eAAiB,EAAAvwH,YAAY7iB,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,CAClDkwB,WAAY,CAACgjH,WAAW,KAEzB,KAAAG,2BAA6B,EAAAxwH,YAAYtjB,QAAQozI,EAAmB,MAAO,CAC1EtvG,KAAM,CACLC,QAASsvG,GAEV1iH,WAAY,CAACgjH,WAAW,KAIzB,KAAAI,QAAU,EAAAzwH,YAAY1jB,QAAQ,GAC9B,KAAAo0I,UAAY,EAAA1wH,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI,CAC1CmwB,WAAY,CAACojH,SAAS,KAEvB,KAAAjI,YAAc,EAAAxoH,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,GAAI,CAC5CmwB,WAAY,CAACojH,SAAS,KAKvB,KAAAE,WAAa,EAAA3wH,YAAY1jB,QAAQ,GACjC,KAAAs0I,YAAc,EAAA5wH,YAAY1jB,QAAQ,EAAG,CACpC+wB,WAAY,CACX6xG,MAAO,EAAA72H,YAAYI,WAItB,MAAMhC,EAAe,IAAIupI,EAEzB,MAAarY,UAAsB,EAAAr6H,aAAnC,c,oBACC,KAAAoJ,cAAgBD,EAyBR,KAAAoqI,sCAA8D,IAAI5iH,IAxB1E,cACC,MAAO,SAyBR,+BACC,MAAO,CAAC,2BAGT,kBACCvwB,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAGrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAGlC,OADAhhB,KAAKozI,iBAAc7uI,EACXvE,KAAKwe,GAAGgjH,OACf,KAAK,EAAA72H,YAAYG,aACV9K,KAAKqzI,iBAAiBryI,GAC5B,MACD,KAAK,EAAA2J,YAAYI,aACV/K,KAAKszI,kBAAkBtyI,OAKlB,kBAAkBA,G,mDAE/B,MAAMuyI,EAAkB,GAClBvqE,EAAehoE,EAAWgoE,eAEhChpE,KAAKmzI,sCAAwC,IAAI5iH,IACjD,IAAK,IAAIw4C,KAAeC,EACvBhpE,KAAKmzI,sCAAsC5yI,IAAIwoE,EAAY3mE,OAAO,GAsCnE,IAAI2mE,EAAahrE,EAnCbiC,KAAKwe,GAAGk0H,sBACL1yI,KAAKwzI,8BAA8BxqE,IAGtChpE,KAAKwe,GAAGi0H,gBACXzyI,KAAKyzI,uBAAuBzqE,GAGzBhpE,KAAKwe,GAAGm0H,WAAqC,KAAxB3yI,KAAKwe,GAAGnM,aAChCrS,KAAK0zI,yBAAyB1qE,GAoB3BhpE,KAAKwe,GAAG+zH,QACXvyI,KAAKmzI,sCAAsCvxI,QAAQ,CAAC+xI,EAAqBC,KACxE5zI,KAAKmzI,sCAAsC5yI,IAAIqzI,GAAeD,KAKhE,MAAME,EAA6D,GAEnE7zI,KAAKmzI,sCAAsCvxI,QAAQ,CAAC+xI,EAAqBC,KACxE7qE,EAAcC,EAAa4qE,GAC3B71I,EAASgrE,EAAYhrE,SAEjBiC,KAAKwe,GAAGg0H,cACXe,EAAgBj4I,KAAKyC,GACjB41I,IACH51I,EAAO24C,SAAU,KAGbi9F,GACJJ,EAAgBj4I,KAAKyC,GAElB41I,GACHE,EAAmCv4I,KAAK0E,KAAK8zI,cAAc/qE,OAwB9D,IAAK,IAAIhrE,KAAU81I,EAClBN,EAAgBj4I,KAAKyC,GAGtBiC,KAAKkC,YAAYqxI,MAMJ,iBAAiBvyI,G,mDAC9B,MAAMgoE,EAAehoE,EAAWgoE,eAChC,IAAID,EACJ,IAAK,IAAIjuE,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,IAAK,CAC7CiuE,EAAcC,EAAaluE,GAC3B,IAAI8b,EAAgBmyD,EAAYnyD,gBAChC,GAAIA,EAAe,CAClB,IAAIpC,EAASoC,EAAcrC,uBAC3B,MAAMw/H,EAAoBv/H,EAAOxZ,OAYjC,GAXIgF,KAAKwe,GAAGk0H,gBACXl+H,QAAexU,KAAKg0I,6BAA6Bx/H,IAG9CxU,KAAKwe,GAAGm0H,WAAqC,KAAxB3yI,KAAKwe,GAAGnM,cAChCmC,EAASxU,KAAKi0I,wBAAwBz/H,IAEnCxU,KAAKwe,GAAGu0H,UACXv+H,EAASxU,KAAKk0I,sBAAsB1/H,IAGjCA,EAAOxZ,QAAU+4I,EAAmB,CACvC,MAAMh2I,EAASgrE,EAAYhrE,SAC3B6Y,EAAcpV,WAAW4c,UACrB5J,EAAOxZ,OAAS,EAEnB+C,EAAOyD,SAAW,EAAA2P,aAAagjI,qBAC9B3/H,EACUzW,EAAOgW,aAOD,MAAjBhW,EAAO2C,QAAiB3C,EAAO2C,OAAO0c,OAAOrf,KAMjDiC,KAAK6+H,eAAe79H,MAGP,6BAA6BwT,G,mDAC1C,MAAM4/H,EAAc,GAmBdl7H,EAAQlZ,KAAK/B,EAAE00C,WACrB,GAAI3yC,KAAK/B,EAAE00C,WAAWy5C,kBAAoBlzE,EAAMoQ,4BACzCpQ,EAAMoQ,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAC/E,IAAI+2I,GAAc/2I,EACd0C,KAAKwe,GAAG+zH,SACX8B,GAAcA,GAEXA,GACHD,EAAY94I,KAAKqZ,SAGb,CAEN,IAAI0/H,GADUr0I,KAAKwe,GAAGm0B,WAElB3yC,KAAKwe,GAAG+zH,SACX8B,GAAcA,GAEf,IAAK,IAAIv5I,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAC9Bu5I,GACHD,EAAY94I,KAAKkZ,EAAO1Z,IAK3B,OADAuI,QAAQC,IAAI8wI,GACLA,KAGM,8BAA8BprE,G,mDAC3C,MAAM9vD,EAAQlZ,KAAK/B,EAAE00C,WAErB,GAAIz5B,EAAMkzE,kBAAoBlzE,EAAMoQ,4BAC7BpQ,EAAMoQ,sBAAsB05G,+BAA+Bh6D,EAAc,CAACD,EAAazrE,KAC7D0C,KAAKmzI,sCAAsCj2I,IAAI6rE,EAAY3mE,QAEzFpC,KAAKmzI,sCAAsC5yI,IAAIwoE,EAAY3mE,MAAO9E,UAIpE,IAAK,IAAIyrE,KAAeC,EACvBhpE,KAAKmzI,sCAAsC5yI,IAAIwoE,EAAY3mE,MAAO8W,EAAM5b,UAgBnE,wBAAwBkX,GAC/B,MAAM4/H,EAA2B,GAEjC,GAAI5/H,EAAOxZ,OAAS,EAAG,CACtB,MAAMs5I,EAAqB9/H,EAAO,GAAGc,aAAatV,KAAKwe,GAAGnM,cAGzB,UAAgBiiI,GAE9C,EAAA1vI,WAAW0N,aAAatS,KAAKwe,GAAGo0H,eAChC,CAAC5yI,KAAKwe,GAAGq0H,eAAevtI,IAEF1D,QAAS2yI,GAC1B//H,EAAO5S,QAAS+S,IACtB,MAAMW,EAAeX,EAAMW,aAAatV,KAAKwe,GAAGnM,aAKhD,IAAIgiI,GAAcr0I,KAAKw0I,YAAYl/H,EAAci/H,GAMjD,GAJIv0I,KAAKwe,GAAG+zH,SACX8B,GAAcA,GAGXA,EACH,OAAOD,EAAY94I,KAAKqZ,MAM5B,OAAOy/H,EAGA,YAAY9+H,EAA+Bi/H,GAClD,OAAQv0I,KAAKwe,GAAGi2H,2BACf,KAAKrC,EAAmB,MACvB,OAAO98H,IAAiBi/H,EACzB,KAAKnC,EAAmB,MACvB,OAAO98H,GAAgBi/H,EACxB,KAAKnC,EAAmB,KACvB,OAAO98H,EAAei/H,EACvB,KAAKnC,EAAmB,KACvB,OAAO98H,EAAei/H,EACvB,KAAKnC,EAAmB,MACvB,OAAO98H,GAAgBi/H,EACxB,KAAKnC,EAAmB,MACvB,OAAO98H,IAAiBi/H,GAInB,uBAAuBvrE,GAC9B,MAAM0rE,EAAmB,EAAAxrI,YAAYlJ,KAAKwe,GAAG3J,aAE7C,IAAK,IAAIk0D,KAAeC,EAAc,CAGrC,IAF+BhpE,KAAKmzI,sCAAsCj2I,IAAI6rE,EAAY3mE,OAE7D,CACb2mE,EAAYhrE,SAEhBgW,YAAYlX,OAAS63I,GAC/B10I,KAAKmzI,sCAAsC5yI,IAAIwoE,EAAY3mE,OAAO,KAM9D,yBAAyB4mE,GAChC,IAAK,IAAID,KAAeC,EAAc,CAGrC,IAF+BhpE,KAAKmzI,sCAAsCj2I,IAAI6rE,EAAY3mE,OAE7D,CAE5B,MAAMkT,EAAeyzD,EAAYzzD,aAAatV,KAAKwe,GAAGnM,aAMlDiD,KAJ4B,UAAgBA,GAC7CtV,KAAKwe,GAAGo0H,cACR5yI,KAAKwe,GAAGm2H,eAGV30I,KAAKmzI,sCAAsC5yI,IAAIwoE,EAAY3mE,OAAO,KAM9D,sBAAsBoS,GAC7B,MAAM4/H,EAA2B,GAYjC,OAVA,UAAY5/H,EAAQ,CAACG,EAAO7Z,KAC3B,MAAM85I,EAAU50I,KAAKmpI,MAAMU,cAAcl1H,EAAMP,YAI/C,GAFmBpU,KAAKwe,GAAG+zH,OAASqC,GAAWA,EAG9C,OAAOR,EAAY94I,KAAKqZ,KAInBy/H,EAWR,YACC,OAA2B,MAApBp0I,KAAKozI,YACTpzI,KAAKozI,YACJpzI,KAAKozI,YAAc,IAAI,EAAAppE,KACxBhqE,KAAKwe,GAAGssH,YAAY/nI,QAAQqsB,IAAIpvB,KAAKwe,GAAGw0H,UAAUjwI,QAAQ8gB,eAAe,KACzE7jB,KAAKwe,GAAGssH,YAAY/nI,QAAQoa,IAAInd,KAAKwe,GAAGw0H,UAAUjwI,QAAQ8gB,eAAe,MAIrE,cAAcklD,GACrB,MAAM8rE,EAAc9rE,EAAYv0D,SAC1BhT,EAAW,EAAA2P,aAAagjI,qBAC7BU,EACU9rE,EAAYhrE,SAASgW,aAEhC,OAAO/T,KAAKyB,cAAcD,EAAU,EAAAyH,WAAWE,SAvYjD,mB,2FCtGA,OAEA,OAEA,2BACA,4BACA,4BACA,QAEA,QAEA,OAGA,MAAM2rI,UAA4B,EAAAhsI,iBAAlC,c,oBACC,KAAAisI,kBAAoB,EAAAzyH,YAAY1jB,QAAQ,GACxC,KAAAo2I,0BAA4B,EAAA1yH,YAAY1jB,QAAQ,EAAG,CAClD+wB,WAAY,CAAColH,kBAAmB,KAEjC,KAAAE,YAAc,EAAA3yH,YAAY1jB,QAAQ,EAAG,CACpC+wB,WAAY,CAAColH,kBAAmB,KAEjC,KAAA1yH,UAAY,EAAAC,YAAY1jB,QAAQ,EAAG,CAClC+wB,WAAY,CAAColH,kBAAmB,KAEjC,KAAAxyH,MAAQ,EAAAD,YAAYxjB,MAAM,EAAG,CAC5B6wB,WAAY,CAAColH,kBAAmB,EAAG1yH,UAAW,MAGhD,MAAMtZ,EAAe,IAAI+rI,EAEzB,MAAa5a,UAAoB,EAAAt6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAE9BhhB,KAAKwe,GAAGu2H,oBACX/0I,KAAKk1I,mBAAmBl0I,GAKpBhB,KAAKwe,GAAGw2H,2BACXh1I,KAAKm1I,2BAA2Bn0I,GAE7BhB,KAAKwe,GAAGy2H,aACXj1I,KAAKo1I,aAAap0I,GAEfhB,KAAKwe,GAAG6D,WACXriB,KAAKq1I,iBAAiBr0I,IAIxBhB,KAAK6+H,eAAe79H,GAGb,mBAAmBA,G,MAC1B,IAAK,IAAIjD,KAAUiD,EAAWC,UAC7B,GAAKlD,EAAgBmrE,OAAQ,CAC5B,MAAM1nE,EAAYzD,EAAgByD,SAC5B6nE,EAAQ,WAA2B,QAAd,EAAA7nE,EAASY,aAAK,eAAEG,QAAS,GAAI,GAClDoB,EAA8B,EAAf0lE,EAAMruE,OAC3B,IAAK,IAAIqX,KAAepX,OAAO4W,KAAKrQ,EAAS0Q,YAAa,CACzD,MAAMM,EAAShR,EAAS0Q,WAAWG,GAC7BsD,EAAcnD,EAAOD,SACrB8C,EAAa,IAAIozB,aAAa9kC,EAAegS,GACnD,IAAIq2D,EAAkB,EACtB3C,EAAMznE,QAAS+7H,IACdA,EAAK/7H,QAASQ,IACb,UAAauT,EAAc7a,IAC1B,MAAMw6I,EAAgB9iI,EAAOjQ,MAAMH,EAAQuT,EAAc7a,GACzDua,EAAW22D,GAAmBspE,EAC9BtpE,GAAmB,QAItBxqE,EAASkR,aAAaL,EAAa,IAAI,EAAAw7G,gBAAgBx4G,EAAYM,IAEpE,MAAMG,EAAc,UAAanS,GACjCnC,EAASgB,SAASsT,IAKb,2BAA2B9U,GAClC,MACMu0I,EAAc,IAAI,EAAAniI,QACxB,IAAIi2D,EAAmBs0D,EAAgBnpH,EAAqBG,EAE5D3T,EAAWgoE,eAAepnE,QAASmnE,IAClC,MAAMhrE,EAASgrE,EAAYhrE,SACrB6Y,EAAgBmyD,EAAYnyD,gBAClC,GAAK7Y,EAAgBmrE,OAAQ,CAC5BG,EAAQzyD,EAAcyyD,QACjBzyD,EAAcszD,WATD,gBAUjBtzD,EAActD,mBAVG,cAU6B,GAAI,GAGnD,IAAK,IAAIkiI,EAAK,EAAGA,EAAKnsE,EAAMruE,OAAQw6I,IAAM,CACzC7X,EAAOt0D,EAAMmsE,GACb7X,EAAKj0D,OAAO6rE,GAEZ/gI,EAASmpH,EAAKnpH,OACd,IAAK,IAAIihI,EAAK,EAAGA,EAAKjhI,EAAOxZ,OAAQy6I,IACpC9gI,EAAQH,EAAOihI,GACf9gI,EAAMsuH,iBApBU,cAoBoBsS,OAOjC,aAAav0I,GAGpBA,EAAWgoE,eAAepnE,QAASmnE,IAClC,MAAMhrE,EAASgrE,EAAYhrE,SACrB6Y,EAAgBmyD,EAAYnyD,gBAClC,GAAK7Y,EAAgBmrE,OAAQ,CAC5B,MAAMG,EAAQzyD,EAAcyyD,QAGvBzyD,EAAcszD,WATD,YAUjBtzD,EAActD,mBAVG,UAU6B,GAAI,GAGnD,IAAK,IAAIxY,EAAI,EAAGA,EAAIuuE,EAAMruE,OAAQF,IAAK,CACtC,MACM0Z,EADO60D,EAAMvuE,GACC0Z,OACpB,IAAK,IAAIxY,EAAI,EAAGA,EAAIwY,EAAOxZ,OAAQgB,IAAK,CACzBwY,EAAOxY,GACfinI,iBAlBU,UAkBoBnoI,QAOjC,iBAAiBkG,GACxB,MACMu0I,EAAc,IAAI,EAAAniI,QAClBs4D,EAAe,IAAI,EAAAt4D,QACnBmP,EAAQviB,KAAKwe,GAAG+D,MACtB,IAAI8mD,EAAmBs0D,EAAgBnpH,EAAqBG,EAE5D3T,EAAWgoE,eAAepnE,QAASmnE,IAClC,MAAMhrE,EAASgrE,EAAYhrE,SACrB6Y,EAAgBmyD,EAAYnyD,gBAClC,GAAK7Y,EAAgBmrE,OAAQ,CAC5BG,EAAQzyD,EAAcyyD,QACjBzyD,EAAcszD,WAXD,aAYjBtzD,EAActD,mBAZG,WAY6B,GAAI,GAGnD,IAAK,IAAIkiI,EAAK,EAAGA,EAAKnsE,EAAMruE,OAAQw6I,IAAM,CACzC7X,EAAOt0D,EAAMmsE,GACb7X,EAAKj0D,OAAO6rE,GAEZ/gI,EAASmpH,EAAKnpH,OACd,IAAK,IAAIihI,EAAK,EAAGA,EAAKjhI,EAAOxZ,OAAQy6I,IAAM,CAC1C9gI,EAAQH,EAAOihI,GACf,MAAMrhI,EAAWO,EAAMP,WACvBs3D,EAAapmE,EAAI8O,EAAS9O,EAAIid,EAAQgzH,EAAYjwI,GAAK,EAAIid,GAC3DmpD,EAAanmE,EAAI6O,EAAS7O,EAAIgd,EAAQgzH,EAAYhwI,GAAK,EAAIgd,GAC3DmpD,EAAalmE,EAAI4O,EAAS5O,EAAI+c,EAAQgzH,EAAY/vI,GAAK,EAAI+c,GAC3D5N,EAAMsuH,iBA1BU,WA0BoBv3D,SA/I1C,iB,oFC/BA,E,KAAA,uBAGA,QAGA,SAEA,OAGA,MAAMgqE,UAA4B,EAAA5sI,iBAAlC,c,oBACC,KAAAy5B,IAAM,EAAAjgB,YAAYhjB,OAAO,GAAI,CAC5BojC,eAAgB,CAACC,UAAW,YAC5BgzG,wBAAwB,IAEzB,KAAA/yG,OAAS,EAAAtgB,YAAY3jB,OAAO,KAAM,CACjCyZ,SAAU,CAAC3U,EAAoByV,KAC9BihH,EAAYt3F,sBAAsBp/B,OAIrC,MAAMsF,EAAe,IAAI2sI,EAEzB,MAAavb,UAAoB,EAAAv6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,mBAKA,OACgB,IAAI,EAAA6sI,mBAAmB51I,KAAKwe,GAAG+jB,KACvCixC,KAAKxzE,KAAKgyI,SAASn0I,KAAKmC,MAAOA,KAAKiyI,UAAUp0I,KAAKmC,OAGnD,SAASiB,GAChBoC,QAAQC,IAAI,UAAWrC,GACvBA,EAAU,UAAeA,GACzBjB,KAAKkC,YAAYjB,GAEV,UAAUa,GACjB9B,KAAKgyB,OAAO9T,MAAM3d,IAAI,gCAAgCP,KAAKwe,GAAG+jB,QAAQzgC,MAYvE,6BAA6B2B,GAC5BA,EAAKygC,wBAEE,wBAIPlkC,KAAK/B,EAAEskC,IAAIvqB,aAzCb,iB,2FCxBA,SACA,QAQA,OACA,QACA,SAgCA,2BAGC,YACSuqB,GAAA,KAAAA,MAER,MAAM5zB,EAAW3O,KAAKuiC,IAAI3zB,MAAM,KAChC5O,KAAK0uG,IAAM//F,EAASA,EAAS3T,OAAS,GAAG0jG,cACxB,QAAb1+F,KAAK0uG,MACR1uG,KAAK0uG,IAAM//F,EAASA,EAAS3T,OAAS,IAOxC,KAAK66I,EAA2CC,GAC/C91I,KAAK+1I,YACHx/G,KAAMx4B,IACN83I,EAAW93I,KAEXkzE,MAAO/yD,IACP43H,EAAS53H,KAIJ,YACP,OAAO,IAAIiK,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5C,MAAMka,EAAMviC,KAAKuiC,IAEjB,GAAgB,QAAZviC,KAAK0uG,IACR79B,MAAMtuC,GACJhM,KAAYu6C,GAAa,EAAD,0CACxB,MAAMt2E,QAAas2E,EAASC,QACT,IAAI,EAAA67D,cACZx+H,MAAM5T,EAAOw7I,IACvB5tH,EAAQpoB,KAAKi2I,gBAAgBD,EAAIz0H,SAAS,WAG3C0vD,MAAO/yD,IACPmK,EAAOnK,SAEH,CACN,MAAM01D,QAAe5zE,KAAK8uG,iBAC1B,GAAIl7B,EACHA,EAAOJ,KACNjxC,EACCxkC,IACAsF,QAAQC,IAAIvF,GACZiC,KAAKi2I,gBAAgBl4I,GAAQw4B,KAAM2/G,IAClC9tH,EAAQ8tH,WAGV3xI,EACCg5B,IACAlV,EAAOkV,SAGH,CACN,MAAMA,EAAgB,yBAAyBv9B,KAAK0uG,OACpDrmF,EAAOkV,SA0BG,gBAAgBx/B,G,mDAK7B,GAAIA,aAAkB,EAAAyN,SACrB,OAAQxL,KAAK0uG,KACZ,IAAK,OAEL,IAAK,MACJ,OAAO1uG,KAAKm2I,oBAAoBp4I,GAGjC,IAAK,MAEL,IAAK,OAEL,QACC,MAAO,CAACA,GAGX,GAAIA,aAAkB,EAAA+W,eACrB,OAAQ9U,KAAK0uG,KACZ,IAAK,MACJ,OAAO1uG,KAAKo2I,mBAAmBr4I,GAChC,QACC,MAAO,CAAC,IAAI,EAAAwL,KAAKxL,IAKpB,OAAQiC,KAAK0uG,KACZ,IAAK,OAEL,IAAK,MACJ,OAAO1uG,KAAKm2I,oBAAoBp4I,GACjC,QACC,MAAO,GAET,MAAO,MAGA,oBAAoBs4I,GAC3B,MAAMjzI,EAAQizI,EAAY,MAI1B,OAHAjzI,EAAM2jD,WAAasvF,EAAKtvF,WAExB1jD,QAAQC,IAAI,UAAW,CAACF,IACjB,CAACA,GAED,mBAAmB5B,GAC1B,MAAMmtC,EAAM,IAAI,EAAAzkC,oBAGhB,MAAO,CAFM,IAAI,EAAAX,KAAK/H,EAAUmtC,IAK3B,iB,mDACL,OAAQ3uC,KAAK0uG,IAAIhQ,eAChB,IAAK,OACJ,OAAO1+F,KAAKs2I,kBACb,IAAK,MACJ,OAAOt2I,KAAKu2I,iBACb,IAAK,MACJ,OAAOv2I,KAAKw2I,iBACb,IAAK,MACJ,OAAOx2I,KAAKy2I,qBAIT,kB,mDAIL,MAAM,WAACC,SAAc,4CAAa,OAClC,OAAO,IAAIA,KAEN,iB,mDACL,MAAM,WAACA,SAAc,4CAAa,QAC5B,YAACrkE,SAAe,4CAAa,OAE7BuB,EAAS,IAAI8iE,EACbC,EAAe,IAAItkE,EAOzB,OAJAskE,EAAa1jE,eAFQ,8BAGrB0jE,EAAazjE,iBAAiB,CAAC30E,KAAM,OACrCq1E,EAAOgjE,eAAeD,GAEf/iE,KAEF,iB,mDAEL,MAAM,YAACvB,SAAe,4CAAa,OAI7BskE,EAAe,IAAItkE,EAOzB,OAJAskE,EAAa1jE,eAFQ,yBAGrB0jE,EAAazjE,iBAAiB,CAAC30E,KAAM,OAG9Bo4I,KAEF,iB,mDACL,MAAM,UAACE,SAAa,4CAAa,OACjC,OAAO,IAAIA,Q,6BC5Ob,mJAiBIA,EAAY,WAGf,IAAIC,EAAiB,gBAEjBC,EAA2B,WAE3BC,EAAuB,WAEvBC,EAAkB,WAEtB,SAASC,IAER,IAAIr6H,EAAQ,CACX5b,QAAS,GACTlD,OAAQ,GAERo5I,SAAU,GACVtvF,QAAS,GACTynB,OAAQ,GACRxnB,IAAK,GAELp+C,UAAW,GACX0tI,kBAAmB,GAEnBC,YAAa,SAAWx6I,EAAMy6I,GAI7B,GAAKt3I,KAAKjC,SAA0C,IAAhCiC,KAAKjC,OAAOu5I,gBAI/B,OAFAt3I,KAAKjC,OAAOlB,KAAOA,OACnBmD,KAAKjC,OAAOu5I,iBAAwC,IAApBA,GAKjC,IAAIC,EAAqBv3I,KAAKjC,QAAiD,mBAAhCiC,KAAKjC,OAAOy5I,gBAAiCx3I,KAAKjC,OAAOy5I,uBAAoBjzI,EA8H5H,GA5HKvE,KAAKjC,QAA2C,mBAA1BiC,KAAKjC,OAAO05I,WAEtCz3I,KAAKjC,OAAO05I,WAAW,GAIxBz3I,KAAKjC,OAAS,CACblB,KAAMA,GAAQ,GACdy6I,iBAAuC,IAApBA,EAEnB91I,SAAU,CACT21I,SAAU,GACVtvF,QAAS,GACTynB,OAAQ,GACRxnB,IAAK,IAENp+C,UAAW,GACXguI,QAAQ,EAERC,cAAe,SAAW96I,EAAMi5E,GAE/B,IAAI8hE,EAAW53I,KAAKy3I,WAAW,GAI1BG,IAAcA,EAASC,WAAaD,EAASE,YAAc,IAE/D93I,KAAK0J,UAAUxN,OAAQ07I,EAASx1I,MAAO,GAIxC,IAAIe,EAAW,CACdf,MAAOpC,KAAK0J,UAAU1O,OACtB6B,KAAMA,GAAQ,GACdk7I,OAAU1oG,MAAM2oG,QAASliE,IAAeA,EAAU96E,OAAS,EAAI86E,EAAWA,EAAU96E,OAAS,GAAM,GACnG08I,YAAuBnzI,IAAbqzI,EAAyBA,EAASF,OAAS13I,KAAK03I,OAC1DO,gBAA2B1zI,IAAbqzI,EAAyBA,EAASM,SAAW,EAC3DA,UAAY,EACZJ,YAAc,EACdD,WAAW,EAEX90I,MAAO,SAAWX,GAEjB,IAAI+1I,EAAS,CACZ/1I,MAA0B,iBAAVA,EAAqBA,EAAQpC,KAAKoC,MAClDvF,KAAMmD,KAAKnD,KACXk7I,OAAQ/3I,KAAK+3I,OACbL,OAAQ13I,KAAK03I,OACbO,WAAY,EACZC,UAAY,EACZJ,YAAc,EACdD,WAAW,GAGZ,OADAM,EAAOp1I,MAAQ/C,KAAK+C,MAAMlF,KAAMs6I,GACzBA,IAOT,OAFAn4I,KAAK0J,UAAUpO,KAAM6H,GAEdA,GAIRq0I,gBAAiB,WAEhB,GAAKx3I,KAAK0J,UAAU1O,OAAS,EAE5B,OAAOgF,KAAK0J,UAAW1J,KAAK0J,UAAU1O,OAAS,IAQjDy8I,UAAW,SAAW1vB,GAErB,IAAIqwB,EAAoBp4I,KAAKw3I,kBAU7B,GATKY,IAAsD,IAAjCA,EAAkBF,WAE3CE,EAAkBF,SAAWl4I,KAAKwB,SAAS21I,SAASn8I,OAAS,EAC7Do9I,EAAkBN,WAAaM,EAAkBF,SAAWE,EAAkBH,WAC9EG,EAAkBP,WAAY,GAK1B9vB,GAAO/nH,KAAK0J,UAAU1O,OAAS,EAEnC,IAAM,IAAIq9I,EAAKr4I,KAAK0J,UAAU1O,OAAS,EAAGq9I,GAAM,EAAGA,IAE7Cr4I,KAAK0J,UAAW2uI,GAAKP,YAAc,GAEvC93I,KAAK0J,UAAUxN,OAAQm8I,EAAI,GAkB9B,OATKtwB,GAAiC,IAA1B/nH,KAAK0J,UAAU1O,QAE1BgF,KAAK0J,UAAUpO,KAAM,CACpBuB,KAAM,GACN66I,OAAQ13I,KAAK03I,SAKRU,IAWJb,GAAoBA,EAAiB16I,MAA0C,mBAA3B06I,EAAiBx0I,MAAuB,CAEhG,IAAIu1I,EAAWf,EAAiBx0I,MAAO,GACvCu1I,EAAST,WAAY,EACrB73I,KAAKjC,OAAO2L,UAAUpO,KAAMg9I,GAI7Bt4I,KAAKiB,QAAQ3F,KAAM0E,KAAKjC,SAIzBw6I,SAAU,WAEJv4I,KAAKjC,QAA2C,mBAA1BiC,KAAKjC,OAAO05I,WAEtCz3I,KAAKjC,OAAO05I,WAAW,IAMzBe,iBAAkB,SAAWl7I,EAAOyzG,GAEnC,IAAI3uG,EAAQ0L,SAAUxQ,EAAO,IAC7B,OAAsD,GAA7C8E,GAAS,EAAIA,EAAQ,EAAIA,EAAQ2uG,EAAM,IAIjD0nC,iBAAkB,SAAWn7I,EAAOyzG,GAEnC,IAAI3uG,EAAQ0L,SAAUxQ,EAAO,IAC7B,OAAsD,GAA7C8E,GAAS,EAAIA,EAAQ,EAAIA,EAAQ2uG,EAAM,IAIjD2nC,aAAc,SAAWp7I,EAAOyzG,GAE/B,IAAI3uG,EAAQ0L,SAAUxQ,EAAO,IAC7B,OAAsD,GAA7C8E,GAAS,EAAIA,EAAQ,EAAIA,EAAQ2uG,EAAM,IAIjD4nC,UAAW,SAAWzoI,EAAGC,EAAGxT,GAE3B,IAAI4b,EAAMvY,KAAKm3I,SACX3/B,EAAMx3G,KAAKjC,OAAOyD,SAAS21I,SAE/B3/B,EAAIl8G,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,IAC/CsnG,EAAIl8G,KAAMid,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,IAC/CqnG,EAAIl8G,KAAMid,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,KAIhDi8I,eAAgB,SAAW1oI,GAE1B,IAAIqI,EAAMvY,KAAKm3I,SACLn3I,KAAKjC,OAAOyD,SAAS21I,SAE3B77I,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,KAIhD2oI,cAAe,SAAW3oI,GAEzB,IAAIqI,EAAMvY,KAAKm3I,SACLn3I,KAAKjC,OAAOyD,SAAS21I,SAE3B77I,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,KAIhD4oI,UAAW,SAAW5oI,EAAGC,EAAGxT,GAE3B,IAAI4b,EAAMvY,KAAK6nD,QACX2vD,EAAMx3G,KAAKjC,OAAOyD,SAASqmD,QAE/B2vD,EAAIl8G,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,IAC/CsnG,EAAIl8G,KAAMid,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,IAC/CqnG,EAAIl8G,KAAMid,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,KAIhDo8I,SAAU,SAAW7oI,EAAGC,EAAGxT,GAE1B,IAAI4b,EAAMvY,KAAKsvE,OACXkoC,EAAMx3G,KAAKjC,OAAOyD,SAAS8tE,OAE/BkoC,EAAIl8G,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,IAC/CsnG,EAAIl8G,KAAMid,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,IAC/CqnG,EAAIl8G,KAAMid,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,KAIhDq8I,MAAO,SAAW9oI,EAAGC,EAAGxT,GAEvB,IAAI4b,EAAMvY,KAAK8nD,IACX0vD,EAAMx3G,KAAKjC,OAAOyD,SAASsmD,IAE/B0vD,EAAIl8G,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,IACjCsnG,EAAIl8G,KAAMid,EAAKpI,EAAI,GAAKoI,EAAKpI,EAAI,IACjCqnG,EAAIl8G,KAAMid,EAAK5b,EAAI,GAAK4b,EAAK5b,EAAI,KAIlCs8I,UAAW,SAAW/oI,GAErB,IAAIqI,EAAMvY,KAAK8nD,IACL9nD,KAAKjC,OAAOyD,SAASsmD,IAE3BxsD,KAAMid,EAAKrI,EAAI,GAAKqI,EAAKrI,EAAI,KAIlCgpI,QAAS,SAAWhpI,EAAGC,EAAGxT,EAAGw8I,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAEhD,IAAIC,EAAOz5I,KAAKm3I,SAASn8I,OAErB+2C,EAAK/xC,KAAKw4I,iBAAkBtoI,EAAGupI,GAC/BC,EAAK15I,KAAKw4I,iBAAkBroI,EAAGspI,GAC/BE,EAAK35I,KAAKw4I,iBAAkB77I,EAAG88I,GAUnC,GARAz5I,KAAK24I,UAAW5mG,EAAI2nG,EAAIC,GAEnB35I,KAAKsvE,OAAOt0E,OAAS,GAEzBgF,KAAK+4I,SAAUhnG,EAAI2nG,EAAIC,QAIZp1I,IAAP40I,GAA2B,KAAPA,EAAY,CAEpC,IAAIS,EAAQ55I,KAAK8nD,IAAI9sD,OACrB+2C,EAAK/xC,KAAK04I,aAAcS,EAAIS,GAC5BF,EAAK15I,KAAK04I,aAAcU,EAAIQ,GAC5BD,EAAK35I,KAAK04I,aAAcW,EAAIO,GAC5B55I,KAAKg5I,MAAOjnG,EAAI2nG,EAAIC,GAIrB,QAAYp1I,IAAP+0I,GAA2B,KAAPA,EAAY,CAGpC,IAAIO,EAAO75I,KAAK6nD,QAAQ7sD,OACxB+2C,EAAK/xC,KAAKy4I,iBAAkBa,EAAIO,GAEhCH,EAAKJ,IAAOC,EAAKxnG,EAAK/xC,KAAKy4I,iBAAkBc,EAAIM,GACjDF,EAAKL,IAAOE,EAAKznG,EAAK/xC,KAAKy4I,iBAAkBe,EAAIK,GAEjD75I,KAAK84I,UAAW/mG,EAAI2nG,EAAIC,KAM1BG,iBAAkB,SAAW3C,GAE5Bn3I,KAAKjC,OAAOyD,SAASjD,KAAO,SAI5B,IAFA,IAAIk7I,EAAOz5I,KAAKm3I,SAASn8I,OAEf++I,EAAK,EAAGt9I,EAAI06I,EAASn8I,OAAQ++I,EAAKt9I,EAAGs9I,IAE9C/5I,KAAK44I,eAAgB54I,KAAKw4I,iBAAkBrB,EAAU4C,GAAMN,KAM9DO,gBAAiB,SAAW7C,EAAUrvF,GAErC9nD,KAAKjC,OAAOyD,SAASjD,KAAO,OAK5B,IAHA,IAAIk7I,EAAOz5I,KAAKm3I,SAASn8I,OACrB4+I,EAAQ55I,KAAK8nD,IAAI9sD,OAEX++I,EAAK,EAAGt9I,EAAI06I,EAASn8I,OAAQ++I,EAAKt9I,EAAGs9I,IAE9C/5I,KAAK64I,cAAe74I,KAAKw4I,iBAAkBrB,EAAU4C,GAAMN,IAItD,IAAIQ,EAAM,EAAhB,IAAmBx9I,EAAIqrD,EAAI9sD,OAAQi/I,EAAMx9I,EAAGw9I,IAE3Cj6I,KAAKi5I,UAAWj5I,KAAK04I,aAAc5wF,EAAKmyF,GAAOL,MAUlD,OAFA/8H,EAAMw6H,YAAa,IAAI,GAEhBx6H,EAMR,SAASg6H,EAAWvkE,GAEnB,IAAOl3E,KAAM4E,KAAMsyE,GAEnBtyE,KAAK0J,UAAY,KAqalB,OAjaAmtI,EAAU37I,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEvE6Y,YAAa8iI,EAEbrjE,KAAM,SAAWjxC,EAAKkxC,EAAQC,EAAYC,GAEzC,IAAIlX,EAAQz8D,KAER4zE,EAAS,IAAI,IAAYnX,EAAM6V,SACnCsB,EAAOC,QAAS7zE,KAAK4Z,MACrBg6D,EAAOJ,KAAMjxC,GAAK,SAAW23G,GAE5BzmE,EAAQhX,EAAMruD,MAAO8rI,MAEnBxmE,EAAYC,IAIhBwmE,aAAc,SAAWzwI,GAIxB,OAFA1J,KAAK0J,UAAYA,EAEV1J,MAIRoO,MAAO,SAAW8rI,GAEjB,IAAIr9H,EAAQ,IAAIq6H,GAEkB,IAA7BgD,EAAK5wI,QAAS,UAGlB4wI,EAAOA,EAAKjsI,QAAS,QAAS,QAIG,IAA7BisI,EAAK5wI,QAAS,UAGlB4wI,EAAOA,EAAKjsI,QAAS,QAAS,KAY/B,IARA,IAAIqlB,EAAQ4mH,EAAKtrI,MAAO,MACpBipD,EAAO,GAAIuiF,EAAgB,GAE3Bv+I,EAAS,GAGTw+I,EAAoC,kBAAhB,GAAGA,SAEjBv/I,EAAI,EAAG2B,EAAI62B,EAAMt4B,OAAQF,EAAI2B,EAAG3B,IAQzC,GANA+8D,EAAOvkC,EAAOx4B,GAMM,KAJpB+8D,EAAOwiF,EAAWxiF,EAAKwiF,WAAaxiF,EAAKyiF,QAEvBt/I,QAOK,OAHvBo/I,EAAgBviF,EAAK06C,OAAQ,IAK7B,GAAuB,MAAlB6nC,EAAwB,CAE5B,IAAI5/I,EAAOq9D,EAAKjpD,MAAO,OAEvB,OAASpU,EAAM,IAEd,IAAK,IACJqiB,EAAMs6H,SAAS77I,KACdo5D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,KAEdA,EAAKQ,QAAU,GAEnB6hB,EAAMyyD,OAAOh0E,KACZo5D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,KAKpB,MACD,IAAK,KACJqiB,EAAMgrC,QAAQvsD,KACbo5D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,KAEnB,MACD,IAAK,KACJqiB,EAAMirC,IAAIxsD,KACTo5D,WAAYl6D,EAAM,IAClBk6D,WAAYl6D,EAAM,WAMf,GAAuB,MAAlB4/I,EAAwB,CAQnC,IANA,IACIG,EADW1iF,EAAKrpD,OAAQ,GAAI8rI,OACN1rI,MAAO,OAC7B4rI,EAAe,GAITx+I,EAAI,EAAG+sD,EAAKwxF,EAAWv/I,OAAQgB,EAAI+sD,EAAI/sD,IAAO,CAEvD,IAAIy+I,EAASF,EAAYv+I,GAEzB,GAAKy+I,EAAOz/I,OAAS,EAAI,CAExB,IAAI0/I,EAAcD,EAAO7rI,MAAO,KAChC4rI,EAAal/I,KAAMo/I,IAQrB,IAAIC,EAAKH,EAAc,GAEvB,IAAUx+I,EAAI,EAAG+sD,EAAKyxF,EAAax/I,OAAS,EAAGgB,EAAI+sD,EAAI/sD,IAAO,CAE7D,IAAI8vE,EAAK0uE,EAAcx+I,GACnB+vE,EAAKyuE,EAAcx+I,EAAI,GAE3B6gB,EAAMq8H,QACLyB,EAAI,GAAK7uE,EAAI,GAAKC,EAAI,GACtB4uE,EAAI,GAAK7uE,EAAI,GAAKC,EAAI,GACtB4uE,EAAI,GAAK7uE,EAAI,GAAKC,EAAI,UAKlB,GAAuB,MAAlBquE,EAAwB,CAEnC,IAAIQ,EAAY/iF,EAAK7pD,UAAW,GAAIssI,OAAO1rI,MAAO,KAC9CisI,EAAe,GAAIC,EAAU,GAEjC,IAA+B,IAA1BjjF,EAAKvuD,QAAS,KAElBuxI,EAAeD,OAIf,IAAM,IAAIG,EAAK,EAAGC,EAAOJ,EAAU5/I,OAAQ+/I,EAAKC,EAAMD,IAAQ,CAE7D,IAAIE,EAAQL,EAAWG,GAAKnsI,MAAO,KAEf,KAAfqsI,EAAO,IAAaJ,EAAav/I,KAAM2/I,EAAO,IAC/B,KAAfA,EAAO,IAAaH,EAAQx/I,KAAM2/I,EAAO,IAKhDp+H,EAAMm9H,gBAAiBa,EAAcC,QAE/B,GAAuB,MAAlBV,EAAwB,CAEnC,IACIc,EADWrjF,EAAKrpD,OAAQ,GAAI8rI,OACP1rI,MAAO,KAEhCiO,EAAMi9H,iBAAkBoB,QAElB,GAAkD,QAA3Cr/I,EAASi7I,EAAeqE,KAAMtjF,IAAoB,CAQ/D,IAAIh7D,GAAS,IAAMhB,EAAQ,GAAI2S,OAAQ,GAAI8rI,QAAS9rI,OAAQ,GAE5DqO,EAAMw6H,YAAax6I,QAEb,GAAKm6I,EAAqBppI,KAAMiqD,GAItCh7C,EAAM9e,OAAO45I,cAAe9/E,EAAK7pD,UAAW,GAAIssI,OAAQz9H,EAAMu6H,wBAExD,GAAKL,EAAyBnpI,KAAMiqD,GAI1Ch7C,EAAMu6H,kBAAkB97I,KAAMu8D,EAAK7pD,UAAW,GAAIssI,aAE5C,GAAKrD,EAAgBrpI,KAAMiqD,GAKjCx0D,QAAQiE,KAAM,6GAER,GAAuB,MAAlB8yI,EAAwB,CAwBnC,IAtBAv+I,EAASg8D,EAAKjpD,MAAO,MAsBT5T,OAAS,EAAI,CAExB,IAAIsC,EAAQzB,EAAQ,GAAIy+I,OAAO57C,cAC/B7hF,EAAM9e,OAAO25I,OAAqB,MAAVp6I,GAA2B,QAAVA,OAKzCuf,EAAM9e,OAAO25I,QAAS,GAGnBv0I,GAAW0Z,EAAM9e,OAAOy5I,qBACZr0I,GAASu0I,OAAS76H,EAAM9e,OAAO25I,YAEzC,CAGN,GAAc,OAAT7/E,EAAgB,SAErBx0D,QAAQiE,KAAM,sCAAwCuwD,EAAO,KAM/Dh7C,EAAM07H,WAEN,IAAIx2I,EAAY,IAAI,QACpBA,EAAUq1I,kBAAoB,GAAG52B,OAAQ3jG,EAAMu6H,mBAE/C,IAAUt8I,EAAI,EAAG2B,EAAIogB,EAAM5b,QAAQjG,OAAQF,EAAI2B,EAAG3B,IAAO,CAExD,IAAIiD,EAAS8e,EAAM5b,QAASnG,GACxB0G,EAAWzD,EAAOyD,SAClBkI,EAAY3L,EAAO2L,UACnBy/D,EAA6B,SAAlB3nE,EAASjD,KACpB6qE,EAA+B,WAAlB5nE,EAASjD,KACtB68I,GAAkB,EAGtB,GAAkC,IAA7B55I,EAAS21I,SAASn8I,OAAvB,CAEA,IAAIqgJ,EAAiB,IAAI,iBAEzBA,EAAe3oI,aAAc,WAAY,IAAI,yBAAwBlR,EAAS21I,SAAU,IAEnF31I,EAASqmD,QAAQ7sD,OAAS,EAE9BqgJ,EAAe3oI,aAAc,SAAU,IAAI,yBAAwBlR,EAASqmD,QAAS,IAIrFwzF,EAAezpI,uBAIXpQ,EAAS8tE,OAAOt0E,OAAS,IAE7BogJ,GAAkB,EAClBC,EAAe3oI,aAAc,QAAS,IAAI,yBAAwBlR,EAAS8tE,OAAQ,KAI/E9tE,EAASsmD,IAAI9sD,OAAS,GAE1BqgJ,EAAe3oI,aAAc,KAAM,IAAI,yBAAwBlR,EAASsmD,IAAK,IAQ9E,IAFA,IA8DIwzF,EA9DAC,EAAmB,GAEblD,EAAK,EAAGmD,GAAQ9xI,EAAU1O,OAAQq9I,EAAKmD,GAAOnD,IAAQ,CAE/D,IACIoD,IADAC,GAAiBhyI,EAAW2uI,IACEx7I,KAAO,IAAM6+I,GAAehE,OAAS,IAAM0D,EACzEj4I,GAAW0Z,EAAMnT,UAAW+xI,IAEhC,GAAwB,OAAnBz7I,KAAK0J,UAKT,GAHAvG,GAAWnD,KAAK0J,UAAU/L,OAAQ+9I,GAAe7+I,OAG5CssE,IAAUhmE,IAAgBA,cAAoB,qBAO5C,GAAKimE,GAAYjmE,MAAgBA,cAAoB,kBAAmB,CAE9E,IAAIw4I,GAAiB,IAAI,iBAAgB,CAAEnxI,KAAM,GAAI2/G,iBAAiB,IACtE,WAASjvH,UAAU0oB,KAAKxoB,KAAMugJ,GAAgBx4I,IAC9Cw4I,GAAe9xI,MAAM+Z,KAAMzgB,GAAS0G,OACpC8xI,GAAe32I,IAAM7B,GAAS6B,IAC9B7B,GAAWw4I,QAb6D,CAExE,IAAIC,GAAe,IAAI,oBACvB,WAAS1gJ,UAAU0oB,KAAKxoB,KAAMwgJ,GAAcz4I,IAC5Cy4I,GAAa/xI,MAAM+Z,KAAMzgB,GAAS0G,OAClC1G,GAAWy4I,QAcKr3I,IAAbpB,MAIHA,GAFIgmE,EAEO,IAAI,oBAEJC,EAEA,IAAI,iBAAgB,CAAE5+D,KAAM,EAAG2/G,iBAAiB,IAIhD,IAAI,KAIPttH,KAAO6+I,GAAe7+I,KAC/BsG,GAAS04I,aAAcH,GAAehE,OACtCv0I,GAASiH,aAAegxI,EAExBv+H,EAAMnT,UAAW+xI,IAAiBt4I,IAInCo4I,EAAiBjgJ,KAAM6H,IAQxB,GAAKo4I,EAAiBvgJ,OAAS,EAAI,CAElC,IAAUq9I,EAAK,EAAGmD,GAAQ9xI,EAAU1O,OAAQq9I,EAAKmD,GAAOnD,IAAQ,CAE/D,IAAIqD,GAAiBhyI,EAAW2uI,GAChCgD,EAAelxF,SAAUuxF,GAAezD,WAAYyD,GAAe5D,WAAYO,GAM/EiD,EAFInyE,EAEG,IAAI,eAAckyE,EAAgBE,GAE9BnyE,EAEJ,IAAI,SAAQiyE,EAAgBE,GAI5B,IAAI,OAAMF,EAAgBE,QAQjCD,EAFInyE,EAEG,IAAI,eAAckyE,EAAgBE,EAAkB,IAEhDnyE,EAEJ,IAAI,SAAQiyE,EAAgBE,EAAkB,IAI9C,IAAI,OAAMF,EAAgBE,EAAkB,IAMrDD,EAAKz+I,KAAOkB,EAAOlB,KAEnBkF,EAAUob,IAAKm+H,IAIhB,OAAOv5I,KAMF80I,EApxBQ,I,8ECjBhB,cAGA,QACA,OAGA,OACA,QAGA,MAAMiF,UAA4B,EAAAhzI,iBAAlC,c,oBACC,KAAAizI,KAAO,EAAAz5H,YAAYxjB,MAAM,GAAK,CAC7B4lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAI+yI,EAEzB,MAAa1hB,UAAoB,EAAAx6H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,+BACC,MAAO,CAAC,2BAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAE5BovG,EAAc,GACpB,IAAInqE,EACJ,IAAK,IAAI8iB,KAAe/nE,EAAWgoE,eAClC/iB,EAAajmD,KAAKg8I,kBAAkBjzE,GAChC9iB,GACHmqE,EAAY90H,KAAK2qD,GAInBjmD,KAAKkC,YAAYkuH,GAGV,kBAAkBrnD,GACzB,MAAMhrE,EAASgrE,EAAYhrE,SAC3B,IAAKA,EACJ,OAED,MAAMyW,EAASu0D,EAAYv0D,SAErBynI,EAAYj8I,KAAKwe,GAAGu9H,KACpBG,EAA8C,GACpD,IAAK,IAAIvnI,KAASH,EAAQ,CACzB,MAAMJ,EAAWO,EAAMP,WAMjBxW,EALmB,IAAI,EAAAwV,QAC5B5G,KAAKs3E,MAAM1vE,EAAS9O,EAAI22I,GACxBzvI,KAAKs3E,MAAM1vE,EAAS7O,EAAI02I,GACxBzvI,KAAKs3E,MAAM1vE,EAAS5O,EAAIy2I,IAEIl3I,UAAUG,KAAK,KAC5Cg3I,EAAmBt+I,GAAOs+I,EAAmBt+I,IAAQ,GACrDs+I,EAAmBt+I,GAAKtC,KAAKqZ,GAG9B,MAAMy/H,EAA2B,GAMjC,OALAn5I,OAAO4W,KAAKqqI,GAAoBt6I,QAAShE,IACxCw2I,EAAY94I,KAAK4gJ,EAAmBt+I,GAAK,MAGzCG,EAAgByD,SAAS4c,UACtBg2H,EAAYp5I,OAAS,GACvB+C,EAAgByD,SAAW,EAAA2P,aAAagjI,qBACxCC,EACUr2I,EAAOgW,aAEXhW,QALR,GAzDF,iB,8ECnBA,aACA,QACA,QACA,QAEA,SAEMivI,EAAa,IAAI,EAAA55H,QAAQ,EAAG,EAAG,GAErC,OACA,MAAM+oI,UAAgC,EAAArzI,iBAAtC,c,oBACC,KAAA0B,KAAO,EAAA8X,YAAY/iB,QAAQ,CAAC,EAAG,IAC/B,KAAA68I,eAAiB,EAAA95H,YAAYxjB,MAAM,IACnC,KAAAy5H,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACvC,KAAA68I,YAAc,EAAA/5H,YAAY1jB,QAAQ,IAInC,MAAMmK,EAAe,IAAIozI,EAEzB,MAAa9hB,UAAwB,EAAAz6H,aAArC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAJ9B,cACC,MAAO,WAKR,mBAEA,OACC,MACM5iB,EADY,IAAI,EAAA86I,6BAA6Bt8I,KAAKwe,GAAGhU,KAAMxK,KAAKwe,GAAG49H,eAAgBp8I,KAAKwe,GAAG69H,aACtE55D,UAE3BziF,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WAE/Dv4H,KAAKwe,GAAG69H,YACXr8I,KAAKgrI,aAAaxpI,EAAU,EAAAiB,aAAaC,YAAYyG,QAErDnJ,KAAKgrI,aAAaxpI,IAnBrB,qB,2FCpBA,OACA,OAEMirB,EAAQ,CAACohG,gBADf,KACeA,gBAAiB/4G,eAAA,EAAAA,eAAgB+hB,QAAA,EAAAA,SAChD,2BAGA,qCACC,YACS0lH,EACAC,EACAC,GAFA,KAAAF,cACA,KAAAC,wBACA,KAAAC,qBAGT,UACC,MAAMC,EAAc18I,KAAKw8I,sBACnBG,EAAiC,GAAdD,EACnBlvH,EACFkvH,EADElvH,EAEFhhB,KAAKkiB,IAAIliB,KAAKiZ,GAAK,GAAKzlB,KAAKw8I,sBAE3B/uH,EACFjhB,KAAKohB,MAAM5tB,KAAKu8I,YAAYj3I,EAAIkoB,GAD9BC,EAEFjhB,KAAKohB,MAAM5tB,KAAKu8I,YAAYh3I,EAAIioB,GAEpC,IAAI+a,EAAY,GACZ3kC,EAAU,GACd,IAAK,IAAI2B,EAAI,EAAGA,EAAIkoB,EAAeloB,IAClC,IAAK,IAAID,EAAI,EAAGA,EAAImoB,EAAenoB,IAClCijC,EAAUjtC,KAAK,EACS,GAArB0E,KAAKu8I,YAAYj3I,EAClBA,EAAIkoB,GACHjoB,EAAI,GAAK,EAAIo3I,EAAmB,GAClC,GACuB,GAArB38I,KAAKu8I,YAAYh3I,EAAWA,EAAIioB,IAG9BxtB,KAAKy8I,oBACLl3I,GAAK,IACC,GAALD,GAAUA,GAAKmoB,EAAgB,EACzB,GAALnoB,EACH1B,EAAQtI,KAAK,CACZgK,EAAI,GAAKC,EAAI,GAAKkoB,EAClBnoB,GAAKC,EAAI,GAAKkoB,EACdnoB,EAAIC,EAAIkoB,IAGT7pB,EAAQtI,KAAK,CACZgK,EAAIC,EAAIkoB,EACRnoB,GAAKC,EAAI,GAAKkoB,EACdnoB,EAAI,EAAIC,EAAIkoB,KAId7pB,EAAQtI,KAAK,CACZgK,EAAIC,EAAIkoB,EACRnoB,GAAKC,EAAI,GAAKkoB,EACdnoB,EAAI,EAAIC,EAAIkoB,IAEb7pB,EAAQtI,KAAK,CACZgK,EAAIC,EAAIkoB,EACRnoB,EAAI,GAAKC,EAAI,GAAKkoB,EAClBnoB,GAAKC,EAAI,GAAKkoB,MAOpB8a,EAAY,UAAeA,GAE3B,MAAM/mC,EAAW,IAAIirB,EAAM3X,eAY3B,OAXAtT,EAASkR,aACR,WACA,IAAI+Z,EAAMohG,gBAAgB,IAAIplF,aAAaF,GAAY,IAGnDvoC,KAAKy8I,qBACT74I,EAAU,UAAeA,GACzBpC,EAASgB,SAASoB,GAClBpC,EAASoQ,wBAGHpQ,K,8ECnFT,cAEMirB,EAAQ,CAAClhB,MADf,MACeA,MAAOC,SAAA,EAAAA,UACtB,QAKA,IAAYoxI,GAAZ,SAAYA,GACX,0BACA,gCAFD,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAIZ,EAAAC,gBAAwC,CAACD,EAAcE,WAAYF,EAAcG,eAE9F,aACA,MAAMC,UAAiC,EAAAl0I,iBAAvC,c,oBACC,KAAAtL,KAAO,EAAA8kB,YAAYtjB,QAAQ,EAAG,CAC7B8jC,KAAM,CACLC,QAAS,EAAA85G,gBAAgB73I,IAAI,CAACtI,EAAG5B,KACzB,CAAC+B,KAAMH,EAAGY,MAAOxC,QAI3B,KAAAi8G,OAAS,EAAAz0F,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,MAE7C,MAAM37B,EAAe,IAAIi0I,EAEzB,MAAa1iB,UAAyB,EAAA16H,aAAtC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,YAGR,+BACC,MAAO,CAAC,6CAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GAG1B,KAAK5B,GACJ,MAAMhgB,EAAaggB,EAAe,GAGlC,GAAI,EAAA67H,gBAAgB78I,KAAKwe,GAAGhhB,OAASo/I,EAAcE,WAAY,CAC9D,MAAM77I,EAAUjB,KAAKi9I,0BAA0Bj8I,GAC/ChB,KAAKkC,YAAYjB,OACX,CACN,MAAMA,EAAUjB,KAAKk9I,+BAA+Bl8I,GACpDhB,KAAKkC,YAAYjB,IAIX,0BAA0BD,GACjC,GAAsB,GAAlBhB,KAAKwe,GAAGu4F,OACX,OAAO/1G,EAAWC,UACZ,CACN,MAAMmvH,EAA0B,GAChC,IAAInqE,EACJ,IAAK,IAAIloD,KAAUiD,EAAWC,UAC7BglD,EAAajmD,KAAKm9I,sBAAsBp/I,GACpCkoD,GACHmqE,EAAY90H,KAAK2qD,GAInB,OAAOmqE,GAGD,sBAAsBryH,GAC7B,IAAIq/I,EAAa,IAAI3wH,EAAMlhB,MAM3B,GAHA6xI,EAAWjgI,IAAIpf,GAGXiC,KAAKwe,GAAGu4F,OAAS,EACpB,IAAK,IAAIj8G,EAAI,EAAGA,EAAIkF,KAAKwe,GAAGu4F,OAAS,EAAGj8G,IAEvCsiJ,EAAap9I,KAAKq9I,gBAAgBD,GAIpC,OAAOA,EAGA,gBAAgBr/I,GACvB,MAAMu/I,EAAc,IAAI7wH,EAAMlhB,MAE9B,OADA+xI,EAAYngI,IAAIpf,GACTu/I,EAGA,+BAA+Bt8I,GACtC,GAAsB,GAAlBhB,KAAKwe,GAAGu4F,OACX,OAAO/1G,EAAWC,UACZ,CACN,MAAMmvH,EAA0B,GAChC,IAAK,IAAIryH,KAAUiD,EAAWC,UAAW,CACxC,MAAMs8I,EAAev9I,KAAKw9I,2BAA2Bz/I,GACrD,IAAK,IAAI0/I,KAAaF,EACrBntB,EAAY90H,KAAKmiJ,GAGnB,OAAOrtB,GAID,2BAA2BryH,GAClC,IAAI2/I,EAAmB3/I,EAAOwjB,SAE9B,IAAK,IAAIzmB,EAAI,EAAGA,EAAIkF,KAAKwe,GAAGu4F,OAAS,EAAGj8G,IACvC4iJ,EAAmB19I,KAAK29I,2BAA2BD,GAGpD,OAAOA,EAGA,2BAA2Bz8I,GAClC,IAAIlD,EACJ,MAAMwjB,EAAuB,GAC7B,KAAQxjB,EAASkD,EAAQunB,OACxB,GAAIzqB,EAAOwjB,SACV,IAAK,IAAI8oD,KAAStsE,EAAOwjB,SACxBA,EAASjmB,KAAK+uE,GAIjB,OAAO9oD,GArGT,sB,2FC3BA,QAGA,SACA,SACA,QACA,SACA,QAOA,OAEA,QACA,MAAMq8H,UAAgC,EAAA90I,iBAAtC,c,oBACC,KAAAomE,mBAAqB,EAAA5sD,YAAYhjB,OAAO,aACxC,KAAAu+I,eAAiB,EAAAv7H,YAAY1jB,QAAQ,GACrC,KAAAuE,SAAW,EAAAmf,YAAYrjB,cAAc,GAAI,CACxC0wB,WAAY,CAACkuH,eAAgB,GAC7Bv4G,eAAgB,CACfC,QAAS,EAAAnlC,YAAYsb,KAEtB8pB,yBAAyB,KAG3B,MAAMz8B,EAAe,IAAI60I,EAEzB,MAAarjB,UAAwB,EAAA36H,aAArC,c,oBACC,KAAAoJ,cAAgBD,EAYR,KAAAqmH,iBAAmBpvH,KAAKqvH,WAAWxxH,KAAKmC,MAXhD,cACC,MAAO,WAMR,+BACC,MAAO,CAAC,8BAA+B,yBAIxC,kBACCiG,MAAMmB,kBAENpH,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKovH,kBAEvCpvH,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe22F,OAAQ,EAAA32F,eAAe42F,QAG5E,KAAKv6E,G,mDACV,MAAM88H,EAAyB98H,EAAe,GAC9ChhB,KAAKoR,eAAY7M,EAEjB,MAAMw5I,EAAqBD,EAAuB78I,UAAU,GAC5D,GAAI88I,EAAoB,CACvB,MAAM/uE,EAAuB+uE,EAAmBv8I,SAChD,GAAIwtE,EAAsB,CACzB,MAAMhuE,EAAaggB,EAAe,GAClChhB,KAAKg+I,iBAAiBhvE,EAAsBhuE,IAK9C,GAAIhB,KAAKoR,UAAW,CACnB,MAAM7S,EAAO,EAAA0/I,mBAAmBF,GAChC,GAAIx/I,EAAM,CACT,MAAMR,EAASiC,KAAKyB,cAAczB,KAAKoR,UAAW7S,GAG9CyB,KAAKwe,GAAGq/H,uBACL79I,KAAKk+I,gBAAgBngJ,IAG5BiC,KAAKggI,WAAWjiI,QAEhBiC,KAAK+b,gBAAgBoF,gBAGtBnhB,KAAK+b,gBAAgBoF,cAIjB,gBAAgBpjB,G,mDACrB,MAAM4oC,EAAa3mC,KAAK/B,EAAEkF,SAASwjC,aACnC,GAAIA,EACH,GAAIA,EAAWnmB,gBAAkB,EAAApgB,YAAYsb,IAAK,CACjD,MAAMnY,EAAgBojC,EACtB3mC,KAAK07B,iBAAmB17B,KAAK07B,kBAAoB,IAAI,EAAAC,uBACrD,MAAMwiH,EAAmB56I,EACrB46I,EAAiB52I,sBACpB42I,EAAiB52I,qBAAqB++F,8BAA8BtmG,KAAK07B,kBAG1E,MACMv4B,SADkBI,EAAcoW,qBACDxW,WACjCA,IACHpF,EAAOoF,SAAWA,EAClB,EAAAK,aAAaojD,uBAAuB7oD,EAAQoF,SAG7CnD,KAAKgyB,OAAO9T,MAAM3d,IAAI,qCAGvBP,KAAKgyB,OAAO9T,MAAM3d,IAAI,4BAIxB,iBAAiByuE,EAAsCC,GACtDjvE,KAAKoR,UAAY,EAAA28D,cAAcqwE,2BAC9BpvE,EACAC,EACAjvE,KAAKwe,GAAG0wD,oBAIF,aACP,MAAMlyD,EAAOhd,KAAKoD,MAAM4Z,KAKxB,IAAItB,EACJ,MAAM2iI,EAAqBrhI,EAAKvZ,KAHf,OAIb46I,GANa,aAMSA,EAAmB9/I,KAC5Cmd,EAAM2iI,GAEN3iI,EAAMsB,EAAKqE,YAAY,aACvB3F,EAAIyE,SARY,QAWjB,MAcMm+H,EAAmB5iI,EAAIjY,KAxBC,0BAUF,EAACiY,EAAuB6iI,KACnD,MAAMC,EAAW9iI,EAAI2F,YAbY,wBAcjCm9H,EAASr+H,SAASo+H,GAElB,MAAME,EAAsBD,EAASn9H,YAAY,sBACjD,IAAIq9H,EAAUF,EAAS/6I,KAAK,WAO5B,OANKi7I,IACJA,EAAUF,EAASn9H,YAAY,WAEhCq9H,EAAQ98H,UAAU,WAAY68H,EAAqB,YACnDC,EAAQ98H,UAAU,SAAU68H,EAAqB,UAE1CD,GAEoDG,CAAoBjjI,EAxBlD,yBA0B9B1b,KAAK/B,EAAEkF,SAAS5C,IAAI+9I,EAAiBj2I,cAxHvC,qB,8EC9BA,MACMokB,EAAQ,CAACrZ,QADf,KACeA,SAEf,SACA,QAEA,OACA,QACA,MAAMwrI,UAA8B,EAAA91I,iBAApC,c,oBACC,KAAA+1I,OAAS,EAAAv8H,YAAYxjB,MAAM,GAC3B,KAAA0nH,KAAO,EAAAlkG,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,QAE3C,MAAM37B,EAAe,IAAI61I,EAEzB,MAAapkB,UAAsB,EAAA56H,aAAnC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,SAGR,+BACC,MAAO,CAAC,gCAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAElChgB,EAAWwT,SAAS5S,QAAQ,CAAC+S,EAAO7Z,KAEnC,MAAMovD,EAAS,IAAIz9B,EAAMrZ,QACxB,GAAK,EAAA2Q,SAAS+6H,KAAS,GAAJhkJ,EAAS,IAAMkF,KAAKwe,GAAGgoG,MAAQ,IAClD,GAAK,EAAAziG,SAAS+6H,KAAS,KAAJhkJ,EAAW,KAAOkF,KAAKwe,GAAGgoG,MAAQ,IACrD,GAAK,EAAAziG,SAAS+6H,KAAS,IAAJhkJ,EAAU,MAAQkF,KAAKwe,GAAGgoG,MAAQ,KAEtDt8D,EAAO9jC,YACP8jC,EAAOrmC,eAAe7jB,KAAKwe,GAAGqgI,QAE9B,MAAMnzE,EAAe/2D,EACnBP,WACArR,QACAoa,IAAI+sC,GACNv1C,EAAM2nB,aAAaovC,KAGpB1rE,KAAK6+H,eAAe79H,IAnCtB,mB,8ECdA,cAEA,OACA,QAEA,MAAM+9I,UAA6B,EAAAj2I,iBAAnC,c,oBACC,KAAA8tC,MAAQ,EAAAt0B,YAAYtjB,QAAQ,EAAG,CAC9B0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAIg2I,EAEzB,MAAatkB,UAAqB,EAAA76H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAGR,+BACC,MAAO,CAAC,+BAET,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAElC,IAAK,IAAIjjB,KAAUiD,EAAWC,UAC7BlD,EAAO84C,OAAOt2C,IAAIP,KAAKwe,GAAGo4B,OAG3B52C,KAAK6+H,eAAe79H,IArBtB,kB,2FCbA,OACA,OACA,4BAEA,QACA,QAEA,OACA,MAAMg+I,UAA4B,EAAAl2I,iBAAlC,c,oBACC,KAAA9N,OAAS,EAAAsnB,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MAC1C,KAAA/gC,aAAe,EAAA2e,YAAYtjB,QAAQ,EAAG,CACrC0lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,KAAA6zF,OAAS,EAAAl2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACpC,KAAA+4H,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAExC,MAAMuJ,EAAe,IAAIi2I,EAEzB,MAAatkB,UAAoB,EAAA96H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,mBAEA,OACC,MAAMpF,EAAe6I,KAAKC,IAAI,EAAGzM,KAAKwe,GAAG7a,cAEnC4kC,EAAsB,IAAI8G,MAAqB,EAAf1rC,GAChCC,EAAoB,IAAIyrC,MAAM1rC,GAE9Bs7I,EAAUj/I,KAAKwe,GAAG+5G,UACtBx1H,QACAqjB,YACAvC,eAAe7jB,KAAKwe,GAAGxjB,QAEzB,UAAa2I,EAAe7I,IAC3B,MAAMokJ,EAAMpkJ,GAAK6I,EAAe,GAC1BgR,EAAQsqI,EAAQl8I,QAAQ8gB,eAAeq7H,GAC7CvqI,EAAMwI,IAAInd,KAAKwe,GAAGg6G,QAClB7jH,EAAM5P,QAAQwjC,EAAe,EAAJztC,GAErBA,EAAI,IACP8I,EAAkB,GAAT9I,EAAI,IAAUA,EAAI,EAC3B8I,EAAkB,GAAT9I,EAAI,GAAS,GAAKA,KAG7B,MAAM0G,EAAW,IAAI,EAAAsT,eACrBtT,EAASkR,aAAa,WAAY,IAAI,EAAAS,uBAAuBo1B,EAAW,IACxE/mC,EAASgB,SAASoB,GAClB5D,KAAKgrI,aAAaxpI,EAAU,EAAAiB,aAAaC,YAAY0G,gBAjCvD,iB,2FCnBA,QAGA,SACA,SAEA,QACA,QAGA,QAKA,OAEA,MAAM+1I,UAAgC,EAAAr2I,iBAAtC,c,oBACC,KAAA48C,MAAQ,EAAApjC,YAAYhjB,OAAO,IAC3B,KAAA6D,SAAW,EAAAmf,YAAYrjB,cAAc,sBAAuB,CAC3DqmC,eAAgB,CACfC,QAAS,EAAAnlC,YAAYsb,KAEtB8pB,yBAAyB,IAE1B,KAAA45G,kBAAoB,EAAA98H,YAAY1jB,QAAQ,IAEzC,MAAMmK,EAAe,IAAIo2I,EAEzB,MAAaxkB,UAAwB,EAAA/6H,aAArC,c,oBACC,KAAAoJ,cAAgBD,EAMhB,KAAA2yB,iBAA2C,IAAI,EAAAC,uBAL/C,cACC,MAAO,WAMR,+BACC,MAAO,CAAC,iCAGT,kBACC37B,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAMrD,KAAKoyC,G,mDAGV,MAAMxsI,EAAawsI,EAAY,GAEzB/pI,EAAOzD,KAAK/B,EAAEkF,SAASwjC,aAC7B,GAAIljC,EACH,GAAIA,EAAK+c,gBAAkB,EAAApgB,YAAYsb,IACtC1b,KAAKgyB,OAAO9T,MAAM3d,IAAI,8BAChB,CACN,MAAMgD,EAAgBE,EAChBN,EAAWI,EAAcJ,SAC/B,GAAIA,aAAoB,EAAAqtB,eAAgB,CACT/sB,EACR8D,qBAAqB++F,8BAA8BtmG,KAAK07B,kBAI/E,SADMn4B,EAAcoW,oBAChBxW,EAAU,CACb,IAAK,IAAIpF,KAAUiD,EAAWq+I,mBAAmBr/I,KAAKwe,GAAGknC,OACpD1lD,KAAKwe,GAAG4gI,kBACXrhJ,EAAOwoD,SAAU+4F,IAChBt/I,KAAK69I,eAAeyB,EAAan8I,KAGlCnD,KAAK69I,eAAe9/I,EAAQoF,GAG9BnD,KAAK6+H,eAAe79H,QAEpBhB,KAAKgyB,OAAO9T,MAAM3d,IAAI,8BAA8BgD,EAAcyuB,OAAO9T,MAAMpc,kBAIjF9B,KAAKgyB,OAAO9T,MAAM3d,IAAI,SAASP,KAAKwe,GAAGrb,0BAIzC,eAAepF,EAAkBoF,GACHpF,EAORoF,SAAWA,EAChC,EAAAK,aAAaojD,uBAAuB7oD,EAAQoF,IApE9C,qB,8ECrBA,cAIA,QAIA,QAOMg8C,EAAa,oBAEnB,OACA,MAAMogG,UAA6B,EAAAz2I,iBAAnC,c,oBACC,KAAA02I,QAAU,EAAAl9H,YAAY1jB,QAAQ,IAE/B,MAAMmK,EAAe,IAAIw2I,EAEzB,MAAa3kB,UAAqB,EAAAh7H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAGR,+BACC,MAAO,CAACo2C,EAAYA,EAAYA,EAAYA,GAG7C,kBACCn/C,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAE5B5iB,KAAKiH,QAAQ4wG,UAAU,KAIxB,KAAK72F,GACJ,IAAI8rH,EAAsC,GAC1C,IAAK,IAAI2S,KAAoBz+H,EAC5B,GAAIy+H,EAAkB,CACrB,MAAMx+I,EAAUw+I,EAAiBx+I,UACjC,IAAK,IAAIlD,KAAUkD,EAClBlD,EAAOwoD,SAAU8jB,IAChByiE,EAAYxxI,KAAK+uE,KAKjBrqE,KAAKwe,GAAGghI,UACX1S,EAAc9sI,KAAK0/I,cAAc5S,IAElC9sI,KAAKkC,YAAY4qI,GAGlB,cAAcA,GACb,MAAM6S,EAAiC,CACtC,CAAC,EAAA12I,WAAWtG,MAAO,GACnB,CAAC,EAAAsG,WAAWE,QAAS,GACrB,CAAC,EAAAF,WAAWG,eAAgB,IAEvBw2I,EAAyC,GAE/C,IAAK,IAAI7hJ,KAAU+uI,EAClB/uI,EAAOwoD,SAAUs5E,IAChB,MAAM9hI,EAAS8hI,EACX9hI,EAAOyD,WAELzD,EAAgBmrE,OACpBy2E,EAAgB,EAAA12I,WAAWtG,MAAMrH,KAAKyC,GAEjCA,EAAwB8hJ,eAC5BF,EAAgB,EAAA12I,WAAWG,eAAe9N,KAAKyC,GAE1CA,EAAkBqrE,UACtBu2E,EAAgB,EAAA12I,WAAWE,QAAQ7N,KAAKyC,MAQ9C,IAAK,IAAIQ,KAAQtD,OAAO4W,KAAK8tI,GAAiC,CAC7D,MAAM1+I,EAAU0+I,EAAgBphJ,GAE1BoD,EAAa,GACnB,IAAK,IAAI5D,KAAUkD,EAAS,CAC3B,MAAMO,EAAWzD,EAAOyD,SACxBA,EAAS+kB,aAAaxoB,EAAOslB,QAC7B1hB,EAAWrG,KAAKkG,GAIjB,MAAMuV,EAAkB,EAAA5F,aAAa2uI,iBAAiBn+I,GACtD,GAAIoV,EAAiB,CACpB,MAAMhZ,EAASiC,KAAKyB,cAAcsV,EAAiBxY,GACnDqhJ,EAAetkJ,KAAKyC,IAatB,OAAO6hJ,GA1FT,kB,2FC/BA,OACA,OACA,QAGA,SACA,QACA,SAEA,SAEA,IAAKG,GAAL,SAAKA,GACJ,YACA,YACA,cACA,wBACA,kBALD,CAAKA,MAAS,KAQd,MAAMC,EAAyB,CAACD,EAAUE,IAAKF,EAAUG,IAAKH,EAAU19B,KAAM09B,EAAUI,UAAWJ,EAAUK,QAQ7G,OACA,MAAMC,UAA6B,EAAAv3I,iBAAnC,c,oBACC,KAAA+1I,OAAS,EAAAv8H,YAAYxjB,MAAM,GAC3B,KAAAqlH,KAAO,EAAA7hG,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAClC,KAAA0qD,OAAS,EAAA5nC,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACpC,KAAA+kH,QAAU,EAAAjiG,YAAYtjB,QAAQ,EAAG,CAChC0lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,KAAA6/E,gBAAkB,EAAAliG,YAAYxjB,MAAM,GAAK,CAAC4lC,MAAO,CAAC,EAAG,KACrD,KAAA+/E,cAAgB,EAAAniG,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,MACjD,KAAA8hF,KAAO,EAAAlkG,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,OAC1C,KAAAkgD,UAAY,EAAAtiE,YAAYjjB,YACxB,KAAAihJ,YAAc,EAAAh+H,YAAY1jB,QAAQ,GAClC,KAAAyT,YAAc,EAAAiQ,YAAYhjB,OAAO,YACjC,KAAAm/G,UAAY,EAAAn8F,YAAYtjB,QAAQghJ,EAAW12I,QAAQy2I,EAAUE,KAAM,CAClEn9G,KAAM,CACLC,QAASi9G,EAAWh7I,IAAKy5G,IACjB,CACN5hH,KAAM4hH,EACNnhH,MAAO0iJ,EAAW12I,QAAQm1G,SAK9B,KAAA8hC,gBAAkB,EAAAj+H,YAAY1jB,QAAQ,IAEvC,MAAMmK,EAAe,IAAIs3I,EAEzB,MAAaxlB,UAAqB,EAAAj7H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAcR,KAAAy3I,iBAA8C,IAAIjwH,IAGlD,KAAAkwH,aAA4B,GAhBpC,cACC,MAAO,QAiBR,+BACC,MAAO,CAAC,2BAA4B,iBAErC,kBACCzgJ,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,UAAW,EAAAz2F,eAAe42F,QAG/E,KAAKv6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAC5B0/H,EAAkB1/H,EAAe,GAEjC+kH,EAAc/kI,EAAWwT,SAC3BksI,IAEiC,MAAnC1gJ,KAAK2gJ,4BACL3gJ,KAAK2gJ,4BAA8BD,EAAgBtoC,cAEnDp4G,KAAKygJ,aAAeC,EAAgBlsI,SACpCxU,KAAK2gJ,2BAA6BD,EAAgBtoC,cAKpD,MAAMwoC,EAAU5gJ,KAAK6gJ,eAEfP,EAActgJ,KAAKwe,GAAG8hI,aAAet/I,EAAWkpE,WAAW,UAC3D42E,EAAqB9/I,EAAW2U,YAAY3V,KAAKwe,GAAGnM,aAE1D,IAAK,IAAIvX,EAAI,EAAGA,EAAIirI,EAAY/qI,OAAQF,IAAK,CAC5C,MAAMmsI,EAAalB,EAAYjrI,GAC/B,IAAIimJ,EAAaL,EAAkB1gJ,KAAKygJ,aAAa3lJ,GAAKmsI,EAC1D,MAAM+Z,EAAuBD,EAAWzrI,aAAatV,KAAKwe,GAAGnM,aACvDy+F,EAAMiwC,EACV3sI,WACA+I,IAAInd,KAAKwe,GAAG0rC,QACZ2kB,SAAS7uE,KAAKwe,GAAG2lG,MAEnB,IAAI88B,EAAc,MACjB,GAAIX,EAAa,CAChB,MAAM14F,EAASm5F,EAAWzrI,aAAa,UACjC+vG,EAAQrlH,KAAKwe,GAAGqgI,OAAS7+I,KAAKkhJ,KAAKN,EAAS9vC,EAAIxrG,EAAGwrG,EAAIvrG,EAAGurG,EAAItrG,GACpE,OAAOoiD,EAAO7kD,QAAQ8gB,eAAewhG,GAGrC,OAAO,IAAI,EAAAjyG,QACVpT,KAAKwe,GAAGqgI,OAAS7+I,KAAKkhJ,KAAKN,EAAS9vC,EAAIxrG,EAAI,IAAKwrG,EAAIvrG,EAAI,OAAQurG,EAAItrG,EAAI,MACzExF,KAAKwe,GAAGqgI,OAAS7+I,KAAKkhJ,KAAKN,EAAS9vC,EAAIxrG,EAAI,IAAKwrG,EAAIvrG,EAAI,MAAOurG,EAAItrG,EAAI,OACxExF,KAAKwe,GAAGqgI,OAAS7+I,KAAKkhJ,KAAKN,EAAS9vC,EAAIxrG,EAAI,OAAQwrG,EAAIvrG,EAAI,GAAIurG,EAAItrG,EAAI,QAVzD,GAelBy7I,EAAc,MACb,OAAQH,GACP,KAAK,EACJ,OAAOG,EAAY37I,EACpB,KAAK,EACJ,OAAO,IAAI,EAAAuxB,QAAQoqH,EAAY37I,EAAG27I,EAAY17I,GAC/C,KAAK,EACJ,OAAO07I,IAPI,GAWd,MAAM1jB,EAAmB,MACxB,MAAM9e,EAAYuhC,EAAWhgJ,KAAKwe,GAAGigG,WACrC,OAAQqiC,GACP,KAAK,EACJ,OAAQriC,GACP,KAAKshC,EAAUE,IACd,OAAOe,EAAuBC,EAC/B,KAAKlB,EAAUG,IACd,OAAOe,EACR,KAAKlB,EAAU19B,KACd,OAAO2+B,EAAuBC,EAC/B,KAAKlB,EAAUK,OACd,OAAOY,EAAuBC,EAC/B,KAAKlB,EAAUI,UACd,OAAOa,EAAuBC,EAEhC,EAAAzlD,WAAWC,YAAYgjB,GACvB,MACD,QACC,OAAQA,GACP,KAAKshC,EAAUE,IACd,OAAOe,EAAqB7jI,IAAI8jI,GACjC,KAAKlB,EAAUG,IACd,OAAOe,EACR,KAAKlB,EAAU19B,KACd,OAAO2+B,EAAqBnyE,SAASoyE,GACtC,KAAKlB,EAAUK,OACd,OAAOY,EAAqBG,OAAOF,GACpC,KAAKlB,EAAUI,UACd,OAAOa,EAAqB5xH,IAAI6xH,GAElC,EAAAzlD,WAAWC,YAAYgjB,KA/BD,GAmCzBwoB,EAAWhE,iBAAiBjjI,KAAKwe,GAAGnM,YAAakrH,GAGlD,IAAKv9H,KAAKa,GAAG6G,OAAO84H,aAAa,GAChC,IAAK,IAAIh/H,KAAYR,EAAWW,aAC9BH,EAASc,aAAatC,KAAKwe,GAAGnM,aAAiC6d,aAAc,EAI5ElwB,KAAKwe,GAAG+hI,iBACXv/I,EAAW2kD,yBAEZ3lD,KAAK6+H,eAAe79H,MAGb,KAAK4/I,EAAuBt7I,EAAWC,EAAWC,GACzD,IAAIlI,EAAQ,EACR8jJ,EAAY,EAChB,IAAK,IAAItmJ,EAAI,EAAGA,EAAIkF,KAAKwe,GAAG+lG,QAASzpH,IACpCwC,GAAS8jJ,EAAYR,EAAQS,QAAQ/7I,EAAGC,EAAGC,GAC3CF,GAAKtF,KAAKwe,GAAGimG,cACbl/G,GAAKvF,KAAKwe,GAAGimG,cACbj/G,GAAKxF,KAAKwe,GAAGimG,cACb28B,GAAaphJ,KAAKwe,GAAGgmG,gBAEtB,OAAOlnH,EAGA,eACP,MAAMsjJ,EAAU5gJ,KAAKwgJ,iBAAiBtjJ,IAAI8C,KAAKwe,GAAGgoG,MAClD,GAAIo6B,EACH,OAAOA,EACD,CACN,MAAMA,EAAU5gJ,KAAKshJ,kBAErB,OADAthJ,KAAKwgJ,iBAAiBjgJ,IAAIP,KAAKwe,GAAGgoG,KAAMo6B,GACjCA,GAGD,kBACP,MAAMp6B,EAAOxmH,KAAKwe,GAAGgoG,KACf+6B,EAAmB,CACxBztB,OAAQ,WACP,OAAO,EAAA/vG,SAASuJ,WAAWk5F,KAGvBo6B,EAAU,IAAI,EAAAY,aAAaD,GAIjC,OAFAvhJ,KAAKwgJ,iBAAiB5hE,OAAO4nC,GAEtBo6B,GAxKT,kB,6BCxDA,oDAaA,IAAIY,EAAe,SAAWrkJ,GAEnBoH,MAALpH,IAAiBA,EAAIqP,MAC1BxM,KAAKyhJ,MAAQ,CAAC,CAAE,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,EAAI,GAAK,EAAG,GACpE,CAAE,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,EAAI,EAAG,GAAK,GACvD,CAAE,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,CAAE,GAAK,GAAK,IAExDzhJ,KAAK0hJ,MAAQ,CAAC,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,GAC5E,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,GAAK,CAAE,GAAK,GAAK,EAAG,GAAK,CAAE,GAAK,GAAK,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,GAAK,EAAI,EAAG,GAAK,EAAG,GAAK,EAAI,EAAG,GAAK,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,GAAK,EAAI,GAAK,EAAG,EAAG,GAAK,EAAI,GAAK,EAAG,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,GAAK,EAAG,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,GAAK,EAAG,GAAK,EAAI,GAAK,EAAG,EAAG,GAAK,EAAI,GAAK,GAAK,EAAG,IAEhF1hJ,KAAK/B,EAAI,GACT,IAAM,IAAInD,EAAI,EAAGA,EAAI,IAAKA,IAEzBkF,KAAK/B,EAAGnD,GAAM0R,KAAKohB,MAAoB,IAAbzwB,EAAE22H,UAI7B9zH,KAAK2hJ,KAAO,GACZ,IAAU7mJ,EAAI,EAAGA,EAAI,IAAKA,IAEzBkF,KAAK2hJ,KAAM7mJ,GAAMkF,KAAK/B,EAAO,IAAJnD,GAM1BkF,KAAK4gJ,QAAU,CACdatmJ,UAAUsuD,IAAM,SAAWv2C,EAAG3N,EAAGC,GAE7C,OAAO0N,EAAG,GAAM3N,EAAI2N,EAAG,GAAM1N,GAI9Bi8I,EAAatmJ,UAAU0mJ,KAAO,SAAW3uI,EAAG3N,EAAGC,EAAGC,GAEjD,OAAOyN,EAAG,GAAM3N,EAAI2N,EAAG,GAAM1N,EAAI0N,EAAG,GAAMzN,GAI3Cg8I,EAAatmJ,UAAU2mJ,KAAO,SAAW5uI,EAAG3N,EAAGC,EAAGC,EAAGC,GAEpD,OAAOwN,EAAG,GAAM3N,EAAI2N,EAAG,GAAM1N,EAAI0N,EAAG,GAAMzN,EAAIyN,EAAG,GAAMxN,GAIxD+7I,EAAatmJ,UAAUmqH,MAAQ,SAAWy8B,EAAKC,GAE9C,IAcIC,EAAIC,EAXJ7lJ,GAAM0lJ,EAAMC,IADP,IAAQv1I,KAAKoiB,KAAM,GAAQ,IAEhC9zB,EAAI0R,KAAKohB,MAAOk0H,EAAM1lJ,GACtBJ,EAAIwQ,KAAKohB,MAAOm0H,EAAM3lJ,GACtB8lJ,GAAO,EAAM11I,KAAKoiB,KAAM,IAAU,EAClCrxB,GAAMzC,EAAIkB,GAAMkmJ,EAGhBC,EAAKL,GAFAhnJ,EAAIyC,GAGT6kJ,EAAKL,GAFA/lJ,EAAIuB,GAMR4kJ,EAAKC,GAETJ,EAAK,EAAGC,EAAK,IAMbD,EAAK,EAAGC,EAAK,GAMd,IAAII,EAAKF,EAAKH,EAAKE,EACfI,EAAKF,EAAKH,EAAKC,EACfK,EAAKJ,EAAK,EAAM,EAAMD,EACtBM,EAAKJ,EAAK,EAAM,EAAMF,EAEtBO,EAAS,IAAJ3nJ,EACL4nJ,EAAS,IAAJ1mJ,EACL2mJ,EAAM3iJ,KAAK2hJ,KAAMc,EAAKziJ,KAAK2hJ,KAAMe,IAAS,GAC1CE,EAAM5iJ,KAAK2hJ,KAAMc,EAAKT,EAAKhiJ,KAAK2hJ,KAAMe,EAAKT,IAAS,GACpDY,EAAM7iJ,KAAK2hJ,KAAMc,EAAK,EAAIziJ,KAAK2hJ,KAAMe,EAAK,IAAQ,GAElDI,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAQ1BW,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAQ1BU,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAU9B,OAAO,KAzBFM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK9iJ,KAAKwpD,IAAKxpD,KAAKyhJ,MAAOkB,GAAOR,EAAIC,KAI5CW,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK/iJ,KAAKwpD,IAAKxpD,KAAKyhJ,MAAOmB,GAAOP,EAAIC,KAI5CU,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKhjJ,KAAKwpD,IAAKxpD,KAAKyhJ,MAAOoB,GAAON,EAAIC,MAUlDhB,EAAatmJ,UAAUmmJ,QAAU,SAAWS,EAAKC,EAAKkB,GAErD,IAiBIjB,EAAIC,EAAIiB,EACRC,EAAIC,EAAIC,EAfRjnJ,GAAM0lJ,EAAMC,EAAMkB,IADb,EAAM,GAEXnoJ,EAAI0R,KAAKohB,MAAOk0H,EAAM1lJ,GACtBJ,EAAIwQ,KAAKohB,MAAOm0H,EAAM3lJ,GACtB+yC,EAAI3iC,KAAKohB,MAAOq1H,EAAM7mJ,GACtBknJ,EAAK,EAAM,EACX/lJ,GAAMzC,EAAIkB,EAAImzC,GAAMm0G,EAIpBnB,EAAKL,GAHAhnJ,EAAIyC,GAIT6kJ,EAAKL,GAHA/lJ,EAAIuB,GAITgmJ,EAAKN,GAHA9zG,EAAI5xC,GAQR4kJ,GAAMC,EAELA,GAAMmB,GAEVvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlClB,GAAMoB,GAEjBvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7CrB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAMzCjB,EAAKmB,GAETvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlClB,EAAKoB,GAEhBvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7CrB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAS/C,IAAIhB,EAAKF,EAAKH,EAAKsB,EACfhB,EAAKF,EAAKH,EAAKqB,EACfE,EAAKD,EAAKL,EAAKI,EACff,EAAKJ,EAAKgB,EAAK,EAAMG,EACrBd,EAAKJ,EAAKgB,EAAK,EAAME,EACrBG,EAAKF,EAAKF,EAAK,EAAMC,EACrBI,EAAKvB,EAAK,EAAM,GAChBwB,EAAKvB,EAAK,EAAM,GAChBwB,EAAKL,EAAK,EAAM,GAEhBd,EAAS,IAAJ3nJ,EACL4nJ,EAAS,IAAJ1mJ,EACL6nJ,EAAS,IAAJ10G,EACLwzG,EAAM3iJ,KAAK2hJ,KAAMc,EAAKziJ,KAAK2hJ,KAAMe,EAAK1iJ,KAAK2hJ,KAAMkC,KAAW,GAC5DjB,EAAM5iJ,KAAK2hJ,KAAMc,EAAKT,EAAKhiJ,KAAK2hJ,KAAMe,EAAKT,EAAKjiJ,KAAK2hJ,KAAMkC,EAAKX,KAAW,GAC3EL,EAAM7iJ,KAAK2hJ,KAAMc,EAAKU,EAAKnjJ,KAAK2hJ,KAAMe,EAAKU,EAAKpjJ,KAAK2hJ,KAAMkC,EAAKR,KAAW,GAC3ES,EAAM9jJ,KAAK2hJ,KAAMc,EAAK,EAAIziJ,KAAK2hJ,KAAMe,EAAK,EAAI1iJ,KAAK2hJ,KAAMkC,EAAK,KAAU,GAExEf,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAQpCR,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKkB,EAAKA,EAQpCR,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKiB,EAAKA,EAQpCM,EAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAUxC,OAAO,KAjCFd,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK9iJ,KAAK4hJ,KAAM5hJ,KAAKyhJ,MAAOkB,GAAOR,EAAIC,EAAImB,KAIjDR,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK/iJ,KAAK4hJ,KAAM5hJ,KAAKyhJ,MAAOmB,GAAOP,EAAIC,EAAIkB,KAIjDR,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKhjJ,KAAK4hJ,KAAM5hJ,KAAKyhJ,MAAOoB,GAAON,EAAIC,EAAIiB,KAIjDM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAK/jJ,KAAK4hJ,KAAM5hJ,KAAKyhJ,MAAOqC,GAAOJ,EAAIC,EAAIC,MAUvDpC,EAAatmJ,UAAU8oJ,QAAU,SAAW1+I,EAAGC,EAAGC,EAAGC,GAGpD,IAuCIu8I,EAAIC,EAAIiB,EAAIe,EACZd,EAAIC,EAAIC,EAAIa,EACZC,EAAIC,EAAIC,EAAIC,EAzCZ5C,EAAQ1hJ,KAAK0hJ,MACbd,EAAU5gJ,KAAK4gJ,QACfe,EAAO3hJ,KAAK2hJ,KAGZ4C,GAAO/3I,KAAKoiB,KAAM,GAAQ,GAAQ,EAClC41H,GAAO,EAAMh4I,KAAKoiB,KAAM,IAAU,GAGlCxyB,GAAMkJ,EAAIC,EAAIC,EAAIC,GAAM8+I,EACxBzpJ,EAAI0R,KAAKohB,MAAOtoB,EAAIlJ,GACpBJ,EAAIwQ,KAAKohB,MAAOroB,EAAInJ,GACpB+yC,EAAI3iC,KAAKohB,MAAOpoB,EAAIpJ,GACpBK,EAAI+P,KAAKohB,MAAOnoB,EAAIrJ,GACpBmB,GAAMzC,EAAIkB,EAAImzC,EAAI1yC,GAAM+nJ,EAKxBrC,EAAK78I,GAJAxK,EAAIyC,GAKT6kJ,EAAK78I,GAJAvJ,EAAIuB,GAKTgmJ,EAAK/9I,GAJA2pC,EAAI5xC,GAKTknJ,EAAKh/I,GAJAhJ,EAAIc,GAoBTZ,GANOwlJ,EAAKC,EAAO,GAAK,IACjBD,EAAKoB,EAAO,GAAK,IACjBnB,EAAKmB,EAAO,EAAI,IAChBpB,EAAKsC,EAAO,EAAI,IAChBrC,EAAKqC,EAAO,EAAI,IAChBlB,EAAKkB,EAAO,EAAI,GAwBvBpC,EAAKF,GAdTH,EAAKpB,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcf6nJ,EACflC,EAAKF,GAdTH,EAAKrB,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcf6nJ,EACfhB,EAAKD,GAdTL,EAAKtC,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcf6nJ,EACfE,EAAKD,GAdTR,EAAKrD,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcf6nJ,EACfjC,EAAKJ,GAbTgB,EAAKvC,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBhC,EAAKJ,GAbTgB,EAAKxC,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBf,EAAKF,GAd4BF,EAAKzC,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcpD,EAAM6nJ,EACrBG,EAAKF,GAdTP,EAAKtD,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAcf,EAAM6nJ,EACrBd,EAAKvB,GAbTgC,EAAKvD,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBb,EAAKvB,GAbTgC,EAAKxD,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBZ,EAAKL,GAbTc,EAAKzD,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBI,EAAKH,GAbTH,EAAK1D,EAASjkJ,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM6nJ,EACrBK,EAAK1C,EAAK,EAAM,EAAMqC,EACtBM,EAAK1C,EAAK,EAAM,EAAMoC,EACtBO,EAAKxB,EAAK,EAAM,EAAMiB,EACtBQ,EAAKP,EAAK,EAAM,EAAMD,EAEtB/B,EAAS,IAAJ3nJ,EACL4nJ,EAAS,IAAJ1mJ,EACL6nJ,EAAS,IAAJ10G,EACL81G,EAAS,IAAJxoJ,EACLkmJ,EAAMhB,EAAMc,EAAKd,EAAMe,EAAKf,EAAMkC,EAAKlC,EAAMsD,MAAa,GAC1DrC,EAAMjB,EAAMc,EAAKT,EAAKL,EAAMe,EAAKT,EAAKN,EAAMkC,EAAKX,EAAKvB,EAAMsD,EAAKhB,MAAa,GAC9EpB,GAAMlB,EAAMc,EAAKU,EAAKxB,EAAMe,EAAKU,EAAKzB,EAAMkC,EAAKR,EAAK1B,EAAMsD,EAAKf,MAAa,GAC9EJ,GAAMnC,EAAMc,EAAK0B,EAAKxC,EAAMe,EAAK0B,EAAKzC,EAAMkC,EAAKQ,EAAK1C,EAAMsD,EAAKX,MAAa,GAC9EY,GAAMvD,EAAMc,EAAK,EAAId,EAAMe,EAAK,EAAIf,EAAMkC,EAAK,EAAIlC,EAAMsD,EAAK,MAAY,GAE1EnC,GAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAAKkB,EAAKA,EAQ9C1B,GAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKkB,EAAKA,EAAKkB,EAAKA,EAQ9C1B,GAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKiB,EAAKA,EAAKkB,EAAKA,EAO5CZ,GAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKgB,EAAKA,EAQhDO,GAAK,GAAMN,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EASlD,OAAO,KAvCFlC,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAK9iJ,KAAK6hJ,KAAMH,EAAOiB,GAAOR,EAAIC,EAAImB,EAAIkB,KAIhD1B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAK/iJ,KAAK6hJ,KAAMH,EAAOkB,GAAOP,EAAIC,EAAIkB,EAAIkB,KAIhD1B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKhjJ,KAAK6hJ,KAAMH,EAAOmB,IAAON,EAAIC,EAAIiB,EAAIkB,KAGhDZ,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAK/jJ,KAAK6hJ,KAAMH,EAAOoC,IAAOJ,EAAIC,EAAIC,EAAIgB,KAIhDO,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKnlJ,KAAK6hJ,KAAMH,EAAOwD,IAAOL,EAAIC,EAAIC,EAAIC,O,2FC7YtD,QAGA,QAQA,OACA,MAAMI,UAA+B,EAAAt8I,iBAArC,c,oBACC,KAAAu8I,KAAO,EAAA/iI,YAAY1jB,QAAQ,GAC3B,KAAA0mJ,SAAW,EAAAhjI,YAAY1jB,QAAQ,EAAG,CACjC+wB,WAAY,CAAC01H,KAAM,KAEpB,KAAA//I,EAAI,EAAAgd,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC21H,SAAU,EAAGD,KAAM,GAChC1yG,WAAY,CAAC+uF,cAAc,KAE5B,KAAA6jB,SAAW,EAAAjjI,YAAY1jB,QAAQ,EAAG,CACjC+wB,WAAY,CAAC01H,KAAM,KAEpB,KAAA9/I,EAAI,EAAA+c,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC41H,SAAU,EAAGF,KAAM,GAChC1yG,WAAY,CAAC+uF,cAAc,KAE5B,KAAA8jB,SAAW,EAAAljI,YAAY1jB,QAAQ,EAAG,CACjC+wB,WAAY,CAAC01H,KAAM,KAEpB,KAAA7/I,EAAI,EAAA8c,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC61H,SAAU,EAAGH,KAAM,GAChC1yG,WAAY,CAAC+uF,cAAc,KAG5B,KAAA+jB,UAAY,EAAAnjI,YAAY1jB,QAAQ,EAAG,CAClC+wB,WAAY,CAAC01H,KAAM,KAEpB,KAAA9S,OAAS,EAAAjwH,YAAY1jB,QAAQ,IAE9B,MAAMmK,EAAe,IAAIq8I,EAEzB,MAAatqB,UAAuB,EAAAl7H,aAApC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,UAGR,+BACC,MAAO,CAAC,iCAET,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAGrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAE9BhhB,KAAKwe,GAAG6mI,WACLrlJ,KAAK0lJ,iCAAiC1kJ,GAE5CA,EAAW2kD,yBAER3lD,KAAKwe,GAAG+zH,QACXvyI,KAAK2lJ,gBAAgB3kJ,GAsCtBhB,KAAK6+H,eAAe79H,MAGP,iCAAiCA,G,mDAa9C,MAAMgoE,EAAehoE,EAAWgoE,eAChC,IAAK,IAAIluE,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,UAClCkF,KAAK4lJ,kCAAkC58E,EAAaluE,OAG9C,kCAAkCiuE,G,mDAC/C,MACMvnE,EADSunE,EAAYhrE,SACOyD,SAC5BgT,EAASu0D,EAAYv0D,SAErBjS,EAAQf,EAASc,aAzHE,UAyH+BC,MAGxD,GAAIvC,KAAKwe,GAAG8mI,SACX,GAAItlJ,KAAK/B,EAAEqH,EAAE8mF,kBAAoBpsF,KAAK/B,EAAEqH,EAAEgkB,4BACnCtpB,KAAK/B,EAAEqH,EAAEgkB,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAClFiF,EAAoB,EAAdoS,EAAMvS,MAAY,GAAK9E,QAExB,CACN,IAAIqX,EACJ,IAAK,IAAI7Z,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAClC6Z,EAAQH,EAAO1Z,GACfyH,EAAoB,EAAdoS,EAAMvS,MAAY,GAAKpC,KAAKwe,GAAGlZ,EAKxC,GAAItF,KAAKwe,GAAG+mI,SACX,GAAIvlJ,KAAK/B,EAAEsH,EAAE6mF,kBAAoBpsF,KAAK/B,EAAEsH,EAAE+jB,4BACnCtpB,KAAK/B,EAAEsH,EAAE+jB,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAClFiF,EAAoB,EAAdoS,EAAMvS,MAAY,GAAK9E,QAExB,CACN,IAAIqX,EACJ,IAAK,IAAI7Z,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAClC6Z,EAAQH,EAAO1Z,GACfyH,EAAoB,EAAdoS,EAAMvS,MAAY,GAAKpC,KAAKwe,GAAGjZ,EAKxC,GAAIvF,KAAKwe,GAAGgnI,SACX,GAAIxlJ,KAAK/B,EAAEuH,EAAE4mF,kBAAoBpsF,KAAK/B,EAAEuH,EAAE8jB,4BACnCtpB,KAAK/B,EAAEuH,EAAE8jB,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAClFiF,EAAoB,EAAdoS,EAAMvS,MAAY,GAAK9E,QAExB,CACN,IAAIqX,EACJ,IAAK,IAAI7Z,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAClC6Z,EAAQH,EAAO1Z,GACfyH,EAAoB,EAAdoS,EAAMvS,MAAY,GAAKpC,KAAKwe,GAAGhZ,MAYjC,gBAAgBxE,GAGvB,IAAK,IAAI+nE,KAAe/nE,EAAWgoE,eAAgB,CAClD,MACM68E,EADW98E,EAAYnyD,gBAAgBpV,WACd0Q,WAA6B,OAC5D,GAAI2zI,EAAe,CAClB,MAAMtjJ,EAAQsjJ,EAActjJ,MAC5B,IAAK,IAAIzH,EAAI,EAAGA,EAAIyH,EAAMvH,OAAQF,IACjCyH,EAAMzH,KAAO,KApJlB,oB,8EC5CA,cAEA,OACA,QAEA,MAAMgrJ,UAA4B,EAAAh9I,kBAClC,MAAMC,EAAe,IAAI+8I,EAEzB,MAAa/qB,UAAoB,EAAAn7H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAC1Dp7F,KAAKiH,QAAQ8+I,kBAAkB,KAGhC,KAAK/kI,GACJ,MAAMhgB,EAAaggB,EAAe,GAC9BhgB,EACHhB,KAAK6+H,eAAe79H,GAEpBhB,KAAKkC,YAAY,KAjBpB,iB,2FCRA,QACA,QAGA,OAGA,MAAM8jJ,UAAmC,EAAAl9I,iBAAzC,c,oBACC,KAAAtH,SAAW,EAAA8gB,YAAYrjB,cAAc,GAAI,CACxCqmC,eAAgB,CACfC,QAAS,EAAAnlC,YAAYC,QAIxB,MAAM0I,EAAe,IAAIi9I,EAEzB,MAAahrB,UAA2B,EAAAp7H,aAAxC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,eAIR,mBAEM,KAAK2gF,G,mDACV,MAAMu8D,EAAgBjmJ,KAAK/B,EAAEuD,SAASmlC,aACtC,GAAIs/G,EACH,GAAIA,EAAczlI,gBAAkB,EAAApgB,YAAYC,IAAK,CACpD,MAAM0B,QAAkBkkJ,EAActsI,oBACtC3Z,KAAKkmJ,aAAaD,EAAkClkJ,QAEpD/B,KAAKgyB,OAAO9T,MAAM3d,IAAI,qCAGvBP,KAAKgyB,OAAO9T,MAAM3d,IAAI,2BAA2BP,KAAKwe,GAAGhd,gBAI3D,aAAaykJ,EAAgClkJ,GAC5C,IAAIf,EAKkD,OAAjDA,EAAae,EAAUgoF,uBAc3B/pF,KAAK6+H,eAAe79H,GAEpBhB,KAAKgyB,OAAO9T,MAAM3d,IAAI,mBA7CzB,wB,2FCdA,4BAGMksB,EAAQ,CAACtZ,uBADf,KACeA,wBACf,QAOA,QAGA,OACA,MAAMgzI,UAAiC,EAAAr9I,iBAAvC,c,oBACC,KAAAuJ,YAAc,EAAAiQ,YAAYhjB,OAAO,aACjC,KAAA8mJ,QAAU,EAAA9jI,YAAYtjB,QAAQ,IAAK,CAClC0lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,KAAA0hH,IAAM,EAAA/jI,YAAYjjB,YAClB,KAAAinJ,kBAAoB,EAAAhkI,YAAYtjB,QAAQ,KACxC,KAAAytH,KAAO,EAAAnqG,YAAYxjB,MAAM,MAE1B,MAAMiK,EAAe,IAAIo9I,EAEzB,MAAalrB,UAAyB,EAAAr7H,aAAtC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,YAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAIrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAC5BgoD,EAAehoE,EAAWgoE,eAEhC,IAAK,IAAID,KAAeC,QACjBhpE,KAAKumJ,6BAA6Bx9E,GAGzC/oE,KAAK6+H,eAAe79H,MAGP,6BAA6B+nE,G,yDAC1C,MAAMvnE,EAAWunE,EAAYnyD,gBAAgBpV,WAEvCa,EAAiBb,EAAS0Q,WAAWkC,SAAS7R,MAC9CikJ,EAAehlJ,EAAS0Q,WAAW01C,OAAOrlD,MAC1Cm6H,EAAiC,QAAtB,EAAGl7H,EAASkqD,kBAAU,eAAEnpD,MACnCkkJ,EAAY,UAAMpkJ,EAAgB,CACvCqkJ,MAAOhqB,EACP70E,QAAS2+F,EACTxwD,WAAYh2F,KAAKwe,GAAG8nI,kBACpB75B,KAAMzsH,KAAKwe,GAAGiuG,OAGf,IAAK,IAAI3xH,EAAI,EAAGA,EAAIkF,KAAKwe,GAAG4nI,QAAStrJ,IACpC2rJ,EAAUE,SAEX,MAAMC,EAAKH,EAAUI,SAErBrlJ,EAASkR,aAAa1S,KAAKwe,GAAGnM,YAAa,IAAIoa,EAAMtZ,uBAAuByzI,EAAI,IAEhFH,EAAUroI,cA3CZ,sB,uLC7BA,QAQA,SACA,SAWA,QAGA,QAEA,SAIA,SACA,SAEA,OAEA,SACA,SACA,SACA,MAAM0oI,UAA0C,EAAAh+I,iBAAhD,c,oBAEC,KAAAs6F,YAAc,EAAA9gF,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,OAC/C,KAAAqiH,mBAAqB,EAAAzkI,YAAY1jB,QAAQ,GACzC,KAAAooJ,kBAAoB,EAAA1kI,YAAY/iB,QAAQ,CAAC,KAAM,MAAO,CAACowB,WAAY,CAACo3H,mBAAoB,KACxF,KAAAE,cAAgB,EAAA3kI,YAAY/iB,QAAQ,CAAC,GAAI,IAAK,CAACowB,WAAY,CAACo3H,mBAAoB,KAChF,KAAAp+I,MAAQ,EAAA2Z,YAAY3jB,OAAO,KAAM,CAChCyZ,SAAU,CAAC3U,EAAoByV,KAC9BgiH,EAA0BsR,qBAAqB/oI,MAMjD,KAAAN,SAAW,EAAAmf,YAAYrjB,cAAc,GAAI,CACxCqmC,eAAgB,CACfC,QAAS,EAAAnlC,YAAYsb,KAEtB8pB,yBAAyB,KAG3B,MAAMz8B,EAAe,IAAI+9I,EACzB,MAAa5rB,UAAkC,EAAAt7H,aAA/C,c,oBACC,KAAAoJ,cAAgBD,EAIN,KAAAqsC,sBAAyE,IAAI,EAAA8wB,sBAErFlmE,KAAM,EAAAknJ,0BAKQ,KAAAC,eAAiB,IAAI,EAAAC,oCAAoCpnJ,MACzD,KAAAqnJ,kBAAoB,IAAI,EAAAC,mCAAmCtnJ,MAgBnE,KAAAunJ,+BAAiCvnJ,KAAKwnJ,yBAAyB3pJ,KAAKmC,MAClE,KAAA+e,6BAA+B,EAAA3e,YAAY0G,GAC7C,KAAA2gJ,kCAAoCznJ,KAAK0nJ,4BAA4B7pJ,KAAKmC,MA7BlF,cACC,MAAO,uBAKR,2BACC,OAAOA,KAAKo1C,sBAMb,wBACC,OAAO,EAER,4BAA4B3xC,GAC3BA,EAAK+oI,uBAEN,uBACCxsI,KAAKmnJ,eAAeQ,kCAGrB,+BACC,MAAO,CAAC,iCAMT,kB,MAMC3nJ,KAAKa,GAAG6G,OAAOkb,UAAU,GAGzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAE1Dv7F,KAAKqY,oBAAoB,2BAA4BrY,KAAKunJ,gCAE1DvnJ,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKuH,qBAAqB2tC,UAAUr3C,KAAKmC,KAAKuH,uBAChFvH,KAAKw/B,UAAUyV,mBAAmBj1C,KAAKynJ,mCACf,QAAxB,EAAAznJ,KAAKohB,2BAAmB,SAAE+zB,OAG3B,YAA+C52C,GAC9C,OAAO0H,MAAMob,YAAY9iB,GAE1B,WACC,OAAO0H,MAAMsb,WAEd,cAAiDhjB,GAChD,OAAO0H,MAAMwb,cAAcljB,GAStB,2B,mDAQDyB,KAAK/B,EAAEkF,SAASgV,WACnBnY,KAAKqnJ,kBAAkBO,wBAClB5nJ,KAAK6nJ,4BACH7nJ,KAAKqnJ,kBAAkBS,4BAWhC,oBACC,OAAO9nJ,KAAKoD,MAAMq9C,OAASzgD,KAAKwe,GAAG4kF,YAG9B,KAAKpiF,G,mDACVhhB,KAAKmnJ,eAAeY,2BACpB,MAAM/mJ,EAAaggB,EAAe,GAIlC3d,QAAQC,IAAI,wBACNtD,KAAKomE,sBAEPpmE,KAAK6nJ,qBACR7nJ,KAAKmnJ,eAAea,wBAGhBhoJ,KAAKmnJ,eAAep7B,oBAClB/rH,KAAKmnJ,eAAehyG,KAAKn0C,IAS3BhB,KAAKqnJ,kBAAkBt7B,cAC3B/rH,KAAKqnJ,kBAAkBY,gBAAgBjnJ,SACjChB,KAAKqnJ,kBAAkBS,wBAG9B9nJ,KAAKmnJ,eAAee,iCACpBloJ,KAAKmnJ,eAAegB,iCAUhBnoJ,KAAK6nJ,oBACR7nJ,KAAK6+H,eAAe79H,GAEpBhB,KAAK+b,gBAAgBoF,cAGjB,sB,mDACDnhB,KAAKuH,qBAAqB+tC,2BACvBt1C,KAAKmnG,oBAGP,gB,mDACL,MAAMn8D,EAAahrC,KAAKooJ,mBAExB,GADA/kJ,QAAQC,IAAI,aAAc0nC,GACtBA,EAAWhwC,OAAS,EAAG,CAC1B,MAAMk5B,EAAkB,IAAI,EAAAq5B,sBAAsB,EAAAA,sBAAsBe,iBACxEtuD,KAAKuH,qBAAqB++F,8BAA8BpyE,GACxDl0B,KAAKuH,qBAAqB2pB,UAAUC,eAAe6Z,SAE7ChrC,KAAKuH,qBAAqB2pB,UAAUm3H,gBACpCroJ,KAAKuH,qBAAqBiuC,eAGjC,MAAM8yG,EAA2CtoJ,KAAKuH,qBAAqB2pB,UAAUo3H,kBACrFtoJ,KAAKmnJ,eAAeoB,oBAAoBD,GACxCtoJ,KAAKqnJ,kBAAkBkB,oBAAoBD,GAO3CtoJ,KAAKmnJ,eAAeqB,oBACpBxoJ,KAAKmnJ,eAAea,8BAEdhoJ,KAAKuH,qBAAqBkhJ,2BASzB,mBACP,MAAM94F,EAA0B,EAAA79B,aAAa42H,4BAA4B1oJ,MACnE6xB,EAAe,EAAAC,aAAaC,kBAAkB/xB,MACpD,GAAI6xB,EAAa72B,OAAS,EAEzB,OADAgF,KAAKgyB,OAAO9T,MAAM3d,IAAI,mCACf,GAER,MAAMgzB,EAAc1B,EAAa,GAIjC,OAHI0B,GACHo8B,EAAMr0D,KAAKi4B,GAELo8B,EAMA,8BAIP,MAGMj0C,EAHO1b,KAAKoD,MAAM4Z,KAGWyE,cAAc,aAAa,IAAMzhB,KAAKoD,MAAM4Z,KAAKqE,YAAY,aAChG3F,EAAIyE,SAHa,OAKjB,MAuBMwoI,EAAajtI,EAAIjY,KA3BI,qBAID,EAACiY,EAAuB7e,KACjD,IAAI8rJ,EAAajtI,EAAIjY,KAAK,mBACpBklJ,GAAcA,EAAWpqJ,MAAQ,EAAA0nE,qBAAqB1nE,SAC3DoqJ,EAAajtI,EAAI2F,YAAY,mBAE9BsnI,EAAWxoI,SAAStjB,GAEpB,IAAI+rJ,EAAiCD,EAAWllJ,KAAK,YAC/CmlJ,GAAkCA,EAA+BrqJ,MAAQ,EAAAimE,eAAejmE,SAC7FqqJ,EAAiCD,EAAWtnI,YAAY,YACxDunI,EAA+BzoI,SAAS,wBAEzCyoI,EAA+B3qJ,EAAEgmC,MAAM1jC,IAAI,GAC3C,MAAMsoJ,EAAqBF,EAAWllJ,KAAK,WAQ3C,OAPIolJ,GACHA,EAAmBjnI,UAClB,eACAgnI,EACA,EAAApkF,eAAeplB,aAGVupG,GAE2CG,CAAkBptI,EA3B1C,oBA4B3B,GAAIitI,EAAY,CACf,MAAM1zD,EAAW0zD,EAAWtgJ,YACxBrI,KAAK/B,EAAEkF,SAASukB,WAAautE,GAChCj1F,KAAK/B,EAAEkF,SAAS5C,IAAI00F,KArOxB,+B,2FC3DA,SAGA,4BASA,SACA,QAGA,SAGA,QACA,QACA,QACA,QAIA,MAAaiyD,UAAiC,EAAA72H,sBAG7C,wBAGU,iCAAiC2C,GAC1C,OAAO,UAOF,U,yDACChzB,KAAK+oJ,yCACL/oJ,KAAKgpJ,oBAGZ,0BAA0Bh2H,G,MAEzB,MAAMpqB,EAAO,GACb,IAAK,IAAInF,KAAQzD,KAAKoxB,YACrB,OAAQ3tB,EAAKlF,MACZ,IAAK,SACJqK,EAAKtN,KAAKmI,GACV,MAED,IAAK,YAAa,CAEjB,MAAM4O,EAAe5O,EAAyBoQ,eACxC65C,EAA+C,QAAvC,EAAG1tD,KAAKytD,uCAA+B,eAAEC,SAASr7C,GAChE,GAAIq7C,GAAYA,EAASI,WAAY,CACLJ,EAASI,WAAW96B,aACrBA,GAC7BpqB,EAAKtN,KAAKmI,GAGZ,OAIH,OAAOmF,EAER,0BAA0BoqB,G,MACzB,MAAMpqB,EAAO,GACb,IAAK,IAAInF,KAAQzD,KAAK2qC,YACrB,OAAQlnC,EAAKlF,MACZ,IAAK,UACJqK,EAAKtN,KAAKmI,GACV,MAED,IAAK,YAAa,CAEjB,MAAM4O,EAAuB5O,EAAyBoQ,eAChD65C,EAA+C,QAAvC,EAAG1tD,KAAKytD,uCAA+B,eAAEC,SAASr7C,GAChE,GAAIq7C,GAAYA,EAASI,WAAY,CACLJ,EAASI,WAAW96B,aACrBA,GAC7BpqB,EAAKtN,KAAKmI,GAGZ,OAIH,OAAOmF,EAEF,mC,yDACL,MAAM0hG,EAAiB,IAAI,EAAAC,mBAAmCvqG,KAAMA,KAAK+wB,iBACzE/wB,KAAK2qC,YAAc2/D,EAAe2+C,kBAAkBjpJ,KAAKoxB,aAEzD,IAAK,IAAI3tB,KAAQzD,KAAKoxB,kBACf3tB,EAAK+E,OAAOy+B,WAEnB,IAAK,IAAIxjC,KAAQzD,KAAK2qC,kBACflnC,EAAK+E,OAAOy+B,WAGnB5jC,QAAQC,IAAI,iBAAkBtD,KAAKoxB,YAAapxB,KAAK2qC,aACrD3qC,KAAKytD,gCAAkC,IAAI,EAAAy7F,6BAC3ClpJ,KAAKytD,gCAAgC07F,qCAAqCnpJ,KAAKoxB,YAAapxB,KAAK2qC,aAI7F3qC,KAAKk0B,kBACkD,QAAzD,EAAUl0B,KAAKk0B,uBAA0C,SAAEk1H,mCAC3DppJ,KAAKytD,kCAIPztD,KAAKksC,2BAEA,iB,mDACLlsC,KAAKmyB,iBAAmB,IAAI5B,IAC5BvwB,KAAK+yB,OAAS,IAAIxC,IAClBltB,QAAQC,IAAI,oBAAqBtD,KAAKizB,cACtC,IAAK,IAAID,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMC,EAAWlzB,KAAKmzB,iCAAiCH,GACvDhzB,KAAK+yB,OAAOxyB,IAAIyyB,EAAaE,EAAStkB,MAAM,OAEzC5O,KAAKoxB,YAAYp2B,OAAS,UAEvBgF,KAAKozB,sBAAsBpzB,KAAKoxB,aAEtCpxB,KAAKqzB,gBAGN,IAAK,IAAIL,KAAehzB,KAAKizB,aAAc,CAC1C,MAAMK,EAAQtzB,KAAK+yB,OAAO71B,IAAI81B,GAC1BM,IACHjwB,QAAQC,IAAI0vB,EAAaM,EAAMpuB,KAAK,OACpClF,KAAKmyB,iBAAiB5xB,IAAIyyB,EAAaM,EAAMpuB,KAAK,YAUrD,kBAAkB82B,GACjBA,EAAajb,UAAU,EAAAriB,UAAUc,QAAS,WAAY,CAAC,EAAG,EAAG,IAC7Dw8B,EAAajb,UAAU,EAAAriB,UAAUc,QAAS,WAAY,CAAC,EAAG,EAAG,IAG9D,mBAAmBw1B,GAClBA,EAAan0B,GAAGC,QAAQqG,mCAAmC,CAC1D,IAAI,EAAAg5B,0BAA0B,WAAY,EAAAt8B,oBAAoBK,MAC9D,IAAI,EAAAi8B,0BAA0B,WAAY,EAAAt8B,oBAAoBK,MAE9D,IAAI,EAAAi8B,0BAA0B,OAAQ,EAAAt8B,oBAAoB/E,SAG5D,0BACC,OAAO,EAGR,qCACC,OAAQkB,KAAKytD,gCACZztD,KAAKytD,iCAAmC,IAAI,EAAAy7F,6BAQ9C,wB,MACC,OAA2C,QAApC,EAAAlpJ,KAAKytD,uCAA+B,eAAElhB,0BAA2B,GAMzE,0BACC,MAAO,GAOR,mBACC,OAAOvsC,KAAKqpJ,+BAA+Bp2H,gBAAkB,GAE9D,4BAA4B8Z,EAA2B/Z,GACtD,OAAOhzB,KAAKqpJ,+BAA+BvwF,4BAA4B/rB,EAAW/Z,IAAgB,GASzF,oBAAoBA,GAC7B,MAAO,mBAEE,kBAAkBA,GAC3B,MAAO,iBAEE,gBAAgBA,GACzB,MAAO,CAAC,mBAAoB,kBAQ7B,qBACCs2H,EACA91H,EACAtZ,EACAqkB,EACA91B,G,MAEA,GAAIyR,EAAO,CACV,MAAMwZ,EAAY41H,EAAYx8I,mBAAmB0mB,GAC3CI,EAAU,EAAAtrB,UAAUjD,QAAQquB,GAClC,GAAIE,EAAS,CACZ,MAAMg6B,EAAmB5tD,KAAKqpJ,+BAA+B37F,SAASnvB,GAGhEvL,EAAcvqB,EAA8BgsB,oBAClD,GAAIm5B,IAA+C,QAA3B,EAAAA,EAAiBE,kBAAU,eAAE96B,cAAeA,EAAa,CAChF,MAEM6kC,EAAO,gBAFKjK,EAAiBta,eAES1f,IAC5CnrB,EAA8BwE,eAAeq8I,EAAa,CAACzxF,GAAO7kC,MAMtE,sBAAsBO,EAA6B9qB,GAClD,MAAMuqB,EAAcvqB,EAA8BgsB,oBAC5CC,EAAc10B,KAAKqpJ,+BAA+BvwF,4BAA4BvlC,EAAaP,GACjG,GAAI0B,EACH,IAAK,IAAIlB,KAAckB,EAAa,CACnC,MAAMxa,EAAQqZ,EAAY1yB,GAAG6G,OAAO+rB,YAAYD,GAEhD,GAAItZ,EAAO,CACV,MAAMqkB,EAAgB/K,EACtBxzB,KAAKupJ,qBACJh2H,EACAC,EACAtZ,EACAqkB,EACA91B,KAYL,yBACCosB,EACApsB,G,QAEA,GAAIosB,EAAe20H,aAAc,CAChC,MAAMx1H,EAAUa,EAAeb,UACzBngB,EAAiBghB,EAAehhB,eAChC2B,EAAgC,QAAvB,EAAGxV,KAAKk0B,uBAAe,eAAEC,eACvCU,EACAb,EACAngB,EACApL,GAEKqsB,EAAWD,EAAezsB,YAAYysB,EAAe1sB,aACrD4E,EAAY,GAAGinB,KAAWc,OAActf,IAC9C/M,EAA8BwE,eAAe4nB,EAAgB,CAAC9nB,IAG9D,MAAM6gD,EAAmB5tD,KAAKqpJ,+BAA+B37F,SAAS75C,GAChEmf,EAAcvqB,EAA8BgsB,oBAClD,GAAIm5B,IAA+C,QAA3B,EAAAA,EAAiBE,kBAAU,eAAE96B,cAAeA,EAAa,CAChF,MAAM06B,EAAW1tD,KAAKqpJ,+BAA+B37F,SAAS75C,GAC9D,GAAI65C,EAAU,CACb,MACM3gD,EAAY,gBADA2gD,EAASpa,eACsBxe,IACjDrsB,EAA8BwE,eAAe4nB,EAAgB,CAAC9nB,MAWjE,GAAI8nB,EAAe2qB,aAAc,CAChC,MAAMtlC,EAAQ2a,EAAe40H,uBAC7B,GAAIvvI,EAAO,CACV,MAAMqkB,EAAgB1J,EAAehhB,eAErC7T,KAAKupJ,qBACJ10H,EACAA,EAAerB,WACftZ,EACAqkB,EACA91B,KAKJ,uBAAuBusB,EAA6BvsB,GACnD,IAAK,IAAIN,KAAe6sB,EAAan0B,GAAGC,QAAQu0B,oBAC/C,OAAQltB,GACP,IAAK,OACJnI,KAAK0pJ,qBAAqB10H,EAAc7sB,EAAaM,GACrD,MACD,QACCzI,KAAK2pJ,wBAAwB30H,EAAc7sB,EAAaM,IAKpD,qBACPusB,EACA7sB,EACAM,GAEA,MAAM2sB,EAAa,IAAI,EAAAG,oBAAoBP,EAAc,EAAAnxB,oBAAoB/E,MAAOqJ,GACpFM,EAA8ByE,gBAAgB8nB,EAAc,CAACI,IAE7D,MACMroB,EAAY,SADDioB,EAAa5sB,YAAYD,QACDA,IACzCM,EAA8BwE,eAAe+nB,EAAc,CAACjoB,IAC5D/M,KAAK21B,8BAGE,wBACPX,EACA7sB,EACAM,G,MAEA,MAAMT,EAA0BgtB,EAAan0B,GAAGC,QAAQu9B,uCAAuCl2B,GAC/F,GAAIH,EAAyB,CAC5B,MAAMgsB,EAAUhsB,EAAwBzJ,KAElCqrJ,EAAkC,QAAvB,EAAG5pJ,KAAKk0B,uBAAe,eAAEC,eACzCa,EACAhB,EACA7rB,EACAM,GAGKsE,EAAY,GAAGinB,KADJgB,EAAa5sB,YAAYD,QACIyhJ,IAC9CnhJ,EAA8BwE,eAAe+nB,EAAc,CAACjoB,MAjV/D,8B,6BC1BA,OAAe,uJ,2FCAf,2BACA,2BACA,4BACA,4BACA,SAIA,SAEA,QAEA,QAOA,qCAIC,cAHQ,KAAA88I,aAAoC,GACpC,KAAAC,uBAAiC,EAGzC,qCAAqC9+G,EAA8B++G,GAElE,MAAMC,EAAY,GAGlB,IAAK,IAAIvmJ,KAAQunC,EAAY,CAC5B,MAAMw8C,EAAU/jF,EAAKqoB,cACrB,OAAQroB,EAAKlF,MACZ,IAAK,SACJ,IAAK,IAAIu1B,KAAoBrwB,EAAK5C,GAAG6G,OAAOmF,8BAA+B,CAE1E,GADcpJ,EAAK5C,GAAG6G,OAAO+rB,YAAYK,EAAiBj3B,MAC/C,CAGV,MAAM6wD,EAAW,IAAI,EAAAu8F,gBACpBn2H,EAAiBj3B,KACjB,EAAA6H,kCAAkCovB,EAAiBv1B,OAEpDmvD,EAASw8F,kBAAkB1iE,GAC3BwiE,EAAU1uJ,KAAKoyD,IAGjB,MAED,IAAK,YAAa,CACjB,MAAM0kC,EAAc3uF,EACdgwB,EAAqC2+D,EAAYq3D,uBACjD31H,EAESs+D,EAAY+3D,mCAC3B,GAAI12H,GAAeK,EAAkB,CAGpC,MAAM45B,EAAW,IAAI,EAAAu8F,gBACpB73D,EAAYv+E,eACZ,EAAAnP,kCAAkCovB,EAAiBv1B,OAEpDmvD,EAASw8F,kBAAkB1iE,GAC3BwiE,EAAU1uJ,KAAKoyD,GAEhB,QAIH,IAAK,IAAIjqD,KAAQsmJ,EAAY,CAC5B,MAAMviE,EAAU/jF,EAAKqoB,cACrB,OAAQroB,EAAKlF,MACZ,IAAK,UAAW,CACf,MAAMy2B,EAAevxB,EACf2mJ,EAA0B,CAAC,WAAY,SAAU,QAAS,MAEhE,IAAK,IAAIjiJ,KAAe6sB,EAAan0B,GAAGC,QAAQu0B,oBAAqB,CAMpE,GAFqB+0H,EAAwBtkG,SAAS39C,GAEpC,CACjB,MAAM2rB,EAAmBkB,EAAan0B,GAAGC,QAAQu9B,uCAChDl2B,GAED,GAAI2rB,EAAkB,CACrB,MAAME,EAAUF,EAAiBv1B,KAC3BmvD,EAAW,IAAI,EAAAu8F,gBACpB9hJ,EACA,EAAAzD,kCAAkCsvB,IAEnC05B,EAASw8F,kBAAkB1iE,GAC3BwiE,EAAU1uJ,KAAKoyD,KAIlB,MAED,IAAK,YAAa,CACjB,MAAM74B,EAAiBpxB,EACjBqwB,EAAmBe,EAAe7sB,0BACxC,GAAI8rB,EAAkB,CAGrB,MAAM45B,EAAW,IAAI,EAAAu8F,gBACpBp1H,EAAehhB,eACf,EAAAnP,kCAAkCovB,EAAiBv1B,OAEpDmvD,EAASw8F,kBAAkB1iE,GAC3BwiE,EAAU1uJ,KAAKoyD,GAEhB,QAKH1tD,KAAKqqJ,mBAAmBL,GAEzB,mBAAmBA,GAClB,MAAMM,EAA4B,UAAcN,EAAYt8F,IACnDA,EAASljD,MAElB,IAAK,IAAIkjD,KAAY48F,EACpBtqJ,KAAKuqJ,kBAAkB78F,GAGzB,kBAAkB88F,G,MACjB,IAAIC,EAAYzqJ,KAAK0qJ,aAAaF,EAAa3tJ,MAC/C,GAAI4tJ,EAAW,CACd,MAAME,EAAqB3qJ,KAAKgqJ,YAAYjgI,OAAQ9kB,GAAMA,EAAEpI,MAAQ2tJ,EAAa3tJ,MAAM,GAC5D,QAA3B,EAAA2tJ,EAAa13F,sBAAc,SAAElxD,QAAQ,CAACskC,EAASpa,KAC9C6+H,EAAmBT,kBAAkBp+H,SAEhC,CACN,IAAK2+H,EACJ,IAAK,IAAI38F,KAAc9tD,KAAK6pJ,cACtBY,GAAa38F,EAAW88F,uBAAuBJ,KACnD18F,EAAW+8F,aAAaL,GACxBC,GAAY,GAIf,IAAKA,EAAW,CACf,MAAMK,EAAiB,IAAI,EAAAC,kBAAkB/qJ,KAAKgrJ,wBAClDhrJ,KAAK6pJ,aAAavuJ,KAAKwvJ,GACvBA,EAAeD,aAAaL,KAK/B,uBACC,MAAM3tJ,EAAO,EAAA2T,oBAAoBxQ,KAAK8pJ,wBAEtC,OADA9pJ,KAAK8pJ,wBAA0B,EACxBjtJ,EAGR,eACC,MAAMouJ,EAAwBjrJ,KAAK6pJ,aAAa7kJ,IAAKkL,GAAMA,EAAE8iB,aAW7D,OAAO,UAAYi4H,GAEpB,wBACC,MAAO,GAKR,2BAA2Bj4H,GAC1B,OAAOhzB,KAAK6pJ,aAAa9/H,OAAQ7Z,GAAMA,EAAE8iB,aAAeA,GAAa,GAEtE,4BAA4B+Z,EAA2B/Z,GACtD,MAAM86B,EAAa9tD,KAAKkrJ,2BAA2Bl4H,GACnD,GAAI86B,EACH,OAAOA,EAAWq9F,qBAAqBp+G,GASzC,SAASxO,GACR,IAAK,IAAIuvB,KAAc9tD,KAAK6pJ,aAAc,CACzC,MAAMn8F,EAAWI,EAAWJ,SAASnvB,GACrC,GAAImvB,EACH,OAAOA,GAIV,YACC,OAAO,UAAe1tD,KAAK6pJ,aAAa7kJ,IAAKkL,GAAMA,EAAE85I,WAAa,KAEnE,aAAantJ,GACZ,MAAMwgC,EAAQr9B,KAAKgqJ,YAAYhlJ,IAAKC,GAAMA,EAAEpI,MAC5C,OAAO,UAAgBwgC,EAAOxgC,GAY/B,QAAQuG,GACP,OAAOpD,KAAK6pJ,aAAa7kJ,IAAK8oD,IAChB,CACZ,CAACA,EAAWE,cAAeF,EAAW5rC,QAAQ9e,MAKjD,MAAMA,GACLC,QAAQC,IAAI+mC,KAAKC,UAAUtqC,KAAKkiB,QAAQ9e,GAAQ,CAAC,IAAK,O,8EC5NxD,0BAIC,YAAoB21D,GAAA,KAAAA,eAFZ,KAAA28D,MAAgB,EAIxB,aAAahoE,GACZ1tD,KAAKorJ,WAAaprJ,KAAKorJ,YAAc,GACrCprJ,KAAKorJ,WAAW9vJ,KAAKoyD,GACrBA,EAASpxB,aAAat8B,KAAK01H,OAC3BhoE,EAAS29F,eAAerrJ,MACxBA,KAAK01H,OAAShoE,EAASljD,KAGxB,uBAAuBkjD,GACtB,OAAO1tD,KAAK01H,MAAQhoE,EAASljD,MAAQ,EAEtC,kBACC,OAAOxK,KAAK+4D,aAEb,mBACC,MAAO,WAAW/4D,KAAK+4D,eAGxB,gBACC,OAAO/4D,KAAKorJ,WAEb,yBAAyBr+G,G,MACxB,OAAsB,QAAtB,EAAO/sC,KAAKorJ,kBAAU,eAAErhI,OAAQ2jC,IAAY,MAAC,OAAuB,QAAvB,EAAAA,EAASoF,sBAAc,eAAE95B,IAAI+T,EAAUjhB,kBAAkB,IAEvG,qBAAqBihB,G,MACpB,OAA+C,QAA/C,EAAO/sC,KAAKsrJ,yBAAyBv+G,UAAU,eAAE/nC,IAAKC,GAAMA,EAAEpI,MAQ/D,SAAS0hC,GACR,GAAIv+B,KAAKorJ,WACR,IAAK,IAAI19F,KAAY1tD,KAAKorJ,WACzB,GAAI19F,EAAS7wD,MAAQ0hC,EACpB,OAAOmvB,EAMX,QAAQtqD,G,MACP,OAAsB,QAAtB,EAAOpD,KAAKorJ,kBAAU,eAAEpmJ,IAAKC,GAAMA,EAAEid,QAAQ9e,O,8EC/C/C,wBAMC,YAAoB2C,EAAuB2vH,GAC1C,GADmB,KAAA3vH,QAAuB,KAAA2vH,QAJnC,KAAAjqD,WAAqB,GAKvB1lE,EACJ,KAAM,kCAIR,eAAe+nD,GACd9tD,KAAKurJ,YAAcz9F,EAEpB,iBACC,OAAO9tD,KAAKurJ,YAGb,qBACC,OAAOvrJ,KAAKwrJ,gBAEb,kBAAkB97I,GACjB1P,KAAKwrJ,gBAAkBxrJ,KAAKwrJ,iBAAmB,IAAIj7H,IACnDvwB,KAAKwrJ,gBAAgBjrJ,IAAImP,GAAI,GAE9B,WACC,OAAO1P,KAAK+F,MAEb,WACC,OAAO/F,KAAK01H,MAGb,aAAathH,GACZpU,KAAKyrE,UAAYr3D,EAElB,eACC,OAAOpU,KAAKyrE,UAEb,gBACC,MAAO,OACL78D,MAAM,IACN1S,OAAO8D,KAAKyrE,UAAWzrE,KAAK01H,OAC5BxwH,KAAK,IAER,QAAQ9B,GACP,MAAMi6B,EAAkB,GAQxB,OAPIr9B,KAAKwrJ,iBACRxrJ,KAAKwrJ,gBAAgB5pJ,QAAQ,CAACskC,EAASshD,KACtC,MAAM3qF,EAAOuG,EAAMuU,MAAM+hD,aAAa8tB,GAAS3qF,KAC/CwgC,EAAM/hC,KAAKuB,KAIN,CACNA,KAAMmD,KAAKnD,KACX8yD,MAAOtyB,EAAMptB,W,2FChEhB,4BAUA,SAGA,SAMA,2CAMC,YAAoBxM,GAAA,KAAAA,OAJV,KAAAgoJ,yBAAuC,GAgBjD,oBAAoBnD,GACnBtoJ,KAAKmyB,iBAAmBm2H,EACxBtoJ,KAAK4nJ,wBAGN,yBACC,GAAK5nJ,KAAK0rJ,iBAAV,CAIA,IAAK,IAAI7rB,KAAY7/H,KAAKyrJ,yBAA0B,CACnD,MAAM1tJ,EAAS8hI,EACX9hI,EAAOyD,WACVzD,EAAOoF,SAAWnD,KAAK0rJ,iBACvB,EAAAloJ,aAAaojD,uBAAuB7oD,EAAQiC,KAAK0rJ,kBACjD3tJ,EAAO0lB,kBAAmB,EAC1B1lB,EAAOomB,gBAOTnkB,KAAK0rJ,iBAAiBx7H,aAAc,EACpClwB,KAAK2rJ,mCAEN,kC,MACM3rJ,KAAK0rJ,mBAQW,QAArB,EAAA1rJ,KAAKmyB,wBAAgB,SAAEvwB,QAAQ,CAAC6wD,EAAQz/B,K,MACvC,MAAMwI,EAAsE,QAA/D,EAAGx7B,KAAKyD,KAAK0jJ,eAAeyE,uBAAuB54H,UAAY,eAAEwI,QAC9E,GAAIA,EAAS,CACZ,MAAM0P,EAAe,WAAWlY,IAC5BhzB,KAAK0rJ,mBACR1rJ,KAAK0rJ,iBAAiBj5H,SAASyY,GAAc5tC,MAAQk+B,EACrD,EAAAh4B,aAAaqoJ,uBAAuB7rJ,KAAK0rJ,iBAAkBxgH,EAAc1P,QAQ7E,wBACCx7B,KAAK0rJ,sBAAmBnnJ,EACxBvE,KAAKyrJ,yBAA2B,GAEjC,kBACC,OAAgC,MAAzBzrJ,KAAK0rJ,iBAGb,gBAAgB1qJ,GACf,IAAK,IAAIqpE,KAASrpE,EAAWC,UAC5BjB,KAAKyrJ,yBAAyBnwJ,KAAK+uE,GAG/B,uB,yDAIL,GAAIrqE,KAAK0rJ,iBACR,OAYG1rJ,KAAKyD,KAAKxF,EAAEkF,SAASgV,iBAClBnY,KAAKyD,KAAKxF,EAAEkF,SAASywC,WAE5B,MAAM4qG,EAAWx+I,KAAKyD,KAAKxF,EAAEkF,SAASwjC,aAEtC,GAAI63G,EAAU,CACb,MAAMsN,EAAiE9rJ,KAAKyD,KAAK8D,qBAAqB2pB,UAAUm4H,+BAA+BnnI,QAC9IliB,KAAKyD,KAAKL,OAGL8wB,EAAkB,IAAI,EAAAq5B,sBAAsB,EAAAA,sBAAsBc,YACxEn6B,EAAgBk1H,mCACfppJ,KAAKyD,KAAK8D,qBAAqB2pB,UAAUm4H,gCAE1C7K,EAASj3I,qBAAqB++F,8BAA8BpyE,GAE1Dl0B,KAAK+rJ,2BACN1hH,KAAKC,UAAUtqC,KAAK+rJ,4BAA8B1hH,KAAKC,UAAUwhH,KAMjE9rJ,KAAK+rJ,0BAA4B,UAAiBD,GAClDtN,EAASxmI,aAKV,MAAMjW,QAAkBy8I,EAAS7kI,oBACjC3Z,KAAK0rJ,iBAAmB3pJ,EAAUoB,gBAKlCnD,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,6BAS5B,GAAIP,KAAK0rJ,iBAAkB,CAC1B,MAAMj5H,EAAWzyB,KAAK0rJ,iBAAiBj5H,SAElB,QAArB,EAAAzyB,KAAKmyB,wBAAgB,SAAEvwB,QAAQ,CAACooH,EAAQh3F,KACvC,MAAMkY,EAAe,WAAWlY,IAC1B4b,EAAgB,CAACtxC,MAAO,MAC9Bm1B,EAASyY,GAAgB0D,EACrB5uC,KAAK0rJ,kBACR,EAAAloJ,aAAawoJ,8BAA8BhsJ,KAAK0rJ,iBAAkBxgH,EAAc0D,KAMnF5uC,KAAKisJ,+B,2FC9KP,OAEA,QACA,SAEA,OAOA,SAMA,SACA,SAKA,QAoBA,4CAqBC,YAAoBxoJ,GAAA,KAAAA,OAnBV,KAAAyoJ,8BAAwC,EAMxC,KAAA53I,QAAuB,GAEzB,KAAA63I,kBAAqE,IAAI57H,IACzE,KAAA67H,0BAA0D,IAAI77H,IAQ9D,KAAA87H,oBAA+B,IAAI,EAAAx1H,QAuB3C,oBAAoByxH,GACnBtoJ,KAAKmyB,iBAAmBm2H,EACxBtoJ,KAAKwoJ,oBAEA,KAAKxnJ,G,mDACVhB,KAAKssJ,2BAA2BtrJ,SAC1BhB,KAAKusJ,wBAGZ,uBAAuBv5H,G,MACtB,MAAM06B,EAAW1tD,KAAKmsJ,kBAAkBjvJ,IAAI81B,GAC5C,GAAI06B,EACH,OAAwB,QAAxB,EAAO1tD,KAAKwsJ,oBAAY,eAAEZ,uBAAuBl+F,GAInD,2BAA2B1sD,GAC1BhB,KAAKwoJ,oBAEAxnJ,IAILhB,KAAKysJ,sBAAwBzrJ,EAW7BhB,KAAKsU,QAAUtU,KAAKy8H,eAAiB,IAGtC,iCACC,MAAMh8E,EAAQzgD,KAAKyD,KAAKL,MAAMq9C,MACxB2iD,EAAsBpjG,KAAKyD,KAAK+a,GAAG4kF,YACrC3iD,GAAS2iD,IACsB,MAA9BpjG,KAAK0sJ,wBACR1sJ,KAAK0sJ,sBAAwBtpD,EAAc,GAExC3iD,EAAQzgD,KAAK0sJ,uBAChB1sJ,KAAK2sJ,oBAAoBlsG,EAAQzgD,KAAK0sJ,wBAKjC,oBAAoBngJ,EAAQ,GACnC,GAAKvM,KAAKwsJ,aAAV,CAIAxsJ,KAAK4sJ,sCAEL,IAAK,IAAI9xJ,EAAI,EAAGA,EAAIyR,EAAOzR,IAC1BkF,KAAKwsJ,aAAa54G,UAEnB5zC,KAAKyD,KAAK4jJ,kBAAkBsE,kCAC5B3rJ,KAAK0sJ,sBAAwB1sJ,KAAKyD,KAAKL,MAAMq9C,OAKxC,qB,2DACL,GAAIzgD,KAAKyD,KAAK+a,GAAGuoI,mBAAoB,CACpC,MAAM8F,EAAuB,EAAA9oI,SAAS+oI,cAActgJ,KAAKoiB,KAAK5uB,KAAKsU,QAAQtZ,SAC3EgF,KAAKqsJ,oBAAoB/mJ,EAAIkH,KAAKof,IAAIihI,EAAsB7sJ,KAAKyD,KAAK+a,GAAGwoI,kBAAkB1hJ,GAC3FtF,KAAKqsJ,oBAAoB9mJ,EAAIiH,KAAKof,IAAIihI,EAAsB7sJ,KAAKyD,KAAK+a,GAAGwoI,kBAAkBzhJ,OACrF,CACN,IAEE,EAAAwgB,UAAUgnI,aAAa/sJ,KAAKyD,KAAK+a,GAAGyoI,cAAc3hJ,KAClD,EAAAygB,UAAUgnI,aAAa/sJ,KAAKyD,KAAK+a,GAAGyoI,cAAc1hJ,GAInD,YADAvF,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,qCAI5B,MAAMysJ,EAAsBhtJ,KAAKyD,KAAK+a,GAAGyoI,cAAc3hJ,EAAItF,KAAKyD,KAAK+a,GAAGyoI,cAAc1hJ,EACtF,GAAIvF,KAAKsU,QAAQtZ,OAASgyJ,EAIzB,YAHAhtJ,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IACtB,4BAA4BP,KAAKyD,KAAK+a,GAAGyoI,cAAc3hJ,KAAKtF,KAAKyD,KAAK+a,GAAGyoI,cAAc1hJ,OAAOynJ,KAIhGhtJ,KAAKqsJ,oBAAoBzoI,KAAK5jB,KAAKyD,KAAK+a,GAAGyoI,eAG5CjnJ,KAAKyD,KAAKuuB,OAAO+xD,eAAewjB,uBAChCvnG,KAAKitJ,sBAELjtJ,KAAKyD,KAAK4jJ,kBAAkBO,wBAG5B,MAAMvpI,QAAiB,EAAAjD,KAAKZ,qBAAqB0zF,oBAC7C7vF,EACHre,KAAK0mG,UAAYroF,EAEjBre,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,qBAc5B,MAAMqzC,EAAU,IAAI,EAAAs5G,uBACnBltJ,KAAKqsJ,oBAAoB/mJ,EACzBtF,KAAKqsJ,oBAAoB9mJ,EACzBvF,KAAK0mG,WAIN,GAFA1mG,KAAKwsJ,aAAyB54G,GAEzB5zC,KAAKwsJ,aAET,YADAxsJ,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI,+CAI5BP,KAAK0sJ,2BAAwBnoJ,EAK7BvE,KAAKmsJ,kBAAkBvqJ,QAAQ,CAAC8rD,EAAU16B,KACzC06B,EAASy/F,cAAc,GAAG/uI,UAC1BsvC,EAASy/F,cAAc,GAAG/uI,UAC1Bpe,KAAKmsJ,kBAAkBvtE,OAAO5rD,KAG/B,MAAMo6H,EAAkD,GACnC,QAArB,EAAAptJ,KAAKmyB,wBAAgB,SAAEvwB,QAAQ,CAACooH,EAAQh3F,KACvC,GAAIhzB,KAAKwsJ,aAAc,CACtB,MAAM9+F,EAAW1tD,KAAKwsJ,aAAaa,YAClC,WAAWr6H,IACXg3F,EACAhqH,KAAKosJ,0BAA0BlvJ,IAAI81B,IAEpChzB,KAAKmsJ,kBAAkB5rJ,IAAIyyB,EAAa06B,GACxC0/F,EAAc9xJ,KAAKoyD,MAMC,QAAtB,EAAA1tD,KAAKmsJ,yBAAiB,SAAEvqJ,QAAQ,CAAC8rD,EAAU16B,KACtChzB,KAAKwsJ,cACRxsJ,KAAKwsJ,aAAac,wBACjB5/F,EACA0/F,KAKHptJ,KAAKutJ,iCACLvtJ,KAAKwtJ,iBACLxtJ,KAAKytJ,sCAEL,IAAIvvI,EAAQle,KAAKwsJ,aAAar3G,OAEhB,OAAVj3B,IACH7a,QAAQ6a,MAAMA,GACdle,KAAKyD,KAAKuuB,OAAO9T,MAAM3d,IAAI2d,OAIrB,sCACPle,KAAKmsJ,kBAAkBvqJ,QAAQ,CAAC8rD,EAAU16B,KACzC,MAAMP,EAAWi7B,EAASvqD,SAASsvB,SACnCA,EAAgB,MAAI,CAACn1B,MAAO0C,KAAKyD,KAAKL,MAAMq9C,OAE5C,IAAK,IAAI9jB,KAAgB38B,KAAKyD,KAAK8D,qBAAqB2pB,UAAU0L,gBACjEnK,EAASkK,EAAauO,cAAgBvO,EAAawO,UAI9C,sCACPnrC,KAAKmsJ,kBAAkBvqJ,QAAQ,CAAC8rD,EAAU16B,KACzC06B,EAASvqD,SAASsvB,SAAgB,MAAEn1B,MAAQ0C,KAAKyD,KAAKL,MAAMq9C,QAItD,sBAEP,IAAIqH,EAAM,IAAIrf,aAAmC,EAAtBzoC,KAAKsU,QAAQtZ,QAOxC,IAAIiD,EAAI,EAER,IADA,IAAImtB,EAAQ,EACHpvB,EAAI,EAAGA,EAAIgE,KAAKqsJ,oBAAoB/mJ,EAAGtJ,IAC/C,IAAK,IAAIlB,EAAI,EAAGA,EAAIkF,KAAKqsJ,oBAAoB9mJ,IAC5CuiD,EAAI7pD,KAAOnD,GAAKkF,KAAKqsJ,oBAAoB/mJ,EAAI,GAC7CwiD,EAAI7pD,KAAOjC,GAAKgE,KAAKqsJ,oBAAoB9mJ,EAAI,MAE7C6lB,GAAS,IACI08B,EAAI9sD,SAL8BF,KAWjD,MAAM4yJ,EAAiB,EAAAngG,sBAAsBY,UAC7C,GAAInuD,KAAKysJ,sBACR,IAAK,IAAI71I,KAAiB5W,KAAKysJ,sBAAsBn2I,kBAAmB,CAEvE,MAAM9U,EAAWoV,EAAcpV,WACzBmsJ,EAAwB/2I,EAAcjF,qBACzC,EAAAs+D,yBACA,EAAA49C,gBACHrsH,EAASkR,aAAag7I,EAAgB,IAAIC,EAAsB7lG,EAAK,KAKxE,2BACC,OAAO9nD,KAAKosJ,0BAGL,iBACPpsJ,KAAKosJ,0BAA0BxqJ,QAAQ,CAAC45B,EAASxI,KAChD,MAGM46H,EAHY5tJ,KAAKyD,KAAK8D,qBAAqB2pB,UACAm4H,+BAES6B,2BAA2Bl4H,GACrF,IAAK46H,EACJ,OAED,MAAMC,EAAoBD,EAAmB5D,UAC7C,IAAK6D,EACJ,OAGD,MAAMtrJ,EAAQi5B,EAAQ8I,MAAM9pC,KAE5B,IAAK,IAAIozD,KAAoBigG,EAAmB,CAC/C,MAAMC,EAAmBlgG,EAAiBx5C,SAC1C,IAAImqB,EAAgBqvB,EAAiB/wD,KAKrC,MAAMmY,EAAchV,KAAKsU,QAAQ,GACjC,GAAIU,EAAa,CAEhB,GADmBA,EAAYk1D,WAAW3rC,GAC1B,CACf,MAAM5oB,EAAcX,EAAYW,YAAY4oB,GAC5C,IAAInT,EAAQ0iI,EACZ,IAAK,IAAIn5I,KAAS3U,KAAKsU,QAAS,CAC/B,GAAmB,GAAfqB,EAAkB,CACrB,MAAMlH,EAAMkG,EAAMW,aAAaipB,GAC/Bh8B,EAAM6oB,GAAS3c,OAEfkG,EAAMW,aAAaipB,GAAex5B,QAAQxC,EAAO6oB,GAElDA,GAAS,QAkBf,oBACCprB,KAAKwsJ,kBAAejoJ,EACpBvE,KAAKksJ,8BAA+B,EAErC,2BACClsJ,KAAKksJ,8BAA+B,EAErC,kCACClsJ,KAAKwoJ,oBACLxoJ,KAAKyD,KAAKuU,YAEX,wBAGChY,KAAKysJ,2BAAwBloJ,EAE9B,kBACC,OAAqC,MAA9BvE,KAAKysJ,uBAAsD,MAArBzsJ,KAAKwsJ,aAM3C,iCACPxsJ,KAAKosJ,0BAA0BxqJ,QAAQ,CAAC45B,EAASxI,KAChDwI,EAAQpd,YAGTpe,KAAKosJ,0BAA0BvuI,QAC/B7d,KAAKmsJ,kBAAkBvqJ,QAAQ,CAACgsD,EAAkB56B,KAC7ChzB,KAAKwsJ,cACRxsJ,KAAKosJ,0BAA0B7rJ,IAAIyyB,EAAahzB,KAAKwsJ,aAAauB,mBAIrE,iCACK/tJ,KAAKksJ,8BACRlsJ,KAAKguJ,sBAGC,sBACPhuJ,KAAK0sJ,2BAAwBnoJ,EAE7BvE,KAAKutJ,iCACUvtJ,KAAKy8H,gBAKpBz8H,KAAKwtJ,iBAGLxtJ,KAAKmsJ,kBAAkBvqJ,QAAQ,CAAC8rD,EAAU16B,KACzC,MAAMwI,EAAUx7B,KAAKosJ,0BAA0BlvJ,IAAI81B,GAC/ChzB,KAAKwsJ,cAAgBhxH,IACxBx7B,KAAKwsJ,aAAayB,cAAczyH,EAASkyB,EAASy/F,cAAc,IAChEntJ,KAAKwsJ,aAAayB,cAAczyH,EAASkyB,EAASy/F,cAAc,QAO3D,cACP,IAAKntJ,KAAKysJ,sBACT,OAGD,IAAI9qJ,EAAa3B,KAAKysJ,sBAAsBn2I,kBAC5C,MAAM2zD,EAAiBtoE,EAAW,GAClC,GAAIsoE,EAAgB,CACnB,MAAM1rE,EAAO0rE,EAAet4D,qBAEtBu8I,EAAsB,GAC5B,IAAK,IAAI1sJ,KAAYG,EAChBH,EAASmQ,sBAAwBpT,GACpC2vJ,EAAoB5yJ,KAAKkG,GAG3B,MAAMgT,EAAS,GACf,IAAK,IAAIhT,KAAY0sJ,EACpB,IAAK,IAAIv5I,KAASnT,EAASgT,SAC1BA,EAAOlZ,KAAKqZ,GAGd,OAAOH,EAEP,MAAO,M,6BC1cV,iIA6GI04I,EAAyB,SAAWiB,EAAOC,EAAO/vI,GAErDre,KAAKgqJ,UAAY,GAEjBhqJ,KAAKquJ,oBAAsB,EAE3B,IAAIjrJ,EAAQ,IAAI,QAEZoa,EAAS,IAAI,SACjBA,EAAOpJ,SAAS5O,EAAI,EAEpB,IAAI8oJ,EAAmB,CACtBC,gBAAiB,CAAEjxJ,MAAO,OAGvBkxJ,EAAiBC,EA4Pb,mKA5PmEH,GAEvEhT,EAAO,IAAI,OAAM,IAAI,sBAAqB,EAAG,GAAKkT,GAoJtD,SAASE,EAAqBC,GAE7BA,EAAe3qG,QAAQgyC,WAAa,SAAWm4D,EAAMS,QAAS,GAAM,KAAOR,EAAMQ,QAAS,GAAM,KAQjG,SAASH,EAAsBI,EAAuBp8H,GAErDA,EAAWA,GAAY,GAEvB,IAAItvB,EAAW,IAAI,iBAAgB,CAClCsvB,SAAUA,EACVH,aA4EM,kEA3ENC,eAAgBs8H,IAKjB,OAFAH,EAAqBvrJ,GAEdA,EAzKRC,EAAM+Z,IAAKm+H,GAGXt7I,KAAKqtJ,YAAc,SAAWyB,EAAcD,EAAuBE,GAElE,IAEIrhG,EAAW,CACd7wD,KAAMiyJ,EACNC,oBAAqBA,EACrB5rJ,SALcnD,KAAKyuJ,qBAAsBI,GAMzC55H,aAAc,KACdk4H,cAAe,GACfjrH,MAAO,KACPC,MAAO,KACPC,UAAW,gBACXC,UAAW,iBAKZ,OAFAriC,KAAKgqJ,UAAU1uJ,KAAMoyD,GAEdA,GAIR1tD,KAAKstJ,wBAA0B,SAAW5/F,EAAUz4B,GAEnDy4B,EAASz4B,aAAeA,GAIzBj1B,KAAKm1C,KAAO,WAEX,IAAO92B,EAAS2wI,aAAaC,WACzB5wI,EAAS+1F,WAAWl3G,IAAK,qBAE5B,MAAO,mDAIR,GAAiD,IAA5CmhB,EAAS2wI,aAAaE,kBAE1B,MAAO,yCAIR,IAAM,IAAIp0J,EAAI,EAAGA,EAAIkF,KAAKgqJ,UAAUhvJ,OAAQF,IAAO,CAElD,IAAI4yD,EAAW1tD,KAAKgqJ,UAAWlvJ,GAG/B4yD,EAASy/F,cAAe,GAAMntJ,KAAKmvJ,mBAAoBhB,EAAOC,EAAO1gG,EAASxrB,MAAOwrB,EAASvrB,MAAOurB,EAAStrB,UAAWsrB,EAASrrB,WAClIqrB,EAASy/F,cAAe,GAAMntJ,KAAKmvJ,mBAAoBhB,EAAOC,EAAO1gG,EAASxrB,MAAOwrB,EAASvrB,MAAOurB,EAAStrB,UAAWsrB,EAASrrB,WAClIriC,KAAKiuJ,cAAevgG,EAASqhG,oBAAqBrhG,EAASy/F,cAAe,IAC1EntJ,KAAKiuJ,cAAevgG,EAASqhG,oBAAqBrhG,EAASy/F,cAAe,IAG1E,IACI16H,EADWi7B,EAASvqD,SACAsvB,SACxB,GAA+B,OAA1Bi7B,EAASz4B,aAEb,IAAM,IAAIr4B,EAAI,EAAGA,EAAI8wD,EAASz4B,aAAaj6B,OAAQ4B,IAAO,CAEzD,IAAIwyJ,EAAS1hG,EAASz4B,aAAcr4B,GAEpC,GAAKwyJ,EAAOvyJ,OAAS6wD,EAAS7wD,KAAO,CAIpC,IADA,IAAIwyJ,GAAQ,EACFrzJ,EAAI,EAAGA,EAAIgE,KAAKgqJ,UAAUhvJ,OAAQgB,IAE3C,GAAKozJ,EAAOvyJ,OAASmD,KAAKgqJ,UAAWhuJ,GAAIa,KAAO,CAE/CwyJ,GAAQ,EACR,MAKF,IAAOA,EAEN,MAAO,2CAA6C3hG,EAAS7wD,KAAO,gBAAkBuyJ,EAAOvyJ,KAM/F41B,EAAU28H,EAAOvyJ,MAAS,CAAES,MAAO,OAYtC,OAFA0C,KAAKquJ,oBAAsB,EAEpB,MAIRruJ,KAAK4zC,QAAU,WAKd,IAHA,IAAIy6G,EAAsBruJ,KAAKquJ,oBAC3BiB,EAAgD,IAA7BtvJ,KAAKquJ,oBAA4B,EAAI,EAElDvzJ,EAAI,EAAGguD,EAAK9oD,KAAKgqJ,UAAUhvJ,OAAQF,EAAIguD,EAAIhuD,IAAO,CAE3D,IAAI4yD,EAAW1tD,KAAKgqJ,UAAWlvJ,GAG/B,GAA+B,OAA1B4yD,EAASz4B,aAGb,IADA,IAAIxC,EAAWi7B,EAASvqD,SAASsvB,SACvB71B,EAAI,EAAG2yJ,EAAK7hG,EAASz4B,aAAaj6B,OAAQ4B,EAAI2yJ,EAAI3yJ,IAAO,CAElE,IAAIwyJ,EAAS1hG,EAASz4B,aAAcr4B,GAEpC61B,EAAU28H,EAAOvyJ,MAAOS,MAAQ8xJ,EAAOjC,cAAekB,GAAsB7yH,QAO9Ex7B,KAAKwvJ,eAAgB9hG,EAASvqD,SAAUuqD,EAASy/F,cAAemC,IAIjEtvJ,KAAKquJ,oBAAsBiB,GAI5BtvJ,KAAK4rJ,uBAAyB,SAAWl+F,GAExC,OAAOA,EAASy/F,cAAentJ,KAAKquJ,sBAIrCruJ,KAAKyvJ,yBAA2B,SAAW/hG,GAE1C,OAAOA,EAASy/F,cAA4C,IAA7BntJ,KAAKquJ,oBAA4B,EAAI,IASrEruJ,KAAK0uJ,oBAAsBA,EAqB3B1uJ,KAAKyuJ,qBAAuBA,EAE5BzuJ,KAAKmvJ,mBAAqB,SAAWO,EAAcC,EAAcztH,EAAOC,EAAOC,EAAWC,GAsBzF,OApBAqtH,EAAeA,GAAgBvB,EAC/BwB,EAAeA,GAAgBvB,EAE/BlsH,EAAQA,GAAS,sBACjBC,EAAQA,GAAS,sBAEjBC,EAAYA,GAAa,gBACzBC,EAAYA,GAAa,gBAEN,IAAI,oBAAmBqtH,EAAcC,EAAc,CACrEztH,MAAOA,EACPC,MAAOA,EACPC,UAAWA,EACXC,UAAWA,EACX6lE,OAAQ,aACR3pG,KAAQ,sBAAsBqP,KAAMu6F,UAAUC,WAAgB,gBAAgB,YAC9EC,eAAe,EACfC,aAAa,KAOftoG,KAAK+tJ,cAAgB,WAEpB,IAAIvzJ,EAAO,IAAIiuC,aAAc0lH,EAAQC,EAAQ,GAC7C,OAAO,IAAI,cAAa5zJ,EAAM2zJ,EAAOC,EAAO,aAAY,cAIzDpuJ,KAAKiuJ,cAAgB,SAAW/zI,EAAOmiB,GAMtCiyH,EAAiBC,gBAAgBjxJ,MAAQ4c,EAEzCla,KAAKwvJ,eAAgBhB,EAAgBnyH,GAErCiyH,EAAiBC,gBAAgBjxJ,MAAQ,MAI1C0C,KAAKwvJ,eAAiB,SAAWrsJ,EAAUk5B,GAE1C,IAAIuzH,EAAsBvxI,EAASwxI,kBAEnCvU,EAAKn4I,SAAWA,EAChBkb,EAASspF,gBAAiBtrE,GAC1Bhe,EAASJ,OAAQ7a,EAAOoa,GACxB89H,EAAKn4I,SAAWqrJ,EAEhBnwI,EAASspF,gBAAiBioD,M,8ECtW5B,cACA,QACA,QAQA,OACA,MAAME,UAA4B,EAAAhnJ,iBAAlC,c,oBACC,KAAA+1I,OAAS,EAAAv8H,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,EAAE,EAAG,MAE5C,MAAM37B,EAAe,IAAI+mJ,EAEzB,MAAa30B,UAAoB,EAAAv7H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKp6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAElC,IAAIpK,EAAejC,EACnB,IAAK,IAAI5W,KAAUiD,EAAWC,UAC7BlD,EAAOwoD,SAAUwpG,IAChB,IAAIvuJ,EACJ,GAAsE,OAAjEA,EAAYuuJ,EAAsBvuJ,UAAqC,CAE3E,IAAKmT,KADLiC,EAAgB,IAAI,EAAAzF,aAAa3P,GACnBoV,EAAcpC,UAAU,CACrC,MAAMozC,EAASjzC,EAAMizC,SAEf8jB,EADW/2D,EAAMP,WACOrR,QAAQoa,IAAIyqC,EAAO/jC,eAAe7jB,KAAKwe,GAAGqgI,SACxElqI,EAAM2nB,aAAaovC,GAGpB,IAAK1rE,KAAKa,GAAG6G,OAAO84H,aAAa,GAAI,CACrB5pH,EAAcpV,WAAWc,aApC7B,YAqCJ4tB,aAAc,MAKzBlwB,KAAK6+H,eAAe79H,IAlCtB,iB,8EChBA,aACA,OACA,QACA,QACA,QAEA,QAEMgsI,EAAa,IAAI,EAAA55H,QAAQ,EAAG,EAAG,GAC/B48I,EAAe,IAAI,EAAA58I,QAAQ,EAAG,EAAG,GACjC68I,EAAa,IAAI,EAAA78I,QAAQ,EAAG,EAAG,GAErC,OACA,MAAM88I,UAA6B,EAAApnJ,iBAAnC,c,oBACC,KAAA0B,KAAO,EAAA8X,YAAY/iB,QAAQ,CAAC,EAAG,IAC/B,KAAA4wJ,mBAAqB,EAAA7tI,YAAY1jB,QAAQ,GACzC,KAAA4uB,UAAY,EAAAlL,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACwgI,mBAAoB,KACnE,KAAAp1E,SAAW,EAAAz4D,YAAY/iB,QAAQ,CAAC,EAAG,GAAI,CAACowB,WAAY,CAACwgI,mBAAoB,KACzE,KAAA53B,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACvC,KAAAkqE,OAAS,EAAApnD,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAErC,MAAMuJ,EAAe,IAAImnJ,EAEzB,MAAa90B,UAAqB,EAAAx7H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAJ9B,cACC,MAAO,QAKR,+BACC,MAAO,CAAC,4CAGT,kBACCpkB,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAG3D,KAAKv6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC9BhgB,EACHhB,KAAKisI,iBAAiBjrI,GAEtBhB,KAAKksI,sBAGP,sBACC,MAAM1qI,EAAWxB,KAAKowJ,cAAcpwJ,KAAKwe,GAAGhU,MAK5CxK,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WAEnE,MAAMl1G,EAASrjB,KAAKgsI,gBAAgBK,mBAAmBrsI,KAAKwe,GAAGkrD,QAC/DloE,EAAS+kB,aAAalD,GAEtBrjB,KAAKgrI,aAAaxpI,GAEnB,iBAAiBR,GAChB,MAAM8oE,EAAO9oE,EAAW2oE,eAClBn/D,EAAO,IAAI,EAAA4I,QACjB02D,EAAKD,QAAQr/D,GACb,MAAMk/D,EAAS,IAAI,EAAAt2D,QACnB02D,EAAKF,UAAUF,GAGf,MAAM2mF,EAAS,IAAI,EAAAx5H,QAAQrsB,EAAKlF,EAAGkF,EAAKhF,GAClChE,EAAWxB,KAAKowJ,cAAcC,GAEpCrwJ,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwuJ,EAAcC,GAE7D,MAAM5sI,EAASrjB,KAAKgsI,gBAAgBK,mBAAmB3iE,GACvDloE,EAAS+kB,aAAalD,GAGtBrjB,KAAKgrI,aAAaxpI,GAGnB,cAAcgJ,GACb,IAAI2iE,EAeJ,OAdA3iE,EAAOA,EAAKzH,QACR/C,KAAKwe,GAAG2xI,mBACXhjF,EAAiB,CAChB7nE,EAAGkH,KAAKohB,MAAM5tB,KAAKwe,GAAGu8D,SAASz1E,GAC/BC,EAAGiH,KAAKohB,MAAM5tB,KAAKwe,GAAGu8D,SAASx1E,KAGhC4nE,EAAiB,CAChB7nE,EAAGkH,KAAKohB,MAAMpjB,EAAKlF,EAAItF,KAAKwe,GAAGgP,WAC/BjoB,EAAGiH,KAAKohB,MAAMpjB,EAAKjF,EAAIvF,KAAKwe,GAAGgP,YAEhChjB,EAAKlF,EAAI6nE,EAAe7nE,EAAItF,KAAKwe,GAAGgP,UACpChjB,EAAKjF,EAAI4nE,EAAe5nE,EAAIvF,KAAKwe,GAAGgP,WAE9B,IAAI,EAAAsY,oBAAoBt7B,EAAKlF,EAAGkF,EAAKjF,EAAG4nE,EAAe7nE,EAAG6nE,EAAe5nE,IA1ElF,kB,2FCnBA,QAIA,QAYA,OACA,MAAM+qJ,UAA6B,EAAAxnJ,iBAAnC,c,oBACC,KAAAw8I,SAAW,EAAAhjI,YAAY1jB,QAAQ,GAC/B,KAAA0G,EAAI,EAAAgd,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC21H,SAAU,GACvB3yG,WAAY,CAAC+uF,cAAc,KAE5B,KAAA6jB,SAAW,EAAAjjI,YAAY1jB,QAAQ,GAC/B,KAAA2G,EAAI,EAAA+c,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC41H,SAAU,GACvB5yG,WAAY,CAAC+uF,cAAc,KAE5B,KAAA8jB,SAAW,EAAAljI,YAAY1jB,QAAQ,GAC/B,KAAA4G,EAAI,EAAA8c,YAAYxjB,MAAM,OAAQ,CAC7B6wB,WAAY,CAAC61H,SAAU,GACvB7yG,WAAY,CAAC+uF,cAAc,KAE5B,KAAA6uB,eAAiB,EAAAjuI,YAAY1jB,QAAQ,IAEtC,MAAMmK,EAAe,IAAIunJ,EAEzB,MAAaj1B,UAAqB,EAAAz7H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAA+4H,2BAA+C,IAAIvxG,IACnD,KAAAwxG,2BAA+C,IAAIxxG,IACnD,KAAAyxG,2BAA+C,IAAIzxG,IAN3D,cACC,MAAO,QAOR,+BACC,MAAO,CAAC,kBAGT,kBACCvwB,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAIrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,SAC5BhhB,KAAK0lJ,iCAAiC1kJ,MAQvC,iCAAiCA,G,mDACtC,MAAMgoE,EAAehoE,EAAWgoE,eAGhC,IAAK,IAAIluE,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,UAClCkF,KAAK4lJ,kCAAkC58E,EAAaluE,IAGvDkF,KAAKwe,GAAG+xI,gBACXvvJ,EAAW2kD,yBAGZ,MAAMhkD,EAAaX,EAAWW,aAC9B,IAAK,IAAIH,KAAYG,EACpBH,EAASgQ,qBAIV,IAAKxR,KAAKa,GAAG6G,OAAO84H,aAAa,GAAI,CACpC,MAAM7+H,EAAaX,EAAWW,aAC9B,IAAK,IAAIH,KAAYG,EAAY,CACjBH,EAASc,aA7EC,YA8ElB4tB,aAAc,GAIvBlwB,KAAK6+H,eAAe79H,MAEf,kCAAkC+nE,G,mDACvC,MACMvnE,EADSunE,EAAYhrE,SACOyD,SAC5BgT,EAASu0D,EAAYv0D,SAErBjS,EAAQf,EAASc,aAzFI,YAyF+BC,MAEpDiuJ,QAAoBxwJ,KAAK6uI,mBAC9BrtI,EACAe,EACAiS,EACAxU,KAAK/B,EAAEqnJ,SACPtlJ,KAAK/B,EAAEqH,EACPtF,KAAKwe,GAAGlZ,EACRtF,KAAK8hI,2BACL,GAEK2uB,QAAoBzwJ,KAAK6uI,mBAC9BrtI,EACAe,EACAiS,EACAxU,KAAK/B,EAAEsnJ,SACPvlJ,KAAK/B,EAAEsH,EACPvF,KAAKwe,GAAGjZ,EACRvF,KAAK+hI,2BACL,GAEK2uB,QAAoB1wJ,KAAK6uI,mBAC9BrtI,EACAe,EACAiS,EACAxU,KAAK/B,EAAEunJ,SACPxlJ,KAAK/B,EAAEuH,EACPxF,KAAKwe,GAAGhZ,EACRxF,KAAKgiI,2BACL,GAGGwuB,GACHxwJ,KAAKgvI,mBAAmBwhB,EAAajuJ,EAAO,GAEzCkuJ,GACHzwJ,KAAKgvI,mBAAmByhB,EAAaluJ,EAAO,GAEzCmuJ,GACH1wJ,KAAKgvI,mBAAmB0hB,EAAanuJ,EAAO,MAIhC,mBACbf,EACAe,EACAiS,EACAm8I,EACAC,EACA5sH,EACA4+F,EACA14E,G,mDAEA,MAAM2mG,EAAYF,EACZz3I,EAAQ03I,EAEd,IAAI9tB,EAAY9iI,KAAK6iI,wBAAwBrhI,EAAUohI,EAAyBpuH,EAAOxZ,OAAQkvD,GAC/F,GAAI2mG,EAAUvzJ,MACb,GAAI4b,EAAMkzE,kBAAoBlzE,EAAMoQ,4BAC7BpQ,EAAMoQ,sBAAsBm5G,8BAA8BjuH,EAAQ,CAACG,EAAOrX,KAC/EwlI,EAAUnuH,EAAMvS,OAAS9E,QAEpB,CACN,IAAIqX,EACJ,IAAK,IAAI7Z,EAAI,EAAGA,EAAI0Z,EAAOxZ,OAAQF,IAClC6Z,EAAQH,EAAO1Z,GACfgoI,EAAUnuH,EAAMvS,OAAS4hC,EAI5B,OAAO8+F,KAGA,wBACPthI,EACAohI,EACAj/H,EACAumD,GAEA,MAAM74C,EAAO7P,EAAS6P,KAChB+xH,EAAgBR,EAAwB1lI,IAAImU,GAClD,GAAI+xH,EAAe,CAElB,GAAIA,EAAcpoI,OAAS2I,EAAc,CACxC,MAAMmtJ,EAAY9wJ,KAAK+wJ,qBAAqBvvJ,EAAUmC,EAAcumD,GAEpE,OADA04E,EAAwBriI,IAAI8Q,EAAMy/I,GAC3BA,EAEP,OAAO1tB,EAEF,CACN,MAAM0tB,EAAY9wJ,KAAK+wJ,qBAAqBvvJ,EAAUmC,EAAcumD,GAEpE,OADA04E,EAAwBriI,IAAI8Q,EAAMy/I,GAC3BA,GAID,qBAAqBtvJ,EAA0BmC,EAAsBumD,GAC5E,MAAM4mG,EAAY,IAAIzhH,MAAc1rC,GAC9B0qI,EAAY7sI,EAASc,aA7LA,YA6LmCC,MAC9D,IAAK,IAAIzH,EAAI,EAAGA,EAAIg2J,EAAU91J,OAAQF,IACrCg2J,EAAUh2J,GAAKuzI,EAAc,EAAJvzI,EAAQovD,GAElC,OAAO4mG,EAGA,mBAAmBhuB,EAAqBmM,EAAwB/kF,GACvE,IAAK,IAAIpvD,EAAI,EAAGA,EAAIgoI,EAAU9nI,OAAQF,IACrCm0I,EAAiB,EAAJn0I,EAAQovD,GAAU44E,EAAUhoI,IA5K5C,kB,8ECzCA,cACA,QACA,QACA,SACA,SACA,SAEA,OAEA,QAEA,OACA,QAEMk2J,EAAY,IAAI,EAAA59I,QAAQ,EAAG,EAAG,GAC9B69I,EAAY,IAAI,EAAA79I,QAAQ,EAAG,EAAG,GAEpC,OAGA,MAAM89I,UAAgC,EAAApoJ,iBAAtC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,GAC3B,KAAAwwI,gBAAkB,EAAAhtH,YAAYtjB,QAAQ,EAAG,CACxC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,KAAAwsH,OAAS,EAAA7uI,YAAY1jB,QAAQ,IAE9B,MAAMmK,EAAe,IAAImoJ,EAEzB,MAAa51B,UAAwB,EAAA17H,aAArC,c,oBACC,KAAAoJ,cAAgBD,EASR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAOtB,KAAAgtI,YAAgC,GAfxC,cACC,MAAO,WAGR,+BACC,MAAO,CAAC,8BAKT,kBACCpxJ,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAK3D,KAAKv6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAElChhB,KAAKoxJ,YAAc,GACnB,IAAK,IAAIrzJ,KAAUiD,EAAWC,UACzBlD,aAAkB,EAAAyL,cACrBxJ,KAAKqxJ,aAAatzJ,GAMpB,MAAMgZ,EAAkB,EAAA5F,aAAa2uI,iBAAiB9/I,KAAKoxJ,aAC3D,IAAK,IAAI5vJ,KAAYxB,KAAKoxJ,YACzB5vJ,EAAS4c,UAEV,GAAIrH,EAAiB,CACpB,MAAMhZ,EAASiC,KAAKyB,cAAcsV,GAElC/W,KAAKggI,WAAWjiI,QAEhBiC,KAAKkC,YAAY,IAMnB,aAAaovJ,G,MACZ,MAAM9vJ,EAAW8vJ,EAAa9vJ,SAExBgT,EADU,IAAI,EAAArD,aAAa3P,GACVgT,SACjB5Q,EAA6B,QAAnB,EAAApC,EAASkqD,kBAAU,eAAEnpD,MAE/BisD,EAAkC,EAAA+iG,sBAAsB/iG,gCAAgC5qD,GAE9F,IAAK,IAAI2qD,KAAuBC,EAAiC,CAChE,MAAMgjG,EAAiBjjG,EAAoBvpD,IAAK5C,GAAUoS,EAAOpS,IACjEpC,KAAKyxJ,yBAAyBD,IAIhC,yBAAyBh9I,GACxB,GAAIA,EAAOxZ,QAAU,EACpB,OAGD,MAAMutC,EAAY/zB,EAAOxP,IAAK2P,GAAUA,EAAMW,aAAa,aAErDo8I,EAAkB,EAAAtkB,uBAAuBzvI,OAAOqC,KAAKwe,GAAG4+C,OAAQp9D,KAAKwe,GAAG8wH,iBACxEqiB,EAA4B,GAElC,IAAK,IAAIv9I,KAAYm0B,EAAW,CAC/B,MAAMhrC,EAAI6W,EACJiP,EAASrjB,KAAKgsI,gBAAgB3oH,OAAO9lB,EAAGyzJ,EAAWC,EAH5C,GAKPW,EAAaF,EAAgB3uJ,QACnC6uJ,EAAWrrI,aAAalD,GACxBsuI,EAAQr2J,KAAKs2J,GAGd,IAAK,IAAI92J,EAAI,EAAGA,EAAI62J,EAAQ32J,OAAQF,IACnC,GAAIA,EAAI,EAAG,CACV,MAAM+2J,EAASF,EAAQ72J,GACjBg3J,EAAcH,EAAQ72J,EAAI,GAE1B0G,EAAWxB,KAAK+xJ,MAAMD,EAAaD,GACzC7xJ,KAAKoxJ,YAAY91J,KAAKkG,IAoBzB,MAAMk5E,EAA2BC,GAChC,MAAMn5E,EAAW,IAAI,EAAAsT,eAKrB,OAHkB,IAAI,EAAAk9I,0BAA0BxwJ,EAAUk5E,EAAWC,GAC3D8H,UAEHjhF,GA/GT,qB,8EC7BA,eAEA,QAEA,OAEA,QAEA,QAEMywJ,EAAmB,IAAI,EAAAhsH,kBAAkB,CAC9Cn8B,KAAM,EAAAmmB,aAGP,OACA,MAAMiiI,UAA2B,EAAAppJ,iBAAjC,c,oBACC,KAAAw3I,YAAc,EAAAh+H,YAAY1jB,QAAQ,GAClC,KAAA25H,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,GAAI,EAAG,GAAI,CAC3CmwB,WAAY,CAAC2wH,YAAa,KAE3B,KAAA6R,sBAAwB,EAAA7vI,YAAY1jB,QAAQ,IAE7C,MAAMmK,EAAe,IAAImpJ,EAEzB,MAAa32B,UAAmB,EAAA37H,aAAhC,c,oBACC,KAAAoJ,cAAgBD,EAMR,KAAAqpJ,kBAAoBpyJ,KAAKqyJ,wCAAwCx0J,KAAKmC,MACtE,KAAAsyJ,WAAa,IAAI,EAAA3sH,UANzB,cACC,MAAO,MAOR,+BACC,OAAOssH,EAGR,+BACC,MAAO,CAAC,mBAAoB,wBAG7B,kBACCjyJ,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CACzC,EAAA11F,eAAey2F,UACf,EAAAz2F,eAAe22F,SAIjB,iBAEA,KAAKt6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC5BuxI,EAAuBvxI,EAAe,GAE5ChhB,KAAKs4H,IAAIt3H,EAAYuxJ,GAGtB,IAAIvxJ,EAAuBuxJ,GAI1B,IAAIh6B,EAAoBi6B,EAFxBxyJ,KAAKyyJ,4CAA4CF,GAGjD,IAAK,IAAI59I,KAAS3T,EAAWwT,SAC5B+jH,EAAYv4H,KAAKwe,GAAG8hI,YAAc3rI,EAAMizC,SAAW5nD,KAAKwe,GAAG+5G,UAC3Dv4H,KAAKsyJ,WAAW/xJ,IAAIoU,EAAMP,WAAYmkH,GAEtCi6B,EAAkBxyJ,KAAKsyJ,WAAWI,iBAAiBH,EAAqBtxJ,WAAW,GAAM,GACrFuxJ,IACH79I,EAAM2nB,aAAak2H,EAAgB79I,OAC/B3U,KAAKwe,GAAG2zI,uBAAyBK,EAAgB70B,MACpDhpH,EAAMg+I,WAAWH,EAAgB70B,KAAK/1E,SAKzC5nD,KAAK6+H,eAAe79H,GAGrB,4CAA4CA,GAC3C,IAAK,IAAIjD,KAAUiD,EAAWC,UAC7BlD,EAAOwoD,SAASvmD,KAAKoyJ,mBAGvB,wCAAwCr0J,GAEtCA,EAAgBoF,SAAWo4H,EAAWq3B,yBA/DzC,gB,2FCzBA,QACA,OACA,OAEA,SAIA,SAEA,2BACA,4BACA,QACA,QACA,SACA,QAEA,IAAYC,EAOAC,GAPZ,SAAYD,GACX,8BACA,kCAFD,CAAYA,EAAA,EAAAA,SAAA,EAAAA,OAAM,KAIL,EAAAroE,QAAU,CAACqoE,EAAOE,aAAcF,EAAOG,gBAGpD,SAAYF,GACX,4BACA,oBACA,0BAHD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAKT,EAAAG,YAAc,CAACH,EAAWI,YAAaJ,EAAWK,QAASL,EAAWM,YAEnF,aAGA,SACA,MAAMC,UAAgC,EAAAvqJ,iBAAtC,c,oBACC,KAAA4oC,OAAS,EAAApvB,YAAYtjB,QAAQ,EAAAwrF,QAAQlhF,QAAQupJ,EAAOE,cAAe,CAClEjwH,KAAM,CACLC,QAAS,EAAAynD,QAAQxlF,IAAI,CAACnI,EAAM/B,KACpB,CACN+B,KAAMA,EACNS,MAAOxC,QAKX,KAAAw4J,WAAa,EAAAhxI,YAAYtjB,QAAQ,EAAAi0J,YAAY3pJ,QAAQwpJ,EAAWM,YAAa,CAC5E1uH,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrB7B,KAAM,CACLC,QAAS,EAAAkwH,YAAYjuJ,IAAI,CAACnI,EAAM/B,KACxB,CACN+B,KAAMA,EACNS,MAAOxC,QAKX,KAAAy4J,QAAU,EAAAjxI,YAAYxjB,MAAM,IAAM,CACjC4lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,KAAAhhC,aAAe,EAAA2e,YAAYtjB,QAAQ,IAAK,CACvC2wB,WAAY,CAAC+hB,OAAQ,EAAA84C,QAAQlhF,QAAQupJ,EAAOE,iBAE7C,KAAAS,eAAiB,EAAAlxI,YAAYxjB,MAAM,EAAG,CACrC6wB,WAAY,CAAC+hB,OAAQ,EAAA84C,QAAQlhF,QAAQupJ,EAAOG,oBAG9C,MAAMjqJ,EAAe,IAAIsqJ,EAEzB,MAAa73B,UAAwB,EAAA57H,aAArC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,WAKR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GAG1B,KAAK5B,GACJ,MAAMhgB,EAAaggB,EAAe,GAG5ByyI,EAAoB,GAC1B,GAAIzzJ,KAAKwe,GAAG7a,cAAgB,EAAG,CAC9B,MAAMqlE,EAAehoE,EAAWgoE,eAChC,IAAK,IAAIluE,EAAI,EAAGA,EAAIkuE,EAAahuE,OAAQF,IAAK,CAC7C,MACMiD,EADcirE,EAAaluE,GACNiD,SAC3B,GAAIA,aAAkB,EAAAyL,aAAc,CACnC,MAAMkqJ,EAAmB1zJ,KAAK2zJ,UAAU51J,GACxC01J,EAAkBn4J,KAAKo4J,KAY1B1zJ,KAAKkC,YAAYuxJ,GAIlB,UAAUnC,G,MACT,MAAM9vJ,EAAW8vJ,EAAa9vJ,SAExBgT,EADgB,IAAI,EAAArD,aAAa3P,GACVgT,SACvB5Q,EAA6B,QAAnB,EAAApC,EAASkqD,kBAAU,eAAEnpD,MAE/BisD,EAAkC,EAAA+iG,sBAAsB/iG,gCAAgC5qD,GAExFjC,EAA+B,GACrC,IAAK,IAAI7G,EAAI,EAAGA,EAAI0zD,EAAgCxzD,OAAQF,IAAK,CAChE,MACM02J,EADsBhjG,EAAgC1zD,GACjBkK,IAAK5C,GAAUoS,EAAOpS,IAC3DZ,EAAWxB,KAAK4zJ,0BAA0BpC,GAC5ChwJ,GACHG,EAAWrG,KAAKkG,GAGlB,MAAMuV,EAAkB,EAAAC,oBAAoBC,sBAAsBtV,GAElE,OADe3B,KAAKyB,cAAcsV,EAAiB,EAAAtU,aAAaC,YAAY0G,eAI7E,0BAA0BoL,GACzB,GAAIA,EAAOxZ,QAAU,EACpB,OAGD,MAAM64J,EAAsB,UAAWr/I,EAASG,GAAUA,EAAMW,aAAa,aAEvEg+I,EAAa,EAAAL,YAAYjzJ,KAAKwe,GAAG80I,YACjCC,EAAUvzJ,KAAKwe,GAAG+0I,QAClBO,EAAQ,IAAI,EAAAC,iBAAiBF,GAHpB,EAGiDP,EAAYC,GAOtES,EAAmBh0J,KAAKi0J,uBAAuBH,GAErD,IAAIvrH,EAAY,GAChB,MAAM3kC,EAAU,GAEhB,IAAK,IAAI9I,EAAI,EAAGA,EAAIk5J,EAAiBh5J,OAAQF,IAAK,CACjD,MAEMsZ,EAFiB4/I,EAAiBl5J,GAERiK,UAChCwjC,EAAUjtC,KAAK8Y,GAEXtZ,EAAI,IACP8I,EAAQtI,KAAKR,EAAI,GACjB8I,EAAQtI,KAAKR,IAIfytC,EAAY,UAAeA,GAC3B,MAAM/mC,EAAW,IAAI,EAAAsT,eAIrB,OAHAtT,EAASkR,aAAa,WAAY,IAAI,EAAAS,uBAAuBo1B,EAAW,IACxE/mC,EAASgB,SAASoB,GAEXpC,EAKR,uBAAuBsyJ,GACtB,MAAMpiH,EAAS,EAAA84C,QAAQxqF,KAAKwe,GAAGkzB,QAC/B,OAAQA,GACP,KAAKmhH,EAAOE,aACX,OAAOe,EAAMI,gBAAgB1nJ,KAAKC,IAAI,EAAGzM,KAAKwe,GAAG7a,eAClD,KAAKkvJ,EAAOG,eACX,IAAIh4J,EAAS84J,EAAMK,YAEfxwJ,EAA0C,IAA3B3D,KAAKwe,GAAGg1I,eAAuB,EAAIx4J,EAASgF,KAAKwe,GAAGg1I,eAAiB,EAIxF,OAFA7vJ,EAAe6I,KAAKC,IAAI,EAAG9I,GAEpBmwJ,EAAMI,gBAAgBvwJ,GAE/B,EAAA63F,WAAWC,YAAY/pD,IAvHzB,qB,2FCvEA,OAEMjlB,EAAQ,CAACohG,gBADf,KACeA,gBAAiB/4G,eAAA,EAAAA,gBAChC,2BACA,2BACA,4BACA,QAEA,QACA,SACA,SAEA,OACA,QACA,MAAMs/I,UAA+B,EAAAtrJ,iBAArC,c,oBACC,KAAAnF,aAAe,EAAA2e,YAAYtjB,QAAQ,IAAK,CACvC0lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,KAAA6hF,KAAO,EAAAlkG,YAAYtjB,QAAQ,EAAG,CAC7B0lC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAO,KAEvB,KAAA0vH,oBAAsB,EAAA/xI,YAAY1jB,QAAQ,GAC1C,KAAA01J,uBAAyB,EAAAhyI,YAAYhjB,OAAO,SAAU,CACrDqwB,WAAY,CAAC0kI,oBAAqB,KAEnC,KAAAE,iBAAmB,EAAAjyI,YAAY1jB,QAAQ,IAExC,MAAMmK,EAAe,IAAIqrJ,EAEzB,MAAa34B,UAAuB,EAAA77H,aAApC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,UAQR,+BACC,MAAO,CAAC,mCAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAGrD,KAAKv6E,G,mDAEV,MAAMhgB,EAAaggB,EAAe,GAClC,IAAIqoD,EAAQroE,EAAWqoE,QAEvB,MAAMmrF,EAA6B,GACnC,IAAIC,EAAW,EACf,MAAMC,EAA0C,IAAInkI,IAEpD,IAAK,IAAIotG,KAAQt0D,EAAO,CACvB,MAAMsrF,EAAOh3B,EAAKg3B,KAClBD,EAAmBn0J,IAAIo9H,EAAKv7H,MAAOuyJ,GAEpC,MAAMC,EAAe,UAAcvrF,EAAQn6B,GACnCwlH,EAAmBx3J,IAAIgyC,EAAE9sC,QAGjC,IAAItH,EAAI,EACR,IAAK,IAAI6iI,KAAQi3B,EAChBH,GAAYC,EAAmBx3J,IAAIygI,EAAKv7H,OACxCoyJ,EAAiB15J,GAAK25J,EACtB35J,IAGD,MAAMytC,EAAsB,GAC5B,IAAIj2B,EAAyB,GACzBtS,KAAKwe,GAAG61I,sBACX/hJ,EAAetR,EAAWkvE,2BAA2BlwE,KAAKwe,GAAG81I,yBAG9D,MAAMO,EAA+C,IAAItkI,IACnDo+B,EAA4C,IAAIp+B,IACtD,IAAK,IAAIle,KAAeC,EACvBuiJ,EAAsBt0J,IAAI8R,EAAa,IACvCs8C,EAAqBpuD,IAAI8R,EAAarR,EAAW2U,YAAYtD,IAG9D,MAAMw0H,EAAW,IAAI,EAAAC,mBAEfD,EAASiuB,iBAAiB90J,KAAKwe,GAAG7a,aAAe+Q,IACtD,MAAMoqI,EAAO,EAAA/6H,SAASuJ,WAAWttB,KAAKwe,GAAGgoG,KAAO9xG,GAAe+/I,EAE/D,IAAK,IAAIM,EAAa,EAAGA,EAAaP,EAAiBx5J,OAAQ+5J,IAAc,CAG5E,GAAIjW,GAFoB0V,EAAiBO,GAEZ,CAC5B,MAAMp3B,EAAOi3B,EAAaG,GACpB3gJ,EAAWupH,EAAKq3B,gBAAgBlW,GACtC1qI,EAASrP,QAAQwjC,EAAWA,EAAUvtC,QAEtC,IAAK,IAAIqX,KAAeC,EAAc,CACrC,MAAMgD,EAAeqoH,EAAKs3B,yBAAyB5iJ,EAAa+B,GAC5D,UAAgBkB,GACnBu/I,EAAsB33J,IAAImV,GAAc/W,KAAKga,GAE7CA,EAAavQ,QACZ8vJ,EAAsB33J,IAAImV,GAC1BwiJ,EAAsB33J,IAAImV,GAAcrX,QAK3C,UAmCH,MAAMwG,EAAW,IAAIirB,EAAM3X,eAC3BtT,EAASkR,aAAa,WAAY,IAAI+Z,EAAMohG,gBAAgB,IAAIplF,aAAaF,GAAY,IACzF,IAAK,IAAIl2B,KAAeC,EACvB9Q,EAASkR,aACRL,EACA,IAAIoa,EAAMohG,gBACT,IAAIplF,aAAaosH,EAAsB33J,IAAImV,IAC3Cs8C,EAAqBzxD,IAAImV,KAK5B,GAAIrS,KAAKwe,GAAG+1I,iBAAkB,CAC7B,MAAMx6G,EAAM,UAAa/5C,KAAKwe,GAAG7a,cACjCnC,EAASkR,aAAa,KAAM,IAAI+Z,EAAMohG,gBAAgB,IAAIplF,aAAasR,GAAM,IAG9E/5C,KAAKgrI,aAAaxpI,EAAU,EAAAiB,aAAaC,YAAYyG,YAtIvD,oB,2FC/BA,QACA,QAGA,OACA,MAAM+rJ,UAA+B,EAAApsJ,iBAArC,c,oBACC,KAAAqsJ,YAAc,EAAA7yI,YAAY1jB,QAAQ,GAClC,KAAAw2J,eAAiB,EAAA9yI,YAAY1jB,QAAQ,GACrC,KAAAwgJ,kBAAoB,EAAA98H,YAAY1jB,QAAQ,IAEzC,MAAMmK,EAAe,IAAImsJ,EAEzB,MAAav5B,UAAuB,EAAA/7H,aAApC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,UAGR,+BACC,MAAO,CAAC,2CAGT,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAGrD,KAAKp6E,G,mDACV,MAAMhgB,EAAaggB,EAAe,GAElC,IAAK,IAAIjjB,KAAUiD,EAAWC,UACzBjB,KAAKwe,GAAG4gI,kBACXrhJ,EAAOwoD,SAAU8jB,IAChBA,EAAMrnE,WAAahD,KAAKwe,GAAG22I,YAC3B9qF,EAAMpnE,cAAgBjD,KAAKwe,GAAG42I,kBAG/Br3J,EAAOiF,WAAahD,KAAKwe,GAAG22I,YAC5Bp3J,EAAOkF,cAAgBjD,KAAKwe,GAAG42I,gBAIjC/xJ,QAAQC,IAAItC,EAAWC,WACvBjB,KAAK6+H,eAAe79H,OA/BtB,oB,2FCZA,OAGA,4BACA,4BACA,2BACA,QAEA,SACA,SAGA,OACA,MAAMq0J,UAA4B,EAAAvsJ,kBAClC,MAAMC,EAAe,IAAIssJ,EAEzB,MAAa35B,UAAoB,EAAA97H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,OAGR,+BACC,MAAO,CAAC,gCAAiC,gDAG1C,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAG7B,KAAK5B,GACJ,OAAQ,UAAehhB,KAAKa,GAAG6G,OAAOA,UAAU1M,QAC/C,KAAK,EACJ,OAAOgF,KAAKs1J,kBAAkBt0I,GAC/B,KAAK,EACJ,OAAOhhB,KAAKu1J,mBAAmBv0I,GAChC,QACC,OAAOhhB,KAAKgyB,OAAO9T,MAAM3d,IAAI,2BAIhC,kBAAkBygB,GACjB,MAAMkqH,EAAclqH,EAAe,GAC7Bw0I,EAAiBx1J,KAAKy1J,mBAAmBvqB,GAEzCvpI,EAA+B,GACrC,GAAI6zJ,EAAgB,CACnB,MAAME,EAAqBF,EAAe,GAC1C,GAAIE,EAAoB,CACvB,MAAMC,EAAiB,EAAApE,sBAAsBqE,2BAC5CF,EAAmBl0J,UAEpBm0J,EAAe/zJ,QAAQ,CAAC+R,EAAc7Y,KACrC,GAAIA,EAAI,EAAG,CACV,MAAM+6J,EAAoBF,EAAe76J,EAAI,GAEvC0G,EAAWxB,KAAK+xJ,MAAM8D,EAAmBliJ,GAC/ChS,EAAWrG,KAAKkG,OAMpBxB,KAAK81J,eAAen0J,GAGrB,mBAAmBqf,GAClB,MAAMkqH,EAAclqH,EAAe,GAC7BmqH,EAAcnqH,EAAe,GAC7Bw0I,EAAiBx1J,KAAKy1J,mBAAmBvqB,GACzC6qB,EAAiB/1J,KAAKy1J,mBAAmBtqB,GACzC6qB,EAAgB,UAAe,UAAc,CAACR,EAAgBO,GAAkBxzJ,GAAUA,EAAMvH,SAChGi7J,EAAiBD,EAAc,GAC/BE,EAAgBF,EAAc,GAE9Br0J,EAA+B,GACrCs0J,EAAer0J,QAAQ,CAAC0vJ,EAAcx2J,KACrC,MAAMq7J,EAAqBD,EAAcp7J,GAEzC,GAAoB,MAAhBw2J,GAA8C,MAAtB6E,EAA4B,CACvD,MAAM1wG,EAAO6rG,EAAsB9vJ,SAC7B40J,EAAaD,EAA4B30J,SACzCA,EAAWxB,KAAK+xJ,MAAMtsG,EAAK2wG,GACjCz0J,EAAWrG,KAAKkG,MAIlBxB,KAAK81J,eAAen0J,GAGrB,mBAAmBX,GAClB,OAAOA,EAAWC,UAAU8oB,OAAQsgD,GAAWA,EAAuBw1E,gBAGvE,MAAMnlE,EAA2BC,GAEhC,MAAMn5E,EAAW,IAAI,EAAAsT,eAKrB,OAHkB,IAAI,EAAAk9I,0BAA0BxwJ,EAAUk5E,EAAWC,GAC3D8H,UAEHjhF,GArFT,iB,+EChBA,eACA,SACA,QAEA,IAAK60J,GAAL,SAAKA,GACJ,oBACA,4BAFD,CAAKA,MAAU,KAKf,MAAMC,EAA2B,CAChCjiI,QAAS,EACTkiI,YAAa,GAERC,EAAkC,CAACH,EAAW5oF,QAAS4oF,EAAWI,aAExE,OACA,QAEA,MAAMC,UAA8B,EAAA5tJ,iBAApC,c,oBACC,KAAAvK,KAAO,EAAA+jB,YAAYtjB,QAAQs3J,EAAYjiI,QAAS,CAC/CyO,KAAM,CACLC,QAASyzH,EAAaxxJ,IAAKnI,IACnB,CAACA,KAAMA,EAAMS,MAAOg5J,EAAYz5J,SAI1C,KAAAugE,OAAS,EAAA96C,YAAYxjB,MAAM,EAAG,CAAC6wB,WAAY,CAACpxB,KAAM+3J,EAAYjiI,WAC9D,KAAA2hE,WAAa,EAAA1zE,YAAY/iB,QAAQ,CAAC,EAAG,GAAI,CAACowB,WAAY,CAACpxB,KAAM+3J,EAAYjiI,WACzE,KAAAioG,KAAO,EAAAh6G,YAAY1jB,QAAQ,EAAG,CAAC+wB,WAAY,CAACpxB,KAAM+3J,EAAYjiI,WAC9D,KAAAsiI,cAAgB,EAAAr0I,YAAY/iB,QAAQ,CAAC,EAAG,SAAU,CAACowB,WAAY,CAACpxB,KAAM+3J,EAAYjiI,QAASioG,MAAM,KACjG,KAAAs6B,cAAgB,EAAAt0I,YAAY/iB,QAAQ,CAAC,EAAG,SAAU,CAACowB,WAAY,CAACpxB,KAAM+3J,EAAYjiI,QAASioG,MAAM,KACjG,KAAAu6B,OAAS,EAAAv0I,YAAYtjB,QAAQ,EAAG,CAC/B0lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrBhV,WAAY,CAACpxB,KAAM+3J,EAAYC,eAEhC,KAAA7sF,OAAS,EAAApnD,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAErC,MAAMuJ,EAAe,IAAI2tJ,EAEzB,MAAa96B,UAAsB,EAAAh8H,aAAnC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,SAGR,kBACC/I,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAe42F,QAG3D,KAAKv6E,GACJ,MAAMhgB,EAAaggB,EAAe,GAC9BhgB,EACHhB,KAAKisI,iBAAiBjrI,GAEtBhB,KAAKksI,sBAGC,sBACP,MAAM1qI,EAAWxB,KAAK82J,4BACtBt1J,EAAS4qI,UAAUpsI,KAAKwe,GAAGkrD,OAAOpkE,EAAGtF,KAAKwe,GAAGkrD,OAAOnkE,EAAGvF,KAAKwe,GAAGkrD,OAAOlkE,GACtExF,KAAKgrI,aAAaxpI,GAEX,iBAAiBR,GACxB,MAAM8oE,EAAO9oE,EAAW2oE,eAClBn/D,EAAOs/D,EAAKr9D,IAAI1J,QAAQqsB,IAAI06C,EAAKl+C,KACjC89C,EAASI,EAAKr9D,IAClB1J,QACAoa,IAAI2sD,EAAKl+C,KACT/H,eAAe,IAEXriB,EAAWxB,KAAK82J,4BACtBt1J,EAAS4qI,UAAUpsI,KAAKwe,GAAGkrD,OAAOpkE,EAAGtF,KAAKwe,GAAGkrD,OAAOnkE,EAAGvF,KAAKwe,GAAGkrD,OAAOlkE,GACtEhE,EAAS4qI,UAAU1iE,EAAOpkE,EAAGokE,EAAOnkE,EAAGmkE,EAAOlkE,GAC9ChE,EAAS+gB,MAAM/X,EAAKlF,EAAGkF,EAAKjF,EAAGiF,EAAKhF,GACpCxF,KAAKgrI,aAAaxpI,GAGX,4BACP,OAAIxB,KAAKwe,GAAGjgB,MAAQ+3J,EAAYjiI,QACxBr0B,KAAK+2J,yBAEL/2J,KAAKg3J,8BAIN,yBACP,OAAIh3J,KAAKwe,GAAG89G,KACJ,IAAI,EAAAhO,qBACVtuH,KAAKwe,GAAG4+C,OACRp9D,KAAKwe,GAAGw3E,WAAW1wF,EACnBtF,KAAKwe,GAAGw3E,WAAWzwF,EACnBvF,KAAKwe,GAAGm4I,cAAcrxJ,EACtBtF,KAAKwe,GAAGm4I,cAAcpxJ,EACtBvF,KAAKwe,GAAGo4I,cAActxJ,EACtBtF,KAAKwe,GAAGo4I,cAAcrxJ,GAGhB,IAAI,EAAA+oH,qBAAqBtuH,KAAKwe,GAAG4+C,OAAQp9D,KAAKwe,GAAGw3E,WAAW1wF,EAAGtF,KAAKwe,GAAGw3E,WAAWzwF,GAG3F,8BACC,OAAO,IAAI,EAAA0xJ,0BAA0Bj3J,KAAKwe,GAAG4+C,OAAQp9D,KAAKwe,GAAGq4I,SA/D/D,mB,2FCxCA,QAEM13G,EAAa,wBAEnB,OACA,QACA,MAAM+3G,UAA8B,EAAApuJ,iBAApC,c,oBACC,KAAAoR,MAAQ,EAAAoI,YAAYtjB,QAAQ,EAAG,CAC9B0lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAImuJ,EAEzB,MAAar7B,UAAsB,EAAAj8H,aAAnC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,SAGR,+BACC,MAAO,CAACo2C,EAAYA,EAAYA,EAAYA,GAG7C,kBACCn/C,KAAKa,GAAG6G,OAAOkb,UAAU,EAAG,GAC5B5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CACzC,EAAA11F,eAAe42F,MACf,EAAA52F,eAAe42F,MACf,EAAA52F,eAAe42F,MACf,EAAA52F,eAAe42F,QAEhBv7F,KAAKiH,QAAQ4wG,UAAU,KAGvB73G,KAAK+b,gBAAgB+7F,6BAGhB,O,mDACL,MAAMrwG,EAAczH,KAAKwe,GAAGtE,MAC5B,GAAIla,KAAKa,GAAG6G,OAAOqwG,UAAUtwG,GAAc,CAC1C,MAAM1F,QAAkB/B,KAAKF,qBAAqBw2B,wBAAwB7uB,GAC1EzH,KAAK6+H,eAAe98H,EAAUC,qBAE9BhC,KAAKgyB,OAAO9T,MAAM3d,IAAI,YAAYkH,SA9BrC,mB,2FCdA,2BAGA,QACA,QAEA,SACA,OACA,SACA,UAEA,OAKA,SAEA,IAAI0vJ,EAAW,EAAQ,MAmBvB,IAAYC,GAAZ,SAAYA,GACX,cACA,cACA,cACA,kBAJD,CAAYA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KAMR,EAAAC,WAA+B,CAACD,EAAUz0J,KAAMy0J,EAAUE,KAAMF,EAAU78H,KAAM68H,EAAUG,QAMvG,MAEA,OACA,MAAMC,UAA4B,EAAA1uJ,iBAAlC,c,oBACC,KAAA2uJ,KAAO,EAAAn1I,YAAYhjB,OAAO,IAC1B,KAAA46I,KAAO,EAAA53H,YAAYhjB,OAAO,YAAa,CAACo4J,WAAW,IACnD,KAAAn5J,KAAO,EAAA+jB,YAAYtjB,QAAQ,EAAG,CAC7B8jC,KAAM,CACLC,QAAS,EAAAs0H,WAAWryJ,IAAI,CAACzG,EAAMzD,KACvB,CACN+B,KAAM0B,EACNjB,MAAOxC,QAKX,KAAA0P,KAAO,EAAA8X,YAAYxjB,MAAM,EAAG,CAC3B4lC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,KAAAgzH,QAAU,EAAAr1I,YAAYxjB,MAAM,GAAK,CAChC6wB,WAAY,CACXpxB,KAAM,EAAA84J,WAAW/tJ,QAAQ8tJ,EAAUz0J,SAGrC,KAAAo4E,SAAW,EAAAz4D,YAAYtjB,QAAQ,EAAG,CACjC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,GACrBhV,WAAY,CACXpxB,KAAM,EAAA84J,WAAW/tJ,QAAQ8tJ,EAAUz0J,SAGrC,KAAAi1J,aAAe,EAAAt1I,YAAYxjB,MAAM,IAAM,CACtC6wB,WAAY,CACXpxB,KAAM,EAAA84J,WAAW/tJ,QAAQ8tJ,EAAUG,YAKtC,MAAMxuJ,EAAe,IAAIyuJ,EAEzB,MAAa17B,UAAoB,EAAAl8H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAQR,KAAA8uJ,aAA2B,IAAI,EAAAC,WAG/B,KAAAC,cAA2B,GAVnC,cACC,MAAO,OAWR,mBAEM,O,mDACL,IACC/3J,KAAK+3J,cAAc/3J,KAAKwe,GAAGi5I,MAAQz3J,KAAK+3J,cAAc/3J,KAAKwe,GAAGi5I,cAAgBz3J,KAAKg4J,UAAUh4J,KAAKwe,GAAGi5I,OACpG,MAAOQ,GAER,YADAj4J,KAAKgyB,OAAO9T,MAAM3d,IAAI,wBAAwBP,KAAKwe,GAAGi5I,SAGvD,MAAMA,EAAOz3J,KAAK+3J,cAAc/3J,KAAKwe,GAAGi5I,MACxC,GAAIA,EACH,OAAQ,EAAAJ,WAAWr3J,KAAKwe,GAAGjgB,OAC1B,KAAK64J,EAAUz0J,KACd,OAAO3C,KAAKk4J,gCAAgCT,GAC7C,KAAKL,EAAUE,KACd,OAAOt3J,KAAKm4J,gCAAgCV,GAC7C,KAAKL,EAAU78H,KACd,OAAOv6B,KAAKo4J,gCAAgCX,GAC7C,KAAKL,EAAUG,OACd,OAAOv3J,KAAKq4J,kCAAkCZ,GAC/C,QACCp0J,QAAQiE,KAAK,yBAKT,gCAAgCmwJ,GACvC,MAAMvd,EAAOl6I,KAAKs4J,iBAEZC,EAAa,CAClBd,KAAMA,EACNjtJ,KAAMxK,KAAKwe,GAAGhU,KACdu8F,OAAQ/mG,KAAKwe,GAAGm5I,QAChBa,cAAex4J,KAAKwe,GAAGu8D,UAGxB,IACC,MAAMv5E,EAAW,IAAI,EAAAi3J,mBAAmBve,EAAMqe,GAC9C,IAAK/2J,EAASY,MAAO,CACpB,MAAMC,EAAiBb,EAASc,aAAa,YAAYC,MACzDf,EAASgB,SAAS,UAAaH,EAAerH,OAAS,IAExDgF,KAAKgrI,aAAaxpI,GACjB,MAAOy2J,GACRj4J,KAAKgyB,OAAO9T,MAAM3d,IAnGY,+DAuGxB,gCAAgCk3J,GACvC,MAAMiB,EAAS14J,KAAK24J,YAAYlB,GAChC,GAAIiB,EAAQ,CACX,IAAIl3J,EAAW,IAAI,EAAAo3J,oBAAoBF,GACvC14J,KAAKgrI,aAAaxpI,IAGZ,gCAAgCi2J,GACvC,MAAMiB,EAAS14J,KAAK64J,iBAAiBpB,GACrC,GAAIiB,EAAQ,CACX,MAAMnwH,EAAY,GACZ3kC,EAAU,GAChB,IAAIuzB,EAAgB,EAEpB,IAAK,IAAIr8B,EAAI,EAAGA,EAAI49J,EAAO19J,OAAQF,IAAK,CACvC,MACM0Z,EADQkkJ,EAAO59J,GACAg+J,YACrB,IAAK,IAAI98J,EAAI,EAAGA,EAAIwY,EAAOxZ,OAAQgB,IAAK,CACvC,MAAM2Y,EAAQH,EAAOxY,GACrBusC,EAAUjtC,KAAKqZ,EAAMrP,GACrBijC,EAAUjtC,KAAKqZ,EAAMpP,GACrBgjC,EAAUjtC,KAAK,GACfsI,EAAQtI,KAAK67B,GACTn7B,EAAI,GAAKA,EAAIwY,EAAOxZ,OAAS,GAChC4I,EAAQtI,KAAK67B,GAEdA,GAAiB,GAGnB,MAAM31B,EAAW,IAAI,EAAAsT,eACrBtT,EAASkR,aAAa,WAAY,IAAI,EAAAS,uBAAuBo1B,EAAW,IACxE/mC,EAASgB,SAASoB,GAClB5D,KAAKgrI,aAAaxpI,EAAU,EAAAiB,aAAaC,YAAY0G,gBAGzC,kCAAkCquJ,G,mDAC/C,MAAMiB,EAAS14J,KAAK64J,iBAAiBpB,GACrC,GAAIiB,EAAQ,CAEX14J,KAAK+4J,YAAc/4J,KAAK+4J,oBAAsB/4J,KAAKg5J,oBAEnD,IAAIjlC,EAAQ/zH,KAAK+4J,YAAYE,eAAej5J,KAAKwe,GAAGo5I,aAAc,QAAS,QAAS,OAAQ,GAC5F,MAAMj2J,EAAa,GAMnB,IAAK,IAAI7G,EAAI,EAAGA,EAAI49J,EAAO19J,OAAQF,IAAK,CACvC,MACM0Z,EADQkkJ,EAAO59J,GACAg+J,YAEfI,EAAe,GACf32G,EAAc,KACd/gD,EAAWxB,KAAK+4J,YAAYI,eACvB3kJ,EACVu/G,EACAmlC,EACA32G,GAED5gD,EAAWrG,KAAKkG,GAEjB,MAAMuV,EAAkB,EAAAC,oBAAoBC,sBAAsBtV,GAClE3B,KAAKgrI,aAAaj0H,OAIZ,iBAAiB0gJ,GACxB,MAAMiB,EAAS14J,KAAK24J,YAAYlB,GAChC,GAAIiB,EAAQ,CACX,MAAMU,EAAqB,GAC3B,IAAK,IAAIt+J,EAAI,EAAGA,EAAI49J,EAAO19J,OAAQF,IAAK,CACvC,MAAMu+J,EAAQX,EAAO59J,GACrB,GAAIu+J,EAAMC,OAASD,EAAMC,MAAMt+J,OAAS,EACvC,IAAK,IAAIgB,EAAI,EAAGA,EAAIq9J,EAAMC,MAAMt+J,OAAQgB,IAAK,CAC5C,MAAMu9J,EAAOF,EAAMC,MAAMt9J,GACzBo9J,EAAW99J,KAAKi+J,IAKnB,OADAb,EAAOp9J,KAAKK,MAAM+8J,EAAQU,GACnBV,GAID,YAAYjB,GACnB,MAAMvd,EAAOl6I,KAAKs4J,iBAClB,IAEC,OADeb,EAAK+B,eAAetf,EAAMl6I,KAAKwe,GAAGhU,MAEhD,MAAOytJ,GACRj4J,KAAKgyB,OAAO9T,MAAM3d,IAlMY,+DAsMxB,iBACP,OAAOP,KAAKwe,GAAG07H,MAAQ,GAehB,UAAU33G,GACL,KAARA,IACHA,EAlPiB,2CAoPlB,MACMk3H,EADYl3H,EAAI3zB,MAAM,KAAK,GACLA,MAAM,KAC5B8/F,EAAM+qD,EAAUA,EAAUz+J,OAAS,GAEzC,OADAunC,EAAM,GAAGA,KAAOp0B,KAAKu6D,QACbgmC,GACP,IAAK,MACJ,OAAO1uG,KAAK05J,UAAUn3H,GAEvB,IAAK,OACJ,OAAOviC,KAAK25J,WAAWp3H,GAExB,QACC,OAAO,MAKF,UAAUA,GACjB,OAAO,IAAIpa,QAAQ,CAAOC,EAASC,IAAW,EAAD,0CAC5CroB,KAAK45J,YAAc55J,KAAK45J,oBAAsB55J,KAAK65J,oBACnD17J,OAAOg5J,SAAWA,EAClBn3J,KAAK45J,YAAYpmF,KAChBjxC,EACCu3H,IACA,MAAMxpJ,EAAStQ,KAAK63J,aAAazpJ,MAAM0rJ,GAGvC1xI,EAAQ9X,SAET/L,EACA,KACC8jB,UAKI,WAAWka,GAClB,OAAO,IAAIpa,QAAQ,CAACC,EAASC,KAC5BroB,KAAK63J,aAAarkF,KACjBjxC,EACCk1H,IACArvI,EAAQqvI,SAETlzJ,EACA,KACC8jB,QAiBU,mB,mDACb,MAAM,UAAC0xI,SAAa,4CAAa,OAEjC,OAAO,IAD8BA,KAGxB,mB,mDACb,MAAM,UAACC,SAAa,4CAAa,OACjC,OAAiBA,MAtPnB,iB,8BC1FA,qEAaID,EAAY,SAAWznF,GAE1B,IAAOl3E,KAAM4E,KAAMsyE,GAEnBtyE,KAAKi6J,UAAW,GAKjBF,EAAU7+J,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEvE6Y,YAAagmJ,EAEbvmF,KAAM,SAAWjxC,EAAKkxC,EAAQC,EAAYC,GAEzC,IAAIlX,EAAQz8D,KAER4zE,EAAS,IAAI,IAAY5zE,KAAKsyE,SAClCsB,EAAOC,QAAS7zE,KAAK4Z,MACrBg6D,EAAOE,gBAAiB,eACxBF,EAAOJ,KAAMjxC,GAAK,SAAWoP,GAE5B8hC,EAAQhX,EAAMruD,MAAOujC,MAEnB+hC,EAAYC,IAIhBvlE,MAAO,SAAW8rJ,GAuFjB,SAASC,EAAiBC,GAEzB,IACIxgJ,EADAygJ,EAAQ,GAGZD,EAASx4J,SAAS,SAAWjF,GAEE,MAAzBA,EAAE4B,KAAKmgG,eAEX9kF,EAAO,CAAEjd,GACT09J,EAAM/+J,KAAMse,IAEwB,MAAzBjd,EAAE4B,KAAKmgG,eAElB9kF,EAAKte,KAAMqB,MAMb,IAAIs9J,EAAW,GAuCf,OArCAI,EAAMz4J,SAAS,SAAW3D,GAEzB,IAAIpC,EAAS,CACZ0C,KAAM,IACN+G,EAAGrH,EAAGA,EAAEjD,OAAS,GAAIsK,EACrBC,EAAGtH,EAAGA,EAAEjD,OAAS,GAAIuK,GAGtB00J,EAAS3+J,KAAMO,GAEf,IAAM,IAAIf,EAAImD,EAAEjD,OAAS,EAAGF,EAAI,EAAGA,IAAO,CAEzC,IAAIw/J,EAAUr8J,EAAGnD,GACbe,EAAS,CAAE0C,KAAM+7J,EAAQ/7J,WAETgG,IAAf+1J,EAAQ/X,SAAmCh+I,IAAf+1J,EAAQ9X,IAExC3mJ,EAAOwmJ,GAAKiY,EAAQ/X,GACpB1mJ,EAAOymJ,GAAKgY,EAAQ9X,GACpB3mJ,EAAO0mJ,GAAK+X,EAAQjY,GACpBxmJ,EAAO2mJ,GAAK8X,EAAQhY,SAEM/9I,IAAf+1J,EAAQjY,SAAmC99I,IAAf+1J,EAAQhY,KAE/CzmJ,EAAOwmJ,GAAKiY,EAAQjY,GACpBxmJ,EAAOymJ,GAAKgY,EAAQhY,IAIrBzmJ,EAAOyJ,EAAIrH,EAAGnD,EAAI,GAAIwK,EACtBzJ,EAAO0J,EAAItH,EAAGnD,EAAI,GAAIyK,EACtB00J,EAAS3+J,KAAMO,OAMVo+J,EAIR,MAAyB,oBAAb9C,UAEX9zJ,QAAQiE,KAAM,sGACP,MAvJR,SAAkBmwJ,EAAMwC,GAUvB,IARA,IAAIn2E,EAAQt3E,KAAKs3E,MAEby2E,EAAS,GACTh4I,EAAQ,KAA6C,IAA5Bk1I,EAAK+C,YAAc,OAE5CC,EAAgBhD,EAAKjkD,SAASknD,KAAKD,cACnCE,EAAW1/J,OAAO4W,KAAM4oJ,GAElB3/J,EAAI,EAAGA,EAAI6/J,EAAS3/J,OAAQF,IAAO,CAE5C,IAAI8/J,EAAUD,EAAU7/J,GACpB+/J,EAAQpD,EAAK8C,OAAOA,OAAQE,EAAeG,IAE/C,QAAiBr2J,IAAZq2J,EAAwB,CAE5B,IAAIE,EAAQ,CACXrpH,GAAIqyC,EAAO+2E,EAAME,aAAex4I,GAChCy4I,MAAOl3E,EAAO+2E,EAAMI,KAAO14I,GAC3B24I,MAAOp3E,EAAO+2E,EAAMM,KAAO54I,GAC3BxlB,EAAG,IAGCk9J,IAEJY,EAAMjhJ,KAAKwgJ,SAAWD,EAAiBU,EAAMjhJ,KAAKwgJ,WAInDS,EAAMjhJ,KAAKwgJ,SAASx4J,SAAS,SAAW04J,GAEH,MAA/BA,EAAQ/7J,KAAKmgG,gBAEjB47D,EAAQ/7J,KAAO,KAIhBu8J,EAAM/9J,GAAKu9J,EAAQ/7J,KAAKmgG,cAAgB,SAErBn6F,IAAd+1J,EAAQh1J,QAAiCf,IAAd+1J,EAAQ/0J,IAEvCu1J,EAAM/9J,GAAK+mF,EAAOw2E,EAAQh1J,EAAIid,GAAU,IAAMuhE,EAAOw2E,EAAQ/0J,EAAIgd,GAAU,UAIxDhe,IAAf+1J,EAAQjY,SAAmC99I,IAAf+1J,EAAQhY,KAExCwY,EAAM/9J,GAAK+mF,EAAOw2E,EAAQjY,GAAK9/H,GAAU,IAAMuhE,EAAOw2E,EAAQhY,GAAK//H,GAAU,UAI1Dhe,IAAf+1J,EAAQ/X,SAAmCh+I,IAAf+1J,EAAQ9X,KAExCsY,EAAM/9J,GAAK+mF,EAAOw2E,EAAQ/X,GAAKhgI,GAAU,IAAMuhE,EAAOw2E,EAAQ9X,GAAKjgI,GAAU,QAM/Eg4I,EAAQhpE,OAAO6pE,cAAeP,EAAMD,UAAcE,GAMpD,MAAO,CACNP,OAAQA,EACRc,WAAY5D,EAAK6D,eAAgB,YACjCC,SAAUz3E,EAAO2zE,EAAK8D,SAAWh5I,GACjCi5I,UAAW13E,EAAO2zE,EAAK+D,UAAYj5I,GACnCk5I,kBAAmBhE,EAAKiE,OAAOC,KAAKF,kBACpCG,mBAAoBnE,EAAKiE,OAAOC,KAAKC,mBACrCnqJ,YAAa,CACZwpJ,KAAMxD,EAAKiE,OAAOG,KAAKZ,KACvBE,KAAM1D,EAAKiE,OAAOG,KAAKV,KACvBW,KAAMrE,EAAKiE,OAAOG,KAAKC,KACvBC,KAAMtE,EAAKiE,OAAOG,KAAKE,MAExB/lE,WAAY,IACZgmE,0BAA2BvE,EAAKiE,OAAO7+J,MA2ElCy1C,CAAS6kH,SAAS/oJ,MAAO8rJ,GAAel6J,KAAKi6J,c,+ECtMtD,eACA,QAEA,OACA,MAAMgC,UAA6B,EAAAnzJ,iBAAnC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC1C,KAAAw3H,YAAc,EAAA55I,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC/C,KAAA4qG,gBAAkB,EAAAhtH,YAAYtjB,QAAQ,GAAI,CACzC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,KAAAw3H,cAAgB,EAAA75I,YAAYtjB,QAAQ,GAAI,CACvC0lC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,MAGvB,MAAM57B,EAAe,IAAIkzJ,EAEzB,MAAalgC,UAAqB,EAAAn8H,aAAlC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,QAER,mBAEA,OACC,MAAMq0D,EAASp9D,KAAKwe,GAAG4+C,OACjB8+F,EAAcl8J,KAAKwe,GAAG09I,YACtB5sB,EAAkBtvI,KAAKwe,GAAG8wH,gBAC1B6sB,EAAgBn8J,KAAKwe,GAAG29I,cAGxB36J,EAAW,IAAI,EAAA46J,oBAAoBh/F,EAAQ8+F,EAAa5sB,EAAiB6sB,GAC/En8J,KAAKgrI,aAAaxpI,IAfpB,kB,8EClBA,MACMirB,EAAQ,CAAC4vI,wBADf,OACeA,yBACf,QAEA,OACA,MAAMC,UAAiC,EAAAxzJ,iBAAvC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,GAC3B,KAAAo9J,YAAc,EAAA55I,YAAYxjB,MAAM,GAChC,KAAAwwI,gBAAkB,EAAAhtH,YAAYtjB,QAAQ,GAAI,CAAC0lC,MAAO,CAAC,EAAG,OACtD,KAAAy3H,cAAgB,EAAA75I,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,MACnD,KAAAzmC,EAAI,EAAAqkB,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,MACvC,KAAA8L,EAAI,EAAAluB,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,OAExC,MAAM37B,EAAe,IAAIuzJ,EAEzB,MAAatgC,UAAyB,EAAAp8H,aAAtC,c,oBACC,KAAAoJ,cAAgBD,EAChB,cACC,MAAO,aAER,mBAEA,OACC,MAAMq0D,EAASp9D,KAAKwe,GAAG4+C,OACjB8+F,EAAcl8J,KAAKwe,GAAG09I,YACtB5sB,EAAkBtvI,KAAKwe,GAAG8wH,gBAC1B6sB,EAAgBn8J,KAAKwe,GAAG29I,cACxBl+J,EAAI+B,KAAKwe,GAAGvgB,EACZuyC,EAAIxwC,KAAKwe,GAAGgyB,EAEZhvC,EAAW,IAAIirB,EAAM4vI,wBAAwBj/F,EAAQ8+F,EAAa5sB,EAAiB6sB,EAAel+J,EAAGuyC,GAC3GxwC,KAAKgrI,aAAaxpI,IAhBpB,sB,8ECfA,cAGA,SACA,QAEA,QAMA,OACA,MAAM+6J,UAAgC,EAAAzzJ,iBAAtC,c,oBACC,KAAA48C,MAAQ,EAAApjC,YAAYhjB,OAAO,IAG3B,KAAA/B,EAAI,EAAA+kB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAArC,EAAI,EAAAmlB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAApD,EAAI,EAAAkmB,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAC/B,KAAA+iB,MAAQ,EAAAD,YAAYxjB,MAAM,GAC1B,KAAA09J,QAAU,EAAAl6I,YAAYrjB,cAAc,IACpC,KAAA8rB,GAAK,EAAAzI,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IAChC,KAAAi9J,MAAQ,EAAAn6I,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAEpC,MAAMuJ,EAAe,IAAIwzJ,EAEzB,MAAatgC,UAAyB,EAAAr8H,aAAtC,c,oBACC,KAAAoJ,cAAgBD,EAmBR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAlB9B,cACC,MAAO,YAMR,+BACC,MAAO,CAAC,yBAKT,kBACCpkB,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAI3D,KAAKp6E,GACJ,MAAM/f,EAAU+f,EAAe,GAAG/f,UAC5BoiB,EAASrjB,KAAKgsI,gBAAgB3oH,OAAOrjB,KAAKwe,GAAGjhB,EAAGyC,KAAKwe,GAAGrhB,EAAG6C,KAAKwe,GAAGpiB,EAAG4D,KAAKwe,GAAG+D,OAEpF,GAAsB,KAAlBviB,KAAKwe,GAAGknC,MACX,IAAK,IAAI3nD,KAAUkD,EAAS,CAC3B,IAAIO,EACgC,OAA/BA,EAAWzD,EAAOyD,WACtBA,EAAS4qI,WAAWpsI,KAAKwe,GAAGi+I,MAAMn3J,GAAItF,KAAKwe,GAAGi+I,MAAMl3J,GAAIvF,KAAKwe,GAAGi+I,MAAMj3J,GACtEhE,EAAS+kB,aAAalD,GACtB7hB,EAAS4qI,UAAUpsI,KAAKwe,GAAGi+I,MAAMn3J,EAAGtF,KAAKwe,GAAGi+I,MAAMl3J,EAAGvF,KAAKwe,GAAGi+I,MAAMj3J,IAEnEzH,EAAOwoB,aAAalD,OAGhB,CACN,MACM7O,EADa,EAAAvS,UAAUy6J,aAAaz7J,GAChBuhI,kBAAkBxiI,KAAKwe,GAAGknC,OACpD,IAAK,IAAI/wC,KAASH,EAAQ,CACzB,MAAMJ,EAAWO,EAAMP,WAAWgb,IAAIpvB,KAAKwe,GAAGi+I,OAC9CroJ,EAASmS,aAAalD,GACtB1O,EAAM2nB,aAAaloB,EAAS+I,IAAInd,KAAKwe,GAAGi+I,SAI1Cz8J,KAAKkC,YAAYjB,IA9CnB,sB,8EC3BA,cAEA,OACA,QACA,QAEM+rI,EAAa,IAAI,EAAA55H,QAAQ,EAAG,EAAG,GAErC,OACA,MAAMupJ,UAA4B,EAAA7zJ,iBAAlC,c,oBACC,KAAAs0D,OAAS,EAAA96C,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC1C,KAAAqiE,OAAS,EAAAzkF,YAAYxjB,MAAM,EAAG,CAAC4lC,MAAO,CAAC,EAAG,KAC1C,KAAA4qG,gBAAkB,EAAAhtH,YAAYtjB,QAAQ,GAAI,CAAC0lC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAChF,KAAA4qG,gBAAkB,EAAAjtH,YAAYtjB,QAAQ,EAAG,CAAC0lC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAC/E,KAAA6qG,IAAM,EAAAltH,YAAY1jB,QAAQ,GAC1B,KAAA8qE,OAAS,EAAApnD,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,IACpC,KAAA+4H,UAAY,EAAAj2G,YAAY9iB,QAAQ,CAAC,EAAG,EAAG,KAExC,MAAMuJ,EAAe,IAAI4zJ,EAEzB,MAAazgC,UAAoB,EAAAt8H,aAAjC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAAijI,gBAAkB,IAAI,EAAA5nH,cAJ9B,cACC,MAAO,OAKR,OACC,MAAM5iB,EAAW,IAAI,EAAAo7J,uBACpB58J,KAAKwe,GAAG4+C,OACRp9D,KAAKwe,GAAG4+C,OACRp9D,KAAKwe,GAAGuoF,OACR/mG,KAAKwe,GAAG8wH,gBACRtvI,KAAKwe,GAAG+wH,iBACPvvI,KAAKwe,GAAGgxH,KAGVxvI,KAAKgsI,gBAAgBqB,gBAAgB7rI,EAAUwrI,EAAYhtI,KAAKwe,GAAG+5G,WACnE/2H,EAAS4qI,UAAUpsI,KAAKwe,GAAGkrD,OAAOpkE,EAAGtF,KAAKwe,GAAGkrD,OAAOnkE,EAAGvF,KAAKwe,GAAGkrD,OAAOlkE,GAEtExF,KAAKgrI,aAAaxpI,IArBpB,iB,8EChBA,cAEA,UAMA,OACA,QACA,QAEA,MAAMq7J,UAAiC,EAAA/zJ,iBAAvC,c,oBACC,KAAA0U,OAAS,EAAA8E,YAAYrjB,cAAc,uBAAwB,CAC1DqmC,eAAgB,CACfC,QAAS,EAAAnlC,YAAYwc,QASxB,MAAM7T,EAAe,IAAI8zJ,EAEzB,MAAa1gC,UAAyB,EAAAv8H,aAAtC,c,oBACC,KAAAoJ,cAAgBD,EAKR,KAAA+zJ,mBAAuC,IAAI,EAAAC,iBAAiB/8J,KAAKg9J,wBAAwBn/J,KAAKmC,OAJtG,cACC,MAAO,aASR,kBACCA,KAAKa,GAAG6G,OAAOkb,UAAU,GACzB5iB,KAAKa,GAAG6G,OAAO2yF,2BAA2B,CAAC,EAAA11F,eAAey2F,YAG3D,KAAKoyC,GACJxtI,KAAKi9J,sBAAwBzvB,EAAY,GAEzC,MAAMpmG,EAAcpnC,KAAK/B,EAAEuf,OAAOmpB,aACf,MAAfS,GACHpnC,KAAKk9J,eAAkB91H,EAAsCrpC,OAC7DiC,KAAK88J,mBAAmBK,WAAWn9J,KAAKk9J,kBAGxCl9J,KAAKk9J,oBAAiB34J,EAEtBvE,KAAK88J,mBAAmBM,iBAGzBp9J,KAAK6+H,eAAe7+H,KAAKi9J,uBAG1B,wBAAwBI,GAOvB,GAAIr9J,KAAKi9J,uBAAyBj9J,KAAKU,OAAQ,CAC9C,MAAM8T,EAASxU,KAAKi9J,sBAAsBzoJ,SACpC8oJ,EAAoBt9J,KAAKU,OAA2B3C,OAAOw/J,YACjE/oJ,EAAO5S,QAAS+S,IACf,MAAMP,EAAWO,EAAMP,WACjBopJ,EAAMx9J,KAAKy9J,wBAAwBrpJ,EAAUkpJ,GACnD,GAAIE,EAAK,CACR,MAAM3vI,EAAK,CACVvoB,EAAG,GAAc,GAATk4J,EAAI,GAAW,IACvBj4J,EAAY,GAATi4J,EAAI,GAAW,IAEnB7oJ,EAAMsuH,iBAxEK,KAwEqBp1G,OAU5B,wBAAwBgnE,EAAiByoE,GAChD,GAAIt9J,KAAKk9J,eAER,OADAroE,EAAOtuE,aAAa+2I,GACbzoE,EAAO6oE,QAAQ19J,KAAKk9J,gBAAgBn4J,WAjE9C,sB,6BC5BA,IAAKiiC,E,iDAAL,SAAKA,GACJ,kBACA,oBAFD,CAAKA,MAAK,KAOV,yBAMC,YAAoB4lE,GAAA,KAAAA,YALZ,KAAA+wD,gBAA0B,EAG1B,KAAAC,iBAA2B,EAGlC59J,KAAK69J,UAAY79J,KAAK89J,kBAAkBjgK,KAAKmC,MAG9C,gBACCA,KAAKm9J,gBAAW54J,GAEjB,WAAWq+C,GACLA,GACJ5iD,KAAK+9J,uBAGN,MAAMC,EAAah+J,KAAKi+J,QACxBj+J,KAAKi+J,QAAUr7G,EAEK,MAAhB5iD,KAAKi+J,SACRj+J,KAAK89J,qBAIY,MAAhB99J,KAAKi+J,QAAkBj+J,KAAKi+J,QAAQ5sJ,UAAO9M,MAC7B,MAAdy5J,EAAqBA,EAAW3sJ,UAAO9M,IAExCvE,KAAKk+J,oBAIP,kBAAkBC,GACjBn+J,KAAK+9J,uBAEL/9J,KAAK29J,eAAiBQ,EAEtBn+J,KAAKk+J,oBAGE,sBACP,OAAIl+J,KAAK29J,eACD32H,EAAMo3H,OAENp3H,EAAMq3H,QAIP,oBACHr+J,KAAK49J,iBAIW,MAAhB59J,KAAKi+J,UACRj+J,KAAKi+J,QAAQl8F,iBAAiB/hE,KAAKs+J,sBAAuBt+J,KAAK69J,WAC/D79J,KAAK49J,iBAAkB,GAIjB,wBACsB,IAAzB59J,KAAK49J,iBAIW,MAAhB59J,KAAKi+J,UACRj+J,KAAKi+J,QAAQtgG,oBAAoB39D,KAAKs+J,sBAAuBt+J,KAAK69J,WAClE79J,KAAK49J,iBAAkB,GAIjB,oBACa,MAAhB59J,KAAKi+J,SACRj+J,KAAK4sG,UAAU5sG,KAAKi+J,Y,qLC1EnBM,EAAa,CAEhB9rI,SAAU,CAET,SAAY,CAAEn1B,MAAO,MACrB,QAAW,CAAEA,MAAO,IAIrBg1B,aAAc,CAEb,oBAEA,gBAEA,cACA,8EAEA,KAECptB,KAAM,MAERqtB,eAAgB,CAEf,yBAEA,8BAEA,oBAEA,gBAEA,6CACA,oCAEA,KAECrtB,KAAM,O,wBCrCLs5J,EAAa,SAAWx0C,EAAQy0C,GAEnC/gJ,EAAA,EAAKtiB,KAAM4E,MAEXA,KAAKy+J,eAA4Bl6J,IAAdk6J,EAA4BA,EAAY,WAEtDz0C,aAAkBx5F,EAAA,gBAEtBxwB,KAAKyyB,SAAWu3F,EAAOv3F,SAEvBzyB,KAAKmD,SAAW6mH,GAELA,IAEXhqH,KAAKyyB,SAAWo2F,EAAA,cAAc9lH,MAAOinH,EAAOv3F,UAE5CzyB,KAAKmD,SAAW,IAAIqtB,EAAA,eAAgB,CAEnCwzB,QAAS/oD,OAAO8iB,OAAQ,GAAIisG,EAAOhmE,SACnCvxB,SAAUzyB,KAAKyyB,SACfH,aAAc03F,EAAO13F,aACrBC,eAAgBy3F,EAAOz3F,kBAMzBvyB,KAAK0+J,OAAS,IAAIhhJ,EAAA,EAAKD,eAAgBzd,KAAKmD,WAI7Cq7J,EAAWtjK,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ+f,EAAA,EAAKxiB,WAAa,CAEtE6Y,YAAayqJ,EAEbvgJ,OAAQ,SAAWI,EAAUw0G,EAAaC,GAEpC9yH,KAAKyyB,SAAUzyB,KAAKy+J,aAExBz+J,KAAKyyB,SAAUzyB,KAAKy+J,WAAYnhK,MAAQw1H,EAAWt3F,SAIpDx7B,KAAK0+J,OAAOv7J,SAAWnD,KAAKmD,SAEvBnD,KAAK8d,gBAETO,EAASspF,gBAAiB,MAC1B3nG,KAAK0+J,OAAOzgJ,OAAQI,KAIpBA,EAASspF,gBAAiBkrB,GAErB7yH,KAAK6d,OAAQQ,EAASR,MAAOQ,EAASi1G,eAAgBj1G,EAASk1G,eAAgBl1G,EAASm1G,kBAC7FxzH,KAAK0+J,OAAOzgJ,OAAQI,OCxDvB,IAAIsgJ,EAAW,SAAWv7J,EAAOoa,GAEhCE,EAAA,EAAKtiB,KAAM4E,MAEXA,KAAKoD,MAAQA,EACbpD,KAAKwd,OAASA,EAEdxd,KAAK6d,OAAQ,EACb7d,KAAK4d,WAAY,EAEjB5d,KAAK88D,SAAU,GAIhB6hG,EAASzjK,UAAYD,OAAO8iB,OAAQ9iB,OAAO0C,OAAQ+f,EAAA,EAAKxiB,WAAa,CAEpE6Y,YAAa4qJ,EAEb1gJ,OAAQ,SAAWI,EAAUw0G,EAAaC,GAEzC,IAeI8rC,EAAYC,EAfZt5H,EAAUlnB,EAASijE,aACnBzkE,EAAQwB,EAASxB,MAIrBA,EAAMy9D,QAAQzwE,MAAMi1J,SAAS,GAC7BjiJ,EAAMy9D,QAAQphB,MAAM4lG,SAAS,GAI7BjiJ,EAAMy9D,QAAQzwE,MAAMk1J,WAAW,GAC/BliJ,EAAMy9D,QAAQphB,MAAM6lG,WAAW,GAM1B/+J,KAAK88D,SAET8hG,EAAa,EACbC,EAAa,IAIbD,EAAa,EACbC,EAAa,GAIdhiJ,EAAMy9D,QAAQ0kF,QAAQC,SAAS,GAC/BpiJ,EAAMy9D,QAAQ0kF,QAAQE,MAAO35H,EAAQ45H,QAAS55H,EAAQ45H,QAAS55H,EAAQ45H,SACvEtiJ,EAAMy9D,QAAQ0kF,QAAQI,QAAS75H,EAAQ+1D,OAAQsjE,EAAY,YAC3D/hJ,EAAMy9D,QAAQ0kF,QAAQK,SAAUR,GAChChiJ,EAAMy9D,QAAQ0kF,QAAQD,WAAW,GAIjC1gJ,EAASspF,gBAAiBmrB,GACrB9yH,KAAK6d,OAAQQ,EAASR,QAC3BQ,EAASJ,OAAQje,KAAKoD,MAAOpD,KAAKwd,QAElCa,EAASspF,gBAAiBkrB,GACrB7yH,KAAK6d,OAAQQ,EAASR,QAC3BQ,EAASJ,OAAQje,KAAKoD,MAAOpD,KAAKwd,QAIlCX,EAAMy9D,QAAQzwE,MAAMk1J,WAAW,GAC/BliJ,EAAMy9D,QAAQphB,MAAM6lG,WAAW,GAI/BliJ,EAAMy9D,QAAQ0kF,QAAQD,WAAW,GACjCliJ,EAAMy9D,QAAQ0kF,QAAQI,QAAS75H,EAAQ+5H,MAAO,EAAG,YACjDziJ,EAAMy9D,QAAQ0kF,QAAQE,MAAO35H,EAAQg6H,KAAMh6H,EAAQg6H,KAAMh6H,EAAQg6H,MACjE1iJ,EAAMy9D,QAAQ0kF,QAAQD,WAAW,MAOnC,IAAIS,EAAgB,WAEnB9hJ,EAAA,EAAKtiB,KAAM4E,MAEXA,KAAK4d,WAAY,GAIlB4hJ,EAActkK,UAAYD,OAAO0C,OAAQ+f,EAAA,EAAKxiB,WAE9CD,OAAO8iB,OAAQyhJ,EAActkK,UAAW,CAEvC+iB,OAAQ,SAAWI,GAElBA,EAASxB,MAAMy9D,QAAQ0kF,QAAQD,WAAW,GAC1C1gJ,EAASxB,MAAMy9D,QAAQ0kF,QAAQC,SAAS,MCvF1C,IAAIvlH,EAAiB,SAAWr7B,EAAUohJ,GAIzC,GAFAz/J,KAAKqe,SAAWA,OAEM9Z,IAAjBk7J,EAA6B,CAEjC,IAAIlH,EAAa,CAChBn2H,UAAW,eACXC,UAAW,eACX6lE,OAAQ,aACRG,eAAe,GAGZ79F,EAAO6T,EAASwrD,QAAS,IAAIhzC,EAAA,SACjC72B,KAAK0/J,YAAcrhJ,EAASshJ,gBAC5B3/J,KAAKqjF,OAAS74E,EAAK49B,MACnBpoC,KAAK4/J,QAAUp1J,EAAKu8F,QAEpB04D,EAAe,IAAIx3D,EAAA,kBAAmBjoG,KAAKqjF,OAASrjF,KAAK0/J,YAAa1/J,KAAK4/J,QAAU5/J,KAAK0/J,YAAanH,IAC1F/8H,QAAQ3+B,KAAO,0BAI5BmD,KAAK0/J,YAAc,EACnB1/J,KAAKqjF,OAASo8E,EAAar3H,MAC3BpoC,KAAK4/J,QAAUH,EAAa14D,OAI7B/mG,KAAK6/J,cAAgBJ,EACrBz/J,KAAK8/J,cAAgBL,EAAa18J,QAClC/C,KAAK8/J,cAActkI,QAAQ3+B,KAAO,qBAElCmD,KAAK6yH,YAAc7yH,KAAK6/J,cACxB7/J,KAAK8yH,WAAa9yH,KAAK8/J,cAEvB9/J,KAAK8d,gBAAiB,EAEtB9d,KAAKu6C,OAAS,QAIMh2C,IAAfg6J,GAEJl7J,QAAQ6a,MAAO,kDAII3Z,IAAfi6J,GAEJn7J,QAAQ6a,MAAO,6CAIhBle,KAAK+/J,SAAW,IAAIvB,EAAYD,GAEhCv+J,KAAKggK,MAAQ,IAAIC,EAAA,GAIlBhlK,OAAO8iB,OAAQ27B,EAAex+C,UAAW,CAExCglK,YAAa,WAEZ,IAAIj3G,EAAMjpD,KAAK8yH,WACf9yH,KAAK8yH,WAAa9yH,KAAK6yH,YACvB7yH,KAAK6yH,YAAc5pE,GAIpB7O,QAAS,SAAW+lH,GAEnBngK,KAAKu6C,OAAOj/C,KAAM6kK,GAClBA,EAAKniJ,QAAShe,KAAKqjF,OAASrjF,KAAK0/J,YAAa1/J,KAAK4/J,QAAU5/J,KAAK0/J,cAInEU,WAAY,SAAWD,EAAM/9J,GAE5BpC,KAAKu6C,OAAOr+C,OAAQkG,EAAO,EAAG+9J,IAI/BE,kBAAmB,SAAWC,GAE7B,IAAM,IAAIxlK,EAAIwlK,EAAY,EAAGxlK,EAAIkF,KAAKu6C,OAAOv/C,OAAQF,IAEpD,GAAKkF,KAAKu6C,OAAQz/C,GAAI6iB,QAErB,OAAO,EAMT,OAAO,GAIRM,OAAQ,SAAWsiJ,QAICh8J,IAAdg8J,IAEJA,EAAYvgK,KAAKggK,MAAMQ,YAIxB,IAIIL,EAAMrlK,EAJN80J,EAAsB5vJ,KAAKqe,SAASwxI,kBAEpC4Q,GAAa,EAEJ33G,EAAK9oD,KAAKu6C,OAAOv/C,OAE9B,IAAMF,EAAI,EAAGA,EAAIguD,EAAIhuD,IAIpB,IAAsB,KAFtBqlK,EAAOngK,KAAKu6C,OAAQz/C,IAEV6iB,QAAV,CAKA,GAHAwiJ,EAAKriJ,eAAmB9d,KAAK8d,gBAAkB9d,KAAKqgK,kBAAmBvlK,GACvEqlK,EAAKliJ,OAAQje,KAAKqe,SAAUre,KAAK6yH,YAAa7yH,KAAK8yH,WAAYytC,EAAWE,GAErEN,EAAKviJ,UAAY,CAErB,GAAK6iJ,EAAa,CAEjB,IAAIl7H,EAAUvlC,KAAKqe,SAASijE,aACxB09E,EAAUh/J,KAAKqe,SAASxB,MAAMy9D,QAAQ0kF,QAG1CA,EAAQI,QAAS75H,EAAQm7H,SAAU,EAAG,YAEtC1gK,KAAK+/J,SAAS9hJ,OAAQje,KAAKqe,SAAUre,KAAK6yH,YAAa7yH,KAAK8yH,WAAYytC,GAGxEvB,EAAQI,QAAS75H,EAAQ+5H,MAAO,EAAG,YAIpCt/J,KAAKkgK,mBAIY37J,IAAbo6J,IAECwB,aAAgBxB,EAEpB8B,GAAa,EAEFN,aAAgBX,IAE3BiB,GAAa,IAQhBzgK,KAAKqe,SAASspF,gBAAiBioD,IAIhCjnJ,MAAO,SAAW82J,GAEjB,QAAsBl7J,IAAjBk7J,EAA6B,CAEjC,IAAIj1J,EAAOxK,KAAKqe,SAASwrD,QAAS,IAAIhzC,EAAA,SACtC72B,KAAK0/J,YAAc1/J,KAAKqe,SAASshJ,gBACjC3/J,KAAKqjF,OAAS74E,EAAK49B,MACnBpoC,KAAK4/J,QAAUp1J,EAAKu8F,QAEpB04D,EAAez/J,KAAK6/J,cAAc98J,SACrBib,QAAShe,KAAKqjF,OAASrjF,KAAK0/J,YAAa1/J,KAAK4/J,QAAU5/J,KAAK0/J,aAI3E1/J,KAAK6/J,cAAczhJ,UACnBpe,KAAK8/J,cAAc1hJ,UACnBpe,KAAK6/J,cAAgBJ,EACrBz/J,KAAK8/J,cAAgBL,EAAa18J,QAElC/C,KAAK6yH,YAAc7yH,KAAK6/J,cACxB7/J,KAAK8yH,WAAa9yH,KAAK8/J,eAIxB9hJ,QAAS,SAAWoqB,EAAO2+D,GAE1B/mG,KAAKqjF,OAASj7C,EACdpoC,KAAK4/J,QAAU74D,EAEf,IAAI45D,EAAiB3gK,KAAKqjF,OAASrjF,KAAK0/J,YACpCkB,EAAkB5gK,KAAK4/J,QAAU5/J,KAAK0/J,YAE1C1/J,KAAK6/J,cAAc7hJ,QAAS2iJ,EAAgBC,GAC5C5gK,KAAK8/J,cAAc9hJ,QAAS2iJ,EAAgBC,GAE5C,IAAM,IAAI9lK,EAAI,EAAGA,EAAIkF,KAAKu6C,OAAOv/C,OAAQF,IAExCkF,KAAKu6C,OAAQz/C,GAAIkjB,QAAS2iJ,EAAgBC,IAM5CtnH,cAAe,SAAWunH,GAEzB7gK,KAAK0/J,YAAcmB,EAEnB7gK,KAAKge,QAAShe,KAAKqjF,OAAQrjF,KAAK4/J,YAOlC,IA+BKpiJ,EACAhc,EAEAic,EAlCD,EAAO,WAGVzd,KAAK2d,SAAU,EAGf3d,KAAK4d,WAAY,EAGjB5d,KAAK6d,OAAQ,EAGb7d,KAAK8d,gBAAiB,GAIvB7iB,OAAO8iB,OAAQ,EAAK7iB,UAAW,CAE9B8iB,QAAS,aAETC,OAAQ,WAEP5a,QAAQ6a,MAAO,iEAOjB,EAAKT,gBAEAD,EAAS,IAAI6zG,EAAA,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GACpD7vH,EAAW,IAAI,sBAAqB,EAAG,GAEvCic,EAAiB,SAAWta,GAE/BnD,KAAKme,MAAQ,IAAI5U,EAAA,KAAM/H,EAAU2B,IAIlClI,OAAO+B,eAAgBygB,EAAeviB,UAAW,WAAY,CAE5DgC,IAAK,WAEJ,OAAO8C,KAAKme,MAAMhb,UAInB5C,IAAK,SAAWjD,GAEf0C,KAAKme,MAAMhb,SAAW7F,KAMxBrC,OAAO8iB,OAAQN,EAAeviB,UAAW,CAExCkjB,QAAS,WAERpe,KAAKme,MAAM3c,SAAS4c,WAIrBH,OAAQ,SAAWI,GAElBA,EAASJ,OAAQje,KAAKme,MAAOX,MAMxBC","file":"polygonjs-engine.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonppolygonjs_engine\"] = window[\"webpackJsonppolygonjs_engine\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([413,8,0,5,7,3,1,2,4,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// import {BaseNode} from '../../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {RampParam} from '../../../params/Ramp';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamOptionsByTypeMap} from '../../../params/types/ParamOptionsByTypeMap';\n\n// function _ParamCheckNameConsistency<T extends BaseNode>(name: string, target: T, key: keyof T, type: ParamType) {\n// \tconst key_s = key as string;\n// \tif (key_s != `_param_${name}`) {\n// \t\tconsole.warn('param name inconsistent');\n// \t}\n// \tconst param = target.params.get(name);\n// \tif (param && param.type != type) {\n// \t\tconsole.warn('param type inconsistent');\n// \t}\n// }\n// export const _ParamBoolean = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.BOOLEAN);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.boolean(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.float(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(default_value: number, options?: ParamOptions) {\n// \treturn <T extends NodeParamsConfig>(target: T, key: string) => {\n// \t\t// _ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\t// const config = new ParamConfig(ParamType.FLOAT, default_value, options);\n// \t\t// target.add_config(key, config);\n// \t\t// target.set_default_value(key, default_value);\n// \t\t// target.set_options(key, options);\n// \t\t// Object.defineProperty(target.options, key, {\n// \t\t// \tget: () => target.params.float(name),\n// \t\t// });\n// \t};\n// };\n// export const _ParamString = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.STRING);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.string(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector2 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR2);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector2(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector3 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR3);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector3(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamColor = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.COLOR);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.color(name),\n// \t\t});\n// \t};\n// };\n// declare global {\n// \tconst ParamB: typeof _ParamBoolean;\n// \tconst ParamF: typeof _ParamFloat;\n// \tconst ParamS: typeof _ParamString;\n// \tconst ParamV2: typeof _ParamVector2;\n// \tconst ParamV3: typeof _ParamVector3;\n// \tconst ParamC: typeof _ParamColor;\n// }\n// class ParamConfig<T extends ParamType> {\n// \tconstructor(readonly type: T, readonly default_value: ParamValuesTypeMap[T], readonly options: ParamOptions = {}) {}\n// }\nexport class ParamTemplate<T extends ParamType> {\n\treadonly value_type!: ParamValuesTypeMap[T];\n\treadonly param_class!: ParamConstructorMap[T];\n\t// readonly options?: ParamOptions;\n\n\tconstructor(public type: T, public init_value: ParamInitValuesTypeMap[T], public options?: ParamOptions) {}\n}\n\n// class Test1 {\n// \ta: number\n// \tb: string\n// }\n// type test = Extract<typeof Test1, string>;\n// type test2 = Pick<typeof Test1, 'b'>;\n// type test3 = Test1['b'];\n// type test2 = keyof BoxSopParamConfig;\nexport class ParamConfig {\n\t// static _GENERIC<T extends ParamType> (type: T, init_value: ParamInitValuesTypeMap[T], options?: ParamOptions) {\n\t// \treturn new ParamTemplate<T>(type, init_value, options);\n\t// }\n\t// static BUTTON(init_value: ParamInitValuesTypeMap[ParamType.BUTTON], options?: ParamOptions) {\n\t// \treturn this._GENERIC<ParamType.BUTTON>(ParamType.BUTTON, init_value, options)\n\t// }\n\tstatic BUTTON(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BUTTON>(ParamType.BUTTON, init_value, options);\n\t}\n\tstatic BOOLEAN(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BOOLEAN>(ParamType.BOOLEAN, init_value, options);\n\t}\n\tstatic COLOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.COLOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.COLOR>(ParamType.COLOR, init_value, options);\n\t}\n\tstatic FLOAT(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FLOAT>(ParamType.FLOAT, init_value, options);\n\t}\n\tstatic FOLDER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FOLDER] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FOLDER>(ParamType.FOLDER, init_value, options);\n\t}\n\tstatic INTEGER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.INTEGER>(ParamType.INTEGER, init_value, options);\n\t}\n\tstatic OPERATOR_PATH(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n\t}\n\tstatic RAMP(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.RAMP] = RampParam.DEFAULT_VALUE,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.RAMP]\n\t) {\n\t\treturn new ParamTemplate<ParamType.RAMP>(ParamType.RAMP, init_value, options);\n\t}\n\tstatic SEPARATOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.SEPARATOR] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.SEPARATOR>(ParamType.SEPARATOR, init_value, options);\n\t}\n\tstatic STRING(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.STRING] = '',\n\t\toptions?: ParamOptionsByTypeMap[ParamType.STRING]\n\t) {\n\t\treturn new ParamTemplate<ParamType.STRING>(ParamType.STRING, init_value, options);\n\t}\n\tstatic VECTOR2(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR2]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR2>(ParamType.VECTOR2, init_value, options);\n\t}\n\tstatic VECTOR3(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR3]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR3>(ParamType.VECTOR3, init_value, options);\n\t}\n\tstatic VECTOR4(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR4]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR4>(ParamType.VECTOR4, init_value, options);\n\t}\n}\n\nexport class NodeParamsConfig implements Dictionary<ParamTemplate<ParamType>> {\n\t[name: string]: ParamTemplate<ParamType>;\n}\n// export class NodeParamsConfig {}\n\n// interface ParamConfig {\n// \ttype: ParamType;\n// \tvalue: any;\n// \toptions?: ParamOptions;\n// }\n// export type ParamConfigsArray = ParamConfig[];\n\n// declare global {\n// \tinterface Window {\n// \t\tParamB: typeof _ParamB;\n// \t\tParamC: typeof _ParamC;\n// \t}\n// }\n// window.ParamC = _ParamC;\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\n// import {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// import lodash_includes from 'lodash/includes';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport {TypedNode} from '../_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {ObjectType} from '../../../core/geometry/Constant';\n\nimport {GeometryContainer} from '../../containers/Geometry';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerDB} from '../utils/FlagsController';\n// import * as Container from '../../Container/Geometry';\n\n// import {AttribTypeParam} from './concerns/AttribTypeParam';\n// import {Bypass} from './Concerns/Bypass';\n// import {GroupParam} from './concerns/GroupParam';\n// import {Named} from './concerns/Named'; // TODO; typescript\n// import {ObjectTypeParam} from './concerns/ObjectTypeParam';\n\n// TODO: do I really need to add attributes in objects?\n// TODO: after setting a node dirty, it should clear its object\n\n// import {RequestContainerGeometryCallback} from '../../../Engine/Container/Geometry'\n// const CONTAINER_CLASS = 'Geometry';\n\nenum MESSAGE {\n\tFROM_SET_CORE_GROUP = 'from set_core_group',\n\tFROM_SET_GROUP = 'from set_group',\n\tFROM_SET_OBJECTS = 'from set_objects',\n\tFROM_SET_OBJECT = 'from set_object',\n\tFROM_SET_GEOMETRIES = 'from set_geometries',\n\tFROM_SET_GEOMETRY = 'from set_geometry',\n}\n\nconst INPUT_GEOMETRY_NAME = 'input geometry';\nconst DEFAULT_INPUT_NAMES = [INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME];\n\nexport class TypedSopNode<K extends NodeParamsConfig> extends TypedNode<'GEOMETRY', BaseSopNodeType, K> {\n\tcontainer_controller: TypedContainerController<GeometryContainer> = new TypedContainerController<GeometryContainer>(\n\t\tthis,\n\t\tGeometryContainer\n\t);\n\tpublic readonly flags: FlagsControllerDB = new FlagsControllerDB(this);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.SOP;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// _master_group: Group\n\t// _objects: Object3D[] = []\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\tif (this.flags.display) {\n\t\t\tthis.flags.display.set(false);\n\t\t\tthis.flags.display.add_hook(() => {\n\t\t\t\tif (this.flags.display.active) {\n\t\t\t\t\tconst parent = this.parent;\n\t\t\t\t\tif (parent && parent.display_node_controller) {\n\t\t\t\t\t\tparent.display_node_controller.set_display_node(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\t// request_container() {\n\t// \treturn super.request_container(); //as Promise<GeometryContainer>;\n\t// }\n\n\t//\n\t//\n\t// GEOMETRY\n\t//\n\t//\n\t// group(): Group {\n\t// \treturn this._master_group = this._master_group || this._create_group()\n\t// }\n\t// set_group(group: Group){\n\t// \tthis._clear_objectsI() //(MESSAGE.FROM_SET_GROUP);\n\t// \tthis._master_group.add(group)\n\t// \t// let child;\n\n\t// \t// const new_children = [];\n\t// \t// while (child = group.children[0]) {\n\t// \t// \tnew_children.push(child);\n\t// \t// \tgroup.remove(child);\n\t// \t// }\n\n\t// \t// new_children.forEach(child=> {\n\t// \t// \tthis._master_group.add( child );\n\t// \t// });\n\n\t// \t// // if (this.allow_add_object_attributes()) {\n\t// \t// \tthis._master_group.traverse(object=> {\n\t// \t// \t\tthis._set_object_attributes(object);\n\t// \t// \t});\n\t// \t// // }\n\t// \tthis.set_container(this._master_group, MESSAGE.FROM_SET_GROUP);\n\t// }\n\tset_core_group(core_group: CoreGroup) {\n\t\tconst objects = core_group.objects();\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\tthis.set_container(core_group, MESSAGE.FROM_SET_CORE_GROUP);\n\t}\n\n\tset_object(object: Object3D) {\n\t\t// this._clear_objects();\n\t\t// this.add_object(object);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_OBJECT);\n\t\tthis._set_object_attributes(object);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_OBJECT);\n\t}\n\tset_objects(objects: Object3D[]) {\n\t\t// this._clear_objects();\n\t\t// const list = objects;\n\t\t// lodash_times(list.length, i=> {\n\t\t// \tconst object = list[i];\n\t\t// \tthis.add_object(object);\n\t\t// });\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_OBJECTS);\n\t}\n\n\t// add_object(object: Object3D) {\n\t// \tif (object != null) {\n\t// \t\tthis.group().add(object);\n\t// \t\t// if (this.allow_add_object_attributes()) {\n\t// \t\tthis._set_object_attributes(object);\n\t// \t\t// }\n\t// \t\treturn object;\n\t// \t}\n\t// }\n\t// add_geometry(geometry: BufferGeometry, type: ObjectType) {\n\t// \tlet object;\n\t// \tif (geometry.index == null) {\n\t// \t\tthis._add_index(geometry);\n\t// \t}\n\n\t// \tif ((object = this.create_object(geometry, type)) != null) {\n\t// \t\tthis.add_object(object);\n\t// \t}\n\t// }\n\n\tset_geometry(geometry: BufferGeometry, type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\t// this.add_geometry(geometry, type);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_GEOMETRY);\n\t\tconst object = this.create_object(geometry, type);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_GEOMETRY);\n\t}\n\t//this.end_cook()\n\n\tset_geometries(geometries: BufferGeometry[], type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\tconst objects: Object3D[] = [];\n\t\tlet object;\n\t\tgeometries.forEach((geometry) => {\n\t\t\tobject = this.create_object(geometry, type);\n\t\t\tthis._set_object_attributes(object);\n\t\t\tobjects.push(object);\n\t\t});\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_GEOMETRIES);\n\t}\n\n\tset_container_objects(objects: Object3D[], message: MESSAGE) {\n\t\tconst core_group = this.container_controller.container.core_content() || new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\tcore_group.touch();\n\t\tthis.set_container(core_group);\n\t}\n\n\t// do_clone_inputs() {\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_clone_inputs')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\t// allow_add_object_attributes() {\n\t// \tif (!this.do_clone_inputs()) { return false; }\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_add_object_attributes')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\n\t// _create_group() {\n\t// \tconst group = new Group();\n\t// \tgroup.name = this.full_path();\n\n\t// \tthis._init_sop_bypass_group(group)\n\n\t// \treturn group;\n\t// }\n\n\tcreate_object(geometry: BufferGeometry, type?: ObjectType): Object3DWithGeometry {\n\t\t// ensure it has an index\n\t\tif (!geometry.index) {\n\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t}\n\n\t\tif (type == null) {\n\t\t\ttype = CoreConstant.OBJECT_TYPE.MESH;\n\t\t}\n\t\t// if (!lodash_includes(CoreConstant.OBJECT_TYPES, type)) {\n\t\t// \tconst human_type = CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[type];\n\t\t// \tconst human_names = CoreConstant.OBJECT_TYPES.map(\n\t\t// \t\t(n) => CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[n]\n\t\t// \t);\n\t\t// \tthrow `type '${human_type}' not recognized. Available types are ${human_names.join(', ')}.`;\n\t\t// }\n\n\t\t// if (geometry != null) {\n\t\tconst object_constructor = CoreConstant.CONSTRUCTORS_BY_NAME[type]; //THREE[type];\n\t\tconst material = CoreConstant.MATERIALS[type].clone();\n\t\tconst object = new object_constructor(geometry, material) as Object3DWithGeometry;\n\t\tobject.castShadow = true;\n\t\tobject.receiveShadow = true;\n\t\tobject.frustumCulled = false;\n\n\t\treturn object;\n\t\t// }\n\t}\n\n\t_set_object_attributes(object: Object3D) {\n\t\t// if (!this.allow_add_object_attributes()) { return; }\n\t\t// TODO: the exception below are just to debug when a geo could be reused or not cloned properly\n\t\t// I could remove that when more sure it all refreshes fine, and this would allow the null or merge to\n\t\t// not have to clone the data\n\t\t// if ((object.name == null) && (object.name !== '')) {\n\t\t// \tif (this.do_clone_inputs()) {\n\t\t// \t\tthrow `object.name already set to ${object.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t}\n\t\t// } else {\n\t\t// \tobject.name = this.full_path();\n\t\t// }\n\n\t\t// if ((geometry = object.geometry) != null) {\n\t\t// \tif ((geometry.name == null) && (geometry.name !== '')) {\n\t\t// \t\tif (this.do_clone_inputs()) {\n\t\t// \t\t\tthrow `geometry.node_name already set to ${geometry.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tgeometry.name = this.full_path();\n\t\t// \t}\n\t\t// }\n\t\tconst material: Material = (object as Mesh).material as Material;\n\t\tif (material) {\n\t\t\tif (!this.scene) {\n\t\t\t\tconsole.log('no scene');\n\t\t\t\tthrow 'no scene';\n\t\t\t}\n\t\t\tconst material_node = CoreMaterial.node(this.scene, material) as BaseMatNodeType;\n\t\t\tif (material_node) {\n\t\t\t\tmaterial_node.add_render_hook(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// _clear_objects() {\n\t// \tconst group = this.group();\n\n\t// \tlet child\n\t// \twhile(child = group.children[0]) {\n\t// \t\tgroup.remove(child);\n\t// \t}\n\t// \t// const children = lodash_clone(group.children);\n\t// \t// let child;\n\t// \t// for(let i=0; i < children.length; i++){\n\t// \t// \tchild = children[i]\n\t// \t// \tgroup.remove(child);\n\t// \t// \tchild.traverse((object)=>{\n\t// \t// \t\tif (object.geometry != null) {\n\t// \t// \t\t\tobject.geometry.dispose();\n\t// \t// \t\t}\n\t// \t// \t\t// no more material dispose since each the materials are not cloned\n\t// \t// \t\t// if (object.material){\n\t// \t// \t\t// \tif (lodash_isArray(object.material)){\n\t// \t// \t\t// \t\tobject.material.forEach((mat)=>{mat.dispose()})\n\t// \t// \t\t// \t} else {\n\t// \t// \t\t// \t\tobject.material.dispose()\n\t// \t// \t\t// \t}\n\t// \t// \t\t// }\n\t// \t// \t});\n\t// \t// }\n\t// }\n\n\t_add_index(geometry: BufferGeometry) {\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_array = position_attrib.array;\n\t\tconst points_count = position_array.length / 3;\n\t\tconst indices: number[] = [];\n\t\tlodash_times(points_count, (i) => indices.push(i));\n\n\t\tgeometry.setIndex(indices);\n\t}\n}\n\nexport type BaseSopNodeType = TypedSopNode<NodeParamsConfig>;\nexport class BaseSopNodeClass extends TypedSopNode<NodeParamsConfig> {}\n","import {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\n\nimport {ParamType} from '../../../poly/ParamType';\nimport {RampParam} from '../../../params/Ramp';\n\n// TODO: simplify GLDataType into one enum\n// http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html\n\n//\n//\n// GL Data types\n//\n//\nexport enum ConnectionPointType {\n\tBOOL = 'bool',\n\t// BVEC2 = 'bvec2',\n\t// BVEC3 = 'bvec3',\n\t// BVEC4 = 'bvec4',\n\tINT = 'int',\n\t// IVEC2 = 'ivec2',\n\t// IVEC3 = 'ivec3',\n\t// IVEC4 = 'ivec4',\n\tFLOAT = 'float',\n\tVEC2 = 'vec2',\n\tVEC3 = 'vec3',\n\tVEC4 = 'vec4',\n\t// matrices to be used later\n\t// MAT2 = 'mat2',\n\t// MAT3 = 'mat3',\n\t// MAT4 = 'mat4',\n\tSAMPLER_2D = 'sampler2D',\n}\n\n//\n//\n// ALL GL Data types in an array\n//\n//\nexport const ConnectionPointTypes: Array<ConnectionPointType> = [\n\tConnectionPointType.BOOL,\n\t// ConnectionPointType.BVEC2,\n\t// ConnectionPointType.BVEC3,\n\t// ConnectionPointType.BVEC4,\n\tConnectionPointType.INT,\n\t// ConnectionPointType.IVEC2,\n\t// ConnectionPointType.IVEC3,\n\t// ConnectionPointType.IVEC4,\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\n//\n//\n// Map to convert from a GL Data type to a ParamType\n//\n//\ntype ConnectionPointTypeToParamTypeMapGeneric = {[key in ConnectionPointType]: ParamType};\nexport interface IConnectionPointTypeToParamTypeMap extends ConnectionPointTypeToParamTypeMapGeneric {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT;\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2;\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3;\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4;\n}\nexport const ConnectionPointTypeToParamTypeMap: IConnectionPointTypeToParamTypeMap = {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT,\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2,\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3,\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4,\n\n\t[ConnectionPointType.SAMPLER_2D]: ParamType.RAMP,\n};\n\n//\n//\n// Map to convert from a ParamType to GL Data type\n//\n//\ntype ParamTypeToConnectionPointTypeMapGeneric = {[key in ParamType]: ConnectionPointType | undefined};\nexport interface IParamTypeToConnectionPointTypeMap extends ParamTypeToConnectionPointTypeMapGeneric {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL;\n\t[ParamType.COLOR]: ConnectionPointType.VEC3;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT;\n\t[ParamType.FOLDER]: undefined;\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2;\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3;\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4;\n\t[ParamType.BUTTON]: undefined;\n\t[ParamType.OPERATOR_PATH]: undefined;\n\t[ParamType.RAMP]: undefined;\n\t[ParamType.SEPARATOR]: undefined;\n\t[ParamType.STRING]: undefined;\n}\nexport const ParamTypeToConnectionPointTypeMap: IParamTypeToConnectionPointTypeMap = {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL,\n\t[ParamType.COLOR]: ConnectionPointType.VEC3,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT,\n\t[ParamType.FOLDER]: undefined,\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2,\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3,\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4,\n\t[ParamType.BUTTON]: undefined,\n\t[ParamType.OPERATOR_PATH]: undefined,\n\t[ParamType.RAMP]: undefined,\n\t[ParamType.SEPARATOR]: undefined,\n\t[ParamType.STRING]: undefined,\n};\n\n//\n//\n// Map of GL Data type default values\n//\n//\nexport type ConnectionPointInitValueMapGeneric = {\n\t[key in ConnectionPointType]: ParamInitValuesTypeMap[IConnectionPointTypeToParamTypeMap[key]];\n};\nexport const ConnectionPointInitValueMap: ConnectionPointInitValueMapGeneric = {\n\t[ConnectionPointType.BOOL]: false,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 0,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 0,\n\t[ConnectionPointType.VEC2]: [0, 0],\n\t[ConnectionPointType.VEC3]: [0, 0, 0],\n\t[ConnectionPointType.VEC4]: [0, 0, 0, 0],\n\n\t[ConnectionPointType.SAMPLER_2D]: RampParam.DEFAULT_VALUE_JSON,\n};\n\n//\n//\n// Map of GL Data type component counts\n//\n//\nexport type ConnectionPointComponentsCountMapGeneric = {\n\t[key in ConnectionPointType]: number;\n};\nexport const ConnectionPointComponentsCountMap: ConnectionPointComponentsCountMapGeneric = {\n\t[ConnectionPointType.BOOL]: 1,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 1,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 1,\n\t[ConnectionPointType.VEC2]: 2,\n\t[ConnectionPointType.VEC3]: 3,\n\t[ConnectionPointType.VEC4]: 4,\n\t[ConnectionPointType.SAMPLER_2D]: 1,\n};\n","export enum InputCloneMode {\n\tALWAYS = 'always',\n\tNEVER = 'never',\n\tFROM_NODE = 'from_node',\n}\n","export enum ParamType {\n\tBOOLEAN = 'boolean',\n\tBUTTON = 'button',\n\tCOLOR = 'color',\n\tFLOAT = 'float',\n\tFOLDER = 'folder',\n\tINTEGER = 'integer',\n\tOPERATOR_PATH = 'operator_path',\n\tRAMP = 'ramp',\n\tSEPARATOR = 'separator',\n\tSTRING = 'string',\n\tVECTOR2 = 'vector2',\n\tVECTOR3 = 'vector3',\n\tVECTOR4 = 'vector4',\n}\n// export type ParamTypeKey = ParamType\n// export type ParamTypeKeysArray = Array<ParamTypeKey>\n// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]\n","export enum NodeContext {\n\tCOP = 'cop',\n\tEVENT = 'event',\n\tGL = 'gl',\n\tJS = 'js',\n\tMANAGER = 'managers',\n\tMAT = 'mat',\n\tOBJ = 'objects',\n\tSOP = 'sop',\n\tPOST = 'post',\n}\n\nexport interface NodeContextAndType {\n\tcontext: NodeContext;\n\ttype: string;\n}\n","import {CoreString} from './String';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isString from 'lodash/isString';\n\nexport class ThreeToGl {\n\tstatic any(value: any) {\n\t\tif (lodash_isString(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (lodash_isBoolean(value)) {\n\t\t\treturn `${value}`;\n\t\t}\n\n\t\tif (lodash_isNumber(value)) {\n\t\t\treturn `${CoreString.ensure_float(value)}`;\n\t\t} else {\n\t\t\tconst values = value.toArray().map((v: number) => {\n\t\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t\t});\n\t\t\tconst gl_type = `vec${values.length}`;\n\t\t\treturn `${gl_type}(${values.join(', ')})`;\n\t\t}\n\t}\n\n\tstatic vector3(vec: Vector3 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec3(${values.join(', ')})`;\n\t}\n\tstatic vector2(vec: Vector2 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec2(${values.join(', ')})`;\n\t}\n\n\tstatic vector3_float(vec: Vector3 | string, num: number | string): string {\n\t\tif (!lodash_isString(num)) {\n\t\t\tnum = CoreString.ensure_float(num);\n\t\t}\n\t\treturn `vec4(${this.vector3(vec)}, ${num})`;\n\t}\n\n\tstatic float4(x: number | string, y: number | string, z: number | string, w: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\tif (!lodash_isString(w)) {\n\t\t\tw = CoreString.ensure_float(w);\n\t\t}\n\t\treturn `vec4(${x}, ${y}, ${z}, ${w})`;\n\t}\n\tstatic float3(x: number | string, y: number | string, z: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\treturn `vec3(${x}, ${y}, ${z})`;\n\t}\n\tstatic float2(x: number | string, y: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\treturn `vec2(${x}, ${y})`;\n\t}\n\tstatic float(x: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\treturn `${x}`;\n\t}\n\tstatic int(x: number | string) {\n\t\treturn `${x}`;\n\t}\n\tstatic bool(x: number | string) {\n\t\treturn `${x}`;\n\t}\n}\n","import {BaseGlNodeType} from '../_Base';\nimport {TypedGLDefinitionCollection} from './GLDefinitionCollection';\nimport {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\n\nexport enum GLDefinitionType {\n\tATTRIBUTE = 'attribute',\n\tFUNCTION = 'function',\n\tUNIFORM = 'uniform',\n\tVARYING = 'varying',\n}\n\nexport abstract class TypedGLDefinition<T extends GLDefinitionType> {\n\t// constructor(protected _node: BaseGlNodeType, protected _name: string) {}\n\tconstructor(\n\t\tprotected _definition_type: T,\n\t\tprotected _data_type: ConnectionPointType,\n\t\tprotected _node: BaseGlNodeType,\n\t\tprotected _name: string\n\t) {\n\t\t// super(_node, _name);\n\t}\n\n\tget definition_type() {\n\t\treturn this._definition_type;\n\t}\n\tget data_type() {\n\t\treturn this._data_type;\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\t// get id() {\n\t// \treturn this._data_type;\n\t// }\n\n\tabstract get line(): string;\n\tcollection_instance() {\n\t\treturn new TypedGLDefinitionCollection<T>();\n\t}\n}\n\nexport class AttributeGLDefinition extends TypedGLDefinition<GLDefinitionType.ATTRIBUTE> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.ATTRIBUTE, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `attribute ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class FunctionGLDefinition extends TypedGLDefinition<GLDefinitionType.FUNCTION> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.FUNCTION, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn this.name;\n\t}\n}\n\nexport class UniformGLDefinition extends TypedGLDefinition<GLDefinitionType.UNIFORM> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.UNIFORM, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `uniform ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class VaryingGLDefinition extends TypedGLDefinition<GLDefinitionType.VARYING> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.VARYING, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `varying ${this.data_type} ${this.name}`;\n\t}\n}\nexport type BaseGLDefinition = TypedGLDefinition<GLDefinitionType>;\n","import {\n\tConnectionPointType,\n\tConnectionPointInitValueMapGeneric,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n\tIConnectionPointTypeToParamTypeMap,\n} from './ConnectionPointType';\n// import {ParamInitValuesTypeMap} from '../params/ParamsController';\n\nexport interface TypedNamedConnectionPointData<T extends ConnectionPointType> {\n\tname: string;\n\ttype: T;\n}\n\nexport class TypedNamedConnectionPoint<T extends ConnectionPointType> {\n\tprivate _json: TypedNamedConnectionPointData<T> | undefined;\n\n\tconstructor(\n\t\tprotected _name: string,\n\t\tprotected _type: T,\n\t\tprotected _init_value?: ConnectionPointInitValueMapGeneric[T]\n\t) {\n\t\tif (this._init_value === undefined) {\n\t\t\tthis._init_value = ConnectionPointInitValueMap[this._type];\n\t\t}\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget param_type(): IConnectionPointTypeToParamTypeMap[T] {\n\t\treturn ConnectionPointTypeToParamTypeMap[this._type];\n\t}\n\tget init_value() {\n\t\treturn this._init_value;\n\t}\n\n\tto_json(): TypedNamedConnectionPointData<T> {\n\t\treturn (this._json = this._json || this._create_json());\n\t}\n\tprivate _create_json(): TypedNamedConnectionPointData<T> {\n\t\treturn {\n\t\t\tname: this._name,\n\t\t\ttype: this._type,\n\t\t};\n\t}\n}\n\nexport type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;\n","import {TypedNode} from '../_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {BaseGlShaderAssembler} from './code/assemblers/_Base';\nimport {AssemblerControllerNode} from './code/Controller';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamInitValueSerialized} from '../../params/types/ParamInitValueSerialized';\nimport {GlNodeSpareParamsController} from './utils/SpareParamsController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport class TypedGlNode<K extends NodeParamsConfig> extends TypedNode<'GL', BaseGlNodeType, K> {\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.GL;\n\t}\n\tprotected _param_configs_controller: ParamConfigsController | undefined;\n\tprotected _assembler: BaseGlShaderAssembler | undefined;\n\n\treadonly spare_params_controller: GlNodeSpareParamsController = new GlNodeSpareParamsController(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController | undefined;\n\n\tinitialize_base_node() {\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.io.outputs.set_named_output_connection_points([]);\n\n\t\tthis.spare_params_controller.initialize_node();\n\t}\n\tnode_sibbling(name: string): BaseGlNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseGlNodeType | null;\n\t}\n\tcook() {\n\t\tconsole.warn('gl nodes should never cook');\n\t}\n\n\tprotected _set_mat_to_recompile() {\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tget material_node(): AssemblerControllerNode | undefined {\n\t\tif (this.parent) {\n\t\t\tif (this.parent.type == this.type) {\n\t\t\t\treturn (this.parent as BaseGlNodeType)?.material_node;\n\t\t\t} else {\n\t\t\t\treturn this.parent as AssemblerControllerNode;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// VARIABLES\n\t//\n\t//\n\tgl_var_name(name: string) {\n\t\treturn `v_POLY_${this.name}_${name}`;\n\t}\n\n\tvariable_for_input(name: string): string {\n\t\tconst input_index = this.io.inputs.get_input_index(name);\n\t\tconst connection = this.io.connections.input_connection(input_index);\n\t\tif (connection) {\n\t\t\tconst input_node = (<unknown>connection.node_src) as BaseGlNodeType;\n\t\t\tconst output_connection_point =\n\t\t\t\tinput_node.io.outputs.named_output_connection_points[connection.output_index];\n\t\t\tif (output_connection_point) {\n\t\t\t\tconst output_name = output_connection_point.name;\n\t\t\t\treturn input_node.gl_var_name(output_name);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`no output called '${name}' for gl node ${input_node.full_path()}`);\n\t\t\t\tthrow 'variable_for_input ERROR';\n\t\t\t}\n\t\t} else {\n\t\t\treturn ThreeToGl.any(this.params.get(name)?.value);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ADDED LINES\n\t//\n\t//\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {}\n\n\treset_code() {\n\t\tthis._param_configs_controller?.reset();\n\t\t// this.reset_lines();\n\t}\n\n\t//\n\t//\n\t// PARAM CONFIGS\n\t//\n\t//\n\tpublic set_param_configs() {}\n\tparam_configs() {\n\t\treturn this._param_configs_controller?.list;\n\t}\n\t// private reset_param_configs() {\n\t// \tthis._param_configs = [];\n\t// }\n\t// add_param_config<T extends ParamType>(\n\t// \ttype: T,\n\t// \tname: string,\n\t// \tdefault_value: ParamInitValuesTypeMap[T],\n\t// \tuniform_name: string\n\t// ) {\n\t// \tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t// \tthis._param_configs.push(param_config);\n\t// }\n\t// param_configs() {\n\t// \treturn this._param_configs;\n\t// }\n\t//\n\t//\n\t// INPUT\n\t//\n\t//\n\tgl_input_default_value(name: string): ParamInitValueSerialized {\n\t\treturn null;\n\t}\n\n\t//\n\t//\n\t// MISC\n\t//\n\t//\n\n\t//\n\t//\n\t// NEEDED?\n\t//\n\t//\n\t// set_assembler(assembler: BaseGlShaderAssembler) {\n\t// \tthis._assembler = assembler;\n\t// }\n\t// get assembler(): BaseGlShaderAssembler | undefined {\n\t// \treturn this._assembler;\n\t// }\n\n\t// shader_configs() {\n\t// \treturn this.assembler?.shader_configs || [];\n\t// }\n\t// shader_config(name: string) {\n\t// \treturn this.assembler?.shader_config(name);\n\t// }\n\t// shader_names() {\n\t// \treturn this.assembler?.shader_names || [];\n\t// }\n}\n\nexport type BaseGlNodeType = TypedGlNode<NodeParamsConfig>;\nexport class BaseGlNodeClass extends TypedGlNode<NodeParamsConfig> {}\n\nclass ParamlessParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ParamlessParamsConfig();\nexport class ParamlessTypedGlNode extends TypedGlNode<ParamlessParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n","// import {VertexColors} from 'three/src/constants'\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {NoColors} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {FrontSide} from 'three/src/constants';\n// import {DoubleSide} from 'three/src/constants'\nimport {Color} from 'three/src/math/Color';\nimport {Bone} from 'three/src/objects/Bone';\n// import {AdditiveBlending} from 'three/src/constants'\nimport {Material} from 'three/src/materials/Material';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\n// const THREE = {AdditiveBlending, Bone, Color, DoubleSide, FrontSide, Group, LineBasicMaterial, LineSegments, Mesh, MeshLambertMaterial, MeshStandardMaterial, NoColors, Object3D, Points, PointsMaterial, Scene, SkinnedMesh, VertexColors}\n\ninterface MaterialsByString {\n\t[propName: string]: Material;\n}\n\n// export enum AttribClass {\n// \tVERTEX = \"vertex\",\n// \tOBJECT = \"object\"\n// }\n// materials['MeshStandard'] = new MeshStandardMaterial({\n// \tcolor: 0xffffff,\n// \t//vertexColors: VertexColors\n// \tside: FrontSide, // DoubleSide\n// \tmetalness: 0.5,\n// \troughness: 0.9\n// })\n// materials[Mesh.name] = new MeshLambertMaterial({ // MeshStandardMaterial\n// \tcolor: new Color(0.5,0.5,1),\n// \tside: FrontSide,\n// \tvertexColors: NoColors,\n// \ttransparent: true,\n// \tdepthTest: true\n// })\n// materials[Points.name] = new PointsMaterial({\n// \tcolor: 0xffffff,\n// \tsize: 0.1,\n// \t//blending: AdditiveBlending\n// \tdepthTest: true\n// })\n// materials[LineSegments.name] = new LineBasicMaterial({\n// \tcolor: 0xffffff,\n// \tlinewidth: 1\n// })\nexport enum ObjectType {\n\tMESH = 'MESH',\n\tPOINTS = 'POINTS',\n\tLINE_SEGMENTS = 'LINE_SEGMENTS',\n}\nexport const ObjectTypes = [ObjectType.MESH, ObjectType.POINTS, ObjectType.LINE_SEGMENTS];\nexport const ObjectTypeMenuEntries = [\n\t{name: 'Mesh', value: ObjectTypes.indexOf(ObjectType.MESH)},\n\t{name: 'Points', value: ObjectTypes.indexOf(ObjectType.POINTS)},\n\t{name: 'LineSegments', value: ObjectTypes.indexOf(ObjectType.LINE_SEGMENTS)},\n];\n\nexport function ObjectTypeByObject(object: Object3D): ObjectType | undefined {\n\tif (object instanceof Mesh) {\n\t\treturn ObjectType.MESH;\n\t}\n\tif (object instanceof LineSegments) {\n\t\treturn ObjectType.LINE_SEGMENTS;\n\t}\n\tif (object instanceof Points) {\n\t\treturn ObjectType.POINTS;\n\t}\n\tconsole.warn('ObjectTypeByObject received an unknown object type', object);\n}\n\nconst materials: MaterialsByString = {\n\tMeshStandard: new MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\t//vertexColors: VertexColors\n\t\tside: FrontSide, // DoubleSide\n\t\tmetalness: 0.5,\n\t\troughness: 0.9,\n\t}),\n\t[ObjectType.MESH]: new MeshLambertMaterial({\n\t\t// MeshStandardMaterial\n\t\tcolor: new Color(0.5, 0.5, 1),\n\t\tside: FrontSide,\n\t\tvertexColors: false,\n\t\ttransparent: true,\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.POINTS]: new PointsMaterial({\n\t\tcolor: 0xffffff,\n\t\tsize: 0.1,\n\t\t//blending: AdditiveBlending\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.LINE_SEGMENTS]: new LineBasicMaterial({\n\t\tcolor: 0xffffff,\n\t\tlinewidth: 1,\n\t}),\n};\n\n// TODO: typescript: check that this works after using uglifier\n\nexport enum AttribClass {\n\tVERTEX = 0,\n\tOBJECT = 1,\n}\n\nexport const AttribClassMenuEntries = [\n\t{name: 'vertex', value: AttribClass.VERTEX},\n\t{name: 'object', value: AttribClass.OBJECT},\n];\n\nexport enum AttribType {\n\tNUMERIC = 0,\n\tSTRING = 1,\n}\nexport const AttribTypeMenuEntries = [\n\t{name: 'numeric', value: AttribType.NUMERIC},\n\t{name: 'string', value: AttribType.STRING},\n];\n\nexport const CoreConstant = {\n\tATTRIB_CLASS: {\n\t\tVERTEX: AttribClass.VERTEX,\n\t\tOBJECT: AttribClass.OBJECT,\n\t},\n\n\tATTRIB_TYPE: {\n\t\tNUMERIC: 0,\n\t\tSTRING: 1,\n\t},\n\n\tOBJECT_TYPE: {\n\t\t// TODO: typescript\n\t\tMESH: ObjectType.MESH,\n\t\tPOINTS: ObjectType.POINTS,\n\t\tLINE_SEGMENTS: ObjectType.LINE_SEGMENTS,\n\t},\n\tOBJECT_TYPES: ObjectTypes,\n\tCONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {\n\t\t[Scene.name]: 'Scene',\n\t\t[Group.name]: 'Group',\n\t\t[Object3D.name]: 'Object3D',\n\t\t[Mesh.name]: 'Mesh',\n\t\t[Points.name]: 'Points',\n\t\t[LineSegments.name]: 'LineSegments',\n\t\t[Bone.name]: 'Bone',\n\t\t[SkinnedMesh.name]: 'SkinnedMesh',\n\t},\n\tCONSTRUCTORS_BY_NAME: {\n\t\t[ObjectType.MESH]: Mesh,\n\t\t[ObjectType.POINTS]: Points,\n\t\t[ObjectType.LINE_SEGMENTS]: LineSegments,\n\t},\n\t// CONSTRUCTORS_BY_TYPE: {\n\t// \t['MESH']: Mesh,\n\t// \t['POINTS']: Points,\n\t// \t['LINE_SEGMENTS']: LineSegments,\n\t// },\n\t// OBJECT_TYPE_BY_CONSTRUCTOR_NAME: {\n\t// \t[Mesh.name]: 'MESH',\n\t// \t[Points.name]: 'POINTS',\n\t// \t[LineSegments.name]: 'LINE_SEGMENTS',\n\t// },\n\tMATERIALS: materials,\n};\n\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Scene.name] = 'Scene'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Group.name] = 'Group'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Object3D.name] = 'Object3D'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Mesh.name] = 'Mesh'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Points.name] = 'Points'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LineSegments'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Bone.name] = 'Bone'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[SkinnedMesh.name] = 'SkinnedMesh'\n\n// CoreConstant.CONSTRUCTORS_BY_NAME[Mesh.name] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_NAME[Points.name] = Points\n// CoreConstant.CONSTRUCTORS_BY_NAME[LineSegments.name] = LineSegments\n\n// CoreConstant.CONSTRUCTORS_BY_TYPE['MESH'] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_TYPE['POINTS'] = Points\n// CoreConstant.CONSTRUCTORS_BY_TYPE['LINE_SEGMENTS'] = LineSegments\n\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Mesh.name] = 'MESH'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Points.name] = 'POINTS'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LINE_SEGMENTS'\n","import lodash_range from 'lodash/range';\nimport lodash_compact from 'lodash/compact';\nimport {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GLDefinitionType, TypedGLDefinition} from './utils/GLDefinition';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport class BaseGlMathFunctionParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new BaseGlMathFunctionParamsConfig();\nexport abstract class BaseGlMathFunctionGlNode extends BaseAdaptiveGlNode<BaseGlMathFunctionParamsConfig> {\n\tparams_config = ParamsConfig;\n\tprotected gl_method_name() {\n\t\treturn '';\n\t}\n\tprotected gl_function_definitions(): TypedGLDefinition<GLDefinitionType>[] {\n\t\treturn [];\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst type: ConnectionPointType =\n\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\tif (this.io.connections.first_input_connection()) {\n\t\t\tlet count = Math.max(lodash_compact(this.io.connections.input_connections()).length + 1, 2);\n\t\t\treturn lodash_range(count).map((i) => type);\n\t\t} else {\n\t\t\treturn lodash_range(2).map((i) => type);\n\t\t}\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n\n//\n//\n// 1 argument\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg1GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type];\n\t}\n}\n\n//\n//\n// 2 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg2GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t}\n}\n\n//\n//\n// 3 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg3GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type];\n\t}\n}\n//\n//\n// 4 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg4GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type];\n\t}\n}\n//\n//\n// 5 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg5GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type, type];\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_trim from 'lodash/trim';\nimport lodash_compact from 'lodash/compact';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_padEnd from 'lodash/padEnd';\nimport lodash_capitalize from 'lodash/capitalize';\nimport lodash_snakeCase from 'lodash/snakeCase';\nimport lodash_upperFirst from 'lodash/upperFirst';\nimport lodash_camelCase from 'lodash/camelCase';\nimport lodash_isNumber from 'lodash/isNumber';\n\nconst ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']\n\n// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n// const LETTERS_UPPERCASE = LETTERS.toUpperCase()\n// const NUMBERS = '0123645789'\n// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS\n\nconst TAIL_DIGIT_MATCH_REGEXP = /\\d+$/;\n// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\\d$/\nconst INDICES_LIST_SEPARATOR = /,| /;\n\n// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number\nconst NUM_REGEXP = /^-?\\d+\\.?\\d*$/;\nenum BooleanString {\n\tTRUE = 'true',\n\tFALSE = 'false',\n}\n\nexport class CoreString {\n\t// static has_tail_digits(word: string): boolean {\n\t// \tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP)\n\t// \treturn (match != null)\n\t// }\n\tstatic is_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE || word == BooleanString.FALSE;\n\t}\n\tstatic to_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE;\n\t}\n\tstatic is_number(word: string): boolean {\n\t\treturn NUM_REGEXP.test(word);\n\t}\n\n\tstatic tail_digits(word: string): number {\n\t\tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP);\n\t\tif (match) {\n\t\t\treturn parseInt(match[0]);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic increment(word: string): string {\n\t\tlet match;\n\t\tif ((match = word.match(TAIL_DIGIT_MATCH_REGEXP))) {\n\t\t\tconst digits = parseInt(match[0]);\n\t\t\tconst prefix = word.substring(0, word.length - match[0].length);\n\t\t\treturn `${prefix}${digits + 1}`;\n\t\t} else {\n\t\t\treturn `${word}1`;\n\t\t}\n\t}\n\n\tstatic pluralize(word: string): string {\n\t\tconst last_char = word[word.length - 1];\n\t\tif (last_char !== 's') {\n\t\t\treturn `${word}s`;\n\t\t} else {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\tstatic camel_case(word: string): string {\n\t\treturn lodash_camelCase(word);\n\t}\n\tstatic upper_first(word: string): string {\n\t\treturn lodash_upperFirst(word);\n\t}\n\tstatic snake_case(word: string): string {\n\t\treturn lodash_snakeCase(word);\n\t}\n\tstatic titleize(word: string): string {\n\t\treturn lodash_capitalize(word.replace(/_/g, ' '));\n\t}\n\n\tstatic type_to_class_name(word: string): string {\n\t\treturn this.upper_first(lodash_camelCase(word));\n\t}\n\t// static class_name_to_type(word): string {\n\t// \t// if(this.has_tail_digits(word)){\n\t// \t// \tconst tail_digits = `${this.tail_digits(word)}`\n\t// \t// \tconst head = word.substr(0, word.length-tail_digits.length)\n\t// \t// \tconst head_snake_case = this.snake_case(head)\n\t// \t// \tconsole.log(word, tail_digits, head, head_snake_case)\n\t// \t// \treturn `${head_snake_case}${tail_digits}`;\n\t// \t// } else {\n\t// \t// \treturn this.snake_case(word)\n\t// \t// }\n\t// \tconst snake_case = this.snake_case(word)\n\t// \tconst match = snake_case.match(DIGIT_PREDEDED_BY_UNDERSCOPE)\n\t// \tconsole.log(\"-----\", snake_case, match)\n\t// \treturn snake_case\n\t// }\n\t// static class_name_to_human(word): string {\n\t// \tconst human_name = this.class_name_to_type(word).replace(/\\s/, ' ');\n\t// \treturn human_name.replace(/_/g, \" \");\n\t// }\n\n\tstatic timestamp_to_seconds(word: string): number {\n\t\treturn Date.parse(word) / 1000;\n\t}\n\tstatic seconds_to_timestamp(seconds: number): string {\n\t\tconst d = new Date();\n\t\td.setTime(seconds * 1000);\n\t\treturn d.toISOString().substr(11, 8);\n\t}\n\n\tstatic precision(val: number, decimals: number = 2): string {\n\t\t// if (decimals == null) { decimals = 2; }\n\t\t// const factor = Math.pow(10, decimals);\n\t\t// const num = Math.floor(factor * val) / factor;\n\t\t// let number_s = `${num}`;\n\n\t\t// let elements = number_s.split('.');\n\t\t// if (decimals <= 0){\n\t\t// \treturn elements[0];\n\t\t// }\n\n\t\t// if (elements.length === 1) {\n\t\t// \t// number_s = `${number_s}.00`;\n\t\t// \tconst string_to_pad = `${number_s}.`\n\t\t// \tconst pad = string_to_pad.length + decimals\n\t\t// \treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t// } else {\n\t\t// \tconst integer_element = elements[0];\n\t\t// \tlet fraction_element = elements[1];\n\t\t// \tif (fraction_element.length === 1) {\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}0`;\n\t\t// \t} else if (fraction_element.length > 2) {\n\t\t// \t\tfraction_element = fraction_element.slice(0, 2);\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}`;\n\t\t// \t}\n\t\t// }\n\n\t\t// elements = number_s.split('.');\n\t\t// console.log(\"decimals:\", decimals, elements[1].length, number_s)\n\t\t// if (elements[1].length < decimals){\n\t\t// \tconst string_to_pad = number_s\n\t\t// \tconst pad = string_to_pad.length + (decimals - elements[1].length)\n\t\t// \tnumber_s = lodash_padEnd(string_to_pad, pad, '0');\n\t\t// }\n\n\t\t// return number_s;\n\t\tdecimals = Math.max(decimals, 0);\n\t\tconst elements = `${val}`.split('.');\n\n\t\tif (decimals <= 0) {\n\t\t\treturn elements[0];\n\t\t}\n\n\t\tlet frac = elements[1];\n\t\tif (frac !== undefined) {\n\t\t\tif (frac.length > decimals) {\n\t\t\t\tfrac = frac.substring(0, decimals);\n\t\t\t}\n\n\t\t\tfrac = lodash_padEnd(frac, decimals, '0');\n\t\t\treturn `${elements[0]}.${frac}`;\n\t\t} else {\n\t\t\tconst string_to_pad = `${val}.`;\n\t\t\tconst pad = string_to_pad.length + decimals;\n\t\t\treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t}\n\t}\n\n\tstatic ensure_float(num: number): string {\n\t\t// const integer = Math.floor(num)\n\t\t// const delta = num - integer\n\t\t// if(delta)\n\t\tconst num_as_string = `${num}`;\n\t\tconst dot_pos = num_as_string.indexOf('.');\n\t\tif (dot_pos >= 0) {\n\t\t\treturn num_as_string;\n\t\t} else {\n\t\t\treturn `${num_as_string}.0`;\n\t\t}\n\t}\n\n\t// https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438\n\tstatic match_mask(word: string, rule: string) {\n\t\tif (rule === '*') {\n\t\t\treturn true;\n\t\t}\n\t\t// \".\"  => Find a single character, except newline or line terminator\n\t\t// \".*\" => Matches any string that contains zero or more characters\n\t\trule = rule.split('*').join('.*');\n\n\t\t// \"^\"  => Matches any string with the following at the beginning of it\n\t\t// \"$\"  => Matches any string with that in front at the end of it\n\t\trule = `^${rule}$`;\n\n\t\t// Create a regular expression object for matching string\n\t\tconst regex = new RegExp(rule);\n\n\t\t// Returns true if it finds a match, otherwise it returns false\n\t\treturn regex.test(word);\n\t}\n\tstatic matches_one_mask(word: string, masks: string[]): boolean {\n\t\tlet matches_one_mask = false;\n\t\tfor (let mask of masks) {\n\t\t\tif (CoreString.match_mask(word, mask)) {\n\t\t\t\tmatches_one_mask = true;\n\t\t\t}\n\t\t}\n\t\treturn matches_one_mask;\n\t}\n\n\tstatic attrib_names(word: string): string[] {\n\t\t// let elements = [word];\n\t\t// lodash_each(ATTRIB_NAMES_SEPARATORS, separator => elements = lodash_flatten(lodash_map(elements, element => element.split(separator))));\n\t\tconst elements = word.split(ATTRIB_NAMES_SEPARATOR);\n\t\tconst trimed_elements = lodash_compact(\n\t\t\telements.map((e) => {\n\t\t\t\treturn lodash_trim(e);\n\t\t\t})\n\t\t);\n\t\tconst uniq = lodash_uniq(trimed_elements);\n\n\t\t// const names: string[] = []\n\t\t// ATTRIB_NAMES_SEPARATORS.forEach(separator=>{\n\t\t// \tword.split(separator).forEach( element=>{\n\t\t// \t\tnames.push(element.trim())\n\t\t// \t} )\n\t\t// })\n\n\t\t// // elements = lodash_filter(elements, element => (element != null) && (element.length > 0));\n\t\t// return lodash_uniq(names)\n\n\t\t// return lodash_map(elements, attr_name => lodash_trim(attr_name));\n\t\treturn uniq;\n\t}\n\tstatic to_id(val: string): number {\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst elements = val.split('').reverse();\n\t\tlet id = 0;\n\t\tlet exp = 0;\n\t\telements.forEach((element, i) => {\n\t\t\tlet index = element.charCodeAt(0);\n\n\t\t\tif (index >= 0) {\n\t\t\t\texp = i % 10;\n\t\t\t\tid += index * 10 ** exp;\n\t\t\t\tid = id % Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\t\t});\n\t\treturn id;\n\t}\n\n\tstatic indices(indices_string: string): number[] {\n\t\tconst elements = indices_string.split(INDICES_LIST_SEPARATOR);\n\t\tif (elements.length > 1) {\n\t\t\treturn lodash_uniq(lodash_flatten(elements.map((element) => this.indices(element)))).sort((a, b) => a - b);\n\t\t} else {\n\t\t\tconst element = elements[0];\n\t\t\tif (element) {\n\t\t\t\tconst range_separator = '-';\n\t\t\t\tif (element.indexOf(range_separator) > 0) {\n\t\t\t\t\tconst range_elements = element.split(range_separator);\n\t\t\t\t\treturn lodash_range(parseInt(range_elements[0]), parseInt(range_elements[1]) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tconst parsed = parseInt(element);\n\t\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\t\treturn [parsed];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic escape_line_breaks(word: string): string {\n\t\treturn word.replace(/(\\r\\n|\\n|\\r)/gm, '\\\\n');\n\t}\n}\n","export enum ShaderName {\n\tVERTEX = 'vertex',\n\tFRAGMENT = 'fragment',\n\tLEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader',\n\tPARTICLES_0 = 'particles_0',\n\tPARTICLES_1 = 'particles_1',\n\tPARTICLES_2 = 'particles_2',\n\tPARTICLES_3 = 'particles_3',\n\tPARTICLES_4 = 'particles_4',\n\tPARTICLES_5 = 'particles_5',\n\tPARTICLES_6 = 'particles_6',\n\tPARTICLES_7 = 'particles_7',\n\tPARTICLES_8 = 'particles_8',\n\tPARTICLES_9 = 'particles_9',\n}\nexport const ParticleShaderNames: Array<ShaderName> = [\n\tShaderName.PARTICLES_0,\n\tShaderName.PARTICLES_1,\n\tShaderName.PARTICLES_2,\n\tShaderName.PARTICLES_3,\n\tShaderName.PARTICLES_4,\n\tShaderName.PARTICLES_5,\n\tShaderName.PARTICLES_6,\n\tShaderName.PARTICLES_7,\n\tShaderName.PARTICLES_8,\n\tShaderName.PARTICLES_9,\n];\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2'\nimport {Int32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\n\n// const THREE = {\n// \tBox3,\n// \tBufferGeometry,\n// \tFloat32BufferAttribute,\n// \tInt32BufferAttribute,\n// \tInterleavedBufferAttribute,\n// \tVector2,\n// \tVector3,\n// }\nimport lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_each from 'lodash/each';\nimport lodash_chunk from 'lodash/chunk';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CorePoint} from './Point';\nimport {CoreFace} from './Face';\nimport {CoreConstant, ObjectType} from './Constant';\nimport {CoreAttribute} from './Attribute';\nimport {MonkeyPatcher} from './MonkeyPatcher';\n\nimport {BufferGeometryUtils} from '../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\nimport {CoreAttributeData} from './AttributeData';\n\nexport class CoreGeometry {\n\t_bounding_box: Box3 | undefined;\n\tprivate _points: CorePoint[] | undefined;\n\n\t// @INDEX_MODE_POINTS = 'INDEX_MODE_POINTS'\n\t// @INDEX_MODE_FACES = 'INDEX_MODE_FACES'\n\t// @INDEX_MODE_LINES = 'INDEX_MODE_LINES'\n\n\tconstructor(private _geometry: BufferGeometry) {}\n\t//\n\n\tgeometry() {\n\t\treturn this._geometry;\n\t}\n\tuuid() {\n\t\treturn this._geometry.uuid;\n\t}\n\n\tbounding_box() {\n\t\treturn (this._bounding_box = this._bounding_box || this._create_bounding_box());\n\t}\n\t_create_bounding_box() {\n\t\tthis._geometry.computeBoundingBox();\n\t\tif (this._geometry.boundingBox) {\n\t\t\treturn this._geometry.boundingBox;\n\t\t}\n\t}\n\n\tmark_as_instance() {\n\t\tthis._geometry.userData['is_instance'] = true;\n\t}\n\tstatic marked_as_instance(geometry: BufferGeometry): boolean {\n\t\treturn geometry.userData['is_instance'] === true;\n\t}\n\tmarked_as_instance(): boolean {\n\t\treturn CoreGeometry.marked_as_instance(this._geometry);\n\t}\n\tposition_attrib_name() {\n\t\tlet name = 'position';\n\t\tif (this.marked_as_instance()) {\n\t\t\tname = 'instancePosition';\n\t\t}\n\t\treturn name;\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis._geometry.computeVertexNormals();\n\t}\n\n\tuser_data_attribs() {\n\t\tconst key = 'indexed_attrib_values';\n\t\treturn (this._geometry.userData[key] = this._geometry.userData[key] || {});\n\t}\n\tindexed_attribute_names() {\n\t\treturn Object.keys(this.user_data_attribs() || {});\n\t}\n\tuser_data_attrib(name: string) {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attribs()[name];\n\t}\n\tis_attrib_indexed(name: string): boolean {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attrib(name) != null;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tif (name === 'ptnum') {\n\t\t\treturn true;\n\t\t}\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.attributes[name] != null;\n\t}\n\tattrib_type(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_names(): string[] {\n\t\treturn Object.keys(this._geometry.attributes);\n\t}\n\tattrib_sizes() {\n\t\tconst h: Dictionary<number> = {};\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\th[attrib_name] = this._geometry.attributes[attrib_name].itemSize;\n\t\t}\n\t\treturn h;\n\t}\n\tattrib_size(name: string): number {\n\t\tlet attrib;\n\t\tname = CoreAttribute.remap_name(name);\n\t\tif ((attrib = this._geometry.attributes[name]) != null) {\n\t\t\treturn attrib.itemSize;\n\t\t} else {\n\t\t\tif (name === 'ptnum') {\n\t\t\t\t// to ensure attrib copy with ptnum as source works\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tset_indexed_attribute_values(name: string, values: string[]) {\n\t\tthis.user_data_attribs()[name] = values;\n\t}\n\n\tset_indexed_attribute(name: string, values: string[], indices: number[]) {\n\t\tthis.set_indexed_attribute_values(name, values);\n\t\tthis._geometry.setAttribute(name, new Int32BufferAttribute(indices, 1));\n\t}\n\n\tadd_numeric_attrib(name: string, size: number = 1, default_value: NumericAttribValue = 0) {\n\t\tconst values = [];\n\n\t\tlet attribute_added = false;\n\t\tif (lodash_isNumber(default_value)) {\n\t\t\t// adding number\n\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\tvalues.push(default_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute_added = true;\n\t\t} else {\n\t\t\tif (size > 1) {\n\t\t\t\tif (lodash_isArray(default_value)) {\n\t\t\t\t\t// adding array\n\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\t\t\tvalues.push(default_value[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tattribute_added = true;\n\t\t\t\t} else {\n\t\t\t\t\t// adding Vector2\n\t\t\t\t\tconst vec2 = default_value as Vector2Like;\n\t\t\t\t\tif (size == 2 && vec2.x != null && vec2.y != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec2.x);\n\t\t\t\t\t\t\tvalues.push(vec2.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector3\n\t\t\t\t\tconst vec3 = default_value as Vector3Like;\n\t\t\t\t\tif (size == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec3.x);\n\t\t\t\t\t\t\tvalues.push(vec3.y);\n\t\t\t\t\t\t\tvalues.push(vec3.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Color\n\t\t\t\t\tconst col = default_value as ColorLike;\n\t\t\t\t\tif (size == 3 && col.r != null && col.g != null && col.b != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(col.r);\n\t\t\t\t\t\t\tvalues.push(col.g);\n\t\t\t\t\t\t\tvalues.push(col.b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector4\n\t\t\t\t\tconst vec4 = default_value as Vector4Like;\n\t\t\t\t\tif (size == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec4.x);\n\t\t\t\t\t\t\tvalues.push(vec4.y);\n\t\t\t\t\t\t\tvalues.push(vec4.z);\n\t\t\t\t\t\t\tvalues.push(vec4.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (attribute_added) {\n\t\t\tthis._geometry.setAttribute(name, new Float32BufferAttribute(values, size));\n\t\t} else {\n\t\t\tthrow 'no other default value allowed for now in add_numeric_attrib';\n\t\t}\n\t}\n\n\tinit_position_attribute(points_count: number, default_value?: Vector3) {\n\t\tconst values = [];\n\t\tif (default_value == null) {\n\t\t\tdefault_value = new Vector3();\n\t\t}\n\n\t\tfor (let i = 0; i < points_count; i++) {\n\t\t\tvalues.push(default_value.x);\n\t\t\tvalues.push(default_value.y);\n\t\t\tvalues.push(default_value.z);\n\t\t}\n\n\t\treturn this._geometry.setAttribute('position', new Float32BufferAttribute(values, 3));\n\t}\n\n\tadd_attribute(name: string, attrib_data: CoreAttributeData) {\n\t\tswitch (attrib_data.type()) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\treturn console.log('TODO: to implement');\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\treturn this.add_numeric_attrib(name, attrib_data.size());\n\t\t}\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tif (this.is_attrib_indexed(old_name)) {\n\t\t\tthis.user_data_attribs()[new_name] = lodash_clone(this.user_data_attribs()[old_name]);\n\t\t\tdelete this.user_data_attribs()[old_name];\n\t\t}\n\n\t\tconst old_attrib = this._geometry.getAttribute(old_name);\n\t\tthis._geometry.setAttribute(new_name, new Float32BufferAttribute(old_attrib.array, old_attrib.itemSize));\n\t\treturn this._geometry.deleteAttribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\tdelete this.user_data_attribs()[name];\n\t\t}\n\n\t\treturn this._geometry.deleteAttribute(name);\n\t}\n\n\tclone(): BufferGeometry {\n\t\treturn CoreGeometry.clone(this._geometry);\n\t}\n\n\tstatic clone(src_geometry: BufferGeometry): BufferGeometry {\n\t\tlet src_userData;\n\n\t\t// monkey path\n\t\tfor (let attribute_name of Object.keys(src_geometry.attributes)) {\n\t\t\tconst attribute = src_geometry.getAttribute(attribute_name);\n\t\t\tif (attribute.constructor.name == InterleavedBufferAttribute.name) {\n\t\t\t\tMonkeyPatcher.patch(attribute as InterleavedBufferAttribute);\n\t\t\t}\n\t\t}\n\n\t\tconst new_geometry = src_geometry.clone();\n\t\tif ((src_userData = src_geometry.userData) != null) {\n\t\t\tnew_geometry.userData = lodash_cloneDeep(src_userData);\n\t\t}\n\t\treturn new_geometry;\n\t}\n\n\tpoints_count(): number {\n\t\treturn CoreGeometry.points_count(this._geometry);\n\t}\n\n\tstatic points_count(geometry: BufferGeometry): number {\n\t\tlet position;\n\t\tlet count = 0;\n\t\tconst core_geometry = new this(geometry);\n\t\tlet position_attrib_name = 'position';\n\t\tif (core_geometry.marked_as_instance()) {\n\t\t\tposition_attrib_name = 'instancePosition';\n\t\t}\n\n\t\tif ((position = geometry.getAttribute(position_attrib_name)) != null) {\n\t\t\tlet array;\n\t\t\tif ((array = position.array) != null) {\n\t\t\t\tcount = array.length / 3;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t// TODO: use lodash_chunk\n\t// like: lodash_chunk(template_geometry.getAttribute('position').array, 3)\n\tpoints(): CorePoint[] {\n\t\treturn (this._points = this._points || this.points_from_geometry());\n\t}\n\treset_points() {\n\t\tthis._points = undefined;\n\t}\n\tpoints_from_geometry(): CorePoint[] {\n\t\tconst points = [];\n\t\tconst position_attrib = this._geometry.getAttribute(this.position_attrib_name());\n\n\t\tif (position_attrib != null) {\n\t\t\tconst points_count = position_attrib.array.length / 3;\n\t\t\tfor (let point_index = 0; point_index < points_count; point_index++) {\n\t\t\t\tconst point = new CorePoint(this, point_index);\n\n\t\t\t\t// lodash_each lodash_keys(@_geometry.attributes), (attrib_name) =>\n\n\t\t\t\t// \tattribute = @_geometry.getAttribute(attrib_name)\n\t\t\t\t// \titem_size = attribute.itemSize\n\t\t\t\t// \tcurrent_index = point_index  *item_size\n\n\t\t\t\t// \tattrib_value = switch item_size\n\t\t\t\t// \t\twhen 1\n\t\t\t\t// \t\t\tattribute.array[current_index]\n\t\t\t\t// \t\twhen 2\n\t\t\t\t// \t\t\tnew Vector2(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\t)\n\t\t\t\t// \t\twhen 3\n\t\t\t\t// \t\t\tnew Vector3(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 2]\n\t\t\t\t// \t\t\t\t)\n\n\t\t\t\t// \tpoint.add_attribute(attrib_name, item_size, attrib_value)\n\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\tstatic geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst geometry_wrapper = new this(geometry);\n\n\t\tconst first_point = points[0];\n\t\tif (first_point != null) {\n\t\t\tconst old_geometry = first_point.geometry();\n\t\t\tconst old_geometry_wrapper = first_point.geometry_wrapper();\n\n\t\t\t// index\n\t\t\tconst new_index_by_old_index: Dictionary<number> = {};\n\t\t\tlodash_each(points, (point, i) => (new_index_by_old_index[point.index] = i));\n\n\t\t\tconst indices = this._indices_from_points(new_index_by_old_index, old_geometry, object_type);\n\t\t\tif (indices != null && indices.length !== 0) {\n\t\t\t\tgeometry.setIndex(indices);\n\t\t\t}\n\n\t\t\t// attributes\n\t\t\tconst {attributes} = old_geometry;\n\t\t\t// const new_attributes = {}\n\t\t\tfor (let attribute_name of Object.keys(attributes)) {\n\t\t\t\tconst attrib_values = old_geometry_wrapper.user_data_attribs()[attribute_name];\n\t\t\t\tconst is_attrib_indexed = attrib_values != null;\n\n\t\t\t\tif (is_attrib_indexed) {\n\t\t\t\t\tconst new_values = lodash_uniq(points.map((point) => point.attrib_value(attribute_name)));\n\t\t\t\t\tconst new_index_by_value: Dictionary<number> = {};\n\t\t\t\t\tlodash_each(new_values, (new_value, i) => (new_index_by_value[new_value] = i));\n\n\t\t\t\t\tgeometry_wrapper.user_data_attribs()[attribute_name] = new_values;\n\n\t\t\t\t\t// const old_attrib = old_geometry.getAttribute(attribute_name)\n\t\t\t\t\t// const old_attrib_array = old_attrib.array\n\t\t\t\t\tconst new_attrib_indices = [];\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t// const old_index = old_attrib_array[point.index()]\n\t\t\t\t\t\tconst new_index = new_index_by_value[point.attrib_value(attribute_name)];\n\t\t\t\t\t\tnew_attrib_indices.push(new_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(new_attrib_indices, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tconst attrib_size = attributes[attribute_name].itemSize;\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\tconst value = point.attrib_value(attribute_name);\n\t\t\t\t\t\tswitch (attrib_size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tvalues.push(value.x);\n\t\t\t\t\t\t\t\tvalues.push(value.y);\n\t\t\t\t\t\t\t\tvalues.push(value.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(values, attrib_size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn geometry;\n\t}\n\n\tstatic _indices_from_points(\n\t\tnew_index_by_old_index: Dictionary<number>,\n\t\told_geometry: BufferGeometry,\n\t\tobject_type: ObjectType\n\t) {\n\t\tconst index_attrib = old_geometry.index;\n\t\tif (index_attrib != null) {\n\t\t\tconst old_indices = index_attrib.array;\n\n\t\t\tconst new_indices: number[] = [];\n\n\t\t\tswitch (object_type) {\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.POINTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tconst new_index = new_index_by_old_index[old_index];\n\t\t\t\t\t\tif (new_index != null) {\n\t\t\t\t\t\t\tnew_indices.push(new_index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.MESH:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst old_index2 = old_indices[i + 2];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tconst new_index2 = new_index_by_old_index[old_index2];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null && new_index2 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.LINE_SEGMENTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn new_indices;\n\t\t}\n\t}\n\n\tstatic merge_geometries(geometries: BufferGeometry[]) {\n\t\tif (geometries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// 1/3. set the new attrib indices for the indexed attributes\n\t\t//\n\t\tconst core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));\n\t\tconst indexed_attribute_names = core_geometries[0].indexed_attribute_names();\n\n\t\tconst new_values_by_attribute_name: Dictionary<string[]> = {};\n\t\tfor (let indexed_attribute_name of indexed_attribute_names) {\n\t\t\tconst index_by_values: Dictionary<number> = {};\n\t\t\tconst all_geometries_points = [];\n\t\t\tfor (let core_geometry of core_geometries) {\n\t\t\t\tconst geometry_points = core_geometry.points();\n\t\t\t\tfor (let point of geometry_points) {\n\t\t\t\t\tall_geometries_points.push(point);\n\t\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\t\t//value_index = point.attrib_value_index(indexed_attribute_name)\n\t\t\t\t\t// TODO: typescript: that doesn't seem right\n\t\t\t\t\tindex_by_values[value] != null\n\t\t\t\t\t\t? index_by_values[value]\n\t\t\t\t\t\t: (index_by_values[value] = Object.keys(index_by_values).length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst values = Object.keys(index_by_values);\n\t\t\tfor (let point of all_geometries_points) {\n\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\tconst new_index = index_by_values[value];\n\t\t\t\tpoint.set_attrib_index(indexed_attribute_name, new_index);\n\t\t\t}\n\n\t\t\tnew_values_by_attribute_name[indexed_attribute_name] = values;\n\t\t}\n\n\t\t//\n\t\t// 2/3. merge the geos\n\t\t//\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\n\t\t//\n\t\t// 3/3. add the index attrib values\n\t\t//\n\n\t\tconst merged_geometry_wrapper = new this(merged_geometry);\n\t\tObject.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n\t\t\tconst values = new_values_by_attribute_name[indexed_attribute_name];\n\t\t\tmerged_geometry_wrapper.set_indexed_attribute_values(indexed_attribute_name, values);\n\t\t});\n\n\t\tif (merged_geometry) {\n\t\t\tdelete merged_geometry.userData.mergedUserData;\n\t\t}\n\n\t\treturn merged_geometry;\n\t}\n\n\tsegments() {\n\t\t// const points = this.points();\n\t\tconst index = this.geometry().index?.array || [];\n\t\treturn lodash_chunk(index, 2);\n\t}\n\n\tfaces(): CoreFace[] {\n\t\treturn this.faces_from_geometry();\n\t}\n\tfaces_from_geometry(): CoreFace[] {\n\t\tconst index_array = this.geometry().index?.array || [];\n\t\tconst faces_count = index_array.length / 3;\n\t\treturn lodash_range(faces_count).map((i) => new CoreFace(this, i));\n\t}\n}\n\n// segments_count = 0.5*index.length\n// segments = []\n// lodash_times segments_count, (i)->\n// \tindices = [i, i+1]\n// \tsegments.push(indices) #lodash_map(indices, (index)->points[index])\n\n// segments\n","import {CoreGraph, CoreGraphNodeId} from './CoreGraph';\nimport {DirtyController, PostDirtyHook} from './DirtyController';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class CoreGraphNode {\n\t// protected _scene: PolyScene;\n\tprivate _graph: CoreGraph;\n\tprivate _graph_node_id: CoreGraphNodeId;\n\tprivate _dirty_controller: DirtyController = new DirtyController(this);\n\t// protected _name: string;\n\tconstructor(protected _scene: PolyScene, protected _name: string) {\n\t\t// super(...args);\n\t\tthis._graph_node_id = _scene.graph.next_id();\n\t\t_scene.graph.setNode(this);\n\t\tthis._graph = _scene.graph;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset_name(name: string) {\n\t\tthis._name = name;\n\t}\n\t// set_scene(scene: PolyScene) {\n\t// \tthis._scene = scene;\n\t// \t// this._graph_node = new CoreGraphNode();\n\t// \t// this._graph_node.init(this._scene.graph);\n\t// \tthis._graph = scene.graph;\n\t// \tthis._graph_node_id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// init(graph: CoreGraph) {\n\t// \tthis._graph = graph;\n\t// \tthis._id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// full_path: ->\n\t// \t\"node with unknown path #{this.graph_node_id}\"\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\tget graph_node_id(): CoreGraphNodeId {\n\t\treturn this._graph_node_id;\n\t}\n\n\t//\n\t//\n\t// DIRTY CONTROLLER\n\t//\n\t//\n\tget dirty_controller() {\n\t\treturn this._dirty_controller;\n\t}\n\tset_dirty(trigger?: CoreGraphNode | null) {\n\t\ttrigger = trigger || this;\n\t\tthis._dirty_controller.set_dirty(trigger);\n\t}\n\tset_successors_dirty(trigger?: CoreGraphNode) {\n\t\tthis._dirty_controller.set_successors_dirty(trigger);\n\t}\n\tremove_dirty_state() {\n\t\tthis._dirty_controller.remove_dirty_state();\n\t}\n\tget is_dirty() {\n\t\treturn this._dirty_controller.is_dirty;\n\t}\n\tadd_post_dirty_hook(name: string, callback: PostDirtyHook) {\n\t\tthis._dirty_controller.add_post_dirty_hook(name, callback);\n\t}\n\n\t//\n\t//\n\t// GRAPH\n\t//\n\t//\n\n\t// private graph_add() {\n\t// }\n\tgraph_remove() {\n\t\tthis.graph.removeNode(this);\n\t}\n\n\t// _graph_connect: (src, dest)->\n\t// \tthis.graph().connect(src, dest)\n\tadd_graph_input(src: CoreGraphNode): boolean {\n\t\treturn this.graph.connect(src, this);\n\t}\n\tremove_graph_input(src: CoreGraphNode) {\n\t\tthis.graph.disconnect(src, this);\n\t}\n\n\t// graph_disconnect: (src, dest)->\n\t// \tthis.graph().disconnect(src, dest)\n\n\tgraph_disconnect_predecessors() {\n\t\tthis.graph.disconnect_predecessors(this);\n\t}\n\tgraph_disconnect_successors() {\n\t\tthis.graph.disconnect_successors(this);\n\t}\n\n\tgraph_predecessor_ids(): CoreGraphNodeId[] {\n\t\treturn this.graph.predecessor_ids(this._graph_node_id) || [];\n\t}\n\tgraph_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.predecessors(this);\n\t}\n\tgraph_successors(): CoreGraphNode[] {\n\t\treturn this.graph.successors(this);\n\t}\n\tgraph_all_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.all_predecessors(this);\n\t}\n\tgraph_all_successors(): CoreGraphNode[] {\n\t\treturn this.graph.all_successors(this);\n\t}\n}\n","// events\nexport enum NodeEvent {\n\tCREATED = 'node_created',\n\tDELETED = 'node_deleted',\n\tNAME_UPDATED = 'node_name_update',\n\tOVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update',\n\tNAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated',\n\tNAMED_INPUTS_UPDATED = 'node_named_inputs_updated',\n\tINPUTS_UPDATED = 'node_inputs_updated',\n\tPARAMS_UPDATED = 'node_params_updated',\n\tUI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated',\n\tUI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated',\n\tERROR_UPDATED = 'node_error_updated',\n\tFLAG_BYPASS_UPDATED = 'bypass_flag_updated',\n\tFLAG_DISPLAY_UPDATED = 'display_flag_updated',\n\tSELECTION_UPDATED = 'selection_updated',\n}\n","import {CoreWalker} from '../../../core/Walker';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\n// import {NodeSimple} from '../../../core/graph/NodeSimple'\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {BaseContainer} from '../../containers/_Base';\n\n// type NodeOrParam = BaseNode | BaseParam;\n\nexport abstract class BaseMethod {\n\tpublic node: BaseNodeType;\n\n\tconstructor(public readonly param: BaseParamType) {\n\t\t// this._init_update_dependencies_mode();\n\t\tthis.node = this.param.node;\n\t}\n\n\tstatic required_arguments(): any[] {\n\t\tconsole.warn('Expression.Method._Base.required_arguments virtual method call. Please override');\n\t\treturn [];\n\t}\n\tstatic optional_arguments(): any[] {\n\t\treturn [];\n\t}\n\tstatic min_allowed_arguments_count() {\n\t\treturn this.required_arguments().length;\n\t}\n\tstatic max_allowed_arguments_count() {\n\t\treturn this.min_allowed_arguments_count() + this.optional_arguments().length;\n\t}\n\tstatic allowed_arguments_count(count: number) {\n\t\treturn count >= this.min_allowed_arguments_count() && count <= this.max_allowed_arguments_count();\n\t}\n\n\tprocess_arguments(args: any): Promise<any> {\n\t\tthrow 'Expression.Method._Base.process_arguments virtual method call. Please override';\n\t}\n\n\tasync get_referenced_node_container(index_or_path: number | string): Promise<BaseContainer> {\n\t\tconst referenced_node = this.get_referenced_node(index_or_path);\n\n\t\tif (referenced_node) {\n\t\t\tconst container = await referenced_node.request_container();\n\t\t\tif (container) {\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\treturn container;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow `referenced node invalid: ${referenced_node.full_path()}`;\n\t\t} else {\n\t\t\tthrow `invalid input (${index_or_path})`;\n\t\t}\n\t}\n\n\tget_referenced_param(path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tconst referenced_param = CoreWalker.find_param(this.node, path, decomposed_path);\n\n\t\t// if (referenced_param != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\n\t\t// \t\t//param_connect_result = this.param().add_graph_input(referenced_param)\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_param);\n\t\t// \t\t//if !(param_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no param found for argument ${path}`;\n\t\t// }\n\n\t\treturn referenced_param || null;\n\t}\n\n\tfind_referenced_graph_node(index_or_path: number | string, decomposed_path?: DecomposedPath): CoreGraphNode | null {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\t\t// let node\n\t\tif (is_index) {\n\t\t\tconst index = index_or_path as number;\n\t\t\tconst input_graph_node = this.node.io.inputs.input_graph_node(index);\n\t\t\treturn input_graph_node;\n\t\t} else {\n\t\t\tconst path = index_or_path as string;\n\t\t\treturn this.get_referenced_node(path, decomposed_path);\n\t\t}\n\t}\n\tget_referenced_node(index_or_path: string | number, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\t// if ((index_or_path != null) && (index_or_path.is_a != null) && index_or_path.is_a(BaseNode)) {\n\t\t// \tindex_or_path = index_or_path.full_path();\n\t\t// }\n\t\tif (lodash_isString(index_or_path)) {\n\t\t\tconst path = index_or_path;\n\t\t\treturn CoreWalker.find_node(this.node, path, decomposed_path);\n\t\t} else {\n\t\t\tconst index = index_or_path;\n\t\t\tthis.node.io.inputs.input(index);\n\t\t\treturn this.node.io.inputs.input(index);\n\t\t}\n\n\t\t// if (referenced_node != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\t\t// \t\t//node_connect_result = this.param().add_graph_input(referenced_node)\n\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_node);\n\t\t// \t\t//if !(node_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no node found for argument ${index_or_path}`;\n\t\t// }\n\n\t\t// return referenced_node;\n\t}\n\n\tfind_dependency(args: any): MethodDependency | null {\n\t\treturn null;\n\t}\n\n\tprotected create_dependency_from_index_or_path(index_or_path: number | string): MethodDependency | null {\n\t\t// console.log(\"is_index\", index_or_path)\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst node = this.find_referenced_graph_node(index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\treturn this.create_dependency(node, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('node not found for path', index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\tprotected create_dependency(\n\t\tnode: CoreGraphNode,\n\t\tindex_or_path: number | string,\n\t\tdecomposed_path?: DecomposedPath\n\t): MethodDependency | null {\n\t\t// if (CoreObject.is_a(node, TypedNode) || CoreObject.is_a(node, TypedParam)) {\n\t\t// \tconst node_or_param = node as BaseNodeType;\n\t\t// \treturn MethodDependency.create(this.param, index_or_path, node_or_param, decomposed_path?.named_nodes);\n\t\t// }\n\t\tconst dependency = MethodDependency.create(this.param, index_or_path, node, decomposed_path);\n\t\treturn dependency;\n\t}\n\n\t//\n\t//\n\t// UPDATE DEPENDENCIES\n\t//\n\t//\n\t// _init_update_dependencies_mode() {\n\t// \treturn this.set_update_dependencies_mode(false);\n\t// }\n\t// set_update_dependencies_mode(mode){\n\t// \treturn this._update_dependencies_mode = mode;\n\t// }\n\t// update_dependencies_mode() {\n\t// \treturn this._update_dependencies_mode;\n\t// }\n\t// update_dependencies() {}\n}\n//\n","import {BaseNodeClass} from './nodes/_Base';\nimport {PolyScene} from './scene/PolyScene';\nimport {RenderersController} from './poly/RenderersController';\nimport {NodesRegister, RegisterOptions, BaseNodeConstructor} from './poly/NodesRegister';\nimport {NodeContext} from './poly/NodeContext';\n// import {ViewerLoadersManager} from '/viewers/LoadersManager';\n\nexport class Poly {\n\tstatic _instance: Poly | undefined;\n\trenderers_controller: RenderersController = new RenderersController();\n\tnodes_register: NodesRegister = new NodesRegister();\n\n\tscenes_by_uuid: Dictionary<PolyScene> = {};\n\t_env: string | undefined;\n\t// public viewer_loaders_manager: ViewerLoadersManager = new ViewerLoadersManager();\n\n\tstatic instance() {\n\t\treturn (this._instance = this._instance || new Poly());\n\t}\n\tprivate constructor() {}\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tthis.nodes_register.register_node(node, tab_menu_category, options);\n\t}\n\tregistered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass> {\n\t\treturn this.nodes_register.registered_nodes(parent_context, type);\n\t}\n\tin_worker_thread() {\n\t\treturn false;\n\t}\n\tdesktop_controller(): any {}\n\t// notify_scene_loaded(scene: PolyScene) {}\n\n\tplayer_mode(): boolean {\n\t\treturn false;\n\t}\n\n\tlog(...args: any[]) {\n\t\tconsole.log(...args);\n\t}\n\tset_env(env: string) {\n\t\tthis._env = env;\n\t}\n\tget env() {\n\t\treturn this._env;\n\t}\n}\n\n// declare global {\n// \tconst POLY: Poly;\n// }\n\n// declare global {\n// \tinterface Window {\n// \t\tPOLY: Poly;\n// \t}\n// }\n// make sure not to have library: 'POLY' in webpack for this to work\nexport const POLY = Poly.instance();\n","import {TypedNode} from '../_Base';\n\nimport {Material} from 'three/src/materials/Material';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {MaterialContainer} from '../../containers/Material';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// type RenderHook = (object: Object3D) => void;\n\nexport abstract class TypedMatNode<M extends Material, K extends NodeParamsConfig> extends TypedNode<\n\t'MATERIAL',\n\tBaseMatNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<MaterialContainer> = new TypedContainerController<MaterialContainer>(\n\t\tthis,\n\t\tMaterialContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MAT;\n\t}\n\n\tprotected _material: M | undefined;\n\t// protected _update_methods: RenderHook[] = [];\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this._update_methods = [];\n\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_outputs({has_outputs: false});\n\n\t\t// this.container_controller.init(MaterialContainer);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_material_name.bind(this));\n\n\t\tthis.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\n\t\t// it's probably good not to have to create any material in the constructor\n\t\t// but only on request\n\t\t// this._material = this.create_material();\n\t\t// this.set_material(this._material);\n\t}\n\tnode_sibbling(name: string): BaseMatNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseMatNodeType | null;\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t}\n\n\tprivate set_material_name() {\n\t\t// ensures the material has a full path set\n\t\t// allowing the render hook to be set\n\t\t//this.set_material(@_material)\n\t\tif (this._material) {\n\t\t\tthis._material.name = this.full_path();\n\t\t}\n\t}\n\n\tabstract create_material(): M;\n\tget material() {\n\t\treturn (this._material = this._material || this.create_material());\n\t}\n\t//\n\n\tset_material(material: Material) {\n\t\tthis.set_container(material);\n\t}\n\n\t// add_update_method(method, arg?: any) {\n\t// \tthis._update_methods.push([method.bind(this), arg]);\n\t// }\n\n\t//run_update_methods: ->\n\n\tadd_render_hook(object: Object3D) {}\n}\n//delete object.onBeforeRender\n\nexport type BaseMatNodeType = TypedMatNode<Material, any>;\nexport class BaseMatNodeClass extends TypedMatNode<Material, any> {\n\tcreate_material() {\n\t\treturn new Material();\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nimport {TypedNode, BaseNodeType} from '../_Base';\n// import {BaseSopNode} from '../sop/_Base';\n// import {LookAt} from './Concerns/LookAt';\nimport {ObjectContainer} from '../../containers/Object';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {ObjectsManagerNode} from '../manager/ObjectsManager';\nimport {Group} from 'three/src/objects/Group';\n\nconst INPUT_OBJECT_NAME = 'parent object';\nconst DEFAULT_INPUT_NAMES = [INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME];\n\ninterface Object3DWithNode extends Object3D {\n\tnode: BaseNodeType;\n}\n// interface BaseObjNodeVisitor extends BaseNodeVisitor {\n// \tvisit_node_obj: (node: BaseObjNodeType) => any;\n// }\n\nexport enum ObjNodeRenderOrder {\n\tMANAGER = 0,\n\tFOG = 1,\n\tCAMERA = 2,\n\tLIGHT = 3,\n\tEVENT = 4,\n\tMAT = 5,\n}\n\nexport class TypedObjNode<O extends Object3D, K extends NodeParamsConfig> extends TypedNode<\n\t'OBJECT',\n\tBaseObjNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<ObjectContainer> = new TypedContainerController<ObjectContainer>(\n\t\tthis,\n\t\tObjectContainer\n\t);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = true;\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.OBJ;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// protected _main_group = new Group();\n\tprotected _children_group = new Group();\n\tprotected _object!: O;\n\t// _sop_loaded: boolean = false;\n\n\t// protected _look_at_controller: LookAtController | undefined;\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\t// protected _transform_controller: TransformController | undefined;\n\t// get transform_controller(): TransformController {\n\t// \treturn (this._transform_controller = this._transform_controller || new TransformController(this));\n\t// }\n\n\tprotected _attachable_to_hierarchy: boolean = true;\n\tget attachable_to_hierarchy() {\n\t\treturn this._attachable_to_hierarchy;\n\t}\n\tprotected _used_in_scene: boolean = true;\n\tget used_in_scene() {\n\t\treturn this._used_in_scene;\n\t}\n\t// TODO call set_used_in_scene(false) when node is deleted\n\tset_used_in_scene(state: boolean) {\n\t\tthis._used_in_scene = state;\n\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\tconst root = this.parent as ObjectsManagerNode;\n\t\t\tif (root) {\n\t\t\t\troot.update_object(this);\n\t\t\t}\n\t\t}\n\t}\n\tadd_object_to_parent(parent: Object3D) {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tparent.add(this.object);\n\t\t}\n\t}\n\tremove_object_from_parent() {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tconst parent = this.object.parent;\n\t\t\tif (parent) {\n\t\t\t\tparent.remove(this.object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _displayed_in_scene: boolean = true;\n\t// get displayed_in_scene() {\n\t// \treturn this._displayed_in_scene;\n\t// }\n\t// set_displayed_in_scene(state:boolean){\n\t// \tthis._displayed_in_scene = state;\n\t// }\n\n\tinitialize_base_node() {\n\t\t// this.container_controller.init(ObjectContainer);\n\t\tthis._object = this._create_object_with_attributes();\n\t\t// this._init_container_owner('Object');\n\t\t// this.flags.add_display();\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_object_name.bind(this));\n\t\tthis.set_object_name();\n\n\t\t// this.io.inputs.add_hook(() => {\n\t\t// \tthis.transform_controller.on_input_updated();\n\t\t// });\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\n\t\t// this._sop_loaded = false; // TODO: typescript, this should be moved to GeoObjNode\n\t}\n\tnode_sibbling(name: string): BaseObjNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseObjNodeType | null;\n\t}\n\n\t// this.add_param 'toggle', 'display', 1,\n\t// \tcallback: this.post_state_display_flag.bind(this)\n\n\t// cook: ->\n\t// \tsuper\n\t// \tconsole.error(this.constructor, 'cook method is not overloaded')\n\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t// \t#console.log(\"#{this.full_path()} set dirty by #{original_trigger_graph_node?.full_path()} and #{direct_trigger_graph_node?.full_path()}\")\n\t// \tthis.is_displayed (is_displayed)=>\n\t// \t\tif is_displayed\n\t// \t\t\tthis.parent().update_object(this)\n\n\t//post_remove_dirty_state: ->\n\t//console.log(\"obj #{this.full_path()} remove dirty\")\n\t//console.log(\"remove_dirty_state: #{this.full_path()}\")\n\n\t// set_object: (object)->\n\n\t// \tif object?\n\t// \t\tobject.name = this.name()\n\t// \t\tthis.set_container(object)\n\t// get main_group() {\n\t// \treturn this._main_group;\n\t// }\n\tget children_group() {\n\t\treturn this._children_group;\n\t}\n\tget object() {\n\t\treturn this._object; //= this._object || this._create_object_with_attributes()\n\t}\n\n\t_create_object_with_attributes(): O {\n\t\tconst object = this.create_object();\n\t\t// object.name = 'content';\n\t\t// if (object != null) {\n\t\t// \tobject.name = this.full_path();\n\t\t(object as Object3DWithNode).node = this;\n\t\t// }\n\t\t// this._main_group.add(this._children_group);\n\t\tobject.add(this._children_group);\n\t\treturn object as O;\n\t}\n\tprivate set_object_name() {\n\t\tif (this._object) {\n\t\t\tthis._object.name = this.full_path();\n\t\t\tthis._children_group.name = `${this.full_path()}:parented_outputs`;\n\t\t}\n\t}\n\t// private set_group_name() {\n\t// \t// ensures the material has a full path set\n\t// \t// allowing the render hook to be set\n\t// \t//this.set_material(@_material)\n\t// \tconst group = this.group;\n\t// \tif (group) {\n\t// \t\tgroup.name = this.full_path();\n\t// \t}\n\t// }\n\n\tcreate_object(): Object3D {\n\t\treturn new Object3D();\n\t}\n\n\t// request_display_node() {}\n\n\tis_display_node_cooking(): boolean {\n\t\treturn false;\n\t}\n\n\t// post_state_display_flag() {\n\t// \tconst object = this.object;\n\t// \tif (object != null) {\n\t// \t\tconst displayed = this.is_displayed();\n\t// \t\tif (displayed) {\n\t// \t\t\tobject.visible = displayed;\n\n\t// \t\t\tif (!this._sop_loaded) {\n\t// \t\t\t\tthis.request_display_node();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_displayed(): boolean {\n\t\treturn this.flags?.display?.active || false;\n\t\t// if (callback == null) {\n\t\t// \tthrow 'no callback given to is_displayed';\n\t\t// }\n\n\t\t// const display_flag_state = this.display_flag_state();\n\t\t// return callback(display_flag_state);\n\t}\n\t// if !display_flag_state\n\t// \tcallback(false)\n\n\t// else\n\t// \tthis.param('display').eval (val)->\n\t// \t\tcallback(val)\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node_obj']> {\n\t// \treturn visitor.visit_node_obj(this);\n\t// }\n\n\t// replaces Dirtyable (TODO: try and replace this method name)\n\t// protected _init_dirtyable_hook() {\n\t// this.add_post_dirty_hook(this._cook_main_without_inputs_later.bind(this));\n\t// }\n\t// private _cook_main_without_inputs_later() {\n\t// \tconst c = () => {\n\t// \t\tthis.cook_controller.cook_main_without_inputs();\n\t// \t};\n\t// \tsetTimeout(c, 0);\n\t// \t// this.eval_all_params().then( ()=>{ this.cook() } )\n\t// }\n}\n\nexport type BaseObjNodeType = TypedObjNode<Object3D, any>;\nexport class BaseObjNodeClass extends TypedObjNode<Object3D, any> {}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\n\n// import {BaseParam} from '../params/_Base';\n// import {GeometryContainer} from '../containers/Geometry';\n// import {UIData} from './UIData';\n\n// import {Bypass} from './concerns/Bypass';\n// import {ConnectionsOwner} from './concerns/ConnectionsOwner';\n// import {ContainerOwner} from './concerns/ContainerOwner';\n// import {Cook} from './concerns/Cook';\n// import {CustomNode} from './concerns/CustomNode';\n// import {Dependencies} from './concerns/old/Dependencies';\n// import {DisplayFlag} from './concerns/DisplayFlag';\n// import {Errored} from './concerns/Errored';\n// import {HierarchyChildrenOwner} from './concerns/HierarchyChildrenOwner';\n// import {HierarchyParentOwner} from './concerns/old/HierarchyParentOwner';\n// import {InputsClonable} from './concerns/InputsClonable';\n// import {InputsOwner} from './concerns/InputsOwner';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/old/LifeCycle';\n// import {Named} from './concerns/Named';\n// import {OutputsOwner} from './concerns/OutputsOwner';\n// import {ParamsOwner} from './concerns/ParamsOwner';\n// import {Selectable} from './concerns/old/Selectable';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {Visit} from './concerns/Visit';\n\nimport {UIData} from './utils/UIData';\nimport {FlagsController} from './utils/FlagsController';\nimport {StatesController} from './utils/StatesController';\nimport {HierarchyParentController} from './utils/hierarchy/ParentController';\nimport {HierarchyChildrenController} from './utils/hierarchy/ChildrenController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {TypedContainerController} from './utils/ContainerController';\nimport {CookController} from './utils/CookController';\nimport {DependenciesController} from './utils/DependenciesController';\nimport {NameController} from './utils/NameController';\nimport {NodeSerializer, NodeSerializerData} from './utils/Serializer';\nimport {ParamsController} from './utils/params/ParamsController';\nimport {ParamConstructorMap} from '../params/types/ParamConstructorMap';\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\n\nimport {NodeParamsConfig} from './utils/params/ParamsConfig';\nimport {ParamsValueAccessor, ParamsValueAccessorType} from './utils/params/ParamsValueAccessor';\nimport {ProcessingContext} from './utils/ProcessingContext';\nimport {IOController} from './utils/connections/IOController';\n\n// import {BaseContainer} from '../containers/_Base';\n\n// import {BaseParam} from '../params/_Base';\n// import {BooleanParam} from '../params/Boolean';\n// import {ButtonParam} from '../params/Button';\n// import {ColorParam} from '../params/Color';\n// import {FloatParam} from '../params/Float';\n// import {IntegerParam} from '../params/Integer';\n// import {OperatorPathParam} from '../params/OperatorPath';\n// import {RampParam} from '../params/Ramp';\n// import {SeparatorParam} from '../params/Separator';\n// import {StringParam} from '../params/String';\n// import {Vector2Param} from '../params/Vector2';\n// import {Vector3Param} from '../params/Vector3';\n// import {Vector4Param} from '../params/Vector4';\nimport {NodeEvent} from '../poly/NodeEvent';\nimport {NodeContext} from '../poly/NodeContext';\n\n// import {TypedContainer} from '../containers/_Base';\nimport {ParamsAccessorType, ParamsAccessor} from './utils/params/ParamsAccessor';\n\nexport interface NodeVisitor {\n\tvisit_node: (node: BaseNodeType) => any;\n\tvisit_node_obj: (node: BaseNodeType) => any;\n}\n\nexport interface NodeDeletedEmitData {\n\tparent_id: string;\n}\nexport interface NodeCreatedEmitData {\n\tchild_node_json: NodeSerializerData;\n}\ntype EmitDataByNodeEventMapGeneric = {[key in NodeEvent]: any};\nexport interface EmitDataByNodeEventMap extends EmitDataByNodeEventMapGeneric {\n\t[NodeEvent.CREATED]: NodeCreatedEmitData;\n\t[NodeEvent.DELETED]: NodeDeletedEmitData;\n\t[NodeEvent.ERROR_UPDATED]: undefined;\n}\n// emit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n// \temit(event_name: NodeEvent.DELETED, data: NodeDeletedEmitData): void;\n// \temit(event_name: NodeEvent.NAME_UPDATED): void;\n// \temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n// \temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n// \temit(event_name: NodeEvent.ERROR_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n// \temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\nimport {ContainerMap} from '../containers/utils/ContainerMap';\nimport {ContainableMap} from '../containers/utils/ContainableMap';\nimport {BaseContainer} from '../containers/_Base';\nimport {ParamOptions} from '../params/utils/OptionsController';\nimport {ParamType} from '../poly/ParamType';\nimport {DisplayNodeController} from './utils/DisplayNodeController';\n\n// type Container = ContainerMap[KT];\ntype KT = keyof ContainerMap;\nexport class TypedNode<T extends KT, NT extends BaseNodeType, K extends NodeParamsConfig> extends CoreGraphNode {\n\tcontainer_controller: TypedContainerController<ContainerMap[T]> = new TypedContainerController<ContainerMap[T]>(\n\t\tthis,\n\t\tBaseContainer\n\t);\n\n\tprivate _parent_controller: HierarchyParentController | undefined;\n\n\tprivate _ui_data: UIData | undefined;\n\n\tprivate _dependencies_controller: DependenciesController | undefined;\n\tprivate _states: StatesController | undefined;\n\tprivate _lifecycle: LifeCycleController | undefined;\n\tprivate _serializer: NodeSerializer | undefined;\n\tprivate _cook_controller: CookController | undefined;\n\tpublic readonly flags: FlagsController | undefined;\n\tprotected _display_node_controller: DisplayNodeController | undefined;\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\n\tprivate _params_controller: ParamsController | undefined;\n\treadonly params_config: K | undefined;\n\treadonly pv: ParamsValueAccessorType<K> = (<unknown>new ParamsValueAccessor<K>()) as ParamsValueAccessorType<K>;\n\t// readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n\treadonly p: ParamsAccessorType<K> = (<unknown>new ParamsAccessor<K>()) as ParamsAccessorType<K>;\n\t// readonly p: ParamsAccessor<K> = new ParamsAccessor<K>(this);\n\n\tprivate _processing_context: ProcessingContext | undefined;\n\tprivate _name_controller: NameController | undefined;\n\tprivate _io: IOController<NT> | undefined;\n\tget parent_controller(): HierarchyParentController {\n\t\treturn (this._parent_controller = this._parent_controller || new HierarchyParentController(this));\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate _children_controller: HierarchyChildrenController | undefined;\n\tprotected _children_controller_context: NodeContext | undefined;\n\tget children_controller_context() {\n\t\treturn this._children_controller_context;\n\t}\n\tprivate _create_children_controller(): HierarchyChildrenController | undefined {\n\t\tif (this._children_controller_context) {\n\t\t\treturn new HierarchyChildrenController(this, this._children_controller_context);\n\t\t}\n\t}\n\tget children_controller(): HierarchyChildrenController | undefined {\n\t\treturn (this._children_controller = this._children_controller || this._create_children_controller());\n\t}\n\tchildren_allowed(): boolean {\n\t\treturn this._children_controller_context != null;\n\t}\n\n\tget ui_data(): UIData {\n\t\treturn (this._ui_data = this._ui_data || new UIData(this));\n\t}\n\tget dependencies_controller(): DependenciesController {\n\t\treturn (this._dependencies_controller = this._dependencies_controller || new DependenciesController(this));\n\t}\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\tget lifecycle(): LifeCycleController {\n\t\treturn (this._lifecycle = this._lifecycle || new LifeCycleController(this));\n\t}\n\tget serializer(): NodeSerializer {\n\t\treturn (this._serializer = this._serializer || new NodeSerializer(this));\n\t}\n\t// get container_controller(): TypedContainerController<T> {\n\t// \treturn (this._container_controller = this._container_controller || new TypedContainerController<T>(this));\n\t// }\n\tget cook_controller(): CookController {\n\t\treturn (this._cook_controller = this._cook_controller || new CookController(this));\n\t}\n\tget io(): IOController<NT> {\n\t\treturn (this._io = this._io || new IOController<NT>((<unknown>this) as NT));\n\t}\n\tget name_controller(): NameController {\n\t\treturn (this._name_controller = this._name_controller || new NameController(this));\n\t}\n\tset_name(name: string) {\n\t\tthis.name_controller.set_name(name);\n\t}\n\t_set_core_name(name: string) {\n\t\tthis._name = name;\n\t}\n\tget params(): ParamsController {\n\t\treturn (this._params_controller = this._params_controller || new ParamsController(this));\n\t}\n\tget processing_context(): ProcessingContext {\n\t\treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n\t}\n\n\tconstructor(scene: PolyScene, name: string = 'BaseNode') {\n\t\tsuper(scene, name);\n\t}\n\n\tprivate _initialized: boolean = false;\n\tpublic initialize_base_and_node() {\n\t\tif (!this._initialized) {\n\t\t\tthis.initialize_base_node(); // for base classes of Sop, Obj...\n\t\t\tthis.initialize_node(); // for Derivated node clases, like BoxSop, TransformSop...\n\t\t\tthis._initialized = true;\n\t\t} else {\n\t\t\tconsole.warn('node already initialized');\n\t\t}\n\t}\n\tprotected initialize_base_node() {}\n\tprotected initialize_node() {}\n\t// constructor() {\n\t// \tsuper('base_node');\n\n\t// \t// this._init_node_scene()\n\t// \t// this._init_context_owner()\n\t// \t// this._init_dirtyable()\n\t// \t// this._init_graph_node()\n\n\t// \t// this._init_bypass_flag();\n\t// \t// this._init_display_flag();\n\t// \t//this._init_context()\n\t// \t// this._init_cook();\n\t// \t// this._init_error();\n\t// \t// this._init_inputs();\n\t// \t// this._init_outputs();\n\t// \t// this._init_hierarchy_parent_owner();\n\t// \t//this._init_time_dependent()\n\t// \t// this._init_ui_data();\n\t// }\n\tstatic type(): string {\n\t\tthrow 'type to be overriden';\n\t}\n\tget type() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.type();\n\t}\n\tstatic node_context(): NodeContext {\n\t\tthrow 'requires override';\n\t}\n\tnode_context(): NodeContext {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.node_context();\n\t}\n\n\tstatic required_three_imports(): string[] {\n\t\treturn [];\n\t}\n\tstatic required_imports() {\n\t\tlet three_imports = this.required_three_imports();\n\t\tif (three_imports) {\n\t\t\t// if (!lodash_isArray(three_imports)) {\n\t\t\t// \tthree_imports = [<unknown>three_imports as string];\n\t\t\t// }\n\t\t\treturn three_imports.map((e) => `three/examples/jsm/${e}`);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\trequired_imports() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.required_imports();\n\t}\n\tstatic require_webgl2(): boolean {\n\t\treturn false;\n\t}\n\trequire_webgl2(): boolean {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.require_webgl2();\n\t}\n\n\t// set_scene(scene: PolyScene) {\n\t// \tsuper.set_scene(scene);\n\t// \t// this.io.inputs._init_graph_node_inputs();\n\t// }\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node']> {\n\t// \treturn visitor.visit_node(this);\n\t// }\n\tset_parent(parent: BaseNodeType | null) {\n\t\tthis.parent_controller.set_parent(parent);\n\t}\n\tget parent() {\n\t\treturn this.parent_controller.parent;\n\t}\n\tget root() {\n\t\treturn this._scene.root;\n\t}\n\tfull_path(): string {\n\t\treturn this.parent_controller.full_path();\n\t}\n\n\t// params\n\tcreate_params() {}\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\toptions?: ParamOptions\n\t): ParamConstructorMap[T] | undefined {\n\t\treturn this._params_controller?.add_param(type, name, default_value, options);\n\t}\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tthis._params_controller?.within_param_folder(folder_name, callback);\n\t// }\n\n\t// cook\n\tcook(input_contents: any[]): any {\n\t\treturn null;\n\t}\n\n\t// container\n\tasync request_container() {\n\t\treturn await this.container_controller.request_container();\n\t}\n\tset_container(content: ContainableMap[T], message: string | null = null) {\n\t\t// if message?\n\t\t// TODO: typescript: why is this a type of never\n\t\tthis.container_controller.container.set_content(content as never); //, this.self.cook_eval_key());\n\t\tif (content != null) {\n\t\t\tif (!(content as any).name) {\n\t\t\t\t(content as any).name = this.full_path();\n\t\t\t}\n\t\t\tif (!(content as any).node) {\n\t\t\t\t(content as any).node = this;\n\t\t\t}\n\t\t}\n\t\t//if @_container.has_content()?\n\t\tthis.cook_controller.end_cook(message);\n\t}\n\n\t// hierarchy\n\tcreate_node(type: string) {\n\t\treturn this.children_controller?.create_node(type);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis.children_controller?.remove_node(node);\n\t}\n\tchildren() {\n\t\treturn this.children_controller?.children() || [];\n\t}\n\tnode(path: string) {\n\t\treturn this.parent_controller?.find_node(path) || null;\n\t}\n\tnode_sibbling(name: string): TypedNode<T, NT, any> | null {\n\t\tif (this.parent) {\n\t\t\tconst node = this.parent.children_controller?.child_by_name(name);\n\t\t\tif (node) {\n\t\t\t\treturn node as TypedNode<T, NT, any>;\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\tnodes_by_type(type: string) {\n\t\treturn this.children_controller?.nodes_by_type(type) || [];\n\t}\n\n\t// inputs\n\tset_input(input_index_or_name: number | string, node: NT | null, output_index_or_name: number | string = 0) {\n\t\tthis.io.inputs.set_input(input_index_or_name, node, output_index_or_name);\n\t}\n\n\t// emit\n\n\temit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n\temit(event_name: NodeEvent.DELETED, data: EmitDataByNodeEventMap[NodeEvent.DELETED]): void;\n\temit(event_name: NodeEvent.NAME_UPDATED): void;\n\temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n\temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n\temit(event_name: NodeEvent.ERROR_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n\temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\temit(event_name: NodeEvent, data: object | null = null): void {\n\t\t// super.emit(event_name, data);\n\t\tthis.scene.dispatch_controller.dispatch(this, event_name, data);\n\t}\n\n\t// serializer\n\tto_json(include_param_components: boolean = false) {\n\t\treturn this.serializer.to_json(include_param_components);\n\t}\n}\n\nexport type BaseNodeType = TypedNode<any, BaseNodeType, any>;\nexport class BaseNodeClass extends TypedNode<any, BaseNodeType, any> {}\n","import {Euler} from 'three/src/math/Euler';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\n\n// import {Object3D} from 'three/src/core/Object3D';\n// import {BaseTransformedObjNodeType} from '../_BaseTransformed';\nimport {CoreMath} from '../../../../core/math/_Module';\nimport {CoreTransform, SetParamsFromMatrixOptions} from '../../../../core/Transform';\n// import {BaseObjNodeType} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\nimport {TypedObjNode, BaseObjNodeType} from '../_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {FlagsControllerD} from '../../utils/FlagsController';\n// import {LookAtController} from './LookAtController';\nexport function TransformedParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttransform = ParamConfig.FOLDER();\n\t\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\t\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\t\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\t\tscale = ParamConfig.FLOAT(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('', {node_selection: {context: NodeContext.OBJ}});\n\t\t// up = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// pivot = ParamConfig.VECTOR3([0, 0, 0]);\n\t};\n}\nclass TransformedParamsConfig extends TransformedParamConfig(NodeParamsConfig) {}\nexport class TransformedObjNode extends TypedObjNode<Object3D, TransformedParamsConfig> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\t// get transform_controller(): TransformController {\n\t// \treturn this._transform_controller; // = this._transform_controller || new TransformController(this));\n\t// }\n}\n\nexport class TransformController {\n\tconstructor(private node: TransformedObjNode) {}\n\n\t// protected _look_at_controller = new LookAtController(this.node);\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\n\tinitialize_node() {\n\t\t// not sure we should change if it is used in the scene, as parented children may still be\n\t\t// this.node.flags.display.add_hook(() => {\n\t\t// \t// this.node.set_used_in_scene(this.node.flags.display.active || false);\n\t\t// \tthis.node.object.visible = this.node.flags.display.active;\n\t\t// });\n\t\t// this.node.set_used_in_scene(true);\n\n\t\tthis.node.io.inputs.set_count(0, 1);\n\t\tthis.node.io.inputs.set_depends_on_inputs(false);\n\t\tthis.node.io.outputs.set_has_one_output();\n\t\tthis.node.io.inputs.add_on_set_input_hook('on_input_updated', () => {\n\t\t\tthis.on_input_updated();\n\t\t});\n\n\t\tconst hook_name = '_cook_main_without_inputs_when_dirty';\n\t\tif (!this.node.dirty_controller.has_hook(hook_name)) {\n\t\t\tthis.node.dirty_controller.add_post_dirty_hook(hook_name, this._cook_main_without_inputs_when_dirty_bound);\n\t\t}\n\t}\n\t// TODO: this will have to be checked via the parent, when I will have obj managers at lower levels than root\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.node.used_in_scene) {\n\t\tawait this.node.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\n\tstatic on_input_updated(node: BaseObjNodeType) {\n\t\tif (node.io.inputs.input(0) != null) {\n\t\t\tnode.root.add_to_parent_transform(node);\n\t\t} else {\n\t\t\tnode.root.remove_from_parent_transform(node);\n\t\t}\n\t}\n\ton_input_updated() {\n\t\tTransformController.on_input_updated(this.node);\n\t}\n\n\tupdate(matrix?: Matrix4) {\n\t\t// const object = this.node.object;\n\t\t// const update_full_matrix = false; // if true the camera controls do not work anymore\n\t\t//matrix = Core.Transform.matrix_from_node_with_transform_params(this)\n\n\t\t// if (object) {\n\t\t// if update_full_matrix\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\n\t\t// if (this._look_at_controller.active == true) {\n\t\t// \treturn this._look_at_controller.compute(); //this._use_look_at_param();\n\t\t// } else {\n\t\tthis.update_transform_with_matrix(matrix);\n\t\t// }\n\t\t// if matrix?\n\t\t// \t# do not apply to cameras with control\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\t\t// \tthis.update_transform_from_params()\n\t\t// } else {\n\t\t// \tconsole.warn(`no object to update for ${this.node.full_path()}`);\n\t\t// \t// return false;\n\t\t// }\n\t}\n\n\tupdate_transform_with_matrix(matrix?: Matrix4) {\n\t\t//console.warn \"no object to update for #{this.full_path()}\"\n\t\tconst object = this.node.object;\n\t\t//matrix ?= Core.Transform.matrix_from_node_with_transform_params(this)\n\t\tif (matrix != null && !matrix.equals(object.matrix)) {\n\t\t\t// do not apply to cameras with control\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.matrix = matrix;\n\n\t\t\treturn object.dispatchEvent({type: 'change'});\n\t\t} else {\n\t\t\treturn this.update_transform_from_params();\n\t\t}\n\t}\n\n\tprivate _update_transform_from_params_scale = new Vector3();\n\tupdate_transform_from_params() {\n\t\tconst object = this.node.object;\n\t\tif (object) {\n\t\t\tconst position: Vector3 = this.node.pv.t;\n\t\t\t//quaternion = new Quaternion()\n\t\t\tconst rotation: Vector3 = this.node.pv.r;\n\n\t\t\tthis._update_transform_from_params_scale.copy(this.node.pv.s).multiplyScalar(this.node.pv.scale);\n\t\t\t// const scale: Vector3 = this.node.pv.s\n\t\t\t// \t.clone()\n\t\t\t// \t.multiplyScalar(this.node.pv.scale);\n\t\t\t//matrix.decompose( position, quaternion, scale )\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.position.copy(position);\n\t\t\t//object.quaternion.copy(quaternion)\n\t\t\tconst radians = [\n\t\t\t\tCoreMath.degrees_to_radians(rotation.x),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.y),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.z),\n\t\t\t];\n\t\t\tconst euler = new Euler(\n\t\t\t\tradians[0],\n\t\t\t\tradians[1],\n\t\t\t\tradians[2]\n\t\t\t\t//'XYZ'\n\t\t\t);\n\t\t\tobject.rotation.copy(euler);\n\t\t\tobject.scale.copy(this._update_transform_from_params_scale);\n\t\t\tobject.matrixAutoUpdate = true;\n\t\t\tobject.updateMatrix();\n\n\t\t\tobject.dispatchEvent({type: 'change'});\n\t\t}\n\t}\n\n\tset_params_from_matrix(matrix: Matrix4, options: SetParamsFromMatrixOptions = {}) {\n\t\tCoreTransform.set_params_from_matrix(matrix, this.node, options);\n\t}\n}\n","/// <reference path=\"../../custom_typings/math.d.ts\" />\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Euler} from 'three/src/math/Euler';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {MathUtils} from 'three/src/math/MathUtils';\n\nimport {BaseNodeType} from '../engine/nodes/_Base';\n\nconst ROTATION_ORDER = 'XYZ';\n\nexport interface SetParamsFromMatrixOptions {\n\tscale?: boolean;\n}\n\n// TODO: remove the \"new\" in this whole file\n// const euler = new Euler(0, 0, 0, ROTATION_ORDER)\n\nexport class CoreTransform {\n\t// static create_params(node: BaseNodeType) {\n\t// \tnode.add_param(ParamType.VECTOR3, 't', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 'r', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 's', [1, 1, 1]);\n\t// \tnode.add_param(ParamType.FLOAT, 'scale', 1, {range: [0, 10]});\n\t// \tnode.add_param(ParamType.OPERATOR_PATH, 'look_at', '');\n\t// \tnode.add_param(ParamType.VECTOR3, 'up', [0, 1, 0]);\n\t// }\n\n\t// static matrix_from_node_with_transform_params(node: BaseNodeType): Matrix4 {\n\t// \tconst t = node.params.vector3('t');\n\t// \tconst r = node.params\n\t// \t\t.vector3('r')\n\t// \t\t.clone()\n\t// \t\t.multiplyScalar(Math.PI / 180);\n\t// \tconst s = node.params.vector3('s');\n\t// \tconst scale = node.params.float('scale');\n\t// \treturn this.matrix(t, r, s, scale);\n\t// }\n\n\t// if this is done, make sure to use eval with a  callback\n\t// @matrix_from_params: (node) ->\n\t// \tt = node.param('t').eval()\n\t// \tr = node.param('r').eval().multiplyScalar( Math.PI / 180 )\n\t// \ts = node.param('s').eval()\n\t// \tscale = node.param('scale').eval()\n\t// \tthis.matrix(t, r, s, scale)\n\n\tstatic set_params_from_matrix(matrix: Matrix4, node: BaseNodeType, options: SetParamsFromMatrixOptions = {}) {\n\t\tlet update_scale = options['scale'];\n\t\tif (update_scale == null) {\n\t\t\tupdate_scale = true;\n\t\t}\n\n\t\t// EPSILON = 0.0000001\n\t\t// PRECISION = 1000\n\t\t// components = ['x', 'y', 'z']\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3();\n\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\tconst euler = new Euler().setFromQuaternion(quaternion);\n\t\tconst rotation = euler.toVector3();\n\t\trotation.divideScalar(Math.PI / 180);\n\n\t\t// limit precision of position and rotation\n\t\t// lodash_each [position, rotation], (vector)->\n\t\t// \tlodash_each ['x', 'y', 'z'], (c)->\n\t\t// \t\tval = vector[c]\n\t\t// \t\tapproximation = parseInt(val * PRECISION) / PRECISION\n\t\t// \t\tvector[c] = approximation\n\n\t\t// round scale if we get values like 0.9999999999 or 1.00000000001\n\t\t// lodash_each ['x', 'y', 'z'], (c)->\n\t\t// \tval = scale[c]\n\t\t// \trounded = Math.round(val)\n\t\t// \tif Math.abs(val - rounded) < EPSILON\n\t\t// \t\tscale[c] = rounded\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('r', rotation.toArray() as Number3);\n\t\t\tnode.params.set_vector3('t', position.toArray() as Number3);\n\t\t\tnode.params.set_vector3('s', scale.toArray() as Number3);\n\t\t\tif (update_scale) {\n\t\t\t\tnode.params.set_float('scale', 1);\n\t\t\t}\n\t\t});\n\t}\n\t// this.object().position.copy(position)\n\t// this.object().quaternion.copy(quaternion)\n\t// this.object().scale.copy(scale)\n\n\tstatic set_params_from_object(object: Object3D, node: BaseNodeType) {\n\t\tconst position = object.position.toArray() as Number3;\n\t\tconst rotation = object.rotation.toArray().map((c) => c * (180 / Math.PI)) as Number3;\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('t', position);\n\t\t\tnode.params.set_vector3('r', rotation);\n\t\t});\n\t}\n\n\t// static translation_matrix(x: number, y: number, z: number): Matrix4 {\n\t// \tconst t = new Vector3(x, y, z);\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst s = new Vector3(1, 1, 1);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\n\tprivate _translation_matrix: Matrix4 = new Matrix4();\n\tprivate _translation_matrix_q = new Quaternion();\n\tprivate _translation_matrix_s = new Vector3(1, 1, 1);\n\ttranslation_matrix(t: Vector3): Matrix4 {\n\t\tthis._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n\t\treturn this._translation_matrix;\n\t}\n\n\tstatic matrix_quaternion(matrix: Matrix4): Quaternion {\n\t\tconst t = new Vector3();\n\t\tconst quat = new Quaternion();\n\t\tconst s = new Vector3();\n\t\tmatrix.decompose(t, quat, s);\n\t\treturn quat;\n\t}\n\n\t// static matrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t// \t// if I don't clone here, it created issues in the transform SOP\n\t// \ts = s.clone().multiplyScalar(scale);\n\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst euler = new Euler(r.x, r.y, r.z, ROTATION_ORDER);\n\t// \tquaternion.setFromEuler(euler);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\tprivate _matrix = new Matrix4().identity();\n\tprivate _matrix_q = new Quaternion();\n\tprivate _matrix_e = new Euler();\n\tprivate _matrix_s = new Vector3();\n\tmatrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t\tthis._matrix_e.set(MathUtils.degToRad(r.x), MathUtils.degToRad(r.y), MathUtils.degToRad(r.z), ROTATION_ORDER);\n\t\tthis._matrix_q.setFromEuler(this._matrix_e);\n\n\t\tthis._matrix_s.copy(s).multiplyScalar(scale);\n\n\t\tthis._matrix.compose(t, this._matrix_q, this._matrix_s);\n\t\treturn this._matrix;\n\t}\n\n\t// static rotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t// \tconst quaternion = new Quaternion();\n\t// \tquaternion.setFromUnitVectors(vec_origin, vec_dest.clone().normalize());\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.makeRotationFromQuaternion(quaternion);\n\t// \tgeometry.applyMatrix(matrix);\n\t// }\n\n\tprivate _rotate_geometry_m = new Matrix4();\n\tprivate _rotate_geometry_q = new Quaternion();\n\tprivate _rotate_geometry_vec_dest = new Vector3();\n\trotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t\tthis._rotate_geometry_vec_dest.copy(vec_dest);\n\t\tthis._rotate_geometry_vec_dest.normalize();\n\t\tthis._rotate_geometry_q.setFromUnitVectors(vec_origin, this._rotate_geometry_vec_dest);\n\t\t// this._rotate_geometry_m.identity(); // not entirely sure this is necessary\n\t\tthis._rotate_geometry_m.makeRotationFromQuaternion(this._rotate_geometry_q);\n\t\tgeometry.applyMatrix4(this._rotate_geometry_m);\n\t}\n}\n","// import {Vector3} from 'three/src/math/Vector3'\n// import {Vector2} from 'three/src/math/Vector2'\n\nimport {CoreWalker} from '../../core/Walker';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NodeScene} from '../../core/graph/NodeScene';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\nimport {BaseNodeType} from '../nodes/_Base';\n\n// import {CallbackOption} from './concerns/options/Callback'\n// import {ColorOption} from './concerns/options/Color'\n// import {CookOption} from './concerns/options/Cook'\n// import {DesktopOption} from './concerns/options/Desktop'\n// import {ExpressionOption} from './concerns/options/Expression'\n// import {MenuOption} from './concerns/options/Menu'\n// import {NodeSelectionOption} from './concerns/options/NodeSelection'\n// import {RangeOption} from './concerns/options/Range'\n// import {AssetReferenceOption} from './concerns/options/AssetReference'\n// import {SpareOption} from './concerns/options/Spare'\n// import {MultilineOption} from './concerns/options/Multiline'\n// import {TextureOption} from './concerns/options/Texture'\n// import {VisibleOption} from './concerns/options/Visible'\n\n// import {Emit} from './concerns/Emit';\n// import {Errored} from './concerns/Errored';\n// import {Eval} from './concerns/Eval';\n// import {Expression} from './concerns/Expression';\n// import {Hierarchy} from './concerns/Hierarchy';\n// import {Json} from './concerns/Json';\n// import {Named} from './concerns/Named';\n// import {Node} from './concerns/Node';\n// import {Options} from './concerns/Options';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {Type} from './concerns/Type';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {VisitorsBase} from './concerns/visitors/_Base';\n\nimport {OptionsController} from './utils/OptionsController';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {EmitController} from './utils/EmitController';\nimport {ParamSerializer} from './utils/Serializer';\nimport {StatesController} from './utils/StatesController';\n// import {UIData} from './utils/UIData';\n\nimport {TypedMultipleParam} from './_Multiple';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {PolyScene} from '../scene/PolyScene';\n\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../params/types/ParamValuesTypeMap';\nimport {ParamValueSerializedTypeMap} from '../params/types/ParamValueSerializedTypeMap';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n// import {TypedNumericParam} from './_Numeric';\n\n// export interface ParamVisitor {\n// \tvisit_param: (param: BaseParamType) => any;\n// \tvisit_multiple_param: (param: TypedMultipleParam<any>) => any;\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\n// type ParamTypeElem = ParamType;\ntype ComputeCallback = (value: void) => void;\n\nexport abstract class TypedParam<T extends ParamType> extends CoreGraphNode {\n\t// protected _raw_input: ParamInitValuesTypeMap[T];\n\tprotected _default_value!: ParamInitValuesTypeMap[T];\n\tprotected _raw_input!: ParamInitValuesTypeMap[T];\n\tprotected _value!: ParamValuesTypeMap[T];\n\t// protected _expression: string;\n\tprotected _node!: BaseNodeType;\n\tprotected _parent_param: TypedMultipleParam<any> | undefined;\n\tprotected _components: FloatParam[] | undefined;\n\tprotected _compute_resolves: ComputeCallback[] | undefined;\n\n\tprivate _options: OptionsController = new OptionsController(this);\n\tget options(): OptionsController {\n\t\treturn (this._options = this._options || new OptionsController(this));\n\t}\n\tprivate _emit_controller: EmitController = new EmitController(this);\n\tget emit_controller(): EmitController {\n\t\treturn (this._emit_controller = this._emit_controller || new EmitController(this));\n\t}\n\tprotected _expression_controller: ExpressionController<T> | undefined;\n\tget expression_controller(): ExpressionController<T> | undefined {\n\t\treturn this._expression_controller; // =\n\t\t//this._expression_controller || new ExpressionController(this);\n\t}\n\tprivate _serializer: ParamSerializer | undefined;\n\tget serializer(): ParamSerializer {\n\t\treturn (this._serializer = this._serializer || new ParamSerializer(this));\n\t}\n\tprivate _states: StatesController | undefined;\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\t// private _ui_data: UIData | undefined;\n\t// get ui_data(): UIData {\n\t// \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n\t// }\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseParam');\n\t\tthis.initialize_param();\n\t}\n\tinitialize_value() {}\n\tinitialize_param() {}\n\t// \t// this.add_post_dirty_hook(this._remove_node_param_cache.bind(this))\n\t// }\n\t// initialize() {\n\t// \tthis.init_components();\n\t// \t// this.init_expression()\n\t// \t// this._init_ui_data()\n\t// }\n\t// accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n\t// \treturn visitor.visit_param(this);\n\t// }\n\n\t//\n\t// init_expression() {}\n\n\t// type\n\tstatic type(): ParamType {\n\t\treturn ParamType.FLOAT; // adding a type here, but just to not have a compile error\n\t}\n\tget type(): T {\n\t\treturn (this.constructor as typeof BaseParamClass).type() as T;\n\t}\n\tget is_numeric(): boolean {\n\t\treturn false;\n\t}\n\n\t// name\n\tset_name(name: string) {\n\t\tsuper.set_name(name);\n\t}\n\n\tget value(): ParamValuesTypeMap[T] {\n\t\treturn this._value;\n\t}\n\tabstract get default_value_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get raw_input_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get value_serialized(): ParamValueSerializedTypeMap[T];\n\tconvert(raw_val: any): ParamValuesTypeMap[T] | null {\n\t\treturn null;\n\t}\n\tstatic are_raw_input_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_raw_input_equal(other_raw_input: ParamInitValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_raw_input_equal(this._raw_input, other_raw_input);\n\t}\n\tstatic are_values_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_value_equal(other_val: ParamValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_values_equal(this.value, other_val);\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input;\n\t}\n\tset(raw_input: ParamInitValuesTypeMap[T]): void {\n\t\tthis._raw_input = this._clone_raw_input(this._prefilter_invalid_raw_input(raw_input));\n\t\tthis.emit_controller.emit(ParamEvent.RAW_INPUT_UPDATED);\n\t\tthis.process_raw_input();\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget is_default(): boolean {\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\n\tprotected process_raw_input() {}\n\tprivate _is_computing: boolean = false;\n\tasync compute(): Promise<void> {\n\t\tif (this.scene.loading_controller.is_loading) {\n\t\t\tconsole.warn(`param attempt to compute ${this.full_path()}`);\n\t\t}\n\n\t\tif (this.is_dirty) {\n\t\t\tif (!this._is_computing) {\n\t\t\t\tthis._is_computing = true;\n\t\t\t\tawait this.process_computation();\n\t\t\t\tthis._is_computing = false;\n\n\t\t\t\tif (this._compute_resolves) {\n\t\t\t\t\tlet callback: ComputeCallback | undefined;\n\t\t\t\t\twhile ((callback = this._compute_resolves.pop())) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._compute_resolves = this._compute_resolves || [];\n\t\t\t\t\tthis._compute_resolves.push(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {}\n\t// set_default_value(default_value: ParamValuesTypeMap[T]) {\n\t// \tthis._default_value = default_value;\n\t// }\n\tset_init_value(init_value: ParamInitValuesTypeMap[T]) {\n\t\tthis._default_value = init_value; //this.convert(init_value);\n\t\t// this._raw_input = this._clone_raw_input(init_value);\n\n\t\t// if (this.is_multiple) {\n\t\t// \tthis.init_components();\n\t\t// }\n\n\t\t// this.set(init_value);\n\t}\n\t// eval_p(): Promise<ParamValuesTypeMap[T]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tresolve();\n\t// \t});\n\t// }\n\n\t// node\n\tset_node(node: BaseNodeType | null) {\n\t\tif (!node) {\n\t\t\tif (this._node) {\n\t\t\t\tthis._node.params.params_node?.remove_graph_input(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._node = node;\n\t\t\tif (this.options.makes_node_dirty_when_dirty() && !this.parent_param) {\n\t\t\t\tnode.params.params_node?.add_graph_input(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.components) {\n\t\t\tfor (let c of this.components) {\n\t\t\t\tc.set_node(node);\n\t\t\t}\n\t\t}\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget parent() {\n\t\treturn this.node;\n\t}\n\n\t// hierarchy\n\tset_parent_param(param: TypedMultipleParam<any>) {\n\t\tparam.add_graph_input(this);\n\t\tthis._parent_param = param;\n\t}\n\tget parent_param(): TypedMultipleParam<any> | undefined {\n\t\treturn this._parent_param;\n\t}\n\thas_parent_param(): boolean {\n\t\treturn this._parent_param != null;\n\t}\n\tfull_path(): string {\n\t\treturn this.node?.full_path() + '/' + this.name;\n\t}\n\tpath_relative_to(node: BaseNodeType | BaseParamType): string {\n\t\treturn CoreWalker.relative_path(node, this);\n\t}\n\n\t// emit\n\temit(event_name: ParamEvent): void {\n\t\tif (this.emit_controller.emit_allowed) {\n\t\t\tthis.emit_controller.increment_count(event_name);\n\t\t\tthis.scene.dispatch_controller.dispatch(this, event_name);\n\t\t}\n\t}\n\n\t// multiple\n\tget components() {\n\t\treturn this._components;\n\t}\n\tstatic get component_names(): string[] {\n\t\treturn [];\n\t}\n\tget component_names(): string[] {\n\t\tconst c = (<unknown>this.constructor) as TypedParam<T>;\n\t\treturn c.component_names;\n\t}\n\tget is_multiple(): boolean {\n\t\treturn this.component_names.length > 0;\n\t}\n\t// create_components() {}\n\tinit_components() {}\n\n\t// expression\n\t// set_expression(expression: string | null) {\n\t// \tthis.expression_controller.set_expression(expression);\n\t// }\n\thas_expression(): boolean {\n\t\treturn this.expression_controller != null && this.expression_controller.active; // use this._expression_controller to avoid creating it\n\t}\n\n\t// serialize\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n}\nexport type BaseParamType = TypedParam<ParamType>;\nexport class BaseParamClass extends TypedParam<ParamType> {\n\tget default_value_serialized() {\n\t\treturn 'BaseParamClass.default_value_serialized overriden';\n\t}\n\tget raw_input_serialized() {\n\t\treturn 'BaseParamClass.raw_input_serialized overriden';\n\t}\n\tget value_serialized() {\n\t\treturn 'BaseParamClass.value_serialized overriden';\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {BypassFlag} from './flags/Bypass';\nimport {DisplayFlag} from './flags/Display';\n\nexport class FlagsController {\n\tpublic readonly bypass: DisplayFlag | undefined;\n\tpublic readonly display: BypassFlag | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\thas_display(): boolean {\n\t\treturn false;\n\t}\n\thas_bypass(): boolean {\n\t\treturn false;\n\t}\n}\n\nfunction Display<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic display: DisplayFlag = new DisplayFlag(this.node);\n\t\thas_display(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\nfunction Bypass<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic readonly bypass: BypassFlag = new BypassFlag(this.node);\n\t\thas_bypass(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n\nexport class FlagsControllerD extends Display(FlagsController) {}\nexport class FlagsControllerB extends Bypass(FlagsController) {}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {}\n","export default \"\\n\\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\\nvec4 quat_mult(vec4 q1, vec4 q2)\\n{\\n\\treturn vec4(\\n\\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\\n\\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\\n\\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\\n\\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\\n\\t);\\n}\\n// http://glmatrix.net/docs/quat.js.html#line97\\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\\n\\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\\n\\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\\n\\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\\n\\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\\n\\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\\n\\n//   return out\\n\\n\\n\\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\\nmat4 rotationMatrix(vec3 axis, float angle)\\n{\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\n \\treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\\n}\\n\\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\\nvec4 quat_from_axis_angle(vec3 axis, float angle)\\n{\\n\\tvec4 qr;\\n\\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\\n\\tfloat sin_half_angle = sin(half_angle);\\n\\tqr.x = axis.x * sin_half_angle;\\n\\tqr.y = axis.y * sin_half_angle;\\n\\tqr.z = axis.z * sin_half_angle;\\n\\tqr.w = cos(half_angle);\\n\\treturn qr;\\n}\\nvec3 rotate_with_axis_angle(vec3 position, vec3 axis, float angle)\\n{\\n\\tvec4 q = quat_from_axis_angle(axis, angle);\\n\\tvec3 v = position.xyz;\\n\\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\\n// \\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n// }\\nvec3 rotate_with_quat( vec3 v, vec4 q )\\n{\\n\\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\\n\\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\\n\\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n}\\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target - origin);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n// mat3 rotation_matrix(vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n\\nfloat vector_angle(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 c1 = cross(start, dest);\\n\\t// We use the dot product of the cross with the Y axis.\\n\\t// This is a little arbitrary, but can still give a good sense of direction\\n\\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\\n\\tfloat d1 = dot(c1, y_axis);\\n\\tfloat angle = acos(cosTheta) * sign(d1);\\n\\treturn angle;\\n}\\n\\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\\nvec4 vector_align(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 axis;\\n\\n\\t// if (cosTheta < -1 + 0.001f){\\n\\t// \\t// special case when vectors in opposite directions:\\n\\t// \\t// there is no \\\"ideal\\\" rotation axis\\n\\t// \\t// So guess one; any will do as long as it's perpendicular to start\\n\\t// \\taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\\n\\t// \\tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\\n\\t// \\t\\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\\n\\n\\t// \\taxis = normalize(axis);\\n\\t// \\treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\\n\\t// }\\n\\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\\n\\t\\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\\n\\t\\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\\n\\t\\t\\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\\n\\t\\t}\\n\\t} else {\\n\\t\\taxis = normalize(cross(start, dest));\\n\\t}\\n\\n\\tfloat angle = acos(cosTheta);\\n\\n\\treturn quat_from_axis_angle(axis, angle);\\n}\\nvec4 vector_align_with_up(vec3 start, vec3 dest, vec3 up){\\n\\tvec4 rot1 = vector_align(start, dest);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\t// vec3 right = normalize(cross(dest, up));\\n\\t// up = normalize(cross(right, dest));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(up, newUp);\\n\\n\\t// return rot1;\\n\\treturn rot2;\\n\\t// return multQuat(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\\n\\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\nfloat quat_to_angle(vec4 q){\\n\\treturn 2.0 * acos(q.w);\\n}\\nvec3 quat_to_axis(vec4 q){\\n\\treturn vec3(\\n\\t\\tq.x / sqrt(1.0-q.w*q.w),\\n\\t\\tq.y / sqrt(1.0-q.w*q.w),\\n\\t\\tq.z / sqrt(1.0-q.w*q.w)\\n\\t);\\n}\\n\\nvec4 align(vec3 dir, vec3 up){\\n\\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\\n\\tvec3 start_up = vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot1 = vector_align(start_dir, dir);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\tvec3 right = normalize(cross(dir, up));\\n\\tif(length(right)<0.001){\\n\\t\\tright = vec3(1.0, 0.0, 0.0);\\n\\t}\\n\\tup = normalize(cross(right, dir));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(normalize(newUp), up);\\n\\n\\t// return rot1;\\n\\treturn quat_mult(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\"","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {DecomposedPath} from './DecomposedPath';\n// import {NodeSimple} from '/graph/NodeSimple'\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class CoreWalker {\n\tpublic static readonly SEPARATOR = '/';\n\tpublic static readonly DOT = '.';\n\tpublic static readonly CURRENT = CoreWalker.DOT;\n\tpublic static readonly PARENT = '..';\n\tpublic static readonly CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;\n\tpublic static readonly PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;\n\tpublic static readonly NON_LETTER_PREFIXES = [CoreWalker.SEPARATOR, CoreWalker.DOT];\n\n\tstatic find_node(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements: string[] = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);\n\t\tconst first_element = elements[0];\n\n\t\tlet next_node: BaseNodeType | null = null;\n\t\tif (path[0] === CoreWalker.SEPARATOR) {\n\t\t\tconst path_from_root = path.substr(1);\n\t\t\tnext_node = this.find_node(node_src.root, path_from_root, decomposed_path);\n\t\t} else {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase CoreWalker.PARENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src.parent;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreWalker.CURRENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: What does .node means?? in which case is this not a node? (it is for nodes which cannot have children - but I'd like to unify the api)\n\t\t\t\t\t// console.error(\"rethink this method Walker.find_node\")\n\t\t\t\t\t// if (node_src.node != null) {\n\t\t\t\t\tnext_node = node_src.node(first_element);\n\t\t\t\t\tif (next_node) {\n\t\t\t\t\t\tdecomposed_path?.add_node(first_element, next_node);\n\t\t\t\t\t}\n\n\t\t\t\t// if (next_node == null) { this.find_node_warning(node_src, first_element); }\n\t\t\t\t// return next_node;\n\t\t\t\t// break\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\tif (next_node != null && elements.length > 1) {\n\t\t\t\tconst remainder = elements.slice(1).join(CoreWalker.SEPARATOR);\n\t\t\t\tnext_node = this.find_node(next_node, remainder, decomposed_path);\n\t\t\t}\n\t\t\treturn next_node;\n\t\t}\n\n\t\treturn next_node;\n\t}\n\n\tstatic find_param(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = path.split(CoreWalker.SEPARATOR);\n\n\t\tif (elements.length === 1) {\n\t\t\treturn node_src.params.get(elements[0]);\n\t\t} else {\n\t\t\tconst node_path = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);\n\t\t\tconst node = this.find_node(node_src, node_path, decomposed_path);\n\t\t\tif (node != null) {\n\t\t\t\tconst param_name = elements[elements.length - 1];\n\t\t\t\tconst param = node.params.get(param_name);\n\t\t\t\tif (decomposed_path && param) {\n\t\t\t\t\tdecomposed_path.add_node(param_name, param);\n\t\t\t\t}\n\t\t\t\treturn param;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t\t// throw `no node found for path ${node_path}`;\n\t\t\t}\n\t\t}\n\t}\n\tstatic relative_path(src_graph_node: Readonly<NodeOrParam>, dest_graph_node: Readonly<NodeOrParam>): string {\n\t\tconst parent = this.closest_common_parent(src_graph_node, dest_graph_node);\n\t\tif (!parent) {\n\t\t\treturn dest_graph_node.full_path();\n\t\t} else {\n\t\t\tconst distance = this.distance_to_parent(src_graph_node, parent);\n\t\t\t// const up = lodash_padStart(\"\", (distance-1)*3, \"../\")\n\t\t\tlet up = '';\n\t\t\tif (distance - 1 > 0) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst ups = [];\n\t\t\t\twhile (i++ < distance - 1) {\n\t\t\t\t\tups.push(CoreWalker.PARENT);\n\t\t\t\t}\n\t\t\t\tup = ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;\n\t\t\t}\n\n\t\t\tconst parent_path_elements = parent\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst dest_path_elements = dest_graph_node\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst remaining_elements = [];\n\t\t\tlet cmptr = 0;\n\t\t\tfor (let dest_path_element of dest_path_elements) {\n\t\t\t\tif (!parent_path_elements[cmptr]) {\n\t\t\t\t\tremaining_elements.push(dest_path_element);\n\t\t\t\t}\n\t\t\t\tcmptr++;\n\t\t\t}\n\t\t\tconst down = remaining_elements.join(CoreWalker.SEPARATOR);\n\t\t\treturn `${up}${down}`;\n\t\t}\n\t}\n\n\tstatic closest_common_parent(\n\t\tgraph_node1: Readonly<NodeOrParam>,\n\t\tgraph_node2: Readonly<NodeOrParam>\n\t): BaseNodeType | null {\n\t\tconst parents1 = this.parents(graph_node1).reverse();\n\t\tconst parents2 = this.parents(graph_node2).reverse();\n\n\t\tconst min_depth = Math.min(parents1.length, parents2.length);\n\t\tlet found_parent = null;\n\n\t\tfor (let i = 0; i < min_depth; i++) {\n\t\t\tif (parents1[i].graph_node_id == parents2[i].graph_node_id) {\n\t\t\t\tfound_parent = parents1[i];\n\t\t\t}\n\t\t}\n\t\treturn found_parent;\n\t}\n\tstatic parents(graph_node: Readonly<NodeOrParam>): BaseNodeType[] {\n\t\tconst parents = [];\n\t\tlet parent = graph_node.parent;\n\t\twhile (parent) {\n\t\t\tparents.push(parent);\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn parents;\n\t}\n\tstatic distance_to_parent(graph_node: Readonly<NodeOrParam>, dest: Readonly<BaseNodeType>): number {\n\t\tlet distance = 0;\n\t\tlet current: Readonly<NodeOrParam | null> = graph_node;\n\t\tconst dest_id = dest.graph_node_id;\n\t\twhile (current && current.graph_node_id != dest_id) {\n\t\t\tdistance += 1;\n\t\t\tcurrent = current.parent;\n\t\t}\n\t\tif (current && current.graph_node_id == dest_id) {\n\t\t\treturn distance;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tstatic make_absolute_path(node_src: BaseNodeType | BaseParamType, path: string): string | null {\n\t\tconst path_elements = path.split(CoreWalker.SEPARATOR);\n\t\tconst first_element = path_elements.shift();\n\n\t\tif (first_element) {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase '..': {\n\t\t\t\t\tif (node_src.parent) {\n\t\t\t\t\t\treturn this.make_absolute_path(node_src.parent, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase '.': {\n\t\t\t\t\treturn this.make_absolute_path(node_src, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn [node_src.full_path(), path].join(CoreWalker.SEPARATOR);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn node_src.full_path();\n\t\t}\n\t}\n}\n","export enum ParamEvent {\n\tVISIBLE_UPDATED = 'param_visible_updated',\n\t// UPDATED = 'param_updated',\n\tRAW_INPUT_UPDATED = 'raw_input_updated',\n\tVALUE_UPDATED = 'param_value_updated',\n\tEXPRESSION_UPDATED = 'param_expression_update',\n\tERROR_UPDATED = 'param_error_updated',\n\tDELETED = 'param_deleted',\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Triangle} from 'three/src/math/Triangle';\nconst THREE = {Triangle, Vector3};\nimport lodash_isNumber from 'lodash/isNumber';\n// import {Octree} from './Octree'\n// import Interpolate from './Interpolate'\nimport {Easing} from './Easing';\n\nconst RAD_DEG_RATIO = Math.PI / 180;\n\nexport class CoreMath {\n\t// static Octree = Octree\n\t// static Interpolate = Interpolate\n\tstatic Easing = Easing; // used in expressins\n\n\tstatic clamp(val: number, min: number, max: number): number {\n\t\tif (val < min) {\n\t\t\treturn min;\n\t\t} else if (val > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tstatic fit01(val: number, dest_min: number, dest_max: number): number {\n\t\t// const size = max - min;\n\t\t// return (val - min) / size;\n\t\treturn this.fit(val, 0, 1, dest_min, dest_max);\n\t}\n\n\tstatic fit(val: number, src_min: number, src_max: number, dest_min: number, dest_max: number): number {\n\t\tconst src_range = src_max - src_min;\n\t\tconst dest_range = dest_max - dest_min;\n\n\t\tconst r = (val - src_min) / src_range;\n\t\treturn r * dest_range + dest_min;\n\t}\n\n\tstatic degrees_to_radians(degrees: number): number {\n\t\treturn degrees * RAD_DEG_RATIO;\n\t}\n\tstatic radians_to_degrees(radians: number): number {\n\t\treturn radians / RAD_DEG_RATIO;\n\t}\n\tstatic deg2rad(deg: number): number {\n\t\treturn this.degrees_to_radians(deg);\n\t}\n\tstatic rad2deg(rad: number): number {\n\t\treturn this.radians_to_degrees(rad);\n\t}\n\n\tstatic fract = (number: number) => number - Math.floor(number);\n\n\t// from threejs glsl rand\n\tstatic rand(number: number): number {\n\t\tif (lodash_isNumber(number)) {\n\t\t\treturn this.rand_float(number);\n\t\t} else {\n\t\t\treturn this.rand_vec2(number);\n\t\t}\n\t}\n\n\tstatic round(number: number, step_size: number): number {\n\t\tconst steps_count = number / step_size;\n\t\tconst rounded_steps_count = number < 0 ? Math.ceil(steps_count) : Math.floor(steps_count);\n\t\tconsole.log('round', step_size, number, steps_count, rounded_steps_count, rounded_steps_count * step_size);\n\t\treturn rounded_steps_count * step_size;\n\t}\n\n\tstatic highest_even(number: number): number {\n\t\treturn 2 * Math.ceil(number * 0.5);\n\t}\n\n\tstatic rand_float(number: number): number {\n\t\tconst vec = {\n\t\t\tx: number,\n\t\t\ty: 136574,\n\t\t};\n\t\treturn this.rand_vec2(vec);\n\t}\n\n\tstatic rand_vec2(uv: Vector2Like) {\n\t\tconst a = 12.9898;\n\t\tconst b = 78.233;\n\t\tconst c = 43758.5453;\n\t\tconst dt = uv.x * a + uv.y * b; //dot( uv.xy, vec2( a,b ) )\n\t\tconst sn = dt % Math.PI;\n\t\treturn this.fract(Math.sin(sn) * c);\n\t}\n\n\t// https://www.movable-type.co.uk/scripts/latlong.html\n\tstatic geodesic_distance(lnglat1: LngLatLike, lnglat2: LngLatLike): number {\n\t\tvar R = 6371e3; // metres\n\t\tvar φ1 = this.deg2rad(lnglat1.lat);\n\t\tvar φ2 = this.deg2rad(lnglat2.lat);\n\t\tvar Δφ = this.deg2rad(lnglat2.lat - lnglat1.lat);\n\t\tvar Δλ = this.deg2rad(lnglat2.lng - lnglat1.lng);\n\n\t\tvar a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tvar d = R * c;\n\t\treturn d;\n\t}\n\n\tstatic expand_triangle(triangle: Triangle, margin: number): Triangle {\n\t\tconst mid_point = new THREE.Vector3();\n\t\ttriangle.getMidpoint(mid_point);\n\n\t\tenum TriangleProp {\n\t\t\ta = 'a',\n\t\t\tb = 'b',\n\t\t\tc = 'c',\n\t\t}\n\t\tfor (let prop of ['a', 'b', 'c']) {\n\t\t\tconst delta = triangle[prop as TriangleProp].clone().sub(mid_point);\n\t\t\tconst delta_n = delta.clone().normalize();\n\t\t\tconst length = delta.length() + margin;\n\n\t\t\ttriangle[prop as TriangleProp] = mid_point.clone().add(delta_n.multiplyScalar(length));\n\t\t}\n\t\treturn triangle;\n\t}\n\n\tstatic nearestPower2(num: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));\n\t}\n}\n","import {BaseController} from './_BaseController';\n\nimport {FrontSide} from 'three/src/constants';\nimport {DoubleSide} from 'three/src/constants';\nimport {BackSide} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function SideParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdouble_sided = ParamConfig.BOOLEAN(0);\n\t\tfront = ParamConfig.BOOLEAN(1, {visible_if: {double_sided: false}});\n\t};\n}\n\nclass SidedMaterial extends Material {\n\tside!: number;\n}\nclass SideParamsConfig extends SideParamConfig(NodeParamsConfig) {}\nclass SideMatNode extends TypedMatNode<SidedMaterial, SideParamsConfig> {\n\tcreate_material() {\n\t\treturn new SidedMaterial();\n\t}\n}\n\nexport class SideController extends BaseController {\n\tstatic update(node: SideMatNode) {\n\t\tconst single_side = node.pv.front ? FrontSide : BackSide;\n\t\tconst new_side = node.pv.double_sided ? DoubleSide : single_side;\n\t\tif (new_side != node.material.side) {\n\t\t\tnode.material.side = new_side;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {OutputGlNode} from '../../../Output';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {BaseGLDefinition, UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {MapUtils} from '../../../../../../core/MapUtils';\nimport {ShaderMaterialWithCustomMaterials} from '../../../../../../core/geometry/Material';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {GlNodeFinder} from '../../utils/NodeFinder';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\n// import {BaseNodeType} from '../../_Base';\n// import {GlobalsGeometryHandler} from './Globals/Geometry'\n\nexport enum CustomMaterialName {\n\tDISTANCE = 'customDistanceMaterial',\n\tDEPTH = 'customDepthMaterial',\n\tDEPTH_DOF = 'customDepthDOFMaterial',\n}\n// export type ShaderAssemblerRenderDerivated = {new (node: BaseNodeType): ShaderAssemblerRender};\n// type ShaderAssemblerRenderDerivatedClass = new (...args: any[]) => ShaderAssemblerRender;\nexport type CustomAssemblerMap = Map<CustomMaterialName, typeof ShaderAssemblerMaterial>;\n\nexport class ShaderAssemblerMaterial extends BaseGlShaderAssembler {\n\tprivate _assemblers_by_custom_name: Map<CustomMaterialName, ShaderAssemblerMaterial> = new Map();\n\n\tcreate_material(): ShaderMaterial {\n\t\treturn new ShaderMaterial();\n\t}\n\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap | undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected _add_custom_materials(material: ShaderMaterial) {\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\t(assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tthis._add_custom_material(\n\t\t\t\t\t\tmaterial as ShaderMaterialWithCustomMaterials,\n\t\t\t\t\t\tcustom_name,\n\t\t\t\t\t\tassembler_class\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\tprivate _add_custom_material(\n\t\tmaterial: ShaderMaterialWithCustomMaterials,\n\t\tcustom_name: CustomMaterialName,\n\t\tassembler_class: typeof ShaderAssemblerMaterial\n\t) {\n\t\tlet custom_assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(custom_name);\n\t\tif (!custom_assembler) {\n\t\t\tcustom_assembler = new assembler_class(this._gl_parent_node);\n\t\t\tthis._assemblers_by_custom_name.set(custom_name, custom_assembler);\n\t\t}\n\t\tmaterial.custom_materials = material.custom_materials || {};\n\t\tmaterial.custom_materials[custom_name] = custom_assembler.create_material();\n\t}\n\n\tasync compile_custom_materials(material: ShaderMaterialWithCustomMaterials): Promise<void> {\n\t\t// const custom_materials_by_name: Map<CustomMaterialName, ShaderMaterial> = new Map();\n\t\t// this._assemblers_by_custom_name.clear();\n\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\tasync (assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tif (this._code_builder) {\n\t\t\t\t\t\tlet assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(\n\t\t\t\t\t\t\tcustom_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!assembler) {\n\t\t\t\t\t\t\tassembler = new assembler_class(this._gl_parent_node);\n\t\t\t\t\t\t\tthis._assemblers_by_custom_name.set(custom_name, assembler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tassembler.set_root_nodes(this._root_nodes);\n\t\t\t\t\t\tassembler.set_param_configs_owner(this._code_builder);\n\t\t\t\t\t\tassembler.set_shader_configs(this.shader_configs);\n\t\t\t\t\t\tassembler.set_variable_configs(this.variable_configs());\n\n\t\t\t\t\t\tconst custom_material = material.custom_materials[custom_name];\n\t\t\t\t\t\tif (custom_material) {\n\t\t\t\t\t\t\tawait assembler.compile_material(custom_material);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if (material) {\n\t\t\t\t\t\t// \t// add needsUpdate = true, as we always get the same material\n\t\t\t\t\t\t// \t// material.needsUpdate = true;\n\t\t\t\t\t\t// \tcustom_materials_by_name.set(custom_name, material);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// for (let custom_name of Object.keys(class_by_custom_name)) {\n\t\t// \tconst assembler_class = class_by_custom_name[custom_name];\n\t\t// \t// const assembler = new assembler_class(this._gl_parent_node)\n\n\t\t// }\n\n\t\t// return custom_materials_by_name;\n\t}\n\tasync compile_material(material: ShaderMaterial) {\n\t\t// no need to compile if the globals handler has not been declared\n\t\tif (!this.compile_allowed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this._gl_parent_node);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis._gl_parent_node.states.error.set('only one output node allowed');\n\t\t}\n\t\tthis.set_root_nodes(output_nodes);\n\t\tawait this._update_shaders();\n\n\t\tconst new_vertex_shader = this._shaders_by_name.get(ShaderName.VERTEX);\n\t\tconst new_fragment_shader = this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t\tif (new_vertex_shader && new_fragment_shader) {\n\t\t\tmaterial.vertexShader = new_vertex_shader;\n\t\t\tmaterial.fragmentShader = new_fragment_shader;\n\t\t\t// if (this._template_shader && this._template_shader.uniforms) {\n\t\t\tthis.add_uniforms(material.uniforms);\n\t\t\t// }\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t\t\t// as we need several materials:\n\t\t\t// - the visible one\n\t\t\t// - the multiple shadow ones\n\t\t\t// - and possibly a depth one\n\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(\n\t\t\t\tmaterial.uuid,\n\t\t\t\tmaterial.uniforms as IUniformsWithTime\n\t\t\t);\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(material.uuid);\n\t\t}\n\n\t\t// const material = await this._assembler.get_material();\n\t\t// if (material) {\n\t\t// this._shaders_by_name.set(ShaderName.VERTEX, this._template_shader!.vertexShader!);\n\t\t// this._shaders_by_name.set(ShaderName.FRAGMENT, this._template_shader!.fragmentShader!);\n\n\t\t// assign custom materials\n\t\tif ((material as ShaderMaterialWithCustomMaterials).custom_materials) {\n\t\t\tawait this.compile_custom_materials(material as ShaderMaterialWithCustomMaterials);\n\t\t}\n\t\t// const custom_materials = await this.get_custom_materials();\n\t\t// const material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t\t// material_with_custom_materials.custom_materials = {};\n\t\t// custom_materials.forEach((custom_material, shader_name) => {\n\t\t// \tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t\t// });\n\n\t\t// material.needsUpdate = true;\n\t\t// }\n\n\t\t// this.create_spare_parameters();\n\t}\n\tprivate async _update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\tshadow_assembler_class_by_custom_name() {\n\t\treturn {};\n\t}\n\n\tadd_output_body_line(\n\t\toutput_node: OutputGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController,\n\t\tinput_name: string\n\t) {\n\t\tconst input = output_node.io.inputs.named_input(input_name);\n\t\tconst var_input = output_node.variable_for_input(input_name);\n\t\tconst variable_config = this.variable_config(input_name);\n\n\t\tlet new_var: string | null = null;\n\t\tif (input) {\n\t\t\tnew_var = ThreeToGl.vector3(var_input);\n\t\t} else {\n\t\t\tif (variable_config.default_from_attribute()) {\n\t\t\t\tconst connection_point = output_node.io.inputs.named_input_connection_points_by_name(input_name);\n\t\t\t\tif (connection_point) {\n\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\tconst attr_read = this.globals_handler?.read_attribute(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tgl_type,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t\tif (attr_read) {\n\t\t\t\t\t\tnew_var = attr_read;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst variable_config_default = variable_config.default();\n\t\t\t\tif (variable_config_default) {\n\t\t\t\t\tnew_var = variable_config_default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// const default_value = variable_config.default()\n\t\t\t// new_var = default_value\n\t\t\t// const definition_configs = variable_config.required_definitions() || []\n\t\t\t// for(let definition_config of definition_configs){\n\t\t\t// \tconst definition = definition_config.create_definition(output_node)\n\t\t\t// \toutput_node.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\t\tif (new_var) {\n\t\t\tconst prefix = variable_config.prefix();\n\t\t\tconst suffix = variable_config.suffix();\n\t\t\tconst if_condition = variable_config.if_condition();\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#if ${if_condition}`]);\n\t\t\t}\n\t\t\tshaders_collection_controller.add_body_lines(output_node, [`${prefix}${new_var}${suffix}`]);\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#endif`]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.shader_config(shader_name)?.input_names();\n\t\tif (input_names) {\n\t\t\t// shaders_collection_controller.set_body_lines([], shader_name);\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tthis.add_output_body_line(output_node, shaders_collection_controller, input_name);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\t// const named_output = attribute_node.connected_output()\n\t\t// const named_connection = attribute_node.connected_input()\n\t\tconst gl_type = attribute_node.gl_type();\n\t\tconst new_var = this.globals_handler?.read_attribute(\n\t\t\tattribute_node,\n\t\t\tgl_type,\n\t\t\tattribute_node.attribute_name,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\tshaders_collection_controller.add_body_lines(attribute_node, [`${gl_type} ${var_name} = ${new_var}`]);\n\t\t// this.add_output_body_line(\n\t\t// \tattribute_node,\n\t\t// \tshader_name,\n\t\t// \tinput_name\n\t\t// \t)\n\n\t\t// const vertex_definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_definitions = []\n\n\t\t// const named_output = attribute_node.named_outputs()[0]\n\t\t// const gl_type = named_output.type()\n\t\t// const var_name = attribute_node.gl_var_name(named_output.name())\n\n\t\t// const attribute_name = attribute_node.attribute_name()\n\t\t// // TODO: I should probably raise an error in the node\n\t\t// // maybe when doint the initial eval of all nodes and check for errors?\n\t\t// if(!attribute_name){\n\t\t// \tconsole.error(attribute_node.full_path())\n\t\t// \tthrow new Error(\"empty attr name\")\n\t\t// }\n\t\t// if(GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attribute_name) < 0){\n\t\t// \tvertex_definitions.push(new Definition.Attribute(attribute_node, gl_type, attribute_name))\n\t\t// }\n\t\t// vertex_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\t\t// vertex_body_lines.push( `${var_name} = ${attribute_name}` )\n\t\t// fragment_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\n\t\t// attribute_node.set_definitions(vertex_definitions, 'vertex')\n\t\t// attribute_node.set_definitions(fragment_definitions, 'fragment')\n\t\t// attribute_node.add_body_lines(vertex_body_lines, 'vertex')\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec4 ${var_name} = gl_FragCoord`);\n\t\t}\n\t}\n\thandle_resolution(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec2 ${var_name} = resolution`);\n\t\t}\n\t}\n\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = [];\n\t\t// const fragment_definitions = [];\n\t\t// const definitions = [];\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = [];\n\t\tconst body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_nameshader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tdefinitions_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t// body_lines_by_shader_name[shader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tbody_lines_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tlet definition;\n\t\tlet body_line;\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tbody_line = `float ${var_name} = ${output_name}`;\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\tbody_lines.push(body_line);\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tthis.handle_resolution(body_lines, shader_name, var_name);\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.VEC2, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set_resolution_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_PointCoord':\n\t\t\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\t\t\tbody_lines.push(`vec2 ${var_name} = gl_PointCoord`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t\t// const new_var = this.globals_handler().read_attribute(\n\t\t\t\t\t// \tglobals_node,\n\t\t\t\t\t// \tgl_type,\n\t\t\t\t\t// \toutput_name\n\t\t\t\t\t// )\n\t\t\t\t\t// const body_line = `${var_name} = ${new_var}`\n\t\t\t\t\t// globals_node.add_body_lines([body_line])\n\t\t\t\t\tthis.globals_handler?.handle_globals_node(\n\t\t\t\t\t\tglobals_node,\n\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t\t\t// body_lines,\n\t\t\t\t\t\t// dependencies,\n\t\t\t\t\t\t// shader_name\n\t\t\t\t\t);\n\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t// definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t\t\t// definitions_by_shader_name[shader_name].push(definition)\n\t\t\t\t// throw \"debug\"\n\n\t\t\t\t// body_line = `${var_name} = vec3(${output_name})`\n\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t// }\n\t\t\t\t// if(dependencies.length == 0){\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\t});\n\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines, shader_name);\n\t\t});\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t}\n}\n","import {BaseContainer, TypedContainer} from '../../containers/_Base';\nimport {BaseNodeType} from '../_Base';\n\ntype Callback<T extends TypedContainer<any>> = (container: T | undefined) => void;\n\nexport class TypedContainerController<T extends TypedContainer<any>> {\n\tprivate _callbacks: Callback<T>[] = [];\n\tprotected _container: T;\n\n\tconstructor(protected node: BaseNodeType, container_class: typeof BaseContainer) {\n\t\tthis._container = new container_class(this.node) as T;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\trequest_container(): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._callbacks.push(resolve);\n\t\t\tthis.node.scene.cook_controller.add_node(this.node);\n\n\t\t\t// const cooker = this.node.scene.cooker;\n\t\t\t// if (cooker.blocked()) {\n\t\t\t// \tcooker.enqueue(this.node);\n\t\t\t// } else {\n\t\t\tsetTimeout(this.process_container_request.bind(this), 0);\n\t\t\t// }\n\t\t});\n\t}\n\n\tprocess_container_request() {\n\t\tif (this.node.flags?.bypass?.active) {\n\t\t\tconst input_index = 0;\n\t\t\tthis.request_input_container(input_index).then((container) => {\n\t\t\t\tthis.node.remove_dirty_state();\n\t\t\t\tif (container) {\n\t\t\t\t\tthis.notify_requesters(container);\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('input invalid');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.node.is_dirty) {\n\t\t\t\tthis.node.container_controller.container.reset_caches();\n\t\t\t\tthis.node.cook_controller.cook_main();\n\t\t\t} else {\n\t\t\t\tthis.notify_requesters();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync request_input_container(input_index: number) {\n\t\tconst input_node = this.node.io.inputs.input(input_index);\n\t\tif (input_node) {\n\t\t\tinput_node.processing_context.copy(this.node.processing_context);\n\t\t\tconst container = await input_node.container_controller.request_container();\n\t\t\treturn container;\n\t\t} else {\n\t\t\tthis.node.states.error.set(`input ${input_index} required`);\n\t\t\tthis.notify_requesters();\n\t\t\treturn null;\n\t\t}\n\t}\n\tnotify_requesters(container?: T) {\n\t\t// make a copy of the callbacks first,\n\t\t// to ensure that new ones are not added to this list\n\t\t// in side effects from those callbacks\n\t\t// (the test suite for the File SOP is a good test for this)\n\t\tlet callback;\n\t\tconst callbacks = [];\n\t\twhile ((callback = this._callbacks.pop())) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\n\t\tif (!container) {\n\t\t\tcontainer = this.node.container_controller.container.clone();\n\t\t}\n\t\t// removing the clone, as this seems to defeat the no cloning of inputs\n\t\t// container = container || this._container\n\t\twhile ((callback = callbacks.pop())) {\n\t\t\tcallback(container);\n\t\t}\n\t\tthis.node.scene.cook_controller.remove_node(this.node);\n\t}\n}\n\nexport class BaseContainerController extends TypedContainerController<any> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nconst THREE = {Vector2, Vector3};\n\nconst ATTRIB_NAME_MAP: Dictionary<string> = {\n\tP: 'position',\n\tN: 'normal',\n\tCd: 'color',\n};\n\nexport class CoreAttribute {\n\t// constructor: (@_size, @_value)->\n\t// \t#\n\n\t// size: ->\n\t// \t@_size\n\n\t// value: ->\n\t// \t@_value\n\n\t// set_value: (value)->\n\t// \t@_value = value\n\n\tstatic remap_name(name: string): string {\n\t\treturn ATTRIB_NAME_MAP[name] || name;\n\t}\n\n\tstatic array_to_indexed_arrays(array: string[]) {\n\t\tconst index_by_value: Dictionary<number> = {};\n\t\tlet current_index = 0;\n\t\tconst indices = [];\n\t\tconst values = [];\n\n\t\tlet i = 0;\n\t\twhile (i < array.length) {\n\t\t\t//(value = array[i++])?\n\t\t\tconst value = array[i];\n\t\t\tconst index = index_by_value[value];\n\t\t\tif (index != null) {\n\t\t\t\tindices.push(index);\n\t\t\t} else {\n\t\t\t\tvalues.push(value);\n\t\t\t\tindices.push(current_index);\n\t\t\t\tindex_by_value[value] = current_index;\n\t\t\t\tcurrent_index += 1;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn {\n\t\t\tindices,\n\t\t\tvalues,\n\t\t};\n\t}\n\n\tstatic default_value(size: number) {\n\t\tswitch (size) {\n\t\t\tcase 1:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn new THREE.Vector2(0, 0);\n\t\t\tcase 3:\n\t\t\t\treturn new THREE.Vector3(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow `size ${size} not yet implemented`;\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../nodes/_Base';\n\n// interface ContentOption {\n// \tclone?: boolean\n// }\n\nimport {ContainableMap} from './utils/ContainableMap';\ntype K = keyof ContainableMap;\ntype Containable = ContainableMap[K];\n\nexport abstract class TypedContainer<T extends Containable> {\n\t// protected _node: BaseNode;\n\t// protected _eval_key: number\n\tprotected _content!: T;\n\n\tconstructor(protected _node: BaseNodeType) {\n\t\t// this.update_eval_key();\n\t\t// this.set_content(this._default_content());\n\t}\n\n\tset_node(node: BaseNodeType) {\n\t\tthis._node = node;\n\t}\n\tnode(): BaseNodeType {\n\t\treturn this._node;\n\t}\n\n\tclone() {\n\t\tlet content;\n\t\tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n\t\tcloned_container.set_node(this.node());\n\t\tif ((content = this.content()) != null) {\n\t\t\tcloned_container.set_content(content); //, this.eval_key() );\n\t\t}\n\t\treturn cloned_container;\n\t}\n\treset_caches() {}\n\t// abstract _default_content(): T;\n\n\tset_content(content: T) {\n\t\t//, eval_key?: number){\n\t\tthis.reset_caches();\n\t\tthis._content = content; //|| this._default_content();\n\t\t// this.update_eval_key(eval_key);\n\t\tthis._post_set_content();\n\t}\n\thas_content(): boolean {\n\t\treturn this._content != null;\n\t}\n\t// content(options: ContentOption = {}) {\n\t// \tconst clone = options['clone'] || false\n\t// \tif (clone) {\n\t// \t\treturn this.clone_content()\n\t// \t} else {\n\t// \t\treturn this._content\n\t// \t}\n\t// }\n\tcontent() {\n\t\treturn this._content;\n\t}\n\tprotected _post_set_content() {}\n\tpublic core_content(): T | undefined {\n\t\treturn this._content;\n\t}\n\tpublic core_content_cloned(): T | undefined {\n\t\treturn this._content;\n\t}\n\t// abstract clone_content(): T\n\n\t// update_eval_key(eval_key?: number){\n\t// \tthis._eval_key = eval_key || performance.now();\n\t// }\n\t// eval_key(): number {\n\t// \treturn this._eval_key;\n\t// }\n\n\tinfos(): any {\n\t\treturn [];\n\t}\n}\n\nexport class BaseContainer extends TypedContainer<any> {}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {TypedMatNode} from '../_Base';\nexport function SkinningParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tskinning = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass SkinnedMaterial extends Material {\n\tskinning!: boolean;\n}\nclass SkinningParamsConfig extends SkinningParamConfig(NodeParamsConfig) {}\nclass SkinningMatNode extends TypedMatNode<SkinnedMaterial, SkinningParamsConfig> {\n\tcreate_material() {\n\t\treturn new SkinnedMaterial();\n\t}\n}\n\nexport class SkinningController extends BaseController {\n\tstatic update(node: SkinningMatNode) {\n\t\tconst new_skinning = node.pv.skinning;\n\t\tif (new_skinning != node.material.skinning) {\n\t\t\tnode.material.skinning = new_skinning;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMapController));\n\t\tmap = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureMapController, 'use_map')\n\t\t);\n\t};\n}\nclass TextureMapMaterial extends Material {\n\tmap!: Texture | null;\n}\ntype CurrentMaterial = TextureMapMaterial | ShaderMaterial;\nclass TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\nabstract class TextureMapMatNode extends TypedMatNode<CurrentMaterial, TextureMapParamsConfig> {\n\ttexture_map_controller!: TextureMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(node: TextureMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_map, this.node.p.map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'map', this.node.p.use_map, this.node.p.map);\n\t}\n\tstatic async update(node: TextureMapMatNode) {\n\t\tnode.texture_map_controller.update();\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nexport function TextureAlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_alpha_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureAlphaMapController));\n\t\talpha_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureAlphaMapController, 'use_alpha_map')\n\t\t);\n\t};\n}\nclass TextureAlphaMaterial extends Material {\n\talphaMap!: Texture | null;\n}\ntype CurrentMaterial = TextureAlphaMaterial | ShaderMaterial;\nclass TextureAlphaMapParamsConfig extends TextureAlphaMapParamConfig(NodeParamsConfig) {}\nabstract class TextureAlphaMapMatNode extends TypedMatNode<CurrentMaterial, TextureAlphaMapParamsConfig> {\n\ttexture_alpha_map_controller!: TextureAlphaMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(node: TextureAlphaMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'alphaMap', this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tstatic async update(node: TextureAlphaMapMatNode) {\n\t\tnode.texture_alpha_map_controller.update();\n\t}\n}\n","export class MapUtils {\n\tstatic push_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.push(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic unshift_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.unshift(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic concat_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_elements: V[]) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tlet array: V[] = map.get(key)!;\n\t\t\tfor (let element of new_elements) {\n\t\t\t\tarray.push(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmap.set(key, new_elements);\n\t\t}\n\t}\n}\n","export const CATEGORY_OBJ = {\n\tLIGHT: 'lights',\n\tMANAGER: 'managers',\n\tGEOMETRY: 'geometries',\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_COP = {\n\tINPUT: 'inputs',\n\tADVANCED: 'advanced',\n\tMISC: 'misc',\n};\nexport const CATEGORY_EVENT = {\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_GL = {\n\tCOLOR: 'color',\n\tCONVERSION: 'conversion',\n\tDYNAMICS: 'dynamics',\n\tGEOMETRY: 'geometry',\n\tGLOBALS: 'globals',\n\tLOGIC: 'logic',\n\tMATH: 'math',\n\tQUAT: 'quat',\n\tTRIGO: 'trigo',\n\tUTIL: 'util',\n\tINSTANCE: 'instance',\n};\nexport const CATEGORY_MAT = {\n\tADVANCED: 'advanced',\n\tMESH: 'meshes',\n\tPOINTS: 'points',\n\tLINE: 'lines',\n\tVOLUME: 'volumes',\n\tINSTANCE: 'instances',\n};\nexport const CATEGORY_SOP = {\n\tADVANCED: 'advanced',\n\tANIMATION: 'animation',\n\tATTRIBUTE: 'attributes',\n\tDYNAMICS: 'dynamics',\n\tINPUT: 'inputs',\n\tMISC: 'misc',\n\tMODIFIER: 'modifiers',\n\tPRIMITIVES: 'primitives',\n\tRENDER: 'render',\n};\nexport const CATEGORY_POST = {\n\tPASS: 'passes',\n};\n","import {TypedNode} from '../_Base';\nimport {TextureContainer} from '../../containers/Texture';\nimport {Texture} from 'three/src/textures/Texture';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {PolyScene} from '../../scene/PolyScene';\nimport {FlagsControllerB} from '../utils/FlagsController';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {LuminanceFormat, HalfFloatType} from 'three/src/constants';\n\nconst INPUT_COP_NAME = 'input texture';\nconst DEFAULT_INPUT_NAMES = [INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME];\n\nvar size = 32;\nvar data = new Uint16Array(size);\nfor (var i = 0; i < size; i++) {\n\tdata[i] = 0x70e2; // Half float 10000\n}\nconst EMPTY_DATA_TEXTURE = new DataTexture(data, size, 1, LuminanceFormat, HalfFloatType);\n\nexport class TypedCopNode<K extends NodeParamsConfig> extends TypedNode<'TEXTURE', BaseCopNodeType, K> {\n\tcontainer_controller: TypedContainerController<TextureContainer> = new TypedContainerController<TextureContainer>(\n\t\tthis,\n\t\tTextureContainer\n\t);\n\tpublic readonly flags: FlagsControllerB = new FlagsControllerB(this);\n\t// private _typed_array = new Uint8ClampedArray(512 * 512 * 4);\n\t// protected _texture: Texture = new DataTexture(this._typed_array, 512, 512, RGBFormat);\n\t// get texture() {\n\t// \treturn this._data_texture;\n\t// }\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.COP;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseCopNode');\n\t}\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\t// if (this.flags.display) {\n\t\t// \tthis.flags.display.set(false);\n\t\t// }\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\tnode_sibbling(name: string): BaseCopNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseCopNodeType | null;\n\t}\n\n\tset_texture(texture: Texture) {\n\t\t// this._copy_texture(texture);\n\t\ttexture.name = this.full_path();\n\t\tthis.set_container(texture);\n\t}\n\tclear_texture() {\n\t\tthis.set_container(EMPTY_DATA_TEXTURE);\n\t}\n\n\t// private _copy_texture(texture: Texture) {\n\t// \tconsole.log('_copy_texture', texture);\n\t// \tif (texture instanceof DataTexture) {\n\t// \t\tthis._data_texture.image = texture.image;\n\t// \t} else {\n\t// \t\tconst canvas = document.createElement('canvas');\n\t// \t\t// document.body.appendChild(canvas);\n\t// \t\tconst width = texture.image.width;\n\t// \t\tconst height = texture.image.height;\n\t// \t\tcanvas.width = width;\n\t// \t\tcanvas.height = height;\n\t// \t\tconst context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\t// \t\tcontext.drawImage(texture.image, 0, 0);\n\t// \t\tconst image_data = context.getImageData(0, 0, width, height);\n\t// \t\tconsole.log(this._typed_array.length, image_data.data.length, image_data);\n\t// \t\tthis._data_texture.image = image_data;\n\t// \t}\n\t// \tthis._data_texture.format = texture.format;\n\t// \t// this._data_texture.mapping = texture.mapping;\n\t// \t// this._data_texture.wrapS = texture.wrapS;\n\t// \t// this._data_texture.wrapT = texture.wrapT;\n\t// \t// this._data_texture.minFilter = texture.minFilter;\n\t// \t// this._data_texture.magFilter = texture.magFilter;\n\t// \tthis._data_texture.needsUpdate = true;\n\t// \tconsole.log('updated data tex', this._data_texture);\n\n\t// \t// if (!this._texture || this._texture.uuid != texture.uuid) {\n\t// \t// \tif (!this._texture) {\n\t// \t// \t\tconsole.log('assign');\n\t// \t// \t\tthis._texture = texture.clone();\n\t// \t// \t\t// this._texture.name = this.full_path();\n\t// \t// \t} else {\n\t// \t// \t\tconsole.log('copy');\n\t// \t// \t\tconst keys = Object.keys(texture) as Array<keyof Texture>;\n\t// \t// \t\tconst protected_keys = ['uuid', 'name', 'node'];\n\t// \t// \t\tfor (let key of keys) {\n\t// \t// \t\t\tif (!protected_keys.includes(key)) {\n\t// \t// \t\t\t\tthis._texture[key] = texture[key] as never; // but why is 'never' needed?!\n\t// \t// \t\t\t}\n\t// \t// \t\t}\n\t// \t// \t}\n\t// \t// }\n\t// }\n}\n\nexport type BaseCopNodeType = TypedCopNode<any>;\nexport class BaseCopNodeClass extends TypedCopNode<any> {}\n","import lodash_merge from 'lodash/merge';\nimport lodash_intersection from 'lodash/intersection';\nimport lodash_difference from 'lodash/difference';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseNodeType, TypedNode} from '../../_Base';\n\nimport {BaseGlShaderAssembler} from './assemblers/_Base';\nimport {GlobalsBaseController} from './globals/_Base';\nimport {GlobalsGeometryHandler} from './globals/Geometry';\n\nimport {JsonExportDispatcher} from '../../../io/json/export/Dispatcher';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {OutputGlNode} from '../Output';\nimport {GlobalsGlNode} from '../Globals';\n// import {BaseParamType} from '../../../params/_Base';\nimport {ParamJsonExporterData} from '../../../io/json/export/Param';\nimport {GlNodeChildrenMap} from '../../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n\n// interface BaseShaderAssemblerConstructor {\n// \tnew (): BaseGlShaderAssembler;\n// }\n// interface GlobalsBaseControllerConstructor {\n// \tnew (): GlobalsBaseController;\n// }\n\n// export function AssemblerOwner<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\tchildren_context() {\n// \t\t\treturn NodeContext.GL;\n// \t\t}\n\nexport class AssemblerControllerNode extends TypedNode<any, BaseNodeType, any> {\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tassembler_controller!: GlAssemblerController<BaseGlShaderAssembler>;\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n}\n\ntype BaseGlShaderAssemblerConstructor<A extends BaseGlShaderAssembler> = new (...args: any[]) => A;\nexport class GlAssemblerController<A extends BaseGlShaderAssembler> {\n\tprotected _assembler!: A;\n\tprivate _globals_handler: GlobalsBaseController | undefined = new GlobalsGeometryHandler();\n\tprivate _compile_required: boolean = true;\n\t// private _requester: BaseNodeSop;\n\t// private _recompiled: boolean = false;\n\t// private _shaders_by_name: Map<ShaderName, string> = new Map();\n\n\tprivate _deleted_params_data: Map<string, ParamJsonExporterData<ParamType>> = new Map();\n\t// private _new_params: BaseParamType[] = [];\n\n\tconstructor(private node: AssemblerControllerNode, assembler_class: BaseGlShaderAssemblerConstructor<A>) {\n\t\t// if (assembler_class) {\n\t\tthis._assembler = new assembler_class(this.node);\n\t\t// }\n\t\t// this._shadow_depth_assembler = new ShaderAssemblerDepth()\n\t\t// this._shadow_distance_assembler = new ShaderAssemblerDistance()\n\n\t\t// this.self._init_hierarchy_children_owner();\n\n\t\t// let has_display_flag = false;\n\t\t// if (options['has_display_flag']) {\n\t\t// \thas_display_flag = options['has_display_flag'];\n\t\t// }\n\n\t\t// this.self._init_display_flag({\n\t\t// \thas_display_flag: has_display_flag,\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\n\t\t// this ensures that material re evaluate their uniforms\n\t\t// without having the SOP/Material recook\n\t\t// which can be a killer in an animation\n\t\t// But this should be tweaked so that it can recook all params of a node\n\t\t// this.self.add_post_dirty_hook(this.eval_params_and_assign_uniform_values.bind(this))\n\t\t// - UPDATE: this seems to work at the moment. The only issue is that\n\t\t// the particle system now updates 2x when recreating the shaders\n\t\t// but that's fixed with update_on_dirty\n\t\t// - UPDATE 2: now that the params have been refactored, let's try without this\n\t\t// if (options['update_on_dirty'] != false) {\n\t\t// \tthis.self.add_post_dirty_hook(this.cook_main_if_scene_loaded.bind(this));\n\t\t// }\n\t}\n\tset_assembler_globals_handler(globals_handler: GlobalsBaseController) {\n\t\tconst current_id = this._globals_handler ? this._globals_handler.id() : null;\n\t\tconst new_id = globals_handler ? globals_handler.id() : null;\n\n\t\tif (current_id != new_id) {\n\t\t\tthis._globals_handler = globals_handler;\n\t\t\tthis.set_compilation_required_and_dirty();\n\t\t\tthis._assembler.reset_configs();\n\t\t}\n\t}\n\tget assembler() {\n\t\treturn this._assembler;\n\t}\n\t// get shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\tget globals_handler() {\n\t\treturn this._globals_handler;\n\t}\n\n\t// gltf_supported_material() {\n\t// \treturn this._assembler.constructor.convert_material_to_gltf_supported(this._material);\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tthis._assembler.add_output_params(output_child);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tthis._assembler.add_globals_params(globals_node);\n\t}\n\tallow_attribute_exports() {\n\t\treturn this._assembler.allow_attribute_exports();\n\t}\n\n\ton_create() {\n\t\tconst globals = this.node.create_node('globals');\n\t\tconst output = this.node.create_node('output');\n\n\t\tglobals.ui_data.set_position(new Vector2(-200, 0));\n\t\toutput.ui_data.set_position(new Vector2(200, 0));\n\t}\n\n\t// async compile_if_required() {\n\t// \t// this._recompiled = false;\n\t// \tif (this.compile_required()) {\n\t// \t\t// && !this._param_locked){\n\t// \t\tconst new_material = await this.run_assembler();\n\t// \t\tif (new_material) {\n\t// \t\t\tawait this.node.params.eval_params(this._new_params);\n\t// \t\t\tthis._material = new_material;\n\t// \t\t\t// this._recompiled = true;\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`${this.node.full_path()} failed to generate a material`);\n\t// \t\t}\n\t// \t}\n\t// \tawait this.assign_uniform_values();\n\t// }\n\tset_compilation_required(new_state = true) {\n\t\tthis._compile_required = new_state;\n\t}\n\tset_compilation_required_and_dirty(trigger_node?: BaseGlNodeType) {\n\t\tthis.set_compilation_required();\n\t\tthis.node.set_dirty(trigger_node);\n\t}\n\tcompile_required(): boolean {\n\t\treturn this._compile_required;\n\t}\n\n\t// set_root_nodes(nodes: BaseGlNodeType[]) {\n\t// \tthis.assembler.set_root_nodes(nodes);\n\t// }\n\t// set_node_lines_globals(globals_node: GlobalsGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_globals(globals_node, shader_name);\n\t// }\n\t// set_node_lines_output(output_node: OutputGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_output(output_node, shader_name);\n\t// }\n\t// set_node_lines_attribute(attribute_node: AttributeGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_attribute(attribute_node, shader_name);\n\t// }\n\n\tasync post_compile() {\n\t\t// if (!this.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\t// this.assembler.compile_for_node(this._gl);\n\t\tthis.create_spare_parameters();\n\t\tthis.set_compilation_required(false);\n\t}\n\n\t// private async run_assembler() {\n\t// \tconst output_node = this.find_output_node();\n\t// \tif (output_node) {\n\t// \t\tthis._assembler.set_root_nodes([output_node]);\n\t// \t}\n\t// \tthis.assembler.compile();\n\t// \tconst material = await this._assembler.get_material();\n\t// \tif (material) {\n\t// \t\tthis._shaders_by_name.set(ShaderName.VERTEX, material.vertexShader);\n\t// \t\tthis._shaders_by_name.set(ShaderName.FRAGMENT, material.fragmentShader);\n\n\t// \t\t// assign custom materials\n\t// \t\tconst custom_materials = await this._assembler.get_custom_materials();\n\t// \t\tconst material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t// \t\tmaterial_with_custom_materials.custom_materials = {};\n\t// \t\tcustom_materials.forEach((custom_material, shader_name) => {\n\t// \t\t\tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t// \t\t});\n\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tthis._compile_required = false;\n\t// \treturn material;\n\t// }\n\n\t// find_output_node() {\n\t// \tconst nodes = this.node.nodes_by_type('output');\n\t// \tif (nodes.length > 1) {\n\t// \t\tthis.node.states.error.set('only one output node allowed');\n\t// \t}\n\t// \treturn nodes[0];\n\t// }\n\t// find_attribute_export_nodes() {\n\t// \tconst nodes = this.node.nodes_by_type('attribute');\n\t// \treturn nodes.filter((node) => {\n\t// \t\t// do not use attributes that are used as an input, as export\n\t// \t\t// return (node.used_output_names().length == 0) &&\n\t// \t\treturn node.is_exporting;\n\t// \t});\n\t// }\n\t// add_output_body_line(output_node, shader_name: ShaderName, input_name: string){\n\t// \tconst input = output_node.named_input(input_name)\n\t// \tconst var_input = output_node.variable_for_input(input_name)\n\t// \tconst variable_config = this.variable_config(input_name)\n\t// \tconst default_value = variable_config.default()\n\t// \tconst prefix = variable_config.prefix()\n\t// \tconst suffix = variable_config.suffix()\n\t// \tconst new_var = input ? ThreeToGl.vector3(var_input) : default_value\n\t// \tif(new_var){\n\t// \t\toutput_node.add_body_lines([`${prefix}${new_var}${suffix}`], shader_name)\n\t// \t}\n\t// }\n\t// set_output_node_lines(output_node){\n\t// \tfor(let shader_name of this.shader_names()){\n\t// \t\tconst body_lines = []\n\t// \t\tconst input_names = this.shader_config(shader_name).input_names()\n\t// \t\toutput_node.set_body_lines([], shader_name)\n\t// \t\tif(input_names){\n\t// \t\t\tfor(let input_name of input_names){\n\t// \t\t\t\tthis.add_output_body_line(output_node, shader_name, input_name)\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t// const vertex_body_lines = []\n\t// \t// const fragment_body_lines = []\n\n\t// \t// const named_input_position = this.named_input('position')\n\t// \t// const named_input_point_size = this.named_input('gl_PointSize')\n\t// \t// const named_input_normal = this.named_input('normal')\n\n\t// \t// const var_position = this.variable_for_input('position')\n\t// \t// const var_normal = this.variable_for_input('normal')\n\t// \t// const color = this.variable_for_input('color')\n\t// \t// const alpha = this.variable_for_input('alpha')\n\t// \t// const var_point_size = this.variable_for_input('gl_PointSize')\n\n\t// \t// fragment_body_lines.push( `${this._color_declaration} = ${ThreeToGl.vector3_float(color, alpha)}` )\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \t// const new_position_var = named_input_position ? ThreeToGl.vector3(var_position) : 'vec3( position )'\n\t// \t// vertex_body_lines.push( `vec3 transformed = ${new_position_var}` )\n\n\t// \t// if(this.parent().is_point_material()){\n\t// \t// \tconst new_point_size_var = named_input_point_size ? ThreeToGl.float(var_point_size) : '1.0'\n\t// \t// \tvertex_body_lines.push( `float size2 = size * ${new_point_size_var}` )\n\t// \t// }\n\n\t// \t// if(named_input_normal){\n\t// \t// \tconst new_normal_var = ThreeToGl.vector3(var_normal)\n\t// \t// \tvertex_body_lines.push(`objectNormal = ${new_normal_var}`)\n\t// \t// }\n\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\t// }\n\t// private async eval_params_and_assign_uniform_values() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tif (this._assembler) {\n\t// \t\tawait this.self.eval_all_params();\n\t// \t\tawait this.assign_uniform_values();\n\t// \t}\n\t// }\n\t// private async cook_main_if_scene_loaded() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (this.self.params_referree().length > 0) {\n\t// \t\tawait this.self.cook_main();\n\t// \t}\n\t// \t// this.cook_main_without_inputs()\n\t// }\n\tasync assign_uniform_values() {\n\t\tif (this._assembler) {\n\t\t\tfor (let param_config of this._assembler.param_configs()) {\n\t\t\t\tawait param_config.set_uniform_value(this.node);\n\t\t\t}\n\t\t}\n\t}\n\n\t// process_uniforms(renderer, display_scene, camera, geometry, material, group) {\n\t// \tconst scene_frame = this.scene().frame()\n\n\t// \tconst material_frame = material.uniforms.frame\n\t// \tif(material_frame){ // check needed in case this method is given a post process material\n\t// \t\tmaterial.uniforms.frame.value = scene_frame\n\t// \t}\n\n\t// \tconst custom_materials = material.custom_materials\n\t// \tif(custom_materials){\n\t// \t\tfor(let custom_material_name of Object.keys(custom_materials)){\n\t// \t\t\tconst custom_material = custom_materials[custom_material_name]\n\t// \t\t\tcustom_material.uniforms.frame.value = scene_frame\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// create_material(){\n\t// \tconst template_shader = THREE.ShaderLib.basic\n\n\t// \tconst uniforms = THREE.UniformsUtils.clone( template_shader.uniforms )\n\t// \t// uniforms['frame'] = {\n\t// \t// \ttype: '1f',\n\t// \t// \tvalue: 1\n\t// \t// }\n\n\t// \tconst material = new THREE.ShaderMaterial({\n\t// \t\t// vertexColors: THREE.VertexColors,\n\t// \t\t// side: THREE.FrontSide,\n\t// \t\t// transparent: true,\n\t// \t\t// fog: true,\n\t// \t\t// lights: false,\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: template_shader.vertexShader,\n\t// \t\tfragmentShader: template_shader.fragmentShader\n\t// \t})\n\t// \tthrow \"wtf\"\n\t// \treturn material\n\t// }\n\tcreate_spare_parameters() {\n\t\tconst current_spare_param_names: string[] = this.node.params.spare_names;\n\t\tconst param_configs = this._assembler.param_configs();\n\t\tconst assembler_param_names = param_configs.map((c) => c.name);\n\t\t// TODO: also remove the params that change type\n\t\tconst spare_param_names_to_add = lodash_difference(assembler_param_names, current_spare_param_names);\n\t\tconst spare_param_names_to_remove = lodash_difference(current_spare_param_names, assembler_param_names);\n\t\t// this._new_params = [];\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\t// check that param_names_to_add does not include any currently existing param names (that are not spare)\n\t\tconst current_param_names = this.node.params.names;\n\t\tconst spare_params_with_same_name_as_params = lodash_intersection(\n\t\t\tspare_param_names_to_add,\n\t\t\tcurrent_param_names\n\t\t);\n\t\tif (spare_params_with_same_name_as_params.length > 0) {\n\t\t\tconst error_message = `${this.node.full_path()} attempts to create spare params called '${spare_params_with_same_name_as_params.join(\n\t\t\t\t', '\n\t\t\t)}' with same name as params`;\n\t\t\tconsole.warn(error_message);\n\t\t\tthis.node.states.error.set(error_message);\n\t\t}\n\n\t\tspare_param_names_to_remove.forEach((param_name) => {\n\t\t\t// store the param data, in case it gets recreated later\n\t\t\t// this allows expressions to be kept in memory\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param);\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tthis._deleted_params_data.set(param.name, params_data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t});\n\n\t\t// this.within_param_folder('spare_params', () => {\n\t\tfor (let param_config of param_configs) {\n\t\t\tif (spare_param_names_to_add.indexOf(param_config.name) >= 0) {\n\t\t\t\t// TODO: shouldn't it be cook: false ??\n\t\t\t\t// as there is no need to cook the node if I'm only changing the uniform\n\t\t\t\t// unless maybe for textures?\n\t\t\t\t// but if cook is false, there is no reason for it to be updated\n\t\t\t\tconst options = lodash_merge(param_config.param_options, {spare: true, cook: true});\n\n\t\t\t\t// const param = this.node.add_param(\n\t\t\t\t// \tparam_config.type,\n\t\t\t\t// \tparam_config.name,\n\t\t\t\t// \tparam_config.default_value,\n\t\t\t\t// \toptions\n\t\t\t\t// );\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_config.name,\n\t\t\t\t\ttype: param_config.type,\n\t\t\t\t\tinit_value: param_config.default_value as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (param) {\n\t\t\t\t// \t// restore saved state, like expressions\n\t\t\t\t// \tconst param_data = this._deleted_params_data.get(param.name);\n\t\t\t\t// \tif (param_data) {\n\t\t\t\t// \t\t// TODO: typescript\n\t\t\t\t// \t\t// JsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t// looks like there are still some cases where the expression are not recreated\n\t\t\t\t// \t\t// so commenting this out now\n\t\t\t\t// \t\t// delete this._deleted_params_data[param.name()]\n\t\t\t\t// \t}\n\n\t\t\t\t// \tthis._new_params.push(param);\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tthis.node.params.update_params(params_update_options);\n\t\t// if (spare_param_names_to_add.length > 0 || spare_param_names_to_remove.length > 0) {\n\t\t// \tthis.node.params.post_create_spare_params();\n\t\t// \tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t// }\n\t}\n}\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\n// import {Definition} from '../../Definition/_Module';\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig';\n// import {BaseGlNodeType} from '../../_Base';\nimport {VaryingGLDefinition, AttributeGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\n// import {TypeAssert} from '../../../../poly/Assert';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nconst VARIABLE_CONFIG_DEFAULT_BY_NAME: Dictionary<string> = {\n\tposition: 'vec3( position )',\n};\n\nexport class GlobalsGeometryHandler extends GlobalsBaseController {\n\tstatic PRE_DEFINED_ATTRIBUTES = [\n\t\t'position',\n\t\t'color',\n\t\t'normal',\n\t\t'uv',\n\t\t'uv2',\n\t\t'morphTarget0',\n\t\t'morphTarget1',\n\t\t'morphTarget2',\n\t\t'morphTarget3',\n\t\t'skinIndex',\n\t\t'skinWeight',\n\t];\n\n\tstatic IF_RULE = {\n\t\tuv:\n\t\t\t'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',\n\t};\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (!connection_point) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst gl_type = connection_point.type;\n\t\tconst definition = new VaryingGLDefinition(globals_node, gl_type, var_name);\n\n\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, definition);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\t\t// definitions_by_shader_name.get(shader_name)!.push(definition);\n\t\tconst assembler = globals_node.material_node?.assembler_controller.assembler;\n\t\tif (!assembler) {\n\t\t\treturn;\n\t\t}\n\t\tconst shader_config = assembler.shader_config(shaders_collection_controller.current_shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst body_line = `${var_name} = ${gl_type}(${output_name})`;\n\t\tfor (let dependency of dependencies) {\n\t\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t// MapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\tshaders_collection_controller.add_definitions(globals_node, [definition], dependency);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line], dependency);\n\t\t}\n\t\tif (dependencies.length == 0) {\n\t\t\t// body_lines.push(body_line);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n\n\tstatic variable_config_default(variable_name: string): string | undefined {\n\t\treturn VARIABLE_CONFIG_DEFAULT_BY_NAME[variable_name];\n\t}\n\tvariable_config_default(variable_name: string): string | undefined {\n\t\treturn GlobalsGeometryHandler.variable_config_default(variable_name);\n\t}\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \treturn null\n\t// }\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n\n\tstatic read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined {\n\t\tif (GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attrib_name) < 0) {\n\t\t\tshaders_collection_controller.add_definitions(\n\t\t\t\tnode,\n\t\t\t\t[new AttributeGLDefinition(node, gl_type, attrib_name)],\n\t\t\t\tShaderName.VERTEX\n\t\t\t);\n\t\t} else {\n\t\t\t// const if_rule = GlobalsGeometryHandler.IF_RULE[attrib_name]\n\t\t\t// if(if_rule){\n\t\t\t// \tconst definition = new Definition.Attribute(node, gl_type, attrib_name)\n\t\t\t// \tdefinition.set_if_rule(if_rule)\n\t\t\t// \tnode.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\n\t\t// if (!shader_name) {\n\t\t// \tthrow 'no shader name';\n\t\t// }\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX: {\n\t\t\t\treturn attrib_name;\n\t\t\t}\n\t\t\tcase ShaderName.FRAGMENT: {\n\t\t\t\t// let's assume it can only be an attribute gl node\n\t\t\t\tif (!(node instanceof AttributeGlNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst var_name = 'varying_' + node.gl_var_name(node.output_name);\n\t\t\t\tconst varying_definition = new VaryingGLDefinition(node, gl_type, var_name);\n\n\t\t\t\tconst definitions_by_shader_name: Map<ShaderName, VaryingGLDefinition[]> = new Map();\n\t\t\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tdefinitions_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\t// {\n\t\t\t\t// \t[ShaderName.VERTEX]: [],\n\t\t\t\t// \t[ShaderName.FRAGMENT]: [],\n\t\t\t\t// };\n\t\t\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t\t\t// body_lines_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tbody_lines_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, varying_definition);\n\n\t\t\t\tconst set_varying_body_line = `${var_name} = ${gl_type}(${attrib_name})`;\n\n\t\t\t\tconst shader_config = node.material_node?.assembler_controller.assembler.shader_config(shader_name);\n\t\t\t\tif (shader_config) {\n\t\t\t\t\tconst dependencies = shader_config.dependencies();\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, varying_definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, set_varying_body_line);\n\t\t\t\t\t}\n\t\t\t\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_definitions(node, definitions, shader_name);\n\t\t\t\t\t});\n\t\t\t\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(node, body_lines, shader_name);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn var_name;\n\t\t\t}\n\t\t}\n\t\t// TypeAssert.unreachable(shader_name);\n\n\t\t// const shader_name = node._shader_name // TODO: this is hack\n\t\t// const varying_definition = new Definition.Varying(node, gl_type, attrib_name)\n\t\t// const var_name = varying_definition.name()\n\t\t// definitions_by_shader_name[shader_name].push(varying_definition)\n\t\t// const shader_config = node.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\t\t// const body_line = `${var_name} = ${gl_type}(${attrib_name})`\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(varying_definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// // if(dependencies.length == 0){\n\t\t// \t// body_lines.push(body_line)\n\t\t// \tnode.add_body_lines([body_line])\n\t\t// // }\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tnode.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tnode.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// node.add_body_lines(body_lines)\n\t}\n\thandle_attribute_node(\n\t\tnode: AttributeGlNode,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n}\n","import {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\nimport {NodeConnection} from '../../utils/connections/NodeConnection';\n\ntype IONameFunction = (index: number) => string;\ntype ExpectedConnectionTypesFunction = () => ConnectionPointType[];\n\nexport class GlConnectionsController {\n\tprivate _input_name_function: IONameFunction = (index: number) => {\n\t\treturn `in${index}`;\n\t};\n\tprivate _output_name_function: IONameFunction = (index: number) => {\n\t\treturn index == 0 ? 'val' : `val${index}`;\n\t};\n\t// private _default_input_type: ConnectionPointType = ConnectionPointType.FLOAT;\n\tprivate _expected_input_types_function: ExpectedConnectionTypesFunction = () => {\n\t\tconst type = this.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t};\n\tprivate _expected_output_types_function: ExpectedConnectionTypesFunction = () => {\n\t\treturn [this._expected_input_types_function()[0]];\n\t};\n\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tset_input_name_function(func: IONameFunction) {\n\t\tthis._input_name_function = func;\n\t}\n\tset_output_name_function(func: IONameFunction) {\n\t\tthis._output_name_function = func;\n\t}\n\t// set_default_input_type(type: ConnectionPointType) {\n\t// \tthis._default_input_type = type;\n\t// }\n\tset_expected_input_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_input_types_function = func;\n\t}\n\tset_expected_output_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_output_types_function = func;\n\t}\n\n\toutput_name(index: number) {\n\t\treturn this._output_name_function(index);\n\t}\n\n\tprivate _update_signature_if_required_bound = this.update_signature_if_required.bind(this);\n\tprivate _initialized: boolean = false;\n\tinitialize_node() {\n\t\tif (this._initialized) {\n\t\t\tconsole.warn('already initialized', this.node);\n\t\t\treturn;\n\t\t}\n\t\tthis._initialized = true;\n\n\t\tthis.node.io.inputs.add_on_set_input_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.add_on_scene_load_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\tthis.node.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\n\tupdate_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.node.lifecycle.creation_completed || !this._connections_match_inputs()) {\n\t\t\tthis.update_connection_types();\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis.make_successors_update_signatures();\n\t\t}\n\t}\n\t// used when a node changes its signature, adn the output nodes need to adapt their own signatures\n\tprivate make_successors_update_signatures() {\n\t\tfor (let successor of this.node.graph_all_successors()) {\n\t\t\tconst gl_node = successor as BaseGlNodeType;\n\t\t\tif (gl_node.gl_connections_controller) {\n\t\t\t\tgl_node.gl_connections_controller.update_signature_if_required(this.node);\n\t\t\t}\n\t\t}\n\t\t// this.node.io.connections\n\t\t// \t.output_connections()\n\t\t// \t.map((c) => c.node_dest)\n\t\t// \t.forEach((o) => {\n\t\t// \t\to.set_dirty(this.node);\n\t\t// \t});\n\t}\n\n\tupdate_connection_types() {\n\t\tconst set_dirty = false;\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tconst named_input_connections = expected_input_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._input_name_function(i), type);\n\t\t});\n\t\tconst named_outputs = expected_output_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._output_name_function(i), type);\n\t\t});\n\n\t\tthis.node.io.inputs.set_named_input_connection_points(named_input_connections);\n\t\tthis.node.io.outputs.set_named_output_connection_points(named_outputs, set_dirty);\n\t\tthis.node.spare_params_controller.create_spare_parameters();\n\t}\n\n\tprotected _connections_match_inputs(): boolean {\n\t\tconst current_input_types = this.node.io.inputs.named_input_connection_points.map((c) => c.type);\n\t\tconst current_output_types = this.node.io.outputs.named_output_connection_points.map((c) => c.type);\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tif (expected_input_types.length != current_input_types.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expected_output_types.length != current_output_types.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < current_input_types.length; i++) {\n\t\t\tif (current_input_types[i] != expected_input_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < current_output_types.length; i++) {\n\t\t\tif (current_output_types[i] != expected_output_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// protected input_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\t// protected output_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\n\tfirst_input_connection_type(): ConnectionPointType | undefined {\n\t\tconst connections = this.node.io.connections.input_connections();\n\t\tif (connections) {\n\t\t\tconst first_connection = connections[0];\n\t\t\tif (first_connection) {\n\t\t\t\treturn this.connection_type_from_connection(first_connection);\n\t\t\t}\n\t\t}\n\t}\n\tconnection_type_from_connection(connection: NodeConnection): ConnectionPointType {\n\t\tconst node_src = connection.node_src;\n\t\tconst output_index = connection.output_index;\n\t\tconst node_src_output_connection = node_src.io.outputs.named_output_connection_points[output_index];\n\t\treturn node_src_output_connection.type;\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {\n\tUVMapping,\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tEquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping,\n\tSphericalReflectionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tMirroredRepeatWrapping,\n\tLinearFilter,\n\tNearestFilter,\n\tNearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter,\n\tLinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter,\n\t// UnsignedByteType,\n\t// ByteType,\n\t// ShortType,\n\t// UnsignedShortType,\n\t// IntType,\n\t// UnsignedIntType,\n\t// FloatType,\n\t// HalfFloatType,\n\t// UnsignedShort4444Type,\n\t// UnsignedShort5551Type,\n\t// UnsignedShort565Type,\n\t// UnsignedInt248Type,\n\t// AlphaFormat,\n\t// RGBFormat,\n\t// RGBAFormat,\n\t// LuminanceFormat,\n\t// LuminanceAlphaFormat,\n\t// RGBEFormat,\n\t// DepthFormat,\n\t// DepthStencilFormat,\n\t// LinearEncoding,\n\t// sRGBEncoding,\n\t// GammaEncoding,\n\t// RGBEEncoding,\n\t// LogLuvEncoding,\n\t// RGBM7Encoding,\n\t// RGBM16Encoding,\n\t// RGBDEncoding,\n\t// BasicDepthPacking,\n\t// RGBADepthPacking,\n} from 'three/src/constants';\nimport {Texture} from 'three/src/textures/Texture';\n// const THREE = {\n// \tTexture,\n// \tUVMapping,\n// \tVideoTexture,\n// \tCubeReflectionMapping,\n// \tCubeRefractionMapping,\n// \tEquirectangularReflectionMapping,\n// \tEquirectangularRefractionMapping,\n// \tSphericalReflectionMapping,\n// \tCubeUVReflectionMapping,\n// \tCubeUVRefractionMapping,\n// \tClampToEdgeWrapping,\n// \tRepeatWrapping,\n// \tMirroredRepeatWrapping,\n// \tLinearFilter,\n// \tNearestFilter,\n// \tNearestMipMapNearestFilter,\n// \tNearestMipMapLinearFilter,\n// \tLinearMipMapNearestFilter,\n// \tLinearMipMapLinearFilter,\n// \tUnsignedByteType,\n// \tByteType,\n// \tShortType,\n// \tUnsignedShortType,\n// \tIntType,\n// \tUnsignedIntType,\n// \tFloatType,\n// \tHalfFloatType,\n// \tUnsignedShort4444Type,\n// \tUnsignedShort5551Type,\n// \tUnsignedShort565Type,\n// \tUnsignedInt248Type,\n// \tAlphaFormat,\n// \tRGBFormat,\n// \tRGBAFormat,\n// \tLuminanceFormat,\n// \tLuminanceAlphaFormat,\n// \tRGBEFormat,\n// \tDepthFormat,\n// \tDepthStencilFormat,\n// \tLinearEncoding,\n// \tsRGBEncoding,\n// \tGammaEncoding,\n// \tRGBEEncoding,\n// \tLogLuvEncoding,\n// \tRGBM7Encoding,\n// \tRGBM16Encoding,\n// \tRGBDEncoding,\n// \tBasicDepthPacking,\n// \tRGBADepthPacking,\n// };\n// import lodash_last from 'lodash/last';\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\nimport {CoreTextureLoader} from '../../../core/loader/Texture';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\n// this used to be named file_in, but I can't recall the decision of not calling it simply 'file'\n// so renaming it back to file for now\n\nconst MAPPINGS = [\n\t{UVMapping},\n\t{CubeReflectionMapping},\n\t{CubeRefractionMapping},\n\t{EquirectangularReflectionMapping},\n\t{EquirectangularRefractionMapping},\n\t{SphericalReflectionMapping},\n\t{CubeUVReflectionMapping},\n\t{CubeUVRefractionMapping},\n];\n\nconst WRAPPINGS: Dictionary<number>[] = [{ClampToEdgeWrapping}, {RepeatWrapping}, {MirroredRepeatWrapping}];\n\nconst MAG_FILTERS: Dictionary<number>[] = [{LinearFilter}, {NearestFilter}];\nconst MIN_FILTERS: Dictionary<number>[] = [\n\t{NearestFilter},\n\t{NearestMipMapNearestFilter},\n\t{NearestMipMapLinearFilter},\n\t{LinearFilter},\n\t{LinearMipMapNearestFilter},\n\t{LinearMipMapLinearFilter},\n];\n\n// const TYPES = [\n// \t\"UnsignedByteType\",\n// \t\"ByteType\",\n// \t\"ShortType\",\n// \t\"UnsignedShortType\",\n// \t\"IntType\",\n// \t\"UnsignedIntType\",\n// \t\"FloatType\",\n// \t\"HalfFloatType\",\n// \t\"UnsignedShort4444Type\",\n// \t\"UnsignedShort5551Type\",\n// \t\"UnsignedShort565Type\",\n// \t\"UnsignedInt248Type\"\n// ];\n\n// const FORMATS = [\n// \t\"AlphaFormat\",\n// \t\"RGBFormat\",\n// \t\"RGBAFormat\",\n// \t\"LuminanceFormat\",\n// \t\"LuminanceAlphaFormat\",\n// \t\"RGBEFormat\",\n// \t\"DepthFormat\",\n// \t\"DepthStencilFormat\"\n// ];\n\n// const ENCODINGS = [\n// \t\"LinearEncoding\",\n// \t\"sRGBEncoding\",\n// \t\"GammaEncoding\",\n// \t\"RGBEEncoding\",\n// \t\"LogLuvEncoding\",\n// \t\"RGBM7Encoding\",\n// \t\"RGBM16Encoding\",\n// \t\"RGBDEncoding\",\n// \t\"BasicDepthPacking\",\n// \t\"RGBADepthPacking\"\n// ];\n\ninterface AttribMapping {\n\tmapping: string;\n\twrapS: string;\n\twrapT: string;\n\tminFilter: string;\n\tmagFilter: string;\n}\nconst ATTRIB_MAPPING_KEYS: Array<keyof AttribMapping> = ['mapping', 'wrapS', 'wrapT', 'minFilter', 'magFilter'];\nconst ATTRIB_MAPPING: AttribMapping = {\n\tmapping: 'mapping',\n\twrapS: 'wrap_s',\n\twrapT: 'wrap_t',\n\tminFilter: 'min_filter',\n\tmagFilter: 'mag_filter',\n\t// type: 'type',\n\t// encoding: 'encoding'\n\t// format: 'format',\n};\n\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass FileCopParamsConfig extends NodeParamsConfig {\n\t// video_time = ParamConfig.FLOAT(1);\n\turl = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t\tdesktop_browse: {file_type: 'texture'},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileCopNode.PARAM_CALLBACK_reload(node as FileCopNode, param);\n\t\t},\n\t});\n\tmapping = ParamConfig.INTEGER(UVMapping, {\n\t\tmenu: {\n\t\t\tentries: MAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_s = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_t = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmag_filter = ParamConfig.INTEGER(Object.values(MAG_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MAG_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmin_filter = ParamConfig.INTEGER(Object.values(MIN_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MIN_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new FileCopParamsConfig();\n\nexport class FileCopNode extends TypedCopNode<FileCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\t// @ParamF('video_time') _param_video_time: number;\n\t// @ParamS('url') _param_url: string;\n\tprivate _previous_param_url: string | undefined;\n\tprivate _video: HTMLVideoElement | undefined;\n\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\t// _param_video_time_param: BaseParam\n\tprivate _texture_loader: CoreTextureLoader | undefined;\n\n\tstatic readonly VIDEO_TIME_PARAM_NAME = 'video_time';\n\tstatic readonly DEFAULT_NODE_PATH = {\n\t\tUV: '/COP/file_uv',\n\t\tENV_MAP: '/COP/env_map',\n\t};\n\n\t// initialize_node() {\n\t// \t// this.io.inputs.set_count_to_zero();\n\t// }\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT, {\n\t// \t// \tdesktop_browse: {file_type: 'texture'},\n\t// \t// });\n\t// \t// this.add_param(ParamType.BUTTON, 'reload', null, {\n\t// \t// \tcallback: this._reload.bind(this),\n\t// \t// });\n\t// \t// this.add_param(ParamType.FLOAT, 'video_time', 0, {range: [0, 10]})\n\t// \t// this.add_param(ParamType.INTEGER, 'mapping', UVMapping as number, {\n\t// \t// \tmenu: {\n\t// \t// \t\tentries: MAPPINGS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// for (let wrap_name of ['wrap_s', 'wrap_t']) {\n\t// \t// \tconst wrap = Object.values(WRAPPINGS[0])[0] as number;\n\t// \t// \tthis.add_param(ParamType.INTEGER, wrap_name, wrap, {\n\t// \t// \t\tmenu: {\n\t// \t// \t\t\t// type: 'radio',\n\t// \t// \t\t\tentries: WRAPPINGS.map((m) => {\n\t// \t// \t\t\t\treturn {\n\t// \t// \t\t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t\t};\n\t// \t// \t\t\t}),\n\t// \t// \t\t},\n\t// \t// \t});\n\t// \t// }\n\t// \t// const mag_filter = Object.values(MAG_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'mag_filter', mag_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MAG_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// const min_filter: number = Object.values(MIN_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'min_filter', min_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MIN_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// TODO: to be added when I have some level of control\n\t// \t// for now, the type attribute overrides what piz_compressed.exr creates\n\t// \t// which in turns fucks up with the env_map\n\t// \t// advanced\n\t// \t// this.add_param(ParamType.TOGGLE, 'advanced', 0)\n\t// \t// this.add_param(ParamType.INTEGER, 'type', THREE[TYPES[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: TYPES.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'format', THREE[FORMATS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: FORMATS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'encoding', THREE[ENCODINGS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: ENCODINGS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// }\n\n\tasync cook() {\n\t\tif (this._is_static_image_url(this.pv.url)) {\n\t\t\tawait this.cook_for_image();\n\t\t} else {\n\t\t\tawait this.cook_for_video();\n\t\t}\n\t}\n\n\tprivate _is_static_image_url(url: string) {\n\t\treturn true;\n\t}\n\n\tprivate async cook_for_image() {\n\t\tconst texture = await this._load_texture(this.pv.url);\n\n\t\tif (texture) {\n\t\t\tthis._update_texture_params(texture);\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.clear_texture();\n\t\t}\n\t}\n\n\tprivate async cook_for_video() {\n\t\tif (this._param_url_changed()) {\n\t\t\tconst texture = await this._load_texture(this.pv.url);\n\t\t\t// if (texture) {\n\t\t\t// \tthis._texture = texture;\n\t\t\t// }\n\n\t\t\tif (texture) {\n\t\t\t\tthis._add_video_spare_params_if_required(texture);\n\t\t\t}\n\t\t\tthis._previous_param_url = this.pv.url;\n\n\t\t\tthis._set_video_current_time();\n\n\t\t\tif (texture) {\n\t\t\t\tthis._update_texture_params(texture);\n\t\t\t\tthis.set_texture(texture);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\t// this._set_video_current_time();\n\t\t\t// this._update_texture_params();\n\t\t\t// if (texture?.needsUpdate) {\n\t\t\t// \tthis.set_texture(texture);\n\t\t\t// } else {\n\t\t\t// \tthis.cook_controller.end_cook();\n\t\t\t// }\n\t\t}\n\t}\n\n\tresolved_url() {\n\t\treturn this.pv.url;\n\t}\n\n\tprivate _update_texture_params(texture: Texture) {\n\t\t// const keys = Object.keys(ATTRIB_MAPPING) as keyof AttribMapping\n\t\tfor (let texture_attrib of ATTRIB_MAPPING_KEYS) {\n\t\t\tconst param_name = ATTRIB_MAPPING[texture_attrib];\n\t\t\tconst param_value = this.params.float(param_name);\n\t\t\t// const texture_attrib = ATTRIB_MAPPING[attrib];\n\n\t\t\tif (param_value != null && texture) {\n\t\t\t\tif (texture[texture_attrib] != param_value) {\n\t\t\t\t\ttexture[texture_attrib] = param_value;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_reload(node: FileCopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\tthis._previous_param_url = undefined;\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_successors_dirty();\n\t\t// this.set_dirty()\n\t}\n\n\tprivate _set_video_current_time() {\n\t\tif (this._video) {\n\t\t\tif (this.params.has('video_time')) {\n\t\t\t\tthis._video.currentTime = this.params.float('video_time');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_video_spare_params_if_required(texture: Texture | VideoTexture | null) {\n\t\tif (texture) {\n\t\t\tconst is_video = texture.constructor == VideoTexture;\n\t\t\tif (is_video) {\n\t\t\t\tthis._video = texture.image;\n\t\t\t\tif (this._video) {\n\t\t\t\t\tif (!this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\t\t\t\tconst duration = this._video.duration;\n\n\t\t\t\t\t\tthis.add_param(ParamType.FLOAT, FileCopNode.VIDEO_TIME_PARAM_NAME, '$T', {\n\t\t\t\t\t\t\tspare: true,\n\t\t\t\t\t\t\tcook: true,\n\t\t\t\t\t\t\trange: [0, duration],\n\t\t\t\t\t\t\trange_locked: [true, true],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._remove_spare_params();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remove_spare_params();\n\t\t}\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tif (this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\tthis.params.update_params({names_to_delete: [FileCopNode.VIDEO_TIME_PARAM_NAME]});\n\t\t\t// this.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\n\tprivate _param_url_changed(): boolean {\n\t\treturn this._previous_param_url != this.pv.url;\n\t}\n\n\tprivate async _load_texture(url: string) {\n\t\tlet texture: Texture | VideoTexture | null = null;\n\t\tconst param = this.params.get('url');\n\t\tif (url && param) {\n\t\t\tthis._texture_loader = this._texture_loader || new CoreTextureLoader(this, param);\n\t\t\t// const ext = lodash_last(url.split('.')).toLowerCase()\n\t\t\ttry {\n\t\t\t\ttexture = await this._texture_loader.load_texture_from_url_or_op(url);\n\t\t\t} catch (e) {\n\t\t\t\t//console.log('FAIL');\n\t\t\t}\n\t\t\t// if(texture){\n\t\t\t// \tcallback(texture)\n\t\t\t// } else {\n\t\t\tif (!texture) {\n\t\t\t\tthis.states.error.set(`could not load texture '${url}'`);\n\t\t\t}\n\t\t\t// }).catch(error=>{\n\t\t\t// \tthis.self.set_error(`could not load texture ${url} (${error})`);\n\t\t\t// })\n\t\t} else {\n\t\t\tthis.states.error.set('not url given to Mat/Base._load_texture');\n\t\t}\n\t\treturn texture;\n\t}\n}\n","// import {Vector3} from 'three/src/math/Vector3';\n// import {Texture} from 'three/src/textures/Texture';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n// const THREE = {Color, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Raycaster, Texture, Vector3}\n// import lodash_isNaN from 'lodash/isNaN'\n// import lodash_sum from 'lodash/sum'\n// import {BaseParam} from '../../../../../../Engine/Param/_Base'\n// import {BaseNodePostProcess} from '../../../../../../Engine/Node/PostProcess/_Base'\nimport {BaseCameraObjNodeType} from '../../../_BaseCamera';\nimport {BaseMatNodeType} from '../../../../mat/_Base';\n// import {NodeContext} from '../../../../../poly/NodeContext';\n// import {ParamType} from '../../../../../poly/ParamType';\n// import {EffectComposer} from '../../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer'\n// import {RenderPass} from '../../../../../../../modules/three/examples/jsm/postprocessing/RenderPass'\n\n// import {File} from '../../../../../../Engine/Node/Cop/File'\n\n// import {ScreenQuad} from '../Camera/ScreenQuad'\nimport {NodeContext} from '../../../../../poly/NodeContext';\n\nimport {ParamConfig} from '../../../../utils/params/ParamsConfig';\nexport function CameraBackgroundParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tbackground = ParamConfig.FOLDER();\n\t\tuse_background = ParamConfig.BOOLEAN(0);\n\t\tuse_material = ParamConfig.BOOLEAN(0, {\n\t\t\tvisible_if: {use_background: true},\n\t\t});\n\t\tbackground_color = ParamConfig.COLOR([0, 0, 0], {\n\t\t\tvisible_if: {use_background: true, use_material: false},\n\t\t});\n\t\tbackground_material = ParamConfig.OPERATOR_PATH('', {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t\tnode_selection: {context: NodeContext.MAT},\n\t\t\tdependent_on_found_node: false,\n\t\t});\n\t\tbackground_ratio = ParamConfig.FLOAT(1, {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t});\n\t};\n}\n\nexport class BaseBackgroundController {\n\t// private _param_use_background: boolean;\n\t// private _param_use_material: boolean;\n\t// private _param_background_color: Color;\n\t// private _param_background_material: string;\n\t// private _param_background_ratio: number;\n\n\tprivate _screen_quad: Mesh | undefined;\n\tprivate _screen_quad_flat_material: MeshBasicMaterial | undefined;\n\n\tprotected _bg_raycaster = new Raycaster();\n\n\tconstructor(protected node: BaseCameraObjNodeType) {}\n\n\tget screen_quad() {\n\t\treturn (this._screen_quad = this._screen_quad || this._create_screen_quad()); // new ScreenQuad()\n\t}\n\tprivate _create_screen_quad() {\n\t\tconst size = 2; // better than 1 for color, as the edges can be visible if canvas ratio extreme\n\t\tconst segments = 1;\n\t\tconst geometry = new PlaneBufferGeometry(size, size, segments, segments);\n\t\tconst quad = new Mesh(geometry);\n\t\tthis.node.object.add(quad);\n\t\treturn quad;\n\t}\n\tscreen_quad_flat_material() {\n\t\treturn (this._screen_quad_flat_material = this._screen_quad_flat_material || new MeshBasicMaterial());\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('background', () => {\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_background', 0);\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_material', 0, {\n\t\t// \tvisible_if: {use_background: true},\n\t\t// });\n\t\t// this.node.add_param(ParamType.COLOR, 'background_color', [0, 0, 0], {\n\t\t// \tvisible_if: {use_background: true, use_material: false},\n\t\t// });\n\t\t// this.node.add_param(ParamType.OPERATOR_PATH, 'background_material', '', {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// \tnode_selection: {context: NodeContext.MAT},\n\t\t// \tdependent_on_found_node: false,\n\t\t// });\n\t\t// this.node.add_param(ParamType.FLOAT, 'background_ratio', 1, {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// });\n\t\t// });\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_color', 1 )\n\t\t// this.self.add_param( ParamType.COLOR, 'background_color', [0,0,0], {\n\t\t// \tvisible_if: {use_background_color: 1}\n\t\t// })\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_image', 0 )\n\t\t// this.self.add_param( ParamType.OPERATOR_PATH, 'background_image', File.DEFAULT_NODE_PATH.UV, {\n\t\t// \tvisible_if: {use_background_image: true},\n\t\t// \tnode_selection: {context: NodeContext.COP}\n\t\t// } )\n\t}\n\n\tget use_background(): boolean {\n\t\treturn this.node.params.boolean('use_background');\n\t}\n\tget use_background_material(): boolean {\n\t\treturn this.use_background && this.node.params.boolean('use_material');\n\t}\n\tget use_background_color(): boolean {\n\t\treturn this.use_background && !this.node.params.boolean('use_material');\n\t}\n\tget background_color(): Color | null {\n\t\tif (this.use_background_color) {\n\t\t\treturn this.node.params.color('background_color');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t// background_image_url(){\n\t// \tif(this._param_use_background_image){\n\t// \t\t// this.param('background_image').mark_as_referencing_asset(this._param_background_image)\n\t// \t\t// return this._param_background_image\n\t// \t\treturn this._background_image_url\n\t// \t}\n\t// }\n\t// background_texture(){\n\t// \tif(this._param_use_background_image){\n\t// \t\treturn this._background_texture\n\t// \t}\n\t// }\n\tprotected update_screen_quad() {}\n\tasync update() {\n\t\tif (this.use_background) {\n\t\t\tthis.update_screen_quad();\n\n\t\t\tawait this.update_background_color();\n\t\t\tif (this.use_background_material) {\n\t\t\t\tawait this.update_background_material();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._screen_quad) {\n\t\t\t\tthis.node.object.remove(this._screen_quad);\n\t\t\t}\n\t\t}\n\n\t\t// if(this._param_use_background_image){\n\t\t// \tconst bg_node = this.self.param('background_image').found_node();\n\t\t// \tif(bg_node){\n\t\t// \t\tconst container = await bg_node.request_container();\n\t\t// \t\tthis._background_texture = container.core_content()\n\t\t// \t\t// this._background_image_url = bg_node.resolved_url()\n\t\t// \t} else {\n\t\t// \t\tthis._background_texture = null\n\t\t// \t}\n\t\t// } else {\n\t\t// \tthis._background_texture = null\n\t\t// }\n\t}\n\tprivate async update_background_color() {\n\t\tconst material = this.screen_quad_flat_material();\n\t\tmaterial.color = this.node.pv.background_color;\n\t\tthis.screen_quad.material = material;\n\t}\n\n\tprivate async update_background_material() {\n\t\tconst bg_node = this.node.p.background_material.found_node() as BaseMatNodeType;\n\t\tif (bg_node) {\n\t\t\tawait bg_node.request_container();\n\t\t\tconst material = bg_node.material;\n\t\t\tthis.screen_quad.material = material;\n\t\t\t// this.screen_quad().material.uniforms.uTexture.value = texture\n\t\t} else {\n\t\t\tthis.node.states.error.set('bg node not found');\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {EventContainer} from '../../containers/Event';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nexport class TypedEventNode<K extends NodeParamsConfig> extends TypedNode<'EVENT', BaseEventNodeType, K> {\n\tcontainer_controller: TypedContainerController<EventContainer> = new TypedContainerController<EventContainer>(\n\t\tthis,\n\t\tEventContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.EVENT;\n\t}\n\n\tprivate _eval_all_params_on_dirty_bound = this._eval_all_params_on_dirty.bind(this);\n\tinitialize_base_node() {\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false\n\t\t// });\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.add_post_dirty_hook('_eval_all_params_on_dirty', this._eval_all_params_on_dirty_bound);\n\t}\n\tnode_sibbling(name: string): BaseEventNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseEventNodeType | null;\n\t}\n\n\t// ensures that event nodes are cooked when scene is loaded\n\t_eval_all_params_on_dirty() {\n\t\tthis.params.eval_all();\n\t}\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n}\n\nexport type BaseEventNodeType = TypedEventNode<any>;\nexport class BaseEventNodeClass extends TypedEventNode<any> {}\n","import lodash_sortBy from 'lodash/sortBy';\n// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {RGBFormat} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {CubicInterpolant} from 'three/src/math/interpolants/CubicInterpolant';\n// import {ClampToEdgeWrapping} from 'three/src/constants'\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {RampValue, RampPoint, RampValueJson, RampInterpolation} from './ramp/RampValue';\n\n// import {AsCodeRamp} from './concerns/visitors/Ramp';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\n\n// interface RampParamVisitor extends TypedParamVisitor {\n// \tvisit_ramp_param: (param: RampParam) => any;\n// }\n\nexport class RampParam extends TypedParam<ParamType.RAMP> {\n\tstatic type() {\n\t\treturn ParamType.RAMP;\n\t}\n\n\tprivate _ramp_interpolant: CubicInterpolant | undefined;\n\tprivate _ramp_texture: DataTexture | undefined;\n\n\tstatic DEFAULT_VALUE = new RampValue(RampInterpolation.LINEAR, [new RampPoint(0, 0), new RampPoint(1, 1)]);\n\tstatic DEFAULT_VALUE_JSON: RampValueJson = RampParam.DEFAULT_VALUE.to_json();\n\n\tget default_value_serialized() {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.default_value.to_json();\n\t\t} else {\n\t\t\treturn this.default_value;\n\t\t}\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.RAMP]) {\n\t\tif (raw_input instanceof RampValue) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\treturn RampValue.from_json(raw_input).to_json();\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\treturn this._raw_input.to_json();\n\t\t} else {\n\t\t\treturn RampValue.from_json(this._raw_input).to_json();\n\t\t}\n\t}\n\tget value_serialized() {\n\t\treturn this.value.to_json();\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.RAMP],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.RAMP]\n\t) {\n\t\tif (raw_input1 instanceof RampValue) {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input1.is_equal(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.is_equal_json(raw_input2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input2.is_equal_json(raw_input1);\n\t\t\t} else {\n\t\t\t\treturn RampValue.are_json_equal(raw_input1, raw_input2);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.RAMP], val2: ParamValuesTypeMap[ParamType.RAMP]) {\n\t\treturn val1.is_equal(val2);\n\t}\n\tprivate _reset_ramp_interpolant_and_texture_bound = this._reset_ramp_interpolant_and_texture.bind(this);\n\tinitialize_param() {\n\t\tthis.add_post_dirty_hook('_reset_ramp_interpolant_and_texture', this._reset_ramp_interpolant_and_texture_bound);\n\t}\n\t// accepts_visitor(visitor: RampParamVisitor) {\n\t// \treturn visitor.visit_ramp_param(this);\n\t// }\n\tget is_default(): boolean {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.value.is_equal(this.default_value);\n\t\t} else {\n\t\t\treturn this.value.is_equal_json(this.default_value);\n\t\t}\n\t}\n\tprotected process_raw_input() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t} else {\n\t\t\t\tthis._value.copy(this._raw_input);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = RampValue.from_json(this._raw_input);\n\t\t\t} else {\n\t\t\t\tthis._value.from_json(this._raw_input);\n\t\t\t}\n\t\t}\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\t// convert_value(v) {\n\t// \tlet is_json = false\n\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = JSON.parse(v)\n\t// \t\tis_json = true\n\t// \t}\n\n\t// \tif (!is_json) {\n\t// \t\tif (v.interpolation && v.points) {\n\t// \t\t\tif (lodash_isArray(v.points)) {\n\t// \t\t\t\tis_json = true\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (is_json) {\n\t// \t\tv = RampValue.from_json(v)\n\t// \t}\n\n\t// \treturn v\n\t// }\n\t// convert_default_value(v) {\n\t// \treturn this.convert_value(v)\n\t// }\n\n\thas_expression() {\n\t\treturn false;\n\t}\n\n\t_reset_ramp_interpolant_and_texture() {\n\t\tthis._ramp_interpolant = undefined;\n\t\tthis._ramp_texture = undefined;\n\t}\n\tramp_texture() {\n\t\treturn (this._ramp_texture = this._ramp_texture || this._create_ramp_texture());\n\t}\n\t_create_ramp_texture() {\n\t\tconst width = 1024;\n\t\tconst height = 1;\n\n\t\tconst size = width * height;\n\t\tconst data = new Uint8Array(3 * size);\n\n\t\tlet stride = 0;\n\t\tlet position = 0;\n\t\tlet value = 0;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tstride = i * 3;\n\t\t\tposition = i / width;\n\t\t\tvalue = this.value_at_position(position);\n\t\t\tdata[stride] = value * 255; // if I set 256, a value of 1 will become 0\n\t\t\t// data[ stride+1 ] = 1\n\t\t\t// data[ stride+2 ] = 2\n\t\t}\n\n\t\tconst texture = new DataTexture(data, width, height, RGBFormat);\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\tstatic create_interpolant(positions: Float32Array, values: Float32Array) {\n\t\tconst values_count = 1;\n\t\tconst interpolated_values = new Float32Array(values_count);\n\t\treturn new CubicInterpolant(positions, values, values_count, interpolated_values);\n\t}\n\tinterpolant() {\n\t\treturn (this._ramp_interpolant = this._ramp_interpolant || this._create_interpolant());\n\t}\n\t_create_interpolant() {\n\t\tconst points = this.value.points;\n\t\tconst sorted_points = lodash_sortBy(points, (point) => point.position);\n\t\tconst positions = new Float32Array(sorted_points.length);\n\t\tconst values = new Float32Array(sorted_points.length);\n\n\t\tlet i = 0;\n\t\tfor (let sorted_point of sorted_points) {\n\t\t\tpositions[i] = sorted_point.position;\n\t\t\tvalues[i] = sorted_point.value;\n\t\t\ti++;\n\t\t}\n\n\t\treturn RampParam.create_interpolant(positions, values);\n\t}\n\n\tvalue_at_position(position: number): number {\n\t\treturn (<unknown>this.interpolant().evaluate(position)[0]) as number;\n\t}\n}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nimport {ParamOptions} from '../../../params/utils/OptionsController';\n\ntype OverridenOptions = Dictionary<string>;\n\nexport type SimpleParamJsonExporterData<T extends ParamType> = ParamInitValueSerializedTypeMap[T];\n\nexport interface ComplexParamJsonExporterData<T extends ParamType> {\n\ttype?: T;\n\tdefault_value?: ParamInitValueSerializedTypeMap[T];\n\traw_input?: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n\toverriden_options?: OverridenOptions;\n\t// components?: ParamJsonExporterDataByName;\n\t// expression?: string;\n}\nexport type ParamJsonExporterData<T extends ParamType> =\n\t| SimpleParamJsonExporterData<T>\n\t| ComplexParamJsonExporterData<T>;\nexport type ParamJsonExporterDataByName = Dictionary<ParamJsonExporterData<ParamType>>;\n\nexport class ParamJsonExporter<T extends BaseParamType> {\n\t// protected _simple_data: SimpleParamJsonExporterData<ParamType>=0;\n\tprotected _complex_data: ComplexParamJsonExporterData<ParamType> = {};\n\tconstructor(protected _param: T) {}\n\n\tget required(): boolean {\n\t\tconst is_spare_and_not_component = this._param.options.is_spare && !this._param.parent_param;\n\n\t\t// we should not need to check if it has an expression anymore,\n\t\t// as it could have an expression AND be of default value\n\t\tconst value_changed = !this._param.is_default; //|| this._param.has_expression();\n\t\t// const referencing_asset = this._param.is_referencing_asset()\n\t\treturn is_spare_and_not_component || value_changed; // || referencing_asset\n\t}\n\n\tdata() {\n\t\tif (this._param.parent_param) {\n\t\t\tconsole.warn('no component should be saved');\n\t\t\tthrow 'no component should be saved';\n\t\t}\n\n\t\tif (this._require_data_complex()) {\n\t\t\treturn this._data_complex();\n\t\t} else {\n\t\t\treturn this._data_simple();\n\t\t}\n\t}\n\n\tprivate _data_simple() {\n\t\treturn this._param.raw_input_serialized;\n\t}\n\n\tprivate _data_complex() {\n\t\tthis._complex_data = {};\n\n\t\tif (this._param.options.is_spare && !this._param.parent_param) {\n\t\t\tthis._complex_data['type'] = this._param.type;\n\t\t\tthis._complex_data['default_value'] = this._param.default_value_serialized;\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t\tthis._complex_data['options'] = this._param.options.current;\n\t\t}\n\n\t\tif (!this._param.is_default) {\n\t\t\tthis.add_main();\n\t\t}\n\n\t\t// if(this._param.is_referencing_asset()){\n\t\t// \t// console.log(\"this._param.is_referencing_asset()\", this._param.is_referencing_asset())\n\t\t// \tthis._data['referenced_asset'] = this._param.referenced_asset()\n\t\t// }\n\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\tconst overridden_options: OverridenOptions = {};\n\t\t\tconst options_overridden = this._param.options.overridden_options;\n\t\t\tfor (let option_name of Object.keys(options_overridden)) {\n\t\t\t\tconst option_value = options_overridden[option_name as keyof ParamOptions];\n\t\t\t\toverridden_options[option_name] = JSON.stringify(option_value);\n\t\t\t}\n\t\t\tthis._complex_data['overriden_options'] = overridden_options;\n\t\t}\n\t\treturn this._complex_data;\n\t}\n\n\tprotected _require_data_complex() {\n\t\tif (this._param.options.is_spare) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// default_value(): ParamValueSerialized {\n\t// \treturn this._param.default_value_serialized;\n\t// }\n\n\t// cannot remember why this is useful, but it messes up\n\t// with gl nodes like the noise node, as the default value\n\t// gets saved as a string '[1,1]' instead of an array [1,1] (should be without quotes)\n\t// protected default_value(){\n\t// \tlet default_value = this._param.default_value()\n\t// \tif(lodash_isString(default_value)){\n\t// \t\tdefault_value = `'${default_value}'`\n\t// \t}\n\t// \tif (lodash_isArray(default_value)){\n\t// \t\tdefault_value = `[${default_value}]`\n\t// \t}\n\t// \treturn default_value\n\t// }\n\n\tprotected add_main() {}\n}\n","// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderChunk} from 'three/src/renderers/shaders/ShaderChunk';\n// import {Shader} from 'three/src/renderers/shaders/ShaderLib'\n// import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n// import {MeshPhysicalMaterial} from 'three/src/materials/MeshPhysicalMaterial';\n// import {Material} from 'three/src/materials/Material';\nimport {Vector2} from 'three/src/math/Vector2';\n\n// import {Connection} from '../../../../../Engine/Node/Gl/GlData';\nimport {LineType} from '../utils/LineType';\n// import {Output} from '../../../../../Engine/Node/Gl/Output'\n\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {VariableConfig} from '../configs/VariableConfig';\n// import {ThreeToGl} from '../../../../../core/ThreeToGl';\n// const BODY_SPLIT_LINE = 'void main() {'\n// export const BODY_SEPARATOR_LINES = lodash_range(3).map(i=>'\t')\nimport {CodeBuilder} from '../utils/CodeBuilder';\n// import {BaseNode} from '../../../../../Engine/Node/_Base';\nimport {BaseGlNodeType} from '../../_Base';\nimport {GlobalsGeometryHandler} from '../globals/Geometry';\nimport {TypedAssembler} from '../../../utils/shaders/BaseAssembler';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n// import {IUniformsWithFrame, IUniformsWithResolution} from '../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../Output';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\nimport {AssemblerControllerNode} from '../Controller';\nimport {GlobalsBaseController} from '../globals/_Base';\nimport {CustomMaterialName} from './materials/_BaseMaterial';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\nimport {IUniforms} from '../../../../../core/geometry/Material';\n\ntype StringArrayByShaderName = Map<ShaderName, string[]>;\n\ninterface ITemplateShader {\n\tvertexShader?: string;\n\tfragmentShader?: string;\n\tuniforms?: IUniforms;\n}\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <common>'],\n\t[ShaderName.FRAGMENT, '#include <common>'],\n]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <color_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( diffuse, opacity );'],\n]);\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', '#include <beginnormal_vertex>']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst SPACED_LINES = 3;\n\nexport class BaseGlShaderAssembler extends TypedAssembler<BaseGlNodeType> {\n\tprotected _shaders_by_name: Map<ShaderName, string> = new Map();\n\tprotected _lines: StringArrayByShaderName = new Map();\n\tprotected _code_builder: CodeBuilder | undefined;\n\tprivate _param_config_owner: CodeBuilder | undefined;\n\tprotected _root_nodes: BaseGlNodeType[] = [];\n\tprotected _leaf_nodes: BaseGlNodeType[] = [];\n\tprotected _material: ShaderMaterial | undefined;\n\n\tprivate _shader_configs: ShaderConfig[] | undefined;\n\tprivate _variable_configs: VariableConfig[] | undefined;\n\n\tprivate _uniforms_time_dependent: boolean = false;\n\tprivate _resolution_dependent: boolean = false;\n\n\tconstructor(protected _gl_parent_node: AssemblerControllerNode) {\n\t\tsuper();\n\t}\n\n\tasync compile() {}\n\n\t// private get material() {\n\t// \treturn (this._material = this._material || this._create_material());\n\t// }\n\t// async get_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tthis._material = this._material || this._create_material();\n\n\t// \tawait this._update_material(/*master_assembler*/);\n\t// \treturn this._material;\n\t// }\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName): string | undefined {\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX:\n\t\t\t\treturn this._template_shader?.vertexShader;\n\t\t\tcase ShaderName.FRAGMENT:\n\t\t\t\treturn this._template_shader?.fragmentShader;\n\t\t}\n\t}\n\n\tget globals_handler(): GlobalsBaseController | undefined {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler;\n\t}\n\tcompile_allowed(): boolean {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler != null;\n\t}\n\tshaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\n\t// protected create_material(): ShaderMaterial | undefined {\n\t// \treturn undefined;\n\t// }\n\tprotected _build_lines() {\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._replace_template(template, shader_name);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _build_lines_for_shader_name(shader_name: ShaderName){\n\t// \tconst template = this._template_shader()\n\t// \tthis._replace_template(template[`${shader_name}Shader`], shader_name)\n\t// }\n\n\tset_root_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tthis._root_nodes = root_nodes;\n\t}\n\tprotected get _template_shader(): ITemplateShader | undefined {\n\t\treturn undefined;\n\t} //Shader - could not find the import?\n\t// abstract _color_declaration(): string\n\t// private async _update_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tif (!this.material || !this._material) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst template_shader = this._template_shader;\n\t// \tif (!template_shader) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis._lines = new Map();\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t// \t\tif (template) {\n\t// \t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t// \t\t}\n\t// \t}\n\t// \tif (this._root_nodes.length > 0) {\n\t// \t\t// this._output_node.set_color_declaration(this._color_declaration())\n\t// \t\t// if(!master_assembler){\n\t// \t\t// this._output_node.set_assembler(this)\n\t// \t\tawait this.build_code_from_nodes(this._root_nodes);\n\t// \t\t// }\n\n\t// \t\t(this._material as any).extensions = {derivatives: true};\n\t// \t\t// this._material?.derivatives = true;\n\t// \t\tthis._build_lines();\n\t// \t\t// this._lines[ShaderName.FRAGMENT].unshift('#extension GL_OES_standard_derivatives : enable')\n\t// \t}\n\n\t// \t// TODO: typescript - not sure that is still useful\n\t// \t// for (let param_config of this.param_configs()) {\n\t// \t// \tparam_config.material = this._material;\n\t// \t// }\n\n\t// \t// instead of replacing fully the uniforms,\n\t// \t// I simply add to them the new ones or replace the existing ones\n\t// \t// otherwise this would break the particles_system_gpu\n\t// \t// which would not reset correctly when going back to first frame.\n\t// \t// Not entirely sure why, but this seems to be due to the texture uniforms\n\t// \t// which are removed and then readded. This seems to mess up somewhere with how\n\t// \t// the material updates itself...\n\t// \t// this._material.uniforms = this.build_uniforms(template_shader)\n\t// \tconst new_uniforms = this.build_uniforms(template_shader.uniforms);\n\t// \tthis.material.uniforms = this.material.uniforms || {};\n\t// \tfor (let uniform_name of Object.keys(new_uniforms)) {\n\t// \t\tthis.material.uniforms[uniform_name] = new_uniforms[uniform_name];\n\t// \t}\n\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst lines = this._lines.get(shader_name);\n\t// \t\tif (lines) {\n\t// \t\t\tconst shader = lines.join('\\n');\n\t// \t\t\tswitch (shader_name) {\n\t// \t\t\t\tcase ShaderName.VERTEX: {\n\t// \t\t\t\t\tthis._material.vertexShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t\tcase ShaderName.FRAGMENT: {\n\t// \t\t\t\t\tthis._material.fragmentShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tconst scene = this._gl_parent_node.scene;\n\t// \t// const id = this._gl_parent_node.graph_node_id()\n\t// \tif (this.frame_dependent()) {\n\t// \t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t// \t\t// as we need several materials:\n\t// \t\t// - the visible one\n\t// \t\t// - the multiple shadow ones\n\t// \t\t// - and possibly a depth one\n\t// \t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithFrame\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\n\t// \tif (this.resolution_dependent()) {\n\t// \t\tscene.uniforms_controller.add_resolution_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithResolution\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_resolution_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\t// }\n\n\tprotected add_uniforms(current_uniforms: IUniforms) {\n\t\t// const new_uniforms = UniformsUtils.clone(template_uniforms);\n\n\t\t// copy the new uniforms onto the old ones, only adding, not removing\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\n\t\t// }\n\n\t\t// copy the values of the old uniform\n\t\t// for (let uniform_name of Object.keys(old_uniforms)) {\n\t\t// \tconst new_uniform = new_uniforms[uniform_name];\n\t\t// \tif (new_uniform) {\n\t\t// \t\tnew_uniform.value = old_uniforms[uniform_name].value;\n\t\t// \t}\n\t\t// }\n\n\t\tfor (let param_config of this.param_configs()) {\n\t\t\tcurrent_uniforms[param_config.uniform_name] = param_config.uniform;\n\t\t}\n\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tcurrent_uniforms['time'] = {\n\t\t\t\t// type: '1f',\n\t\t\t\tvalue: this._gl_parent_node.scene.time,\n\t\t\t};\n\t\t}\n\t\tif (this.resolution_dependent()) {\n\t\t\tcurrent_uniforms['resolution'] = {\n\t\t\t\tvalue: new Vector2(1000, 1000),\n\t\t\t};\n\t\t}\n\n\t\t// return new_uniforms;\n\t}\n\n\t//\n\t//\n\t// ROOT NODES AND SHADER NAMES\n\t//\n\t//\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\t// const attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase GlobalsGlNode.type(): {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase AttributeGlNode.type(): {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\t// const attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tget code_builder() {\n\t\treturn (this._code_builder = this._code_builder || new CodeBuilder(this, this._gl_parent_node));\n\t}\n\tasync build_code_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tawait this.code_builder.build_from_nodes(root_nodes);\n\t}\n\tallow_new_param_configs() {\n\t\tthis.code_builder.allow_new_param_configs();\n\t}\n\tdisallow_new_param_configs() {\n\t\tthis.code_builder.disallow_new_param_configs();\n\t}\n\tbuilder_param_configs() {\n\t\treturn this.code_builder.param_configs();\n\t}\n\tbuilder_lines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this.code_builder.lines(shader_name, line_type);\n\t}\n\tall_builder_lines() {\n\t\treturn this.code_builder.all_lines();\n\t}\n\tparam_configs() {\n\t\tconst code_builder = this._param_config_owner || this.code_builder;\n\t\treturn code_builder.param_configs();\n\t}\n\tset_param_configs_owner(param_config_owner: CodeBuilder) {\n\t\tthis._param_config_owner = param_config_owner;\n\t\tif (this._param_config_owner) {\n\t\t\tthis.code_builder.disallow_new_param_configs();\n\t\t} else {\n\t\t\tthis.code_builder.allow_new_param_configs();\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tstatic add_output_params(output_child: OutputGlNode) {\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'position', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'normal', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR2, 'uv', [0, 0], {hidden: true});\n\t}\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t}\n\tstatic create_globals_node_output_connections() {\n\t\treturn [\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('normal', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('color', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('uv', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC4),\n\t\t\tnew TypedNamedConnectionPoint('resolution', ConnectionPointType.VEC2),\n\t\t\t// new Connection.Vec2('gl_PointCoord'),\n\t\t\t// new TypedConnectionVec2('uv'),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t];\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections();\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points(this.create_globals_node_output_connections());\n\t}\n\tallow_attribute_exports() {\n\t\treturn false;\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\treset_configs() {\n\t\tthis._reset_shader_configs();\n\t\tthis._reset_variable_configs();\n\t\tthis._reset_uniforms_time_dependency();\n\t\tthis._reset_resolution_dependency();\n\t}\n\tget shader_configs() {\n\t\treturn (this._shader_configs = this._shader_configs || this.create_shader_configs());\n\t}\n\tset_shader_configs(shader_configs: ShaderConfig[]) {\n\t\tthis._shader_configs = shader_configs;\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.shader_configs?.map((sc) => sc.name()) || [];\n\t}\n\tprotected _reset_shader_configs() {\n\t\tthis._shader_configs = undefined;\n\t\t// this.shader_configs; // TODO: typescript - why do I need to re-initialize here?\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tshader_config(name: string): ShaderConfig | undefined {\n\t\treturn this.shader_configs?.filter((sc) => {\n\t\t\treturn sc.name() == name;\n\t\t})[0];\n\t}\n\tvariable_configs() {\n\t\treturn (this._variable_configs = this._variable_configs || this.create_variable_configs());\n\t}\n\tset_variable_configs(variable_configs: VariableConfig[]) {\n\t\tthis._variable_configs = variable_configs;\n\t}\n\tvariable_config(name: string) {\n\t\treturn this.variable_configs().filter((vc) => {\n\t\t\treturn vc.name() == name;\n\t\t})[0];\n\t}\n\tstatic create_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('position', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t\t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t\t\tprefix: 'vec3 transformed = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('normal', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\tprefix: 'vec3 objectNormal = ',\n\t\t\t\t// post_lines: ['#ifdef USE_TANGENT', 'vec3 objectTangent = vec3( tangent.xyz );', '#endif'],\n\t\t\t}),\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('uv', {\n\t\t\t\t// default_from_attribute: true,\n\t\t\t\tprefix: 'vUv = ',\n\t\t\t\tif: GlobalsGeometryHandler.IF_RULE.uv,\n\t\t\t}),\n\t\t];\n\t}\n\tcreate_variable_configs(): VariableConfig[] {\n\t\treturn BaseGlShaderAssembler.create_variable_configs();\n\t}\n\tprotected _reset_variable_configs() {\n\t\tthis._variable_configs = undefined;\n\t\tthis.variable_configs();\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.shader_config(shader_name)?.input_names() || [];\n\t}\n\n\t// time dependency\n\tprotected _reset_uniforms_time_dependency() {\n\t\tthis._uniforms_time_dependent = false;\n\t}\n\tset_uniforms_time_dependent() {\n\t\tthis._uniforms_time_dependent = true;\n\t}\n\tuniforms_time_dependent(): boolean {\n\t\treturn this._uniforms_time_dependent;\n\t}\n\t// resolution dependency\n\tprotected _reset_resolution_dependency() {\n\t\tthis._resolution_dependent = false;\n\t}\n\tset_resolution_dependent() {\n\t\tthis._resolution_dependent = true;\n\t}\n\tresolution_dependent(): boolean {\n\t\treturn this._resolution_dependent;\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName): string[] | undefined {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\n\tprivate _replace_template(template: string, shader_name: ShaderName) {\n\t\tconst function_declaration = this.builder_lines(shader_name, LineType.FUNCTION_DECLARATION);\n\t\tconst define = this.builder_lines(shader_name, LineType.DEFINE);\n\t\t// let all_define = function_declaration.concat(define);\n\t\tconst body = this.builder_lines(shader_name, LineType.BODY);\n\n\t\tlet template_lines = template.split('\\n');\n\t\t// const scene = this._gl_parent_node.scene;\n\t\tconst new_lines = [\n\t\t\t// `#define FPS ${ThreeToGl.float(scene.time_controller.fps)}`,\n\t\t\t// `#define TIME_INCREMENT (1.0/${ThreeToGl.float(scene.time_controller.fps)})`,\n\t\t\t// `#define FRAME_RANGE_START ${ThreeToGl.float(scene.time_controller.frame_range[0])}`,\n\t\t\t// `#define FRAME_RANGE_END ${ThreeToGl.float(scene.time_controller.frame_range[1])}`,\n\t\t];\n\n\t\tconst line_before_define = this.insert_define_after(shader_name);\n\t\tconst line_before_body = this.insert_body_after(shader_name);\n\t\tconst lines_to_remove = this.lines_to_remove(shader_name);\n\t\tlet line_before_define_found = false;\n\t\tlet line_before_body_found = false;\n\n\t\tfor (let template_line of template_lines) {\n\t\t\tif (line_before_define_found == true) {\n\t\t\t\tif (function_declaration) {\n\t\t\t\t\tthis._insert_lines(new_lines, function_declaration);\n\t\t\t\t}\n\t\t\t\tif (define) {\n\t\t\t\t\tthis._insert_lines(new_lines, define);\n\t\t\t\t}\n\t\t\t\tline_before_define_found = false;\n\t\t\t}\n\t\t\tif (line_before_body_found == true) {\n\t\t\t\t// this._insert_default_body_declarations(new_lines, shader_name)\n\t\t\t\tif (body) {\n\t\t\t\t\tthis._insert_lines(new_lines, body);\n\t\t\t\t}\n\t\t\t\tline_before_body_found = false;\n\t\t\t}\n\n\t\t\tlet line_remove_required = false;\n\t\t\tif (lines_to_remove) {\n\t\t\t\tfor (let line_to_remove of lines_to_remove) {\n\t\t\t\t\tif (template_line.indexOf(line_to_remove) >= 0) {\n\t\t\t\t\t\tline_remove_required = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line_remove_required) {\n\t\t\t\tnew_lines.push(template_line);\n\t\t\t} else {\n\t\t\t\tnew_lines.push('// removed:');\n\t\t\t\tnew_lines.push(`//${template_line}`);\n\t\t\t}\n\n\t\t\tif (line_before_define && template_line.indexOf(line_before_define) >= 0) {\n\t\t\t\tline_before_define_found = true;\n\t\t\t}\n\t\t\tif (line_before_body && template_line.indexOf(line_before_body) >= 0) {\n\t\t\t\tline_before_body_found = true;\n\t\t\t}\n\n\t\t\t// if(template_line.indexOf('// INSERT DEFINE') >= 0){\n\t\t\t// } else {\n\t\t\t// \tif(template_line.indexOf('// INSERT BODY') >= 0){\n\t\t\t// \t\tif(body.length > 0){\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t\tbody.forEach(body_line=>{\n\t\t\t// \t\t\t\tnew_lines.push(body_line)\n\t\t\t// \t\t\t})\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\tif(template_line.indexOf('// TO REMOVE') < 0){\n\t\t\t// \t\t\tnew_lines.push(template_line)\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\tthis._lines.set(shader_name, new_lines);\n\t}\n\n\t// protected _insert_default_body_declarations(new_lines, shader_name){\n\t// \tnew_lines.push('float POLY_roughness = 1.0;')\n\t// }\n\n\tprivate _insert_lines(new_lines: string[], lines_to_add: string[]) {\n\t\tif (lines_to_add.length > 0) {\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\n\t\t\tfor (let line_to_add of lines_to_add) {\n\t\t\t\tnew_lines.push(line_to_add);\n\t\t\t}\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync get_custom_materials(): Promise<Map<CustomMaterialName, ShaderMaterial>> {\n\t\treturn new Map<CustomMaterialName, ShaderMaterial>();\n\t}\n\n\t// protected expand_shader(shader_string: string) {\n\t// \tfunction parseIncludes(string: string) {\n\t// \t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\t// \t\tfunction replace(match: string, include: string) {\n\t// \t\t\tvar replace = ShaderChunk[include];\n\n\t// \t\t\tif (replace === undefined) {\n\t// \t\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t// \t\t\t}\n\n\t// \t\t\treturn parseIncludes(replace);\n\t// \t\t}\n\n\t// \t\treturn string.replace(pattern, replace);\n\t// \t}\n\t// \treturn parseIncludes(shader_string);\n\t// }\n\n\t//\n\t//\n\t// GLTF EXPORT\n\t//\n\t//\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material{\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial\n\t// \tconst options = {}\n\t// \tthis._match_uniform('color', options, material, 'diffuse')\n\t// \tthis._match_uniform('map', options, material)\n\t// \tthis._match_uniform('envMap', options, material)\n\t// \tthis._match_uniform('envMapIntensity', options, material)\n\t// \tthis._match_uniform('metalness', options, material)\n\t// \tthis._match_uniform('roughness', options, material)\n\t// \tconst gltf_material = new gltf_constructor(options)\n\t// \treturn gltf_material\n\t// }\n\t// static _match_uniform(name: string, options: object, material: ShaderMaterial, uniform_name?: string) {\n\t// \tuniform_name = uniform_name || name;\n\t// \toptions[name] = material.uniforms[uniform_name].value;\n\t// }\n}\n","import {BaseMatNodeType} from '../_Base';\n\nexport class BaseController {\n\tconstructor(protected node: BaseMatNodeType) {}\n\tadd_params() {}\n\n\tupdate() {}\n\n\tget material() {\n\t\treturn this.node.material;\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {PolyScene} from '../../engine/scene/PolyScene';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\nexport interface MaterialWithUniforms extends Material {\n\tuniforms: IUniforms;\n}\n\nenum CustomMaterialName {\n\tcustomDistanceMaterial = 'customDistanceMaterial',\n\tcustomDepthMaterial = 'customDepthMaterial',\n\tcustomDepthDOFMaterial = 'customDepthDOFMaterial',\n}\nexport interface ObjectWithCustomMaterials extends Mesh {\n\t// customDistanceMaterial?: Material;\n\t// customDepthMaterial?: Material;\n\tcustomDepthDOFMaterial?: Material;\n}\nexport interface ShaderMaterialWithCustomMaterials extends ShaderMaterial {\n\tcustom_materials: {\n\t\t[key in CustomMaterialName]?: ShaderMaterial;\n\t};\n}\nexport interface MaterialWithSkinning extends Material {\n\tskinning: boolean;\n\tmorphTargets: boolean;\n}\n\nexport class CoreMaterial {\n\tstatic node(scene: PolyScene, material: Material) {\n\t\treturn scene.node(material.name);\n\t}\n\n\tstatic clone(src_material: Material | Material[]) {\n\t\tif (lodash_isArray(src_material)) {\n\t\t\treturn src_material.map((material) => {\n\t\t\t\treturn this.clone_single(material);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.clone_single(src_material);\n\t\t}\n\t}\n\n\tstatic clone_single(src_material: Material) {\n\t\tconst material = src_material.clone();\n\t\t// linewidth doesn't seem cloned correctly for ShaderMaterial\n\t\t(material as LineBasicMaterial).linewidth = (src_material as LineBasicMaterial).linewidth;\n\n\t\treturn material;\n\t}\n\n\tstatic apply_custom_materials(object: Object3D, material: Material) {\n\t\tconst material_with_custom = material as ShaderMaterialWithCustomMaterials;\n\t\tif (material_with_custom.custom_materials) {\n\t\t\tfor (let name of Object.keys(material_with_custom.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\t// http://blog.edankwan.com/post/three-js-advanced-tips-shadow\n\t\t\t\tconst custom_material = material_with_custom.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\t(object as ObjectWithCustomMaterials)[mat_name] = custom_material;\n\t\t\t\t\tcustom_material.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// object.material = material.custom_materials.customDepthDOFMaterial\n\t\t\t// object.material = material.custom_materials.customDepthMaterial\n\t\t\t// object.material = material.custom_materials.customDistanceMaterial\n\t\t}\n\t}\n\tstatic assign_custom_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name].value = uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic init_custom_material_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name] = custom_material.uniforms[uniform_name] || uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","import lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isBoolean from 'lodash/isBoolean';\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamEvent} from '../poly/ParamEvent';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\n// interface NumericParamVisitor extends TypedParamVisitor {\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\nexport abstract class TypedNumericParam<T extends ParamType> extends TypedParam<T> {\n\t// private _raw_input: ParamInitValuesTypeMap[T] | undefined;\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\t// accepts_visitor(visitor: NumericParamVisitor): any {\n\t// \treturn visitor.visit_numeric_param(this);\n\t// }\n\t// init_expression() {\n\t// \tif (this.is_value_expression(this._default_value)) {\n\t// \t\treturn this.set_expression(this._default_value)\n\t// \t}\n\t// }\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (lodash_isArray(raw_input)) {\n\t\t\treturn raw_input[0] as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input;\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tconst converted = this.convert(this._raw_input);\n\t\tif (converted != null) {\n\t\t\tif (this._expression_controller) {\n\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t}\n\t\t\tif (converted != this._value) {\n\t\t\t\tthis._update_value(converted);\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (lodash_isString(this._raw_input)) {\n\t\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`param input is invalid (${this.full_path()})`);\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(\n\t\t\t\t\t`expression error: \"${this.expression_controller.expression}\" (${this.expression_controller.error_message})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tif (this.states.error.active) {\n\t\t\t\t\t\tthis.states.error.clear();\n\t\t\t\t\t}\n\t\t\t\t\tthis._update_value(converted);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`expression returns an invalid type (${expression_result}) (${this.expression_controller.expression})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate _update_value(new_value: ParamValuesTypeMap[T]) {\n\t\tthis._value = new_value;\n\t\tif (this.parent_param) {\n\t\t\tthis.parent_param.set_value_from_components();\n\t\t}\n\t\tthis.options.execute_callback();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\tthis.remove_dirty_state();\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\nimport {TypedParam} from './_Base';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport abstract class TypedMultipleParam<T extends ParamType> extends TypedParam<T> {\n\tprivate _components_contructor = FloatParam;\n\tprotected _components!: FloatParam[];\n\tget components() {\n\t\treturn this._components;\n\t}\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default() {\n\t\tfor (let c of this.components) {\n\t\t\tif (!c.is_default) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._components.map((c) => c.raw_input) as ParamInitValueSerializedTypeMap[T];\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\n\tinit_components() {\n\t\tif (this._components != null) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = 0;\n\t\tthis._components = new Array(this.component_names.length);\n\t\tfor (let component_name of this.component_names) {\n\t\t\tconst component = new this._components_contructor(this.scene); //, `${this.name}${name}`);\n\t\t\tlet default_val;\n\t\t\tif (lodash_isArray(this._default_value)) {\n\t\t\t\tdefault_val = this._default_value[index];\n\t\t\t} else {\n\t\t\t\tdefault_val = (this._default_value as any)[component_name];\n\t\t\t}\n\t\t\tcomponent.options.copy(this.options);\n\t\t\tcomponent.set_init_value(default_val);\n\n\t\t\t// component.set_scene(this.scene);\n\t\t\tcomponent.set_name(`${this.name}${component_name}`);\n\t\t\tcomponent.set_parent_param(this);\n\n\t\t\tthis.add_graph_input(component);\n\t\t\t// component.initialize();\n\t\t\tthis._components[index] = component;\n\t\t\tindex++;\n\t\t}\n\t\t// this.compute();\n\t}\n\n\tprotected async process_computation(): Promise<void> {\n\t\tawait this.compute_components();\n\t\tthis.set_value_from_components();\n\t}\n\tset_value_from_components() {}\n\t// set_raw_input_from_components() {}\n\n\thas_expression() {\n\t\tfor (let c of this.components) {\n\t\t\tif (c.expression_controller?.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async compute_components() {\n\t\tconst components = this.components;\n\t\t// const component_evaluation_states = lodash_map(components, ()=> false);\n\t\t// const expected_values_count = components.length;\n\t\t// const component_values = [];\n\t\t// let component;\n\t\t// return lodash_each(this.components(), (component, index)=> {\n\t\tconst promises = [];\n\t\tfor (let c of components) {\n\t\t\tif (c.is_dirty) {\n\t\t\t\tpromises.push(c.compute()); //component_value=> {\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\t// component_values[index] = component_value;\n\t\t// component_evaluation_states[index] = true;\n\t\t// const evaluated_values_count = lodash_compact(component_evaluation_states).length;\n\t\t// check if all components have been evaluated succesfully\n\t\t// if (evaluated_values_count === expected_values_count) {\n\t\tthis.remove_dirty_state();\n\t\t// return component_values;\n\t\t// }\n\t\t// });\n\t\t// }\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (!lodash_isArray(raw_input)) {\n\t\t\tconst number_or_string = raw_input as number | string;\n\t\t\tconst raw_input_wrapped_in_array: StringOrNumber[] = this.components.map(() => number_or_string);\n\t\t\treturn raw_input_wrapped_in_array as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tconst cooker = this.scene.cooker;\n\t\tcooker.block();\n\t\tconst components = this.components;\n\t\tfor (let c of components) {\n\t\t\tc.emit_controller.block_parent_emit();\n\t\t}\n\n\t\t// if (lodash_isArray(values)) {\n\t\tconst value = this._raw_input;\n\t\tif (lodash_isArray(value)) {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tcomponents[i].set((value as any)[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tconst component_name = this.component_names[i];\n\t\t\t\tcomponents[i].set((value as any)[component_name]);\n\t\t\t}\n\t\t}\n\t\t// } else {\n\t\t// \tconst component_names = this.component_names()\n\t\t// \tfor (let i = 0; i < components.length; i++) {\n\t\t// \t\tcomponents[i].set(values[component_names[i]])\n\t\t// \t}\n\t\t// }\n\n\t\tcooker.unblock();\n\n\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\tcomponents[i].emit_controller.unblock_parent_emit();\n\t\t}\n\t\t// this.emit(ParamEvent.UPDATED);\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n}\n\n// export class BaseMultipleParam extends TypedMultipleParam<Vector> {}\n","export class TypeAssert {\n\tstatic unreachable(x: never): never {\n\t\tthrow new Error(\"Didn't expect to get here\");\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class ShaderConfig {\n\tconstructor(private _name: ShaderName, private _input_names: string[], private _dependencies: ShaderName[]) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tinput_names() {\n\t\treturn this._input_names;\n\t}\n\tdependencies() {\n\t\treturn this._dependencies;\n\t}\n}\n","interface VariableConfigOptions {\n\t// asset refererences\n\tdefault_from_attribute?: boolean;\n\tdefault?: string;\n\tif?: string;\n\tprefix?: string;\n\tsuffix?: string;\n}\n\nexport class VariableConfig {\n\tconstructor(private _name: string, private _options: VariableConfigOptions = {}) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tdefault_from_attribute() {\n\t\treturn this._options['default_from_attribute'] || false;\n\t}\n\tdefault() {\n\t\treturn this._options['default'];\n\t}\n\tif_condition() {\n\t\treturn this._options['if'];\n\t}\n\t// required_definitions(){\n\t// \treturn this._options['required_definitions']\n\t// }\n\tprefix() {\n\t\treturn this._options['prefix'] || '';\n\t}\n\tsuffix() {\n\t\treturn this._options['suffix'] || '';\n\t}\n}\n","import {ParamConfig} from '../configs/ParamConfig';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\n\nexport class ParamConfigsController {\n\tprivate _param_configs: ParamConfig<ParamType>[] = [];\n\n\treset() {\n\t\tthis._param_configs = [];\n\t}\n\n\tpush(param_config: ParamConfig<ParamType>) {\n\t\tthis._param_configs.push(param_config);\n\t}\n\tcreate_and_push<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\tuniform_name: string\n\t) {\n\t\tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t\tthis._param_configs.push(param_config);\n\t}\n\n\tget list(): Readonly<ParamConfig<ParamType>[]> {\n\t\treturn this._param_configs;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Color} from 'three/src/math/Color';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tuse_vertex_colors = ParamConfig.BOOLEAN(0);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tpublic color!: Color;\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tconst new_vertex_color = pv.use_vertex_colors; // ? VertexColors : NoColors;\n\t\tif (new_vertex_color != material.vertexColors) {\n\t\t\tmaterial.vertexColors = new_vertex_color;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// color = ParamConfig.COLOR([1, 1, 1]);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n\tuniforms!: IUniforms;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\n\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\n\t\tif (material.uniforms.opacity) {\n\t\t\tmaterial.uniforms.opacity.value = pv.opacity;\n\t\t}\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {TypedMatNode} from './_Base';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShaderAssemblerMaterial} from '../gl/code/assemblers/materials/_BaseMaterial';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ShaderMaterialWithCustomMaterials} from '../../../core/geometry/Material';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport abstract class TypedBuilderMatNode<\n\tA extends ShaderAssemblerMaterial,\n\tK extends NodeParamsConfig\n> extends TypedMatNode<ShaderMaterialWithCustomMaterials, K> {\n\tprotected _assembler_controller: GlAssemblerController<A> | undefined;\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t}\n\n\t//\n\t//\n\t// MATERIAL\n\t//\n\t//\n\tcreate_material() {\n\t\treturn this.assembler_controller.assembler.create_material() as ShaderMaterialWithCustomMaterials;\n\t}\n\t//\n\t//\n\t// ASSEMBLER\n\t//\n\t//\n\tget assembler_controller() {\n\t\treturn (this._assembler_controller = this._assembler_controller || this._create_assembler_controller());\n\t}\n\tprotected abstract _create_assembler_controller(): GlAssemblerController<A>;\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// COMPILATION\n\t//\n\t//\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprotected async _compile() {\n\t\tif (this.material) {\n\t\t\tawait this.assembler_controller.assembler.compile_material(this.material);\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\t}\n}\n\nexport type BaseBuilderMatNodeType = TypedBuilderMatNode<ShaderAssemblerMaterial, NodeParamsConfig>;\n","import {TypedLightObjNode} from './_BaseLight';\nimport {Light} from 'three/src/lights/Light';\n// import {CoreTransform} from '../../../core/Transform';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TransformController, TransformedParamConfig} from './utils/TransformController';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\n// import {Transformed} from './Concerns/Transformed';\nclass TransformedObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\n\nexport abstract class BaseLightTransformedObjNode<\n\tL extends Light,\n\tK extends TransformedObjParamConfig\n> extends TypedLightObjNode<L, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../../utils/params/ParamsConfig';\nimport {TypedObjNode} from '../../_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {Light} from 'three/src/lights/Light';\nimport {FlagsControllerD} from '../../../utils/FlagsController';\nexport function BaseLightHelperParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\nclass BaseLightHelperParamsConfig extends BaseLightHelperParamConfig(NodeParamsConfig) {}\nexport abstract class BaseLightHelperObjNode<L extends Light> extends TypedObjNode<Group, BaseLightHelperParamsConfig> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\t// public readonly helper: BaseLightHelper<L> | undefined;\n\tabstract get light(): L;\n}\n\nexport abstract class BaseLightHelper<L extends Light, N extends BaseLightHelperObjNode<L>> {\n\tprotected _object = new Mesh();\n\tprotected _material = new MeshBasicMaterial({wireframe: true, fog: false});\n\tconstructor(protected node: N, private _name: string) {}\n\n\tbuild() {\n\t\tthis._object.name = this._name;\n\t\tthis.build_helper();\n\t}\n\tprotected abstract build_helper(): void;\n\tget object() {\n\t\treturn this._object;\n\t}\n\n\tabstract update(): void;\n}\n","import {Light} from 'three/src/lights/Light';\nimport {BaseLightHelper, BaseLightHelperObjNode} from './helpers/_BaseLightHelper';\n\n// interface Helper<L extends Light> extends BaseLightHelper<L> {\n// \tdispose: () => void;\n// \tupdate: () => void;\n// }\nexport interface HelperConstructor<L extends Light> {\n\tnew (node: BaseLightHelperObjNode<L>, name: string): BaseLightHelper<L, BaseLightHelperObjNode<L>>;\n}\n\nexport class HelperController<L extends Light> {\n\tprivate _helper: BaseLightHelper<L, BaseLightHelperObjNode<L>> | undefined;\n\tconstructor(\n\t\tprivate node: BaseLightHelperObjNode<L>,\n\t\tprivate _helper_constructor: HelperConstructor<L>,\n\t\tprivate _name: string\n\t) {}\n\n\tinitialize_node() {\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.update_helper_attachment();\n\t\t});\n\t}\n\n\tprivate update_helper_attachment() {\n\t\tif (this.node.flags.display.active) {\n\t\t\tconst object = this.helper?.object; // use this.helper to create if needed\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.add(object);\n\t\t\t\tthis._helper?.update();\n\t\t\t}\n\t\t} else {\n\t\t\tconst object = this._helper?.object; // use this._helper to NOT create if not already existing\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.remove(object);\n\t\t\t}\n\t\t}\n\t}\n\tget helper() {\n\t\tif (this.node.flags.display.active) {\n\t\t\treturn (this._helper = this._helper || this._create_helper());\n\t\t}\n\t}\n\tget visible() {\n\t\treturn this.node.flags.display.active && this.node.pv.show_helper;\n\t}\n\n\tprivate _create_helper(): BaseLightHelper<L, BaseLightHelperObjNode<L>> {\n\t\tconst helper = new this._helper_constructor(this.node, this._name);\n\t\thelper.build();\n\t\tthis.node.light.add(helper.object);\n\t\treturn helper;\n\t}\n\n\tupdate() {\n\t\tif (this.visible) {\n\t\t\tif (!this._helper) {\n\t\t\t\tthis._helper = this._create_helper();\n\t\t\t}\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = true;\n\t\t\t\tthis._helper.update();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = false;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass BaseManagerObjParamsConfig extends NodeParamsConfig {}\nexport class BaseManagerObjNode extends TypedObjNode<Group, BaseManagerObjParamsConfig> {\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\t// _init_manager(options = {}) {\n\t// \t// this._init_hierarchy_children_owner(options['children'] || {});\n\t// \t// this.flags.add_display({\n\t// \t// \thas_display_flag: false,\n\t// \t// \tmultiple_display_flags_allowed: true,\n\t// \t// });\n\t// \t// this.set_inputs_count_to_zero();\n\t// \t// this._init_outputs({has_outputs: false});\n\t// }\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {BaseObjNodeType} from '../_Base';\n// import {ParamType} from '../../../poly/ParamType';\n\nconst PARAM_NAME = 'layer';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function LayerParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tlayer = ParamConfig.INTEGER(0, {\n\t\t\trange: [0, 31],\n\t\t\trange_locked: [true, true],\n\t\t});\n\t};\n}\n\nexport class LayersController {\n\tconstructor(private node: BaseObjNodeType) {}\n\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.INTEGER, PARAM_NAME, 0, {\n\t// \t\trange: [0, 31],\n\t// \t\trange_locked: [true, true],\n\t// \t});\n\t// }\n\n\tupdate() {\n\t\tconst object = this.node.object;\n\t\t// const affected_objects = [object];\n\t\t// if (object.cloned_cameras != null) {\n\t\t// \tlodash_each(object.cloned_cameras, cloned_camera=> {\n\t\t// \t\taffected_objects.push(cloned_camera);\n\t\t// \t});\n\t\t// }\n\n\t\t// affected_objects.forEach((affected_object)=> {\n\t\tobject.layers.set(0);\n\t\tobject.layers.enable(this.node.params.integer(PARAM_NAME));\n\t\t// });\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ACESFilmicToneMapping, sRGBEncoding} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport lodash_range from 'lodash/range';\n// import {BaseParam} from '../../../../params/_Base';\nimport {BooleanParam} from '../../../../params/Boolean';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {BasePostProcessNodeType} from '../../../post/_Base';\nimport {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {EffectComposer} from '../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer';\nimport {RenderPass} from '../../../../../../modules/three/examples/jsm/postprocessing/RenderPass';\nimport {Pass} from '../../../../../../modules/three/examples/jsm/postprocessing/Pass';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {POLY} from '../../../../Poly';\n\ninterface DisposablePass extends Pass {\n\tdispose: () => void;\n}\n\nfunction boolean_param_options(index: number) {\n\treturn {\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t},\n\t};\n}\nfunction operator_path_param_options(index: number) {\n\treturn {\n\t\tnode_selection: {context: NodeContext.POST},\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t\t[`use_post_process_node${index}`]: 1,\n\t\t},\n\t};\n}\n\nimport {ParamConfig} from '../../../utils/params/ParamsConfig';\nexport function CameraPostProcessParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tpost_process = ParamConfig.FOLDER();\n\n\t\tdo_post_process = ParamConfig.BOOLEAN(0);\n\t\tuse_post_process_node0 = ParamConfig.BOOLEAN(0, boolean_param_options(0));\n\t\tpost_process_node0 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(0));\n\t\tuse_post_process_node1 = ParamConfig.BOOLEAN(0, boolean_param_options(1));\n\t\tpost_process_node1 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(1));\n\t\tuse_post_process_node2 = ParamConfig.BOOLEAN(0, boolean_param_options(2));\n\t\tpost_process_node2 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(2));\n\t\tuse_post_process_node3 = ParamConfig.BOOLEAN(0, boolean_param_options(3));\n\t\tpost_process_node3 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(3));\n\t};\n}\n\nexport class PostProcessController {\n\t// private _param_do_post_process: boolean;\n\t// private _param_do_sao: boolean;\n\tprivate _renderers_by_canvas_id: Dictionary<WebGLRenderer> = {};\n\tprivate _composers_by_canvas_id: Dictionary<EffectComposer> = {};\n\tprivate _resolution_by_canvas_id: Dictionary<Vector2> = {};\n\tprivate _composers_set_in_progress_by_canvas_id: Dictionary<boolean> = {};\n\tprivate _fetch_post_process_nodes_in_progress: boolean = false;\n\t// private _render_passes: any[] = []\n\tprivate _post_process_nodes: BasePostProcessNodeType[] = [];\n\n\tprivate _post_process_use_node_path_params: BooleanParam[] = [];\n\tprivate _post_process_node_path_params: OperatorPathParam[] = [];\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\t// private _prev_t = 0;\n\trender(canvas: HTMLCanvasElement, size: Vector2, aspect: number) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tif (this.node.pv.do_post_process) {\n\t\t\t\tconst composer = this.composer(canvas);\n\t\t\t\tif (composer) {\n\t\t\t\t\tcomposer.setSize(size.x, size.y);\n\t\t\t\t\tcomposer.render();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.setup_for_aspect_ratio(aspect);\n\t\t\t\t// const cur_t = performance.now();\n\t\t\t\t// const delta = cur_t - this._prev_t;\n\t\t\t\t// this._prev_t = cur_t;\n\t\t\t\t// console.log(cur_t, delta);\n\t\t\t\trenderer.render(this.node.scene.default_scene, this.node.object);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderer(canvas: HTMLCanvasElement) {\n\t\treturn this._renderers_by_canvas_id[canvas.id];\n\t}\n\n\tcreate_renderer(canvas: HTMLCanvasElement, size: Vector2): WebGLRenderer {\n\t\tconst gl = POLY.renderers_controller.rendering_context(canvas);\n\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: true,\n\t\t\tcontext: gl,\n\t\t});\n\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.physicallyCorrectLights = true; // https://discourse.threejs.org/t/three-js-white-is-too-bright/11873/3\n\n\t\t// TODO: find a way to have those accessible via params\n\t\trenderer.toneMapping = ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 1;\n\t\trenderer.outputEncoding = sRGBEncoding;\n\n\t\t// https://github.com/mrdoob/js/issues/15493\n\t\t// This below is an attempt to fix env map not being loaded in firefox, but that doesn't work.\n\t\t// Since the threejs example (https://threejs.org/examples/?q=exr#webgl_materials_envmaps_exr) also only works in chrome, not in firefox, I assume this is a firefox+linux bug\n\t\t// console.log(renderer.extensions)\n\t\t// renderer.extensions.get( 'EXT_color_buffer_float' );\n\n\t\t// attempt to have particle systems work in firefox on mobile\n\t\t// (current solution is to have the node SOP/particlesSystemGPU force webgl2 to be used)\n\t\t// renderer.extensions.get( 'WEBGL_color_buffer_float' );\n\t\t// renderer.extensions.get( 'WEBGL_draw_buffers' );\n\n\t\tPOLY.renderers_controller.register_renderer(renderer);\n\t\tthis._renderers_by_canvas_id[canvas.id] = renderer;\n\t\tthis.set_renderer_size(canvas, size);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\n\t\treturn renderer;\n\t}\n\tdelete_renderer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tPOLY.renderers_controller.deregister_renderer(renderer);\n\t\t}\n\t}\n\tset_renderer_size(canvas: HTMLCanvasElement, size: Vector2) {\n\t\tthis._resolution_by_canvas_id[canvas.id] = this._resolution_by_canvas_id[canvas.id] || new Vector2();\n\t\tthis._resolution_by_canvas_id[canvas.id].copy(size);\n\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.x, size.y);\n\t\t}\n\t\tconst composer = this.composer(canvas);\n\t\tif (composer) {\n\t\t\tcomposer.setSize(size.x, size.y);\n\t\t}\n\t}\n\n\tprivate composer(canvas: HTMLCanvasElement): EffectComposer {\n\t\treturn (this._composers_by_canvas_id[canvas.id] =\n\t\t\tthis._composers_by_canvas_id[canvas.id] || this._create_composer(canvas));\n\t}\n\n\tprivate _create_composer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\t// const parameters = {\n\t\t\t// \tminFilter: LinearFilter,\n\t\t\t// \tmagFilter: LinearFilter,\n\t\t\t// \tformat: RGBAFormat,\n\t\t\t// \tstencilBuffer: true\n\t\t\t// }\n\t\t\t// const renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, parameters );\n\t\t\tconst composer = new EffectComposer(renderer); //, renderTarget );\n\t\t\t// to achieve better antialiasing\n\t\t\t// while using post:\n\t\t\t// composer.setPixelRatio( window.devicePixelRatio*2 )\n\t\t\tcomposer.setPixelRatio(window.devicePixelRatio * 2);\n\t\t\tthis.set_composer_passes(canvas.id, composer, renderer);\n\n\t\t\treturn composer;\n\t\t} /*else {\n\t\t\tconsole.warn(this._renderers_by_canvas_id)\n\t\t\tthrow \"failed to create composer, no renderer ready\"\n\t\t}*/\n\t}\n\n\tasync update_composer_passes() {\n\t\tif (this.node.pv.do_post_process) {\n\t\t\tthis._post_process_nodes = [];\n\t\t\tif (this._fetch_post_process_nodes_in_progress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = true;\n\n\t\t\tif (this.composer_passes_nodes_changed()) {\n\t\t\t\tthis._post_process_nodes = [];\n\n\t\t\t\tfor (let i of lodash_range(4)) {\n\t\t\t\t\tconst toggle_param = this._post_process_use_node_path_params[i];\n\t\t\t\t\t// const use_node = await toggle_param.eval_p()\n\t\t\t\t\tconst use_node = toggle_param.value;\n\t\t\t\t\tif (use_node) {\n\t\t\t\t\t\tconst param = this._post_process_node_path_params[i];\n\t\t\t\t\t\tconst post_process_node = param.found_node() as BasePostProcessNodeType;\n\t\t\t\t\t\tif (post_process_node) {\n\t\t\t\t\t\t\tawait post_process_node.request_container();\n\t\t\t\t\t\t\t// const render_pass = container.render_pass()\n\t\t\t\t\t\t\t// this._render_passes.push(render_pass)\n\t\t\t\t\t\t\tthis._post_process_nodes.push(post_process_node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set_composers_passes();\n\t\t\t\t// this._previous_post_process_nodes_paths = this.composer_passes_nodes_paths()\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = false;\n\t\t} else {\n\t\t\tthis._post_process_nodes = [];\n\t\t}\n\t}\n\n\tprivate set_composers_passes() {\n\t\tconst ids = Object.keys(this._composers_by_canvas_id);\n\n\t\tfor (let id of ids) {\n\t\t\tconst composer = this._composers_by_canvas_id[id];\n\t\t\tconst renderer = this._renderers_by_canvas_id[id];\n\t\t\tif (composer) {\n\t\t\t\tthis.set_composer_passes(id, composer, renderer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_composer_passes(id: string, composer: EffectComposer, renderer: WebGLRenderer) {\n\t\tconst set_in_progress = this._composers_set_in_progress_by_canvas_id[id];\n\t\tif (set_in_progress) {\n\t\t\treturn;\n\t\t}\n\t\tthis._composers_set_in_progress_by_canvas_id[id] = true;\n\n\t\tthis.clear_render_passes(composer);\n\n\t\tconst render_scene_pass = new RenderPass(this.node.scene.default_scene, this.node.object);\n\t\trender_scene_pass.clearAlpha = 0;\n\t\tcomposer.addPass(render_scene_pass);\n\n\t\tfor (let post_process_node of this._post_process_nodes) {\n\t\t\tpost_process_node.apply_to_composer(\n\t\t\t\tcomposer,\n\t\t\t\tthis.node.object,\n\t\t\t\tthis._resolution_by_canvas_id[id],\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\n\t\tdelete this._composers_set_in_progress_by_canvas_id[id];\n\t}\n\n\tprivate clear_render_passes(composer: EffectComposer) {\n\t\tlet render_pass: Pass | undefined;\n\t\twhile ((render_pass = composer.passes.pop())) {\n\t\t\tif (render_pass) {\n\t\t\t\tconst disposable_pass: DisposablePass = render_pass as DisposablePass;\n\t\t\t\tif (typeof disposable_pass.dispose === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdisposable_pass.dispose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this._render_passes = []\n\t\tcomposer.passes = [];\n\t}\n\n\tprivate composer_passes_nodes_changed(): boolean {\n\t\treturn true;\n\t\t// I have to evaluate the nodes anyway, in case they changed\n\t\t// unless I can create a method that can store if one of those nodes are the ones that\n\t\t// made this current node dirty\n\t}\n\n\t// add_params() {\n\t// \t// this.node.within_param_folder('post_process', () => {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'do_post_process', 0);\n\n\t// \tlodash_range(4).forEach((i) => {\n\t// \t\tconst toggle_param = this.node.add_param(ParamType.BOOLEAN, `use_post_process_node${i + 1}`, 0, {\n\t// \t\t\tvisible_if: {do_post_process: 1},\n\t// \t\t});\n\n\t// \t\tif (toggle_param) {\n\t// \t\t\tconst visible_options = {\n\t// \t\t\t\tdo_post_process: 1,\n\t// \t\t\t\t[toggle_param.name]: 1,\n\t// \t\t\t};\n\t// \t\t\tconst node_path_options = {\n\t// \t\t\t\tnode_selection: {context: NodeContext.POST},\n\t// \t\t\t\tvisible_if: visible_options,\n\t// \t\t\t};\n\t// \t\t\tconst param = this.node.add_param(\n\t// \t\t\t\tParamType.OPERATOR_PATH,\n\t// \t\t\t\t`post_process_node${i + 1}`,\n\t// \t\t\t\t'',\n\t// \t\t\t\tnode_path_options\n\t// \t\t\t);\n\t// \t\t\tif (param) {\n\t// \t\t\t\tthis._post_process_use_node_path_params.push(toggle_param);\n\t// \t\t\t\tthis._post_process_node_path_params.push(param);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// \t// });\n\t// }\n}\n","import {BaseNodeType} from '../_Base';\nimport lodash_isNaN from 'lodash/isNaN';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\ntype Callback = () => void;\n\nexport class NameController {\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _on_set_name_hooks: Callback[] | undefined;\n\tprivate _on_set_full_path_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'node_name_controller');\n\t\t// this._graph_node.set_scene(this.node.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tstatic base_name(node: BaseNodeType) {\n\t\tlet base = node.type; //CoreString.class_name_to_type(this.self.type())\n\t\tconst last_char = base[base.length - 1];\n\t\tif (!lodash_isNaN(parseInt(last_char))) {\n\t\t\tbase += '_';\n\t\t}\n\t\treturn `${base}1`;\n\t}\n\n\trequest_name_to_parent(new_name: string) {\n\t\tconst parent = this.node.parent;\n\t\tif (parent && parent.children_allowed() && parent.children_controller) {\n\t\t\tparent.children_controller.set_child_name(this.node, new_name);\n\t\t} else {\n\t\t\tconsole.warn('request_name_to_parent failed, no parent found');\n\t\t}\n\t}\n\tset_name(new_name: string) {\n\t\tif (new_name != this.node.name) {\n\t\t\tthis.request_name_to_parent(new_name);\n\t\t}\n\t}\n\tupdate_name_from_parent(new_name: string) {\n\t\tthis.node._set_core_name(new_name);\n\t\tthis.post_set_name();\n\t\tthis.post_set_full_path();\n\t\tif (this.node.children_allowed()) {\n\t\t\tthis.node.children_controller?.children().forEach((child_node) => {\n\t\t\t\tchild_node.name_controller.post_set_full_path(); // TODO: typescript: replace post_set_full_path with execute_on_update_full_path_hooks or on_update_full_path\n\t\t\t});\n\t\t}\n\n\t\tif (this.node.lifecycle.creation_completed) {\n\t\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(this.node);\n\t\t\tthis.node.scene.expressions_controller.regenerate_referring_expressions(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAME_UPDATED);\n\t}\n\n\tadd_post_set_name_hook(hook: Callback) {\n\t\tthis._on_set_name_hooks = this._on_set_name_hooks || [];\n\t\tthis._on_set_name_hooks.push(hook);\n\t}\n\tadd_post_set_full_path_hook(hook: Callback) {\n\t\tthis._on_set_full_path_hooks = this._on_set_full_path_hooks || [];\n\t\tthis._on_set_full_path_hooks.push(hook);\n\t}\n\n\tpost_set_name() {\n\t\tif (this._on_set_name_hooks) {\n\t\t\tfor (let hook of this._on_set_name_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tpost_set_full_path() {\n\t\tif (this._on_set_full_path_hooks) {\n\t\t\tfor (let hook of this._on_set_full_path_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport lodash_compact from 'lodash/compact';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isEqual from 'lodash/isEqual';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamEvent} from '../../poly/ParamEvent';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nconst ALWAYS_REFERENCE_ASSET_OPTION = 'always_reference_asset';\nconst CALLBACK_OPTION = 'callback';\nconst CALLBACK_STRING_OPTION = 'callback_string';\n// const COLOR_OPTION = 'color';\nconst COOK_OPTION = 'cook';\nconst DESKTOP_BROWSE_OPTION = 'desktop_browse';\nconst FILE_TYPE_OPTION = 'file_type';\n// const EXPRESSION_ONLY_OPTION = 'expression_only';\nconst EXPRESSION = 'expression';\nconst FOR_ENTITIES = 'for_entities';\nconst LEVEL = 'level';\nconst MENU = 'menu';\nconst ENTRIES = 'entries';\n// const TYPE = 'type';\n// const RADIO = 'radio';\nconst MULTILINE_OPTION = 'multiline';\nconst LANGUAGE_OPTION = 'language';\nconst NODE_SELECTION = 'node_selection';\nconst NODE_SELECTION_CONTEXT = 'context';\nconst DEPENDENT_ON_FOUND_NODE = 'dependent_on_found_node';\nconst RANGE_OPTION = 'range';\nconst RANGE_LOCKED_OPTION = 'range_locked';\nconst STEP_OPTION = 'step';\nconst SPARE_OPTION = 'spare';\nconst TEXTURE_OPTION = 'texture';\nconst ENV_OPTION = 'env';\nconst HIDDEN_OPTION = 'hidden';\nconst LABEL_OPTION = 'label';\nconst FIELD_OPTION = 'field';\nconst VISIBLE_IF_OPTION = 'visible_if';\n\nexport interface ParamOptionsMenuEntry {\n\tname: string;\n\tvalue: number;\n}\nexport enum StringParamLanguage {\n\t// JAVASCRIPT = 'javascript',\n\tTYPESCRIPT = 'typescript',\n\t// GLSL = 'glsl',\n}\n\ninterface BaseParamOptions {\n\t// cook\n\tcook?: boolean;\n\t// spare\n\tspare?: boolean;\n\t// visible\n\thidden?: boolean;\n\tlabel?: boolean;\n\tfield?: boolean;\n\tvisible_if?: Dictionary<number | boolean>;\n}\ninterface MenuParamOptions {\n\tmenu?: {\n\t\t// type: 'radio';\n\t\tentries: ParamOptionsMenuEntry[];\n\t};\n}\ninterface ExpressionParamOptions {\n\texpression?: {\n\t\tfor_entities?: boolean;\n\t};\n}\n\ninterface NumberParamOptions extends BaseParamOptions {\n\trange?: Number2;\n\trange_locked?: Boolean2;\n\tstep?: number;\n}\ninterface AssetParamOptions {\n\talways_reference_asset?: boolean;\n}\ninterface DesktopParamOptions {\n\tdesktop_browse?: Dictionary<string>;\n}\ninterface CallbackParamOptions {\n\tcallback?: (node: BaseNodeType, param: BaseParamType) => any;\n\tcallback_string?: string;\n}\n\n// actual param options\nexport interface BooleanParamOptions\n\textends BaseParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface ButtonParamOptions extends BaseParamOptions, CallbackParamOptions {}\nexport interface ColorParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface FloatParamOptions\n\textends NumberParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface FolderParamOptions extends BaseParamOptions {\n\tlevel?: number;\n}\nexport interface IntegerParamOptions extends NumberParamOptions, MenuParamOptions, CallbackParamOptions {}\nexport interface OperatorPathParamOptions extends BaseParamOptions, DesktopParamOptions, CallbackParamOptions {\n\tnode_selection?: {\n\t\tcontext?: NodeContext;\n\t};\n\tdependent_on_found_node?: boolean;\n}\nexport interface RampParamOptions extends BaseParamOptions {}\nexport interface SeparatorParamOptions extends BaseParamOptions {}\nexport interface StringParamOptions\n\textends BaseParamOptions,\n\t\tAssetParamOptions,\n\t\tDesktopParamOptions,\n\t\tExpressionParamOptions {\n\tmultiline?: boolean;\n\tlanguage?: StringParamLanguage;\n}\nexport interface Vector2ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector3ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector4ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\n\nexport interface ParamOptions\n\textends NumberParamOptions,\n\t\tFolderParamOptions,\n\t\tExpressionParamOptions,\n\t\tButtonParamOptions,\n\t\tDesktopParamOptions,\n\t\tMenuParamOptions,\n\t\tStringParamOptions,\n\t\tOperatorPathParamOptions {\n\t// asset refererences\n\t// always_reference_asset?: boolean;\n\t// callback\n\t// callback?: (node: BaseNodeType, param: BaseParamType) => any;\n\t// callback_string?: string;\n\t// color\n\t// color?: [number, number, number] | string;\n\t// cook\n\t// cook?: boolean;\n\t// desktop\n\t// desktop_browse?: Dictionary<string>;\n\t// expression\n\t// expression_only?: boolean;\n\t// expression?: {\n\t// \tfor_entities?: boolean;\n\t// };\n\t// folder\n\t// level?:number\n\t// menu\n\t// menu?: {\n\t// \t// type: 'radio';\n\t// \tentries: ParamOptionsMenuEntry[];\n\t// };\n\t// multiline\n\t// multiline?: boolean;\n\t// node selection\n\t// node_selection?: {\n\t// \tcontext?: NodeContext;\n\t// };\n\t// dependent_on_found_node?: boolean;\n\t// spare\n\t// spare?: boolean;\n\t// texture\n\ttexture?: {\n\t\tenv?: boolean;\n\t};\n\t// visible\n\t// hidden?: boolean;\n\t// label?: boolean;\n\t// field?: boolean;\n\t// visible_if?: Dictionary<number | boolean>;\n}\n\nexport class OptionsController {\n\tprivate _programatic_visible_state: boolean = true;\n\tprivate _options!: ParamOptions;\n\tprivate _default_options!: ParamOptions;\n\tconstructor(private _param: BaseParamType) {\n\t\t// this._options = lodash_cloneDeep(this._default_options);\n\t}\n\n\tset(options: ParamOptions) {\n\t\tthis._default_options = options;\n\t\tthis._options = lodash_cloneDeep(this._default_options);\n\t}\n\tcopy(options_controller: OptionsController) {\n\t\tthis._default_options = lodash_cloneDeep(options_controller.default);\n\t\tthis._options = lodash_cloneDeep(options_controller.current);\n\t}\n\tset_option(name: keyof ParamOptions, value: any) {\n\t\treturn Object.assign(this._options, name, value);\n\t}\n\tget param() {\n\t\treturn this._param;\n\t}\n\tget node(): BaseNodeType {\n\t\treturn this._param.node;\n\t}\n\tget default() {\n\t\treturn this._default_options;\n\t}\n\tget current() {\n\t\treturn this._options;\n\t}\n\n\t// utils\n\tget has_options_overridden(): boolean {\n\t\treturn !lodash_isEqual(this._options, this._default_options);\n\t}\n\tget overridden_options(): ParamOptions {\n\t\tconst overriden: ParamOptions = {};\n\t\tconst option_names = Object.keys(this._options) as Array<keyof ParamOptions>;\n\t\tfor (let option_name of option_names) {\n\t\t\tif (!lodash_isEqual(this._options[option_name], this._default_options[option_name])) {\n\t\t\t\tObject.assign(overriden, option_name, lodash_cloneDeep(this._options[option_name]));\n\t\t\t}\n\t\t}\n\t\treturn overriden;\n\t}\n\tget overridden_option_names(): Array<keyof ParamOptions> {\n\t\treturn Object.keys(this.overridden_options) as Array<keyof ParamOptions>;\n\t}\n\n\t// referenced assets\n\tget always_reference_asset(): boolean {\n\t\treturn this._options[ALWAYS_REFERENCE_ASSET_OPTION] || false;\n\t}\n\n\t// callback\n\thas_callback() {\n\t\treturn this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n\t}\n\n\texecute_callback() {\n\t\t// we only allow execution when scene is loaded\n\t\t// to avoid errors such as an operator_path param\n\t\t// executing its callback before the node it points to is created\n\t\tif (!(this.node && this.node.scene.loading_controller.loaded)) {\n\t\t\treturn;\n\t\t}\n\t\tconst callback = this.get_callback();\n\t\tif (callback != null) {\n\t\t\tif (this.node && !this.node.cook_controller.is_cooking) {\n\t\t\t\tcallback(this.node, this.param);\n\t\t\t}\n\t\t}\n\t}\n\tprivate get_callback() {\n\t\tif (this.has_callback()) {\n\t\t\treturn (this._options[CALLBACK_OPTION] =\n\t\t\t\tthis._options[CALLBACK_OPTION] || this.create_callback_from_string());\n\t\t}\n\t}\n\tprivate create_callback_from_string() {\n\t\tconst callback_string = this._options[CALLBACK_STRING_OPTION];\n\t\tif (callback_string) {\n\t\t\tconst callback_function = new Function('node', 'scene', 'window', 'location', callback_string);\n\t\t\treturn () => {\n\t\t\t\tcallback_function(this.node, this.node.scene, null, null);\n\t\t\t};\n\t\t}\n\t}\n\n\t// color\n\t// color() {\n\t// \treturn this._options[COLOR_OPTION];\n\t// }\n\n\t// cook\n\tmakes_node_dirty_when_dirty() {\n\t\tlet cook_options;\n\n\t\t// false as the dirty state will go through the parent param\n\t\tif (this.param.parent_param != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet value = true;\n\t\tif ((cook_options = this._options[COOK_OPTION]) != null) {\n\t\t\tvalue = cook_options;\n\t\t}\n\t\treturn value;\n\t}\n\n\t// desktop\n\tget desktop_browse_option() {\n\t\treturn this._options[DESKTOP_BROWSE_OPTION];\n\t}\n\tget desktop_browse_allowed(): boolean {\n\t\treturn this.desktop_browse_option != null;\n\t}\n\tdesktop_browse_file_type(): string | null {\n\t\tif (this.desktop_browse_option) {\n\t\t\treturn this.desktop_browse_option[FILE_TYPE_OPTION];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// expression\n\t// get displays_expression_only() {\n\t// \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n\t// }\n\tget is_expression_for_entities(): boolean {\n\t\tconst expr_option = this._options[EXPRESSION];\n\t\tif (expr_option) {\n\t\t\treturn expr_option[FOR_ENTITIES] || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// folder\n\tget level() {\n\t\treturn this._options[LEVEL] || 0;\n\t}\n\n\t// menu\n\tget has_menu() {\n\t\treturn this.menu_options != null;\n\t}\n\n\tprivate get menu_options() {\n\t\treturn this._options[MENU];\n\t}\n\t// private get menu_type() {\n\t// \tif(this.menu_options){\n\t// \t\treturn this.menu_options[TYPE];\n\t// \t}\n\t// }\n\n\tget menu_entries() {\n\t\tif (this.menu_options) {\n\t\t\treturn this.menu_options[ENTRIES];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tget has_menu_radio() {\n\t\treturn this.has_menu; //&& this.menu_options[TYPE] === RADIO;\n\t}\n\n\t// multiline\n\tget is_multiline(): boolean {\n\t\treturn this._options[MULTILINE_OPTION] === true;\n\t}\n\tget language(): StringParamLanguage | undefined {\n\t\treturn this._options[LANGUAGE_OPTION];\n\t}\n\tget is_code(): boolean {\n\t\treturn this.language != null;\n\t}\n\n\t// node selection\n\tget node_selection_options() {\n\t\treturn this._options[NODE_SELECTION];\n\t}\n\tget node_selection_context() {\n\t\tif (this.node_selection_options) {\n\t\t\treturn this.node_selection_options[NODE_SELECTION_CONTEXT];\n\t\t}\n\t}\n\n\tdependent_on_found_node() {\n\t\tif (DEPENDENT_ON_FOUND_NODE in this._options) {\n\t\t\treturn this._options[DEPENDENT_ON_FOUND_NODE];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// range\n\tget range(): Number2 {\n\t\t// cannot force range easily, as values are not necessarily from 0 to N\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [0, this.self.menu_entries().length-1 ]\n\t\t// } else {\n\t\treturn this._options[RANGE_OPTION] || [0, 1];\n\t\t// }\n\t}\n\tget step(): number {\n\t\treturn this._options[STEP_OPTION] || 0.01;\n\t}\n\n\tprivate range_locked(): Boolean2 {\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [true, true]\n\t\t// } else {\n\t\treturn this._options[RANGE_LOCKED_OPTION] || [false, false];\n\t\t// }\n\t}\n\n\tensure_in_range(value: number): number {\n\t\tconst range = this.range;\n\n\t\tif (value >= range[0] && value <= range[1]) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tif (value < range[0]) {\n\t\t\t\treturn this.range_locked()[0] === true ? range[0] : value;\n\t\t\t} else {\n\t\t\t\treturn this.range_locked()[1] === true ? range[1] : value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// spare\n\tget is_spare(): boolean {\n\t\treturn this._options[SPARE_OPTION] || false;\n\t}\n\n\t// texture\n\tget texture_options() {\n\t\treturn this._options[TEXTURE_OPTION];\n\t}\n\ttexture_as_env(): boolean {\n\t\tconst texture_options = this.texture_options;\n\t\tif (texture_options != null) {\n\t\t\treturn texture_options[ENV_OPTION] === true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// visible\n\tget is_hidden(): boolean {\n\t\treturn this._options[HIDDEN_OPTION] === true || this._programatic_visible_state === false;\n\t}\n\tget is_visible(): boolean {\n\t\treturn !this.is_hidden;\n\t}\n\tset_visible_state(state: boolean) {\n\t\tthis._options[HIDDEN_OPTION] = !state;\n\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t}\n\n\tget is_label_hidden(): boolean {\n\t\tconst type = this.param.type;\n\t\treturn (\n\t\t\tthis._options[LABEL_OPTION] === false ||\n\t\t\ttype === ParamType.BUTTON ||\n\t\t\ttype === ParamType.SEPARATOR ||\n\t\t\t(type === ParamType.BOOLEAN && this.is_field_hidden())\n\t\t);\n\t}\n\tis_field_hidden(): boolean {\n\t\treturn this._options[FIELD_OPTION] === false;\n\t}\n\n\t// programatic visibility\n\tui_data_depends_on_other_params(): boolean {\n\t\treturn VISIBLE_IF_OPTION in this._options;\n\t}\n\tvisibility_predecessors() {\n\t\tconst predecessor_names = Object.keys(this._options[VISIBLE_IF_OPTION] || {});\n\t\tconst node = this.param.node;\n\t\treturn lodash_compact(\n\t\t\tpredecessor_names.map((name) => {\n\t\t\t\tconst param = node.params.get(name);\n\t\t\t\tif (param) {\n\t\t\t\t\treturn param;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`param ${name} not found as visibility condition for ${this.param.name} in node ${this.param.node.type}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate _update_visibility_and_remove_dirty_bound = this.update_visibility_and_remove_dirty.bind(this);\n\tprivate _visibility_graph_node: CoreGraphNode | undefined;\n\tprivate _ui_data_dependency_set: boolean = false;\n\tset_ui_data_dependency() {\n\t\tif (this._ui_data_dependency_set) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ui_data_dependency_set = true;\n\t\tconst predecessors = this.visibility_predecessors();\n\t\tif (predecessors.length > 0) {\n\t\t\tthis._visibility_graph_node = new CoreGraphNode(this.param.scene, 'param_visibility');\n\t\t\tfor (let predecessor of predecessors) {\n\t\t\t\tthis._visibility_graph_node.add_graph_input(predecessor);\n\t\t\t}\n\t\t\tthis._visibility_graph_node.add_post_dirty_hook(\n\t\t\t\t'_update_visibility_and_remove_dirty',\n\t\t\t\tthis._update_visibility_and_remove_dirty_bound\n\t\t\t);\n\t\t}\n\t}\n\tprivate update_visibility_and_remove_dirty() {\n\t\tthis.update_visibility();\n\t\tthis.param.remove_dirty_state();\n\t}\n\n\tasync update_visibility() {\n\t\tconst options = this._options[VISIBLE_IF_OPTION];\n\t\tif (options) {\n\t\t\tconst params = this.visibility_predecessors();\n\t\t\tconst promises = params.map((p) => p.compute());\n\t\t\tthis._programatic_visible_state = true;\n\t\t\tawait Promise.all(promises);\n\t\t\tfor (let param of params) {\n\t\t\t\tconst expected_val = options[param.name];\n\t\t\t\tconst val = param.value;\n\t\t\t\tif (expected_val != val) {\n\t\t\t\t\tthis._programatic_visible_state = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport lodash_isString from 'lodash/isString';\n// import {ParsedTree} from './ParsedTree'\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesController} from './MissingReferencesController'\nexport const VARIABLE_PREFIX = '$';\n\nexport abstract class BaseTraverser {\n\t// private _parsed_tree: ParsedTree\n\tpublic _error_message: string | undefined;\n\n\tconstructor(public param: BaseParamType) {}\n\n\tprotected clear_error() {\n\t\tthis._error_message = undefined;\n\t}\n\tprotected set_error(message: string) {\n\t\tthis._error_message = this._error_message || message;\n\t\t// throw this.error_message\n\t}\n\tprotected _set_error_from_error_bound = this._set_error_from_error.bind(this);\n\tprivate _set_error_from_error(error: Error | string) {\n\t\tif (lodash_isString(error)) {\n\t\t\tthis._error_message = error;\n\t\t} else {\n\t\t\tthis._error_message = error.message;\n\t\t}\n\t}\n\tget is_errored(): boolean {\n\t\treturn this._error_message != null;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\treset() {\n\t\tthis._error_message = undefined;\n\t}\n\n\ttraverse_node(node: jsep.Expression): string | undefined {\n\t\tconst method_name = `traverse_${node.type}`;\n\t\tconst method = (this as any)[method_name];\n\t\tif (method) {\n\t\t\treturn (this as any)[method_name](node);\n\t\t} else {\n\t\t\tthis.set_error(`expression unknown node type: ${node.type}`);\n\t\t}\n\t}\n\n\tprotected abstract traverse_CallExpression(node: jsep.CallExpression): string | undefined; //{\n\n\t// const method_arguments = node.arguments.map((arg)=>{\n\t// \treturn this.traverse_node(arg)\n\t// })\n\t// const method_name = node.callee.name\n\n\t// // literal construct (if...)\n\t// const literal_contruct = this[`traverse_literal_construct_${node.type}`] //LITERAL_CONSTRUCT[method_name]\n\t// if(literal_contruct){\n\t// \treturn literal_contruct.bind(this)(method_arguments)\n\t// }\n\n\t// // direct expressions (Math.floor, Math.sin...)\n\t// const arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`\n\t// const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name]\n\t// if(direct_function_name){\n\t// \treturn `${direct_function_name}(${arguments_joined})`\n\t// }\n\n\t// // indirect methods (points_count, asset...)\n\t// const indirect_method = INDIRECT_EXPRESSION_METHODS[method_name]\n\t// if(indirect_method){\n\t// \tthis._create_method_and_dependencies(node, method_name, arguments_joined)\n\t// \treturn `await methods[${this.method_index}].process_arguments(${arguments_joined})`\n\t// }\n\n\t// this.set_error(`unknown method: ${method_name}`)\n\t//}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_ConditionalExpression(node: jsep.ConditionalExpression): string {\n\t\treturn `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n\t\t\tnode.alternate\n\t\t)})`;\n\t}\n\n\t// currently only used for string expressions such as\n\t// pt_`@ptnum+1`\n\tprotected traverse_Compound(node: jsep.Compound): string {\n\t\tconst args = node.body;\n\t\tlet traversed_args = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg_node = args[i];\n\t\t\tif (arg_node.type == 'Identifier') {\n\t\t\t\tif ((arg_node as jsep.Identifier).name[0] == VARIABLE_PREFIX) {\n\t\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t\t} else {\n\t\t\t\t\ttraversed_args.push(`'${(arg_node as jsep.Identifier).name}'`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t}\n\t\t}\n\t\treturn traversed_args.join(' + ');\n\t\t// this may work for things like  [1,-2,3][$F%2]\n\t\t// but can be confusing for more operators like [1,-2,3][$F%2][2]\n\n\t\t// console.log(node)\n\t\t// return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(node.alternate)})`\n\t\t// this.set_error(\"unrecognised expression Compound\")\n\t\t// return \"\"\n\t}\n\tprotected abstract traverse_UnaryExpression(node: jsep.UnaryExpression): string; //{\n\n\t// if (node.operator === ATTRIBUTE_PREFIX) {\n\t// \tconst attrib_name = this.traverse_node(node.argument);\n\t// \treturn `param.entity_attrib_value(${QUOTE}${attrib_name}${QUOTE})`\n\t// } else {\n\t// \treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t// }\n\t//}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected abstract traverse_Identifier(node: jsep.Identifier): string | undefined; //{\n\t// const identifier_first_char = node.name[0]\n\t// if(identifier_first_char == VARIABLE_PREFIX){\n\t// \tconst identifier_name_without_dollar_sign = node.name.substr(1)\n\n\t// \t// globals constants: Math.PI or Math.E\n\t// \tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign]\n\t// \tif(direct_constant_name){\n\t// \t\treturn direct_constant_name\n\t// \t}\n\n\t// \t// scene or node globals: $F, $CH, $OS\n\t// \tconst method_name = `Identifier_${identifier_name_without_dollar_sign}_body`\n\t// \tconst method = this[method_name]\n\t// \tif(method){\n\t// \t\treturn this[method_name]()\n\t// \t}else{\n\t// \t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t// \t}\n\n\t// } else {\n\t// \treturn node.name // @ptnum will call this method and return \"ptnum\"\n\t// }\n\t//}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\t// abstract Identifier_F_body(): string //{\n\t// this.dependencies.push(this.param.scene().context())\n\t// return `param.scene().frame()`\n\t//}\n\t// abstract Identifier_CH_body(): string //{\n\t// return `${QUOTE}${this.param.name()}${QUOTE}`\n\t//}\n\t// TODO:\n\t// '$CEX': '_eval_identifier_as_expression_centroid_x',\n\t// '$CEY': '_eval_identifier_as_expression_centroid_y',\n\t// '$CEZ': '_eval_identifier_as_expression_centroid_z',\n\t// '$CH': '_eval_identifier_as_param_name',\n\t// '$OS': '_eval_identifier_as_node_name',\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\t// protected _create_method_and_dependencies(node: jsep.CallExpression, method_name: string, arguments_joined: string) {\n\t// \tconst method_constructor = Method[method_name]\n\t// \tconst method = new method_constructor(this.param)\n\t// \tthis.method_index += 1\n\t// \tthis.methods[this.method_index] = method\n\n\t// \tconst dependency_arguments_function = new Function(`return [${arguments_joined}]`)\n\t// \tconst dependency_arguments = dependency_arguments_function()\n\n\t// \tconst reference_search_result = method.find_dependencies(dependency_arguments)\n\t// \treference_search_result.found_graph_nodes.forEach((graph_node)=>{\n\t// \t\tthis.dependencies.push(graph_node)\n\t// \t})\n\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(node)\n\t// \t})\n\t// }\n}\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\nexport const AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedGlNode, BaseGlNodeType} from './_Base';\n// import {BaseNodeGlMathFunctionArg1} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {BaseNamedConnectionPointType} from '../utils/connections/NamedConnectionPoint';\nimport {ParamType} from '../../poly/ParamType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport const ConnectionPointTypesAvailableForAttribute = [\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttributeGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypesAvailableForAttribute.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\nconst ParamsConfig = new AttributeGlParamsConfig();\n\nexport class AttributeGlNode extends TypedGlNode<AttributeGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attribute';\n\t}\n\tstatic readonly INPUT_NAME = 'export';\n\tstatic readonly OUTPUT_NAME = 'val';\n\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile_if_is_exporting.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [\n\t\t\tConnectionPointTypesAvailableForAttribute[this.pv.type],\n\t\t]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\tcreate_params() {\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.add_param(ParamType.BOOLEAN, 'export_when_connected', 0);\n\t\t}\n\t}\n\t// inputless_params_names(): string[] {\n\t// \treturn ['type'];\n\t// }\n\n\tget input_name() {\n\t\treturn AttributeGlNode.INPUT_NAME;\n\t}\n\tget output_name() {\n\t\treturn AttributeGlNode.OUTPUT_NAME;\n\t}\n\n\t// private create_inputs_from_params() {\n\t// \tif (this.material_node.allow_attribute_exports) {\n\t// \t\t// this.set_named_inputs([new TypedConnectionFloat(AttributeGlNode.input_name())]);\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(INPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t// \t\t]);\n\t// \t\t// this._init_graph_node_inputs();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_attribute(\n\t\t\tthis,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// }\n\t}\n\n\t// update_output_type(constructor) {\n\t// \tconst named_output = new constructor(Attribute.output_name());\n\t// \tthis.set_named_outputs([named_output]);\n\t// }\n\t// update_input_type(constructor) {\n\t// \tconst named_input = new constructor(Attribute.input_name());\n\t// \tthis.set_named_inputs([named_input]);\n\t// \tthis._init_graph_node_inputs();\n\t// }\n\n\tget attribute_name(): string {\n\t\treturn lodash_trim(this.pv.name);\n\t}\n\tgl_type(): ConnectionPointType {\n\t\treturn this.io.outputs.named_output_connection_points[0].type;\n\t}\n\t//\n\t//\n\t// Utility methods for SOP/ParticlesSystemGPU and Assembler/Particles\n\t//\n\t//\n\tconnected_input_node(): BaseGlNodeType | null {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t// }\n\t}\n\tconnected_input_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\treturn this.io.inputs.named_input_connection_point(AttributeGlNode.INPUT_NAME);\n\t}\n\t// connected_input(): NamedConnection {\n\t// \tconst connection_point = this.connected_input_connection_point();\n\t// \tif (connection_point) {\n\t// \t\treturn this.io.inputs.named_inputs().filter((ni) => ni.name() == Attribute.input_name())[0];\n\t// \t}\n\t// }\n\toutput_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.outputs.named_output_connection_points_by_name(this.input_name);\n\t\t// }\n\t}\n\t// connected_output(): NamedConnection {\n\t// \tconst output = this.named_output(0);\n\t// \tif (output) {\n\t// \t\treturn output; //this.named_inputs().filter(ni=>ni.name() == Attribute.input_name())[0]\n\t// \t}\n\t// }\n\tget is_importing(): boolean {\n\t\treturn this.io.outputs.used_output_names().length > 0; // TODO: typescript - ensure that we can check that the connected outputs are part of the nodes retrived by the node traverser\n\t}\n\tget is_exporting(): boolean {\n\t\tif (this.pv.export_when_connected) {\n\t\t\tconst input_node = this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t\treturn input_node != null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tprivate _set_mat_to_recompile_if_is_exporting() {\n\t\tif (this.is_exporting) {\n\t\t\tthis._set_mat_to_recompile();\n\t\t}\n\t}\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// SIGNATURE\n\t//\n\t//\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_input_and_output_types();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// \tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t// }\n\t// private update_input_and_output_types() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this.output_name, ConnectionPointTypesAvailableForAttribute[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// \tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(this.input_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t// \t\t]);\n\t// \t}\n\t// }\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonExporter} from './Node';\n// import {BaseNodeObjJsonExporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonExporter} from './node/Subnetwork';\n\nimport {ParamJsonExporter} from './Param';\n// import {ParamMultipleJsonExporter} from './param/Multiple';\nimport {ParamNumericJsonExporter} from './param/Numeric';\nimport {ParamOperatorPathJsonExporter} from './param/OperatorPath';\nimport {ParamStringJsonExporter} from './param/String';\nimport {ParamRampJsonExporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\n// import {TypedMultipleParam} from '../../../params/_Multiple';\nimport {TypedNumericParam} from '../../../params/_Numeric';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonExportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonExporter(node);\n\t\t// }\n\t\treturn new NodeJsonExporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\t// if (param instanceof TypedMultipleParam) {\n\t\t// \treturn new ParamMultipleJsonExporter(param);\n\t\t// }\n\t\tif (param instanceof TypedNumericParam) {\n\t\t\treturn new ParamNumericJsonExporter(param);\n\t\t}\n\t\tif (param instanceof OperatorPathParam) {\n\t\t\treturn new ParamOperatorPathJsonExporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonExporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonExporter(param);\n\t\t}\n\t\treturn new ParamJsonExporter(param);\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {CoreString} from '../../../../core/String';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from './Node';\nimport {JsonExportDispatcher} from './Dispatcher';\n\nexport interface SceneJsonExporterData {\n\tproperties?: {\n\t\tframe: number;\n\t\tframe_range: Number2;\n\t\tframe_range_locked: Boolean2;\n\t\t// fps: number;\n\t\tmaster_camera_node_path: string | null;\n\t};\n\troot?: NodeJsonExporterData;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneJsonExporter {\n\tprivate _data: SceneJsonExporterData = {};\n\tconstructor(private _scene: PolyScene) {}\n\n\tdata(): SceneJsonExporterData {\n\t\tthis._scene.nodes_controller.reset_node_context_signatures();\n\t\tconst root_exporter = JsonExportDispatcher.dispatch_node(this._scene.root);\n\t\tconst nodes_data = root_exporter.data();\n\t\tconst ui_data = root_exporter.ui_data();\n\n\t\tthis._data = {\n\t\t\t// __js_version: this._scene.js_version(),\n\t\t\tproperties: {\n\t\t\t\t// name: this._scene.name(), // this conflicts with saving the name from the admin page\n\t\t\t\tframe: this._scene.frame || 1,\n\t\t\t\tframe_range: this._scene.frame_range,\n\t\t\t\tframe_range_locked: this._scene.time_controller.frame_range_locked,\n\t\t\t\t// fps: this._scene.time_controller.fps,\n\t\t\t\tmaster_camera_node_path: this._scene.cameras_controller.master_camera_node_path,\n\t\t\t},\n\t\t\troot: nodes_data,\n\t\t\tui: ui_data,\n\t\t};\n\n\t\treturn this._data;\n\t}\n\n\tstatic sanitize_string(word: string): string {\n\t\tword = word.replace(/'/g, \"'\"); // escapes ' (used to be with 2 /, but now only one to have Ian's Mediation saved and loaded correctly - but is actually 2 in Code Exporter)\n\t\tword = CoreString.escape_line_breaks(word);\n\t\treturn word;\n\t}\n}\n","export enum LineType {\n\tFUNCTION_DECLARATION = 'function_declaration',\n\tDEFINE = 'define',\n\tBODY = 'body',\n}\n","import {AssemblerControllerNode} from '../Controller';\n\nexport class GlNodeFinder {\n\tstatic find_output_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('output');\n\t\treturn nodes;\n\t\t// if (nodes.length > 1) {\n\t\t// \tnode.states.error.set('only one output node allowed');\n\t\t// }\n\t\t// return nodes[0];\n\t}\n\tstatic find_attribute_export_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('attribute');\n\t\treturn nodes.filter((node) => {\n\t\t\t// do not use attributes that are used as an input, as export\n\t\t\t// return (node.used_output_names().length == 0) &&\n\t\t\treturn node.is_exporting;\n\t\t});\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedCameraControlsEventNode, CameraControls} from './_BaseCameraControls';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CameraOrbitEventParamsConfig extends NodeParamsConfig {\n\tallow_pan = ParamConfig.BOOLEAN(1);\n\tallow_rotate = ParamConfig.BOOLEAN(1);\n\tallow_zoom = ParamConfig.BOOLEAN(1);\n\ttdamping = ParamConfig.BOOLEAN(1);\n\tdamping = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {tdamping: true},\n\t});\n\tscreen_space_panning = ParamConfig.BOOLEAN(1);\n\trotate_speed = ParamConfig.FLOAT(0.5);\n\tmin_distance = ParamConfig.FLOAT(1, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tmax_distance = ParamConfig.FLOAT(50, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tpolar_angle_range = ParamConfig.VECTOR2([0, '$PI']);\n}\nconst ParamsConfig = new CameraOrbitEventParamsConfig();\n\nexport class CameraOrbitControlsEventNode extends TypedCameraControlsEventNode<CameraOrbitEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'camera_orbit_controls';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['controls/OrbitControls'];\n\t// }\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// const c = this.constructor as typeof CameraOrbitControlsEventNode;\n\t\t// const {OrbitControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\tconst controls = new OrbitControls(camera, element);\n\t\treturn controls;\n\t}\n\n\tsetup_controls(controls: OrbitControls) {\n\t\tcontrols.enablePan = this.pv.allow_pan;\n\t\tcontrols.enableRotate = this.pv.allow_rotate;\n\t\tcontrols.enableZoom = this.pv.allow_zoom;\n\n\t\tcontrols.enableDamping = this.pv.tdamping;\n\t\tcontrols.dampingFactor = this.pv.damping;\n\n\t\tcontrols.rotateSpeed = this.pv.rotate_speed;\n\n\t\tcontrols.screenSpacePanning = this.pv.screen_space_panning;\n\n\t\tcontrols.minDistance = this.pv.min_distance;\n\t\tcontrols.maxDistance = this.pv.max_distance;\n\n\t\tcontrols.minPolarAngle = this.pv.polar_angle_range.x;\n\t\tcontrols.maxPolarAngle = this.pv.polar_angle_range.y;\n\n\t\t// to prevent moving the camera when using the arrows to change frame\n\t\tcontrols.enableKeys = false;\n\t}\n\n\tset_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void {\n\t\tconst target = camera_node.params.vector3('target');\n\t\tcontrols.target.copy(target);\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {BaseMatNodeType} from '../_Base';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {BaseCopNodeType} from '../../cop/_Base';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {BooleanParam} from '../../../params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.OPERATOR_PATH(FileCopNode.DEFAULT_NODE_PATH.UV, {visible_if: {use_map: 1}});\n\t};\n}\n// class TextureMapMaterial<T extends string> extends Material {\n// \t[T]!: Texture | null;\n// }\n// class TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\n// class TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n// \tcreate_material() {\n// \t\treturn new TextureMapMaterial();\n// \t}\n// }\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\n// type test = FilterFlags<MeshLambertMaterial, Texture|null>\n// type test2 = AllowedNames<MeshLambertMaterial, Texture|null>\n// type test3 = SubType<MeshLambertMaterial, Texture|null>\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\nexport function OperatorPathOptions(controller: typeof BaseTextureMapController, use_map_name: string) {\n\treturn {\n\t\tvisible_if: {[use_map_name]: 1},\n\t\tnode_selection: {context: NodeContext.COP},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\ntype TextureUpdateCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\ttexture: Texture\n) => void;\ntype TextureRemoveCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>\n) => void;\n\ntype CurrentMaterial = Material | ShaderMaterial;\n\nexport interface UpdateOptions {\n\tdirect_params?: boolean;\n\tuniforms?: boolean;\n\tdefine?: boolean;\n}\nexport class BaseTextureMapController extends BaseController {\n\tconstructor(protected node: BaseMatNodeType, protected _update_options: UpdateOptions) {\n\t\tsuper(node);\n\t\tif (this._update_options.define == null) {\n\t\t\tthis._update_options.define = true;\n\t\t}\n\t}\n\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: OperatorPathParam) {\n\t\tuse_map_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t\tpath_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\tstatic update(node: BaseNodeType) {}\n\n\tasync _update<M extends CurrentMaterial>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: string,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tif (this._update_options.uniforms) {\n\t\t\tconst shader_material = material as ShaderMaterial;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<IUniforms, Texture | null>;\n\t\t\tawait this._update_texture_on_uniforms(shader_material, attr_name, use_map_param, path_param);\n\t\t}\n\t\tif (this._update_options.direct_params) {\n\t\t\tconst mat = material as Material;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<Material, Texture | null>;\n\t\t\tawait this._update_texture_on_material(mat, attr_name, use_map_param, path_param);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE UNIFORMS\n\t//\n\t//\n\tasync _update_texture_on_uniforms<O extends IUniform>(\n\t\tmaterial: ShaderMaterial,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial.uniforms,\n\t\t\tmat_attrib_name as never,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_uniforms.bind(this),\n\t\t\tthis._remove_texture_from_uniforms.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_uniforms<O extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = uniforms[mat_attrib_name] != null && uniforms[mat_attrib_name].value != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>uniforms[mat_attrib_name].value) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\tuniforms[mat_attrib_name].value = texture as any;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tmaterial.defines[define_name] = 1;\n\t\t\t}\n\t\t\tmaterial.defines['USE_UV'] = 1;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_uniforms<U extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: U,\n\t\tmat_attrib_name: keyof SubType<U, Texture | null>\n\t) {\n\t\tif (uniforms[mat_attrib_name].value) {\n\t\t\tuniforms[mat_attrib_name].value = null;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tdelete material.defines[define_name];\n\t\t\t}\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _define_name(mat_attrib_name: string): string {\n\t\treturn 'USE_' + mat_attrib_name.replace('_', '').toUpperCase();\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL\n\t//\n\t//\n\tasync _update_texture_on_material<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial,\n\t\t\tmat_attrib_name,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_material.bind(this),\n\t\t\tthis._remove_texture_from_material.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = texture_owner[mat_attrib_name] != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>texture_owner[mat_attrib_name]) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\ttexture_owner[mat_attrib_name] = texture as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>\n\t) {\n\t\tif (texture_owner[mat_attrib_name]) {\n\t\t\ttexture_owner[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// MAIN ALGO to decide if texture should be updated\n\t//\n\t//\n\tprivate async _update_required_attribute<O extends Object>(\n\t\tmaterial: Material,\n\t\ttexture_owner: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam,\n\t\tupdate_callback: TextureUpdateCallback<O>,\n\t\tremove_callback: TextureRemoveCallback<O>\n\t) {\n\t\tif (use_map_param.is_dirty) {\n\t\t\tawait use_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.is_dirty) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst found_node = path_param.found_node();\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t\t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t\t\t\t\tconst container = await texture_node.request_container();\n\t\t\t\t\tconst texture = container.texture();\n\n\t\t\t\t\tif (texture) {\n\t\t\t\t\t\tupdate_callback(material, texture_owner, mat_attrib_name, texture);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.node.states.error.set(`found node has no texture`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set(`found map node is not a COP node`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set(`could not find map node ${path_param.name} with path ${path_param.value}`);\n\t\t\t}\n\t\t}\n\t\t// this is not wrapped in an else clause after the \"if (use_map) {\"\n\t\t// as we should come here after any of the errors above, if any is triggered\n\t\tremove_callback(material, texture_owner, mat_attrib_name);\n\t}\n\n\tprivate _do_update_define(): boolean {\n\t\tif (this._update_options.define == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._update_options.define;\n\t}\n}\n","import {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderAssemblerCustomMeshDistance} from './CustomMeshDistance';\nimport {ShaderAssemblerCustomMeshDepth} from './CustomMeshDepth';\nimport {ShaderAssemblerCustomMeshDepthDOF} from './CustomMeshDepthDOF';\n\nconst ASSEMBLER_MAP: CustomAssemblerMap = new Map([\n\t// [CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance],\n\t// [CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth],\n\t// [CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF],\n]);\nASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF);\n\nexport abstract class ShaderAssemblerMesh extends ShaderAssemblerMaterial {\n\t// TODO: I've noticed a case where instances would not display when those shadow shaders were exported\n\t// But the objects display fine if those are not assigned\n\t// so it could be a bug at render time (not sure if my code, threejs or hardware)\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn ASSEMBLER_MAP;\n\t}\n}\n","import {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {Light} from 'three/src/lights/Light';\nimport {Color} from 'three/src/math/Color';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {Group} from 'three/src/objects/Group';\n\nexport abstract class TypedLightObjNode<L extends Light, K extends NodeParamsConfig> extends TypedObjNode<Group, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.LIGHT;\n\tprotected _color_with_intensity = new Color(0x00000);\n\tprotected _light!: L;\n\tget light() {\n\t\treturn this._light;\n\t}\n\tprotected abstract create_light(): L;\n\tprotected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis._light = this.create_light();\n\t\tthis.object.add(this._light);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis.update_light_attachment();\n\t\t});\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.used_in_scene) {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\tprivate update_light_attachment() {\n\t\tif (this.flags.display.active) {\n\t\t\tthis.object.add(this.light);\n\t\t\tthis._cook_main_without_inputs_when_dirty();\n\t\t} else {\n\t\t\tthis.object.remove(this.light);\n\t\t}\n\t}\n\n\t// create_params() {\n\t// \t// this.create_light_params();\n\t// \t// this.create_shadow_params_main();\n\t// }\n\n\tcreate_shadow_params_main() {\n\t\tif (this._light.shadow != null) {\n\t\t\treturn this.create_shadow_params();\n\t\t}\n\t}\n\n\tprotected create_light_params(): void {}\n\tprotected update_light_params(): void {}\n\n\tprotected create_shadow_params() {\n\t\treturn;\n\t\t// this.add_param('toggle', 'cast_shadows', 1);\n\t\t// shadow_options = {visible_if: {cast_shadows: 1}}\n\t\t// this.add_param( 'vector2', 'shadow_res', [1024, 1024], shadow_options );\n\t\t// this.add_param( 'float', 'shadow_near', 0.1, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_far', 100, shadow_options );\n\t\t// // this.add_param( 'float', 'shadow_far', 500 ) # same as param distance\n\t\t// this.add_param( 'float', 'shadow_bias', -0.0001, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_blur', 1, shadow_options );\n\t}\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tcook() {\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\tupdate_shadow_params() {\n\t\t// let object;\n\t\t// return;\n\t\t// if (((object = this.object()) != null) && (object.shadow != null)) {\n\t\t// \tobject.castShadow = this._param_cast_shadow;\n\t\t// \tobject.shadow.mapSize.width = this._param_shadow_res.x;\n\t\t// \tobject.shadow.mapSize.height = this._param_shadow_res.y;\n\t\t// \tobject.shadow.camera.near = this._param_shadow_near;\n\t\t// \tobject.shadow.camera.far = this._param_shadow_far;\n\t\t// \treturn object.shadow.bias = this._param_shadow_bias;\n\t\t// }\n\t}\n\n\tget color_with_intensity() {\n\t\tconst color = this.params.color('color');\n\t\tconst intensity = this.params.float('intensity');\n\t\tthis._color_with_intensity.copy(color).multiplyScalar(intensity);\n\t\treturn this._color_with_intensity;\n\t}\n\tget active(): boolean {\n\t\treturn this.flags.display.active;\n\t}\n}\n\nexport type BaseLightObjNodeType = TypedLightObjNode<Light, NodeParamsConfig>;\n// export class BaseLightObjNodeClass extends TypedLightObjNode<Light, NodeParamsConfig> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {Material} from 'three/src/materials/Material';\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Bone} from 'three/src/objects/Bone';\n\n// import {CoreConstant} from './Constant'\nimport {CoreGeometry} from './Geometry';\nimport {GroupString} from './Group';\nimport {CoreAttribute} from './Attribute';\nimport {CoreConstant} from './Constant';\nimport {CorePoint} from './Point';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from './Material';\nimport {CoreString} from '../String';\n\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreEntity} from './Entity';\nconst PTNUM = 'ptnum';\nconst NAME_ATTR = 'name';\nconst ATTRIBUTES = 'attributes';\n\ninterface Object3DWithAnimations extends Object3D {\n\tanimations: AnimationClip[];\n}\ninterface MaterialWithColor extends Material {\n\tcolor: Color;\n}\n// interface SkinnedMeshWithisSkinnedMesh extends SkinnedMesh {\n// \treadonly isSkinnedMesh: boolean;\n// }\n\nexport class CoreObject extends CoreEntity {\n\tconstructor(private _object: Object3D, index: number) {\n\t\tsuper(index);\n\t\tif (this._object.userData[ATTRIBUTES] == null) {\n\t\t\tthis._object.userData[ATTRIBUTES] = {};\n\t\t}\n\t}\n\n\t// set_index(i: number) {\n\t// \tthis._index = i;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tgeometry() {\n\t\treturn (this._object as Mesh).geometry as BufferGeometry;\n\t}\n\tcore_geometry(): CoreGeometry {\n\t\tconst geo = this.geometry();\n\t\treturn new CoreGeometry(geo);\n\t\t// const geo = this.geometry()\n\t\t// if (geo) {\n\t\t// \treturn new CoreGeometry(geo)\n\t\t// } else {\n\t\t// \treturn null\n\t\t// }\n\t}\n\tpoints() {\n\t\treturn this.core_geometry().points();\n\t}\n\tpoints_from_group(group: GroupString): CorePoint[] {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tif (indices) {\n\t\t\t\tconst points = this.points();\n\t\t\t\treturn indices.map((i) => points[i]);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis.core_geometry().compute_vertex_normals();\n\t}\n\n\tadd_attribute(name: string, value: AttribValue) {\n\t\tlet data;\n\t\tif (!lodash_isNumber(value) && !lodash_isArray(value) && !lodash_isString(value)) {\n\t\t\tdata = (value as Vector3).toArray();\n\t\t} else {\n\t\t\tdata = value;\n\t\t}\n\t\tthis._object.userData[ATTRIBUTES][name] = data;\n\t}\n\tadd_numeric_attrib(name: string, value: NumericAttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tset_attrib_value(name: string, value: AttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\t\tthis.core_geometry().add_numeric_attrib(name, size, default_value);\n\t}\n\n\tattribute_names(): string[] {\n\t\t// TODO: to remove\n\t\treturn Object.keys(this._object.userData[ATTRIBUTES]);\n\t}\n\tattrib_names(): string[] {\n\t\treturn this.attribute_names();\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\treturn this.attribute_names().includes(name);\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tthis.add_attribute(new_name, this.attrib_value(old_name));\n\t\tthis.delete_attribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tdelete this._object.userData[ATTRIBUTES][name];\n\t}\n\n\tattrib_value(name: string): AttribValue {\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet val = this._object.userData[ATTRIBUTES][name];\n\t\t\tif (val == null) {\n\t\t\t\tif (name == NAME_ATTR) {\n\t\t\t\t\tval = this._object.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t}\n\tname(): string {\n\t\treturn this.attrib_value(NAME_ATTR) as string;\n\t}\n\thuman_type(): string {\n\t\treturn CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[this._object.constructor.name];\n\t}\n\n\tattrib_type(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (lodash_isString(val)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_size(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (lodash_isString(val) || lodash_isNumber(val)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tswitch (val.constructor) {\n\t\t\t\tcase Vector2:\n\t\t\t\t\treturn 2;\n\t\t\t\tcase Vector3:\n\t\t\t\t\treturn 3;\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn CoreObject.clone(this._object);\n\t}\n\n\tstatic clone(src_object: Object3D) {\n\t\tconst new_object = src_object.clone();\n\n\t\tvar sourceLookup = new Map<Object3D, Object3D>();\n\t\tvar cloneLookup = new Map<Object3D, Object3D>();\n\t\tCoreObject.parallelTraverse(src_object, new_object, function (sourceNode: Object3D, clonedNode: Object3D) {\n\t\t\tsourceLookup.set(clonedNode, sourceNode);\n\t\t\tcloneLookup.set(sourceNode, clonedNode);\n\t\t});\n\t\tnew_object.traverse(function (node) {\n\t\t\tconst src_node = sourceLookup.get(node) as SkinnedMesh;\n\t\t\tconst mesh_node = node as Mesh;\n\n\t\t\tif (mesh_node.geometry) {\n\t\t\t\tconst src_node_geometry = src_node.geometry as BufferGeometry;\n\t\t\t\tmesh_node.geometry = CoreGeometry.clone(src_node_geometry);\n\t\t\t\tconst mesh_node_geometry = mesh_node.geometry as BufferGeometry;\n\t\t\t\tif (mesh_node_geometry.userData) {\n\t\t\t\t\tmesh_node_geometry.userData = lodash_cloneDeep(src_node_geometry.userData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mesh_node.material) {\n\t\t\t\tmesh_node.material = src_node.material;\n\t\t\t\tCoreMaterial.apply_custom_materials(node, mesh_node.material as ShaderMaterialWithCustomMaterials);\n\n\t\t\t\t// prevents crashes for linesegments with shader material such as the line dashed instance\n\t\t\t\t// TODO: test\n\t\t\t\tconst material_with_color = mesh_node.material as MaterialWithColor;\n\t\t\t\tif (material_with_color.color == null) {\n\t\t\t\t\tmaterial_with_color.color = new Color(1, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src_object.userData) {\n\t\t\t\tnode.userData = lodash_cloneDeep(src_node.userData);\n\t\t\t}\n\n\t\t\tconst src_node_with_animations = (<unknown>src_node) as Object3DWithAnimations;\n\t\t\tif (src_node_with_animations.animations) {\n\t\t\t\t(node as Object3DWithAnimations).animations = src_node_with_animations.animations.map((animation) =>\n\t\t\t\t\tanimation.clone()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst skinned_node = node as SkinnedMesh;\n\t\t\tif (skinned_node.isSkinnedMesh) {\n\t\t\t\tvar clonedMesh = skinned_node;\n\t\t\t\tvar sourceMesh = src_node;\n\t\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\t\tclonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n\n\t\t\t\tconst new_bones = sourceBones.map(function (bone) {\n\t\t\t\t\treturn cloneLookup.get(bone);\n\t\t\t\t}) as Bone[];\n\n\t\t\t\tclonedMesh.skeleton.bones = new_bones;\n\n\t\t\t\tclonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n\t\t\t}\n\t\t});\n\n\t\treturn new_object;\n\t}\n\n\tstatic parallelTraverse(a: Object3D, b: Object3D, callback: (a: Object3D, b: Object3D) => void) {\n\t\tcallback(a, b);\n\t\tfor (var i = 0; i < a.children.length; i++) {\n\t\t\tthis.parallelTraverse(a.children[i], b.children[i], callback);\n\t\t}\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InterleavedBuffer} from 'three/src/core/InterleavedBuffer';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\nimport {TriangleFanDrawMode} from 'three/src/constants';\nimport {TriangleStripDrawMode} from 'three/src/constants';\nimport {TrianglesDrawMode} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tvar vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new Vector3(), tmp2 = new Vector3();\n\t\tvar n = new Vector3(), n2 = new Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) return null;\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) return null;\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) return null;\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) return null;\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) return null;\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) return null;\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) return null;\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) return null;\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.warn( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n\nexport { BufferGeometryUtils };\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {BaseGlNodeType} from '../../_Base';\n// import {Definition} from '../../Definition/_Module'\n// import { VariableConfig } from '../Config/VariableConfig';\nimport {TextureAllocationsController} from '../utils/TextureAllocationsController';\nimport {GlobalsGeometryHandler} from './Geometry';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {UniformGLDefinition, AttributeGLDefinition, VaryingGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig'\n// import {UniformConfig} from '../Config/UniformConfig'\n// import {AttributeConfig} from '../Config/AttributeConfig'\n// import { Attribute } from '../../Attribute';\n\nexport class GlobalsTextureHandler extends GlobalsBaseController {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tstatic UV_ATTRIB = 'particles_sim_uv_attrib';\n\tstatic UV_VARYING = 'particles_sim_uv_varying';\n\tstatic PARTICLE_SIM_UV = 'particleUV';\n\n\tprivate globals_geometry_handler: GlobalsGeometryHandler | undefined;\n\n\tconstructor(private _uv_name: string) {\n\t\tsuper();\n\t}\n\n\tset_texture_allocations_controller(controller: TextureAllocationsController) {\n\t\tthis._texture_allocations_controller = controller;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\n\t\tconst variable = this._texture_allocations_controller.variable(output_name);\n\n\t\tif (variable && connection_point) {\n\t\t\tconst gl_type = connection_point.type;\n\t\t\tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shaders_collection_controller);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t} else {\n\t\t\tthis.globals_geometry_handler = this.globals_geometry_handler || new GlobalsGeometryHandler();\n\t\t\tthis.globals_geometry_handler.handle_globals_node(\n\t\t\t\tglobals_node,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t// body_lines,\n\t\t\t\t// dependencies,\n\t\t\t\t// shader_name\n\t\t\t);\n\t\t}\n\n\t\t// definitions\n\t\t// const gl_type = named_output.gl_type()\n\t\t// const definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t// definitions_by_shader_name[shader_name].push(definition)\n\n\t\t// const new_value = this.read_attribute(globals_node, gl_type, output_name)\n\t\t// const body_line = `${var_name} = ${new_value}`\n\t\t// if(allocation){\n\t\t// \tconst var_name_texture = allocation.texture_name()\n\t\t// \t// add another definition if a texture was allocated by ParticlesSystemGPU\n\t\t// \tconst texture_definition = new Definition.Uniform(globals_node, 'sampler2D', var_name_texture)\n\t\t// \tdefinitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t// \t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', GlobalsTextureHandler.UV_ATTRIB)\n\t\t// \t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t// \t// this.add_particles_sim_uv_attribute(globals_node)\n\n\t\t// \tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shader_name)\n\t\t// \tbody_line = `${var_name} = ${new_value}`\n\n\t\t// } else {\n\t\t// \tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// }\n\n\t\t// const new_body_lines = [\n\t\t// \t// `${var_name} = vec3(${output_name})`,\n\t\t// \t`vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz;`\n\t\t// ]\n\t\t// const body_line = `vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz`\n\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// if(dependencies.length == 0){\n\t\t// \tbody_lines.push(body_line)\n\t\t// }\n\t}\n\t// variable_config_default(variable_name: string): string {\n\t// \t// const allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \t// if(allocation){\n\t// \t// \treturn `texture2D( texture_${allocation.name()}, ${GlobalsTextureHandler.UV_VARYING} ).xyz`\n\t// \t// } else {\n\t// \t// \tGlobalsGeometryHandler.variable_config_default(variable_name)\n\t// \t// }\n\t// \tthrow 'do I go through here?';\n\t// \treturn this.read_attribute(variable_name);\n\t// }\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \tconst allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \tif(allocation){\n\t// \t\treturn [\n\t// \t\t\tnew AttributeConfig('vec2', GlobalsTextureHandler.UV_ATTRIB),\n\t// \t\t\tnew UniformConfig('sampler2D', `texture_${allocation.name()}`)\n\t// \t\t]\n\t// \t}\n\t// }\n\n\t// static remap_instance_attribute(name:string):string{\n\t// \tif(name == 'instancePosition'){\n\t// \t\treturn 'position'\n\t// \t}\n\t// \treturn name\n\t// }\n\t// static variable_name_to_instance_attrib(name:string):string{\n\t// \tif(name == 'position'){\n\t// \t\treturn 'instancePosition'\n\t// \t}\n\t// \treturn name\n\t// }\n\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\t\t// attrib_name = GlobalsTextureHandler.remap_instance_attribute(attrib_name)\n\n\t\tconst texture_variable = this._texture_allocations_controller.variable(attrib_name);\n\n\t\tif (texture_variable) {\n\t\t\tthis.add_particles_sim_uv_attribute(node, shaders_collection_controller);\n\t\t\t// const texture_variable = allocation.variable(attrib_name)\n\t\t\t// if(!texture_variable){\n\t\t\t// \tconsole.error(`no tex var found for ${attrib_name}`)\n\t\t\t// \tthis._texture_allocations_controller.print(node.scene())\n\t\t\t// }\n\t\t\tconst component = texture_variable.component;\n\t\t\tconst allocation = texture_variable.allocation;\n\t\t\tif (allocation) {\n\t\t\t\t// const definitions_by_shader_name = {}\n\t\t\t\t// definitions_by_shader_name[shader_name] = []\n\t\t\t\tconst var_name_texture = allocation.texture_name;\n\t\t\t\tconst texture_definition = new UniformGLDefinition(\n\t\t\t\t\tnode,\n\t\t\t\t\tConnectionPointType.SAMPLER_2D,\n\t\t\t\t\tvar_name_texture\n\t\t\t\t);\n\t\t\t\t// definitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t\t\tshaders_collection_controller.add_definitions(node, [texture_definition]);\n\n\t\t\t\t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', 'particles_sim_uv')\n\t\t\t\t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t\t\tconst body_line = `texture2D( ${var_name_texture}, ${this._uv_name} ).${component}`;\n\t\t\t\treturn body_line;\n\t\t\t}\n\t\t} else {\n\t\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t\t}\n\t}\n\n\tadd_particles_sim_uv_attribute(node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const shader_names = ['vertex', 'fragment'];\n\t\t// const definitions_by_shader_name:Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t// definitions_by_shader_name.set(ShaderName.FRAGMENT, [])\n\t\t// for (let shader_name of shader_names) {\n\t\t// \tdefinitions_by_shader_name[shader_name] = [];\n\t\t// }\n\n\t\tconst particles_sim_uv_attrib_definition = new AttributeGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_ATTRIB\n\t\t);\n\t\tconst particles_sim_uv_varying_definition = new VaryingGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_VARYING\n\t\t);\n\n\t\tshaders_collection_controller.add_definitions(\n\t\t\tnode,\n\t\t\t[particles_sim_uv_attrib_definition, particles_sim_uv_varying_definition],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t\tshaders_collection_controller.add_definitions(node, [particles_sim_uv_varying_definition], ShaderName.FRAGMENT);\n\n\t\tshaders_collection_controller.add_body_lines(\n\t\t\tnode,\n\t\t\t[`${GlobalsTextureHandler.UV_VARYING} = ${GlobalsTextureHandler.UV_ATTRIB}`],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten'\n// import lodash_map from 'lodash/map'\n\nimport {CoreGeometry} from '../Geometry';\nimport {CorePoint} from '../Point';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nexport class CoreGeometryUtilCurve {\n\tstatic accumulated_curve_point_indices(indices: number[]) {\n\t\tlet curve_point_indices: number[] = [];\n\t\tconst accumulated_curve_point_indices = [];\n\t\tlet last_index_added: number | null = null;\n\n\t\t// indices.forEach((index, i) => {\n\t\tlet index: number;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tif (i % 2 === 1) {\n\t\t\t\tindex = indices[i];\n\t\t\t\tconst previous_index = indices[i - 1];\n\n\t\t\t\t// if the last added index, from the previous segment\n\t\t\t\t// is the same as the start of the current segment (indices[i-1])\n\t\t\t\t// then this is part of the same curve\n\t\t\t\tif (last_index_added == null || previous_index === last_index_added) {\n\t\t\t\t\t// add the first point\n\t\t\t\t\tif (curve_point_indices.length === 0) {\n\t\t\t\t\t\tcurve_point_indices.push(previous_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve_point_indices.push(index);\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise we create a new curve\n\t\t\t\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\t\t\t\t\t//current_points = lodash_map curve_point_indices, (index)->points[index]\n\t\t\t\t\t//curve_point_indices_groups.push(current_points)\n\t\t\t\t\t//this._create_curve_from_points(current_points)\n\n\t\t\t\t\t// and reset the array\n\t\t\t\t\tcurve_point_indices = [previous_index, index];\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// also create with the remaining ones\n\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\n\t\treturn accumulated_curve_point_indices;\n\t}\n\n\tstatic create_line_segment_geometry(\n\t\tpoints: CorePoint[],\n\t\tindices: number[],\n\t\tattrib_names: string[],\n\t\tattrib_sizes_by_name: Dictionary<number>\n\t) {\n\t\t// let new_positions: number[] = []\n\t\tconst new_indices: number[] = [];\n\n\t\tconst new_attribute_values_by_name: Dictionary<number[]> = {};\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tnew_attribute_values_by_name[attrib_name] = [];\n\t\t});\n\n\t\tindices.forEach((index, i) => {\n\t\t\tconst point = points[index];\n\t\t\t// const position = point.position();\n\t\t\t// new_positions.push(position.toArray());\n\t\t\tattrib_names.forEach((attrib_name) => {\n\t\t\t\tlet attrib_value = point.attrib_value(attrib_name);\n\t\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\t\tif (attrib_size > 1) {\n\t\t\t\t\tattrib_value = attrib_value.toArray();\n\t\t\t\t} else {\n\t\t\t\t\tattrib_value = [attrib_value];\n\t\t\t\t}\n\t\t\t\tattrib_value.forEach((v: number) => {\n\t\t\t\t\tnew_attribute_values_by_name[attrib_name].push(v);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (i > 0) {\n\t\t\t\tnew_indices.push(i - 1);\n\t\t\t\tnew_indices.push(i);\n\t\t\t}\n\t\t});\n\n\t\t// new_positions = lodash_flatten(new_positions)\n\t\tconst geometry = new BufferGeometry();\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\tconst values = new_attribute_values_by_name[attrib_name];\n\t\t\tgeometry.setAttribute(attrib_name, new Float32BufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tgeometry.setIndex(new_indices);\n\t\treturn geometry;\n\t}\n\n\tstatic line_segment_to_geometries(geometry: BufferGeometry) {\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst attrib_names = core_geometry.attrib_names();\n\t\tconst points = core_geometry.points();\n\t\tconst indices = (geometry.getIndex()?.array as number[]) || [];\n\n\t\tconst accumulated_curve_point_indices = this.accumulated_curve_point_indices(indices);\n\t\tconsole.log(indices, accumulated_curve_point_indices);\n\n\t\tif (accumulated_curve_point_indices.length > 0) {\n\t\t\tconst attribute_sizes_by_name = core_geometry.attrib_sizes();\n\n\t\t\taccumulated_curve_point_indices.forEach((curve_point_indices, i) => {\n\t\t\t\tgeometry = this.create_line_segment_geometry(\n\t\t\t\t\tpoints,\n\t\t\t\t\tcurve_point_indices,\n\t\t\t\t\tattrib_names,\n\t\t\t\t\tattribute_sizes_by_name\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t});\n\t\t}\n\n\t\treturn geometries;\n\t}\n}\n","import {TypedEventNode, BaseEventNodeType} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ACCEPTED_MOUSE_EVENT_TYPES} from '../../scene/utils/events/MouseEventsController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MouseEventParamsConfig extends NodeParamsConfig {\n\tactive = ParamConfig.BOOLEAN(true, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tMouseEventNode.PARAM_CALLBACK_toggle_active(node as MouseEventNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new MouseEventParamsConfig();\n\nexport class MouseEventNode extends TypedEventNode<MouseEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mouse_event';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\tACCEPTED_MOUSE_EVENT_TYPES.map((event_type) => {\n\t\t\t\treturn new TypedNamedConnectionPoint(event_type, ConnectionPointType.BOOL);\n\t\t\t})\n\t\t);\n\n\t\tthis.lifecycle.add_on_add_hook(() => {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t});\n\t\tthis.lifecycle.add_delete_hook(() => {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t});\n\t}\n\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tif (!this.pv.active) {\n\t\t\treturn;\n\t\t}\n\t\tconst index = this.io.outputs.get_output_index(event.type);\n\t\tif (index >= 0) {\n\t\t\tconst connections = this.io.connections.output_connections();\n\t\t\tconst current_connections = connections.filter((connection) => connection.output_index == index);\n\t\t\tconst nodes: BaseEventNodeType[] = current_connections.map(\n\t\t\t\t(connection) => connection.node_dest\n\t\t\t) as BaseEventNodeType[];\n\t\t\tfor (let node of nodes) {\n\t\t\t\tnode.process_event(event, canvas, camera_node);\n\t\t\t}\n\t\t}\n\t}\n\n\t_update_register() {\n\t\tif (this.pv.active) {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t} else {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_toggle_active(node: MouseEventNode) {\n\t\tnode._update_register();\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nexport class BaseState {\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseNodeType} from '../_Base';\nimport {NodeUIDataJson} from './UIData';\nimport {TypedNamedConnectionPointData} from './connections/NamedConnectionPoint';\nimport {ConnectionPointType} from './connections/ConnectionPointType';\n\nexport interface NodeSerializerData {\n\tname: string;\n\ttype: string;\n\tgraph_node_id: string;\n\tis_dirty: boolean;\n\tui_data_json: NodeUIDataJson;\n\terror_message: string | undefined;\n\tchildren: string[];\n\tinputs: Array<string | undefined>;\n\tinput_connection_output_indices: Array<number | undefined> | undefined;\n\tnamed_input_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tnamed_output_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tparam_ids: string[];\n\t// spare_params: Dictionary<string>;\n\toverride_clonable_state: boolean;\n\tinputs_clonable_state_with_override: boolean[];\n\tflags?: {\n\t\t//has_display: this.has_display_flag()\n\t\tdisplay?: boolean;\n\t\tbypass?: boolean;\n\t};\n\tselection?: string[];\n}\n\nexport class NodeSerializer {\n\tconstructor(private node: BaseNodeType) {}\n\n\t// serialize() {\n\t// \treturn this.to_json();\n\t// }\n\n\t// TODO: find a way to not re-create a json everytime\n\tto_json(include_param_components: boolean = false): NodeSerializerData {\n\t\t// const spare_params_json_by_name = {};\n\t\t// lodash_each(this.node.spare_param_names(), param_name=> {\n\t\t// \tconst param = this.node.spare_param(param_name);\n\t\t// \tspare_params_json_by_name[param_name] = param.graph_node_id;\n\t\t// });\n\n\t\tconst data = {\n\t\t\tname: this.node.name,\n\t\t\ttype: this.node.type,\n\t\t\tgraph_node_id: this.node.graph_node_id,\n\t\t\tis_dirty: this.node.is_dirty,\n\t\t\tui_data_json: this.node.ui_data.to_json(),\n\t\t\terror_message: this.node.states.error.message,\n\t\t\tchildren: this.children_ids(),\n\t\t\tinputs: this.input_ids(),\n\t\t\tinput_connection_output_indices: this.connection_input_indices(),\n\t\t\tnamed_input_connections: this.named_input_connections(),\n\t\t\tnamed_output_connections: this.named_output_connections(),\n\t\t\tparam_ids: this.to_json_params(include_param_components),\n\t\t\t// spare_params: this.to_json_spare_params(include_param_components),\n\t\t\toverride_clonable_state: this.node.io.inputs.override_clonable_state(),\n\t\t\tinputs_clonable_state_with_override: this.node.io.inputs.inputs_clonable_state_with_override(),\n\t\t\tflags: {\n\t\t\t\t//has_display: this.has_display_flag()\n\t\t\t\tdisplay: this.node.flags?.display?.active,\n\t\t\t\tbypass: this.node.flags?.bypass?.active,\n\t\t\t},\n\t\t\tselection: undefined as string[] | undefined,\n\t\t};\n\n\t\tif (this.node.children_allowed() && this.node.children_controller) {\n\t\t\tdata['selection'] = this.node.children_controller.selection.to_json();\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tchildren_ids(): string[] {\n\t\treturn this.node.children().map((node) => node.graph_node_id);\n\t}\n\n\tinput_ids(): (string | undefined)[] {\n\t\treturn this.node.io.inputs.inputs().map((node) => (node != null ? node.graph_node_id : undefined));\n\t}\n\n\tconnection_input_indices() {\n\t\treturn this.node.io.connections\n\t\t\t.input_connections()\n\t\t\t?.map((connection) => (connection != null ? connection.output_index : undefined));\n\t}\n\tnamed_input_connections() {\n\t\treturn this.node.io.inputs.named_input_connection_points.map((i) => i.to_json());\n\t}\n\tnamed_output_connections() {\n\t\treturn this.node.io.outputs.named_output_connection_points.map((o) => o.to_json());\n\t}\n\n\tto_json_params_from_names(param_names: string[], include_components: boolean = false) {\n\t\treturn param_names.map((param_name) => {\n\t\t\treturn this.node.params.get(param_name)!.graph_node_id;\n\t\t});\n\t\t// const params_json_by_name: Dictionary<string> = {};\n\t\t// for (let param_name of param_names) {\n\t\t// \tconst param = this.node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tparams_json_by_name[param_name] = param.graph_node_id;\n\n\t\t// \t\tif (include_components && param.is_multiple && param.components) {\n\t\t// \t\t\tfor (let component of param.components) {\n\t\t// \t\t\t\tparams_json_by_name[component.name] = component.graph_node_id;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t\t// return params_json_by_name;\n\t}\n\tto_json_params(include_components: boolean = false) {\n\t\treturn this.to_json_params_from_names(this.node.params.names, include_components);\n\t}\n\t// to_json_params_without_components(){\n\t// \treturn this.to_json_params(false)\n\t// }\n\t// to_json_params_with_components(){\n\t// \treturn this.to_json_params(true)\n\t// }\n\t// to_json_spare_params(include_components: boolean = false) {\n\t// \treturn this.to_json_params_from_names(this.node.params.spare_names, include_components);\n\t// }\n}\n","import {BooleanParam} from '../Boolean';\nimport {ButtonParam} from '../Button';\nimport {ColorParam} from '../Color';\nimport {FloatParam} from '../Float';\nimport {FolderParam} from '../Folder';\nimport {IntegerParam} from '../Integer';\nimport {OperatorPathParam} from '../OperatorPath';\nimport {RampParam} from '../Ramp';\nimport {SeparatorParam} from '../Separator';\nimport {StringParam} from '../String';\nimport {Vector2Param} from '../Vector2';\nimport {Vector3Param} from '../Vector3';\nimport {Vector4Param} from '../Vector4';\n\nimport {ParamType} from '../../poly/ParamType';\n\ntype ParamClassMapType = {[key in ParamType]: any};\nexport const ParamConstructorByType: ParamClassMapType = {\n\t[ParamType.BOOLEAN]: BooleanParam,\n\t[ParamType.BUTTON]: ButtonParam,\n\t[ParamType.COLOR]: ColorParam,\n\t[ParamType.FLOAT]: FloatParam,\n\t[ParamType.FOLDER]: FolderParam,\n\t[ParamType.INTEGER]: IntegerParam,\n\t[ParamType.OPERATOR_PATH]: OperatorPathParam,\n\t[ParamType.RAMP]: RampParam,\n\t[ParamType.SEPARATOR]: SeparatorParam,\n\t[ParamType.STRING]: StringParam,\n\t[ParamType.VECTOR2]: Vector2Param,\n\t[ParamType.VECTOR3]: Vector3Param,\n\t[ParamType.VECTOR4]: Vector4Param,\n};\n","import {BaseParamType} from '../_Base';\nimport {ExpressionManager} from '../../expressions/ExpressionManager';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreEntity} from '../../../core/geometry/Entity';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamValuesTypeMap} from '../types/ParamValuesTypeMap';\nimport {CoreObject} from '../../../core/geometry/Object';\n\n// type ParamTypeElem = ParamType;\ntype EntityCallback<T extends ParamType> = (\n\tentity: CoreEntity,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype PointEntityCallback<T extends ParamType> = (\n\tentity: CorePoint,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype ObjectEntityCallback<T extends ParamType> = (\n\tentity: CoreObject,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\n\nexport class ExpressionController<T extends ParamType> {\n\tprotected _expression: string | undefined;\n\tprotected _entities: CoreEntity[] | undefined;\n\tprotected _entity_callback: EntityCallback<T> | undefined;\n\tprotected _manager: ExpressionManager | undefined;\n\t// private _reset_bound = this.reset.bind(this);\n\tconstructor(protected param: BaseParamType) {\n\t\t// this.param.dirty_controller.add_post_dirty_hook('expression_controller_reset', this._reset_bound);\n\t}\n\t// remove_dirty_hook() {\n\t// \t// this.param.dirty_controller.remove_post_dirty_hook('expression_controller_reset');\n\t// }\n\n\tget active() {\n\t\treturn this._expression != null;\n\t}\n\tget expression() {\n\t\treturn this._expression;\n\t}\n\tget is_errored() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.is_errored;\n\t\t}\n\t\treturn false;\n\t}\n\tget error_message() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.error_message;\n\t\t}\n\t\treturn null;\n\t}\n\tget requires_entities() {\n\t\treturn this.param.options.is_expression_for_entities;\n\t}\n\t// private reset() {\n\t// \tthis._manager?.clear_error();\n\t// }\n\n\tset_expression(expression: string | undefined, set_dirty: boolean = true) {\n\t\tthis.param.scene.missing_expression_references_controller.deregister_param(this.param);\n\t\tthis.param.scene.expressions_controller.deregister_param(this.param);\n\n\t\tif (this._expression != expression) {\n\t\t\tthis._expression = expression;\n\n\t\t\tif (this._expression) {\n\t\t\t\tthis._manager = this._manager || new ExpressionManager(this.param);\n\t\t\t\tthis._manager.parse_expression(this._expression);\n\t\t\t} else {\n\t\t\t\tthis._manager?.reset();\n\t\t\t}\n\n\t\t\tif (set_dirty) {\n\t\t\t\tthis.param.set_dirty();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tif (this._manager && this.active) {\n\t\t\tthis._manager.update_from_method_dependency_name_change();\n\t\t}\n\t}\n\n\tasync compute_expression() {\n\t\tif (this._manager && this.active) {\n\t\t\tconst result = await this._manager.compute_function();\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate async compute_expression_for_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis.set_entities(entities, callback);\n\t\tawait this.compute_expression();\n\t\tif (this._manager?.error_message) {\n\t\t\tthis.param.node.states.error.set(`expression evalution error: ${this._manager?.error_message}`);\n\t\t}\n\n\t\tthis.reset_entities();\n\t}\n\tcompute_expression_for_points(entities: CorePoint[], callback: PointEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tcompute_expression_for_objects(entities: CoreObject[], callback: ObjectEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tget entities() {\n\t\treturn this._entities;\n\t}\n\tget entity_callback() {\n\t\treturn this._entity_callback;\n\t}\n\tset_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis._entities = entities;\n\t\tthis._entity_callback = callback;\n\t}\n\treset_entities() {\n\t\tthis._entities = undefined;\n\t\tthis._entity_callback = undefined;\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n\nimport jsep from 'jsep';\njsep.addUnaryOp('@');\n// self.jsep = jsep\nlet precedence = 10;\njsep.addBinaryOp('**', precedence);\n// precedence = 1\n// jsep.addBinaryOp('`', precedence)\n// const HOUDINI_QUOTE_CODE = 96; // houdini quote\n// const JSEP_COMPOUND = 'Compound'\nconst JSEP_IDENTIFIER = 'Identifier';\nconst JSEP_LITERAL = 'Literal';\n// const JSEP_BINARY_EXPRESSION = 'BynaryExpression'\nconst JSEP_CALL_EXPRESSION = 'CallExpression';\nconst STRING_EXPRESSION_SEPARATOR = '`';\n\nexport class ParsedTree {\n\tpublic node: jsep.Expression | undefined;\n\tpublic error_message: string | undefined;\n\n\tconstructor() {}\n\n\tparse_expression(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\t\t\tthis.node = jsep(string);\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\tparse_expression_for_string_param(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\n\t\t\tconst elements = ParsedTree.string_value_elements(string);\n\t\t\tconst nodes = [];\n\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\tconst element = elements[i];\n\t\t\t\tlet node;\n\t\t\t\tif (i % 2 == 1) {\n\t\t\t\t\tnode = jsep(element);\n\t\t\t\t} else {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: JSEP_LITERAL,\n\t\t\t\t\t\tvalue: `'${element}'`,\n\t\t\t\t\t\traw: `'${element}'`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tnodes.push(node);\n\t\t\t\t// nodes.push({\n\t\t\t\t// \ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\t// \targuments: [node],\n\t\t\t\t// \tcallee: {\n\t\t\t\t// \t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t// \t\tname: 'toString',\n\t\t\t\t// \t}\n\t\t\t\t// })\n\t\t\t}\n\t\t\t// let last_plus_node;\n\t\t\t// for(let i=0; i<(nodes.length-1); i++){\n\t\t\t// \tconst plus_node = {\n\t\t\t// \t\ttype: JSEP_BINARY_EXPRESSION,\n\t\t\t// \t\toperator: '+',\n\t\t\t// \t\tleft: last_plus_node || nodes[i],\n\t\t\t// \t\tright: nodes[i+1],\n\t\t\t// \t}\n\t\t\t// \tlast_plus_node = plus_node;\n\t\t\t// }\n\t\t\t// this.node = last_plus_node\n\t\t\tthis.node = (<unknown>{\n\t\t\t\ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\targuments: nodes,\n\t\t\t\tcallee: {\n\t\t\t\t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t\tname: 'str_concat',\n\t\t\t\t},\n\t\t\t}) as jsep.Compound;\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\n\tstatic string_value_elements(v: string): string[] {\n\t\tif (v != null) {\n\t\t\tif (lodash_isString(v)) {\n\t\t\t\treturn v.split(STRING_EXPRESSION_SEPARATOR);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// static string_value_contains_expression(v:string): boolean{\n\t// \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n\t// }\n\n\t// deep_parse_for_string_expressions(){\n\t// \t// for string expressions which have more than a single `<expr>` element\n\t// \t// pt_`@ptnum`\n\t// \t// `@ptnum`_pt\n\t// \t// pt_`@ptnum`_`1+1`\n\t// \tif(this.node.type == JSEP_COMPOUND){\n\t// \t\tconst args = this.node.body\n\t// \t\tlet arg;\n\t// \t\tfor(let i=0; i<args.length; i++){\n\t// \t\t\targ = args[i]\n\t// \t\t\tif(arg.type == JSEP_LITERAL){\n\t// \t\t\t\tconst arg_node = jsep(arg.value)\n\t// \t\t\t\targs[i] = arg_node\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// for string expressions which havea single `<expr>` element\n\t// \t\t// `@ptnum`\n\t// \t\tif(this.node.type == JSEP_LITERAL){\n\t// \t\t\tconst raw = this.node.raw\n\t// \t\t\tconst first_char_code = raw.charCodeAt(0)\n\t// \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n\t// \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n\t// \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate reset() {\n\t\tthis.node = undefined;\n\t\tthis.error_message = undefined;\n\t}\n}\n","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {CoreWalker} from './Walker';\n// import {NodeSimple} from '/Graph/NodeSimple'\n\n// import {NamedGraphNodeClass} from './graph/NamedGraphNode'\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class DecomposedPath {\n\tprivate index = -1;\n\tprivate path_elements: (string | null)[] = [];\n\tprivate _named_nodes: (NodeOrParam | null)[] = [];\n\tprivate graph_node_ids: string[] = [];\n\tprivate node_element_by_graph_node_id: Dictionary<string> = {};\n\n\tconstructor() {\n\t\t// console.warn('create decomposed path');\n\t}\n\tadd_node(name: string, node: NodeOrParam) {\n\t\tthis.index += 1;\n\t\tif (name == node.name) {\n\t\t\tthis.named_nodes[this.index] = node;\n\t\t}\n\n\t\tthis.graph_node_ids[this.index] = node.graph_node_id;\n\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = name;\n\t}\n\tadd_path_element(path_element: string) {\n\t\tthis.index += 1;\n\t\tthis.path_elements[this.index] = path_element;\n\t}\n\n\tget named_nodes() {\n\t\treturn this._named_nodes;\n\t}\n\n\tupdate_from_name_change(node: NodeOrParam) {\n\t\tconst named_graph_node_ids = this.named_nodes.map((n) => n?.graph_node_id);\n\n\t\tif (named_graph_node_ids.includes(node.graph_node_id)) {\n\t\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = node.name;\n\t\t}\n\t}\n\n\tto_path(): string {\n\t\tconst elements = new Array<string>(this.index);\n\t\tfor (let i = 0; i <= this.index; i++) {\n\t\t\tconst node = this.named_nodes[i];\n\t\t\tif (node) {\n\t\t\t\telements[i] = this.node_element_by_graph_node_id[node.graph_node_id];\n\t\t\t} else {\n\t\t\t\tconst path_element = this.path_elements[i];\n\t\t\t\tif (path_element) {\n\t\t\t\t\telements[i] = path_element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet joined_path = elements.join(CoreWalker.SEPARATOR);\n\t\t// if the first character is a letter, we need to prefix with /\n\t\tconst first_char = joined_path[0];\n\t\tif (first_char) {\n\t\t\tif (!CoreWalker.NON_LETTER_PREFIXES.includes(first_char)) {\n\t\t\t\tjoined_path = `${CoreWalker.SEPARATOR}${joined_path}`;\n\t\t\t}\n\t\t}\n\n\t\treturn joined_path;\n\t}\n}\n","// https://gist.github.com/gre/1650294\n\n// const ease_in = function(t:number, power:number){return Math.pow(t, power)}\n// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}\n// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}\n\nconst ease_i = function(power:number){return function(t:number){return Math.pow(t, power)}};\nconst ease_o = function(power:number){return function(t:number){return 1 - Math.abs(Math.pow(t-1, power))}};\nconst ease_io = function(power:number){return function(t:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}}\n\nexport const Easing = {\n  linear: ease_io(1),\n\n  ease_i: function(t:number, power:number){ return ease_i(power)(t) },\n  ease_o: function(t:number, power:number){ return ease_o(power)(t) },\n  ease_io: function(t:number, power:number){ return ease_io(power)(t) },\n\n  ease_i2: ease_i(2),\n  ease_o2: ease_o(2),\n  ease_io2: ease_io(2),\n\n  ease_i3: ease_io(3),\n  ease_o3: ease_io(3),\n  ease_io3: ease_io(3),\n\n  ease_i4: ease_io(4),\n  ease_o4: ease_io(4),\n  ease_io4: ease_io(4),\n  // easeInQuart: EaseIn(4),\n  // easeOutQuart: EaseOut(4),\n  // easeInOutQuart: EaseInOut(4),\n  // easeInQuint: EaseIn(5),\n  // easeOutQuint: EaseOut(5),\n  // easeInOutQuint: EaseInOut(5)\n\n  ease_i_sin: function(t:number){ return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },\n  ease_o_sin: function(t:number){ return Math.sin(Math.PI / 2 * t); },\n  ease_io_sin: function(t:number){ return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2; },\n\n  ease_i_elastic: function (t:number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n  ease_o_elastic: function (t:number) { return .04 * t / (--t) * Math.sin(25 * t) },\n  ease_io_elastic: function (t:number) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n}\n\n// export class Easing {\n//   // no easing, no acceleration\n//   static linear(t:number):number{ return t }\n//   // accelerating from zero velocity\n//   static easeinquad (t:number):number{ return t*t }\n//   // decelerating to zero velocity\n//   static easeoutquad (t:number):number{ return t*(2-t) }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }\n//   // accelerating from zero velocity\n//   static easeincubic (t:number):number{ return t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n//   // accelerating from zero velocity\n//   static easeinquart (t:number):number{ return t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }\n//   // accelerating from zero velocity\n//   static easeinquint (t:number):number{ return t*t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\n// }","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\n// import lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class FloatParam extends TypedNumericParam<ParamType.FLOAT> {\n\tstatic type() {\n\t\treturn ParamType.FLOAT;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FLOAT], val2: ParamValuesTypeMap[ParamType.FLOAT]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tconst result = FloatParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {CoreWalker} from '../../core/Walker';\n\n// import {AsCodeOperatorPath} from './concerns/visitors/OperatorPath';\nimport {BaseNodeType} from '../nodes/_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class OperatorPathParam extends TypedParam<ParamType.OPERATOR_PATH> {\n\tprivate _found_node: BaseNodeType | null = null;\n\n\tstatic type() {\n\t\treturn ParamType.OPERATOR_PATH;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\tval2: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._value == this.default_value;\n\t}\n\tprotected process_raw_input() {\n\t\tthis._value = this._raw_input;\n\t\tthis.set_dirty();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\tprotected async process_computation() {\n\t\tconst path = this._value;\n\t\tlet node = null;\n\t\tconst path_non_empty = path != null && path !== '';\n\n\t\tif (path_non_empty) {\n\t\t\tnode = CoreWalker.find_node(this.node, path);\n\t\t\t// not sure I want the param to be errored,\n\t\t\t// as it may block the node, even if the param is not necessary\n\t\t\t// if (!node) {\n\t\t\t// \tthis.states.error.set('node not found');\n\t\t\t// }\n\t\t}\n\n\t\tif (this._found_node !== node) {\n\t\t\tconst dependent_on_found_node = this.options.dependent_on_found_node();\n\n\t\t\tif (this._found_node) {\n\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\tthis.remove_graph_input(this._found_node);\n\t\t\t\t} else {\n\t\t\t\t\t// this._found_node.remove_param_referree(this) // TODO: typescript\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._found_node = node;\n\t\t\tif (node) {\n\t\t\t\tconst expected_context = this.options.node_selection_context;\n\t\t\t\tconst node_context = node.parent?.children_controller?.context;\n\t\t\t\tif (expected_context == node_context || expected_context == null) {\n\t\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\t\tthis.add_graph_input(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this._found_node.add_param_referree(this) // TODO: typescript\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`node context is ${expected_context} but the params expects a ${node_context}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} // else {\n\t\t\t// \tif (path_non_empty) {\n\t\t\t// \t\tthis.states.error.set('node not found');\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.options.execute_callback();\n\t\t}\n\t\tthis.remove_dirty_state();\n\t}\n\n\tfound_node() {\n\t\treturn this._found_node;\n\t}\n}\n","// import lodash_each from 'lodash/each'\nimport lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber'\nimport {TypedParam} from './_Base';\n// import {TypedParamVisitor} from './_Base';\n// import {AsCodeString} from './concerns/visitors/String';\n// import {ExpressionController} from '../expressions/ExpressionController'\nimport {ParsedTree} from '../expressions/traversers/ParsedTree';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\n\nexport class StringParam extends TypedParam<ParamType.STRING> {\n\tstatic type() {\n\t\treturn ParamType.STRING;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.STRING]) {\n\t\treturn `${raw_input}`;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.STRING],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.STRING]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.STRING], val2: ParamValuesTypeMap[ParamType.STRING]) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\tconvert(raw_val: any): string {\n\t\tif (lodash_isString(raw_val)) {\n\t\t\treturn raw_val;\n\t\t}\n\t\treturn `${raw_val}`;\n\t}\n\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tif (this._value_elements(this._raw_input).length >= 3) {\n\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\tthis.set_dirty();\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._raw_input != this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\tif (this._expression_controller) {\n\t\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(`expression error: ${this.expression_controller.error_message}`);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\t// we need to check if equal nulls explicitely\n\t\t\t\t// as the empty string '' evals to false...\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tthis._value = converted;\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`expression returns an invalid type (${expression_result})`);\n\t\t\t\t}\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _value_elements(v: string): string[] {\n\t\treturn ParsedTree.string_value_elements(v);\n\t}\n}\n","import {BaseEventsController} from './_BaseEventsController';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\n\n// https://developer.mozilla.org/en-US/docs/Web/Events\nenum MouseEventType {\n\tauxclick = 'auxclick',\n\tclick = 'click',\n\tcontextmenu = 'contextmenu',\n\tdblclick = 'dblclick',\n\tmousedown = 'mousedown',\n\tmouseenter = 'mouseenter',\n\tmouseleave = 'mouseleave',\n\tmousemove = 'mousemove',\n\tmouseover = 'mouseover',\n\tmouseout = 'mouseout',\n\tmouseup = 'mouseup',\n\tpointerlockchange = 'pointerlockchange',\n\tpointerlockerror = 'pointerlockerror',\n\tselect = 'select',\n\twheel = 'wheel',\n}\nexport const ACCEPTED_MOUSE_EVENT_TYPES: MouseEventType[] = [\n\tMouseEventType.auxclick,\n\tMouseEventType.click,\n\tMouseEventType.contextmenu,\n\tMouseEventType.dblclick,\n\tMouseEventType.mousedown,\n\tMouseEventType.mouseenter,\n\tMouseEventType.mouseleave,\n\tMouseEventType.mousemove,\n\tMouseEventType.mouseover,\n\tMouseEventType.mouseout,\n\tMouseEventType.mouseup,\n\tMouseEventType.pointerlockchange,\n\tMouseEventType.pointerlockerror,\n\tMouseEventType.select,\n\tMouseEventType.wheel,\n];\n\nexport class MouseEventsController extends BaseEventsController<MouseEvent, MouseEventNode> {\n\taccepts_event(event: MouseEvent) {\n\t\treturn ACCEPTED_MOUSE_EVENT_TYPES.includes(event.type as MouseEventType);\n\t}\n}\n","import {TypedEventNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\nconst DEFAULT_FUNCTION_CODE = `\nimport {BaseMouseEventProcessor, BaseCameraObjNodeType} from 'polygonjs-engine'\nexport class EventProcessor extends BaseMouseEventProcessor {\n\tinitialize_processor(){\n\t}\n\tprocess_mouse_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType){\n\t\tthis._set_mouse_from_event_and_canvas(event, canvas);\n\t\tconsole.log(this.node.scene.time);\n\t\tconsole.log(\"processing event\", this.mouse.x, this.mouse.y);\n\t}\n}\n\n\n\n\n`;\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\n\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport * as THREE from 'three';\nexport class BaseMouseEventProcessor {\n\t// it looks like I still need to import raycaster and vector2 without the three namespace\n\t// otherwise they are seen as any in the editor\n\tprotected raycaster = new Raycaster();\n\tprotected mouse = new Vector2();\n\tconstructor(protected node: CodeEventNode) {\n\t\tthis.initialize_processor();\n\t}\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tif (event instanceof MouseEvent) {\n\t\t\tthis.process_mouse_event(event, canvas, camera_node);\n\t\t} else if (event instanceof KeyboardEvent) {\n\t\t\tthis.process_keyboard_event(event, canvas, camera_node);\n\t\t}\n\t}\n\tprocess_mouse_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n\tprocess_keyboard_event(event: KeyboardEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n\tset_node(node: CodeEventNode) {\n\t\tthis.node = node;\n\t}\n\tinitialize_processor() {}\n\tprotected _set_mouse_from_event_and_canvas(event: MouseEvent, canvas: HTMLCanvasElement) {\n\t\tthis.mouse.x = (event.clientX / canvas.offsetWidth) * 2 - 1;\n\t\tthis.mouse.y = -(event.clientY / canvas.offsetHeight) * 2 + 1;\n\t}\n}\n\ntype EvaluatedFunction = (\n\tbase_event_processor_class: typeof BaseMouseEventProcessor,\n\tTHREE: any\n) => typeof BaseMouseEventProcessor | undefined;\n\nclass CodeEventParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeEventParamsConfig();\n\nexport class CodeEventNode extends TypedEventNode<CodeEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _processor: BaseMouseEventProcessor | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.inputs.set_named_input_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('trigger', ConnectionPointType.BOOL),\n\t\t]);\n\t}\n\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._processor) {\n\t\t\tthis._processor.process_event(event, canvas, camera_node);\n\t\t}\n\t}\n\tprivate _compile_if_required() {\n\t\tif (!this._processor || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprivate _compile() {\n\t\ttry {\n\t\t\tconst function_body = `try {\n\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t} catch(e) {\n\t\t\t\tthis.states.error.set(e)\n\t\t\t}`;\n\t\t\tconsole.log('function_body');\n\t\t\tconsole.log(function_body);\n\t\t\tconst processor_creator_function: EvaluatedFunction = new AsyncFunction(\n\t\t\t\t'BaseMouseEventProcessor',\n\t\t\t\t'THREE',\n\t\t\t\tfunction_body\n\t\t\t);\n\t\t\tconst processor_class = processor_creator_function(BaseMouseEventProcessor, THREE);\n\t\t\tif (processor_class) {\n\t\t\t\tthis._processor = new processor_class(this);\n\t\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`cannot generate function`);\n\t\t\t\tthis._processor = undefined;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._processor = undefined;\n\t\t}\n\t}\n}\n","export class TranspiledFilter {\n\tstatic filter(transpiled_javascript: string) {\n\t\tconst lines = transpiled_javascript.split('\\n');\n\t\tconst filtered_lines: string[] = [];\n\t\tfor (let line of lines) {\n\t\t\tif (!line.match(/import {.*} from '.*'/)) {\n\t\t\t\tline = line.replace('export ', 'return ');\n\t\t\t\tfiltered_lines.push(line);\n\t\t\t}\n\t\t}\n\t\tconsole.log('filtered_lines', filtered_lines);\n\t\treturn filtered_lines.join('\\n');\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ntype FlagHookCallback = () => void;\n\nexport class BaseFlag {\n\t// protected _available_states: [boolean, boolean] = [];\n\tprotected _state: boolean = true;\n\tprotected _hooks: FlagHookCallback[] | null = null;\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// set_available_states(states: T[]) {}\n\tadd_hook(hook: FlagHookCallback) {\n\t\tthis._hooks = this._hooks || [];\n\t\tthis._hooks.push(hook);\n\t}\n\tprotected on_update() {}\n\tset(new_state: boolean) {\n\t\tif (this._state != new_state) {\n\t\t\tthis._state = new_state;\n\t\t\tthis.on_update();\n\t\t\tthis.run_hooks();\n\t\t}\n\t}\n\tget active() {\n\t\treturn this._state;\n\t}\n\ttoggle() {\n\t\tthis.set(!this._state);\n\t}\n\trun_hooks() {\n\t\tif (this._hooks) {\n\t\t\tfor (let hook of this._hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {GlobalsGlNode} from '../../Globals';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nexport abstract class GlobalsBaseController {\n\tprivate static __next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor() {\n\t\tthis._id = GlobalsBaseController.__next_id++;\n\t}\n\tid() {\n\t\treturn this._id;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {}\n\n\tabstract read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined;\n}\n","import {TypedGLDefinition, GLDefinitionType} from './GLDefinition';\n\nexport class TypedGLDefinitionCollection<T extends GLDefinitionType> {\n\t_errored: boolean = false;\n\t_error_message: string | undefined;\n\n\tconstructor(private _definitions: TypedGLDefinition<T>[] = []) {}\n\n\tget errored() {\n\t\treturn this._errored;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tuniq(): TypedGLDefinition<T>[] {\n\t\tconst definitions_by_name: Map<string, TypedGLDefinition<T>> = new Map();\n\t\tconst names: string[] = [];\n\n\t\tfor (let definition of this._definitions) {\n\t\t\tif (!this._errored) {\n\t\t\t\tconst name = definition.name;\n\t\t\t\tconst existing = definitions_by_name.get(name);\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.data_type != definition.data_type) {\n\t\t\t\t\t\tthis._errored = true;\n\t\t\t\t\t\tthis._error_message = `attempt to create ${definition.name} with types ${definition.data_type}`;\n\t\t\t\t\t\tconsole.warn('emitting error message', this._error_message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdefinitions_by_name.set(name, definition);\n\t\t\t\t\tnames.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uniq_definitions: TypedGLDefinition<T>[] = [];\n\t\tfor (let name of names) {\n\t\t\tconst definition = definitions_by_name.get(name);\n\t\t\tif (definition) {\n\t\t\t\tuniq_definitions.push(definition);\n\t\t\t}\n\t\t}\n\t\t// sorting may make dependencies be declared after the function calling them\n\t\t// const sorted_definitions = lodash_sortBy(uniq_definitions, (d)=>d.name())\n\t\treturn uniq_definitions;\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport lodash_uniq from 'lodash/uniq';\n// import {BaseGlNodeType} from '../../gl/_Base';\n// import {OutputGlNode} from '../gl/Output';\nimport {CoreGraph} from '../../../../core/graph/CoreGraph';\nimport {BaseNodeType, TypedNode} from '../../_Base';\nimport {TypedAssembler} from './BaseAssembler';\nimport {MapUtils} from '../../../../core/MapUtils';\nimport {ShaderName} from './ShaderName';\n\ntype NumberByString = Map<string, number>;\ntype BooleanByString = Map<string, boolean>;\ntype BooleanByStringByShaderName = Map<ShaderName, BooleanByString>;\ntype StringArrayByString = Map<string, string[]>;\n\n// interface BaseNodeGlArrayByString {\n// \t[propName: string]: BaseNodeGl[]\n// }\n// interface StringArrayByString {\n// \t[propName: string]: string[]\n// }\n\n// import {LineType, LINE_TYPES} from './CodeBuilder'\n\n// const VERTEX_INPUT_NAMES = [\n// \t'position',\n// \t'normal',\n// \t'gl_PointSize'\n// ]\n// const FRAGMENT_INPUT_NAMES = [\n// \t'color',\n// \t'alpha'\n// ]\n\nexport class TypedNodeTraverser<T extends TypedNode<any, T, any>> {\n\tprivate _leaves_graph_id: BooleanByStringByShaderName = new Map();\n\tprivate _graph_ids_by_shader_name: BooleanByStringByShaderName = new Map();\n\tprivate _outputs_by_graph_id: StringArrayByString = new Map();\n\tprivate _depth_by_graph_id: NumberByString = new Map();\n\tprivate _graph_id_by_depth: Map<number, string[]> = new Map();\n\tprivate _graph: CoreGraph;\n\tprivate _shader_name!: ShaderName;\n\n\tconstructor(private _assembler: TypedAssembler<T>, private _gl_parent_node: BaseNodeType) {\n\t\tthis._graph = this._gl_parent_node.scene.graph;\n\t}\n\n\tprivate reset() {\n\t\tthis._leaves_graph_id.clear();\n\t\tthis._outputs_by_graph_id.clear();\n\t\tthis._depth_by_graph_id.clear();\n\t\tthis._graph_id_by_depth.clear();\n\n\t\tthis.shader_names().forEach((shader_name) => {\n\t\t\tthis._graph_ids_by_shader_name.set(shader_name, new Map());\n\t\t});\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\tinput_names_for_shader_name(root_node: T, shader_name: ShaderName) {\n\t\treturn this._assembler.input_names_for_shader_name(root_node, shader_name);\n\t}\n\n\ttraverse(root_nodes: T[]) {\n\t\tthis.reset();\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._leaves_graph_id.set(shader_name, new Map());\n\t\t}\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._shader_name = shader_name;\n\t\t\tfor (let root_node of root_nodes) {\n\t\t\t\tthis.find_leaves_from_root_node(root_node);\n\t\t\t\tthis.set_nodes_depth();\n\t\t\t}\n\t\t}\n\n\t\t// graph_ids.forEach((graph_id) => {\n\t\tthis._depth_by_graph_id.forEach((depth: number, graph_id: string) => {\n\t\t\tif (depth != null) {\n\t\t\t\t// this._graph_id_by_depth.set(depth, this._graph_id_by_depth.get(depth) || []);\n\t\t\t\t// this._graph_id_by_depth.get(depth)?.push(graph_id);\n\t\t\t\tMapUtils.push_on_array_at_entry(this._graph_id_by_depth, depth, graph_id);\n\t\t\t}\n\t\t});\n\t}\n\n\tleaves_from_nodes(nodes: T[]) {\n\t\tthis._shader_name = ShaderName.LEAVES_FROM_NODES_SHADER;\n\t\tthis._graph_ids_by_shader_name.set(this._shader_name, new Map());\n\t\tthis._leaves_graph_id.set(this._shader_name, new Map());\n\t\tfor (let node of nodes) {\n\t\t\tthis.find_leaves(node);\n\t\t}\n\n\t\tconst node_ids: string[] = [];\n\t\tthis._leaves_graph_id.get(this._shader_name)?.forEach((value: boolean, key: string) => {\n\t\t\tnode_ids.push(key);\n\t\t});\n\t\treturn this._graph.nodes_from_ids(node_ids) as T[];\n\t}\n\n\tnodes_for_shader_name(shader_name: ShaderName) {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((value: string[], key: number) => {\n\t\t\tdepths.push(key);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tgraph_ids_for_depth.forEach((graph_id: string) => {\n\t\t\t\t\tconst is_present = this._graph_ids_by_shader_name.get(shader_name)?.get(graph_id);\n\t\t\t\t\tif (is_present) {\n\t\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tsorted_nodes() {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((ids: string[], depth: number) => {\n\t\t\tdepths.push(depth);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tfor (let graph_id of graph_ids_for_depth) {\n\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tprivate find_leaves_from_root_node(root_node: T) {\n\t\t// if(this._shader_name == ShaderName.VERTEX){\n\t\t// this._leaves_graph_id[this._shader_name] = {}\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(root_node.graph_node_id, true);\n\n\t\tconst input_names = this.input_names_for_shader_name(root_node, this._shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\t// if (root_node.type == 'output') {\n\t\t\t\tconst input = root_node.io.inputs.named_input(input_name);\n\t\t\t\tif (input) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(\n\t\t\t\t\t\tthis._outputs_by_graph_id,\n\t\t\t\t\t\tinput.graph_node_id,\n\t\t\t\t\t\troot_node.graph_node_id\n\t\t\t\t\t);\n\t\t\t\t\tthis.find_leaves(input);\n\t\t\t\t}\n\t\t\t\t// TODO: typescript - GL - check that I dont need to consider the Attrib as a special case\n\t\t\t\t// } else {\n\t\t\t\t// \t// if attribute\n\t\t\t\t// \tconst input = root_node.io.inputs.connected_named_input();\n\t\t\t\t// \tif (input) {\n\t\t\t\t// \t\tthis.find_leaves(input);\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// const position_input = this._output.named_input('position')\n\t\t// const normal_input = this._output.named_input('normal')\n\t\t// const instancePosition_input = this._output.named_input('instancePosition')\n\t\t// if(position_input){ this.find_leaves(position_input) }\n\t\t// if(normal_input){ this.find_leaves(normal_input) }\n\t\t// if(instancePosition_input){ this.find_leaves(instancePosition_input) }\n\t\t// }\n\t\t// if(this._shader_name == ShaderName.FRAGMENT){\n\t\t// \tthis._leaves_graph_id[this._shader_name] = {}\n\t\t// \tFRAGMENT_INPUT_NAMES.forEach(name=>{\n\t\t// \t\tconst input = this._output.named_input(name)\n\t\t// \t\tif(input){\n\t\t// \t\t\tthis.find_leaves(input)\n\t\t// \t\t}\n\t\t// \t})\n\t\t// \t// const color_input = this._output.named_input('color')\n\t\t// \t// const alpha_input = this._output.named_input('alpha')\n\t\t// \t// if(color_input){ this.find_leaves(color_input) }\n\t\t// \t// if(alpha_input){ this.find_leaves(alpha_input) }\n\t\t// }\n\n\t\tthis._outputs_by_graph_id.forEach((outputs: string[], graph_id: string) => {\n\t\t\tthis._outputs_by_graph_id.set(graph_id, lodash_uniq(outputs));\n\t\t});\n\t}\n\n\tprivate find_leaves(node: T) {\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(node.graph_node_id, true);\n\n\t\tconst inputs = lodash_compact(node.io.inputs.inputs());\n\t\tconst input_graph_ids = lodash_uniq(inputs.map((n) => n.graph_node_id));\n\t\tconst unique_inputs = input_graph_ids.map((graph_id) => this._graph.node_from_id(graph_id)) as T[];\n\t\tif (unique_inputs.length > 0) {\n\t\t\t// const promises = unique_inputs.forEach((input)=>{\n\t\t\tfor (let input of unique_inputs) {\n\t\t\t\tMapUtils.push_on_array_at_entry(this._outputs_by_graph_id, input.graph_node_id, node.graph_node_id);\n\n\t\t\t\tthis.find_leaves(input);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._leaves_graph_id.get(this._shader_name)!.set(node.graph_node_id, true);\n\t\t}\n\t}\n\n\tprivate set_nodes_depth() {\n\t\tthis._leaves_graph_id.forEach((booleans_by_graph_id, shader_name) => {\n\t\t\tbooleans_by_graph_id.forEach((boolean, graph_id) => {\n\t\t\t\tthis.set_node_depth(graph_id);\n\t\t\t});\n\t\t});\n\t\t// const leave_ids = Object.keys(this._leaves_graph_id[this._shader_name]);\n\t\t// leave_ids.forEach((graph_id) => {\n\t\t// \tthis.set_node_depth(graph_id);\n\t\t// });\n\t}\n\n\tprivate set_node_depth(graph_id: string, depth: number = 0) {\n\t\tconst current_depth = this._depth_by_graph_id.get(graph_id);\n\t\tif (current_depth != null) {\n\t\t\tthis._depth_by_graph_id.set(graph_id, Math.max(current_depth, depth));\n\t\t} else {\n\t\t\tthis._depth_by_graph_id.set(graph_id, depth);\n\t\t}\n\n\t\t// const node = this._graph.node_from_id(graph_id);\n\n\t\tconst output_ids = this._outputs_by_graph_id.get(graph_id);\n\t\tif (output_ids) {\n\t\t\toutput_ids.forEach((output_id) => {\n\t\t\t\tthis.set_node_depth(output_id, depth + 1);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {Connection} from './GlData';\n// import {Definition} from './Definition/_Module';\n// import {ShaderName} from './Assembler/Util/CodeBuilder';\n\n// list of globals\n// https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)\n// gl_PointCoord\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass GlobalsGlParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new GlobalsGlParamsConfig();\n\nexport class GlobalsGlNode extends TypedGlNode<GlobalsGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'globals';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_globals_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller?.assembler.set_node_lines_globals(this, shaders_collection_controller);\n\t\t// }\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// // const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\t// const body_lines = []\n\n\t\t// const shader_config = this.shader_config(this._shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\t// let definition\n\t\t// let body_line\n\t\t// for(let output_name of this.used_output_names()){\n\t\t// \tconst var_name = this.gl_var_name(output_name)\n\n\t\t// \tswitch (output_name){\n\t\t// \t\tcase 'frame':\n\t\t// \t\t\tdefinition = new Definition.Uniform(this, 'float', output_name)\n\t\t// \t\t\t// vertex_definitions.push(definition)\n\t\t// \t\t\t// fragment_definitions.push(definition)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\n\t\t// \t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t// \t\t\tbody_lines.push(body_line)\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_FragCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tfragment_body_lines.push(`vec4 ${var_name} = gl_FragCoord`)\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_PointCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tif(this.parent().is_point_material()){\n\t\t// \t\t\t\t\tfragment_body_lines.push(`vec2 ${var_name} = gl_PointCoord`)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tdefault:\n\t\t// \t\t\tconst named_output = this.named_output_by_name(output_name)\n\t\t// \t\t\tconst gl_type = named_output.gl_type()\n\t\t// \t\t\tdefinition = new Definition.Varying(this, gl_type, var_name)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\t\t// \t\t\tif(dependencies.length == 0){\n\t\t// \t\t\t\tbody_lines.push(body_line)\n\t\t// \t\t\t}\n\t\t// \t}\n\t\t// }\n\t\t// // this.set_vertex_definitions(vertex_definitions)\n\t\t// // this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tthis.set_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tthis.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// // this.add_definitions(definitions)\n\t\t// // this.set_vertex_body_lines(vertex_body_lines)\n\t\t// // this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// this.add_body_lines(body_lines)\n\t}\n}\n","import {EventDispatcher} from 'three/src/core/EventDispatcher';\nimport {MOUSE} from 'three/src/constants';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Spherical} from 'three/src/math/Spherical';\nimport {TOUCH} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {ThreeToGl} from '../../../Core/ThreeToGl'\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n// import {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n// import {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nclass BaseAdaptiveParamsConfig extends NodeParamsConfig {}\n\nexport abstract class BaseAdaptiveGlNode<T extends BaseAdaptiveParamsConfig> extends TypedGlNode<T> {\n\t// protected abstract gl_output_name(): string;\n\t// protected abstract gl_input_name(index: number): string;\n\t// protected abstract expected_input_types(): ConnectionPointType[];\n\t// protected abstract expected_output_types(): ConnectionPointType[];\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\ninterface MathArg2Options {\n\tin?: [string, string];\n\tout?: string;\n\tdefault_in_type?: ConnectionPointType;\n\tallowed_in_types?: ConnectionPointType[];\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg2Factory(type: string, options: MathArg2Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1'];\n\tconst default_in_type = options.default_in_type;\n\tconst allowed_in_types = options.allowed_in_types;\n\tconst out_type = options.out_type;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\n\t\t\tif (out_type) {\n\t\t\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [out_type]);\n\t\t\t}\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\tif (out_type) {\n\t\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst_input_type = default_in_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || default_in_type || ConnectionPointType.FLOAT;\n\t\t\treturn [type, type];\n\t\t}\n\t};\n}\nexport class DistanceGlNode extends MathFunctionArg2Factory('distance', {\n\tin: ['p0', 'p1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class DotGlNode extends MathFunctionArg2Factory('dot', {\n\tin: ['vec0', 'vec1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class MaxGlNode extends MathFunctionArg2Factory('max') {}\nexport class MinGlNode extends MathFunctionArg2Factory('min') {}\nexport class ModGlNode extends MathFunctionArg2Factory('mod') {}\nexport class PowGlNode extends MathFunctionArg2Factory('pow', {in: ['x', 'y']}) {}\nexport class ReflectGlNode extends MathFunctionArg2Factory('reflect', {\n\tin: ['I', 'N'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n}) {}\nexport class StepGlNode extends MathFunctionArg2Factory('step', {in: ['edge', 'x']}) {}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport {ConnectionPointType, ConnectionPointTypes} from '../utils/connections/ConnectionPointType';\n\nfunction typed_visible_options(type: ConnectionPointType) {\n\tconst val = ConnectionPointTypes.indexOf(type);\n\treturn {visible_if: {type: val}};\n}\n\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nclass ConstantGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tbool = ParamConfig.BOOLEAN(0, typed_visible_options(ConnectionPointType.BOOL));\n\tint = ParamConfig.INTEGER(0, typed_visible_options(ConnectionPointType.INT));\n\tfloat = ParamConfig.FLOAT(0, typed_visible_options(ConnectionPointType.FLOAT));\n\tvec2 = ParamConfig.VECTOR2([0, 0], typed_visible_options(ConnectionPointType.VEC2));\n\tvec3 = ParamConfig.VECTOR3([0, 0, 0], typed_visible_options(ConnectionPointType.VEC3));\n\tvec4 = ParamConfig.VECTOR4([0, 0, 0, 0], typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new ConstantGlParamsConfig();\nexport class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'constant';\n\t}\n\tstatic readonly OUTPUT_NAME = 'val';\n\tprivate _params_by_type: Map<ConnectionPointType, BaseParamType> | undefined;\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => ConstantGlNode.OUTPUT_NAME);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [this._current_connection_type]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\t// _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst param = this._current_param;\n\t\tif (param) {\n\t\t\tconst connection_type = this._current_connection_type;\n\t\t\tconst value = ThreeToGl.any(param.value);\n\t\t\tconst var_value = this._current_var_name;\n\t\t\tconst body_line = `${connection_type} ${var_value} = ${value}`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t} else {\n\t\t\tconsole.warn(`no param found for constant node for type '${this.pv.type}'`);\n\t\t}\n\t}\n\n\tprivate get _current_connection_type() {\n\t\tif (this.pv.type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\tif (connection_type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\treturn connection_type;\n\t}\n\n\tprivate get _current_param(): BaseParamType {\n\t\tthis._params_by_type =\n\t\t\tthis._params_by_type ||\n\t\t\tnew Map<ConnectionPointType, BaseParamType>([\n\t\t\t\t[ConnectionPointType.BOOL, this.p.bool],\n\t\t\t\t[ConnectionPointType.INT, this.p.int],\n\t\t\t\t[ConnectionPointType.FLOAT, this.p.float],\n\t\t\t\t[ConnectionPointType.VEC2, this.p.vec2],\n\t\t\t\t[ConnectionPointType.VEC3, this.p.vec3],\n\t\t\t\t[ConnectionPointType.VEC4, this.p.vec4],\n\t\t\t]);\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\treturn this._params_by_type.get(connection_type)!;\n\t}\n\tprivate get _current_var_name(): string {\n\t\treturn this.gl_var_name(ConstantGlNode.OUTPUT_NAME);\n\t}\n\n\t// private update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tconst current_connection = this.io.outputs.named_output_connection_points[0];\n\t// \tif (current_connection && current_connection.type == this._current_connection_type) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this._current_connection_type, this._current_connection_type)],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\ninterface MathArg3Options {\n\tin?: [string, string, string];\n\tout?: string;\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tdefault?: Dictionary<any>;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg3Factory(type: string, options: MathArg3Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1', 'in2'];\n\tconst gl_input_default_values = options.default || {};\n\tconst out_type = options.out_type || ConnectionPointType.FLOAT;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg3GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\treturn [out_type];\n\t\t}\n\t\tgl_input_default_value(name: string) {\n\t\t\treturn gl_input_default_values[name];\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t}\n\t};\n}\nexport class ClampGlNode extends MathFunctionArg3Factory('clamp', {in: ['value', 'min', 'max'], default: {max: 1}}) {}\nexport class FaceforwardGlNode extends MathFunctionArg3Factory('face_forward', {in: ['N', 'I', 'Nref']}) {}\nexport class SmoothStepGlNode extends MathFunctionArg3Factory('smoothstep', {in: ['edge0', 'edge1', 'x']}) {}\n","export default \"\\nfloat fit01(float val, float src_min, float src_max){\\n\\tfloat size = src_max - src_min;\\n\\treturn (val - src_min) / size;\\n}\\nvec2 fit01(vec2 val, vec2 src_min, vec2 src_max){\\n\\treturn vec2(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y)\\n\\t);\\n}\\nvec3 fit01(vec3 val, vec3 src_min, vec3 src_max){\\n\\treturn vec3(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z)\\n\\t);\\n}\\nvec4 fit01(vec4 val, vec4 src_min, vec4 src_max){\\n\\treturn vec4(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z),\\n\\t\\tfit01(val.w, src_min.w, src_max.w)\\n\\t);\\n}\\n\\nfloat fit(float val, float src_min, float src_max, float dest_min, float dest_max){\\n\\tfloat  src_range = src_max - src_min;\\n\\tfloat dest_range = dest_max - dest_min;\\n\\n\\tfloat r = (val - src_min) / src_range;\\n\\treturn (r * dest_range) + dest_min;\\n}\\nvec2 fit(vec2 val, vec2 src_min, vec2 src_max, vec2 dest_min, vec2 dest_max){\\n\\treturn vec2(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y)\\n\\t);\\n}\\nvec3 fit(vec3 val, vec3 src_min, vec3 src_max, vec3 dest_min, vec3 dest_max){\\n\\treturn vec3(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z)\\n\\t);\\n}\\nvec4 fit(vec4 val, vec4 src_min, vec4 src_max, vec4 dest_min, vec4 dest_max){\\n\\treturn vec4(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z),\\n\\t\\tfit(val.w, src_min.w, src_max.w, dest_min.w, dest_max.w)\\n\\t);\\n}\\n\"","export default \"uniform float mNear;\\nuniform float mFar;\\n\\nvarying float vViewZDepth;\\n\\nvoid main() {\\n\\n\\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\\n\\tgl_FragColor = vec4( vec3( color ), 1.0 );\\n\\n}\\n\"","import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\n\nexport const SHADER_DEFAULTS = {\n\tmetalness: 1,\n\troughness: 0.5,\n};\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness);\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness);\n}\n// TODO: add the following texture params:\n// - aoMap+aoMapIntensity\n// - bumpMap+bumpScale\n// - displacementMap+displaycementScale+displacementBias\n// - emissiveMap\n// - envMap\n// - lightMap\n// - metalnessMap\n// - normalMap\n// - roughnessMap,\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends TypedMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\t\tthis.texture_env_map_controller.update();\n\n\t\tif (this._material) {\n\t\t\tthis._material.envMapIntensity = this.pv.env_map_intensity;\n\t\t\tthis._material.roughness = this.pv.roughness;\n\t\t\tthis._material.metalness = this.pv.metalness;\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureEnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_env_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEnvMapController));\n\t\tenv_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.ENV_MAP,\n\t\t\tOperatorPathOptions(TextureEnvMapController, 'use_env_map')\n\t\t);\n\t\tenv_map_intensity = ParamConfig.FLOAT(1, {visible_if: {use_env_map: 1}});\n\t};\n}\nclass TextureEnvMaterial extends Material {\n\tenvMap!: Texture | null;\n}\ntype CurrentMaterial = TextureEnvMaterial | ShaderMaterial;\nclass TextureEnvMapParamsConfig extends TextureEnvMapParamConfig(NodeParamsConfig) {}\nabstract class TextureEnvMapMatNode extends TypedMatNode<CurrentMaterial, TextureEnvMapParamsConfig> {\n\ttexture_env_map_controller!: TextureEnvMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(node: TextureEnvMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'envMap', this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tstatic async update(node: TextureEnvMapMatNode) {\n\t\tnode.texture_env_map_controller.update();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerPoints} from '../gl/code/assemblers/materials/Points';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass PointsMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerPoints, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points_builder';\n\t}\n\n\tinitialize_node() {}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerPoints>(this, ShaderAssemblerPoints);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import lodash_isNaN from 'lodash/isNaN';\nimport {Camera} from 'three/src/cameras/Camera';\n\nimport {CoreTransform} from '../../../core/Transform';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {ControlsController} from './utils/cameras/ControlsController';\nimport {LayersController} from './utils/LayersController';\nimport {PostProcessController} from './utils/cameras/PostProcessController';\n\n// import {Dirtyable} from './Concerns/Dirtyable';\n// import {Layers} from './Concerns/Layers';\n// import {PostProcess} from './Concerns/PostProcess';\n// import {Transformed} from './Concerns/Transformed';\n// import {Background} from './Concerns/Background';\n// import {CoreTextureLoader} from '../../../Core/Loader/Texture'\n// import {CameraControls} from './Concerns/CameraControls';\n// import {File} from '../../../Engine/Node/Cop/File'\nimport {ThreejsViewer} from '../../viewers/Threejs';\nimport {BaseBackgroundController} from './utils/cameras/background/_BaseController';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport interface OrthoOrPerspCamera extends Camera {\n\tnear: number;\n\tfar: number;\n\tupdateProjectionMatrix: () => void;\n\tgetFocalLength?: () => void;\n}\n\nconst EVENT_CHANGE = {type: 'change'};\n\nexport const BASE_CAMERA_DEFAULT = {\n\tnear: 1.0,\n\tfar: 100.0,\n};\n\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\nimport {TypedObjNode} from './_Base';\n\nexport function CameraTransformParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcamera = ParamConfig.FOLDER();\n\t\tcontrols = ParamConfig.OPERATOR_PATH('', {\n\t\t\tnode_selection: {\n\t\t\t\tcontext: NodeContext.EVENT,\n\t\t\t},\n\t\t});\n\t\t// add transform params\n\t\t// t = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// r = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// s = ParamConfig.VECTOR3([1, 1, 1]);\n\t\t// scale = ParamConfig.FLOAT(1);\n\t\ttarget = ParamConfig.VECTOR3([0, 0, 0], {cook: false});\n\t\tnear = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t\tfar = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t\t// aspect = ParamConfig.FLOAT(1);\n\t\t// lock_width = ParamConfig.BOOLEAN(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('');\n\n\t\tset_master_camera = ParamConfig.BUTTON(null, {\n\t\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\t\tBaseCameraObjNodeClass.PARAM_CALLBACK_set_master_camera(node as BaseCameraObjNodeType);\n\t\t\t},\n\t\t});\n\t};\n}\n\nexport class BaseCameraObjParamsConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(TransformedParamConfig(LayerParamConfig(CameraTransformParamConfig(NodeParamsConfig))))\n) {}\n\nexport class TypedCameraObjNode<O extends OrthoOrPerspCamera, K extends BaseCameraObjParamsConfig> extends TypedObjNode<\n\tO,\n\tK\n> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.CAMERA;\n\tprotected _object!: O;\n\tprotected _aspect: number = -1;\n\tget object() {\n\t\treturn this._object;\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprotected _background_controller: BaseBackgroundController | undefined;\n\tget background_controller(): BaseBackgroundController {\n\t\treturn (this._background_controller =\n\t\t\tthis._background_controller || new this.background_controller_constructor(this));\n\t}\n\tprotected get background_controller_constructor() {\n\t\treturn BaseBackgroundController;\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller(): ControlsController {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _layers_controller: LayersController | undefined;\n\tget layers_controller() {\n\t\treturn (this._layers_controller = this._layers_controller || new LayersController(this));\n\t}\n\tprotected _post_process_controller: PostProcessController | undefined;\n\tget post_process_controller(): PostProcessController {\n\t\treturn (this._post_process_controller = this._post_process_controller || new PostProcessController(this));\n\t}\n\n\t// protected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active || false);\n\t\t// });\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\t// create_common_params() {\n\t// \t// this.within_param_folder('transform', () => {\n\t// \t// \t// this.add_param(ParamType.OPERATOR_PATH, 'controls', '', {\n\t// \t// \t// \tnode_selection: {\n\t// \t// \t// \t\tcontext: NodeContext.EVENT,\n\t// \t// \t// \t},\n\t// \t// \t// });\n\t// \t// \t// CoreTransform.create_params(this); // removed since they are now added Persp Camera\n\t// \t// \t// this.add_param( ParamType.TOGGLE, 'is_updating', 0, {cook: false, hidden: true}); //, hidden: true} )\n\t// \t// \t// this.add_param(ParamType.VECTOR3, 'target', [0, 0, 0], {cook: false}); //, hidden: true} )\n\t// \t// });\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.layers_controller.add_params();\n\t// \t// this.add_param(ParamType.FLOAT, 'near', BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.FLOAT, 'far', BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.BOOLEAN, 'lock_width', 1);\n\t// \t// });\n\t// \t// this.background_controller.add_params();\n\t// \t// this.post_process_controller.add_params();\n\t// }\n\n\t// create_player_camera_params() {\n\t// \tthis.add_param(ParamType.BUTTON, 'set_master_camera', null, {callback: this.set_as_master_camera.bind(this)});\n\t// }\n\t// is_updating():boolean{\n\t// \treturn this.param('is_updating').value()\n\t// }\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tasync cook() {\n\t\tthis.transform_controller.update();\n\t\tthis.layers_controller.update();\n\t\tawait this.background_controller.update();\n\n\t\tif (this._object.near != this.pv.near || this._object.far != this.pv.far) {\n\t\t\tthis._object.near = this.pv.near;\n\t\t\tthis._object.far = this.pv.far;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\n\t\tawait this.post_process_controller.update_composer_passes();\n\t\tthis.update_camera();\n\t\tthis.controls_controller.update_controls();\n\n\t\t// TODO: ideally the update transform and update camera\n\t\t// can both return if the camera has changed\n\t\t// and we can run this here instead of inside the update_transform and update_camera\n\t\t// this._object.dispatchEvent( EVENT_CHANGE )\n\t\tthis._object.dispatchEvent(EVENT_CHANGE);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\ton_create() {}\n\t//\n\ton_delete() {}\n\t//\n\n\tcamera() {\n\t\treturn this._object;\n\t}\n\n\tupdate_camera() {}\n\n\t//\n\tstatic PARAM_CALLBACK_set_master_camera(node: BaseCameraObjNodeType) {\n\t\tnode.set_as_master_camera();\n\t}\n\tset_as_master_camera() {\n\t\tthis.scene.cameras_controller.set_master_camera_node_path(this.full_path());\n\t}\n\n\tsetup_for_aspect_ratio(aspect: number) {\n\t\tif (lodash_isNaN(aspect)) {\n\t\t\treturn;\n\t\t}\n\t\tif (aspect && this._aspect != aspect) {\n\t\t\tthis._aspect = aspect;\n\t\t\tthis._update_for_aspect_ratio();\n\t\t}\n\t}\n\tprotected _update_for_aspect_ratio(): void {}\n\n\tupdate_transform_params_from_object() {\n\t\t// CoreTransform.set_params_from_matrix(this._object.matrix, this, {scale: false})\n\t\tCoreTransform.set_params_from_object(this._object, this);\n\t}\n\tcreate_viewer(element: HTMLElement): ThreejsViewer {\n\t\treturn new ThreejsViewer(element, this.scene, this);\n\t}\n}\n// \tconsole.warn \"camera #{this.full_path()} has no controls assigned\"\n\n// controls_node: ->\n// \tif @_param_controls? && @_param_controls != ''\n// \t\tCore.Walker.find_node(this, @_param_controls)\n\nexport type BaseCameraObjNodeType = TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig>;\nexport class BaseCameraObjNodeClass extends TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig> {}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_compact from 'lodash/compact';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_trim from 'lodash/trim';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_sum from 'lodash/sum';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\n// const THREE = {Box3, BufferGeometry, Group, LineSegments, Mesh, Object3D, Points, Vector3}\nimport {CoreObject} from './Object';\nimport {CoreGeometry} from './Geometry';\nimport {CoreAttribute} from './Attribute';\n// import {Core} from '../_Module'\nimport {CoreString} from '../String';\nimport {CoreConstant, AttribClass} from './Constant';\n\n// import './MonkeyPatch'\n\nexport type GroupString = string;\n\nexport interface Object3DWithGeometry extends Object3D {\n\tgeometry: BufferGeometry;\n}\n\nexport class CoreGroup {\n\t// _group: Group\n\tprivate _timestamp: number | undefined;\n\t// _core_objects:\n\tprivate _objects: Object3D[] | undefined;\n\tprivate _core_objects: CoreObject[] | undefined;\n\n\t// _geometries: BufferGeometry[];\n\tprivate _core_geometries: CoreGeometry[] | undefined;\n\n\tprivate _bounding_box: Box3 | undefined;\n\t// private _bounding_sphere: Sphere | undefined;\n\n\tconstructor() {\n\t\t//_group: Group){\n\t\t// this._group = _group;\n\t\tthis.touch();\n\t}\n\n\t//\n\t//\n\t// TIMESTAMP\n\t//\n\t//\n\ttimestamp() {\n\t\treturn this._timestamp;\n\t}\n\ttouch() {\n\t\tthis._timestamp = performance.now();\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._bounding_box = undefined;\n\t\t// this._bounding_sphere = undefined;\n\t\tthis._core_geometries = undefined;\n\t\tthis._core_objects = undefined;\n\t}\n\n\t//\n\t//\n\t// CLONE\n\t//\n\t//\n\tclone() {\n\t\tconst core_group = new CoreGroup();\n\t\tif (this._objects) {\n\t\t\tconst objects = [];\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tobjects.push(CoreObject.clone(object));\n\t\t\t}\n\t\t\tcore_group.set_objects(objects);\n\t\t}\n\t\treturn core_group;\n\t}\n\t//\n\t//\n\t// OBJECTS\n\t//\n\t//\n\tset_objects(objects: Object3D[]) {\n\t\tthis._objects = objects;\n\t\tthis.touch();\n\t}\n\tobjects() {\n\t\treturn this._objects as Object3DWithGeometry[];\n\t}\n\tcore_objects() {\n\t\treturn (this._core_objects = this._core_objects || this._create_core_objects());\n\t}\n\tprivate _create_core_objects(): CoreObject[] {\n\t\tconst list: CoreObject[] = [];\n\t\tif (this._objects) {\n\t\t\tfor (let i = 0; i < this._objects.length; i++) {\n\t\t\t\tthis._objects[i].traverse((object) => {\n\t\t\t\t\tconst core_object = new CoreObject(object, i);\n\t\t\t\t\tlist.push(core_object);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\t// group() {\n\t// \treturn this._group;\n\t// }\n\t// uuid() {\n\t// \treturn this._group.uuid;\n\t// }\n\n\tgeometries(): BufferGeometry[] {\n\t\t// this._geometries = [];\n\t\t// for (let object of this._objects) {\n\t\t// \tobject.traverse((object) => this.__geometry_from_object.bind(this)(this._geometries, object));\n\t\t// \t// \tconst geometry = this.geometry_from_object(object)\n\t\t// \t// \tif (geometry != null) {\n\t\t// \t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t// \t// \t}\n\t\t// \t// });\n\t\t// }\n\t\t// return this._geometries;\n\t\tconst list: BufferGeometry[] = [];\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tconst geometry = (core_object.object() as Mesh).geometry as BufferGeometry;\n\t\t\tif (geometry) {\n\t\t\t\tlist.push(geometry);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tcore_geometries(): CoreGeometry[] {\n\t\treturn (this._core_geometries = this._core_geometries || this.create_core_geometries());\n\t}\n\tprivate create_core_geometries() {\n\t\tconst list: CoreGeometry[] = [];\n\t\tfor (let geometry of this.geometries()) {\n\t\t\tlist.push(new CoreGeometry(geometry));\n\t\t\t// object.traverse(object=> this.__core_geometry_from_object.bind(this)(this._core_geometries, object))\n\t\t\t// \tconst geometry = this.geometry_from_object(object)\n\t\t\t// \tif (geometry != null) {\n\t\t\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t\t// \t}\n\t\t\t// });\n\t\t}\n\t\treturn list;\n\t}\n\t__geometry_from_object(list: BufferGeometry[], object: Mesh) {\n\t\tif (object.geometry) {\n\t\t\treturn list.push(object.geometry as BufferGeometry);\n\t\t}\n\t}\n\t// __core_geometry_from_object(list, object){\n\t// \tconst geometry = CoreGroup.geometry_from_object(object)\n\t// \tif (geometry != null) {\n\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t// \t}\n\t// }\n\tstatic geometry_from_object(object: Object3D): BufferGeometry | null {\n\t\tif ((object as Mesh).isMesh || (object as LineSegments).isLine || (object as Points).isPoints) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t}\n\t\treturn null;\n\t}\n\tfaces() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.faces()));\n\t}\n\tpoints() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.points()));\n\t}\n\tpoints_count() {\n\t\treturn lodash_sum(this.core_geometries().map((g) => g.points_count()));\n\t}\n\tpoints_from_group(group: GroupString) {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tconst points = this.points();\n\t\t\treturn lodash_compact(indices.map((i) => points[i]));\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tstatic from_objects(objects: Object3D[]): CoreGroup {\n\t\tconst core_group = new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\treturn core_group;\n\t}\n\n\t// objects() {\n\t// \treturn this._objects = lodash_map(this._group.children, (object, i)=> {\n\t// \t\tconst object_wrapper = new CoreObject(object);\n\t// \t\tobject_wrapper.set_index(i);\n\t// \t\treturn object_wrapper;\n\t// \t});\n\t// }\n\tobjects_from_group(group_name: string): Object3D[] {\n\t\treturn this.core_objects_from_group(group_name).map((co) => co.object());\n\t}\n\tcore_objects_from_group(group_name: string): CoreObject[] {\n\t\tgroup_name = lodash_trim(group_name);\n\n\t\tif (group_name !== '') {\n\t\t\tconst index = parseInt(group_name);\n\t\t\tif (!lodash_isNaN(index)) {\n\t\t\t\treturn lodash_compact([this.core_objects()[index]]);\n\t\t\t} else {\n\t\t\t\treturn this.core_objects().filter((core_object) => {\n\t\t\t\t\treturn CoreString.match_mask(group_name, core_object.name());\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.core_objects();\n\t\t}\n\t}\n\n\t// reset: ->\n\t// \t@_geometries = []\n\t// \t@_points = []\n\n\t// _find_geometries: ->\n\t// \tlist = []\n\t// \t@_group.traverse (object)=>\n\t// \t\tif (geometry = object.geometry)?\n\t// \t\t\tlist.push new Geometry(geometry)\n\t// \tlist\n\n\t// _find_points: ->\n\t// \tlodash_flatten( lodash_map(this.objects(), (g)->g.points()) )\n\n\t// bounding_box() {\n\t// \treturn new Box3().setFromObject(this._group);\n\t// }\n\tbounding_box(): Box3 {\n\t\treturn (this._bounding_box = this._bounding_box || this._compute_bounding_box());\n\t}\n\t// bounding_sphere(): Sphere {\n\t// \treturn (this._bounding_sphere = this._bounding_sphere || this._compute_bounding_sphere());\n\t// }\n\tcenter(): Vector3 {\n\t\tconst center = new Vector3();\n\t\tthis.bounding_box().getCenter(center);\n\t\treturn center;\n\t}\n\tsize(): Vector3 {\n\t\tconst size = new Vector3();\n\t\tthis.bounding_box().getSize(size);\n\t\treturn size;\n\t}\n\n\tprivate _compute_bounding_box() {\n\t\tlet bbox: Box3 | undefined; // = new Box3();\n\t\tif (this._objects) {\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\tif (bbox) {\n\t\t\t\t\tbbox.expandByObject(object);\n\t\t\t\t} else {\n\t\t\t\t\tif (geometry.boundingBox) {\n\t\t\t\t\t\tbbox = geometry.boundingBox.clone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbbox = bbox || new Box3(new Vector3(-1, -1, -1), new Vector3(+1, +1, +1));\n\t\treturn bbox;\n\t}\n\t// private _compute_bounding_sphere() {\n\t// \tlet sphere: Sphere | undefined; // = new Box3();\n\t// \tif (this._objects) {\n\t// \t\tfor (let object of this._objects) {\n\t// \t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t// \t\t\tgeometry.computeBoundingSphere();\n\t// \t\t\tif (sphere) {\n\t// \t\t\t\tsphere.expandByObject(object);\n\t// \t\t\t} else {\n\t// \t\t\t\tsphere = geometry.boundingBox.clone();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tsphere = sphere || new Sphere(new Vector3(0, 0, 0), 1);\n\t// \treturn sphere;\n\t// }\n\tcompute_vertex_normals() {\n\t\tfor (let object of this.core_objects()) {\n\t\t\tobject.compute_vertex_normals();\n\t\t}\n\t}\n\n\thas_attrib(name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.has_attrib(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tattrib_type(name: string) {\n\t\tconst first_geometry = this.core_geometries()[0];\n\t\tif (first_geometry != null) {\n\t\t\treturn first_geometry.attrib_type(name);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trename_attrib(old_name: string, new_name: string, attrib_class: AttribClass) {\n\t\tswitch (attrib_class) {\n\t\t\tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst geometry = CoreGroup.geometry_from_object(child);\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\t\t\t\t\t\t\t\tcore_geometry.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst core_object = new CoreObject(child, 0);\n\t\t\t\t\t\t\t\tcore_object.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tattrib_names() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tobject_attrib_names() {\n\t\tlet first_object;\n\t\tif ((first_object = this.core_objects()[0]) != null) {\n\t\t\treturn first_object.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tattrib_names_matching_mask(masks_string: GroupString) {\n\t\tconst masks = CoreString.attrib_names(masks_string);\n\n\t\tconst matching_attrib_names = [];\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\tfor (let mask of masks) {\n\t\t\t\tif (CoreString.match_mask(attrib_name, mask)) {\n\t\t\t\t\tmatching_attrib_names.push(attrib_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lodash_uniq(matching_attrib_names);\n\t}\n\n\tattrib_sizes() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_sizes();\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\tattrib_size(attrib_name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_size(attrib_name);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_geometry of this.core_geometries()) {\n\t\t\tcore_geometry.add_numeric_attrib(name, size, default_value);\n\t\t}\n\t}\n\n\tadd_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tcore_object.add_numeric_attrib(name, default_value);\n\t\t}\n\t}\n\n\tstatic clone(src_group: Group) {\n\t\tconst new_group = new Group();\n\n\t\tsrc_group.children.forEach((src_object) => {\n\t\t\tconst new_object = CoreObject.clone(src_object);\n\t\t\tnew_group.add(new_object);\n\t\t});\n\n\t\treturn new_group;\n\t}\n}\n","import {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// const THREE = {BufferGeometry, Vector2, Vector3, Vector4}\nimport {CoreAttribute} from './Attribute';\nimport {CoreGeometry} from './Geometry';\nimport {CoreEntity} from './Entity';\n// import Geometry from './Geometry';\n\nconst ATTRIB_NAMES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n};\n\nenum ComponentName {\n\tx = 'x',\n\ty = 'y',\n\tz = 'z',\n\tw = 'w',\n\tr = 'r',\n\tg = 'g',\n\tb = 'b',\n}\nconst COMPONENT_INDICES = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\nconst PTNUM = 'ptnum';\nconst DOT = '.';\n\nexport class CorePoint extends CoreEntity {\n\t_geometry: BufferGeometry;\n\t_position: Vector3 | undefined;\n\t_normal: Vector3 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, index: number) {\n\t\tsuper(index);\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\n\tgeometry_wrapper() {\n\t\treturn this._core_geometry;\n\t}\n\tgeometry() {\n\t\treturn (this._geometry = this._geometry || this._core_geometry.geometry());\n\t}\n\n\t// add_attribute: (name, size, value)->\n\t// \t@_attributes[name] = new Attribute(size, value)\n\n\tattrib_size(name: string): number {\n\t\t//@_attributes[name].size()\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.getAttribute(name).itemSize;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tconst remapped_name = CoreAttribute.remap_name(name);\n\t\treturn this._core_geometry.has_attrib(remapped_name);\n\t}\n\n\tattrib_value(name: string) {\n\t\t//, target){ // target could be used, but not entirely sure I am ready now\n\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet component_name = null;\n\t\t\tlet component_index = null;\n\t\t\tif (name[name.length - 2] === DOT) {\n\t\t\t\tcomponent_name = name[name.length - 1] as ComponentName;\n\t\t\t\tcomponent_index = COMPONENT_INDICES[component_name];\n\t\t\t\tname = name.substring(0, name.length - 2);\n\t\t\t}\n\t\t\tconst remaped_name = CoreAttribute.remap_name(name);\n\n\t\t\t//if (attrib = @_attributes[name])?\n\t\t\tconst attrib = this._geometry.getAttribute(remaped_name);\n\t\t\tif (attrib) {\n\t\t\t\tconst {array} = attrib;\n\t\t\t\tif (this._core_geometry.is_attrib_indexed(remaped_name)) {\n\t\t\t\t\tconst value_index = this.attrib_value_index(remaped_name); //attrib.value()\n\t\t\t\t\treturn this._core_geometry.user_data_attrib(remaped_name)[value_index];\n\t\t\t\t} else {\n\t\t\t\t\tconst size = attrib.itemSize;\n\t\t\t\t\tconst start_index = this._index * size;\n\n\t\t\t\t\tif (component_index == null) {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn new Vector2(array[start_index + 0], array[start_index + 1]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// target.fromArray(array, start_index)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn new Vector4(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2],\n\t\t\t\t\t\t\t\t\tarray[start_index + 3]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow `size not valid (${size})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn array[start_index + component_index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst message = `attrib ${name} not found. availables are: ${Object.keys(\n\t\t\t\t\tthis._geometry.attributes || {}\n\t\t\t\t).join(',')}`;\n\t\t\t\tconsole.warn(message);\n\t\t\t\tthrow message;\n\t\t\t}\n\t\t}\n\t}\n\n\tattrib_value_index(name: string) {\n\t\tif (this._core_geometry.is_attrib_indexed(name)) {\n\t\t\t//@_attributes[name].value()\n\t\t\treturn this._geometry.getAttribute(name).array[this._index];\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tposition(): Vector3 {\n\t\t//@_attributes['position'].value()\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.POSITION);\n\t\tthis._position = this._position || new Vector3();\n\t\treturn this._position.fromArray(array, this._index * 3);\n\t}\n\tset_position(new_position: Vector3) {\n\t\tthis.set_attrib_value_vector3(ATTRIB_NAMES.POSITION, new_position);\n\t}\n\n\tnormal(): Vector3 {\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.NORMAL);\n\t\tthis._normal = this._normal || new Vector3();\n\t\treturn this._normal.fromArray(array, this._index * 3);\n\t}\n\tset_normal(new_normal: Vector3) {\n\t\treturn this.set_attrib_value_vector3(ATTRIB_NAMES.NORMAL, new_normal);\n\t}\n\n\tset_attrib_value(name: string, value: NumericAttribValue | string) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(value)\n\t\t//value = attrib.value()\n\t\t//value = this.attrib_value()\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst attrib_size = attrib.itemSize;\n\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tarray[this._index] = value as number;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tconst v2 = value as Vector2Like;\n\t\t\t\tarray[this._index * 2 + 0] = v2.x;\n\t\t\t\tarray[this._index * 2 + 1] = v2.y;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tconst is_color = (value as ColorLike).r != null;\n\t\t\t\tif (is_color) {\n\t\t\t\t\tconst col = value as ColorLike;\n\t\t\t\t\tarray[this._index * 3 + 0] = col.r;\n\t\t\t\t\tarray[this._index * 3 + 1] = col.g;\n\t\t\t\t\tarray[this._index * 3 + 2] = col.b;\n\t\t\t\t} else {\n\t\t\t\t\tconst v3 = value as Vector3Like;\n\t\t\t\t\tarray[this._index * 3 + 0] = v3.x;\n\t\t\t\t\tarray[this._index * 3 + 1] = v3.y;\n\t\t\t\t\tarray[this._index * 3 + 2] = v3.z;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Point.set_attrib_value does not yet allow attrib size ${attrib_size}`);\n\t\t\t\tthrow `attrib size ${attrib_size} not implemented`;\n\t\t}\n\t}\n\tset_attrib_value_vector3(name: string, value: Vector3) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst i = this._index * 3;\n\n\t\tarray[i] = value.x;\n\t\tarray[i + 1] = value.y;\n\t\tarray[i + 2] = value.z;\n\t}\n\n\tset_attrib_index(name: string, new_value_index: number) {\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(new_value_index)\n\t\t//value = attrib.value()\n\t\tconst array = this._geometry.getAttribute(name).array as number[];\n\t\treturn (array[this._index] = new_value_index);\n\t}\n}\n","export class CoreEntity {\n\tconstructor(protected _index: number) {}\n\tget index() {\n\t\treturn this._index;\n\t}\n}\n","type IterateeMethod = (element: any, index?: number) => void;\ntype IterateeMethodArray = IterateeMethod; // TODO: check this, as the element may be an array\ntype IterateeMethodCount = (index: number) => void;\n\ninterface CoreIteratorOptions {\n\tmax_time_per_chunk?: number;\n\tcheck_every_interations?: number;\n}\n\nexport class CoreIterator {\n\t// array\n\tprivate _array: any[] | undefined;\n\tprivate _iteratee_method_array: IterateeMethodArray | undefined;\n\tprivate _bound_next_with_array: (() => void) | undefined;\n\tprivate _current_array_element: any;\n\tprivate _array_index: number = 0;\n\n\t// count\n\tprivate _count: number = 0;\n\tprivate _iteratee_method_count: IterateeMethodCount | undefined;\n\tprivate _bound_next_with_count: (() => void) | undefined;\n\tprivate _current_count_index: number = 0;\n\n\tprivate _max_time_per_chunk: number;\n\tprivate _check_every_interations: number;\n\n\tprivate _resolve: null | (() => void) = null;\n\n\tconstructor(options: CoreIteratorOptions = {}) {\n\t\tthis._max_time_per_chunk = options.max_time_per_chunk || 10;\n\t\tthis._check_every_interations = options.check_every_interations || 100;\n\t}\n\n\tasync start_with_count(count: number, iteratee_method: IterateeMethodCount) {\n\t\tthis._count = count;\n\t\tthis._current_count_index = 0;\n\t\tthis._iteratee_method_count = iteratee_method;\n\t\tthis._bound_next_with_count = this.next_with_count.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_count();\n\t\t});\n\t}\n\tnext_with_count() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_count && this._bound_next_with_count) {\n\t\t\twhile (this._current_count_index < this._count) {\n\t\t\t\tthis._iteratee_method_count(this._current_count_index);\n\n\t\t\t\tthis._current_count_index++;\n\n\t\t\t\tif (this._current_count_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_count, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_count_index >= this._count) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ARRAY\n\t//\n\t//\n\tasync start_with_array(array: any[], iteratee_method: IterateeMethod) {\n\t\tthis._array = array;\n\t\tthis._array_index = 0;\n\t\tthis._iteratee_method_array = iteratee_method;\n\t\tthis._bound_next_with_array = this.next_with_array.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_array();\n\t\t});\n\t}\n\tnext_with_array() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_array && this._bound_next_with_array && this._array) {\n\t\t\twhile ((this._current_array_element = this._array[this._array_index])) {\n\t\t\t\tthis._iteratee_method_array(this._current_array_element, this._array_index);\n\n\t\t\t\tthis._array_index++;\n\n\t\t\t\tif (this._array_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_array, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_array_element === undefined) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreMath} from '../../math/_Module'\nimport {Vector2} from 'three/src/math/Vector2'\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\n\nexport class CoreGeometryUtilCircle {\n\tstatic positions(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst radian_per_segment =\n\t\t\tCoreMath.degrees_to_radians(arc_angle) / segments_count\n\n\t\tconst positions = []\n\t\tfor (let i = 0; i < segments_count; i++) {\n\t\t\tconst point_radian = radian_per_segment * i\n\t\t\tconst x = radius * Math.cos(point_radian)\n\t\t\tconst y = radius * Math.sin(point_radian)\n\n\t\t\tpositions.push(new Vector2(x, y))\n\t\t}\n\n\t\treturn positions\n\t}\n\n\tstatic create(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst positions_2d = this.positions(radius, segments_count, arc_angle)\n\n\t\tconst positions = []\n\t\tconst indices = []\n\t\tlet position_2d\n\t\tfor (let i = 0; i < positions_2d.length; i++) {\n\t\t\tposition_2d = positions_2d[i]\n\n\t\t\tpositions.push(position_2d.x)\n\t\t\tpositions.push(position_2d.y)\n\t\t\tpositions.push(0)\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1)\n\t\t\t\tindices.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// also add the last segment\n\t\tindices.push(segments_count - 1)\n\t\tindices.push(0)\n\n\t\tconst geometry = new BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(positions, 3)\n\t\t)\n\t\tgeometry.setIndex(indices)\n\n\t\treturn geometry\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {InstancedBufferGeometry} from 'three/src/core/InstancedBufferGeometry';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\n// import {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry'\n// const THREE = {BoxBufferGeometry, InstancedBufferAttribute, InstancedBufferGeometry, Matrix4, Quaternion, Vector2, Vector3}\n\nimport {CorePoint} from './Point';\n// import {Core} from '../_Module';\nimport {CoreGroup} from './Group';\nimport {CoreGeometry} from './Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nconst DEFAULT = {\n\tSCALE: new Vector3(1, 1, 1),\n\tPSCALE: 1,\n\tEYE: new Vector3(0, 0, 0),\n\tUP: new Vector3(0, 1, 0),\n};\nconst SCALE_ATTRIB_NAME = 'scale';\nconst PSCALE_ATTRIB_NAME = 'pscale';\nconst NORMAL_ATTRIB_NAME = 'normal';\nconst UP_ATTRIB_NAME = 'up';\nconst MATRIX_T = 'translate';\nconst MATRIX_R = 'rotate';\nconst MATRIX_S = 'scale';\n\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst ATTRIB_NAME_UV = 'uv';\nconst ATTRIB_NAME_COLOR = 'color';\n\nexport class CoreInstancer {\n\tprivate _is_pscale_present: boolean;\n\tprivate _is_scale_present: boolean;\n\tprivate _is_normal_present: boolean;\n\tprivate _is_up_present: boolean;\n\tprivate _do_rotate_matrices: boolean;\n\tprivate _matrices: Dictionary<Matrix4> = {};\n\n\tconstructor(private _group_wrapper: CoreGroup) {\n\t\tthis._is_pscale_present = this._group_wrapper.has_attrib('pscale');\n\t\tthis._is_scale_present = this._group_wrapper.has_attrib('scale');\n\n\t\tthis._is_normal_present = this._group_wrapper.has_attrib('normal');\n\t\tthis._is_up_present = this._group_wrapper.has_attrib('up');\n\n\t\tthis._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;\n\t}\n\n\tmatrices(): Matrix4[] {\n\t\tthis._matrices = {};\n\t\tthis._matrices[MATRIX_T] = new Matrix4();\n\t\tthis._matrices[MATRIX_R] = new Matrix4();\n\t\tthis._matrices[MATRIX_S] = new Matrix4();\n\n\t\treturn this._group_wrapper.points().map((point) => {\n\t\t\treturn this._matrix_from_point(point);\n\t\t});\n\t}\n\n\t_matrix_from_point(point: CorePoint): Matrix4 {\n\t\tconst t = point.position();\n\t\t//r = new Vector3(0,0,0)\n\t\tlet scale = this._is_scale_present ? point.attrib_value(SCALE_ATTRIB_NAME) : DEFAULT.SCALE;\n\t\tconst pscale = this._is_pscale_present ? point.attrib_value(PSCALE_ATTRIB_NAME) : DEFAULT.PSCALE;\n\t\tscale = scale.clone().multiplyScalar(pscale);\n\n\t\t//matrix = #Core.Transform.matrix(t, r, s, scale)\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.identity();\n\n\t\tconst scale_matrix = this._matrices[MATRIX_S];\n\t\tscale_matrix.makeScale(scale.x, scale.y, scale.z);\n\n\t\tconst translate_matrix = this._matrices[MATRIX_T];\n\t\ttranslate_matrix.makeTranslation(t.x, t.y, t.z);\n\n\t\tmatrix.multiply(translate_matrix);\n\n\t\tif (this._do_rotate_matrices) {\n\t\t\tconst rotate_matrix = this._matrices[MATRIX_R];\n\t\t\tconst eye = DEFAULT.EYE;\n\t\t\tconst center = point.attrib_value(NORMAL_ATTRIB_NAME).multiplyScalar(-1);\n\t\t\tconst up = this._is_up_present ? point.attrib_value(UP_ATTRIB_NAME) : DEFAULT.UP;\n\t\t\tup.normalize();\n\t\t\trotate_matrix.lookAt(eye, center, up);\n\n\t\t\tmatrix.multiply(rotate_matrix);\n\t\t}\n\n\t\tmatrix.multiply(scale_matrix);\n\n\t\treturn matrix;\n\t}\n\n\tstatic create_instance_buffer_geo(\n\t\tgeometry_to_instance: BufferGeometry,\n\t\ttemplate_core_group: CoreGroup,\n\t\tattributes_to_copy: string\n\t) {\n\t\tconst instance_pts = template_core_group.points();\n\t\t// geometry_to_instance = new BoxBufferGeometry( 2, 2, 2 )\n\t\t// geometry = new InstancedBufferGeometry()\n\t\t// geometry.index = geometry_to_instance.index\n\t\t// geometry.attributes.position = geometry_to_instance.attributes.position\n\t\t// geometry.attributes.uv = geometry_to_instance.attributes.uv\n\n\t\tconst geometry = new InstancedBufferGeometry();\n\t\tgeometry.copy(geometry_to_instance);\n\n\t\tconst instances_count = instance_pts.length;\n\t\tconst positions = new Float32Array(instances_count * 3);\n\t\tconst colors = new Float32Array(instances_count * 3);\n\t\tconst scales = new Float32Array(instances_count * 3);\n\t\tconst orients = new Float32Array(instances_count * 4);\n\n\t\tconst has_color = template_core_group.has_attrib(ATTRIB_NAME_COLOR);\n\n\t\tconst position = new Vector3(0, 0, 0);\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tconst instance_matrices = instancer.matrices();\n\n\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\tconst index3 = i * 3;\n\t\t\tconst index4 = i * 4;\n\n\t\t\tconst matrix = instance_matrices[i];\n\t\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\t\tposition.toArray(positions, index3);\n\t\t\tquaternion.toArray(orients, index4);\n\t\t\tscale.toArray(scales, index3);\n\n\t\t\tconst color = has_color ? instance_pt.attrib_value(ATTRIB_NAME_COLOR) : DEFAULT_COLOR;\n\t\t\tcolor.toArray(colors, index3);\n\t\t});\n\n\t\t// if(this._param_add_uv_offset){\n\t\tconst has_uv = template_core_group.has_attrib(ATTRIB_NAME_UV);\n\t\tif (has_uv) {\n\t\t\tconst uvs = new Float32Array(instances_count * 2);\n\t\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\t\tconst index2 = i * 2;\n\t\t\t\tconst uv = has_uv ? instance_pt.attrib_value(ATTRIB_NAME_UV) : DEFAULT_UV;\n\t\t\t\tuv.toArray(uvs, index2);\n\t\t\t});\n\t\t\tgeometry.setAttribute('instanceUv', new InstancedBufferAttribute(uvs, 2));\n\t\t}\n\t\t// }\n\n\t\tgeometry.setAttribute('instancePosition', new InstancedBufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('instanceScale', new InstancedBufferAttribute(scales, 3));\n\t\tgeometry.setAttribute('instanceOrientation', new InstancedBufferAttribute(orients, 4));\n\t\tgeometry.setAttribute('instanceColor', new InstancedBufferAttribute(colors, 3));\n\n\t\tconst attrib_names = template_core_group.attrib_names_matching_mask(attributes_to_copy);\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = template_core_group.attrib_size(attrib_name);\n\t\t\tconst values = new Float32Array(instances_count * attrib_size);\n\t\t\tinstance_pts.forEach((pt, i) => {\n\t\t\t\tconst value = pt.attrib_value(attrib_name);\n\t\t\t\tif (lodash_isNumber(value)) {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue.toArray(values, i * attrib_size);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgeometry.setAttribute(attrib_name, new InstancedBufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\tgeometry_wrapper.mark_as_instance();\n\n\t\treturn geometry;\n\t}\n}\n","// import {Core} from '../../_Module';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isString from 'lodash/isString';\nimport lodash_flatten from 'lodash/flatten';\nimport {Points} from 'three/src/objects/Points';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nconst THREE = {BufferGeometry, Float32BufferAttribute, Points};\n\n// import UrlLoader from '../UrlLoader';\nimport {CoreString} from '../../String';\nimport {CoreGeometry} from '../../geometry/Geometry';\nimport {CoreConstant} from '../../geometry/Constant';\nimport {CoreAttributeData} from '../../geometry/AttributeData';\nimport {CoreAttribute} from '../../geometry/Attribute';\n// import {BaseNodeType} from '../../../engine/nodes/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nconst DEEP_ATTRIB_SEPARATOR = ':';\n\nexport interface JsonDataLoaderOptions {\n\tdata_keys_prefix?: string;\n\tskip_entries?: string;\n\tdo_convert?: boolean;\n\tconvert_to_numeric?: string;\n}\n\nexport class JsonDataLoader {\n\t_json: any[] | undefined;\n\t_attribute_datas_by_name: Dictionary<CoreAttributeData> = {};\n\tprivate _options: JsonDataLoaderOptions = {};\n\n\tconstructor(options: JsonDataLoaderOptions = {}) {\n\t\tthis._options.data_keys_prefix = options.data_keys_prefix;\n\t\tthis._options.skip_entries = options.skip_entries;\n\t\tthis._options.do_convert = options.do_convert || false;\n\t\tthis._options.convert_to_numeric = options.convert_to_numeric;\n\t}\n\t//\n\n\tload(\n\t\turl: string,\n\t\tsuccess_callback: (object: Object3D) => void,\n\t\tprogress_callback: (() => void) | undefined,\n\t\terror_callback: (error: ErrorEvent) => void | undefined\n\t) {\n\t\t// const url_loader = new UrlLoader();\n\t\t// const start_time = performance.now();\n\t\t// const config = {\n\t\t// \tcrossdomain: true\n\t\t// }\n\t\tfetch(url)\n\t\t\t.then(async (response) => {\n\t\t\t\t// const end_time = performance.now();\n\n\t\t\t\tthis._json = await response.json();\n\t\t\t\tif (this._options.data_keys_prefix != null && this._options.data_keys_prefix != '') {\n\t\t\t\t\tthis._json = this.get_prefixed_json(this._json, this._options.data_keys_prefix.split('.'));\n\t\t\t\t}\n\t\t\t\tconst object = this.create_object();\n\t\t\t\tsuccess_callback(object);\n\t\t\t})\n\t\t\t.catch((error: ErrorEvent) => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\terror_callback(error);\n\t\t\t});\n\t}\n\n\tget_prefixed_json(json: any, prefixes: string[]): any[] {\n\t\tif (prefixes.length == 0) {\n\t\t\treturn json;\n\t\t} else {\n\t\t\tconst first_prefix = prefixes.shift();\n\t\t\tif (first_prefix) {\n\t\t\t\treturn this.get_prefixed_json(json[first_prefix], prefixes);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tset_json(json: any) {\n\t\treturn (this._json = json);\n\t}\n\n\tcreate_object() {\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tconst core_geo = new CoreGeometry(geometry);\n\n\t\tif (this._json != null) {\n\t\t\tconst points_count = this._json.length;\n\t\t\tcore_geo.init_position_attribute(points_count);\n\n\t\t\tthis._find_attributes();\n\t\t\t// for(let attrib_name of Object.keys(this._attribute_names)){\n\t\t\t// \tconst attrib_data = this._attribute_datas_by_name[attrib_name];\n\t\t\t// \treturn core_geo.add_attribute(attrib_name, attrib_data);\n\t\t\t// }\n\n\t\t\tconst convert_to_numeric_masks = CoreString.attrib_names(this._options.convert_to_numeric || '');\n\n\t\t\t// set values\n\t\t\tfor (let attrib_name of Object.keys(this._attribute_datas_by_name)) {\n\t\t\t\tlet attrib_values = lodash_flatten(this._attribute_values_for_name(attrib_name));\n\n\t\t\t\tconst data = this._attribute_datas_by_name[attrib_name];\n\t\t\t\tconst size = data.size();\n\n\t\t\t\tif (data.type() === CoreConstant.ATTRIB_TYPE.STRING) {\n\t\t\t\t\t// const index_data = CoreAttribute.array_to_indexed_arrays(\n\t\t\t\t\t// \tattrib_values as string[]\n\t\t\t\t\t// )\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options.do_convert &&\n\t\t\t\t\t\tCoreString.matches_one_mask(attrib_name, convert_to_numeric_masks)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst numerical_attrib_values: number[] = attrib_values.map((v) => {\n\t\t\t\t\t\t\tif (lodash_isString(v)) {\n\t\t\t\t\t\t\t\treturn parseFloat(v) || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t\t\tattrib_name,\n\t\t\t\t\t\t\tnew THREE.Float32BufferAttribute(numerical_attrib_values, size)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(attrib_values as string[]);\n\t\t\t\t\t\tcore_geo.set_indexed_attribute(attrib_name, index_data['values'], index_data['indices']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst numerical_attrib_values = attrib_values as number[];\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new THREE.Float32BufferAttribute(numerical_attrib_values, size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Points(geometry, CoreConstant.MATERIALS[THREE.Points.name]);\n\t}\n\n\tprivate _find_attributes() {\n\t\tlet first_pt;\n\n\t\tconst masks = CoreString.attrib_names(this._options.skip_entries || '');\n\n\t\tif (this._json) {\n\t\t\tif ((first_pt = this._json[0]) != null) {\n\t\t\t\tfor (let attrib_name of Object.keys(first_pt)) {\n\t\t\t\t\tconst attrib_value = first_pt[attrib_name];\n\n\t\t\t\t\tif (this._value_has_subentries(attrib_value)) {\n\t\t\t\t\t\tfor (let key of Object.keys(attrib_value)) {\n\t\t\t\t\t\t\tconst deep_attrib_name = [attrib_name, key].join(DEEP_ATTRIB_SEPARATOR);\n\t\t\t\t\t\t\tconst deep_attrib_value = attrib_value[attrib_name];\n\n\t\t\t\t\t\t\tif (!CoreString.matches_one_mask(deep_attrib_name, masks)) {\n\t\t\t\t\t\t\t\tthis._attribute_datas_by_name[deep_attrib_name] = CoreAttributeData.from_value(\n\t\t\t\t\t\t\t\t\tdeep_attrib_value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!CoreString.matches_one_mask(attrib_name, masks)) {\n\t\t\t\t\t\t\tthis._attribute_datas_by_name[attrib_name] = CoreAttributeData.from_value(attrib_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _attribute_values_for_name(attrib_name: string): StringOrNumber[] {\n\t\tif (this._json) {\n\t\t\treturn this._json.map((json_element: Dictionary<any>) => {\n\t\t\t\tconst prefix = attrib_name.split(DEEP_ATTRIB_SEPARATOR)[0];\n\t\t\t\tconst value = json_element[prefix];\n\t\t\t\tif (this._value_has_subentries(value)) {\n\t\t\t\t\tconst deep_attrib_name = attrib_name.substring(prefix.length + 1);\n\t\t\t\t\treturn value[deep_attrib_name] || 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn value || 0;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t_value_has_subentries(value: any): boolean {\n\t\treturn lodash_isObject(value) && !lodash_isArray(value);\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\tgeometryPending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {CoreGeometry} from '../Geometry'\n// import lodash_range from 'lodash/range'\nimport lodash_flatten from 'lodash/flatten'\nimport lodash_intersection from 'lodash/intersection'\nimport lodash_concat from 'lodash/concat'\n\nexport class CoreGeometryOperationSkin {\n\tconstructor(\n\t\tprivate geometry: BufferGeometry,\n\t\tprivate geometry1: BufferGeometry,\n\t\tprivate geometry0: BufferGeometry\n\t) {}\n\n\tprocess() {\n\t\tconst geometry_wrapper0 = new CoreGeometry(this.geometry0)\n\t\tconst geometry_wrapper1 = new CoreGeometry(this.geometry1)\n\t\tconst segments0 = geometry_wrapper0.segments()\n\t\tconst segments1 = geometry_wrapper1.segments()\n\n\t\tif (segments0.length === 0 || segments1.length === 0) {\n\t\t\treturn\n\t\t}\n\t\t// find smallest geo to iterate on its array\n\t\tconst geometries_by_segments_count =\n\t\t\tsegments0.length < segments1.length\n\t\t\t\t? [geometry_wrapper0, geometry_wrapper1]\n\t\t\t\t: [geometry_wrapper1, geometry_wrapper0]\n\n\t\tconst smallest_geometry = geometries_by_segments_count[0]\n\t\tconst largest_geometry = geometries_by_segments_count[1]\n\n\t\tconst smallest_segments = smallest_geometry.segments()\n\t\tconst largest_segments = largest_geometry.segments()\n\n\t\tconst smallest_points = smallest_geometry.points()\n\t\tconst largest_points = largest_geometry.points()\n\t\tconst smallest_points_count = smallest_points.length\n\t\t// const largest_points_count = largest_points.length;\n\t\tconst all_points = lodash_concat(smallest_points, largest_points)\n\n\t\t// const half_faces_count = smallest_segments.length;\n\t\tconst points_indices: number[] = []\n\t\tsmallest_segments.forEach((segment, i) => {\n\t\t\tconst matched_segment = largest_segments[i]\n\t\t\t// face 1\n\t\t\tpoints_indices.push(segment[0])\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t\t// face 2\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[1] + smallest_points_count)\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t})\n\n\t\tconst attributes_in_common = lodash_intersection(\n\t\t\tsmallest_geometry.attrib_names(),\n\t\t\tlargest_geometry.attrib_names()\n\t\t)\n\t\t// const points = all_points //points_indices.map(index=> all_points[index]);\n\t\tattributes_in_common.forEach((attrib_name) => {\n\t\t\tconst attrib_size = smallest_geometry.attrib_size(attrib_name)\n\t\t\tlet attrib_values = all_points.map((point) =>\n\t\t\t\tpoint.attrib_value(attrib_name)\n\t\t\t)\n\t\t\tif (attrib_size > 1) {\n\t\t\t\tattrib_values = lodash_flatten(\n\t\t\t\t\tattrib_values.map((v) => v.toArray())\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.geometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew Float32BufferAttribute(attrib_values, attrib_size)\n\t\t\t)\n\t\t})\n\n\t\t// const new_indices = lodash_range(points.length);\n\t\tthis.geometry.setIndex(points_indices)\n\t\tthis.geometry.computeVertexNormals()\n\t}\n}\n","import {PolyScene} from './scene/PolyScene';\n\nimport {CoreGraphNode} from '../core/graph/CoreGraphNode';\nimport {TypedNode} from './nodes/_Base';\nimport {TypedEventNode} from './nodes/event/_Base';\nimport {CodeEventNode} from './nodes/event/Code';\nexport {PolyScene, CoreGraphNode, TypedEventNode, TypedNode, CodeEventNode};\n\nimport {AllRegister} from './poly/registers/All';\nAllRegister.run();\n\n// import {SceneJsonExporter, SceneJsonExporterData} from './io/json/export/Scene';\n// import default_scene_data from '../../public/examples/scenes/default_simple.json';\n// import {SceneJsonImporter} from './io/json/import/Scene';\n\n// export class Tester {\n// \tstatic async load_scene() {\n// \t\tconst scene = await SceneJsonImporter.load_data(default_scene_data as SceneJsonExporterData);\n\n// \t\treturn scene;\n// \t}\n// \tstatic create_scene() {\n// \t\tconst scene = new PolyScene();\n// \t\tscene.root.create_node('ambient_light');\n\n// \t\tscene.loading_controller.mark_as_loaded();\n\n// \t\tconst perspective_camera1 = scene.root.create_node('perspective_camera');\n// \t\tscene.cameras_controller.set_master_camera_node_path(perspective_camera1.full_path());\n// \t\tperspective_camera1.p.t.z.set(10);\n\n// \t\tconst geo1 = scene.root.create_node('geo');\n// \t\tgeo1.flags.display.set(true);\n// \t\tconst box1 = geo1.create_node('box');\n// \t\tbox1.flags.display.set(true);\n// \t\tgeo1.p.r.y.set('$F+20');\n\n// \t\treturn scene;\n// \t}\n\n// \tstatic async test_save_and_load(scene: PolyScene) {\n// \t\tconst data = new SceneJsonExporter(scene).data();\n// \t\tconsole.log(JSON.stringify(data));\n// \t\tconst scene2 = await SceneJsonImporter.load_data(data);\n// \t\tconst data2 = new SceneJsonExporter(scene2).data();\n// \t\tconsole.log(JSON.stringify(data2));\n// \t}\n// }\n\n// const stylesheet = document.createElement('style');\n// stylesheet.innerText = 'html, body, canvas, .canvas_container {height: 100%; margin: 0px;} canvas {display: block;}';\n// document.body.appendChild(stylesheet);\n// const container = document.createElement('div');\n// container.classList.add('canvas_container');\n// document.body.appendChild(container);\n\n// Tester.load_scene().then((scene) => {\n// \t(window as any).scene = scene;\n// \tscene.cameras_controller.master_camera_node?.create_viewer(container);\n// \tscene.play();\n// });\n\n// Tester.test_save_and_load(scene);\n","// import {Scene} from 'three/src/scenes/Scene'\n// import {CoreGraph} from '../../core/graph/CoreGraph'\n// import {CorePerformance} from '../../core/performance/CorePerformance'\n// import {Cooker} from '../../core/graph/Cooker'\n// import {EmitPayload} from '../../core/graph/NodeScene'\n// import {BaseNode} from '../nodes/_Base'\n\n// import {CoreObject} from '../../core/Object';\n// import {Debug} from './concerns/Debug';\n// import {Env} from './concerns/Env'\n// import {ExpressionRegister} from './concerns/ExpressionRegister';\n// import {Frame} from './concerns/Frame';\n// import {GraphMixin} from './concerns/Graph';\n// import {Js} from './concerns/Js';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/LifeCycle';\n// import {Loading} from './concerns/Loading';\n// import {Name} from './concerns/Name';\n// import {Nodes} from './concerns/Nodes';\n// import {ObjectMixin} from './concerns/Object';\n// import {PickerNodes} from './concerns/PickerNodes';\n// import {PerformanceMixin} from './concerns/Performance';\n// import {Renderer} from './concerns/Renderer';\n// import {Store} from './concerns/Store';\n// import {Uniforms} from './concerns/Uniforms';\n\n// import {CubeCamerasController} from './utils/CubeCamerasController';\nimport {CamerasController} from './utils/CamerasController';\nimport {Cooker} from './utils/Cooker';\nimport {CoreGraph} from '../../core/graph/CoreGraph';\nimport {CookController} from './utils/CookController';\nimport {DispatchController} from './utils/DispatchController';\nimport {SceneEventsController} from './utils/events/EventsController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {LoadingController} from './utils/LoadingController';\nimport {ExpressionsController} from './utils/ExpressionsController';\nimport {MissingReferencesController} from './utils/MissingReferencesController';\nimport {NodesController} from './utils/NodesController';\nimport {CorePerformance} from '../../core/performance/CorePerformance';\nimport {TimeController} from './utils/TimeController';\nimport {PolySceneSerializer} from './utils/Serializer';\nimport {UniformsController} from './utils/UniformsController';\nimport {WebGLController} from './utils/WebGLController';\n\nimport {Scene} from 'three/src/scenes/Scene';\n\nexport class PolyScene {\n\tprotected _default_scene = new Scene();\n\tget default_scene() {\n\t\treturn this._default_scene;\n\t}\n\t_uuid!: string;\n\tset_uuid(uuid: string) {\n\t\treturn (this._uuid = uuid);\n\t}\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\t_name: string | undefined;\n\tset_name(name: string) {\n\t\treturn (this._name = name);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tprotected _cameras_controller = new CamerasController(this);\n\tget cameras_controller() {\n\t\treturn this._cameras_controller;\n\t}\n\n\tprivate _cooker = new Cooker(this);\n\tget cooker() {\n\t\treturn this._cooker;\n\t}\n\n\t// private _cube_cameras_controller: CubeCamerasController;\n\t// get cube_cameras_controller() {\n\t// \treturn (this._cube_cameras_controller = this._cube_cameras_controller || new CubeCamerasController(this));\n\t// }\n\tpublic readonly cook_controller = new CookController();\n\tasync wait_for_cooks_completed() {\n\t\treturn this.cook_controller.wait_for_cooks_completed();\n\t}\n\n\tprivate _dispatch_controller: DispatchController | undefined;\n\tget dispatch_controller() {\n\t\treturn (this._dispatch_controller = this._dispatch_controller || new DispatchController(this));\n\t}\n\tprivate _events_controller: SceneEventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new SceneEventsController(this));\n\t}\n\n\tprivate _graph = new CoreGraph();\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\n\tprivate _lifecycle_controller: LifeCycleController | undefined;\n\tget lifecycle_controller() {\n\t\treturn (this._lifecycle_controller = this._lifecycle_controller || new LifeCycleController(this));\n\t}\n\tprivate _loading_controller: LoadingController | undefined;\n\tget loading_controller() {\n\t\treturn (this._loading_controller = this._loading_controller || new LoadingController(this));\n\t}\n\n\tprivate _missing_expression_references_controller: MissingReferencesController = new MissingReferencesController();\n\tget missing_expression_references_controller() {\n\t\treturn this._missing_expression_references_controller;\n\t}\n\tprivate _expressions_controller: ExpressionsController = new ExpressionsController();\n\tget expressions_controller() {\n\t\treturn this._expressions_controller;\n\t}\n\n\tprotected _nodes_controller = new NodesController(this);\n\tget nodes_controller() {\n\t\treturn this._nodes_controller;\n\t}\n\n\tprotected _performance: CorePerformance | undefined;\n\tget performance() {\n\t\treturn (this._performance = this._performance || new CorePerformance());\n\t}\n\n\t//\n\t//\n\t// time\n\t//\n\t//\n\tprotected _time_controller = new TimeController(this);\n\tget time_controller() {\n\t\treturn this._time_controller;\n\t}\n\tset_frame(frame: number) {\n\t\tthis.time_controller.set_frame(frame);\n\t}\n\tget frame() {\n\t\treturn this.time_controller.frame;\n\t}\n\tget time() {\n\t\treturn this.time_controller.time;\n\t}\n\tget frame_range() {\n\t\treturn this.time_controller.frame_range;\n\t}\n\tplay() {\n\t\tthis.time_controller.play();\n\t}\n\tpause() {\n\t\tthis.time_controller.pause();\n\t}\n\n\t//\n\t//\n\t// serializer\n\t//\n\t//\n\tprivate _serializer: PolySceneSerializer | undefined;\n\tprivate get serializer() {\n\t\treturn (this._serializer = this._serializer || new PolySceneSerializer(this));\n\t}\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n\n\t//\n\t//\n\t// uniforms\n\t//\n\t//\n\tprivate _uniforms_controller: UniformsController | undefined;\n\tget uniforms_controller() {\n\t\treturn (this._uniforms_controller = this._uniforms_controller || new UniformsController(this));\n\t}\n\n\t//\n\t//\n\t// webgl\n\t//\n\t//\n\tprivate _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController());\n\t}\n\n\t//\n\t//\n\t// constructor\n\t//\n\t//\n\tconstructor() {\n\t\t// this.mark_as_loaded()\n\t\tthis._graph.set_scene(this);\n\t\t// this.time_controller.init();\n\t\tthis.nodes_controller.init();\n\t}\n\n\t//\n\t//\n\t// cooker\n\t//\n\t//\n\tbatch_update(callback: () => void) {\n\t\tthis._cooker.block();\n\n\t\tcallback();\n\n\t\tthis._cooker.unblock();\n\t}\n\n\t//\n\t//\n\t// nodes\n\t//\n\t//\n\tnode(path: string) {\n\t\treturn this.nodes_controller.node(path);\n\t}\n\tget root() {\n\t\treturn this.nodes_controller.root;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\n\nexport class CamerasController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_master_camera_node_path: string | null = null;\n\n\tset_master_camera_node_path(camera_node_path: string) {\n\t\tthis._master_camera_node_path = camera_node_path;\n\t}\n\tget master_camera_node_path() {\n\t\treturn this._master_camera_node_path;\n\t}\n\tget master_camera_node(): BaseCameraObjNodeType | null {\n\t\tif (this.master_camera_node_path) {\n\t\t\tconst camera_node = this.scene.node(this.master_camera_node_path) as BaseCameraObjNodeType | null;\n\t\t\treturn camera_node;\n\t\t} else {\n\t\t\tconsole.warn('master camera node not found');\n\t\t\treturn this._find_any_camera();\n\t\t}\n\t}\n\n\tprivate _find_any_camera(): BaseCameraObjNodeType | null {\n\t\tconst root = this.scene.root;\n\t\treturn root.nodes_by_type('perspective_camera')[0] || root.nodes_by_type('orthographic_camera')[0];\n\t}\n}\n","// import {CoreGraphNode} from './CoreGraphNode';\n// import { CoreGraphNodeScene } from './CoreGraphNodeScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../PolyScene';\n\n// interface CookerQueue {\n// \t[propName: string]: CoreGraphNodeSceneNamed;\n// }\n\nexport class Cooker {\n\tprivate _queue: Map<string, CoreGraphNode | undefined> = new Map<string, CoreGraphNode | undefined>();\n\tprivate _block_level: number = 0;\n\tprivate _process_item_bound = this._process_item.bind(this);\n\n\tconstructor(private _scene: PolyScene) {\n\t\tthis._block_level = 0;\n\t}\n\n\tblock() {\n\t\tthis._block_level += 1;\n\t}\n\tunblock() {\n\t\tthis._block_level -= 1;\n\t\tif (this._block_level < 0) {\n\t\t\tthis._block_level = 0;\n\t\t}\n\n\t\tthis.process_queue();\n\t}\n\t// unblock_later: ->\n\t// \tsetTimeout( this.unblock.bind(this), 0 )\n\tget blocked() {\n\t\treturn this._block_level > 0;\n\t}\n\n\tenqueue(node: CoreGraphNode, original_trigger_graph_node?: CoreGraphNode) {\n\t\tthis._queue.set(node.graph_node_id, original_trigger_graph_node);\n\t}\n\n\tprocess_queue() {\n\t\tif (this.blocked) {\n\t\t\treturn;\n\t\t}\n\t\t// let node: CoreGraphNode;\n\t\t// console.warn('FLUSH', Object.keys(this._queue).length);\n\n\t\tthis._queue.forEach(this._process_item_bound);\n\t\t// for (let id of Object.keys(this._queue)) {\n\t\t// \tnode = this._queue[id];\n\t\t// \tif (node) {\n\t\t// \t\tdelete this._queue[id];\n\t\t// \t\tnode.dirty_controller.run_post_dirty_hooks();\n\t\t// \t}\n\t\t// }\n\t}\n\tprivate _process_item(original_trigger_graph_node: CoreGraphNode | undefined, id: string) {\n\t\tconst node = this._scene.graph.node_from_id(id);\n\t\tif (node) {\n\t\t\tthis._queue.delete(id);\n\t\t\tnode.dirty_controller.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t}\n\t}\n}\n","/// <reference path=\"./dagre.d.ts\" />\nimport {Graph, alg} from '@dagrejs/graphlib';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {NodeSimple} from './NodeSimple'\n// import {GraphNode} from './concerns/GraphNode'\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// class DummyClass {}\n// class GraphNodeDummy extends Dirtyable(DummyClass) {}\n\n// TODO: typescript, using ids with a specific type (https://basarat.gitbook.io/typescript/main-1/nominaltyping)\n// export interface CoreGraphNodeId extends String {\n// \t// _CoreGraphNodeIdBrand: string;\n// }\nexport type CoreGraphNodeId = string;\nimport {CoreGraphNode} from './CoreGraphNode';\n\nexport class CoreGraph {\n\t_graph: Graph;\n\t_next_id: number = 0;\n\t_scene: PolyScene | undefined;\n\n\tconstructor() {\n\t\tthis._graph = new Graph({\n\t\t\tdirected: true,\n\t\t\tcompound: false,\n\t\t\tmultigraph: true,\n\t\t});\n\t}\n\n\tgraph() {\n\t\treturn this._graph;\n\t}\n\tset_scene(scene: PolyScene) {\n\t\tthis._scene = scene;\n\t}\n\tscene() {\n\t\treturn this._scene;\n\t}\n\n\tnext_id(): CoreGraphNodeId {\n\t\treturn (<unknown>`${(this._next_id += 1)}`) as CoreGraphNodeId;\n\t}\n\n\tsetNode(node: CoreGraphNode) {\n\t\tthis._graph.setNode(node.graph_node_id, node);\n\t}\n\n\tremoveNode(node: CoreGraphNode) {\n\t\tthis._graph.removeNode(node.graph_node_id);\n\t}\n\n\tnodes_from_ids(ids: string[]) {\n\t\tconst nodes: CoreGraphNode[] = [];\n\t\tfor (let id of ids) {\n\t\t\tconst node = this.node_from_id(id);\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t\t// if (ids) {\n\t\t// \tlet node: any;\n\t\t// \treturn ids.map((id) => {\n\t\t// \t\tif ((node = this.node_from_id(id)) != null) {\n\t\t// \t\t\treturn node;\n\t\t// \t\t} else {\n\t\t// \t\t\treturn console.warn(`could not find node with id ${id}`);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// } else {\n\t\t// \treturn [];\n\t\t// }\n\t}\n\t// TODO: typescript: this should return CoreGraphNodeId|null\n\tnode_from_id(id: string): CoreGraphNode {\n\t\treturn this._graph.node(id);\n\t}\n\n\tconnect(src: CoreGraphNode, dest: CoreGraphNode): boolean {\n\t\tconst src_id = src.graph_node_id;\n\t\tconst dest_id = dest.graph_node_id;\n\n\t\tif (this._graph.hasNode(src_id) && this._graph.hasNode(dest_id)) {\n\t\t\tthis._graph.setEdge(src_id, dest_id);\n\n\t\t\t// const scene_auto_updating = this.scene().auto_updating();\n\t\t\tconst scene_loading = this._scene ? this._scene.loading_controller.is_loading : true;\n\t\t\tconst check_if_graph_has_cycle = !scene_loading;\n\t\t\tlet graph_has_cycle = false;\n\t\t\tif (check_if_graph_has_cycle) {\n\t\t\t\tgraph_has_cycle = !alg.isAcyclic(this._graph);\n\t\t\t}\n\n\t\t\tif (graph_has_cycle) {\n\t\t\t\tthis._graph.removeEdge(src_id, dest_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`attempt to connect non existing node ${src_id} or ${dest_id}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisconnect(src: CoreGraphNode, dest: CoreGraphNode) {\n\t\tif (src && dest) {\n\t\t\tconst src_id_s = src.graph_node_id;\n\t\t\tconst dest_id_s = dest.graph_node_id;\n\t\t\tthis._graph.removeEdge(src_id_s, dest_id_s);\n\n\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\t\t}\n\t}\n\tdisconnect_predecessors(node: CoreGraphNode) {\n\t\tconst predecessors = this.predecessors(node);\n\t\tfor (let predecessor of predecessors) {\n\t\t\tthis.disconnect(predecessor, node);\n\t\t}\n\t}\n\tdisconnect_successors(node: CoreGraphNode) {\n\t\tconst successors = this.successors(node);\n\t\tfor (let successor of successors) {\n\t\t\tthis.disconnect(node, successor);\n\t\t}\n\t}\n\t// disconnect_predecessors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst predecessor_ids = this._graph.predecessors(node_id);\n\t// \tif( predecessor_ids ){\n\t// \t\tfor(let predecessor_id of predecessor_ids){\n\t// \t\t\tthis._graph.removeEdge(predecessor_id, node_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// disconnect_successors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst successor_ids = this._graph.successors(node_id);\n\t// \tif (successor_ids) {\n\t// \t\tfor(let successor_id of successor_ids){\n\t// \t\t\tthis._graph.removeEdge(node_id, successor_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tpredecessor_ids(id: CoreGraphNodeId) {\n\t\treturn this._graph.predecessors(id) || [];\n\t}\n\tpredecessors(node: CoreGraphNode) {\n\t\tconst ids = this.predecessor_ids(node.graph_node_id);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tsuccessor_ids(id: string): CoreGraphNodeId[] {\n\t\treturn this._graph.successors(id) || [];\n\t}\n\tsuccessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.successor_ids(node.graph_node_id) || [];\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\n\tprivate all_next_ids(node: CoreGraphNode, method: 'successor_ids' | 'predecessor_ids'): CoreGraphNodeId[] {\n\t\tconst ids: CoreGraphNodeId[] = [];\n\t\tlet next_ids = this[method](node.graph_node_id);\n\n\t\twhile (next_ids.length > 0) {\n\t\t\tconst next_next_ids = [];\n\t\t\tfor (let next_id of next_ids) {\n\t\t\t\tfor (let next_next_id of this[method](next_id)) {\n\t\t\t\t\tnext_next_ids.push(next_next_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let id of next_ids) {\n\t\t\t\tids.push(id);\n\t\t\t}\n\t\t\tfor (let id of next_next_ids) {\n\t\t\t\tnext_ids.push(id);\n\t\t\t}\n\t\t\tnext_ids = next_next_ids;\n\t\t}\n\t\treturn ids;\n\t}\n\tall_predecessor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'predecessor_ids');\n\t}\n\tall_successor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'successor_ids');\n\t}\n\tall_predecessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_predecessor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tall_successors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_successor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\n\ntype Callback = (value: void) => void;\n\nexport class CookController {\n\tprivate _cooking_nodes_by_id: Map<string, BaseNodeType> = new Map();\n\tprivate _resolves: Callback[] = [];\n\tconstructor() {}\n\n\tadd_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.set(node.graph_node_id, node);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.delete(node.graph_node_id);\n\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tprivate flush() {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync wait_for_cooks_completed(): Promise<void> {\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport '../../Poly';\nimport {POLY} from '../../Poly';\nimport {SceneEvent} from '../../poly/SceneEvent';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\n// type Callback = (emitter: CoreGraphNodeScene) => void; // TODO: typescript: maybe arg should be an event instead of the emitter\ninterface EventsListener {\n\tprocess_events: (emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) => void;\n}\n\nexport class DispatchController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _events_listener: EventsListener | undefined;\n\n\tset_listener(events_listener: EventsListener) {\n\t\tthis._events_listener = events_listener;\n\t\t// this._store.scene = this;\n\t}\n\tget events_listener() {\n\t\treturn this._events_listener;\n\t}\n\tdispatch(emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) {\n\t\tthis._events_listener?.process_events(emitter, event_name, data);\n\t}\n\tget emit_allowed(): boolean {\n\t\treturn (\n\t\t\tthis.scene.loading_controller.loaded &&\n\t\t\tthis._events_listener != null &&\n\t\t\tthis.scene.loading_controller.auto_updating &&\n\t\t\t!POLY.player_mode() // TODO: typecript: maybe I should still be able to emit events in player mode? - check how the Event Sop works\n\t\t);\n\t}\n\t// store_commit(event_name: string, payload: any = this) {\n\t// \tif (this._store) {\n\t// \t\tthis._store.commit(`engine/${event_name}`, payload);\n\t// \t}\n\t// }\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter, LinearEncoding, HalfFloatType} from 'three/src/constants'\n// import EquirectangularToCubeGenerator from 'src/core/Utils/EquirectangularToCubeGenerator';\n// import PMREMGenerator from 'src/core/Utils/PMREMGenerator';\n// import PMREMCubeUVPacker from 'src/core/Utils/PMREMCubeUVPacker';\n\ninterface RendererByString {\n\t[propName: string]: WebGLRenderer;\n}\ninterface TextureByString {\n\t[propName: string]: Texture;\n}\n\ninterface POLYWebGLRenderer extends WebGLRenderer {\n\t_polygon_id: number;\n}\n\nconst CONTEXT_OPTIONS = {\n\tantialias: true,\n\t// preserveDrawingBuffer: true, // this could only be useful to capture static images\n};\n\ntype Callback = (value: WebGLRenderer) => void;\n\nexport class RenderersController {\n\t_next_renderer_id: number = 0;\n\t_next_env_map_id: number = 0;\n\t_renderers: RendererByString = {};\n\t_env_maps: TextureByString = {};\n\tprivate _require_webgl2: boolean = false;\n\tprivate _resolves: Callback[] = [];\n\n\tconstructor() {}\n\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t}\n\t}\n\trendering_context(canvas: HTMLCanvasElement): WebGLRenderingContext {\n\t\tlet gl: WebGLRenderingContext | null = null;\n\t\tif (this._require_webgl2) {\n\t\t\tgl = this._rendering_context_webgl(canvas, true);\n\t\t}\n\t\tif (!gl) {\n\t\t\tgl = this._rendering_context_webgl(canvas, false);\n\t\t}\n\n\t\t// gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)\n\t\t// to test data texture\n\t\t// gl.getExtension('OES_texture_float')\n\t\t// gl.getExtension('OES_texture_float_linear')\n\n\t\treturn gl;\n\t}\n\tprivate _rendering_context_webgl(canvas: HTMLCanvasElement, webgl2: boolean): WebGLRenderingContext {\n\t\tlet context_name = webgl2 ? 'webgl2' : 'webgl';\n\t\tlet gl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\tif (!gl) {\n\t\t\tcontext_name = webgl2 ? 'experimental-webgl2' : 'experimental-webgl';\n\t\t\tgl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\t}\n\t\treturn gl as WebGLRenderingContext;\n\t}\n\t// private _rendering_context_webgl(\n\t// \tcanvas: HTMLCanvasElement\n\t// ): WebGLRenderingContext {\n\t// \tlet gl = canvas.getContext('webgl', CONTEXT_OPTIONS)\n\t// \tif (!gl) {\n\t// \t\tgl = canvas.getContext('experimental-webgl', CONTEXT_OPTIONS)\n\t// \t}\n\t// \treturn gl as WebGLRenderingContext\n\t// }\n\n\tregister_renderer(renderer: WebGLRenderer) {\n\t\tif ((renderer as POLYWebGLRenderer)._polygon_id) {\n\t\t\tthrow new Error('render already registered');\n\t\t}\n\t\t(renderer as POLYWebGLRenderer)._polygon_id = this._next_renderer_id += 1;\n\n\t\t// there is a bug where 2 renderers are created from the beginning\n\t\t// because the from_json of the viewer_component is called after\n\t\t// the camera being set for the first time\n\t\t// console.log(\"register renderer\", renderer, renderer._polygon_id)\n\n\t\t// this is being tested in PostProcess\n\t\t// const canvas = renderer.domElement\n\t\t// const gl = canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' )\n\t\t// const extension_exist = gl.getExtension('OES_standard_derivatives')\n\t\t// if(!extension_exist){\n\t\t// \tconsole.warn(\"renderers controller: gl extension not available\")\n\t\t// }\n\n\t\tthis._renderers[(renderer as POLYWebGLRenderer)._polygon_id] = renderer;\n\n\t\tif (Object.keys(this._renderers).length == 1) {\n\t\t\tthis.flush_callbacks_with_renderer(renderer);\n\t\t}\n\t}\n\tderegister_renderer(renderer: WebGLRenderer) {\n\t\tdelete this._renderers[(renderer as POLYWebGLRenderer)._polygon_id];\n\t\trenderer.dispose();\n\t}\n\tprivate first_renderer(): WebGLRenderer | null {\n\t\tconst first_id = Object.keys(this._renderers)[0];\n\t\tif (first_id) {\n\t\t\treturn this._renderers[first_id];\n\t\t}\n\t\treturn null;\n\t}\n\trenderers(): WebGLRenderer[] {\n\t\treturn Object.values(this._renderers);\n\t}\n\n\tprivate flush_callbacks_with_renderer(renderer: WebGLRenderer) {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback(renderer);\n\t\t}\n\t}\n\n\tasync wait_for_renderer(): Promise<WebGLRenderer> {\n\t\tconst renderer = this.first_renderer();\n\t\tif (renderer) {\n\t\t\treturn renderer;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n\n\t// async register_env_map(env_map: Texture){\n\t// \tconsole.log(\"register_env_map\", env_map)\n\t// \tif(env_map._polygon_id){\n\t// \t\tthrow new Error('cube_map already registered')\n\t// \t}\n\t// \tconst texture = await this.prepare_env_map(env_map)\n\t// \ttexture._polygon_id = (this._next_env_map_id += 1)\n\t// \tthis._env_maps[texture._polygon_id] = texture\n\t// \treturn texture\n\t// }\n\t// deregister_env_map(env_map: Texture){\n\t// \tconsole.log(\"deregister_env_map\", env_map)\n\t// \tdelete this._env_maps[env_map._polygon_id]\n\t// \tenv_map.dispose()\n\t// }\n\n\t// private async prepare_env_map(texture: Texture): Texture{\n\t// \ttexture.minFilter = NearestFilter;\n\t// \ttexture.magFilter = NearestFilter;\n\t// \ttexture.encoding = LinearEncoding;\n\n\t// \tawait CoreScriptLoader.load_three('loaders/EXRLoader')\n\t// \tawait CoreScriptLoader.load_three('loaders/EquirectangularToCubeGenerator')\n\t// \tconst EquirectangularToCubeGenerator_name = 'EquirectangularToCubeGenerator'\n\t// \tconst PMREMGenerator_name = 'PMREMGenerator'\n\t// \tconst PMREMCubeUVPacker_name = 'PMREMCubeUVPacker'\n\n\t// \tconst cubemapGenerator = new THREE[EquirectangularToCubeGenerator_name]( texture, { resolution: 512, type: HalfFloatType } );\n\n\t// \tconst renderer = this.first_renderer()\n\t// \tif(renderer){\n\t// \t\tconst cubeMapTexture = cubemapGenerator.update( renderer );\n\n\t// \t\tconst pmremGenerator = new THREE[PMREMGenerator_name]( cubeMapTexture );\n\t// \t\tpmremGenerator.update( renderer );\n\n\t// \t\tconst pmremCubeUVPacker = new THREE[PMREMCubeUVPacker_name]( pmremGenerator.cubeLods );\n\t// \t\tpmremCubeUVPacker.update( renderer );\n\n\t// \t\trenderer.gammaInput = false;\n\t// \t\trenderer.gammaOutput = true;\n\n\t// \t\tconst exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;\n\n\t// \t\ttexture.dispose();\n\t// \t\tcubemapGenerator.dispose();\n\t// \t\tpmremGenerator.dispose();\n\t// \t\tpmremCubeUVPacker.dispose();\n\n\t// \t\treturn exrCubeRenderTarget.texture;\n\t// \t}\n\t// }\n}\n","import {BaseNodeClass} from '../nodes/_Base';\nimport {NodeContext} from './NodeContext';\n\nexport interface RegisterOptions {\n\tonly?: string[];\n\texcept?: string[];\n}\n\n// export interface BaseNodeConstructor {\n// \tnew (): BaseNode;\n// }\n\nexport type BaseNodeConstructor = typeof BaseNodeClass;\ntype NodeConstructorByType = Dictionary<BaseNodeConstructor>;\ntype NodeConstructorByTypeByContext = Dictionary<NodeConstructorByType>;\ntype TabMenuByTypeByContext = Dictionary<Dictionary<string>>;\ntype RegisterOptionsByTypeByContext = Dictionary<Dictionary<RegisterOptions>>;\n\nexport class NodesRegister {\n\tprivate _node_register: NodeConstructorByTypeByContext = {};\n\tprivate _node_register_categories: TabMenuByTypeByContext = {};\n\tprivate _node_register_options: RegisterOptionsByTypeByContext = {};\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type();\n\t\tthis._node_register[context] = this._node_register[context] || {};\n\n\t\tconst already_registered_node = this._node_register[context][node_type];\n\t\tif (already_registered_node) {\n\t\t\tthrow new Error(`node ${context}/${node_type} already registered`);\n\t\t}\n\t\tthis._node_register[context][node_type] = node;\n\n\t\tif (tab_menu_category) {\n\t\t\tthis._node_register_categories[context] = this._node_register_categories[context] || {};\n\t\t\tthis._node_register_categories[context][node_type] = tab_menu_category;\n\t\t}\n\t\tthis._node_register_options[context] = this._node_register_options[context] || {};\n\t\tif (options) {\n\t\t\tthis._node_register_options[context][node_type] = options;\n\t\t}\n\t}\n\tderegister_node(context: string, node_type: string) {\n\t\tdelete this._node_register[context][node_type];\n\t\tdelete this._node_register_categories[context][node_type];\n\t\tdelete this._node_register_options[context][node_type];\n\t}\n\tregistered_nodes_for_context_and_parent_type(context: NodeContext, parent_node_type: string) {\n\t\tconst map = this._node_register[context];\n\t\tif (map) {\n\t\t\tconst nodes_for_context = Object.values(this._node_register[context]);\n\t\t\treturn nodes_for_context.filter((node) => {\n\t\t\t\tconst options = this._node_register_options[context][node.type()];\n\t\t\t\tif (!options) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconst option_only = options['only'];\n\t\t\t\t\tconst option_except = options['except'];\n\t\t\t\t\tconst context_and_type = `${context}/${parent_node_type}`;\n\t\t\t\t\tif (option_only) {\n\t\t\t\t\t\treturn option_only.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t\tif (option_except) {\n\t\t\t\t\t\treturn !option_except.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !options || options['only']?.includes(parent_node_type);\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tregistered_nodes(context: NodeContext, parent_node_type: string): Dictionary<BaseNodeConstructor> {\n\t\tconst nodes_by_type: Dictionary<BaseNodeConstructor> = {};\n\t\tconst nodes = this.registered_nodes_for_context_and_parent_type(context, parent_node_type);\n\t\tfor (let node of nodes) {\n\t\t\tconst type = node.type();\n\t\t\tnodes_by_type[type] = node;\n\t\t}\n\t\treturn nodes_by_type;\n\t}\n\tregistered_category(context: NodeContext, type: string) {\n\t\treturn this._node_register_categories[context][type];\n\t}\n}\n","import {PolyScene} from '../../PolyScene';\nimport {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\nimport {MouseEventsController} from './MouseEventsController';\nimport {BaseEventsController} from './_BaseEventsController';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\n\nexport class SceneEventsController {\n\tprivate _mouse_events_controller: BaseEventsController<MouseEvent, MouseEventNode> = new MouseEventsController();\n\tprivate _controllers: BaseEventsController<Event, BaseEventNodeType>[] = [this._mouse_events_controller];\n\tconstructor(scene: PolyScene) {}\n\n\tregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.register_node(node);\n\t\t}\n\t}\n\tunregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.unregister_node(node);\n\t\t}\n\t}\n\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tfor (let controller of this._controllers) {\n\t\t\tif (controller.accepts_event(event)) {\n\t\t\t\tcontroller.process(event, canvas, camera_node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _get_controller_for_node<T extends BaseEventNodeType>(\n\t\tnode: T\n\t): BaseEventsController<Event, BaseEventNodeType> | undefined {\n\t\tswitch (node.type) {\n\t\t\tcase MouseEventNode.type():\n\t\t\t\treturn this._mouse_events_controller;\n\t\t}\n\t}\n}\n","// import lodash_filter from 'lodash/filter';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\n// import {Cooker} from './Cooker';\nimport {CoreGraphNode} from './CoreGraphNode';\n\n// not sure how I can have caller: DirtyableMixin if DirtyableMixin is not yet defined\nexport type PostDirtyHook = (caller?: CoreGraphNode) => void;\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class DirtyController {\n\t_dirty_count: number = 0;\n\t_dirty: boolean = true;\n\t_dirty_timestamp: number | undefined;\n\t_cached_successors: CoreGraphNode[] | undefined;\n\t_forbidden_trigger_nodes: string[] | undefined;\n\n\t// hooks\n\t_post_dirty_hooks: PostDirtyHook[] | undefined;\n\t_post_dirty_hook_names: string[] | undefined;\n\n\tconstructor(private node: CoreGraphNode) {}\n\n\t// _init_dirtyable(): void {\n\t// \tthis._dirty_count = 0;\n\t// \tthis._dirty = true;\n\t// }\n\tget is_dirty(): boolean {\n\t\treturn this._dirty === true;\n\t}\n\tget dirty_timestamp() {\n\t\treturn this._dirty_timestamp;\n\t}\n\tget dirty_count(): number {\n\t\treturn this._dirty_count;\n\t}\n\tadd_post_dirty_hook(name: string, method: PostDirtyHook) {\n\t\tthis._post_dirty_hook_names = this._post_dirty_hook_names || [];\n\t\tthis._post_dirty_hooks = this._post_dirty_hooks || [];\n\n\t\tif (!this._post_dirty_hook_names.includes(name)) {\n\t\t\tthis._post_dirty_hook_names.push(name);\n\t\t\tthis._post_dirty_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tremove_post_dirty_hook(name: string) {\n\t\tif (this._post_dirty_hook_names && this._post_dirty_hooks) {\n\t\t\tconst index = this._post_dirty_hook_names.indexOf(name);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._post_dirty_hook_names.splice(index, 1);\n\t\t\t\tthis._post_dirty_hooks.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\thas_hook(name: string): boolean {\n\t\tif (this._post_dirty_hook_names) {\n\t\t\treturn this._post_dirty_hook_names.includes(name);\n\t\t}\n\t\treturn false;\n\t}\n\t// using a dirty block doesn't quite work, as I would need to be able\n\t// to fetch the graph for all successors that haven't been blocked\n\t// block_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = false\n\t// unblock_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = true\n\tremove_dirty_state(): void {\n\t\tthis._dirty = false;\n\t}\n\tset_forbidden_trigger_nodes(nodes: CoreGraphNode[]) {\n\t\tthis._forbidden_trigger_nodes = nodes.map((n) => n.graph_node_id);\n\t}\n\t//@_clean_for_frame = this.context().frame()\n\t//this.post_remove_dirty_state(message)\n\n\tset_dirty(original_trigger_graph_node?: CoreGraphNode | null, propagate?: boolean): void {\n\t\tif (propagate == null) {\n\t\t\tpropagate = true;\n\t\t}\n\t\tif (\n\t\t\toriginal_trigger_graph_node &&\n\t\t\tthis._forbidden_trigger_nodes &&\n\t\t\tthis._forbidden_trigger_nodes.includes(original_trigger_graph_node.graph_node_id)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (original_trigger_graph_node == null) {\n\t\t\toriginal_trigger_graph_node = this.node;\n\t\t}\n\n\t\t//return if this.set_dirty_allowed? && !this.set_dirty_allowed(original_trigger_graph_node)\n\n\t\t// if (this.scene && this.scene() != null && this.scene().loaded()){\n\t\t// \tlet id = null\n\t\t// \tif (this.full_path){id = this.full_path()} else {id = this}\n\t\t// \tconsole.log(\"set dirty\", id)\n\t\t// }\n\n\t\t// TODO: why can't I not propagate if the node is already dirty?\n\t\t// one possible reason is that node might be cooking, and this would not update the dirty_timestamp correctly?\n\t\t//return if this.is_dirty()\n\t\t// if(!this.scene().is_loading()){\n\t\t// \tconsole.log(\"set dirty\", (this.full_path ? this.full_path() : this))\n\t\t// }\n\n\t\tthis._dirty = true;\n\t\tthis._dirty_timestamp = performance.now();\n\t\tthis._dirty_count += 1;\n\n\t\tthis.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t// this.post_set_dirty(original_trigger_graph_node);\n\n\t\tif (propagate === true) {\n\t\t\t//&& @_dirty #&& window.scene.auto_updating()\n\t\t\tthis.set_successors_dirty(original_trigger_graph_node);\n\t\t}\n\t}\n\n\trun_post_dirty_hooks(original_trigger_graph_node?: CoreGraphNode) {\n\t\tif (this._post_dirty_hooks) {\n\t\t\tconst cooker = this.node.scene.cooker;\n\t\t\tif (cooker.blocked) {\n\t\t\t\tcooker.enqueue(this.node, original_trigger_graph_node);\n\t\t\t} else {\n\t\t\t\tfor (let hook of this._post_dirty_hooks) {\n\t\t\t\t\thook(original_trigger_graph_node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// cooker(): Cooker {\n\t// \tthrow 'Dirtyable.cooker requires implementation';\n\t// }\n\tset_successors_dirty(original_trigger_graph_node?: CoreGraphNode): void {\n\t\t// const cooker = this.node.scene.cooker;\n\t\t// cooker.block();\n\n\t\tconst propagate = false;\n\t\tthis._cached_successors = this._cached_successors || this.node.graph_all_successors(); //this._dirtyable_all_successors(original_trigger_graph_node);\n\t\t// successors = successors.filter(n=>!n.is_dirty())\n\t\tfor (let successor of this._cached_successors) {\n\t\t\tsuccessor.dirty_controller.set_dirty(original_trigger_graph_node, propagate);\n\t\t\t// console.log(successor);\n\t\t}\n\n\t\t// cooker.unblock();\n\t}\n\n\t// _dirtyable_all_successors(original_trigger_graph_node: CoreGraphNode): CoreGraphNode[] {\n\t// \treturn this.graph_all_predecessors()\n\t// \t// const successors = [];\n\t// \t// let newly_added_successors = this._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// successors.push(newly_added_successors);\n\n\t// \t// while (newly_added_successors.length > 0) {\n\t// \t// \tnewly_added_successors = lodash_flatten(\n\t// \t// \t\tnewly_added_successors.map((newly_added_successor) => {\n\t// \t// \t\t\treturn newly_added_successor._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// \t\t})\n\t// \t// \t);\n\t// \t// \tsuccessors.push(newly_added_successors);\n\t// \t// }\n\n\t// \t// return lodash_uniq(lodash_flatten(successors));\n\t// }\n\n\tclear_successors_cache() {\n\t\tthis._cached_successors = undefined;\n\t}\n\tclear_successors_cache_with_predecessors() {\n\t\tthis.clear_successors_cache();\n\t\tfor (let predecessor of this.node.graph_all_predecessors()) {\n\t\t\tpredecessor.dirty_controller.clear_successors_cache();\n\t\t}\n\t}\n\t// graph_all_predecessors(): CoreGraphNode[] {\n\t// \treturn this.node.graph_all_predecessors()\n\t// \t// console.log('dirtyable graph_all_predecessors should be overwritten');\n\t// \t// return [];\n\t// }\n\n\t// dirty_successors(): Array<CoreGraphNode> {\n\t// \tthrow 'Dirtyable.dirty_successors requires implementation';\n\t// }\n\t// set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \tthrow 'Dirtyable.set_dirty_allowed requires implementation';\n\t// }\n\t// _dirtyable_direct_successors(original_trigger_graph_node: CoreGraphNode): Array<CoreGraphNode> {\n\t// \treturn this.dirty_successors().filter((successor) => {\n\t// \t\treturn successor.set_dirty_allowed == null || successor.set_dirty_allowed(original_trigger_graph_node);\n\t// \t});\n\t// }\n\n\t// set_graph_successors_dirty_via_graph: (original_trigger_graph_node)->\n\t// \tcooker = this.scene().cooker()\n\t// \tcooker.block()\n\n\t// \tmake_successors_dirty = false\n\t// \tlodash_each lodash_flatten(this.graph_all_successors()), (successor)=>\n\t// \t\tsuccessor.set_dirty(original_trigger_graph_node, this, false)\n\n\t// \tcooker.unblock()\n\n\t// post_set_dirty(original_trigger_graph_node?: Dirtyable, direct_trigger_graph_node?: Dirtyable): void{}\n}\n","import {Vector2} from 'three/src/math/Vector2';\nimport {Color} from 'three/src/math/Color';\nimport {BaseNodeType} from '../_Base';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\nexport interface NodeUIDataJson {\n\tx: number;\n\ty: number;\n\tcomment?: string;\n}\n\nexport class UIData {\n\tprivate _position: Vector2 = new Vector2();\n\tprivate _width: number = 50;\n\tprivate _border_radius: number = 3;\n\tprivate _color: Color = new Color(0.75, 0.75, 0.75);\n\t// private _icon: string | null = null;\n\tprivate _layout_vertical: boolean = true;\n\tprivate _comment: string | undefined;\n\tprivate _json: NodeUIDataJson = {\n\t\tx: 0,\n\t\ty: 0,\n\t};\n\n\tconstructor(private node: BaseNodeType, x: number = 0, y: number = 0) {\n\t\tthis._position.x = x;\n\t\tthis._position.y = y;\n\t}\n\n\tset_border_radius(radius: number) {\n\t\tthis._border_radius = radius;\n\t}\n\tborder_radius() {\n\t\treturn this._border_radius;\n\t}\n\tset_width(width: number) {\n\t\tthis._width = width;\n\t}\n\twidth() {\n\t\treturn this._width;\n\t}\n\tset_comment(comment: string | undefined) {\n\t\tthis._comment = comment;\n\t\tthis.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n\t}\n\tget comment(): string | undefined {\n\t\treturn this._comment;\n\t}\n\tset_color(color: Color) {\n\t\tthis._color = color;\n\t}\n\tcolor() {\n\t\treturn this._color;\n\t}\n\t// set_icon(icon: string) {\n\t// \tthis._icon = icon;\n\t// }\n\t// icon() {\n\t// \treturn this._icon;\n\t// }\n\tset_layout_horizontal() {\n\t\tthis._layout_vertical = false;\n\t}\n\tis_layout_vertical() {\n\t\treturn this._layout_vertical;\n\t}\n\n\tcopy(ui_data: UIData) {\n\t\tthis._position.copy(ui_data.position);\n\t\tthis._color.copy(ui_data.color());\n\t}\n\n\tget position() {\n\t\treturn this._position;\n\t}\n\n\tset_position(new_position: Vector2 | number, y: number = 0) {\n\t\tif (new_position instanceof Vector2) {\n\t\t\tthis._position.copy(new_position);\n\t\t} else {\n\t\t\tconst x = new_position;\n\t\t\tthis._position.set(x, y);\n\t\t}\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\n\ttranslate(offset: Vector2, snap: boolean = false) {\n\t\tthis._position.add(offset);\n\n\t\tif (snap) {\n\t\t\tthis._position.x = Math.round(this._position.x);\n\t\t\tthis._position.y = Math.round(this._position.y);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\t// arguments_to_vector(x: number,y: number){\n\t// \tif (arguments.length === 2) {\n\t// \t\tthis._position.x = arguments[0];\n\t// \t\tthis._position.y = arguments[1];\n\t// \t} else {\n\t// \t\tthis._position.x = new_position.x;\n\t// \t\tthis._position.y = new_position.y;\n\t// \t}\n\t// }\n\tto_json(): NodeUIDataJson {\n\t\tthis._json.x = this._position.x;\n\t\tthis._json.y = this._position.y;\n\t\tthis._json.comment = this._comment;\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.node);\n\terror = new ErrorState(this.node);\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseState} from './Base';\n\nexport class TimeDependentState extends BaseState {\n\tget active() {\n\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n\t}\n\n\tare_params_time_dependent(): boolean {\n\t\tconst param_names = this.node.params.names;\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param && param.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tare_inputs_time_dependent(): boolean {\n\t\tconst inputs = this.node.io.inputs.inputs();\n\t\tfor (let input of inputs) {\n\t\t\tif (input && input.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tforce_time_dependent() {\n\t\tconst predecessor_ids = this.node.graph_predecessors().map((n) => n.graph_node_id);\n\t\tconst frame_node = this.node.scene.time_controller.graph_node; // context();\n\t\tif (!predecessor_ids.includes(frame_node.graph_node_id)) {\n\t\t\tthis.node.add_graph_input(frame_node);\n\t\t}\n\t}\n\tunforce_time_dependent() {\n\t\tconst frame_node = this.node.scene.time_controller.graph_node;\n\t\tthis.node.remove_graph_input(frame_node);\n\t}\n}\n","import {NodeEvent} from '../../../poly/NodeEvent';\nimport {BaseState} from './Base';\n\nexport class ErrorState extends BaseState {\n\tprivate _message: string | undefined;\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tconsole.warn('error', message, this.node.full_path());\n\t\t\tthis._message = message;\n\t\t\tthis.on_update();\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n\n\tprotected on_update() {\n\t\tif (this._message != null) {\n\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n\t\t\tthis.node.set_container(null, `from error '${this._message}'`);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.ERROR_UPDATED);\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {NameController} from '../NameController';\n\ntype Callback = () => void;\nimport {CoreWalker} from '../../../../core/Walker';\n\nexport class HierarchyParentController {\n\tprivate _parent: BaseNodeType | null = null;\n\tprivate _on_set_parent_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\tset_parent(parent: BaseNodeType | null) {\n\t\tif (parent != this.node.parent_controller.parent) {\n\t\t\tthis._parent = parent;\n\t\t\tif (this._parent) {\n\t\t\t\t// this.node.set_scene(this._parent.scene);\n\t\t\t\tthis.node.name_controller.request_name_to_parent(NameController.base_name(this.node));\n\t\t\t}\n\t\t\t// this.on_set_parent();\n\t\t}\n\t}\n\tis_selected(): boolean {\n\t\treturn this.parent?.children_controller?.selection?.contains(this.node) || false;\n\t}\n\tfull_path(): string {\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (this._parent != null) {\n\t\t\tconst parent_full_path = this._parent.full_path();\n\t\t\tif (parent_full_path === separator) {\n\t\t\t\treturn parent_full_path + this.node.name;\n\t\t\t} else {\n\t\t\t\treturn parent_full_path + separator + this.node.name;\n\t\t\t}\n\t\t} else {\n\t\t\treturn separator;\n\t\t}\n\t}\n\n\ton_set_parent() {\n\t\tif (this._on_set_parent_hooks) {\n\t\t\tfor (let hook of this._on_set_parent_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tfind_node(path: string): BaseNodeType | null {\n\t\t// if (!this._children_allowed) {\n\t\t// \treturn null;\n\t\t// }\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (path === CoreWalker.CURRENT || path === CoreWalker.CURRENT_WITH_SLASH) {\n\t\t\treturn this.node;\n\t\t}\n\t\tif (path === CoreWalker.PARENT || path === CoreWalker.PARENT_WITH_SLASH) {\n\t\t\treturn this.node.parent;\n\t\t}\n\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (path[0] === separator) {\n\t\t\tpath = path.substring(1, path.length);\n\t\t}\n\n\t\tconst elements = path.split(separator);\n\t\tif (elements.length === 1) {\n\t\t\tconst name = elements[0];\n\t\t\tif (this.node.children_controller) {\n\t\t\t\treturn this.node.children_controller.child_by_name(name);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn CoreWalker.find_node(this.node, path);\n\t\t}\n\t}\n}\n","import {CoreString} from '../../../../core/String';\n\nimport {BaseNodeType} from '../../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport lodash_includes from 'lodash/includes';\nimport lodash_keys from 'lodash/keys';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_values from 'lodash/values';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {NameController} from '../NameController';\nimport {CoreNodeSelection} from '../../../../core/NodeSelection';\n\nimport {POLY} from '../../../Poly';\n// import {NameController} from '../NameController';\n\n// interface HierarchyOptions {\n// \tcontext: NodeContext\n// \tdependent?: boolean;\n// }\nconst NODE_SIMPLE_NAME = 'children';\n\nexport class HierarchyChildrenController {\n\t// private _context: NodeContext | undefined;\n\t// private _children_allowed: boolean = false;\n\tprivate _children: Dictionary<BaseNodeType> = {};\n\tprivate _children_by_type: Dictionary<string[]> = {};\n\tprivate _children_and_grandchildren_by_context: Dictionary<string[]> = {};\n\n\tprivate _is_dependent_on_children: boolean = false;\n\tprivate _children_node: CoreGraphNode | undefined;\n\n\tprivate _selection: CoreNodeSelection | undefined;\n\tget selection(): CoreNodeSelection {\n\t\treturn (this._selection = this._selection || new CoreNodeSelection(this.node));\n\t}\n\tconstructor(protected node: BaseNodeType, private _context: NodeContext) {}\n\tget context() {\n\t\treturn this._context;\n\t}\n\tinit(dependent: boolean = false) {\n\t\t// const context = this.node.children_context();\n\t\t// if (context) {\n\t\t// this._available_children_classes = options['children'] || {};\n\t\t// this._available_children_classes = window.POLY.registered_nodes(context, this.self.type())\n\n\t\t// this._children_allowed = true;\n\t\tthis._children = {};\n\n\t\t// const is_dependent = options['dependent'];\n\t\tif (dependent) {\n\t\t\tthis._is_dependent_on_children = dependent;\n\t\t\tif (this._is_dependent_on_children) {\n\t\t\t\tthis._children_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t\t// this._children_node.set_scene(this.node.scene);\n\t\t\t\tthis.node.add_graph_input(this._children_node);\n\t\t\t}\n\t\t}\n\t\t// }\n\t}\n\n\t// TODO: when copy pasting a node called bla_11, the next one will be renamed bla_110 instead of 12\n\tset_child_name(node: BaseNodeType, new_name: string): void {\n\t\t//return if node.name() == new_name\n\t\tlet current_child_with_name;\n\t\tnew_name = new_name.replace(/[^A-Za-z0-9]/g, '_');\n\t\tnew_name = new_name.replace(/^[0-9]/, '_'); // replace first char if not a letter\n\n\t\tif ((current_child_with_name = this._children[new_name]) != null) {\n\t\t\t// only return if found node is same as argument node, and if new_name is same as current_name\n\t\t\tif (node.name === new_name && current_child_with_name.graph_node_id === node.graph_node_id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// increment new_name\n\t\t\tnew_name = CoreString.increment(new_name);\n\n\t\t\treturn this.set_child_name(node, new_name);\n\t\t} else {\n\t\t\t// let current_child;\n\t\t\tconst current_name = node.name;\n\n\t\t\t// delete old entry if node was in _children with old name\n\t\t\tconst current_child = this._children[current_name];\n\t\t\tif (current_child) {\n\t\t\t\tdelete this._children[current_name];\n\t\t\t}\n\n\t\t\t// add to new name\n\t\t\tthis._children[new_name] = node;\n\t\t\tnode.name_controller.update_name_from_parent(new_name);\n\t\t\tthis._add_to_nodes_by_type(node);\n\t\t\tthis.node.scene.nodes_controller.add_to_instanciated_node(node);\n\t\t}\n\t}\n\n\tnode_context_signature() {\n\t\treturn `${this.node.node_context()}/${this.node.type}`;\n\t}\n\n\tavailable_children_classes() {\n\t\treturn POLY.registered_nodes(this._context, this.node.type);\n\t}\n\t// children_allowed(): boolean {\n\t// \t// return (this.self.available_children_classes != null) &&\n\t// \t// (Object.keys(this.self.available_children_classes()).length > 0);\n\t// \tconst available_classes = this.available_children_classes();\n\t// \treturn available_classes && Object.keys(available_classes).length > 0;\n\t// }\n\n\tis_valid_child_type(node_type: string): boolean {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\t\treturn node_class != null;\n\t}\n\n\tcreate_node(node_type: string): BaseNodeType {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\n\t\tif (node_class == null) {\n\t\t\tconst message = `child node type '${node_type}' not found for node '${this.node.full_path()}'. Available types are: ${Object.keys(\n\t\t\t\tthis.available_children_classes()\n\t\t\t).join(', ')}, ${this._context}, ${this.node.type}`;\n\t\t\tconsole.error(message);\n\t\t\tthrow message;\n\t\t} else {\n\t\t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`);\n\t\t\tchild_node.initialize_base_and_node();\n\t\t\t// child_node.set_scene(this.node.scene);\n\t\t\tthis.add_node(child_node);\n\t\t\tchild_node.lifecycle.set_creation_completed();\n\t\t\treturn child_node;\n\t\t}\n\t}\n\n\tadd_node(child_node: BaseNodeType) {\n\t\t// if (!this._children_allowed) {\n\t\t// \tthrow `node ${this.node.full_path()} cannot have children`;\n\t\t// }\n\n\t\tchild_node.set_parent(this.node);\n\t\tchild_node.params.init();\n\t\tchild_node.parent_controller.on_set_parent();\n\t\tchild_node.name_controller.post_set_full_path();\n\t\tif (child_node.children_allowed() && child_node.children_controller) {\n\t\t\tfor (let child of child_node.children_controller.children()) {\n\t\t\t\tchild.name_controller.post_set_full_path();\n\t\t\t}\n\t\t}\n\t\tthis.node.emit(NodeEvent.CREATED, {child_node_json: child_node.to_json()});\n\t\tif (this.node.scene.lifecycle_controller.on_create_hook_allowed()) {\n\t\t\tchild_node.lifecycle.run_on_create_hooks();\n\t\t}\n\t\tchild_node.lifecycle.run_on_add_hooks();\n\t\tthis.set_child_name(child_node, NameController.base_name(child_node));\n\t\tthis.node.lifecycle.run_on_child_add_hooks(child_node);\n\t\t// this.post_add_node(child_node);\n\n\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\tthis._children_node.add_graph_input(child_node);\n\t\t}\n\t\tif (child_node.require_webgl2()) {\n\t\t\tthis.node.scene.webgl_controller.set_require_webgl2();\n\t\t}\n\n\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(child_node);\n\n\t\treturn child_node;\n\t}\n\t// that's redondant with the lifecycle on_child_add and on_child_remove\n\t// post_add_node(node: BaseNode) {}\n\t// post_remove_node(node: BaseNode) {}\n\n\tremove_node(child_node: BaseNodeType): void {\n\t\tif (child_node.parent != this.node) {\n\t\t\treturn console.warn(`node ${child_node.name} not under parent ${this.node.full_path()}`);\n\t\t} else {\n\t\t\t// set other dependencies dirty\n\t\t\tchild_node.set_successors_dirty(this.node);\n\n\t\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\t\tthis._children_node.remove_graph_input(child_node);\n\t\t\t}\n\n\t\t\tif (this.selection.contains(child_node)) {\n\t\t\t\tthis.selection.remove([child_node]);\n\t\t\t}\n\n\t\t\tconst first_connection = child_node.io.connections.first_input_connection();\n\t\t\tchild_node.io.connections.input_connections()?.forEach((input_connection) => {\n\t\t\t\tif (input_connection) {\n\t\t\t\t\tinput_connection.disconnect({set_input: true});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchild_node.io.connections.output_connections()?.forEach((output_connection) => {\n\t\t\t\tif (output_connection) {\n\t\t\t\t\toutput_connection.disconnect({set_input: true});\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tconst old_src = first_connection.node_src;\n\t\t\t\t\t\tconst old_output_index = output_connection.output_index;\n\t\t\t\t\t\tconst old_dest = output_connection.node_dest;\n\t\t\t\t\t\tconst old_input_index = output_connection.input_index;\n\t\t\t\t\t\told_dest.io.inputs.set_input(old_input_index, old_src, old_output_index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// disconnect successors\n\t\t\tchild_node.graph_disconnect_successors();\n\n\t\t\t// remove from children\n\t\t\tchild_node.set_parent(null);\n\t\t\tdelete this._children[child_node.name];\n\t\t\tthis._remove_from_nodes_by_type(child_node);\n\t\t\tthis.node.scene.nodes_controller.remove_from_instanciated_node(child_node);\n\n\t\t\tthis.node.lifecycle.run_on_child_remove_hooks(child_node);\n\t\t\tchild_node.lifecycle.run_on_delete_hooks();\n\t\t\tchild_node.emit(NodeEvent.DELETED, {parent_id: this.node.graph_node_id});\n\t\t}\n\t}\n\n\t_add_to_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tthis._children_by_type[type] = this._children_by_type[type] || [];\n\t\tif (!lodash_includes(this._children_by_type[type], node_id)) {\n\t\t\tthis._children_by_type[type].push(node_id);\n\t\t}\n\t\tthis.add_to_children_and_grandchildren_by_context(node);\n\t}\n\t_remove_from_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tif (this._children_by_type[type]) {\n\t\t\tconst index = this._children_by_type[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_by_type[type].splice(index, 1);\n\t\t\t\tif (this._children_by_type[type].length == 0) {\n\t\t\t\t\tdelete this._children_by_type[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.remove_from_children_and_grandchildren_by_context(node);\n\t}\n\tadd_to_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tthis._children_and_grandchildren_by_context[type] = this._children_and_grandchildren_by_context[type] || [];\n\t\tif (!lodash_includes(this._children_and_grandchildren_by_context[type], node_id)) {\n\t\t\tthis._children_and_grandchildren_by_context[type].push(node_id);\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.add_to_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\tremove_from_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tif (this._children_and_grandchildren_by_context[type]) {\n\t\t\tconst index = this._children_and_grandchildren_by_context[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_and_grandchildren_by_context[type].splice(index, 1);\n\t\t\t\tif (this._children_and_grandchildren_by_context[type].length == 0) {\n\t\t\t\t\tdelete this._children_and_grandchildren_by_context[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.remove_from_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\n\tnodes_by_type(type: string): BaseNodeType[] {\n\t\tconst node_ids = this._children_by_type[type] || [];\n\t\tconst graph = this.node.scene.graph;\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tnode_ids.forEach((node_id) => {\n\t\t\tconst node = graph.node_from_id(node_id) as BaseNodeType;\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t});\n\t\treturn nodes;\n\t}\n\tchild_by_name(name: string) {\n\t\treturn this._children[name];\n\t}\n\t// children_and_grandchildren_by_context(context: NodeContext): BaseNode[]{\n\t// \tconst node_ids = this._children_and_grandchildren_by_context[context] || []\n\t// \tconst graph = this.self.scene().graph()\n\t// \treturn node_ids.map(node_id=>graph.node_from_id(node_id))\n\t// }\n\thas_children_and_grandchildren_with_context(context: NodeContext) {\n\t\treturn this._children_and_grandchildren_by_context[context] != null;\n\t}\n\t//lodash_filter this.children(), (child)=>\n\t//\tchild.type() == type\n\n\tchildren(): BaseNodeType[] {\n\t\treturn lodash_values(this._children);\n\t}\n\tchildren_names() {\n\t\treturn lodash_sortBy(lodash_keys(this._children));\n\t}\n\t// children_map: ->\n\t// \t@_children\n\n\ttraverse_children(callback: (arg0: BaseNodeType) => void) {\n\t\tfor (let child of this.children()) {\n\t\t\tcallback(child);\n\n\t\t\tchild.children_controller?.traverse_children(callback);\n\t\t}\n\t}\n}\n","// import UIData from './UIData';\nimport {BaseNodeType} from '../engine/nodes/_Base';\nimport lodash_difference from 'lodash/difference';\nimport lodash_union from 'lodash/union';\n// import lodash_isArray from 'lodash/isArray'\nimport lodash_isEqual from 'lodash/isEqual';\nimport {NodeEvent} from '../engine/poly/NodeEvent';\n\nexport class CoreNodeSelection {\n\t_node_ids: string[] = [];\n\tconstructor(private _node: BaseNodeType) {\n\t\t// super();\n\t\t// this._node_ids = [];\n\t}\n\n\tnode() {\n\t\treturn this._node;\n\t}\n\n\tnodes(): BaseNodeType[] {\n\t\treturn this._node.scene.graph.nodes_from_ids(this._node_ids) as BaseNodeType[];\n\t}\n\n\tcontains(node: BaseNodeType): boolean {\n\t\treturn this._node_ids.includes(node.graph_node_id);\n\t}\n\tequals(nodes: BaseNodeType[]): boolean {\n\t\tconst node_ids = nodes.map((node) => node.graph_node_id).sort();\n\t\treturn lodash_isEqual(node_ids, this._node_ids);\n\t}\n\n\tclear() {\n\t\tthis._node_ids = [];\n\t\tthis.send_update_event();\n\t}\n\tset(nodes: BaseNodeType[]) {\n\t\t// this.remove(this.nodes());\n\t\tthis._node_ids = [];\n\t\tthis.add(nodes);\n\t}\n\n\tadd(nodes_to_add: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_add)) { nodes_to_add = [nodes_to_add]; }\n\n\t\tconst node_ids_to_add = nodes_to_add.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_union(this._node_ids, node_ids_to_add);\n\n\t\tthis.send_update_event();\n\t}\n\n\tremove(nodes_to_remove: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_remove)) { nodes_to_remove = [nodes_to_remove]; }\n\n\t\tconst node_ids_to_remove = nodes_to_remove.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_difference(this._node_ids, node_ids_to_remove);\n\n\t\tthis.send_update_event();\n\t}\n\n\tprivate send_update_event() {\n\t\tthis._node.emit(NodeEvent.SELECTION_UPDATED);\n\t}\n\n\tprivate _json: string[] = [];\n\tto_json() {\n\t\tthis._json = this._json || [];\n\t\tthis._json = this._node_ids.map((id) => id);\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\ntype Callback = () => void;\ntype CallbackWithChildNode = (child_node: BaseNodeType) => void;\n\nexport class LifeCycleController {\n\tprotected _creation_completed = false;\n\tprotected _on_child_add_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_child_remove_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_create_hooks: Callback[] | undefined;\n\tprivate _on_add_hooks: Callback[] | undefined;\n\tprivate _on_delete_hooks: Callback[] | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset_creation_completed() {\n\t\tthis._creation_completed = true;\n\t}\n\tget creation_completed() {\n\t\treturn this.node.scene.loading_controller.loaded && this._creation_completed;\n\t}\n\t//\n\t//\n\t// ON CHILD ADD\n\t//\n\t//\n\tadd_on_child_add_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_add_hooks = this._on_child_add_hooks || [];\n\t\tthis._on_child_add_hooks.push(callback);\n\t}\n\trun_on_child_add_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_add_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CHILD REMOVE\n\t//\n\t//\n\tadd_on_child_remove_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_remove_hooks = this._on_child_remove_hooks || [];\n\t\tthis._on_child_remove_hooks.push(callback);\n\t}\n\trun_on_child_remove_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_remove_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CREATE\n\t//\n\t//\n\tadd_on_create_hook(callback: Callback) {\n\t\tthis._on_create_hooks = this._on_create_hooks || [];\n\t\tthis._on_create_hooks.push(callback);\n\t}\n\trun_on_create_hooks() {\n\t\tthis.execute_hooks(this._on_create_hooks);\n\t}\n\n\t//\n\t//\n\t// ON ADD\n\t//\n\t//\n\tadd_on_add_hook(callback: Callback) {\n\t\tthis._on_add_hooks = this._on_add_hooks || [];\n\t\tthis._on_add_hooks.push(callback);\n\t}\n\trun_on_add_hooks() {\n\t\tthis.execute_hooks(this._on_add_hooks);\n\t}\n\n\t//\n\t//\n\t// ON DELETE\n\t//\n\t//\n\tadd_delete_hook(callback: Callback) {\n\t\tthis._on_delete_hooks = this._on_delete_hooks || [];\n\t\tthis._on_delete_hooks.push(callback);\n\t}\n\trun_on_delete_hooks() {\n\t\tthis.execute_hooks(this._on_delete_hooks);\n\t}\n\n\t//\n\t//\n\t// UTILS\n\t//\n\t//\n\tprotected execute_hooks(hooks: Callback[] | undefined) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tprotected execute_hooks_with_child_node(hooks: CallbackWithChildNode[] | undefined, child_node: BaseNodeType) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook(child_node);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../_Base';\nimport {BaseContainer} from '../../containers/_Base';\nimport {POLY} from '../../Poly';\n\nexport class CookController {\n\t_cooking: boolean = false;\n\t_cooks_count: number = 0;\n\t_max_cook_time: number = -1;\n\t_cooking_dirty_timestamp: number | undefined;\n\t_cook_time_with_inputs: number = 0;\n\t_cook_time_with_inputs_start: number | undefined;\n\t_cook_time_start: number | undefined;\n\t_cook_time: number = 0;\n\t_cook_time_params_start: number | undefined;\n\t_cook_time_params: number = 0;\n\t_last_eval_key: string | undefined;\n\n\t_inputs_evaluation_required: boolean = true; //currently only for switch SOP\n\n\tconstructor(private node: BaseNodeType) {}\n\n\tdisallow_inputs_evaluation() {\n\t\tthis._inputs_evaluation_required = false;\n\t}\n\n\tget is_cooking(): boolean {\n\t\treturn this._cooking === true;\n\t}\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\tget cook_time(): number {\n\t\treturn this._cook_time;\n\t}\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t//this.emit 'node_dirty_updated'\n\t// this.node_post_set_dirty()\n\t// post_remove_dirty_state: (message)->\n\t// \tif !message?\n\t// \t\tthrow \"remove dirty state without message\"\n\n\t// node_post_set_dirty: ->\n\t// \t#\n\tprivate _init_cooking_state() {\n\t\tthis._cooking = true;\n\t\tthis._cooking_dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t}\n\tprivate _init_cooking_start_time(perf_active?: boolean) {\n\t\tif (perf_active == null) {\n\t\t\tperf_active = this.node.scene.performance.started;\n\t\t}\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_start = performance.now();\n\t\t}\n\t}\n\n\tprivate async _start_cook_if_no_errors(input_contents: any[]) {\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.end_cook();\n\t\t} else {\n\t\t\t// this.self.cook(input_containers);\n\t\t\ttry {\n\t\t\t\tawait this.node.cook(input_contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.node.states.error.set(`node internal error: '${e}'.`);\n\t\t\t\tconsole.error(this.node.full_path(), e);\n\t\t\t\tthis.end_cook();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cook_main() {\n\t\tif (this.is_cooking) {\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tconst perf_active = this.node.scene.performance.started;\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_with_inputs_start = performance.now();\n\t\t}\n\t\tthis.node.states.error.clear();\n\n\t\t//this._block_params_dirty_propagation()\n\t\tconst input_containers = await this.evaluate_inputs_and_params();\n\n\t\tthis._init_cooking_start_time(perf_active);\n\n\t\tconst input_contents = [];\n\t\tif (input_containers) {\n\t\t\tlet input_container;\n\t\t\tfor (let i = 0; i < input_containers.length; i++) {\n\t\t\t\tinput_container = input_containers[i];\n\t\t\t\tif (input_container) {\n\t\t\t\t\tif (this.node.io.inputs.input_clonable_state_with_override(i)) {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content_cloned());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this._start_cook_if_no_errors(input_contents);\n\t}\n\tasync cook_main_without_inputs() {\n\t\tthis.node.scene.cook_controller.add_node(this.node);\n\t\tif (this.is_cooking) {\n\t\t\t// TODO:\n\t\t\t// this seems to happen because when we flush the cooker queue,\n\t\t\t// some graph nodes will trigger more updates, which will then make dependent nodes\n\t\t\t// dirty again\n\t\t\tconsole.warn('cook_main_without_inputs already cooking', this.node.full_path());\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tthis._init_cooking_start_time();\n\t\tthis.node.states.error.clear();\n\n\t\tawait this.node.params.eval_all();\n\t\tawait this._start_cook_if_no_errors([]);\n\t}\n\t// catch e\n\t// \tthis.set_error(\"failed to cook: #{e}\")\n\n\tend_cook(message?: string | null) {\n\t\tthis._increment_cooks_count();\n\n\t\tconst dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t\tif (dirty_timestamp == null || dirty_timestamp === this._cooking_dirty_timestamp) {\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis._terminate_cook_process();\n\t\t} else {\n\t\t\tPOLY.log('COOK AGAIN', dirty_timestamp, this._cooking_dirty_timestamp, this.node.full_path());\n\t\t\tthis._cooking = false;\n\t\t\tthis.cook_main();\n\t\t}\n\t}\n\n\t_terminate_cook_process() {\n\t\tif (this.is_cooking) {\n\t\t\t//this._unblock_params_dirty_propagation()\n\t\t\tthis._cooking = false;\n\n\t\t\t// this._cook_eval_key = `${this.graph_node_id}/${performance.now()}@${this.context().frame()}`;\n\n\t\t\tthis._record_cook_time();\n\t\t\t//console.log(\"END COOK: #{this.full_path()} #{this.cook_time()} (with inputs:#{this.cook_time_with_inputs()}) (cook count: #{@_cooks_count}): #{message}\")\n\t\t\t//this.notify_requesters()\n\t\t\tsetTimeout(this.node.container_controller.notify_requesters.bind(this.node.container_controller), 0);\n\t\t}\n\t}\n\tprivate _increment_cooks_count() {\n\t\tif (this.is_cooking) {\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cooks_count += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// cook_eval_key() {\n\t// \tif (!this.is_dirty()) {\n\t// \t\treturn this._cook_eval_key;\n\t// \t} else {\n\t// \t\treturn performance.now();\n\t// \t}\n\t// }\n\n\t_record_cook_time() {\n\t\tif (this.node.scene.performance.started) {\n\t\t\tconst cook_time_end = performance.now();\n\n\t\t\tif (this._cook_time_with_inputs_start != null) {\n\t\t\t\tthis._cook_time_with_inputs = cook_time_end - this._cook_time_with_inputs_start;\n\t\t\t\tthis._cook_time_with_inputs_start = undefined;\n\t\t\t}\n\n\t\t\tif (this._cook_time_params_start != null && this._cook_time_start != null) {\n\t\t\t\tthis._cook_time_params = this._cook_time_start - this._cook_time_params_start;\n\t\t\t}\n\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cook_time = cook_time_end - this._cook_time_start;\n\t\t\t\tthis._cook_time_start = undefined;\n\t\t\t}\n\n\t\t\tthis._max_cook_time = Math.max(this._max_cook_time, this._cook_time);\n\t\t}\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis.node.scene.performance.record_node_cook_data(this.node);\n\t\t}\n\t}\n\n\t// allow_eval_key_check() {\n\t// \treturn false;\n\t// }\n\n\tasync evaluate_inputs_and_params() {\n\t\t//t0 = performance.now()\n\n\t\tlet input_containers: (BaseContainer | null)[] = [];\n\t\tif (this._inputs_evaluation_required) {\n\t\t\tinput_containers = await this.node.io.inputs.eval_required_inputs_p();\n\t\t}\n\t\t// const inputs_eval_key = input_containers.map( c => c.eval_key()).join('-');\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis._cook_time_params_start = performance.now();\n\t\t}\n\n\t\t/*const params_eval_key = */ await this.node.params.eval_all();\n\t\t// const full_eval_key = [inputs_eval_key, params_eval_key].join('+');\n\t\t// if (this.allow_eval_key_check() && (this._last_eval_key != null) && (this._last_eval_key === full_eval_key)) {\n\t\t// \tthis._terminate_cook_process('no need to cook');\n\t\t// } else {\n\t\t// \tthis._last_eval_key = full_eval_key;\n\t\t// }\n\t\treturn input_containers;\n\t}\n\n\t//this._time_with_precision(@_cook_time)\n\tget cook_time_with_inputs() {\n\t\treturn this._cook_time_with_inputs;\n\t}\n\t//this._time_with_precision(@_cook_time_with_inputs)\n\tget cook_time_params() {\n\t\treturn this._cook_time_params;\n\t}\n\t_time_with_precision(time: number) {\n\t\tconst precision = 1000;\n\t\treturn Math.round(time * precision) / precision;\n\t}\n}\n","/// <reference path=\"../../../../custom_typings/guards.d.ts\" />\n// finally, guard ALL the types!\nfunction typeGuard<T extends PrimitiveOrConstructor>(o: any, className: T): o is GuardedType<T> {\n\tconst localPrimitiveOrConstructor: PrimitiveOrConstructor = className;\n\tif (typeof localPrimitiveOrConstructor === 'string') {\n\t\treturn typeof o === localPrimitiveOrConstructor;\n\t}\n\treturn o instanceof localPrimitiveOrConstructor;\n}\n\nimport lodash_groupBy from 'lodash/groupBy';\nimport {BaseNodeType, BaseNodeClass} from '../_Base';\n\nimport {BaseParamType, BaseParamClass} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nenum METHODS {\n\tSUCCESSORS = 'graph_successors',\n\tPREDECESSORS = 'graph_predecessors',\n}\n\nexport class DependenciesController {\n\tprivate _params_referrees_by_graph_node_id: Dictionary<BaseParamType> | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// debug_dependencies() {\n\t// \tconst nodes = this.scene_successors();\n\t// \tconsole.log('--------------------');\n\t// \tnodes.forEach((n) => {\n\t// \t\tconsole.log(n.full_path());\n\t// \t});\n\t// }\n\n\tscene_successors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.SUCCESSORS);\n\t}\n\n\tscene_predecessors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.PREDECESSORS);\n\t}\n\tprivate _find_scene_node_scene_nodes(method: METHODS): BaseNodeType[] {\n\t\tconst params = this.node.params.all;\n\t\tconst graph_nodes: CoreGraphNode[] = [];\n\t\tfor (let param of params) {\n\t\t\tgraph_nodes.push(param);\n\t\t}\n\t\tgraph_nodes.push(this.node);\n\t\tconst start_nodes = graph_nodes;\n\t\tlet base_nodes: BaseNodeType[] = [];\n\t\tfor (let start_node of start_nodes) {\n\t\t\tthis._find_base_nodes_from_node(start_node, method, base_nodes);\n\t\t}\n\n\t\tif (method == METHODS.SUCCESSORS) {\n\t\t\tfor (let node of this.param_nodes_referree()) {\n\t\t\t\tbase_nodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\t// ensure uniq and not current node\n\t\tbase_nodes = base_nodes.filter((scene_node) => {\n\t\t\treturn scene_node.graph_node_id != this.node.graph_node_id;\n\t\t});\n\t\tconst base_nodes_by_graph_node_id = lodash_groupBy(base_nodes, (n) => n.graph_node_id);\n\t\tconst uniq_base_nodes: BaseNodeType[] = [];\n\t\tObject.keys(base_nodes_by_graph_node_id).forEach((graph_node_id) => {\n\t\t\tuniq_base_nodes.push(base_nodes_by_graph_node_id[graph_node_id][0]);\n\t\t});\n\t\treturn uniq_base_nodes;\n\t}\n\n\tprivate _find_base_nodes_from_node(node: CoreGraphNode, method: METHODS, base_nodes: BaseNodeType[]) {\n\t\tconst next_nodes = node[method]();\n\t\tfor (let next_node of next_nodes) {\n\t\t\tif (next_node instanceof BaseParamClass) {\n\t\t\t\tbase_nodes.push(next_node.node);\n\t\t\t} else {\n\t\t\t\tif (typeGuard(next_node, BaseNodeClass)) {\n\t\t\t\t\tbase_nodes.push(next_node);\n\t\t\t\t} else {\n\t\t\t\t\tthis._find_base_nodes_from_node(next_node, method, base_nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn base_nodes;\n\t}\n\n\t//\n\t//\n\t// REFERRED BY\n\t// which is used for operator path referring nodes without creating a graph edge\n\t//\n\t//\n\tadd_param_referree(param: BaseParamType) {\n\t\tthis._params_referrees_by_graph_node_id = this._params_referrees_by_graph_node_id || {};\n\t\tthis._params_referrees_by_graph_node_id[param.graph_node_id] = param;\n\t}\n\tremove_param_referree(param: BaseParamType) {\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tdelete this._params_referrees_by_graph_node_id[param.graph_node_id];\n\t\t}\n\t}\n\tparams_referree(): BaseParamType[] {\n\t\tconst list = [];\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tfor (let graph_node_id of Object.keys(this._params_referrees_by_graph_node_id)) {\n\t\t\t\tlist.push(this._params_referrees_by_graph_node_id[graph_node_id]);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tparam_nodes_referree(): BaseNodeType[] {\n\t\tconst node_by_graph_node_id: Dictionary<BaseNodeType> = {};\n\t\tlet node;\n\t\tfor (let param of this.params_referree()) {\n\t\t\tnode = param.node;\n\t\t\tnode_by_graph_node_id[node.graph_node_id] = node;\n\t\t}\n\t\tconst list = [];\n\t\tfor (let graph_node_id of Object.keys(node_by_graph_node_id)) {\n\t\t\tlist.push(node_by_graph_node_id[graph_node_id]);\n\t\t}\n\t\treturn list;\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\nexport class EmitController {\n\t_blocked_emit: boolean = false;\n\t_blocked_parent_emit: boolean = false;\n\t_count_by_event_name: Dictionary<number> = {};\n\tconstructor(protected param: BaseParamType) {}\n\n\tget emit_allowed(): boolean {\n\t\tif (this._blocked_emit === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.param.scene.loading_controller.is_loading) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: should I also prevent nodes from updating\n\t\t// when they are being called in a loop such as from the Copy SOP?\n\t\t//node = this.node()\n\t\t//node? && !node.is_cooking() && this.scene().emit_allowed() # this prevents a camera from updating its param for instance\n\t\t// although maybe I should send a dirty to the store, and then that store queries the param?\n\t\treturn this.param.scene.dispatch_controller.emit_allowed;\n\t}\n\n\tblock_emit() {\n\t\tthis._blocked_emit = true;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.block_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tunblock_emit() {\n\t\tthis._blocked_emit = false;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.unblock_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tblock_parent_emit() {\n\t\tthis._blocked_parent_emit = true;\n\t\treturn true;\n\t}\n\tunblock_parent_emit() {\n\t\tthis._blocked_parent_emit = false;\n\t\treturn true;\n\t}\n\n\tincrement_count(event_name: ParamEvent) {\n\t\tthis._count_by_event_name[event_name] = this._count_by_event_name[event_name] || 0;\n\t\tthis._count_by_event_name[event_name] += 1;\n\t}\n\tevents_count(event_name: ParamEvent): number {\n\t\treturn this._count_by_event_name[event_name] || 0;\n\t}\n\n\temit(event: ParamEvent) {\n\t\tif (this.emit_allowed) {\n\t\t\tthis.param.emit(event);\n\n\t\t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t\t\t\tthis.param.parent_param.emit(event);\n\t\t\t}\n\t\t}\n\t}\n\t// emit_param_updated() {\n\t// \tconsole.log('emit_param_updated', this.param.name, this.emit_allowed);\n\t// \tif (this.emit_allowed) {\n\t// \t\tthis.param.emit(ParamEvent.UPDATED);\n\n\t// \t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t// \t\t\tthis.param.parent_param.emit(ParamEvent.UPDATED);\n\t// \t\t}\n\t// \t}\n\t// \t//else\n\t// \t//\tthis.emit('param_updated')\n\n\t// \t// return null\n\t// }\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamValueSerializedTypeMap} from '../types/ParamValueSerializedTypeMap';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../types/ParamInitValueSerializedTypeMap';\n\nexport interface ParamSerializerData {\n\tname: string;\n\ttype: string;\n\traw_input: ParamInitValueSerializedTypeMap[ParamType];\n\tvalue: ParamValueSerializedTypeMap[ParamType];\n\texpression?: string;\n\tgraph_node_id: string;\n\t// is_dirty: boolean;\n\terror_message?: string;\n\tis_visible: boolean;\n\tfolder_name?: string;\n\tcomponents?: string[];\n}\n\nexport class ParamSerializer {\n\tconstructor(protected param: BaseParamType) {}\n\n\tto_json(): ParamSerializerData {\n\t\tconst data: ParamSerializerData = {\n\t\t\tname: this.param.name,\n\t\t\ttype: this.param.type,\n\t\t\traw_input: this.raw_input(),\n\t\t\tvalue: this.value(),\n\t\t\texpression: this.expression(),\n\t\t\tgraph_node_id: this.param.graph_node_id,\n\t\t\t// is_dirty: this.param.is_dirty,\n\t\t\terror_message: this.error_message(),\n\t\t\tis_visible: this.is_visible(),\n\t\t\t// folder_name: this.param.ui_data.folder_name,\n\t\t\tcomponents: undefined,\n\t\t};\n\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tdata['components'] = this.param.components.map((component) => component.graph_node_id);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\traw_input() {\n\t\treturn this.param.raw_input_serialized;\n\t}\n\tvalue() {\n\t\treturn this.param.value_serialized;\n\t}\n\texpression() {\n\t\treturn this.param.has_expression() ? this.param.expression_controller?.expression : undefined;\n\t}\n\terror_message() {\n\t\treturn this.param.states.error.message;\n\t}\n\tis_visible() {\n\t\treturn this.param.options.is_visible;\n\t}\n}\n","import {BaseParamType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.param);\n\terror = new ErrorState(this.param);\n\tconstructor(protected param: BaseParamType) {}\n}\n","import {BaseParamType} from '../../_Base';\n\nexport class TimeDependentState {\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active(): boolean {\n\t\tconst frame_graph_node_id = this.param.scene.time_controller.graph_node.graph_node_id;\n\n\t\treturn this.param.graph_predecessor_ids().includes(frame_graph_node_id);\n\t}\n}\n","import {BaseParamType} from '../../_Base';\nimport {ParamEvent} from '../../../poly/ParamEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(private param: BaseParamType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tthis._message = message;\n\t\t\tif (this._message) {\n\t\t\t\tconsole.log(this.param.full_path(), this._message);\n\t\t\t}\n\t\t\tthis.param.emit_controller.emit(ParamEvent.ERROR_UPDATED);\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport {FloatParam} from '../../../params/Float';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\n\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamEvent} from '../../../poly/ParamEvent';\nimport {NodeParamsConfig} from './ParamsConfig';\n\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamConstructorByType} from '../../../params/types/ParamConstructorByType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nconst NODE_SIMPLE_NAME = 'params';\n\nexport type OnSceneLoadHook = () => void;\ntype PostCreateParamsHook = () => void;\n\nexport interface ParamOptionToAdd<T extends ParamType> {\n\tname: string;\n\ttype: T;\n\tinit_value: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n}\nexport interface ParamsUpdateOptions {\n\tnames_to_delete?: string[];\n\tto_add?: ParamOptionToAdd<ParamType>[];\n}\n\nexport class ParamsController {\n\tprivate _param_create_mode: boolean = false;\n\tprivate _params_by_name: Dictionary<BaseParamType> = {};\n\t// caches\n\tprivate _params_list: BaseParamType[] = [];\n\tprivate _param_names: string[] = [];\n\tprivate _non_spare_params: BaseParamType[] = [];\n\tprivate _spare_params: BaseParamType[] = [];\n\tprivate _non_spare_param_names: string[] = [];\n\tprivate _spare_param_names: string[] = [];\n\n\tprivate _params_node: CoreGraphNode | undefined;\n\t// private _params_eval_key: string;\n\tprivate _params_added_since_last_params_eval: boolean = false;\n\t// private _current_param_folder_name: string | undefined;\n\n\t// hooks\n\tprivate _post_create_params_hook: PostCreateParamsHook | undefined;\n\tprivate _on_scene_load_hooks: OnSceneLoadHook[] | undefined;\n\tprivate _on_scene_load_hook_names: string[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tprivate init_dependency_node() {\n\t\tif (!this._params_node) {\n\t\t\t// TODO: consider not having a params_node for nodes which have no parameters\n\t\t\tthis._params_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t// this._params_node.set_scene(this.node.scene);\n\t\t\tthis.node.add_graph_input(this._params_node);\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.init_dependency_node();\n\t\t// this.reset_params()\n\t\tthis._param_create_mode = true;\n\n\t\tthis.init_from_params_config();\n\t\tthis.node.create_params();\n\t\tthis._post_create_params();\n\t}\n\tprivate _post_create_params() {\n\t\tthis._update_caches();\n\t\t// this._create_params_ui_data_dependencies();\n\t\tthis.init_param_accessors();\n\t\tthis._param_create_mode = false;\n\n\t\tthis.run_post_create_params_hook();\n\n\t\t// This was to debug a weird bug where I was adding nodes to the list\n\t\t// of params, from the DependenciesController\n\t\t// this._params_list.push = (...items: BaseParamType[]) => {\n\t\t// \tif (items[0] && !items[0].compute) {\n\t\t// \t\tconsole.warn('adding params', items);\n\t\t// \t}\n\t\t// \tfor (let i of items) {\n\t\t// \t\tthis._params_list[this._params_list.length] = i;\n\t\t// \t}\n\t\t// \treturn 0;\n\t\t// };\n\t}\n\tupdate_params(options: ParamsUpdateOptions) {\n\t\tlet has_created_a_param = false;\n\t\tlet has_deleted_a_param = false;\n\t\tif (options.names_to_delete) {\n\t\t\tfor (let name of options.names_to_delete) {\n\t\t\t\tif (this.has(name)) {\n\t\t\t\t\tthis.delete_param(name);\n\t\t\t\t\thas_deleted_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.to_add) {\n\t\t\tfor (let param_data of options.to_add) {\n\t\t\t\tconst param = this.add_param(\n\t\t\t\t\tparam_data.type,\n\t\t\t\t\tparam_data.name,\n\t\t\t\t\tparam_data.init_value,\n\t\t\t\t\tparam_data.options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\thas_created_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (has_deleted_a_param || has_created_a_param) {\n\t\t\tthis._update_caches();\n\t\t\tthis.init_param_accessors();\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\tpost_create_spare_params() {\n\t\tthis._update_caches();\n\t\tthis.init_param_accessors();\n\t}\n\n\tprivate init_from_params_config() {\n\t\tconst params_config = this.node.params_config as NodeParamsConfig;\n\t\tif (params_config) {\n\t\t\tfor (let name of Object.keys(params_config)) {\n\t\t\t\tconst config = params_config[name];\n\t\t\t\tthis.add_param(config.type, name, config.init_value, config.options);\n\t\t\t}\n\t\t}\n\t}\n\tprivate init_param_accessors() {\n\t\tlet current_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\t\tthis._remove_unneeded_accessors(current_names_in_accessor);\n\t\t// update var after having removed accessors\n\t\tcurrent_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\n\t\tfor (let param of this.all) {\n\t\t\tconst is_spare: boolean = param.options.is_spare;\n\n\t\t\tconst param_not_yet_in_accessors = !current_names_in_accessor.includes(param.name);\n\n\t\t\tif (param_not_yet_in_accessors || is_spare) {\n\t\t\t\tObject.defineProperty(this.node.pv, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param.value;\n\t\t\t\t\t},\n\t\t\t\t\t// only spare parameters can be removed\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t\tObject.defineProperty(this.node.p, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param;\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprivate _remove_unneeded_accessors(current_names_in_accessor: string[]) {\n\t\tconst current_param_names = this._param_names;\n\t\tconst names_to_remove = [];\n\t\tfor (let current_name_in_accessor of current_names_in_accessor) {\n\t\t\tif (!current_param_names.includes(current_name_in_accessor)) {\n\t\t\t\tnames_to_remove.push(current_name_in_accessor);\n\t\t\t}\n\t\t}\n\n\t\tfor (let name_to_remove of names_to_remove) {\n\t\t\tObject.defineProperty(this.node.pv, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t\tObject.defineProperty(this.node.p, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tget params_node() {\n\t\treturn this._params_node;\n\t}\n\tget all() {\n\t\treturn this._params_list;\n\t}\n\tget non_spare() {\n\t\treturn this._non_spare_params;\n\t}\n\tget spare() {\n\t\treturn this._spare_params;\n\t}\n\tget names(): string[] {\n\t\treturn this._param_names;\n\t}\n\tget non_spare_names(): string[] {\n\t\treturn this._non_spare_param_names;\n\t}\n\tget spare_names(): string[] {\n\t\treturn this._spare_param_names;\n\t}\n\t// get params_by_name() {\n\t// \treturn this._params_by_name;\n\t// }\n\t// get all_params() {\n\t// \t// return lodash_concat(lodash_values(this._params), lodash_values(this._spare_params));\n\t// \treturn lodash_values(this._params);\n\t// }\n\n\tprivate set_with_type<T extends ParamType>(name: string, value: ParamInitValuesTypeMap[T], type: T) {\n\t\tconst param = this.param_with_type(name, type);\n\t\tif (param) {\n\t\t\tparam.set(value as never);\n\t\t} else {\n\t\t\tconsole.warn(`param ${name} not found with type ${type}`);\n\t\t}\n\t}\n\tset_float(name: string, value: ParamInitValuesTypeMap[ParamType.FLOAT]) {\n\t\tthis.set_with_type(name, value, ParamType.FLOAT);\n\t}\n\tset_vector3(name: string, value: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tthis.set_with_type(name, value, ParamType.VECTOR3);\n\t}\n\n\thas_param(name: string) {\n\t\treturn this._params_by_name[name] != null;\n\t}\n\thas(name: string) {\n\t\treturn this.has_param(name);\n\t}\n\tget(name: string) {\n\t\treturn this.param(name);\n\t}\n\tparam_with_type<T extends ParamType>(name: string, type: T): ParamConstructorMap[T] | undefined {\n\t\tconst param = this.param(name);\n\t\tif (param && param.type == type) {\n\t\t\treturn param as ParamConstructorMap[T];\n\t\t}\n\t}\n\tget_float(name: string): FloatParam {\n\t\treturn this.param_with_type(name, ParamType.FLOAT) as FloatParam;\n\t}\n\tget_operator_path(name: string): OperatorPathParam {\n\t\treturn this.param_with_type(name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n\t}\n\tvalue(name: string) {\n\t\treturn this.param(name)?.value;\n\t}\n\tvalue_with_type<T extends ParamType>(name: string, type: T): ParamValuesTypeMap[T] {\n\t\treturn this.param_with_type(name, type)?.value as ParamValuesTypeMap[T];\n\t\t// const param = this.param(name);\n\t\t// if (param && param.type() == type) {\n\t\t// \treturn param.value();\n\t\t// }\n\t}\n\tboolean(name: string) {\n\t\treturn this.value_with_type(name, ParamType.BOOLEAN);\n\t}\n\tfloat(name: string) {\n\t\treturn this.value_with_type(name, ParamType.FLOAT);\n\t}\n\tinteger(name: string) {\n\t\treturn this.value_with_type(name, ParamType.INTEGER);\n\t}\n\tstring(name: string) {\n\t\treturn this.value_with_type(name, ParamType.STRING);\n\t}\n\tvector2(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR2);\n\t}\n\tvector3(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR3);\n\t}\n\tcolor(name: string) {\n\t\treturn this.value_with_type(name, ParamType.COLOR);\n\t}\n\n\tparam(name: string) {\n\t\tconst p = this._params_by_name[name];\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`tried to access param '${name}' in node ${this.node.full_path()}, but existing params are: ${\n\t\t\t\t\tthis.names\n\t\t\t\t} on node ${this.node.full_path()}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\t// param_cache_name(param_name: string) {\n\t// \treturn `_param_${param_name}`;\n\t// }\n\n\t// delete_params(param_names: string[]) {\n\t// \tfor (let param_name of param_names) {\n\t// \t\tthis.delete_param(param_name);\n\t// \t}\n\n\t// }\n\t// call update_params instead\n\tprivate delete_param(param_name: string) {\n\t\tconst param = this._params_by_name[param_name];\n\t\tif (param) {\n\t\t\tif (this._params_node) {\n\t\t\t\tthis._params_node.remove_graph_input(this._params_by_name[param_name]);\n\t\t\t}\n\t\t\tparam.set_node(null);\n\t\t\tdelete this._params_by_name[param_name];\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tconst child_name = component.name;\n\t\t\t\t\tdelete this._params_by_name[child_name];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// const name_index = this._param_names.indexOf(param_name)\n\t\t\t// if(name_index >= 0){\n\t\t\t// \tthis._param_names.splice(name_index, 1)\n\t\t\t// }\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t} else {\n\t\t\tthrow new Error(`param '${param_name}' does not exist on node ${this.node.full_path()}`);\n\t\t}\n\t}\n\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tinit_value: ParamInitValuesTypeMap[T],\n\t\toptions: ParamOptions = {}\n\t): ParamConstructorMap[T] | undefined {\n\t\tconst is_spare = options['spare'] || false;\n\t\tif (this._param_create_mode === false && !is_spare) {\n\t\t\tconsole.warn(\n\t\t\t\t`node ${this.node.full_path()} (${\n\t\t\t\t\tthis.node.type\n\t\t\t\t}) param '${name}' cannot be created outside of create_params`\n\t\t\t);\n\t\t}\n\t\tif (this.node.scene == null) {\n\t\t\tconsole.warn(`node ${this.node.full_path()} (${this.node.type}) has no scene assigned`);\n\t\t}\n\n\t\tconst constructor = ParamConstructorByType[type];\n\t\tif (constructor != null) {\n\t\t\tconst existing_param = this._params_by_name[name];\n\t\t\tif (existing_param) {\n\t\t\t\tif (is_spare) {\n\t\t\t\t\t// delete the old one, otherwise the gl nodes when saved will attempt to set the value\n\t\t\t\t\t// of a param with the potentially wrong type\n\t\t\t\t\tif (existing_param.type != type) {\n\t\t\t\t\t\tthis.delete_param(existing_param.name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check that the param is spare, so that the ones generated by gl nodes are not generating an exception\n\t\t\t\t\tconsole.warn(`a param named ${name} already exists`, this.node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst param: ParamConstructorMap[T] = new constructor(this.node.scene);\n\t\t\tparam.options.set(options);\n\n\t\t\tparam.set_name(name);\n\t\t\tparam.set_init_value(init_value as never);\n\t\t\tparam.init_components();\n\t\t\tparam.set(init_value as never);\n\t\t\tparam.set_node(this.node);\n\n\t\t\tthis._params_by_name[param.name] = param as BaseParamType;\n\n\t\t\t// we add the components, so that we can access them with expressions like ch('ty')\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tthis._params_by_name[component.name] = component as BaseParamType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._params_added_since_last_params_eval = true;\n\n\t\t\treturn param;\n\t\t}\n\t}\n\n\tprivate _update_caches() {\n\t\tthis._params_list = Object.values(this._params_by_name);\n\t\tthis._param_names = Object.keys(this._params_by_name);\n\t\tthis._non_spare_params = Object.values(this._params_by_name).filter((p) => !p.options.is_spare);\n\t\tthis._spare_params = Object.values(this._params_by_name).filter((p) => p.options.is_spare);\n\t\tthis._non_spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => !p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\tthis._spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t}\n\n\tasync _eval_param(param: BaseParamType) {\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// const param_cache_name = this.param_cache_name(param.name());\n\t\t// const cached_value = this[param_cache_name] || null;\n\t\tif (/*cached_value == null ||*/ param.is_dirty /* || param.is_errored()*/) {\n\t\t\t/*const param_value =*/ await param.compute(); //.then(param_value=>{\n\t\t\t// this[param_cache_name] = param_value;\n\t\t\tif (param.states.error.active) {\n\t\t\t\tthis.node.states.error.set(`param '${param.name}' error: ${param.states.error.message}`);\n\t\t\t}\n\t\t\t// return param_value;\n\t\t} else {\n\t\t\t// return param.value;\n\t\t}\n\t\t// });\n\t}\n\n\tasync eval_params(params: BaseParamType[]) {\n\t\tconst promises = [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (params[i].is_dirty) {\n\t\t\t\tpromises.push(this._eval_param(params[i]));\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.node.set_container(null);\n\t\t}\n\t}\n\n\tasync eval_all() {\n\t\tif (this._params_node) {\n\t\t\tif (this._params_node.is_dirty || this._params_added_since_last_params_eval) {\n\t\t\t\tawait this.eval_params(this._params_list);\n\n\t\t\t\tthis._params_node.remove_dirty_state();\n\t\t\t\tthis._params_added_since_last_params_eval = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tset_post_create_params_hook(hook: PostCreateParamsHook) {\n\t\tthis._post_create_params_hook = hook;\n\t}\n\tadd_on_scene_load_hook(name: string, method: OnSceneLoadHook) {\n\t\tthis._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n\t\tthis._on_scene_load_hooks = this._on_scene_load_hooks || [];\n\n\t\tif (!this._on_scene_load_hook_names.includes(name)) {\n\t\t\tthis._on_scene_load_hook_names.push(name);\n\t\t\tthis._on_scene_load_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\trun_post_create_params_hook() {\n\t\tif (this._post_create_params_hook) {\n\t\t\tthis._post_create_params_hook();\n\t\t}\n\t}\n\trun_on_scene_load_hooks() {\n\t\tif (this._on_scene_load_hooks) {\n\t\t\tfor (let hook of this._on_scene_load_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\n// import lodash_includes from 'lodash/includes'\nimport lodash_isString from 'lodash/isString';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class BooleanParam extends TypedNumericParam<ParamType.BOOLEAN> {\n\tstatic type() {\n\t\treturn ParamType.BOOLEAN;\n\t}\n\t// TODO: be careful as this does not allow serialization of expressions as default value\n\tget default_value_serialized() {\n\t\tif (lodash_isString(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.convert(this.default_value) || false;\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BOOLEAN], val2: ParamValuesTypeMap[ParamType.BOOLEAN]) {\n\t\treturn val1 == val2;\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.BOOLEAN]): boolean | null {\n\t\tif (lodash_isBoolean(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (lodash_isNumber(raw_val)) {\n\t\t\t\treturn raw_val >= 1;\n\t\t\t} else {\n\t\t\t\tif (lodash_isString(raw_val)) {\n\t\t\t\t\tif (CoreString.is_boolean(raw_val)) {\n\t\t\t\t\t\treturn CoreString.to_boolean(raw_val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\t\t\t\treturn parsed >= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t// convert_value(v: ParamInputValue): boolean {\n\t// \treturn this.value_to_boolean(v)\n\t// }\n\t// convert_default_value(v: ParamInputValue): number {\n\t// \tif (lodash_isString(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\treturn this.value_to_boolean(v) // ? 1 : 0\n\t// \t}\n\t// }\n\t// is_value_expression(v: ParamInputValue): boolean {\n\t// \treturn !lodash_includes([true, false, 0, 1, '0', '1'], v)\n\t// }\n\n\t// value_to_boolean(v: ParamInputValue): boolean {\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\tif (lodash_isNumber(v)) {\n\t// \t\t\treturn v > 0\n\t// \t\t} else {\n\t// \t\t\treturn parseInt(v) > 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// eval(callback) {\n\t// \treturn this.eval_raw((val) => {\n\t// \t\tconst boolean_result = this.value_to_boolean(val)\n\t// \t\treturn callback(boolean_result)\n\t// \t})\n\t// }\n}\n","import {BaseParamType} from '../params/_Base';\nimport {ParsedTree} from './traversers/ParsedTree';\n// import {MissingReferencesController} from './MissingReferencesController'\n// import CoreWalker from 'src/core/Walker'\n\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\nimport {ExpressionStringGenerator} from './traversers/ExpressionStringGenerator';\nimport {DependenciesController} from './DependenciesController';\nimport {ParamType} from '../poly/ParamType';\n\nexport class ExpressionManager {\n\tpublic parse_completed: boolean = false;\n\tprivate parse_started: boolean = false;\n\tprivate function_generator: FunctionGenerator;\n\tprivate expression_string_generator: ExpressionStringGenerator | undefined;\n\tpublic dependencies_controller: DependenciesController;\n\t// private _error_message: string | undefined;\n\tprivate parsed_tree: ParsedTree = new ParsedTree();\n\n\tconstructor(\n\t\tpublic param: BaseParamType // public element_index: number=0\n\t) {\n\t\tthis.function_generator = new FunctionGenerator(this.param);\n\t\tthis.dependencies_controller = new DependenciesController(this.param);\n\t}\n\n\tparse_expression(expression: string) {\n\t\tif (this.parse_started) {\n\t\t\tthrow new Error(`parse in progress for param ${this.param.full_path()}`);\n\t\t}\n\t\tthis.parse_started = true;\n\t\tthis.parse_completed = false;\n\t\tthis.parsed_tree = this.parsed_tree || new ParsedTree();\n\n\t\tthis.reset();\n\t\tif (this.param.type == ParamType.STRING) {\n\t\t\tthis.parsed_tree.parse_expression_for_string_param(expression);\n\t\t} else {\n\t\t\tthis.parsed_tree.parse_expression(expression);\n\t\t}\n\t\tthis.function_generator.parse_tree(this.parsed_tree);\n\n\t\tif (this.function_generator.error_message == null) {\n\t\t\tthis.dependencies_controller.update(this.function_generator);\n\t\t\tif (this.dependencies_controller.error_message) {\n\t\t\t\tthis.param.states.error.set(this.dependencies_controller.error_message);\n\t\t\t} else {\n\t\t\t\tthis.parse_completed = true;\n\t\t\t\tthis.parse_started = false;\n\t\t\t}\n\t\t} //else {\n\t\t//this.set_error(this.function_generator.error_message);\n\t\t//}\n\t}\n\tasync compute_function(): Promise<any> {\n\t\t// this.parse_and_update_dependencies_if_not_done(expression);\n\t\tif (this.compute_allowed()) {\n\t\t\ttry {\n\t\t\t\tconst new_value = await this.function_generator.eval_function();\n\t\t\t\treturn new_value;\n\t\t\t} catch (e) {\n\t\t\t\t// if (this.function_generator.is_errored && this.function_generator.error_message) {\n\t\t\t\t// \tthis.set_error(this.function_generator.error_message);\n\t\t\t\t// }\n\t\t\t\treturn new Promise((resolve, reject) => resolve());\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.parse_completed = false;\n\t\tthis.parse_started = false;\n\t\t// this._error_message = undefined;\n\t\t// if(force){ // || this.element_index <= 1){\n\t\tthis.dependencies_controller.reset();\n\t\t// }\n\t\tthis.function_generator.reset();\n\t}\n\n\tget is_errored(): boolean {\n\t\treturn this.function_generator.is_errored;\n\t}\n\tget error_message() {\n\t\treturn this.function_generator.error_message;\n\t}\n\n\tprivate compute_allowed(): boolean {\n\t\treturn /*this._error_message == null &&*/ this.function_generator.eval_allowed();\n\t}\n\n\t// private parse_and_update_dependencies(expression: string) {\n\t// \tif (this.param.has_expression()) {\n\t// \t\tthis.parse_expression(expression);\n\n\t// \t\tif (this.error_message != null) {\n\t// \t\t\tthis.param.states.error.set(`expression error: \"${expression}\" (${this.error_message})`);\n\t// \t\t}\n\t// \t\t// this.parse_completed = true\n\t// \t}\n\t// }\n\t// private parse_and_update_dependencies_if_not_done(expression: string) {\n\t// \tif (!this.parse_completed) {\n\t// \t\tthis.parse_and_update_dependencies(expression);\n\t// \t}\n\t// }\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.expression_string_generator =\n\t\t\tthis.expression_string_generator || new ExpressionStringGenerator(this.param);\n\n\t\tconst new_expression_string = this.expression_string_generator.parse_tree(this.parsed_tree);\n\n\t\tif (new_expression_string) {\n\t\t\tthis.param.set(new_expression_string);\n\t\t} else {\n\t\t\tconsole.warn('failed to regenerate expression');\n\t\t}\n\t\t// this.param.expression_controller?.set_expression(new_expression_string);\n\n\t\t// this.reset()\n\t\t// if (new_expression_string) {\n\t\t// this.parse_expression(new_expression_string);\n\t\t// }\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {ParsedTree} from './ParsedTree';\nimport {LiteralConstructsController, LiteralConstructMethod} from '../LiteralConstructsController';\nimport {BaseMethod} from '../methods/_Base';\nimport {MethodModule} from '../methods/_Module';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\nimport lodash_isString from 'lodash/isString';\n\n// import {JsepsByString} from '../DependenciesController'\nimport jsep from 'jsep';\n\n// import {Vector3} from 'three/src/math/Vector3'\ntype LiteralConstructDictionary = Dictionary<LiteralConstructMethod>;\ntype AnyDictionary = Dictionary<any>;\n\nconst NATIVE_MATH_METHODS = [\n\t'abs',\n\t'acos',\n\t'acosh',\n\t'asin',\n\t'asinh',\n\t'atan',\n\t'atan2',\n\t'atanh',\n\t'ceil',\n\t'cos',\n\t'cosh',\n\t'exp',\n\t'expm1',\n\t'floor',\n\t'log',\n\t'log1p',\n\t'log2',\n\t'log10',\n\t'max',\n\t'min',\n\t'pow',\n\t'round',\n\t'sign',\n\t'sin',\n\t'sinh',\n\t'sqrt',\n\t'tan',\n\t'tanh',\n];\nconst NATIVE_ES6_MATH_METHODS = ['cbrt', 'hypot', 'log10', 'trunc'];\nconst NATIVE_MATH_METHODS_RENAMED: AnyDictionary = {\n\tmath_random: 'random',\n};\nconst CORE_MATH_METHODS = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'];\nimport {Easing} from '../../../core/math/Easing';\nconst EASING_METHODS = Object.keys(Easing);\n\nconst CORE_STRING_METHODS = ['precision'];\nconst NATIVE_MATH_CONSTANTS = ['E', 'LN2', 'LN10', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];\n\nconst DIRECT_EXPRESSION_FUNCTIONS: AnyDictionary = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nNATIVE_ES6_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n\tconst remaped = NATIVE_MATH_METHODS_RENAMED[name];\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.String.${name}`;\n});\n\nconst LITERAL_CONSTRUCT: LiteralConstructDictionary = {\n\tif: LiteralConstructsController.if,\n};\n\nconst GLOBAL_CONSTANTS: Dictionary<string> = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n\tGLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\n\nconst INDIRECT_EXPRESSION_METHODS: AnyDictionary = MethodModule;\n\n// const NODE_TYPE_METHODS = {\n// \tCallExpression: 'setup_graph_call_expression',\n// \tMemberExpression: 'setup_graph_member_expression',\n// \tBinaryExpression: 'setup_graph_binary_expression',\n// \tUnaryExpression: 'setup_graph_unary_expression',\n// \tLogicalExpression: 'setup_graph_logical_expression',\n// \tLiteral: 'setup_graph_literal',\n// \tIdentifier: 'setup_graph_identifier'\n// };\n//\n\n// const IDENTIFIER_METHODS = {\n// \t'$F': '_setup_graph_identifier_as_global_frame'\n// }\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = ', ';\nconst ATTRIBUTE_PREFIX = '@';\nimport {VARIABLE_PREFIX} from './_Base';\n\nconst PROPERTY_OFFSETS: AnyDictionary = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n\nimport {BaseTraverser} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {AttributeRequirementsController} from '../AttributeRequirementsController';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreString} from '../../../core/String';\n\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nexport class FunctionGenerator extends BaseTraverser {\n\tprivate function: Function | undefined;\n\t// private function_pre_entities_loop_lines: string[] = [];\n\tprivate _attribute_requirements_controller = new AttributeRequirementsController();\n\t// private function_pre_body:string\n\tprivate function_main_string: string | undefined;\n\tprivate methods: BaseMethod[] = [];\n\tprivate method_index: number = -1;\n\n\tpublic method_dependencies: MethodDependency[] = [];\n\tpublic immutable_dependencies: CoreGraphNode[] = [];\n\t// public jsep_dependencies: JsepDependency[] = []\n\t// public jsep_nodes_by_missing_paths: JsepsByString = {}\n\n\t// private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tpublic parse_tree(parsed_tree: ParsedTree) {\n\t\tthis.reset();\n\n\t\tif (parsed_tree.error_message == null) {\n\t\t\ttry {\n\t\t\t\t// this.function_pre_entities_loop_lines = [];\n\t\t\t\tthis._attribute_requirements_controller.reset();\n\t\t\t\t// this.function_pre_body = ''\n\t\t\t\tif (parsed_tree.node) {\n\t\t\t\t\tconst function_main_string = this.traverse_node(parsed_tree.node);\n\t\t\t\t\tif (function_main_string && !this.is_errored) {\n\t\t\t\t\t\tthis.function_main_string = function_main_string;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('no parsed_tree.node');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`error in expression for param ${this.param.full_path()}`);\n\t\t\t\tconsole.warn(e);\n\t\t\t}\n\n\t\t\tif (this.function_main_string) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.function = new AsyncFunction(\n\t\t\t\t\t\t'Core',\n\t\t\t\t\t\t'param',\n\t\t\t\t\t\t'methods',\n\t\t\t\t\t\t'_set_error_from_error',\n\t\t\t\t\t\t`\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${this.function_body()}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\tthis.set_error('cannot generate function');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.set_error('cannot generate function body');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse expression');\n\t\t}\n\t}\n\n\treset() {\n\t\tsuper.reset();\n\t\tthis.function_main_string = undefined;\n\t\tthis.methods = [];\n\t\tthis.method_index = -1;\n\t\tthis.function = undefined;\n\t\tthis.method_dependencies = [];\n\t\tthis.immutable_dependencies = [];\n\t}\n\n\tfunction_body() {\n\t\tif (this.param.options.is_expression_for_entities) {\n\t\t\treturn `\n\t\t\tconst entities = param.expression_controller.entities;\n\t\t\tif(entities){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\tlet entity;\n\t\t\t\t\tconst entity_callback = param.expression_controller.entity_callback;\n\t\t\t\t\t${this._attribute_requirements_controller.assign_attributes_lines()}\n\t\t\t\t\tif( ${this._attribute_requirements_controller.attribute_presence_check_line()} ){\n\t\t\t\t\t\t${this._attribute_requirements_controller.assign_arrays_lines()}\n\t\t\t\t\t\tfor(let index=0; index < entities.length; index++){\n\t\t\t\t\t\t\tentity = entities[index];\n\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\tentity_callback(entity, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = new Error('attribute not found')\n\t\t\t\t\t\t_set_error_from_error(error)\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n\t\t} else {\n\t\t\treturn `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\ttry {\n\t\t\t\t\tconst value = ${this.function_main_string}\n\t\t\t\t\tresolve(value)\n\t\t\t\t} catch(e) {\n\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\treject()\n\t\t\t\t}\n\t\t\t})\n\t\t\t`;\n\t\t}\n\t}\n\n\teval_allowed(): boolean {\n\t\treturn this.function != null;\n\t}\n\teval_function() {\n\t\t// this.param.entity_attrib_values = this.param.entity_attrib_values || {}\n\t\t// this.param.entity_attrib_values.position =\n\t\t// \tthis.param.entity_attrib_values.position || new THREE.Vector3()\n\t\tif (this.function) {\n\t\t\tthis.clear_error();\n\n\t\t\tconst Core = {\n\t\t\t\tMath: CoreMath,\n\t\t\t\tString: CoreString,\n\t\t\t};\n\t\t\tconst result = this.function(Core, this.param, this.methods, this._set_error_from_error_bound);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TRAVERSE METHODS\n\t//\n\t//\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string | undefined {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst callee = node.callee as jsep.Identifier;\n\t\tconst method_name = callee.name;\n\t\tif (method_name) {\n\t\t\t// literal construct (if...)\n\t\t\tconst literal_contruct = LITERAL_CONSTRUCT[method_name];\n\t\t\tif (literal_contruct) {\n\t\t\t\treturn literal_contruct(method_arguments);\n\t\t\t}\n\n\t\t\t// direct expressions (Math.floor, Math.sin...)\n\t\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\t\t\tconst direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n\t\t\tif (direct_function_name) {\n\t\t\t\treturn `${direct_function_name}(${arguments_joined})`;\n\t\t\t}\n\n\t\t\t// indirect methods (points_count, asset...)\n\t\t\tconst indirect_method = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\t\tif (indirect_method) {\n\t\t\t\tconst path_node = node.arguments[0];\n\t\t\t\t// const path_argument = this.string_generator.traverse_node(path_node)\n\t\t\t\tconst function_string = `return ${method_arguments[0]}`;\n\t\t\t\tlet path_argument_function;\n\t\t\t\tlet path_argument = [];\n\t\t\t\ttry {\n\t\t\t\t\tpath_argument_function = new Function(function_string);\n\t\t\t\t\tpath_argument = path_argument_function();\n\t\t\t\t} catch {\n\t\t\t\t\t// path_argument_function = new AsyncFunction(function_string)\n\t\t\t\t\t// it looks like if the input contains an await,\n\t\t\t\t\t// it is because it has been generated by another indirect function.\n\t\t\t\t\t// This means that the dependencies have been generated already\n\t\t\t\t\t// so we may not need to do it now\n\t\t\t\t}\n\n\t\t\t\tthis._create_method_and_dependencies(method_name, path_argument, path_node);\n\t\t\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_error(`unknown method: ${method_name}`);\n\t}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\tif (node.operator === ATTRIBUTE_PREFIX) {\n\t\t\tlet argument = node.argument;\n\t\t\tlet attribute_name;\n\t\t\tlet property;\n\t\t\tswitch (argument.type) {\n\t\t\t\tcase 'Identifier': {\n\t\t\t\t\tconst argument_identifier = (<unknown>argument) as jsep.Identifier;\n\t\t\t\t\tattribute_name = argument_identifier.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'MemberExpression': {\n\t\t\t\t\tconst argument_member_expression = (<unknown>argument) as jsep.MemberExpression;\n\t\t\t\t\tconst attrib_node = argument_member_expression.object as jsep.Identifier;\n\t\t\t\t\tconst property_node = argument_member_expression.property as jsep.Identifier;\n\t\t\t\t\tattribute_name = attrib_node.name;\n\t\t\t\t\tproperty = property_node.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// this.function_pre_body += `\n\t\t\t// param.entity_attrib_value(${QUOTE}${attrib_node.name}${QUOTE}, param.entity_attrib_values.position);\n\t\t\t// `\n\t\t\tif (attribute_name) {\n\t\t\t\tattribute_name = CoreAttribute.remap_name(attribute_name);\n\t\t\t\tif (attribute_name == 'ptnum') {\n\t\t\t\t\treturn '((entity != null) ? entity.index : 0)';\n\t\t\t\t} else {\n\t\t\t\t\tconst var_attribute_size = this._attribute_requirements_controller.var_attribute_size(\n\t\t\t\t\t\tattribute_name\n\t\t\t\t\t);\n\t\t\t\t\tconst var_array = this._attribute_requirements_controller.var_array(attribute_name);\n\t\t\t\t\tthis._attribute_requirements_controller.add(attribute_name);\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tconst property_offset = PROPERTY_OFFSETS[property];\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}+${property_offset}]`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn('attribute not found');\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t\t}\n\t}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string | undefined {\n\t\tconst identifier_first_char = node.name[0];\n\t\tif (identifier_first_char == VARIABLE_PREFIX) {\n\t\t\tconst identifier_name_without_dollar_sign = node.name.substr(1);\n\n\t\t\t// globals constants: Math.PI or Math.E\n\t\t\tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n\t\t\tif (direct_constant_name) {\n\t\t\t\treturn direct_constant_name;\n\t\t\t}\n\n\t\t\t// scene or node globals: $F, $FPS, $T, $CH, $OS\n\t\t\tconst method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n\t\t\tconst method = (this as any)[method_name];\n\t\t\tif (method) {\n\t\t\t\treturn (this as any)[method_name]();\n\t\t\t} else {\n\t\t\t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn node.name; // @ptnum will call this method and return \"ptnum\"\n\t\t}\n\t}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\tprotected traverse_Identifier_F(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.frame`;\n\t}\n\tprotected traverse_Identifier_FPS(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.fps`;\n\t}\n\tprotected traverse_Identifier_T(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.time`;\n\t}\n\tprotected traverse_Identifier_CH(): string {\n\t\treturn `${QUOTE}${this.param.name}${QUOTE}`;\n\t}\n\tprotected traverse_Identifier_CEX(): string {\n\t\treturn this._method_centroid('x');\n\t}\n\tprotected traverse_Identifier_CEY(): string {\n\t\treturn this._method_centroid('y');\n\t}\n\tprotected traverse_Identifier_CEZ(): string {\n\t\treturn this._method_centroid('z');\n\t}\n\t// TODO:\n\t// '$OS': '_eval_identifier_as_node_name',\n\t// '$BBX': '_eval_identifier_as_bounding_box_relative',\n\n\tprivate _method_centroid(component: string): string {\n\t\tconst method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n\t\tconst arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n\t\tthis._create_method_and_dependencies('centroid', 0);\n\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t}\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\tprivate _create_method_and_dependencies(\n\t\tmethod_name: string,\n\t\tpath_argument: number | string,\n\t\tpath_node?: jsep.Expression\n\t) {\n\t\tconst method_constructor = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\tconst method = new method_constructor(this.param) as BaseMethod;\n\t\tthis.method_index += 1;\n\t\tthis.methods[this.method_index] = method;\n\n\t\tconst method_dependency = method.find_dependency(path_argument);\n\t\tif (method_dependency) {\n\t\t\tif (path_node) {\n\t\t\t\tmethod_dependency.set_jsep_node(path_node);\n\t\t\t}\n\t\t\tthis.method_dependencies.push(method_dependency);\n\t\t} else {\n\t\t\tif (path_node && lodash_isString(path_argument)) {\n\t\t\t\tthis.param.scene.missing_expression_references_controller.register(\n\t\t\t\t\tthis.param,\n\t\t\t\t\tpath_node,\n\t\t\t\t\tpath_argument\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t// method_dependencies.resolved_graph_nodes.forEach((graph_node)=>{\n\t\t// \tif(path_node){\n\t\t// \t\tconst jsep_dependency = new JsepDependency(graph_node, path_node)\n\t\t// \t\tthis.jsep_dependencies.push(jsep_dependency)\n\t\t// \t} else {\n\t\t// \t\tthis.immutable_dependencies.push(graph_node)\n\t\t// \t}\n\n\t\t// })\n\n\t\t// if(path_node){\n\t\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(path_node)\n\t\t// \t})\n\t\t// }\n\t}\n}\n","export type LiteralConstructMethod = (args: any[]) => string\n\nexport class LiteralConstructsController {\n\tstatic if(args: any[]): string {\n\t\tconst condition = args[0]\n\t\tconst val_true = args[1]\n\t\tconst val_false = args[2]\n\t\treturn `(${condition}) ? (${val_true}) : (${val_false})`\n\t}\n}\n","// TODO: create an expression object that knows how many args it can accept, their type\n// and can throw an error and give it to the param, and then to the node\n// TODO: the expression should know how to update the node dependencies\n\n// import abs from './abs'\n// import {Asset} from './asset'\nimport {Bbox} from './bbox';\n// import ceil from './ceil'\nimport {Centroid} from './centroid';\nimport {Ch} from './ch';\nimport {Copy} from './copy';\nimport {CopRes} from './cop_res';\n// import clamp from './clamp'\n// import {Easein} from './easein'\n// import {Easeinout} from './easeinout'\n// import floor from './floor'\n// import humanize from './humanize'\nimport {Local} from './local';\n// import if_ from './if'\n// import max from './max'\n// import min from './min'\nimport {Opdigits} from './opdigits';\n// import object from './object'\n// import objects_count from './objects_count'\n// import objects_visible_count from './objects_visible_count'\nimport {Point} from './point';\nimport {PointsCount} from './points_count';\n// import {Precision} from './precision'\n// import rand from './rand'\n// import round from './round'\n// import sign from './sign'\nimport {StrCharsCount} from './str_chars_count';\nimport {StrConcat} from './str_concat';\nimport {StrIndex} from './str_index';\nimport {StrSub} from './str_sub';\n\nexport const MethodModule = {\n\t// 'asset': Asset,\n\tbbox: Bbox,\n\tch: Ch,\n\tcentroid: Centroid,\n\tcop_res: CopRes,\n\tlocal: Local,\n\topdigits: Opdigits,\n\tpoint: Point,\n\tpoints_count: PointsCount,\n\t// 'precision': Precision,\n\tcopy: Copy,\n\tstr_chars_count: StrCharsCount,\n\tstr_concat: StrConcat,\n\tstr_index: StrIndex,\n\tstr_sub: StrSub,\n};\n\n// import cos from './cos'\n// import sin from './sin'\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {GeometryContainer} from '../../containers/Geometry';\n\n// import Walker from 'src/core/Walker';\n\ninterface BoxComponents {\n\tmin: Vector3;\n\tmax: Vector3;\n\tsize: Vector3;\n\tcenter: Vector3;\n}\n\nconst VECTOR_NAMES: Array<keyof BoxComponents> = ['min', 'max', 'size', 'center'];\nconst COMPONENT_NAMES = ['x', 'y', 'z'];\n\nexport class Bbox extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'vector name, min, max, size or center'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\tlet value = 0;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst vector_name = args[1];\n\t\t\t\tconst component_name = args[2];\n\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tvalue = this._get_value_from_container(container, vector_name, component_name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _get_value_from_container(\n\t\tcontainer: GeometryContainer,\n\t\tvector_name: keyof BoxComponents,\n\t\tcomponent_name: keyof Vector3Like\n\t) {\n\t\tif (VECTOR_NAMES.indexOf(vector_name) >= 0) {\n\t\t\tconst bbox = container.bounding_box();\n\n\t\t\tlet vector = new Vector3();\n\t\t\tswitch (vector_name) {\n\t\t\t\tcase 'size':\n\t\t\t\t\tbbox.getSize(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\tbbox.getCenter(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvector = bbox[vector_name];\n\t\t\t}\n\n\t\t\tif (COMPONENT_NAMES.indexOf(component_name) >= 0) {\n\t\t\t\t//(value = vector[component_name])?\n\t\t\t\treturn vector[component_name];\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import BaseNode from 'src/engine/nodes/_Base'\nimport {DecomposedPath} from '../../core/DecomposedPath';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\nimport {BaseParamType} from '../params/_Base';\n// import {CoreObject} from '../../core/Object';\nimport {BaseNodeType} from '../nodes/_Base';\nimport jsep from 'jsep';\n\nexport class MethodDependency extends CoreGraphNode {\n\tpublic jsep_node: jsep.Expression | undefined;\n\tpublic resolved_graph_node: CoreGraphNode | undefined;\n\tpublic unresolved_path: string | undefined;\n\tprivate _update_from_name_change_bound = this._update_from_name_change.bind(this);\n\n\tconstructor(\n\t\tpublic param: BaseParamType,\n\t\tpublic path_argument: number | string,\n\t\tpublic decomposed_path?: DecomposedPath\n\t) {\n\t\tsuper(param.scene, 'MethodDependency');\n\n\t\t// this.set_scene(this.param.scene);\n\n\t\tthis.add_post_dirty_hook('_update_from_name_change', this._update_from_name_change_bound);\n\t}\n\t_update_from_name_change(trigger?: CoreGraphNode) {\n\t\tif (trigger && this.decomposed_path) {\n\t\t\tconst node = trigger as BaseNodeType;\n\t\t\tthis.decomposed_path.update_from_name_change(node);\n\t\t\tconst new_path = this.decomposed_path.to_path();\n\n\t\t\tconst literal = this.jsep_node as jsep.Literal;\n\t\t\tif (literal) {\n\t\t\t\tliteral.value = `${literal.value}`.replace(`${this.path_argument}`, new_path);\n\t\t\t\tliteral.raw = literal.raw.replace(`${this.path_argument}`, new_path);\n\t\t\t}\n\t\t\tif (this.param.expression_controller) {\n\t\t\t\tthis.param.expression_controller.update_from_method_dependency_name_change();\n\t\t\t}\n\t\t}\n\t}\n\treset() {\n\t\tthis.graph_disconnect_predecessors();\n\t}\n\n\tlisten_for_name_changes() {\n\t\tif (this.jsep_node && this.decomposed_path) {\n\t\t\tthis.decomposed_path.named_nodes.forEach((node_in_path) => {\n\t\t\t\tif (node_in_path) {\n\t\t\t\t\tconst node = node_in_path as BaseNodeType;\n\t\t\t\t\tif (node.name_controller) {\n\t\t\t\t\t\tthis.add_graph_input(node.name_controller.graph_node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tset_jsep_node(jsep_node: jsep.Expression) {\n\t\tthis.jsep_node = jsep_node;\n\t}\n\tset_resolved_graph_node(node: CoreGraphNode) {\n\t\tthis.resolved_graph_node = node;\n\t}\n\tset_unresolved_path(path: string) {\n\t\tthis.unresolved_path = path;\n\t}\n\n\tstatic create(\n\t\tparam: BaseParamType,\n\t\tindex_or_path: number | string,\n\t\tnode: CoreGraphNode,\n\t\tdecomposed_path?: DecomposedPath\n\t) {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\n\t\t// if(!decomposed_path){\n\t\t// \tconsole.log('nodes_in_path', decomposed_path.named_nodes);\n\t\t// \tfor (let node_in_path of decomposed_path.named_nodes) {\n\t\t// \t\tif (node_in_path) {\n\t\t// \t\t\tdecomposed_path.add_node(node_in_path.name, node_in_path);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst instance = new MethodDependency(param, index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\tinstance.set_resolved_graph_node(node);\n\t\t} else {\n\t\t\tif (!is_index) {\n\t\t\t\tconst path = index_or_path as string;\n\t\t\t\tinstance.set_unresolved_path(path);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {GeometryContainer} from '../../containers/Geometry';\n\nexport class Centroid extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// const path = args\n\t\t\t// this.get_referenced_param(path).eval_p().then(val=>{\n\t\t\t// \tresolve(val)\n\t\t\t// })\n\t\t\tif (args.length == 2) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst component_name = args[1] as keyof Vector3Like;\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst bbox = container.bounding_box();\n\t\t\t\t\tconst center = bbox.min\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.add(bbox.max)\n\t\t\t\t\t\t.multiplyScalar(0.5);\n\n\t\t\t\t\tconst value = center[component_name];\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// throw \"only component names are x, y and z\";\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t\t// return this._get_param_value(args[0], args[1], callback);\n\t}\n\n\t// _get_param_value(index_or_path, component_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tlet value;\n\t// \t\tconst bbox = container.bounding_box();\n\t// \t\tconst size = bbox.min.clone().add(bbox.max).multiplyScalar(0.5);\n\n\t// \t\tif ((value = size[component_name]) != null) {\n\t// \t\t\treturn callback(value);\n\t// \t\t} else {\n\t// \t\t\tthrow \"only component names are x, y and z\";\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","// import lodash_isNumber from 'lodash/isNumber';\n\nimport {BaseMethod} from './_Base';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\n\nexport class Ch extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to param']];\n\t}\n\n\t// dependencies(args: any[]): any[]{\n\t// \tconst path = args[0]\n\t// \treturn [this.get_referenced_param(path)]\n\t// }\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst param = this.get_referenced_param(index_or_path as string, decomposed_path);\n\t\tif (param) {\n\t\t\treturn this.create_dependency(param, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('could not find param');\n\t\t}\n\t\treturn null;\n\t\t// const reference_search_result = new ReferenceSearchResult()\n\t\t// const param = this.get_referenced_param(index_or_path)\n\t\t// if(param){\n\t\t// \treference_search_result.set_found_graph_nodes([param])\n\t\t// } else {\n\t\t// \treference_search_result.set_missing_paths([path])\n\t\t// }\n\n\t\t// return reference_search_result\n\t}\n\t// find_dependencies(index_or_path: number|string): MethodDependency{\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<any> {\n\t\tlet val: any = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst path = args[0];\n\t\t\tconst ref = this.get_referenced_param(path);\n\t\t\tif (ref) {\n\t\t\t\tawait ref.compute();\n\t\t\t\tconst result = ref.value;\n\t\t\t\tif (result != null) {\n\t\t\t\t\t// if (lodash_isNumber(result)) {\n\t\t\t\t\tval = result;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn val;\n\t}\n\n\t// _get_param_value(path, callback){\n\t// \treturn this.get_referenced_param(path).eval(val=> {\n\t// \t\treturn callback(val);\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {CoreWalker} from '../../../core/Walker';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class Copy extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to copy'],\n\t\t\t['integer', 'default value'],\n\t\t];\n\t}\n\tstatic optional_arguments() {\n\t\treturn [['string', 'attribute name (optional)']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path) as BaseNodeType;\n\t\t// I'd prefer testing with if(node instanceof CopySopNode)\n\t\t// but tslib generates an error when doing so\n\t\tif (node && node.type == 'copy') {\n\t\t\tconst stamp_node = (node as CopySopNode).stamp_node;\n\t\t\treturn this.create_dependency(stamp_node, index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\t// \t// return this.find_node_dependency_from_index_or_path(index_or_path)\n\t// \tconst node = this.find_dependency_from_index_or_path(index_or_path)\n\t// \treturn this.create_search_result(stamp_node, index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 2 || args.length == 3) {\n\t\t\t\tconst path = args[0];\n\t\t\t\tconst default_value = args[1];\n\t\t\t\tconst attribute_name = args[2];\n\n\t\t\t\tconst node = CoreWalker.find_node(this.node, path);\n\n\t\t\t\tlet value;\n\t\t\t\tif (node && node.type == 'copy') {\n\t\t\t\t\tvalue = (node as CopySopNode).stamp_value(attribute_name);\n\t\t\t\t}\n\t\t\t\t// if (node && node instanceof CopySopNode) {\n\t\t\t\t// \tvalue = node.stamp_value(attribute_name);\n\t\t\t\t// }\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = default_value;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\t// update_dependencies() {\n\t// \treturn this.jsep_node()._graph_node.add_graph_input( this.copy_sop.stamp_node() );\n\t// }\n\n\t// process_arguments(args, callback){\n\t// \tconst path = args[0];\n\t// \tconst default_value = args[1];\n\t// \tconst attribute_name = args[2];\n\n\t// \tthis.copy_sop = Walker.find_node(this.node(), path);\n\t// \tlet value = (this.copy_sop != null) ?\n\t// \t\tthis.copy_sop.stamp_value(attribute_name) : undefined;\n\n\t// \tif (value == null) { value = default_value; }\n\n\t// \treturn callback(value);\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {TextureContainer} from '../../containers/Texture';\n\nexport class CopRes extends BaseMethod {\n\t// cop_res(0, 'x')\n\t// cop_res('../REF_bbox', 'x')\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name: x or y'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 2) {\n\t\t\tconst index_or_path = args[0];\n\t\t\tconst component_name = args[1];\n\t\t\tconst container = (await this.get_referenced_node_container(index_or_path)) as TextureContainer;\n\n\t\t\tif (container) {\n\t\t\t\tconst resolution = container.resolution();\n\t\t\t\tif ([0, '0', 'x'].includes(component_name)) {\n\t\t\t\t\tvalue = resolution[0];\n\t\t\t\t} else {\n\t\t\t\t\tif ([1, '1', 'y'].includes(component_name)) {\n\t\t\t\t\t\tvalue = resolution[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {POLY} from '../../Poly';\n\nexport class Local extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path']];\n\t}\n\n\tprocess_arguments(args: any[]): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.request_asset_url(args[0]).then((url) => {\n\t\t\t\tresolve(url);\n\t\t\t});\n\t\t});\n\t}\n\t// find_dependency(index_or_path: number | string): MethodDependency {\n\t// \treturn null\n\t// }\n\n\t// TODO: add error management\n\trequest_asset_url(name: string): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// const scene = this.node.scene()\n\t\t\t// const scene_uuid = scene.uuid();\n\n\t\t\tlet url;\n\n\t\t\tif (POLY.desktop_controller().active()) {\n\t\t\t\tPOLY.desktop_controller().add_local_path(name, this.param);\n\t\t\t\turl = POLY.desktop_controller().local_path_server_url(name);\n\t\t\t\tresolve(url);\n\t\t\t} else {\n\t\t\t\treturn resolve('');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {CoreString} from '../../../core/String';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class Opdigits extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst graph_node = this.find_referenced_graph_node(index_or_path);\n\t\tif (graph_node) {\n\t\t\tconst node = graph_node as BaseNodeType;\n\t\t\tif (node.name_controller) {\n\t\t\t\tconst name_node = node.name_controller.graph_node;\n\t\t\t\treturn this.create_dependency(name_node, index_or_path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t\t// return [this.create_dependency_from_index_or_path(index_or_path)]\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\n\t// \t// TODO: ensure the dependency update works for space params when they get renamed\n\t// \tconsole.log(node)\n\t// \tconst name_node = node.name_graph_node()\n\t// \treturn this.create_search_result(name_node, index_or_path)\n\t// \t// return this.create_reference_search_result_from_index_or_path(index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst node = this.get_referenced_node(index_or_path);\n\t\t\t\tif (node) {\n\t\t\t\t\tconst name = node.name;\n\t\t\t\t\tconst value = CoreString.tail_digits(name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group'\n\nexport class Point extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['index', 'point index'],\n\t\t\t['string', 'attribute name'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst attrib_name = args[1];\n\t\t\t\tconst point_index = args[2];\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = this._get_value_from_container(container, attrib_name, point_index);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\t_get_value_from_container(container: GeometryContainer, attrib_name: string, point_index: number) {\n\t\tconst core_group = container.core_content();\n\t\t// TODO: optimise and store the group_wrapper in the json_node\n\t\tif (core_group) {\n\t\t\tconst point = core_group.points()[point_index];\n\n\t\t\tif (point) {\n\t\t\t\treturn point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// _get_param_value(index_or_path, point_index, attrib_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tconst group = container.group({clone: false});\n\t// \t\tconst group_wrapper = new Core.Geometry.Group(group);\n\t// \t\t// TODO: optimise and store the group_wrapper in the json_node\n\t// \t\tconst point = group_wrapper.points()[point_index];\n\n\t// \t\tif (point != null) {\n\t// \t\t\tconst value = point.attrib_value(attrib_name);\n\t// \t\t\tif (value != null) {\n\t// \t\t\t\treturn callback(value);\n\t// \t\t\t} else {\n\t// \t\t\t\t//throw \"no attribute #{attrib_name} found\"\n\t// \t\t\t\tconsole.error(`no attribute ${attrib_name} found`);\n\t// \t\t\t\treturn callback(0);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`no point found with index ${point_index}`);\n\t// \t\t\treturn callback(0);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group';\n\nexport class PointsCount extends BaseMethod {\n\t// npoints(0)\n\t// npoints('../REF_bbox')\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tlet container: GeometryContainer;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = container.points_count();\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrCharsCount extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [['string', 'string to count characters of']];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst string = args[0];\n\t\t\tvalue = string.length;\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrConcat extends BaseMethod {\n\t// str_concat(1,2) => '12'\n\t// str_concat(1,\"a\") => '1a'\n\t// str_concat(\"a\",12, \"b\", \" \", 17) => 'a12b 17'\n\tstatic required_arguments(): any[] {\n\t\treturn [\n\t\t\t// ['string', 'string to get range from'],\n\t\t\t// ['integer', 'range start'],\n\t\t\t// ['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg == null) {\n\t\t\t\targ = '';\n\t\t\t}\n\t\t\tvalue += `${arg}`;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrIndex extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get index from'],\n\t\t\t['string', 'char to find index of'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = -1;\n\t\tif (args.length == 2) {\n\t\t\tconst string = args[0];\n\t\t\tconst sub_string = args[1];\n\t\t\tvalue = string.indexOf(sub_string);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrSub extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get range from'],\n\t\t\t['integer', 'range start'],\n\t\t\t['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): MethodDependency | null {\n\t// \treturn null;\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\t\tconst string = args[0];\n\t\tconst range_start = args[1] || 0;\n\t\tlet range_size = args[2] || 1;\n\t\tif (string) {\n\t\t\tvalue = string.substr(range_start, range_size);\n\t\t}\n\t\treturn value;\n\t}\n}\n","export class AttributeRequirementsController {\n\tprivate _attribute_names: Set<string> | undefined;\n\tconstructor() {}\n\n\treset() {\n\t\tif (this._attribute_names) {\n\t\t\tthis._attribute_names.clear();\n\t\t}\n\t}\n\tassign_attributes_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_attribute_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tassign_arrays_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_item_size_line(attribute_name));\n\t\t\t\tlines.push(AttributeRequirementsController.assign_array_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tattribute_presence_check_line(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst var_names: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tconst var_name = AttributeRequirementsController.var_attribute(attribute_name);\n\t\t\t\tvar_names.push(var_name);\n\t\t\t});\n\t\t\treturn var_names.join(' && ');\n\t\t} else {\n\t\t\treturn 'true';\n\t\t}\n\t}\n\n\tadd(attribute_name: string) {\n\t\tthis._attribute_names = this._attribute_names || new Set<string>();\n\t\tthis._attribute_names.add(attribute_name);\n\t}\n\n\tstatic assign_attribute_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\treturn `const ${var_attribute} = entities[0].geometry().attributes['${attribute_name}']`;\n\t}\n\tstatic assign_item_size_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_attribute_size = this.var_attribute_size(attribute_name);\n\t\treturn `const ${var_attribute_size} = ${var_attribute}.itemSize`;\n\t}\n\tstatic assign_array_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_array = this.var_array(attribute_name);\n\t\treturn `const ${var_array} = ${var_attribute}.array`;\n\t}\n\n\tstatic var_attribute(attribute_name: string) {\n\t\treturn `attrib_${attribute_name}`;\n\t}\n\tstatic var_attribute_size(attribute_name: string) {\n\t\treturn `attrib_size_${attribute_name}`;\n\t}\n\tstatic var_array(attribute_name: string) {\n\t\treturn `array_${attribute_name}`;\n\t}\n\tvar_attribute_size(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_attribute_size(attribute_name);\n\t}\n\tvar_array(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_array(attribute_name);\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {ParsedTree} from './ParsedTree';\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesControler} from './MissingReferencesController'\n\nconst ARGUMENTS_SEPARATOR = ', ';\n// const ATTRIBUTE_PREFIX = '@'\n// const VARIABLE_PREFIX = '$'\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n// interface JsepsByString {\n// \t[propName: string]: jsep.Expression[];\n// }\nimport {BaseTraverser} from './_Base';\n\nexport class ExpressionStringGenerator extends BaseTraverser {\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tparse_tree(parsed_tree: ParsedTree) {\n\t\tif (parsed_tree.error_message == null && parsed_tree.node) {\n\t\t\ttry {\n\t\t\t\treturn this.traverse_node(parsed_tree.node);\n\t\t\t} catch (e) {\n\t\t\t\tthis.set_error('could not traverse tree');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse tree');\n\t\t}\n\t}\n\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\n\t\tconst method_name = (node.callee as jsep.Identifier).name;\n\t\treturn `${method_name}(${arguments_joined})`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string {\n\t\treturn `${node.name}`;\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import {ParsedTree} from './Traverser/ParsedTree'\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\n// import {NodeSimple} from '../../core/graph/NodeSimple'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import {NamesListener} from './NamesListener'\nimport {MethodDependency} from './MethodDependency';\nimport jsep from 'jsep';\n\nexport interface JsepsByString {\n\t[propName: string]: jsep.Expression[];\n}\n\nexport class DependenciesController {\n\terror_message: string | undefined;\n\t// private references_controller: MissingReferencesController\n\tprivate cyclic_graph_detected: boolean = false;\n\t// private jsep_nodes_by_missing_paths: JsepsByString = {}\n\tprivate method_dependencies: MethodDependency[] = [];\n\n\t// private names_listeners: NamesListener[] = []\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this.references_controller = this.param.scene().missing_expression_references_controller\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t}\n\n\treset() {\n\t\tthis.param.graph_disconnect_predecessors();\n\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.reset();\n\t\t});\n\t\tthis.method_dependencies = [];\n\n\t\t// this.jsep_nodes_by_missing_paths = {}\n\t\t// const ref_ids = Object.keys(this.missing_expression_references_by_id)\n\t\t// ref_ids.forEach(ref_id=>{\n\t\t// \tconst ref = this.missing_expression_references_by_id[ref_id]\n\t\t// \tthis.references_controller.unregister(ref)\n\t\t// })\n\t\t// this.missing_expression_references_by_id = {}\n\n\t\t// this.names_listeners.forEach(names_listener=>{names_listener.reset()})\n\t}\n\n\tupdate(function_generator: FunctionGenerator) {\n\t\t// const immutable_dependencies = function_generator.immutable_dependencies\n\t\t// const jsep_dependencies = function_generator.jsep_dependencies\n\t\t// const jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\n\t\t// if(jsep_dependencies.length > 0){\n\t\t// \tconsole.log(\"connect_param_to_dependencies\", this.param.full_path())\n\t\t// }\n\n\t\tthis.cyclic_graph_detected = false;\n\n\t\tthis.connect_immutable_dependencies(function_generator);\n\t\tthis.method_dependencies = function_generator.method_dependencies;\n\t\tthis.handle_method_dependencies();\n\t\t// this.connect_missing_paths(function_generator)\n\n\t\tthis.listen_for_name_changes();\n\t}\n\n\tprivate connect_immutable_dependencies(function_generator: FunctionGenerator) {\n\t\tfunction_generator.immutable_dependencies.forEach((dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tif (this.param.add_graph_input(dependency) == false) {\n\t\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tprivate handle_method_dependencies() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tthis.handle_method_dependency(method_dependency);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handle_method_dependency(method_dependency: MethodDependency) {\n\t\tconst node_simple = method_dependency.resolved_graph_node;\n\n\t\tif (node_simple) {\n\t\t\t// this should update the jsep_node, and run the expression to string parser\n\t\t\t// when a name in the referenced nodes is updated\n\t\t\t// const names_listener = new NamesListener(this.param, node_simple, jsep_node)\n\t\t\t// TODO: test that it is no longer active if expression is updated\n\n\t\t\tif (!this.param.add_graph_input(node_simple)) {\n\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} // else {\n\t\t// const jsep_node = method_dependency.jsep_node\n\t\t//}\n\t}\n\n\tprivate listen_for_name_changes() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.listen_for_name_changes();\n\t\t});\n\t}\n\n\t// private connect_missing_paths(function_generator: FunctionGenerator){\n\n\t// \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\t// \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n\n\t// \tmissing_paths.forEach((missing_path)=>{\n\t// \t\tconst full_path = CoreWalker.make_absolute(this.param.node(), missing_path)\n\t// \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n\t// \t\tjsep_nodes.forEach(jsep_node=>{\n\t// \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, full_path)\n\n\t// \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n\t// \t\t})\n\t// \t})\n\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class ButtonParam extends TypedParam<ParamType.BUTTON> {\n\tstatic type() {\n\t\treturn ParamType.BUTTON;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BUTTON], val2: ParamValuesTypeMap[ParamType.BUTTON]) {\n\t\treturn true;\n\t}\n\tpress_button() {\n\t\tthis.options.execute_callback();\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {Color} from 'three/src/math/Color';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_COLOR = ['r', 'g', 'b'];\nexport class ColorParam extends TypedMultipleParam<ParamType.COLOR> {\n\tprotected _value = new Color();\n\tr!: FloatParam;\n\tg!: FloatParam;\n\tb!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.COLOR;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_COLOR;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.COLOR]) {\n\t\tif (raw_input instanceof Color) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.COLOR]\n\t) {\n\t\tif (raw_input1 instanceof Color) {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.r == raw_input2[0] && raw_input1.g == raw_input2[1] && raw_input1.b == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1[0] == raw_input2.r && raw_input1[1] == raw_input2.g && raw_input1[2] == raw_input2.b;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.COLOR], val2: ParamValuesTypeMap[ParamType.COLOR]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.r = this.components[0];\n\t\tthis.g = this.components[1];\n\t\tthis.b = this.components[2];\n\t}\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.r.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.g.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.b.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.r = this.r.raw_input;\n\t// \t\t\tthis._raw_input.g = this.g.raw_input;\n\t// \t\t\tthis._raw_input.b = this.b.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.r.raw_input, this.g.raw_input, this.b.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.r.raw_input;\n\t// \t\tthis._raw_input[1] = this.g.raw_input;\n\t// \t\tthis._raw_input[2] = this.b.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.r = this.r.value;\n\t\tthis._value.g = this.g.value;\n\t\tthis._value.b = this.b.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.COLOR]): Color | null {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\tif(input.length == 3){\n\t// \t\t\tif( input.filter(lodash_isNumber).length > 0 ){\n\t// \t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t}\n\t// \t\t\tif(first){\n\t// \t\t\t\tif(lodash_isNumber(first)){\n\t// \t\t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn new Color();\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class FolderParam extends TypedParam<ParamType.FOLDER> {\n\tstatic type() {\n\t\treturn ParamType.FOLDER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FOLDER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FOLDER], val2: ParamValuesTypeMap[ParamType.FOLDER]) {\n\t\treturn true;\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean'\n\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class IntegerParam extends TypedNumericParam<ParamType.INTEGER> {\n\tstatic type() {\n\t\treturn ParamType.INTEGER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.INTEGER], val2: ParamValuesTypeMap[ParamType.INTEGER]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn Math.round(raw_val);\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseInt(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tconst result = IntegerParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\n\nexport interface RampPointJson {\n\tposition: number;\n\tvalue: number;\n}\nexport interface RampValueJson {\n\tpoints: RampPointJson[];\n\tinterpolation: string;\n}\n\nexport class RampPoint {\n\tconstructor(private _position: number = 0, private _value: number = 0) {}\n\n\tto_json(): RampPointJson {\n\t\treturn {\n\t\t\tposition: this._position,\n\t\t\tvalue: this._value,\n\t\t};\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tcopy(point: RampPoint) {\n\t\tthis._position = point.position;\n\t\tthis._value = point.value;\n\t}\n\tclone() {\n\t\tconst point = new RampPoint();\n\t\tpoint.copy(this);\n\t\treturn point;\n\t}\n\tis_equal(other_point: RampPoint) {\n\t\treturn this._position == other_point.position && this._value == other_point.value;\n\t}\n\tis_equal_json(json: RampPointJson) {\n\t\treturn this._position == json.position && this._value == json.value;\n\t}\n\tfrom_json(json: RampPointJson) {\n\t\tthis._position = json.position;\n\t\tthis._value = json.value;\n\t}\n\tstatic are_equal_json(json1: RampPointJson, json2: RampPointJson) {\n\t\treturn json1.position == json2.position && json1.value == json2.value;\n\t}\n\tstatic from_json(json: RampPointJson) {\n\t\treturn new RampPoint(json.position, json.value);\n\t}\n}\n\nexport enum RampInterpolation {\n\tLINEAR = 'linear',\n}\nexport class RampValue {\n\tprivate _uuid: string;\n\n\tconstructor(private _interpolation: string = RampInterpolation.LINEAR, private _points: RampPoint[] = []) {\n\t\tthis._uuid = MathUtils.generateUUID();\n\t}\n\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\tget interpolation() {\n\t\treturn this._interpolation;\n\t}\n\tget points() {\n\t\treturn this._points;\n\t}\n\tstatic from_json(json: RampValueJson): RampValue {\n\t\tconst points = [];\n\t\tfor (let json_point of json.points) {\n\t\t\tpoints.push(RampPoint.from_json(json_point));\n\t\t}\n\t\treturn new RampValue(json.interpolation, points);\n\t}\n\tto_json(): RampValueJson {\n\t\treturn {\n\t\t\tinterpolation: this._interpolation,\n\t\t\tpoints: this._points.map((p) => p.to_json()),\n\t\t};\n\t}\n\tclone(): RampValue {\n\t\tconst ramp = new RampValue();\n\t\tramp.copy(this);\n\t\treturn ramp;\n\t}\n\tcopy(ramp: RampValue) {\n\t\tthis._interpolation = ramp.interpolation;\n\t\tlet index = 0;\n\t\tfor (let point of ramp.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.copy(point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(point.clone());\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n\n\tis_equal(other_ramp_value: RampValue): boolean {\n\t\tif (this._interpolation != other_ramp_value.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst other_points = other_ramp_value.points;\n\t\tif (this._points.length != other_points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = other_points[index];\n\t\t\tif (!point.is_equal(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn true;\n\t}\n\tis_equal_json(json: RampValueJson) {\n\t\tif (this._interpolation != json.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._points.length != json.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = json.points[index];\n\t\t\tif (!point.is_equal_json(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tstatic are_json_equal(json1: RampValueJson, json2: RampValueJson) {\n\t\tif (json1.interpolation != json2.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (json1.points.length != json2.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point1 of json1.points) {\n\t\t\tconst point2 = json2.points[index];\n\t\t\tif (!RampPoint.are_equal_json(point1, point2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tfrom_json(json: RampValueJson) {\n\t\tthis._interpolation = json.interpolation;\n\n\t\tlet index = 0;\n\t\tfor (let json_point of json.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.from_json(json_point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(RampPoint.from_json(json_point));\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class SeparatorParam extends TypedParam<ParamType.SEPARATOR> {\n\tstatic type() {\n\t\treturn ParamType.SEPARATOR;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.SEPARATOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.SEPARATOR],\n\t\tval2: ParamValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR2 = ['x', 'y'];\nexport class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {\n\tprotected _value = new Vector2();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR2;\n\t}\n\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR2;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number2;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector2) {\n\t// \t\treturn this._raw_input.toArray() as Number2;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number2;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]) {\n\t\tif (raw_input instanceof Vector2) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber2 = [raw_input[0], raw_input[1]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]\n\t) {\n\t\tif (raw_input1 instanceof Vector2) {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y;\n\t\t\t} else {\n\t\t\t\treturn raw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1];\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector2().fromArray(input);\n\t// \t}\n\t// \treturn new Vector2();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {FloatParam} from './Float';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_VECTOR3 = ['x', 'y', 'z'];\nexport class Vector3Param extends TypedMultipleParam<ParamType.VECTOR3> {\n\tprotected _value = new Vector3();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR3;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR3;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tif (raw_input instanceof Vector3) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR3]\n\t) {\n\t\tif (raw_input1 instanceof Vector3) {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1] && raw_input1.z == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y && raw_input1[2] == raw_input2.z;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR3], val2: ParamValuesTypeMap[ParamType.VECTOR3]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t}\n\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.x.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.y.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.z.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.x = this.x.raw_input;\n\t// \t\t\tthis._raw_input.y = this.y.raw_input;\n\t// \t\t\tthis._raw_input.z = this.z.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.x.raw_input;\n\t// \t\tthis._raw_input[1] = this.y.raw_input;\n\t// \t\tthis._raw_input[2] = this.z.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector3().fromArray(input);\n\t// \t}\n\t// \treturn new Vector3();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR4 = ['x', 'y', 'z', 'w'];\nexport class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {\n\tprotected _value = new Vector4();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tw!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR4;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR4;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number4;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector4) {\n\t// \t\treturn this._raw_input.toArray() as Number4;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber4 = [\n\t// \t\t\tthis._raw_input[0],\n\t// \t\t\tthis._raw_input[1],\n\t// \t\t\tthis._raw_input[2],\n\t// \t\t\tthis._raw_input[3],\n\t// \t\t];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number4;\n\t}\n\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR4]) {\n\t\tif (raw_input instanceof Vector4) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber4 = [raw_input[0], raw_input[1], raw_input[2], raw_input[3]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR4]\n\t) {\n\t\tif (raw_input1 instanceof Vector4) {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1.x == raw_input2[0] &&\n\t\t\t\t\traw_input1.y == raw_input2[1] &&\n\t\t\t\t\traw_input1.z == raw_input2[2] &&\n\t\t\t\t\traw_input1.w == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2.x &&\n\t\t\t\t\traw_input1[1] == raw_input2.y &&\n\t\t\t\t\traw_input1[2] == raw_input2.z &&\n\t\t\t\t\traw_input1[3] == raw_input2.w\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] &&\n\t\t\t\t\traw_input1[1] == raw_input2[1] &&\n\t\t\t\t\traw_input1[2] == raw_input2[2] &&\n\t\t\t\t\traw_input1[3] == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t\tthis.w = this.components[3];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t\tthis._value.w = this.w.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector4().fromArray(input);\n\t// \t}\n\t// \treturn new Vector4();\n\t// }\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsValueAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['value_type'];\n};\n\nexport class ParamsValueAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nexport class ProcessingContext {\n\tprivate _frame: number = 0;\n\tconstructor(node: BaseNodeType) {}\n\tcopy(src_context: ProcessingContext) {\n\t\tthis._frame = src_context.frame;\n\t}\n\tget frame() {\n\t\treturn this._frame;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nimport {ConnectionsController} from './ConnectionsController';\nimport {InputsController} from './InputsController';\nimport {OutputsController} from './OutputsController';\n\nexport class IOController<T extends BaseNodeType> {\n\tprotected _connections: ConnectionsController = new ConnectionsController(this.node);\n\tprotected _inputs: InputsController<T> | undefined;\n\tprotected _outputs: OutputsController<T> | undefined;\n\n\tconstructor(protected node: T) {}\n\n\t// add_connections_controller() {\n\t// \tthis._connections =\n\t// }\n\tget connections() {\n\t\treturn this._connections;\n\t}\n\n\t// inputs\n\t// init_inputs(options: InputsControllerOptions) {\n\t// \tthis.inputs.set_options(options);\n\t// }\n\tget inputs(): InputsController<T> {\n\t\treturn (this._inputs = this._inputs || new InputsController<T>(this.node));\n\t}\n\thas_inputs() {\n\t\treturn this._inputs != null;\n\t}\n\n\t// outputs\n\t// init_outputs() {\n\t// \tthis._outputs = this._outputs || new OutputsController(this.node);\n\t// }\n\tget outputs(): OutputsController<T> {\n\t\treturn (this._outputs = this._outputs || new OutputsController<T>(this.node));\n\t}\n\thas_outputs() {\n\t\treturn this._outputs != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport lodash_compact from 'lodash/compact';\nimport {NodeConnection} from './NodeConnection';\n\n// interface NodeConnectionByString {\n// \t[propName: string]: NodeConnection;\n// }\n// interface NodeConnectionByStringByString {\n// \t[propName: string]: NodeConnectionByString;\n// }\n\nexport class ConnectionsController {\n\tprivate _input_connections: Array<NodeConnection | undefined> | undefined;\n\tprivate _output_connections: Map<number, Map<number, NodeConnection>> = new Map();\n\n\tconstructor(protected _node: BaseNodeType) {}\n\n\tinit_inputs() {\n\t\tconst count = this._node.io.inputs.max_inputs_count;\n\t\tthis._input_connections = new Array(count);\n\t}\n\n\t//\n\t//\n\t// INPUT CONNECTIONS\n\t//\n\t//\n\tadd_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\t// if (connection.input_index < this._input_connections.length) {\n\t\t\tthis._input_connections[connection.input_index] = connection;\n\t\t\t// } else {\n\t\t\t// \tconsole.warn(`attempt to add an input connection at index ${connection.input_index}`);\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tremove_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\tif (connection.input_index < this._input_connections.length) {\n\t\t\t\tthis._input_connections[connection.input_index] = undefined;\n\t\t\t\t// if all connections after are also undefined, we can safely shrink the array\n\t\t\t\tlet all_connections_after_are_undefined = true;\n\t\t\t\tfor (let i = connection.input_index; i < this._input_connections.length; i++) {\n\t\t\t\t\tif (this._input_connections[i]) {\n\t\t\t\t\t\tall_connections_after_are_undefined = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (all_connections_after_are_undefined) {\n\t\t\t\t\tthis._input_connections = this._input_connections.slice(0, connection.input_index);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`attempt to remove an input connection at index ${connection.input_index}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tinput_connection(index: number): NodeConnection | undefined {\n\t\tif (this._input_connections) {\n\t\t\treturn this._input_connections[index];\n\t\t}\n\t}\n\tfirst_input_connection(): NodeConnection {\n\t\treturn lodash_compact(this._input_connections)[0];\n\t}\n\t// last_input_connection(): NodeConnection {\n\t// \tconst connections = lodash_compact(this._input_connections);\n\t// \treturn connections[connections.length - 1];\n\t// }\n\tinput_connections() {\n\t\treturn this._input_connections;\n\t}\n\n\t//\n\t//\n\t// OUTPUT CONNECTIONS\n\t//\n\t//\n\tadd_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (!connections_by_id) {\n\t\t\tconnections_by_id = new Map<number, NodeConnection>();\n\t\t\tthis._output_connections.set(output_index, connections_by_id);\n\t\t}\n\t\tconnections_by_id.set(id, connection);\n\t\t// this._output_connections[output_index] = this._output_connections[output_index] || {};\n\t\t// this._output_connections[output_index][id] = connection;\n\t}\n\tremove_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (connections_by_id) {\n\t\t\tconnections_by_id.delete(id);\n\t\t}\n\t\t// delete this._output_connections[output_index][id];\n\t}\n\n\toutput_connections() {\n\t\tlet list: NodeConnection[] = [];\n\n\t\tthis._output_connections.forEach((connections_by_id, output_index) => {\n\t\t\tconnections_by_id.forEach((connection, id) => {\n\t\t\t\tif (connection) {\n\t\t\t\t\tlist.push(connection);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t// Object.keys(this._output_connections).forEach((index) => {\n\t\t// \tconst connections_for_index = this._output_connections[index];\n\t\t// \tObject.keys(connections_for_index).forEach((id) => {\n\t\t// \t\tlist.push(connections_for_index[id]);\n\t\t// \t});\n\t\t// });\n\t\treturn list;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseContainer} from '../../../containers/_Base';\n// import lodash_includes from 'lodash/includes'\n// import lodash_filter from 'lodash/filter'\nimport lodash_each from 'lodash/each';\nimport lodash_isString from 'lodash/isString';\n// import lodash_compact from 'lodash/compact'\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport {NodeConnection} from './NodeConnection';\n\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {InputCloneMode} from '../../../poly/InputCloneMode';\nimport {TypeAssert} from '../../../poly/Assert';\n\n// export class InputGraphNode extends NodeSimple {\n// \tconstructor(name: string) {\n// \t\tsuper(name);\n// \t}\n// }\n\n// export interface InputsControllerOptions {\n// \tmin_inputs?: number;\n// \tmax_inputs?: number;\n// \tdepends_on_inputs?: boolean;\n// }\ntype OnUpdateHook = () => void;\n\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class InputsController<T extends BaseNodeType> {\n\tprivate _graph_node_inputs: CoreGraphNode[] = [];\n\tprivate _inputs: Array<T | null> = [];\n\tprivate _has_named_inputs: boolean = false;\n\t// _input_connections: NodeConnection[] = []\n\tprivate _named_input_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _min_inputs_count: number = 0;\n\tprivate _max_inputs_count: number = 0;\n\tprivate _depends_on_inputs: boolean = true;\n\n\t// hooks\n\tprivate _on_update_hooks: OnUpdateHook[] | undefined;\n\tprivate _on_update_hook_names: string[] | undefined;\n\n\t// clonable\n\tprivate _user_inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _override_clonable_state: boolean = false;\n\n\tconstructor(protected node: T) {\n\t\t//, options: InputsControllerOptions = {}) {\n\t\t// this.set_options(options);\n\t}\n\n\t// set_options(options: InputsControllerOptions) {\n\t// \tif (options['min_inputs']) {\n\t// \t\tthis.set_min_inputs_count(options['min_inputs']);\n\t// \t}\n\t// \tif (options['max_inputs']) {\n\t// \t\tthis.set_max_inputs_count(options['max_inputs']);\n\t// \t}\n\t// \tif (options['depends_on_inputs']) {\n\t// \t\tthis.set_depends_on_inputs(options['depends_on_inputs']);\n\t// \t}\n\t// }\n\n\t// _init_inputs() {\n\t// \tthis._inputs = [];\n\t// }\n\tset_depends_on_inputs(depends_on_inputs: boolean) {\n\t\tthis._depends_on_inputs = depends_on_inputs;\n\t}\n\tprivate set_min_inputs_count(min_inputs_count: number) {\n\t\tthis._min_inputs_count = min_inputs_count;\n\t}\n\t// min_inputs_count() {\n\t// \treturn this._min_inputs_count || 0;\n\t// }\n\tprivate set_max_inputs_count(max_inputs_count: number) {\n\t\tthis._max_inputs_count = max_inputs_count;\n\t\tthis.init_graph_node_inputs();\n\t}\n\n\tnamed_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let connection_point of this._named_input_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_inputs = true;\n\t\tthis._named_input_connection_points = connection_points;\n\t\tthis.set_min_inputs_count(0);\n\t\tthis.set_max_inputs_count(connection_points.length);\n\t\tthis.init_graph_node_inputs();\n\t\tthis.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n\t}\n\tget has_named_inputs() {\n\t\treturn this._has_named_inputs;\n\t}\n\tget named_input_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_input_connection_points || [];\n\t}\n\tprivate init_graph_node_inputs() {\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\tthis._graph_node_inputs[i] = this._graph_node_inputs[i] || this._create_graph_node_input(i);\n\t\t}\n\t}\n\tprivate _create_graph_node_input(index: number): CoreGraphNode {\n\t\tconst graph_input_node = new CoreGraphNode(this.node.scene, `input_${index}`);\n\t\t// graph_input_node.set_scene(this.node.scene);\n\t\tthis.node.add_graph_input(graph_input_node);\n\t\treturn graph_input_node;\n\t}\n\n\tget max_inputs_count(): number {\n\t\treturn this._max_inputs_count || 0;\n\t}\n\tinput_graph_node(input_index: number): CoreGraphNode {\n\t\treturn this._graph_node_inputs[input_index];\n\t}\n\n\t// set_count_to_zero() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(0);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\t// set_count_to_one_max() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(1);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\tset_count(min: number, max?: number) {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t}\n\t\tthis.set_min_inputs_count(min);\n\t\tthis.set_max_inputs_count(max);\n\n\t\tthis.init_inputs_clonable_state();\n\t\tthis.init_connections_controller_inputs();\n\t}\n\tprivate init_connections_controller_inputs() {\n\t\tthis.node.io.connections.init_inputs();\n\t}\n\t// requires_two_inputs: ->\n\t// \tthis.set_min_inputs_count(2)\n\t// \tthis.set_max_inputs_count(2)\n\n\t// requires_one_input() {\n\t// \treturn this._min_inputs_count > 0;\n\t// }\n\n\t// eval_required_inputs(callback){\n\t// \tconst containers = [];\n\t// \tif (this._max_inputs_count === 0) {\n\t// \t\treturn callback(containers);\n\t// \t} else {\n\t// \t\tconst existing_inputs = lodash_compact(this.inputs());\n\t// \t\tif (existing_inputs.length < this._min_inputs_count) {\n\t// \t\t\treturn this.self.set_error(\"inputs are missing\");\n\t// \t\t} else {\n\t// \t\t\t// const frame = this.self.context().frame();\n\t// \t\t\t// const full_path = this.self.full_path();\n\n\t// \t\t\tswitch (existing_inputs.length) {\n\t// \t\t\t\tcase 0:\n\t// \t\t\t\t\treturn callback(containers);\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container=> {\n\t// \t\t\t\t\t\tcontainers.push(container);\n\t// \t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t});\n\t// \t\t\t\tcase 2:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container0=> {\n\t// \t\t\t\t\t\treturn this.eval_required_input(1, container1=> {\n\t// \t\t\t\t\t\t\tcontainers.push(container0);\n\t// \t\t\t\t\t\t\tcontainers.push(container1);\n\t// \t\t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t});\n\t// \t\t\t\t\t// TODO: I could also here check if the inputs are dirty\n\t// \t\t\t\t\t// instead of going through the callback chain\n\t// \t\t\t\t\t// input_node0 = this.input(0)\n\t// \t\t\t\t\t// input_node0.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// input_node0.request_container (container0)=>\n\t// \t\t\t\t\t// \tinput_node1 = this.input(1)\n\t// \t\t\t\t\t// \tinput_node1.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// \tinput_node1.request_container (container1)=>\n\t// \t\t\t\t\t// \t\tcontainers.push(container0)\n\t// \t\t\t\t\t// \t\tcontainers.push(container1)\n\t// \t\t\t\t\t// \t\tcallback([container0, container1])\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(`${this.self.full_path()} inputs not evaluated`);\n\t// \t\t\t\t\treturn callback();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tasync eval_required_inputs_p() {\n\t\tlet containers: Array<BaseContainer | null> = [];\n\t\tif (this._max_inputs_count > 0) {\n\t\t\tconst existing_input_indices: number[] = [];\n\t\t\tthis.inputs().forEach((input, i) => {\n\t\t\t\tif (input) {\n\t\t\t\t\texisting_input_indices.push(i);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// const existing_inputs = lodash_compact(this.inputs());\n\t\t\tif (existing_input_indices.length < this._min_inputs_count) {\n\t\t\t\tthis.node.states.error.set('inputs are missing');\n\t\t\t} else {\n\t\t\t\tif (existing_input_indices.length > 0) {\n\t\t\t\t\tconst promises = existing_input_indices.map((input_index) => {\n\t\t\t\t\t\treturn this.node.io.inputs.eval_required_input(input_index);\n\t\t\t\t\t});\n\t\t\t\t\tcontainers = await Promise.all(promises);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containers;\n\t}\n\t// eval_required_input(input_index: number, callback){\n\t// \treturn this.self.request_input_container(input_index, container=> {\n\t// \t\t// we do not clone here, as we just check if a group is present\n\t// \t\tlet group;\n\t// \t\tif ((container != null) && ((group = container.object({clone: false})) != null)) {\n\t// \t\t\treturn callback(container);\n\t// \t\t} else {\n\t// \t\t\tconst input_node = this.input(input_index);\n\t// \t\t\tif (input_node != null) {\n\t// \t\t\t\tconst input_error_message = input_node.error_message();\n\t// \t\t\t\treturn this.self.set_error(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\tasync eval_required_input(input_index: number) {\n\t\tconst container = await this.node.container_controller.request_input_container(input_index);\n\t\t// we do not clone here, as we just check if a group is present\n\t\tif (container && container.core_content()) {\n\t\t\t// return container;\n\t\t} else {\n\t\t\tconst input_node = this.input(input_index);\n\t\t\tif (input_node) {\n\t\t\t\tconst input_error_message = input_node.states.error.message;\n\t\t\t\tif (input_error_message) {\n\t\t\t\t\tthis.node.states.error.set(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\t// protected _get_named_input_index_without_error(name: string): number {\n\t// \tconst connections = this.named_input_connections;\n\t// \tlet index = -1;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn index;\n\t// }\n\tget_named_input_index(name: string): number {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n\t\t\t\tif (this._named_input_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t\t// const index = this._get_named_input_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connections = this.named_input_connections;\n\t\t// \tconst available_names = connections.map((o) => o.name).join(', ');\n\t\t// \tconsole.log('named_input_connections', connections);\n\t\t// \tthrow new Error(\n\t\t// \t\t`${this.node.full_path()}: no inputs named '${name}'. available names are '${available_names}' (${\n\t\t// \t\t\tconnections.length\n\t\t// \t\t} inputs)`\n\t\t// \t);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_input_index(input_index_or_name: number | string): number {\n\t\tif (lodash_isString(input_index_or_name)) {\n\t\t\tif (this.has_named_inputs) {\n\t\t\t\treturn this.get_named_input_index(input_index_or_name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`node ${this.node.full_path()} has no named inputs`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn input_index_or_name;\n\t\t}\n\t}\n\n\tset_input(input_index_or_name: number | string, node: T | null, output_index_or_name: number | string = 0) {\n\t\tconst input_index = this.get_input_index(input_index_or_name) || 0;\n\t\tif (input_index < 0) {\n\t\t\tconst message = `invalid input (${input_index_or_name}) for node ${this.node.full_path()}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tlet output_index = 0;\n\t\tif (node) {\n\t\t\tif (node.io.outputs.has_named_outputs) {\n\t\t\t\t// if(node.has_named_output(output_index_or_name)){\n\t\t\t\toutput_index = node.io.outputs.get_output_index(output_index_or_name);\n\t\t\t\tif (output_index == null || output_index < 0) {\n\t\t\t\t\tconsole.warn(`node ${node.full_path()} does not have an output named ${output_index_or_name}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// this seems to prevent connecting output 1 from a vec to float to something else\n\t\t\t\t// } else {\n\t\t\t\t// \tconsole.warn(`${node.full_path()} has no output '${output_index_or_name}'`)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tconst graph_input_node = this._graph_node_inputs[input_index];\n\t\tif (graph_input_node == null) {\n\t\t\tconst message = `graph_input_node not found at index ${input_index}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tif (node && this.node.parent != node.parent) {\n\t\t\treturn;\n\t\t}\n\t\t// use the name if the node is either not defined or in another parent\n\t\t// const parent = this.self.parent()\n\t\t// if ((node == null) || (node.parent().graph_node_id !== parent.graph_node_id)) {\n\t\t// \tif (node_name != null) {\n\t\t// \t\tnode = parent.node(node_name);\n\t\t// \t}\n\t\t// }\n\n\t\tconst old_input_node = this._inputs[input_index];\n\t\tlet old_output_index: number | null = null;\n\t\tlet old_connection: NodeConnection | undefined = undefined;\n\t\tif (this.node.io.connections) {\n\t\t\told_connection = this.node.io.connections.input_connection(input_index);\n\t\t}\n\t\tif (old_connection) {\n\t\t\told_output_index = old_connection.output_index;\n\t\t}\n\n\t\tif (node !== old_input_node || output_index != old_output_index) {\n\t\t\t// TODO: test: add test to make sure this is necessary\n\t\t\tif (old_input_node != null) {\n\t\t\t\tif (this._depends_on_inputs) {\n\t\t\t\t\tgraph_input_node.remove_graph_input(old_input_node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node != null) {\n\t\t\t\tif (graph_input_node.add_graph_input(node)) {\n\t\t\t\t\t// we do test if we can create the graph connection\n\t\t\t\t\t// to ensure we are not in a cyclical graph,\n\t\t\t\t\t// but we delete it right after\n\t\t\t\t\tif (!this._depends_on_inputs) {\n\t\t\t\t\t\tgraph_input_node.remove_graph_input(node);\n\t\t\t\t\t}\n\n\t\t\t\t\t//this._input_connections[input_index] = new NodeConnection(node, this.self, output_index, input_index);\n\t\t\t\t\tif (old_connection) {\n\t\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t\t}\n\t\t\t\t\tthis._inputs[input_index] = node;\n\t\t\t\t\tnew NodeConnection(node, this.node, output_index, input_index);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`cannot connect ${node.full_path()} to ${this.node.full_path()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._inputs[input_index] = null;\n\t\t\t\tif (old_connection) {\n\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t}\n\t\t\t\t// this._input_connections[input_index] = null;\n\t\t\t}\n\n\t\t\tthis._run_on_set_input_hooks();\n\t\t\tgraph_input_node.set_successors_dirty();\n\t\t\t// this.node.set_dirty(node);\n\t\t\tthis.node.emit(NodeEvent.INPUTS_UPDATED);\n\t\t}\n\t}\n\n\tremove_input(node: T) {\n\t\tlodash_each(this.inputs(), (input, index) => {\n\t\t\tif (input != null && node != null) {\n\t\t\t\tif (input.graph_node_id === node.graph_node_id) {\n\t\t\t\t\tthis.set_input(index, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tinput(input_index: number): T | null {\n\t\treturn this._inputs[input_index];\n\t}\n\t// TODO: the named_input and named_output API really needs to change\n\tnamed_input(input_name: string): T | null {\n\t\tif (this.has_named_inputs) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._inputs[input_index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tnamed_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this.has_named_inputs && this._named_input_connection_points) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._named_input_connection_points[input_index];\n\t\t}\n\t}\n\thas_named_input(name: string): boolean {\n\t\treturn this.get_named_input_index(name) >= 0;\n\t}\n\thas_input(input_index: number): boolean {\n\t\treturn this._inputs[input_index] != null;\n\t}\n\tinputs() {\n\t\treturn this._inputs;\n\t}\n\n\t// outputs(): BaseNode[] {\n\t// \treturn lodash_filter(this.self.graph_successors(), successor=> {\n\t// \t\tif (successor.is_a(Node)) {\n\t// \t\t\treturn lodash_includes(successor.inputs(), this.self);\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// clonable states\n\toverride_clonable_state_allowed() {\n\t\tlet value = false;\n\t\tfor (let state of this.inputs_clonable_state()) {\n\t\t\tif (state == InputCloneMode.FROM_NODE) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\tinputs_clonable_state(): InputCloneMode[] {\n\t\treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n\t}\n\tinput_cloned(index: number): boolean {\n\t\treturn this.input_clonable_state_with_override(index);\n\t}\n\tinputs_clonable_state_with_override(): boolean[] {\n\t\tconst list = [];\n\t\tconst states = this.inputs_clonable_state();\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tlist.push(this.input_clonable_state_with_override(i));\n\t\t}\n\t\treturn list;\n\t}\n\tinput_clonable_state_with_override(index: number): boolean {\n\t\tconst states = this.inputs_clonable_state();\n\t\t// for (let i = 0; i < states.length; i++) {\n\t\t// TODO: typescript: not sure if this loop was justified\n\t\tconst state = states[index];\n\t\tswitch (state) {\n\t\t\tcase InputCloneMode.ALWAYS:\n\t\t\t\treturn true;\n\t\t\tcase InputCloneMode.NEVER:\n\t\t\t\treturn false;\n\t\t\tcase InputCloneMode.FROM_NODE:\n\t\t\t\treturn !this._override_clonable_state;\n\t\t\t// default:\n\t\t\t// \tthrow new Error('unsupported type');\n\t\t}\n\t\treturn TypeAssert.unreachable(state);\n\t\t// }\n\t}\n\n\tinit_inputs_clonable_state(values: InputCloneMode[] | null = null) {\n\t\tif (values) {\n\t\t\tthis._user_inputs_clonable_states = values;\n\t\t}\n\t\tthis._inputs_clonable_states = this._user_inputs_clonable_states || this._default_inputs_clonale_state_values();\n\n\t\treturn this._inputs_clonable_states;\n\t}\n\tprivate _default_inputs_clonale_state_values() {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\t// lodash_times(this.self._max_inputs_count, (i)=>{\n\t\t\tlist.push(InputCloneMode.ALWAYS);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset_override_clonable_state(state: boolean) {\n\t\tthis._override_clonable_state = state;\n\t\tthis.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n\t}\n\toverride_clonable_state() {\n\t\treturn this._override_clonable_state;\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tadd_on_set_input_hook(name: string, hook: OnUpdateHook) {\n\t\tthis._on_update_hooks = this._on_update_hooks || [];\n\t\tthis._on_update_hook_names = this._on_update_hook_names || [];\n\n\t\tif (!this._on_update_hook_names.includes(name)) {\n\t\t\tthis._on_update_hooks.push(hook);\n\t\t\tthis._on_update_hook_names.push(name);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tprivate _run_on_set_input_hooks() {\n\t\tif (this._on_update_hooks) {\n\t\t\tfor (let hook of this._on_update_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ninterface DisconnectionOptions {\n\tset_input?: boolean;\n}\n\nexport class NodeConnection {\n\tprivate static _next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor(\n\t\tprivate _node_src: BaseNodeType,\n\t\tprivate _node_dest: BaseNodeType,\n\t\tprivate _output_index: number = 0,\n\t\tprivate _input_index: number = 0\n\t) {\n\t\tthis._id = NodeConnection._next_id++;\n\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.add_output_connection(this);\n\t\t\tthis._node_dest.io.connections.add_input_connection(this);\n\t\t}\n\t}\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget node_src() {\n\t\treturn this._node_src;\n\t}\n\tget node_dest() {\n\t\treturn this._node_dest;\n\t}\n\tget output_index() {\n\t\treturn this._output_index;\n\t}\n\tget input_index() {\n\t\treturn this._input_index;\n\t}\n\n\tdisconnect(options: DisconnectionOptions = {}) {\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.remove_output_connection(this);\n\t\t\tthis._node_dest.io.connections.remove_input_connection(this);\n\t\t}\n\n\t\tif (options.set_input === true) {\n\t\t\tthis._node_dest.io.inputs.set_input(this._input_index, null);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isString from 'lodash/isString';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// interface OutputsOptions {\n// \thas_outputs?: boolean;\n// }\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class OutputsController<T extends BaseNodeType> {\n\tprivate _has_outputs: boolean = false;\n\tprivate _named_output_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _has_named_outputs: boolean = false;\n\n\tconstructor(private node: T) {}\n\n\t// init(options?: OutputsOptions) {\n\t// \tif (options == null) {\n\t// \t\toptions = {};\n\t// \t}\n\t// \tif (options['has_outputs'] == null) {\n\t// \t\toptions['has_outputs'] = true;\n\t// \t}\n\t// \tthis._has_outputs = options['has_outputs'];\n\t// }\n\tset_has_one_output() {\n\t\tthis._has_outputs = true;\n\t}\n\tset_has_no_output() {\n\t\tthis._has_outputs = false;\n\t}\n\n\tget has_outputs() {\n\t\treturn this._has_outputs;\n\t}\n\tget has_named_outputs() {\n\t\treturn this._has_named_outputs;\n\t}\n\thas_named_output(name: string): boolean {\n\t\t// return this._get_named_output_index_without_error(name) != null;\n\t\treturn this.get_named_output_index(name) >= 0;\n\t}\n\tget named_output_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_output_connection_points || [];\n\t}\n\tnamed_output_connection(index: number): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\treturn this._named_output_connection_points[index];\n\t\t}\n\t}\n\t// protected _get_named_output_index_without_error(name: string): number {\n\t// \tconst connections = this.named_output_connection_points;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn -1;\n\t// }\n\tget_named_output_index(name: string): number {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_output_connection_points.length; i++) {\n\t\t\t\tif (this._named_output_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\n\t\t// const index = this._get_named_output_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connection_points = this.named_output_connection_points;\n\t\t// \tconst available_names = connection_points.map((o) => o.name).join(', ');\n\t\t// \tthrow new Error(`no outputs named '${name}'. available names are ${available_names}`);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_output_index(output_index_or_name: number | string): number {\n\t\tif (output_index_or_name != null) {\n\t\t\tif (lodash_isString(output_index_or_name)) {\n\t\t\t\tif (this.has_named_outputs) {\n\t\t\t\t\treturn this.get_named_output_index(output_index_or_name);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`node ${this.node.full_path()} has no named outputs`);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn output_index_or_name;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tnamed_output_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let connection_point of this._named_output_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_named_output_connection_points(connection_points: BaseNamedConnectionPointType[], set_dirty: boolean = true) {\n\t\tthis._has_named_outputs = true;\n\t\tthis._named_output_connection_points = connection_points;\n\t\tif (set_dirty && this.node.scene) {\n\t\t\t// why do I need this set dirty here?\n\t\t\t// I currently have to have a flag to optionally prevent this,\n\t\t\t// for instance from gl nodes which have their outputs updated in a post dirty hook\n\t\t\tthis.node.set_dirty(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n\t}\n\tused_output_names(): string[] {\n\t\tif (this.node.io.connections) {\n\t\t\tconst output_indices = lodash_uniq(\n\t\t\t\tthis.node.io.connections\n\t\t\t\t\t.output_connections()\n\t\t\t\t\t.map((connection) => (connection ? connection.output_index : null))\n\t\t\t);\n\t\t\tconst used_output_indices: number[] = [];\n\t\t\toutput_indices.forEach((index) => {\n\t\t\t\tif (lodash_isNumber(index)) {\n\t\t\t\t\tused_output_indices.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst used_output_names: string[] = used_output_indices.map((index) => {\n\t\t\t\treturn this.named_output_connection_points[index].name;\n\t\t\t});\n\t\t\treturn used_output_names;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['param_class'];\n};\n\nexport class ParamsAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class EventContainer extends TypedContainer<ContainableMap['EVENT']> {\n\tset_content(content: ContainableMap['EVENT']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\nexport abstract class BaseEventsController<E extends Event, T extends BaseEventNodeType> {\n\tprotected _nodes_by_graph_node_id: Map<string, T> = new Map();\n\tregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.set(node.graph_node_id, node);\n\t}\n\tunregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.delete(node.graph_node_id);\n\t}\n\tabstract accepts_event(event: Event): boolean;\n\tprocess(event: E, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._nodes_by_graph_node_id.forEach((node) => node.process_event(event, canvas, camera_node));\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LifeCycleController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _lifecycle_on_create_allowed: boolean = true;\n\n\ton_create_hook_allowed(): boolean {\n\t\treturn this.scene.loading_controller.loaded && this._lifecycle_on_create_allowed;\n\t}\n\n\ton_create_prevent(callback: () => void) {\n\t\tthis._lifecycle_on_create_allowed = false;\n\t\tcallback();\n\t\tthis._lifecycle_on_create_allowed = true;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LoadingController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_loading_state: boolean = true;\n\t_auto_updating: boolean = true;\n\t_first_object_loaded: boolean = false;\n\n\tmark_as_loading() {\n\t\tthis._set_loading_state(true);\n\t}\n\tasync mark_as_loaded() {\n\t\tawait this._set_loading_state(false);\n\t\t// POLY.notify_scene_loaded(this.scene);\n\t\t// this.cooker().block()\n\t\t// this.root().set_children_dirty_without_propagation()\n\t\t// this.cooker().unblock()\n\t}\n\tprivate async _set_loading_state(state: boolean) {\n\t\tthis._loading_state = state;\n\t\tawait this.set_auto_update(!this._loading_state);\n\t}\n\tget is_loading() {\n\t\treturn this._loading_state;\n\t}\n\tget loaded() {\n\t\treturn !this._loading_state;\n\t}\n\tget auto_updating() {\n\t\treturn this._auto_updating;\n\t} // _init_auto_update: ->\n\t// \tthis.set_auto_update(true)\n\tasync set_auto_update(new_state: boolean) {\n\t\tif (this._auto_updating !== new_state) {\n\t\t\tthis._auto_updating = new_state;\n\t\t\tif (this._auto_updating) {\n\t\t\t\t// if this.env_is_development()\n\t\t\t\t// \tthis.performance().start()\n\n\t\t\t\tconst root = this.scene.root;\n\t\t\t\tif (root) {\n\t\t\t\t\tawait root.process_queue();\n\t\t\t\t\t// const c = async () => {\n\t\t\t\t\t// \tawait root.process_queue();\n\t\t\t\t\t// };\n\t\t\t\t\t// setTimeout(c, 50);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if (callback != null) { callback(); }\n\t\t\t}\n\t\t} else {\n\t\t\t// if (callback != null) { callback(); }\n\t\t}\n\t}\n\n\ton_first_object_loaded() {\n\t\tif (!this._first_object_loaded) {\n\t\t\tthis._first_object_loaded = true;\n\n\t\t\tconst loader = document.getElementById('scene_loading_container');\n\t\t\tif (loader) {\n\t\t\t\tloader.parentElement?.removeChild(loader);\n\t\t\t}\n\t\t}\n\t}\n\n\t// on_all_objects_loaded() {\n\t// \t// POLY.viewer_loaders_manager().dipose_loaders()\n\t// }\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class ExpressionsController {\n\tprivate _params_by_id: Map<string, BaseParamType> = new Map();\n\tconstructor() {}\n\n\tregister_param(param: BaseParamType) {\n\t\tthis._params_by_id.set(param.graph_node_id, param);\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis._params_by_id.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\tregenerate_referring_expressions(node: BaseNodeType) {\n\t\tnode.name_controller.graph_node.set_successors_dirty(node);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {MissingExpressionReference} from '../../expressions/MissingReference';\nimport jsep from 'jsep';\nimport {MapUtils} from '../../../core/MapUtils';\n\n// type MissingExpressionReferenceById = Map<number, MissingExpressionReference>;\n// type MissingExpressionReferenceByIdByPath = Map<string, MissingExpressionReferenceById>;\n\nexport class MissingReferencesController {\n\tprivate references: Map<string, MissingExpressionReference[]> = new Map<string, MissingExpressionReference[]>();\n\n\tregister(param: BaseParamType, jsep_node: jsep.Expression, path_argument: string): MissingExpressionReference {\n\t\tconst missing_expression_reference = new MissingExpressionReference(param, path_argument);\n\n\t\tMapUtils.push_on_array_at_entry(this.references, param.graph_node_id, missing_expression_reference);\n\n\t\treturn missing_expression_reference;\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis.references.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t// MISSING REFERENCES\n\t//\n\t//\n\t// call this from node.create and node.rename\n\tcheck_for_missing_references(node: BaseNodeType) {\n\t\tthis._check_for_missing_references_for_node(node);\n\t\tfor (let param of node.params.all) {\n\t\t\tthis._check_for_missing_references_for_param(param);\n\t\t}\n\t}\n\tprivate _check_for_missing_references_for_node(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(node.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n\tprivate _check_for_missing_references_for_param(param: BaseParamType) {\n\t\tconst id = param.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(param.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import jsep from 'jsep';\nimport {CoreWalker} from '../../core/Walker';\n\nexport class MissingExpressionReference {\n\tconstructor(private param: BaseParamType /*, private jsep_node: jsep.Expression*/, public path: string) {\n\t\t// console.log(this.jsep_node, this.param); // TODO: typescript, to not have the missing ref\n\t}\n\n\tmatches_path(path: string): boolean {\n\t\tconst absolute = CoreWalker.make_absolute_path(this.param.node, this.path);\n\t\treturn absolute == path;\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.param.expression_controller?.update_from_method_dependency_name_change();\n\t}\n\n\tresolve_missing_dependencies() {\n\t\tconst input = this.param.raw_input_serialized;\n\t\tthis.param.set(this.param.default_value);\n\t\tthis.param.set(input);\n\t\t// parse_expression_and_update_dependencies()\n\t}\n}\n\n// export class ReferenceSearchResult {\n// \tpublic found_graph_nodes: CoreGraphNode[] = [];\n// \tpublic missing_paths: string[] = [];\n\n// \tconstructor() {}\n// \tset_found_graph_nodes(graph_nodes: CoreGraphNode[]) {\n// \t\tthis.found_graph_nodes = graph_nodes;\n// \t}\n// \tset_missing_paths(paths: string[]) {\n// \t\tthis.missing_paths = paths;\n// \t}\n// }\n","import {PolyScene} from '../PolyScene';\n\nimport {Object3D} from 'three/src/core/Object3D';\nimport lodash_concat from 'lodash/concat';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_compact from 'lodash/compact';\nimport {ObjectsManagerNode} from '../../nodes/manager/ObjectsManager';\nimport {CoreString} from '../../../core/String';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {BaseObjNodeType} from '../../nodes/obj/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class NodesController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_root!: ObjectsManagerNode;\n\t_node_context_signatures: Dictionary<boolean> = {};\n\t_instanciated_nodes_by_context_and_type: Dictionary<Dictionary<Dictionary<BaseNodeType>>> = {};\n\n\tinit() {\n\t\tthis._root = new ObjectsManagerNode(this.scene);\n\t\tthis._root.initialize_base_and_node();\n\t\t// this._root.set_scene(this.scene);\n\t\tthis._root.init_default_scene();\n\t}\n\n\tget root() {\n\t\treturn this._root;\n\t}\n\tobjects_from_mask(mask: string): Object3D[] {\n\t\tconst masks = mask.split(' ');\n\t\t// let geos = this.root().nodes_by_type('geo') as BaseNodeObj[];\n\t\tlet nodes = this.root.children() as BaseObjNodeType[];\n\t\tnodes = nodes.filter((node) => CoreString.matches_one_mask(node.name, masks));\n\t\tconst objects = nodes.map((geo) => geo.object);\n\t\treturn lodash_compact(objects);\n\t}\n\tclear() {\n\t\tconst children = this.root.children();\n\t\tfor (let child of children) {\n\t\t\tthis.root.children_controller?.remove_node(child);\n\t\t}\n\t\t// return children.forEach(child=> {\n\t\t// \treturn this.root().remove_node(child);\n\t\t// });\n\t}\n\n\tnode(path: string) {\n\t\tif (path === '/') {\n\t\t\treturn this.root;\n\t\t} else {\n\t\t\treturn this.root.node(path);\n\t\t}\n\t}\n\tall_nodes() {\n\t\tlet nodes: BaseNodeType[] = [this.root];\n\t\tlet current_parents: BaseNodeType[] = [this.root];\n\t\tlet cmptr = 0;\n\t\twhile (current_parents.length > 0 && cmptr < 10) {\n\t\t\tconst children = lodash_flatten(\n\t\t\t\tcurrent_parents.map((current_parent) => {\n\t\t\t\t\tif (current_parent.children_allowed()) {\n\t\t\t\t\t\treturn current_parent.children();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tnodes = lodash_concat(nodes, children);\n\t\t\tcurrent_parents = children;\n\t\t\tcmptr += 1;\n\t\t}\n\t\treturn lodash_flatten(nodes);\n\t}\n\n\treset_node_context_signatures() {\n\t\tthis._node_context_signatures = {};\n\t}\n\tregister_node_context_signature(node: BaseNodeType) {\n\t\tif (node.children_allowed() && node.children_controller) {\n\t\t\tthis._node_context_signatures[node.children_controller.node_context_signature()] = true;\n\t\t}\n\t}\n\tnode_context_signatures() {\n\t\treturn Object.keys(this._node_context_signatures)\n\t\t\t.sort()\n\t\t\t.map((s) => s.toLowerCase());\n\t}\n\n\tadd_to_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tthis._instanciated_nodes_by_context_and_type[context] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id] = node;\n\t}\n\n\tremove_from_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tdelete this._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id];\n\t}\n\n\tinstanciated_nodes(context: NodeContext, node_type: string) {\n\t\tconst nodes = [];\n\t\tif (this._instanciated_nodes_by_context_and_type[context]) {\n\t\t\tconst nodes_by_ids = this._instanciated_nodes_by_context_and_type[context][node_type];\n\t\t\tif (nodes_by_ids) {\n\t\t\t\tfor (let id of Object.keys(nodes_by_ids)) {\n\t\t\t\t\tnodes.push(nodes_by_ids[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t}\n}\n","import {Group} from 'three/src/objects/Group';\n// import lodash_isEqual from 'lodash/isEqual';\n// import lodash_map from 'lodash/map';\n\nimport {TypedBaseManagerNode} from './_Base';\n// import {CoreObject} from '../../../core/Object';\n// import {BaseNode} from '../_Base';\nimport {BaseObjNodeType} from '../obj/_Base';\n\n// import {BaseManagerObjNode} from '../obj/_BaseManager';\n// import {BaseCameraObjNodeClass} from '../obj/_BaseCamera';\n// import {BaseLightObjNodeClass} from '../obj/_BaseLight';\n\n// obj nodes\n// import {EventsObjNode} from '../obj/Events';\n// import {MaterialsObjNode} from '../obj/Materials';\n// import {FogObjNode} from '../obj/Fog';\nimport {GeoObjNode} from '../obj/Geo';\n\nimport {POLY} from '../../Poly';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {PolyScene} from '../../scene/PolyScene';\n// TODO:\n// ensure removing a node removes its content from the scene (spotlight?)\n\nimport {ObjNodeChildrenMap} from '../../poly/registers/Obj';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nclass ObjectsManagerParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ObjectsManagerParamsConfig();\n\nexport class ObjectsManagerNode extends TypedBaseManagerNode<ObjectsManagerParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'obj';\n\t}\n\t// children_context() {\n\t// \treturn NodeContext.OBJ;\n\t// }\n\n\tprivate _object: Group = new Group();\n\tprivate _queued_nodes_by_id: Dictionary<BaseObjNodeType> = {};\n\tprivate _queued_nodes_by_path: Dictionary<BaseObjNodeType> = {};\n\tprivate _expected_geo_nodes: Dictionary<GeoObjNode> = {};\n\t// private _loaded_geo_node_by_id: Dictionary<boolean> = {};\n\tprivate _process_queue_start: number = -1;\n\n\tprotected _children_controller_context = NodeContext.OBJ;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.flags.add_display();\n\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add.bind(this));\n\t\tthis.lifecycle.add_on_child_remove_hook(this._on_child_remove.bind(this));\n\t\t// this.flags.add_bypass({has_bypass_flag: false});\n\n\t\t// this.set_min_inputs_count(0);\n\t\t// this.set_max_inputs_count(0);\n\t}\n\t//@_object_uuid_by_node_graph_id = {}\n\n\tinit_default_scene() {\n\t\tthis._object.name = '_WORLD_';\n\t\tthis._scene.default_scene.add(this._object);\n\t}\n\n\t// TODO: is this method still used?\n\t// available_children_classes() {\n\t// \treturn POLY.Engine.Node.Obj;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tcreate_node<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as ObjNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseObjNodeType[];\n\t}\n\tnodes_by_type<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as ObjNodeChildrenMap[K][];\n\t}\n\n\tmultiple_display_flags_allowed() {\n\t\treturn true;\n\t}\n\n\tadd_to_queue(node: BaseObjNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._queued_nodes_by_id[id] == null) {\n\t\t\treturn (this._queued_nodes_by_id[id] = node);\n\t\t}\n\t}\n\n\tasync process_queue() {\n\t\tthis._queued_nodes_by_path = {};\n\t\tconst ids = Object.keys(this._queued_nodes_by_id);\n\t\tfor (let id of ids) {\n\t\t\tconst node = this._queued_nodes_by_id[id];\n\t\t\tdelete this._queued_nodes_by_id[id];\n\n\t\t\tconst full_path = `_____${node.render_order}__${node.full_path()}`;\n\t\t\t// we want to process managers, cameras, then lights, then everything else\n\t\t\t// so we add a prefix for those\n\t\t\t// if (this._is_node_manager(node)) {\n\t\t\t// \tfull_path = `/_____005_${full_path}`;\n\t\t\t// } else if (this._is_node_fog(node)) {\n\t\t\t// \tfull_path = `/_____002_${full_path}`;\n\t\t\t// } else if (this._is_node_camera(node)) {\n\t\t\t// \tfull_path = `/_____003_${full_path}`;\n\t\t\t// } else if (this._is_node_light(node)) {\n\t\t\t// \tfull_path = `/_____004_${full_path}`;\n\t\t\t// }\n\n\t\t\tthis._queued_nodes_by_path[full_path] = node;\n\t\t}\n\n\t\tconst promises = Object.keys(this._queued_nodes_by_path)\n\t\t\t.sort()\n\t\t\t.map((path_id) => {\n\t\t\t\tconst node = this._queued_nodes_by_path[path_id];\n\t\t\t\treturn this.update_object(node);\n\t\t\t});\n\n\t\tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t\tthis._process_queue_start = performance.now();\n\t\tPromise.all(promises).then(() => {\n\t\t\tPOLY.log(`SCENE LOADED '${this.scene.name}' in ${performance.now() - this._process_queue_start}`);\n\t\t\t// this.scene().performance().print()\n\n\t\t\t// do the update here if there are no objects to load\n\t\t\t// otherwise an empty scene will have a loader that never gets removed\n\t\t\t// if (Object.keys(this._expected_geo_nodes).length == 0) {\n\t\t\t// \tthis.update_on_all_objects_loaded();\n\t\t\t// }\n\t\t});\n\t}\n\n\tupdate_object(node: BaseObjNodeType) {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\tthis.add_to_queue(node);\n\t\t} else {\n\t\t\t// if (node.object) {\n\t\t\tthis.add_to_scene(node);\n\t\t\t// } else {\n\t\t\t// \t//if POLY.env != 'test'\n\t\t\t// \t// console.warn(`no object from ${node.full_path()} (error:${node.error_message()}) (${POLY.env})`);\n\t\t\t// }\n\t\t}\n\t}\n\n\t// _is_node_fog(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, FogObjNode);\n\t// }\n\t// _is_node_camera(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, BaseCameraObjNodeClass);\n\t// }\n\n\t// _is_node_event(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, EventsObjNode);\n\t// }\n\t// _is_node_mat(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, MaterialsObjNode);\n\t// }\n\n\t//\n\t//\n\t// OBJ PARENTING\n\t//\n\t//\n\n\t// TODO:\n\t// a OBJ node should be able to submit its group for transform\n\t// apart from the geometry. This would allow parenting to function\n\t// regardless if the underlying geo is valid or not\n\tget_parent_for_node(node: BaseObjNodeType) {\n\t\t// if (this._is_node_event(node) || this._is_node_mat(node)) {\n\t\t// \treturn null;\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\t// if (this._is_node_camera(node)) {\n\t\t\t// \treturn this.scene.display_scene;\n\t\t\t// } else {\n\t\t\tconst node_input = node.io.inputs.input(0);\n\t\t\tif (node_input) {\n\t\t\t\t//node_input.request_container (container)=>\n\t\t\t\t//\tcallback(container.object() || @_object)\n\t\t\t\treturn node_input.children_group;\n\t\t\t} else {\n\t\t\t\treturn this._object;\n\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tadd_to_scene(node: BaseObjNodeType): void {\n\t\t// if (this._is_node_fog(node)) {\n\t\t// console.log(\"fog\")\n\t\t// # TODO: ensure fog is removed if we set display or bypass flag\n\t\t// # TODO: ensure we get a warning if more than 1 fog\n\t\t// # TODO: why does it get added twice when its parameters are changed?\n\t\t// node.get_fog (fog)=>\n\t\t// \t@_scene.display_scene().fog = fog\n\t\t// #console.log(\"added fog\", node.object())\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\tconst parent_object = this.get_parent_for_node(node);\n\t\t\tif (parent_object) {\n\t\t\t\t// await node.params.eval_all().then((params_eval_key) => {\n\t\t\t\t// \tnode.request_container();\n\t\t\t\t// });\n\n\t\t\t\tif (node.used_in_scene) {\n\t\t\t\t\t// parent_object.add(node.object);\n\t\t\t\t\tnode.add_object_to_parent(parent_object);\n\t\t\t\t\t// await node.cook_controller.cook_main_without_inputs();\n\t\t\t\t} else {\n\t\t\t\t\tnode.remove_object_from_parent();\n\t\t\t\t\t// parent_object.remove(node.object);\n\t\t\t\t}\n\n\t\t\t\t// node.request_display_node();\n\t\t\t} else {\n\t\t\t\t// node.request_container().then(() => {\n\t\t\t\t// \t// force events and mat to cook and remove the dirty state\n\t\t\t\t// \t// ensure that pickers are cooked\n\t\t\t\t// \t// TODO: although there has been cases with two picker and\n\t\t\t\t// \t// one referencing the other with an expression, and that\n\t\t\t\t// \t// expression be evaluated before the second was created\n\t\t\t\t// \t// which led to an error. This should not happen\n\t\t\t\t// \tnode.children_controller.traverse_children((child) => child.set_dirty());\n\t\t\t\t// });\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_from_scene(node: BaseObjNodeType) {\n\t\tnode.remove_object_from_parent();\n\t}\n\tare_children_cooking(): boolean {\n\t\tconst children = this.children();\n\t\tfor (let child of children) {\n\t\t\tif (child.is_display_node_cooking()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync expected_loading_geo_nodes_by_id() {\n\t\tconst geo_nodes = this.nodes_by_type('geo');\n\t\tconst node_by_id: Dictionary<GeoObjNode> = {};\n\t\tfor (let geo_node of geo_nodes) {\n\t\t\tconst is_displayed = await geo_node.is_displayed();\n\t\t\tif (is_displayed) {\n\t\t\t\tnode_by_id[geo_node.graph_node_id] = geo_node;\n\t\t\t}\n\t\t}\n\t\treturn node_by_id;\n\t}\n\n\t// async notify_geo_loaded(geo_node: GeoObjNode) {\n\t// \tthis._loaded_geo_node_by_id = this._loaded_geo_node_by_id || {};\n\t// \tthis._loaded_geo_node_by_id[geo_node.graph_node_id] = true;\n\n\t// \tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t// \tif (this.scene) {\n\t// \t\tthis.scene.loading_controller.on_first_object_loaded();\n\n\t// \t\tif (lodash_isEqual(Object.keys(this._loaded_geo_node_by_id), Object.keys(this._expected_geo_nodes))) {\n\t// \t\t\tthis.update_on_all_objects_loaded();\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// update_on_all_objects_loaded() {\n\t// \tthis.scene.loading_controller.on_all_objects_loaded();\n\t// \t// this.scene.cube_cameras_controller.on_all_objects_loaded(); // TODO: typescript\n\t// }\n\n\tadd_to_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)->\n\t// \tobject = input_container.object()\n\n\t// \ttransformed_node.request_input_container 0, (parent_input_container)->\n\t// \t\tparent = parent_input_container.object()\n\t// \t\tparent.add(object)\n\n\tremove_from_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)=>\n\t// \tobject = input_container.object()\n\n\t// \tthis.get_parent_for_node transformed_node, (parent_object)=>\n\t// \t\tparent_object.add(object)\n\n\tprivate _on_child_add(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.update_object(node as BaseObjNodeType);\n\t\t}\n\t}\n\tprivate _on_child_remove(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.remove_from_scene(node as BaseObjNodeType);\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ManagerContainer} from '../../containers/Manager';\n\nexport class TypedBaseManagerNode<K extends NodeParamsConfig> extends TypedNode<'MANAGER', BaseManagerNodeType, K> {\n\tcontainer_controller: TypedContainerController<ManagerContainer> = new TypedContainerController<ManagerContainer>(\n\t\tthis,\n\t\tManagerContainer\n\t);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MANAGER;\n\t}\n\tnode_sibbling(name: string): BaseManagerNodeType | null {\n\t\treturn super.node_sibbling(name) as BaseManagerNodeType | null;\n\t}\n}\n\nexport type BaseManagerNodeType = TypedBaseManagerNode<any>;\nexport class BaseManagerNodeClass extends TypedBaseManagerNode<any> {}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ManagerContainer extends TypedContainer<ContainableMap['MANAGER']> {\n\tset_content(content: ContainableMap['MANAGER']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_clone from 'lodash/clone';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {PerformanceNode} from './PerformanceNode';\nimport {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport class CorePerformance {\n\tprivate _started: boolean = false;\n\t_start_time: number | null = 0;\n\t_previous_timestamp: number = 0;\n\t_nodes_cook_data: Dictionary<PerformanceNode> = {};\n\t_durations_by_name: Dictionary<number> = {};\n\t_durations_count_by_name: Dictionary<number> = {};\n\t// _performance_id: number;\n\n\t// constructor(){\n\t// \tconsole.log(\"creating perf\")\n\t// \tthis._performance_id = Math.random()\n\t// }\n\n\tprofile(name: string, method: (args?: any) => any) {\n\t\tconst start_time = performance.now();\n\t\tmethod();\n\t\tconst total_time = performance.now() - start_time;\n\t\tconsole.log(`${name}: ${total_time}`);\n\t}\n\n\tstart() {\n\t\tif (!this._started) {\n\t\t\tthis.reset();\n\t\t\tthis._started = true;\n\t\t\tthis._start_time = performance.now();\n\t\t\tthis._nodes_cook_data = {};\n\t\t\tthis._previous_timestamp = this._start_time;\n\t\t}\n\t}\n\t// else\n\t// \tthrow \"performance already started\"\n\tstop() {\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._started = false;\n\t\tthis._start_time = null;\n\t\tthis._durations_by_name = {};\n\t\tthis._durations_count_by_name = {};\n\t\tthis._nodes_cook_data = {};\n\t}\n\n\tget started(): boolean {\n\t\treturn this._started;\n\t}\n\n\trecord_node_cook_data(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._nodes_cook_data[id] == null) {\n\t\t\tthis._nodes_cook_data[id] = new PerformanceNode(node);\n\t\t}\n\t\tthis._nodes_cook_data[id].update_cook_data();\n\t}\n\n\trecord(name: string) {\n\t\tif (!this.started) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tconst current_timestamp = performance.now();\n\n\t\tif (this._durations_by_name[name] == null) {\n\t\t\tthis._durations_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_by_name[name] += current_timestamp - this._previous_timestamp;\n\t\tif (this._durations_count_by_name[name] == null) {\n\t\t\tthis._durations_count_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_count_by_name[name] += 1;\n\n\t\treturn (this._previous_timestamp = current_timestamp);\n\t}\n\n\tprint() {\n\t\tthis.print_node_cook_data();\n\t\tthis.print_recordings();\n\t}\n\n\tprint_node_cook_data() {\n\t\tlet performance_nodes = Object.values(this._nodes_cook_data);\n\t\tperformance_nodes = lodash_sortBy(performance_nodes, (performance_node) => -performance_node.cook_time_total);\n\n\t\tconst print_objects = performance_nodes.map((performance_node) => performance_node.print_object());\n\n\t\tconsole.log('--------------- NODES COOK TIME -----------');\n\n\t\tconst table_entries = [];\n\t\tconst sorted_print_objects = lodash_sortBy(print_objects, (print_object) => -print_object['cook_time_total']);\n\t\tfor (let print_object of sorted_print_objects) {\n\t\t\ttable_entries.push(print_object);\n\t\t}\n\n\t\tconsole.table(table_entries);\n\n\t\treturn print_objects;\n\t}\n\n\tprint_recordings() {\n\t\t// const start_time = this._start_time\n\t\tconst durations_by_name = lodash_clone(this._durations_by_name);\n\t\tconst durations_count_by_name = lodash_clone(this._durations_count_by_name);\n\t\t//this.reset()\n\n\t\tconst durations = [];\n\t\t//durations_by_name = {}\n\t\tconst names_by_duration: Dictionary<string[]> = {};\n\n\t\tfor (let name of Object.keys(durations_by_name)) {\n\t\t\tconst duration = durations_by_name[name];\n\n\t\t\t//durations_by_name[name] = duration\n\t\t\tdurations.push(duration);\n\t\t\tif (names_by_duration[duration] == null) {\n\t\t\t\tnames_by_duration[duration] = [];\n\t\t\t}\n\t\t\tnames_by_duration[duration].push(name);\n\t\t}\n\n\t\tdurations.sort((a, b) => a - b);\n\t\tconst sorted_durations = lodash_uniq(durations);\n\n\t\tconsole.log('--------------- PERF RECORDINGS -----------');\n\t\t//console.log(\"sorted_durations\", sorted_durations)\n\t\t// let previous_duration = start_time\n\t\tconst table_entries = [];\n\t\tfor (let duration of sorted_durations) {\n\t\t\tconst names = names_by_duration[duration];\n\t\t\tfor (let name of names) {\n\t\t\t\tconst count = durations_count_by_name[name];\n\t\t\t\tconst duration_per_iteration = duration / count;\n\n\t\t\t\tconst entry = {duration, name, count, duration_per_iteration};\n\t\t\t\ttable_entries.push(entry);\n\t\t\t}\n\n\t\t\t// previous_duration = duration\n\t\t}\n\n\t\tconsole.table(table_entries);\n\t\treturn table_entries;\n\t}\n}\n","import {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport interface PerformancePrintObject {\n\tfull_path: string;\n\tcooks_count: number;\n\tcook_time_total: number;\n\tcook_time_per_iteration: number;\n\tcook_time_total_with_inputs: number;\n\tcook_time_total_with_inputs_per_iteration: number;\n\tcook_time_total_params: number;\n\tcook_time_total_params_per_iteration: number;\n}\n\nexport class PerformanceNode {\n\t_cooks_count: number = 0;\n\t_cook_time_total: number = 0;\n\t_cook_time_total_with_inputs: number = 0;\n\t_cook_time_total_params: number = 0;\n\tconstructor(private _node: BaseNodeType) {}\n\n\tupdate_cook_data(): void {\n\t\tthis._cooks_count += 1;\n\t\tthis._cook_time_total += this._node.cook_controller.cook_time;\n\t\tthis._cook_time_total_with_inputs += this._node.cook_controller.cook_time_with_inputs;\n\t\tthis._cook_time_total_params += this._node.cook_controller.cook_time_params;\n\t}\n\n\tget cook_time_total(): number {\n\t\treturn this._cook_time_total;\n\t}\n\tget cook_time_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tget cook_time_total_with_inputs(): number {\n\t\treturn this._cook_time_total_with_inputs;\n\t}\n\tget cook_time_total_with_inputs_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_with_inputs / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cook_time_total_params(): number {\n\t\treturn this._cook_time_total_params;\n\t}\n\tget cook_time_total_params_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_params / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\n\tprint_object(): PerformancePrintObject {\n\t\treturn {\n\t\t\tfull_path: this._node.full_path(),\n\t\t\tcooks_count: this.cooks_count,\n\t\t\tcook_time_total: this.cook_time_total,\n\t\t\tcook_time_per_iteration: this.cook_time_per_iteration,\n\t\t\tcook_time_total_with_inputs: this.cook_time_total_with_inputs,\n\t\t\tcook_time_total_with_inputs_per_iteration: this.cook_time_total_with_inputs_per_iteration,\n\t\t\tcook_time_total_params: this.cook_time_total_params,\n\t\t\tcook_time_total_params_per_iteration: this.cook_time_total_params_per_iteration,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {SceneEvent} from '../../poly/SceneEvent';\n\ntype FrameRange = Number2;\n\n// ensure that FPS remains a float\n// to have divisions and multiplications also give a float\nconst FPS = 60.0;\n\nexport class TimeController {\n\tprotected self: PolyScene = (<unknown>this) as PolyScene;\n\tprivate _frame: number = 1;\n\tprivate _time: number = 0;\n\tprivate _prev_performance_now: number = 0;\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _frame_range: FrameRange = [1, 600];\n\tprivate _frame_range_locked: [boolean, boolean] = [true, true];\n\tprivate _playing: boolean = false;\n\n\tconstructor(private scene: PolyScene) {\n\t\tthis._graph_node = new CoreGraphNode(scene, 'time controller');\n\t\t// this._graph_node.set_scene(this.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tget frame(): number {\n\t\treturn this._frame;\n\t}\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\tget frame_range(): FrameRange {\n\t\treturn this._frame_range;\n\t}\n\tget frame_range_locked(): [boolean, boolean] {\n\t\treturn this._frame_range_locked;\n\t}\n\tset_frame_range(start_frame: number, end_frame: number) {\n\t\tthis._frame_range[0] = Math.floor(start_frame);\n\t\tthis._frame_range[1] = Math.floor(end_frame);\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_frame_range_locked(start_locked: boolean, end_locked: boolean) {\n\t\tthis._frame_range_locked[0] = start_locked;\n\t\tthis._frame_range_locked[1] = end_locked;\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\t// set_fps(fps: number) {\n\t// \tthis._fps = Math.floor(fps);\n\t// \tthis._frame_interval = 1000 / this._fps;\n\t// \tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t// }\n\tset_time(time: number, update_frame = true) {\n\t\tif (time != this._time) {\n\t\t\tthis._time = time;\n\n\t\t\tif (update_frame) {\n\t\t\t\tconst new_frame = Math.floor(this._time * FPS);\n\t\t\t\tthis._frame = new_frame;\n\t\t\t}\n\n\t\t\t// update time dependents\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_UPDATED);\n\t\t\tthis.scene.uniforms_controller.update_time_dependent_uniform_owners();\n\n\t\t\t// we block updates here, so that dependent nodes only cook once\n\t\t\tthis.scene.cooker.block();\n\t\t\tthis.graph_node.set_successors_dirty();\n\t\t\tthis.scene.cooker.unblock();\n\t\t}\n\t}\n\n\tset_frame(frame: number, update_time = true) {\n\t\tif (frame != this._frame) {\n\t\t\tframe = this._ensure_frame_within_bounds(frame);\n\t\t\tif (frame != this._frame) {\n\t\t\t\tthis._frame = frame;\n\t\t\t\tif (update_time) {\n\t\t\t\t\tthis.set_time(this._frame / FPS, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time_if_playing() {\n\t\tif (this._playing) {\n\t\t\tif (!this.scene.root.are_children_cooking()) {\n\t\t\t\tthis.increment_time();\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time() {\n\t\tconst performance_now = performance.now();\n\t\tconst delta = (performance_now - this._prev_performance_now) / 1000.0;\n\t\tconst new_time = this._time + delta;\n\t\tthis._prev_performance_now = performance_now;\n\t\tthis.set_time(new_time);\n\t}\n\n\t_ensure_frame_within_bounds(frame: number): number {\n\t\tif (this._frame_range_locked[0] && frame < this._frame_range[0]) {\n\t\t\treturn this._frame_range[1];\n\t\t}\n\t\tif (this._frame_range_locked[1] && frame > this._frame_range[1]) {\n\t\t\treturn this._frame_range[0];\n\t\t}\n\t\treturn frame;\n\t}\n\tget playing() {\n\t\treturn this._playing === true;\n\t}\n\tpause() {\n\t\tif (this._playing == true) {\n\t\t\tthis._playing = false;\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\tplay() {\n\t\tif (this._playing !== true) {\n\t\t\tthis._playing = true;\n\t\t\tthis._prev_performance_now = performance.now();\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\ttoggle_play_pause() {\n\t\tif (this.playing) {\n\t\t\tthis.pause();\n\t\t} else {\n\t\t\tthis.play();\n\t\t}\n\t}\n}\n","export enum SceneEvent {\n\tFRAME_RANGE_UPDATED = 'scene_frame_range_updated',\n\tFRAME_UPDATED = 'scene_frame_updated',\n\tPLAY_STATE_UPDATED = 'scene_play_state_updated',\n}\n","import {PolyScene} from '../PolyScene';\nimport {NodeSerializer} from '../../../engine/nodes/utils/Serializer';\n\nexport class PolySceneSerializer {\n\tconstructor(private scene: PolyScene) {}\n\n\tto_json(include_node_param_components: boolean = false) {\n\t\tconst nodes_by_graph_node_id: Dictionary<object> = {};\n\t\tconst params_by_graph_node_id: Dictionary<object> = {};\n\n\t\tfor (let node of this.scene.nodes_controller.all_nodes()) {\n\t\t\tconst node_serializer = new NodeSerializer(node);\n\t\t\tnodes_by_graph_node_id[node.graph_node_id] = node_serializer.to_json(include_node_param_components);\n\n\t\t\tconst params = node.params.all; //lodash_compact(lodash_concat( lodash_values(node.params()), lodash_values(node.spare_params()) ));\n\t\t\tfor (let param of params) {\n\t\t\t\tparams_by_graph_node_id[param.graph_node_id] = param.to_json();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnodes_by_graph_node_id,\n\t\t\tparams_by_graph_node_id,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ntype IUniforms = Dictionary<IUniform>;\nexport interface IUniformsWithTime extends IUniforms {\n\ttime: IUniform;\n}\nexport interface IUniformsWithResolution extends IUniforms {\n\tresolution: {\n\t\tvalue: Vector2Like;\n\t};\n}\n\nexport class UniformsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _time_dependent_uniform_owners: Dictionary<IUniformsWithTime> = {}; //new Map()\n\tprivate _time_dependent_uniform_owners_ids: string[] | null = null;\n\n\tprivate _resolution: Vector2 = new Vector2(1, 1);\n\tprivate _resolution_dependent_uniform_owners: Dictionary<IUniformsWithResolution> = {};\n\tprivate _resolution_dependent_uniform_owners_ids: string[] = [];\n\n\t// time\n\tadd_time_dependent_uniform_owner(id: string, uniforms: IUniformsWithTime) {\n\t\tthis._time_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tremove_time_dependent_uniform_owner(id: string) {\n\t\tdelete this._time_dependent_uniform_owners[id];\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_time_dependent_uniform_owners_ids() {\n\t\tthis._time_dependent_uniform_owners_ids = Object.keys(this._time_dependent_uniform_owners);\n\t}\n\tpublic update_time_dependent_uniform_owners() {\n\t\tconst time = this.scene.time;\n\t\tif (this._time_dependent_uniform_owners_ids) {\n\t\t\tfor (let id of this._time_dependent_uniform_owners_ids) {\n\t\t\t\tconst uniforms = this._time_dependent_uniform_owners[id];\n\t\t\t\tuniforms.time.value = time;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolution\n\tadd_resolution_dependent_uniform_owner(id: string, uniforms: IUniformsWithResolution) {\n\t\tthis._resolution_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t\tif (this._resolution) {\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tremove_resolution_dependent_uniform_owner(id: string) {\n\t\tdelete this._resolution_dependent_uniform_owners[id];\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_resolution_dependent_uniform_owners_ids() {\n\t\tthis._resolution_dependent_uniform_owners_ids = Object.keys(this._resolution_dependent_uniform_owners);\n\t}\n\tupdate_resolution_dependent_uniform_owners(resolution: Vector2) {\n\t\tthis._resolution.copy(resolution);\n\t\tfor (let id of this._resolution_dependent_uniform_owners_ids) {\n\t\t\tconst uniforms = this._resolution_dependent_uniform_owners[id];\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tupdate_resolution_dependent_uniforms(uniforms: IUniformsWithResolution) {\n\t\tuniforms.resolution.value.x = this._resolution.x * window.devicePixelRatio;\n\t\tuniforms.resolution.value.y = this._resolution.y * window.devicePixelRatio;\n\t}\n}\n","import {POLY} from '../../Poly';\n\n// import {PolyScene} from '../PolyScene';\n\nexport class WebGLController {\n\tconstructor() {}\n\n\t_require_webgl2: boolean = false;\n\n\trequire_webgl2() {\n\t\treturn this._require_webgl2;\n\t}\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t\tPOLY.renderers_controller.set_require_webgl2();\n\t\t}\n\t}\n}\n","import {CopRegister} from './Cop';\nimport {EventRegister} from './Event';\nimport {GlRegister} from './Gl';\nimport {MatRegister} from './Mat';\nimport {ObjRegister} from './Obj';\nimport {SopRegister} from './Sop';\n\nimport {POLY} from '../../Poly';\n\nexport class AllRegister {\n\tstatic run() {\n\t\tCopRegister.run(POLY);\n\t\tEventRegister.run(POLY);\n\t\tGlRegister.run(POLY);\n\t\tMatRegister.run(POLY);\n\t\tObjRegister.run(POLY);\n\t\tSopRegister.run(POLY);\n\t}\n}\n","import {CATEGORY_COP} from './Category';\n\nimport {BuilderCopNode} from '../../nodes/cop/Builder';\nimport {EnvMapCopNode} from '../../nodes/cop/EnvMap';\nimport {FileCopNode} from '../../nodes/cop/File';\nimport {NullCopNode} from '../../nodes/cop/Null';\nimport {SwitchCopNode} from '../../nodes/cop/Switch';\n\nexport interface CopNodeChildrenMap {\n\tbuilder: BuilderCopNode;\n\tenv_map: EnvMapCopNode;\n\tfile: FileCopNode;\n\tnull: NullCopNode;\n\tswitch: SwitchCopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class CopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(BuilderCopNode, CATEGORY_COP.ADVANCED);\n\t\tpoly.register_node(EnvMapCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(FileCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(NullCopNode, CATEGORY_COP.MISC);\n\t\tpoly.register_node(SwitchCopNode, CATEGORY_COP.MISC);\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {RGBAFormat} from 'three/src/constants';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {NearestFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {HalfFloatType} from 'three/src/constants';\nimport {FloatType} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {ClampToEdgeWrapping} from 'three/src/constants';\nimport {Camera} from 'three/src/cameras/Camera';\n\n// import NodeBase from '../_Base'\n\n// import Container from '../../Container/Texture'\n// import {CoreImage} from '../../../Core/Image'\n\nimport {TypedCopNode} from './_Base';\n\n// import { GlobalsGeometryHandler } from \"src/Engine/Node/Gl/Assembler/Globals/Geometry\";\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerTexture} from '../gl/code/assemblers/textures/Texture';\n\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\n\nconst PASS_THROUGH_SHADER = `\nvoid main()\t{\n\tgl_Position = vec4( position, 1.0 );\n}\n`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreSleep} from '../../../core/Sleep';\nclass BuilderCopParamsConfig extends NodeParamsConfig {\n\tresolution = ParamConfig.VECTOR2([256, 256]);\n}\n\nconst ParamsConfig = new BuilderCopParamsConfig();\n\nexport class BuilderCopNode extends TypedCopNode<BuilderCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'builder';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<\n\t\tShaderAssemblerTexture\n\t> = this._create_assembler_controller();\n\n\tprivate _create_assembler_controller() {\n\t\tconst globals_handler = new GlobalsGeometryHandler();\n\t\tconst assembler_controller = new GlAssemblerController<ShaderAssemblerTexture>(this, ShaderAssemblerTexture);\n\t\tassembler_controller.set_assembler_globals_handler(globals_handler);\n\t\treturn assembler_controller;\n\t}\n\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tprivate _texture_mesh: Mesh = new Mesh(new PlaneBufferGeometry(2, 2));\n\tprivate _fragment_shader: string | undefined;\n\tprivate _uniforms: IUniforms | undefined;\n\tprivate _texture_material: ShaderMaterial = new ShaderMaterial({\n\t\tuniforms: {},\n\t\tvertexShader: PASS_THROUGH_SHADER,\n\t\tfragmentShader: '',\n\t});\n\tprivate _texture_scene: Scene = new Scene();\n\tprivate _texture_camera: Camera = new Camera();\n\tprivate _render_target: WebGLRenderTarget | undefined;\n\tprivate _renderer: WebGLRenderer | undefined;\n\tprivate _pixelBuffer: Float32Array | undefined;\n\t// private _assembler: ShaderAssemblerTexture;\n\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_node() {\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t\tthis._texture_mesh.material = this._texture_material;\n\t\tthis._texture_scene.add(this._texture_mesh);\n\t\tthis._texture_camera.position.z = 1;\n\n\t\t// this._init_common_shader_builder(ShaderAssemblerTexture, {\n\t\t// \thas_display_flag: true\n\t\t// });\n\t\t// this.set_inputs_count_to_zero();\n\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_reset_if_resolution_changed',\n\t\t\tthis._reset_if_resolution_changed.bind(this)\n\t\t);\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis._render_target = this._create_render_target();\n\t\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\t});\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tprivate _reset_if_resolution_changed(trigger?: CoreGraphNode) {\n\t\tif (trigger && trigger.graph_node_id == this.p.resolution.graph_node_id) {\n\t\t\tthis._reset();\n\t\t}\n\t}\n\tprivate _reset() {\n\t\tthis._render_target = this._create_render_target();\n\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\tthis._pixelBuffer = this._create_pixel_buffer();\n\t}\n\tprivate _create_pixel_buffer() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\t\treturn new Float32Array(width * height * 4);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\t\t// await this.assembler_controller.assign_uniform_values();\n\n\t\tthis.render_on_target();\n\t}\n\n\tshaders_by_name() {\n\t\treturn {\n\t\t\tfragment: this._fragment_shader,\n\t\t};\n\t}\n\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\t// && !this.pv.locked){\n\t\t\t// this._texture_material = undefined;\n\t\t\tawait this.run_assembler();\n\t\t\t// const fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\t// const uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\t// if (fragment_shader && uniforms) {\n\t\t\t// \t// await this.eval_params(this._new_params);\n\t\t\t// \tthis._fragment_shader = fragment_shader;\n\t\t\t// \tthis._uniforms = uniforms;\n\t\t\t// } else {\n\t\t\t// \tthrow 'STOP';\n\t\t\t// }\n\t\t\tthis.assembler_controller.post_compile();\n\t\t}\n\t}\n\tprivate async run_assembler() {\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node allowed');\n\t\t\treturn;\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tthis.assembler_controller.assembler.set_root_nodes([output_node]);\n\n\t\t\t// main compilation\n\t\t\tawait this.assembler_controller.assembler.update_fragment_shader();\n\n\t\t\t// receives fragment and uniforms\n\t\t\tconst fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\tconst uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\tif (fragment_shader && uniforms) {\n\t\t\t\tthis._fragment_shader = fragment_shader;\n\t\t\t\tthis._uniforms = uniforms;\n\t\t\t}\n\n\t\t\t// TODO: remove this once the scene knows how to re-render\n\t\t\t// the render target if it is .uniforms_time_dependent()\n\t\t\tif (this.assembler_controller.assembler.uniforms_time_dependent()) {\n\t\t\t\tthis.states.time_dependent.force_time_dependent();\n\t\t\t} else {\n\t\t\t\tthis.states.time_dependent.unforce_time_dependent();\n\t\t\t}\n\t\t}\n\n\t\tif (this._fragment_shader && this._uniforms) {\n\t\t\tthis._texture_material.fragmentShader = this._fragment_shader;\n\t\t\tthis._texture_material.uniforms = this._uniforms;\n\t\t\tthis._texture_material.needsUpdate = true;\n\t\t\tthis._texture_material.uniforms.resolution = {\n\t\t\t\tvalue: this.pv.resolution,\n\t\t\t};\n\t\t}\n\n\t\t// this._compile_required = false;\n\t}\n\n\tprivate _create_renderer(render_target: WebGLRenderTarget) {\n\t\tconst renderer = new WebGLRenderer({antialias: true});\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\t// document.body.appendChild( renderer.domElement )\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setRenderTarget(render_target);\n\n\t\treturn renderer;\n\t}\n\n\tasync render_on_target() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\n\t\t// var passThruUniforms = {\n\t\t// \tpassThruTexture: { value: null }\n\t\t// };\n\n\t\tif (!(this._renderer && this._render_target)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._renderer.clear();\n\t\tthis._renderer.render(this._texture_scene, this._texture_camera);\n\t\t// renderer.setClearColor( 0x000000 ) // cancels the bg color\n\n\t\t//read the pixel\n\t\tthis._pixelBuffer = this._pixelBuffer || this._create_pixel_buffer();\n\t\tthis._renderer.readRenderTargetPixels(this._render_target, 0, 0, width, height, this._pixelBuffer);\n\n\t\t// renderer.setRenderTarget( null );\n\n\t\t// var pixelBuffer2 = new Uint8Array( width * height * 4 );\n\t\t// var pixelBuffer2 = Uint8Array.from(pixelBuffer)\n\n\t\t// be careful about the type FloatType\n\t\t// as this may require webgl extensions\n\t\t// see https://threejs.org/docs/#api/en/textures/DataTexture\n\t\tconst texture = new DataTexture(this._pixelBuffer, width, height, RGBAFormat, FloatType);\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// this._texture.needsUpdate = true;\n\n\t\tawait CoreSleep.sleep(2000);\n\n\t\tif (texture) {\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\n\t\t// this.set_texture(this._texture);\n\t\t// this.cook_controller.end_cook();\n\t}\n\n\tprivate _create_render_target() {\n\t\tconst wrapS = ClampToEdgeWrapping;\n\t\tconst wrapT = ClampToEdgeWrapping;\n\n\t\tconst minFilter = NearestFilter;\n\t\tconst magFilter = NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget(this.pv.resolution.x, this.pv.resolution.y, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false,\n\t\t});\n\t\treturn renderTarget;\n\t}\n\n\t// create_material(fragment_shader:string, uniforms:IUniforms) {\n\t// \tvar material = new ShaderMaterial({\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: PASS_THROUGH_SHADER,\n\t// \t\tfragmentShader: fragment_shader\n\t// \t});\n\n\t// \t// addResolutionDefine( material );\n\n\t// \treturn material;\n\t// }\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class TextureContainer extends TypedContainer<ContainableMap['TEXTURE']> {\n\t// _content: Texture;\n\tset_content(content: ContainableMap['TEXTURE']) {\n\t\tsuper.set_content(content);\n\t}\n\n\t// set_texture(texture: Texture){\n\t// \tif (this._content != null) {\n\t// \t\tthis._content.dispose();\n\t// \t}\n\t// \tthis.set_content(texture);\n\t// }\n\ttexture(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content_cloned(): ContainableMap['TEXTURE'] | undefined {\n\t\tconsole.log('clone', this._content);\n\t\tconst texture = this._content?.clone();\n\t\tif (texture) {\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t\treturn texture;\n\t}\n\n\tobject() {\n\t\treturn this.texture();\n\t}\n\n\tinfos() {\n\t\tif (this._content != null) {\n\t\t\treturn [this._content];\n\t\t}\n\t}\n\tresolution(): [number, number] {\n\t\tif (this._content) {\n\t\t\tif (this._content.image) {\n\t\t\t\treturn [this._content.image.width, this._content.image.height];\n\t\t\t}\n\t\t}\n\t\treturn [-1, -1];\n\t}\n}\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// export interface BypassOptions {\n// \thas_bypass_flag?: boolean;\n// }\n\nexport class BypassFlag extends BaseFlag {\n\tprotected _state: boolean = false;\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n\t\tthis.node.set_dirty();\n\t}\n}\n\n// export function Bypass<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\t_has_bypass_flag: boolean = true;\n// \t\t_bypass_flag: boolean = false;\n\n// \t\t_init_bypass_flag(options: BypassOptions = {}) {\n// \t\t\tif (options['has_bypass_flag'] == null) {\n// \t\t\t\toptions['has_bypass_flag'] = true;\n// \t\t\t}\n\n// \t\t\tthis._has_bypass_flag = options['has_bypass_flag'];\n// \t\t\tthis._bypass_flag = false;\n// \t\t}\n\n// \t\thas_bypass_flag(): boolean {\n// \t\t\treturn this._has_bypass_flag;\n// \t\t}\n\n// \t\tis_bypassed(): boolean {\n// \t\t\treturn this._bypass_flag;\n// \t\t}\n\n// \t\tset_bypass_flag(state: boolean) {\n// \t\t\tif (state == null) {\n// \t\t\t\tstate = true;\n// \t\t\t}\n// \t\t\tif (state !== this._bypass_flag) {\n// \t\t\t\tthis._bypass_flag = state;\n// \t\t\t\tthis.self.emit('bypass_flag_update');\n// \t\t\t\tthis.self.set_dirty();\n// \t\t\t\t// this.post_set_bypass_flag()\n// \t\t\t}\n// \t\t}\n\n// \t\t// post_process_container_request_as_bypassed(input_node: BaseNode){}\n// \t\t// post_set_bypass_flag(){}\n\n// \t\ttoggle_bypass_flag() {\n// \t\t\tthis.set_bypass_flag(!this.is_bypassed());\n// \t\t}\n// \t};\n// }\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\nexport class DisplayFlag extends BaseFlag {\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n\t\t// this.node.set_dirty();\n\t}\n}\n","import {ParamTypeToConnectionPointTypeMap} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {BaseNamedConnectionPointType, TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\n// import {ParamValue} from '../../../params/types/ParamValue';\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamValueToDefaultConverter} from '../../utils/params/ParamValueToDefaultConverter';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValueSerialized} from '../../../params/types/ParamInitValueSerialized';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\n\nexport class GlNodeSpareParamsController {\n\tprivate _allow_inputs_created_from_params: boolean = true;\n\tprivate _inputless_param_names: string[] | undefined;\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tdisallow_inputs_created_from_params() {\n\t\tthis._allow_inputs_created_from_params = false;\n\t}\n\n\tinitialize_node() {\n\t\tthis.node.params.set_post_create_params_hook(this.create_inputs_from_params.bind(this));\n\t}\n\n\tcreate_inputs_from_params() {\n\t\tif (!this._allow_inputs_created_from_params) {\n\t\t\treturn;\n\t\t}\n\t\tconst connections: BaseNamedConnectionPointType[] = [];\n\t\tfor (let param_name of this.node.params.names) {\n\t\t\tlet add_input = true;\n\t\t\tif (\n\t\t\t\tthis._inputless_param_names &&\n\t\t\t\tthis._inputless_param_names.length > 0 &&\n\t\t\t\tthis._inputless_param_names.includes(param_name)\n\t\t\t) {\n\t\t\t\tadd_input = false;\n\t\t\t}\n\t\t\tif (add_input) {\n\t\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\t\tif (param && !param.parent_param) {\n\t\t\t\t\t\tconst connection_type = ParamTypeToConnectionPointTypeMap[param.type];\n\t\t\t\t\t\tif (connection_type) {\n\t\t\t\t\t\t\tconst connection = new TypedNamedConnectionPoint(param.name, connection_type);\n\t\t\t\t\t\t\tconnections.push(connection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.node.io.inputs.set_named_input_connection_points(connections);\n\t}\n\n\tset_inputless_param_names(names: string[]) {\n\t\treturn (this._inputless_param_names = names);\n\t}\n\n\tcreate_spare_parameters() {\n\t\tconst raw_input_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst default_value_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst current_param_names: string[] = this.node.params.spare_names;\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\tfor (let param_name of current_param_names) {\n\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\tif (param) {\n\t\t\t\t\traw_input_serialized_by_param_name.set(param_name, param.raw_input_serialized);\n\t\t\t\t\tdefault_value_serialized_by_param_name.set(param_name, param.default_value_serialized);\n\t\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let connection_point of this.node.io.inputs.named_input_connection_points) {\n\t\t\tconst param_name = connection_point.name;\n\t\t\tconst param_type: ParamType = connection_point.param_type;\n\t\t\tlet init_value = connection_point.init_value;\n\t\t\t// let raw_input: ParamInitValueSerialized= null\n\n\t\t\t// const raw_input = raw_input_serialized_by_param_name.get(param_name);\n\t\t\tconst last_param_init_value = default_value_serialized_by_param_name.get(param_name);\n\t\t\t// if (last_param_raw_input != null && last_param_init_value != null) {\n\t\t\t// init_value = ParamValueToDefaultConverter.from_value(param_type, last_param_raw_input);\n\t\t\t// if (init_value == null) {\n\t\t\tconst default_value_from_name = this.node.gl_input_default_value(param_name);\n\n\t\t\t// TODO: this should really store the largest set value\n\t\t\t// (as in the ones with the most components)\n\t\t\t// so that for an Add Gl Node, if I set a vec4 to [1,2,3,4]\n\t\t\t// and then set an input type, which will transform the param to a float\n\t\t\t// it will have a value of 1.\n\t\t\t// But if I then set it to a vec4 again, it will remember [1,2,3,4]\n\t\t\tif (default_value_from_name != null) {\n\t\t\t\tinit_value = default_value_from_name;\n\t\t\t} else {\n\t\t\t\tif (last_param_init_value != null) {\n\t\t\t\t\tinit_value = last_param_init_value;\n\t\t\t\t} else {\n\t\t\t\t\tinit_value = connection_point.init_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lodash_isArray(connection_point.init_value) && lodash_isNumber(init_value)) {\n\t\t\t\tconst array = new Array(connection_point.init_value.length) as Number2;\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] = init_value;\n\t\t\t\t}\n\t\t\t\tinit_value = array;\n\t\t\t}\n\n\t\t\tif (init_value != null) {\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: lodash_clone(init_value as any),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tspare: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (!this.node.scene.loading_controller.is_loading) {\n\t\t\tthis.node.params.update_params(params_update_options);\n\n\t\t\tfor (let spare_param of this.node.params.spare) {\n\t\t\t\tif (!spare_param.parent_param) {\n\t\t\t\t\tconst raw_input = raw_input_serialized_by_param_name.get(spare_param.name);\n\t\t\t\t\tif (raw_input) {\n\t\t\t\t\t\tspare_param.set(raw_input as any);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {SceneJsonExporter} from './Scene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {JsonExportDispatcher} from './Dispatcher';\nimport {ParamJsonExporterData} from './Param';\nimport {ParamType} from '../../../poly/ParamType';\n\ninterface NamedInputData {\n\tname: string;\n\tnode: string;\n\toutput: string;\n}\ntype IndexedInputData = string | null;\nexport type InputData = NamedInputData | IndexedInputData;\n\ninterface FlagsData {\n\tbypass?: boolean;\n\tdisplay?: boolean;\n}\n\nexport interface NodeJsonExporterData {\n\ttype: string;\n\tnodes: Dictionary<NodeJsonExporterData>;\n\tchildren_context: NodeContext;\n\tparams?: Dictionary<ParamJsonExporterData<ParamType>>;\n\tinputs?: InputData[];\n\tselection?: string[];\n\tflags?: FlagsData;\n\toverride_clonable_state: boolean;\n}\n\nexport interface NodeJsonExporterUIData {\n\tpos?: Number2;\n\tcomment?: string;\n\tnodes: Dictionary<NodeJsonExporterUIData>;\n}\n\nexport class NodeJsonExporter<T extends BaseNodeType> {\n\tprivate _data: NodeJsonExporterData | undefined; // = {} as NodeJsonExporterData;\n\tconstructor(protected _node: T) {}\n\n\tdata(): NodeJsonExporterData {\n\t\tif (!this.is_root()) {\n\t\t\tthis._node.scene.nodes_controller.register_node_context_signature(this._node);\n\t\t}\n\t\tthis._data = {\n\t\t\ttype: this._node.type,\n\t\t} as NodeJsonExporterData;\n\n\t\t// const required_imports = this._node.required_imports()\n\t\t// if(required_imports){\n\t\t// \tthis._data['required_imports'] = required_imports\n\t\t// }\n\n\t\tconst nodes_data = this.nodes_data();\n\t\tif (Object.keys(nodes_data).length > 0) {\n\t\t\tthis._data['nodes'] = nodes_data;\n\n\t\t\t// required by the Store::Scene::Exporter.rb\n\t\t\tconst context = this._node.children_controller?.context;\n\t\t\tif (context) {\n\t\t\t\tthis._data['children_context'] = context;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is_root()) {\n\t\t\tthis._data['params'] = this.params_data();\n\t\t\t//data['custom'] = []\n\t\t\tthis._data['inputs'] = this.inputs_data();\n\t\t}\n\n\t\t// TODO: does that create flags automatically? it should not\n\t\tif (this._node.flags) {\n\t\t\tthis._data['flags'] = {};\n\t\t\tif (this._node.flags.has_bypass()) {\n\t\t\t\tif (this._node.flags.bypass?.active) {\n\t\t\t\t\tthis._data['flags']['bypass'] = this._node.flags.bypass.active;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._node.flags.has_display()) {\n\t\t\t\tthis._data['flags']['display'] = this._node.flags.display?.active;\n\t\t\t}\n\t\t}\n\n\t\tif (this._node.children_allowed()) {\n\t\t\tconst selection = this._node.children_controller?.selection;\n\t\t\tif (selection && this._node.children().length > 0) {\n\t\t\t\t// only save the nodes that are still present, in case the selection just got deleted\n\t\t\t\tconst selected_children: BaseNodeType[] = [];\n\t\t\t\tconst selected_ids: Dictionary<boolean> = {};\n\t\t\t\tfor (let selected_node of selection.nodes()) {\n\t\t\t\t\tselected_ids[selected_node.graph_node_id] = true;\n\t\t\t\t}\n\t\t\t\tfor (let child of this._node.children()) {\n\t\t\t\t\tif (child.graph_node_id in selected_ids) {\n\t\t\t\t\t\tselected_children.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data['selection'] = selected_children.map((n) => n.name);\n\t\t\t}\n\t\t}\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = this._node.io.inputs.override_clonable_state();\n\t\t\tif (override) {\n\t\t\t\tthis._data['override_clonable_state'] = override;\n\t\t\t}\n\t\t}\n\n\t\t// custom\n\t\tthis.add_custom();\n\n\t\treturn this._data;\n\t}\n\n\tui_data(): NodeJsonExporterUIData {\n\t\tconst data: NodeJsonExporterUIData = {} as NodeJsonExporterUIData;\n\t\tif (!this.is_root()) {\n\t\t\tconst ui_data = this._node.ui_data;\n\t\t\tdata['pos'] = ui_data.position.toArray() as Number2;\n\t\t\tconst comment = ui_data.comment;\n\t\t\tif (comment) {\n\t\t\t\tdata['comment'] = SceneJsonExporter.sanitize_string(comment);\n\t\t\t}\n\t\t}\n\t\tconst children = this._node.children();\n\t\tif (children.length > 0) {\n\t\t\tdata['nodes'] = {};\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tdata['nodes'][child.name] = node_exporter.ui_data();\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate is_root() {\n\t\treturn this._node.parent === null && this._node.graph_node_id == this._node.root.graph_node_id;\n\t}\n\n\tprotected inputs_data() {\n\t\tconst data: InputData[] = [];\n\t\t// Object.keys(this._node.io.inputs.inputs()).forEach((input_index) => {\n\t\tthis._node.io.inputs.inputs().forEach((input, input_index) => {\n\t\t\t// const input = this._node.io.inputs.input(input_index);\n\t\t\tif (input) {\n\t\t\t\t// const connection_point = this._node.io.inputs.named_input_connection_points;\n\t\t\t\tconst connection = this._node.io.connections.input_connection(input_index)!;\n\t\t\t\tif (this._node.io.inputs.has_named_inputs) {\n\t\t\t\t\tconst input_name = this._node.io.inputs.named_input_connection_points[input_index].name;\n\t\t\t\t\t// const output_index = input_connections[input_index].output_index();\n\t\t\t\t\tconst output_index = connection.output_index;\n\t\t\t\t\tconst output_name = input.io.outputs.named_output_connection_points[output_index].name;\n\t\t\t\t\tdata.push({name: input_name, node: input.name, output: output_name});\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(input.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tprotected params_data() {\n\t\tconst data: Dictionary<ParamJsonExporterData<ParamType>> = {};\n\n\t\tfor (let param_name of this._node.params.names) {\n\t\t\tconst param = this._node.params.get(param_name);\n\t\t\tif (param && !param.parent_param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tdata[param.name] = params_data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprotected nodes_data() {\n\t\tconst data: Dictionary<NodeJsonExporterData> = {};\n\t\tfor (let child of this._node.children()) {\n\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.json_exporter()\n\t\t\tdata[child.name] = node_exporter.data();\n\t\t}\n\t\treturn data;\n\t}\n\n\tprotected add_custom() {}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {TypedNumericParam} from '../../../../params/_Numeric';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamNumericJsonExporter extends ParamJsonExporter<TypedNumericParam<ParamType>> {\n\tadd_main() {\n\t\t// if (this._param.has_expression() && this._param.expression_controller?.expression) {\n\t\t// \t// const escaped_expression = this._param.expression().replace(/'/g, \"\\\\'\");\n\t\t// \tthis._data['expression'] = this._param.expression_controller?.expression;\n\t\t// } else {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t\t// }\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {SceneJsonExporter} from '../Scene';\n\nexport class ParamOperatorPathJsonExporter extends ParamJsonExporter<OperatorPathParam> {\n\tadd_main() {\n\t\tlet val = this._param.raw_input;\n\t\t// val = val.replace(/'/g, \"\\\\'\");\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","// import lodash_isString from 'lodash/isString'\nimport {ParamJsonExporter} from '../Param';\nimport {SceneJsonExporter} from '../Scene';\nimport {StringParam} from '../../../../params/String';\n\nexport class ParamStringJsonExporter extends ParamJsonExporter<StringParam> {\n\tadd_main() {\n\t\t// let val = this._param.input_value();\n\t\tlet val = this._param.raw_input;\n\t\t// if (lodash_isString(val)){\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\t\t// }\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {RampParam} from '../../../../params/Ramp';\n\nexport class ParamRampJsonExporter extends ParamJsonExporter<RampParam> {\n\tadd_main() {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\nimport {IUniforms} from '../../../../../../core/geometry/Material';\n// import {GlobalsTextureHandler} from '../../../../../Engine/Node/Gl/Assembler/Globals/Texture'\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport TemplateDefault from '../../templates/textures/Default.frag.glsl';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\n// import {BaseGlNodeType} from '../../../_Base';\n\nexport class ShaderAssemblerTexture extends BaseGlShaderAssembler {\n\tprivate _uniforms: IUniforms | undefined;\n\n\tget _template_shader() {\n\t\treturn {\n\t\t\tfragmentShader: TemplateDefault,\n\t\t\tvertexShader: undefined,\n\t\t\tuniforms: undefined,\n\t\t};\n\t}\n\n\t// async compile() {\n\t// \tawait this.update_fragment_shader();\n\t// }\n\n\tfragment_shader() {\n\t\treturn this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tuniforms() {\n\t\treturn this._uniforms;\n\t}\n\t// _create_material() {\n\t// \treturn undefined;\n\t// }\n\n\tasync update_fragment_shader() {\n\t\tthis._lines = new Map();\n\t\tthis._shaders_by_name = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\tconst template = this._template_shader.fragmentShader;\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\n\t\tthis._uniforms = this._uniforms || {};\n\t\tthis.add_uniforms(this._uniforms);\n\t\t// const new_uniforms = this.build_uniforms({}, this._uniforms || {});\n\t\t// this._uniforms = new_uniforms;\n\t\t// this._uniforms = this._uniforms || {};\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\t\t// \tthis._uniforms[uniform_name] = new_uniforms[uniform_name];\n\t\t// }\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\n\t\t// That's actually useless, since this doesn't make the texture recook\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst id = this._gl_parent_node.graph_node_id;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tif (this._uniforms) {\n\t\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(id, this._uniforms as IUniformsWithTime);\n\t\t\t}\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(id);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t\t// new Connection.Vec2('resolution'),\n\t\t]);\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn [new ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [])];\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t\tdefault: '1.0',\n\t\t\t}),\n\t\t];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == 'fragment') {\n\t\t\tbody_lines.push(`vec2 ${var_name} = vec2(gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y)`);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\t// add_export_body_line(\n\t// \texport_node: BaseGlNodeType,\n\t// \tshader_name: ShaderName,\n\t// \tinput_name: string,\n\t// \tinput: BaseGlNodeType,\n\t// \tvariable_name: string\n\t// ) {\n\t// \t// let input\n\t// \t// let variable_name\n\t// \t// if(export_node.type() == 'output'){\n\t// \t// \tinput = export_node.named_input(input_name)\n\t// \t// \tvariable_name = input_name\n\t// \t// } else {\n\t// \t// \t// if attribute\n\t// \t// \tinput = export_node.connected_named_input()\n\t// \t// \tvariable_name = export_node.attribute_name()\n\t// \t// }\n\n\t// \tif (input) {\n\t// \t\tconst var_input = export_node.variable_for_input(input_name);\n\t// \t\tconst new_var = ThreeToGl.vector3(var_input);\n\t// \t\tif (new_var) {\n\t// \t\t\t// const texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\t\t// \texport_node,\n\t// \t\t\t// \tshader_name,\n\t// \t\t\t// \tvariable_name\n\t// \t\t\t// )\n\t// \t\t\tconst texture_variable = this._texture_allocations_controller.variable(variable_name);\n\t// \t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t// \t\t\tif (texture_variable.allocation().shader_name() == shader_name) {\n\t// \t\t\t\tconst component = texture_variable.component();\n\n\t// \t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t// \t\t\t\texport_node.add_body_lines([line], shader_name);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\t// add_import_body_line(\n\t// \timport_node: BaseNodeGl,\n\t// \tshader_name: ShaderName,\n\t// \toutput_name: string,\n\t// \tvariable_name: string\n\t// \t){\n\t// \t\tthrow \"not sure I want to use this method anymore\"\n\t// \tconst named_output = import_node.named_output_by_name(output_name)\n\t// \tconst gl_type = named_output.gl_type()\n\n\t// \tconst map_name = `texture_${shader_name}`\n\t// \tconst definition = new Definition.Uniform(import_node, 'sampler2D', map_name)\n\t// \t// definitions_by_shader_name[import_node._shader_name].push(definition)\n\t// \timport_node.add_definitions([definition])\n\n\t// \tconst var_name = import_node.gl_var_name(output_name)\n\n\t// \tconst texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\timport_node,\n\t// \t\tshader_name,\n\t// \t\tvariable_name\n\t// \t)\n\t// \tif(!texture_variable){\n\t// \t\tthis._texture_allocations_controller.print(this._gl_parent_node.scene())\n\t// \t}\n\t// \tconst component = texture_variable.component()\n\t// \tconst lines = [\n\t// \t\t`${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).${component}`,\n\t// \t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t]\n\t// \timport_node.add_body_lines(lines, shader_name)\n\t// }\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst input_names = this.input_names_for_shader_name(\n\t\t\toutput_node,\n\t\t\tshaders_collection_controller.current_shader_name\n\t\t);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst gl_var = output_node.variable_for_input(input_name);\n\n\t\t\t\t\tlet body_line: string | undefined;\n\t\t\t\t\tif (input_name == 'color') {\n\t\t\t\t\t\tbody_line = `diffuseColor.xyz = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (input_name == 'alpha') {\n\t\t\t\t\t\tbody_line = `diffuseColor.a = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (body_line) {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [body_line]);\n\t\t\t\t\t}\n\t\t\t\t\t// this.add_export_body_line(\n\t\t\t\t\t// \toutput_node,\n\t\t\t\t\t// \tshaders_collection_controller.current_shader_name,\n\t\t\t\t\t// \tinput_name,\n\t\t\t\t\t// \tinput,\n\t\t\t\t\t// \tvariable_name\n\t\t\t\t\t// \t)\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// set_node_lines_attribute(attribute_node: Attribute, shader_name: ShaderName){\n\n\t// \tif(attribute_node.is_importing()){\n\t// \t\tconst gl_type = attribute_node.gl_type()\n\t// \t\tconst attribute_name = attribute_node.attribute_name()\n\t// \t\tconst new_value = this.globals_handler().read_attribute(\n\t// \t\t\tattribute_node,\n\t// \t\t\tgl_type,\n\t// \t\t\tattribute_name,\n\t// \t\t\tshader_name\n\t// \t\t\t)\n\t// \t\tconst var_name = attribute_node.gl_var_name(Attribute.output_name())\n\t// \t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`\n\t// \t\tattribute_node.add_body_lines([body_line])\n\n\t// \t\t// re-export to ensure it is available on next frame\n\t// \t\tconst texture_variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\tif(texture_variable.allocation().shader_name() == shader_name){\n\n\t// \t\t\tconst variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\t\tconst component = variable.component()\n\t// \t\t\tattribute_node.add_body_lines([\n\t// \t\t\t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t\t\t])\n\t// \t\t}\n\n\t// \t\t// this.add_import_body_line(\n\t// \t\t// \tattribute_node,\n\t// \t\t// \tshader_name,\n\t// \t\t// \tAttribute.output_name(),\n\t// \t\t// \tattribute_node.attribute_name()\n\t// \t\t// \t)\n\t// \t}\n\t// \tif(attribute_node.is_exporting()){\n\t// \t\tconst input = attribute_node.connected_named_input()\n\t// \t\tconst variable_name = attribute_node.attribute_name()\n\n\t// \t\tthis.add_export_body_line(\n\t// \t\t\tattribute_node,\n\t// \t\t\tshader_name,\n\t// \t\t\tAttribute.input_name(),\n\t// \t\t\tinput,\n\t// \t\t\tvariable_name\n\t// \t\t\t)\n\t// \t}\n\t// }\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst body_lines: string[] = [];\n\t\tconst definitions: UniformGLDefinition[] = [];\n\n\t\t// const shader_config = this.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\t// const globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinitions.push(new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name));\n\t\t\t\t\t// vertex_definitions.push(definition)\n\t\t\t\t\t// fragment_definitions.push(definition)\n\t\t\t\t\t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t\tbody_lines.push(`float ${var_name} = ${output_name}`);\n\t\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t\t// }\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\t// body_lines.push(body_line)\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\t\t\t\t// default:\n\t\t\t\t// \t// this.add_import_body_line(globals_node, shader_name, output_name, output_name)\n\t\t\t\t// \tconst named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// \tconst gl_type = named_output.gl_type()\n\n\t\t\t\t// \tconst attrib_read = this.globals_handler().read_attribute(\n\t\t\t\t// \t\tglobals_node,\n\t\t\t\t// \t\tgl_type,\n\t\t\t\t// \t\toutput_name,\n\t\t\t\t// \t\tshader_name\n\t\t\t\t// \t)\n\t\t\t\t// \tbody_line = `${gl_type} ${var_name} = ${attrib_read}`\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// \t//\n\n\t\t\t\t// \t// const map_name = `texture_${output_name}`\n\t\t\t\t// \t// definition = new Definition.Uniform(globals_node, 'sampler2D', map_name)\n\t\t\t\t// \t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t// \t// body_line = `${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).xyz`\n\n\t\t\t\t// \t// // // if(dependencies.length == 0){\n\t\t\t\t// \t// body_lines.push(body_line)\n\t\t\t\t// \t// }\n\t\t\t}\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tglobals_node.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tglobals_node.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// globals_node.add_body_lines(body_lines)\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport {BaseGlNodeType} from '../../_Base';\nimport {TypedNodeTraverser} from '../../../utils/shaders/NodeTraverser';\nimport {BaseNodeType} from '../../../_Base';\nimport {BaseGlShaderAssembler} from '../assemblers/_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {GLDefinitionType, BaseGLDefinition} from '../../utils/GLDefinition';\nimport {TypedGLDefinitionCollection} from '../../utils/GLDefinitionCollection';\nimport {ParamConfigsController} from '../../../../nodes/utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './ShadersCollectionController';\nimport {CodeFormatter} from './CodeFormatter';\n\nimport {LineType} from './LineType';\n\nexport class CodeBuilder {\n\t_param_configs_controller: ParamConfigsController = new ParamConfigsController();\n\t_param_configs_set_allowed: boolean = true;\n\n\tprivate _shaders_collection_controller: ShadersCollectionController | undefined;\n\t_lines: Map<ShaderName, Map<LineType, string[]>> = new Map();\n\t_function_declared: Map<ShaderName, Map<string, boolean>> = new Map();\n\n\tconstructor(private _assembler: BaseGlShaderAssembler, private _gl_parent_node: BaseNodeType) {}\n\n\tasync build_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this._assembler, this._gl_parent_node);\n\t\tnode_traverser.traverse(root_nodes);\n\n\t\tconst nodes_by_shader_name: Map<ShaderName, BaseGlNodeType[]> = new Map();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tnodes_by_shader_name.set(shader_name, node_traverser.nodes_for_shader_name(shader_name));\n\t\t}\n\t\tconst sorted_nodes = node_traverser.sorted_nodes();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst root_nodes_for_shader = this._assembler.root_nodes_by_shader_name(shader_name);\n\t\t\t// const leaf_nodes_for_shader = this._assembler.leaf_nodes_by_shader_name(shader_name);\n\n\t\t\t// keep track of which nodes are both leaf and root, and do not use their code twice\n\t\t\t// as this may happen with an attribute node, when used as both import and export\n\t\t\t// TODO: that seems useless, as I surely should be able to filter duplicates if needed\n\n\t\t\t// ensure nodes are unique\n\t\t\t// const node_ids: Map<string, boolean> = new Map();\n\t\t\t// nodes_by_shader_name.forEach((nodes, shader_name) => {\n\t\t\t// \tfor (let node of nodes) {\n\t\t\t// \t\tnode_ids.set(node.graph_node_id, true);\n\t\t\t// \t}\n\t\t\t// });\n\n\t\t\tfor (let root_node of root_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[root_node.graph_node_id()]){\n\t\t\t\t// if (!node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tMapUtils.push_on_array_at_entry(nodes_by_shader_name, shader_name, root_node);\n\t\t\t\t// node_ids.set(root_node.graph_node_id, true);\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t}\n\t\t\t// for (let leaf_node of leaf_nodes_for_shader) {\n\t\t\t// if(!both_leaf_and_root_nodes_by_id[leaf_node.graph_node_id()]){\n\t\t\t// if (!node_ids.get(leaf_node.graph_node_id)) {\n\t\t\t// MapUtils.unshift_on_array_at_entry(nodes_by_shader_name, shader_name, leaf_node);\n\t\t\t// }\n\t\t\t// }\n\t\t\t// }\n\t\t}\n\n\t\t// ensure nodes are not added if already present\n\t\tconst sorted_node_ids: Map<string, boolean> = new Map();\n\t\tfor (let node of sorted_nodes) {\n\t\t\tsorted_node_ids.set(node.graph_node_id, true);\n\t\t}\n\n\t\tfor (let root_node of root_nodes) {\n\t\t\tif (!sorted_node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tsorted_nodes.push(root_node);\n\t\t\t\tsorted_node_ids.set(root_node.graph_node_id, true);\n\t\t\t}\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\t// node.set_assembler(this._assembler);\n\t\t\tnode.reset_code();\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\t// const param_promises = sorted_nodes.map(node=>{\n\t\t// \treturn node.eval_all_params()\n\t\t// })\n\t\t// await Promise.all(param_promises)\n\n\t\tthis._shaders_collection_controller = new ShadersCollectionController(\n\t\t\tthis.shader_names(),\n\t\t\tthis.shader_names()[0]\n\t\t);\n\t\tthis.reset();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst nodes = lodash_uniq(nodes_by_shader_name.get(shader_name));\n\t\t\tthis._shaders_collection_controller.set_current_shader_name(shader_name);\n\t\t\tif (nodes) {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\t// node.set_shader_name(shader_name);\n\t\t\t\t\tif (this._param_configs_set_allowed) {\n\t\t\t\t\t\tnode.set_param_configs();\n\t\t\t\t\t}\n\t\t\t\t\tnode.set_lines(this._shaders_collection_controller);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// fragment_nodes.forEach(node=>{\n\t\t// \tnode.set_shader_name(ShaderName.FRAGMENT)\n\t\t// \tnode.set_param_configs()\n\t\t// \tnode.set_lines()\n\t\t// })\n\t\tif (this._param_configs_set_allowed) {\n\t\t\tthis.set_param_configs(sorted_nodes);\n\t\t}\n\t\tthis.set_code_lines(sorted_nodes);\n\t}\n\n\tdisallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = false;\n\t}\n\tallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = true;\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\n\tprivate reset() {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst lines_map = new Map();\n\t\t\t// for (let line_type of LINE_TYPES) {\n\t\t\t// \tlines_map.set(line_type, []);\n\t\t\t// }\n\t\t\tthis._lines.set(shader_name, lines_map);\n\t\t\tthis._function_declared.set(shader_name, new Map());\n\t\t}\n\t}\n\n\tparam_configs() {\n\t\treturn this._param_configs_controller.list || [];\n\t}\n\tlines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this._lines.get(shader_name)!.get(line_type);\n\t}\n\tall_lines() {\n\t\treturn this._lines;\n\t}\n\n\tset_param_configs(nodes: BaseGlNodeType[]) {\n\t\tthis._param_configs_controller.reset();\n\t\tfor (let node of nodes) {\n\t\t\tconst param_configs = node.param_configs();\n\t\t\tif (param_configs) {\n\t\t\t\tfor (let param_config of param_configs) {\n\t\t\t\t\tthis._param_configs_controller.push(param_config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_code_lines(nodes: BaseGlNodeType[]) {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\t// nodes.forEach((node, i)=>{\n\t\t\tthis.add_code_lines(nodes, shader_name);\n\t\t\t// })\n\t\t}\n\t}\n\n\tadd_code_lines(nodes: BaseGlNodeType[], shader_name: ShaderName) {\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.FUNCTION, LineType.FUNCTION_DECLARATION);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.UNIFORM, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.VARYING, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.ATTRIBUTE, LineType.DEFINE);\n\n\t\tthis.add_code_line_for_nodes_and_line_type(nodes, shader_name, LineType.BODY);\n\t}\n\n\tprivate add_definitions(\n\t\tnodes: BaseGlNodeType[],\n\t\tshader_name: ShaderName,\n\t\tdefinition_type: GLDefinitionType,\n\t\tline_type: LineType\n\t) {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst definitions = [];\n\t\tfor (let node of nodes) {\n\t\t\tlet node_definitions = this._shaders_collection_controller.definitions(shader_name, node);\n\t\t\tif (node_definitions) {\n\t\t\t\tnode_definitions = node_definitions.filter((d) => d.definition_type == definition_type);\n\t\t\t\tfor (let definition of node_definitions) {\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (definitions.length > 0) {\n\t\t\tconst collection = new TypedGLDefinitionCollection<GLDefinitionType>(definitions);\n\t\t\tconst uniq_definitions = collection.uniq();\n\t\t\tif (collection.errored) {\n\t\t\t\t// TODO: handle error\n\t\t\t\tthrow `code builder error: ${collection.error_message}`;\n\t\t\t}\n\n\t\t\tconst definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tfor (let definition of uniq_definitions) {\n\t\t\t\tconst node_id = definition.node.graph_node_id;\n\t\t\t\tif (!node_ids.has(node_id)) {\n\t\t\t\t\tnode_ids.set(node_id, true);\n\t\t\t\t}\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_node_id, node_id, definition);\n\t\t\t}\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tnode_ids.forEach((boolean: boolean, node_id: string) => {\n\t\t\t\tconst definitions = definitions_by_node_id.get(node_id);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tconst first_definition = definitions[0];\n\n\t\t\t\t\tif (first_definition) {\n\t\t\t\t\t\tconst comment = CodeFormatter.node_comment(first_definition.node, line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\n\t\t\t\t\t\tfor (let definition of definitions) {\n\t\t\t\t\t\t\tconst line = CodeFormatter.line_wrap(definition.line, line_type);\n\t\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tadd_code_line_for_nodes_and_line_type(nodes: BaseGlNodeType[], shader_name: ShaderName, line_type: LineType) {\n\t\tnodes = nodes.filter((node) => {\n\t\t\tif (this._shaders_collection_controller) {\n\t\t\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\t\t\t\treturn lines && lines.length > 0;\n\t\t\t}\n\t\t});\n\n\t\tvar nodes_count = nodes.length;\n\t\tfor (let i = 0; i < nodes_count; i++) {\n\t\t\tconst is_last = i == nodes.length - 1;\n\t\t\tthis.add_code_line_for_node_and_line_type(nodes[i], shader_name, line_type, is_last);\n\t\t}\n\t}\n\tadd_code_line_for_node_and_line_type(\n\t\tnode: BaseGlNodeType,\n\t\tshader_name: ShaderName,\n\t\tline_type: LineType,\n\t\tis_last: boolean\n\t): void {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\n\t\tif (lines && lines.length > 0) {\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tconst comment = CodeFormatter.node_comment(node, line_type);\n\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\t\t\tlodash_uniq(lines).forEach((line) => {\n\t\t\t\tline = CodeFormatter.line_wrap(line, line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t});\n\t\t\tif (!(line_type == LineType.BODY && is_last)) {\n\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../../params/types/ParamValuesTypeMap';\nimport {ParamConstructorByType} from '../../../../params/types/ParamConstructorByType';\n\nimport {BaseNodeType} from '../../../_Base';\nimport {TypedParam, BaseParamType} from '../../../../params/_Base';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {TypeAssert} from '../../../../poly/Assert';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import { RampValue } from '../../../../params/ramp/RampValue';\nimport {RampParam} from '../../../../params/Ramp';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\n// import {ParamValueComparer} from '../../params/ParamValueComparer';\n// import {ParamValueCloner} from '../../params/ParamValueCloner';\n// import {CoreTextureLoader} from '../../../../../Core/Loader/Texture'\n\nexport class ParamConfig<T extends ParamType> {\n\tprivate _uniform: IUniform | undefined;\n\tprivate _cached_param_value: ParamValuesTypeMap[T] | undefined;\n\t// private _texture_loader: CoreTextureLoader\n\n\tconstructor(\n\t\tprivate _type: T,\n\t\tprivate _name: string,\n\t\tprivate _default_value: ParamInitValuesTypeMap[T],\n\t\tprivate _uniform_name: string\n\t) {}\n\n\tstatic from_param<K extends ParamType>(param: TypedParam<K>, uniform_name: string): ParamConfig<K> {\n\t\treturn new ParamConfig<K>(param.type, param.name, param.default_value, uniform_name);\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget uniform_name() {\n\t\treturn this._uniform_name;\n\t}\n\n\tget uniform() {\n\t\treturn (this._uniform = this._uniform || this._create_uniform());\n\t}\n\n\tprivate _create_uniform() {\n\t\treturn ParamConfig.uniform_by_type(this._type);\n\t}\n\n\tget param_options() {\n\t\tconst callback_bound = this._callback.bind(this);\n\t\tswitch (this._type) {\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {callback: callback_bound, node_selection: {context: NodeContext.COP}};\n\t\t\tdefault:\n\t\t\t\treturn {callback: callback_bound};\n\t\t}\n\t}\n\n\tprivate _callback(node: BaseNodeType, param: BaseParamType) {\n\t\tthis.uniform.value = param.value;\n\t}\n\n\t// TODO: refactor that to use the default values map?\n\tstatic uniform_by_type(type: ParamType): IUniform {\n\t\tswitch (type) {\n\t\t\tcase ParamType.BOOLEAN:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.BUTTON:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.COLOR:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.FLOAT:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.FOLDER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.INTEGER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {value: 0};\n\t\t\t// case ParamType.STRING: return {type: 't', value: null} // new Texture()}\n\t\t\tcase ParamType.RAMP:\n\t\t\t\treturn {value: null}; // new Texture()}\n\t\t\tcase ParamType.SEPARATOR:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.STRING:\n\t\t\t\treturn {value: null};\n\t\t\tcase ParamType.VECTOR2:\n\t\t\t\treturn {value: new Vector2(0, 0)};\n\t\t\tcase ParamType.VECTOR3:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.VECTOR4:\n\t\t\t\treturn {value: new Vector4(0, 0, 0, 0)};\n\t\t}\n\t\tTypeAssert.unreachable(type);\n\t}\n\n\tasync set_uniform_value(node: BaseNodeType) {\n\t\t// return new Promise( async (resolve, reject)=>{\n\t\tconst uniform = this.uniform;\n\t\t// the cache cannot be trusted...\n\t\tconst param = node.params.get(this._name) as TypedParam<T>;\n\t\tif (param) {\n\t\t\tawait param.compute(); //node[node.param_cache_name(this._name)]\n\t\t\tconst value = param.value;\n\n\t\t\tif ((value != null && this.has_value_changed(value)) || this.is_video_texture()) {\n\t\t\t\t// this._update_cached_value(value);\n\t\t\t\t// console.log(this._name, value)\n\n\t\t\t\tswitch (this._type) {\n\t\t\t\t\tcase ParamType.OPERATOR_PATH: {\n\t\t\t\t\t\tawait this.set_uniform_value_from_texture((<unknown>param) as OperatorPathParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ParamType.RAMP: {\n\t\t\t\t\t\tthis.set_uniform_value_from_ramp((<unknown>param) as RampParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tuniform.value = param.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// resolve()\n\t\t\t} // else {\n\t\t\t//\tresolve()\n\t\t\t//}\n\t\t\t// })\n\t\t}\n\t}\n\n\tasync set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n\t\t// this._texture_loader = this._texture_loader || new CoreTextureLoader(node, node.param(this.name()))\n\n\t\t// // param.graph_disconnect_predecessors()\n\t\t// const texture = await this._texture_loader.load_texture_from_url_or_op( url );\n\t\t// uniform.value = texture\n\t\tconst found_node = param.found_node();\n\t\tif (found_node) {\n\t\t\tconst container = await found_node.request_container();\n\t\t\tconst texture = container.texture();\n\t\t\tuniform.value = texture;\n\t\t} else {\n\t\t\tuniform.value = null;\n\t\t}\n\t}\n\n\tset_uniform_value_from_ramp(param: RampParam, uniform: IUniform) {\n\t\tuniform.value = param.ramp_texture();\n\t}\n\n\thas_value_changed(new_value: ParamValuesTypeMap[T]): boolean {\n\t\tconst param_constructor = ParamConstructorByType[this._type];\n\t\tif (this._cached_param_value) {\n\t\t\tconst has_changed = !param_constructor.are_values_equal(new_value, this._cached_param_value);\n\t\t\tif (has_changed) {\n\t\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\t}\n\t\t\treturn has_changed;\n\t\t} else {\n\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\treturn false;\n\t\t}\n\n\t\t// let has_changed = false;\n\t\t// if (this._type == ParamType.RAMP) {\n\t\t// \thas_changed = new_value.uuid() != this._cached_param_value;\n\t\t// \t// if(has_changed){ this._cached_param_value = new_value.uuid() }\n\t\t// } else {\n\t\t// \tif (this._cached_param_value != null) {\n\t\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t\t// \t\t\t// console.log(\"new f\", new_value, this._cached_param_value)\n\t\t// \t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t} else {\n\t\t// \t\t\tif (new_value != null) {\n\t\t// \t\t\t\t// console.log(\"new v\", new_value, this._cached_param_value)\n\t\t// \t\t\t\thas_changed = new_value.toArray().join('.') != this._cached_param_value.toArray().join('.');\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\thas_changed = true;\n\t\t// \t}\n\t\t// \t// this._cached_param_value = new_value\n\t\t// }\n\t\t// return has_changed;\n\t}\n\t// private _update_cached_value(new_value) {\n\t// \t// console.log(\"_update_cached_value\", this._name, new_value)\n\t// \tif (this._type == 'ramp') {\n\t// \t\tthis._cached_param_value = new_value.uuid();\n\t// \t} else {\n\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t// \t\t\tthis._cached_param_value = new_value;\n\t// \t\t} else {\n\t// \t\t\t// make sure to copy the value, not assign to it\n\t// \t\t\t// otherwise we won't detect changes (since the objects would be the same)\n\t// \t\t\tthis._cached_param_value = this._cached_param_value || new_value.clone();\n\t// \t\t\tthis._cached_param_value.copy(new_value);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_video_texture(): boolean {\n\t\tlet result = false;\n\t\tconst uniform = this.uniform;\n\t\tif (uniform) {\n\t\t\tconst value = uniform.value;\n\t\t\tif (value) {\n\t\t\t\tresult = value.constructor == VideoTexture;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {LinesController} from './LinesController';\nimport {BaseGlNodeType} from '../../_Base';\n\nexport class ShadersCollectionController {\n\tprivate _lines_controller_by_shader_name: Map<ShaderName, LinesController> = new Map();\n\tconstructor(private _shader_names: ShaderName[], private _current_shader_name: ShaderName) {\n\t\tfor (let shader_name of this._shader_names) {\n\t\t\tthis._lines_controller_by_shader_name.set(shader_name, new LinesController(shader_name));\n\t\t}\n\t}\n\n\tget shader_names() {\n\t\treturn this._shader_names;\n\t}\n\n\tset_current_shader_name(shader_name: ShaderName) {\n\t\tthis._current_shader_name = shader_name;\n\t}\n\tget current_shader_name() {\n\t\treturn this._current_shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[], shader_name?: ShaderName) {\n\t\tif (definitions.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_definitions(node, definitions);\n\t\t}\n\t}\n\tdefinitions(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.definitions(node);\n\t\t}\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[], shader_name?: ShaderName) {\n\t\tif (lines.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_body_lines(node, lines);\n\t\t}\n\t}\n\tbody_lines(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.body_lines(node);\n\t\t}\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {BaseGlNodeType} from '../../_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\n\nexport class LinesController {\n\tprivate _definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\tprivate _body_lines_by_node_id: Map<string, string[]> = new Map();\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tget shader_name() {\n\t\treturn this._shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[]) {\n\t\tfor (let definition of definitions) {\n\t\t\tMapUtils.push_on_array_at_entry(this._definitions_by_node_id, node.graph_node_id, definition);\n\t\t}\n\t}\n\tdefinitions(node: BaseGlNodeType): BaseGLDefinition[] | undefined {\n\t\treturn this._definitions_by_node_id.get(node.graph_node_id);\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[]) {\n\t\tfor (let line of lines) {\n\t\t\tMapUtils.push_on_array_at_entry(this._body_lines_by_node_id, node.graph_node_id, line);\n\t\t}\n\t}\n\tbody_lines(node: BaseGlNodeType): string[] | undefined {\n\t\treturn this._body_lines_by_node_id.get(node.graph_node_id);\n\t}\n}\n","import {BaseGlNodeType} from '../../_Base';\nimport {LineType} from './LineType';\n\nconst LINE_SUFFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: ';',\n\t[LineType.BODY]: ';',\n};\n\nconst LINE_PREFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: '',\n\t[LineType.BODY]: '\t',\n};\n\nexport class CodeFormatter {\n\tstatic node_comment(node: BaseGlNodeType, line_type: LineType): string {\n\t\tlet line = `// ${node.full_path()}`;\n\t\tif (line_type == LineType.BODY) {\n\t\t\tline = `\t${line}`;\n\t\t}\n\t\treturn line;\n\t}\n\tstatic line_wrap(line: string, line_type: LineType) {\n\t\tlet add_suffix = true;\n\t\tif (line.indexOf('#if') == 0 || line.indexOf('#endif') == 0) {\n\t\t\tadd_suffix = false;\n\t\t}\n\t\tif (add_suffix) {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}${LINE_SUFFIXES[line_type]}`;\n\t\t} else {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}`;\n\t\t}\n\t}\n\tstatic post_line_separator(line_type: LineType) {\n\t\treturn line_type == LineType.BODY ? '\t' : '';\n\t}\n}\n","import {TypedNode} from '../../_Base';\nimport {ShaderName} from './ShaderName';\n\nexport abstract class TypedAssembler<T extends TypedNode<any, any, any>> {\n\tabstract get shader_names(): ShaderName[];\n\tabstract input_names_for_shader_name(node: T, shader_name: ShaderName): string[];\n}\n","export default \"#include <common>\\n\\nuniform vec2 resolution;\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec4 diffuseColor = vec4(1.0,0.0,1.0,1.0);\\n\\n\\n\\t// INSERT BODY\\n\\n\\tgl_FragColor = vec4( diffuseColor );\\n}\"","export class CoreSleep {\n\tstatic sleep(time: number): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve();\n\t\t\t}, time);\n\t\t});\n\t}\n}\n","import {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter} from 'three/src/constants';\n// import {LinearEncoding} from 'three/src/constants';\n// import {HalfFloatType} from 'three/src/constants';\n// import {WebGLRenderTargetCube} from 'three/src/renderers/WebGLRenderTargetCube';\nimport {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\n\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\n// import {CoreTextureLoader} from '../../../core/loader/Texture';\n// import { CoreScriptLoader } from \"src/Core/Loader/Script\";\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {POLY} from '../../Poly';\nclass EnvMapCopParamsConfig extends NodeParamsConfig {\n\t// url = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t// \tdesktop_browse: {file_type: 'texture'},\n\t// });\n}\nconst ParamsConfig = new EnvMapCopParamsConfig();\nexport class EnvMapCopNode extends TypedCopNode<EnvMapCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'env_map';\n\t}\n\t// static required_three_imports() {\n\t// \treturn [\n\t// \t\t'loaders/EXRLoader',\n\t// \t\t// 'pmrem/PMREMGenerator',\n\t// \t\t// 'pmrem/PMREMCubeUVPacker',\n\t// \t];\n\t// }\n\n\t// private _texture_loader: CoreTextureLoader\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\n\t\t// for now, if I clone the input, it gets messed up\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT)\n\t// }\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tconst env_map = await this.convert_texture_to_env_map(texture);\n\t\tif (env_map) {\n\t\t\tthis.set_texture(env_map);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate async convert_texture_to_env_map(texture: Texture): Promise<Texture | undefined> {\n\t\t// texture.minFilter = NearestFilter;\n\t\t// texture.encoding = LinearEncoding;\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t// if (!renderer) {\n\t\t// \tawait CoreSleep.sleep(1000);\n\t\t// \tconsole.log('waited 1s');\n\t\t// \trenderer = POLY.renderers_controller.first_renderer();\n\t\t// \tconsole.log('renderer', renderer, texture);\n\t\t// }\n\n\t\tif (renderer) {\n\t\t\tconst pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t// console.log('env inout', texture);\n\t\t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\n\t\t\t// pmremGenerator.dispose();\n\t\t\t// texture.dispose();\n\t\t\t// console.log('exrCubeRenderTarget.texture', exrCubeRenderTarget.texture);\n\t\t\tconst env_map_texture = exrCubeRenderTarget.texture;\n\t\t\t// (window.scene as any).background = env_map_texture;\n\t\t\t// (window.scene as any).environment = env_map_texture;\n\t\t\treturn env_map_texture;\n\t\t} else {\n\t\t\tthis.states.error.set('no renderer found to convert the texture to an env map');\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {TextureLoader} from 'three/src/loaders/TextureLoader';\nimport {Texture} from 'three/src/textures/Texture';\n// import {RepeatWrapping} from 'three/src/constants';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreScriptLoader} from '/Script';\n// import {CoreGeometry} from '../geometry/Geometry';\nimport {UnsignedByteType} from 'three/src/constants';\nimport {CoreWalker} from '../Walker';\n\nimport {BaseNodeType} from '../../engine/nodes/_Base';\nimport {BaseParamType} from '../../engine/params/_Base';\nimport {BaseCopNodeClass} from '../../engine/nodes/cop/_Base';\nimport {TextureContainer} from '../../engine/containers/Texture';\nimport {POLY} from '../../engine/Poly';\n// import {BufferGeometry} from 'three/src/core/BufferGeometry';\n\ninterface VideoSourceTypeByExt {\n\togg: string;\n\togv: string;\n\tmp4: string;\n}\n// interface ImageScriptUrlByExt {\n// \texr: string;\n// \tbasis: string;\n// }\ninterface ThreeLoaderByExt {\n\texr: string;\n\tbasis: string;\n\thdr: string;\n}\n\nenum Extension {\n\tEXR = 'exr',\n\tBASIS = 'basis',\n\tHDR = 'hdr',\n}\n\nexport class CoreTextureLoader {\n\tstatic PARAM_DEFAULT = '/examples/textures/uv.jpg';\n\tstatic PARAM_ENV_DEFAULT = '/examples/textures/piz_compressed.exr';\n\n\tstatic VIDEO_EXTENSIONS = ['mp4', 'webm', 'ogv'];\n\tstatic VIDEO_SOURCE_TYPE_BY_EXT: VideoSourceTypeByExt = {\n\t\togg: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\togv: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\tmp4: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"',\n\t};\n\t// static SCRIPT_URL_BY_EXT: ImageScriptUrlByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// static THREE_LOADER_BY_EXT: ThreeLoaderByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// @load_texture: (url, callback)->\n\t// \tif url\n\t// \t\tloader = this._texture_loader(url)\n\n\t// \t\tloader.load(\n\t// \t\t\turl,\n\t// \t\t\tcallback,\n\t// \t\t\tnull,\n\t// \t\t\t(error)=>\n\t// \t\t\t\tthis.set_error(\"could not load texture #{url}\")\n\t// \t\t\t\t#this._on_error(error)\n\t// \t\t\t)\n\t// \telse\n\t// \t\tthis.set_error(\"not url given to Mat/Base._load_texture\")\n\t// _on_error: (error)->\n\t// \tconsole.log(\"ERROR\")\n\t// \tconsole.log(error)\n\t// \tthis.set_error_message()\n\n\tconstructor(private _node: BaseNodeType, private _param: BaseParamType) {}\n\n\tasync load_texture_from_url_or_op(url: string): Promise<Texture | VideoTexture | null> {\n\t\tlet texture: Texture | null = null;\n\t\tlet found_node;\n\n\t\tif (url.substring(0, 3) == 'op:') {\n\t\t\tconst node_path = url.substring(3);\n\t\t\tfound_node = CoreWalker.find_node(this._node, node_path);\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node instanceof BaseCopNodeClass) {\n\t\t\t\t\tconst container: TextureContainer = await found_node.request_container();\n\t\t\t\t\ttexture = container.texture();\n\t\t\t\t} else {\n\t\t\t\t\tthis._node.states.error.set(`found node is not a texture node`);\n\t\t\t\t}\n\n\t\t\t\t// this._assign_texture(attrib, texture)\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`no node found in path '${node_path}'`);\n\t\t\t}\n\t\t} else {\n\t\t\ttexture = await this.load_url(url);\n\t\t\tif (texture) {\n\t\t\t\t// param.mark_as_referencing_asset(url)\n\t\t\t\tif (this._param.options.texture_as_env()) {\n\t\t\t\t\t// texture = await CoreTextureLoader.set_texture_for_env(texture, this._node);\n\t\t\t\t} else {\n\t\t\t\t\ttexture = CoreTextureLoader.set_texture_for_mapping(texture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`could not load texture ${url}`);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE: if this._param gets its value from an expression like `ch('/CONTROL/photo_url')`\n\t\t// then found_node will be null, so the graph should not be changed\n\t\tif (found_node && this._param.graph_predecessors()[0] != found_node) {\n\t\t\tthis._param.graph_disconnect_predecessors();\n\t\t\tthis._param.add_graph_input(found_node);\n\t\t}\n\n\t\t// this._assign_texture(attrib, texture)\n\t\treturn texture;\n\t}\n\n\tasync load_url(url: string): Promise<Texture> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// url = this._resolve_url(url)\n\t\t\tconst ext = CoreTextureLoader._ext(url);\n\n\t\t\tif (CoreTextureLoader.VIDEO_EXTENSIONS.includes(ext)) {\n\t\t\t\tconst texture: VideoTexture = await this._load_as_video(url);\n\t\t\t\treturn texture;\n\t\t\t} else {\n\t\t\t\tthis.loader_for_ext(ext).then((loader) => {\n\t\t\t\t\tloader.load(url, resolve, undefined, (error: any) => {\n\t\t\t\t\t\tconsole.warn('error', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loader_for_ext(ext: string) {\n\t\tconst ext_lowercase = ext.toLowerCase() as keyof ThreeLoaderByExt;\n\t\t// const script_name = CoreTextureLoader.SCRIPT_URL_BY_EXT[ext_lowercase];\n\t\t// var loader;\n\n\t\tswitch (ext_lowercase) {\n\t\t\tcase Extension.EXR: {\n\t\t\t\tconst {EXRLoader} = await import('../../../modules/three/examples/jsm/loaders/EXRLoader');\n\t\t\t\treturn new EXRLoader();\n\t\t\t}\n\t\t\tcase Extension.HDR: {\n\t\t\t\tconst {RGBELoader} = await import('../../../modules/three/examples/jsm/loaders/RGBELoader');\n\t\t\t\tconst loader = new RGBELoader();\n\t\t\t\tloader.setDataType(UnsignedByteType); // FloatType,HalfFloatType\n\t\t\t\t// loader.setPath('/examples/textures/equirectangular/');\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t\tcase Extension.BASIS: {\n\t\t\t\tconst {BasisTextureLoader} = await import(\n\t\t\t\t\t'../../../modules/three/examples/jsm/loaders/BasisTextureLoader'\n\t\t\t\t);\n\t\t\t\tconst loader = new BasisTextureLoader();\n\t\t\t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t\t\tif (renderer) {\n\t\t\t\t\tloader.detectSupport(renderer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('texture loader found no renderer for basis texture loader');\n\t\t\t\t}\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\t// if (script_name) {\n\t\t// const imported_classes = await CoreScriptLoader.load_module_three_loader(script_name)\n\t\t// const imported_classes = await CoreScriptLoader.three_module(`loaders/${script_name}`);\n\t\t// const imported_classes = await import(`modules/three/examples/jsm/loaders/${script_name}`);\n\t\t// const loader_class_name = CoreTextureLoader.THREE_LOADER_BY_EXT[ext_lowercase];\n\t\t// const loader_class = imported_classes[loader_class_name];\n\t\t// if (loader_class) {\n\t\t// \tloader = new loader_class();\n\t\t// \tif (ext == 'basis') {\n\t\t// \t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t// \t\tconst renderer = POLY.renderers_controller.first_renderer();\n\t\t// \t\tloader.detectSupport(renderer);\n\t\t// \t}\n\t\t// }\n\t\t// }\n\t\treturn new TextureLoader();\n\n\t\t// const constructor = (() => { switch (ext) {\n\t\t// \tcase 'exr': return EXRLoader;\n\t\t// \tdefault: return TextureLoader;\n\t\t// } })();\n\t\t// return new constructor();\n\t}\n\n\t_load_as_video(url: string): Promise<VideoTexture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video');\n\t\t\t// document.body.appendChild(video)\n\t\t\t// video.id = 'video'\n\t\t\t// console.log(\"video\", video)\n\t\t\tvideo.setAttribute('crossOrigin', 'anonymous');\n\t\t\tvideo.setAttribute('autoplay', `${true}`); // to ensure it loads\n\t\t\tvideo.setAttribute('loop', `${true}`);\n\n\t\t\t// wait for onloadedmetadata to ensure that we have a duration\n\t\t\tvideo.onloadedmetadata = function() {\n\t\t\t\tvideo.pause();\n\t\t\t\tconst texture = new VideoTexture(video);\n\t\t\t\tresolve(texture);\n\t\t\t};\n\t\t\t// video.setAttribute('controls', true)\n\t\t\t// video.style=\"display:none\"\n\t\t\tconst source = document.createElement('source');\n\t\t\tconst ext = CoreTextureLoader._ext(url) as keyof VideoSourceTypeByExt;\n\t\t\tlet type: string = CoreTextureLoader.VIDEO_SOURCE_TYPE_BY_EXT[ext];\n\t\t\ttype = type || CoreTextureLoader._default_video_source_type(url);\n\t\t\tsource.setAttribute('type', type);\n\t\t\tsource.setAttribute('src', url);\n\n\t\t\tvideo.appendChild(source);\n\t\t});\n\t}\n\tstatic _default_video_source_type(url: string) {\n\t\tconst ext = this._ext(url);\n\t\treturn `video/${ext}`;\n\t}\n\n\tstatic pixel_data(texture: Texture) {\n\t\tconst img = texture.image;\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.drawImage(img, 0, 0, img.width, img.height);\n\t\t\treturn context.getImageData(0, 0, img.width, img.height);\n\t\t}\n\t}\n\n\t// TODO: typescript: check what type the pixel_data is\n\t// static pixel_data_to_attribute(pixel_data: Pixel, geometry: BufferGeometry, attrib_name_with_component:string, convert_method: (x:number, y:number, z:number, w:number)=>number) {\n\t// \tconst {data} = pixel_data;\n\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t// \t// TODO: add error if no uvs\n\t// \tconst values = [];\n\t// \tconst points = geometry_wrapper.points();\n\t// \tfor (let point of points) {\n\t// \t\tconst uv = point.attrib_value('uv');\n\t// \t\tconst x = Math.floor((pixel_data.width - 1) * uv.x);\n\t// \t\tconst y = Math.floor((pixel_data.height - 1) * (1 - uv.y));\n\t// \t\tconst i = y * pixel_data.width + x;\n\t// \t\t// const val = data[4*i] / 255.0;\n\t// \t\tif (convert_method) {\n\t// \t\t\tconst val = convert_method(data[4 * i + 0], data[4 * i + 1], data[4 * i + 2], data[4 * i + 3]);\n\t// \t\t\tvalues.push(val);\n\t// \t\t} else {\n\t// \t\t\tvalues.push([data[4 * i + 0], data[4 * i + 1], data[4 * i + 2]]);\n\t// \t\t}\n\t// \t}\n\n\t// \tconst attrib_name_elements = attrib_name_with_component.split('.');\n\t// \tlet attrib_name = attrib_name_elements[0];\n\t// \tlet component_offset = null;\n\t// \tif (attrib_name_elements.length > 1) {\n\t// \t\tconst component = attrib_name_elements[1] as keyof Vector4Like\n\t// \t\tcomponent_offset = {x: 0, y: 1, z: 2, w: 3}[component];\n\t// \t}\n\n\t// \tlet attrib = geometry.attributes[attrib_name];\n\t// \tif (attrib) {\n\t// \t\tconst array = attrib.array;\n\t// \t\tlet index = 0;\n\t// \t\tlet is_array = null;\n\t// \t\tfor (let value of values) {\n\t// \t\t\tif (is_array || lodash_isArray(value)) {\n\t// \t\t\t\tis_array = true;\n\t// \t\t\t\tlet component_index = 0;\n\t// \t\t\t\tfor (let value_c of value) {\n\t// \t\t\t\t\tarray[attrib.itemSize * index + component_index] = value_c;\n\t// \t\t\t\t\tcomponent_index++;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tarray[attrib.itemSize * index + component_offset] = value;\n\t// \t\t\t}\n\t// \t\t\tindex++;\n\t// \t\t}\n\t// \t} else {\n\t// \t\tattrib = geometry.setAttribute(attrib_name, new Float32BufferAttribute(values, 1));\n\t// \t}\n\t// \tattrib.needsUpdate = true;\n\t// }\n\n\tstatic _ext(url: string) {\n\t\tconst elements = url.split('.');\n\t\treturn elements[elements.length - 1].toLowerCase();\n\t}\n\t// static private _resolve_url(url: string):string{\n\t// \tif(url[0] == '/'){\n\t// \t\tconst root_url = POLY.env_is_production() ? 'https://polygonjs.com' : 'http://localhost:5000'\n\t// \t\turl = `${root_url}${url}`\n\t// \t}\n\t// \treturn url\n\t// }\n\n\tstatic set_texture_for_mapping(texture: Texture) {\n\t\t// let val = texture['wrapS']\n\t\t// Object.defineProperty(texture, 'wrapS', {\n\t\t// \tget () {\n\t\t// \t\treturn val // Simply return the cached value\n\t\t// \t},\n\t\t// \tset (newVal) {\n\t\t// \t\tval = newVal // Save the newVal\n\t\t// \t\tconsole.warn(\"set\", newVal)\n\t\t// \t}\n\t\t// })\n\n\t\t// texture.wrapS = RepeatWrapping\n\t\t// texture.wrapT = RepeatWrapping\n\t\t// console.log(\"set_texture_for_mapping\", RepeatWrapping, texture, texture.wrapS)\n\t\treturn texture;\n\t}\n\n\t// static async set_texture_for_env(texture: Texture, registerer: BaseNode) {\n\t// \tif (registerer._registered_env_map) {\n\t// \t\tPOLY.renderers_controller.deregister_env_map(registerer._registered_env_map);\n\t// \t}\n\t// \tregisterer._registered_env_map = await POLY.renderers_controller.register_env_map(texture);\n\t// \treturn registerer._registered_env_map;\n\t// }\n}\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_BPTC_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tbptcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.bptcSupported = !! renderer.extensions.get( 'EXT_texture_compression_bptc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.bptcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n","import {Texture} from 'three/src/textures/Texture';\nimport {TypedCopNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst ParamsConfig = new NodeParamsConfig();\nexport class NullCopNode extends TypedCopNode<NodeParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tthis.set_texture(texture);\n\t}\n}\n","import {TypedCopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchCopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchCopParamsConfig();\n\nexport class SwitchCopNode extends TypedCopNode<SwitchCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_texture(container.texture());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import {CATEGORY_EVENT} from './Category';\n\nimport {CameraMapControlsEventNode} from '../../nodes/event/CameraMapControls';\nimport {CameraOrbitControlsEventNode} from '../../nodes/event/CameraOrbitControls';\nimport {CodeEventNode} from '../../nodes/event/Code';\nimport {MouseEventNode} from '../../nodes/event/MouseEvent';\nimport {PassEventNode} from '../../nodes/event/PassEvent';\n\nexport interface EventNodeChildrenMap {\n\tcamera_orbit_controls: CameraMapControlsEventNode;\n\tcamera_map_controls: CameraOrbitControlsEventNode;\n\tcode: CodeEventNode;\n\tmouse_event: MouseEventNode;\n\tpass_event: PassEventNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class EventRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(CameraMapControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CameraOrbitControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CodeEventNode, CATEGORY_EVENT.MISC);\n\t\tpoly.register_node(MouseEventNode, CATEGORY_EVENT.MISC);\n\t\tpoly.register_node(PassEventNode, CATEGORY_EVENT.MISC);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {MapControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {CameraOrbitControlsEventNode} from './CameraOrbitControls';\n\nexport class CameraMapControlsEventNode extends CameraOrbitControlsEventNode {\n\tstatic type() {\n\t\treturn 'camera_map_controls';\n\t}\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// await CoreScriptLoader.load_module_three_example('controls/OrbitControls')\n\t\t// const constructor_name = 'MapControls'\n\t\t// const constructor = THREE[constructor_name]\n\t\t// const c = this.constructor as typeof CameraMapControlsEventNode;\n\t\t// const {MapControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\treturn new MapControls(camera, element);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedEventNode} from './_Base';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport interface CameraControls extends OrbitControls {\n\tname?: string;\n\t// this_is_a_control: any;\n\t// name: string;\n}\n\nexport abstract class TypedCameraControlsEventNode<K extends NodeParamsConfig> extends TypedEventNode<K> {\n\t// controls() {\n\t// \treturn this._controls;\n\t// }\n\n\tasync apply_controls(camera: Camera, html_element: HTMLElement) {\n\t\t// I don't think I can just assign the camera at the moment\n\t\t// so the controls may need to be re-created everytime\n\t\t// TODO: the controls should be created (and disposed?) by the viewer\n\t\t//this.dispose_controls()\n\n\t\tconst controls = await this.create_controls_instance(camera, html_element);\n\t\tconst timestamp = performance.now();\n\t\tcontrols.name = `${this.full_path()}:${camera.name}:${timestamp}:${this.controls_id()}`;\n\t\t// console.log(this._controls)\n\t\tawait this.params.eval_all();\n\t\tthis.setup_controls(controls);\n\t\treturn controls;\n\t\t// })\n\t\t// });\n\t}\n\tcontrols_id() {\n\t\treturn JSON.stringify(this.params.all.map((p) => p.value_serialized));\n\t}\n\t//this.cook()\n\n\t// dispose_controls: (controls_instance)->\n\t// \tif controls_instance?\n\t// \t\tcontrols_instance.dispose()\n\n\tabstract setup_controls(controls: CameraControls): void;\n\t//\n\n\tabstract async create_controls_instance(camera: Camera, element: HTMLElement): Promise<CameraControls>;\n\tabstract set_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void;\n}\n\nexport type BaseCameraControlsEventNodeType = TypedCameraControlsEventNode<any>;\n","import {TypedEventNode, BaseEventNodeType} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nclass PassEventParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new PassEventParamsConfig();\n\nexport class PassEventNode extends TypedEventNode<PassEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'pass';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.inputs.set_named_input_connection_points(\n\t\t\t[0, 1, 2, 3].map((i) => new TypedNamedConnectionPoint(`trigger${i}`, ConnectionPointType.BOOL))\n\t\t);\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('event', ConnectionPointType.BOOL),\n\t\t]);\n\t}\n\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tconst connections = this.io.connections.output_connections();\n\t\tconst nodes: BaseEventNodeType[] = connections.map((connection) => connection.node_dest) as BaseEventNodeType[];\n\t\tfor (let node of nodes) {\n\t\t\tnode.process_event(event, canvas, camera_node);\n\t\t}\n\t}\n}\n","import {CATEGORY_GL} from './Category';\n\nimport {FloatToIntGlNode, IntToFloatGlNode} from '../../nodes/gl/_ConversionMisc';\nimport {FloatToVec2GlNode, FloatToVec3GlNode, FloatToVec4GlNode} from '../../nodes/gl/_ConversionToVec';\n\nimport {\n\tVec2ToFloatGlNode,\n\tVec3ToFloatGlNode,\n\tVec4ToFloatGlNode,\n\tVec4ToVectorGlNode,\n} from '../../nodes/gl/_ConversionVecTo';\n\nimport {\n\tAbsGlNode,\n\tAcosGlNode,\n\tAsinGlNode,\n\tAtanGlNode,\n\tCeilGlNode,\n\tCosGlNode,\n\tDegreesGlNode,\n\tExpGlNode,\n\tExp2GlNode,\n\tFloorGlNode,\n\tFractGlNode,\n\tInverseSqrtGlNode,\n\tLogGlNode,\n\tLog2GlNode,\n\tNormalizeGlNode,\n\tRadiansGlNode,\n\tSignGlNode,\n\tSinGlNode,\n\tSqrtGlNode,\n\tTanGlNode,\n} from '../../nodes/gl/_Math_Arg1';\n\nimport {\n\tDistanceGlNode,\n\tDotGlNode,\n\tMaxGlNode,\n\tMinGlNode,\n\tModGlNode,\n\tPowGlNode,\n\tReflectGlNode,\n\tStepGlNode,\n} from '../../nodes/gl/_Math_Arg2';\n\nimport {AddGlNode, DivideGlNode, MultGlNode, SubstractGlNode} from '../../nodes/gl/_Math_Arg2Operation';\n\nimport {AndGlNode, OrGlNode} from '../../nodes/gl/_Math_Arg2Boolean';\nimport {AlignGlNode} from '../../nodes/gl/Align';\nimport {AttributeGlNode} from '../../nodes/gl/Attribute';\nimport {ConstantGlNode} from '../../nodes/gl/Constant';\nimport {ComplementGlNode} from '../../nodes/gl/Complement';\nimport {CrossGlNode} from '../../nodes/gl/Cross';\nimport {CycleGlNode} from '../../nodes/gl/Cycle';\nimport {DiskGlNode} from '../../nodes/gl/Disk';\nimport {EasingGlNode} from '../../nodes/gl/Easing';\nimport {FitGlNode} from '../../nodes/gl/Fit';\nimport {Fit01GlNode} from '../../nodes/gl/Fit01';\nimport {GlobalsGlNode} from '../../nodes/gl/Globals';\nimport {HsvToRgbGlNode} from '../../nodes/gl/HsvToRgb';\nimport {InstanceTransformGlNode} from '../../nodes/gl/InstanceTransform';\nimport {LengthGlNode} from '../../nodes/gl/Length';\nimport {LuminanceGlNode} from '../../nodes/gl/Luminance';\nimport {MixGlNode} from '../../nodes/gl/Mix';\nimport {MultAddGlNode} from '../../nodes/gl/MultAdd';\nimport {NegateGlNode} from '../../nodes/gl/Negate';\nimport {NoiseGlNode} from '../../nodes/gl/Noise';\nimport {NullGlNode} from '../../nodes/gl/Null';\nimport {OutputGlNode} from '../../nodes/gl/Output';\nimport {ParamGlNode} from '../../nodes/gl/Param';\nimport {RefractGlNode} from '../../nodes/gl/Refract';\nimport {QuatMultGlNode} from '../../nodes/gl/QuatMult';\nimport {QuatFromAxisAngleGlNode} from '../../nodes/gl/QuatFromAxisAngle';\nimport {QuatToAngleGlNode} from '../../nodes/gl/QuatToAngle';\nimport {QuatToAxisGlNode} from '../../nodes/gl/QuatToAxis';\nimport {RampGlNode} from '../../nodes/gl/Ramp';\nimport {RandomGlNode} from '../../nodes/gl/Random';\nimport {RgbToHsvGlNode} from '../../nodes/gl/RgbToHsv';\nimport {RotateGlNode} from '../../nodes/gl/Rotate';\nimport {RoundGlNode} from '../../nodes/gl/Round';\nimport {TextureGlNode} from '../../nodes/gl/Texture';\nimport {TwoWaySwitchGlNode} from '../../nodes/gl/TwoWaySwitch';\nimport {VectorAlignGlNode} from '../../nodes/gl/VectorAlign';\nimport {VectorAngleGlNode} from '../../nodes/gl/VectorAngle';\n\nexport interface GlNodeChildrenMap {\n\tabs: AbsGlNode;\n\tacos: AcosGlNode;\n\tadd: AddGlNode;\n\talign: AlignGlNode;\n\tand: AndGlNode;\n\tasin: AsinGlNode;\n\tatan: AtanGlNode;\n\tattribute: AttributeGlNode;\n\tceil: CeilGlNode;\n\tconstant: ConstantGlNode;\n\tcos: CosGlNode;\n\tcomplement: ComplementGlNode;\n\tcross: CrossGlNode;\n\tcycle: CycleGlNode;\n\tdegrees: DegreesGlNode;\n\tdisk: DiskGlNode;\n\tdistance: DistanceGlNode;\n\tdivide: DivideGlNode;\n\tdot: DotGlNode;\n\teasing: EasingGlNode;\n\texp: ExpGlNode;\n\texp2: Exp2GlNode;\n\tfit: FitGlNode;\n\tfit01: Fit01GlNode;\n\tfloat_to_int: FloatToIntGlNode;\n\tfloat_to_vec2: FloatToVec2GlNode;\n\tfloat_to_vec3: FloatToVec3GlNode;\n\tfloat_to_vec4: FloatToVec4GlNode;\n\tfloor: FloorGlNode;\n\tfract: FractGlNode;\n\thsv_to_rgb: HsvToRgbGlNode;\n\tint_to_float: FloatToIntGlNode;\n\tinverse_sqrt: InverseSqrtGlNode;\n\tinstance_transform: InstanceTransformGlNode;\n\tlength: LengthGlNode;\n\tlog: LogGlNode;\n\tlog2: Log2GlNode;\n\tluminance: LuminanceGlNode;\n\tglobals: GlobalsGlNode;\n\tmax: MaxGlNode;\n\tmin: MinGlNode;\n\tmix: MixGlNode;\n\tmod: ModGlNode;\n\tmult: MultGlNode;\n\tmult_add: MultAddGlNode;\n\tnegate: NegateGlNode;\n\tnoise: NoiseGlNode;\n\tnormalize: NormalizeGlNode;\n\tnull: NullGlNode;\n\tor: OrGlNode;\n\toutput: OutputGlNode;\n\tparam: ParamGlNode;\n\tpow: PowGlNode;\n\tquat_mult: QuatMultGlNode;\n\tquat_from_axis_angle: QuatFromAxisAngleGlNode;\n\tquat_to_angle: QuatToAngleGlNode;\n\tquat_to_axis: QuatToAxisGlNode;\n\tradians: RadiansGlNode;\n\tramp: RampGlNode;\n\trandom: RandomGlNode;\n\treflect: ReflectGlNode;\n\trefract: RefractGlNode;\n\trgb_to_hsv: RgbToHsvGlNode;\n\trotate: RotateGlNode;\n\tround: RoundGlNode;\n\tsign: SignGlNode;\n\tsin: SinGlNode;\n\tsqrt: SqrtGlNode;\n\tstep: StepGlNode;\n\tsubstract: SubstractGlNode;\n\ttan: TanGlNode;\n\ttexture: TextureGlNode;\n\ttwo_way_switch: TwoWaySwitchGlNode;\n\tvec2_to_float: Vec2ToFloatGlNode;\n\tvec3_to_float: Vec3ToFloatGlNode;\n\tvec4_to_float: Vec4ToFloatGlNode;\n\tvec4_to_vector: Vec4ToVectorGlNode;\n\tvector_align: VectorAlignGlNode;\n\tvector_angle: VectorAngleGlNode;\n}\n\nimport {NodeContext} from '../NodeContext';\nimport {Poly} from '../../Poly';\nexport class GlRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AbsGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AcosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AlignGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AndGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(AsinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AtanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AttributeGlNode, CATEGORY_GL.GLOBALS, {except: [`${NodeContext.COP}/builder`]});\n\t\tpoly.register_node(CeilGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(ConstantGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ComplementGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CrossGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(CycleGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DegreesGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(DiskGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DistanceGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DivideGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DotGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(EasingGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ExpGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Exp2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FitGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Fit01GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FloatToIntGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec2GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec3GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec4GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloorGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(GlobalsGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(HsvToRgbGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(IntToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(InverseSqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(InstanceTransformGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LengthGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LuminanceGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(NegateGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(LogGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Log2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MaxGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MinGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ModGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MixGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultAddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(NullGlNode, CATEGORY_GL.UTIL);\n\t\tpoly.register_node(NoiseGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(NormalizeGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(OrGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(OutputGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ParamGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(PowGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(QuatMultGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatFromAxisAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAxisGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(RampGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RandomGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RadiansGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(ReflectGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RefractGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RgbToHsvGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(RotateGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RoundGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SignGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(SqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(StepGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(SubstractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(TanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(TextureGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(TwoWaySwitchGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(Vec2ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec3ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToVectorGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(VectorAlignGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(VectorAngleGlNode, CATEGORY_GL.GEOMETRY);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO INT\n//\n//\nconst OUTPUT_NAME_INT = 'int';\nclass FloatToIntGlParamsConfig extends NodeParamsConfig {\n\tfloat = ParamConfig.FLOAT(0);\n}\nconst ParamsConfigFloatToInt = new FloatToIntGlParamsConfig();\nexport class FloatToIntGlNode extends TypedGlNode<FloatToIntGlParamsConfig> {\n\tparams_config = ParamsConfigFloatToInt;\n\tstatic type() {\n\t\treturn 'float_to_int';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_INT, ConnectionPointType.INT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst float = this.variable_for_input('float');\n\n\t\tconst int = this.gl_var_name('int');\n\t\tconst body_line = `int ${int} = int(${ThreeToGl.float(float)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// INT TO FLOAT\n//\n//\nconst OUTPUT_NAME_FLOAT = 'float';\nclass IntToFloatGlParamsConfig extends NodeParamsConfig {\n\tint = ParamConfig.INTEGER(0);\n}\nconst ParamsConfigIntToFloat = new IntToFloatGlParamsConfig();\nexport class IntToFloatGlNode extends TypedGlNode<IntToFloatGlParamsConfig> {\n\tparams_config = ParamsConfigIntToFloat;\n\tstatic type() {\n\t\treturn 'int_to_float';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_FLOAT, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst int = this.variable_for_input('int');\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = float(${ThreeToGl.int(int)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO VEC2\n//\n//\nclass FloatToVec2GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig2 = new FloatToVec2GlParamsConfig();\nexport class FloatToVec2GlNode extends TypedGlNode<FloatToVec2GlParamsConfig> {\n\tparams_config = ParamsConfig2;\n\tstatic type() {\n\t\treturn 'float_to_vec2';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec2';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec2GlNode.OUTPUT_NAME, ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\n\t\tconst vec = this.gl_var_name(FloatToVec2GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec2 ${vec} = ${ThreeToGl.float2(x, y)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC3\n//\n//\nclass FloatToVec3GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig3 = new FloatToVec3GlParamsConfig();\nexport class FloatToVec3GlNode extends TypedGlNode<FloatToVec3GlParamsConfig> {\n\tparams_config = ParamsConfig3;\n\tstatic type() {\n\t\treturn 'float_to_vec3';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec3';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec3GlNode.OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\n\t\tconst vec = this.gl_var_name(FloatToVec3GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${vec} = ${ThreeToGl.float3(x, y, z)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC4\n//\n//\nclass FloatToVec4GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n\tw = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig4 = new FloatToVec4GlParamsConfig();\nexport class FloatToVec4GlNode extends TypedGlNode<FloatToVec4GlParamsConfig> {\n\tparams_config = ParamsConfig4;\n\tstatic type() {\n\t\treturn 'float_to_vec4';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec4';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec4GlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\t\tconst w = this.variable_for_input('w');\n\n\t\tconst vec = this.gl_var_name(FloatToVec4GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec4 ${vec} = ${ThreeToGl.float4(x, y, z, w)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nclass VecToParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new VecToParamsConfig();\nclass BaseVecToGlNode extends TypedGlNode<VecToParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n\ninterface VecToGlOptions {\n\tcomponents: string[];\n\tparam_type: ParamType;\n}\n\nfunction VecToGlFactory(type: string, options: VecToGlOptions) {\n\tconst components = options.components;\n\tconst param_type = options.param_type;\n\treturn class VecToGlNode extends BaseVecToGlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\n\t\tinitialize_node() {\n\t\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\t\tcomponents.map((c) => {\n\t\t\t\t\treturn new TypedNamedConnectionPoint(c, ConnectionPointType.FLOAT);\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tcreate_params() {\n\t\t\tthis.add_param(param_type, 'vec', components.map((c) => 0) as Number2);\n\t\t}\n\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst body_lines: string[] = [];\n\n\t\t\tconst vec = this.variable_for_input('vec');\n\n\t\t\tthis.io.outputs.used_output_names().forEach((c) => {\n\t\t\t\tconst var_name = this.gl_var_name(c);\n\t\t\t\tbody_lines.push(`float ${var_name} = ${vec}.${c}`);\n\t\t\t});\n\t\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\t}\n\t};\n}\n\nconst components_v4 = ['x', 'y', 'z', 'w'];\n\nexport class Vec2ToFloatGlNode extends VecToGlFactory('vec2_to_float', {\n\tcomponents: ['x', 'y'],\n\tparam_type: ParamType.VECTOR2,\n}) {}\nexport class Vec3ToFloatGlNode extends VecToGlFactory('vec3_to_float', {\n\tcomponents: ['x', 'y', 'z'],\n\tparam_type: ParamType.VECTOR3,\n}) {}\nexport class Vec4ToFloatGlNode extends VecToGlFactory('vec4_to_float', {\n\tcomponents: components_v4,\n\tparam_type: ParamType.VECTOR4,\n}) {}\n\nexport class Vec4ToVectorGlNode extends BaseVecToGlNode {\n\tstatic type() {\n\t\treturn 'vec4_to_vector';\n\t}\n\tstatic readonly INPUT_NAME_VEC4 = 'vec4';\n\tstatic readonly OUTPUT_NAME_VEC3 = 'vec3';\n\tstatic readonly OUTPUT_NAME_W = 'w';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_VEC3, ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_W, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tcreate_params() {\n\t\tthis.add_param(ParamType.VECTOR4, Vec4ToVectorGlNode.INPUT_NAME_VEC4, components_v4.map((c) => 0) as Number4);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\n\t\tconst in_vec4 = Vec4ToVectorGlNode.INPUT_NAME_VEC4;\n\t\tconst out_vec3 = Vec4ToVectorGlNode.OUTPUT_NAME_VEC3;\n\t\tconst out_w = Vec4ToVectorGlNode.OUTPUT_NAME_W;\n\t\tconst vec = this.variable_for_input(in_vec4);\n\n\t\tconst used_output_names = this.io.outputs.used_output_names();\n\n\t\tif (used_output_names.indexOf(out_vec3) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_vec3);\n\t\t\tbody_lines.push(`vec3 ${var_name} = ${vec}.xyz`);\n\t\t}\n\t\tif (used_output_names.indexOf(out_w) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_w);\n\t\t\tbody_lines.push(`float ${var_name} = ${vec}.w`);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n\ninterface MathArg1Options {\n\tin?: string;\n\tout?: string;\n\tmethod?: string;\n}\n\nfunction MathFunctionArg1Factory(type: string, options: MathArg1Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_name = options.in || 'in';\n\treturn class Node extends BaseNodeGlMathFunctionArg1GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_name;\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t};\n}\nexport class AbsGlNode extends MathFunctionArg1Factory('abs') {}\nexport class AcosGlNode extends MathFunctionArg1Factory('acos', {out: 'radians'}) {}\nexport class AsinGlNode extends MathFunctionArg1Factory('asin', {out: 'radians'}) {}\nexport class AtanGlNode extends MathFunctionArg1Factory('atan', {out: 'radians'}) {}\nexport class CeilGlNode extends MathFunctionArg1Factory('ceil') {}\nexport class CosGlNode extends MathFunctionArg1Factory('cos', {in: 'radians'}) {}\nexport class DegreesGlNode extends MathFunctionArg1Factory('degrees', {in: 'radians', out: 'degrees'}) {}\n\nexport class ExpGlNode extends MathFunctionArg1Factory('exp') {}\nexport class Exp2GlNode extends MathFunctionArg1Factory('exp2') {}\nexport class FloorGlNode extends MathFunctionArg1Factory('floor') {}\nexport class FractGlNode extends MathFunctionArg1Factory('fract') {}\nexport class InverseSqrtGlNode extends MathFunctionArg1Factory('inverse_sqrt', {method: 'inversesqrt'}) {}\nexport class LogGlNode extends MathFunctionArg1Factory('log') {}\nexport class Log2GlNode extends MathFunctionArg1Factory('log2') {}\nexport class NormalizeGlNode extends MathFunctionArg1Factory('normalize', {out: 'normalized'}) {}\nexport class RadiansGlNode extends MathFunctionArg1Factory('radians', {in: 'degrees', out: 'radians'}) {}\nexport class SignGlNode extends MathFunctionArg1Factory('sign') {}\nexport class SinGlNode extends MathFunctionArg1Factory('sin', {in: 'radians'}) {}\nexport class SqrtGlNode extends MathFunctionArg1Factory('sqrt') {}\nexport class TanGlNode extends MathFunctionArg1Factory('tan') {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\ninterface MathArg2OperationOptions {\n\tin_prefix: string;\n\tout: string;\n\toperation: string;\n\tallowed_in_types?: ConnectionPointType[];\n}\n\nfunction MathFunctionArg2OperationFactory(type: string, options: MathArg2OperationOptions) {\n\tconst in_prefix = options.in_prefix || type;\n\tconst output_name = options.out || 'val';\n\tconst operation = options.operation;\n\tconst allowed_in_types = options.allowed_in_types;\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\t\tconst name = connection.name;\n\t\t\t\tconst variable = this.variable_for_input(name);\n\t\t\t\tif (variable) {\n\t\t\t\t\treturn ThreeToGl.any(variable);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst joined_args = args.join(` ${this.gl_operation()} `);\n\n\t\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn `${in_prefix}${index}`;\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn output_name;\n\t\t}\n\t\tgl_operation(): string {\n\t\t\treturn operation;\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || ConnectionPointType.FLOAT;\n\n\t\t\tconst current_connections = this.io.connections.input_connections();\n\t\t\tconst expected_count = current_connections ? Math.max(current_connections.length + 1, 2) : 2;\n\t\t\tconst expected_input_types = [];\n\t\t\tfor (let i = 0; i < expected_count; i++) {\n\t\t\t\texpected_input_types.push(type);\n\t\t\t}\n\t\t\treturn expected_input_types;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\tconst type = this._expected_input_types()[0];\n\t\t\treturn [type];\n\t\t}\n\t};\n}\nexport class AddGlNode extends MathFunctionArg2OperationFactory('add', {\n\tin_prefix: 'add',\n\tout: 'sum',\n\toperation: '+',\n}) {}\nexport class DivideGlNode extends MathFunctionArg2OperationFactory('divide', {\n\tin_prefix: 'div',\n\tout: 'divide',\n\toperation: '/',\n}) {}\nexport class SubstractGlNode extends MathFunctionArg2OperationFactory('substract', {\n\tin_prefix: 'sub',\n\tout: 'substract',\n\toperation: '-',\n}) {}\n\nexport class MultGlNode extends MathFunctionArg2OperationFactory('mult', {\n\tin_prefix: 'mult',\n\tout: 'product',\n\toperation: '*',\n}) {\n\tstatic type() {\n\t\treturn 'mult';\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn 1;\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_output_type() {\n\t\tconst input_types = this._expected_input_types();\n\t\tconst type = input_types[input_types.length - 1];\n\t\treturn [type];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst input_connections = this.io.connections.input_connections();\n\t\tif (input_connections) {\n\t\t\tconst first_connection = input_connections[0];\n\n\t\t\tif (first_connection) {\n\t\t\t\tconst connection_point_for_first_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\tfirst_connection.input_index\n\t\t\t\t];\n\t\t\t\tconst type = connection_point_for_first_connection.type;\n\t\t\t\tconst expected_count = input_connections ? input_connections.length + 1 : 2;\n\t\t\t\tconst empty_array = new Array(expected_count);\n\n\t\t\t\tif (type == ConnectionPointType.FLOAT) {\n\t\t\t\t\tconst second_connection = input_connections ? input_connections[1] : null;\n\t\t\t\t\tif (second_connection) {\n\t\t\t\t\t\tconst connection_point_for_second_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\t\t\tsecond_connection.input_index\n\t\t\t\t\t\t];\n\t\t\t\t\t\tconst second_type = connection_point_for_second_connection.type;\n\t\t\t\t\t\tif (second_type == ConnectionPointType.FLOAT) {\n\t\t\t\t\t\t\t// if first 2 inputs are float: n+1 float inputs\n\t\t\t\t\t\t\treturn empty_array.map((i) => type);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// if first input is float and 2nd is different: 1 float, 1 like second, and no other input\n\t\t\t\t\t\t\treturn [type, second_type];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if only 1 input: 2 with same type\n\t\t\t\t\t\treturn [type, type];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// if first input is not a float: n+1 inputs with same type\n\t\t\t\t\treturn empty_array.map(() => type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [ConnectionPointType.FLOAT, ConnectionPointType.FLOAT];\n\t}\n}\n","import {BaseNodeGlMathFunctionArgBoolean2GlNode} from './_BaseMathFunctionArgBoolean2';\n\ninterface MathArg2BooleanOptions {\n\top: string;\n}\n\nfunction MathFunctionArg2BooleanFactory(type: string, options: MathArg2BooleanOptions) {\n\treturn class Node extends BaseNodeGlMathFunctionArgBoolean2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\n\t\tboolean_operation(): string {\n\t\t\treturn options.op;\n\t\t}\n\t\tprotected _gl_output_name(index: number) {\n\t\t\treturn type;\n\t\t}\n\t\tprotected _gl_input_name(index = 0) {\n\t\t\treturn `${type}${index}`;\n\t\t}\n\t};\n}\nexport class AndGlNode extends MathFunctionArg2BooleanFactory('and', {op: '&&'}) {}\nexport class OrGlNode extends MathFunctionArg2BooleanFactory('or', {op: '||'}) {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\n\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport abstract class BaseNodeGlMathFunctionArgBoolean2GlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_input_types() {\n\t\treturn [ConnectionPointType.BOOL, ConnectionPointType.BOOL];\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.BOOL];\n\t}\n\n\tabstract boolean_operation(): string;\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst args = this.io.inputs.named_input_connection_points.map((named_input, i) => {\n\t\t\tconst name = named_input.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(` ${this.boolean_operation()} `);\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `bool ${sum} = ${joined_args}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tDIR = 'dir',\n\tUP = 'up',\n}\nconst InputNames: Array<InputName> = [InputName.DIR, InputName.UP];\ninterface IDefaultValues {\n\t[InputName.DIR]: Number3;\n\t[InputName.UP]: Number3;\n}\nconst DEFAULT_DIR: Number3 = [0, 0, 1];\nconst DEFAULT_UP: Number3 = [0, 1, 0];\nconst DefaultValues: IDefaultValues = {\n\t[InputName.DIR]: DEFAULT_DIR,\n\t[InputName.UP]: DEFAULT_UP,\n};\n\nexport class AlignGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'align';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.VEC3,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'align';\n\t}\n\n\t// protected expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.VEC3];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport ComplementMethods from './gl/complement.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class ComplementGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'complement';\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'complement';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [\n\t\t\tnew FunctionGLDefinition(\n\t\t\t\tthis,\n\t\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT,\n\t\t\t\tComplementMethods\n\t\t\t),\n\t\t];\n\t}\n}\n","export default \"float complement(float x){return 1.0-x;}\\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\\n\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'cross';\n\nclass CrossGlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.VECTOR3([0, 0, 1]);\n\ty = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CrossGlParamsConfig();\nexport class CrossGlNode extends TypedGlNode<CrossGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cross';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = ThreeToGl.float(this.variable_for_input('x'));\n\t\tconst y = ThreeToGl.float(this.variable_for_input('y'));\n\n\t\tconst result = this.gl_var_name(OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${result} = cross(${x}, ${y})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import CycleMethods from './gl/cycle.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\n\nexport class CycleGlNode extends MathFunctionArg3Factory('cycle', {\n\tin: ['in', 'min', 'max'],\n\tdefault: {max: 1},\n\tfunctions: [CycleMethods],\n}) {}\n","export default \"float cycle(float val, float val_min, float val_max){\\n\\tif(val >= val_min && val < val_max){\\n\\t\\treturn val;\\n\\t} else {\\n\\t\\tfloat range = val_max - val_min;\\n\\t\\tif(val >= val_max){\\n\\t\\t\\tfloat delta = (val - val_max);\\n\\t\\t\\treturn val_min + mod(delta, range);\\n\\t\\t} else {\\n\\t\\t\\tfloat delta = (val_min - val);\\n\\t\\t\\treturn val_max - mod(delta, range);\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport DiskMethods from './gl/disk.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nconst OUTPUT_NAME = 'float';\nclass DiskGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR2([0, 0]);\n\tcenter = ParamConfig.VECTOR2([0, 0]);\n\tradius = ParamConfig.FLOAT(1);\n\tfeather = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new DiskGlParamsConfig();\nexport class DiskGlNode extends TypedGlNode<DiskGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'disk';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst position = ThreeToGl.vector2(this.variable_for_input('position'));\n\t\tconst center = ThreeToGl.vector2(this.variable_for_input('center'));\n\t\tconst radius = ThreeToGl.float(this.variable_for_input('radius'));\n\t\tconst feather = ThreeToGl.float(this.variable_for_input('feather'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = disk(${position}, ${center}, ${radius}, ${feather})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\n\t\tshaders_collection_controller.add_definitions(this, [\n\t\t\tnew FunctionGLDefinition(this, ConnectionPointType.FLOAT, DiskMethods),\n\t\t]);\n\t}\n}\n","export default \"float disk(vec2 pos, vec2 center, float radius, float feather){\\n\\tfloat dist = distance(pos, center);\\n\\tif(feather <= 0.0){\\n\\t\\tif(dist < radius){return 1.0;}else{return 0.0;}\\n\\t} else {\\n\\t\\tfloat half_feather = feather * 0.5;\\n\\t\\tif(dist < (radius - half_feather)){\\n\\t\\t\\treturn 1.0;\\n\\t\\t} else {\\n\\t\\t\\tif(dist > (radius + half_feather)){\\n\\t\\t\\t\\treturn 0.0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfloat feather_start = (radius - half_feather);\\n\\t\\t\\t\\tfloat blend = 1.0 - (dist - feather_start) / feather;\\n\\t\\t\\t\\treturn blend;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\n// https://github.com/glslify/glsl-easings\nimport CircularInOut from './gl/easing/circular-in-out.glsl';\nimport ExponentialInOut from './gl/easing/exponential-in-out.glsl';\nimport CircularIn from './gl/easing/circular-in.glsl';\nimport ElasticOut from './gl/easing/elastic-out.glsl';\nimport CubicIn from './gl/easing/cubic-in.glsl';\nimport ExponentialOut from './gl/easing/exponential-out.glsl';\nimport QuinticOut from './gl/easing/quintic-out.glsl';\nimport ElasticInOut from './gl/easing/elastic-in-out.glsl';\nimport Linear from './gl/easing/linear.glsl';\nimport CircularOut from './gl/easing/circular-out.glsl';\nimport BackInOut from './gl/easing/back-in-out.glsl';\nimport BackIn from './gl/easing/back-in.glsl';\nimport SineIn from './gl/easing/sine-in.glsl';\nimport BackOut from './gl/easing/back-out.glsl';\nimport QuarticInOut from './gl/easing/quartic-in-out.glsl';\nimport QuadraticIn from './gl/easing/quadratic-in.glsl';\nimport CubicInOut from './gl/easing/cubic-in-out.glsl';\nimport ElasticIn from './gl/easing/elastic-in.glsl';\nimport BounceOut from './gl/easing/bounce-out.glsl';\nimport QuadraticInOut from './gl/easing/quadratic-in-out.glsl';\nimport ExponentialIn from './gl/easing/exponential-in.glsl';\nimport QuinticInOut from './gl/easing/quintic-in-out.glsl';\nimport SineInOut from './gl/easing/sine-in-out.glsl';\nimport CubicOut from './gl/easing/cubic-out.glsl';\nimport QuadraticOut from './gl/easing/quadratic-out.glsl';\nimport BounceInOut from './gl/easing/bounce-in-out.glsl';\nimport QuinticIn from './gl/easing/quintic-in.glsl';\nimport QuarticIn from './gl/easing/quartic-in.glsl';\nimport QuarticOut from './gl/easing/quartic-out.glsl';\nimport BounceIn from './gl/easing/bounce-in.glsl';\nimport SineOut from './gl/easing/sine-out.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst EASE_NAMES = [\n\t'back-in-out',\n\t'back-in',\n\t'back-out',\n\t'bounce-in-out',\n\t'bounce-in',\n\t'bounce-out',\n\t'circular-in-out',\n\t'circular-in',\n\t'circular-out',\n\t'cubic-in-out',\n\t'cubic-in',\n\t'cubic-out',\n\t'elastic-in-out',\n\t'elastic-in',\n\t'elastic-out',\n\t'exponential-in-out',\n\t'exponential-in',\n\t'exponential-out',\n\t'linear',\n\t'quadratic-in-out',\n\t'quadratic-in',\n\t'quadratic-out',\n\t// \"quartic-in-out\",\n\t// \"quartic-in\",\n\t// \"quartic-out\",\n\t// \"quintic-in-out\",\n\t// \"quintic-in\",\n\t// \"quintic-out\",\n\t'sine-in-out',\n\t'sine-in',\n\t'sine-out',\n];\n\nconst IMPORT_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': CircularInOut,\n\t'exponential-in-out': ExponentialInOut,\n\t'circular-in': CircularIn,\n\t'elastic-out': ElasticOut,\n\t'cubic-in': CubicIn,\n\t'exponential-out': ExponentialOut,\n\t'quintic-out': QuinticOut,\n\t'elastic-in-out': ElasticInOut,\n\tlinear: Linear,\n\t'circular-out': CircularOut,\n\t'back-in-out': BackInOut,\n\t'back-in': BackIn,\n\t'sine-in': SineIn,\n\t'back-out': BackOut,\n\t'quartic-in-out': QuarticInOut,\n\t'quadratic-in': QuadraticIn,\n\t'cubic-in-out': CubicInOut,\n\t'elastic-in': ElasticIn,\n\t'bounce-out': BounceOut,\n\t'quadratic-in-out': QuadraticInOut,\n\t'exponential-in': ExponentialIn,\n\t'quintic-in-out': QuinticInOut,\n\t'sine-in-out': SineInOut,\n\t'cubic-out': CubicOut,\n\t'quadratic-out': QuadraticOut,\n\t'bounce-in-out': BounceInOut,\n\t'quintic-in': QuinticIn,\n\t'quartic-in': QuarticIn,\n\t'quartic-out': QuarticOut,\n\t'bounce-in': BounceIn,\n\t'sine-out': SineOut,\n};\nconst IMPORT_DEPENDENCIES_BY_EASE_NAME: Dictionary<string[]> = {\n\t'bounce-in': [BounceOut],\n\t'bounce-in-out': [BounceOut],\n};\n\nconst METHOD_NAMES_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': 'circularInOut',\n\t'exponential-in-out': 'exponentialInOut',\n\t'circular-in': 'circularIn',\n\t'elastic-out': 'elasticOut',\n\t'cubic-in': 'cubicIn',\n\t'exponential-out': 'exponentialOut',\n\t'quintic-out': 'quinticOut',\n\t'elastic-in-out': 'elasticInOut',\n\tlinear: 'linear',\n\t'circular-out': 'circularOut',\n\t'back-in-out': 'backInOut',\n\t'back-in': 'backIn',\n\t'sine-in': 'sineIn',\n\t'back-out': 'backOut',\n\t'quartic-in-out': 'quarticInOut',\n\t'quadratic-in': 'quadraticIn',\n\t'cubic-in-out': 'cubicInOut',\n\t'elastic-in': 'elasticIn',\n\t'bounce-out': 'bounceOut',\n\t'quadratic-in-out': 'quadraticInOut',\n\t'exponential-in': 'exponentialIn',\n\t'quintic-in-out': 'quinticInOut',\n\t'sine-in-out': 'sineInOut',\n\t'cubic-out': 'cubicOut',\n\t'quadratic-out': 'quadraticOut',\n\t'bounce-in-out': 'bounceInOut',\n\t'quintic-in': 'quinticIn',\n\t'quartic-in': 'quarticIn',\n\t'quartic-out': 'quarticOut',\n\t'bounce-in': 'bounceIn',\n\t'sine-out': 'sineOut',\n};\n\nconst OUTPUT_NAME = 'out';\nconst default_ease_type = EASE_NAMES.indexOf('sine-in-out');\nclass EasingGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_ease_type, {\n\t\tmenu: {\n\t\t\tentries: EASE_NAMES.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new EasingGlParamsConfig();\nexport class EasingGlNode extends TypedGlNode<EasingGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'easing';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.spare_params_controller.set_inputless_param_names(['type']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst ease_name = EASE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_EASE_NAME[ease_name];\n\t\tconst glsl_function_code = IMPORT_BY_EASE_NAME[ease_name];\n\n\t\tlet ease_functions = [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, glsl_function_code)];\n\t\tconst function_dependencies = (IMPORT_DEPENDENCIES_BY_EASE_NAME[ease_name] || []).map(\n\t\t\t(f) => new FunctionGLDefinition(this, ConnectionPointType.FLOAT, f)\n\t\t);\n\t\tif (function_dependencies) {\n\t\t\tease_functions = function_dependencies.concat(ease_functions);\n\t\t}\n\t\t// ease_functions.forEach(ease_function=>{\n\t\t// \tfunction_declaration_lines.push(ease_function)\n\t\t// })\n\n\t\tconst in_value = ThreeToGl.float(this.variable_for_input('input'));\n\t\tconst out_value = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst body_line = `float ${out_value} = ${method_name}(${in_value})`;\n\t\tshaders_collection_controller.add_definitions(this, ease_functions);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","export default \"float circularInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\\n}\\n\\n\"","export default \"float exponentialInOut(float t) {\\n  return t == 0.0 || t == 1.0\\n    ? t\\n    : t < 0.5\\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\\n}\\n\\n\"","export default \"float circularIn(float t) {\\n  return 1.0 - sqrt(1.0 - t * t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticOut(float t) {\\n  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;\\n}\\n\\n\"","export default \"float cubicIn(float t) {\\n  return t * t * t;\\n}\\n\\n\"","export default \"float exponentialOut(float t) {\\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\\n}\\n\\n\"","export default \"float quinticOut(float t) {\\n  return 1.0 - (pow(t - 1.0, 5.0));\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\\n}\\n\\n\"","export default \"float linear(float t) {\\n  return t;\\n}\\n\\n\"","export default \"float circularOut(float t) {\\n  return sqrt((2.0 - t) * t);\\n}\\n\\n\"","export default \"\\nfloat backInOut(float t) {\\n  float f = t < 0.5\\n    ? 2.0 * t\\n    : 1.0 - (2.0 * t - 1.0);\\n\\n  float g = pow(f, 3.0) - f * sin(f * PI);\\n\\n  return t < 0.5\\n    ? 0.5 * g\\n    : 0.5 * (1.0 - g) + 0.5;\\n}\\n\\n\"","export default \"\\nfloat backIn(float t) {\\n  return pow(t, 3.0) - t * sin(t * PI);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineIn(float t) {\\n  return sin((t - 1.0) * HALF_PI) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat backOut(float t) {\\n  float f = 1.0 - t;\\n  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\\n}\\n\\n\"","export default \"float quarticInOut(float t) {\\n  return t < 0.5\\n    ? +8.0 * pow(t, 4.0)\\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\\n}\\n\\n\"","export default \"float quadraticIn(float t) {\\n  return t * t;\\n}\\n\\n\"","export default \"float cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticIn(float t) {\\n  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"\\nfloat bounceOut(float t) {\\n  const float a = 4.0 / 11.0;\\n  const float b = 8.0 / 11.0;\\n  const float c = 9.0 / 10.0;\\n\\n  const float ca = 4356.0 / 361.0;\\n  const float cb = 35442.0 / 1805.0;\\n  const float cc = 16061.0 / 1805.0;\\n\\n  float t2 = t * t;\\n\\n  return t < a\\n    ? 7.5625 * t2\\n    : t < b\\n      ? 9.075 * t2 - 9.9 * t + 3.4\\n      : t < c\\n        ? ca * t2 - cb * t + cc\\n        : 10.8 * t * t - 20.52 * t + 10.72;\\n}\\n\\n\"","export default \"float quadraticInOut(float t) {\\n  float p = 2.0 * t * t;\\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\\n}\\n\\n\"","export default \"float exponentialIn(float t) {\\n  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"float quinticInOut(float t) {\\n  return t < 0.5\\n    ? +16.0 * pow(t, 5.0)\\n    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat sineInOut(float t) {\\n  return -0.5 * (cos(PI * t) - 1.0);\\n}\\n\\n\"","export default \"float cubicOut(float t) {\\n  float f = t - 1.0;\\n  return f * f * f + 1.0;\\n}\\n\\n\"","export default \"float quadraticOut(float t) {\\n  return -t * (t - 2.0);\\n}\\n\\n\"","export default \"\\nfloat bounceInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\\n}\\n\\n\\n\\n\"","export default \"float quinticIn(float t) {\\n  return pow(t, 5.0);\\n}\\n\\n\"","export default \"float quarticIn(float t) {\\n  return pow(t, 4.0);\\n}\\n\\n\"","export default \"float quarticOut(float t) {\\n  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat bounceIn(float t) {\\n  return 1.0 - bounceOut(1.0 - t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineOut(float t) {\\n  return sin(t * HALF_PI);\\n}\\n\\n\"","import {BaseNodeGlMathFunctionArg5GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class FitGlNode extends BaseNodeGlMathFunctionArg5GlNode {\n\tstatic type() {\n\t\treturn 'fit';\n\t}\n\n\tprotected _gl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max', 'dest_min', 'dest_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tprotected gl_method_name(): string {\n\t\treturn 'fit';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class Fit01GlNode extends BaseNodeGlMathFunctionArg3GlNode {\n\tstatic type() {\n\t\treturn 'fit01';\n\t}\n\n\tgl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'fit01';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Hsv2Rgb from './gl/hsv2rgb.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst OUTPUT_NAME = 'rgb';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HsvToRgbGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new HsvToRgbGlParamsConfig();\nexport class HsvToRgbGlNode extends TypedGlNode<HsvToRgbGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hsv_to_rgb';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Hsv2Rgb));\n\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input(this.p.hsv.name));\n\n\t\tconst rgb = this.gl_var_name(OUTPUT_NAME);\n\t\tbody_lines.push(`vec3 ${rgb} = hsv2rgb(${value})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://github.com/hughsk/glsl-hsv2rgb\\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 hsv2rgb(vec3 c) {\\n\\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n\\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n\\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport QuaternionMethods from './gl/quaternion.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst VARS = {\n\tposition: 'position',\n\tnormal: 'normal',\n\tinstance_position: 'instancePosition',\n\tinstance_orientation: 'instanceOrientation',\n\tinstance_scale: 'instanceScale',\n};\n\nclass InstanceTransformGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR3([0, 0, 0]);\n\tnormal = ParamConfig.VECTOR3([0, 0, 1]);\n\tinstance_position = ParamConfig.VECTOR3([0, 0, 0]);\n\tinstance_orientation = ParamConfig.VECTOR4([0, 0, 0, 0]);\n\tinstance_scale = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new InstanceTransformGlParamsConfig();\nexport class InstanceTransformGlNode extends TypedGlNode<InstanceTransformGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance_transform';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_position(), ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_normal(), ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\t\tconst function_declaration_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC4, QuaternionMethods));\n\n\t\tconst input_position = this.io.inputs.named_input(this.p.position.name);\n\t\tconst position = input_position\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.position.name))\n\t\t\t: this._default_position();\n\n\t\tconst input_normal = this.io.inputs.named_input(this.p.normal.name);\n\t\tconst normal = input_normal\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.normal.name))\n\t\t\t: this._default_normal();\n\n\t\tconst input_instancePosition = this.io.inputs.named_input(this.p.instance_position.name);\n\t\tconst instancePosition = input_instancePosition\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_position.name))\n\t\t\t: this._default_instance_position(shaders_collection_controller);\n\t\t// const instancePosition = ThreeToGl.float(this.variable_for_input('instancePosition'))\n\n\t\tconst input_instanceOrientation = this.io.inputs.named_input(this.p.instance_orientation.name);\n\t\tconst instanceOrientation = input_instanceOrientation\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_orientation.name))\n\t\t\t: this._default_input_instance_orientation(shaders_collection_controller);\n\n\t\tconst input_instanceScale = this.io.inputs.named_input(this.p.instance_scale.name);\n\t\tconst instanceScale = input_instanceScale\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_scale.name))\n\t\t\t: this._default_input_instance_scale(shaders_collection_controller);\n\n\t\tconst result_position = this.gl_var_name(this.gl_output_name_position());\n\t\tconst result_normal = this.gl_var_name(this.gl_output_name_normal());\n\t\tbody_lines.push(`vec3 ${result_position} = vec3(${position})`);\n\t\tbody_lines.push(`${result_position} *= ${instanceScale}`);\n\t\tbody_lines.push(`${result_position} = rotate_with_quat( ${result_position}, ${instanceOrientation} )`);\n\t\tbody_lines.push(`${result_position} += ${instancePosition}`);\n\t\tbody_lines.push(`vec3 ${result_normal} = vec3(${normal})`);\n\t\tbody_lines.push(`${result_normal} = rotate_with_quat( ${result_normal}, ${instanceOrientation} )`);\n\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t}\n\tgl_output_name_position() {\n\t\treturn 'position';\n\t}\n\tgl_output_name_normal() {\n\t\treturn 'normal';\n\t}\n\n\tprivate _default_position(): string {\n\t\treturn VARS.position;\n\t}\n\tprivate _default_normal(): string {\n\t\treturn VARS.normal;\n\t}\n\tprivate _default_instance_position(shaders_collection_controller: ShadersCollectionController): string | undefined {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_position,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_position, this._shader_name);\n\t}\n\tprivate _default_input_instance_orientation(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC4,\n\t\t\tVARS.instance_orientation,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec4', VARS.instance_orientation, this._shader_name);\n\t}\n\tprivate _default_input_instance_scale(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_scale,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_scale, this._shader_name);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class LengthGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'length';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['x'][index];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'length';\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'lum';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LuminanceGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new LuminanceGlParamsConfig();\nexport class LuminanceGlNode extends TypedGlNode<LuminanceGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'luminance';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input('color'));\n\n\t\tconst lum = this.gl_var_name('lum');\n\t\t// linearToRelativeLuminance is declared in threejs common.glsl.js\n\t\tconst body_line = `float ${lum} = linearToRelativeLuminance(${value})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class MixGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'mix';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['value0', 'value1', 'blend'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_output_name() {\n\t\treturn 'mix';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg4GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst DefaultValues: Dictionary<number> = {\n\tmult: 1,\n};\n\nenum InputName {\n\tVALUE = 'value',\n\tPRE_ADD = 'pre_add',\n\tMULT = 'mult',\n\tPOST_ADD = 'post_add',\n}\n\nexport class MultAddGlNode extends BaseNodeGlMathFunctionArg4GlNode {\n\tstatic type() {\n\t\treturn 'mult_add';\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.VALUE, InputName.PRE_ADD, InputName.MULT, InputName.POST_ADD][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.any(this.variable_for_input(InputName.VALUE));\n\t\tconst pre_add = ThreeToGl.any(this.variable_for_input(InputName.PRE_ADD));\n\t\tconst mult = ThreeToGl.any(this.variable_for_input(InputName.MULT));\n\t\tconst post_add = ThreeToGl.any(this.variable_for_input(InputName.POST_ADD));\n\n\t\tconst gl_type = this._expected_output_types()[0];\n\t\tconst out_name = this.io.outputs.named_output_connection_points[0].name;\n\t\tconst out = this.gl_var_name(out_name);\n\t\tconst body_line = `${gl_type} ${out} = (${mult}*(${value} + ${pre_add})) + ${post_add}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NegateGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'negate';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['in'][index]);\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['in'][index];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input(this._gl_input_name(0)));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${gl_type} ${out} = -1.0 * ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport {TypedGlNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\n// https://github.com/stegu/webgl-noise/\nimport NoiseCommon from './gl/noise/common.glsl';\n// import cellular2D from './Gl/noise/cellular2D.glsl'\n// import cellular2x2 from './Gl/noise/cellular2x2.glsl'\n// import cellular2x2x2 from './Gl/noise/cellular2x2x2.glsl'\n// import cellular3D from './Gl/noise/cellular3D.glsl'\nimport classicnoise2D from './gl/noise/classicnoise2D.glsl';\nimport classicnoise3D from './gl/noise/classicnoise3D.glsl';\nimport classicnoise4D from './gl/noise/classicnoise4D.glsl';\nimport noise2D from './gl/noise/noise2D.glsl';\nimport noise3D from './gl/noise/noise3D.glsl';\n// import noise3Dgrad from './Gl/noise/noise3Dgrad.glsl'\nimport noise4D from './gl/noise/noise4D.glsl';\nimport {ConnectionPointType, ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n// import psrdnoise2D from './Gl/noise/psrdnoise2D.glsl'\n\nenum NOISE_NAME {\n\t// 'cellular2D',\n\t// 'cellular2x2',\n\t// 'cellular2x2x2',\n\t// 'cellular3D',\n\tCLASSIC_PERLIN_2D = 'Classic Perlin 2D',\n\t// 'Classic Perlin 2D with periodic variant',\n\tCLASSIC_PERLIN_3D = 'Classic Perlin 3D',\n\t// 'Classic Perlin 3D with periodic variant',\n\tCLASSIC_PERLIN_4D = 'Classic Perlin 4D',\n\t// 'Classic Perlin 4D with periodic variant',\n\tNOISE_2D = 'noise2D',\n\tNOISE_3D = 'noise3D',\n\t// 'noise3Dgrad',\n\tNOISE_4D = 'noise4D',\n\t// 'Periodic Simplex Rotating Derivative', // psrdnoise\n\t// 'Periodic Simplex Derivative', // psdnoise\n\t// 'Periodic Simplex Rotating', // psrnoise\n\t// 'Periodic Simplex', // psnoise\n\t// 'Simplex Rotating Derivating', // srdnoise\n\t// 'Simplex Derivating', // sdnoise\n\t// 'Simplex Rotating', // srnoise\n\t// 'Simplex', // snoise\n}\nconst NOISE_NAMES: Array<NOISE_NAME> = [\n\tNOISE_NAME.CLASSIC_PERLIN_2D,\n\tNOISE_NAME.CLASSIC_PERLIN_3D,\n\tNOISE_NAME.CLASSIC_PERLIN_4D,\n\tNOISE_NAME.NOISE_2D,\n\tNOISE_NAME.NOISE_3D,\n\tNOISE_NAME.NOISE_4D,\n];\n\ntype StringByNoise = {[key in NOISE_NAME]: string};\nconst IMPORT_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: classicnoise2D,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: classicnoise3D,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: classicnoise4D,\n\t[NOISE_NAME.NOISE_2D]: noise2D,\n\t[NOISE_NAME.NOISE_3D]: noise3D,\n\t[NOISE_NAME.NOISE_4D]: noise4D,\n};\ntype ConnectionTypeByNoise = {[key in NOISE_NAME]: ConnectionPointType};\nconst INPUT_TYPES_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.VEC4,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.VEC4,\n};\n\nconst OUTPUT_TYPE_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.FLOAT,\n};\nconst METHOD_NAMES_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: 'cnoise',\n\t[NOISE_NAME.NOISE_2D]: 'snoise',\n\t[NOISE_NAME.NOISE_3D]: 'snoise',\n\t[NOISE_NAME.NOISE_4D]: 'snoise',\n};\n\nenum OUTPUT_TYPE {\n\tNoChange = 0,\n\tFloat = 1,\n\tVec2 = 2,\n\tVec3 = 3,\n\tVec4 = 4,\n}\nconst OUTPUT_TYPES: Array<OUTPUT_TYPE> = [\n\tOUTPUT_TYPE.NoChange,\n\tOUTPUT_TYPE.Float,\n\tOUTPUT_TYPE.Vec2,\n\tOUTPUT_TYPE.Vec3,\n\tOUTPUT_TYPE.Vec4,\n];\ntype StringByOutputType = {[key in OUTPUT_TYPE]: string};\nconst OUTPUT_TYPE_LABEL: StringByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: 'Same as noise',\n\t[OUTPUT_TYPE.Float]: 'Float',\n\t[OUTPUT_TYPE.Vec2]: 'Vec2',\n\t[OUTPUT_TYPE.Vec3]: 'Vec3',\n\t[OUTPUT_TYPE.Vec4]: 'Vec4',\n};\ntype ConnectionTypeByOutputType = {[key in OUTPUT_TYPE]: ConnectionPointType};\nconst CONNECTION_TYPE_BY_OUTPUT_TYPE: ConnectionTypeByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Float]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Vec2]: ConnectionPointType.VEC2,\n\t[OUTPUT_TYPE.Vec3]: ConnectionPointType.VEC3,\n\t[OUTPUT_TYPE.Vec4]: ConnectionPointType.VEC4,\n};\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\nconst OUTPUT_NAME = 'noise';\nconst default_noise_type = NOISE_NAMES.indexOf(NOISE_NAME.NOISE_3D);\nconst default_output_type = OUTPUT_TYPE.NoChange;\n\nconst DefaultValues: Dictionary<number> = {\n\tamp: 1,\n\tfreq: 1,\n};\n\nenum InputName {\n\tAMP = 'amp',\n\tPOSITION = 'position',\n\tFREQ = 'freq',\n\tOFFSET = 'offset',\n}\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nclass NoiseGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_noise_type, {\n\t\tmenu: {\n\t\t\tentries: NOISE_NAMES.map((noise_name, i) => {\n\t\t\t\tconst noise_output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\t\tconst name = `${noise_name} (output: ${noise_output_type})`;\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\toutput_type = ParamConfig.INTEGER(default_output_type, {\n\t\tmenu: {\n\t\t\tentries: OUTPUT_TYPES.map((output_type) => {\n\t\t\t\tconst val = OUTPUT_TYPES[output_type];\n\t\t\t\tconst name = OUTPUT_TYPE_LABEL[val];\n\t\t\t\treturn {name: name, value: val};\n\t\t\t}),\n\t\t},\n\t});\n\toctaves = ParamConfig.INTEGER(3, {range: [1, 10], range_locked: [true, false]});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseparator = ParamConfig.SEPARATOR();\n}\nconst ParamsConfig = new NoiseGlParamsConfig();\nexport class NoiseGlNode extends TypedGlNode<NoiseGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t\tthis.spare_params_controller.set_inputless_param_names(['octaves', 'amp_attenuation', 'freq_increase']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.AMP, InputName.POSITION, InputName.FREQ, InputName.OFFSET][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tprivate _expected_input_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\treturn [type, type, type, type];\n\t}\n\tprivate _expected_output_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst output_type = OUTPUT_TYPES[this.pv.output_type];\n\t\tif (output_type == OUTPUT_TYPE.NoChange) {\n\t\t\treturn [OUTPUT_TYPE_BY_NOISE_NAME[noise_name]];\n\t\t} else {\n\t\t\treturn [CONNECTION_TYPE_BY_OUTPUT_TYPE[output_type]];\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst noise_function = IMPORT_BY_NOISE_NAME[noise_name];\n\t\tconst noise_output_gl_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, NoiseCommon));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, noise_function));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, this.fbm_function()));\n\n\t\tconst output_gl_type = this._expected_output_types()[0];\n\n\t\t// if the requested output type matches the noise signature\n\t\tif (output_gl_type == noise_output_gl_type) {\n\t\t\tconst line = this.single_noise_line();\n\t\t\t// body_lines.push( `${output_gl_type} ${noise} = ${amp}*${method_name}(${joined_args})` )\n\t\t\tbody_lines.push(line);\n\t\t} else {\n\t\t\t// if the requested output type does not match the noise signature\n\t\t\tconst requested_components_count = ConnectionPointComponentsCountMap[output_gl_type];\n\t\t\t// const noise_output_components_count = OUTPUT_TYPE_BY_NOISE_NAME[output_gl_type]\n\n\t\t\t// console.log(\"compare\", output_gl_type, requested_components_count, noise_output_components_count)\n\t\t\t// if(requested_components_count < noise_output_components_count){\n\t\t\t// \t// not sure we ever go through here with the current noise set\n\t\t\t// \tlet component = lodash_range(requested_components_count).map(i=>ALL_COMPONENTS[i]).join('')\n\t\t\t// \tconst line = this.single_noise_line('', component)\n\t\t\t// \tbody_lines.push(line)\n\t\t\t// } else {\n\t\t\tconst lines_count_required = requested_components_count;\n\t\t\tconst assembly_args: string[] = [];\n\t\t\tconst noise = this.gl_var_name('noise');\n\t\t\tfor (let i = 0; i < lines_count_required; i++) {\n\t\t\t\tconst component = ALL_COMPONENTS[i];\n\t\t\t\tassembly_args.push(`${noise}${component}`);\n\t\t\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t\t\t// if (lodash_isArray(input_constructor)) {\n\t\t\t\t// TODO: for noise3Dgrad and other noises with 2 inputs\n\t\t\t\t// } else {\n\t\t\t\t// console.log(INPUT_TYPES_BY_NOISE_NAME, noise_name)\n\t\t\t\tconst offset_gl_type = input_type;\n\t\t\t\tconst offset_components_count = ConnectionPointComponentsCountMap[offset_gl_type];\n\t\t\t\tconst offset_values = lodash_range(offset_components_count)\n\t\t\t\t\t.map((j) => ThreeToGl.float(1000 * i))\n\t\t\t\t\t.join(', ');\n\t\t\t\tconst offset2 = `${offset_gl_type}(${offset_values})`;\n\t\t\t\tconst line = this.single_noise_line(component, component, offset2);\n\t\t\t\tbody_lines.push(line);\n\t\t\t\t// }\n\t\t\t}\n\t\t\tconst joined_args = assembly_args.join(', ');\n\t\t\tconst assembly_line = `vec${lines_count_required} ${noise} = vec${lines_count_required}(${joined_args})`;\n\t\t\tbody_lines.push(assembly_line);\n\t\t\t// }\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate fbm_method_name() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\t\treturn `fbm_${method_name}_${this.name}`;\n\t}\n\n\tprivate fbm_function() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\n\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\n\t\treturn `\nfloat ${this.fbm_method_name()} (in ${input_type} st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < ${ThreeToGl.int(this.pv.octaves)}; i++) {\n\t\tvalue += amplitude * ${method_name}(st);\n\t\tst *= ${ThreeToGl.float(this.pv.freq_increase)};\n\t\tamplitude *= ${ThreeToGl.float(this.pv.amp_attenuation)};\n\t}\n\treturn value;\n}\n`;\n\t}\n\n\tprivate single_noise_line(output_name_suffix?: string, component?: string, offset2?: string) {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\t// const method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name]\n\t\tconst method_name = this.fbm_method_name();\n\n\t\tconst amp = ThreeToGl.any(this.variable_for_input(InputName.AMP));\n\t\tconst position = ThreeToGl.any(this.variable_for_input(InputName.POSITION));\n\t\tconst freq = ThreeToGl.any(this.variable_for_input(InputName.FREQ));\n\t\tlet offset = ThreeToGl.any(this.variable_for_input(InputName.OFFSET));\n\t\tif (offset2) {\n\t\t\toffset = `(${offset}+${offset2})`;\n\t\t}\n\t\tconst args = [`(${position}*${freq})+${offset}`];\n\n\t\t// we cannot use amp as is in all cases\n\t\t// if the noise outputs a vec2 and the amp is vec3, we cannot simply do vec3*vec2\n\t\t// therefore, in such a case, we must only take the required component of vec3\n\t\t// examples:\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is float:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is vec2:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec3) and requested output is vec2:\n\t\t//\t\twe have:\n\t\t//\t\t\tx = amp.x * vec2.x\n\t\t//\t\t\ty = amp.y * vec2.y\n\t\t//\t\t\tz = amp.z * 0\n\t\t//\t\t\toutput = vec3(x,y,z)\n\n\t\t// add other args if required\n\t\t// const input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t// if (lodash_isArray(input_constructor)) {\n\t\t// \tconst properties = lodash_clone(input_constructor);\n\t\t// \tproperties.shift(); // remove position\n\t\t// \tproperties.forEach((property) => {\n\t\t// \t\tconst arg_name = Object.keys(property)[0];\n\t\t// \t\tconst arg = ThreeToGl.any(this.variable_for_input(arg_name));\n\t\t// \t\targs.push(arg);\n\t\t// \t});\n\t\t// }\n\t\tconst joined_args = args.join(', ');\n\n\t\t// let output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name]\n\n\t\tconst noise = this.gl_var_name(OUTPUT_NAME);\n\t\tconst right_hand = `${amp}*${method_name}(${joined_args})`;\n\t\tif (component) {\n\t\t\treturn `float ${noise}${output_name_suffix} = (${right_hand}).${component}`;\n\t\t} else {\n\t\t\t// it looks like we never go here with the current set of noises\n\t\t\tconst output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\treturn `${output_type} ${noise} = ${right_hand}`;\n\t\t}\n\t}\n}\n","export default \"// Modulo 289 without a division (only multiplications)\\nfloat mod289(float x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n// Modulo 7 without a division\\nvec3 mod7(vec3 x) {\\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\\n}\\n\\n// Permutation polynomial: (34x^2 + x) mod 289\\nfloat permute(float x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\nvec3 permute(vec3 x) {\\n  return mod289((34.0 * x + 1.0) * x);\\n}\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec2 fade(vec2 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec4 fade(vec4 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\"","export default \"//\\n// GLSL textureless classic 2D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec2 P)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec2 P, vec2 rep)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec3 P, vec3 rep)\\n{\\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 4D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec4 P)\\n{\\n  vec4 Pi0 = floor(P); // Integer part for indexing\\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\\n// Classic Perlin noise, periodic version\\nfloat pnoise(vec4 P, vec4 rep)\\n{\\n  vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\\n  vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n\\t\\t+ i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\n\\n\\n\\n\\nvec4 grad4(float j, vec4 ip)\\n  {\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n  vec4 p,s;\\n\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n  s = vec4(lessThan(p, vec4(0.0)));\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \\n\\n  return p;\\n  }\\n\\t\\t\\t\\t\\t\\t\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n  {\\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n                        0.276393202250021,  // 2 * G4\\n                        0.414589803375032,  // 3 * G4\\n                       -0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\\n  vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\n  vec4 i0;\\n  vec3 isX = step( x0.yzw, x0.xxx );\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\n  i0.x = isX.x + isX.y + isX.z;\\n  i0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\n  i0.y += isYZ.x + isYZ.y;\\n  i0.zw += 1.0 - isYZ.xy;\\n  i0.z += isYZ.z;\\n  i0.w += 1.0 - isYZ.z;\\n\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\\n  vec4 x1 = x0 - i1 + C.xxxx;\\n  vec4 x2 = x0 - i2 + C.yyyy;\\n  vec4 x3 = x0 - i3 + C.zzzz;\\n  vec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\n  i = mod289(i); \\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n  vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n  vec4 p0 = grad4(j0,   ip);\\n  vec4 p1 = grad4(j1.x, ip);\\n  vec4 p2 = grad4(j1.y, ip);\\n  vec4 p3 = grad4(j1.z, ip);\\n  vec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\n  m0 = m0 * m0;\\n  m1 = m1 * m1;\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n  }\\n\"","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {TypedConnectionFloat} from './GlData'\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NullGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input('in'));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name('value');\n\t\tconst body_line = `${gl_type} ${out} = ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ThreeToGl} from '../../../Core/ThreeToGl';\n// import {CodeBuilder} from './Util/CodeBuilder'\n// import {Definition} from './Definition/_Module';\n// import {ShaderName, LineType, LINE_TYPES} from './Assembler/Util/CodeBuilder';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass OutputGlParamsConfig extends NodeParamsConfig {\n\t// type = ParamConfig.INTEGER(0, {\n\t// \tmenu: {\n\t// \t\tentries: ConnectionPointTypes.map((name, i) => {\n\t// \t\t\treturn {name: name, value: i};\n\t// \t\t}),\n\t// \t},\n\t// });\n\t// value_float = ParamConfig.FLOAT(0, ConstantGlNode.typed_visible_options(ConnectionPointType.FLOAT));\n\t// value_vec2 = ParamConfig.VECTOR2([0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC2));\n\t// value_vec3 = ParamConfig.VECTOR3([0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC3));\n\t// value_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new OutputGlParamsConfig();\n\nexport class OutputGlNode extends TypedGlNode<OutputGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'output';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_output_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (shaders_collection_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_output(this, shaders_collection_controller);\n\t\t// }\n\t}\n\n\t// set_color_declaration(color_declaration: string){\n\t// \tthis._color_declaration = color_declaration\n\t// }\n}\n","import {TypedGlNode} from './_Base';\nimport {\n\tConnectionPointTypes,\n\tConnectionPointType,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n} from '../utils/connections/ConnectionPointType';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ParamType} from '../../poly/ParamType';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\nclass ParamGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tas_color = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {type: ConnectionPointTypes.indexOf(ConnectionPointType.VEC3)},\n\t});\n}\nconst ParamsConfig = new ParamGlParamsConfig();\n\nexport class ParamGlNode extends TypedGlNode<ParamGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'param';\n\t}\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointTypes[this.pv.type]]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_if_type_changed', this._update_signature_if_required_bound);\n\t}\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst definitions = [];\n\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst var_name = this.uniform_name();\n\n\t\tdefinitions.push(new UniformGLDefinition(this, gl_type, var_name));\n\t\tshaders_collection_controller.add_definitions(this, definitions);\n\t}\n\tset_param_configs() {\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst default_value = ConnectionPointInitValueMap[gl_type];\n\t\tlet param_type = ConnectionPointTypeToParamTypeMap[gl_type];\n\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tif (\n\t\t\tparam_type == ParamType.VECTOR3 &&\n\t\t\tthis.p.as_color.value &&\n\t\t\tlodash_isArray(default_value) &&\n\t\t\tdefault_value.length == 3\n\t\t) {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tParamType.COLOR,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tparam_type,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t}\n\t}\n\tuniform_name() {\n\t\tconst output_connection_point = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection_point.name);\n\t\treturn var_name;\n\t}\n\n\t// update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointTypes[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class RefractGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'refract';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['I', 'N', 'eta'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => 'refract');\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'refract';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.VEC3;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatMultGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_mult';\n\t}\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat0', 'quat1'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC4,\n\t\t\tConnectionPointType.VEC4,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat0', 'quat1'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_mult';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4, ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tAXIS = 'axis',\n\tANGLE = 'angle',\n}\nconst InputNames: Array<InputName> = [InputName.AXIS, InputName.ANGLE];\ninterface IDefaultValues {\n\t[InputName.AXIS]: Number3;\n\t[InputName.ANGLE]: number;\n}\nconst DEFAULT_AXIS: Number3 = [0, 0, 1];\nconst DEFAULT_ANGLE: number = 0;\nconst DefaultValues: IDefaultValues = {\n\t[InputName.AXIS]: DEFAULT_AXIS,\n\t[InputName.ANGLE]: DEFAULT_ANGLE,\n};\n\nexport class QuatFromAxisAngleGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.FLOAT,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.FLOAT];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAngleGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.FLOAT]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.FLOAT];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAxisGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_axis';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC3]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_axis';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC3];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC3, Quaternion)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {RampParam} from '../../params/Ramp';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nconst OUTPUT_NAME = 'val';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RampGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('ramp');\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new RampGlParamsConfig();\nexport class RampGlNode extends TypedGlNode<RampGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ramp';\n\t}\n\n\tinitialize() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst gl_type = ConnectionPointType.FLOAT;\n\t\tconst texture_name = this._uniform_name();\n\t\tconst var_name = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, texture_name);\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\n\t\tconst input_val = this.variable_for_input(this.p.input.name);\n\t\tconst body_line = `${gl_type} ${var_name} = texture2D(${this._uniform_name()}, vec2(${input_val}, 0.0)).x`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.RAMP,\n\t\t\tthis.pv.name,\n\t\t\tRampParam.DEFAULT_VALUE,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn 'ramp_texture_' + this.gl_var_name(OUTPUT_NAME);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'rand';\n\nclass RandomGlParamsConfig extends NodeParamsConfig {\n\tseed = ParamConfig.VECTOR2([1, 1]);\n}\nconst ParamsConfig = new RandomGlParamsConfig();\nexport class RandomGlNode extends TypedGlNode<RandomGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'random';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n\t\t// \t\tfunction_declaration_lines.push(`highp float rand2(vec2 co){\n\t\t// \thighp float a = 12.9898;\n\t\t// \thighp float b = 78.233;\n\t\t// \thighp float c = 43758.5453;\n\t\t// \thighp float dt= dot(co.xy ,vec2(a,b));\n\t\t// \thighp float sn= mod(dt,3.14);\n\t\t// \treturn fract(sin(sn) * c);\n\t\t// }`)\n\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input('vec2'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = rand(${value})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Rgb2Hsv from './gl/rgb2hsv.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'hsv';\nclass RgbToHsvGlParamsConfig extends NodeParamsConfig {\n\trgb = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new RgbToHsvGlParamsConfig();\nexport class RgbToHsvGlNode extends TypedGlNode<RgbToHsvGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rgb_to_hsv';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Rgb2Hsv));\n\n\t\tconst rgb = ThreeToGl.vector3(this.variable_for_input('rgb'));\n\n\t\tconst hsv = this.gl_var_name('hsv');\n\t\tbody_lines.push(`vec3 ${hsv} = rgb2hsv(${rgb})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 rgb2hsv(vec3 c)\\n{\\n\\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n\\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n\\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n\\tfloat d = q.x - min(q.w, q.y);\\n\\tfloat e = 1.0e-10;\\n\\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\"","import {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport Quaternion from './gl/quaternion.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nenum Mode {\n\tAXIS = 0,\n\tQUAT = 1,\n}\nconst Modes: Array<Mode> = [Mode.AXIS, Mode.QUAT];\n\ntype StringByMode = {[key in Mode]: string};\nconst LabelByMode: StringByMode = {\n\t[Mode.AXIS]: 'from axis + angle',\n\t[Mode.QUAT]: 'from quaternion',\n};\ntype StringArrayByMode = {[key in Mode]: string[]};\nconst InputNamesByMode: StringArrayByMode = {\n\t[Mode.AXIS]: ['vector', 'axis', 'angle'],\n\t[Mode.QUAT]: ['vector', 'quat'],\n};\nconst MethodNameByMode: StringByMode = {\n\t[Mode.AXIS]: 'rotate_with_axis_angle',\n\t[Mode.QUAT]: 'rotate_with_quat',\n};\ntype ConnectionTypeArrayByMode = {[key in Mode]: ConnectionPointType[]};\nconst InputTypesByMode: ConnectionTypeArrayByMode = {\n\t[Mode.AXIS]: [ConnectionPointType.VEC3, ConnectionPointType.VEC3, ConnectionPointType.FLOAT],\n\t[Mode.QUAT]: [ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n};\n\nconst DefaultValues: Dictionary<Number3> = {\n\tvector: [0, 0, 1],\n\taxis: [0, 1, 0],\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nclass RotateParamsConfig extends NodeParamsConfig {\n\tsignature = ParamConfig.INTEGER(Mode.AXIS, {\n\t\tmenu: {\n\t\t\tentries: Modes.map((mode, i) => {\n\t\t\t\tconst label = LabelByMode[mode];\n\t\t\t\treturn {name: label, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new RotateParamsConfig();\nexport class RotateGlNode extends BaseAdaptiveGlNode<RotateParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rotate';\n\t}\n\n\t// _signature_name: string = 'AXIS';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputNamesByMode[mode][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn MethodNameByMode[mode];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputTypesByMode[mode];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC3];\n\t}\n\tgl_function_definitions() {\n\t\tconst type = this._expected_output_types()[0];\n\t\treturn [new FunctionGLDefinition(this, type, Quaternion)];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\n// const OUTPUT_NAME = 'round'\n\nexport class RoundGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'round';\n\t}\n\n\t// initialize_node() {\n\t// \tsuper.initialize_node();\n\t// \tthis.set_named_outputs([new TypedConnectionFloat(v)]);\n\t// }\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'value', 1);\n\t// }\n\t// https://hub.jmonkeyengine.org/t/round-with-glsl/8186/6\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// \t\tfunction_declaration_lines.push(`highp float round(float num){\n\t\t// \treturn floor(num)-fract(num);\n\t\t// }`)\n\t\tconst input_connection = this.io.inputs.named_input_connection_points[0];\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input(input_connection.name));\n\n\t\tconst output_connection = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection.name);\n\n\t\tconst body_lines: string[] = [];\n\t\tconst lines_count = ConnectionPointComponentsCountMap[output_connection.type];\n\t\tif (lines_count == 1) {\n\t\t\tbody_lines.push(`${output_connection.type} ${var_name} = ${this._simple_line(value)}`);\n\t\t} else {\n\t\t\tconst simple_lines: string[] = ALL_COMPONENTS.map((c) => {\n\t\t\t\treturn this._simple_line(`${value}.${c}`);\n\t\t\t});\n\t\t\tbody_lines.push(\n\t\t\t\t`${output_connection.type} ${var_name} = ${output_connection.type}(${simple_lines.join(',')})`\n\t\t\t);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate _simple_line(value: string) {\n\t\treturn `sign(${value})*floor(abs(${value})+0.5)`;\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {FileCopNode} from '../cop/File';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextureParamsConfig extends NodeParamsConfig {\n\tparam_name = ParamConfig.STRING('texture_map');\n\tdefault_value = ParamConfig.STRING(FileCopNode.DEFAULT_NODE_PATH.UV);\n\tuv = ParamConfig.VECTOR2([0, 0]);\n}\nconst ParamsConfig = new TextureParamsConfig();\nexport class TextureGlNode extends TypedGlNode<TextureParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'texture';\n\t}\n\tstatic readonly OUTPUT_NAME = 'rgba';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(TextureGlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst uv = ThreeToGl.vector2(this.variable_for_input(this.p.uv.name));\n\n\t\tconst rgba = this.gl_var_name(TextureGlNode.OUTPUT_NAME);\n\t\tconst map = this._uniform_name();\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, map);\n\t\tconst body_line = `vec4 ${rgba} = texture2D(${map}, ${uv})`;\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.OPERATOR_PATH,\n\t\t\tthis.pv.param_name,\n\t\t\tthis.pv.default_value,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn this.gl_var_name(this.pv.param_name);\n\t}\n}\n","import {ParamlessTypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nconst OUTPUT_NAME = 'value';\nenum InputName {\n\tCONDITION = 'condition',\n\tIF_TRUE = 'if_true',\n\tIF_FALSE = 'if_false',\n}\nconst InputNames: Array<InputName> = [InputName.CONDITION, InputName.IF_TRUE, InputName.IF_FALSE];\n\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nexport class TwoWaySwitchGlNode extends ParamlessTypedGlNode {\n\tstatic type() {\n\t\treturn 'two_way_switch';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn InputNames[index];\n\t}\n\tprotected _gl_output_name() {\n\t\treturn OUTPUT_NAME;\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst second_or_third_connection =\n\t\t\tthis.io.connections.input_connection(1) || this.io.connections.input_connection(2);\n\t\tconst type: ConnectionPointType = second_or_third_connection\n\t\t\t? this.gl_connections_controller.connection_type_from_connection(second_or_third_connection)\n\t\t\t: ConnectionPointType.FLOAT;\n\t\treturn [ConnectionPointType.BOOL, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[1];\n\t\treturn [type];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines: string[] = [];\n\n\t\tconst value = this.gl_var_name(OUTPUT_NAME);\n\t\tconst condition = ThreeToGl.bool(this.variable_for_input(InputName.CONDITION));\n\t\tconst if_true = ThreeToGl.any(this.variable_for_input(InputName.IF_TRUE));\n\t\tconst if_false = ThreeToGl.any(this.variable_for_input(InputName.IF_FALSE));\n\n\t\tconst gl_type = this._expected_output_types()[1];\n\t\tbody_lines.push(`${gl_type} ${value}`);\n\t\tbody_lines.push(`if(${condition}){`);\n\t\tbody_lines.push(`${value} = ${if_true}`);\n\t\tbody_lines.push(`} else {`);\n\t\tbody_lines.push(`${value} = ${if_false}`);\n\t\tbody_lines.push(`}`);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n\tup: [0, 1, 0],\n};\n\nexport class VectorAlignGlNode extends MathFunctionArg3Factory('vector_align', {\n\tin: ['start', 'end', 'up'],\n\tmethod: 'vector_align_with_up',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC4];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg2Factory} from './_Math_Arg2';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n};\n\nexport class VectorAngleGlNode extends MathFunctionArg2Factory('vector_angle', {\n\tin: ['start', 'end'],\n\tmethod: 'vector_angle',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import {CATEGORY_MAT} from './Category';\n\nimport {MeshBasicMatNode} from '../../nodes/mat/MeshBasic';\nimport {MeshBasicBuilderMatNode} from '../../nodes/mat/MeshBasicBuilder';\nimport {MeshLambertMatNode} from '../../nodes/mat/MeshLambert';\nimport {MeshLambertBuilderMatNode} from '../../nodes/mat/MeshLambertBuilder';\nimport {MeshStandardMatNode} from '../../nodes/mat/MeshStandard';\nimport {MeshStandardBuilderMatNode} from '../../nodes/mat/MeshStandardBuilder';\nimport {PointsMatNode} from '../../nodes/mat/Points';\nimport {PointsBuilderMatNode} from '../../nodes/mat/PointsBuilder';\n\nexport interface MatNodeChildrenMap {\n\tmesh_basic: MeshBasicMatNode;\n\tmesh_basic_builder: MeshBasicBuilderMatNode;\n\tmesh_lambert: MeshLambertMatNode;\n\tmesh_lambert_builder: MeshLambertBuilderMatNode;\n\tmesh_standard: MeshStandardMatNode;\n\tmesh_standard_builder: MeshStandardBuilderMatNode;\n\tpoints: PointsMatNode;\n\tpoints_builder: PointsBuilderMatNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class MatRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(MeshBasicMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshBasicBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshLambertMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshLambertBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshStandardMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshStandardBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(PointsMatNode, CATEGORY_MAT.POINTS);\n\t\tpoly.register_node(PointsBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t}\n}\n","import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends TypedMatNode<MeshBasicMaterial, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class MaterialContainer extends TypedContainer<ContainableMap['MATERIAL']> {\n\tset_content(content: ContainableMap['MATERIAL']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_material(material: Material) {\n\t\tif (this._content != null) {\n\t\t\tthis._content.dispose();\n\t\t}\n\t\tthis.set_content(material);\n\t}\n\thas_material() {\n\t\treturn this.has_content();\n\t}\n\tmaterial() {\n\t\treturn this.content();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerBasic} from '../gl/code/assemblers/materials/Basic';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerBasic, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerBasic>(this, ShaderAssemblerBasic);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerBasic extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.basic;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst material = new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\tlights: false,\n\t\t\t// depthTest: true,\n\t\t\t// alphaTest: 0.5,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {RGBADepthPacking} from 'three/src/constants';\n// import {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomMeshDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n// fragment: 'vec4 diffuseColor = vec4( 1.0 );' // do not change? unless there is a texture lookup\n\nexport class ShaderAssemblerCustomMeshDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n}\"","import {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends TypedMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerLambert} from '../gl/code/assemblers/materials/Lambert';\n\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerLambert, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerLambert>(this, ShaderAssemblerLambert);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerLambert extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.lambert;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\tconst material = new ShaderMaterial({\n\t\t\tlights: true,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerStandard} from '../gl/code/assemblers/materials/Standard';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\n\nimport {SHADER_DEFAULTS} from './MeshStandard';\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_metalness(node as MeshStandardBuilderMatNode),\n\t});\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_roughness(node as MeshStandardBuilderMatNode),\n\t});\n}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardBuilderMatNode extends TypedBuilderMatNode<\n\tShaderAssemblerStandard,\n\tMeshStandardMatParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tuniforms: true,\n\t\tdirect_params: true,\n\t\tdefine: false,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerStandard>(this, ShaderAssemblerStandard);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\t\tawait TextureEnvMapController.update(this);\n\n\t\tif (this._material) {\n\t\t\tthis._material.uniforms.envMapIntensity.value = this.pv.env_map_intensity;\n\t\t\tMeshStandardBuilderMatNode._update_metalness(this);\n\t\t\tMeshStandardBuilderMatNode._update_roughness(this);\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n\tstatic _update_metalness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.metalness.value = node.pv.metalness;\n\t}\n\tstatic _update_roughness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.roughness.value = node.pv.roughness;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMesh} from './_BaseMesh';\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport metalnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl';\nimport roughnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl';\nimport {OutputGlNode} from '../../../Output';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {ParamType} from '../../../../../poly/ParamType';\n\nexport class ShaderAssemblerStandard extends ShaderAssemblerMesh {\n\tis_physical() {\n\t\treturn false;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = this.is_physical() ? ShaderLib.physical : ShaderLib.standard;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst options = {\n\t\t\tlights: true,\n\t\t\textensions: {\n\t\t\t\tderivatives: true,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t};\n\t\t// if(this.constructor.is_physical()){\n\t\t// \toptions['defines'] = {\n\t\t// \t\tPHYSICAL: 1\n\t\t// \t}\n\t\t// }\n\n\t\tconst material = new ShaderMaterial(options);\n\n\t\t// replace some shader chunks\n\t\tmaterial.onBeforeCompile = function(shader) {\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <metalnessmap_fragment>',\n\t\t\t\tmetalnessmap_fragment\n\t\t\t);\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <roughnessmap_fragment>',\n\t\t\t\troughnessmap_fragment\n\t\t\t);\n\t\t};\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material {\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial;\n\t// \tconst options = {};\n\t// \tthis._match_uniform('color', options, material, 'diffuse');\n\t// \tthis._match_uniform('map', options, material);\n\t// \tthis._match_uniform('envMap', options, material);\n\t// \tthis._match_uniform('envMapIntensity', options, material);\n\t// \tthis._match_uniform('metalness', options, material);\n\t// \tthis._match_uniform('roughness', options, material);\n\t// \tconst gltf_material = new gltf_constructor(options);\n\t// \treturn gltf_material;\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\t// those defaults should be 1. If they were 0, using the params\n\t\t// at the material level would appear not to work\n\t\toutput_child.add_param(ParamType.FLOAT, 'metalness', 1);\n\t\toutput_child.add_param(ParamType.FLOAT, 'roughness', 1);\n\t}\n\t// create_globals_node_output_connections(){\n\t// \treturn BaseShaderAssembler.create_globals_node_output_connections().concat([\n\t// \t\tnew Connection.Float('metalness'),\n\t// \t\tnew Connection.Float('roughness'),\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha', 'metalness', 'roughness'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('metalness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_metalness = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('roughness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_roughness = ',\n\t\t\t}),\n\t\t]);\n\t}\n}\n","export default \"float metalnessFactor = metalness * POLY_metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\"","export default \"float roughnessFactor = roughness * POLY_roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\"","import {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\n// import {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\n// import {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\tsize_attenuation = ParamConfig.BOOLEAN(1);\n\t};\n}\n\nclass PointsMatParamsConfig extends SideParamConfig(ColorParamConfig(PointsParamConfig(NodeParamsConfig))) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends TypedMatNode<PointsMaterial, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points';\n\t}\n\n\tcreate_material() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.material.size = this.pv.size;\n\t\tthis.material.sizeAttenuation = this.pv.size_attenuation;\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderAssemblerCustomPointsDepth} from './CustomPointsDepth';\nimport {ShaderAssemblerCustomPointsDistance} from './CustomPointsDistance';\nimport {ShaderAssemblerCustomPointsDepthDOF} from './CustomPointsDepthDOF';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', 'gl_PointSize = size;']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst CUSTOM_ASSEMBLER_MAP: CustomAssemblerMap = new Map();\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomPointsDistance);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomPointsDepth);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomPointsDepthDOF);\n\nexport class ShaderAssemblerPoints extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'diffuseColor' }\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn CUSTOM_ASSEMBLER_MAP;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = ShaderLib.points;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\t// const uniforms = UniformsUtils.clone( template_shader.uniforms )\n\t\t// uniforms.size.value = 10\n\n\t\tconst material = new ShaderMaterial({\n\t\t\ttransparent: true,\n\t\t\tfog: true,\n\n\t\t\t// size: 10,\n\t\t\t// //blending: AdditiveBlending\n\t\t\t// depthTest: true,\n\t\t\t// depthwrite: true,\n\t\t\t// alphaTest: 0.5,\n\t\t\tdefines: {\n\t\t\t\t// ALPHATEST: 0.5,\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\t// protected insert_body_after(shader_name){\n\t// \treturn {\n\t// \t\tvertex: 'gl_PointSize = size;',\n\t// \t\tfragment: 'vec4 diffuseColor = vec4( diffuse, opacity );'\n\t// \t}[shader_name]\n\t// }\n\t// those shadow shaders should ideally be overriden\n\t// to properly take into account point size\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\toutput_child.add_param(ParamType.FLOAT, 'gl_PointSize', 1);\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections().concat([\n\t\t\tnew TypedNamedConnectionPoint('gl_PointCoord', ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\t// add_globals_params(globals_node){\n\t// \tBaseShaderAssembler.add_globals_params(globals_node)\n\t// \tglobals_node.set_named_outputs([\n\t// \t\tnew Connection.Vec3('position'),\n\t// \t\tnew Connection.Vec3('color'),\n\t// \t\tnew Connection.Vec3('normal'),\n\t// \t\tnew Connection.Vec4('gl_FragCoord'),\n\t// \t\tnew Connection.Vec2('gl_PointCoord'),\n\t// \t\t// new TypedConnectionVec2('uv'),\n\t// \t\tnew Connection.Float('frame')\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv', 'gl_PointSize'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('gl_PointSize', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'gl_PointSize = ',\n\t\t\t\tsuffix: ' * size * 10.0', // currently using 10 as 1 seems really small\n\t\t\t}),\n\t\t]);\n\t\t// \tnew VariableConfig('position', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t// \t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t// \t\tprefix: 'vec3 transformed = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('normal', {\n\t\t// \t\tprefix: 'objectNormal = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('color', {\n\t\t// \t\tprefix: 'diffuseColor.xyz = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('alpha', {\n\t\t// \t\tprefix: 'diffuseColor.w = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('uv', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\tprefix: 'vUv = ',\n\t\t// \t\tif: 'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )'\n\t\t// \t}),\n\t\t// \tnew VariableConfig('gl_PointSize', {\n\t\t// \t\tdefault: '1.0',\n\t\t// \t\tprefix: 'gl_PointSize = ',\n\t\t// \t\tsuffix: ' * size',\n\t\t// \t}),\n\t\t// ]\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepth.vert.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDistance.vert.glsl';\n\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\\n// #define DISTANCE\\n// varying vec3 vWorldPosition;\\n// #include <common>\\n// #include <uv_pars_vertex>\\n// #include <displacementmap_pars_vertex>\\n// #include <morphtarget_pars_vertex>\\n// #include <skinning_pars_vertex>\\n// #include <clipping_planes_pars_vertex>\\n// void main() {\\n// \\t#include <uv_vertex>\\n// \\t#include <skinbase_vertex>\\n// \\t#ifdef USE_DISPLACEMENTMAP\\n// \\t\\t#include <beginnormal_vertex>\\n// \\t\\t#include <morphnormal_vertex>\\n// \\t\\t#include <skinnormal_vertex>\\n// \\t#endif\\n// \\t#include <begin_vertex>\\n// \\t#include <morphtarget_vertex>\\n// \\t#include <skinning_vertex>\\n// \\t#include <displacementmap_vertex>\\n// \\t#include <project_vertex>\\n// \\t#include <worldpos_vertex>\\n// \\t#include <clipping_planes_vertex>\\n// \\tvWorldPosition = worldPosition.xyz;\\n// }\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib'\n// import {RGBADepthPacking} from 'three/src/constants'\n// import {BasicDepthPacking} from 'three/src/constants'\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tsize: {value: 1},\n\t\t\t\tscale: {value: 1},\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\t\t\tdepthTest: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\"","import {CATEGORY_OBJ} from './Category';\n\nimport {AmbientLightObjNode} from '../../nodes/obj/AmbientLight';\nimport {AreaLightObjNode} from '../../nodes/obj/AreaLight';\nimport {DirectionalLightObjNode} from '../../nodes/obj/DirectionalLight';\nimport {HemisphereLightObjNode} from '../../nodes/obj/HemisphereLight';\nimport {PointLightObjNode} from '../../nodes/obj/PointLight';\nimport {SpotLightObjNode} from '../../nodes/obj/SpotLight';\n\nimport {EventsObjNode} from '../../nodes/obj/Events';\nimport {MaterialsObjNode} from '../../nodes/obj/Materials';\nimport {CopObjNode} from '../../nodes/obj/Cop';\nimport {PostProcessObjNode} from '../../nodes/obj/PostProcess';\n\nimport {GeoObjNode} from '../../nodes/obj/Geo';\nimport {NullObjNode} from '../../nodes/obj/Null';\nimport {FogObjNode} from '../../nodes/obj/Fog';\nimport {SceneObjNode} from '../../nodes/obj/Scene';\n\nimport {OrthographicCameraObjNode} from '../../nodes/obj/OrthographicCamera';\nimport {PerspectiveCameraObjNode} from '../../nodes/obj/PerspectiveCamera';\n// import {CubeCameraObj} from '../../nodes/obj/CubeCamera';\n\nexport interface ObjNodeChildrenMap {\n\tambient_light: AmbientLightObjNode;\n\tarea_light: AreaLightObjNode;\n\tcop: CopObjNode;\n\tdirectional_light: DirectionalLightObjNode;\n\tevents: EventsObjNode;\n\tfog: FogObjNode;\n\tgeo: GeoObjNode;\n\themisphere_light: HemisphereLightObjNode;\n\tmaterials: MaterialsObjNode;\n\tnull: NullObjNode;\n\torthographic_camera: OrthographicCameraObjNode;\n\tperspective_camera: PerspectiveCameraObjNode;\n\tpoint_light: PointLightObjNode;\n\tpost_process: PostProcessObjNode;\n\tscene: SceneObjNode;\n\tspot_light: SpotLightObjNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class ObjRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AmbientLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(AreaLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(DirectionalLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(HemisphereLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(PointLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(SpotLightObjNode, CATEGORY_OBJ.LIGHT);\n\n\t\tpoly.register_node(EventsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(MaterialsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(CopObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(PostProcessObjNode, CATEGORY_OBJ.MANAGER);\n\n\t\tpoly.register_node(GeoObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(NullObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(SceneObjNode, CATEGORY_OBJ.MISC);\n\n\t\tpoly.register_node(OrthographicCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\tpoly.register_node(PerspectiveCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\t// poly.register_node(CubeCameraObj, CATEGORY_OBJ.CAMERA)\n\n\t\tpoly.register_node(FogObjNode, CATEGORY_OBJ.MISC);\n\t}\n}\n","import {AmbientLight} from 'three/src/lights/AmbientLight';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AmbientLightObjParamsConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n}\nconst ParamsConfig = new AmbientLightObjParamsConfig();\n\nexport class AmbientLightObjNode extends TypedLightObjNode<AmbientLight, AmbientLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'ambient_light';\n\t}\n\n\tcreate_light() {\n\t\treturn new AmbientLight();\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ObjectContainer extends TypedContainer<ContainableMap['OBJECT']> {\n\tset_content(content: ContainableMap['OBJECT']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_object(object: Object3D) {\n\t\treturn this.set_content(object);\n\t}\n\thas_object() {\n\t\treturn this.has_content();\n\t}\n\tobject() {\n\t\treturn this.content();\n\t}\n\n\t// infos() {\n\t// \tconst node = this.node()\n\t// \treturn [\n\t// \t\t`full path: ${node.full_path()}`,\n\t// \t\t`${node.cooks_count()} cooks`,\n\t// \t\t`cook time: ${node.cook_time()}`,\n\t// \t\tthis.content(),\n\t// \t]\n\t// }\n}\n","import {RectAreaLight} from 'three/src/lights/RectAreaLight';\n// import {RectAreaLightHelper} from '../../../../modules/three/examples/jsm/helpers/RectAreaLightHelper';\nimport {RectAreaLightUniformsLib} from '../../../../modules/three/examples/jsm/lights/RectAreaLightUniformsLib';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {HelperController, HelperParamConfig} from './utils/HelperController';\n\nexport function AreaLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\twidth = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\theight = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t};\n}\n\nclass AreaLightObjParamsConfig extends AreaLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new AreaLightObjParamsConfig();\n\nexport class AreaLightObjNode extends BaseLightTransformedObjNode<RectAreaLight, AreaLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'area_light';\n\t}\n\t// private _helper_controller = new HelperController<RectAreaLightHelper, RectAreaLight>(this, RectAreaLightHelper);\n\t// initialize_node() {\n\t// \tthis._helper_controller.initialize_node();\n\t// }\n\n\tcreate_light() {\n\t\tconst object = new RectAreaLight(0xffffff, 1, 1, 1);\n\n\t\treturn object;\n\t}\n\n\t// create_light_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \tthis.add_param(ParamType.FLOAT, 'intensity', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'width', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'height', 1, {range: [0, 10]});\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.width = this.pv.width;\n\t\tthis.light.height = this.pv.height;\n\t\t// this._helper_controller.update();\n\t}\n\n\tasync cook() {\n\t\t// const {RectAreaLightUniformsLib} = await CoreScriptLoader.load_module_three_light('RectAreaLightUniformsLib');\n\t\t// const module = RectAreaLightUniformsLib\n\t\tif (!(RectAreaLightUniformsLib as any).initialized) {\n\t\t\tRectAreaLightUniformsLib.init();\n\t\t\t(RectAreaLightUniformsLib as any).initialized = true;\n\t\t}\n\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {DirectionalLightHelper} from './utils/helpers/DirectionalLightHelper';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {NodeContext} from '../../poly/NodeContext';\n// import {BaseObjNodeType} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nexport function DirectionalLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// transform = ParamConfig.FOLDER();\n\t\t// directional\n\t\t// position = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// target = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// lookat = ParamConfig.OPERATOR_PATH('', {dependent_on_found_node: false});\n\n\t\tlight = ParamConfig.FOLDER();\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1);\n\t\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t\t// shadows\n\t\tcast_shadows = ParamConfig.BOOLEAN(1);\n\t\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\t\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t\t// helper\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\n\nclass DirectionalLightObjParamsConfig extends DirectionalLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new DirectionalLightObjParamsConfig();\n\nexport class DirectionalLightObjNode extends BaseLightTransformedObjNode<\n\tDirectionalLight,\n\tDirectionalLightObjParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'directional_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<DirectionalLight>(\n\t\tthis,\n\t\t(<unknown>DirectionalLightHelper) as HelperConstructor<DirectionalLight>,\n\t\t'DirectionalLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new DirectionalLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'DirectionalLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\t// this.light.position.copy(this.pv.t);\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.shadow.camera.far = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\n\t\t// updating the camera matrix is not necessary for point light\n\t\t// so probably should not for this\n\t\tthis.light.shadow.camera.updateProjectionMatrix();\n\t}\n}\n","// import {Object3D} from 'three/src/core/Object3D';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {DirectionalLightObjNode} from '../../DirectionalLight';\nimport {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {Line} from 'three/src/objects/Line';\n\nexport class DirectionalLightHelper extends BaseLightHelper<DirectionalLight, DirectionalLightObjNode> {\n\tprivate _square = new Line();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst size = 1;\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(\n\t\t\t\t[-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tthis._square.geometry = geometry;\n\t\tthis._square.material = this._line_material;\n\t\tthis._square.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._square);\n\t}\n\n\t// private _v1 = new Vector3();\n\t// private _v2 = new Vector3();\n\t// private _v3 = new Vector3();\n\tupdate() {\n\t\t// this._v1.copy(this.node.light.position);\n\t\t// this._v2.copy(this.node.light.target.position);\n\t\t// this._v3.subVectors(this._v2, this._v1);\n\n\t\t// this._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\t// this._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\t// this._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {HemisphereLight} from 'three/src/lights/HemisphereLight';\nimport {HemisphereLightHelper} from './utils/helpers/HemisphereLightHelper';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nclass HemisphereLightObjParamsConfig extends NodeParamsConfig {\n\tsky_color = ParamConfig.COLOR([0.2, 0.7, 1]);\n\tground_color = ParamConfig.COLOR([0.1, 0.1, 0.25]);\n\tintensity = ParamConfig.FLOAT(1);\n\tposition = ParamConfig.VECTOR3([0, 1, 0]);\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new HemisphereLightObjParamsConfig();\n\nexport class HemisphereLightObjNode extends TypedLightObjNode<HemisphereLight, HemisphereLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hemisphere_light';\n\t}\n\tprivate _helper_controller = new HelperController<HemisphereLight>(\n\t\tthis,\n\t\t(<unknown>HemisphereLightHelper) as HelperConstructor<HemisphereLight>,\n\t\t'HemisphereLightHelper'\n\t);\n\n\tcreate_light() {\n\t\tconst light = new HemisphereLight();\n\n\t\treturn light;\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.sky_color;\n\t\tthis.light.groundColor = this.pv.ground_color;\n\t\tthis.light.position.copy(this.pv.position);\n\t\tthis.light.intensity = this.pv.intensity;\n\n\t\tthis._helper_controller.update();\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {OctahedronBufferGeometry} from 'three/src/geometries/OctahedronGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\nimport {HemisphereLightObjNode} from '../../HemisphereLight';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {HemisphereLight} from 'three/src/lights/HemisphereLight';\n\nexport class HemisphereLightHelper extends BaseLightHelper<HemisphereLight, HemisphereLightObjNode> {\n\tprivate _geometry = new OctahedronBufferGeometry(1);\n\n\tprotected build_helper() {\n\t\tthis._geometry.rotateZ(Math.PI * 0.5);\n\n\t\tthis._material.vertexColors = true;\n\n\t\tconst position = this._geometry.getAttribute('position');\n\t\tconst colors = new Float32Array(position.count * 3);\n\n\t\tthis._geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\tthis._object.geometry = this._geometry;\n\t\tthis._object.material = this._material;\n\t}\n\n\t// private _inverse_position = new Vector3();\n\tprivate _quat = new Quaternion();\n\tprivate _default_position = new Vector3(0, 1, 0);\n\tprivate _color1 = new Color();\n\tprivate _color2 = new Color();\n\tupdate() {\n\t\tif (!this.node.pv.position) {\n\t\t\treturn;\n\t\t}\n\t\t// this._inverse_position.copy(this.node.pv.position).multiplyScalar(-1)\n\t\tthis._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\tthis._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\tthis._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tconst colors = this._geometry.getAttribute('color') as BufferAttribute;\n\n\t\tthis._color1.copy(this.node.light.color);\n\t\tthis._color2.copy(this.node.light.groundColor);\n\n\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\tconst color = i < l / 2 ? this._color1 : this._color2;\n\n\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\t}\n}\n","import {PointLight} from 'three/src/lights/PointLight';\nimport {PointLightHelper} from './utils/helpers/PointLightHelper';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\n// import {HelperController} from './utils/HelperController';\nclass PointLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tdecay = ParamConfig.FLOAT(0.1);\n\tdistance = ParamConfig.FLOAT(100);\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024], {visible_if: {cast_shadows: 1}});\n\tshadow_bias = ParamConfig.FLOAT(0.001, {visible_if: {cast_shadows: 1}});\n\tshadow_near = ParamConfig.FLOAT(1, {visible_if: {cast_shadows: 1}});\n\tshadow_far = ParamConfig.FLOAT(100, {visible_if: {cast_shadows: 1}});\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new PointLightObjParamsConfig();\n\nexport class PointLightObjNode extends BaseLightTransformedObjNode<PointLight, PointLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point_light';\n\t}\n\tprivate _helper_controller = new HelperController<PointLight>(\n\t\tthis,\n\t\t(<unknown>PointLightHelper) as HelperConstructor<PointLight>,\n\t\t'PointLightHelper'\n\t);\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new PointLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\treturn light;\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.decay = this.pv.decay;\n\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\tthis.light.shadow.camera.near = this.pv.shadow_near;\n\t\tthis.light.shadow.camera.far = this.pv.shadow_far;\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {PointLightObjNode} from '../../PointLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {PointLight} from 'three/src/lights/PointLight';\n\nexport class PointLightHelper extends BaseLightHelper<PointLight, PointLightObjNode> {\n\tprotected build_helper() {\n\t\tconst size = 1;\n\t\tthis._object.geometry = new SphereBufferGeometry(size, 4, 2);\n\t\tthis._object.material = this._material;\n\t}\n\n\tupdate() {\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\t\tthis._material.color.copy(this.node.light.color);\n\t}\n}\n","import {SpotLight} from 'three/src/lights/SpotLight';\n// import {SpotLightHelper} from 'three/src/helpers/SpotLightHelper';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {SpotLightHelper} from './utils/helpers/SpotLightHelper';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {HelperController} from './utils/HelperController';\nclass SpotLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tangle = ParamConfig.FLOAT(45, {range: [0, 180]});\n\tpenumbra = ParamConfig.FLOAT(0.1);\n\tdecay = ParamConfig.FLOAT(0.1, {range: [0, 1]});\n\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t// target = ParamConfig.OPERATOR_PATH('');\n\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new SpotLightObjParamsConfig();\n\nexport class SpotLightObjNode extends BaseLightTransformedObjNode<SpotLight, SpotLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'spot_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<SpotLight>(\n\t\tthis,\n\t\t(<unknown>SpotLightHelper) as HelperConstructor<SpotLight>,\n\t\t'SpotLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new SpotLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'SpotLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.angle = this.pv.angle * (Math.PI / 180);\n\t\tthis.light.penumbra = this.pv.penumbra;\n\t\tthis.light.decay = this.pv.decay;\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {SpotLightObjNode} from '../../SpotLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {SpotLight} from 'three/src/lights/SpotLight';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n\nexport class SpotLightHelper extends BaseLightHelper<SpotLight, SpotLightObjNode> {\n\tprivate _cone = new LineSegments();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\tconst p1 = (i / l) * Math.PI * 2;\n\t\t\tconst p2 = (j / l) * Math.PI * 2;\n\n\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t}\n\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tthis._cone.geometry = geometry;\n\n\t\tthis._cone.material = this._line_material;\n\t\tthis._cone.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._cone);\n\t}\n\n\tupdate() {\n\t\tconst coneLength = (this.node.light.distance ? this.node.light.distance : 1000) * this.node.pv.helper_size;\n\t\tconst coneWidth = coneLength * Math.tan(this.node.light.angle);\n\n\t\tthis._cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {EventNodeChildrenMap} from '../../poly/registers/Event';\nimport {BaseEventNodeType} from '../event/_Base';\n\nexport class EventsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.EVENT;\n\tstatic type() {\n\t\treturn 'events';\n\t}\n\n\tprotected _children_controller_context = NodeContext.EVENT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as EventNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseEventNodeType[];\n\t}\n\tnodes_by_type<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as EventNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {MatNodeChildrenMap} from '../../poly/registers/Mat';\nimport {BaseMatNodeType} from '../mat/_Base';\n\nexport class MaterialsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MAT;\n\tstatic type() {\n\t\treturn 'materials';\n\t}\n\t// children_context(){ return NodeContext.MAT }\n\n\tprotected _children_controller_context = NodeContext.MAT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as MatNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseMatNodeType[];\n\t}\n\tnodes_by_type<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as MatNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CopNodeChildrenMap} from '../../poly/registers/Cop';\nimport {BaseCopNodeType} from '../cop/_Base';\n\nexport class CopObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'cop';\n\t}\n\t// children_context(){ return NodeContext.COP }\n\n\tprotected _children_controller_context = NodeContext.COP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n\n\tcreate_node<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as CopNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseCopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as CopNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class PostProcessObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'post_process';\n\t}\n\t// children_context(){ return NodeContext.POST }\n\n\tprotected _children_controller_context = NodeContext.POST;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n// const THREE = {Group};\n\n// import {CoreTransform} from '../../../core/Transform';\n\nimport {BaseNodeType} from '../_Base';\nimport {DisplayNodeController} from '../utils/DisplayNodeController';\nimport {NodeContext} from '../../poly/NodeContext';\n\n//import Layers from './Concerns/Layers'\n// import {Transformed} from './Concerns/Transformed';\n\n// sop map\nimport {BaseSopNodeType} from '../sop/_Base';\n// import {PolyScene} from '../../scene/PolyScene';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n\nimport {GeoNodeChildrenMap} from '../../poly/registers/Sop';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass GeoObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tdisplay = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new GeoObjParamConfig();\n\nexport class GeoObjNode extends TypedObjNode<Group, GeoObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'geo';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tprotected _display_node_controller: DisplayNodeController = new DisplayNodeController(this);\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprivate _sop_group = this._create_sop_group();\n\tprivate _create_sop_group() {\n\t\treturn new Group();\n\t}\n\tget sop_group() {\n\t\treturn this._sop_group;\n\t}\n\tset_sop_group_name() {\n\t\tthis._sop_group.name = `${this.full_path()}:sop_group`;\n\t}\n\n\t// children_context() {\n\t// \treturn NodeContext.SOP;\n\t// }\n\n\tprotected _children_controller_context = NodeContext.SOP;\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tprivate _on_child_add_bound = this._on_child_add.bind(this);\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add_bound);\n\n\t\tthis.display_node_controller.initialize_node();\n\t\tthis.transform_controller.initialize_node();\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active);\n\t\t// });\n\n\t\tthis.object.add(this.sop_group);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_sop_group_name.bind(this));\n\t\tthis._create_sop_group();\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.outputs.set_has_one_output();\n\t}\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\t//base_layers_included: -> false\n\n\t// create_params() {\n\t// \t// CoreTransform.create_params(this);\n\t// }\n\t//this.create_layers_params()\n\n\trequest_display_node() {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: typescript\n\t\t// if (this.is_displayed)\n\t\t// \tconst display_node = this.display_node();\n\t\t// \tif (display_node) {\n\t\t// \t\tdisplay_node.request_container_p().then(async (container) => {\n\t\t// \t\t\tif (!this._sop_loaded) {\n\t\t// \t\t\t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._sop_loaded = true;\n\n\t\t// \t\t\tconst update_needed = await this.display_node_objects_changed(container);\n\t\t// \t\t\tif (update_needed) {\n\t\t// \t\t\t\tthis.remove_display_node_group();\n\t\t// \t\t\t\tawait this.add_display_node_group(container);\n\t\t// \t\t\t}\n\t\t// \t\t\t// this.set_needsUpdate(container)\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\tthis._sop_loaded = true;\n\t\t// \t}\n\t\t// }\n\t}\n\n\tis_display_node_cooking(): boolean {\n\t\tif (this.flags.display.active) {\n\t\t\tconst display_node = this._display_node_controller.display_node;\n\t\t\treturn display_node ? display_node.is_dirty : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcreate_node<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GeoNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseSopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GeoNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// HOOK\n\t//\n\t//\n\t_on_create() {\n\t\tthis.create_node('text');\n\t}\n\t_on_child_add(node: BaseNodeType) {\n\t\tif (this.scene.loading_controller.loaded) {\n\t\t\tif (this.children().length == 1) {\n\t\t\t\tnode.flags?.display?.set(true);\n\t\t\t}\n\t\t}\n\t}\n\t// post_display_flag_node_set_dirty() {\n\t// \tthis.request_display_node();\n\t// }\n\n\t//\n\t//\n\t// COOK\n\t//\n\t//\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\t//this.update_layers()\n\n\t\tthis.object.visible = this.pv.display;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {GeoObjNode} from '../obj/Geo';\nimport {BaseSopNodeType} from '../sop/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class DisplayNodeController {\n\t_graph_node: CoreGraphNode;\n\t_display_node: BaseSopNodeType | undefined;\n\t_children_uuids_dict: Dictionary<boolean> = {};\n\t_children_length: number = 0;\n\tprivate _request_display_node_container_bound = this.request_display_node_container.bind(this);\n\tconstructor(protected node: GeoObjNode) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'DisplayNodeController');\n\n\t\tthis._graph_node.dirty_controller.add_post_dirty_hook(\n\t\t\t'_request_display_node_container',\n\t\t\tthis._request_display_node_container_bound\n\t\t);\n\t}\n\n\tget display_node() {\n\t\treturn this._display_node;\n\t}\n\tprivate _parent_object: Object3D | undefined;\n\tset_parent_object(object: Object3D) {\n\t\tthis._parent_object = object;\n\t}\n\tget parent_object() {\n\t\treturn this._parent_object || this.node.object;\n\t}\n\n\tinitialize_node() {\n\t\tthis.set_parent_object(this.node.sop_group);\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.node.sop_group.visible = this.used_in_scene;\n\t\t\tif (this.node.flags.display.active) {\n\t\t\t\tthis.request_display_node_container();\n\t\t\t}\n\t\t});\n\n\t\tthis.node.lifecycle.add_on_child_add_hook((child_node) => {\n\t\t\tif (!this._display_node) {\n\t\t\t\tchild_node.flags?.display?.set(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync set_display_node(new_display_node: BaseSopNodeType) {\n\t\tif (this._display_node != new_display_node) {\n\t\t\tconst old_display_node = this._display_node;\n\t\t\tif (old_display_node) {\n\t\t\t\told_display_node.flags.display.set(false);\n\t\t\t\tthis._graph_node.remove_graph_input(old_display_node);\n\t\t\t\tthis.remove_children();\n\t\t\t}\n\t\t\tthis._display_node = new_display_node;\n\t\t\tif (this._display_node) {\n\t\t\t\tthis._graph_node.add_graph_input(this._display_node);\n\t\t\t}\n\t\t\tthis.request_display_node_container();\n\t\t}\n\t}\n\n\tremove_children() {\n\t\tlet child: Object3D | undefined;\n\t\twhile ((child = this.parent_object.children.pop())) {\n\t\t\tthis.parent_object.remove(child);\n\t\t}\n\t}\n\n\tget used_in_scene() {\n\t\treturn this.node.used_in_scene && this.node.flags.display.active && this.node.pv.display == true;\n\t}\n\n\tprivate async request_display_node_container() {\n\t\tif (!this.node.scene.loading_controller.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.used_in_scene) {\n\t\t\tif (this._display_node) {\n\t\t\t\tconst container = await this._display_node.request_container();\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\t// check if the new objects are different\n\t\t\t\t\tconst new_objects = core_group.objects();\n\t\t\t\t\tlet new_objects_are_different = new_objects.length != this._children_length;\n\t\t\t\t\tif (!new_objects_are_different) {\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tif (!(object.uuid in this._children_uuids_dict)) {\n\t\t\t\t\t\t\t\tnew_objects_are_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update hierarchy if different\n\t\t\t\t\tif (new_objects_are_different) {\n\t\t\t\t\t\tthis.remove_children();\n\t\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tthis.parent_object.add(object);\n\t\t\t\t\t\t\tthis._children_uuids_dict[object.uuid] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._children_length = new_objects.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.remove_children();\n\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\tthis._children_length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n// import {CoreTransform} from '../../../core/Transform';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {AxesHelper} from 'three/src/helpers/AxesHelper';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass NullObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\nconst ParamsConfig = new NullObjParamConfig();\n\nexport class NullObjNode extends TypedObjNode<Group, NullObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tprivate _helper = new AxesHelper(1);\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\tinitialize_node() {\n\t\tthis.transform_controller.initialize_node();\n\t\tthis.object.add(this._helper);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis._helper.visible = this.flags.display.active;\n\t\t});\n\t}\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {BaseNode} from '../_Base';\nimport {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {FogExp2} from 'three/src/scenes/FogExp2';\nimport {Fog} from 'three/src/scenes/Fog';\nimport {Color} from 'three/src/math/Color';\n\nconst DEFAULT = {\n\tcolor: new Color(1, 1, 1),\n\tnear: 0,\n\tfar: 100,\n\tdensity: 0.00025,\n};\n\n// export Fog = (function() {\n// \tlet DEFAULT = undefined;\n// \tFog = class Fog extends BaseModules {\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {FlagsControllerD} from '../utils/FlagsController';\nclass FogObjParamConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR(DEFAULT.color.toArray() as [number, number, number]);\n\texponential = ParamConfig.BOOLEAN(0);\n\tdensity = ParamConfig.FLOAT(1);\n\tnear = ParamConfig.FLOAT(0, {range: [0, 100]});\n\tfar = ParamConfig.FLOAT(100, {range: [0, 100]});\n}\nconst ParamsConfig = new FogObjParamConfig();\nexport class FogObjNode extends TypedObjNode<Object3D, FogObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\n\tprotected _linear_fog!: Fog;\n\tprotected _linear_fogexp2!: FogExp2;\n\n\tinitialize_node() {\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_dirtyable_hook();\n\n\t\tthis._linear_fog = new Fog(DEFAULT.color.getHex(), DEFAULT.near, DEFAULT.far);\n\t\tthis._linear_fogexp2 = new FogExp2(DEFAULT.color.getHex(), DEFAULT.density);\n\t}\n\tstatic type() {\n\t\treturn 'fog';\n\t}\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', DEFAULT.color.toArray() as [number, number, number]);\n\t// \tthis.add_param(ParamType.BOOLEAN, 'exponential', 0);\n\t// \tthis.add_param(ParamType.FLOAT, 'density', DEFAULT.density);\n\t// \tthis.add_param(ParamType.FLOAT, 'near', DEFAULT.near, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// \tthis.add_param(ParamType.FLOAT, 'far', DEFAULT.far, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// }\n\n\t// get_fog: (callback)->\n\t// \tthis.param('exponential').eval (val)=>\n\t// \t\tfog = if val then @_exponential_fog else @_linear_fog\n\t// \t\tcallback(fog)\n\n\tcook() {\n\t\tlet fog: Fog | FogExp2;\n\t\tif (this.pv.exponential) {\n\t\t\tthis._linear_fogexp2.density = this.pv.density;\n\t\t\tfog = this._linear_fogexp2;\n\t\t} else {\n\t\t\tthis._linear_fog.near = this.pv.near;\n\t\t\tthis._linear_fog.far = this.pv.far; // * (1/@_param_intensity)\n\t\t\tfog = this._linear_fog;\n\t\t}\n\n\t\tfog.color.copy(this.pv.color);\n\n\t\tthis.scene.default_scene.fog = fog;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Scene} from 'three/src/scenes/Scene';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass SceneObjParamConfig extends NodeParamsConfig {\n\tbg_color = ParamConfig.COLOR([0, 0, 0]);\n}\nconst ParamsConfig = new SceneObjParamConfig();\n\nexport class SceneObjNode extends TypedObjNode<Scene, SceneObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scene';\n\t}\n\n\tcreate_object() {\n\t\treturn new Scene();\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.io.outputs.set_has_one_output();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {Vector2} from 'three/src/math/Vector2';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\n// import {Group} from 'three/src/objects/Group';\n// import {CameraHelper} from 'three/src/helpers/CameraHelper';\n// import lodash_clamp from 'lodash/clamp';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\n\nimport {OrthographicCameraBackgroundController} from './utils/cameras/background/OrthographicCameraController';\n// import {ParamType} from '../../poly/ParamType';\n\nconst DEFAULT = {\n\tleft: -0.5,\n\tright: 0.5,\n\ttop: 0.5,\n\tbottom: -0.5,\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function OrthographicCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\t// vertical_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t\t// horizontal_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t};\n}\n\nclass OrthographicCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(OrthographicCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new OrthographicCameraObjParamConfig();\n\nexport class OrthographicCameraObjNode extends TypedCameraObjNode<\n\tOrthographicCamera,\n\tOrthographicCameraObjParamConfig\n> {\n\tparams_config = ParamsConfig;\n\n\tprotected get background_controller_constructor() {\n\t\treturn OrthographicCameraBackgroundController;\n\t}\n\n\tstatic type() {\n\t\treturn 'orthographic_camera';\n\t}\n\n\tcreate_object() {\n\t\treturn new OrthographicCamera(\n\t\t\tDEFAULT.left * 2,\n\t\t\tDEFAULT.right * 2,\n\t\t\tDEFAULT.top * 2,\n\t\t\tDEFAULT.bottom * 2,\n\t\t\tBASE_CAMERA_DEFAULT.near,\n\t\t\tBASE_CAMERA_DEFAULT.far\n\t\t);\n\t}\n\t//@_helper = new CameraHelper( @_camera )\n\t//group = new Group()\n\t//group.add(@_camera)\n\t//group.add(@_helper)\n\n\t//this.set_object(@_camera)\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.add_param('float', 'left', DEFAULT.left)\n\t// \t// this.add_param('float', 'right', DEFAULT.right)\n\t// \t// this.add_param('float', 'top', DEFAULT.top)\n\t// \t// this.add_param('float', 'bottom', DEFAULT.bottom)\n\n\t// \t// this.within_param_folder('render', () => {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 2, {range: [0, 10]});\n\t// \t// left : Number, right : Number, top : Number, bottom : Number, near : Number, far : Number\n\t// \tthis.add_param(ParamType.VECTOR2, 'vertical_size_range', [0, 10], {visible_if: {lock_width: 1}});\n\t// \tthis.add_param(ParamType.VECTOR2, 'horizontal_size_range', [0, 10], {visible_if: {lock_width: 0}});\n\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\tconst size = this.pv.size || 1;\n\t\t\t// let lock_width = this.pv.lock_width;\n\t\t\t// if (lock_width == null) {\n\t\t\t// \tlock_width = true;\n\t\t\t// }\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst vertical_size = size / this._aspect;\n\t\t\t// \tconst zoom = 1 //this.get_zoom(vertical_size, this.pv.vertical_size_range);\n\t\t\t// \tthis._object.left = DEFAULT.left * size * zoom;\n\t\t\t// \tthis._object.right = DEFAULT.right * size * zoom;\n\t\t\t// \tthis._object.top = DEFAULT.top * vertical_size * zoom;\n\t\t\t// \tthis._object.bottom = DEFAULT.bottom * vertical_size * zoom;\n\t\t\t// } else {\n\t\t\tconst horizontal_size = size * this._aspect;\n\t\t\tconst zoom = 1; //this.get_zoom(horizontal_size, this.pv.horizontal_size_range);\n\t\t\tthis._object.left = DEFAULT.left * horizontal_size * zoom;\n\t\t\tthis._object.right = DEFAULT.right * horizontal_size * zoom;\n\t\t\tthis._object.top = DEFAULT.top * size * zoom;\n\t\t\tthis._object.bottom = DEFAULT.bottom * size * zoom;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\n\t// private get_zoom(size: number, range: Vector2) {\n\t// \tlet zoom = 1;\n\t// \tif (range) {\n\t// \t\tif (size < range.x || size > range.y) {\n\t// \t\t\tconst new_size = lodash_clamp(size, range.x, range.y);\n\t// \t\t\tzoom = new_size / size;\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {BaseCameraControlsEventNodeType, CameraControls} from '../../../event/_BaseCameraControls';\nimport {CameraControlsConfig} from '../../../event/utils/CameraControlConfig';\nimport {BaseParamType} from '../../../../params/_Base';\nimport {CameraOrbitControlsEventNode} from '../../../event/CameraOrbitControls';\n\nconst CONTROLS_PARAM_NAME = 'controls';\n\nexport class ControlsController {\n\t_applied_controls_by_element_id: Dictionary<Dictionary<boolean>> = {};\n\tprivate _controls_node: BaseCameraControlsEventNodeType | null = null;\n\tprivate controls_start_listener: (() => void) | undefined;\n\tprivate controls_end_listener: (() => void) | undefined;\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\tcontrols_param(): BaseParamType | null {\n\t\tif (this.node.params.has(CONTROLS_PARAM_NAME)) {\n\t\t\treturn this.node.params.get(CONTROLS_PARAM_NAME);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync controls_node(): Promise<BaseCameraControlsEventNodeType | null> {\n\t\tconst controls_param = this.node.p.controls;\n\t\tconst raw_input = controls_param.raw_input;\n\t\tif (raw_input && raw_input != '') {\n\t\t\tif (controls_param.is_dirty) {\n\t\t\t\tawait controls_param.compute();\n\t\t\t}\n\t\t\tconst node = controls_param.found_node();\n\t\t\tif (node) {\n\t\t\t\tif (node instanceof CameraOrbitControlsEventNode) {\n\t\t\t\t\treturn node;\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('found node is not of a camera control type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set('no node has been found');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync update_controls() {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\tif (this._controls_node != controls_node) {\n\t\t\t\tthis.dispose_control_refs();\n\t\t\t}\n\t\t}\n\n\t\tthis._controls_node = controls_node;\n\t}\n\n\tasync apply_controls(html_element: HTMLElement) {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\t// keep last_control_node_id to ensure we don't apply the controls more than once\n\t\t\t// OR it allow the viewer to remain in control of this\n\t\t\t//if !@_last_control_node_id? || (@_last_control_node_id != controls_node.graph_node_id)\n\t\t\t// but for now, the controls are still applied again after mouse up\n\t\t\tconst controls_id = controls_node.controls_id();\n\t\t\tlet controls_aleady_applied = false;\n\t\t\tif (\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] &&\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t\t) {\n\t\t\t\tcontrols_aleady_applied = true;\n\t\t\t}\n\t\t\tif (!controls_aleady_applied) {\n\t\t\t\t// this._last_control_node_id = controls_id;\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] =\n\t\t\t\t\tthis._applied_controls_by_element_id[html_element.id] || {};\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id] = true;\n\n\t\t\t\t// request_container forces a cook\n\t\t\t\t//controls_node.request_container (controls_container)=>\n\t\t\t\tconst controls = await controls_node.apply_controls(this.node.object, html_element);\n\t\t\t\tconst config = new CameraControlsConfig(this.node.graph_node_id, controls_node, controls);\n\t\t\t\tcontrols_node.set_from_camera_node(controls, this.node);\n\t\t\t\tthis.set_controls_events(controls);\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\tdispose_control_refs() {\n\t\tthis._applied_controls_by_element_id = {};\n\t}\n\n\t// calling dispose controls\n\t// ensure that we can set the camera menu to camera1, then camera2 and back to camera1\n\t// and controls will be cleared each time\n\tasync dispose_controls(html_element: HTMLElement) {\n\t\tdelete this._applied_controls_by_element_id[html_element.id];\n\t\t// if (this._applied_controls_by_element_id[html_element.id]) {\n\t\t// \tconst controls_node = await this.controls_node();\n\t\t// \tif (controls_node) {\n\t\t// \t\tconst controls_id = controls_node.controls_id();\n\t\t// \t\tdelete this._applied_controls_by_element_id[html_element.id][controls_id];\n\t\t// \t}\n\t\t// }\n\t\t// @_controls_node?.dispose_controls()\n\t\t// if(this._applied_controls_by_element_id[html_element.id]){\n\t\t// \tdelete this._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t// }\n\t\t// this._last_control_node_id = null\n\t}\n\tset_controls_events(controls: CameraControls) {\n\t\t// restore target (for orbit controls only for now)\n\t\t// to ensure that camera does not reset its target on 0,0,0 on first move\n\t\t// const controls_node = this.controls_node()\n\t\t// if (controls_node){\n\t\t// \tcontrols_node.\n\t\t// }\n\t\t// if(controls.target){\n\t\t// \tcontrols.target.copy(this._param_target) //.clone()\n\t\t// }\n\n\t\tthis.controls_start_listener = () => {\n\t\t\tthis.on_controls_start(controls);\n\t\t};\n\t\tthis.controls_end_listener = () => {\n\t\t\tthis.on_controls_end(controls);\n\t\t};\n\t\tcontrols.addEventListener('start', this.controls_start_listener);\n\t\tcontrols.addEventListener('end', this.controls_end_listener);\n\t}\n\n\ton_controls_start(controls: CameraControls) {\n\t\t// this.param('is_updating').set(1)\n\t}\n\ton_controls_end(controls: CameraControls) {\n\t\t// this.param('is_updating').set(0)\n\t\tif (controls.target) {\n\t\t\tconst val = controls.target.toArray() as [number, number, number];\n\t\t\tthis.node.params.set_vector3('target', val);\n\t\t}\n\t\tthis.node.update_transform_params_from_object();\n\t}\n}\n","import {BaseCameraControlsEventNodeType, CameraControls} from '../_BaseCameraControls';\n\nexport class CameraControlsConfig {\n\tconstructor(\n\t\tprivate _camera_node_id: string,\n\t\tprivate _controls_node: BaseCameraControlsEventNodeType,\n\t\tprivate _controls: CameraControls\n\t) {}\n\n\tget camera_node_id() {\n\t\treturn this._camera_node_id;\n\t}\n\t// camera_controls_node_id(){\n\t// \treturn this._camera_controls_node_id\n\t// }\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\tget controls_node() {\n\t\treturn this._controls_node;\n\t}\n\n\tis_equal(other_config: CameraControlsConfig): boolean {\n\t\treturn (\n\t\t\tother_config.camera_node_id == this._camera_node_id &&\n\t\t\tother_config.controls_node.graph_node_id == this._controls_node.graph_node_id\n\t\t);\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer'\n// import {Color} from 'three/src/math/Color'\n\nimport {BaseViewer} from './_Base';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import 'src/engine/Poly';\n// import {POLY} from '../Poly';\n\nconst CSS_CLASS = 'CoreThreejsViewer';\n\ndeclare global {\n\tinterface HTMLCanvasElement {\n\t\tonwebglcontextlost: () => void;\n\t\tonwebglcontextrestored: () => void;\n\t}\n}\n\nexport class ThreejsViewer extends BaseViewer {\n\tprivate _request_animation_frame_id: number | undefined;\n\tprivate do_render: boolean = true;\n\n\tprivate _animate_method: () => void = this.animate.bind(this);\n\n\tconstructor(_container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tsuper(_container, _scene, camera_node);\n\n\t\tthis._canvas = document.createElement('canvas');\n\t\tthis._canvas.id = `canvas_id_${Math.random()}`.replace('.', '_');\n\t\tthis._canvas.style.display = 'block';\n\t\tthis._canvas.style.outline = 'none';\n\n\t\tthis._container.appendChild(this._canvas);\n\t\tthis._container.classList.add(CSS_CLASS);\n\t\tthis._container.style.height = '100%';\n\n\t\tthis._set_events();\n\t}\n\n\tpublic _build() {\n\t\tthis._init_display();\n\t\tthis.activate();\n\t}\n\n\tdispose() {\n\t\tthis._cancel_animate();\n\t\tthis.controls_controller.dispose_controls();\n\t\t// this._dispose_graph_node()\n\t}\n\n\tprivate _set_events() {\n\t\tthis.events_controller.init();\n\t\tthis.webgl_controller.init();\n\n\t\t// if (POLY.player_mode()) {\n\t\twindow.onresize = () => {\n\t\t\tthis.cameras_controller.on_resize();\n\t\t};\n\t\t// }\n\t}\n\t// protected _on_touchmove(event: TouchEvent){\n\t// \tconsole.log(\"touch\", event)\n\t// }\n\n\tprivate _init_display() {\n\t\tif (!this._canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cameras_controller.compute_size_and_aspect();\n\t\tconst size: Vector2 = this.cameras_controller.size;\n\n\t\tthis.cameras_controller.camera_node?.post_process_controller.create_renderer(this._canvas, size);\n\t\t// this.canvas_context = canvas.getContext('2d')\n\n\t\t// init renderer\n\t\t// @renderer = new THREE.WebGLRenderer\n\t\t// \tcanvas: canvas\n\t\t// \tantialias: true\n\t\t// \talpha: true\n\n\t\t// @renderer.shadowMap.enabled = true\n\t\t// this.compute_size_and_aspect()\n\n\t\t//\n\t\t// https://stackoverflow.com/questions/31407778/display-scene-at-lower-resolution-in-three-js\n\t\t// TODO: this article mentions that setSize should be called after\n\t\t// @renderer.setSize(this._size[0], this._size[1])\n\t\t// @renderer.setPixelRatio(window.devicePixelRatio)\n\t\t// @renderer.setSize(size[0]*1.5, size[1]*1.5)\n\t\t// canvas.width = \"//{size[0]}px\"\n\t\t// canvas.height = \"//{size[1]}px\"\n\t\t// canvas.style.width = \"//{size[0]}px\"\n\t\t// canvas.style.height = \"//{size[1]}px\"\n\n\t\t// TODO: ensure the renderers get added to a list\n\t\t//if !this.player_mode\n\t\t//\tconsole.log(\"set window.viewer_renderer from Threejs.vue component\")\n\t\t// window.viewer_renderer = @renderer\n\t\t// POLY.renderers_controller.register_renderer(@renderer)\n\n\t\t//this._init_webgl_utils()\n\n\t\t// init scene\n\t\t// @display_scene.background = new THREE.Color(\"//111\")\n\n\t\t//window.display_scene = @display_scene\n\n\t\t// this._init_ray_helper(); // TODO: typescript\n\n\t\t//@cam_animation_helper = new CameraAnimationHelper(@ray_helper, @event_helper)\n\n\t\tthis.cameras_controller.prepare_current_camera();\n\t\t// this._add_helpers_to_scene()\n\n\t\tthis.animate();\n\t}\n\n\tanimate() {\n\t\tif (this.do_render) {\n\t\t\tthis._scene.time_controller.increment_time_if_playing();\n\t\t\tthis.render();\n\t\t\tthis._controls_controller?.update();\n\t\t\t// this.update_stats()\n\t\t\t// this._controls?.update(false)\n\n\t\t\t// @_renders_count ?= 0\n\t\t\t// @_renders_count += 1\n\t\t\t// if @_renders_count < 6\n\t\t\tthis._request_animation_frame_id = requestAnimationFrame(this._animate_method);\n\t\t}\n\t}\n\n\tprivate _cancel_animate() {\n\t\tthis.do_render = false;\n\t\tif (this._request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this._request_animation_frame_id);\n\t\t}\n\t\tif (this._canvas) {\n\t\t\tthis.cameras_controller.camera_node?.post_process_controller.delete_renderer(this._canvas);\n\t\t}\n\t\t// POLY.renderers_controller.deregister_renderer(@renderer)\n\t\t// this.dispose_camera()\n\t}\n\n\trender() {\n\t\tif (this.cameras_controller.camera_node && this._canvas) {\n\t\t\tconst size = this.cameras_controller.size;\n\t\t\tconst aspect = this.cameras_controller.aspect;\n\t\t\tthis.cameras_controller.camera_node.post_process_controller.render(this._canvas, size, aspect);\n\t\t} else {\n\t\t\tconsole.warn('no camera to render with');\n\t\t}\n\t}\n}\n","import {Scene} from 'three/src/scenes/Scene';\nimport {PolyScene} from '../scene/PolyScene';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import {CameraMixin} from './concerns/Camera';\n// import {Capturer} from './concerns/Capturer';\n// import {ContainerClass} from './concerns/ContainerClass';\n// import {Controls} from './concerns/Controls';\n// import {PickerForViewer} from './concerns/Picker';\n\nimport {CamerasController} from './utils/CamerasController';\nimport {ControlsController} from './utils/ControlsController';\nimport {ViewerEventsController} from './utils/EventsController';\nimport {WebGLController} from './utils/WebglController';\n\n// class AbstractViewer {}\n\nconst HOVERED_CLASS_NAME = 'hovered';\n\nexport abstract class BaseViewer {\n\tprotected _display_scene: Scene;\n\tprotected _canvas: HTMLCanvasElement | undefined;\n\tprotected _active: boolean = false;\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tactivate() {\n\t\tthis._active = true;\n\t}\n\tdeactivate() {\n\t\tthis._active = false;\n\t}\n\n\tprotected _cameras_controller: CamerasController | undefined;\n\tget cameras_controller() {\n\t\treturn (this._cameras_controller = this._cameras_controller || new CamerasController(this));\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller() {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _events_controller: ViewerEventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new ViewerEventsController(this));\n\t}\n\tprotected _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController(this));\n\t}\n\n\tconstructor(protected _container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tthis._display_scene = this._scene.default_scene;\n\t\tthis._init_from_scene(camera_node).then(() => {\n\t\t\tthis._build();\n\t\t});\n\t}\n\tget container() {\n\t\treturn this._container;\n\t}\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget canvas() {\n\t\treturn this._canvas;\n\t}\n\n\tprivate async _init_from_scene(camera_node: BaseCameraObjNodeType) {\n\t\tawait this.cameras_controller.set_camera_node(camera_node || this._scene.cameras_controller.master_camera_node);\n\t\t// await this.update_picker_nodes(); // TODO: typescript\n\t}\n\tprotected abstract _build(): void;\n\n\t// html container class\n\treset_container_class() {\n\t\tthis.container.classList.remove(HOVERED_CLASS_NAME);\n\t}\n\tset_container_class_hovered() {\n\t\tthis.container.classList.add(HOVERED_CLASS_NAME);\n\t}\n}\n","// import {Camera} from 'three/src/cameras/Camera';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\nimport {BaseViewer} from '../_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class CamerasController {\n\t// private _is_active: boolean = false;\n\tprivate _camera_node: BaseCameraObjNodeType | null = null;\n\t// private _camera: Camera;\n\n\tprivate _size: Vector2 = new Vector2(100, 100);\n\tprivate _aspect: number = 1;\n\t// private current_camera_controls_node_graph_id: number = null;\n\n\tconstructor(private viewer: BaseViewer) {}\n\n\t// activate() {\n\t// \tthis._is_active = true;\n\t// }\n\tasync set_camera_node(camera_node: BaseCameraObjNodeType) {\n\t\tif (!this._camera_node || camera_node.graph_node_id != this._camera_node.graph_node_id) {\n\t\t\tthis._camera_node = camera_node;\n\t\t\t// this._camera = camera_node.object;\n\t\t\tthis._update_graph_node();\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t}\n\t}\n\tprivate _graph_node: CoreGraphNode | undefined;\n\tprivate _update_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn;\n\t\t}\n\t\tconst controls_param = this._camera_node.params.get_operator_path('controls');\n\t\tif (!controls_param) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node = this._graph_node || this._create_graph_node();\n\t\tif (!this._graph_node) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node.graph_disconnect_predecessors();\n\t\tthis._graph_node.add_graph_input(controls_param);\n\t}\n\tprivate _create_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst node = new CoreGraphNode(this._camera_node.scene, 'viewer-controls');\n\t\tnode.add_post_dirty_hook('this.viewer.controls_controller', async () => {\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t});\n\t\treturn node;\n\t}\n\n\tget camera_node() {\n\t\treturn this._camera_node;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\tget aspect() {\n\t\treturn this._aspect;\n\t}\n\n\ton_resize() {\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.compute_size_and_aspect();\n\t\tthis._camera_node?.post_process_controller.set_renderer_size(this.viewer.canvas, this._size);\n\t\tthis.update_camera_aspect();\n\t}\n\tcompute_size_and_aspect() {\n\t\tthis._update_size();\n\t\tthis._camera_node?.scene.uniforms_controller.update_resolution_dependent_uniform_owners(this._size);\n\t\tthis._aspect = this._get_aspect();\n\t}\n\n\tprivate _update_size() {\n\t\tthis._size.x = this.viewer.container.offsetWidth;\n\t\tthis._size.y = this.viewer.container.offsetHeight;\n\t}\n\tprivate _get_aspect(): number {\n\t\treturn this._size.x / this._size.y;\n\t}\n\n\tupdate_camera_aspect() {\n\t\tthis._camera_node?.setup_for_aspect_ratio(this._aspect);\n\t}\n\t// dispose_camera: ->\n\t// \tthis.$emit('before_controls_apply', null)\n\t// \t// if @_controls?\n\t// \t// \t@_controls.dispose()\n\t// \t// camera_graph_node_id ?= this.current_camera_node_graph_id\n\t// \t// camera_node = this.$store.scene.graph().node_from_id(camera_graph_node_id)\n\t// \t// this.current_camera_node.dipose_controls()\n\t// \t//if this.current_camera_node?\n\t// \t//\tthis.current_camera_node.dispose_controls()\n\tasync prepare_current_camera() {\n\t\tif (this._camera_node) {\n\t\t\t// we dispose the controls first, so they can be applied\n\t\t\t// if they were not disposed properly when we closed the viewer\n\t\t\t// but I'm now trying in the destroyed callback\n\t\t\t//this.current_camera_node.dispose_controls()\n\n\t\t\t//this.current_camera_node.apply_controls()\n\t\t\t//this.current_camera_node.prepare_for_viewer(this.aspect())\n\t\t\t// const name = this.current_camera_node.name()\n\t\t\t// const graph_node_id = this._camera_node.graph_node_id\n\t\t\t/*const container = */ await this._camera_node.request_container(); // ensure the camera is cooked\n\t\t\tawait this._update_from_camera_container(); //container, graph_node_id)\n\t\t}\n\t}\n\t// remove_cloned_camera: ->\n\t// \tif @_current_camera?\n\t// \t\t@_current_camera.camera_source.node.remove_clone(@_current_camera)\n\n\tasync _update_from_camera_container() {\n\t\t//container, graph_node_id:number){\n\t\t// ensure that we get the same as we requested\n\t\t// if(graph_node_id == this._camera_node.graph_node_id){\n\n\t\t// this.remove_cloned_camera()\n\t\t// cloned_camera = this.current_camera_node.clone_camera()\n\t\t// @_current_camera = cloned_camera\n\t\tthis.update_camera_aspect();\n\n\t\t//this.dispose_camera()\n\n\t\t// @_is_active is use to check if the component has been destroyed\n\t\t// which can happen on app load, but also when user switches the camera menu\n\n\t\t// if this.current_camera_controls_node_graph_id == null || ()\n\n\t\t// if(@_is_active == true)\n\t\tawait this.viewer.controls_controller.create_controls();\n\n\t\t// }\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {CameraControls} from '../../nodes/event/_BaseCameraControls';\n\nexport class ControlsController {\n\tprotected _active: boolean = false;\n\tprotected _controls: CameraControls | null = null;\n\t_bound_on_controls_start: () => void = this._on_controls_start.bind(this);\n\t_bound_on_controls_end: () => void = this._on_controls_end.bind(this);\n\tconstructor(private viewer: BaseViewer) {}\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\n\tasync create_controls() {\n\t\tthis.dispose_controls();\n\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = await this.camera_node?.controls_controller.apply_controls(this.viewer.canvas);\n\t\tif (config) {\n\t\t\t// this.current_camera_controls_node_graph_id = config.camera_controls_node_id()\n\t\t\tthis._controls = config.controls;\n\t\t\t// this._controls_node = config.controls_node()\n\n\t\t\tif (this._controls) {\n\t\t\t\tif (this.viewer.active) {\n\t\t\t\t\tthis._controls.addEventListener('start', this._bound_on_controls_start);\n\t\t\t\t\tthis._controls.addEventListener('end', this._bound_on_controls_end);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dispose_controls();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// test in case @_is_active has changed\n\t\t\t// if (this._is_active != true && this._controls){\n\t\t\t// \tthis._dispose_controls()\n\n\t\t\t// }\n\t\t\t// TODO\n\t\t\t// we have to reassign the camera here, as this method is called twice\n\t\t\t// and the first time without the controls being present apparently.. (more tests needed)\n\t\t\t// CURRENT ANSWER: the method this.prepare_current_camera() is called twice on app load\n\t\t\t// which only cause problems when switching back to perspective.\n\t\t\t// @_current_camera = cloned_camera\n\t\t\t//@_controls = controls\n\t\t\t// this.$emit('before_controls_apply', controls)\n\t\t}\n\t}\n\tupdate() {\n\t\tif (this._controls) {\n\t\t\tthis._controls.update();\n\t\t}\n\t}\n\n\tdispose_controls() {\n\t\tif (this._controls) {\n\t\t\tif (this.viewer.canvas) {\n\t\t\t\tthis.camera_node?.controls_controller.dispose_controls(this.viewer.canvas);\n\t\t\t}\n\n\t\t\tif (this._bound_on_controls_start) {\n\t\t\t\tthis._controls.removeEventListener('start', this._bound_on_controls_start);\n\t\t\t}\n\t\t\tif (this._bound_on_controls_end) {\n\t\t\t\tthis._controls.removeEventListener('end', this._bound_on_controls_end);\n\t\t\t}\n\n\t\t\tthis._controls.dispose();\n\t\t\tthis._controls = null;\n\t\t}\n\t}\n\tprivate _on_controls_start() {\n\t\tthis._active = true;\n\t}\n\tprivate _on_controls_end() {\n\t\tthis._active = false;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n// import {Vector2} from 'three/src/math/Vector2';\n\n// const DIST_UNINITIALIZED = -1;\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype MouseOrTouchEventCallback = (e: MouseOrTouchEvent) => void;\n\nexport class ViewerEventsController {\n\t// private _mousedown_pos = new Vector2();\n\t// private _mouse_distance_travelled: number = DIST_UNINITIALIZED;\n\tprotected _bound_on_mousedown: MouseOrTouchEventCallback = this._on_mousedown.bind(this);\n\tprotected _bound_on_mousemove: MouseOrTouchEventCallback = this._on_mousemove.bind(this);\n\tprotected _bound_on_mouseup: MouseOrTouchEventCallback = this._on_mouseup.bind(this);\n\t// protected _bound_on_click: MouseEventCallback\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget canvas() {\n\t\treturn this.viewer.canvas;\n\t}\n\n\tinit() {\n\t\tif (!this.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._bound_on_mousedown) {\n\t\t\tthis.canvas.removeEventListener('mousedown', this._bound_on_mousedown);\n\t\t}\n\t\tif (this._bound_on_mousemove) {\n\t\t\tthis.canvas.removeEventListener('mousemove', this._bound_on_mousemove);\n\t\t}\n\t\tif (this._bound_on_mouseup) {\n\t\t\tthis.canvas.removeEventListener('mouseup', this._bound_on_mouseup);\n\t\t}\n\t\tthis._bound_on_mousedown = this._bound_on_mousedown || this._on_mousedown.bind(this);\n\t\tthis._bound_on_mousemove = this._bound_on_mousemove || this._on_mousemove.bind(this);\n\t\tthis._bound_on_mouseup = this._bound_on_mouseup || this._on_mouseup.bind(this);\n\n\t\tthis.canvas.addEventListener('mousedown', this._bound_on_mousedown);\n\t\tthis.canvas.addEventListener('mousemove', this._bound_on_mousemove);\n\t\tthis.canvas.addEventListener('mouseup', this._bound_on_mouseup);\n\n\t\t// this._bound_on_touchmove = this._bound_on_touchmove || this._on_touchmove.bind(this)\n\t\tthis.canvas.addEventListener('touchstart', this._bound_on_mousedown, false);\n\t\tthis.canvas.addEventListener('touchmove', this._bound_on_mousemove, false);\n\t\tthis.canvas.addEventListener('touchend', this._bound_on_mouseup, false);\n\t\tthis.canvas.addEventListener('touchcancel', this._bound_on_mouseup, false);\n\t}\n\n\tprotected _on_mousedown(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\n\t\t// this._mouse_distance_travelled = 0;\n\t\t// if (event instanceof MouseEvent) {\n\t\t// \tthis._mousedown_pos.x = event.pageX;\n\t\t// \tthis._mousedown_pos.y = event.pageY;\n\t\t// } else {\n\t\t// \tconst touch = event.touches[0];\n\t\t// \tthis._mousedown_pos.x = touch.pageX;\n\t\t// \tthis._mousedown_pos.y = touch.pageY;\n\t\t// }\n\t}\n\n\tprotected _on_mousemove(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled !== DIST_UNINITIALIZED) {\n\t\t// \tlet distance: number = 0;\n\t\t// \tif (event instanceof MouseEvent) {\n\t\t// \t\tdistance = event.pageX - this._mousedown_pos.x + (event.pageY - this._mousedown_pos.y);\n\t\t// \t} else {\n\t\t// \t\tconst touch = event.touches[0];\n\t\t// \t\tdistance = touch.pageX - this._mousedown_pos.x + (touch.pageY - this._mousedown_pos.y);\n\t\t// \t}\n\t\t// \tthis._mouse_distance_travelled += Math.abs(distance);\n\t\t// }\n\n\t\t// if (!this.viewer.controls_controller.active) {\n\t\t// \t// this.viewer.process_picker_nodes_on_mouse_move(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t}\n\n\tprotected _on_mouseup(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled < 2) {\n\t\t// \t// this.viewer.process_picker_nodes_on_click(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t\t// this._mouse_distance_travelled = DIST_UNINITIALIZED;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n\nexport class WebGLController {\n\tpublic request_animation_frame_id: number | undefined;\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tinit() {\n\t\tconst canvas = this.viewer.canvas;\n\t\tif (canvas) {\n\t\t\tcanvas.onwebglcontextlost = this._on_webglcontextlost.bind(this);\n\t\t\tcanvas.onwebglcontextrestored = this._on_webglcontextrestored.bind(this);\n\t\t}\n\t}\n\n\tprotected _on_webglcontextlost() {\n\t\tconsole.warn('context lost at frame', this.viewer.scene.frame);\n\t\t// event.preventDefault();\n\t\tif (this.request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this.request_animation_frame_id);\n\t\t} else {\n\t\t\tconsole.warn('request_animation_frame_id not initialized');\n\t\t}\n\t\tconsole.warn('not canceled', this.request_animation_frame_id);\n\t}\n\tprotected _on_webglcontextrestored() {\n\t\tconsole.log('context restored');\n\t}\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport lodash_isNaN from 'lodash/isNaN';\n\nexport class OrthographicCameraBackgroundController extends BaseBackgroundController {\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tlet width = this.node.params.float('size');\n\t\tlet height = width;\n\n\t\tconst far = this.node.params.float('far');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tquad.scale.x = width;\n\t\t\tquad.scale.y = height;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n}\n","// import lodash_clamp from 'lodash/clamp';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\nimport {PerspectiveCameraBackgroundController} from './utils/cameras/background/PerspectiveCameraController';\n// import {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nconst DEFAULT = {\n\tfov: 50,\n};\n\n// const EVENT_CHANGE = { type: 'change' };\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function PerspectiveCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tfov = ParamConfig.FLOAT(DEFAULT.fov, {range: [0, 100]});\n\t\t// vertical_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 1}});\n\t\t// horizontal_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 0}});\n\t};\n}\nclass PerspectiveCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(PerspectiveCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PerspectiveCameraObjParamConfig();\n\nexport class PerspectiveCameraObjNode extends TypedCameraObjNode<PerspectiveCamera, PerspectiveCameraObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'perspective_camera';\n\t}\n\n\tprotected get background_controller_constructor() {\n\t\treturn PerspectiveCameraBackgroundController;\n\t}\n\n\tcreate_object() {\n\t\treturn new PerspectiveCamera(DEFAULT.fov, 1, BASE_CAMERA_DEFAULT.near, BASE_CAMERA_DEFAULT.far);\n\t}\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.add_param(ParamType.FLOAT, 'fov', DEFAULT.fov, {\n\t// \t// \trange: [0, 180],\n\t// \t// \trange_locked: [true, true],\n\t// \t// });\n\t// \t// this.add_param(ParamType.VECTOR2, 'vertical_fov_range', [0, 100], {visible_if: {lock_width: 1}});\n\t// \t// this.add_param(ParamType.VECTOR2, 'horizontal_fov_range', [0, 100], {visible_if: {lock_width: 0}});\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tif (this._object.fov != this.pv.fov) {\n\t\t\tthis._object.fov = this.pv.fov;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\t// let lock_width = true;//this.pv.lock_width;\n\n\t\t\tthis._object.aspect = this._aspect;\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst other_fov = this.pv.fov / this._aspect;\n\t\t\t// \tthis._object.zoom = this.get_zoom(this._aspect, other_fov, this.pv.vertical_fov_range);\n\t\t\t// } else {\n\t\t\t// \tthis._object.zoom = 1;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\t// private get_zoom(start_zoom: number, other_fov: number, range: Vector2) {\n\t// \tlet zoom = start_zoom;\n\t// \tif (range) {\n\t// \t\tif (other_fov < range.x || other_fov > range.y) {\n\t// \t\t\tconst new_other_fov = lodash_clamp(other_fov, range.x, range.y);\n\t// \t\t\tzoom = start_zoom * (other_fov / new_other_fov);\n\t// \t\t\t// zoom = Math.min(start_zoom, zoom)\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_sum from 'lodash/sum';\n// import { Vector2 } from 'three';\n\n// enum CornerNames {\n// \tbl = 'bl',\n// \tbr = 'br',\n// \ttl = 'tl',\n// \ttr = 'tr',\n// }\ninterface Corners2D {\n\tbl: Vector2Like;\n\tbr: Vector2Like;\n\ttl: Vector2Like;\n\ttr: Vector2Like;\n}\ninterface Corners3D {\n\tbl: Vector3;\n\tbr: Vector3;\n\ttl: Vector3;\n\ttr: Vector3;\n}\nconst SCREEN_COORD: Corners2D = {\n\tbl: {x: -1, y: -1},\n\tbr: {x: +1, y: -1},\n\ttl: {x: -1, y: +1},\n\ttr: {x: +1, y: +1},\n};\nconst CORNER_NAMES: Array<keyof Corners3D> = ['bl', 'br', 'tl', 'tr'];\n\nexport class PerspectiveCameraBackgroundController extends BaseBackgroundController {\n\tprivate _bg_corner: Corners3D = {\n\t\tbl: new Vector3(),\n\t\tbr: new Vector3(),\n\t\ttl: new Vector3(),\n\t\ttr: new Vector3(),\n\t};\n\tprivate _bg_center = new Vector3();\n\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tfor (let corner_name of CORNER_NAMES) {\n\t\t\tthis._update_corner_vector(this._bg_corner[corner_name], SCREEN_COORD[corner_name]);\n\t\t}\n\t\tlet width = this._bg_corner.bl.distanceTo(this._bg_corner.br);\n\t\tlet height = this._bg_corner.bl.distanceTo(this._bg_corner.tl);\n\n\t\tthis._bg_center.x = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].x)) / 4;\n\t\tthis._bg_center.y = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].y)) / 4;\n\t\tthis._bg_center.z = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].z)) / 4;\n\n\t\tconst far = this.node.params.float('far');\n\t\tconst background_ratio = this.node.params.float('background_ratio');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tconst z = this._bg_center.distanceTo(this.node.object.position);\n\t\t\tconst z_ratio = far / z;\n\t\t\tconst desired_ratio = background_ratio || 1;\n\n\t\t\tif (width > height) {\n\t\t\t\theight = width / desired_ratio;\n\t\t\t} else {\n\t\t\t\theight = width * desired_ratio;\n\t\t\t}\n\n\t\t\tquad.scale.x = width * z_ratio;\n\t\t\tquad.scale.y = height * z_ratio;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n\t_update_corner_vector(vector: Vector3, coord: Vector2Like) {\n\t\tthis._bg_raycaster.setFromCamera(coord, this.node.object);\n\t\tvector\n\t\t\t.copy(this._bg_raycaster.ray.direction)\n\t\t\t.multiplyScalar(this.node.params.float('far'))\n\t\t\t.add(this._bg_raycaster.ray.origin);\n\t}\n}\n","import {CATEGORY_SOP} from './Category';\n\nimport {AddSopNode} from '../../nodes/sop/Add';\nimport {AnimationCopySopNode} from '../../nodes/sop/AnimationCopy';\nimport {AnimationMixerSopNode} from '../../nodes/sop/AnimationMixer';\nimport {AttribAddMultSopNode} from '../../nodes/sop/AttribAddMult';\nimport {AttribCopySopNode} from '../../nodes/sop/AttribCopy';\nimport {AttribCreateSopNode} from '../../nodes/sop/AttribCreate';\nimport {AttribDeleteSopNode} from '../../nodes/sop/AttribDelete';\nimport {AttribNormalizeSopNode} from '../../nodes/sop/AttribNormalize';\nimport {AttribPromoteSopNode} from '../../nodes/sop/AttribPromote';\nimport {AttribRemapSopNode} from '../../nodes/sop/AttribRemap';\nimport {AttribRenameSopNode} from '../../nodes/sop/AttribRename';\nimport {AttribTransferSopNode} from '../../nodes/sop/AttribTransfer';\nimport {BboxScatterSopNode} from '../../nodes/sop/BboxScatter';\nimport {BlendSopNode} from '../../nodes/sop/Blend';\nimport {BoxSopNode} from '../../nodes/sop/Box';\nimport {CacheSopNode} from '../../nodes/sop/Cache';\nimport {CircleSopNode} from '../../nodes/sop/Circle';\nimport {CodeSopNode} from '../../nodes/sop/Code';\nimport {ColorSopNode} from '../../nodes/sop/Color';\nimport {ConeSopNode} from '../../nodes/sop/Cone';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {DataSopNode} from '../../nodes/sop/Data';\nimport {DataUrlSopNode} from '../../nodes/sop/DataUrl';\nimport {DelaySopNode} from '../../nodes/sop/Delay';\nimport {DeleteSopNode} from '../../nodes/sop/Delete';\nimport {FaceSopNode} from '../../nodes/sop/Face';\nimport {FileSopNode} from '../../nodes/sop/File';\nimport {FuseSopNode} from '../../nodes/sop/Fuse';\nimport {HexagonsSopNode} from '../../nodes/sop/Hexagons';\nimport {HierarchySopNode} from '../../nodes/sop/Hierarchy';\n// TODO: heightmap\nimport {InstanceSopNode} from '../../nodes/sop/Instance';\nimport {JitterSopNode} from '../../nodes/sop/Jitter';\nimport {LayerSopNode} from '../../nodes/sop/Layer';\nimport {LineSopNode} from '../../nodes/sop/Line';\nimport {MaterialSopNode} from '../../nodes/sop/Material';\nimport {MergeSopNode} from '../../nodes/sop/Merge';\nimport {NoiseSopNode} from '../../nodes/sop/Noise';\nimport {NormalsSopNode} from '../../nodes/sop/Normals';\nimport {NullSopNode} from '../../nodes/sop/Null';\nimport {ObjectMergeSopNode} from '../../nodes/sop/ObjectMerge';\nimport {OcclusionSopNode} from '../../nodes/sop/Occlusion';\nimport {ParticlesSystemGpuSopNode} from '../../nodes/sop/ParticlesSystemGpu';\nimport {PeakSopNode} from '../../nodes/sop/Peak';\nimport {PlaneSopNode} from '../../nodes/sop/Plane';\nimport {PointSopNode} from '../../nodes/sop/Point';\nimport {PolywireSopNode} from '../../nodes/sop/Polywire';\nimport {RaySopNode} from '../../nodes/sop/Ray';\nimport {ResampleSopNode} from '../../nodes/sop/Resample';\nimport {ScatterSopNode} from '../../nodes/sop/Scatter';\nimport {ShadowsSopNode} from '../../nodes/sop/Shadows';\nimport {SkinSopNode} from '../../nodes/sop/Skin';\nimport {SphereSopNode} from '../../nodes/sop/Sphere';\nimport {SwitchSopNode} from '../../nodes/sop/Switch';\nimport {TextSopNode} from '../../nodes/sop/Text';\nimport {TorusSopNode} from '../../nodes/sop/Torus';\nimport {TorusKnotSopNode} from '../../nodes/sop/TorusKnot';\nimport {TransformSopNode} from '../../nodes/sop/Transform';\nimport {TubeSopNode} from '../../nodes/sop/Tube';\nimport {UvProjectSopNode} from '../../nodes/sop/UvProject';\n\nexport interface GeoNodeChildrenMap {\n\tadd: AddSopNode;\n\tanimation_copy: AnimationCopySopNode;\n\tanimation_mixer: AnimationMixerSopNode;\n\tattrib_add_mult: AttribAddMultSopNode;\n\tattrib_copy: AttribCopySopNode;\n\tattrib_create: AttribCreateSopNode;\n\tattrib_delete: AttribDeleteSopNode;\n\tattrib_normalize: AttribNormalizeSopNode;\n\tattrib_promote: AttribPromoteSopNode;\n\tattrib_remap: AttribRemapSopNode;\n\tattrib_rename: AttribRenameSopNode;\n\tattrib_transfer: AttribTransferSopNode;\n\tbbox_scatter: BboxScatterSopNode;\n\tblend: BlendSopNode;\n\tbox: BoxSopNode;\n\tcache: CacheSopNode;\n\tcircle: CircleSopNode;\n\tcode: CodeSopNode;\n\tcolor: ColorSopNode;\n\tcopy: CopySopNode;\n\tdata: DataSopNode;\n\tdata_url: DataUrlSopNode;\n\tdelay: DelaySopNode;\n\tdelete: DeleteSopNode;\n\tface: FaceSopNode;\n\tfile: FileSopNode;\n\tfuse: FuseSopNode;\n\thexagons: HexagonsSopNode;\n\thierarchy: HierarchySopNode;\n\tinstance: InstanceSopNode;\n\tjitter: JitterSopNode;\n\tlayer: LayerSopNode;\n\tline: LineSopNode;\n\tmaterial: MaterialSopNode;\n\tmerge: MergeSopNode;\n\tnoise: NoiseSopNode;\n\tnormals: NormalsSopNode;\n\tnull: NullSopNode;\n\tobject_merge: ObjectMergeSopNode;\n\tocclusion: OcclusionSopNode;\n\tparticles_system_gpu: ParticlesSystemGpuSopNode;\n\tpeak: PeakSopNode;\n\tplane: PlaneSopNode;\n\tpoint: PointSopNode;\n\tpolywire: PolywireSopNode;\n\tray: RaySopNode;\n\tresample: ResampleSopNode;\n\tscatter: ScatterSopNode;\n\tshadows: ShadowsSopNode;\n\tskin: SkinSopNode;\n\tsphere: SphereSopNode;\n\tswitch: SwitchSopNode;\n\ttext: TextSopNode;\n\ttorus: TorusSopNode;\n\ttorus_knot: TorusKnotSopNode;\n\ttransform: TransformSopNode;\n\ttube: TubeSopNode;\n\tuv_project: UvProjectSopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class SopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AddSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(AnimationCopySopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AnimationMixerSopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AttribAddMultSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCopySopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCreateSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribDeleteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribNormalizeSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribPromoteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRemapSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRenameSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribTransferSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(BboxScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BlendSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BoxSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CacheSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(CodeSopNode, CATEGORY_SOP.ADVANCED);\n\t\tpoly.register_node(CircleSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(ColorSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ConeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CopySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(DataSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DataUrlSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DelaySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(DeleteSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FaceSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FileSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(FuseSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(HexagonsSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(HierarchySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(InstanceSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(JitterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LayerSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LineSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(MaterialSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(MergeSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NoiseSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NormalsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(NullSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ObjectMergeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(OcclusionSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(ParticlesSystemGpuSopNode, CATEGORY_SOP.DYNAMICS);\n\t\tpoly.register_node(PeakSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PlaneSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(PointSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PolywireSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(RaySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ResampleSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SkinSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ShadowsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SphereSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(SwitchSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(TextSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusKnotSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TransformSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(TubeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(UvProjectSopNode, CATEGORY_SOP.MODIFIER);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten';\n// import lodash_last from 'lodash/last';\nimport lodash_times from 'lodash/times';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometryUtilShape} from '../../../core/geometry/util/Shape';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AddSopParamsConfig extends NodeParamsConfig {\n\tcreate_point = ParamConfig.BOOLEAN(1);\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 100],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {create_point: true},\n\t});\n\tposition = ParamConfig.VECTOR3([0, 0, 0], {visible_if: {create_point: true}});\n\t// create_polygon = ParamConfig.BOOLEAN(0);\n\topen = ParamConfig.BOOLEAN(0);\n\tconnect_to_last_point = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new AddSopParamsConfig();\n\nexport class AddSopNode extends TypedSopNode<AddSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'add';\n\t}\n\t_objects: Object3D[] | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create polygons from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._objects = [];\n\t\tthis._create_point();\n\t\t// if (this.pv.create_polygon) {\n\t\t// \tthis._create_polygon(input_contents[0]);\n\t\t// }\n\n\t\tthis.set_objects(this._objects);\n\t}\n\n\tprivate _create_point() {\n\t\tif (this.pv.create_point) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions: number[] = [];\n\t\t\tlodash_times(this.pv.points_count, (i) => {\n\t\t\t\tthis.pv.position.toArray(positions, i * 3);\n\t\t\t});\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\t\t\tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\n\t\t\tif (this._objects) {\n\t\t\t\tthis._objects.push(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_polygon(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\t// \tconst is_polygon_closed = !this.pv.open && points.length >= 3;\n\t// \tif (points.length > 0) {\n\t// \t\tif (is_polygon_closed) {\n\t// \t\t\tthis._create_polygon_closed(core_group);\n\t// \t\t} else {\n\t// \t\t\tthis._create_polygon_open(core_group);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _create_polygon_closed(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tconst geometry = CoreGeometryUtilShape.geometry_from_points(points);\n\t// \tconst object = this.create_object(geometry);\n\t// \tthis._objects.push(object);\n\t// }\n\n\t// _create_polygon_open(core_group:CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tlet positions:number[][] = [];\n\t// \tconst indices:number[] = [];\n\t// \tpoints.forEach((point, i) => {\n\t// \t\tpoint.position().toArray(positions, i * 3);\n\t// \t\t// positions.push(point.position().toArray());\n\n\t// \t\tif (i > 0) {\n\t// \t\t\tindices.push(i - 1);\n\t// \t\t\tindices.push(i);\n\t// \t\t}\n\t// \t});\n\n\t// \tif (points.length > 2 && this.pv.connect_to_last_point) {\n\t// \t\tpositions.push(points[0].position().toArray());\n\t// \t\tindices.push(lodash_last(indices));\n\t// \t\tindices.push(0);\n\t// \t}\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new BufferGeometry();\n\t// \tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \tthis._objects.push(object);\n\t// }\n}\n","import lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Triangle} from 'three/src/math/Triangle';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferGeometry, Triangle, Vector2, Vector3}\nimport {CorePoint} from './Point';\nimport {CoreGeometry} from './Geometry';\nimport {CoreMath} from '../math/_Module';\n// import {CoreInterpolate} from '../Math/Interpolate'\n\ninterface FaceLike {\n\ta: number;\n\tb: number;\n\tc: number;\n}\n\ntype CorePointArray3 = [CorePoint, CorePoint, CorePoint];\ntype Vector3Array2 = [Vector3, Vector3];\ntype Vector3Array3 = [Vector3, Vector3, Vector3];\n\nexport class CoreFace {\n\t_geometry: BufferGeometry;\n\t_points: CorePointArray3 | undefined;\n\t_triangle: Triangle | undefined;\n\t_positions: Vector3Array3 | undefined;\n\t_deltas: Vector3Array2 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, private _index: number) {\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\tget index() {\n\t\treturn this._index;\n\t}\n\tget points() {\n\t\treturn (this._points = this._points || this._get_points());\n\t}\n\tprivate _get_points(): CorePointArray3 {\n\t\tconst index_array = this._geometry.index?.array || [];\n\t\tconst start = this._index * 3;\n\t\treturn [\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 0]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 1]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 2]),\n\t\t];\n\t}\n\tget positions() {\n\t\treturn (this._positions = this._positions || this._get_positions());\n\t}\n\tprivate _get_positions(): Vector3Array3 {\n\t\tconst points = this.points;\n\t\treturn [points[0].position(), points[1].position(), points[2].position()];\n\t}\n\tget triangle() {\n\t\treturn (this._triangle = this._triangle || this._get_triangle());\n\t}\n\tprivate _get_triangle(): Triangle {\n\t\tconst positions = this.positions;\n\t\treturn new Triangle(positions[0], positions[1], positions[2]);\n\t}\n\tget deltas() {\n\t\treturn (this._deltas = this._deltas || this._get_deltas());\n\t}\n\tprivate _get_deltas(): Vector3Array2 {\n\t\treturn [this.positions[1].clone().sub(this.positions[0]), this.positions[2].clone().sub(this.positions[0])];\n\t}\n\n\tget area(): number {\n\t\treturn this.triangle.getArea();\n\t}\n\tcenter(target: Vector3) {\n\t\tconst positions = this.positions;\n\t\ttarget.x = (positions[0].x + positions[1].x + positions[2].x) / 3;\n\t\ttarget.y = (positions[0].y + positions[1].y + positions[2].y) / 3;\n\t\ttarget.z = (positions[0].z + positions[1].z + positions[2].z) / 3;\n\n\t\treturn target;\n\t}\n\n\trandom_position(seed: number) {\n\t\tlet weights = [CoreMath.rand_float(seed), CoreMath.rand_float(seed * 6541)];\n\n\t\tif (weights[0] + weights[1] > 1) {\n\t\t\tweights[0] = 1 - weights[0];\n\t\t\tweights[1] = 1 - weights[1];\n\t\t}\n\n\t\treturn this.positions[0]\n\t\t\t.clone()\n\t\t\t.add(this.deltas[0].clone().multiplyScalar(weights[0]))\n\t\t\t.add(this.deltas[1].clone().multiplyScalar(weights[1]));\n\t}\n\t// random_position(seed: number){\n\t// \tlet weights = [\n\t// \t\tCoreMath.rand_float(seed),\n\t// \t\tCoreMath.rand_float(seed*524),\n\t// \t\tCoreMath.rand_float(seed*4631)\n\t// \t]\n\t// \tconst sum = lodash_sum(weights)\n\t// \tweights = weights.map(w=>w/sum)\n\t// \tconst pos = new Vector3()\n\t// \tlet positions = this.positions().map((p,i)=> p.multiplyScalar(weights[i]))\n\t// \tpositions.forEach(p=>{\n\t// \t\tpos.add(p)\n\t// \t})\n\t// \treturn pos\n\t// }\n\n\tattrib_value_at_position(attrib_name: string, position: Vector3) {\n\t\t// const weights = CoreInterpolate._weights_from_3(position, this._positions)\n\t\tconst barycentric_coordinates = new Vector3();\n\t\tthis.triangle.getBarycoord(position, barycentric_coordinates);\n\t\tconst weights = barycentric_coordinates.toArray();\n\n\t\tconst attrib = this._geometry.attributes[attrib_name];\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst point_values = this.points.map((point) => point.attrib_value(attrib_name));\n\n\t\tlet new_attrib_value;\n\t\tlet sum;\n\t\tlet index = 0;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tsum += point_value * weights[index];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tconst weighted_value = point_value.multiplyScalar(weights[index]);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\tsum.add(weighted_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum = weighted_value;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t}\n\t\t}\n\t\treturn new_attrib_value;\n\t}\n\n\tstatic interpolated_value(\n\t\tgeometry: BufferGeometry,\n\t\tface: FaceLike,\n\t\tintersect_point: Vector3,\n\t\tattrib: BufferAttribute\n\t) {\n\t\t// let point_index, i, sum\n\t\tconst point_indices = [face.a, face.b, face.c];\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_attrib_array = position_attrib.array;\n\t\tconst point_positions = point_indices.map(\n\t\t\t(point_index) =>\n\t\t\t\tnew Vector3(\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 0],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 1],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 2]\n\t\t\t\t)\n\t\t);\n\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst attrib_array = attrib.array;\n\t\tlet attrib_values: NumericAttribValue[] = [];\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tattrib_values = point_indices.map((point_index) => attrib_array[point_index]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) => new Vector2(attrib_array[point_index * 2 + 0], attrib_array[point_index * 2 + 1])\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) =>\n\t\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 0],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 1],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 2]\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst dist_to_points = point_indices.map((point_index, i) => intersect_point.distanceTo(point_positions[i]));\n\n\t\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-points\n\t\t// TODO: replace this with Core.Math.Interpolate\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_points[0] * dist_to_points[1],\n\t\t\tdist_to_points[0] * dist_to_points[2],\n\t\t\tdist_to_points[1] * dist_to_points[2],\n\t\t]);\n\n\t\tconst weights = [\n\t\t\t(dist_to_points[1] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[1]) / distance_total,\n\t\t];\n\n\t\tlet new_attrib_value;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tnew_attrib_value = lodash_sum(\n\t\t\t\t\tpoint_indices.map((point_indx, i) => weights[i] * (attrib_values[i] as number))\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar values = point_indices.map((point_index, i) =>\n\t\t\t\t\t(attrib_values[i] as Vector3).multiplyScalar(weights[i])\n\t\t\t\t);\n\t\t\t\tnew_attrib_value = null;\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (new_attrib_value) {\n\t\t\t\t\t\tnew_attrib_value.add(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew_attrib_value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn new_attrib_value;\n\t}\n}\n","import {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute'\n\nexport class MonkeyPatcher {\n\t// this allows cloning of geometries containing InterleavedBufferAttribute such as soldier.glb\n\tstatic patch(attribute: InterleavedBufferAttribute) {\n\t\tObject.assign(attribute, {\n\t\t\tclone: function() {\n\t\t\t\treturn new InterleavedBufferAttribute(\n\t\t\t\t\tattribute.data.clone(),\n\t\t\t\t\tattribute.itemSize,\n\t\t\t\t\tattribute.offset,\n\t\t\t\t\tattribute.normalized\n\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Object3D} from 'three/src/core/Object3D'\n// import {Group} from 'three/src/objects/Group'\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Box3} from 'three/src/math/Box3';\nimport {TypedContainer} from './_Base';\nimport {CoreGroup} from '../../core/geometry/Group';\n// import {CoreObject} from '../../core/geometry/Object'\nimport {CoreGeometry} from '../../core/geometry/Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {ContainableMap} from './utils/ContainableMap';\n// import {CoreConstant} from '../../core/geometry/Constant'\n\n// const CoreGeometryGroup = CoreGroup\n\n// export type RequestContainerGeometryCallback = (container: Geometry)=>void\n\n// interface GroupOptions {\n// \tclone?: boolean\n// }\n// interface BooleanByString {\n// \t[propName: string]: boolean\n// }\nexport class GeometryContainer extends TypedContainer<ContainableMap['GEOMETRY']> {\n\t// protected _group: Group = new Group()\n\t// private _objects_by_uuid: BooleanByString = {}\n\t// protected _content: Object3D[] = []\n\t// protected _core_group: CoreGroup | null;\n\n\t// _points_count: number | null;\n\t// _bounding_box: Box3 | null;\n\n\t// constructor() {\n\t// \tsuper();\n\t// \t// this._materials = [];\n\t// }\n\n\t// _post_set_content() {\n\t// \tthis._core_group = this._core_group || new CoreGroup();\n\t// \tthis._core_group.touch();\n\t// \tthis._core_group.set_objects(this._content);\n\t// }\n\tset_objects(objects: Object3D[]) {}\n\n\t// clone_content(){\n\t// \treturn this._content.map(object=>CoreObject.clone(object))\n\t// }\n\t// core_content(): CoreGroup | null {\n\t// \treturn this._core_group; //= this._core_group || this._create_core_group()\n\t// }\n\tcore_content_cloned(): CoreGroup | undefined {\n\t\tif (this._content) {\n\t\t\treturn this._content.clone();\n\t\t}\n\t}\n\t// private _create_core_group(){\n\t// \tif(this._content){\n\t// \t\tconst core_group = new CoreGroup()\n\t// \t\tcore_group.set_objects(this._content)\n\t// \t\treturn core_group\n\t// \t}\n\t// }\n\t// reset_caches() {\n\t// \tconsole.log('reset cache');\n\t// \t// this._content = null;\n\t// \t// this._points_count = null;\n\t// \t// this._bounding_box = null;\n\t// }\n\t// _default_content() {\n\t// \treturn new CoreGroup();\n\t// }\n\n\t// set_geometry: (geometry)->\n\t// \tif @_content?\n\t// \t\t@_content.dispose()\n\t// \tthis.set_content(geometry)\n\t// has_group: ->\n\t// \tthis.has_content()\n\t// group(options?: GroupOptions): Group | null{\n\t// \tlet src_group;\n\t// \tif (options == null) { options = {}; }\n\t// \tif ((options['clone'] == null)) {\n\t// \t\toptions['clone'] = true;\n\t// \t}\n\n\t// \tlet new_group = null;\n\t// \tif ((src_group = this.content()) != null) {\n\t// \t\tif (options['clone'] === true) {\n\t// \t\t\tnew_group = CoreGroup.clone(src_group);\n\t// \t\t} else {\n\t// \t\t\tnew_group = src_group;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn new_group;\n\t// }\n\n\t// group_wrapper(options){\n\t// \t// if (options == null) { options = {}; }\n\t// \t// return new CoreGroup(this.group(options));\n\t// }\n\t// core_group() {\n\t// \treturn this._core_group; //this.group_wrapper(options)\n\t// }\n\tset_content(content: ContainableMap['GEOMETRY']) {\n\t\tsuper.set_content(content);\n\t}\n\t// object(options){\n\t// \tif (options == null) { options = {}; }\n\t// \treturn this.group(options);\n\t// }\n\t// _post_set_content(){\n\t// \t// const objects_to_remove = []\n\t// \t// const objects_to_add = []\n\t// \t// const new_objects_by_uuid = {}\n\t// \t// for(let object of this._content){\n\t// \t// \tif(!this._objects_by_uuid[object.uuid]){\n\t// \t// \t\tobjects_to_add.push(object)\n\t// \t// \t}\n\t// \t// \tnew_objects_by_uuid[object.uuid] = true\n\t// \t// }\n\t// \t// for(let uuid of Object.keys(this._objects_by_uuid)){\n\n\t// \t// }\n\t// \tlet child\n\t// \twhile(child = this._group.children[0]){\n\t// \t\tthis._group.remove(child)\n\t// \t}\n\t// \tfor(let object of this._content){\n\t// \t\tthis._group.add(object)\n\t// \t}\n\t// }\n\n\t//\n\t//\n\t// INFOS\n\t//\n\t//\n\t// infos() {\n\t// \tif (this._content != null) {\n\t// \t\tconst bbox = this.bounding_box();\n\t// \t\tconst center = this.center(); //bbox.min.clone().add(bbox.max).multiplyScalar(0.5)\n\t// \t\tconst size = this.size(); //bbox.max.clone().sub(bbox.min)\n\n\t// \t\tconst node = this.node();\n\t// \t\tconst part_1 = [\n\t// \t\t\t`time dependent: ${node.is_time_dependent()}`,\n\t// \t\t\t`${node.cooks_count()} cooks`,\n\t// \t\t\t`cook time: ${node.cook_time()}`,\n\t// \t\t\t`cook time with inputs: ${node.cook_time_with_inputs()}`,\n\t// \t\t\t`${this.points_count()} points`,\n\t// \t\t\t`${this.objects_count()} object(s)  (${this.objects_visible_count()} visible)`\n\t// \t\t];\n\n\t// \t\tconst part_2 = [];\n\t// \t\tconst count_by_type = this.objects_count_by_type();\n\t// \t\tObject.keys(count_by_type).forEach((type)=>{\n\n\t// \t\t\tconst count = count_by_type[type];\n\t// \t\t\treturn part_2.push(`${count} ${type}`);\n\t// \t\t});\n\n\t// \t\tconst vertex_attributes = this.vertex_attribute_names();\n\t// \t\tconst object_attributes = this.object_attribute_names();\n\t// \t\tpart_2.push(`vertex attributes (${vertex_attributes.length}): ${vertex_attributes.join(', ')}`);\n\t// \t\tpart_2.push(`object attributes (${object_attributes.length}): ${object_attributes.join(', ')}`);\n\n\t// \t\tconst part_3 = [\n\t// \t\t\t\"bbox:\",\n\t// \t\t\t[bbox.min.x, bbox.min.y, bbox.min.z],\n\t// \t\t\t[bbox.max.x, bbox.max.y, bbox.max.z],\n\t// \t\t\t\"center:\",\n\t// \t\t\t[center.x, center.y, center.z],\n\t// \t\t\t\"size:\",\n\t// \t\t\t[size.x, size.y, size.z],\n\t// \t\t\tthis._content\n\t// \t\t];\n\n\t// \t\treturn lodash_concat( part_1, part_2, part_3 );\n\t// \t}\n\t// }\n\n\tprivate first_object() {\n\t\tif (this._content) {\n\t\t\treturn this._content.objects()[0];\n\t\t}\n\t}\n\tprivate first_geometry(): BufferGeometry | null {\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tobjects_count(): number {\n\t\t// let count = 0\n\t\t// if(this._content){\n\t\t// \tcount = this._content.children.length\n\t\t// }\n\t\t// return count\n\t\tif (this._content) {\n\t\t\treturn this._content.objects().length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tobjects_visible_count(): number {\n\t\tlet count = 0;\n\t\tif (this._content) {\n\t\t\tcount = this._content.objects().filter((c) => c.visible).length; // lodash_filter(this._content, c=> c.visible).length;\n\t\t}\n\t\treturn count;\n\t}\n\tobjects_count_by_type() {\n\t\tconst count_by_type: Dictionary<number> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tif (count_by_type[human_type] == null) {\n\t\t\t\t\tcount_by_type[human_type] = 0;\n\t\t\t\t}\n\t\t\t\tcount_by_type[human_type] += 1;\n\t\t\t}\n\t\t}\n\t\treturn count_by_type;\n\t}\n\tobjects_names_by_type() {\n\t\tconst names_by_type: Dictionary<string[]> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tnames_by_type[human_type] = names_by_type[human_type] || [];\n\t\t\t\tnames_by_type[human_type].push(core_object.name());\n\t\t\t}\n\t\t}\n\t\treturn names_by_type;\n\t}\n\n\tvertex_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tnames = Object.keys(geometry.attributes);\n\t\t}\n\t\treturn names;\n\t}\n\tvertex_attribute_sizes_by_name() {\n\t\tlet sizes_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\tsizes_by_name[attrib_name] = attrib.itemSize;\n\t\t\t});\n\t\t}\n\t\treturn sizes_by_name;\n\t}\n\tvertex_attribute_types_by_name() {\n\t\tlet types_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tconst core_geo = new CoreGeometry(geometry);\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\ttypes_by_name[attrib_name] = core_geo.attrib_type(attrib_name);\n\t\t\t});\n\t\t}\n\t\treturn types_by_name;\n\t}\n\tobject_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\tnames = Object.keys(object.userData['attributes'] || {});\n\t\t}\n\t\treturn names;\n\t}\n\n\tpoints_count(): number {\n\t\tif (this._content) {\n\t\t\treturn this._content.points_count();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// return this._points_count != null ? this._points_count : (this._points_count = this._compute_points_count());\n\t}\n\n\t// _compute_points_count() {\n\t// \tlet points_count = 0;\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\tobject.traverse((object) => {\n\t// \t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t// \t\t\t\tif (geometry) {\n\t// \t\t\t\t\tpoints_count += CoreGeometry.points_count(geometry);\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// \treturn points_count;\n\t// }\n\t//@_content.userData['points_count']\n\t//Core.Geometry.Geometry.points_count(@_content)\n\t// count = 0\n\t// if (position = @_content.getAttribute('position'))?\n\t// \tif (array = position.array)?\n\t// \t\tcount = array.length / 3\n\n\t// count\n\n\t// points_for_geometry: (geometry)->\n\t// \tCore.Geometry.Geometry.points_from_geometry(geometry)\n\n\t// create_geometry_from_points: (points, index_mode)->\n\t// \tCore.Geometry.Geometry.geometry_from_points(points, index_mode)\n\n\t//\n\t//\n\t// BBOX\n\t//\n\t//\n\tbounding_box(): Box3 {\n\t\treturn this._content.bounding_box();\n\t\t// return this._bounding_box != null ? this._bounding_box : (this._bounding_box = this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\treturn this._content.center();\n\t\t// const center = new Vector3();\n\t\t// this.bounding_box().getCenter(center);\n\t\t// return center;\n\t}\n\tsize(): Vector3 {\n\t\treturn this._content.size();\n\t\t// const size = new Vector3();\n\t\t// this.bounding_box().getSize(size);\n\t\t// return size;\n\t}\n\n\t// private _compute_bounding_box() {\n\t// \tconst bbox = new Box3();\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\t// const box = new Box3()\n\t// \t\t\t// bbox.setFromObject(object);\n\t// \t\t\tbbox.expandByObject(object);\n\t// \t\t}\n\t// \t}\n\t// \treturn bbox;\n\t// }\n}\n","import {TypedSopNode} from './_Base';\n// import {CoreTransform} from '../../../Core/Transform';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// interface ActionsByName {\n// \t[propName: string]: THREE.AnimationClip;\n// }\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nclass AnimationCopySopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new AnimationCopySopParamsConfig();\n\nexport class AnimationCopySopNode extends TypedSopNode<AnimationCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy animation to', 'geometry to copy animation from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_target = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst src_object = core_group_src.objects()[0] as Object3DWithAnimation;\n\t\tconst target_object = core_group_target.objects()[0] as Object3DWithAnimation;\n\n\t\tconst src_animations = src_object.animations;\n\t\tif (src_animations) {\n\t\t\ttarget_object.animations = src_animations.map((a) => a.clone());\n\t\t\tthis.set_core_group(core_group_target);\n\t\t} else {\n\t\t\tthis.states.error.set('no animation found');\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport lodash_isArray from 'lodash/isArray';\n// import {Object3D} from 'three/src/core/Object3D';\nimport {AnimationMixer} from 'three/src/animation/AnimationMixer';\n// import {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nimport {ParamType} from '../../poly/ParamType';\nimport {AnimationAction} from 'three/src/animation/AnimationAction';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {Material} from 'three/src/materials/Materials';\nimport {MaterialWithSkinning} from '../../../core/geometry/Material';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseNodeType} from '../_Base';\nclass AnimationMixerSopParamsConfig extends NodeParamsConfig {\n\ttime = ParamConfig.FLOAT('$T', {range: [0, 10]});\n\tprepare = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tAnimationMixerSopNode.PARAM_CALLBACK_prepare(node as AnimationMixerSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new AnimationMixerSopParamsConfig();\n\nexport class AnimationMixerSopNode extends TypedSopNode<AnimationMixerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_mixer';\n\t}\n\n\t_previous_time: number | null = null;\n\t_mixer: AnimationMixer | null = null;\n\t_actions_by_name: Dictionary<AnimationAction> = {};\n\t_values_by_param_name: Dictionary<number> = {};\n\t// _mixer_used_once: boolean = false\n\t_animation_target: Object3DWithAnimation | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be animated'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tif (!this._mixer) {\n\t\t\tthis.create_mixer(input_contents[0]);\n\t\t} else {\n\t\t\tthis._update_mixer();\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate create_mixer(core_group: CoreGroup) {\n\t\tthis._animation_target = core_group.objects()[0] as Object3DWithAnimation;\n\t\tthis._mixer = new AnimationMixer(this._animation_target);\n\n\t\tthis._remove_spare_params();\n\t\tthis._actions_by_name = {};\n\n\t\tif (this._animation_target.animations) {\n\t\t\tthis._animation_target.animations.forEach((animation, i) => {\n\t\t\t\tconst param_name = animation.name;\n\t\t\t\tconst previous_value = this._values_by_param_name[param_name];\n\t\t\t\tlet default_value = previous_value;\n\t\t\t\tif (default_value == null) {\n\t\t\t\t\tdefault_value = i == 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tconst param = this.add_param(ParamType.FLOAT, param_name, default_value, {spare: true});\n\t\t\t\tif (param) {\n\t\t\t\t\tconst prev_value = this._values_by_param_name[param_name];\n\t\t\t\t\tif (prev_value) {\n\t\t\t\t\t\tparam.set(prev_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._mixer) {\n\t\t\t\t\tconst action = this._mixer.clipAction(animation);\n\t\t\t\t\tthis._actions_by_name[animation.name] = action;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\n\t\tObject.keys(this._actions_by_name).forEach((name) => {\n\t\t\tthis._actions_by_name[name].play();\n\t\t});\n\n\t\t// set material skinning\n\t\tconst materials_by_id: Dictionary<Material> = {};\n\t\tthis._animation_target.traverse((object3d: Object3D) => {\n\t\t\tconst child = object3d as Mesh;\n\t\t\tif (child.material) {\n\t\t\t\tif (!lodash_isArray(child.material)) {\n\t\t\t\t\tmaterials_by_id[child.material.uuid] = child.material;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.keys(materials_by_id).forEach((uuid) => {\n\t\t\tconst material = materials_by_id[uuid] as MaterialWithSkinning;\n\t\t\tmaterial.skinning = true;\n\t\t\tmaterial.morphTargets = true;\n\t\t});\n\t\tthis._previous_time = null;\n\t\tthis._update_mixer();\n\t\tthis._update_mixer_weights(); // might be redundant with _update_mixer, but ensures this is done on load\n\t\tthis.set_object(this._animation_target);\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tthis._values_by_param_name = {};\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tconst names_to_delete: string[] = [];\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get_float(param_name);\n\t\t\tif (param) {\n\t\t\t\tthis._values_by_param_name[param_name] = param.value;\n\t\t\t\tnames_to_delete.push(param_name);\n\t\t\t}\n\t\t});\n\t\tif (names_to_delete.length > 0) {\n\t\t\tthis.params.update_params({names_to_delete: names_to_delete});\n\t\t}\n\t}\n\n\tprivate _update_mixer() {\n\t\tif (this.pv.time != this._previous_time) {\n\t\t\tthis._update_mixer_time();\n\t\t} else {\n\t\t\tthis._update_mixer_weights();\n\t\t}\n\t}\n\tprivate _update_mixer_time() {\n\t\tconst delta = this.pv.time - (this._previous_time || 0);\n\t\tif (this._mixer) {\n\t\t\tthis._mixer.update(delta);\n\t\t}\n\t\tthis._previous_time = this.pv.time;\n\t}\n\n\tprivate _update_mixer_weights() {\n\t\tfor (let name of Object.keys(this._actions_by_name)) {\n\t\t\tconst action = this._actions_by_name[name];\n\t\t\tconst cache_value = this.params.get_float(name).value;\n\t\t\tif (cache_value != null) {\n\t\t\t\taction.setEffectiveWeight(cache_value);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_prepare(node: AnimationMixerSopNode, param: BaseParamType) {\n\t\tnode.prepare_animation_mixer();\n\t}\n\tasync prepare_animation_mixer() {\n\t\tthis._mixer = null;\n\t\tconst container = await this.io.inputs.eval_required_input(0);\n\t\tthis.create_mixer(container.core_content_cloned());\n\t\tthis.set_dirty();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribAddMultSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tpre_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n\tmult = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tpost_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n}\nconst ParamsConfig = new AttribAddMultSopParamsConfig();\n\nexport class AttribAddMultSopNode extends TypedSopNode<AttribAddMultSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_add_mult';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tthis._update_attrib(attrib_name, geometry);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _update_attrib(attrib_name: string, geometry: BufferGeometry) {\n\t\tconst attribute = geometry.getAttribute(attrib_name) as BufferAttribute;\n\t\tif (attribute) {\n\t\t\tconst values = attribute.array as number[];\n\n\t\t\tconst pre_add = this.pv.pre_add;\n\t\t\tconst mult = this.pv.mult;\n\t\t\tconst post_add = this.pv.post_add;\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i];\n\t\t\t\tvalues[i] = (value + pre_add) * mult + post_add;\n\t\t\t}\n\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\tattribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nclass AttribCopySopParamsConfig extends NodeParamsConfig {\n\t// class = ParamConfig.INTEGER(CoreConstant.ATTRIB_CLASS.VERTEX, {\n\t// \tmenu: {\n\t// \t\tentries: [\n\t// \t\t\t{name: 'vertex', value: CoreConstant.ATTRIB_CLASS.VERTEX},\n\t// \t\t\t{name: 'object', value: CoreConstant.ATTRIB_CLASS.OBJECT},\n\t// \t\t],\n\t// \t},\n\t// })\n\tname = ParamConfig.STRING('');\n\ttnew_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {tnew_name: 1}});\n\t// to_all_components = ParamConfig.BOOLEAN(1)\n\t// src_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n\t// dest_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n}\nconst ParamsConfig = new AttribCopySopParamsConfig();\n\n// TODO: attrib copy should handle string attributes\nexport class AttribCopySopNode extends TypedSopNode<AttribCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy attributes to', 'geometry to copy attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_dest = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst attrib_names = core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tthis.copy_vertex_attribute_between_core_groups(core_group_dest, core_group_src, attrib_name);\n\t\t}\n\n\t\t// switch (this.pv.class) {\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t// \t\tthis.copy_vertex_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t// \t\tthis.copy_object_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// }\n\n\t\treturn this.set_core_group(core_group_dest);\n\t}\n\n\tprivate copy_vertex_attribute_between_core_groups(\n\t\tcore_group_dest: CoreGroup,\n\t\tcore_group_src: CoreGroup,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_objects = core_group_src.objects();\n\t\tconst dest_objects = core_group_dest.objects();\n\n\t\tif (dest_objects.length > src_objects.length) {\n\t\t\tthis.states.error.set('second input does not have enough objects to copy attributes from');\n\t\t} else {\n\t\t\tfor (let i = 0; i < dest_objects.length; i++) {\n\t\t\t\tconst dest_geometry = dest_objects[i].geometry;\n\t\t\t\tconst src_geometry = dest_objects[i].geometry;\n\t\t\t\tthis.copy_vertex_attribute_between_geometries(dest_geometry, src_geometry, attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\tprivate copy_vertex_attribute_between_geometries(\n\t\tdest_geometry: BufferGeometry,\n\t\tsrc_geometry: BufferGeometry,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_attrib = src_geometry.getAttribute(attrib_name);\n\t\tif (src_attrib) {\n\t\t\tconst size = src_attrib.itemSize;\n\t\t\tconst src_points_count = src_geometry.getAttribute('position').array.length / 3;\n\t\t\tconst dest_points_count = dest_geometry.getAttribute('position').array.length / 3;\n\t\t\tif (dest_points_count > src_points_count) {\n\t\t\t\tthis.states.error.set('not enough points in second input');\n\t\t\t}\n\t\t\tconst src_array = src_attrib.array as number[];\n\t\t\tconst sub_array = src_array.slice(0, dest_points_count * size);\n\t\t\tconst dest_name = this.pv.tnew_name ? this.pv.new_name : attrib_name;\n\t\t\tdest_geometry.setAttribute(dest_name, new Float32BufferAttribute(sub_array, size));\n\t\t} else {\n\t\t\tthis.states.error.set(`attribute '${attrib_name}' does not exist on second input`);\n\t\t}\n\t}\n\n\t// _src_value_to_all_components(src_attrib_value: NumericAttribValue, dest_attrib_size) {\n\t// \tif (lodash_isNumber(src_attrib_value)) {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value, src_attrib_value);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(src_attrib_value, src_attrib_value, src_attrib_value);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.x;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value.x, src_attrib_value.y);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(\n\t// \t\t\t\t\tsrc_attrib_value.x,\n\t// \t\t\t\t\tsrc_attrib_value.y,\n\t// \t\t\t\t\tsrc_attrib_value.z || src_attrib_value.y\n\t// \t\t\t\t);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _src_value_to_component(src_attrib_value, current_dest_value, src_component, dest_component) {\n\t// \tconst src_component_value = (() => {\n\t// \t\tswitch (src_component) {\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn src_attrib_value.x || src_attrib_value;\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.y;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn src_attrib_value.z;\n\t// \t\t}\n\t// \t})();\n\n\t// \tconst dest_component_name = ['x', 'y', 'z'][dest_component];\n\t// \tif (current_dest_value[dest_component_name] != null) {\n\t// \t\tcurrent_dest_value[dest_component_name] = src_component_value;\n\t// \t\treturn current_dest_value;\n\t// \t} else {\n\t// \t\tconst src_component_name = ['x', 'y', 'z'][src_component];\n\t// \t\treturn src_attrib_value[src_component_name];\n\t// \t}\n\t// }\n\n\t// TODO: find a way to use the point method, but have the group api allow easy switch\n\t// private  copy_object_attribute(core_group_dest: CoreGroup, core_group_src:CoreGroup) {\n\t// \t// const objects_dest = core_group_dest.objects();\n\t// \t// const objects_src = core_group_src.objects();\n\n\t// \t//attribute_names = core_group_src.attrib_names_matching_mask(@_param_name)\n\n\t// \t//lodash_each attribute_names, (attrib_name) =>\n\t// \tconst attrib_name = this.pv.name;\n\n\t// \tif (!core_group_dest.has_attrib(attrib_name)) {\n\t// \t\tconst attrib_size = core_group_src.attrib_size(attrib_name);\n\t// \t\tcore_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t// \t}\n\n\t// \tlodash_each(points_dest, (point_dest, i) => {\n\t// \t\tlet point_src;\n\t// \t\tif ((point_src = points_src[i]) != null) {\n\t// \t\t\tconst attrib_value = point_src.attrib_value(attrib_name);\n\t// \t\t\tpoint_dest.set_attrib_value(attrib_name, attrib_value);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedSopNode} from './_Base';\nimport {\n\tCoreConstant,\n\tAttribClassMenuEntries,\n\tAttribTypeMenuEntries,\n\tAttribClass,\n\tAttribType,\n} from '../../../core/geometry/Constant';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const VALUE_PARAM = {\n// \tVALUEX: 'valuex',\n// \tVALUE: 'value',\n// \tSTRING: 'string',\n// };\n// const DEFAULT_VALUE = {\n// \tvaluex: 0,\n// \tvalue: [0, 0, 0],\n// \tstring: '',\n// };\n// type COMPONENT_INDEX = keyof Vector4Like;\n// const COMPONENT_INDEX: Array<COMPONENT_INDEX> = ['x', 'y', 'z', 'w'];\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribCreateSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\ttype = ParamConfig.INTEGER(AttribType.NUMERIC, {\n\t\tmenu: {\n\t\t\tentries: AttribTypeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('new_attrib');\n\tsize = ParamConfig.INTEGER(1, {\n\t\trange: [1, 4],\n\t\trange_locked: [true, true],\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC},\n\t});\n\tvalue1 = ParamConfig.FLOAT(0, {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue2 = ParamConfig.VECTOR2([0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 2},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue3 = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 3},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue4 = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 4},\n\t\texpression: {for_entities: true},\n\t});\n\tstring = ParamConfig.STRING('', {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.STRING},\n\t\texpression: {for_entities: true},\n\t});\n}\nconst ParamsConfig = new AttribCreateSopParamsConfig();\nexport class AttribCreateSopNode extends TypedSopNode<AttribCreateSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_create';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _w_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.name && lodash_trim(this.pv.name) != '') {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.add_point_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.add_object_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('attribute name is not valid');\n\t\t}\n\t}\n\n\tasync add_point_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tconst core_object = core_objects[i];\n\t\t\tswitch (this.pv.type) {\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\t\tawait this.add_numeric_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\t\tawait this.add_string_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync add_object_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects_from_group(this.pv.group);\n\t\tswitch (this.pv.type) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\tawait this.add_numeric_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\tawait this.add_string_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tasync add_numeric_attribute_to_points(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\n\t\tif (param.has_expression()) {\n\t\t\tif (!core_geometry.has_attrib(this.pv.name)) {\n\t\t\t\tcore_geometry.add_numeric_attrib(this.pv.name, this.pv.size, param.value);\n\t\t\t}\n\n\t\t\tconst geometry = core_geometry.geometry();\n\t\t\tconst array = geometry.getAttribute(this.pv.name).array as number[];\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\t\tarray[point.index * this.pv.size + 0] = value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tconst tmp_arrays = new Array(params.length);\n\t\t\t\tlet component_param;\n\n\t\t\t\tconst arrays_by_geometry_uuid = [\n\t\t\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._w_arrays_by_geometry_uuid,\n\t\t\t\t];\n\n\t\t\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\t\t\tcomponent_param = params[i];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\ttmp_arrays[i] = this._init_array_if_required(\n\t\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\t\tarrays_by_geometry_uuid[i],\n\t\t\t\t\t\t\tpoints.length\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(point, value) => {\n\t\t\t\t\t\t\t\t// array[point.index()*this.pv.size+i] = value\n\t\t\t\t\t\t\t\ttmp_arrays[i][point.index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value = component_param.value;\n\t\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t\tarray[point.index * this.pv.size + i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// commit the tmp values\n\t\t\t\tfor (let j = 0; j < tmp_arrays.length; j++) {\n\t\t\t\t\tconst tmp_array = tmp_arrays[j];\n\t\t\t\t\tif (tmp_array) {\n\t\t\t\t\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\t\t\t\t\tarray[i * this.pv.size + j] = tmp_array[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// const value = await param.eval_p();\n\t\t\tcore_object.add_numeric_vertex_attrib(this.pv.name, this.pv.size, param.value);\n\t\t}\n\t}\n\n\tasync add_numeric_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\t\tif (param.has_expression()) {\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tlet values_by_core_object_index: Dictionary<NumericAttribValueAsArray> = {};\n\t\t\t\t// for (let component_param of params) {\n\t\t\t\t// \tvalues.push(component_param.value);\n\t\t\t\t// }\n\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\tvalues_by_core_object_index[core_object.index] = (<unknown>[]) as NumericAttribValueAsArray;\n\t\t\t\t}\n\t\t\t\tfor (let component_index = 0; component_index < params.length; component_index++) {\n\t\t\t\t\tconst component_param = params[component_index];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = component_param.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\t\tconst value = values_by_core_object_index[core_object.index];\n\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// let value = await param.eval_p();\n\t\t\t// if (this.pv.size > 1) {\n\t\t\t// \tvalue = this._convert_object_numeric_value(value);\n\t\t\t// }\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _convert_object_numeric_value(value: Vector4) {\n\t// \tlet converted_value;\n\t// \tswitch (this.pv.size) {\n\t// \t\tcase 1: {\n\t// \t\t\tconverted_value = value.x;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 2: {\n\t// \t\t\tconverted_value = new Vector2(value.x, value.y);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 3: {\n\t// \t\t\tconverted_value = new Vector3(value.x, value.y, value.z);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 4: {\n\t// \t\t\tconverted_value = new Vector4(value.x, value.y, value.z, value.w);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn converted_value;\n\t// }\n\n\tasync add_string_attribute_to_points(core_object: CoreObject) {\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\t\tconst param = this.p.string;\n\n\t\tconst string_values: string[] = [];\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tstring_values[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tstring_values.push(param.value);\n\t\t}\n\n\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(string_values);\n\t\tcore_object.core_geometry().set_indexed_attribute(this.pv.name, index_data['values'], index_data['indices']);\n\t}\n\n\tasync add_string_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = this.p.string;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t\t// this.context().set_entity(object);\n\n\t\t// const core_object = new CoreObject(object);\n\n\t\t// this.param('string').eval(val => {\n\t\t// \tcore_object.add_attribute(this.pv.name, val);\n\t\t// });\n\t}\n\n\t//\n\t//\n\t// PRIVATE\n\t//\n\t//\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\t// async _eval_params_for_entities(entities){\n\t// \t// let p = Promise.resolve(); // Q() in q\n\n\t// \tconst param = this._value_param();\n\n\t// \tif (param.has_expression()) {\n\t// \t\t// const iterator = new CoreIterator()\n\t// \t\t// await iterator.start_with_array(entities, (element, index)=>{\n\n\t// \t\t// })\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tawait this._eval_param_for_entity(param, entity);\n\t// \t\t}\n\n\t// \t\t// entities.forEach((entity, index)=> {\n\t// \t\t// \tp = p.then(() => {\n\t// \t\t// \t\treturn this._eval_param_for_entity(param, entity);\n\t// \t\t// \t});\n\t// \t\t// });\n\t// \t} else {\n\t// \t\tconst val = await param.eval_p();\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tthis._values.push(val);\n\t// \t\t}\n\t// \t\t// entities.forEach(entity=> {\n\t// \t\t// \treturn this._values.push(val);\n\t// \t\t// });\n\t// \t}\n\n\t// \t// return p;\n\t// }\n\n\t// async _eval_param_for_entity(value_param, entity){\n\t// \tthis.context().set_entity(entity);\n\n\t// \tlet val = await value_param.eval_p()\n\n\t// \t // TODO: optimize. pass directly to the entity instead\n\t// \tif(val.clone){\n\t// \t\tval = val.clone()\n\t// \t}\n\t// \tthis._values.push(val);\n\t// }\n\n\t// private _default_attrib_value() {\n\t// \treturn DEFAULT_VALUE[this._value_param_name()];\n\t// }\n\n\t// private _value_param_name() {\n\t// \tif (this.pv.type == CoreConstant.ATTRIB_TYPE.NUMERIC) {\n\t// \t\tif (this.pv.size == 1) {\n\t// \t\t\treturn VALUE_PARAM.VALUEX;\n\t// \t\t} else {\n\t// \t\t\treturn VALUE_PARAM.VALUE;\n\t// \t\t}\n\t// \t} else {\n\t// \t\treturn VALUE_PARAM.STRING;\n\t// \t}\n\t// }\n\t// private _value_param() {\n\t// \treturn this.params.get(this._value_param_name());\n\t// }\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\t// private _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t// \tfor (let i = 0; i < tmp_array.length; i++) {\n\t// \t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribDeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribDeleteSopParamsConfig();\n\nexport class AttribDeleteSopNode extends TypedSopNode<AttribDeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_delete';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.delete_vertex_attribute(core_group, attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.delete_object_attribute(core_group, attrib_name);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tdelete_vertex_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tif (child.geometry) {\n\t\t\t\t\tconst core_geometry = new CoreGeometry(child.geometry as BufferGeometry);\n\t\t\t\t\tcore_geometry.delete_attribute(attrib_name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdelete_object_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tlet index = 0;\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tconst core_object = new CoreObject(child, index);\n\t\t\t\tcore_object.delete_attribute(attrib_name);\n\t\t\t\tindex++;\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribNormalizeSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tchange_name = ParamConfig.BOOLEAN(false);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribNormalizeSopParamsConfig();\n\nexport class AttribNormalizeSopNode extends TypedSopNode<AttribNormalizeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_normalize';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._normalize_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_normalize_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet normalized_values: NumericAttribValue[] = [];\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\t// if (this._param_only_integer_values) {\n\t\t\t\t// \tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t// \tconst index_by_value = {};\n\t\t\t\t// \tlodash_each(sorted_values, (sorted_value, i)=> index_by_value[sorted_value] = i);\n\t\t\t\t// \tnormalized_values = lodash_map(values, value=> index_by_value[value]);\n\n\t\t\t\t// } else {\n\t\t\t\tmin = lodash_min(values);\n\t\t\t\tmax = lodash_max(values);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_max\", max)\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypedSopNode} from './_Base';\nimport {AttribClass, AttribClassMenuEntries} from '../../../core/geometry/Constant';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreString} from '../../../core/String';\n\nexport enum AttribPromoteMode {\n\tMIN = 0,\n\tMAX = 1,\n\tFIRST_FOUND = 3,\n}\n// const PROMOTE_MODE:PROMOTE_MODE = {\n// \tMIN: 0,\n// \tMAX: 1,\n// \t// AVERAGE: 2,\n// \tFIRST_FOUND: 3,\n// };\nconst PromoteModeMenuEntries = [\n\t{name: 'min', value: AttribPromoteMode.MIN},\n\t{name: 'max', value: AttribPromoteMode.MAX},\n\t{name: 'first_found', value: AttribPromoteMode.FIRST_FOUND},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribPromoteSopParamsConfig extends NodeParamsConfig {\n\tclass_from = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tclass_to = ParamConfig.INTEGER(AttribClass.OBJECT, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tmode = ParamConfig.INTEGER(AttribPromoteMode.MIN, {\n\t\tmenu: {\n\t\t\tentries: PromoteModeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribPromoteSopParamsConfig();\n\nexport class AttribPromoteSopNode extends TypedSopNode<AttribPromoteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_promote';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('sort-amount-up');\n\t}\n\n\tcreate_params() {}\n\n\tprivate _core_group: CoreGroup | undefined;\n\tprivate _core_object: CoreObject | undefined;\n\tprivate _values_per_attrib_name: Dictionary<number[]> = {};\n\tprivate _filtered_values_per_attrib_name: Dictionary<number | undefined> = {};\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._core_group = input_contents[0];\n\n\t\tthis._values_per_attrib_name = {};\n\t\tthis._filtered_values_per_attrib_name = {};\n\n\t\tfor (let core_object of this._core_group.core_objects()) {\n\t\t\tthis._core_object = core_object;\n\t\t\tthis.find_values();\n\t\t\tthis.filter_values();\n\t\t\tthis.set_values();\n\t\t}\n\n\t\t// switch @_param_class_from\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.VERTEX then this.promote_attribute_from_vertex()\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.OBJECT then this.promote_attribute_from_object()\n\t\tthis.set_core_group(this._core_group);\n\t}\n\n\t// private promote_attribute_from_vertex() {\n\t// \t// switch (this.pv.class_to) {\n\t// \t// \tcase AttribClass.VERTEX:\n\t// \t\t\treturn this.promote_attribute_from_vertex_to_vertex();\n\t// \t\t// case AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_vertex_to_object();\n\t// \t// }\n\t// }\n\n\t// private promote_attribute_from_object() {\n\t// \tswitch (this.pv.class_to) {\n\t// \t\tcase AttribClass.VERTEX:\n\t// \t\t// return this.promote_attribute_from_object_to_vertex();\n\t// \t\tcase AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_object_to_object();\n\t// \t}\n\t// }\n\n\t// private promote_attribute_from_vertex_to_vertex() {\n\t// \tif (this._core_group) {\n\t// \t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t// \t\tconst points = this._core_group.points();\n\t// \t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\tconst values = lodash_map(points, (point) => point.attrib_value(attrib_name));\n\t// \t\t\tconst new_value = (() => {\n\t// \t\t\t\tswitch (this.pv.mode) {\n\t// \t\t\t\t\tcase PromoteMode.MIN:\n\t// \t\t\t\t\t\treturn lodash_min(values);\n\t// \t\t\t\t\tcase PromoteMode.MAX:\n\t// \t\t\t\t\t\treturn lodash_max(values);\n\t// \t\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t// \t\t\t\t\tdefault:\n\t// \t\t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t})();\n\n\t// \t\t\tif (new_value != null) {\n\t// \t\t\t\tlodash_each(points, (point) => point.set_attrib_value(attrib_name, new_value));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate find_values() {\n\t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class_from) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\treturn this.find_values_from_points(attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\treturn this.find_values_from_object(attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_values_from_points(attrib_name: string) {\n\t\tif (this._core_object) {\n\t\t\tconst points = this._core_object.points();\n\t\t\tthis._values_per_attrib_name[attrib_name] = points.map((point) => point.attrib_value(attrib_name));\n\t\t}\n\t}\n\n\tprivate find_values_from_object(attrib_name: string) {\n\t\tthis._values_per_attrib_name[attrib_name] = [];\n\t\tif (this._core_object) {\n\t\t\tthis._values_per_attrib_name[attrib_name].push(this._core_object.attrib_value(attrib_name) as number);\n\t\t}\n\t}\n\n\tprivate filter_values() {\n\t\tconst attrib_names = Object.keys(this._values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst values = this._values_per_attrib_name[attrib_name];\n\t\t\tswitch (this.pv.mode) {\n\t\t\t\tcase AttribPromoteMode.MIN:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_min(values);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribPromoteMode.MAX:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_max(values);\n\t\t\t\t\tbreak;\n\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t\t\t\tcase AttribPromoteMode.FIRST_FOUND:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = values[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values() {\n\t\tconst attrib_names = Object.keys(this._filtered_values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst new_value = this._filtered_values_per_attrib_name[attrib_name];\n\t\t\tif (new_value != null) {\n\t\t\t\tswitch (this.pv.class_to) {\n\t\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\t\tthis.set_values_to_points(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\t\tthis.set_values_to_object(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values_to_points(attrib_name: string, new_value: NumericAttribValue) {\n\t\tif (this._core_group && this._core_object) {\n\t\t\tconst attribute_exists = this._core_group.has_attrib(attrib_name);\n\t\t\tif (!attribute_exists) {\n\t\t\t\tconst param_size = 1; // TODO: allow size with larger params\n\t\t\t\tthis._core_group.add_numeric_vertex_attrib(attrib_name, param_size, new_value);\n\t\t\t}\n\n\t\t\tconst points = this._core_object.points();\n\t\t\tpoints.forEach((point) => point.set_attrib_value(attrib_name, new_value));\n\t\t}\n\t}\n\n\tprivate set_values_to_object(attrib_name: string, new_value: NumericAttribValue) {\n\t\tthis._core_object?.set_attrib_value(attrib_name, new_value);\n\t}\n}\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribRemapSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING();\n\tramp = ParamConfig.RAMP();\n\tchange_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribRemapSopParamsConfig();\n\nexport class AttribRemapSopNode extends TypedSopNode<AttribRemapSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_remap';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._remap_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_remap_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tlet normalized_values: NumericAttribValue[] = new Array(points.length);\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tif (this.pv.only_integer_values) {\n\t\t\t\t\tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t\tconst index_by_value: Dictionary<number> = {};\n\t\t\t\t\tsorted_values.forEach((sorted_value, i) => (index_by_value[sorted_value] = i));\n\t\t\t\t\tnormalized_values = values.map((value) => index_by_value[value]);\n\t\t\t\t} else {\n\t\t\t\t\tmin = lodash_min(values);\n\t\t\t\t\tmax = lodash_max(values);\n\t\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_max\", max)\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribRenameSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\told_name = ParamConfig.STRING();\n\tnew_name = ParamConfig.STRING();\n}\nconst ParamsConfig = new AttribRenameSopParamsConfig();\n\nexport class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_rename';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// const group = input_containers[0].group();\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.rename_attrib(this.pv.old_name, this.pv.new_name, this.pv.class);\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreMath} from '../../../core/math/_Module';\nimport {CoreInterpolate} from '../../../core/math/Interpolate';\nimport {CoreOctree} from '../../../core/math/octree/Octree';\nimport {CoreIterator} from '../../../core/Iterator';\n// import lodash_sum from 'lodash/sum';\n\n// enum TransferMethod {\n// \tAUTO = 0,\n// \tARTISTIC = 1,\n// }\n// const TransferMethodMenuEntries = [\n// \t{name: 'auto', value: TransferMethod.AUTO},\n// \t{name: 'artistic', value: TransferMethod.ARTISTIC},\n// ];\n\n// const LATITUDE = 'Latitude'\n// const LONGITUDE = 'Longitude'\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribTransferSopParamsConfig extends NodeParamsConfig {\n\tsrc_group = ParamConfig.STRING();\n\tdest_group = ParamConfig.STRING();\n\tname = ParamConfig.STRING();\n\tmax_samples_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\t// method = ParamConfig.INTEGER(TransferMethod.AUTO, {\n\t// \tmenu: {\n\t// \t\tentries: TransferMethodMenuEntries,\n\t// \t},\n\t// });\n\tdistance_threshold = ParamConfig.FLOAT(1);\n\tblend_width = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new AttribTransferSopParamsConfig();\n\nexport class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_transfer';\n\t}\n\n\t_core_group_dest!: CoreGroup;\n\t_core_group_src!: CoreGroup;\n\n\t// utils\n\t_attrib_names!: string[];\n\t_octree_timestamp: number | undefined;\n\t_prev_param_src_group: string | undefined;\n\t_octree: CoreOctree | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transfer attributes to', 'geometry to transfer attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// this._group_dest = input_containers[0].group();\n\t\t// const container1 = input_containers[1];\n\n\t\tthis._core_group_dest = input_contents[0]; //new CoreGroup(this._group_dest);\n\t\tconst dest_points = this._core_group_dest.points_from_group(this.pv.dest_group);\n\n\t\t// this._group_src = input_containers[1] //container1.group({ clone: false });\n\t\tthis._core_group_src = input_contents[1]; //new CoreGroup(this._group_src);\n\n\t\tthis._attrib_names = this._core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tthis._error_if_attribute_not_found_on_second_input();\n\t\tthis._build_octree_if_required(this._core_group_src);\n\t\tthis._add_attribute_if_required();\n\n\t\tawait this._transfer_attributes(dest_points);\n\t\tthis.set_core_group(this._core_group_dest);\n\t}\n\n\t_error_if_attribute_not_found_on_second_input() {\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tif (!this._core_group_src.has_attrib(attrib_name)) {\n\t\t\t\tthis.states.error.set(`attribute '${attrib_name}' not found on second input`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _build_octree_if_required(core_group: CoreGroup) {\n\t\tconst second_input_changed =\n\t\t\tthis._octree_timestamp == null || this._octree_timestamp !== core_group.timestamp();\n\t\tconst src_group_changed = this._prev_param_src_group !== this.pv.src_group;\n\n\t\tif (src_group_changed || second_input_changed) {\n\t\t\tthis._octree_timestamp = core_group.timestamp();\n\t\t\tthis._prev_param_src_group = this.pv.src_group;\n\n\t\t\tconst points_src = this._core_group_src.points_from_group(this.pv.src_group);\n\n\t\t\tthis._octree = new CoreOctree(this._core_group_src.bounding_box());\n\t\t\tthis._octree.set_points(points_src);\n\t\t}\n\t}\n\n\tprivate _add_attribute_if_required() {\n\t\tthis._attrib_names.forEach((attrib_name) => {\n\t\t\tif (!this._core_group_dest.has_attrib(attrib_name)) {\n\t\t\t\tconst attrib_size = this._core_group_src.attrib_size(attrib_name);\n\t\t\t\tthis._core_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _transfer_attributes(dest_points: CorePoint[]) {\n\t\t// const start_time = performance.now()\n\t\tconst iterator = new CoreIterator();\n\t\tawait iterator.start_with_array(dest_points, this._transfer_attributes_for_point.bind(this));\n\t\t// for(let dest_point of dest_points){\n\n\t\t// \tthis._transfer_attributes_for_point(dest_point)\n\n\t\t// }\n\t}\n\tprivate _transfer_attributes_for_point(dest_point: CorePoint) {\n\t\tconst total_dist = this.pv.distance_threshold + this.pv.blend_width;\n\t\tconst nearest_points: CorePoint[] =\n\t\t\tthis._octree?.find_points(dest_point.position(), total_dist, this.pv.max_samples_count) || [];\n\n\t\t// test[nearest_points.length] = test[nearest_points.length] || 0\n\t\t// test[nearest_points.length] += 1\n\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tthis._interpolate_points(dest_point, nearest_points, attrib_name);\n\t\t}\n\t}\n\n\t// if @_param_draw_connections\n\t// \tlodash_each nearest_points, (nearest_point)=>\n\t// \t\t@_connection_point_pairs.push([ nearest_point.position(), dest_point.position() ])\n\n\t// if @_param_draw_connections\n\t// \tthis._draw_connections()\n\n\tprivate _interpolate_points(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t\tlet new_value: number;\n\t\t// if (this.pv.method == TransferMethod.ARTISTIC) {\n\n\t\tnew_value = CoreInterpolate.perform(\n\t\t\tpoint_dest,\n\t\t\tsrc_points,\n\t\t\tattrib_name,\n\t\t\tthis.pv.distance_threshold,\n\t\t\tthis.pv.blend_width\n\t\t);\n\t\t// } else {\n\t\t// \tnew_value = this._select(point_dest, src_points, attrib_name);\n\t\t// \tconsole.log('B new_value', new_value);\n\t\t// }\n\n\t\tif (new_value != null) {\n\t\t\tpoint_dest.set_attrib_value(attrib_name, new_value);\n\t\t}\n\t}\n\n\t// private _select(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t// \tconst src_values = [];\n\t// \tconst inverse_distances = [];\n\t// \tconst dest_position = point_dest.position();\n\t// \tconst dest_lng_lat = {lng: dest_position.x, lat: dest_position.z};\n\t// \tfor (let src_point of src_points) {\n\t// \t\t// const dist = dest_position.distanceTo(src_point.position()) //* 0.1\n\t// \t\tconst src_position = src_point.position();\n\t// \t\tconst src_lng_lat = {lng: src_position.x, lat: src_position.z};\n\t// \t\tconst dist = CoreMath.geodesic_distance(src_lng_lat, dest_lng_lat);\n\t// \t\tconst dist_squared = dist * dist;\n\t// \t\tconst attrib_value = src_point.attrib_value(attrib_name);\n\n\t// \t\tsrc_values.push(attrib_value / dist_squared);\n\t// \t\tinverse_distances.push(1 / dist_squared);\n\t// \t}\n\n\t// \tconst sum = lodash_sum(src_values) / lodash_sum(inverse_distances);\n\t// \treturn sum;\n\t// }\n\n\t// ROUND(\n\n\t// \tSUM(\n\t// \t\tValue\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\t// \t/\n\t// \tSUM(\n\t// \t\t1\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\n\t// \t,1\n\n\t// )\n\n\t// _draw_connections() {\n\t// \tlet positions = [];\n\t// \tconst indices = [];\n\n\t// \tlodash_each(this._connection_point_pairs, function(current_positions, i) {\n\n\t// \t\tpositions.push(current_positions[0].toArray());\n\t// \t\tpositions.push(current_positions[1].toArray());\n\n\t// \t\tindices.push((2 * i) + 0);\n\t// \t\treturn indices.push((2 * i) + 1);\n\t// \t});\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new THREE.BufferGeometry();\n\t// \tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \treturn this._group_dest.add(object);\n\t// }\n}\n","import lodash_max from 'lodash/max';\n// import lodash_last from 'lodash/last'\nimport lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n// import {_Math} from 'three/src/math/MathU';\n// const THREE = {Math: _Math, Vector2, Vector3}\nimport {CorePoint} from '../geometry/Point';\n\nexport class CoreInterpolate {\n\tstatic perform(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tswitch (points_src.length) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn this._interpolate_with_1_point(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src[0],\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\t// positions_src = lodash_map(points_src, (point) -> point.position())\n\t\t\t\t// values_src = lodash_map(points_src, (point) -> point.attrib_value(attrib_name))\n\t\t\t\t// position_dest = point_dest.position()\n\t\t\t\t//if positions_src.length > 3\n\t\t\t\t//\tpositions_src = positions_src.slice(0,3)\n\t\t\t\t//this._interpolate_with_3_points_max(positions_src, values_src, position_dest, dest_value)\n\t\t\t\treturn this._interpolate_with_multiple_points(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src,\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t}\n\t}\n\n\tstatic _interpolate_with_1_point(\n\t\tpoint_dest: CorePoint,\n\t\tpoint_src: CorePoint,\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tconst position_dest = point_dest.position();\n\t\tconst position_src = point_src.position();\n\t\tconst distance = position_dest.distanceTo(position_src);\n\n\t\tconst value_src = point_src.attrib_value(attrib_name);\n\t\treturn this._weighted_value_from_distance(\n\t\t\tpoint_dest,\n\t\t\tvalue_src,\n\t\t\tattrib_name,\n\t\t\tdistance,\n\t\t\tdistance_threshold,\n\t\t\tblend_with\n\t\t);\n\t}\n\n\tstatic _weight_from_distance(distance: number, distance_threshold: number, blend_with: number) {\n\t\treturn (distance - distance_threshold) / blend_with;\n\t}\n\n\tstatic _weighted_value_from_distance(\n\t\tpoint_dest: CorePoint,\n\t\tvalue_src: number,\n\t\tattrib_name: string,\n\t\tdistance: number,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tif (distance <= distance_threshold) {\n\t\t\treturn value_src;\n\t\t} else {\n\t\t\tconst value_dest = point_dest.attrib_value(attrib_name);\n\t\t\tconst blend = this._weight_from_distance(distance, distance_threshold, blend_with);\n\t\t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// switch (point_dest.attrib_size(attrib_name)) {\n\t\t\t// \tcase 1:\n\t\t\t// \t\t// const value_src_as_number = value_src as number;\n\t\t\t// \t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// \tcase 2:\n\t\t\t// \t\tconst value_src_as_vec2 = value_src as Vector2Like;\n\t\t\t// \t\treturn new Vector2(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec2.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec2.y\n\t\t\t// \t\t);\n\t\t\t// \tcase 3:\n\t\t\t// \t\tconst value_src_as_vec3 = value_src as Vector3Like;\n\t\t\t// \t\treturn new Vector3(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec3.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec3.y,\n\t\t\t// \t\t\tblend * value_dest.z + (1 - blend) * value_src_as_vec3.z\n\t\t\t// \t\t);\n\t\t\t// \tdefault:\n\t\t\t// \t\treturn 0;\n\t\t\t// }\n\t\t}\n\t}\n\n\t// @_interpolate_with_3_points_max: (positions_src, values_src, position_dest, dest_value)->\n\t// \tweights = this.weights( position_dest, positions_src )\n\t// \tinterpolated_value = lodash_sum lodash_map values_src, (src_value, i)=>\n\t// \t\tweights[i] * src_value\n\n\t// \tif dest_value?\n\t// \t\t0.5 * (dest_value + src_value)\n\t// \telse\n\t// \t\tinterpolated_value\n\n\t// weights: http://www.sidefx.com/docs/houdini/nodes/vop/pcfilter.html\n\t// w_i = 1-smooth(0, maxd*1.1, d_i);\n\t// maxd is the farthest point, and w_i is the weight for a given point at distance (d_i). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.\n\tstatic _interpolate_with_multiple_points(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\t// let new_value\n\t\t// const positions_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.position()\n\t\t// )\n\t\t// const values_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.attrib_value(attrib_name)\n\t\t// )\n\t\t// const position_dest = point_dest.position()\n\t\t// const attrib_size = point_dest.attrib_size(attrib_name);\n\n\t\t// const distances = lodash_map(positions_src, (src_position) =>\n\t\t// \tsrc_position.distanceTo(position_dest)\n\t\t// )\n\t\t// distances = distances.sort()\n\t\t// max_dist = lodash_last(distances)\n\t\t// const max_dist = distance_threshold + blend_with\n\n\t\t// const weights = lodash_map(positions_src, (src_position, i) => {\n\t\t// \tconst distance = distances[i]\n\t\t// \t//1 - Math.smootherstep(distance, 0, max_dist*1.1)\n\t\t// \treturn this._weight_from_distance(\n\t\t// \t\tdistance,\n\t\t// \t\tdistance_threshold,\n\t\t// \t\tblend_with\n\t\t// \t)\n\t\t// })\n\n\t\t// const total_weight = lodash_sum(weights)\n\n\t\t// weighted_values = lodash_map values_src, (src_value, i)->\n\t\t// \tswitch attrib_size\n\t\t// \t\twhen 1 then src_value * weights[i]\n\t\t// \t\telse\n\t\t// \t\t\tsrc_value.clone().multiplyScalar(weights[i])\n\t\tconst weighted_values_src = points_src.map((point_src) => {\n\t\t\treturn this._interpolate_with_1_point(point_dest, point_src, attrib_name, distance_threshold, blend_with);\n\t\t});\n\t\treturn lodash_max(weighted_values_src) || 0;\n\n\t\t// // TODO: we could have 2 modes of interpolation?\n\t\t// // return (new_value = (() => {\n\t\t// switch (attrib_size) {\n\t\t// \t// when 1 then lodash_sum(weighted_values_src) / values_src.length # mode 1\n\t\t// \tcase 1:\n\t\t// \t\treturn lodash_max(weighted_values_src); // mode 2\n\t\t// \tdefault:\n\t\t// \t\tthrow 'interpolation with multiple vectors not implemented yet';\n\t\t// \t// var new_vector = weighted_values_src[0].clone();\n\t\t// \t// new_vector.x = lodash_sum(lodash_map(weighted_values, 'x')) / total_weight;\n\t\t// \t// new_vector.y = lodash_sum(lodash_map(weighted_values, 'y')) / total_weight;\n\t\t// \t// if (new_vector.z != null) {\n\t\t// \t// \tnew_vector.z = lodash_sum(lodash_map(weighted_values, 'z')) / total_weight;\n\t\t// \t// }\n\t\t// \t// return new_vector;\n\t\t// }\n\t\t// })())\n\t}\n\n\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-positions\n\tstatic weights(current_position: Vector3, other_positions: Vector3[]) {\n\t\tswitch (other_positions.length) {\n\t\t\tcase 1:\n\t\t\t\treturn 1;\n\t\t\tcase 2:\n\t\t\t\treturn this._weights_from_2(current_position, other_positions);\n\t\t\tdefault:\n\t\t\t\tother_positions = other_positions.slice(0, 3);\n\t\t\t\treturn this._weights_from_3(current_position, other_positions);\n\t\t}\n\t}\n\n\tstatic _weights_from_2(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum(dist_to_positions);\n\n\t\treturn [dist_to_positions[1] / distance_total, dist_to_positions[0] / distance_total];\n\t}\n\n\tstatic _weights_from_3(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_positions[0] * dist_to_positions[1],\n\t\t\tdist_to_positions[0] * dist_to_positions[2],\n\t\t\tdist_to_positions[1] * dist_to_positions[2],\n\t\t]);\n\n\t\treturn [\n\t\t\t(dist_to_positions[1] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[1]) / distance_total,\n\t\t];\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {CorePoint} from '../../geometry/Point';\n// import {CoreMath} from './_Module'\n// import OctreeModule from './Octree/_Module';\nimport {OctreeNode, OctreeNodeTraverseCallback} from './Node';\n\nexport class CoreOctree {\n\tprivate _root: OctreeNode;\n\n\tconstructor(bbox: Box3) {\n\t\tthis._root = new OctreeNode(bbox);\n\t}\n\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._root.set_bounding_box(bbox)\n\t// }\n\n\tset_points(points: CorePoint[]) {\n\t\tthis._root.set_points(points);\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tthis._root.traverse(callback);\n\t}\n\n\t// TODO: I am tempted to stop going through the leaves if\n\t// the ones currently seen already have the required number of points.\n\t// but that probably doesn't work as those points may end up being further\n\t// than the ones from the following leaf\n\tfind_points(position: Vector3, distance: number, max_points_count?: number): CorePoint[] {\n\t\tconst sphere = new Sphere(position, distance);\n\t\tlet found_points: CorePoint[] = [];\n\n\t\tif (this._root.intersects_sphere(sphere)) {\n\t\t\tthis._root.points_in_sphere(sphere, found_points);\n\t\t}\n\n\t\tif (max_points_count == null) {\n\t\t\treturn found_points;\n\t\t} else {\n\t\t\tif (found_points.length > max_points_count) {\n\t\t\t\tfound_points = lodash_sortBy(found_points, (point) => {\n\t\t\t\t\treturn point.position().distanceTo(position);\n\t\t\t\t});\n\t\t\t\t// const lng_lat = {lng: position.x, lat: position.z}\n\t\t\t\t// found_points = lodash_sortBy(found_points, (point)=>{\n\t\t\t\t// \tconst src_position = point.position()\n\t\t\t\t// \tconst src_lng_lat = {lng: src_position.x, lat: src_position.z}\n\t\t\t\t// \treturn CoreMath.geodesic_distance(src_lng_lat, lng_lat)\n\t\t\t\t// });\n\n\t\t\t\tfound_points = found_points.slice(0, max_points_count);\n\t\t\t}\n\n\t\t\treturn found_points;\n\t\t}\n\t}\n}\n\n// Octree.Node = OctreeNode;\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_flatten from 'lodash/flatten';\nimport {CorePoint} from '../../geometry/Point';\n\nexport type OctreeNodeTraverseCallback = (node: OctreeNode) => void;\n\nexport class OctreeNode {\n\t_leaves_by_octant: Dictionary<OctreeNode> = {};\n\t_points_by_octant_id: Dictionary<CorePoint[]> = {};\n\t_leaves: OctreeNode[] = [];\n\t// _bbox: Box3 | undefined;\n\t_center: Vector3;\n\t_bounding_boxes_by_octant: Dictionary<Box3> = {};\n\t_bounding_boxes_by_octant_prepared: boolean = false;\n\n\tconstructor(private _bbox: Box3, private _level: number = 0) {\n\t\tthis._center = this._bbox.max\n\t\t\t.clone()\n\t\t\t.add(this._bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._bbox = bbox;\n\t// }\n\n\tlevel() {\n\t\treturn this._level;\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tcallback(this);\n\t\tconst octants = Object.values(this._leaves_by_octant);\n\t\toctants.forEach((node) => {\n\t\t\tnode.traverse(callback);\n\t\t});\n\t}\n\n\tintersects_sphere(sphere: Sphere): boolean {\n\t\tif (this._bbox) {\n\t\t\treturn this._bbox.intersectsSphere(sphere);\n\t\t}\n\t\treturn false;\n\t}\n\n\t//@PERF = 0\n\tpoints_in_sphere(sphere: Sphere, accumulated_points: CorePoint[]): void {\n\t\tif (this._leaves.length == 0) {\n\t\t\tconst found_points = lodash_flatten(Object.values(this._points_by_octant_id));\n\t\t\tconst selected_points = found_points.filter((point) => sphere.containsPoint(point.position()));\n\t\t\tselected_points.forEach((point) => {\n\t\t\t\taccumulated_points.push(point);\n\t\t\t});\n\t\t} else {\n\t\t\t//start_time = performance.now()\n\t\t\tconst leaves_intersecting_with_sphere = this._leaves.filter((leaf) => leaf.intersects_sphere(sphere));\n\n\t\t\t//console.log(\"level: #{@_level}, found #{leaves_intersecting_with_sphere.length} leaves \")\n\t\t\tleaves_intersecting_with_sphere.forEach((leaf) => leaf.points_in_sphere(sphere, accumulated_points));\n\t\t}\n\t}\n\t//this.constructor.PERF += performance.now()-start_time\n\n\tbounding_box(): Box3 | undefined {\n\t\treturn this._bbox;\n\t}\n\n\t// points_count: ->\n\t// \t@_points_count\n\n\tset_points(points: CorePoint[]) {\n\t\t//@_points_count = points.length\n\n\t\tthis._points_by_octant_id = {};\n\t\tfor (let point of points) {\n\t\t\tthis.add_point(point);\n\t\t}\n\n\t\tconst octant_ids = Object.keys(this._points_by_octant_id);\n\t\tif (octant_ids.length > 1) {\n\t\t\toctant_ids.forEach((octant_id) => {\n\t\t\t\tthis.create_leaf(octant_id);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate_leaf(octant_id: string) {\n\t\tconst box = this._leaf_bbox(octant_id);\n\t\tconst leaf = new OctreeNode(box, this._level + 1);\n\t\tthis._leaves_by_octant[octant_id] = leaf;\n\t\tthis._leaves.push(leaf);\n\t\t//throw \"test #{@_level}\"\n\n\t\tleaf.set_points(this._points_by_octant_id[octant_id]);\n\t}\n\n\tadd_point(point: CorePoint) {\n\t\tconst octant_id = this._octant_id(point.position());\n\t\tif (this._points_by_octant_id[octant_id] == null) {\n\t\t\tthis._points_by_octant_id[octant_id] = [];\n\t\t}\n\t\tthis._points_by_octant_id[octant_id].push(point);\n\t}\n\n\tprivate _octant_id(position: Vector3): string {\n\t\tconst x_pos = position.x > this._center.x ? 1 : 0;\n\t\tconst y_pos = position.y > this._center.y ? 1 : 0;\n\t\tconst z_pos = position.z > this._center.z ? 1 : 0;\n\t\treturn `${x_pos}${y_pos}${z_pos}`;\n\t}\n\n\t_leaf_bbox(octant_id: string): Box3 {\n\t\tif (!this._bounding_boxes_by_octant_prepared) {\n\t\t\tthis._prepare_leaves_bboxes();\n\t\t\tthis._bounding_boxes_by_octant_prepared = true;\n\t\t}\n\t\treturn this._bounding_boxes_by_octant[octant_id];\n\t}\n\n\tprivate _bbox_center(x_pos: number, y_pos: number, z_pos: number) {\n\t\tconst corner = this._bbox.min.clone();\n\t\tif (x_pos) {\n\t\t\tcorner.x = this._bbox.max.x;\n\t\t}\n\t\tif (y_pos) {\n\t\t\tcorner.y = this._bbox.max.y;\n\t\t}\n\t\tif (z_pos) {\n\t\t\tcorner.z = this._bbox.max.z;\n\t\t}\n\n\t\treturn corner\n\t\t\t.clone()\n\t\t\t.add(this._center)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\n\tprivate _prepare_leaves_bboxes() {\n\t\tconst bbox_centers = [];\n\t\tbbox_centers.push(this._bbox_center(0, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 1));\n\n\t\tconst bbox_size_quarter = this._bbox.max\n\t\t\t.clone()\n\t\t\t.sub(this._bbox.min)\n\t\t\t.multiplyScalar(0.25);\n\t\tfor (let bbox_center of bbox_centers) {\n\t\t\tconst octant_id = this._octant_id(bbox_center);\n\t\t\tconst bbox = new Box3(\n\t\t\t\tbbox_center.clone().sub(bbox_size_quarter),\n\t\t\t\tbbox_center.clone().add(bbox_size_quarter)\n\t\t\t);\n\t\t\tthis._bounding_boxes_by_octant[octant_id] = bbox;\n\t\t}\n\t\t// this._bounding_boxes_by_octant;\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport lodash_range from 'lodash/range';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass BboxScatterSopParamsConfig extends NodeParamsConfig {\n\tstep_size = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new BboxScatterSopParamsConfig();\n\nexport class BboxScatterSopNode extends TypedSopNode<BboxScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'bbox_scatter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create points from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst container = input_contents[0];\n\t\t// const group = container.group();\n\n\t\tconst step_size = this.pv.step_size;\n\t\t// jitter = @_param_jitter\n\n\t\tconst bbox = container.bounding_box();\n\n\t\tconst range = {\n\t\t\tx: lodash_range(bbox.min.x, bbox.max.x, step_size),\n\t\t\ty: lodash_range(bbox.min.y, bbox.max.y, step_size),\n\t\t\tz: lodash_range(bbox.min.z, bbox.max.z, step_size),\n\t\t};\n\n\t\t// create buffer geometry\n\t\t// const vertices_count = range.x * range.y * range.z;\n\t\tconst positions: number[] = [];\n\t\trange.x.forEach((x) => {\n\t\t\trange.y.forEach((y) => {\n\t\t\t\trange.z.forEach((z) => {\n\t\t\t\t\tpositions.push(x);\n\t\t\t\t\tpositions.push(y);\n\t\t\t\t\tpositions.push(z);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nclass BlendSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING();\n\tblend = ParamConfig.FLOAT(0.5, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new BlendSopParamsConfig();\n\nexport class BlendSopNode extends TypedSopNode<BlendSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'blend';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to blend from', 'geometry to blend to'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// this.request_input_container 0, (container0)=>\n\t\t// \tif container0? && (group0 = container0.group())?\n\t\t// \t\tthis.request_input_container 1, (container1)=>\n\t\t// \t\t\tif container1? && (group1 = container1.group({clone: false}))?\n\n\t\t//this.eval_all_params =>\n\t\t// const container0 = input_containers[0];\n\t\t// const container1 = input_containers[1];\n\n\t\t// const group0 = container0.group();\n\t\t// const group1 = container1.group();\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\n\t\tconst objects0 = core_group0.objects();\n\t\tconst objects1 = core_group1.objects();\n\n\t\tlet object0, object1;\n\t\tfor (let i = 0; i < objects0.length; i++) {\n\t\t\tobject0 = objects0[i];\n\t\t\tobject1 = objects1[i];\n\t\t\tthis.blend(object0, object1, this.pv.blend);\n\t\t}\n\t\tthis.set_core_group(core_group0);\n\t}\n\n\t// \t\telse\n\t// \t\t\tthis.set_error(\"input 1 required\")\n\n\t// else\n\t// \tthis.set_error(\"input 0 required\")\n\tprivate blend(object0: Object3D, object1: Object3D, blend: number) {\n\t\tconst geometry0 = (object0 as Mesh).geometry as BufferGeometry;\n\t\tconst geometry1 = (object1 as Mesh).geometry as BufferGeometry;\n\t\tif (geometry0 == null || geometry1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0 = geometry0.getAttribute(this.pv.attrib_name);\n\t\tconst attrib1 = geometry1.getAttribute(this.pv.attrib_name);\n\t\tif (attrib0 == null || attrib1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0_array = attrib0.array as number[];\n\t\tconst attrib1_array = attrib1.array as number[];\n\n\t\tlet c0, c1;\n\t\tfor (let i = 0; i < attrib0_array.length; i++) {\n\t\t\tc0 = attrib0_array[i];\n\t\t\tc1 = attrib1_array[i];\n\t\t\tif (c1 != null) {\n\t\t\t\tattrib0_array[i] = (1 - blend) * c0 + blend * c1;\n\t\t\t}\n\t\t}\n\n\t\tgeometry0.computeVertexNormals();\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\nimport {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass BoxSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.FLOAT(1);\n\tdivisions = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new BoxSopParamsConfig();\n\nexport class BoxSopNode extends TypedSopNode<BoxSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'box';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create bounding box from (optional)'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\t// }\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 1);\n\t// \tthis.add_param(ParamType.INTEGER, 'divisions', 1, {\n\t// \t\trange: [1, 10],\n\t// \t\trange_locked: [true, false],\n\t// \t});\n\t// \tthis.add_param(ParamType.VECTOR3, 'center', [0, 0, 0]);\n\t// }\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\n\tprivate _cook_without_input() {\n\t\t//\t\tthis.eval_all_params =>\n\t\tconst divisions = this.pv.divisions;\n\t\tconst size = this.pv.size;\n\t\tconst geometry = new BoxBufferGeometry(size, size, size, divisions, divisions, divisions);\n\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tgeometry.computeVertexNormals();\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst divisions = this.pv.divisions;\n\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max.clone().add(bbox.min).multiplyScalar(0.5);\n\n\t\tconst geometry = new BoxBufferGeometry(size.x, size.y, size.z, divisions, divisions, divisions);\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t// else\n\t// \tthis.set_error(\"first input is invalid\")\n\n\t// _divisions() {\n\t// \treturn Math.max(1, this.pv.divisions);\n\t// }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass CacheSopParamsConfig extends NodeParamsConfig {\n\tcache = ParamConfig.STRING('', {hidden: true});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tCacheSopNode.PARAM_CALLBACK_reset(node as CacheSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new CacheSopParamsConfig();\n\nexport class CacheSopNode extends TypedSopNode<CacheSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cache';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to cache'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst is_cache_empty = this.pv.cache == '' || this.pv.cache == null;\n\t\tconst core_group = input_contents[0];\n\t\tif (is_cache_empty && core_group) {\n\t\t\tconst json = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tjson.push(object.toJSON());\n\t\t\t}\n\t\t\tthis.set_core_group(core_group);\n\t\t\tthis.p.cache.set(JSON.stringify(json));\n\t\t} else {\n\t\t\tif (this.pv.cache) {\n\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\tconst jsons = JSON.parse(this.pv.cache);\n\t\t\t\tconst all_objects = [];\n\t\t\t\tfor (let json of jsons) {\n\t\t\t\t\tconst parent = obj_loader.parse(json);\n\t\t\t\t\t// for(let child of parent.children){\n\t\t\t\t\tall_objects.push(parent);\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tthis.set_objects(all_objects);\n\t\t\t} else {\n\t\t\t\tthis.set_objects([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_reset(node: CacheSopNode, param: BaseParamType) {\n\t\tnode.param_callback_PARAM_CALLBACK_reset();\n\t}\n\tasync param_callback_PARAM_CALLBACK_reset() {\n\t\tthis.p.cache.set('');\n\t\tthis.request_container();\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {CircleBufferGeometry} from 'three/src/geometries/CircleGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CircleSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\topen = ParamConfig.BOOLEAN(1);\n\tarc_angle = ParamConfig.FLOAT(360, {\n\t\trange: [0, 360],\n\t\trange_locked: [false, false],\n\t\tvisible_if: {open: 1},\n\t});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CircleSopParamsConfig();\n\nexport class CircleSopNode extends TypedSopNode<CircleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'circle';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0);\n\t\t// this.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook() {\n\t\tif (this.pv.open) {\n\t\t\tthis._create_circle();\n\t\t} else {\n\t\t\tthis._create_disk();\n\t\t}\n\t}\n\n\t_create_circle() {\n\t\tconst geometry = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments, this.pv.arc_angle);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry, ObjectType.LINE_SEGMENTS);\n\t}\n\n\t_create_disk() {\n\t\tconst geometry = new CircleBufferGeometry(this.pv.radius, this.pv.segments);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nconst DEFAULT_FUNCTION_CODE = `import {BaseCodeSopProcessor, CoreGroup} from 'polygonjs-engine'\nexport class CodeSopProcessor extends BaseCodeSopProcessor {\n\tconstructor(){\n\t\tsuper();\n\t}\n\tcook(core_groups: CoreGroup[]){\n\t\tconst core_group = core_groups[0];\n\t\tconst object = core_group.objects()[0];\n\t\tobject.position.y = 1;\n\t\tthis.set_core_group(core_groups[0]);\n\t}\n}\n\n\n`;\n\nexport class BaseCodeSopProcessor {\n\tprotected node!: CodeSopNode;\n\tconstructor() {}\n\tset_node(node: CodeSopNode) {\n\t\tthis.node = node;\n\t}\n\tcook(core_groups: CoreGroup[]) {}\n\tprotected set_core_group(core_group: CoreGroup) {\n\t\tthis.node.set_core_group(core_group);\n\t}\n}\n\ntype EvaluatedFunction = (base_processor_class: typeof BaseCodeSopProcessor) => typeof BaseCodeSopProcessor | undefined;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\nclass CodeSopParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeSopParamsConfig();\nexport class CodeSopNode extends TypedSopNode<CodeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _processor: BaseCodeSopProcessor | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.ui_data.set_width(100);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._processor) {\n\t\t\tthis._processor.cook(core_groups);\n\t\t} else {\n\t\t\tthis.set_core_group(core_groups[0]);\n\t\t}\n\t}\n\n\tprivate _compile_if_required() {\n\t\tif (!this._processor || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\n\tprivate _compile() {\n\t\ttry {\n\t\t\tconst function_body = `try {\n\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t} catch(e) {\n\t\t\t\tthis.states.error.set(e)\n\t\t\t}`;\n\t\t\tconsole.log('function_body');\n\t\t\tconsole.log(function_body);\n\t\t\tconst processor_creator_function: EvaluatedFunction = new AsyncFunction(\n\t\t\t\t'BaseCodeSopProcessor',\n\t\t\t\tfunction_body\n\t\t\t);\n\t\t\tconst processor_class = processor_creator_function(BaseCodeSopProcessor);\n\t\t\tif (processor_class) {\n\t\t\t\tthis._processor = new processor_class();\n\t\t\t\tthis._processor.set_node(this);\n\t\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`cannot generate function`);\n\t\t\t\tthis._processor = undefined;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._processor = undefined;\n\t\t}\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {CoreColor} from '../../../core/Color';\n// import lodash_times from 'lodash/times'\n// import lodash_each from 'lodash/each'\n// import {CoreGroup} from '../../../core/geometry/Group';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst COLOR_ATTRIB_NAME = 'color';\n\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ColorSopParamsConfig extends NodeParamsConfig {\n\tfrom_attribute = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {from_attribute: 1},\n\t});\n\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\tvisible_if: {from_attribute: 0},\n\t\texpression: {for_entities: true},\n\t});\n\tas_hsv = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {from_attribute: 0},\n\t});\n}\nconst ParamsConfig = new ColorSopParamsConfig();\n\nexport class ColorSopNode extends TypedSopNode<ColorSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'color';\n\t}\n\n\tprivate _r_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _g_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _b_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update color of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tif (this.pv.from_attribute) {\n\t\t\t\tthis._set_from_attribute(core_object);\n\t\t\t} else {\n\t\t\t\tconst has_expression = this.p.color.has_expression();\n\t\t\t\tif (has_expression) {\n\t\t\t\t\tawait this._eval_expressions(core_object);\n\t\t\t\t} else {\n\t\t\t\t\tthis._eval_simple_values(core_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\t(geometry.getAttribute(COLOR_ATTRIB_NAME) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_set_from_attribute(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst points = core_geometry.points();\n\n\t\tconst src_attrib_size = core_geometry.attrib_size(this.pv.attrib_name);\n\t\tconst geometry = core_geometry.geometry();\n\t\tconst src_array = geometry.getAttribute(this.pv.attrib_name).array;\n\t\tconst dest_array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\tswitch (src_attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[i];\n\t\t\t\t\tdest_array[dest_i + 1] = 1 - src_array[i];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 2;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tfor (let i = 0; i < src_array.length; i++) {\n\t\t\t\t\tdest_array[i] = src_array[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 4;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = src_array[src_i + 2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_init_color(core_geometry: CoreGeometry, color: Color) {\n\t\tif (!core_geometry.has_attrib(COLOR_ATTRIB_NAME)) {\n\t\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, DEFAULT_COLOR);\n\t\t}\n\t}\n\n\t_eval_simple_values(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\n\t\tlet new_color: Color;\n\t\tif (this.pv.as_hsv) {\n\t\t\tnew_color = new Color();\n\t\t\tCoreColor.set_hsv(this.pv.color.r, this.pv.color.g, this.pv.color.b, new_color);\n\t\t} else {\n\t\t\tnew_color = this.pv.color; //.clone();\n\t\t}\n\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, new_color);\n\t}\n\n\tasync _eval_expressions(core_object: CoreObject) {\n\t\tconst points = core_object.points();\n\t\tconst object = core_object.object();\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tif (geometry) {\n\t\t\tconst array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\t\tconst tmp_array_r = await this._update_from_param(geometry, array, points, 0);\n\t\t\tconst tmp_array_g = await this._update_from_param(geometry, array, points, 1);\n\t\t\tconst tmp_array_b = await this._update_from_param(geometry, array, points, 2);\n\n\t\t\tif (tmp_array_r) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_r, array, 0);\n\t\t\t}\n\t\t\tif (tmp_array_g) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_g, array, 1);\n\t\t\t}\n\t\t\tif (tmp_array_b) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_b, array, 2);\n\t\t\t}\n\n\t\t\t// to hsv\n\t\t\tif (this.pv.as_hsv) {\n\t\t\t\tlet current = new Color();\n\t\t\t\tlet target = new Color();\n\t\t\t\tlet index;\n\t\t\t\tfor (let point of points) {\n\t\t\t\t\tindex = point.index * 3;\n\t\t\t\t\tcurrent.fromArray(array, index);\n\t\t\t\t\tCoreColor.set_hsv(current.r, current.g, current.b, target);\n\t\t\t\t\ttarget.toArray(array, index);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// const colorr_param = this.param('colorr');\n\t\t// const colorg_param = this.param('colorg');\n\t\t// const colorb_param = this.param('colorb');\n\n\t\t// r\n\t\t// if(colorr_param.has_expression()){\n\t\t// \tawait colorr_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+0] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+0] = this.pv.color.r\n\t\t// \t}\n\t\t// }\n\t\t// g\n\t\t// if(colorg_param.has_expression()){\n\t\t// \tawait colorg_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+1] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+1] = this.pv.color.g\n\t\t// \t}\n\t\t// }\n\t\t// b\n\t\t// if(colorb_param.has_expression()){\n\t\t// \tawait colorb_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+2] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+2] = this.pv.color.b\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\toffset: number\n\t): Promise<number[] | undefined> {\n\t\t// const component_name = ['r', 'g', 'b'][offset];\n\t\tconst param = this.p.color.components[offset];\n\t\tconst param_value = [this.pv.color.r, this.pv.color.g, this.pv.color.b][offset];\n\t\tconst arrays_by_geometry_uuid = [\n\t\t\tthis._r_arrays_by_geometry_uuid,\n\t\t\tthis._g_arrays_by_geometry_uuid,\n\t\t\tthis._b_arrays_by_geometry_uuid,\n\t\t][offset];\n\n\t\tlet tmp_array: number[] | undefined;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\ttmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length);\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t// array[point.index()*3+2] = value\n\t\t\t\t(tmp_array as number[])[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let point of points) {\n\t\t\t\tarray[point.index * 3 + offset] = param_value;\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\nimport {Color} from 'three/src/math/Color';\n\nexport class CoreColor {\n\t// use color.toStyle() if needed\n\t// static to_css(color: Color): string {\n\t// \tconst color_elements = color.toArray().map((e) => e * 255)\n\t// \treturn `rgb(${color_elements.join(', ')})`\n\t// }\n\n\t// from THREE.js examples ColorConverter.js\n\tstatic set_hsv(h: number, s: number, v: number, target: Color) {\n\t\th = MathUtils.euclideanModulo(h, 1);\n\t\ts = MathUtils.clamp(s, 0, 1);\n\t\tv = MathUtils.clamp(v, 0, 1);\n\n\t\ttarget.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ConeBufferGeometry} from 'three/src/geometries/ConeGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ConeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\ttheta_start = ParamConfig.FLOAT(1, {range: [0, 1]});\n\ttheta_length = ParamConfig.FLOAT('2*$PI', {range: [0, 1]});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new ConeSopParamsConfig();\n\nexport class ConeSopNode extends TypedSopNode<ConeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cone';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new ConeBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap,\n\t\t\tthis.pv.theta_start,\n\t\t\tthis.pv.theta_length\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreString} from '../../../core/String';\n// import {NodeSimple} from '../../../Core/Graph/NodeSimple'\nimport {CopyStamp} from './utils/CopyStamp';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nclass CopySopParamsConfig extends NodeParamsConfig {\n\tcount = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t});\n\ttransform_only = ParamConfig.BOOLEAN(0);\n\tcopy_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_copy = ParamConfig.STRING('', {\n\t\tvisible_if: {copy_attributes: true},\n\t});\n\tuse_copy_expr = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new CopySopParamsConfig();\n\nexport class CopySopNode extends TypedSopNode<CopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'copy';\n\t}\n\n\tprivate _attribute_names_to_copy: string[] = [];\n\t// private _group: Group|undefined;\n\tprivate _objects: Object3D[] = [];\n\tprivate _stamp_node!: CopyStamp;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be copied', 'points to copy to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\t// async evaluate_inputs_and_params() {\n\t// \tawait this.eval_all_params()\n\t// }\n\n\tasync cook() {\n\t\tlet core_group0;\n\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\tif (container0 != null && (core_group0 = container0.core_content()) != null) {\n\t\t\tif (this.io.inputs.has_input(1)) {\n\t\t\t\tlet core_group1;\n\t\t\t\tconst container1 = await this.container_controller.request_input_container(1);\n\t\t\t\tif (container1 != null && (core_group1 = container1.core_content()) != null) {\n\t\t\t\t\tawait this.cook_with_template(core_group0, core_group1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set('second input required');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.cook_without_template(core_group0);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('first input required');\n\t\t}\n\t}\n\n\tprivate async cook_with_template(instance_core_group: CoreGroup, template_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\n\t\tconst template_points = template_core_group.points();\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tlet instance_matrices = instancer.matrices();\n\n\t\tthis._attribute_names_to_copy = CoreString.attrib_names(this.pv.attributes_to_copy).filter((attrib_name) =>\n\t\t\ttemplate_core_group.has_attrib(attrib_name)\n\t\t);\n\t\tawait this._copy_moved_objects_on_template_points(instance_core_group, instance_matrices, template_points);\n\t\tthis.set_objects(this._objects);\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_on_template_points(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[]\n\t) {\n\t\tfor (let point_index = 0; point_index < template_points.length; point_index++) {\n\t\t\tawait this._copy_moved_object_on_template_point(\n\t\t\t\tinstance_core_group,\n\t\t\t\tinstance_matrices,\n\t\t\t\ttemplate_points,\n\t\t\t\tpoint_index\n\t\t\t);\n\t\t}\n\t\t// template_points.forEach((template_point, point_index) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_object_on_template_point(\n\t\t// \t\t\tinstance_core_group,\n\t\t// \t\t\tinstance_matrices,\n\t\t// \t\t\ttemplate_points,\n\t\t// \t\t\tpoint_index\n\t\t// \t\t);\n\t\t// \t});\n\t\t// });\n\t}\n\n\tprivate _copy_moved_object_on_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[],\n\t\tpoint_index: number\n\t) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst matrix = instance_matrices[point_index];\n\t\t\tconst template_point = template_points[point_index];\n\t\t\tthis.stamp_node.set_point(template_point);\n\n\t\t\tconst moved_objects = await this._get_moved_objects_for_template_point(instance_core_group, point_index);\n\n\t\t\tmoved_objects.forEach((moved_object) => {\n\t\t\t\tif (this.pv.copy_attributes) {\n\t\t\t\t\tthis._copy_attributes_from_template(moved_object, template_point);\n\t\t\t\t}\n\n\t\t\t\t// TODO: that node is getting inconsistent...\n\t\t\t\t// should I always only move the object?\n\t\t\t\t// and have a toggle to bake back to the geo?\n\t\t\t\t// or just enfore the use of a merge?\n\t\t\t\tif (this.pv.transform_only) {\n\t\t\t\t\tmoved_object.applyMatrix4(matrix);\n\t\t\t\t} else {\n\t\t\t\t\tmoved_object.geometry.applyMatrix4(matrix);\n\t\t\t\t}\n\n\t\t\t\treturn this._objects.push(moved_object);\n\t\t\t});\n\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tprivate _get_moved_objects_for_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tpoint_index: number\n\t): Promise<Object3DWithGeometry[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\t// duplicate or select from instance children\n\t\t\t\tconst moved_objects = this.pv.transform_only\n\t\t\t\t\t? // TODO: why is doing a transform slower than cloning the input??\n\t\t\t\t\t  lodash_compact([instance_core_group.objects()[point_index]])\n\t\t\t\t\t: instance_core_group.clone().objects();\n\n\t\t\t\tresolve(moved_objects);\n\t\t\t} else {\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _stamp_instance_group_if_required(instance_core_group: CoreGroup): Promise<CoreGroup | undefined> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (this.pv.use_copy_expr) {\n\t\t\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\t\t\tlet core_group0: CoreGroup;\n\t\t\t\tif (container0 && (core_group0 = container0.core_content()) != null) {\n\t\t\t\t\t// this.stamp_node.increment_global_value()\n\t\t\t\t\tresolve(core_group0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`input failed for index ${this.stamp_value()}`);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(instance_core_group);\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_for_each_instance(instance_core_group: CoreGroup) {\n\t\t// let p = Promise.resolve(); // Q() in q\n\n\t\tfor (let i = 0; i < this.pv.count; i++) {\n\t\t\tawait this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t}\n\t\t// lodash_times(this.pv.count, (i) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t// \t});\n\t\t// });\n\n\t\t// return p;\n\t}\n\n\tprivate _copy_moved_objects_for_instance(instance_core_group: CoreGroup, i: number) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.stamp_node.set_global_index(i);\n\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\tstamped_instance_core_group.objects().forEach((object) => {\n\t\t\t\t\t// TODO: I should use the Group wrapper, to ensure that material.linewidth is properly cloned\n\t\t\t\t\tconst new_object = CoreObject.clone(object);\n\t\t\t\t\tthis._objects.push(new_object);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// TODO: what if I combine both @_param_count and stamping?!\n\tprivate cook_without_template(instance_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\t\tthis._copy_moved_objects_for_each_instance(instance_core_group).then(() => {\n\t\t\tthis.set_objects(this._objects);\n\t\t});\n\t}\n\n\tprivate _copy_attributes_from_template(object: Object3D, template_point: CorePoint) {\n\t\tthis._attribute_names_to_copy.forEach((attrib_name, i) => {\n\t\t\tconst attrib_value = template_point.attrib_value(attrib_name);\n\t\t\tconst object_wrapper = new CoreObject(object, i);\n\t\t\tobject_wrapper.add_attribute(attrib_name, attrib_value);\n\t\t});\n\t}\n\n\t//\n\t//\n\t// STAMP\n\t//\n\t//\n\tstamp_value(attrib_name?: string) {\n\t\treturn this.stamp_node.value(attrib_name);\n\t}\n\tget stamp_node() {\n\t\treturn (this._stamp_node = this._stamp_node || this.create_stamp_node());\n\t}\n\tprivate create_stamp_node() {\n\t\tconst stamp_node = new CopyStamp(this.scene);\n\t\tthis.dirty_controller.set_forbidden_trigger_nodes([stamp_node]);\n\t\treturn stamp_node;\n\t}\n\n\t// private set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \treturn original_trigger_graph_node.graph_node_id !== this.stamp_node.graph_node_id;\n\t// }\n}\n","import {CorePoint} from '../../../../core/geometry/Point';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../../../scene/PolyScene';\n\nexport class CopyStamp extends CoreGraphNode {\n\tprivate _global_index: number = 0;\n\tprivate _point: CorePoint | undefined;\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'CopyStamp');\n\t}\n\n\tset_point(point: CorePoint) {\n\t\tthis._point = point;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\tset_global_index(index: number) {\n\t\tthis._global_index = index;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\n\tvalue(attrib_name?: string) {\n\t\tif (this._point) {\n\t\t\tif (attrib_name) {\n\t\t\t\treturn this._point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn this._point.index;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._global_index;\n\t\t}\n\t}\n}\n","// import {Core} from '../../../Core/_Module';\nimport {TypedSopNode} from './_Base';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nconst DEFAULT_DATA = [\n\t{value: -40},\n\t{value: -30},\n\t{value: -20},\n\t{value: -10},\n\t{value: 0},\n\t{value: 10},\n\t{value: 20},\n\t{value: 30},\n\t{value: 40},\n\t{value: 50},\n\t{value: 60},\n\t{value: 70},\n\t{value: 80},\n];\nconst DEFAULT_DATA_STR = JSON.stringify(DEFAULT_DATA);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DataSopParamsConfig extends NodeParamsConfig {\n\tdata = ParamConfig.STRING(DEFAULT_DATA_STR);\n}\nconst ParamsConfig = new DataSopParamsConfig();\n\nexport class DataSopNode extends TypedSopNode<DataSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data';\n\t}\n\n\tcook() {\n\t\tlet json = null;\n\t\ttry {\n\t\t\tjson = JSON.parse(this.pv.data);\n\t\t} catch (e) {\n\t\t\tthis.states.error.set('could not parse json');\n\t\t}\n\n\t\tif (json) {\n\t\t\tconst loader = new JsonDataLoader();\n\t\t\tloader.set_json(json);\n\t\t\tconst object = loader.create_object();\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray'\nimport lodash_isString from 'lodash/isString'\nimport {CoreConstant} from './Constant'\n\nexport class CoreAttributeData {\n\tconstructor(private _size: number, private _type: number) {}\n\n\tsize() {\n\t\treturn this._size\n\t}\n\ttype() {\n\t\treturn this._type\n\t}\n\n\tstatic from_value(attrib_value: any) {\n\t\tconst type = lodash_isString(attrib_value)\n\t\t\t? CoreConstant.ATTRIB_TYPE.STRING\n\t\t\t: CoreConstant.ATTRIB_TYPE.NUMERIC\n\t\tconst size = lodash_isArray(attrib_value) ? attrib_value.length : 1\n\n\t\treturn new this(size, type)\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n// import lodash_flatten from 'lodash/flatten';\nimport {TypedSopNode} from './_Base';\n\n// import {CoreLoaderGeometry, LoaderType, LOADER_TYPES} from '../../../Core/Loader/Geometry';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass DataUrlSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('/examples/sop/data_url/basic.json');\n\tjson_data_keys_prefix = ParamConfig.STRING('');\n\tskip_entries = ParamConfig.STRING('');\n\tconvert = ParamConfig.BOOLEAN(0);\n\tconvert_to_numeric = ParamConfig.STRING('', {\n\t\tvisible_if: {convert: 1},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tDataUrlSopNode.PARAM_CALLBACK_reload(node as DataUrlSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new DataUrlSopParamsConfig();\n\nexport class DataUrlSopNode extends TypedSopNode<DataUrlSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data_url';\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tasync cook() {\n\t\tconst loader = new JsonDataLoader({\n\t\t\tdata_keys_prefix: this.pv.json_data_keys_prefix,\n\t\t\tskip_entries: this.pv.skip_entries,\n\t\t\tdo_convert: this.pv.convert,\n\t\t\tconvert_to_numeric: this.pv.convert_to_numeric,\n\t\t});\n\t\tloader.load(this.pv.url, this._on_load.bind(this), undefined, this._on_error.bind(this));\n\t}\n\n\t_on_load(objects: Object3D) {\n\t\t// objects = lodash_flatten(objects);\n\t\tthis.set_objects([objects]);\n\t}\n\t_on_error(error: ErrorEvent) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${error})`);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\t// async _on_open_url(){\n\t// \tconst url = await this.param('url').eval_p()\n\t// \tconst a = document.createElement('a')\n\t// \ta.href = url\n\t// \ta.setAttribute('target', '_blank')\n\t// \ta.click()\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: DataUrlSopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tparam_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass DelaySopParamsConfig extends NodeParamsConfig {\n\tduration = ParamConfig.INTEGER(1000);\n}\nconst ParamsConfig = new DelaySopParamsConfig();\n\nexport class DelaySopNode extends TypedSopNode<DelaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delay';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS]);\n\t}\n\n\tcook(inputs_contents: CoreGroup[]) {\n\t\tconst core_group = inputs_contents[0];\n\t\tconst c = () => {\n\t\t\tthis.set_core_group(core_group);\n\t\t};\n\t\tsetTimeout(c, this.pv.duration);\n\t}\n}\n","import {Box3} from 'three/src/math/Box3';\nimport lodash_isString from 'lodash/isString';\nimport lodash_each from 'lodash/each';\nimport {TypedSopNode} from './_Base';\nimport {CoreString} from '../../../core/String';\nimport {\n\tAttribClass,\n\tAttribClassMenuEntries,\n\tObjectType,\n\tObjectTypeMenuEntries,\n\tObjectTypes,\n} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreObject} from '../../../core/geometry/Object';\n\nenum ComparisonOperator {\n\t'==' = 0,\n\t'<' = 1,\n\t'<=' = 2,\n\t'>=' = 3,\n\t'>' = 4,\n\t'!=' = 5,\n}\nconst ComparisonOperatorMenuEntries = [\n\t{name: '==', value: ComparisonOperator['==']},\n\t{name: '<', value: ComparisonOperator['<']},\n\t{name: '<=', value: ComparisonOperator['<=']},\n\t{name: '>=', value: ComparisonOperator['>=']},\n\t{name: '>', value: ComparisonOperator['>']},\n\t{name: '!=', value: ComparisonOperator['!=']},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n\thide_objects = ParamConfig.BOOLEAN(0);\n\n\t// by_object_type\n\tby_object_type = ParamConfig.BOOLEAN(0);\n\tobject_type = ParamConfig.INTEGER(ObjectTypes.indexOf(ObjectType.MESH), {\n\t\tmenu: {\n\t\t\tentries: ObjectTypeMenuEntries,\n\t\t},\n\t\tvisible_if: {by_object_type: true},\n\t});\n\n\t// by_expression\n\tby_expression = ParamConfig.BOOLEAN(0);\n\texpression = ParamConfig.BOOLEAN('@ptnum==0', {\n\t\tvisible_if: {by_expression: true},\n\t\texpression: {for_entities: true},\n\t});\n\n\t// by_attrib\n\tby_attrib = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_string = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\t// attrib_float = ParamConfig.FLOAT(0, {\n\t// \tvisible_if: {by_attrib: true},\n\t// })\n\tattrib_numeric = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_comparison_operator = ParamConfig.INTEGER(ComparisonOperator['=='], {\n\t\tmenu: {\n\t\t\tentries: ComparisonOperatorMenuEntries,\n\t\t},\n\t\tvisible_if: {by_attrib: true},\n\t});\n\n\t// by_bbox\n\tby_bbox = ParamConfig.BOOLEAN(0);\n\tbbox_size = ParamConfig.VECTOR3([1, 1, 1], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\tbbox_center = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\t//this.add_param( ParamType.STRING, 'index_mode', Core.Geometry.Geometry.INDEX_MODE_FACES )\n\n\t// by_visible\n\tby_visible = ParamConfig.BOOLEAN(0);\n\tkeep_points = ParamConfig.BOOLEAN(1, {\n\t\tvisible_if: {\n\t\t\tclass: AttribClass.OBJECT,\n\t\t},\n\t});\n}\nconst ParamsConfig = new DeleteSopParamsConfig();\n\nexport class DeleteSopNode extends TypedSopNode<DeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delete';\n\t}\n\n\t// _param_attrib_class: number;\n\t// _param_invert: boolean;\n\t// _param_hide_objects: boolean;\n\t// _param_by_object_type: boolean;\n\t// _param_object_type: number;\n\t// _param_by_attrib: boolean;\n\t// _param_attrib_name: string;\n\t// _param_attrib_float: number;\n\t// _param_attrib_string: string;\n\t// _param_attrib_vector: Vector3;\n\t// _param_attrib_ComparisonOperator: number;\n\t// _param_by_expression: boolean;\n\t// _param_expression: string;\n\t// _param_by_bbox: boolean;\n\t// _param_bbox_size: Vector3;\n\t// _param_bbox_center: Vector3;\n\t// _param_by_visible: boolean;\n\n\tprivate _bbox_cache: Box3 | undefined;\n\n\tprivate _marked_for_deletion_per_object_index: Map<number, boolean> = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._bbox_cache = undefined;\n\t\tswitch (this.pv.class) {\n\t\t\tcase AttribClass.VERTEX:\n\t\t\t\tawait this._eval_for_points(core_group);\n\t\t\t\tbreak;\n\t\t\tcase AttribClass.OBJECT:\n\t\t\t\tawait this._eval_for_objects(core_group);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _eval_for_objects(core_group: CoreGroup) {\n\t\t// const objects_to_delete = [];\n\t\tconst objects_to_keep = [];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tthis._marked_for_deletion_per_object_index = new Map();\n\t\tfor (let core_object of core_objects) {\n\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, false);\n\t\t}\n\n\t\tif (this.pv.by_expression) {\n\t\t\tawait this._eval_expressions_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_object_type) {\n\t\t\tthis._eval_type_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\tthis._eval_attrib_for_objects(core_objects);\n\n\t\t\t// \tif !is_deleted && @_param_by_bbox\n\t\t\t// \t\tis_deleted = this._eval_bbox_for_object(object)\n\n\t\t\t// \tif !is_deleted && @_param_by_visible\n\t\t\t// \t\tis_deleted = !object.visible\n\n\t\t\t// \tif @_param_invert\n\t\t\t// \t\tis_deleted = !is_deleted\n\n\t\t\t// \tif @_param_hide_objects\n\t\t\t// \t\tobject.visible = !is_deleted\n\t\t\t// \telse\n\t\t\t// \t\tif is_deleted\n\t\t\t// \t\t\tobjects_to_delete.push(object)\n\n\t\t\t// true; // to ensure the loop isn't breaking, which is what happens when setting the object.visible to false...\n\t\t}\n\n\t\tif (this.pv.invert) {\n\t\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(object_index, !marked_for_deletion);\n\t\t\t});\n\t\t}\n\n\t\tlet core_object, object;\n\t\tconst point_objects_from_deleted_objects: Object3DWithGeometry[] = [];\n\t\t// for (let object_index of Object.keys(this._marked_for_deletion_per_object_index)) {\n\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\tcore_object = core_objects[object_index];\n\t\t\tobject = core_object.object();\n\n\t\t\tif (this.pv.hide_objects) {\n\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tobject.visible = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!marked_for_deletion) {\n\t\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\t}\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tpoint_objects_from_deleted_objects.push(this._point_object(core_object));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if (marked_for_deletion) {\n\t\t\t// \tcmptr += 1;\n\t\t\t// \tif (this.pv.hide_objects) {\n\t\t\t// \t\tobject.visible = true;\n\n\t\t\t// \t} else {\n\t\t\t// \t\t// object.parent.remove(object);\n\t\t\t// \t\t// const c = () =>\n\t\t\t// \t\t// \tobject.traverse(function(object_child) {\n\t\t\t// \t\t// \t\tif (object_child.geometry != null) {\n\t\t\t// \t\t// \t\t\tobject_child.geometry.dispose();\n\t\t\t// \t\t// \t\t}\n\t\t\t// \t\t// \t\t// const material = object_child.material\n\t\t\t// \t\t// \t\t// if(material){ material.dispose() }\n\t\t\t// \t\t// \t})\n\t\t\t// \t\t// ;\n\t\t\t// \t\t// setTimeout(c, 25);\n\t\t\t// \t}\n\t\t\t// }\n\t\t});\n\n\t\tfor (let object of point_objects_from_deleted_objects) {\n\t\t\tobjects_to_keep.push(object);\n\t\t}\n\n\t\tthis.set_objects(objects_to_keep);\n\t}\n\n\t//console.log(\"#{cmptr} marked for deletion\")\n\n\t// TODO: ensure that geometries with no remaining points are removed from the group\n\tprivate async _eval_for_points(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tlet core_object;\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tcore_object = core_objects[i];\n\t\t\tlet core_geometry = core_object.core_geometry();\n\t\t\tif (core_geometry) {\n\t\t\t\tlet points = core_geometry.points_from_geometry();\n\t\t\t\tconst init_points_count = points.length;\n\t\t\t\tif (this.pv.by_expression) {\n\t\t\t\t\tpoints = await this._eval_expressions_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\t\t\tpoints = this._eval_attrib_for_points(points);\n\t\t\t\t}\n\t\t\t\tif (this.pv.by_bbox) {\n\t\t\t\t\tpoints = this._eval_bbox_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (points.length != init_points_count) {\n\t\t\t\t\tconst object = core_object.object() as Object3DWithGeometry;\n\t\t\t\t\tcore_geometry.geometry().dispose();\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\t// TODO: if the new geo only has unconnected points, how do I know it and how do I change the material if it was previously a mesh?\n\t\t\t\t\t\tobject.geometry = CoreGeometry.geometry_from_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: do not dispose material if not cloned\n\t\t\t\t\t\t// if (object.material != null) {\n\t\t\t\t\t\t// \tobject.material.dispose();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tobject.parent != null ? object.parent.remove(object) : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_points(points: CorePoint[]) {\n\t\tconst kept_points = [];\n\n\t\t// const promises = points.map((point, i)=> {\n\t\t// \treturn new Promise( async (resolve, reject)=> {\n\t\t// \t\tthis.context().set_entity(point);\n\t\t// \t\tconst val = await(this.param('expression').eval_p());\n\t\t// \t\tconst keep_point = this.pv.invert ?\n\t\t// \t\t\tval === true\n\t\t// \t\t:\n\t\t// \t\t\tval === false;\n\n\t\t// \t\tif (keep_point) {\n\t\t// \t\t\tkept_points.push(point);\n\t\t// \t\t}\n\t\t// \t\tresolve();\n\t\t// \t});\n\t\t// });\n\n\t\t// await(Promise.all(promises));\n\t\tconst param = this.p.expression;\n\t\tif (this.p.expression.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tlet keep_point = !value;\n\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t}\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(point);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst value = this.pv.expression;\n\t\t\tlet keep_point = !value;\n\t\t\tif (this.pv.invert) {\n\t\t\t\tkeep_point = !keep_point;\n\t\t\t}\n\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(kept_points);\n\t\treturn kept_points;\n\t}\n\n\tprivate async _eval_expressions_for_objects(core_objects: CoreObject[]) {\n\t\tconst param = this.p.expression;\n\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\t\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t\t}\n\t\t}\n\n\t\t// for (let core_object of core_objects) {\n\t\t// \tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t// \tif (!is_marked_for_deletion) {\n\t\t// \t\tthis.processing_context.set_entity(core_object);\n\t\t// \t\t// param.set_dirty();\n\t\t// \t\tawait param.compute();\n\t\t// \t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _eval_attrib_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tif (points.length > 0) {\n\t\t\tconst first_attrib_value = points[0].attrib_value(this.pv.attrib_name);\n\t\t\t// TODO: should I just have @_param_attrib_string?\n\t\t\t// although I may need a vector one... maybe a multiple string?\n\t\t\tconst comparison_attrib_values = lodash_isString(first_attrib_value)\n\t\t\t\t? //@_param_attrib_string\n\t\t\t\t  CoreString.attrib_names(this.pv.attrib_string)\n\t\t\t\t: [this.pv.attrib_numeric.x];\n\n\t\t\tcomparison_attrib_values.forEach((comparison_attrib_value: string | number) => {\n\t\t\t\treturn points.forEach((point) => {\n\t\t\t\t\tconst attrib_value = point.attrib_value(this.pv.attrib_name);\n\n\t\t\t\t\t// TODO: and for vectors? should I have a point.attrib(name).is_equal(value)\n\t\t\t\t\t// or point.is_attrib_equal(name, value) ?\n\t\t\t\t\t//keep_point = (attrib_value != comparison_attrib_value)\n\t\t\t\t\tlet keep_point = !this._comparison(attrib_value, comparison_attrib_value);\n\n\t\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keep_point) {\n\t\t\t\t\t\treturn kept_points.push(point);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn kept_points;\n\t}\n\n\tprivate _comparison(attrib_value: number | string, comparison_attrib_value: number | string) {\n\t\tswitch (this.pv.attrib_ComparisonOperator) {\n\t\t\tcase ComparisonOperator['==']:\n\t\t\t\treturn attrib_value === comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<=']:\n\t\t\t\treturn attrib_value <= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<']:\n\t\t\t\treturn attrib_value < comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>']:\n\t\t\t\treturn attrib_value > comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>=']:\n\t\t\t\treturn attrib_value >= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['!=']:\n\t\t\t\treturn attrib_value !== comparison_attrib_value;\n\t\t}\n\t}\n\n\tprivate _eval_type_for_objects(core_objects: CoreObject[]) {\n\t\tconst object_type_name = ObjectTypes[this.pv.object_type];\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\tconst object = core_object.object();\n\n\t\t\t\tif (object.constructor.name === object_type_name) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_attrib_for_objects(core_objects: CoreObject[]) {\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t// const object = core_object.object();\n\t\t\t\tconst attrib_value = core_object.attrib_value(this.pv.attrib_name);\n\n\t\t\t\tconst comparison_attrib_value = lodash_isString(attrib_value)\n\t\t\t\t\t? this.pv.attrib_string\n\t\t\t\t\t: this.pv.attrib_float;\n\n\t\t\t\tif (attrib_value === comparison_attrib_value) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_bbox_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tlodash_each(points, (point, i) => {\n\t\t\tconst in_bbox = this._bbox.containsPoint(point.position());\n\n\t\t\tconst keep_point = this.pv.invert ? in_bbox : !in_bbox;\n\n\t\t\tif (keep_point) {\n\t\t\t\treturn kept_points.push(point);\n\t\t\t}\n\t\t});\n\n\t\treturn kept_points;\n\t}\n\n\t// private _eval_bbox_for_object(object: Object3D): boolean {\n\t// \tconst object_bbox = new Box3().setFromObject(object);\n\t// \tconst center = new Vector3();\n\t// \tobject_bbox.getCenter(center);\n\n\t// \treturn this.pv.bbox().containsPoint(center);\n\t// }\n\n\tprivate get _bbox() {\n\t\treturn this._bbox_cache != null\n\t\t\t? this._bbox_cache\n\t\t\t: (this._bbox_cache = new Box3(\n\t\t\t\t\tthis.pv.bbox_center.clone().sub(this.pv.bbox_size.clone().multiplyScalar(0.5)),\n\t\t\t\t\tthis.pv.bbox_center.clone().add(this.pv.bbox_size.clone().multiplyScalar(0.5))\n\t\t\t  ));\n\t}\n\n\tprivate _point_object(core_object: CoreObject) {\n\t\tconst core_points = core_object.points();\n\t\tconst geometry = CoreGeometry.geometry_from_points(\n\t\t\tcore_points,\n\t\t\t(<unknown>core_object.object().constructor) as ObjectType\n\t\t);\n\t\treturn this.create_object(geometry, ObjectType.POINTS);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport lodash_chunk from 'lodash/chunk';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreFace} from '../../../core/geometry/Face';\nclass FaceSopParamsConfig extends NodeParamsConfig {\n\tmake_faces_unique = ParamConfig.BOOLEAN(0);\n\tadd_face_center_attribute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tadd_face_id = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\ttransform = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tscale = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {make_faces_unique: 1, transform: 1},\n\t});\n}\nconst ParamsConfig = new FaceSopParamsConfig();\n\nexport class FaceSopNode extends TypedSopNode<FaceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'face';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.make_faces_unique) {\n\t\t\tthis._make_faces_unique(core_group);\n\n\t\t\t// we can only add face_center attrib\n\t\t\t// if the faces have been split\n\t\t\t// otherwise a point may belong to multiple faces\n\t\t\tif (this.pv.add_face_center_attribute) {\n\t\t\t\tthis._add_face_center_attribute(core_group);\n\t\t\t}\n\t\t\tif (this.pv.add_face_id) {\n\t\t\t\tthis._add_face_id(core_group);\n\t\t\t}\n\t\t\tif (this.pv.transform) {\n\t\t\t\tthis._transform_faces(core_group);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _make_faces_unique(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst faces = lodash_chunk(geometry.index?.array || [], 3);\n\t\t\t\tconst points_count = faces.length * 3;\n\t\t\t\tfor (let attrib_name of Object.keys(geometry.attributes)) {\n\t\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\t\tconst attrib_size = attrib.itemSize;\n\t\t\t\t\tconst new_values = new Float32Array(points_count * attrib_size);\n\t\t\t\t\tlet new_value_index = 0;\n\t\t\t\t\tfaces.forEach((face) => {\n\t\t\t\t\t\tface.forEach((index) => {\n\t\t\t\t\t\t\tlodash_times(attrib_size, (i) => {\n\t\t\t\t\t\t\t\tconst current_value = attrib.array[index * attrib_size + i];\n\t\t\t\t\t\t\t\tnew_values[new_value_index] = current_value;\n\t\t\t\t\t\t\t\tnew_value_index += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new BufferAttribute(new_values, attrib_size));\n\t\t\t\t}\n\t\t\t\tconst new_indices = lodash_range(points_count);\n\t\t\t\tgeometry.setIndex(new_indices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_face_center_attribute(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_center';\n\t\tconst face_center = new Vector3();\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, face_center);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _add_face_id(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_id';\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst faces = core_geometry.faces();\n\t\t\t\t// const points_count = core_geometry.points_count();\n\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 1, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < faces.length; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst points = face.points;\n\t\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\t\tconst point = points[j];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _transform_faces(core_group: CoreGroup) {\n\t\tconst attrib_name = 'position';\n\t\tconst face_center = new Vector3();\n\t\tconst new_position = new Vector3();\n\t\tconst scale = this.pv.scale;\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tnew_position.x = position.x * scale + face_center.x * (1 - scale);\n\t\t\t\t\t\tnew_position.y = position.y * scale + face_center.y * (1 - scale);\n\t\t\t\t\t\tnew_position.z = position.z * scale + face_center.z * (1 - scale);\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, new_position);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import lodash_flatten from 'lodash/flatten';\n// import lodash_clone from 'lodash/clone';\n// import lodash_merge from 'lodash/merge';\nimport {TypedSopNode} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {CoreLoaderGeometry} from '../../../core/loader/Geometry';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass FileSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('', {\n\t\tdesktop_browse: {file_type: 'geometry'},\n\t\talways_reference_asset: true,\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileSopNode.PARAM_CALLBACK_reload(node as FileSopNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new FileSopParamsConfig();\n\nexport class FileSopNode extends TypedSopNode<FileSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count_to_zero();\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tcook() {\n\t\tconst loader = new CoreLoaderGeometry(this.pv.url);\n\t\tloader.load(this._on_load.bind(this), this._on_error.bind(this));\n\t}\n\n\tprivate _on_load(objects: Object3D[]) {\n\t\tconsole.log('objects', objects);\n\t\tobjects = lodash_flatten(objects);\n\t\tthis.set_objects(objects);\n\t}\n\tprivate _on_error(message: string) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${message})`);\n\t}\n\n\t// if I add this again, check if it can also work for desktop\n\t// async _on_open_url() {\n\t// \tconst url = this.pv.url\n\t// \tconst a = document.createElement('a');\n\t// \ta.href = url;\n\t// \ta.setAttribute('target', '_blank');\n\t// \ta.click();\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: FileSopNode) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n\t// json_data_keys_prefix(){ return this.pv.json_data_keys_prefix }\n\t// json_skip_entries(){ return this.pv.skip_entries }\n\t// json_convert(){ return this.pv.convert }\n\t// json_convert_to_numeric(){ return this.pv.convert_to_numeric }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {Object3D} from 'three/src/core/Object3D';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreString} from '../String';\n\n// import {GeometryLoaderModule} from './Geometry/_Module';\n// import {DRACOLoader} from './Geometry/DRACOLoader';\n// import {JsonData} from './Geometry/JsonData'\n// import {CoreScriptLoader} from './Script';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\n\n// import {DDSLoader} from '../../../modules/three/examples/jsm/loaders/DDSLoader';\n// import {DRACOLoader} from '../../../modules/three/examples/jsm/loaders/DRACOLoader';\n// import {GLTFLoader} from '../../../modules/three/examples/jsm/loaders/GLTFLoader';\n// import {OBJLoader} from '../../../modules/three/examples/jsm/loaders/OBJLoader';\n\n// const GLTFLoaders = ['DDSLoader', 'DRACOLoader', 'GLTFLoader'];\n// const SCRIPT_URLS_BY_EXT = {\n// \tgltf: GLTFLoaders,\n// \tglb: GLTFLoaders,\n// \tobj: 'OBJLoader',\n// };\n// const THREE_LOADER_BY_EXT = {\n// \tgltf: 'GLTFLoader',\n// \tglb: 'GLTFLoader',\n// \tobj: 'OBJLoader',\n// };\n// const DRACO_EXTENSIONS = ['gltf', 'glb']\n// const DRACO_EXTENSIONS = ['drc'];\n\n// export enum LoaderType {\n// \tAUTO = 'auto',\n// \tJSON_DATA = 'json_data',\n// \t// THREEJS_JSON = 'threejs_json',\n// }\n// export const LOADER_TYPES = [\n// \tLoaderType.AUTO,\n// \tLoaderType.JSON_DATA,\n// \t// LoaderType.THREEJS_JSON,\n// ];\n\nexport class CoreLoaderGeometry {\n\tprivate ext: string;\n\n\tconstructor(\n\t\tprivate url: string // private type: LoaderType, // private requester: any\n\t) {\n\t\tconst elements = this.url.split('.');\n\t\tthis.ext = elements[elements.length - 1].toLowerCase();\n\t\tif (this.ext === 'zip') {\n\t\t\tthis.ext = elements[elements.length - 2];\n\t\t}\n\t\t// if(!this.type){\n\t\t// \tconsole.error(\"CoreLoaderGeometry type is not valid\", this.type)\n\t\t// }\n\t}\n\n\tload(on_success: (objects: Object3D[]) => void, on_error: (error: string) => void) {\n\t\tthis.load_auto()\n\t\t\t.then((object) => {\n\t\t\t\ton_success(object);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ton_error(error);\n\t\t\t});\n\t}\n\n\tprivate load_auto(): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = this.url; //.includes('?') ? this.url : `${this.url}?${Date.now()}`;\n\n\t\t\tif (this.ext == 'json') {\n\t\t\t\tfetch(url)\n\t\t\t\t\t.then(async (response) => {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\t\t\tobj_loader.parse(data, (obj) => {\n\t\t\t\t\t\t\tresolve(this.on_load_success(obj.children[0]));\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst loader = await this.loader_for_ext();\n\t\t\t\tif (loader) {\n\t\t\t\t\tloader.load(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\t(object: any) => {\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t\t\t\t\tresolve(object2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(error_message: ErrorEvent) => {\n\t\t\t\t\t\t\treject(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t\treject(error_message);\n\t\t\t\t}\n\t\t\t\t// CoreLoaderGeometry.loader_for_ext().then((loader) => {\n\t\t\t\t// \tif (loader) {\n\t\t\t\t// \t\tloader.load(\n\t\t\t\t// \t\t\turl,\n\t\t\t\t// \t\t\t(object: Object3D) => {\n\t\t\t\t// \t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t// \t\t\t\t\tresolve(object2);\n\t\t\t\t// \t\t\t\t});\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tnull,\n\t\t\t\t// \t\t\t(error_message: string) => {\n\t\t\t\t// \t\t\t\treject(error_message);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t);\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t// \t\tconsole.warn(error_message);\n\t\t\t\t// \t\treject(error_message);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async on_load_success(object: Object3D | BufferGeometry | object): Promise<Object3D[]> {\n\t\t// console.log(\"animation?\", object.animations)\n\t\t// if(object.animations){\n\t\t// \tawait CoreScriptLoader.load('/three/js/utils/SkeletonUtils')\n\t\t// }\n\t\tif (object instanceof Object3D) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'gltf':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\tcase 'glb':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\t// case 'drc':\n\t\t\t\t// \treturn this.on_load_succes_drc(object);\n\t\t\t\tcase 'obj':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tcase 'json':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tdefault:\n\t\t\t\t\treturn [object];\n\t\t\t}\n\t\t}\n\t\tif (object instanceof BufferGeometry) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'drc':\n\t\t\t\t\treturn this.on_load_succes_drc(object);\n\t\t\t\tdefault:\n\t\t\t\t\treturn [new Mesh(object)];\n\t\t\t}\n\t\t}\n\n\t\t// if it's an object, such as returned by glb\n\t\tswitch (this.ext) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tcase 'glb':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate on_load_succes_gltf(gltf: any): Object3D[] {\n\t\tconst scene = gltf['scene'];\n\t\tscene.animations = gltf.animations;\n\n\t\tconsole.log('[scene]', [scene]);\n\t\treturn [scene]; //.children\n\t}\n\tprivate on_load_succes_drc(geometry: BufferGeometry): Object3D[] {\n\t\tconst mat = new MeshLambertMaterial();\n\t\tconst mesh = new Mesh(geometry, mat);\n\n\t\treturn [mesh]; //.children\n\t}\n\n\tasync loader_for_ext() {\n\t\tswitch (this.ext.toLowerCase()) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.loader_for_gltf();\n\t\t\tcase 'glb':\n\t\t\t\treturn this.loader_for_glb();\n\t\t\tcase 'drc':\n\t\t\t\treturn this.loader_for_drc();\n\t\t\tcase 'obj':\n\t\t\t\treturn this.loader_for_obj();\n\t\t}\n\t}\n\n\tasync loader_for_gltf() {\n\t\t// 'DDSLoader', 'DRACOLoader', 'GLTFLoader'\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\t// const {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\treturn new GLTFLoader();\n\t}\n\tasync loader_for_glb() {\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\n\t\tconst loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/gltf/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\tloader.setDRACOLoader(draco_loader);\n\n\t\treturn loader;\n\t}\n\tasync loader_for_drc() {\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\t// const {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\n\t\t// const loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\t// loader.setDRACOLoader(draco_loader);\n\t\t// console.log('loader', loader);\n\t\treturn draco_loader;\n\t}\n\tasync loader_for_obj() {\n\t\tconst {OBJLoader} = await import(`../../../modules/three/examples/jsm/loaders/OBJLoader`);\n\t\treturn new OBJLoader();\n\t}\n\n\t// \tconst ext_lowercase = this.ext.toLowerCase();\n\t// \tlet script_names = SCRIPT_URLS_BY_EXT[ext_lowercase];\n\t// \tif (script_names) {\n\t// \t\tif (!lodash_isArray(script_names)) {\n\t// \t\t\tscript_names = [script_names];\n\t// \t\t}\n\t// \t\tlet imported_modules = {};\n\t// \t\tlet imported_module;\n\t// \t\tfor (let script_name of script_names) {\n\t// \t\t\timported_module = await CoreScriptLoader.load_module_three_loader(script_name);\n\t// \t\t\timported_modules[script_name] = imported_module;\n\t// \t\t}\n\n\t// \t\tconst loader_class_name = THREE_LOADER_BY_EXT[ext_lowercase];\n\t// \t\tconst loader_class = imported_module[loader_class_name];\n\t// \t\tif (loader_class) {\n\t// \t\t\tconst loader = new loader_class();\n\n\t// \t\t\tif (DRACO_EXTENSIONS.includes(ext_lowercase)) {\n\t// \t\t\t\tconst DRACOLoader = imported_modules.DRACOLoader.DRACOLoader;\n\t// \t\t\t\tconst draco_loader = new DRACOLoader();\n\t// \t\t\t\t// const decoder_path = '/three/js/libs/draco/gltf/'\n\t// \t\t\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t// \t\t\t\t// draco_loader.setDecoderPath( decoder_path );\n\t// \t\t\t\tloader.setDRACOLoader(draco_loader);\n\t// \t\t\t}\n\n\t// \t\t\treturn loader;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Group} from 'three/src/objects/Group';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshPhongMaterial} from 'three/src/materials/MeshPhongMaterial';\nimport {Points} from 'three/src/objects/Points';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterials: {},\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\tvar material = state.materials[ materialHash ];\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n\nexport { OBJLoader };\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {ObjectType} from '../../../core/geometry/Constant';\nclass FuseSopParamsConfig extends NodeParamsConfig {\n\tdist = ParamConfig.FLOAT(0.1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new FuseSopParamsConfig();\n\nexport class FuseSopNode extends TypedSopNode<FuseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'fuse';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to fuse together'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tconst new_objects = [];\n\t\tlet new_object;\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tnew_object = this._fuse_core_object(core_object);\n\t\t\tif (new_object) {\n\t\t\t\tnew_objects.push(new_object);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(new_objects);\n\t}\n\n\tprivate _fuse_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tif (!object) {\n\t\t\treturn;\n\t\t}\n\t\tconst points = core_object.points();\n\n\t\tconst precision = this.pv.dist;\n\t\tconst points_by_position: Dictionary<CorePoint[]> = {};\n\t\tfor (let point of points) {\n\t\t\tconst position = point.position();\n\t\t\tconst rounded_position = new Vector3(\n\t\t\t\tMath.round(position.x / precision),\n\t\t\t\tMath.round(position.y / precision),\n\t\t\t\tMath.round(position.z / precision)\n\t\t\t);\n\t\t\tconst key = rounded_position.toArray().join('-');\n\t\t\tpoints_by_position[key] = points_by_position[key] || [];\n\t\t\tpoints_by_position[key].push(point);\n\t\t}\n\n\t\tconst kept_points: CorePoint[] = [];\n\t\tObject.keys(points_by_position).forEach((key) => {\n\t\t\tkept_points.push(points_by_position[key][0]);\n\t\t});\n\n\t\t(object as Mesh).geometry.dispose();\n\t\tif (kept_points.length > 0) {\n\t\t\t(object as Mesh).geometry = CoreGeometry.geometry_from_points(\n\t\t\t\tkept_points,\n\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t);\n\t\t\treturn object;\n\t\t} else {\n\t\t\t// if(object.material){ object.material.dispose() }\n\t\t\t// if(object.parent){ object.parent.remove(object) }\n\t\t}\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {CoreGeometryOperationHexagon} from '../../../core/geometry/operation/Hexagon';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HexagonsSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\thexagon_radius = ParamConfig.FLOAT(0.1);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tpoints_only = ParamConfig.BOOLEAN(0);\n\t// no need to have centers, as all points are centers anyway\n\t//this.add_param( ParamType.TOGGLE, 'centers_only', 0, {visible_if: {points_only: 1}})\n}\nconst ParamsConfig = new HexagonsSopParamsConfig();\n\nexport class HexagonsSopNode extends TypedSopNode<HexagonsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hexagons';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst operation = new CoreGeometryOperationHexagon(this.pv.size, this.pv.hexagon_radius, this.pv.points_only);\n\t\tconst geometry = operation.process();\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tif (this.pv.points_only) {\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t\t} else {\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {BufferAttribute} from 'three/src/core/BufferAttribute'\nconst THREE = {BufferAttribute, BufferGeometry, Vector2}\nimport lodash_flatten from 'lodash/flatten'\n// import {CoreGeometry} from '../Geometry';\n\nexport class CoreGeometryOperationHexagon {\n\tconstructor(\n\t\tprivate _param_size: THREE.Vector2,\n\t\tprivate _param_hexagon_radius: number,\n\t\tprivate _param_points_only: boolean\n\t) {}\n\n\tprocess(): THREE.BufferGeometry {\n\t\tconst side_length = this._param_hexagon_radius\n\t\tconst half_side_length = side_length * 0.5\n\t\tconst step_size = {\n\t\t\tx: side_length,\n\t\t\ty: Math.cos(Math.PI / 6) * this._param_hexagon_radius,\n\t\t}\n\t\tconst steps_count = {\n\t\t\tx: Math.floor(this._param_size.x / step_size.x),\n\t\t\ty: Math.floor(this._param_size.y / step_size.y),\n\t\t}\n\t\tlet positions = []\n\t\tlet indices = []\n\t\tfor (let y = 0; y < steps_count.y; y++) {\n\t\t\tfor (let x = 0; x < steps_count.x; x++) {\n\t\t\t\tpositions.push([\n\t\t\t\t\t-(this._param_size.x * 0.5) +\n\t\t\t\t\t\tx * step_size.x +\n\t\t\t\t\t\t(y % 2 == 0 ? half_side_length : 0),\n\t\t\t\t\t0,\n\t\t\t\t\t-(this._param_size.y * 0.5) + y * step_size.y,\n\t\t\t\t])\n\n\t\t\t\tif (!this._param_points_only) {\n\t\t\t\t\tif (y >= 1) {\n\t\t\t\t\t\tif (x == 0 || x == steps_count.x - 1) {\n\t\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpositions = lodash_flatten(positions)\n\n\t\tconst geometry = new THREE.BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(new Float32Array(positions), 3)\n\t\t)\n\n\t\tif (!this._param_points_only) {\n\t\t\tindices = lodash_flatten(indices)\n\t\t\tgeometry.setIndex(indices)\n\t\t\tgeometry.computeVertexNormals()\n\t\t}\n\n\t\treturn geometry\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Group} from 'three/src/objects/Group';\nconst THREE = {Group, Object3D};\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGroup} from '../../../Core/Geometry/Group';\n// import {CoreConstant} from '../../../Core/Geometry/Constant'\n\nexport enum HierarchyMode {\n\tADD_PARENT = 'add_parent',\n\tREMOVE_PARENT = 'remove_parent',\n}\nexport const HIERARCHY_MODES: Array<HierarchyMode> = [HierarchyMode.ADD_PARENT, HierarchyMode.REMOVE_PARENT];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HierarchySopParamsConfig extends NodeParamsConfig {\n\tmode = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: HIERARCHY_MODES.map((m, i) => {\n\t\t\t\treturn {name: m, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tlevels = ParamConfig.INTEGER(1, {range: [0, 5]});\n}\nconst ParamsConfig = new HierarchySopParamsConfig();\n\nexport class HierarchySopNode extends TypedSopNode<HierarchySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hierarchy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add or remove parents to/from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\t// const group_wrapper = new CoreGroup(group);\n\n\t\tif (HIERARCHY_MODES[this.pv.mode] == HierarchyMode.ADD_PARENT) {\n\t\t\tconst objects = this._add_parent_to_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t} else {\n\t\t\tconst objects = this._remove_parent_from_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t}\n\t}\n\n\tprivate _add_parent_to_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tlet new_object;\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tnew_object = this._add_parent_to_object(object);\n\t\t\t\tif (new_object) {\n\t\t\t\t\tnew_objects.push(new_object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\tprivate _add_parent_to_object(object: THREE.Object3D): THREE.Object3D {\n\t\tlet new_parent = new THREE.Group();\n\n\t\t// while(child = object.children[0]){\n\t\tnew_parent.add(object);\n\t\t// }\n\n\t\tif (this.pv.levels > 0) {\n\t\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\t\t// for (let i of lodash_range(this.pv.levels - 1)) {\n\t\t\t\tnew_parent = this._add_new_parent(new_parent);\n\t\t\t}\n\t\t}\n\n\t\treturn new_parent;\n\t}\n\n\tprivate _add_new_parent(object: THREE.Object3D): THREE.Group {\n\t\tconst new_parent2 = new THREE.Group();\n\t\tnew_parent2.add(object);\n\t\treturn new_parent2;\n\t}\n\n\tprivate _remove_parent_from_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tconst new_children = this._remove_parent_from_object(object);\n\t\t\t\tfor (let new_child of new_children) {\n\t\t\t\t\tnew_objects.push(new_child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\n\tprivate _remove_parent_from_object(object: THREE.Object3D): THREE.Object3D[] {\n\t\tlet current_children = object.children;\n\n\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\tcurrent_children = this._get_children_from_objects(current_children);\n\t\t}\n\n\t\treturn current_children;\n\t}\n\n\tprivate _get_children_from_objects(objects: THREE.Object3D[]): THREE.Object3D[] {\n\t\tlet object;\n\t\tconst children: Object3D[] = [];\n\t\twhile ((object = objects.pop())) {\n\t\t\tif (object.children) {\n\t\t\t\tfor (let child of object.children) {\n\t\t\t\t\tchildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {ObjectTypeByObject} from '../../../core/geometry/Constant';\nclass InstanceSopParamsConfig extends NodeParamsConfig {\n\tattributes_to_copy = ParamConfig.STRING('instance*');\n\tapply_material = ParamConfig.BOOLEAN(1);\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tvisible_if: {apply_material: 1},\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new InstanceSopParamsConfig();\n\nexport class InstanceSopNode extends TypedSopNode<InstanceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance';\n\t}\n\n\tprivate _globals_handler: GlobalsGeometryHandler | undefined;\n\tprivate _geometry: BufferGeometry | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be instanciated', 'points to instance to'];\n\t}\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group_to_instance = input_contents[0];\n\t\tthis._geometry = undefined;\n\n\t\tconst object_to_instance = core_group_to_instance.objects()[0];\n\t\tif (object_to_instance) {\n\t\t\tconst geometry_to_instance = object_to_instance.geometry;\n\t\t\tif (geometry_to_instance) {\n\t\t\t\tconst core_group = input_contents[1];\n\t\t\t\tthis._create_instance(geometry_to_instance, core_group);\n\t\t\t}\n\t\t}\n\n\t\t// const type = object_to_instance.constructor.name;\n\t\tif (this._geometry) {\n\t\t\tconst type = ObjectTypeByObject(object_to_instance);\n\t\t\tif (type) {\n\t\t\t\tconst object = this.create_object(this._geometry, type);\n\t\t\t\t// object.customDepthMaterial = this._create_depth_material();\n\n\t\t\t\tif (this.pv.apply_material) {\n\t\t\t\t\tawait this._apply_material(object as Mesh);\n\t\t\t\t}\n\n\t\t\t\tthis.set_object(object);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tasync _apply_material(object: Mesh) {\n\t\tconst found_node = this.p.material.found_node();\n\t\tif (found_node) {\n\t\t\tif (found_node.node_context() == NodeContext.MAT) {\n\t\t\t\tconst material_node = found_node as BaseMatNodeType;\n\t\t\t\tthis._globals_handler = this._globals_handler || new GlobalsGeometryHandler();\n\t\t\t\tconst mat_builder_node = material_node as BaseBuilderMatNodeType;\n\t\t\t\tif (mat_builder_node.assembler_controller) {\n\t\t\t\t\tmat_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tconst container = await material_node.request_container();\n\t\t\t\tconst material: Material = container.material();\n\t\t\t\tif (material) {\n\t\t\t\t\tobject.material = material;\n\t\t\t\t\tCoreMaterial.apply_custom_materials(object, material);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a material');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('material node invalid');\n\t\t}\n\t}\n\n\t_create_instance(geometry_to_instance: BufferGeometry, template_core_group: CoreGroup) {\n\t\tthis._geometry = CoreInstancer.create_instance_buffer_geo(\n\t\t\tgeometry_to_instance,\n\t\t\ttemplate_core_group,\n\t\t\tthis.pv.attributes_to_copy\n\t\t);\n\t}\n\n\tprivate _on_create() {\n\t\tconst root = this.scene.root;\n\t\tconst mat_type = 'materials';\n\t\tconst mesh_lambert_builder_type = 'mesh_lambert_builder';\n\t\tconst mat_name = 'MAT';\n\t\tconst mesh_lambert_mat_name = 'mesh_lambert_builder1';\n\t\tlet MAT: MaterialsObjNode | undefined;\n\t\tconst node_with_mat_name = root.node(mat_name);\n\t\tif (node_with_mat_name && node_with_mat_name.type == mat_type) {\n\t\t\tMAT = node_with_mat_name as MaterialsObjNode;\n\t\t} else {\n\t\t\tMAT = root.create_node('materials');\n\t\t\tMAT.set_name(mat_name);\n\t\t}\n\n\t\tconst create_mesh_lambert = (MAT: MaterialsObjNode, mesh_lambert_mat_name: string) => {\n\t\t\tconst mat_node = MAT.create_node(mesh_lambert_builder_type);\n\t\t\tmat_node.set_name(mesh_lambert_mat_name);\n\n\t\t\tconst instance_transform1 = mat_node.create_node('instance_transform');\n\t\t\tlet output1 = mat_node.node('output1');\n\t\t\tif (!output1) {\n\t\t\t\toutput1 = mat_node.create_node('output');\n\t\t\t}\n\t\t\toutput1.set_input('position', instance_transform1, 'position');\n\t\t\toutput1.set_input('normal', instance_transform1, 'normal');\n\n\t\t\treturn mat_node;\n\t\t};\n\t\tconst mesh_lambert_mat = MAT.node(mesh_lambert_mat_name) || create_mesh_lambert(MAT, mesh_lambert_mat_name);\n\n\t\tthis.p.material.set(mesh_lambert_mat.full_path());\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nconst THREE = {Vector3};\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass JitterSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tseed = ParamConfig.INTEGER(1, {range: [0, 100]});\n}\nconst ParamsConfig = new JitterSopParamsConfig();\n\nexport class JitterSopNode extends TypedSopNode<JitterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'jitter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to jitter points of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.points().forEach((point, i) => {\n\t\t\t// TODO: replace by a pseudo random\n\t\t\tconst offset = new THREE.Vector3(\n\t\t\t\t2 * (CoreMath.rand(i * 75 + 764 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 5678 + 3653 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 657 + 48464 + this.pv.seed) - 0.5)\n\t\t\t);\n\t\t\toffset.normalize();\n\t\t\toffset.multiplyScalar(this.pv.amount);\n\n\t\t\tconst new_position = point\n\t\t\t\t.position()\n\t\t\t\t.clone()\n\t\t\t\t.add(offset);\n\t\t\tpoint.set_position(new_position);\n\t\t});\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass LayerSopParamsConfig extends NodeParamsConfig {\n\tlayer = ParamConfig.INTEGER(0, {\n\t\trange: [0, 31],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new LayerSopParamsConfig();\n\nexport class LayerSopNode extends TypedSopNode<LayerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'layer';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change layers of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.layers.set(this.pv.layer);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport lodash_times from 'lodash/times';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LineSopParamsConfig extends NodeParamsConfig {\n\tlength = ParamConfig.FLOAT(1, {range: [0, 10]});\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [2, 100],\n\t\trange_locked: [true, false],\n\t});\n\torigin = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new LineSopParamsConfig();\n\nexport class LineSopNode extends TypedSopNode<LineSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'line';\n\t}\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst points_count = Math.max(2, this.pv.points_count);\n\n\t\tconst positions: number[] = new Array(points_count * 3);\n\t\tconst indices: number[] = new Array(points_count);\n\n\t\tconst last_pt = this.pv.direction\n\t\t\t.clone()\n\t\t\t.normalize()\n\t\t\t.multiplyScalar(this.pv.length);\n\n\t\tlodash_times(points_count, (i) => {\n\t\t\tconst i_n = i / (points_count - 1);\n\t\t\tconst point = last_pt.clone().multiplyScalar(i_n);\n\t\t\tpoint.add(this.pv.origin);\n\t\t\tpoint.toArray(positions, i * 3);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices[(i - 1) * 2] = i - 1;\n\t\t\t\tindices[(i - 1) * 2 + 1] = i;\n\t\t\t}\n\t\t});\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {BaseNodeMat} from '../Mat/_Base'\n\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nclass MaterialSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tmaterial = ParamConfig.OPERATOR_PATH('/MAT/mesh_standard1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new MaterialSopParamsConfig();\n\nexport class MaterialSopNode extends TypedSopNode<MaterialSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'material';\n\t}\n\n\t_param_material: BaseMatNodeType | undefined;\n\t_globals_handler: GlobalsGeometryHandler = new GlobalsGeometryHandler();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to assign material to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\t// TODO: optimize by not fetching the material node everytime\n\t// and maybe have a method in all operator_path params to do that quickly\n\t// TODO: does this apply the material to only 1 node?\n\tasync cook(core_groups: CoreGroup[]) {\n\t\t// let container = input_containers[0];\n\t\t// const group =\tcontainer.group(); // {clone: this.do_clone_inputs()})\n\t\tconst core_group = core_groups[0];\n\n\t\tconst node = this.p.material.found_node();\n\t\tif (node) {\n\t\t\tif (node.node_context() != NodeContext.MAT) {\n\t\t\t\tthis.states.error.set('node is not a material');\n\t\t\t} else {\n\t\t\t\tconst material_node = node as BaseMatNodeType;\n\t\t\t\tconst material = material_node.material;\n\t\t\t\tif (material instanceof ShaderMaterial) {\n\t\t\t\t\tconst material_builder_node = node as BaseBuilderMatNodeType;\n\t\t\t\t\tmaterial_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tawait material_node.request_container();\n\t\t\t\tif (material) {\n\t\t\t\t\tfor (let object of core_group.objects_from_group(this.pv.group)) {\n\t\t\t\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\t\t\t\tobject.traverse((grand_child) => {\n\t\t\t\t\t\t\t\tthis.apply_material(grand_child, material);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.apply_material(object, material);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.set_core_group(core_group);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`material invalid. (error: '${material_node.states.error.message}')`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node '${this.pv.material}' not found`);\n\t\t}\n\t}\n\n\tapply_material(object: Object3D, material: Material) {\n\t\tconst object_with_material = object as Mesh;\n\t\t// if (object.material != null) {\n\t\t// \tobject.material.dispose();\n\t\t// }\n\t\t// TODO: do I really need to clone this material?\n\t\t// does it get cloned when a node fetches the container?\n\t\t// I may only need to clone it for the copy SOP\n\t\tobject_with_material.material = material;\n\t\tCoreMaterial.apply_custom_materials(object, material);\n\t}\n}\n","// import lodash_times from 'lodash/times';\n// import lodash_each from 'lodash/each';\n// import lodash_difference from 'lodash/difference';\n// import lodash_keys from 'lodash/keys';\n// import {Object3D} from 'three/src/core/Object3D';\n// import {Group} from 'three/src/objects/Group';\n// import {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferAttribute, Group, Object3D};\nimport {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {CoreConstant} from '../../../Core/Geometry/Constant';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Points} from 'three/src/objects/Points';\ntype ObjectsByType = {[key in ObjectType]: Object3DWithGeometry[]};\ntype ObjectTypes = Array<ObjectType>;\n\nconst INPUT_NAME = 'geometry to merge';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MergeSopParamsConfig extends NodeParamsConfig {\n\tcompact = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new MergeSopParamsConfig();\n\nexport class MergeSopNode extends TypedSopNode<MergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'merge';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 4);\n\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('compress-arrows-alt');\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tlet all_objects: Object3DWithGeometry[] = []; //new Group()\n\t\tfor (let input_core_group of input_contents) {\n\t\t\tif (input_core_group) {\n\t\t\t\tconst objects = input_core_group.objects();\n\t\t\t\tfor (let object of objects) {\n\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\tall_objects.push(child as Object3DWithGeometry);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.pv.compact) {\n\t\t\tall_objects = this._make_compact(all_objects);\n\t\t}\n\t\tthis.set_objects(all_objects);\n\t}\n\n\t_make_compact(all_objects: Object3DWithGeometry[]): Object3DWithGeometry[] {\n\t\tconst objects_by_type: ObjectsByType = {\n\t\t\t[ObjectType.MESH]: [],\n\t\t\t[ObjectType.POINTS]: [],\n\t\t\t[ObjectType.LINE_SEGMENTS]: [],\n\t\t};\n\t\tconst merged_objects: Object3DWithGeometry[] = [];\n\n\t\tfor (let object of all_objects) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst object = object3d as Object3DWithGeometry;\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\t// const type = child.constructor.name;\n\t\t\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\t\t\tobjects_by_type[ObjectType.MESH].push(object);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((object as LineSegments).isLineSegments) {\n\t\t\t\t\t\t\tobjects_by_type[ObjectType.LINE_SEGMENTS].push(object);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((object as Points).isPoints) {\n\t\t\t\t\t\t\t\tobjects_by_type[ObjectType.POINTS].push(object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfor (let type of Object.keys(objects_by_type) as ObjectTypes) {\n\t\t\tconst objects = objects_by_type[type];\n\n\t\t\tconst geometries = [];\n\t\t\tfor (let object of objects) {\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tgeometry.applyMatrix4(object.matrix);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\n\t\t\t// TODO: test that this works with geometries with same attributes\n\t\t\tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t\tif (merged_geometry) {\n\t\t\t\tconst object = this.create_object(merged_geometry, type);\n\t\t\t\tmerged_objects.push(object);\n\t\t\t}\n\n\t\t\t// objects.forEach( object=> {\n\t\t\t// \tif (object.parent != null) {\n\t\t\t// \t\tobject.parent.remove(object);\n\t\t\t// \t}\n\t\t\t// \tif (object.geometry != null) {\n\t\t\t// \t\tobject.geometry.dispose();\n\t\t\t// \t}\n\t\t\t// \t(object.material != null ? object.material.dispose() : undefined);\n\t\t\t// });\n\t\t}\n\t\treturn merged_objects;\n\t}\n}\n\n// _add_missing_attributes: (geo0, geo1)->\n// \tgeo0_attribute_names = lodash_keys(geo0.attributes)\n// \tgeo1_attribute_names = lodash_keys(geo1.attributes)\n\n// \tattributes_not_in_geo0 = lodash_difference(geo1_attribute_names, geo0_attribute_names)\n// \tattributes_not_in_geo1 = lodash_difference(geo0_attribute_names, geo1_attribute_names)\n\n// \tlodash_each attributes_not_in_geo0, (attribute_not_in_geo0)=>\n// \t\tthis._add_attribute(geo0, attribute_not_in_geo0, geo1.attributes[attribute_not_in_geo0])\n// \tlodash_each attributes_not_in_geo1, (attribute_not_in_geo1)=>\n// \t\tthis._add_attribute(geo1, attribute_not_in_geo1, geo0.attributes[attribute_not_in_geo1])\n\n// _add_attribute: (geo, attrib_name, attribute_template)->\n\n// \titem_size = attribute_template['itemSize']\n// \tnormalized = attribute_template['normalized']\n// \tpoints_count = geo.getAttribute('position').array.length / 3\n\n// \traw_values = []\n// \tlodash_times points_count, (i)->\n// \t\tlodash_times item_size, (j)->\n// \t\t\traw_values.push(0)\n\n// \tvalues = new Float32Array(raw_values)\n// \tgeo.setAttribute( attrib_name, new BufferAttribute( values, item_size, normalized) )\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypeAssert} from '../../poly/Assert';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {SimplexNoise} from '../../../../modules/three/examples/jsm/math/SimplexNoise';\n\nenum Operation {\n\tADD = 'add',\n\tSET = 'set',\n\tMULT = 'mult',\n\tSUBSTRACT = 'substract',\n\tDIVIDE = 'divide',\n}\ntype Operations = Array<Operation>;\nconst Operations: Operations = [Operation.ADD, Operation.SET, Operation.MULT, Operation.SUBSTRACT, Operation.DIVIDE];\n\n// const COMPONENT_OFFSETS = [\n// \tnew Vector3(545, 125454, 2142),\n// \tnew Vector3(425, 25746, 95242),\n// \tnew Vector3(765132, 21, 9245),\n// ]\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NoiseSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tfreq = ParamConfig.VECTOR3([1, 1, 1]);\n\toffset = ParamConfig.VECTOR3([0, 0, 0]);\n\toctaves = ParamConfig.INTEGER(3, {\n\t\trange: [1, 8],\n\t\trange_locked: [true, false],\n\t});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseed = ParamConfig.INTEGER(0, {range: [0, 100]});\n\tseparator = ParamConfig.SEPARATOR();\n\tuse_normals = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('position');\n\toperation = ParamConfig.INTEGER(Operations.indexOf(Operation.ADD), {\n\t\tmenu: {\n\t\t\tentries: Operations.map((operation) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: operation,\n\t\t\t\t\tvalue: Operations.indexOf(operation),\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcompute_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new NoiseSopParamsConfig();\n\nexport class NoiseSopNode extends TypedSopNode<NoiseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\t// _param_amount: number;\n\t// _param_offset: Vector3;\n\t// _param_freq: Vector3;\n\t// _param_seed: number;\n\t// _param_use_normals: boolean;\n\t// _param_attrib_name: string;\n\t// _param_operation: number;\n\t// _param_compute_normals: boolean;\n\n\tprivate _simplex_by_seed: Map<number, SimplexNoise> = new Map();\n\n\tprivate _rest_core_group_timestamp: number | undefined;\n\tprivate _rest_points: CorePoint[] = [];\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add noise to', 'rest geometry'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_rest = input_contents[1];\n\n\t\tconst dest_points = core_group.points();\n\t\tif (core_group_rest) {\n\t\t\tif (\n\t\t\t\tthis._rest_core_group_timestamp == null ||\n\t\t\t\tthis._rest_core_group_timestamp != core_group_rest.timestamp()\n\t\t\t) {\n\t\t\t\tthis._rest_points = core_group_rest.points();\n\t\t\t\tthis._rest_core_group_timestamp = core_group_rest.timestamp();\n\t\t\t}\n\t\t}\n\n\t\t// const {SimplexNoise} = await import(`three/examples/jsm/math/SimplexNoise`)\n\t\tconst simplex = this._get_simplex();\n\n\t\tconst use_normals = this.pv.use_normals && core_group.has_attrib('normal');\n\t\tconst target_attrib_size = core_group.attrib_size(this.pv.attrib_name);\n\n\t\tfor (let i = 0; i < dest_points.length; i++) {\n\t\t\tconst dest_point = dest_points[i];\n\t\t\tlet rest_point = core_group_rest ? this._rest_points[i] : dest_point;\n\t\t\tconst current_attrib_value = rest_point.attrib_value(this.pv.attrib_name);\n\t\t\tconst pos = rest_point\n\t\t\t\t.position()\n\t\t\t\t.add(this.pv.offset)\n\t\t\t\t.multiply(this.pv.freq);\n\n\t\t\tlet noise_value = (() => {\n\t\t\t\tif (use_normals) {\n\t\t\t\t\tconst normal = rest_point.attrib_value('normal');\n\t\t\t\t\tconst noise = this.pv.amount * this._fbm(simplex, pos.x, pos.y, pos.z);\n\t\t\t\t\treturn normal.clone().multiplyScalar(noise);\n\t\t\t\t\t//vertex.add(noise_vector)\n\t\t\t\t} else {\n\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 545, pos.y + 125454, pos.z + 2142),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x - 425, pos.y - 25746, pos.z + 95242),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 765132, pos.y + 21, pos.z - 9245)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tnoise_value = (() => {\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn noise_value.x;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturn new Vector2(noise_value.x, noise_value.y);\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturn noise_value;\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tconst new_attrib_value = (() => {\n\t\t\t\tconst operation = Operations[this.pv.operation];\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value + noise_value;\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value * noise_value;\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value / noise_value;\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value - noise_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value.add(noise_value);\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.multiply(noise_value);\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value.divide(noise_value);\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.sub(noise_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tdest_point.set_attrib_value(this.pv.attrib_name, new_attrib_value);\n\t\t}\n\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tfor (let geometry of core_group.geometries()) {\n\t\t\t\t(geometry.getAttribute(this.pv.attrib_name) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.pv.compute_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _fbm(simplex: SimplexNoise, x: number, y: number, z: number): number {\n\t\tlet value = 0.0;\n\t\tlet amplitude = 1.0;\n\t\tfor (let i = 0; i < this.pv.octaves; i++) {\n\t\t\tvalue += amplitude * simplex.noise3d(x, y, z);\n\t\t\tx *= this.pv.freq_increase;\n\t\t\ty *= this.pv.freq_increase;\n\t\t\tz *= this.pv.freq_increase;\n\t\t\tamplitude *= this.pv.amp_attenuation;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _get_simplex(): SimplexNoise {\n\t\tconst simplex = this._simplex_by_seed.get(this.pv.seed);\n\t\tif (simplex) {\n\t\t\treturn simplex;\n\t\t} else {\n\t\t\tconst simplex = this._create_simplex();\n\t\t\tthis._simplex_by_seed.set(this.pv.seed, simplex);\n\t\t\treturn simplex;\n\t\t}\n\t}\n\tprivate _create_simplex(): SimplexNoise {\n\t\tconst seed = this.pv.seed;\n\t\tconst random_generator = {\n\t\t\trandom: function() {\n\t\t\t\treturn CoreMath.rand_float(seed);\n\t\t\t},\n\t\t};\n\t\tconst simplex = new SimplexNoise(random_generator);\n\t\t// for (let key of Object.keys(this._simplex_by_seed)) {\n\t\tthis._simplex_by_seed.delete(seed);\n\t\t// }\n\t\treturn simplex;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n","// import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const DEFAULT_NORMAL = new Vector3(0, 0, 1);\nconst NORMAL_ATTRIB_NAME = 'normal';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NormalsSopParamsConfig extends NodeParamsConfig {\n\tedit = ParamConfig.BOOLEAN(0);\n\tupdate_x = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tx = ParamConfig.FLOAT('@N.x', {\n\t\tvisible_if: {update_x: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\ty = ParamConfig.FLOAT('@N.y', {\n\t\tvisible_if: {update_y: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tz = ParamConfig.FLOAT('@N.z', {\n\t\tvisible_if: {update_z: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\n\trecompute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 0},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new NormalsSopParamsConfig();\n\nexport class NormalsSopNode extends TypedSopNode<NormalsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'normals';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update normals of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.edit) {\n\t\t\tawait this._eval_expressions_for_core_group(core_group);\n\t\t} else {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tif (this.pv.invert) {\n\t\t\tthis._invert_normals(core_group);\n\t\t}\n\n\t\t// add attr if not present\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\t\t// \t\tif(!geometry.getAttribute('normal')){\n\t\t// \t\t\tconst position_values = geometry.attributes['position'].array;\n\t\t// \t\t\tconst normal_values = [];\n\t\t// \t\t\tposition_values.forEach(p=> normal_values.push(0));\n\t\t// \t\t\tgeometry.setAttribute('normal', new Float32BufferAttribute(normal_values, 3));\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (this.pv.edit) {\n\t\t// \tthis._eval_expressions(core_group);\n\t\t// } else {\n\t\t// \tif(this.pv.recompute){\n\t\t// \t\tcore_group.compute_vertex_normals()\n\t\t// \t}\n\t\t// }\n\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\n\t\t// \t\tif (this.pv.invert) {\n\t\t// \t\t\tthis._invert_normals(geometry);\n\t\t// \t\t}\n\n\t\t// \t\tif (!this.pv.edit) {\n\t\t// \t\t\tgeometry.computeVertexNormals();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\t// const points = core_group.points();\n\n\t\t// const attrib_name = 'normal';\n\t\t// for(let point of points){\n\n\t\t// \tthis.context().set_entity(point);\n\n\t\t// \tthis.param(attrib_name).eval(val=> {\n\t\t// \t\tval.normalize();\n\t\t// \t\tpoint.set_attrib_value(attrib_name, val);\n\t\t// \t});\n\t\t// }\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\t}\n\tprivate async _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(NORMAL_ATTRIB_NAME).array as number[];\n\n\t\t// x\n\t\tif (this.pv.update_x) {\n\t\t\tif (this.p.x.has_expression() && this.p.x.expression_controller) {\n\t\t\t\tawait this.p.x.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 0] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 0] = this.pv.x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// y\n\t\tif (this.pv.update_y) {\n\t\t\tif (this.p.y.has_expression() && this.p.y.expression_controller) {\n\t\t\t\tawait this.p.y.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 1] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 1] = this.pv.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// z\n\t\tif (this.pv.update_z) {\n\t\t\tif (this.p.z.has_expression() && this.p.z.expression_controller) {\n\t\t\t\tawait this.p.z.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 2] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 2] = this.pv.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_init_normal(core_geometry: CoreGeometry) {\n\t// \tif (!core_geometry.has_attrib(NORMAL_ATTRIB_NAME)) {\n\t// \t\tcore_geometry.add_numeric_attrib(NORMAL_ATTRIB_NAME, 3, DEFAULT_NORMAL);\n\t// \t}\n\t// }\n\n\tprivate _invert_normals(core_group: CoreGroup) {\n\t\t// this._create_init_normal();\n\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tconst geometry = core_object.core_geometry().geometry();\n\t\t\tconst normal_attrib = geometry.attributes[NORMAL_ATTRIB_NAME];\n\t\t\tif (normal_attrib) {\n\t\t\t\tconst array = normal_attrib.array as number[];\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] *= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// let index_attrib;\n\t\t// if ((index_attrib = geometry.getIndex()) != null) {\n\t\t// \tconst { array } = index_attrib;\n\n\t\t// \tconst faces_count = array.length / 3;\n\t\t// \tfor(let i=0; i<faces_count; i++){\n\t\t// \t\tconst tmp = array[i*3];\n\t\t// \t\tarray[i*3] = array[(i*3)+2];\n\t\t// \t\tarray[(i*3)+2] = tmp;\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\t// \tconst points = geometry_wrapper.points();\n\n\t\t// \tconst attrib_name = 'normal';\n\t\t// \tfor(let point of points){\n\t\t// \t\tconst normal = point.normal();\n\t\t// \t\tnormal.multiplyScalar(-1);\n\t\t// \t\tpoint.set_attrib_value(attrib_name, normal);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass NullSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new NullSopParamsConfig();\n\nexport class NullSopNode extends TypedSopNode<NullSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\tthis.ui_data.set_border_radius(1000);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n}\n","import {TypedSopNode, BaseSopNodeType} from './_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {CoreWalker} from '../../../Core/Walker';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GeometryContainer} from '../../containers/Geometry';\nclass ObjectMergeSopParamsConfig extends NodeParamsConfig {\n\tgeometry = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n}\nconst ParamsConfig = new ObjectMergeSopParamsConfig();\n\nexport class ObjectMergeSopNode extends TypedSopNode<ObjectMergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'object_merge';\n\t}\n\n\t// _param_apply_parent_transform: boolean\n\tinitialize_node() {}\n\n\tasync cook(input_containers: CoreGroup[]) {\n\t\tconst geometry_node = this.p.geometry.found_node();\n\t\tif (geometry_node) {\n\t\t\tif (geometry_node.node_context() == NodeContext.SOP) {\n\t\t\t\tconst container = await geometry_node.request_container();\n\t\t\t\tthis.import_input(geometry_node as BaseSopNodeType, container);\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a geometry');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.geometry}'`);\n\t\t}\n\t}\n\n\timport_input(geometry_node: BaseSopNodeType, container: GeometryContainer) {\n\t\tlet core_group;\n\t\t// I unfortunately need to do a clone here,\n\t\t// because if 2 objectmerge nodes import the same geometry,\n\t\t// they would try to place it under 2 different geo nodes\n\t\t// which is not possible\n\t\tif ((core_group = container.core_content_cloned()) != null) {\n\t\t\t// cannot do that until i know how to make it recook\n\t\t\t// when the obj changes\n\t\t\t// if (this._param_apply_parent_transform){\n\t\t\t// \tconst matrix = geometry_node.parent().object().matrixWorld\n\t\t\t// \tgroup.children.forEach(child=>{\n\t\t\t// \t\tconsole.log(child)\n\t\t\t// \t\tconst geometry = child.geometry\n\t\t\t// \t\tif(geometry){\n\t\t\t// \t\t\tgeometry.applyMatrix(matrix)\n\t\t\t// \t\t}\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.states.error.set('invalid target');\n\t\t}\n\t}\n\n\t// geometry_node() {\n\t// \tif ((this._param_geometry != null) && (this._param_geometry !== '')) {\n\t// \t\tCoreWalker.find_node(this, this._param_geometry);\n\t// \t}\n\t// }\n}\n","/// <reference path=\"./types/occlusion.d.ts\" />\n// https://github.com/wwwtyro/geo-ambient-occlusion\nimport geoao from 'geo-ambient-occlusion';\n\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {Float32BufferAttribute};\nimport {TypedSopNode} from './_Base';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../Core/Geometry/Geometry'\n// import {CorePoint} from '../../../Core/Geometry/Point'\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass OcclusionSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING('occlusion');\n\tsamples = ParamConfig.INTEGER(256, {\n\t\trange: [1, 256],\n\t\trange_locked: [true, false],\n\t});\n\tsep = ParamConfig.SEPARATOR();\n\tbuffer_resolution = ParamConfig.INTEGER(512);\n\tbias = ParamConfig.FLOAT(0.01);\n}\nconst ParamsConfig = new OcclusionSopParamsConfig();\n\nexport class OcclusionSopNode extends TypedSopNode<OcclusionSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'occlusion';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tawait this._process_occlusion_on_object(core_object);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _process_occlusion_on_object(core_object: CoreObject) {\n\t\tconst geometry = core_object.core_geometry().geometry();\n\n\t\tconst position_array = geometry.attributes.position.array;\n\t\tconst normal_array = geometry.attributes.normal.array;\n\t\tconst index_array = geometry.getIndex()?.array;\n\t\tconst aoSampler = geoao(position_array, {\n\t\t\tcells: index_array,\n\t\t\tnormals: normal_array,\n\t\t\tresolution: this.pv.buffer_resolution,\n\t\t\tbias: this.pv.bias,\n\t\t});\n\n\t\tfor (let i = 0; i < this.pv.samples; i++) {\n\t\t\taoSampler.sample();\n\t\t}\n\t\tconst ao = aoSampler.report();\n\n\t\tgeometry.setAttribute(this.pv.attrib_name, new THREE.Float32BufferAttribute(ao, 1));\n\n\t\taoSampler.dispose();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// import {Lifespan} from './Concerns/ParticlesSystemGPU/Lifespan';\n// import {GPUCompute} from './Concerns/ParticlesSystemGPU/GPUCompute';\n// import {RenderMaterial} from './Concerns/ParticlesSystemGPU/RenderMaterial';\n// import {ParticleShaderBuilder} from './Concerns/ParticlesSystemGPU/ParticleShaderBuilder'\n// import {AssemblerOwner} from '../../../Engine/Node/Gl/Assembler/Owner';\nimport {ShaderAssemblerParticles} from '../gl/code/assemblers/particles/Particles';\nimport {GlobalsTextureHandler} from '../gl/code/globals/Texture';\n\n// SPECS:\n// - simulation shaders should update the particles at any frame, and resimulate accordingly when at later frames\n// - render material should update at any frame, without having to resimulate\n// - changing the input will recompute, when on first frame only (otherwise an animated geo could make it recompute all the time)\n\n// AssemblerOwner(\n// \tRenderMaterial(\n// \tLifespan(\n// \tGPUCompute(\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ParticlesSystemGpuRenderController} from './utils/ParticlesSystemGPU/RenderController';\nimport {ParticlesSystemGpuComputeController} from './utils/ParticlesSystemGPU/GPUComputeController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShaderName} from '../utils/shaders/ShaderName';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {PointsBuilderMatNode} from '../mat/PointsBuilder';\nimport {ConstantGlNode} from '../gl/Constant';\nclass ParticlesSystemGpuSopParamsConfig extends NodeParamsConfig {\n\t// gpu compute\n\tstart_frame = ParamConfig.FLOAT(1, {range: [1, 100]});\n\tauto_textures_size = ParamConfig.BOOLEAN(1);\n\tmax_textures_size = ParamConfig.VECTOR2([1024, 1024], {visible_if: {auto_textures_size: 1}});\n\ttextures_size = ParamConfig.VECTOR2([64, 64], {visible_if: {auto_textures_size: 0}});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tParticlesSystemGpuSopNode.PARAM_CALLBACK_reset(node as ParticlesSystemGpuSopNode);\n\t\t},\n\t});\n\n\t// render\n\t// this.self.within_param_folder(\"setup\", () => {\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new ParticlesSystemGpuSopParamsConfig();\nexport class ParticlesSystemGpuSopNode extends TypedSopNode<ParticlesSystemGpuSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'particles_system_gpu';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<ShaderAssemblerParticles> = new GlAssemblerController<\n\t\tShaderAssemblerParticles\n\t>(this, ShaderAssemblerParticles);\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tpublic readonly gpu_controller = new ParticlesSystemGpuComputeController(this);\n\tpublic readonly render_controller = new ParticlesSystemGpuRenderController(this);\n\n\tstatic require_webgl2() {\n\t\treturn true;\n\t}\n\tstatic PARAM_CALLBACK_reset(node: ParticlesSystemGpuSopNode) {\n\t\tnode.PARAM_CALLBACK_reset();\n\t}\n\tPARAM_CALLBACK_reset() {\n\t\tthis.gpu_controller.reset_gpu_compute_and_set_dirty();\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to emit particles from'];\n\t}\n\n\tprivate _reset_material_if_dirty_bound = this._reset_material_if_dirty.bind(this);\n\tprotected _children_controller_context = NodeContext.GL;\n\tprivate _on_create_prepare_material_bound = this._on_create_prepare_material.bind(this);\n\tinitialize_node() {\n\t\t// this._init_common_shader_builder(ShaderAssemblerParticles, {\n\t\t// \thas_display_flag: true,\n\t\t// \tupdate_on_dirty: false,\n\t\t// });\n\n\t\tthis.io.inputs.set_count(1);\n\t\t// set to never at the moment\n\t\t// otherwise the input is cloned on every frame inside cook_main()\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\n\t\tthis.add_post_dirty_hook('_reset_material_if_dirty', this._reset_material_if_dirty_bound);\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_prepare_material_bound);\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t// create_params() {\n\t// \t// this._create_gpu_compute_params();\n\t// \t// this._create_render_params();\n\t// \tthis._create_lifespan_params();\n\t// }\n\n\tasync _reset_material_if_dirty() {\n\t\t// if(\n\t\t// \tdirty_trigger.graph_node_id &&\n\t\t// \tthis._render_material_node &&\n\t\t// \tdirty_trigger.graph_node_id() == this._render_material_node.graph_node_id()\n\t\t// ){\n\t\t// \tthis.remove_dirty_state()\n\t\t// } else {\n\t\tif (this.p.material.is_dirty) {\n\t\t\tthis.render_controller.reset_render_material();\n\t\t\tif (!this.is_on_frame_start()) {\n\t\t\t\tawait this.render_controller.init_render_material();\n\t\t\t}\n\t\t}\n\t\t// }\n\t\t// that seems to create an infinite loop\n\t\t// maybe only check if the type of geo has changed?\n\t\t// if(this.input_graph_node(0).is_dirty()){\n\t\t// \tthis.set_compilation_required()\n\t\t// }\n\t}\n\n\tis_on_frame_start(): boolean {\n\t\treturn this.scene.frame == this.pv.start_frame;\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tthis.gpu_controller.set_restart_not_required();\n\t\tconst core_group = input_contents[0];\n\t\t// this._simulation_restart_required = false;\n\t\t// let set_group_required = false;\n\t\t// let points:CorePoint[] = [];\n\t\tconsole.log('particles cook');\n\t\tawait this.compile_if_required();\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.gpu_controller.reset_particle_groups();\n\t\t}\n\n\t\tif (!this.gpu_controller.initialized) {\n\t\t\tawait this.gpu_controller.init(core_group);\n\t\t\t// this.gpu_controller.init_particle_group_points(core_group)\n\t\t\t// await this.gpu_controller.create_gpu_compute();\n\t\t}\n\n\t\t// if (!this._gpu_compute) {\n\t\t// \tawait this.gpu_controller.create_gpu_compute(points);\n\t\t// \t// set_group_required = true\n\t\t// }\n\t\tif (!this.render_controller.initialized) {\n\t\t\tthis.render_controller.init_core_group(core_group);\n\t\t\tawait this.render_controller.init_render_material();\n\t\t}\n\n\t\tthis.gpu_controller.restart_simulation_if_required();\n\t\tthis.gpu_controller.compute_similation_if_required();\n\t\t// if (frame >= this.pv.start_frame) {\n\t\t// \tif (this._last_simulated_frame == null) {\n\t\t// \t\tthis._last_simulated_frame = this._param_start_frame - 1;\n\t\t// \t}\n\t\t// \tif (frame > this._last_simulated_frame) {\n\t\t// \t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t// \t}\n\t\t// }\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tawait this.run_assembler();\n\t\t}\n\t}\n\tasync run_assembler() {\n\t\tconst root_nodes = this._find_root_nodes();\n\t\tconsole.log('root_nodes', root_nodes);\n\t\tif (root_nodes.length > 0) {\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.PARTICLE_SIM_UV);\n\t\t\tthis.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tthis.assembler_controller.assembler.set_root_nodes(root_nodes);\n\n\t\t\tawait this.assembler_controller.assembler.compile();\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\n\t\tconst shaders_by_name: Map<ShaderName, string> = this.assembler_controller.assembler.shaders_by_name();\n\t\tthis.gpu_controller.set_shaders_by_name(shaders_by_name);\n\t\tthis.render_controller.set_shaders_by_name(shaders_by_name);\n\t\t// if (shaders_by_name) {\n\t\t// \tawait this.eval_params(this._new_params);\n\t\t// \tthis._shaders_by_name = lodash_cloneDeep(shaders_by_name);\n\t\t// } else {\n\t\t// \tconsole.warn('no shaders by name from assembler');\n\t\t// }\n\t\tthis.gpu_controller.reset_gpu_compute();\n\t\tthis.gpu_controller.reset_particle_groups(); // this\n\n\t\tawait this.assembler_controller.assign_uniform_values(); // TODO: needed?\n\t}\n\t// shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\t// shaders(): string[] {\n\t// \treturn Object.keys(this._shaders_by_name).map((k) => this._shaders_by_name[k]);\n\t// }\n\n\tprivate _find_root_nodes() {\n\t\tconst nodes: BaseGlNodeType[] = GlNodeFinder.find_attribute_export_nodes(this);\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node is allowed');\n\t\t\treturn [];\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tnodes.push(output_node);\n\t\t}\n\t\treturn nodes;\n\t}\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n\n\tprivate _on_create_prepare_material() {\n\t\t// that's mostly to have the default shader work when creating the node\n\t\t// output.set_input('position', globals, 'position')\n\t\t// or instead we could create the default shader\n\t\tconst root = this.scene.root;\n\t\tconst mat_name = 'MAT';\n\t\tconst particles_mat_name = 'points_particles';\n\t\tconst MAT: MaterialsObjNode = root.nodes_by_type('materials')[0] || this.scene.root.create_node('materials');\n\t\tMAT.set_name(mat_name);\n\n\t\tconst create_points_mat = (MAT: MaterialsObjNode, name: string) => {\n\t\t\tlet points_mat = MAT.node('points_builder1') as PointsBuilderMatNode;\n\t\t\tif (!(points_mat && points_mat.type == PointsBuilderMatNode.type())) {\n\t\t\t\tpoints_mat = MAT.create_node('points_builder');\n\t\t\t}\n\t\t\tpoints_mat.set_name(name);\n\n\t\t\tlet points_mat_constant_point_size = points_mat.node('constant') as ConstantGlNode;\n\t\t\tif (!(points_mat_constant_point_size && points_mat_constant_point_size.type == ConstantGlNode.type())) {\n\t\t\t\tpoints_mat_constant_point_size = points_mat.create_node('constant');\n\t\t\t\tpoints_mat_constant_point_size.set_name('constant_point_size');\n\t\t\t}\n\t\t\tpoints_mat_constant_point_size.p.float.set(4); // to match the default point material\n\t\t\tconst points_mat_output1 = points_mat.node('output1');\n\t\t\tif (points_mat_output1) {\n\t\t\t\tpoints_mat_output1.set_input(\n\t\t\t\t\t'gl_PointSize',\n\t\t\t\t\tpoints_mat_constant_point_size,\n\t\t\t\t\tConstantGlNode.OUTPUT_NAME\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn points_mat;\n\t\t};\n\t\tconst points_mat = MAT.node(particles_mat_name) || create_points_mat(MAT, particles_mat_name);\n\t\tif (points_mat) {\n\t\t\tconst new_path = points_mat.full_path();\n\t\t\tif (this.p.material.raw_input != new_path) {\n\t\t\t\tthis.p.material.set(new_path);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n// import {GlobalsTextureHandler} from '../../Assembler/Globals/Texture';\n\nimport TemplateDefault from '../../templates/particles/Default.glsl';\n// import TemplatePosition from './Template/Particle/Position.glsl'\n// import TemplateVelocity from './Template/Particle/Velocity.glsl'\n// import TemplateAcceleration from './Template/Particle/Acceleration.glsl'\n\n// import {ShaderConfig} from './Config/ShaderConfig';\n// import {VariableConfig} from './Config/VariableConfig';\n// import {ShaderName, LineType} from '../../../../../Engine/Node/Gl/Assembler/Util/CodeBuilder';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {TextureAllocationsController} from '../../utils/TextureAllocationsController';\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {BaseGlNodeType} from '../../../_Base';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNodeTraverser} from '../../../../utils/shaders/NodeTraverser';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {GlobalsTextureHandler} from '../../globals/Texture';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\n\nexport class ShaderAssemblerParticles extends BaseGlShaderAssembler {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tget _template_shader() {\n\t\treturn undefined;\n\t}\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName) {\n\t\treturn TemplateDefault;\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tasync compile() {\n\t\tawait this.setup_shader_names_and_variables();\n\t\tawait this.update_shaders();\n\t}\n\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\tconst attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\tconst attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tasync setup_shader_names_and_variables() {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this, this._gl_parent_node);\n\t\tthis._leaf_nodes = node_traverser.leaves_from_nodes(this._root_nodes);\n\n\t\tfor (let node of this._root_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\tconsole.log('root and leaf:', this._root_nodes, this._leaf_nodes);\n\t\tthis._texture_allocations_controller = new TextureAllocationsController();\n\t\tthis._texture_allocations_controller.allocate_connections_from_root_nodes(this._root_nodes, this._leaf_nodes);\n\n\t\t// const globals_handler = new GlobalsTextureHandler()\n\t\t// this.set_assembler_globals_handler(globals_handler)\n\t\tif (this.globals_handler) {\n\t\t\t((<unknown>this.globals_handler) as GlobalsTextureHandler)?.set_texture_allocations_controller(\n\t\t\t\tthis._texture_allocations_controller\n\t\t\t);\n\t\t}\n\n\t\tthis._reset_shader_configs();\n\t}\n\tasync update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tconsole.log('this.shader_names', this.shader_names);\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tconsole.log(shader_name, lines.join('\\n'));\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.VECTOR3, 'position', [0, 0, 0]);\n\t\toutput_child.add_param(ParamType.VECTOR3, 'velocity', [0, 0, 0]);\n\t\t// output_child.add_param(ParamType.VECTOR3, 'accacceleration', [0, 0, 0]);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('velocity', ConnectionPointType.VEC3),\n\t\t\t// new TypedNamedConnectionPoint('acceleration', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tallow_attribute_exports() {\n\t\treturn true;\n\t}\n\n\tget texture_allocations_controller() {\n\t\treturn (this._texture_allocations_controller =\n\t\t\tthis._texture_allocations_controller || new TextureAllocationsController());\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn this._texture_allocations_controller?.create_shader_configs() || [];\n\t\t// [\n\t\t// \tnew ShaderConfig('position', ['position'], []),\n\t\t// \t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t// ]\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\t// new VariableConfig('position', {\n\t\t\t// \tdefault: 'vec3( position )',\n\t\t\t// \tprefix: 'vec3 transformed = '\n\t\t\t// }),\n\t\t];\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.texture_allocations_controller.shader_names() || [];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.texture_allocations_controller.input_names_for_shader_name(root_node, shader_name) || [];\n\t\t// return this.shader_config(shader_name).input_names()\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\tadd_export_body_line(\n\t\texport_node: BaseGlNodeType,\n\t\tinput_name: string,\n\t\tinput: BaseGlNodeType,\n\t\tvariable_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (input) {\n\t\t\tconst var_input = export_node.variable_for_input(input_name);\n\t\t\tconst new_var = ThreeToGl.vector3(var_input);\n\t\t\tif (new_var) {\n\t\t\t\tconst texture_variable = this.texture_allocations_controller.variable(variable_name);\n\n\t\t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\t\tconst component = texture_variable.component;\n\n\t\t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(export_node, [line], shader_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.texture_allocations_controller.input_names_for_shader_name(output_node, shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst variable_name = input_name;\n\t\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tvariable_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (attribute_node.is_importing) {\n\t\t\tconst gl_type = attribute_node.gl_type();\n\t\t\tconst attribute_name = attribute_node.attribute_name;\n\t\t\tconst new_value = this.globals_handler?.read_attribute(\n\t\t\t\tattribute_node,\n\t\t\t\tgl_type,\n\t\t\t\tattribute_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\n\t\t\t// re-export to ensure it is available on next frame\n\t\t\tconst texture_variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\tconst variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\t\tif (variable) {\n\t\t\t\t\tconst component = variable.component;\n\t\t\t\t\tconst body_line = `gl_FragColor.${component} = ${var_name}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this.add_import_body_line(\n\t\t\t// \tattribute_node,\n\t\t\t// \tshader_name,\n\t\t\t// \tAttribute.output_name(),\n\t\t\t// \tattribute_node.attribute_name()\n\t\t\t// \t)\n\t\t}\n\t\tif (attribute_node.is_exporting) {\n\t\t\tconst input = attribute_node.connected_input_node();\n\t\t\tif (input) {\n\t\t\t\tconst variable_name = attribute_node.attribute_name;\n\n\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\tattribute_node,\n\t\t\t\t\tattribute_node.input_name,\n\t\t\t\t\tinput,\n\t\t\t\t\tvariable_name,\n\t\t\t\t\tshaders_collection_controller\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tthis._handle_globals_time(globals_node, output_name, shaders_collection_controller);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._handle_globals_default(globals_node, output_name, shaders_collection_controller);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handle_globals_time(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst definition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst body_line = `float ${var_name} = ${output_name}`;\n\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\tthis.set_uniforms_time_dependent();\n\t}\n\n\tprivate _handle_globals_default(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst output_connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (output_connection_point) {\n\t\t\tconst gl_type = output_connection_point.type;\n\n\t\t\tconst attrib_read = this.globals_handler?.read_attribute(\n\t\t\t\tglobals_node,\n\t\t\t\tgl_type,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${attrib_read}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n}\n","export default \"#include <common>\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec2 particleUV = (gl_FragCoord.xy / resolution.xy);\\n\\n\\t// INSERT BODY\\n\\n}\"","import lodash_flatten from 'lodash/flatten';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_includes from 'lodash/includes';\nimport {TextureAllocation} from './TextureAllocation';\nimport {BaseGlNodeType} from '../../_Base';\n\n// import {TypedConnection, COMPONENTS_COUNT_BY_TYPE} from '../../../../../Engine/Node/Gl/GlData';\nimport {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {ShaderName, ParticleShaderNames} from '../../../utils/shaders/ShaderName';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ConnectionPointComponentsCountMap} from '../../../utils/connections/ConnectionPointType';\nimport {AttributeGlNode} from '../../Attribute';\nimport {BaseNamedConnectionPointType} from '../../../utils/connections/NamedConnectionPoint';\nimport {GlobalsGlNode} from '../../Globals';\n\nexport type TextureAllocationsControllerData = Dictionary<TextureVariableData[] | undefined>[];\n\nexport class TextureAllocationsController {\n\tprivate _allocations: TextureAllocation[] = [];\n\tprivate _next_allocation_index: number = 0;\n\n\tconstructor() {}\n\tallocate_connections_from_root_nodes(root_nodes: BaseGlNodeType[], leaf_nodes: BaseGlNodeType[]) {\n\t\t// const connections_by_node_id = {}\n\t\tconst variables = [];\n\n\t\t// TODO: let's go through the output node first, in case there is a name conflict, it will have priority\n\t\tfor (let node of root_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tfor (let connection_point of node.io.inputs.named_input_connection_points) {\n\t\t\t\t\t\tconst input = node.io.inputs.named_input(connection_point.name);\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\tconnection_point.name,\n\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attrib_node = node as AttributeGlNode;\n\t\t\t\t\tconst named_input: BaseGlNodeType | null = attrib_node.connected_input_node();\n\t\t\t\t\tconst connection_point:\n\t\t\t\t\t\t| BaseNamedConnectionPointType\n\t\t\t\t\t\t| undefined = attrib_node.connected_input_connection_point();\n\t\t\t\t\tif (named_input && connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattrib_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let node of leaf_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tconst globals_node = node as GlobalsGlNode;\n\t\t\t\t\tconst output_names_attributes = ['position', 'normal', 'color', 'uv'];\n\t\t\t\t\t// const output_names_not_attributes = ['frame', 'gl_FragCoord', 'gl_PointCoord'];\n\t\t\t\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\t\t\t\t// const is_attribute = !lodash_includes(output_names_not_attributes, output_name)\n\n\t\t\t\t\t\t// is_attribute, as opposed to frame, gl_FragCoord and gl_PointCoord which are either uniforms or provided by the renderer\n\t\t\t\t\t\tconst is_attribute = output_names_attributes.includes(output_name);\n\n\t\t\t\t\t\tif (is_attribute) {\n\t\t\t\t\t\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(\n\t\t\t\t\t\t\t\toutput_name\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[gl_type]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attribute_node = node as AttributeGlNode;\n\t\t\t\t\tconst connection_point = attribute_node.output_connection_point();\n\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_output)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattribute_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.allocate_variables(variables);\n\t}\n\tallocate_variables(variables: TextureVariable[]) {\n\t\tconst variables_by_size_inverse = lodash_sortBy(variables, (variable) => {\n\t\t\treturn -variable.size;\n\t\t});\n\t\tfor (let variable of variables_by_size_inverse) {\n\t\t\tthis.allocate_variable(variable);\n\t\t}\n\t}\n\tallocate_variable(new_variable: TextureVariable) {\n\t\tlet allocated = this.has_variable(new_variable.name);\n\t\tif (allocated) {\n\t\t\tconst allocated_variable = this.variables().filter((v) => v.name == new_variable.name)[0];\n\t\t\tnew_variable.graph_node_ids?.forEach((boolean, graph_node_id: string) => {\n\t\t\t\tallocated_variable.add_graph_node_id(graph_node_id);\n\t\t\t});\n\t\t} else {\n\t\t\tif (!allocated) {\n\t\t\t\tfor (let allocation of this._allocations) {\n\t\t\t\t\tif (!allocated && allocation.has_space_for_variable(new_variable)) {\n\t\t\t\t\t\tallocation.add_variable(new_variable);\n\t\t\t\t\t\tallocated = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!allocated) {\n\t\t\t\tconst new_allocation = new TextureAllocation(this.next_allocation_name());\n\t\t\t\tthis._allocations.push(new_allocation);\n\t\t\t\tnew_allocation.add_variable(new_variable);\n\t\t\t}\n\t\t}\n\t}\n\n\tnext_allocation_name(): ShaderName {\n\t\tconst name = ParticleShaderNames[this._next_allocation_index];\n\t\tthis._next_allocation_index += 1;\n\t\treturn name;\n\t}\n\n\tshader_names(): ShaderName[] {\n\t\tconst explicit_shader_names = this._allocations.map((a) => a.shader_name);\n\n\t\t// include dependencies if needed\n\t\t// TODO: typescript - do I need those?\n\t\t// if (lodash_includes(explicit_shader_names, 'acceleration')) {\n\t\t// \texplicit_shader_names.push('velocity');\n\t\t// }\n\t\t// if (lodash_includes(explicit_shader_names, 'velocity')) {\n\t\t// \texplicit_shader_names.push('position');\n\t\t// }\n\n\t\treturn lodash_uniq(explicit_shader_names);\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\t// new ShaderConfig('position', ['position'], []),\n\t\t\t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t];\n\t}\n\tallocation_for_shader_name(shader_name: ShaderName): TextureAllocation {\n\t\treturn this._allocations.filter((a) => a.shader_name == shader_name)[0];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\tconst allocation = this.allocation_for_shader_name(shader_name);\n\t\tif (allocation) {\n\t\t\treturn allocation.input_names_for_node(root_node);\n\t\t}\n\t}\n\t// find_variable(root_node: BaseNodeGl, shader_name: ShaderName, input_name: string): TextureVariable{\n\t// \tconst allocation = this.allocation_for_shader_name(shader_name)\n\t// \tif(allocation){\n\t// \t\treturn allocation.find_variable_with_node(root_node, input_name)\n\t// \t}\n\t// }\n\tvariable(variable_name: string): TextureVariable | undefined {\n\t\tfor (let allocation of this._allocations) {\n\t\t\tconst variable = allocation.variable(variable_name);\n\t\t\tif (variable) {\n\t\t\t\treturn variable;\n\t\t\t}\n\t\t}\n\t}\n\tvariables(): TextureVariable[] {\n\t\treturn lodash_flatten(this._allocations.map((a) => a.variables || []));\n\t}\n\thas_variable(name: string): boolean {\n\t\tconst names = this.variables().map((v) => v.name);\n\t\treturn lodash_includes(names, name);\n\t}\n\t// allocation_for_variable(name:string):TextureAllocation{\n\t// \tfor(let allocation of this._allocations){\n\t// \t\tconst variables = allocation.variables()\n\t// \t\tfor(let variable of variables){\n\t// \t\t\tif(variable.name() == name){\n\t// \t\t\t\treturn allocation\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tto_json(scene: PolyScene): TextureAllocationsControllerData {\n\t\treturn this._allocations.map((allocation: TextureAllocation) => {\n\t\t\tconst data = {\n\t\t\t\t[allocation.texture_name]: allocation.to_json(scene),\n\t\t\t};\n\t\t\treturn data;\n\t\t});\n\t}\n\tprint(scene: PolyScene) {\n\t\tconsole.log(JSON.stringify(this.to_json(scene), [''], 2));\n\t}\n}\n","import {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {BaseGlNodeType} from '../../_Base';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class TextureAllocation {\n\tprivate _variables: TextureVariable[] | undefined;\n\tprivate _size: number = 0;\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tadd_variable(variable: TextureVariable) {\n\t\tthis._variables = this._variables || [];\n\t\tthis._variables.push(variable);\n\t\tvariable.set_position(this._size);\n\t\tvariable.set_allocation(this);\n\t\tthis._size += variable.size;\n\t}\n\n\thas_space_for_variable(variable: TextureVariable): boolean {\n\t\treturn this._size + variable.size <= 4;\n\t}\n\tget shader_name() {\n\t\treturn this._shader_name; //this._variables[0].name()\n\t}\n\tget texture_name(): string {\n\t\treturn `texture_${this._shader_name}`;\n\t}\n\n\tget variables(): TextureVariable[] | undefined {\n\t\treturn this._variables;\n\t}\n\tvariables_for_input_node(root_node: BaseGlNodeType): TextureVariable[] | undefined {\n\t\treturn this._variables?.filter((variable) => variable.graph_node_ids?.has(root_node.graph_node_id) || false);\n\t}\n\tinput_names_for_node(root_node: BaseGlNodeType): string[] | undefined {\n\t\treturn this.variables_for_input_node(root_node)?.map((v) => v.name);\n\t}\n\t// find_variable_with_node(root_node: BaseNodeGl, input_name: string): TextureVariable{\n\t// \treturn this.variables_for_input_node(root_node).filter(v=>v.name() == input_name)[0]\n\t// }\n\t// find_variable_without_node(input_name: string): TextureVariable{\n\t// \treturn this._variables.filter(v=>v.name() == input_name)[0]\n\t// }\n\tvariable(variable_name: string) {\n\t\tif (this._variables) {\n\t\t\tfor (let variable of this._variables) {\n\t\t\t\tif (variable.name == variable_name) {\n\t\t\t\t\treturn variable;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tto_json(scene: PolyScene): TextureVariableData[] | undefined {\n\t\treturn this._variables?.map((v) => v.to_json(scene));\n\t\t// for(let variable of this._variables){\n\t\t// \tdata[variable.name()] = variable.to_json(scene)\n\t\t// }\n\t\t// return data\n\t}\n}\n","import {TextureAllocation} from './TextureAllocation';\nimport {PolyScene} from '../../../../scene/PolyScene';\n\nexport interface TextureVariableData {\n\tname: string;\n\tnodes: string[];\n}\n\nexport class TextureVariable {\n\tprivate _allocation: TextureAllocation | undefined;\n\tprivate _position: number = -1;\n\n\tprivate _graph_node_ids: Map<string, boolean> | undefined;\n\n\tconstructor(private _name: string, private _size: number) {\n\t\tif (!_name) {\n\t\t\tthrow 'TextureVariable requires a name';\n\t\t}\n\t}\n\n\tset_allocation(allocation: TextureAllocation) {\n\t\tthis._allocation = allocation;\n\t}\n\tget allocation() {\n\t\treturn this._allocation;\n\t}\n\n\tget graph_node_ids() {\n\t\treturn this._graph_node_ids;\n\t}\n\tadd_graph_node_id(id: string) {\n\t\tthis._graph_node_ids = this._graph_node_ids || new Map();\n\t\tthis._graph_node_ids.set(id, true);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\n\tset_position(position: number) {\n\t\tthis._position = position;\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget component(): string {\n\t\treturn 'xyzw'\n\t\t\t.split('')\n\t\t\t.splice(this._position, this._size)\n\t\t\t.join('');\n\t}\n\tto_json(scene: PolyScene): TextureVariableData {\n\t\tconst names: string[] = [];\n\t\tif (this._graph_node_ids) {\n\t\t\tthis._graph_node_ids.forEach((boolean, node_id: string) => {\n\t\t\t\tconst name = scene.graph.node_from_id(node_id).name;\n\t\t\t\tnames.push(name);\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tnodes: names.sort(),\n\t\t};\n\t}\n}\n","import lodash_cloneDeep from 'lodash/cloneDeep';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {BaseNodeSop} from '../_Base'\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseBuilderMatNodeType} from '../../../mat/_BaseBuilder';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\n\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from '../../../../../core/geometry/Material';\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {TextureAllocationsControllerData} from '../../../gl/code/utils/TextureAllocationsController';\n\nexport class ParticlesSystemGpuRenderController {\n\tprivate _render_material: ShaderMaterial | undefined;\n\tprotected _particles_group_objects: Object3D[] = [];\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprivate _texture_allocations_json: TextureAllocationsControllerData | undefined;\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// _create_render_params() {\n\t// \tthis.self.within_param_folder(\"setup\", () => {\n\t// \t\tthis.self.add_param(ParamType.OPERATOR_PATH, \"material\", \"\", {\n\t// \t\t\tnode_selection: {\n\t// \t\t\t\tcontext: NodeContext.MAT\n\t// \t\t\t},\n\t// \t\t\tdependent_on_found_node: false\n\t// \t\t});\n\t// \t});\n\t// }\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_render_material();\n\t}\n\n\tassign_render_material() {\n\t\tif (!this._render_material) {\n\t\t\t// throw 'cannot assign non existing material';\n\t\t\treturn;\n\t\t}\n\t\tfor (let object3d of this._particles_group_objects) {\n\t\t\tconst object = object3d as Mesh;\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.material = this._render_material;\n\t\t\t\tCoreMaterial.apply_custom_materials(object, this._render_material as ShaderMaterialWithCustomMaterials);\n\t\t\t\tobject.matrixAutoUpdate = false;\n\t\t\t\tobject.updateMatrix();\n\t\t\t}\n\t\t}\n\t\t// if this material is recomputed on a frame after the frame_start\n\t\t// we need to:\n\t\t// - mark the material as needsUpdate (to ensure it gets recompiled by the renderer)\n\t\t// - update the uniforms (to ensure the material gets the right values, as the uniforms have been reset)\n\t\tthis._render_material.needsUpdate = true;\n\t\tthis.update_render_material_uniforms();\n\t}\n\tupdate_render_material_uniforms() {\n\t\tif (!this._render_material) {\n\t\t\treturn;\n\t\t}\n\t\t// if (!this.self._gpu_compute) {\n\t\t// \treturn;\n\t\t// }\n\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis._shaders_by_name?.forEach((string, shader_name) => {\n\t\t\tconst texture = this.node.gpu_controller.getCurrentRenderTarget(shader_name)?.texture;\n\t\t\tif (texture) {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tthis._render_material.uniforms[uniform_name].value = texture;\n\t\t\t\t\tCoreMaterial.assign_custom_uniforms(this._render_material, uniform_name, texture);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// console.log(this._render_material.vertexShader);\n\t\t// console.log(this._render_material.fragmentShader);\n\t}\n\n\treset_render_material() {\n\t\tthis._render_material = undefined;\n\t\tthis._particles_group_objects = []; //this._particles_core_group.objects()\n\t}\n\tget initialized(): boolean {\n\t\treturn this._render_material != null;\n\t}\n\n\tinit_core_group(core_group: CoreGroup) {\n\t\tfor (let child of core_group.objects()) {\n\t\t\tthis._particles_group_objects.push(child);\n\t\t}\n\t}\n\tasync init_render_material() {\n\t\t// if (this.self.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\tif (this._render_material) {\n\t\t\treturn;\n\t\t}\n\n\t\t// const uniforms_particles = {\n\t\t// \t\"texture_position\": { value: null },\n\t\t// \t// \"debugX\": { value: 0 },\n\t\t// \t// \"textureVelocity\": { value: null },\n\t\t// \t// \"cameraConstant\": { value: 1 }, //( camera ) },\n\t\t// \t// \"density\": { value: 1.0 }\n\t\t// };\n\n\t\t// ShaderMaterial\n\t\tif (this.node.p.material.is_dirty) {\n\t\t\tawait this.node.p.material.compute();\n\t\t}\n\t\tconst mat_node = this.node.p.material.found_node() as BaseBuilderMatNodeType; // TODO: typescript - ensure node selection is safe, as it would currently crash with a non builder mat selected\n\n\t\tif (mat_node) {\n\t\t\tconst new_texture_allocations_json: TextureAllocationsControllerData = this.node.assembler_controller.assembler.texture_allocations_controller.to_json(\n\t\t\t\tthis.node.scene\n\t\t\t);\n\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.UV_VARYING);\n\t\t\tglobals_handler.set_texture_allocations_controller(\n\t\t\t\tthis.node.assembler_controller.assembler.texture_allocations_controller\n\t\t\t);\n\t\t\tmat_node.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tif (\n\t\t\t\t!this._texture_allocations_json ||\n\t\t\t\tJSON.stringify(this._texture_allocations_json) != JSON.stringify(new_texture_allocations_json)\n\t\t\t) {\n\t\t\t\t// we need to set the node to dirty if a recompile is needed\n\t\t\t\t// otherwise it won't cook\n\t\t\t\t// but we also need to check if the texture_allocation has changed,\n\t\t\t\t// otherwise we'll have an infinite loop\n\t\t\t\tthis._texture_allocations_json = lodash_cloneDeep(new_texture_allocations_json);\n\t\t\t\tmat_node.set_dirty();\n\t\t\t}\n\t\t\t// set compilation required in case the texture allocation has changed\n\t\t\t// but not needed as it is done by set_assembler_globals_handler\n\t\t\t//found_node.set_compilation_required() //_and_dirty()\n\t\t\tconst container = await mat_node.request_container();\n\t\t\tthis._render_material = container.material() as ShaderMaterial; //.clone()\n\t\t\t// this._render_material.needsUpdate = true\n\t\t\t// this.self._assembler.texture_allocations_controller().print()\n\t\t\t// throw \"DEBUGGIN...\"\n\t\t} else {\n\t\t\tthis.node.states.error.set('render material not valid');\n\t\t\t// this._render_material = this._render_material || new ShaderMaterial( {\n\t\t\t// \tuniforms: {},\n\t\t\t// \tvertexShader: particleVertexShader,\n\t\t\t// \tfragmentShader: particleFragmentShader\n\t\t\t// } );\n\t\t}\n\n\t\t// add uniforms\n\t\tif (this._render_material) {\n\t\t\tconst uniforms = this._render_material.uniforms;\n\t\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tconst uniform_value = {value: null};\n\t\t\t\tuniforms[uniform_name] = uniform_value;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tCoreMaterial.init_custom_material_uniforms(this._render_material, uniform_name, uniform_value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// this._render_material.extensions.drawBuffers = true;\n\t\tthis.assign_render_material();\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2';\n\nimport {MathUtils} from 'three/src/math/MathUtils';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\n// import {BaseNodeSop} from '../_Base'\n\n// import {CoreConstant} from '../../../../../Core/Geometry/Constant'\n\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {CoreMath} from '../../../../../core/math/_Module';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\nimport {GPUComputationRenderer} from './GPUComputationRenderer';\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {POLY} from '../../../../Poly';\nimport {CorePoint} from '../../../../../core/geometry/Point';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\ninterface GPUComputationRendererVariable {\n\tname: string;\n\trenderTargets: WebGLRenderTarget[];\n\tmaterial: ShaderMaterial;\n}\ninterface GPUComputationRenderer {\n\tnew (x: number, y: number, renderer: WebGLRenderer): GPUComputationRenderer;\n\tcompute(): void;\n\tinit(): string | null;\n\taddVariable(name: string, fragment_shader: string, variable: DataTexture): GPUComputationRendererVariable;\n\tsetVariableDependencies(variable: GPUComputationRendererVariable, vars: GPUComputationRendererVariable[]): void;\n\trenderTexture(texture: DataTexture, render_target: WebGLRenderTarget): void;\n\tcreateTexture(): DataTexture;\n\tgetCurrentRenderTarget(variable: GPUComputationRendererVariable): WebGLRenderTarget;\n}\n\nexport class ParticlesSystemGpuComputeController {\n\tprotected _gpu_compute: GPUComputationRenderer | undefined;\n\tprotected _simulation_restart_required: boolean = false;\n\n\tprotected _renderer: WebGLRenderer | undefined;\n\t// private _particles_group: CoreGroup\n\n\tprotected _particles_core_group: CoreGroup | undefined;\n\tprotected _points: CorePoint[] = [];\n\n\tprivate variables_by_name: Map<ShaderName, GPUComputationRendererVariable> = new Map();\n\tprivate _created_textures_by_name: Map<ShaderName, DataTexture> = new Map();\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprotected _last_simulated_frame: number | undefined;\n\t// private _use_instancing: boolean = false\n\n\t// private _param_auto_textures_size: boolean;\n\t// private _param_max_textures_size: Vector2;\n\t// private _param_textures_sizes: Vector2;\n\tprivate _used_textures_size: Vector2 = new Vector2();\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// protected _create_gpu_compute_params() {\n\t// \tthis.self.within_param_folder('setup', () => {\n\t// \t\tthis.self.add_param(ParamType.INTEGER, 'start_frame', 1, {\n\t// \t\t\trange: [1, 100],\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.TOGGLE, 'auto_textures_size', 1);\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'max_textures_size', [1024, 1024], {\n\t// \t\t\tvisible_if: {auto_textures_size: 1},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'textures_size', [64, 64], {\n\t// \t\t\tvisible_if: {auto_textures_size: 0},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.BUTTON, 'reset', '', {\n\t// \t\t\tcallback: this._reset_gpu_compute_and_set_dirty.bind(this),\n\t// \t\t});\n\t// \t});\n\t// \t// this.self.add_param(ParamType.BUTTON, 'force_compute', '', {callback: this._force_compute.bind(this)})\n\t// }\n\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_gpu_compute();\n\t}\n\tasync init(core_group: CoreGroup) {\n\t\tthis.init_particle_group_points(core_group);\n\t\tawait this.create_gpu_compute();\n\t}\n\n\tgetCurrentRenderTarget(shader_name: ShaderName) {\n\t\tconst variable = this.variables_by_name.get(shader_name);\n\t\tif (variable) {\n\t\t\treturn this._gpu_compute?.getCurrentRenderTarget(variable);\n\t\t}\n\t}\n\n\tinit_particle_group_points(core_group: CoreGroup) {\n\t\tthis.reset_gpu_compute();\n\n\t\tif (!core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._particles_core_group = core_group;\n\t\t// this._particles_group_objects = []; //this._particles_core_group.objects()\n\n\t\t// in order to have proper copy on each children, I need to do .push for each\n\t\t// and not just my_array = group.children, as the array would then be empty\n\t\t// after have done .set_group(group)\n\t\t// I may need to rethink the whole\n\t\t// for (let child of this._particles_core_group.objects()) {\n\t\t// \tthis._particles_group_objects.push(child);\n\t\t// }\n\t\t// this._particles_core_group = new CoreGroup(this._particles_group)\n\t\tthis._points = this._get_points() || [];\n\t}\n\n\tcompute_similation_if_required() {\n\t\tconst frame = this.node.scene.frame;\n\t\tconst start_frame: number = this.node.pv.start_frame;\n\t\tif (frame >= start_frame) {\n\t\t\tif (this._last_simulated_frame == null) {\n\t\t\t\tthis._last_simulated_frame = start_frame - 1;\n\t\t\t}\n\t\t\tif (frame > this._last_simulated_frame) {\n\t\t\t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _compute_simulation(count = 1) {\n\t\tif (!this._gpu_compute) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update_simulation_material_uniforms();\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tthis._gpu_compute.compute();\n\t\t}\n\t\tthis.node.render_controller.update_render_material_uniforms();\n\t\tthis._last_simulated_frame = this.node.scene.frame;\n\n\t\t// this._renderer.render(this._gpu_scene, this._gpu_camera)\n\t}\n\n\tasync create_gpu_compute() {\n\t\tif (this.node.pv.auto_textures_size) {\n\t\t\tconst nearest_power_of_two = CoreMath.nearestPower2(Math.sqrt(this._points.length));\n\t\t\tthis._used_textures_size.x = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.x);\n\t\t\tthis._used_textures_size.y = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.y);\n\t\t} else {\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.x) &&\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.y)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.node.states.error.set('texture size must be a power of 2');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max_particles_count = this.node.pv.textures_size.x * this.node.pv.textures_size.y;\n\t\t\tif (this._points.length > max_particles_count) {\n\t\t\t\tthis.node.states.error.set(\n\t\t\t\t\t`max particles is set to (${this.node.pv.textures_size.x}x${this.node.pv.textures_size.y}=) ${max_particles_count}`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._used_textures_size.copy(this.node.pv.textures_size);\n\t\t}\n\n\t\tthis.node.states.time_dependent.force_time_dependent();\n\t\tthis._init_particles_uvs();\n\t\t// we need to recreate the material if the texture allocation changes\n\t\tthis.node.render_controller.reset_render_material();\n\t\t// await this.node.render_controller.init_render_material();\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer(); //new WebGLRenderer();\n\t\tif (renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t} else {\n\t\t\tthis.node.states.error.set('no renderer found');\n\t\t}\n\t\t// console.log(this._renderer.extensions, this._renderer.capabilities)\n\t\t// if(!this._renderer.extensions.get( 'WEBGL_draw_buffers' )){\n\t\t// \tthis.self.set_error(\"this operator requires the browser extension WEBGL_draw_buffers\")\n\t\t// \talert(\"no extension found\")\n\t\t// \treturn\n\t\t// }\n\t\t// this._renderer = new WebGLRenderer();\n\t\t// this._gpu_scene = new Scene()\n\t\t// this._gpu_camera = new Camera()\n\t\t// this._renderer.setPixelRatio( window.devicePixelRatio );\n\t\t// this._renderer.setSize( this.node.pv.textures_size.x, this.node.pv.textures_size.y );\n\n\t\tconst compute = new GPUComputationRenderer(\n\t\t\tthis._used_textures_size.x,\n\t\t\tthis._used_textures_size.y,\n\t\t\tthis._renderer\n\t\t);\n\t\tthis._gpu_compute = (<unknown>compute) as GPUComputationRenderer;\n\n\t\tif (!this._gpu_compute) {\n\t\t\tthis.node.states.error.set('failed to create the GPUComputationRenderer');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._last_simulated_frame = undefined;\n\n\t\t// document.body.style = ''\n\t\t// document.body.appendChild( renderer.domElement );\n\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.renderTargets[0].dispose();\n\t\t\tvariable.renderTargets[1].dispose();\n\t\t\tthis.variables_by_name.delete(shader_name);\n\t\t});\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tconst all_variables: GPUComputationRendererVariable[] = [];\n\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tconst variable = this._gpu_compute.addVariable(\n\t\t\t\t\t`texture_${shader_name}`,\n\t\t\t\t\tshader,\n\t\t\t\t\tthis._created_textures_by_name.get(shader_name)!\n\t\t\t\t);\n\t\t\t\tthis.variables_by_name.set(shader_name, variable);\n\t\t\t\tall_variables.push(variable);\n\t\t\t}\n\t\t});\n\n\t\t// this._gpu_compute.setVariableDependencies( this.var_v, [ this.var_P, this.var_v ] );\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis.variables_by_name?.forEach((variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._gpu_compute.setVariableDependencies(\n\t\t\t\t\tvariable,\n\t\t\t\t\tall_variables // currently all depend on all\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis._create_texture_render_targets();\n\t\tthis._fill_textures();\n\t\tthis.create_simulation_material_uniforms();\n\n\t\tvar error = this._gpu_compute.init();\n\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tthis.node.states.error.set(error);\n\t\t}\n\t}\n\n\tprivate create_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst uniforms = variable.material.uniforms;\n\t\t\tuniforms['frame'] = {value: this.node.scene.frame};\n\n\t\t\tfor (let param_config of this.node.assembler_controller.assembler.param_configs()) {\n\t\t\t\tuniforms[param_config.uniform_name] = param_config.uniform;\n\t\t\t}\n\t\t});\n\t}\n\tprivate update_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.material.uniforms['frame'].value = this.node.scene.frame;\n\t\t});\n\t}\n\n\tprivate _init_particles_uvs() {\n\t\t// var uvs = new Float32Array( this.node.pv.textures_size.x * this.node.pv.textures_size.y * 2 );\n\t\tvar uvs = new Float32Array(this._points.length * 2);\n\t\t// const rows_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.y, (points.length / this.node.pv.textures_size.y)\n\t\t// ))\n\t\t// const columns_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.x, (points.length / rows_count)\n\t\t// ))\n\t\tlet p = 0;\n\t\tvar cmptr = 0;\n\t\tfor (var j = 0; j < this._used_textures_size.x; j++) {\n\t\t\tfor (var i = 0; i < this._used_textures_size.y; i++) {\n\t\t\t\tuvs[p++] = i / (this._used_textures_size.x - 1);\n\t\t\t\tuvs[p++] = j / (this._used_textures_size.y - 1);\n\n\t\t\t\tcmptr += 2;\n\t\t\t\tif (cmptr >= uvs.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uv_attrib_name = GlobalsTextureHandler.UV_ATTRIB;\n\t\tif (this._particles_core_group) {\n\t\t\tfor (let core_geometry of this._particles_core_group.core_geometries()) {\n\t\t\t\t// geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\t\tconst geometry = core_geometry.geometry();\n\t\t\t\tconst attribute_constructor = core_geometry.marked_as_instance()\n\t\t\t\t\t? InstancedBufferAttribute\n\t\t\t\t\t: BufferAttribute;\n\t\t\t\tgeometry.setAttribute(uv_attrib_name, new attribute_constructor(uvs, 2));\n\t\t\t}\n\t\t}\n\t}\n\n\tcreated_textures_by_name() {\n\t\treturn this._created_textures_by_name;\n\t}\n\n\tprivate _fill_textures() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\tconst assembler = this.node.assembler_controller.assembler;\n\t\t\tconst texture_allocations_controller = assembler.texture_allocations_controller;\n\n\t\t\tconst texture_allocation = texture_allocations_controller.allocation_for_shader_name(shader_name);\n\t\t\tif (!texture_allocation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texture_variables = texture_allocation.variables;\n\t\t\tif (!texture_variables) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst array = texture.image.data;\n\n\t\t\tfor (let texture_variable of texture_variables) {\n\t\t\t\tconst texture_position = texture_variable.position;\n\t\t\t\tlet variable_name = texture_variable.name;\n\t\t\t\t// if(this._use_instancing){\n\t\t\t\t// \tvariable_name = GlobalsTextureHandler.variable_name_to_instance_attrib(variable_name)\n\t\t\t\t// }\n\n\t\t\t\tconst first_point = this._points[0];\n\t\t\t\tif (first_point) {\n\t\t\t\t\tconst has_attrib = first_point.has_attrib(variable_name);\n\t\t\t\t\tif (has_attrib) {\n\t\t\t\t\t\tconst attrib_size = first_point.attrib_size(variable_name);\n\t\t\t\t\t\tlet cmptr = texture_position;\n\t\t\t\t\t\tfor (let point of this._points) {\n\t\t\t\t\t\t\tif (attrib_size == 1) {\n\t\t\t\t\t\t\t\tconst val = point.attrib_value(variable_name);\n\t\t\t\t\t\t\t\tarray[cmptr] = val;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpoint.attrib_value(variable_name).toArray(array, cmptr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcmptr += 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// var posArray = texture_P.image.data;\n\t\t// var velArray = texture_v.image.data;\n\n\t\t// let cmptr = 0\n\t\t// for(let point of points){\n\t\t// \tpoint.position().toArray(posArray, cmptr)\n\t\t// \tposArray[ cmptr + 3 ] = 1;\n\t\t// \tcmptr += 4\n\t\t// }\n\t}\n\n\treset_gpu_compute() {\n\t\tthis._gpu_compute = undefined;\n\t\tthis._simulation_restart_required = true;\n\t}\n\tset_restart_not_required() {\n\t\tthis._simulation_restart_required = false;\n\t}\n\treset_gpu_compute_and_set_dirty() {\n\t\tthis.reset_gpu_compute();\n\t\tthis.node.set_dirty();\n\t}\n\treset_particle_groups() {\n\t\t// this._particles_group = null\n\t\t// this._particles_group_objects = [];\n\t\tthis._particles_core_group = undefined;\n\t}\n\tget initialized(): boolean {\n\t\treturn this._particles_core_group != null && this._gpu_compute != null;\n\t}\n\t// private _force_compute(){\n\t// \tthis.self.run_assembler()\n\t// }\n\n\tprivate _create_texture_render_targets() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\ttexture.dispose();\n\t\t});\n\n\t\tthis._created_textures_by_name.clear();\n\t\tthis.variables_by_name.forEach((texture_variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._created_textures_by_name.set(shader_name, this._gpu_compute.createTexture());\n\t\t\t}\n\t\t});\n\t}\n\trestart_simulation_if_required() {\n\t\tif (this._simulation_restart_required) {\n\t\t\tthis._restart_simulation();\n\t\t}\n\t}\n\tprivate _restart_simulation() {\n\t\tthis._last_simulated_frame = undefined;\n\n\t\tthis._create_texture_render_targets();\n\t\tconst points = this._get_points(); // TODO: typescript - not sure that's right\n\t\tif (!points) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._fill_textures();\n\n\t\t// for (let variable_name of Object.keys(this.variables_by_name)) {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst texture = this._created_textures_by_name.get(shader_name);\n\t\t\tif (this._gpu_compute && texture) {\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[0]);\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[1]);\n\t\t\t}\n\t\t});\n\t}\n\n\t// if we have a mix of marked_as_instance and non marked_as_instance\n\t// we take all geos that are the type that comes first\n\tprivate _get_points() {\n\t\tif (!this._particles_core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet geometries = this._particles_core_group.core_geometries();\n\t\tconst first_geometry = geometries[0];\n\t\tif (first_geometry) {\n\t\t\tconst type = first_geometry.marked_as_instance();\n\t\t\t// this._use_instancing = type\n\t\t\tconst selected_geometries = [];\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tif (geometry.marked_as_instance() == type) {\n\t\t\t\t\tselected_geometries.push(geometry);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst points = [];\n\t\t\tfor (let geometry of selected_geometries) {\n\t\t\t\tfor (let point of geometry.points()) {\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn points;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","/**\n * @author yomboprime https://github.com/yomboprime\n *\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n*/\n\nimport {Camera} from 'three/src/cameras/Camera'\nimport {ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat} from 'three/src/constants'\nimport {DataTexture} from 'three/src/textures/DataTexture'\nimport {Mesh} from 'three/src/objects/Mesh'\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry'\nimport {Scene} from 'three/src/scenes/Scene'\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial'\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget'\n// const THREE = {Camera, ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat, DataTexture, mesh, PlaneBufferGeometry, Scene, ShaderMaterial, WebGLRenderTarget}\n\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\n\n\tthis.variables = [];\n\n\tthis.currentTextureIndex = 0;\n\n\tvar scene = new Scene();\n\n\tvar camera = new Camera();\n\tcamera.position.z = 1;\n\n\tvar passThruUniforms = {\n\t\tpassThruTexture: { value: null }\n\t};\n\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\n\tscene.add( mesh );\n\n\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\n\n\t\tvar variable = {\n\t\t\tname: variableName,\n\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\tmaterial: material,\n\t\t\tdependencies: null,\n\t\t\trenderTargets: [],\n\t\t\twrapS: null,\n\t\t\twrapT: null,\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t};\n\n\t\tthis.variables.push( variable );\n\n\t\treturn variable;\n\n\t};\n\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\tvariable.dependencies = dependencies;\n\n\t};\n\n\tthis.init = function () {\n\n\t\tif ( ! renderer.capabilities.isWebGL2 &&\n\t\t\t ! renderer.extensions.get( \"OES_texture_float\" ) ) {\n\n\t\t\treturn \"No OES_texture_float support for float textures.\";\n\n\t\t}\n\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\treturn \"No support for vertex shader textures.\";\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\tvar material = variable.material;\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\t// material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\treturn null;\n\n\t};\n\n\tthis.compute = function () {\n\n\t\tvar currentTextureIndex = this.currentTextureIndex;\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Sets texture dependencies uniforms\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tvar uniforms = variable.material.uniforms;\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Performs the computation for this variable\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t}\n\n\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t};\n\n\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t};\n\n\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t};\n\n\tfunction addResolutionDefine( materialShader ) {\n\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\n\n\t}\n\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t// The following functions can be used to compute things manually\n\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\tuniforms = uniforms || {};\n\n\t\tvar material = new ShaderMaterial( {\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\tfragmentShader: computeFragmentShader\n\t\t} );\n\n\t\taddResolutionDefine( material );\n\n\t\treturn material;\n\n\t}\n\n\tthis.createShaderMaterial = createShaderMaterial;\n\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\twrapS = wrapS || ClampToEdgeWrapping;\n\t\twrapT = wrapT || ClampToEdgeWrapping;\n\n\t\tminFilter = minFilter || NearestFilter;\n\t\tmagFilter = magFilter || NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false\n\t\t} );\n\n\t\treturn renderTarget;\n\n\t};\n\n\tthis.createTexture = function () {\n\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\n\n\t};\n\n\tthis.renderTexture = function ( input, output ) {\n\n\t\t// Takes a texture, and render out in rendertarget\n\t\t// input = Texture\n\t\t// output = RenderTarget\n\n\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t};\n\n\tthis.doRenderTarget = function ( material, output ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tmesh.material = material;\n\t\trenderer.setRenderTarget( output );\n\t\trenderer.render( scene, camera );\n\t\tmesh.material = passThruShader;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\t// Shaders\n\n\tfunction getPassThroughVertexShader() {\n\n\t\treturn\t\"void main()\t{\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n\tfunction getPassThroughFragmentShader() {\n\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"void main() {\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n};\n\nexport { GPUComputationRenderer };\n","import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst POSITION = 'position';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PeakSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1, {range: [-1, 1]});\n}\nconst ParamsConfig = new PeakSopParamsConfig();\n\nexport class PeakSopNode extends TypedSopNode<PeakSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'peak';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tlet core_geometry, point;\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((child_object) => {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = (child_object as Mesh).geometry as BufferGeometry) != null) {\n\t\t\t\t\tcore_geometry = new CoreGeometry(geometry);\n\t\t\t\t\tfor (point of core_geometry.points()) {\n\t\t\t\t\t\tconst normal = point.normal();\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tconst new_position = position.clone().add(normal.multiplyScalar(this.pv.amount));\n\t\t\t\t\t\tpoint.set_position(new_position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\t\t\tconst attrib = core_geometry.geometry().getAttribute(POSITION) as BufferAttribute;\n\t\t\t\t\t\tattrib.needsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst ROTATE_START = new Vector3(0, 0, 1);\nconst ROTATE_END = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\tuse_segments_count = ParamConfig.BOOLEAN(0);\n\tstep_size = ParamConfig.FLOAT(1, {visible_if: {use_segments_count: 0}});\n\tsegments = ParamConfig.VECTOR2([1, 1], {visible_if: {use_segments_count: 1}});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\n\nexport class PlaneSopNode extends TypedSopNode<PlaneSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'plane';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create plane from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\t_cook_without_input() {\n\t\tconst geometry = this._create_plane(this.pv.size);\n\n\t\t// convert to buffer geo, as some render problems can occur otherwise\n\t\t// geometry = BufferGeometryUtils.mergeBufferGeometries([geometry])\n\t\t// console.log(geometry, geometry.isBufferGeometry)\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tconst matrix = this._core_transform.translation_matrix(this.pv.center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\tthis.set_geometry(geometry);\n\t}\n\t_cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = new Vector3();\n\t\tbbox.getSize(size);\n\t\tconst center = new Vector3();\n\t\tbbox.getCenter(center);\n\n\t\t// TODO: rotate the input geo to get the accurate bbox\n\t\tconst size2d = new Vector2(size.x, size.z);\n\t\tconst geometry = this._create_plane(size2d);\n\n\t\tthis._core_transform.rotate_geometry(geometry, ROTATE_START, ROTATE_END);\n\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t_create_plane(size: Vector2) {\n\t\tlet segments_count;\n\t\tsize = size.clone();\n\t\tif (this.pv.use_segments_count) {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(this.pv.segments.x),\n\t\t\t\ty: Math.floor(this.pv.segments.y),\n\t\t\t};\n\t\t} else {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(size.x / this.pv.step_size),\n\t\t\t\ty: Math.floor(size.y / this.pv.step_size),\n\t\t\t};\n\t\t\tsize.x = segments_count.x * this.pv.step_size;\n\t\t\tsize.y = segments_count.y * this.pv.step_size;\n\t\t}\n\t\treturn new PlaneBufferGeometry(size.x, size.y, segments_count.x, segments_count.y);\n\t}\n}\n","// import lodash_map from 'lodash/map'\n\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BooleanParam} from '../../params/Boolean';\nimport {FloatParam} from '../../params/Float';\n\nconst POSITION_ATTRIB_NAME = 'position';\n\ntype ValueArrayByName = Map<string, number[]>;\ntype ComponentOffset = 0 | 1 | 2;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PointSopParamsConfig extends NodeParamsConfig {\n\tupdate_x = ParamConfig.BOOLEAN(0);\n\tx = ParamConfig.FLOAT('@P.x', {\n\t\tvisible_if: {update_x: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0);\n\ty = ParamConfig.FLOAT('@P.y', {\n\t\tvisible_if: {update_y: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0);\n\tz = ParamConfig.FLOAT('@P.z', {\n\t\tvisible_if: {update_z: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new PointSopParamsConfig();\n\nexport class PointSopNode extends TypedSopNode<PointSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to move'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('dot-circle');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tawait this._eval_expressions_for_core_group(core_group);\n\t}\n\n\t// group.traverse (object)=>\n\t// \tif (geometry = object.geometry)?\n\t// \t\tthis._eval_expressions(geometry)\n\t// \t\tgeometry.computeVertexNormals()\n\n\tasync _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\t// this._allocate_arrays(core_objects)\n\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\n\t\tif (this.pv.update_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\n\t\tconst geometries = core_group.geometries();\n\t\tfor (let geometry of geometries) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tconst attrib = geometry.getAttribute(POSITION_ATTRIB_NAME) as BufferAttribute;\n\t\t\t\tattrib.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(POSITION_ATTRIB_NAME).array as number[];\n\n\t\tconst tmp_array_x = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_x,\n\t\t\tthis.p.x,\n\t\t\tthis.pv.x,\n\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t0\n\t\t);\n\t\tconst tmp_array_y = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_y,\n\t\t\tthis.p.y,\n\t\t\tthis.pv.y,\n\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t1\n\t\t);\n\t\tconst tmp_array_z = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_z,\n\t\t\tthis.p.z,\n\t\t\tthis.pv.z,\n\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t2\n\t\t);\n\n\t\tif (tmp_array_x) {\n\t\t\tthis._commit_tmp_values(tmp_array_x, array, 0);\n\t\t}\n\t\tif (tmp_array_y) {\n\t\t\tthis._commit_tmp_values(tmp_array_y, array, 1);\n\t\t}\n\t\tif (tmp_array_z) {\n\t\t\tthis._commit_tmp_values(tmp_array_z, array, 2);\n\t\t}\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\tdo_update_param: BooleanParam,\n\t\tvalue_param: FloatParam,\n\t\tparam_value: number,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst do_update = do_update_param;\n\t\tconst param = value_param;\n\n\t\tlet tmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length, offset);\n\t\tif (do_update.value) {\n\t\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\ttmp_array[point.index] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\ttmp_array[point.index] = param_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid.get(uuid);\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\t\treturn new_array;\n\t\t\t} else {\n\t\t\t\treturn current_array;\n\t\t\t}\n\t\t} else {\n\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tprivate _array_for_component(geometry: BufferGeometry, points_count: number, offset: ComponentOffset) {\n\t\tconst new_array = new Array<number>(points_count);\n\t\tconst src_array = geometry.getAttribute(POSITION_ATTRIB_NAME).array;\n\t\tfor (let i = 0; i < new_array.length; i++) {\n\t\t\tnew_array[i] = src_array[i * 3 + offset];\n\t\t}\n\t\treturn new_array;\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {TubeBufferGeometry} from 'three/src/geometries/TubeGeometry';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n// import {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_R = new Vector3(0, 0, 0);\nconst DEFAULT_S = new Vector3(1, 1, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nclass PolywireSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(8, {\n\t\trange: [3, 20],\n\t\trange_locked: [true, false],\n\t});\n\tclosed = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new PolywireSopParamsConfig();\n\nexport class PolywireSopNode extends TypedSopNode<PolywireSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'polywire';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create tubes from'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tprivate _geometries: BufferGeometry[] = [];\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._geometries = [];\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (object instanceof LineSegments) {\n\t\t\t\tthis._create_tube(object);\n\t\t\t}\n\t\t}\n\n\t\t//if @_param_merge\n\t\t//geometries = lodash_map @_geometries, (object)->object.geometry\n\t\tconst merged_geometry = CoreGeometry.merge_geometries(this._geometries);\n\t\tfor (let geometry of this._geometries) {\n\t\t\tgeometry.dispose();\n\t\t}\n\t\tif (merged_geometry) {\n\t\t\tconst object = this.create_object(merged_geometry);\n\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n\t//else\n\t//\tthis.set_objects( @_objects )\n\n\t_create_tube(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst wrapper = new CoreGeometry(geometry);\n\t\tconst points = wrapper.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\n\t\tfor (let curve_point_indices of accumulated_curve_point_indices) {\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tthis._create_tube_from_points(current_points);\n\t\t}\n\t}\n\n\t_create_tube_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positions = points.map((point) => point.attrib_value('position'));\n\n\t\tconst circle_template = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments_radial);\n\t\tconst circles: BufferGeometry[] = [];\n\t\tconst scale = 1;\n\t\tfor (let position of positions) {\n\t\t\tconst t = position;\n\t\t\tconst matrix = this._core_transform.matrix(t, DEFAULT_R, DEFAULT_S, scale);\n\n\t\t\tconst new_circle = circle_template.clone();\n\t\t\tnew_circle.applyMatrix4(matrix);\n\t\t\tcircles.push(new_circle);\n\t\t}\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tconst circle = circles[i];\n\t\t\t\tconst prev_circle = circles[i - 1];\n\n\t\t\t\tconst geometry = this._skin(prev_circle, circle);\n\t\t\t\tthis._geometries.push(geometry);\n\t\t\t}\n\t\t}\n\t}\n\n\t//this.set_geometries(circles, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS)\n\n\t// curve = new CatmullRomCurve3(positions)\n\t// segments_count = positions.length-1\n\n\t// geometry = new TubeBufferGeometry(\n\t// \tcurve,\n\t// \tsegments_count,\n\t// \t@_param_radius,\n\t// \t@_param_segments_radial,\n\t// \t@_param_closed\n\t// \t)\n\n\t// object = this.create_object(geometry)\n\t// @_objects.push(object)\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Raycaster, Intersection} from 'three/src/core/Raycaster';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {DoubleSide} from 'three/src/constants';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst MAT_DOUBLE_SIDED = new MeshBasicMaterial({\n\tside: DoubleSide,\n});\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RaySopParamsConfig extends NodeParamsConfig {\n\tuse_normals = ParamConfig.BOOLEAN(1);\n\tdirection = ParamConfig.VECTOR3([0, -1, 0], {\n\t\tvisible_if: {use_normals: 0},\n\t});\n\ttransfer_face_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new RaySopParamsConfig();\n\nexport class RaySopNode extends TypedSopNode<RaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ray';\n\t}\n\n\t// _material_by_object_uuid: MaterialByString\n\tprivate _bound_assign_mat = this._assign_double_sided_material_to_object.bind(this); //(Object3D)=>void;\n\tprivate _raycaster = new Raycaster();\n\n\tstatic double_sided_material() {\n\t\treturn MAT_DOUBLE_SIDED;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to move', 'geometry to ray onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.FROM_NODE,\n\t\t\tInputCloneMode.ALWAYS, // to assign double sided mat\n\t\t]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_collision = input_contents[1];\n\n\t\tthis.ray(core_group, core_group_collision);\n\t}\n\n\tray(core_group: CoreGroup, core_group_collision: CoreGroup) {\n\t\t// this._material_by_object_uuid = {}\n\t\tthis._assign_double_sided_material_to_core_group(core_group_collision);\n\n\t\tlet direction: Vector3, first_intersect: Intersection;\n\t\tfor (let point of core_group.points()) {\n\t\t\tdirection = this.pv.use_normals ? point.normal() : this.pv.direction;\n\t\t\tthis._raycaster.set(point.position(), direction);\n\n\t\t\tfirst_intersect = this._raycaster.intersectObjects(core_group_collision.objects(), true)[0];\n\t\t\tif (first_intersect) {\n\t\t\t\tpoint.set_position(first_intersect.point);\n\t\t\t\tif (this.pv.transfer_face_normals && first_intersect.face) {\n\t\t\t\t\tpoint.set_normal(first_intersect.face.normal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_assign_double_sided_material_to_core_group(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse(this._bound_assign_mat);\n\t\t}\n\t}\n\t_assign_double_sided_material_to_object(object: Object3D) {\n\t\t// this._material_by_object_uuid[object.uuid] = object.material\n\t\t(object as Mesh).material = RaySopNode.double_sided_material();\n\t}\n\n\t// average_normals(geometry){\n\t// \tconst normals = [];\n\t// \tconst vertex_index_names = ['a', 'b', 'c'];\n\t// \tlodash_each(geometry.faces, face=> {\n\t// \t\treturn lodash_each(vertex_index_names, (vertex_index_name, i)=> {\n\t// \t\t\tconst vertex_index = face[vertex_index_name];\n\t// \t\t\tif (normals[vertex_index] == null) { normals[vertex_index] = []; }\n\t// \t\t\treturn normals[vertex_index].push(face.vertexNormals[i].clone());\n\t// \t\t});\n\t// \t});\n\n\t// \tlodash_each(normals, function(normal_group, i){\n\t// \t\tconst average = new Vector3(\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'x')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'y')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'z')) / normal_group.length)\n\t// \t\t);\n\t// \t\treturn normals[i] = average;\n\t// \t});\n\n\t// \treturn normals;\n\t// }\n}\n","import {LineSegments} from 'three/src/objects/LineSegments';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\n// import {CubicBezierCurve3} from 'three/src/extras/curves/CubicBezierCurve3';\n// import {LineCurve3} from 'three/src/extras/curves/LineCurve3';\n// import {QuadraticBezierCurve3} from 'three/src/extras/curves/QuadraticBezierCurve3';\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_map from 'lodash/map';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\n\nexport enum METHOD {\n\tPOINTS_COUNT = 'points_count',\n\tSEGMENT_LENGTH = 'segment_length',\n}\nexport const METHODS = [METHOD.POINTS_COUNT, METHOD.SEGMENT_LENGTH];\n\n// matches threejs curve type in CatmullRomCurve3.js\nexport enum CURVE_TYPE {\n\tCENTRIPETAL = 'centripetal',\n\tCHORDAL = 'chordal',\n\tCATMULLROM = 'catmullrom',\n}\nexport const CURVE_TYPES = [CURVE_TYPE.CENTRIPETAL, CURVE_TYPE.CHORDAL, CURVE_TYPE.CATMULLROM];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {TypeAssert} from '../../poly/Assert';\nclass ResampleSopParamsConfig extends NodeParamsConfig {\n\tmethod = ParamConfig.INTEGER(METHODS.indexOf(METHOD.POINTS_COUNT), {\n\t\tmenu: {\n\t\t\tentries: METHODS.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcurve_type = ParamConfig.INTEGER(CURVE_TYPES.indexOf(CURVE_TYPE.CATMULLROM), {\n\t\trange: [0, 2],\n\t\trange_locked: [true, true],\n\t\tmenu: {\n\t\t\tentries: CURVE_TYPES.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\ttension = ParamConfig.FLOAT(0.01, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.POINTS_COUNT)},\n\t});\n\tsegment_length = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.SEGMENT_LENGTH)},\n\t});\n}\nconst ParamsConfig = new ResampleSopParamsConfig();\n\nexport class ResampleSopNode extends TypedSopNode<ResampleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'resample';\n\t}\n\n\t// private _objects: Object3D\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\t// this._objects = [];\n\t\tconst resampled_objects = [];\n\t\tif (this.pv.points_count >= 2) {\n\t\t\tconst core_objects = core_group.core_objects();\n\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\tconst object = core_object.object();\n\t\t\t\tif (object instanceof LineSegments) {\n\t\t\t\t\tconst resampled_object = this._resample(object);\n\t\t\t\t\tresampled_objects.push(resampled_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if (this.pv.merge) {\n\t\t// \tconst geometries = lodash_map(this._objects, object => object.geometry);\n\t\t// \tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t// \tlodash_each(geometries, geometry => geometry.dispose());\n\t\t// \tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// \tthis.set_object( object );\n\t\t// } else {\n\t\tthis.set_objects(resampled_objects);\n\t\t// }\n\t}\n\n\t_resample(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst points = core_geometry.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\t\t// accumulated_curve_point_indices = [accumulated_curve_point_indices[0]]\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tfor (let i = 0; i < accumulated_curve_point_indices.length; i++) {\n\t\t\tconst curve_point_indices = accumulated_curve_point_indices[i];\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tconst geometry = this._create_curve_from_points(current_points);\n\t\t\tif (geometry) {\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t}\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\treturn object;\n\t}\n\n\t_create_curve_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst old_curve_positions = lodash_map(points, (point) => point.attrib_value('position'));\n\t\tconst closed = false;\n\t\tconst curve_type = CURVE_TYPES[this.pv.curve_type];\n\t\tconst tension = this.pv.tension;\n\t\tconst curve = new CatmullRomCurve3(old_curve_positions, closed, curve_type, tension);\n\t\t// const curve = new LineCurve3(old_curve_positions);\n\t\t// const curve = new CubicBezierCurve3(old_curve_positions);\n\t\t// const curve = new QuadraticBezierCurve3(old_curve_positions);\n\n\t\t// TODO: could I detect when a curve has points that are very close\n\t\t// and prevent a curve to go too far\n\t\tconst new_curve_points = this._get_points_from_curve(curve);\n\n\t\tlet positions = [];\n\t\tconst indices = [];\n\n\t\tfor (let i = 0; i < new_curve_points.length; i++) {\n\t\t\tconst point_position = new_curve_points[i];\n\n\t\t\tconst position = point_position.toArray();\n\t\t\tpositions.push(position);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1);\n\t\t\t\tindices.push(i);\n\t\t\t}\n\t\t}\n\n\t\tpositions = lodash_flatten(positions);\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\n\t\treturn geometry;\n\t\t// const object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// this._objects.push(object);\n\t}\n\n\t_get_points_from_curve(curve: CatmullRomCurve3) {\n\t\tconst method = METHODS[this.pv.method];\n\t\tswitch (method) {\n\t\t\tcase METHOD.POINTS_COUNT:\n\t\t\t\treturn curve.getSpacedPoints(Math.max(2, this.pv.points_count));\n\t\t\tcase METHOD.SEGMENT_LENGTH:\n\t\t\t\tvar length = curve.getLength();\n\n\t\t\t\tvar points_count = this.pv.segment_length !== 0 ? 1 + length / this.pv.segment_length : 2;\n\n\t\t\t\tpoints_count = Math.max(2, points_count);\n\n\t\t\t\treturn curve.getSpacedPoints(points_count);\n\t\t}\n\t\tTypeAssert.unreachable(method);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {BufferAttribute, BufferGeometry};\nimport lodash_range from 'lodash/range';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreIterator} from '../../../core/Iterator';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass ScatterSopParamsConfig extends NodeParamsConfig {\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tseed = ParamConfig.INTEGER(0, {\n\t\trange: [0, 100],\n\t\trange_locked: [false, false],\n\t});\n\ttransfer_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_transfer = ParamConfig.STRING('normal', {\n\t\tvisible_if: {transfer_attributes: 1},\n\t});\n\tadd_id_attribute = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new ScatterSopParamsConfig();\n\nexport class ScatterSopNode extends TypedSopNode<ScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scatter';\n\t}\n\n\t// private _positions: number[];\n\t// private _areas_thresholds: number[];\n\t// private _attrib_values_by_name = {};\n\t// private _area_sum: number;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to scatter points onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// const objects = input_contents[0] //.group({clone: false})\n\t\tconst core_group = input_contents[0]; //CoreGroup.from_objects(objects)\n\t\tlet faces = core_group.faces();\n\t\t// const areas_by_face_index = []\n\t\tconst areas_thresholds: number[] = [];\n\t\tlet area_sum = 0;\n\t\tconst area_by_face_index: Map<number, number> = new Map();\n\n\t\tfor (let face of faces) {\n\t\t\tconst area = face.area;\n\t\t\tarea_by_face_index.set(face.index, area);\n\t\t}\n\t\tconst sorted_faces = lodash_sortBy(faces, (f) => {\n\t\t\treturn area_by_face_index.get(f.index);\n\t\t});\n\n\t\tlet i = 0;\n\t\tfor (let face of sorted_faces) {\n\t\t\tarea_sum += area_by_face_index.get(face.index) as number;\n\t\t\tareas_thresholds[i] = area_sum;\n\t\t\ti++;\n\t\t}\n\n\t\tconst positions: number[] = [];\n\t\tlet attrib_names: string[] = [];\n\t\tif (this.pv.transfer_attributes) {\n\t\t\tattrib_names = core_group.attrib_names_matching_mask(this.pv.attributes_to_transfer);\n\t\t}\n\n\t\tconst attrib_values_by_name: Map<string, number[]> = new Map();\n\t\tconst attrib_sizes_by_name: Map<string, number> = new Map();\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tattrib_values_by_name.set(attrib_name, []);\n\t\t\tattrib_sizes_by_name.set(attrib_name, core_group.attrib_size(attrib_name));\n\t\t}\n\n\t\tconst iterator = new CoreIterator();\n\t\t// await iterator.start_with_count(this.pv.points_count, this._add_point.bind(this))\n\t\tawait iterator.start_with_count(this.pv.points_count, (point_index: number) => {\n\t\t\tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * area_sum;\n\n\t\t\tfor (let face_index = 0; face_index < areas_thresholds.length; face_index++) {\n\t\t\t\tconst areas_threshold = areas_thresholds[face_index];\n\n\t\t\t\tif (rand <= areas_threshold) {\n\t\t\t\t\tconst face = sorted_faces[face_index];\n\t\t\t\t\tconst position = face.random_position(rand);\n\t\t\t\t\tposition.toArray(positions, positions.length);\n\n\t\t\t\t\tfor (let attrib_name of attrib_names) {\n\t\t\t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t\t\t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.push(attrib_value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrib_value.toArray(\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name),\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.length\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// for(let point_index=0; point_index<this.pv.points_count; point_index++){\n\n\t\t// \tconst rand = CoreMath.rand_float(this.pv.seed+point_index) * area_sum\n\n\t\t// \tfor(let face_index=0; face_index<areas_thresholds.length; face_index++){\n\n\t\t// \t\tconst areas_threshold = areas_thresholds[face_index]\n\n\t\t// \t\tif(rand <= areas_threshold){\n\t\t// \t\t\tconst face = sorted_faces[face_index]\n\t\t// \t\t\tconst position = face.random_position(rand)\n\t\t// \t\t\tposition.toArray(positions, positions.length)\n\n\t\t// \t\t\tfor(let attrib_name of attrib_names){\n\t\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position)\n\t\t// \t\t\t\tif (lodash_isNumber(attrib_value)){\n\t\t// \t\t\t\t\tattrib_values_by_name[attrib_name].push(attrib_value)\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\tattrib_value.toArray(\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name],\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name].length\n\t\t// \t\t\t\t\t)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\n\t\t// \t\t\tbreak;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tgeometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(attrib_values_by_name.get(attrib_name)!),\n\t\t\t\t\tattrib_sizes_by_name.get(attrib_name)!\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (this.pv.add_id_attribute) {\n\t\t\tconst ids = lodash_range(this.pv.points_count);\n\t\t\tgeometry.setAttribute('id', new THREE.BufferAttribute(new Float32Array(ids), 1));\n\t\t}\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n\n\t// private _add_point(point_index: number) {\n\t// \tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * this._area_sum;\n\n\t// \tfor (let face_index = 0; face_index < this._areas_thresholds.length; face_index++) {\n\t// \t\tconst areas_threshold = this._areas_thresholds[face_index];\n\n\t// \t\tif (rand <= areas_threshold) {\n\t// \t\t\tconst face = this._sorted_faces[face_index];\n\t// \t\t\tconst position = face.random_position(rand);\n\t// \t\t\tposition.toArray(positions, positions.length);\n\n\t// \t\t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t// \t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t// \t\t\t\t\tthis._attrib_values_by_name[attrib_name].push(attrib_value);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tattrib_value.toArray(\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name],\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name].length\n\t// \t\t\t\t\t);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ShadowsSopParamsConfig extends NodeParamsConfig {\n\tcast_shadow = ParamConfig.BOOLEAN(1);\n\treceive_shadow = ParamConfig.BOOLEAN(1);\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new ShadowsSopParamsConfig();\n\nexport class ShadowsSopNode extends TypedSopNode<ShadowsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'shadows';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change shadows properties of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\tchild.castShadow = this.pv.cast_shadow;\n\t\t\t\t\tchild.receiveShadow = this.pv.receive_shadow;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobject.castShadow = this.pv.cast_shadow;\n\t\t\t\tobject.receiveShadow = this.pv.receive_shadow;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(core_group.objects());\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_reverse from 'lodash/reverse';\nimport lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass SkinSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new SkinSopParamsConfig();\n\nexport class SkinSopNode extends TypedSopNode<SkinSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'skin';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create polygons from', 'if used, lines from both inputs will be used'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tswitch (lodash_compact(this.io.inputs.inputs()).length) {\n\t\t\tcase 1:\n\t\t\t\treturn this.process_one_input(input_contents);\n\t\t\tcase 2:\n\t\t\t\treturn this.process_two_inputs(input_contents);\n\t\t\tdefault:\n\t\t\t\treturn this.states.error.set('inputs count not valid');\n\t\t}\n\t}\n\n\tprocess_one_input(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tif (line_segments0) {\n\t\t\tconst first_line_segment = line_segments0[0] as Mesh;\n\t\t\tif (first_line_segment) {\n\t\t\t\tconst src_geometries = CoreGeometryUtilCurve.line_segment_to_geometries(\n\t\t\t\t\tfirst_line_segment.geometry as BufferGeometry\n\t\t\t\t);\n\t\t\t\tsrc_geometries.forEach((src_geometry, i) => {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tconst prev_src_geometry = src_geometries[i - 1];\n\n\t\t\t\t\t\tconst geometry = this._skin(prev_src_geometry, src_geometry);\n\t\t\t\t\t\tgeometries.push(geometry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\tprocess_two_inputs(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\t\tconst line_segments1 = this._get_line_segments(core_group1);\n\t\tconst line_segments = lodash_reverse(lodash_sortBy([line_segments0, line_segments1], (array) => array.length));\n\t\tconst smallest_array = line_segments[0];\n\t\tconst largest_array = line_segments[1];\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tsmallest_array.forEach((line_segment, i) => {\n\t\t\tconst other_line_segment = largest_array[i];\n\n\t\t\tif (line_segment != null && other_line_segment != null) {\n\t\t\t\tconst geo = (line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst other_geo = (other_line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst geometry = this._skin(geo, other_geo);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t});\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\t_get_line_segments(core_group: CoreGroup) {\n\t\treturn core_group.objects().filter((child) => (child as LineSegments).isLineSegments);\n\t}\n\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\t// TODO: maybe instead of doing this,\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {IcosahedronBufferGeometry} from 'three/src/geometries/IcosahedronGeometry';\nimport {TypedSopNode} from './_Base';\n\nenum SphereType {\n\tDEFAULT = 'default',\n\tISOCAHEDRON = 'isocahedron',\n}\ntype SphereTypes = {[key in SphereType]: number};\nconst SPHERE_TYPE: SphereTypes = {\n\tdefault: 0,\n\tisocahedron: 1,\n};\nconst SPHERE_TYPES: Array<SphereType> = [SphereType.DEFAULT, SphereType.ISOCAHEDRON];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass SphereSopParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(SPHERE_TYPE.default, {\n\t\tmenu: {\n\t\t\tentries: SPHERE_TYPES.map((name) => {\n\t\t\t\treturn {name: name, value: SPHERE_TYPE[name]};\n\t\t\t}),\n\t\t},\n\t});\n\tradius = ParamConfig.FLOAT(1, {visible_if: {type: SPHERE_TYPE.default}});\n\tresolution = ParamConfig.VECTOR2([8, 6], {visible_if: {type: SPHERE_TYPE.default}});\n\topen = ParamConfig.BOOLEAN(0, {visible_if: {type: SPHERE_TYPE.default}});\n\tangle_range_x = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tangle_range_y = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tdetail = ParamConfig.INTEGER(1, {\n\t\trange: [0, 5],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {type: SPHERE_TYPE.isocahedron},\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new SphereSopParamsConfig();\n\nexport class SphereSopNode extends TypedSopNode<SphereSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'sphere';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\tprivate _cook_without_input() {\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max\n\t\t\t.clone()\n\t\t\t.add(bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tgeometry.translate(center.x, center.y, center.z);\n\t\tgeometry.scale(size.x, size.y, size.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _create_required_geometry() {\n\t\tif (this.pv.type == SPHERE_TYPE.default) {\n\t\t\treturn this._create_default_sphere();\n\t\t} else {\n\t\t\treturn this._create_default_isocahedron();\n\t\t}\n\t}\n\n\tprivate _create_default_sphere() {\n\t\tif (this.pv.open) {\n\t\t\treturn new SphereBufferGeometry(\n\t\t\t\tthis.pv.radius,\n\t\t\t\tthis.pv.resolution.x,\n\t\t\t\tthis.pv.resolution.y,\n\t\t\t\tthis.pv.angle_range_x.x,\n\t\t\t\tthis.pv.angle_range_x.y,\n\t\t\t\tthis.pv.angle_range_y.x,\n\t\t\t\tthis.pv.angle_range_y.y\n\t\t\t);\n\t\t} else {\n\t\t\treturn new SphereBufferGeometry(this.pv.radius, this.pv.resolution.x, this.pv.resolution.y);\n\t\t}\n\t}\n\t_create_default_isocahedron() {\n\t\treturn new IcosahedronBufferGeometry(this.pv.radius, this.pv.detail);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nconst INPUT_NAME = 'geometry to switch to';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchSopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchSopParamsConfig();\n\nexport class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_core_group(container.core_content());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import lodash_range from 'lodash/range';\n\n// import {CoreFont} from '../../../Core/Font'\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {TextBufferGeometry} from 'three/src/geometries/TextGeometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {ShapeBufferGeometry} from 'three/src/geometries/ShapeGeometry';\nimport {FontLoader} from 'three/src/loaders/FontLoader';\nimport {Font} from 'three/src/extras/core/Font';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Path} from 'three/src/extras/core/Path';\nimport {Shape} from 'three/src/extras/core/Shape';\n\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nvar opentype = require('opentype.js');\n\nimport {TTFLoader} from '../../../../modules/three/examples/jsm/loaders/TTFLoader';\nimport {SVGLoader} from '../../../../modules/three/examples/jsm/loaders/SVGLoader';\n\nconst DEFAULT_URL = '/fonts/droid_sans_regular.typeface.json';\n\ndeclare global {\n\tinterface Window {\n\t\topentype: any;\n\t}\n}\n\n// const DEFAULT_PARAMS = {\n// \tsize: 1,\n// \theight: 0.1,\n// \tcurveSegments: 1\n// };\n\nexport enum TEXT_TYPE {\n\tMESH = 'mesh',\n\tFLAT = 'flat',\n\tLINE = 'line',\n\tSTROKE = 'stroke',\n}\nexport const TEXT_TYPES: Array<TEXT_TYPE> = [TEXT_TYPE.MESH, TEXT_TYPE.FLAT, TEXT_TYPE.LINE, TEXT_TYPE.STROKE];\n\ninterface FontByUrl {\n\t[propName: string]: Font;\n}\n\nconst GENERATION_ERROR_MESSAGE = `failed to generate geometry. Try to remove some characters`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextSopParamsConfig extends NodeParamsConfig {\n\tfont = ParamConfig.STRING('');\n\ttext = ParamConfig.STRING('polygonjs', {multiline: true});\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: TEXT_TYPES.map((type, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: type,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tsize = ParamConfig.FLOAT(1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n\textrude = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tsegments = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tstroke_width = ParamConfig.FLOAT(0.02, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.STROKE),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new TextSopParamsConfig();\n\nexport class TextSopNode extends TypedSopNode<TextSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'text';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['loaders/TTFLoader', 'loaders/SVGLoader'];\n\t// }\n\n\tprivate _font_loader: FontLoader = new FontLoader();\n\tprivate _ttf_loader: TTFLoader | undefined;\n\tprivate _svg_loader: typeof SVGLoader | undefined;\n\tprivate _loaded_fonts: FontByUrl = {};\n\n\tinitialize_node() {}\n\n\tasync cook() {\n\t\ttry {\n\t\t\tthis._loaded_fonts[this.pv.font] = this._loaded_fonts[this.pv.font] || (await this._load_url(this.pv.font));\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(`count not load font (${this.pv.font})`);\n\t\t\treturn;\n\t\t}\n\t\tconst font = this._loaded_fonts[this.pv.font];\n\t\tif (font) {\n\t\t\tswitch (TEXT_TYPES[this.pv.type]) {\n\t\t\t\tcase TEXT_TYPE.MESH:\n\t\t\t\t\treturn this._create_geometry_from_type_mesh(font);\n\t\t\t\tcase TEXT_TYPE.FLAT:\n\t\t\t\t\treturn this._create_geometry_from_type_flat(font);\n\t\t\t\tcase TEXT_TYPE.LINE:\n\t\t\t\t\treturn this._create_geometry_from_type_line(font);\n\t\t\t\tcase TEXT_TYPE.STROKE:\n\t\t\t\t\treturn this._create_geometry_from_type_stroke(font);\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('type is not valid');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_mesh(font: Font) {\n\t\tconst text = this.displayed_text();\n\n\t\tconst parameters = {\n\t\t\tfont: font,\n\t\t\tsize: this.pv.size,\n\t\t\theight: this.pv.extrude,\n\t\t\tcurveSegments: this.pv.segments,\n\t\t};\n\n\t\ttry {\n\t\t\tconst geometry = new TextBufferGeometry(text, parameters);\n\t\t\tif (!geometry.index) {\n\t\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t\t}\n\t\t\tthis.set_geometry(geometry);\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_flat(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tvar geometry = new ShapeBufferGeometry(shapes);\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n\tprivate _create_geometry_from_type_line(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\tconst positions = [];\n\t\t\tconst indices = [];\n\t\t\tlet current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\tconst point = points[j];\n\t\t\t\t\tpositions.push(point.x);\n\t\t\t\t\tpositions.push(point.y);\n\t\t\t\t\tpositions.push(0);\n\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\tif (j > 0 && j < points.length - 1) {\n\t\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_index += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.setIndex(indices);\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\tprivate async _create_geometry_from_type_stroke(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\t// const color = new Color( 0xffffff );\n\t\t\tthis._svg_loader = this._svg_loader || (await this._load_svg_loader());\n\t\t\t// TODO: typescript: correct definition for last 3 optional args\n\t\t\tvar style = this._svg_loader.getStrokeStyle(this.pv.stroke_width, 'white', 'miter', 'butt', 4);\n\t\t\tconst geometries = [];\n\n\t\t\t// const positions = [];\n\t\t\t// const indices = [];\n\t\t\t// let current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t// TODO: typescript: correct definition for points, arcDivisions, and minDistance\n\t\t\t\tconst arcDivisions = 12;\n\t\t\t\tconst minDistance = 0.001;\n\t\t\t\tconst geometry = this._svg_loader.pointsToStroke(\n\t\t\t\t\t(<unknown>points) as Vector3[],\n\t\t\t\t\tstyle,\n\t\t\t\t\tarcDivisions,\n\t\t\t\t\tminDistance\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\t\tthis.set_geometry(merged_geometry); //, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\n\tprivate shapes_from_font(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tconst holeShapes: Path[] = [];\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tif (shape.holes && shape.holes.length > 0) {\n\t\t\t\t\tfor (let j = 0; j < shape.holes.length; j++) {\n\t\t\t\t\t\tconst hole = shape.holes[j];\n\t\t\t\t\t\tholeShapes.push(hole);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshapes.push.apply(shapes, holeShapes as Shape[]);\n\t\t\treturn shapes;\n\t\t}\n\t}\n\n\tprivate _get_shapes(font: Font) {\n\t\tconst text = this.displayed_text();\n\t\ttry {\n\t\t\tconst shapes = font.generateShapes(text, this.pv.size);\n\t\t\treturn shapes;\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate displayed_text(): string {\n\t\treturn this.pv.text || '';\n\t}\n\n\t// _create_shape(font){\n\t// \tconst shapes = font.generateShapes( this.displayed_text(), 100 );\n\t// \tvar geometry = new ShapeBufferGeometry( shapes );\n\t// \treturn geometry\n\t// \t// geometry.computeBoundingBox();\n\t// \t// xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\t// \t// geometry.translate( xMid, 0, 0 );\n\t// \t// make shape ( N.B. edge view not visible )\n\t// \t// text = new Mesh( geometry, matLite );\n\t// \t// text.position.z = - 150;\n\t// }\n\n\tprivate _load_url(url: string) {\n\t\tif (url === '') {\n\t\t\turl = DEFAULT_URL;\n\t\t}\n\t\tconst elements1 = url.split('?')[0];\n\t\tconst elements2 = elements1.split('.');\n\t\tconst ext = elements2[elements2.length - 1];\n\t\turl = `${url}?${Date.now()}`;\n\t\tswitch (ext) {\n\t\t\tcase 'ttf': {\n\t\t\t\treturn this._load_ttf(url);\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treturn this._load_json(url);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _load_ttf(url: string): Promise<Font> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._ttf_loader = this._ttf_loader || (await this._load_ttf_loader());\n\t\t\twindow.opentype = opentype;\n\t\t\tthis._ttf_loader.load(\n\t\t\t\turl,\n\t\t\t\t(fnt: object) => {\n\t\t\t\t\tconst parsed = this._font_loader.parse(fnt);\n\t\t\t\t\t// make sure not to delete opentype from window, as it may be required by other nodes\n\t\t\t\t\t// delete window.opentype;\n\t\t\t\t\tresolve(parsed);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tprivate _load_json(url: string): Promise<Font> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._font_loader.load(\n\t\t\t\turl,\n\t\t\t\t(font) => {\n\t\t\t\t\tresolve(font);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t// private _default_font_parameters(options){\n\t// \tif (options == null) { options = {}; }\n\t// \tconst default_options = lodash_clone(DEFAULT_PARAMS);\n\t// \tif (options['font'] == null) { options['font'] = this.font(); }\n\n\t// \tfor(let key of Object.keys(options)){\n\t// \t\tdefault_options[key] = options[key];\n\t// \t}\n\n\t// \treturn default_options;\n\t// }\n\tprivate async _load_ttf_loader(): Promise<TTFLoader> {\n\t\tconst {TTFLoader} = await import(`../../../../modules/three/examples/jsm/loaders/TTFLoader`);\n\t\tconst loader_constructor = (<unknown>TTFLoader) as typeof TTFLoader;\n\t\treturn new loader_constructor();\n\t}\n\tprivate async _load_svg_loader(): Promise<typeof SVGLoader> {\n\t\tconst {SVGLoader} = await import(`../../../../modules/three/examples/jsm/loaders/SVGLoader`);\n\t\treturn (<unknown>SVGLoader) as typeof SVGLoader;\n\t}\n}\n","import {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author gero3 / https://github.com/gero3\n * @author tentone / https://github.com/tentone\n * @author troy351 / https://github.com/troy351\n *\n * Requires opentype.js to be included in the project.\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n */\n\n\nvar TTFLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.reversed = false;\n\n};\n\n\nTTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TTFLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tvar round = Math.round;\n\n\t\t\tvar glyphs = {};\n\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tvar token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tvar paths = [];\n\t\t\tvar path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n} );\n\nexport { TTFLoader };\n","import {TorusBufferGeometry} from 'three/src/geometries/TorusGeometry';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tradius_tube = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(20, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\tsegments_tube = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new TorusSopParamsConfig();\n\nexport class TorusSopNode extends TypedSopNode<TorusSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\t//radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float\n\n\t\tconst geometry = new TorusBufferGeometry(radius, radius_tube, segments_radial, segments_tube);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TorusKnotBufferGeometry} from 'three/src/geometries/TorusKnotGeometry';\nconst THREE = {TorusKnotBufferGeometry};\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusKnotSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tradius_tube = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(64, {range: [1, 128]});\n\tsegments_tube = ParamConfig.INTEGER(8, {range: [1, 32]});\n\tp = ParamConfig.INTEGER(2, {range: [1, 10]});\n\tq = ParamConfig.INTEGER(3, {range: [1, 10]});\n}\nconst ParamsConfig = new TorusKnotSopParamsConfig();\n\nexport class TorusKnotSopNode extends TypedSopNode<TorusKnotSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus_knot';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\tconst p = this.pv.p;\n\t\tconst q = this.pv.q;\n\n\t\tconst geometry = new THREE.TorusKnotBufferGeometry(radius, radius_tube, segments_radial, segments_tube, p, q);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {GroupParamController} from './utils/GroupParamController';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreTransform} from '../../../core/Transform';\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\n// const DEFAULT_PARAMS = {\n// \tPIVOT: [0, 0, 0] as [number, number, number],\n// };\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TransformSopParamConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\n\t// transform\n\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\tscale = ParamConfig.FLOAT(1);\n\tlook_at = ParamConfig.OPERATOR_PATH('');\n\tup = ParamConfig.VECTOR3([0, 1, 0]);\n\tpivot = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new TransformSopParamConfig();\n\nexport class TransformSopNode extends TypedSopNode<TransformSopParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'transform';\n\t}\n\t// allow_eval_key_check() {\n\t// \treturn true;\n\t// }\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transform'];\n\t}\n\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst objects = input_contents[0].objects();\n\t\tconst matrix = this._core_transform.matrix(this.pv.t, this.pv.r, this.pv.s, this.pv.scale);\n\n\t\tif (this.pv.group === '') {\n\t\t\tfor (let object of objects) {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = object.geometry) != null) {\n\t\t\t\t\tgeometry.translate(-this.pv.pivot.x, -this.pv.pivot.y, -this.pv.pivot.z);\n\t\t\t\t\tgeometry.applyMatrix4(matrix);\n\t\t\t\t\tgeometry.translate(this.pv.pivot.x, this.pv.pivot.y, this.pv.pivot.z);\n\t\t\t\t} else {\n\t\t\t\t\tobject.applyMatrix4(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst core_group = CoreGroup.from_objects(objects);\n\t\t\tconst points = core_group.points_from_group(this.pv.group);\n\t\t\tfor (let point of points) {\n\t\t\t\tconst position = point.position().sub(this.pv.pivot);\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tpoint.set_position(position.add(this.pv.pivot));\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(objects);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {CylinderBufferGeometry} from 'three/src/geometries/CylinderGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TubeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new TubeSopParamsConfig();\n\nexport class TubeSopNode extends TypedSopNode<TubeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'tube';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new CylinderBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CameraController} from '../../../core/CameraController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\n// const MODE = [];\nconst UV_NAME = 'uv';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseObjNodeType} from '../obj/_Base';\nclass UvProjectSopParamsConfig extends NodeParamsConfig {\n\tcamera = ParamConfig.OPERATOR_PATH('/perspective_camera1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.OBJ,\n\t\t},\n\t});\n\t// force_aspect = ParamConfig.BOOLEAN(0)\n\t// aspect = ParamConfig.FLOAT(1, {\n\t// \trange: [0, 2],\n\t// \tvisible_if: {force_aspect: 1},\n\t// })\n}\nconst ParamsConfig = new UvProjectSopParamsConfig();\n\nexport class UvProjectSopNode extends TypedSopNode<UvProjectSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'uv_project';\n\t}\n\n\tprivate _camera_controller: CameraController = new CameraController(this._update_uvs_from_camera.bind(this));\n\t// private _param_camera: string\n\tprivate _processed_core_group: CoreGroup | undefined;\n\t// private _camera_node: BaseCameraObjNodeType | undefined;\n\tprivate _camera_object: Camera | undefined;\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._processed_core_group = core_groups[0];\n\n\t\tconst camera_node = this.p.camera.found_node();\n\t\tif (camera_node != null) {\n\t\t\tthis._camera_object = (camera_node as BaseCameraObjNodeType).object;\n\t\t\tthis._camera_controller.set_target(this._camera_object);\n\t\t\t// this._add_camera_event()\n\t\t} else {\n\t\t\tthis._camera_object = undefined;\n\t\t\t//this._remove_camera_event()\n\t\t\tthis._camera_controller.remove_target();\n\t\t}\n\n\t\tthis.set_core_group(this._processed_core_group);\n\t}\n\n\t_update_uvs_from_camera(look_at_target: Object3D) {\n\t\t// let old_aspect;\n\t\t// if (this.pv.force_aspect) {\n\t\t// \told_aspect = this._camera_object.aspect;\n\t\t// \tthis._camera_node.setup_for_aspect_ratio(this.pv.aspect);\n\t\t// }\n\n\t\tif (this._processed_core_group && this.parent) {\n\t\t\tconst points = this._processed_core_group.points();\n\t\t\tconst obj_world_matrix = (this.parent as BaseObjNodeType).object.matrixWorld;\n\t\t\tpoints.forEach((point) => {\n\t\t\t\tconst position = point.position();\n\t\t\t\tconst uvw = this._vector_in_camera_space(position, obj_world_matrix);\n\t\t\t\tif (uvw) {\n\t\t\t\t\tconst uv = {\n\t\t\t\t\t\tx: 1 - (uvw[0] * 0.5 + 0.5),\n\t\t\t\t\t\ty: uvw[1] * 0.5 + 0.5,\n\t\t\t\t\t};\n\t\t\t\t\tpoint.set_attrib_value(UV_NAME, uv);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if (this.pv.force_aspect) {\n\t\t\t// \tthis._camera_node.setup_for_aspect_ratio(old_aspect);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate _vector_in_camera_space(vector: Vector3, obj_world_matrix: Matrix4) {\n\t\tif (this._camera_object) {\n\t\t\tvector.applyMatrix4(obj_world_matrix);\n\t\t\treturn vector.project(this._camera_object).toArray();\n\t\t}\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nenum EVENT {\n\tCHANGE = 'change',\n\tMOVEEND = 'moveend',\n}\n\ntype CameraControllerCallback = (target: Object3D) => void;\n\nexport class CameraController {\n\tprivate _update_always: boolean = true;\n\tprivate _listener: any;\n\tprivate _target: Object3D | undefined;\n\tprivate _listener_added: boolean = false;\n\n\tconstructor(private _callback: CameraControllerCallback) {\n\t\tthis._listener = this._execute_callback.bind(this);\n\t}\n\n\tremove_target() {\n\t\tthis.set_target(undefined);\n\t}\n\tset_target(target: Object3D | undefined) {\n\t\tif (!target) {\n\t\t\tthis._remove_camera_event();\n\t\t}\n\n\t\tconst old_target = this._target;\n\t\tthis._target = target;\n\n\t\tif (this._target != null) {\n\t\t\tthis._execute_callback();\n\t\t}\n\n\t\tif (\n\t\t\t(this._target != null ? this._target.uuid : undefined) !==\n\t\t\t(old_target != null ? old_target.uuid : undefined)\n\t\t) {\n\t\t\tthis._add_camera_event();\n\t\t}\n\t}\n\n\tset_update_always(new_update_always: boolean) {\n\t\tthis._remove_camera_event();\n\n\t\tthis._update_always = new_update_always;\n\n\t\tthis._add_camera_event();\n\t}\n\n\tprivate _current_event_name() {\n\t\tif (this._update_always) {\n\t\t\treturn EVENT.CHANGE;\n\t\t} else {\n\t\t\treturn EVENT.MOVEEND;\n\t\t}\n\t}\n\n\tprivate _add_camera_event() {\n\t\tif (this._listener_added) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.addEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = true;\n\t\t}\n\t}\n\n\tprivate _remove_camera_event() {\n\t\tif (this._listener_added !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.removeEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = false;\n\t\t}\n\t}\n\n\tprivate _execute_callback() {\n\t\tif (this._target != null) {\n\t\t\tthis._callback(this._target);\n\t\t}\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","import {Clock} from 'three/src/core/Clock';\nimport {LinearFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {RGBAFormat} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"sourceRoot":""}