{"version":3,"sources":["webpack://polygonjs-engine/webpack/bootstrap","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/ConnectionPointType.ts","webpack://polygonjs-engine/./src/engine/poly/InputCloneMode.ts","webpack://polygonjs-engine/./src/engine/poly/ParamType.ts","webpack://polygonjs-engine/./src/engine/poly/NodeContext.ts","webpack://polygonjs-engine/./src/core/ThreeToGl.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/GLDefinition.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/NamedConnectionPoint.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Base.ts","webpack://polygonjs-engine/./src/core/geometry/Constant.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseMathFunction.ts","webpack://polygonjs-engine/./src/core/String.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/ShaderName.ts","webpack://polygonjs-engine/./src/core/geometry/Geometry.ts","webpack://polygonjs-engine/./src/core/graph/CoreGraphNode.ts","webpack://polygonjs-engine/./src/engine/poly/NodeEvent.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/_Base.ts","webpack://polygonjs-engine/./src/engine/Poly.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_Base.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/Pass.js","webpack://polygonjs-engine/./src/engine/nodes/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/TransformController.ts","webpack://polygonjs-engine/./src/core/Transform.ts","webpack://polygonjs-engine/./src/engine/params/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/FlagsController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/quaternion.glsl","webpack://polygonjs-engine/./src/core/Walker.ts","webpack://polygonjs-engine/./src/engine/poly/ParamEvent.ts","webpack://polygonjs-engine/./src/core/math/_Module.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/SideController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/_BaseMaterial.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/ContainerController.ts","webpack://polygonjs-engine/./src/core/geometry/Attribute.ts","webpack://polygonjs-engine/./src/engine/containers/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/SkinningController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureMapController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack://polygonjs-engine/./src/core/MapUtils.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Category.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/Controller.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/Geometry.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/ConnectionsController.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/File.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/_BaseController.ts","webpack://polygonjs-engine/./src/engine/params/Ramp.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Param.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/_BaseController.ts","webpack://polygonjs-engine/./src/core/geometry/Material.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/libs/inflate.module.min.js","webpack://polygonjs-engine/./src/engine/nodes/event/_Base.ts","webpack://polygonjs-engine/./src/engine/params/_Numeric.ts","webpack://polygonjs-engine/./src/engine/params/_Multiple.ts","webpack://polygonjs-engine/./src/engine/poly/Assert.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/configs/ShaderConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/configs/VariableConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/controllers/ParamConfigsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/ColorsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/UniformsColorsController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/_BaseBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseLightTransformed.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/_BaseLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/HelperController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseManager.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/LayersController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/PostProcessController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/NameController.ts","webpack://polygonjs-engine/./src/engine/params/utils/OptionsController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/_Base.ts","webpack://polygonjs-engine/./src/core/AsyncFunction.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Attribute.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Dispatcher.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Scene.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/LineType.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/NodeFinder.ts","webpack://polygonjs-engine/./src/engine/nodes/event/CameraOrbitControls.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/_BaseMesh.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseLight.ts","webpack://polygonjs-engine/./src/core/geometry/Object.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/Texture.ts","webpack://polygonjs-engine/./src/core/geometry/util/Curve.ts","webpack://polygonjs-engine/./src/engine/nodes/event/MouseEvent.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/Base.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/params/types/ParamConstructorByType.ts","webpack://polygonjs-engine/./src/engine/params/utils/ExpressionController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/ParsedTree.ts","webpack://polygonjs-engine/./src/core/DecomposedPath.ts","webpack://polygonjs-engine/./src/core/math/Easing.ts","webpack://polygonjs-engine/./src/engine/params/Float.ts","webpack://polygonjs-engine/./src/engine/params/OperatorPath.ts","webpack://polygonjs-engine/./src/engine/params/String.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/MouseEventsController.ts","webpack://polygonjs-engine/./src/engine/nodes/event/Code.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/controllers/TranspiledFilter.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/globals/_Base.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/GLDefinitionCollection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/NodeTraverser.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Globals.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/controls/OrbitControls.js","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseAdaptive.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Constant.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg3.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/fit.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.frag.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshStandard.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/PointsBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/_BaseCamera.ts","webpack://polygonjs-engine/./src/core/geometry/Group.ts","webpack://polygonjs-engine/./src/core/geometry/Point.ts","webpack://polygonjs-engine/./src/core/geometry/Entity.ts","webpack://polygonjs-engine/./src/core/Iterator.ts","webpack://polygonjs-engine/./src/core/geometry/util/Circle.ts","webpack://polygonjs-engine/./src/core/geometry/Instancer.ts","webpack://polygonjs-engine/./src/core/loader/geometry/JsonData.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/DRACOLoader.js","webpack://polygonjs-engine/./src/core/geometry/operation/Skin.ts","webpack://polygonjs-engine/./src/engine/index.ts","webpack://polygonjs-engine/./src/engine/scene/PolyScene.ts","webpack://polygonjs-engine/./src/engine/scene/utils/CamerasController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/Cooker.ts","webpack://polygonjs-engine/./src/core/graph/CoreGraph.ts","webpack://polygonjs-engine/./src/engine/scene/utils/CookController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/DispatchController.ts","webpack://polygonjs-engine/./src/engine/poly/RenderersController.ts","webpack://polygonjs-engine/./src/engine/poly/NodesRegister.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/EventsController.ts","webpack://polygonjs-engine/./src/core/graph/DirtyController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/UIData.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/StatesController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/TimeDependent.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/states/Error.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/hierarchy/ParentController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/hierarchy/ChildrenController.ts","webpack://polygonjs-engine/./src/core/NodeSelection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/LifeCycleController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/CookController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/DependenciesController.ts","webpack://polygonjs-engine/./src/engine/params/utils/EmitController.ts","webpack://polygonjs-engine/./src/engine/params/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/params/utils/StatesController.ts","webpack://polygonjs-engine/./src/engine/params/utils/states/TimeDependent.ts","webpack://polygonjs-engine/./src/engine/params/utils/states/Error.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsController.ts","webpack://polygonjs-engine/./src/engine/params/Boolean.ts","webpack://polygonjs-engine/./src/engine/expressions/ExpressionManager.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/FunctionGenerator.ts","webpack://polygonjs-engine/./src/engine/expressions/LiteralConstructsController.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/_Module.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/bbox.ts","webpack://polygonjs-engine/./src/engine/expressions/MethodDependency.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/centroid.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/ch.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/copy.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/cop_res.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/local.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/opdigits.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/point.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/points_count.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_chars_count.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_concat.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_index.ts","webpack://polygonjs-engine/./src/engine/expressions/methods/str_sub.ts","webpack://polygonjs-engine/./src/engine/expressions/AttributeRequirementsController.ts","webpack://polygonjs-engine/./src/engine/expressions/traversers/ExpressionStringGenerator.ts","webpack://polygonjs-engine/./src/engine/expressions/DependenciesController.ts","webpack://polygonjs-engine/./src/engine/params/Button.ts","webpack://polygonjs-engine/./src/engine/params/Color.ts","webpack://polygonjs-engine/./src/engine/params/Folder.ts","webpack://polygonjs-engine/./src/engine/params/Integer.ts","webpack://polygonjs-engine/./src/engine/params/ramp/RampValue.ts","webpack://polygonjs-engine/./src/engine/params/Separator.ts","webpack://polygonjs-engine/./src/engine/params/Vector2.ts","webpack://polygonjs-engine/./src/engine/params/Vector3.ts","webpack://polygonjs-engine/./src/engine/params/Vector4.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsValueAccessor.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/ProcessingContext.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/IOController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/ConnectionsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/InputsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/NodeConnection.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/connections/OutputsController.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/params/ParamsAccessor.ts","webpack://polygonjs-engine/./src/engine/containers/Event.ts","webpack://polygonjs-engine/./src/engine/scene/utils/events/_BaseEventsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/LifeCycleController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/LoadingController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/ExpressionsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/MissingReferencesController.ts","webpack://polygonjs-engine/./src/engine/expressions/MissingReference.ts","webpack://polygonjs-engine/./src/engine/scene/utils/NodesController.ts","webpack://polygonjs-engine/./src/engine/nodes/manager/ObjectsManager.ts","webpack://polygonjs-engine/./src/engine/nodes/manager/_Base.ts","webpack://polygonjs-engine/./src/engine/containers/Manager.ts","webpack://polygonjs-engine/./src/core/performance/CorePerformance.ts","webpack://polygonjs-engine/./src/core/performance/PerformanceNode.ts","webpack://polygonjs-engine/./src/engine/scene/utils/TimeController.ts","webpack://polygonjs-engine/./src/engine/poly/SceneEvent.ts","webpack://polygonjs-engine/./src/engine/scene/utils/Serializer.ts","webpack://polygonjs-engine/./src/engine/scene/utils/UniformsController.ts","webpack://polygonjs-engine/./src/engine/scene/utils/WebGLController.ts","webpack://polygonjs-engine/./src/engine/poly/registers/All.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Cop.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/Builder.ts","webpack://polygonjs-engine/./src/engine/containers/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Bypass.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/flags/Display.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/utils/SpareParamsController.ts","webpack://polygonjs-engine/./src/engine/io/json/export/Node.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/Numeric.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/OperatorPath.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/String.ts","webpack://polygonjs-engine/./src/engine/io/json/export/param/Ramp.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/textures/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/CodeBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/code/configs/ParamConfig.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/ShadersCollectionController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/LinesController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/CodeFormatter.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/shaders/BaseAssembler.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/textures/Default.frag.glsl","webpack://polygonjs-engine/./src/core/Sleep.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/EnvMap.ts","webpack://polygonjs-engine/./src/core/loader/Texture.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/RGBELoader.js","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/BasisTextureLoader.js","webpack://polygonjs-engine/./src/engine/nodes/cop/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/cop/Switch.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Event.ts","webpack://polygonjs-engine/./src/engine/nodes/event/CameraMapControls.ts","webpack://polygonjs-engine/./src/engine/nodes/event/_BaseCameraControls.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Gl.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionMisc.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionToVec.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_ConversionVecTo.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg1.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2Operation.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_Math_Arg2Boolean.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/_BaseMathFunctionArgBoolean2.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Align.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Complement.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/complement.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Cross.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Cycle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/cycle.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Disk.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/disk.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Easing.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/linear.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/circular-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/back-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/elastic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/exponential-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/cubic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quadratic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-in-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quintic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/quartic-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/bounce-in.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/easing/sine-out.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Fit.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Fit01.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/HsvToRgb.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/hsv2rgb.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/InstanceTransform.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Length.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Luminance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Mix.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/MultAdd.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Negate.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Noise.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/common.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise2D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise3D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/classicnoise4D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise2D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise3D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/noise/noise4D.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Output.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Param.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Refract.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatMult.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatFromAxisAngle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatToAngle.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/QuatToAxis.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Ramp.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Random.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/RgbToHsv.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/rgb2hsv.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/Rotate.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Round.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/Texture.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/TwoWaySwitch.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/VectorAlign.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/VectorAngle.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Mat.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshBasic.ts","webpack://polygonjs-engine/./src/engine/containers/Material.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshBasicBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Basic.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDistance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepth.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomMeshDepthDOF.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshLambert.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshLambertBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Lambert.ts","webpack://polygonjs-engine/./src/engine/nodes/mat/MeshStandardBuilder.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Standard.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl","webpack://polygonjs-engine/./src/engine/nodes/mat/Points.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/Points.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepth.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDepth.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDistance.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDistance.vert.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/materials/CustomPointsDepthDOF.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/CustomPointsDepthDOF.vert.glsl","webpack://polygonjs-engine/./src/engine/poly/registers/Obj.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/AmbientLight.ts","webpack://polygonjs-engine/./src/engine/containers/Object.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/AreaLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/DirectionalLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/DirectionalLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/HemisphereLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/HemisphereLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PointLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/PointLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/SpotLight.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/helpers/SpotLightHelper.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Events.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Materials.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Cop.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PostProcess.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Geo.ts","webpack://polygonjs-engine/./src/engine/nodes/utils/DisplayNodeController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Fog.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/Scene.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/OrthographicCamera.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/ControlsController.ts","webpack://polygonjs-engine/./src/engine/nodes/event/utils/CameraControlConfig.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/RenderPass.js","webpack://polygonjs-engine/./src/engine/viewers/Threejs.ts","webpack://polygonjs-engine/./src/engine/viewers/_Base.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/CamerasController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/ControlsController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/EventsController.ts","webpack://polygonjs-engine/./src/engine/viewers/utils/WebglController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/OrthographicCameraController.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/PerspectiveCamera.ts","webpack://polygonjs-engine/./src/engine/nodes/obj/utils/cameras/background/PerspectiveCameraController.ts","webpack://polygonjs-engine/./src/engine/poly/registers/Sop.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Add.ts","webpack://polygonjs-engine/./src/core/geometry/Face.ts","webpack://polygonjs-engine/./src/core/geometry/MonkeyPatcher.ts","webpack://polygonjs-engine/./src/engine/containers/Geometry.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AnimationCopy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AnimationMixer.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribAddMult.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribCopy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribCreate.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribDelete.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribNormalize.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribPromote.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribRemap.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribRename.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/AttribTransfer.ts","webpack://polygonjs-engine/./src/core/math/Interpolate.ts","webpack://polygonjs-engine/./src/core/math/octree/Octree.ts","webpack://polygonjs-engine/./src/core/math/octree/Node.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/BboxScatter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Blend.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Box.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Cache.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Circle.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Code.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Color.ts","webpack://polygonjs-engine/./src/core/Color.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Cone.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Copy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/CopyStamp.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Data.ts","webpack://polygonjs-engine/./src/core/geometry/AttributeData.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/DataUrl.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Delay.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Delete.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Face.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/File.ts","webpack://polygonjs-engine/./src/core/loader/Geometry.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/OBJLoader.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Fuse.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Hexagons.ts","webpack://polygonjs-engine/./src/core/geometry/operation/Hexagon.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Hierarchy.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Instance.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Jitter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Layer.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Line.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Material.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Merge.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Noise.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/math/SimplexNoise.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Normals.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Null.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/ObjectMerge.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Occlusion.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/ParticlesSystemGpu.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/assemblers/particles/Particles.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/templates/particles/Default.glsl","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureAllocationsController.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureAllocation.ts","webpack://polygonjs-engine/./src/engine/nodes/gl/code/utils/TextureVariable.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/RenderController.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputeController.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/utils/ParticlesSystemGPU/GPUComputationRenderer.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Peak.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Plane.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Point.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Polywire.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Ray.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Resample.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Scatter.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Shadows.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Skin.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Sphere.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Switch.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Text.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/loaders/TTFLoader.js","webpack://polygonjs-engine/./src/engine/nodes/sop/Torus.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/TorusKnot.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Transform.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/Tube.ts","webpack://polygonjs-engine/./src/engine/nodes/sop/UvProject.ts","webpack://polygonjs-engine/./src/core/CameraController.ts","webpack://polygonjs-engine/./modules/three/examples/jsm/shaders/CopyShader.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/MaskPass.js","webpack://polygonjs-engine/./modules/three/examples/jsm/postprocessing/EffectComposer.js"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","6","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","ParamTemplate","type","init_value","options","ParamType","BUTTON","BOOLEAN","COLOR","FLOAT","FOLDER","INTEGER","OPERATOR_PATH","RampParam","DEFAULT_VALUE","RAMP","SEPARATOR","STRING","VECTOR2","VECTOR3","VECTOR4","MESSAGE","DEFAULT_INPUT_NAMES","TypedSopNode","TypedNode","container_controller","TypedContainerController","this","GeometryContainer","flags","FlagsControllerDB","NodeContext","SOP","display","set","add_hook","active","parent","display_node_controller","set_display_node","io","outputs","set_has_one_output","core_group","objects","_set_object_attributes","set_container","FROM_SET_CORE_GROUP","set_container_objects","FROM_SET_OBJECT","FROM_SET_OBJECTS","geometry","create_object","FROM_SET_GEOMETRY","geometries","forEach","FROM_SET_GEOMETRIES","message","container","core_content","CoreGroup","set_objects","touch","index","position_array","getAttribute","array","setIndex","CoreConstant","OBJECT_TYPE","MESH","object_constructor","CONSTRUCTORS_BY_NAME","MATERIALS","clone","castShadow","receiveShadow","frustumCulled","material","scene","console","log","material_node","CoreMaterial","node","add_render_hook","points_count","indices","ConnectionPointType","ConnectionPointTypes","BOOL","INT","VEC2","VEC3","VEC4","ConnectionPointTypeToParamTypeMap","SAMPLER_2D","ParamTypeToConnectionPointTypeMap","undefined","ConnectionPointInitValueMap","DEFAULT_VALUE_JSON","ConnectionPointComponentsCountMap","InputCloneMode","CoreString","ensure_float","values","toArray","map","v","join","vec","num","vector3","x","y","z","w","GLDefinitionType","TypedGLDefinition","_definition_type","_data_type","_node","_name","TypedGLDefinitionCollection","super","ATTRIBUTE","data_type","FUNCTION","UNIFORM","VARYING","_type","_init_value","_json","_create_json","TypedGlNode","spare_params_controller","GlNodeSpareParamsController","GL","connections","init_inputs","ui_data","set_layout_horizontal","set_named_output_connection_points","initialize_node","warn","assembler_controller","set_compilation_required_and_dirty","input_index","inputs","get_input_index","connection","input_connection","input_node","node_src","output_connection_point","named_output_connection_points","output_index","output_name","gl_var_name","full_path","ThreeToGl","any","params","shaders_collection_controller","_param_configs_controller","reset","list","ParamlessParamsConfig","NodeParamsConfig","ParamsConfig","params_config","ObjectType","ObjectTypes","POINTS","LINE_SEGMENTS","ObjectTypeMenuEntries","indexOf","Mesh","LineSegments","Points","materials","MeshStandard","MeshStandardMaterial","color","side","FrontSide","metalness","roughness","MeshLambertMaterial","Color","vertexColors","transparent","depthTest","PointsMaterial","size","LineBasicMaterial","linewidth","AttribClass","AttribType","AttribClassMenuEntries","VERTEX","OBJECT","AttribTypeMenuEntries","NUMERIC","ATTRIB_CLASS","ATTRIB_TYPE","OBJECT_TYPES","CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME","Scene","Group","Object3D","Bone","SkinnedMesh","BaseGlMathFunctionParamsConfig","BaseGlMathFunctionGlNode","BaseAdaptiveGlNode","gl_connections_controller","set_expected_input_types_function","_expected_input_types","set_expected_output_types_function","_expected_output_types","set_input_name_function","_gl_input_name","first_input_connection_type","first_input_connection","count","Math","max","input_connections","var_type","joined_args","named_input_connection_points","variable_for_input","body_line","gl_method_name","add_body_lines","add_definitions","gl_function_definitions","ATTRIB_NAMES_SEPARATOR","TAIL_DIGIT_MATCH_REGEXP","INDICES_LIST_SEPARATOR","NUM_REGEXP","BooleanString","word","TRUE","FALSE","test","match","parseInt","digits","substring","replace","upper_first","Date","parse","seconds","setTime","toISOString","substr","val","decimals","elements","split","frac","string_to_pad","pad","num_as_string","rule","RegExp","masks","matches_one_mask","mask","match_mask","trimed_elements","e","reverse","id","exp","element","charCodeAt","Number","MAX_SAFE_INTEGER","indices_string","sort","a","b","range_separator","range_elements","parsed","ShaderName","ParticleShaderNames","PARTICLES_0","PARTICLES_1","PARTICLES_2","PARTICLES_3","PARTICLES_4","PARTICLES_5","PARTICLES_6","PARTICLES_7","PARTICLES_8","PARTICLES_9","CoreGeometry","_geometry","uuid","_bounding_box","_create_bounding_box","computeBoundingBox","boundingBox","userData","marked_as_instance","computeVertexNormals","keys","user_data_attribs","CoreAttribute","remap_name","user_data_attrib","attributes","is_attrib_indexed","h","attrib_name","attrib_names","itemSize","attrib","set_indexed_attribute_values","setAttribute","Int32BufferAttribute","default_value","attribute_added","vec2","vec3","col","g","vec4","Float32BufferAttribute","Vector3","attrib_data","add_numeric_attrib","old_name","new_name","old_attrib","deleteAttribute","src_geometry","src_userData","attribute_name","attribute","constructor","InterleavedBufferAttribute","MonkeyPatcher","patch","new_geometry","position","position_attrib_name","_points","points_from_geometry","points","position_attrib","point_index","point","CorePoint","object_type","BufferGeometry","geometry_wrapper","first_point","old_geometry","old_geometry_wrapper","new_index_by_old_index","_indices_from_points","new_values","attrib_value","new_index_by_value","new_value","new_attrib_indices","new_index","attrib_size","index_attrib","old_indices","new_indices","old_index","old_index0","old_index1","old_index2","new_index0","new_index1","new_index2","core_geometries","indexed_attribute_names","new_values_by_attribute_name","indexed_attribute_name","index_by_values","all_geometries_points","core_geometry","geometry_points","set_attrib_index","merged_geometry","BufferGeometryUtils","mergeBufferGeometries","merged_geometry_wrapper","mergedUserData","faces_from_geometry","faces_count","CoreFace","_scene","_dirty_controller","DirtyController","_graph_node_id","graph","next_id","setNode","_graph","trigger","set_dirty","set_successors_dirty","remove_dirty_state","is_dirty","callback","add_post_dirty_hook","removeNode","src","connect","disconnect","disconnect_predecessors","disconnect_successors","predecessor_ids","predecessors","successors","all_predecessors","all_successors","NodeEvent","param","required_arguments","min_allowed_arguments_count","optional_arguments","max_allowed_arguments_count","args","index_or_path","referenced_node","get_referenced_node","request_container","path","decomposed_path","CoreWalker","find_param","input_graph_node","find_node","input","DecomposedPath","find_referenced_graph_node","create_dependency","MethodDependency","Poly","renderers_controller","RenderersController","nodes_register","NodesRegister","scenes_by_uuid","_instance","tab_menu_category","register_node","parent_context","registered_nodes","env","_env","POLY","instance","TypedMatNode","MaterialContainer","_cook_main_without_inputs_when_dirty_bound","_cook_main_without_inputs_when_dirty","MAT","initialize_base_node","name_controller","add_post_set_full_path_hook","set_material_name","cook_controller","cook_main_without_inputs","_material","create_material","Material","ObjNodeRenderOrder","TypedObjNode","ObjectContainer","render_order","MANAGER","_children_group","_attachable_to_hierarchy","_used_in_scene","OBJ","state","loading_controller","is_loading","root","update_object","attachable_to_hierarchy","add","remove","_object","_create_object_with_attributes","set_object_name","camera","FullScreenQuad","Pass","enabled","needsSwap","clear","renderToScreen","assign","setSize","render","error","_mesh","dispose","renderer","CoreGraphNode","BaseContainer","pv","ParamsValueAccessor","ParamsAccessor","_initialized","_display_node_controller","_parent_controller","HierarchyParentController","_children_controller_context","HierarchyChildrenController","_children_controller","_create_children_controller","_ui_data","UIData","_dependencies_controller","DependenciesController","_states","StatesController","_lifecycle","LifeCycleController","_serializer","NodeSerializer","_cook_controller","CookController","_io","IOController","_name_controller","NameController","set_name","_params_controller","ParamsController","_processing_context","ProcessingContext","node_context","three_imports","required_three_imports","required_imports","require_webgl2","parent_controller","set_parent","add_param","input_contents","content","set_content","end_cook","children_controller","create_node","remove_node","children","nodes_by_type","input_index_or_name","output_index_or_name","set_input","event_name","dispatch_controller","dispatch","include_param_components","serializer","to_json","TransformedParamConfig","Base","transform","ParamConfig","scale","TransformedObjNode","transform_controller","TransformController","_update_transform_from_params_scale","set_count","set_depends_on_inputs","add_on_set_input_hook","on_input_updated","hook_name","dirty_controller","has_hook","add_to_parent_transform","remove_from_parent_transform","matrix","update_transform_with_matrix","equals","update_transform_from_params","matrixAutoUpdate","dispatchEvent","rotation","copy","multiplyScalar","radians","CoreMath","degrees_to_radians","euler","Euler","updateMatrix","CoreTransform","set_params_from_matrix","_translation_matrix","Matrix4","_translation_matrix_q","Quaternion","_translation_matrix_s","_matrix","identity","_matrix_q","_matrix_e","_matrix_s","_rotate_geometry_m","_rotate_geometry_q","_rotate_geometry_vec_dest","update_scale","quaternion","decompose","setFromQuaternion","toVector3","divideScalar","PI","batch_update","set_vector3","set_float","compose","quat","MathUtils","degToRad","setFromEuler","vec_origin","vec_dest","normalize","setFromUnitVectors","makeRotationFromQuaternion","applyMatrix4","TypedParam","_options","OptionsController","_emit_controller","EmitController","_is_computing","initialize_param","_expression_controller","ParamSerializer","_value","raw_val","val1","val2","other_raw_input","are_raw_input_equal","_raw_input","other_val","are_values_equal","raw_input","_clone_raw_input","_prefilter_invalid_raw_input","emit_controller","emit","ParamEvent","RAW_INPUT_UPDATED","process_raw_input","_default_value","Promise","resolve","reject","_compute_resolves","process_computation","pop","makes_node_dirty_when_dirty","parent_param","params_node","add_graph_input","remove_graph_input","components","set_node","_parent_param","relative_path","emit_allowed","increment_count","_components","component_names","expression_controller","FlagsController","Display","DisplayFlag","Bypass","bypass","BypassFlag","FlagsControllerD","FlagsControllerB","filter","first_element","next_node","PARENT","add_path_element","CURRENT","add_node","remainder","path_from_root","node_path","param_name","src_graph_node","dest_graph_node","closest_common_parent","distance","distance_to_parent","up","ups","parent_path_elements","dest_path_elements","remaining_elements","cmptr","dest_path_element","graph_node1","graph_node2","parents1","parents","parents2","min_depth","min","found_parent","graph_node_id","graph_node","dest","current","dest_id","path_elements","make_absolute_path","DOT","CURRENT_WITH_SLASH","PARENT_WITH_SLASH","NON_LETTER_PREFIXES","THREE","Triangle","RAD_DEG_RATIO","dest_min","dest_max","fit","src_min","src_max","degrees","deg","rad","radians_to_degrees","number","rand_float","rand_vec2","step_size","steps_count","rounded_steps_count","ceil","floor","uv","sn","fract","sin","lnglat1","lnglat2","φ1","deg2rad","lat","φ2","Δφ","Δλ","lng","cos","atan2","sqrt","triangle","margin","mid_point","TriangleProp","getMidpoint","prop","delta","sub","delta_n","pow","Easing","SideParamConfig","double_sided","front","visible_if","SideController","BaseController","single_side","BackSide","new_side","DoubleSide","needsUpdate","CustomMaterialName","ShaderAssemblerMaterial","BaseGlShaderAssembler","_assemblers_by_custom_name","Map","ShaderMaterial","class_by_custom_name","custom_assembler_class_by_custom_name","assembler_class","custom_name","_add_custom_material","custom_assembler","_gl_parent_node","custom_materials","_code_builder","assembler","set_root_nodes","_root_nodes","set_param_configs_owner","set_shader_configs","shader_configs","set_variable_configs","variable_configs","custom_material","compile_material","compile_allowed","output_nodes","GlNodeFinder","find_output_nodes","states","_update_shaders","new_vertex_shader","_shaders_by_name","new_fragment_shader","FRAGMENT","vertexShader","fragmentShader","add_uniforms","uniforms","uniforms_time_dependent","uniforms_controller","add_time_dependent_uniform_owner","remove_time_dependent_uniform_owner","compile_custom_materials","_lines","shader_name","shader_names","template","_template_shader_for_shader_name","build_code_from_nodes","_build_lines","lines","output_node","input_name","named_input","var_input","variable_config","new_var","default_from_attribute","connection_point","named_input_connection_points_by_name","gl_type","attr_read","globals_handler","read_attribute","variable_config_default","default","prefix","suffix","if_condition","current_shader_name","input_names","shader_config","add_output_body_line","attribute_node","var_name","body_lines","globals_node","dependencies","definitions_by_shader_name","body_lines_by_shader_name","definition","used_output_names","globals_shader_name","UniformGLDefinition","MapUtils","push_on_array_at_entry","dependency","set_uniforms_time_dependent","handle_gl_FragCoord","handle_resolution","set_resolution_dependent","handle_globals_node","definitions","container_class","_callbacks","_container","setTimeout","process_container_request","request_input_container","then","notify_requesters","reset_caches","cook_main","processing_context","callbacks","Vector2","ATTRIB_NAME_MAP","P","N","Cd","index_by_value","current_index","TypedContainer","cloned_container","_content","_post_set_content","SkinningParamConfig","skinning","SkinningController","new_skinning","TextureMapParamConfig","use_map","BooleanParamOptions","TextureMapController","FileCopNode","DEFAULT_NODE_PATH","UV","OperatorPathOptions","BaseTextureMapController","_update_options","add_hooks","_update","texture_map_controller","update","TextureAlphaMapParamConfig","use_alpha_map","TextureAlphaMapController","alpha_map","texture_alpha_map_controller","new_element","has","unshift","new_elements","CATEGORY_OBJ","LIGHT","GEOMETRY","CAMERA","MISC","CATEGORY_COP","INPUT","ADVANCED","CATEGORY_EVENT","CATEGORY_GL","CONVERSION","DYNAMICS","GLOBALS","LOGIC","MATH","QUAT","TRIGO","UTIL","INSTANCE","CATEGORY_MAT","LINE","VOLUME","CATEGORY_SOP","ANIMATION","MODIFIER","PRIMITIVES","RENDER","CATEGORY_POST","PASS","Uint16Array","EMPTY_DATA_TEXTURE","DataTexture","LuminanceFormat","HalfFloatType","TypedCopNode","TextureContainer","COP","texture","AssemblerControllerNode","_globals_handler","GlobalsGeometryHandler","_compile_required","_deleted_params_data","_assembler","reset_configs","output_child","add_output_params","add_globals_params","allow_attribute_exports","globals","output","set_position","new_state","trigger_node","set_compilation_required","create_spare_parameters","param_config","param_configs","set_uniform_value","current_spare_param_names","spare_names","assembler_param_names","spare_param_names_to_add","spare_param_names_to_remove","params_update_options","current_param_names","names","spare_params_with_same_name_as_params","error_message","param_exporter","JsonExportDispatcher","dispatch_param","required","params_data","names_to_delete","param_options","spare","cook","to_add","update_params","VARIABLE_CONFIG_DEFAULT_BY_NAME","GlobalsBaseController","named_output_connection_points_by_name","VaryingGLDefinition","variable_name","PRE_DEFINED_ATTRIBUTES","AttributeGLDefinition","AttributeGlNode","varying_definition","set_varying_body_line","IF_RULE","_input_name_function","_output_name_function","_expected_input_types_function","_expected_output_types_function","_update_signature_if_required_bound","update_signature_if_required","func","add_on_scene_load_hook","set_post_create_params_hook","dirty_trigger","lifecycle","creation_completed","_connections_match_inputs","update_connection_types","make_successors_update_signatures","successor","graph_all_successors","gl_node","expected_input_types","expected_output_types","named_input_connections","TypedNamedConnectionPoint","named_outputs","set_named_input_connection_points","current_input_types","current_output_types","first_connection","connection_type_from_connection","MAPPINGS","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","WRAPPINGS","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","MAG_FILTERS","LinearFilter","NearestFilter","MIN_FILTERS","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","ATTRIB_MAPPING_KEYS","ATTRIB_MAPPING","mapping","wrapS","wrapT","minFilter","magFilter","FileCopParamsConfig","url","CoreTextureLoader","PARAM_DEFAULT","desktop_browse","file_type","reload","PARAM_CALLBACK_reload","menu","entries","wrap_s","wrap_t","mag_filter","min_filter","_is_static_image_url","cook_for_image","cook_for_video","_load_texture","_update_texture_params","set_texture","clear_texture","_param_url_changed","_add_video_spare_params_if_required","_previous_param_url","_set_video_current_time","texture_attrib","param_value","float","param_callback_reload","_video","currentTime","VideoTexture","image","has_param","VIDEO_TIME_PARAM_NAME","duration","range","range_locked","PARAMS_UPDATED","_remove_spare_params","_texture_loader","load_texture_from_url_or_op","ENV_MAP","background","use_background","use_material","background_color","background_material","node_selection","context","dependent_on_found_node","background_ratio","_bg_raycaster","Raycaster","_screen_quad","_create_screen_quad","PlaneBufferGeometry","quad","_screen_quad_flat_material","MeshBasicMaterial","boolean","use_background_color","update_screen_quad","update_background_color","use_background_material","update_background_material","screen_quad_flat_material","screen_quad","bg_node","found_node","_reset_ramp_interpolant_and_texture_bound","_reset_ramp_interpolant_and_texture","RampValue","from_json","raw_input1","raw_input2","is_equal","is_equal_json","are_json_equal","VALUE_UPDATED","_ramp_interpolant","_ramp_texture","_create_ramp_texture","Uint8Array","stride","width","value_at_position","RGBFormat","positions","interpolated_values","Float32Array","CubicInterpolant","_create_interpolant","sorted_points","sorted_point","create_interpolant","interpolant","evaluate","RampInterpolation","LINEAR","RampPoint","_param","_complex_data","is_spare_and_not_component","is_spare","value_changed","is_default","_require_data_complex","_data_complex","_data_simple","raw_input_serialized","default_value_serialized","add_main","has_options_overridden","overridden_options","options_overridden","option_name","option_value","JSON","stringify","INSERT_DEFINE_AFTER_MAP","INSERT_BODY_AFTER_MAP","LINES_TO_REMOVE_MAP","TypedAssembler","_leaf_nodes","_uniforms_time_dependent","_resolution_dependent","_template_shader","_replace_template","root_nodes","current_uniforms","uniform_name","uniform","time","resolution_dependent","GlobalsGlNode","CodeBuilder","code_builder","build_from_nodes","allow_new_param_configs","disallow_new_param_configs","line_type","all_lines","_param_config_owner","param_config_owner","hidden","create_globals_node_output_connections","_reset_shader_configs","_reset_variable_configs","_reset_uniforms_time_dependency","_reset_resolution_dependency","_shader_configs","create_shader_configs","sc","ShaderConfig","_variable_configs","create_variable_configs","vc","VariableConfig","if","root_node","function_declaration","builder_lines","LineType","FUNCTION_DECLARATION","define","DEFINE","body","BODY","template_lines","new_lines","line_before_define","insert_define_after","line_before_body","insert_body_after","lines_to_remove","line_before_define_found","line_before_body_found","template_line","_insert_lines","line_remove_required","line_to_remove","lines_to_add","line_to_add","src_material","clone_single","material_with_custom","mat_name","mat","uniform_value","mod","aa","execScript","Uint32Array","DataView","f","k","POSITIVE_INFINITY","Array","bufferSize","bufferType","resize","A","Error","B","C","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","fa","G","H","I","J","K","L","da","ea","O","R","ga","Q","W","verify","ha","method","buffer","Y","Z","$","ia","X","ADAPTIVE","BLOCK","Zlib","TypedEventNode","EventContainer","_eval_all_params_on_dirty_bound","_eval_all_params_on_dirty","EVENT","eval_all","event","canvas","camera_node","TypedNumericParam","converted","convert","set_expression","EXPRESSION_UPDATED","_update_value","ExpressionController","expression","requires_entities","expression_result","compute_expression","is_errored","set_value_from_components","execute_callback","TypedMultipleParam","_components_contructor","FloatParam","component_name","component","default_val","set_init_value","set_parent_param","compute_components","promises","compute","all","number_or_string","cooker","block","block_parent_emit","unblock","unblock_parent_emit","_input_names","_dependencies","_param_configs","ColorParamConfig","use_vertex_colors","opacity","alpha_test","use_fog","ColorsController","new_vertex_color","alphaTest","fog","TypedBuilderMatNode","add_on_create_hook","on_create","init","_assembler_controller","_create_assembler_controller","compile_required","_compile","post_compile","BaseLightTransformedObjNode","TypedLightObjNode","update_light_params","update_shadow_params","BaseLightHelperParamConfig","show_helper","helper_size","BaseLightHelperObjNode","wireframe","build_helper","_helper_constructor","update_helper_attachment","helper","_helper","_create_helper","build","light","visible","BaseManagerObjNode","layer","layers","enable","integer","operator_path_param_options","POST","do_post_process","post_process","use_post_process_node0","post_process_node0","use_post_process_node1","post_process_node1","use_post_process_node2","post_process_node2","use_post_process_node3","post_process_node3","_renderers_by_canvas_id","_composers_by_canvas_id","_resolution_by_canvas_id","_composers_set_in_progress_by_canvas_id","_fetch_post_process_nodes_in_progress","_post_process_nodes","_post_process_use_node_path_params","_post_process_node_path_params","aspect","composer","setup_for_aspect_ratio","default_scene","gl","rendering_context","WebGLRenderer","antialias","alpha","shadowMap","physicallyCorrectLights","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","register_renderer","set_renderer_size","setPixelRatio","devicePixelRatio","deregister_renderer","_create_composer","EffectComposer","set_composer_passes","composer_passes_nodes_changed","post_process_node","set_composers_passes","ids","clear_render_passes","render_scene_pass","RenderPass","clearAlpha","addPass","apply_to_composer","render_pass","passes","disposable_pass","_graph_node","base","last_char","children_allowed","set_child_name","request_name_to_parent","_set_core_name","post_set_name","post_set_full_path","child_node","missing_expression_references_controller","check_for_missing_references","expressions_controller","regenerate_referring_expressions","NAME_UPDATED","hook","_on_set_name_hooks","_on_set_full_path_hooks","StringParamLanguage","_programatic_visible_state","_update_visibility_and_remove_dirty_bound","update_visibility_and_remove_dirty","_ui_data_dependency_set","_default_options","options_controller","overriden","option_names","loaded","get_callback","is_cooking","has_callback","create_callback_from_string","callback_string","callback_function","Function","cook_options","desktop_browse_option","expr_option","menu_options","has_menu","language","node_selection_options","texture_options","is_hidden","VISIBLE_UPDATED","is_field_hidden","predecessor_names","visibility_predecessors","_visibility_graph_node","predecessor","update_visibility","VARIABLE_PREFIX","_set_error_from_error_bound","_set_error_from_error","_error_message","method_name","set_error","traverse_node","left","operator","right","consequent","alternate","traversed_args","arg_node","raw","AsyncFunction","getPrototypeOf","ConnectionPointTypesAvailableForAttribute","AttributeGlParamsConfig","_on_create_set_name_if_none_bound","_on_create_set_name_if_none","GlConnectionsController","_set_mat_to_recompile_if_is_exporting","INPUT_NAME","OUTPUT_NAME","set_node_lines_attribute","named_input_connection_point","export_when_connected","is_exporting","_set_mat_to_recompile","NodeJsonExporter","ParamNumericJsonExporter","OperatorPathParam","ParamOperatorPathJsonExporter","StringParam","ParamStringJsonExporter","ParamRampJsonExporter","ParamJsonExporter","_data","nodes_controller","reset_node_context_signatures","root_exporter","dispatch_node","nodes_data","properties","frame","frame_range","frame_range_locked","time_controller","master_camera_node_path","cameras_controller","ui","escape_line_breaks","CameraOrbitEventParamsConfig","allow_pan","allow_rotate","allow_zoom","tdamping","damping","screen_space_panning","rotate_speed","min_distance","max_distance","polar_angle_range","CameraOrbitControlsEventNode","TypedCameraControlsEventNode","OrbitControls","controls","enablePan","enableRotate","enableZoom","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableKeys","target","controller_class","controller","use_map_name","use_map_param","path_param","mat_attrib_name","shader_material","attr_name","_update_texture_on_uniforms","direct_params","_update_texture_on_material","_update_required_attribute","_apply_texture_on_uniforms","_remove_texture_from_uniforms","has_texture","new_texture_is_different","_do_update_define","define_name","_define_name","defines","toUpperCase","_apply_texture_on_material","_remove_texture_from_material","texture_owner","update_callback","remove_callback","texture_node","ASSEMBLER_MAP","DISTANCE","ShaderAssemblerCustomMeshDistance","DEPTH","ShaderAssemblerCustomMeshDepth","DEPTH_DOF","ShaderAssemblerCustomMeshDepthDOF","ShaderAssemblerMesh","_color_with_intensity","_light","create_light","update_light_attachment","shadow","create_shadow_params","intensity","CoreObject","CoreEntity","geo","group","compute_vertex_normals","add_attribute","attribute_names","includes","delete_attribute","src_object","new_object","sourceLookup","cloneLookup","parallelTraverse","sourceNode","clonedNode","traverse","src_node","mesh_node","src_node_geometry","mesh_node_geometry","apply_custom_materials","material_with_color","src_node_with_animations","animations","animation","skinned_node","isSkinnedMesh","clonedMesh","sourceMesh","sourceBones","skeleton","bones","bindMatrix","new_bones","bone","computeTangents","normal","normals","uvs","nVertices","tangent","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","groups","start","il","jl","handleTriangle","tmp","tmp2","n2","handleVertex","fromArray","isFinite","addScaledVector","dot","crossVectors","useGroups","isIndexed","attributesUsed","Set","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","addGroup","indexOffset","mergedIndex","getX","mergedAttribute","mergeBufferAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","normalized","arrayLength","isInterleavedBufferAttribute","interleaveAttributes","interleavedBuffer","res","getters","setters","iba","estimateBytesUsed","mem","attr","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","EPSILON","hashToIndex","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","fill","decimalShift","log10","shiftMultiplier","hash","newarray","newMorphArrays","getterFunc","ml","oldAttribute","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","GlobalsTextureHandler","_uv_name","_texture_allocations_controller","variable","globals_geometry_handler","texture_variable","add_particles_sim_uv_attribute","allocation","var_name_texture","texture_name","texture_definition","particles_sim_uv_attrib_definition","UV_ATTRIB","particles_sim_uv_varying_definition","UV_VARYING","PARTICLE_SIM_UV","curve_point_indices","accumulated_curve_point_indices","last_index_added","previous_index","attrib_sizes_by_name","new_attribute_values_by_name","attribute_sizes_by_name","attrib_sizes","create_line_segment_geometry","MouseEventParamsConfig","MouseEventNode","PARAM_CALLBACK_toggle_active","ACCEPTED_MOUSE_EVENT_TYPES","event_type","add_on_add_hook","events_controller","register_event_node","add_delete_hook","unregister_event_node","get_output_index","nodes","output_connections","node_dest","process_event","_update_register","ui_data_json","children_ids","input_ids","input_connection_output_indices","connection_input_indices","named_output_connections","param_ids","to_json_params","override_clonable_state","inputs_clonable_state_with_override","selection","param_names","include_components","to_json_params_from_names","ParamConstructorByType","BooleanParam","ButtonParam","ColorParam","FolderParam","IntegerParam","SeparatorParam","Vector2Param","Vector3Param","Vector4Param","_expression","_manager","is_expression_for_entities","deregister_param","ExpressionManager","parse_expression","update_from_method_dependency_name_change","compute_function","entities","set_entities","reset_entities","compute_expression_for_entities","_entities","_entity_callback","addUnaryOp","addBinaryOp","ParsedTree","string","string_value_elements","arguments","callee","_named_nodes","graph_node_ids","node_element_by_graph_node_id","named_nodes","path_element","joined_path","first_char","ease_i","power","ease_o","abs","ease_io","linear","ease_i2","ease_o2","ease_io2","ease_i3","ease_o3","ease_io3","ease_i4","ease_o4","ease_io4","ease_i_sin","ease_o_sin","ease_io_sin","ease_i_elastic","ease_o_elastic","ease_io_elastic","is_number","parseFloat","ensure_in_range","_found_node","expected_context","node_selection_context","_value_elements","MouseEventType","DOWN","MOVE","UP","ENTER","LEAVE","MouseEventsController","BaseEventsController","BaseMouseEventProcessor","raycaster","mouse","clientX","offsetWidth","clientY","offsetHeight","CodeEventParamsConfig","code_typescript","label","TYPESCRIPT","code_javascript","CodeEventNode","_compile_if_required","_event_processor","_last_compiled_code","function_body","TranspiledFilter","event_processor_class","event_processor_creator_function","transpiled_javascript","filtered_lines","line","_state","_hooks","on_update","run_hooks","_id","__next_id","_definitions","_errored","definitions_by_name","existing","uniq_definitions","_leaves_graph_id","_graph_ids_by_shader_name","_outputs_by_graph_id","_depth_by_graph_id","_graph_id_by_depth","input_names_for_shader_name","_shader_name","find_leaves_from_root_node","set_nodes_depth","depth","graph_id","LEAVES_FROM_NODES_SHADER","find_leaves","node_ids","nodes_from_ids","depths","graph_ids_for_depth","node_from_id","unique_inputs","booleans_by_graph_id","set_node_depth","current_depth","output_ids","output_id","GlobalsGlParamsConfig","set_node_lines_globals","domElement","quatInverse","lastPosition","lastQuaternion","document","Infinity","minZoom","maxZoom","minAzimuthAngle","maxAzimuthAngle","zoomSpeed","panSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","LEFT","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","updateProjectionMatrix","changeEvent","STATE","NONE","inverse","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","distanceToSquared","EPS","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","mouseAction","preventDefault","focus","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","addEventListener","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","MathFunctionArg2Factory","gl_output_name","out","gl_input_names","in","default_in_type","allowed_in_types","out_type","functions","BaseNodeGlMathFunctionArg2GlNode","set_output_name_function","_gl_output_name","FunctionGLDefinition","first_input_type","DistanceGlNode","DotGlNode","MaxGlNode","MinGlNode","ModGlNode","PowGlNode","ReflectGlNode","StepGlNode","typed_visible_options","ConstantGlParamsConfig","bool","int","ConstantGlNode","_allow_inputs_created_from_params","_current_connection_type","_current_param","connection_type","_current_var_name","_params_by_type","MathFunctionArg3Factory","gl_input_default_values","BaseNodeGlMathFunctionArg3GlNode","ClampGlNode","FaceforwardGlNode","SmoothStepGlNode","SHADER_DEFAULTS","MeshStandardMatParamsConfig","TextureEnvMapParamConfig","MeshStandardMatNode","texture_env_map_controller","TextureEnvMapController","envMapIntensity","env_map_intensity","set_material","use_env_map","env_map","PointsMatParamsConfig","PointsBuilderMatNode","GlAssemblerController","ShaderAssemblerPoints","compile_if_required","EVENT_CHANGE","BASE_CAMERA_DEFAULT","near","far","CameraTransformParamConfig","set_master_camera","BaseCameraObjNodeClass","PARAM_CALLBACK_set_master_camera","BaseCameraObjParamsConfig","CameraPostProcessParamConfig","CameraBackgroundParamConfig","LayerParamConfig","TypedCameraObjNode","_aspect","_background_controller","background_controller_constructor","BaseBackgroundController","_controls_controller","ControlsController","_layers_controller","LayersController","_post_process_controller","PostProcessController","layers_controller","background_controller","post_process_controller","update_composer_passes","update_camera","controls_controller","update_controls","set_as_master_camera","set_master_camera_node_path","_update_for_aspect_ratio","set_params_from_object","ThreejsViewer","_timestamp","performance","now","_core_geometries","_core_objects","_objects","_create_core_objects","core_object","core_objects","create_core_geometries","isMesh","isLine","isPoints","faces","group_name","core_objects_from_group","co","_compute_bounding_box","center","bounding_box","getCenter","getSize","bbox","expandByObject","Box3","first_geometry","has_attrib","attrib_type","attrib_class","child","geometry_from_object","rename_attribute","first_object","masks_string","matching_attrib_names","src_group","new_group","ATTRIB_NAMES","ComponentName","COMPONENT_INDICES","_core_geometry","remapped_name","component_index","remaped_name","value_index","attrib_value_index","start_index","_index","Vector4","_position","new_position","set_attrib_value_vector3","_normal","new_normal","v2","v3","new_value_index","_array_index","_count","_current_count_index","_resolve","_max_time_per_chunk","max_time_per_chunk","_check_every_interations","check_every_interations","iteratee_method","_iteratee_method_count","_bound_next_with_count","next_with_count","start_time","_array","_iteratee_method_array","_bound_next_with_array","next_with_array","_current_array_element","segments_count","arc_angle","radian_per_segment","point_radian","positions_2d","position_2d","DEFAULT","SCALE","PSCALE","EYE","DEFAULT_COLOR","DEFAULT_UV","CoreInstancer","_group_wrapper","_matrices","_is_pscale_present","_is_scale_present","_is_normal_present","_is_up_present","_do_rotate_matrices","_matrix_from_point","pscale","scale_matrix","makeScale","translate_matrix","makeTranslation","multiply","rotate_matrix","eye","geometry_to_instance","template_core_group","attributes_to_copy","instance_pts","InstancedBufferGeometry","instances_count","colors","scales","orients","has_color","instance_matrices","matrices","instance_pt","index3","index4","has_uv","index2","InstancedBufferAttribute","attrib_names_matching_mask","pt","mark_as_instance","_attribute_datas_by_name","data_keys_prefix","skip_entries","do_convert","convert_to_numeric","success_callback","progress_callback","error_callback","fetch","response","json","get_prefixed_json","catch","prefixes","first_prefix","core_geo","init_position_attribute","_find_attributes","convert_to_numeric_masks","attrib_values","_attribute_values_for_name","numerical_attrib_values","index_data","array_to_indexed_arrays","set_indexed_attribute","first_pt","_value_has_subentries","deep_attrib_name","deep_attrib_value","CoreAttributeData","from_value","json_element","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","load","onLoad","onProgress","onError","loader","setPath","setResponseType","crossOrigin","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","lastIndexOf","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","indexArray","GetFaceFromMesh","buffers","WeakMap","releaseDecoderModule","getDecoderModule","geometry1","geometry0","geometry_wrapper0","geometry_wrapper1","segments0","segments","segments1","geometries_by_segments_count","smallest_geometry","largest_geometry","smallest_segments","largest_segments","smallest_points","largest_points","smallest_points_count","all_points","points_indices","segment","matched_segment","PolyScene","AllRegister","run","_default_scene","_cameras_controller","CamerasController","_cooker","Cooker","CoreGraph","_missing_expression_references_controller","MissingReferencesController","_expressions_controller","ExpressionsController","_nodes_controller","NodesController","_time_controller","TimeController","set_scene","_uuid","wait_for_cooks_completed","_dispatch_controller","DispatchController","_events_controller","EventsController","_lifecycle_controller","_loading_controller","LoadingController","_performance","CorePerformance","set_frame","play","pause","PolySceneSerializer","_uniforms_controller","UniformsController","_webgl_controller","WebGLController","_master_camera_node_path","camera_node_path","_find_any_camera","_queue","_block_level","_process_item_bound","_process_item","process_queue","original_trigger_graph_node","blocked","delete","run_post_dirty_hooks","_next_id","Graph","directed","compound","multigraph","src_id","hasNode","setEdge","graph_has_cycle","alg","isAcyclic","removeEdge","clear_successors_cache_with_predecessors","src_id_s","dest_id_s","successor_ids","next_ids","next_next_ids","next_next_id","all_next_ids","all_predecessor_ids","all_successor_ids","_cooking_nodes_by_id","_resolves","flush","events_listener","_events_listener","emitter","process_events","auto_updating","player_mode","CONTEXT_OPTIONS","_next_renderer_id","_next_env_map_id","_renderers","_env_maps","_require_webgl2","_rendering_context_webgl","webgl2","context_name","getContext","_polygon_id","flush_callbacks_with_renderer","first_id","first_renderer","_node_register","_node_register_categories","_node_register_options","node_type","parent_node_type","option_only","option_except","context_and_type","registered_nodes_for_context_and_parent_type","_mouse_events_controller","_controllers","_get_controller_for_node","unregister_node","accepts_event","process","_dirty_count","_dirty","_dirty_timestamp","_post_dirty_hook_names","_post_dirty_hooks","_forbidden_trigger_nodes","propagate","enqueue","_cached_successors","clear_successors_cache","graph_all_predecessors","_width","_border_radius","_color","_layout_vertical","comment","_comment","UI_DATA_COMMENT_UPDATED","UI_DATA_POSITION_UPDATED","snap","round","time_dependent","TimeDependentState","ErrorState","BaseState","are_params_time_dependent","are_inputs_time_dependent","graph_predecessors","frame_node","_message","ERROR_UPDATED","_parent","base_name","contains","separator","parent_full_path","_on_set_parent_hooks","child_by_name","_context","_children","_children_by_type","_children_and_grandchildren_by_context","_is_dependent_on_children","_selection","CoreNodeSelection","dependent","_children_node","current_child_with_name","increment","current_name","update_name_from_parent","_add_to_nodes_by_type","add_to_instanciated_node","available_children_classes","node_class","initialize_base_and_node","set_creation_completed","on_set_parent","CREATED","child_node_json","lifecycle_controller","on_create_hook_allowed","run_on_create_hooks","run_on_add_hooks","run_on_child_add_hooks","webgl_controller","set_require_webgl2","output_connection","old_src","old_output_index","old_dest","old_input_index","graph_disconnect_successors","_remove_from_nodes_by_type","remove_from_instanciated_node","run_on_child_remove_hooks","run_on_delete_hooks","DELETED","parent_id","node_id","add_to_children_and_grandchildren_by_context","remove_from_children_and_grandchildren_by_context","traverse_children","_node_ids","send_update_event","nodes_to_add","node_ids_to_add","nodes_to_remove","node_ids_to_remove","SELECTION_UPDATED","_creation_completed","_on_child_add_hooks","execute_hooks_with_child_node","_on_child_remove_hooks","_on_create_hooks","execute_hooks","_on_add_hooks","_on_delete_hooks","hooks","_cooking","_cooks_count","_max_cook_time","_cook_time_with_inputs","_cook_time","_cook_time_params","_inputs_evaluation_required","_cooking_dirty_timestamp","dirty_timestamp","perf_active","started","_cook_time_start","_init_cooking_state","_cook_time_with_inputs_start","input_containers","evaluate_inputs_and_params","_init_cooking_start_time","input_container","input_clonable_state_with_override","core_content_cloned","_start_cook_if_no_errors","_increment_cooks_count","_terminate_cook_process","_record_cook_time","cook_time_end","_cook_time_params_start","record_node_cook_data","eval_required_inputs_p","METHODS","_find_scene_node_scene_nodes","SUCCESSORS","PREDECESSORS","graph_nodes","start_nodes","base_nodes","start_node","_find_base_nodes_from_node","param_nodes_referree","scene_node","base_nodes_by_graph_node_id","uniq_base_nodes","next_nodes","BaseParamClass","className","BaseNodeClass","_params_referrees_by_graph_node_id","node_by_graph_node_id","params_referree","_blocked_emit","_blocked_parent_emit","_count_by_event_name","is_multiple","block_emit","unblock_emit","is_visible","value_serialized","has_expression","frame_graph_node_id","graph_predecessor_ids","_param_create_mode","_params_by_name","_params_list","_param_names","_non_spare_params","_spare_params","_non_spare_param_names","_spare_param_names","_params_added_since_last_params_eval","_params_node","init_dependency_node","init_from_params_config","create_params","_post_create_params","_update_caches","init_param_accessors","run_post_create_params_hook","has_created_a_param","has_deleted_a_param","delete_param","param_data","current_names_in_accessor","getOwnPropertyNames","_remove_unneeded_accessors","configurable","names_to_remove","current_name_in_accessor","name_to_remove","param_with_type","set_with_type","value_with_type","child_name","existing_param","init_components","_eval_param","eval_params","_post_create_params_hook","_on_scene_load_hook_names","_on_scene_load_hooks","is_boolean","to_boolean","parse_completed","parse_started","parsed_tree","function_generator","FunctionGenerator","dependencies_controller","parse_expression_for_string_param","parse_tree","compute_allowed","eval_function","eval_allowed","expression_string_generator","ExpressionStringGenerator","new_expression_string","NATIVE_MATH_METHODS_RENAMED","math_random","EASING_METHODS","DIRECT_EXPRESSION_FUNCTIONS","remaped","LITERAL_CONSTRUCT","LiteralConstructsController","GLOBAL_CONSTANTS","INDIRECT_EXPRESSION_METHODS","MethodModule","PROPERTY_OFFSETS","BaseTraverser","_attribute_requirements_controller","AttributeRequirementsController","methods","method_index","method_dependencies","immutable_dependencies","function_main_string","function","assign_attributes_lines","attribute_presence_check_line","assign_arrays_lines","clear_error","Core","String","method_arguments","arg","literal_contruct","arguments_joined","direct_function_name","path_node","function_string","path_argument_function","path_argument","_create_method_and_dependencies","argument","argument_member_expression","attrib_node","property_node","var_attribute_size","var_array","identifier_name_without_dollar_sign","direct_constant_name","_method_centroid","method_constructor","method_dependency","find_dependency","set_jsep_node","register","Bbox","ch","Ch","centroid","Centroid","cop_res","CopRes","local","Local","opdigits","Opdigits","Point","PointsCount","Copy","str_chars_count","StrCharsCount","str_concat","StrConcat","str_index","StrIndex","str_sub","StrSub","VECTOR_NAMES","COMPONENT_NAMES","BaseMethod","create_dependency_from_index_or_path","vector_name","get_referenced_node_container","_get_value_from_container","vector","_update_from_name_change_bound","_update_from_name_change","update_from_name_change","new_path","to_path","literal","jsep_node","graph_disconnect_predecessors","node_in_path","resolved_graph_node","unresolved_path","is_index","set_resolved_graph_node","set_unresolved_path","get_referenced_param","ref","stamp_node","stamp_value","resolution","request_asset_url","desktop_controller","add_local_path","local_path_server_url","name_node","tail_digits","sub_string","range_start","range_size","_attribute_names","assign_attribute_line","assign_item_size_line","assign_array_line","var_names","var_attribute","cyclic_graph_detected","connect_immutable_dependencies","handle_method_dependencies","listen_for_name_changes","handle_method_dependency","node_simple","COMPONENT_NAMES_COLOR","other_point","json1","json2","_interpolation","generateUUID","json_point","interpolation","ramp","current_point","other_ramp_value","other_points","point1","point2","are_equal_json","COMPONENT_NAMES_VECTOR2","COMPONENT_NAMES_VECTOR3","COMPONENT_NAMES_VECTOR4","_frame","src_context","_connections","ConnectionsController","_inputs","InputsController","_outputs","OutputsController","_output_connections","max_inputs_count","_input_connections","all_connections_after_are_undefined","connections_by_id","_graph_node_inputs","_has_named_inputs","_min_inputs_count","_max_inputs_count","_depends_on_inputs","_override_clonable_state","depends_on_inputs","min_inputs_count","init_graph_node_inputs","_named_input_connection_points","connection_points","set_min_inputs_count","set_max_inputs_count","NAMED_INPUTS_UPDATED","_create_graph_node_input","graph_input_node","init_inputs_clonable_state","init_connections_controller_inputs","containers","existing_input_indices","eval_required_input","input_error_message","has_named_inputs","get_named_input_index","has_named_outputs","old_input_node","old_connection","NodeConnection","_run_on_set_input_hooks","INPUTS_UPDATED","inputs_clonable_state","FROM_NODE","_inputs_clonable_states","ALWAYS","NEVER","TypeAssert","unreachable","_user_inputs_clonable_states","_default_inputs_clonale_state_values","OVERRIDE_CLONABLE_STATE_UPDATE","_on_update_hooks","_on_update_hook_names","_node_src","_node_dest","_output_index","_input_index","add_output_connection","add_input_connection","remove_output_connection","remove_input_connection","_has_outputs","_has_named_outputs","get_named_output_index","_named_output_connection_points","NAMED_OUTPUTS_UPDATED","output_indices","used_output_indices","_nodes_by_graph_node_id","_lifecycle_on_create_allowed","_loading_state","_auto_updating","_first_object_loaded","_set_loading_state","set_auto_update","getElementById","parentElement","removeChild","_params_by_id","references","missing_expression_reference","MissingExpressionReference","_check_for_missing_references_for_node","_check_for_missing_references_for_param","missing_references","match_found","matches_path","resolve_missing_dependencies","_node_context_signatures","_instanciated_nodes_by_context_and_type","_root","ObjectsManagerNode","init_default_scene","current_parents","current_parent","node_context_signature","toLowerCase","nodes_by_ids","ObjectsManagerParamsConfig","TypedBaseManagerNode","_queued_nodes_by_id","_queued_nodes_by_path","_expected_geo_nodes","_process_queue_start","add_on_child_add_hook","_on_child_add","add_on_child_remove_hook","_on_child_remove","path_id","expected_loading_geo_nodes_by_id","add_to_scene","add_to_queue","node_input","children_group","parent_object","get_parent_for_node","used_in_scene","add_object_to_parent","remove_object_from_parent","is_display_node_cooking","geo_nodes","node_by_id","geo_node","is_displayed","remove_from_scene","ManagerContainer","_started","_start_time","_previous_timestamp","_nodes_cook_data","_durations_by_name","_durations_count_by_name","total_time","PerformanceNode","update_cook_data","current_timestamp","print_node_cook_data","print_recordings","performance_nodes","performance_node","cook_time_total","print_objects","print_object","table_entries","sorted_print_objects","table","durations_by_name","durations_count_by_name","durations","names_by_duration","sorted_durations","entry","duration_per_iteration","_cook_time_total","_cook_time_total_with_inputs","_cook_time_total_params","cook_time","cook_time_with_inputs","cook_time_params","cooks_count","cook_time_per_iteration","cook_time_total_with_inputs","cook_time_total_with_inputs_per_iteration","cook_time_total_params","cook_time_total_params_per_iteration","_time","_prev_performance_now","_frame_range","_frame_range_locked","_playing","start_frame","end_frame","SceneEvent","FRAME_RANGE_UPDATED","start_locked","end_locked","update_frame","new_frame","FRAME_UPDATED","update_time_dependent_uniform_owners","update_time","_ensure_frame_within_bounds","set_time","are_children_cooking","increment_time","performance_now","new_time","PLAY_STATE_UPDATED","playing","include_node_param_components","nodes_by_graph_node_id","params_by_graph_node_id","all_nodes","node_serializer","_time_dependent_uniform_owners","_time_dependent_uniform_owners_ids","_resolution","_resolution_dependent_uniform_owners","_resolution_dependent_uniform_owners_ids","_update_time_dependent_uniform_owners_ids","_update_resolution_dependent_uniform_owners_ids","update_resolution_dependent_uniforms","CopRegister","EventRegister","GlRegister","MatRegister","ObjRegister","SopRegister","poly","BuilderCopNode","EnvMapCopNode","NullCopNode","SwitchCopNode","BuilderCopParamsConfig","_texture_mesh","_texture_material","_texture_scene","_texture_camera","Camera","ShaderAssemblerTexture","set_assembler_globals_handler","_reset_if_resolution_changed","_render_target","_create_render_target","_renderer","_create_renderer","_reset","_pixelBuffer","_create_pixel_buffer","height","render_on_target","fragment","_fragment_shader","run_assembler","update_fragment_shader","fragment_shader","_uniforms","force_time_dependent","unforce_time_dependent","render_target","autoClear","setRenderTarget","readRenderTargetPixels","RGBAFormat","FloatType","CoreSleep","sleep","WebGLRenderTarget","format","navigator","userAgent","stencilBuffer","depthBuffer","BaseFlag","FLAG_BYPASS_UPDATED","FLAG_DISPLAY_UPDATED","create_inputs_from_params","add_input","_inputless_param_names","raw_input_serialized_by_param_name","default_value_serialized_by_param_name","param_type","last_param_init_value","default_value_from_name","gl_input_default_value","spare_param","is_root","register_node_context_signature","inputs_data","has_bypass","has_display","selected_children","selected_ids","selected_node","override_clonable_state_allowed","override","add_custom","SceneJsonExporter","sanitize_string","node_exporter","gl_var","ParamConfigsController","_param_configs_set_allowed","_function_declared","node_traverser","TypedNodeTraverser","nodes_by_shader_name","nodes_for_shader_name","sorted_nodes","root_nodes_for_shader","root_nodes_by_shader_name","sorted_node_ids","reset_code","_shaders_collection_controller","ShadersCollectionController","set_current_shader_name","set_param_configs","set_lines","set_code_lines","lines_map","add_code_lines","add_code_line_for_nodes_and_line_type","definition_type","node_definitions","collection","uniq","errored","definitions_by_node_id","lines_for_shader","first_definition","CodeFormatter","node_comment","line_wrap","post_line_separator","nodes_count","is_last","add_code_line_for_node_and_line_type","_uniform_name","_uniform","_create_uniform","uniform_by_type","callback_bound","_callback","has_value_changed","is_video_texture","set_uniform_value_from_texture","set_uniform_value_from_ramp","ramp_texture","param_constructor","_cached_param_value","has_changed","clone_value","_shader_names","_current_shader_name","_lines_controller_by_shader_name","LinesController","lines_controller","_definitions_by_node_id","_body_lines_by_node_id","LINE_SUFFIXES","LINE_PREFIXES","add_suffix","EnvMapCopParamsConfig","convert_texture_to_env_map","wait_for_renderer","PMREMGenerator","fromEquirectangular","Extension","BaseCopNodeClass","load_url","texture_as_env","set_texture_for_mapping","ext","_ext","VIDEO_EXTENSIONS","_load_as_video","loader_for_ext","EXR","EXRLoader","HDR","RGBELoader","setDataType","UnsignedByteType","BASIS","BasisTextureLoader","setTranscoderPath","detectSupport","TextureLoader","video","createElement","onloadedmetadata","source","VIDEO_SOURCE_TYPE_BY_EXT","_default_video_source_type","appendChild","img","drawImage","getImageData","PARAM_ENV_DEFAULT","ogg","ogv","mp4","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","pos","len","chunk","fromCharCode","RGBEByteToRGBHalf","floatView","int32View","toHalf","bits","sourceArray","sourceOffset","destArray","destOffset","byteArray","rgbe_header_info","gamma_re","exposure_re","format_re","dimensions_re","header","valid","comments","programtype","gamma","exposure","charAt","RGBE_ReadHeader","image_rgba_data","data_rgba","byteValue","scanline_buffer","ptr_end","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","texData","encoding","generateMipmaps","flipY","transcoderPath","transcoderBinary","transcoderPending","workerConfig","astcSupported","bptcSupported","etcSupported","dxtSupported","pvrtcSupported","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC7_M5","cTFBC3","cTFPVRTC1_4_RGBA","cTFETC1","_createTexture","texturePending","_allocateWorker","mipmaps","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","_initTranscoder","jsLoader","binaryLoader","binaryContent","BasisWorker","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","BasisModule","onRuntimeInitialized","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","SwitchCopParamsConfig","set_width","disallow_inputs_evaluation","has_input","CameraMapControlsEventNode","html_element","create_controls_instance","timestamp","controls_id","setup_controls","AbsGlNode","AcosGlNode","AddGlNode","AlignGlNode","AndGlNode","AsinGlNode","AtanGlNode","except","CeilGlNode","CosGlNode","ComplementGlNode","CrossGlNode","CycleGlNode","DegreesGlNode","DiskGlNode","DivideGlNode","EasingGlNode","ExpGlNode","Exp2GlNode","FitGlNode","Fit01GlNode","FloatToIntGlNode","FloatToVec2GlNode","FloatToVec3GlNode","FloatToVec4GlNode","FloorGlNode","FractGlNode","HsvToRgbGlNode","IntToFloatGlNode","InverseSqrtGlNode","InstanceTransformGlNode","LengthGlNode","LuminanceGlNode","NegateGlNode","LogGlNode","Log2GlNode","MixGlNode","MultGlNode","MultAddGlNode","NullGlNode","NoiseGlNode","NormalizeGlNode","OrGlNode","OutputGlNode","ParamGlNode","QuatMultGlNode","QuatFromAxisAngleGlNode","QuatToAngleGlNode","QuatToAxisGlNode","RampGlNode","RandomGlNode","RadiansGlNode","RefractGlNode","RgbToHsvGlNode","RotateGlNode","RoundGlNode","SignGlNode","SinGlNode","SqrtGlNode","SubstractGlNode","TanGlNode","TextureGlNode","TwoWaySwitchGlNode","Vec2ToFloatGlNode","Vec3ToFloatGlNode","Vec4ToFloatGlNode","Vec4ToVectorGlNode","VectorAlignGlNode","VectorAngleGlNode","FloatToIntGlParamsConfig","ParamsConfigFloatToInt","IntToFloatGlParamsConfig","ParamsConfigIntToFloat","FloatToVec2GlParamsConfig","ParamsConfig2","float2","FloatToVec3GlParamsConfig","ParamsConfig3","float3","FloatToVec4GlParamsConfig","ParamsConfig4","float4","VecToParamsConfig","BaseVecToGlNode","VecToGlFactory","components_v4","OUTPUT_NAME_VEC3","OUTPUT_NAME_W","INPUT_NAME_VEC4","in_vec4","out_vec3","out_w","MathFunctionArg1Factory","gl_input_name","BaseNodeGlMathFunctionArg1GlNode","MathFunctionArg2OperationFactory","in_prefix","operation","gl_operation","current_connections","expected_count","input_types","empty_array","second_connection","second_type","MathFunctionArg2BooleanFactory","BaseNodeGlMathFunctionArgBoolean2GlNode","op","boolean_operation","InputName","InputNames","DIR","DefaultValues","CrossGlParamsConfig","DiskGlParamsConfig","feather","vector2","EASE_NAMES","IMPORT_BY_EASE_NAME","IMPORT_DEPENDENCIES_BY_EASE_NAME","METHOD_NAMES_BY_EASE_NAME","default_ease_type","EasingGlParamsConfig","set_inputless_param_names","ease_name","glsl_function_code","ease_functions","function_dependencies","concat","in_value","BaseNodeGlMathFunctionArg5GlNode","HsvToRgbGlParamsConfig","hsv","function_declaration_lines","rgb","VARS","InstanceTransformGlParamsConfig","instance_position","instance_orientation","instance_scale","gl_output_name_position","gl_output_name_normal","_default_position","_default_normal","instancePosition","_default_instance_position","instanceOrientation","_default_input_instance_orientation","instanceScale","_default_input_instance_scale","result_position","result_normal","LuminanceGlParamsConfig","mult","BaseNodeGlMathFunctionArg4GlNode","VALUE","PRE_ADD","MULT","POST_ADD","pre_add","post_add","out_name","NOISE_NAME","NOISE_NAMES","CLASSIC_PERLIN_2D","CLASSIC_PERLIN_3D","CLASSIC_PERLIN_4D","NOISE_2D","NOISE_3D","NOISE_4D","IMPORT_BY_NOISE_NAME","INPUT_TYPES_BY_NOISE_NAME","OUTPUT_TYPE_BY_NOISE_NAME","METHOD_NAMES_BY_NOISE_NAME","OUTPUT_TYPE","OUTPUT_TYPES","NoChange","Float","Vec2","Vec3","Vec4","OUTPUT_TYPE_LABEL","CONNECTION_TYPE_BY_OUTPUT_TYPE","ALL_COMPONENTS","default_noise_type","default_output_type","amp","freq","NoiseGlParamsConfig","noise_name","output_type","octaves","amp_attenuation","freq_increase","AMP","POSITION","FREQ","OFFSET","noise_function","noise_output_gl_type","fbm_function","output_gl_type","single_noise_line","lines_count_required","assembly_args","noise","offset_gl_type","offset_components_count","offset2","assembly_line","input_type","fbm_method_name","output_name_suffix","right_hand","OutputGlParamsConfig","set_node_lines_output","ParamGlParamsConfig","as_color","create_and_push","AXIS","ANGLE","RampGlParamsConfig","input_val","RandomGlParamsConfig","seed","RgbToHsvGlParamsConfig","Mode","Modes","LabelByMode","InputNamesByMode","MethodNameByMode","InputTypesByMode","axis","RotateParamsConfig","signature","_simple_line","simple_lines","TextureParamsConfig","rgba","CONDITION","IF_TRUE","IF_FALSE","ParamlessTypedGlNode","second_or_third_connection","condition","if_true","if_false","end","MeshBasicMatNode","MeshBasicBuilderMatNode","MeshLambertMatNode","MeshLambertBuilderMatNode","MeshStandardBuilderMatNode","PointsMatNode","MeshBasicMatParamsConfig","has_content","ShaderAssemblerBasic","ShaderLib","basic","template_shader","lights","UniformsUtils","_add_custom_materials","distanceRGBA","DEPTH_PACKING","RGBADepthPacking","BasicDepthPacking","mNear","mFar","MeshLambertMatParamsConfig","ShaderAssemblerLambert","lambert","_update_metalness","_update_roughness","ShaderAssemblerStandard","is_physical","physical","standard","derivatives","onBeforeCompile","shader","PointsParamConfig","size_attenuation","sizeAttenuation","CUSTOM_ASSEMBLER_MAP","ShaderAssemblerCustomPointsDistance","ShaderAssemblerCustomPointsDepth","ShaderAssemblerCustomPointsDepthDOF","USE_SIZEATTENUATION","AmbientLightObjNode","AreaLightObjNode","DirectionalLightObjNode","HemisphereLightObjNode","PointLightObjNode","SpotLightObjNode","EventsObjNode","MaterialsObjNode","CopObjNode","PostProcessObjNode","GeoObjNode","NullObjNode","SceneObjNode","OrthographicCameraObjNode","PerspectiveCameraObjNode","FogObjNode","AmbientLightObjParamsConfig","AmbientLight","AreaLightParamConfig","AreaLightObjParamsConfig","RectAreaLight","RectAreaLightUniformsLib","initialized","DirectionalLightParamConfig","cast_shadows","shadow_res","shadow_bias","DirectionalLightObjParamsConfig","_helper_controller","HelperController","DirectionalLightHelper","DirectionalLight","bias","mapSize","_target_target","BaseLightHelper","_square","Line","_line_material","rotateX","setScalar","HemisphereLightObjParamsConfig","sky_color","ground_color","HemisphereLightHelper","HemisphereLight","groundColor","OctahedronBufferGeometry","_quat","_color1","_color2","rotateZ","BufferAttribute","setRotationFromQuaternion","setXYZ","PointLightObjParamsConfig","decay","shadow_near","shadow_far","PointLightHelper","PointLight","SphereBufferGeometry","SpotLightObjParamsConfig","penumbra","SpotLightHelper","SpotLight","_cone","p1","p2","coneLength","coneWidth","GeoObjParamConfig","DisplayNodeController","_sop_group","_create_sop_group","_on_create_bound","_on_create","_on_child_add_bound","sop_group","set_sop_group_name","display_node","_children_uuids_dict","_children_length","_request_display_node_container_bound","request_display_node_container","_display_node","_parent_object","set_parent_object","new_display_node","old_display_node","remove_children","new_objects","new_objects_are_different","NullObjParamConfig","AxesHelper","density","FogObjParamConfig","exponential","_linear_fog","Fog","getHex","_linear_fogexp2","FogExp2","SceneObjParamConfig","bg_color","OrthographicCameraObjParamConfigMixin","OrthographicCameraObjParamConfig","OrthographicCameraBackgroundController","OrthographicCamera","horizontal_size","_applied_controls_by_element_id","_controls_node","controls_param","controls_node","dispose_control_refs","controls_aleady_applied","apply_controls","CameraControlsConfig","set_from_camera_node","set_controls_events","controls_start_listener","on_controls_start","controls_end_listener","on_controls_end","update_transform_params_from_object","_camera_node_id","_controls","other_config","camera_node_id","overrideMaterial","clearColor","clearDepth","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldOverrideMaterial","oldAutoClear","getClearColor","getClearAlpha","setClearColor","autoClearColor","autoClearDepth","autoClearStencil","BaseViewer","do_render","_animate_method","animate","_canvas","random","style","outline","classList","_set_events","_init_display","activate","_cancel_animate","dispose_controls","onresize","on_resize","compute_size_and_aspect","create_renderer","prepare_current_camera","increment_time_if_playing","_request_animation_frame_id","requestAnimationFrame","cancelAnimationFrame","delete_renderer","_active","_display_scene","_init_from_scene","_build","set_camera_node","master_camera_node","viewer","_camera_node","_size","_update_graph_node","create_controls","get_operator_path","_create_graph_node","update_camera_aspect","_update_size","update_resolution_dependent_uniform_owners","_get_aspect","_update_from_camera_container","_bound_on_controls_start","_on_controls_start","_bound_on_controls_end","_on_controls_end","_bound_on_mousedown","_on_mousedown","_bound_on_mousemove","_on_mousemove","_bound_on_mouseup","_on_mouseup","onwebglcontextlost","_on_webglcontextlost","onwebglcontextrestored","_on_webglcontextrestored","request_animation_frame_id","PerspectiveCameraObjParamConfigMixin","PerspectiveCameraObjParamConfig","PerspectiveCameraBackgroundController","PerspectiveCamera","SCREEN_COORD","bl","br","tl","tr","CORNER_NAMES","_bg_corner","_bg_center","corner_name","_update_corner_vector","distanceTo","z_ratio","desired_ratio","coord","setFromCamera","ray","direction","origin","AddSopNode","AnimationCopySopNode","AnimationMixerSopNode","AttribAddMultSopNode","AttribCopySopNode","AttribCreateSopNode","AttribDeleteSopNode","AttribNormalizeSopNode","AttribPromoteSopNode","AttribRemapSopNode","AttribRenameSopNode","AttribTransferSopNode","BboxScatterSopNode","BlendSopNode","BoxSopNode","CacheSopNode","CodeSopNode","CircleSopNode","ColorSopNode","ConeSopNode","CopySopNode","DataSopNode","DataUrlSopNode","DelaySopNode","DeleteSopNode","FaceSopNode","FileSopNode","FuseSopNode","HexagonsSopNode","HierarchySopNode","InstanceSopNode","JitterSopNode","LayerSopNode","LineSopNode","MaterialSopNode","MergeSopNode","NoiseSopNode","NormalsSopNode","NullSopNode","ObjectMergeSopNode","OcclusionSopNode","ParticlesSystemGpuSopNode","PeakSopNode","PlaneSopNode","PointSopNode","PolywireSopNode","RaySopNode","ResampleSopNode","ScatterSopNode","SkinSopNode","ShadowsSopNode","SphereSopNode","SwitchSopNode","TextSopNode","TorusSopNode","TorusKnotSopNode","TransformSopNode","TubeSopNode","UvProjectSopNode","AddSopParamsConfig","create_point","open","connect_to_last_point","_create_point","_get_points","index_array","_positions","_get_positions","_triangle","_get_triangle","_deltas","_get_deltas","getArea","weights","deltas","barycentric_coordinates","getBarycoord","point_values","new_attrib_value","sum","point_value","weighted_value","face","intersect_point","point_indices","position_attrib_array","point_positions","attrib_array","dist_to_points","distance_total","point_indx","count_by_type","human_type","names_by_type","sizes_by_name","types_by_name","AnimationCopySopParamsConfig","core_group_target","target_object","src_animations","set_core_group","AnimationMixerSopParamsConfig","prepare","PARAM_CALLBACK_prepare","_previous_time","_mixer","_actions_by_name","_values_by_param_name","_update_mixer","create_mixer","_animation_target","AnimationMixer","prev_value","action","clipAction","materials_by_id","object3d","morphTargets","_update_mixer_weights","set_object","get_float","_update_mixer_time","cache_value","setEffectiveWeight","prepare_animation_mixer","AttribAddMultSopParamsConfig","_update_attrib","input_cloned","AttribCopySopParamsConfig","tnew_name","core_group_dest","core_group_src","copy_vertex_attribute_between_core_groups","src_objects","dest_objects","dest_geometry","copy_vertex_attribute_between_geometries","src_attrib","src_points_count","dest_points_count","sub_array","dest_name","AttribCreateSopParamsConfig","class","value1","for_entities","value2","value3","value4","_x_arrays_by_geometry_uuid","_y_arrays_by_geometry_uuid","_z_arrays_by_geometry_uuid","_w_arrays_by_geometry_uuid","add_point_attribute","add_object_attribute","add_numeric_attribute_to_points","add_string_attribute_to_points","add_numeric_attribute_to_object","add_string_attribute_to_object","points_from_group","compute_expression_for_points","tmp_arrays","component_param","arrays_by_geometry_uuid","_init_array_if_required","tmp_array","add_numeric_vertex_attrib","compute_expression_for_objects","set_attrib_value","values_by_core_object_index","string_values","current_array","AttribDeleteSopParamsConfig","delete_vertex_attribute","delete_object_attribute","AttribNormalizeSopParamsConfig","change_name","_normalize_attribute","normalized_values","normalized_value","target_name","AttribPromoteMode","PromoteModeMenuEntries","MIN","MAX","FIRST_FOUND","AttribPromoteSopParamsConfig","class_from","class_to","_values_per_attrib_name","_filtered_values_per_attrib_name","_core_group","_core_object","find_values","filter_values","set_values","find_values_from_points","find_values_from_object","set_values_to_points","set_values_to_object","param_size","AttribRemapSopParamsConfig","_remap_attribute","only_integer_values","sorted_values","sorted_value","AttribRenameSopParamsConfig","rename_attrib","AttribTransferSopParamsConfig","dest_group","max_samples_count","distance_threshold","blend_width","_core_group_dest","dest_points","_core_group_src","_attrib_names","_error_if_attribute_not_found_on_second_input","_build_octree_if_required","_add_attribute_if_required","_transfer_attributes","second_input_changed","_octree_timestamp","_prev_param_src_group","points_src","_octree","CoreOctree","set_points","iterator","CoreIterator","start_with_array","_transfer_attributes_for_point","dest_point","total_dist","nearest_points","find_points","_interpolate_points","point_dest","src_points","CoreInterpolate","perform","blend_with","_interpolate_with_1_point","_interpolate_with_multiple_points","point_src","position_dest","position_src","value_src","_weighted_value_from_distance","value_dest","blend","_weight_from_distance","weighted_values_src","current_position","other_positions","_weights_from_2","_weights_from_3","dist_to_positions","other_position","OctreeNode","max_points_count","sphere","Sphere","found_points","intersects_sphere","points_in_sphere","_bbox","_level","_leaves_by_octant","_points_by_octant_id","_leaves","_bounding_boxes_by_octant","_bounding_boxes_by_octant_prepared","_center","intersectsSphere","accumulated_points","containsPoint","leaf","add_point","octant_ids","octant_id","create_leaf","box","_leaf_bbox","_octant_id","_prepare_leaves_bboxes","x_pos","y_pos","z_pos","corner","bbox_centers","_bbox_center","bbox_size_quarter","bbox_center","BboxScatterSopParamsConfig","set_geometry","BlendSopParamsConfig","core_group0","core_group1","objects0","objects1","object0","object1","attrib0","attrib1","attrib0_array","attrib1_array","c0","c1","BoxSopParamsConfig","divisions","_core_transform","_cook_with_input","_cook_without_input","BoxBufferGeometry","translate","translation_matrix","CacheSopParamsConfig","cache","PARAM_CALLBACK_reset","is_cache_empty","toJSON","obj_loader","ObjectLoader","jsons","all_objects","param_callback_PARAM_CALLBACK_reset","DEFAULT_UP","CircleSopParamsConfig","_create_circle","_create_disk","CoreGeometryUtilCircle","rotate_geometry","CircleBufferGeometry","CodeSopParamsConfig","core_groups","_function","ColorSopParamsConfig","from_attribute","as_hsv","_r_arrays_by_geometry_uuid","_g_arrays_by_geometry_uuid","_b_arrays_by_geometry_uuid","_set_from_attribute","_eval_expressions","_eval_simple_values","_create_init_color","src_attrib_size","src_array","dest_array","dest_i","src_i","new_color","CoreColor","set_hsv","tmp_array_r","_update_from_param","tmp_array_g","tmp_array_b","_commit_tmp_values","target_array","euclideanModulo","clamp","setHSL","ConeSopParamsConfig","segments_radial","segments_height","cap","theta_start","theta_length","ConeBufferGeometry","CopySopParamsConfig","transform_only","copy_attributes","use_copy_expr","_attribute_names_to_copy","container0","container1","cook_with_template","cook_without_template","instance_core_group","template_points","_copy_moved_objects_on_template_points","_copy_moved_object_on_template_point","template_point","set_point","_get_moved_objects_for_template_point","moved_object","_copy_attributes_from_template","_stamp_instance_group_if_required","moved_objects","_copy_moved_objects_for_instance","set_global_index","stamped_instance_core_group","_copy_moved_objects_for_each_instance","_stamp_node","create_stamp_node","CopyStamp","set_forbidden_trigger_nodes","_global_index","_point","DEFAULT_DATA_STR","DataSopParamsConfig","JsonDataLoader","set_json","DataUrlSopParamsConfig","json_data_keys_prefix","_on_load","_on_error","DelaySopParamsConfig","inputs_contents","ComparisonOperator","ComparisonOperatorMenuEntries","DeleteSopParamsConfig","invert","hide_objects","by_object_type","by_expression","by_attrib","attrib_string","attrib_numeric","attrib_comparison_operator","by_bbox","bbox_size","by_visible","keep_points","_marked_for_deletion_per_object_index","_bbox_cache","_eval_for_points","_eval_for_objects","objects_to_keep","_eval_expressions_for_objects","_eval_type_for_objects","_eval_attrib_for_objects","marked_for_deletion","object_index","point_objects_from_deleted_objects","_point_object","init_points_count","_eval_expressions_for_points","_eval_attrib_for_points","_eval_bbox_for_points","geometry_from_points","kept_points","keep_point","first_attrib_value","comparison_attrib_value","_comparison","attrib_ComparisonOperator","object_type_name","attrib_float","in_bbox","core_points","FaceSopParamsConfig","make_faces_unique","add_face_center_attribute","add_face_id","_make_faces_unique","_add_face_center_attribute","_add_face_id","_transform_faces","current_value","face_center","fi","pi","FileSopParamsConfig","always_reference_asset","CoreLoaderGeometry","on_success","on_error","load_auto","obj","on_load_success","object2","on_load_succes_gltf","on_load_succes_drc","gltf","loader_for_gltf","loader_for_glb","loader_for_drc","loader_for_obj","GLTFLoader","draco_loader","setDRACOLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","vertices","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","isArray","groupStart","groupEnd","cloned","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ib","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","text","setMaterials","lineFirstChar","trimLeft","trim","vertexData","faceVertices","vertex","vertexParts","v1","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","hasVertexColors","buffergeometry","mesh","createdMaterials","miLen","materialHash","sourceMaterial","materialPoints","materialLine","flatShading","FuseSopParamsConfig","dist","_fuse_core_object","precision","points_by_position","HexagonsSopParamsConfig","hexagon_radius","points_only","CoreGeometryOperationHexagon","_param_size","_param_hexagon_radius","_param_points_only","side_length","half_side_length","HierarchyMode","HIERARCHY_MODES","ADD_PARENT","REMOVE_PARENT","HierarchySopParamsConfig","_add_parent_to_core_group","_remove_parent_from_core_group","_add_parent_to_object","new_parent","_add_new_parent","new_parent2","new_children","_remove_parent_from_object","new_child","current_children","_get_children_from_objects","InstanceSopParamsConfig","apply_material","core_group_to_instance","object_to_instance","_create_instance","ObjectTypeByObject","_apply_material","mat_builder_node","create_instance_buffer_geo","node_with_mat_name","mesh_lambert_mat","mesh_lambert_mat_name","mat_node","instance_transform1","output1","create_mesh_lambert","JitterSopParamsConfig","amount","rand","LayerSopParamsConfig","LineSopParamsConfig","last_pt","i_n","MaterialSopParamsConfig","apply_to_children","objects_from_group","grand_child","MergeSopParamsConfig","compact","input_core_group","_make_compact","objects_by_type","merged_objects","isLineSegments","merge_geometries","Operation","Operations","ADD","SET","SUBSTRACT","DIVIDE","NoiseSopParamsConfig","use_normals","compute_normals","_simplex_by_seed","_rest_points","core_group_rest","_rest_core_group_timestamp","simplex","_get_simplex","target_attrib_size","rest_point","current_attrib_value","noise_value","_fbm","divide","amplitude","noise3d","_create_simplex","random_generator","SimplexNoise","grad3","grad4","perm","dot3","dot4","xin","yin","i1","j1","G2","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","w0","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","NormalsSopParamsConfig","edit","update_x","update_y","update_z","recompute","_eval_expressions_for_core_group","_invert_normals","_eval_expressions_for_core_object","normal_attrib","NullSopParamsConfig","set_border_radius","ObjectMergeSopParamsConfig","geometry_node","import_input","OcclusionSopParamsConfig","samples","sep","buffer_resolution","_process_occlusion_on_object","normal_array","aoSampler","cells","sample","ao","report","ParticlesSystemGpuSopParamsConfig","auto_textures_size","max_textures_size","textures_size","ShaderAssemblerParticles","gpu_controller","ParticlesSystemGpuComputeController","render_controller","ParticlesSystemGpuRenderController","_reset_material_if_dirty_bound","_reset_material_if_dirty","_on_create_prepare_material_bound","_on_create_prepare_material","reset_gpu_compute_and_set_dirty","reset_render_material","is_on_frame_start","init_render_material","set_restart_not_required","reset_particle_groups","init_core_group","restart_simulation_if_required","compute_similation_if_required","_find_root_nodes","compile","shaders_by_name","set_shaders_by_name","reset_gpu_compute","assign_uniform_values","find_attribute_export_nodes","points_mat","points_mat_constant_point_size","points_mat_output1","create_points_mat","setup_shader_names_and_variables","update_shaders","leaves_from_nodes","TextureAllocationsController","allocate_connections_from_root_nodes","set_texture_allocations_controller","texture_allocations_controller","export_node","add_export_body_line","is_importing","connected_input_node","_handle_globals_time","_handle_globals_default","attrib_read","_allocations","_next_allocation_index","leaf_nodes","variables","TextureVariable","add_graph_node_id","connected_input_connection_point","output_names_attributes","allocate_variables","variables_by_size_inverse","allocate_variable","new_variable","allocated","has_variable","allocated_variable","has_space_for_variable","add_variable","new_allocation","TextureAllocation","next_allocation_name","explicit_shader_names","allocation_for_shader_name","input_names_for_node","_variables","set_allocation","variables_for_input_node","_allocation","_graph_node_ids","_particles_group_objects","_render_material","update_render_material_uniforms","getCurrentRenderTarget","assign_custom_uniforms","new_texture_allocations_json","_texture_allocations_json","init_custom_material_uniforms","assign_render_material","_simulation_restart_required","variables_by_name","_created_textures_by_name","_used_textures_size","init_particle_group_points","create_gpu_compute","_gpu_compute","_particles_core_group","_last_simulated_frame","_compute_simulation","update_simulation_material_uniforms","nearest_power_of_two","nearestPower2","isPowerOfTwo","max_particles_count","_init_particles_uvs","GPUComputationRenderer","renderTargets","all_variables","addVariable","setVariableDependencies","_create_texture_render_targets","_fill_textures","create_simulation_material_uniforms","uv_attrib_name","attribute_constructor","texture_allocation","texture_variables","texture_position","createTexture","_restart_simulation","renderTexture","selected_geometries","sizeX","sizeY","currentTextureIndex","passThruUniforms","passThruTexture","passThruShader","createShaderMaterial","addResolutionDefine","materialShader","toFixed","computeFragmentShader","variableName","initialValueTexture","capabilities","isWebGL2","maxVertexTextures","createRenderTarget","depVar","found","nextTextureIndex","dl","doRenderTarget","getAlternateRenderTarget","sizeXTexture","sizeYTexture","currentRenderTarget","getRenderTarget","PeakSopParamsConfig","child_object","ROTATE_START","ROTATE_END","PlaneSopParamsConfig","use_segments_count","_create_plane","size2d","PointSopParamsConfig","update_normals","tmp_array_x","tmp_array_y","tmp_array_z","do_update_param","value_param","do_update","new_array","_array_for_component","DEFAULT_R","DEFAULT_S","PolywireSopParamsConfig","closed","_geometries","_create_tube","line_segment","CoreGeometryUtilCurve","current_points","_create_tube_from_points","circle_template","circles","new_circle","circle","prev_circle","_skin","CoreGeometryOperationSkin","MAT_DOUBLE_SIDED","RaySopParamsConfig","transfer_face_normals","_bound_assign_mat","_assign_double_sided_material_to_object","_raycaster","core_group_collision","first_intersect","_assign_double_sided_material_to_core_group","intersectObjects","set_normal","double_sided_material","METHOD","CURVE_TYPE","POINTS_COUNT","SEGMENT_LENGTH","CURVE_TYPES","CENTRIPETAL","CHORDAL","CATMULLROM","ResampleSopParamsConfig","curve_type","tension","segment_length","resampled_objects","resampled_object","_resample","_create_curve_from_points","old_curve_positions","curve","CatmullRomCurve3","new_curve_points","_get_points_from_curve","getSpacedPoints","getLength","ScatterSopParamsConfig","transfer_attributes","attributes_to_transfer","add_id_attribute","areas_thresholds","area_sum","area_by_face_index","area","sorted_faces","attrib_values_by_name","start_with_count","face_index","random_position","attrib_value_at_position","ShadowsSopParamsConfig","cast_shadow","receive_shadow","SkinSopParamsConfig","process_one_input","process_two_inputs","line_segments0","_get_line_segments","first_line_segment","src_geometries","line_segment_to_geometries","prev_src_geometry","set_geometries","line_segments1","line_segments","smallest_array","largest_array","other_line_segment","other_geo","SphereType","SPHERE_TYPE","isocahedron","SPHERE_TYPES","ISOCAHEDRON","SphereSopParamsConfig","angle_range_x","angle_range_y","detail","_create_required_geometry","_create_default_sphere","_create_default_isocahedron","IcosahedronBufferGeometry","SwitchSopParamsConfig","opentype","TEXT_TYPE","TEXT_TYPES","FLAT","STROKE","TextSopParamsConfig","font","multiline","extrude","stroke_width","_font_loader","FontLoader","_loaded_fonts","_load_url","err","_create_geometry_from_type_mesh","_create_geometry_from_type_flat","_create_geometry_from_type_line","_create_geometry_from_type_stroke","displayed_text","parameters","curveSegments","TextBufferGeometry","shapes","_get_shapes","ShapeBufferGeometry","shapes_from_font","getPoints","_svg_loader","_load_svg_loader","getStrokeStyle","arcDivisions","pointsToStroke","holeShapes","shape","holes","hole","generateShapes","elements2","_load_ttf","_load_json","_ttf_loader","_load_ttf_loader","fnt","TTFLoader","SVGLoader","reversed","arraybuffer","reverseCommands","commands","paths","command","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","glyph","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","head","yMin","yMax","original_font_information","TorusSopParamsConfig","radius_tube","segments_tube","TorusBufferGeometry","TorusKnotBufferGeometry","TorusKnotSopParamsConfig","TransformSopParamConfig","look_at","pivot","from_objects","TubeSopParamsConfig","CylinderBufferGeometry","UvProjectSopParamsConfig","_camera_controller","CameraController","_update_uvs_from_camera","_processed_core_group","_camera_object","set_target","remove_target","look_at_target","obj_world_matrix","matrixWorld","uvw","_vector_in_camera_space","project","_update_always","_listener_added","_listener","_execute_callback","_remove_camera_event","old_target","_target","_add_camera_event","new_update_always","CHANGE","MOVEEND","_current_event_name","CopyShader","ShaderPass","textureID","fsQuad","MaskPass","writeValue","clearValue","setMask","setLocked","stencil","setTest","setOp","REPLACE","setFunc","setClear","EQUAL","KEEP","ClearMaskPass","renderTarget","_pixelRatio","getPixelRatio","_height","renderTarget1","renderTarget2","copyPass","clock","Clock","swapBuffers","pass","insertPass","isLastEnabledPass","passIndex","deltaTime","getDelta","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","pixelRatio"],"mappings":"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","file":"polygonjs-engine.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t6: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonppolygonjs_engine\"] = window[\"webpackJsonppolygonjs_engine\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([413,8,0,5,7,3,1,2,4,9]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// import {BaseNode} from '../../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {RampParam} from '../../../params/Ramp';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamOptionsByTypeMap} from '../../../params/types/ParamOptionsByTypeMap';\n\n// function _ParamCheckNameConsistency<T extends BaseNode>(name: string, target: T, key: keyof T, type: ParamType) {\n// \tconst key_s = key as string;\n// \tif (key_s != `_param_${name}`) {\n// \t\tconsole.warn('param name inconsistent');\n// \t}\n// \tconst param = target.params.get(name);\n// \tif (param && param.type != type) {\n// \t\tconsole.warn('param type inconsistent');\n// \t}\n// }\n// export const _ParamBoolean = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.BOOLEAN);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.boolean(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.float(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(default_value: number, options?: ParamOptions) {\n// \treturn <T extends NodeParamsConfig>(target: T, key: string) => {\n// \t\t// _ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\t// const config = new ParamConfig(ParamType.FLOAT, default_value, options);\n// \t\t// target.add_config(key, config);\n// \t\t// target.set_default_value(key, default_value);\n// \t\t// target.set_options(key, options);\n// \t\t// Object.defineProperty(target.options, key, {\n// \t\t// \tget: () => target.params.float(name),\n// \t\t// });\n// \t};\n// };\n// export const _ParamString = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.STRING);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.string(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector2 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR2);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector2(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector3 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR3);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector3(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamColor = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.COLOR);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.color(name),\n// \t\t});\n// \t};\n// };\n// declare global {\n// \tconst ParamB: typeof _ParamBoolean;\n// \tconst ParamF: typeof _ParamFloat;\n// \tconst ParamS: typeof _ParamString;\n// \tconst ParamV2: typeof _ParamVector2;\n// \tconst ParamV3: typeof _ParamVector3;\n// \tconst ParamC: typeof _ParamColor;\n// }\n// class ParamConfig<T extends ParamType> {\n// \tconstructor(readonly type: T, readonly default_value: ParamValuesTypeMap[T], readonly options: ParamOptions = {}) {}\n// }\nexport class ParamTemplate<T extends ParamType> {\n\treadonly value_type!: ParamValuesTypeMap[T];\n\treadonly param_class!: ParamConstructorMap[T];\n\t// readonly options?: ParamOptions;\n\n\tconstructor(public type: T, public init_value: ParamInitValuesTypeMap[T], public options?: ParamOptions) {}\n}\n\n// class Test1 {\n// \ta: number\n// \tb: string\n// }\n// type test = Extract<typeof Test1, string>;\n// type test2 = Pick<typeof Test1, 'b'>;\n// type test3 = Test1['b'];\n// type test2 = keyof BoxSopParamConfig;\nexport class ParamConfig {\n\t// static _GENERIC<T extends ParamType> (type: T, init_value: ParamInitValuesTypeMap[T], options?: ParamOptions) {\n\t// \treturn new ParamTemplate<T>(type, init_value, options);\n\t// }\n\t// static BUTTON(init_value: ParamInitValuesTypeMap[ParamType.BUTTON], options?: ParamOptions) {\n\t// \treturn this._GENERIC<ParamType.BUTTON>(ParamType.BUTTON, init_value, options)\n\t// }\n\tstatic BUTTON(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BUTTON>(ParamType.BUTTON, init_value, options);\n\t}\n\tstatic BOOLEAN(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BOOLEAN>(ParamType.BOOLEAN, init_value, options);\n\t}\n\tstatic COLOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.COLOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.COLOR>(ParamType.COLOR, init_value, options);\n\t}\n\tstatic FLOAT(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FLOAT>(ParamType.FLOAT, init_value, options);\n\t}\n\tstatic FOLDER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FOLDER] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FOLDER>(ParamType.FOLDER, init_value, options);\n\t}\n\tstatic INTEGER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.INTEGER>(ParamType.INTEGER, init_value, options);\n\t}\n\tstatic OPERATOR_PATH(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n\t}\n\tstatic RAMP(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.RAMP] = RampParam.DEFAULT_VALUE,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.RAMP]\n\t) {\n\t\treturn new ParamTemplate<ParamType.RAMP>(ParamType.RAMP, init_value, options);\n\t}\n\tstatic SEPARATOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.SEPARATOR] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.SEPARATOR>(ParamType.SEPARATOR, init_value, options);\n\t}\n\tstatic STRING(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.STRING] = '',\n\t\toptions?: ParamOptionsByTypeMap[ParamType.STRING]\n\t) {\n\t\treturn new ParamTemplate<ParamType.STRING>(ParamType.STRING, init_value, options);\n\t}\n\tstatic VECTOR2(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR2]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR2>(ParamType.VECTOR2, init_value, options);\n\t}\n\tstatic VECTOR3(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR3]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR3>(ParamType.VECTOR3, init_value, options);\n\t}\n\tstatic VECTOR4(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR4]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR4>(ParamType.VECTOR4, init_value, options);\n\t}\n}\n\nexport class NodeParamsConfig implements Dictionary<ParamTemplate<ParamType>> {\n\t[name: string]: ParamTemplate<ParamType>;\n}\n// export class NodeParamsConfig {}\n\n// interface ParamConfig {\n// \ttype: ParamType;\n// \tvalue: any;\n// \toptions?: ParamOptions;\n// }\n// export type ParamConfigsArray = ParamConfig[];\n\n// declare global {\n// \tinterface Window {\n// \t\tParamB: typeof _ParamB;\n// \t\tParamC: typeof _ParamC;\n// \t}\n// }\n// window.ParamC = _ParamC;\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\n// import {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// import lodash_includes from 'lodash/includes';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport {TypedNode} from '../_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {ObjectType} from '../../../core/geometry/Constant';\n\nimport {GeometryContainer} from '../../containers/Geometry';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerDB} from '../utils/FlagsController';\n// import * as Container from '../../Container/Geometry';\n\n// import {AttribTypeParam} from './concerns/AttribTypeParam';\n// import {Bypass} from './Concerns/Bypass';\n// import {GroupParam} from './concerns/GroupParam';\n// import {Named} from './concerns/Named'; // TODO; typescript\n// import {ObjectTypeParam} from './concerns/ObjectTypeParam';\n\n// TODO: do I really need to add attributes in objects?\n// TODO: after setting a node dirty, it should clear its object\n\n// import {RequestContainerGeometryCallback} from '../../../Engine/Container/Geometry'\n// const CONTAINER_CLASS = 'Geometry';\n\nenum MESSAGE {\n\tFROM_SET_CORE_GROUP = 'from set_core_group',\n\tFROM_SET_GROUP = 'from set_group',\n\tFROM_SET_OBJECTS = 'from set_objects',\n\tFROM_SET_OBJECT = 'from set_object',\n\tFROM_SET_GEOMETRIES = 'from set_geometries',\n\tFROM_SET_GEOMETRY = 'from set_geometry',\n}\n\nconst INPUT_GEOMETRY_NAME = 'input geometry';\nconst DEFAULT_INPUT_NAMES = [INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME];\n\nexport class TypedSopNode<K extends NodeParamsConfig> extends TypedNode<'GEOMETRY', BaseSopNodeType, K> {\n\tcontainer_controller: TypedContainerController<GeometryContainer> = new TypedContainerController<GeometryContainer>(\n\t\tthis,\n\t\tGeometryContainer\n\t);\n\tpublic readonly flags: FlagsControllerDB = new FlagsControllerDB(this);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.SOP;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// _master_group: Group\n\t// _objects: Object3D[] = []\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\tif (this.flags.display) {\n\t\t\tthis.flags.display.set(false);\n\t\t\tthis.flags.display.add_hook(() => {\n\t\t\t\tif (this.flags.display.active) {\n\t\t\t\t\tconst parent = this.parent;\n\t\t\t\t\tif (parent && parent.display_node_controller) {\n\t\t\t\t\t\tparent.display_node_controller.set_display_node(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\t// request_container() {\n\t// \treturn super.request_container(); //as Promise<GeometryContainer>;\n\t// }\n\n\t//\n\t//\n\t// GEOMETRY\n\t//\n\t//\n\t// group(): Group {\n\t// \treturn this._master_group = this._master_group || this._create_group()\n\t// }\n\t// set_group(group: Group){\n\t// \tthis._clear_objectsI() //(MESSAGE.FROM_SET_GROUP);\n\t// \tthis._master_group.add(group)\n\t// \t// let child;\n\n\t// \t// const new_children = [];\n\t// \t// while (child = group.children[0]) {\n\t// \t// \tnew_children.push(child);\n\t// \t// \tgroup.remove(child);\n\t// \t// }\n\n\t// \t// new_children.forEach(child=> {\n\t// \t// \tthis._master_group.add( child );\n\t// \t// });\n\n\t// \t// // if (this.allow_add_object_attributes()) {\n\t// \t// \tthis._master_group.traverse(object=> {\n\t// \t// \t\tthis._set_object_attributes(object);\n\t// \t// \t});\n\t// \t// // }\n\t// \tthis.set_container(this._master_group, MESSAGE.FROM_SET_GROUP);\n\t// }\n\tset_core_group(core_group: CoreGroup) {\n\t\tconst objects = core_group.objects();\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\tthis.set_container(core_group, MESSAGE.FROM_SET_CORE_GROUP);\n\t}\n\n\tset_object(object: Object3D) {\n\t\t// this._clear_objects();\n\t\t// this.add_object(object);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_OBJECT);\n\t\tthis._set_object_attributes(object);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_OBJECT);\n\t}\n\tset_objects(objects: Object3D[]) {\n\t\t// this._clear_objects();\n\t\t// const list = objects;\n\t\t// lodash_times(list.length, i=> {\n\t\t// \tconst object = list[i];\n\t\t// \tthis.add_object(object);\n\t\t// });\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_OBJECTS);\n\t}\n\n\t// add_object(object: Object3D) {\n\t// \tif (object != null) {\n\t// \t\tthis.group().add(object);\n\t// \t\t// if (this.allow_add_object_attributes()) {\n\t// \t\tthis._set_object_attributes(object);\n\t// \t\t// }\n\t// \t\treturn object;\n\t// \t}\n\t// }\n\t// add_geometry(geometry: BufferGeometry, type: ObjectType) {\n\t// \tlet object;\n\t// \tif (geometry.index == null) {\n\t// \t\tthis._add_index(geometry);\n\t// \t}\n\n\t// \tif ((object = this.create_object(geometry, type)) != null) {\n\t// \t\tthis.add_object(object);\n\t// \t}\n\t// }\n\n\tset_geometry(geometry: BufferGeometry, type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\t// this.add_geometry(geometry, type);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_GEOMETRY);\n\t\tconst object = this.create_object(geometry, type);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_GEOMETRY);\n\t}\n\t//this.end_cook()\n\n\tset_geometries(geometries: BufferGeometry[], type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\tconst objects: Object3D[] = [];\n\t\tlet object;\n\t\tgeometries.forEach((geometry) => {\n\t\t\tobject = this.create_object(geometry, type);\n\t\t\tthis._set_object_attributes(object);\n\t\t\tobjects.push(object);\n\t\t});\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_GEOMETRIES);\n\t}\n\n\tset_container_objects(objects: Object3D[], message: MESSAGE) {\n\t\tconst core_group = this.container_controller.container.core_content() || new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\tcore_group.touch();\n\t\tthis.set_container(core_group);\n\t}\n\n\t// do_clone_inputs() {\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_clone_inputs')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\t// allow_add_object_attributes() {\n\t// \tif (!this.do_clone_inputs()) { return false; }\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_add_object_attributes')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\n\t// _create_group() {\n\t// \tconst group = new Group();\n\t// \tgroup.name = this.full_path();\n\n\t// \tthis._init_sop_bypass_group(group)\n\n\t// \treturn group;\n\t// }\n\n\tcreate_object(geometry: BufferGeometry, type?: ObjectType): Object3DWithGeometry {\n\t\t// ensure it has an index\n\t\tif (!geometry.index) {\n\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t}\n\n\t\tif (type == null) {\n\t\t\ttype = CoreConstant.OBJECT_TYPE.MESH;\n\t\t}\n\t\t// if (!lodash_includes(CoreConstant.OBJECT_TYPES, type)) {\n\t\t// \tconst human_type = CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[type];\n\t\t// \tconst human_names = CoreConstant.OBJECT_TYPES.map(\n\t\t// \t\t(n) => CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[n]\n\t\t// \t);\n\t\t// \tthrow `type '${human_type}' not recognized. Available types are ${human_names.join(', ')}.`;\n\t\t// }\n\n\t\t// if (geometry != null) {\n\t\tconst object_constructor = CoreConstant.CONSTRUCTORS_BY_NAME[type]; //THREE[type];\n\t\tconst material = CoreConstant.MATERIALS[type].clone();\n\t\tconst object = new object_constructor(geometry, material) as Object3DWithGeometry;\n\t\tobject.castShadow = true;\n\t\tobject.receiveShadow = true;\n\t\tobject.frustumCulled = false;\n\n\t\treturn object;\n\t\t// }\n\t}\n\n\t_set_object_attributes(object: Object3D) {\n\t\t// if (!this.allow_add_object_attributes()) { return; }\n\t\t// TODO: the exception below are just to debug when a geo could be reused or not cloned properly\n\t\t// I could remove that when more sure it all refreshes fine, and this would allow the null or merge to\n\t\t// not have to clone the data\n\t\t// if ((object.name == null) && (object.name !== '')) {\n\t\t// \tif (this.do_clone_inputs()) {\n\t\t// \t\tthrow `object.name already set to ${object.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t}\n\t\t// } else {\n\t\t// \tobject.name = this.full_path();\n\t\t// }\n\n\t\t// if ((geometry = object.geometry) != null) {\n\t\t// \tif ((geometry.name == null) && (geometry.name !== '')) {\n\t\t// \t\tif (this.do_clone_inputs()) {\n\t\t// \t\t\tthrow `geometry.node_name already set to ${geometry.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tgeometry.name = this.full_path();\n\t\t// \t}\n\t\t// }\n\t\tconst material: Material = (object as Mesh).material as Material;\n\t\tif (material) {\n\t\t\tif (!this.scene) {\n\t\t\t\tconsole.log('no scene');\n\t\t\t\tthrow 'no scene';\n\t\t\t}\n\t\t\tconst material_node = CoreMaterial.node(this.scene, material) as BaseMatNodeType;\n\t\t\tif (material_node) {\n\t\t\t\tmaterial_node.add_render_hook(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// _clear_objects() {\n\t// \tconst group = this.group();\n\n\t// \tlet child\n\t// \twhile(child = group.children[0]) {\n\t// \t\tgroup.remove(child);\n\t// \t}\n\t// \t// const children = lodash_clone(group.children);\n\t// \t// let child;\n\t// \t// for(let i=0; i < children.length; i++){\n\t// \t// \tchild = children[i]\n\t// \t// \tgroup.remove(child);\n\t// \t// \tchild.traverse((object)=>{\n\t// \t// \t\tif (object.geometry != null) {\n\t// \t// \t\t\tobject.geometry.dispose();\n\t// \t// \t\t}\n\t// \t// \t\t// no more material dispose since each the materials are not cloned\n\t// \t// \t\t// if (object.material){\n\t// \t// \t\t// \tif (lodash_isArray(object.material)){\n\t// \t// \t\t// \t\tobject.material.forEach((mat)=>{mat.dispose()})\n\t// \t// \t\t// \t} else {\n\t// \t// \t\t// \t\tobject.material.dispose()\n\t// \t// \t\t// \t}\n\t// \t// \t\t// }\n\t// \t// \t});\n\t// \t// }\n\t// }\n\n\t_add_index(geometry: BufferGeometry) {\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_array = position_attrib.array;\n\t\tconst points_count = position_array.length / 3;\n\t\tconst indices: number[] = [];\n\t\tlodash_times(points_count, (i) => indices.push(i));\n\n\t\tgeometry.setIndex(indices);\n\t}\n}\n\nexport type BaseSopNodeType = TypedSopNode<NodeParamsConfig>;\nexport class BaseSopNodeClass extends TypedSopNode<NodeParamsConfig> {}\n","import {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\n\nimport {ParamType} from '../../../poly/ParamType';\nimport {RampParam} from '../../../params/Ramp';\n\n// TODO: simplify GLDataType into one enum\n// http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html\n\n//\n//\n// GL Data types\n//\n//\nexport enum ConnectionPointType {\n\tBOOL = 'bool',\n\t// BVEC2 = 'bvec2',\n\t// BVEC3 = 'bvec3',\n\t// BVEC4 = 'bvec4',\n\tINT = 'int',\n\t// IVEC2 = 'ivec2',\n\t// IVEC3 = 'ivec3',\n\t// IVEC4 = 'ivec4',\n\tFLOAT = 'float',\n\tVEC2 = 'vec2',\n\tVEC3 = 'vec3',\n\tVEC4 = 'vec4',\n\t// matrices to be used later\n\t// MAT2 = 'mat2',\n\t// MAT3 = 'mat3',\n\t// MAT4 = 'mat4',\n\tSAMPLER_2D = 'sampler2D',\n}\n\n//\n//\n// ALL GL Data types in an array\n//\n//\nexport const ConnectionPointTypes: Array<ConnectionPointType> = [\n\tConnectionPointType.BOOL,\n\t// ConnectionPointType.BVEC2,\n\t// ConnectionPointType.BVEC3,\n\t// ConnectionPointType.BVEC4,\n\tConnectionPointType.INT,\n\t// ConnectionPointType.IVEC2,\n\t// ConnectionPointType.IVEC3,\n\t// ConnectionPointType.IVEC4,\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\n//\n//\n// Map to convert from a GL Data type to a ParamType\n//\n//\ntype ConnectionPointTypeToParamTypeMapGeneric = {[key in ConnectionPointType]: ParamType};\nexport interface IConnectionPointTypeToParamTypeMap extends ConnectionPointTypeToParamTypeMapGeneric {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT;\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2;\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3;\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4;\n}\nexport const ConnectionPointTypeToParamTypeMap: IConnectionPointTypeToParamTypeMap = {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT,\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2,\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3,\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4,\n\n\t[ConnectionPointType.SAMPLER_2D]: ParamType.RAMP,\n};\n\n//\n//\n// Map to convert from a ParamType to GL Data type\n//\n//\ntype ParamTypeToConnectionPointTypeMapGeneric = {[key in ParamType]: ConnectionPointType | undefined};\nexport interface IParamTypeToConnectionPointTypeMap extends ParamTypeToConnectionPointTypeMapGeneric {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL;\n\t[ParamType.COLOR]: ConnectionPointType.VEC3;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT;\n\t[ParamType.FOLDER]: undefined;\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2;\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3;\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4;\n\t[ParamType.BUTTON]: undefined;\n\t[ParamType.OPERATOR_PATH]: undefined;\n\t[ParamType.RAMP]: undefined;\n\t[ParamType.SEPARATOR]: undefined;\n\t[ParamType.STRING]: undefined;\n}\nexport const ParamTypeToConnectionPointTypeMap: IParamTypeToConnectionPointTypeMap = {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL,\n\t[ParamType.COLOR]: ConnectionPointType.VEC3,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT,\n\t[ParamType.FOLDER]: undefined,\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2,\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3,\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4,\n\t[ParamType.BUTTON]: undefined,\n\t[ParamType.OPERATOR_PATH]: undefined,\n\t[ParamType.RAMP]: undefined,\n\t[ParamType.SEPARATOR]: undefined,\n\t[ParamType.STRING]: undefined,\n};\n\n//\n//\n// Map of GL Data type default values\n//\n//\nexport type ConnectionPointInitValueMapGeneric = {\n\t[key in ConnectionPointType]: ParamInitValuesTypeMap[IConnectionPointTypeToParamTypeMap[key]];\n};\nexport const ConnectionPointInitValueMap: ConnectionPointInitValueMapGeneric = {\n\t[ConnectionPointType.BOOL]: false,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 0,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 0,\n\t[ConnectionPointType.VEC2]: [0, 0],\n\t[ConnectionPointType.VEC3]: [0, 0, 0],\n\t[ConnectionPointType.VEC4]: [0, 0, 0, 0],\n\n\t[ConnectionPointType.SAMPLER_2D]: RampParam.DEFAULT_VALUE_JSON,\n};\n\n//\n//\n// Map of GL Data type component counts\n//\n//\nexport type ConnectionPointComponentsCountMapGeneric = {\n\t[key in ConnectionPointType]: number;\n};\nexport const ConnectionPointComponentsCountMap: ConnectionPointComponentsCountMapGeneric = {\n\t[ConnectionPointType.BOOL]: 1,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 1,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 1,\n\t[ConnectionPointType.VEC2]: 2,\n\t[ConnectionPointType.VEC3]: 3,\n\t[ConnectionPointType.VEC4]: 4,\n\t[ConnectionPointType.SAMPLER_2D]: 1,\n};\n","export enum InputCloneMode {\n\tALWAYS = 'always',\n\tNEVER = 'never',\n\tFROM_NODE = 'from_node',\n}\n","export enum ParamType {\n\tBOOLEAN = 'boolean',\n\tBUTTON = 'button',\n\tCOLOR = 'color',\n\tFLOAT = 'float',\n\tFOLDER = 'folder',\n\tINTEGER = 'integer',\n\tOPERATOR_PATH = 'operator_path',\n\tRAMP = 'ramp',\n\tSEPARATOR = 'separator',\n\tSTRING = 'string',\n\tVECTOR2 = 'vector2',\n\tVECTOR3 = 'vector3',\n\tVECTOR4 = 'vector4',\n}\n// export type ParamTypeKey = ParamType\n// export type ParamTypeKeysArray = Array<ParamTypeKey>\n// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]\n","export enum NodeContext {\n\tCOP = 'cop',\n\tEVENT = 'event',\n\tGL = 'gl',\n\tJS = 'js',\n\tMANAGER = 'managers',\n\tMAT = 'mat',\n\tOBJ = 'objects',\n\tSOP = 'sop',\n\tPOST = 'post',\n}\n\nexport interface NodeContextAndType {\n\tcontext: NodeContext;\n\ttype: string;\n}\n","import {CoreString} from './String';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isString from 'lodash/isString';\n\nexport class ThreeToGl {\n\tstatic any(value: any) {\n\t\tif (lodash_isString(value)) {\n\t\t\treturn value;\n\t\t}\n\t\tif (lodash_isBoolean(value)) {\n\t\t\treturn `${value}`;\n\t\t}\n\n\t\tif (lodash_isNumber(value)) {\n\t\t\treturn `${CoreString.ensure_float(value)}`;\n\t\t} else {\n\t\t\tconst values = value.toArray().map((v: number) => {\n\t\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t\t});\n\t\t\tconst gl_type = `vec${values.length}`;\n\t\t\treturn `${gl_type}(${values.join(', ')})`;\n\t\t}\n\t}\n\n\tstatic vector3(vec: Vector3 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec3(${values.join(', ')})`;\n\t}\n\tstatic vector2(vec: Vector2 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec;\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`;\n\t\t});\n\t\treturn `vec2(${values.join(', ')})`;\n\t}\n\n\tstatic vector3_float(vec: Vector3 | string, num: number | string): string {\n\t\tif (!lodash_isString(num)) {\n\t\t\tnum = CoreString.ensure_float(num);\n\t\t}\n\t\treturn `vec4(${this.vector3(vec)}, ${num})`;\n\t}\n\n\tstatic float4(x: number | string, y: number | string, z: number | string, w: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\tif (!lodash_isString(w)) {\n\t\t\tw = CoreString.ensure_float(w);\n\t\t}\n\t\treturn `vec4(${x}, ${y}, ${z}, ${w})`;\n\t}\n\tstatic float3(x: number | string, y: number | string, z: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z);\n\t\t}\n\t\treturn `vec3(${x}, ${y}, ${z})`;\n\t}\n\tstatic float2(x: number | string, y: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y);\n\t\t}\n\t\treturn `vec2(${x}, ${y})`;\n\t}\n\tstatic float(x: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x);\n\t\t}\n\t\treturn `${x}`;\n\t}\n\tstatic int(x: number | string) {\n\t\treturn `${x}`;\n\t}\n\tstatic bool(x: number | string) {\n\t\treturn `${x}`;\n\t}\n}\n","import {BaseGlNodeType} from '../_Base';\nimport {TypedGLDefinitionCollection} from './GLDefinitionCollection';\nimport {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\n\nexport enum GLDefinitionType {\n\tATTRIBUTE = 'attribute',\n\tFUNCTION = 'function',\n\tUNIFORM = 'uniform',\n\tVARYING = 'varying',\n}\n\nexport abstract class TypedGLDefinition<T extends GLDefinitionType> {\n\t// constructor(protected _node: BaseGlNodeType, protected _name: string) {}\n\tconstructor(\n\t\tprotected _definition_type: T,\n\t\tprotected _data_type: ConnectionPointType,\n\t\tprotected _node: BaseGlNodeType,\n\t\tprotected _name: string\n\t) {\n\t\t// super(_node, _name);\n\t}\n\n\tget definition_type() {\n\t\treturn this._definition_type;\n\t}\n\tget data_type() {\n\t\treturn this._data_type;\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\t// get id() {\n\t// \treturn this._data_type;\n\t// }\n\n\tabstract get line(): string;\n\tcollection_instance() {\n\t\treturn new TypedGLDefinitionCollection<T>();\n\t}\n}\n\nexport class AttributeGLDefinition extends TypedGLDefinition<GLDefinitionType.ATTRIBUTE> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.ATTRIBUTE, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `attribute ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class FunctionGLDefinition extends TypedGLDefinition<GLDefinitionType.FUNCTION> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.FUNCTION, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn this.name;\n\t}\n}\n\nexport class UniformGLDefinition extends TypedGLDefinition<GLDefinitionType.UNIFORM> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.UNIFORM, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `uniform ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class VaryingGLDefinition extends TypedGLDefinition<GLDefinitionType.VARYING> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.VARYING, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `varying ${this.data_type} ${this.name}`;\n\t}\n}\nexport type BaseGLDefinition = TypedGLDefinition<GLDefinitionType>;\n","import {\n\tConnectionPointType,\n\tConnectionPointInitValueMapGeneric,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n\tIConnectionPointTypeToParamTypeMap,\n} from './ConnectionPointType';\n// import {ParamInitValuesTypeMap} from '../params/ParamsController';\n\nexport interface TypedNamedConnectionPointData<T extends ConnectionPointType> {\n\tname: string;\n\ttype: T;\n}\n\nexport class TypedNamedConnectionPoint<T extends ConnectionPointType> {\n\tprivate _json: TypedNamedConnectionPointData<T> | undefined;\n\n\tconstructor(\n\t\tprotected _name: string,\n\t\tprotected _type: T,\n\t\tprotected _init_value?: ConnectionPointInitValueMapGeneric[T]\n\t) {\n\t\tif (this._init_value === undefined) {\n\t\t\tthis._init_value = ConnectionPointInitValueMap[this._type];\n\t\t}\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget param_type(): IConnectionPointTypeToParamTypeMap[T] {\n\t\treturn ConnectionPointTypeToParamTypeMap[this._type];\n\t}\n\tget init_value() {\n\t\treturn this._init_value;\n\t}\n\n\tto_json(): TypedNamedConnectionPointData<T> {\n\t\treturn (this._json = this._json || this._create_json());\n\t}\n\tprivate _create_json(): TypedNamedConnectionPointData<T> {\n\t\treturn {\n\t\t\tname: this._name,\n\t\t\ttype: this._type,\n\t\t};\n\t}\n}\n\nexport type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;\n","import {TypedNode} from '../_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {BaseGlShaderAssembler} from './code/assemblers/_Base';\nimport {AssemblerControllerNode} from './code/Controller';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamInitValueSerialized} from '../../params/types/ParamInitValueSerialized';\nimport {GlNodeSpareParamsController} from './utils/SpareParamsController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport class TypedGlNode<K extends NodeParamsConfig> extends TypedNode<'GL', BaseGlNodeType, K> {\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.GL;\n\t}\n\tprotected _param_configs_controller: ParamConfigsController | undefined;\n\tprotected _assembler: BaseGlShaderAssembler | undefined;\n\n\treadonly spare_params_controller: GlNodeSpareParamsController = new GlNodeSpareParamsController(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController | undefined;\n\n\tinitialize_base_node() {\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.io.outputs.set_named_output_connection_points([]);\n\n\t\tthis.spare_params_controller.initialize_node();\n\t}\n\tcook() {\n\t\tconsole.warn('gl nodes should never cook');\n\t}\n\n\tprotected _set_mat_to_recompile() {\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tget material_node(): AssemblerControllerNode | undefined {\n\t\tif (this.parent) {\n\t\t\tif (this.parent.type == this.type) {\n\t\t\t\treturn (this.parent as BaseGlNodeType)?.material_node;\n\t\t\t} else {\n\t\t\t\treturn this.parent as AssemblerControllerNode;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// VARIABLES\n\t//\n\t//\n\tgl_var_name(name: string) {\n\t\treturn `v_POLY_${this.name}_${name}`;\n\t}\n\n\tvariable_for_input(name: string): string {\n\t\tconst input_index = this.io.inputs.get_input_index(name);\n\t\tconst connection = this.io.connections.input_connection(input_index);\n\t\tif (connection) {\n\t\t\tconst input_node = (<unknown>connection.node_src) as BaseGlNodeType;\n\t\t\tconst output_connection_point =\n\t\t\t\tinput_node.io.outputs.named_output_connection_points[connection.output_index];\n\t\t\tif (output_connection_point) {\n\t\t\t\tconst output_name = output_connection_point.name;\n\t\t\t\treturn input_node.gl_var_name(output_name);\n\t\t\t} else {\n\t\t\t\tconsole.warn(`no output called '${name}' for gl node ${input_node.full_path()}`);\n\t\t\t\tthrow 'variable_for_input ERROR';\n\t\t\t}\n\t\t} else {\n\t\t\treturn ThreeToGl.any(this.params.get(name)?.value);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ADDED LINES\n\t//\n\t//\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {}\n\n\treset_code() {\n\t\tthis._param_configs_controller?.reset();\n\t\t// this.reset_lines();\n\t}\n\n\t//\n\t//\n\t// PARAM CONFIGS\n\t//\n\t//\n\tpublic set_param_configs() {}\n\tparam_configs() {\n\t\treturn this._param_configs_controller?.list;\n\t}\n\t// private reset_param_configs() {\n\t// \tthis._param_configs = [];\n\t// }\n\t// add_param_config<T extends ParamType>(\n\t// \ttype: T,\n\t// \tname: string,\n\t// \tdefault_value: ParamInitValuesTypeMap[T],\n\t// \tuniform_name: string\n\t// ) {\n\t// \tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t// \tthis._param_configs.push(param_config);\n\t// }\n\t// param_configs() {\n\t// \treturn this._param_configs;\n\t// }\n\t//\n\t//\n\t// INPUT\n\t//\n\t//\n\tgl_input_default_value(name: string): ParamInitValueSerialized {\n\t\treturn null;\n\t}\n\n\t//\n\t//\n\t// MISC\n\t//\n\t//\n\n\t//\n\t//\n\t// NEEDED?\n\t//\n\t//\n\t// set_assembler(assembler: BaseGlShaderAssembler) {\n\t// \tthis._assembler = assembler;\n\t// }\n\t// get assembler(): BaseGlShaderAssembler | undefined {\n\t// \treturn this._assembler;\n\t// }\n\n\t// shader_configs() {\n\t// \treturn this.assembler?.shader_configs || [];\n\t// }\n\t// shader_config(name: string) {\n\t// \treturn this.assembler?.shader_config(name);\n\t// }\n\t// shader_names() {\n\t// \treturn this.assembler?.shader_names || [];\n\t// }\n}\n\nexport type BaseGlNodeType = TypedGlNode<NodeParamsConfig>;\nexport class BaseGlNodeClass extends TypedGlNode<NodeParamsConfig> {}\n\nclass ParamlessParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ParamlessParamsConfig();\nexport class ParamlessTypedGlNode extends TypedGlNode<ParamlessParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n","// import {VertexColors} from 'three/src/constants'\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {NoColors} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {FrontSide} from 'three/src/constants';\n// import {DoubleSide} from 'three/src/constants'\nimport {Color} from 'three/src/math/Color';\nimport {Bone} from 'three/src/objects/Bone';\n// import {AdditiveBlending} from 'three/src/constants'\nimport {Material} from 'three/src/materials/Material';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\n// const THREE = {AdditiveBlending, Bone, Color, DoubleSide, FrontSide, Group, LineBasicMaterial, LineSegments, Mesh, MeshLambertMaterial, MeshStandardMaterial, NoColors, Object3D, Points, PointsMaterial, Scene, SkinnedMesh, VertexColors}\n\ninterface MaterialsByString {\n\t[propName: string]: Material;\n}\n\n// export enum AttribClass {\n// \tVERTEX = \"vertex\",\n// \tOBJECT = \"object\"\n// }\n// materials['MeshStandard'] = new MeshStandardMaterial({\n// \tcolor: 0xffffff,\n// \t//vertexColors: VertexColors\n// \tside: FrontSide, // DoubleSide\n// \tmetalness: 0.5,\n// \troughness: 0.9\n// })\n// materials[Mesh.name] = new MeshLambertMaterial({ // MeshStandardMaterial\n// \tcolor: new Color(0.5,0.5,1),\n// \tside: FrontSide,\n// \tvertexColors: NoColors,\n// \ttransparent: true,\n// \tdepthTest: true\n// })\n// materials[Points.name] = new PointsMaterial({\n// \tcolor: 0xffffff,\n// \tsize: 0.1,\n// \t//blending: AdditiveBlending\n// \tdepthTest: true\n// })\n// materials[LineSegments.name] = new LineBasicMaterial({\n// \tcolor: 0xffffff,\n// \tlinewidth: 1\n// })\nexport enum ObjectType {\n\tMESH = 'MESH',\n\tPOINTS = 'POINTS',\n\tLINE_SEGMENTS = 'LINE_SEGMENTS',\n}\nexport const ObjectTypes = [ObjectType.MESH, ObjectType.POINTS, ObjectType.LINE_SEGMENTS];\nexport const ObjectTypeMenuEntries = [\n\t{name: 'Mesh', value: ObjectTypes.indexOf(ObjectType.MESH)},\n\t{name: 'Points', value: ObjectTypes.indexOf(ObjectType.POINTS)},\n\t{name: 'LineSegments', value: ObjectTypes.indexOf(ObjectType.LINE_SEGMENTS)},\n];\n\nexport function ObjectTypeByObject(object: Object3D): ObjectType | undefined {\n\tif (object instanceof Mesh) {\n\t\treturn ObjectType.MESH;\n\t}\n\tif (object instanceof LineSegments) {\n\t\treturn ObjectType.LINE_SEGMENTS;\n\t}\n\tif (object instanceof Points) {\n\t\treturn ObjectType.POINTS;\n\t}\n\tconsole.warn('ObjectTypeByObject received an unknown object type', object);\n}\n\nconst materials: MaterialsByString = {\n\tMeshStandard: new MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\t//vertexColors: VertexColors\n\t\tside: FrontSide, // DoubleSide\n\t\tmetalness: 0.5,\n\t\troughness: 0.9,\n\t}),\n\t[ObjectType.MESH]: new MeshLambertMaterial({\n\t\t// MeshStandardMaterial\n\t\tcolor: new Color(0.5, 0.5, 1),\n\t\tside: FrontSide,\n\t\tvertexColors: false,\n\t\ttransparent: true,\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.POINTS]: new PointsMaterial({\n\t\tcolor: 0xffffff,\n\t\tsize: 0.1,\n\t\t//blending: AdditiveBlending\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.LINE_SEGMENTS]: new LineBasicMaterial({\n\t\tcolor: 0xffffff,\n\t\tlinewidth: 1,\n\t}),\n};\n\n// TODO: typescript: check that this works after using uglifier\n\nexport enum AttribClass {\n\tVERTEX = 0,\n\tOBJECT = 1,\n}\n\nexport const AttribClassMenuEntries = [\n\t{name: 'vertex', value: AttribClass.VERTEX},\n\t{name: 'object', value: AttribClass.OBJECT},\n];\n\nexport enum AttribType {\n\tNUMERIC = 0,\n\tSTRING = 1,\n}\nexport const AttribTypeMenuEntries = [\n\t{name: 'numeric', value: AttribType.NUMERIC},\n\t{name: 'string', value: AttribType.STRING},\n];\n\nexport const CoreConstant = {\n\tATTRIB_CLASS: {\n\t\tVERTEX: AttribClass.VERTEX,\n\t\tOBJECT: AttribClass.OBJECT,\n\t},\n\n\tATTRIB_TYPE: {\n\t\tNUMERIC: 0,\n\t\tSTRING: 1,\n\t},\n\n\tOBJECT_TYPE: {\n\t\t// TODO: typescript\n\t\tMESH: ObjectType.MESH,\n\t\tPOINTS: ObjectType.POINTS,\n\t\tLINE_SEGMENTS: ObjectType.LINE_SEGMENTS,\n\t},\n\tOBJECT_TYPES: ObjectTypes,\n\tCONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {\n\t\t[Scene.name]: 'Scene',\n\t\t[Group.name]: 'Group',\n\t\t[Object3D.name]: 'Object3D',\n\t\t[Mesh.name]: 'Mesh',\n\t\t[Points.name]: 'Points',\n\t\t[LineSegments.name]: 'LineSegments',\n\t\t[Bone.name]: 'Bone',\n\t\t[SkinnedMesh.name]: 'SkinnedMesh',\n\t},\n\tCONSTRUCTORS_BY_NAME: {\n\t\t[ObjectType.MESH]: Mesh,\n\t\t[ObjectType.POINTS]: Points,\n\t\t[ObjectType.LINE_SEGMENTS]: LineSegments,\n\t},\n\t// CONSTRUCTORS_BY_TYPE: {\n\t// \t['MESH']: Mesh,\n\t// \t['POINTS']: Points,\n\t// \t['LINE_SEGMENTS']: LineSegments,\n\t// },\n\t// OBJECT_TYPE_BY_CONSTRUCTOR_NAME: {\n\t// \t[Mesh.name]: 'MESH',\n\t// \t[Points.name]: 'POINTS',\n\t// \t[LineSegments.name]: 'LINE_SEGMENTS',\n\t// },\n\tMATERIALS: materials,\n};\n\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Scene.name] = 'Scene'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Group.name] = 'Group'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Object3D.name] = 'Object3D'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Mesh.name] = 'Mesh'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Points.name] = 'Points'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LineSegments'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Bone.name] = 'Bone'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[SkinnedMesh.name] = 'SkinnedMesh'\n\n// CoreConstant.CONSTRUCTORS_BY_NAME[Mesh.name] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_NAME[Points.name] = Points\n// CoreConstant.CONSTRUCTORS_BY_NAME[LineSegments.name] = LineSegments\n\n// CoreConstant.CONSTRUCTORS_BY_TYPE['MESH'] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_TYPE['POINTS'] = Points\n// CoreConstant.CONSTRUCTORS_BY_TYPE['LINE_SEGMENTS'] = LineSegments\n\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Mesh.name] = 'MESH'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Points.name] = 'POINTS'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LINE_SEGMENTS'\n","import lodash_range from 'lodash/range';\nimport lodash_compact from 'lodash/compact';\nimport {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GLDefinitionType, TypedGLDefinition} from './utils/GLDefinition';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport class BaseGlMathFunctionParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new BaseGlMathFunctionParamsConfig();\nexport abstract class BaseGlMathFunctionGlNode extends BaseAdaptiveGlNode<BaseGlMathFunctionParamsConfig> {\n\tparams_config = ParamsConfig;\n\tprotected gl_method_name() {\n\t\treturn '';\n\t}\n\tprotected gl_function_definitions(): TypedGLDefinition<GLDefinitionType>[] {\n\t\treturn [];\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst type: ConnectionPointType =\n\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\tif (this.io.connections.first_input_connection()) {\n\t\t\tlet count = Math.max(lodash_compact(this.io.connections.input_connections()).length + 1, 2);\n\t\t\treturn lodash_range(count).map((i) => type);\n\t\t} else {\n\t\t\treturn lodash_range(2).map((i) => type);\n\t\t}\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n\n//\n//\n// 1 argument\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg1GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _gl_input_name(index: number) {\n\t\treturn 'in';\n\t}\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type];\n\t}\n}\n\n//\n//\n// 2 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg2GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t}\n}\n\n//\n//\n// 3 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg3GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type];\n\t}\n}\n//\n//\n// 4 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg4GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type];\n\t}\n}\n//\n//\n// 5 arguments\n//\n//\nexport abstract class BaseNodeGlMathFunctionArg5GlNode extends BaseGlMathFunctionGlNode {\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, type, type, type];\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_trim from 'lodash/trim';\nimport lodash_compact from 'lodash/compact';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_padEnd from 'lodash/padEnd';\nimport lodash_capitalize from 'lodash/capitalize';\nimport lodash_snakeCase from 'lodash/snakeCase';\nimport lodash_upperFirst from 'lodash/upperFirst';\nimport lodash_camelCase from 'lodash/camelCase';\nimport lodash_isNumber from 'lodash/isNumber';\n\nconst ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']\n\n// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n// const LETTERS_UPPERCASE = LETTERS.toUpperCase()\n// const NUMBERS = '0123645789'\n// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS\n\nconst TAIL_DIGIT_MATCH_REGEXP = /\\d+$/;\n// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\\d$/\nconst INDICES_LIST_SEPARATOR = /,| /;\n\n// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number\nconst NUM_REGEXP = /^-?\\d+\\.?\\d*$/;\nenum BooleanString {\n\tTRUE = 'true',\n\tFALSE = 'false',\n}\n\nexport class CoreString {\n\t// static has_tail_digits(word: string): boolean {\n\t// \tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP)\n\t// \treturn (match != null)\n\t// }\n\tstatic is_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE || word == BooleanString.FALSE;\n\t}\n\tstatic to_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE;\n\t}\n\tstatic is_number(word: string): boolean {\n\t\treturn NUM_REGEXP.test(word);\n\t}\n\n\tstatic tail_digits(word: string): number {\n\t\tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP);\n\t\tif (match) {\n\t\t\treturn parseInt(match[0]);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic increment(word: string): string {\n\t\tlet match;\n\t\tif ((match = word.match(TAIL_DIGIT_MATCH_REGEXP))) {\n\t\t\tconst digits = parseInt(match[0]);\n\t\t\tconst prefix = word.substring(0, word.length - match[0].length);\n\t\t\treturn `${prefix}${digits + 1}`;\n\t\t} else {\n\t\t\treturn `${word}1`;\n\t\t}\n\t}\n\n\tstatic pluralize(word: string): string {\n\t\tconst last_char = word[word.length - 1];\n\t\tif (last_char !== 's') {\n\t\t\treturn `${word}s`;\n\t\t} else {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\tstatic camel_case(word: string): string {\n\t\treturn lodash_camelCase(word);\n\t}\n\tstatic upper_first(word: string): string {\n\t\treturn lodash_upperFirst(word);\n\t}\n\tstatic snake_case(word: string): string {\n\t\treturn lodash_snakeCase(word);\n\t}\n\tstatic titleize(word: string): string {\n\t\treturn lodash_capitalize(word.replace(/_/g, ' '));\n\t}\n\n\tstatic type_to_class_name(word: string): string {\n\t\treturn this.upper_first(lodash_camelCase(word));\n\t}\n\t// static class_name_to_type(word): string {\n\t// \t// if(this.has_tail_digits(word)){\n\t// \t// \tconst tail_digits = `${this.tail_digits(word)}`\n\t// \t// \tconst head = word.substr(0, word.length-tail_digits.length)\n\t// \t// \tconst head_snake_case = this.snake_case(head)\n\t// \t// \tconsole.log(word, tail_digits, head, head_snake_case)\n\t// \t// \treturn `${head_snake_case}${tail_digits}`;\n\t// \t// } else {\n\t// \t// \treturn this.snake_case(word)\n\t// \t// }\n\t// \tconst snake_case = this.snake_case(word)\n\t// \tconst match = snake_case.match(DIGIT_PREDEDED_BY_UNDERSCOPE)\n\t// \tconsole.log(\"-----\", snake_case, match)\n\t// \treturn snake_case\n\t// }\n\t// static class_name_to_human(word): string {\n\t// \tconst human_name = this.class_name_to_type(word).replace(/\\s/, ' ');\n\t// \treturn human_name.replace(/_/g, \" \");\n\t// }\n\n\tstatic timestamp_to_seconds(word: string): number {\n\t\treturn Date.parse(word) / 1000;\n\t}\n\tstatic seconds_to_timestamp(seconds: number): string {\n\t\tconst d = new Date();\n\t\td.setTime(seconds * 1000);\n\t\treturn d.toISOString().substr(11, 8);\n\t}\n\n\tstatic precision(val: number, decimals: number = 2): string {\n\t\t// if (decimals == null) { decimals = 2; }\n\t\t// const factor = Math.pow(10, decimals);\n\t\t// const num = Math.floor(factor * val) / factor;\n\t\t// let number_s = `${num}`;\n\n\t\t// let elements = number_s.split('.');\n\t\t// if (decimals <= 0){\n\t\t// \treturn elements[0];\n\t\t// }\n\n\t\t// if (elements.length === 1) {\n\t\t// \t// number_s = `${number_s}.00`;\n\t\t// \tconst string_to_pad = `${number_s}.`\n\t\t// \tconst pad = string_to_pad.length + decimals\n\t\t// \treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t// } else {\n\t\t// \tconst integer_element = elements[0];\n\t\t// \tlet fraction_element = elements[1];\n\t\t// \tif (fraction_element.length === 1) {\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}0`;\n\t\t// \t} else if (fraction_element.length > 2) {\n\t\t// \t\tfraction_element = fraction_element.slice(0, 2);\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}`;\n\t\t// \t}\n\t\t// }\n\n\t\t// elements = number_s.split('.');\n\t\t// console.log(\"decimals:\", decimals, elements[1].length, number_s)\n\t\t// if (elements[1].length < decimals){\n\t\t// \tconst string_to_pad = number_s\n\t\t// \tconst pad = string_to_pad.length + (decimals - elements[1].length)\n\t\t// \tnumber_s = lodash_padEnd(string_to_pad, pad, '0');\n\t\t// }\n\n\t\t// return number_s;\n\t\tdecimals = Math.max(decimals, 0);\n\t\tconst elements = `${val}`.split('.');\n\n\t\tif (decimals <= 0) {\n\t\t\treturn elements[0];\n\t\t}\n\n\t\tlet frac = elements[1];\n\t\tif (frac !== undefined) {\n\t\t\tif (frac.length > decimals) {\n\t\t\t\tfrac = frac.substring(0, decimals);\n\t\t\t}\n\n\t\t\tfrac = lodash_padEnd(frac, decimals, '0');\n\t\t\treturn `${elements[0]}.${frac}`;\n\t\t} else {\n\t\t\tconst string_to_pad = `${val}.`;\n\t\t\tconst pad = string_to_pad.length + decimals;\n\t\t\treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t}\n\t}\n\n\tstatic ensure_float(num: number): string {\n\t\t// const integer = Math.floor(num)\n\t\t// const delta = num - integer\n\t\t// if(delta)\n\t\tconst num_as_string = `${num}`;\n\t\tconst dot_pos = num_as_string.indexOf('.');\n\t\tif (dot_pos >= 0) {\n\t\t\treturn num_as_string;\n\t\t} else {\n\t\t\treturn `${num_as_string}.0`;\n\t\t}\n\t}\n\n\t// https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438\n\tstatic match_mask(word: string, rule: string) {\n\t\tif (rule === '*') {\n\t\t\treturn true;\n\t\t}\n\t\t// \".\"  => Find a single character, except newline or line terminator\n\t\t// \".*\" => Matches any string that contains zero or more characters\n\t\trule = rule.split('*').join('.*');\n\n\t\t// \"^\"  => Matches any string with the following at the beginning of it\n\t\t// \"$\"  => Matches any string with that in front at the end of it\n\t\trule = `^${rule}$`;\n\n\t\t// Create a regular expression object for matching string\n\t\tconst regex = new RegExp(rule);\n\n\t\t// Returns true if it finds a match, otherwise it returns false\n\t\treturn regex.test(word);\n\t}\n\tstatic matches_one_mask(word: string, masks: string[]): boolean {\n\t\tlet matches_one_mask = false;\n\t\tfor (let mask of masks) {\n\t\t\tif (CoreString.match_mask(word, mask)) {\n\t\t\t\tmatches_one_mask = true;\n\t\t\t}\n\t\t}\n\t\treturn matches_one_mask;\n\t}\n\n\tstatic attrib_names(word: string): string[] {\n\t\t// let elements = [word];\n\t\t// lodash_each(ATTRIB_NAMES_SEPARATORS, separator => elements = lodash_flatten(lodash_map(elements, element => element.split(separator))));\n\t\tconst elements = word.split(ATTRIB_NAMES_SEPARATOR);\n\t\tconst trimed_elements = lodash_compact(\n\t\t\telements.map((e) => {\n\t\t\t\treturn lodash_trim(e);\n\t\t\t})\n\t\t);\n\t\tconst uniq = lodash_uniq(trimed_elements);\n\n\t\t// const names: string[] = []\n\t\t// ATTRIB_NAMES_SEPARATORS.forEach(separator=>{\n\t\t// \tword.split(separator).forEach( element=>{\n\t\t// \t\tnames.push(element.trim())\n\t\t// \t} )\n\t\t// })\n\n\t\t// // elements = lodash_filter(elements, element => (element != null) && (element.length > 0));\n\t\t// return lodash_uniq(names)\n\n\t\t// return lodash_map(elements, attr_name => lodash_trim(attr_name));\n\t\treturn uniq;\n\t}\n\tstatic to_id(val: string): number {\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst elements = val.split('').reverse();\n\t\tlet id = 0;\n\t\tlet exp = 0;\n\t\telements.forEach((element, i) => {\n\t\t\tlet index = element.charCodeAt(0);\n\n\t\t\tif (index >= 0) {\n\t\t\t\texp = i % 10;\n\t\t\t\tid += index * 10 ** exp;\n\t\t\t\tid = id % Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\t\t});\n\t\treturn id;\n\t}\n\n\tstatic indices(indices_string: string): number[] {\n\t\tconst elements = indices_string.split(INDICES_LIST_SEPARATOR);\n\t\tif (elements.length > 1) {\n\t\t\treturn lodash_uniq(lodash_flatten(elements.map((element) => this.indices(element)))).sort((a, b) => a - b);\n\t\t} else {\n\t\t\tconst element = elements[0];\n\t\t\tif (element) {\n\t\t\t\tconst range_separator = '-';\n\t\t\t\tif (element.indexOf(range_separator) > 0) {\n\t\t\t\t\tconst range_elements = element.split(range_separator);\n\t\t\t\t\treturn lodash_range(parseInt(range_elements[0]), parseInt(range_elements[1]) + 1);\n\t\t\t\t} else {\n\t\t\t\t\tconst parsed = parseInt(element);\n\t\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\t\treturn [parsed];\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic escape_line_breaks(word: string): string {\n\t\treturn word.replace(/(\\r\\n|\\n|\\r)/gm, '\\\\n');\n\t}\n}\n","export enum ShaderName {\n\tVERTEX = 'vertex',\n\tFRAGMENT = 'fragment',\n\tLEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader',\n\tPARTICLES_0 = 'particles_0',\n\tPARTICLES_1 = 'particles_1',\n\tPARTICLES_2 = 'particles_2',\n\tPARTICLES_3 = 'particles_3',\n\tPARTICLES_4 = 'particles_4',\n\tPARTICLES_5 = 'particles_5',\n\tPARTICLES_6 = 'particles_6',\n\tPARTICLES_7 = 'particles_7',\n\tPARTICLES_8 = 'particles_8',\n\tPARTICLES_9 = 'particles_9',\n}\nexport const ParticleShaderNames: Array<ShaderName> = [\n\tShaderName.PARTICLES_0,\n\tShaderName.PARTICLES_1,\n\tShaderName.PARTICLES_2,\n\tShaderName.PARTICLES_3,\n\tShaderName.PARTICLES_4,\n\tShaderName.PARTICLES_5,\n\tShaderName.PARTICLES_6,\n\tShaderName.PARTICLES_7,\n\tShaderName.PARTICLES_8,\n\tShaderName.PARTICLES_9,\n];\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2'\nimport {Int32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\n\n// const THREE = {\n// \tBox3,\n// \tBufferGeometry,\n// \tFloat32BufferAttribute,\n// \tInt32BufferAttribute,\n// \tInterleavedBufferAttribute,\n// \tVector2,\n// \tVector3,\n// }\nimport lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_each from 'lodash/each';\nimport lodash_chunk from 'lodash/chunk';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CorePoint} from './Point';\nimport {CoreFace} from './Face';\nimport {CoreConstant, ObjectType} from './Constant';\nimport {CoreAttribute} from './Attribute';\nimport {MonkeyPatcher} from './MonkeyPatcher';\n\nimport {BufferGeometryUtils} from '../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\nimport {CoreAttributeData} from './AttributeData';\n\nexport class CoreGeometry {\n\t_bounding_box: Box3 | undefined;\n\tprivate _points: CorePoint[] | undefined;\n\n\t// @INDEX_MODE_POINTS = 'INDEX_MODE_POINTS'\n\t// @INDEX_MODE_FACES = 'INDEX_MODE_FACES'\n\t// @INDEX_MODE_LINES = 'INDEX_MODE_LINES'\n\n\tconstructor(private _geometry: BufferGeometry) {}\n\t//\n\n\tgeometry() {\n\t\treturn this._geometry;\n\t}\n\tuuid() {\n\t\treturn this._geometry.uuid;\n\t}\n\n\tbounding_box() {\n\t\treturn (this._bounding_box = this._bounding_box || this._create_bounding_box());\n\t}\n\t_create_bounding_box() {\n\t\tthis._geometry.computeBoundingBox();\n\t\tif (this._geometry.boundingBox) {\n\t\t\treturn this._geometry.boundingBox;\n\t\t}\n\t}\n\n\tmark_as_instance() {\n\t\tthis._geometry.userData['is_instance'] = true;\n\t}\n\tstatic marked_as_instance(geometry: BufferGeometry): boolean {\n\t\treturn geometry.userData['is_instance'] === true;\n\t}\n\tmarked_as_instance(): boolean {\n\t\treturn CoreGeometry.marked_as_instance(this._geometry);\n\t}\n\tposition_attrib_name() {\n\t\tlet name = 'position';\n\t\tif (this.marked_as_instance()) {\n\t\t\tname = 'instancePosition';\n\t\t}\n\t\treturn name;\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis._geometry.computeVertexNormals();\n\t}\n\n\tuser_data_attribs() {\n\t\tconst key = 'indexed_attrib_values';\n\t\treturn (this._geometry.userData[key] = this._geometry.userData[key] || {});\n\t}\n\tindexed_attribute_names() {\n\t\treturn Object.keys(this.user_data_attribs() || {});\n\t}\n\tuser_data_attrib(name: string) {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attribs()[name];\n\t}\n\tis_attrib_indexed(name: string): boolean {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attrib(name) != null;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tif (name === 'ptnum') {\n\t\t\treturn true;\n\t\t}\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.attributes[name] != null;\n\t}\n\tattrib_type(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_names(): string[] {\n\t\treturn Object.keys(this._geometry.attributes);\n\t}\n\tattrib_sizes() {\n\t\tconst h: Dictionary<number> = {};\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\th[attrib_name] = this._geometry.attributes[attrib_name].itemSize;\n\t\t}\n\t\treturn h;\n\t}\n\tattrib_size(name: string): number {\n\t\tlet attrib;\n\t\tname = CoreAttribute.remap_name(name);\n\t\tif ((attrib = this._geometry.attributes[name]) != null) {\n\t\t\treturn attrib.itemSize;\n\t\t} else {\n\t\t\tif (name === 'ptnum') {\n\t\t\t\t// to ensure attrib copy with ptnum as source works\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tset_indexed_attribute_values(name: string, values: string[]) {\n\t\tthis.user_data_attribs()[name] = values;\n\t}\n\n\tset_indexed_attribute(name: string, values: string[], indices: number[]) {\n\t\tthis.set_indexed_attribute_values(name, values);\n\t\tthis._geometry.setAttribute(name, new Int32BufferAttribute(indices, 1));\n\t}\n\n\tadd_numeric_attrib(name: string, size: number = 1, default_value: NumericAttribValue = 0) {\n\t\tconst values = [];\n\n\t\tlet attribute_added = false;\n\t\tif (lodash_isNumber(default_value)) {\n\t\t\t// adding number\n\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\tvalues.push(default_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute_added = true;\n\t\t} else {\n\t\t\tif (size > 1) {\n\t\t\t\tif (lodash_isArray(default_value)) {\n\t\t\t\t\t// adding array\n\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\t\t\tvalues.push(default_value[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tattribute_added = true;\n\t\t\t\t} else {\n\t\t\t\t\t// adding Vector2\n\t\t\t\t\tconst vec2 = default_value as Vector2Like;\n\t\t\t\t\tif (size == 2 && vec2.x != null && vec2.y != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec2.x);\n\t\t\t\t\t\t\tvalues.push(vec2.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector3\n\t\t\t\t\tconst vec3 = default_value as Vector3Like;\n\t\t\t\t\tif (size == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec3.x);\n\t\t\t\t\t\t\tvalues.push(vec3.y);\n\t\t\t\t\t\t\tvalues.push(vec3.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Color\n\t\t\t\t\tconst col = default_value as ColorLike;\n\t\t\t\t\tif (size == 3 && col.r != null && col.g != null && col.b != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(col.r);\n\t\t\t\t\t\t\tvalues.push(col.g);\n\t\t\t\t\t\t\tvalues.push(col.b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector4\n\t\t\t\t\tconst vec4 = default_value as Vector4Like;\n\t\t\t\t\tif (size == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec4.x);\n\t\t\t\t\t\t\tvalues.push(vec4.y);\n\t\t\t\t\t\t\tvalues.push(vec4.z);\n\t\t\t\t\t\t\tvalues.push(vec4.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (attribute_added) {\n\t\t\tthis._geometry.setAttribute(name, new Float32BufferAttribute(values, size));\n\t\t} else {\n\t\t\tthrow 'no other default value allowed for now in add_numeric_attrib';\n\t\t}\n\t}\n\n\tinit_position_attribute(points_count: number, default_value?: Vector3) {\n\t\tconst values = [];\n\t\tif (default_value == null) {\n\t\t\tdefault_value = new Vector3();\n\t\t}\n\n\t\tfor (let i = 0; i < points_count; i++) {\n\t\t\tvalues.push(default_value.x);\n\t\t\tvalues.push(default_value.y);\n\t\t\tvalues.push(default_value.z);\n\t\t}\n\n\t\treturn this._geometry.setAttribute('position', new Float32BufferAttribute(values, 3));\n\t}\n\n\tadd_attribute(name: string, attrib_data: CoreAttributeData) {\n\t\tswitch (attrib_data.type()) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\treturn console.log('TODO: to implement');\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\treturn this.add_numeric_attrib(name, attrib_data.size());\n\t\t}\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tif (this.is_attrib_indexed(old_name)) {\n\t\t\tthis.user_data_attribs()[new_name] = lodash_clone(this.user_data_attribs()[old_name]);\n\t\t\tdelete this.user_data_attribs()[old_name];\n\t\t}\n\n\t\tconst old_attrib = this._geometry.getAttribute(old_name);\n\t\tthis._geometry.setAttribute(new_name, new Float32BufferAttribute(old_attrib.array, old_attrib.itemSize));\n\t\treturn this._geometry.deleteAttribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\tdelete this.user_data_attribs()[name];\n\t\t}\n\n\t\treturn this._geometry.deleteAttribute(name);\n\t}\n\n\tclone(): BufferGeometry {\n\t\treturn CoreGeometry.clone(this._geometry);\n\t}\n\n\tstatic clone(src_geometry: BufferGeometry): BufferGeometry {\n\t\tlet src_userData;\n\n\t\t// monkey path\n\t\tfor (let attribute_name of Object.keys(src_geometry.attributes)) {\n\t\t\tconst attribute = src_geometry.getAttribute(attribute_name);\n\t\t\tif (attribute.constructor.name == InterleavedBufferAttribute.name) {\n\t\t\t\tMonkeyPatcher.patch(attribute as InterleavedBufferAttribute);\n\t\t\t}\n\t\t}\n\n\t\tconst new_geometry = src_geometry.clone();\n\t\tif ((src_userData = src_geometry.userData) != null) {\n\t\t\tnew_geometry.userData = lodash_cloneDeep(src_userData);\n\t\t}\n\t\treturn new_geometry;\n\t}\n\n\tpoints_count(): number {\n\t\treturn CoreGeometry.points_count(this._geometry);\n\t}\n\n\tstatic points_count(geometry: BufferGeometry): number {\n\t\tlet position;\n\t\tlet count = 0;\n\t\tconst core_geometry = new this(geometry);\n\t\tlet position_attrib_name = 'position';\n\t\tif (core_geometry.marked_as_instance()) {\n\t\t\tposition_attrib_name = 'instancePosition';\n\t\t}\n\n\t\tif ((position = geometry.getAttribute(position_attrib_name)) != null) {\n\t\t\tlet array;\n\t\t\tif ((array = position.array) != null) {\n\t\t\t\tcount = array.length / 3;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t// TODO: use lodash_chunk\n\t// like: lodash_chunk(template_geometry.getAttribute('position').array, 3)\n\tpoints(): CorePoint[] {\n\t\treturn (this._points = this._points || this.points_from_geometry());\n\t}\n\treset_points() {\n\t\tthis._points = undefined;\n\t}\n\tpoints_from_geometry(): CorePoint[] {\n\t\tconst points = [];\n\t\tconst position_attrib = this._geometry.getAttribute(this.position_attrib_name());\n\n\t\tif (position_attrib != null) {\n\t\t\tconst points_count = position_attrib.array.length / 3;\n\t\t\tfor (let point_index = 0; point_index < points_count; point_index++) {\n\t\t\t\tconst point = new CorePoint(this, point_index);\n\n\t\t\t\t// lodash_each lodash_keys(@_geometry.attributes), (attrib_name) =>\n\n\t\t\t\t// \tattribute = @_geometry.getAttribute(attrib_name)\n\t\t\t\t// \titem_size = attribute.itemSize\n\t\t\t\t// \tcurrent_index = point_index  *item_size\n\n\t\t\t\t// \tattrib_value = switch item_size\n\t\t\t\t// \t\twhen 1\n\t\t\t\t// \t\t\tattribute.array[current_index]\n\t\t\t\t// \t\twhen 2\n\t\t\t\t// \t\t\tnew Vector2(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\t)\n\t\t\t\t// \t\twhen 3\n\t\t\t\t// \t\t\tnew Vector3(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 2]\n\t\t\t\t// \t\t\t\t)\n\n\t\t\t\t// \tpoint.add_attribute(attrib_name, item_size, attrib_value)\n\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\tstatic geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst geometry_wrapper = new this(geometry);\n\n\t\tconst first_point = points[0];\n\t\tif (first_point != null) {\n\t\t\tconst old_geometry = first_point.geometry();\n\t\t\tconst old_geometry_wrapper = first_point.geometry_wrapper();\n\n\t\t\t// index\n\t\t\tconst new_index_by_old_index: Dictionary<number> = {};\n\t\t\tlodash_each(points, (point, i) => (new_index_by_old_index[point.index] = i));\n\n\t\t\tconst indices = this._indices_from_points(new_index_by_old_index, old_geometry, object_type);\n\t\t\tif (indices != null && indices.length !== 0) {\n\t\t\t\tgeometry.setIndex(indices);\n\t\t\t}\n\n\t\t\t// attributes\n\t\t\tconst {attributes} = old_geometry;\n\t\t\t// const new_attributes = {}\n\t\t\tfor (let attribute_name of Object.keys(attributes)) {\n\t\t\t\tconst attrib_values = old_geometry_wrapper.user_data_attribs()[attribute_name];\n\t\t\t\tconst is_attrib_indexed = attrib_values != null;\n\n\t\t\t\tif (is_attrib_indexed) {\n\t\t\t\t\tconst new_values = lodash_uniq(points.map((point) => point.attrib_value(attribute_name)));\n\t\t\t\t\tconst new_index_by_value: Dictionary<number> = {};\n\t\t\t\t\tlodash_each(new_values, (new_value, i) => (new_index_by_value[new_value] = i));\n\n\t\t\t\t\tgeometry_wrapper.user_data_attribs()[attribute_name] = new_values;\n\n\t\t\t\t\t// const old_attrib = old_geometry.getAttribute(attribute_name)\n\t\t\t\t\t// const old_attrib_array = old_attrib.array\n\t\t\t\t\tconst new_attrib_indices = [];\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t// const old_index = old_attrib_array[point.index()]\n\t\t\t\t\t\tconst new_index = new_index_by_value[point.attrib_value(attribute_name)];\n\t\t\t\t\t\tnew_attrib_indices.push(new_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(new_attrib_indices, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tconst attrib_size = attributes[attribute_name].itemSize;\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\tconst value = point.attrib_value(attribute_name);\n\t\t\t\t\t\tswitch (attrib_size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tvalues.push(value.x);\n\t\t\t\t\t\t\t\tvalues.push(value.y);\n\t\t\t\t\t\t\t\tvalues.push(value.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(values, attrib_size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn geometry;\n\t}\n\n\tstatic _indices_from_points(\n\t\tnew_index_by_old_index: Dictionary<number>,\n\t\told_geometry: BufferGeometry,\n\t\tobject_type: ObjectType\n\t) {\n\t\tconst index_attrib = old_geometry.index;\n\t\tif (index_attrib != null) {\n\t\t\tconst old_indices = index_attrib.array;\n\n\t\t\tconst new_indices: number[] = [];\n\n\t\t\tswitch (object_type) {\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.POINTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tconst new_index = new_index_by_old_index[old_index];\n\t\t\t\t\t\tif (new_index != null) {\n\t\t\t\t\t\t\tnew_indices.push(new_index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.MESH:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst old_index2 = old_indices[i + 2];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tconst new_index2 = new_index_by_old_index[old_index2];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null && new_index2 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.LINE_SEGMENTS:\n\t\t\t\t\tlodash_each(old_indices, function (old_index, i: number) {\n\t\t\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn new_indices;\n\t\t}\n\t}\n\n\tstatic merge_geometries(geometries: BufferGeometry[]) {\n\t\tif (geometries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// 1/3. set the new attrib indices for the indexed attributes\n\t\t//\n\t\tconst core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));\n\t\tconst indexed_attribute_names = core_geometries[0].indexed_attribute_names();\n\n\t\tconst new_values_by_attribute_name: Dictionary<string[]> = {};\n\t\tfor (let indexed_attribute_name of indexed_attribute_names) {\n\t\t\tconst index_by_values: Dictionary<number> = {};\n\t\t\tconst all_geometries_points = [];\n\t\t\tfor (let core_geometry of core_geometries) {\n\t\t\t\tconst geometry_points = core_geometry.points();\n\t\t\t\tfor (let point of geometry_points) {\n\t\t\t\t\tall_geometries_points.push(point);\n\t\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\t\t//value_index = point.attrib_value_index(indexed_attribute_name)\n\t\t\t\t\t// TODO: typescript: that doesn't seem right\n\t\t\t\t\tindex_by_values[value] != null\n\t\t\t\t\t\t? index_by_values[value]\n\t\t\t\t\t\t: (index_by_values[value] = Object.keys(index_by_values).length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst values = Object.keys(index_by_values);\n\t\t\tfor (let point of all_geometries_points) {\n\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\tconst new_index = index_by_values[value];\n\t\t\t\tpoint.set_attrib_index(indexed_attribute_name, new_index);\n\t\t\t}\n\n\t\t\tnew_values_by_attribute_name[indexed_attribute_name] = values;\n\t\t}\n\n\t\t//\n\t\t// 2/3. merge the geos\n\t\t//\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\n\t\t//\n\t\t// 3/3. add the index attrib values\n\t\t//\n\n\t\tconst merged_geometry_wrapper = new this(merged_geometry);\n\t\tObject.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n\t\t\tconst values = new_values_by_attribute_name[indexed_attribute_name];\n\t\t\tmerged_geometry_wrapper.set_indexed_attribute_values(indexed_attribute_name, values);\n\t\t});\n\n\t\tif (merged_geometry) {\n\t\t\tdelete merged_geometry.userData.mergedUserData;\n\t\t}\n\n\t\treturn merged_geometry;\n\t}\n\n\tsegments() {\n\t\t// const points = this.points();\n\t\tconst index = this.geometry().index?.array || [];\n\t\treturn lodash_chunk(index, 2);\n\t}\n\n\tfaces(): CoreFace[] {\n\t\treturn this.faces_from_geometry();\n\t}\n\tfaces_from_geometry(): CoreFace[] {\n\t\tconst index_array = this.geometry().index?.array || [];\n\t\tconst faces_count = index_array.length / 3;\n\t\treturn lodash_range(faces_count).map((i) => new CoreFace(this, i));\n\t}\n}\n\n// segments_count = 0.5*index.length\n// segments = []\n// lodash_times segments_count, (i)->\n// \tindices = [i, i+1]\n// \tsegments.push(indices) #lodash_map(indices, (index)->points[index])\n\n// segments\n","import {CoreGraph, CoreGraphNodeId} from './CoreGraph';\nimport {DirtyController, PostDirtyHook} from './DirtyController';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class CoreGraphNode {\n\t// protected _scene: PolyScene;\n\tprivate _graph: CoreGraph;\n\tprivate _graph_node_id: CoreGraphNodeId;\n\tprivate _dirty_controller: DirtyController = new DirtyController(this);\n\t// protected _name: string;\n\tconstructor(protected _scene: PolyScene, protected _name: string) {\n\t\t// super(...args);\n\t\tthis._graph_node_id = _scene.graph.next_id();\n\t\t_scene.graph.setNode(this);\n\t\tthis._graph = _scene.graph;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset_name(name: string) {\n\t\tthis._name = name;\n\t}\n\t// set_scene(scene: PolyScene) {\n\t// \tthis._scene = scene;\n\t// \t// this._graph_node = new CoreGraphNode();\n\t// \t// this._graph_node.init(this._scene.graph);\n\t// \tthis._graph = scene.graph;\n\t// \tthis._graph_node_id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// init(graph: CoreGraph) {\n\t// \tthis._graph = graph;\n\t// \tthis._id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// full_path: ->\n\t// \t\"node with unknown path #{this.graph_node_id}\"\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\tget graph_node_id(): CoreGraphNodeId {\n\t\treturn this._graph_node_id;\n\t}\n\n\t//\n\t//\n\t// DIRTY CONTROLLER\n\t//\n\t//\n\tget dirty_controller() {\n\t\treturn this._dirty_controller;\n\t}\n\tset_dirty(trigger?: CoreGraphNode | null) {\n\t\ttrigger = trigger || this;\n\t\tthis._dirty_controller.set_dirty(trigger);\n\t}\n\tset_successors_dirty(trigger?: CoreGraphNode) {\n\t\tthis._dirty_controller.set_successors_dirty(trigger);\n\t}\n\tremove_dirty_state() {\n\t\tthis._dirty_controller.remove_dirty_state();\n\t}\n\tget is_dirty() {\n\t\treturn this._dirty_controller.is_dirty;\n\t}\n\tadd_post_dirty_hook(name: string, callback: PostDirtyHook) {\n\t\tthis._dirty_controller.add_post_dirty_hook(name, callback);\n\t}\n\n\t//\n\t//\n\t// GRAPH\n\t//\n\t//\n\n\t// private graph_add() {\n\t// }\n\tgraph_remove() {\n\t\tthis.graph.removeNode(this);\n\t}\n\n\t// _graph_connect: (src, dest)->\n\t// \tthis.graph().connect(src, dest)\n\tadd_graph_input(src: CoreGraphNode): boolean {\n\t\treturn this.graph.connect(src, this);\n\t}\n\tremove_graph_input(src: CoreGraphNode) {\n\t\tthis.graph.disconnect(src, this);\n\t}\n\n\t// graph_disconnect: (src, dest)->\n\t// \tthis.graph().disconnect(src, dest)\n\n\tgraph_disconnect_predecessors() {\n\t\tthis.graph.disconnect_predecessors(this);\n\t}\n\tgraph_disconnect_successors() {\n\t\tthis.graph.disconnect_successors(this);\n\t}\n\n\tgraph_predecessor_ids(): CoreGraphNodeId[] {\n\t\treturn this.graph.predecessor_ids(this._graph_node_id) || [];\n\t}\n\tgraph_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.predecessors(this);\n\t}\n\tgraph_successors(): CoreGraphNode[] {\n\t\treturn this.graph.successors(this);\n\t}\n\tgraph_all_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.all_predecessors(this);\n\t}\n\tgraph_all_successors(): CoreGraphNode[] {\n\t\treturn this.graph.all_successors(this);\n\t}\n}\n","// events\nexport enum NodeEvent {\n\tCREATED = 'node_created',\n\tDELETED = 'node_deleted',\n\tNAME_UPDATED = 'node_name_update',\n\tOVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update',\n\tNAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated',\n\tNAMED_INPUTS_UPDATED = 'node_named_inputs_updated',\n\tINPUTS_UPDATED = 'node_inputs_updated',\n\tPARAMS_UPDATED = 'node_params_updated',\n\tUI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated',\n\tUI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated',\n\tERROR_UPDATED = 'node_error_updated',\n\tFLAG_BYPASS_UPDATED = 'bypass_flag_updated',\n\tFLAG_DISPLAY_UPDATED = 'display_flag_updated',\n\tSELECTION_UPDATED = 'selection_updated',\n}\n","import {CoreWalker} from '../../../core/Walker';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\n// import {NodeSimple} from '../../../core/graph/NodeSimple'\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {BaseContainer} from '../../containers/_Base';\n\n// type NodeOrParam = BaseNode | BaseParam;\n\nexport abstract class BaseMethod {\n\tpublic node: BaseNodeType;\n\n\tconstructor(public readonly param: BaseParamType) {\n\t\t// this._init_update_dependencies_mode();\n\t\tthis.node = this.param.node;\n\t}\n\n\tstatic required_arguments(): any[] {\n\t\tconsole.warn('Expression.Method._Base.required_arguments virtual method call. Please override');\n\t\treturn [];\n\t}\n\tstatic optional_arguments(): any[] {\n\t\treturn [];\n\t}\n\tstatic min_allowed_arguments_count() {\n\t\treturn this.required_arguments().length;\n\t}\n\tstatic max_allowed_arguments_count() {\n\t\treturn this.min_allowed_arguments_count() + this.optional_arguments().length;\n\t}\n\tstatic allowed_arguments_count(count: number) {\n\t\treturn count >= this.min_allowed_arguments_count() && count <= this.max_allowed_arguments_count();\n\t}\n\n\tprocess_arguments(args: any): Promise<any> {\n\t\tthrow 'Expression.Method._Base.process_arguments virtual method call. Please override';\n\t}\n\n\tasync get_referenced_node_container(index_or_path: number | string): Promise<BaseContainer> {\n\t\tconst referenced_node = this.get_referenced_node(index_or_path);\n\n\t\tif (referenced_node) {\n\t\t\tconst container = await referenced_node.request_container();\n\t\t\tif (container) {\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\treturn container;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow `referenced node invalid: ${referenced_node.full_path()}`;\n\t\t} else {\n\t\t\tthrow `invalid input (${index_or_path})`;\n\t\t}\n\t}\n\n\tget_referenced_param(path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tconst referenced_param = CoreWalker.find_param(this.node, path, decomposed_path);\n\n\t\t// if (referenced_param != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\n\t\t// \t\t//param_connect_result = this.param().add_graph_input(referenced_param)\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_param);\n\t\t// \t\t//if !(param_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no param found for argument ${path}`;\n\t\t// }\n\n\t\treturn referenced_param || null;\n\t}\n\n\tfind_referenced_graph_node(index_or_path: number | string, decomposed_path?: DecomposedPath): CoreGraphNode | null {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\t\t// let node\n\t\tif (is_index) {\n\t\t\tconst index = index_or_path as number;\n\t\t\tconst input_graph_node = this.node.io.inputs.input_graph_node(index);\n\t\t\treturn input_graph_node;\n\t\t} else {\n\t\t\tconst path = index_or_path as string;\n\t\t\treturn this.get_referenced_node(path, decomposed_path);\n\t\t}\n\t}\n\tget_referenced_node(index_or_path: string | number, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\t// if ((index_or_path != null) && (index_or_path.is_a != null) && index_or_path.is_a(BaseNode)) {\n\t\t// \tindex_or_path = index_or_path.full_path();\n\t\t// }\n\t\tif (lodash_isString(index_or_path)) {\n\t\t\tconst path = index_or_path;\n\t\t\treturn CoreWalker.find_node(this.node, path, decomposed_path);\n\t\t} else {\n\t\t\tconst index = index_or_path;\n\t\t\tthis.node.io.inputs.input(index);\n\t\t\treturn this.node.io.inputs.input(index);\n\t\t}\n\n\t\t// if (referenced_node != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\t\t// \t\t//node_connect_result = this.param().add_graph_input(referenced_node)\n\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_node);\n\t\t// \t\t//if !(node_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no node found for argument ${index_or_path}`;\n\t\t// }\n\n\t\t// return referenced_node;\n\t}\n\n\tfind_dependency(args: any): MethodDependency | null {\n\t\treturn null;\n\t}\n\n\tprotected create_dependency_from_index_or_path(index_or_path: number | string): MethodDependency | null {\n\t\t// console.log(\"is_index\", index_or_path)\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst node = this.find_referenced_graph_node(index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\treturn this.create_dependency(node, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('node not found for path', index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\tprotected create_dependency(\n\t\tnode: CoreGraphNode,\n\t\tindex_or_path: number | string,\n\t\tdecomposed_path?: DecomposedPath\n\t): MethodDependency | null {\n\t\t// if (CoreObject.is_a(node, TypedNode) || CoreObject.is_a(node, TypedParam)) {\n\t\t// \tconst node_or_param = node as BaseNodeType;\n\t\t// \treturn MethodDependency.create(this.param, index_or_path, node_or_param, decomposed_path?.named_nodes);\n\t\t// }\n\t\tconst dependency = MethodDependency.create(this.param, index_or_path, node, decomposed_path);\n\t\treturn dependency;\n\t}\n\n\t//\n\t//\n\t// UPDATE DEPENDENCIES\n\t//\n\t//\n\t// _init_update_dependencies_mode() {\n\t// \treturn this.set_update_dependencies_mode(false);\n\t// }\n\t// set_update_dependencies_mode(mode){\n\t// \treturn this._update_dependencies_mode = mode;\n\t// }\n\t// update_dependencies_mode() {\n\t// \treturn this._update_dependencies_mode;\n\t// }\n\t// update_dependencies() {}\n}\n//\n","import {BaseNodeClass} from './nodes/_Base';\nimport {PolyScene} from './scene/PolyScene';\nimport {RenderersController} from './poly/RenderersController';\nimport {NodesRegister, RegisterOptions, BaseNodeConstructor} from './poly/NodesRegister';\nimport {NodeContext} from './poly/NodeContext';\n// import {ViewerLoadersManager} from '/viewers/LoadersManager';\n\nexport class Poly {\n\tstatic _instance: Poly | undefined;\n\trenderers_controller: RenderersController = new RenderersController();\n\tnodes_register: NodesRegister = new NodesRegister();\n\n\tscenes_by_uuid: Dictionary<PolyScene> = {};\n\t_env: string | undefined;\n\t// public viewer_loaders_manager: ViewerLoadersManager = new ViewerLoadersManager();\n\n\tstatic instance() {\n\t\treturn (this._instance = this._instance || new Poly());\n\t}\n\tprivate constructor() {}\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tthis.nodes_register.register_node(node, tab_menu_category, options);\n\t}\n\tregistered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass> {\n\t\treturn this.nodes_register.registered_nodes(parent_context, type);\n\t}\n\tin_worker_thread() {\n\t\treturn false;\n\t}\n\tdesktop_controller(): any {}\n\t// notify_scene_loaded(scene: PolyScene) {}\n\n\tplayer_mode(): boolean {\n\t\treturn false;\n\t}\n\n\tlog(...args: any[]) {\n\t\tconsole.log(...args);\n\t}\n\tset_env(env: string) {\n\t\tthis._env = env;\n\t}\n\tget env() {\n\t\treturn this._env;\n\t}\n}\n\n// declare global {\n// \tconst POLY: Poly;\n// }\n\n// declare global {\n// \tinterface Window {\n// \t\tPOLY: Poly;\n// \t}\n// }\n// make sure not to have library: 'POLY' in webpack for this to work\nexport const POLY = Poly.instance();\n","import {TypedNode} from '../_Base';\n\nimport {Material} from 'three/src/materials/Material';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {MaterialContainer} from '../../containers/Material';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// type RenderHook = (object: Object3D) => void;\n\nexport abstract class TypedMatNode<M extends Material, K extends NodeParamsConfig> extends TypedNode<\n\t'MATERIAL',\n\tBaseMatNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<MaterialContainer> = new TypedContainerController<MaterialContainer>(\n\t\tthis,\n\t\tMaterialContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MAT;\n\t}\n\n\tprotected _material: M | undefined;\n\t// protected _update_methods: RenderHook[] = [];\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this._update_methods = [];\n\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_outputs({has_outputs: false});\n\n\t\t// this.container_controller.init(MaterialContainer);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_material_name.bind(this));\n\n\t\tthis.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\n\t\t// it's probably good not to have to create any material in the constructor\n\t\t// but only on request\n\t\t// this._material = this.create_material();\n\t\t// this.set_material(this._material);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t}\n\n\tprivate set_material_name() {\n\t\t// ensures the material has a full path set\n\t\t// allowing the render hook to be set\n\t\t//this.set_material(@_material)\n\t\tif (this._material) {\n\t\t\tthis._material.name = this.full_path();\n\t\t}\n\t}\n\n\tabstract create_material(): M;\n\tget material() {\n\t\treturn (this._material = this._material || this.create_material());\n\t}\n\t//\n\n\tset_material(material: Material) {\n\t\tthis.set_container(material);\n\t}\n\n\t// add_update_method(method, arg?: any) {\n\t// \tthis._update_methods.push([method.bind(this), arg]);\n\t// }\n\n\t//run_update_methods: ->\n\n\tadd_render_hook(object: Object3D) {}\n}\n//delete object.onBeforeRender\n\nexport type BaseMatNodeType = TypedMatNode<Material, any>;\nexport class BaseMatNodeClass extends TypedMatNode<Material, any> {\n\tcreate_material() {\n\t\treturn new Material();\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nimport {TypedNode, BaseNodeType} from '../_Base';\n// import {BaseSopNode} from '../sop/_Base';\n// import {LookAt} from './Concerns/LookAt';\nimport {ObjectContainer} from '../../containers/Object';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {ObjectsManagerNode} from '../manager/ObjectsManager';\nimport {Group} from 'three/src/objects/Group';\n\nconst INPUT_OBJECT_NAME = 'parent object';\nconst DEFAULT_INPUT_NAMES = [INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME];\n\ninterface Object3DWithNode extends Object3D {\n\tnode: BaseNodeType;\n}\n// interface BaseObjNodeVisitor extends BaseNodeVisitor {\n// \tvisit_node_obj: (node: BaseObjNodeType) => any;\n// }\n\nexport enum ObjNodeRenderOrder {\n\tMANAGER = 0,\n\tFOG = 1,\n\tCAMERA = 2,\n\tLIGHT = 3,\n\tEVENT = 4,\n\tMAT = 5,\n}\n\nexport class TypedObjNode<O extends Object3D, K extends NodeParamsConfig> extends TypedNode<\n\t'OBJECT',\n\tBaseObjNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<ObjectContainer> = new TypedContainerController<ObjectContainer>(\n\t\tthis,\n\t\tObjectContainer\n\t);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = true;\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.OBJ;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// protected _main_group = new Group();\n\tprotected _children_group = new Group();\n\tprotected _object!: O;\n\t// _sop_loaded: boolean = false;\n\n\t// protected _look_at_controller: LookAtController | undefined;\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\t// protected _transform_controller: TransformController | undefined;\n\t// get transform_controller(): TransformController {\n\t// \treturn (this._transform_controller = this._transform_controller || new TransformController(this));\n\t// }\n\n\tprotected _attachable_to_hierarchy: boolean = true;\n\tget attachable_to_hierarchy() {\n\t\treturn this._attachable_to_hierarchy;\n\t}\n\tprotected _used_in_scene: boolean = true;\n\tget used_in_scene() {\n\t\treturn this._used_in_scene;\n\t}\n\t// TODO call set_used_in_scene(false) when node is deleted\n\tset_used_in_scene(state: boolean) {\n\t\tthis._used_in_scene = state;\n\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\tconst root = this.parent as ObjectsManagerNode;\n\t\t\tif (root) {\n\t\t\t\troot.update_object(this);\n\t\t\t}\n\t\t}\n\t}\n\tadd_object_to_parent(parent: Object3D) {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tparent.add(this.object);\n\t\t}\n\t}\n\tremove_object_from_parent() {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tconst parent = this.object.parent;\n\t\t\tif (parent) {\n\t\t\t\tparent.remove(this.object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _displayed_in_scene: boolean = true;\n\t// get displayed_in_scene() {\n\t// \treturn this._displayed_in_scene;\n\t// }\n\t// set_displayed_in_scene(state:boolean){\n\t// \tthis._displayed_in_scene = state;\n\t// }\n\n\tinitialize_base_node() {\n\t\t// this.container_controller.init(ObjectContainer);\n\t\tthis._object = this._create_object_with_attributes();\n\t\t// this._init_container_owner('Object');\n\t\t// this.flags.add_display();\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_object_name.bind(this));\n\t\tthis.set_object_name();\n\n\t\t// this.io.inputs.add_hook(() => {\n\t\t// \tthis.transform_controller.on_input_updated();\n\t\t// });\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\n\t\t// this._sop_loaded = false; // TODO: typescript, this should be moved to GeoObjNode\n\t}\n\n\t// this.add_param 'toggle', 'display', 1,\n\t// \tcallback: this.post_state_display_flag.bind(this)\n\n\t// cook: ->\n\t// \tsuper\n\t// \tconsole.error(this.constructor, 'cook method is not overloaded')\n\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t// \t#console.log(\"#{this.full_path()} set dirty by #{original_trigger_graph_node?.full_path()} and #{direct_trigger_graph_node?.full_path()}\")\n\t// \tthis.is_displayed (is_displayed)=>\n\t// \t\tif is_displayed\n\t// \t\t\tthis.parent().update_object(this)\n\n\t//post_remove_dirty_state: ->\n\t//console.log(\"obj #{this.full_path()} remove dirty\")\n\t//console.log(\"remove_dirty_state: #{this.full_path()}\")\n\n\t// set_object: (object)->\n\n\t// \tif object?\n\t// \t\tobject.name = this.name()\n\t// \t\tthis.set_container(object)\n\t// get main_group() {\n\t// \treturn this._main_group;\n\t// }\n\tget children_group() {\n\t\treturn this._children_group;\n\t}\n\tget object() {\n\t\treturn this._object; //= this._object || this._create_object_with_attributes()\n\t}\n\n\t_create_object_with_attributes(): O {\n\t\tconst object = this.create_object();\n\t\t// object.name = 'content';\n\t\t// if (object != null) {\n\t\t// \tobject.name = this.full_path();\n\t\t(object as Object3DWithNode).node = this;\n\t\t// }\n\t\t// this._main_group.add(this._children_group);\n\t\tobject.add(this._children_group);\n\t\treturn object as O;\n\t}\n\tprivate set_object_name() {\n\t\tif (this._object) {\n\t\t\tthis._object.name = this.full_path();\n\t\t\tthis._children_group.name = `${this.full_path()}:parented_outputs`;\n\t\t}\n\t}\n\t// private set_group_name() {\n\t// \t// ensures the material has a full path set\n\t// \t// allowing the render hook to be set\n\t// \t//this.set_material(@_material)\n\t// \tconst group = this.group;\n\t// \tif (group) {\n\t// \t\tgroup.name = this.full_path();\n\t// \t}\n\t// }\n\n\tcreate_object(): Object3D {\n\t\treturn new Object3D();\n\t}\n\n\t// request_display_node() {}\n\n\tis_display_node_cooking(): boolean {\n\t\treturn false;\n\t}\n\n\t// post_state_display_flag() {\n\t// \tconst object = this.object;\n\t// \tif (object != null) {\n\t// \t\tconst displayed = this.is_displayed();\n\t// \t\tif (displayed) {\n\t// \t\t\tobject.visible = displayed;\n\n\t// \t\t\tif (!this._sop_loaded) {\n\t// \t\t\t\tthis.request_display_node();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_displayed(): boolean {\n\t\treturn this.flags?.display?.active || false;\n\t\t// if (callback == null) {\n\t\t// \tthrow 'no callback given to is_displayed';\n\t\t// }\n\n\t\t// const display_flag_state = this.display_flag_state();\n\t\t// return callback(display_flag_state);\n\t}\n\t// if !display_flag_state\n\t// \tcallback(false)\n\n\t// else\n\t// \tthis.param('display').eval (val)->\n\t// \t\tcallback(val)\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node_obj']> {\n\t// \treturn visitor.visit_node_obj(this);\n\t// }\n\n\t// replaces Dirtyable (TODO: try and replace this method name)\n\t// protected _init_dirtyable_hook() {\n\t// this.add_post_dirty_hook(this._cook_main_without_inputs_later.bind(this));\n\t// }\n\t// private _cook_main_without_inputs_later() {\n\t// \tconst c = () => {\n\t// \t\tthis.cook_controller.cook_main_without_inputs();\n\t// \t};\n\t// \tsetTimeout(c, 0);\n\t// \t// this.eval_all_params().then( ()=>{ this.cook() } )\n\t// }\n}\n\nexport type BaseObjNodeType = TypedObjNode<Object3D, any>;\nexport class BaseObjNodeClass extends TypedObjNode<Object3D, any> {}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\n\n// import {BaseParam} from '../params/_Base';\n// import {GeometryContainer} from '../containers/Geometry';\n// import {UIData} from './UIData';\n\n// import {Bypass} from './concerns/Bypass';\n// import {ConnectionsOwner} from './concerns/ConnectionsOwner';\n// import {ContainerOwner} from './concerns/ContainerOwner';\n// import {Cook} from './concerns/Cook';\n// import {CustomNode} from './concerns/CustomNode';\n// import {Dependencies} from './concerns/old/Dependencies';\n// import {DisplayFlag} from './concerns/DisplayFlag';\n// import {Errored} from './concerns/Errored';\n// import {HierarchyChildrenOwner} from './concerns/HierarchyChildrenOwner';\n// import {HierarchyParentOwner} from './concerns/old/HierarchyParentOwner';\n// import {InputsClonable} from './concerns/InputsClonable';\n// import {InputsOwner} from './concerns/InputsOwner';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/old/LifeCycle';\n// import {Named} from './concerns/Named';\n// import {OutputsOwner} from './concerns/OutputsOwner';\n// import {ParamsOwner} from './concerns/ParamsOwner';\n// import {Selectable} from './concerns/old/Selectable';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {Visit} from './concerns/Visit';\n\nimport {UIData} from './utils/UIData';\nimport {FlagsController} from './utils/FlagsController';\nimport {StatesController} from './utils/StatesController';\nimport {HierarchyParentController} from './utils/hierarchy/ParentController';\nimport {HierarchyChildrenController} from './utils/hierarchy/ChildrenController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {TypedContainerController} from './utils/ContainerController';\nimport {CookController} from './utils/CookController';\nimport {DependenciesController} from './utils/DependenciesController';\nimport {NameController} from './utils/NameController';\nimport {NodeSerializer, NodeSerializerData} from './utils/Serializer';\nimport {ParamsController} from './utils/params/ParamsController';\nimport {ParamConstructorMap} from '../params/types/ParamConstructorMap';\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\n\nimport {NodeParamsConfig} from './utils/params/ParamsConfig';\nimport {ParamsValueAccessor, ParamsValueAccessorType} from './utils/params/ParamsValueAccessor';\nimport {ProcessingContext} from './utils/ProcessingContext';\nimport {IOController} from './utils/connections/IOController';\n\n// import {BaseContainer} from '../containers/_Base';\n\n// import {BaseParam} from '../params/_Base';\n// import {BooleanParam} from '../params/Boolean';\n// import {ButtonParam} from '../params/Button';\n// import {ColorParam} from '../params/Color';\n// import {FloatParam} from '../params/Float';\n// import {IntegerParam} from '../params/Integer';\n// import {OperatorPathParam} from '../params/OperatorPath';\n// import {RampParam} from '../params/Ramp';\n// import {SeparatorParam} from '../params/Separator';\n// import {StringParam} from '../params/String';\n// import {Vector2Param} from '../params/Vector2';\n// import {Vector3Param} from '../params/Vector3';\n// import {Vector4Param} from '../params/Vector4';\nimport {NodeEvent} from '../poly/NodeEvent';\nimport {NodeContext} from '../poly/NodeContext';\n\n// import {TypedContainer} from '../containers/_Base';\nimport {ParamsAccessorType, ParamsAccessor} from './utils/params/ParamsAccessor';\n\nexport interface NodeVisitor {\n\tvisit_node: (node: BaseNodeType) => any;\n\tvisit_node_obj: (node: BaseNodeType) => any;\n}\n\nexport interface NodeDeletedEmitData {\n\tparent_id: string;\n}\nexport interface NodeCreatedEmitData {\n\tchild_node_json: NodeSerializerData;\n}\ntype EmitDataByNodeEventMapGeneric = {[key in NodeEvent]: any};\nexport interface EmitDataByNodeEventMap extends EmitDataByNodeEventMapGeneric {\n\t[NodeEvent.CREATED]: NodeCreatedEmitData;\n\t[NodeEvent.DELETED]: NodeDeletedEmitData;\n\t[NodeEvent.ERROR_UPDATED]: undefined;\n}\n// emit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n// \temit(event_name: NodeEvent.DELETED, data: NodeDeletedEmitData): void;\n// \temit(event_name: NodeEvent.NAME_UPDATED): void;\n// \temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n// \temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n// \temit(event_name: NodeEvent.ERROR_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n// \temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\nimport {ContainerMap} from '../containers/utils/ContainerMap';\nimport {ContainableMap} from '../containers/utils/ContainableMap';\nimport {BaseContainer} from '../containers/_Base';\nimport {ParamOptions} from '../params/utils/OptionsController';\nimport {ParamType} from '../poly/ParamType';\nimport {DisplayNodeController} from './utils/DisplayNodeController';\n\n// type Container = ContainerMap[KT];\ntype KT = keyof ContainerMap;\nexport class TypedNode<T extends KT, NT extends BaseNodeType, K extends NodeParamsConfig> extends CoreGraphNode {\n\tcontainer_controller: TypedContainerController<ContainerMap[T]> = new TypedContainerController<ContainerMap[T]>(\n\t\tthis,\n\t\tBaseContainer\n\t);\n\n\tprivate _parent_controller: HierarchyParentController | undefined;\n\n\tprivate _ui_data: UIData | undefined;\n\n\tprivate _dependencies_controller: DependenciesController | undefined;\n\tprivate _states: StatesController | undefined;\n\tprivate _lifecycle: LifeCycleController | undefined;\n\tprivate _serializer: NodeSerializer | undefined;\n\tprivate _cook_controller: CookController | undefined;\n\tpublic readonly flags: FlagsController | undefined;\n\tprotected _display_node_controller: DisplayNodeController | undefined;\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\n\tprivate _params_controller: ParamsController | undefined;\n\treadonly params_config: K | undefined;\n\treadonly pv: ParamsValueAccessorType<K> = (<unknown>new ParamsValueAccessor<K>()) as ParamsValueAccessorType<K>;\n\t// readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n\treadonly p: ParamsAccessorType<K> = (<unknown>new ParamsAccessor<K>()) as ParamsAccessorType<K>;\n\t// readonly p: ParamsAccessor<K> = new ParamsAccessor<K>(this);\n\n\tprivate _processing_context: ProcessingContext | undefined;\n\tprivate _name_controller: NameController | undefined;\n\tprivate _io: IOController<NT> | undefined;\n\tget parent_controller(): HierarchyParentController {\n\t\treturn (this._parent_controller = this._parent_controller || new HierarchyParentController(this));\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate _children_controller: HierarchyChildrenController | undefined;\n\tprotected _children_controller_context: NodeContext | undefined;\n\tget children_controller_context() {\n\t\treturn this._children_controller_context;\n\t}\n\tprivate _create_children_controller(): HierarchyChildrenController | undefined {\n\t\tif (this._children_controller_context) {\n\t\t\treturn new HierarchyChildrenController(this, this._children_controller_context);\n\t\t}\n\t}\n\tget children_controller(): HierarchyChildrenController | undefined {\n\t\treturn (this._children_controller = this._children_controller || this._create_children_controller());\n\t}\n\tchildren_allowed(): boolean {\n\t\treturn this._children_controller_context != null;\n\t}\n\n\tget ui_data(): UIData {\n\t\treturn (this._ui_data = this._ui_data || new UIData(this));\n\t}\n\tget dependencies_controller(): DependenciesController {\n\t\treturn (this._dependencies_controller = this._dependencies_controller || new DependenciesController(this));\n\t}\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\tget lifecycle(): LifeCycleController {\n\t\treturn (this._lifecycle = this._lifecycle || new LifeCycleController(this));\n\t}\n\tget serializer(): NodeSerializer {\n\t\treturn (this._serializer = this._serializer || new NodeSerializer(this));\n\t}\n\t// get container_controller(): TypedContainerController<T> {\n\t// \treturn (this._container_controller = this._container_controller || new TypedContainerController<T>(this));\n\t// }\n\tget cook_controller(): CookController {\n\t\treturn (this._cook_controller = this._cook_controller || new CookController(this));\n\t}\n\tget io(): IOController<NT> {\n\t\treturn (this._io = this._io || new IOController<NT>((<unknown>this) as NT));\n\t}\n\tget name_controller(): NameController {\n\t\treturn (this._name_controller = this._name_controller || new NameController(this));\n\t}\n\tset_name(name: string) {\n\t\tthis.name_controller.set_name(name);\n\t}\n\t_set_core_name(name: string) {\n\t\tthis._name = name;\n\t}\n\tget params(): ParamsController {\n\t\treturn (this._params_controller = this._params_controller || new ParamsController(this));\n\t}\n\tget processing_context(): ProcessingContext {\n\t\treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n\t}\n\n\tconstructor(scene: PolyScene, name: string = 'BaseNode') {\n\t\tsuper(scene, name);\n\t}\n\n\tprivate _initialized: boolean = false;\n\tpublic initialize_base_and_node() {\n\t\tif (!this._initialized) {\n\t\t\tthis.initialize_base_node(); // for base classes of Sop, Obj...\n\t\t\tthis.initialize_node(); // for Derivated node clases, like BoxSop, TransformSop...\n\t\t\tthis._initialized = true;\n\t\t} else {\n\t\t\tconsole.warn('node already initialized');\n\t\t}\n\t}\n\tprotected initialize_base_node() {}\n\tprotected initialize_node() {}\n\t// constructor() {\n\t// \tsuper('base_node');\n\n\t// \t// this._init_node_scene()\n\t// \t// this._init_context_owner()\n\t// \t// this._init_dirtyable()\n\t// \t// this._init_graph_node()\n\n\t// \t// this._init_bypass_flag();\n\t// \t// this._init_display_flag();\n\t// \t//this._init_context()\n\t// \t// this._init_cook();\n\t// \t// this._init_error();\n\t// \t// this._init_inputs();\n\t// \t// this._init_outputs();\n\t// \t// this._init_hierarchy_parent_owner();\n\t// \t//this._init_time_dependent()\n\t// \t// this._init_ui_data();\n\t// }\n\tstatic type(): string {\n\t\tthrow 'type to be overriden';\n\t}\n\tget type() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.type();\n\t}\n\tstatic node_context(): NodeContext {\n\t\tthrow 'requires override';\n\t}\n\tnode_context(): NodeContext {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.node_context();\n\t}\n\n\tstatic required_three_imports(): string[] {\n\t\treturn [];\n\t}\n\tstatic required_imports() {\n\t\tlet three_imports = this.required_three_imports();\n\t\tif (three_imports) {\n\t\t\t// if (!lodash_isArray(three_imports)) {\n\t\t\t// \tthree_imports = [<unknown>three_imports as string];\n\t\t\t// }\n\t\t\treturn three_imports.map((e) => `three/examples/jsm/${e}`);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\trequired_imports() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.required_imports();\n\t}\n\tstatic require_webgl2(): boolean {\n\t\treturn false;\n\t}\n\trequire_webgl2(): boolean {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.require_webgl2();\n\t}\n\n\t// set_scene(scene: PolyScene) {\n\t// \tsuper.set_scene(scene);\n\t// \t// this.io.inputs._init_graph_node_inputs();\n\t// }\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node']> {\n\t// \treturn visitor.visit_node(this);\n\t// }\n\tset_parent(parent: BaseNodeType | null) {\n\t\tthis.parent_controller.set_parent(parent);\n\t}\n\tget parent() {\n\t\treturn this.parent_controller.parent;\n\t}\n\tget root() {\n\t\treturn this._scene.root;\n\t}\n\tfull_path(): string {\n\t\treturn this.parent_controller.full_path();\n\t}\n\n\t// params\n\tcreate_params() {}\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\toptions?: ParamOptions\n\t): ParamConstructorMap[T] | undefined {\n\t\treturn this._params_controller?.add_param(type, name, default_value, options);\n\t}\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tthis._params_controller?.within_param_folder(folder_name, callback);\n\t// }\n\n\t// cook\n\tcook(input_contents: any[]): any {\n\t\treturn null;\n\t}\n\n\t// container\n\tasync request_container() {\n\t\treturn await this.container_controller.request_container();\n\t}\n\tset_container(content: ContainableMap[T], message: string | null = null) {\n\t\t// if message?\n\t\t// TODO: typescript: why is this a type of never\n\t\tthis.container_controller.container.set_content(content as never); //, this.self.cook_eval_key());\n\t\tif (content != null) {\n\t\t\tif (!(content as any).name) {\n\t\t\t\t(content as any).name = this.full_path();\n\t\t\t}\n\t\t\tif (!(content as any).node) {\n\t\t\t\t(content as any).node = this;\n\t\t\t}\n\t\t}\n\t\t//if @_container.has_content()?\n\t\tthis.cook_controller.end_cook(message);\n\t}\n\n\t// hierarchy\n\tcreate_node(type: string) {\n\t\treturn this.children_controller?.create_node(type);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis.children_controller?.remove_node(node);\n\t}\n\tchildren() {\n\t\treturn this.children_controller?.children() || [];\n\t}\n\tnode(path: string) {\n\t\treturn this.parent_controller?.find_node(path) || null;\n\t}\n\tnodes_by_type(type: string) {\n\t\treturn this.children_controller?.nodes_by_type(type) || [];\n\t}\n\n\t// inputs\n\tset_input(input_index_or_name: number | string, node: NT | null, output_index_or_name: number | string = 0) {\n\t\tthis.io.inputs.set_input(input_index_or_name, node, output_index_or_name);\n\t}\n\n\t// emit\n\n\temit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n\temit(event_name: NodeEvent.DELETED, data: EmitDataByNodeEventMap[NodeEvent.DELETED]): void;\n\temit(event_name: NodeEvent.NAME_UPDATED): void;\n\temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n\temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n\temit(event_name: NodeEvent.ERROR_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n\temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\temit(event_name: NodeEvent, data: object | null = null): void {\n\t\t// super.emit(event_name, data);\n\t\tthis.scene.dispatch_controller.dispatch(this, event_name, data);\n\t}\n\n\t// serializer\n\tto_json(include_param_components: boolean = false) {\n\t\treturn this.serializer.to_json(include_param_components);\n\t}\n}\n\nexport type BaseNodeType = TypedNode<any, BaseNodeType, any>;\nexport class BaseNodeClass extends TypedNode<any, BaseNodeType, any> {}\n","import {Euler} from 'three/src/math/Euler';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\n\n// import {Object3D} from 'three/src/core/Object3D';\n// import {BaseTransformedObjNodeType} from '../_BaseTransformed';\nimport {CoreMath} from '../../../../core/math/_Module';\nimport {CoreTransform, SetParamsFromMatrixOptions} from '../../../../core/Transform';\n// import {BaseObjNodeType} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\nimport {TypedObjNode, BaseObjNodeType} from '../_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {FlagsControllerD} from '../../utils/FlagsController';\n// import {LookAtController} from './LookAtController';\nexport function TransformedParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttransform = ParamConfig.FOLDER();\n\t\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\t\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\t\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\t\tscale = ParamConfig.FLOAT(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('', {node_selection: {context: NodeContext.OBJ}});\n\t\t// up = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// pivot = ParamConfig.VECTOR3([0, 0, 0]);\n\t};\n}\nclass TransformedParamsConfig extends TransformedParamConfig(NodeParamsConfig) {}\nexport class TransformedObjNode extends TypedObjNode<Object3D, TransformedParamsConfig> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\t// get transform_controller(): TransformController {\n\t// \treturn this._transform_controller; // = this._transform_controller || new TransformController(this));\n\t// }\n}\n\nexport class TransformController {\n\tconstructor(private node: TransformedObjNode) {}\n\n\t// protected _look_at_controller = new LookAtController(this.node);\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\n\tinitialize_node() {\n\t\t// not sure we should change if it is used in the scene, as parented children may still be\n\t\t// this.node.flags.display.add_hook(() => {\n\t\t// \t// this.node.set_used_in_scene(this.node.flags.display.active || false);\n\t\t// \tthis.node.object.visible = this.node.flags.display.active;\n\t\t// });\n\t\t// this.node.set_used_in_scene(true);\n\n\t\tthis.node.io.inputs.set_count(0, 1);\n\t\tthis.node.io.inputs.set_depends_on_inputs(false);\n\t\tthis.node.io.outputs.set_has_one_output();\n\t\tthis.node.io.inputs.add_on_set_input_hook('on_input_updated', () => {\n\t\t\tthis.on_input_updated();\n\t\t});\n\n\t\tconst hook_name = '_cook_main_without_inputs_when_dirty';\n\t\tif (!this.node.dirty_controller.has_hook(hook_name)) {\n\t\t\tthis.node.dirty_controller.add_post_dirty_hook(hook_name, this._cook_main_without_inputs_when_dirty_bound);\n\t\t}\n\t}\n\t// TODO: this will have to be checked via the parent, when I will have obj managers at lower levels than root\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.node.used_in_scene) {\n\t\tawait this.node.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\n\tstatic on_input_updated(node: BaseObjNodeType) {\n\t\tif (node.io.inputs.input(0) != null) {\n\t\t\tnode.root.add_to_parent_transform(node);\n\t\t} else {\n\t\t\tnode.root.remove_from_parent_transform(node);\n\t\t}\n\t}\n\ton_input_updated() {\n\t\tTransformController.on_input_updated(this.node);\n\t}\n\n\tupdate(matrix?: Matrix4) {\n\t\t// const object = this.node.object;\n\t\t// const update_full_matrix = false; // if true the camera controls do not work anymore\n\t\t//matrix = Core.Transform.matrix_from_node_with_transform_params(this)\n\n\t\t// if (object) {\n\t\t// if update_full_matrix\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\n\t\t// if (this._look_at_controller.active == true) {\n\t\t// \treturn this._look_at_controller.compute(); //this._use_look_at_param();\n\t\t// } else {\n\t\tthis.update_transform_with_matrix(matrix);\n\t\t// }\n\t\t// if matrix?\n\t\t// \t# do not apply to cameras with control\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\t\t// \tthis.update_transform_from_params()\n\t\t// } else {\n\t\t// \tconsole.warn(`no object to update for ${this.node.full_path()}`);\n\t\t// \t// return false;\n\t\t// }\n\t}\n\n\tupdate_transform_with_matrix(matrix?: Matrix4) {\n\t\t//console.warn \"no object to update for #{this.full_path()}\"\n\t\tconst object = this.node.object;\n\t\t//matrix ?= Core.Transform.matrix_from_node_with_transform_params(this)\n\t\tif (matrix != null && !matrix.equals(object.matrix)) {\n\t\t\t// do not apply to cameras with control\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.matrix = matrix;\n\n\t\t\treturn object.dispatchEvent({type: 'change'});\n\t\t} else {\n\t\t\treturn this.update_transform_from_params();\n\t\t}\n\t}\n\n\tprivate _update_transform_from_params_scale = new Vector3();\n\tupdate_transform_from_params() {\n\t\tconst object = this.node.object;\n\t\tif (object) {\n\t\t\tconst position: Vector3 = this.node.pv.t;\n\t\t\t//quaternion = new Quaternion()\n\t\t\tconst rotation: Vector3 = this.node.pv.r;\n\n\t\t\tthis._update_transform_from_params_scale.copy(this.node.pv.s).multiplyScalar(this.node.pv.scale);\n\t\t\t// const scale: Vector3 = this.node.pv.s\n\t\t\t// \t.clone()\n\t\t\t// \t.multiplyScalar(this.node.pv.scale);\n\t\t\t//matrix.decompose( position, quaternion, scale )\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.position.copy(position);\n\t\t\t//object.quaternion.copy(quaternion)\n\t\t\tconst radians = [\n\t\t\t\tCoreMath.degrees_to_radians(rotation.x),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.y),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.z),\n\t\t\t];\n\t\t\tconst euler = new Euler(\n\t\t\t\tradians[0],\n\t\t\t\tradians[1],\n\t\t\t\tradians[2]\n\t\t\t\t//'XYZ'\n\t\t\t);\n\t\t\tobject.rotation.copy(euler);\n\t\t\tobject.scale.copy(this._update_transform_from_params_scale);\n\t\t\tobject.matrixAutoUpdate = true;\n\t\t\tobject.updateMatrix();\n\n\t\t\tobject.dispatchEvent({type: 'change'});\n\t\t}\n\t}\n\n\tset_params_from_matrix(matrix: Matrix4, options: SetParamsFromMatrixOptions = {}) {\n\t\tCoreTransform.set_params_from_matrix(matrix, this.node, options);\n\t}\n}\n","/// <reference path=\"../../custom_typings/math.d.ts\" />\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Euler} from 'three/src/math/Euler';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {MathUtils} from 'three/src/math/MathUtils';\n\nimport {BaseNodeType} from '../engine/nodes/_Base';\n\nconst ROTATION_ORDER = 'XYZ';\n\nexport interface SetParamsFromMatrixOptions {\n\tscale?: boolean;\n}\n\n// TODO: remove the \"new\" in this whole file\n// const euler = new Euler(0, 0, 0, ROTATION_ORDER)\n\nexport class CoreTransform {\n\t// static create_params(node: BaseNodeType) {\n\t// \tnode.add_param(ParamType.VECTOR3, 't', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 'r', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 's', [1, 1, 1]);\n\t// \tnode.add_param(ParamType.FLOAT, 'scale', 1, {range: [0, 10]});\n\t// \tnode.add_param(ParamType.OPERATOR_PATH, 'look_at', '');\n\t// \tnode.add_param(ParamType.VECTOR3, 'up', [0, 1, 0]);\n\t// }\n\n\t// static matrix_from_node_with_transform_params(node: BaseNodeType): Matrix4 {\n\t// \tconst t = node.params.vector3('t');\n\t// \tconst r = node.params\n\t// \t\t.vector3('r')\n\t// \t\t.clone()\n\t// \t\t.multiplyScalar(Math.PI / 180);\n\t// \tconst s = node.params.vector3('s');\n\t// \tconst scale = node.params.float('scale');\n\t// \treturn this.matrix(t, r, s, scale);\n\t// }\n\n\t// if this is done, make sure to use eval with a  callback\n\t// @matrix_from_params: (node) ->\n\t// \tt = node.param('t').eval()\n\t// \tr = node.param('r').eval().multiplyScalar( Math.PI / 180 )\n\t// \ts = node.param('s').eval()\n\t// \tscale = node.param('scale').eval()\n\t// \tthis.matrix(t, r, s, scale)\n\n\tstatic set_params_from_matrix(matrix: Matrix4, node: BaseNodeType, options: SetParamsFromMatrixOptions = {}) {\n\t\tlet update_scale = options['scale'];\n\t\tif (update_scale == null) {\n\t\t\tupdate_scale = true;\n\t\t}\n\n\t\t// EPSILON = 0.0000001\n\t\t// PRECISION = 1000\n\t\t// components = ['x', 'y', 'z']\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3();\n\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\tconst euler = new Euler().setFromQuaternion(quaternion);\n\t\tconst rotation = euler.toVector3();\n\t\trotation.divideScalar(Math.PI / 180);\n\n\t\t// limit precision of position and rotation\n\t\t// lodash_each [position, rotation], (vector)->\n\t\t// \tlodash_each ['x', 'y', 'z'], (c)->\n\t\t// \t\tval = vector[c]\n\t\t// \t\tapproximation = parseInt(val * PRECISION) / PRECISION\n\t\t// \t\tvector[c] = approximation\n\n\t\t// round scale if we get values like 0.9999999999 or 1.00000000001\n\t\t// lodash_each ['x', 'y', 'z'], (c)->\n\t\t// \tval = scale[c]\n\t\t// \trounded = Math.round(val)\n\t\t// \tif Math.abs(val - rounded) < EPSILON\n\t\t// \t\tscale[c] = rounded\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('r', rotation.toArray() as Number3);\n\t\t\tnode.params.set_vector3('t', position.toArray() as Number3);\n\t\t\tnode.params.set_vector3('s', scale.toArray() as Number3);\n\t\t\tif (update_scale) {\n\t\t\t\tnode.params.set_float('scale', 1);\n\t\t\t}\n\t\t});\n\t}\n\t// this.object().position.copy(position)\n\t// this.object().quaternion.copy(quaternion)\n\t// this.object().scale.copy(scale)\n\n\tstatic set_params_from_object(object: Object3D, node: BaseNodeType) {\n\t\tconst position = object.position.toArray() as Number3;\n\t\tconst rotation = object.rotation.toArray().map((c) => c * (180 / Math.PI)) as Number3;\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('t', position);\n\t\t\tnode.params.set_vector3('r', rotation);\n\t\t});\n\t}\n\n\t// static translation_matrix(x: number, y: number, z: number): Matrix4 {\n\t// \tconst t = new Vector3(x, y, z);\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst s = new Vector3(1, 1, 1);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\n\tprivate _translation_matrix: Matrix4 = new Matrix4();\n\tprivate _translation_matrix_q = new Quaternion();\n\tprivate _translation_matrix_s = new Vector3(1, 1, 1);\n\ttranslation_matrix(t: Vector3): Matrix4 {\n\t\tthis._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n\t\treturn this._translation_matrix;\n\t}\n\n\tstatic matrix_quaternion(matrix: Matrix4): Quaternion {\n\t\tconst t = new Vector3();\n\t\tconst quat = new Quaternion();\n\t\tconst s = new Vector3();\n\t\tmatrix.decompose(t, quat, s);\n\t\treturn quat;\n\t}\n\n\t// static matrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t// \t// if I don't clone here, it created issues in the transform SOP\n\t// \ts = s.clone().multiplyScalar(scale);\n\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst euler = new Euler(r.x, r.y, r.z, ROTATION_ORDER);\n\t// \tquaternion.setFromEuler(euler);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\tprivate _matrix = new Matrix4().identity();\n\tprivate _matrix_q = new Quaternion();\n\tprivate _matrix_e = new Euler();\n\tprivate _matrix_s = new Vector3();\n\tmatrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t\tthis._matrix_e.set(MathUtils.degToRad(r.x), MathUtils.degToRad(r.y), MathUtils.degToRad(r.z), ROTATION_ORDER);\n\t\tthis._matrix_q.setFromEuler(this._matrix_e);\n\n\t\tthis._matrix_s.copy(s).multiplyScalar(scale);\n\n\t\tthis._matrix.compose(t, this._matrix_q, this._matrix_s);\n\t\treturn this._matrix;\n\t}\n\n\t// static rotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t// \tconst quaternion = new Quaternion();\n\t// \tquaternion.setFromUnitVectors(vec_origin, vec_dest.clone().normalize());\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.makeRotationFromQuaternion(quaternion);\n\t// \tgeometry.applyMatrix(matrix);\n\t// }\n\n\tprivate _rotate_geometry_m = new Matrix4();\n\tprivate _rotate_geometry_q = new Quaternion();\n\tprivate _rotate_geometry_vec_dest = new Vector3();\n\trotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t\tthis._rotate_geometry_vec_dest.copy(vec_dest);\n\t\tthis._rotate_geometry_vec_dest.normalize();\n\t\tthis._rotate_geometry_q.setFromUnitVectors(vec_origin, this._rotate_geometry_vec_dest);\n\t\t// this._rotate_geometry_m.identity(); // not entirely sure this is necessary\n\t\tthis._rotate_geometry_m.makeRotationFromQuaternion(this._rotate_geometry_q);\n\t\tgeometry.applyMatrix4(this._rotate_geometry_m);\n\t}\n}\n","// import {Vector3} from 'three/src/math/Vector3'\n// import {Vector2} from 'three/src/math/Vector2'\n\nimport {CoreWalker} from '../../core/Walker';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\n// import {NodeScene} from '../../core/graph/NodeScene';\n// import {NamedGraphNode} from '../../core/graph/NamedGraphNode';\nimport {BaseNodeType} from '../nodes/_Base';\n\n// import {CallbackOption} from './concerns/options/Callback'\n// import {ColorOption} from './concerns/options/Color'\n// import {CookOption} from './concerns/options/Cook'\n// import {DesktopOption} from './concerns/options/Desktop'\n// import {ExpressionOption} from './concerns/options/Expression'\n// import {MenuOption} from './concerns/options/Menu'\n// import {NodeSelectionOption} from './concerns/options/NodeSelection'\n// import {RangeOption} from './concerns/options/Range'\n// import {AssetReferenceOption} from './concerns/options/AssetReference'\n// import {SpareOption} from './concerns/options/Spare'\n// import {MultilineOption} from './concerns/options/Multiline'\n// import {TextureOption} from './concerns/options/Texture'\n// import {VisibleOption} from './concerns/options/Visible'\n\n// import {Emit} from './concerns/Emit';\n// import {Errored} from './concerns/Errored';\n// import {Eval} from './concerns/Eval';\n// import {Expression} from './concerns/Expression';\n// import {Hierarchy} from './concerns/Hierarchy';\n// import {Json} from './concerns/Json';\n// import {Named} from './concerns/Named';\n// import {Node} from './concerns/Node';\n// import {Options} from './concerns/Options';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {Type} from './concerns/Type';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {VisitorsBase} from './concerns/visitors/_Base';\n\nimport {OptionsController} from './utils/OptionsController';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {EmitController} from './utils/EmitController';\nimport {ParamSerializer} from './utils/Serializer';\nimport {StatesController} from './utils/StatesController';\n// import {UIData} from './utils/UIData';\n\nimport {TypedMultipleParam} from './_Multiple';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {PolyScene} from '../scene/PolyScene';\n\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../params/types/ParamValuesTypeMap';\nimport {ParamValueSerializedTypeMap} from '../params/types/ParamValueSerializedTypeMap';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n// import {TypedNumericParam} from './_Numeric';\n\n// export interface ParamVisitor {\n// \tvisit_param: (param: BaseParamType) => any;\n// \tvisit_multiple_param: (param: TypedMultipleParam<any>) => any;\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\n// type ParamTypeElem = ParamType;\ntype ComputeCallback = (value: void) => void;\n\nexport abstract class TypedParam<T extends ParamType> extends CoreGraphNode {\n\t// protected _raw_input: ParamInitValuesTypeMap[T];\n\tprotected _default_value!: ParamInitValuesTypeMap[T];\n\tprotected _raw_input!: ParamInitValuesTypeMap[T];\n\tprotected _value!: ParamValuesTypeMap[T];\n\t// protected _expression: string;\n\tprotected _node!: BaseNodeType;\n\tprotected _parent_param: TypedMultipleParam<any> | undefined;\n\tprotected _components: FloatParam[] | undefined;\n\tprotected _compute_resolves: ComputeCallback[] | undefined;\n\n\tprivate _options: OptionsController = new OptionsController(this);\n\tget options(): OptionsController {\n\t\treturn (this._options = this._options || new OptionsController(this));\n\t}\n\tprivate _emit_controller: EmitController = new EmitController(this);\n\tget emit_controller(): EmitController {\n\t\treturn (this._emit_controller = this._emit_controller || new EmitController(this));\n\t}\n\tprotected _expression_controller: ExpressionController<T> | undefined;\n\tget expression_controller(): ExpressionController<T> | undefined {\n\t\treturn this._expression_controller; // =\n\t\t//this._expression_controller || new ExpressionController(this);\n\t}\n\tprivate _serializer: ParamSerializer | undefined;\n\tget serializer(): ParamSerializer {\n\t\treturn (this._serializer = this._serializer || new ParamSerializer(this));\n\t}\n\tprivate _states: StatesController | undefined;\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\t// private _ui_data: UIData | undefined;\n\t// get ui_data(): UIData {\n\t// \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n\t// }\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseParam');\n\t\tthis.initialize_param();\n\t}\n\tinitialize_value() {}\n\tinitialize_param() {}\n\t// \t// this.add_post_dirty_hook(this._remove_node_param_cache.bind(this))\n\t// }\n\t// initialize() {\n\t// \tthis.init_components();\n\t// \t// this.init_expression()\n\t// \t// this._init_ui_data()\n\t// }\n\t// accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n\t// \treturn visitor.visit_param(this);\n\t// }\n\n\t//\n\t// init_expression() {}\n\n\t// type\n\tstatic type(): ParamType {\n\t\treturn ParamType.FLOAT; // adding a type here, but just to not have a compile error\n\t}\n\tget type(): T {\n\t\treturn (this.constructor as typeof BaseParamClass).type() as T;\n\t}\n\tget is_numeric(): boolean {\n\t\treturn false;\n\t}\n\n\t// name\n\tset_name(name: string) {\n\t\tsuper.set_name(name);\n\t}\n\n\tget value(): ParamValuesTypeMap[T] {\n\t\treturn this._value;\n\t}\n\tabstract get default_value_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get raw_input_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get value_serialized(): ParamValueSerializedTypeMap[T];\n\tconvert(raw_val: any): ParamValuesTypeMap[T] | null {\n\t\treturn null;\n\t}\n\tstatic are_raw_input_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_raw_input_equal(other_raw_input: ParamInitValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_raw_input_equal(this._raw_input, other_raw_input);\n\t}\n\tstatic are_values_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_value_equal(other_val: ParamValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_values_equal(this.value, other_val);\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input;\n\t}\n\tset(raw_input: ParamInitValuesTypeMap[T]): void {\n\t\tthis._raw_input = this._clone_raw_input(this._prefilter_invalid_raw_input(raw_input));\n\t\tthis.emit_controller.emit(ParamEvent.RAW_INPUT_UPDATED);\n\t\tthis.process_raw_input();\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget is_default(): boolean {\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\n\tprotected process_raw_input() {}\n\tprivate _is_computing: boolean = false;\n\tasync compute(): Promise<void> {\n\t\tif (this.scene.loading_controller.is_loading) {\n\t\t\tconsole.warn(`param attempt to compute ${this.full_path()}`);\n\t\t}\n\n\t\tif (this.is_dirty) {\n\t\t\tif (!this._is_computing) {\n\t\t\t\tthis._is_computing = true;\n\t\t\t\tawait this.process_computation();\n\t\t\t\tthis._is_computing = false;\n\n\t\t\t\tif (this._compute_resolves) {\n\t\t\t\t\tlet callback: ComputeCallback | undefined;\n\t\t\t\t\twhile ((callback = this._compute_resolves.pop())) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._compute_resolves = this._compute_resolves || [];\n\t\t\t\t\tthis._compute_resolves.push(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {}\n\t// set_default_value(default_value: ParamValuesTypeMap[T]) {\n\t// \tthis._default_value = default_value;\n\t// }\n\tset_init_value(init_value: ParamInitValuesTypeMap[T]) {\n\t\tthis._default_value = init_value; //this.convert(init_value);\n\t\t// this._raw_input = this._clone_raw_input(init_value);\n\n\t\t// if (this.is_multiple) {\n\t\t// \tthis.init_components();\n\t\t// }\n\n\t\t// this.set(init_value);\n\t}\n\t// eval_p(): Promise<ParamValuesTypeMap[T]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tresolve();\n\t// \t});\n\t// }\n\n\t// node\n\tset_node(node: BaseNodeType | null) {\n\t\tif (!node) {\n\t\t\tif (this._node) {\n\t\t\t\tthis._node.params.params_node?.remove_graph_input(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._node = node;\n\t\t\tif (this.options.makes_node_dirty_when_dirty() && !this.parent_param) {\n\t\t\t\tnode.params.params_node?.add_graph_input(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.components) {\n\t\t\tfor (let c of this.components) {\n\t\t\t\tc.set_node(node);\n\t\t\t}\n\t\t}\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget parent() {\n\t\treturn this.node;\n\t}\n\n\t// hierarchy\n\tset_parent_param(param: TypedMultipleParam<any>) {\n\t\tparam.add_graph_input(this);\n\t\tthis._parent_param = param;\n\t}\n\tget parent_param(): TypedMultipleParam<any> | undefined {\n\t\treturn this._parent_param;\n\t}\n\thas_parent_param(): boolean {\n\t\treturn this._parent_param != null;\n\t}\n\tfull_path(): string {\n\t\treturn this.node?.full_path() + '/' + this.name;\n\t}\n\tpath_relative_to(node: BaseNodeType | BaseParamType): string {\n\t\treturn CoreWalker.relative_path(node, this);\n\t}\n\n\t// emit\n\temit(event_name: ParamEvent): void {\n\t\tif (this.emit_controller.emit_allowed) {\n\t\t\tthis.emit_controller.increment_count(event_name);\n\t\t\tthis.scene.dispatch_controller.dispatch(this, event_name);\n\t\t}\n\t}\n\n\t// multiple\n\tget components() {\n\t\treturn this._components;\n\t}\n\tstatic get component_names(): string[] {\n\t\treturn [];\n\t}\n\tget component_names(): string[] {\n\t\tconst c = (<unknown>this.constructor) as TypedParam<T>;\n\t\treturn c.component_names;\n\t}\n\tget is_multiple(): boolean {\n\t\treturn this.component_names.length > 0;\n\t}\n\t// create_components() {}\n\tinit_components() {}\n\n\t// expression\n\t// set_expression(expression: string | null) {\n\t// \tthis.expression_controller.set_expression(expression);\n\t// }\n\thas_expression(): boolean {\n\t\treturn this.expression_controller != null && this.expression_controller.active; // use this._expression_controller to avoid creating it\n\t}\n\n\t// serialize\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n}\nexport type BaseParamType = TypedParam<ParamType>;\nexport class BaseParamClass extends TypedParam<ParamType> {\n\tget default_value_serialized() {\n\t\treturn 'BaseParamClass.default_value_serialized overriden';\n\t}\n\tget raw_input_serialized() {\n\t\treturn 'BaseParamClass.raw_input_serialized overriden';\n\t}\n\tget value_serialized() {\n\t\treturn 'BaseParamClass.value_serialized overriden';\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {BypassFlag} from './flags/Bypass';\nimport {DisplayFlag} from './flags/Display';\n\nexport class FlagsController {\n\tpublic readonly bypass: DisplayFlag | undefined;\n\tpublic readonly display: BypassFlag | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\thas_display(): boolean {\n\t\treturn false;\n\t}\n\thas_bypass(): boolean {\n\t\treturn false;\n\t}\n}\n\nfunction Display<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic display: DisplayFlag = new DisplayFlag(this.node);\n\t\thas_display(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\nfunction Bypass<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic readonly bypass: BypassFlag = new BypassFlag(this.node);\n\t\thas_bypass(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n\nexport class FlagsControllerD extends Display(FlagsController) {}\nexport class FlagsControllerB extends Bypass(FlagsController) {}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {}\n","export default \"\\n\\n// https://github.com/mattatz/ShibuyaCrowd/blob/master/source/shaders/common/quaternion.glsl\\nvec4 quat_mult(vec4 q1, vec4 q2)\\n{\\n\\treturn vec4(\\n\\tq1.w * q2.x + q1.x * q2.w + q1.z * q2.y - q1.y * q2.z,\\n\\tq1.w * q2.y + q1.y * q2.w + q1.x * q2.z - q1.z * q2.x,\\n\\tq1.w * q2.z + q1.z * q2.w + q1.y * q2.x - q1.x * q2.y,\\n\\tq1.w * q2.w - q1.x * q2.x - q1.y * q2.y - q1.z * q2.z\\n\\t);\\n}\\n// http://glmatrix.net/docs/quat.js.html#line97\\n//   let ax = a[0], ay = a[1], az = a[2], aw = a[3];\\n\\n//   let bx = b[0], by = b[1], bz = b[2], bw = b[3];\\n\\n//   out[0] = ax * bw + aw * bx + ay * bz - az * by;\\n\\n//   out[1] = ay * bw + aw * by + az * bx - ax * bz;\\n\\n//   out[2] = az * bw + aw * bz + ax * by - ay * bx;\\n\\n//   out[3] = aw * bw - ax * bx - ay * by - az * bz;\\n\\n//   return out\\n\\n\\n\\n// http://www.neilmendoza.com/glsl-rotation-about-an-arbitrary-axis/\\nmat4 rotationMatrix(vec3 axis, float angle)\\n{\\n\\taxis = normalize(axis);\\n\\tfloat s = sin(angle);\\n\\tfloat c = cos(angle);\\n\\tfloat oc = 1.0 - c;\\n\\n \\treturn mat4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s,  oc * axis.z * axis.x + axis.y * s, 0.0, oc * axis.x * axis.y + axis.z * s,  oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s,  0.0, oc * axis.z * axis.x - axis.y * s,  oc * axis.y * axis.z + axis.x * s,  oc * axis.z * axis.z + c, 0.0, 0.0, 0.0, 0.0, 1.0);\\n}\\n\\n// https://www.geeks3d.com/20141201/how-to-rotate-a-vertex-by-a-quaternion-in-glsl/\\nvec4 quat_from_axis_angle(vec3 axis, float angle)\\n{\\n\\tvec4 qr;\\n\\tfloat half_angle = (angle * 0.5); // * 3.14159 / 180.0;\\n\\tfloat sin_half_angle = sin(half_angle);\\n\\tqr.x = axis.x * sin_half_angle;\\n\\tqr.y = axis.y * sin_half_angle;\\n\\tqr.z = axis.z * sin_half_angle;\\n\\tqr.w = cos(half_angle);\\n\\treturn qr;\\n}\\nvec3 rotate_with_axis_angle(vec3 position, vec3 axis, float angle)\\n{\\n\\tvec4 q = quat_from_axis_angle(axis, angle);\\n\\tvec3 v = position.xyz;\\n\\treturn v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\\n}\\n// vec3 applyQuaternionToVector( vec4 q, vec3 v ){\\n// \\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n// }\\nvec3 rotate_with_quat( vec3 v, vec4 q )\\n{\\n\\t// vec4 qv = multQuat( quat, vec4(vec, 0.0) );\\n\\t// return multQuat( qv, vec4(-quat.x, -quat.y, -quat.z, quat.w) ).xyz;\\n\\treturn v + 2.0 * cross( q.xyz, cross( q.xyz, v ) + q.w * v );\\n}\\n// https://github.com/glslify/glsl-look-at/blob/gh-pages/index.glsl\\n// mat3 rotation_matrix(vec3 origin, vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target - origin);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n// mat3 rotation_matrix(vec3 target, float roll) {\\n// \\tvec3 rr = vec3(sin(roll), cos(roll), 0.0);\\n// \\tvec3 ww = normalize(target);\\n// \\tvec3 uu = normalize(cross(ww, rr));\\n// \\tvec3 vv = normalize(cross(uu, ww));\\n\\n// \\treturn mat3(uu, vv, ww);\\n// }\\n\\nfloat vector_angle(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 c1 = cross(start, dest);\\n\\t// We use the dot product of the cross with the Y axis.\\n\\t// This is a little arbitrary, but can still give a good sense of direction\\n\\tvec3 y_axis = vec3(0.0, 1.0, 0.0);\\n\\tfloat d1 = dot(c1, y_axis);\\n\\tfloat angle = acos(cosTheta) * sign(d1);\\n\\treturn angle;\\n}\\n\\n// http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-17-quaternions/#i-need-an-equivalent-of-glulookat-how-do-i-orient-an-object-towards-a-point-\\nvec4 vector_align(vec3 start, vec3 dest){\\n\\tstart = normalize(start);\\n\\tdest = normalize(dest);\\n\\n\\tfloat cosTheta = dot(start, dest);\\n\\tvec3 axis;\\n\\n\\t// if (cosTheta < -1 + 0.001f){\\n\\t// \\t// special case when vectors in opposite directions:\\n\\t// \\t// there is no \\\"ideal\\\" rotation axis\\n\\t// \\t// So guess one; any will do as long as it's perpendicular to start\\n\\t// \\taxis = cross(vec3(0.0f, 0.0f, 1.0f), start);\\n\\t// \\tif (length2(axis) < 0.01 ) // bad luck, they were parallel, try again!\\n\\t// \\t\\taxis = cross(vec3(1.0f, 0.0f, 0.0f), start);\\n\\n\\t// \\taxis = normalize(axis);\\n\\t// \\treturn gtx::quaternion::angleAxis(glm::radians(180.0f), axis);\\n\\t// }\\n\\tif(cosTheta > (1.0 - 0.0001) || cosTheta < (-1.0 + 0.0001) ){\\n\\t\\taxis = normalize(cross(start, vec3(0.0, 1.0, 0.0)));\\n\\t\\tif (length(axis) < 0.001 ){ // bad luck, they were parallel, try again!\\n\\t\\t\\taxis = normalize(cross(start, vec3(1.0, 0.0, 0.0)));\\n\\t\\t}\\n\\t} else {\\n\\t\\taxis = normalize(cross(start, dest));\\n\\t}\\n\\n\\tfloat angle = acos(cosTheta);\\n\\n\\treturn quat_from_axis_angle(axis, angle);\\n}\\nvec4 vector_align_with_up(vec3 start, vec3 dest, vec3 up){\\n\\tvec4 rot1 = vector_align(start, dest);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\t// vec3 right = normalize(cross(dest, up));\\n\\t// up = normalize(cross(right, dest));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(vec3(0.0, 1.0, 0.0), rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(up, newUp);\\n\\n\\t// return rot1;\\n\\treturn rot2;\\n\\t// return multQuat(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\\n\\n// https://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm\\nfloat quat_to_angle(vec4 q){\\n\\treturn 2.0 * acos(q.w);\\n}\\nvec3 quat_to_axis(vec4 q){\\n\\treturn vec3(\\n\\t\\tq.x / sqrt(1.0-q.w*q.w),\\n\\t\\tq.y / sqrt(1.0-q.w*q.w),\\n\\t\\tq.z / sqrt(1.0-q.w*q.w)\\n\\t);\\n}\\n\\nvec4 align(vec3 dir, vec3 up){\\n\\tvec3 start_dir = vec3(0.0, 0.0, 1.0);\\n\\tvec3 start_up = vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot1 = vector_align(start_dir, dir);\\n\\tup = normalize(up);\\n\\n\\t// Recompute desiredUp so that it's perpendicular to the direction\\n\\t// You can skip that part if you really want to force desiredUp\\n\\tvec3 right = normalize(cross(dir, up));\\n\\tif(length(right)<0.001){\\n\\t\\tright = vec3(1.0, 0.0, 0.0);\\n\\t}\\n\\tup = normalize(cross(right, dir));\\n\\n\\t// Because of the 1rst rotation, the up is probably completely screwed up.\\n\\t// Find the rotation between the \\\"up\\\" of the rotated object, and the desired up\\n\\tvec3 newUp = rotate_with_quat(start_up, rot1);//rot1 * vec3(0.0, 1.0, 0.0);\\n\\tvec4 rot2 = vector_align(normalize(newUp), up);\\n\\n\\t// return rot1;\\n\\treturn quat_mult(rot1, rot2);\\n\\t// return rot2 * rot1;\\n\\n}\"","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {DecomposedPath} from './DecomposedPath';\n// import {NodeSimple} from '/graph/NodeSimple'\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class CoreWalker {\n\tpublic static readonly SEPARATOR = '/';\n\tpublic static readonly DOT = '.';\n\tpublic static readonly CURRENT = CoreWalker.DOT;\n\tpublic static readonly PARENT = '..';\n\tpublic static readonly CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;\n\tpublic static readonly PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;\n\tpublic static readonly NON_LETTER_PREFIXES = [CoreWalker.SEPARATOR, CoreWalker.DOT];\n\n\tstatic find_node(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements: string[] = path.split(CoreWalker.SEPARATOR).filter((e) => e.length > 0);\n\t\tconst first_element = elements[0];\n\n\t\tlet next_node: BaseNodeType | null = null;\n\t\tif (path[0] === CoreWalker.SEPARATOR) {\n\t\t\tconst path_from_root = path.substr(1);\n\t\t\tnext_node = this.find_node(node_src.root, path_from_root, decomposed_path);\n\t\t} else {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase CoreWalker.PARENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src.parent;\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreWalker.CURRENT:\n\t\t\t\t\tdecomposed_path?.add_path_element(first_element);\n\t\t\t\t\tnext_node = node_src;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: What does .node means?? in which case is this not a node? (it is for nodes which cannot have children - but I'd like to unify the api)\n\t\t\t\t\t// console.error(\"rethink this method Walker.find_node\")\n\t\t\t\t\t// if (node_src.node != null) {\n\t\t\t\t\tnext_node = node_src.node(first_element);\n\t\t\t\t\tif (next_node) {\n\t\t\t\t\t\tdecomposed_path?.add_node(first_element, next_node);\n\t\t\t\t\t}\n\n\t\t\t\t// if (next_node == null) { this.find_node_warning(node_src, first_element); }\n\t\t\t\t// return next_node;\n\t\t\t\t// break\n\t\t\t\t// }\n\t\t\t}\n\n\t\t\tif (next_node != null && elements.length > 1) {\n\t\t\t\tconst remainder = elements.slice(1).join(CoreWalker.SEPARATOR);\n\t\t\t\tnext_node = this.find_node(next_node, remainder, decomposed_path);\n\t\t\t}\n\t\t\treturn next_node;\n\t\t}\n\n\t\treturn next_node;\n\t}\n\n\tstatic find_param(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = path.split(CoreWalker.SEPARATOR);\n\n\t\tif (elements.length === 1) {\n\t\t\treturn node_src.params.get(elements[0]);\n\t\t} else {\n\t\t\tconst node_path = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);\n\t\t\tconst node = this.find_node(node_src, node_path, decomposed_path);\n\t\t\tif (node != null) {\n\t\t\t\tconst param_name = elements[elements.length - 1];\n\t\t\t\tconst param = node.params.get(param_name);\n\t\t\t\tif (decomposed_path && param) {\n\t\t\t\t\tdecomposed_path.add_node(param_name, param);\n\t\t\t\t}\n\t\t\t\treturn param;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t\t// throw `no node found for path ${node_path}`;\n\t\t\t}\n\t\t}\n\t}\n\tstatic relative_path(src_graph_node: Readonly<NodeOrParam>, dest_graph_node: Readonly<NodeOrParam>): string {\n\t\tconst parent = this.closest_common_parent(src_graph_node, dest_graph_node);\n\t\tif (!parent) {\n\t\t\treturn dest_graph_node.full_path();\n\t\t} else {\n\t\t\tconst distance = this.distance_to_parent(src_graph_node, parent);\n\t\t\t// const up = lodash_padStart(\"\", (distance-1)*3, \"../\")\n\t\t\tlet up = '';\n\t\t\tif (distance - 1 > 0) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst ups = [];\n\t\t\t\twhile (i++ < distance - 1) {\n\t\t\t\t\tups.push(CoreWalker.PARENT);\n\t\t\t\t}\n\t\t\t\tup = ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;\n\t\t\t}\n\n\t\t\tconst parent_path_elements = parent\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst dest_path_elements = dest_graph_node\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst remaining_elements = [];\n\t\t\tlet cmptr = 0;\n\t\t\tfor (let dest_path_element of dest_path_elements) {\n\t\t\t\tif (!parent_path_elements[cmptr]) {\n\t\t\t\t\tremaining_elements.push(dest_path_element);\n\t\t\t\t}\n\t\t\t\tcmptr++;\n\t\t\t}\n\t\t\tconst down = remaining_elements.join(CoreWalker.SEPARATOR);\n\t\t\treturn `${up}${down}`;\n\t\t}\n\t}\n\n\tstatic closest_common_parent(\n\t\tgraph_node1: Readonly<NodeOrParam>,\n\t\tgraph_node2: Readonly<NodeOrParam>\n\t): BaseNodeType | null {\n\t\tconst parents1 = this.parents(graph_node1).reverse();\n\t\tconst parents2 = this.parents(graph_node2).reverse();\n\n\t\tconst min_depth = Math.min(parents1.length, parents2.length);\n\t\tlet found_parent = null;\n\n\t\tfor (let i = 0; i < min_depth; i++) {\n\t\t\tif (parents1[i].graph_node_id == parents2[i].graph_node_id) {\n\t\t\t\tfound_parent = parents1[i];\n\t\t\t}\n\t\t}\n\t\treturn found_parent;\n\t}\n\tstatic parents(graph_node: Readonly<NodeOrParam>): BaseNodeType[] {\n\t\tconst parents = [];\n\t\tlet parent = graph_node.parent;\n\t\twhile (parent) {\n\t\t\tparents.push(parent);\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn parents;\n\t}\n\tstatic distance_to_parent(graph_node: Readonly<NodeOrParam>, dest: Readonly<BaseNodeType>): number {\n\t\tlet distance = 0;\n\t\tlet current: Readonly<NodeOrParam | null> = graph_node;\n\t\tconst dest_id = dest.graph_node_id;\n\t\twhile (current && current.graph_node_id != dest_id) {\n\t\t\tdistance += 1;\n\t\t\tcurrent = current.parent;\n\t\t}\n\t\tif (current && current.graph_node_id == dest_id) {\n\t\t\treturn distance;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tstatic make_absolute_path(node_src: BaseNodeType | BaseParamType, path: string): string | null {\n\t\tconst path_elements = path.split(CoreWalker.SEPARATOR);\n\t\tconst first_element = path_elements.shift();\n\n\t\tif (first_element) {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase '..': {\n\t\t\t\t\tif (node_src.parent) {\n\t\t\t\t\t\treturn this.make_absolute_path(node_src.parent, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcase '.': {\n\t\t\t\t\treturn this.make_absolute_path(node_src, path_elements.join(CoreWalker.SEPARATOR));\n\t\t\t\t}\n\t\t\t\tdefault: {\n\t\t\t\t\treturn [node_src.full_path(), path].join(CoreWalker.SEPARATOR);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\treturn node_src.full_path();\n\t\t}\n\t}\n}\n","export enum ParamEvent {\n\tVISIBLE_UPDATED = 'param_visible_updated',\n\t// UPDATED = 'param_updated',\n\tRAW_INPUT_UPDATED = 'raw_input_updated',\n\tVALUE_UPDATED = 'param_value_updated',\n\tEXPRESSION_UPDATED = 'param_expression_update',\n\tERROR_UPDATED = 'param_error_updated',\n\tDELETED = 'param_deleted',\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Triangle} from 'three/src/math/Triangle';\nconst THREE = {Triangle, Vector3};\nimport lodash_isNumber from 'lodash/isNumber';\n// import {Octree} from './Octree'\n// import Interpolate from './Interpolate'\nimport {Easing} from './Easing';\n\nconst RAD_DEG_RATIO = Math.PI / 180;\n\nexport class CoreMath {\n\t// static Octree = Octree\n\t// static Interpolate = Interpolate\n\tstatic Easing = Easing; // used in expressins\n\n\tstatic clamp(val: number, min: number, max: number): number {\n\t\tif (val < min) {\n\t\t\treturn min;\n\t\t} else if (val > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tstatic fit01(val: number, dest_min: number, dest_max: number): number {\n\t\t// const size = max - min;\n\t\t// return (val - min) / size;\n\t\treturn this.fit(val, 0, 1, dest_min, dest_max);\n\t}\n\n\tstatic fit(val: number, src_min: number, src_max: number, dest_min: number, dest_max: number): number {\n\t\tconst src_range = src_max - src_min;\n\t\tconst dest_range = dest_max - dest_min;\n\n\t\tconst r = (val - src_min) / src_range;\n\t\treturn r * dest_range + dest_min;\n\t}\n\n\tstatic degrees_to_radians(degrees: number): number {\n\t\treturn degrees * RAD_DEG_RATIO;\n\t}\n\tstatic radians_to_degrees(radians: number): number {\n\t\treturn radians / RAD_DEG_RATIO;\n\t}\n\tstatic deg2rad(deg: number): number {\n\t\treturn this.degrees_to_radians(deg);\n\t}\n\tstatic rad2deg(rad: number): number {\n\t\treturn this.radians_to_degrees(rad);\n\t}\n\n\tstatic fract = (number: number) => number - Math.floor(number);\n\n\t// from threejs glsl rand\n\tstatic rand(number: number): number {\n\t\tif (lodash_isNumber(number)) {\n\t\t\treturn this.rand_float(number);\n\t\t} else {\n\t\t\treturn this.rand_vec2(number);\n\t\t}\n\t}\n\n\tstatic round(number: number, step_size: number): number {\n\t\tconst steps_count = number / step_size;\n\t\tconst rounded_steps_count = number < 0 ? Math.ceil(steps_count) : Math.floor(steps_count);\n\t\tconsole.log('round', step_size, number, steps_count, rounded_steps_count, rounded_steps_count * step_size);\n\t\treturn rounded_steps_count * step_size;\n\t}\n\n\tstatic highest_even(number: number): number {\n\t\treturn 2 * Math.ceil(number * 0.5);\n\t}\n\n\tstatic rand_float(number: number): number {\n\t\tconst vec = {\n\t\t\tx: number,\n\t\t\ty: 136574,\n\t\t};\n\t\treturn this.rand_vec2(vec);\n\t}\n\n\tstatic rand_vec2(uv: Vector2Like) {\n\t\tconst a = 12.9898;\n\t\tconst b = 78.233;\n\t\tconst c = 43758.5453;\n\t\tconst dt = uv.x * a + uv.y * b; //dot( uv.xy, vec2( a,b ) )\n\t\tconst sn = dt % Math.PI;\n\t\treturn this.fract(Math.sin(sn) * c);\n\t}\n\n\t// https://www.movable-type.co.uk/scripts/latlong.html\n\tstatic geodesic_distance(lnglat1: LngLatLike, lnglat2: LngLatLike): number {\n\t\tvar R = 6371e3; // metres\n\t\tvar φ1 = this.deg2rad(lnglat1.lat);\n\t\tvar φ2 = this.deg2rad(lnglat2.lat);\n\t\tvar Δφ = this.deg2rad(lnglat2.lat - lnglat1.lat);\n\t\tvar Δλ = this.deg2rad(lnglat2.lng - lnglat1.lng);\n\n\t\tvar a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tvar d = R * c;\n\t\treturn d;\n\t}\n\n\tstatic expand_triangle(triangle: Triangle, margin: number): Triangle {\n\t\tconst mid_point = new THREE.Vector3();\n\t\ttriangle.getMidpoint(mid_point);\n\n\t\tenum TriangleProp {\n\t\t\ta = 'a',\n\t\t\tb = 'b',\n\t\t\tc = 'c',\n\t\t}\n\t\tfor (let prop of ['a', 'b', 'c']) {\n\t\t\tconst delta = triangle[prop as TriangleProp].clone().sub(mid_point);\n\t\t\tconst delta_n = delta.clone().normalize();\n\t\t\tconst length = delta.length() + margin;\n\n\t\t\ttriangle[prop as TriangleProp] = mid_point.clone().add(delta_n.multiplyScalar(length));\n\t\t}\n\t\treturn triangle;\n\t}\n\n\tstatic nearestPower2(num: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));\n\t}\n}\n","import {BaseController} from './_BaseController';\n\nimport {FrontSide} from 'three/src/constants';\nimport {DoubleSide} from 'three/src/constants';\nimport {BackSide} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function SideParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdouble_sided = ParamConfig.BOOLEAN(0);\n\t\tfront = ParamConfig.BOOLEAN(1, {visible_if: {double_sided: false}});\n\t};\n}\n\nclass SidedMaterial extends Material {\n\tside!: number;\n}\nclass SideParamsConfig extends SideParamConfig(NodeParamsConfig) {}\nclass SideMatNode extends TypedMatNode<SidedMaterial, SideParamsConfig> {\n\tcreate_material() {\n\t\treturn new SidedMaterial();\n\t}\n}\n\nexport class SideController extends BaseController {\n\tstatic update(node: SideMatNode) {\n\t\tconst single_side = node.pv.front ? FrontSide : BackSide;\n\t\tconst new_side = node.pv.double_sided ? DoubleSide : single_side;\n\t\tif (new_side != node.material.side) {\n\t\t\tnode.material.side = new_side;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {OutputGlNode} from '../../../Output';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {BaseGLDefinition, UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {MapUtils} from '../../../../../../core/MapUtils';\nimport {ShaderMaterialWithCustomMaterials} from '../../../../../../core/geometry/Material';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {GlNodeFinder} from '../../utils/NodeFinder';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\n// import {BaseNodeType} from '../../_Base';\n// import {GlobalsGeometryHandler} from './Globals/Geometry'\n\nexport enum CustomMaterialName {\n\tDISTANCE = 'customDistanceMaterial',\n\tDEPTH = 'customDepthMaterial',\n\tDEPTH_DOF = 'customDepthDOFMaterial',\n}\n// export type ShaderAssemblerRenderDerivated = {new (node: BaseNodeType): ShaderAssemblerRender};\n// type ShaderAssemblerRenderDerivatedClass = new (...args: any[]) => ShaderAssemblerRender;\nexport type CustomAssemblerMap = Map<CustomMaterialName, typeof ShaderAssemblerMaterial>;\n\nexport class ShaderAssemblerMaterial extends BaseGlShaderAssembler {\n\tprivate _assemblers_by_custom_name: Map<CustomMaterialName, ShaderAssemblerMaterial> = new Map();\n\n\tcreate_material(): ShaderMaterial {\n\t\treturn new ShaderMaterial();\n\t}\n\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap | undefined {\n\t\treturn undefined;\n\t}\n\n\tprotected _add_custom_materials(material: ShaderMaterial) {\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\t(assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tthis._add_custom_material(\n\t\t\t\t\t\tmaterial as ShaderMaterialWithCustomMaterials,\n\t\t\t\t\t\tcustom_name,\n\t\t\t\t\t\tassembler_class\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t}\n\tprivate _add_custom_material(\n\t\tmaterial: ShaderMaterialWithCustomMaterials,\n\t\tcustom_name: CustomMaterialName,\n\t\tassembler_class: typeof ShaderAssemblerMaterial\n\t) {\n\t\tlet custom_assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(custom_name);\n\t\tif (!custom_assembler) {\n\t\t\tcustom_assembler = new assembler_class(this._gl_parent_node);\n\t\t\tthis._assemblers_by_custom_name.set(custom_name, custom_assembler);\n\t\t}\n\t\tmaterial.custom_materials = material.custom_materials || {};\n\t\tmaterial.custom_materials[custom_name] = custom_assembler.create_material();\n\t}\n\n\tasync compile_custom_materials(material: ShaderMaterialWithCustomMaterials): Promise<void> {\n\t\t// const custom_materials_by_name: Map<CustomMaterialName, ShaderMaterial> = new Map();\n\t\t// this._assemblers_by_custom_name.clear();\n\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\tasync (assembler_class: typeof ShaderAssemblerMaterial, custom_name: CustomMaterialName) => {\n\t\t\t\t\tif (this._code_builder) {\n\t\t\t\t\t\tlet assembler: ShaderAssemblerMaterial | undefined = this._assemblers_by_custom_name.get(\n\t\t\t\t\t\t\tcustom_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!assembler) {\n\t\t\t\t\t\t\tassembler = new assembler_class(this._gl_parent_node);\n\t\t\t\t\t\t\tthis._assemblers_by_custom_name.set(custom_name, assembler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tassembler.set_root_nodes(this._root_nodes);\n\t\t\t\t\t\tassembler.set_param_configs_owner(this._code_builder);\n\t\t\t\t\t\tassembler.set_shader_configs(this.shader_configs);\n\t\t\t\t\t\tassembler.set_variable_configs(this.variable_configs());\n\n\t\t\t\t\t\tconst custom_material = material.custom_materials[custom_name];\n\t\t\t\t\t\tif (custom_material) {\n\t\t\t\t\t\t\tawait assembler.compile_material(custom_material);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if (material) {\n\t\t\t\t\t\t// \t// add needsUpdate = true, as we always get the same material\n\t\t\t\t\t\t// \t// material.needsUpdate = true;\n\t\t\t\t\t\t// \tcustom_materials_by_name.set(custom_name, material);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// for (let custom_name of Object.keys(class_by_custom_name)) {\n\t\t// \tconst assembler_class = class_by_custom_name[custom_name];\n\t\t// \t// const assembler = new assembler_class(this._gl_parent_node)\n\n\t\t// }\n\n\t\t// return custom_materials_by_name;\n\t}\n\tasync compile_material(material: ShaderMaterial) {\n\t\t// no need to compile if the globals handler has not been declared\n\t\tif (!this.compile_allowed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this._gl_parent_node);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis._gl_parent_node.states.error.set('only one output node allowed');\n\t\t}\n\t\tthis.set_root_nodes(output_nodes);\n\t\tawait this._update_shaders();\n\n\t\tconst new_vertex_shader = this._shaders_by_name.get(ShaderName.VERTEX);\n\t\tconst new_fragment_shader = this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t\tif (new_vertex_shader && new_fragment_shader) {\n\t\t\tmaterial.vertexShader = new_vertex_shader;\n\t\t\tmaterial.fragmentShader = new_fragment_shader;\n\t\t\t// if (this._template_shader && this._template_shader.uniforms) {\n\t\t\tthis.add_uniforms(material.uniforms);\n\t\t\t// }\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t\t\t// as we need several materials:\n\t\t\t// - the visible one\n\t\t\t// - the multiple shadow ones\n\t\t\t// - and possibly a depth one\n\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(\n\t\t\t\tmaterial.uuid,\n\t\t\t\tmaterial.uniforms as IUniformsWithTime\n\t\t\t);\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(material.uuid);\n\t\t}\n\n\t\t// const material = await this._assembler.get_material();\n\t\t// if (material) {\n\t\t// this._shaders_by_name.set(ShaderName.VERTEX, this._template_shader!.vertexShader!);\n\t\t// this._shaders_by_name.set(ShaderName.FRAGMENT, this._template_shader!.fragmentShader!);\n\n\t\t// assign custom materials\n\t\tif ((material as ShaderMaterialWithCustomMaterials).custom_materials) {\n\t\t\tawait this.compile_custom_materials(material as ShaderMaterialWithCustomMaterials);\n\t\t}\n\t\t// const custom_materials = await this.get_custom_materials();\n\t\t// const material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t\t// material_with_custom_materials.custom_materials = {};\n\t\t// custom_materials.forEach((custom_material, shader_name) => {\n\t\t// \tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t\t// });\n\n\t\t// material.needsUpdate = true;\n\t\t// }\n\n\t\t// this.create_spare_parameters();\n\t}\n\tprivate async _update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\tshadow_assembler_class_by_custom_name() {\n\t\treturn {};\n\t}\n\n\tadd_output_body_line(\n\t\toutput_node: OutputGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController,\n\t\tinput_name: string\n\t) {\n\t\tconst input = output_node.io.inputs.named_input(input_name);\n\t\tconst var_input = output_node.variable_for_input(input_name);\n\t\tconst variable_config = this.variable_config(input_name);\n\n\t\tlet new_var: string | null = null;\n\t\tif (input) {\n\t\t\tnew_var = ThreeToGl.vector3(var_input);\n\t\t} else {\n\t\t\tif (variable_config.default_from_attribute()) {\n\t\t\t\tconst connection_point = output_node.io.inputs.named_input_connection_points_by_name(input_name);\n\t\t\t\tif (connection_point) {\n\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\tconst attr_read = this.globals_handler?.read_attribute(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tgl_type,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t\tif (attr_read) {\n\t\t\t\t\t\tnew_var = attr_read;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst variable_config_default = variable_config.default();\n\t\t\t\tif (variable_config_default) {\n\t\t\t\t\tnew_var = variable_config_default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// const default_value = variable_config.default()\n\t\t\t// new_var = default_value\n\t\t\t// const definition_configs = variable_config.required_definitions() || []\n\t\t\t// for(let definition_config of definition_configs){\n\t\t\t// \tconst definition = definition_config.create_definition(output_node)\n\t\t\t// \toutput_node.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\t\tif (new_var) {\n\t\t\tconst prefix = variable_config.prefix();\n\t\t\tconst suffix = variable_config.suffix();\n\t\t\tconst if_condition = variable_config.if_condition();\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#if ${if_condition}`]);\n\t\t\t}\n\t\t\tshaders_collection_controller.add_body_lines(output_node, [`${prefix}${new_var}${suffix}`]);\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#endif`]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.shader_config(shader_name)?.input_names();\n\t\tif (input_names) {\n\t\t\t// shaders_collection_controller.set_body_lines([], shader_name);\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tthis.add_output_body_line(output_node, shaders_collection_controller, input_name);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\t// const named_output = attribute_node.connected_output()\n\t\t// const named_connection = attribute_node.connected_input()\n\t\tconst gl_type = attribute_node.gl_type();\n\t\tconst new_var = this.globals_handler?.read_attribute(\n\t\t\tattribute_node,\n\t\t\tgl_type,\n\t\t\tattribute_node.attribute_name,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\tshaders_collection_controller.add_body_lines(attribute_node, [`${gl_type} ${var_name} = ${new_var}`]);\n\t\t// this.add_output_body_line(\n\t\t// \tattribute_node,\n\t\t// \tshader_name,\n\t\t// \tinput_name\n\t\t// \t)\n\n\t\t// const vertex_definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_definitions = []\n\n\t\t// const named_output = attribute_node.named_outputs()[0]\n\t\t// const gl_type = named_output.type()\n\t\t// const var_name = attribute_node.gl_var_name(named_output.name())\n\n\t\t// const attribute_name = attribute_node.attribute_name()\n\t\t// // TODO: I should probably raise an error in the node\n\t\t// // maybe when doint the initial eval of all nodes and check for errors?\n\t\t// if(!attribute_name){\n\t\t// \tconsole.error(attribute_node.full_path())\n\t\t// \tthrow new Error(\"empty attr name\")\n\t\t// }\n\t\t// if(GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attribute_name) < 0){\n\t\t// \tvertex_definitions.push(new Definition.Attribute(attribute_node, gl_type, attribute_name))\n\t\t// }\n\t\t// vertex_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\t\t// vertex_body_lines.push( `${var_name} = ${attribute_name}` )\n\t\t// fragment_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\n\t\t// attribute_node.set_definitions(vertex_definitions, 'vertex')\n\t\t// attribute_node.set_definitions(fragment_definitions, 'fragment')\n\t\t// attribute_node.add_body_lines(vertex_body_lines, 'vertex')\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec4 ${var_name} = gl_FragCoord`);\n\t\t}\n\t}\n\thandle_resolution(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec2 ${var_name} = resolution`);\n\t\t}\n\t}\n\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = [];\n\t\t// const fragment_definitions = [];\n\t\t// const definitions = [];\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = [];\n\t\tconst body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_nameshader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tdefinitions_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t// body_lines_by_shader_name[shader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tbody_lines_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tlet definition;\n\t\tlet body_line;\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tbody_line = `float ${var_name} = ${output_name}`;\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\tbody_lines.push(body_line);\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tthis.handle_resolution(body_lines, shader_name, var_name);\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.VEC2, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set_resolution_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_PointCoord':\n\t\t\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\t\t\tbody_lines.push(`vec2 ${var_name} = gl_PointCoord`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t\t// const new_var = this.globals_handler().read_attribute(\n\t\t\t\t\t// \tglobals_node,\n\t\t\t\t\t// \tgl_type,\n\t\t\t\t\t// \toutput_name\n\t\t\t\t\t// )\n\t\t\t\t\t// const body_line = `${var_name} = ${new_var}`\n\t\t\t\t\t// globals_node.add_body_lines([body_line])\n\t\t\t\t\tthis.globals_handler?.handle_globals_node(\n\t\t\t\t\t\tglobals_node,\n\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t\t\t// body_lines,\n\t\t\t\t\t\t// dependencies,\n\t\t\t\t\t\t// shader_name\n\t\t\t\t\t);\n\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t// definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t\t\t// definitions_by_shader_name[shader_name].push(definition)\n\t\t\t\t// throw \"debug\"\n\n\t\t\t\t// body_line = `${var_name} = vec3(${output_name})`\n\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t// }\n\t\t\t\t// if(dependencies.length == 0){\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\t});\n\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines, shader_name);\n\t\t});\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t}\n}\n","import {BaseContainer, TypedContainer} from '../../containers/_Base';\nimport {BaseNodeType} from '../_Base';\n\ntype Callback<T extends TypedContainer<any>> = (container: T | undefined) => void;\n\nexport class TypedContainerController<T extends TypedContainer<any>> {\n\tprivate _callbacks: Callback<T>[] = [];\n\tprotected _container: T;\n\n\tconstructor(protected node: BaseNodeType, container_class: typeof BaseContainer) {\n\t\tthis._container = new container_class(this.node) as T;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\trequest_container(): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._callbacks.push(resolve);\n\t\t\tthis.node.scene.cook_controller.add_node(this.node);\n\n\t\t\t// const cooker = this.node.scene.cooker;\n\t\t\t// if (cooker.blocked()) {\n\t\t\t// \tcooker.enqueue(this.node);\n\t\t\t// } else {\n\t\t\tsetTimeout(this.process_container_request.bind(this), 0);\n\t\t\t// }\n\t\t});\n\t}\n\n\tprocess_container_request() {\n\t\tif (this.node.flags?.bypass?.active) {\n\t\t\tconst input_index = 0;\n\t\t\tthis.request_input_container(input_index).then((container) => {\n\t\t\t\tthis.node.remove_dirty_state();\n\t\t\t\tif (container) {\n\t\t\t\t\tthis.notify_requesters(container);\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('input invalid');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.node.is_dirty) {\n\t\t\t\tthis.node.container_controller.container.reset_caches();\n\t\t\t\tthis.node.cook_controller.cook_main();\n\t\t\t} else {\n\t\t\t\tthis.notify_requesters();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync request_input_container(input_index: number) {\n\t\tconst input_node = this.node.io.inputs.input(input_index);\n\t\tif (input_node) {\n\t\t\tinput_node.processing_context.copy(this.node.processing_context);\n\t\t\tconst container = await input_node.container_controller.request_container();\n\t\t\treturn container;\n\t\t} else {\n\t\t\tthis.node.states.error.set(`input ${input_index} required`);\n\t\t\tthis.notify_requesters();\n\t\t\treturn null;\n\t\t}\n\t}\n\tnotify_requesters(container?: T) {\n\t\t// make a copy of the callbacks first,\n\t\t// to ensure that new ones are not added to this list\n\t\t// in side effects from those callbacks\n\t\t// (the test suite for the File SOP is a good test for this)\n\t\tlet callback;\n\t\tconst callbacks = [];\n\t\twhile ((callback = this._callbacks.pop())) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\n\t\tif (!container) {\n\t\t\tcontainer = this.node.container_controller.container.clone();\n\t\t}\n\t\t// removing the clone, as this seems to defeat the no cloning of inputs\n\t\t// container = container || this._container\n\t\twhile ((callback = callbacks.pop())) {\n\t\t\tcallback(container);\n\t\t}\n\t\tthis.node.scene.cook_controller.remove_node(this.node);\n\t}\n}\n\nexport class BaseContainerController extends TypedContainerController<any> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nconst THREE = {Vector2, Vector3};\n\nconst ATTRIB_NAME_MAP: Dictionary<string> = {\n\tP: 'position',\n\tN: 'normal',\n\tCd: 'color',\n};\n\nexport class CoreAttribute {\n\t// constructor: (@_size, @_value)->\n\t// \t#\n\n\t// size: ->\n\t// \t@_size\n\n\t// value: ->\n\t// \t@_value\n\n\t// set_value: (value)->\n\t// \t@_value = value\n\n\tstatic remap_name(name: string): string {\n\t\treturn ATTRIB_NAME_MAP[name] || name;\n\t}\n\n\tstatic array_to_indexed_arrays(array: string[]) {\n\t\tconst index_by_value: Dictionary<number> = {};\n\t\tlet current_index = 0;\n\t\tconst indices = [];\n\t\tconst values = [];\n\n\t\tlet i = 0;\n\t\twhile (i < array.length) {\n\t\t\t//(value = array[i++])?\n\t\t\tconst value = array[i];\n\t\t\tconst index = index_by_value[value];\n\t\t\tif (index != null) {\n\t\t\t\tindices.push(index);\n\t\t\t} else {\n\t\t\t\tvalues.push(value);\n\t\t\t\tindices.push(current_index);\n\t\t\t\tindex_by_value[value] = current_index;\n\t\t\t\tcurrent_index += 1;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn {\n\t\t\tindices,\n\t\t\tvalues,\n\t\t};\n\t}\n\n\tstatic default_value(size: number) {\n\t\tswitch (size) {\n\t\t\tcase 1:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn new THREE.Vector2(0, 0);\n\t\t\tcase 3:\n\t\t\t\treturn new THREE.Vector3(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow `size ${size} not yet implemented`;\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../nodes/_Base';\n\n// interface ContentOption {\n// \tclone?: boolean\n// }\n\nimport {ContainableMap} from './utils/ContainableMap';\ntype K = keyof ContainableMap;\ntype Containable = ContainableMap[K];\n\nexport abstract class TypedContainer<T extends Containable> {\n\t// protected _node: BaseNode;\n\t// protected _eval_key: number\n\tprotected _content!: T;\n\n\tconstructor(protected _node: BaseNodeType) {\n\t\t// this.update_eval_key();\n\t\t// this.set_content(this._default_content());\n\t}\n\n\tset_node(node: BaseNodeType) {\n\t\tthis._node = node;\n\t}\n\tnode(): BaseNodeType {\n\t\treturn this._node;\n\t}\n\n\tclone() {\n\t\tlet content;\n\t\tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n\t\tcloned_container.set_node(this.node());\n\t\tif ((content = this.content()) != null) {\n\t\t\tcloned_container.set_content(content); //, this.eval_key() );\n\t\t}\n\t\treturn cloned_container;\n\t}\n\treset_caches() {}\n\t// abstract _default_content(): T;\n\n\tset_content(content: T) {\n\t\t//, eval_key?: number){\n\t\tthis.reset_caches();\n\t\tthis._content = content; //|| this._default_content();\n\t\t// this.update_eval_key(eval_key);\n\t\tthis._post_set_content();\n\t}\n\thas_content(): boolean {\n\t\treturn this._content != null;\n\t}\n\t// content(options: ContentOption = {}) {\n\t// \tconst clone = options['clone'] || false\n\t// \tif (clone) {\n\t// \t\treturn this.clone_content()\n\t// \t} else {\n\t// \t\treturn this._content\n\t// \t}\n\t// }\n\tcontent() {\n\t\treturn this._content;\n\t}\n\tprotected _post_set_content() {}\n\tpublic core_content(): T | undefined {\n\t\treturn this._content;\n\t}\n\tpublic core_content_cloned(): T | undefined {\n\t\treturn this._content;\n\t}\n\t// abstract clone_content(): T\n\n\t// update_eval_key(eval_key?: number){\n\t// \tthis._eval_key = eval_key || performance.now();\n\t// }\n\t// eval_key(): number {\n\t// \treturn this._eval_key;\n\t// }\n\n\tinfos(): any {\n\t\treturn [];\n\t}\n}\n\nexport class BaseContainer extends TypedContainer<any> {}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {TypedMatNode} from '../_Base';\nexport function SkinningParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tskinning = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass SkinnedMaterial extends Material {\n\tskinning!: boolean;\n}\nclass SkinningParamsConfig extends SkinningParamConfig(NodeParamsConfig) {}\nclass SkinningMatNode extends TypedMatNode<SkinnedMaterial, SkinningParamsConfig> {\n\tcreate_material() {\n\t\treturn new SkinnedMaterial();\n\t}\n}\n\nexport class SkinningController extends BaseController {\n\tstatic update(node: SkinningMatNode) {\n\t\tconst new_skinning = node.pv.skinning;\n\t\tif (new_skinning != node.material.skinning) {\n\t\t\tnode.material.skinning = new_skinning;\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMapController));\n\t\tmap = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureMapController, 'use_map')\n\t\t);\n\t};\n}\nclass TextureMapMaterial extends Material {\n\tmap!: Texture | null;\n}\ntype CurrentMaterial = TextureMapMaterial | ShaderMaterial;\nclass TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\nabstract class TextureMapMatNode extends TypedMatNode<CurrentMaterial, TextureMapParamsConfig> {\n\ttexture_map_controller!: TextureMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(node: TextureMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_map, this.node.p.map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'map', this.node.p.use_map, this.node.p.map);\n\t}\n\tstatic async update(node: TextureMapMatNode) {\n\t\tnode.texture_map_controller.update();\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n// import {NodeContext} from '../../../poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nexport function TextureAlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_alpha_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureAlphaMapController));\n\t\talpha_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureAlphaMapController, 'use_alpha_map')\n\t\t);\n\t};\n}\nclass TextureAlphaMaterial extends Material {\n\talphaMap!: Texture | null;\n}\ntype CurrentMaterial = TextureAlphaMaterial | ShaderMaterial;\nclass TextureAlphaMapParamsConfig extends TextureAlphaMapParamConfig(NodeParamsConfig) {}\nabstract class TextureAlphaMapMatNode extends TypedMatNode<CurrentMaterial, TextureAlphaMapParamsConfig> {\n\ttexture_alpha_map_controller!: TextureAlphaMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(node: TextureAlphaMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'alphaMap', this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tstatic async update(node: TextureAlphaMapMatNode) {\n\t\tnode.texture_alpha_map_controller.update();\n\t}\n}\n","export class MapUtils {\n\tstatic push_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.push(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic unshift_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.unshift(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic concat_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_elements: V[]) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tlet array: V[] = map.get(key)!;\n\t\t\tfor (let element of new_elements) {\n\t\t\t\tarray.push(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmap.set(key, new_elements);\n\t\t}\n\t}\n}\n","export const CATEGORY_OBJ = {\n\tLIGHT: 'lights',\n\tMANAGER: 'managers',\n\tGEOMETRY: 'geometries',\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_COP = {\n\tINPUT: 'inputs',\n\tADVANCED: 'advanced',\n\tMISC: 'misc',\n};\nexport const CATEGORY_EVENT = {\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_GL = {\n\tCOLOR: 'color',\n\tCONVERSION: 'conversion',\n\tDYNAMICS: 'dynamics',\n\tGEOMETRY: 'geometry',\n\tGLOBALS: 'globals',\n\tLOGIC: 'logic',\n\tMATH: 'math',\n\tQUAT: 'quat',\n\tTRIGO: 'trigo',\n\tUTIL: 'util',\n\tINSTANCE: 'instance',\n};\nexport const CATEGORY_MAT = {\n\tADVANCED: 'advanced',\n\tMESH: 'meshes',\n\tPOINTS: 'points',\n\tLINE: 'lines',\n\tVOLUME: 'volumes',\n\tINSTANCE: 'instances',\n};\nexport const CATEGORY_SOP = {\n\tADVANCED: 'advanced',\n\tANIMATION: 'animation',\n\tATTRIBUTE: 'attributes',\n\tDYNAMICS: 'dynamics',\n\tINPUT: 'inputs',\n\tMISC: 'misc',\n\tMODIFIER: 'modifiers',\n\tPRIMITIVES: 'primitives',\n\tRENDER: 'render',\n};\nexport const CATEGORY_POST = {\n\tPASS: 'passes',\n};\n","import {TypedNode} from '../_Base';\nimport {TextureContainer} from '../../containers/Texture';\nimport {Texture} from 'three/src/textures/Texture';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {PolyScene} from '../../scene/PolyScene';\nimport {FlagsControllerB} from '../utils/FlagsController';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {LuminanceFormat, HalfFloatType} from 'three/src/constants';\n\nconst INPUT_COP_NAME = 'input texture';\nconst DEFAULT_INPUT_NAMES = [INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME];\n\nvar size = 32;\nvar data = new Uint16Array(size);\nfor (var i = 0; i < size; i++) {\n\tdata[i] = 0x70e2; // Half float 10000\n}\nconst EMPTY_DATA_TEXTURE = new DataTexture(data, size, 1, LuminanceFormat, HalfFloatType);\n\nexport class TypedCopNode<K extends NodeParamsConfig> extends TypedNode<'TEXTURE', BaseCopNodeType, K> {\n\tcontainer_controller: TypedContainerController<TextureContainer> = new TypedContainerController<TextureContainer>(\n\t\tthis,\n\t\tTextureContainer\n\t);\n\tpublic readonly flags: FlagsControllerB = new FlagsControllerB(this);\n\t// private _typed_array = new Uint8ClampedArray(512 * 512 * 4);\n\t// protected _texture: Texture = new DataTexture(this._typed_array, 512, 512, RGBFormat);\n\t// get texture() {\n\t// \treturn this._data_texture;\n\t// }\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.COP;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseCopNode');\n\t}\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\t// if (this.flags.display) {\n\t\t// \tthis.flags.display.set(false);\n\t\t// }\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\tset_texture(texture: Texture) {\n\t\t// this._copy_texture(texture);\n\t\ttexture.name = this.full_path();\n\t\tthis.set_container(texture);\n\t}\n\tclear_texture() {\n\t\tthis.set_container(EMPTY_DATA_TEXTURE);\n\t}\n\n\t// private _copy_texture(texture: Texture) {\n\t// \tconsole.log('_copy_texture', texture);\n\t// \tif (texture instanceof DataTexture) {\n\t// \t\tthis._data_texture.image = texture.image;\n\t// \t} else {\n\t// \t\tconst canvas = document.createElement('canvas');\n\t// \t\t// document.body.appendChild(canvas);\n\t// \t\tconst width = texture.image.width;\n\t// \t\tconst height = texture.image.height;\n\t// \t\tcanvas.width = width;\n\t// \t\tcanvas.height = height;\n\t// \t\tconst context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\t// \t\tcontext.drawImage(texture.image, 0, 0);\n\t// \t\tconst image_data = context.getImageData(0, 0, width, height);\n\t// \t\tconsole.log(this._typed_array.length, image_data.data.length, image_data);\n\t// \t\tthis._data_texture.image = image_data;\n\t// \t}\n\t// \tthis._data_texture.format = texture.format;\n\t// \t// this._data_texture.mapping = texture.mapping;\n\t// \t// this._data_texture.wrapS = texture.wrapS;\n\t// \t// this._data_texture.wrapT = texture.wrapT;\n\t// \t// this._data_texture.minFilter = texture.minFilter;\n\t// \t// this._data_texture.magFilter = texture.magFilter;\n\t// \tthis._data_texture.needsUpdate = true;\n\t// \tconsole.log('updated data tex', this._data_texture);\n\n\t// \t// if (!this._texture || this._texture.uuid != texture.uuid) {\n\t// \t// \tif (!this._texture) {\n\t// \t// \t\tconsole.log('assign');\n\t// \t// \t\tthis._texture = texture.clone();\n\t// \t// \t\t// this._texture.name = this.full_path();\n\t// \t// \t} else {\n\t// \t// \t\tconsole.log('copy');\n\t// \t// \t\tconst keys = Object.keys(texture) as Array<keyof Texture>;\n\t// \t// \t\tconst protected_keys = ['uuid', 'name', 'node'];\n\t// \t// \t\tfor (let key of keys) {\n\t// \t// \t\t\tif (!protected_keys.includes(key)) {\n\t// \t// \t\t\t\tthis._texture[key] = texture[key] as never; // but why is 'never' needed?!\n\t// \t// \t\t\t}\n\t// \t// \t\t}\n\t// \t// \t}\n\t// \t// }\n\t// }\n}\n\nexport type BaseCopNodeType = TypedCopNode<any>;\nexport class BaseCopNodeClass extends TypedCopNode<any> {}\n","import lodash_merge from 'lodash/merge';\nimport lodash_intersection from 'lodash/intersection';\nimport lodash_difference from 'lodash/difference';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseNodeType, TypedNode} from '../../_Base';\n\nimport {BaseGlShaderAssembler} from './assemblers/_Base';\nimport {GlobalsBaseController} from './globals/_Base';\nimport {GlobalsGeometryHandler} from './globals/Geometry';\n\nimport {JsonExportDispatcher} from '../../../io/json/export/Dispatcher';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {OutputGlNode} from '../Output';\nimport {GlobalsGlNode} from '../Globals';\n// import {BaseParamType} from '../../../params/_Base';\nimport {ParamJsonExporterData} from '../../../io/json/export/Param';\nimport {GlNodeChildrenMap} from '../../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n\n// interface BaseShaderAssemblerConstructor {\n// \tnew (): BaseGlShaderAssembler;\n// }\n// interface GlobalsBaseControllerConstructor {\n// \tnew (): GlobalsBaseController;\n// }\n\n// export function AssemblerOwner<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\tchildren_context() {\n// \t\t\treturn NodeContext.GL;\n// \t\t}\n\nexport class AssemblerControllerNode extends TypedNode<any, BaseNodeType, any> {\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tassembler_controller!: GlAssemblerController<BaseGlShaderAssembler>;\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n}\n\ntype BaseGlShaderAssemblerConstructor<A extends BaseGlShaderAssembler> = new (...args: any[]) => A;\nexport class GlAssemblerController<A extends BaseGlShaderAssembler> {\n\tprotected _assembler!: A;\n\tprivate _globals_handler: GlobalsBaseController | undefined = new GlobalsGeometryHandler();\n\tprivate _compile_required: boolean = true;\n\t// private _requester: BaseNodeSop;\n\t// private _recompiled: boolean = false;\n\t// private _shaders_by_name: Map<ShaderName, string> = new Map();\n\n\tprivate _deleted_params_data: Map<string, ParamJsonExporterData<ParamType>> = new Map();\n\t// private _new_params: BaseParamType[] = [];\n\n\tconstructor(private node: AssemblerControllerNode, assembler_class: BaseGlShaderAssemblerConstructor<A>) {\n\t\t// if (assembler_class) {\n\t\tthis._assembler = new assembler_class(this.node);\n\t\t// }\n\t\t// this._shadow_depth_assembler = new ShaderAssemblerDepth()\n\t\t// this._shadow_distance_assembler = new ShaderAssemblerDistance()\n\n\t\t// this.self._init_hierarchy_children_owner();\n\n\t\t// let has_display_flag = false;\n\t\t// if (options['has_display_flag']) {\n\t\t// \thas_display_flag = options['has_display_flag'];\n\t\t// }\n\n\t\t// this.self._init_display_flag({\n\t\t// \thas_display_flag: has_display_flag,\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\n\t\t// this ensures that material re evaluate their uniforms\n\t\t// without having the SOP/Material recook\n\t\t// which can be a killer in an animation\n\t\t// But this should be tweaked so that it can recook all params of a node\n\t\t// this.self.add_post_dirty_hook(this.eval_params_and_assign_uniform_values.bind(this))\n\t\t// - UPDATE: this seems to work at the moment. The only issue is that\n\t\t// the particle system now updates 2x when recreating the shaders\n\t\t// but that's fixed with update_on_dirty\n\t\t// - UPDATE 2: now that the params have been refactored, let's try without this\n\t\t// if (options['update_on_dirty'] != false) {\n\t\t// \tthis.self.add_post_dirty_hook(this.cook_main_if_scene_loaded.bind(this));\n\t\t// }\n\t}\n\tset_assembler_globals_handler(globals_handler: GlobalsBaseController) {\n\t\tconst current_id = this._globals_handler ? this._globals_handler.id() : null;\n\t\tconst new_id = globals_handler ? globals_handler.id() : null;\n\n\t\tif (current_id != new_id) {\n\t\t\tthis._globals_handler = globals_handler;\n\t\t\tthis.set_compilation_required_and_dirty();\n\t\t\tthis._assembler.reset_configs();\n\t\t}\n\t}\n\tget assembler() {\n\t\treturn this._assembler;\n\t}\n\t// get shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\tget globals_handler() {\n\t\treturn this._globals_handler;\n\t}\n\n\t// gltf_supported_material() {\n\t// \treturn this._assembler.constructor.convert_material_to_gltf_supported(this._material);\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tthis._assembler.add_output_params(output_child);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tthis._assembler.add_globals_params(globals_node);\n\t}\n\tallow_attribute_exports() {\n\t\treturn this._assembler.allow_attribute_exports();\n\t}\n\n\ton_create() {\n\t\tconst globals = this.node.create_node('globals');\n\t\tconst output = this.node.create_node('output');\n\n\t\tglobals.ui_data.set_position(new Vector2(-200, 0));\n\t\toutput.ui_data.set_position(new Vector2(200, 0));\n\t}\n\n\t// async compile_if_required() {\n\t// \t// this._recompiled = false;\n\t// \tif (this.compile_required()) {\n\t// \t\t// && !this._param_locked){\n\t// \t\tconst new_material = await this.run_assembler();\n\t// \t\tif (new_material) {\n\t// \t\t\tawait this.node.params.eval_params(this._new_params);\n\t// \t\t\tthis._material = new_material;\n\t// \t\t\t// this._recompiled = true;\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`${this.node.full_path()} failed to generate a material`);\n\t// \t\t}\n\t// \t}\n\t// \tawait this.assign_uniform_values();\n\t// }\n\tset_compilation_required(new_state = true) {\n\t\tthis._compile_required = new_state;\n\t}\n\tset_compilation_required_and_dirty(trigger_node?: BaseGlNodeType) {\n\t\tthis.set_compilation_required();\n\t\tthis.node.set_dirty(trigger_node);\n\t}\n\tcompile_required(): boolean {\n\t\treturn this._compile_required;\n\t}\n\n\t// set_root_nodes(nodes: BaseGlNodeType[]) {\n\t// \tthis.assembler.set_root_nodes(nodes);\n\t// }\n\t// set_node_lines_globals(globals_node: GlobalsGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_globals(globals_node, shader_name);\n\t// }\n\t// set_node_lines_output(output_node: OutputGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_output(output_node, shader_name);\n\t// }\n\t// set_node_lines_attribute(attribute_node: AttributeGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_attribute(attribute_node, shader_name);\n\t// }\n\n\tasync post_compile() {\n\t\t// if (!this.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\t// this.assembler.compile_for_node(this._gl);\n\t\tthis.create_spare_parameters();\n\t\tthis.set_compilation_required(false);\n\t}\n\n\t// private async run_assembler() {\n\t// \tconst output_node = this.find_output_node();\n\t// \tif (output_node) {\n\t// \t\tthis._assembler.set_root_nodes([output_node]);\n\t// \t}\n\t// \tthis.assembler.compile();\n\t// \tconst material = await this._assembler.get_material();\n\t// \tif (material) {\n\t// \t\tthis._shaders_by_name.set(ShaderName.VERTEX, material.vertexShader);\n\t// \t\tthis._shaders_by_name.set(ShaderName.FRAGMENT, material.fragmentShader);\n\n\t// \t\t// assign custom materials\n\t// \t\tconst custom_materials = await this._assembler.get_custom_materials();\n\t// \t\tconst material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t// \t\tmaterial_with_custom_materials.custom_materials = {};\n\t// \t\tcustom_materials.forEach((custom_material, shader_name) => {\n\t// \t\t\tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t// \t\t});\n\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tthis._compile_required = false;\n\t// \treturn material;\n\t// }\n\n\t// find_output_node() {\n\t// \tconst nodes = this.node.nodes_by_type('output');\n\t// \tif (nodes.length > 1) {\n\t// \t\tthis.node.states.error.set('only one output node allowed');\n\t// \t}\n\t// \treturn nodes[0];\n\t// }\n\t// find_attribute_export_nodes() {\n\t// \tconst nodes = this.node.nodes_by_type('attribute');\n\t// \treturn nodes.filter((node) => {\n\t// \t\t// do not use attributes that are used as an input, as export\n\t// \t\t// return (node.used_output_names().length == 0) &&\n\t// \t\treturn node.is_exporting;\n\t// \t});\n\t// }\n\t// add_output_body_line(output_node, shader_name: ShaderName, input_name: string){\n\t// \tconst input = output_node.named_input(input_name)\n\t// \tconst var_input = output_node.variable_for_input(input_name)\n\t// \tconst variable_config = this.variable_config(input_name)\n\t// \tconst default_value = variable_config.default()\n\t// \tconst prefix = variable_config.prefix()\n\t// \tconst suffix = variable_config.suffix()\n\t// \tconst new_var = input ? ThreeToGl.vector3(var_input) : default_value\n\t// \tif(new_var){\n\t// \t\toutput_node.add_body_lines([`${prefix}${new_var}${suffix}`], shader_name)\n\t// \t}\n\t// }\n\t// set_output_node_lines(output_node){\n\t// \tfor(let shader_name of this.shader_names()){\n\t// \t\tconst body_lines = []\n\t// \t\tconst input_names = this.shader_config(shader_name).input_names()\n\t// \t\toutput_node.set_body_lines([], shader_name)\n\t// \t\tif(input_names){\n\t// \t\t\tfor(let input_name of input_names){\n\t// \t\t\t\tthis.add_output_body_line(output_node, shader_name, input_name)\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t// const vertex_body_lines = []\n\t// \t// const fragment_body_lines = []\n\n\t// \t// const named_input_position = this.named_input('position')\n\t// \t// const named_input_point_size = this.named_input('gl_PointSize')\n\t// \t// const named_input_normal = this.named_input('normal')\n\n\t// \t// const var_position = this.variable_for_input('position')\n\t// \t// const var_normal = this.variable_for_input('normal')\n\t// \t// const color = this.variable_for_input('color')\n\t// \t// const alpha = this.variable_for_input('alpha')\n\t// \t// const var_point_size = this.variable_for_input('gl_PointSize')\n\n\t// \t// fragment_body_lines.push( `${this._color_declaration} = ${ThreeToGl.vector3_float(color, alpha)}` )\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \t// const new_position_var = named_input_position ? ThreeToGl.vector3(var_position) : 'vec3( position )'\n\t// \t// vertex_body_lines.push( `vec3 transformed = ${new_position_var}` )\n\n\t// \t// if(this.parent().is_point_material()){\n\t// \t// \tconst new_point_size_var = named_input_point_size ? ThreeToGl.float(var_point_size) : '1.0'\n\t// \t// \tvertex_body_lines.push( `float size2 = size * ${new_point_size_var}` )\n\t// \t// }\n\n\t// \t// if(named_input_normal){\n\t// \t// \tconst new_normal_var = ThreeToGl.vector3(var_normal)\n\t// \t// \tvertex_body_lines.push(`objectNormal = ${new_normal_var}`)\n\t// \t// }\n\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\t// }\n\t// private async eval_params_and_assign_uniform_values() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tif (this._assembler) {\n\t// \t\tawait this.self.eval_all_params();\n\t// \t\tawait this.assign_uniform_values();\n\t// \t}\n\t// }\n\t// private async cook_main_if_scene_loaded() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (this.self.params_referree().length > 0) {\n\t// \t\tawait this.self.cook_main();\n\t// \t}\n\t// \t// this.cook_main_without_inputs()\n\t// }\n\tasync assign_uniform_values() {\n\t\tif (this._assembler) {\n\t\t\tfor (let param_config of this._assembler.param_configs()) {\n\t\t\t\tawait param_config.set_uniform_value(this.node);\n\t\t\t}\n\t\t}\n\t}\n\n\t// process_uniforms(renderer, display_scene, camera, geometry, material, group) {\n\t// \tconst scene_frame = this.scene().frame()\n\n\t// \tconst material_frame = material.uniforms.frame\n\t// \tif(material_frame){ // check needed in case this method is given a post process material\n\t// \t\tmaterial.uniforms.frame.value = scene_frame\n\t// \t}\n\n\t// \tconst custom_materials = material.custom_materials\n\t// \tif(custom_materials){\n\t// \t\tfor(let custom_material_name of Object.keys(custom_materials)){\n\t// \t\t\tconst custom_material = custom_materials[custom_material_name]\n\t// \t\t\tcustom_material.uniforms.frame.value = scene_frame\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// create_material(){\n\t// \tconst template_shader = THREE.ShaderLib.basic\n\n\t// \tconst uniforms = THREE.UniformsUtils.clone( template_shader.uniforms )\n\t// \t// uniforms['frame'] = {\n\t// \t// \ttype: '1f',\n\t// \t// \tvalue: 1\n\t// \t// }\n\n\t// \tconst material = new THREE.ShaderMaterial({\n\t// \t\t// vertexColors: THREE.VertexColors,\n\t// \t\t// side: THREE.FrontSide,\n\t// \t\t// transparent: true,\n\t// \t\t// fog: true,\n\t// \t\t// lights: false,\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: template_shader.vertexShader,\n\t// \t\tfragmentShader: template_shader.fragmentShader\n\t// \t})\n\t// \tthrow \"wtf\"\n\t// \treturn material\n\t// }\n\tcreate_spare_parameters() {\n\t\tconst current_spare_param_names: string[] = this.node.params.spare_names;\n\t\tconst param_configs = this._assembler.param_configs();\n\t\tconst assembler_param_names = param_configs.map((c) => c.name);\n\t\t// TODO: also remove the params that change type\n\t\tconst spare_param_names_to_add = lodash_difference(assembler_param_names, current_spare_param_names);\n\t\tconst spare_param_names_to_remove = lodash_difference(current_spare_param_names, assembler_param_names);\n\t\t// this._new_params = [];\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\t// check that param_names_to_add does not include any currently existing param names (that are not spare)\n\t\tconst current_param_names = this.node.params.names;\n\t\tconst spare_params_with_same_name_as_params = lodash_intersection(\n\t\t\tspare_param_names_to_add,\n\t\t\tcurrent_param_names\n\t\t);\n\t\tif (spare_params_with_same_name_as_params.length > 0) {\n\t\t\tconst error_message = `${this.node.full_path()} attempts to create spare params called '${spare_params_with_same_name_as_params.join(\n\t\t\t\t', '\n\t\t\t)}' with same name as params`;\n\t\t\tconsole.warn(error_message);\n\t\t\tthis.node.states.error.set(error_message);\n\t\t}\n\n\t\tspare_param_names_to_remove.forEach((param_name) => {\n\t\t\t// store the param data, in case it gets recreated later\n\t\t\t// this allows expressions to be kept in memory\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param);\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tthis._deleted_params_data.set(param.name, params_data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t});\n\n\t\t// this.within_param_folder('spare_params', () => {\n\t\tfor (let param_config of param_configs) {\n\t\t\tif (spare_param_names_to_add.indexOf(param_config.name) >= 0) {\n\t\t\t\t// TODO: shouldn't it be cook: false ??\n\t\t\t\t// as there is no need to cook the node if I'm only changing the uniform\n\t\t\t\t// unless maybe for textures?\n\t\t\t\t// but if cook is false, there is no reason for it to be updated\n\t\t\t\tconst options = lodash_merge(param_config.param_options, {spare: true, cook: true});\n\n\t\t\t\t// const param = this.node.add_param(\n\t\t\t\t// \tparam_config.type,\n\t\t\t\t// \tparam_config.name,\n\t\t\t\t// \tparam_config.default_value,\n\t\t\t\t// \toptions\n\t\t\t\t// );\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_config.name,\n\t\t\t\t\ttype: param_config.type,\n\t\t\t\t\tinit_value: param_config.default_value as any,\n\t\t\t\t\toptions: options,\n\t\t\t\t});\n\n\t\t\t\t// if (param) {\n\t\t\t\t// \t// restore saved state, like expressions\n\t\t\t\t// \tconst param_data = this._deleted_params_data.get(param.name);\n\t\t\t\t// \tif (param_data) {\n\t\t\t\t// \t\t// TODO: typescript\n\t\t\t\t// \t\t// JsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// \t\t// looks like there are still some cases where the expression are not recreated\n\t\t\t\t// \t\t// so commenting this out now\n\t\t\t\t// \t\t// delete this._deleted_params_data[param.name()]\n\t\t\t\t// \t}\n\n\t\t\t\t// \tthis._new_params.push(param);\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tthis.node.params.update_params(params_update_options);\n\t\t// if (spare_param_names_to_add.length > 0 || spare_param_names_to_remove.length > 0) {\n\t\t// \tthis.node.params.post_create_spare_params();\n\t\t// \tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t// }\n\t}\n}\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\n// import {Definition} from '../../Definition/_Module';\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig';\n// import {BaseGlNodeType} from '../../_Base';\nimport {VaryingGLDefinition, AttributeGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\n// import {TypeAssert} from '../../../../poly/Assert';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nconst VARIABLE_CONFIG_DEFAULT_BY_NAME: Dictionary<string> = {\n\tposition: 'vec3( position )',\n};\n\nexport class GlobalsGeometryHandler extends GlobalsBaseController {\n\tstatic PRE_DEFINED_ATTRIBUTES = [\n\t\t'position',\n\t\t'color',\n\t\t'normal',\n\t\t'uv',\n\t\t'uv2',\n\t\t'morphTarget0',\n\t\t'morphTarget1',\n\t\t'morphTarget2',\n\t\t'morphTarget3',\n\t\t'skinIndex',\n\t\t'skinWeight',\n\t];\n\n\tstatic IF_RULE = {\n\t\tuv:\n\t\t\t'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',\n\t};\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (!connection_point) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst gl_type = connection_point.type;\n\t\tconst definition = new VaryingGLDefinition(globals_node, gl_type, var_name);\n\n\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, definition);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\t\t// definitions_by_shader_name.get(shader_name)!.push(definition);\n\t\tconst assembler = globals_node.material_node?.assembler_controller.assembler;\n\t\tif (!assembler) {\n\t\t\treturn;\n\t\t}\n\t\tconst shader_config = assembler.shader_config(shaders_collection_controller.current_shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst body_line = `${var_name} = ${gl_type}(${output_name})`;\n\t\tfor (let dependency of dependencies) {\n\t\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t// MapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\tshaders_collection_controller.add_definitions(globals_node, [definition], dependency);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line], dependency);\n\t\t}\n\t\tif (dependencies.length == 0) {\n\t\t\t// body_lines.push(body_line);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n\n\tstatic variable_config_default(variable_name: string): string | undefined {\n\t\treturn VARIABLE_CONFIG_DEFAULT_BY_NAME[variable_name];\n\t}\n\tvariable_config_default(variable_name: string): string | undefined {\n\t\treturn GlobalsGeometryHandler.variable_config_default(variable_name);\n\t}\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \treturn null\n\t// }\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n\n\tstatic read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined {\n\t\tif (GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attrib_name) < 0) {\n\t\t\tshaders_collection_controller.add_definitions(\n\t\t\t\tnode,\n\t\t\t\t[new AttributeGLDefinition(node, gl_type, attrib_name)],\n\t\t\t\tShaderName.VERTEX\n\t\t\t);\n\t\t} else {\n\t\t\t// const if_rule = GlobalsGeometryHandler.IF_RULE[attrib_name]\n\t\t\t// if(if_rule){\n\t\t\t// \tconst definition = new Definition.Attribute(node, gl_type, attrib_name)\n\t\t\t// \tdefinition.set_if_rule(if_rule)\n\t\t\t// \tnode.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\n\t\t// if (!shader_name) {\n\t\t// \tthrow 'no shader name';\n\t\t// }\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX: {\n\t\t\t\treturn attrib_name;\n\t\t\t}\n\t\t\tcase ShaderName.FRAGMENT: {\n\t\t\t\t// let's assume it can only be an attribute gl node\n\t\t\t\tif (!(node instanceof AttributeGlNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst var_name = 'varying_' + node.gl_var_name(node.output_name);\n\t\t\t\tconst varying_definition = new VaryingGLDefinition(node, gl_type, var_name);\n\n\t\t\t\tconst definitions_by_shader_name: Map<ShaderName, VaryingGLDefinition[]> = new Map();\n\t\t\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tdefinitions_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\t// {\n\t\t\t\t// \t[ShaderName.VERTEX]: [],\n\t\t\t\t// \t[ShaderName.FRAGMENT]: [],\n\t\t\t\t// };\n\t\t\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t\t\t// body_lines_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tbody_lines_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, varying_definition);\n\n\t\t\t\tconst set_varying_body_line = `${var_name} = ${gl_type}(${attrib_name})`;\n\n\t\t\t\tconst shader_config = node.material_node?.assembler_controller.assembler.shader_config(shader_name);\n\t\t\t\tif (shader_config) {\n\t\t\t\t\tconst dependencies = shader_config.dependencies();\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, varying_definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, set_varying_body_line);\n\t\t\t\t\t}\n\t\t\t\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_definitions(node, definitions, shader_name);\n\t\t\t\t\t});\n\t\t\t\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(node, body_lines, shader_name);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn var_name;\n\t\t\t}\n\t\t}\n\t\t// TypeAssert.unreachable(shader_name);\n\n\t\t// const shader_name = node._shader_name // TODO: this is hack\n\t\t// const varying_definition = new Definition.Varying(node, gl_type, attrib_name)\n\t\t// const var_name = varying_definition.name()\n\t\t// definitions_by_shader_name[shader_name].push(varying_definition)\n\t\t// const shader_config = node.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\t\t// const body_line = `${var_name} = ${gl_type}(${attrib_name})`\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(varying_definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// // if(dependencies.length == 0){\n\t\t// \t// body_lines.push(body_line)\n\t\t// \tnode.add_body_lines([body_line])\n\t\t// // }\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tnode.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tnode.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// node.add_body_lines(body_lines)\n\t}\n\thandle_attribute_node(\n\t\tnode: AttributeGlNode,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n}\n","import {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\nimport {NodeConnection} from '../../utils/connections/NodeConnection';\n\ntype IONameFunction = (index: number) => string;\ntype ExpectedConnectionTypesFunction = () => ConnectionPointType[];\n\nexport class GlConnectionsController {\n\tprivate _input_name_function: IONameFunction = (index: number) => {\n\t\treturn `in${index}`;\n\t};\n\tprivate _output_name_function: IONameFunction = (index: number) => {\n\t\treturn index == 0 ? 'val' : `val${index}`;\n\t};\n\t// private _default_input_type: ConnectionPointType = ConnectionPointType.FLOAT;\n\tprivate _expected_input_types_function: ExpectedConnectionTypesFunction = () => {\n\t\tconst type = this.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type];\n\t};\n\tprivate _expected_output_types_function: ExpectedConnectionTypesFunction = () => {\n\t\treturn [this._expected_input_types_function()[0]];\n\t};\n\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tset_input_name_function(func: IONameFunction) {\n\t\tthis._input_name_function = func;\n\t}\n\tset_output_name_function(func: IONameFunction) {\n\t\tthis._output_name_function = func;\n\t}\n\t// set_default_input_type(type: ConnectionPointType) {\n\t// \tthis._default_input_type = type;\n\t// }\n\tset_expected_input_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_input_types_function = func;\n\t}\n\tset_expected_output_types_function(func: ExpectedConnectionTypesFunction) {\n\t\tthis._expected_output_types_function = func;\n\t}\n\n\toutput_name(index: number) {\n\t\treturn this._output_name_function(index);\n\t}\n\n\tprivate _update_signature_if_required_bound = this.update_signature_if_required.bind(this);\n\tprivate _initialized: boolean = false;\n\tinitialize_node() {\n\t\tif (this._initialized) {\n\t\t\tconsole.warn('already initialized', this.node);\n\t\t\treturn;\n\t\t}\n\t\tthis._initialized = true;\n\n\t\tthis.node.io.inputs.add_on_set_input_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.add_on_scene_load_hook(\n\t\t\t'_update_signature_if_required',\n\t\t\tthis._update_signature_if_required_bound\n\t\t);\n\t\tthis.node.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\tthis.node.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\n\tupdate_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.node.lifecycle.creation_completed || !this._connections_match_inputs()) {\n\t\t\tthis.update_connection_types();\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis.make_successors_update_signatures();\n\t\t}\n\t}\n\t// used when a node changes its signature, adn the output nodes need to adapt their own signatures\n\tprivate make_successors_update_signatures() {\n\t\tfor (let successor of this.node.graph_all_successors()) {\n\t\t\tconst gl_node = successor as BaseGlNodeType;\n\t\t\tif (gl_node.gl_connections_controller) {\n\t\t\t\tgl_node.gl_connections_controller.update_signature_if_required(this.node);\n\t\t\t}\n\t\t}\n\t\t// this.node.io.connections\n\t\t// \t.output_connections()\n\t\t// \t.map((c) => c.node_dest)\n\t\t// \t.forEach((o) => {\n\t\t// \t\to.set_dirty(this.node);\n\t\t// \t});\n\t}\n\n\tupdate_connection_types() {\n\t\tconst set_dirty = false;\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tconst named_input_connections = expected_input_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._input_name_function(i), type);\n\t\t});\n\t\tconst named_outputs = expected_output_types.map((type: ConnectionPointType, i: number) => {\n\t\t\treturn new TypedNamedConnectionPoint(this._output_name_function(i), type);\n\t\t});\n\n\t\tthis.node.io.inputs.set_named_input_connection_points(named_input_connections);\n\t\tthis.node.io.outputs.set_named_output_connection_points(named_outputs, set_dirty);\n\t\tthis.node.spare_params_controller.create_spare_parameters();\n\t}\n\n\tprotected _connections_match_inputs(): boolean {\n\t\tconst current_input_types = this.node.io.inputs.named_input_connection_points.map((c) => c.type);\n\t\tconst current_output_types = this.node.io.outputs.named_output_connection_points.map((c) => c.type);\n\t\tconst expected_input_types = this._expected_input_types_function();\n\t\tconst expected_output_types = this._expected_output_types_function();\n\n\t\tif (expected_input_types.length != current_input_types.length) {\n\t\t\treturn false;\n\t\t}\n\t\tif (expected_output_types.length != current_output_types.length) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (let i = 0; i < current_input_types.length; i++) {\n\t\t\tif (current_input_types[i] != expected_input_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\tfor (let i = 0; i < current_output_types.length; i++) {\n\t\t\tif (current_output_types[i] != expected_output_types[i]) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\t// protected input_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\t// protected output_connection_type() {\n\t// \treturn this.first_input_connection_type();\n\t// }\n\n\tfirst_input_connection_type(): ConnectionPointType | undefined {\n\t\tconst connections = this.node.io.connections.input_connections();\n\t\tif (connections) {\n\t\t\tconst first_connection = connections[0];\n\t\t\tif (first_connection) {\n\t\t\t\treturn this.connection_type_from_connection(first_connection);\n\t\t\t}\n\t\t}\n\t}\n\tconnection_type_from_connection(connection: NodeConnection): ConnectionPointType {\n\t\tconst node_src = connection.node_src;\n\t\tconst output_index = connection.output_index;\n\t\tconst node_src_output_connection = node_src.io.outputs.named_output_connection_points[output_index];\n\t\treturn node_src_output_connection.type;\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {\n\tUVMapping,\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tEquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping,\n\tSphericalReflectionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tMirroredRepeatWrapping,\n\tLinearFilter,\n\tNearestFilter,\n\tNearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter,\n\tLinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter,\n\t// UnsignedByteType,\n\t// ByteType,\n\t// ShortType,\n\t// UnsignedShortType,\n\t// IntType,\n\t// UnsignedIntType,\n\t// FloatType,\n\t// HalfFloatType,\n\t// UnsignedShort4444Type,\n\t// UnsignedShort5551Type,\n\t// UnsignedShort565Type,\n\t// UnsignedInt248Type,\n\t// AlphaFormat,\n\t// RGBFormat,\n\t// RGBAFormat,\n\t// LuminanceFormat,\n\t// LuminanceAlphaFormat,\n\t// RGBEFormat,\n\t// DepthFormat,\n\t// DepthStencilFormat,\n\t// LinearEncoding,\n\t// sRGBEncoding,\n\t// GammaEncoding,\n\t// RGBEEncoding,\n\t// LogLuvEncoding,\n\t// RGBM7Encoding,\n\t// RGBM16Encoding,\n\t// RGBDEncoding,\n\t// BasicDepthPacking,\n\t// RGBADepthPacking,\n} from 'three/src/constants';\nimport {Texture} from 'three/src/textures/Texture';\n// const THREE = {\n// \tTexture,\n// \tUVMapping,\n// \tVideoTexture,\n// \tCubeReflectionMapping,\n// \tCubeRefractionMapping,\n// \tEquirectangularReflectionMapping,\n// \tEquirectangularRefractionMapping,\n// \tSphericalReflectionMapping,\n// \tCubeUVReflectionMapping,\n// \tCubeUVRefractionMapping,\n// \tClampToEdgeWrapping,\n// \tRepeatWrapping,\n// \tMirroredRepeatWrapping,\n// \tLinearFilter,\n// \tNearestFilter,\n// \tNearestMipMapNearestFilter,\n// \tNearestMipMapLinearFilter,\n// \tLinearMipMapNearestFilter,\n// \tLinearMipMapLinearFilter,\n// \tUnsignedByteType,\n// \tByteType,\n// \tShortType,\n// \tUnsignedShortType,\n// \tIntType,\n// \tUnsignedIntType,\n// \tFloatType,\n// \tHalfFloatType,\n// \tUnsignedShort4444Type,\n// \tUnsignedShort5551Type,\n// \tUnsignedShort565Type,\n// \tUnsignedInt248Type,\n// \tAlphaFormat,\n// \tRGBFormat,\n// \tRGBAFormat,\n// \tLuminanceFormat,\n// \tLuminanceAlphaFormat,\n// \tRGBEFormat,\n// \tDepthFormat,\n// \tDepthStencilFormat,\n// \tLinearEncoding,\n// \tsRGBEncoding,\n// \tGammaEncoding,\n// \tRGBEEncoding,\n// \tLogLuvEncoding,\n// \tRGBM7Encoding,\n// \tRGBM16Encoding,\n// \tRGBDEncoding,\n// \tBasicDepthPacking,\n// \tRGBADepthPacking,\n// };\n// import lodash_last from 'lodash/last';\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\nimport {CoreTextureLoader} from '../../../core/loader/Texture';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\n// this used to be named file_in, but I can't recall the decision of not calling it simply 'file'\n// so renaming it back to file for now\n\nconst MAPPINGS = [\n\t{UVMapping},\n\t{CubeReflectionMapping},\n\t{CubeRefractionMapping},\n\t{EquirectangularReflectionMapping},\n\t{EquirectangularRefractionMapping},\n\t{SphericalReflectionMapping},\n\t{CubeUVReflectionMapping},\n\t{CubeUVRefractionMapping},\n];\n\nconst WRAPPINGS: Dictionary<number>[] = [{ClampToEdgeWrapping}, {RepeatWrapping}, {MirroredRepeatWrapping}];\n\nconst MAG_FILTERS: Dictionary<number>[] = [{LinearFilter}, {NearestFilter}];\nconst MIN_FILTERS: Dictionary<number>[] = [\n\t{NearestFilter},\n\t{NearestMipMapNearestFilter},\n\t{NearestMipMapLinearFilter},\n\t{LinearFilter},\n\t{LinearMipMapNearestFilter},\n\t{LinearMipMapLinearFilter},\n];\n\n// const TYPES = [\n// \t\"UnsignedByteType\",\n// \t\"ByteType\",\n// \t\"ShortType\",\n// \t\"UnsignedShortType\",\n// \t\"IntType\",\n// \t\"UnsignedIntType\",\n// \t\"FloatType\",\n// \t\"HalfFloatType\",\n// \t\"UnsignedShort4444Type\",\n// \t\"UnsignedShort5551Type\",\n// \t\"UnsignedShort565Type\",\n// \t\"UnsignedInt248Type\"\n// ];\n\n// const FORMATS = [\n// \t\"AlphaFormat\",\n// \t\"RGBFormat\",\n// \t\"RGBAFormat\",\n// \t\"LuminanceFormat\",\n// \t\"LuminanceAlphaFormat\",\n// \t\"RGBEFormat\",\n// \t\"DepthFormat\",\n// \t\"DepthStencilFormat\"\n// ];\n\n// const ENCODINGS = [\n// \t\"LinearEncoding\",\n// \t\"sRGBEncoding\",\n// \t\"GammaEncoding\",\n// \t\"RGBEEncoding\",\n// \t\"LogLuvEncoding\",\n// \t\"RGBM7Encoding\",\n// \t\"RGBM16Encoding\",\n// \t\"RGBDEncoding\",\n// \t\"BasicDepthPacking\",\n// \t\"RGBADepthPacking\"\n// ];\n\ninterface AttribMapping {\n\tmapping: string;\n\twrapS: string;\n\twrapT: string;\n\tminFilter: string;\n\tmagFilter: string;\n}\nconst ATTRIB_MAPPING_KEYS: Array<keyof AttribMapping> = ['mapping', 'wrapS', 'wrapT', 'minFilter', 'magFilter'];\nconst ATTRIB_MAPPING: AttribMapping = {\n\tmapping: 'mapping',\n\twrapS: 'wrap_s',\n\twrapT: 'wrap_t',\n\tminFilter: 'min_filter',\n\tmagFilter: 'mag_filter',\n\t// type: 'type',\n\t// encoding: 'encoding'\n\t// format: 'format',\n};\n\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass FileCopParamsConfig extends NodeParamsConfig {\n\t// video_time = ParamConfig.FLOAT(1);\n\turl = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t\tdesktop_browse: {file_type: 'texture'},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileCopNode.PARAM_CALLBACK_reload(node as FileCopNode, param);\n\t\t},\n\t});\n\tmapping = ParamConfig.INTEGER(UVMapping, {\n\t\tmenu: {\n\t\t\tentries: MAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_s = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_t = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmag_filter = ParamConfig.INTEGER(Object.values(MAG_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MAG_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmin_filter = ParamConfig.INTEGER(Object.values(MIN_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MIN_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new FileCopParamsConfig();\n\nexport class FileCopNode extends TypedCopNode<FileCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\t// @ParamF('video_time') _param_video_time: number;\n\t// @ParamS('url') _param_url: string;\n\tprivate _previous_param_url: string | undefined;\n\tprivate _video: HTMLVideoElement | undefined;\n\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\t// _param_video_time_param: BaseParam\n\tprivate _texture_loader: CoreTextureLoader | undefined;\n\n\tstatic readonly VIDEO_TIME_PARAM_NAME = 'video_time';\n\tstatic readonly DEFAULT_NODE_PATH = {\n\t\tUV: '/COP/file_uv',\n\t\tENV_MAP: '/COP/env_map',\n\t};\n\n\t// initialize_node() {\n\t// \t// this.io.inputs.set_count_to_zero();\n\t// }\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT, {\n\t// \t// \tdesktop_browse: {file_type: 'texture'},\n\t// \t// });\n\t// \t// this.add_param(ParamType.BUTTON, 'reload', null, {\n\t// \t// \tcallback: this._reload.bind(this),\n\t// \t// });\n\t// \t// this.add_param(ParamType.FLOAT, 'video_time', 0, {range: [0, 10]})\n\t// \t// this.add_param(ParamType.INTEGER, 'mapping', UVMapping as number, {\n\t// \t// \tmenu: {\n\t// \t// \t\tentries: MAPPINGS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// for (let wrap_name of ['wrap_s', 'wrap_t']) {\n\t// \t// \tconst wrap = Object.values(WRAPPINGS[0])[0] as number;\n\t// \t// \tthis.add_param(ParamType.INTEGER, wrap_name, wrap, {\n\t// \t// \t\tmenu: {\n\t// \t// \t\t\t// type: 'radio',\n\t// \t// \t\t\tentries: WRAPPINGS.map((m) => {\n\t// \t// \t\t\t\treturn {\n\t// \t// \t\t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t\t};\n\t// \t// \t\t\t}),\n\t// \t// \t\t},\n\t// \t// \t});\n\t// \t// }\n\t// \t// const mag_filter = Object.values(MAG_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'mag_filter', mag_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MAG_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// const min_filter: number = Object.values(MIN_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'min_filter', min_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MIN_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// TODO: to be added when I have some level of control\n\t// \t// for now, the type attribute overrides what piz_compressed.exr creates\n\t// \t// which in turns fucks up with the env_map\n\t// \t// advanced\n\t// \t// this.add_param(ParamType.TOGGLE, 'advanced', 0)\n\t// \t// this.add_param(ParamType.INTEGER, 'type', THREE[TYPES[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: TYPES.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'format', THREE[FORMATS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: FORMATS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'encoding', THREE[ENCODINGS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: ENCODINGS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// }\n\n\tasync cook() {\n\t\tif (this._is_static_image_url(this.pv.url)) {\n\t\t\tawait this.cook_for_image();\n\t\t} else {\n\t\t\tawait this.cook_for_video();\n\t\t}\n\t}\n\n\tprivate _is_static_image_url(url: string) {\n\t\treturn true;\n\t}\n\n\tprivate async cook_for_image() {\n\t\tconst texture = await this._load_texture(this.pv.url);\n\n\t\tif (texture) {\n\t\t\tthis._update_texture_params(texture);\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.clear_texture();\n\t\t}\n\t}\n\n\tprivate async cook_for_video() {\n\t\tif (this._param_url_changed()) {\n\t\t\tconst texture = await this._load_texture(this.pv.url);\n\t\t\t// if (texture) {\n\t\t\t// \tthis._texture = texture;\n\t\t\t// }\n\n\t\t\tif (texture) {\n\t\t\t\tthis._add_video_spare_params_if_required(texture);\n\t\t\t}\n\t\t\tthis._previous_param_url = this.pv.url;\n\n\t\t\tthis._set_video_current_time();\n\n\t\t\tif (texture) {\n\t\t\t\tthis._update_texture_params(texture);\n\t\t\t\tthis.set_texture(texture);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\t// this._set_video_current_time();\n\t\t\t// this._update_texture_params();\n\t\t\t// if (texture?.needsUpdate) {\n\t\t\t// \tthis.set_texture(texture);\n\t\t\t// } else {\n\t\t\t// \tthis.cook_controller.end_cook();\n\t\t\t// }\n\t\t}\n\t}\n\n\tresolved_url() {\n\t\treturn this.pv.url;\n\t}\n\n\tprivate _update_texture_params(texture: Texture) {\n\t\t// const keys = Object.keys(ATTRIB_MAPPING) as keyof AttribMapping\n\t\tfor (let texture_attrib of ATTRIB_MAPPING_KEYS) {\n\t\t\tconst param_name = ATTRIB_MAPPING[texture_attrib];\n\t\t\tconst param_value = this.params.float(param_name);\n\t\t\t// const texture_attrib = ATTRIB_MAPPING[attrib];\n\n\t\t\tif (param_value != null && texture) {\n\t\t\t\tif (texture[texture_attrib] != param_value) {\n\t\t\t\t\ttexture[texture_attrib] = param_value;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_reload(node: FileCopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\tthis._previous_param_url = undefined;\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_successors_dirty();\n\t\t// this.set_dirty()\n\t}\n\n\tprivate _set_video_current_time() {\n\t\tif (this._video) {\n\t\t\tif (this.params.has('video_time')) {\n\t\t\t\tthis._video.currentTime = this.params.float('video_time');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_video_spare_params_if_required(texture: Texture | VideoTexture | null) {\n\t\tif (texture) {\n\t\t\tconst is_video = texture.constructor == VideoTexture;\n\t\t\tif (is_video) {\n\t\t\t\tthis._video = texture.image;\n\t\t\t\tif (this._video) {\n\t\t\t\t\tif (!this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\t\t\t\tconst duration = this._video.duration;\n\n\t\t\t\t\t\tthis.add_param(ParamType.FLOAT, FileCopNode.VIDEO_TIME_PARAM_NAME, '$T', {\n\t\t\t\t\t\t\tspare: true,\n\t\t\t\t\t\t\tcook: true,\n\t\t\t\t\t\t\trange: [0, duration],\n\t\t\t\t\t\t\trange_locked: [true, true],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._remove_spare_params();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remove_spare_params();\n\t\t}\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tif (this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\tthis.params.update_params({names_to_delete: [FileCopNode.VIDEO_TIME_PARAM_NAME]});\n\t\t\t// this.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\n\tprivate _param_url_changed(): boolean {\n\t\treturn this._previous_param_url != this.pv.url;\n\t}\n\n\tprivate async _load_texture(url: string) {\n\t\tlet texture: Texture | VideoTexture | null = null;\n\t\tconst param = this.params.get('url');\n\t\tif (url && param) {\n\t\t\tthis._texture_loader = this._texture_loader || new CoreTextureLoader(this, param);\n\t\t\t// const ext = lodash_last(url.split('.')).toLowerCase()\n\t\t\ttry {\n\t\t\t\ttexture = await this._texture_loader.load_texture_from_url_or_op(url);\n\t\t\t} catch (e) {\n\t\t\t\t//console.log('FAIL');\n\t\t\t}\n\t\t\t// if(texture){\n\t\t\t// \tcallback(texture)\n\t\t\t// } else {\n\t\t\tif (!texture) {\n\t\t\t\tthis.states.error.set(`could not load texture '${url}'`);\n\t\t\t}\n\t\t\t// }).catch(error=>{\n\t\t\t// \tthis.self.set_error(`could not load texture ${url} (${error})`);\n\t\t\t// })\n\t\t} else {\n\t\t\tthis.states.error.set('not url given to Mat/Base._load_texture');\n\t\t}\n\t\treturn texture;\n\t}\n}\n","// import {Vector3} from 'three/src/math/Vector3';\n// import {Texture} from 'three/src/textures/Texture';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n// const THREE = {Color, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Raycaster, Texture, Vector3}\n// import lodash_isNaN from 'lodash/isNaN'\n// import lodash_sum from 'lodash/sum'\n// import {BaseParam} from '../../../../../../Engine/Param/_Base'\n// import {BaseNodePostProcess} from '../../../../../../Engine/Node/PostProcess/_Base'\nimport {BaseCameraObjNodeType} from '../../../_BaseCamera';\nimport {BaseMatNodeType} from '../../../../mat/_Base';\n// import {NodeContext} from '../../../../../poly/NodeContext';\n// import {ParamType} from '../../../../../poly/ParamType';\n// import {EffectComposer} from '../../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer'\n// import {RenderPass} from '../../../../../../../modules/three/examples/jsm/postprocessing/RenderPass'\n\n// import {File} from '../../../../../../Engine/Node/Cop/File'\n\n// import {ScreenQuad} from '../Camera/ScreenQuad'\nimport {NodeContext} from '../../../../../poly/NodeContext';\n\nimport {ParamConfig} from '../../../../utils/params/ParamsConfig';\nexport function CameraBackgroundParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tbackground = ParamConfig.FOLDER();\n\t\tuse_background = ParamConfig.BOOLEAN(0);\n\t\tuse_material = ParamConfig.BOOLEAN(0, {\n\t\t\tvisible_if: {use_background: true},\n\t\t});\n\t\tbackground_color = ParamConfig.COLOR([0, 0, 0], {\n\t\t\tvisible_if: {use_background: true, use_material: false},\n\t\t});\n\t\tbackground_material = ParamConfig.OPERATOR_PATH('', {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t\tnode_selection: {context: NodeContext.MAT},\n\t\t\tdependent_on_found_node: false,\n\t\t});\n\t\tbackground_ratio = ParamConfig.FLOAT(1, {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t});\n\t};\n}\n\nexport class BaseBackgroundController {\n\t// private _param_use_background: boolean;\n\t// private _param_use_material: boolean;\n\t// private _param_background_color: Color;\n\t// private _param_background_material: string;\n\t// private _param_background_ratio: number;\n\n\tprivate _screen_quad: Mesh | undefined;\n\tprivate _screen_quad_flat_material: MeshBasicMaterial | undefined;\n\n\tprotected _bg_raycaster = new Raycaster();\n\n\tconstructor(protected node: BaseCameraObjNodeType) {}\n\n\tget screen_quad() {\n\t\treturn (this._screen_quad = this._screen_quad || this._create_screen_quad()); // new ScreenQuad()\n\t}\n\tprivate _create_screen_quad() {\n\t\tconst size = 2; // better than 1 for color, as the edges can be visible if canvas ratio extreme\n\t\tconst segments = 1;\n\t\tconst geometry = new PlaneBufferGeometry(size, size, segments, segments);\n\t\tconst quad = new Mesh(geometry);\n\t\tthis.node.object.add(quad);\n\t\treturn quad;\n\t}\n\tscreen_quad_flat_material() {\n\t\treturn (this._screen_quad_flat_material = this._screen_quad_flat_material || new MeshBasicMaterial());\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('background', () => {\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_background', 0);\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_material', 0, {\n\t\t// \tvisible_if: {use_background: true},\n\t\t// });\n\t\t// this.node.add_param(ParamType.COLOR, 'background_color', [0, 0, 0], {\n\t\t// \tvisible_if: {use_background: true, use_material: false},\n\t\t// });\n\t\t// this.node.add_param(ParamType.OPERATOR_PATH, 'background_material', '', {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// \tnode_selection: {context: NodeContext.MAT},\n\t\t// \tdependent_on_found_node: false,\n\t\t// });\n\t\t// this.node.add_param(ParamType.FLOAT, 'background_ratio', 1, {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// });\n\t\t// });\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_color', 1 )\n\t\t// this.self.add_param( ParamType.COLOR, 'background_color', [0,0,0], {\n\t\t// \tvisible_if: {use_background_color: 1}\n\t\t// })\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_image', 0 )\n\t\t// this.self.add_param( ParamType.OPERATOR_PATH, 'background_image', File.DEFAULT_NODE_PATH.UV, {\n\t\t// \tvisible_if: {use_background_image: true},\n\t\t// \tnode_selection: {context: NodeContext.COP}\n\t\t// } )\n\t}\n\n\tget use_background(): boolean {\n\t\treturn this.node.params.boolean('use_background');\n\t}\n\tget use_background_material(): boolean {\n\t\treturn this.use_background && this.node.params.boolean('use_material');\n\t}\n\tget use_background_color(): boolean {\n\t\treturn this.use_background && !this.node.params.boolean('use_material');\n\t}\n\tget background_color(): Color | null {\n\t\tif (this.use_background_color) {\n\t\t\treturn this.node.params.color('background_color');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t// background_image_url(){\n\t// \tif(this._param_use_background_image){\n\t// \t\t// this.param('background_image').mark_as_referencing_asset(this._param_background_image)\n\t// \t\t// return this._param_background_image\n\t// \t\treturn this._background_image_url\n\t// \t}\n\t// }\n\t// background_texture(){\n\t// \tif(this._param_use_background_image){\n\t// \t\treturn this._background_texture\n\t// \t}\n\t// }\n\tprotected update_screen_quad() {}\n\tasync update() {\n\t\tif (this.use_background) {\n\t\t\tthis.update_screen_quad();\n\n\t\t\tawait this.update_background_color();\n\t\t\tif (this.use_background_material) {\n\t\t\t\tawait this.update_background_material();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._screen_quad) {\n\t\t\t\tthis.node.object.remove(this._screen_quad);\n\t\t\t}\n\t\t}\n\n\t\t// if(this._param_use_background_image){\n\t\t// \tconst bg_node = this.self.param('background_image').found_node();\n\t\t// \tif(bg_node){\n\t\t// \t\tconst container = await bg_node.request_container();\n\t\t// \t\tthis._background_texture = container.core_content()\n\t\t// \t\t// this._background_image_url = bg_node.resolved_url()\n\t\t// \t} else {\n\t\t// \t\tthis._background_texture = null\n\t\t// \t}\n\t\t// } else {\n\t\t// \tthis._background_texture = null\n\t\t// }\n\t}\n\tprivate async update_background_color() {\n\t\tconst material = this.screen_quad_flat_material();\n\t\tmaterial.color = this.node.pv.background_color;\n\t\tthis.screen_quad.material = material;\n\t}\n\n\tprivate async update_background_material() {\n\t\tconst bg_node = this.node.p.background_material.found_node() as BaseMatNodeType;\n\t\tif (bg_node) {\n\t\t\tawait bg_node.request_container();\n\t\t\tconst material = bg_node.material;\n\t\t\tthis.screen_quad.material = material;\n\t\t\t// this.screen_quad().material.uniforms.uTexture.value = texture\n\t\t} else {\n\t\t\tthis.node.states.error.set('bg node not found');\n\t\t}\n\t}\n}\n","import lodash_sortBy from 'lodash/sortBy';\n// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {RGBFormat} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {CubicInterpolant} from 'three/src/math/interpolants/CubicInterpolant';\n// import {ClampToEdgeWrapping} from 'three/src/constants'\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {RampValue, RampPoint, RampValueJson, RampInterpolation} from './ramp/RampValue';\n\n// import {AsCodeRamp} from './concerns/visitors/Ramp';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\n\n// interface RampParamVisitor extends TypedParamVisitor {\n// \tvisit_ramp_param: (param: RampParam) => any;\n// }\n\nexport class RampParam extends TypedParam<ParamType.RAMP> {\n\tstatic type() {\n\t\treturn ParamType.RAMP;\n\t}\n\n\tprivate _ramp_interpolant: CubicInterpolant | undefined;\n\tprivate _ramp_texture: DataTexture | undefined;\n\n\tstatic DEFAULT_VALUE = new RampValue(RampInterpolation.LINEAR, [new RampPoint(0, 0), new RampPoint(1, 1)]);\n\tstatic DEFAULT_VALUE_JSON: RampValueJson = RampParam.DEFAULT_VALUE.to_json();\n\n\tget default_value_serialized() {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.default_value.to_json();\n\t\t} else {\n\t\t\treturn this.default_value;\n\t\t}\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.RAMP]) {\n\t\tif (raw_input instanceof RampValue) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\treturn RampValue.from_json(raw_input).to_json();\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\treturn this._raw_input.to_json();\n\t\t} else {\n\t\t\treturn RampValue.from_json(this._raw_input).to_json();\n\t\t}\n\t}\n\tget value_serialized() {\n\t\treturn this.value.to_json();\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.RAMP],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.RAMP]\n\t) {\n\t\tif (raw_input1 instanceof RampValue) {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input1.is_equal(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.is_equal_json(raw_input2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input2.is_equal_json(raw_input1);\n\t\t\t} else {\n\t\t\t\treturn RampValue.are_json_equal(raw_input1, raw_input2);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.RAMP], val2: ParamValuesTypeMap[ParamType.RAMP]) {\n\t\treturn val1.is_equal(val2);\n\t}\n\tprivate _reset_ramp_interpolant_and_texture_bound = this._reset_ramp_interpolant_and_texture.bind(this);\n\tinitialize_param() {\n\t\tthis.add_post_dirty_hook('_reset_ramp_interpolant_and_texture', this._reset_ramp_interpolant_and_texture_bound);\n\t}\n\t// accepts_visitor(visitor: RampParamVisitor) {\n\t// \treturn visitor.visit_ramp_param(this);\n\t// }\n\tget is_default(): boolean {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.value.is_equal(this.default_value);\n\t\t} else {\n\t\t\treturn this.value.is_equal_json(this.default_value);\n\t\t}\n\t}\n\tprotected process_raw_input() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t} else {\n\t\t\t\tthis._value.copy(this._raw_input);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = RampValue.from_json(this._raw_input);\n\t\t\t} else {\n\t\t\t\tthis._value.from_json(this._raw_input);\n\t\t\t}\n\t\t}\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\t// convert_value(v) {\n\t// \tlet is_json = false\n\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = JSON.parse(v)\n\t// \t\tis_json = true\n\t// \t}\n\n\t// \tif (!is_json) {\n\t// \t\tif (v.interpolation && v.points) {\n\t// \t\t\tif (lodash_isArray(v.points)) {\n\t// \t\t\t\tis_json = true\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (is_json) {\n\t// \t\tv = RampValue.from_json(v)\n\t// \t}\n\n\t// \treturn v\n\t// }\n\t// convert_default_value(v) {\n\t// \treturn this.convert_value(v)\n\t// }\n\n\thas_expression() {\n\t\treturn false;\n\t}\n\n\t_reset_ramp_interpolant_and_texture() {\n\t\tthis._ramp_interpolant = undefined;\n\t\tthis._ramp_texture = undefined;\n\t}\n\tramp_texture() {\n\t\treturn (this._ramp_texture = this._ramp_texture || this._create_ramp_texture());\n\t}\n\t_create_ramp_texture() {\n\t\tconst width = 1024;\n\t\tconst height = 1;\n\n\t\tconst size = width * height;\n\t\tconst data = new Uint8Array(3 * size);\n\n\t\tlet stride = 0;\n\t\tlet position = 0;\n\t\tlet value = 0;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tstride = i * 3;\n\t\t\tposition = i / width;\n\t\t\tvalue = this.value_at_position(position);\n\t\t\tdata[stride] = value * 255; // if I set 256, a value of 1 will become 0\n\t\t\t// data[ stride+1 ] = 1\n\t\t\t// data[ stride+2 ] = 2\n\t\t}\n\n\t\tconst texture = new DataTexture(data, width, height, RGBFormat);\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\tstatic create_interpolant(positions: Float32Array, values: Float32Array) {\n\t\tconst values_count = 1;\n\t\tconst interpolated_values = new Float32Array(values_count);\n\t\treturn new CubicInterpolant(positions, values, values_count, interpolated_values);\n\t}\n\tinterpolant() {\n\t\treturn (this._ramp_interpolant = this._ramp_interpolant || this._create_interpolant());\n\t}\n\t_create_interpolant() {\n\t\tconst points = this.value.points;\n\t\tconst sorted_points = lodash_sortBy(points, (point) => point.position);\n\t\tconst positions = new Float32Array(sorted_points.length);\n\t\tconst values = new Float32Array(sorted_points.length);\n\n\t\tlet i = 0;\n\t\tfor (let sorted_point of sorted_points) {\n\t\t\tpositions[i] = sorted_point.position;\n\t\t\tvalues[i] = sorted_point.value;\n\t\t\ti++;\n\t\t}\n\n\t\treturn RampParam.create_interpolant(positions, values);\n\t}\n\n\tvalue_at_position(position: number): number {\n\t\treturn (<unknown>this.interpolant().evaluate(position)[0]) as number;\n\t}\n}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamType} from '../../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nimport {ParamOptions} from '../../../params/utils/OptionsController';\n\ntype OverridenOptions = Dictionary<string>;\n\nexport type SimpleParamJsonExporterData<T extends ParamType> = ParamInitValueSerializedTypeMap[T];\n\nexport interface ComplexParamJsonExporterData<T extends ParamType> {\n\ttype?: T;\n\tdefault_value?: ParamInitValueSerializedTypeMap[T];\n\traw_input?: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n\toverriden_options?: OverridenOptions;\n\t// components?: ParamJsonExporterDataByName;\n\t// expression?: string;\n}\nexport type ParamJsonExporterData<T extends ParamType> =\n\t| SimpleParamJsonExporterData<T>\n\t| ComplexParamJsonExporterData<T>;\nexport type ParamJsonExporterDataByName = Dictionary<ParamJsonExporterData<ParamType>>;\n\nexport class ParamJsonExporter<T extends BaseParamType> {\n\t// protected _simple_data: SimpleParamJsonExporterData<ParamType>=0;\n\tprotected _complex_data: ComplexParamJsonExporterData<ParamType> = {};\n\tconstructor(protected _param: T) {}\n\n\tget required(): boolean {\n\t\tconst is_spare_and_not_component = this._param.options.is_spare && !this._param.parent_param;\n\n\t\t// we should not need to check if it has an expression anymore,\n\t\t// as it could have an expression AND be of default value\n\t\tconst value_changed = !this._param.is_default; //|| this._param.has_expression();\n\t\t// const referencing_asset = this._param.is_referencing_asset()\n\t\treturn is_spare_and_not_component || value_changed; // || referencing_asset\n\t}\n\n\tdata() {\n\t\tif (this._param.parent_param) {\n\t\t\tconsole.warn('no component should be saved');\n\t\t\tthrow 'no component should be saved';\n\t\t}\n\n\t\tif (this._require_data_complex()) {\n\t\t\treturn this._data_complex();\n\t\t} else {\n\t\t\treturn this._data_simple();\n\t\t}\n\t}\n\n\tprivate _data_simple() {\n\t\treturn this._param.raw_input_serialized;\n\t}\n\n\tprivate _data_complex() {\n\t\tthis._complex_data = {};\n\n\t\tif (this._param.options.is_spare && !this._param.parent_param) {\n\t\t\tthis._complex_data['type'] = this._param.type;\n\t\t\tthis._complex_data['default_value'] = this._param.default_value_serialized;\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t\tthis._complex_data['options'] = this._param.options.current;\n\t\t}\n\n\t\tif (!this._param.is_default) {\n\t\t\tthis.add_main();\n\t\t}\n\n\t\t// if(this._param.is_referencing_asset()){\n\t\t// \t// console.log(\"this._param.is_referencing_asset()\", this._param.is_referencing_asset())\n\t\t// \tthis._data['referenced_asset'] = this._param.referenced_asset()\n\t\t// }\n\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\tconst overridden_options: OverridenOptions = {};\n\t\t\tconst options_overridden = this._param.options.overridden_options;\n\t\t\tfor (let option_name of Object.keys(options_overridden)) {\n\t\t\t\tconst option_value = options_overridden[option_name as keyof ParamOptions];\n\t\t\t\toverridden_options[option_name] = JSON.stringify(option_value);\n\t\t\t}\n\t\t\tthis._complex_data['overriden_options'] = overridden_options;\n\t\t}\n\t\treturn this._complex_data;\n\t}\n\n\tprotected _require_data_complex() {\n\t\tif (this._param.options.is_spare) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// default_value(): ParamValueSerialized {\n\t// \treturn this._param.default_value_serialized;\n\t// }\n\n\t// cannot remember why this is useful, but it messes up\n\t// with gl nodes like the noise node, as the default value\n\t// gets saved as a string '[1,1]' instead of an array [1,1] (should be without quotes)\n\t// protected default_value(){\n\t// \tlet default_value = this._param.default_value()\n\t// \tif(lodash_isString(default_value)){\n\t// \t\tdefault_value = `'${default_value}'`\n\t// \t}\n\t// \tif (lodash_isArray(default_value)){\n\t// \t\tdefault_value = `[${default_value}]`\n\t// \t}\n\t// \treturn default_value\n\t// }\n\n\tprotected add_main() {}\n}\n","// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderChunk} from 'three/src/renderers/shaders/ShaderChunk';\n// import {Shader} from 'three/src/renderers/shaders/ShaderLib'\n// import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n// import {MeshPhysicalMaterial} from 'three/src/materials/MeshPhysicalMaterial';\n// import {Material} from 'three/src/materials/Material';\nimport {Vector2} from 'three/src/math/Vector2';\n\n// import {Connection} from '../../../../../Engine/Node/Gl/GlData';\nimport {LineType} from '../utils/LineType';\n// import {Output} from '../../../../../Engine/Node/Gl/Output'\n\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {VariableConfig} from '../configs/VariableConfig';\n// import {ThreeToGl} from '../../../../../core/ThreeToGl';\n// const BODY_SPLIT_LINE = 'void main() {'\n// export const BODY_SEPARATOR_LINES = lodash_range(3).map(i=>'\t')\nimport {CodeBuilder} from '../utils/CodeBuilder';\n// import {BaseNode} from '../../../../../Engine/Node/_Base';\nimport {BaseGlNodeType} from '../../_Base';\nimport {GlobalsGeometryHandler} from '../globals/Geometry';\nimport {TypedAssembler} from '../../../utils/shaders/BaseAssembler';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n// import {IUniformsWithFrame, IUniformsWithResolution} from '../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../Output';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\nimport {AssemblerControllerNode} from '../Controller';\nimport {GlobalsBaseController} from '../globals/_Base';\nimport {CustomMaterialName} from './materials/_BaseMaterial';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\nimport {IUniforms} from '../../../../../core/geometry/Material';\n\ntype StringArrayByShaderName = Map<ShaderName, string[]>;\n\ninterface ITemplateShader {\n\tvertexShader?: string;\n\tfragmentShader?: string;\n\tuniforms?: IUniforms;\n}\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <common>'],\n\t[ShaderName.FRAGMENT, '#include <common>'],\n]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <color_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( diffuse, opacity );'],\n]);\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', '#include <beginnormal_vertex>']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst SPACED_LINES = 3;\n\nexport class BaseGlShaderAssembler extends TypedAssembler<BaseGlNodeType> {\n\tprotected _shaders_by_name: Map<ShaderName, string> = new Map();\n\tprotected _lines: StringArrayByShaderName = new Map();\n\tprotected _code_builder: CodeBuilder | undefined;\n\tprivate _param_config_owner: CodeBuilder | undefined;\n\tprotected _root_nodes: BaseGlNodeType[] = [];\n\tprotected _leaf_nodes: BaseGlNodeType[] = [];\n\tprotected _material: ShaderMaterial | undefined;\n\n\tprivate _shader_configs: ShaderConfig[] | undefined;\n\tprivate _variable_configs: VariableConfig[] | undefined;\n\n\tprivate _uniforms_time_dependent: boolean = false;\n\tprivate _resolution_dependent: boolean = false;\n\n\tconstructor(protected _gl_parent_node: AssemblerControllerNode) {\n\t\tsuper();\n\t}\n\n\tasync compile() {}\n\n\t// private get material() {\n\t// \treturn (this._material = this._material || this._create_material());\n\t// }\n\t// async get_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tthis._material = this._material || this._create_material();\n\n\t// \tawait this._update_material(/*master_assembler*/);\n\t// \treturn this._material;\n\t// }\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName): string | undefined {\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX:\n\t\t\t\treturn this._template_shader?.vertexShader;\n\t\t\tcase ShaderName.FRAGMENT:\n\t\t\t\treturn this._template_shader?.fragmentShader;\n\t\t}\n\t}\n\n\tget globals_handler(): GlobalsBaseController | undefined {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler;\n\t}\n\tcompile_allowed(): boolean {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler != null;\n\t}\n\tshaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\n\t// protected create_material(): ShaderMaterial | undefined {\n\t// \treturn undefined;\n\t// }\n\tprotected _build_lines() {\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._replace_template(template, shader_name);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _build_lines_for_shader_name(shader_name: ShaderName){\n\t// \tconst template = this._template_shader()\n\t// \tthis._replace_template(template[`${shader_name}Shader`], shader_name)\n\t// }\n\n\tset_root_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tthis._root_nodes = root_nodes;\n\t}\n\tprotected get _template_shader(): ITemplateShader | undefined {\n\t\treturn undefined;\n\t} //Shader - could not find the import?\n\t// abstract _color_declaration(): string\n\t// private async _update_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tif (!this.material || !this._material) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst template_shader = this._template_shader;\n\t// \tif (!template_shader) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis._lines = new Map();\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t// \t\tif (template) {\n\t// \t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t// \t\t}\n\t// \t}\n\t// \tif (this._root_nodes.length > 0) {\n\t// \t\t// this._output_node.set_color_declaration(this._color_declaration())\n\t// \t\t// if(!master_assembler){\n\t// \t\t// this._output_node.set_assembler(this)\n\t// \t\tawait this.build_code_from_nodes(this._root_nodes);\n\t// \t\t// }\n\n\t// \t\t(this._material as any).extensions = {derivatives: true};\n\t// \t\t// this._material?.derivatives = true;\n\t// \t\tthis._build_lines();\n\t// \t\t// this._lines[ShaderName.FRAGMENT].unshift('#extension GL_OES_standard_derivatives : enable')\n\t// \t}\n\n\t// \t// TODO: typescript - not sure that is still useful\n\t// \t// for (let param_config of this.param_configs()) {\n\t// \t// \tparam_config.material = this._material;\n\t// \t// }\n\n\t// \t// instead of replacing fully the uniforms,\n\t// \t// I simply add to them the new ones or replace the existing ones\n\t// \t// otherwise this would break the particles_system_gpu\n\t// \t// which would not reset correctly when going back to first frame.\n\t// \t// Not entirely sure why, but this seems to be due to the texture uniforms\n\t// \t// which are removed and then readded. This seems to mess up somewhere with how\n\t// \t// the material updates itself...\n\t// \t// this._material.uniforms = this.build_uniforms(template_shader)\n\t// \tconst new_uniforms = this.build_uniforms(template_shader.uniforms);\n\t// \tthis.material.uniforms = this.material.uniforms || {};\n\t// \tfor (let uniform_name of Object.keys(new_uniforms)) {\n\t// \t\tthis.material.uniforms[uniform_name] = new_uniforms[uniform_name];\n\t// \t}\n\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst lines = this._lines.get(shader_name);\n\t// \t\tif (lines) {\n\t// \t\t\tconst shader = lines.join('\\n');\n\t// \t\t\tswitch (shader_name) {\n\t// \t\t\t\tcase ShaderName.VERTEX: {\n\t// \t\t\t\t\tthis._material.vertexShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t\tcase ShaderName.FRAGMENT: {\n\t// \t\t\t\t\tthis._material.fragmentShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tconst scene = this._gl_parent_node.scene;\n\t// \t// const id = this._gl_parent_node.graph_node_id()\n\t// \tif (this.frame_dependent()) {\n\t// \t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t// \t\t// as we need several materials:\n\t// \t\t// - the visible one\n\t// \t\t// - the multiple shadow ones\n\t// \t\t// - and possibly a depth one\n\t// \t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithFrame\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\n\t// \tif (this.resolution_dependent()) {\n\t// \t\tscene.uniforms_controller.add_resolution_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithResolution\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_resolution_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\t// }\n\n\tprotected add_uniforms(current_uniforms: IUniforms) {\n\t\t// const new_uniforms = UniformsUtils.clone(template_uniforms);\n\n\t\t// copy the new uniforms onto the old ones, only adding, not removing\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\n\t\t// }\n\n\t\t// copy the values of the old uniform\n\t\t// for (let uniform_name of Object.keys(old_uniforms)) {\n\t\t// \tconst new_uniform = new_uniforms[uniform_name];\n\t\t// \tif (new_uniform) {\n\t\t// \t\tnew_uniform.value = old_uniforms[uniform_name].value;\n\t\t// \t}\n\t\t// }\n\n\t\tfor (let param_config of this.param_configs()) {\n\t\t\tcurrent_uniforms[param_config.uniform_name] = param_config.uniform;\n\t\t}\n\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tcurrent_uniforms['time'] = {\n\t\t\t\t// type: '1f',\n\t\t\t\tvalue: this._gl_parent_node.scene.time,\n\t\t\t};\n\t\t}\n\t\tif (this.resolution_dependent()) {\n\t\t\tcurrent_uniforms['resolution'] = {\n\t\t\t\tvalue: new Vector2(1000, 1000),\n\t\t\t};\n\t\t}\n\n\t\t// return new_uniforms;\n\t}\n\n\t//\n\t//\n\t// ROOT NODES AND SHADER NAMES\n\t//\n\t//\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\t// const attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase GlobalsGlNode.type(): {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase AttributeGlNode.type(): {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\t// const attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tget code_builder() {\n\t\treturn (this._code_builder = this._code_builder || new CodeBuilder(this, this._gl_parent_node));\n\t}\n\tasync build_code_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tawait this.code_builder.build_from_nodes(root_nodes);\n\t}\n\tallow_new_param_configs() {\n\t\tthis.code_builder.allow_new_param_configs();\n\t}\n\tdisallow_new_param_configs() {\n\t\tthis.code_builder.disallow_new_param_configs();\n\t}\n\tbuilder_param_configs() {\n\t\treturn this.code_builder.param_configs();\n\t}\n\tbuilder_lines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this.code_builder.lines(shader_name, line_type);\n\t}\n\tall_builder_lines() {\n\t\treturn this.code_builder.all_lines();\n\t}\n\tparam_configs() {\n\t\tconst code_builder = this._param_config_owner || this.code_builder;\n\t\treturn code_builder.param_configs();\n\t}\n\tset_param_configs_owner(param_config_owner: CodeBuilder) {\n\t\tthis._param_config_owner = param_config_owner;\n\t\tif (this._param_config_owner) {\n\t\t\tthis.code_builder.disallow_new_param_configs();\n\t\t} else {\n\t\t\tthis.code_builder.allow_new_param_configs();\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tstatic add_output_params(output_child: OutputGlNode) {\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'position', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'normal', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR2, 'uv', [0, 0], {hidden: true});\n\t}\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t}\n\tstatic create_globals_node_output_connections() {\n\t\treturn [\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('normal', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('color', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('uv', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC4),\n\t\t\tnew TypedNamedConnectionPoint('resolution', ConnectionPointType.VEC2),\n\t\t\t// new Connection.Vec2('gl_PointCoord'),\n\t\t\t// new TypedConnectionVec2('uv'),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t];\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections();\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points(this.create_globals_node_output_connections());\n\t}\n\tallow_attribute_exports() {\n\t\treturn false;\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\treset_configs() {\n\t\tthis._reset_shader_configs();\n\t\tthis._reset_variable_configs();\n\t\tthis._reset_uniforms_time_dependency();\n\t\tthis._reset_resolution_dependency();\n\t}\n\tget shader_configs() {\n\t\treturn (this._shader_configs = this._shader_configs || this.create_shader_configs());\n\t}\n\tset_shader_configs(shader_configs: ShaderConfig[]) {\n\t\tthis._shader_configs = shader_configs;\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.shader_configs?.map((sc) => sc.name()) || [];\n\t}\n\tprotected _reset_shader_configs() {\n\t\tthis._shader_configs = undefined;\n\t\t// this.shader_configs; // TODO: typescript - why do I need to re-initialize here?\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tshader_config(name: string): ShaderConfig | undefined {\n\t\treturn this.shader_configs?.filter((sc) => {\n\t\t\treturn sc.name() == name;\n\t\t})[0];\n\t}\n\tvariable_configs() {\n\t\treturn (this._variable_configs = this._variable_configs || this.create_variable_configs());\n\t}\n\tset_variable_configs(variable_configs: VariableConfig[]) {\n\t\tthis._variable_configs = variable_configs;\n\t}\n\tvariable_config(name: string) {\n\t\treturn this.variable_configs().filter((vc) => {\n\t\t\treturn vc.name() == name;\n\t\t})[0];\n\t}\n\tstatic create_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('position', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t\t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t\t\tprefix: 'vec3 transformed = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('normal', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\tprefix: 'vec3 objectNormal = ',\n\t\t\t\t// post_lines: ['#ifdef USE_TANGENT', 'vec3 objectTangent = vec3( tangent.xyz );', '#endif'],\n\t\t\t}),\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('uv', {\n\t\t\t\t// default_from_attribute: true,\n\t\t\t\tprefix: 'vUv = ',\n\t\t\t\tif: GlobalsGeometryHandler.IF_RULE.uv,\n\t\t\t}),\n\t\t];\n\t}\n\tcreate_variable_configs(): VariableConfig[] {\n\t\treturn BaseGlShaderAssembler.create_variable_configs();\n\t}\n\tprotected _reset_variable_configs() {\n\t\tthis._variable_configs = undefined;\n\t\tthis.variable_configs();\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.shader_config(shader_name)?.input_names() || [];\n\t}\n\n\t// time dependency\n\tprotected _reset_uniforms_time_dependency() {\n\t\tthis._uniforms_time_dependent = false;\n\t}\n\tset_uniforms_time_dependent() {\n\t\tthis._uniforms_time_dependent = true;\n\t}\n\tuniforms_time_dependent(): boolean {\n\t\treturn this._uniforms_time_dependent;\n\t}\n\t// resolution dependency\n\tprotected _reset_resolution_dependency() {\n\t\tthis._resolution_dependent = false;\n\t}\n\tset_resolution_dependent() {\n\t\tthis._resolution_dependent = true;\n\t}\n\tresolution_dependent(): boolean {\n\t\treturn this._resolution_dependent;\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName): string[] | undefined {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\n\tprivate _replace_template(template: string, shader_name: ShaderName) {\n\t\tconst function_declaration = this.builder_lines(shader_name, LineType.FUNCTION_DECLARATION);\n\t\tconst define = this.builder_lines(shader_name, LineType.DEFINE);\n\t\t// let all_define = function_declaration.concat(define);\n\t\tconst body = this.builder_lines(shader_name, LineType.BODY);\n\n\t\tlet template_lines = template.split('\\n');\n\t\t// const scene = this._gl_parent_node.scene;\n\t\tconst new_lines = [\n\t\t\t// `#define FPS ${ThreeToGl.float(scene.time_controller.fps)}`,\n\t\t\t// `#define TIME_INCREMENT (1.0/${ThreeToGl.float(scene.time_controller.fps)})`,\n\t\t\t// `#define FRAME_RANGE_START ${ThreeToGl.float(scene.time_controller.frame_range[0])}`,\n\t\t\t// `#define FRAME_RANGE_END ${ThreeToGl.float(scene.time_controller.frame_range[1])}`,\n\t\t];\n\n\t\tconst line_before_define = this.insert_define_after(shader_name);\n\t\tconst line_before_body = this.insert_body_after(shader_name);\n\t\tconst lines_to_remove = this.lines_to_remove(shader_name);\n\t\tlet line_before_define_found = false;\n\t\tlet line_before_body_found = false;\n\n\t\tfor (let template_line of template_lines) {\n\t\t\tif (line_before_define_found == true) {\n\t\t\t\tif (function_declaration) {\n\t\t\t\t\tthis._insert_lines(new_lines, function_declaration);\n\t\t\t\t}\n\t\t\t\tif (define) {\n\t\t\t\t\tthis._insert_lines(new_lines, define);\n\t\t\t\t}\n\t\t\t\tline_before_define_found = false;\n\t\t\t}\n\t\t\tif (line_before_body_found == true) {\n\t\t\t\t// this._insert_default_body_declarations(new_lines, shader_name)\n\t\t\t\tif (body) {\n\t\t\t\t\tthis._insert_lines(new_lines, body);\n\t\t\t\t}\n\t\t\t\tline_before_body_found = false;\n\t\t\t}\n\n\t\t\tlet line_remove_required = false;\n\t\t\tif (lines_to_remove) {\n\t\t\t\tfor (let line_to_remove of lines_to_remove) {\n\t\t\t\t\tif (template_line.indexOf(line_to_remove) >= 0) {\n\t\t\t\t\t\tline_remove_required = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line_remove_required) {\n\t\t\t\tnew_lines.push(template_line);\n\t\t\t} else {\n\t\t\t\tnew_lines.push('// removed:');\n\t\t\t\tnew_lines.push(`//${template_line}`);\n\t\t\t}\n\n\t\t\tif (line_before_define && template_line.indexOf(line_before_define) >= 0) {\n\t\t\t\tline_before_define_found = true;\n\t\t\t}\n\t\t\tif (line_before_body && template_line.indexOf(line_before_body) >= 0) {\n\t\t\t\tline_before_body_found = true;\n\t\t\t}\n\n\t\t\t// if(template_line.indexOf('// INSERT DEFINE') >= 0){\n\t\t\t// } else {\n\t\t\t// \tif(template_line.indexOf('// INSERT BODY') >= 0){\n\t\t\t// \t\tif(body.length > 0){\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t\tbody.forEach(body_line=>{\n\t\t\t// \t\t\t\tnew_lines.push(body_line)\n\t\t\t// \t\t\t})\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\tif(template_line.indexOf('// TO REMOVE') < 0){\n\t\t\t// \t\t\tnew_lines.push(template_line)\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\tthis._lines.set(shader_name, new_lines);\n\t}\n\n\t// protected _insert_default_body_declarations(new_lines, shader_name){\n\t// \tnew_lines.push('float POLY_roughness = 1.0;')\n\t// }\n\n\tprivate _insert_lines(new_lines: string[], lines_to_add: string[]) {\n\t\tif (lines_to_add.length > 0) {\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\n\t\t\tfor (let line_to_add of lines_to_add) {\n\t\t\t\tnew_lines.push(line_to_add);\n\t\t\t}\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync get_custom_materials(): Promise<Map<CustomMaterialName, ShaderMaterial>> {\n\t\treturn new Map<CustomMaterialName, ShaderMaterial>();\n\t}\n\n\t// protected expand_shader(shader_string: string) {\n\t// \tfunction parseIncludes(string: string) {\n\t// \t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\t// \t\tfunction replace(match: string, include: string) {\n\t// \t\t\tvar replace = ShaderChunk[include];\n\n\t// \t\t\tif (replace === undefined) {\n\t// \t\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t// \t\t\t}\n\n\t// \t\t\treturn parseIncludes(replace);\n\t// \t\t}\n\n\t// \t\treturn string.replace(pattern, replace);\n\t// \t}\n\t// \treturn parseIncludes(shader_string);\n\t// }\n\n\t//\n\t//\n\t// GLTF EXPORT\n\t//\n\t//\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material{\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial\n\t// \tconst options = {}\n\t// \tthis._match_uniform('color', options, material, 'diffuse')\n\t// \tthis._match_uniform('map', options, material)\n\t// \tthis._match_uniform('envMap', options, material)\n\t// \tthis._match_uniform('envMapIntensity', options, material)\n\t// \tthis._match_uniform('metalness', options, material)\n\t// \tthis._match_uniform('roughness', options, material)\n\t// \tconst gltf_material = new gltf_constructor(options)\n\t// \treturn gltf_material\n\t// }\n\t// static _match_uniform(name: string, options: object, material: ShaderMaterial, uniform_name?: string) {\n\t// \tuniform_name = uniform_name || name;\n\t// \toptions[name] = material.uniforms[uniform_name].value;\n\t// }\n}\n","import {BaseMatNodeType} from '../_Base';\n\nexport class BaseController {\n\tconstructor(protected node: BaseMatNodeType) {}\n\tadd_params() {}\n\n\tupdate() {}\n\n\tget material() {\n\t\treturn this.node.material;\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {PolyScene} from '../../engine/scene/PolyScene';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\nexport interface MaterialWithUniforms extends Material {\n\tuniforms: IUniforms;\n}\n\nenum CustomMaterialName {\n\tcustomDistanceMaterial = 'customDistanceMaterial',\n\tcustomDepthMaterial = 'customDepthMaterial',\n\tcustomDepthDOFMaterial = 'customDepthDOFMaterial',\n}\nexport interface ObjectWithCustomMaterials extends Mesh {\n\t// customDistanceMaterial?: Material;\n\t// customDepthMaterial?: Material;\n\tcustomDepthDOFMaterial?: Material;\n}\nexport interface ShaderMaterialWithCustomMaterials extends ShaderMaterial {\n\tcustom_materials: {\n\t\t[key in CustomMaterialName]?: ShaderMaterial;\n\t};\n}\nexport interface MaterialWithSkinning extends Material {\n\tskinning: boolean;\n\tmorphTargets: boolean;\n}\n\nexport class CoreMaterial {\n\tstatic node(scene: PolyScene, material: Material) {\n\t\treturn scene.node(material.name);\n\t}\n\n\tstatic clone(src_material: Material | Material[]) {\n\t\tif (lodash_isArray(src_material)) {\n\t\t\treturn src_material.map((material) => {\n\t\t\t\treturn this.clone_single(material);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.clone_single(src_material);\n\t\t}\n\t}\n\n\tstatic clone_single(src_material: Material) {\n\t\tconst material = src_material.clone();\n\t\t// linewidth doesn't seem cloned correctly for ShaderMaterial\n\t\t(material as LineBasicMaterial).linewidth = (src_material as LineBasicMaterial).linewidth;\n\n\t\treturn material;\n\t}\n\n\tstatic apply_custom_materials(object: Object3D, material: Material) {\n\t\tconst material_with_custom = material as ShaderMaterialWithCustomMaterials;\n\t\tif (material_with_custom.custom_materials) {\n\t\t\tfor (let name of Object.keys(material_with_custom.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\t// http://blog.edankwan.com/post/three-js-advanced-tips-shadow\n\t\t\t\tconst custom_material = material_with_custom.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\t(object as ObjectWithCustomMaterials)[mat_name] = custom_material;\n\t\t\t\t\tcustom_material.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// object.material = material.custom_materials.customDepthDOFMaterial\n\t\t\t// object.material = material.custom_materials.customDepthMaterial\n\t\t\t// object.material = material.custom_materials.customDistanceMaterial\n\t\t}\n\t}\n\tstatic assign_custom_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name].value = uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic init_custom_material_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name] = custom_material.uniforms[uniform_name] || uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","import {TypedNode} from '../_Base';\nimport {EventContainer} from '../../containers/Event';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nexport class TypedEventNode<K extends NodeParamsConfig> extends TypedNode<'EVENT', BaseEventNodeType, K> {\n\tcontainer_controller: TypedContainerController<EventContainer> = new TypedContainerController<EventContainer>(\n\t\tthis,\n\t\tEventContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.EVENT;\n\t}\n\n\tprivate _eval_all_params_on_dirty_bound = this._eval_all_params_on_dirty.bind(this);\n\tinitialize_base_node() {\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false\n\t\t// });\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.add_post_dirty_hook('_eval_all_params_on_dirty', this._eval_all_params_on_dirty_bound);\n\t}\n\n\t// ensures that event nodes are cooked when scene is loaded\n\t_eval_all_params_on_dirty() {\n\t\tthis.params.eval_all();\n\t}\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n}\n\nexport type BaseEventNodeType = TypedEventNode<any>;\nexport class BaseEventNodeClass extends TypedEventNode<any> {}\n","import lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isBoolean from 'lodash/isBoolean';\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamEvent} from '../poly/ParamEvent';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\n// interface NumericParamVisitor extends TypedParamVisitor {\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\nexport abstract class TypedNumericParam<T extends ParamType> extends TypedParam<T> {\n\t// private _raw_input: ParamInitValuesTypeMap[T] | undefined;\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\t// accepts_visitor(visitor: NumericParamVisitor): any {\n\t// \treturn visitor.visit_numeric_param(this);\n\t// }\n\t// init_expression() {\n\t// \tif (this.is_value_expression(this._default_value)) {\n\t// \t\treturn this.set_expression(this._default_value)\n\t// \t}\n\t// }\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (lodash_isArray(raw_input)) {\n\t\t\treturn raw_input[0] as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input;\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tconst converted = this.convert(this._raw_input);\n\t\tif (converted != null) {\n\t\t\tif (this._expression_controller) {\n\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t}\n\t\t\tif (converted != this._value) {\n\t\t\t\tthis._update_value(converted);\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (lodash_isString(this._raw_input)) {\n\t\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`param input is invalid (${this.full_path()})`);\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(\n\t\t\t\t\t`expression error: \"${this.expression_controller.expression}\" (${this.expression_controller.error_message})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tif (this.states.error.active) {\n\t\t\t\t\t\tthis.states.error.clear();\n\t\t\t\t\t}\n\t\t\t\t\tthis._update_value(converted);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`expression returns an invalid type (${expression_result}) (${this.expression_controller.expression})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate _update_value(new_value: ParamValuesTypeMap[T]) {\n\t\tthis._value = new_value;\n\t\tif (this.parent_param) {\n\t\t\tthis.parent_param.set_value_from_components();\n\t\t}\n\t\tthis.options.execute_callback();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\tthis.remove_dirty_state();\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\nimport {TypedParam} from './_Base';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport abstract class TypedMultipleParam<T extends ParamType> extends TypedParam<T> {\n\tprivate _components_contructor = FloatParam;\n\tprotected _components!: FloatParam[];\n\tget components() {\n\t\treturn this._components;\n\t}\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default() {\n\t\tfor (let c of this.components) {\n\t\t\tif (!c.is_default) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._components.map((c) => c.raw_input) as ParamInitValueSerializedTypeMap[T];\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\n\tinit_components() {\n\t\tif (this._components != null) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = 0;\n\t\tthis._components = new Array(this.component_names.length);\n\t\tfor (let component_name of this.component_names) {\n\t\t\tconst component = new this._components_contructor(this.scene); //, `${this.name}${name}`);\n\t\t\tlet default_val;\n\t\t\tif (lodash_isArray(this._default_value)) {\n\t\t\t\tdefault_val = this._default_value[index];\n\t\t\t} else {\n\t\t\t\tdefault_val = (this._default_value as any)[component_name];\n\t\t\t}\n\t\t\tcomponent.options.copy(this.options);\n\t\t\tcomponent.set_init_value(default_val);\n\n\t\t\t// component.set_scene(this.scene);\n\t\t\tcomponent.set_name(`${this.name}${component_name}`);\n\t\t\tcomponent.set_parent_param(this);\n\n\t\t\tthis.add_graph_input(component);\n\t\t\t// component.initialize();\n\t\t\tthis._components[index] = component;\n\t\t\tindex++;\n\t\t}\n\t\t// this.compute();\n\t}\n\n\tprotected async process_computation(): Promise<void> {\n\t\tawait this.compute_components();\n\t\tthis.set_value_from_components();\n\t}\n\tset_value_from_components() {}\n\t// set_raw_input_from_components() {}\n\n\thas_expression() {\n\t\tfor (let c of this.components) {\n\t\t\tif (c.expression_controller?.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async compute_components() {\n\t\tconst components = this.components;\n\t\t// const component_evaluation_states = lodash_map(components, ()=> false);\n\t\t// const expected_values_count = components.length;\n\t\t// const component_values = [];\n\t\t// let component;\n\t\t// return lodash_each(this.components(), (component, index)=> {\n\t\tconst promises = [];\n\t\tfor (let c of components) {\n\t\t\tif (c.is_dirty) {\n\t\t\t\tpromises.push(c.compute()); //component_value=> {\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\t// component_values[index] = component_value;\n\t\t// component_evaluation_states[index] = true;\n\t\t// const evaluated_values_count = lodash_compact(component_evaluation_states).length;\n\t\t// check if all components have been evaluated succesfully\n\t\t// if (evaluated_values_count === expected_values_count) {\n\t\tthis.remove_dirty_state();\n\t\t// return component_values;\n\t\t// }\n\t\t// });\n\t\t// }\n\t}\n\tprotected _prefilter_invalid_raw_input(raw_input: any): ParamInitValuesTypeMap[T] {\n\t\tif (!lodash_isArray(raw_input)) {\n\t\t\tconst number_or_string = raw_input as number | string;\n\t\t\tconst raw_input_wrapped_in_array: StringOrNumber[] = this.components.map(() => number_or_string);\n\t\t\treturn raw_input_wrapped_in_array as ParamInitValuesTypeMap[T];\n\t\t} else {\n\t\t\treturn raw_input as ParamInitValuesTypeMap[T];\n\t\t}\n\t}\n\n\tprotected process_raw_input() {\n\t\tconst cooker = this.scene.cooker;\n\t\tcooker.block();\n\t\tconst components = this.components;\n\t\tfor (let c of components) {\n\t\t\tc.emit_controller.block_parent_emit();\n\t\t}\n\n\t\t// if (lodash_isArray(values)) {\n\t\tconst value = this._raw_input;\n\t\tif (lodash_isArray(value)) {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tcomponents[i].set((value as any)[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tconst component_name = this.component_names[i];\n\t\t\t\tcomponents[i].set((value as any)[component_name]);\n\t\t\t}\n\t\t}\n\t\t// } else {\n\t\t// \tconst component_names = this.component_names()\n\t\t// \tfor (let i = 0; i < components.length; i++) {\n\t\t// \t\tcomponents[i].set(values[component_names[i]])\n\t\t// \t}\n\t\t// }\n\n\t\tcooker.unblock();\n\n\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\tcomponents[i].emit_controller.unblock_parent_emit();\n\t\t}\n\t\t// this.emit(ParamEvent.UPDATED);\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n}\n\n// export class BaseMultipleParam extends TypedMultipleParam<Vector> {}\n","export class TypeAssert {\n\tstatic unreachable(x: never): never {\n\t\tthrow new Error(\"Didn't expect to get here\");\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class ShaderConfig {\n\tconstructor(private _name: ShaderName, private _input_names: string[], private _dependencies: ShaderName[]) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tinput_names() {\n\t\treturn this._input_names;\n\t}\n\tdependencies() {\n\t\treturn this._dependencies;\n\t}\n}\n","interface VariableConfigOptions {\n\t// asset refererences\n\tdefault_from_attribute?: boolean;\n\tdefault?: string;\n\tif?: string;\n\tprefix?: string;\n\tsuffix?: string;\n}\n\nexport class VariableConfig {\n\tconstructor(private _name: string, private _options: VariableConfigOptions = {}) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tdefault_from_attribute() {\n\t\treturn this._options['default_from_attribute'] || false;\n\t}\n\tdefault() {\n\t\treturn this._options['default'];\n\t}\n\tif_condition() {\n\t\treturn this._options['if'];\n\t}\n\t// required_definitions(){\n\t// \treturn this._options['required_definitions']\n\t// }\n\tprefix() {\n\t\treturn this._options['prefix'] || '';\n\t}\n\tsuffix() {\n\t\treturn this._options['suffix'] || '';\n\t}\n}\n","import {ParamConfig} from '../configs/ParamConfig';\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\n\nexport class ParamConfigsController {\n\tprivate _param_configs: ParamConfig<ParamType>[] = [];\n\n\treset() {\n\t\tthis._param_configs = [];\n\t}\n\n\tpush(param_config: ParamConfig<ParamType>) {\n\t\tthis._param_configs.push(param_config);\n\t}\n\tcreate_and_push<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\tuniform_name: string\n\t) {\n\t\tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t\tthis._param_configs.push(param_config);\n\t}\n\n\tget list(): Readonly<ParamConfig<ParamType>[]> {\n\t\treturn this._param_configs;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Color} from 'three/src/math/Color';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tuse_vertex_colors = ParamConfig.BOOLEAN(0);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tpublic color!: Color;\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tconst new_vertex_color = pv.use_vertex_colors; // ? VertexColors : NoColors;\n\t\tif (new_vertex_color != material.vertexColors) {\n\t\t\tmaterial.vertexColors = new_vertex_color;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// color = ParamConfig.COLOR([1, 1, 1]);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tvertexColors!: boolean;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n\tuniforms!: IUniforms;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\n\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\n\t\tif (material.uniforms.opacity) {\n\t\t\tmaterial.uniforms.opacity.value = pv.opacity;\n\t\t}\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tmaterial.depthTest = true;\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n}\n","import {TypedMatNode} from './_Base';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShaderAssemblerMaterial} from '../gl/code/assemblers/materials/_BaseMaterial';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ShaderMaterialWithCustomMaterials} from '../../../core/geometry/Material';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport abstract class TypedBuilderMatNode<\n\tA extends ShaderAssemblerMaterial,\n\tK extends NodeParamsConfig\n> extends TypedMatNode<ShaderMaterialWithCustomMaterials, K> {\n\tprotected _assembler_controller: GlAssemblerController<A> | undefined;\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t}\n\n\t//\n\t//\n\t// MATERIAL\n\t//\n\t//\n\tcreate_material() {\n\t\treturn this.assembler_controller.assembler.create_material() as ShaderMaterialWithCustomMaterials;\n\t}\n\t//\n\t//\n\t// ASSEMBLER\n\t//\n\t//\n\tget assembler_controller() {\n\t\treturn (this._assembler_controller = this._assembler_controller || this._create_assembler_controller());\n\t}\n\tprotected abstract _create_assembler_controller(): GlAssemblerController<A>;\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// COMPILATION\n\t//\n\t//\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprotected async _compile() {\n\t\tif (this.material) {\n\t\t\tawait this.assembler_controller.assembler.compile_material(this.material);\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\t}\n}\n\nexport type BaseBuilderMatNodeType = TypedBuilderMatNode<ShaderAssemblerMaterial, NodeParamsConfig>;\n","import {TypedLightObjNode} from './_BaseLight';\nimport {Light} from 'three/src/lights/Light';\n// import {CoreTransform} from '../../../core/Transform';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TransformController, TransformedParamConfig} from './utils/TransformController';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\n// import {Transformed} from './Concerns/Transformed';\nclass TransformedObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\n\nexport abstract class BaseLightTransformedObjNode<\n\tL extends Light,\n\tK extends TransformedObjParamConfig\n> extends TypedLightObjNode<L, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../../utils/params/ParamsConfig';\nimport {TypedObjNode} from '../../_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {Light} from 'three/src/lights/Light';\nimport {FlagsControllerD} from '../../../utils/FlagsController';\nexport function BaseLightHelperParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\nclass BaseLightHelperParamsConfig extends BaseLightHelperParamConfig(NodeParamsConfig) {}\nexport abstract class BaseLightHelperObjNode<L extends Light> extends TypedObjNode<Group, BaseLightHelperParamsConfig> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\t// public readonly helper: BaseLightHelper<L> | undefined;\n\tabstract get light(): L;\n}\n\nexport abstract class BaseLightHelper<L extends Light, N extends BaseLightHelperObjNode<L>> {\n\tprotected _object = new Mesh();\n\tprotected _material = new MeshBasicMaterial({wireframe: true, fog: false});\n\tconstructor(protected node: N, private _name: string) {}\n\n\tbuild() {\n\t\tthis._object.name = this._name;\n\t\tthis.build_helper();\n\t}\n\tprotected abstract build_helper(): void;\n\tget object() {\n\t\treturn this._object;\n\t}\n\n\tabstract update(): void;\n}\n","import {Light} from 'three/src/lights/Light';\nimport {BaseLightHelper, BaseLightHelperObjNode} from './helpers/_BaseLightHelper';\n\n// interface Helper<L extends Light> extends BaseLightHelper<L> {\n// \tdispose: () => void;\n// \tupdate: () => void;\n// }\nexport interface HelperConstructor<L extends Light> {\n\tnew (node: BaseLightHelperObjNode<L>, name: string): BaseLightHelper<L, BaseLightHelperObjNode<L>>;\n}\n\nexport class HelperController<L extends Light> {\n\tprivate _helper: BaseLightHelper<L, BaseLightHelperObjNode<L>> | undefined;\n\tconstructor(\n\t\tprivate node: BaseLightHelperObjNode<L>,\n\t\tprivate _helper_constructor: HelperConstructor<L>,\n\t\tprivate _name: string\n\t) {}\n\n\tinitialize_node() {\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.update_helper_attachment();\n\t\t});\n\t}\n\n\tprivate update_helper_attachment() {\n\t\tif (this.node.flags.display.active) {\n\t\t\tconst object = this.helper?.object; // use this.helper to create if needed\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.add(object);\n\t\t\t\tthis._helper?.update();\n\t\t\t}\n\t\t} else {\n\t\t\tconst object = this._helper?.object; // use this._helper to NOT create if not already existing\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.remove(object);\n\t\t\t}\n\t\t}\n\t}\n\tget helper() {\n\t\tif (this.node.flags.display.active) {\n\t\t\treturn (this._helper = this._helper || this._create_helper());\n\t\t}\n\t}\n\tget visible() {\n\t\treturn this.node.flags.display.active && this.node.pv.show_helper;\n\t}\n\n\tprivate _create_helper(): BaseLightHelper<L, BaseLightHelperObjNode<L>> {\n\t\tconst helper = new this._helper_constructor(this.node, this._name);\n\t\thelper.build();\n\t\tthis.node.light.add(helper.object);\n\t\treturn helper;\n\t}\n\n\tupdate() {\n\t\tif (this.visible) {\n\t\t\tif (!this._helper) {\n\t\t\t\tthis._helper = this._create_helper();\n\t\t\t}\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = true;\n\t\t\t\tthis._helper.update();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = false;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass BaseManagerObjParamsConfig extends NodeParamsConfig {}\nexport class BaseManagerObjNode extends TypedObjNode<Group, BaseManagerObjParamsConfig> {\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\t// _init_manager(options = {}) {\n\t// \t// this._init_hierarchy_children_owner(options['children'] || {});\n\t// \t// this.flags.add_display({\n\t// \t// \thas_display_flag: false,\n\t// \t// \tmultiple_display_flags_allowed: true,\n\t// \t// });\n\t// \t// this.set_inputs_count_to_zero();\n\t// \t// this._init_outputs({has_outputs: false});\n\t// }\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {BaseObjNodeType} from '../_Base';\n// import {ParamType} from '../../../poly/ParamType';\n\nconst PARAM_NAME = 'layer';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function LayerParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tlayer = ParamConfig.INTEGER(0, {\n\t\t\trange: [0, 31],\n\t\t\trange_locked: [true, true],\n\t\t});\n\t};\n}\n\nexport class LayersController {\n\tconstructor(private node: BaseObjNodeType) {}\n\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.INTEGER, PARAM_NAME, 0, {\n\t// \t\trange: [0, 31],\n\t// \t\trange_locked: [true, true],\n\t// \t});\n\t// }\n\n\tupdate() {\n\t\tconst object = this.node.object;\n\t\t// const affected_objects = [object];\n\t\t// if (object.cloned_cameras != null) {\n\t\t// \tlodash_each(object.cloned_cameras, cloned_camera=> {\n\t\t// \t\taffected_objects.push(cloned_camera);\n\t\t// \t});\n\t\t// }\n\n\t\t// affected_objects.forEach((affected_object)=> {\n\t\tobject.layers.set(0);\n\t\tobject.layers.enable(this.node.params.integer(PARAM_NAME));\n\t\t// });\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ACESFilmicToneMapping, sRGBEncoding} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport lodash_range from 'lodash/range';\n// import {BaseParam} from '../../../../params/_Base';\nimport {BooleanParam} from '../../../../params/Boolean';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {BasePostProcessNodeType} from '../../../post/_Base';\nimport {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {EffectComposer} from '../../../../../../modules/three/examples/jsm/postprocessing/EffectComposer';\nimport {RenderPass} from '../../../../../../modules/three/examples/jsm/postprocessing/RenderPass';\nimport {Pass} from '../../../../../../modules/three/examples/jsm/postprocessing/Pass';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {POLY} from '../../../../Poly';\n\ninterface DisposablePass extends Pass {\n\tdispose: () => void;\n}\n\nfunction boolean_param_options(index: number) {\n\treturn {\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t},\n\t};\n}\nfunction operator_path_param_options(index: number) {\n\treturn {\n\t\tnode_selection: {context: NodeContext.POST},\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t\t[`use_post_process_node${index}`]: 1,\n\t\t},\n\t};\n}\n\nimport {ParamConfig} from '../../../utils/params/ParamsConfig';\nexport function CameraPostProcessParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tpost_process = ParamConfig.FOLDER();\n\n\t\tdo_post_process = ParamConfig.BOOLEAN(0);\n\t\tuse_post_process_node0 = ParamConfig.BOOLEAN(0, boolean_param_options(0));\n\t\tpost_process_node0 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(0));\n\t\tuse_post_process_node1 = ParamConfig.BOOLEAN(0, boolean_param_options(1));\n\t\tpost_process_node1 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(1));\n\t\tuse_post_process_node2 = ParamConfig.BOOLEAN(0, boolean_param_options(2));\n\t\tpost_process_node2 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(2));\n\t\tuse_post_process_node3 = ParamConfig.BOOLEAN(0, boolean_param_options(3));\n\t\tpost_process_node3 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(3));\n\t};\n}\n\nexport class PostProcessController {\n\t// private _param_do_post_process: boolean;\n\t// private _param_do_sao: boolean;\n\tprivate _renderers_by_canvas_id: Dictionary<WebGLRenderer> = {};\n\tprivate _composers_by_canvas_id: Dictionary<EffectComposer> = {};\n\tprivate _resolution_by_canvas_id: Dictionary<Vector2> = {};\n\tprivate _composers_set_in_progress_by_canvas_id: Dictionary<boolean> = {};\n\tprivate _fetch_post_process_nodes_in_progress: boolean = false;\n\t// private _render_passes: any[] = []\n\tprivate _post_process_nodes: BasePostProcessNodeType[] = [];\n\n\tprivate _post_process_use_node_path_params: BooleanParam[] = [];\n\tprivate _post_process_node_path_params: OperatorPathParam[] = [];\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\t// private _prev_t = 0;\n\trender(canvas: HTMLCanvasElement, size: Vector2, aspect: number) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tif (this.node.pv.do_post_process) {\n\t\t\t\tconst composer = this.composer(canvas);\n\t\t\t\tif (composer) {\n\t\t\t\t\tcomposer.setSize(size.x, size.y);\n\t\t\t\t\tcomposer.render();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.setup_for_aspect_ratio(aspect);\n\t\t\t\t// const cur_t = performance.now();\n\t\t\t\t// const delta = cur_t - this._prev_t;\n\t\t\t\t// this._prev_t = cur_t;\n\t\t\t\t// console.log(cur_t, delta);\n\t\t\t\trenderer.render(this.node.scene.default_scene, this.node.object);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderer(canvas: HTMLCanvasElement) {\n\t\treturn this._renderers_by_canvas_id[canvas.id];\n\t}\n\n\tcreate_renderer(canvas: HTMLCanvasElement, size: Vector2): WebGLRenderer {\n\t\tconst gl = POLY.renderers_controller.rendering_context(canvas);\n\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: true,\n\t\t\tcontext: gl,\n\t\t});\n\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.physicallyCorrectLights = true; // https://discourse.threejs.org/t/three-js-white-is-too-bright/11873/3\n\n\t\t// TODO: find a way to have those accessible via params\n\t\trenderer.toneMapping = ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 1;\n\t\trenderer.outputEncoding = sRGBEncoding;\n\n\t\t// https://github.com/mrdoob/js/issues/15493\n\t\t// This below is an attempt to fix env map not being loaded in firefox, but that doesn't work.\n\t\t// Since the threejs example (https://threejs.org/examples/?q=exr#webgl_materials_envmaps_exr) also only works in chrome, not in firefox, I assume this is a firefox+linux bug\n\t\t// console.log(renderer.extensions)\n\t\t// renderer.extensions.get( 'EXT_color_buffer_float' );\n\n\t\t// attempt to have particle systems work in firefox on mobile\n\t\t// (current solution is to have the node SOP/particlesSystemGPU force webgl2 to be used)\n\t\t// renderer.extensions.get( 'WEBGL_color_buffer_float' );\n\t\t// renderer.extensions.get( 'WEBGL_draw_buffers' );\n\n\t\tPOLY.renderers_controller.register_renderer(renderer);\n\t\tthis._renderers_by_canvas_id[canvas.id] = renderer;\n\t\tthis.set_renderer_size(canvas, size);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\n\t\treturn renderer;\n\t}\n\tdelete_renderer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tPOLY.renderers_controller.deregister_renderer(renderer);\n\t\t}\n\t}\n\tset_renderer_size(canvas: HTMLCanvasElement, size: Vector2) {\n\t\tthis._resolution_by_canvas_id[canvas.id] = this._resolution_by_canvas_id[canvas.id] || new Vector2();\n\t\tthis._resolution_by_canvas_id[canvas.id].copy(size);\n\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.x, size.y);\n\t\t}\n\t\tconst composer = this.composer(canvas);\n\t\tif (composer) {\n\t\t\tcomposer.setSize(size.x, size.y);\n\t\t}\n\t}\n\n\tprivate composer(canvas: HTMLCanvasElement): EffectComposer {\n\t\treturn (this._composers_by_canvas_id[canvas.id] =\n\t\t\tthis._composers_by_canvas_id[canvas.id] || this._create_composer(canvas));\n\t}\n\n\tprivate _create_composer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\t// const parameters = {\n\t\t\t// \tminFilter: LinearFilter,\n\t\t\t// \tmagFilter: LinearFilter,\n\t\t\t// \tformat: RGBAFormat,\n\t\t\t// \tstencilBuffer: true\n\t\t\t// }\n\t\t\t// const renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, parameters );\n\t\t\tconst composer = new EffectComposer(renderer); //, renderTarget );\n\t\t\t// to achieve better antialiasing\n\t\t\t// while using post:\n\t\t\t// composer.setPixelRatio( window.devicePixelRatio*2 )\n\t\t\tcomposer.setPixelRatio(window.devicePixelRatio * 2);\n\t\t\tthis.set_composer_passes(canvas.id, composer, renderer);\n\n\t\t\treturn composer;\n\t\t} /*else {\n\t\t\tconsole.warn(this._renderers_by_canvas_id)\n\t\t\tthrow \"failed to create composer, no renderer ready\"\n\t\t}*/\n\t}\n\n\tasync update_composer_passes() {\n\t\tif (this.node.pv.do_post_process) {\n\t\t\tthis._post_process_nodes = [];\n\t\t\tif (this._fetch_post_process_nodes_in_progress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = true;\n\n\t\t\tif (this.composer_passes_nodes_changed()) {\n\t\t\t\tthis._post_process_nodes = [];\n\n\t\t\t\tfor (let i of lodash_range(4)) {\n\t\t\t\t\tconst toggle_param = this._post_process_use_node_path_params[i];\n\t\t\t\t\t// const use_node = await toggle_param.eval_p()\n\t\t\t\t\tconst use_node = toggle_param.value;\n\t\t\t\t\tif (use_node) {\n\t\t\t\t\t\tconst param = this._post_process_node_path_params[i];\n\t\t\t\t\t\tconst post_process_node = param.found_node() as BasePostProcessNodeType;\n\t\t\t\t\t\tif (post_process_node) {\n\t\t\t\t\t\t\tawait post_process_node.request_container();\n\t\t\t\t\t\t\t// const render_pass = container.render_pass()\n\t\t\t\t\t\t\t// this._render_passes.push(render_pass)\n\t\t\t\t\t\t\tthis._post_process_nodes.push(post_process_node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set_composers_passes();\n\t\t\t\t// this._previous_post_process_nodes_paths = this.composer_passes_nodes_paths()\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = false;\n\t\t} else {\n\t\t\tthis._post_process_nodes = [];\n\t\t}\n\t}\n\n\tprivate set_composers_passes() {\n\t\tconst ids = Object.keys(this._composers_by_canvas_id);\n\n\t\tfor (let id of ids) {\n\t\t\tconst composer = this._composers_by_canvas_id[id];\n\t\t\tconst renderer = this._renderers_by_canvas_id[id];\n\t\t\tif (composer) {\n\t\t\t\tthis.set_composer_passes(id, composer, renderer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_composer_passes(id: string, composer: EffectComposer, renderer: WebGLRenderer) {\n\t\tconst set_in_progress = this._composers_set_in_progress_by_canvas_id[id];\n\t\tif (set_in_progress) {\n\t\t\treturn;\n\t\t}\n\t\tthis._composers_set_in_progress_by_canvas_id[id] = true;\n\n\t\tthis.clear_render_passes(composer);\n\n\t\tconst render_scene_pass = new RenderPass(this.node.scene.default_scene, this.node.object);\n\t\trender_scene_pass.clearAlpha = 0;\n\t\tcomposer.addPass(render_scene_pass);\n\n\t\tfor (let post_process_node of this._post_process_nodes) {\n\t\t\tpost_process_node.apply_to_composer(\n\t\t\t\tcomposer,\n\t\t\t\tthis.node.object,\n\t\t\t\tthis._resolution_by_canvas_id[id],\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\n\t\tdelete this._composers_set_in_progress_by_canvas_id[id];\n\t}\n\n\tprivate clear_render_passes(composer: EffectComposer) {\n\t\tlet render_pass: Pass | undefined;\n\t\twhile ((render_pass = composer.passes.pop())) {\n\t\t\tif (render_pass) {\n\t\t\t\tconst disposable_pass: DisposablePass = render_pass as DisposablePass;\n\t\t\t\tif (typeof disposable_pass.dispose === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdisposable_pass.dispose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this._render_passes = []\n\t\tcomposer.passes = [];\n\t}\n\n\tprivate composer_passes_nodes_changed(): boolean {\n\t\treturn true;\n\t\t// I have to evaluate the nodes anyway, in case they changed\n\t\t// unless I can create a method that can store if one of those nodes are the ones that\n\t\t// made this current node dirty\n\t}\n\n\t// add_params() {\n\t// \t// this.node.within_param_folder('post_process', () => {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'do_post_process', 0);\n\n\t// \tlodash_range(4).forEach((i) => {\n\t// \t\tconst toggle_param = this.node.add_param(ParamType.BOOLEAN, `use_post_process_node${i + 1}`, 0, {\n\t// \t\t\tvisible_if: {do_post_process: 1},\n\t// \t\t});\n\n\t// \t\tif (toggle_param) {\n\t// \t\t\tconst visible_options = {\n\t// \t\t\t\tdo_post_process: 1,\n\t// \t\t\t\t[toggle_param.name]: 1,\n\t// \t\t\t};\n\t// \t\t\tconst node_path_options = {\n\t// \t\t\t\tnode_selection: {context: NodeContext.POST},\n\t// \t\t\t\tvisible_if: visible_options,\n\t// \t\t\t};\n\t// \t\t\tconst param = this.node.add_param(\n\t// \t\t\t\tParamType.OPERATOR_PATH,\n\t// \t\t\t\t`post_process_node${i + 1}`,\n\t// \t\t\t\t'',\n\t// \t\t\t\tnode_path_options\n\t// \t\t\t);\n\t// \t\t\tif (param) {\n\t// \t\t\t\tthis._post_process_use_node_path_params.push(toggle_param);\n\t// \t\t\t\tthis._post_process_node_path_params.push(param);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// \t// });\n\t// }\n}\n","import {BaseNodeType} from '../_Base';\nimport lodash_isNaN from 'lodash/isNaN';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\ntype Callback = () => void;\n\nexport class NameController {\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _on_set_name_hooks: Callback[] | undefined;\n\tprivate _on_set_full_path_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'node_name_controller');\n\t\t// this._graph_node.set_scene(this.node.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tstatic base_name(node: BaseNodeType) {\n\t\tlet base = node.type; //CoreString.class_name_to_type(this.self.type())\n\t\tconst last_char = base[base.length - 1];\n\t\tif (!lodash_isNaN(parseInt(last_char))) {\n\t\t\tbase += '_';\n\t\t}\n\t\treturn `${base}1`;\n\t}\n\n\trequest_name_to_parent(new_name: string) {\n\t\tconst parent = this.node.parent;\n\t\tif (parent && parent.children_allowed() && parent.children_controller) {\n\t\t\tparent.children_controller.set_child_name(this.node, new_name);\n\t\t} else {\n\t\t\tconsole.warn('request_name_to_parent failed, no parent found');\n\t\t}\n\t}\n\tset_name(new_name: string) {\n\t\tif (new_name != this.node.name) {\n\t\t\tthis.request_name_to_parent(new_name);\n\t\t}\n\t}\n\tupdate_name_from_parent(new_name: string) {\n\t\tthis.node._set_core_name(new_name);\n\t\tthis.post_set_name();\n\t\tthis.post_set_full_path();\n\t\tif (this.node.children_allowed()) {\n\t\t\tthis.node.children_controller?.children().forEach((child_node) => {\n\t\t\t\tchild_node.name_controller.post_set_full_path(); // TODO: typescript: replace post_set_full_path with execute_on_update_full_path_hooks or on_update_full_path\n\t\t\t});\n\t\t}\n\n\t\tif (this.node.lifecycle.creation_completed) {\n\t\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(this.node);\n\t\t\tthis.node.scene.expressions_controller.regenerate_referring_expressions(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAME_UPDATED);\n\t}\n\n\tadd_post_set_name_hook(hook: Callback) {\n\t\tthis._on_set_name_hooks = this._on_set_name_hooks || [];\n\t\tthis._on_set_name_hooks.push(hook);\n\t}\n\tadd_post_set_full_path_hook(hook: Callback) {\n\t\tthis._on_set_full_path_hooks = this._on_set_full_path_hooks || [];\n\t\tthis._on_set_full_path_hooks.push(hook);\n\t}\n\n\tpost_set_name() {\n\t\tif (this._on_set_name_hooks) {\n\t\t\tfor (let hook of this._on_set_name_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tpost_set_full_path() {\n\t\tif (this._on_set_full_path_hooks) {\n\t\t\tfor (let hook of this._on_set_full_path_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport lodash_compact from 'lodash/compact';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isEqual from 'lodash/isEqual';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamEvent} from '../../poly/ParamEvent';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nconst ALWAYS_REFERENCE_ASSET_OPTION = 'always_reference_asset';\nconst CALLBACK_OPTION = 'callback';\nconst CALLBACK_STRING_OPTION = 'callback_string';\n// const COLOR_OPTION = 'color';\nconst COOK_OPTION = 'cook';\nconst DESKTOP_BROWSE_OPTION = 'desktop_browse';\nconst FILE_TYPE_OPTION = 'file_type';\n// const EXPRESSION_ONLY_OPTION = 'expression_only';\nconst EXPRESSION = 'expression';\nconst FOR_ENTITIES = 'for_entities';\nconst LEVEL = 'level';\nconst MENU = 'menu';\nconst ENTRIES = 'entries';\n// const TYPE = 'type';\n// const RADIO = 'radio';\nconst MULTILINE_OPTION = 'multiline';\nconst LANGUAGE_OPTION = 'language';\nconst NODE_SELECTION = 'node_selection';\nconst NODE_SELECTION_CONTEXT = 'context';\nconst DEPENDENT_ON_FOUND_NODE = 'dependent_on_found_node';\nconst RANGE_OPTION = 'range';\nconst RANGE_LOCKED_OPTION = 'range_locked';\nconst STEP_OPTION = 'step';\nconst SPARE_OPTION = 'spare';\nconst TEXTURE_OPTION = 'texture';\nconst ENV_OPTION = 'env';\nconst HIDDEN_OPTION = 'hidden';\nconst LABEL_OPTION = 'label';\nconst FIELD_OPTION = 'field';\nconst VISIBLE_IF_OPTION = 'visible_if';\n\nexport interface ParamOptionsMenuEntry {\n\tname: string;\n\tvalue: number;\n}\nexport enum StringParamLanguage {\n\t// JAVASCRIPT = 'javascript',\n\tTYPESCRIPT = 'typescript',\n\t// GLSL = 'glsl',\n}\n\ninterface BaseParamOptions {\n\t// cook\n\tcook?: boolean;\n\t// spare\n\tspare?: boolean;\n\t// visible\n\thidden?: boolean;\n\tlabel?: boolean;\n\tfield?: boolean;\n\tvisible_if?: Dictionary<number | boolean>;\n}\ninterface MenuParamOptions {\n\tmenu?: {\n\t\t// type: 'radio';\n\t\tentries: ParamOptionsMenuEntry[];\n\t};\n}\ninterface ExpressionParamOptions {\n\texpression?: {\n\t\tfor_entities?: boolean;\n\t};\n}\n\ninterface NumberParamOptions extends BaseParamOptions {\n\trange?: Number2;\n\trange_locked?: Boolean2;\n\tstep?: number;\n}\ninterface AssetParamOptions {\n\talways_reference_asset?: boolean;\n}\ninterface DesktopParamOptions {\n\tdesktop_browse?: Dictionary<string>;\n}\ninterface CallbackParamOptions {\n\tcallback?: (node: BaseNodeType, param: BaseParamType) => any;\n\tcallback_string?: string;\n}\n\n// actual param options\nexport interface BooleanParamOptions\n\textends BaseParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface ButtonParamOptions extends BaseParamOptions, CallbackParamOptions {}\nexport interface ColorParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface FloatParamOptions\n\textends NumberParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface FolderParamOptions extends BaseParamOptions {\n\tlevel?: number;\n}\nexport interface IntegerParamOptions extends NumberParamOptions, MenuParamOptions, CallbackParamOptions {}\nexport interface OperatorPathParamOptions extends BaseParamOptions, DesktopParamOptions, CallbackParamOptions {\n\tnode_selection?: {\n\t\tcontext?: NodeContext;\n\t};\n\tdependent_on_found_node?: boolean;\n}\nexport interface RampParamOptions extends BaseParamOptions {}\nexport interface SeparatorParamOptions extends BaseParamOptions {}\nexport interface StringParamOptions\n\textends BaseParamOptions,\n\t\tAssetParamOptions,\n\t\tDesktopParamOptions,\n\t\tExpressionParamOptions {\n\tmultiline?: boolean;\n\tlanguage?: StringParamLanguage;\n}\nexport interface Vector2ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector3ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector4ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\n\nexport interface ParamOptions\n\textends NumberParamOptions,\n\t\tFolderParamOptions,\n\t\tExpressionParamOptions,\n\t\tButtonParamOptions,\n\t\tDesktopParamOptions,\n\t\tMenuParamOptions,\n\t\tStringParamOptions,\n\t\tOperatorPathParamOptions {\n\t// asset refererences\n\t// always_reference_asset?: boolean;\n\t// callback\n\t// callback?: (node: BaseNodeType, param: BaseParamType) => any;\n\t// callback_string?: string;\n\t// color\n\t// color?: [number, number, number] | string;\n\t// cook\n\t// cook?: boolean;\n\t// desktop\n\t// desktop_browse?: Dictionary<string>;\n\t// expression\n\t// expression_only?: boolean;\n\t// expression?: {\n\t// \tfor_entities?: boolean;\n\t// };\n\t// folder\n\t// level?:number\n\t// menu\n\t// menu?: {\n\t// \t// type: 'radio';\n\t// \tentries: ParamOptionsMenuEntry[];\n\t// };\n\t// multiline\n\t// multiline?: boolean;\n\t// node selection\n\t// node_selection?: {\n\t// \tcontext?: NodeContext;\n\t// };\n\t// dependent_on_found_node?: boolean;\n\t// spare\n\t// spare?: boolean;\n\t// texture\n\ttexture?: {\n\t\tenv?: boolean;\n\t};\n\t// visible\n\t// hidden?: boolean;\n\t// label?: boolean;\n\t// field?: boolean;\n\t// visible_if?: Dictionary<number | boolean>;\n}\n\nexport class OptionsController {\n\tprivate _programatic_visible_state: boolean = true;\n\tprivate _options!: ParamOptions;\n\tprivate _default_options!: ParamOptions;\n\tconstructor(private _param: BaseParamType) {\n\t\t// this._options = lodash_cloneDeep(this._default_options);\n\t}\n\n\tset(options: ParamOptions) {\n\t\tthis._default_options = options;\n\t\tthis._options = lodash_cloneDeep(this._default_options);\n\t}\n\tcopy(options_controller: OptionsController) {\n\t\tthis._default_options = lodash_cloneDeep(options_controller.default);\n\t\tthis._options = lodash_cloneDeep(options_controller.current);\n\t}\n\tset_option(name: keyof ParamOptions, value: any) {\n\t\treturn Object.assign(this._options, name, value);\n\t}\n\tget param() {\n\t\treturn this._param;\n\t}\n\tget node(): BaseNodeType {\n\t\treturn this._param.node;\n\t}\n\tget default() {\n\t\treturn this._default_options;\n\t}\n\tget current() {\n\t\treturn this._options;\n\t}\n\n\t// utils\n\tget has_options_overridden(): boolean {\n\t\treturn !lodash_isEqual(this._options, this._default_options);\n\t}\n\tget overridden_options(): ParamOptions {\n\t\tconst overriden: ParamOptions = {};\n\t\tconst option_names = Object.keys(this._options) as Array<keyof ParamOptions>;\n\t\tfor (let option_name of option_names) {\n\t\t\tif (!lodash_isEqual(this._options[option_name], this._default_options[option_name])) {\n\t\t\t\tObject.assign(overriden, option_name, lodash_cloneDeep(this._options[option_name]));\n\t\t\t}\n\t\t}\n\t\treturn overriden;\n\t}\n\tget overridden_option_names(): Array<keyof ParamOptions> {\n\t\treturn Object.keys(this.overridden_options) as Array<keyof ParamOptions>;\n\t}\n\n\t// referenced assets\n\tget always_reference_asset(): boolean {\n\t\treturn this._options[ALWAYS_REFERENCE_ASSET_OPTION] || false;\n\t}\n\n\t// callback\n\thas_callback() {\n\t\treturn this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n\t}\n\n\texecute_callback() {\n\t\t// we only allow execution when scene is loaded\n\t\t// to avoid errors such as an operator_path param\n\t\t// executing its callback before the node it points to is created\n\t\tif (!(this.node && this.node.scene.loading_controller.loaded)) {\n\t\t\treturn;\n\t\t}\n\t\tconst callback = this.get_callback();\n\t\tif (callback != null) {\n\t\t\tif (this.node && !this.node.cook_controller.is_cooking) {\n\t\t\t\tcallback(this.node, this.param);\n\t\t\t}\n\t\t}\n\t}\n\tprivate get_callback() {\n\t\tif (this.has_callback()) {\n\t\t\treturn (this._options[CALLBACK_OPTION] =\n\t\t\t\tthis._options[CALLBACK_OPTION] || this.create_callback_from_string());\n\t\t}\n\t}\n\tprivate create_callback_from_string() {\n\t\tconst callback_string = this._options[CALLBACK_STRING_OPTION];\n\t\tif (callback_string) {\n\t\t\tconst callback_function = new Function('node', 'scene', 'window', 'location', callback_string);\n\t\t\treturn () => {\n\t\t\t\tcallback_function(this.node, this.node.scene, null, null);\n\t\t\t};\n\t\t}\n\t}\n\n\t// color\n\t// color() {\n\t// \treturn this._options[COLOR_OPTION];\n\t// }\n\n\t// cook\n\tmakes_node_dirty_when_dirty() {\n\t\tlet cook_options;\n\n\t\t// false as the dirty state will go through the parent param\n\t\tif (this.param.parent_param != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet value = true;\n\t\tif ((cook_options = this._options[COOK_OPTION]) != null) {\n\t\t\tvalue = cook_options;\n\t\t}\n\t\treturn value;\n\t}\n\n\t// desktop\n\tget desktop_browse_option() {\n\t\treturn this._options[DESKTOP_BROWSE_OPTION];\n\t}\n\tget desktop_browse_allowed(): boolean {\n\t\treturn this.desktop_browse_option != null;\n\t}\n\tdesktop_browse_file_type(): string | null {\n\t\tif (this.desktop_browse_option) {\n\t\t\treturn this.desktop_browse_option[FILE_TYPE_OPTION];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// expression\n\t// get displays_expression_only() {\n\t// \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n\t// }\n\tget is_expression_for_entities(): boolean {\n\t\tconst expr_option = this._options[EXPRESSION];\n\t\tif (expr_option) {\n\t\t\treturn expr_option[FOR_ENTITIES] || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// folder\n\tget level() {\n\t\treturn this._options[LEVEL] || 0;\n\t}\n\n\t// menu\n\tget has_menu() {\n\t\treturn this.menu_options != null;\n\t}\n\n\tprivate get menu_options() {\n\t\treturn this._options[MENU];\n\t}\n\t// private get menu_type() {\n\t// \tif(this.menu_options){\n\t// \t\treturn this.menu_options[TYPE];\n\t// \t}\n\t// }\n\n\tget menu_entries() {\n\t\tif (this.menu_options) {\n\t\t\treturn this.menu_options[ENTRIES];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tget has_menu_radio() {\n\t\treturn this.has_menu; //&& this.menu_options[TYPE] === RADIO;\n\t}\n\n\t// multiline\n\tget is_multiline(): boolean {\n\t\treturn this._options[MULTILINE_OPTION] === true;\n\t}\n\tget language(): StringParamLanguage | undefined {\n\t\treturn this._options[LANGUAGE_OPTION];\n\t}\n\tget is_code(): boolean {\n\t\treturn this.language != null;\n\t}\n\n\t// node selection\n\tget node_selection_options() {\n\t\treturn this._options[NODE_SELECTION];\n\t}\n\tget node_selection_context() {\n\t\tif (this.node_selection_options) {\n\t\t\treturn this.node_selection_options[NODE_SELECTION_CONTEXT];\n\t\t}\n\t}\n\n\tdependent_on_found_node() {\n\t\tif (DEPENDENT_ON_FOUND_NODE in this._options) {\n\t\t\treturn this._options[DEPENDENT_ON_FOUND_NODE];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// range\n\tget range(): Number2 {\n\t\t// cannot force range easily, as values are not necessarily from 0 to N\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [0, this.self.menu_entries().length-1 ]\n\t\t// } else {\n\t\treturn this._options[RANGE_OPTION] || [0, 1];\n\t\t// }\n\t}\n\tget step(): number {\n\t\treturn this._options[STEP_OPTION] || 0.01;\n\t}\n\n\tprivate range_locked(): Boolean2 {\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [true, true]\n\t\t// } else {\n\t\treturn this._options[RANGE_LOCKED_OPTION] || [false, false];\n\t\t// }\n\t}\n\n\tensure_in_range(value: number): number {\n\t\tconst range = this.range;\n\n\t\tif (value >= range[0] && value <= range[1]) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tif (value < range[0]) {\n\t\t\t\treturn this.range_locked()[0] === true ? range[0] : value;\n\t\t\t} else {\n\t\t\t\treturn this.range_locked()[1] === true ? range[1] : value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// spare\n\tget is_spare(): boolean {\n\t\treturn this._options[SPARE_OPTION] || false;\n\t}\n\n\t// texture\n\tget texture_options() {\n\t\treturn this._options[TEXTURE_OPTION];\n\t}\n\ttexture_as_env(): boolean {\n\t\tconst texture_options = this.texture_options;\n\t\tif (texture_options != null) {\n\t\t\treturn texture_options[ENV_OPTION] === true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// visible\n\tget is_hidden(): boolean {\n\t\treturn this._options[HIDDEN_OPTION] === true || this._programatic_visible_state === false;\n\t}\n\tget is_visible(): boolean {\n\t\treturn !this.is_hidden;\n\t}\n\tset_visible_state(state: boolean) {\n\t\tthis._options[HIDDEN_OPTION] = !state;\n\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t}\n\n\tget is_label_hidden(): boolean {\n\t\tconst type = this.param.type;\n\t\treturn (\n\t\t\tthis._options[LABEL_OPTION] === false ||\n\t\t\ttype === ParamType.BUTTON ||\n\t\t\ttype === ParamType.SEPARATOR ||\n\t\t\t(type === ParamType.BOOLEAN && this.is_field_hidden())\n\t\t);\n\t}\n\tis_field_hidden(): boolean {\n\t\treturn this._options[FIELD_OPTION] === false;\n\t}\n\n\t// programatic visibility\n\tui_data_depends_on_other_params(): boolean {\n\t\treturn VISIBLE_IF_OPTION in this._options;\n\t}\n\tvisibility_predecessors() {\n\t\tconst predecessor_names = Object.keys(this._options[VISIBLE_IF_OPTION] || {});\n\t\tconst node = this.param.node;\n\t\treturn lodash_compact(\n\t\t\tpredecessor_names.map((name) => {\n\t\t\t\tconst param = node.params.get(name);\n\t\t\t\tif (param) {\n\t\t\t\t\treturn param;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`param ${name} not found as visibility condition for ${this.param.name} in node ${this.param.node.type}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate _update_visibility_and_remove_dirty_bound = this.update_visibility_and_remove_dirty.bind(this);\n\tprivate _visibility_graph_node: CoreGraphNode | undefined;\n\tprivate _ui_data_dependency_set: boolean = false;\n\tset_ui_data_dependency() {\n\t\tif (this._ui_data_dependency_set) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ui_data_dependency_set = true;\n\t\tconst predecessors = this.visibility_predecessors();\n\t\tif (predecessors.length > 0) {\n\t\t\tthis._visibility_graph_node = new CoreGraphNode(this.param.scene, 'param_visibility');\n\t\t\tfor (let predecessor of predecessors) {\n\t\t\t\tthis._visibility_graph_node.add_graph_input(predecessor);\n\t\t\t}\n\t\t\tthis._visibility_graph_node.add_post_dirty_hook(\n\t\t\t\t'_update_visibility_and_remove_dirty',\n\t\t\t\tthis._update_visibility_and_remove_dirty_bound\n\t\t\t);\n\t\t}\n\t}\n\tprivate update_visibility_and_remove_dirty() {\n\t\tthis.update_visibility();\n\t\tthis.param.remove_dirty_state();\n\t}\n\n\tasync update_visibility() {\n\t\tconst options = this._options[VISIBLE_IF_OPTION];\n\t\tif (options) {\n\t\t\tconst params = this.visibility_predecessors();\n\t\t\tconst promises = params.map((p) => p.compute());\n\t\t\tthis._programatic_visible_state = true;\n\t\t\tawait Promise.all(promises);\n\t\t\tfor (let param of params) {\n\t\t\t\tconst expected_val = options[param.name];\n\t\t\t\tconst val = param.value;\n\t\t\t\tif (expected_val != val) {\n\t\t\t\t\tthis._programatic_visible_state = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport lodash_isString from 'lodash/isString';\n// import {ParsedTree} from './ParsedTree'\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesController} from './MissingReferencesController'\nexport const VARIABLE_PREFIX = '$';\n\nexport abstract class BaseTraverser {\n\t// private _parsed_tree: ParsedTree\n\tpublic _error_message: string | undefined;\n\n\tconstructor(public param: BaseParamType) {}\n\n\tprotected clear_error() {\n\t\tthis._error_message = undefined;\n\t}\n\tprotected set_error(message: string) {\n\t\tthis._error_message = this._error_message || message;\n\t\t// throw this.error_message\n\t}\n\tprotected _set_error_from_error_bound = this._set_error_from_error.bind(this);\n\tprivate _set_error_from_error(error: Error | string) {\n\t\tif (lodash_isString(error)) {\n\t\t\tthis._error_message = error;\n\t\t} else {\n\t\t\tthis._error_message = error.message;\n\t\t}\n\t}\n\tget is_errored(): boolean {\n\t\treturn this._error_message != null;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\treset() {\n\t\tthis._error_message = undefined;\n\t}\n\n\ttraverse_node(node: jsep.Expression): string | undefined {\n\t\tconst method_name = `traverse_${node.type}`;\n\t\tconst method = (this as any)[method_name];\n\t\tif (method) {\n\t\t\treturn (this as any)[method_name](node);\n\t\t} else {\n\t\t\tthis.set_error(`expression unknown node type: ${node.type}`);\n\t\t}\n\t}\n\n\tprotected abstract traverse_CallExpression(node: jsep.CallExpression): string | undefined; //{\n\n\t// const method_arguments = node.arguments.map((arg)=>{\n\t// \treturn this.traverse_node(arg)\n\t// })\n\t// const method_name = node.callee.name\n\n\t// // literal construct (if...)\n\t// const literal_contruct = this[`traverse_literal_construct_${node.type}`] //LITERAL_CONSTRUCT[method_name]\n\t// if(literal_contruct){\n\t// \treturn literal_contruct.bind(this)(method_arguments)\n\t// }\n\n\t// // direct expressions (Math.floor, Math.sin...)\n\t// const arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`\n\t// const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name]\n\t// if(direct_function_name){\n\t// \treturn `${direct_function_name}(${arguments_joined})`\n\t// }\n\n\t// // indirect methods (points_count, asset...)\n\t// const indirect_method = INDIRECT_EXPRESSION_METHODS[method_name]\n\t// if(indirect_method){\n\t// \tthis._create_method_and_dependencies(node, method_name, arguments_joined)\n\t// \treturn `await methods[${this.method_index}].process_arguments(${arguments_joined})`\n\t// }\n\n\t// this.set_error(`unknown method: ${method_name}`)\n\t//}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_ConditionalExpression(node: jsep.ConditionalExpression): string {\n\t\treturn `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n\t\t\tnode.alternate\n\t\t)})`;\n\t}\n\n\t// currently only used for string expressions such as\n\t// pt_`@ptnum+1`\n\tprotected traverse_Compound(node: jsep.Compound): string {\n\t\tconst args = node.body;\n\t\tlet traversed_args = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg_node = args[i];\n\t\t\tif (arg_node.type == 'Identifier') {\n\t\t\t\tif ((arg_node as jsep.Identifier).name[0] == VARIABLE_PREFIX) {\n\t\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t\t} else {\n\t\t\t\t\ttraversed_args.push(`'${(arg_node as jsep.Identifier).name}'`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t}\n\t\t}\n\t\treturn traversed_args.join(' + ');\n\t\t// this may work for things like  [1,-2,3][$F%2]\n\t\t// but can be confusing for more operators like [1,-2,3][$F%2][2]\n\n\t\t// console.log(node)\n\t\t// return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(node.alternate)})`\n\t\t// this.set_error(\"unrecognised expression Compound\")\n\t\t// return \"\"\n\t}\n\tprotected abstract traverse_UnaryExpression(node: jsep.UnaryExpression): string; //{\n\n\t// if (node.operator === ATTRIBUTE_PREFIX) {\n\t// \tconst attrib_name = this.traverse_node(node.argument);\n\t// \treturn `param.entity_attrib_value(${QUOTE}${attrib_name}${QUOTE})`\n\t// } else {\n\t// \treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t// }\n\t//}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected abstract traverse_Identifier(node: jsep.Identifier): string | undefined; //{\n\t// const identifier_first_char = node.name[0]\n\t// if(identifier_first_char == VARIABLE_PREFIX){\n\t// \tconst identifier_name_without_dollar_sign = node.name.substr(1)\n\n\t// \t// globals constants: Math.PI or Math.E\n\t// \tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign]\n\t// \tif(direct_constant_name){\n\t// \t\treturn direct_constant_name\n\t// \t}\n\n\t// \t// scene or node globals: $F, $CH, $OS\n\t// \tconst method_name = `Identifier_${identifier_name_without_dollar_sign}_body`\n\t// \tconst method = this[method_name]\n\t// \tif(method){\n\t// \t\treturn this[method_name]()\n\t// \t}else{\n\t// \t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t// \t}\n\n\t// } else {\n\t// \treturn node.name // @ptnum will call this method and return \"ptnum\"\n\t// }\n\t//}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\t// abstract Identifier_F_body(): string //{\n\t// this.dependencies.push(this.param.scene().context())\n\t// return `param.scene().frame()`\n\t//}\n\t// abstract Identifier_CH_body(): string //{\n\t// return `${QUOTE}${this.param.name()}${QUOTE}`\n\t//}\n\t// TODO:\n\t// '$CEX': '_eval_identifier_as_expression_centroid_x',\n\t// '$CEY': '_eval_identifier_as_expression_centroid_y',\n\t// '$CEZ': '_eval_identifier_as_expression_centroid_z',\n\t// '$CH': '_eval_identifier_as_param_name',\n\t// '$OS': '_eval_identifier_as_node_name',\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\t// protected _create_method_and_dependencies(node: jsep.CallExpression, method_name: string, arguments_joined: string) {\n\t// \tconst method_constructor = Method[method_name]\n\t// \tconst method = new method_constructor(this.param)\n\t// \tthis.method_index += 1\n\t// \tthis.methods[this.method_index] = method\n\n\t// \tconst dependency_arguments_function = new Function(`return [${arguments_joined}]`)\n\t// \tconst dependency_arguments = dependency_arguments_function()\n\n\t// \tconst reference_search_result = method.find_dependencies(dependency_arguments)\n\t// \treference_search_result.found_graph_nodes.forEach((graph_node)=>{\n\t// \t\tthis.dependencies.push(graph_node)\n\t// \t})\n\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(node)\n\t// \t})\n\t// }\n}\n","// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\nexport const AsyncFunction = Object.getPrototypeOf(async function () {}).constructor;\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedGlNode, BaseGlNodeType} from './_Base';\n// import {BaseNodeGlMathFunctionArg1} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {BaseNamedConnectionPointType} from '../utils/connections/NamedConnectionPoint';\nimport {ParamType} from '../../poly/ParamType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nexport const ConnectionPointTypesAvailableForAttribute = [\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttributeGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypesAvailableForAttribute.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\nconst ParamsConfig = new AttributeGlParamsConfig();\n\nexport class AttributeGlNode extends TypedGlNode<AttributeGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attribute';\n\t}\n\tstatic readonly INPUT_NAME = 'export';\n\tstatic readonly OUTPUT_NAME = 'val';\n\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile_if_is_exporting.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [\n\t\t\tConnectionPointTypesAvailableForAttribute[this.pv.type],\n\t\t]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\tcreate_params() {\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.add_param(ParamType.BOOLEAN, 'export_when_connected', 0);\n\t\t}\n\t}\n\t// inputless_params_names(): string[] {\n\t// \treturn ['type'];\n\t// }\n\n\tget input_name() {\n\t\treturn AttributeGlNode.INPUT_NAME;\n\t}\n\tget output_name() {\n\t\treturn AttributeGlNode.OUTPUT_NAME;\n\t}\n\n\t// private create_inputs_from_params() {\n\t// \tif (this.material_node.allow_attribute_exports) {\n\t// \t\t// this.set_named_inputs([new TypedConnectionFloat(AttributeGlNode.input_name())]);\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(INPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t// \t\t]);\n\t// \t\t// this._init_graph_node_inputs();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_attribute(\n\t\t\tthis,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// }\n\t}\n\n\t// update_output_type(constructor) {\n\t// \tconst named_output = new constructor(Attribute.output_name());\n\t// \tthis.set_named_outputs([named_output]);\n\t// }\n\t// update_input_type(constructor) {\n\t// \tconst named_input = new constructor(Attribute.input_name());\n\t// \tthis.set_named_inputs([named_input]);\n\t// \tthis._init_graph_node_inputs();\n\t// }\n\n\tget attribute_name(): string {\n\t\treturn lodash_trim(this.pv.name);\n\t}\n\tgl_type(): ConnectionPointType {\n\t\treturn this.io.outputs.named_output_connection_points[0].type;\n\t}\n\t//\n\t//\n\t// Utility methods for SOP/ParticlesSystemGPU and Assembler/Particles\n\t//\n\t//\n\tconnected_input_node(): BaseGlNodeType | null {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t// }\n\t}\n\tconnected_input_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\treturn this.io.inputs.named_input_connection_point(AttributeGlNode.INPUT_NAME);\n\t}\n\t// connected_input(): NamedConnection {\n\t// \tconst connection_point = this.connected_input_connection_point();\n\t// \tif (connection_point) {\n\t// \t\treturn this.io.inputs.named_inputs().filter((ni) => ni.name() == Attribute.input_name())[0];\n\t// \t}\n\t// }\n\toutput_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.outputs.named_output_connection_points_by_name(this.input_name);\n\t\t// }\n\t}\n\t// connected_output(): NamedConnection {\n\t// \tconst output = this.named_output(0);\n\t// \tif (output) {\n\t// \t\treturn output; //this.named_inputs().filter(ni=>ni.name() == Attribute.input_name())[0]\n\t// \t}\n\t// }\n\tget is_importing(): boolean {\n\t\treturn this.io.outputs.used_output_names().length > 0; // TODO: typescript - ensure that we can check that the connected outputs are part of the nodes retrived by the node traverser\n\t}\n\tget is_exporting(): boolean {\n\t\tif (this.pv.export_when_connected) {\n\t\t\tconst input_node = this.io.inputs.named_input(AttributeGlNode.INPUT_NAME);\n\t\t\treturn input_node != null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tprivate _set_mat_to_recompile_if_is_exporting() {\n\t\tif (this.is_exporting) {\n\t\t\tthis._set_mat_to_recompile();\n\t\t}\n\t}\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// SIGNATURE\n\t//\n\t//\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_input_and_output_types();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// \tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t// }\n\t// private update_input_and_output_types() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this.output_name, ConnectionPointTypesAvailableForAttribute[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// \tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(this.input_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t// \t\t]);\n\t// \t}\n\t// }\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {BaseParamType} from '../../../params/_Base';\n\nimport {NodeJsonExporter} from './Node';\n// import {BaseNodeObjJsonExporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonExporter} from './node/Subnetwork';\n\nimport {ParamJsonExporter} from './Param';\n// import {ParamMultipleJsonExporter} from './param/Multiple';\nimport {ParamNumericJsonExporter} from './param/Numeric';\nimport {ParamOperatorPathJsonExporter} from './param/OperatorPath';\nimport {ParamStringJsonExporter} from './param/String';\nimport {ParamRampJsonExporter} from './param/Ramp';\n// import {TypedObjNode} from '../../../nodes/obj/_Base';\n// import {TypedMultipleParam} from '../../../params/_Multiple';\nimport {TypedNumericParam} from '../../../params/_Numeric';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {StringParam} from '../../../params/String';\nimport {RampParam} from '../../../params/Ramp';\n\nexport class JsonExportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonExporter(node);\n\t\t// }\n\t\treturn new NodeJsonExporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\t// if (param instanceof TypedMultipleParam) {\n\t\t// \treturn new ParamMultipleJsonExporter(param);\n\t\t// }\n\t\tif (param instanceof TypedNumericParam) {\n\t\t\treturn new ParamNumericJsonExporter(param);\n\t\t}\n\t\tif (param instanceof OperatorPathParam) {\n\t\t\treturn new ParamOperatorPathJsonExporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonExporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonExporter(param);\n\t\t}\n\t\treturn new ParamJsonExporter(param);\n\t}\n}\n","import {PolyScene} from '../../../scene/PolyScene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {CoreString} from '../../../../core/String';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from './Node';\nimport {JsonExportDispatcher} from './Dispatcher';\n\nexport interface SceneJsonExporterData {\n\tproperties?: {\n\t\tframe: number;\n\t\tframe_range: Number2;\n\t\tframe_range_locked: Boolean2;\n\t\t// fps: number;\n\t\tmaster_camera_node_path: string | null;\n\t};\n\troot?: NodeJsonExporterData;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneJsonExporter {\n\tprivate _data: SceneJsonExporterData = {};\n\tconstructor(private _scene: PolyScene) {}\n\n\tdata(): SceneJsonExporterData {\n\t\tthis._scene.nodes_controller.reset_node_context_signatures();\n\t\tconst root_exporter = JsonExportDispatcher.dispatch_node(this._scene.root);\n\t\tconst nodes_data = root_exporter.data();\n\t\tconst ui_data = root_exporter.ui_data();\n\n\t\tthis._data = {\n\t\t\t// __js_version: this._scene.js_version(),\n\t\t\tproperties: {\n\t\t\t\t// name: this._scene.name(), // this conflicts with saving the name from the admin page\n\t\t\t\tframe: this._scene.frame || 1,\n\t\t\t\tframe_range: this._scene.frame_range,\n\t\t\t\tframe_range_locked: this._scene.time_controller.frame_range_locked,\n\t\t\t\t// fps: this._scene.time_controller.fps,\n\t\t\t\tmaster_camera_node_path: this._scene.cameras_controller.master_camera_node_path,\n\t\t\t},\n\t\t\troot: nodes_data,\n\t\t\tui: ui_data,\n\t\t};\n\n\t\treturn this._data;\n\t}\n\n\tstatic sanitize_string(word: string): string {\n\t\tword = word.replace(/'/g, \"'\"); // escapes ' (used to be with 2 /, but now only one to have Ian's Mediation saved and loaded correctly - but is actually 2 in Code Exporter)\n\t\tword = CoreString.escape_line_breaks(word);\n\t\treturn word;\n\t}\n}\n","export enum LineType {\n\tFUNCTION_DECLARATION = 'function_declaration',\n\tDEFINE = 'define',\n\tBODY = 'body',\n}\n","import {AssemblerControllerNode} from '../Controller';\n\nexport class GlNodeFinder {\n\tstatic find_output_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('output');\n\t\treturn nodes;\n\t\t// if (nodes.length > 1) {\n\t\t// \tnode.states.error.set('only one output node allowed');\n\t\t// }\n\t\t// return nodes[0];\n\t}\n\tstatic find_attribute_export_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('attribute');\n\t\treturn nodes.filter((node) => {\n\t\t\t// do not use attributes that are used as an input, as export\n\t\t\t// return (node.used_output_names().length == 0) &&\n\t\t\treturn node.is_exporting;\n\t\t});\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedCameraControlsEventNode, CameraControls} from './_BaseCameraControls';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CameraOrbitEventParamsConfig extends NodeParamsConfig {\n\tallow_pan = ParamConfig.BOOLEAN(1);\n\tallow_rotate = ParamConfig.BOOLEAN(1);\n\tallow_zoom = ParamConfig.BOOLEAN(1);\n\ttdamping = ParamConfig.BOOLEAN(1);\n\tdamping = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {tdamping: true},\n\t});\n\tscreen_space_panning = ParamConfig.BOOLEAN(1);\n\trotate_speed = ParamConfig.FLOAT(0.5);\n\tmin_distance = ParamConfig.FLOAT(1, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tmax_distance = ParamConfig.FLOAT(50, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tpolar_angle_range = ParamConfig.VECTOR2([0, '$PI']);\n}\nconst ParamsConfig = new CameraOrbitEventParamsConfig();\n\nexport class CameraOrbitControlsEventNode extends TypedCameraControlsEventNode<CameraOrbitEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'camera_orbit_controls';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['controls/OrbitControls'];\n\t// }\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// const c = this.constructor as typeof CameraOrbitControlsEventNode;\n\t\t// const {OrbitControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\tconst controls = new OrbitControls(camera, element);\n\t\treturn controls;\n\t}\n\n\tsetup_controls(controls: OrbitControls) {\n\t\tcontrols.enablePan = this.pv.allow_pan;\n\t\tcontrols.enableRotate = this.pv.allow_rotate;\n\t\tcontrols.enableZoom = this.pv.allow_zoom;\n\n\t\tcontrols.enableDamping = this.pv.tdamping;\n\t\tcontrols.dampingFactor = this.pv.damping;\n\n\t\tcontrols.rotateSpeed = this.pv.rotate_speed;\n\n\t\tcontrols.screenSpacePanning = this.pv.screen_space_panning;\n\n\t\tcontrols.minDistance = this.pv.min_distance;\n\t\tcontrols.maxDistance = this.pv.max_distance;\n\n\t\tcontrols.minPolarAngle = this.pv.polar_angle_range.x;\n\t\tcontrols.maxPolarAngle = this.pv.polar_angle_range.y;\n\n\t\t// to prevent moving the camera when using the arrows to change frame\n\t\tcontrols.enableKeys = false;\n\t}\n\n\tset_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void {\n\t\tconst target = camera_node.params.vector3('target');\n\t\tcontrols.target.copy(target);\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {BaseMatNodeType} from '../_Base';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {BaseCopNodeType} from '../../cop/_Base';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\nimport {BooleanParam} from '../../../params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nimport {IUniforms} from '../../../../core/geometry/Material';\n\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.OPERATOR_PATH(FileCopNode.DEFAULT_NODE_PATH.UV, {visible_if: {use_map: 1}});\n\t};\n}\n// class TextureMapMaterial<T extends string> extends Material {\n// \t[T]!: Texture | null;\n// }\n// class TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\n// class TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n// \tcreate_material() {\n// \t\treturn new TextureMapMaterial();\n// \t}\n// }\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\n// type test = FilterFlags<MeshLambertMaterial, Texture|null>\n// type test2 = AllowedNames<MeshLambertMaterial, Texture|null>\n// type test3 = SubType<MeshLambertMaterial, Texture|null>\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\nexport function OperatorPathOptions(controller: typeof BaseTextureMapController, use_map_name: string) {\n\treturn {\n\t\tvisible_if: {[use_map_name]: 1},\n\t\tnode_selection: {context: NodeContext.COP},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\ntype TextureUpdateCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\ttexture: Texture\n) => void;\ntype TextureRemoveCallback<O extends Object> = (\n\tmaterial: Material,\n\tobject: O,\n\tmat_attrib_name: keyof SubType<O, Texture | null>\n) => void;\n\ntype CurrentMaterial = Material | ShaderMaterial;\n\nexport interface UpdateOptions {\n\tdirect_params?: boolean;\n\tuniforms?: boolean;\n\tdefine?: boolean;\n}\nexport class BaseTextureMapController extends BaseController {\n\tconstructor(protected node: BaseMatNodeType, protected _update_options: UpdateOptions) {\n\t\tsuper(node);\n\t\tif (this._update_options.define == null) {\n\t\t\tthis._update_options.define = true;\n\t\t}\n\t}\n\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: OperatorPathParam) {\n\t\tuse_map_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t\tpath_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\tstatic update(node: BaseNodeType) {}\n\n\tasync _update<M extends CurrentMaterial>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: string,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tif (this._update_options.uniforms) {\n\t\t\tconst shader_material = material as ShaderMaterial;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<IUniforms, Texture | null>;\n\t\t\tawait this._update_texture_on_uniforms(shader_material, attr_name, use_map_param, path_param);\n\t\t}\n\t\tif (this._update_options.direct_params) {\n\t\t\tconst mat = material as Material;\n\t\t\tconst attr_name = mat_attrib_name as keyof SubType<Material, Texture | null>;\n\t\t\tawait this._update_texture_on_material(mat, attr_name, use_map_param, path_param);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE UNIFORMS\n\t//\n\t//\n\tasync _update_texture_on_uniforms<O extends IUniform>(\n\t\tmaterial: ShaderMaterial,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial.uniforms,\n\t\t\tmat_attrib_name as never,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_uniforms.bind(this),\n\t\t\tthis._remove_texture_from_uniforms.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_uniforms<O extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = uniforms[mat_attrib_name] != null && uniforms[mat_attrib_name].value != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>uniforms[mat_attrib_name].value) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\tuniforms[mat_attrib_name].value = texture as any;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tmaterial.defines[define_name] = 1;\n\t\t\t}\n\t\t\tmaterial.defines['USE_UV'] = 1;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_uniforms<U extends IUniforms>(\n\t\tmaterial: Material,\n\t\tuniforms: U,\n\t\tmat_attrib_name: keyof SubType<U, Texture | null>\n\t) {\n\t\tif (uniforms[mat_attrib_name].value) {\n\t\t\tuniforms[mat_attrib_name].value = null;\n\t\t\tif (this._do_update_define()) {\n\t\t\t\tconst define_name = this._define_name(`${mat_attrib_name}`);\n\t\t\t\tdelete material.defines[define_name];\n\t\t\t}\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _define_name(mat_attrib_name: string): string {\n\t\treturn 'USE_' + mat_attrib_name.replace('_', '').toUpperCase();\n\t}\n\n\t//\n\t//\n\t// FOR CASES WHERE THE TEXTURE IS ON THE MATERIAL\n\t//\n\t//\n\tasync _update_texture_on_material<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\tthis._update_required_attribute(\n\t\t\tmaterial,\n\t\t\tmaterial,\n\t\t\tmat_attrib_name,\n\t\t\tuse_map_param,\n\t\t\tpath_param,\n\t\t\tthis._apply_texture_on_material.bind(this),\n\t\t\tthis._remove_texture_from_material.bind(this)\n\t\t);\n\t}\n\tprivate _apply_texture_on_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\ttexture: Texture\n\t) {\n\t\tconst has_texture = texture_owner[mat_attrib_name] != null;\n\t\tlet new_texture_is_different = false;\n\t\tif (has_texture) {\n\t\t\tconst current_texture: Texture = (<unknown>texture_owner[mat_attrib_name]) as Texture;\n\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\tnew_texture_is_different = true;\n\t\t\t}\n\t\t}\n\t\tif (!has_texture || new_texture_is_different) {\n\t\t\ttexture_owner[mat_attrib_name] = texture as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\tprivate _remove_texture_from_material<M extends Material>(\n\t\tmaterial: Material,\n\t\ttexture_owner: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>\n\t) {\n\t\tif (texture_owner[mat_attrib_name]) {\n\t\t\ttexture_owner[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// MAIN ALGO to decide if texture should be updated\n\t//\n\t//\n\tprivate async _update_required_attribute<O extends Object>(\n\t\tmaterial: Material,\n\t\ttexture_owner: O,\n\t\tmat_attrib_name: keyof SubType<O, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam,\n\t\tupdate_callback: TextureUpdateCallback<O>,\n\t\tremove_callback: TextureRemoveCallback<O>\n\t) {\n\t\tif (use_map_param.is_dirty) {\n\t\t\tawait use_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.is_dirty) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst found_node = path_param.found_node();\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t\t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t\t\t\t\tconst container = await texture_node.request_container();\n\t\t\t\t\tconst texture = container.texture();\n\n\t\t\t\t\tif (texture) {\n\t\t\t\t\t\tupdate_callback(material, texture_owner, mat_attrib_name, texture);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.node.states.error.set(`found node has no texture`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set(`found map node is not a COP node`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set(`could not find map node ${path_param.name} with path ${path_param.value}`);\n\t\t\t}\n\t\t}\n\t\t// this is not wrapped in an else clause after the \"if (use_map) {\"\n\t\t// as we should come here after any of the errors above, if any is triggered\n\t\tremove_callback(material, texture_owner, mat_attrib_name);\n\t}\n\n\tprivate _do_update_define(): boolean {\n\t\tif (this._update_options.define == null) {\n\t\t\treturn true;\n\t\t}\n\t\treturn this._update_options.define;\n\t}\n}\n","import {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderAssemblerCustomMeshDistance} from './CustomMeshDistance';\nimport {ShaderAssemblerCustomMeshDepth} from './CustomMeshDepth';\nimport {ShaderAssemblerCustomMeshDepthDOF} from './CustomMeshDepthDOF';\n\nconst ASSEMBLER_MAP: CustomAssemblerMap = new Map([\n\t// [CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance],\n\t// [CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth],\n\t// [CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF],\n]);\nASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF);\n\nexport abstract class ShaderAssemblerMesh extends ShaderAssemblerMaterial {\n\t// TODO: I've noticed a case where instances would not display when those shadow shaders were exported\n\t// But the objects display fine if those are not assigned\n\t// so it could be a bug at render time (not sure if my code, threejs or hardware)\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn ASSEMBLER_MAP;\n\t}\n}\n","import {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {Light} from 'three/src/lights/Light';\nimport {Color} from 'three/src/math/Color';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {Group} from 'three/src/objects/Group';\n\nexport abstract class TypedLightObjNode<L extends Light, K extends NodeParamsConfig> extends TypedObjNode<Group, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.LIGHT;\n\tprotected _color_with_intensity = new Color(0x00000);\n\tprotected _light!: L;\n\tget light() {\n\t\treturn this._light;\n\t}\n\tprotected abstract create_light(): L;\n\tprotected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis._light = this.create_light();\n\t\tthis.object.add(this._light);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis.update_light_attachment();\n\t\t});\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.used_in_scene) {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\tprivate update_light_attachment() {\n\t\tif (this.flags.display.active) {\n\t\t\tthis.object.add(this.light);\n\t\t\tthis._cook_main_without_inputs_when_dirty();\n\t\t} else {\n\t\t\tthis.object.remove(this.light);\n\t\t}\n\t}\n\n\t// create_params() {\n\t// \t// this.create_light_params();\n\t// \t// this.create_shadow_params_main();\n\t// }\n\n\tcreate_shadow_params_main() {\n\t\tif (this._light.shadow != null) {\n\t\t\treturn this.create_shadow_params();\n\t\t}\n\t}\n\n\tprotected create_light_params(): void {}\n\tprotected update_light_params(): void {}\n\n\tprotected create_shadow_params() {\n\t\treturn;\n\t\t// this.add_param('toggle', 'cast_shadows', 1);\n\t\t// shadow_options = {visible_if: {cast_shadows: 1}}\n\t\t// this.add_param( 'vector2', 'shadow_res', [1024, 1024], shadow_options );\n\t\t// this.add_param( 'float', 'shadow_near', 0.1, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_far', 100, shadow_options );\n\t\t// // this.add_param( 'float', 'shadow_far', 500 ) # same as param distance\n\t\t// this.add_param( 'float', 'shadow_bias', -0.0001, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_blur', 1, shadow_options );\n\t}\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tcook() {\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\tupdate_shadow_params() {\n\t\t// let object;\n\t\t// return;\n\t\t// if (((object = this.object()) != null) && (object.shadow != null)) {\n\t\t// \tobject.castShadow = this._param_cast_shadow;\n\t\t// \tobject.shadow.mapSize.width = this._param_shadow_res.x;\n\t\t// \tobject.shadow.mapSize.height = this._param_shadow_res.y;\n\t\t// \tobject.shadow.camera.near = this._param_shadow_near;\n\t\t// \tobject.shadow.camera.far = this._param_shadow_far;\n\t\t// \treturn object.shadow.bias = this._param_shadow_bias;\n\t\t// }\n\t}\n\n\tget color_with_intensity() {\n\t\tconst color = this.params.color('color');\n\t\tconst intensity = this.params.float('intensity');\n\t\tthis._color_with_intensity.copy(color).multiplyScalar(intensity);\n\t\treturn this._color_with_intensity;\n\t}\n\tget active(): boolean {\n\t\treturn this.flags.display.active;\n\t}\n}\n\nexport type BaseLightObjNodeType = TypedLightObjNode<Light, NodeParamsConfig>;\n// export class BaseLightObjNodeClass extends TypedLightObjNode<Light, NodeParamsConfig> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {Material} from 'three/src/materials/Material';\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Bone} from 'three/src/objects/Bone';\n\n// import {CoreConstant} from './Constant'\nimport {CoreGeometry} from './Geometry';\nimport {GroupString} from './Group';\nimport {CoreAttribute} from './Attribute';\nimport {CoreConstant} from './Constant';\nimport {CorePoint} from './Point';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from './Material';\nimport {CoreString} from '../String';\n\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreEntity} from './Entity';\nconst PTNUM = 'ptnum';\nconst NAME_ATTR = 'name';\nconst ATTRIBUTES = 'attributes';\n\ninterface Object3DWithAnimations extends Object3D {\n\tanimations: AnimationClip[];\n}\ninterface MaterialWithColor extends Material {\n\tcolor: Color;\n}\n// interface SkinnedMeshWithisSkinnedMesh extends SkinnedMesh {\n// \treadonly isSkinnedMesh: boolean;\n// }\n\nexport class CoreObject extends CoreEntity {\n\tconstructor(private _object: Object3D, index: number) {\n\t\tsuper(index);\n\t\tif (this._object.userData[ATTRIBUTES] == null) {\n\t\t\tthis._object.userData[ATTRIBUTES] = {};\n\t\t}\n\t}\n\n\t// set_index(i: number) {\n\t// \tthis._index = i;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tgeometry() {\n\t\treturn (this._object as Mesh).geometry as BufferGeometry;\n\t}\n\tcore_geometry(): CoreGeometry {\n\t\tconst geo = this.geometry();\n\t\treturn new CoreGeometry(geo);\n\t\t// const geo = this.geometry()\n\t\t// if (geo) {\n\t\t// \treturn new CoreGeometry(geo)\n\t\t// } else {\n\t\t// \treturn null\n\t\t// }\n\t}\n\tpoints() {\n\t\treturn this.core_geometry().points();\n\t}\n\tpoints_from_group(group: GroupString): CorePoint[] {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tif (indices) {\n\t\t\t\tconst points = this.points();\n\t\t\t\treturn indices.map((i) => points[i]);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis.core_geometry().compute_vertex_normals();\n\t}\n\n\tadd_attribute(name: string, value: AttribValue) {\n\t\tlet data;\n\t\tif (!lodash_isNumber(value) && !lodash_isArray(value) && !lodash_isString(value)) {\n\t\t\tdata = (value as Vector3).toArray();\n\t\t} else {\n\t\t\tdata = value;\n\t\t}\n\t\tthis._object.userData[ATTRIBUTES][name] = data;\n\t}\n\tadd_numeric_attrib(name: string, value: NumericAttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tset_attrib_value(name: string, value: AttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\t\tthis.core_geometry().add_numeric_attrib(name, size, default_value);\n\t}\n\n\tattribute_names(): string[] {\n\t\t// TODO: to remove\n\t\treturn Object.keys(this._object.userData[ATTRIBUTES]);\n\t}\n\tattrib_names(): string[] {\n\t\treturn this.attribute_names();\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\treturn this.attribute_names().includes(name);\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tthis.add_attribute(new_name, this.attrib_value(old_name));\n\t\tthis.delete_attribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tdelete this._object.userData[ATTRIBUTES][name];\n\t}\n\n\tattrib_value(name: string): AttribValue {\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet val = this._object.userData[ATTRIBUTES][name];\n\t\t\tif (val == null) {\n\t\t\t\tif (name == NAME_ATTR) {\n\t\t\t\t\tval = this._object.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t}\n\tname(): string {\n\t\treturn this.attrib_value(NAME_ATTR) as string;\n\t}\n\thuman_type(): string {\n\t\treturn CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[this._object.constructor.name];\n\t}\n\n\tattrib_type(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (lodash_isString(val)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_size(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (lodash_isString(val) || lodash_isNumber(val)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tswitch (val.constructor) {\n\t\t\t\tcase Vector2:\n\t\t\t\t\treturn 2;\n\t\t\t\tcase Vector3:\n\t\t\t\t\treturn 3;\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn CoreObject.clone(this._object);\n\t}\n\n\tstatic clone(src_object: Object3D) {\n\t\tconst new_object = src_object.clone();\n\n\t\tvar sourceLookup = new Map<Object3D, Object3D>();\n\t\tvar cloneLookup = new Map<Object3D, Object3D>();\n\t\tCoreObject.parallelTraverse(src_object, new_object, function (sourceNode: Object3D, clonedNode: Object3D) {\n\t\t\tsourceLookup.set(clonedNode, sourceNode);\n\t\t\tcloneLookup.set(sourceNode, clonedNode);\n\t\t});\n\t\tnew_object.traverse(function (node) {\n\t\t\tconst src_node = sourceLookup.get(node) as SkinnedMesh;\n\t\t\tconst mesh_node = node as Mesh;\n\n\t\t\tif (mesh_node.geometry) {\n\t\t\t\tconst src_node_geometry = src_node.geometry as BufferGeometry;\n\t\t\t\tmesh_node.geometry = CoreGeometry.clone(src_node_geometry);\n\t\t\t\tconst mesh_node_geometry = mesh_node.geometry as BufferGeometry;\n\t\t\t\tif (mesh_node_geometry.userData) {\n\t\t\t\t\tmesh_node_geometry.userData = lodash_cloneDeep(src_node_geometry.userData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mesh_node.material) {\n\t\t\t\tmesh_node.material = src_node.material;\n\t\t\t\tCoreMaterial.apply_custom_materials(node, mesh_node.material as ShaderMaterialWithCustomMaterials);\n\n\t\t\t\t// prevents crashes for linesegments with shader material such as the line dashed instance\n\t\t\t\t// TODO: test\n\t\t\t\tconst material_with_color = mesh_node.material as MaterialWithColor;\n\t\t\t\tif (material_with_color.color == null) {\n\t\t\t\t\tmaterial_with_color.color = new Color(1, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src_object.userData) {\n\t\t\t\tnode.userData = lodash_cloneDeep(src_node.userData);\n\t\t\t}\n\n\t\t\tconst src_node_with_animations = (<unknown>src_node) as Object3DWithAnimations;\n\t\t\tif (src_node_with_animations.animations) {\n\t\t\t\t(node as Object3DWithAnimations).animations = src_node_with_animations.animations.map((animation) =>\n\t\t\t\t\tanimation.clone()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst skinned_node = node as SkinnedMesh;\n\t\t\tif (skinned_node.isSkinnedMesh) {\n\t\t\t\tvar clonedMesh = skinned_node;\n\t\t\t\tvar sourceMesh = src_node;\n\t\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\t\tclonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n\n\t\t\t\tconst new_bones = sourceBones.map(function (bone) {\n\t\t\t\t\treturn cloneLookup.get(bone);\n\t\t\t\t}) as Bone[];\n\n\t\t\t\tclonedMesh.skeleton.bones = new_bones;\n\n\t\t\t\tclonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n\t\t\t}\n\t\t});\n\n\t\treturn new_object;\n\t}\n\n\tstatic parallelTraverse(a: Object3D, b: Object3D, callback: (a: Object3D, b: Object3D) => void) {\n\t\tcallback(a, b);\n\t\tfor (var i = 0; i < a.children.length; i++) {\n\t\t\tthis.parallelTraverse(a.children[i], b.children[i], callback);\n\t\t}\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InterleavedBuffer} from 'three/src/core/InterleavedBuffer';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\nimport {TriangleFanDrawMode} from 'three/src/constants';\nimport {TriangleStripDrawMode} from 'three/src/constants';\nimport {TrianglesDrawMode} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tvar vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new Vector3(), tmp2 = new Vector3();\n\t\tvar n = new Vector3(), n2 = new Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) return null;\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) return null;\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) return null;\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) return null;\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) return null;\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) return null;\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) return null;\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) return null;\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.warn( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n\nexport { BufferGeometryUtils };\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {BaseGlNodeType} from '../../_Base';\n// import {Definition} from '../../Definition/_Module'\n// import { VariableConfig } from '../Config/VariableConfig';\nimport {TextureAllocationsController} from '../utils/TextureAllocationsController';\nimport {GlobalsGeometryHandler} from './Geometry';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {UniformGLDefinition, AttributeGLDefinition, VaryingGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig'\n// import {UniformConfig} from '../Config/UniformConfig'\n// import {AttributeConfig} from '../Config/AttributeConfig'\n// import { Attribute } from '../../Attribute';\n\nexport class GlobalsTextureHandler extends GlobalsBaseController {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tstatic UV_ATTRIB = 'particles_sim_uv_attrib';\n\tstatic UV_VARYING = 'particles_sim_uv_varying';\n\tstatic PARTICLE_SIM_UV = 'particleUV';\n\n\tprivate globals_geometry_handler: GlobalsGeometryHandler | undefined;\n\n\tconstructor(private _uv_name: string) {\n\t\tsuper();\n\t}\n\n\tset_texture_allocations_controller(controller: TextureAllocationsController) {\n\t\tthis._texture_allocations_controller = controller;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\n\t\tconst variable = this._texture_allocations_controller.variable(output_name);\n\n\t\tif (variable && connection_point) {\n\t\t\tconst gl_type = connection_point.type;\n\t\t\tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shaders_collection_controller);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t} else {\n\t\t\tthis.globals_geometry_handler = this.globals_geometry_handler || new GlobalsGeometryHandler();\n\t\t\tthis.globals_geometry_handler.handle_globals_node(\n\t\t\t\tglobals_node,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t// body_lines,\n\t\t\t\t// dependencies,\n\t\t\t\t// shader_name\n\t\t\t);\n\t\t}\n\n\t\t// definitions\n\t\t// const gl_type = named_output.gl_type()\n\t\t// const definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t// definitions_by_shader_name[shader_name].push(definition)\n\n\t\t// const new_value = this.read_attribute(globals_node, gl_type, output_name)\n\t\t// const body_line = `${var_name} = ${new_value}`\n\t\t// if(allocation){\n\t\t// \tconst var_name_texture = allocation.texture_name()\n\t\t// \t// add another definition if a texture was allocated by ParticlesSystemGPU\n\t\t// \tconst texture_definition = new Definition.Uniform(globals_node, 'sampler2D', var_name_texture)\n\t\t// \tdefinitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t// \t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', GlobalsTextureHandler.UV_ATTRIB)\n\t\t// \t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t// \t// this.add_particles_sim_uv_attribute(globals_node)\n\n\t\t// \tconst new_value = this.read_attribute(globals_node, gl_type, output_name, shader_name)\n\t\t// \tbody_line = `${var_name} = ${new_value}`\n\n\t\t// } else {\n\t\t// \tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// }\n\n\t\t// const new_body_lines = [\n\t\t// \t// `${var_name} = vec3(${output_name})`,\n\t\t// \t`vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz;`\n\t\t// ]\n\t\t// const body_line = `vec3 ${var_name} = texture2D( ${var_name_texture}, uv ).xyz`\n\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// if(dependencies.length == 0){\n\t\t// \tbody_lines.push(body_line)\n\t\t// }\n\t}\n\t// variable_config_default(variable_name: string): string {\n\t// \t// const allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \t// if(allocation){\n\t// \t// \treturn `texture2D( texture_${allocation.name()}, ${GlobalsTextureHandler.UV_VARYING} ).xyz`\n\t// \t// } else {\n\t// \t// \tGlobalsGeometryHandler.variable_config_default(variable_name)\n\t// \t// }\n\t// \tthrow 'do I go through here?';\n\t// \treturn this.read_attribute(variable_name);\n\t// }\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \tconst allocation = this._texture_allocations_controller.allocation_for_variable(variable_name)\n\t// \tif(allocation){\n\t// \t\treturn [\n\t// \t\t\tnew AttributeConfig('vec2', GlobalsTextureHandler.UV_ATTRIB),\n\t// \t\t\tnew UniformConfig('sampler2D', `texture_${allocation.name()}`)\n\t// \t\t]\n\t// \t}\n\t// }\n\n\t// static remap_instance_attribute(name:string):string{\n\t// \tif(name == 'instancePosition'){\n\t// \t\treturn 'position'\n\t// \t}\n\t// \treturn name\n\t// }\n\t// static variable_name_to_instance_attrib(name:string):string{\n\t// \tif(name == 'position'){\n\t// \t\treturn 'instancePosition'\n\t// \t}\n\t// \treturn name\n\t// }\n\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (!this._texture_allocations_controller) {\n\t\t\treturn;\n\t\t}\n\t\t// attrib_name = GlobalsTextureHandler.remap_instance_attribute(attrib_name)\n\n\t\tconst texture_variable = this._texture_allocations_controller.variable(attrib_name);\n\n\t\tif (texture_variable) {\n\t\t\tthis.add_particles_sim_uv_attribute(node, shaders_collection_controller);\n\t\t\t// const texture_variable = allocation.variable(attrib_name)\n\t\t\t// if(!texture_variable){\n\t\t\t// \tconsole.error(`no tex var found for ${attrib_name}`)\n\t\t\t// \tthis._texture_allocations_controller.print(node.scene())\n\t\t\t// }\n\t\t\tconst component = texture_variable.component;\n\t\t\tconst allocation = texture_variable.allocation;\n\t\t\tif (allocation) {\n\t\t\t\t// const definitions_by_shader_name = {}\n\t\t\t\t// definitions_by_shader_name[shader_name] = []\n\t\t\t\tconst var_name_texture = allocation.texture_name;\n\t\t\t\tconst texture_definition = new UniformGLDefinition(\n\t\t\t\t\tnode,\n\t\t\t\t\tConnectionPointType.SAMPLER_2D,\n\t\t\t\t\tvar_name_texture\n\t\t\t\t);\n\t\t\t\t// definitions_by_shader_name[shader_name].push(texture_definition)\n\n\t\t\t\tshaders_collection_controller.add_definitions(node, [texture_definition]);\n\n\t\t\t\t// const particles_sim_uv_definition = new Definition.Attribute(globals_node, 'vec2', 'particles_sim_uv')\n\t\t\t\t// definitions_by_shader_name['vertex'].push(particles_sim_uv_definition)\n\t\t\t\tconst body_line = `texture2D( ${var_name_texture}, ${this._uv_name} ).${component}`;\n\t\t\t\treturn body_line;\n\t\t\t}\n\t\t} else {\n\t\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t\t}\n\t}\n\n\tadd_particles_sim_uv_attribute(node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const shader_names = ['vertex', 'fragment'];\n\t\t// const definitions_by_shader_name:Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t// definitions_by_shader_name.set(ShaderName.FRAGMENT, [])\n\t\t// for (let shader_name of shader_names) {\n\t\t// \tdefinitions_by_shader_name[shader_name] = [];\n\t\t// }\n\n\t\tconst particles_sim_uv_attrib_definition = new AttributeGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_ATTRIB\n\t\t);\n\t\tconst particles_sim_uv_varying_definition = new VaryingGLDefinition(\n\t\t\tnode,\n\t\t\tConnectionPointType.VEC2,\n\t\t\tGlobalsTextureHandler.UV_VARYING\n\t\t);\n\n\t\tshaders_collection_controller.add_definitions(\n\t\t\tnode,\n\t\t\t[particles_sim_uv_attrib_definition, particles_sim_uv_varying_definition],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t\tshaders_collection_controller.add_definitions(node, [particles_sim_uv_varying_definition], ShaderName.FRAGMENT);\n\n\t\tshaders_collection_controller.add_body_lines(\n\t\t\tnode,\n\t\t\t[`${GlobalsTextureHandler.UV_VARYING} = ${GlobalsTextureHandler.UV_ATTRIB}`],\n\t\t\tShaderName.VERTEX\n\t\t);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten'\n// import lodash_map from 'lodash/map'\n\nimport {CoreGeometry} from '../Geometry';\nimport {CorePoint} from '../Point';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nexport class CoreGeometryUtilCurve {\n\tstatic accumulated_curve_point_indices(indices: number[]) {\n\t\tlet curve_point_indices: number[] = [];\n\t\tconst accumulated_curve_point_indices = [];\n\t\tlet last_index_added: number | null = null;\n\n\t\t// indices.forEach((index, i) => {\n\t\tlet index: number;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tif (i % 2 === 1) {\n\t\t\t\tindex = indices[i];\n\t\t\t\tconst previous_index = indices[i - 1];\n\n\t\t\t\t// if the last added index, from the previous segment\n\t\t\t\t// is the same as the start of the current segment (indices[i-1])\n\t\t\t\t// then this is part of the same curve\n\t\t\t\tif (last_index_added == null || previous_index === last_index_added) {\n\t\t\t\t\t// add the first point\n\t\t\t\t\tif (curve_point_indices.length === 0) {\n\t\t\t\t\t\tcurve_point_indices.push(previous_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve_point_indices.push(index);\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise we create a new curve\n\t\t\t\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\t\t\t\t\t//current_points = lodash_map curve_point_indices, (index)->points[index]\n\t\t\t\t\t//curve_point_indices_groups.push(current_points)\n\t\t\t\t\t//this._create_curve_from_points(current_points)\n\n\t\t\t\t\t// and reset the array\n\t\t\t\t\tcurve_point_indices = [previous_index, index];\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// also create with the remaining ones\n\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\n\t\treturn accumulated_curve_point_indices;\n\t}\n\n\tstatic create_line_segment_geometry(\n\t\tpoints: CorePoint[],\n\t\tindices: number[],\n\t\tattrib_names: string[],\n\t\tattrib_sizes_by_name: Dictionary<number>\n\t) {\n\t\t// let new_positions: number[] = []\n\t\tconst new_indices: number[] = [];\n\n\t\tconst new_attribute_values_by_name: Dictionary<number[]> = {};\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tnew_attribute_values_by_name[attrib_name] = [];\n\t\t});\n\n\t\tindices.forEach((index, i) => {\n\t\t\tconst point = points[index];\n\t\t\t// const position = point.position();\n\t\t\t// new_positions.push(position.toArray());\n\t\t\tattrib_names.forEach((attrib_name) => {\n\t\t\t\tlet attrib_value = point.attrib_value(attrib_name);\n\t\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\t\tif (attrib_size > 1) {\n\t\t\t\t\tattrib_value = attrib_value.toArray();\n\t\t\t\t} else {\n\t\t\t\t\tattrib_value = [attrib_value];\n\t\t\t\t}\n\t\t\t\tattrib_value.forEach((v: number) => {\n\t\t\t\t\tnew_attribute_values_by_name[attrib_name].push(v);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (i > 0) {\n\t\t\t\tnew_indices.push(i - 1);\n\t\t\t\tnew_indices.push(i);\n\t\t\t}\n\t\t});\n\n\t\t// new_positions = lodash_flatten(new_positions)\n\t\tconst geometry = new BufferGeometry();\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\tconst values = new_attribute_values_by_name[attrib_name];\n\t\t\tgeometry.setAttribute(attrib_name, new Float32BufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tgeometry.setIndex(new_indices);\n\t\treturn geometry;\n\t}\n\n\tstatic line_segment_to_geometries(geometry: BufferGeometry) {\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst attrib_names = core_geometry.attrib_names();\n\t\tconst points = core_geometry.points();\n\t\tconst indices = (geometry.getIndex()?.array as number[]) || [];\n\n\t\tconst accumulated_curve_point_indices = this.accumulated_curve_point_indices(indices);\n\t\tconsole.log(indices, accumulated_curve_point_indices);\n\n\t\tif (accumulated_curve_point_indices.length > 0) {\n\t\t\tconst attribute_sizes_by_name = core_geometry.attrib_sizes();\n\n\t\t\taccumulated_curve_point_indices.forEach((curve_point_indices, i) => {\n\t\t\t\tgeometry = this.create_line_segment_geometry(\n\t\t\t\t\tpoints,\n\t\t\t\t\tcurve_point_indices,\n\t\t\t\t\tattrib_names,\n\t\t\t\t\tattribute_sizes_by_name\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t});\n\t\t}\n\n\t\treturn geometries;\n\t}\n}\n","import {TypedEventNode, BaseEventNodeType} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ACCEPTED_MOUSE_EVENT_TYPES} from '../../scene/utils/events/MouseEventsController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MouseEventParamsConfig extends NodeParamsConfig {\n\tactive = ParamConfig.BOOLEAN(true, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tMouseEventNode.PARAM_CALLBACK_toggle_active(node as MouseEventNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new MouseEventParamsConfig();\n\nexport class MouseEventNode extends TypedEventNode<MouseEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mouse_event';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\tACCEPTED_MOUSE_EVENT_TYPES.map((event_type) => {\n\t\t\t\treturn new TypedNamedConnectionPoint(event_type, ConnectionPointType.BOOL);\n\t\t\t})\n\t\t);\n\n\t\tthis.lifecycle.add_on_add_hook(() => {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t});\n\t\tthis.lifecycle.add_delete_hook(() => {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t});\n\t}\n\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tif (!this.pv.active) {\n\t\t\treturn;\n\t\t}\n\t\tconst index = this.io.outputs.get_output_index(event.type);\n\t\tif (index >= 0) {\n\t\t\tconst connections = this.io.connections.output_connections();\n\t\t\tconst current_connections = connections.filter((connection) => connection.output_index == index);\n\t\t\tconst nodes: BaseEventNodeType[] = current_connections.map(\n\t\t\t\t(connection) => connection.node_dest\n\t\t\t) as BaseEventNodeType[];\n\t\t\tfor (let node of nodes) {\n\t\t\t\tnode.process_event(event, canvas, camera_node);\n\t\t\t}\n\t\t}\n\t}\n\n\t_update_register() {\n\t\tif (this.pv.active) {\n\t\t\tthis.scene.events_controller.register_event_node(this);\n\t\t} else {\n\t\t\tthis.scene.events_controller.unregister_event_node(this);\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_toggle_active(node: MouseEventNode) {\n\t\tnode._update_register();\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nexport class BaseState {\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseNodeType} from '../_Base';\nimport {NodeUIDataJson} from './UIData';\nimport {TypedNamedConnectionPointData} from './connections/NamedConnectionPoint';\nimport {ConnectionPointType} from './connections/ConnectionPointType';\n\nexport interface NodeSerializerData {\n\tname: string;\n\ttype: string;\n\tgraph_node_id: string;\n\tis_dirty: boolean;\n\tui_data_json: NodeUIDataJson;\n\terror_message: string | undefined;\n\tchildren: string[];\n\tinputs: Array<string | undefined>;\n\tinput_connection_output_indices: Array<number | undefined> | undefined;\n\tnamed_input_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tnamed_output_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tparam_ids: string[];\n\t// spare_params: Dictionary<string>;\n\toverride_clonable_state: boolean;\n\tinputs_clonable_state_with_override: boolean[];\n\tflags?: {\n\t\t//has_display: this.has_display_flag()\n\t\tdisplay?: boolean;\n\t\tbypass?: boolean;\n\t};\n\tselection?: string[];\n}\n\nexport class NodeSerializer {\n\tconstructor(private node: BaseNodeType) {}\n\n\t// serialize() {\n\t// \treturn this.to_json();\n\t// }\n\n\t// TODO: find a way to not re-create a json everytime\n\tto_json(include_param_components: boolean = false): NodeSerializerData {\n\t\t// const spare_params_json_by_name = {};\n\t\t// lodash_each(this.node.spare_param_names(), param_name=> {\n\t\t// \tconst param = this.node.spare_param(param_name);\n\t\t// \tspare_params_json_by_name[param_name] = param.graph_node_id;\n\t\t// });\n\n\t\tconst data = {\n\t\t\tname: this.node.name,\n\t\t\ttype: this.node.type,\n\t\t\tgraph_node_id: this.node.graph_node_id,\n\t\t\tis_dirty: this.node.is_dirty,\n\t\t\tui_data_json: this.node.ui_data.to_json(),\n\t\t\terror_message: this.node.states.error.message,\n\t\t\tchildren: this.children_ids(),\n\t\t\tinputs: this.input_ids(),\n\t\t\tinput_connection_output_indices: this.connection_input_indices(),\n\t\t\tnamed_input_connections: this.named_input_connections(),\n\t\t\tnamed_output_connections: this.named_output_connections(),\n\t\t\tparam_ids: this.to_json_params(include_param_components),\n\t\t\t// spare_params: this.to_json_spare_params(include_param_components),\n\t\t\toverride_clonable_state: this.node.io.inputs.override_clonable_state(),\n\t\t\tinputs_clonable_state_with_override: this.node.io.inputs.inputs_clonable_state_with_override(),\n\t\t\tflags: {\n\t\t\t\t//has_display: this.has_display_flag()\n\t\t\t\tdisplay: this.node.flags?.display?.active,\n\t\t\t\tbypass: this.node.flags?.bypass?.active,\n\t\t\t},\n\t\t\tselection: undefined as string[] | undefined,\n\t\t};\n\n\t\tif (this.node.children_allowed() && this.node.children_controller) {\n\t\t\tdata['selection'] = this.node.children_controller.selection.to_json();\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tchildren_ids(): string[] {\n\t\treturn this.node.children().map((node) => node.graph_node_id);\n\t}\n\n\tinput_ids(): (string | undefined)[] {\n\t\treturn this.node.io.inputs.inputs().map((node) => (node != null ? node.graph_node_id : undefined));\n\t}\n\n\tconnection_input_indices() {\n\t\treturn this.node.io.connections\n\t\t\t.input_connections()\n\t\t\t?.map((connection) => (connection != null ? connection.output_index : undefined));\n\t}\n\tnamed_input_connections() {\n\t\treturn this.node.io.inputs.named_input_connection_points.map((i) => i.to_json());\n\t}\n\tnamed_output_connections() {\n\t\treturn this.node.io.outputs.named_output_connection_points.map((o) => o.to_json());\n\t}\n\n\tto_json_params_from_names(param_names: string[], include_components: boolean = false) {\n\t\treturn param_names.map((param_name) => {\n\t\t\treturn this.node.params.get(param_name)!.graph_node_id;\n\t\t});\n\t\t// const params_json_by_name: Dictionary<string> = {};\n\t\t// for (let param_name of param_names) {\n\t\t// \tconst param = this.node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tparams_json_by_name[param_name] = param.graph_node_id;\n\n\t\t// \t\tif (include_components && param.is_multiple && param.components) {\n\t\t// \t\t\tfor (let component of param.components) {\n\t\t// \t\t\t\tparams_json_by_name[component.name] = component.graph_node_id;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t\t// return params_json_by_name;\n\t}\n\tto_json_params(include_components: boolean = false) {\n\t\treturn this.to_json_params_from_names(this.node.params.names, include_components);\n\t}\n\t// to_json_params_without_components(){\n\t// \treturn this.to_json_params(false)\n\t// }\n\t// to_json_params_with_components(){\n\t// \treturn this.to_json_params(true)\n\t// }\n\t// to_json_spare_params(include_components: boolean = false) {\n\t// \treturn this.to_json_params_from_names(this.node.params.spare_names, include_components);\n\t// }\n}\n","import {BooleanParam} from '../Boolean';\nimport {ButtonParam} from '../Button';\nimport {ColorParam} from '../Color';\nimport {FloatParam} from '../Float';\nimport {FolderParam} from '../Folder';\nimport {IntegerParam} from '../Integer';\nimport {OperatorPathParam} from '../OperatorPath';\nimport {RampParam} from '../Ramp';\nimport {SeparatorParam} from '../Separator';\nimport {StringParam} from '../String';\nimport {Vector2Param} from '../Vector2';\nimport {Vector3Param} from '../Vector3';\nimport {Vector4Param} from '../Vector4';\n\nimport {ParamType} from '../../poly/ParamType';\n\ntype ParamClassMapType = {[key in ParamType]: any};\nexport const ParamConstructorByType: ParamClassMapType = {\n\t[ParamType.BOOLEAN]: BooleanParam,\n\t[ParamType.BUTTON]: ButtonParam,\n\t[ParamType.COLOR]: ColorParam,\n\t[ParamType.FLOAT]: FloatParam,\n\t[ParamType.FOLDER]: FolderParam,\n\t[ParamType.INTEGER]: IntegerParam,\n\t[ParamType.OPERATOR_PATH]: OperatorPathParam,\n\t[ParamType.RAMP]: RampParam,\n\t[ParamType.SEPARATOR]: SeparatorParam,\n\t[ParamType.STRING]: StringParam,\n\t[ParamType.VECTOR2]: Vector2Param,\n\t[ParamType.VECTOR3]: Vector3Param,\n\t[ParamType.VECTOR4]: Vector4Param,\n};\n","import {BaseParamType} from '../_Base';\nimport {ExpressionManager} from '../../expressions/ExpressionManager';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreEntity} from '../../../core/geometry/Entity';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamValuesTypeMap} from '../types/ParamValuesTypeMap';\nimport {CoreObject} from '../../../core/geometry/Object';\n\n// type ParamTypeElem = ParamType;\ntype EntityCallback<T extends ParamType> = (\n\tentity: CoreEntity,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype PointEntityCallback<T extends ParamType> = (\n\tentity: CorePoint,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype ObjectEntityCallback<T extends ParamType> = (\n\tentity: CoreObject,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\n\nexport class ExpressionController<T extends ParamType> {\n\tprotected _expression: string | undefined;\n\tprotected _entities: CoreEntity[] | undefined;\n\tprotected _entity_callback: EntityCallback<T> | undefined;\n\tprotected _manager: ExpressionManager | undefined;\n\t// private _reset_bound = this.reset.bind(this);\n\tconstructor(protected param: BaseParamType) {\n\t\t// this.param.dirty_controller.add_post_dirty_hook('expression_controller_reset', this._reset_bound);\n\t}\n\t// remove_dirty_hook() {\n\t// \t// this.param.dirty_controller.remove_post_dirty_hook('expression_controller_reset');\n\t// }\n\n\tget active() {\n\t\treturn this._expression != null;\n\t}\n\tget expression() {\n\t\treturn this._expression;\n\t}\n\tget is_errored() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.is_errored;\n\t\t}\n\t\treturn false;\n\t}\n\tget error_message() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.error_message;\n\t\t}\n\t\treturn null;\n\t}\n\tget requires_entities() {\n\t\treturn this.param.options.is_expression_for_entities;\n\t}\n\t// private reset() {\n\t// \tthis._manager?.clear_error();\n\t// }\n\n\tset_expression(expression: string | undefined, set_dirty: boolean = true) {\n\t\tthis.param.scene.missing_expression_references_controller.deregister_param(this.param);\n\t\tthis.param.scene.expressions_controller.deregister_param(this.param);\n\n\t\tif (this._expression != expression) {\n\t\t\tthis._expression = expression;\n\n\t\t\tif (this._expression) {\n\t\t\t\tthis._manager = this._manager || new ExpressionManager(this.param);\n\t\t\t\tthis._manager.parse_expression(this._expression);\n\t\t\t} else {\n\t\t\t\tthis._manager?.reset();\n\t\t\t}\n\n\t\t\tif (set_dirty) {\n\t\t\t\tthis.param.set_dirty();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tif (this._manager && this.active) {\n\t\t\tthis._manager.update_from_method_dependency_name_change();\n\t\t}\n\t}\n\n\tasync compute_expression() {\n\t\tif (this._manager && this.active) {\n\t\t\tconst result = await this._manager.compute_function();\n\t\t\treturn result;\n\t\t}\n\t}\n\tprivate async compute_expression_for_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis.set_entities(entities, callback);\n\t\tawait this.compute_expression();\n\t\tif (this._manager?.error_message) {\n\t\t\tthis.param.node.states.error.set(`expression evalution error: ${this._manager?.error_message}`);\n\t\t}\n\n\t\tthis.reset_entities();\n\t}\n\tcompute_expression_for_points(entities: CorePoint[], callback: PointEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tcompute_expression_for_objects(entities: CoreObject[], callback: ObjectEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tget entities() {\n\t\treturn this._entities;\n\t}\n\tget entity_callback() {\n\t\treturn this._entity_callback;\n\t}\n\tset_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis._entities = entities;\n\t\tthis._entity_callback = callback;\n\t}\n\treset_entities() {\n\t\tthis._entities = undefined;\n\t\tthis._entity_callback = undefined;\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n\nimport jsep from 'jsep';\njsep.addUnaryOp('@');\n// self.jsep = jsep\nlet precedence = 10;\njsep.addBinaryOp('**', precedence);\n// precedence = 1\n// jsep.addBinaryOp('`', precedence)\n// const HOUDINI_QUOTE_CODE = 96; // houdini quote\n// const JSEP_COMPOUND = 'Compound'\nconst JSEP_IDENTIFIER = 'Identifier';\nconst JSEP_LITERAL = 'Literal';\n// const JSEP_BINARY_EXPRESSION = 'BynaryExpression'\nconst JSEP_CALL_EXPRESSION = 'CallExpression';\nconst STRING_EXPRESSION_SEPARATOR = '`';\n\nexport class ParsedTree {\n\tpublic node: jsep.Expression | undefined;\n\tpublic error_message: string | undefined;\n\n\tconstructor() {}\n\n\tparse_expression(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\t\t\tthis.node = jsep(string);\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\tparse_expression_for_string_param(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\n\t\t\tconst elements = ParsedTree.string_value_elements(string);\n\t\t\tconst nodes = [];\n\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\tconst element = elements[i];\n\t\t\t\tlet node;\n\t\t\t\tif (i % 2 == 1) {\n\t\t\t\t\tnode = jsep(element);\n\t\t\t\t} else {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: JSEP_LITERAL,\n\t\t\t\t\t\tvalue: `'${element}'`,\n\t\t\t\t\t\traw: `'${element}'`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tnodes.push(node);\n\t\t\t\t// nodes.push({\n\t\t\t\t// \ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\t// \targuments: [node],\n\t\t\t\t// \tcallee: {\n\t\t\t\t// \t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t// \t\tname: 'toString',\n\t\t\t\t// \t}\n\t\t\t\t// })\n\t\t\t}\n\t\t\t// let last_plus_node;\n\t\t\t// for(let i=0; i<(nodes.length-1); i++){\n\t\t\t// \tconst plus_node = {\n\t\t\t// \t\ttype: JSEP_BINARY_EXPRESSION,\n\t\t\t// \t\toperator: '+',\n\t\t\t// \t\tleft: last_plus_node || nodes[i],\n\t\t\t// \t\tright: nodes[i+1],\n\t\t\t// \t}\n\t\t\t// \tlast_plus_node = plus_node;\n\t\t\t// }\n\t\t\t// this.node = last_plus_node\n\t\t\tthis.node = (<unknown>{\n\t\t\t\ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\targuments: nodes,\n\t\t\t\tcallee: {\n\t\t\t\t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t\tname: 'str_concat',\n\t\t\t\t},\n\t\t\t}) as jsep.Compound;\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\n\tstatic string_value_elements(v: string): string[] {\n\t\tif (v != null) {\n\t\t\tif (lodash_isString(v)) {\n\t\t\t\treturn v.split(STRING_EXPRESSION_SEPARATOR);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// static string_value_contains_expression(v:string): boolean{\n\t// \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n\t// }\n\n\t// deep_parse_for_string_expressions(){\n\t// \t// for string expressions which have more than a single `<expr>` element\n\t// \t// pt_`@ptnum`\n\t// \t// `@ptnum`_pt\n\t// \t// pt_`@ptnum`_`1+1`\n\t// \tif(this.node.type == JSEP_COMPOUND){\n\t// \t\tconst args = this.node.body\n\t// \t\tlet arg;\n\t// \t\tfor(let i=0; i<args.length; i++){\n\t// \t\t\targ = args[i]\n\t// \t\t\tif(arg.type == JSEP_LITERAL){\n\t// \t\t\t\tconst arg_node = jsep(arg.value)\n\t// \t\t\t\targs[i] = arg_node\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// for string expressions which havea single `<expr>` element\n\t// \t\t// `@ptnum`\n\t// \t\tif(this.node.type == JSEP_LITERAL){\n\t// \t\t\tconst raw = this.node.raw\n\t// \t\t\tconst first_char_code = raw.charCodeAt(0)\n\t// \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n\t// \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n\t// \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate reset() {\n\t\tthis.node = undefined;\n\t\tthis.error_message = undefined;\n\t}\n}\n","import {BaseNodeType} from '../engine/nodes/_Base';\nimport {BaseParamType} from '../engine/params/_Base';\nimport {CoreWalker} from './Walker';\n// import {NodeSimple} from '/Graph/NodeSimple'\n\n// import {NamedGraphNodeClass} from './graph/NamedGraphNode'\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class DecomposedPath {\n\tprivate index = -1;\n\tprivate path_elements: (string | null)[] = [];\n\tprivate _named_nodes: (NodeOrParam | null)[] = [];\n\tprivate graph_node_ids: string[] = [];\n\tprivate node_element_by_graph_node_id: Dictionary<string> = {};\n\n\tconstructor() {\n\t\t// console.warn('create decomposed path');\n\t}\n\tadd_node(name: string, node: NodeOrParam) {\n\t\tthis.index += 1;\n\t\tif (name == node.name) {\n\t\t\tthis.named_nodes[this.index] = node;\n\t\t}\n\n\t\tthis.graph_node_ids[this.index] = node.graph_node_id;\n\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = name;\n\t}\n\tadd_path_element(path_element: string) {\n\t\tthis.index += 1;\n\t\tthis.path_elements[this.index] = path_element;\n\t}\n\n\tget named_nodes() {\n\t\treturn this._named_nodes;\n\t}\n\n\tupdate_from_name_change(node: NodeOrParam) {\n\t\tconst named_graph_node_ids = this.named_nodes.map((n) => n?.graph_node_id);\n\n\t\tif (named_graph_node_ids.includes(node.graph_node_id)) {\n\t\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = node.name;\n\t\t}\n\t}\n\n\tto_path(): string {\n\t\tconst elements = new Array<string>(this.index);\n\t\tfor (let i = 0; i <= this.index; i++) {\n\t\t\tconst node = this.named_nodes[i];\n\t\t\tif (node) {\n\t\t\t\telements[i] = this.node_element_by_graph_node_id[node.graph_node_id];\n\t\t\t} else {\n\t\t\t\tconst path_element = this.path_elements[i];\n\t\t\t\tif (path_element) {\n\t\t\t\t\telements[i] = path_element;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet joined_path = elements.join(CoreWalker.SEPARATOR);\n\t\t// if the first character is a letter, we need to prefix with /\n\t\tconst first_char = joined_path[0];\n\t\tif (first_char) {\n\t\t\tif (!CoreWalker.NON_LETTER_PREFIXES.includes(first_char)) {\n\t\t\t\tjoined_path = `${CoreWalker.SEPARATOR}${joined_path}`;\n\t\t\t}\n\t\t}\n\n\t\treturn joined_path;\n\t}\n}\n","// https://gist.github.com/gre/1650294\n\n// const ease_in = function(t:number, power:number){return Math.pow(t, power)}\n// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}\n// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}\n\nconst ease_i = function(power:number){return function(t:number){return Math.pow(t, power)}};\nconst ease_o = function(power:number){return function(t:number){return 1 - Math.abs(Math.pow(t-1, power))}};\nconst ease_io = function(power:number){return function(t:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}}\n\nexport const Easing = {\n  linear: ease_io(1),\n\n  ease_i: function(t:number, power:number){ return ease_i(power)(t) },\n  ease_o: function(t:number, power:number){ return ease_o(power)(t) },\n  ease_io: function(t:number, power:number){ return ease_io(power)(t) },\n\n  ease_i2: ease_i(2),\n  ease_o2: ease_o(2),\n  ease_io2: ease_io(2),\n\n  ease_i3: ease_io(3),\n  ease_o3: ease_io(3),\n  ease_io3: ease_io(3),\n\n  ease_i4: ease_io(4),\n  ease_o4: ease_io(4),\n  ease_io4: ease_io(4),\n  // easeInQuart: EaseIn(4),\n  // easeOutQuart: EaseOut(4),\n  // easeInOutQuart: EaseInOut(4),\n  // easeInQuint: EaseIn(5),\n  // easeOutQuint: EaseOut(5),\n  // easeInOutQuint: EaseInOut(5)\n\n  ease_i_sin: function(t:number){ return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },\n  ease_o_sin: function(t:number){ return Math.sin(Math.PI / 2 * t); },\n  ease_io_sin: function(t:number){ return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2; },\n\n  ease_i_elastic: function (t:number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n  ease_o_elastic: function (t:number) { return .04 * t / (--t) * Math.sin(25 * t) },\n  ease_io_elastic: function (t:number) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n}\n\n// export class Easing {\n//   // no easing, no acceleration\n//   static linear(t:number):number{ return t }\n//   // accelerating from zero velocity\n//   static easeinquad (t:number):number{ return t*t }\n//   // decelerating to zero velocity\n//   static easeoutquad (t:number):number{ return t*(2-t) }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }\n//   // accelerating from zero velocity\n//   static easeincubic (t:number):number{ return t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n//   // accelerating from zero velocity\n//   static easeinquart (t:number):number{ return t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }\n//   // accelerating from zero velocity\n//   static easeinquint (t:number):number{ return t*t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\n// }","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\n// import lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class FloatParam extends TypedNumericParam<ParamType.FLOAT> {\n\tstatic type() {\n\t\treturn ParamType.FLOAT;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FLOAT], val2: ParamValuesTypeMap[ParamType.FLOAT]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tconst result = FloatParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {CoreWalker} from '../../core/Walker';\n\n// import {AsCodeOperatorPath} from './concerns/visitors/OperatorPath';\nimport {BaseNodeType} from '../nodes/_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class OperatorPathParam extends TypedParam<ParamType.OPERATOR_PATH> {\n\tprivate _found_node: BaseNodeType | null = null;\n\n\tstatic type() {\n\t\treturn ParamType.OPERATOR_PATH;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\tval2: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._value == this.default_value;\n\t}\n\tprotected process_raw_input() {\n\t\tthis._value = this._raw_input;\n\t\tthis.set_dirty();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\tprotected async process_computation() {\n\t\tconst path = this._value;\n\t\tlet node = null;\n\t\tconst path_non_empty = path != null && path !== '';\n\n\t\tif (path_non_empty) {\n\t\t\tnode = CoreWalker.find_node(this.node, path);\n\t\t\t// not sure I want the param to be errored,\n\t\t\t// as it may block the node, even if the param is not necessary\n\t\t\t// if (!node) {\n\t\t\t// \tthis.states.error.set('node not found');\n\t\t\t// }\n\t\t}\n\n\t\tif (this._found_node !== node) {\n\t\t\tconst dependent_on_found_node = this.options.dependent_on_found_node();\n\n\t\t\tif (this._found_node) {\n\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\tthis.remove_graph_input(this._found_node);\n\t\t\t\t} else {\n\t\t\t\t\t// this._found_node.remove_param_referree(this) // TODO: typescript\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._found_node = node;\n\t\t\tif (node) {\n\t\t\t\tconst expected_context = this.options.node_selection_context;\n\t\t\t\tconst node_context = node.parent?.children_controller?.context;\n\t\t\t\tif (expected_context == node_context || expected_context == null) {\n\t\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\t\tthis.add_graph_input(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this._found_node.add_param_referree(this) // TODO: typescript\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`node context is ${expected_context} but the params expects a ${node_context}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} // else {\n\t\t\t// \tif (path_non_empty) {\n\t\t\t// \t\tthis.states.error.set('node not found');\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.options.execute_callback();\n\t\t}\n\t\tthis.remove_dirty_state();\n\t}\n\n\tfound_node() {\n\t\treturn this._found_node;\n\t}\n}\n","// import lodash_each from 'lodash/each'\nimport lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber'\nimport {TypedParam} from './_Base';\n// import {TypedParamVisitor} from './_Base';\n// import {AsCodeString} from './concerns/visitors/String';\n// import {ExpressionController} from '../expressions/ExpressionController'\nimport {ParsedTree} from '../expressions/traversers/ParsedTree';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\n\nexport class StringParam extends TypedParam<ParamType.STRING> {\n\tstatic type() {\n\t\treturn ParamType.STRING;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.STRING]) {\n\t\treturn `${raw_input}`;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.STRING],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.STRING]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.STRING], val2: ParamValuesTypeMap[ParamType.STRING]) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\tconvert(raw_val: any): string {\n\t\tif (lodash_isString(raw_val)) {\n\t\t\treturn raw_val;\n\t\t}\n\t\treturn `${raw_val}`;\n\t}\n\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tif (this._value_elements(this._raw_input).length >= 3) {\n\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\tthis.set_dirty();\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._raw_input != this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\tif (this._expression_controller) {\n\t\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(`expression error: ${this.expression_controller.error_message}`);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\t// we need to check if equal nulls explicitely\n\t\t\t\t// as the empty string '' evals to false...\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tthis._value = converted;\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`expression returns an invalid type (${expression_result})`);\n\t\t\t\t}\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _value_elements(v: string): string[] {\n\t\treturn ParsedTree.string_value_elements(v);\n\t}\n}\n","import {BaseEventsController} from './_BaseEventsController';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\n\nenum MouseEventType {\n\tDOWN = 'mousedown',\n\tMOVE = 'mousemove',\n\tUP = 'mouseup',\n\tENTER = 'mouseenter',\n\tLEAVE = 'mouseleave',\n}\nexport const ACCEPTED_MOUSE_EVENT_TYPES: MouseEventType[] = [\n\tMouseEventType.DOWN,\n\tMouseEventType.MOVE,\n\tMouseEventType.UP,\n\tMouseEventType.ENTER,\n\tMouseEventType.LEAVE,\n];\n\nexport class MouseEventsController extends BaseEventsController<MouseEvent, MouseEventNode> {\n\taccepts_event(event: MouseEvent) {\n\t\treturn ACCEPTED_MOUSE_EVENT_TYPES.includes(event.type as MouseEventType);\n\t}\n}\n","import {TypedEventNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\nconst DEFAULT_FUNCTION_CODE = `\nimport {BaseMouseEventProcessor} from 'polygonjs-engine'\nexport class EventProcessor extends BaseMouseEventProcessor {\n\tconstructor(){\n\t\tsuper();\n\t}\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: any){\n\t\tthis._set_mouse_from_event_and_canvas(event, canvas);\n\t\tconsole.log(this.node.scene.time);\n\t\tconsole.log(\"processing event\", this.mouse.x, this.mouse.y);\n\t}\n}\n\n\n\n\n`;\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\n\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Raycaster} from 'three/src/core/Raycaster';\nexport class BaseMouseEventProcessor {\n\tprotected node!: CodeEventNode;\n\tprotected raycaster = new Raycaster();\n\tprotected mouse = new Vector2();\n\tconstructor() {}\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {}\n\tset_node(node: CodeEventNode) {\n\t\tthis.node = node;\n\t}\n\tprotected _set_mouse_from_event_and_canvas(event: MouseEvent, canvas: HTMLCanvasElement) {\n\t\tthis.mouse.x = (event.clientX / canvas.offsetWidth) * 2 - 1;\n\t\tthis.mouse.y = -(event.clientY / canvas.offsetHeight) * 2 + 1;\n\t}\n}\n\ntype EvaluatedFunction = (base_event_processor_class: typeof BaseMouseEventProcessor) => typeof BaseMouseEventProcessor;\n\nclass CodeEventParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeEventParamsConfig();\n\nexport class CodeEventNode extends TypedEventNode<CodeEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _event_processor: BaseMouseEventProcessor | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\tinitialize_node() {\n\t\t// TODO: do not use GL connection Types here\n\t\tthis.io.inputs.set_named_input_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('trigger', ConnectionPointType.BOOL),\n\t\t]);\n\t}\n\n\tprocess_event(event: MouseEvent, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._event_processor) {\n\t\t\tthis._event_processor.process_event(event, canvas, camera_node);\n\t\t}\n\t}\n\tprivate _compile_if_required() {\n\t\tif (!this._event_processor || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprivate _compile() {\n\t\ttry {\n\t\t\tconst function_body = `try {\n\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t} catch(e) {\n\t\t\t\tthis.states.error.set(e)\n\t\t\t}`;\n\t\t\tconst event_processor_creator_function: EvaluatedFunction = new AsyncFunction(\n\t\t\t\t'BaseMouseEventProcessor',\n\t\t\t\tfunction_body\n\t\t\t);\n\t\t\tconst event_processor_class = event_processor_creator_function(BaseMouseEventProcessor);\n\t\t\tthis._event_processor = new event_processor_class();\n\t\t\tthis._event_processor.set_node(this);\n\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._event_processor = undefined;\n\t\t}\n\t}\n}\n","export class TranspiledFilter {\n\tstatic filter(transpiled_javascript: string) {\n\t\tconst lines = transpiled_javascript.split('\\n');\n\t\tconsole.log(lines);\n\t\tconst filtered_lines: string[] = [];\n\t\tfor (let line of lines) {\n\t\t\tif (!line.match(/import {.*} from '.*'/)) {\n\t\t\t\tline = line.replace('export ', 'return ');\n\t\t\t\tfiltered_lines.push(line);\n\t\t\t}\n\t\t}\n\t\tconsole.log('filtered_lines', filtered_lines);\n\t\treturn filtered_lines.join('\\n');\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ntype FlagHookCallback = () => void;\n\nexport class BaseFlag {\n\t// protected _available_states: [boolean, boolean] = [];\n\tprotected _state: boolean = true;\n\tprotected _hooks: FlagHookCallback[] | null = null;\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// set_available_states(states: T[]) {}\n\tadd_hook(hook: FlagHookCallback) {\n\t\tthis._hooks = this._hooks || [];\n\t\tthis._hooks.push(hook);\n\t}\n\tprotected on_update() {}\n\tset(new_state: boolean) {\n\t\tif (this._state != new_state) {\n\t\t\tthis._state = new_state;\n\t\t\tthis.on_update();\n\t\t\tthis.run_hooks();\n\t\t}\n\t}\n\tget active() {\n\t\treturn this._state;\n\t}\n\ttoggle() {\n\t\tthis.set(!this._state);\n\t}\n\trun_hooks() {\n\t\tif (this._hooks) {\n\t\t\tfor (let hook of this._hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {GlobalsGlNode} from '../../Globals';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nexport abstract class GlobalsBaseController {\n\tprivate static __next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor() {\n\t\tthis._id = GlobalsBaseController.__next_id++;\n\t}\n\tid() {\n\t\treturn this._id;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {}\n\n\tabstract read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined;\n}\n","import {TypedGLDefinition, GLDefinitionType} from './GLDefinition';\n\nexport class TypedGLDefinitionCollection<T extends GLDefinitionType> {\n\t_errored: boolean = false;\n\t_error_message: string | undefined;\n\n\tconstructor(private _definitions: TypedGLDefinition<T>[] = []) {}\n\n\tget errored() {\n\t\treturn this._errored;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tuniq(): TypedGLDefinition<T>[] {\n\t\tconst definitions_by_name: Map<string, TypedGLDefinition<T>> = new Map();\n\t\tconst names: string[] = [];\n\n\t\tfor (let definition of this._definitions) {\n\t\t\tif (!this._errored) {\n\t\t\t\tconst name = definition.name;\n\t\t\t\tconst existing = definitions_by_name.get(name);\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.data_type != definition.data_type) {\n\t\t\t\t\t\tthis._errored = true;\n\t\t\t\t\t\tthis._error_message = `attempt to create ${definition.name} with types ${definition.data_type}`;\n\t\t\t\t\t\tconsole.warn('emitting error message', this._error_message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdefinitions_by_name.set(name, definition);\n\t\t\t\t\tnames.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uniq_definitions: TypedGLDefinition<T>[] = [];\n\t\tfor (let name of names) {\n\t\t\tconst definition = definitions_by_name.get(name);\n\t\t\tif (definition) {\n\t\t\t\tuniq_definitions.push(definition);\n\t\t\t}\n\t\t}\n\t\t// sorting may make dependencies be declared after the function calling them\n\t\t// const sorted_definitions = lodash_sortBy(uniq_definitions, (d)=>d.name())\n\t\treturn uniq_definitions;\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport lodash_uniq from 'lodash/uniq';\n// import {BaseGlNodeType} from '../../gl/_Base';\n// import {OutputGlNode} from '../gl/Output';\nimport {CoreGraph} from '../../../../core/graph/CoreGraph';\nimport {BaseNodeType, TypedNode} from '../../_Base';\nimport {TypedAssembler} from './BaseAssembler';\nimport {MapUtils} from '../../../../core/MapUtils';\nimport {ShaderName} from './ShaderName';\n\ntype NumberByString = Map<string, number>;\ntype BooleanByString = Map<string, boolean>;\ntype BooleanByStringByShaderName = Map<ShaderName, BooleanByString>;\ntype StringArrayByString = Map<string, string[]>;\n\n// interface BaseNodeGlArrayByString {\n// \t[propName: string]: BaseNodeGl[]\n// }\n// interface StringArrayByString {\n// \t[propName: string]: string[]\n// }\n\n// import {LineType, LINE_TYPES} from './CodeBuilder'\n\n// const VERTEX_INPUT_NAMES = [\n// \t'position',\n// \t'normal',\n// \t'gl_PointSize'\n// ]\n// const FRAGMENT_INPUT_NAMES = [\n// \t'color',\n// \t'alpha'\n// ]\n\nexport class TypedNodeTraverser<T extends TypedNode<any, T, any>> {\n\tprivate _leaves_graph_id: BooleanByStringByShaderName = new Map();\n\tprivate _graph_ids_by_shader_name: BooleanByStringByShaderName = new Map();\n\tprivate _outputs_by_graph_id: StringArrayByString = new Map();\n\tprivate _depth_by_graph_id: NumberByString = new Map();\n\tprivate _graph_id_by_depth: Map<number, string[]> = new Map();\n\tprivate _graph: CoreGraph;\n\tprivate _shader_name!: ShaderName;\n\n\tconstructor(private _assembler: TypedAssembler<T>, private _gl_parent_node: BaseNodeType) {\n\t\tthis._graph = this._gl_parent_node.scene.graph;\n\t}\n\n\tprivate reset() {\n\t\tthis._leaves_graph_id.clear();\n\t\tthis._outputs_by_graph_id.clear();\n\t\tthis._depth_by_graph_id.clear();\n\t\tthis._graph_id_by_depth.clear();\n\n\t\tthis.shader_names().forEach((shader_name) => {\n\t\t\tthis._graph_ids_by_shader_name.set(shader_name, new Map());\n\t\t});\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\tinput_names_for_shader_name(root_node: T, shader_name: ShaderName) {\n\t\treturn this._assembler.input_names_for_shader_name(root_node, shader_name);\n\t}\n\n\ttraverse(root_nodes: T[]) {\n\t\tthis.reset();\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._leaves_graph_id.set(shader_name, new Map());\n\t\t}\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._shader_name = shader_name;\n\t\t\tfor (let root_node of root_nodes) {\n\t\t\t\tthis.find_leaves_from_root_node(root_node);\n\t\t\t\tthis.set_nodes_depth();\n\t\t\t}\n\t\t}\n\n\t\t// graph_ids.forEach((graph_id) => {\n\t\tthis._depth_by_graph_id.forEach((depth: number, graph_id: string) => {\n\t\t\tif (depth != null) {\n\t\t\t\t// this._graph_id_by_depth.set(depth, this._graph_id_by_depth.get(depth) || []);\n\t\t\t\t// this._graph_id_by_depth.get(depth)?.push(graph_id);\n\t\t\t\tMapUtils.push_on_array_at_entry(this._graph_id_by_depth, depth, graph_id);\n\t\t\t}\n\t\t});\n\t}\n\n\tleaves_from_nodes(nodes: T[]) {\n\t\tthis._shader_name = ShaderName.LEAVES_FROM_NODES_SHADER;\n\t\tthis._graph_ids_by_shader_name.set(this._shader_name, new Map());\n\t\tthis._leaves_graph_id.set(this._shader_name, new Map());\n\t\tfor (let node of nodes) {\n\t\t\tthis.find_leaves(node);\n\t\t}\n\n\t\tconst node_ids: string[] = [];\n\t\tthis._leaves_graph_id.get(this._shader_name)?.forEach((value: boolean, key: string) => {\n\t\t\tnode_ids.push(key);\n\t\t});\n\t\treturn this._graph.nodes_from_ids(node_ids) as T[];\n\t}\n\n\tnodes_for_shader_name(shader_name: ShaderName) {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((value: string[], key: number) => {\n\t\t\tdepths.push(key);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tgraph_ids_for_depth.forEach((graph_id: string) => {\n\t\t\t\t\tconst is_present = this._graph_ids_by_shader_name.get(shader_name)?.get(graph_id);\n\t\t\t\t\tif (is_present) {\n\t\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tsorted_nodes() {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((ids: string[], depth: number) => {\n\t\t\tdepths.push(depth);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tfor (let graph_id of graph_ids_for_depth) {\n\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tprivate find_leaves_from_root_node(root_node: T) {\n\t\t// if(this._shader_name == ShaderName.VERTEX){\n\t\t// this._leaves_graph_id[this._shader_name] = {}\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(root_node.graph_node_id, true);\n\n\t\tconst input_names = this.input_names_for_shader_name(root_node, this._shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\t// if (root_node.type == 'output') {\n\t\t\t\tconst input = root_node.io.inputs.named_input(input_name);\n\t\t\t\tif (input) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(\n\t\t\t\t\t\tthis._outputs_by_graph_id,\n\t\t\t\t\t\tinput.graph_node_id,\n\t\t\t\t\t\troot_node.graph_node_id\n\t\t\t\t\t);\n\t\t\t\t\tthis.find_leaves(input);\n\t\t\t\t}\n\t\t\t\t// TODO: typescript - GL - check that I dont need to consider the Attrib as a special case\n\t\t\t\t// } else {\n\t\t\t\t// \t// if attribute\n\t\t\t\t// \tconst input = root_node.io.inputs.connected_named_input();\n\t\t\t\t// \tif (input) {\n\t\t\t\t// \t\tthis.find_leaves(input);\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// const position_input = this._output.named_input('position')\n\t\t// const normal_input = this._output.named_input('normal')\n\t\t// const instancePosition_input = this._output.named_input('instancePosition')\n\t\t// if(position_input){ this.find_leaves(position_input) }\n\t\t// if(normal_input){ this.find_leaves(normal_input) }\n\t\t// if(instancePosition_input){ this.find_leaves(instancePosition_input) }\n\t\t// }\n\t\t// if(this._shader_name == ShaderName.FRAGMENT){\n\t\t// \tthis._leaves_graph_id[this._shader_name] = {}\n\t\t// \tFRAGMENT_INPUT_NAMES.forEach(name=>{\n\t\t// \t\tconst input = this._output.named_input(name)\n\t\t// \t\tif(input){\n\t\t// \t\t\tthis.find_leaves(input)\n\t\t// \t\t}\n\t\t// \t})\n\t\t// \t// const color_input = this._output.named_input('color')\n\t\t// \t// const alpha_input = this._output.named_input('alpha')\n\t\t// \t// if(color_input){ this.find_leaves(color_input) }\n\t\t// \t// if(alpha_input){ this.find_leaves(alpha_input) }\n\t\t// }\n\n\t\tthis._outputs_by_graph_id.forEach((outputs: string[], graph_id: string) => {\n\t\t\tthis._outputs_by_graph_id.set(graph_id, lodash_uniq(outputs));\n\t\t});\n\t}\n\n\tprivate find_leaves(node: T) {\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(node.graph_node_id, true);\n\n\t\tconst inputs = lodash_compact(node.io.inputs.inputs());\n\t\tconst input_graph_ids = lodash_uniq(inputs.map((n) => n.graph_node_id));\n\t\tconst unique_inputs = input_graph_ids.map((graph_id) => this._graph.node_from_id(graph_id)) as T[];\n\t\tif (unique_inputs.length > 0) {\n\t\t\t// const promises = unique_inputs.forEach((input)=>{\n\t\t\tfor (let input of unique_inputs) {\n\t\t\t\tMapUtils.push_on_array_at_entry(this._outputs_by_graph_id, input.graph_node_id, node.graph_node_id);\n\n\t\t\t\tthis.find_leaves(input);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._leaves_graph_id.get(this._shader_name)!.set(node.graph_node_id, true);\n\t\t}\n\t}\n\n\tprivate set_nodes_depth() {\n\t\tthis._leaves_graph_id.forEach((booleans_by_graph_id, shader_name) => {\n\t\t\tbooleans_by_graph_id.forEach((boolean, graph_id) => {\n\t\t\t\tthis.set_node_depth(graph_id);\n\t\t\t});\n\t\t});\n\t\t// const leave_ids = Object.keys(this._leaves_graph_id[this._shader_name]);\n\t\t// leave_ids.forEach((graph_id) => {\n\t\t// \tthis.set_node_depth(graph_id);\n\t\t// });\n\t}\n\n\tprivate set_node_depth(graph_id: string, depth: number = 0) {\n\t\tconst current_depth = this._depth_by_graph_id.get(graph_id);\n\t\tif (current_depth != null) {\n\t\t\tthis._depth_by_graph_id.set(graph_id, Math.max(current_depth, depth));\n\t\t} else {\n\t\t\tthis._depth_by_graph_id.set(graph_id, depth);\n\t\t}\n\n\t\t// const node = this._graph.node_from_id(graph_id);\n\n\t\tconst output_ids = this._outputs_by_graph_id.get(graph_id);\n\t\tif (output_ids) {\n\t\t\toutput_ids.forEach((output_id) => {\n\t\t\t\tthis.set_node_depth(output_id, depth + 1);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {Connection} from './GlData';\n// import {Definition} from './Definition/_Module';\n// import {ShaderName} from './Assembler/Util/CodeBuilder';\n\n// list of globals\n// https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)\n// gl_PointCoord\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass GlobalsGlParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new GlobalsGlParamsConfig();\n\nexport class GlobalsGlNode extends TypedGlNode<GlobalsGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'globals';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_globals_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller?.assembler.set_node_lines_globals(this, shaders_collection_controller);\n\t\t// }\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// // const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\t// const body_lines = []\n\n\t\t// const shader_config = this.shader_config(this._shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\t// let definition\n\t\t// let body_line\n\t\t// for(let output_name of this.used_output_names()){\n\t\t// \tconst var_name = this.gl_var_name(output_name)\n\n\t\t// \tswitch (output_name){\n\t\t// \t\tcase 'frame':\n\t\t// \t\t\tdefinition = new Definition.Uniform(this, 'float', output_name)\n\t\t// \t\t\t// vertex_definitions.push(definition)\n\t\t// \t\t\t// fragment_definitions.push(definition)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\n\t\t// \t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t// \t\t\tbody_lines.push(body_line)\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_FragCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tfragment_body_lines.push(`vec4 ${var_name} = gl_FragCoord`)\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_PointCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tif(this.parent().is_point_material()){\n\t\t// \t\t\t\t\tfragment_body_lines.push(`vec2 ${var_name} = gl_PointCoord`)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tdefault:\n\t\t// \t\t\tconst named_output = this.named_output_by_name(output_name)\n\t\t// \t\t\tconst gl_type = named_output.gl_type()\n\t\t// \t\t\tdefinition = new Definition.Varying(this, gl_type, var_name)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\t\t// \t\t\tif(dependencies.length == 0){\n\t\t// \t\t\t\tbody_lines.push(body_line)\n\t\t// \t\t\t}\n\t\t// \t}\n\t\t// }\n\t\t// // this.set_vertex_definitions(vertex_definitions)\n\t\t// // this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tthis.set_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tthis.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// // this.add_definitions(definitions)\n\t\t// // this.set_vertex_body_lines(vertex_body_lines)\n\t\t// // this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// this.add_body_lines(body_lines)\n\t}\n}\n","import {EventDispatcher} from 'three/src/core/EventDispatcher';\nimport {MOUSE} from 'three/src/constants';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Spherical} from 'three/src/math/Spherical';\nimport {TOUCH} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyOut( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tvar mouseAction;\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tmouseAction = scope.mouseButtons.LEFT;\n\t\t\t\tbreak;\n\n\t\t\tcase 1:\n\n\t\t\t\tmouseAction = scope.mouseButtons.MIDDLE;\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tmouseAction = scope.mouseButtons.RIGHT;\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tmouseAction = - 1;\n\n\t\t}\n\n\t\tswitch ( mouseAction ) {\n\n\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase MOUSE.PAN:\n\n\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault(); // prevent scrolling\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {ThreeToGl} from '../../../Core/ThreeToGl'\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n// import {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n// import {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nclass BaseAdaptiveParamsConfig extends NodeParamsConfig {}\n\nexport abstract class BaseAdaptiveGlNode<T extends BaseAdaptiveParamsConfig> extends TypedGlNode<T> {\n\t// protected abstract gl_output_name(): string;\n\t// protected abstract gl_input_name(index: number): string;\n\t// protected abstract expected_input_types(): ConnectionPointType[];\n\t// protected abstract expected_output_types(): ConnectionPointType[];\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\ninterface MathArg2Options {\n\tin?: [string, string];\n\tout?: string;\n\tdefault_in_type?: ConnectionPointType;\n\tallowed_in_types?: ConnectionPointType[];\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg2Factory(type: string, options: MathArg2Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1'];\n\tconst default_in_type = options.default_in_type;\n\tconst allowed_in_types = options.allowed_in_types;\n\tconst out_type = options.out_type;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\n\t\t\tif (out_type) {\n\t\t\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [out_type]);\n\t\t\t}\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\tif (out_type) {\n\t\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfirst_input_type = default_in_type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || default_in_type || ConnectionPointType.FLOAT;\n\t\t\treturn [type, type];\n\t\t}\n\t};\n}\nexport class DistanceGlNode extends MathFunctionArg2Factory('distance', {\n\tin: ['p0', 'p1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class DotGlNode extends MathFunctionArg2Factory('dot', {\n\tin: ['vec0', 'vec1'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n\tallowed_in_types: [ConnectionPointType.VEC2, ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n\tout_type: ConnectionPointType.FLOAT,\n}) {}\nexport class MaxGlNode extends MathFunctionArg2Factory('max') {}\nexport class MinGlNode extends MathFunctionArg2Factory('min') {}\nexport class ModGlNode extends MathFunctionArg2Factory('mod') {}\nexport class PowGlNode extends MathFunctionArg2Factory('pow', {in: ['x', 'y']}) {}\nexport class ReflectGlNode extends MathFunctionArg2Factory('reflect', {\n\tin: ['I', 'N'],\n\tdefault_in_type: ConnectionPointType.VEC3,\n}) {}\nexport class StepGlNode extends MathFunctionArg2Factory('step', {in: ['edge', 'x']}) {}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport {ConnectionPointType, ConnectionPointTypes} from '../utils/connections/ConnectionPointType';\n\nfunction typed_visible_options(type: ConnectionPointType) {\n\tconst val = ConnectionPointTypes.indexOf(type);\n\treturn {visible_if: {type: val}};\n}\n\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nclass ConstantGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tbool = ParamConfig.BOOLEAN(0, typed_visible_options(ConnectionPointType.BOOL));\n\tint = ParamConfig.INTEGER(0, typed_visible_options(ConnectionPointType.INT));\n\tfloat = ParamConfig.FLOAT(0, typed_visible_options(ConnectionPointType.FLOAT));\n\tvec2 = ParamConfig.VECTOR2([0, 0], typed_visible_options(ConnectionPointType.VEC2));\n\tvec3 = ParamConfig.VECTOR3([0, 0, 0], typed_visible_options(ConnectionPointType.VEC3));\n\tvec4 = ParamConfig.VECTOR4([0, 0, 0, 0], typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new ConstantGlParamsConfig();\nexport class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'constant';\n\t}\n\tstatic readonly OUTPUT_NAME = 'val';\n\tprivate _params_by_type: Map<ConnectionPointType, BaseParamType> | undefined;\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => ConstantGlNode.OUTPUT_NAME);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [this._current_connection_type]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\t// _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst param = this._current_param;\n\t\tif (param) {\n\t\t\tconst connection_type = this._current_connection_type;\n\t\t\tconst value = ThreeToGl.any(param.value);\n\t\t\tconst var_value = this._current_var_name;\n\t\t\tconst body_line = `${connection_type} ${var_value} = ${value}`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t} else {\n\t\t\tconsole.warn(`no param found for constant node for type '${this.pv.type}'`);\n\t\t}\n\t}\n\n\tprivate get _current_connection_type() {\n\t\tif (this.pv.type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\tif (connection_type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\treturn connection_type;\n\t}\n\n\tprivate get _current_param(): BaseParamType {\n\t\tthis._params_by_type =\n\t\t\tthis._params_by_type ||\n\t\t\tnew Map<ConnectionPointType, BaseParamType>([\n\t\t\t\t[ConnectionPointType.BOOL, this.p.bool],\n\t\t\t\t[ConnectionPointType.INT, this.p.int],\n\t\t\t\t[ConnectionPointType.FLOAT, this.p.float],\n\t\t\t\t[ConnectionPointType.VEC2, this.p.vec2],\n\t\t\t\t[ConnectionPointType.VEC3, this.p.vec3],\n\t\t\t\t[ConnectionPointType.VEC4, this.p.vec4],\n\t\t\t]);\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\treturn this._params_by_type.get(connection_type)!;\n\t}\n\tprivate get _current_var_name(): string {\n\t\treturn this.gl_var_name(ConstantGlNode.OUTPUT_NAME);\n\t}\n\n\t// private update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tconst current_connection = this.io.outputs.named_output_connection_points[0];\n\t// \tif (current_connection && current_connection.type == this._current_connection_type) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(this._current_connection_type, this._current_connection_type)],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\ninterface MathArg3Options {\n\tin?: [string, string, string];\n\tout?: string;\n\tout_type?: ConnectionPointType;\n\tmethod?: string;\n\tdefault?: Dictionary<any>;\n\tfunctions?: string[];\n}\n\nexport function MathFunctionArg3Factory(type: string, options: MathArg3Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_names = options.in || ['in0', 'in1', 'in2'];\n\tconst gl_input_default_values = options.default || {};\n\tconst out_type = options.out_type || ConnectionPointType.FLOAT;\n\tconst functions = options.functions || [];\n\treturn class Node extends BaseNodeGlMathFunctionArg3GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_names[index];\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\treturn [out_type];\n\t\t}\n\t\tgl_input_default_value(name: string) {\n\t\t\treturn gl_input_default_values[name];\n\t\t}\n\t\tgl_function_definitions(): FunctionGLDefinition[] {\n\t\t\treturn functions.map((f) => new FunctionGLDefinition(this, out_type, f));\n\t\t}\n\t};\n}\nexport class ClampGlNode extends MathFunctionArg3Factory('clamp', {in: ['value', 'min', 'max'], default: {max: 1}}) {}\nexport class FaceforwardGlNode extends MathFunctionArg3Factory('face_forward', {in: ['N', 'I', 'Nref']}) {}\nexport class SmoothStepGlNode extends MathFunctionArg3Factory('smoothstep', {in: ['edge0', 'edge1', 'x']}) {}\n","export default \"\\nfloat fit01(float val, float src_min, float src_max){\\n\\tfloat size = src_max - src_min;\\n\\treturn (val - src_min) / size;\\n}\\nvec2 fit01(vec2 val, vec2 src_min, vec2 src_max){\\n\\treturn vec2(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y)\\n\\t);\\n}\\nvec3 fit01(vec3 val, vec3 src_min, vec3 src_max){\\n\\treturn vec3(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z)\\n\\t);\\n}\\nvec4 fit01(vec4 val, vec4 src_min, vec4 src_max){\\n\\treturn vec4(\\n\\t\\tfit01(val.x, src_min.x, src_max.x),\\n\\t\\tfit01(val.y, src_min.y, src_max.y),\\n\\t\\tfit01(val.z, src_min.z, src_max.z),\\n\\t\\tfit01(val.w, src_min.w, src_max.w)\\n\\t);\\n}\\n\\nfloat fit(float val, float src_min, float src_max, float dest_min, float dest_max){\\n\\tfloat  src_range = src_max - src_min;\\n\\tfloat dest_range = dest_max - dest_min;\\n\\n\\tfloat r = (val - src_min) / src_range;\\n\\treturn (r * dest_range) + dest_min;\\n}\\nvec2 fit(vec2 val, vec2 src_min, vec2 src_max, vec2 dest_min, vec2 dest_max){\\n\\treturn vec2(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y)\\n\\t);\\n}\\nvec3 fit(vec3 val, vec3 src_min, vec3 src_max, vec3 dest_min, vec3 dest_max){\\n\\treturn vec3(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z)\\n\\t);\\n}\\nvec4 fit(vec4 val, vec4 src_min, vec4 src_max, vec4 dest_min, vec4 dest_max){\\n\\treturn vec4(\\n\\t\\tfit(val.x, src_min.x, src_max.x, dest_min.x, dest_max.x),\\n\\t\\tfit(val.y, src_min.y, src_max.y, dest_min.y, dest_max.y),\\n\\t\\tfit(val.z, src_min.z, src_max.z, dest_min.z, dest_max.z),\\n\\t\\tfit(val.w, src_min.w, src_max.w, dest_min.w, dest_max.w)\\n\\t);\\n}\\n\"","export default \"uniform float mNear;\\nuniform float mFar;\\n\\nvarying float vViewZDepth;\\n\\nvoid main() {\\n\\n\\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\\n\\tgl_FragColor = vec4( vec3( color ), 1.0 );\\n\\n}\\n\"","import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\n\nexport const SHADER_DEFAULTS = {\n\tmetalness: 1,\n\troughness: 0.5,\n};\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness);\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness);\n}\n// TODO: add the following texture params:\n// - aoMap+aoMapIntensity\n// - bumpMap+bumpScale\n// - displacementMap+displaycementScale+displacementBias\n// - emissiveMap\n// - envMap\n// - lightMap\n// - metalnessMap\n// - normalMap\n// - roughnessMap,\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends TypedMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\t\tthis.texture_env_map_controller.update();\n\n\t\tif (this._material) {\n\t\t\tthis._material.envMapIntensity = this.pv.env_map_intensity;\n\t\t\tthis._material.roughness = this.pv.roughness;\n\t\t\tthis._material.metalness = this.pv.metalness;\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from '../../cop/File';\nimport {TypedMatNode} from '../_Base';\nimport {\n\tBaseTextureMapController,\n\tBooleanParamOptions,\n\tOperatorPathOptions,\n\tUpdateOptions,\n} from './_BaseTextureController';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from '../../utils/params/ParamsConfig';\nexport function TextureEnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_env_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEnvMapController));\n\t\tenv_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.ENV_MAP,\n\t\t\tOperatorPathOptions(TextureEnvMapController, 'use_env_map')\n\t\t);\n\t\tenv_map_intensity = ParamConfig.FLOAT(1, {visible_if: {use_env_map: 1}});\n\t};\n}\nclass TextureEnvMaterial extends Material {\n\tenvMap!: Texture | null;\n}\ntype CurrentMaterial = TextureEnvMaterial | ShaderMaterial;\nclass TextureEnvMapParamsConfig extends TextureEnvMapParamConfig(NodeParamsConfig) {}\nabstract class TextureEnvMapMatNode extends TypedMatNode<CurrentMaterial, TextureEnvMapParamsConfig> {\n\ttexture_env_map_controller!: TextureEnvMapController;\n\tabstract create_material(): CurrentMaterial;\n}\n\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(node: TextureEnvMapMatNode, _update_options: UpdateOptions) {\n\t\tsuper(node, _update_options);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tasync update() {\n\t\tthis._update(this.node.material, 'envMap', this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tstatic async update(node: TextureEnvMapMatNode) {\n\t\tnode.texture_env_map_controller.update();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerPoints} from '../gl/code/assemblers/materials/Points';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass PointsMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerPoints, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points_builder';\n\t}\n\n\tinitialize_node() {}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerPoints>(this, ShaderAssemblerPoints);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import lodash_isNaN from 'lodash/isNaN';\nimport {Camera} from 'three/src/cameras/Camera';\n\nimport {CoreTransform} from '../../../core/Transform';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {ControlsController} from './utils/cameras/ControlsController';\nimport {LayersController} from './utils/LayersController';\nimport {PostProcessController} from './utils/cameras/PostProcessController';\n\n// import {Dirtyable} from './Concerns/Dirtyable';\n// import {Layers} from './Concerns/Layers';\n// import {PostProcess} from './Concerns/PostProcess';\n// import {Transformed} from './Concerns/Transformed';\n// import {Background} from './Concerns/Background';\n// import {CoreTextureLoader} from '../../../Core/Loader/Texture'\n// import {CameraControls} from './Concerns/CameraControls';\n// import {File} from '../../../Engine/Node/Cop/File'\nimport {ThreejsViewer} from '../../viewers/Threejs';\nimport {BaseBackgroundController} from './utils/cameras/background/_BaseController';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport interface OrthoOrPerspCamera extends Camera {\n\tnear: number;\n\tfar: number;\n\tupdateProjectionMatrix: () => void;\n\tgetFocalLength?: () => void;\n}\n\nconst EVENT_CHANGE = {type: 'change'};\n\nexport const BASE_CAMERA_DEFAULT = {\n\tnear: 1.0,\n\tfar: 100.0,\n};\n\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\nimport {TypedObjNode} from './_Base';\n\nexport function CameraTransformParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcamera = ParamConfig.FOLDER();\n\t\tcontrols = ParamConfig.OPERATOR_PATH('', {\n\t\t\tnode_selection: {\n\t\t\t\tcontext: NodeContext.EVENT,\n\t\t\t},\n\t\t});\n\t\t// add transform params\n\t\t// t = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// r = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// s = ParamConfig.VECTOR3([1, 1, 1]);\n\t\t// scale = ParamConfig.FLOAT(1);\n\t\ttarget = ParamConfig.VECTOR3([0, 0, 0], {cook: false});\n\t\tnear = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t\tfar = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t\t// aspect = ParamConfig.FLOAT(1);\n\t\t// lock_width = ParamConfig.BOOLEAN(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('');\n\n\t\tset_master_camera = ParamConfig.BUTTON(null, {\n\t\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\t\tBaseCameraObjNodeClass.PARAM_CALLBACK_set_master_camera(node as BaseCameraObjNodeType);\n\t\t\t},\n\t\t});\n\t};\n}\n\nexport class BaseCameraObjParamsConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(TransformedParamConfig(LayerParamConfig(CameraTransformParamConfig(NodeParamsConfig))))\n) {}\n\nexport class TypedCameraObjNode<O extends OrthoOrPerspCamera, K extends BaseCameraObjParamsConfig> extends TypedObjNode<\n\tO,\n\tK\n> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.CAMERA;\n\tprotected _object!: O;\n\tprotected _aspect: number = -1;\n\tget object() {\n\t\treturn this._object;\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprotected _background_controller: BaseBackgroundController | undefined;\n\tget background_controller(): BaseBackgroundController {\n\t\treturn (this._background_controller =\n\t\t\tthis._background_controller || new this.background_controller_constructor(this));\n\t}\n\tprotected get background_controller_constructor() {\n\t\treturn BaseBackgroundController;\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller(): ControlsController {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _layers_controller: LayersController | undefined;\n\tget layers_controller() {\n\t\treturn (this._layers_controller = this._layers_controller || new LayersController(this));\n\t}\n\tprotected _post_process_controller: PostProcessController | undefined;\n\tget post_process_controller(): PostProcessController {\n\t\treturn (this._post_process_controller = this._post_process_controller || new PostProcessController(this));\n\t}\n\n\t// protected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active || false);\n\t\t// });\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\t// create_common_params() {\n\t// \t// this.within_param_folder('transform', () => {\n\t// \t// \t// this.add_param(ParamType.OPERATOR_PATH, 'controls', '', {\n\t// \t// \t// \tnode_selection: {\n\t// \t// \t// \t\tcontext: NodeContext.EVENT,\n\t// \t// \t// \t},\n\t// \t// \t// });\n\t// \t// \t// CoreTransform.create_params(this); // removed since they are now added Persp Camera\n\t// \t// \t// this.add_param( ParamType.TOGGLE, 'is_updating', 0, {cook: false, hidden: true}); //, hidden: true} )\n\t// \t// \t// this.add_param(ParamType.VECTOR3, 'target', [0, 0, 0], {cook: false}); //, hidden: true} )\n\t// \t// });\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.layers_controller.add_params();\n\t// \t// this.add_param(ParamType.FLOAT, 'near', BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.FLOAT, 'far', BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.BOOLEAN, 'lock_width', 1);\n\t// \t// });\n\t// \t// this.background_controller.add_params();\n\t// \t// this.post_process_controller.add_params();\n\t// }\n\n\t// create_player_camera_params() {\n\t// \tthis.add_param(ParamType.BUTTON, 'set_master_camera', null, {callback: this.set_as_master_camera.bind(this)});\n\t// }\n\t// is_updating():boolean{\n\t// \treturn this.param('is_updating').value()\n\t// }\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tasync cook() {\n\t\tthis.transform_controller.update();\n\t\tthis.layers_controller.update();\n\t\tawait this.background_controller.update();\n\n\t\tif (this._object.near != this.pv.near || this._object.far != this.pv.far) {\n\t\t\tthis._object.near = this.pv.near;\n\t\t\tthis._object.far = this.pv.far;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\n\t\tawait this.post_process_controller.update_composer_passes();\n\t\tthis.update_camera();\n\t\tthis.controls_controller.update_controls();\n\n\t\t// TODO: ideally the update transform and update camera\n\t\t// can both return if the camera has changed\n\t\t// and we can run this here instead of inside the update_transform and update_camera\n\t\t// this._object.dispatchEvent( EVENT_CHANGE )\n\t\tthis._object.dispatchEvent(EVENT_CHANGE);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\ton_create() {}\n\t//\n\ton_delete() {}\n\t//\n\n\tcamera() {\n\t\treturn this._object;\n\t}\n\n\tupdate_camera() {}\n\n\t//\n\tstatic PARAM_CALLBACK_set_master_camera(node: BaseCameraObjNodeType) {\n\t\tnode.set_as_master_camera();\n\t}\n\tset_as_master_camera() {\n\t\tthis.scene.cameras_controller.set_master_camera_node_path(this.full_path());\n\t}\n\n\tsetup_for_aspect_ratio(aspect: number) {\n\t\tif (lodash_isNaN(aspect)) {\n\t\t\treturn;\n\t\t}\n\t\tif (aspect && this._aspect != aspect) {\n\t\t\tthis._aspect = aspect;\n\t\t\tthis._update_for_aspect_ratio();\n\t\t}\n\t}\n\tprotected _update_for_aspect_ratio(): void {}\n\n\tupdate_transform_params_from_object() {\n\t\t// CoreTransform.set_params_from_matrix(this._object.matrix, this, {scale: false})\n\t\tCoreTransform.set_params_from_object(this._object, this);\n\t}\n\tcreate_viewer(element: HTMLElement): ThreejsViewer {\n\t\treturn new ThreejsViewer(element, this.scene, this);\n\t}\n}\n// \tconsole.warn \"camera #{this.full_path()} has no controls assigned\"\n\n// controls_node: ->\n// \tif @_param_controls? && @_param_controls != ''\n// \t\tCore.Walker.find_node(this, @_param_controls)\n\nexport type BaseCameraObjNodeType = TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig>;\nexport class BaseCameraObjNodeClass extends TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig> {}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_compact from 'lodash/compact';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_trim from 'lodash/trim';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_sum from 'lodash/sum';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\n// const THREE = {Box3, BufferGeometry, Group, LineSegments, Mesh, Object3D, Points, Vector3}\nimport {CoreObject} from './Object';\nimport {CoreGeometry} from './Geometry';\nimport {CoreAttribute} from './Attribute';\n// import {Core} from '../_Module'\nimport {CoreString} from '../String';\nimport {CoreConstant, AttribClass} from './Constant';\n\n// import './MonkeyPatch'\n\nexport type GroupString = string;\n\nexport interface Object3DWithGeometry extends Object3D {\n\tgeometry: BufferGeometry;\n}\n\nexport class CoreGroup {\n\t// _group: Group\n\tprivate _timestamp: number | undefined;\n\t// _core_objects:\n\tprivate _objects: Object3D[] | undefined;\n\tprivate _core_objects: CoreObject[] | undefined;\n\n\t// _geometries: BufferGeometry[];\n\tprivate _core_geometries: CoreGeometry[] | undefined;\n\n\tprivate _bounding_box: Box3 | undefined;\n\t// private _bounding_sphere: Sphere | undefined;\n\n\tconstructor() {\n\t\t//_group: Group){\n\t\t// this._group = _group;\n\t\tthis.touch();\n\t}\n\n\t//\n\t//\n\t// TIMESTAMP\n\t//\n\t//\n\ttimestamp() {\n\t\treturn this._timestamp;\n\t}\n\ttouch() {\n\t\tthis._timestamp = performance.now();\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._bounding_box = undefined;\n\t\t// this._bounding_sphere = undefined;\n\t\tthis._core_geometries = undefined;\n\t\tthis._core_objects = undefined;\n\t}\n\n\t//\n\t//\n\t// CLONE\n\t//\n\t//\n\tclone() {\n\t\tconst core_group = new CoreGroup();\n\t\tif (this._objects) {\n\t\t\tconst objects = [];\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tobjects.push(CoreObject.clone(object));\n\t\t\t}\n\t\t\tcore_group.set_objects(objects);\n\t\t}\n\t\treturn core_group;\n\t}\n\t//\n\t//\n\t// OBJECTS\n\t//\n\t//\n\tset_objects(objects: Object3D[]) {\n\t\tthis._objects = objects;\n\t\tthis.touch();\n\t}\n\tobjects() {\n\t\treturn this._objects as Object3DWithGeometry[];\n\t}\n\tcore_objects() {\n\t\treturn (this._core_objects = this._core_objects || this._create_core_objects());\n\t}\n\tprivate _create_core_objects(): CoreObject[] {\n\t\tconst list: CoreObject[] = [];\n\t\tif (this._objects) {\n\t\t\tfor (let i = 0; i < this._objects.length; i++) {\n\t\t\t\tthis._objects[i].traverse((object) => {\n\t\t\t\t\tconst core_object = new CoreObject(object, i);\n\t\t\t\t\tlist.push(core_object);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\t// group() {\n\t// \treturn this._group;\n\t// }\n\t// uuid() {\n\t// \treturn this._group.uuid;\n\t// }\n\n\tgeometries(): BufferGeometry[] {\n\t\t// this._geometries = [];\n\t\t// for (let object of this._objects) {\n\t\t// \tobject.traverse((object) => this.__geometry_from_object.bind(this)(this._geometries, object));\n\t\t// \t// \tconst geometry = this.geometry_from_object(object)\n\t\t// \t// \tif (geometry != null) {\n\t\t// \t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t// \t// \t}\n\t\t// \t// });\n\t\t// }\n\t\t// return this._geometries;\n\t\tconst list: BufferGeometry[] = [];\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tconst geometry = (core_object.object() as Mesh).geometry as BufferGeometry;\n\t\t\tif (geometry) {\n\t\t\t\tlist.push(geometry);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tcore_geometries(): CoreGeometry[] {\n\t\treturn (this._core_geometries = this._core_geometries || this.create_core_geometries());\n\t}\n\tprivate create_core_geometries() {\n\t\tconst list: CoreGeometry[] = [];\n\t\tfor (let geometry of this.geometries()) {\n\t\t\tlist.push(new CoreGeometry(geometry));\n\t\t\t// object.traverse(object=> this.__core_geometry_from_object.bind(this)(this._core_geometries, object))\n\t\t\t// \tconst geometry = this.geometry_from_object(object)\n\t\t\t// \tif (geometry != null) {\n\t\t\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t\t// \t}\n\t\t\t// });\n\t\t}\n\t\treturn list;\n\t}\n\t__geometry_from_object(list: BufferGeometry[], object: Mesh) {\n\t\tif (object.geometry) {\n\t\t\treturn list.push(object.geometry as BufferGeometry);\n\t\t}\n\t}\n\t// __core_geometry_from_object(list, object){\n\t// \tconst geometry = CoreGroup.geometry_from_object(object)\n\t// \tif (geometry != null) {\n\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t// \t}\n\t// }\n\tstatic geometry_from_object(object: Object3D): BufferGeometry | null {\n\t\tif ((object as Mesh).isMesh || (object as LineSegments).isLine || (object as Points).isPoints) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t}\n\t\treturn null;\n\t}\n\tfaces() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.faces()));\n\t}\n\tpoints() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.points()));\n\t}\n\tpoints_count() {\n\t\treturn lodash_sum(this.core_geometries().map((g) => g.points_count()));\n\t}\n\tpoints_from_group(group: GroupString) {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tconst points = this.points();\n\t\t\treturn lodash_compact(indices.map((i) => points[i]));\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tstatic from_objects(objects: Object3D[]): CoreGroup {\n\t\tconst core_group = new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\treturn core_group;\n\t}\n\n\t// objects() {\n\t// \treturn this._objects = lodash_map(this._group.children, (object, i)=> {\n\t// \t\tconst object_wrapper = new CoreObject(object);\n\t// \t\tobject_wrapper.set_index(i);\n\t// \t\treturn object_wrapper;\n\t// \t});\n\t// }\n\tobjects_from_group(group_name: string): Object3D[] {\n\t\treturn this.core_objects_from_group(group_name).map((co) => co.object());\n\t}\n\tcore_objects_from_group(group_name: string): CoreObject[] {\n\t\tgroup_name = lodash_trim(group_name);\n\n\t\tif (group_name !== '') {\n\t\t\tconst index = parseInt(group_name);\n\t\t\tif (!lodash_isNaN(index)) {\n\t\t\t\treturn lodash_compact([this.core_objects()[index]]);\n\t\t\t} else {\n\t\t\t\treturn this.core_objects().filter((core_object) => {\n\t\t\t\t\treturn CoreString.match_mask(group_name, core_object.name());\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.core_objects();\n\t\t}\n\t}\n\n\t// reset: ->\n\t// \t@_geometries = []\n\t// \t@_points = []\n\n\t// _find_geometries: ->\n\t// \tlist = []\n\t// \t@_group.traverse (object)=>\n\t// \t\tif (geometry = object.geometry)?\n\t// \t\t\tlist.push new Geometry(geometry)\n\t// \tlist\n\n\t// _find_points: ->\n\t// \tlodash_flatten( lodash_map(this.objects(), (g)->g.points()) )\n\n\t// bounding_box() {\n\t// \treturn new Box3().setFromObject(this._group);\n\t// }\n\tbounding_box(): Box3 {\n\t\treturn (this._bounding_box = this._bounding_box || this._compute_bounding_box());\n\t}\n\t// bounding_sphere(): Sphere {\n\t// \treturn (this._bounding_sphere = this._bounding_sphere || this._compute_bounding_sphere());\n\t// }\n\tcenter(): Vector3 {\n\t\tconst center = new Vector3();\n\t\tthis.bounding_box().getCenter(center);\n\t\treturn center;\n\t}\n\tsize(): Vector3 {\n\t\tconst size = new Vector3();\n\t\tthis.bounding_box().getSize(size);\n\t\treturn size;\n\t}\n\n\tprivate _compute_bounding_box() {\n\t\tlet bbox: Box3 | undefined; // = new Box3();\n\t\tif (this._objects) {\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t\t\t\tgeometry.computeBoundingBox();\n\t\t\t\tif (bbox) {\n\t\t\t\t\tbbox.expandByObject(object);\n\t\t\t\t} else {\n\t\t\t\t\tif (geometry.boundingBox) {\n\t\t\t\t\t\tbbox = geometry.boundingBox.clone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbbox = bbox || new Box3(new Vector3(-1, -1, -1), new Vector3(+1, +1, +1));\n\t\treturn bbox;\n\t}\n\t// private _compute_bounding_sphere() {\n\t// \tlet sphere: Sphere | undefined; // = new Box3();\n\t// \tif (this._objects) {\n\t// \t\tfor (let object of this._objects) {\n\t// \t\t\tconst geometry = (object as Object3DWithGeometry).geometry;\n\t// \t\t\tgeometry.computeBoundingSphere();\n\t// \t\t\tif (sphere) {\n\t// \t\t\t\tsphere.expandByObject(object);\n\t// \t\t\t} else {\n\t// \t\t\t\tsphere = geometry.boundingBox.clone();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tsphere = sphere || new Sphere(new Vector3(0, 0, 0), 1);\n\t// \treturn sphere;\n\t// }\n\tcompute_vertex_normals() {\n\t\tfor (let object of this.core_objects()) {\n\t\t\tobject.compute_vertex_normals();\n\t\t}\n\t}\n\n\thas_attrib(name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.has_attrib(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tattrib_type(name: string) {\n\t\tconst first_geometry = this.core_geometries()[0];\n\t\tif (first_geometry != null) {\n\t\t\treturn first_geometry.attrib_type(name);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trename_attrib(old_name: string, new_name: string, attrib_class: AttribClass) {\n\t\tswitch (attrib_class) {\n\t\t\tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst geometry = CoreGroup.geometry_from_object(child);\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\t\t\t\t\t\t\t\tcore_geometry.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst core_object = new CoreObject(child, 0);\n\t\t\t\t\t\t\t\tcore_object.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tattrib_names() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tobject_attrib_names() {\n\t\tlet first_object;\n\t\tif ((first_object = this.core_objects()[0]) != null) {\n\t\t\treturn first_object.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tattrib_names_matching_mask(masks_string: GroupString) {\n\t\tconst masks = CoreString.attrib_names(masks_string);\n\n\t\tconst matching_attrib_names = [];\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\tfor (let mask of masks) {\n\t\t\t\tif (CoreString.match_mask(attrib_name, mask)) {\n\t\t\t\t\tmatching_attrib_names.push(attrib_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lodash_uniq(matching_attrib_names);\n\t}\n\n\tattrib_sizes() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_sizes();\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\tattrib_size(attrib_name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_size(attrib_name);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_geometry of this.core_geometries()) {\n\t\t\tcore_geometry.add_numeric_attrib(name, size, default_value);\n\t\t}\n\t}\n\n\tadd_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tcore_object.add_numeric_attrib(name, default_value);\n\t\t}\n\t}\n\n\tstatic clone(src_group: Group) {\n\t\tconst new_group = new Group();\n\n\t\tsrc_group.children.forEach((src_object) => {\n\t\t\tconst new_object = CoreObject.clone(src_object);\n\t\t\tnew_group.add(new_object);\n\t\t});\n\n\t\treturn new_group;\n\t}\n}\n","import {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// const THREE = {BufferGeometry, Vector2, Vector3, Vector4}\nimport {CoreAttribute} from './Attribute';\nimport {CoreGeometry} from './Geometry';\nimport {CoreEntity} from './Entity';\n// import Geometry from './Geometry';\n\nconst ATTRIB_NAMES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n};\n\nenum ComponentName {\n\tx = 'x',\n\ty = 'y',\n\tz = 'z',\n\tw = 'w',\n\tr = 'r',\n\tg = 'g',\n\tb = 'b',\n}\nconst COMPONENT_INDICES = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\nconst PTNUM = 'ptnum';\nconst DOT = '.';\n\nexport class CorePoint extends CoreEntity {\n\t_geometry: BufferGeometry;\n\t_position: Vector3 | undefined;\n\t_normal: Vector3 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, index: number) {\n\t\tsuper(index);\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\n\tgeometry_wrapper() {\n\t\treturn this._core_geometry;\n\t}\n\tgeometry() {\n\t\treturn (this._geometry = this._geometry || this._core_geometry.geometry());\n\t}\n\n\t// add_attribute: (name, size, value)->\n\t// \t@_attributes[name] = new Attribute(size, value)\n\n\tattrib_size(name: string): number {\n\t\t//@_attributes[name].size()\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.getAttribute(name).itemSize;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tconst remapped_name = CoreAttribute.remap_name(name);\n\t\treturn this._core_geometry.has_attrib(remapped_name);\n\t}\n\n\tattrib_value(name: string) {\n\t\t//, target){ // target could be used, but not entirely sure I am ready now\n\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet component_name = null;\n\t\t\tlet component_index = null;\n\t\t\tif (name[name.length - 2] === DOT) {\n\t\t\t\tcomponent_name = name[name.length - 1] as ComponentName;\n\t\t\t\tcomponent_index = COMPONENT_INDICES[component_name];\n\t\t\t\tname = name.substring(0, name.length - 2);\n\t\t\t}\n\t\t\tconst remaped_name = CoreAttribute.remap_name(name);\n\n\t\t\t//if (attrib = @_attributes[name])?\n\t\t\tconst attrib = this._geometry.getAttribute(remaped_name);\n\t\t\tif (attrib) {\n\t\t\t\tconst {array} = attrib;\n\t\t\t\tif (this._core_geometry.is_attrib_indexed(remaped_name)) {\n\t\t\t\t\tconst value_index = this.attrib_value_index(remaped_name); //attrib.value()\n\t\t\t\t\treturn this._core_geometry.user_data_attrib(remaped_name)[value_index];\n\t\t\t\t} else {\n\t\t\t\t\tconst size = attrib.itemSize;\n\t\t\t\t\tconst start_index = this._index * size;\n\n\t\t\t\t\tif (component_index == null) {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn new Vector2(array[start_index + 0], array[start_index + 1]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// target.fromArray(array, start_index)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn new Vector4(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2],\n\t\t\t\t\t\t\t\t\tarray[start_index + 3]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow `size not valid (${size})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn array[start_index + component_index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst message = `attrib ${name} not found. availables are: ${Object.keys(\n\t\t\t\t\tthis._geometry.attributes || {}\n\t\t\t\t).join(',')}`;\n\t\t\t\tconsole.warn(message);\n\t\t\t\tthrow message;\n\t\t\t}\n\t\t}\n\t}\n\n\tattrib_value_index(name: string) {\n\t\tif (this._core_geometry.is_attrib_indexed(name)) {\n\t\t\t//@_attributes[name].value()\n\t\t\treturn this._geometry.getAttribute(name).array[this._index];\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tposition(): Vector3 {\n\t\t//@_attributes['position'].value()\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.POSITION);\n\t\tthis._position = this._position || new Vector3();\n\t\treturn this._position.fromArray(array, this._index * 3);\n\t}\n\tset_position(new_position: Vector3) {\n\t\tthis.set_attrib_value_vector3(ATTRIB_NAMES.POSITION, new_position);\n\t}\n\n\tnormal(): Vector3 {\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.NORMAL);\n\t\tthis._normal = this._normal || new Vector3();\n\t\treturn this._normal.fromArray(array, this._index * 3);\n\t}\n\tset_normal(new_normal: Vector3) {\n\t\treturn this.set_attrib_value_vector3(ATTRIB_NAMES.NORMAL, new_normal);\n\t}\n\n\tset_attrib_value(name: string, value: NumericAttribValue | string) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(value)\n\t\t//value = attrib.value()\n\t\t//value = this.attrib_value()\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst attrib_size = attrib.itemSize;\n\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tarray[this._index] = value as number;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tconst v2 = value as Vector2Like;\n\t\t\t\tarray[this._index * 2 + 0] = v2.x;\n\t\t\t\tarray[this._index * 2 + 1] = v2.y;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tconst is_color = (value as ColorLike).r != null;\n\t\t\t\tif (is_color) {\n\t\t\t\t\tconst col = value as ColorLike;\n\t\t\t\t\tarray[this._index * 3 + 0] = col.r;\n\t\t\t\t\tarray[this._index * 3 + 1] = col.g;\n\t\t\t\t\tarray[this._index * 3 + 2] = col.b;\n\t\t\t\t} else {\n\t\t\t\t\tconst v3 = value as Vector3Like;\n\t\t\t\t\tarray[this._index * 3 + 0] = v3.x;\n\t\t\t\t\tarray[this._index * 3 + 1] = v3.y;\n\t\t\t\t\tarray[this._index * 3 + 2] = v3.z;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Point.set_attrib_value does not yet allow attrib size ${attrib_size}`);\n\t\t\t\tthrow `attrib size ${attrib_size} not implemented`;\n\t\t}\n\t}\n\tset_attrib_value_vector3(name: string, value: Vector3) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst i = this._index * 3;\n\n\t\tarray[i] = value.x;\n\t\tarray[i + 1] = value.y;\n\t\tarray[i + 2] = value.z;\n\t}\n\n\tset_attrib_index(name: string, new_value_index: number) {\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(new_value_index)\n\t\t//value = attrib.value()\n\t\tconst array = this._geometry.getAttribute(name).array as number[];\n\t\treturn (array[this._index] = new_value_index);\n\t}\n}\n","export class CoreEntity {\n\tconstructor(protected _index: number) {}\n\tget index() {\n\t\treturn this._index;\n\t}\n}\n","type IterateeMethod = (element: any, index?: number) => void;\ntype IterateeMethodArray = IterateeMethod; // TODO: check this, as the element may be an array\ntype IterateeMethodCount = (index: number) => void;\n\ninterface CoreIteratorOptions {\n\tmax_time_per_chunk?: number;\n\tcheck_every_interations?: number;\n}\n\nexport class CoreIterator {\n\t// array\n\tprivate _array: any[] | undefined;\n\tprivate _iteratee_method_array: IterateeMethodArray | undefined;\n\tprivate _bound_next_with_array: (() => void) | undefined;\n\tprivate _current_array_element: any;\n\tprivate _array_index: number = 0;\n\n\t// count\n\tprivate _count: number = 0;\n\tprivate _iteratee_method_count: IterateeMethodCount | undefined;\n\tprivate _bound_next_with_count: (() => void) | undefined;\n\tprivate _current_count_index: number = 0;\n\n\tprivate _max_time_per_chunk: number;\n\tprivate _check_every_interations: number;\n\n\tprivate _resolve: null | (() => void) = null;\n\n\tconstructor(options: CoreIteratorOptions = {}) {\n\t\tthis._max_time_per_chunk = options.max_time_per_chunk || 10;\n\t\tthis._check_every_interations = options.check_every_interations || 100;\n\t}\n\n\tasync start_with_count(count: number, iteratee_method: IterateeMethodCount) {\n\t\tthis._count = count;\n\t\tthis._current_count_index = 0;\n\t\tthis._iteratee_method_count = iteratee_method;\n\t\tthis._bound_next_with_count = this.next_with_count.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_count();\n\t\t});\n\t}\n\tnext_with_count() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_count && this._bound_next_with_count) {\n\t\t\twhile (this._current_count_index < this._count) {\n\t\t\t\tthis._iteratee_method_count(this._current_count_index);\n\n\t\t\t\tthis._current_count_index++;\n\n\t\t\t\tif (this._current_count_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_count, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_count_index >= this._count) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ARRAY\n\t//\n\t//\n\tasync start_with_array(array: any[], iteratee_method: IterateeMethod) {\n\t\tthis._array = array;\n\t\tthis._array_index = 0;\n\t\tthis._iteratee_method_array = iteratee_method;\n\t\tthis._bound_next_with_array = this.next_with_array.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_array();\n\t\t});\n\t}\n\tnext_with_array() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_array && this._bound_next_with_array && this._array) {\n\t\t\twhile ((this._current_array_element = this._array[this._array_index])) {\n\t\t\t\tthis._iteratee_method_array(this._current_array_element, this._array_index);\n\n\t\t\t\tthis._array_index++;\n\n\t\t\t\tif (this._array_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_array, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_array_element === undefined) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreMath} from '../../math/_Module'\nimport {Vector2} from 'three/src/math/Vector2'\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\n\nexport class CoreGeometryUtilCircle {\n\tstatic positions(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst radian_per_segment =\n\t\t\tCoreMath.degrees_to_radians(arc_angle) / segments_count\n\n\t\tconst positions = []\n\t\tfor (let i = 0; i < segments_count; i++) {\n\t\t\tconst point_radian = radian_per_segment * i\n\t\t\tconst x = radius * Math.cos(point_radian)\n\t\t\tconst y = radius * Math.sin(point_radian)\n\n\t\t\tpositions.push(new Vector2(x, y))\n\t\t}\n\n\t\treturn positions\n\t}\n\n\tstatic create(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst positions_2d = this.positions(radius, segments_count, arc_angle)\n\n\t\tconst positions = []\n\t\tconst indices = []\n\t\tlet position_2d\n\t\tfor (let i = 0; i < positions_2d.length; i++) {\n\t\t\tposition_2d = positions_2d[i]\n\n\t\t\tpositions.push(position_2d.x)\n\t\t\tpositions.push(position_2d.y)\n\t\t\tpositions.push(0)\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1)\n\t\t\t\tindices.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// also add the last segment\n\t\tindices.push(segments_count - 1)\n\t\tindices.push(0)\n\n\t\tconst geometry = new BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(positions, 3)\n\t\t)\n\t\tgeometry.setIndex(indices)\n\n\t\treturn geometry\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {InstancedBufferGeometry} from 'three/src/core/InstancedBufferGeometry';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\n// import {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry'\n// const THREE = {BoxBufferGeometry, InstancedBufferAttribute, InstancedBufferGeometry, Matrix4, Quaternion, Vector2, Vector3}\n\nimport {CorePoint} from './Point';\n// import {Core} from '../_Module';\nimport {CoreGroup} from './Group';\nimport {CoreGeometry} from './Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nconst DEFAULT = {\n\tSCALE: new Vector3(1, 1, 1),\n\tPSCALE: 1,\n\tEYE: new Vector3(0, 0, 0),\n\tUP: new Vector3(0, 1, 0),\n};\nconst SCALE_ATTRIB_NAME = 'scale';\nconst PSCALE_ATTRIB_NAME = 'pscale';\nconst NORMAL_ATTRIB_NAME = 'normal';\nconst UP_ATTRIB_NAME = 'up';\nconst MATRIX_T = 'translate';\nconst MATRIX_R = 'rotate';\nconst MATRIX_S = 'scale';\n\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst ATTRIB_NAME_UV = 'uv';\nconst ATTRIB_NAME_COLOR = 'color';\n\nexport class CoreInstancer {\n\tprivate _is_pscale_present: boolean;\n\tprivate _is_scale_present: boolean;\n\tprivate _is_normal_present: boolean;\n\tprivate _is_up_present: boolean;\n\tprivate _do_rotate_matrices: boolean;\n\tprivate _matrices: Dictionary<Matrix4> = {};\n\n\tconstructor(private _group_wrapper: CoreGroup) {\n\t\tthis._is_pscale_present = this._group_wrapper.has_attrib('pscale');\n\t\tthis._is_scale_present = this._group_wrapper.has_attrib('scale');\n\n\t\tthis._is_normal_present = this._group_wrapper.has_attrib('normal');\n\t\tthis._is_up_present = this._group_wrapper.has_attrib('up');\n\n\t\tthis._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;\n\t}\n\n\tmatrices(): Matrix4[] {\n\t\tthis._matrices = {};\n\t\tthis._matrices[MATRIX_T] = new Matrix4();\n\t\tthis._matrices[MATRIX_R] = new Matrix4();\n\t\tthis._matrices[MATRIX_S] = new Matrix4();\n\n\t\treturn this._group_wrapper.points().map((point) => {\n\t\t\treturn this._matrix_from_point(point);\n\t\t});\n\t}\n\n\t_matrix_from_point(point: CorePoint): Matrix4 {\n\t\tconst t = point.position();\n\t\t//r = new Vector3(0,0,0)\n\t\tlet scale = this._is_scale_present ? point.attrib_value(SCALE_ATTRIB_NAME) : DEFAULT.SCALE;\n\t\tconst pscale = this._is_pscale_present ? point.attrib_value(PSCALE_ATTRIB_NAME) : DEFAULT.PSCALE;\n\t\tscale = scale.clone().multiplyScalar(pscale);\n\n\t\t//matrix = #Core.Transform.matrix(t, r, s, scale)\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.identity();\n\n\t\tconst scale_matrix = this._matrices[MATRIX_S];\n\t\tscale_matrix.makeScale(scale.x, scale.y, scale.z);\n\n\t\tconst translate_matrix = this._matrices[MATRIX_T];\n\t\ttranslate_matrix.makeTranslation(t.x, t.y, t.z);\n\n\t\tmatrix.multiply(translate_matrix);\n\n\t\tif (this._do_rotate_matrices) {\n\t\t\tconst rotate_matrix = this._matrices[MATRIX_R];\n\t\t\tconst eye = DEFAULT.EYE;\n\t\t\tconst center = point.attrib_value(NORMAL_ATTRIB_NAME).multiplyScalar(-1);\n\t\t\tconst up = this._is_up_present ? point.attrib_value(UP_ATTRIB_NAME) : DEFAULT.UP;\n\t\t\tup.normalize();\n\t\t\trotate_matrix.lookAt(eye, center, up);\n\n\t\t\tmatrix.multiply(rotate_matrix);\n\t\t}\n\n\t\tmatrix.multiply(scale_matrix);\n\n\t\treturn matrix;\n\t}\n\n\tstatic create_instance_buffer_geo(\n\t\tgeometry_to_instance: BufferGeometry,\n\t\ttemplate_core_group: CoreGroup,\n\t\tattributes_to_copy: string\n\t) {\n\t\tconst instance_pts = template_core_group.points();\n\t\t// geometry_to_instance = new BoxBufferGeometry( 2, 2, 2 )\n\t\t// geometry = new InstancedBufferGeometry()\n\t\t// geometry.index = geometry_to_instance.index\n\t\t// geometry.attributes.position = geometry_to_instance.attributes.position\n\t\t// geometry.attributes.uv = geometry_to_instance.attributes.uv\n\n\t\tconst geometry = new InstancedBufferGeometry();\n\t\tgeometry.copy(geometry_to_instance);\n\n\t\tconst instances_count = instance_pts.length;\n\t\tconst positions = new Float32Array(instances_count * 3);\n\t\tconst colors = new Float32Array(instances_count * 3);\n\t\tconst scales = new Float32Array(instances_count * 3);\n\t\tconst orients = new Float32Array(instances_count * 4);\n\n\t\tconst has_color = template_core_group.has_attrib(ATTRIB_NAME_COLOR);\n\n\t\tconst position = new Vector3(0, 0, 0);\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tconst instance_matrices = instancer.matrices();\n\n\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\tconst index3 = i * 3;\n\t\t\tconst index4 = i * 4;\n\n\t\t\tconst matrix = instance_matrices[i];\n\t\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\t\tposition.toArray(positions, index3);\n\t\t\tquaternion.toArray(orients, index4);\n\t\t\tscale.toArray(scales, index3);\n\n\t\t\tconst color = has_color ? instance_pt.attrib_value(ATTRIB_NAME_COLOR) : DEFAULT_COLOR;\n\t\t\tcolor.toArray(colors, index3);\n\t\t});\n\n\t\t// if(this._param_add_uv_offset){\n\t\tconst has_uv = template_core_group.has_attrib(ATTRIB_NAME_UV);\n\t\tif (has_uv) {\n\t\t\tconst uvs = new Float32Array(instances_count * 2);\n\t\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\t\tconst index2 = i * 2;\n\t\t\t\tconst uv = has_uv ? instance_pt.attrib_value(ATTRIB_NAME_UV) : DEFAULT_UV;\n\t\t\t\tuv.toArray(uvs, index2);\n\t\t\t});\n\t\t\tgeometry.setAttribute('instanceUv', new InstancedBufferAttribute(uvs, 2));\n\t\t}\n\t\t// }\n\n\t\tgeometry.setAttribute('instancePosition', new InstancedBufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('instanceScale', new InstancedBufferAttribute(scales, 3));\n\t\tgeometry.setAttribute('instanceOrientation', new InstancedBufferAttribute(orients, 4));\n\t\tgeometry.setAttribute('instanceColor', new InstancedBufferAttribute(colors, 3));\n\n\t\tconst attrib_names = template_core_group.attrib_names_matching_mask(attributes_to_copy);\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = template_core_group.attrib_size(attrib_name);\n\t\t\tconst values = new Float32Array(instances_count * attrib_size);\n\t\t\tinstance_pts.forEach((pt, i) => {\n\t\t\t\tconst value = pt.attrib_value(attrib_name);\n\t\t\t\tif (lodash_isNumber(value)) {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue.toArray(values, i * attrib_size);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgeometry.setAttribute(attrib_name, new InstancedBufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\tgeometry_wrapper.mark_as_instance();\n\n\t\treturn geometry;\n\t}\n}\n","// import {Core} from '../../_Module';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isString from 'lodash/isString';\nimport lodash_flatten from 'lodash/flatten';\nimport {Points} from 'three/src/objects/Points';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nconst THREE = {BufferGeometry, Float32BufferAttribute, Points};\n\n// import UrlLoader from '../UrlLoader';\nimport {CoreString} from '../../String';\nimport {CoreGeometry} from '../../geometry/Geometry';\nimport {CoreConstant} from '../../geometry/Constant';\nimport {CoreAttributeData} from '../../geometry/AttributeData';\nimport {CoreAttribute} from '../../geometry/Attribute';\n// import {BaseNodeType} from '../../../engine/nodes/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nconst DEEP_ATTRIB_SEPARATOR = ':';\n\nexport interface JsonDataLoaderOptions {\n\tdata_keys_prefix?: string;\n\tskip_entries?: string;\n\tdo_convert?: boolean;\n\tconvert_to_numeric?: string;\n}\n\nexport class JsonDataLoader {\n\t_json: any[] | undefined;\n\t_attribute_datas_by_name: Dictionary<CoreAttributeData> = {};\n\tprivate _options: JsonDataLoaderOptions = {};\n\n\tconstructor(options: JsonDataLoaderOptions = {}) {\n\t\tthis._options.data_keys_prefix = options.data_keys_prefix;\n\t\tthis._options.skip_entries = options.skip_entries;\n\t\tthis._options.do_convert = options.do_convert || false;\n\t\tthis._options.convert_to_numeric = options.convert_to_numeric;\n\t}\n\t//\n\n\tload(\n\t\turl: string,\n\t\tsuccess_callback: (object: Object3D) => void,\n\t\tprogress_callback: (() => void) | undefined,\n\t\terror_callback: (error: ErrorEvent) => void | undefined\n\t) {\n\t\t// const url_loader = new UrlLoader();\n\t\t// const start_time = performance.now();\n\t\t// const config = {\n\t\t// \tcrossdomain: true\n\t\t// }\n\t\tfetch(url)\n\t\t\t.then(async (response) => {\n\t\t\t\t// const end_time = performance.now();\n\n\t\t\t\tthis._json = await response.json();\n\t\t\t\tif (this._options.data_keys_prefix != null && this._options.data_keys_prefix != '') {\n\t\t\t\t\tthis._json = this.get_prefixed_json(this._json, this._options.data_keys_prefix.split('.'));\n\t\t\t\t}\n\t\t\t\tconst object = this.create_object();\n\t\t\t\tsuccess_callback(object);\n\t\t\t})\n\t\t\t.catch((error: ErrorEvent) => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\terror_callback(error);\n\t\t\t});\n\t}\n\n\tget_prefixed_json(json: any, prefixes: string[]): any[] {\n\t\tif (prefixes.length == 0) {\n\t\t\treturn json;\n\t\t} else {\n\t\t\tconst first_prefix = prefixes.shift();\n\t\t\tif (first_prefix) {\n\t\t\t\treturn this.get_prefixed_json(json[first_prefix], prefixes);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tset_json(json: any) {\n\t\treturn (this._json = json);\n\t}\n\n\tcreate_object() {\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tconst core_geo = new CoreGeometry(geometry);\n\n\t\tif (this._json != null) {\n\t\t\tconst points_count = this._json.length;\n\t\t\tcore_geo.init_position_attribute(points_count);\n\n\t\t\tthis._find_attributes();\n\t\t\t// for(let attrib_name of Object.keys(this._attribute_names)){\n\t\t\t// \tconst attrib_data = this._attribute_datas_by_name[attrib_name];\n\t\t\t// \treturn core_geo.add_attribute(attrib_name, attrib_data);\n\t\t\t// }\n\n\t\t\tconst convert_to_numeric_masks = CoreString.attrib_names(this._options.convert_to_numeric || '');\n\n\t\t\t// set values\n\t\t\tfor (let attrib_name of Object.keys(this._attribute_datas_by_name)) {\n\t\t\t\tlet attrib_values = lodash_flatten(this._attribute_values_for_name(attrib_name));\n\n\t\t\t\tconst data = this._attribute_datas_by_name[attrib_name];\n\t\t\t\tconst size = data.size();\n\n\t\t\t\tif (data.type() === CoreConstant.ATTRIB_TYPE.STRING) {\n\t\t\t\t\t// const index_data = CoreAttribute.array_to_indexed_arrays(\n\t\t\t\t\t// \tattrib_values as string[]\n\t\t\t\t\t// )\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options.do_convert &&\n\t\t\t\t\t\tCoreString.matches_one_mask(attrib_name, convert_to_numeric_masks)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst numerical_attrib_values: number[] = attrib_values.map((v) => {\n\t\t\t\t\t\t\tif (lodash_isString(v)) {\n\t\t\t\t\t\t\t\treturn parseFloat(v) || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t\t\tattrib_name,\n\t\t\t\t\t\t\tnew THREE.Float32BufferAttribute(numerical_attrib_values, size)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(attrib_values as string[]);\n\t\t\t\t\t\tcore_geo.set_indexed_attribute(attrib_name, index_data['values'], index_data['indices']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst numerical_attrib_values = attrib_values as number[];\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new THREE.Float32BufferAttribute(numerical_attrib_values, size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Points(geometry, CoreConstant.MATERIALS[THREE.Points.name]);\n\t}\n\n\tprivate _find_attributes() {\n\t\tlet first_pt;\n\n\t\tconst masks = CoreString.attrib_names(this._options.skip_entries || '');\n\n\t\tif (this._json) {\n\t\t\tif ((first_pt = this._json[0]) != null) {\n\t\t\t\tfor (let attrib_name of Object.keys(first_pt)) {\n\t\t\t\t\tconst attrib_value = first_pt[attrib_name];\n\n\t\t\t\t\tif (this._value_has_subentries(attrib_value)) {\n\t\t\t\t\t\tfor (let key of Object.keys(attrib_value)) {\n\t\t\t\t\t\t\tconst deep_attrib_name = [attrib_name, key].join(DEEP_ATTRIB_SEPARATOR);\n\t\t\t\t\t\t\tconst deep_attrib_value = attrib_value[attrib_name];\n\n\t\t\t\t\t\t\tif (!CoreString.matches_one_mask(deep_attrib_name, masks)) {\n\t\t\t\t\t\t\t\tthis._attribute_datas_by_name[deep_attrib_name] = CoreAttributeData.from_value(\n\t\t\t\t\t\t\t\t\tdeep_attrib_value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!CoreString.matches_one_mask(attrib_name, masks)) {\n\t\t\t\t\t\t\tthis._attribute_datas_by_name[attrib_name] = CoreAttributeData.from_value(attrib_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _attribute_values_for_name(attrib_name: string): StringOrNumber[] {\n\t\tif (this._json) {\n\t\t\treturn this._json.map((json_element: Dictionary<any>) => {\n\t\t\t\tconst prefix = attrib_name.split(DEEP_ATTRIB_SEPARATOR)[0];\n\t\t\t\tconst value = json_element[prefix];\n\t\t\t\tif (this._value_has_subentries(value)) {\n\t\t\t\t\tconst deep_attrib_name = attrib_name.substring(prefix.length + 1);\n\t\t\t\t\treturn value[deep_attrib_name] || 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn value || 0;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t_value_has_subentries(value: any): boolean {\n\t\treturn lodash_isObject(value) && !lodash_isArray(value);\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\tgeometryPending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {CoreGeometry} from '../Geometry'\n// import lodash_range from 'lodash/range'\nimport lodash_flatten from 'lodash/flatten'\nimport lodash_intersection from 'lodash/intersection'\nimport lodash_concat from 'lodash/concat'\n\nexport class CoreGeometryOperationSkin {\n\tconstructor(\n\t\tprivate geometry: BufferGeometry,\n\t\tprivate geometry1: BufferGeometry,\n\t\tprivate geometry0: BufferGeometry\n\t) {}\n\n\tprocess() {\n\t\tconst geometry_wrapper0 = new CoreGeometry(this.geometry0)\n\t\tconst geometry_wrapper1 = new CoreGeometry(this.geometry1)\n\t\tconst segments0 = geometry_wrapper0.segments()\n\t\tconst segments1 = geometry_wrapper1.segments()\n\n\t\tif (segments0.length === 0 || segments1.length === 0) {\n\t\t\treturn\n\t\t}\n\t\t// find smallest geo to iterate on its array\n\t\tconst geometries_by_segments_count =\n\t\t\tsegments0.length < segments1.length\n\t\t\t\t? [geometry_wrapper0, geometry_wrapper1]\n\t\t\t\t: [geometry_wrapper1, geometry_wrapper0]\n\n\t\tconst smallest_geometry = geometries_by_segments_count[0]\n\t\tconst largest_geometry = geometries_by_segments_count[1]\n\n\t\tconst smallest_segments = smallest_geometry.segments()\n\t\tconst largest_segments = largest_geometry.segments()\n\n\t\tconst smallest_points = smallest_geometry.points()\n\t\tconst largest_points = largest_geometry.points()\n\t\tconst smallest_points_count = smallest_points.length\n\t\t// const largest_points_count = largest_points.length;\n\t\tconst all_points = lodash_concat(smallest_points, largest_points)\n\n\t\t// const half_faces_count = smallest_segments.length;\n\t\tconst points_indices: number[] = []\n\t\tsmallest_segments.forEach((segment, i) => {\n\t\t\tconst matched_segment = largest_segments[i]\n\t\t\t// face 1\n\t\t\tpoints_indices.push(segment[0])\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t\t// face 2\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[1] + smallest_points_count)\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t})\n\n\t\tconst attributes_in_common = lodash_intersection(\n\t\t\tsmallest_geometry.attrib_names(),\n\t\t\tlargest_geometry.attrib_names()\n\t\t)\n\t\t// const points = all_points //points_indices.map(index=> all_points[index]);\n\t\tattributes_in_common.forEach((attrib_name) => {\n\t\t\tconst attrib_size = smallest_geometry.attrib_size(attrib_name)\n\t\t\tlet attrib_values = all_points.map((point) =>\n\t\t\t\tpoint.attrib_value(attrib_name)\n\t\t\t)\n\t\t\tif (attrib_size > 1) {\n\t\t\t\tattrib_values = lodash_flatten(\n\t\t\t\t\tattrib_values.map((v) => v.toArray())\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.geometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew Float32BufferAttribute(attrib_values, attrib_size)\n\t\t\t)\n\t\t})\n\n\t\t// const new_indices = lodash_range(points.length);\n\t\tthis.geometry.setIndex(points_indices)\n\t\tthis.geometry.computeVertexNormals()\n\t}\n}\n","import {PolyScene} from './scene/PolyScene';\n\nimport {CoreGraphNode} from '../core/graph/CoreGraphNode';\nimport {TypedNode} from './nodes/_Base';\nimport {TypedEventNode} from './nodes/event/_Base';\nimport {CodeEventNode} from './nodes/event/Code';\nexport {PolyScene, CoreGraphNode, TypedEventNode, TypedNode, CodeEventNode};\n\nimport {AllRegister} from './poly/registers/All';\nAllRegister.run();\n\n// import {SceneJsonExporter, SceneJsonExporterData} from './io/json/export/Scene';\n// import default_scene_data from '../../public/examples/scenes/default_simple.json';\n// import {SceneJsonImporter} from './io/json/import/Scene';\n\n// export class Tester {\n// \tstatic async load_scene() {\n// \t\tconst scene = await SceneJsonImporter.load_data(default_scene_data as SceneJsonExporterData);\n\n// \t\treturn scene;\n// \t}\n// \tstatic create_scene() {\n// \t\tconst scene = new PolyScene();\n// \t\tscene.root.create_node('ambient_light');\n\n// \t\tscene.loading_controller.mark_as_loaded();\n\n// \t\tconst perspective_camera1 = scene.root.create_node('perspective_camera');\n// \t\tscene.cameras_controller.set_master_camera_node_path(perspective_camera1.full_path());\n// \t\tperspective_camera1.p.t.z.set(10);\n\n// \t\tconst geo1 = scene.root.create_node('geo');\n// \t\tgeo1.flags.display.set(true);\n// \t\tconst box1 = geo1.create_node('box');\n// \t\tbox1.flags.display.set(true);\n// \t\tgeo1.p.r.y.set('$F+20');\n\n// \t\treturn scene;\n// \t}\n\n// \tstatic async test_save_and_load(scene: PolyScene) {\n// \t\tconst data = new SceneJsonExporter(scene).data();\n// \t\tconsole.log(JSON.stringify(data));\n// \t\tconst scene2 = await SceneJsonImporter.load_data(data);\n// \t\tconst data2 = new SceneJsonExporter(scene2).data();\n// \t\tconsole.log(JSON.stringify(data2));\n// \t}\n// }\n\n// const stylesheet = document.createElement('style');\n// stylesheet.innerText = 'html, body, canvas, .canvas_container {height: 100%; margin: 0px;} canvas {display: block;}';\n// document.body.appendChild(stylesheet);\n// const container = document.createElement('div');\n// container.classList.add('canvas_container');\n// document.body.appendChild(container);\n\n// Tester.load_scene().then((scene) => {\n// \t(window as any).scene = scene;\n// \tscene.cameras_controller.master_camera_node?.create_viewer(container);\n// \tscene.play();\n// });\n\n// Tester.test_save_and_load(scene);\n","// import {Scene} from 'three/src/scenes/Scene'\n// import {CoreGraph} from '../../core/graph/CoreGraph'\n// import {CorePerformance} from '../../core/performance/CorePerformance'\n// import {Cooker} from '../../core/graph/Cooker'\n// import {EmitPayload} from '../../core/graph/NodeScene'\n// import {BaseNode} from '../nodes/_Base'\n\n// import {CoreObject} from '../../core/Object';\n// import {Debug} from './concerns/Debug';\n// import {Env} from './concerns/Env'\n// import {ExpressionRegister} from './concerns/ExpressionRegister';\n// import {Frame} from './concerns/Frame';\n// import {GraphMixin} from './concerns/Graph';\n// import {Js} from './concerns/Js';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/LifeCycle';\n// import {Loading} from './concerns/Loading';\n// import {Name} from './concerns/Name';\n// import {Nodes} from './concerns/Nodes';\n// import {ObjectMixin} from './concerns/Object';\n// import {PickerNodes} from './concerns/PickerNodes';\n// import {PerformanceMixin} from './concerns/Performance';\n// import {Renderer} from './concerns/Renderer';\n// import {Store} from './concerns/Store';\n// import {Uniforms} from './concerns/Uniforms';\n\n// import {CubeCamerasController} from './utils/CubeCamerasController';\nimport {CamerasController} from './utils/CamerasController';\nimport {Cooker} from './utils/Cooker';\nimport {CoreGraph} from '../../core/graph/CoreGraph';\nimport {CookController} from './utils/CookController';\nimport {DispatchController} from './utils/DispatchController';\nimport {EventsController} from './utils/events/EventsController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {LoadingController} from './utils/LoadingController';\nimport {ExpressionsController} from './utils/ExpressionsController';\nimport {MissingReferencesController} from './utils/MissingReferencesController';\nimport {NodesController} from './utils/NodesController';\nimport {CorePerformance} from '../../core/performance/CorePerformance';\nimport {TimeController} from './utils/TimeController';\nimport {PolySceneSerializer} from './utils/Serializer';\nimport {UniformsController} from './utils/UniformsController';\nimport {WebGLController} from './utils/WebGLController';\n\nimport {Scene} from 'three/src/scenes/Scene';\n\nexport class PolyScene {\n\tprotected _default_scene = new Scene();\n\tget default_scene() {\n\t\treturn this._default_scene;\n\t}\n\t_uuid!: string;\n\tset_uuid(uuid: string) {\n\t\treturn (this._uuid = uuid);\n\t}\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\t_name: string | undefined;\n\tset_name(name: string) {\n\t\treturn (this._name = name);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tprotected _cameras_controller = new CamerasController(this);\n\tget cameras_controller() {\n\t\treturn this._cameras_controller;\n\t}\n\n\tprivate _cooker = new Cooker(this);\n\tget cooker() {\n\t\treturn this._cooker;\n\t}\n\n\t// private _cube_cameras_controller: CubeCamerasController;\n\t// get cube_cameras_controller() {\n\t// \treturn (this._cube_cameras_controller = this._cube_cameras_controller || new CubeCamerasController(this));\n\t// }\n\tpublic readonly cook_controller = new CookController();\n\tasync wait_for_cooks_completed() {\n\t\treturn this.cook_controller.wait_for_cooks_completed();\n\t}\n\n\tprivate _dispatch_controller: DispatchController | undefined;\n\tget dispatch_controller() {\n\t\treturn (this._dispatch_controller = this._dispatch_controller || new DispatchController(this));\n\t}\n\tprivate _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\n\tprivate _graph = new CoreGraph();\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\n\tprivate _lifecycle_controller: LifeCycleController | undefined;\n\tget lifecycle_controller() {\n\t\treturn (this._lifecycle_controller = this._lifecycle_controller || new LifeCycleController(this));\n\t}\n\tprivate _loading_controller: LoadingController | undefined;\n\tget loading_controller() {\n\t\treturn (this._loading_controller = this._loading_controller || new LoadingController(this));\n\t}\n\n\tprivate _missing_expression_references_controller: MissingReferencesController = new MissingReferencesController();\n\tget missing_expression_references_controller() {\n\t\treturn this._missing_expression_references_controller;\n\t}\n\tprivate _expressions_controller: ExpressionsController = new ExpressionsController();\n\tget expressions_controller() {\n\t\treturn this._expressions_controller;\n\t}\n\n\tprotected _nodes_controller = new NodesController(this);\n\tget nodes_controller() {\n\t\treturn this._nodes_controller;\n\t}\n\n\tprotected _performance: CorePerformance | undefined;\n\tget performance() {\n\t\treturn (this._performance = this._performance || new CorePerformance());\n\t}\n\n\t//\n\t//\n\t// time\n\t//\n\t//\n\tprotected _time_controller = new TimeController(this);\n\tget time_controller() {\n\t\treturn this._time_controller;\n\t}\n\tset_frame(frame: number) {\n\t\tthis.time_controller.set_frame(frame);\n\t}\n\tget frame() {\n\t\treturn this.time_controller.frame;\n\t}\n\tget time() {\n\t\treturn this.time_controller.time;\n\t}\n\tget frame_range() {\n\t\treturn this.time_controller.frame_range;\n\t}\n\tplay() {\n\t\tthis.time_controller.play();\n\t}\n\tpause() {\n\t\tthis.time_controller.pause();\n\t}\n\n\t//\n\t//\n\t// serializer\n\t//\n\t//\n\tprivate _serializer: PolySceneSerializer | undefined;\n\tprivate get serializer() {\n\t\treturn (this._serializer = this._serializer || new PolySceneSerializer(this));\n\t}\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n\n\t//\n\t//\n\t// uniforms\n\t//\n\t//\n\tprivate _uniforms_controller: UniformsController | undefined;\n\tget uniforms_controller() {\n\t\treturn (this._uniforms_controller = this._uniforms_controller || new UniformsController(this));\n\t}\n\n\t//\n\t//\n\t// webgl\n\t//\n\t//\n\tprivate _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController());\n\t}\n\n\t//\n\t//\n\t// constructor\n\t//\n\t//\n\tconstructor() {\n\t\t// this.mark_as_loaded()\n\t\tthis._graph.set_scene(this);\n\t\t// this.time_controller.init();\n\t\tthis.nodes_controller.init();\n\t}\n\n\t//\n\t//\n\t// cooker\n\t//\n\t//\n\tbatch_update(callback: () => void) {\n\t\tthis._cooker.block();\n\n\t\tcallback();\n\n\t\tthis._cooker.unblock();\n\t}\n\n\t//\n\t//\n\t// nodes\n\t//\n\t//\n\tnode(path: string) {\n\t\treturn this.nodes_controller.node(path);\n\t}\n\tget root() {\n\t\treturn this.nodes_controller.root;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\n\nexport class CamerasController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_master_camera_node_path: string | null = null;\n\n\tset_master_camera_node_path(camera_node_path: string) {\n\t\tthis._master_camera_node_path = camera_node_path;\n\t}\n\tget master_camera_node_path() {\n\t\treturn this._master_camera_node_path;\n\t}\n\tget master_camera_node(): BaseCameraObjNodeType | null {\n\t\tif (this.master_camera_node_path) {\n\t\t\tconst camera_node = this.scene.node(this.master_camera_node_path) as BaseCameraObjNodeType | null;\n\t\t\treturn camera_node;\n\t\t} else {\n\t\t\tconsole.warn('master camera node not found');\n\t\t\treturn this._find_any_camera();\n\t\t}\n\t}\n\n\tprivate _find_any_camera(): BaseCameraObjNodeType | null {\n\t\tconst root = this.scene.root;\n\t\treturn root.nodes_by_type('perspective_camera')[0] || root.nodes_by_type('orthographic_camera')[0];\n\t}\n}\n","// import {CoreGraphNode} from './CoreGraphNode';\n// import { CoreGraphNodeScene } from './CoreGraphNodeScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../PolyScene';\n\n// interface CookerQueue {\n// \t[propName: string]: CoreGraphNodeSceneNamed;\n// }\n\nexport class Cooker {\n\tprivate _queue: Map<string, CoreGraphNode | undefined> = new Map<string, CoreGraphNode | undefined>();\n\tprivate _block_level: number = 0;\n\tprivate _process_item_bound = this._process_item.bind(this);\n\n\tconstructor(private _scene: PolyScene) {\n\t\tthis._block_level = 0;\n\t}\n\n\tblock() {\n\t\tthis._block_level += 1;\n\t}\n\tunblock() {\n\t\tthis._block_level -= 1;\n\t\tif (this._block_level < 0) {\n\t\t\tthis._block_level = 0;\n\t\t}\n\n\t\tthis.process_queue();\n\t}\n\t// unblock_later: ->\n\t// \tsetTimeout( this.unblock.bind(this), 0 )\n\tget blocked() {\n\t\treturn this._block_level > 0;\n\t}\n\n\tenqueue(node: CoreGraphNode, original_trigger_graph_node?: CoreGraphNode) {\n\t\tthis._queue.set(node.graph_node_id, original_trigger_graph_node);\n\t}\n\n\tprocess_queue() {\n\t\tif (this.blocked) {\n\t\t\treturn;\n\t\t}\n\t\t// let node: CoreGraphNode;\n\t\t// console.warn('FLUSH', Object.keys(this._queue).length);\n\n\t\tthis._queue.forEach(this._process_item_bound);\n\t\t// for (let id of Object.keys(this._queue)) {\n\t\t// \tnode = this._queue[id];\n\t\t// \tif (node) {\n\t\t// \t\tdelete this._queue[id];\n\t\t// \t\tnode.dirty_controller.run_post_dirty_hooks();\n\t\t// \t}\n\t\t// }\n\t}\n\tprivate _process_item(original_trigger_graph_node: CoreGraphNode | undefined, id: string) {\n\t\tconst node = this._scene.graph.node_from_id(id);\n\t\tif (node) {\n\t\t\tthis._queue.delete(id);\n\t\t\tnode.dirty_controller.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t}\n\t}\n}\n","/// <reference path=\"./dagre.d.ts\" />\nimport {Graph, alg} from '@dagrejs/graphlib';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\nimport {PolyScene} from '../../engine/scene/PolyScene';\n// import {NodeSimple} from './NodeSimple'\n// import {GraphNode} from './concerns/GraphNode'\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// class DummyClass {}\n// class GraphNodeDummy extends Dirtyable(DummyClass) {}\n\n// TODO: typescript, using ids with a specific type (https://basarat.gitbook.io/typescript/main-1/nominaltyping)\n// export interface CoreGraphNodeId extends String {\n// \t// _CoreGraphNodeIdBrand: string;\n// }\nexport type CoreGraphNodeId = string;\nimport {CoreGraphNode} from './CoreGraphNode';\n\nexport class CoreGraph {\n\t_graph: Graph;\n\t_next_id: number = 0;\n\t_scene: PolyScene | undefined;\n\n\tconstructor() {\n\t\tthis._graph = new Graph({\n\t\t\tdirected: true,\n\t\t\tcompound: false,\n\t\t\tmultigraph: true,\n\t\t});\n\t}\n\n\tgraph() {\n\t\treturn this._graph;\n\t}\n\tset_scene(scene: PolyScene) {\n\t\tthis._scene = scene;\n\t}\n\tscene() {\n\t\treturn this._scene;\n\t}\n\n\tnext_id(): CoreGraphNodeId {\n\t\treturn (<unknown>`${(this._next_id += 1)}`) as CoreGraphNodeId;\n\t}\n\n\tsetNode(node: CoreGraphNode) {\n\t\tthis._graph.setNode(node.graph_node_id, node);\n\t}\n\n\tremoveNode(node: CoreGraphNode) {\n\t\tthis._graph.removeNode(node.graph_node_id);\n\t}\n\n\tnodes_from_ids(ids: string[]) {\n\t\tconst nodes: CoreGraphNode[] = [];\n\t\tfor (let id of ids) {\n\t\t\tconst node = this.node_from_id(id);\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t\t// if (ids) {\n\t\t// \tlet node: any;\n\t\t// \treturn ids.map((id) => {\n\t\t// \t\tif ((node = this.node_from_id(id)) != null) {\n\t\t// \t\t\treturn node;\n\t\t// \t\t} else {\n\t\t// \t\t\treturn console.warn(`could not find node with id ${id}`);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// } else {\n\t\t// \treturn [];\n\t\t// }\n\t}\n\t// TODO: typescript: this should return CoreGraphNodeId|null\n\tnode_from_id(id: string): CoreGraphNode {\n\t\treturn this._graph.node(id);\n\t}\n\n\tconnect(src: CoreGraphNode, dest: CoreGraphNode): boolean {\n\t\tconst src_id = src.graph_node_id;\n\t\tconst dest_id = dest.graph_node_id;\n\n\t\tif (this._graph.hasNode(src_id) && this._graph.hasNode(dest_id)) {\n\t\t\tthis._graph.setEdge(src_id, dest_id);\n\n\t\t\t// const scene_auto_updating = this.scene().auto_updating();\n\t\t\tconst scene_loading = this._scene ? this._scene.loading_controller.is_loading : true;\n\t\t\tconst check_if_graph_has_cycle = !scene_loading;\n\t\t\tlet graph_has_cycle = false;\n\t\t\tif (check_if_graph_has_cycle) {\n\t\t\t\tgraph_has_cycle = !alg.isAcyclic(this._graph);\n\t\t\t}\n\n\t\t\tif (graph_has_cycle) {\n\t\t\t\tthis._graph.removeEdge(src_id, dest_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`attempt to connect non existing node ${src_id} or ${dest_id}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisconnect(src: CoreGraphNode, dest: CoreGraphNode) {\n\t\tif (src && dest) {\n\t\t\tconst src_id_s = src.graph_node_id;\n\t\t\tconst dest_id_s = dest.graph_node_id;\n\t\t\tthis._graph.removeEdge(src_id_s, dest_id_s);\n\n\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\t\t}\n\t}\n\tdisconnect_predecessors(node: CoreGraphNode) {\n\t\tconst predecessors = this.predecessors(node);\n\t\tfor (let predecessor of predecessors) {\n\t\t\tthis.disconnect(predecessor, node);\n\t\t}\n\t}\n\tdisconnect_successors(node: CoreGraphNode) {\n\t\tconst successors = this.successors(node);\n\t\tfor (let successor of successors) {\n\t\t\tthis.disconnect(node, successor);\n\t\t}\n\t}\n\t// disconnect_predecessors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst predecessor_ids = this._graph.predecessors(node_id);\n\t// \tif( predecessor_ids ){\n\t// \t\tfor(let predecessor_id of predecessor_ids){\n\t// \t\t\tthis._graph.removeEdge(predecessor_id, node_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// disconnect_successors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst successor_ids = this._graph.successors(node_id);\n\t// \tif (successor_ids) {\n\t// \t\tfor(let successor_id of successor_ids){\n\t// \t\t\tthis._graph.removeEdge(node_id, successor_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tpredecessor_ids(id: CoreGraphNodeId) {\n\t\treturn this._graph.predecessors(id) || [];\n\t}\n\tpredecessors(node: CoreGraphNode) {\n\t\tconst ids = this.predecessor_ids(node.graph_node_id);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tsuccessor_ids(id: string): CoreGraphNodeId[] {\n\t\treturn this._graph.successors(id) || [];\n\t}\n\tsuccessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.successor_ids(node.graph_node_id) || [];\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\n\tprivate all_next_ids(node: CoreGraphNode, method: 'successor_ids' | 'predecessor_ids'): CoreGraphNodeId[] {\n\t\tconst ids: CoreGraphNodeId[] = [];\n\t\tlet next_ids = this[method](node.graph_node_id);\n\n\t\twhile (next_ids.length > 0) {\n\t\t\tconst next_next_ids = [];\n\t\t\tfor (let next_id of next_ids) {\n\t\t\t\tfor (let next_next_id of this[method](next_id)) {\n\t\t\t\t\tnext_next_ids.push(next_next_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let id of next_ids) {\n\t\t\t\tids.push(id);\n\t\t\t}\n\t\t\tfor (let id of next_next_ids) {\n\t\t\t\tnext_ids.push(id);\n\t\t\t}\n\t\t\tnext_ids = next_next_ids;\n\t\t}\n\t\treturn ids;\n\t}\n\tall_predecessor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'predecessor_ids');\n\t}\n\tall_successor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'successor_ids');\n\t}\n\tall_predecessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_predecessor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tall_successors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_successor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\n\ntype Callback = (value: void) => void;\n\nexport class CookController {\n\tprivate _cooking_nodes_by_id: Map<string, BaseNodeType> = new Map();\n\tprivate _resolves: Callback[] = [];\n\tconstructor() {}\n\n\tadd_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.set(node.graph_node_id, node);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.delete(node.graph_node_id);\n\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tprivate flush() {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync wait_for_cooks_completed(): Promise<void> {\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport '../../Poly';\nimport {POLY} from '../../Poly';\nimport {SceneEvent} from '../../poly/SceneEvent';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\n// type Callback = (emitter: CoreGraphNodeScene) => void; // TODO: typescript: maybe arg should be an event instead of the emitter\ninterface EventsListener {\n\tprocess_events: (emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) => void;\n}\n\nexport class DispatchController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _events_listener: EventsListener | undefined;\n\n\tset_listener(events_listener: EventsListener) {\n\t\tthis._events_listener = events_listener;\n\t\t// this._store.scene = this;\n\t}\n\tget events_listener() {\n\t\treturn this._events_listener;\n\t}\n\tdispatch(emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) {\n\t\tthis._events_listener?.process_events(emitter, event_name, data);\n\t}\n\tget emit_allowed(): boolean {\n\t\treturn (\n\t\t\tthis.scene.loading_controller.loaded &&\n\t\t\tthis._events_listener != null &&\n\t\t\tthis.scene.loading_controller.auto_updating &&\n\t\t\t!POLY.player_mode() // TODO: typecript: maybe I should still be able to emit events in player mode? - check how the Event Sop works\n\t\t);\n\t}\n\t// store_commit(event_name: string, payload: any = this) {\n\t// \tif (this._store) {\n\t// \t\tthis._store.commit(`engine/${event_name}`, payload);\n\t// \t}\n\t// }\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter, LinearEncoding, HalfFloatType} from 'three/src/constants'\n// import EquirectangularToCubeGenerator from 'src/core/Utils/EquirectangularToCubeGenerator';\n// import PMREMGenerator from 'src/core/Utils/PMREMGenerator';\n// import PMREMCubeUVPacker from 'src/core/Utils/PMREMCubeUVPacker';\n\ninterface RendererByString {\n\t[propName: string]: WebGLRenderer;\n}\ninterface TextureByString {\n\t[propName: string]: Texture;\n}\n\ninterface POLYWebGLRenderer extends WebGLRenderer {\n\t_polygon_id: number;\n}\n\nconst CONTEXT_OPTIONS = {\n\tantialias: true,\n\t// preserveDrawingBuffer: true, // this could only be useful to capture static images\n};\n\ntype Callback = (value: WebGLRenderer) => void;\n\nexport class RenderersController {\n\t_next_renderer_id: number = 0;\n\t_next_env_map_id: number = 0;\n\t_renderers: RendererByString = {};\n\t_env_maps: TextureByString = {};\n\tprivate _require_webgl2: boolean = false;\n\tprivate _resolves: Callback[] = [];\n\n\tconstructor() {}\n\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t}\n\t}\n\trendering_context(canvas: HTMLCanvasElement): WebGLRenderingContext {\n\t\tlet gl: WebGLRenderingContext | null = null;\n\t\tif (this._require_webgl2) {\n\t\t\tgl = this._rendering_context_webgl(canvas, true);\n\t\t}\n\t\tif (!gl) {\n\t\t\tgl = this._rendering_context_webgl(canvas, false);\n\t\t}\n\n\t\t// gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)\n\t\t// to test data texture\n\t\t// gl.getExtension('OES_texture_float')\n\t\t// gl.getExtension('OES_texture_float_linear')\n\n\t\treturn gl;\n\t}\n\tprivate _rendering_context_webgl(canvas: HTMLCanvasElement, webgl2: boolean): WebGLRenderingContext {\n\t\tlet context_name = webgl2 ? 'webgl2' : 'webgl';\n\t\tlet gl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\tif (!gl) {\n\t\t\tcontext_name = webgl2 ? 'experimental-webgl2' : 'experimental-webgl';\n\t\t\tgl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\t}\n\t\treturn gl as WebGLRenderingContext;\n\t}\n\t// private _rendering_context_webgl(\n\t// \tcanvas: HTMLCanvasElement\n\t// ): WebGLRenderingContext {\n\t// \tlet gl = canvas.getContext('webgl', CONTEXT_OPTIONS)\n\t// \tif (!gl) {\n\t// \t\tgl = canvas.getContext('experimental-webgl', CONTEXT_OPTIONS)\n\t// \t}\n\t// \treturn gl as WebGLRenderingContext\n\t// }\n\n\tregister_renderer(renderer: WebGLRenderer) {\n\t\tif ((renderer as POLYWebGLRenderer)._polygon_id) {\n\t\t\tthrow new Error('render already registered');\n\t\t}\n\t\t(renderer as POLYWebGLRenderer)._polygon_id = this._next_renderer_id += 1;\n\n\t\t// there is a bug where 2 renderers are created from the beginning\n\t\t// because the from_json of the viewer_component is called after\n\t\t// the camera being set for the first time\n\t\t// console.log(\"register renderer\", renderer, renderer._polygon_id)\n\n\t\t// this is being tested in PostProcess\n\t\t// const canvas = renderer.domElement\n\t\t// const gl = canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' )\n\t\t// const extension_exist = gl.getExtension('OES_standard_derivatives')\n\t\t// if(!extension_exist){\n\t\t// \tconsole.warn(\"renderers controller: gl extension not available\")\n\t\t// }\n\n\t\tthis._renderers[(renderer as POLYWebGLRenderer)._polygon_id] = renderer;\n\n\t\tif (Object.keys(this._renderers).length == 1) {\n\t\t\tthis.flush_callbacks_with_renderer(renderer);\n\t\t}\n\t}\n\tderegister_renderer(renderer: WebGLRenderer) {\n\t\tdelete this._renderers[(renderer as POLYWebGLRenderer)._polygon_id];\n\t\trenderer.dispose();\n\t}\n\tprivate first_renderer(): WebGLRenderer | null {\n\t\tconst first_id = Object.keys(this._renderers)[0];\n\t\tif (first_id) {\n\t\t\treturn this._renderers[first_id];\n\t\t}\n\t\treturn null;\n\t}\n\trenderers(): WebGLRenderer[] {\n\t\treturn Object.values(this._renderers);\n\t}\n\n\tprivate flush_callbacks_with_renderer(renderer: WebGLRenderer) {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback(renderer);\n\t\t}\n\t}\n\n\tasync wait_for_renderer(): Promise<WebGLRenderer> {\n\t\tconst renderer = this.first_renderer();\n\t\tif (renderer) {\n\t\t\treturn renderer;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n\n\t// async register_env_map(env_map: Texture){\n\t// \tconsole.log(\"register_env_map\", env_map)\n\t// \tif(env_map._polygon_id){\n\t// \t\tthrow new Error('cube_map already registered')\n\t// \t}\n\t// \tconst texture = await this.prepare_env_map(env_map)\n\t// \ttexture._polygon_id = (this._next_env_map_id += 1)\n\t// \tthis._env_maps[texture._polygon_id] = texture\n\t// \treturn texture\n\t// }\n\t// deregister_env_map(env_map: Texture){\n\t// \tconsole.log(\"deregister_env_map\", env_map)\n\t// \tdelete this._env_maps[env_map._polygon_id]\n\t// \tenv_map.dispose()\n\t// }\n\n\t// private async prepare_env_map(texture: Texture): Texture{\n\t// \ttexture.minFilter = NearestFilter;\n\t// \ttexture.magFilter = NearestFilter;\n\t// \ttexture.encoding = LinearEncoding;\n\n\t// \tawait CoreScriptLoader.load_three('loaders/EXRLoader')\n\t// \tawait CoreScriptLoader.load_three('loaders/EquirectangularToCubeGenerator')\n\t// \tconst EquirectangularToCubeGenerator_name = 'EquirectangularToCubeGenerator'\n\t// \tconst PMREMGenerator_name = 'PMREMGenerator'\n\t// \tconst PMREMCubeUVPacker_name = 'PMREMCubeUVPacker'\n\n\t// \tconst cubemapGenerator = new THREE[EquirectangularToCubeGenerator_name]( texture, { resolution: 512, type: HalfFloatType } );\n\n\t// \tconst renderer = this.first_renderer()\n\t// \tif(renderer){\n\t// \t\tconst cubeMapTexture = cubemapGenerator.update( renderer );\n\n\t// \t\tconst pmremGenerator = new THREE[PMREMGenerator_name]( cubeMapTexture );\n\t// \t\tpmremGenerator.update( renderer );\n\n\t// \t\tconst pmremCubeUVPacker = new THREE[PMREMCubeUVPacker_name]( pmremGenerator.cubeLods );\n\t// \t\tpmremCubeUVPacker.update( renderer );\n\n\t// \t\trenderer.gammaInput = false;\n\t// \t\trenderer.gammaOutput = true;\n\n\t// \t\tconst exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;\n\n\t// \t\ttexture.dispose();\n\t// \t\tcubemapGenerator.dispose();\n\t// \t\tpmremGenerator.dispose();\n\t// \t\tpmremCubeUVPacker.dispose();\n\n\t// \t\treturn exrCubeRenderTarget.texture;\n\t// \t}\n\t// }\n}\n","import {BaseNodeClass} from '../nodes/_Base';\nimport {NodeContext} from './NodeContext';\n\nexport interface RegisterOptions {\n\tonly?: string[];\n\texcept?: string[];\n}\n\n// export interface BaseNodeConstructor {\n// \tnew (): BaseNode;\n// }\n\nexport type BaseNodeConstructor = typeof BaseNodeClass;\ntype NodeConstructorByType = Dictionary<BaseNodeConstructor>;\ntype NodeConstructorByTypeByContext = Dictionary<NodeConstructorByType>;\ntype TabMenuByTypeByContext = Dictionary<Dictionary<string>>;\ntype RegisterOptionsByTypeByContext = Dictionary<Dictionary<RegisterOptions>>;\n\nexport class NodesRegister {\n\tprivate _node_register: NodeConstructorByTypeByContext = {};\n\tprivate _node_register_categories: TabMenuByTypeByContext = {};\n\tprivate _node_register_options: RegisterOptionsByTypeByContext = {};\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type();\n\t\tthis._node_register[context] = this._node_register[context] || {};\n\n\t\tconst already_registered_node = this._node_register[context][node_type];\n\t\tif (already_registered_node) {\n\t\t\tthrow new Error(`node ${context}/${node_type} already registered`);\n\t\t}\n\t\tthis._node_register[context][node_type] = node;\n\n\t\tif (tab_menu_category) {\n\t\t\tthis._node_register_categories[context] = this._node_register_categories[context] || {};\n\t\t\tthis._node_register_categories[context][node_type] = tab_menu_category;\n\t\t}\n\t\tthis._node_register_options[context] = this._node_register_options[context] || {};\n\t\tif (options) {\n\t\t\tthis._node_register_options[context][node_type] = options;\n\t\t}\n\t}\n\tderegister_node(context: string, node_type: string) {\n\t\tdelete this._node_register[context][node_type];\n\t\tdelete this._node_register_categories[context][node_type];\n\t\tdelete this._node_register_options[context][node_type];\n\t}\n\tregistered_nodes_for_context_and_parent_type(context: NodeContext, parent_node_type: string) {\n\t\tconst map = this._node_register[context];\n\t\tif (map) {\n\t\t\tconst nodes_for_context = Object.values(this._node_register[context]);\n\t\t\treturn nodes_for_context.filter((node) => {\n\t\t\t\tconst options = this._node_register_options[context][node.type()];\n\t\t\t\tif (!options) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\tconst option_only = options['only'];\n\t\t\t\t\tconst option_except = options['except'];\n\t\t\t\t\tconst context_and_type = `${context}/${parent_node_type}`;\n\t\t\t\t\tif (option_only) {\n\t\t\t\t\t\treturn option_only.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t\tif (option_except) {\n\t\t\t\t\t\treturn !option_except.includes(context_and_type);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn !options || options['only']?.includes(parent_node_type);\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tregistered_nodes(context: NodeContext, parent_node_type: string): Dictionary<BaseNodeConstructor> {\n\t\tconst nodes_by_type: Dictionary<BaseNodeConstructor> = {};\n\t\tconst nodes = this.registered_nodes_for_context_and_parent_type(context, parent_node_type);\n\t\tfor (let node of nodes) {\n\t\t\tconst type = node.type();\n\t\t\tnodes_by_type[type] = node;\n\t\t}\n\t\treturn nodes_by_type;\n\t}\n\tregistered_category(context: NodeContext, type: string) {\n\t\treturn this._node_register_categories[context][type];\n\t}\n}\n","import {PolyScene} from '../../PolyScene';\nimport {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {MouseEventNode} from '../../../nodes/event/MouseEvent';\nimport {MouseEventsController} from './MouseEventsController';\nimport {BaseEventsController} from './_BaseEventsController';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\n\nexport class EventsController {\n\tprivate _mouse_events_controller: BaseEventsController<MouseEvent, MouseEventNode> = new MouseEventsController();\n\tprivate _controllers: BaseEventsController<Event, BaseEventNodeType>[] = [this._mouse_events_controller];\n\tconstructor(scene: PolyScene) {}\n\n\tregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.register_node(node);\n\t\t}\n\t}\n\tunregister_event_node(node: BaseEventNodeType) {\n\t\tconst controller = this._get_controller_for_node(node);\n\t\tif (controller) {\n\t\t\tcontroller.unregister_node(node);\n\t\t}\n\t}\n\n\tprocess_event(event: Event, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tfor (let controller of this._controllers) {\n\t\t\tif (controller.accepts_event(event)) {\n\t\t\t\tcontroller.process(event, canvas, camera_node);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _get_controller_for_node<T extends BaseEventNodeType>(\n\t\tnode: T\n\t): BaseEventsController<Event, BaseEventNodeType> | undefined {\n\t\tswitch (node.type) {\n\t\t\tcase MouseEventNode.type():\n\t\t\t\treturn this._mouse_events_controller;\n\t\t}\n\t}\n}\n","// import lodash_filter from 'lodash/filter';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\n// import {Cooker} from './Cooker';\nimport {CoreGraphNode} from './CoreGraphNode';\n\n// not sure how I can have caller: DirtyableMixin if DirtyableMixin is not yet defined\nexport type PostDirtyHook = (caller?: CoreGraphNode) => void;\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class DirtyController {\n\t_dirty_count: number = 0;\n\t_dirty: boolean = true;\n\t_dirty_timestamp: number | undefined;\n\t_cached_successors: CoreGraphNode[] | undefined;\n\t_forbidden_trigger_nodes: string[] | undefined;\n\n\t// hooks\n\t_post_dirty_hooks: PostDirtyHook[] | undefined;\n\t_post_dirty_hook_names: string[] | undefined;\n\n\tconstructor(private node: CoreGraphNode) {}\n\n\t// _init_dirtyable(): void {\n\t// \tthis._dirty_count = 0;\n\t// \tthis._dirty = true;\n\t// }\n\tget is_dirty(): boolean {\n\t\treturn this._dirty === true;\n\t}\n\tget dirty_timestamp() {\n\t\treturn this._dirty_timestamp;\n\t}\n\tget dirty_count(): number {\n\t\treturn this._dirty_count;\n\t}\n\tadd_post_dirty_hook(name: string, method: PostDirtyHook) {\n\t\tthis._post_dirty_hook_names = this._post_dirty_hook_names || [];\n\t\tthis._post_dirty_hooks = this._post_dirty_hooks || [];\n\n\t\tif (!this._post_dirty_hook_names.includes(name)) {\n\t\t\tthis._post_dirty_hook_names.push(name);\n\t\t\tthis._post_dirty_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tremove_post_dirty_hook(name: string) {\n\t\tif (this._post_dirty_hook_names && this._post_dirty_hooks) {\n\t\t\tconst index = this._post_dirty_hook_names.indexOf(name);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._post_dirty_hook_names.splice(index, 1);\n\t\t\t\tthis._post_dirty_hooks.splice(index, 1);\n\t\t\t}\n\t\t}\n\t}\n\thas_hook(name: string): boolean {\n\t\tif (this._post_dirty_hook_names) {\n\t\t\treturn this._post_dirty_hook_names.includes(name);\n\t\t}\n\t\treturn false;\n\t}\n\t// using a dirty block doesn't quite work, as I would need to be able\n\t// to fetch the graph for all successors that haven't been blocked\n\t// block_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = false\n\t// unblock_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = true\n\tremove_dirty_state(): void {\n\t\tthis._dirty = false;\n\t}\n\tset_forbidden_trigger_nodes(nodes: CoreGraphNode[]) {\n\t\tthis._forbidden_trigger_nodes = nodes.map((n) => n.graph_node_id);\n\t}\n\t//@_clean_for_frame = this.context().frame()\n\t//this.post_remove_dirty_state(message)\n\n\tset_dirty(original_trigger_graph_node?: CoreGraphNode | null, propagate?: boolean): void {\n\t\tif (propagate == null) {\n\t\t\tpropagate = true;\n\t\t}\n\t\tif (\n\t\t\toriginal_trigger_graph_node &&\n\t\t\tthis._forbidden_trigger_nodes &&\n\t\t\tthis._forbidden_trigger_nodes.includes(original_trigger_graph_node.graph_node_id)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (original_trigger_graph_node == null) {\n\t\t\toriginal_trigger_graph_node = this.node;\n\t\t}\n\n\t\t//return if this.set_dirty_allowed? && !this.set_dirty_allowed(original_trigger_graph_node)\n\n\t\t// if (this.scene && this.scene() != null && this.scene().loaded()){\n\t\t// \tlet id = null\n\t\t// \tif (this.full_path){id = this.full_path()} else {id = this}\n\t\t// \tconsole.log(\"set dirty\", id)\n\t\t// }\n\n\t\t// TODO: why can't I not propagate if the node is already dirty?\n\t\t// one possible reason is that node might be cooking, and this would not update the dirty_timestamp correctly?\n\t\t//return if this.is_dirty()\n\t\t// if(!this.scene().is_loading()){\n\t\t// \tconsole.log(\"set dirty\", (this.full_path ? this.full_path() : this))\n\t\t// }\n\n\t\tthis._dirty = true;\n\t\tthis._dirty_timestamp = performance.now();\n\t\tthis._dirty_count += 1;\n\n\t\tthis.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t// this.post_set_dirty(original_trigger_graph_node);\n\n\t\tif (propagate === true) {\n\t\t\t//&& @_dirty #&& window.scene.auto_updating()\n\t\t\tthis.set_successors_dirty(original_trigger_graph_node);\n\t\t}\n\t}\n\n\trun_post_dirty_hooks(original_trigger_graph_node?: CoreGraphNode) {\n\t\tif (this._post_dirty_hooks) {\n\t\t\tconst cooker = this.node.scene.cooker;\n\t\t\tif (cooker.blocked) {\n\t\t\t\tcooker.enqueue(this.node, original_trigger_graph_node);\n\t\t\t} else {\n\t\t\t\tfor (let hook of this._post_dirty_hooks) {\n\t\t\t\t\thook(original_trigger_graph_node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// cooker(): Cooker {\n\t// \tthrow 'Dirtyable.cooker requires implementation';\n\t// }\n\tset_successors_dirty(original_trigger_graph_node?: CoreGraphNode): void {\n\t\t// const cooker = this.node.scene.cooker;\n\t\t// cooker.block();\n\n\t\tconst propagate = false;\n\t\tthis._cached_successors = this._cached_successors || this.node.graph_all_successors(); //this._dirtyable_all_successors(original_trigger_graph_node);\n\t\t// successors = successors.filter(n=>!n.is_dirty())\n\t\tfor (let successor of this._cached_successors) {\n\t\t\tsuccessor.dirty_controller.set_dirty(original_trigger_graph_node, propagate);\n\t\t\t// console.log(successor);\n\t\t}\n\n\t\t// cooker.unblock();\n\t}\n\n\t// _dirtyable_all_successors(original_trigger_graph_node: CoreGraphNode): CoreGraphNode[] {\n\t// \treturn this.graph_all_predecessors()\n\t// \t// const successors = [];\n\t// \t// let newly_added_successors = this._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// successors.push(newly_added_successors);\n\n\t// \t// while (newly_added_successors.length > 0) {\n\t// \t// \tnewly_added_successors = lodash_flatten(\n\t// \t// \t\tnewly_added_successors.map((newly_added_successor) => {\n\t// \t// \t\t\treturn newly_added_successor._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// \t\t})\n\t// \t// \t);\n\t// \t// \tsuccessors.push(newly_added_successors);\n\t// \t// }\n\n\t// \t// return lodash_uniq(lodash_flatten(successors));\n\t// }\n\n\tclear_successors_cache() {\n\t\tthis._cached_successors = undefined;\n\t}\n\tclear_successors_cache_with_predecessors() {\n\t\tthis.clear_successors_cache();\n\t\tfor (let predecessor of this.node.graph_all_predecessors()) {\n\t\t\tpredecessor.dirty_controller.clear_successors_cache();\n\t\t}\n\t}\n\t// graph_all_predecessors(): CoreGraphNode[] {\n\t// \treturn this.node.graph_all_predecessors()\n\t// \t// console.log('dirtyable graph_all_predecessors should be overwritten');\n\t// \t// return [];\n\t// }\n\n\t// dirty_successors(): Array<CoreGraphNode> {\n\t// \tthrow 'Dirtyable.dirty_successors requires implementation';\n\t// }\n\t// set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \tthrow 'Dirtyable.set_dirty_allowed requires implementation';\n\t// }\n\t// _dirtyable_direct_successors(original_trigger_graph_node: CoreGraphNode): Array<CoreGraphNode> {\n\t// \treturn this.dirty_successors().filter((successor) => {\n\t// \t\treturn successor.set_dirty_allowed == null || successor.set_dirty_allowed(original_trigger_graph_node);\n\t// \t});\n\t// }\n\n\t// set_graph_successors_dirty_via_graph: (original_trigger_graph_node)->\n\t// \tcooker = this.scene().cooker()\n\t// \tcooker.block()\n\n\t// \tmake_successors_dirty = false\n\t// \tlodash_each lodash_flatten(this.graph_all_successors()), (successor)=>\n\t// \t\tsuccessor.set_dirty(original_trigger_graph_node, this, false)\n\n\t// \tcooker.unblock()\n\n\t// post_set_dirty(original_trigger_graph_node?: Dirtyable, direct_trigger_graph_node?: Dirtyable): void{}\n}\n","import {Vector2} from 'three/src/math/Vector2';\nimport {Color} from 'three/src/math/Color';\nimport {BaseNodeType} from '../_Base';\nimport {NodeEvent} from '../../poly/NodeEvent';\n\nexport interface NodeUIDataJson {\n\tx: number;\n\ty: number;\n\tcomment?: string;\n}\n\nexport class UIData {\n\tprivate _position: Vector2 = new Vector2();\n\tprivate _width: number = 50;\n\tprivate _border_radius: number = 3;\n\tprivate _color: Color = new Color(0.75, 0.75, 0.75);\n\t// private _icon: string | null = null;\n\tprivate _layout_vertical: boolean = true;\n\tprivate _comment: string | undefined;\n\tprivate _json: NodeUIDataJson = {\n\t\tx: 0,\n\t\ty: 0,\n\t};\n\n\tconstructor(private node: BaseNodeType, x: number = 0, y: number = 0) {\n\t\tthis._position.x = x;\n\t\tthis._position.y = y;\n\t}\n\n\tset_border_radius(radius: number) {\n\t\tthis._border_radius = radius;\n\t}\n\tborder_radius() {\n\t\treturn this._border_radius;\n\t}\n\tset_width(width: number) {\n\t\tthis._width = width;\n\t}\n\twidth() {\n\t\treturn this._width;\n\t}\n\tset_comment(comment: string | undefined) {\n\t\tthis._comment = comment;\n\t\tthis.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n\t}\n\tget comment(): string | undefined {\n\t\treturn this._comment;\n\t}\n\tset_color(color: Color) {\n\t\tthis._color = color;\n\t}\n\tcolor() {\n\t\treturn this._color;\n\t}\n\t// set_icon(icon: string) {\n\t// \tthis._icon = icon;\n\t// }\n\t// icon() {\n\t// \treturn this._icon;\n\t// }\n\tset_layout_horizontal() {\n\t\tthis._layout_vertical = false;\n\t}\n\tis_layout_vertical() {\n\t\treturn this._layout_vertical;\n\t}\n\n\tcopy(ui_data: UIData) {\n\t\tthis._position.copy(ui_data.position);\n\t\tthis._color.copy(ui_data.color());\n\t}\n\n\tget position() {\n\t\treturn this._position;\n\t}\n\n\tset_position(new_position: Vector2 | number, y: number = 0) {\n\t\tif (new_position instanceof Vector2) {\n\t\t\tthis._position.copy(new_position);\n\t\t} else {\n\t\t\tconst x = new_position;\n\t\t\tthis._position.set(x, y);\n\t\t}\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\n\ttranslate(offset: Vector2, snap: boolean = false) {\n\t\tthis._position.add(offset);\n\n\t\tif (snap) {\n\t\t\tthis._position.x = Math.round(this._position.x);\n\t\t\tthis._position.y = Math.round(this._position.y);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\t// arguments_to_vector(x: number,y: number){\n\t// \tif (arguments.length === 2) {\n\t// \t\tthis._position.x = arguments[0];\n\t// \t\tthis._position.y = arguments[1];\n\t// \t} else {\n\t// \t\tthis._position.x = new_position.x;\n\t// \t\tthis._position.y = new_position.y;\n\t// \t}\n\t// }\n\tto_json(): NodeUIDataJson {\n\t\tthis._json.x = this._position.x;\n\t\tthis._json.y = this._position.y;\n\t\tthis._json.comment = this._comment;\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.node);\n\terror = new ErrorState(this.node);\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseState} from './Base';\n\nexport class TimeDependentState extends BaseState {\n\tget active() {\n\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n\t}\n\n\tare_params_time_dependent(): boolean {\n\t\tconst param_names = this.node.params.names;\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param && param.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tare_inputs_time_dependent(): boolean {\n\t\tconst inputs = this.node.io.inputs.inputs();\n\t\tfor (let input of inputs) {\n\t\t\tif (input && input.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tforce_time_dependent() {\n\t\tconst predecessor_ids = this.node.graph_predecessors().map((n) => n.graph_node_id);\n\t\tconst frame_node = this.node.scene.time_controller.graph_node; // context();\n\t\tif (!predecessor_ids.includes(frame_node.graph_node_id)) {\n\t\t\tthis.node.add_graph_input(frame_node);\n\t\t}\n\t}\n\tunforce_time_dependent() {\n\t\tconst frame_node = this.node.scene.time_controller.graph_node;\n\t\tthis.node.remove_graph_input(frame_node);\n\t}\n}\n","import {NodeEvent} from '../../../poly/NodeEvent';\nimport {BaseState} from './Base';\n\nexport class ErrorState extends BaseState {\n\tprivate _message: string | undefined;\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tconsole.warn('error', message, this.node.full_path());\n\t\t\tthis._message = message;\n\t\t\tthis.on_update();\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n\n\tprotected on_update() {\n\t\tif (this._message != null) {\n\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n\t\t\tthis.node.set_container(null, `from error '${this._message}'`);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.ERROR_UPDATED);\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {NameController} from '../NameController';\n\ntype Callback = () => void;\nimport {CoreWalker} from '../../../../core/Walker';\n\nexport class HierarchyParentController {\n\tprivate _parent: BaseNodeType | null = null;\n\tprivate _on_set_parent_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\tset_parent(parent: BaseNodeType | null) {\n\t\tif (parent != this.node.parent_controller.parent) {\n\t\t\tthis._parent = parent;\n\t\t\tif (this._parent) {\n\t\t\t\t// this.node.set_scene(this._parent.scene);\n\t\t\t\tthis.node.name_controller.request_name_to_parent(NameController.base_name(this.node));\n\t\t\t}\n\t\t\t// this.on_set_parent();\n\t\t}\n\t}\n\tis_selected(): boolean {\n\t\treturn this.parent?.children_controller?.selection?.contains(this.node) || false;\n\t}\n\tfull_path(): string {\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (this._parent != null) {\n\t\t\tconst parent_full_path = this._parent.full_path();\n\t\t\tif (parent_full_path === separator) {\n\t\t\t\treturn parent_full_path + this.node.name;\n\t\t\t} else {\n\t\t\t\treturn parent_full_path + separator + this.node.name;\n\t\t\t}\n\t\t} else {\n\t\t\treturn separator;\n\t\t}\n\t}\n\n\ton_set_parent() {\n\t\tif (this._on_set_parent_hooks) {\n\t\t\tfor (let hook of this._on_set_parent_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tfind_node(path: string): BaseNodeType | null {\n\t\t// if (!this._children_allowed) {\n\t\t// \treturn null;\n\t\t// }\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (path === CoreWalker.CURRENT || path === CoreWalker.CURRENT_WITH_SLASH) {\n\t\t\treturn this.node;\n\t\t}\n\t\tif (path === CoreWalker.PARENT || path === CoreWalker.PARENT_WITH_SLASH) {\n\t\t\treturn this.node.parent;\n\t\t}\n\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (path[0] === separator) {\n\t\t\tpath = path.substring(1, path.length);\n\t\t}\n\n\t\tconst elements = path.split(separator);\n\t\tif (elements.length === 1) {\n\t\t\tconst name = elements[0];\n\t\t\tif (this.node.children_controller) {\n\t\t\t\treturn this.node.children_controller.child_by_name(name);\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t} else {\n\t\t\treturn CoreWalker.find_node(this.node, path);\n\t\t}\n\t}\n}\n","import {CoreString} from '../../../../core/String';\n\nimport {BaseNodeType} from '../../_Base';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport lodash_includes from 'lodash/includes';\nimport lodash_keys from 'lodash/keys';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_values from 'lodash/values';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {NameController} from '../NameController';\nimport {CoreNodeSelection} from '../../../../core/NodeSelection';\n\nimport {POLY} from '../../../Poly';\n// import {NameController} from '../NameController';\n\n// interface HierarchyOptions {\n// \tcontext: NodeContext\n// \tdependent?: boolean;\n// }\nconst NODE_SIMPLE_NAME = 'children';\n\nexport class HierarchyChildrenController {\n\t// private _context: NodeContext | undefined;\n\t// private _children_allowed: boolean = false;\n\tprivate _children: Dictionary<BaseNodeType> = {};\n\tprivate _children_by_type: Dictionary<string[]> = {};\n\tprivate _children_and_grandchildren_by_context: Dictionary<string[]> = {};\n\n\tprivate _is_dependent_on_children: boolean = false;\n\tprivate _children_node: CoreGraphNode | undefined;\n\n\tprivate _selection: CoreNodeSelection | undefined;\n\tget selection(): CoreNodeSelection {\n\t\treturn (this._selection = this._selection || new CoreNodeSelection(this.node));\n\t}\n\tconstructor(protected node: BaseNodeType, private _context: NodeContext) {}\n\tget context() {\n\t\treturn this._context;\n\t}\n\tinit(dependent: boolean = false) {\n\t\t// const context = this.node.children_context();\n\t\t// if (context) {\n\t\t// this._available_children_classes = options['children'] || {};\n\t\t// this._available_children_classes = window.POLY.registered_nodes(context, this.self.type())\n\n\t\t// this._children_allowed = true;\n\t\tthis._children = {};\n\n\t\t// const is_dependent = options['dependent'];\n\t\tif (dependent) {\n\t\t\tthis._is_dependent_on_children = dependent;\n\t\t\tif (this._is_dependent_on_children) {\n\t\t\t\tthis._children_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t\t// this._children_node.set_scene(this.node.scene);\n\t\t\t\tthis.node.add_graph_input(this._children_node);\n\t\t\t}\n\t\t}\n\t\t// }\n\t}\n\n\t// TODO: when copy pasting a node called bla_11, the next one will be renamed bla_110 instead of 12\n\tset_child_name(node: BaseNodeType, new_name: string): void {\n\t\t//return if node.name() == new_name\n\t\tlet current_child_with_name;\n\t\tnew_name = new_name.replace(/[^A-Za-z0-9]/g, '_');\n\t\tnew_name = new_name.replace(/^[0-9]/, '_'); // replace first char if not a letter\n\n\t\tif ((current_child_with_name = this._children[new_name]) != null) {\n\t\t\t// only return if found node is same as argument node, and if new_name is same as current_name\n\t\t\tif (node.name === new_name && current_child_with_name.graph_node_id === node.graph_node_id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// increment new_name\n\t\t\tnew_name = CoreString.increment(new_name);\n\n\t\t\treturn this.set_child_name(node, new_name);\n\t\t} else {\n\t\t\t// let current_child;\n\t\t\tconst current_name = node.name;\n\n\t\t\t// delete old entry if node was in _children with old name\n\t\t\tconst current_child = this._children[current_name];\n\t\t\tif (current_child) {\n\t\t\t\tdelete this._children[current_name];\n\t\t\t}\n\n\t\t\t// add to new name\n\t\t\tthis._children[new_name] = node;\n\t\t\tnode.name_controller.update_name_from_parent(new_name);\n\t\t\tthis._add_to_nodes_by_type(node);\n\t\t\tthis.node.scene.nodes_controller.add_to_instanciated_node(node);\n\t\t}\n\t}\n\n\tnode_context_signature() {\n\t\treturn `${this.node.node_context()}/${this.node.type}`;\n\t}\n\n\tavailable_children_classes() {\n\t\treturn POLY.registered_nodes(this._context, this.node.type);\n\t}\n\t// children_allowed(): boolean {\n\t// \t// return (this.self.available_children_classes != null) &&\n\t// \t// (Object.keys(this.self.available_children_classes()).length > 0);\n\t// \tconst available_classes = this.available_children_classes();\n\t// \treturn available_classes && Object.keys(available_classes).length > 0;\n\t// }\n\n\tis_valid_child_type(node_type: string): boolean {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\t\treturn node_class != null;\n\t}\n\n\tcreate_node(node_type: string): BaseNodeType {\n\t\tconst node_class = this.available_children_classes()[node_type];\n\n\t\tif (node_class == null) {\n\t\t\tconst message = `child node type '${node_type}' not found for node '${this.node.full_path()}'. Available types are: ${Object.keys(\n\t\t\t\tthis.available_children_classes()\n\t\t\t).join(', ')}, ${this._context}, ${this.node.type}`;\n\t\t\tconsole.error(message);\n\t\t\tthrow message;\n\t\t} else {\n\t\t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`);\n\t\t\tchild_node.initialize_base_and_node();\n\t\t\t// child_node.set_scene(this.node.scene);\n\t\t\tthis.add_node(child_node);\n\t\t\tchild_node.lifecycle.set_creation_completed();\n\t\t\treturn child_node;\n\t\t}\n\t}\n\n\tadd_node(child_node: BaseNodeType) {\n\t\t// if (!this._children_allowed) {\n\t\t// \tthrow `node ${this.node.full_path()} cannot have children`;\n\t\t// }\n\n\t\tchild_node.set_parent(this.node);\n\t\tchild_node.params.init();\n\t\tchild_node.parent_controller.on_set_parent();\n\t\tchild_node.name_controller.post_set_full_path();\n\t\tif (child_node.children_allowed() && child_node.children_controller) {\n\t\t\tfor (let child of child_node.children_controller.children()) {\n\t\t\t\tchild.name_controller.post_set_full_path();\n\t\t\t}\n\t\t}\n\t\tthis.node.emit(NodeEvent.CREATED, {child_node_json: child_node.to_json()});\n\t\tif (this.node.scene.lifecycle_controller.on_create_hook_allowed()) {\n\t\t\tchild_node.lifecycle.run_on_create_hooks();\n\t\t}\n\t\tchild_node.lifecycle.run_on_add_hooks();\n\t\tthis.set_child_name(child_node, NameController.base_name(child_node));\n\t\tthis.node.lifecycle.run_on_child_add_hooks(child_node);\n\t\t// this.post_add_node(child_node);\n\n\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\tthis._children_node.add_graph_input(child_node);\n\t\t}\n\t\tif (child_node.require_webgl2()) {\n\t\t\tthis.node.scene.webgl_controller.set_require_webgl2();\n\t\t}\n\n\t\tthis.node.scene.missing_expression_references_controller.check_for_missing_references(child_node);\n\n\t\treturn child_node;\n\t}\n\t// that's redondant with the lifecycle on_child_add and on_child_remove\n\t// post_add_node(node: BaseNode) {}\n\t// post_remove_node(node: BaseNode) {}\n\n\tremove_node(child_node: BaseNodeType): void {\n\t\tif (child_node.parent != this.node) {\n\t\t\treturn console.warn(`node ${child_node.name} not under parent ${this.node.full_path()}`);\n\t\t} else {\n\t\t\t// set other dependencies dirty\n\t\t\tchild_node.set_successors_dirty(this.node);\n\n\t\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\t\tthis._children_node.remove_graph_input(child_node);\n\t\t\t}\n\n\t\t\tif (this.selection.contains(child_node)) {\n\t\t\t\tthis.selection.remove([child_node]);\n\t\t\t}\n\n\t\t\tconst first_connection = child_node.io.connections.first_input_connection();\n\t\t\tchild_node.io.connections.input_connections()?.forEach((input_connection) => {\n\t\t\t\tif (input_connection) {\n\t\t\t\t\tinput_connection.disconnect({set_input: true});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchild_node.io.connections.output_connections()?.forEach((output_connection) => {\n\t\t\t\tif (output_connection) {\n\t\t\t\t\toutput_connection.disconnect({set_input: true});\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tconst old_src = first_connection.node_src;\n\t\t\t\t\t\tconst old_output_index = output_connection.output_index;\n\t\t\t\t\t\tconst old_dest = output_connection.node_dest;\n\t\t\t\t\t\tconst old_input_index = output_connection.input_index;\n\t\t\t\t\t\told_dest.io.inputs.set_input(old_input_index, old_src, old_output_index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// disconnect successors\n\t\t\tchild_node.graph_disconnect_successors();\n\n\t\t\t// remove from children\n\t\t\tchild_node.set_parent(null);\n\t\t\tdelete this._children[child_node.name];\n\t\t\tthis._remove_from_nodes_by_type(child_node);\n\t\t\tthis.node.scene.nodes_controller.remove_from_instanciated_node(child_node);\n\n\t\t\tthis.node.lifecycle.run_on_child_remove_hooks(child_node);\n\t\t\tchild_node.lifecycle.run_on_delete_hooks();\n\t\t\tchild_node.emit(NodeEvent.DELETED, {parent_id: this.node.graph_node_id});\n\t\t}\n\t}\n\n\t_add_to_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tthis._children_by_type[type] = this._children_by_type[type] || [];\n\t\tif (!lodash_includes(this._children_by_type[type], node_id)) {\n\t\t\tthis._children_by_type[type].push(node_id);\n\t\t}\n\t\tthis.add_to_children_and_grandchildren_by_context(node);\n\t}\n\t_remove_from_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tif (this._children_by_type[type]) {\n\t\t\tconst index = this._children_by_type[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_by_type[type].splice(index, 1);\n\t\t\t\tif (this._children_by_type[type].length == 0) {\n\t\t\t\t\tdelete this._children_by_type[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.remove_from_children_and_grandchildren_by_context(node);\n\t}\n\tadd_to_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tthis._children_and_grandchildren_by_context[type] = this._children_and_grandchildren_by_context[type] || [];\n\t\tif (!lodash_includes(this._children_and_grandchildren_by_context[type], node_id)) {\n\t\t\tthis._children_and_grandchildren_by_context[type].push(node_id);\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.add_to_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\tremove_from_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tif (this._children_and_grandchildren_by_context[type]) {\n\t\t\tconst index = this._children_and_grandchildren_by_context[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_and_grandchildren_by_context[type].splice(index, 1);\n\t\t\t\tif (this._children_and_grandchildren_by_context[type].length == 0) {\n\t\t\t\t\tdelete this._children_and_grandchildren_by_context[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.remove_from_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\n\tnodes_by_type(type: string): BaseNodeType[] {\n\t\tconst node_ids = this._children_by_type[type] || [];\n\t\tconst graph = this.node.scene.graph;\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tnode_ids.forEach((node_id) => {\n\t\t\tconst node = graph.node_from_id(node_id) as BaseNodeType;\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t});\n\t\treturn nodes;\n\t}\n\tchild_by_name(name: string) {\n\t\treturn this._children[name];\n\t}\n\t// children_and_grandchildren_by_context(context: NodeContext): BaseNode[]{\n\t// \tconst node_ids = this._children_and_grandchildren_by_context[context] || []\n\t// \tconst graph = this.self.scene().graph()\n\t// \treturn node_ids.map(node_id=>graph.node_from_id(node_id))\n\t// }\n\thas_children_and_grandchildren_with_context(context: NodeContext) {\n\t\treturn this._children_and_grandchildren_by_context[context] != null;\n\t}\n\t//lodash_filter this.children(), (child)=>\n\t//\tchild.type() == type\n\n\tchildren(): BaseNodeType[] {\n\t\treturn lodash_values(this._children);\n\t}\n\tchildren_names() {\n\t\treturn lodash_sortBy(lodash_keys(this._children));\n\t}\n\t// children_map: ->\n\t// \t@_children\n\n\ttraverse_children(callback: (arg0: BaseNodeType) => void) {\n\t\tfor (let child of this.children()) {\n\t\t\tcallback(child);\n\n\t\t\tchild.children_controller?.traverse_children(callback);\n\t\t}\n\t}\n}\n","// import UIData from './UIData';\nimport {BaseNodeType} from '../engine/nodes/_Base';\nimport lodash_difference from 'lodash/difference';\nimport lodash_union from 'lodash/union';\n// import lodash_isArray from 'lodash/isArray'\nimport lodash_isEqual from 'lodash/isEqual';\nimport {NodeEvent} from '../engine/poly/NodeEvent';\n\nexport class CoreNodeSelection {\n\t_node_ids: string[] = [];\n\tconstructor(private _node: BaseNodeType) {\n\t\t// super();\n\t\t// this._node_ids = [];\n\t}\n\n\tnode() {\n\t\treturn this._node;\n\t}\n\n\tnodes(): BaseNodeType[] {\n\t\treturn this._node.scene.graph.nodes_from_ids(this._node_ids) as BaseNodeType[];\n\t}\n\n\tcontains(node: BaseNodeType): boolean {\n\t\treturn this._node_ids.includes(node.graph_node_id);\n\t}\n\tequals(nodes: BaseNodeType[]): boolean {\n\t\tconst node_ids = nodes.map((node) => node.graph_node_id).sort();\n\t\treturn lodash_isEqual(node_ids, this._node_ids);\n\t}\n\n\tclear() {\n\t\tthis._node_ids = [];\n\t\tthis.send_update_event();\n\t}\n\tset(nodes: BaseNodeType[]) {\n\t\t// this.remove(this.nodes());\n\t\tthis._node_ids = [];\n\t\tthis.add(nodes);\n\t}\n\n\tadd(nodes_to_add: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_add)) { nodes_to_add = [nodes_to_add]; }\n\n\t\tconst node_ids_to_add = nodes_to_add.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_union(this._node_ids, node_ids_to_add);\n\n\t\tthis.send_update_event();\n\t}\n\n\tremove(nodes_to_remove: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_remove)) { nodes_to_remove = [nodes_to_remove]; }\n\n\t\tconst node_ids_to_remove = nodes_to_remove.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_difference(this._node_ids, node_ids_to_remove);\n\n\t\tthis.send_update_event();\n\t}\n\n\tprivate send_update_event() {\n\t\tthis._node.emit(NodeEvent.SELECTION_UPDATED);\n\t}\n\n\tprivate _json: string[] = [];\n\tto_json() {\n\t\tthis._json = this._json || [];\n\t\tthis._json = this._node_ids.map((id) => id);\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\ntype Callback = () => void;\ntype CallbackWithChildNode = (child_node: BaseNodeType) => void;\n\nexport class LifeCycleController {\n\tprotected _creation_completed = false;\n\tprotected _on_child_add_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_child_remove_hooks: CallbackWithChildNode[] | undefined;\n\tprivate _on_create_hooks: Callback[] | undefined;\n\tprivate _on_add_hooks: Callback[] | undefined;\n\tprivate _on_delete_hooks: Callback[] | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset_creation_completed() {\n\t\tthis._creation_completed = true;\n\t}\n\tget creation_completed() {\n\t\treturn this.node.scene.loading_controller.loaded && this._creation_completed;\n\t}\n\t//\n\t//\n\t// ON CHILD ADD\n\t//\n\t//\n\tadd_on_child_add_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_add_hooks = this._on_child_add_hooks || [];\n\t\tthis._on_child_add_hooks.push(callback);\n\t}\n\trun_on_child_add_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_add_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CHILD REMOVE\n\t//\n\t//\n\tadd_on_child_remove_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_remove_hooks = this._on_child_remove_hooks || [];\n\t\tthis._on_child_remove_hooks.push(callback);\n\t}\n\trun_on_child_remove_hooks(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_remove_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CREATE\n\t//\n\t//\n\tadd_on_create_hook(callback: Callback) {\n\t\tthis._on_create_hooks = this._on_create_hooks || [];\n\t\tthis._on_create_hooks.push(callback);\n\t}\n\trun_on_create_hooks() {\n\t\tthis.execute_hooks(this._on_create_hooks);\n\t}\n\n\t//\n\t//\n\t// ON ADD\n\t//\n\t//\n\tadd_on_add_hook(callback: Callback) {\n\t\tthis._on_add_hooks = this._on_add_hooks || [];\n\t\tthis._on_add_hooks.push(callback);\n\t}\n\trun_on_add_hooks() {\n\t\tthis.execute_hooks(this._on_add_hooks);\n\t}\n\n\t//\n\t//\n\t// ON DELETE\n\t//\n\t//\n\tadd_delete_hook(callback: Callback) {\n\t\tthis._on_delete_hooks = this._on_delete_hooks || [];\n\t\tthis._on_delete_hooks.push(callback);\n\t}\n\trun_on_delete_hooks() {\n\t\tthis.execute_hooks(this._on_delete_hooks);\n\t}\n\n\t//\n\t//\n\t// UTILS\n\t//\n\t//\n\tprotected execute_hooks(hooks: Callback[] | undefined) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tprotected execute_hooks_with_child_node(hooks: CallbackWithChildNode[] | undefined, child_node: BaseNodeType) {\n\t\tif (hooks) {\n\t\t\tfor (let hook of hooks) {\n\t\t\t\thook(child_node);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../_Base';\nimport {BaseContainer} from '../../containers/_Base';\nimport {POLY} from '../../Poly';\n\nexport class CookController {\n\t_cooking: boolean = false;\n\t_cooks_count: number = 0;\n\t_max_cook_time: number = -1;\n\t_cooking_dirty_timestamp: number | undefined;\n\t_cook_time_with_inputs: number = 0;\n\t_cook_time_with_inputs_start: number | undefined;\n\t_cook_time_start: number | undefined;\n\t_cook_time: number = 0;\n\t_cook_time_params_start: number | undefined;\n\t_cook_time_params: number = 0;\n\t_last_eval_key: string | undefined;\n\n\t_inputs_evaluation_required: boolean = true; //currently only for switch SOP\n\n\tconstructor(private node: BaseNodeType) {}\n\n\tdisallow_inputs_evaluation() {\n\t\tthis._inputs_evaluation_required = false;\n\t}\n\n\tget is_cooking(): boolean {\n\t\treturn this._cooking === true;\n\t}\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\tget cook_time(): number {\n\t\treturn this._cook_time;\n\t}\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t//this.emit 'node_dirty_updated'\n\t// this.node_post_set_dirty()\n\t// post_remove_dirty_state: (message)->\n\t// \tif !message?\n\t// \t\tthrow \"remove dirty state without message\"\n\n\t// node_post_set_dirty: ->\n\t// \t#\n\tprivate _init_cooking_state() {\n\t\tthis._cooking = true;\n\t\tthis._cooking_dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t}\n\tprivate _init_cooking_start_time(perf_active?: boolean) {\n\t\tif (perf_active == null) {\n\t\t\tperf_active = this.node.scene.performance.started;\n\t\t}\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_start = performance.now();\n\t\t}\n\t}\n\n\tprivate async _start_cook_if_no_errors(input_contents: any[]) {\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.end_cook();\n\t\t} else {\n\t\t\t// this.self.cook(input_containers);\n\t\t\ttry {\n\t\t\t\tawait this.node.cook(input_contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.node.states.error.set(`node internal error: '${e}'.`);\n\t\t\t\tconsole.error(this.node.full_path(), e);\n\t\t\t\tthis.end_cook();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cook_main() {\n\t\tif (this.is_cooking) {\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tconst perf_active = this.node.scene.performance.started;\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_with_inputs_start = performance.now();\n\t\t}\n\t\tthis.node.states.error.clear();\n\n\t\t//this._block_params_dirty_propagation()\n\t\tconst input_containers = await this.evaluate_inputs_and_params();\n\n\t\tthis._init_cooking_start_time(perf_active);\n\n\t\tconst input_contents = [];\n\t\tif (input_containers) {\n\t\t\tlet input_container;\n\t\t\tfor (let i = 0; i < input_containers.length; i++) {\n\t\t\t\tinput_container = input_containers[i];\n\t\t\t\tif (input_container) {\n\t\t\t\t\tif (this.node.io.inputs.input_clonable_state_with_override(i)) {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content_cloned());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this._start_cook_if_no_errors(input_contents);\n\t}\n\tasync cook_main_without_inputs() {\n\t\tthis.node.scene.cook_controller.add_node(this.node);\n\t\tif (this.is_cooking) {\n\t\t\t// TODO:\n\t\t\t// this seems to happen because when we flush the cooker queue,\n\t\t\t// some graph nodes will trigger more updates, which will then make dependent nodes\n\t\t\t// dirty again\n\t\t\tconsole.warn('cook_main_without_inputs already cooking', this.node.full_path());\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tthis._init_cooking_start_time();\n\t\tthis.node.states.error.clear();\n\n\t\tawait this.node.params.eval_all();\n\t\tawait this._start_cook_if_no_errors([]);\n\t}\n\t// catch e\n\t// \tthis.set_error(\"failed to cook: #{e}\")\n\n\tend_cook(message?: string | null) {\n\t\tthis._increment_cooks_count();\n\n\t\tconst dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t\tif (dirty_timestamp == null || dirty_timestamp === this._cooking_dirty_timestamp) {\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis._terminate_cook_process();\n\t\t} else {\n\t\t\tPOLY.log('COOK AGAIN', dirty_timestamp, this._cooking_dirty_timestamp, this.node.full_path());\n\t\t\tthis._cooking = false;\n\t\t\tthis.cook_main();\n\t\t}\n\t}\n\n\t_terminate_cook_process() {\n\t\tif (this.is_cooking) {\n\t\t\t//this._unblock_params_dirty_propagation()\n\t\t\tthis._cooking = false;\n\n\t\t\t// this._cook_eval_key = `${this.graph_node_id}/${performance.now()}@${this.context().frame()}`;\n\n\t\t\tthis._record_cook_time();\n\t\t\t//console.log(\"END COOK: #{this.full_path()} #{this.cook_time()} (with inputs:#{this.cook_time_with_inputs()}) (cook count: #{@_cooks_count}): #{message}\")\n\t\t\t//this.notify_requesters()\n\t\t\tsetTimeout(this.node.container_controller.notify_requesters.bind(this.node.container_controller), 0);\n\t\t}\n\t}\n\tprivate _increment_cooks_count() {\n\t\tif (this.is_cooking) {\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cooks_count += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// cook_eval_key() {\n\t// \tif (!this.is_dirty()) {\n\t// \t\treturn this._cook_eval_key;\n\t// \t} else {\n\t// \t\treturn performance.now();\n\t// \t}\n\t// }\n\n\t_record_cook_time() {\n\t\tif (this.node.scene.performance.started) {\n\t\t\tconst cook_time_end = performance.now();\n\n\t\t\tif (this._cook_time_with_inputs_start != null) {\n\t\t\t\tthis._cook_time_with_inputs = cook_time_end - this._cook_time_with_inputs_start;\n\t\t\t\tthis._cook_time_with_inputs_start = undefined;\n\t\t\t}\n\n\t\t\tif (this._cook_time_params_start != null && this._cook_time_start != null) {\n\t\t\t\tthis._cook_time_params = this._cook_time_start - this._cook_time_params_start;\n\t\t\t}\n\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cook_time = cook_time_end - this._cook_time_start;\n\t\t\t\tthis._cook_time_start = undefined;\n\t\t\t}\n\n\t\t\tthis._max_cook_time = Math.max(this._max_cook_time, this._cook_time);\n\t\t}\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis.node.scene.performance.record_node_cook_data(this.node);\n\t\t}\n\t}\n\n\t// allow_eval_key_check() {\n\t// \treturn false;\n\t// }\n\n\tasync evaluate_inputs_and_params() {\n\t\t//t0 = performance.now()\n\n\t\tlet input_containers: (BaseContainer | null)[] = [];\n\t\tif (this._inputs_evaluation_required) {\n\t\t\tinput_containers = await this.node.io.inputs.eval_required_inputs_p();\n\t\t}\n\t\t// const inputs_eval_key = input_containers.map( c => c.eval_key()).join('-');\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis._cook_time_params_start = performance.now();\n\t\t}\n\n\t\t/*const params_eval_key = */ await this.node.params.eval_all();\n\t\t// const full_eval_key = [inputs_eval_key, params_eval_key].join('+');\n\t\t// if (this.allow_eval_key_check() && (this._last_eval_key != null) && (this._last_eval_key === full_eval_key)) {\n\t\t// \tthis._terminate_cook_process('no need to cook');\n\t\t// } else {\n\t\t// \tthis._last_eval_key = full_eval_key;\n\t\t// }\n\t\treturn input_containers;\n\t}\n\n\t//this._time_with_precision(@_cook_time)\n\tget cook_time_with_inputs() {\n\t\treturn this._cook_time_with_inputs;\n\t}\n\t//this._time_with_precision(@_cook_time_with_inputs)\n\tget cook_time_params() {\n\t\treturn this._cook_time_params;\n\t}\n\t_time_with_precision(time: number) {\n\t\tconst precision = 1000;\n\t\treturn Math.round(time * precision) / precision;\n\t}\n}\n","/// <reference path=\"../../../../custom_typings/guards.d.ts\" />\n// finally, guard ALL the types!\nfunction typeGuard<T extends PrimitiveOrConstructor>(o: any, className: T): o is GuardedType<T> {\n\tconst localPrimitiveOrConstructor: PrimitiveOrConstructor = className;\n\tif (typeof localPrimitiveOrConstructor === 'string') {\n\t\treturn typeof o === localPrimitiveOrConstructor;\n\t}\n\treturn o instanceof localPrimitiveOrConstructor;\n}\n\nimport lodash_groupBy from 'lodash/groupBy';\nimport {BaseNodeType, BaseNodeClass} from '../_Base';\n\nimport {BaseParamType, BaseParamClass} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nenum METHODS {\n\tSUCCESSORS = 'graph_successors',\n\tPREDECESSORS = 'graph_predecessors',\n}\n\nexport class DependenciesController {\n\tprivate _params_referrees_by_graph_node_id: Dictionary<BaseParamType> | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// debug_dependencies() {\n\t// \tconst nodes = this.scene_successors();\n\t// \tconsole.log('--------------------');\n\t// \tnodes.forEach((n) => {\n\t// \t\tconsole.log(n.full_path());\n\t// \t});\n\t// }\n\n\tscene_successors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.SUCCESSORS);\n\t}\n\n\tscene_predecessors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.PREDECESSORS);\n\t}\n\tprivate _find_scene_node_scene_nodes(method: METHODS): BaseNodeType[] {\n\t\tconst params = this.node.params.all;\n\t\tconst graph_nodes: CoreGraphNode[] = [];\n\t\tfor (let param of params) {\n\t\t\tgraph_nodes.push(param);\n\t\t}\n\t\tgraph_nodes.push(this.node);\n\t\tconst start_nodes = graph_nodes;\n\t\tlet base_nodes: BaseNodeType[] = [];\n\t\tfor (let start_node of start_nodes) {\n\t\t\tthis._find_base_nodes_from_node(start_node, method, base_nodes);\n\t\t}\n\n\t\tif (method == METHODS.SUCCESSORS) {\n\t\t\tfor (let node of this.param_nodes_referree()) {\n\t\t\t\tbase_nodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\t// ensure uniq and not current node\n\t\tbase_nodes = base_nodes.filter((scene_node) => {\n\t\t\treturn scene_node.graph_node_id != this.node.graph_node_id;\n\t\t});\n\t\tconst base_nodes_by_graph_node_id = lodash_groupBy(base_nodes, (n) => n.graph_node_id);\n\t\tconst uniq_base_nodes: BaseNodeType[] = [];\n\t\tObject.keys(base_nodes_by_graph_node_id).forEach((graph_node_id) => {\n\t\t\tuniq_base_nodes.push(base_nodes_by_graph_node_id[graph_node_id][0]);\n\t\t});\n\t\treturn uniq_base_nodes;\n\t}\n\n\tprivate _find_base_nodes_from_node(node: CoreGraphNode, method: METHODS, base_nodes: BaseNodeType[]) {\n\t\tconst next_nodes = node[method]();\n\t\tfor (let next_node of next_nodes) {\n\t\t\tif (next_node instanceof BaseParamClass) {\n\t\t\t\tbase_nodes.push(next_node.node);\n\t\t\t} else {\n\t\t\t\tif (typeGuard(next_node, BaseNodeClass)) {\n\t\t\t\t\tbase_nodes.push(next_node);\n\t\t\t\t} else {\n\t\t\t\t\tthis._find_base_nodes_from_node(next_node, method, base_nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn base_nodes;\n\t}\n\n\t//\n\t//\n\t// REFERRED BY\n\t// which is used for operator path referring nodes without creating a graph edge\n\t//\n\t//\n\tadd_param_referree(param: BaseParamType) {\n\t\tthis._params_referrees_by_graph_node_id = this._params_referrees_by_graph_node_id || {};\n\t\tthis._params_referrees_by_graph_node_id[param.graph_node_id] = param;\n\t}\n\tremove_param_referree(param: BaseParamType) {\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tdelete this._params_referrees_by_graph_node_id[param.graph_node_id];\n\t\t}\n\t}\n\tparams_referree(): BaseParamType[] {\n\t\tconst list = [];\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tfor (let graph_node_id of Object.keys(this._params_referrees_by_graph_node_id)) {\n\t\t\t\tlist.push(this._params_referrees_by_graph_node_id[graph_node_id]);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tparam_nodes_referree(): BaseNodeType[] {\n\t\tconst node_by_graph_node_id: Dictionary<BaseNodeType> = {};\n\t\tlet node;\n\t\tfor (let param of this.params_referree()) {\n\t\t\tnode = param.node;\n\t\t\tnode_by_graph_node_id[node.graph_node_id] = node;\n\t\t}\n\t\tconst list = [];\n\t\tfor (let graph_node_id of Object.keys(node_by_graph_node_id)) {\n\t\t\tlist.push(node_by_graph_node_id[graph_node_id]);\n\t\t}\n\t\treturn list;\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamEvent} from '../../poly/ParamEvent';\n\nexport class EmitController {\n\t_blocked_emit: boolean = false;\n\t_blocked_parent_emit: boolean = false;\n\t_count_by_event_name: Dictionary<number> = {};\n\tconstructor(protected param: BaseParamType) {}\n\n\tget emit_allowed(): boolean {\n\t\tif (this._blocked_emit === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.param.scene.loading_controller.is_loading) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: should I also prevent nodes from updating\n\t\t// when they are being called in a loop such as from the Copy SOP?\n\t\t//node = this.node()\n\t\t//node? && !node.is_cooking() && this.scene().emit_allowed() # this prevents a camera from updating its param for instance\n\t\t// although maybe I should send a dirty to the store, and then that store queries the param?\n\t\treturn this.param.scene.dispatch_controller.emit_allowed;\n\t}\n\n\tblock_emit() {\n\t\tthis._blocked_emit = true;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.block_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tunblock_emit() {\n\t\tthis._blocked_emit = false;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.unblock_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tblock_parent_emit() {\n\t\tthis._blocked_parent_emit = true;\n\t\treturn true;\n\t}\n\tunblock_parent_emit() {\n\t\tthis._blocked_parent_emit = false;\n\t\treturn true;\n\t}\n\n\tincrement_count(event_name: ParamEvent) {\n\t\tthis._count_by_event_name[event_name] = this._count_by_event_name[event_name] || 0;\n\t\tthis._count_by_event_name[event_name] += 1;\n\t}\n\tevents_count(event_name: ParamEvent): number {\n\t\treturn this._count_by_event_name[event_name] || 0;\n\t}\n\n\temit(event: ParamEvent) {\n\t\tif (this.emit_allowed) {\n\t\t\tthis.param.emit(event);\n\n\t\t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t\t\t\tthis.param.parent_param.emit(event);\n\t\t\t}\n\t\t}\n\t}\n\t// emit_param_updated() {\n\t// \tconsole.log('emit_param_updated', this.param.name, this.emit_allowed);\n\t// \tif (this.emit_allowed) {\n\t// \t\tthis.param.emit(ParamEvent.UPDATED);\n\n\t// \t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t// \t\t\tthis.param.parent_param.emit(ParamEvent.UPDATED);\n\t// \t\t}\n\t// \t}\n\t// \t//else\n\t// \t//\tthis.emit('param_updated')\n\n\t// \t// return null\n\t// }\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamValueSerializedTypeMap} from '../types/ParamValueSerializedTypeMap';\nimport {ParamType} from '../../poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../types/ParamInitValueSerializedTypeMap';\n\nexport interface ParamSerializerData {\n\tname: string;\n\ttype: string;\n\traw_input: ParamInitValueSerializedTypeMap[ParamType];\n\tvalue: ParamValueSerializedTypeMap[ParamType];\n\texpression?: string;\n\tgraph_node_id: string;\n\t// is_dirty: boolean;\n\terror_message?: string;\n\tis_visible: boolean;\n\tfolder_name?: string;\n\tcomponents?: string[];\n}\n\nexport class ParamSerializer {\n\tconstructor(protected param: BaseParamType) {}\n\n\tto_json(): ParamSerializerData {\n\t\tconst data: ParamSerializerData = {\n\t\t\tname: this.param.name,\n\t\t\ttype: this.param.type,\n\t\t\traw_input: this.raw_input(),\n\t\t\tvalue: this.value(),\n\t\t\texpression: this.expression(),\n\t\t\tgraph_node_id: this.param.graph_node_id,\n\t\t\t// is_dirty: this.param.is_dirty,\n\t\t\terror_message: this.error_message(),\n\t\t\tis_visible: this.is_visible(),\n\t\t\t// folder_name: this.param.ui_data.folder_name,\n\t\t\tcomponents: undefined,\n\t\t};\n\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tdata['components'] = this.param.components.map((component) => component.graph_node_id);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\traw_input() {\n\t\treturn this.param.raw_input_serialized;\n\t}\n\tvalue() {\n\t\treturn this.param.value_serialized;\n\t}\n\texpression() {\n\t\treturn this.param.has_expression() ? this.param.expression_controller?.expression : undefined;\n\t}\n\terror_message() {\n\t\treturn this.param.states.error.message;\n\t}\n\tis_visible() {\n\t\treturn this.param.options.is_visible;\n\t}\n}\n","import {BaseParamType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.param);\n\terror = new ErrorState(this.param);\n\tconstructor(protected param: BaseParamType) {}\n}\n","import {BaseParamType} from '../../_Base';\n\nexport class TimeDependentState {\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active(): boolean {\n\t\tconst frame_graph_node_id = this.param.scene.time_controller.graph_node.graph_node_id;\n\n\t\treturn this.param.graph_predecessor_ids().includes(frame_graph_node_id);\n\t}\n}\n","import {BaseParamType} from '../../_Base';\nimport {ParamEvent} from '../../../poly/ParamEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(private param: BaseParamType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tthis._message = message;\n\t\t\tif (this._message) {\n\t\t\t\tconsole.log(this.param.full_path(), this._message);\n\t\t\t}\n\t\t\tthis.param.emit_controller.emit(ParamEvent.ERROR_UPDATED);\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from '../../../params/_Base';\nimport {ParamOptions} from '../../../params/utils/OptionsController';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\n\nimport {FloatParam} from '../../../params/Float';\nimport {OperatorPathParam} from '../../../params/OperatorPath';\n\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamEvent} from '../../../poly/ParamEvent';\nimport {NodeParamsConfig} from './ParamsConfig';\n\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamConstructorByType} from '../../../params/types/ParamConstructorByType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\n\nconst NODE_SIMPLE_NAME = 'params';\n\nexport type OnSceneLoadHook = () => void;\ntype PostCreateParamsHook = () => void;\n\nexport interface ParamOptionToAdd<T extends ParamType> {\n\tname: string;\n\ttype: T;\n\tinit_value: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n}\nexport interface ParamsUpdateOptions {\n\tnames_to_delete?: string[];\n\tto_add?: ParamOptionToAdd<ParamType>[];\n}\n\nexport class ParamsController {\n\tprivate _param_create_mode: boolean = false;\n\tprivate _params_by_name: Dictionary<BaseParamType> = {};\n\t// caches\n\tprivate _params_list: BaseParamType[] = [];\n\tprivate _param_names: string[] = [];\n\tprivate _non_spare_params: BaseParamType[] = [];\n\tprivate _spare_params: BaseParamType[] = [];\n\tprivate _non_spare_param_names: string[] = [];\n\tprivate _spare_param_names: string[] = [];\n\n\tprivate _params_node: CoreGraphNode | undefined;\n\t// private _params_eval_key: string;\n\tprivate _params_added_since_last_params_eval: boolean = false;\n\t// private _current_param_folder_name: string | undefined;\n\n\t// hooks\n\tprivate _post_create_params_hook: PostCreateParamsHook | undefined;\n\tprivate _on_scene_load_hooks: OnSceneLoadHook[] | undefined;\n\tprivate _on_scene_load_hook_names: string[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tprivate init_dependency_node() {\n\t\tif (!this._params_node) {\n\t\t\t// TODO: consider not having a params_node for nodes which have no parameters\n\t\t\tthis._params_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t// this._params_node.set_scene(this.node.scene);\n\t\t\tthis.node.add_graph_input(this._params_node);\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.init_dependency_node();\n\t\t// this.reset_params()\n\t\tthis._param_create_mode = true;\n\n\t\tthis.init_from_params_config();\n\t\tthis.node.create_params();\n\t\tthis._post_create_params();\n\t}\n\tprivate _post_create_params() {\n\t\tthis._update_caches();\n\t\t// this._create_params_ui_data_dependencies();\n\t\tthis.init_param_accessors();\n\t\tthis._param_create_mode = false;\n\n\t\tthis.run_post_create_params_hook();\n\n\t\t// This was to debug a weird bug where I was adding nodes to the list\n\t\t// of params, from the DependenciesController\n\t\t// this._params_list.push = (...items: BaseParamType[]) => {\n\t\t// \tif (items[0] && !items[0].compute) {\n\t\t// \t\tconsole.warn('adding params', items);\n\t\t// \t}\n\t\t// \tfor (let i of items) {\n\t\t// \t\tthis._params_list[this._params_list.length] = i;\n\t\t// \t}\n\t\t// \treturn 0;\n\t\t// };\n\t}\n\tupdate_params(options: ParamsUpdateOptions) {\n\t\tlet has_created_a_param = false;\n\t\tlet has_deleted_a_param = false;\n\t\tif (options.names_to_delete) {\n\t\t\tfor (let name of options.names_to_delete) {\n\t\t\t\tif (this.has(name)) {\n\t\t\t\t\tthis.delete_param(name);\n\t\t\t\t\thas_deleted_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (options.to_add) {\n\t\t\tfor (let param_data of options.to_add) {\n\t\t\t\tconst param = this.add_param(\n\t\t\t\t\tparam_data.type,\n\t\t\t\t\tparam_data.name,\n\t\t\t\t\tparam_data.init_value,\n\t\t\t\t\tparam_data.options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\thas_created_a_param = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (has_deleted_a_param || has_created_a_param) {\n\t\t\tthis._update_caches();\n\t\t\tthis.init_param_accessors();\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\tpost_create_spare_params() {\n\t\tthis._update_caches();\n\t\tthis.init_param_accessors();\n\t}\n\n\tprivate init_from_params_config() {\n\t\tconst params_config = this.node.params_config as NodeParamsConfig;\n\t\tif (params_config) {\n\t\t\tfor (let name of Object.keys(params_config)) {\n\t\t\t\tconst config = params_config[name];\n\t\t\t\tthis.add_param(config.type, name, config.init_value, config.options);\n\t\t\t}\n\t\t}\n\t}\n\tprivate init_param_accessors() {\n\t\tlet current_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\t\tthis._remove_unneeded_accessors(current_names_in_accessor);\n\t\t// update var after having removed accessors\n\t\tcurrent_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\n\t\tfor (let param of this.all) {\n\t\t\tconst is_spare: boolean = param.options.is_spare;\n\n\t\t\tconst param_not_yet_in_accessors = !current_names_in_accessor.includes(param.name);\n\n\t\t\tif (param_not_yet_in_accessors || is_spare) {\n\t\t\t\tObject.defineProperty(this.node.pv, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param.value;\n\t\t\t\t\t},\n\t\t\t\t\t// only spare parameters can be removed\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t\tObject.defineProperty(this.node.p, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param;\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprivate _remove_unneeded_accessors(current_names_in_accessor: string[]) {\n\t\tconst current_param_names = this._param_names;\n\t\tconst names_to_remove = [];\n\t\tfor (let current_name_in_accessor of current_names_in_accessor) {\n\t\t\tif (!current_param_names.includes(current_name_in_accessor)) {\n\t\t\t\tnames_to_remove.push(current_name_in_accessor);\n\t\t\t}\n\t\t}\n\n\t\tfor (let name_to_remove of names_to_remove) {\n\t\t\tObject.defineProperty(this.node.pv, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t\tObject.defineProperty(this.node.p, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tget params_node() {\n\t\treturn this._params_node;\n\t}\n\tget all() {\n\t\treturn this._params_list;\n\t}\n\tget non_spare() {\n\t\treturn this._non_spare_params;\n\t}\n\tget spare() {\n\t\treturn this._spare_params;\n\t}\n\tget names(): string[] {\n\t\treturn this._param_names;\n\t}\n\tget non_spare_names(): string[] {\n\t\treturn this._non_spare_param_names;\n\t}\n\tget spare_names(): string[] {\n\t\treturn this._spare_param_names;\n\t}\n\t// get params_by_name() {\n\t// \treturn this._params_by_name;\n\t// }\n\t// get all_params() {\n\t// \t// return lodash_concat(lodash_values(this._params), lodash_values(this._spare_params));\n\t// \treturn lodash_values(this._params);\n\t// }\n\n\tprivate set_with_type<T extends ParamType>(name: string, value: ParamInitValuesTypeMap[T], type: T) {\n\t\tconst param = this.param_with_type(name, type);\n\t\tif (param) {\n\t\t\tparam.set(value as never);\n\t\t} else {\n\t\t\tconsole.warn(`param ${name} not found with type ${type}`);\n\t\t}\n\t}\n\tset_float(name: string, value: ParamInitValuesTypeMap[ParamType.FLOAT]) {\n\t\tthis.set_with_type(name, value, ParamType.FLOAT);\n\t}\n\tset_vector3(name: string, value: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tthis.set_with_type(name, value, ParamType.VECTOR3);\n\t}\n\n\thas_param(name: string) {\n\t\treturn this._params_by_name[name] != null;\n\t}\n\thas(name: string) {\n\t\treturn this.has_param(name);\n\t}\n\tget(name: string) {\n\t\treturn this.param(name);\n\t}\n\tparam_with_type<T extends ParamType>(name: string, type: T): ParamConstructorMap[T] | undefined {\n\t\tconst param = this.param(name);\n\t\tif (param && param.type == type) {\n\t\t\treturn param as ParamConstructorMap[T];\n\t\t}\n\t}\n\tget_float(name: string): FloatParam {\n\t\treturn this.param_with_type(name, ParamType.FLOAT) as FloatParam;\n\t}\n\tget_operator_path(name: string): OperatorPathParam {\n\t\treturn this.param_with_type(name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n\t}\n\tvalue(name: string) {\n\t\treturn this.param(name)?.value;\n\t}\n\tvalue_with_type<T extends ParamType>(name: string, type: T): ParamValuesTypeMap[T] {\n\t\treturn this.param_with_type(name, type)?.value as ParamValuesTypeMap[T];\n\t\t// const param = this.param(name);\n\t\t// if (param && param.type() == type) {\n\t\t// \treturn param.value();\n\t\t// }\n\t}\n\tboolean(name: string) {\n\t\treturn this.value_with_type(name, ParamType.BOOLEAN);\n\t}\n\tfloat(name: string) {\n\t\treturn this.value_with_type(name, ParamType.FLOAT);\n\t}\n\tinteger(name: string) {\n\t\treturn this.value_with_type(name, ParamType.INTEGER);\n\t}\n\tstring(name: string) {\n\t\treturn this.value_with_type(name, ParamType.STRING);\n\t}\n\tvector2(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR2);\n\t}\n\tvector3(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR3);\n\t}\n\tcolor(name: string) {\n\t\treturn this.value_with_type(name, ParamType.COLOR);\n\t}\n\n\tparam(name: string) {\n\t\tconst p = this._params_by_name[name];\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`tried to access param '${name}' in node ${this.node.full_path()}, but existing params are: ${\n\t\t\t\t\tthis.names\n\t\t\t\t} on node ${this.node.full_path()}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\t// param_cache_name(param_name: string) {\n\t// \treturn `_param_${param_name}`;\n\t// }\n\n\t// delete_params(param_names: string[]) {\n\t// \tfor (let param_name of param_names) {\n\t// \t\tthis.delete_param(param_name);\n\t// \t}\n\n\t// }\n\t// call update_params instead\n\tprivate delete_param(param_name: string) {\n\t\tconst param = this._params_by_name[param_name];\n\t\tif (param) {\n\t\t\tif (this._params_node) {\n\t\t\t\tthis._params_node.remove_graph_input(this._params_by_name[param_name]);\n\t\t\t}\n\t\t\tparam.set_node(null);\n\t\t\tdelete this._params_by_name[param_name];\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tconst child_name = component.name;\n\t\t\t\t\tdelete this._params_by_name[child_name];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// const name_index = this._param_names.indexOf(param_name)\n\t\t\t// if(name_index >= 0){\n\t\t\t// \tthis._param_names.splice(name_index, 1)\n\t\t\t// }\n\t\t\t// param.emit(ParamEvent.DELETED);\n\t\t} else {\n\t\t\tthrow new Error(`param '${param_name}' does not exist on node ${this.node.full_path()}`);\n\t\t}\n\t}\n\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tinit_value: ParamInitValuesTypeMap[T],\n\t\toptions: ParamOptions = {}\n\t): ParamConstructorMap[T] | undefined {\n\t\tconst is_spare = options['spare'] || false;\n\t\tif (this._param_create_mode === false && !is_spare) {\n\t\t\tconsole.warn(\n\t\t\t\t`node ${this.node.full_path()} (${\n\t\t\t\t\tthis.node.type\n\t\t\t\t}) param '${name}' cannot be created outside of create_params`\n\t\t\t);\n\t\t}\n\t\tif (this.node.scene == null) {\n\t\t\tconsole.warn(`node ${this.node.full_path()} (${this.node.type}) has no scene assigned`);\n\t\t}\n\n\t\tconst constructor = ParamConstructorByType[type];\n\t\tif (constructor != null) {\n\t\t\tconst existing_param = this._params_by_name[name];\n\t\t\tif (existing_param) {\n\t\t\t\tif (is_spare) {\n\t\t\t\t\t// delete the old one, otherwise the gl nodes when saved will attempt to set the value\n\t\t\t\t\t// of a param with the potentially wrong type\n\t\t\t\t\tif (existing_param.type != type) {\n\t\t\t\t\t\tthis.delete_param(existing_param.name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check that the param is spare, so that the ones generated by gl nodes are not generating an exception\n\t\t\t\t\tconsole.warn(`a param named ${name} already exists`, this.node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst param: ParamConstructorMap[T] = new constructor(this.node.scene);\n\t\t\tparam.options.set(options);\n\n\t\t\tparam.set_name(name);\n\t\t\tparam.set_init_value(init_value as never);\n\t\t\tparam.init_components();\n\t\t\tparam.set(init_value as never);\n\t\t\tparam.set_node(this.node);\n\n\t\t\tthis._params_by_name[param.name] = param as BaseParamType;\n\n\t\t\t// we add the components, so that we can access them with expressions like ch('ty')\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tthis._params_by_name[component.name] = component as BaseParamType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._params_added_since_last_params_eval = true;\n\n\t\t\treturn param;\n\t\t}\n\t}\n\n\tprivate _update_caches() {\n\t\tthis._params_list = Object.values(this._params_by_name);\n\t\tthis._param_names = Object.keys(this._params_by_name);\n\t\tthis._non_spare_params = Object.values(this._params_by_name).filter((p) => !p.options.is_spare);\n\t\tthis._spare_params = Object.values(this._params_by_name).filter((p) => p.options.is_spare);\n\t\tthis._non_spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => !p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\tthis._spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t}\n\n\tasync _eval_param(param: BaseParamType) {\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// const param_cache_name = this.param_cache_name(param.name());\n\t\t// const cached_value = this[param_cache_name] || null;\n\t\tif (/*cached_value == null ||*/ param.is_dirty /* || param.is_errored()*/) {\n\t\t\t/*const param_value =*/ await param.compute(); //.then(param_value=>{\n\t\t\t// this[param_cache_name] = param_value;\n\t\t\tif (param.states.error.active) {\n\t\t\t\tthis.node.states.error.set(`param '${param.name}' error: ${param.states.error.message}`);\n\t\t\t}\n\t\t\t// return param_value;\n\t\t} else {\n\t\t\t// return param.value;\n\t\t}\n\t\t// });\n\t}\n\n\tasync eval_params(params: BaseParamType[]) {\n\t\tconst promises = [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (params[i].is_dirty) {\n\t\t\t\tpromises.push(this._eval_param(params[i]));\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.node.set_container(null);\n\t\t}\n\t}\n\n\tasync eval_all() {\n\t\tif (this._params_node) {\n\t\t\tif (this._params_node.is_dirty || this._params_added_since_last_params_eval) {\n\t\t\t\tawait this.eval_params(this._params_list);\n\n\t\t\t\tthis._params_node.remove_dirty_state();\n\t\t\t\tthis._params_added_since_last_params_eval = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tset_post_create_params_hook(hook: PostCreateParamsHook) {\n\t\tthis._post_create_params_hook = hook;\n\t}\n\tadd_on_scene_load_hook(name: string, method: OnSceneLoadHook) {\n\t\tthis._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n\t\tthis._on_scene_load_hooks = this._on_scene_load_hooks || [];\n\n\t\tif (!this._on_scene_load_hook_names.includes(name)) {\n\t\t\tthis._on_scene_load_hook_names.push(name);\n\t\t\tthis._on_scene_load_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\trun_post_create_params_hook() {\n\t\tif (this._post_create_params_hook) {\n\t\t\tthis._post_create_params_hook();\n\t\t}\n\t}\n\trun_on_scene_load_hooks() {\n\t\tif (this._on_scene_load_hooks) {\n\t\t\tfor (let hook of this._on_scene_load_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\n// import lodash_includes from 'lodash/includes'\nimport lodash_isString from 'lodash/isString';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class BooleanParam extends TypedNumericParam<ParamType.BOOLEAN> {\n\tstatic type() {\n\t\treturn ParamType.BOOLEAN;\n\t}\n\t// TODO: be careful as this does not allow serialization of expressions as default value\n\tget default_value_serialized() {\n\t\tif (lodash_isString(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.convert(this.default_value) || false;\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BOOLEAN], val2: ParamValuesTypeMap[ParamType.BOOLEAN]) {\n\t\treturn val1 == val2;\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.BOOLEAN]): boolean | null {\n\t\tif (lodash_isBoolean(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (lodash_isNumber(raw_val)) {\n\t\t\t\treturn raw_val >= 1;\n\t\t\t} else {\n\t\t\t\tif (lodash_isString(raw_val)) {\n\t\t\t\t\tif (CoreString.is_boolean(raw_val)) {\n\t\t\t\t\t\treturn CoreString.to_boolean(raw_val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\t\t\t\treturn parsed >= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t// convert_value(v: ParamInputValue): boolean {\n\t// \treturn this.value_to_boolean(v)\n\t// }\n\t// convert_default_value(v: ParamInputValue): number {\n\t// \tif (lodash_isString(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\treturn this.value_to_boolean(v) // ? 1 : 0\n\t// \t}\n\t// }\n\t// is_value_expression(v: ParamInputValue): boolean {\n\t// \treturn !lodash_includes([true, false, 0, 1, '0', '1'], v)\n\t// }\n\n\t// value_to_boolean(v: ParamInputValue): boolean {\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\tif (lodash_isNumber(v)) {\n\t// \t\t\treturn v > 0\n\t// \t\t} else {\n\t// \t\t\treturn parseInt(v) > 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// eval(callback) {\n\t// \treturn this.eval_raw((val) => {\n\t// \t\tconst boolean_result = this.value_to_boolean(val)\n\t// \t\treturn callback(boolean_result)\n\t// \t})\n\t// }\n}\n","import {BaseParamType} from '../params/_Base';\nimport {ParsedTree} from './traversers/ParsedTree';\n// import {MissingReferencesController} from './MissingReferencesController'\n// import CoreWalker from 'src/core/Walker'\n\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\nimport {ExpressionStringGenerator} from './traversers/ExpressionStringGenerator';\nimport {DependenciesController} from './DependenciesController';\nimport {ParamType} from '../poly/ParamType';\n\nexport class ExpressionManager {\n\tpublic parse_completed: boolean = false;\n\tprivate parse_started: boolean = false;\n\tprivate function_generator: FunctionGenerator;\n\tprivate expression_string_generator: ExpressionStringGenerator | undefined;\n\tpublic dependencies_controller: DependenciesController;\n\t// private _error_message: string | undefined;\n\tprivate parsed_tree: ParsedTree = new ParsedTree();\n\n\tconstructor(\n\t\tpublic param: BaseParamType // public element_index: number=0\n\t) {\n\t\tthis.function_generator = new FunctionGenerator(this.param);\n\t\tthis.dependencies_controller = new DependenciesController(this.param);\n\t}\n\n\tparse_expression(expression: string) {\n\t\tif (this.parse_started) {\n\t\t\tthrow new Error(`parse in progress for param ${this.param.full_path()}`);\n\t\t}\n\t\tthis.parse_started = true;\n\t\tthis.parse_completed = false;\n\t\tthis.parsed_tree = this.parsed_tree || new ParsedTree();\n\n\t\tthis.reset();\n\t\tif (this.param.type == ParamType.STRING) {\n\t\t\tthis.parsed_tree.parse_expression_for_string_param(expression);\n\t\t} else {\n\t\t\tthis.parsed_tree.parse_expression(expression);\n\t\t}\n\t\tthis.function_generator.parse_tree(this.parsed_tree);\n\n\t\tif (this.function_generator.error_message == null) {\n\t\t\tthis.dependencies_controller.update(this.function_generator);\n\t\t\tif (this.dependencies_controller.error_message) {\n\t\t\t\tthis.param.states.error.set(this.dependencies_controller.error_message);\n\t\t\t} else {\n\t\t\t\tthis.parse_completed = true;\n\t\t\t\tthis.parse_started = false;\n\t\t\t}\n\t\t} //else {\n\t\t//this.set_error(this.function_generator.error_message);\n\t\t//}\n\t}\n\tasync compute_function(): Promise<any> {\n\t\t// this.parse_and_update_dependencies_if_not_done(expression);\n\t\tif (this.compute_allowed()) {\n\t\t\ttry {\n\t\t\t\tconst new_value = await this.function_generator.eval_function();\n\t\t\t\treturn new_value;\n\t\t\t} catch (e) {\n\t\t\t\t// if (this.function_generator.is_errored && this.function_generator.error_message) {\n\t\t\t\t// \tthis.set_error(this.function_generator.error_message);\n\t\t\t\t// }\n\t\t\t\treturn new Promise((resolve, reject) => resolve());\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.parse_completed = false;\n\t\tthis.parse_started = false;\n\t\t// this._error_message = undefined;\n\t\t// if(force){ // || this.element_index <= 1){\n\t\tthis.dependencies_controller.reset();\n\t\t// }\n\t\tthis.function_generator.reset();\n\t}\n\n\tget is_errored(): boolean {\n\t\treturn this.function_generator.is_errored;\n\t}\n\tget error_message() {\n\t\treturn this.function_generator.error_message;\n\t}\n\n\tprivate compute_allowed(): boolean {\n\t\treturn /*this._error_message == null &&*/ this.function_generator.eval_allowed();\n\t}\n\n\t// private parse_and_update_dependencies(expression: string) {\n\t// \tif (this.param.has_expression()) {\n\t// \t\tthis.parse_expression(expression);\n\n\t// \t\tif (this.error_message != null) {\n\t// \t\t\tthis.param.states.error.set(`expression error: \"${expression}\" (${this.error_message})`);\n\t// \t\t}\n\t// \t\t// this.parse_completed = true\n\t// \t}\n\t// }\n\t// private parse_and_update_dependencies_if_not_done(expression: string) {\n\t// \tif (!this.parse_completed) {\n\t// \t\tthis.parse_and_update_dependencies(expression);\n\t// \t}\n\t// }\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.expression_string_generator =\n\t\t\tthis.expression_string_generator || new ExpressionStringGenerator(this.param);\n\n\t\tconst new_expression_string = this.expression_string_generator.parse_tree(this.parsed_tree);\n\n\t\tif (new_expression_string) {\n\t\t\tthis.param.set(new_expression_string);\n\t\t} else {\n\t\t\tconsole.warn('failed to regenerate expression');\n\t\t}\n\t\t// this.param.expression_controller?.set_expression(new_expression_string);\n\n\t\t// this.reset()\n\t\t// if (new_expression_string) {\n\t\t// this.parse_expression(new_expression_string);\n\t\t// }\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {ParsedTree} from './ParsedTree';\nimport {LiteralConstructsController, LiteralConstructMethod} from '../LiteralConstructsController';\nimport {BaseMethod} from '../methods/_Base';\nimport {MethodModule} from '../methods/_Module';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\nimport lodash_isString from 'lodash/isString';\n\n// import {JsepsByString} from '../DependenciesController'\nimport jsep from 'jsep';\n\n// import {Vector3} from 'three/src/math/Vector3'\ntype LiteralConstructDictionary = Dictionary<LiteralConstructMethod>;\ntype AnyDictionary = Dictionary<any>;\n\nconst NATIVE_MATH_METHODS = [\n\t'abs',\n\t'acos',\n\t'acosh',\n\t'asin',\n\t'asinh',\n\t'atan',\n\t'atan2',\n\t'atanh',\n\t'ceil',\n\t'cos',\n\t'cosh',\n\t'exp',\n\t'expm1',\n\t'floor',\n\t'log',\n\t'log1p',\n\t'log2',\n\t'log10',\n\t'max',\n\t'min',\n\t'pow',\n\t'round',\n\t'sign',\n\t'sin',\n\t'sinh',\n\t'sqrt',\n\t'tan',\n\t'tanh',\n];\nconst NATIVE_ES6_MATH_METHODS = ['cbrt', 'hypot', 'log10', 'trunc'];\nconst NATIVE_MATH_METHODS_RENAMED: AnyDictionary = {\n\tmath_random: 'random',\n};\nconst CORE_MATH_METHODS = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'];\nimport {Easing} from '../../../core/math/Easing';\nconst EASING_METHODS = Object.keys(Easing);\n\nconst CORE_STRING_METHODS = ['precision'];\nconst NATIVE_MATH_CONSTANTS = ['E', 'LN2', 'LN10', 'LOG10E', 'LOG2E', 'PI', 'SQRT1_2', 'SQRT2'];\n\nconst DIRECT_EXPRESSION_FUNCTIONS: AnyDictionary = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nNATIVE_ES6_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n\tconst remaped = NATIVE_MATH_METHODS_RENAMED[name];\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Core.String.${name}`;\n});\n\nconst LITERAL_CONSTRUCT: LiteralConstructDictionary = {\n\tif: LiteralConstructsController.if,\n};\n\nconst GLOBAL_CONSTANTS: Dictionary<string> = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n\tGLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\n\nconst INDIRECT_EXPRESSION_METHODS: AnyDictionary = MethodModule;\n\n// const NODE_TYPE_METHODS = {\n// \tCallExpression: 'setup_graph_call_expression',\n// \tMemberExpression: 'setup_graph_member_expression',\n// \tBinaryExpression: 'setup_graph_binary_expression',\n// \tUnaryExpression: 'setup_graph_unary_expression',\n// \tLogicalExpression: 'setup_graph_logical_expression',\n// \tLiteral: 'setup_graph_literal',\n// \tIdentifier: 'setup_graph_identifier'\n// };\n//\n\n// const IDENTIFIER_METHODS = {\n// \t'$F': '_setup_graph_identifier_as_global_frame'\n// }\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = ', ';\nconst ATTRIBUTE_PREFIX = '@';\nimport {VARIABLE_PREFIX} from './_Base';\n\nconst PROPERTY_OFFSETS: AnyDictionary = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n\nimport {BaseTraverser} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {AttributeRequirementsController} from '../AttributeRequirementsController';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreString} from '../../../core/String';\n\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nexport class FunctionGenerator extends BaseTraverser {\n\tprivate function: Function | undefined;\n\t// private function_pre_entities_loop_lines: string[] = [];\n\tprivate _attribute_requirements_controller = new AttributeRequirementsController();\n\t// private function_pre_body:string\n\tprivate function_main_string: string | undefined;\n\tprivate methods: BaseMethod[] = [];\n\tprivate method_index: number = -1;\n\n\tpublic method_dependencies: MethodDependency[] = [];\n\tpublic immutable_dependencies: CoreGraphNode[] = [];\n\t// public jsep_dependencies: JsepDependency[] = []\n\t// public jsep_nodes_by_missing_paths: JsepsByString = {}\n\n\t// private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tpublic parse_tree(parsed_tree: ParsedTree) {\n\t\tthis.reset();\n\n\t\tif (parsed_tree.error_message == null) {\n\t\t\ttry {\n\t\t\t\t// this.function_pre_entities_loop_lines = [];\n\t\t\t\tthis._attribute_requirements_controller.reset();\n\t\t\t\t// this.function_pre_body = ''\n\t\t\t\tif (parsed_tree.node) {\n\t\t\t\t\tconst function_main_string = this.traverse_node(parsed_tree.node);\n\t\t\t\t\tif (function_main_string && !this.is_errored) {\n\t\t\t\t\t\tthis.function_main_string = function_main_string;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('no parsed_tree.node');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`error in expression for param ${this.param.full_path()}`);\n\t\t\t\tconsole.warn(e);\n\t\t\t}\n\n\t\t\tif (this.function_main_string) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.function = new AsyncFunction(\n\t\t\t\t\t\t'Core',\n\t\t\t\t\t\t'param',\n\t\t\t\t\t\t'methods',\n\t\t\t\t\t\t'_set_error_from_error',\n\t\t\t\t\t\t`\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${this.function_body()}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\tthis.set_error('cannot generate function');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.set_error('cannot generate function body');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse expression');\n\t\t}\n\t}\n\n\treset() {\n\t\tsuper.reset();\n\t\tthis.function_main_string = undefined;\n\t\tthis.methods = [];\n\t\tthis.method_index = -1;\n\t\tthis.function = undefined;\n\t\tthis.method_dependencies = [];\n\t\tthis.immutable_dependencies = [];\n\t}\n\n\tfunction_body() {\n\t\tif (this.param.options.is_expression_for_entities) {\n\t\t\treturn `\n\t\t\tconst entities = param.expression_controller.entities;\n\t\t\tif(entities){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\tlet entity;\n\t\t\t\t\tconst entity_callback = param.expression_controller.entity_callback;\n\t\t\t\t\t${this._attribute_requirements_controller.assign_attributes_lines()}\n\t\t\t\t\tif( ${this._attribute_requirements_controller.attribute_presence_check_line()} ){\n\t\t\t\t\t\t${this._attribute_requirements_controller.assign_arrays_lines()}\n\t\t\t\t\t\tfor(let index=0; index < entities.length; index++){\n\t\t\t\t\t\t\tentity = entities[index];\n\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\tentity_callback(entity, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst error = new Error('attribute not found')\n\t\t\t\t\t\t_set_error_from_error(error)\n\t\t\t\t\t\treject(error)\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n\t\t} else {\n\t\t\treturn `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\ttry {\n\t\t\t\t\tconst value = ${this.function_main_string}\n\t\t\t\t\tresolve(value)\n\t\t\t\t} catch(e) {\n\t\t\t\t\t_set_error_from_error(e)\n\t\t\t\t\treject()\n\t\t\t\t}\n\t\t\t})\n\t\t\t`;\n\t\t}\n\t}\n\n\teval_allowed(): boolean {\n\t\treturn this.function != null;\n\t}\n\teval_function() {\n\t\t// this.param.entity_attrib_values = this.param.entity_attrib_values || {}\n\t\t// this.param.entity_attrib_values.position =\n\t\t// \tthis.param.entity_attrib_values.position || new THREE.Vector3()\n\t\tif (this.function) {\n\t\t\tthis.clear_error();\n\n\t\t\tconst Core = {\n\t\t\t\tMath: CoreMath,\n\t\t\t\tString: CoreString,\n\t\t\t};\n\t\t\tconst result = this.function(Core, this.param, this.methods, this._set_error_from_error_bound);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TRAVERSE METHODS\n\t//\n\t//\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string | undefined {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst callee = node.callee as jsep.Identifier;\n\t\tconst method_name = callee.name;\n\t\tif (method_name) {\n\t\t\t// literal construct (if...)\n\t\t\tconst literal_contruct = LITERAL_CONSTRUCT[method_name];\n\t\t\tif (literal_contruct) {\n\t\t\t\treturn literal_contruct(method_arguments);\n\t\t\t}\n\n\t\t\t// direct expressions (Math.floor, Math.sin...)\n\t\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\t\t\tconst direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n\t\t\tif (direct_function_name) {\n\t\t\t\treturn `${direct_function_name}(${arguments_joined})`;\n\t\t\t}\n\n\t\t\t// indirect methods (points_count, asset...)\n\t\t\tconst indirect_method = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\t\tif (indirect_method) {\n\t\t\t\tconst path_node = node.arguments[0];\n\t\t\t\t// const path_argument = this.string_generator.traverse_node(path_node)\n\t\t\t\tconst function_string = `return ${method_arguments[0]}`;\n\t\t\t\tlet path_argument_function;\n\t\t\t\tlet path_argument = [];\n\t\t\t\ttry {\n\t\t\t\t\tpath_argument_function = new Function(function_string);\n\t\t\t\t\tpath_argument = path_argument_function();\n\t\t\t\t} catch {\n\t\t\t\t\t// path_argument_function = new AsyncFunction(function_string)\n\t\t\t\t\t// it looks like if the input contains an await,\n\t\t\t\t\t// it is because it has been generated by another indirect function.\n\t\t\t\t\t// This means that the dependencies have been generated already\n\t\t\t\t\t// so we may not need to do it now\n\t\t\t\t}\n\n\t\t\t\tthis._create_method_and_dependencies(method_name, path_argument, path_node);\n\t\t\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_error(`unknown method: ${method_name}`);\n\t}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\tif (node.operator === ATTRIBUTE_PREFIX) {\n\t\t\tlet argument = node.argument;\n\t\t\tlet attribute_name;\n\t\t\tlet property;\n\t\t\tswitch (argument.type) {\n\t\t\t\tcase 'Identifier': {\n\t\t\t\t\tconst argument_identifier = (<unknown>argument) as jsep.Identifier;\n\t\t\t\t\tattribute_name = argument_identifier.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'MemberExpression': {\n\t\t\t\t\tconst argument_member_expression = (<unknown>argument) as jsep.MemberExpression;\n\t\t\t\t\tconst attrib_node = argument_member_expression.object as jsep.Identifier;\n\t\t\t\t\tconst property_node = argument_member_expression.property as jsep.Identifier;\n\t\t\t\t\tattribute_name = attrib_node.name;\n\t\t\t\t\tproperty = property_node.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// this.function_pre_body += `\n\t\t\t// param.entity_attrib_value(${QUOTE}${attrib_node.name}${QUOTE}, param.entity_attrib_values.position);\n\t\t\t// `\n\t\t\tif (attribute_name) {\n\t\t\t\tattribute_name = CoreAttribute.remap_name(attribute_name);\n\t\t\t\tif (attribute_name == 'ptnum') {\n\t\t\t\t\treturn '((entity != null) ? entity.index : 0)';\n\t\t\t\t} else {\n\t\t\t\t\tconst var_attribute_size = this._attribute_requirements_controller.var_attribute_size(\n\t\t\t\t\t\tattribute_name\n\t\t\t\t\t);\n\t\t\t\t\tconst var_array = this._attribute_requirements_controller.var_array(attribute_name);\n\t\t\t\t\tthis._attribute_requirements_controller.add(attribute_name);\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tconst property_offset = PROPERTY_OFFSETS[property];\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}+${property_offset}]`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn('attribute not found');\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t\t}\n\t}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string | undefined {\n\t\tconst identifier_first_char = node.name[0];\n\t\tif (identifier_first_char == VARIABLE_PREFIX) {\n\t\t\tconst identifier_name_without_dollar_sign = node.name.substr(1);\n\n\t\t\t// globals constants: Math.PI or Math.E\n\t\t\tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n\t\t\tif (direct_constant_name) {\n\t\t\t\treturn direct_constant_name;\n\t\t\t}\n\n\t\t\t// scene or node globals: $F, $FPS, $T, $CH, $OS\n\t\t\tconst method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n\t\t\tconst method = (this as any)[method_name];\n\t\t\tif (method) {\n\t\t\t\treturn (this as any)[method_name]();\n\t\t\t} else {\n\t\t\t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn node.name; // @ptnum will call this method and return \"ptnum\"\n\t\t}\n\t}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\tprotected traverse_Identifier_F(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.frame`;\n\t}\n\tprotected traverse_Identifier_FPS(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.fps`;\n\t}\n\tprotected traverse_Identifier_T(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.time`;\n\t}\n\tprotected traverse_Identifier_CH(): string {\n\t\treturn `${QUOTE}${this.param.name}${QUOTE}`;\n\t}\n\tprotected traverse_Identifier_CEX(): string {\n\t\treturn this._method_centroid('x');\n\t}\n\tprotected traverse_Identifier_CEY(): string {\n\t\treturn this._method_centroid('y');\n\t}\n\tprotected traverse_Identifier_CEZ(): string {\n\t\treturn this._method_centroid('z');\n\t}\n\t// TODO:\n\t// '$OS': '_eval_identifier_as_node_name',\n\t// '$BBX': '_eval_identifier_as_bounding_box_relative',\n\n\tprivate _method_centroid(component: string): string {\n\t\tconst method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n\t\tconst arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n\t\tthis._create_method_and_dependencies('centroid', 0);\n\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t}\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\tprivate _create_method_and_dependencies(\n\t\tmethod_name: string,\n\t\tpath_argument: number | string,\n\t\tpath_node?: jsep.Expression\n\t) {\n\t\tconst method_constructor = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\tconst method = new method_constructor(this.param) as BaseMethod;\n\t\tthis.method_index += 1;\n\t\tthis.methods[this.method_index] = method;\n\n\t\tconst method_dependency = method.find_dependency(path_argument);\n\t\tif (method_dependency) {\n\t\t\tif (path_node) {\n\t\t\t\tmethod_dependency.set_jsep_node(path_node);\n\t\t\t}\n\t\t\tthis.method_dependencies.push(method_dependency);\n\t\t} else {\n\t\t\tif (path_node && lodash_isString(path_argument)) {\n\t\t\t\tthis.param.scene.missing_expression_references_controller.register(\n\t\t\t\t\tthis.param,\n\t\t\t\t\tpath_node,\n\t\t\t\t\tpath_argument\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t\t// method_dependencies.resolved_graph_nodes.forEach((graph_node)=>{\n\t\t// \tif(path_node){\n\t\t// \t\tconst jsep_dependency = new JsepDependency(graph_node, path_node)\n\t\t// \t\tthis.jsep_dependencies.push(jsep_dependency)\n\t\t// \t} else {\n\t\t// \t\tthis.immutable_dependencies.push(graph_node)\n\t\t// \t}\n\n\t\t// })\n\n\t\t// if(path_node){\n\t\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(path_node)\n\t\t// \t})\n\t\t// }\n\t}\n}\n","export type LiteralConstructMethod = (args: any[]) => string\n\nexport class LiteralConstructsController {\n\tstatic if(args: any[]): string {\n\t\tconst condition = args[0]\n\t\tconst val_true = args[1]\n\t\tconst val_false = args[2]\n\t\treturn `(${condition}) ? (${val_true}) : (${val_false})`\n\t}\n}\n","// TODO: create an expression object that knows how many args it can accept, their type\n// and can throw an error and give it to the param, and then to the node\n// TODO: the expression should know how to update the node dependencies\n\n// import abs from './abs'\n// import {Asset} from './asset'\nimport {Bbox} from './bbox';\n// import ceil from './ceil'\nimport {Centroid} from './centroid';\nimport {Ch} from './ch';\nimport {Copy} from './copy';\nimport {CopRes} from './cop_res';\n// import clamp from './clamp'\n// import {Easein} from './easein'\n// import {Easeinout} from './easeinout'\n// import floor from './floor'\n// import humanize from './humanize'\nimport {Local} from './local';\n// import if_ from './if'\n// import max from './max'\n// import min from './min'\nimport {Opdigits} from './opdigits';\n// import object from './object'\n// import objects_count from './objects_count'\n// import objects_visible_count from './objects_visible_count'\nimport {Point} from './point';\nimport {PointsCount} from './points_count';\n// import {Precision} from './precision'\n// import rand from './rand'\n// import round from './round'\n// import sign from './sign'\nimport {StrCharsCount} from './str_chars_count';\nimport {StrConcat} from './str_concat';\nimport {StrIndex} from './str_index';\nimport {StrSub} from './str_sub';\n\nexport const MethodModule = {\n\t// 'asset': Asset,\n\tbbox: Bbox,\n\tch: Ch,\n\tcentroid: Centroid,\n\tcop_res: CopRes,\n\tlocal: Local,\n\topdigits: Opdigits,\n\tpoint: Point,\n\tpoints_count: PointsCount,\n\t// 'precision': Precision,\n\tcopy: Copy,\n\tstr_chars_count: StrCharsCount,\n\tstr_concat: StrConcat,\n\tstr_index: StrIndex,\n\tstr_sub: StrSub,\n};\n\n// import cos from './cos'\n// import sin from './sin'\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {GeometryContainer} from '../../containers/Geometry';\n\n// import Walker from 'src/core/Walker';\n\ninterface BoxComponents {\n\tmin: Vector3;\n\tmax: Vector3;\n\tsize: Vector3;\n\tcenter: Vector3;\n}\n\nconst VECTOR_NAMES: Array<keyof BoxComponents> = ['min', 'max', 'size', 'center'];\nconst COMPONENT_NAMES = ['x', 'y', 'z'];\n\nexport class Bbox extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'vector name, min, max, size or center'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\tlet value = 0;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst vector_name = args[1];\n\t\t\t\tconst component_name = args[2];\n\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tvalue = this._get_value_from_container(container, vector_name, component_name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _get_value_from_container(\n\t\tcontainer: GeometryContainer,\n\t\tvector_name: keyof BoxComponents,\n\t\tcomponent_name: keyof Vector3Like\n\t) {\n\t\tif (VECTOR_NAMES.indexOf(vector_name) >= 0) {\n\t\t\tconst bbox = container.bounding_box();\n\n\t\t\tlet vector = new Vector3();\n\t\t\tswitch (vector_name) {\n\t\t\t\tcase 'size':\n\t\t\t\t\tbbox.getSize(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\tbbox.getCenter(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvector = bbox[vector_name];\n\t\t\t}\n\n\t\t\tif (COMPONENT_NAMES.indexOf(component_name) >= 0) {\n\t\t\t\t//(value = vector[component_name])?\n\t\t\t\treturn vector[component_name];\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import BaseNode from 'src/engine/nodes/_Base'\nimport {DecomposedPath} from '../../core/DecomposedPath';\nimport {CoreGraphNode} from '../../core/graph/CoreGraphNode';\nimport {BaseParamType} from '../params/_Base';\n// import {CoreObject} from '../../core/Object';\nimport {BaseNodeType} from '../nodes/_Base';\nimport jsep from 'jsep';\n\nexport class MethodDependency extends CoreGraphNode {\n\tpublic jsep_node: jsep.Expression | undefined;\n\tpublic resolved_graph_node: CoreGraphNode | undefined;\n\tpublic unresolved_path: string | undefined;\n\tprivate _update_from_name_change_bound = this._update_from_name_change.bind(this);\n\n\tconstructor(\n\t\tpublic param: BaseParamType,\n\t\tpublic path_argument: number | string,\n\t\tpublic decomposed_path?: DecomposedPath\n\t) {\n\t\tsuper(param.scene, 'MethodDependency');\n\n\t\t// this.set_scene(this.param.scene);\n\n\t\tthis.add_post_dirty_hook('_update_from_name_change', this._update_from_name_change_bound);\n\t}\n\t_update_from_name_change(trigger?: CoreGraphNode) {\n\t\tif (trigger && this.decomposed_path) {\n\t\t\tconst node = trigger as BaseNodeType;\n\t\t\tthis.decomposed_path.update_from_name_change(node);\n\t\t\tconst new_path = this.decomposed_path.to_path();\n\n\t\t\tconst literal = this.jsep_node as jsep.Literal;\n\t\t\tif (literal) {\n\t\t\t\tliteral.value = `${literal.value}`.replace(`${this.path_argument}`, new_path);\n\t\t\t\tliteral.raw = literal.raw.replace(`${this.path_argument}`, new_path);\n\t\t\t}\n\t\t\tif (this.param.expression_controller) {\n\t\t\t\tthis.param.expression_controller.update_from_method_dependency_name_change();\n\t\t\t}\n\t\t}\n\t}\n\treset() {\n\t\tthis.graph_disconnect_predecessors();\n\t}\n\n\tlisten_for_name_changes() {\n\t\tif (this.jsep_node && this.decomposed_path) {\n\t\t\tthis.decomposed_path.named_nodes.forEach((node_in_path) => {\n\t\t\t\tif (node_in_path) {\n\t\t\t\t\tconst node = node_in_path as BaseNodeType;\n\t\t\t\t\tif (node.name_controller) {\n\t\t\t\t\t\tthis.add_graph_input(node.name_controller.graph_node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tset_jsep_node(jsep_node: jsep.Expression) {\n\t\tthis.jsep_node = jsep_node;\n\t}\n\tset_resolved_graph_node(node: CoreGraphNode) {\n\t\tthis.resolved_graph_node = node;\n\t}\n\tset_unresolved_path(path: string) {\n\t\tthis.unresolved_path = path;\n\t}\n\n\tstatic create(\n\t\tparam: BaseParamType,\n\t\tindex_or_path: number | string,\n\t\tnode: CoreGraphNode,\n\t\tdecomposed_path?: DecomposedPath\n\t) {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\n\t\t// if(!decomposed_path){\n\t\t// \tconsole.log('nodes_in_path', decomposed_path.named_nodes);\n\t\t// \tfor (let node_in_path of decomposed_path.named_nodes) {\n\t\t// \t\tif (node_in_path) {\n\t\t// \t\t\tdecomposed_path.add_node(node_in_path.name, node_in_path);\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst instance = new MethodDependency(param, index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\tinstance.set_resolved_graph_node(node);\n\t\t} else {\n\t\t\tif (!is_index) {\n\t\t\t\tconst path = index_or_path as string;\n\t\t\t\tinstance.set_unresolved_path(path);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {GeometryContainer} from '../../containers/Geometry';\n\nexport class Centroid extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// const path = args\n\t\t\t// this.get_referenced_param(path).eval_p().then(val=>{\n\t\t\t// \tresolve(val)\n\t\t\t// })\n\t\t\tif (args.length == 2) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst component_name = args[1] as keyof Vector3Like;\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst bbox = container.bounding_box();\n\t\t\t\t\tconst center = bbox.min\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.add(bbox.max)\n\t\t\t\t\t\t.multiplyScalar(0.5);\n\n\t\t\t\t\tconst value = center[component_name];\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// throw \"only component names are x, y and z\";\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t\t// return this._get_param_value(args[0], args[1], callback);\n\t}\n\n\t// _get_param_value(index_or_path, component_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tlet value;\n\t// \t\tconst bbox = container.bounding_box();\n\t// \t\tconst size = bbox.min.clone().add(bbox.max).multiplyScalar(0.5);\n\n\t// \t\tif ((value = size[component_name]) != null) {\n\t// \t\t\treturn callback(value);\n\t// \t\t} else {\n\t// \t\t\tthrow \"only component names are x, y and z\";\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","// import lodash_isNumber from 'lodash/isNumber';\n\nimport {BaseMethod} from './_Base';\nimport {DecomposedPath} from '../../../core/DecomposedPath';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\n\nexport class Ch extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to param']];\n\t}\n\n\t// dependencies(args: any[]): any[]{\n\t// \tconst path = args[0]\n\t// \treturn [this.get_referenced_param(path)]\n\t// }\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst param = this.get_referenced_param(index_or_path as string, decomposed_path);\n\t\tif (param) {\n\t\t\treturn this.create_dependency(param, index_or_path, decomposed_path);\n\t\t} else {\n\t\t\tconsole.warn('could not find param');\n\t\t}\n\t\treturn null;\n\t\t// const reference_search_result = new ReferenceSearchResult()\n\t\t// const param = this.get_referenced_param(index_or_path)\n\t\t// if(param){\n\t\t// \treference_search_result.set_found_graph_nodes([param])\n\t\t// } else {\n\t\t// \treference_search_result.set_missing_paths([path])\n\t\t// }\n\n\t\t// return reference_search_result\n\t}\n\t// find_dependencies(index_or_path: number|string): MethodDependency{\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<any> {\n\t\tlet val: any = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst path = args[0];\n\t\t\tconst ref = this.get_referenced_param(path);\n\t\t\tif (ref) {\n\t\t\t\tawait ref.compute();\n\t\t\t\tconst result = ref.value;\n\t\t\t\tif (result != null) {\n\t\t\t\t\t// if (lodash_isNumber(result)) {\n\t\t\t\t\tval = result;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn val;\n\t}\n\n\t// _get_param_value(path, callback){\n\t// \treturn this.get_referenced_param(path).eval(val=> {\n\t// \t\treturn callback(val);\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {CoreWalker} from '../../../core/Walker';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class Copy extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to copy'],\n\t\t\t['integer', 'default value'],\n\t\t];\n\t}\n\tstatic optional_arguments() {\n\t\treturn [['string', 'attribute name (optional)']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path) as BaseNodeType;\n\t\t// I'd prefer testing with if(node instanceof CopySopNode)\n\t\t// but tslib generates an error when doing so\n\t\tif (node && node.type == 'copy') {\n\t\t\tconst stamp_node = (node as CopySopNode).stamp_node;\n\t\t\treturn this.create_dependency(stamp_node, index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\t// \t// return this.find_node_dependency_from_index_or_path(index_or_path)\n\t// \tconst node = this.find_dependency_from_index_or_path(index_or_path)\n\t// \treturn this.create_search_result(stamp_node, index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 2 || args.length == 3) {\n\t\t\t\tconst path = args[0];\n\t\t\t\tconst default_value = args[1];\n\t\t\t\tconst attribute_name = args[2];\n\n\t\t\t\tconst node = CoreWalker.find_node(this.node, path);\n\n\t\t\t\tlet value;\n\t\t\t\tif (node && node.type == 'copy') {\n\t\t\t\t\tvalue = (node as CopySopNode).stamp_value(attribute_name);\n\t\t\t\t}\n\t\t\t\t// if (node && node instanceof CopySopNode) {\n\t\t\t\t// \tvalue = node.stamp_value(attribute_name);\n\t\t\t\t// }\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = default_value;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\t// update_dependencies() {\n\t// \treturn this.jsep_node()._graph_node.add_graph_input( this.copy_sop.stamp_node() );\n\t// }\n\n\t// process_arguments(args, callback){\n\t// \tconst path = args[0];\n\t// \tconst default_value = args[1];\n\t// \tconst attribute_name = args[2];\n\n\t// \tthis.copy_sop = Walker.find_node(this.node(), path);\n\t// \tlet value = (this.copy_sop != null) ?\n\t// \t\tthis.copy_sop.stamp_value(attribute_name) : undefined;\n\n\t// \tif (value == null) { value = default_value; }\n\n\t// \treturn callback(value);\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {TextureContainer} from '../../containers/Texture';\n\nexport class CopRes extends BaseMethod {\n\t// cop_res(0, 'x')\n\t// cop_res('../REF_bbox', 'x')\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name: x or y'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 2) {\n\t\t\tconst index_or_path = args[0];\n\t\t\tconst component_name = args[1];\n\t\t\tconst container = (await this.get_referenced_node_container(index_or_path)) as TextureContainer;\n\n\t\t\tif (container) {\n\t\t\t\tconst resolution = container.resolution();\n\t\t\t\tif ([0, '0', 'x'].includes(component_name)) {\n\t\t\t\t\tvalue = resolution[0];\n\t\t\t\t} else {\n\t\t\t\t\tif ([1, '1', 'y'].includes(component_name)) {\n\t\t\t\t\t\tvalue = resolution[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {POLY} from '../../Poly';\n\nexport class Local extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path']];\n\t}\n\n\tprocess_arguments(args: any[]): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.request_asset_url(args[0]).then((url) => {\n\t\t\t\tresolve(url);\n\t\t\t});\n\t\t});\n\t}\n\t// find_dependency(index_or_path: number | string): MethodDependency {\n\t// \treturn null\n\t// }\n\n\t// TODO: add error management\n\trequest_asset_url(name: string): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// const scene = this.node.scene()\n\t\t\t// const scene_uuid = scene.uuid();\n\n\t\t\tlet url;\n\n\t\t\tif (POLY.desktop_controller().active()) {\n\t\t\t\tPOLY.desktop_controller().add_local_path(name, this.param);\n\t\t\t\turl = POLY.desktop_controller().local_path_server_url(name);\n\t\t\t\tresolve(url);\n\t\t\t} else {\n\t\t\t\treturn resolve('');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {CoreString} from '../../../core/String';\n// import {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class Opdigits extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst graph_node = this.find_referenced_graph_node(index_or_path);\n\t\tif (graph_node) {\n\t\t\tconst node = graph_node as BaseNodeType;\n\t\t\tif (node.name_controller) {\n\t\t\t\tconst name_node = node.name_controller.graph_node;\n\t\t\t\treturn this.create_dependency(name_node, index_or_path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t\t// return [this.create_dependency_from_index_or_path(index_or_path)]\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\n\t// \t// TODO: ensure the dependency update works for space params when they get renamed\n\t// \tconsole.log(node)\n\t// \tconst name_node = node.name_graph_node()\n\t// \treturn this.create_search_result(name_node, index_or_path)\n\t// \t// return this.create_reference_search_result_from_index_or_path(index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst node = this.get_referenced_node(index_or_path);\n\t\t\t\tif (node) {\n\t\t\t\t\tconst name = node.name;\n\t\t\t\t\tconst value = CoreString.tail_digits(name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group'\n\nexport class Point extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['index', 'point index'],\n\t\t\t['string', 'attribute name'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst attrib_name = args[1];\n\t\t\t\tconst point_index = args[2];\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = this._get_value_from_container(container, attrib_name, point_index);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\t_get_value_from_container(container: GeometryContainer, attrib_name: string, point_index: number) {\n\t\tconst core_group = container.core_content();\n\t\t// TODO: optimise and store the group_wrapper in the json_node\n\t\tif (core_group) {\n\t\t\tconst point = core_group.points()[point_index];\n\n\t\t\tif (point) {\n\t\t\t\treturn point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// _get_param_value(index_or_path, point_index, attrib_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tconst group = container.group({clone: false});\n\t// \t\tconst group_wrapper = new Core.Geometry.Group(group);\n\t// \t\t// TODO: optimise and store the group_wrapper in the json_node\n\t// \t\tconst point = group_wrapper.points()[point_index];\n\n\t// \t\tif (point != null) {\n\t// \t\t\tconst value = point.attrib_value(attrib_name);\n\t// \t\t\tif (value != null) {\n\t// \t\t\t\treturn callback(value);\n\t// \t\t\t} else {\n\t// \t\t\t\t//throw \"no attribute #{attrib_name} found\"\n\t// \t\t\t\tconsole.error(`no attribute ${attrib_name} found`);\n\t// \t\t\t\treturn callback(0);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`no point found with index ${point_index}`);\n\t// \t\t\treturn callback(0);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from '../../containers/Geometry';\n// import {CoreGroup} from '../../../core/Geometry/Group';\n\nexport class PointsCount extends BaseMethod {\n\t// npoints(0)\n\t// npoints('../REF_bbox')\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tlet container: GeometryContainer;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = container.points_count();\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrCharsCount extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [['string', 'string to count characters of']];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst string = args[0];\n\t\t\tvalue = string.length;\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrConcat extends BaseMethod {\n\t// str_concat(1,2) => '12'\n\t// str_concat(1,\"a\") => '1a'\n\t// str_concat(\"a\",12, \"b\", \" \", 17) => 'a12b 17'\n\tstatic required_arguments(): any[] {\n\t\treturn [\n\t\t\t// ['string', 'string to get range from'],\n\t\t\t// ['integer', 'range start'],\n\t\t\t// ['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg == null) {\n\t\t\t\targ = '';\n\t\t\t}\n\t\t\tvalue += `${arg}`;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrIndex extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get index from'],\n\t\t\t['string', 'char to find index of'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = -1;\n\t\tif (args.length == 2) {\n\t\t\tconst string = args[0];\n\t\t\tconst sub_string = args[1];\n\t\t\tvalue = string.indexOf(sub_string);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrSub extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get range from'],\n\t\t\t['integer', 'range start'],\n\t\t\t['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): MethodDependency | null {\n\t// \treturn null;\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\t\tconst string = args[0];\n\t\tconst range_start = args[1] || 0;\n\t\tlet range_size = args[2] || 1;\n\t\tif (string) {\n\t\t\tvalue = string.substr(range_start, range_size);\n\t\t}\n\t\treturn value;\n\t}\n}\n","export class AttributeRequirementsController {\n\tprivate _attribute_names: Set<string> | undefined;\n\tconstructor() {}\n\n\treset() {\n\t\tif (this._attribute_names) {\n\t\t\tthis._attribute_names.clear();\n\t\t}\n\t}\n\tassign_attributes_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_attribute_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tassign_arrays_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_item_size_line(attribute_name));\n\t\t\t\tlines.push(AttributeRequirementsController.assign_array_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tattribute_presence_check_line(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst var_names: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tconst var_name = AttributeRequirementsController.var_attribute(attribute_name);\n\t\t\t\tvar_names.push(var_name);\n\t\t\t});\n\t\t\treturn var_names.join(' && ');\n\t\t} else {\n\t\t\treturn 'true';\n\t\t}\n\t}\n\n\tadd(attribute_name: string) {\n\t\tthis._attribute_names = this._attribute_names || new Set<string>();\n\t\tthis._attribute_names.add(attribute_name);\n\t}\n\n\tstatic assign_attribute_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\treturn `const ${var_attribute} = entities[0].geometry().attributes['${attribute_name}']`;\n\t}\n\tstatic assign_item_size_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_attribute_size = this.var_attribute_size(attribute_name);\n\t\treturn `const ${var_attribute_size} = ${var_attribute}.itemSize`;\n\t}\n\tstatic assign_array_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_array = this.var_array(attribute_name);\n\t\treturn `const ${var_array} = ${var_attribute}.array`;\n\t}\n\n\tstatic var_attribute(attribute_name: string) {\n\t\treturn `attrib_${attribute_name}`;\n\t}\n\tstatic var_attribute_size(attribute_name: string) {\n\t\treturn `attrib_size_${attribute_name}`;\n\t}\n\tstatic var_array(attribute_name: string) {\n\t\treturn `array_${attribute_name}`;\n\t}\n\tvar_attribute_size(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_attribute_size(attribute_name);\n\t}\n\tvar_array(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_array(attribute_name);\n\t}\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {ParsedTree} from './ParsedTree';\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from '../../../Engine/Expression/Method/_Base'\n// import {MissingReferencesControler} from './MissingReferencesController'\n\nconst ARGUMENTS_SEPARATOR = ', ';\n// const ATTRIBUTE_PREFIX = '@'\n// const VARIABLE_PREFIX = '$'\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n// interface JsepsByString {\n// \t[propName: string]: jsep.Expression[];\n// }\nimport {BaseTraverser} from './_Base';\n\nexport class ExpressionStringGenerator extends BaseTraverser {\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tparse_tree(parsed_tree: ParsedTree) {\n\t\tif (parsed_tree.error_message == null && parsed_tree.node) {\n\t\t\ttry {\n\t\t\t\treturn this.traverse_node(parsed_tree.node);\n\t\t\t} catch (e) {\n\t\t\t\tthis.set_error('could not traverse tree');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse tree');\n\t\t}\n\t}\n\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\n\t\tconst method_name = (node.callee as jsep.Identifier).name;\n\t\treturn `${method_name}(${arguments_joined})`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string {\n\t\treturn `${node.name}`;\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import {ParsedTree} from './Traverser/ParsedTree'\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\n// import {NodeSimple} from '../../core/graph/NodeSimple'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import {NamesListener} from './NamesListener'\nimport {MethodDependency} from './MethodDependency';\nimport jsep from 'jsep';\n\nexport interface JsepsByString {\n\t[propName: string]: jsep.Expression[];\n}\n\nexport class DependenciesController {\n\terror_message: string | undefined;\n\t// private references_controller: MissingReferencesController\n\tprivate cyclic_graph_detected: boolean = false;\n\t// private jsep_nodes_by_missing_paths: JsepsByString = {}\n\tprivate method_dependencies: MethodDependency[] = [];\n\n\t// private names_listeners: NamesListener[] = []\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this.references_controller = this.param.scene().missing_expression_references_controller\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t}\n\n\treset() {\n\t\tthis.param.graph_disconnect_predecessors();\n\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.reset();\n\t\t});\n\t\tthis.method_dependencies = [];\n\n\t\t// this.jsep_nodes_by_missing_paths = {}\n\t\t// const ref_ids = Object.keys(this.missing_expression_references_by_id)\n\t\t// ref_ids.forEach(ref_id=>{\n\t\t// \tconst ref = this.missing_expression_references_by_id[ref_id]\n\t\t// \tthis.references_controller.unregister(ref)\n\t\t// })\n\t\t// this.missing_expression_references_by_id = {}\n\n\t\t// this.names_listeners.forEach(names_listener=>{names_listener.reset()})\n\t}\n\n\tupdate(function_generator: FunctionGenerator) {\n\t\t// const immutable_dependencies = function_generator.immutable_dependencies\n\t\t// const jsep_dependencies = function_generator.jsep_dependencies\n\t\t// const jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\n\t\t// if(jsep_dependencies.length > 0){\n\t\t// \tconsole.log(\"connect_param_to_dependencies\", this.param.full_path())\n\t\t// }\n\n\t\tthis.cyclic_graph_detected = false;\n\n\t\tthis.connect_immutable_dependencies(function_generator);\n\t\tthis.method_dependencies = function_generator.method_dependencies;\n\t\tthis.handle_method_dependencies();\n\t\t// this.connect_missing_paths(function_generator)\n\n\t\tthis.listen_for_name_changes();\n\t}\n\n\tprivate connect_immutable_dependencies(function_generator: FunctionGenerator) {\n\t\tfunction_generator.immutable_dependencies.forEach((dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tif (this.param.add_graph_input(dependency) == false) {\n\t\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tprivate handle_method_dependencies() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tthis.handle_method_dependency(method_dependency);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handle_method_dependency(method_dependency: MethodDependency) {\n\t\tconst node_simple = method_dependency.resolved_graph_node;\n\n\t\tif (node_simple) {\n\t\t\t// this should update the jsep_node, and run the expression to string parser\n\t\t\t// when a name in the referenced nodes is updated\n\t\t\t// const names_listener = new NamesListener(this.param, node_simple, jsep_node)\n\t\t\t// TODO: test that it is no longer active if expression is updated\n\n\t\t\tif (!this.param.add_graph_input(node_simple)) {\n\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} // else {\n\t\t// const jsep_node = method_dependency.jsep_node\n\t\t//}\n\t}\n\n\tprivate listen_for_name_changes() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.listen_for_name_changes();\n\t\t});\n\t}\n\n\t// private connect_missing_paths(function_generator: FunctionGenerator){\n\n\t// \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\t// \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n\n\t// \tmissing_paths.forEach((missing_path)=>{\n\t// \t\tconst full_path = CoreWalker.make_absolute(this.param.node(), missing_path)\n\t// \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n\t// \t\tjsep_nodes.forEach(jsep_node=>{\n\t// \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, full_path)\n\n\t// \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n\t// \t\t})\n\t// \t})\n\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class ButtonParam extends TypedParam<ParamType.BUTTON> {\n\tstatic type() {\n\t\treturn ParamType.BUTTON;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BUTTON], val2: ParamValuesTypeMap[ParamType.BUTTON]) {\n\t\treturn true;\n\t}\n\tpress_button() {\n\t\tthis.options.execute_callback();\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {Color} from 'three/src/math/Color';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_COLOR = ['r', 'g', 'b'];\nexport class ColorParam extends TypedMultipleParam<ParamType.COLOR> {\n\tprotected _value = new Color();\n\tr!: FloatParam;\n\tg!: FloatParam;\n\tb!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.COLOR;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_COLOR;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.COLOR]) {\n\t\tif (raw_input instanceof Color) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.COLOR]\n\t) {\n\t\tif (raw_input1 instanceof Color) {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.r == raw_input2[0] && raw_input1.g == raw_input2[1] && raw_input1.b == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Color) {\n\t\t\t\treturn raw_input1[0] == raw_input2.r && raw_input1[1] == raw_input2.g && raw_input1[2] == raw_input2.b;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.COLOR], val2: ParamValuesTypeMap[ParamType.COLOR]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.r = this.components[0];\n\t\tthis.g = this.components[1];\n\t\tthis.b = this.components[2];\n\t}\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.r.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.g.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.b.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.r = this.r.raw_input;\n\t// \t\t\tthis._raw_input.g = this.g.raw_input;\n\t// \t\t\tthis._raw_input.b = this.b.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.r.raw_input, this.g.raw_input, this.b.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.r.raw_input;\n\t// \t\tthis._raw_input[1] = this.g.raw_input;\n\t// \t\tthis._raw_input[2] = this.b.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.r = this.r.value;\n\t\tthis._value.g = this.g.value;\n\t\tthis._value.b = this.b.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.COLOR]): Color | null {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\tif(input.length == 3){\n\t// \t\t\tif( input.filter(lodash_isNumber).length > 0 ){\n\t// \t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t}\n\t// \t\t\tif(first){\n\t// \t\t\t\tif(lodash_isNumber(first)){\n\t// \t\t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn new Color();\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class FolderParam extends TypedParam<ParamType.FOLDER> {\n\tstatic type() {\n\t\treturn ParamType.FOLDER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FOLDER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FOLDER], val2: ParamValuesTypeMap[ParamType.FOLDER]) {\n\t\treturn true;\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean'\n\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from '../../core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class IntegerParam extends TypedNumericParam<ParamType.INTEGER> {\n\tstatic type() {\n\t\treturn ParamType.INTEGER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.INTEGER], val2: ParamValuesTypeMap[ParamType.INTEGER]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn Math.round(raw_val);\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseInt(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tconst result = IntegerParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\n\nexport interface RampPointJson {\n\tposition: number;\n\tvalue: number;\n}\nexport interface RampValueJson {\n\tpoints: RampPointJson[];\n\tinterpolation: string;\n}\n\nexport class RampPoint {\n\tconstructor(private _position: number = 0, private _value: number = 0) {}\n\n\tto_json(): RampPointJson {\n\t\treturn {\n\t\t\tposition: this._position,\n\t\t\tvalue: this._value,\n\t\t};\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tcopy(point: RampPoint) {\n\t\tthis._position = point.position;\n\t\tthis._value = point.value;\n\t}\n\tclone() {\n\t\tconst point = new RampPoint();\n\t\tpoint.copy(this);\n\t\treturn point;\n\t}\n\tis_equal(other_point: RampPoint) {\n\t\treturn this._position == other_point.position && this._value == other_point.value;\n\t}\n\tis_equal_json(json: RampPointJson) {\n\t\treturn this._position == json.position && this._value == json.value;\n\t}\n\tfrom_json(json: RampPointJson) {\n\t\tthis._position = json.position;\n\t\tthis._value = json.value;\n\t}\n\tstatic are_equal_json(json1: RampPointJson, json2: RampPointJson) {\n\t\treturn json1.position == json2.position && json1.value == json2.value;\n\t}\n\tstatic from_json(json: RampPointJson) {\n\t\treturn new RampPoint(json.position, json.value);\n\t}\n}\n\nexport enum RampInterpolation {\n\tLINEAR = 'linear',\n}\nexport class RampValue {\n\tprivate _uuid: string;\n\n\tconstructor(private _interpolation: string = RampInterpolation.LINEAR, private _points: RampPoint[] = []) {\n\t\tthis._uuid = MathUtils.generateUUID();\n\t}\n\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\tget interpolation() {\n\t\treturn this._interpolation;\n\t}\n\tget points() {\n\t\treturn this._points;\n\t}\n\tstatic from_json(json: RampValueJson): RampValue {\n\t\tconst points = [];\n\t\tfor (let json_point of json.points) {\n\t\t\tpoints.push(RampPoint.from_json(json_point));\n\t\t}\n\t\treturn new RampValue(json.interpolation, points);\n\t}\n\tto_json(): RampValueJson {\n\t\treturn {\n\t\t\tinterpolation: this._interpolation,\n\t\t\tpoints: this._points.map((p) => p.to_json()),\n\t\t};\n\t}\n\tclone(): RampValue {\n\t\tconst ramp = new RampValue();\n\t\tramp.copy(this);\n\t\treturn ramp;\n\t}\n\tcopy(ramp: RampValue) {\n\t\tthis._interpolation = ramp.interpolation;\n\t\tlet index = 0;\n\t\tfor (let point of ramp.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.copy(point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(point.clone());\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n\n\tis_equal(other_ramp_value: RampValue): boolean {\n\t\tif (this._interpolation != other_ramp_value.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst other_points = other_ramp_value.points;\n\t\tif (this._points.length != other_points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = other_points[index];\n\t\t\tif (!point.is_equal(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn true;\n\t}\n\tis_equal_json(json: RampValueJson) {\n\t\tif (this._interpolation != json.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._points.length != json.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = json.points[index];\n\t\t\tif (!point.is_equal_json(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tstatic are_json_equal(json1: RampValueJson, json2: RampValueJson) {\n\t\tif (json1.interpolation != json2.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (json1.points.length != json2.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point1 of json1.points) {\n\t\t\tconst point2 = json2.points[index];\n\t\t\tif (!RampPoint.are_equal_json(point1, point2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tfrom_json(json: RampValueJson) {\n\t\tthis._interpolation = json.interpolation;\n\n\t\tlet index = 0;\n\t\tfor (let json_point of json.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.from_json(json_point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(RampPoint.from_json(json_point));\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class SeparatorParam extends TypedParam<ParamType.SEPARATOR> {\n\tstatic type() {\n\t\treturn ParamType.SEPARATOR;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.SEPARATOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.SEPARATOR],\n\t\tval2: ParamValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR2 = ['x', 'y'];\nexport class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {\n\tprotected _value = new Vector2();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR2;\n\t}\n\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR2;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number2;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector2) {\n\t// \t\treturn this._raw_input.toArray() as Number2;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number2;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]) {\n\t\tif (raw_input instanceof Vector2) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber2 = [raw_input[0], raw_input[1]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]\n\t) {\n\t\tif (raw_input1 instanceof Vector2) {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y;\n\t\t\t} else {\n\t\t\t\treturn raw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1];\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector2().fromArray(input);\n\t// \t}\n\t// \treturn new Vector2();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {FloatParam} from './Float';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_VECTOR3 = ['x', 'y', 'z'];\nexport class Vector3Param extends TypedMultipleParam<ParamType.VECTOR3> {\n\tprotected _value = new Vector3();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR3;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR3;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tif (raw_input instanceof Vector3) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR3]\n\t) {\n\t\tif (raw_input1 instanceof Vector3) {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1] && raw_input1.z == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y && raw_input1[2] == raw_input2.z;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR3], val2: ParamValuesTypeMap[ParamType.VECTOR3]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t}\n\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.x.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.y.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.z.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.x = this.x.raw_input;\n\t// \t\t\tthis._raw_input.y = this.y.raw_input;\n\t// \t\t\tthis._raw_input.z = this.z.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.x.raw_input;\n\t// \t\tthis._raw_input[1] = this.y.raw_input;\n\t// \t\tthis._raw_input[2] = this.z.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector3().fromArray(input);\n\t// \t}\n\t// \treturn new Vector3();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR4 = ['x', 'y', 'z', 'w'];\nexport class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {\n\tprotected _value = new Vector4();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tw!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR4;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR4;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number4;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector4) {\n\t// \t\treturn this._raw_input.toArray() as Number4;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber4 = [\n\t// \t\t\tthis._raw_input[0],\n\t// \t\t\tthis._raw_input[1],\n\t// \t\t\tthis._raw_input[2],\n\t// \t\t\tthis._raw_input[3],\n\t// \t\t];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number4;\n\t}\n\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR4]) {\n\t\tif (raw_input instanceof Vector4) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber4 = [raw_input[0], raw_input[1], raw_input[2], raw_input[3]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR4]\n\t) {\n\t\tif (raw_input1 instanceof Vector4) {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1.x == raw_input2[0] &&\n\t\t\t\t\traw_input1.y == raw_input2[1] &&\n\t\t\t\t\traw_input1.z == raw_input2[2] &&\n\t\t\t\t\traw_input1.w == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2.x &&\n\t\t\t\t\traw_input1[1] == raw_input2.y &&\n\t\t\t\t\traw_input1[2] == raw_input2.z &&\n\t\t\t\t\traw_input1[3] == raw_input2.w\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] &&\n\t\t\t\t\traw_input1[1] == raw_input2[1] &&\n\t\t\t\t\traw_input1[2] == raw_input2[2] &&\n\t\t\t\t\traw_input1[3] == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t\tthis.w = this.components[3];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t\tthis._value.w = this.w.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector4().fromArray(input);\n\t// \t}\n\t// \treturn new Vector4();\n\t// }\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsValueAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['value_type'];\n};\n\nexport class ParamsValueAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nexport class ProcessingContext {\n\tprivate _frame: number = 0;\n\tconstructor(node: BaseNodeType) {}\n\tcopy(src_context: ProcessingContext) {\n\t\tthis._frame = src_context.frame;\n\t}\n\tget frame() {\n\t\treturn this._frame;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nimport {ConnectionsController} from './ConnectionsController';\nimport {InputsController} from './InputsController';\nimport {OutputsController} from './OutputsController';\n\nexport class IOController<T extends BaseNodeType> {\n\tprotected _connections: ConnectionsController = new ConnectionsController(this.node);\n\tprotected _inputs: InputsController<T> | undefined;\n\tprotected _outputs: OutputsController<T> | undefined;\n\n\tconstructor(protected node: T) {}\n\n\t// add_connections_controller() {\n\t// \tthis._connections =\n\t// }\n\tget connections() {\n\t\treturn this._connections;\n\t}\n\n\t// inputs\n\t// init_inputs(options: InputsControllerOptions) {\n\t// \tthis.inputs.set_options(options);\n\t// }\n\tget inputs(): InputsController<T> {\n\t\treturn (this._inputs = this._inputs || new InputsController<T>(this.node));\n\t}\n\thas_inputs() {\n\t\treturn this._inputs != null;\n\t}\n\n\t// outputs\n\t// init_outputs() {\n\t// \tthis._outputs = this._outputs || new OutputsController(this.node);\n\t// }\n\tget outputs(): OutputsController<T> {\n\t\treturn (this._outputs = this._outputs || new OutputsController<T>(this.node));\n\t}\n\thas_outputs() {\n\t\treturn this._outputs != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport lodash_compact from 'lodash/compact';\nimport {NodeConnection} from './NodeConnection';\n\n// interface NodeConnectionByString {\n// \t[propName: string]: NodeConnection;\n// }\n// interface NodeConnectionByStringByString {\n// \t[propName: string]: NodeConnectionByString;\n// }\n\nexport class ConnectionsController {\n\tprivate _input_connections: Array<NodeConnection | undefined> | undefined;\n\tprivate _output_connections: Map<number, Map<number, NodeConnection>> = new Map();\n\n\tconstructor(protected _node: BaseNodeType) {}\n\n\tinit_inputs() {\n\t\tconst count = this._node.io.inputs.max_inputs_count;\n\t\tthis._input_connections = new Array(count);\n\t}\n\n\t//\n\t//\n\t// INPUT CONNECTIONS\n\t//\n\t//\n\tadd_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\t// if (connection.input_index < this._input_connections.length) {\n\t\t\tthis._input_connections[connection.input_index] = connection;\n\t\t\t// } else {\n\t\t\t// \tconsole.warn(`attempt to add an input connection at index ${connection.input_index}`);\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tremove_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\tif (connection.input_index < this._input_connections.length) {\n\t\t\t\tthis._input_connections[connection.input_index] = undefined;\n\t\t\t\t// if all connections after are also undefined, we can safely shrink the array\n\t\t\t\tlet all_connections_after_are_undefined = true;\n\t\t\t\tfor (let i = connection.input_index; i < this._input_connections.length; i++) {\n\t\t\t\t\tif (this._input_connections[i]) {\n\t\t\t\t\t\tall_connections_after_are_undefined = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (all_connections_after_are_undefined) {\n\t\t\t\t\tthis._input_connections = this._input_connections.slice(0, connection.input_index);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn(`attempt to remove an input connection at index ${connection.input_index}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tinput_connection(index: number): NodeConnection | undefined {\n\t\tif (this._input_connections) {\n\t\t\treturn this._input_connections[index];\n\t\t}\n\t}\n\tfirst_input_connection(): NodeConnection {\n\t\treturn lodash_compact(this._input_connections)[0];\n\t}\n\t// last_input_connection(): NodeConnection {\n\t// \tconst connections = lodash_compact(this._input_connections);\n\t// \treturn connections[connections.length - 1];\n\t// }\n\tinput_connections() {\n\t\treturn this._input_connections;\n\t}\n\n\t//\n\t//\n\t// OUTPUT CONNECTIONS\n\t//\n\t//\n\tadd_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (!connections_by_id) {\n\t\t\tconnections_by_id = new Map<number, NodeConnection>();\n\t\t\tthis._output_connections.set(output_index, connections_by_id);\n\t\t}\n\t\tconnections_by_id.set(id, connection);\n\t\t// this._output_connections[output_index] = this._output_connections[output_index] || {};\n\t\t// this._output_connections[output_index][id] = connection;\n\t}\n\tremove_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (connections_by_id) {\n\t\t\tconnections_by_id.delete(id);\n\t\t}\n\t\t// delete this._output_connections[output_index][id];\n\t}\n\n\toutput_connections() {\n\t\tlet list: NodeConnection[] = [];\n\n\t\tthis._output_connections.forEach((connections_by_id, output_index) => {\n\t\t\tconnections_by_id.forEach((connection, id) => {\n\t\t\t\tif (connection) {\n\t\t\t\t\tlist.push(connection);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t// Object.keys(this._output_connections).forEach((index) => {\n\t\t// \tconst connections_for_index = this._output_connections[index];\n\t\t// \tObject.keys(connections_for_index).forEach((id) => {\n\t\t// \t\tlist.push(connections_for_index[id]);\n\t\t// \t});\n\t\t// });\n\t\treturn list;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseContainer} from '../../../containers/_Base';\n// import lodash_includes from 'lodash/includes'\n// import lodash_filter from 'lodash/filter'\nimport lodash_each from 'lodash/each';\nimport lodash_isString from 'lodash/isString';\n// import lodash_compact from 'lodash/compact'\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport {NodeConnection} from './NodeConnection';\n\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {NodeEvent} from '../../../poly/NodeEvent';\nimport {InputCloneMode} from '../../../poly/InputCloneMode';\nimport {TypeAssert} from '../../../poly/Assert';\n\n// export class InputGraphNode extends NodeSimple {\n// \tconstructor(name: string) {\n// \t\tsuper(name);\n// \t}\n// }\n\n// export interface InputsControllerOptions {\n// \tmin_inputs?: number;\n// \tmax_inputs?: number;\n// \tdepends_on_inputs?: boolean;\n// }\ntype OnUpdateHook = () => void;\n\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class InputsController<T extends BaseNodeType> {\n\tprivate _graph_node_inputs: CoreGraphNode[] = [];\n\tprivate _inputs: Array<T | null> = [];\n\tprivate _has_named_inputs: boolean = false;\n\t// _input_connections: NodeConnection[] = []\n\tprivate _named_input_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _min_inputs_count: number = 0;\n\tprivate _max_inputs_count: number = 0;\n\tprivate _depends_on_inputs: boolean = true;\n\n\t// hooks\n\tprivate _on_update_hooks: OnUpdateHook[] | undefined;\n\tprivate _on_update_hook_names: string[] | undefined;\n\n\t// clonable\n\tprivate _user_inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _override_clonable_state: boolean = false;\n\n\tconstructor(protected node: T) {\n\t\t//, options: InputsControllerOptions = {}) {\n\t\t// this.set_options(options);\n\t}\n\n\t// set_options(options: InputsControllerOptions) {\n\t// \tif (options['min_inputs']) {\n\t// \t\tthis.set_min_inputs_count(options['min_inputs']);\n\t// \t}\n\t// \tif (options['max_inputs']) {\n\t// \t\tthis.set_max_inputs_count(options['max_inputs']);\n\t// \t}\n\t// \tif (options['depends_on_inputs']) {\n\t// \t\tthis.set_depends_on_inputs(options['depends_on_inputs']);\n\t// \t}\n\t// }\n\n\t// _init_inputs() {\n\t// \tthis._inputs = [];\n\t// }\n\tset_depends_on_inputs(depends_on_inputs: boolean) {\n\t\tthis._depends_on_inputs = depends_on_inputs;\n\t}\n\tprivate set_min_inputs_count(min_inputs_count: number) {\n\t\tthis._min_inputs_count = min_inputs_count;\n\t}\n\t// min_inputs_count() {\n\t// \treturn this._min_inputs_count || 0;\n\t// }\n\tprivate set_max_inputs_count(max_inputs_count: number) {\n\t\tthis._max_inputs_count = max_inputs_count;\n\t\tthis.init_graph_node_inputs();\n\t}\n\n\tnamed_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let connection_point of this._named_input_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_inputs = true;\n\t\tthis._named_input_connection_points = connection_points;\n\t\tthis.set_min_inputs_count(0);\n\t\tthis.set_max_inputs_count(connection_points.length);\n\t\tthis.init_graph_node_inputs();\n\t\tthis.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n\t}\n\tget has_named_inputs() {\n\t\treturn this._has_named_inputs;\n\t}\n\tget named_input_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_input_connection_points || [];\n\t}\n\tprivate init_graph_node_inputs() {\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\tthis._graph_node_inputs[i] = this._graph_node_inputs[i] || this._create_graph_node_input(i);\n\t\t}\n\t}\n\tprivate _create_graph_node_input(index: number): CoreGraphNode {\n\t\tconst graph_input_node = new CoreGraphNode(this.node.scene, `input_${index}`);\n\t\t// graph_input_node.set_scene(this.node.scene);\n\t\tthis.node.add_graph_input(graph_input_node);\n\t\treturn graph_input_node;\n\t}\n\n\tget max_inputs_count(): number {\n\t\treturn this._max_inputs_count || 0;\n\t}\n\tinput_graph_node(input_index: number): CoreGraphNode {\n\t\treturn this._graph_node_inputs[input_index];\n\t}\n\n\t// set_count_to_zero() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(0);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\t// set_count_to_one_max() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(1);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\tset_count(min: number, max?: number) {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t}\n\t\tthis.set_min_inputs_count(min);\n\t\tthis.set_max_inputs_count(max);\n\n\t\tthis.init_inputs_clonable_state();\n\t\tthis.init_connections_controller_inputs();\n\t}\n\tprivate init_connections_controller_inputs() {\n\t\tthis.node.io.connections.init_inputs();\n\t}\n\t// requires_two_inputs: ->\n\t// \tthis.set_min_inputs_count(2)\n\t// \tthis.set_max_inputs_count(2)\n\n\t// requires_one_input() {\n\t// \treturn this._min_inputs_count > 0;\n\t// }\n\n\t// eval_required_inputs(callback){\n\t// \tconst containers = [];\n\t// \tif (this._max_inputs_count === 0) {\n\t// \t\treturn callback(containers);\n\t// \t} else {\n\t// \t\tconst existing_inputs = lodash_compact(this.inputs());\n\t// \t\tif (existing_inputs.length < this._min_inputs_count) {\n\t// \t\t\treturn this.self.set_error(\"inputs are missing\");\n\t// \t\t} else {\n\t// \t\t\t// const frame = this.self.context().frame();\n\t// \t\t\t// const full_path = this.self.full_path();\n\n\t// \t\t\tswitch (existing_inputs.length) {\n\t// \t\t\t\tcase 0:\n\t// \t\t\t\t\treturn callback(containers);\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container=> {\n\t// \t\t\t\t\t\tcontainers.push(container);\n\t// \t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t});\n\t// \t\t\t\tcase 2:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container0=> {\n\t// \t\t\t\t\t\treturn this.eval_required_input(1, container1=> {\n\t// \t\t\t\t\t\t\tcontainers.push(container0);\n\t// \t\t\t\t\t\t\tcontainers.push(container1);\n\t// \t\t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t});\n\t// \t\t\t\t\t// TODO: I could also here check if the inputs are dirty\n\t// \t\t\t\t\t// instead of going through the callback chain\n\t// \t\t\t\t\t// input_node0 = this.input(0)\n\t// \t\t\t\t\t// input_node0.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// input_node0.request_container (container0)=>\n\t// \t\t\t\t\t// \tinput_node1 = this.input(1)\n\t// \t\t\t\t\t// \tinput_node1.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// \tinput_node1.request_container (container1)=>\n\t// \t\t\t\t\t// \t\tcontainers.push(container0)\n\t// \t\t\t\t\t// \t\tcontainers.push(container1)\n\t// \t\t\t\t\t// \t\tcallback([container0, container1])\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(`${this.self.full_path()} inputs not evaluated`);\n\t// \t\t\t\t\treturn callback();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tasync eval_required_inputs_p() {\n\t\tlet containers: Array<BaseContainer | null> = [];\n\t\tif (this._max_inputs_count > 0) {\n\t\t\tconst existing_input_indices: number[] = [];\n\t\t\tthis.inputs().forEach((input, i) => {\n\t\t\t\tif (input) {\n\t\t\t\t\texisting_input_indices.push(i);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// const existing_inputs = lodash_compact(this.inputs());\n\t\t\tif (existing_input_indices.length < this._min_inputs_count) {\n\t\t\t\tthis.node.states.error.set('inputs are missing');\n\t\t\t} else {\n\t\t\t\tif (existing_input_indices.length > 0) {\n\t\t\t\t\tconst promises = existing_input_indices.map((input_index) => {\n\t\t\t\t\t\treturn this.node.io.inputs.eval_required_input(input_index);\n\t\t\t\t\t});\n\t\t\t\t\tcontainers = await Promise.all(promises);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containers;\n\t}\n\t// eval_required_input(input_index: number, callback){\n\t// \treturn this.self.request_input_container(input_index, container=> {\n\t// \t\t// we do not clone here, as we just check if a group is present\n\t// \t\tlet group;\n\t// \t\tif ((container != null) && ((group = container.object({clone: false})) != null)) {\n\t// \t\t\treturn callback(container);\n\t// \t\t} else {\n\t// \t\t\tconst input_node = this.input(input_index);\n\t// \t\t\tif (input_node != null) {\n\t// \t\t\t\tconst input_error_message = input_node.error_message();\n\t// \t\t\t\treturn this.self.set_error(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\tasync eval_required_input(input_index: number) {\n\t\tconst container = await this.node.container_controller.request_input_container(input_index);\n\t\t// we do not clone here, as we just check if a group is present\n\t\tif (container && container.core_content()) {\n\t\t\t// return container;\n\t\t} else {\n\t\t\tconst input_node = this.input(input_index);\n\t\t\tif (input_node) {\n\t\t\t\tconst input_error_message = input_node.states.error.message;\n\t\t\t\tif (input_error_message) {\n\t\t\t\t\tthis.node.states.error.set(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\t// protected _get_named_input_index_without_error(name: string): number {\n\t// \tconst connections = this.named_input_connections;\n\t// \tlet index = -1;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn index;\n\t// }\n\tget_named_input_index(name: string): number {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n\t\t\t\tif (this._named_input_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t\t// const index = this._get_named_input_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connections = this.named_input_connections;\n\t\t// \tconst available_names = connections.map((o) => o.name).join(', ');\n\t\t// \tconsole.log('named_input_connections', connections);\n\t\t// \tthrow new Error(\n\t\t// \t\t`${this.node.full_path()}: no inputs named '${name}'. available names are '${available_names}' (${\n\t\t// \t\t\tconnections.length\n\t\t// \t\t} inputs)`\n\t\t// \t);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_input_index(input_index_or_name: number | string): number {\n\t\tif (lodash_isString(input_index_or_name)) {\n\t\t\tif (this.has_named_inputs) {\n\t\t\t\treturn this.get_named_input_index(input_index_or_name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`node ${this.node.full_path()} has no named inputs`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn input_index_or_name;\n\t\t}\n\t}\n\n\tset_input(input_index_or_name: number | string, node: T | null, output_index_or_name: number | string = 0) {\n\t\tconst input_index = this.get_input_index(input_index_or_name) || 0;\n\t\tif (input_index < 0) {\n\t\t\tconst message = `invalid input (${input_index_or_name}) for node ${this.node.full_path()}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tlet output_index = 0;\n\t\tif (node) {\n\t\t\tif (node.io.outputs.has_named_outputs) {\n\t\t\t\t// if(node.has_named_output(output_index_or_name)){\n\t\t\t\toutput_index = node.io.outputs.get_output_index(output_index_or_name);\n\t\t\t\tif (output_index == null || output_index < 0) {\n\t\t\t\t\tconsole.warn(`node ${node.full_path()} does not have an output named ${output_index_or_name}`);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t// this seems to prevent connecting output 1 from a vec to float to something else\n\t\t\t\t// } else {\n\t\t\t\t// \tconsole.warn(`${node.full_path()} has no output '${output_index_or_name}'`)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tconst graph_input_node = this._graph_node_inputs[input_index];\n\t\tif (graph_input_node == null) {\n\t\t\tconst message = `graph_input_node not found at index ${input_index}`;\n\t\t\tconsole.warn(message);\n\t\t\tthrow new Error(message);\n\t\t}\n\n\t\tif (node && this.node.parent != node.parent) {\n\t\t\treturn;\n\t\t}\n\t\t// use the name if the node is either not defined or in another parent\n\t\t// const parent = this.self.parent()\n\t\t// if ((node == null) || (node.parent().graph_node_id !== parent.graph_node_id)) {\n\t\t// \tif (node_name != null) {\n\t\t// \t\tnode = parent.node(node_name);\n\t\t// \t}\n\t\t// }\n\n\t\tconst old_input_node = this._inputs[input_index];\n\t\tlet old_output_index: number | null = null;\n\t\tlet old_connection: NodeConnection | undefined = undefined;\n\t\tif (this.node.io.connections) {\n\t\t\told_connection = this.node.io.connections.input_connection(input_index);\n\t\t}\n\t\tif (old_connection) {\n\t\t\told_output_index = old_connection.output_index;\n\t\t}\n\n\t\tif (node !== old_input_node || output_index != old_output_index) {\n\t\t\t// TODO: test: add test to make sure this is necessary\n\t\t\tif (old_input_node != null) {\n\t\t\t\tif (this._depends_on_inputs) {\n\t\t\t\t\tgraph_input_node.remove_graph_input(old_input_node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node != null) {\n\t\t\t\tif (graph_input_node.add_graph_input(node)) {\n\t\t\t\t\t// we do test if we can create the graph connection\n\t\t\t\t\t// to ensure we are not in a cyclical graph,\n\t\t\t\t\t// but we delete it right after\n\t\t\t\t\tif (!this._depends_on_inputs) {\n\t\t\t\t\t\tgraph_input_node.remove_graph_input(node);\n\t\t\t\t\t}\n\n\t\t\t\t\t//this._input_connections[input_index] = new NodeConnection(node, this.self, output_index, input_index);\n\t\t\t\t\tif (old_connection) {\n\t\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t\t}\n\t\t\t\t\tthis._inputs[input_index] = node;\n\t\t\t\t\tnew NodeConnection(node, this.node, output_index, input_index);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`cannot connect ${node.full_path()} to ${this.node.full_path()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._inputs[input_index] = null;\n\t\t\t\tif (old_connection) {\n\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t}\n\t\t\t\t// this._input_connections[input_index] = null;\n\t\t\t}\n\n\t\t\tthis._run_on_set_input_hooks();\n\t\t\tgraph_input_node.set_successors_dirty();\n\t\t\t// this.node.set_dirty(node);\n\t\t\tthis.node.emit(NodeEvent.INPUTS_UPDATED);\n\t\t}\n\t}\n\n\tremove_input(node: T) {\n\t\tlodash_each(this.inputs(), (input, index) => {\n\t\t\tif (input != null && node != null) {\n\t\t\t\tif (input.graph_node_id === node.graph_node_id) {\n\t\t\t\t\tthis.set_input(index, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tinput(input_index: number): T | null {\n\t\treturn this._inputs[input_index];\n\t}\n\t// TODO: the named_input and named_output API really needs to change\n\tnamed_input(input_name: string): T | null {\n\t\tif (this.has_named_inputs) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._inputs[input_index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tnamed_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this.has_named_inputs && this._named_input_connection_points) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._named_input_connection_points[input_index];\n\t\t}\n\t}\n\thas_named_input(name: string): boolean {\n\t\treturn this.get_named_input_index(name) >= 0;\n\t}\n\thas_input(input_index: number): boolean {\n\t\treturn this._inputs[input_index] != null;\n\t}\n\tinputs() {\n\t\treturn this._inputs;\n\t}\n\n\t// outputs(): BaseNode[] {\n\t// \treturn lodash_filter(this.self.graph_successors(), successor=> {\n\t// \t\tif (successor.is_a(Node)) {\n\t// \t\t\treturn lodash_includes(successor.inputs(), this.self);\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// clonable states\n\toverride_clonable_state_allowed() {\n\t\tlet value = false;\n\t\tfor (let state of this.inputs_clonable_state()) {\n\t\t\tif (state == InputCloneMode.FROM_NODE) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\tinputs_clonable_state(): InputCloneMode[] {\n\t\treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n\t}\n\tinput_cloned(index: number): boolean {\n\t\treturn this.input_clonable_state_with_override(index);\n\t}\n\tinputs_clonable_state_with_override(): boolean[] {\n\t\tconst list = [];\n\t\tconst states = this.inputs_clonable_state();\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tlist.push(this.input_clonable_state_with_override(i));\n\t\t}\n\t\treturn list;\n\t}\n\tinput_clonable_state_with_override(index: number): boolean {\n\t\tconst states = this.inputs_clonable_state();\n\t\t// for (let i = 0; i < states.length; i++) {\n\t\t// TODO: typescript: not sure if this loop was justified\n\t\tconst state = states[index];\n\t\tswitch (state) {\n\t\t\tcase InputCloneMode.ALWAYS:\n\t\t\t\treturn true;\n\t\t\tcase InputCloneMode.NEVER:\n\t\t\t\treturn false;\n\t\t\tcase InputCloneMode.FROM_NODE:\n\t\t\t\treturn !this._override_clonable_state;\n\t\t\t// default:\n\t\t\t// \tthrow new Error('unsupported type');\n\t\t}\n\t\treturn TypeAssert.unreachable(state);\n\t\t// }\n\t}\n\n\tinit_inputs_clonable_state(values: InputCloneMode[] | null = null) {\n\t\tif (values) {\n\t\t\tthis._user_inputs_clonable_states = values;\n\t\t}\n\t\tthis._inputs_clonable_states = this._user_inputs_clonable_states || this._default_inputs_clonale_state_values();\n\n\t\treturn this._inputs_clonable_states;\n\t}\n\tprivate _default_inputs_clonale_state_values() {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\t// lodash_times(this.self._max_inputs_count, (i)=>{\n\t\t\tlist.push(InputCloneMode.ALWAYS);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset_override_clonable_state(state: boolean) {\n\t\tthis._override_clonable_state = state;\n\t\tthis.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n\t}\n\toverride_clonable_state() {\n\t\treturn this._override_clonable_state;\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tadd_on_set_input_hook(name: string, hook: OnUpdateHook) {\n\t\tthis._on_update_hooks = this._on_update_hooks || [];\n\t\tthis._on_update_hook_names = this._on_update_hook_names || [];\n\n\t\tif (!this._on_update_hook_names.includes(name)) {\n\t\t\tthis._on_update_hooks.push(hook);\n\t\t\tthis._on_update_hook_names.push(name);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this.node);\n\t\t}\n\t}\n\tprivate _run_on_set_input_hooks() {\n\t\tif (this._on_update_hooks) {\n\t\t\tfor (let hook of this._on_update_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\ninterface DisconnectionOptions {\n\tset_input?: boolean;\n}\n\nexport class NodeConnection {\n\tprivate static _next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor(\n\t\tprivate _node_src: BaseNodeType,\n\t\tprivate _node_dest: BaseNodeType,\n\t\tprivate _output_index: number = 0,\n\t\tprivate _input_index: number = 0\n\t) {\n\t\tthis._id = NodeConnection._next_id++;\n\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.add_output_connection(this);\n\t\t\tthis._node_dest.io.connections.add_input_connection(this);\n\t\t}\n\t}\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget node_src() {\n\t\treturn this._node_src;\n\t}\n\tget node_dest() {\n\t\treturn this._node_dest;\n\t}\n\tget output_index() {\n\t\treturn this._output_index;\n\t}\n\tget input_index() {\n\t\treturn this._input_index;\n\t}\n\n\tdisconnect(options: DisconnectionOptions = {}) {\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.remove_output_connection(this);\n\t\t\tthis._node_dest.io.connections.remove_input_connection(this);\n\t\t}\n\n\t\tif (options.set_input === true) {\n\t\t\tthis._node_dest.io.inputs.set_input(this._input_index, null);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isString from 'lodash/isString';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// interface OutputsOptions {\n// \thas_outputs?: boolean;\n// }\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class OutputsController<T extends BaseNodeType> {\n\tprivate _has_outputs: boolean = false;\n\tprivate _named_output_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _has_named_outputs: boolean = false;\n\n\tconstructor(private node: T) {}\n\n\t// init(options?: OutputsOptions) {\n\t// \tif (options == null) {\n\t// \t\toptions = {};\n\t// \t}\n\t// \tif (options['has_outputs'] == null) {\n\t// \t\toptions['has_outputs'] = true;\n\t// \t}\n\t// \tthis._has_outputs = options['has_outputs'];\n\t// }\n\tset_has_one_output() {\n\t\tthis._has_outputs = true;\n\t}\n\tset_has_no_output() {\n\t\tthis._has_outputs = false;\n\t}\n\n\tget has_outputs() {\n\t\treturn this._has_outputs;\n\t}\n\tget has_named_outputs() {\n\t\treturn this._has_named_outputs;\n\t}\n\thas_named_output(name: string): boolean {\n\t\t// return this._get_named_output_index_without_error(name) != null;\n\t\treturn this.get_named_output_index(name) >= 0;\n\t}\n\tget named_output_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_output_connection_points || [];\n\t}\n\tnamed_output_connection(index: number): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\treturn this._named_output_connection_points[index];\n\t\t}\n\t}\n\t// protected _get_named_output_index_without_error(name: string): number {\n\t// \tconst connections = this.named_output_connection_points;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn -1;\n\t// }\n\tget_named_output_index(name: string): number {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_output_connection_points.length; i++) {\n\t\t\t\tif (this._named_output_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\n\t\t// const index = this._get_named_output_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connection_points = this.named_output_connection_points;\n\t\t// \tconst available_names = connection_points.map((o) => o.name).join(', ');\n\t\t// \tthrow new Error(`no outputs named '${name}'. available names are ${available_names}`);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_output_index(output_index_or_name: number | string): number {\n\t\tif (output_index_or_name != null) {\n\t\t\tif (lodash_isString(output_index_or_name)) {\n\t\t\t\tif (this.has_named_outputs) {\n\t\t\t\t\treturn this.get_named_output_index(output_index_or_name);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`node ${this.node.full_path()} has no named outputs`);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn output_index_or_name;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tnamed_output_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let connection_point of this._named_output_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_named_output_connection_points(connection_points: BaseNamedConnectionPointType[], set_dirty: boolean = true) {\n\t\tthis._has_named_outputs = true;\n\t\tthis._named_output_connection_points = connection_points;\n\t\tif (set_dirty && this.node.scene) {\n\t\t\t// why do I need this set dirty here?\n\t\t\t// I currently have to have a flag to optionally prevent this,\n\t\t\t// for instance from gl nodes which have their outputs updated in a post dirty hook\n\t\t\tthis.node.set_dirty(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n\t}\n\tused_output_names(): string[] {\n\t\tif (this.node.io.connections) {\n\t\t\tconst output_indices = lodash_uniq(\n\t\t\t\tthis.node.io.connections\n\t\t\t\t\t.output_connections()\n\t\t\t\t\t.map((connection) => (connection ? connection.output_index : null))\n\t\t\t);\n\t\t\tconst used_output_indices: number[] = [];\n\t\t\toutput_indices.forEach((index) => {\n\t\t\t\tif (lodash_isNumber(index)) {\n\t\t\t\t\tused_output_indices.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst used_output_names: string[] = used_output_indices.map((index) => {\n\t\t\t\treturn this.named_output_connection_points[index].name;\n\t\t\t});\n\t\t\treturn used_output_names;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from '../../../poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['param_class'];\n};\n\nexport class ParamsAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class EventContainer extends TypedContainer<ContainableMap['EVENT']> {\n\tset_content(content: ContainableMap['EVENT']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import {BaseEventNodeType} from '../../../nodes/event/_Base';\nimport {BaseCameraObjNodeType} from '../../../nodes/obj/_BaseCamera';\nexport abstract class BaseEventsController<E extends Event, T extends BaseEventNodeType> {\n\tprotected _nodes_by_graph_node_id: Map<string, T> = new Map();\n\tregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.set(node.graph_node_id, node);\n\t}\n\tunregister_node(node: T) {\n\t\tthis._nodes_by_graph_node_id.delete(node.graph_node_id);\n\t}\n\tabstract accepts_event(event: Event): boolean;\n\tprocess(event: E, canvas: HTMLCanvasElement, camera_node: BaseCameraObjNodeType) {\n\t\tthis._nodes_by_graph_node_id.forEach((node) => node.process_event(event, canvas, camera_node));\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LifeCycleController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _lifecycle_on_create_allowed: boolean = true;\n\n\ton_create_hook_allowed(): boolean {\n\t\treturn this.scene.loading_controller.loaded && this._lifecycle_on_create_allowed;\n\t}\n\n\ton_create_prevent(callback: () => void) {\n\t\tthis._lifecycle_on_create_allowed = false;\n\t\tcallback();\n\t\tthis._lifecycle_on_create_allowed = true;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LoadingController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_loading_state: boolean = true;\n\t_auto_updating: boolean = true;\n\t_first_object_loaded: boolean = false;\n\n\tmark_as_loading() {\n\t\tthis._set_loading_state(true);\n\t}\n\tasync mark_as_loaded() {\n\t\tawait this._set_loading_state(false);\n\t\t// POLY.notify_scene_loaded(this.scene);\n\t\t// this.cooker().block()\n\t\t// this.root().set_children_dirty_without_propagation()\n\t\t// this.cooker().unblock()\n\t}\n\tprivate async _set_loading_state(state: boolean) {\n\t\tthis._loading_state = state;\n\t\tawait this.set_auto_update(!this._loading_state);\n\t}\n\tget is_loading() {\n\t\treturn this._loading_state;\n\t}\n\tget loaded() {\n\t\treturn !this._loading_state;\n\t}\n\tget auto_updating() {\n\t\treturn this._auto_updating;\n\t} // _init_auto_update: ->\n\t// \tthis.set_auto_update(true)\n\tasync set_auto_update(new_state: boolean) {\n\t\tif (this._auto_updating !== new_state) {\n\t\t\tthis._auto_updating = new_state;\n\t\t\tif (this._auto_updating) {\n\t\t\t\t// if this.env_is_development()\n\t\t\t\t// \tthis.performance().start()\n\n\t\t\t\tconst root = this.scene.root;\n\t\t\t\tif (root) {\n\t\t\t\t\tawait root.process_queue();\n\t\t\t\t\t// const c = async () => {\n\t\t\t\t\t// \tawait root.process_queue();\n\t\t\t\t\t// };\n\t\t\t\t\t// setTimeout(c, 50);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if (callback != null) { callback(); }\n\t\t\t}\n\t\t} else {\n\t\t\t// if (callback != null) { callback(); }\n\t\t}\n\t}\n\n\ton_first_object_loaded() {\n\t\tif (!this._first_object_loaded) {\n\t\t\tthis._first_object_loaded = true;\n\n\t\t\tconst loader = document.getElementById('scene_loading_container');\n\t\t\tif (loader) {\n\t\t\t\tloader.parentElement?.removeChild(loader);\n\t\t\t}\n\t\t}\n\t}\n\n\t// on_all_objects_loaded() {\n\t// \t// POLY.viewer_loaders_manager().dipose_loaders()\n\t// }\n}\n","import {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../../nodes/_Base';\n\nexport class ExpressionsController {\n\tprivate _params_by_id: Map<string, BaseParamType> = new Map();\n\tconstructor() {}\n\n\tregister_param(param: BaseParamType) {\n\t\tthis._params_by_id.set(param.graph_node_id, param);\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis._params_by_id.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t//\n\t//\n\tregenerate_referring_expressions(node: BaseNodeType) {\n\t\tnode.name_controller.graph_node.set_successors_dirty(node);\n\t}\n}\n","import {BaseNodeType} from '../../nodes/_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {MissingExpressionReference} from '../../expressions/MissingReference';\nimport jsep from 'jsep';\nimport {MapUtils} from '../../../core/MapUtils';\n\n// type MissingExpressionReferenceById = Map<number, MissingExpressionReference>;\n// type MissingExpressionReferenceByIdByPath = Map<string, MissingExpressionReferenceById>;\n\nexport class MissingReferencesController {\n\tprivate references: Map<string, MissingExpressionReference[]> = new Map<string, MissingExpressionReference[]>();\n\n\tregister(param: BaseParamType, jsep_node: jsep.Expression, path_argument: string): MissingExpressionReference {\n\t\tconst missing_expression_reference = new MissingExpressionReference(param, path_argument);\n\n\t\tMapUtils.push_on_array_at_entry(this.references, param.graph_node_id, missing_expression_reference);\n\n\t\treturn missing_expression_reference;\n\t}\n\tderegister_param(param: BaseParamType) {\n\t\tthis.references.delete(param.graph_node_id);\n\t}\n\n\t//\n\t//\n\t// MISSING REFERENCES\n\t//\n\t//\n\t// call this from node.create and node.rename\n\tcheck_for_missing_references(node: BaseNodeType) {\n\t\tthis._check_for_missing_references_for_node(node);\n\t\tfor (let param of node.params.all) {\n\t\t\tthis._check_for_missing_references_for_param(param);\n\t\t}\n\t}\n\tprivate _check_for_missing_references_for_node(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(node.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n\tprivate _check_for_missing_references_for_param(param: BaseParamType) {\n\t\tconst id = param.graph_node_id;\n\n\t\tthis.references.forEach((missing_references, node_id) => {\n\t\t\tlet match_found = false;\n\t\t\tfor (let ref of missing_references) {\n\t\t\t\tif (ref.matches_path(param.full_path())) {\n\t\t\t\t\tmatch_found = true;\n\t\t\t\t\tref.resolve_missing_dependencies();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (match_found) {\n\t\t\t\tthis.references.delete(id);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseParamType} from '../params/_Base';\n// import jsep from 'jsep';\nimport {CoreWalker} from '../../core/Walker';\n\nexport class MissingExpressionReference {\n\tconstructor(private param: BaseParamType /*, private jsep_node: jsep.Expression*/, public path: string) {\n\t\t// console.log(this.jsep_node, this.param); // TODO: typescript, to not have the missing ref\n\t}\n\n\tmatches_path(path: string): boolean {\n\t\tconst absolute = CoreWalker.make_absolute_path(this.param.node, this.path);\n\t\treturn absolute == path;\n\t}\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.param.expression_controller?.update_from_method_dependency_name_change();\n\t}\n\n\tresolve_missing_dependencies() {\n\t\tconst input = this.param.raw_input_serialized;\n\t\tthis.param.set(this.param.default_value);\n\t\tthis.param.set(input);\n\t\t// parse_expression_and_update_dependencies()\n\t}\n}\n\n// export class ReferenceSearchResult {\n// \tpublic found_graph_nodes: CoreGraphNode[] = [];\n// \tpublic missing_paths: string[] = [];\n\n// \tconstructor() {}\n// \tset_found_graph_nodes(graph_nodes: CoreGraphNode[]) {\n// \t\tthis.found_graph_nodes = graph_nodes;\n// \t}\n// \tset_missing_paths(paths: string[]) {\n// \t\tthis.missing_paths = paths;\n// \t}\n// }\n","import {PolyScene} from '../PolyScene';\n\nimport {Object3D} from 'three/src/core/Object3D';\nimport lodash_concat from 'lodash/concat';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_compact from 'lodash/compact';\nimport {ObjectsManagerNode} from '../../nodes/manager/ObjectsManager';\nimport {CoreString} from '../../../core/String';\nimport {BaseNodeType} from '../../nodes/_Base';\nimport {BaseObjNodeType} from '../../nodes/obj/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class NodesController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_root!: ObjectsManagerNode;\n\t_node_context_signatures: Dictionary<boolean> = {};\n\t_instanciated_nodes_by_context_and_type: Dictionary<Dictionary<Dictionary<BaseNodeType>>> = {};\n\n\tinit() {\n\t\tthis._root = new ObjectsManagerNode(this.scene);\n\t\tthis._root.initialize_base_and_node();\n\t\t// this._root.set_scene(this.scene);\n\t\tthis._root.init_default_scene();\n\t}\n\n\tget root() {\n\t\treturn this._root;\n\t}\n\tobjects_from_mask(mask: string): Object3D[] {\n\t\tconst masks = mask.split(' ');\n\t\t// let geos = this.root().nodes_by_type('geo') as BaseNodeObj[];\n\t\tlet nodes = this.root.children() as BaseObjNodeType[];\n\t\tnodes = nodes.filter((node) => CoreString.matches_one_mask(node.name, masks));\n\t\tconst objects = nodes.map((geo) => geo.object);\n\t\treturn lodash_compact(objects);\n\t}\n\tclear() {\n\t\tconst children = this.root.children();\n\t\tfor (let child of children) {\n\t\t\tthis.root.children_controller?.remove_node(child);\n\t\t}\n\t\t// return children.forEach(child=> {\n\t\t// \treturn this.root().remove_node(child);\n\t\t// });\n\t}\n\n\tnode(path: string) {\n\t\tif (path === '/') {\n\t\t\treturn this.root;\n\t\t} else {\n\t\t\treturn this.root.node(path);\n\t\t}\n\t}\n\tall_nodes() {\n\t\tlet nodes: BaseNodeType[] = [this.root];\n\t\tlet current_parents: BaseNodeType[] = [this.root];\n\t\tlet cmptr = 0;\n\t\twhile (current_parents.length > 0 && cmptr < 10) {\n\t\t\tconst children = lodash_flatten(\n\t\t\t\tcurrent_parents.map((current_parent) => {\n\t\t\t\t\tif (current_parent.children_allowed()) {\n\t\t\t\t\t\treturn current_parent.children();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tnodes = lodash_concat(nodes, children);\n\t\t\tcurrent_parents = children;\n\t\t\tcmptr += 1;\n\t\t}\n\t\treturn lodash_flatten(nodes);\n\t}\n\n\treset_node_context_signatures() {\n\t\tthis._node_context_signatures = {};\n\t}\n\tregister_node_context_signature(node: BaseNodeType) {\n\t\tif (node.children_allowed() && node.children_controller) {\n\t\t\tthis._node_context_signatures[node.children_controller.node_context_signature()] = true;\n\t\t}\n\t}\n\tnode_context_signatures() {\n\t\treturn Object.keys(this._node_context_signatures)\n\t\t\t.sort()\n\t\t\t.map((s) => s.toLowerCase());\n\t}\n\n\tadd_to_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tthis._instanciated_nodes_by_context_and_type[context] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id] = node;\n\t}\n\n\tremove_from_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tdelete this._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id];\n\t}\n\n\tinstanciated_nodes(context: NodeContext, node_type: string) {\n\t\tconst nodes = [];\n\t\tif (this._instanciated_nodes_by_context_and_type[context]) {\n\t\t\tconst nodes_by_ids = this._instanciated_nodes_by_context_and_type[context][node_type];\n\t\t\tif (nodes_by_ids) {\n\t\t\t\tfor (let id of Object.keys(nodes_by_ids)) {\n\t\t\t\t\tnodes.push(nodes_by_ids[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t}\n}\n","import {Group} from 'three/src/objects/Group';\n// import lodash_isEqual from 'lodash/isEqual';\n// import lodash_map from 'lodash/map';\n\nimport {TypedBaseManagerNode} from './_Base';\n// import {CoreObject} from '../../../core/Object';\n// import {BaseNode} from '../_Base';\nimport {BaseObjNodeType} from '../obj/_Base';\n\n// import {BaseManagerObjNode} from '../obj/_BaseManager';\n// import {BaseCameraObjNodeClass} from '../obj/_BaseCamera';\n// import {BaseLightObjNodeClass} from '../obj/_BaseLight';\n\n// obj nodes\n// import {EventsObjNode} from '../obj/Events';\n// import {MaterialsObjNode} from '../obj/Materials';\n// import {FogObjNode} from '../obj/Fog';\nimport {GeoObjNode} from '../obj/Geo';\n\nimport {POLY} from '../../Poly';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {PolyScene} from '../../scene/PolyScene';\n// TODO:\n// ensure removing a node removes its content from the scene (spotlight?)\n\nimport {ObjNodeChildrenMap} from '../../poly/registers/Obj';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nclass ObjectsManagerParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ObjectsManagerParamsConfig();\n\nexport class ObjectsManagerNode extends TypedBaseManagerNode<ObjectsManagerParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'obj';\n\t}\n\t// children_context() {\n\t// \treturn NodeContext.OBJ;\n\t// }\n\n\tprivate _object: Group = new Group();\n\tprivate _queued_nodes_by_id: Dictionary<BaseObjNodeType> = {};\n\tprivate _queued_nodes_by_path: Dictionary<BaseObjNodeType> = {};\n\tprivate _expected_geo_nodes: Dictionary<GeoObjNode> = {};\n\t// private _loaded_geo_node_by_id: Dictionary<boolean> = {};\n\tprivate _process_queue_start: number = -1;\n\n\tprotected _children_controller_context = NodeContext.OBJ;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.flags.add_display();\n\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add.bind(this));\n\t\tthis.lifecycle.add_on_child_remove_hook(this._on_child_remove.bind(this));\n\t\t// this.flags.add_bypass({has_bypass_flag: false});\n\n\t\t// this.set_min_inputs_count(0);\n\t\t// this.set_max_inputs_count(0);\n\t}\n\t//@_object_uuid_by_node_graph_id = {}\n\n\tinit_default_scene() {\n\t\tthis._object.name = '_WORLD_';\n\t\tthis._scene.default_scene.add(this._object);\n\t}\n\n\t// TODO: is this method still used?\n\t// available_children_classes() {\n\t// \treturn POLY.Engine.Node.Obj;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tcreate_node<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as ObjNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseObjNodeType[];\n\t}\n\tnodes_by_type<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as ObjNodeChildrenMap[K][];\n\t}\n\n\tmultiple_display_flags_allowed() {\n\t\treturn true;\n\t}\n\n\tadd_to_queue(node: BaseObjNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._queued_nodes_by_id[id] == null) {\n\t\t\treturn (this._queued_nodes_by_id[id] = node);\n\t\t}\n\t}\n\n\tasync process_queue() {\n\t\tthis._queued_nodes_by_path = {};\n\t\tconst ids = Object.keys(this._queued_nodes_by_id);\n\t\tfor (let id of ids) {\n\t\t\tconst node = this._queued_nodes_by_id[id];\n\t\t\tdelete this._queued_nodes_by_id[id];\n\n\t\t\tconst full_path = `_____${node.render_order}__${node.full_path()}`;\n\t\t\t// we want to process managers, cameras, then lights, then everything else\n\t\t\t// so we add a prefix for those\n\t\t\t// if (this._is_node_manager(node)) {\n\t\t\t// \tfull_path = `/_____005_${full_path}`;\n\t\t\t// } else if (this._is_node_fog(node)) {\n\t\t\t// \tfull_path = `/_____002_${full_path}`;\n\t\t\t// } else if (this._is_node_camera(node)) {\n\t\t\t// \tfull_path = `/_____003_${full_path}`;\n\t\t\t// } else if (this._is_node_light(node)) {\n\t\t\t// \tfull_path = `/_____004_${full_path}`;\n\t\t\t// }\n\n\t\t\tthis._queued_nodes_by_path[full_path] = node;\n\t\t}\n\n\t\tconst promises = Object.keys(this._queued_nodes_by_path)\n\t\t\t.sort()\n\t\t\t.map((path_id) => {\n\t\t\t\tconst node = this._queued_nodes_by_path[path_id];\n\t\t\t\treturn this.update_object(node);\n\t\t\t});\n\n\t\tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t\tthis._process_queue_start = performance.now();\n\t\tPromise.all(promises).then(() => {\n\t\t\tPOLY.log(`SCENE LOADED '${this.scene.name}' in ${performance.now() - this._process_queue_start}`);\n\t\t\t// this.scene().performance().print()\n\n\t\t\t// do the update here if there are no objects to load\n\t\t\t// otherwise an empty scene will have a loader that never gets removed\n\t\t\t// if (Object.keys(this._expected_geo_nodes).length == 0) {\n\t\t\t// \tthis.update_on_all_objects_loaded();\n\t\t\t// }\n\t\t});\n\t}\n\n\tupdate_object(node: BaseObjNodeType) {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\tthis.add_to_queue(node);\n\t\t} else {\n\t\t\t// if (node.object) {\n\t\t\tthis.add_to_scene(node);\n\t\t\t// } else {\n\t\t\t// \t//if POLY.env != 'test'\n\t\t\t// \t// console.warn(`no object from ${node.full_path()} (error:${node.error_message()}) (${POLY.env})`);\n\t\t\t// }\n\t\t}\n\t}\n\n\t// _is_node_fog(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, FogObjNode);\n\t// }\n\t// _is_node_camera(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, BaseCameraObjNodeClass);\n\t// }\n\n\t// _is_node_event(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, EventsObjNode);\n\t// }\n\t// _is_node_mat(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, MaterialsObjNode);\n\t// }\n\n\t//\n\t//\n\t// OBJ PARENTING\n\t//\n\t//\n\n\t// TODO:\n\t// a OBJ node should be able to submit its group for transform\n\t// apart from the geometry. This would allow parenting to function\n\t// regardless if the underlying geo is valid or not\n\tget_parent_for_node(node: BaseObjNodeType) {\n\t\t// if (this._is_node_event(node) || this._is_node_mat(node)) {\n\t\t// \treturn null;\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\t// if (this._is_node_camera(node)) {\n\t\t\t// \treturn this.scene.display_scene;\n\t\t\t// } else {\n\t\t\tconst node_input = node.io.inputs.input(0);\n\t\t\tif (node_input) {\n\t\t\t\t//node_input.request_container (container)=>\n\t\t\t\t//\tcallback(container.object() || @_object)\n\t\t\t\treturn node_input.children_group;\n\t\t\t} else {\n\t\t\t\treturn this._object;\n\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tadd_to_scene(node: BaseObjNodeType): void {\n\t\t// if (this._is_node_fog(node)) {\n\t\t// console.log(\"fog\")\n\t\t// # TODO: ensure fog is removed if we set display or bypass flag\n\t\t// # TODO: ensure we get a warning if more than 1 fog\n\t\t// # TODO: why does it get added twice when its parameters are changed?\n\t\t// node.get_fog (fog)=>\n\t\t// \t@_scene.display_scene().fog = fog\n\t\t// #console.log(\"added fog\", node.object())\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\tconst parent_object = this.get_parent_for_node(node);\n\t\t\tif (parent_object) {\n\t\t\t\t// await node.params.eval_all().then((params_eval_key) => {\n\t\t\t\t// \tnode.request_container();\n\t\t\t\t// });\n\n\t\t\t\tif (node.used_in_scene) {\n\t\t\t\t\t// parent_object.add(node.object);\n\t\t\t\t\tnode.add_object_to_parent(parent_object);\n\t\t\t\t\t// await node.cook_controller.cook_main_without_inputs();\n\t\t\t\t} else {\n\t\t\t\t\tnode.remove_object_from_parent();\n\t\t\t\t\t// parent_object.remove(node.object);\n\t\t\t\t}\n\n\t\t\t\t// node.request_display_node();\n\t\t\t} else {\n\t\t\t\t// node.request_container().then(() => {\n\t\t\t\t// \t// force events and mat to cook and remove the dirty state\n\t\t\t\t// \t// ensure that pickers are cooked\n\t\t\t\t// \t// TODO: although there has been cases with two picker and\n\t\t\t\t// \t// one referencing the other with an expression, and that\n\t\t\t\t// \t// expression be evaluated before the second was created\n\t\t\t\t// \t// which led to an error. This should not happen\n\t\t\t\t// \tnode.children_controller.traverse_children((child) => child.set_dirty());\n\t\t\t\t// });\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_from_scene(node: BaseObjNodeType) {\n\t\tnode.remove_object_from_parent();\n\t}\n\tare_children_cooking(): boolean {\n\t\tconst children = this.children();\n\t\tfor (let child of children) {\n\t\t\tif (child.is_display_node_cooking()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync expected_loading_geo_nodes_by_id() {\n\t\tconst geo_nodes = this.nodes_by_type('geo');\n\t\tconst node_by_id: Dictionary<GeoObjNode> = {};\n\t\tfor (let geo_node of geo_nodes) {\n\t\t\tconst is_displayed = await geo_node.is_displayed();\n\t\t\tif (is_displayed) {\n\t\t\t\tnode_by_id[geo_node.graph_node_id] = geo_node;\n\t\t\t}\n\t\t}\n\t\treturn node_by_id;\n\t}\n\n\t// async notify_geo_loaded(geo_node: GeoObjNode) {\n\t// \tthis._loaded_geo_node_by_id = this._loaded_geo_node_by_id || {};\n\t// \tthis._loaded_geo_node_by_id[geo_node.graph_node_id] = true;\n\n\t// \tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t// \tif (this.scene) {\n\t// \t\tthis.scene.loading_controller.on_first_object_loaded();\n\n\t// \t\tif (lodash_isEqual(Object.keys(this._loaded_geo_node_by_id), Object.keys(this._expected_geo_nodes))) {\n\t// \t\t\tthis.update_on_all_objects_loaded();\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// update_on_all_objects_loaded() {\n\t// \tthis.scene.loading_controller.on_all_objects_loaded();\n\t// \t// this.scene.cube_cameras_controller.on_all_objects_loaded(); // TODO: typescript\n\t// }\n\n\tadd_to_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)->\n\t// \tobject = input_container.object()\n\n\t// \ttransformed_node.request_input_container 0, (parent_input_container)->\n\t// \t\tparent = parent_input_container.object()\n\t// \t\tparent.add(object)\n\n\tremove_from_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)=>\n\t// \tobject = input_container.object()\n\n\t// \tthis.get_parent_for_node transformed_node, (parent_object)=>\n\t// \t\tparent_object.add(object)\n\n\tprivate _on_child_add(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.update_object(node as BaseObjNodeType);\n\t\t}\n\t}\n\tprivate _on_child_remove(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.remove_from_scene(node as BaseObjNodeType);\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ManagerContainer} from '../../containers/Manager';\n\nexport class TypedBaseManagerNode<K extends NodeParamsConfig> extends TypedNode<'MANAGER', BaseManagerNodeType, K> {\n\tcontainer_controller: TypedContainerController<ManagerContainer> = new TypedContainerController<ManagerContainer>(\n\t\tthis,\n\t\tManagerContainer\n\t);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MANAGER;\n\t}\n}\n\nexport type BaseManagerNodeType = TypedBaseManagerNode<any>;\nexport class BaseManagerNodeClass extends TypedBaseManagerNode<any> {}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ManagerContainer extends TypedContainer<ContainableMap['MANAGER']> {\n\tset_content(content: ContainableMap['MANAGER']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_clone from 'lodash/clone';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {PerformanceNode} from './PerformanceNode';\nimport {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport class CorePerformance {\n\tprivate _started: boolean = false;\n\t_start_time: number | null = 0;\n\t_previous_timestamp: number = 0;\n\t_nodes_cook_data: Dictionary<PerformanceNode> = {};\n\t_durations_by_name: Dictionary<number> = {};\n\t_durations_count_by_name: Dictionary<number> = {};\n\t// _performance_id: number;\n\n\t// constructor(){\n\t// \tconsole.log(\"creating perf\")\n\t// \tthis._performance_id = Math.random()\n\t// }\n\n\tprofile(name: string, method: (args?: any) => any) {\n\t\tconst start_time = performance.now();\n\t\tmethod();\n\t\tconst total_time = performance.now() - start_time;\n\t\tconsole.log(`${name}: ${total_time}`);\n\t}\n\n\tstart() {\n\t\tif (!this._started) {\n\t\t\tthis.reset();\n\t\t\tthis._started = true;\n\t\t\tthis._start_time = performance.now();\n\t\t\tthis._nodes_cook_data = {};\n\t\t\tthis._previous_timestamp = this._start_time;\n\t\t}\n\t}\n\t// else\n\t// \tthrow \"performance already started\"\n\tstop() {\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._started = false;\n\t\tthis._start_time = null;\n\t\tthis._durations_by_name = {};\n\t\tthis._durations_count_by_name = {};\n\t\tthis._nodes_cook_data = {};\n\t}\n\n\tget started(): boolean {\n\t\treturn this._started;\n\t}\n\n\trecord_node_cook_data(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._nodes_cook_data[id] == null) {\n\t\t\tthis._nodes_cook_data[id] = new PerformanceNode(node);\n\t\t}\n\t\tthis._nodes_cook_data[id].update_cook_data();\n\t}\n\n\trecord(name: string) {\n\t\tif (!this.started) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tconst current_timestamp = performance.now();\n\n\t\tif (this._durations_by_name[name] == null) {\n\t\t\tthis._durations_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_by_name[name] += current_timestamp - this._previous_timestamp;\n\t\tif (this._durations_count_by_name[name] == null) {\n\t\t\tthis._durations_count_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_count_by_name[name] += 1;\n\n\t\treturn (this._previous_timestamp = current_timestamp);\n\t}\n\n\tprint() {\n\t\tthis.print_node_cook_data();\n\t\tthis.print_recordings();\n\t}\n\n\tprint_node_cook_data() {\n\t\tlet performance_nodes = Object.values(this._nodes_cook_data);\n\t\tperformance_nodes = lodash_sortBy(performance_nodes, (performance_node) => -performance_node.cook_time_total);\n\n\t\tconst print_objects = performance_nodes.map((performance_node) => performance_node.print_object());\n\n\t\tconsole.log('--------------- NODES COOK TIME -----------');\n\n\t\tconst table_entries = [];\n\t\tconst sorted_print_objects = lodash_sortBy(print_objects, (print_object) => -print_object['cook_time_total']);\n\t\tfor (let print_object of sorted_print_objects) {\n\t\t\ttable_entries.push(print_object);\n\t\t}\n\n\t\tconsole.table(table_entries);\n\n\t\treturn print_objects;\n\t}\n\n\tprint_recordings() {\n\t\t// const start_time = this._start_time\n\t\tconst durations_by_name = lodash_clone(this._durations_by_name);\n\t\tconst durations_count_by_name = lodash_clone(this._durations_count_by_name);\n\t\t//this.reset()\n\n\t\tconst durations = [];\n\t\t//durations_by_name = {}\n\t\tconst names_by_duration: Dictionary<string[]> = {};\n\n\t\tfor (let name of Object.keys(durations_by_name)) {\n\t\t\tconst duration = durations_by_name[name];\n\n\t\t\t//durations_by_name[name] = duration\n\t\t\tdurations.push(duration);\n\t\t\tif (names_by_duration[duration] == null) {\n\t\t\t\tnames_by_duration[duration] = [];\n\t\t\t}\n\t\t\tnames_by_duration[duration].push(name);\n\t\t}\n\n\t\tdurations.sort((a, b) => a - b);\n\t\tconst sorted_durations = lodash_uniq(durations);\n\n\t\tconsole.log('--------------- PERF RECORDINGS -----------');\n\t\t//console.log(\"sorted_durations\", sorted_durations)\n\t\t// let previous_duration = start_time\n\t\tconst table_entries = [];\n\t\tfor (let duration of sorted_durations) {\n\t\t\tconst names = names_by_duration[duration];\n\t\t\tfor (let name of names) {\n\t\t\t\tconst count = durations_count_by_name[name];\n\t\t\t\tconst duration_per_iteration = duration / count;\n\n\t\t\t\tconst entry = {duration, name, count, duration_per_iteration};\n\t\t\t\ttable_entries.push(entry);\n\t\t\t}\n\n\t\t\t// previous_duration = duration\n\t\t}\n\n\t\tconsole.table(table_entries);\n\t\treturn table_entries;\n\t}\n}\n","import {BaseNodeType} from '../../engine/nodes/_Base';\n\nexport interface PerformancePrintObject {\n\tfull_path: string;\n\tcooks_count: number;\n\tcook_time_total: number;\n\tcook_time_per_iteration: number;\n\tcook_time_total_with_inputs: number;\n\tcook_time_total_with_inputs_per_iteration: number;\n\tcook_time_total_params: number;\n\tcook_time_total_params_per_iteration: number;\n}\n\nexport class PerformanceNode {\n\t_cooks_count: number = 0;\n\t_cook_time_total: number = 0;\n\t_cook_time_total_with_inputs: number = 0;\n\t_cook_time_total_params: number = 0;\n\tconstructor(private _node: BaseNodeType) {}\n\n\tupdate_cook_data(): void {\n\t\tthis._cooks_count += 1;\n\t\tthis._cook_time_total += this._node.cook_controller.cook_time;\n\t\tthis._cook_time_total_with_inputs += this._node.cook_controller.cook_time_with_inputs;\n\t\tthis._cook_time_total_params += this._node.cook_controller.cook_time_params;\n\t}\n\n\tget cook_time_total(): number {\n\t\treturn this._cook_time_total;\n\t}\n\tget cook_time_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tget cook_time_total_with_inputs(): number {\n\t\treturn this._cook_time_total_with_inputs;\n\t}\n\tget cook_time_total_with_inputs_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_with_inputs / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cook_time_total_params(): number {\n\t\treturn this._cook_time_total_params;\n\t}\n\tget cook_time_total_params_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_params / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\n\tprint_object(): PerformancePrintObject {\n\t\treturn {\n\t\t\tfull_path: this._node.full_path(),\n\t\t\tcooks_count: this.cooks_count,\n\t\t\tcook_time_total: this.cook_time_total,\n\t\t\tcook_time_per_iteration: this.cook_time_per_iteration,\n\t\t\tcook_time_total_with_inputs: this.cook_time_total_with_inputs,\n\t\t\tcook_time_total_with_inputs_per_iteration: this.cook_time_total_with_inputs_per_iteration,\n\t\t\tcook_time_total_params: this.cook_time_total_params,\n\t\t\tcook_time_total_params_per_iteration: this.cook_time_total_params_per_iteration,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {SceneEvent} from '../../poly/SceneEvent';\n\ntype FrameRange = Number2;\n\n// ensure that FPS remains a float\n// to have divisions and multiplications also give a float\nconst FPS = 60.0;\n\nexport class TimeController {\n\tprotected self: PolyScene = (<unknown>this) as PolyScene;\n\tprivate _frame: number = 1;\n\tprivate _time: number = 0;\n\tprivate _prev_performance_now: number = 0;\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _frame_range: FrameRange = [1, 600];\n\tprivate _frame_range_locked: [boolean, boolean] = [true, true];\n\tprivate _playing: boolean = false;\n\n\tconstructor(private scene: PolyScene) {\n\t\tthis._graph_node = new CoreGraphNode(scene, 'time controller');\n\t\t// this._graph_node.set_scene(this.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tget frame(): number {\n\t\treturn this._frame;\n\t}\n\tget time(): number {\n\t\treturn this._time;\n\t}\n\tget frame_range(): FrameRange {\n\t\treturn this._frame_range;\n\t}\n\tget frame_range_locked(): [boolean, boolean] {\n\t\treturn this._frame_range_locked;\n\t}\n\tset_frame_range(start_frame: number, end_frame: number) {\n\t\tthis._frame_range[0] = Math.floor(start_frame);\n\t\tthis._frame_range[1] = Math.floor(end_frame);\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_frame_range_locked(start_locked: boolean, end_locked: boolean) {\n\t\tthis._frame_range_locked[0] = start_locked;\n\t\tthis._frame_range_locked[1] = end_locked;\n\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\t// set_fps(fps: number) {\n\t// \tthis._fps = Math.floor(fps);\n\t// \tthis._frame_interval = 1000 / this._fps;\n\t// \tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t// }\n\tset_time(time: number, update_frame = true) {\n\t\tif (time != this._time) {\n\t\t\tthis._time = time;\n\n\t\t\tif (update_frame) {\n\t\t\t\tconst new_frame = Math.floor(this._time * FPS);\n\t\t\t\tthis._frame = new_frame;\n\t\t\t}\n\n\t\t\t// update time dependents\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.FRAME_UPDATED);\n\t\t\tthis.scene.uniforms_controller.update_time_dependent_uniform_owners();\n\n\t\t\t// we block updates here, so that dependent nodes only cook once\n\t\t\tthis.scene.cooker.block();\n\t\t\tthis.graph_node.set_successors_dirty();\n\t\t\tthis.scene.cooker.unblock();\n\t\t}\n\t}\n\n\tset_frame(frame: number, update_time = true) {\n\t\tif (frame != this._frame) {\n\t\t\tframe = this._ensure_frame_within_bounds(frame);\n\t\t\tif (frame != this._frame) {\n\t\t\t\tthis._frame = frame;\n\t\t\t\tif (update_time) {\n\t\t\t\t\tthis.set_time(this._frame / FPS, false);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time_if_playing() {\n\t\tif (this._playing) {\n\t\t\tif (!this.scene.root.are_children_cooking()) {\n\t\t\t\tthis.increment_time();\n\t\t\t}\n\t\t}\n\t}\n\tincrement_time() {\n\t\tconst performance_now = performance.now();\n\t\tconst delta = (performance_now - this._prev_performance_now) / 1000.0;\n\t\tconst new_time = this._time + delta;\n\t\tthis._prev_performance_now = performance_now;\n\t\tthis.set_time(new_time);\n\t}\n\n\t_ensure_frame_within_bounds(frame: number): number {\n\t\tif (this._frame_range_locked[0] && frame < this._frame_range[0]) {\n\t\t\treturn this._frame_range[1];\n\t\t}\n\t\tif (this._frame_range_locked[1] && frame > this._frame_range[1]) {\n\t\t\treturn this._frame_range[0];\n\t\t}\n\t\treturn frame;\n\t}\n\tget playing() {\n\t\treturn this._playing === true;\n\t}\n\tpause() {\n\t\tif (this._playing == true) {\n\t\t\tthis._playing = false;\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\tplay() {\n\t\tif (this._playing !== true) {\n\t\t\tthis._playing = true;\n\t\t\tthis._prev_performance_now = performance.now();\n\t\t\tthis.scene.dispatch_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t\t}\n\t}\n\ttoggle_play_pause() {\n\t\tif (this.playing) {\n\t\t\tthis.pause();\n\t\t} else {\n\t\t\tthis.play();\n\t\t}\n\t}\n}\n","export enum SceneEvent {\n\tFRAME_RANGE_UPDATED = 'scene_frame_range_updated',\n\tFRAME_UPDATED = 'scene_frame_updated',\n\tPLAY_STATE_UPDATED = 'scene_play_state_updated',\n}\n","import {PolyScene} from '../PolyScene';\nimport {NodeSerializer} from '../../../engine/nodes/utils/Serializer';\n\nexport class PolySceneSerializer {\n\tconstructor(private scene: PolyScene) {}\n\n\tto_json(include_node_param_components: boolean = false) {\n\t\tconst nodes_by_graph_node_id: Dictionary<object> = {};\n\t\tconst params_by_graph_node_id: Dictionary<object> = {};\n\n\t\tfor (let node of this.scene.nodes_controller.all_nodes()) {\n\t\t\tconst node_serializer = new NodeSerializer(node);\n\t\t\tnodes_by_graph_node_id[node.graph_node_id] = node_serializer.to_json(include_node_param_components);\n\n\t\t\tconst params = node.params.all; //lodash_compact(lodash_concat( lodash_values(node.params()), lodash_values(node.spare_params()) ));\n\t\t\tfor (let param of params) {\n\t\t\t\tparams_by_graph_node_id[param.graph_node_id] = param.to_json();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnodes_by_graph_node_id,\n\t\t\tparams_by_graph_node_id,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ntype IUniforms = Dictionary<IUniform>;\nexport interface IUniformsWithTime extends IUniforms {\n\ttime: IUniform;\n}\nexport interface IUniformsWithResolution extends IUniforms {\n\tresolution: {\n\t\tvalue: Vector2Like;\n\t};\n}\n\nexport class UniformsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _time_dependent_uniform_owners: Dictionary<IUniformsWithTime> = {}; //new Map()\n\tprivate _time_dependent_uniform_owners_ids: string[] | null = null;\n\n\tprivate _resolution: Vector2 = new Vector2(1, 1);\n\tprivate _resolution_dependent_uniform_owners: Dictionary<IUniformsWithResolution> = {};\n\tprivate _resolution_dependent_uniform_owners_ids: string[] = [];\n\n\t// time\n\tadd_time_dependent_uniform_owner(id: string, uniforms: IUniformsWithTime) {\n\t\tthis._time_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tremove_time_dependent_uniform_owner(id: string) {\n\t\tdelete this._time_dependent_uniform_owners[id];\n\t\tthis._update_time_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_time_dependent_uniform_owners_ids() {\n\t\tthis._time_dependent_uniform_owners_ids = Object.keys(this._time_dependent_uniform_owners);\n\t}\n\tpublic update_time_dependent_uniform_owners() {\n\t\tconst time = this.scene.time;\n\t\tif (this._time_dependent_uniform_owners_ids) {\n\t\t\tfor (let id of this._time_dependent_uniform_owners_ids) {\n\t\t\t\tconst uniforms = this._time_dependent_uniform_owners[id];\n\t\t\t\tuniforms.time.value = time;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolution\n\tadd_resolution_dependent_uniform_owner(id: string, uniforms: IUniformsWithResolution) {\n\t\tthis._resolution_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t\tif (this._resolution) {\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tremove_resolution_dependent_uniform_owner(id: string) {\n\t\tdelete this._resolution_dependent_uniform_owners[id];\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_resolution_dependent_uniform_owners_ids() {\n\t\tthis._resolution_dependent_uniform_owners_ids = Object.keys(this._resolution_dependent_uniform_owners);\n\t}\n\tupdate_resolution_dependent_uniform_owners(resolution: Vector2) {\n\t\tthis._resolution.copy(resolution);\n\t\tfor (let id of this._resolution_dependent_uniform_owners_ids) {\n\t\t\tconst uniforms = this._resolution_dependent_uniform_owners[id];\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tupdate_resolution_dependent_uniforms(uniforms: IUniformsWithResolution) {\n\t\tuniforms.resolution.value.x = this._resolution.x * window.devicePixelRatio;\n\t\tuniforms.resolution.value.y = this._resolution.y * window.devicePixelRatio;\n\t}\n}\n","import {POLY} from '../../Poly';\n\n// import {PolyScene} from '../PolyScene';\n\nexport class WebGLController {\n\tconstructor() {}\n\n\t_require_webgl2: boolean = false;\n\n\trequire_webgl2() {\n\t\treturn this._require_webgl2;\n\t}\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t\tPOLY.renderers_controller.set_require_webgl2();\n\t\t}\n\t}\n}\n","import {CopRegister} from './Cop';\nimport {EventRegister} from './Event';\nimport {GlRegister} from './Gl';\nimport {MatRegister} from './Mat';\nimport {ObjRegister} from './Obj';\nimport {SopRegister} from './Sop';\n\nimport {POLY} from '../../Poly';\n\nexport class AllRegister {\n\tstatic run() {\n\t\tCopRegister.run(POLY);\n\t\tEventRegister.run(POLY);\n\t\tGlRegister.run(POLY);\n\t\tMatRegister.run(POLY);\n\t\tObjRegister.run(POLY);\n\t\tSopRegister.run(POLY);\n\t}\n}\n","import {CATEGORY_COP} from './Category';\n\nimport {BuilderCopNode} from '../../nodes/cop/Builder';\nimport {EnvMapCopNode} from '../../nodes/cop/EnvMap';\nimport {FileCopNode} from '../../nodes/cop/File';\nimport {NullCopNode} from '../../nodes/cop/Null';\nimport {SwitchCopNode} from '../../nodes/cop/Switch';\n\nexport interface CopNodeChildrenMap {\n\tbuilder: BuilderCopNode;\n\tenv_map: EnvMapCopNode;\n\tfile: FileCopNode;\n\tnull: NullCopNode;\n\tswitch: SwitchCopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class CopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(BuilderCopNode, CATEGORY_COP.ADVANCED);\n\t\tpoly.register_node(EnvMapCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(FileCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(NullCopNode, CATEGORY_COP.MISC);\n\t\tpoly.register_node(SwitchCopNode, CATEGORY_COP.MISC);\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {RGBAFormat} from 'three/src/constants';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {NearestFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {HalfFloatType} from 'three/src/constants';\nimport {FloatType} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {ClampToEdgeWrapping} from 'three/src/constants';\nimport {Camera} from 'three/src/cameras/Camera';\n\n// import NodeBase from '../_Base'\n\n// import Container from '../../Container/Texture'\n// import {CoreImage} from '../../../Core/Image'\n\nimport {TypedCopNode} from './_Base';\n\n// import { GlobalsGeometryHandler } from \"src/Engine/Node/Gl/Assembler/Globals/Geometry\";\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerTexture} from '../gl/code/assemblers/textures/Texture';\n\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\n\nconst PASS_THROUGH_SHADER = `\nvoid main()\t{\n\tgl_Position = vec4( position, 1.0 );\n}\n`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreSleep} from '../../../core/Sleep';\nclass BuilderCopParamsConfig extends NodeParamsConfig {\n\tresolution = ParamConfig.VECTOR2([256, 256]);\n}\n\nconst ParamsConfig = new BuilderCopParamsConfig();\n\nexport class BuilderCopNode extends TypedCopNode<BuilderCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'builder';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<\n\t\tShaderAssemblerTexture\n\t> = this._create_assembler_controller();\n\n\tprivate _create_assembler_controller() {\n\t\tconst globals_handler = new GlobalsGeometryHandler();\n\t\tconst assembler_controller = new GlAssemblerController<ShaderAssemblerTexture>(this, ShaderAssemblerTexture);\n\t\tassembler_controller.set_assembler_globals_handler(globals_handler);\n\t\treturn assembler_controller;\n\t}\n\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tprivate _texture_mesh: Mesh = new Mesh(new PlaneBufferGeometry(2, 2));\n\tprivate _fragment_shader: string | undefined;\n\tprivate _uniforms: IUniforms | undefined;\n\tprivate _texture_material: ShaderMaterial = new ShaderMaterial({\n\t\tuniforms: {},\n\t\tvertexShader: PASS_THROUGH_SHADER,\n\t\tfragmentShader: '',\n\t});\n\tprivate _texture_scene: Scene = new Scene();\n\tprivate _texture_camera: Camera = new Camera();\n\tprivate _render_target: WebGLRenderTarget | undefined;\n\tprivate _renderer: WebGLRenderer | undefined;\n\tprivate _pixelBuffer: Float32Array | undefined;\n\t// private _assembler: ShaderAssemblerTexture;\n\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_node() {\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.children_controller?.init();\n\t\tthis._texture_mesh.material = this._texture_material;\n\t\tthis._texture_scene.add(this._texture_mesh);\n\t\tthis._texture_camera.position.z = 1;\n\n\t\t// this._init_common_shader_builder(ShaderAssemblerTexture, {\n\t\t// \thas_display_flag: true\n\t\t// });\n\t\t// this.set_inputs_count_to_zero();\n\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_reset_if_resolution_changed',\n\t\t\tthis._reset_if_resolution_changed.bind(this)\n\t\t);\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis._render_target = this._create_render_target();\n\t\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\t});\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tprivate _reset_if_resolution_changed(trigger?: CoreGraphNode) {\n\t\tif (trigger && trigger.graph_node_id == this.p.resolution.graph_node_id) {\n\t\t\tthis._reset();\n\t\t}\n\t}\n\tprivate _reset() {\n\t\tthis._render_target = this._create_render_target();\n\t\tthis._renderer = this._create_renderer(this._render_target);\n\t\tthis._pixelBuffer = this._create_pixel_buffer();\n\t}\n\tprivate _create_pixel_buffer() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\t\treturn new Float32Array(width * height * 4);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\t\t// await this.assembler_controller.assign_uniform_values();\n\n\t\tthis.render_on_target();\n\t}\n\n\tshaders_by_name() {\n\t\treturn {\n\t\t\tfragment: this._fragment_shader,\n\t\t};\n\t}\n\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\t// && !this.pv.locked){\n\t\t\t// this._texture_material = undefined;\n\t\t\tawait this.run_assembler();\n\t\t\t// const fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\t// const uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\t// if (fragment_shader && uniforms) {\n\t\t\t// \t// await this.eval_params(this._new_params);\n\t\t\t// \tthis._fragment_shader = fragment_shader;\n\t\t\t// \tthis._uniforms = uniforms;\n\t\t\t// } else {\n\t\t\t// \tthrow 'STOP';\n\t\t\t// }\n\t\t\tthis.assembler_controller.post_compile();\n\t\t}\n\t}\n\tprivate async run_assembler() {\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node allowed');\n\t\t\treturn;\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tthis.assembler_controller.assembler.set_root_nodes([output_node]);\n\n\t\t\t// main compilation\n\t\t\tawait this.assembler_controller.assembler.update_fragment_shader();\n\n\t\t\t// receives fragment and uniforms\n\t\t\tconst fragment_shader = this.assembler_controller.assembler.fragment_shader();\n\t\t\tconst uniforms = this.assembler_controller.assembler.uniforms();\n\t\t\tif (fragment_shader && uniforms) {\n\t\t\t\tthis._fragment_shader = fragment_shader;\n\t\t\t\tthis._uniforms = uniforms;\n\t\t\t}\n\n\t\t\t// TODO: remove this once the scene knows how to re-render\n\t\t\t// the render target if it is .uniforms_time_dependent()\n\t\t\tif (this.assembler_controller.assembler.uniforms_time_dependent()) {\n\t\t\t\tthis.states.time_dependent.force_time_dependent();\n\t\t\t} else {\n\t\t\t\tthis.states.time_dependent.unforce_time_dependent();\n\t\t\t}\n\t\t}\n\n\t\tif (this._fragment_shader && this._uniforms) {\n\t\t\tthis._texture_material.fragmentShader = this._fragment_shader;\n\t\t\tthis._texture_material.uniforms = this._uniforms;\n\t\t\tthis._texture_material.needsUpdate = true;\n\t\t\tthis._texture_material.uniforms.resolution = {\n\t\t\t\tvalue: this.pv.resolution,\n\t\t\t};\n\t\t}\n\n\t\t// this._compile_required = false;\n\t}\n\n\tprivate _create_renderer(render_target: WebGLRenderTarget) {\n\t\tconst renderer = new WebGLRenderer({antialias: true});\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\t\t// document.body.appendChild( renderer.domElement )\n\t\trenderer.autoClear = false;\n\n\t\trenderer.setRenderTarget(render_target);\n\n\t\treturn renderer;\n\t}\n\n\tasync render_on_target() {\n\t\tconst width = this.pv.resolution.x;\n\t\tconst height = this.pv.resolution.y;\n\n\t\t// var passThruUniforms = {\n\t\t// \tpassThruTexture: { value: null }\n\t\t// };\n\n\t\tif (!(this._renderer && this._render_target)) {\n\t\t\treturn;\n\t\t}\n\t\tthis._renderer.clear();\n\t\tthis._renderer.render(this._texture_scene, this._texture_camera);\n\t\t// renderer.setClearColor( 0x000000 ) // cancels the bg color\n\n\t\t//read the pixel\n\t\tthis._pixelBuffer = this._pixelBuffer || this._create_pixel_buffer();\n\t\tthis._renderer.readRenderTargetPixels(this._render_target, 0, 0, width, height, this._pixelBuffer);\n\n\t\t// renderer.setRenderTarget( null );\n\n\t\t// var pixelBuffer2 = new Uint8Array( width * height * 4 );\n\t\t// var pixelBuffer2 = Uint8Array.from(pixelBuffer)\n\n\t\t// be careful about the type FloatType\n\t\t// as this may require webgl extensions\n\t\t// see https://threejs.org/docs/#api/en/textures/DataTexture\n\t\tconst texture = new DataTexture(this._pixelBuffer, width, height, RGBAFormat, FloatType);\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// // texture.wrapS = ClampToEdgeWrapping\n\t\t// // texture.wrapT = ClampToEdgeWrapping\n\t\t// this._texture.needsUpdate = true;\n\n\t\tawait CoreSleep.sleep(2000);\n\n\t\tif (texture) {\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\n\t\t// this.set_texture(this._texture);\n\t\t// this.cook_controller.end_cook();\n\t}\n\n\tprivate _create_render_target() {\n\t\tconst wrapS = ClampToEdgeWrapping;\n\t\tconst wrapT = ClampToEdgeWrapping;\n\n\t\tconst minFilter = NearestFilter;\n\t\tconst magFilter = NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget(this.pv.resolution.x, this.pv.resolution.y, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: /(iPad|iPhone|iPod)/g.test(navigator.userAgent) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false,\n\t\t});\n\t\treturn renderTarget;\n\t}\n\n\t// create_material(fragment_shader:string, uniforms:IUniforms) {\n\t// \tvar material = new ShaderMaterial({\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: PASS_THROUGH_SHADER,\n\t// \t\tfragmentShader: fragment_shader\n\t// \t});\n\n\t// \t// addResolutionDefine( material );\n\n\t// \treturn material;\n\t// }\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class TextureContainer extends TypedContainer<ContainableMap['TEXTURE']> {\n\t// _content: Texture;\n\tset_content(content: ContainableMap['TEXTURE']) {\n\t\tsuper.set_content(content);\n\t}\n\n\t// set_texture(texture: Texture){\n\t// \tif (this._content != null) {\n\t// \t\tthis._content.dispose();\n\t// \t}\n\t// \tthis.set_content(texture);\n\t// }\n\ttexture(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content_cloned(): ContainableMap['TEXTURE'] | undefined {\n\t\tconsole.log('clone', this._content);\n\t\tconst texture = this._content?.clone();\n\t\tif (texture) {\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t\treturn texture;\n\t}\n\n\tobject() {\n\t\treturn this.texture();\n\t}\n\n\tinfos() {\n\t\tif (this._content != null) {\n\t\t\treturn [this._content];\n\t\t}\n\t}\n\tresolution(): [number, number] {\n\t\tif (this._content) {\n\t\t\tif (this._content.image) {\n\t\t\t\treturn [this._content.image.width, this._content.image.height];\n\t\t\t}\n\t\t}\n\t\treturn [-1, -1];\n\t}\n}\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\n// export interface BypassOptions {\n// \thas_bypass_flag?: boolean;\n// }\n\nexport class BypassFlag extends BaseFlag {\n\tprotected _state: boolean = false;\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n\t\tthis.node.set_dirty();\n\t}\n}\n\n// export function Bypass<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\t_has_bypass_flag: boolean = true;\n// \t\t_bypass_flag: boolean = false;\n\n// \t\t_init_bypass_flag(options: BypassOptions = {}) {\n// \t\t\tif (options['has_bypass_flag'] == null) {\n// \t\t\t\toptions['has_bypass_flag'] = true;\n// \t\t\t}\n\n// \t\t\tthis._has_bypass_flag = options['has_bypass_flag'];\n// \t\t\tthis._bypass_flag = false;\n// \t\t}\n\n// \t\thas_bypass_flag(): boolean {\n// \t\t\treturn this._has_bypass_flag;\n// \t\t}\n\n// \t\tis_bypassed(): boolean {\n// \t\t\treturn this._bypass_flag;\n// \t\t}\n\n// \t\tset_bypass_flag(state: boolean) {\n// \t\t\tif (state == null) {\n// \t\t\t\tstate = true;\n// \t\t\t}\n// \t\t\tif (state !== this._bypass_flag) {\n// \t\t\t\tthis._bypass_flag = state;\n// \t\t\t\tthis.self.emit('bypass_flag_update');\n// \t\t\t\tthis.self.set_dirty();\n// \t\t\t\t// this.post_set_bypass_flag()\n// \t\t\t}\n// \t\t}\n\n// \t\t// post_process_container_request_as_bypassed(input_node: BaseNode){}\n// \t\t// post_set_bypass_flag(){}\n\n// \t\ttoggle_bypass_flag() {\n// \t\t\tthis.set_bypass_flag(!this.is_bypassed());\n// \t\t}\n// \t};\n// }\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from '../../../poly/NodeEvent';\n\nexport class DisplayFlag extends BaseFlag {\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n\t\t// this.node.set_dirty();\n\t}\n}\n","import {ParamTypeToConnectionPointTypeMap} from '../../utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../_Base';\nimport {BaseNamedConnectionPointType, TypedNamedConnectionPoint} from '../../utils/connections/NamedConnectionPoint';\n// import {ParamValue} from '../../../params/types/ParamValue';\nimport {ParamType} from '../../../poly/ParamType';\n// import {ParamValueToDefaultConverter} from '../../utils/params/ParamValueToDefaultConverter';\n// import {NodeEvent} from '../../../poly/NodeEvent';\nimport {ParamsUpdateOptions} from '../../utils/params/ParamsController';\n// import {ParamInitValueSerializedTypeMap} from '../../../params/types/ParamInitValueSerializedTypeMap';\nimport {ParamInitValueSerialized} from '../../../params/types/ParamInitValueSerialized';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\n\nexport class GlNodeSpareParamsController {\n\tprivate _allow_inputs_created_from_params: boolean = true;\n\tprivate _inputless_param_names: string[] | undefined;\n\tconstructor(private node: BaseGlNodeType) {}\n\n\tdisallow_inputs_created_from_params() {\n\t\tthis._allow_inputs_created_from_params = false;\n\t}\n\n\tinitialize_node() {\n\t\tthis.node.params.set_post_create_params_hook(this.create_inputs_from_params.bind(this));\n\t}\n\n\tcreate_inputs_from_params() {\n\t\tif (!this._allow_inputs_created_from_params) {\n\t\t\treturn;\n\t\t}\n\t\tconst connections: BaseNamedConnectionPointType[] = [];\n\t\tfor (let param_name of this.node.params.names) {\n\t\t\tlet add_input = true;\n\t\t\tif (\n\t\t\t\tthis._inputless_param_names &&\n\t\t\t\tthis._inputless_param_names.length > 0 &&\n\t\t\t\tthis._inputless_param_names.includes(param_name)\n\t\t\t) {\n\t\t\t\tadd_input = false;\n\t\t\t}\n\t\t\tif (add_input) {\n\t\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\t\tif (param && !param.parent_param) {\n\t\t\t\t\t\tconst connection_type = ParamTypeToConnectionPointTypeMap[param.type];\n\t\t\t\t\t\tif (connection_type) {\n\t\t\t\t\t\t\tconst connection = new TypedNamedConnectionPoint(param.name, connection_type);\n\t\t\t\t\t\t\tconnections.push(connection);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.node.io.inputs.set_named_input_connection_points(connections);\n\t}\n\n\tset_inputless_param_names(names: string[]) {\n\t\treturn (this._inputless_param_names = names);\n\t}\n\n\tcreate_spare_parameters() {\n\t\tconst raw_input_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst default_value_serialized_by_param_name: Map<string, ParamInitValueSerialized> = new Map();\n\t\tconst current_param_names: string[] = this.node.params.spare_names;\n\t\tconst params_update_options: ParamsUpdateOptions = {};\n\n\t\tfor (let param_name of current_param_names) {\n\t\t\tif (this.node.params.has(param_name)) {\n\t\t\t\tconst param = this.node.params.get(param_name);\n\t\t\t\tif (param) {\n\t\t\t\t\traw_input_serialized_by_param_name.set(param_name, param.raw_input_serialized);\n\t\t\t\t\tdefault_value_serialized_by_param_name.set(param_name, param.default_value_serialized);\n\t\t\t\t\tparams_update_options.names_to_delete = params_update_options.names_to_delete || [];\n\t\t\t\t\tparams_update_options.names_to_delete.push(param_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tfor (let connection_point of this.node.io.inputs.named_input_connection_points) {\n\t\t\tconst param_name = connection_point.name;\n\t\t\tconst param_type: ParamType = connection_point.param_type;\n\t\t\tlet init_value = connection_point.init_value;\n\t\t\t// let raw_input: ParamInitValueSerialized= null\n\n\t\t\t// const raw_input = raw_input_serialized_by_param_name.get(param_name);\n\t\t\tconst last_param_init_value = default_value_serialized_by_param_name.get(param_name);\n\t\t\t// if (last_param_raw_input != null && last_param_init_value != null) {\n\t\t\t// init_value = ParamValueToDefaultConverter.from_value(param_type, last_param_raw_input);\n\t\t\t// if (init_value == null) {\n\t\t\tconst default_value_from_name = this.node.gl_input_default_value(param_name);\n\n\t\t\t// TODO: this should really store the largest set value\n\t\t\t// (as in the ones with the most components)\n\t\t\t// so that for an Add Gl Node, if I set a vec4 to [1,2,3,4]\n\t\t\t// and then set an input type, which will transform the param to a float\n\t\t\t// it will have a value of 1.\n\t\t\t// But if I then set it to a vec4 again, it will remember [1,2,3,4]\n\t\t\tif (default_value_from_name != null) {\n\t\t\t\tinit_value = default_value_from_name;\n\t\t\t} else {\n\t\t\t\tif (last_param_init_value != null) {\n\t\t\t\t\tinit_value = last_param_init_value;\n\t\t\t\t} else {\n\t\t\t\t\tinit_value = connection_point.init_value;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (lodash_isArray(connection_point.init_value) && lodash_isNumber(init_value)) {\n\t\t\t\tconst array = new Array(connection_point.init_value.length) as Number2;\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] = init_value;\n\t\t\t\t}\n\t\t\t\tinit_value = array;\n\t\t\t}\n\n\t\t\tif (init_value != null) {\n\t\t\t\tparams_update_options.to_add = params_update_options.to_add || [];\n\t\t\t\tparams_update_options.to_add.push({\n\t\t\t\t\tname: param_name,\n\t\t\t\t\ttype: param_type,\n\t\t\t\t\tinit_value: lodash_clone(init_value as any),\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tspare: true,\n\t\t\t\t\t},\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\tif (!this.node.scene.loading_controller.is_loading) {\n\t\t\tthis.node.params.update_params(params_update_options);\n\n\t\t\tfor (let spare_param of this.node.params.spare) {\n\t\t\t\tif (!spare_param.parent_param) {\n\t\t\t\t\tconst raw_input = raw_input_serialized_by_param_name.get(spare_param.name);\n\t\t\t\t\tif (raw_input) {\n\t\t\t\t\t\tspare_param.set(raw_input as any);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from '../../../nodes/_Base';\nimport {SceneJsonExporter} from './Scene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {NodeContext} from '../../../poly/NodeContext';\nimport {JsonExportDispatcher} from './Dispatcher';\nimport {ParamJsonExporterData} from './Param';\nimport {ParamType} from '../../../poly/ParamType';\n\ninterface NamedInputData {\n\tname: string;\n\tnode: string;\n\toutput: string;\n}\ntype IndexedInputData = string | null;\nexport type InputData = NamedInputData | IndexedInputData;\n\ninterface FlagsData {\n\tbypass?: boolean;\n\tdisplay?: boolean;\n}\n\nexport interface NodeJsonExporterData {\n\ttype: string;\n\tnodes: Dictionary<NodeJsonExporterData>;\n\tchildren_context: NodeContext;\n\tparams?: Dictionary<ParamJsonExporterData<ParamType>>;\n\tinputs?: InputData[];\n\tselection?: string[];\n\tflags?: FlagsData;\n\toverride_clonable_state: boolean;\n}\n\nexport interface NodeJsonExporterUIData {\n\tpos?: Number2;\n\tcomment?: string;\n\tnodes: Dictionary<NodeJsonExporterUIData>;\n}\n\nexport class NodeJsonExporter<T extends BaseNodeType> {\n\tprivate _data: NodeJsonExporterData | undefined; // = {} as NodeJsonExporterData;\n\tconstructor(protected _node: T) {}\n\n\tdata(): NodeJsonExporterData {\n\t\tif (!this.is_root()) {\n\t\t\tthis._node.scene.nodes_controller.register_node_context_signature(this._node);\n\t\t}\n\t\tthis._data = {\n\t\t\ttype: this._node.type,\n\t\t} as NodeJsonExporterData;\n\n\t\t// const required_imports = this._node.required_imports()\n\t\t// if(required_imports){\n\t\t// \tthis._data['required_imports'] = required_imports\n\t\t// }\n\n\t\tconst nodes_data = this.nodes_data();\n\t\tif (Object.keys(nodes_data).length > 0) {\n\t\t\tthis._data['nodes'] = nodes_data;\n\n\t\t\t// required by the Store::Scene::Exporter.rb\n\t\t\tconst context = this._node.children_controller?.context;\n\t\t\tif (context) {\n\t\t\t\tthis._data['children_context'] = context;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is_root()) {\n\t\t\tthis._data['params'] = this.params_data();\n\t\t\t//data['custom'] = []\n\t\t\tthis._data['inputs'] = this.inputs_data();\n\t\t}\n\n\t\t// TODO: does that create flags automatically? it should not\n\t\tif (this._node.flags) {\n\t\t\tthis._data['flags'] = {};\n\t\t\tif (this._node.flags.has_bypass()) {\n\t\t\t\tif (this._node.flags.bypass?.active) {\n\t\t\t\t\tthis._data['flags']['bypass'] = this._node.flags.bypass.active;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._node.flags.has_display()) {\n\t\t\t\tthis._data['flags']['display'] = this._node.flags.display?.active;\n\t\t\t}\n\t\t}\n\n\t\tif (this._node.children_allowed()) {\n\t\t\tconst selection = this._node.children_controller?.selection;\n\t\t\tif (selection && this._node.children().length > 0) {\n\t\t\t\t// only save the nodes that are still present, in case the selection just got deleted\n\t\t\t\tconst selected_children: BaseNodeType[] = [];\n\t\t\t\tconst selected_ids: Dictionary<boolean> = {};\n\t\t\t\tfor (let selected_node of selection.nodes()) {\n\t\t\t\t\tselected_ids[selected_node.graph_node_id] = true;\n\t\t\t\t}\n\t\t\t\tfor (let child of this._node.children()) {\n\t\t\t\t\tif (child.graph_node_id in selected_ids) {\n\t\t\t\t\t\tselected_children.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data['selection'] = selected_children.map((n) => n.name);\n\t\t\t}\n\t\t}\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = this._node.io.inputs.override_clonable_state();\n\t\t\tif (override) {\n\t\t\t\tthis._data['override_clonable_state'] = override;\n\t\t\t}\n\t\t}\n\n\t\t// custom\n\t\tthis.add_custom();\n\n\t\treturn this._data;\n\t}\n\n\tui_data(): NodeJsonExporterUIData {\n\t\tconst data: NodeJsonExporterUIData = {} as NodeJsonExporterUIData;\n\t\tif (!this.is_root()) {\n\t\t\tconst ui_data = this._node.ui_data;\n\t\t\tdata['pos'] = ui_data.position.toArray() as Number2;\n\t\t\tconst comment = ui_data.comment;\n\t\t\tif (comment) {\n\t\t\t\tdata['comment'] = SceneJsonExporter.sanitize_string(comment);\n\t\t\t}\n\t\t}\n\t\tconst children = this._node.children();\n\t\tif (children.length > 0) {\n\t\t\tdata['nodes'] = {};\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tdata['nodes'][child.name] = node_exporter.ui_data();\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate is_root() {\n\t\treturn this._node.parent === null && this._node.graph_node_id == this._node.root.graph_node_id;\n\t}\n\n\tprotected inputs_data() {\n\t\tconst data: InputData[] = [];\n\t\t// Object.keys(this._node.io.inputs.inputs()).forEach((input_index) => {\n\t\tthis._node.io.inputs.inputs().forEach((input, input_index) => {\n\t\t\t// const input = this._node.io.inputs.input(input_index);\n\t\t\tif (input) {\n\t\t\t\t// const connection_point = this._node.io.inputs.named_input_connection_points;\n\t\t\t\tconst connection = this._node.io.connections.input_connection(input_index)!;\n\t\t\t\tif (this._node.io.inputs.has_named_inputs) {\n\t\t\t\t\tconst input_name = this._node.io.inputs.named_input_connection_points[input_index].name;\n\t\t\t\t\t// const output_index = input_connections[input_index].output_index();\n\t\t\t\t\tconst output_index = connection.output_index;\n\t\t\t\t\tconst output_name = input.io.outputs.named_output_connection_points[output_index].name;\n\t\t\t\t\tdata.push({name: input_name, node: input.name, output: output_name});\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(input.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tprotected params_data() {\n\t\tconst data: Dictionary<ParamJsonExporterData<ParamType>> = {};\n\n\t\tfor (let param_name of this._node.params.names) {\n\t\t\tconst param = this._node.params.get(param_name);\n\t\t\tif (param && !param.parent_param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tdata[param.name] = params_data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprotected nodes_data() {\n\t\tconst data: Dictionary<NodeJsonExporterData> = {};\n\t\tfor (let child of this._node.children()) {\n\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.json_exporter()\n\t\t\tdata[child.name] = node_exporter.data();\n\t\t}\n\t\treturn data;\n\t}\n\n\tprotected add_custom() {}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {TypedNumericParam} from '../../../../params/_Numeric';\nimport {ParamType} from '../../../../poly/ParamType';\n\nexport class ParamNumericJsonExporter extends ParamJsonExporter<TypedNumericParam<ParamType>> {\n\tadd_main() {\n\t\t// if (this._param.has_expression() && this._param.expression_controller?.expression) {\n\t\t// \t// const escaped_expression = this._param.expression().replace(/'/g, \"\\\\'\");\n\t\t// \tthis._data['expression'] = this._param.expression_controller?.expression;\n\t\t// } else {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t\t// }\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\nimport {SceneJsonExporter} from '../Scene';\n\nexport class ParamOperatorPathJsonExporter extends ParamJsonExporter<OperatorPathParam> {\n\tadd_main() {\n\t\tlet val = this._param.raw_input;\n\t\t// val = val.replace(/'/g, \"\\\\'\");\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","// import lodash_isString from 'lodash/isString'\nimport {ParamJsonExporter} from '../Param';\nimport {SceneJsonExporter} from '../Scene';\nimport {StringParam} from '../../../../params/String';\n\nexport class ParamStringJsonExporter extends ParamJsonExporter<StringParam> {\n\tadd_main() {\n\t\t// let val = this._param.input_value();\n\t\tlet val = this._param.raw_input;\n\t\t// if (lodash_isString(val)){\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\t\t// }\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {RampParam} from '../../../../params/Ramp';\n\nexport class ParamRampJsonExporter extends ParamJsonExporter<RampParam> {\n\tadd_main() {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\nimport {IUniforms} from '../../../../../../core/geometry/Material';\n// import {GlobalsTextureHandler} from '../../../../../Engine/Node/Gl/Assembler/Globals/Texture'\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport TemplateDefault from '../../templates/textures/Default.frag.glsl';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {IUniformsWithTime} from '../../../../../scene/utils/UniformsController';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\n// import {BaseGlNodeType} from '../../../_Base';\n\nexport class ShaderAssemblerTexture extends BaseGlShaderAssembler {\n\tprivate _uniforms: IUniforms | undefined;\n\n\tget _template_shader() {\n\t\treturn {\n\t\t\tfragmentShader: TemplateDefault,\n\t\t\tvertexShader: undefined,\n\t\t\tuniforms: undefined,\n\t\t};\n\t}\n\n\t// async compile() {\n\t// \tawait this.update_fragment_shader();\n\t// }\n\n\tfragment_shader() {\n\t\treturn this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tuniforms() {\n\t\treturn this._uniforms;\n\t}\n\t// _create_material() {\n\t// \treturn undefined;\n\t// }\n\n\tasync update_fragment_shader() {\n\t\tthis._lines = new Map();\n\t\tthis._shaders_by_name = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\tconst template = this._template_shader.fragmentShader;\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\n\t\tthis._uniforms = this._uniforms || {};\n\t\tthis.add_uniforms(this._uniforms);\n\t\t// const new_uniforms = this.build_uniforms({}, this._uniforms || {});\n\t\t// this._uniforms = new_uniforms;\n\t\t// this._uniforms = this._uniforms || {};\n\t\t// for (let uniform_name of Object.keys(new_uniforms)) {\n\t\t// \tthis._uniforms[uniform_name] = new_uniforms[uniform_name];\n\t\t// }\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\n\t\t// That's actually useless, since this doesn't make the texture recook\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst id = this._gl_parent_node.graph_node_id;\n\t\tif (this.uniforms_time_dependent()) {\n\t\t\tif (this._uniforms) {\n\t\t\t\tscene.uniforms_controller.add_time_dependent_uniform_owner(id, this._uniforms as IUniformsWithTime);\n\t\t\t}\n\t\t} else {\n\t\t\tscene.uniforms_controller.remove_time_dependent_uniform_owner(id);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t\t// new Connection.Vec2('resolution'),\n\t\t]);\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn [new ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [])];\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t\tdefault: '1.0',\n\t\t\t}),\n\t\t];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == 'fragment') {\n\t\t\tbody_lines.push(`vec2 ${var_name} = vec2(gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y)`);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\t// add_export_body_line(\n\t// \texport_node: BaseGlNodeType,\n\t// \tshader_name: ShaderName,\n\t// \tinput_name: string,\n\t// \tinput: BaseGlNodeType,\n\t// \tvariable_name: string\n\t// ) {\n\t// \t// let input\n\t// \t// let variable_name\n\t// \t// if(export_node.type() == 'output'){\n\t// \t// \tinput = export_node.named_input(input_name)\n\t// \t// \tvariable_name = input_name\n\t// \t// } else {\n\t// \t// \t// if attribute\n\t// \t// \tinput = export_node.connected_named_input()\n\t// \t// \tvariable_name = export_node.attribute_name()\n\t// \t// }\n\n\t// \tif (input) {\n\t// \t\tconst var_input = export_node.variable_for_input(input_name);\n\t// \t\tconst new_var = ThreeToGl.vector3(var_input);\n\t// \t\tif (new_var) {\n\t// \t\t\t// const texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\t\t// \texport_node,\n\t// \t\t\t// \tshader_name,\n\t// \t\t\t// \tvariable_name\n\t// \t\t\t// )\n\t// \t\t\tconst texture_variable = this._texture_allocations_controller.variable(variable_name);\n\t// \t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t// \t\t\tif (texture_variable.allocation().shader_name() == shader_name) {\n\t// \t\t\t\tconst component = texture_variable.component();\n\n\t// \t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t// \t\t\t\texport_node.add_body_lines([line], shader_name);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\t// add_import_body_line(\n\t// \timport_node: BaseNodeGl,\n\t// \tshader_name: ShaderName,\n\t// \toutput_name: string,\n\t// \tvariable_name: string\n\t// \t){\n\t// \t\tthrow \"not sure I want to use this method anymore\"\n\t// \tconst named_output = import_node.named_output_by_name(output_name)\n\t// \tconst gl_type = named_output.gl_type()\n\n\t// \tconst map_name = `texture_${shader_name}`\n\t// \tconst definition = new Definition.Uniform(import_node, 'sampler2D', map_name)\n\t// \t// definitions_by_shader_name[import_node._shader_name].push(definition)\n\t// \timport_node.add_definitions([definition])\n\n\t// \tconst var_name = import_node.gl_var_name(output_name)\n\n\t// \tconst texture_variable = this._texture_allocations_controller.find_variable(\n\t// \t\timport_node,\n\t// \t\tshader_name,\n\t// \t\tvariable_name\n\t// \t)\n\t// \tif(!texture_variable){\n\t// \t\tthis._texture_allocations_controller.print(this._gl_parent_node.scene())\n\t// \t}\n\t// \tconst component = texture_variable.component()\n\t// \tconst lines = [\n\t// \t\t`${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).${component}`,\n\t// \t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t]\n\t// \timport_node.add_body_lines(lines, shader_name)\n\t// }\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst input_names = this.input_names_for_shader_name(\n\t\t\toutput_node,\n\t\t\tshaders_collection_controller.current_shader_name\n\t\t);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst gl_var = output_node.variable_for_input(input_name);\n\n\t\t\t\t\tlet body_line: string | undefined;\n\t\t\t\t\tif (input_name == 'color') {\n\t\t\t\t\t\tbody_line = `diffuseColor.xyz = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (input_name == 'alpha') {\n\t\t\t\t\t\tbody_line = `diffuseColor.a = ${ThreeToGl.any(gl_var)}`;\n\t\t\t\t\t}\n\t\t\t\t\tif (body_line) {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [body_line]);\n\t\t\t\t\t}\n\t\t\t\t\t// this.add_export_body_line(\n\t\t\t\t\t// \toutput_node,\n\t\t\t\t\t// \tshaders_collection_controller.current_shader_name,\n\t\t\t\t\t// \tinput_name,\n\t\t\t\t\t// \tinput,\n\t\t\t\t\t// \tvariable_name\n\t\t\t\t\t// \t)\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// set_node_lines_attribute(attribute_node: Attribute, shader_name: ShaderName){\n\n\t// \tif(attribute_node.is_importing()){\n\t// \t\tconst gl_type = attribute_node.gl_type()\n\t// \t\tconst attribute_name = attribute_node.attribute_name()\n\t// \t\tconst new_value = this.globals_handler().read_attribute(\n\t// \t\t\tattribute_node,\n\t// \t\t\tgl_type,\n\t// \t\t\tattribute_name,\n\t// \t\t\tshader_name\n\t// \t\t\t)\n\t// \t\tconst var_name = attribute_node.gl_var_name(Attribute.output_name())\n\t// \t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`\n\t// \t\tattribute_node.add_body_lines([body_line])\n\n\t// \t\t// re-export to ensure it is available on next frame\n\t// \t\tconst texture_variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\tif(texture_variable.allocation().shader_name() == shader_name){\n\n\t// \t\t\tconst variable = this._texture_allocations_controller.variable(attribute_name)\n\t// \t\t\tconst component = variable.component()\n\t// \t\t\tattribute_node.add_body_lines([\n\t// \t\t\t\t`gl_FragColor.${component} = ${var_name}`\n\t// \t\t\t])\n\t// \t\t}\n\n\t// \t\t// this.add_import_body_line(\n\t// \t\t// \tattribute_node,\n\t// \t\t// \tshader_name,\n\t// \t\t// \tAttribute.output_name(),\n\t// \t\t// \tattribute_node.attribute_name()\n\t// \t\t// \t)\n\t// \t}\n\t// \tif(attribute_node.is_exporting()){\n\t// \t\tconst input = attribute_node.connected_named_input()\n\t// \t\tconst variable_name = attribute_node.attribute_name()\n\n\t// \t\tthis.add_export_body_line(\n\t// \t\t\tattribute_node,\n\t// \t\t\tshader_name,\n\t// \t\t\tAttribute.input_name(),\n\t// \t\t\tinput,\n\t// \t\t\tvariable_name\n\t// \t\t\t)\n\t// \t}\n\t// }\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst body_lines: string[] = [];\n\t\tconst definitions: UniformGLDefinition[] = [];\n\n\t\t// const shader_config = this.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\t// const globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tdefinitions.push(new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name));\n\t\t\t\t\t// vertex_definitions.push(definition)\n\t\t\t\t\t// fragment_definitions.push(definition)\n\t\t\t\t\t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t\tbody_lines.push(`float ${var_name} = ${output_name}`);\n\t\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t\t// }\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\t// body_lines.push(body_line)\n\t\t\t\t\tthis.set_uniforms_time_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\t\t\t\t// default:\n\t\t\t\t// \t// this.add_import_body_line(globals_node, shader_name, output_name, output_name)\n\t\t\t\t// \tconst named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// \tconst gl_type = named_output.gl_type()\n\n\t\t\t\t// \tconst attrib_read = this.globals_handler().read_attribute(\n\t\t\t\t// \t\tglobals_node,\n\t\t\t\t// \t\tgl_type,\n\t\t\t\t// \t\toutput_name,\n\t\t\t\t// \t\tshader_name\n\t\t\t\t// \t)\n\t\t\t\t// \tbody_line = `${gl_type} ${var_name} = ${attrib_read}`\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// \t//\n\n\t\t\t\t// \t// const map_name = `texture_${output_name}`\n\t\t\t\t// \t// definition = new Definition.Uniform(globals_node, 'sampler2D', map_name)\n\t\t\t\t// \t// definitions_by_shader_name[globals_node._shader_name].push(definition)\n\n\t\t\t\t// \t// body_line = `${gl_type} ${var_name} = texture2D( ${map_name}, particleUV ).xyz`\n\n\t\t\t\t// \t// // // if(dependencies.length == 0){\n\t\t\t\t// \t// body_lines.push(body_line)\n\t\t\t\t// \t// }\n\t\t\t}\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tglobals_node.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tglobals_node.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// globals_node.add_body_lines(body_lines)\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport {BaseGlNodeType} from '../../_Base';\nimport {TypedNodeTraverser} from '../../../utils/shaders/NodeTraverser';\nimport {BaseNodeType} from '../../../_Base';\nimport {BaseGlShaderAssembler} from '../assemblers/_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {GLDefinitionType, BaseGLDefinition} from '../../utils/GLDefinition';\nimport {TypedGLDefinitionCollection} from '../../utils/GLDefinitionCollection';\nimport {ParamConfigsController} from '../../../../nodes/utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './ShadersCollectionController';\nimport {CodeFormatter} from './CodeFormatter';\n\nimport {LineType} from './LineType';\n\nexport class CodeBuilder {\n\t_param_configs_controller: ParamConfigsController = new ParamConfigsController();\n\t_param_configs_set_allowed: boolean = true;\n\n\tprivate _shaders_collection_controller: ShadersCollectionController | undefined;\n\t_lines: Map<ShaderName, Map<LineType, string[]>> = new Map();\n\t_function_declared: Map<ShaderName, Map<string, boolean>> = new Map();\n\n\tconstructor(private _assembler: BaseGlShaderAssembler, private _gl_parent_node: BaseNodeType) {}\n\n\tasync build_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this._assembler, this._gl_parent_node);\n\t\tnode_traverser.traverse(root_nodes);\n\n\t\tconst nodes_by_shader_name: Map<ShaderName, BaseGlNodeType[]> = new Map();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tnodes_by_shader_name.set(shader_name, node_traverser.nodes_for_shader_name(shader_name));\n\t\t}\n\t\tconst sorted_nodes = node_traverser.sorted_nodes();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst root_nodes_for_shader = this._assembler.root_nodes_by_shader_name(shader_name);\n\t\t\t// const leaf_nodes_for_shader = this._assembler.leaf_nodes_by_shader_name(shader_name);\n\n\t\t\t// keep track of which nodes are both leaf and root, and do not use their code twice\n\t\t\t// as this may happen with an attribute node, when used as both import and export\n\t\t\t// TODO: that seems useless, as I surely should be able to filter duplicates if needed\n\n\t\t\t// ensure nodes are unique\n\t\t\t// const node_ids: Map<string, boolean> = new Map();\n\t\t\t// nodes_by_shader_name.forEach((nodes, shader_name) => {\n\t\t\t// \tfor (let node of nodes) {\n\t\t\t// \t\tnode_ids.set(node.graph_node_id, true);\n\t\t\t// \t}\n\t\t\t// });\n\n\t\t\tfor (let root_node of root_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[root_node.graph_node_id()]){\n\t\t\t\t// if (!node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tMapUtils.push_on_array_at_entry(nodes_by_shader_name, shader_name, root_node);\n\t\t\t\t// node_ids.set(root_node.graph_node_id, true);\n\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t}\n\t\t\t// for (let leaf_node of leaf_nodes_for_shader) {\n\t\t\t// if(!both_leaf_and_root_nodes_by_id[leaf_node.graph_node_id()]){\n\t\t\t// if (!node_ids.get(leaf_node.graph_node_id)) {\n\t\t\t// MapUtils.unshift_on_array_at_entry(nodes_by_shader_name, shader_name, leaf_node);\n\t\t\t// }\n\t\t\t// }\n\t\t\t// }\n\t\t}\n\n\t\t// ensure nodes are not added if already present\n\t\tconst sorted_node_ids: Map<string, boolean> = new Map();\n\t\tfor (let node of sorted_nodes) {\n\t\t\tsorted_node_ids.set(node.graph_node_id, true);\n\t\t}\n\n\t\tfor (let root_node of root_nodes) {\n\t\t\tif (!sorted_node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tsorted_nodes.push(root_node);\n\t\t\t\tsorted_node_ids.set(root_node.graph_node_id, true);\n\t\t\t}\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\t// node.set_assembler(this._assembler);\n\t\t\tnode.reset_code();\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\t// const param_promises = sorted_nodes.map(node=>{\n\t\t// \treturn node.eval_all_params()\n\t\t// })\n\t\t// await Promise.all(param_promises)\n\n\t\tthis._shaders_collection_controller = new ShadersCollectionController(\n\t\t\tthis.shader_names(),\n\t\t\tthis.shader_names()[0]\n\t\t);\n\t\tthis.reset();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst nodes = lodash_uniq(nodes_by_shader_name.get(shader_name));\n\t\t\tthis._shaders_collection_controller.set_current_shader_name(shader_name);\n\t\t\tif (nodes) {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\t// node.set_shader_name(shader_name);\n\t\t\t\t\tif (this._param_configs_set_allowed) {\n\t\t\t\t\t\tnode.set_param_configs();\n\t\t\t\t\t}\n\t\t\t\t\tnode.set_lines(this._shaders_collection_controller);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// fragment_nodes.forEach(node=>{\n\t\t// \tnode.set_shader_name(ShaderName.FRAGMENT)\n\t\t// \tnode.set_param_configs()\n\t\t// \tnode.set_lines()\n\t\t// })\n\t\tif (this._param_configs_set_allowed) {\n\t\t\tthis.set_param_configs(sorted_nodes);\n\t\t}\n\t\tthis.set_code_lines(sorted_nodes);\n\t}\n\n\tdisallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = false;\n\t}\n\tallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = true;\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\n\tprivate reset() {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst lines_map = new Map();\n\t\t\t// for (let line_type of LINE_TYPES) {\n\t\t\t// \tlines_map.set(line_type, []);\n\t\t\t// }\n\t\t\tthis._lines.set(shader_name, lines_map);\n\t\t\tthis._function_declared.set(shader_name, new Map());\n\t\t}\n\t}\n\n\tparam_configs() {\n\t\treturn this._param_configs_controller.list || [];\n\t}\n\tlines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this._lines.get(shader_name)!.get(line_type);\n\t}\n\tall_lines() {\n\t\treturn this._lines;\n\t}\n\n\tset_param_configs(nodes: BaseGlNodeType[]) {\n\t\tthis._param_configs_controller.reset();\n\t\tfor (let node of nodes) {\n\t\t\tconst param_configs = node.param_configs();\n\t\t\tif (param_configs) {\n\t\t\t\tfor (let param_config of param_configs) {\n\t\t\t\t\tthis._param_configs_controller.push(param_config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_code_lines(nodes: BaseGlNodeType[]) {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\t// nodes.forEach((node, i)=>{\n\t\t\tthis.add_code_lines(nodes, shader_name);\n\t\t\t// })\n\t\t}\n\t}\n\n\tadd_code_lines(nodes: BaseGlNodeType[], shader_name: ShaderName) {\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.FUNCTION, LineType.FUNCTION_DECLARATION);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.UNIFORM, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.VARYING, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.ATTRIBUTE, LineType.DEFINE);\n\n\t\tthis.add_code_line_for_nodes_and_line_type(nodes, shader_name, LineType.BODY);\n\t}\n\n\tprivate add_definitions(\n\t\tnodes: BaseGlNodeType[],\n\t\tshader_name: ShaderName,\n\t\tdefinition_type: GLDefinitionType,\n\t\tline_type: LineType\n\t) {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst definitions = [];\n\t\tfor (let node of nodes) {\n\t\t\tlet node_definitions = this._shaders_collection_controller.definitions(shader_name, node);\n\t\t\tif (node_definitions) {\n\t\t\t\tnode_definitions = node_definitions.filter((d) => d.definition_type == definition_type);\n\t\t\t\tfor (let definition of node_definitions) {\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (definitions.length > 0) {\n\t\t\tconst collection = new TypedGLDefinitionCollection<GLDefinitionType>(definitions);\n\t\t\tconst uniq_definitions = collection.uniq();\n\t\t\tif (collection.errored) {\n\t\t\t\t// TODO: handle error\n\t\t\t\tthrow `code builder error: ${collection.error_message}`;\n\t\t\t}\n\n\t\t\tconst definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tfor (let definition of uniq_definitions) {\n\t\t\t\tconst node_id = definition.node.graph_node_id;\n\t\t\t\tif (!node_ids.has(node_id)) {\n\t\t\t\t\tnode_ids.set(node_id, true);\n\t\t\t\t}\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_node_id, node_id, definition);\n\t\t\t}\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tnode_ids.forEach((boolean: boolean, node_id: string) => {\n\t\t\t\tconst definitions = definitions_by_node_id.get(node_id);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tconst first_definition = definitions[0];\n\n\t\t\t\t\tif (first_definition) {\n\t\t\t\t\t\tconst comment = CodeFormatter.node_comment(first_definition.node, line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\n\t\t\t\t\t\tfor (let definition of definitions) {\n\t\t\t\t\t\t\tconst line = CodeFormatter.line_wrap(definition.line, line_type);\n\t\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tadd_code_line_for_nodes_and_line_type(nodes: BaseGlNodeType[], shader_name: ShaderName, line_type: LineType) {\n\t\tnodes = nodes.filter((node) => {\n\t\t\tif (this._shaders_collection_controller) {\n\t\t\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\t\t\t\treturn lines && lines.length > 0;\n\t\t\t}\n\t\t});\n\n\t\tvar nodes_count = nodes.length;\n\t\tfor (let i = 0; i < nodes_count; i++) {\n\t\t\tconst is_last = i == nodes.length - 1;\n\t\t\tthis.add_code_line_for_node_and_line_type(nodes[i], shader_name, line_type, is_last);\n\t\t}\n\t}\n\tadd_code_line_for_node_and_line_type(\n\t\tnode: BaseGlNodeType,\n\t\tshader_name: ShaderName,\n\t\tline_type: LineType,\n\t\tis_last: boolean\n\t): void {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\n\t\tif (lines && lines.length > 0) {\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tconst comment = CodeFormatter.node_comment(node, line_type);\n\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\t\t\tlodash_uniq(lines).forEach((line) => {\n\t\t\t\tline = CodeFormatter.line_wrap(line, line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t});\n\t\t\tif (!(line_type == LineType.BODY && is_last)) {\n\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport {ParamType} from '../../../../poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../../params/types/ParamValuesTypeMap';\nimport {ParamConstructorByType} from '../../../../params/types/ParamConstructorByType';\n\nimport {BaseNodeType} from '../../../_Base';\nimport {TypedParam, BaseParamType} from '../../../../params/_Base';\nimport {NodeContext} from '../../../../poly/NodeContext';\nimport {TypeAssert} from '../../../../poly/Assert';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import { RampValue } from '../../../../params/ramp/RampValue';\nimport {RampParam} from '../../../../params/Ramp';\nimport {OperatorPathParam} from '../../../../params/OperatorPath';\n// import {ParamValueComparer} from '../../params/ParamValueComparer';\n// import {ParamValueCloner} from '../../params/ParamValueCloner';\n// import {CoreTextureLoader} from '../../../../../Core/Loader/Texture'\n\nexport class ParamConfig<T extends ParamType> {\n\tprivate _uniform: IUniform | undefined;\n\tprivate _cached_param_value: ParamValuesTypeMap[T] | undefined;\n\t// private _texture_loader: CoreTextureLoader\n\n\tconstructor(\n\t\tprivate _type: T,\n\t\tprivate _name: string,\n\t\tprivate _default_value: ParamInitValuesTypeMap[T],\n\t\tprivate _uniform_name: string\n\t) {}\n\n\tstatic from_param<K extends ParamType>(param: TypedParam<K>, uniform_name: string): ParamConfig<K> {\n\t\treturn new ParamConfig<K>(param.type, param.name, param.default_value, uniform_name);\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget uniform_name() {\n\t\treturn this._uniform_name;\n\t}\n\n\tget uniform() {\n\t\treturn (this._uniform = this._uniform || this._create_uniform());\n\t}\n\n\tprivate _create_uniform() {\n\t\treturn ParamConfig.uniform_by_type(this._type);\n\t}\n\n\tget param_options() {\n\t\tconst callback_bound = this._callback.bind(this);\n\t\tswitch (this._type) {\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {callback: callback_bound, node_selection: {context: NodeContext.COP}};\n\t\t\tdefault:\n\t\t\t\treturn {callback: callback_bound};\n\t\t}\n\t}\n\n\tprivate _callback(node: BaseNodeType, param: BaseParamType) {\n\t\tthis.uniform.value = param.value;\n\t}\n\n\t// TODO: refactor that to use the default values map?\n\tstatic uniform_by_type(type: ParamType): IUniform {\n\t\tswitch (type) {\n\t\t\tcase ParamType.BOOLEAN:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.BUTTON:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.COLOR:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.FLOAT:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.FOLDER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.INTEGER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {value: 0};\n\t\t\t// case ParamType.STRING: return {type: 't', value: null} // new Texture()}\n\t\t\tcase ParamType.RAMP:\n\t\t\t\treturn {value: null}; // new Texture()}\n\t\t\tcase ParamType.SEPARATOR:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.STRING:\n\t\t\t\treturn {value: null};\n\t\t\tcase ParamType.VECTOR2:\n\t\t\t\treturn {value: new Vector2(0, 0)};\n\t\t\tcase ParamType.VECTOR3:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.VECTOR4:\n\t\t\t\treturn {value: new Vector4(0, 0, 0, 0)};\n\t\t}\n\t\tTypeAssert.unreachable(type);\n\t}\n\n\tasync set_uniform_value(node: BaseNodeType) {\n\t\t// return new Promise( async (resolve, reject)=>{\n\t\tconst uniform = this.uniform;\n\t\t// the cache cannot be trusted...\n\t\tconst param = node.params.get(this._name) as TypedParam<T>;\n\t\tif (param) {\n\t\t\tawait param.compute(); //node[node.param_cache_name(this._name)]\n\t\t\tconst value = param.value;\n\n\t\t\tif ((value != null && this.has_value_changed(value)) || this.is_video_texture()) {\n\t\t\t\t// this._update_cached_value(value);\n\t\t\t\t// console.log(this._name, value)\n\n\t\t\t\tswitch (this._type) {\n\t\t\t\t\tcase ParamType.OPERATOR_PATH: {\n\t\t\t\t\t\tawait this.set_uniform_value_from_texture((<unknown>param) as OperatorPathParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ParamType.RAMP: {\n\t\t\t\t\t\tthis.set_uniform_value_from_ramp((<unknown>param) as RampParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tuniform.value = param.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// resolve()\n\t\t\t} // else {\n\t\t\t//\tresolve()\n\t\t\t//}\n\t\t\t// })\n\t\t}\n\t}\n\n\tasync set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n\t\t// this._texture_loader = this._texture_loader || new CoreTextureLoader(node, node.param(this.name()))\n\n\t\t// // param.graph_disconnect_predecessors()\n\t\t// const texture = await this._texture_loader.load_texture_from_url_or_op( url );\n\t\t// uniform.value = texture\n\t\tconst found_node = param.found_node();\n\t\tif (found_node) {\n\t\t\tconst container = await found_node.request_container();\n\t\t\tconst texture = container.texture();\n\t\t\tuniform.value = texture;\n\t\t} else {\n\t\t\tuniform.value = null;\n\t\t}\n\t}\n\n\tset_uniform_value_from_ramp(param: RampParam, uniform: IUniform) {\n\t\tuniform.value = param.ramp_texture();\n\t}\n\n\thas_value_changed(new_value: ParamValuesTypeMap[T]): boolean {\n\t\tconst param_constructor = ParamConstructorByType[this._type];\n\t\tif (this._cached_param_value) {\n\t\t\tconst has_changed = !param_constructor.are_values_equal(new_value, this._cached_param_value);\n\t\t\tif (has_changed) {\n\t\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\t}\n\t\t\treturn has_changed;\n\t\t} else {\n\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\treturn false;\n\t\t}\n\n\t\t// let has_changed = false;\n\t\t// if (this._type == ParamType.RAMP) {\n\t\t// \thas_changed = new_value.uuid() != this._cached_param_value;\n\t\t// \t// if(has_changed){ this._cached_param_value = new_value.uuid() }\n\t\t// } else {\n\t\t// \tif (this._cached_param_value != null) {\n\t\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t\t// \t\t\t// console.log(\"new f\", new_value, this._cached_param_value)\n\t\t// \t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t} else {\n\t\t// \t\t\tif (new_value != null) {\n\t\t// \t\t\t\t// console.log(\"new v\", new_value, this._cached_param_value)\n\t\t// \t\t\t\thas_changed = new_value.toArray().join('.') != this._cached_param_value.toArray().join('.');\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\thas_changed = true;\n\t\t// \t}\n\t\t// \t// this._cached_param_value = new_value\n\t\t// }\n\t\t// return has_changed;\n\t}\n\t// private _update_cached_value(new_value) {\n\t// \t// console.log(\"_update_cached_value\", this._name, new_value)\n\t// \tif (this._type == 'ramp') {\n\t// \t\tthis._cached_param_value = new_value.uuid();\n\t// \t} else {\n\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t// \t\t\tthis._cached_param_value = new_value;\n\t// \t\t} else {\n\t// \t\t\t// make sure to copy the value, not assign to it\n\t// \t\t\t// otherwise we won't detect changes (since the objects would be the same)\n\t// \t\t\tthis._cached_param_value = this._cached_param_value || new_value.clone();\n\t// \t\t\tthis._cached_param_value.copy(new_value);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_video_texture(): boolean {\n\t\tlet result = false;\n\t\tconst uniform = this.uniform;\n\t\tif (uniform) {\n\t\t\tconst value = uniform.value;\n\t\t\tif (value) {\n\t\t\t\tresult = value.constructor == VideoTexture;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {LinesController} from './LinesController';\nimport {BaseGlNodeType} from '../../_Base';\n\nexport class ShadersCollectionController {\n\tprivate _lines_controller_by_shader_name: Map<ShaderName, LinesController> = new Map();\n\tconstructor(private _shader_names: ShaderName[], private _current_shader_name: ShaderName) {\n\t\tfor (let shader_name of this._shader_names) {\n\t\t\tthis._lines_controller_by_shader_name.set(shader_name, new LinesController(shader_name));\n\t\t}\n\t}\n\n\tget shader_names() {\n\t\treturn this._shader_names;\n\t}\n\n\tset_current_shader_name(shader_name: ShaderName) {\n\t\tthis._current_shader_name = shader_name;\n\t}\n\tget current_shader_name() {\n\t\treturn this._current_shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[], shader_name?: ShaderName) {\n\t\tif (definitions.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_definitions(node, definitions);\n\t\t}\n\t}\n\tdefinitions(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.definitions(node);\n\t\t}\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[], shader_name?: ShaderName) {\n\t\tif (lines.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_body_lines(node, lines);\n\t\t}\n\t}\n\tbody_lines(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.body_lines(node);\n\t\t}\n\t}\n}\n","import {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {BaseGlNodeType} from '../../_Base';\nimport {MapUtils} from '../../../../../core/MapUtils';\n\nexport class LinesController {\n\tprivate _definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\tprivate _body_lines_by_node_id: Map<string, string[]> = new Map();\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tget shader_name() {\n\t\treturn this._shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[]) {\n\t\tfor (let definition of definitions) {\n\t\t\tMapUtils.push_on_array_at_entry(this._definitions_by_node_id, node.graph_node_id, definition);\n\t\t}\n\t}\n\tdefinitions(node: BaseGlNodeType): BaseGLDefinition[] | undefined {\n\t\treturn this._definitions_by_node_id.get(node.graph_node_id);\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[]) {\n\t\tfor (let line of lines) {\n\t\t\tMapUtils.push_on_array_at_entry(this._body_lines_by_node_id, node.graph_node_id, line);\n\t\t}\n\t}\n\tbody_lines(node: BaseGlNodeType): string[] | undefined {\n\t\treturn this._body_lines_by_node_id.get(node.graph_node_id);\n\t}\n}\n","import {BaseGlNodeType} from '../../_Base';\nimport {LineType} from './LineType';\n\nconst LINE_SUFFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: ';',\n\t[LineType.BODY]: ';',\n};\n\nconst LINE_PREFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: '',\n\t[LineType.BODY]: '\t',\n};\n\nexport class CodeFormatter {\n\tstatic node_comment(node: BaseGlNodeType, line_type: LineType): string {\n\t\tlet line = `// ${node.full_path()}`;\n\t\tif (line_type == LineType.BODY) {\n\t\t\tline = `\t${line}`;\n\t\t}\n\t\treturn line;\n\t}\n\tstatic line_wrap(line: string, line_type: LineType) {\n\t\tlet add_suffix = true;\n\t\tif (line.indexOf('#if') == 0 || line.indexOf('#endif') == 0) {\n\t\t\tadd_suffix = false;\n\t\t}\n\t\tif (add_suffix) {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}${LINE_SUFFIXES[line_type]}`;\n\t\t} else {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}`;\n\t\t}\n\t}\n\tstatic post_line_separator(line_type: LineType) {\n\t\treturn line_type == LineType.BODY ? '\t' : '';\n\t}\n}\n","import {TypedNode} from '../../_Base';\nimport {ShaderName} from './ShaderName';\n\nexport abstract class TypedAssembler<T extends TypedNode<any, any, any>> {\n\tabstract get shader_names(): ShaderName[];\n\tabstract input_names_for_shader_name(node: T, shader_name: ShaderName): string[];\n}\n","export default \"#include <common>\\n\\nuniform vec2 resolution;\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec4 diffuseColor = vec4(1.0,0.0,1.0,1.0);\\n\\n\\n\\t// INSERT BODY\\n\\n\\tgl_FragColor = vec4( diffuseColor );\\n}\"","export class CoreSleep {\n\tstatic sleep(time: number): Promise<void> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(() => {\n\t\t\t\tresolve();\n\t\t\t}, time);\n\t\t});\n\t}\n}\n","import {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter} from 'three/src/constants';\n// import {LinearEncoding} from 'three/src/constants';\n// import {HalfFloatType} from 'three/src/constants';\n// import {WebGLRenderTargetCube} from 'three/src/renderers/WebGLRenderTargetCube';\nimport {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\n\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from '../../../Engine/Param/_Base'\n// import {CoreTextureLoader} from '../../../core/loader/Texture';\n// import { CoreScriptLoader } from \"src/Core/Loader/Script\";\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {POLY} from '../../Poly';\nclass EnvMapCopParamsConfig extends NodeParamsConfig {\n\t// url = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t// \tdesktop_browse: {file_type: 'texture'},\n\t// });\n}\nconst ParamsConfig = new EnvMapCopParamsConfig();\nexport class EnvMapCopNode extends TypedCopNode<EnvMapCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'env_map';\n\t}\n\t// static required_three_imports() {\n\t// \treturn [\n\t// \t\t'loaders/EXRLoader',\n\t// \t\t// 'pmrem/PMREMGenerator',\n\t// \t\t// 'pmrem/PMREMCubeUVPacker',\n\t// \t];\n\t// }\n\n\t// private _texture_loader: CoreTextureLoader\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\n\t\t// for now, if I clone the input, it gets messed up\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT)\n\t// }\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tconst env_map = await this.convert_texture_to_env_map(texture);\n\t\tif (env_map) {\n\t\t\tthis.set_texture(env_map);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate async convert_texture_to_env_map(texture: Texture): Promise<Texture | undefined> {\n\t\t// texture.minFilter = NearestFilter;\n\t\t// texture.encoding = LinearEncoding;\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t// if (!renderer) {\n\t\t// \tawait CoreSleep.sleep(1000);\n\t\t// \tconsole.log('waited 1s');\n\t\t// \trenderer = POLY.renderers_controller.first_renderer();\n\t\t// \tconsole.log('renderer', renderer, texture);\n\t\t// }\n\n\t\tif (renderer) {\n\t\t\tconst pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t// console.log('env inout', texture);\n\t\t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\n\t\t\t// pmremGenerator.dispose();\n\t\t\t// texture.dispose();\n\t\t\t// console.log('exrCubeRenderTarget.texture', exrCubeRenderTarget.texture);\n\t\t\tconst env_map_texture = exrCubeRenderTarget.texture;\n\t\t\t// (window.scene as any).background = env_map_texture;\n\t\t\t// (window.scene as any).environment = env_map_texture;\n\t\t\treturn env_map_texture;\n\t\t} else {\n\t\t\tthis.states.error.set('no renderer found to convert the texture to an env map');\n\t\t}\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {TextureLoader} from 'three/src/loaders/TextureLoader';\nimport {Texture} from 'three/src/textures/Texture';\n// import {RepeatWrapping} from 'three/src/constants';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreScriptLoader} from '/Script';\n// import {CoreGeometry} from '../geometry/Geometry';\nimport {UnsignedByteType} from 'three/src/constants';\nimport {CoreWalker} from '../Walker';\n\nimport {BaseNodeType} from '../../engine/nodes/_Base';\nimport {BaseParamType} from '../../engine/params/_Base';\nimport {BaseCopNodeClass} from '../../engine/nodes/cop/_Base';\nimport {TextureContainer} from '../../engine/containers/Texture';\nimport {POLY} from '../../engine/Poly';\n// import {BufferGeometry} from 'three/src/core/BufferGeometry';\n\ninterface VideoSourceTypeByExt {\n\togg: string;\n\togv: string;\n\tmp4: string;\n}\n// interface ImageScriptUrlByExt {\n// \texr: string;\n// \tbasis: string;\n// }\ninterface ThreeLoaderByExt {\n\texr: string;\n\tbasis: string;\n\thdr: string;\n}\n\nenum Extension {\n\tEXR = 'exr',\n\tBASIS = 'basis',\n\tHDR = 'hdr',\n}\n\nexport class CoreTextureLoader {\n\tstatic PARAM_DEFAULT = '/examples/textures/uv.jpg';\n\tstatic PARAM_ENV_DEFAULT = '/examples/textures/piz_compressed.exr';\n\n\tstatic VIDEO_EXTENSIONS = ['mp4', 'webm', 'ogv'];\n\tstatic VIDEO_SOURCE_TYPE_BY_EXT: VideoSourceTypeByExt = {\n\t\togg: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\togv: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\tmp4: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"',\n\t};\n\t// static SCRIPT_URL_BY_EXT: ImageScriptUrlByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// static THREE_LOADER_BY_EXT: ThreeLoaderByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// @load_texture: (url, callback)->\n\t// \tif url\n\t// \t\tloader = this._texture_loader(url)\n\n\t// \t\tloader.load(\n\t// \t\t\turl,\n\t// \t\t\tcallback,\n\t// \t\t\tnull,\n\t// \t\t\t(error)=>\n\t// \t\t\t\tthis.set_error(\"could not load texture #{url}\")\n\t// \t\t\t\t#this._on_error(error)\n\t// \t\t\t)\n\t// \telse\n\t// \t\tthis.set_error(\"not url given to Mat/Base._load_texture\")\n\t// _on_error: (error)->\n\t// \tconsole.log(\"ERROR\")\n\t// \tconsole.log(error)\n\t// \tthis.set_error_message()\n\n\tconstructor(private _node: BaseNodeType, private _param: BaseParamType) {}\n\n\tasync load_texture_from_url_or_op(url: string): Promise<Texture | VideoTexture | null> {\n\t\tlet texture: Texture | null = null;\n\t\tlet found_node;\n\n\t\tif (url.substring(0, 3) == 'op:') {\n\t\t\tconst node_path = url.substring(3);\n\t\t\tfound_node = CoreWalker.find_node(this._node, node_path);\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node instanceof BaseCopNodeClass) {\n\t\t\t\t\tconst container: TextureContainer = await found_node.request_container();\n\t\t\t\t\ttexture = container.texture();\n\t\t\t\t} else {\n\t\t\t\t\tthis._node.states.error.set(`found node is not a texture node`);\n\t\t\t\t}\n\n\t\t\t\t// this._assign_texture(attrib, texture)\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`no node found in path '${node_path}'`);\n\t\t\t}\n\t\t} else {\n\t\t\ttexture = await this.load_url(url);\n\t\t\tif (texture) {\n\t\t\t\t// param.mark_as_referencing_asset(url)\n\t\t\t\tif (this._param.options.texture_as_env()) {\n\t\t\t\t\t// texture = await CoreTextureLoader.set_texture_for_env(texture, this._node);\n\t\t\t\t} else {\n\t\t\t\t\ttexture = CoreTextureLoader.set_texture_for_mapping(texture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`could not load texture ${url}`);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE: if this._param gets its value from an expression like `ch('/CONTROL/photo_url')`\n\t\t// then found_node will be null, so the graph should not be changed\n\t\tif (found_node && this._param.graph_predecessors()[0] != found_node) {\n\t\t\tthis._param.graph_disconnect_predecessors();\n\t\t\tthis._param.add_graph_input(found_node);\n\t\t}\n\n\t\t// this._assign_texture(attrib, texture)\n\t\treturn texture;\n\t}\n\n\tasync load_url(url: string): Promise<Texture> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// url = this._resolve_url(url)\n\t\t\tconst ext = CoreTextureLoader._ext(url);\n\n\t\t\tif (CoreTextureLoader.VIDEO_EXTENSIONS.includes(ext)) {\n\t\t\t\tconst texture: VideoTexture = await this._load_as_video(url);\n\t\t\t\treturn texture;\n\t\t\t} else {\n\t\t\t\tthis.loader_for_ext(ext).then((loader) => {\n\t\t\t\t\tloader.load(url, resolve, undefined, (error: any) => {\n\t\t\t\t\t\tconsole.warn('error', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loader_for_ext(ext: string) {\n\t\tconst ext_lowercase = ext.toLowerCase() as keyof ThreeLoaderByExt;\n\t\t// const script_name = CoreTextureLoader.SCRIPT_URL_BY_EXT[ext_lowercase];\n\t\t// var loader;\n\n\t\tswitch (ext_lowercase) {\n\t\t\tcase Extension.EXR: {\n\t\t\t\tconst {EXRLoader} = await import('../../../modules/three/examples/jsm/loaders/EXRLoader');\n\t\t\t\treturn new EXRLoader();\n\t\t\t}\n\t\t\tcase Extension.HDR: {\n\t\t\t\tconst {RGBELoader} = await import('../../../modules/three/examples/jsm/loaders/RGBELoader');\n\t\t\t\tconst loader = new RGBELoader();\n\t\t\t\tloader.setDataType(UnsignedByteType); // FloatType,HalfFloatType\n\t\t\t\t// loader.setPath('/examples/textures/equirectangular/');\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t\tcase Extension.BASIS: {\n\t\t\t\tconst {BasisTextureLoader} = await import(\n\t\t\t\t\t'../../../modules/three/examples/jsm/loaders/BasisTextureLoader'\n\t\t\t\t);\n\t\t\t\tconst loader = new BasisTextureLoader();\n\t\t\t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t\t\tif (renderer) {\n\t\t\t\t\tloader.detectSupport(renderer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('texture loader found no renderer for basis texture loader');\n\t\t\t\t}\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\t// if (script_name) {\n\t\t// const imported_classes = await CoreScriptLoader.load_module_three_loader(script_name)\n\t\t// const imported_classes = await CoreScriptLoader.three_module(`loaders/${script_name}`);\n\t\t// const imported_classes = await import(`modules/three/examples/jsm/loaders/${script_name}`);\n\t\t// const loader_class_name = CoreTextureLoader.THREE_LOADER_BY_EXT[ext_lowercase];\n\t\t// const loader_class = imported_classes[loader_class_name];\n\t\t// if (loader_class) {\n\t\t// \tloader = new loader_class();\n\t\t// \tif (ext == 'basis') {\n\t\t// \t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t// \t\tconst renderer = POLY.renderers_controller.first_renderer();\n\t\t// \t\tloader.detectSupport(renderer);\n\t\t// \t}\n\t\t// }\n\t\t// }\n\t\treturn new TextureLoader();\n\n\t\t// const constructor = (() => { switch (ext) {\n\t\t// \tcase 'exr': return EXRLoader;\n\t\t// \tdefault: return TextureLoader;\n\t\t// } })();\n\t\t// return new constructor();\n\t}\n\n\t_load_as_video(url: string): Promise<VideoTexture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video');\n\t\t\t// document.body.appendChild(video)\n\t\t\t// video.id = 'video'\n\t\t\t// console.log(\"video\", video)\n\t\t\tvideo.setAttribute('crossOrigin', 'anonymous');\n\t\t\tvideo.setAttribute('autoplay', `${true}`); // to ensure it loads\n\t\t\tvideo.setAttribute('loop', `${true}`);\n\n\t\t\t// wait for onloadedmetadata to ensure that we have a duration\n\t\t\tvideo.onloadedmetadata = function() {\n\t\t\t\tvideo.pause();\n\t\t\t\tconst texture = new VideoTexture(video);\n\t\t\t\tresolve(texture);\n\t\t\t};\n\t\t\t// video.setAttribute('controls', true)\n\t\t\t// video.style=\"display:none\"\n\t\t\tconst source = document.createElement('source');\n\t\t\tconst ext = CoreTextureLoader._ext(url) as keyof VideoSourceTypeByExt;\n\t\t\tlet type: string = CoreTextureLoader.VIDEO_SOURCE_TYPE_BY_EXT[ext];\n\t\t\ttype = type || CoreTextureLoader._default_video_source_type(url);\n\t\t\tsource.setAttribute('type', type);\n\t\t\tsource.setAttribute('src', url);\n\n\t\t\tvideo.appendChild(source);\n\t\t});\n\t}\n\tstatic _default_video_source_type(url: string) {\n\t\tconst ext = this._ext(url);\n\t\treturn `video/${ext}`;\n\t}\n\n\tstatic pixel_data(texture: Texture) {\n\t\tconst img = texture.image;\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.drawImage(img, 0, 0, img.width, img.height);\n\t\t\treturn context.getImageData(0, 0, img.width, img.height);\n\t\t}\n\t}\n\n\t// TODO: typescript: check what type the pixel_data is\n\t// static pixel_data_to_attribute(pixel_data: Pixel, geometry: BufferGeometry, attrib_name_with_component:string, convert_method: (x:number, y:number, z:number, w:number)=>number) {\n\t// \tconst {data} = pixel_data;\n\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t// \t// TODO: add error if no uvs\n\t// \tconst values = [];\n\t// \tconst points = geometry_wrapper.points();\n\t// \tfor (let point of points) {\n\t// \t\tconst uv = point.attrib_value('uv');\n\t// \t\tconst x = Math.floor((pixel_data.width - 1) * uv.x);\n\t// \t\tconst y = Math.floor((pixel_data.height - 1) * (1 - uv.y));\n\t// \t\tconst i = y * pixel_data.width + x;\n\t// \t\t// const val = data[4*i] / 255.0;\n\t// \t\tif (convert_method) {\n\t// \t\t\tconst val = convert_method(data[4 * i + 0], data[4 * i + 1], data[4 * i + 2], data[4 * i + 3]);\n\t// \t\t\tvalues.push(val);\n\t// \t\t} else {\n\t// \t\t\tvalues.push([data[4 * i + 0], data[4 * i + 1], data[4 * i + 2]]);\n\t// \t\t}\n\t// \t}\n\n\t// \tconst attrib_name_elements = attrib_name_with_component.split('.');\n\t// \tlet attrib_name = attrib_name_elements[0];\n\t// \tlet component_offset = null;\n\t// \tif (attrib_name_elements.length > 1) {\n\t// \t\tconst component = attrib_name_elements[1] as keyof Vector4Like\n\t// \t\tcomponent_offset = {x: 0, y: 1, z: 2, w: 3}[component];\n\t// \t}\n\n\t// \tlet attrib = geometry.attributes[attrib_name];\n\t// \tif (attrib) {\n\t// \t\tconst array = attrib.array;\n\t// \t\tlet index = 0;\n\t// \t\tlet is_array = null;\n\t// \t\tfor (let value of values) {\n\t// \t\t\tif (is_array || lodash_isArray(value)) {\n\t// \t\t\t\tis_array = true;\n\t// \t\t\t\tlet component_index = 0;\n\t// \t\t\t\tfor (let value_c of value) {\n\t// \t\t\t\t\tarray[attrib.itemSize * index + component_index] = value_c;\n\t// \t\t\t\t\tcomponent_index++;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tarray[attrib.itemSize * index + component_offset] = value;\n\t// \t\t\t}\n\t// \t\t\tindex++;\n\t// \t\t}\n\t// \t} else {\n\t// \t\tattrib = geometry.setAttribute(attrib_name, new Float32BufferAttribute(values, 1));\n\t// \t}\n\t// \tattrib.needsUpdate = true;\n\t// }\n\n\tstatic _ext(url: string) {\n\t\tconst elements = url.split('.');\n\t\treturn elements[elements.length - 1].toLowerCase();\n\t}\n\t// static private _resolve_url(url: string):string{\n\t// \tif(url[0] == '/'){\n\t// \t\tconst root_url = POLY.env_is_production() ? 'https://polygonjs.com' : 'http://localhost:5000'\n\t// \t\turl = `${root_url}${url}`\n\t// \t}\n\t// \treturn url\n\t// }\n\n\tstatic set_texture_for_mapping(texture: Texture) {\n\t\t// let val = texture['wrapS']\n\t\t// Object.defineProperty(texture, 'wrapS', {\n\t\t// \tget () {\n\t\t// \t\treturn val // Simply return the cached value\n\t\t// \t},\n\t\t// \tset (newVal) {\n\t\t// \t\tval = newVal // Save the newVal\n\t\t// \t\tconsole.warn(\"set\", newVal)\n\t\t// \t}\n\t\t// })\n\n\t\t// texture.wrapS = RepeatWrapping\n\t\t// texture.wrapT = RepeatWrapping\n\t\t// console.log(\"set_texture_for_mapping\", RepeatWrapping, texture, texture.wrapS)\n\t\treturn texture;\n\t}\n\n\t// static async set_texture_for_env(texture: Texture, registerer: BaseNode) {\n\t// \tif (registerer._registered_env_map) {\n\t// \t\tPOLY.renderers_controller.deregister_env_map(registerer._registered_env_map);\n\t// \t}\n\t// \tregisterer._registered_env_map = await POLY.renderers_controller.register_env_map(texture);\n\t// \treturn registerer._registered_env_map;\n\t// }\n}\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_BPTC_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tbptcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.bptcSupported = !! renderer.extensions.get( 'EXT_texture_compression_bptc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.bptcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC7_M5:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_BPTC_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n","import {Texture} from 'three/src/textures/Texture';\nimport {TypedCopNode} from './_Base';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst ParamsConfig = new NodeParamsConfig();\nexport class NullCopNode extends TypedCopNode<NodeParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tthis.set_texture(texture);\n\t}\n}\n","import {TypedCopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchCopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchCopParamsConfig();\n\nexport class SwitchCopNode extends TypedCopNode<SwitchCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_texture(container.texture());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import {CATEGORY_EVENT} from './Category';\n\nimport {CameraMapControlsEventNode} from '../../nodes/event/CameraMapControls';\nimport {CameraOrbitControlsEventNode} from '../../nodes/event/CameraOrbitControls';\nimport {CodeEventNode} from '../../nodes/event/Code';\nimport {MouseEventNode} from '../../nodes/event/MouseEvent';\n\nexport interface EventNodeChildrenMap {\n\tcamera_orbit_controls: CameraMapControlsEventNode;\n\tcamera_map_controls: CameraOrbitControlsEventNode;\n\tcode: CodeEventNode;\n\tmouse_event: MouseEventNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class EventRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(CameraMapControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CameraOrbitControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CodeEventNode, CATEGORY_EVENT.MISC);\n\t\tpoly.register_node(MouseEventNode, CATEGORY_EVENT.MISC);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {MapControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {CameraOrbitControlsEventNode} from './CameraOrbitControls';\n\nexport class CameraMapControlsEventNode extends CameraOrbitControlsEventNode {\n\tstatic type() {\n\t\treturn 'camera_map_controls';\n\t}\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// await CoreScriptLoader.load_module_three_example('controls/OrbitControls')\n\t\t// const constructor_name = 'MapControls'\n\t\t// const constructor = THREE[constructor_name]\n\t\t// const c = this.constructor as typeof CameraMapControlsEventNode;\n\t\t// const {MapControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\treturn new MapControls(camera, element);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedEventNode} from './_Base';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\nimport {OrbitControls} from '../../../../modules/three/examples/jsm/controls/OrbitControls';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport interface CameraControls extends OrbitControls {\n\tname?: string;\n\t// this_is_a_control: any;\n\t// name: string;\n}\n\nexport abstract class TypedCameraControlsEventNode<K extends NodeParamsConfig> extends TypedEventNode<K> {\n\t// controls() {\n\t// \treturn this._controls;\n\t// }\n\n\tasync apply_controls(camera: Camera, html_element: HTMLElement) {\n\t\t// I don't think I can just assign the camera at the moment\n\t\t// so the controls may need to be re-created everytime\n\t\t// TODO: the controls should be created (and disposed?) by the viewer\n\t\t//this.dispose_controls()\n\n\t\tconst controls = await this.create_controls_instance(camera, html_element);\n\t\tconst timestamp = performance.now();\n\t\tcontrols.name = `${this.full_path()}:${camera.name}:${timestamp}:${this.controls_id()}`;\n\t\t// console.log(this._controls)\n\t\tawait this.params.eval_all();\n\t\tthis.setup_controls(controls);\n\t\treturn controls;\n\t\t// })\n\t\t// });\n\t}\n\tcontrols_id() {\n\t\treturn JSON.stringify(this.params.all.map((p) => p.value_serialized));\n\t}\n\t//this.cook()\n\n\t// dispose_controls: (controls_instance)->\n\t// \tif controls_instance?\n\t// \t\tcontrols_instance.dispose()\n\n\tabstract setup_controls(controls: CameraControls): void;\n\t//\n\n\tabstract async create_controls_instance(camera: Camera, element: HTMLElement): Promise<CameraControls>;\n\tabstract set_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void;\n}\n\nexport type BaseCameraControlsEventNodeType = TypedCameraControlsEventNode<any>;\n","import {CATEGORY_GL} from './Category';\n\nimport {FloatToIntGlNode, IntToFloatGlNode} from '../../nodes/gl/_ConversionMisc';\nimport {FloatToVec2GlNode, FloatToVec3GlNode, FloatToVec4GlNode} from '../../nodes/gl/_ConversionToVec';\n\nimport {\n\tVec2ToFloatGlNode,\n\tVec3ToFloatGlNode,\n\tVec4ToFloatGlNode,\n\tVec4ToVectorGlNode,\n} from '../../nodes/gl/_ConversionVecTo';\n\nimport {\n\tAbsGlNode,\n\tAcosGlNode,\n\tAsinGlNode,\n\tAtanGlNode,\n\tCeilGlNode,\n\tCosGlNode,\n\tDegreesGlNode,\n\tExpGlNode,\n\tExp2GlNode,\n\tFloorGlNode,\n\tFractGlNode,\n\tInverseSqrtGlNode,\n\tLogGlNode,\n\tLog2GlNode,\n\tNormalizeGlNode,\n\tRadiansGlNode,\n\tSignGlNode,\n\tSinGlNode,\n\tSqrtGlNode,\n\tTanGlNode,\n} from '../../nodes/gl/_Math_Arg1';\n\nimport {\n\tDistanceGlNode,\n\tDotGlNode,\n\tMaxGlNode,\n\tMinGlNode,\n\tModGlNode,\n\tPowGlNode,\n\tReflectGlNode,\n\tStepGlNode,\n} from '../../nodes/gl/_Math_Arg2';\n\nimport {AddGlNode, DivideGlNode, MultGlNode, SubstractGlNode} from '../../nodes/gl/_Math_Arg2Operation';\n\nimport {AndGlNode, OrGlNode} from '../../nodes/gl/_Math_Arg2Boolean';\nimport {AlignGlNode} from '../../nodes/gl/Align';\nimport {AttributeGlNode} from '../../nodes/gl/Attribute';\nimport {ConstantGlNode} from '../../nodes/gl/Constant';\nimport {ComplementGlNode} from '../../nodes/gl/Complement';\nimport {CrossGlNode} from '../../nodes/gl/Cross';\nimport {CycleGlNode} from '../../nodes/gl/Cycle';\nimport {DiskGlNode} from '../../nodes/gl/Disk';\nimport {EasingGlNode} from '../../nodes/gl/Easing';\nimport {FitGlNode} from '../../nodes/gl/Fit';\nimport {Fit01GlNode} from '../../nodes/gl/Fit01';\nimport {GlobalsGlNode} from '../../nodes/gl/Globals';\nimport {HsvToRgbGlNode} from '../../nodes/gl/HsvToRgb';\nimport {InstanceTransformGlNode} from '../../nodes/gl/InstanceTransform';\nimport {LengthGlNode} from '../../nodes/gl/Length';\nimport {LuminanceGlNode} from '../../nodes/gl/Luminance';\nimport {MixGlNode} from '../../nodes/gl/Mix';\nimport {MultAddGlNode} from '../../nodes/gl/MultAdd';\nimport {NegateGlNode} from '../../nodes/gl/Negate';\nimport {NoiseGlNode} from '../../nodes/gl/Noise';\nimport {NullGlNode} from '../../nodes/gl/Null';\nimport {OutputGlNode} from '../../nodes/gl/Output';\nimport {ParamGlNode} from '../../nodes/gl/Param';\nimport {RefractGlNode} from '../../nodes/gl/Refract';\nimport {QuatMultGlNode} from '../../nodes/gl/QuatMult';\nimport {QuatFromAxisAngleGlNode} from '../../nodes/gl/QuatFromAxisAngle';\nimport {QuatToAngleGlNode} from '../../nodes/gl/QuatToAngle';\nimport {QuatToAxisGlNode} from '../../nodes/gl/QuatToAxis';\nimport {RampGlNode} from '../../nodes/gl/Ramp';\nimport {RandomGlNode} from '../../nodes/gl/Random';\nimport {RgbToHsvGlNode} from '../../nodes/gl/RgbToHsv';\nimport {RotateGlNode} from '../../nodes/gl/Rotate';\nimport {RoundGlNode} from '../../nodes/gl/Round';\nimport {TextureGlNode} from '../../nodes/gl/Texture';\nimport {TwoWaySwitchGlNode} from '../../nodes/gl/TwoWaySwitch';\nimport {VectorAlignGlNode} from '../../nodes/gl/VectorAlign';\nimport {VectorAngleGlNode} from '../../nodes/gl/VectorAngle';\n\nexport interface GlNodeChildrenMap {\n\tabs: AbsGlNode;\n\tacos: AcosGlNode;\n\tadd: AddGlNode;\n\talign: AlignGlNode;\n\tand: AndGlNode;\n\tasin: AsinGlNode;\n\tatan: AtanGlNode;\n\tattribute: AttributeGlNode;\n\tceil: CeilGlNode;\n\tconstant: ConstantGlNode;\n\tcos: CosGlNode;\n\tcomplement: ComplementGlNode;\n\tcross: CrossGlNode;\n\tcycle: CycleGlNode;\n\tdegrees: DegreesGlNode;\n\tdisk: DiskGlNode;\n\tdistance: DistanceGlNode;\n\tdivide: DivideGlNode;\n\tdot: DotGlNode;\n\teasing: EasingGlNode;\n\texp: ExpGlNode;\n\texp2: Exp2GlNode;\n\tfit: FitGlNode;\n\tfit01: Fit01GlNode;\n\tfloat_to_int: FloatToIntGlNode;\n\tfloat_to_vec2: FloatToVec2GlNode;\n\tfloat_to_vec3: FloatToVec3GlNode;\n\tfloat_to_vec4: FloatToVec4GlNode;\n\tfloor: FloorGlNode;\n\tfract: FractGlNode;\n\thsv_to_rgb: HsvToRgbGlNode;\n\tint_to_float: FloatToIntGlNode;\n\tinverse_sqrt: InverseSqrtGlNode;\n\tinstance_transform: InstanceTransformGlNode;\n\tlength: LengthGlNode;\n\tlog: LogGlNode;\n\tlog2: Log2GlNode;\n\tluminance: LuminanceGlNode;\n\tglobals: GlobalsGlNode;\n\tmax: MaxGlNode;\n\tmin: MinGlNode;\n\tmix: MixGlNode;\n\tmod: ModGlNode;\n\tmult: MultGlNode;\n\tmult_add: MultAddGlNode;\n\tnegate: NegateGlNode;\n\tnoise: NoiseGlNode;\n\tnormalize: NormalizeGlNode;\n\tnull: NullGlNode;\n\tor: OrGlNode;\n\toutput: OutputGlNode;\n\tparam: ParamGlNode;\n\tpow: PowGlNode;\n\tquat_mult: QuatMultGlNode;\n\tquat_from_axis_angle: QuatFromAxisAngleGlNode;\n\tquat_to_angle: QuatToAngleGlNode;\n\tquat_to_axis: QuatToAxisGlNode;\n\tradians: RadiansGlNode;\n\tramp: RampGlNode;\n\trandom: RandomGlNode;\n\treflect: ReflectGlNode;\n\trefract: RefractGlNode;\n\trgb_to_hsv: RgbToHsvGlNode;\n\trotate: RotateGlNode;\n\tround: RoundGlNode;\n\tsign: SignGlNode;\n\tsin: SinGlNode;\n\tsqrt: SqrtGlNode;\n\tstep: StepGlNode;\n\tsubstract: SubstractGlNode;\n\ttan: TanGlNode;\n\ttexture: TextureGlNode;\n\ttwo_way_switch: TwoWaySwitchGlNode;\n\tvec2_to_float: Vec2ToFloatGlNode;\n\tvec3_to_float: Vec3ToFloatGlNode;\n\tvec4_to_float: Vec4ToFloatGlNode;\n\tvec4_to_vector: Vec4ToVectorGlNode;\n\tvector_align: VectorAlignGlNode;\n\tvector_angle: VectorAngleGlNode;\n}\n\nimport {NodeContext} from '../NodeContext';\nimport {Poly} from '../../Poly';\nexport class GlRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AbsGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AcosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(AlignGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AndGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(AsinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AtanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(AttributeGlNode, CATEGORY_GL.GLOBALS, {except: [`${NodeContext.COP}/builder`]});\n\t\tpoly.register_node(CeilGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CosGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(ConstantGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ComplementGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(CrossGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(CycleGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DegreesGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(DiskGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DistanceGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(DivideGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(DotGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(EasingGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ExpGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Exp2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FitGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Fit01GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FloatToIntGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec2GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec3GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloatToVec4GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(FloorGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(FractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(GlobalsGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(HsvToRgbGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(IntToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(InverseSqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(InstanceTransformGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LengthGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(LuminanceGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(NegateGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(LogGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(Log2GlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MaxGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MinGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(ModGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MixGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(MultAddGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(NullGlNode, CATEGORY_GL.UTIL);\n\t\tpoly.register_node(NoiseGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(NormalizeGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(OrGlNode, CATEGORY_GL.LOGIC);\n\t\tpoly.register_node(OutputGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ParamGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(PowGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(QuatMultGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatFromAxisAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAngleGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(QuatToAxisGlNode, CATEGORY_GL.QUAT);\n\t\tpoly.register_node(RampGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RandomGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(RadiansGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(ReflectGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RefractGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RgbToHsvGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(RotateGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(RoundGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SignGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(SinGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(SqrtGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(StepGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(SubstractGlNode, CATEGORY_GL.MATH);\n\t\tpoly.register_node(TanGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(TextureGlNode, CATEGORY_GL.COLOR);\n\t\tpoly.register_node(TwoWaySwitchGlNode, CATEGORY_GL.TRIGO);\n\t\tpoly.register_node(Vec2ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec3ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToFloatGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(Vec4ToVectorGlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(VectorAlignGlNode, CATEGORY_GL.GEOMETRY);\n\t\tpoly.register_node(VectorAngleGlNode, CATEGORY_GL.GEOMETRY);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO INT\n//\n//\nconst OUTPUT_NAME_INT = 'int';\nclass FloatToIntGlParamsConfig extends NodeParamsConfig {\n\tfloat = ParamConfig.FLOAT(0);\n}\nconst ParamsConfigFloatToInt = new FloatToIntGlParamsConfig();\nexport class FloatToIntGlNode extends TypedGlNode<FloatToIntGlParamsConfig> {\n\tparams_config = ParamsConfigFloatToInt;\n\tstatic type() {\n\t\treturn 'float_to_int';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_INT, ConnectionPointType.INT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst float = this.variable_for_input('float');\n\n\t\tconst int = this.gl_var_name('int');\n\t\tconst body_line = `int ${int} = int(${ThreeToGl.float(float)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// INT TO FLOAT\n//\n//\nconst OUTPUT_NAME_FLOAT = 'float';\nclass IntToFloatGlParamsConfig extends NodeParamsConfig {\n\tint = ParamConfig.INTEGER(0);\n}\nconst ParamsConfigIntToFloat = new IntToFloatGlParamsConfig();\nexport class IntToFloatGlNode extends TypedGlNode<IntToFloatGlParamsConfig> {\n\tparams_config = ParamsConfigIntToFloat;\n\tstatic type() {\n\t\treturn 'int_to_float';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME_FLOAT, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst int = this.variable_for_input('int');\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = float(${ThreeToGl.int(int)})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\n//\n//\n// FLOAT TO VEC2\n//\n//\nclass FloatToVec2GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig2 = new FloatToVec2GlParamsConfig();\nexport class FloatToVec2GlNode extends TypedGlNode<FloatToVec2GlParamsConfig> {\n\tparams_config = ParamsConfig2;\n\tstatic type() {\n\t\treturn 'float_to_vec2';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec2';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec2GlNode.OUTPUT_NAME, ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\n\t\tconst vec = this.gl_var_name(FloatToVec2GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec2 ${vec} = ${ThreeToGl.float2(x, y)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC3\n//\n//\nclass FloatToVec3GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig3 = new FloatToVec3GlParamsConfig();\nexport class FloatToVec3GlNode extends TypedGlNode<FloatToVec3GlParamsConfig> {\n\tparams_config = ParamsConfig3;\n\tstatic type() {\n\t\treturn 'float_to_vec3';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec3';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec3GlNode.OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\n\t\tconst vec = this.gl_var_name(FloatToVec3GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${vec} = ${ThreeToGl.float3(x, y, z)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n\n//\n//\n// FLOAT TO VEC4\n//\n//\nclass FloatToVec4GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n\tw = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig4 = new FloatToVec4GlParamsConfig();\nexport class FloatToVec4GlNode extends TypedGlNode<FloatToVec4GlParamsConfig> {\n\tparams_config = ParamsConfig4;\n\tstatic type() {\n\t\treturn 'float_to_vec4';\n\t}\n\tstatic readonly OUTPUT_NAME = 'vec4';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(FloatToVec4GlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\t\tconst w = this.variable_for_input('w');\n\n\t\tconst vec = this.gl_var_name(FloatToVec4GlNode.OUTPUT_NAME);\n\t\tconst body_line = `vec4 ${vec} = ${ThreeToGl.float4(x, y, z, w)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ParamType} from '../../poly/ParamType';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nclass VecToParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new VecToParamsConfig();\nclass BaseVecToGlNode extends TypedGlNode<VecToParamsConfig> {\n\tparams_config = ParamsConfig;\n}\n\ninterface VecToGlOptions {\n\tcomponents: string[];\n\tparam_type: ParamType;\n}\n\nfunction VecToGlFactory(type: string, options: VecToGlOptions) {\n\tconst components = options.components;\n\tconst param_type = options.param_type;\n\treturn class VecToGlNode extends BaseVecToGlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\n\t\tinitialize_node() {\n\t\t\tthis.io.outputs.set_named_output_connection_points(\n\t\t\t\tcomponents.map((c) => {\n\t\t\t\t\treturn new TypedNamedConnectionPoint(c, ConnectionPointType.FLOAT);\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t\tcreate_params() {\n\t\t\tthis.add_param(param_type, 'vec', components.map((c) => 0) as Number2);\n\t\t}\n\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst body_lines: string[] = [];\n\n\t\t\tconst vec = this.variable_for_input('vec');\n\n\t\t\tthis.io.outputs.used_output_names().forEach((c) => {\n\t\t\t\tconst var_name = this.gl_var_name(c);\n\t\t\t\tbody_lines.push(`float ${var_name} = ${vec}.${c}`);\n\t\t\t});\n\t\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\t}\n\t};\n}\n\nconst components_v4 = ['x', 'y', 'z', 'w'];\n\nexport class Vec2ToFloatGlNode extends VecToGlFactory('vec2_to_float', {\n\tcomponents: ['x', 'y'],\n\tparam_type: ParamType.VECTOR2,\n}) {}\nexport class Vec3ToFloatGlNode extends VecToGlFactory('vec3_to_float', {\n\tcomponents: ['x', 'y', 'z'],\n\tparam_type: ParamType.VECTOR3,\n}) {}\nexport class Vec4ToFloatGlNode extends VecToGlFactory('vec4_to_float', {\n\tcomponents: components_v4,\n\tparam_type: ParamType.VECTOR4,\n}) {}\n\nexport class Vec4ToVectorGlNode extends BaseVecToGlNode {\n\tstatic type() {\n\t\treturn 'vec4_to_vector';\n\t}\n\tstatic readonly INPUT_NAME_VEC4 = 'vec4';\n\tstatic readonly OUTPUT_NAME_VEC3 = 'vec3';\n\tstatic readonly OUTPUT_NAME_W = 'w';\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_VEC3, ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(Vec4ToVectorGlNode.OUTPUT_NAME_W, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tcreate_params() {\n\t\tthis.add_param(ParamType.VECTOR4, Vec4ToVectorGlNode.INPUT_NAME_VEC4, components_v4.map((c) => 0) as Number4);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\n\t\tconst in_vec4 = Vec4ToVectorGlNode.INPUT_NAME_VEC4;\n\t\tconst out_vec3 = Vec4ToVectorGlNode.OUTPUT_NAME_VEC3;\n\t\tconst out_w = Vec4ToVectorGlNode.OUTPUT_NAME_W;\n\t\tconst vec = this.variable_for_input(in_vec4);\n\n\t\tconst used_output_names = this.io.outputs.used_output_names();\n\n\t\tif (used_output_names.indexOf(out_vec3) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_vec3);\n\t\t\tbody_lines.push(`vec3 ${var_name} = ${vec}.xyz`);\n\t\t}\n\t\tif (used_output_names.indexOf(out_w) >= 0) {\n\t\t\tconst var_name = this.gl_var_name(out_w);\n\t\t\tbody_lines.push(`float ${var_name} = ${vec}.w`);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n\ninterface MathArg1Options {\n\tin?: string;\n\tout?: string;\n\tmethod?: string;\n}\n\nfunction MathFunctionArg1Factory(type: string, options: MathArg1Options = {}) {\n\tconst gl_method_name = options.method || type;\n\tconst gl_output_name = options.out || 'val';\n\tconst gl_input_name = options.in || 'in';\n\treturn class Node extends BaseNodeGlMathFunctionArg1GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\t\tprotected _gl_input_name(index: number): string {\n\t\t\treturn gl_input_name;\n\t\t}\n\t\tprotected _gl_output_name(index: number): string {\n\t\t\treturn gl_output_name;\n\t\t}\n\t\tgl_method_name(): string {\n\t\t\treturn gl_method_name;\n\t\t}\n\t};\n}\nexport class AbsGlNode extends MathFunctionArg1Factory('abs') {}\nexport class AcosGlNode extends MathFunctionArg1Factory('acos', {out: 'radians'}) {}\nexport class AsinGlNode extends MathFunctionArg1Factory('asin', {out: 'radians'}) {}\nexport class AtanGlNode extends MathFunctionArg1Factory('atan', {out: 'radians'}) {}\nexport class CeilGlNode extends MathFunctionArg1Factory('ceil') {}\nexport class CosGlNode extends MathFunctionArg1Factory('cos', {in: 'radians'}) {}\nexport class DegreesGlNode extends MathFunctionArg1Factory('degrees', {in: 'radians', out: 'degrees'}) {}\n\nexport class ExpGlNode extends MathFunctionArg1Factory('exp') {}\nexport class Exp2GlNode extends MathFunctionArg1Factory('exp2') {}\nexport class FloorGlNode extends MathFunctionArg1Factory('floor') {}\nexport class FractGlNode extends MathFunctionArg1Factory('fract') {}\nexport class InverseSqrtGlNode extends MathFunctionArg1Factory('inverse_sqrt', {method: 'inversesqrt'}) {}\nexport class LogGlNode extends MathFunctionArg1Factory('log') {}\nexport class Log2GlNode extends MathFunctionArg1Factory('log2') {}\nexport class NormalizeGlNode extends MathFunctionArg1Factory('normalize', {out: 'normalized'}) {}\nexport class RadiansGlNode extends MathFunctionArg1Factory('radians', {in: 'degrees', out: 'radians'}) {}\nexport class SignGlNode extends MathFunctionArg1Factory('sign') {}\nexport class SinGlNode extends MathFunctionArg1Factory('sin', {in: 'radians'}) {}\nexport class SqrtGlNode extends MathFunctionArg1Factory('sqrt') {}\nexport class TanGlNode extends MathFunctionArg1Factory('tan') {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\ninterface MathArg2OperationOptions {\n\tin_prefix: string;\n\tout: string;\n\toperation: string;\n\tallowed_in_types?: ConnectionPointType[];\n}\n\nfunction MathFunctionArg2OperationFactory(type: string, options: MathArg2OperationOptions) {\n\tconst in_prefix = options.in_prefix || type;\n\tconst output_name = options.out || 'val';\n\tconst operation = options.operation;\n\tconst allowed_in_types = options.allowed_in_types;\n\treturn class Node extends BaseNodeGlMathFunctionArg2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\n\t\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\t}\n\t\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\t\tconst name = connection.name;\n\t\t\t\tconst variable = this.variable_for_input(name);\n\t\t\t\tif (variable) {\n\t\t\t\t\treturn ThreeToGl.any(variable);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst joined_args = args.join(` ${this.gl_operation()} `);\n\n\t\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t}\n\t\t_gl_input_name(index: number): string {\n\t\t\treturn `${in_prefix}${index}`;\n\t\t}\n\t\t_gl_output_name(index: number): string {\n\t\t\treturn output_name;\n\t\t}\n\t\tgl_operation(): string {\n\t\t\treturn operation;\n\t\t}\n\t\tprotected _expected_input_types() {\n\t\t\tlet first_input_type = this.gl_connections_controller.first_input_connection_type();\n\t\t\tif (first_input_type && allowed_in_types) {\n\t\t\t\tif (!allowed_in_types.includes(first_input_type)) {\n\t\t\t\t\t// if the first input type is not allowed, either leave the connection point as is,\n\t\t\t\t\t// or use the default if there is none\n\t\t\t\t\tconst first_connection = this.io.inputs.named_input_connection_points[0];\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tfirst_input_type = first_connection.type;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst type = first_input_type || ConnectionPointType.FLOAT;\n\n\t\t\tconst current_connections = this.io.connections.input_connections();\n\t\t\tconst expected_count = current_connections ? Math.max(current_connections.length + 1, 2) : 2;\n\t\t\tconst expected_input_types = [];\n\t\t\tfor (let i = 0; i < expected_count; i++) {\n\t\t\t\texpected_input_types.push(type);\n\t\t\t}\n\t\t\treturn expected_input_types;\n\t\t}\n\t\tprotected _expected_output_types() {\n\t\t\tconst type = this._expected_input_types()[0];\n\t\t\treturn [type];\n\t\t}\n\t};\n}\nexport class AddGlNode extends MathFunctionArg2OperationFactory('add', {\n\tin_prefix: 'add',\n\tout: 'sum',\n\toperation: '+',\n}) {}\nexport class DivideGlNode extends MathFunctionArg2OperationFactory('divide', {\n\tin_prefix: 'div',\n\tout: 'divide',\n\toperation: '/',\n}) {}\nexport class SubstractGlNode extends MathFunctionArg2OperationFactory('substract', {\n\tin_prefix: 'sub',\n\tout: 'substract',\n\toperation: '-',\n}) {}\n\nexport class MultGlNode extends MathFunctionArg2OperationFactory('mult', {\n\tin_prefix: 'mult',\n\tout: 'product',\n\toperation: '*',\n}) {\n\tstatic type() {\n\t\treturn 'mult';\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn 1;\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_output_type() {\n\t\tconst input_types = this._expected_input_types();\n\t\tconst type = input_types[input_types.length - 1];\n\t\treturn [type];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst input_connections = this.io.connections.input_connections();\n\t\tif (input_connections) {\n\t\t\tconst first_connection = input_connections[0];\n\n\t\t\tif (first_connection) {\n\t\t\t\tconst connection_point_for_first_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\tfirst_connection.input_index\n\t\t\t\t];\n\t\t\t\tconst type = connection_point_for_first_connection.type;\n\t\t\t\tconst expected_count = input_connections ? input_connections.length + 1 : 2;\n\t\t\t\tconst empty_array = new Array(expected_count);\n\n\t\t\t\tif (type == ConnectionPointType.FLOAT) {\n\t\t\t\t\tconst second_connection = input_connections ? input_connections[1] : null;\n\t\t\t\t\tif (second_connection) {\n\t\t\t\t\t\tconst connection_point_for_second_connection = this.io.inputs.named_input_connection_points[\n\t\t\t\t\t\t\tsecond_connection.input_index\n\t\t\t\t\t\t];\n\t\t\t\t\t\tconst second_type = connection_point_for_second_connection.type;\n\t\t\t\t\t\tif (second_type == ConnectionPointType.FLOAT) {\n\t\t\t\t\t\t\t// if first 2 inputs are float: n+1 float inputs\n\t\t\t\t\t\t\treturn empty_array.map((i) => type);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// if first input is float and 2nd is different: 1 float, 1 like second, and no other input\n\t\t\t\t\t\t\treturn [type, second_type];\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// if only 1 input: 2 with same type\n\t\t\t\t\t\treturn [type, type];\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// if first input is not a float: n+1 inputs with same type\n\t\t\t\t\treturn empty_array.map(() => type);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn [ConnectionPointType.FLOAT, ConnectionPointType.FLOAT];\n\t}\n}\n","import {BaseNodeGlMathFunctionArgBoolean2GlNode} from './_BaseMathFunctionArgBoolean2';\n\ninterface MathArg2BooleanOptions {\n\top: string;\n}\n\nfunction MathFunctionArg2BooleanFactory(type: string, options: MathArg2BooleanOptions) {\n\treturn class Node extends BaseNodeGlMathFunctionArgBoolean2GlNode {\n\t\tstatic type() {\n\t\t\treturn type;\n\t\t}\n\t\tinitialize_node() {\n\t\t\tsuper.initialize_node();\n\t\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\t}\n\n\t\tboolean_operation(): string {\n\t\t\treturn options.op;\n\t\t}\n\t\tprotected _gl_output_name(index: number) {\n\t\t\treturn type;\n\t\t}\n\t\tprotected _gl_input_name(index = 0) {\n\t\t\treturn `${type}${index}`;\n\t\t}\n\t};\n}\nexport class AndGlNode extends MathFunctionArg2BooleanFactory('and', {op: '&&'}) {}\nexport class OrGlNode extends MathFunctionArg2BooleanFactory('or', {op: '||'}) {}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\n\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport abstract class BaseNodeGlMathFunctionArgBoolean2GlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\tprotected _expected_input_types() {\n\t\treturn [ConnectionPointType.BOOL, ConnectionPointType.BOOL];\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.BOOL];\n\t}\n\n\tabstract boolean_operation(): string;\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst args = this.io.inputs.named_input_connection_points.map((named_input, i) => {\n\t\t\tconst name = named_input.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(` ${this.boolean_operation()} `);\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `bool ${sum} = ${joined_args}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tDIR = 'dir',\n\tUP = 'up',\n}\nconst InputNames: Array<InputName> = [InputName.DIR, InputName.UP];\ninterface IDefaultValues {\n\t[InputName.DIR]: Number3;\n\t[InputName.UP]: Number3;\n}\nconst DEFAULT_DIR: Number3 = [0, 0, 1];\nconst DEFAULT_UP: Number3 = [0, 1, 0];\nconst DefaultValues: IDefaultValues = {\n\t[InputName.DIR]: DEFAULT_DIR,\n\t[InputName.UP]: DEFAULT_UP,\n};\n\nexport class AlignGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'align';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.VEC3,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'align';\n\t}\n\n\t// protected expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.VEC3];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport ComplementMethods from './gl/complement.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class ComplementGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'complement';\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'complement';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [\n\t\t\tnew FunctionGLDefinition(\n\t\t\t\tthis,\n\t\t\t\tthis.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT,\n\t\t\t\tComplementMethods\n\t\t\t),\n\t\t];\n\t}\n}\n","export default \"float complement(float x){return 1.0-x;}\\nvec2 complement(vec2 x){return vec2(1.0-x.x, 1.0-x.y);}\\nvec3 complement(vec3 x){return vec3(1.0-x.x, 1.0-x.y, 1.0-x.z);}\\nvec4 complement(vec4 x){return vec4(1.0-x.x, 1.0-x.y, 1.0-x.z, 1.0-x.w);}\\n\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'cross';\n\nclass CrossGlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.VECTOR3([0, 0, 1]);\n\ty = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CrossGlParamsConfig();\nexport class CrossGlNode extends TypedGlNode<CrossGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cross';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = ThreeToGl.float(this.variable_for_input('x'));\n\t\tconst y = ThreeToGl.float(this.variable_for_input('y'));\n\n\t\tconst result = this.gl_var_name(OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${result} = cross(${x}, ${y})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import CycleMethods from './gl/cycle.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\n\nexport class CycleGlNode extends MathFunctionArg3Factory('cycle', {\n\tin: ['in', 'min', 'max'],\n\tdefault: {max: 1},\n\tfunctions: [CycleMethods],\n}) {}\n","export default \"float cycle(float val, float val_min, float val_max){\\n\\tif(val >= val_min && val < val_max){\\n\\t\\treturn val;\\n\\t} else {\\n\\t\\tfloat range = val_max - val_min;\\n\\t\\tif(val >= val_max){\\n\\t\\t\\tfloat delta = (val - val_max);\\n\\t\\t\\treturn val_min + mod(delta, range);\\n\\t\\t} else {\\n\\t\\t\\tfloat delta = (val_min - val);\\n\\t\\t\\treturn val_max - mod(delta, range);\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport DiskMethods from './gl/disk.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\n\nconst OUTPUT_NAME = 'float';\nclass DiskGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR2([0, 0]);\n\tcenter = ParamConfig.VECTOR2([0, 0]);\n\tradius = ParamConfig.FLOAT(1);\n\tfeather = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new DiskGlParamsConfig();\nexport class DiskGlNode extends TypedGlNode<DiskGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'disk';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst position = ThreeToGl.vector2(this.variable_for_input('position'));\n\t\tconst center = ThreeToGl.vector2(this.variable_for_input('center'));\n\t\tconst radius = ThreeToGl.float(this.variable_for_input('radius'));\n\t\tconst feather = ThreeToGl.float(this.variable_for_input('feather'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = disk(${position}, ${center}, ${radius}, ${feather})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\n\t\tshaders_collection_controller.add_definitions(this, [\n\t\t\tnew FunctionGLDefinition(this, ConnectionPointType.FLOAT, DiskMethods),\n\t\t]);\n\t}\n}\n","export default \"float disk(vec2 pos, vec2 center, float radius, float feather){\\n\\tfloat dist = distance(pos, center);\\n\\tif(feather <= 0.0){\\n\\t\\tif(dist < radius){return 1.0;}else{return 0.0;}\\n\\t} else {\\n\\t\\tfloat half_feather = feather * 0.5;\\n\\t\\tif(dist < (radius - half_feather)){\\n\\t\\t\\treturn 1.0;\\n\\t\\t} else {\\n\\t\\t\\tif(dist > (radius + half_feather)){\\n\\t\\t\\t\\treturn 0.0;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tfloat feather_start = (radius - half_feather);\\n\\t\\t\\t\\tfloat blend = 1.0 - (dist - feather_start) / feather;\\n\\t\\t\\t\\treturn blend;\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\n// https://github.com/glslify/glsl-easings\nimport CircularInOut from './gl/easing/circular-in-out.glsl';\nimport ExponentialInOut from './gl/easing/exponential-in-out.glsl';\nimport CircularIn from './gl/easing/circular-in.glsl';\nimport ElasticOut from './gl/easing/elastic-out.glsl';\nimport CubicIn from './gl/easing/cubic-in.glsl';\nimport ExponentialOut from './gl/easing/exponential-out.glsl';\nimport QuinticOut from './gl/easing/quintic-out.glsl';\nimport ElasticInOut from './gl/easing/elastic-in-out.glsl';\nimport Linear from './gl/easing/linear.glsl';\nimport CircularOut from './gl/easing/circular-out.glsl';\nimport BackInOut from './gl/easing/back-in-out.glsl';\nimport BackIn from './gl/easing/back-in.glsl';\nimport SineIn from './gl/easing/sine-in.glsl';\nimport BackOut from './gl/easing/back-out.glsl';\nimport QuarticInOut from './gl/easing/quartic-in-out.glsl';\nimport QuadraticIn from './gl/easing/quadratic-in.glsl';\nimport CubicInOut from './gl/easing/cubic-in-out.glsl';\nimport ElasticIn from './gl/easing/elastic-in.glsl';\nimport BounceOut from './gl/easing/bounce-out.glsl';\nimport QuadraticInOut from './gl/easing/quadratic-in-out.glsl';\nimport ExponentialIn from './gl/easing/exponential-in.glsl';\nimport QuinticInOut from './gl/easing/quintic-in-out.glsl';\nimport SineInOut from './gl/easing/sine-in-out.glsl';\nimport CubicOut from './gl/easing/cubic-out.glsl';\nimport QuadraticOut from './gl/easing/quadratic-out.glsl';\nimport BounceInOut from './gl/easing/bounce-in-out.glsl';\nimport QuinticIn from './gl/easing/quintic-in.glsl';\nimport QuarticIn from './gl/easing/quartic-in.glsl';\nimport QuarticOut from './gl/easing/quartic-out.glsl';\nimport BounceIn from './gl/easing/bounce-in.glsl';\nimport SineOut from './gl/easing/sine-out.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst EASE_NAMES = [\n\t'back-in-out',\n\t'back-in',\n\t'back-out',\n\t'bounce-in-out',\n\t'bounce-in',\n\t'bounce-out',\n\t'circular-in-out',\n\t'circular-in',\n\t'circular-out',\n\t'cubic-in-out',\n\t'cubic-in',\n\t'cubic-out',\n\t'elastic-in-out',\n\t'elastic-in',\n\t'elastic-out',\n\t'exponential-in-out',\n\t'exponential-in',\n\t'exponential-out',\n\t'linear',\n\t'quadratic-in-out',\n\t'quadratic-in',\n\t'quadratic-out',\n\t// \"quartic-in-out\",\n\t// \"quartic-in\",\n\t// \"quartic-out\",\n\t// \"quintic-in-out\",\n\t// \"quintic-in\",\n\t// \"quintic-out\",\n\t'sine-in-out',\n\t'sine-in',\n\t'sine-out',\n];\n\nconst IMPORT_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': CircularInOut,\n\t'exponential-in-out': ExponentialInOut,\n\t'circular-in': CircularIn,\n\t'elastic-out': ElasticOut,\n\t'cubic-in': CubicIn,\n\t'exponential-out': ExponentialOut,\n\t'quintic-out': QuinticOut,\n\t'elastic-in-out': ElasticInOut,\n\tlinear: Linear,\n\t'circular-out': CircularOut,\n\t'back-in-out': BackInOut,\n\t'back-in': BackIn,\n\t'sine-in': SineIn,\n\t'back-out': BackOut,\n\t'quartic-in-out': QuarticInOut,\n\t'quadratic-in': QuadraticIn,\n\t'cubic-in-out': CubicInOut,\n\t'elastic-in': ElasticIn,\n\t'bounce-out': BounceOut,\n\t'quadratic-in-out': QuadraticInOut,\n\t'exponential-in': ExponentialIn,\n\t'quintic-in-out': QuinticInOut,\n\t'sine-in-out': SineInOut,\n\t'cubic-out': CubicOut,\n\t'quadratic-out': QuadraticOut,\n\t'bounce-in-out': BounceInOut,\n\t'quintic-in': QuinticIn,\n\t'quartic-in': QuarticIn,\n\t'quartic-out': QuarticOut,\n\t'bounce-in': BounceIn,\n\t'sine-out': SineOut,\n};\nconst IMPORT_DEPENDENCIES_BY_EASE_NAME: Dictionary<string[]> = {\n\t'bounce-in': [BounceOut],\n\t'bounce-in-out': [BounceOut],\n};\n\nconst METHOD_NAMES_BY_EASE_NAME: Dictionary<string> = {\n\t'circular-in-out': 'circularInOut',\n\t'exponential-in-out': 'exponentialInOut',\n\t'circular-in': 'circularIn',\n\t'elastic-out': 'elasticOut',\n\t'cubic-in': 'cubicIn',\n\t'exponential-out': 'exponentialOut',\n\t'quintic-out': 'quinticOut',\n\t'elastic-in-out': 'elasticInOut',\n\tlinear: 'linear',\n\t'circular-out': 'circularOut',\n\t'back-in-out': 'backInOut',\n\t'back-in': 'backIn',\n\t'sine-in': 'sineIn',\n\t'back-out': 'backOut',\n\t'quartic-in-out': 'quarticInOut',\n\t'quadratic-in': 'quadraticIn',\n\t'cubic-in-out': 'cubicInOut',\n\t'elastic-in': 'elasticIn',\n\t'bounce-out': 'bounceOut',\n\t'quadratic-in-out': 'quadraticInOut',\n\t'exponential-in': 'exponentialIn',\n\t'quintic-in-out': 'quinticInOut',\n\t'sine-in-out': 'sineInOut',\n\t'cubic-out': 'cubicOut',\n\t'quadratic-out': 'quadraticOut',\n\t'bounce-in-out': 'bounceInOut',\n\t'quintic-in': 'quinticIn',\n\t'quartic-in': 'quarticIn',\n\t'quartic-out': 'quarticOut',\n\t'bounce-in': 'bounceIn',\n\t'sine-out': 'sineOut',\n};\n\nconst OUTPUT_NAME = 'out';\nconst default_ease_type = EASE_NAMES.indexOf('sine-in-out');\nclass EasingGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_ease_type, {\n\t\tmenu: {\n\t\t\tentries: EASE_NAMES.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new EasingGlParamsConfig();\nexport class EasingGlNode extends TypedGlNode<EasingGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'easing';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.spare_params_controller.set_inputless_param_names(['type']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst ease_name = EASE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_EASE_NAME[ease_name];\n\t\tconst glsl_function_code = IMPORT_BY_EASE_NAME[ease_name];\n\n\t\tlet ease_functions = [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, glsl_function_code)];\n\t\tconst function_dependencies = (IMPORT_DEPENDENCIES_BY_EASE_NAME[ease_name] || []).map(\n\t\t\t(f) => new FunctionGLDefinition(this, ConnectionPointType.FLOAT, f)\n\t\t);\n\t\tif (function_dependencies) {\n\t\t\tease_functions = function_dependencies.concat(ease_functions);\n\t\t}\n\t\t// ease_functions.forEach(ease_function=>{\n\t\t// \tfunction_declaration_lines.push(ease_function)\n\t\t// })\n\n\t\tconst in_value = ThreeToGl.float(this.variable_for_input('input'));\n\t\tconst out_value = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst body_line = `float ${out_value} = ${method_name}(${in_value})`;\n\t\tshaders_collection_controller.add_definitions(this, ease_functions);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","export default \"float circularInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - sqrt(1.0 - 4.0 * t * t))\\n    : 0.5 * (sqrt((3.0 - 2.0 * t) * (2.0 * t - 1.0)) + 1.0);\\n}\\n\\n\"","export default \"float exponentialInOut(float t) {\\n  return t == 0.0 || t == 1.0\\n    ? t\\n    : t < 0.5\\n      ? +0.5 * pow(2.0, (20.0 * t) - 10.0)\\n      : -0.5 * pow(2.0, 10.0 - (t * 20.0)) + 1.0;\\n}\\n\\n\"","export default \"float circularIn(float t) {\\n  return 1.0 - sqrt(1.0 - t * t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticOut(float t) {\\n  return sin(-13.0 * (t + 1.0) * HALF_PI) * pow(2.0, -10.0 * t) + 1.0;\\n}\\n\\n\"","export default \"float cubicIn(float t) {\\n  return t * t * t;\\n}\\n\\n\"","export default \"float exponentialOut(float t) {\\n  return t == 1.0 ? t : 1.0 - pow(2.0, -10.0 * t);\\n}\\n\\n\"","export default \"float quinticOut(float t) {\\n  return 1.0 - (pow(t - 1.0, 5.0));\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * sin(+13.0 * HALF_PI * 2.0 * t) * pow(2.0, 10.0 * (2.0 * t - 1.0))\\n    : 0.5 * sin(-13.0 * HALF_PI * ((2.0 * t - 1.0) + 1.0)) * pow(2.0, -10.0 * (2.0 * t - 1.0)) + 1.0;\\n}\\n\\n\"","export default \"float linear(float t) {\\n  return t;\\n}\\n\\n\"","export default \"float circularOut(float t) {\\n  return sqrt((2.0 - t) * t);\\n}\\n\\n\"","export default \"\\nfloat backInOut(float t) {\\n  float f = t < 0.5\\n    ? 2.0 * t\\n    : 1.0 - (2.0 * t - 1.0);\\n\\n  float g = pow(f, 3.0) - f * sin(f * PI);\\n\\n  return t < 0.5\\n    ? 0.5 * g\\n    : 0.5 * (1.0 - g) + 0.5;\\n}\\n\\n\"","export default \"\\nfloat backIn(float t) {\\n  return pow(t, 3.0) - t * sin(t * PI);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineIn(float t) {\\n  return sin((t - 1.0) * HALF_PI) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat backOut(float t) {\\n  float f = 1.0 - t;\\n  return 1.0 - (pow(f, 3.0) - f * sin(f * PI));\\n}\\n\\n\"","export default \"float quarticInOut(float t) {\\n  return t < 0.5\\n    ? +8.0 * pow(t, 4.0)\\n    : -8.0 * pow(t - 1.0, 4.0) + 1.0;\\n}\\n\\n\"","export default \"float quadraticIn(float t) {\\n  return t * t;\\n}\\n\\n\"","export default \"float cubicInOut(float t) {\\n  return t < 0.5\\n    ? 4.0 * t * t * t\\n    : 0.5 * pow(2.0 * t - 2.0, 3.0) + 1.0;\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat elasticIn(float t) {\\n  return sin(13.0 * t * HALF_PI) * pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"\\nfloat bounceOut(float t) {\\n  const float a = 4.0 / 11.0;\\n  const float b = 8.0 / 11.0;\\n  const float c = 9.0 / 10.0;\\n\\n  const float ca = 4356.0 / 361.0;\\n  const float cb = 35442.0 / 1805.0;\\n  const float cc = 16061.0 / 1805.0;\\n\\n  float t2 = t * t;\\n\\n  return t < a\\n    ? 7.5625 * t2\\n    : t < b\\n      ? 9.075 * t2 - 9.9 * t + 3.4\\n      : t < c\\n        ? ca * t2 - cb * t + cc\\n        : 10.8 * t * t - 20.52 * t + 10.72;\\n}\\n\\n\"","export default \"float quadraticInOut(float t) {\\n  float p = 2.0 * t * t;\\n  return t < 0.5 ? p : -p + (4.0 * t) - 1.0;\\n}\\n\\n\"","export default \"float exponentialIn(float t) {\\n  return t == 0.0 ? t : pow(2.0, 10.0 * (t - 1.0));\\n}\\n\\n\"","export default \"float quinticInOut(float t) {\\n  return t < 0.5\\n    ? +16.0 * pow(t, 5.0)\\n    : -0.5 * pow(2.0 * t - 2.0, 5.0) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat sineInOut(float t) {\\n  return -0.5 * (cos(PI * t) - 1.0);\\n}\\n\\n\"","export default \"float cubicOut(float t) {\\n  float f = t - 1.0;\\n  return f * f * f + 1.0;\\n}\\n\\n\"","export default \"float quadraticOut(float t) {\\n  return -t * (t - 2.0);\\n}\\n\\n\"","export default \"\\nfloat bounceInOut(float t) {\\n  return t < 0.5\\n    ? 0.5 * (1.0 - bounceOut(1.0 - t * 2.0))\\n    : 0.5 * bounceOut(t * 2.0 - 1.0) + 0.5;\\n}\\n\\n\\n\\n\"","export default \"float quinticIn(float t) {\\n  return pow(t, 5.0);\\n}\\n\\n\"","export default \"float quarticIn(float t) {\\n  return pow(t, 4.0);\\n}\\n\\n\"","export default \"float quarticOut(float t) {\\n  return pow(t - 1.0, 3.0) * (1.0 - t) + 1.0;\\n}\\n\\n\"","export default \"\\nfloat bounceIn(float t) {\\n  return 1.0 - bounceOut(1.0 - t);\\n}\\n\\n\"","export default \"#ifndef HALF_PI\\n#define HALF_PI 1.5707963267948966\\n#endif\\n\\nfloat sineOut(float t) {\\n  return sin(t * HALF_PI);\\n}\\n\\n\"","import {BaseNodeGlMathFunctionArg5GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class FitGlNode extends BaseNodeGlMathFunctionArg5GlNode {\n\tstatic type() {\n\t\treturn 'fit';\n\t}\n\n\tprotected _gl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max', 'dest_min', 'dest_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tprotected gl_method_name(): string {\n\t\treturn 'fit';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg3GlNode} from './_BaseMathFunction';\nimport FitMethods from './gl/fit.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<number> = {\n\tsrc_min: 0,\n\tsrc_max: 1,\n};\n\nexport class Fit01GlNode extends BaseNodeGlMathFunctionArg3GlNode {\n\tstatic type() {\n\t\treturn 'fit01';\n\t}\n\n\tgl_input_name(index: number): string {\n\t\treturn ['val', 'src_min', 'src_max'][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'fit01';\n\t}\n\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, FitMethods)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Hsv2Rgb from './gl/hsv2rgb.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst OUTPUT_NAME = 'rgb';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HsvToRgbGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new HsvToRgbGlParamsConfig();\nexport class HsvToRgbGlNode extends TypedGlNode<HsvToRgbGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hsv_to_rgb';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Hsv2Rgb));\n\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input(this.p.hsv.name));\n\n\t\tconst rgb = this.gl_var_name(OUTPUT_NAME);\n\t\tbody_lines.push(`vec3 ${rgb} = hsv2rgb(${value})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://github.com/hughsk/glsl-hsv2rgb\\n// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 hsv2rgb(vec3 c) {\\n\\tvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\n\\tvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\n\\treturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\"","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nimport QuaternionMethods from './gl/quaternion.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nconst VARS = {\n\tposition: 'position',\n\tnormal: 'normal',\n\tinstance_position: 'instancePosition',\n\tinstance_orientation: 'instanceOrientation',\n\tinstance_scale: 'instanceScale',\n};\n\nclass InstanceTransformGlParamsConfig extends NodeParamsConfig {\n\tposition = ParamConfig.VECTOR3([0, 0, 0]);\n\tnormal = ParamConfig.VECTOR3([0, 0, 1]);\n\tinstance_position = ParamConfig.VECTOR3([0, 0, 0]);\n\tinstance_orientation = ParamConfig.VECTOR4([0, 0, 0, 0]);\n\tinstance_scale = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new InstanceTransformGlParamsConfig();\nexport class InstanceTransformGlNode extends TypedGlNode<InstanceTransformGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance_transform';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_position(), ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint(this.gl_output_name_normal(), ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines = [];\n\t\tconst function_declaration_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC4, QuaternionMethods));\n\n\t\tconst input_position = this.io.inputs.named_input(this.p.position.name);\n\t\tconst position = input_position\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.position.name))\n\t\t\t: this._default_position();\n\n\t\tconst input_normal = this.io.inputs.named_input(this.p.normal.name);\n\t\tconst normal = input_normal\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.normal.name))\n\t\t\t: this._default_normal();\n\n\t\tconst input_instancePosition = this.io.inputs.named_input(this.p.instance_position.name);\n\t\tconst instancePosition = input_instancePosition\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_position.name))\n\t\t\t: this._default_instance_position(shaders_collection_controller);\n\t\t// const instancePosition = ThreeToGl.float(this.variable_for_input('instancePosition'))\n\n\t\tconst input_instanceOrientation = this.io.inputs.named_input(this.p.instance_orientation.name);\n\t\tconst instanceOrientation = input_instanceOrientation\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_orientation.name))\n\t\t\t: this._default_input_instance_orientation(shaders_collection_controller);\n\n\t\tconst input_instanceScale = this.io.inputs.named_input(this.p.instance_scale.name);\n\t\tconst instanceScale = input_instanceScale\n\t\t\t? ThreeToGl.float(this.variable_for_input(this.p.instance_scale.name))\n\t\t\t: this._default_input_instance_scale(shaders_collection_controller);\n\n\t\tconst result_position = this.gl_var_name(this.gl_output_name_position());\n\t\tconst result_normal = this.gl_var_name(this.gl_output_name_normal());\n\t\tbody_lines.push(`vec3 ${result_position} = vec3(${position})`);\n\t\tbody_lines.push(`${result_position} *= ${instanceScale}`);\n\t\tbody_lines.push(`${result_position} = rotate_with_quat( ${result_position}, ${instanceOrientation} )`);\n\t\tbody_lines.push(`${result_position} += ${instancePosition}`);\n\t\tbody_lines.push(`vec3 ${result_normal} = vec3(${normal})`);\n\t\tbody_lines.push(`${result_normal} = rotate_with_quat( ${result_normal}, ${instanceOrientation} )`);\n\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t}\n\tgl_output_name_position() {\n\t\treturn 'position';\n\t}\n\tgl_output_name_normal() {\n\t\treturn 'normal';\n\t}\n\n\tprivate _default_position(): string {\n\t\treturn VARS.position;\n\t}\n\tprivate _default_normal(): string {\n\t\treturn VARS.normal;\n\t}\n\tprivate _default_instance_position(shaders_collection_controller: ShadersCollectionController): string | undefined {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_position,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_position, this._shader_name);\n\t}\n\tprivate _default_input_instance_orientation(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC4,\n\t\t\tVARS.instance_orientation,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec4', VARS.instance_orientation, this._shader_name);\n\t}\n\tprivate _default_input_instance_scale(shaders_collection_controller: ShadersCollectionController) {\n\t\treturn this.material_node?.assembler_controller.assembler.globals_handler?.read_attribute(\n\t\t\tthis,\n\t\t\tConnectionPointType.VEC3,\n\t\t\tVARS.instance_scale,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// return this.assembler()\n\t\t// \t.globals_handler()\n\t\t// \t.read_attribute(this, 'vec3', VARS.instance_scale, this._shader_name);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class LengthGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'length';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['x'][index];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'length';\n\t}\n\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'lum';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LuminanceGlParamsConfig extends NodeParamsConfig {\n\thsv = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new LuminanceGlParamsConfig();\nexport class LuminanceGlNode extends TypedGlNode<LuminanceGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'luminance';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.vector3(this.variable_for_input('color'));\n\n\t\tconst lum = this.gl_var_name('lum');\n\t\t// linearToRelativeLuminance is declared in threejs common.glsl.js\n\t\tconst body_line = `float ${lum} = linearToRelativeLuminance(${value})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class MixGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'mix';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['value0', 'value1', 'blend'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_output_name() {\n\t\treturn 'mix';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.FLOAT;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg4GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst DefaultValues: Dictionary<number> = {\n\tmult: 1,\n};\n\nenum InputName {\n\tVALUE = 'value',\n\tPRE_ADD = 'pre_add',\n\tMULT = 'mult',\n\tPOST_ADD = 'post_add',\n}\n\nexport class MultAddGlNode extends BaseNodeGlMathFunctionArg4GlNode {\n\tstatic type() {\n\t\treturn 'mult_add';\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.VALUE, InputName.PRE_ADD, InputName.MULT, InputName.POST_ADD][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst value = ThreeToGl.any(this.variable_for_input(InputName.VALUE));\n\t\tconst pre_add = ThreeToGl.any(this.variable_for_input(InputName.PRE_ADD));\n\t\tconst mult = ThreeToGl.any(this.variable_for_input(InputName.MULT));\n\t\tconst post_add = ThreeToGl.any(this.variable_for_input(InputName.POST_ADD));\n\n\t\tconst gl_type = this._expected_output_types()[0];\n\t\tconst out_name = this.io.outputs.named_output_connection_points[0].name;\n\t\tconst out = this.gl_var_name(out_name);\n\t\tconst body_line = `${gl_type} ${out} = (${mult}*(${value} + ${pre_add})) + ${post_add}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NegateGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'negate';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['in'][index]);\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn ['in'][index];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input(this._gl_input_name(0)));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${gl_type} ${out} = -1.0 * ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import lodash_range from 'lodash/range';\nimport {TypedGlNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\n// https://github.com/stegu/webgl-noise/\nimport NoiseCommon from './gl/noise/common.glsl';\n// import cellular2D from './Gl/noise/cellular2D.glsl'\n// import cellular2x2 from './Gl/noise/cellular2x2.glsl'\n// import cellular2x2x2 from './Gl/noise/cellular2x2x2.glsl'\n// import cellular3D from './Gl/noise/cellular3D.glsl'\nimport classicnoise2D from './gl/noise/classicnoise2D.glsl';\nimport classicnoise3D from './gl/noise/classicnoise3D.glsl';\nimport classicnoise4D from './gl/noise/classicnoise4D.glsl';\nimport noise2D from './gl/noise/noise2D.glsl';\nimport noise3D from './gl/noise/noise3D.glsl';\n// import noise3Dgrad from './Gl/noise/noise3Dgrad.glsl'\nimport noise4D from './gl/noise/noise4D.glsl';\nimport {ConnectionPointType, ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n// import psrdnoise2D from './Gl/noise/psrdnoise2D.glsl'\n\nenum NOISE_NAME {\n\t// 'cellular2D',\n\t// 'cellular2x2',\n\t// 'cellular2x2x2',\n\t// 'cellular3D',\n\tCLASSIC_PERLIN_2D = 'Classic Perlin 2D',\n\t// 'Classic Perlin 2D with periodic variant',\n\tCLASSIC_PERLIN_3D = 'Classic Perlin 3D',\n\t// 'Classic Perlin 3D with periodic variant',\n\tCLASSIC_PERLIN_4D = 'Classic Perlin 4D',\n\t// 'Classic Perlin 4D with periodic variant',\n\tNOISE_2D = 'noise2D',\n\tNOISE_3D = 'noise3D',\n\t// 'noise3Dgrad',\n\tNOISE_4D = 'noise4D',\n\t// 'Periodic Simplex Rotating Derivative', // psrdnoise\n\t// 'Periodic Simplex Derivative', // psdnoise\n\t// 'Periodic Simplex Rotating', // psrnoise\n\t// 'Periodic Simplex', // psnoise\n\t// 'Simplex Rotating Derivating', // srdnoise\n\t// 'Simplex Derivating', // sdnoise\n\t// 'Simplex Rotating', // srnoise\n\t// 'Simplex', // snoise\n}\nconst NOISE_NAMES: Array<NOISE_NAME> = [\n\tNOISE_NAME.CLASSIC_PERLIN_2D,\n\tNOISE_NAME.CLASSIC_PERLIN_3D,\n\tNOISE_NAME.CLASSIC_PERLIN_4D,\n\tNOISE_NAME.NOISE_2D,\n\tNOISE_NAME.NOISE_3D,\n\tNOISE_NAME.NOISE_4D,\n];\n\ntype StringByNoise = {[key in NOISE_NAME]: string};\nconst IMPORT_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: classicnoise2D,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: classicnoise3D,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: classicnoise4D,\n\t[NOISE_NAME.NOISE_2D]: noise2D,\n\t[NOISE_NAME.NOISE_3D]: noise3D,\n\t[NOISE_NAME.NOISE_4D]: noise4D,\n};\ntype ConnectionTypeByNoise = {[key in NOISE_NAME]: ConnectionPointType};\nconst INPUT_TYPES_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.VEC4,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.VEC2,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.VEC3,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.VEC4,\n};\n\nconst OUTPUT_TYPE_BY_NOISE_NAME: ConnectionTypeByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_2D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_3D]: ConnectionPointType.FLOAT,\n\t[NOISE_NAME.NOISE_4D]: ConnectionPointType.FLOAT,\n};\nconst METHOD_NAMES_BY_NOISE_NAME: StringByNoise = {\n\t[NOISE_NAME.CLASSIC_PERLIN_2D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_3D]: 'cnoise',\n\t[NOISE_NAME.CLASSIC_PERLIN_4D]: 'cnoise',\n\t[NOISE_NAME.NOISE_2D]: 'snoise',\n\t[NOISE_NAME.NOISE_3D]: 'snoise',\n\t[NOISE_NAME.NOISE_4D]: 'snoise',\n};\n\nenum OUTPUT_TYPE {\n\tNoChange = 0,\n\tFloat = 1,\n\tVec2 = 2,\n\tVec3 = 3,\n\tVec4 = 4,\n}\nconst OUTPUT_TYPES: Array<OUTPUT_TYPE> = [\n\tOUTPUT_TYPE.NoChange,\n\tOUTPUT_TYPE.Float,\n\tOUTPUT_TYPE.Vec2,\n\tOUTPUT_TYPE.Vec3,\n\tOUTPUT_TYPE.Vec4,\n];\ntype StringByOutputType = {[key in OUTPUT_TYPE]: string};\nconst OUTPUT_TYPE_LABEL: StringByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: 'Same as noise',\n\t[OUTPUT_TYPE.Float]: 'Float',\n\t[OUTPUT_TYPE.Vec2]: 'Vec2',\n\t[OUTPUT_TYPE.Vec3]: 'Vec3',\n\t[OUTPUT_TYPE.Vec4]: 'Vec4',\n};\ntype ConnectionTypeByOutputType = {[key in OUTPUT_TYPE]: ConnectionPointType};\nconst CONNECTION_TYPE_BY_OUTPUT_TYPE: ConnectionTypeByOutputType = {\n\t[OUTPUT_TYPE.NoChange]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Float]: ConnectionPointType.FLOAT,\n\t[OUTPUT_TYPE.Vec2]: ConnectionPointType.VEC2,\n\t[OUTPUT_TYPE.Vec3]: ConnectionPointType.VEC3,\n\t[OUTPUT_TYPE.Vec4]: ConnectionPointType.VEC4,\n};\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\nconst OUTPUT_NAME = 'noise';\nconst default_noise_type = NOISE_NAMES.indexOf(NOISE_NAME.NOISE_3D);\nconst default_output_type = OUTPUT_TYPE.NoChange;\n\nconst DefaultValues: Dictionary<number> = {\n\tamp: 1,\n\tfreq: 1,\n};\n\nenum InputName {\n\tAMP = 'amp',\n\tPOSITION = 'position',\n\tFREQ = 'freq',\n\tOFFSET = 'offset',\n}\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nclass NoiseGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(default_noise_type, {\n\t\tmenu: {\n\t\t\tentries: NOISE_NAMES.map((noise_name, i) => {\n\t\t\t\tconst noise_output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\t\tconst name = `${noise_name} (output: ${noise_output_type})`;\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\toutput_type = ParamConfig.INTEGER(default_output_type, {\n\t\tmenu: {\n\t\t\tentries: OUTPUT_TYPES.map((output_type) => {\n\t\t\t\tconst val = OUTPUT_TYPES[output_type];\n\t\t\t\tconst name = OUTPUT_TYPE_LABEL[val];\n\t\t\t\treturn {name: name, value: val};\n\t\t\t}),\n\t\t},\n\t});\n\toctaves = ParamConfig.INTEGER(3, {range: [1, 10], range_locked: [true, false]});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseparator = ParamConfig.SEPARATOR();\n}\nconst ParamsConfig = new NoiseGlParamsConfig();\nexport class NoiseGlNode extends TypedGlNode<NoiseGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\t\tthis.spare_params_controller.set_inputless_param_names(['octaves', 'amp_attenuation', 'freq_increase']);\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn [InputName.AMP, InputName.POSITION, InputName.FREQ, InputName.OFFSET][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\n\tprivate _expected_input_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\treturn [type, type, type, type];\n\t}\n\tprivate _expected_output_types(): ConnectionPointType[] {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst output_type = OUTPUT_TYPES[this.pv.output_type];\n\t\tif (output_type == OUTPUT_TYPE.NoChange) {\n\t\t\treturn [OUTPUT_TYPE_BY_NOISE_NAME[noise_name]];\n\t\t} else {\n\t\t\treturn [CONNECTION_TYPE_BY_OUTPUT_TYPE[output_type]];\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst noise_function = IMPORT_BY_NOISE_NAME[noise_name];\n\t\tconst noise_output_gl_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, NoiseCommon));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, noise_function));\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, noise_output_gl_type, this.fbm_function()));\n\n\t\tconst output_gl_type = this._expected_output_types()[0];\n\n\t\t// if the requested output type matches the noise signature\n\t\tif (output_gl_type == noise_output_gl_type) {\n\t\t\tconst line = this.single_noise_line();\n\t\t\t// body_lines.push( `${output_gl_type} ${noise} = ${amp}*${method_name}(${joined_args})` )\n\t\t\tbody_lines.push(line);\n\t\t} else {\n\t\t\t// if the requested output type does not match the noise signature\n\t\t\tconst requested_components_count = ConnectionPointComponentsCountMap[output_gl_type];\n\t\t\t// const noise_output_components_count = OUTPUT_TYPE_BY_NOISE_NAME[output_gl_type]\n\n\t\t\t// console.log(\"compare\", output_gl_type, requested_components_count, noise_output_components_count)\n\t\t\t// if(requested_components_count < noise_output_components_count){\n\t\t\t// \t// not sure we ever go through here with the current noise set\n\t\t\t// \tlet component = lodash_range(requested_components_count).map(i=>ALL_COMPONENTS[i]).join('')\n\t\t\t// \tconst line = this.single_noise_line('', component)\n\t\t\t// \tbody_lines.push(line)\n\t\t\t// } else {\n\t\t\tconst lines_count_required = requested_components_count;\n\t\t\tconst assembly_args: string[] = [];\n\t\t\tconst noise = this.gl_var_name('noise');\n\t\t\tfor (let i = 0; i < lines_count_required; i++) {\n\t\t\t\tconst component = ALL_COMPONENTS[i];\n\t\t\t\tassembly_args.push(`${noise}${component}`);\n\t\t\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t\t\t// if (lodash_isArray(input_constructor)) {\n\t\t\t\t// TODO: for noise3Dgrad and other noises with 2 inputs\n\t\t\t\t// } else {\n\t\t\t\t// console.log(INPUT_TYPES_BY_NOISE_NAME, noise_name)\n\t\t\t\tconst offset_gl_type = input_type;\n\t\t\t\tconst offset_components_count = ConnectionPointComponentsCountMap[offset_gl_type];\n\t\t\t\tconst offset_values = lodash_range(offset_components_count)\n\t\t\t\t\t.map((j) => ThreeToGl.float(1000 * i))\n\t\t\t\t\t.join(', ');\n\t\t\t\tconst offset2 = `${offset_gl_type}(${offset_values})`;\n\t\t\t\tconst line = this.single_noise_line(component, component, offset2);\n\t\t\t\tbody_lines.push(line);\n\t\t\t\t// }\n\t\t\t}\n\t\t\tconst joined_args = assembly_args.join(', ');\n\t\t\tconst assembly_line = `vec${lines_count_required} ${noise} = vec${lines_count_required}(${joined_args})`;\n\t\t\tbody_lines.push(assembly_line);\n\t\t\t// }\n\t\t}\n\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate fbm_method_name() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\t\treturn `fbm_${method_name}_${this.name}`;\n\t}\n\n\tprivate fbm_function() {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\tconst method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name];\n\n\t\tconst input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\n\t\treturn `\nfloat ${this.fbm_method_name()} (in ${input_type} st) {\n\tfloat value = 0.0;\n\tfloat amplitude = 1.0;\n\tfor (int i = 0; i < ${ThreeToGl.int(this.pv.octaves)}; i++) {\n\t\tvalue += amplitude * ${method_name}(st);\n\t\tst *= ${ThreeToGl.float(this.pv.freq_increase)};\n\t\tamplitude *= ${ThreeToGl.float(this.pv.amp_attenuation)};\n\t}\n\treturn value;\n}\n`;\n\t}\n\n\tprivate single_noise_line(output_name_suffix?: string, component?: string, offset2?: string) {\n\t\tconst noise_name = NOISE_NAMES[this.pv.type];\n\t\t// const method_name = METHOD_NAMES_BY_NOISE_NAME[noise_name]\n\t\tconst method_name = this.fbm_method_name();\n\n\t\tconst amp = ThreeToGl.any(this.variable_for_input(InputName.AMP));\n\t\tconst position = ThreeToGl.any(this.variable_for_input(InputName.POSITION));\n\t\tconst freq = ThreeToGl.any(this.variable_for_input(InputName.FREQ));\n\t\tlet offset = ThreeToGl.any(this.variable_for_input(InputName.OFFSET));\n\t\tif (offset2) {\n\t\t\toffset = `(${offset}+${offset2})`;\n\t\t}\n\t\tconst args = [`(${position}*${freq})+${offset}`];\n\n\t\t// we cannot use amp as is in all cases\n\t\t// if the noise outputs a vec2 and the amp is vec3, we cannot simply do vec3*vec2\n\t\t// therefore, in such a case, we must only take the required component of vec3\n\t\t// examples:\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is float:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec2) and requested output is vec2:\n\t\t//\t\tnothing to do\n\t\t// - noise is cellular 2D (outputs vec3) and requested output is vec2:\n\t\t//\t\twe have:\n\t\t//\t\t\tx = amp.x * vec2.x\n\t\t//\t\t\ty = amp.y * vec2.y\n\t\t//\t\t\tz = amp.z * 0\n\t\t//\t\t\toutput = vec3(x,y,z)\n\n\t\t// add other args if required\n\t\t// const input_type = INPUT_TYPES_BY_NOISE_NAME[noise_name];\n\t\t// if (lodash_isArray(input_constructor)) {\n\t\t// \tconst properties = lodash_clone(input_constructor);\n\t\t// \tproperties.shift(); // remove position\n\t\t// \tproperties.forEach((property) => {\n\t\t// \t\tconst arg_name = Object.keys(property)[0];\n\t\t// \t\tconst arg = ThreeToGl.any(this.variable_for_input(arg_name));\n\t\t// \t\targs.push(arg);\n\t\t// \t});\n\t\t// }\n\t\tconst joined_args = args.join(', ');\n\n\t\t// let output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name]\n\n\t\tconst noise = this.gl_var_name(OUTPUT_NAME);\n\t\tconst right_hand = `${amp}*${method_name}(${joined_args})`;\n\t\tif (component) {\n\t\t\treturn `float ${noise}${output_name_suffix} = (${right_hand}).${component}`;\n\t\t} else {\n\t\t\t// it looks like we never go here with the current set of noises\n\t\t\tconst output_type = OUTPUT_TYPE_BY_NOISE_NAME[noise_name];\n\t\t\treturn `${output_type} ${noise} = ${right_hand}`;\n\t\t}\n\t}\n}\n","export default \"// Modulo 289 without a division (only multiplications)\\nfloat mod289(float x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec2 mod289(vec2 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec3 mod289(vec3 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\nvec4 mod289(vec4 x) {\\n  return x - floor(x * (1.0 / 289.0)) * 289.0;\\n}\\n// Modulo 7 without a division\\nvec3 mod7(vec3 x) {\\n  return x - floor(x * (1.0 / 7.0)) * 7.0;\\n}\\n\\n// Permutation polynomial: (34x^2 + x) mod 289\\nfloat permute(float x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\nvec3 permute(vec3 x) {\\n  return mod289((34.0 * x + 1.0) * x);\\n}\\nvec4 permute(vec4 x) {\\n     return mod289(((x*34.0)+1.0)*x);\\n}\\n\\nfloat taylorInvSqrt(float r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\nvec4 taylorInvSqrt(vec4 r)\\n{\\n  return 1.79284291400159 - 0.85373472095314 * r;\\n}\\n\\nvec2 fade(vec2 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec3 fade(vec3 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\\nvec4 fade(vec4 t) {\\n  return t*t*t*(t*(t*6.0-15.0)+10.0);\\n}\"","export default \"//\\n// GLSL textureless classic 2D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec2 P)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod289(Pi); // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec2 P, vec2 rep)\\n{\\n  vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\\n  vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\\n  Pi = mod(Pi, rep.xyxy); // To create noise with explicit period\\n  Pi = mod289(Pi);        // To avoid truncation effects in permutation\\n  vec4 ix = Pi.xzxz;\\n  vec4 iy = Pi.yyww;\\n  vec4 fx = Pf.xzxz;\\n  vec4 fy = Pf.yyww;\\n\\n  vec4 i = permute(permute(ix) + iy);\\n\\n  vec4 gx = fract(i * (1.0 / 41.0)) * 2.0 - 1.0 ;\\n  vec4 gy = abs(gx) - 0.5 ;\\n  vec4 tx = floor(gx + 0.5);\\n  gx = gx - tx;\\n\\n  vec2 g00 = vec2(gx.x,gy.x);\\n  vec2 g10 = vec2(gx.y,gy.y);\\n  vec2 g01 = vec2(gx.z,gy.z);\\n  vec2 g11 = vec2(gx.w,gy.w);\\n\\n  vec4 norm = taylorInvSqrt(vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11)));\\n  g00 *= norm.x;  \\n  g01 *= norm.y;  \\n  g10 *= norm.z;  \\n  g11 *= norm.w;  \\n\\n  float n00 = dot(g00, vec2(fx.x, fy.x));\\n  float n10 = dot(g10, vec2(fx.y, fy.y));\\n  float n01 = dot(g01, vec2(fx.z, fy.z));\\n  float n11 = dot(g11, vec2(fx.w, fy.w));\\n\\n  vec2 fade_xy = fade(Pf.xy);\\n  vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\\n  float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\\n  return 2.3 * n_xy;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 3D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-10-11\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n// Classic Perlin noise\\nfloat cnoise(vec3 P)\\n{\\n  vec3 Pi0 = floor(P); // Integer part for indexing\\n  vec3 Pi1 = Pi0 + vec3(1.0); // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\\n// Classic Perlin noise, periodic variant\\nfloat pnoise(vec3 P, vec3 rep)\\n{\\n  vec3 Pi0 = mod(floor(P), rep); // Integer part, modulo period\\n  vec3 Pi1 = mod(Pi0 + vec3(1.0), rep); // Integer part + 1, mod period\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec3 Pf0 = fract(P); // Fractional part for interpolation\\n  vec3 Pf1 = Pf0 - vec3(1.0); // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = Pi0.zzzz;\\n  vec4 iz1 = Pi1.zzzz;\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n\\n  vec4 gx0 = ixy0 * (1.0 / 7.0);\\n  vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;\\n  gx0 = fract(gx0);\\n  vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);\\n  vec4 sz0 = step(gz0, vec4(0.0));\\n  gx0 -= sz0 * (step(0.0, gx0) - 0.5);\\n  gy0 -= sz0 * (step(0.0, gy0) - 0.5);\\n\\n  vec4 gx1 = ixy1 * (1.0 / 7.0);\\n  vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;\\n  gx1 = fract(gx1);\\n  vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);\\n  vec4 sz1 = step(gz1, vec4(0.0));\\n  gx1 -= sz1 * (step(0.0, gx1) - 0.5);\\n  gy1 -= sz1 * (step(0.0, gy1) - 0.5);\\n\\n  vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);\\n  vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);\\n  vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);\\n  vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);\\n  vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);\\n  vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);\\n  vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);\\n  vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);\\n\\n  vec4 norm0 = taylorInvSqrt(vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110)));\\n  g000 *= norm0.x;\\n  g010 *= norm0.y;\\n  g100 *= norm0.z;\\n  g110 *= norm0.w;\\n  vec4 norm1 = taylorInvSqrt(vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111)));\\n  g001 *= norm1.x;\\n  g011 *= norm1.y;\\n  g101 *= norm1.z;\\n  g111 *= norm1.w;\\n\\n  float n000 = dot(g000, Pf0);\\n  float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));\\n  float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));\\n  float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));\\n  float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));\\n  float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));\\n  float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));\\n  float n111 = dot(g111, Pf1);\\n\\n  vec3 fade_xyz = fade(Pf0);\\n  vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);\\n  vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);\\n  float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); \\n  return 2.2 * n_xyz;\\n}\\n\"","export default \"//\\n// GLSL textureless classic 4D noise \\\"cnoise\\\",\\n// with an RSL-style periodic variant \\\"pnoise\\\".\\n// Author:  Stefan Gustavson (stefan.gustavson@liu.se)\\n// Version: 2011-08-22\\n//\\n// Many thanks to Ian McEwan of Ashima Arts for the\\n// ideas for permutation and gradient selection.\\n//\\n// Copyright (c) 2011 Stefan Gustavson. All rights reserved.\\n// Distributed under the MIT license. See LICENSE file.\\n// https://github.com/stegu/webgl-noise\\n//\\n\\n\\n\\n// Classic Perlin noise\\nfloat cnoise(vec4 P)\\n{\\n  vec4 Pi0 = floor(P); // Integer part for indexing\\n  vec4 Pi1 = Pi0 + 1.0; // Integer part + 1\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\\n// Classic Perlin noise, periodic version\\nfloat pnoise(vec4 P, vec4 rep)\\n{\\n  vec4 Pi0 = mod(floor(P), rep); // Integer part modulo rep\\n  vec4 Pi1 = mod(Pi0 + 1.0, rep); // Integer part + 1 mod rep\\n  Pi0 = mod289(Pi0);\\n  Pi1 = mod289(Pi1);\\n  vec4 Pf0 = fract(P); // Fractional part for interpolation\\n  vec4 Pf1 = Pf0 - 1.0; // Fractional part - 1.0\\n  vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);\\n  vec4 iy = vec4(Pi0.yy, Pi1.yy);\\n  vec4 iz0 = vec4(Pi0.zzzz);\\n  vec4 iz1 = vec4(Pi1.zzzz);\\n  vec4 iw0 = vec4(Pi0.wwww);\\n  vec4 iw1 = vec4(Pi1.wwww);\\n\\n  vec4 ixy = permute(permute(ix) + iy);\\n  vec4 ixy0 = permute(ixy + iz0);\\n  vec4 ixy1 = permute(ixy + iz1);\\n  vec4 ixy00 = permute(ixy0 + iw0);\\n  vec4 ixy01 = permute(ixy0 + iw1);\\n  vec4 ixy10 = permute(ixy1 + iw0);\\n  vec4 ixy11 = permute(ixy1 + iw1);\\n\\n  vec4 gx00 = ixy00 * (1.0 / 7.0);\\n  vec4 gy00 = floor(gx00) * (1.0 / 7.0);\\n  vec4 gz00 = floor(gy00) * (1.0 / 6.0);\\n  gx00 = fract(gx00) - 0.5;\\n  gy00 = fract(gy00) - 0.5;\\n  gz00 = fract(gz00) - 0.5;\\n  vec4 gw00 = vec4(0.75) - abs(gx00) - abs(gy00) - abs(gz00);\\n  vec4 sw00 = step(gw00, vec4(0.0));\\n  gx00 -= sw00 * (step(0.0, gx00) - 0.5);\\n  gy00 -= sw00 * (step(0.0, gy00) - 0.5);\\n\\n  vec4 gx01 = ixy01 * (1.0 / 7.0);\\n  vec4 gy01 = floor(gx01) * (1.0 / 7.0);\\n  vec4 gz01 = floor(gy01) * (1.0 / 6.0);\\n  gx01 = fract(gx01) - 0.5;\\n  gy01 = fract(gy01) - 0.5;\\n  gz01 = fract(gz01) - 0.5;\\n  vec4 gw01 = vec4(0.75) - abs(gx01) - abs(gy01) - abs(gz01);\\n  vec4 sw01 = step(gw01, vec4(0.0));\\n  gx01 -= sw01 * (step(0.0, gx01) - 0.5);\\n  gy01 -= sw01 * (step(0.0, gy01) - 0.5);\\n\\n  vec4 gx10 = ixy10 * (1.0 / 7.0);\\n  vec4 gy10 = floor(gx10) * (1.0 / 7.0);\\n  vec4 gz10 = floor(gy10) * (1.0 / 6.0);\\n  gx10 = fract(gx10) - 0.5;\\n  gy10 = fract(gy10) - 0.5;\\n  gz10 = fract(gz10) - 0.5;\\n  vec4 gw10 = vec4(0.75) - abs(gx10) - abs(gy10) - abs(gz10);\\n  vec4 sw10 = step(gw10, vec4(0.0));\\n  gx10 -= sw10 * (step(0.0, gx10) - 0.5);\\n  gy10 -= sw10 * (step(0.0, gy10) - 0.5);\\n\\n  vec4 gx11 = ixy11 * (1.0 / 7.0);\\n  vec4 gy11 = floor(gx11) * (1.0 / 7.0);\\n  vec4 gz11 = floor(gy11) * (1.0 / 6.0);\\n  gx11 = fract(gx11) - 0.5;\\n  gy11 = fract(gy11) - 0.5;\\n  gz11 = fract(gz11) - 0.5;\\n  vec4 gw11 = vec4(0.75) - abs(gx11) - abs(gy11) - abs(gz11);\\n  vec4 sw11 = step(gw11, vec4(0.0));\\n  gx11 -= sw11 * (step(0.0, gx11) - 0.5);\\n  gy11 -= sw11 * (step(0.0, gy11) - 0.5);\\n\\n  vec4 g0000 = vec4(gx00.x,gy00.x,gz00.x,gw00.x);\\n  vec4 g1000 = vec4(gx00.y,gy00.y,gz00.y,gw00.y);\\n  vec4 g0100 = vec4(gx00.z,gy00.z,gz00.z,gw00.z);\\n  vec4 g1100 = vec4(gx00.w,gy00.w,gz00.w,gw00.w);\\n  vec4 g0010 = vec4(gx10.x,gy10.x,gz10.x,gw10.x);\\n  vec4 g1010 = vec4(gx10.y,gy10.y,gz10.y,gw10.y);\\n  vec4 g0110 = vec4(gx10.z,gy10.z,gz10.z,gw10.z);\\n  vec4 g1110 = vec4(gx10.w,gy10.w,gz10.w,gw10.w);\\n  vec4 g0001 = vec4(gx01.x,gy01.x,gz01.x,gw01.x);\\n  vec4 g1001 = vec4(gx01.y,gy01.y,gz01.y,gw01.y);\\n  vec4 g0101 = vec4(gx01.z,gy01.z,gz01.z,gw01.z);\\n  vec4 g1101 = vec4(gx01.w,gy01.w,gz01.w,gw01.w);\\n  vec4 g0011 = vec4(gx11.x,gy11.x,gz11.x,gw11.x);\\n  vec4 g1011 = vec4(gx11.y,gy11.y,gz11.y,gw11.y);\\n  vec4 g0111 = vec4(gx11.z,gy11.z,gz11.z,gw11.z);\\n  vec4 g1111 = vec4(gx11.w,gy11.w,gz11.w,gw11.w);\\n\\n  vec4 norm00 = taylorInvSqrt(vec4(dot(g0000, g0000), dot(g0100, g0100), dot(g1000, g1000), dot(g1100, g1100)));\\n  g0000 *= norm00.x;\\n  g0100 *= norm00.y;\\n  g1000 *= norm00.z;\\n  g1100 *= norm00.w;\\n\\n  vec4 norm01 = taylorInvSqrt(vec4(dot(g0001, g0001), dot(g0101, g0101), dot(g1001, g1001), dot(g1101, g1101)));\\n  g0001 *= norm01.x;\\n  g0101 *= norm01.y;\\n  g1001 *= norm01.z;\\n  g1101 *= norm01.w;\\n\\n  vec4 norm10 = taylorInvSqrt(vec4(dot(g0010, g0010), dot(g0110, g0110), dot(g1010, g1010), dot(g1110, g1110)));\\n  g0010 *= norm10.x;\\n  g0110 *= norm10.y;\\n  g1010 *= norm10.z;\\n  g1110 *= norm10.w;\\n\\n  vec4 norm11 = taylorInvSqrt(vec4(dot(g0011, g0011), dot(g0111, g0111), dot(g1011, g1011), dot(g1111, g1111)));\\n  g0011 *= norm11.x;\\n  g0111 *= norm11.y;\\n  g1011 *= norm11.z;\\n  g1111 *= norm11.w;\\n\\n  float n0000 = dot(g0000, Pf0);\\n  float n1000 = dot(g1000, vec4(Pf1.x, Pf0.yzw));\\n  float n0100 = dot(g0100, vec4(Pf0.x, Pf1.y, Pf0.zw));\\n  float n1100 = dot(g1100, vec4(Pf1.xy, Pf0.zw));\\n  float n0010 = dot(g0010, vec4(Pf0.xy, Pf1.z, Pf0.w));\\n  float n1010 = dot(g1010, vec4(Pf1.x, Pf0.y, Pf1.z, Pf0.w));\\n  float n0110 = dot(g0110, vec4(Pf0.x, Pf1.yz, Pf0.w));\\n  float n1110 = dot(g1110, vec4(Pf1.xyz, Pf0.w));\\n  float n0001 = dot(g0001, vec4(Pf0.xyz, Pf1.w));\\n  float n1001 = dot(g1001, vec4(Pf1.x, Pf0.yz, Pf1.w));\\n  float n0101 = dot(g0101, vec4(Pf0.x, Pf1.y, Pf0.z, Pf1.w));\\n  float n1101 = dot(g1101, vec4(Pf1.xy, Pf0.z, Pf1.w));\\n  float n0011 = dot(g0011, vec4(Pf0.xy, Pf1.zw));\\n  float n1011 = dot(g1011, vec4(Pf1.x, Pf0.y, Pf1.zw));\\n  float n0111 = dot(g0111, vec4(Pf0.x, Pf1.yzw));\\n  float n1111 = dot(g1111, Pf1);\\n\\n  vec4 fade_xyzw = fade(Pf0);\\n  vec4 n_0w = mix(vec4(n0000, n1000, n0100, n1100), vec4(n0001, n1001, n0101, n1101), fade_xyzw.w);\\n  vec4 n_1w = mix(vec4(n0010, n1010, n0110, n1110), vec4(n0011, n1011, n0111, n1111), fade_xyzw.w);\\n  vec4 n_zw = mix(n_0w, n_1w, fade_xyzw.z);\\n  vec2 n_yzw = mix(n_zw.xy, n_zw.zw, fade_xyzw.y);\\n  float n_xyzw = mix(n_yzw.x, n_yzw.y, fade_xyzw.x);\\n  return 2.2 * n_xyzw;\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D simplex noise function.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\nfloat snoise(vec2 v)\\n  {\\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\\n                      0.024390243902439); // 1.0 / 41.0\\n// First corner\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n\\n// Other corners\\n  vec2 i1;\\n  //i1.x = step( x0.y, x0.x ); // x0.x > x0.y ? 1.0 : 0.0\\n  //i1.y = 1.0 - i1.x;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  // x0 = x0 - 0.0 + 0.0 * C.xx ;\\n  // x1 = x0 - i1 + 1.0 * C.xx ;\\n  // x2 = x0 - 1.0 + 2.0 * C.xx ;\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n\\n// Permutations\\n  i = mod289(i); // Avoid truncation effects in permutation\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n\\t\\t+ i.x + vec3(0.0, i1.x, 1.0 ));\\n\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n\\n// Gradients: 41 points uniformly over a line, mapped onto a diamond.\\n// The ring size 17*17 = 289 is close to a multiple of 41 (41*7 = 287)\\n\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n\\n// Normalise gradients implicitly by scaling m\\n// Approximation of: m *= inversesqrt( a0*a0 + h*h );\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n\\n// Compute final noise value at P\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\nfloat snoise(vec3 v)\\n  { \\n  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\\n  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\\n\\n// First corner\\n  vec3 i  = floor(v + dot(v, C.yyy) );\\n  vec3 x0 =   v - i + dot(i, C.xxx) ;\\n\\n// Other corners\\n  vec3 g = step(x0.yzx, x0.xyz);\\n  vec3 l = 1.0 - g;\\n  vec3 i1 = min( g.xyz, l.zxy );\\n  vec3 i2 = max( g.xyz, l.zxy );\\n\\n  //   x0 = x0 - 0.0 + 0.0 * C.xxx;\\n  //   x1 = x0 - i1  + 1.0 * C.xxx;\\n  //   x2 = x0 - i2  + 2.0 * C.xxx;\\n  //   x3 = x0 - 1.0 + 3.0 * C.xxx;\\n  vec3 x1 = x0 - i1 + C.xxx;\\n  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y\\n  vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y\\n\\n// Permutations\\n  i = mod289(i); \\n  vec4 p = permute( permute( permute( \\n             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\\n           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) \\n           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\\n\\n// Gradients: 7x7 points over a square, mapped onto an octahedron.\\n// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)\\n  float n_ = 0.142857142857; // 1.0/7.0\\n  vec3  ns = n_ * D.wyz - D.xzx;\\n\\n  vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)\\n\\n  vec4 x_ = floor(j * ns.z);\\n  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\\n\\n  vec4 x = x_ *ns.x + ns.yyyy;\\n  vec4 y = y_ *ns.x + ns.yyyy;\\n  vec4 h = 1.0 - abs(x) - abs(y);\\n\\n  vec4 b0 = vec4( x.xy, y.xy );\\n  vec4 b1 = vec4( x.zw, y.zw );\\n\\n  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;\\n  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;\\n  vec4 s0 = floor(b0)*2.0 + 1.0;\\n  vec4 s1 = floor(b1)*2.0 + 1.0;\\n  vec4 sh = -step(h, vec4(0.0));\\n\\n  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\\n  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\\n\\n  vec3 p0 = vec3(a0.xy,h.x);\\n  vec3 p1 = vec3(a0.zw,h.y);\\n  vec3 p2 = vec3(a1.xy,h.z);\\n  vec3 p3 = vec3(a1.zw,h.w);\\n\\n//Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n\\n// Mix final noise value\\n  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\\n  m = m * m;\\n  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), \\n                                dot(p2,x2), dot(p3,x3) ) );\\n  }\\n\"","export default \"//\\n// Description : Array and textureless GLSL 2D/3D/4D simplex \\n//               noise functions.\\n//      Author : Ian McEwan, Ashima Arts.\\n//  Maintainer : stegu\\n//     Lastmod : 20110822 (ijm)\\n//     License : Copyright (C) 2011 Ashima Arts. All rights reserved.\\n//               Distributed under the MIT License. See LICENSE file.\\n//               https://github.com/ashima/webgl-noise\\n//               https://github.com/stegu/webgl-noise\\n// \\n\\n\\n\\n\\n\\n\\n\\nvec4 grad4(float j, vec4 ip)\\n  {\\n  const vec4 ones = vec4(1.0, 1.0, 1.0, -1.0);\\n  vec4 p,s;\\n\\n  p.xyz = floor( fract (vec3(j) * ip.xyz) * 7.0) * ip.z - 1.0;\\n  p.w = 1.5 - dot(abs(p.xyz), ones.xyz);\\n  s = vec4(lessThan(p, vec4(0.0)));\\n  p.xyz = p.xyz + (s.xyz*2.0 - 1.0) * s.www; \\n\\n  return p;\\n  }\\n\\t\\t\\t\\t\\t\\t\\n// (sqrt(5) - 1)/4 = F4, used once below\\n#define F4 0.309016994374947451\\n\\nfloat snoise(vec4 v)\\n  {\\n  const vec4  C = vec4( 0.138196601125011,  // (5 - sqrt(5))/20  G4\\n                        0.276393202250021,  // 2 * G4\\n                        0.414589803375032,  // 3 * G4\\n                       -0.447213595499958); // -1 + 4 * G4\\n\\n// First corner\\n  vec4 i  = floor(v + dot(v, vec4(F4)) );\\n  vec4 x0 = v -   i + dot(i, C.xxxx);\\n\\n// Other corners\\n\\n// Rank sorting originally contributed by Bill Licea-Kane, AMD (formerly ATI)\\n  vec4 i0;\\n  vec3 isX = step( x0.yzw, x0.xxx );\\n  vec3 isYZ = step( x0.zww, x0.yyz );\\n//  i0.x = dot( isX, vec3( 1.0 ) );\\n  i0.x = isX.x + isX.y + isX.z;\\n  i0.yzw = 1.0 - isX;\\n//  i0.y += dot( isYZ.xy, vec2( 1.0 ) );\\n  i0.y += isYZ.x + isYZ.y;\\n  i0.zw += 1.0 - isYZ.xy;\\n  i0.z += isYZ.z;\\n  i0.w += 1.0 - isYZ.z;\\n\\n  // i0 now contains the unique values 0,1,2,3 in each channel\\n  vec4 i3 = clamp( i0, 0.0, 1.0 );\\n  vec4 i2 = clamp( i0-1.0, 0.0, 1.0 );\\n  vec4 i1 = clamp( i0-2.0, 0.0, 1.0 );\\n\\n  //  x0 = x0 - 0.0 + 0.0 * C.xxxx\\n  //  x1 = x0 - i1  + 1.0 * C.xxxx\\n  //  x2 = x0 - i2  + 2.0 * C.xxxx\\n  //  x3 = x0 - i3  + 3.0 * C.xxxx\\n  //  x4 = x0 - 1.0 + 4.0 * C.xxxx\\n  vec4 x1 = x0 - i1 + C.xxxx;\\n  vec4 x2 = x0 - i2 + C.yyyy;\\n  vec4 x3 = x0 - i3 + C.zzzz;\\n  vec4 x4 = x0 + C.wwww;\\n\\n// Permutations\\n  i = mod289(i); \\n  float j0 = permute( permute( permute( permute(i.w) + i.z) + i.y) + i.x);\\n  vec4 j1 = permute( permute( permute( permute (\\n             i.w + vec4(i1.w, i2.w, i3.w, 1.0 ))\\n           + i.z + vec4(i1.z, i2.z, i3.z, 1.0 ))\\n           + i.y + vec4(i1.y, i2.y, i3.y, 1.0 ))\\n           + i.x + vec4(i1.x, i2.x, i3.x, 1.0 ));\\n\\n// Gradients: 7x7x6 points over a cube, mapped onto a 4-cross polytope\\n// 7*7*6 = 294, which is close to the ring size 17*17 = 289.\\n  vec4 ip = vec4(1.0/294.0, 1.0/49.0, 1.0/7.0, 0.0) ;\\n\\n  vec4 p0 = grad4(j0,   ip);\\n  vec4 p1 = grad4(j1.x, ip);\\n  vec4 p2 = grad4(j1.y, ip);\\n  vec4 p3 = grad4(j1.z, ip);\\n  vec4 p4 = grad4(j1.w, ip);\\n\\n// Normalise gradients\\n  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\\n  p0 *= norm.x;\\n  p1 *= norm.y;\\n  p2 *= norm.z;\\n  p3 *= norm.w;\\n  p4 *= taylorInvSqrt(dot(p4,p4));\\n\\n// Mix contributions from the five corners\\n  vec3 m0 = max(0.6 - vec3(dot(x0,x0), dot(x1,x1), dot(x2,x2)), 0.0);\\n  vec2 m1 = max(0.6 - vec2(dot(x3,x3), dot(x4,x4)            ), 0.0);\\n  m0 = m0 * m0;\\n  m1 = m1 * m1;\\n  return 49.0 * ( dot(m0*m0, vec3( dot( p0, x0 ), dot( p1, x1 ), dot( p2, x2 )))\\n               + dot(m1*m1, vec2( dot( p3, x3 ), dot( p4, x4 ) ) ) ) ;\\n\\n  }\\n\"","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\n// import {ParamType} from '../../../Engine/Param/_Module';\n// import {TypedConnectionFloat} from './GlData'\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class NullGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst in_value = ThreeToGl.any(this.variable_for_input('in'));\n\n\t\tconst gl_type = this.io.inputs.named_input_connection_points[0].type;\n\t\tconst out = this.gl_var_name('value');\n\t\tconst body_line = `${gl_type} ${out} = ${in_value}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ThreeToGl} from '../../../Core/ThreeToGl';\n// import {CodeBuilder} from './Util/CodeBuilder'\n// import {Definition} from './Definition/_Module';\n// import {ShaderName, LineType, LINE_TYPES} from './Assembler/Util/CodeBuilder';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass OutputGlParamsConfig extends NodeParamsConfig {\n\t// type = ParamConfig.INTEGER(0, {\n\t// \tmenu: {\n\t// \t\tentries: ConnectionPointTypes.map((name, i) => {\n\t// \t\t\treturn {name: name, value: i};\n\t// \t\t}),\n\t// \t},\n\t// });\n\t// value_float = ParamConfig.FLOAT(0, ConstantGlNode.typed_visible_options(ConnectionPointType.FLOAT));\n\t// value_vec2 = ParamConfig.VECTOR2([0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC2));\n\t// value_vec3 = ParamConfig.VECTOR3([0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC3));\n\t// value_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new OutputGlParamsConfig();\n\nexport class OutputGlNode extends TypedGlNode<OutputGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'output';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_output_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (shaders_collection_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_output(this, shaders_collection_controller);\n\t\t// }\n\t}\n\n\t// set_color_declaration(color_declaration: string){\n\t// \tthis._color_declaration = color_declaration\n\t// }\n}\n","import {TypedGlNode} from './_Base';\nimport {\n\tConnectionPointTypes,\n\tConnectionPointType,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n} from '../utils/connections/ConnectionPointType';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ParamType} from '../../poly/ParamType';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {GlConnectionsController} from './utils/ConnectionsController';\nclass ParamGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(ConnectionPointTypes.indexOf(ConnectionPointType.FLOAT), {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tas_color = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {type: ConnectionPointTypes.indexOf(ConnectionPointType.VEC3)},\n\t});\n}\nconst ParamsConfig = new ParamGlParamsConfig();\n\nexport class ParamGlNode extends TypedGlNode<ParamGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'param';\n\t}\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _on_create_set_name_if_none_bound = this._on_create_set_name_if_none.bind(this);\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\t// private _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile.bind(this));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_set_name_if_none_bound);\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => []);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointTypes[this.pv.type]]);\n\t\t// this.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\t// this.params.set_post_create_params_hook(this._update_signature_if_required_bound);\n\t\t// this.add_post_dirty_hook('_update_if_type_changed', this._update_signature_if_required_bound);\n\t}\n\t// private _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t// \tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t// \t\tthis.update_output_type();\n\t// \t\tthis.remove_dirty_state();\n\t// \t\tthis.make_output_nodes_dirty();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst definitions = [];\n\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst var_name = this.uniform_name();\n\n\t\tdefinitions.push(new UniformGLDefinition(this, gl_type, var_name));\n\t\tshaders_collection_controller.add_definitions(this, definitions);\n\t}\n\tset_param_configs() {\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst default_value = ConnectionPointInitValueMap[gl_type];\n\t\tlet param_type = ConnectionPointTypeToParamTypeMap[gl_type];\n\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tif (\n\t\t\tparam_type == ParamType.VECTOR3 &&\n\t\t\tthis.p.as_color.value &&\n\t\t\tlodash_isArray(default_value) &&\n\t\t\tdefault_value.length == 3\n\t\t) {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tParamType.COLOR,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tparam_type,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t}\n\t}\n\tuniform_name() {\n\t\tconst output_connection_point = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection_point.name);\n\t\treturn var_name;\n\t}\n\n\t// update_output_type() {\n\t// \tconst set_dirty = false;\n\t// \tthis.io.outputs.set_named_output_connection_points(\n\t// \t\t[new TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointTypes[this.pv.type])],\n\t// \t\tset_dirty\n\t// \t);\n\t// }\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tprivate _on_create_set_name_if_none() {\n\t\tif (this.pv.name == '') {\n\t\t\tthis.p.name.set(this.name);\n\t\t}\n\t}\n}\n","import {BaseGlMathFunctionGlNode} from './_BaseMathFunction';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nexport class RefractGlNode extends BaseGlMathFunctionGlNode {\n\tstatic type() {\n\t\treturn 'refract';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['I', 'N', 'eta'][index]);\n\t\tthis.gl_connections_controller.set_output_name_function((index: number) => 'refract');\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t}\n\n\tgl_method_name(): string {\n\t\treturn 'refract';\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst type = this.gl_connections_controller.first_input_connection_type() || ConnectionPointType.VEC3;\n\t\treturn [type, type, ConnectionPointType.FLOAT];\n\t}\n\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[0];\n\t\treturn [type];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatMultGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_mult';\n\t}\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat0', 'quat1'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC4,\n\t\t\tConnectionPointType.VEC4,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat0', 'quat1'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_mult';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4, ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg2GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nenum InputName {\n\tAXIS = 'axis',\n\tANGLE = 'angle',\n}\nconst InputNames: Array<InputName> = [InputName.AXIS, InputName.ANGLE];\ninterface IDefaultValues {\n\t[InputName.AXIS]: Number3;\n\t[InputName.ANGLE]: number;\n}\nconst DEFAULT_AXIS: Number3 = [0, 0, 1];\nconst DEFAULT_ANGLE: number = 0;\nconst DefaultValues: IDefaultValues = {\n\t[InputName.AXIS]: DEFAULT_AXIS,\n\t[InputName.ANGLE]: DEFAULT_ANGLE,\n};\n\nexport class QuatFromAxisAngleGlNode extends BaseNodeGlMathFunctionArg2GlNode {\n\tstatic type() {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => InputNames[index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [\n\t\t\tConnectionPointType.VEC3,\n\t\t\tConnectionPointType.FLOAT,\n\t\t]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC4]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn InputNames[index];\n\t// }\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name as InputName];\n\t}\n\tgl_method_name(): string {\n\t\treturn 'quat_from_axis_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC3, ConnectionPointType.FLOAT];\n\t// }\n\t// protected expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC4, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAngleGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_angle';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.FLOAT]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_angle';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.FLOAT];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.FLOAT, Quaternion)];\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport Quaternion from './gl/quaternion.glsl';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\n\nexport class QuatToAxisGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'quat_to_axis';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.gl_connections_controller.set_input_name_function((index: number) => ['quat'][index]);\n\t\tthis.gl_connections_controller.set_expected_input_types_function(() => [ConnectionPointType.VEC4]);\n\t\tthis.gl_connections_controller.set_expected_output_types_function(() => [ConnectionPointType.VEC3]);\n\t}\n\n\t// protected _gl_input_name(index: number) {\n\t// \treturn ['quat'][index];\n\t// }\n\tgl_method_name(): string {\n\t\treturn 'quat_to_axis';\n\t}\n\n\t// protected _expected_input_types() {\n\t// \treturn [ConnectionPointType.VEC4];\n\t// }\n\t// protected _expected_output_types() {\n\t// \treturn [ConnectionPointType.VEC3];\n\t// }\n\tgl_function_definitions() {\n\t\treturn [new FunctionGLDefinition(this, ConnectionPointType.VEC3, Quaternion)];\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {RampParam} from '../../params/Ramp';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nconst OUTPUT_NAME = 'val';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RampGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('ramp');\n\tinput = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new RampGlParamsConfig();\nexport class RampGlNode extends TypedGlNode<RampGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ramp';\n\t}\n\n\tinitialize() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst gl_type = ConnectionPointType.FLOAT;\n\t\tconst texture_name = this._uniform_name();\n\t\tconst var_name = this.gl_var_name(OUTPUT_NAME);\n\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, texture_name);\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\n\t\tconst input_val = this.variable_for_input(this.p.input.name);\n\t\tconst body_line = `${gl_type} ${var_name} = texture2D(${this._uniform_name()}, vec2(${input_val}, 0.0)).x`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.RAMP,\n\t\t\tthis.pv.name,\n\t\t\tRampParam.DEFAULT_VALUE,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn 'ramp_texture_' + this.gl_var_name(OUTPUT_NAME);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'rand';\n\nclass RandomGlParamsConfig extends NodeParamsConfig {\n\tseed = ParamConfig.VECTOR2([1, 1]);\n}\nconst ParamsConfig = new RandomGlParamsConfig();\nexport class RandomGlNode extends TypedGlNode<RandomGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'random';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n\t\t// \t\tfunction_declaration_lines.push(`highp float rand2(vec2 co){\n\t\t// \thighp float a = 12.9898;\n\t\t// \thighp float b = 78.233;\n\t\t// \thighp float c = 43758.5453;\n\t\t// \thighp float dt= dot(co.xy ,vec2(a,b));\n\t\t// \thighp float sn= mod(dt,3.14);\n\t\t// \treturn fract(sin(sn) * c);\n\t\t// }`)\n\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input('vec2'));\n\n\t\tconst float = this.gl_var_name('float');\n\t\tconst body_line = `float ${float} = rand(${value})`;\n\t\t// this.set_function_declaration_lines(function_declaration_lines)\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../../src/core/ThreeToGl';\n\nimport Rgb2Hsv from './gl/rgb2hsv.glsl';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nconst OUTPUT_NAME = 'hsv';\nclass RgbToHsvGlParamsConfig extends NodeParamsConfig {\n\trgb = ParamConfig.VECTOR3([1, 1, 1]);\n}\nconst ParamsConfig = new RgbToHsvGlParamsConfig();\nexport class RgbToHsvGlNode extends TypedGlNode<RgbToHsvGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rgb_to_hsv';\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst function_declaration_lines = [];\n\t\tconst body_lines = [];\n\n\t\tfunction_declaration_lines.push(new FunctionGLDefinition(this, ConnectionPointType.VEC3, Rgb2Hsv));\n\n\t\tconst rgb = ThreeToGl.vector3(this.variable_for_input('rgb'));\n\n\t\tconst hsv = this.gl_var_name('hsv');\n\t\tbody_lines.push(`vec3 ${hsv} = rgb2hsv(${rgb})`);\n\t\tshaders_collection_controller.add_definitions(this, function_declaration_lines);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","export default \"// https://stackoverflow.com/questions/15095909/from-rgb-to-hsv-in-opengl-glsl\\nvec3 rgb2hsv(vec3 c)\\n{\\n\\tvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\n\\tvec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\\n\\tvec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\\n\\n\\tfloat d = q.x - min(q.w, q.y);\\n\\tfloat e = 1.0e-10;\\n\\treturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\\n}\"","import {BaseAdaptiveGlNode} from './_BaseAdaptive';\nimport Quaternion from './gl/quaternion.glsl';\nimport {FunctionGLDefinition} from './utils/GLDefinition';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nenum Mode {\n\tAXIS = 0,\n\tQUAT = 1,\n}\nconst Modes: Array<Mode> = [Mode.AXIS, Mode.QUAT];\n\ntype StringByMode = {[key in Mode]: string};\nconst LabelByMode: StringByMode = {\n\t[Mode.AXIS]: 'from axis + angle',\n\t[Mode.QUAT]: 'from quaternion',\n};\ntype StringArrayByMode = {[key in Mode]: string[]};\nconst InputNamesByMode: StringArrayByMode = {\n\t[Mode.AXIS]: ['vector', 'axis', 'angle'],\n\t[Mode.QUAT]: ['vector', 'quat'],\n};\nconst MethodNameByMode: StringByMode = {\n\t[Mode.AXIS]: 'rotate_with_axis_angle',\n\t[Mode.QUAT]: 'rotate_with_quat',\n};\ntype ConnectionTypeArrayByMode = {[key in Mode]: ConnectionPointType[]};\nconst InputTypesByMode: ConnectionTypeArrayByMode = {\n\t[Mode.AXIS]: [ConnectionPointType.VEC3, ConnectionPointType.VEC3, ConnectionPointType.FLOAT],\n\t[Mode.QUAT]: [ConnectionPointType.VEC3, ConnectionPointType.VEC4],\n};\n\nconst DefaultValues: Dictionary<Number3> = {\n\tvector: [0, 0, 1],\n\taxis: [0, 1, 0],\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\n\nclass RotateParamsConfig extends NodeParamsConfig {\n\tsignature = ParamConfig.INTEGER(Mode.AXIS, {\n\t\tmenu: {\n\t\t\tentries: Modes.map((mode, i) => {\n\t\t\t\tconst label = LabelByMode[mode];\n\t\t\t\treturn {name: label, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new RotateParamsConfig();\nexport class RotateGlNode extends BaseAdaptiveGlNode<RotateParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'rotate';\n\t}\n\n\t// _signature_name: string = 'AXIS';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputNamesByMode[mode][index];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n\tgl_method_name(): string {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn MethodNameByMode[mode];\n\t}\n\n\tprotected _expected_input_types() {\n\t\tconst mode = Modes[this.pv.signature];\n\t\treturn InputTypesByMode[mode];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC3];\n\t}\n\tgl_function_definitions() {\n\t\tconst type = this._expected_output_types()[0];\n\t\treturn [new FunctionGLDefinition(this, type, Quaternion)];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst var_type: ConnectionPointType = this.io.outputs.named_output_connection_points[0].type;\n\t\tconst args = this.io.inputs.named_input_connection_points.map((connection, i) => {\n\t\t\tconst name = connection.name;\n\t\t\treturn ThreeToGl.any(this.variable_for_input(name));\n\t\t});\n\t\tconst joined_args = args.join(', ');\n\n\t\tconst sum = this.gl_var_name(this.gl_connections_controller.output_name(0));\n\t\tconst body_line = `${var_type} ${sum} = ${this.gl_method_name()}(${joined_args})`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\tshaders_collection_controller.add_definitions(this, this.gl_function_definitions());\n\t}\n}\n","import {BaseNodeGlMathFunctionArg1GlNode} from './_BaseMathFunction';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ConnectionPointComponentsCountMap} from '../utils/connections/ConnectionPointType';\n\nconst ALL_COMPONENTS = ['x', 'y', 'z', 'w'];\n// const OUTPUT_NAME = 'round'\n\nexport class RoundGlNode extends BaseNodeGlMathFunctionArg1GlNode {\n\tstatic type() {\n\t\treturn 'round';\n\t}\n\n\t// initialize_node() {\n\t// \tsuper.initialize_node();\n\t// \tthis.set_named_outputs([new TypedConnectionFloat(v)]);\n\t// }\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'value', 1);\n\t// }\n\t// https://hub.jmonkeyengine.org/t/round-with-glsl/8186/6\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// const function_declaration_lines = []\n\n\t\t// \t\tfunction_declaration_lines.push(`highp float round(float num){\n\t\t// \treturn floor(num)-fract(num);\n\t\t// }`)\n\t\tconst input_connection = this.io.inputs.named_input_connection_points[0];\n\t\tconst value = ThreeToGl.vector2(this.variable_for_input(input_connection.name));\n\n\t\tconst output_connection = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection.name);\n\n\t\tconst body_lines: string[] = [];\n\t\tconst lines_count = ConnectionPointComponentsCountMap[output_connection.type];\n\t\tif (lines_count == 1) {\n\t\t\tbody_lines.push(`${output_connection.type} ${var_name} = ${this._simple_line(value)}`);\n\t\t} else {\n\t\t\tconst simple_lines: string[] = ALL_COMPONENTS.map((c) => {\n\t\t\t\treturn this._simple_line(`${value}.${c}`);\n\t\t\t});\n\t\t\tbody_lines.push(\n\t\t\t\t`${output_connection.type} ${var_name} = ${output_connection.type}(${simple_lines.join(',')})`\n\t\t\t);\n\t\t}\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n\n\tprivate _simple_line(value: string) {\n\t\treturn `sign(${value})*floor(abs(${value})+0.5)`;\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {FileCopNode} from '../cop/File';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ParamType} from '../../poly/ParamType';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextureParamsConfig extends NodeParamsConfig {\n\tparam_name = ParamConfig.STRING('texture_map');\n\tdefault_value = ParamConfig.STRING(FileCopNode.DEFAULT_NODE_PATH.UV);\n\tuv = ParamConfig.VECTOR2([0, 0]);\n}\nconst ParamsConfig = new TextureParamsConfig();\nexport class TextureGlNode extends TypedGlNode<TextureParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'texture';\n\t}\n\tstatic readonly OUTPUT_NAME = 'rgba';\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(TextureGlNode.OUTPUT_NAME, ConnectionPointType.VEC4),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst uv = ThreeToGl.vector2(this.variable_for_input(this.p.uv.name));\n\n\t\tconst rgba = this.gl_var_name(TextureGlNode.OUTPUT_NAME);\n\t\tconst map = this._uniform_name();\n\t\tconst definition = new UniformGLDefinition(this, ConnectionPointType.SAMPLER_2D, map);\n\t\tconst body_line = `vec4 ${rgba} = texture2D(${map}, ${uv})`;\n\t\tshaders_collection_controller.add_definitions(this, [definition]);\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n\n\tset_param_configs() {\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tthis._param_configs_controller.create_and_push(\n\t\t\tParamType.OPERATOR_PATH,\n\t\t\tthis.pv.param_name,\n\t\t\tthis.pv.default_value,\n\t\t\tthis._uniform_name()\n\t\t);\n\t}\n\tprivate _uniform_name() {\n\t\treturn this.gl_var_name(this.pv.param_name);\n\t}\n}\n","import {ParamlessTypedGlNode} from './_Base';\nimport {ThreeToGl} from '../../../core/ThreeToGl';\nimport {GlConnectionsController} from './utils/ConnectionsController';\n\nconst OUTPUT_NAME = 'value';\nenum InputName {\n\tCONDITION = 'condition',\n\tIF_TRUE = 'if_true',\n\tIF_FALSE = 'if_false',\n}\nconst InputNames: Array<InputName> = [InputName.CONDITION, InputName.IF_TRUE, InputName.IF_FALSE];\n\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nexport class TwoWaySwitchGlNode extends ParamlessTypedGlNode {\n\tstatic type() {\n\t\treturn 'two_way_switch';\n\t}\n\n\tpublic readonly gl_connections_controller: GlConnectionsController = new GlConnectionsController(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.gl_connections_controller.initialize_node();\n\n\t\tthis.gl_connections_controller.set_expected_input_types_function(this._expected_input_types.bind(this));\n\t\tthis.gl_connections_controller.set_expected_output_types_function(this._expected_output_types.bind(this));\n\t\tthis.gl_connections_controller.set_input_name_function(this._gl_input_name.bind(this));\n\t\tthis.gl_connections_controller.set_output_name_function(this._gl_output_name.bind(this));\n\t}\n\n\tprotected _gl_input_name(index: number) {\n\t\treturn InputNames[index];\n\t}\n\tprotected _gl_output_name() {\n\t\treturn OUTPUT_NAME;\n\t}\n\tprotected _expected_input_types(): ConnectionPointType[] {\n\t\tconst second_or_third_connection =\n\t\t\tthis.io.connections.input_connection(1) || this.io.connections.input_connection(2);\n\t\tconst type: ConnectionPointType = second_or_third_connection\n\t\t\t? this.gl_connections_controller.connection_type_from_connection(second_or_third_connection)\n\t\t\t: ConnectionPointType.FLOAT;\n\t\treturn [ConnectionPointType.BOOL, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\tconst type = this._expected_input_types()[1];\n\t\treturn [type];\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst body_lines: string[] = [];\n\n\t\tconst value = this.gl_var_name(OUTPUT_NAME);\n\t\tconst condition = ThreeToGl.bool(this.variable_for_input(InputName.CONDITION));\n\t\tconst if_true = ThreeToGl.any(this.variable_for_input(InputName.IF_TRUE));\n\t\tconst if_false = ThreeToGl.any(this.variable_for_input(InputName.IF_FALSE));\n\n\t\tconst gl_type = this._expected_output_types()[1];\n\t\tbody_lines.push(`${gl_type} ${value}`);\n\t\tbody_lines.push(`if(${condition}){`);\n\t\tbody_lines.push(`${value} = ${if_true}`);\n\t\tbody_lines.push(`} else {`);\n\t\tbody_lines.push(`${value} = ${if_false}`);\n\t\tbody_lines.push(`}`);\n\t\tshaders_collection_controller.add_body_lines(this, body_lines);\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg3Factory} from './_Math_Arg3';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n\tup: [0, 1, 0],\n};\n\nexport class VectorAlignGlNode extends MathFunctionArg3Factory('vector_align', {\n\tin: ['start', 'end', 'up'],\n\tmethod: 'vector_align_with_up',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.VEC4];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import Quaternion from './gl/quaternion.glsl';\nimport {MathFunctionArg2Factory} from './_Math_Arg2';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst DefaultValues: Dictionary<Number3> = {\n\tstart: [0, 0, 1],\n\tend: [1, 0, 0],\n};\n\nexport class VectorAngleGlNode extends MathFunctionArg2Factory('vector_angle', {\n\tin: ['start', 'end'],\n\tmethod: 'vector_angle',\n\tfunctions: [Quaternion],\n}) {\n\tprotected _expected_input_types() {\n\t\tconst type = ConnectionPointType.VEC3;\n\t\treturn [type, type];\n\t}\n\tprotected _expected_output_types() {\n\t\treturn [ConnectionPointType.FLOAT];\n\t}\n\tgl_input_default_value(name: string) {\n\t\treturn DefaultValues[name];\n\t}\n}\n","import {CATEGORY_MAT} from './Category';\n\nimport {MeshBasicMatNode} from '../../nodes/mat/MeshBasic';\nimport {MeshBasicBuilderMatNode} from '../../nodes/mat/MeshBasicBuilder';\nimport {MeshLambertMatNode} from '../../nodes/mat/MeshLambert';\nimport {MeshLambertBuilderMatNode} from '../../nodes/mat/MeshLambertBuilder';\nimport {MeshStandardMatNode} from '../../nodes/mat/MeshStandard';\nimport {MeshStandardBuilderMatNode} from '../../nodes/mat/MeshStandardBuilder';\nimport {PointsMatNode} from '../../nodes/mat/Points';\nimport {PointsBuilderMatNode} from '../../nodes/mat/PointsBuilder';\n\nexport interface MatNodeChildrenMap {\n\tmesh_basic: MeshBasicMatNode;\n\tmesh_basic_builder: MeshBasicBuilderMatNode;\n\tmesh_lambert: MeshLambertMatNode;\n\tmesh_lambert_builder: MeshLambertBuilderMatNode;\n\tmesh_standard: MeshStandardMatNode;\n\tmesh_standard_builder: MeshStandardBuilderMatNode;\n\tpoints: PointsMatNode;\n\tpoints_builder: PointsBuilderMatNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class MatRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(MeshBasicMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshBasicBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshLambertMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshLambertBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshStandardMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshStandardBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(PointsMatNode, CATEGORY_MAT.POINTS);\n\t\tpoly.register_node(PointsBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t}\n}\n","import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends TypedMatNode<MeshBasicMaterial, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class MaterialContainer extends TypedContainer<ContainableMap['MATERIAL']> {\n\tset_content(content: ContainableMap['MATERIAL']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_material(material: Material) {\n\t\tif (this._content != null) {\n\t\t\tthis._content.dispose();\n\t\t}\n\t\tthis.set_content(material);\n\t}\n\thas_material() {\n\t\treturn this.has_content();\n\t}\n\tmaterial() {\n\t\treturn this.content();\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerBasic} from '../gl/code/assemblers/materials/Basic';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerBasic, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerBasic>(this, ShaderAssemblerBasic);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerBasic extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.basic;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst material = new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\tlights: false,\n\t\t\t// depthTest: true,\n\t\t\t// alphaTest: 0.5,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {RGBADepthPacking} from 'three/src/constants';\n// import {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomMeshDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n// fragment: 'vec4 diffuseColor = vec4( 1.0 );' // do not change? unless there is a texture lookup\n\nexport class ShaderAssemblerCustomMeshDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n}\"","import {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends TypedMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {direct_params: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tdirect_params: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerLambert} from '../gl/code/assemblers/materials/Lambert';\n\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerLambert, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerLambert>(this, ShaderAssemblerLambert);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\nexport class ShaderAssemblerLambert extends ShaderAssemblerMesh {\n\tget _template_shader() {\n\t\tconst template = ShaderLib.lambert;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader,\n\t\t\tfragmentShader: template.fragmentShader,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\tconst material = new ShaderMaterial({\n\t\t\tlights: true,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n}\n","import {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ColorParamConfig, ColorsController} from './utils/UniformsColorsController';\nimport {SideParamConfig, SideController} from './utils/SideController';\nimport {SkinningParamConfig, SkinningController} from './utils/SkinningController';\nimport {TextureMapParamConfig, TextureMapController} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig, TextureAlphaMapController} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {ShaderAssemblerStandard} from '../gl/code/assemblers/materials/Standard';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\n\nimport {SHADER_DEFAULTS} from './MeshStandard';\n\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(SHADER_DEFAULTS.metalness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_metalness(node as MeshStandardBuilderMatNode),\n\t});\n\troughness = ParamConfig.FLOAT(SHADER_DEFAULTS.roughness, {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) =>\n\t\t\tMeshStandardBuilderMatNode._update_roughness(node as MeshStandardBuilderMatNode),\n\t});\n}\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardBuilderMatNode extends TypedBuilderMatNode<\n\tShaderAssemblerStandard,\n\tMeshStandardMatParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard_builder';\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this, {uniforms: true});\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this, {\n\t\tuniforms: true,\n\t});\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this, {\n\t\tuniforms: true,\n\t\tdirect_params: true,\n\t\tdefine: false,\n\t});\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerStandard>(this, ShaderAssemblerStandard);\n\t}\n\n\tasync cook() {\n\t\tawait this.compile_if_required();\n\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tawait TextureMapController.update(this);\n\t\tawait TextureAlphaMapController.update(this);\n\t\tawait TextureEnvMapController.update(this);\n\n\t\tif (this._material) {\n\t\t\tthis._material.uniforms.envMapIntensity.value = this.pv.env_map_intensity;\n\t\t\tMeshStandardBuilderMatNode._update_metalness(this);\n\t\t\tMeshStandardBuilderMatNode._update_roughness(this);\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n\tstatic _update_metalness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.metalness.value = node.pv.metalness;\n\t}\n\tstatic _update_roughness(node: MeshStandardBuilderMatNode) {\n\t\tnode.material.uniforms.roughness.value = node.pv.roughness;\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMesh} from './_BaseMesh';\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport metalnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/metalnessmap_fragment.glsl';\nimport roughnessmap_fragment from '../../../gl/ShaderLib/ShaderChunk/roughnessmap_fragment.glsl';\nimport {OutputGlNode} from '../../../Output';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {ParamType} from '../../../../../poly/ParamType';\n\nexport class ShaderAssemblerStandard extends ShaderAssemblerMesh {\n\tis_physical() {\n\t\treturn false;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = this.is_physical() ? ShaderLib.physical : ShaderLib.standard;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\tconst options = {\n\t\t\tlights: true,\n\t\t\textensions: {\n\t\t\t\tderivatives: true,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t};\n\t\t// if(this.constructor.is_physical()){\n\t\t// \toptions['defines'] = {\n\t\t// \t\tPHYSICAL: 1\n\t\t// \t}\n\t\t// }\n\n\t\tconst material = new ShaderMaterial(options);\n\n\t\t// replace some shader chunks\n\t\tmaterial.onBeforeCompile = function(shader) {\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <metalnessmap_fragment>',\n\t\t\t\tmetalnessmap_fragment\n\t\t\t);\n\t\t\tshader.fragmentShader = shader.fragmentShader.replace(\n\t\t\t\t'#include <roughnessmap_fragment>',\n\t\t\t\troughnessmap_fragment\n\t\t\t);\n\t\t};\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material {\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial;\n\t// \tconst options = {};\n\t// \tthis._match_uniform('color', options, material, 'diffuse');\n\t// \tthis._match_uniform('map', options, material);\n\t// \tthis._match_uniform('envMap', options, material);\n\t// \tthis._match_uniform('envMapIntensity', options, material);\n\t// \tthis._match_uniform('metalness', options, material);\n\t// \tthis._match_uniform('roughness', options, material);\n\t// \tconst gltf_material = new gltf_constructor(options);\n\t// \treturn gltf_material;\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\t// those defaults should be 1. If they were 0, using the params\n\t\t// at the material level would appear not to work\n\t\toutput_child.add_param(ParamType.FLOAT, 'metalness', 1);\n\t\toutput_child.add_param(ParamType.FLOAT, 'roughness', 1);\n\t}\n\t// create_globals_node_output_connections(){\n\t// \treturn BaseShaderAssembler.create_globals_node_output_connections().concat([\n\t// \t\tnew Connection.Float('metalness'),\n\t// \t\tnew Connection.Float('roughness'),\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha', 'metalness', 'roughness'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('metalness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_metalness = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('roughness', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'float POLY_roughness = ',\n\t\t\t}),\n\t\t]);\n\t}\n}\n","export default \"float metalnessFactor = metalness * POLY_metalness;\\n\\n#ifdef USE_METALNESSMAP\\n\\n\\tvec4 texelMetalness = texture2D( metalnessMap, vUv );\\n\\n\\t// reads channel B, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\tmetalnessFactor *= texelMetalness.b;\\n\\n#endif\\n\"","export default \"float roughnessFactor = roughness * POLY_roughness;\\n\\n#ifdef USE_ROUGHNESSMAP\\n\\n\\tvec4 texelRoughness = texture2D( roughnessMap, vUv );\\n\\n\\t// reads channel G, compatible with a combined OcclusionRoughnessMetallic (RGB) texture\\n\\troughnessFactor *= texelRoughness.g;\\n\\n#endif\\n\"","import {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\n// import {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\n// import {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\tsize_attenuation = ParamConfig.BOOLEAN(1);\n\t};\n}\n\nclass PointsMatParamsConfig extends SideParamConfig(ColorParamConfig(PointsParamConfig(NodeParamsConfig))) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends TypedMatNode<PointsMaterial, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points';\n\t}\n\n\tcreate_material() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: false,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.material.size = this.pv.size;\n\t\tthis.material.sizeAttenuation = this.pv.size_attenuation;\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n\nimport {ShaderAssemblerMaterial, CustomAssemblerMap, CustomMaterialName} from './_BaseMaterial';\n\nimport {ShaderConfig} from '../../configs/ShaderConfig';\nimport {VariableConfig} from '../../configs/VariableConfig';\n\nimport {BaseGlShaderAssembler} from '../_Base';\nimport {ShaderAssemblerCustomPointsDepth} from './CustomPointsDepth';\nimport {ShaderAssemblerCustomPointsDistance} from './CustomPointsDistance';\nimport {ShaderAssemblerCustomPointsDepthDOF} from './CustomPointsDepthDOF';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', 'gl_PointSize = size;']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst CUSTOM_ASSEMBLER_MAP: CustomAssemblerMap = new Map();\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomPointsDistance);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomPointsDepth);\nCUSTOM_ASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomPointsDepthDOF);\n\nexport class ShaderAssemblerPoints extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'diffuseColor' }\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn CUSTOM_ASSEMBLER_MAP;\n\t}\n\n\tget _template_shader() {\n\t\tconst template = ShaderLib.points;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\t// const uniforms = UniformsUtils.clone( template_shader.uniforms )\n\t\t// uniforms.size.value = 10\n\n\t\tconst material = new ShaderMaterial({\n\t\t\ttransparent: true,\n\t\t\tfog: true,\n\n\t\t\t// size: 10,\n\t\t\t// //blending: AdditiveBlending\n\t\t\t// depthTest: true,\n\t\t\t// depthwrite: true,\n\t\t\t// alphaTest: 0.5,\n\t\t\tdefines: {\n\t\t\t\t// ALPHATEST: 0.5,\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t\tthis._add_custom_materials(material);\n\t\treturn material;\n\t}\n\t// protected insert_body_after(shader_name){\n\t// \treturn {\n\t// \t\tvertex: 'gl_PointSize = size;',\n\t// \t\tfragment: 'vec4 diffuseColor = vec4( diffuse, opacity );'\n\t// \t}[shader_name]\n\t// }\n\t// those shadow shaders should ideally be overriden\n\t// to properly take into account point size\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t\toutput_child.add_param(ParamType.FLOAT, 'gl_PointSize', 1);\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections().concat([\n\t\t\tnew TypedNamedConnectionPoint('gl_PointCoord', ConnectionPointType.VEC2),\n\t\t]);\n\t}\n\n\t// add_globals_params(globals_node){\n\t// \tBaseShaderAssembler.add_globals_params(globals_node)\n\t// \tglobals_node.set_named_outputs([\n\t// \t\tnew Connection.Vec3('position'),\n\t// \t\tnew Connection.Vec3('color'),\n\t// \t\tnew Connection.Vec3('normal'),\n\t// \t\tnew Connection.Vec4('gl_FragCoord'),\n\t// \t\tnew Connection.Vec2('gl_PointCoord'),\n\t// \t\t// new TypedConnectionVec2('uv'),\n\t// \t\tnew Connection.Float('frame')\n\t// \t])\n\t// }\n\tcreate_shader_configs() {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv', 'gl_PointSize'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tcreate_variable_configs() {\n\t\treturn BaseGlShaderAssembler.create_variable_configs().concat([\n\t\t\tnew VariableConfig('gl_PointSize', {\n\t\t\t\tdefault: '1.0',\n\t\t\t\tprefix: 'gl_PointSize = ',\n\t\t\t\tsuffix: ' * size * 10.0', // currently using 10 as 1 seems really small\n\t\t\t}),\n\t\t]);\n\t\t// \tnew VariableConfig('position', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t// \t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t// \t\tprefix: 'vec3 transformed = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('normal', {\n\t\t// \t\tprefix: 'objectNormal = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('color', {\n\t\t// \t\tprefix: 'diffuseColor.xyz = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('alpha', {\n\t\t// \t\tprefix: 'diffuseColor.w = '\n\t\t// \t}),\n\t\t// \tnew VariableConfig('uv', {\n\t\t// \t\tdefault_from_attribute: true,\n\t\t// \t\tprefix: 'vUv = ',\n\t\t// \t\tif: 'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )'\n\t\t// \t}),\n\t\t// \tnew VariableConfig('gl_PointSize', {\n\t\t// \t\tdefault: '1.0',\n\t\t// \t\tprefix: 'gl_PointSize = ',\n\t\t// \t\tsuffix: ' * size',\n\t\t// \t}),\n\t\t// ]\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepth.vert.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepth extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <logdepthbuf_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDistance.vert.glsl';\n\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDistance extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\n\t\tconst uniforms = UniformsUtils.clone(template.uniforms);\n\t\tuniforms['size'] = {value: 1};\n\t\tuniforms['scale'] = {value: 1};\n\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: uniforms,\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#define DISTANCE\\nvarying vec3 vWorldPosition;\\n#include <common>\\n#include <clipping_planes_pars_vertex>\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\t#include <worldpos_vertex>\\n\\t#include <clipping_planes_vertex>\\n\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\tvWorldPosition = worldPosition.xyz;\\n}\\n\\n// #define DISTANCE\\n// varying vec3 vWorldPosition;\\n// #include <common>\\n// #include <uv_pars_vertex>\\n// #include <displacementmap_pars_vertex>\\n// #include <morphtarget_pars_vertex>\\n// #include <skinning_pars_vertex>\\n// #include <clipping_planes_pars_vertex>\\n// void main() {\\n// \\t#include <uv_vertex>\\n// \\t#include <skinbase_vertex>\\n// \\t#ifdef USE_DISPLACEMENTMAP\\n// \\t\\t#include <beginnormal_vertex>\\n// \\t\\t#include <morphnormal_vertex>\\n// \\t\\t#include <skinnormal_vertex>\\n// \\t#endif\\n// \\t#include <begin_vertex>\\n// \\t#include <morphtarget_vertex>\\n// \\t#include <skinning_vertex>\\n// \\t#include <displacementmap_vertex>\\n// \\t#include <project_vertex>\\n// \\t#include <worldpos_vertex>\\n// \\t#include <clipping_planes_vertex>\\n// \\tvWorldPosition = worldPosition.xyz;\\n// }\\n\\n\\n\"","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib'\n// import {RGBADepthPacking} from 'three/src/constants'\n// import {BasicDepthPacking} from 'three/src/constants'\n\nimport {ShaderAssemblerMaterial} from './_BaseMaterial';\n\nimport TemplateVertex from '../../templates/CustomPointsDepthDOF.vert.glsl';\nimport TemplateFragment from '../../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n\nexport class ShaderAssemblerCustomPointsDepthDOF extends ShaderAssemblerMaterial {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tsize: {value: 1},\n\t\t\t\tscale: {value: 1},\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\tcreate_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\t\t\tdepthTest: true,\n\t\t\tdefines: {\n\t\t\t\tUSE_SIZEATTENUATION: 1,\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"uniform float size;\\nuniform float scale;\\n#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n\\t#ifdef USE_SIZEATTENUATION\\n\\t\\tbool isPerspective = ( projectionMatrix[ 2 ][ 3 ] == - 1.0 );\\n\\t\\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\\n\\t#endif\\n\\n}\\n\\n\"","import {CATEGORY_OBJ} from './Category';\n\nimport {AmbientLightObjNode} from '../../nodes/obj/AmbientLight';\nimport {AreaLightObjNode} from '../../nodes/obj/AreaLight';\nimport {DirectionalLightObjNode} from '../../nodes/obj/DirectionalLight';\nimport {HemisphereLightObjNode} from '../../nodes/obj/HemisphereLight';\nimport {PointLightObjNode} from '../../nodes/obj/PointLight';\nimport {SpotLightObjNode} from '../../nodes/obj/SpotLight';\n\nimport {EventsObjNode} from '../../nodes/obj/Events';\nimport {MaterialsObjNode} from '../../nodes/obj/Materials';\nimport {CopObjNode} from '../../nodes/obj/Cop';\nimport {PostProcessObjNode} from '../../nodes/obj/PostProcess';\n\nimport {GeoObjNode} from '../../nodes/obj/Geo';\nimport {NullObjNode} from '../../nodes/obj/Null';\nimport {FogObjNode} from '../../nodes/obj/Fog';\nimport {SceneObjNode} from '../../nodes/obj/Scene';\n\nimport {OrthographicCameraObjNode} from '../../nodes/obj/OrthographicCamera';\nimport {PerspectiveCameraObjNode} from '../../nodes/obj/PerspectiveCamera';\n// import {CubeCameraObj} from '../../nodes/obj/CubeCamera';\n\nexport interface ObjNodeChildrenMap {\n\tambient_light: AmbientLightObjNode;\n\tarea_light: AreaLightObjNode;\n\tcop: CopObjNode;\n\tdirectional_light: DirectionalLightObjNode;\n\tevents: EventsObjNode;\n\tfog: FogObjNode;\n\tgeo: GeoObjNode;\n\themisphere_light: HemisphereLightObjNode;\n\tmaterials: MaterialsObjNode;\n\tnull: NullObjNode;\n\torthographic_camera: OrthographicCameraObjNode;\n\tperspective_camera: PerspectiveCameraObjNode;\n\tpoint_light: PointLightObjNode;\n\tpost_process: PostProcessObjNode;\n\tscene: SceneObjNode;\n\tspot_light: SpotLightObjNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class ObjRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AmbientLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(AreaLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(DirectionalLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(HemisphereLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(PointLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(SpotLightObjNode, CATEGORY_OBJ.LIGHT);\n\n\t\tpoly.register_node(EventsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(MaterialsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(CopObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(PostProcessObjNode, CATEGORY_OBJ.MANAGER);\n\n\t\tpoly.register_node(GeoObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(NullObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(SceneObjNode, CATEGORY_OBJ.MISC);\n\n\t\tpoly.register_node(OrthographicCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\tpoly.register_node(PerspectiveCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\t// poly.register_node(CubeCameraObj, CATEGORY_OBJ.CAMERA)\n\n\t\tpoly.register_node(FogObjNode, CATEGORY_OBJ.MISC);\n\t}\n}\n","import {AmbientLight} from 'three/src/lights/AmbientLight';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AmbientLightObjParamsConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n}\nconst ParamsConfig = new AmbientLightObjParamsConfig();\n\nexport class AmbientLightObjNode extends TypedLightObjNode<AmbientLight, AmbientLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'ambient_light';\n\t}\n\n\tcreate_light() {\n\t\treturn new AmbientLight();\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ObjectContainer extends TypedContainer<ContainableMap['OBJECT']> {\n\tset_content(content: ContainableMap['OBJECT']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_object(object: Object3D) {\n\t\treturn this.set_content(object);\n\t}\n\thas_object() {\n\t\treturn this.has_content();\n\t}\n\tobject() {\n\t\treturn this.content();\n\t}\n\n\t// infos() {\n\t// \tconst node = this.node()\n\t// \treturn [\n\t// \t\t`full path: ${node.full_path()}`,\n\t// \t\t`${node.cooks_count()} cooks`,\n\t// \t\t`cook time: ${node.cook_time()}`,\n\t// \t\tthis.content(),\n\t// \t]\n\t// }\n}\n","import {RectAreaLight} from 'three/src/lights/RectAreaLight';\n// import {RectAreaLightHelper} from '../../../../modules/three/examples/jsm/helpers/RectAreaLightHelper';\nimport {RectAreaLightUniformsLib} from '../../../../modules/three/examples/jsm/lights/RectAreaLightUniformsLib';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {HelperController, HelperParamConfig} from './utils/HelperController';\n\nexport function AreaLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\twidth = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\theight = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t};\n}\n\nclass AreaLightObjParamsConfig extends AreaLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new AreaLightObjParamsConfig();\n\nexport class AreaLightObjNode extends BaseLightTransformedObjNode<RectAreaLight, AreaLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'area_light';\n\t}\n\t// private _helper_controller = new HelperController<RectAreaLightHelper, RectAreaLight>(this, RectAreaLightHelper);\n\t// initialize_node() {\n\t// \tthis._helper_controller.initialize_node();\n\t// }\n\n\tcreate_light() {\n\t\tconst object = new RectAreaLight(0xffffff, 1, 1, 1);\n\n\t\treturn object;\n\t}\n\n\t// create_light_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \tthis.add_param(ParamType.FLOAT, 'intensity', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'width', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'height', 1, {range: [0, 10]});\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.width = this.pv.width;\n\t\tthis.light.height = this.pv.height;\n\t\t// this._helper_controller.update();\n\t}\n\n\tasync cook() {\n\t\t// const {RectAreaLightUniformsLib} = await CoreScriptLoader.load_module_three_light('RectAreaLightUniformsLib');\n\t\t// const module = RectAreaLightUniformsLib\n\t\tif (!(RectAreaLightUniformsLib as any).initialized) {\n\t\t\tRectAreaLightUniformsLib.init();\n\t\t\t(RectAreaLightUniformsLib as any).initialized = true;\n\t\t}\n\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {DirectionalLightHelper} from './utils/helpers/DirectionalLightHelper';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\n// import {NodeContext} from '../../poly/NodeContext';\n// import {BaseObjNodeType} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nexport function DirectionalLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// transform = ParamConfig.FOLDER();\n\t\t// directional\n\t\t// position = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// target = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// lookat = ParamConfig.OPERATOR_PATH('', {dependent_on_found_node: false});\n\n\t\tlight = ParamConfig.FOLDER();\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1);\n\t\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t\t// shadows\n\t\tcast_shadows = ParamConfig.BOOLEAN(1);\n\t\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\t\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t\t// helper\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\n\nclass DirectionalLightObjParamsConfig extends DirectionalLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new DirectionalLightObjParamsConfig();\n\nexport class DirectionalLightObjNode extends BaseLightTransformedObjNode<\n\tDirectionalLight,\n\tDirectionalLightObjParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'directional_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<DirectionalLight>(\n\t\tthis,\n\t\t(<unknown>DirectionalLightHelper) as HelperConstructor<DirectionalLight>,\n\t\t'DirectionalLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new DirectionalLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'DirectionalLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\t// this.light.position.copy(this.pv.t);\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.shadow.camera.far = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\n\t\t// updating the camera matrix is not necessary for point light\n\t\t// so probably should not for this\n\t\tthis.light.shadow.camera.updateProjectionMatrix();\n\t}\n}\n","// import {Object3D} from 'three/src/core/Object3D';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {DirectionalLightObjNode} from '../../DirectionalLight';\nimport {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {Line} from 'three/src/objects/Line';\n\nexport class DirectionalLightHelper extends BaseLightHelper<DirectionalLight, DirectionalLightObjNode> {\n\tprivate _square = new Line();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst size = 1;\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(\n\t\t\t\t[-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tthis._square.geometry = geometry;\n\t\tthis._square.material = this._line_material;\n\t\tthis._square.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._square);\n\t}\n\n\t// private _v1 = new Vector3();\n\t// private _v2 = new Vector3();\n\t// private _v3 = new Vector3();\n\tupdate() {\n\t\t// this._v1.copy(this.node.light.position);\n\t\t// this._v2.copy(this.node.light.target.position);\n\t\t// this._v3.subVectors(this._v2, this._v1);\n\n\t\t// this._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\t// this._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\t// this._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {HemisphereLight} from 'three/src/lights/HemisphereLight';\nimport {HemisphereLightHelper} from './utils/helpers/HemisphereLightHelper';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nclass HemisphereLightObjParamsConfig extends NodeParamsConfig {\n\tsky_color = ParamConfig.COLOR([0.2, 0.7, 1]);\n\tground_color = ParamConfig.COLOR([0.1, 0.1, 0.25]);\n\tintensity = ParamConfig.FLOAT(1);\n\tposition = ParamConfig.VECTOR3([0, 1, 0]);\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new HemisphereLightObjParamsConfig();\n\nexport class HemisphereLightObjNode extends TypedLightObjNode<HemisphereLight, HemisphereLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hemisphere_light';\n\t}\n\tprivate _helper_controller = new HelperController<HemisphereLight>(\n\t\tthis,\n\t\t(<unknown>HemisphereLightHelper) as HelperConstructor<HemisphereLight>,\n\t\t'HemisphereLightHelper'\n\t);\n\n\tcreate_light() {\n\t\tconst light = new HemisphereLight();\n\n\t\treturn light;\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.sky_color;\n\t\tthis.light.groundColor = this.pv.ground_color;\n\t\tthis.light.position.copy(this.pv.position);\n\t\tthis.light.intensity = this.pv.intensity;\n\n\t\tthis._helper_controller.update();\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {OctahedronBufferGeometry} from 'three/src/geometries/OctahedronGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\nimport {HemisphereLightObjNode} from '../../HemisphereLight';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {HemisphereLight} from 'three/src/lights/HemisphereLight';\n\nexport class HemisphereLightHelper extends BaseLightHelper<HemisphereLight, HemisphereLightObjNode> {\n\tprivate _geometry = new OctahedronBufferGeometry(1);\n\n\tprotected build_helper() {\n\t\tthis._geometry.rotateZ(Math.PI * 0.5);\n\n\t\tthis._material.vertexColors = true;\n\n\t\tconst position = this._geometry.getAttribute('position');\n\t\tconst colors = new Float32Array(position.count * 3);\n\n\t\tthis._geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\tthis._object.geometry = this._geometry;\n\t\tthis._object.material = this._material;\n\t}\n\n\t// private _inverse_position = new Vector3();\n\tprivate _quat = new Quaternion();\n\tprivate _default_position = new Vector3(0, 1, 0);\n\tprivate _color1 = new Color();\n\tprivate _color2 = new Color();\n\tupdate() {\n\t\tif (!this.node.pv.position) {\n\t\t\treturn;\n\t\t}\n\t\t// this._inverse_position.copy(this.node.pv.position).multiplyScalar(-1)\n\t\tthis._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\tthis._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\tthis._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tconst colors = this._geometry.getAttribute('color') as BufferAttribute;\n\n\t\tthis._color1.copy(this.node.light.color);\n\t\tthis._color2.copy(this.node.light.groundColor);\n\n\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\tconst color = i < l / 2 ? this._color1 : this._color2;\n\n\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\t}\n}\n","import {PointLight} from 'three/src/lights/PointLight';\nimport {PointLightHelper} from './utils/helpers/PointLightHelper';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\n// import {HelperController} from './utils/HelperController';\nclass PointLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tdecay = ParamConfig.FLOAT(0.1);\n\tdistance = ParamConfig.FLOAT(100);\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024], {visible_if: {cast_shadows: 1}});\n\tshadow_bias = ParamConfig.FLOAT(0.001, {visible_if: {cast_shadows: 1}});\n\tshadow_near = ParamConfig.FLOAT(1, {visible_if: {cast_shadows: 1}});\n\tshadow_far = ParamConfig.FLOAT(100, {visible_if: {cast_shadows: 1}});\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new PointLightObjParamsConfig();\n\nexport class PointLightObjNode extends BaseLightTransformedObjNode<PointLight, PointLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point_light';\n\t}\n\tprivate _helper_controller = new HelperController<PointLight>(\n\t\tthis,\n\t\t(<unknown>PointLightHelper) as HelperConstructor<PointLight>,\n\t\t'PointLightHelper'\n\t);\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new PointLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\treturn light;\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.decay = this.pv.decay;\n\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\tthis.light.shadow.camera.near = this.pv.shadow_near;\n\t\tthis.light.shadow.camera.far = this.pv.shadow_far;\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {PointLightObjNode} from '../../PointLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {PointLight} from 'three/src/lights/PointLight';\n\nexport class PointLightHelper extends BaseLightHelper<PointLight, PointLightObjNode> {\n\tprotected build_helper() {\n\t\tconst size = 1;\n\t\tthis._object.geometry = new SphereBufferGeometry(size, 4, 2);\n\t\tthis._object.material = this._material;\n\t}\n\n\tupdate() {\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\t\tthis._material.color.copy(this.node.light.color);\n\t}\n}\n","import {SpotLight} from 'three/src/lights/SpotLight';\n// import {SpotLightHelper} from 'three/src/helpers/SpotLightHelper';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {SpotLightHelper} from './utils/helpers/SpotLightHelper';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {HelperController} from './utils/HelperController';\nclass SpotLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tangle = ParamConfig.FLOAT(45, {range: [0, 180]});\n\tpenumbra = ParamConfig.FLOAT(0.1);\n\tdecay = ParamConfig.FLOAT(0.1, {range: [0, 1]});\n\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t// target = ParamConfig.OPERATOR_PATH('');\n\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new SpotLightObjParamsConfig();\n\nexport class SpotLightObjNode extends BaseLightTransformedObjNode<SpotLight, SpotLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'spot_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<SpotLight>(\n\t\tthis,\n\t\t(<unknown>SpotLightHelper) as HelperConstructor<SpotLight>,\n\t\t'SpotLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new SpotLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'SpotLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.angle = this.pv.angle * (Math.PI / 180);\n\t\tthis.light.penumbra = this.pv.penumbra;\n\t\tthis.light.decay = this.pv.decay;\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {SpotLightObjNode} from '../../SpotLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {SpotLight} from 'three/src/lights/SpotLight';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n\nexport class SpotLightHelper extends BaseLightHelper<SpotLight, SpotLightObjNode> {\n\tprivate _cone = new LineSegments();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\tconst p1 = (i / l) * Math.PI * 2;\n\t\t\tconst p2 = (j / l) * Math.PI * 2;\n\n\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t}\n\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tthis._cone.geometry = geometry;\n\n\t\tthis._cone.material = this._line_material;\n\t\tthis._cone.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._cone);\n\t}\n\n\tupdate() {\n\t\tconst coneLength = (this.node.light.distance ? this.node.light.distance : 1000) * this.node.pv.helper_size;\n\t\tconst coneWidth = coneLength * Math.tan(this.node.light.angle);\n\n\t\tthis._cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {EventNodeChildrenMap} from '../../poly/registers/Event';\nimport {BaseEventNodeType} from '../event/_Base';\n\nexport class EventsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.EVENT;\n\tstatic type() {\n\t\treturn 'events';\n\t}\n\n\tprotected _children_controller_context = NodeContext.EVENT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as EventNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseEventNodeType[];\n\t}\n\tnodes_by_type<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as EventNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {MatNodeChildrenMap} from '../../poly/registers/Mat';\nimport {BaseMatNodeType} from '../mat/_Base';\n\nexport class MaterialsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MAT;\n\tstatic type() {\n\t\treturn 'materials';\n\t}\n\t// children_context(){ return NodeContext.MAT }\n\n\tprotected _children_controller_context = NodeContext.MAT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as MatNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseMatNodeType[];\n\t}\n\tnodes_by_type<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as MatNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CopNodeChildrenMap} from '../../poly/registers/Cop';\nimport {BaseCopNodeType} from '../cop/_Base';\n\nexport class CopObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'cop';\n\t}\n\t// children_context(){ return NodeContext.COP }\n\n\tprotected _children_controller_context = NodeContext.COP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n\n\tcreate_node<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as CopNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseCopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as CopNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from '../../poly/NodeContext';\n\nexport class PostProcessObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'post_process';\n\t}\n\t// children_context(){ return NodeContext.POST }\n\n\tprotected _children_controller_context = NodeContext.POST;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n// const THREE = {Group};\n\n// import {CoreTransform} from '../../../core/Transform';\n\nimport {BaseNodeType} from '../_Base';\nimport {DisplayNodeController} from '../utils/DisplayNodeController';\nimport {NodeContext} from '../../poly/NodeContext';\n\n//import Layers from './Concerns/Layers'\n// import {Transformed} from './Concerns/Transformed';\n\n// sop map\nimport {BaseSopNodeType} from '../sop/_Base';\n// import {PolyScene} from '../../scene/PolyScene';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n\nimport {GeoNodeChildrenMap} from '../../poly/registers/Sop';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass GeoObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tdisplay = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new GeoObjParamConfig();\n\nexport class GeoObjNode extends TypedObjNode<Group, GeoObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'geo';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tprotected _display_node_controller: DisplayNodeController = new DisplayNodeController(this);\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprivate _sop_group = this._create_sop_group();\n\tprivate _create_sop_group() {\n\t\treturn new Group();\n\t}\n\tget sop_group() {\n\t\treturn this._sop_group;\n\t}\n\tset_sop_group_name() {\n\t\tthis._sop_group.name = `${this.full_path()}:sop_group`;\n\t}\n\n\t// children_context() {\n\t// \treturn NodeContext.SOP;\n\t// }\n\n\tprotected _children_controller_context = NodeContext.SOP;\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tprivate _on_child_add_bound = this._on_child_add.bind(this);\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add_bound);\n\n\t\tthis.display_node_controller.initialize_node();\n\t\tthis.transform_controller.initialize_node();\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active);\n\t\t// });\n\n\t\tthis.object.add(this.sop_group);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_sop_group_name.bind(this));\n\t\tthis._create_sop_group();\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.outputs.set_has_one_output();\n\t}\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\t//base_layers_included: -> false\n\n\t// create_params() {\n\t// \t// CoreTransform.create_params(this);\n\t// }\n\t//this.create_layers_params()\n\n\trequest_display_node() {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: typescript\n\t\t// if (this.is_displayed)\n\t\t// \tconst display_node = this.display_node();\n\t\t// \tif (display_node) {\n\t\t// \t\tdisplay_node.request_container_p().then(async (container) => {\n\t\t// \t\t\tif (!this._sop_loaded) {\n\t\t// \t\t\t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._sop_loaded = true;\n\n\t\t// \t\t\tconst update_needed = await this.display_node_objects_changed(container);\n\t\t// \t\t\tif (update_needed) {\n\t\t// \t\t\t\tthis.remove_display_node_group();\n\t\t// \t\t\t\tawait this.add_display_node_group(container);\n\t\t// \t\t\t}\n\t\t// \t\t\t// this.set_needsUpdate(container)\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\tthis._sop_loaded = true;\n\t\t// \t}\n\t\t// }\n\t}\n\n\tis_display_node_cooking(): boolean {\n\t\tif (this.flags.display.active) {\n\t\t\tconst display_node = this._display_node_controller.display_node;\n\t\t\treturn display_node ? display_node.is_dirty : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tcreate_node<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GeoNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseSopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GeoNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// HOOK\n\t//\n\t//\n\t_on_create() {\n\t\tthis.create_node('text');\n\t}\n\t_on_child_add(node: BaseNodeType) {\n\t\tif (this.scene.loading_controller.loaded) {\n\t\t\tif (this.children().length == 1) {\n\t\t\t\tnode.flags?.display?.set(true);\n\t\t\t}\n\t\t}\n\t}\n\t// post_display_flag_node_set_dirty() {\n\t// \tthis.request_display_node();\n\t// }\n\n\t//\n\t//\n\t// COOK\n\t//\n\t//\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\t//this.update_layers()\n\n\t\tthis.object.visible = this.pv.display;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {GeoObjNode} from '../obj/Geo';\nimport {BaseSopNodeType} from '../sop/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class DisplayNodeController {\n\t_graph_node: CoreGraphNode;\n\t_display_node: BaseSopNodeType | undefined;\n\t_children_uuids_dict: Dictionary<boolean> = {};\n\t_children_length: number = 0;\n\tprivate _request_display_node_container_bound = this.request_display_node_container.bind(this);\n\tconstructor(protected node: GeoObjNode) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'DisplayNodeController');\n\n\t\tthis._graph_node.dirty_controller.add_post_dirty_hook(\n\t\t\t'_request_display_node_container',\n\t\t\tthis._request_display_node_container_bound\n\t\t);\n\t}\n\n\tget display_node() {\n\t\treturn this._display_node;\n\t}\n\tprivate _parent_object: Object3D | undefined;\n\tset_parent_object(object: Object3D) {\n\t\tthis._parent_object = object;\n\t}\n\tget parent_object() {\n\t\treturn this._parent_object || this.node.object;\n\t}\n\n\tinitialize_node() {\n\t\tthis.set_parent_object(this.node.sop_group);\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.node.sop_group.visible = this.used_in_scene;\n\t\t\tif (this.node.flags.display.active) {\n\t\t\t\tthis.request_display_node_container();\n\t\t\t}\n\t\t});\n\n\t\tthis.node.lifecycle.add_on_child_add_hook((child_node) => {\n\t\t\tif (!this._display_node) {\n\t\t\t\tchild_node.flags?.display?.set(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync set_display_node(new_display_node: BaseSopNodeType) {\n\t\tif (this._display_node != new_display_node) {\n\t\t\tconst old_display_node = this._display_node;\n\t\t\tif (old_display_node) {\n\t\t\t\told_display_node.flags.display.set(false);\n\t\t\t\tthis._graph_node.remove_graph_input(old_display_node);\n\t\t\t\tthis.remove_children();\n\t\t\t}\n\t\t\tthis._display_node = new_display_node;\n\t\t\tif (this._display_node) {\n\t\t\t\tthis._graph_node.add_graph_input(this._display_node);\n\t\t\t}\n\t\t\tthis.request_display_node_container();\n\t\t}\n\t}\n\n\tremove_children() {\n\t\tlet child: Object3D | undefined;\n\t\twhile ((child = this.parent_object.children.pop())) {\n\t\t\tthis.parent_object.remove(child);\n\t\t}\n\t}\n\n\tget used_in_scene() {\n\t\treturn this.node.used_in_scene && this.node.flags.display.active && this.node.pv.display == true;\n\t}\n\n\tprivate async request_display_node_container() {\n\t\tif (!this.node.scene.loading_controller.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.used_in_scene) {\n\t\t\tif (this._display_node) {\n\t\t\t\tconst container = await this._display_node.request_container();\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\t// check if the new objects are different\n\t\t\t\t\tconst new_objects = core_group.objects();\n\t\t\t\t\tlet new_objects_are_different = new_objects.length != this._children_length;\n\t\t\t\t\tif (!new_objects_are_different) {\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tif (!(object.uuid in this._children_uuids_dict)) {\n\t\t\t\t\t\t\t\tnew_objects_are_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update hierarchy if different\n\t\t\t\t\tif (new_objects_are_different) {\n\t\t\t\t\t\tthis.remove_children();\n\t\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tthis.parent_object.add(object);\n\t\t\t\t\t\t\tthis._children_uuids_dict[object.uuid] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._children_length = new_objects.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.remove_children();\n\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\tthis._children_length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n// import {CoreTransform} from '../../../core/Transform';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {AxesHelper} from 'three/src/helpers/AxesHelper';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass NullObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\nconst ParamsConfig = new NullObjParamConfig();\n\nexport class NullObjNode extends TypedObjNode<Group, NullObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tprivate _helper = new AxesHelper(1);\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\tinitialize_node() {\n\t\tthis.transform_controller.initialize_node();\n\t\tthis.object.add(this._helper);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis._helper.visible = this.flags.display.active;\n\t\t});\n\t}\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {BaseNode} from '../_Base';\nimport {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {FogExp2} from 'three/src/scenes/FogExp2';\nimport {Fog} from 'three/src/scenes/Fog';\nimport {Color} from 'three/src/math/Color';\n\nconst DEFAULT = {\n\tcolor: new Color(1, 1, 1),\n\tnear: 0,\n\tfar: 100,\n\tdensity: 0.00025,\n};\n\n// export Fog = (function() {\n// \tlet DEFAULT = undefined;\n// \tFog = class Fog extends BaseModules {\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {FlagsControllerD} from '../utils/FlagsController';\nclass FogObjParamConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR(DEFAULT.color.toArray() as [number, number, number]);\n\texponential = ParamConfig.BOOLEAN(0);\n\tdensity = ParamConfig.FLOAT(1);\n\tnear = ParamConfig.FLOAT(0, {range: [0, 100]});\n\tfar = ParamConfig.FLOAT(100, {range: [0, 100]});\n}\nconst ParamsConfig = new FogObjParamConfig();\nexport class FogObjNode extends TypedObjNode<Object3D, FogObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\n\tprotected _linear_fog!: Fog;\n\tprotected _linear_fogexp2!: FogExp2;\n\n\tinitialize_node() {\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_dirtyable_hook();\n\n\t\tthis._linear_fog = new Fog(DEFAULT.color.getHex(), DEFAULT.near, DEFAULT.far);\n\t\tthis._linear_fogexp2 = new FogExp2(DEFAULT.color.getHex(), DEFAULT.density);\n\t}\n\tstatic type() {\n\t\treturn 'fog';\n\t}\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', DEFAULT.color.toArray() as [number, number, number]);\n\t// \tthis.add_param(ParamType.BOOLEAN, 'exponential', 0);\n\t// \tthis.add_param(ParamType.FLOAT, 'density', DEFAULT.density);\n\t// \tthis.add_param(ParamType.FLOAT, 'near', DEFAULT.near, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// \tthis.add_param(ParamType.FLOAT, 'far', DEFAULT.far, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// }\n\n\t// get_fog: (callback)->\n\t// \tthis.param('exponential').eval (val)=>\n\t// \t\tfog = if val then @_exponential_fog else @_linear_fog\n\t// \t\tcallback(fog)\n\n\tcook() {\n\t\tlet fog: Fog | FogExp2;\n\t\tif (this.pv.exponential) {\n\t\t\tthis._linear_fogexp2.density = this.pv.density;\n\t\t\tfog = this._linear_fogexp2;\n\t\t} else {\n\t\t\tthis._linear_fog.near = this.pv.near;\n\t\t\tthis._linear_fog.far = this.pv.far; // * (1/@_param_intensity)\n\t\t\tfog = this._linear_fog;\n\t\t}\n\n\t\tfog.color.copy(this.pv.color);\n\n\t\tthis.scene.default_scene.fog = fog;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Scene} from 'three/src/scenes/Scene';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass SceneObjParamConfig extends NodeParamsConfig {\n\tbg_color = ParamConfig.COLOR([0, 0, 0]);\n}\nconst ParamsConfig = new SceneObjParamConfig();\n\nexport class SceneObjNode extends TypedObjNode<Scene, SceneObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scene';\n\t}\n\n\tcreate_object() {\n\t\treturn new Scene();\n\t}\n\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\t\tthis.io.outputs.set_has_one_output();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {Vector2} from 'three/src/math/Vector2';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\n// import {Group} from 'three/src/objects/Group';\n// import {CameraHelper} from 'three/src/helpers/CameraHelper';\n// import lodash_clamp from 'lodash/clamp';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\n\nimport {OrthographicCameraBackgroundController} from './utils/cameras/background/OrthographicCameraController';\n// import {ParamType} from '../../poly/ParamType';\n\nconst DEFAULT = {\n\tleft: -0.5,\n\tright: 0.5,\n\ttop: 0.5,\n\tbottom: -0.5,\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function OrthographicCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\t// vertical_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t\t// horizontal_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t};\n}\n\nclass OrthographicCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(OrthographicCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new OrthographicCameraObjParamConfig();\n\nexport class OrthographicCameraObjNode extends TypedCameraObjNode<\n\tOrthographicCamera,\n\tOrthographicCameraObjParamConfig\n> {\n\tparams_config = ParamsConfig;\n\n\tprotected get background_controller_constructor() {\n\t\treturn OrthographicCameraBackgroundController;\n\t}\n\n\tstatic type() {\n\t\treturn 'orthographic_camera';\n\t}\n\n\tcreate_object() {\n\t\treturn new OrthographicCamera(\n\t\t\tDEFAULT.left * 2,\n\t\t\tDEFAULT.right * 2,\n\t\t\tDEFAULT.top * 2,\n\t\t\tDEFAULT.bottom * 2,\n\t\t\tBASE_CAMERA_DEFAULT.near,\n\t\t\tBASE_CAMERA_DEFAULT.far\n\t\t);\n\t}\n\t//@_helper = new CameraHelper( @_camera )\n\t//group = new Group()\n\t//group.add(@_camera)\n\t//group.add(@_helper)\n\n\t//this.set_object(@_camera)\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.add_param('float', 'left', DEFAULT.left)\n\t// \t// this.add_param('float', 'right', DEFAULT.right)\n\t// \t// this.add_param('float', 'top', DEFAULT.top)\n\t// \t// this.add_param('float', 'bottom', DEFAULT.bottom)\n\n\t// \t// this.within_param_folder('render', () => {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 2, {range: [0, 10]});\n\t// \t// left : Number, right : Number, top : Number, bottom : Number, near : Number, far : Number\n\t// \tthis.add_param(ParamType.VECTOR2, 'vertical_size_range', [0, 10], {visible_if: {lock_width: 1}});\n\t// \tthis.add_param(ParamType.VECTOR2, 'horizontal_size_range', [0, 10], {visible_if: {lock_width: 0}});\n\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\tconst size = this.pv.size || 1;\n\t\t\t// let lock_width = this.pv.lock_width;\n\t\t\t// if (lock_width == null) {\n\t\t\t// \tlock_width = true;\n\t\t\t// }\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst vertical_size = size / this._aspect;\n\t\t\t// \tconst zoom = 1 //this.get_zoom(vertical_size, this.pv.vertical_size_range);\n\t\t\t// \tthis._object.left = DEFAULT.left * size * zoom;\n\t\t\t// \tthis._object.right = DEFAULT.right * size * zoom;\n\t\t\t// \tthis._object.top = DEFAULT.top * vertical_size * zoom;\n\t\t\t// \tthis._object.bottom = DEFAULT.bottom * vertical_size * zoom;\n\t\t\t// } else {\n\t\t\tconst horizontal_size = size * this._aspect;\n\t\t\tconst zoom = 1; //this.get_zoom(horizontal_size, this.pv.horizontal_size_range);\n\t\t\tthis._object.left = DEFAULT.left * horizontal_size * zoom;\n\t\t\tthis._object.right = DEFAULT.right * horizontal_size * zoom;\n\t\t\tthis._object.top = DEFAULT.top * size * zoom;\n\t\t\tthis._object.bottom = DEFAULT.bottom * size * zoom;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\n\t// private get_zoom(size: number, range: Vector2) {\n\t// \tlet zoom = 1;\n\t// \tif (range) {\n\t// \t\tif (size < range.x || size > range.y) {\n\t// \t\t\tconst new_size = lodash_clamp(size, range.x, range.y);\n\t// \t\t\tzoom = new_size / size;\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseCameraObjNodeType} from '../../_BaseCamera';\nimport {BaseCameraControlsEventNodeType, CameraControls} from '../../../event/_BaseCameraControls';\nimport {CameraControlsConfig} from '../../../event/utils/CameraControlConfig';\nimport {BaseParamType} from '../../../../params/_Base';\nimport {CameraOrbitControlsEventNode} from '../../../event/CameraOrbitControls';\n\nconst CONTROLS_PARAM_NAME = 'controls';\n\nexport class ControlsController {\n\t_applied_controls_by_element_id: Dictionary<Dictionary<boolean>> = {};\n\tprivate _controls_node: BaseCameraControlsEventNodeType | null = null;\n\tprivate controls_start_listener: (() => void) | undefined;\n\tprivate controls_end_listener: (() => void) | undefined;\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\tcontrols_param(): BaseParamType | null {\n\t\tif (this.node.params.has(CONTROLS_PARAM_NAME)) {\n\t\t\treturn this.node.params.get(CONTROLS_PARAM_NAME);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync controls_node(): Promise<BaseCameraControlsEventNodeType | null> {\n\t\tconst controls_param = this.node.p.controls;\n\t\tconst raw_input = controls_param.raw_input;\n\t\tif (raw_input && raw_input != '') {\n\t\t\tif (controls_param.is_dirty) {\n\t\t\t\tawait controls_param.compute();\n\t\t\t}\n\t\t\tconst node = controls_param.found_node();\n\t\t\tif (node) {\n\t\t\t\tif (node instanceof CameraOrbitControlsEventNode) {\n\t\t\t\t\treturn node;\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('found node is not of a camera control type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set('no node has been found');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync update_controls() {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\tif (this._controls_node != controls_node) {\n\t\t\t\tthis.dispose_control_refs();\n\t\t\t}\n\t\t}\n\n\t\tthis._controls_node = controls_node;\n\t}\n\n\tasync apply_controls(html_element: HTMLElement) {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\t// keep last_control_node_id to ensure we don't apply the controls more than once\n\t\t\t// OR it allow the viewer to remain in control of this\n\t\t\t//if !@_last_control_node_id? || (@_last_control_node_id != controls_node.graph_node_id)\n\t\t\t// but for now, the controls are still applied again after mouse up\n\t\t\tconst controls_id = controls_node.controls_id();\n\t\t\tlet controls_aleady_applied = false;\n\t\t\tif (\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] &&\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t\t) {\n\t\t\t\tcontrols_aleady_applied = true;\n\t\t\t}\n\t\t\tif (!controls_aleady_applied) {\n\t\t\t\t// this._last_control_node_id = controls_id;\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] =\n\t\t\t\t\tthis._applied_controls_by_element_id[html_element.id] || {};\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id] = true;\n\n\t\t\t\t// request_container forces a cook\n\t\t\t\t//controls_node.request_container (controls_container)=>\n\t\t\t\tconst controls = await controls_node.apply_controls(this.node.object, html_element);\n\t\t\t\tconst config = new CameraControlsConfig(this.node.graph_node_id, controls_node, controls);\n\t\t\t\tcontrols_node.set_from_camera_node(controls, this.node);\n\t\t\t\tthis.set_controls_events(controls);\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\tdispose_control_refs() {\n\t\tthis._applied_controls_by_element_id = {};\n\t}\n\n\t// calling dispose controls\n\t// ensure that we can set the camera menu to camera1, then camera2 and back to camera1\n\t// and controls will be cleared each time\n\tasync dispose_controls(html_element: HTMLElement) {\n\t\tdelete this._applied_controls_by_element_id[html_element.id];\n\t\t// if (this._applied_controls_by_element_id[html_element.id]) {\n\t\t// \tconst controls_node = await this.controls_node();\n\t\t// \tif (controls_node) {\n\t\t// \t\tconst controls_id = controls_node.controls_id();\n\t\t// \t\tdelete this._applied_controls_by_element_id[html_element.id][controls_id];\n\t\t// \t}\n\t\t// }\n\t\t// @_controls_node?.dispose_controls()\n\t\t// if(this._applied_controls_by_element_id[html_element.id]){\n\t\t// \tdelete this._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t// }\n\t\t// this._last_control_node_id = null\n\t}\n\tset_controls_events(controls: CameraControls) {\n\t\t// restore target (for orbit controls only for now)\n\t\t// to ensure that camera does not reset its target on 0,0,0 on first move\n\t\t// const controls_node = this.controls_node()\n\t\t// if (controls_node){\n\t\t// \tcontrols_node.\n\t\t// }\n\t\t// if(controls.target){\n\t\t// \tcontrols.target.copy(this._param_target) //.clone()\n\t\t// }\n\n\t\tthis.controls_start_listener = () => {\n\t\t\tthis.on_controls_start(controls);\n\t\t};\n\t\tthis.controls_end_listener = () => {\n\t\t\tthis.on_controls_end(controls);\n\t\t};\n\t\tcontrols.addEventListener('start', this.controls_start_listener);\n\t\tcontrols.addEventListener('end', this.controls_end_listener);\n\t}\n\n\ton_controls_start(controls: CameraControls) {\n\t\t// this.param('is_updating').set(1)\n\t}\n\ton_controls_end(controls: CameraControls) {\n\t\t// this.param('is_updating').set(0)\n\t\tif (controls.target) {\n\t\t\tconst val = controls.target.toArray() as [number, number, number];\n\t\t\tthis.node.params.set_vector3('target', val);\n\t\t}\n\t\tthis.node.update_transform_params_from_object();\n\t}\n}\n","import {BaseCameraControlsEventNodeType, CameraControls} from '../_BaseCameraControls';\n\nexport class CameraControlsConfig {\n\tconstructor(\n\t\tprivate _camera_node_id: string,\n\t\tprivate _controls_node: BaseCameraControlsEventNodeType,\n\t\tprivate _controls: CameraControls\n\t) {}\n\n\tget camera_node_id() {\n\t\treturn this._camera_node_id;\n\t}\n\t// camera_controls_node_id(){\n\t// \treturn this._camera_controls_node_id\n\t// }\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\tget controls_node() {\n\t\treturn this._controls_node;\n\t}\n\n\tis_equal(other_config: CameraControlsConfig): boolean {\n\t\treturn (\n\t\t\tother_config.camera_node_id == this._camera_node_id &&\n\t\t\tother_config.controls_node.graph_node_id == this._controls_node.graph_node_id\n\t\t);\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tvar oldClearColor, oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import {PolyScene} from '../scene/PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer'\n// import {Color} from 'three/src/math/Color'\n\nimport {BaseViewer} from './_Base';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import 'src/engine/Poly';\n// import {POLY} from '../Poly';\n\nconst CSS_CLASS = 'CoreThreejsViewer';\n\ndeclare global {\n\tinterface HTMLCanvasElement {\n\t\tonwebglcontextlost: () => void;\n\t\tonwebglcontextrestored: () => void;\n\t}\n}\n\nexport class ThreejsViewer extends BaseViewer {\n\tprivate _request_animation_frame_id: number | undefined;\n\tprivate do_render: boolean = true;\n\n\tprivate _animate_method: () => void = this.animate.bind(this);\n\n\tconstructor(_container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tsuper(_container, _scene, camera_node);\n\n\t\tthis._canvas = document.createElement('canvas');\n\t\tthis._canvas.id = `canvas_id_${Math.random()}`.replace('.', '_');\n\t\tthis._canvas.style.display = 'block';\n\t\tthis._canvas.style.outline = 'none';\n\n\t\tthis._container.appendChild(this._canvas);\n\t\tthis._container.classList.add(CSS_CLASS);\n\t\tthis._container.style.height = '100%';\n\n\t\tthis._set_events();\n\t}\n\n\tpublic _build() {\n\t\tthis._init_display();\n\t\tthis.activate();\n\t}\n\n\tdispose() {\n\t\tthis._cancel_animate();\n\t\tthis.controls_controller.dispose_controls();\n\t\t// this._dispose_graph_node()\n\t}\n\n\tprivate _set_events() {\n\t\tthis.events_controller.init();\n\t\tthis.webgl_controller.init();\n\n\t\t// if (POLY.player_mode()) {\n\t\twindow.onresize = () => {\n\t\t\tthis.cameras_controller.on_resize();\n\t\t};\n\t\t// }\n\t}\n\t// protected _on_touchmove(event: TouchEvent){\n\t// \tconsole.log(\"touch\", event)\n\t// }\n\n\tprivate _init_display() {\n\t\tif (!this._canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cameras_controller.compute_size_and_aspect();\n\t\tconst size: Vector2 = this.cameras_controller.size;\n\n\t\tthis.cameras_controller.camera_node?.post_process_controller.create_renderer(this._canvas, size);\n\t\t// this.canvas_context = canvas.getContext('2d')\n\n\t\t// init renderer\n\t\t// @renderer = new THREE.WebGLRenderer\n\t\t// \tcanvas: canvas\n\t\t// \tantialias: true\n\t\t// \talpha: true\n\n\t\t// @renderer.shadowMap.enabled = true\n\t\t// this.compute_size_and_aspect()\n\n\t\t//\n\t\t// https://stackoverflow.com/questions/31407778/display-scene-at-lower-resolution-in-three-js\n\t\t// TODO: this article mentions that setSize should be called after\n\t\t// @renderer.setSize(this._size[0], this._size[1])\n\t\t// @renderer.setPixelRatio(window.devicePixelRatio)\n\t\t// @renderer.setSize(size[0]*1.5, size[1]*1.5)\n\t\t// canvas.width = \"//{size[0]}px\"\n\t\t// canvas.height = \"//{size[1]}px\"\n\t\t// canvas.style.width = \"//{size[0]}px\"\n\t\t// canvas.style.height = \"//{size[1]}px\"\n\n\t\t// TODO: ensure the renderers get added to a list\n\t\t//if !this.player_mode\n\t\t//\tconsole.log(\"set window.viewer_renderer from Threejs.vue component\")\n\t\t// window.viewer_renderer = @renderer\n\t\t// POLY.renderers_controller.register_renderer(@renderer)\n\n\t\t//this._init_webgl_utils()\n\n\t\t// init scene\n\t\t// @display_scene.background = new THREE.Color(\"//111\")\n\n\t\t//window.display_scene = @display_scene\n\n\t\t// this._init_ray_helper(); // TODO: typescript\n\n\t\t//@cam_animation_helper = new CameraAnimationHelper(@ray_helper, @event_helper)\n\n\t\tthis.cameras_controller.prepare_current_camera();\n\t\t// this._add_helpers_to_scene()\n\n\t\tthis.animate();\n\t}\n\n\tanimate() {\n\t\tif (this.do_render) {\n\t\t\tthis._scene.time_controller.increment_time_if_playing();\n\t\t\tthis.render();\n\t\t\tthis._controls_controller?.update();\n\t\t\t// this.update_stats()\n\t\t\t// this._controls?.update(false)\n\n\t\t\t// @_renders_count ?= 0\n\t\t\t// @_renders_count += 1\n\t\t\t// if @_renders_count < 6\n\t\t\tthis._request_animation_frame_id = requestAnimationFrame(this._animate_method);\n\t\t}\n\t}\n\n\tprivate _cancel_animate() {\n\t\tthis.do_render = false;\n\t\tif (this._request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this._request_animation_frame_id);\n\t\t}\n\t\tif (this._canvas) {\n\t\t\tthis.cameras_controller.camera_node?.post_process_controller.delete_renderer(this._canvas);\n\t\t}\n\t\t// POLY.renderers_controller.deregister_renderer(@renderer)\n\t\t// this.dispose_camera()\n\t}\n\n\trender() {\n\t\tif (this.cameras_controller.camera_node && this._canvas) {\n\t\t\tconst size = this.cameras_controller.size;\n\t\t\tconst aspect = this.cameras_controller.aspect;\n\t\t\tthis.cameras_controller.camera_node.post_process_controller.render(this._canvas, size, aspect);\n\t\t} else {\n\t\t\tconsole.warn('no camera to render with');\n\t\t}\n\t}\n}\n","import {Scene} from 'three/src/scenes/Scene';\nimport {PolyScene} from '../scene/PolyScene';\nimport {BaseCameraObjNodeType} from '../nodes/obj/_BaseCamera';\n\n// import {CameraMixin} from './concerns/Camera';\n// import {Capturer} from './concerns/Capturer';\n// import {ContainerClass} from './concerns/ContainerClass';\n// import {Controls} from './concerns/Controls';\n// import {PickerForViewer} from './concerns/Picker';\n\nimport {CamerasController} from './utils/CamerasController';\nimport {ControlsController} from './utils/ControlsController';\nimport {EventsController} from './utils/EventsController';\nimport {WebGLController} from './utils/WebglController';\n\n// class AbstractViewer {}\n\nconst HOVERED_CLASS_NAME = 'hovered';\n\nexport abstract class BaseViewer {\n\tprotected _display_scene: Scene;\n\tprotected _canvas: HTMLCanvasElement | undefined;\n\tprotected _active: boolean = false;\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tactivate() {\n\t\tthis._active = true;\n\t}\n\tdeactivate() {\n\t\tthis._active = false;\n\t}\n\n\tprotected _cameras_controller: CamerasController | undefined;\n\tget cameras_controller() {\n\t\treturn (this._cameras_controller = this._cameras_controller || new CamerasController(this));\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller() {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\tprotected _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController(this));\n\t}\n\n\tconstructor(protected _container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tthis._display_scene = this._scene.default_scene;\n\t\tthis._init_from_scene(camera_node).then(() => {\n\t\t\tthis._build();\n\t\t});\n\t}\n\tget container() {\n\t\treturn this._container;\n\t}\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget canvas() {\n\t\treturn this._canvas;\n\t}\n\n\tprivate async _init_from_scene(camera_node: BaseCameraObjNodeType) {\n\t\tawait this.cameras_controller.set_camera_node(camera_node || this._scene.cameras_controller.master_camera_node);\n\t\t// await this.update_picker_nodes(); // TODO: typescript\n\t}\n\tprotected abstract _build(): void;\n\n\t// html container class\n\treset_container_class() {\n\t\tthis.container.classList.remove(HOVERED_CLASS_NAME);\n\t}\n\tset_container_class_hovered() {\n\t\tthis.container.classList.add(HOVERED_CLASS_NAME);\n\t}\n}\n","// import {Camera} from 'three/src/cameras/Camera';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseCameraObjNodeType} from '../../nodes/obj/_BaseCamera';\nimport {BaseViewer} from '../_Base';\nimport {CoreGraphNode} from '../../../core/graph/CoreGraphNode';\n\nexport class CamerasController {\n\t// private _is_active: boolean = false;\n\tprivate _camera_node: BaseCameraObjNodeType | null = null;\n\t// private _camera: Camera;\n\n\tprivate _size: Vector2 = new Vector2(100, 100);\n\tprivate _aspect: number = 1;\n\t// private current_camera_controls_node_graph_id: number = null;\n\n\tconstructor(private viewer: BaseViewer) {}\n\n\t// activate() {\n\t// \tthis._is_active = true;\n\t// }\n\tasync set_camera_node(camera_node: BaseCameraObjNodeType) {\n\t\tif (!this._camera_node || camera_node.graph_node_id != this._camera_node.graph_node_id) {\n\t\t\tthis._camera_node = camera_node;\n\t\t\t// this._camera = camera_node.object;\n\t\t\tthis._update_graph_node();\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t}\n\t}\n\tprivate _graph_node: CoreGraphNode | undefined;\n\tprivate _update_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn;\n\t\t}\n\t\tconst controls_param = this._camera_node.params.get_operator_path('controls');\n\t\tif (!controls_param) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node = this._graph_node || this._create_graph_node();\n\t\tif (!this._graph_node) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node.graph_disconnect_predecessors();\n\t\tthis._graph_node.add_graph_input(controls_param);\n\t}\n\tprivate _create_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst node = new CoreGraphNode(this._camera_node.scene, 'viewer-controls');\n\t\tnode.add_post_dirty_hook('this.viewer.controls_controller', async () => {\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t});\n\t\treturn node;\n\t}\n\n\tget camera_node() {\n\t\treturn this._camera_node;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\tget aspect() {\n\t\treturn this._aspect;\n\t}\n\n\ton_resize() {\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.compute_size_and_aspect();\n\t\tthis._camera_node?.post_process_controller.set_renderer_size(this.viewer.canvas, this._size);\n\t\tthis.update_camera_aspect();\n\t}\n\tcompute_size_and_aspect() {\n\t\tthis._update_size();\n\t\tthis._camera_node?.scene.uniforms_controller.update_resolution_dependent_uniform_owners(this._size);\n\t\tthis._aspect = this._get_aspect();\n\t}\n\n\tprivate _update_size() {\n\t\tthis._size.x = this.viewer.container.offsetWidth;\n\t\tthis._size.y = this.viewer.container.offsetHeight;\n\t}\n\tprivate _get_aspect(): number {\n\t\treturn this._size.x / this._size.y;\n\t}\n\n\tupdate_camera_aspect() {\n\t\tthis._camera_node?.setup_for_aspect_ratio(this._aspect);\n\t}\n\t// dispose_camera: ->\n\t// \tthis.$emit('before_controls_apply', null)\n\t// \t// if @_controls?\n\t// \t// \t@_controls.dispose()\n\t// \t// camera_graph_node_id ?= this.current_camera_node_graph_id\n\t// \t// camera_node = this.$store.scene.graph().node_from_id(camera_graph_node_id)\n\t// \t// this.current_camera_node.dipose_controls()\n\t// \t//if this.current_camera_node?\n\t// \t//\tthis.current_camera_node.dispose_controls()\n\tasync prepare_current_camera() {\n\t\tif (this._camera_node) {\n\t\t\t// we dispose the controls first, so they can be applied\n\t\t\t// if they were not disposed properly when we closed the viewer\n\t\t\t// but I'm now trying in the destroyed callback\n\t\t\t//this.current_camera_node.dispose_controls()\n\n\t\t\t//this.current_camera_node.apply_controls()\n\t\t\t//this.current_camera_node.prepare_for_viewer(this.aspect())\n\t\t\t// const name = this.current_camera_node.name()\n\t\t\t// const graph_node_id = this._camera_node.graph_node_id\n\t\t\t/*const container = */ await this._camera_node.request_container(); // ensure the camera is cooked\n\t\t\tawait this._update_from_camera_container(); //container, graph_node_id)\n\t\t}\n\t}\n\t// remove_cloned_camera: ->\n\t// \tif @_current_camera?\n\t// \t\t@_current_camera.camera_source.node.remove_clone(@_current_camera)\n\n\tasync _update_from_camera_container() {\n\t\t//container, graph_node_id:number){\n\t\t// ensure that we get the same as we requested\n\t\t// if(graph_node_id == this._camera_node.graph_node_id){\n\n\t\t// this.remove_cloned_camera()\n\t\t// cloned_camera = this.current_camera_node.clone_camera()\n\t\t// @_current_camera = cloned_camera\n\t\tthis.update_camera_aspect();\n\n\t\t//this.dispose_camera()\n\n\t\t// @_is_active is use to check if the component has been destroyed\n\t\t// which can happen on app load, but also when user switches the camera menu\n\n\t\t// if this.current_camera_controls_node_graph_id == null || ()\n\n\t\t// if(@_is_active == true)\n\t\tawait this.viewer.controls_controller.create_controls();\n\n\t\t// }\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {CameraControls} from '../../nodes/event/_BaseCameraControls';\n\nexport class ControlsController {\n\tprotected _active: boolean = false;\n\tprotected _controls: CameraControls | null = null;\n\t_bound_on_controls_start: () => void = this._on_controls_start.bind(this);\n\t_bound_on_controls_end: () => void = this._on_controls_end.bind(this);\n\tconstructor(private viewer: BaseViewer) {}\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\n\tasync create_controls() {\n\t\tthis.dispose_controls();\n\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = await this.camera_node?.controls_controller.apply_controls(this.viewer.canvas);\n\t\tif (config) {\n\t\t\t// this.current_camera_controls_node_graph_id = config.camera_controls_node_id()\n\t\t\tthis._controls = config.controls;\n\t\t\t// this._controls_node = config.controls_node()\n\n\t\t\tif (this._controls) {\n\t\t\t\tif (this.viewer.active) {\n\t\t\t\t\tthis._controls.addEventListener('start', this._bound_on_controls_start);\n\t\t\t\t\tthis._controls.addEventListener('end', this._bound_on_controls_end);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dispose_controls();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// test in case @_is_active has changed\n\t\t\t// if (this._is_active != true && this._controls){\n\t\t\t// \tthis._dispose_controls()\n\n\t\t\t// }\n\t\t\t// TODO\n\t\t\t// we have to reassign the camera here, as this method is called twice\n\t\t\t// and the first time without the controls being present apparently.. (more tests needed)\n\t\t\t// CURRENT ANSWER: the method this.prepare_current_camera() is called twice on app load\n\t\t\t// which only cause problems when switching back to perspective.\n\t\t\t// @_current_camera = cloned_camera\n\t\t\t//@_controls = controls\n\t\t\t// this.$emit('before_controls_apply', controls)\n\t\t}\n\t}\n\tupdate() {\n\t\tif (this._controls) {\n\t\t\tthis._controls.update();\n\t\t}\n\t}\n\n\tdispose_controls() {\n\t\tif (this._controls) {\n\t\t\tif (this.viewer.canvas) {\n\t\t\t\tthis.camera_node?.controls_controller.dispose_controls(this.viewer.canvas);\n\t\t\t}\n\n\t\t\tif (this._bound_on_controls_start) {\n\t\t\t\tthis._controls.removeEventListener('start', this._bound_on_controls_start);\n\t\t\t}\n\t\t\tif (this._bound_on_controls_end) {\n\t\t\t\tthis._controls.removeEventListener('end', this._bound_on_controls_end);\n\t\t\t}\n\n\t\t\tthis._controls.dispose();\n\t\t\tthis._controls = null;\n\t\t}\n\t}\n\tprivate _on_controls_start() {\n\t\tthis._active = true;\n\t}\n\tprivate _on_controls_end() {\n\t\tthis._active = false;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n// import {Vector2} from 'three/src/math/Vector2';\n\n// const DIST_UNINITIALIZED = -1;\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype MouseOrTouchEventCallback = (e: MouseOrTouchEvent) => void;\n\nexport class EventsController {\n\t// private _mousedown_pos = new Vector2();\n\t// private _mouse_distance_travelled: number = DIST_UNINITIALIZED;\n\tprotected _bound_on_mousedown: MouseOrTouchEventCallback = this._on_mousedown.bind(this);\n\tprotected _bound_on_mousemove: MouseOrTouchEventCallback = this._on_mousemove.bind(this);\n\tprotected _bound_on_mouseup: MouseOrTouchEventCallback = this._on_mouseup.bind(this);\n\t// protected _bound_on_click: MouseEventCallback\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget canvas() {\n\t\treturn this.viewer.canvas;\n\t}\n\n\tinit() {\n\t\tif (!this.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._bound_on_mousedown) {\n\t\t\tthis.canvas.removeEventListener('mousedown', this._bound_on_mousedown);\n\t\t}\n\t\tif (this._bound_on_mousemove) {\n\t\t\tthis.canvas.removeEventListener('mousemove', this._bound_on_mousemove);\n\t\t}\n\t\tif (this._bound_on_mouseup) {\n\t\t\tthis.canvas.removeEventListener('mouseup', this._bound_on_mouseup);\n\t\t}\n\t\tthis._bound_on_mousedown = this._bound_on_mousedown || this._on_mousedown.bind(this);\n\t\tthis._bound_on_mousemove = this._bound_on_mousemove || this._on_mousemove.bind(this);\n\t\tthis._bound_on_mouseup = this._bound_on_mouseup || this._on_mouseup.bind(this);\n\n\t\tthis.canvas.addEventListener('mousedown', this._bound_on_mousedown);\n\t\tthis.canvas.addEventListener('mousemove', this._bound_on_mousemove);\n\t\tthis.canvas.addEventListener('mouseup', this._bound_on_mouseup);\n\n\t\t// this._bound_on_touchmove = this._bound_on_touchmove || this._on_touchmove.bind(this)\n\t\tthis.canvas.addEventListener('touchstart', this._bound_on_mousedown, false);\n\t\tthis.canvas.addEventListener('touchmove', this._bound_on_mousemove, false);\n\t\tthis.canvas.addEventListener('touchend', this._bound_on_mouseup, false);\n\t\tthis.canvas.addEventListener('touchcancel', this._bound_on_mouseup, false);\n\t}\n\n\tprotected _on_mousedown(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\n\t\t// this._mouse_distance_travelled = 0;\n\t\t// if (event instanceof MouseEvent) {\n\t\t// \tthis._mousedown_pos.x = event.pageX;\n\t\t// \tthis._mousedown_pos.y = event.pageY;\n\t\t// } else {\n\t\t// \tconst touch = event.touches[0];\n\t\t// \tthis._mousedown_pos.x = touch.pageX;\n\t\t// \tthis._mousedown_pos.y = touch.pageY;\n\t\t// }\n\t}\n\n\tprotected _on_mousemove(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled !== DIST_UNINITIALIZED) {\n\t\t// \tlet distance: number = 0;\n\t\t// \tif (event instanceof MouseEvent) {\n\t\t// \t\tdistance = event.pageX - this._mousedown_pos.x + (event.pageY - this._mousedown_pos.y);\n\t\t// \t} else {\n\t\t// \t\tconst touch = event.touches[0];\n\t\t// \t\tdistance = touch.pageX - this._mousedown_pos.x + (touch.pageY - this._mousedown_pos.y);\n\t\t// \t}\n\t\t// \tthis._mouse_distance_travelled += Math.abs(distance);\n\t\t// }\n\n\t\t// if (!this.viewer.controls_controller.active) {\n\t\t// \t// this.viewer.process_picker_nodes_on_mouse_move(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t}\n\n\tprotected _on_mouseup(event: MouseOrTouchEvent) {\n\t\tthis.viewer.scene.events_controller.process_event(event, this.canvas!, this.camera_node!);\n\t\t// if (this._mouse_distance_travelled < 2) {\n\t\t// \t// this.viewer.process_picker_nodes_on_click(event, this.camera_node, this.ray_helper);\n\t\t// }\n\t\t// this._mouse_distance_travelled = DIST_UNINITIALIZED;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n\nexport class WebGLController {\n\tpublic request_animation_frame_id: number | undefined;\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tinit() {\n\t\tconst canvas = this.viewer.canvas;\n\t\tif (canvas) {\n\t\t\tcanvas.onwebglcontextlost = this._on_webglcontextlost.bind(this);\n\t\t\tcanvas.onwebglcontextrestored = this._on_webglcontextrestored.bind(this);\n\t\t}\n\t}\n\n\tprotected _on_webglcontextlost() {\n\t\tconsole.warn('context lost at frame', this.viewer.scene.frame);\n\t\t// event.preventDefault();\n\t\tif (this.request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this.request_animation_frame_id);\n\t\t} else {\n\t\t\tconsole.warn('request_animation_frame_id not initialized');\n\t\t}\n\t\tconsole.warn('not canceled', this.request_animation_frame_id);\n\t}\n\tprotected _on_webglcontextrestored() {\n\t\tconsole.log('context restored');\n\t}\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport lodash_isNaN from 'lodash/isNaN';\n\nexport class OrthographicCameraBackgroundController extends BaseBackgroundController {\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tlet width = this.node.params.float('size');\n\t\tlet height = width;\n\n\t\tconst far = this.node.params.float('far');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tquad.scale.x = width;\n\t\t\tquad.scale.y = height;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n}\n","// import lodash_clamp from 'lodash/clamp';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\nimport {PerspectiveCameraBackgroundController} from './utils/cameras/background/PerspectiveCameraController';\n// import {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nconst DEFAULT = {\n\tfov: 50,\n};\n\n// const EVENT_CHANGE = { type: 'change' };\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function PerspectiveCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tfov = ParamConfig.FLOAT(DEFAULT.fov, {range: [0, 100]});\n\t\t// vertical_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 1}});\n\t\t// horizontal_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 0}});\n\t};\n}\nclass PerspectiveCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(PerspectiveCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PerspectiveCameraObjParamConfig();\n\nexport class PerspectiveCameraObjNode extends TypedCameraObjNode<PerspectiveCamera, PerspectiveCameraObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'perspective_camera';\n\t}\n\n\tprotected get background_controller_constructor() {\n\t\treturn PerspectiveCameraBackgroundController;\n\t}\n\n\tcreate_object() {\n\t\treturn new PerspectiveCamera(DEFAULT.fov, 1, BASE_CAMERA_DEFAULT.near, BASE_CAMERA_DEFAULT.far);\n\t}\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.add_param(ParamType.FLOAT, 'fov', DEFAULT.fov, {\n\t// \t// \trange: [0, 180],\n\t// \t// \trange_locked: [true, true],\n\t// \t// });\n\t// \t// this.add_param(ParamType.VECTOR2, 'vertical_fov_range', [0, 100], {visible_if: {lock_width: 1}});\n\t// \t// this.add_param(ParamType.VECTOR2, 'horizontal_fov_range', [0, 100], {visible_if: {lock_width: 0}});\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tif (this._object.fov != this.pv.fov) {\n\t\t\tthis._object.fov = this.pv.fov;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\t// let lock_width = true;//this.pv.lock_width;\n\n\t\t\tthis._object.aspect = this._aspect;\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst other_fov = this.pv.fov / this._aspect;\n\t\t\t// \tthis._object.zoom = this.get_zoom(this._aspect, other_fov, this.pv.vertical_fov_range);\n\t\t\t// } else {\n\t\t\t// \tthis._object.zoom = 1;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\t// private get_zoom(start_zoom: number, other_fov: number, range: Vector2) {\n\t// \tlet zoom = start_zoom;\n\t// \tif (range) {\n\t// \t\tif (other_fov < range.x || other_fov > range.y) {\n\t// \t\t\tconst new_other_fov = lodash_clamp(other_fov, range.x, range.y);\n\t// \t\t\tzoom = start_zoom * (other_fov / new_other_fov);\n\t// \t\t\t// zoom = Math.min(start_zoom, zoom)\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_sum from 'lodash/sum';\n// import { Vector2 } from 'three';\n\n// enum CornerNames {\n// \tbl = 'bl',\n// \tbr = 'br',\n// \ttl = 'tl',\n// \ttr = 'tr',\n// }\ninterface Corners2D {\n\tbl: Vector2Like;\n\tbr: Vector2Like;\n\ttl: Vector2Like;\n\ttr: Vector2Like;\n}\ninterface Corners3D {\n\tbl: Vector3;\n\tbr: Vector3;\n\ttl: Vector3;\n\ttr: Vector3;\n}\nconst SCREEN_COORD: Corners2D = {\n\tbl: {x: -1, y: -1},\n\tbr: {x: +1, y: -1},\n\ttl: {x: -1, y: +1},\n\ttr: {x: +1, y: +1},\n};\nconst CORNER_NAMES: Array<keyof Corners3D> = ['bl', 'br', 'tl', 'tr'];\n\nexport class PerspectiveCameraBackgroundController extends BaseBackgroundController {\n\tprivate _bg_corner: Corners3D = {\n\t\tbl: new Vector3(),\n\t\tbr: new Vector3(),\n\t\ttl: new Vector3(),\n\t\ttr: new Vector3(),\n\t};\n\tprivate _bg_center = new Vector3();\n\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tfor (let corner_name of CORNER_NAMES) {\n\t\t\tthis._update_corner_vector(this._bg_corner[corner_name], SCREEN_COORD[corner_name]);\n\t\t}\n\t\tlet width = this._bg_corner.bl.distanceTo(this._bg_corner.br);\n\t\tlet height = this._bg_corner.bl.distanceTo(this._bg_corner.tl);\n\n\t\tthis._bg_center.x = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].x)) / 4;\n\t\tthis._bg_center.y = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].y)) / 4;\n\t\tthis._bg_center.z = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].z)) / 4;\n\n\t\tconst far = this.node.params.float('far');\n\t\tconst background_ratio = this.node.params.float('background_ratio');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tconst z = this._bg_center.distanceTo(this.node.object.position);\n\t\t\tconst z_ratio = far / z;\n\t\t\tconst desired_ratio = background_ratio || 1;\n\n\t\t\tif (width > height) {\n\t\t\t\theight = width / desired_ratio;\n\t\t\t} else {\n\t\t\t\theight = width * desired_ratio;\n\t\t\t}\n\n\t\t\tquad.scale.x = width * z_ratio;\n\t\t\tquad.scale.y = height * z_ratio;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n\t_update_corner_vector(vector: Vector3, coord: Vector2Like) {\n\t\tthis._bg_raycaster.setFromCamera(coord, this.node.object);\n\t\tvector\n\t\t\t.copy(this._bg_raycaster.ray.direction)\n\t\t\t.multiplyScalar(this.node.params.float('far'))\n\t\t\t.add(this._bg_raycaster.ray.origin);\n\t}\n}\n","import {CATEGORY_SOP} from './Category';\n\nimport {AddSopNode} from '../../nodes/sop/Add';\nimport {AnimationCopySopNode} from '../../nodes/sop/AnimationCopy';\nimport {AnimationMixerSopNode} from '../../nodes/sop/AnimationMixer';\nimport {AttribAddMultSopNode} from '../../nodes/sop/AttribAddMult';\nimport {AttribCopySopNode} from '../../nodes/sop/AttribCopy';\nimport {AttribCreateSopNode} from '../../nodes/sop/AttribCreate';\nimport {AttribDeleteSopNode} from '../../nodes/sop/AttribDelete';\nimport {AttribNormalizeSopNode} from '../../nodes/sop/AttribNormalize';\nimport {AttribPromoteSopNode} from '../../nodes/sop/AttribPromote';\nimport {AttribRemapSopNode} from '../../nodes/sop/AttribRemap';\nimport {AttribRenameSopNode} from '../../nodes/sop/AttribRename';\nimport {AttribTransferSopNode} from '../../nodes/sop/AttribTransfer';\nimport {BboxScatterSopNode} from '../../nodes/sop/BboxScatter';\nimport {BlendSopNode} from '../../nodes/sop/Blend';\nimport {BoxSopNode} from '../../nodes/sop/Box';\nimport {CacheSopNode} from '../../nodes/sop/Cache';\nimport {CircleSopNode} from '../../nodes/sop/Circle';\nimport {CodeSopNode} from '../../nodes/sop/Code';\nimport {ColorSopNode} from '../../nodes/sop/Color';\nimport {ConeSopNode} from '../../nodes/sop/Cone';\nimport {CopySopNode} from '../../nodes/sop/Copy';\nimport {DataSopNode} from '../../nodes/sop/Data';\nimport {DataUrlSopNode} from '../../nodes/sop/DataUrl';\nimport {DelaySopNode} from '../../nodes/sop/Delay';\nimport {DeleteSopNode} from '../../nodes/sop/Delete';\nimport {FaceSopNode} from '../../nodes/sop/Face';\nimport {FileSopNode} from '../../nodes/sop/File';\nimport {FuseSopNode} from '../../nodes/sop/Fuse';\nimport {HexagonsSopNode} from '../../nodes/sop/Hexagons';\nimport {HierarchySopNode} from '../../nodes/sop/Hierarchy';\n// TODO: heightmap\nimport {InstanceSopNode} from '../../nodes/sop/Instance';\nimport {JitterSopNode} from '../../nodes/sop/Jitter';\nimport {LayerSopNode} from '../../nodes/sop/Layer';\nimport {LineSopNode} from '../../nodes/sop/Line';\nimport {MaterialSopNode} from '../../nodes/sop/Material';\nimport {MergeSopNode} from '../../nodes/sop/Merge';\nimport {NoiseSopNode} from '../../nodes/sop/Noise';\nimport {NormalsSopNode} from '../../nodes/sop/Normals';\nimport {NullSopNode} from '../../nodes/sop/Null';\nimport {ObjectMergeSopNode} from '../../nodes/sop/ObjectMerge';\nimport {OcclusionSopNode} from '../../nodes/sop/Occlusion';\nimport {ParticlesSystemGpuSopNode} from '../../nodes/sop/ParticlesSystemGpu';\nimport {PeakSopNode} from '../../nodes/sop/Peak';\nimport {PlaneSopNode} from '../../nodes/sop/Plane';\nimport {PointSopNode} from '../../nodes/sop/Point';\nimport {PolywireSopNode} from '../../nodes/sop/Polywire';\nimport {RaySopNode} from '../../nodes/sop/Ray';\nimport {ResampleSopNode} from '../../nodes/sop/Resample';\nimport {ScatterSopNode} from '../../nodes/sop/Scatter';\nimport {ShadowsSopNode} from '../../nodes/sop/Shadows';\nimport {SkinSopNode} from '../../nodes/sop/Skin';\nimport {SphereSopNode} from '../../nodes/sop/Sphere';\nimport {SwitchSopNode} from '../../nodes/sop/Switch';\nimport {TextSopNode} from '../../nodes/sop/Text';\nimport {TorusSopNode} from '../../nodes/sop/Torus';\nimport {TorusKnotSopNode} from '../../nodes/sop/TorusKnot';\nimport {TransformSopNode} from '../../nodes/sop/Transform';\nimport {TubeSopNode} from '../../nodes/sop/Tube';\nimport {UvProjectSopNode} from '../../nodes/sop/UvProject';\n\nexport interface GeoNodeChildrenMap {\n\tadd: AddSopNode;\n\tanimation_copy: AnimationCopySopNode;\n\tanimation_mixer: AnimationMixerSopNode;\n\tattrib_add_mult: AttribAddMultSopNode;\n\tattrib_copy: AttribCopySopNode;\n\tattrib_create: AttribCreateSopNode;\n\tattrib_delete: AttribDeleteSopNode;\n\tattrib_normalize: AttribNormalizeSopNode;\n\tattrib_promote: AttribPromoteSopNode;\n\tattrib_remap: AttribRemapSopNode;\n\tattrib_rename: AttribRenameSopNode;\n\tattrib_transfer: AttribTransferSopNode;\n\tbbox_scatter: BboxScatterSopNode;\n\tblend: BlendSopNode;\n\tbox: BoxSopNode;\n\tcache: CacheSopNode;\n\tcircle: CircleSopNode;\n\tcode: CodeSopNode;\n\tcolor: ColorSopNode;\n\tcopy: CopySopNode;\n\tdata: DataSopNode;\n\tdata_url: DataUrlSopNode;\n\tdelay: DelaySopNode;\n\tdelete: DeleteSopNode;\n\tface: FaceSopNode;\n\tfile: FileSopNode;\n\tfuse: FuseSopNode;\n\thexagons: HexagonsSopNode;\n\thierarchy: HierarchySopNode;\n\tinstance: InstanceSopNode;\n\tjitter: JitterSopNode;\n\tlayer: LayerSopNode;\n\tline: LineSopNode;\n\tmaterial: MaterialSopNode;\n\tmerge: MergeSopNode;\n\tnoise: NoiseSopNode;\n\tnormals: NormalsSopNode;\n\tnull: NullSopNode;\n\tobject_merge: ObjectMergeSopNode;\n\tocclusion: OcclusionSopNode;\n\tparticles_system_gpu: ParticlesSystemGpuSopNode;\n\tpeak: PeakSopNode;\n\tplane: PlaneSopNode;\n\tpoint: PointSopNode;\n\tpolywire: PolywireSopNode;\n\tray: RaySopNode;\n\tresample: ResampleSopNode;\n\tscatter: ScatterSopNode;\n\tshadows: ShadowsSopNode;\n\tskin: SkinSopNode;\n\tsphere: SphereSopNode;\n\tswitch: SwitchSopNode;\n\ttext: TextSopNode;\n\ttorus: TorusSopNode;\n\ttorus_knot: TorusKnotSopNode;\n\ttransform: TransformSopNode;\n\ttube: TubeSopNode;\n\tuv_project: UvProjectSopNode;\n}\n\nimport {Poly} from '../../Poly';\nexport class SopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AddSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(AnimationCopySopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AnimationMixerSopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AttribAddMultSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCopySopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCreateSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribDeleteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribNormalizeSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribPromoteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRemapSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRenameSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribTransferSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(BboxScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BlendSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BoxSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CacheSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(CodeSopNode, CATEGORY_SOP.ADVANCED);\n\t\tpoly.register_node(CircleSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(ColorSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ConeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(CopySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(DataSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DataUrlSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DelaySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(DeleteSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FaceSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FileSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(FuseSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(HexagonsSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(HierarchySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(InstanceSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(JitterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LayerSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LineSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(MaterialSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(MergeSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NoiseSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NormalsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(NullSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ObjectMergeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(OcclusionSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(ParticlesSystemGpuSopNode, CATEGORY_SOP.DYNAMICS);\n\t\tpoly.register_node(PeakSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PlaneSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(PointSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PolywireSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(RaySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ResampleSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SkinSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ShadowsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SphereSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(SwitchSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(TextSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TorusKnotSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(TransformSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(TubeSopNode, CATEGORY_SOP.PRIMITIVES);\n\t\tpoly.register_node(UvProjectSopNode, CATEGORY_SOP.MODIFIER);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten';\n// import lodash_last from 'lodash/last';\nimport lodash_times from 'lodash/times';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometryUtilShape} from '../../../core/geometry/util/Shape';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AddSopParamsConfig extends NodeParamsConfig {\n\tcreate_point = ParamConfig.BOOLEAN(1);\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 100],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {create_point: true},\n\t});\n\tposition = ParamConfig.VECTOR3([0, 0, 0], {visible_if: {create_point: true}});\n\t// create_polygon = ParamConfig.BOOLEAN(0);\n\topen = ParamConfig.BOOLEAN(0);\n\tconnect_to_last_point = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new AddSopParamsConfig();\n\nexport class AddSopNode extends TypedSopNode<AddSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'add';\n\t}\n\t_objects: Object3D[] | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create polygons from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._objects = [];\n\t\tthis._create_point();\n\t\t// if (this.pv.create_polygon) {\n\t\t// \tthis._create_polygon(input_contents[0]);\n\t\t// }\n\n\t\tthis.set_objects(this._objects);\n\t}\n\n\tprivate _create_point() {\n\t\tif (this.pv.create_point) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions: number[] = [];\n\t\t\tlodash_times(this.pv.points_count, (i) => {\n\t\t\t\tthis.pv.position.toArray(positions, i * 3);\n\t\t\t});\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\t\t\tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\n\t\t\tif (this._objects) {\n\t\t\t\tthis._objects.push(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_polygon(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\t// \tconst is_polygon_closed = !this.pv.open && points.length >= 3;\n\t// \tif (points.length > 0) {\n\t// \t\tif (is_polygon_closed) {\n\t// \t\t\tthis._create_polygon_closed(core_group);\n\t// \t\t} else {\n\t// \t\t\tthis._create_polygon_open(core_group);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _create_polygon_closed(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tconst geometry = CoreGeometryUtilShape.geometry_from_points(points);\n\t// \tconst object = this.create_object(geometry);\n\t// \tthis._objects.push(object);\n\t// }\n\n\t// _create_polygon_open(core_group:CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tlet positions:number[][] = [];\n\t// \tconst indices:number[] = [];\n\t// \tpoints.forEach((point, i) => {\n\t// \t\tpoint.position().toArray(positions, i * 3);\n\t// \t\t// positions.push(point.position().toArray());\n\n\t// \t\tif (i > 0) {\n\t// \t\t\tindices.push(i - 1);\n\t// \t\t\tindices.push(i);\n\t// \t\t}\n\t// \t});\n\n\t// \tif (points.length > 2 && this.pv.connect_to_last_point) {\n\t// \t\tpositions.push(points[0].position().toArray());\n\t// \t\tindices.push(lodash_last(indices));\n\t// \t\tindices.push(0);\n\t// \t}\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new BufferGeometry();\n\t// \tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \tthis._objects.push(object);\n\t// }\n}\n","import lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Triangle} from 'three/src/math/Triangle';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferGeometry, Triangle, Vector2, Vector3}\nimport {CorePoint} from './Point';\nimport {CoreGeometry} from './Geometry';\nimport {CoreMath} from '../math/_Module';\n// import {CoreInterpolate} from '../Math/Interpolate'\n\ninterface FaceLike {\n\ta: number;\n\tb: number;\n\tc: number;\n}\n\ntype CorePointArray3 = [CorePoint, CorePoint, CorePoint];\ntype Vector3Array2 = [Vector3, Vector3];\ntype Vector3Array3 = [Vector3, Vector3, Vector3];\n\nexport class CoreFace {\n\t_geometry: BufferGeometry;\n\t_points: CorePointArray3 | undefined;\n\t_triangle: Triangle | undefined;\n\t_positions: Vector3Array3 | undefined;\n\t_deltas: Vector3Array2 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, private _index: number) {\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\tget index() {\n\t\treturn this._index;\n\t}\n\tget points() {\n\t\treturn (this._points = this._points || this._get_points());\n\t}\n\tprivate _get_points(): CorePointArray3 {\n\t\tconst index_array = this._geometry.index?.array || [];\n\t\tconst start = this._index * 3;\n\t\treturn [\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 0]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 1]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 2]),\n\t\t];\n\t}\n\tget positions() {\n\t\treturn (this._positions = this._positions || this._get_positions());\n\t}\n\tprivate _get_positions(): Vector3Array3 {\n\t\tconst points = this.points;\n\t\treturn [points[0].position(), points[1].position(), points[2].position()];\n\t}\n\tget triangle() {\n\t\treturn (this._triangle = this._triangle || this._get_triangle());\n\t}\n\tprivate _get_triangle(): Triangle {\n\t\tconst positions = this.positions;\n\t\treturn new Triangle(positions[0], positions[1], positions[2]);\n\t}\n\tget deltas() {\n\t\treturn (this._deltas = this._deltas || this._get_deltas());\n\t}\n\tprivate _get_deltas(): Vector3Array2 {\n\t\treturn [this.positions[1].clone().sub(this.positions[0]), this.positions[2].clone().sub(this.positions[0])];\n\t}\n\n\tget area(): number {\n\t\treturn this.triangle.getArea();\n\t}\n\tcenter(target: Vector3) {\n\t\tconst positions = this.positions;\n\t\ttarget.x = (positions[0].x + positions[1].x + positions[2].x) / 3;\n\t\ttarget.y = (positions[0].y + positions[1].y + positions[2].y) / 3;\n\t\ttarget.z = (positions[0].z + positions[1].z + positions[2].z) / 3;\n\n\t\treturn target;\n\t}\n\n\trandom_position(seed: number) {\n\t\tlet weights = [CoreMath.rand_float(seed), CoreMath.rand_float(seed * 6541)];\n\n\t\tif (weights[0] + weights[1] > 1) {\n\t\t\tweights[0] = 1 - weights[0];\n\t\t\tweights[1] = 1 - weights[1];\n\t\t}\n\n\t\treturn this.positions[0]\n\t\t\t.clone()\n\t\t\t.add(this.deltas[0].clone().multiplyScalar(weights[0]))\n\t\t\t.add(this.deltas[1].clone().multiplyScalar(weights[1]));\n\t}\n\t// random_position(seed: number){\n\t// \tlet weights = [\n\t// \t\tCoreMath.rand_float(seed),\n\t// \t\tCoreMath.rand_float(seed*524),\n\t// \t\tCoreMath.rand_float(seed*4631)\n\t// \t]\n\t// \tconst sum = lodash_sum(weights)\n\t// \tweights = weights.map(w=>w/sum)\n\t// \tconst pos = new Vector3()\n\t// \tlet positions = this.positions().map((p,i)=> p.multiplyScalar(weights[i]))\n\t// \tpositions.forEach(p=>{\n\t// \t\tpos.add(p)\n\t// \t})\n\t// \treturn pos\n\t// }\n\n\tattrib_value_at_position(attrib_name: string, position: Vector3) {\n\t\t// const weights = CoreInterpolate._weights_from_3(position, this._positions)\n\t\tconst barycentric_coordinates = new Vector3();\n\t\tthis.triangle.getBarycoord(position, barycentric_coordinates);\n\t\tconst weights = barycentric_coordinates.toArray();\n\n\t\tconst attrib = this._geometry.attributes[attrib_name];\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst point_values = this.points.map((point) => point.attrib_value(attrib_name));\n\n\t\tlet new_attrib_value;\n\t\tlet sum;\n\t\tlet index = 0;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tsum += point_value * weights[index];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tconst weighted_value = point_value.multiplyScalar(weights[index]);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\tsum.add(weighted_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum = weighted_value;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t}\n\t\t}\n\t\treturn new_attrib_value;\n\t}\n\n\tstatic interpolated_value(\n\t\tgeometry: BufferGeometry,\n\t\tface: FaceLike,\n\t\tintersect_point: Vector3,\n\t\tattrib: BufferAttribute\n\t) {\n\t\t// let point_index, i, sum\n\t\tconst point_indices = [face.a, face.b, face.c];\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_attrib_array = position_attrib.array;\n\t\tconst point_positions = point_indices.map(\n\t\t\t(point_index) =>\n\t\t\t\tnew Vector3(\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 0],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 1],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 2]\n\t\t\t\t)\n\t\t);\n\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst attrib_array = attrib.array;\n\t\tlet attrib_values: NumericAttribValue[] = [];\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tattrib_values = point_indices.map((point_index) => attrib_array[point_index]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) => new Vector2(attrib_array[point_index * 2 + 0], attrib_array[point_index * 2 + 1])\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) =>\n\t\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 0],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 1],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 2]\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst dist_to_points = point_indices.map((point_index, i) => intersect_point.distanceTo(point_positions[i]));\n\n\t\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-points\n\t\t// TODO: replace this with Core.Math.Interpolate\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_points[0] * dist_to_points[1],\n\t\t\tdist_to_points[0] * dist_to_points[2],\n\t\t\tdist_to_points[1] * dist_to_points[2],\n\t\t]);\n\n\t\tconst weights = [\n\t\t\t(dist_to_points[1] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[1]) / distance_total,\n\t\t];\n\n\t\tlet new_attrib_value;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tnew_attrib_value = lodash_sum(\n\t\t\t\t\tpoint_indices.map((point_indx, i) => weights[i] * (attrib_values[i] as number))\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar values = point_indices.map((point_index, i) =>\n\t\t\t\t\t(attrib_values[i] as Vector3).multiplyScalar(weights[i])\n\t\t\t\t);\n\t\t\t\tnew_attrib_value = null;\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (new_attrib_value) {\n\t\t\t\t\t\tnew_attrib_value.add(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew_attrib_value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn new_attrib_value;\n\t}\n}\n","import {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute'\n\nexport class MonkeyPatcher {\n\t// this allows cloning of geometries containing InterleavedBufferAttribute such as soldier.glb\n\tstatic patch(attribute: InterleavedBufferAttribute) {\n\t\tObject.assign(attribute, {\n\t\t\tclone: function() {\n\t\t\t\treturn new InterleavedBufferAttribute(\n\t\t\t\t\tattribute.data.clone(),\n\t\t\t\t\tattribute.itemSize,\n\t\t\t\t\tattribute.offset,\n\t\t\t\t\tattribute.normalized\n\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Object3D} from 'three/src/core/Object3D'\n// import {Group} from 'three/src/objects/Group'\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Box3} from 'three/src/math/Box3';\nimport {TypedContainer} from './_Base';\nimport {CoreGroup} from '../../core/geometry/Group';\n// import {CoreObject} from '../../core/geometry/Object'\nimport {CoreGeometry} from '../../core/geometry/Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {ContainableMap} from './utils/ContainableMap';\n// import {CoreConstant} from '../../core/geometry/Constant'\n\n// const CoreGeometryGroup = CoreGroup\n\n// export type RequestContainerGeometryCallback = (container: Geometry)=>void\n\n// interface GroupOptions {\n// \tclone?: boolean\n// }\n// interface BooleanByString {\n// \t[propName: string]: boolean\n// }\nexport class GeometryContainer extends TypedContainer<ContainableMap['GEOMETRY']> {\n\t// protected _group: Group = new Group()\n\t// private _objects_by_uuid: BooleanByString = {}\n\t// protected _content: Object3D[] = []\n\t// protected _core_group: CoreGroup | null;\n\n\t// _points_count: number | null;\n\t// _bounding_box: Box3 | null;\n\n\t// constructor() {\n\t// \tsuper();\n\t// \t// this._materials = [];\n\t// }\n\n\t// _post_set_content() {\n\t// \tthis._core_group = this._core_group || new CoreGroup();\n\t// \tthis._core_group.touch();\n\t// \tthis._core_group.set_objects(this._content);\n\t// }\n\tset_objects(objects: Object3D[]) {}\n\n\t// clone_content(){\n\t// \treturn this._content.map(object=>CoreObject.clone(object))\n\t// }\n\t// core_content(): CoreGroup | null {\n\t// \treturn this._core_group; //= this._core_group || this._create_core_group()\n\t// }\n\tcore_content_cloned(): CoreGroup | undefined {\n\t\tif (this._content) {\n\t\t\treturn this._content.clone();\n\t\t}\n\t}\n\t// private _create_core_group(){\n\t// \tif(this._content){\n\t// \t\tconst core_group = new CoreGroup()\n\t// \t\tcore_group.set_objects(this._content)\n\t// \t\treturn core_group\n\t// \t}\n\t// }\n\t// reset_caches() {\n\t// \tconsole.log('reset cache');\n\t// \t// this._content = null;\n\t// \t// this._points_count = null;\n\t// \t// this._bounding_box = null;\n\t// }\n\t// _default_content() {\n\t// \treturn new CoreGroup();\n\t// }\n\n\t// set_geometry: (geometry)->\n\t// \tif @_content?\n\t// \t\t@_content.dispose()\n\t// \tthis.set_content(geometry)\n\t// has_group: ->\n\t// \tthis.has_content()\n\t// group(options?: GroupOptions): Group | null{\n\t// \tlet src_group;\n\t// \tif (options == null) { options = {}; }\n\t// \tif ((options['clone'] == null)) {\n\t// \t\toptions['clone'] = true;\n\t// \t}\n\n\t// \tlet new_group = null;\n\t// \tif ((src_group = this.content()) != null) {\n\t// \t\tif (options['clone'] === true) {\n\t// \t\t\tnew_group = CoreGroup.clone(src_group);\n\t// \t\t} else {\n\t// \t\t\tnew_group = src_group;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn new_group;\n\t// }\n\n\t// group_wrapper(options){\n\t// \t// if (options == null) { options = {}; }\n\t// \t// return new CoreGroup(this.group(options));\n\t// }\n\t// core_group() {\n\t// \treturn this._core_group; //this.group_wrapper(options)\n\t// }\n\tset_content(content: ContainableMap['GEOMETRY']) {\n\t\tsuper.set_content(content);\n\t}\n\t// object(options){\n\t// \tif (options == null) { options = {}; }\n\t// \treturn this.group(options);\n\t// }\n\t// _post_set_content(){\n\t// \t// const objects_to_remove = []\n\t// \t// const objects_to_add = []\n\t// \t// const new_objects_by_uuid = {}\n\t// \t// for(let object of this._content){\n\t// \t// \tif(!this._objects_by_uuid[object.uuid]){\n\t// \t// \t\tobjects_to_add.push(object)\n\t// \t// \t}\n\t// \t// \tnew_objects_by_uuid[object.uuid] = true\n\t// \t// }\n\t// \t// for(let uuid of Object.keys(this._objects_by_uuid)){\n\n\t// \t// }\n\t// \tlet child\n\t// \twhile(child = this._group.children[0]){\n\t// \t\tthis._group.remove(child)\n\t// \t}\n\t// \tfor(let object of this._content){\n\t// \t\tthis._group.add(object)\n\t// \t}\n\t// }\n\n\t//\n\t//\n\t// INFOS\n\t//\n\t//\n\t// infos() {\n\t// \tif (this._content != null) {\n\t// \t\tconst bbox = this.bounding_box();\n\t// \t\tconst center = this.center(); //bbox.min.clone().add(bbox.max).multiplyScalar(0.5)\n\t// \t\tconst size = this.size(); //bbox.max.clone().sub(bbox.min)\n\n\t// \t\tconst node = this.node();\n\t// \t\tconst part_1 = [\n\t// \t\t\t`time dependent: ${node.is_time_dependent()}`,\n\t// \t\t\t`${node.cooks_count()} cooks`,\n\t// \t\t\t`cook time: ${node.cook_time()}`,\n\t// \t\t\t`cook time with inputs: ${node.cook_time_with_inputs()}`,\n\t// \t\t\t`${this.points_count()} points`,\n\t// \t\t\t`${this.objects_count()} object(s)  (${this.objects_visible_count()} visible)`\n\t// \t\t];\n\n\t// \t\tconst part_2 = [];\n\t// \t\tconst count_by_type = this.objects_count_by_type();\n\t// \t\tObject.keys(count_by_type).forEach((type)=>{\n\n\t// \t\t\tconst count = count_by_type[type];\n\t// \t\t\treturn part_2.push(`${count} ${type}`);\n\t// \t\t});\n\n\t// \t\tconst vertex_attributes = this.vertex_attribute_names();\n\t// \t\tconst object_attributes = this.object_attribute_names();\n\t// \t\tpart_2.push(`vertex attributes (${vertex_attributes.length}): ${vertex_attributes.join(', ')}`);\n\t// \t\tpart_2.push(`object attributes (${object_attributes.length}): ${object_attributes.join(', ')}`);\n\n\t// \t\tconst part_3 = [\n\t// \t\t\t\"bbox:\",\n\t// \t\t\t[bbox.min.x, bbox.min.y, bbox.min.z],\n\t// \t\t\t[bbox.max.x, bbox.max.y, bbox.max.z],\n\t// \t\t\t\"center:\",\n\t// \t\t\t[center.x, center.y, center.z],\n\t// \t\t\t\"size:\",\n\t// \t\t\t[size.x, size.y, size.z],\n\t// \t\t\tthis._content\n\t// \t\t];\n\n\t// \t\treturn lodash_concat( part_1, part_2, part_3 );\n\t// \t}\n\t// }\n\n\tprivate first_object() {\n\t\tif (this._content) {\n\t\t\treturn this._content.objects()[0];\n\t\t}\n\t}\n\tprivate first_geometry(): BufferGeometry | null {\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tobjects_count(): number {\n\t\t// let count = 0\n\t\t// if(this._content){\n\t\t// \tcount = this._content.children.length\n\t\t// }\n\t\t// return count\n\t\tif (this._content) {\n\t\t\treturn this._content.objects().length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tobjects_visible_count(): number {\n\t\tlet count = 0;\n\t\tif (this._content) {\n\t\t\tcount = this._content.objects().filter((c) => c.visible).length; // lodash_filter(this._content, c=> c.visible).length;\n\t\t}\n\t\treturn count;\n\t}\n\tobjects_count_by_type() {\n\t\tconst count_by_type: Dictionary<number> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tif (count_by_type[human_type] == null) {\n\t\t\t\t\tcount_by_type[human_type] = 0;\n\t\t\t\t}\n\t\t\t\tcount_by_type[human_type] += 1;\n\t\t\t}\n\t\t}\n\t\treturn count_by_type;\n\t}\n\tobjects_names_by_type() {\n\t\tconst names_by_type: Dictionary<string[]> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tnames_by_type[human_type] = names_by_type[human_type] || [];\n\t\t\t\tnames_by_type[human_type].push(core_object.name());\n\t\t\t}\n\t\t}\n\t\treturn names_by_type;\n\t}\n\n\tvertex_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tnames = Object.keys(geometry.attributes);\n\t\t}\n\t\treturn names;\n\t}\n\tvertex_attribute_sizes_by_name() {\n\t\tlet sizes_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\tsizes_by_name[attrib_name] = attrib.itemSize;\n\t\t\t});\n\t\t}\n\t\treturn sizes_by_name;\n\t}\n\tvertex_attribute_types_by_name() {\n\t\tlet types_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tconst core_geo = new CoreGeometry(geometry);\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\ttypes_by_name[attrib_name] = core_geo.attrib_type(attrib_name);\n\t\t\t});\n\t\t}\n\t\treturn types_by_name;\n\t}\n\tobject_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\tnames = Object.keys(object.userData['attributes'] || {});\n\t\t}\n\t\treturn names;\n\t}\n\n\tpoints_count(): number {\n\t\tif (this._content) {\n\t\t\treturn this._content.points_count();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// return this._points_count != null ? this._points_count : (this._points_count = this._compute_points_count());\n\t}\n\n\t// _compute_points_count() {\n\t// \tlet points_count = 0;\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\tobject.traverse((object) => {\n\t// \t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t// \t\t\t\tif (geometry) {\n\t// \t\t\t\t\tpoints_count += CoreGeometry.points_count(geometry);\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// \treturn points_count;\n\t// }\n\t//@_content.userData['points_count']\n\t//Core.Geometry.Geometry.points_count(@_content)\n\t// count = 0\n\t// if (position = @_content.getAttribute('position'))?\n\t// \tif (array = position.array)?\n\t// \t\tcount = array.length / 3\n\n\t// count\n\n\t// points_for_geometry: (geometry)->\n\t// \tCore.Geometry.Geometry.points_from_geometry(geometry)\n\n\t// create_geometry_from_points: (points, index_mode)->\n\t// \tCore.Geometry.Geometry.geometry_from_points(points, index_mode)\n\n\t//\n\t//\n\t// BBOX\n\t//\n\t//\n\tbounding_box(): Box3 {\n\t\treturn this._content.bounding_box();\n\t\t// return this._bounding_box != null ? this._bounding_box : (this._bounding_box = this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\treturn this._content.center();\n\t\t// const center = new Vector3();\n\t\t// this.bounding_box().getCenter(center);\n\t\t// return center;\n\t}\n\tsize(): Vector3 {\n\t\treturn this._content.size();\n\t\t// const size = new Vector3();\n\t\t// this.bounding_box().getSize(size);\n\t\t// return size;\n\t}\n\n\t// private _compute_bounding_box() {\n\t// \tconst bbox = new Box3();\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\t// const box = new Box3()\n\t// \t\t\t// bbox.setFromObject(object);\n\t// \t\t\tbbox.expandByObject(object);\n\t// \t\t}\n\t// \t}\n\t// \treturn bbox;\n\t// }\n}\n","import {TypedSopNode} from './_Base';\n// import {CoreTransform} from '../../../Core/Transform';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// interface ActionsByName {\n// \t[propName: string]: THREE.AnimationClip;\n// }\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nclass AnimationCopySopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new AnimationCopySopParamsConfig();\n\nexport class AnimationCopySopNode extends TypedSopNode<AnimationCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy animation to', 'geometry to copy animation from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_target = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst src_object = core_group_src.objects()[0] as Object3DWithAnimation;\n\t\tconst target_object = core_group_target.objects()[0] as Object3DWithAnimation;\n\n\t\tconst src_animations = src_object.animations;\n\t\tif (src_animations) {\n\t\t\ttarget_object.animations = src_animations.map((a) => a.clone());\n\t\t\tthis.set_core_group(core_group_target);\n\t\t} else {\n\t\t\tthis.states.error.set('no animation found');\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport lodash_isArray from 'lodash/isArray';\n// import {Object3D} from 'three/src/core/Object3D';\nimport {AnimationMixer} from 'three/src/animation/AnimationMixer';\n// import {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {Object3DWithAnimation} from '../../../core/geometry/Animation';\nimport {ParamType} from '../../poly/ParamType';\nimport {AnimationAction} from 'three/src/animation/AnimationAction';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {Material} from 'three/src/materials/Materials';\nimport {MaterialWithSkinning} from '../../../core/geometry/Material';\nimport {NodeEvent} from '../../poly/NodeEvent';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseNodeType} from '../_Base';\nclass AnimationMixerSopParamsConfig extends NodeParamsConfig {\n\ttime = ParamConfig.FLOAT('$T', {range: [0, 10]});\n\tprepare = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tAnimationMixerSopNode.PARAM_CALLBACK_prepare(node as AnimationMixerSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new AnimationMixerSopParamsConfig();\n\nexport class AnimationMixerSopNode extends TypedSopNode<AnimationMixerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_mixer';\n\t}\n\n\t_previous_time: number | null = null;\n\t_mixer: AnimationMixer | null = null;\n\t_actions_by_name: Dictionary<AnimationAction> = {};\n\t_values_by_param_name: Dictionary<number> = {};\n\t// _mixer_used_once: boolean = false\n\t_animation_target: Object3DWithAnimation | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be animated'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tif (!this._mixer) {\n\t\t\tthis.create_mixer(input_contents[0]);\n\t\t} else {\n\t\t\tthis._update_mixer();\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate create_mixer(core_group: CoreGroup) {\n\t\tthis._animation_target = core_group.objects()[0] as Object3DWithAnimation;\n\t\tthis._mixer = new AnimationMixer(this._animation_target);\n\n\t\tthis._remove_spare_params();\n\t\tthis._actions_by_name = {};\n\n\t\tif (this._animation_target.animations) {\n\t\t\tthis._animation_target.animations.forEach((animation, i) => {\n\t\t\t\tconst param_name = animation.name;\n\t\t\t\tconst previous_value = this._values_by_param_name[param_name];\n\t\t\t\tlet default_value = previous_value;\n\t\t\t\tif (default_value == null) {\n\t\t\t\t\tdefault_value = i == 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tconst param = this.add_param(ParamType.FLOAT, param_name, default_value, {spare: true});\n\t\t\t\tif (param) {\n\t\t\t\t\tconst prev_value = this._values_by_param_name[param_name];\n\t\t\t\t\tif (prev_value) {\n\t\t\t\t\t\tparam.set(prev_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._mixer) {\n\t\t\t\t\tconst action = this._mixer.clipAction(animation);\n\t\t\t\t\tthis._actions_by_name[animation.name] = action;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\n\t\tObject.keys(this._actions_by_name).forEach((name) => {\n\t\t\tthis._actions_by_name[name].play();\n\t\t});\n\n\t\t// set material skinning\n\t\tconst materials_by_id: Dictionary<Material> = {};\n\t\tthis._animation_target.traverse((object3d: Object3D) => {\n\t\t\tconst child = object3d as Mesh;\n\t\t\tif (child.material) {\n\t\t\t\tif (!lodash_isArray(child.material)) {\n\t\t\t\t\tmaterials_by_id[child.material.uuid] = child.material;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.keys(materials_by_id).forEach((uuid) => {\n\t\t\tconst material = materials_by_id[uuid] as MaterialWithSkinning;\n\t\t\tmaterial.skinning = true;\n\t\t\tmaterial.morphTargets = true;\n\t\t});\n\t\tthis._previous_time = null;\n\t\tthis._update_mixer();\n\t\tthis._update_mixer_weights(); // might be redundant with _update_mixer, but ensures this is done on load\n\t\tthis.set_object(this._animation_target);\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tthis._values_by_param_name = {};\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tconst names_to_delete: string[] = [];\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get_float(param_name);\n\t\t\tif (param) {\n\t\t\t\tthis._values_by_param_name[param_name] = param.value;\n\t\t\t\tnames_to_delete.push(param_name);\n\t\t\t}\n\t\t});\n\t\tif (names_to_delete.length > 0) {\n\t\t\tthis.params.update_params({names_to_delete: names_to_delete});\n\t\t}\n\t}\n\n\tprivate _update_mixer() {\n\t\tif (this.pv.time != this._previous_time) {\n\t\t\tthis._update_mixer_time();\n\t\t} else {\n\t\t\tthis._update_mixer_weights();\n\t\t}\n\t}\n\tprivate _update_mixer_time() {\n\t\tconst delta = this.pv.time - (this._previous_time || 0);\n\t\tif (this._mixer) {\n\t\t\tthis._mixer.update(delta);\n\t\t}\n\t\tthis._previous_time = this.pv.time;\n\t}\n\n\tprivate _update_mixer_weights() {\n\t\tfor (let name of Object.keys(this._actions_by_name)) {\n\t\t\tconst action = this._actions_by_name[name];\n\t\t\tconst cache_value = this.params.get_float(name).value;\n\t\t\tif (cache_value != null) {\n\t\t\t\taction.setEffectiveWeight(cache_value);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_prepare(node: AnimationMixerSopNode, param: BaseParamType) {\n\t\tnode.prepare_animation_mixer();\n\t}\n\tasync prepare_animation_mixer() {\n\t\tthis._mixer = null;\n\t\tconst container = await this.io.inputs.eval_required_input(0);\n\t\tthis.create_mixer(container.core_content_cloned());\n\t\tthis.set_dirty();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {Core} from '../../../Core/_Module';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribAddMultSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tpre_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n\tmult = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tpost_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n}\nconst ParamsConfig = new AttribAddMultSopParamsConfig();\n\nexport class AttribAddMultSopNode extends TypedSopNode<AttribAddMultSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_add_mult';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tthis._update_attrib(attrib_name, geometry);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _update_attrib(attrib_name: string, geometry: BufferGeometry) {\n\t\tconst attribute = geometry.getAttribute(attrib_name) as BufferAttribute;\n\t\tif (attribute) {\n\t\t\tconst values = attribute.array as number[];\n\n\t\t\tconst pre_add = this.pv.pre_add;\n\t\t\tconst mult = this.pv.mult;\n\t\t\tconst post_add = this.pv.post_add;\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i];\n\t\t\t\tvalues[i] = (value + pre_add) * mult + post_add;\n\t\t\t}\n\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\tattribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nclass AttribCopySopParamsConfig extends NodeParamsConfig {\n\t// class = ParamConfig.INTEGER(CoreConstant.ATTRIB_CLASS.VERTEX, {\n\t// \tmenu: {\n\t// \t\tentries: [\n\t// \t\t\t{name: 'vertex', value: CoreConstant.ATTRIB_CLASS.VERTEX},\n\t// \t\t\t{name: 'object', value: CoreConstant.ATTRIB_CLASS.OBJECT},\n\t// \t\t],\n\t// \t},\n\t// })\n\tname = ParamConfig.STRING('');\n\ttnew_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {tnew_name: 1}});\n\t// to_all_components = ParamConfig.BOOLEAN(1)\n\t// src_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n\t// dest_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n}\nconst ParamsConfig = new AttribCopySopParamsConfig();\n\n// TODO: attrib copy should handle string attributes\nexport class AttribCopySopNode extends TypedSopNode<AttribCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy attributes to', 'geometry to copy attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_dest = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst attrib_names = core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tthis.copy_vertex_attribute_between_core_groups(core_group_dest, core_group_src, attrib_name);\n\t\t}\n\n\t\t// switch (this.pv.class) {\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t// \t\tthis.copy_vertex_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t// \t\tthis.copy_object_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// }\n\n\t\treturn this.set_core_group(core_group_dest);\n\t}\n\n\tprivate copy_vertex_attribute_between_core_groups(\n\t\tcore_group_dest: CoreGroup,\n\t\tcore_group_src: CoreGroup,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_objects = core_group_src.objects();\n\t\tconst dest_objects = core_group_dest.objects();\n\n\t\tif (dest_objects.length > src_objects.length) {\n\t\t\tthis.states.error.set('second input does not have enough objects to copy attributes from');\n\t\t} else {\n\t\t\tfor (let i = 0; i < dest_objects.length; i++) {\n\t\t\t\tconst dest_geometry = dest_objects[i].geometry;\n\t\t\t\tconst src_geometry = dest_objects[i].geometry;\n\t\t\t\tthis.copy_vertex_attribute_between_geometries(dest_geometry, src_geometry, attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\tprivate copy_vertex_attribute_between_geometries(\n\t\tdest_geometry: BufferGeometry,\n\t\tsrc_geometry: BufferGeometry,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_attrib = src_geometry.getAttribute(attrib_name);\n\t\tif (src_attrib) {\n\t\t\tconst size = src_attrib.itemSize;\n\t\t\tconst src_points_count = src_geometry.getAttribute('position').array.length / 3;\n\t\t\tconst dest_points_count = dest_geometry.getAttribute('position').array.length / 3;\n\t\t\tif (dest_points_count > src_points_count) {\n\t\t\t\tthis.states.error.set('not enough points in second input');\n\t\t\t}\n\t\t\tconst src_array = src_attrib.array as number[];\n\t\t\tconst sub_array = src_array.slice(0, dest_points_count * size);\n\t\t\tconst dest_name = this.pv.tnew_name ? this.pv.new_name : attrib_name;\n\t\t\tdest_geometry.setAttribute(dest_name, new Float32BufferAttribute(sub_array, size));\n\t\t} else {\n\t\t\tthis.states.error.set(`attribute '${attrib_name}' does not exist on second input`);\n\t\t}\n\t}\n\n\t// _src_value_to_all_components(src_attrib_value: NumericAttribValue, dest_attrib_size) {\n\t// \tif (lodash_isNumber(src_attrib_value)) {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value, src_attrib_value);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(src_attrib_value, src_attrib_value, src_attrib_value);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.x;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value.x, src_attrib_value.y);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(\n\t// \t\t\t\t\tsrc_attrib_value.x,\n\t// \t\t\t\t\tsrc_attrib_value.y,\n\t// \t\t\t\t\tsrc_attrib_value.z || src_attrib_value.y\n\t// \t\t\t\t);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _src_value_to_component(src_attrib_value, current_dest_value, src_component, dest_component) {\n\t// \tconst src_component_value = (() => {\n\t// \t\tswitch (src_component) {\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn src_attrib_value.x || src_attrib_value;\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.y;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn src_attrib_value.z;\n\t// \t\t}\n\t// \t})();\n\n\t// \tconst dest_component_name = ['x', 'y', 'z'][dest_component];\n\t// \tif (current_dest_value[dest_component_name] != null) {\n\t// \t\tcurrent_dest_value[dest_component_name] = src_component_value;\n\t// \t\treturn current_dest_value;\n\t// \t} else {\n\t// \t\tconst src_component_name = ['x', 'y', 'z'][src_component];\n\t// \t\treturn src_attrib_value[src_component_name];\n\t// \t}\n\t// }\n\n\t// TODO: find a way to use the point method, but have the group api allow easy switch\n\t// private  copy_object_attribute(core_group_dest: CoreGroup, core_group_src:CoreGroup) {\n\t// \t// const objects_dest = core_group_dest.objects();\n\t// \t// const objects_src = core_group_src.objects();\n\n\t// \t//attribute_names = core_group_src.attrib_names_matching_mask(@_param_name)\n\n\t// \t//lodash_each attribute_names, (attrib_name) =>\n\t// \tconst attrib_name = this.pv.name;\n\n\t// \tif (!core_group_dest.has_attrib(attrib_name)) {\n\t// \t\tconst attrib_size = core_group_src.attrib_size(attrib_name);\n\t// \t\tcore_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t// \t}\n\n\t// \tlodash_each(points_dest, (point_dest, i) => {\n\t// \t\tlet point_src;\n\t// \t\tif ((point_src = points_src[i]) != null) {\n\t// \t\t\tconst attrib_value = point_src.attrib_value(attrib_name);\n\t// \t\t\tpoint_dest.set_attrib_value(attrib_name, attrib_value);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedSopNode} from './_Base';\nimport {\n\tCoreConstant,\n\tAttribClassMenuEntries,\n\tAttribTypeMenuEntries,\n\tAttribClass,\n\tAttribType,\n} from '../../../core/geometry/Constant';\nimport {CoreAttribute} from '../../../core/geometry/Attribute';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const VALUE_PARAM = {\n// \tVALUEX: 'valuex',\n// \tVALUE: 'value',\n// \tSTRING: 'string',\n// };\n// const DEFAULT_VALUE = {\n// \tvaluex: 0,\n// \tvalue: [0, 0, 0],\n// \tstring: '',\n// };\n// type COMPONENT_INDEX = keyof Vector4Like;\n// const COMPONENT_INDEX: Array<COMPONENT_INDEX> = ['x', 'y', 'z', 'w'];\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribCreateSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\ttype = ParamConfig.INTEGER(AttribType.NUMERIC, {\n\t\tmenu: {\n\t\t\tentries: AttribTypeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('new_attrib');\n\tsize = ParamConfig.INTEGER(1, {\n\t\trange: [1, 4],\n\t\trange_locked: [true, true],\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC},\n\t});\n\tvalue1 = ParamConfig.FLOAT(0, {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue2 = ParamConfig.VECTOR2([0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 2},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue3 = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 3},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue4 = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 4},\n\t\texpression: {for_entities: true},\n\t});\n\tstring = ParamConfig.STRING('', {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.STRING},\n\t\texpression: {for_entities: true},\n\t});\n}\nconst ParamsConfig = new AttribCreateSopParamsConfig();\nexport class AttribCreateSopNode extends TypedSopNode<AttribCreateSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_create';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _w_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.name && lodash_trim(this.pv.name) != '') {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.add_point_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.add_object_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('attribute name is not valid');\n\t\t}\n\t}\n\n\tasync add_point_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tconst core_object = core_objects[i];\n\t\t\tswitch (this.pv.type) {\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\t\tawait this.add_numeric_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\t\tawait this.add_string_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync add_object_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects_from_group(this.pv.group);\n\t\tswitch (this.pv.type) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\tawait this.add_numeric_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\tawait this.add_string_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tasync add_numeric_attribute_to_points(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\n\t\tif (param.has_expression()) {\n\t\t\tif (!core_geometry.has_attrib(this.pv.name)) {\n\t\t\t\tcore_geometry.add_numeric_attrib(this.pv.name, this.pv.size, param.value);\n\t\t\t}\n\n\t\t\tconst geometry = core_geometry.geometry();\n\t\t\tconst array = geometry.getAttribute(this.pv.name).array as number[];\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\t\tarray[point.index * this.pv.size + 0] = value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tconst tmp_arrays = new Array(params.length);\n\t\t\t\tlet component_param;\n\n\t\t\t\tconst arrays_by_geometry_uuid = [\n\t\t\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._w_arrays_by_geometry_uuid,\n\t\t\t\t];\n\n\t\t\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\t\t\tcomponent_param = params[i];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\ttmp_arrays[i] = this._init_array_if_required(\n\t\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\t\tarrays_by_geometry_uuid[i],\n\t\t\t\t\t\t\tpoints.length\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(point, value) => {\n\t\t\t\t\t\t\t\t// array[point.index()*this.pv.size+i] = value\n\t\t\t\t\t\t\t\ttmp_arrays[i][point.index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value = component_param.value;\n\t\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t\tarray[point.index * this.pv.size + i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// commit the tmp values\n\t\t\t\tfor (let j = 0; j < tmp_arrays.length; j++) {\n\t\t\t\t\tconst tmp_array = tmp_arrays[j];\n\t\t\t\t\tif (tmp_array) {\n\t\t\t\t\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\t\t\t\t\tarray[i * this.pv.size + j] = tmp_array[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// const value = await param.eval_p();\n\t\t\tcore_object.add_numeric_vertex_attrib(this.pv.name, this.pv.size, param.value);\n\t\t}\n\t}\n\n\tasync add_numeric_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\t\tif (param.has_expression()) {\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tlet values_by_core_object_index: Dictionary<NumericAttribValueAsArray> = {};\n\t\t\t\t// for (let component_param of params) {\n\t\t\t\t// \tvalues.push(component_param.value);\n\t\t\t\t// }\n\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\tvalues_by_core_object_index[core_object.index] = (<unknown>[]) as NumericAttribValueAsArray;\n\t\t\t\t}\n\t\t\t\tfor (let component_index = 0; component_index < params.length; component_index++) {\n\t\t\t\t\tconst component_param = params[component_index];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = component_param.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\t\tconst value = values_by_core_object_index[core_object.index];\n\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// let value = await param.eval_p();\n\t\t\t// if (this.pv.size > 1) {\n\t\t\t// \tvalue = this._convert_object_numeric_value(value);\n\t\t\t// }\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _convert_object_numeric_value(value: Vector4) {\n\t// \tlet converted_value;\n\t// \tswitch (this.pv.size) {\n\t// \t\tcase 1: {\n\t// \t\t\tconverted_value = value.x;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 2: {\n\t// \t\t\tconverted_value = new Vector2(value.x, value.y);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 3: {\n\t// \t\t\tconverted_value = new Vector3(value.x, value.y, value.z);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 4: {\n\t// \t\t\tconverted_value = new Vector4(value.x, value.y, value.z, value.w);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn converted_value;\n\t// }\n\n\tasync add_string_attribute_to_points(core_object: CoreObject) {\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\t\tconst param = this.p.string;\n\n\t\tconst string_values: string[] = [];\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tstring_values[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tstring_values.push(param.value);\n\t\t}\n\n\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(string_values);\n\t\tcore_object.core_geometry().set_indexed_attribute(this.pv.name, index_data['values'], index_data['indices']);\n\t}\n\n\tasync add_string_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = this.p.string;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t\t// this.context().set_entity(object);\n\n\t\t// const core_object = new CoreObject(object);\n\n\t\t// this.param('string').eval(val => {\n\t\t// \tcore_object.add_attribute(this.pv.name, val);\n\t\t// });\n\t}\n\n\t//\n\t//\n\t// PRIVATE\n\t//\n\t//\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\t// async _eval_params_for_entities(entities){\n\t// \t// let p = Promise.resolve(); // Q() in q\n\n\t// \tconst param = this._value_param();\n\n\t// \tif (param.has_expression()) {\n\t// \t\t// const iterator = new CoreIterator()\n\t// \t\t// await iterator.start_with_array(entities, (element, index)=>{\n\n\t// \t\t// })\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tawait this._eval_param_for_entity(param, entity);\n\t// \t\t}\n\n\t// \t\t// entities.forEach((entity, index)=> {\n\t// \t\t// \tp = p.then(() => {\n\t// \t\t// \t\treturn this._eval_param_for_entity(param, entity);\n\t// \t\t// \t});\n\t// \t\t// });\n\t// \t} else {\n\t// \t\tconst val = await param.eval_p();\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tthis._values.push(val);\n\t// \t\t}\n\t// \t\t// entities.forEach(entity=> {\n\t// \t\t// \treturn this._values.push(val);\n\t// \t\t// });\n\t// \t}\n\n\t// \t// return p;\n\t// }\n\n\t// async _eval_param_for_entity(value_param, entity){\n\t// \tthis.context().set_entity(entity);\n\n\t// \tlet val = await value_param.eval_p()\n\n\t// \t // TODO: optimize. pass directly to the entity instead\n\t// \tif(val.clone){\n\t// \t\tval = val.clone()\n\t// \t}\n\t// \tthis._values.push(val);\n\t// }\n\n\t// private _default_attrib_value() {\n\t// \treturn DEFAULT_VALUE[this._value_param_name()];\n\t// }\n\n\t// private _value_param_name() {\n\t// \tif (this.pv.type == CoreConstant.ATTRIB_TYPE.NUMERIC) {\n\t// \t\tif (this.pv.size == 1) {\n\t// \t\t\treturn VALUE_PARAM.VALUEX;\n\t// \t\t} else {\n\t// \t\t\treturn VALUE_PARAM.VALUE;\n\t// \t\t}\n\t// \t} else {\n\t// \t\treturn VALUE_PARAM.STRING;\n\t// \t}\n\t// }\n\t// private _value_param() {\n\t// \treturn this.params.get(this._value_param_name());\n\t// }\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\t// private _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t// \tfor (let i = 0; i < tmp_array.length; i++) {\n\t// \t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribDeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribDeleteSopParamsConfig();\n\nexport class AttribDeleteSopNode extends TypedSopNode<AttribDeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_delete';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.delete_vertex_attribute(core_group, attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.delete_object_attribute(core_group, attrib_name);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tdelete_vertex_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tif (child.geometry) {\n\t\t\t\t\tconst core_geometry = new CoreGeometry(child.geometry as BufferGeometry);\n\t\t\t\t\tcore_geometry.delete_attribute(attrib_name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdelete_object_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tlet index = 0;\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tconst core_object = new CoreObject(child, index);\n\t\t\t\tcore_object.delete_attribute(attrib_name);\n\t\t\t\tindex++;\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribNormalizeSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tchange_name = ParamConfig.BOOLEAN(false);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribNormalizeSopParamsConfig();\n\nexport class AttribNormalizeSopNode extends TypedSopNode<AttribNormalizeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_normalize';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._normalize_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_normalize_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet normalized_values: NumericAttribValue[] = [];\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\t// if (this._param_only_integer_values) {\n\t\t\t\t// \tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t// \tconst index_by_value = {};\n\t\t\t\t// \tlodash_each(sorted_values, (sorted_value, i)=> index_by_value[sorted_value] = i);\n\t\t\t\t// \tnormalized_values = lodash_map(values, value=> index_by_value[value]);\n\n\t\t\t\t// } else {\n\t\t\t\tmin = lodash_min(values);\n\t\t\t\tmax = lodash_max(values);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_max\", max)\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypedSopNode} from './_Base';\nimport {AttribClass, AttribClassMenuEntries} from '../../../core/geometry/Constant';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreString} from '../../../core/String';\n\nexport enum AttribPromoteMode {\n\tMIN = 0,\n\tMAX = 1,\n\tFIRST_FOUND = 3,\n}\n// const PROMOTE_MODE:PROMOTE_MODE = {\n// \tMIN: 0,\n// \tMAX: 1,\n// \t// AVERAGE: 2,\n// \tFIRST_FOUND: 3,\n// };\nconst PromoteModeMenuEntries = [\n\t{name: 'min', value: AttribPromoteMode.MIN},\n\t{name: 'max', value: AttribPromoteMode.MAX},\n\t{name: 'first_found', value: AttribPromoteMode.FIRST_FOUND},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribPromoteSopParamsConfig extends NodeParamsConfig {\n\tclass_from = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tclass_to = ParamConfig.INTEGER(AttribClass.OBJECT, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tmode = ParamConfig.INTEGER(AttribPromoteMode.MIN, {\n\t\tmenu: {\n\t\t\tentries: PromoteModeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribPromoteSopParamsConfig();\n\nexport class AttribPromoteSopNode extends TypedSopNode<AttribPromoteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_promote';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('sort-amount-up');\n\t}\n\n\tcreate_params() {}\n\n\tprivate _core_group: CoreGroup | undefined;\n\tprivate _core_object: CoreObject | undefined;\n\tprivate _values_per_attrib_name: Dictionary<number[]> = {};\n\tprivate _filtered_values_per_attrib_name: Dictionary<number | undefined> = {};\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._core_group = input_contents[0];\n\n\t\tthis._values_per_attrib_name = {};\n\t\tthis._filtered_values_per_attrib_name = {};\n\n\t\tfor (let core_object of this._core_group.core_objects()) {\n\t\t\tthis._core_object = core_object;\n\t\t\tthis.find_values();\n\t\t\tthis.filter_values();\n\t\t\tthis.set_values();\n\t\t}\n\n\t\t// switch @_param_class_from\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.VERTEX then this.promote_attribute_from_vertex()\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.OBJECT then this.promote_attribute_from_object()\n\t\tthis.set_core_group(this._core_group);\n\t}\n\n\t// private promote_attribute_from_vertex() {\n\t// \t// switch (this.pv.class_to) {\n\t// \t// \tcase AttribClass.VERTEX:\n\t// \t\t\treturn this.promote_attribute_from_vertex_to_vertex();\n\t// \t\t// case AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_vertex_to_object();\n\t// \t// }\n\t// }\n\n\t// private promote_attribute_from_object() {\n\t// \tswitch (this.pv.class_to) {\n\t// \t\tcase AttribClass.VERTEX:\n\t// \t\t// return this.promote_attribute_from_object_to_vertex();\n\t// \t\tcase AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_object_to_object();\n\t// \t}\n\t// }\n\n\t// private promote_attribute_from_vertex_to_vertex() {\n\t// \tif (this._core_group) {\n\t// \t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t// \t\tconst points = this._core_group.points();\n\t// \t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\tconst values = lodash_map(points, (point) => point.attrib_value(attrib_name));\n\t// \t\t\tconst new_value = (() => {\n\t// \t\t\t\tswitch (this.pv.mode) {\n\t// \t\t\t\t\tcase PromoteMode.MIN:\n\t// \t\t\t\t\t\treturn lodash_min(values);\n\t// \t\t\t\t\tcase PromoteMode.MAX:\n\t// \t\t\t\t\t\treturn lodash_max(values);\n\t// \t\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t// \t\t\t\t\tdefault:\n\t// \t\t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t})();\n\n\t// \t\t\tif (new_value != null) {\n\t// \t\t\t\tlodash_each(points, (point) => point.set_attrib_value(attrib_name, new_value));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate find_values() {\n\t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class_from) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\treturn this.find_values_from_points(attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\treturn this.find_values_from_object(attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_values_from_points(attrib_name: string) {\n\t\tif (this._core_object) {\n\t\t\tconst points = this._core_object.points();\n\t\t\tthis._values_per_attrib_name[attrib_name] = points.map((point) => point.attrib_value(attrib_name));\n\t\t}\n\t}\n\n\tprivate find_values_from_object(attrib_name: string) {\n\t\tthis._values_per_attrib_name[attrib_name] = [];\n\t\tif (this._core_object) {\n\t\t\tthis._values_per_attrib_name[attrib_name].push(this._core_object.attrib_value(attrib_name) as number);\n\t\t}\n\t}\n\n\tprivate filter_values() {\n\t\tconst attrib_names = Object.keys(this._values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst values = this._values_per_attrib_name[attrib_name];\n\t\t\tswitch (this.pv.mode) {\n\t\t\t\tcase AttribPromoteMode.MIN:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_min(values);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribPromoteMode.MAX:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_max(values);\n\t\t\t\t\tbreak;\n\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t\t\t\tcase AttribPromoteMode.FIRST_FOUND:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = values[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values() {\n\t\tconst attrib_names = Object.keys(this._filtered_values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst new_value = this._filtered_values_per_attrib_name[attrib_name];\n\t\t\tif (new_value != null) {\n\t\t\t\tswitch (this.pv.class_to) {\n\t\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\t\tthis.set_values_to_points(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\t\tthis.set_values_to_object(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values_to_points(attrib_name: string, new_value: NumericAttribValue) {\n\t\tif (this._core_group && this._core_object) {\n\t\t\tconst attribute_exists = this._core_group.has_attrib(attrib_name);\n\t\t\tif (!attribute_exists) {\n\t\t\t\tconst param_size = 1; // TODO: allow size with larger params\n\t\t\t\tthis._core_group.add_numeric_vertex_attrib(attrib_name, param_size, new_value);\n\t\t\t}\n\n\t\t\tconst points = this._core_object.points();\n\t\t\tpoints.forEach((point) => point.set_attrib_value(attrib_name, new_value));\n\t\t}\n\t}\n\n\tprivate set_values_to_object(attrib_name: string, new_value: NumericAttribValue) {\n\t\tthis._core_object?.set_attrib_value(attrib_name, new_value);\n\t}\n}\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass AttribRemapSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING();\n\tramp = ParamConfig.RAMP();\n\tchange_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribRemapSopParamsConfig();\n\nexport class AttribRemapSopNode extends TypedSopNode<AttribRemapSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_remap';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._remap_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_remap_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tlet normalized_values: NumericAttribValue[] = new Array(points.length);\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tif (this.pv.only_integer_values) {\n\t\t\t\t\tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t\tconst index_by_value: Dictionary<number> = {};\n\t\t\t\t\tsorted_values.forEach((sorted_value, i) => (index_by_value[sorted_value] = i));\n\t\t\t\t\tnormalized_values = values.map((value) => index_by_value[value]);\n\t\t\t\t} else {\n\t\t\t\t\tmin = lodash_min(values);\n\t\t\t\t\tmax = lodash_max(values);\n\t\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_max\", max)\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {AttribClassMenuEntries, AttribClass} from '../../../core/geometry/Constant';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribRenameSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\told_name = ParamConfig.STRING();\n\tnew_name = ParamConfig.STRING();\n}\nconst ParamsConfig = new AttribRenameSopParamsConfig();\n\nexport class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_rename';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// const group = input_containers[0].group();\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.rename_attrib(this.pv.old_name, this.pv.new_name, this.pv.class);\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreMath} from '../../../core/math/_Module';\nimport {CoreInterpolate} from '../../../core/math/Interpolate';\nimport {CoreOctree} from '../../../core/math/octree/Octree';\nimport {CoreIterator} from '../../../core/Iterator';\n// import lodash_sum from 'lodash/sum';\n\n// enum TransferMethod {\n// \tAUTO = 0,\n// \tARTISTIC = 1,\n// }\n// const TransferMethodMenuEntries = [\n// \t{name: 'auto', value: TransferMethod.AUTO},\n// \t{name: 'artistic', value: TransferMethod.ARTISTIC},\n// ];\n\n// const LATITUDE = 'Latitude'\n// const LONGITUDE = 'Longitude'\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass AttribTransferSopParamsConfig extends NodeParamsConfig {\n\tsrc_group = ParamConfig.STRING();\n\tdest_group = ParamConfig.STRING();\n\tname = ParamConfig.STRING();\n\tmax_samples_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\t// method = ParamConfig.INTEGER(TransferMethod.AUTO, {\n\t// \tmenu: {\n\t// \t\tentries: TransferMethodMenuEntries,\n\t// \t},\n\t// });\n\tdistance_threshold = ParamConfig.FLOAT(1);\n\tblend_width = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new AttribTransferSopParamsConfig();\n\nexport class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_transfer';\n\t}\n\n\t_core_group_dest!: CoreGroup;\n\t_core_group_src!: CoreGroup;\n\n\t// utils\n\t_attrib_names!: string[];\n\t_octree_timestamp: number | undefined;\n\t_prev_param_src_group: string | undefined;\n\t_octree: CoreOctree | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transfer attributes to', 'geometry to transfer attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// this._group_dest = input_containers[0].group();\n\t\t// const container1 = input_containers[1];\n\n\t\tthis._core_group_dest = input_contents[0]; //new CoreGroup(this._group_dest);\n\t\tconst dest_points = this._core_group_dest.points_from_group(this.pv.dest_group);\n\n\t\t// this._group_src = input_containers[1] //container1.group({ clone: false });\n\t\tthis._core_group_src = input_contents[1]; //new CoreGroup(this._group_src);\n\n\t\tthis._attrib_names = this._core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tthis._error_if_attribute_not_found_on_second_input();\n\t\tthis._build_octree_if_required(this._core_group_src);\n\t\tthis._add_attribute_if_required();\n\n\t\tawait this._transfer_attributes(dest_points);\n\t\tthis.set_core_group(this._core_group_dest);\n\t}\n\n\t_error_if_attribute_not_found_on_second_input() {\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tif (!this._core_group_src.has_attrib(attrib_name)) {\n\t\t\t\tthis.states.error.set(`attribute '${attrib_name}' not found on second input`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _build_octree_if_required(core_group: CoreGroup) {\n\t\tconst second_input_changed =\n\t\t\tthis._octree_timestamp == null || this._octree_timestamp !== core_group.timestamp();\n\t\tconst src_group_changed = this._prev_param_src_group !== this.pv.src_group;\n\n\t\tif (src_group_changed || second_input_changed) {\n\t\t\tthis._octree_timestamp = core_group.timestamp();\n\t\t\tthis._prev_param_src_group = this.pv.src_group;\n\n\t\t\tconst points_src = this._core_group_src.points_from_group(this.pv.src_group);\n\n\t\t\tthis._octree = new CoreOctree(this._core_group_src.bounding_box());\n\t\t\tthis._octree.set_points(points_src);\n\t\t}\n\t}\n\n\tprivate _add_attribute_if_required() {\n\t\tthis._attrib_names.forEach((attrib_name) => {\n\t\t\tif (!this._core_group_dest.has_attrib(attrib_name)) {\n\t\t\t\tconst attrib_size = this._core_group_src.attrib_size(attrib_name);\n\t\t\t\tthis._core_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _transfer_attributes(dest_points: CorePoint[]) {\n\t\t// const start_time = performance.now()\n\t\tconst iterator = new CoreIterator();\n\t\tawait iterator.start_with_array(dest_points, this._transfer_attributes_for_point.bind(this));\n\t\t// for(let dest_point of dest_points){\n\n\t\t// \tthis._transfer_attributes_for_point(dest_point)\n\n\t\t// }\n\t}\n\tprivate _transfer_attributes_for_point(dest_point: CorePoint) {\n\t\tconst total_dist = this.pv.distance_threshold + this.pv.blend_width;\n\t\tconst nearest_points: CorePoint[] =\n\t\t\tthis._octree?.find_points(dest_point.position(), total_dist, this.pv.max_samples_count) || [];\n\n\t\t// test[nearest_points.length] = test[nearest_points.length] || 0\n\t\t// test[nearest_points.length] += 1\n\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tthis._interpolate_points(dest_point, nearest_points, attrib_name);\n\t\t}\n\t}\n\n\t// if @_param_draw_connections\n\t// \tlodash_each nearest_points, (nearest_point)=>\n\t// \t\t@_connection_point_pairs.push([ nearest_point.position(), dest_point.position() ])\n\n\t// if @_param_draw_connections\n\t// \tthis._draw_connections()\n\n\tprivate _interpolate_points(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t\tlet new_value: number;\n\t\t// if (this.pv.method == TransferMethod.ARTISTIC) {\n\n\t\tnew_value = CoreInterpolate.perform(\n\t\t\tpoint_dest,\n\t\t\tsrc_points,\n\t\t\tattrib_name,\n\t\t\tthis.pv.distance_threshold,\n\t\t\tthis.pv.blend_width\n\t\t);\n\t\t// } else {\n\t\t// \tnew_value = this._select(point_dest, src_points, attrib_name);\n\t\t// \tconsole.log('B new_value', new_value);\n\t\t// }\n\n\t\tif (new_value != null) {\n\t\t\tpoint_dest.set_attrib_value(attrib_name, new_value);\n\t\t}\n\t}\n\n\t// private _select(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t// \tconst src_values = [];\n\t// \tconst inverse_distances = [];\n\t// \tconst dest_position = point_dest.position();\n\t// \tconst dest_lng_lat = {lng: dest_position.x, lat: dest_position.z};\n\t// \tfor (let src_point of src_points) {\n\t// \t\t// const dist = dest_position.distanceTo(src_point.position()) //* 0.1\n\t// \t\tconst src_position = src_point.position();\n\t// \t\tconst src_lng_lat = {lng: src_position.x, lat: src_position.z};\n\t// \t\tconst dist = CoreMath.geodesic_distance(src_lng_lat, dest_lng_lat);\n\t// \t\tconst dist_squared = dist * dist;\n\t// \t\tconst attrib_value = src_point.attrib_value(attrib_name);\n\n\t// \t\tsrc_values.push(attrib_value / dist_squared);\n\t// \t\tinverse_distances.push(1 / dist_squared);\n\t// \t}\n\n\t// \tconst sum = lodash_sum(src_values) / lodash_sum(inverse_distances);\n\t// \treturn sum;\n\t// }\n\n\t// ROUND(\n\n\t// \tSUM(\n\t// \t\tValue\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\t// \t/\n\t// \tSUM(\n\t// \t\t1\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\n\t// \t,1\n\n\t// )\n\n\t// _draw_connections() {\n\t// \tlet positions = [];\n\t// \tconst indices = [];\n\n\t// \tlodash_each(this._connection_point_pairs, function(current_positions, i) {\n\n\t// \t\tpositions.push(current_positions[0].toArray());\n\t// \t\tpositions.push(current_positions[1].toArray());\n\n\t// \t\tindices.push((2 * i) + 0);\n\t// \t\treturn indices.push((2 * i) + 1);\n\t// \t});\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new THREE.BufferGeometry();\n\t// \tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \treturn this._group_dest.add(object);\n\t// }\n}\n","import lodash_max from 'lodash/max';\n// import lodash_last from 'lodash/last'\nimport lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n// import {_Math} from 'three/src/math/MathU';\n// const THREE = {Math: _Math, Vector2, Vector3}\nimport {CorePoint} from '../geometry/Point';\n\nexport class CoreInterpolate {\n\tstatic perform(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tswitch (points_src.length) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn this._interpolate_with_1_point(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src[0],\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\t// positions_src = lodash_map(points_src, (point) -> point.position())\n\t\t\t\t// values_src = lodash_map(points_src, (point) -> point.attrib_value(attrib_name))\n\t\t\t\t// position_dest = point_dest.position()\n\t\t\t\t//if positions_src.length > 3\n\t\t\t\t//\tpositions_src = positions_src.slice(0,3)\n\t\t\t\t//this._interpolate_with_3_points_max(positions_src, values_src, position_dest, dest_value)\n\t\t\t\treturn this._interpolate_with_multiple_points(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src,\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t}\n\t}\n\n\tstatic _interpolate_with_1_point(\n\t\tpoint_dest: CorePoint,\n\t\tpoint_src: CorePoint,\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tconst position_dest = point_dest.position();\n\t\tconst position_src = point_src.position();\n\t\tconst distance = position_dest.distanceTo(position_src);\n\n\t\tconst value_src = point_src.attrib_value(attrib_name);\n\t\treturn this._weighted_value_from_distance(\n\t\t\tpoint_dest,\n\t\t\tvalue_src,\n\t\t\tattrib_name,\n\t\t\tdistance,\n\t\t\tdistance_threshold,\n\t\t\tblend_with\n\t\t);\n\t}\n\n\tstatic _weight_from_distance(distance: number, distance_threshold: number, blend_with: number) {\n\t\treturn (distance - distance_threshold) / blend_with;\n\t}\n\n\tstatic _weighted_value_from_distance(\n\t\tpoint_dest: CorePoint,\n\t\tvalue_src: number,\n\t\tattrib_name: string,\n\t\tdistance: number,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tif (distance <= distance_threshold) {\n\t\t\treturn value_src;\n\t\t} else {\n\t\t\tconst value_dest = point_dest.attrib_value(attrib_name);\n\t\t\tconst blend = this._weight_from_distance(distance, distance_threshold, blend_with);\n\t\t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// switch (point_dest.attrib_size(attrib_name)) {\n\t\t\t// \tcase 1:\n\t\t\t// \t\t// const value_src_as_number = value_src as number;\n\t\t\t// \t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// \tcase 2:\n\t\t\t// \t\tconst value_src_as_vec2 = value_src as Vector2Like;\n\t\t\t// \t\treturn new Vector2(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec2.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec2.y\n\t\t\t// \t\t);\n\t\t\t// \tcase 3:\n\t\t\t// \t\tconst value_src_as_vec3 = value_src as Vector3Like;\n\t\t\t// \t\treturn new Vector3(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec3.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec3.y,\n\t\t\t// \t\t\tblend * value_dest.z + (1 - blend) * value_src_as_vec3.z\n\t\t\t// \t\t);\n\t\t\t// \tdefault:\n\t\t\t// \t\treturn 0;\n\t\t\t// }\n\t\t}\n\t}\n\n\t// @_interpolate_with_3_points_max: (positions_src, values_src, position_dest, dest_value)->\n\t// \tweights = this.weights( position_dest, positions_src )\n\t// \tinterpolated_value = lodash_sum lodash_map values_src, (src_value, i)=>\n\t// \t\tweights[i] * src_value\n\n\t// \tif dest_value?\n\t// \t\t0.5 * (dest_value + src_value)\n\t// \telse\n\t// \t\tinterpolated_value\n\n\t// weights: http://www.sidefx.com/docs/houdini/nodes/vop/pcfilter.html\n\t// w_i = 1-smooth(0, maxd*1.1, d_i);\n\t// maxd is the farthest point, and w_i is the weight for a given point at distance (d_i). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.\n\tstatic _interpolate_with_multiple_points(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\t// let new_value\n\t\t// const positions_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.position()\n\t\t// )\n\t\t// const values_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.attrib_value(attrib_name)\n\t\t// )\n\t\t// const position_dest = point_dest.position()\n\t\t// const attrib_size = point_dest.attrib_size(attrib_name);\n\n\t\t// const distances = lodash_map(positions_src, (src_position) =>\n\t\t// \tsrc_position.distanceTo(position_dest)\n\t\t// )\n\t\t// distances = distances.sort()\n\t\t// max_dist = lodash_last(distances)\n\t\t// const max_dist = distance_threshold + blend_with\n\n\t\t// const weights = lodash_map(positions_src, (src_position, i) => {\n\t\t// \tconst distance = distances[i]\n\t\t// \t//1 - Math.smootherstep(distance, 0, max_dist*1.1)\n\t\t// \treturn this._weight_from_distance(\n\t\t// \t\tdistance,\n\t\t// \t\tdistance_threshold,\n\t\t// \t\tblend_with\n\t\t// \t)\n\t\t// })\n\n\t\t// const total_weight = lodash_sum(weights)\n\n\t\t// weighted_values = lodash_map values_src, (src_value, i)->\n\t\t// \tswitch attrib_size\n\t\t// \t\twhen 1 then src_value * weights[i]\n\t\t// \t\telse\n\t\t// \t\t\tsrc_value.clone().multiplyScalar(weights[i])\n\t\tconst weighted_values_src = points_src.map((point_src) => {\n\t\t\treturn this._interpolate_with_1_point(point_dest, point_src, attrib_name, distance_threshold, blend_with);\n\t\t});\n\t\treturn lodash_max(weighted_values_src) || 0;\n\n\t\t// // TODO: we could have 2 modes of interpolation?\n\t\t// // return (new_value = (() => {\n\t\t// switch (attrib_size) {\n\t\t// \t// when 1 then lodash_sum(weighted_values_src) / values_src.length # mode 1\n\t\t// \tcase 1:\n\t\t// \t\treturn lodash_max(weighted_values_src); // mode 2\n\t\t// \tdefault:\n\t\t// \t\tthrow 'interpolation with multiple vectors not implemented yet';\n\t\t// \t// var new_vector = weighted_values_src[0].clone();\n\t\t// \t// new_vector.x = lodash_sum(lodash_map(weighted_values, 'x')) / total_weight;\n\t\t// \t// new_vector.y = lodash_sum(lodash_map(weighted_values, 'y')) / total_weight;\n\t\t// \t// if (new_vector.z != null) {\n\t\t// \t// \tnew_vector.z = lodash_sum(lodash_map(weighted_values, 'z')) / total_weight;\n\t\t// \t// }\n\t\t// \t// return new_vector;\n\t\t// }\n\t\t// })())\n\t}\n\n\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-positions\n\tstatic weights(current_position: Vector3, other_positions: Vector3[]) {\n\t\tswitch (other_positions.length) {\n\t\t\tcase 1:\n\t\t\t\treturn 1;\n\t\t\tcase 2:\n\t\t\t\treturn this._weights_from_2(current_position, other_positions);\n\t\t\tdefault:\n\t\t\t\tother_positions = other_positions.slice(0, 3);\n\t\t\t\treturn this._weights_from_3(current_position, other_positions);\n\t\t}\n\t}\n\n\tstatic _weights_from_2(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum(dist_to_positions);\n\n\t\treturn [dist_to_positions[1] / distance_total, dist_to_positions[0] / distance_total];\n\t}\n\n\tstatic _weights_from_3(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_positions[0] * dist_to_positions[1],\n\t\t\tdist_to_positions[0] * dist_to_positions[2],\n\t\t\tdist_to_positions[1] * dist_to_positions[2],\n\t\t]);\n\n\t\treturn [\n\t\t\t(dist_to_positions[1] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[1]) / distance_total,\n\t\t];\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {CorePoint} from '../../geometry/Point';\n// import {CoreMath} from './_Module'\n// import OctreeModule from './Octree/_Module';\nimport {OctreeNode, OctreeNodeTraverseCallback} from './Node';\n\nexport class CoreOctree {\n\tprivate _root: OctreeNode;\n\n\tconstructor(bbox: Box3) {\n\t\tthis._root = new OctreeNode(bbox);\n\t}\n\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._root.set_bounding_box(bbox)\n\t// }\n\n\tset_points(points: CorePoint[]) {\n\t\tthis._root.set_points(points);\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tthis._root.traverse(callback);\n\t}\n\n\t// TODO: I am tempted to stop going through the leaves if\n\t// the ones currently seen already have the required number of points.\n\t// but that probably doesn't work as those points may end up being further\n\t// than the ones from the following leaf\n\tfind_points(position: Vector3, distance: number, max_points_count?: number): CorePoint[] {\n\t\tconst sphere = new Sphere(position, distance);\n\t\tlet found_points: CorePoint[] = [];\n\n\t\tif (this._root.intersects_sphere(sphere)) {\n\t\t\tthis._root.points_in_sphere(sphere, found_points);\n\t\t}\n\n\t\tif (max_points_count == null) {\n\t\t\treturn found_points;\n\t\t} else {\n\t\t\tif (found_points.length > max_points_count) {\n\t\t\t\tfound_points = lodash_sortBy(found_points, (point) => {\n\t\t\t\t\treturn point.position().distanceTo(position);\n\t\t\t\t});\n\t\t\t\t// const lng_lat = {lng: position.x, lat: position.z}\n\t\t\t\t// found_points = lodash_sortBy(found_points, (point)=>{\n\t\t\t\t// \tconst src_position = point.position()\n\t\t\t\t// \tconst src_lng_lat = {lng: src_position.x, lat: src_position.z}\n\t\t\t\t// \treturn CoreMath.geodesic_distance(src_lng_lat, lng_lat)\n\t\t\t\t// });\n\n\t\t\t\tfound_points = found_points.slice(0, max_points_count);\n\t\t\t}\n\n\t\t\treturn found_points;\n\t\t}\n\t}\n}\n\n// Octree.Node = OctreeNode;\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_flatten from 'lodash/flatten';\nimport {CorePoint} from '../../geometry/Point';\n\nexport type OctreeNodeTraverseCallback = (node: OctreeNode) => void;\n\nexport class OctreeNode {\n\t_leaves_by_octant: Dictionary<OctreeNode> = {};\n\t_points_by_octant_id: Dictionary<CorePoint[]> = {};\n\t_leaves: OctreeNode[] = [];\n\t// _bbox: Box3 | undefined;\n\t_center: Vector3;\n\t_bounding_boxes_by_octant: Dictionary<Box3> = {};\n\t_bounding_boxes_by_octant_prepared: boolean = false;\n\n\tconstructor(private _bbox: Box3, private _level: number = 0) {\n\t\tthis._center = this._bbox.max\n\t\t\t.clone()\n\t\t\t.add(this._bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._bbox = bbox;\n\t// }\n\n\tlevel() {\n\t\treturn this._level;\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tcallback(this);\n\t\tconst octants = Object.values(this._leaves_by_octant);\n\t\toctants.forEach((node) => {\n\t\t\tnode.traverse(callback);\n\t\t});\n\t}\n\n\tintersects_sphere(sphere: Sphere): boolean {\n\t\tif (this._bbox) {\n\t\t\treturn this._bbox.intersectsSphere(sphere);\n\t\t}\n\t\treturn false;\n\t}\n\n\t//@PERF = 0\n\tpoints_in_sphere(sphere: Sphere, accumulated_points: CorePoint[]): void {\n\t\tif (this._leaves.length == 0) {\n\t\t\tconst found_points = lodash_flatten(Object.values(this._points_by_octant_id));\n\t\t\tconst selected_points = found_points.filter((point) => sphere.containsPoint(point.position()));\n\t\t\tselected_points.forEach((point) => {\n\t\t\t\taccumulated_points.push(point);\n\t\t\t});\n\t\t} else {\n\t\t\t//start_time = performance.now()\n\t\t\tconst leaves_intersecting_with_sphere = this._leaves.filter((leaf) => leaf.intersects_sphere(sphere));\n\n\t\t\t//console.log(\"level: #{@_level}, found #{leaves_intersecting_with_sphere.length} leaves \")\n\t\t\tleaves_intersecting_with_sphere.forEach((leaf) => leaf.points_in_sphere(sphere, accumulated_points));\n\t\t}\n\t}\n\t//this.constructor.PERF += performance.now()-start_time\n\n\tbounding_box(): Box3 | undefined {\n\t\treturn this._bbox;\n\t}\n\n\t// points_count: ->\n\t// \t@_points_count\n\n\tset_points(points: CorePoint[]) {\n\t\t//@_points_count = points.length\n\n\t\tthis._points_by_octant_id = {};\n\t\tfor (let point of points) {\n\t\t\tthis.add_point(point);\n\t\t}\n\n\t\tconst octant_ids = Object.keys(this._points_by_octant_id);\n\t\tif (octant_ids.length > 1) {\n\t\t\toctant_ids.forEach((octant_id) => {\n\t\t\t\tthis.create_leaf(octant_id);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate_leaf(octant_id: string) {\n\t\tconst box = this._leaf_bbox(octant_id);\n\t\tconst leaf = new OctreeNode(box, this._level + 1);\n\t\tthis._leaves_by_octant[octant_id] = leaf;\n\t\tthis._leaves.push(leaf);\n\t\t//throw \"test #{@_level}\"\n\n\t\tleaf.set_points(this._points_by_octant_id[octant_id]);\n\t}\n\n\tadd_point(point: CorePoint) {\n\t\tconst octant_id = this._octant_id(point.position());\n\t\tif (this._points_by_octant_id[octant_id] == null) {\n\t\t\tthis._points_by_octant_id[octant_id] = [];\n\t\t}\n\t\tthis._points_by_octant_id[octant_id].push(point);\n\t}\n\n\tprivate _octant_id(position: Vector3): string {\n\t\tconst x_pos = position.x > this._center.x ? 1 : 0;\n\t\tconst y_pos = position.y > this._center.y ? 1 : 0;\n\t\tconst z_pos = position.z > this._center.z ? 1 : 0;\n\t\treturn `${x_pos}${y_pos}${z_pos}`;\n\t}\n\n\t_leaf_bbox(octant_id: string): Box3 {\n\t\tif (!this._bounding_boxes_by_octant_prepared) {\n\t\t\tthis._prepare_leaves_bboxes();\n\t\t\tthis._bounding_boxes_by_octant_prepared = true;\n\t\t}\n\t\treturn this._bounding_boxes_by_octant[octant_id];\n\t}\n\n\tprivate _bbox_center(x_pos: number, y_pos: number, z_pos: number) {\n\t\tconst corner = this._bbox.min.clone();\n\t\tif (x_pos) {\n\t\t\tcorner.x = this._bbox.max.x;\n\t\t}\n\t\tif (y_pos) {\n\t\t\tcorner.y = this._bbox.max.y;\n\t\t}\n\t\tif (z_pos) {\n\t\t\tcorner.z = this._bbox.max.z;\n\t\t}\n\n\t\treturn corner\n\t\t\t.clone()\n\t\t\t.add(this._center)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\n\tprivate _prepare_leaves_bboxes() {\n\t\tconst bbox_centers = [];\n\t\tbbox_centers.push(this._bbox_center(0, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 1));\n\n\t\tconst bbox_size_quarter = this._bbox.max\n\t\t\t.clone()\n\t\t\t.sub(this._bbox.min)\n\t\t\t.multiplyScalar(0.25);\n\t\tfor (let bbox_center of bbox_centers) {\n\t\t\tconst octant_id = this._octant_id(bbox_center);\n\t\t\tconst bbox = new Box3(\n\t\t\t\tbbox_center.clone().sub(bbox_size_quarter),\n\t\t\t\tbbox_center.clone().add(bbox_size_quarter)\n\t\t\t);\n\t\t\tthis._bounding_boxes_by_octant[octant_id] = bbox;\n\t\t}\n\t\t// this._bounding_boxes_by_octant;\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport lodash_range from 'lodash/range';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass BboxScatterSopParamsConfig extends NodeParamsConfig {\n\tstep_size = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new BboxScatterSopParamsConfig();\n\nexport class BboxScatterSopNode extends TypedSopNode<BboxScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'bbox_scatter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create points from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst container = input_contents[0];\n\t\t// const group = container.group();\n\n\t\tconst step_size = this.pv.step_size;\n\t\t// jitter = @_param_jitter\n\n\t\tconst bbox = container.bounding_box();\n\n\t\tconst range = {\n\t\t\tx: lodash_range(bbox.min.x, bbox.max.x, step_size),\n\t\t\ty: lodash_range(bbox.min.y, bbox.max.y, step_size),\n\t\t\tz: lodash_range(bbox.min.z, bbox.max.z, step_size),\n\t\t};\n\n\t\t// create buffer geometry\n\t\t// const vertices_count = range.x * range.y * range.z;\n\t\tconst positions: number[] = [];\n\t\trange.x.forEach((x) => {\n\t\t\trange.y.forEach((y) => {\n\t\t\t\trange.z.forEach((z) => {\n\t\t\t\t\tpositions.push(x);\n\t\t\t\t\tpositions.push(y);\n\t\t\t\t\tpositions.push(z);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nclass BlendSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING();\n\tblend = ParamConfig.FLOAT(0.5, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new BlendSopParamsConfig();\n\nexport class BlendSopNode extends TypedSopNode<BlendSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'blend';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to blend from', 'geometry to blend to'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// this.request_input_container 0, (container0)=>\n\t\t// \tif container0? && (group0 = container0.group())?\n\t\t// \t\tthis.request_input_container 1, (container1)=>\n\t\t// \t\t\tif container1? && (group1 = container1.group({clone: false}))?\n\n\t\t//this.eval_all_params =>\n\t\t// const container0 = input_containers[0];\n\t\t// const container1 = input_containers[1];\n\n\t\t// const group0 = container0.group();\n\t\t// const group1 = container1.group();\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\n\t\tconst objects0 = core_group0.objects();\n\t\tconst objects1 = core_group1.objects();\n\n\t\tlet object0, object1;\n\t\tfor (let i = 0; i < objects0.length; i++) {\n\t\t\tobject0 = objects0[i];\n\t\t\tobject1 = objects1[i];\n\t\t\tthis.blend(object0, object1, this.pv.blend);\n\t\t}\n\t\tthis.set_core_group(core_group0);\n\t}\n\n\t// \t\telse\n\t// \t\t\tthis.set_error(\"input 1 required\")\n\n\t// else\n\t// \tthis.set_error(\"input 0 required\")\n\tprivate blend(object0: Object3D, object1: Object3D, blend: number) {\n\t\tconst geometry0 = (object0 as Mesh).geometry as BufferGeometry;\n\t\tconst geometry1 = (object1 as Mesh).geometry as BufferGeometry;\n\t\tif (geometry0 == null || geometry1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0 = geometry0.getAttribute(this.pv.attrib_name);\n\t\tconst attrib1 = geometry1.getAttribute(this.pv.attrib_name);\n\t\tif (attrib0 == null || attrib1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0_array = attrib0.array as number[];\n\t\tconst attrib1_array = attrib1.array as number[];\n\n\t\tlet c0, c1;\n\t\tfor (let i = 0; i < attrib0_array.length; i++) {\n\t\t\tc0 = attrib0_array[i];\n\t\t\tc1 = attrib1_array[i];\n\t\t\tif (c1 != null) {\n\t\t\t\tattrib0_array[i] = (1 - blend) * c0 + blend * c1;\n\t\t\t}\n\t\t}\n\n\t\tgeometry0.computeVertexNormals();\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\nimport {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass BoxSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.FLOAT(1);\n\tdivisions = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new BoxSopParamsConfig();\n\nexport class BoxSopNode extends TypedSopNode<BoxSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'box';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create bounding box from (optional)'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\t// }\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 1);\n\t// \tthis.add_param(ParamType.INTEGER, 'divisions', 1, {\n\t// \t\trange: [1, 10],\n\t// \t\trange_locked: [true, false],\n\t// \t});\n\t// \tthis.add_param(ParamType.VECTOR3, 'center', [0, 0, 0]);\n\t// }\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\n\tprivate _cook_without_input() {\n\t\t//\t\tthis.eval_all_params =>\n\t\tconst divisions = this.pv.divisions;\n\t\tconst size = this.pv.size;\n\t\tconst geometry = new BoxBufferGeometry(size, size, size, divisions, divisions, divisions);\n\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tgeometry.computeVertexNormals();\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst divisions = this.pv.divisions;\n\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max.clone().add(bbox.min).multiplyScalar(0.5);\n\n\t\tconst geometry = new BoxBufferGeometry(size.x, size.y, size.z, divisions, divisions, divisions);\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t// else\n\t// \tthis.set_error(\"first input is invalid\")\n\n\t// _divisions() {\n\t// \treturn Math.max(1, this.pv.divisions);\n\t// }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass CacheSopParamsConfig extends NodeParamsConfig {\n\tcache = ParamConfig.STRING('', {hidden: true});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tCacheSopNode.PARAM_CALLBACK_reset(node as CacheSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new CacheSopParamsConfig();\n\nexport class CacheSopNode extends TypedSopNode<CacheSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cache';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to cache'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst is_cache_empty = this.pv.cache == '' || this.pv.cache == null;\n\t\tconst core_group = input_contents[0];\n\t\tif (is_cache_empty && core_group) {\n\t\t\tconst json = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tjson.push(object.toJSON());\n\t\t\t}\n\t\t\tthis.set_core_group(core_group);\n\t\t\tthis.p.cache.set(JSON.stringify(json));\n\t\t} else {\n\t\t\tif (this.pv.cache) {\n\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\tconst jsons = JSON.parse(this.pv.cache);\n\t\t\t\tconst all_objects = [];\n\t\t\t\tfor (let json of jsons) {\n\t\t\t\t\tconst parent = obj_loader.parse(json);\n\t\t\t\t\t// for(let child of parent.children){\n\t\t\t\t\tall_objects.push(parent);\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tthis.set_objects(all_objects);\n\t\t\t} else {\n\t\t\t\tthis.set_objects([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_reset(node: CacheSopNode, param: BaseParamType) {\n\t\tnode.param_callback_PARAM_CALLBACK_reset();\n\t}\n\tasync param_callback_PARAM_CALLBACK_reset() {\n\t\tthis.p.cache.set('');\n\t\tthis.request_container();\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {CircleBufferGeometry} from 'three/src/geometries/CircleGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass CircleSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\topen = ParamConfig.BOOLEAN(1);\n\tarc_angle = ParamConfig.FLOAT(360, {\n\t\trange: [0, 360],\n\t\trange_locked: [false, false],\n\t\tvisible_if: {open: 1},\n\t});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CircleSopParamsConfig();\n\nexport class CircleSopNode extends TypedSopNode<CircleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'circle';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0);\n\t\t// this.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook() {\n\t\tif (this.pv.open) {\n\t\t\tthis._create_circle();\n\t\t} else {\n\t\t\tthis._create_disk();\n\t\t}\n\t}\n\n\t_create_circle() {\n\t\tconst geometry = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments, this.pv.arc_angle);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry, ObjectType.LINE_SEGMENTS);\n\t}\n\n\t_create_disk() {\n\t\tconst geometry = new CircleBufferGeometry(this.pv.radius, this.pv.segments);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {StringParamLanguage} from '../../params/utils/OptionsController';\nimport {AsyncFunction} from '../../../core/AsyncFunction';\n\nconst DEFAULT_FUNCTION_CODE = `const core_group = core_groups[0];\nconst object = core_group.objects()[0];\nobject.position.y = -1;\nnode.set_core_group(core_groups[0]);\n\n\n`;\n\ntype EvaluatedFunction = (node: CodeSopNode, scene: PolyScene, core_groups: CoreGroup[]) => void;\n\nimport {PolyScene} from '../../scene/PolyScene';\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {TranspiledFilter} from '../utils/code/controllers/TranspiledFilter';\nclass CodeSopParamsConfig extends NodeParamsConfig {\n\tcode_typescript = ParamConfig.STRING(DEFAULT_FUNCTION_CODE, {\n\t\tlabel: false,\n\t\tlanguage: StringParamLanguage.TYPESCRIPT,\n\t});\n\tcode_javascript = ParamConfig.STRING('', {hidden: true});\n}\nconst ParamsConfig = new CodeSopParamsConfig();\nexport class CodeSopNode extends TypedSopNode<CodeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tprivate _last_compiled_code: string | undefined;\n\tprivate _function: EvaluatedFunction | undefined;\n\n\tstatic type() {\n\t\treturn 'code';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.ui_data.set_width(100);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._compile_if_required();\n\n\t\tif (this._function) {\n\t\t\tthis._function(this, this.scene, core_groups);\n\t\t} else {\n\t\t\tthis.set_core_group(core_groups[0]);\n\t\t}\n\t}\n\n\tprivate _compile_if_required() {\n\t\tif (!this._function || this._last_compiled_code != this.pv.code_javascript) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\n\tprivate _compile() {\n\t\ttry {\n\t\t\tthis._function = new AsyncFunction(\n\t\t\t\t'node',\n\t\t\t\t'scene',\n\t\t\t\t'core_groups',\n\t\t\t\t`try {\n\t\t\t\t\t${TranspiledFilter.filter(this.pv.code_javascript)}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tthis.states.error.set(e)\n\t\t\t\t}`\n\t\t\t);\n\t\t\tthis._last_compiled_code = this.pv.code_javascript;\n\t\t} catch (e) {\n\t\t\tconsole.warn(e);\n\t\t\tthis.states.error.set(`cannot generate function (${e})`);\n\t\t\tthis._function = undefined;\n\t\t}\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {CoreColor} from '../../../core/Color';\n// import lodash_times from 'lodash/times'\n// import lodash_each from 'lodash/each'\n// import {CoreGroup} from '../../../core/geometry/Group';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst COLOR_ATTRIB_NAME = 'color';\n\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ColorSopParamsConfig extends NodeParamsConfig {\n\tfrom_attribute = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {from_attribute: 1},\n\t});\n\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\tvisible_if: {from_attribute: 0},\n\t\texpression: {for_entities: true},\n\t});\n\tas_hsv = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {from_attribute: 0},\n\t});\n}\nconst ParamsConfig = new ColorSopParamsConfig();\n\nexport class ColorSopNode extends TypedSopNode<ColorSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'color';\n\t}\n\n\tprivate _r_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _g_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _b_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update color of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tif (this.pv.from_attribute) {\n\t\t\t\tthis._set_from_attribute(core_object);\n\t\t\t} else {\n\t\t\t\tconst has_expression = this.p.color.has_expression();\n\t\t\t\tif (has_expression) {\n\t\t\t\t\tawait this._eval_expressions(core_object);\n\t\t\t\t} else {\n\t\t\t\t\tthis._eval_simple_values(core_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\t(geometry.getAttribute(COLOR_ATTRIB_NAME) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_set_from_attribute(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst points = core_geometry.points();\n\n\t\tconst src_attrib_size = core_geometry.attrib_size(this.pv.attrib_name);\n\t\tconst geometry = core_geometry.geometry();\n\t\tconst src_array = geometry.getAttribute(this.pv.attrib_name).array;\n\t\tconst dest_array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\tswitch (src_attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[i];\n\t\t\t\t\tdest_array[dest_i + 1] = 1 - src_array[i];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 2;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tfor (let i = 0; i < src_array.length; i++) {\n\t\t\t\t\tdest_array[i] = src_array[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 4;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = src_array[src_i + 2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_init_color(core_geometry: CoreGeometry, color: Color) {\n\t\tif (!core_geometry.has_attrib(COLOR_ATTRIB_NAME)) {\n\t\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, DEFAULT_COLOR);\n\t\t}\n\t}\n\n\t_eval_simple_values(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\n\t\tlet new_color: Color;\n\t\tif (this.pv.as_hsv) {\n\t\t\tnew_color = new Color();\n\t\t\tCoreColor.set_hsv(this.pv.color.r, this.pv.color.g, this.pv.color.b, new_color);\n\t\t} else {\n\t\t\tnew_color = this.pv.color; //.clone();\n\t\t}\n\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, new_color);\n\t}\n\n\tasync _eval_expressions(core_object: CoreObject) {\n\t\tconst points = core_object.points();\n\t\tconst object = core_object.object();\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tif (geometry) {\n\t\t\tconst array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\t\tconst tmp_array_r = await this._update_from_param(geometry, array, points, 0);\n\t\t\tconst tmp_array_g = await this._update_from_param(geometry, array, points, 1);\n\t\t\tconst tmp_array_b = await this._update_from_param(geometry, array, points, 2);\n\n\t\t\tif (tmp_array_r) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_r, array, 0);\n\t\t\t}\n\t\t\tif (tmp_array_g) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_g, array, 1);\n\t\t\t}\n\t\t\tif (tmp_array_b) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_b, array, 2);\n\t\t\t}\n\n\t\t\t// to hsv\n\t\t\tif (this.pv.as_hsv) {\n\t\t\t\tlet current = new Color();\n\t\t\t\tlet target = new Color();\n\t\t\t\tlet index;\n\t\t\t\tfor (let point of points) {\n\t\t\t\t\tindex = point.index * 3;\n\t\t\t\t\tcurrent.fromArray(array, index);\n\t\t\t\t\tCoreColor.set_hsv(current.r, current.g, current.b, target);\n\t\t\t\t\ttarget.toArray(array, index);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// const colorr_param = this.param('colorr');\n\t\t// const colorg_param = this.param('colorg');\n\t\t// const colorb_param = this.param('colorb');\n\n\t\t// r\n\t\t// if(colorr_param.has_expression()){\n\t\t// \tawait colorr_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+0] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+0] = this.pv.color.r\n\t\t// \t}\n\t\t// }\n\t\t// g\n\t\t// if(colorg_param.has_expression()){\n\t\t// \tawait colorg_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+1] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+1] = this.pv.color.g\n\t\t// \t}\n\t\t// }\n\t\t// b\n\t\t// if(colorb_param.has_expression()){\n\t\t// \tawait colorb_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+2] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+2] = this.pv.color.b\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\toffset: number\n\t): Promise<number[] | undefined> {\n\t\t// const component_name = ['r', 'g', 'b'][offset];\n\t\tconst param = this.p.color.components[offset];\n\t\tconst param_value = [this.pv.color.r, this.pv.color.g, this.pv.color.b][offset];\n\t\tconst arrays_by_geometry_uuid = [\n\t\t\tthis._r_arrays_by_geometry_uuid,\n\t\t\tthis._g_arrays_by_geometry_uuid,\n\t\t\tthis._b_arrays_by_geometry_uuid,\n\t\t][offset];\n\n\t\tlet tmp_array: number[] | undefined;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\ttmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length);\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t// array[point.index()*3+2] = value\n\t\t\t\t(tmp_array as number[])[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let point of points) {\n\t\t\t\tarray[point.index * 3 + offset] = param_value;\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {MathUtils} from 'three/src/math/MathUtils';\nimport {Color} from 'three/src/math/Color';\n\nexport class CoreColor {\n\t// use color.toStyle() if needed\n\t// static to_css(color: Color): string {\n\t// \tconst color_elements = color.toArray().map((e) => e * 255)\n\t// \treturn `rgb(${color_elements.join(', ')})`\n\t// }\n\n\t// from THREE.js examples ColorConverter.js\n\tstatic set_hsv(h: number, s: number, v: number, target: Color) {\n\t\th = MathUtils.euclideanModulo(h, 1);\n\t\ts = MathUtils.clamp(s, 0, 1);\n\t\tv = MathUtils.clamp(v, 0, 1);\n\n\t\ttarget.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ConeBufferGeometry} from 'three/src/geometries/ConeGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ConeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\ttheta_start = ParamConfig.FLOAT(1, {range: [0, 1]});\n\ttheta_length = ParamConfig.FLOAT('2*$PI', {range: [0, 1]});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new ConeSopParamsConfig();\n\nexport class ConeSopNode extends TypedSopNode<ConeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cone';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new ConeBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap,\n\t\t\tthis.pv.theta_start,\n\t\t\tthis.pv.theta_length\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../core/geometry/Geometry'\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreString} from '../../../core/String';\n// import {NodeSimple} from '../../../Core/Graph/NodeSimple'\nimport {CopyStamp} from './utils/CopyStamp';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {CorePoint} from '../../../core/geometry/Point';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nclass CopySopParamsConfig extends NodeParamsConfig {\n\tcount = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t});\n\ttransform_only = ParamConfig.BOOLEAN(0);\n\tcopy_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_copy = ParamConfig.STRING('', {\n\t\tvisible_if: {copy_attributes: true},\n\t});\n\tuse_copy_expr = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new CopySopParamsConfig();\n\nexport class CopySopNode extends TypedSopNode<CopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'copy';\n\t}\n\n\tprivate _attribute_names_to_copy: string[] = [];\n\t// private _group: Group|undefined;\n\tprivate _objects: Object3D[] = [];\n\tprivate _stamp_node!: CopyStamp;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be copied', 'points to copy to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\t// async evaluate_inputs_and_params() {\n\t// \tawait this.eval_all_params()\n\t// }\n\n\tasync cook() {\n\t\tlet core_group0;\n\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\tif (container0 != null && (core_group0 = container0.core_content()) != null) {\n\t\t\tif (this.io.inputs.has_input(1)) {\n\t\t\t\tlet core_group1;\n\t\t\t\tconst container1 = await this.container_controller.request_input_container(1);\n\t\t\t\tif (container1 != null && (core_group1 = container1.core_content()) != null) {\n\t\t\t\t\tawait this.cook_with_template(core_group0, core_group1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set('second input required');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.cook_without_template(core_group0);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('first input required');\n\t\t}\n\t}\n\n\tprivate async cook_with_template(instance_core_group: CoreGroup, template_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\n\t\tconst template_points = template_core_group.points();\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tlet instance_matrices = instancer.matrices();\n\n\t\tthis._attribute_names_to_copy = CoreString.attrib_names(this.pv.attributes_to_copy).filter((attrib_name) =>\n\t\t\ttemplate_core_group.has_attrib(attrib_name)\n\t\t);\n\t\tawait this._copy_moved_objects_on_template_points(instance_core_group, instance_matrices, template_points);\n\t\tthis.set_objects(this._objects);\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_on_template_points(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[]\n\t) {\n\t\tfor (let point_index = 0; point_index < template_points.length; point_index++) {\n\t\t\tawait this._copy_moved_object_on_template_point(\n\t\t\t\tinstance_core_group,\n\t\t\t\tinstance_matrices,\n\t\t\t\ttemplate_points,\n\t\t\t\tpoint_index\n\t\t\t);\n\t\t}\n\t\t// template_points.forEach((template_point, point_index) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_object_on_template_point(\n\t\t// \t\t\tinstance_core_group,\n\t\t// \t\t\tinstance_matrices,\n\t\t// \t\t\ttemplate_points,\n\t\t// \t\t\tpoint_index\n\t\t// \t\t);\n\t\t// \t});\n\t\t// });\n\t}\n\n\tprivate _copy_moved_object_on_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[],\n\t\tpoint_index: number\n\t) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst matrix = instance_matrices[point_index];\n\t\t\tconst template_point = template_points[point_index];\n\t\t\tthis.stamp_node.set_point(template_point);\n\n\t\t\tconst moved_objects = await this._get_moved_objects_for_template_point(instance_core_group, point_index);\n\n\t\t\tmoved_objects.forEach((moved_object) => {\n\t\t\t\tif (this.pv.copy_attributes) {\n\t\t\t\t\tthis._copy_attributes_from_template(moved_object, template_point);\n\t\t\t\t}\n\n\t\t\t\t// TODO: that node is getting inconsistent...\n\t\t\t\t// should I always only move the object?\n\t\t\t\t// and have a toggle to bake back to the geo?\n\t\t\t\t// or just enfore the use of a merge?\n\t\t\t\tif (this.pv.transform_only) {\n\t\t\t\t\tmoved_object.applyMatrix4(matrix);\n\t\t\t\t} else {\n\t\t\t\t\tmoved_object.geometry.applyMatrix4(matrix);\n\t\t\t\t}\n\n\t\t\t\treturn this._objects.push(moved_object);\n\t\t\t});\n\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tprivate _get_moved_objects_for_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tpoint_index: number\n\t): Promise<Object3DWithGeometry[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\t// duplicate or select from instance children\n\t\t\t\tconst moved_objects = this.pv.transform_only\n\t\t\t\t\t? // TODO: why is doing a transform slower than cloning the input??\n\t\t\t\t\t  lodash_compact([instance_core_group.objects()[point_index]])\n\t\t\t\t\t: instance_core_group.clone().objects();\n\n\t\t\t\tresolve(moved_objects);\n\t\t\t} else {\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _stamp_instance_group_if_required(instance_core_group: CoreGroup): Promise<CoreGroup | undefined> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (this.pv.use_copy_expr) {\n\t\t\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\t\t\tlet core_group0: CoreGroup;\n\t\t\t\tif (container0 && (core_group0 = container0.core_content()) != null) {\n\t\t\t\t\t// this.stamp_node.increment_global_value()\n\t\t\t\t\tresolve(core_group0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`input failed for index ${this.stamp_value()}`);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(instance_core_group);\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_for_each_instance(instance_core_group: CoreGroup) {\n\t\t// let p = Promise.resolve(); // Q() in q\n\n\t\tfor (let i = 0; i < this.pv.count; i++) {\n\t\t\tawait this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t}\n\t\t// lodash_times(this.pv.count, (i) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t// \t});\n\t\t// });\n\n\t\t// return p;\n\t}\n\n\tprivate _copy_moved_objects_for_instance(instance_core_group: CoreGroup, i: number) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.stamp_node.set_global_index(i);\n\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\tstamped_instance_core_group.objects().forEach((object) => {\n\t\t\t\t\t// TODO: I should use the Group wrapper, to ensure that material.linewidth is properly cloned\n\t\t\t\t\tconst new_object = CoreObject.clone(object);\n\t\t\t\t\tthis._objects.push(new_object);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// TODO: what if I combine both @_param_count and stamping?!\n\tprivate cook_without_template(instance_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\t\tthis._copy_moved_objects_for_each_instance(instance_core_group).then(() => {\n\t\t\tthis.set_objects(this._objects);\n\t\t});\n\t}\n\n\tprivate _copy_attributes_from_template(object: Object3D, template_point: CorePoint) {\n\t\tthis._attribute_names_to_copy.forEach((attrib_name, i) => {\n\t\t\tconst attrib_value = template_point.attrib_value(attrib_name);\n\t\t\tconst object_wrapper = new CoreObject(object, i);\n\t\t\tobject_wrapper.add_attribute(attrib_name, attrib_value);\n\t\t});\n\t}\n\n\t//\n\t//\n\t// STAMP\n\t//\n\t//\n\tstamp_value(attrib_name?: string) {\n\t\treturn this.stamp_node.value(attrib_name);\n\t}\n\tget stamp_node() {\n\t\treturn (this._stamp_node = this._stamp_node || this.create_stamp_node());\n\t}\n\tprivate create_stamp_node() {\n\t\tconst stamp_node = new CopyStamp(this.scene);\n\t\tthis.dirty_controller.set_forbidden_trigger_nodes([stamp_node]);\n\t\treturn stamp_node;\n\t}\n\n\t// private set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \treturn original_trigger_graph_node.graph_node_id !== this.stamp_node.graph_node_id;\n\t// }\n}\n","import {CorePoint} from '../../../../core/geometry/Point';\nimport {CoreGraphNode} from '../../../../core/graph/CoreGraphNode';\nimport {PolyScene} from '../../../scene/PolyScene';\n\nexport class CopyStamp extends CoreGraphNode {\n\tprivate _global_index: number = 0;\n\tprivate _point: CorePoint | undefined;\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'CopyStamp');\n\t}\n\n\tset_point(point: CorePoint) {\n\t\tthis._point = point;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\tset_global_index(index: number) {\n\t\tthis._global_index = index;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\n\tvalue(attrib_name?: string) {\n\t\tif (this._point) {\n\t\t\tif (attrib_name) {\n\t\t\t\treturn this._point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn this._point.index;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._global_index;\n\t\t}\n\t}\n}\n","// import {Core} from '../../../Core/_Module';\nimport {TypedSopNode} from './_Base';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nconst DEFAULT_DATA = [\n\t{value: -40},\n\t{value: -30},\n\t{value: -20},\n\t{value: -10},\n\t{value: 0},\n\t{value: 10},\n\t{value: 20},\n\t{value: 30},\n\t{value: 40},\n\t{value: 50},\n\t{value: 60},\n\t{value: 70},\n\t{value: 80},\n];\nconst DEFAULT_DATA_STR = JSON.stringify(DEFAULT_DATA);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DataSopParamsConfig extends NodeParamsConfig {\n\tdata = ParamConfig.STRING(DEFAULT_DATA_STR);\n}\nconst ParamsConfig = new DataSopParamsConfig();\n\nexport class DataSopNode extends TypedSopNode<DataSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data';\n\t}\n\n\tcook() {\n\t\tlet json = null;\n\t\ttry {\n\t\t\tjson = JSON.parse(this.pv.data);\n\t\t} catch (e) {\n\t\t\tthis.states.error.set('could not parse json');\n\t\t}\n\n\t\tif (json) {\n\t\t\tconst loader = new JsonDataLoader();\n\t\t\tloader.set_json(json);\n\t\t\tconst object = loader.create_object();\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray'\nimport lodash_isString from 'lodash/isString'\nimport {CoreConstant} from './Constant'\n\nexport class CoreAttributeData {\n\tconstructor(private _size: number, private _type: number) {}\n\n\tsize() {\n\t\treturn this._size\n\t}\n\ttype() {\n\t\treturn this._type\n\t}\n\n\tstatic from_value(attrib_value: any) {\n\t\tconst type = lodash_isString(attrib_value)\n\t\t\t? CoreConstant.ATTRIB_TYPE.STRING\n\t\t\t: CoreConstant.ATTRIB_TYPE.NUMERIC\n\t\tconst size = lodash_isArray(attrib_value) ? attrib_value.length : 1\n\n\t\treturn new this(size, type)\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n// import lodash_flatten from 'lodash/flatten';\nimport {TypedSopNode} from './_Base';\n\n// import {CoreLoaderGeometry, LoaderType, LOADER_TYPES} from '../../../Core/Loader/Geometry';\nimport {JsonDataLoader} from '../../../core/loader/geometry/JsonData';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass DataUrlSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('/examples/sop/data_url/basic.json');\n\tjson_data_keys_prefix = ParamConfig.STRING('');\n\tskip_entries = ParamConfig.STRING('');\n\tconvert = ParamConfig.BOOLEAN(0);\n\tconvert_to_numeric = ParamConfig.STRING('', {\n\t\tvisible_if: {convert: 1},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tDataUrlSopNode.PARAM_CALLBACK_reload(node as DataUrlSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new DataUrlSopParamsConfig();\n\nexport class DataUrlSopNode extends TypedSopNode<DataUrlSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data_url';\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tasync cook() {\n\t\tconst loader = new JsonDataLoader({\n\t\t\tdata_keys_prefix: this.pv.json_data_keys_prefix,\n\t\t\tskip_entries: this.pv.skip_entries,\n\t\t\tdo_convert: this.pv.convert,\n\t\t\tconvert_to_numeric: this.pv.convert_to_numeric,\n\t\t});\n\t\tloader.load(this.pv.url, this._on_load.bind(this), undefined, this._on_error.bind(this));\n\t}\n\n\t_on_load(objects: Object3D) {\n\t\t// objects = lodash_flatten(objects);\n\t\tthis.set_objects([objects]);\n\t}\n\t_on_error(error: ErrorEvent) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${error})`);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\t// async _on_open_url(){\n\t// \tconst url = await this.param('url').eval_p()\n\t// \tconst a = document.createElement('a')\n\t// \ta.href = url\n\t// \ta.setAttribute('target', '_blank')\n\t// \ta.click()\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: DataUrlSopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tparam_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass DelaySopParamsConfig extends NodeParamsConfig {\n\tduration = ParamConfig.INTEGER(1000);\n}\nconst ParamsConfig = new DelaySopParamsConfig();\n\nexport class DelaySopNode extends TypedSopNode<DelaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delay';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS]);\n\t}\n\n\tcook(inputs_contents: CoreGroup[]) {\n\t\tconst core_group = inputs_contents[0];\n\t\tconst c = () => {\n\t\t\tthis.set_core_group(core_group);\n\t\t};\n\t\tsetTimeout(c, this.pv.duration);\n\t}\n}\n","import {Box3} from 'three/src/math/Box3';\nimport lodash_isString from 'lodash/isString';\nimport lodash_each from 'lodash/each';\nimport {TypedSopNode} from './_Base';\nimport {CoreString} from '../../../core/String';\nimport {\n\tAttribClass,\n\tAttribClassMenuEntries,\n\tObjectType,\n\tObjectTypeMenuEntries,\n\tObjectTypes,\n} from '../../../core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreObject} from '../../../core/geometry/Object';\n\nenum ComparisonOperator {\n\t'==' = 0,\n\t'<' = 1,\n\t'<=' = 2,\n\t'>=' = 3,\n\t'>' = 4,\n\t'!=' = 5,\n}\nconst ComparisonOperatorMenuEntries = [\n\t{name: '==', value: ComparisonOperator['==']},\n\t{name: '<', value: ComparisonOperator['<']},\n\t{name: '<=', value: ComparisonOperator['<=']},\n\t{name: '>=', value: ComparisonOperator['>=']},\n\t{name: '>', value: ComparisonOperator['>']},\n\t{name: '!=', value: ComparisonOperator['!=']},\n];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass DeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n\thide_objects = ParamConfig.BOOLEAN(0);\n\n\t// by_object_type\n\tby_object_type = ParamConfig.BOOLEAN(0);\n\tobject_type = ParamConfig.INTEGER(ObjectTypes.indexOf(ObjectType.MESH), {\n\t\tmenu: {\n\t\t\tentries: ObjectTypeMenuEntries,\n\t\t},\n\t\tvisible_if: {by_object_type: true},\n\t});\n\n\t// by_expression\n\tby_expression = ParamConfig.BOOLEAN(0);\n\texpression = ParamConfig.BOOLEAN('@ptnum==0', {\n\t\tvisible_if: {by_expression: true},\n\t\texpression: {for_entities: true},\n\t});\n\n\t// by_attrib\n\tby_attrib = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_string = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\t// attrib_float = ParamConfig.FLOAT(0, {\n\t// \tvisible_if: {by_attrib: true},\n\t// })\n\tattrib_numeric = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_comparison_operator = ParamConfig.INTEGER(ComparisonOperator['=='], {\n\t\tmenu: {\n\t\t\tentries: ComparisonOperatorMenuEntries,\n\t\t},\n\t\tvisible_if: {by_attrib: true},\n\t});\n\n\t// by_bbox\n\tby_bbox = ParamConfig.BOOLEAN(0);\n\tbbox_size = ParamConfig.VECTOR3([1, 1, 1], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\tbbox_center = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\t//this.add_param( ParamType.STRING, 'index_mode', Core.Geometry.Geometry.INDEX_MODE_FACES )\n\n\t// by_visible\n\tby_visible = ParamConfig.BOOLEAN(0);\n\tkeep_points = ParamConfig.BOOLEAN(1, {\n\t\tvisible_if: {\n\t\t\tclass: AttribClass.OBJECT,\n\t\t},\n\t});\n}\nconst ParamsConfig = new DeleteSopParamsConfig();\n\nexport class DeleteSopNode extends TypedSopNode<DeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delete';\n\t}\n\n\t// _param_attrib_class: number;\n\t// _param_invert: boolean;\n\t// _param_hide_objects: boolean;\n\t// _param_by_object_type: boolean;\n\t// _param_object_type: number;\n\t// _param_by_attrib: boolean;\n\t// _param_attrib_name: string;\n\t// _param_attrib_float: number;\n\t// _param_attrib_string: string;\n\t// _param_attrib_vector: Vector3;\n\t// _param_attrib_ComparisonOperator: number;\n\t// _param_by_expression: boolean;\n\t// _param_expression: string;\n\t// _param_by_bbox: boolean;\n\t// _param_bbox_size: Vector3;\n\t// _param_bbox_center: Vector3;\n\t// _param_by_visible: boolean;\n\n\tprivate _bbox_cache: Box3 | undefined;\n\n\tprivate _marked_for_deletion_per_object_index: Map<number, boolean> = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._bbox_cache = undefined;\n\t\tswitch (this.pv.class) {\n\t\t\tcase AttribClass.VERTEX:\n\t\t\t\tawait this._eval_for_points(core_group);\n\t\t\t\tbreak;\n\t\t\tcase AttribClass.OBJECT:\n\t\t\t\tawait this._eval_for_objects(core_group);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _eval_for_objects(core_group: CoreGroup) {\n\t\t// const objects_to_delete = [];\n\t\tconst objects_to_keep = [];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tthis._marked_for_deletion_per_object_index = new Map();\n\t\tfor (let core_object of core_objects) {\n\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, false);\n\t\t}\n\n\t\tif (this.pv.by_expression) {\n\t\t\tawait this._eval_expressions_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_object_type) {\n\t\t\tthis._eval_type_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\tthis._eval_attrib_for_objects(core_objects);\n\n\t\t\t// \tif !is_deleted && @_param_by_bbox\n\t\t\t// \t\tis_deleted = this._eval_bbox_for_object(object)\n\n\t\t\t// \tif !is_deleted && @_param_by_visible\n\t\t\t// \t\tis_deleted = !object.visible\n\n\t\t\t// \tif @_param_invert\n\t\t\t// \t\tis_deleted = !is_deleted\n\n\t\t\t// \tif @_param_hide_objects\n\t\t\t// \t\tobject.visible = !is_deleted\n\t\t\t// \telse\n\t\t\t// \t\tif is_deleted\n\t\t\t// \t\t\tobjects_to_delete.push(object)\n\n\t\t\t// true; // to ensure the loop isn't breaking, which is what happens when setting the object.visible to false...\n\t\t}\n\n\t\tif (this.pv.invert) {\n\t\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(object_index, !marked_for_deletion);\n\t\t\t});\n\t\t}\n\n\t\tlet core_object, object;\n\t\tconst point_objects_from_deleted_objects: Object3DWithGeometry[] = [];\n\t\t// for (let object_index of Object.keys(this._marked_for_deletion_per_object_index)) {\n\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\tcore_object = core_objects[object_index];\n\t\t\tobject = core_object.object();\n\n\t\t\tif (this.pv.hide_objects) {\n\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tobject.visible = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!marked_for_deletion) {\n\t\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\t}\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tpoint_objects_from_deleted_objects.push(this._point_object(core_object));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if (marked_for_deletion) {\n\t\t\t// \tcmptr += 1;\n\t\t\t// \tif (this.pv.hide_objects) {\n\t\t\t// \t\tobject.visible = true;\n\n\t\t\t// \t} else {\n\t\t\t// \t\t// object.parent.remove(object);\n\t\t\t// \t\t// const c = () =>\n\t\t\t// \t\t// \tobject.traverse(function(object_child) {\n\t\t\t// \t\t// \t\tif (object_child.geometry != null) {\n\t\t\t// \t\t// \t\t\tobject_child.geometry.dispose();\n\t\t\t// \t\t// \t\t}\n\t\t\t// \t\t// \t\t// const material = object_child.material\n\t\t\t// \t\t// \t\t// if(material){ material.dispose() }\n\t\t\t// \t\t// \t})\n\t\t\t// \t\t// ;\n\t\t\t// \t\t// setTimeout(c, 25);\n\t\t\t// \t}\n\t\t\t// }\n\t\t});\n\n\t\tfor (let object of point_objects_from_deleted_objects) {\n\t\t\tobjects_to_keep.push(object);\n\t\t}\n\n\t\tthis.set_objects(objects_to_keep);\n\t}\n\n\t//console.log(\"#{cmptr} marked for deletion\")\n\n\t// TODO: ensure that geometries with no remaining points are removed from the group\n\tprivate async _eval_for_points(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tlet core_object;\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tcore_object = core_objects[i];\n\t\t\tlet core_geometry = core_object.core_geometry();\n\t\t\tif (core_geometry) {\n\t\t\t\tlet points = core_geometry.points_from_geometry();\n\t\t\t\tconst init_points_count = points.length;\n\t\t\t\tif (this.pv.by_expression) {\n\t\t\t\t\tpoints = await this._eval_expressions_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\t\t\tpoints = this._eval_attrib_for_points(points);\n\t\t\t\t}\n\t\t\t\tif (this.pv.by_bbox) {\n\t\t\t\t\tpoints = this._eval_bbox_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (points.length != init_points_count) {\n\t\t\t\t\tconst object = core_object.object() as Object3DWithGeometry;\n\t\t\t\t\tcore_geometry.geometry().dispose();\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\t// TODO: if the new geo only has unconnected points, how do I know it and how do I change the material if it was previously a mesh?\n\t\t\t\t\t\tobject.geometry = CoreGeometry.geometry_from_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: do not dispose material if not cloned\n\t\t\t\t\t\t// if (object.material != null) {\n\t\t\t\t\t\t// \tobject.material.dispose();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tobject.parent != null ? object.parent.remove(object) : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_points(points: CorePoint[]) {\n\t\tconst kept_points = [];\n\n\t\t// const promises = points.map((point, i)=> {\n\t\t// \treturn new Promise( async (resolve, reject)=> {\n\t\t// \t\tthis.context().set_entity(point);\n\t\t// \t\tconst val = await(this.param('expression').eval_p());\n\t\t// \t\tconst keep_point = this.pv.invert ?\n\t\t// \t\t\tval === true\n\t\t// \t\t:\n\t\t// \t\t\tval === false;\n\n\t\t// \t\tif (keep_point) {\n\t\t// \t\t\tkept_points.push(point);\n\t\t// \t\t}\n\t\t// \t\tresolve();\n\t\t// \t});\n\t\t// });\n\n\t\t// await(Promise.all(promises));\n\t\tconst param = this.p.expression;\n\t\tif (this.p.expression.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tlet keep_point = !value;\n\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t}\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(point);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst value = this.pv.expression;\n\t\t\tlet keep_point = !value;\n\t\t\tif (this.pv.invert) {\n\t\t\t\tkeep_point = !keep_point;\n\t\t\t}\n\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(kept_points);\n\t\treturn kept_points;\n\t}\n\n\tprivate async _eval_expressions_for_objects(core_objects: CoreObject[]) {\n\t\tconst param = this.p.expression;\n\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\t\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t\t}\n\t\t}\n\n\t\t// for (let core_object of core_objects) {\n\t\t// \tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t// \tif (!is_marked_for_deletion) {\n\t\t// \t\tthis.processing_context.set_entity(core_object);\n\t\t// \t\t// param.set_dirty();\n\t\t// \t\tawait param.compute();\n\t\t// \t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _eval_attrib_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tif (points.length > 0) {\n\t\t\tconst first_attrib_value = points[0].attrib_value(this.pv.attrib_name);\n\t\t\t// TODO: should I just have @_param_attrib_string?\n\t\t\t// although I may need a vector one... maybe a multiple string?\n\t\t\tconst comparison_attrib_values = lodash_isString(first_attrib_value)\n\t\t\t\t? //@_param_attrib_string\n\t\t\t\t  CoreString.attrib_names(this.pv.attrib_string)\n\t\t\t\t: [this.pv.attrib_numeric.x];\n\n\t\t\tcomparison_attrib_values.forEach((comparison_attrib_value: string | number) => {\n\t\t\t\treturn points.forEach((point) => {\n\t\t\t\t\tconst attrib_value = point.attrib_value(this.pv.attrib_name);\n\n\t\t\t\t\t// TODO: and for vectors? should I have a point.attrib(name).is_equal(value)\n\t\t\t\t\t// or point.is_attrib_equal(name, value) ?\n\t\t\t\t\t//keep_point = (attrib_value != comparison_attrib_value)\n\t\t\t\t\tlet keep_point = !this._comparison(attrib_value, comparison_attrib_value);\n\n\t\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keep_point) {\n\t\t\t\t\t\treturn kept_points.push(point);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn kept_points;\n\t}\n\n\tprivate _comparison(attrib_value: number | string, comparison_attrib_value: number | string) {\n\t\tswitch (this.pv.attrib_ComparisonOperator) {\n\t\t\tcase ComparisonOperator['==']:\n\t\t\t\treturn attrib_value === comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<=']:\n\t\t\t\treturn attrib_value <= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<']:\n\t\t\t\treturn attrib_value < comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>']:\n\t\t\t\treturn attrib_value > comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>=']:\n\t\t\t\treturn attrib_value >= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['!=']:\n\t\t\t\treturn attrib_value !== comparison_attrib_value;\n\t\t}\n\t}\n\n\tprivate _eval_type_for_objects(core_objects: CoreObject[]) {\n\t\tconst object_type_name = ObjectTypes[this.pv.object_type];\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\tconst object = core_object.object();\n\n\t\t\t\tif (object.constructor.name === object_type_name) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_attrib_for_objects(core_objects: CoreObject[]) {\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t// const object = core_object.object();\n\t\t\t\tconst attrib_value = core_object.attrib_value(this.pv.attrib_name);\n\n\t\t\t\tconst comparison_attrib_value = lodash_isString(attrib_value)\n\t\t\t\t\t? this.pv.attrib_string\n\t\t\t\t\t: this.pv.attrib_float;\n\n\t\t\t\tif (attrib_value === comparison_attrib_value) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_bbox_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tlodash_each(points, (point, i) => {\n\t\t\tconst in_bbox = this._bbox.containsPoint(point.position());\n\n\t\t\tconst keep_point = this.pv.invert ? in_bbox : !in_bbox;\n\n\t\t\tif (keep_point) {\n\t\t\t\treturn kept_points.push(point);\n\t\t\t}\n\t\t});\n\n\t\treturn kept_points;\n\t}\n\n\t// private _eval_bbox_for_object(object: Object3D): boolean {\n\t// \tconst object_bbox = new Box3().setFromObject(object);\n\t// \tconst center = new Vector3();\n\t// \tobject_bbox.getCenter(center);\n\n\t// \treturn this.pv.bbox().containsPoint(center);\n\t// }\n\n\tprivate get _bbox() {\n\t\treturn this._bbox_cache != null\n\t\t\t? this._bbox_cache\n\t\t\t: (this._bbox_cache = new Box3(\n\t\t\t\t\tthis.pv.bbox_center.clone().sub(this.pv.bbox_size.clone().multiplyScalar(0.5)),\n\t\t\t\t\tthis.pv.bbox_center.clone().add(this.pv.bbox_size.clone().multiplyScalar(0.5))\n\t\t\t  ));\n\t}\n\n\tprivate _point_object(core_object: CoreObject) {\n\t\tconst core_points = core_object.points();\n\t\tconst geometry = CoreGeometry.geometry_from_points(\n\t\t\tcore_points,\n\t\t\t(<unknown>core_object.object().constructor) as ObjectType\n\t\t);\n\t\treturn this.create_object(geometry, ObjectType.POINTS);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport lodash_chunk from 'lodash/chunk';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreFace} from '../../../core/geometry/Face';\nclass FaceSopParamsConfig extends NodeParamsConfig {\n\tmake_faces_unique = ParamConfig.BOOLEAN(0);\n\tadd_face_center_attribute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tadd_face_id = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\ttransform = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tscale = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {make_faces_unique: 1, transform: 1},\n\t});\n}\nconst ParamsConfig = new FaceSopParamsConfig();\n\nexport class FaceSopNode extends TypedSopNode<FaceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'face';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.make_faces_unique) {\n\t\t\tthis._make_faces_unique(core_group);\n\n\t\t\t// we can only add face_center attrib\n\t\t\t// if the faces have been split\n\t\t\t// otherwise a point may belong to multiple faces\n\t\t\tif (this.pv.add_face_center_attribute) {\n\t\t\t\tthis._add_face_center_attribute(core_group);\n\t\t\t}\n\t\t\tif (this.pv.add_face_id) {\n\t\t\t\tthis._add_face_id(core_group);\n\t\t\t}\n\t\t\tif (this.pv.transform) {\n\t\t\t\tthis._transform_faces(core_group);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _make_faces_unique(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst faces = lodash_chunk(geometry.index?.array || [], 3);\n\t\t\t\tconst points_count = faces.length * 3;\n\t\t\t\tfor (let attrib_name of Object.keys(geometry.attributes)) {\n\t\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\t\tconst attrib_size = attrib.itemSize;\n\t\t\t\t\tconst new_values = new Float32Array(points_count * attrib_size);\n\t\t\t\t\tlet new_value_index = 0;\n\t\t\t\t\tfaces.forEach((face) => {\n\t\t\t\t\t\tface.forEach((index) => {\n\t\t\t\t\t\t\tlodash_times(attrib_size, (i) => {\n\t\t\t\t\t\t\t\tconst current_value = attrib.array[index * attrib_size + i];\n\t\t\t\t\t\t\t\tnew_values[new_value_index] = current_value;\n\t\t\t\t\t\t\t\tnew_value_index += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new BufferAttribute(new_values, attrib_size));\n\t\t\t\t}\n\t\t\t\tconst new_indices = lodash_range(points_count);\n\t\t\t\tgeometry.setIndex(new_indices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_face_center_attribute(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_center';\n\t\tconst face_center = new Vector3();\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, face_center);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _add_face_id(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_id';\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst faces = core_geometry.faces();\n\t\t\t\t// const points_count = core_geometry.points_count();\n\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 1, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < faces.length; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst points = face.points;\n\t\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\t\tconst point = points[j];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _transform_faces(core_group: CoreGroup) {\n\t\tconst attrib_name = 'position';\n\t\tconst face_center = new Vector3();\n\t\tconst new_position = new Vector3();\n\t\tconst scale = this.pv.scale;\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tnew_position.x = position.x * scale + face_center.x * (1 - scale);\n\t\t\t\t\t\tnew_position.y = position.y * scale + face_center.y * (1 - scale);\n\t\t\t\t\t\tnew_position.z = position.z * scale + face_center.z * (1 - scale);\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, new_position);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import lodash_flatten from 'lodash/flatten';\n// import lodash_clone from 'lodash/clone';\n// import lodash_merge from 'lodash/merge';\nimport {TypedSopNode} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {CoreLoaderGeometry} from '../../../core/loader/Geometry';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from '../../params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass FileSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('', {\n\t\tdesktop_browse: {file_type: 'geometry'},\n\t\talways_reference_asset: true,\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileSopNode.PARAM_CALLBACK_reload(node as FileSopNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new FileSopParamsConfig();\n\nexport class FileSopNode extends TypedSopNode<FileSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count_to_zero();\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tcook() {\n\t\tconst loader = new CoreLoaderGeometry(this.pv.url);\n\t\tloader.load(this._on_load.bind(this), this._on_error.bind(this));\n\t}\n\n\tprivate _on_load(objects: Object3D[]) {\n\t\tconsole.log('objects', objects);\n\t\tobjects = lodash_flatten(objects);\n\t\tthis.set_objects(objects);\n\t}\n\tprivate _on_error(message: string) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${message})`);\n\t}\n\n\t// if I add this again, check if it can also work for desktop\n\t// async _on_open_url() {\n\t// \tconst url = this.pv.url\n\t// \tconst a = document.createElement('a');\n\t// \ta.href = url;\n\t// \ta.setAttribute('target', '_blank');\n\t// \ta.click();\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: FileSopNode) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n\t// json_data_keys_prefix(){ return this.pv.json_data_keys_prefix }\n\t// json_skip_entries(){ return this.pv.skip_entries }\n\t// json_convert(){ return this.pv.convert }\n\t// json_convert_to_numeric(){ return this.pv.convert_to_numeric }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {Object3D} from 'three/src/core/Object3D';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreString} from '../String';\n\n// import {GeometryLoaderModule} from './Geometry/_Module';\n// import {DRACOLoader} from './Geometry/DRACOLoader';\n// import {JsonData} from './Geometry/JsonData'\n// import {CoreScriptLoader} from './Script';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\n\n// import {DDSLoader} from '../../../modules/three/examples/jsm/loaders/DDSLoader';\n// import {DRACOLoader} from '../../../modules/three/examples/jsm/loaders/DRACOLoader';\n// import {GLTFLoader} from '../../../modules/three/examples/jsm/loaders/GLTFLoader';\n// import {OBJLoader} from '../../../modules/three/examples/jsm/loaders/OBJLoader';\n\n// const GLTFLoaders = ['DDSLoader', 'DRACOLoader', 'GLTFLoader'];\n// const SCRIPT_URLS_BY_EXT = {\n// \tgltf: GLTFLoaders,\n// \tglb: GLTFLoaders,\n// \tobj: 'OBJLoader',\n// };\n// const THREE_LOADER_BY_EXT = {\n// \tgltf: 'GLTFLoader',\n// \tglb: 'GLTFLoader',\n// \tobj: 'OBJLoader',\n// };\n// const DRACO_EXTENSIONS = ['gltf', 'glb']\n// const DRACO_EXTENSIONS = ['drc'];\n\n// export enum LoaderType {\n// \tAUTO = 'auto',\n// \tJSON_DATA = 'json_data',\n// \t// THREEJS_JSON = 'threejs_json',\n// }\n// export const LOADER_TYPES = [\n// \tLoaderType.AUTO,\n// \tLoaderType.JSON_DATA,\n// \t// LoaderType.THREEJS_JSON,\n// ];\n\nexport class CoreLoaderGeometry {\n\tprivate ext: string;\n\n\tconstructor(\n\t\tprivate url: string // private type: LoaderType, // private requester: any\n\t) {\n\t\tconst elements = this.url.split('.');\n\t\tthis.ext = elements[elements.length - 1].toLowerCase();\n\t\tif (this.ext === 'zip') {\n\t\t\tthis.ext = elements[elements.length - 2];\n\t\t}\n\t\t// if(!this.type){\n\t\t// \tconsole.error(\"CoreLoaderGeometry type is not valid\", this.type)\n\t\t// }\n\t}\n\n\tload(on_success: (objects: Object3D[]) => void, on_error: (error: string) => void) {\n\t\tthis.load_auto()\n\t\t\t.then((object) => {\n\t\t\t\ton_success(object);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ton_error(error);\n\t\t\t});\n\t}\n\n\tprivate load_auto(): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = this.url; //.includes('?') ? this.url : `${this.url}?${Date.now()}`;\n\n\t\t\tif (this.ext == 'json') {\n\t\t\t\tfetch(url)\n\t\t\t\t\t.then(async (response) => {\n\t\t\t\t\t\tconst data = await response.json();\n\t\t\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\t\t\tobj_loader.parse(data, (obj) => {\n\t\t\t\t\t\t\tresolve(this.on_load_success(obj.children[0]));\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst loader = await this.loader_for_ext();\n\t\t\t\tif (loader) {\n\t\t\t\t\tloader.load(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\t(object: any) => {\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t\t\t\t\tresolve(object2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(error_message: ErrorEvent) => {\n\t\t\t\t\t\t\treject(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t\treject(error_message);\n\t\t\t\t}\n\t\t\t\t// CoreLoaderGeometry.loader_for_ext().then((loader) => {\n\t\t\t\t// \tif (loader) {\n\t\t\t\t// \t\tloader.load(\n\t\t\t\t// \t\t\turl,\n\t\t\t\t// \t\t\t(object: Object3D) => {\n\t\t\t\t// \t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t// \t\t\t\t\tresolve(object2);\n\t\t\t\t// \t\t\t\t});\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tnull,\n\t\t\t\t// \t\t\t(error_message: string) => {\n\t\t\t\t// \t\t\t\treject(error_message);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t);\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t// \t\tconsole.warn(error_message);\n\t\t\t\t// \t\treject(error_message);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async on_load_success(object: Object3D | BufferGeometry | object): Promise<Object3D[]> {\n\t\t// console.log(\"animation?\", object.animations)\n\t\t// if(object.animations){\n\t\t// \tawait CoreScriptLoader.load('/three/js/utils/SkeletonUtils')\n\t\t// }\n\t\tif (object instanceof Object3D) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'gltf':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\tcase 'glb':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\t// case 'drc':\n\t\t\t\t// \treturn this.on_load_succes_drc(object);\n\t\t\t\tcase 'obj':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tcase 'json':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tdefault:\n\t\t\t\t\treturn [object];\n\t\t\t}\n\t\t}\n\t\tif (object instanceof BufferGeometry) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'drc':\n\t\t\t\t\treturn this.on_load_succes_drc(object);\n\t\t\t\tdefault:\n\t\t\t\t\treturn [new Mesh(object)];\n\t\t\t}\n\t\t}\n\n\t\t// if it's an object, such as returned by glb\n\t\tswitch (this.ext) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tcase 'glb':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate on_load_succes_gltf(gltf: any): Object3D[] {\n\t\tconst scene = gltf['scene'];\n\t\tscene.animations = gltf.animations;\n\n\t\tconsole.log('[scene]', [scene]);\n\t\treturn [scene]; //.children\n\t}\n\tprivate on_load_succes_drc(geometry: BufferGeometry): Object3D[] {\n\t\tconst mat = new MeshLambertMaterial();\n\t\tconst mesh = new Mesh(geometry, mat);\n\n\t\treturn [mesh]; //.children\n\t}\n\n\tasync loader_for_ext() {\n\t\tswitch (this.ext.toLowerCase()) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.loader_for_gltf();\n\t\t\tcase 'glb':\n\t\t\t\treturn this.loader_for_glb();\n\t\t\tcase 'drc':\n\t\t\t\treturn this.loader_for_drc();\n\t\t\tcase 'obj':\n\t\t\t\treturn this.loader_for_obj();\n\t\t}\n\t}\n\n\tasync loader_for_gltf() {\n\t\t// 'DDSLoader', 'DRACOLoader', 'GLTFLoader'\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\t// const {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\treturn new GLTFLoader();\n\t}\n\tasync loader_for_glb() {\n\t\tconst {GLTFLoader} = await import(`../../../modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\n\t\tconst loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/gltf/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\tloader.setDRACOLoader(draco_loader);\n\n\t\treturn loader;\n\t}\n\tasync loader_for_drc() {\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\tconst {DRACOLoader} = await import(`../../../modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\t// const {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\n\t\t// const loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\t// loader.setDRACOLoader(draco_loader);\n\t\t// console.log('loader', loader);\n\t\treturn draco_loader;\n\t}\n\tasync loader_for_obj() {\n\t\tconst {OBJLoader} = await import(`../../../modules/three/examples/jsm/loaders/OBJLoader`);\n\t\treturn new OBJLoader();\n\t}\n\n\t// \tconst ext_lowercase = this.ext.toLowerCase();\n\t// \tlet script_names = SCRIPT_URLS_BY_EXT[ext_lowercase];\n\t// \tif (script_names) {\n\t// \t\tif (!lodash_isArray(script_names)) {\n\t// \t\t\tscript_names = [script_names];\n\t// \t\t}\n\t// \t\tlet imported_modules = {};\n\t// \t\tlet imported_module;\n\t// \t\tfor (let script_name of script_names) {\n\t// \t\t\timported_module = await CoreScriptLoader.load_module_three_loader(script_name);\n\t// \t\t\timported_modules[script_name] = imported_module;\n\t// \t\t}\n\n\t// \t\tconst loader_class_name = THREE_LOADER_BY_EXT[ext_lowercase];\n\t// \t\tconst loader_class = imported_module[loader_class_name];\n\t// \t\tif (loader_class) {\n\t// \t\t\tconst loader = new loader_class();\n\n\t// \t\t\tif (DRACO_EXTENSIONS.includes(ext_lowercase)) {\n\t// \t\t\t\tconst DRACOLoader = imported_modules.DRACOLoader.DRACOLoader;\n\t// \t\t\t\tconst draco_loader = new DRACOLoader();\n\t// \t\t\t\t// const decoder_path = '/three/js/libs/draco/gltf/'\n\t// \t\t\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t// \t\t\t\t// draco_loader.setDecoderPath( decoder_path );\n\t// \t\t\t\tloader.setDRACOLoader(draco_loader);\n\t// \t\t\t}\n\n\t// \t\t\treturn loader;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Group} from 'three/src/objects/Group';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshPhongMaterial} from 'three/src/materials/MeshPhongMaterial';\nimport {Points} from 'three/src/objects/Points';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterials: {},\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar materialHash = sourceMaterial.name + '_' + sourceMaterial.smooth + '_' + hasVertexColors;\n\t\t\t\t\tvar material = state.materials[ materialHash ];\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( material === undefined ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\t\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\t\tmaterial.vertexColors = hasVertexColors;\n\n\t\t\t\t\t\tstate.materials[ materialHash ] = material;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n\nexport { OBJLoader };\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {ObjectType} from '../../../core/geometry/Constant';\nclass FuseSopParamsConfig extends NodeParamsConfig {\n\tdist = ParamConfig.FLOAT(0.1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new FuseSopParamsConfig();\n\nexport class FuseSopNode extends TypedSopNode<FuseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'fuse';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to fuse together'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tconst new_objects = [];\n\t\tlet new_object;\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tnew_object = this._fuse_core_object(core_object);\n\t\t\tif (new_object) {\n\t\t\t\tnew_objects.push(new_object);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(new_objects);\n\t}\n\n\tprivate _fuse_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tif (!object) {\n\t\t\treturn;\n\t\t}\n\t\tconst points = core_object.points();\n\n\t\tconst precision = this.pv.dist;\n\t\tconst points_by_position: Dictionary<CorePoint[]> = {};\n\t\tfor (let point of points) {\n\t\t\tconst position = point.position();\n\t\t\tconst rounded_position = new Vector3(\n\t\t\t\tMath.round(position.x / precision),\n\t\t\t\tMath.round(position.y / precision),\n\t\t\t\tMath.round(position.z / precision)\n\t\t\t);\n\t\t\tconst key = rounded_position.toArray().join('-');\n\t\t\tpoints_by_position[key] = points_by_position[key] || [];\n\t\t\tpoints_by_position[key].push(point);\n\t\t}\n\n\t\tconst kept_points: CorePoint[] = [];\n\t\tObject.keys(points_by_position).forEach((key) => {\n\t\t\tkept_points.push(points_by_position[key][0]);\n\t\t});\n\n\t\t(object as Mesh).geometry.dispose();\n\t\tif (kept_points.length > 0) {\n\t\t\t(object as Mesh).geometry = CoreGeometry.geometry_from_points(\n\t\t\t\tkept_points,\n\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t);\n\t\t\treturn object;\n\t\t} else {\n\t\t\t// if(object.material){ object.material.dispose() }\n\t\t\t// if(object.parent){ object.parent.remove(object) }\n\t\t}\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {CoreGeometryOperationHexagon} from '../../../core/geometry/operation/Hexagon';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HexagonsSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\thexagon_radius = ParamConfig.FLOAT(0.1);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tpoints_only = ParamConfig.BOOLEAN(0);\n\t// no need to have centers, as all points are centers anyway\n\t//this.add_param( ParamType.TOGGLE, 'centers_only', 0, {visible_if: {points_only: 1}})\n}\nconst ParamsConfig = new HexagonsSopParamsConfig();\n\nexport class HexagonsSopNode extends TypedSopNode<HexagonsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hexagons';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst operation = new CoreGeometryOperationHexagon(this.pv.size, this.pv.hexagon_radius, this.pv.points_only);\n\t\tconst geometry = operation.process();\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tif (this.pv.points_only) {\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t\t} else {\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {BufferAttribute} from 'three/src/core/BufferAttribute'\nconst THREE = {BufferAttribute, BufferGeometry, Vector2}\nimport lodash_flatten from 'lodash/flatten'\n// import {CoreGeometry} from '../Geometry';\n\nexport class CoreGeometryOperationHexagon {\n\tconstructor(\n\t\tprivate _param_size: THREE.Vector2,\n\t\tprivate _param_hexagon_radius: number,\n\t\tprivate _param_points_only: boolean\n\t) {}\n\n\tprocess(): THREE.BufferGeometry {\n\t\tconst side_length = this._param_hexagon_radius\n\t\tconst half_side_length = side_length * 0.5\n\t\tconst step_size = {\n\t\t\tx: side_length,\n\t\t\ty: Math.cos(Math.PI / 6) * this._param_hexagon_radius,\n\t\t}\n\t\tconst steps_count = {\n\t\t\tx: Math.floor(this._param_size.x / step_size.x),\n\t\t\ty: Math.floor(this._param_size.y / step_size.y),\n\t\t}\n\t\tlet positions = []\n\t\tlet indices = []\n\t\tfor (let y = 0; y < steps_count.y; y++) {\n\t\t\tfor (let x = 0; x < steps_count.x; x++) {\n\t\t\t\tpositions.push([\n\t\t\t\t\t-(this._param_size.x * 0.5) +\n\t\t\t\t\t\tx * step_size.x +\n\t\t\t\t\t\t(y % 2 == 0 ? half_side_length : 0),\n\t\t\t\t\t0,\n\t\t\t\t\t-(this._param_size.y * 0.5) + y * step_size.y,\n\t\t\t\t])\n\n\t\t\t\tif (!this._param_points_only) {\n\t\t\t\t\tif (y >= 1) {\n\t\t\t\t\t\tif (x == 0 || x == steps_count.x - 1) {\n\t\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpositions = lodash_flatten(positions)\n\n\t\tconst geometry = new THREE.BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(new Float32Array(positions), 3)\n\t\t)\n\n\t\tif (!this._param_points_only) {\n\t\t\tindices = lodash_flatten(indices)\n\t\t\tgeometry.setIndex(indices)\n\t\t\tgeometry.computeVertexNormals()\n\t\t}\n\n\t\treturn geometry\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Group} from 'three/src/objects/Group';\nconst THREE = {Group, Object3D};\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGroup} from '../../../Core/Geometry/Group';\n// import {CoreConstant} from '../../../Core/Geometry/Constant'\n\nexport enum HierarchyMode {\n\tADD_PARENT = 'add_parent',\n\tREMOVE_PARENT = 'remove_parent',\n}\nexport const HIERARCHY_MODES: Array<HierarchyMode> = [HierarchyMode.ADD_PARENT, HierarchyMode.REMOVE_PARENT];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass HierarchySopParamsConfig extends NodeParamsConfig {\n\tmode = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: HIERARCHY_MODES.map((m, i) => {\n\t\t\t\treturn {name: m, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tlevels = ParamConfig.INTEGER(1, {range: [0, 5]});\n}\nconst ParamsConfig = new HierarchySopParamsConfig();\n\nexport class HierarchySopNode extends TypedSopNode<HierarchySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hierarchy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add or remove parents to/from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\t// const group_wrapper = new CoreGroup(group);\n\n\t\tif (HIERARCHY_MODES[this.pv.mode] == HierarchyMode.ADD_PARENT) {\n\t\t\tconst objects = this._add_parent_to_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t} else {\n\t\t\tconst objects = this._remove_parent_from_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t}\n\t}\n\n\tprivate _add_parent_to_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tlet new_object;\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tnew_object = this._add_parent_to_object(object);\n\t\t\t\tif (new_object) {\n\t\t\t\t\tnew_objects.push(new_object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\tprivate _add_parent_to_object(object: THREE.Object3D): THREE.Object3D {\n\t\tlet new_parent = new THREE.Group();\n\n\t\t// while(child = object.children[0]){\n\t\tnew_parent.add(object);\n\t\t// }\n\n\t\tif (this.pv.levels > 0) {\n\t\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\t\t// for (let i of lodash_range(this.pv.levels - 1)) {\n\t\t\t\tnew_parent = this._add_new_parent(new_parent);\n\t\t\t}\n\t\t}\n\n\t\treturn new_parent;\n\t}\n\n\tprivate _add_new_parent(object: THREE.Object3D): THREE.Group {\n\t\tconst new_parent2 = new THREE.Group();\n\t\tnew_parent2.add(object);\n\t\treturn new_parent2;\n\t}\n\n\tprivate _remove_parent_from_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tconst new_children = this._remove_parent_from_object(object);\n\t\t\t\tfor (let new_child of new_children) {\n\t\t\t\t\tnew_objects.push(new_child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\n\tprivate _remove_parent_from_object(object: THREE.Object3D): THREE.Object3D[] {\n\t\tlet current_children = object.children;\n\n\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\tcurrent_children = this._get_children_from_objects(current_children);\n\t\t}\n\n\t\treturn current_children;\n\t}\n\n\tprivate _get_children_from_objects(objects: THREE.Object3D[]): THREE.Object3D[] {\n\t\tlet object;\n\t\tconst children: Object3D[] = [];\n\t\twhile ((object = objects.pop())) {\n\t\t\tif (object.children) {\n\t\t\t\tfor (let child of object.children) {\n\t\t\t\t\tchildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreInstancer} from '../../../core/geometry/Instancer';\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {ObjectTypeByObject} from '../../../core/geometry/Constant';\nclass InstanceSopParamsConfig extends NodeParamsConfig {\n\tattributes_to_copy = ParamConfig.STRING('instance*');\n\tapply_material = ParamConfig.BOOLEAN(1);\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tvisible_if: {apply_material: 1},\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new InstanceSopParamsConfig();\n\nexport class InstanceSopNode extends TypedSopNode<InstanceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'instance';\n\t}\n\n\tprivate _globals_handler: GlobalsGeometryHandler | undefined;\n\tprivate _geometry: BufferGeometry | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be instanciated', 'points to instance to'];\n\t}\n\n\tprivate _on_create_bound = this._on_create.bind(this);\n\tinitialize_node() {\n\t\tsuper.initialize_node();\n\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_bound);\n\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group_to_instance = input_contents[0];\n\t\tthis._geometry = undefined;\n\n\t\tconst object_to_instance = core_group_to_instance.objects()[0];\n\t\tif (object_to_instance) {\n\t\t\tconst geometry_to_instance = object_to_instance.geometry;\n\t\t\tif (geometry_to_instance) {\n\t\t\t\tconst core_group = input_contents[1];\n\t\t\t\tthis._create_instance(geometry_to_instance, core_group);\n\t\t\t}\n\t\t}\n\n\t\t// const type = object_to_instance.constructor.name;\n\t\tif (this._geometry) {\n\t\t\tconst type = ObjectTypeByObject(object_to_instance);\n\t\t\tif (type) {\n\t\t\t\tconst object = this.create_object(this._geometry, type);\n\t\t\t\t// object.customDepthMaterial = this._create_depth_material();\n\n\t\t\t\tif (this.pv.apply_material) {\n\t\t\t\t\tawait this._apply_material(object as Mesh);\n\t\t\t\t}\n\n\t\t\t\tthis.set_object(object);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tasync _apply_material(object: Mesh) {\n\t\tconst found_node = this.p.material.found_node();\n\t\tif (found_node) {\n\t\t\tif (found_node.node_context() == NodeContext.MAT) {\n\t\t\t\tconst material_node = found_node as BaseMatNodeType;\n\t\t\t\tthis._globals_handler = this._globals_handler || new GlobalsGeometryHandler();\n\t\t\t\tconst mat_builder_node = material_node as BaseBuilderMatNodeType;\n\t\t\t\tif (mat_builder_node.assembler_controller) {\n\t\t\t\t\tmat_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tconst container = await material_node.request_container();\n\t\t\t\tconst material: Material = container.material();\n\t\t\t\tif (material) {\n\t\t\t\t\tobject.material = material;\n\t\t\t\t\tCoreMaterial.apply_custom_materials(object, material);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a material');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('material node invalid');\n\t\t}\n\t}\n\n\t_create_instance(geometry_to_instance: BufferGeometry, template_core_group: CoreGroup) {\n\t\tthis._geometry = CoreInstancer.create_instance_buffer_geo(\n\t\t\tgeometry_to_instance,\n\t\t\ttemplate_core_group,\n\t\t\tthis.pv.attributes_to_copy\n\t\t);\n\t}\n\n\tprivate _on_create() {\n\t\tconst root = this.scene.root;\n\t\tconst mat_type = 'materials';\n\t\tconst mesh_lambert_builder_type = 'mesh_lambert_builder';\n\t\tconst mat_name = 'MAT';\n\t\tconst mesh_lambert_mat_name = 'mesh_lambert_builder1';\n\t\tlet MAT: MaterialsObjNode | undefined;\n\t\tconst node_with_mat_name = root.node(mat_name);\n\t\tif (node_with_mat_name && node_with_mat_name.type == mat_type) {\n\t\t\tMAT = node_with_mat_name as MaterialsObjNode;\n\t\t} else {\n\t\t\tMAT = root.create_node('materials');\n\t\t\tMAT.set_name(mat_name);\n\t\t}\n\n\t\tconst create_mesh_lambert = (MAT: MaterialsObjNode, mesh_lambert_mat_name: string) => {\n\t\t\tconst mat_node = MAT.create_node(mesh_lambert_builder_type);\n\t\t\tmat_node.set_name(mesh_lambert_mat_name);\n\n\t\t\tconst instance_transform1 = mat_node.create_node('instance_transform');\n\t\t\tlet output1 = mat_node.node('output1');\n\t\t\tif (!output1) {\n\t\t\t\toutput1 = mat_node.create_node('output');\n\t\t\t}\n\t\t\toutput1.set_input('position', instance_transform1, 'position');\n\t\t\toutput1.set_input('normal', instance_transform1, 'normal');\n\n\t\t\treturn mat_node;\n\t\t};\n\t\tconst mesh_lambert_mat = MAT.node(mesh_lambert_mat_name) || create_mesh_lambert(MAT, mesh_lambert_mat_name);\n\n\t\tthis.p.material.set(mesh_lambert_mat.full_path());\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nconst THREE = {Vector3};\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass JitterSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tseed = ParamConfig.INTEGER(1, {range: [0, 100]});\n}\nconst ParamsConfig = new JitterSopParamsConfig();\n\nexport class JitterSopNode extends TypedSopNode<JitterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'jitter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to jitter points of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.points().forEach((point, i) => {\n\t\t\t// TODO: replace by a pseudo random\n\t\t\tconst offset = new THREE.Vector3(\n\t\t\t\t2 * (CoreMath.rand(i * 75 + 764 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 5678 + 3653 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 657 + 48464 + this.pv.seed) - 0.5)\n\t\t\t);\n\t\t\toffset.normalize();\n\t\t\toffset.multiplyScalar(this.pv.amount);\n\n\t\t\tconst new_position = point\n\t\t\t\t.position()\n\t\t\t\t.clone()\n\t\t\t\t.add(offset);\n\t\t\tpoint.set_position(new_position);\n\t\t});\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass LayerSopParamsConfig extends NodeParamsConfig {\n\tlayer = ParamConfig.INTEGER(0, {\n\t\trange: [0, 31],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new LayerSopParamsConfig();\n\nexport class LayerSopNode extends TypedSopNode<LayerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'layer';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change layers of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.layers.set(this.pv.layer);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport lodash_times from 'lodash/times';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass LineSopParamsConfig extends NodeParamsConfig {\n\tlength = ParamConfig.FLOAT(1, {range: [0, 10]});\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [2, 100],\n\t\trange_locked: [true, false],\n\t});\n\torigin = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new LineSopParamsConfig();\n\nexport class LineSopNode extends TypedSopNode<LineSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'line';\n\t}\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst points_count = Math.max(2, this.pv.points_count);\n\n\t\tconst positions: number[] = new Array(points_count * 3);\n\t\tconst indices: number[] = new Array(points_count);\n\n\t\tconst last_pt = this.pv.direction\n\t\t\t.clone()\n\t\t\t.normalize()\n\t\t\t.multiplyScalar(this.pv.length);\n\n\t\tlodash_times(points_count, (i) => {\n\t\t\tconst i_n = i / (points_count - 1);\n\t\t\tconst point = last_pt.clone().multiplyScalar(i_n);\n\t\t\tpoint.add(this.pv.origin);\n\t\t\tpoint.toArray(positions, i * 3);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices[(i - 1) * 2] = i - 1;\n\t\t\t\tindices[(i - 1) * 2 + 1] = i;\n\t\t\t}\n\t\t});\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {BaseNodeMat} from '../Mat/_Base'\n\nimport {CoreMaterial} from '../../../core/geometry/Material';\nimport {GlobalsGeometryHandler} from '../gl/code/globals/Geometry';\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nclass MaterialSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tmaterial = ParamConfig.OPERATOR_PATH('/MAT/mesh_standard1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new MaterialSopParamsConfig();\n\nexport class MaterialSopNode extends TypedSopNode<MaterialSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'material';\n\t}\n\n\t_param_material: BaseMatNodeType | undefined;\n\t_globals_handler: GlobalsGeometryHandler = new GlobalsGeometryHandler();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to assign material to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\t// TODO: optimize by not fetching the material node everytime\n\t// and maybe have a method in all operator_path params to do that quickly\n\t// TODO: does this apply the material to only 1 node?\n\tasync cook(core_groups: CoreGroup[]) {\n\t\t// let container = input_containers[0];\n\t\t// const group =\tcontainer.group(); // {clone: this.do_clone_inputs()})\n\t\tconst core_group = core_groups[0];\n\n\t\tconst node = this.p.material.found_node();\n\t\tif (node) {\n\t\t\tif (node.node_context() != NodeContext.MAT) {\n\t\t\t\tthis.states.error.set('node is not a material');\n\t\t\t} else {\n\t\t\t\tconst material_node = node as BaseMatNodeType;\n\t\t\t\tconst material = material_node.material;\n\t\t\t\tif (material instanceof ShaderMaterial) {\n\t\t\t\t\tconst material_builder_node = node as BaseBuilderMatNodeType;\n\t\t\t\t\tmaterial_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tawait material_node.request_container();\n\t\t\t\tif (material) {\n\t\t\t\t\tfor (let object of core_group.objects_from_group(this.pv.group)) {\n\t\t\t\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\t\t\t\tobject.traverse((grand_child) => {\n\t\t\t\t\t\t\t\tthis.apply_material(grand_child, material);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.apply_material(object, material);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.set_core_group(core_group);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`material invalid. (error: '${material_node.states.error.message}')`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node '${this.pv.material}' not found`);\n\t\t}\n\t}\n\n\tapply_material(object: Object3D, material: Material) {\n\t\tconst object_with_material = object as Mesh;\n\t\t// if (object.material != null) {\n\t\t// \tobject.material.dispose();\n\t\t// }\n\t\t// TODO: do I really need to clone this material?\n\t\t// does it get cloned when a node fetches the container?\n\t\t// I may only need to clone it for the copy SOP\n\t\tobject_with_material.material = material;\n\t\tCoreMaterial.apply_custom_materials(object, material);\n\t}\n}\n","// import lodash_times from 'lodash/times';\n// import lodash_each from 'lodash/each';\n// import lodash_difference from 'lodash/difference';\n// import lodash_keys from 'lodash/keys';\n// import {Object3D} from 'three/src/core/Object3D';\n// import {Group} from 'three/src/objects/Group';\n// import {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferAttribute, Group, Object3D};\nimport {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreGroup, Object3DWithGeometry} from '../../../core/geometry/Group';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {CoreConstant} from '../../../Core/Geometry/Constant';\nimport {ObjectType} from '../../../core/geometry/Constant';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Points} from 'three/src/objects/Points';\ntype ObjectsByType = {[key in ObjectType]: Object3DWithGeometry[]};\ntype ObjectTypes = Array<ObjectType>;\n\nconst INPUT_NAME = 'geometry to merge';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass MergeSopParamsConfig extends NodeParamsConfig {\n\tcompact = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new MergeSopParamsConfig();\n\nexport class MergeSopNode extends TypedSopNode<MergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'merge';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 4);\n\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('compress-arrows-alt');\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tlet all_objects: Object3DWithGeometry[] = []; //new Group()\n\t\tfor (let input_core_group of input_contents) {\n\t\t\tif (input_core_group) {\n\t\t\t\tconst objects = input_core_group.objects();\n\t\t\t\tfor (let object of objects) {\n\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\tall_objects.push(child as Object3DWithGeometry);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.pv.compact) {\n\t\t\tall_objects = this._make_compact(all_objects);\n\t\t}\n\t\tthis.set_objects(all_objects);\n\t}\n\n\t_make_compact(all_objects: Object3DWithGeometry[]): Object3DWithGeometry[] {\n\t\tconst objects_by_type: ObjectsByType = {\n\t\t\t[ObjectType.MESH]: [],\n\t\t\t[ObjectType.POINTS]: [],\n\t\t\t[ObjectType.LINE_SEGMENTS]: [],\n\t\t};\n\t\tconst merged_objects: Object3DWithGeometry[] = [];\n\n\t\tfor (let object of all_objects) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst object = object3d as Object3DWithGeometry;\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\t// const type = child.constructor.name;\n\t\t\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\t\t\tobjects_by_type[ObjectType.MESH].push(object);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((object as LineSegments).isLineSegments) {\n\t\t\t\t\t\t\tobjects_by_type[ObjectType.LINE_SEGMENTS].push(object);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((object as Points).isPoints) {\n\t\t\t\t\t\t\t\tobjects_by_type[ObjectType.POINTS].push(object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfor (let type of Object.keys(objects_by_type) as ObjectTypes) {\n\t\t\tconst objects = objects_by_type[type];\n\n\t\t\tconst geometries = [];\n\t\t\tfor (let object of objects) {\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tgeometry.applyMatrix4(object.matrix);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\n\t\t\t// TODO: test that this works with geometries with same attributes\n\t\t\tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t\tif (merged_geometry) {\n\t\t\t\tconst object = this.create_object(merged_geometry, type);\n\t\t\t\tmerged_objects.push(object);\n\t\t\t}\n\n\t\t\t// objects.forEach( object=> {\n\t\t\t// \tif (object.parent != null) {\n\t\t\t// \t\tobject.parent.remove(object);\n\t\t\t// \t}\n\t\t\t// \tif (object.geometry != null) {\n\t\t\t// \t\tobject.geometry.dispose();\n\t\t\t// \t}\n\t\t\t// \t(object.material != null ? object.material.dispose() : undefined);\n\t\t\t// });\n\t\t}\n\t\treturn merged_objects;\n\t}\n}\n\n// _add_missing_attributes: (geo0, geo1)->\n// \tgeo0_attribute_names = lodash_keys(geo0.attributes)\n// \tgeo1_attribute_names = lodash_keys(geo1.attributes)\n\n// \tattributes_not_in_geo0 = lodash_difference(geo1_attribute_names, geo0_attribute_names)\n// \tattributes_not_in_geo1 = lodash_difference(geo0_attribute_names, geo1_attribute_names)\n\n// \tlodash_each attributes_not_in_geo0, (attribute_not_in_geo0)=>\n// \t\tthis._add_attribute(geo0, attribute_not_in_geo0, geo1.attributes[attribute_not_in_geo0])\n// \tlodash_each attributes_not_in_geo1, (attribute_not_in_geo1)=>\n// \t\tthis._add_attribute(geo1, attribute_not_in_geo1, geo0.attributes[attribute_not_in_geo1])\n\n// _add_attribute: (geo, attrib_name, attribute_template)->\n\n// \titem_size = attribute_template['itemSize']\n// \tnormalized = attribute_template['normalized']\n// \tpoints_count = geo.getAttribute('position').array.length / 3\n\n// \traw_values = []\n// \tlodash_times points_count, (i)->\n// \t\tlodash_times item_size, (j)->\n// \t\t\traw_values.push(0)\n\n// \tvalues = new Float32Array(raw_values)\n// \tgeo.setAttribute( attrib_name, new BufferAttribute( values, item_size, normalized) )\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {TypeAssert} from '../../poly/Assert';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {SimplexNoise} from '../../../../modules/three/examples/jsm/math/SimplexNoise';\n\nenum Operation {\n\tADD = 'add',\n\tSET = 'set',\n\tMULT = 'mult',\n\tSUBSTRACT = 'substract',\n\tDIVIDE = 'divide',\n}\ntype Operations = Array<Operation>;\nconst Operations: Operations = [Operation.ADD, Operation.SET, Operation.MULT, Operation.SUBSTRACT, Operation.DIVIDE];\n\n// const COMPONENT_OFFSETS = [\n// \tnew Vector3(545, 125454, 2142),\n// \tnew Vector3(425, 25746, 95242),\n// \tnew Vector3(765132, 21, 9245),\n// ]\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NoiseSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tfreq = ParamConfig.VECTOR3([1, 1, 1]);\n\toffset = ParamConfig.VECTOR3([0, 0, 0]);\n\toctaves = ParamConfig.INTEGER(3, {\n\t\trange: [1, 8],\n\t\trange_locked: [true, false],\n\t});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseed = ParamConfig.INTEGER(0, {range: [0, 100]});\n\tseparator = ParamConfig.SEPARATOR();\n\tuse_normals = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('position');\n\toperation = ParamConfig.INTEGER(Operations.indexOf(Operation.ADD), {\n\t\tmenu: {\n\t\t\tentries: Operations.map((operation) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: operation,\n\t\t\t\t\tvalue: Operations.indexOf(operation),\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcompute_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new NoiseSopParamsConfig();\n\nexport class NoiseSopNode extends TypedSopNode<NoiseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\t// _param_amount: number;\n\t// _param_offset: Vector3;\n\t// _param_freq: Vector3;\n\t// _param_seed: number;\n\t// _param_use_normals: boolean;\n\t// _param_attrib_name: string;\n\t// _param_operation: number;\n\t// _param_compute_normals: boolean;\n\n\tprivate _simplex_by_seed: Map<number, SimplexNoise> = new Map();\n\n\tprivate _rest_core_group_timestamp: number | undefined;\n\tprivate _rest_points: CorePoint[] = [];\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add noise to', 'rest geometry'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_rest = input_contents[1];\n\n\t\tconst dest_points = core_group.points();\n\t\tif (core_group_rest) {\n\t\t\tif (\n\t\t\t\tthis._rest_core_group_timestamp == null ||\n\t\t\t\tthis._rest_core_group_timestamp != core_group_rest.timestamp()\n\t\t\t) {\n\t\t\t\tthis._rest_points = core_group_rest.points();\n\t\t\t\tthis._rest_core_group_timestamp = core_group_rest.timestamp();\n\t\t\t}\n\t\t}\n\n\t\t// const {SimplexNoise} = await import(`three/examples/jsm/math/SimplexNoise`)\n\t\tconst simplex = this._get_simplex();\n\n\t\tconst use_normals = this.pv.use_normals && core_group.has_attrib('normal');\n\t\tconst target_attrib_size = core_group.attrib_size(this.pv.attrib_name);\n\n\t\tfor (let i = 0; i < dest_points.length; i++) {\n\t\t\tconst dest_point = dest_points[i];\n\t\t\tlet rest_point = core_group_rest ? this._rest_points[i] : dest_point;\n\t\t\tconst current_attrib_value = rest_point.attrib_value(this.pv.attrib_name);\n\t\t\tconst pos = rest_point\n\t\t\t\t.position()\n\t\t\t\t.add(this.pv.offset)\n\t\t\t\t.multiply(this.pv.freq);\n\n\t\t\tlet noise_value = (() => {\n\t\t\t\tif (use_normals) {\n\t\t\t\t\tconst normal = rest_point.attrib_value('normal');\n\t\t\t\t\tconst noise = this.pv.amount * this._fbm(simplex, pos.x, pos.y, pos.z);\n\t\t\t\t\treturn normal.clone().multiplyScalar(noise);\n\t\t\t\t\t//vertex.add(noise_vector)\n\t\t\t\t} else {\n\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 545, pos.y + 125454, pos.z + 2142),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x - 425, pos.y - 25746, pos.z + 95242),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 765132, pos.y + 21, pos.z - 9245)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tnoise_value = (() => {\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn noise_value.x;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturn new Vector2(noise_value.x, noise_value.y);\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturn noise_value;\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tconst new_attrib_value = (() => {\n\t\t\t\tconst operation = Operations[this.pv.operation];\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value + noise_value;\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value * noise_value;\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value / noise_value;\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value - noise_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value.add(noise_value);\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.multiply(noise_value);\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value.divide(noise_value);\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.sub(noise_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tdest_point.set_attrib_value(this.pv.attrib_name, new_attrib_value);\n\t\t}\n\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tfor (let geometry of core_group.geometries()) {\n\t\t\t\t(geometry.getAttribute(this.pv.attrib_name) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.pv.compute_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _fbm(simplex: SimplexNoise, x: number, y: number, z: number): number {\n\t\tlet value = 0.0;\n\t\tlet amplitude = 1.0;\n\t\tfor (let i = 0; i < this.pv.octaves; i++) {\n\t\t\tvalue += amplitude * simplex.noise3d(x, y, z);\n\t\t\tx *= this.pv.freq_increase;\n\t\t\ty *= this.pv.freq_increase;\n\t\t\tz *= this.pv.freq_increase;\n\t\t\tamplitude *= this.pv.amp_attenuation;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _get_simplex(): SimplexNoise {\n\t\tconst simplex = this._simplex_by_seed.get(this.pv.seed);\n\t\tif (simplex) {\n\t\t\treturn simplex;\n\t\t} else {\n\t\t\tconst simplex = this._create_simplex();\n\t\t\tthis._simplex_by_seed.set(this.pv.seed, simplex);\n\t\t\treturn simplex;\n\t\t}\n\t}\n\tprivate _create_simplex(): SimplexNoise {\n\t\tconst seed = this.pv.seed;\n\t\tconst random_generator = {\n\t\t\trandom: function() {\n\t\t\t\treturn CoreMath.rand_float(seed);\n\t\t\t},\n\t\t};\n\t\tconst simplex = new SimplexNoise(random_generator);\n\t\t// for (let key of Object.keys(this._simplex_by_seed)) {\n\t\tthis._simplex_by_seed.delete(seed);\n\t\t// }\n\t\treturn simplex;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n","// import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\n// import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const DEFAULT_NORMAL = new Vector3(0, 0, 1);\nconst NORMAL_ATTRIB_NAME = 'normal';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass NormalsSopParamsConfig extends NodeParamsConfig {\n\tedit = ParamConfig.BOOLEAN(0);\n\tupdate_x = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tx = ParamConfig.FLOAT('@N.x', {\n\t\tvisible_if: {update_x: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\ty = ParamConfig.FLOAT('@N.y', {\n\t\tvisible_if: {update_y: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tz = ParamConfig.FLOAT('@N.z', {\n\t\tvisible_if: {update_z: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\n\trecompute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 0},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new NormalsSopParamsConfig();\n\nexport class NormalsSopNode extends TypedSopNode<NormalsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'normals';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update normals of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.edit) {\n\t\t\tawait this._eval_expressions_for_core_group(core_group);\n\t\t} else {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tif (this.pv.invert) {\n\t\t\tthis._invert_normals(core_group);\n\t\t}\n\n\t\t// add attr if not present\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\t\t// \t\tif(!geometry.getAttribute('normal')){\n\t\t// \t\t\tconst position_values = geometry.attributes['position'].array;\n\t\t// \t\t\tconst normal_values = [];\n\t\t// \t\t\tposition_values.forEach(p=> normal_values.push(0));\n\t\t// \t\t\tgeometry.setAttribute('normal', new Float32BufferAttribute(normal_values, 3));\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (this.pv.edit) {\n\t\t// \tthis._eval_expressions(core_group);\n\t\t// } else {\n\t\t// \tif(this.pv.recompute){\n\t\t// \t\tcore_group.compute_vertex_normals()\n\t\t// \t}\n\t\t// }\n\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\n\t\t// \t\tif (this.pv.invert) {\n\t\t// \t\t\tthis._invert_normals(geometry);\n\t\t// \t\t}\n\n\t\t// \t\tif (!this.pv.edit) {\n\t\t// \t\t\tgeometry.computeVertexNormals();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\t// const points = core_group.points();\n\n\t\t// const attrib_name = 'normal';\n\t\t// for(let point of points){\n\n\t\t// \tthis.context().set_entity(point);\n\n\t\t// \tthis.param(attrib_name).eval(val=> {\n\t\t// \t\tval.normalize();\n\t\t// \t\tpoint.set_attrib_value(attrib_name, val);\n\t\t// \t});\n\t\t// }\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\t}\n\tprivate async _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(NORMAL_ATTRIB_NAME).array as number[];\n\n\t\t// x\n\t\tif (this.pv.update_x) {\n\t\t\tif (this.p.x.has_expression() && this.p.x.expression_controller) {\n\t\t\t\tawait this.p.x.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 0] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 0] = this.pv.x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// y\n\t\tif (this.pv.update_y) {\n\t\t\tif (this.p.y.has_expression() && this.p.y.expression_controller) {\n\t\t\t\tawait this.p.y.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 1] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 1] = this.pv.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// z\n\t\tif (this.pv.update_z) {\n\t\t\tif (this.p.z.has_expression() && this.p.z.expression_controller) {\n\t\t\t\tawait this.p.z.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 2] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 2] = this.pv.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_init_normal(core_geometry: CoreGeometry) {\n\t// \tif (!core_geometry.has_attrib(NORMAL_ATTRIB_NAME)) {\n\t// \t\tcore_geometry.add_numeric_attrib(NORMAL_ATTRIB_NAME, 3, DEFAULT_NORMAL);\n\t// \t}\n\t// }\n\n\tprivate _invert_normals(core_group: CoreGroup) {\n\t\t// this._create_init_normal();\n\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tconst geometry = core_object.core_geometry().geometry();\n\t\t\tconst normal_attrib = geometry.attributes[NORMAL_ATTRIB_NAME];\n\t\t\tif (normal_attrib) {\n\t\t\t\tconst array = normal_attrib.array as number[];\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] *= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// let index_attrib;\n\t\t// if ((index_attrib = geometry.getIndex()) != null) {\n\t\t// \tconst { array } = index_attrib;\n\n\t\t// \tconst faces_count = array.length / 3;\n\t\t// \tfor(let i=0; i<faces_count; i++){\n\t\t// \t\tconst tmp = array[i*3];\n\t\t// \t\tarray[i*3] = array[(i*3)+2];\n\t\t// \t\tarray[(i*3)+2] = tmp;\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\t// \tconst points = geometry_wrapper.points();\n\n\t\t// \tconst attrib_name = 'normal';\n\t\t// \tfor(let point of points){\n\t\t// \t\tconst normal = point.normal();\n\t\t// \t\tnormal.multiplyScalar(-1);\n\t\t// \t\tpoint.set_attrib_value(attrib_name, normal);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass NullSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new NullSopParamsConfig();\n\nexport class NullSopNode extends TypedSopNode<NullSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\tthis.ui_data.set_border_radius(1000);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n}\n","import {TypedSopNode, BaseSopNodeType} from './_Base';\nimport {NodeContext} from '../../poly/NodeContext';\n// import {CoreWalker} from '../../../Core/Walker';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GeometryContainer} from '../../containers/Geometry';\nclass ObjectMergeSopParamsConfig extends NodeParamsConfig {\n\tgeometry = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n}\nconst ParamsConfig = new ObjectMergeSopParamsConfig();\n\nexport class ObjectMergeSopNode extends TypedSopNode<ObjectMergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'object_merge';\n\t}\n\n\t// _param_apply_parent_transform: boolean\n\tinitialize_node() {}\n\n\tasync cook(input_containers: CoreGroup[]) {\n\t\tconst geometry_node = this.p.geometry.found_node();\n\t\tif (geometry_node) {\n\t\t\tif (geometry_node.node_context() == NodeContext.SOP) {\n\t\t\t\tconst container = await geometry_node.request_container();\n\t\t\t\tthis.import_input(geometry_node as BaseSopNodeType, container);\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a geometry');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.geometry}'`);\n\t\t}\n\t}\n\n\timport_input(geometry_node: BaseSopNodeType, container: GeometryContainer) {\n\t\tlet core_group;\n\t\t// I unfortunately need to do a clone here,\n\t\t// because if 2 objectmerge nodes import the same geometry,\n\t\t// they would try to place it under 2 different geo nodes\n\t\t// which is not possible\n\t\tif ((core_group = container.core_content_cloned()) != null) {\n\t\t\t// cannot do that until i know how to make it recook\n\t\t\t// when the obj changes\n\t\t\t// if (this._param_apply_parent_transform){\n\t\t\t// \tconst matrix = geometry_node.parent().object().matrixWorld\n\t\t\t// \tgroup.children.forEach(child=>{\n\t\t\t// \t\tconsole.log(child)\n\t\t\t// \t\tconst geometry = child.geometry\n\t\t\t// \t\tif(geometry){\n\t\t\t// \t\t\tgeometry.applyMatrix(matrix)\n\t\t\t// \t\t}\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.states.error.set('invalid target');\n\t\t}\n\t}\n\n\t// geometry_node() {\n\t// \tif ((this._param_geometry != null) && (this._param_geometry !== '')) {\n\t// \t\tCoreWalker.find_node(this, this._param_geometry);\n\t// \t}\n\t// }\n}\n","/// <reference path=\"./types/occlusion.d.ts\" />\n// https://github.com/wwwtyro/geo-ambient-occlusion\nimport geoao from 'geo-ambient-occlusion';\n\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {Float32BufferAttribute};\nimport {TypedSopNode} from './_Base';\n\n// import {CoreGroup} from '../../../Core/Geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\n// import {CoreGeometry} from '../../../Core/Geometry/Geometry'\n// import {CorePoint} from '../../../Core/Geometry/Point'\n\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass OcclusionSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING('occlusion');\n\tsamples = ParamConfig.INTEGER(256, {\n\t\trange: [1, 256],\n\t\trange_locked: [true, false],\n\t});\n\tsep = ParamConfig.SEPARATOR();\n\tbuffer_resolution = ParamConfig.INTEGER(512);\n\tbias = ParamConfig.FLOAT(0.01);\n}\nconst ParamsConfig = new OcclusionSopParamsConfig();\n\nexport class OcclusionSopNode extends TypedSopNode<OcclusionSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'occlusion';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tawait this._process_occlusion_on_object(core_object);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _process_occlusion_on_object(core_object: CoreObject) {\n\t\tconst geometry = core_object.core_geometry().geometry();\n\n\t\tconst position_array = geometry.attributes.position.array;\n\t\tconst normal_array = geometry.attributes.normal.array;\n\t\tconst index_array = geometry.getIndex()?.array;\n\t\tconst aoSampler = geoao(position_array, {\n\t\t\tcells: index_array,\n\t\t\tnormals: normal_array,\n\t\t\tresolution: this.pv.buffer_resolution,\n\t\t\tbias: this.pv.bias,\n\t\t});\n\n\t\tfor (let i = 0; i < this.pv.samples; i++) {\n\t\t\taoSampler.sample();\n\t\t}\n\t\tconst ao = aoSampler.report();\n\n\t\tgeometry.setAttribute(this.pv.attrib_name, new THREE.Float32BufferAttribute(ao, 1));\n\n\t\taoSampler.dispose();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {ParamType} from '../../../Engine/Param/_Module'\n\n// import {Lifespan} from './Concerns/ParticlesSystemGPU/Lifespan';\n// import {GPUCompute} from './Concerns/ParticlesSystemGPU/GPUCompute';\n// import {RenderMaterial} from './Concerns/ParticlesSystemGPU/RenderMaterial';\n// import {ParticleShaderBuilder} from './Concerns/ParticlesSystemGPU/ParticleShaderBuilder'\n// import {AssemblerOwner} from '../../../Engine/Node/Gl/Assembler/Owner';\nimport {ShaderAssemblerParticles} from '../gl/code/assemblers/particles/Particles';\nimport {GlobalsTextureHandler} from '../gl/code/globals/Texture';\n\n// SPECS:\n// - simulation shaders should update the particles at any frame, and resimulate accordingly when at later frames\n// - render material should update at any frame, without having to resimulate\n// - changing the input will recompute, when on first frame only (otherwise an animated geo could make it recompute all the time)\n\n// AssemblerOwner(\n// \tRenderMaterial(\n// \tLifespan(\n// \tGPUCompute(\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from '../../params/_Base';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {MaterialsObjNode} from '../obj/Materials';\nimport {GlNodeChildrenMap} from '../../poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ParticlesSystemGpuRenderController} from './utils/ParticlesSystemGPU/RenderController';\nimport {ParticlesSystemGpuComputeController} from './utils/ParticlesSystemGPU/GPUComputeController';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {ShaderName} from '../utils/shaders/ShaderName';\nimport {GlNodeFinder} from '../gl/code/utils/NodeFinder';\nimport {PointsBuilderMatNode} from '../mat/PointsBuilder';\nimport {ConstantGlNode} from '../gl/Constant';\nclass ParticlesSystemGpuSopParamsConfig extends NodeParamsConfig {\n\t// gpu compute\n\tstart_frame = ParamConfig.FLOAT(1, {range: [1, 100]});\n\tauto_textures_size = ParamConfig.BOOLEAN(1);\n\tmax_textures_size = ParamConfig.VECTOR2([1024, 1024], {visible_if: {auto_textures_size: 1}});\n\ttextures_size = ParamConfig.VECTOR2([64, 64], {visible_if: {auto_textures_size: 0}});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tParticlesSystemGpuSopNode.PARAM_CALLBACK_reset(node as ParticlesSystemGpuSopNode);\n\t\t},\n\t});\n\n\t// render\n\t// this.self.within_param_folder(\"setup\", () => {\n\tmaterial = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n}\nconst ParamsConfig = new ParticlesSystemGpuSopParamsConfig();\nexport class ParticlesSystemGpuSopNode extends TypedSopNode<ParticlesSystemGpuSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'particles_system_gpu';\n\t}\n\tprotected _assembler_controller: GlAssemblerController<ShaderAssemblerParticles> = new GlAssemblerController<\n\t\tShaderAssemblerParticles\n\t>(this, ShaderAssemblerParticles);\n\tget assembler_controller() {\n\t\treturn this._assembler_controller;\n\t}\n\n\tpublic readonly gpu_controller = new ParticlesSystemGpuComputeController(this);\n\tpublic readonly render_controller = new ParticlesSystemGpuRenderController(this);\n\n\tstatic require_webgl2() {\n\t\treturn true;\n\t}\n\tstatic PARAM_CALLBACK_reset(node: ParticlesSystemGpuSopNode) {\n\t\tnode.PARAM_CALLBACK_reset();\n\t}\n\tPARAM_CALLBACK_reset() {\n\t\tthis.gpu_controller.reset_gpu_compute_and_set_dirty();\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to emit particles from'];\n\t}\n\n\tprivate _reset_material_if_dirty_bound = this._reset_material_if_dirty.bind(this);\n\tprotected _children_controller_context = NodeContext.GL;\n\tprivate _on_create_prepare_material_bound = this._on_create_prepare_material.bind(this);\n\tinitialize_node() {\n\t\t// this._init_common_shader_builder(ShaderAssemblerParticles, {\n\t\t// \thas_display_flag: true,\n\t\t// \tupdate_on_dirty: false,\n\t\t// });\n\n\t\tthis.io.inputs.set_count(1);\n\t\t// set to never at the moment\n\t\t// otherwise the input is cloned on every frame inside cook_main()\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\n\t\tthis.add_post_dirty_hook('_reset_material_if_dirty', this._reset_material_if_dirty_bound);\n\n\t\tthis.lifecycle.add_on_create_hook(this.assembler_controller.on_create.bind(this.assembler_controller));\n\t\tthis.lifecycle.add_on_create_hook(this._on_create_prepare_material_bound);\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t// create_params() {\n\t// \t// this._create_gpu_compute_params();\n\t// \t// this._create_render_params();\n\t// \tthis._create_lifespan_params();\n\t// }\n\n\tasync _reset_material_if_dirty() {\n\t\t// if(\n\t\t// \tdirty_trigger.graph_node_id &&\n\t\t// \tthis._render_material_node &&\n\t\t// \tdirty_trigger.graph_node_id() == this._render_material_node.graph_node_id()\n\t\t// ){\n\t\t// \tthis.remove_dirty_state()\n\t\t// } else {\n\t\tif (this.p.material.is_dirty) {\n\t\t\tthis.render_controller.reset_render_material();\n\t\t\tif (!this.is_on_frame_start()) {\n\t\t\t\tawait this.render_controller.init_render_material();\n\t\t\t}\n\t\t}\n\t\t// }\n\t\t// that seems to create an infinite loop\n\t\t// maybe only check if the type of geo has changed?\n\t\t// if(this.input_graph_node(0).is_dirty()){\n\t\t// \tthis.set_compilation_required()\n\t\t// }\n\t}\n\n\tis_on_frame_start(): boolean {\n\t\treturn this.scene.frame == this.pv.start_frame;\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tthis.gpu_controller.set_restart_not_required();\n\t\tconst core_group = input_contents[0];\n\t\t// this._simulation_restart_required = false;\n\t\t// let set_group_required = false;\n\t\t// let points:CorePoint[] = [];\n\t\tconsole.log('particles cook');\n\t\tawait this.compile_if_required();\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.gpu_controller.reset_particle_groups();\n\t\t}\n\n\t\tif (!this.gpu_controller.initialized) {\n\t\t\tawait this.gpu_controller.init(core_group);\n\t\t\t// this.gpu_controller.init_particle_group_points(core_group)\n\t\t\t// await this.gpu_controller.create_gpu_compute();\n\t\t}\n\n\t\t// if (!this._gpu_compute) {\n\t\t// \tawait this.gpu_controller.create_gpu_compute(points);\n\t\t// \t// set_group_required = true\n\t\t// }\n\t\tif (!this.render_controller.initialized) {\n\t\t\tthis.render_controller.init_core_group(core_group);\n\t\t\tawait this.render_controller.init_render_material();\n\t\t}\n\n\t\tthis.gpu_controller.restart_simulation_if_required();\n\t\tthis.gpu_controller.compute_similation_if_required();\n\t\t// if (frame >= this.pv.start_frame) {\n\t\t// \tif (this._last_simulated_frame == null) {\n\t\t// \t\tthis._last_simulated_frame = this._param_start_frame - 1;\n\t\t// \t}\n\t\t// \tif (frame > this._last_simulated_frame) {\n\t\t// \t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t// \t}\n\t\t// }\n\n\t\tif (this.is_on_frame_start()) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tawait this.run_assembler();\n\t\t}\n\t}\n\tasync run_assembler() {\n\t\tconst root_nodes = this._find_root_nodes();\n\t\tconsole.log('root_nodes', root_nodes);\n\t\tif (root_nodes.length > 0) {\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.PARTICLE_SIM_UV);\n\t\t\tthis.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tthis.assembler_controller.assembler.set_root_nodes(root_nodes);\n\n\t\t\tawait this.assembler_controller.assembler.compile();\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\n\t\tconst shaders_by_name: Map<ShaderName, string> = this.assembler_controller.assembler.shaders_by_name();\n\t\tthis.gpu_controller.set_shaders_by_name(shaders_by_name);\n\t\tthis.render_controller.set_shaders_by_name(shaders_by_name);\n\t\t// if (shaders_by_name) {\n\t\t// \tawait this.eval_params(this._new_params);\n\t\t// \tthis._shaders_by_name = lodash_cloneDeep(shaders_by_name);\n\t\t// } else {\n\t\t// \tconsole.warn('no shaders by name from assembler');\n\t\t// }\n\t\tthis.gpu_controller.reset_gpu_compute();\n\t\tthis.gpu_controller.reset_particle_groups(); // this\n\n\t\tawait this.assembler_controller.assign_uniform_values(); // TODO: needed?\n\t}\n\t// shaders_by_name() {\n\t// \treturn this._shaders_by_name;\n\t// }\n\t// shaders(): string[] {\n\t// \treturn Object.keys(this._shaders_by_name).map((k) => this._shaders_by_name[k]);\n\t// }\n\n\tprivate _find_root_nodes() {\n\t\tconst nodes: BaseGlNodeType[] = GlNodeFinder.find_attribute_export_nodes(this);\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis.states.error.set('only one output node is allowed');\n\t\t\treturn [];\n\t\t}\n\t\tconst output_node = output_nodes[0];\n\t\tif (output_node) {\n\t\t\tnodes.push(output_node);\n\t\t}\n\t\treturn nodes;\n\t}\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n\n\tprivate _on_create_prepare_material() {\n\t\t// that's mostly to have the default shader work when creating the node\n\t\t// output.set_input('position', globals, 'position')\n\t\t// or instead we could create the default shader\n\t\tconst root = this.scene.root;\n\t\tconst mat_name = 'MAT';\n\t\tconst particles_mat_name = 'points_particles';\n\t\tconst MAT: MaterialsObjNode = root.nodes_by_type('materials')[0] || this.scene.root.create_node('materials');\n\t\tMAT.set_name(mat_name);\n\n\t\tconst create_points_mat = (MAT: MaterialsObjNode, name: string) => {\n\t\t\tlet points_mat = MAT.node('points_builder1') as PointsBuilderMatNode;\n\t\t\tif (!(points_mat && points_mat.type == PointsBuilderMatNode.type())) {\n\t\t\t\tpoints_mat = MAT.create_node('points_builder');\n\t\t\t}\n\t\t\tpoints_mat.set_name(name);\n\n\t\t\tlet points_mat_constant_point_size = points_mat.node('constant') as ConstantGlNode;\n\t\t\tif (!(points_mat_constant_point_size && points_mat_constant_point_size.type == ConstantGlNode.type())) {\n\t\t\t\tpoints_mat_constant_point_size = points_mat.create_node('constant');\n\t\t\t\tpoints_mat_constant_point_size.set_name('constant_point_size');\n\t\t\t}\n\t\t\tpoints_mat_constant_point_size.p.float.set(4); // to match the default point material\n\t\t\tconst points_mat_output1 = points_mat.node('output1');\n\t\t\tif (points_mat_output1) {\n\t\t\t\tpoints_mat_output1.set_input(\n\t\t\t\t\t'gl_PointSize',\n\t\t\t\t\tpoints_mat_constant_point_size,\n\t\t\t\t\tConstantGlNode.OUTPUT_NAME\n\t\t\t\t);\n\t\t\t}\n\t\t\treturn points_mat;\n\t\t};\n\t\tconst points_mat = MAT.node(particles_mat_name) || create_points_mat(MAT, particles_mat_name);\n\t\tif (points_mat) {\n\t\t\tconst new_path = points_mat.full_path();\n\t\t\tif (this.p.material.raw_input != new_path) {\n\t\t\t\tthis.p.material.set(new_path);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseGlShaderAssembler} from '../_Base';\n// import {GlobalsTextureHandler} from '../../Assembler/Globals/Texture';\n\nimport TemplateDefault from '../../templates/particles/Default.glsl';\n// import TemplatePosition from './Template/Particle/Position.glsl'\n// import TemplateVelocity from './Template/Particle/Velocity.glsl'\n// import TemplateAcceleration from './Template/Particle/Acceleration.glsl'\n\n// import {ShaderConfig} from './Config/ShaderConfig';\n// import {VariableConfig} from './Config/VariableConfig';\n// import {ShaderName, LineType} from '../../../../../Engine/Node/Gl/Assembler/Util/CodeBuilder';\nimport {AttributeGlNode} from '../../../Attribute';\nimport {TextureAllocationsController} from '../../utils/TextureAllocationsController';\nimport {ThreeToGl} from '../../../../../../core/ThreeToGl';\nimport {BaseGlNodeType} from '../../../_Base';\nimport {GlobalsGlNode} from '../../../Globals';\nimport {TypedNodeTraverser} from '../../../../utils/shaders/NodeTraverser';\nimport {ShaderName} from '../../../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../../../Output';\nimport {ParamType} from '../../../../../poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../../utils/connections/ConnectionPointType';\nimport {UniformGLDefinition} from '../../../utils/GLDefinition';\nimport {GlobalsTextureHandler} from '../../globals/Texture';\nimport {ShadersCollectionController} from '../../utils/ShadersCollectionController';\n\nexport class ShaderAssemblerParticles extends BaseGlShaderAssembler {\n\tprivate _texture_allocations_controller: TextureAllocationsController | undefined;\n\n\tget _template_shader() {\n\t\treturn undefined;\n\t}\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName) {\n\t\treturn TemplateDefault;\n\t}\n\t// async get_shaders(){\n\t// \tawait this.update_shaders()\n\t// \treturn this._shaders_by_name\n\t// }\n\n\tasync compile() {\n\t\tawait this.setup_shader_names_and_variables();\n\t\tawait this.update_shaders();\n\t}\n\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\tconst attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\tconst attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\tconst variable = this._texture_allocations_controller?.variable(attrib_name);\n\t\t\t\t\tif (variable && variable.allocation) {\n\t\t\t\t\t\tconst allocation_shader_name = variable.allocation.shader_name;\n\t\t\t\t\t\tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t\t\tlist.push(node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tasync setup_shader_names_and_variables() {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this, this._gl_parent_node);\n\t\tthis._leaf_nodes = node_traverser.leaves_from_nodes(this._root_nodes);\n\n\t\tfor (let node of this._root_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\tconsole.log('root and leaf:', this._root_nodes, this._leaf_nodes);\n\t\tthis._texture_allocations_controller = new TextureAllocationsController();\n\t\tthis._texture_allocations_controller.allocate_connections_from_root_nodes(this._root_nodes, this._leaf_nodes);\n\n\t\t// const globals_handler = new GlobalsTextureHandler()\n\t\t// this.set_assembler_globals_handler(globals_handler)\n\t\tif (this.globals_handler) {\n\t\t\t((<unknown>this.globals_handler) as GlobalsTextureHandler)?.set_texture_allocations_controller(\n\t\t\t\tthis._texture_allocations_controller\n\t\t\t);\n\t\t}\n\n\t\tthis._reset_shader_configs();\n\t}\n\tasync update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tconsole.log('this.shader_names', this.shader_names);\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tconsole.log(shader_name, lines.join('\\n'));\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tadd_output_params(output_child: OutputGlNode) {\n\t\toutput_child.add_param(ParamType.VECTOR3, 'position', [0, 0, 0]);\n\t\toutput_child.add_param(ParamType.VECTOR3, 'velocity', [0, 0, 0]);\n\t\t// output_child.add_param(ParamType.VECTOR3, 'accacceleration', [0, 0, 0]);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('velocity', ConnectionPointType.VEC3),\n\t\t\t// new TypedNamedConnectionPoint('acceleration', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('time', ConnectionPointType.FLOAT),\n\t\t]);\n\t}\n\tallow_attribute_exports() {\n\t\treturn true;\n\t}\n\n\tget texture_allocations_controller() {\n\t\treturn (this._texture_allocations_controller =\n\t\t\tthis._texture_allocations_controller || new TextureAllocationsController());\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\tcreate_shader_configs() {\n\t\treturn this._texture_allocations_controller?.create_shader_configs() || [];\n\t\t// [\n\t\t// \tnew ShaderConfig('position', ['position'], []),\n\t\t// \t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t// ]\n\t}\n\tcreate_variable_configs() {\n\t\treturn [\n\t\t\t// new VariableConfig('position', {\n\t\t\t// \tdefault: 'vec3( position )',\n\t\t\t// \tprefix: 'vec3 transformed = '\n\t\t\t// }),\n\t\t];\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.texture_allocations_controller.shader_names() || [];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.texture_allocations_controller.input_names_for_shader_name(root_node, shader_name) || [];\n\t\t// return this.shader_config(shader_name).input_names()\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn '// INSERT DEFINE';\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn '// INSERT BODY';\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName) {\n\t\treturn ['// INSERT DEFINE', '// INSERT BODY'];\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\tadd_export_body_line(\n\t\texport_node: BaseGlNodeType,\n\t\tinput_name: string,\n\t\tinput: BaseGlNodeType,\n\t\tvariable_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (input) {\n\t\t\tconst var_input = export_node.variable_for_input(input_name);\n\t\t\tconst new_var = ThreeToGl.vector3(var_input);\n\t\t\tif (new_var) {\n\t\t\t\tconst texture_variable = this.texture_allocations_controller.variable(variable_name);\n\n\t\t\t\t// if we are in the texture this variable is allocated to, we write it back\n\t\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\t\tconst component = texture_variable.component;\n\n\t\t\t\t\tconst line = `gl_FragColor.${component} = ${new_var}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(export_node, [line], shader_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: BaseGlNodeType, shaders_collection_controller: ShadersCollectionController) {\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.texture_allocations_controller.input_names_for_shader_name(output_node, shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tconst input = output_node.io.inputs.named_input(input_name);\n\n\t\t\t\tif (input) {\n\t\t\t\t\tconst variable_name = input_name;\n\t\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tinput,\n\t\t\t\t\t\tvariable_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\t// position reads the default attribute position\n\t\t\t\t\t// or maybe there is no need?\n\t\t\t\t\t// if(input_name == 'position'){\n\t\t\t\t\t// \tthis.globals_handler().read_attribute(output_node, 'vec3', 'position')\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tif (attribute_node.is_importing) {\n\t\t\tconst gl_type = attribute_node.gl_type();\n\t\t\tconst attribute_name = attribute_node.attribute_name;\n\t\t\tconst new_value = this.globals_handler?.read_attribute(\n\t\t\t\tattribute_node,\n\t\t\t\tgl_type,\n\t\t\t\tattribute_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${new_value}`;\n\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\n\t\t\t// re-export to ensure it is available on next frame\n\t\t\tconst texture_variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\t\tif (texture_variable && texture_variable.allocation?.shader_name == shader_name) {\n\t\t\t\tconst variable = this.texture_allocations_controller.variable(attribute_name);\n\t\t\t\tif (variable) {\n\t\t\t\t\tconst component = variable.component;\n\t\t\t\t\tconst body_line = `gl_FragColor.${component} = ${var_name}`;\n\t\t\t\t\tshaders_collection_controller.add_body_lines(attribute_node, [body_line]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// this.add_import_body_line(\n\t\t\t// \tattribute_node,\n\t\t\t// \tshader_name,\n\t\t\t// \tAttribute.output_name(),\n\t\t\t// \tattribute_node.attribute_name()\n\t\t\t// \t)\n\t\t}\n\t\tif (attribute_node.is_exporting) {\n\t\t\tconst input = attribute_node.connected_input_node();\n\t\t\tif (input) {\n\t\t\t\tconst variable_name = attribute_node.attribute_name;\n\n\t\t\t\tthis.add_export_body_line(\n\t\t\t\t\tattribute_node,\n\t\t\t\t\tattribute_node.input_name,\n\t\t\t\t\tinput,\n\t\t\t\t\tvariable_name,\n\t\t\t\t\tshaders_collection_controller\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'time':\n\t\t\t\t\tthis._handle_globals_time(globals_node, output_name, shaders_collection_controller);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tthis._handle_globals_default(globals_node, output_name, shaders_collection_controller);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _handle_globals_time(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst definition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst body_line = `float ${var_name} = ${output_name}`;\n\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\tthis.set_uniforms_time_dependent();\n\t}\n\n\tprivate _handle_globals_default(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\tconst output_connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (output_connection_point) {\n\t\t\tconst gl_type = output_connection_point.type;\n\n\t\t\tconst attrib_read = this.globals_handler?.read_attribute(\n\t\t\t\tglobals_node,\n\t\t\t\tgl_type,\n\t\t\t\toutput_name,\n\t\t\t\tshaders_collection_controller\n\t\t\t);\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst body_line = `${gl_type} ${var_name} = ${attrib_read}`;\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n}\n","export default \"#include <common>\\n\\n// INSERT DEFINE\\n\\nvoid main() {\\n\\n\\tvec2 particleUV = (gl_FragCoord.xy / resolution.xy);\\n\\n\\t// INSERT BODY\\n\\n}\"","import lodash_flatten from 'lodash/flatten';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_includes from 'lodash/includes';\nimport {TextureAllocation} from './TextureAllocation';\nimport {BaseGlNodeType} from '../../_Base';\n\n// import {TypedConnection, COMPONENTS_COUNT_BY_TYPE} from '../../../../../Engine/Node/Gl/GlData';\nimport {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {ShaderName, ParticleShaderNames} from '../../../utils/shaders/ShaderName';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ConnectionPointComponentsCountMap} from '../../../utils/connections/ConnectionPointType';\nimport {AttributeGlNode} from '../../Attribute';\nimport {BaseNamedConnectionPointType} from '../../../utils/connections/NamedConnectionPoint';\nimport {GlobalsGlNode} from '../../Globals';\n\nexport type TextureAllocationsControllerData = Dictionary<TextureVariableData[] | undefined>[];\n\nexport class TextureAllocationsController {\n\tprivate _allocations: TextureAllocation[] = [];\n\tprivate _next_allocation_index: number = 0;\n\n\tconstructor() {}\n\tallocate_connections_from_root_nodes(root_nodes: BaseGlNodeType[], leaf_nodes: BaseGlNodeType[]) {\n\t\t// const connections_by_node_id = {}\n\t\tconst variables = [];\n\n\t\t// TODO: let's go through the output node first, in case there is a name conflict, it will have priority\n\t\tfor (let node of root_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tfor (let connection_point of node.io.inputs.named_input_connection_points) {\n\t\t\t\t\t\tconst input = node.io.inputs.named_input(connection_point.name);\n\t\t\t\t\t\tif (input) {\n\t\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\tconnection_point.name,\n\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attrib_node = node as AttributeGlNode;\n\t\t\t\t\tconst named_input: BaseGlNodeType | null = attrib_node.connected_input_node();\n\t\t\t\t\tconst connection_point:\n\t\t\t\t\t\t| BaseNamedConnectionPointType\n\t\t\t\t\t\t| undefined = attrib_node.connected_input_connection_point();\n\t\t\t\t\tif (named_input && connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_input)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattrib_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (let node of leaf_nodes) {\n\t\t\tconst node_id = node.graph_node_id;\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'globals': {\n\t\t\t\t\tconst globals_node = node as GlobalsGlNode;\n\t\t\t\t\tconst output_names_attributes = ['position', 'normal', 'color', 'uv'];\n\t\t\t\t\t// const output_names_not_attributes = ['frame', 'gl_FragCoord', 'gl_PointCoord'];\n\t\t\t\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\t\t\t\t// const is_attribute = !lodash_includes(output_names_not_attributes, output_name)\n\n\t\t\t\t\t\t// is_attribute, as opposed to frame, gl_FragCoord and gl_PointCoord which are either uniforms or provided by the renderer\n\t\t\t\t\t\tconst is_attribute = output_names_attributes.includes(output_name);\n\n\t\t\t\t\t\tif (is_attribute) {\n\t\t\t\t\t\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(\n\t\t\t\t\t\t\t\toutput_name\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\t\t\t\tConnectionPointComponentsCountMap[gl_type]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\tconst attribute_node = node as AttributeGlNode;\n\t\t\t\t\tconst connection_point = attribute_node.output_connection_point();\n\t\t\t\t\tif (connection_point) {\n\t\t\t\t\t\t// connections_by_node_id[node_id] = connections_by_node_id[node_id] || []\n\t\t\t\t\t\t// connections_by_node_id[node_id].push(named_output)\n\t\t\t\t\t\tconst variable = new TextureVariable(\n\t\t\t\t\t\t\tattribute_node.attribute_name,\n\t\t\t\t\t\t\tConnectionPointComponentsCountMap[connection_point.type]\n\t\t\t\t\t\t);\n\t\t\t\t\t\tvariable.add_graph_node_id(node_id);\n\t\t\t\t\t\tvariables.push(variable);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.allocate_variables(variables);\n\t}\n\tallocate_variables(variables: TextureVariable[]) {\n\t\tconst variables_by_size_inverse = lodash_sortBy(variables, (variable) => {\n\t\t\treturn -variable.size;\n\t\t});\n\t\tfor (let variable of variables_by_size_inverse) {\n\t\t\tthis.allocate_variable(variable);\n\t\t}\n\t}\n\tallocate_variable(new_variable: TextureVariable) {\n\t\tlet allocated = this.has_variable(new_variable.name);\n\t\tif (allocated) {\n\t\t\tconst allocated_variable = this.variables().filter((v) => v.name == new_variable.name)[0];\n\t\t\tnew_variable.graph_node_ids?.forEach((boolean, graph_node_id: string) => {\n\t\t\t\tallocated_variable.add_graph_node_id(graph_node_id);\n\t\t\t});\n\t\t} else {\n\t\t\tif (!allocated) {\n\t\t\t\tfor (let allocation of this._allocations) {\n\t\t\t\t\tif (!allocated && allocation.has_space_for_variable(new_variable)) {\n\t\t\t\t\t\tallocation.add_variable(new_variable);\n\t\t\t\t\t\tallocated = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!allocated) {\n\t\t\t\tconst new_allocation = new TextureAllocation(this.next_allocation_name());\n\t\t\t\tthis._allocations.push(new_allocation);\n\t\t\t\tnew_allocation.add_variable(new_variable);\n\t\t\t}\n\t\t}\n\t}\n\n\tnext_allocation_name(): ShaderName {\n\t\tconst name = ParticleShaderNames[this._next_allocation_index];\n\t\tthis._next_allocation_index += 1;\n\t\treturn name;\n\t}\n\n\tshader_names(): ShaderName[] {\n\t\tconst explicit_shader_names = this._allocations.map((a) => a.shader_name);\n\n\t\t// include dependencies if needed\n\t\t// TODO: typescript - do I need those?\n\t\t// if (lodash_includes(explicit_shader_names, 'acceleration')) {\n\t\t// \texplicit_shader_names.push('velocity');\n\t\t// }\n\t\t// if (lodash_includes(explicit_shader_names, 'velocity')) {\n\t\t// \texplicit_shader_names.push('position');\n\t\t// }\n\n\t\treturn lodash_uniq(explicit_shader_names);\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\t// new ShaderConfig('position', ['position'], []),\n\t\t\t// new ShaderConfig('fragment', ['color', 'alpha'], ['vertex']),\n\t\t];\n\t}\n\tallocation_for_shader_name(shader_name: ShaderName): TextureAllocation {\n\t\treturn this._allocations.filter((a) => a.shader_name == shader_name)[0];\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\tconst allocation = this.allocation_for_shader_name(shader_name);\n\t\tif (allocation) {\n\t\t\treturn allocation.input_names_for_node(root_node);\n\t\t}\n\t}\n\t// find_variable(root_node: BaseNodeGl, shader_name: ShaderName, input_name: string): TextureVariable{\n\t// \tconst allocation = this.allocation_for_shader_name(shader_name)\n\t// \tif(allocation){\n\t// \t\treturn allocation.find_variable_with_node(root_node, input_name)\n\t// \t}\n\t// }\n\tvariable(variable_name: string): TextureVariable | undefined {\n\t\tfor (let allocation of this._allocations) {\n\t\t\tconst variable = allocation.variable(variable_name);\n\t\t\tif (variable) {\n\t\t\t\treturn variable;\n\t\t\t}\n\t\t}\n\t}\n\tvariables(): TextureVariable[] {\n\t\treturn lodash_flatten(this._allocations.map((a) => a.variables || []));\n\t}\n\thas_variable(name: string): boolean {\n\t\tconst names = this.variables().map((v) => v.name);\n\t\treturn lodash_includes(names, name);\n\t}\n\t// allocation_for_variable(name:string):TextureAllocation{\n\t// \tfor(let allocation of this._allocations){\n\t// \t\tconst variables = allocation.variables()\n\t// \t\tfor(let variable of variables){\n\t// \t\t\tif(variable.name() == name){\n\t// \t\t\t\treturn allocation\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tto_json(scene: PolyScene): TextureAllocationsControllerData {\n\t\treturn this._allocations.map((allocation: TextureAllocation) => {\n\t\t\tconst data = {\n\t\t\t\t[allocation.texture_name]: allocation.to_json(scene),\n\t\t\t};\n\t\t\treturn data;\n\t\t});\n\t}\n\tprint(scene: PolyScene) {\n\t\tconsole.log(JSON.stringify(this.to_json(scene), [''], 2));\n\t}\n}\n","import {TextureVariable, TextureVariableData} from './TextureVariable';\nimport {BaseGlNodeType} from '../../_Base';\nimport {PolyScene} from '../../../../scene/PolyScene';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nexport class TextureAllocation {\n\tprivate _variables: TextureVariable[] | undefined;\n\tprivate _size: number = 0;\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tadd_variable(variable: TextureVariable) {\n\t\tthis._variables = this._variables || [];\n\t\tthis._variables.push(variable);\n\t\tvariable.set_position(this._size);\n\t\tvariable.set_allocation(this);\n\t\tthis._size += variable.size;\n\t}\n\n\thas_space_for_variable(variable: TextureVariable): boolean {\n\t\treturn this._size + variable.size <= 4;\n\t}\n\tget shader_name() {\n\t\treturn this._shader_name; //this._variables[0].name()\n\t}\n\tget texture_name(): string {\n\t\treturn `texture_${this._shader_name}`;\n\t}\n\n\tget variables(): TextureVariable[] | undefined {\n\t\treturn this._variables;\n\t}\n\tvariables_for_input_node(root_node: BaseGlNodeType): TextureVariable[] | undefined {\n\t\treturn this._variables?.filter((variable) => variable.graph_node_ids?.has(root_node.graph_node_id) || false);\n\t}\n\tinput_names_for_node(root_node: BaseGlNodeType): string[] | undefined {\n\t\treturn this.variables_for_input_node(root_node)?.map((v) => v.name);\n\t}\n\t// find_variable_with_node(root_node: BaseNodeGl, input_name: string): TextureVariable{\n\t// \treturn this.variables_for_input_node(root_node).filter(v=>v.name() == input_name)[0]\n\t// }\n\t// find_variable_without_node(input_name: string): TextureVariable{\n\t// \treturn this._variables.filter(v=>v.name() == input_name)[0]\n\t// }\n\tvariable(variable_name: string) {\n\t\tif (this._variables) {\n\t\t\tfor (let variable of this._variables) {\n\t\t\t\tif (variable.name == variable_name) {\n\t\t\t\t\treturn variable;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tto_json(scene: PolyScene): TextureVariableData[] | undefined {\n\t\treturn this._variables?.map((v) => v.to_json(scene));\n\t\t// for(let variable of this._variables){\n\t\t// \tdata[variable.name()] = variable.to_json(scene)\n\t\t// }\n\t\t// return data\n\t}\n}\n","import {TextureAllocation} from './TextureAllocation';\nimport {PolyScene} from '../../../../scene/PolyScene';\n\nexport interface TextureVariableData {\n\tname: string;\n\tnodes: string[];\n}\n\nexport class TextureVariable {\n\tprivate _allocation: TextureAllocation | undefined;\n\tprivate _position: number = -1;\n\n\tprivate _graph_node_ids: Map<string, boolean> | undefined;\n\n\tconstructor(private _name: string, private _size: number) {\n\t\tif (!_name) {\n\t\t\tthrow 'TextureVariable requires a name';\n\t\t}\n\t}\n\n\tset_allocation(allocation: TextureAllocation) {\n\t\tthis._allocation = allocation;\n\t}\n\tget allocation() {\n\t\treturn this._allocation;\n\t}\n\n\tget graph_node_ids() {\n\t\treturn this._graph_node_ids;\n\t}\n\tadd_graph_node_id(id: string) {\n\t\tthis._graph_node_ids = this._graph_node_ids || new Map();\n\t\tthis._graph_node_ids.set(id, true);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\n\tset_position(position: number) {\n\t\tthis._position = position;\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget component(): string {\n\t\treturn 'xyzw'\n\t\t\t.split('')\n\t\t\t.splice(this._position, this._size)\n\t\t\t.join('');\n\t}\n\tto_json(scene: PolyScene): TextureVariableData {\n\t\tconst names: string[] = [];\n\t\tif (this._graph_node_ids) {\n\t\t\tthis._graph_node_ids.forEach((boolean, node_id: string) => {\n\t\t\t\tconst name = scene.graph.node_from_id(node_id).name;\n\t\t\t\tnames.push(name);\n\t\t\t});\n\t\t}\n\n\t\treturn {\n\t\t\tname: this.name,\n\t\t\tnodes: names.sort(),\n\t\t};\n\t}\n}\n","import lodash_cloneDeep from 'lodash/cloneDeep';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {BaseNodeSop} from '../_Base'\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseBuilderMatNodeType} from '../../../mat/_BaseBuilder';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\n\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from '../../../../../core/geometry/Material';\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {TextureAllocationsControllerData} from '../../../gl/code/utils/TextureAllocationsController';\n\nexport class ParticlesSystemGpuRenderController {\n\tprivate _render_material: ShaderMaterial | undefined;\n\tprotected _particles_group_objects: Object3D[] = [];\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprivate _texture_allocations_json: TextureAllocationsControllerData | undefined;\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// _create_render_params() {\n\t// \tthis.self.within_param_folder(\"setup\", () => {\n\t// \t\tthis.self.add_param(ParamType.OPERATOR_PATH, \"material\", \"\", {\n\t// \t\t\tnode_selection: {\n\t// \t\t\t\tcontext: NodeContext.MAT\n\t// \t\t\t},\n\t// \t\t\tdependent_on_found_node: false\n\t// \t\t});\n\t// \t});\n\t// }\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_render_material();\n\t}\n\n\tassign_render_material() {\n\t\tif (!this._render_material) {\n\t\t\t// throw 'cannot assign non existing material';\n\t\t\treturn;\n\t\t}\n\t\tfor (let object3d of this._particles_group_objects) {\n\t\t\tconst object = object3d as Mesh;\n\t\t\tif (object.geometry) {\n\t\t\t\tobject.material = this._render_material;\n\t\t\t\tCoreMaterial.apply_custom_materials(object, this._render_material as ShaderMaterialWithCustomMaterials);\n\t\t\t\tobject.matrixAutoUpdate = false;\n\t\t\t\tobject.updateMatrix();\n\t\t\t}\n\t\t}\n\t\t// if this material is recomputed on a frame after the frame_start\n\t\t// we need to:\n\t\t// - mark the material as needsUpdate (to ensure it gets recompiled by the renderer)\n\t\t// - update the uniforms (to ensure the material gets the right values, as the uniforms have been reset)\n\t\tthis._render_material.needsUpdate = true;\n\t\tthis.update_render_material_uniforms();\n\t}\n\tupdate_render_material_uniforms() {\n\t\tif (!this._render_material) {\n\t\t\treturn;\n\t\t}\n\t\t// if (!this.self._gpu_compute) {\n\t\t// \treturn;\n\t\t// }\n\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis._shaders_by_name?.forEach((string, shader_name) => {\n\t\t\tconst texture = this.node.gpu_controller.getCurrentRenderTarget(shader_name)?.texture;\n\t\t\tif (texture) {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tthis._render_material.uniforms[uniform_name].value = texture;\n\t\t\t\t\tCoreMaterial.assign_custom_uniforms(this._render_material, uniform_name, texture);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// console.log(this._render_material.vertexShader);\n\t\t// console.log(this._render_material.fragmentShader);\n\t}\n\n\treset_render_material() {\n\t\tthis._render_material = undefined;\n\t\tthis._particles_group_objects = []; //this._particles_core_group.objects()\n\t}\n\tget initialized(): boolean {\n\t\treturn this._render_material != null;\n\t}\n\n\tinit_core_group(core_group: CoreGroup) {\n\t\tfor (let child of core_group.objects()) {\n\t\t\tthis._particles_group_objects.push(child);\n\t\t}\n\t}\n\tasync init_render_material() {\n\t\t// if (this.self.compile_required()) {\n\t\t// \treturn;\n\t\t// }\n\t\tif (this._render_material) {\n\t\t\treturn;\n\t\t}\n\n\t\t// const uniforms_particles = {\n\t\t// \t\"texture_position\": { value: null },\n\t\t// \t// \"debugX\": { value: 0 },\n\t\t// \t// \"textureVelocity\": { value: null },\n\t\t// \t// \"cameraConstant\": { value: 1 }, //( camera ) },\n\t\t// \t// \"density\": { value: 1.0 }\n\t\t// };\n\n\t\t// ShaderMaterial\n\t\tif (this.node.p.material.is_dirty) {\n\t\t\tawait this.node.p.material.compute();\n\t\t}\n\t\tconst mat_node = this.node.p.material.found_node() as BaseBuilderMatNodeType; // TODO: typescript - ensure node selection is safe, as it would currently crash with a non builder mat selected\n\n\t\tif (mat_node) {\n\t\t\tconst new_texture_allocations_json: TextureAllocationsControllerData = this.node.assembler_controller.assembler.texture_allocations_controller.to_json(\n\t\t\t\tthis.node.scene\n\t\t\t);\n\n\t\t\tconst globals_handler = new GlobalsTextureHandler(GlobalsTextureHandler.UV_VARYING);\n\t\t\tglobals_handler.set_texture_allocations_controller(\n\t\t\t\tthis.node.assembler_controller.assembler.texture_allocations_controller\n\t\t\t);\n\t\t\tmat_node.assembler_controller.set_assembler_globals_handler(globals_handler);\n\t\t\tif (\n\t\t\t\t!this._texture_allocations_json ||\n\t\t\t\tJSON.stringify(this._texture_allocations_json) != JSON.stringify(new_texture_allocations_json)\n\t\t\t) {\n\t\t\t\t// we need to set the node to dirty if a recompile is needed\n\t\t\t\t// otherwise it won't cook\n\t\t\t\t// but we also need to check if the texture_allocation has changed,\n\t\t\t\t// otherwise we'll have an infinite loop\n\t\t\t\tthis._texture_allocations_json = lodash_cloneDeep(new_texture_allocations_json);\n\t\t\t\tmat_node.set_dirty();\n\t\t\t}\n\t\t\t// set compilation required in case the texture allocation has changed\n\t\t\t// but not needed as it is done by set_assembler_globals_handler\n\t\t\t//found_node.set_compilation_required() //_and_dirty()\n\t\t\tconst container = await mat_node.request_container();\n\t\t\tthis._render_material = container.material() as ShaderMaterial; //.clone()\n\t\t\t// this._render_material.needsUpdate = true\n\t\t\t// this.self._assembler.texture_allocations_controller().print()\n\t\t\t// throw \"DEBUGGIN...\"\n\t\t} else {\n\t\t\tthis.node.states.error.set('render material not valid');\n\t\t\t// this._render_material = this._render_material || new ShaderMaterial( {\n\t\t\t// \tuniforms: {},\n\t\t\t// \tvertexShader: particleVertexShader,\n\t\t\t// \tfragmentShader: particleFragmentShader\n\t\t\t// } );\n\t\t}\n\n\t\t// add uniforms\n\t\tif (this._render_material) {\n\t\t\tconst uniforms = this._render_material.uniforms;\n\t\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\t\tconst uniform_name = `texture_${shader_name}`;\n\t\t\t\tconst uniform_value = {value: null};\n\t\t\t\tuniforms[uniform_name] = uniform_value;\n\t\t\t\tif (this._render_material) {\n\t\t\t\t\tCoreMaterial.init_custom_material_uniforms(this._render_material, uniform_name, uniform_value);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// this._render_material.extensions.drawBuffers = true;\n\t\tthis.assign_render_material();\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2';\n\nimport {MathUtils} from 'three/src/math/MathUtils';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n\n// import {BaseNodeSop} from '../_Base'\n\n// import {CoreConstant} from '../../../../../Core/Geometry/Constant'\n\nimport {CoreGroup} from '../../../../../core/geometry/Group';\nimport {CoreMath} from '../../../../../core/math/_Module';\n\n// import computeShaderPosition from 'src/Engine/Node/Gl/Assembler/Template/Particle/Position.glsl'\n// import computeShaderVelocity from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.v.glsl'\n// import particleVertexShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.vert.glsl'\n// import particleFragmentShader from 'src/Engine/Node/Gl/Assembler/Template/Particle/Particle.frag.glsl'\nimport {GlobalsTextureHandler} from '../../../gl/code/globals/Texture';\nimport {GPUComputationRenderer} from './GPUComputationRenderer';\nimport {ParticlesSystemGpuSopNode} from '../../ParticlesSystemGpu';\nimport {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {POLY} from '../../../../Poly';\nimport {CorePoint} from '../../../../../core/geometry/Point';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\ninterface GPUComputationRendererVariable {\n\tname: string;\n\trenderTargets: WebGLRenderTarget[];\n\tmaterial: ShaderMaterial;\n}\ninterface GPUComputationRenderer {\n\tnew (x: number, y: number, renderer: WebGLRenderer): GPUComputationRenderer;\n\tcompute(): void;\n\tinit(): string | null;\n\taddVariable(name: string, fragment_shader: string, variable: DataTexture): GPUComputationRendererVariable;\n\tsetVariableDependencies(variable: GPUComputationRendererVariable, vars: GPUComputationRendererVariable[]): void;\n\trenderTexture(texture: DataTexture, render_target: WebGLRenderTarget): void;\n\tcreateTexture(): DataTexture;\n\tgetCurrentRenderTarget(variable: GPUComputationRendererVariable): WebGLRenderTarget;\n}\n\nexport class ParticlesSystemGpuComputeController {\n\tprotected _gpu_compute: GPUComputationRenderer | undefined;\n\tprotected _simulation_restart_required: boolean = false;\n\n\tprotected _renderer: WebGLRenderer | undefined;\n\t// private _particles_group: CoreGroup\n\n\tprotected _particles_core_group: CoreGroup | undefined;\n\tprotected _points: CorePoint[] = [];\n\n\tprivate variables_by_name: Map<ShaderName, GPUComputationRendererVariable> = new Map();\n\tprivate _created_textures_by_name: Map<ShaderName, DataTexture> = new Map();\n\tprivate _shaders_by_name: Map<ShaderName, string> | undefined;\n\tprotected _last_simulated_frame: number | undefined;\n\t// private _use_instancing: boolean = false\n\n\t// private _param_auto_textures_size: boolean;\n\t// private _param_max_textures_size: Vector2;\n\t// private _param_textures_sizes: Vector2;\n\tprivate _used_textures_size: Vector2 = new Vector2();\n\n\tconstructor(private node: ParticlesSystemGpuSopNode) {}\n\n\t// protected _create_gpu_compute_params() {\n\t// \tthis.self.within_param_folder('setup', () => {\n\t// \t\tthis.self.add_param(ParamType.INTEGER, 'start_frame', 1, {\n\t// \t\t\trange: [1, 100],\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.TOGGLE, 'auto_textures_size', 1);\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'max_textures_size', [1024, 1024], {\n\t// \t\t\tvisible_if: {auto_textures_size: 1},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.VECTOR2, 'textures_size', [64, 64], {\n\t// \t\t\tvisible_if: {auto_textures_size: 0},\n\t// \t\t});\n\t// \t\tthis.self.add_param(ParamType.BUTTON, 'reset', '', {\n\t// \t\t\tcallback: this._reset_gpu_compute_and_set_dirty.bind(this),\n\t// \t\t});\n\t// \t});\n\t// \t// this.self.add_param(ParamType.BUTTON, 'force_compute', '', {callback: this._force_compute.bind(this)})\n\t// }\n\n\tset_shaders_by_name(shaders_by_name: Map<ShaderName, string>) {\n\t\tthis._shaders_by_name = shaders_by_name;\n\t\tthis.reset_gpu_compute();\n\t}\n\tasync init(core_group: CoreGroup) {\n\t\tthis.init_particle_group_points(core_group);\n\t\tawait this.create_gpu_compute();\n\t}\n\n\tgetCurrentRenderTarget(shader_name: ShaderName) {\n\t\tconst variable = this.variables_by_name.get(shader_name);\n\t\tif (variable) {\n\t\t\treturn this._gpu_compute?.getCurrentRenderTarget(variable);\n\t\t}\n\t}\n\n\tinit_particle_group_points(core_group: CoreGroup) {\n\t\tthis.reset_gpu_compute();\n\n\t\tif (!core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._particles_core_group = core_group;\n\t\t// this._particles_group_objects = []; //this._particles_core_group.objects()\n\n\t\t// in order to have proper copy on each children, I need to do .push for each\n\t\t// and not just my_array = group.children, as the array would then be empty\n\t\t// after have done .set_group(group)\n\t\t// I may need to rethink the whole\n\t\t// for (let child of this._particles_core_group.objects()) {\n\t\t// \tthis._particles_group_objects.push(child);\n\t\t// }\n\t\t// this._particles_core_group = new CoreGroup(this._particles_group)\n\t\tthis._points = this._get_points() || [];\n\t}\n\n\tcompute_similation_if_required() {\n\t\tconst frame = this.node.scene.frame;\n\t\tconst start_frame: number = this.node.pv.start_frame;\n\t\tif (frame >= start_frame) {\n\t\t\tif (this._last_simulated_frame == null) {\n\t\t\t\tthis._last_simulated_frame = start_frame - 1;\n\t\t\t}\n\t\t\tif (frame > this._last_simulated_frame) {\n\t\t\t\tthis._compute_simulation(frame - this._last_simulated_frame);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _compute_simulation(count = 1) {\n\t\tif (!this._gpu_compute) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis.update_simulation_material_uniforms();\n\n\t\tfor (let i = 0; i < count; i++) {\n\t\t\tthis._gpu_compute.compute();\n\t\t}\n\t\tthis.node.render_controller.update_render_material_uniforms();\n\t\tthis._last_simulated_frame = this.node.scene.frame;\n\n\t\t// this._renderer.render(this._gpu_scene, this._gpu_camera)\n\t}\n\n\tasync create_gpu_compute() {\n\t\tif (this.node.pv.auto_textures_size) {\n\t\t\tconst nearest_power_of_two = CoreMath.nearestPower2(Math.sqrt(this._points.length));\n\t\t\tthis._used_textures_size.x = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.x);\n\t\t\tthis._used_textures_size.y = Math.min(nearest_power_of_two, this.node.pv.max_textures_size.y);\n\t\t} else {\n\t\t\tif (\n\t\t\t\t!(\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.x) &&\n\t\t\t\t\tMathUtils.isPowerOfTwo(this.node.pv.textures_size.y)\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tthis.node.states.error.set('texture size must be a power of 2');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst max_particles_count = this.node.pv.textures_size.x * this.node.pv.textures_size.y;\n\t\t\tif (this._points.length > max_particles_count) {\n\t\t\t\tthis.node.states.error.set(\n\t\t\t\t\t`max particles is set to (${this.node.pv.textures_size.x}x${this.node.pv.textures_size.y}=) ${max_particles_count}`\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._used_textures_size.copy(this.node.pv.textures_size);\n\t\t}\n\n\t\tthis.node.states.time_dependent.force_time_dependent();\n\t\tthis._init_particles_uvs();\n\t\t// we need to recreate the material if the texture allocation changes\n\t\tthis.node.render_controller.reset_render_material();\n\t\t// await this.node.render_controller.init_render_material();\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer(); //new WebGLRenderer();\n\t\tif (renderer) {\n\t\t\tthis._renderer = renderer;\n\t\t} else {\n\t\t\tthis.node.states.error.set('no renderer found');\n\t\t}\n\t\t// console.log(this._renderer.extensions, this._renderer.capabilities)\n\t\t// if(!this._renderer.extensions.get( 'WEBGL_draw_buffers' )){\n\t\t// \tthis.self.set_error(\"this operator requires the browser extension WEBGL_draw_buffers\")\n\t\t// \talert(\"no extension found\")\n\t\t// \treturn\n\t\t// }\n\t\t// this._renderer = new WebGLRenderer();\n\t\t// this._gpu_scene = new Scene()\n\t\t// this._gpu_camera = new Camera()\n\t\t// this._renderer.setPixelRatio( window.devicePixelRatio );\n\t\t// this._renderer.setSize( this.node.pv.textures_size.x, this.node.pv.textures_size.y );\n\n\t\tconst compute = new GPUComputationRenderer(\n\t\t\tthis._used_textures_size.x,\n\t\t\tthis._used_textures_size.y,\n\t\t\tthis._renderer\n\t\t);\n\t\tthis._gpu_compute = (<unknown>compute) as GPUComputationRenderer;\n\n\t\tif (!this._gpu_compute) {\n\t\t\tthis.node.states.error.set('failed to create the GPUComputationRenderer');\n\t\t\treturn;\n\t\t}\n\n\t\tthis._last_simulated_frame = undefined;\n\n\t\t// document.body.style = ''\n\t\t// document.body.appendChild( renderer.domElement );\n\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.renderTargets[0].dispose();\n\t\t\tvariable.renderTargets[1].dispose();\n\t\t\tthis.variables_by_name.delete(shader_name);\n\t\t});\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tconst all_variables: GPUComputationRendererVariable[] = [];\n\t\tthis._shaders_by_name?.forEach((shader, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tconst variable = this._gpu_compute.addVariable(\n\t\t\t\t\t`texture_${shader_name}`,\n\t\t\t\t\tshader,\n\t\t\t\t\tthis._created_textures_by_name.get(shader_name)!\n\t\t\t\t);\n\t\t\t\tthis.variables_by_name.set(shader_name, variable);\n\t\t\t\tall_variables.push(variable);\n\t\t\t}\n\t\t});\n\n\t\t// this._gpu_compute.setVariableDependencies( this.var_v, [ this.var_P, this.var_v ] );\n\t\t// for (let shader_name of Object.keys(this._shaders_by_name)) {\n\t\tthis.variables_by_name?.forEach((variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._gpu_compute.setVariableDependencies(\n\t\t\t\t\tvariable,\n\t\t\t\t\tall_variables // currently all depend on all\n\t\t\t\t);\n\t\t\t}\n\t\t});\n\n\t\tthis._create_texture_render_targets();\n\t\tthis._fill_textures();\n\t\tthis.create_simulation_material_uniforms();\n\n\t\tvar error = this._gpu_compute.init();\n\n\t\tif (error !== null) {\n\t\t\tconsole.error(error);\n\t\t\tthis.node.states.error.set(error);\n\t\t}\n\t}\n\n\tprivate create_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst uniforms = variable.material.uniforms;\n\t\t\tuniforms['frame'] = {value: this.node.scene.frame};\n\n\t\t\tfor (let param_config of this.node.assembler_controller.assembler.param_configs()) {\n\t\t\t\tuniforms[param_config.uniform_name] = param_config.uniform;\n\t\t\t}\n\t\t});\n\t}\n\tprivate update_simulation_material_uniforms() {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tvariable.material.uniforms['frame'].value = this.node.scene.frame;\n\t\t});\n\t}\n\n\tprivate _init_particles_uvs() {\n\t\t// var uvs = new Float32Array( this.node.pv.textures_size.x * this.node.pv.textures_size.y * 2 );\n\t\tvar uvs = new Float32Array(this._points.length * 2);\n\t\t// const rows_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.y, (points.length / this.node.pv.textures_size.y)\n\t\t// ))\n\t\t// const columns_count = Math.ceil(Math.min(\n\t\t// \tthis.node.pv.textures_size.x, (points.length / rows_count)\n\t\t// ))\n\t\tlet p = 0;\n\t\tvar cmptr = 0;\n\t\tfor (var j = 0; j < this._used_textures_size.x; j++) {\n\t\t\tfor (var i = 0; i < this._used_textures_size.y; i++) {\n\t\t\t\tuvs[p++] = i / (this._used_textures_size.x - 1);\n\t\t\t\tuvs[p++] = j / (this._used_textures_size.y - 1);\n\n\t\t\t\tcmptr += 2;\n\t\t\t\tif (cmptr >= uvs.length) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uv_attrib_name = GlobalsTextureHandler.UV_ATTRIB;\n\t\tif (this._particles_core_group) {\n\t\t\tfor (let core_geometry of this._particles_core_group.core_geometries()) {\n\t\t\t\t// geometry.setAttribute( 'position', new BufferAttribute( positions, 3 ) );\n\t\t\t\tconst geometry = core_geometry.geometry();\n\t\t\t\tconst attribute_constructor = core_geometry.marked_as_instance()\n\t\t\t\t\t? InstancedBufferAttribute\n\t\t\t\t\t: BufferAttribute;\n\t\t\t\tgeometry.setAttribute(uv_attrib_name, new attribute_constructor(uvs, 2));\n\t\t\t}\n\t\t}\n\t}\n\n\tcreated_textures_by_name() {\n\t\treturn this._created_textures_by_name;\n\t}\n\n\tprivate _fill_textures() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\tconst assembler = this.node.assembler_controller.assembler;\n\t\t\tconst texture_allocations_controller = assembler.texture_allocations_controller;\n\n\t\t\tconst texture_allocation = texture_allocations_controller.allocation_for_shader_name(shader_name);\n\t\t\tif (!texture_allocation) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst texture_variables = texture_allocation.variables;\n\t\t\tif (!texture_variables) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst array = texture.image.data;\n\n\t\t\tfor (let texture_variable of texture_variables) {\n\t\t\t\tconst texture_position = texture_variable.position;\n\t\t\t\tlet variable_name = texture_variable.name;\n\t\t\t\t// if(this._use_instancing){\n\t\t\t\t// \tvariable_name = GlobalsTextureHandler.variable_name_to_instance_attrib(variable_name)\n\t\t\t\t// }\n\n\t\t\t\tconst first_point = this._points[0];\n\t\t\t\tif (first_point) {\n\t\t\t\t\tconst has_attrib = first_point.has_attrib(variable_name);\n\t\t\t\t\tif (has_attrib) {\n\t\t\t\t\t\tconst attrib_size = first_point.attrib_size(variable_name);\n\t\t\t\t\t\tlet cmptr = texture_position;\n\t\t\t\t\t\tfor (let point of this._points) {\n\t\t\t\t\t\t\tif (attrib_size == 1) {\n\t\t\t\t\t\t\t\tconst val = point.attrib_value(variable_name);\n\t\t\t\t\t\t\t\tarray[cmptr] = val;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpoint.attrib_value(variable_name).toArray(array, cmptr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcmptr += 4;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// var posArray = texture_P.image.data;\n\t\t// var velArray = texture_v.image.data;\n\n\t\t// let cmptr = 0\n\t\t// for(let point of points){\n\t\t// \tpoint.position().toArray(posArray, cmptr)\n\t\t// \tposArray[ cmptr + 3 ] = 1;\n\t\t// \tcmptr += 4\n\t\t// }\n\t}\n\n\treset_gpu_compute() {\n\t\tthis._gpu_compute = undefined;\n\t\tthis._simulation_restart_required = true;\n\t}\n\tset_restart_not_required() {\n\t\tthis._simulation_restart_required = false;\n\t}\n\treset_gpu_compute_and_set_dirty() {\n\t\tthis.reset_gpu_compute();\n\t\tthis.node.set_dirty();\n\t}\n\treset_particle_groups() {\n\t\t// this._particles_group = null\n\t\t// this._particles_group_objects = [];\n\t\tthis._particles_core_group = undefined;\n\t}\n\tget initialized(): boolean {\n\t\treturn this._particles_core_group != null && this._gpu_compute != null;\n\t}\n\t// private _force_compute(){\n\t// \tthis.self.run_assembler()\n\t// }\n\n\tprivate _create_texture_render_targets() {\n\t\tthis._created_textures_by_name.forEach((texture, shader_name) => {\n\t\t\ttexture.dispose();\n\t\t});\n\n\t\tthis._created_textures_by_name.clear();\n\t\tthis.variables_by_name.forEach((texture_variable, shader_name) => {\n\t\t\tif (this._gpu_compute) {\n\t\t\t\tthis._created_textures_by_name.set(shader_name, this._gpu_compute.createTexture());\n\t\t\t}\n\t\t});\n\t}\n\trestart_simulation_if_required() {\n\t\tif (this._simulation_restart_required) {\n\t\t\tthis._restart_simulation();\n\t\t}\n\t}\n\tprivate _restart_simulation() {\n\t\tthis._last_simulated_frame = undefined;\n\n\t\tthis._create_texture_render_targets();\n\t\tconst points = this._get_points(); // TODO: typescript - not sure that's right\n\t\tif (!points) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._fill_textures();\n\n\t\t// for (let variable_name of Object.keys(this.variables_by_name)) {\n\t\tthis.variables_by_name.forEach((variable, shader_name) => {\n\t\t\tconst texture = this._created_textures_by_name.get(shader_name);\n\t\t\tif (this._gpu_compute && texture) {\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[0]);\n\t\t\t\tthis._gpu_compute.renderTexture(texture, variable.renderTargets[1]);\n\t\t\t}\n\t\t});\n\t}\n\n\t// if we have a mix of marked_as_instance and non marked_as_instance\n\t// we take all geos that are the type that comes first\n\tprivate _get_points() {\n\t\tif (!this._particles_core_group) {\n\t\t\treturn;\n\t\t}\n\n\t\tlet geometries = this._particles_core_group.core_geometries();\n\t\tconst first_geometry = geometries[0];\n\t\tif (first_geometry) {\n\t\t\tconst type = first_geometry.marked_as_instance();\n\t\t\t// this._use_instancing = type\n\t\t\tconst selected_geometries = [];\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tif (geometry.marked_as_instance() == type) {\n\t\t\t\t\tselected_geometries.push(geometry);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst points = [];\n\t\t\tfor (let geometry of selected_geometries) {\n\t\t\t\tfor (let point of geometry.points()) {\n\t\t\t\t\tpoints.push(point);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn points;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","/**\n * @author yomboprime https://github.com/yomboprime\n *\n * GPUComputationRenderer, based on SimulationRenderer by zz85\n *\n * The GPUComputationRenderer uses the concept of variables. These variables are RGBA float textures that hold 4 floats\n * for each compute element (texel)\n *\n * Each variable has a fragment shader that defines the computation made to obtain the variable in question.\n * You can use as many variables you need, and make dependencies so you can use textures of other variables in the shader\n * (the sampler uniforms are added automatically) Most of the variables will need themselves as dependency.\n *\n * The renderer has actually two render targets per variable, to make ping-pong. Textures from the current frame are used\n * as inputs to render the textures of the next frame.\n *\n * The render targets of the variables can be used as input textures for your visualization shaders.\n *\n * Variable names should be valid identifiers and should not collide with THREE GLSL used identifiers.\n * a common approach could be to use 'texture' prefixing the variable name; i.e texturePosition, textureVelocity...\n *\n * The size of the computation (sizeX * sizeY) is defined as 'resolution' automatically in the shader. For example:\n * #DEFINE resolution vec2( 1024.0, 1024.0 )\n *\n * -------------\n *\n * Basic use:\n *\n * // Initialization...\n *\n * // Create computation renderer\n * var gpuCompute = new GPUComputationRenderer( 1024, 1024, renderer );\n *\n * // Create initial state float textures\n * var pos0 = gpuCompute.createTexture();\n * var vel0 = gpuCompute.createTexture();\n * // and fill in here the texture data...\n *\n * // Add texture variables\n * var velVar = gpuCompute.addVariable( \"textureVelocity\", fragmentShaderVel, pos0 );\n * var posVar = gpuCompute.addVariable( \"texturePosition\", fragmentShaderPos, vel0 );\n *\n * // Add variable dependencies\n * gpuCompute.setVariableDependencies( velVar, [ velVar, posVar ] );\n * gpuCompute.setVariableDependencies( posVar, [ velVar, posVar ] );\n *\n * // Add custom uniforms\n * velVar.material.uniforms.time = { value: 0.0 };\n *\n * // Check for completeness\n * var error = gpuCompute.init();\n * if ( error !== null ) {\n *\t\tconsole.error( error );\n  * }\n *\n *\n * // In each frame...\n *\n * // Compute!\n * gpuCompute.compute();\n *\n * // Update texture uniforms in your visualization materials with the gpu renderer output\n * myMaterial.uniforms.myTexture.value = gpuCompute.getCurrentRenderTarget( posVar ).texture;\n *\n * // Do your rendering\n * renderer.render( myScene, myCamera );\n *\n * -------------\n *\n * Also, you can use utility functions to create ShaderMaterial and perform computations (rendering between textures)\n * Note that the shaders can have multiple input textures.\n *\n * var myFilter1 = gpuCompute.createShaderMaterial( myFilterFragmentShader1, { theTexture: { value: null } } );\n * var myFilter2 = gpuCompute.createShaderMaterial( myFilterFragmentShader2, { theTexture: { value: null } } );\n *\n * var inputTexture = gpuCompute.createTexture();\n *\n * // Fill in here inputTexture...\n *\n * myFilter1.uniforms.theTexture.value = inputTexture;\n *\n * var myRenderTarget = gpuCompute.createRenderTarget();\n * myFilter2.uniforms.theTexture.value = myRenderTarget.texture;\n *\n * var outputRenderTarget = gpuCompute.createRenderTarget();\n *\n * // Now use the output texture where you want:\n * myMaterial.uniforms.map.value = outputRenderTarget.texture;\n *\n * // And compute each frame, before rendering to screen:\n * gpuCompute.doRenderTarget( myFilter1, myRenderTarget );\n * gpuCompute.doRenderTarget( myFilter2, outputRenderTarget );\n *\n *\n *\n * @param {int} sizeX Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {int} sizeY Computation problem size is always 2d: sizeX * sizeY elements.\n * @param {WebGLRenderer} renderer The renderer\n*/\n\nimport {Camera} from 'three/src/cameras/Camera'\nimport {ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat} from 'three/src/constants'\nimport {DataTexture} from 'three/src/textures/DataTexture'\nimport {Mesh} from 'three/src/objects/Mesh'\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry'\nimport {Scene} from 'three/src/scenes/Scene'\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial'\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget'\n// const THREE = {Camera, ClampToEdgeWrapping, FloatType, HalfFloatType, NearestFilter, RGBAFormat, DataTexture, mesh, PlaneBufferGeometry, Scene, ShaderMaterial, WebGLRenderTarget}\n\nvar GPUComputationRenderer = function ( sizeX, sizeY, renderer ) {\n\n\tthis.variables = [];\n\n\tthis.currentTextureIndex = 0;\n\n\tvar scene = new Scene();\n\n\tvar camera = new Camera();\n\tcamera.position.z = 1;\n\n\tvar passThruUniforms = {\n\t\tpassThruTexture: { value: null }\n\t};\n\n\tvar passThruShader = createShaderMaterial( getPassThroughFragmentShader(), passThruUniforms );\n\n\tvar mesh = new Mesh( new PlaneBufferGeometry( 2, 2 ), passThruShader );\n\tscene.add( mesh );\n\n\n\tthis.addVariable = function ( variableName, computeFragmentShader, initialValueTexture ) {\n\n\t\tvar material = this.createShaderMaterial( computeFragmentShader );\n\n\t\tvar variable = {\n\t\t\tname: variableName,\n\t\t\tinitialValueTexture: initialValueTexture,\n\t\t\tmaterial: material,\n\t\t\tdependencies: null,\n\t\t\trenderTargets: [],\n\t\t\twrapS: null,\n\t\t\twrapT: null,\n\t\t\tminFilter: NearestFilter,\n\t\t\tmagFilter: NearestFilter\n\t\t};\n\n\t\tthis.variables.push( variable );\n\n\t\treturn variable;\n\n\t};\n\n\tthis.setVariableDependencies = function ( variable, dependencies ) {\n\n\t\tvariable.dependencies = dependencies;\n\n\t};\n\n\tthis.init = function () {\n\n\t\tif ( ! renderer.capabilities.isWebGL2 &&\n\t\t\t ! renderer.extensions.get( \"OES_texture_float\" ) ) {\n\n\t\t\treturn \"No OES_texture_float support for float textures.\";\n\n\t\t}\n\n\t\tif ( renderer.capabilities.maxVertexTextures === 0 ) {\n\n\t\t\treturn \"No support for vertex shader textures.\";\n\n\t\t}\n\n\t\tfor ( var i = 0; i < this.variables.length; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Creates rendertargets and initialize them with input texture\n\t\t\tvariable.renderTargets[ 0 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tvariable.renderTargets[ 1 ] = this.createRenderTarget( sizeX, sizeY, variable.wrapS, variable.wrapT, variable.minFilter, variable.magFilter );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 0 ] );\n\t\t\tthis.renderTexture( variable.initialValueTexture, variable.renderTargets[ 1 ] );\n\n\t\t\t// Adds dependencies uniforms to the ShaderMaterial\n\t\t\tvar material = variable.material;\n\t\t\tvar uniforms = material.uniforms;\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tfor ( var d = 0; d < variable.dependencies.length; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tif ( depVar.name !== variable.name ) {\n\n\t\t\t\t\t\t// Checks if variable exists\n\t\t\t\t\t\tvar found = false;\n\t\t\t\t\t\tfor ( var j = 0; j < this.variables.length; j ++ ) {\n\n\t\t\t\t\t\t\tif ( depVar.name === this.variables[ j ].name ) {\n\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ( ! found ) {\n\n\t\t\t\t\t\t\treturn \"Variable dependency not found. Variable=\" + variable.name + \", dependency=\" + depVar.name;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tuniforms[ depVar.name ] = { value: null };\n\n\t\t\t\t\t// material.fragmentShader = \"\\nuniform sampler2D \" + depVar.name + \";\\n\" + material.fragmentShader;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.currentTextureIndex = 0;\n\n\t\treturn null;\n\n\t};\n\n\tthis.compute = function () {\n\n\t\tvar currentTextureIndex = this.currentTextureIndex;\n\t\tvar nextTextureIndex = this.currentTextureIndex === 0 ? 1 : 0;\n\n\t\tfor ( var i = 0, il = this.variables.length; i < il; i ++ ) {\n\n\t\t\tvar variable = this.variables[ i ];\n\n\t\t\t// Sets texture dependencies uniforms\n\t\t\tif ( variable.dependencies !== null ) {\n\n\t\t\t\tvar uniforms = variable.material.uniforms;\n\t\t\t\tfor ( var d = 0, dl = variable.dependencies.length; d < dl; d ++ ) {\n\n\t\t\t\t\tvar depVar = variable.dependencies[ d ];\n\n\t\t\t\t\tuniforms[ depVar.name ].value = depVar.renderTargets[ currentTextureIndex ].texture;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Performs the computation for this variable\n\t\t\tthis.doRenderTarget( variable.material, variable.renderTargets[ nextTextureIndex ] );\n\n\t\t}\n\n\t\tthis.currentTextureIndex = nextTextureIndex;\n\n\t};\n\n\tthis.getCurrentRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex ];\n\n\t};\n\n\tthis.getAlternateRenderTarget = function ( variable ) {\n\n\t\treturn variable.renderTargets[ this.currentTextureIndex === 0 ? 1 : 0 ];\n\n\t};\n\n\tfunction addResolutionDefine( materialShader ) {\n\n\t\tmaterialShader.defines.resolution = 'vec2( ' + sizeX.toFixed( 1 ) + ', ' + sizeY.toFixed( 1 ) + \" )\";\n\n\t}\n\tthis.addResolutionDefine = addResolutionDefine;\n\n\n\t// The following functions can be used to compute things manually\n\n\tfunction createShaderMaterial( computeFragmentShader, uniforms ) {\n\n\t\tuniforms = uniforms || {};\n\n\t\tvar material = new ShaderMaterial( {\n\t\t\tuniforms: uniforms,\n\t\t\tvertexShader: getPassThroughVertexShader(),\n\t\t\tfragmentShader: computeFragmentShader\n\t\t} );\n\n\t\taddResolutionDefine( material );\n\n\t\treturn material;\n\n\t}\n\n\tthis.createShaderMaterial = createShaderMaterial;\n\n\tthis.createRenderTarget = function ( sizeXTexture, sizeYTexture, wrapS, wrapT, minFilter, magFilter ) {\n\n\t\tsizeXTexture = sizeXTexture || sizeX;\n\t\tsizeYTexture = sizeYTexture || sizeY;\n\n\t\twrapS = wrapS || ClampToEdgeWrapping;\n\t\twrapT = wrapT || ClampToEdgeWrapping;\n\n\t\tminFilter = minFilter || NearestFilter;\n\t\tmagFilter = magFilter || NearestFilter;\n\n\t\tvar renderTarget = new WebGLRenderTarget( sizeXTexture, sizeYTexture, {\n\t\t\twrapS: wrapS,\n\t\t\twrapT: wrapT,\n\t\t\tminFilter: minFilter,\n\t\t\tmagFilter: magFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\ttype: ( /(iPad|iPhone|iPod)/g.test( navigator.userAgent ) ) ? HalfFloatType : FloatType,\n\t\t\tstencilBuffer: false,\n\t\t\tdepthBuffer: false\n\t\t} );\n\n\t\treturn renderTarget;\n\n\t};\n\n\tthis.createTexture = function () {\n\n\t\tvar data = new Float32Array( sizeX * sizeY * 4 );\n\t\treturn new DataTexture( data, sizeX, sizeY, RGBAFormat, FloatType );\n\n\t};\n\n\tthis.renderTexture = function ( input, output ) {\n\n\t\t// Takes a texture, and render out in rendertarget\n\t\t// input = Texture\n\t\t// output = RenderTarget\n\n\t\tpassThruUniforms.passThruTexture.value = input;\n\n\t\tthis.doRenderTarget( passThruShader, output );\n\n\t\tpassThruUniforms.passThruTexture.value = null;\n\n\t};\n\n\tthis.doRenderTarget = function ( material, output ) {\n\n\t\tvar currentRenderTarget = renderer.getRenderTarget();\n\n\t\tmesh.material = material;\n\t\trenderer.setRenderTarget( output );\n\t\trenderer.render( scene, camera );\n\t\tmesh.material = passThruShader;\n\n\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t};\n\n\t// Shaders\n\n\tfunction getPassThroughVertexShader() {\n\n\t\treturn\t\"void main()\t{\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_Position = vec4( position, 1.0 );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n\tfunction getPassThroughFragmentShader() {\n\n\t\treturn\t\"uniform sampler2D passThruTexture;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"void main() {\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tvec2 uv = gl_FragCoord.xy / resolution.xy;\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"\tgl_FragColor = texture2D( passThruTexture, uv );\\n\" +\n\t\t\t\t\"\\n\" +\n\t\t\t\t\"}\\n\";\n\n\t}\n\n};\n\nexport { GPUComputationRenderer };\n","import {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst POSITION = 'position';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PeakSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1, {range: [-1, 1]});\n}\nconst ParamsConfig = new PeakSopParamsConfig();\n\nexport class PeakSopNode extends TypedSopNode<PeakSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'peak';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tlet core_geometry, point;\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((child_object) => {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = (child_object as Mesh).geometry as BufferGeometry) != null) {\n\t\t\t\t\tcore_geometry = new CoreGeometry(geometry);\n\t\t\t\t\tfor (point of core_geometry.points()) {\n\t\t\t\t\t\tconst normal = point.normal();\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tconst new_position = position.clone().add(normal.multiplyScalar(this.pv.amount));\n\t\t\t\t\t\tpoint.set_position(new_position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\t\t\tconst attrib = core_geometry.geometry().getAttribute(POSITION) as BufferAttribute;\n\t\t\t\t\t\tattrib.needsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst ROTATE_START = new Vector3(0, 0, 1);\nconst ROTATE_END = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\tuse_segments_count = ParamConfig.BOOLEAN(0);\n\tstep_size = ParamConfig.FLOAT(1, {visible_if: {use_segments_count: 0}});\n\tsegments = ParamConfig.VECTOR2([1, 1], {visible_if: {use_segments_count: 1}});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\n\nexport class PlaneSopNode extends TypedSopNode<PlaneSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'plane';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create plane from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\t_cook_without_input() {\n\t\tconst geometry = this._create_plane(this.pv.size);\n\n\t\t// convert to buffer geo, as some render problems can occur otherwise\n\t\t// geometry = BufferGeometryUtils.mergeBufferGeometries([geometry])\n\t\t// console.log(geometry, geometry.isBufferGeometry)\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tconst matrix = this._core_transform.translation_matrix(this.pv.center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\tthis.set_geometry(geometry);\n\t}\n\t_cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = new Vector3();\n\t\tbbox.getSize(size);\n\t\tconst center = new Vector3();\n\t\tbbox.getCenter(center);\n\n\t\t// TODO: rotate the input geo to get the accurate bbox\n\t\tconst size2d = new Vector2(size.x, size.z);\n\t\tconst geometry = this._create_plane(size2d);\n\n\t\tthis._core_transform.rotate_geometry(geometry, ROTATE_START, ROTATE_END);\n\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix4(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t_create_plane(size: Vector2) {\n\t\tlet segments_count;\n\t\tsize = size.clone();\n\t\tif (this.pv.use_segments_count) {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(this.pv.segments.x),\n\t\t\t\ty: Math.floor(this.pv.segments.y),\n\t\t\t};\n\t\t} else {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(size.x / this.pv.step_size),\n\t\t\t\ty: Math.floor(size.y / this.pv.step_size),\n\t\t\t};\n\t\t\tsize.x = segments_count.x * this.pv.step_size;\n\t\t\tsize.y = segments_count.y * this.pv.step_size;\n\t\t}\n\t\treturn new PlaneBufferGeometry(size.x, size.y, segments_count.x, segments_count.y);\n\t}\n}\n","// import lodash_map from 'lodash/map'\n\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreObject} from '../../../core/geometry/Object';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BooleanParam} from '../../params/Boolean';\nimport {FloatParam} from '../../params/Float';\n\nconst POSITION_ATTRIB_NAME = 'position';\n\ntype ValueArrayByName = Map<string, number[]>;\ntype ComponentOffset = 0 | 1 | 2;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass PointSopParamsConfig extends NodeParamsConfig {\n\tupdate_x = ParamConfig.BOOLEAN(0);\n\tx = ParamConfig.FLOAT('@P.x', {\n\t\tvisible_if: {update_x: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0);\n\ty = ParamConfig.FLOAT('@P.y', {\n\t\tvisible_if: {update_y: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0);\n\tz = ParamConfig.FLOAT('@P.z', {\n\t\tvisible_if: {update_z: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new PointSopParamsConfig();\n\nexport class PointSopNode extends TypedSopNode<PointSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to move'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('dot-circle');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tawait this._eval_expressions_for_core_group(core_group);\n\t}\n\n\t// group.traverse (object)=>\n\t// \tif (geometry = object.geometry)?\n\t// \t\tthis._eval_expressions(geometry)\n\t// \t\tgeometry.computeVertexNormals()\n\n\tasync _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\t// this._allocate_arrays(core_objects)\n\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\n\t\tif (this.pv.update_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\n\t\tconst geometries = core_group.geometries();\n\t\tfor (let geometry of geometries) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tconst attrib = geometry.getAttribute(POSITION_ATTRIB_NAME) as BufferAttribute;\n\t\t\t\tattrib.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(POSITION_ATTRIB_NAME).array as number[];\n\n\t\tconst tmp_array_x = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_x,\n\t\t\tthis.p.x,\n\t\t\tthis.pv.x,\n\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t0\n\t\t);\n\t\tconst tmp_array_y = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_y,\n\t\t\tthis.p.y,\n\t\t\tthis.pv.y,\n\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t1\n\t\t);\n\t\tconst tmp_array_z = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_z,\n\t\t\tthis.p.z,\n\t\t\tthis.pv.z,\n\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t2\n\t\t);\n\n\t\tif (tmp_array_x) {\n\t\t\tthis._commit_tmp_values(tmp_array_x, array, 0);\n\t\t}\n\t\tif (tmp_array_y) {\n\t\t\tthis._commit_tmp_values(tmp_array_y, array, 1);\n\t\t}\n\t\tif (tmp_array_z) {\n\t\t\tthis._commit_tmp_values(tmp_array_z, array, 2);\n\t\t}\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\tdo_update_param: BooleanParam,\n\t\tvalue_param: FloatParam,\n\t\tparam_value: number,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst do_update = do_update_param;\n\t\tconst param = value_param;\n\n\t\tlet tmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length, offset);\n\t\tif (do_update.value) {\n\t\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\ttmp_array[point.index] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\ttmp_array[point.index] = param_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid.get(uuid);\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\t\treturn new_array;\n\t\t\t} else {\n\t\t\t\treturn current_array;\n\t\t\t}\n\t\t} else {\n\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tprivate _array_for_component(geometry: BufferGeometry, points_count: number, offset: ComponentOffset) {\n\t\tconst new_array = new Array<number>(points_count);\n\t\tconst src_array = geometry.getAttribute(POSITION_ATTRIB_NAME).array;\n\t\tfor (let i = 0; i < new_array.length; i++) {\n\t\t\tnew_array[i] = src_array[i * 3 + offset];\n\t\t}\n\t\treturn new_array;\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\nimport {CoreTransform} from '../../../core/Transform';\nimport {CoreGeometryUtilCircle} from '../../../core/geometry/util/Circle';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {TubeBufferGeometry} from 'three/src/geometries/TubeGeometry';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n// import {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst DEFAULT_R = new Vector3(0, 0, 0);\nconst DEFAULT_S = new Vector3(1, 1, 1);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nclass PolywireSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(8, {\n\t\trange: [3, 20],\n\t\trange_locked: [true, false],\n\t});\n\tclosed = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new PolywireSopParamsConfig();\n\nexport class PolywireSopNode extends TypedSopNode<PolywireSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'polywire';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create tubes from'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tprivate _geometries: BufferGeometry[] = [];\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._geometries = [];\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (object instanceof LineSegments) {\n\t\t\t\tthis._create_tube(object);\n\t\t\t}\n\t\t}\n\n\t\t//if @_param_merge\n\t\t//geometries = lodash_map @_geometries, (object)->object.geometry\n\t\tconst merged_geometry = CoreGeometry.merge_geometries(this._geometries);\n\t\tfor (let geometry of this._geometries) {\n\t\t\tgeometry.dispose();\n\t\t}\n\t\tif (merged_geometry) {\n\t\t\tconst object = this.create_object(merged_geometry);\n\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n\t//else\n\t//\tthis.set_objects( @_objects )\n\n\t_create_tube(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst wrapper = new CoreGeometry(geometry);\n\t\tconst points = wrapper.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\n\t\tfor (let curve_point_indices of accumulated_curve_point_indices) {\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tthis._create_tube_from_points(current_points);\n\t\t}\n\t}\n\n\t_create_tube_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positions = points.map((point) => point.attrib_value('position'));\n\n\t\tconst circle_template = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments_radial);\n\t\tconst circles: BufferGeometry[] = [];\n\t\tconst scale = 1;\n\t\tfor (let position of positions) {\n\t\t\tconst t = position;\n\t\t\tconst matrix = this._core_transform.matrix(t, DEFAULT_R, DEFAULT_S, scale);\n\n\t\t\tconst new_circle = circle_template.clone();\n\t\t\tnew_circle.applyMatrix4(matrix);\n\t\t\tcircles.push(new_circle);\n\t\t}\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tconst circle = circles[i];\n\t\t\t\tconst prev_circle = circles[i - 1];\n\n\t\t\t\tconst geometry = this._skin(prev_circle, circle);\n\t\t\t\tthis._geometries.push(geometry);\n\t\t\t}\n\t\t}\n\t}\n\n\t//this.set_geometries(circles, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS)\n\n\t// curve = new CatmullRomCurve3(positions)\n\t// segments_count = positions.length-1\n\n\t// geometry = new TubeBufferGeometry(\n\t// \tcurve,\n\t// \tsegments_count,\n\t// \t@_param_radius,\n\t// \t@_param_segments_radial,\n\t// \t@_param_closed\n\t// \t)\n\n\t// object = this.create_object(geometry)\n\t// @_objects.push(object)\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Raycaster, Intersection} from 'three/src/core/Raycaster';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {DoubleSide} from 'three/src/constants';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\nconst MAT_DOUBLE_SIDED = new MeshBasicMaterial({\n\tside: DoubleSide,\n});\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass RaySopParamsConfig extends NodeParamsConfig {\n\tuse_normals = ParamConfig.BOOLEAN(1);\n\tdirection = ParamConfig.VECTOR3([0, -1, 0], {\n\t\tvisible_if: {use_normals: 0},\n\t});\n\ttransfer_face_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new RaySopParamsConfig();\n\nexport class RaySopNode extends TypedSopNode<RaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ray';\n\t}\n\n\t// _material_by_object_uuid: MaterialByString\n\tprivate _bound_assign_mat = this._assign_double_sided_material_to_object.bind(this); //(Object3D)=>void;\n\tprivate _raycaster = new Raycaster();\n\n\tstatic double_sided_material() {\n\t\treturn MAT_DOUBLE_SIDED;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to move', 'geometry to ray onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.FROM_NODE,\n\t\t\tInputCloneMode.ALWAYS, // to assign double sided mat\n\t\t]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_collision = input_contents[1];\n\n\t\tthis.ray(core_group, core_group_collision);\n\t}\n\n\tray(core_group: CoreGroup, core_group_collision: CoreGroup) {\n\t\t// this._material_by_object_uuid = {}\n\t\tthis._assign_double_sided_material_to_core_group(core_group_collision);\n\n\t\tlet direction: Vector3, first_intersect: Intersection;\n\t\tfor (let point of core_group.points()) {\n\t\t\tdirection = this.pv.use_normals ? point.normal() : this.pv.direction;\n\t\t\tthis._raycaster.set(point.position(), direction);\n\n\t\t\tfirst_intersect = this._raycaster.intersectObjects(core_group_collision.objects(), true)[0];\n\t\t\tif (first_intersect) {\n\t\t\t\tpoint.set_position(first_intersect.point);\n\t\t\t\tif (this.pv.transfer_face_normals && first_intersect.face) {\n\t\t\t\t\tpoint.set_normal(first_intersect.face.normal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_assign_double_sided_material_to_core_group(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse(this._bound_assign_mat);\n\t\t}\n\t}\n\t_assign_double_sided_material_to_object(object: Object3D) {\n\t\t// this._material_by_object_uuid[object.uuid] = object.material\n\t\t(object as Mesh).material = RaySopNode.double_sided_material();\n\t}\n\n\t// average_normals(geometry){\n\t// \tconst normals = [];\n\t// \tconst vertex_index_names = ['a', 'b', 'c'];\n\t// \tlodash_each(geometry.faces, face=> {\n\t// \t\treturn lodash_each(vertex_index_names, (vertex_index_name, i)=> {\n\t// \t\t\tconst vertex_index = face[vertex_index_name];\n\t// \t\t\tif (normals[vertex_index] == null) { normals[vertex_index] = []; }\n\t// \t\t\treturn normals[vertex_index].push(face.vertexNormals[i].clone());\n\t// \t\t});\n\t// \t});\n\n\t// \tlodash_each(normals, function(normal_group, i){\n\t// \t\tconst average = new Vector3(\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'x')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'y')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'z')) / normal_group.length)\n\t// \t\t);\n\t// \t\treturn normals[i] = average;\n\t// \t});\n\n\t// \treturn normals;\n\t// }\n}\n","import {LineSegments} from 'three/src/objects/LineSegments';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\n// import {CubicBezierCurve3} from 'three/src/extras/curves/CubicBezierCurve3';\n// import {LineCurve3} from 'three/src/extras/curves/LineCurve3';\n// import {QuadraticBezierCurve3} from 'three/src/extras/curves/QuadraticBezierCurve3';\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_map from 'lodash/map';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometry} from '../../../core/geometry/Geometry';\n\nexport enum METHOD {\n\tPOINTS_COUNT = 'points_count',\n\tSEGMENT_LENGTH = 'segment_length',\n}\nexport const METHODS = [METHOD.POINTS_COUNT, METHOD.SEGMENT_LENGTH];\n\n// matches threejs curve type in CatmullRomCurve3.js\nexport enum CURVE_TYPE {\n\tCENTRIPETAL = 'centripetal',\n\tCHORDAL = 'chordal',\n\tCATMULLROM = 'catmullrom',\n}\nexport const CURVE_TYPES = [CURVE_TYPE.CENTRIPETAL, CURVE_TYPE.CHORDAL, CURVE_TYPE.CATMULLROM];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CorePoint} from '../../../core/geometry/Point';\nimport {TypeAssert} from '../../poly/Assert';\nclass ResampleSopParamsConfig extends NodeParamsConfig {\n\tmethod = ParamConfig.INTEGER(METHODS.indexOf(METHOD.POINTS_COUNT), {\n\t\tmenu: {\n\t\t\tentries: METHODS.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcurve_type = ParamConfig.INTEGER(CURVE_TYPES.indexOf(CURVE_TYPE.CATMULLROM), {\n\t\trange: [0, 2],\n\t\trange_locked: [true, true],\n\t\tmenu: {\n\t\t\tentries: CURVE_TYPES.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\ttension = ParamConfig.FLOAT(0.01, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.POINTS_COUNT)},\n\t});\n\tsegment_length = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.SEGMENT_LENGTH)},\n\t});\n}\nconst ParamsConfig = new ResampleSopParamsConfig();\n\nexport class ResampleSopNode extends TypedSopNode<ResampleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'resample';\n\t}\n\n\t// private _objects: Object3D\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\t// this._objects = [];\n\t\tconst resampled_objects = [];\n\t\tif (this.pv.points_count >= 2) {\n\t\t\tconst core_objects = core_group.core_objects();\n\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\tconst object = core_object.object();\n\t\t\t\tif (object instanceof LineSegments) {\n\t\t\t\t\tconst resampled_object = this._resample(object);\n\t\t\t\t\tresampled_objects.push(resampled_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if (this.pv.merge) {\n\t\t// \tconst geometries = lodash_map(this._objects, object => object.geometry);\n\t\t// \tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t// \tlodash_each(geometries, geometry => geometry.dispose());\n\t\t// \tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// \tthis.set_object( object );\n\t\t// } else {\n\t\tthis.set_objects(resampled_objects);\n\t\t// }\n\t}\n\n\t_resample(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst points = core_geometry.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\t\t// accumulated_curve_point_indices = [accumulated_curve_point_indices[0]]\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tfor (let i = 0; i < accumulated_curve_point_indices.length; i++) {\n\t\t\tconst curve_point_indices = accumulated_curve_point_indices[i];\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tconst geometry = this._create_curve_from_points(current_points);\n\t\t\tif (geometry) {\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t}\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\treturn object;\n\t}\n\n\t_create_curve_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst old_curve_positions = lodash_map(points, (point) => point.attrib_value('position'));\n\t\tconst closed = false;\n\t\tconst curve_type = CURVE_TYPES[this.pv.curve_type];\n\t\tconst tension = this.pv.tension;\n\t\tconst curve = new CatmullRomCurve3(old_curve_positions, closed, curve_type, tension);\n\t\t// const curve = new LineCurve3(old_curve_positions);\n\t\t// const curve = new CubicBezierCurve3(old_curve_positions);\n\t\t// const curve = new QuadraticBezierCurve3(old_curve_positions);\n\n\t\t// TODO: could I detect when a curve has points that are very close\n\t\t// and prevent a curve to go too far\n\t\tconst new_curve_points = this._get_points_from_curve(curve);\n\n\t\tlet positions = [];\n\t\tconst indices = [];\n\n\t\tfor (let i = 0; i < new_curve_points.length; i++) {\n\t\t\tconst point_position = new_curve_points[i];\n\n\t\t\tconst position = point_position.toArray();\n\t\t\tpositions.push(position);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1);\n\t\t\t\tindices.push(i);\n\t\t\t}\n\t\t}\n\n\t\tpositions = lodash_flatten(positions);\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\n\t\treturn geometry;\n\t\t// const object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// this._objects.push(object);\n\t}\n\n\t_get_points_from_curve(curve: CatmullRomCurve3) {\n\t\tconst method = METHODS[this.pv.method];\n\t\tswitch (method) {\n\t\t\tcase METHOD.POINTS_COUNT:\n\t\t\t\treturn curve.getSpacedPoints(Math.max(2, this.pv.points_count));\n\t\t\tcase METHOD.SEGMENT_LENGTH:\n\t\t\t\tvar length = curve.getLength();\n\n\t\t\t\tvar points_count = this.pv.segment_length !== 0 ? 1 + length / this.pv.segment_length : 2;\n\n\t\t\t\tpoints_count = Math.max(2, points_count);\n\n\t\t\t\treturn curve.getSpacedPoints(points_count);\n\t\t}\n\t\tTypeAssert.unreachable(method);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {BufferAttribute, BufferGeometry};\nimport lodash_range from 'lodash/range';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreConstant} from '../../../core/geometry/Constant';\nimport {CoreMath} from '../../../core/math/_Module';\nimport {CoreIterator} from '../../../core/Iterator';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass ScatterSopParamsConfig extends NodeParamsConfig {\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tseed = ParamConfig.INTEGER(0, {\n\t\trange: [0, 100],\n\t\trange_locked: [false, false],\n\t});\n\ttransfer_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_transfer = ParamConfig.STRING('normal', {\n\t\tvisible_if: {transfer_attributes: 1},\n\t});\n\tadd_id_attribute = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new ScatterSopParamsConfig();\n\nexport class ScatterSopNode extends TypedSopNode<ScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scatter';\n\t}\n\n\t// private _positions: number[];\n\t// private _areas_thresholds: number[];\n\t// private _attrib_values_by_name = {};\n\t// private _area_sum: number;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to scatter points onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// const objects = input_contents[0] //.group({clone: false})\n\t\tconst core_group = input_contents[0]; //CoreGroup.from_objects(objects)\n\t\tlet faces = core_group.faces();\n\t\t// const areas_by_face_index = []\n\t\tconst areas_thresholds: number[] = [];\n\t\tlet area_sum = 0;\n\t\tconst area_by_face_index: Map<number, number> = new Map();\n\n\t\tfor (let face of faces) {\n\t\t\tconst area = face.area;\n\t\t\tarea_by_face_index.set(face.index, area);\n\t\t}\n\t\tconst sorted_faces = lodash_sortBy(faces, (f) => {\n\t\t\treturn area_by_face_index.get(f.index);\n\t\t});\n\n\t\tlet i = 0;\n\t\tfor (let face of sorted_faces) {\n\t\t\tarea_sum += area_by_face_index.get(face.index) as number;\n\t\t\tareas_thresholds[i] = area_sum;\n\t\t\ti++;\n\t\t}\n\n\t\tconst positions: number[] = [];\n\t\tlet attrib_names: string[] = [];\n\t\tif (this.pv.transfer_attributes) {\n\t\t\tattrib_names = core_group.attrib_names_matching_mask(this.pv.attributes_to_transfer);\n\t\t}\n\n\t\tconst attrib_values_by_name: Map<string, number[]> = new Map();\n\t\tconst attrib_sizes_by_name: Map<string, number> = new Map();\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tattrib_values_by_name.set(attrib_name, []);\n\t\t\tattrib_sizes_by_name.set(attrib_name, core_group.attrib_size(attrib_name));\n\t\t}\n\n\t\tconst iterator = new CoreIterator();\n\t\t// await iterator.start_with_count(this.pv.points_count, this._add_point.bind(this))\n\t\tawait iterator.start_with_count(this.pv.points_count, (point_index: number) => {\n\t\t\tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * area_sum;\n\n\t\t\tfor (let face_index = 0; face_index < areas_thresholds.length; face_index++) {\n\t\t\t\tconst areas_threshold = areas_thresholds[face_index];\n\n\t\t\t\tif (rand <= areas_threshold) {\n\t\t\t\t\tconst face = sorted_faces[face_index];\n\t\t\t\t\tconst position = face.random_position(rand);\n\t\t\t\t\tposition.toArray(positions, positions.length);\n\n\t\t\t\t\tfor (let attrib_name of attrib_names) {\n\t\t\t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t\t\t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.push(attrib_value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrib_value.toArray(\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name),\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.length\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// for(let point_index=0; point_index<this.pv.points_count; point_index++){\n\n\t\t// \tconst rand = CoreMath.rand_float(this.pv.seed+point_index) * area_sum\n\n\t\t// \tfor(let face_index=0; face_index<areas_thresholds.length; face_index++){\n\n\t\t// \t\tconst areas_threshold = areas_thresholds[face_index]\n\n\t\t// \t\tif(rand <= areas_threshold){\n\t\t// \t\t\tconst face = sorted_faces[face_index]\n\t\t// \t\t\tconst position = face.random_position(rand)\n\t\t// \t\t\tposition.toArray(positions, positions.length)\n\n\t\t// \t\t\tfor(let attrib_name of attrib_names){\n\t\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position)\n\t\t// \t\t\t\tif (lodash_isNumber(attrib_value)){\n\t\t// \t\t\t\t\tattrib_values_by_name[attrib_name].push(attrib_value)\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\tattrib_value.toArray(\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name],\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name].length\n\t\t// \t\t\t\t\t)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\n\t\t// \t\t\tbreak;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tgeometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(attrib_values_by_name.get(attrib_name)!),\n\t\t\t\t\tattrib_sizes_by_name.get(attrib_name)!\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (this.pv.add_id_attribute) {\n\t\t\tconst ids = lodash_range(this.pv.points_count);\n\t\t\tgeometry.setAttribute('id', new THREE.BufferAttribute(new Float32Array(ids), 1));\n\t\t}\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n\n\t// private _add_point(point_index: number) {\n\t// \tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * this._area_sum;\n\n\t// \tfor (let face_index = 0; face_index < this._areas_thresholds.length; face_index++) {\n\t// \t\tconst areas_threshold = this._areas_thresholds[face_index];\n\n\t// \t\tif (rand <= areas_threshold) {\n\t// \t\t\tconst face = this._sorted_faces[face_index];\n\t// \t\t\tconst position = face.random_position(rand);\n\t// \t\t\tposition.toArray(positions, positions.length);\n\n\t// \t\t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t// \t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t// \t\t\t\t\tthis._attrib_values_by_name[attrib_name].push(attrib_value);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tattrib_value.toArray(\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name],\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name].length\n\t// \t\t\t\t\t);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass ShadowsSopParamsConfig extends NodeParamsConfig {\n\tcast_shadow = ParamConfig.BOOLEAN(1);\n\treceive_shadow = ParamConfig.BOOLEAN(1);\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new ShadowsSopParamsConfig();\n\nexport class ShadowsSopNode extends TypedSopNode<ShadowsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'shadows';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change shadows properties of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\tchild.castShadow = this.pv.cast_shadow;\n\t\t\t\t\tchild.receiveShadow = this.pv.receive_shadow;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobject.castShadow = this.pv.cast_shadow;\n\t\t\t\tobject.receiveShadow = this.pv.receive_shadow;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(core_group.objects());\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_reverse from 'lodash/reverse';\nimport lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreGeometryUtilCurve} from '../../../core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from '../../../core/geometry/operation/Skin';\nimport {CoreGroup} from '../../../core/geometry/Group';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nclass SkinSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new SkinSopParamsConfig();\n\nexport class SkinSopNode extends TypedSopNode<SkinSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'skin';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create polygons from', 'if used, lines from both inputs will be used'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tswitch (lodash_compact(this.io.inputs.inputs()).length) {\n\t\t\tcase 1:\n\t\t\t\treturn this.process_one_input(input_contents);\n\t\t\tcase 2:\n\t\t\t\treturn this.process_two_inputs(input_contents);\n\t\t\tdefault:\n\t\t\t\treturn this.states.error.set('inputs count not valid');\n\t\t}\n\t}\n\n\tprocess_one_input(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tif (line_segments0) {\n\t\t\tconst first_line_segment = line_segments0[0] as Mesh;\n\t\t\tif (first_line_segment) {\n\t\t\t\tconst src_geometries = CoreGeometryUtilCurve.line_segment_to_geometries(\n\t\t\t\t\tfirst_line_segment.geometry as BufferGeometry\n\t\t\t\t);\n\t\t\t\tsrc_geometries.forEach((src_geometry, i) => {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tconst prev_src_geometry = src_geometries[i - 1];\n\n\t\t\t\t\t\tconst geometry = this._skin(prev_src_geometry, src_geometry);\n\t\t\t\t\t\tgeometries.push(geometry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\tprocess_two_inputs(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\t\tconst line_segments1 = this._get_line_segments(core_group1);\n\t\tconst line_segments = lodash_reverse(lodash_sortBy([line_segments0, line_segments1], (array) => array.length));\n\t\tconst smallest_array = line_segments[0];\n\t\tconst largest_array = line_segments[1];\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tsmallest_array.forEach((line_segment, i) => {\n\t\t\tconst other_line_segment = largest_array[i];\n\n\t\t\tif (line_segment != null && other_line_segment != null) {\n\t\t\t\tconst geo = (line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst other_geo = (other_line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst geometry = this._skin(geo, other_geo);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t});\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\t_get_line_segments(core_group: CoreGroup) {\n\t\treturn core_group.objects().filter((child) => (child as LineSegments).isLineSegments);\n\t}\n\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\t// TODO: maybe instead of doing this,\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {IcosahedronBufferGeometry} from 'three/src/geometries/IcosahedronGeometry';\nimport {TypedSopNode} from './_Base';\n\nenum SphereType {\n\tDEFAULT = 'default',\n\tISOCAHEDRON = 'isocahedron',\n}\ntype SphereTypes = {[key in SphereType]: number};\nconst SPHERE_TYPE: SphereTypes = {\n\tdefault: 0,\n\tisocahedron: 1,\n};\nconst SPHERE_TYPES: Array<SphereType> = [SphereType.DEFAULT, SphereType.ISOCAHEDRON];\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {CoreGroup} from '../../../core/geometry/Group';\nclass SphereSopParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(SPHERE_TYPE.default, {\n\t\tmenu: {\n\t\t\tentries: SPHERE_TYPES.map((name) => {\n\t\t\t\treturn {name: name, value: SPHERE_TYPE[name]};\n\t\t\t}),\n\t\t},\n\t});\n\tradius = ParamConfig.FLOAT(1, {visible_if: {type: SPHERE_TYPE.default}});\n\tresolution = ParamConfig.VECTOR2([8, 6], {visible_if: {type: SPHERE_TYPE.default}});\n\topen = ParamConfig.BOOLEAN(0, {visible_if: {type: SPHERE_TYPE.default}});\n\tangle_range_x = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tangle_range_y = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tdetail = ParamConfig.INTEGER(1, {\n\t\trange: [0, 5],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {type: SPHERE_TYPE.isocahedron},\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new SphereSopParamsConfig();\n\nexport class SphereSopNode extends TypedSopNode<SphereSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'sphere';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\tprivate _cook_without_input() {\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max\n\t\t\t.clone()\n\t\t\t.add(bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\n\t\tconst geometry = this._create_required_geometry();\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tgeometry.translate(center.x, center.y, center.z);\n\t\tgeometry.scale(size.x, size.y, size.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _create_required_geometry() {\n\t\tif (this.pv.type == SPHERE_TYPE.default) {\n\t\t\treturn this._create_default_sphere();\n\t\t} else {\n\t\t\treturn this._create_default_isocahedron();\n\t\t}\n\t}\n\n\tprivate _create_default_sphere() {\n\t\tif (this.pv.open) {\n\t\t\treturn new SphereBufferGeometry(\n\t\t\t\tthis.pv.radius,\n\t\t\t\tthis.pv.resolution.x,\n\t\t\t\tthis.pv.resolution.y,\n\t\t\t\tthis.pv.angle_range_x.x,\n\t\t\t\tthis.pv.angle_range_x.y,\n\t\t\t\tthis.pv.angle_range_y.x,\n\t\t\t\tthis.pv.angle_range_y.y\n\t\t\t);\n\t\t} else {\n\t\t\treturn new SphereBufferGeometry(this.pv.radius, this.pv.resolution.x, this.pv.resolution.y);\n\t\t}\n\t}\n\t_create_default_isocahedron() {\n\t\treturn new IcosahedronBufferGeometry(this.pv.radius, this.pv.detail);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nconst INPUT_NAME = 'geometry to switch to';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nclass SwitchSopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchSopParamsConfig();\n\nexport class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_core_group(container.core_content());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import lodash_range from 'lodash/range';\n\n// import {CoreFont} from '../../../Core/Font'\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from '../../../core/geometry/Constant';\n\nimport {TextBufferGeometry} from 'three/src/geometries/TextGeometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {ShapeBufferGeometry} from 'three/src/geometries/ShapeGeometry';\nimport {FontLoader} from 'three/src/loaders/FontLoader';\nimport {Font} from 'three/src/extras/core/Font';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Path} from 'three/src/extras/core/Path';\nimport {Shape} from 'three/src/extras/core/Shape';\n\nimport {BufferGeometryUtils} from '../../../../modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nvar opentype = require('opentype.js');\n\nimport {TTFLoader} from '../../../../modules/three/examples/jsm/loaders/TTFLoader';\nimport {SVGLoader} from '../../../../modules/three/examples/jsm/loaders/SVGLoader';\n\nconst DEFAULT_URL = '/fonts/droid_sans_regular.typeface.json';\n\ndeclare global {\n\tinterface Window {\n\t\topentype: any;\n\t}\n}\n\n// const DEFAULT_PARAMS = {\n// \tsize: 1,\n// \theight: 0.1,\n// \tcurveSegments: 1\n// };\n\nexport enum TEXT_TYPE {\n\tMESH = 'mesh',\n\tFLAT = 'flat',\n\tLINE = 'line',\n\tSTROKE = 'stroke',\n}\nexport const TEXT_TYPES: Array<TEXT_TYPE> = [TEXT_TYPE.MESH, TEXT_TYPE.FLAT, TEXT_TYPE.LINE, TEXT_TYPE.STROKE];\n\ninterface FontByUrl {\n\t[propName: string]: Font;\n}\n\nconst GENERATION_ERROR_MESSAGE = `failed to generate geometry. Try to remove some characters`;\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TextSopParamsConfig extends NodeParamsConfig {\n\tfont = ParamConfig.STRING('');\n\ttext = ParamConfig.STRING('polygonjs', {multiline: true});\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: TEXT_TYPES.map((type, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: type,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tsize = ParamConfig.FLOAT(1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n\textrude = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tsegments = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tstroke_width = ParamConfig.FLOAT(0.02, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.STROKE),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new TextSopParamsConfig();\n\nexport class TextSopNode extends TypedSopNode<TextSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'text';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['loaders/TTFLoader', 'loaders/SVGLoader'];\n\t// }\n\n\tprivate _font_loader: FontLoader = new FontLoader();\n\tprivate _ttf_loader: TTFLoader | undefined;\n\tprivate _svg_loader: typeof SVGLoader | undefined;\n\tprivate _loaded_fonts: FontByUrl = {};\n\n\tinitialize_node() {}\n\n\tasync cook() {\n\t\ttry {\n\t\t\tthis._loaded_fonts[this.pv.font] = this._loaded_fonts[this.pv.font] || (await this._load_url(this.pv.font));\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(`count not load font (${this.pv.font})`);\n\t\t\treturn;\n\t\t}\n\t\tconst font = this._loaded_fonts[this.pv.font];\n\t\tif (font) {\n\t\t\tswitch (TEXT_TYPES[this.pv.type]) {\n\t\t\t\tcase TEXT_TYPE.MESH:\n\t\t\t\t\treturn this._create_geometry_from_type_mesh(font);\n\t\t\t\tcase TEXT_TYPE.FLAT:\n\t\t\t\t\treturn this._create_geometry_from_type_flat(font);\n\t\t\t\tcase TEXT_TYPE.LINE:\n\t\t\t\t\treturn this._create_geometry_from_type_line(font);\n\t\t\t\tcase TEXT_TYPE.STROKE:\n\t\t\t\t\treturn this._create_geometry_from_type_stroke(font);\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('type is not valid');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_mesh(font: Font) {\n\t\tconst text = this.displayed_text();\n\n\t\tconst parameters = {\n\t\t\tfont: font,\n\t\t\tsize: this.pv.size,\n\t\t\theight: this.pv.extrude,\n\t\t\tcurveSegments: this.pv.segments,\n\t\t};\n\n\t\ttry {\n\t\t\tconst geometry = new TextBufferGeometry(text, parameters);\n\t\t\tif (!geometry.index) {\n\t\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t\t}\n\t\t\tthis.set_geometry(geometry);\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_flat(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tvar geometry = new ShapeBufferGeometry(shapes);\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n\tprivate _create_geometry_from_type_line(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\tconst positions = [];\n\t\t\tconst indices = [];\n\t\t\tlet current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\tconst point = points[j];\n\t\t\t\t\tpositions.push(point.x);\n\t\t\t\t\tpositions.push(point.y);\n\t\t\t\t\tpositions.push(0);\n\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\tif (j > 0 && j < points.length - 1) {\n\t\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_index += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.setIndex(indices);\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\tprivate async _create_geometry_from_type_stroke(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\t// const color = new Color( 0xffffff );\n\t\t\tthis._svg_loader = this._svg_loader || (await this._load_svg_loader());\n\t\t\t// TODO: typescript: correct definition for last 3 optional args\n\t\t\tvar style = this._svg_loader.getStrokeStyle(this.pv.stroke_width, 'white', 'miter', 'butt', 4);\n\t\t\tconst geometries = [];\n\n\t\t\t// const positions = [];\n\t\t\t// const indices = [];\n\t\t\t// let current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t// TODO: typescript: correct definition for points, arcDivisions, and minDistance\n\t\t\t\tconst arcDivisions = 12;\n\t\t\t\tconst minDistance = 0.001;\n\t\t\t\tconst geometry = this._svg_loader.pointsToStroke(\n\t\t\t\t\t(<unknown>points) as Vector3[],\n\t\t\t\t\tstyle,\n\t\t\t\t\tarcDivisions,\n\t\t\t\t\tminDistance\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\t\tthis.set_geometry(merged_geometry); //, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\n\tprivate shapes_from_font(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tconst holeShapes: Path[] = [];\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tif (shape.holes && shape.holes.length > 0) {\n\t\t\t\t\tfor (let j = 0; j < shape.holes.length; j++) {\n\t\t\t\t\t\tconst hole = shape.holes[j];\n\t\t\t\t\t\tholeShapes.push(hole);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshapes.push.apply(shapes, holeShapes as Shape[]);\n\t\t\treturn shapes;\n\t\t}\n\t}\n\n\tprivate _get_shapes(font: Font) {\n\t\tconst text = this.displayed_text();\n\t\ttry {\n\t\t\tconst shapes = font.generateShapes(text, this.pv.size);\n\t\t\treturn shapes;\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate displayed_text(): string {\n\t\treturn this.pv.text || '';\n\t}\n\n\t// _create_shape(font){\n\t// \tconst shapes = font.generateShapes( this.displayed_text(), 100 );\n\t// \tvar geometry = new ShapeBufferGeometry( shapes );\n\t// \treturn geometry\n\t// \t// geometry.computeBoundingBox();\n\t// \t// xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\t// \t// geometry.translate( xMid, 0, 0 );\n\t// \t// make shape ( N.B. edge view not visible )\n\t// \t// text = new Mesh( geometry, matLite );\n\t// \t// text.position.z = - 150;\n\t// }\n\n\tprivate _load_url(url: string) {\n\t\tif (url === '') {\n\t\t\turl = DEFAULT_URL;\n\t\t}\n\t\tconst elements1 = url.split('?')[0];\n\t\tconst elements2 = elements1.split('.');\n\t\tconst ext = elements2[elements2.length - 1];\n\t\turl = `${url}?${Date.now()}`;\n\t\tswitch (ext) {\n\t\t\tcase 'ttf': {\n\t\t\t\treturn this._load_ttf(url);\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treturn this._load_json(url);\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _load_ttf(url: string): Promise<Font> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._ttf_loader = this._ttf_loader || (await this._load_ttf_loader());\n\t\t\twindow.opentype = opentype;\n\t\t\tthis._ttf_loader.load(\n\t\t\t\turl,\n\t\t\t\t(fnt: object) => {\n\t\t\t\t\tconst parsed = this._font_loader.parse(fnt);\n\t\t\t\t\t// make sure not to delete opentype from window, as it may be required by other nodes\n\t\t\t\t\t// delete window.opentype;\n\t\t\t\t\tresolve(parsed);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tprivate _load_json(url: string): Promise<Font> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._font_loader.load(\n\t\t\t\turl,\n\t\t\t\t(font) => {\n\t\t\t\t\tresolve(font);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t// private _default_font_parameters(options){\n\t// \tif (options == null) { options = {}; }\n\t// \tconst default_options = lodash_clone(DEFAULT_PARAMS);\n\t// \tif (options['font'] == null) { options['font'] = this.font(); }\n\n\t// \tfor(let key of Object.keys(options)){\n\t// \t\tdefault_options[key] = options[key];\n\t// \t}\n\n\t// \treturn default_options;\n\t// }\n\tprivate async _load_ttf_loader(): Promise<TTFLoader> {\n\t\tconst {TTFLoader} = await import(`../../../../modules/three/examples/jsm/loaders/TTFLoader`);\n\t\tconst loader_constructor = (<unknown>TTFLoader) as typeof TTFLoader;\n\t\treturn new loader_constructor();\n\t}\n\tprivate async _load_svg_loader(): Promise<typeof SVGLoader> {\n\t\tconst {SVGLoader} = await import(`../../../../modules/three/examples/jsm/loaders/SVGLoader`);\n\t\treturn (<unknown>SVGLoader) as typeof SVGLoader;\n\t}\n}\n","import {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author gero3 / https://github.com/gero3\n * @author tentone / https://github.com/tentone\n * @author troy351 / https://github.com/troy351\n *\n * Requires opentype.js to be included in the project.\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n */\n\n\nvar TTFLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.reversed = false;\n\n};\n\n\nTTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TTFLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tvar round = Math.round;\n\n\t\t\tvar glyphs = {};\n\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tvar token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tvar paths = [];\n\t\t\tvar path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n} );\n\nexport { TTFLoader };\n","import {TorusBufferGeometry} from 'three/src/geometries/TorusGeometry';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tradius_tube = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(20, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\tsegments_tube = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new TorusSopParamsConfig();\n\nexport class TorusSopNode extends TypedSopNode<TorusSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\t//radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float\n\n\t\tconst geometry = new TorusBufferGeometry(radius, radius_tube, segments_radial, segments_tube);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TorusKnotBufferGeometry} from 'three/src/geometries/TorusKnotGeometry';\nconst THREE = {TorusKnotBufferGeometry};\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TorusKnotSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tradius_tube = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(64, {range: [1, 128]});\n\tsegments_tube = ParamConfig.INTEGER(8, {range: [1, 32]});\n\tp = ParamConfig.INTEGER(2, {range: [1, 10]});\n\tq = ParamConfig.INTEGER(3, {range: [1, 10]});\n}\nconst ParamsConfig = new TorusKnotSopParamsConfig();\n\nexport class TorusKnotSopNode extends TypedSopNode<TorusKnotSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus_knot';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\tconst p = this.pv.p;\n\t\tconst q = this.pv.q;\n\n\t\tconst geometry = new THREE.TorusKnotBufferGeometry(radius, radius_tube, segments_radial, segments_tube, p, q);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {GroupParamController} from './utils/GroupParamController';\n\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CoreTransform} from '../../../core/Transform';\n// import {ParamType} from '../../poly/ParamType';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\n\n// const DEFAULT_PARAMS = {\n// \tPIVOT: [0, 0, 0] as [number, number, number],\n// };\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TransformSopParamConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\n\t// transform\n\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\tscale = ParamConfig.FLOAT(1);\n\tlook_at = ParamConfig.OPERATOR_PATH('');\n\tup = ParamConfig.VECTOR3([0, 1, 0]);\n\tpivot = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new TransformSopParamConfig();\n\nexport class TransformSopNode extends TypedSopNode<TransformSopParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'transform';\n\t}\n\t// allow_eval_key_check() {\n\t// \treturn true;\n\t// }\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transform'];\n\t}\n\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst objects = input_contents[0].objects();\n\t\tconst matrix = this._core_transform.matrix(this.pv.t, this.pv.r, this.pv.s, this.pv.scale);\n\n\t\tif (this.pv.group === '') {\n\t\t\tfor (let object of objects) {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = object.geometry) != null) {\n\t\t\t\t\tgeometry.translate(-this.pv.pivot.x, -this.pv.pivot.y, -this.pv.pivot.z);\n\t\t\t\t\tgeometry.applyMatrix4(matrix);\n\t\t\t\t\tgeometry.translate(this.pv.pivot.x, this.pv.pivot.y, this.pv.pivot.z);\n\t\t\t\t} else {\n\t\t\t\t\tobject.applyMatrix4(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst core_group = CoreGroup.from_objects(objects);\n\t\t\tconst points = core_group.points_from_group(this.pv.group);\n\t\t\tfor (let point of points) {\n\t\t\t\tconst position = point.position().sub(this.pv.pivot);\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tpoint.set_position(position.add(this.pv.pivot));\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(objects);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {CylinderBufferGeometry} from 'three/src/geometries/CylinderGeometry';\nimport {CoreTransform} from '../../../core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nclass TubeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new TubeSopParamsConfig();\n\nexport class TubeSopNode extends TypedSopNode<TubeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'tube';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new CylinderBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from '../../../core/geometry/Group';\nimport {CameraController} from '../../../core/CameraController';\nimport {BaseCameraObjNodeType} from '../obj/_BaseCamera';\n\n// const MODE = [];\nconst UV_NAME = 'uv';\n\nimport {NodeParamsConfig, ParamConfig} from '../utils/params/ParamsConfig';\nimport {InputCloneMode} from '../../poly/InputCloneMode';\nimport {NodeContext} from '../../poly/NodeContext';\nimport {BaseObjNodeType} from '../obj/_Base';\nclass UvProjectSopParamsConfig extends NodeParamsConfig {\n\tcamera = ParamConfig.OPERATOR_PATH('/perspective_camera1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.OBJ,\n\t\t},\n\t});\n\t// force_aspect = ParamConfig.BOOLEAN(0)\n\t// aspect = ParamConfig.FLOAT(1, {\n\t// \trange: [0, 2],\n\t// \tvisible_if: {force_aspect: 1},\n\t// })\n}\nconst ParamsConfig = new UvProjectSopParamsConfig();\n\nexport class UvProjectSopNode extends TypedSopNode<UvProjectSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'uv_project';\n\t}\n\n\tprivate _camera_controller: CameraController = new CameraController(this._update_uvs_from_camera.bind(this));\n\t// private _param_camera: string\n\tprivate _processed_core_group: CoreGroup | undefined;\n\t// private _camera_node: BaseCameraObjNodeType | undefined;\n\tprivate _camera_object: Camera | undefined;\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._processed_core_group = core_groups[0];\n\n\t\tconst camera_node = this.p.camera.found_node();\n\t\tif (camera_node != null) {\n\t\t\tthis._camera_object = (camera_node as BaseCameraObjNodeType).object;\n\t\t\tthis._camera_controller.set_target(this._camera_object);\n\t\t\t// this._add_camera_event()\n\t\t} else {\n\t\t\tthis._camera_object = undefined;\n\t\t\t//this._remove_camera_event()\n\t\t\tthis._camera_controller.remove_target();\n\t\t}\n\n\t\tthis.set_core_group(this._processed_core_group);\n\t}\n\n\t_update_uvs_from_camera(look_at_target: Object3D) {\n\t\t// let old_aspect;\n\t\t// if (this.pv.force_aspect) {\n\t\t// \told_aspect = this._camera_object.aspect;\n\t\t// \tthis._camera_node.setup_for_aspect_ratio(this.pv.aspect);\n\t\t// }\n\n\t\tif (this._processed_core_group && this.parent) {\n\t\t\tconst points = this._processed_core_group.points();\n\t\t\tconst obj_world_matrix = (this.parent as BaseObjNodeType).object.matrixWorld;\n\t\t\tpoints.forEach((point) => {\n\t\t\t\tconst position = point.position();\n\t\t\t\tconst uvw = this._vector_in_camera_space(position, obj_world_matrix);\n\t\t\t\tif (uvw) {\n\t\t\t\t\tconst uv = {\n\t\t\t\t\t\tx: 1 - (uvw[0] * 0.5 + 0.5),\n\t\t\t\t\t\ty: uvw[1] * 0.5 + 0.5,\n\t\t\t\t\t};\n\t\t\t\t\tpoint.set_attrib_value(UV_NAME, uv);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if (this.pv.force_aspect) {\n\t\t\t// \tthis._camera_node.setup_for_aspect_ratio(old_aspect);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate _vector_in_camera_space(vector: Vector3, obj_world_matrix: Matrix4) {\n\t\tif (this._camera_object) {\n\t\t\tvector.applyMatrix4(obj_world_matrix);\n\t\t\treturn vector.project(this._camera_object).toArray();\n\t\t}\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nenum EVENT {\n\tCHANGE = 'change',\n\tMOVEEND = 'moveend',\n}\n\ntype CameraControllerCallback = (target: Object3D) => void;\n\nexport class CameraController {\n\tprivate _update_always: boolean = true;\n\tprivate _listener: any;\n\tprivate _target: Object3D | undefined;\n\tprivate _listener_added: boolean = false;\n\n\tconstructor(private _callback: CameraControllerCallback) {\n\t\tthis._listener = this._execute_callback.bind(this);\n\t}\n\n\tremove_target() {\n\t\tthis.set_target(undefined);\n\t}\n\tset_target(target: Object3D | undefined) {\n\t\tif (!target) {\n\t\t\tthis._remove_camera_event();\n\t\t}\n\n\t\tconst old_target = this._target;\n\t\tthis._target = target;\n\n\t\tif (this._target != null) {\n\t\t\tthis._execute_callback();\n\t\t}\n\n\t\tif (\n\t\t\t(this._target != null ? this._target.uuid : undefined) !==\n\t\t\t(old_target != null ? old_target.uuid : undefined)\n\t\t) {\n\t\t\tthis._add_camera_event();\n\t\t}\n\t}\n\n\tset_update_always(new_update_always: boolean) {\n\t\tthis._remove_camera_event();\n\n\t\tthis._update_always = new_update_always;\n\n\t\tthis._add_camera_event();\n\t}\n\n\tprivate _current_event_name() {\n\t\tif (this._update_always) {\n\t\t\treturn EVENT.CHANGE;\n\t\t} else {\n\t\t\treturn EVENT.MOVEEND;\n\t\t}\n\t}\n\n\tprivate _add_camera_event() {\n\t\tif (this._listener_added) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.addEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = true;\n\t\t}\n\t}\n\n\tprivate _remove_camera_event() {\n\t\tif (this._listener_added !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.removeEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = false;\n\t\t}\n\t}\n\n\tprivate _execute_callback() {\n\t\tif (this._target != null) {\n\t\t\tthis._callback(this._target);\n\t\t}\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","import {Clock} from 'three/src/core/Clock';\nimport {LinearFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {RGBAFormat} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n"],"sourceRoot":""}