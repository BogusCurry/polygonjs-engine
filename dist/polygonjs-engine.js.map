{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/engine/nodes/utils/params/ParamsConfig.ts","webpack:///./src/engine/nodes/sop/_Base.ts","webpack:///./src/engine/poly/InputCloneMode.ts","webpack:///./src/engine/poly/ParamType.ts","webpack:///./src/engine/poly/NodeContext.ts","webpack:///./src/core/geometry/Constant.ts","webpack:///./src/core/String.ts","webpack:///./src/engine/poly/NodeEvent.ts","webpack:///./src/core/geometry/Geometry.ts","webpack:///./src/engine/Poly.ts","webpack:///./src/core/graph/CoreGraphNode.ts","webpack:///./src/engine/expressions/methods/_Base.ts","webpack:///./src/engine/nodes/_Base.ts","webpack:///./modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./src/engine/nodes/mat/_Base.ts","webpack:///./src/engine/nodes/obj/_Base.ts","webpack:///./src/engine/params/_Base.ts","webpack:///./src/engine/nodes/obj/utils/TransformController.ts","webpack:///./src/engine/poly/ParamEvent.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionPointType.ts","webpack:///./src/core/Walker.ts","webpack:///./src/engine/nodes/utils/FlagsController.ts","webpack:///./src/engine/nodes/utils/shaders/ShaderName.ts","webpack:///./src/core/Transform.ts","webpack:///./src/core/math/_Module.ts","webpack:///./src/engine/nodes/utils/ContainerController.ts","webpack:///./src/core/geometry/Attribute.ts","webpack:///./src/engine/params/Ramp.ts","webpack:///./src/engine/containers/_Base.ts","webpack:///./src/engine/params/_Multiple.ts","webpack:///./src/engine/nodes/utils/connections/NamedConnectionPoint.ts","webpack:///./src/engine/poly/registers/Category.ts","webpack:///./src/engine/nodes/gl/_Base.ts","webpack:///./src/engine/io/json/export/Param.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/_BaseController.ts","webpack:///./src/core/ThreeToGl.ts","webpack:///./src/engine/nodes/cop/_Base.ts","webpack:///./src/engine/nodes/cop/File.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinition.ts","webpack:///./src/engine/nodes/mat/utils/ColorsController.ts","webpack:///./src/engine/nodes/mat/utils/SideController.ts","webpack:///./src/engine/nodes/gl/code/assemblers/_BaseRender.ts","webpack:///./src/core/MapUtils.ts","webpack:///./src/engine/params/_Numeric.ts","webpack:///./src/engine/poly/Assert.ts","webpack:///./src/engine/nodes/mat/utils/_BaseController.ts","webpack:///./src/engine/nodes/mat/utils/SkinningController.ts","webpack:///./src/engine/nodes/mat/utils/TextureMapController.ts","webpack:///./src/engine/nodes/mat/utils/TextureAlphaMapController.ts","webpack:///./src/engine/io/json/export/Dispatcher.ts","webpack:///./src/engine/io/json/export/Scene.ts","webpack:///./src/engine/nodes/obj/_BaseLightTransformed.ts","webpack:///./src/engine/nodes/obj/utils/helpers/_BaseLightHelper.ts","webpack:///./src/engine/nodes/obj/utils/HelperController.ts","webpack:///./src/engine/nodes/obj/_BaseManager.ts","webpack:///./src/engine/nodes/obj/utils/LayersController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/PostProcessController.ts","webpack:///./src/engine/io/json/import/Param.ts","webpack:///./src/engine/params/String.ts","webpack:///./src/core/geometry/Material.ts","webpack:///./src/engine/nodes/utils/NameController.ts","webpack:///./src/core/DecomposedPath.ts","webpack:///./src/core/Object.ts","webpack:///./src/engine/expressions/traversers/_Base.ts","webpack:///./src/engine/nodes/event/CameraOrbitControls.ts","webpack:///./src/engine/nodes/gl/Attribute.ts","webpack:///./src/engine/nodes/mat/utils/_BaseTextureController.ts","webpack:///./src/engine/nodes/gl/code/utils/LineType.ts","webpack:///./src/engine/nodes/obj/_BaseLight.ts","webpack:///./src/core/geometry/Object.ts","webpack:///./modules/three/examples/jsm/utils/BufferGeometryUtils.js","webpack:///./src/core/geometry/util/Curve.ts","webpack:///./src/engine/params/Float.ts","webpack:///./src/engine/params/OperatorPath.ts","webpack:///./src/engine/nodes/gl/code/globals/Geometry.ts","webpack:///./src/engine/scene/PolyScene.ts","webpack:///./src/engine/nodes/utils/Serializer.ts","webpack:///./src/engine/params/types/ParamConstructorByType.ts","webpack:///./src/engine/params/utils/ExpressionController.ts","webpack:///./src/engine/expressions/traversers/ParsedTree.ts","webpack:///./src/core/math/Easing.ts","webpack:///./src/engine/nodes/utils/flags/Base.ts","webpack:///./modules/three/examples/jsm/controls/OrbitControls.js","webpack:///./src/engine/nodes/gl/Globals.ts","webpack:///./src/engine/nodes/gl/utils/GLDefinitionCollection.ts","webpack:///./src/engine/nodes/utils/code/controllers/ParamConfigsController.ts","webpack:///./src/engine/nodes/obj/_BaseCamera.ts","webpack:///./src/core/geometry/Group.ts","webpack:///./src/core/geometry/Point.ts","webpack:///./src/core/geometry/Entity.ts","webpack:///./src/core/Iterator.ts","webpack:///./src/core/geometry/util/Circle.ts","webpack:///./src/core/loader/geometry/JsonData.ts","webpack:///./modules/three/examples/jsm/loaders/DRACOLoader.js","webpack:///./src/core/geometry/operation/Skin.ts","webpack:///./src/engine/io/json/import/Dispatcher.ts","webpack:///./src/engine/params/Integer.ts","webpack:///./src/engine/params/ramp/RampValue.ts","webpack:///./src/engine/poly/SceneEvent.ts","webpack:///./src/engine/nodes/gl/code/assemblers/_Base.ts","webpack:///./src/engine/nodes/utils/shaders/NodeTraverser.ts","webpack:///./src/engine/nodes/gl/code/globals/_Base.ts","webpack:///./src/engine/nodes/gl/code/utils/NodeFinder.ts","webpack:///./src/engine/nodes/gl/code/Controller.ts","webpack:///./src/engine/nodes/sop/Cache.ts","webpack:///./modules/three/examples/jsm/libs/inflate.module.min.js","webpack:///./src/engine/scene/utils/CamerasController.ts","webpack:///./src/engine/scene/utils/Cooker.ts","webpack:///./src/core/graph/CoreGraph.ts","webpack:///./src/engine/scene/utils/CookController.ts","webpack:///./src/engine/scene/utils/EventsController.ts","webpack:///./src/engine/poly/RenderersController.ts","webpack:///./src/engine/poly/NodesRegister.ts","webpack:///./src/engine/scene/utils/LifeCycleController.ts","webpack:///./src/engine/scene/utils/LoadingController.ts","webpack:///./src/engine/expressions/MissingReferencesController.ts","webpack:///./src/engine/expressions/MissingReference.ts","webpack:///./src/engine/scene/utils/NodesController.ts","webpack:///./src/engine/nodes/manager/ObjectsManager.ts","webpack:///./src/engine/nodes/manager/_Base.ts","webpack:///./src/core/graph/DirtyController.ts","webpack:///./src/engine/nodes/utils/UIData.ts","webpack:///./src/engine/nodes/utils/StatesController.ts","webpack:///./src/engine/nodes/utils/states/TimeDependent.ts","webpack:///./src/engine/nodes/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/hierarchy/ParentController.ts","webpack:///./src/core/WalkerEmbed.ts","webpack:///./src/engine/nodes/utils/hierarchy/ChildrenController.ts","webpack:///./src/core/NodeSelection.ts","webpack:///./src/engine/nodes/utils/LifeCycleController.ts","webpack:///./src/engine/nodes/utils/CookController.ts","webpack:///./src/engine/nodes/utils/DependenciesController.ts","webpack:///./src/engine/params/utils/OptionsController.ts","webpack:///./src/engine/params/utils/EmitController.ts","webpack:///./src/engine/params/utils/Serializer.ts","webpack:///./src/engine/params/utils/StatesController.ts","webpack:///./src/engine/params/utils/states/TimeDependent.ts","webpack:///./src/engine/params/utils/states/Error.ts","webpack:///./src/engine/nodes/utils/params/ParamsController.ts","webpack:///./src/engine/params/Boolean.ts","webpack:///./src/engine/expressions/ExpressionManager.ts","webpack:///./src/engine/expressions/traversers/FunctionGenerator.ts","webpack:///./src/engine/expressions/LiteralConstructsController.ts","webpack:///./src/engine/expressions/methods/_Module.ts","webpack:///./src/engine/expressions/methods/bbox.ts","webpack:///./src/engine/expressions/MethodDependency.ts","webpack:///./src/engine/expressions/methods/centroid.ts","webpack:///./src/engine/expressions/methods/ch.ts","webpack:///./src/engine/expressions/methods/copy.ts","webpack:///./src/engine/expressions/methods/cop_res.ts","webpack:///./src/engine/expressions/methods/local.ts","webpack:///./src/engine/expressions/methods/opdigits.ts","webpack:///./src/engine/expressions/methods/point.ts","webpack:///./src/engine/expressions/methods/points_count.ts","webpack:///./src/engine/expressions/methods/str_chars_count.ts","webpack:///./src/engine/expressions/methods/str_concat.ts","webpack:///./src/engine/expressions/methods/str_index.ts","webpack:///./src/engine/expressions/methods/str_sub.ts","webpack:///./src/engine/expressions/AttributeRequirementsController.ts","webpack:///./src/engine/expressions/traversers/ExpressionStringGenerator.ts","webpack:///./src/engine/expressions/DependenciesController.ts","webpack:///./src/engine/params/Button.ts","webpack:///./src/engine/params/Color.ts","webpack:///./src/engine/params/Folder.ts","webpack:///./src/engine/params/Separator.ts","webpack:///./src/engine/params/Vector2.ts","webpack:///./src/engine/params/Vector3.ts","webpack:///./src/engine/params/Vector4.ts","webpack:///./src/engine/nodes/utils/params/ParamsValueAccessor.ts","webpack:///./src/engine/nodes/utils/ProcessingContext.ts","webpack:///./src/engine/nodes/utils/connections/IOController.ts","webpack:///./src/engine/nodes/utils/connections/ConnectionsController.ts","webpack:///./src/engine/nodes/utils/connections/InputsController.ts","webpack:///./src/engine/nodes/utils/connections/NodeConnection.ts","webpack:///./src/engine/nodes/utils/connections/OutputsController.ts","webpack:///./src/engine/nodes/utils/params/ParamsAccessor.ts","webpack:///./src/engine/containers/Manager.ts","webpack:///./src/core/performance/CorePerformance.ts","webpack:///./src/core/performance/PerformanceNode.ts","webpack:///./src/engine/scene/utils/TimeController.ts","webpack:///./src/engine/scene/utils/Serializer.ts","webpack:///./src/engine/scene/utils/UniformsController.ts","webpack:///./src/engine/scene/utils/WebGLController.ts","webpack:///./src/engine/poly/registers/All.ts","webpack:///./src/engine/poly/registers/Cop.ts","webpack:///./src/engine/nodes/cop/EnvMap.ts","webpack:///./src/engine/containers/Texture.ts","webpack:///./src/engine/nodes/utils/flags/Bypass.ts","webpack:///./src/engine/nodes/utils/flags/Display.ts","webpack:///./src/core/loader/Texture.ts","webpack:///./modules/three/examples/jsm/loaders/RGBELoader.js","webpack:///./modules/three/examples/jsm/loaders/BasisTextureLoader.js","webpack:///./src/engine/nodes/cop/Null.ts","webpack:///./src/engine/nodes/cop/Switch.ts","webpack:///./src/engine/poly/registers/Event.ts","webpack:///./src/engine/nodes/event/CameraMapControls.ts","webpack:///./src/engine/nodes/event/_BaseCameraControls.ts","webpack:///./src/engine/nodes/event/_Base.ts","webpack:///./src/engine/containers/Event.ts","webpack:///./src/engine/poly/registers/Gl.ts","webpack:///./src/engine/nodes/utils/params/ParamValueToDefaultConverter.ts","webpack:///./src/engine/nodes/gl/Constant.ts","webpack:///./src/engine/nodes/gl/FloatToVec3.ts","webpack:///./src/engine/nodes/gl/Output.ts","webpack:///./src/engine/nodes/gl/Param.ts","webpack:///./src/engine/nodes/utils/code/configs/ParamConfig.ts","webpack:///./src/engine/poly/registers/Mat.ts","webpack:///./src/engine/nodes/mat/MeshBasic.ts","webpack:///./src/engine/containers/Material.ts","webpack:///./src/engine/nodes/mat/MeshBasicBuilder.ts","webpack:///./src/engine/nodes/gl/code/assemblers/Basic.ts","webpack:///./src/engine/nodes/gl/code/assemblers/_BaseMesh.ts","webpack:///./src/engine/nodes/gl/code/configs/ShaderConfig.ts","webpack:///./src/engine/nodes/gl/code/configs/VariableConfig.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeBuilder.ts","webpack:///./src/engine/nodes/gl/code/utils/ShadersCollectionController.ts","webpack:///./src/engine/nodes/gl/code/utils/LinesController.ts","webpack:///./src/engine/nodes/gl/code/utils/CodeFormatter.ts","webpack:///./src/engine/nodes/utils/shaders/BaseAssembler.ts","webpack:///./src/engine/nodes/gl/code/assemblers/CustomMeshDistance.ts","webpack:///./src/engine/nodes/gl/code/assemblers/CustomMeshDepth.ts","webpack:///./src/engine/nodes/gl/code/assemblers/CustomMeshDepthDOF.ts","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.vert.glsl","webpack:///./src/engine/nodes/gl/code/templates/CustomMeshDepthDOF.frag.glsl","webpack:///./src/engine/nodes/mat/_BaseBuilder.ts","webpack:///./src/engine/io/json/export/Node.ts","webpack:///./src/engine/io/json/export/param/Multiple.ts","webpack:///./src/engine/io/json/export/param/Numeric.ts","webpack:///./src/engine/io/json/export/param/OperatorPath.ts","webpack:///./src/engine/io/json/export/param/String.ts","webpack:///./src/engine/io/json/export/param/Ramp.ts","webpack:///./src/engine/nodes/mat/MeshLambert.ts","webpack:///./src/engine/nodes/mat/MeshStandard.ts","webpack:///./src/engine/nodes/mat/utils/TextureEnvMapController.ts","webpack:///./src/engine/nodes/mat/Points.ts","webpack:///./src/engine/poly/registers/Obj.ts","webpack:///./src/engine/nodes/obj/AmbientLight.ts","webpack:///./src/engine/containers/Object.ts","webpack:///./src/engine/nodes/obj/AreaLight.ts","webpack:///./src/engine/nodes/obj/DirectionalLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/DirectionalLightHelper.ts","webpack:///./src/engine/nodes/obj/HemisphereLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/HemisphereLightHelper.ts","webpack:///./src/engine/nodes/obj/PointLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/PointLightHelper.ts","webpack:///./src/engine/nodes/obj/SpotLight.ts","webpack:///./src/engine/nodes/obj/utils/helpers/SpotLightHelper.ts","webpack:///./src/engine/nodes/obj/Events.ts","webpack:///./src/engine/nodes/obj/Materials.ts","webpack:///./src/engine/nodes/obj/Cop.ts","webpack:///./src/engine/nodes/obj/PostProcess.ts","webpack:///./src/engine/nodes/obj/Geo.ts","webpack:///./src/engine/nodes/utils/DisplayNodeController.ts","webpack:///./src/engine/nodes/obj/Null.ts","webpack:///./src/engine/nodes/obj/Fog.ts","webpack:///./src/engine/nodes/obj/OrthographicCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/ControlsController.ts","webpack:///./src/engine/nodes/event/utils/CameraControlConfig.ts","webpack:///./modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./src/engine/viewers/Threejs.ts","webpack:///./src/engine/viewers/_Base.ts","webpack:///./src/engine/viewers/utils/CamerasController.ts","webpack:///./src/engine/viewers/utils/ControlsController.ts","webpack:///./src/engine/viewers/utils/EventsController.ts","webpack:///./src/engine/viewers/utils/WebglController.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/OrthographicCameraController.ts","webpack:///./src/engine/nodes/obj/PerspectiveCamera.ts","webpack:///./src/engine/nodes/obj/utils/cameras/background/PerspectiveCameraController.ts","webpack:///./src/engine/poly/registers/Sop.ts","webpack:///./src/engine/nodes/sop/Add.ts","webpack:///./src/core/geometry/Face.ts","webpack:///./src/core/geometry/MonkeyPatcher.ts","webpack:///./src/engine/containers/Geometry.ts","webpack:///./src/engine/nodes/sop/AnimationCopy.ts","webpack:///./src/engine/nodes/sop/AnimationMixer.ts","webpack:///./src/engine/nodes/sop/AttribAddMult.ts","webpack:///./src/engine/nodes/sop/AttribCopy.ts","webpack:///./src/engine/nodes/sop/AttribCreate.ts","webpack:///./src/engine/nodes/sop/AttribDelete.ts","webpack:///./src/engine/nodes/sop/AttribNormalize.ts","webpack:///./src/engine/nodes/sop/AttribPromote.ts","webpack:///./src/engine/nodes/sop/AttribRemap.ts","webpack:///./src/engine/nodes/sop/AttribRename.ts","webpack:///./src/engine/nodes/sop/AttribTransfer.ts","webpack:///./src/core/math/Interpolate.ts","webpack:///./src/core/math/octree/Octree.ts","webpack:///./src/core/math/octree/Node.ts","webpack:///./src/engine/nodes/sop/BboxScatter.ts","webpack:///./src/engine/nodes/sop/Blend.ts","webpack:///./src/engine/nodes/sop/Box.ts","webpack:///./src/engine/nodes/sop/Circle.ts","webpack:///./src/engine/nodes/sop/Color.ts","webpack:///./src/core/Color.ts","webpack:///./src/engine/nodes/sop/Copy.ts","webpack:///./src/core/geometry/Instancer.ts","webpack:///./src/engine/nodes/sop/utils/CopyStamp.ts","webpack:///./src/engine/nodes/sop/Data.ts","webpack:///./src/core/geometry/AttributeData.ts","webpack:///./src/engine/nodes/sop/DataUrl.ts","webpack:///./src/engine/nodes/sop/Delay.ts","webpack:///./src/engine/nodes/sop/Delete.ts","webpack:///./src/engine/nodes/sop/Face.ts","webpack:///./src/engine/nodes/sop/File.ts","webpack:///./src/core/loader/Geometry.ts","webpack:///./modules/three/examples/jsm/loaders/OBJLoader.js","webpack:///./src/engine/nodes/sop/Fuse.ts","webpack:///./src/engine/nodes/sop/Hexagons.ts","webpack:///./src/core/geometry/operation/Hexagon.ts","webpack:///./src/engine/nodes/sop/Hierarchy.ts","webpack:///./src/engine/nodes/sop/Jitter.ts","webpack:///./src/engine/nodes/sop/Layer.ts","webpack:///./src/engine/nodes/sop/Line.ts","webpack:///./src/engine/nodes/sop/Material.ts","webpack:///./src/engine/nodes/sop/Merge.ts","webpack:///./src/engine/nodes/sop/Noise.ts","webpack:///./modules/three/examples/jsm/math/SimplexNoise.js","webpack:///./src/engine/nodes/sop/Normals.ts","webpack:///./src/engine/nodes/sop/Null.ts","webpack:///./src/engine/nodes/sop/ObjectMerge.ts","webpack:///./src/engine/nodes/sop/Occlusion.ts","webpack:///./src/engine/nodes/sop/Peak.ts","webpack:///./src/engine/nodes/sop/Plane.ts","webpack:///./src/engine/nodes/sop/Point.ts","webpack:///./src/engine/nodes/sop/Polywire.ts","webpack:///./src/engine/nodes/sop/Ray.ts","webpack:///./src/engine/nodes/sop/Resample.ts","webpack:///./src/engine/nodes/sop/Scatter.ts","webpack:///./src/engine/nodes/sop/Shadows.ts","webpack:///./src/engine/nodes/sop/Skin.ts","webpack:///./src/engine/nodes/sop/Sphere.ts","webpack:///./src/engine/nodes/sop/Switch.ts","webpack:///./src/engine/nodes/sop/Text.ts","webpack:///./modules/three/examples/jsm/loaders/TTFLoader.js","webpack:///./src/engine/nodes/sop/Torus.ts","webpack:///./src/engine/nodes/sop/TorusKnot.ts","webpack:///./src/engine/nodes/sop/Transform.ts","webpack:///./src/engine/nodes/sop/Tube.ts","webpack:///./src/engine/nodes/sop/UvProject.ts","webpack:///./src/core/CameraController.ts","webpack:///./src/engine/io/json/import/Scene.ts","webpack:///./src/engine/io/json/import/Node.ts","webpack:///./src/engine/io/json/import/param/Multiple.ts","webpack:///./src/engine/io/json/import/param/String.ts","webpack:///./src/engine/io/json/import/param/Ramp.ts","webpack:///./modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack:///./src/engine/index.ts"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","10","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","type","init_value","options","ParamTemplate","BUTTON","ParamType","BOOLEAN","COLOR","FLOAT","FOLDER","INTEGER","OPERATOR_PATH","RAMP","RampParam","DEFAULT_VALUE","SEPARATOR","STRING","VECTOR2","VECTOR3","VECTOR4","ParamConfig","NodeParamsConfig","MESSAGE","DEFAULT_INPUT_NAMES","container_controller","TypedContainerController","GeometryContainer","flags","FlagsControllerDB","node_context","NodeContext","SOP","displayed_input_names","initialize_base_node","this","display","set","add_hook","active","parent","display_node_controller","set_display_node","io","outputs","set_has_one_output","set_core_group","core_group","objects","_set_object_attributes","set_container","FROM_SET_CORE_GROUP","set_object","set_container_objects","FROM_SET_OBJECT","set_objects","FROM_SET_OBJECTS","set_geometry","geometry","create_object","FROM_SET_GEOMETRY","set_geometries","geometries","forEach","FROM_SET_GEOMETRIES","message","container","core_content","CoreGroup","touch","index","position_array","getAttribute","array","setIndex","CoreConstant","OBJECT_TYPE","MESH","object_constructor","CONSTRUCTORS_BY_NAME","MATERIALS","clone","castShadow","receiveShadow","frustumCulled","material","scene","console","log","material_node","CoreMaterial","node","add_render_hook","_add_index","points_count","indices","TypedNode","TypedSopNode","BaseSopNodeClass","InputCloneMode","ObjectType","ObjectTypes","POINTS","LINE_SEGMENTS","ObjectTypeMenuEntries","indexOf","AttribClass","AttribType","materials","MeshStandard","MeshStandardMaterial","color","side","FrontSide","metalness","roughness","MeshLambertMaterial","Color","vertexColors","NoColors","transparent","depthTest","PointsMaterial","size","LineBasicMaterial","linewidth","AttribClassMenuEntries","VERTEX","OBJECT","AttribTypeMenuEntries","NUMERIC","ATTRIB_CLASS","ATTRIB_TYPE","OBJECT_TYPES","CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME","Scene","Group","Object3D","Mesh","Points","LineSegments","Bone","SkinnedMesh","BooleanString","ATTRIB_NAMES_SEPARATOR","TAIL_DIGIT_MATCH_REGEXP","INDICES_LIST_SEPARATOR","NUM_REGEXP","is_boolean","word","TRUE","FALSE","to_boolean","is_number","test","tail_digits","match","parseInt","increment","digits","substring","pluralize","camel_case","upper_first","snake_case","titleize","replace","type_to_class_name","timestamp_to_seconds","Date","parse","seconds_to_timestamp","seconds","setTime","toISOString","substr","precision","val","decimals","Math","max","elements","split","frac","undefined","string_to_pad","pad","ensure_float","num","num_as_string","match_mask","rule","join","RegExp","matches_one_mask","masks","mask","CoreString","attrib_names","trimed_elements","map","e","to_id","reverse","id","exp","element","charCodeAt","Number","MAX_SAFE_INTEGER","indices_string","sort","a","b","range_elements","escape_line_breaks","NodeEvent","_geometry","uuid","bounding_box","_bounding_box","_create_bounding_box","computeBoundingBox","boundingBox","mark_as_instance","userData","marked_as_instance","CoreGeometry","position_attrib_name","compute_vertex_normals","computeVertexNormals","user_data_attribs","indexed_attribute_names","keys","user_data_attrib","CoreAttribute","remap_name","is_attrib_indexed","has_attrib","attributes","attrib_type","attrib_sizes","h","attrib_name","itemSize","attrib_size","attrib","set_indexed_attribute_values","values","set_indexed_attribute","setAttribute","Int32BufferAttribute","add_numeric_attrib","default_value","attribute_added","vec2","x","y","vec3","z","col","g","vec4","w","Float32BufferAttribute","init_position_attribute","Vector3","add_attribute","attrib_data","rename_attribute","old_name","new_name","old_attrib","deleteAttribute","delete_attribute","src_geometry","src_userData","attribute_name","attribute","constructor","InterleavedBufferAttribute","MonkeyPatcher","patch","new_geometry","position","count","points","_points","points_from_geometry","reset_points","position_attrib","point_index","point","CorePoint","geometry_from_points","object_type","BufferGeometry","geometry_wrapper","first_point","old_geometry","old_geometry_wrapper","_indices_from_points","new_values","attrib_value","new_value","new_attrib_indices","new_index","new_index_by_old_index","index_attrib","old_index","old_index0","old_index1","old_index2","new_index0","new_index1","new_index2","merge_geometries","core_geometries","new_values_by_attribute_name","indexed_attribute_name","index_by_values","all_geometries_points","set_attrib_index","merged_geometry","BufferGeometryUtils","mergeBufferGeometries","merged_geometry_wrapper","mergedUserData","segments","faces","faces_from_geometry","faces_count","CoreFace","renderers_controller","RenderersController","nodes_register","NodesRegister","scenes_by_uuid","instance","_instance","Poly","register_node","tab_menu_category","registered_nodes","parent_context","in_worker_thread","desktop_controller","player_mode","args","set_env","env","_env","POLY","_scene","_name","_dirty_controller","DirtyController","_graph_node_id","graph","next_id","setNode","_graph","set_name","set_dirty","trigger","set_successors_dirty","remove_dirty_state","is_dirty","add_post_dirty_hook","callback","graph_remove","removeNode","add_graph_input","src","connect","remove_graph_input","disconnect","graph_disconnect_predecessors","disconnect_predecessors","graph_disconnect_successors","disconnect_successors","graph_predecessor_ids","predecessor_ids","graph_predecessors","predecessors","graph_successors","successors","graph_all_predecessors","all_predecessors","graph_all_successors","all_successors","CoreGraphNode","param","required_arguments","warn","optional_arguments","min_allowed_arguments_count","max_allowed_arguments_count","allowed_arguments_count","process_arguments","get_referenced_node_container","index_or_path","referenced_node","get_referenced_node","request_container","full_path","get_referenced_param","path","decomposed_path","CoreWalker","find_param","find_referenced_graph_node","inputs","input_graph_node","find_node","input","find_dependency","create_dependency_from_index_or_path","DecomposedPath","create_dependency","CoreObject","is_a","TypedParam","node_or_param","MethodDependency","named_nodes","BaseMethod","BaseContainer","pv","ParamsValueAccessor","ParamsAccessor","_initialized","_display_node_controller","_parent_controller","HierarchyParentController","_children_controller_context","_create_children_controller","HierarchyChildrenController","_children_controller","children_allowed","_ui_data","UIData","_dependencies_controller","DependenciesController","_states","StatesController","_lifecycle","LifeCycleController","_serializer","NodeSerializer","_cook_controller","CookController","_io","IOController","_name_controller","NameController","name_controller","_set_core_name","_params_controller","ParamsController","_processing_context","ProcessingContext","initialize_base_and_node","initialize_node","required_three_imports","required_imports","three_imports","require_webgl2","set_parent","parent_controller","root","create_params","add_param","cook","input_contents","content","set_content","cook_controller","end_cook","create_node","children_controller","remove_node","children","nodes_by_type","set_input","input_index_or_name","output_index_or_name","emit","event_name","events_controller","dispatch","to_json","include_param_components","serializer","BaseNodeClass","camera","FullScreenQuad","Pass","enabled","needsSwap","clear","renderToScreen","assign","setSize","render","error","_mesh","dispose","renderer","MaterialContainer","_cook_main_without_inputs_when_dirty_bound","_cook_main_without_inputs_when_dirty","MAT","add_post_set_full_path_hook","set_material_name","cook_main_without_inputs","_material","create_material","set_material","TypedMatNode","Material","BaseMatNodeClass","ObjNodeRenderOrder","ObjectContainer","render_order","MANAGER","_children_group","_attachable_to_hierarchy","_used_in_scene","OBJ","set_used_in_scene","state","loading_controller","is_loading","update_object","add_object_to_parent","attachable_to_hierarchy","add","remove_object_from_parent","remove","_object","_create_object_with_attributes","set_object_name","is_display_node_cooking","is_displayed","TypedObjNode","BaseObjNodeClass","_options","OptionsController","_emit_controller","EmitController","_is_computing","initialize_param","_expression_controller","ParamSerializer","initialize_value","_value","convert","raw_val","are_raw_input_equal","val1","val2","is_raw_input_equal","other_raw_input","_raw_input","are_values_equal","is_value_equal","other_val","_clone_raw_input","raw_input","emit_controller","ParamEvent","RAW_INPUT_UPDATED","process_raw_input","_default_value","compute","process_computation","_compute_resolves","pop","Promise","resolve","reject","set_init_value","is_multiple","set_node","_node","makes_node_dirty_when_dirty","parent_param","params","params_node","components","set_parent_param","_parent_param","has_parent_param","path_relative_to","relative_path","emit_allowed","increment_count","_components","component_names","init_components","has_expression","expression_controller","BaseParamClass","TransformedParamConfig","Base","transform","scale","transform_controller","TransformController","TransformedObjNode","_update_transform_from_params_scale","set_count","set_depends_on_inputs","on_input_updated","hook_name","dirty_controller","has_hook","add_to_parent_transform","remove_from_parent_transform","update","matrix","update_transform_with_matrix","equals","update_transform_from_params","matrixAutoUpdate","dispatchEvent","rotation","copy","multiplyScalar","radians","CoreMath","degrees_to_radians","euler","Euler","updateMatrix","set_params_from_matrix","CoreTransform","ConnectionPointType","ConnectionPointTypes","BOOL","INT","VEC2","VEC3","VEC4","ConnectionPointTypeToParamTypeMap","SAMPLER_2D","ParamTypeToConnectionPointTypeMap","ConnectionPointInitValueMap","DEFAULT_VALUE_JSON","ConnectionPointComponentsCountMap","node_src","node_path","param_name","add_node","src_graph_node","dest_graph_node","closest_common_parent","distance","distance_to_parent","up","ups","PARENT","parent_path_elements","filter","remaining_elements","cmptr","dest_path_element","graph_node1","graph_node2","parents1","parents","parents2","min_depth","min","found_parent","graph_node_id","graph_node","dest","current","dest_id","CURRENT","CURRENT_WITH_SLASH","PARENT_WITH_SLASH","CoreWalkerEmbed","has_display","has_bypass","Display","DisplayFlag","Bypass","bypass","BypassFlag","FlagsController","FlagsControllerD","FlagsControllerB","ShaderName","ParticleShaderNames","PARTICLES_0","PARTICLES_1","PARTICLES_2","PARTICLES_3","PARTICLES_4","PARTICLES_5","PARTICLES_6","PARTICLES_7","PARTICLES_8","PARTICLES_9","_translation_matrix","Matrix4","_translation_matrix_q","Quaternion","_translation_matrix_s","_matrix","identity","_matrix_q","_matrix_e","_matrix_s","_rotate_geometry_m","_rotate_geometry_q","_rotate_geometry_vec_dest","update_scale","quaternion","decompose","setFromQuaternion","toVector3","divideScalar","PI","batch_update","set_vector3","toArray","set_float","set_params_from_object","translation_matrix","compose","matrix_quaternion","quat","setFromEuler","rotate_geometry","vec_origin","vec_dest","normalize","setFromUnitVectors","makeRotationFromQuaternion","applyMatrix","THREE","Triangle","RAD_DEG_RATIO","clamp","fit01","dest_min","dest_max","fit","src_min","src_max","degrees","radians_to_degrees","deg2rad","deg","rad2deg","rad","rand","number","rand_float","rand_vec2","round","step_size","steps_count","rounded_steps_count","ceil","floor","highest_even","vec","uv","sn","fract","sin","geodesic_distance","lnglat1","lnglat2","φ1","lat","φ2","Δφ","Δλ","lng","cos","atan2","sqrt","expand_triangle","triangle","margin","TriangleProp","mid_point","getMidpoint","prop","delta","sub","delta_n","nearestPower2","pow","Easing","container_class","_callbacks","_container","setTimeout","process_container_request","request_input_container","then","notify_requesters","states","reset_caches","cook_main","input_index","input_node","processing_context","callbacks","BaseContainerController","Vector2","ATTRIB_NAME_MAP","P","N","Cd","array_to_indexed_arrays","index_by_value","current_index","_reset_ramp_interpolant_and_texture_bound","_reset_ramp_interpolant_and_texture","RampValue","from_json","raw_input1","raw_input2","is_equal","is_equal_json","are_json_equal","VALUE_UPDATED","_ramp_interpolant","_ramp_texture","ramp_texture","_create_ramp_texture","Uint8Array","stride","width","value_at_position","texture","DataTexture","RGBFormat","needsUpdate","create_interpolant","positions","interpolated_values","Float32Array","CubicInterpolant","interpolant","_create_interpolant","sorted_points","sorted_point","evaluate","RampInterpolation","LINEAR","RampPoint","cloned_container","_content","_post_set_content","has_content","core_content_cloned","infos","TypedContainer","_components_contructor","FloatParam","is_default","Array","component_name","component","default_val","compute_components","set_value_from_components","promises","all","cooker","block","block_parent_emit","unblock","unblock_parent_emit","TypedMultipleParam","_type","_init_value","_json","_create_json","TypedNamedConnectionPoint","CATEGORY_OBJ","LIGHT","GEOMETRY","CAMERA","MISC","CATEGORY_COP","INPUT","ADVANCED","CATEGORY_EVENT","CATEGORY_GL","CONVERSION","DYNAMICS","GLOBALS","MATH","QUAT","TRIGO","UTIL","INSTANCE","CATEGORY_MAT","LINE","VOLUME","CATEGORY_SOP","ANIMATION","ATTRIBUTE","MODIFIER","RENDER","CATEGORY_POST","PASS","_set_mat_to_recompile_bound","_set_mat_to_recompile","_allow_inputs_created_from_params","GL","connections","init_inputs","ui_data","set_layout_horizontal","set_named_output_connection_points","set_post_create_params_hook","create_inputs_from_params","assembler_controller","set_compilation_required_and_dirty","gl_var_name","variable_for_input","get_input_index","connection","input_connection","output_name","named_output_connection_points","output_index","ThreeToGl","any","set_lines","shaders_collection_controller","reset_code","_param_configs_controller","reset","inputless_params_names","names","add_input","includes","connection_type","set_named_input_connection_points","create_spare_parameters","values_by_param_name","Map","current_param_names","spare_names","has_deleted_a_param","has_created_a_param","delete_param","named_input_connection_points","connection_point","last_param_value","param_type","ParamValueToDefaultConverter","from_value","default_value_from_name","gl_input_default_value","spare","PARAMS_UPDATED","set_param_configs","param_configs","list","make_output_nodes_dirty","output_connections","node_dest","TypedGlNode","BaseGlNodeClass","_param","_complex_data","is_spare_and_not_component","is_spare","value_changed","_require_data_complex","_data_complex","_data_simple","raw_input_serialized","default_value_serialized","add_main","has_options_overridden","overridden_options","options_overridden","option_name","option_value","JSON","stringify","ParamJsonExporter","background","use_background","use_material","visible_if","background_color","background_material","node_selection","context","dependent_on_found_node","background_ratio","_bg_raycaster","Raycaster","_screen_quad","_create_screen_quad","PlaneBufferGeometry","quad","screen_quad_flat_material","_screen_quad_flat_material","MeshBasicMaterial","add_params","boolean","use_background_color","update_screen_quad","update_background_color","use_background_material","update_background_material","screen_quad","bg_node","found_node","BaseBackgroundController","v","vector3","vector2","vector3_float","float3","float2","float","int","bool","Uint16Array","EMPTY_DATA_TEXTURE","LuminanceFormat","HalfFloatType","TextureContainer","COP","set_texture","clear_texture","TypedCopNode","BaseCopNodeClass","MAPPINGS","UVMapping","CubeReflectionMapping","CubeRefractionMapping","EquirectangularReflectionMapping","EquirectangularRefractionMapping","SphericalReflectionMapping","CubeUVReflectionMapping","CubeUVRefractionMapping","WRAPPINGS","ClampToEdgeWrapping","RepeatWrapping","MirroredRepeatWrapping","MAG_FILTERS","LinearFilter","NearestFilter","MIN_FILTERS","NearestMipMapNearestFilter","NearestMipMapLinearFilter","LinearMipMapNearestFilter","LinearMipMapLinearFilter","ATTRIB_MAPPING_KEYS","ATTRIB_MAPPING","mapping","wrapS","wrapT","minFilter","magFilter","ParamsConfig","url","CoreTextureLoader","PARAM_DEFAULT","desktop_browse","file_type","reload","FileCopNode","PARAM_CALLBACK_reload","menu","entries","wrap_s","wrap_t","mag_filter","min_filter","params_config","_is_static_image_url","cook_for_image","cook_for_video","_load_texture","_update_texture_params","_param_url_changed","_add_video_spare_params_if_required","_previous_param_url","_set_video_current_time","resolved_url","texture_attrib","param_value","param_callback_reload","_video","has","currentTime","VideoTexture","image","has_param","VIDEO_TIME_PARAM_NAME","duration","range","range_locked","_remove_spare_params","_texture_loader","load_texture_from_url_or_op","DEFAULT_NODE_PATH","UV","ENV_MAP","GLDefinitionType","_definition_type","_data_type","collection_instance","TypedGLDefinitionCollection","TypedGLDefinition","data_type","AttributeGLDefinition","FUNCTION","FunctionGLDefinition","UNIFORM","UniformGLDefinition","VARYING","VaryingGLDefinition","ColorParamConfig","use_vertex_colors","opacity","alpha_test","use_fog","ColoredMaterial","VertexColors","alphaTest","fog","BaseController","ColorsController","SideParamConfig","double_sided","front","SidedMaterial","prev","single_side","BackSide","DoubleSide","SideController","CustomMaterialName","_assemblers_by_custom_name","custom_assembler_class_by_custom_name","compile_custom_materials","class_by_custom_name","assembler_class","custom_name","_code_builder","assembler","_gl_parent_node","set_root_nodes","_root_nodes","set_param_configs_owner","set_shader_configs","shader_configs","set_variable_configs","variable_configs","custom_material","custom_materials","compile_material","shadow_assembler_class_by_custom_name","add_output_body_line","output_node","input_name","named_input","var_input","variable_config","new_var","default_from_attribute","named_input_connection_points_by_name","gl_type","attr_read","globals_handler","read_attribute","variable_config_default","default","prefix","suffix","if_condition","add_body_lines","set_node_lines_output","shader_name","current_shader_name","input_names","shader_config","set_node_lines_attribute","attribute_node","var_name","handle_gl_FragCoord","body_lines","FRAGMENT","handle_resolution","set_node_lines_globals","globals_node","definition","body_line","dependencies","definitions_by_shader_name","body_lines_by_shader_name","used_output_names","globals_shader_name","MapUtils","push_on_array_at_entry","dependency","set_frame_dependent","set_resolution_dependent","handle_globals_node","definitions","add_definitions","BaseGlShaderAssembler","ShaderAssemblerRender","new_element","unshift_on_array_at_entry","unshift","concat_on_array_at_entry","new_elements","converted","set_expression","EXPRESSION_UPDATED","_update_value","ExpressionController","expression","requires_entities","compute_expression","expression_result","is_errored","error_message","execute_callback","TypedNumericParam","unreachable","Error","TypeAssert","SkinningParamConfig","skinning","SkinnedMaterial","SkinningController","TextureMapParamConfig","use_map","BooleanParamOptions","TextureMapController","OperatorPathOptions","TextureMapMaterial","add_hooks","_update_texture","texture_map_controller","BaseTextureMapController","TextureAlphaMapParamConfig","use_alpha_map","TextureAlphaMapController","alpha_map","TextureAlphaMaterial","texture_alpha_map_controller","dispatch_node","NodeJsonExporter","dispatch_param","ParamMultipleJsonExporter","ParamNumericJsonExporter","OperatorPathParam","ParamOperatorPathJsonExporter","StringParam","ParamStringJsonExporter","ParamRampJsonExporter","JsonExportDispatcher","_data","nodes_controller","reset_node_context_signatures","root_exporter","nodes_data","properties","frame","frame_range","frame_range_locked","time_controller","fps","master_camera_node_path","cameras_controller","ui","sanitize_string","SceneJsonExporter","update_light_params","update_shadow_params","TypedLightObjNode","BaseLightTransformedObjNode","BaseLightHelperParamConfig","show_helper","helper_size","BaseLightHelperObjNode","wireframe","build","build_helper","BaseLightHelper","_helper_constructor","update_helper_attachment","helper","_helper","_create_helper","light","visible","HelperController","BaseManagerObjNode","layer","layers","enable","integer","LayersController","operator_path_param_options","POST","do_post_process","post_process","use_post_process_node0","post_process_node0","use_post_process_node1","post_process_node1","use_post_process_node2","post_process_node2","use_post_process_node3","post_process_node3","_renderers_by_canvas_id","_composers_by_canvas_id","_resolution_by_canvas_id","_composers_set_in_progress_by_canvas_id","_fetch_post_process_nodes_in_progress","_post_process_nodes","_post_process_use_node_path_params","_post_process_node_path_params","canvas","aspect","composer","setup_for_aspect_ratio","display_scene","create_renderer","gl","rendering_context","WebGLRenderer","antialias","alpha","shadowMap","physicallyCorrectLights","toneMapping","ACESFilmicToneMapping","toneMappingExposure","outputEncoding","sRGBEncoding","register_renderer","set_renderer_size","setPixelRatio","devicePixelRatio","delete_renderer","deregister_renderer","_create_composer","EffectComposer","set_composer_passes","update_composer_passes","composer_passes_nodes_changed","toggle_param","post_process_node","set_composers_passes","clear_render_passes","render_scene_pass","RenderPass","clearAlpha","addPass","apply_to_composer","render_pass","passes","disposable_pass","visible_options","node_path_options","PostProcessController","process_data","ParamJsonImporter","_value_elements","ParsedTree","string_value_elements","src_material","clone_single","apply_custom_materials","material_with_custom","mat_name","assign_custom_uniforms","mat","uniform_name","uniform_value","uniforms","init_custom_material_uniforms","_graph_node","base_name","base","last_char","request_name_to_parent","set_child_name","update_name_from_parent","post_set_name","post_set_full_path","child_node","NAME_UPDATED","add_post_set_name_hook","hook","_on_set_name_hooks","_on_set_full_path_hooks","graph_node_ids","node_element_by_graph_node_id","update_from_name_change","to_path","moduleKeywords","include","obj","dest_class","src_class","included","current_proto","__proto__","VARIABLE_PREFIX","set_error","traverse_node","method_name","traverse_BinaryExpression","left","operator","right","traverse_LogicalExpression","traverse_MemberExpression","traverse_ConditionalExpression","consequent","alternate","traverse_Compound","body","traversed_args","arg_node","traverse_Literal","raw","BaseTraverser","allow_pan","allow_rotate","allow_zoom","tdamping","damping","screen_space_panning","rotate_speed","min_distance","max_distance","polar_angle_range","create_controls_instance","OrbitControls","setup_controls","controls","enablePan","enableRotate","enableZoom","enableDamping","dampingFactor","rotateSpeed","screenSpacePanning","minDistance","maxDistance","minPolarAngle","maxPolarAngle","enableKeys","set_from_camera_node","camera_node","target","TypedCameraControlsEventNode","CameraOrbitControlsEventNode","ConnectionPointTypesAvailableForAttribute","_update_signature_if_required_bound","_update_signature_if_required","add_on_scene_load_hook","allow_attribute_exports","connected_input_node","connected_input_connection_point","named_input_connection_point","output_connection_point","named_output_connection_points_by_name","export_when_connected","dirty_trigger","lifecycle","creation_completed","update_input_and_output_types","AttributeGlNode","controller_class","controller","use_map_name","use_map_param","path_param","mat_attrib_name","has_no_texture","texture_is_different","LineType","_color_with_intensity","_light","create_light","update_light_attachment","create_shadow_params_main","shadow","create_shadow_params","create_light_params","intensity","core_geometry","geo","points_from_group","group","set_attrib_value","add_numeric_vertex_attrib","attribute_names","human_type","src_object","new_object","sourceLookup","cloneLookup","parallelTraverse","sourceNode","clonedNode","traverse","src_node","mesh_node","src_node_geometry","mesh_node_geometry","material_with_color","src_node_with_animations","animations","animation","skinned_node","isSkinnedMesh","clonedMesh","sourceMesh","sourceBones","skeleton","bones","bindMatrix","new_bones","bone","CoreEntity","computeTangents","normal","normals","uvs","nVertices","tangent","tangents","tan1","tan2","vA","vB","vC","uvA","uvB","uvC","sdir","tdir","groups","start","il","jl","handleTriangle","tmp","tmp2","n2","handleVertex","fromArray","isFinite","addScaledVector","dot","crossVectors","useGroups","isIndexed","attributesUsed","Set","morphAttributesUsed","morphAttributes","morphTargetsRelative","mergedGeometry","offset","addGroup","indexOffset","mergedIndex","getX","mergedAttribute","mergeBufferAttributes","numMorphTargets","morphAttributesToMerge","mergedMorphAttribute","TypedArray","normalized","arrayLength","isInterleavedBufferAttribute","interleaveAttributes","interleavedBuffer","res","getters","setters","iba","k","estimateBytesUsed","mem","attr","BYTES_PER_ELEMENT","getIndex","mergeVertices","tolerance","EPSILON","hashToIndex","vertexCount","nextIndex","attributeNames","attrArrays","morphAttrsArrays","newIndices","morphAttr","fill","decimalShift","log10","shiftMultiplier","hash","newarray","newMorphArrays","getterFunc","ml","oldAttribute","buffer","oldMorphAttribute","morphAttribute","toTrianglesDrawMode","drawMode","numberOfTriangles","newGeometry","clearGroups","accumulated_curve_point_indices","curve_point_indices","last_index_added","previous_index","create_line_segment_geometry","attrib_sizes_by_name","new_indices","new_attribute_values_by_name","line_segment_to_geometries","CoreGeometryUtilCurve","parsed","parseFloat","ensure_in_range","_found_node","expected_context","node_selection_context","VARIABLE_CONFIG_DEFAULT_BY_NAME","variable_name","GlobalsGeometryHandler","PRE_DEFINED_ATTRIBUTES","varying_definition","set_varying_body_line","handle_attribute_node","IF_RULE","GlobalsBaseController","_display_scene","_cameras_controller","CamerasController","_cooker","Cooker","CoreGraph","_missing_expression_references_controller","MissingReferencesController","_nodes_controller","NodesController","_time_controller","TimeController","set_scene","init","set_uuid","_uuid","wait_for_cooks_completed","_events_controller","EventsController","_lifecycle_controller","_loading_controller","LoadingController","_performance","CorePerformance","set_frame","play","pause","PolySceneSerializer","_uniforms_controller","UniformsController","_webgl_controller","WebGLController","PolyScene","ui_data_json","children_ids","input_ids","input_connection_output_indices","connection_input_indices","named_input_connections","named_output_connections","param_ids","to_json_params","override_clonable_state","inputs_clonable_state_with_override","selection","input_connections","to_json_params_from_names","param_names","include_components","ParamConstructorByType","BooleanParam","ButtonParam","ColorParam","FolderParam","IntegerParam","SeparatorParam","Vector2Param","Vector3Param","Vector4Param","_expression","_manager","is_expression_for_entities","ExpressionManager","parse_expression","update_from_method_dependency_name_change","compute_function","compute_expression_for_entities","entities","set_entities","reset_entities","compute_expression_for_points","compute_expression_for_objects","_entities","_entity_callback","addUnaryOp","addBinaryOp","string","parse_expression_for_string_param","nodes","arguments","callee","ease_i","power","ease_o","abs","ease_io","linear","ease_i2","ease_o2","ease_io2","ease_i3","ease_o3","ease_io3","ease_i4","ease_o4","ease_io4","ease_i_sin","ease_o_sin","ease_io_sin","ease_i_elastic","ease_o_elastic","ease_io_elastic","_state","_hooks","on_update","new_state","run_hooks","toggle","BaseFlag","domElement","quatInverse","lastPosition","lastQuaternion","document","Infinity","minZoom","maxZoom","minAzimuthAngle","maxAzimuthAngle","zoomSpeed","panSpeed","keyPanSpeed","autoRotate","autoRotateSpeed","LEFT","UP","RIGHT","BOTTOM","mouseButtons","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TWO","DOLLY_PAN","target0","position0","zoom0","zoom","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","saveState","scope","updateProjectionMatrix","changeEvent","STATE","NONE","inverse","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","makeSafe","radius","panOffset","setFromSpherical","lookAt","zoomChanged","distanceToSquared","EPS","removeEventListener","onContextMenu","onMouseDown","onMouseWheel","onTouchStart","onTouchEnd","onTouchMove","onMouseMove","onMouseUp","onKeyDown","startEvent","endEvent","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","rotateStart","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","getZoomScale","angle","rotateUp","panLeft","objectMatrix","setFromMatrixColumn","panUp","pan","deltaX","deltaY","isPerspectiveCamera","targetDistance","tan","fov","clientHeight","isOrthographicCamera","clientWidth","top","bottom","dollyIn","dollyScale","dollyOut","handleMouseDownRotate","event","clientX","clientY","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","handleTouchMoveRotate","subVectors","handleTouchMovePan","handleTouchMoveDolly","preventDefault","focus","button","ctrlKey","metaKey","shiftKey","handleMouseDownDolly","addEventListener","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","stopPropagation","handleMouseWheel","keyCode","handleKeyDown","handleTouchStartDollyPan","DOLLY_ROTATE","handleTouchStartDollyRotate","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","tabIndex","MapControls","add_globals_params","GlobalsGlNode","_definitions","_errored","_error_message","uniq","definitions_by_name","existing","uniq_definitions","_param_configs","param_config","create_and_push","ParamConfigsController","EVENT_CHANGE","BASE_CAMERA_DEFAULT","near","far","CameraTransformParamConfig","EVENT","set_master_camera","BaseCameraObjNodeClass","PARAM_CALLBACK_set_master_camera","CameraPostProcessParamConfig","CameraBackgroundParamConfig","LayerParamConfig","BaseCameraObjParamsConfig","_aspect","_background_controller","background_controller_constructor","_controls_controller","ControlsController","_layers_controller","_post_process_controller","layers_controller","background_controller","post_process_controller","update_camera","controls_controller","update_controls","on_create","on_delete","set_as_master_camera","set_master_camera_node_path","_update_for_aspect_ratio","update_transform_params_from_object","create_viewer","ThreejsViewer","TypedCameraObjNode","timestamp","_timestamp","performance","now","_core_geometries","_core_objects","_objects","core_objects","_create_core_objects","core_object","create_core_geometries","__geometry_from_object","geometry_from_object","isMesh","isLine","isPoints","from_objects","objects_from_group","group_name","core_objects_from_group","co","_compute_bounding_box","center","getCenter","getSize","bbox","Box3","expandByObject","first_geometry","rename_attrib","attrib_class","child","object_attrib_names","first_object","attrib_names_matching_mask","masks_string","matching_attrib_names","add_numeric_object_attrib","src_group","new_group","ComponentName","ATTRIB_NAMES","COMPONENT_INDICES","_core_geometry","remapped_name","component_index","remaped_name","value_index","attrib_value_index","start_index","_index","Vector4","_position","set_position","new_position","set_attrib_value_vector3","_normal","set_normal","new_normal","v2","v3","new_value_index","_array_index","_count","_current_count_index","_resolve","_max_time_per_chunk","max_time_per_chunk","_check_every_interations","check_every_interations","start_with_count","iteratee_method","_iteratee_method_count","_bound_next_with_count","next_with_count","start_time","start_with_array","_array","_iteratee_method_array","_bound_next_with_array","next_with_array","_current_array_element","CoreIterator","segments_count","arc_angle","radian_per_segment","point_radian","position_2d","positions_2d","CoreGeometryUtilCircle","_attribute_datas_by_name","data_keys_prefix","skip_entries","do_convert","convert_to_numeric","load","success_callback","progress_callback","error_callback","response","get_prefixed_json","catch","json","prefixes","first_prefix","set_json","core_geo","_find_attributes","convert_to_numeric_masks","attrib_values","_attribute_values_for_name","numerical_attrib_values","index_data","first_pt","_value_has_subentries","deep_attrib_name","deep_attrib_value","CoreAttributeData","json_element","JsonDataLoader","DRACOLoader","manager","decoderPath","decoderConfig","decoderBinary","decoderPending","workerLimit","workerPool","workerNextTaskID","workerSourceURL","defaultAttributeIDs","defaultAttributeTypes","setDecoderPath","setDecoderConfig","config","setWorkerLimit","setVerbosity","setDrawMode","setSkipDequantization","onLoad","onProgress","onError","loader","setPath","setResponseType","crossOrigin","setWithCredentials","taskConfig","attributeIDs","attributeTypes","useUniqueIDs","decodeGeometry","decodeDracoFile","worker","taskKey","taskCache","cachedTask","promise","byteLength","taskID","taskCost","geometryPending","_getWorker","_worker","postMessage","_createGeometry","finally","_releaseTask","geometryData","_loadLibrary","responseType","preload","_initDecoder","useJS","WebAssembly","librariesPending","libraries","jsContent","wasmBinary","fn","DRACOWorker","toString","lastIndexOf","URL","createObjectURL","Blob","Worker","_taskCosts","_taskLoad","onmessage","debug","terminate","decodeAttribute","draco","decoder","dracoGeometry","attributeName","attributeType","dracoArray","numComponents","num_components","numValues","num_points","DracoFloat32Array","GetAttributeFloatForAllPoints","Int8Array","DracoInt8Array","GetAttributeInt8ForAllPoints","Int16Array","DracoInt16Array","GetAttributeInt16ForAllPoints","Int32Array","DracoInt32Array","GetAttributeInt32ForAllPoints","DracoUInt8Array","GetAttributeUInt8ForAllPoints","DracoUInt16Array","GetAttributeUInt16ForAllPoints","Uint32Array","DracoUInt32Array","GetAttributeUInt32ForAllPoints","GetValue","destroy","onModuleLoaded","DracoDecoderModule","Decoder","decoderBuffer","DecoderBuffer","Init","decodingStatus","geometryType","GetEncodedGeometryType","TRIANGULAR_MESH","DecodeBufferToMesh","POINT_CLOUD","PointCloud","DecodeBufferToPointCloud","ok","ptr","error_msg","attributeID","self","GetAttributeByUniqueId","GetAttributeId","GetAttribute","numFaces","num_faces","indexArray","GetFaceFromMesh","buffers","WeakMap","releaseDecoderModule","getDecoderModule","geometry1","geometry0","process","geometry_wrapper0","geometry_wrapper1","segments0","segments1","geometries_by_segments_count","smallest_geometry","largest_geometry","smallest_segments","largest_segments","smallest_points","largest_points","smallest_points_count","all_points","points_indices","segment","matched_segment","CoreGeometryOperationSkin","NodeJsonImporter","ParamMultipleJsonImporter","ParamStringJsonImporter","ParamRampJsonImporter","JsonImportDispatcher","other_point","are_equal_json","json1","json2","_interpolation","_Math","generateUUID","json_point","interpolation","ramp","current_point","other_ramp_value","other_points","point1","point2","SceneEvent","INSERT_DEFINE_AFTER_MAP","INSERT_BODY_AFTER_MAP","LINES_TO_REMOVE_MAP","_shaders_by_name","_lines","_leaf_nodes","_frame_dependent","_resolution_dependent","compile","_template_shader_for_shader_name","_template_shader","vertexShader","fragmentShader","compile_allowed","shaders_by_name","_create_material","_build_lines","shader_names","template","_replace_template","root_nodes","build_uniforms","template_uniforms","new_uniforms","UniformsUtils","uniform","frame_dependent","resolution_dependent","root_nodes_by_shader_name","leaf_nodes_by_shader_name","CodeBuilder","build_code_from_nodes","code_builder","build_from_nodes","allow_new_param_configs","disallow_new_param_configs","builder_param_configs","builder_lines","line_type","lines","all_builder_lines","all_lines","_param_config_owner","param_config_owner","add_output_params","output_child","hidden","create_globals_node_output_connections","reset_configs","_reset_shader_configs","_reset_variable_configs","_reset_frame_dependency","_reset_resolution_dependency","_shader_configs","create_shader_configs","sc","ShaderConfig","_variable_configs","create_variable_configs","vc","VariableConfig","if","input_names_for_shader_name","root_node","insert_define_after","insert_body_after","lines_to_remove","function_declaration","FUNCTION_DECLARATION","define","DEFINE","BODY","template_lines","new_lines","line_before_define","line_before_body","line_before_define_found","line_before_body_found","template_line","_insert_lines","line_remove_required","line_to_remove","lines_to_add","line_to_add","get_custom_materials","TypedAssembler","_assembler","_leaves_graph_id","_graph_ids_by_shader_name","_outputs_by_graph_id","_depth_by_graph_id","_graph_id_by_depth","_shader_name","find_leaves_from_root_node","set_nodes_depth","depth","graph_id","leaves_from_nodes","LEAVES_FROM_NODES_SHADER","find_leaves","node_ids","nodes_from_ids","nodes_for_shader_name","depths","graph_ids_for_depth","node_from_id","sorted_nodes","ids","unique_inputs","booleans_by_graph_id","set_node_depth","current_depth","output_ids","output_id","TypedNodeTraverser","_id","__next_id","find_output_nodes","find_attribute_export_nodes","is_exporting","GlNodeFinder","AssemblerControllerNode","_compile_required","_deleted_params_data","_new_params","add_create_hook","set_assembler_globals_handler","_globals_handler","globals","output","set_compilation_required","trigger_node","compile_required","post_compile","assign_uniform_values","set_uniform_value","current_spare_param_names","assembler_param_names","spare_param_names_to_add","spare_param_names_to_remove","spare_params_with_same_name_as_params","param_exporter","required","params_data","param_options","post_create_spare_params","GlAssemblerController","cache","CacheSopNode","PARAM_CALLBACK_reset","is_cache_empty","toJSON","obj_loader","ObjectLoader","all_objects","param_callback_PARAM_CALLBACK_reset","mod","aa","execScript","DataView","f","POSITIVE_INFINITY","bufferSize","bufferType","resize","A","B","C","subarray","ba","ca","S","T","U","V","D","u","M","F","q","E","fa","G","H","I","J","K","L","da","ea","O","R","ga","Q","W","verify","ha","method","Y","Z","$","ia","X","ADAPTIVE","BLOCK","Zlib","_master_camera_node_path","camera_node_path","_find_any_camera","_queue","_block_level","_process_item_bound","_process_item","process_queue","enqueue","original_trigger_graph_node","blocked","delete","run_post_dirty_hooks","_next_id","Graph","directed","compound","multigraph","src_id","hasNode","setEdge","graph_has_cycle","alg","isAcyclic","removeEdge","clear_successors_cache_with_predecessors","src_id_s","dest_id_s","predecessor","successor","successor_ids","all_next_ids","next_ids","next_next_ids","next_next_id","all_predecessor_ids","all_successor_ids","_cooking_nodes_by_id","_resolves","flush","set_listener","events_listener","_events_listener","emitter","process_events","loaded","auto_updating","CONTEXT_OPTIONS","_next_renderer_id","_next_env_map_id","_renderers","_env_maps","_require_webgl2","set_require_webgl2","_rendering_context_webgl","webgl2","context_name","getContext","_polygon_id","flush_callbacks_with_renderer","first_renderer","first_id","renderers","wait_for_renderer","_node_register","_node_register_categories","_node_register_options","node_type","deregister_node","registered_nodes_for_context_and_parent_type","parent_node_type","registered_category","_lifecycle_on_create_allowed","on_create_hook_allowed","on_create_prevent","_loading_state","_auto_updating","_first_object_loaded","mark_as_loading","_set_loading_state","mark_as_loaded","set_auto_update","on_first_object_loaded","getElementById","parentElement","removeChild","references","next_id_s","register","jsep_node","missing_expression_reference","MissingExpressionReference","unregister","ref","check_for_references","refs","ref_id","resolve_with_node","found_graph_nodes","missing_paths","set_found_graph_nodes","graph_nodes","set_missing_paths","paths","ReferenceSearchResult","_node_context_signatures","_instanciated_nodes_by_context_and_type","_root","ObjectsManagerNode","init_display_scene","objects_from_mask","all_nodes","current_parents","current_parent","register_node_context_signature","node_context_signature","node_context_signatures","toLowerCase","add_to_instanciated_node","remove_from_instanciated_node","instanciated_nodes","nodes_by_ids","_queued_nodes_by_id","_queued_nodes_by_path","_expected_geo_nodes","_process_queue_start","add_on_child_add_hook","_on_child_add","add_on_child_remove_hook","_on_child_remove","multiple_display_flags_allowed","add_to_queue","path_id","expected_loading_geo_nodes_by_id","add_to_scene","get_parent_for_node","node_input","children_group","parent_object","used_in_scene","remove_from_scene","are_children_cooking","geo_nodes","node_by_id","geo_node","TypedBaseManagerNode","ManagerContainer","BaseManagerNodeClass","_dirty_count","_dirty","_dirty_timestamp","_post_dirty_hook_names","_post_dirty_hooks","set_forbidden_trigger_nodes","_forbidden_trigger_nodes","propagate","_cached_successors","clear_successors_cache","_width","_border_radius","_color","_layout_vertical","set_border_radius","border_radius","set_width","set_comment","comment","_comment","UI_DATA_COMMENT_UPDATED","set_color","is_layout_vertical","UI_DATA_POSITION_UPDATED","translate","snap","time_dependent","TimeDependentState","ErrorState","are_params_time_dependent","are_inputs_time_dependent","force_time_dependent","frame_node","unforce_time_dependent","_message","ERROR_UPDATED","_parent","is_selected","contains","separator","parent_full_path","on_set_parent","_on_set_parent_hooks","first_element","next_node","remainder","path_from_root","_context","_children","_children_by_type","_children_and_grandchildren_by_context","_is_dependent_on_children","_selection","dependent","_children_node","current_child_with_name","current_name","_add_to_nodes_by_type","available_children_classes","node_class","CREATED","child_node_json","lifecycle_controller","on_child_add","webgl_controller","first_input_connection","output_connection","old_src","old_output_index","old_dest","old_input_index","_remove_from_nodes_by_type","on_child_remove","DELETED","parent_id","node_id","add_to_children_and_grandchildren_by_context","remove_from_children_and_grandchildren_by_context","has_children_and_grandchildren_with_context","children_names","traverse_children","_node_ids","send_update_event","nodes_to_add","node_ids_to_add","nodes_to_remove","node_ids_to_remove","SELECTION_UPDATED","_creation_completed","_on_child_add_hooks","_on_child_remove_hooks","_on_create_hooks","_on_delete_hooks","set_creation_completed","execute_hooks_with_child_node","execute_hooks","add_delete_hook","hooks","_cooking","_cooks_count","_max_cook_time","_cook_time_with_inputs","_cook_time","_cook_time_params","_inputs_evaluation_required","disallow_inputs_evaluation","_init_cooking_state","_cooking_dirty_timestamp","dirty_timestamp","_init_cooking_start_time","perf_active","started","_cook_time_start","_start_cook_if_no_errors","is_cooking","_cook_time_with_inputs_start","evaluate_inputs_and_params","input_containers","input_container","input_clonable_state_with_override","eval_all","_increment_cooks_count","_terminate_cook_process","_record_cook_time","cook_time_end","_cook_time_params_start","record_node_cook_data","eval_required_inputs_p","_time_with_precision","time","METHODS","scene_successors","_find_scene_node_scene_nodes","SUCCESSORS","scene_predecessors","PREDECESSORS","base_nodes","start_node","_find_base_nodes_from_node","param_nodes_referree","scene_node","base_nodes_by_graph_node_id","uniq_base_nodes","className","add_param_referree","_params_referrees_by_graph_node_id","remove_param_referree","params_referree","node_by_graph_node_id","_programatic_visible_state","_update_visibility_and_remove_dirty_bound","update_visibility_and_remove_dirty","_ui_data_dependency_set","_default_options","options_controller","set_option","overriden","has_callback","get_callback","create_callback_from_string","callback_string","Function","cook_options","desktop_browse_option","desktop_browse_file_type","expr_option","menu_options","has_menu","node_selection_options","texture_as_env","texture_options","is_hidden","set_visible_state","VISIBLE_UPDATED","is_field_hidden","ui_data_depends_on_other_params","visibility_predecessors","predecessor_names","set_ui_data_dependency","_visibility_graph_node","update_visibility","expected_val","_blocked_emit","_blocked_parent_emit","_count_by_event_name","block_emit","unblock_emit","events_count","is_visible","value_serialized","frame_graph_node_id","_param_create_mode","_params_by_name","_params_list","_param_names","_non_spare_params","_spare_params","_non_spare_param_names","_spare_param_names","_params_added_since_last_params_eval","init_dependency_node","_params_node","init_from_params_config","_post_create_params","_update_caches","init_param_accessors","run_post_create_params_hook","current_names_in_accessor","getOwnPropertyNames","_remove_unneeded_accessors","configurable","names_to_remove","current_name_in_accessor","name_to_remove","set_with_type","param_with_type","get_float","get_operator_path","value_with_type","delete_params","child_name","existing_param","_eval_param","eval_params","_post_create_params_hook","_on_scene_load_hook_names","_on_scene_load_hooks","run_on_scene_load_hooks","parse_completed","parse_started","parsed_tree","function_generator","FunctionGenerator","dependencies_controller","parse_tree","compute_allowed","eval_function","eval_allowed","expression_string_generator","ExpressionStringGenerator","new_expression_string","NATIVE_MATH_METHODS_RENAMED","math_random","EASING_METHODS","DIRECT_EXPRESSION_FUNCTIONS","remaped","LITERAL_CONSTRUCT","LiteralConstructsController","GLOBAL_CONSTANTS","INDIRECT_EXPRESSION_METHODS","MethodModule","PROPERTY_OFFSETS","AsyncFunction","getPrototypeOf","_attribute_requirements_controller","AttributeRequirementsController","methods","method_index","method_dependencies","immutable_dependencies","function_main_string","function","function_body","assign_attributes_lines","attribute_presence_check_line","assign_arrays_lines","traverse_CallExpression","method_arguments","arg","literal_contruct","arguments_joined","direct_function_name","path_node","function_string","path_argument","path_argument_function","_create_method_and_dependencies","traverse_UnaryExpression","argument","argument_member_expression","attrib_node","property_node","var_attribute_size","var_array","traverse_Identifier","identifier_name_without_dollar_sign","direct_constant_name","traverse_Identifier_F","traverse_Identifier_FPS","traverse_Identifier_T","traverse_Identifier_CH","traverse_Identifier_CEX","_method_centroid","traverse_Identifier_CEY","traverse_Identifier_CEZ","method_constructor","method_dependency","set_jsep_node","Bbox","ch","Ch","centroid","Centroid","cop_res","CopRes","local","Local","opdigits","Opdigits","Point","PointsCount","Copy","str_chars_count","StrCharsCount","str_concat","StrConcat","str_index","StrIndex","str_sub","StrSub","VECTOR_NAMES","COMPONENT_NAMES","vector_name","_get_value_from_container","vector","_update_from_name_change_bound","_update_from_name_change","new_path","literal","listen_for_name_changes","node_in_path","set_resolved_graph_node","resolved_graph_node","set_unresolved_path","unresolved_path","nodes_in_path","is_index","stamp_node","stamp_value","resolution","request_asset_url","add_local_path","local_path_server_url","name_node","sub_string","range_start","range_size","_attribute_names","assign_attribute_line","assign_item_size_line","assign_array_line","var_attribute","cyclic_graph_detected","connect_immutable_dependencies","handle_method_dependencies","handle_method_dependency","node_simple","press_button","COMPONENT_NAMES_COLOR","COMPONENT_NAMES_VECTOR2","COMPONENT_NAMES_VECTOR3","COMPONENT_NAMES_VECTOR4","_frame","src_context","_connections","ConnectionsController","_inputs","InputsController","has_inputs","_outputs","OutputsController","has_outputs","_output_connections","max_inputs_count","_input_connections","add_input_connection","remove_input_connection","last_input_connection","add_output_connection","connections_by_id","remove_output_connection","_graph_node_inputs","_has_named_inputs","_min_inputs_count","_max_inputs_count","_depends_on_inputs","_override_clonable_state","depends_on_inputs","set_min_inputs_count","min_inputs_count","set_max_inputs_count","init_graph_node_inputs","_named_input_connection_points","connection_points","NAMED_INPUTS_UPDATED","_create_graph_node_input","graph_input_node","init_inputs_clonable_state","init_connections_controller_inputs","containers","eval_required_input","input_error_message","get_named_input_index","has_named_inputs","has_named_outputs","get_output_index","old_input_node","old_connection","NodeConnection","INPUTS_UPDATED","_on_update_hooks","remove_input","has_named_input","has_input","override_clonable_state_allowed","inputs_clonable_state","FROM_NODE","_inputs_clonable_states","input_cloned","ALWAYS","NEVER","_user_inputs_clonable_states","_default_inputs_clonale_state_values","set_override_clonable_state","OVERRIDE_CLONABLE_STATE_UPDATE","_node_src","_node_dest","_output_index","_input_index","_has_outputs","_has_named_outputs","set_has_no_output","has_named_output","get_named_output_index","_named_output_connection_points","named_output_connection","NAMED_OUTPUTS_UPDATED","output_indices","_started","_start_time","_previous_timestamp","_nodes_cook_data","_durations_by_name","_durations_count_by_name","profile","total_time","stop","PerformanceNode","update_cook_data","record","current_timestamp","print","print_node_cook_data","print_recordings","performance_nodes","print_objects","performance_node","cook_time_total","print_object","table_entries","table","durations_by_name","durations_count_by_name","durations","names_by_duration","sorted_durations","entry","duration_per_iteration","_cook_time_total","_cook_time_total_with_inputs","_cook_time_total_params","cook_time","cook_time_with_inputs","cook_time_params","cooks_count","cook_time_per_iteration","cook_time_total_with_inputs","cook_time_total_with_inputs_per_iteration","cook_time_total_params","cook_time_total_params_per_iteration","_frame_range","_frame_range_locked","_playing","_fps","_frame_interval","_next_frame_bound","play_next_frame","set_frame_range","start_frame","end_frame","FRAME_RANGE_UPDATED","set_frame_range_locked","start_locked","end_locked","set_fps","_ensure_frame_within_bounds","FRAME_UPDATED","uniforms_controller","update_frame_dependent_uniform_owners","increment_frame","decrement_frame","set_first_frame","PLAY_STATE_UPDATED","toggle_play_pause","playing","include_node_param_components","nodes_by_graph_node_id","params_by_graph_node_id","node_serializer","_frame_dependent_uniform_owners","_frame_dependent_uniform_owners_ids","_resolution","_resolution_dependent_uniform_owners","_resolution_dependent_uniform_owners_ids","add_frame_dependent_uniform_owner","_update_frame_dependent_uniform_owners_ids","remove_frame_dependent_uniform_owner","add_resolution_dependent_uniform_owner","_update_resolution_dependent_uniform_owners_ids","update_resolution_dependent_uniforms","remove_resolution_dependent_uniform_owner","update_resolution_dependent_uniform_owners","CopRegister","run","EventRegister","GlRegister","MatRegister","ObjRegister","SopRegister","poly","EnvMapCopNode","NullCopNode","SwitchCopNode","convert_texture_to_env_map","env_map","pmremGenerator","PMREMGenerator","exrCubeRenderTarget","fromEquirectangular","height","FLAG_BYPASS_UPDATED","FLAG_DISPLAY_UPDATED","Extension","load_url","set_texture_for_mapping","ext","_ext","VIDEO_EXTENSIONS","_load_as_video","loader_for_ext","ext_lowercase","EXR","HDR","BASIS","EXRLoader","RGBELoader","setDataType","UnsignedByteType","BasisTextureLoader","setTranscoderPath","detectSupport","TextureLoader","video","createElement","onloadedmetadata","source","VIDEO_SOURCE_TYPE_BY_EXT","_default_video_source_type","appendChild","pixel_data","img","drawImage","getImageData","PARAM_ENV_DEFAULT","ogg","ogv","mp4","rgbe_error","rgbe_error_code","msg","fgets","lineLimit","consume","pos","len","chunk","String","fromCharCode","RGBEByteToRGBHalf","floatView","int32View","toHalf","bits","sourceArray","sourceOffset","destArray","destOffset","byteArray","rgbe_header_info","line","gamma_re","exposure_re","format_re","dimensions_re","header","valid","comments","programtype","format","gamma","exposure","charAt","RGBE_ReadHeader","image_rgba_data","data_rgba","byteValue","scanline_buffer","ptr_end","off","isEncodedRun","rgbeStart","scanline_width","num_scanlines","RGBE_ReadPixels_RLE","numElements","floatArray","halfArray","texData","encoding","generateMipmaps","flipY","transcoderPath","transcoderBinary","transcoderPending","workerConfig","astcSupported","etcSupported","dxtSupported","pvrtcSupported","extensions","BASIS_FORMAT","cTFASTC_4x4","cTFBC3","cTFPVRTC1_4_RGBA","cTFETC1","_createTexture","texturePending","_allocateWorker","mipmaps","cTFBC1","DXT_FORMAT_MAP","cTFPVRTC1_4_RGB","_initTranscoder","jsLoader","binaryLoader","binaryContent","BasisWorker","cTFETC2","cTFBC4","cTFBC5","cTFBC7_M6_OPAQUE_ONLY","cTFBC7_M5","cTFATC_RGB","cTFATC_RGBA_INTERPOLATED_ALPHA","cTFRGBA32","cTFRGB565","cTFBGR565","cTFRGBA4444","DXT_FORMAT","COMPRESSED_RGB_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","_BasisFile","BasisModule","onRuntimeInitialized","BasisFile","initializeBasis","hasAlpha","basisFile","getImageWidth","getImageHeight","levels","getNumLevels","getHasAlpha","cleanup","close","startTranscoding","mip","mipWidth","mipHeight","dst","getImageTranscodedSizeInBytes","transcodeImage","transcode","CameraMapControlsEventNode","apply_controls","html_element","controls_id","TypedEventNode","EventContainer","_eval_all_params_on_dirty_bound","_eval_all_params_on_dirty","BaseEventNodeClass","ConstantGlNode","FloatToVec3GlNode","OutputGlNode","ParamGlNode","ParamValuetoInitValueMap","v4","typed_visible_options","value_bool","value_int","value_float","value_vec2","value_vec3","value_vec4","update_output_type","_current_param","_current_connection_type","_current_var_name","_params_by_type","current_connection","as_color","_update_if_type_changed_bound","_update_if_type_changed","_uniform_name","from_param","_uniform","_create_uniform","uniform_by_type","callback_bound","_callback","has_value_changed","is_video_texture","set_uniform_value_from_texture","set_uniform_value_from_ramp","param_constructor","_cached_param_value","has_changed","clone_value","MeshBasicMatNode","MeshBasicBuilderMatNode","MeshLambertMatNode","MeshStandardMatNode","PointsMatNode","has_material","_create_assembler_controller","ShaderAssemblerBasic","compile_if_required","_compile","TypedBuilderMatNode","ShaderLib","basic","template_shader","ShaderMaterial","lights","ShaderAssemblerMesh","ASSEMBLER_MAP","DISTANCE","ShaderAssemblerCustomMeshDistance","DEPTH","ShaderAssemblerCustomMeshDepth","DEPTH_DOF","ShaderAssemblerCustomMeshDepthDOF","output_nodes","_update_shaders","new_vertex_shader","new_fragment_shader","_input_names","_dependencies","_param_configs_set_allowed","_function_declared","node_traverser","nodes_by_shader_name","root_nodes_for_shader","leaf_nodes_for_shader","leaf_node","sorted_node_ids","_shaders_collection_controller","ShadersCollectionController","set_current_shader_name","set_code_lines","lines_map","add_code_lines","add_code_line_for_nodes_and_line_type","definition_type","node_definitions","collection","errored","first_definition","CodeFormatter","node_comment","line_wrap","post_line_separator","nodes_count","is_last","add_code_line_for_node_and_line_type","_shader_names","_current_shader_name","_lines_controller_by_shader_name","LinesController","lines_controller","_definitions_by_node_id","_body_lines_by_node_id","LINE_SUFFIXES","LINE_PREFIXES","add_suffix","distanceRGBA","defines","DEPTH_PACKING","RGBADepthPacking","BasicDepthPacking","mNear","mFar","_assembler_controller","is_root","inputs_data","selected_children","selected_ids","override","add_custom","node_exporter","components_data","exporter","TextureEnvMapParamConfig","texture_env_map_controller","TextureEnvMapController","envMapIntensity","env_map_intensity","use_env_map","TextureEnvMaterial","PointsParamConfig","size_attenuation","sizeAttenuation","AmbientLightObjNode","AreaLightObjNode","DirectionalLightObjNode","HemisphereLightObjNode","PointLightObjNode","SpotLightObjNode","EventsObjNode","MaterialsObjNode","CopObjNode","PostProcessObjNode","GeoObjNode","NullObjNode","OrthographicCameraObjNode","PerspectiveCameraObjNode","FogObjNode","AmbientLight","has_object","AreaLightParamConfig","RectAreaLight","RectAreaLightUniformsLib","initialized","DirectionalLightParamConfig","cast_shadows","shadow_res","shadow_bias","_helper_controller","DirectionalLightHelper","DirectionalLight","bias","mapSize","_target_target","_square","Line","_line_material","rotateX","setScalar","sky_color","ground_color","HemisphereLightHelper","HemisphereLight","groundColor","OctahedronBufferGeometry","_quat","_default_position","_color1","_color2","rotateZ","colors","BufferAttribute","setRotationFromQuaternion","setXYZ","decay","shadow_near","shadow_far","PointLightHelper","PointLight","SphereBufferGeometry","penumbra","SpotLightHelper","SpotLight","_cone","p1","p2","coneLength","coneWidth","DisplayNodeController","_sop_group","_create_sop_group","set_sop_group_name","sop_group","request_display_node","display_node","post_display_flag_node_set_dirty","post_add_node","_children_uuids_dict","_children_length","_request_display_node_container_bound","request_display_node_container","_display_node","set_parent_object","_parent_object","new_display_node","old_display_node","remove_children","new_objects","new_objects_are_different","AxesHelper","DEFAULT","density","exponential","_linear_fog","Fog","getHex","_linear_fogexp2","FogExp2","OrthographicCameraObjParamConfigMixin","OrthographicCameraBackgroundController","OrthographicCamera","horizontal_size","_applied_controls_by_element_id","_controls_node","controls_param","controls_node","dispose_control_refs","controls_aleady_applied","CameraControlsConfig","set_controls_events","dispose_controls","controls_start_listener","on_controls_start","controls_end_listener","on_controls_end","_camera_node_id","_controls","other_config","camera_node_id","overrideMaterial","clearColor","clearDepth","writeBuffer","readBuffer","oldClearColor","oldClearAlpha","oldAutoClear","autoClear","getClearColor","getClearAlpha","setClearColor","setRenderTarget","autoClearColor","autoClearDepth","autoClearStencil","do_render","_animate_method","animate","_canvas","random","style","outline","classList","_set_events","_build","_init_display","activate","_cancel_animate","onresize","on_resize","compute_size_and_aspect","prepare_current_camera","_request_animation_frame_id","requestAnimationFrame","cancelAnimationFrame","BaseViewer","_active","_init_from_scene","deactivate","set_camera_node","master_camera_node","reset_container_class","set_container_class_hovered","viewer","_camera_node","_size","_update_graph_node","create_controls","_create_graph_node","update_camera_aspect","_update_size","_get_aspect","offsetWidth","offsetHeight","_update_from_camera_container","_bound_on_controls_start","_on_controls_start","_bound_on_controls_end","_on_controls_end","_mousedown_pos","_mouse_distance_travelled","_bound_on_mousedown","_on_mousedown","_bound_on_mousemove","_on_mousemove","_bound_on_mouseup","_on_mouseup","MouseEvent","onwebglcontextlost","_on_webglcontextlost","onwebglcontextrestored","_on_webglcontextrestored","request_animation_frame_id","PerspectiveCameraObjParamConfigMixin","PerspectiveCameraBackgroundController","PerspectiveCamera","SCREEN_COORD","bl","br","tl","tr","CORNER_NAMES","_bg_corner","_bg_center","corner_name","_update_corner_vector","distanceTo","z_ratio","desired_ratio","coord","setFromCamera","ray","direction","origin","AddSopNode","AnimationCopySopNode","AnimationMixerSopNode","AttribAddMultSopNode","AttribCopySopNode","AttribCreateSopNode","AttribDeleteSopNode","AttribNormalizeSopNode","AttribPromoteSopNode","AttribRemapSopNode","AttribRenameSopNode","AttribTransferSopNode","BboxScatterSopNode","BlendSopNode","BoxSopNode","CircleSopNode","ColorSopNode","CopySopNode","DataSopNode","DataUrlSopNode","DelaySopNode","DeleteSopNode","FaceSopNode","FileSopNode","FuseSopNode","HexagonsSopNode","HierarchySopNode","JitterSopNode","LayerSopNode","LineSopNode","MaterialSopNode","MergeSopNode","NoiseSopNode","NormalsSopNode","NullSopNode","ObjectMergeSopNode","OcclusionSopNode","PeakSopNode","PlaneSopNode","PointSopNode","PolywireSopNode","RaySopNode","ResampleSopNode","ScatterSopNode","SkinSopNode","ShadowsSopNode","SphereSopNode","SwitchSopNode","TextSopNode","TorusSopNode","TorusKnotSopNode","TransformSopNode","TubeSopNode","UvProjectSopNode","create_point","open","connect_to_last_point","_create_point","_get_points","index_array","_positions","_get_positions","_triangle","_get_triangle","_deltas","_get_deltas","getArea","random_position","seed","weights","deltas","attrib_value_at_position","barycentric_coordinates","getBarycoord","new_attrib_value","sum","point_values","weighted_value","interpolated_value","face","intersect_point","point_indices","position_attrib_array","point_positions","attrib_array","dist_to_points","distance_total","point_indx","objects_count","objects_visible_count","objects_count_by_type","count_by_type","objects_names_by_type","names_by_type","vertex_attribute_names","vertex_attribute_sizes_by_name","sizes_by_name","vertex_attribute_types_by_name","types_by_name","object_attribute_names","core_group_target","target_object","src_animations","prepare","PARAM_CALLBACK_prepare","_previous_time","_mixer","_actions_by_name","_values_by_param_name","_update_mixer","create_mixer","_animation_target","AnimationMixer","prev_value","action","clipAction","materials_by_id","object3d","morphTargets","_update_mixer_weights","_update_mixer_time","cache_value","setEffectiveWeight","prepare_animation_mixer","pre_add","mult","post_add","_update_attrib","tnew_name","core_group_dest","core_group_src","copy_vertex_attribute_between_core_groups","src_objects","dest_objects","dest_geometry","copy_vertex_attribute_between_geometries","src_attrib","src_points_count","dest_points_count","sub_array","dest_name","class","value1","for_entities","value2","value3","value4","_x_arrays_by_geometry_uuid","_y_arrays_by_geometry_uuid","_z_arrays_by_geometry_uuid","_w_arrays_by_geometry_uuid","add_point_attribute","add_object_attribute","add_numeric_attribute_to_points","add_string_attribute_to_points","add_numeric_attribute_to_object","add_string_attribute_to_object","vparam","component_param","arrays_by_geometry_uuid","_init_array_if_required","tmp_array","string_values","current_array","delete_vertex_attribute","delete_object_attribute","change_name","_normalize_attribute","normalized_values","normalized_value","target_name","AttribPromoteMode","PromoteModeMenuEntries","MIN","MAX","FIRST_FOUND","class_from","class_to","_values_per_attrib_name","_filtered_values_per_attrib_name","_core_group","_core_object","find_values","filter_values","set_values","find_values_from_points","find_values_from_object","set_values_to_points","set_values_to_object","_remap_attribute","only_integer_values","sorted_values","sorted_value","dest_group","max_samples_count","distance_threshold","blend_width","_core_group_dest","dest_points","_core_group_src","_attrib_names","_error_if_attribute_not_found_on_second_input","_build_octree_if_required","_add_attribute_if_required","_transfer_attributes","second_input_changed","_octree_timestamp","_prev_param_src_group","points_src","_octree","CoreOctree","set_points","_transfer_attributes_for_point","dest_point","total_dist","nearest_points","find_points","_interpolate_points","point_dest","src_points","CoreInterpolate","perform","blend_with","_interpolate_with_1_point","_interpolate_with_multiple_points","point_src","position_dest","position_src","value_src","_weighted_value_from_distance","_weight_from_distance","value_dest","blend","weighted_values_src","current_position","other_positions","_weights_from_2","_weights_from_3","dist_to_positions","other_position","OctreeNode","max_points_count","sphere","Sphere","found_points","intersects_sphere","points_in_sphere","_bbox","_level","_leaves_by_octant","_points_by_octant_id","_leaves","_bounding_boxes_by_octant","_bounding_boxes_by_octant_prepared","_center","level","intersectsSphere","accumulated_points","containsPoint","leaf","add_point","octant_ids","octant_id","create_leaf","_leaf_bbox","_octant_id","_prepare_leaves_bboxes","_bbox_center","x_pos","y_pos","z_pos","corner","bbox_centers","bbox_size_quarter","bbox_center","object0","object1","core_group0","core_group1","objects0","objects1","attrib0","attrib1","c0","c1","attrib0_array","attrib1_array","divisions","_core_transform","_cook_with_input","_cook_without_input","BoxBufferGeometry","DEFAULT_UP","_create_circle","_create_disk","CircleBufferGeometry","DEFAULT_COLOR","from_attribute","as_hsv","_r_arrays_by_geometry_uuid","_g_arrays_by_geometry_uuid","_b_arrays_by_geometry_uuid","_set_from_attribute","_eval_expressions","_eval_simple_values","_create_init_color","src_attrib_size","src_array","dest_array","dest_i","src_i","new_color","CoreColor","set_hsv","_update_from_param","tmp_array_r","tmp_array_g","tmp_array_b","_commit_tmp_values","target_array","euclideanModulo","setHSL","transform_only","copy_attributes","attributes_to_copy","use_copy_expr","_attribute_names_to_copy","container0","container1","cook_with_template","cook_without_template","instance_core_group","template_core_group","template_points","instancer","CoreInstancer","instance_matrices","matrices","_copy_moved_objects_on_template_points","_copy_moved_object_on_template_point","template_point","set_point","_get_moved_objects_for_template_point","moved_object","_copy_attributes_from_template","_stamp_instance_group_if_required","moved_objects","_copy_moved_objects_for_each_instance","_copy_moved_objects_for_instance","set_global_index","stamped_instance_core_group","_stamp_node","create_stamp_node","CopyStamp","SCALE","PSCALE","EYE","DEFAULT_UV","_group_wrapper","_matrices","_is_pscale_present","_is_scale_present","_is_normal_present","_is_up_present","_do_rotate_matrices","_matrix_from_point","pscale","scale_matrix","makeScale","translate_matrix","makeTranslation","multiply","rotate_matrix","eye","create_instance_buffer_geo","geometry_to_instance","instance_pts","InstancedBufferGeometry","instances_count","scales","orients","has_color","instance_pt","index3","index4","has_uv","index2","InstancedBufferAttribute","pt","_global_index","_point","DEFAULT_DATA_STR","json_data_keys_prefix","_on_load","_on_error","inputs_contents","ComparisonOperator","ComparisonOperatorMenuEntries","invert","hide_objects","by_object_type","by_expression","by_attrib","attrib_string","attrib_numeric","attrib_comparison_operator","by_bbox","bbox_size","by_visible","keep_points","_marked_for_deletion_per_object_index","_bbox_cache","_eval_for_points","_eval_for_objects","objects_to_keep","_eval_expressions_for_objects","_eval_type_for_objects","_eval_attrib_for_objects","marked_for_deletion","object_index","point_objects_from_deleted_objects","_point_object","init_points_count","_eval_expressions_for_points","_eval_attrib_for_points","_eval_bbox_for_points","kept_points","keep_point","first_attrib_value","comparison_attrib_value","_comparison","attrib_ComparisonOperator","object_type_name","attrib_float","in_bbox","core_points","make_faces_unique","add_face_center_attribute","add_face_id","_make_faces_unique","_add_face_center_attribute","_add_face_id","_transform_faces","current_value","face_center","fi","pi","always_reference_asset","CoreLoaderGeometry","on_success","on_error","load_auto","on_load_success","object2","on_load_succes_gltf","on_load_succes_drc","gltf","loader_for_gltf","loader_for_glb","loader_for_drc","loader_for_obj","GLTFLoader","draco_loader","setDRACOLoader","OBJLoader","object_pattern","material_library_pattern","material_use_pattern","map_use_pattern","ParserState","vertices","materialLibraries","startObject","fromDeclaration","previousMaterial","currentMaterial","_finalize","smooth","startMaterial","previous","inherited","groupCount","mtllib","isArray","groupStart","groupEnd","cloned","end","lastMultiMaterial","mi","declared","finalize","parseVertexIndex","parseNormalIndex","parseUVIndex","addVertex","addVertexPoint","addVertexLine","addNormal","addColor","addUV","addUVLine","addFace","ua","ub","uc","na","nb","nc","vLen","ib","ic","uvLen","nLen","addPointGeometry","vi","addLineGeometry","uvi","text","setMaterials","lineFirstChar","trimLeft","trim","vertexData","faceVertices","vertex","vertexParts","v1","lineParts","lineVertices","lineUVs","li","llen","parts","pointData","exec","concat","hasVertexColors","buffergeometry","mesh","createdMaterials","miLen","sourceMaterial","materialPoints","materialLine","flatShading","timeEnd","dist","_fuse_core_object","points_by_position","hexagon_radius","points_only","CoreGeometryOperationHexagon","_param_size","_param_hexagon_radius","_param_points_only","side_length","half_side_length","HierarchyMode","HIERARCHY_MODES","ADD_PARENT","REMOVE_PARENT","_add_parent_to_core_group","_remove_parent_from_core_group","_add_parent_to_object","new_parent","_add_new_parent","new_parent2","_remove_parent_from_object","new_child","current_children","_get_children_from_objects","amount","last_pt","i_n","apply_to_children","core_groups","grand_child","apply_material","INPUT_NAME","compact","input_core_group","_make_compact","objects_by_type","merged_objects","isLineSegments","Operation","Operations","ADD","SET","MULT","SUBSTRACT","DIVIDE","freq","octaves","amp_attenuation","freq_increase","use_normals","operation","compute_normals","_simplex_by_seed","_rest_points","core_group_rest","_rest_core_group_timestamp","simplex","_get_simplex","target_attrib_size","rest_point","current_attrib_value","noise_value","noise","_fbm","divide","amplitude","noise3d","_create_simplex","random_generator","SimplexNoise","grad3","grad4","perm","dot3","dot4","xin","yin","i1","j1","G2","x0","y0","x1","y1","x2","y2","ii","jj","gi0","gi1","gi2","t0","t1","t2","zin","k1","i2","j2","k2","G3","z0","z1","z2","x3","y3","z3","kk","gi3","t3","noise4d","l1","l2","i3","j3","k3","l3","F4","G4","w0","w1","w2","w3","x4","y4","z4","w4","ll","gi4","t4","edit","update_x","update_y","update_z","recompute","_eval_expressions_for_core_group","_invert_normals","_eval_expressions_for_core_object","normal_attrib","geometry_node","import_input","samples","sep","buffer_resolution","_process_occlusion_on_object","normal_array","aoSampler","cells","sample","ao","report","child_object","ROTATE_START","ROTATE_END","use_segments_count","_create_plane","size2d","update_normals","tmp_array_x","tmp_array_y","tmp_array_z","do_update_param","value_param","do_update","new_array","_array_for_component","DEFAULT_R","DEFAULT_S","segments_radial","closed","_geometries","_create_tube","line_segment","current_points","_create_tube_from_points","circle_template","circles","new_circle","circle","prev_circle","_skin","MAT_DOUBLE_SIDED","transfer_face_normals","_bound_assign_mat","_assign_double_sided_material_to_object","_raycaster","double_sided_material","core_group_collision","first_intersect","_assign_double_sided_material_to_core_group","intersectObjects","METHOD","CURVE_TYPE","POINTS_COUNT","SEGMENT_LENGTH","CURVE_TYPES","CENTRIPETAL","CHORDAL","CATMULLROM","curve_type","tension","segment_length","resampled_objects","resampled_object","_resample","_create_curve_from_points","old_curve_positions","curve","CatmullRomCurve3","new_curve_points","_get_points_from_curve","getSpacedPoints","getLength","transfer_attributes","attributes_to_transfer","add_id_attribute","areas_thresholds","area_sum","area_by_face_index","area","sorted_faces","attrib_values_by_name","face_index","cast_shadow","receive_shadow","process_one_input","process_two_inputs","line_segments0","_get_line_segments","first_line_segment","prev_src_geometry","line_segments1","line_segments","smallest_array","largest_array","other_line_segment","other_geo","SphereType","SPHERE_TYPE","isocahedron","SPHERE_TYPES","ISOCAHEDRON","angle_range_x","angle_range_y","detail","_create_default_sphere","_create_default_isocahedron","IcosahedronBufferGeometry","TEXT_TYPE","opentype","TEXT_TYPES","FLAT","STROKE","font","multiline","extrude","stroke_width","_font_loader","FontLoader","_loaded_fonts","_load_url","_create_geometry_from_type_mesh","_create_geometry_from_type_flat","_create_geometry_from_type_line","_create_geometry_from_type_stroke","displayed_text","parameters","curveSegments","TextBufferGeometry","err","shapes","_get_shapes","ShapeBufferGeometry","shapes_from_font","getPoints","_svg_loader","_load_svg_loader","getStrokeStyle","shape","pointsToStroke","holeShapes","holes","hole","generateShapes","elements2","_load_ttf","_load_json","_ttf_loader","_load_ttf_loader","fnt","TTFLoader","reversed","arraybuffer","reverseCommands","commands","command","glyphs","unitsPerEm","glyphIndexMap","cmap","unicodes","unicode","glyph","token","advanceWidth","x_min","xMin","x_max","xMax","fromCodePoint","familyName","getEnglishName","ascender","descender","underlinePosition","tables","post","underlineThickness","head","yMin","yMax","original_font_information","radius_tube","segments_tube","TorusBufferGeometry","TorusKnotBufferGeometry","look_at","pivot","applyMatrix4","segments_height","cap","CylinderBufferGeometry","_camera_controller","CameraController","_update_uvs_from_camera","_processed_core_group","_camera_object","set_target","remove_target","look_at_target","matrixWorld","uvw","_vector_in_camera_space","obj_world_matrix","project","_update_always","_listener_added","_listener","_execute_callback","_remove_camera_event","old_target","_target","_add_camera_event","set_update_always","new_update_always","_current_event_name","CHANGE","MOVEEND","load_data","SceneJsonImporter","importer","process_ui_data","create_nodes","set_selection","set_flags","set_params","from_data_custom","process_inputs_data","set_inputs","process_nodes_ui_data","node_name","importers","input_data","input_node_name","node_data","param_data","_is_param_data_complex","_process_param_data_complex","_process_param_data_simple","has_param_and_same_type","LINE_BREAK_REGEXP","CopyShader","ShaderPass","shader","textureID","fsQuad","MaskPass","writeValue","clearValue","setMask","setLocked","stencil","setTest","setOp","REPLACE","setFunc","setClear","EQUAL","KEEP","ClearMaskPass","renderTarget","stencilBuffer","_pixelRatio","getPixelRatio","_height","WebGLRenderTarget","renderTarget1","renderTarget2","copyPass","clock","Clock","swapBuffers","pass","insertPass","isLastEnabledPass","passIndex","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","NOTEQUAL","effectiveWidth","effectiveHeight","pixelRatio","load_scene","create_scene","perspective_camera1","geo1","test_save_and_load","scene2","data2","Tester","stylesheet","innerText"],"mappings":";aACE,SAASA,EAAqBC,GAQ7B,IAPA,IAMIC,EAAUC,EANVC,EAAWH,EAAK,GAChBI,EAAcJ,EAAK,GACnBK,EAAiBL,EAAK,GAIHM,EAAI,EAAGC,EAAW,GACpCD,EAAIH,EAASK,OAAQF,IACzBJ,EAAUC,EAASG,GAChBG,OAAOC,UAAUC,eAAeC,KAAKC,EAAiBX,IAAYW,EAAgBX,IACpFK,EAASO,KAAKD,EAAgBX,GAAS,IAExCW,EAAgBX,GAAW,EAE5B,IAAID,KAAYG,EACZK,OAAOC,UAAUC,eAAeC,KAAKR,EAAaH,KACpDc,EAAQd,GAAYG,EAAYH,IAKlC,IAFGe,GAAqBA,EAAoBhB,GAEtCO,EAASC,QACdD,EAASU,OAATV,GAOD,OAHAW,EAAgBJ,KAAKK,MAAMD,EAAiBb,GAAkB,IAGvDe,IAER,SAASA,IAER,IADA,IAAIC,EACIf,EAAI,EAAGA,EAAIY,EAAgBV,OAAQF,IAAK,CAG/C,IAFA,IAAIgB,EAAiBJ,EAAgBZ,GACjCiB,GAAY,EACRC,EAAI,EAAGA,EAAIF,EAAed,OAAQgB,IAAK,CAC9C,IAAIC,EAAQH,EAAeE,GACG,IAA3BX,EAAgBY,KAAcF,GAAY,GAE3CA,IACFL,EAAgBQ,OAAOpB,IAAK,GAC5Be,EAASM,EAAoBA,EAAoBC,EAAIN,EAAe,KAItE,OAAOD,EAIR,IAAIQ,EAAmB,GAKnBhB,EAAkB,CACrBiB,GAAI,GAGDZ,EAAkB,GAGtB,SAASS,EAAoB1B,GAG5B,GAAG4B,EAAiB5B,GACnB,OAAO4B,EAAiB5B,GAAU8B,QAGnC,IAAIC,EAASH,EAAiB5B,GAAY,CACzCK,EAAGL,EACHgC,GAAG,EACHF,QAAS,IAUV,OANAhB,EAAQd,GAAUW,KAAKoB,EAAOD,QAASC,EAAQA,EAAOD,QAASJ,GAG/DK,EAAOC,GAAI,EAGJD,EAAOD,QAKfJ,EAAoBO,EAAInB,EAGxBY,EAAoBQ,EAAIN,EAGxBF,EAAoBS,EAAI,SAASL,EAASM,EAAMC,GAC3CX,EAAoBY,EAAER,EAASM,IAClC5B,OAAO+B,eAAeT,EAASM,EAAM,CAAEI,YAAY,EAAMC,IAAKJ,KAKhEX,EAAoBgB,EAAI,SAASZ,GACX,oBAAXa,QAA0BA,OAAOC,aAC1CpC,OAAO+B,eAAeT,EAASa,OAAOC,YAAa,CAAEC,MAAO,WAE7DrC,OAAO+B,eAAeT,EAAS,aAAc,CAAEe,OAAO,KAQvDnB,EAAoBoB,EAAI,SAASD,EAAOE,GAEvC,GADU,EAAPA,IAAUF,EAAQnB,EAAoBmB,IAC/B,EAAPE,EAAU,OAAOF,EACpB,GAAW,EAAPE,GAA8B,iBAAVF,GAAsBA,GAASA,EAAMG,WAAY,OAAOH,EAChF,IAAII,EAAKzC,OAAO0C,OAAO,MAGvB,GAFAxB,EAAoBgB,EAAEO,GACtBzC,OAAO+B,eAAeU,EAAI,UAAW,CAAET,YAAY,EAAMK,MAAOA,IACtD,EAAPE,GAA4B,iBAATF,EAAmB,IAAI,IAAIM,KAAON,EAAOnB,EAAoBS,EAAEc,EAAIE,EAAK,SAASA,GAAO,OAAON,EAAMM,IAAQC,KAAK,KAAMD,IAC9I,OAAOF,GAIRvB,EAAoB2B,EAAI,SAAStB,GAChC,IAAIM,EAASN,GAAUA,EAAOiB,WAC7B,WAAwB,OAAOjB,EAAgB,SAC/C,WAA8B,OAAOA,GAEtC,OADAL,EAAoBS,EAAEE,EAAQ,IAAKA,GAC5BA,GAIRX,EAAoBY,EAAI,SAASgB,EAAQC,GAAY,OAAO/C,OAAOC,UAAUC,eAAeC,KAAK2C,EAAQC,IAGzG7B,EAAoB8B,EAAI,GAExB,IAAIC,EAAaC,OAAqB,aAAIA,OAAqB,cAAK,GAChEC,EAAmBF,EAAW5C,KAAKuC,KAAKK,GAC5CA,EAAW5C,KAAOf,EAClB2D,EAAaA,EAAWG,QACxB,IAAI,IAAIvD,EAAI,EAAGA,EAAIoD,EAAWlD,OAAQF,IAAKP,EAAqB2D,EAAWpD,IAC3E,IAAIU,EAAsB4C,EAI1B1C,EAAgBJ,KAAK,CAAC,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,IAEpCM,I,yFCtJT,YAEA,SAuFA,EAKC,SAAmB0C,EAAgBC,EAA8CC,GAA9D,KAAAF,OAAgB,KAAAC,aAA8C,KAAAC,WALrE,EAAAC,gBAgBb,+BAqFA,OA9EQ,EAAAC,OAAP,SACCH,EACAC,GAEA,OAAO,IAAIC,EAAgC,EAAAE,UAAUD,OAAQH,EAAYC,IAEnE,EAAAI,QAAP,SACCL,EACAC,GAEA,OAAO,IAAIC,EAAiC,EAAAE,UAAUC,QAASL,EAAYC,IAErE,EAAAK,MAAP,SACCN,EACAC,GAEA,OAAO,IAAIC,EAA+B,EAAAE,UAAUE,MAAON,EAAYC,IAEjE,EAAAM,MAAP,SACCP,EACAC,GAEA,OAAO,IAAIC,EAA+B,EAAAE,UAAUG,MAAOP,EAAYC,IAEjE,EAAAO,OAAP,SACCR,EACAC,GAEA,YAHA,IAAAD,MAAA,MAGO,IAAIE,EAAgC,EAAAE,UAAUI,OAAQR,EAAYC,IAEnE,EAAAQ,QAAP,SACCT,EACAC,GAEA,OAAO,IAAIC,EAAiC,EAAAE,UAAUK,QAAST,EAAYC,IAErE,EAAAS,cAAP,SACCV,EACAC,GAEA,OAAO,IAAIC,EAAuC,EAAAE,UAAUM,cAAeV,EAAYC,IAEjF,EAAAU,KAAP,SACCX,EACAC,GAEA,YAHA,IAAAD,MAAqD,EAAAY,UAAUC,eAGxD,IAAIX,EAA8B,EAAAE,UAAUO,KAAMX,EAAYC,IAE/D,EAAAa,UAAP,SACCd,EACAC,GAEA,YAHA,IAAAD,MAAA,MAGO,IAAIE,EAAmC,EAAAE,UAAUU,UAAWd,EAAYC,IAEzE,EAAAc,OAAP,SACCf,EACAC,GAEA,YAHA,IAAAD,MAAA,IAGO,IAAIE,EAAgC,EAAAE,UAAUW,OAAQf,EAAYC,IAEnE,EAAAe,QAAP,SACChB,EACAC,GAEA,OAAO,IAAIC,EAAiC,EAAAE,UAAUY,QAAShB,EAAYC,IAErE,EAAAgB,QAAP,SACCjB,EACAC,GAEA,OAAO,IAAIC,EAAiC,EAAAE,UAAUa,QAASjB,EAAYC,IAErE,EAAAiB,QAAP,SACClB,EACAC,GAEA,OAAO,IAAIC,EAAiC,EAAAE,UAAUc,QAASlB,EAAYC,IAE7E,EArFA,GAAa,EAAAkB,cAuFb,mBAAa,EAAAC,oB,qFC9JRC,E,OA7BL,2BACA,4BACA,QACA,QACA,SACA,SAGA,SACA,SAEA,QAGA,SAeA,SAAKA,GACJ,4CACA,kCACA,sCACA,oCACA,4CACA,wCAND,CAAKA,MAAO,KASZ,IACMC,EAAsB,CADA,qEAG5B,yE,OACC,EAAAC,qBAAoE,IAAI,EAAAC,yBACvE,EACA,EAAAC,mBAEe,EAAAC,MAA2B,IAAI,EAAAC,kBAAkB,G,EAqRlE,OA1R8D,iBAOtD,EAAAC,aAAP,WACC,OAAO,EAAAC,YAAYC,KAGb,EAAAC,sBAAP,WACC,OAAOT,GAMR,YAAAU,qBAAA,sBAIKC,KAAKP,MAAMQ,UACdD,KAAKP,MAAMQ,QAAQC,KAAI,GACvBF,KAAKP,MAAMQ,QAAQE,UAAS,WAC3B,GAAI,EAAKV,MAAMQ,QAAQG,OAAQ,CAC9B,IAAM,EAAS,EAAKC,OAChB,GAAU,EAAOC,yBACpB,EAAOA,wBAAwBC,iBAAiB,QAKpDP,KAAKQ,GAAGC,QAAQC,sBAsCjB,YAAAC,eAAA,SAAeC,GAEd,IADA,IACmB,MADHA,EAAWC,UACR,eAAS,CAAvB,IAAItD,EAAM,KACdyC,KAAKc,uBAAuBvD,GAE7ByC,KAAKe,cAAcH,EAAYxB,EAAQ4B,sBAGxC,YAAAC,WAAA,SAAW1D,GAIVyC,KAAKc,uBAAuBvD,GAG5ByC,KAAKkB,sBAAsB,CAAC3D,GAAS6B,EAAQ+B,kBAE9C,YAAAC,YAAA,SAAYP,GAOX,IAAmB,UAAAA,EAAA,eAAS,CAAvB,IAAItD,EAAM,KACdyC,KAAKc,uBAAuBvD,GAI7ByC,KAAKkB,sBAAsBL,EAASzB,EAAQiC,mBAuB7C,YAAAC,aAAA,SAAaC,EAA0BzD,GAItC,IAAMP,EAASyC,KAAKwB,cAAcD,EAAUzD,GAG5CkC,KAAKkB,sBAAsB,CAAC3D,GAAS6B,EAAQqC,oBAI9C,YAAAC,eAAA,SAAeC,EAA8B7D,GAA7C,IAGKP,EAHL,OAEOsD,EAAsB,GAE5Bc,EAAWC,SAAQ,SAACL,GACnBhE,EAAS,EAAKiE,cAAcD,EAAUzD,GACtC,EAAKgD,uBAAuBvD,GAC5BsD,EAAQ/F,KAAKyC,MAIdyC,KAAKkB,sBAAsBL,EAASzB,EAAQyC,sBAG7C,YAAAX,sBAAA,SAAsBL,EAAqBiB,GAC1C,IAAMlB,EAAaZ,KAAKV,qBAAqByC,UAAUC,gBAAkB,IAAI,EAAAC,UAC7ErB,EAAWQ,YAAYP,GACvBD,EAAWsB,QACXlC,KAAKe,cAAcH,IA4BpB,YAAAY,cAAA,SAAcD,EAA0BzD,GAEvC,IAAKyD,EAASY,MAAO,CACpB,IAAMC,EAAiBb,EAASc,aAAa,YAAYC,MACzDf,EAASgB,SAAS,UAAaH,EAAe5H,OAAS,IAG5C,MAARsD,IACHA,EAAO,EAAA0E,aAAaC,YAAYC,MAWjC,IAEMnF,EAAS,IAAIoF,EAFQ,EAAAH,aAAaI,qBAAqB9E,IAEvByD,EADrB,EAAAiB,aAAaK,UAAU/E,GAAMgF,SAM9C,OAJAvF,EAAOwF,YAAa,EACpBxF,EAAOyF,eAAgB,EACvBzF,EAAO0F,eAAgB,EAEhB1F,GAIR,YAAAuD,uBAAA,SAAuBvD,GAsBtB,IAAM2F,EAAsB3F,EAAgB2F,SAC5C,GAAIA,EAAU,CACb,IAAKlD,KAAKmD,MAET,MADAC,QAAQC,IAAI,YACN,WAEP,IAAMC,EAAgB,EAAAC,aAAaC,KAAKxD,KAAKmD,MAAOD,GAChDI,GACHA,EAAcG,gBAAgBlG,KAiCjC,YAAAmG,WAAA,SAAWnC,GACV,IAEMoC,EAFkBpC,EAASc,aAAa,YACPC,MACH9H,OAAS,EACvCoJ,EAAoB,GAC1B,UAAaD,GAAc,SAACrJ,GAAM,OAAAsJ,EAAQ9I,KAAKR,MAE/CiH,EAASgB,SAASqB,IAEpB,EA1RA,CAA8D,EAAAC,WAAjD,EAAAC,eA6Rb,+B,+CAAsE,OAAhC,iBAAgC,EAAtE,CAAsCA,GAAzB,EAAAC,oB,iFC5Ub,SAAYC,GACX,kBACA,gBACA,wBAHD,CAAY,EAAAA,iBAAA,EAAAA,eAAc,M,mFCA1B,SAAY7F,GACX,oBACA,kBACA,gBACA,gBACA,kBACA,oBACA,gCACA,cACA,wBACA,kBACA,oBACA,oBACA,oBAbD,CAAY,EAAAA,YAAA,EAAAA,UAAS,M,oFCArB,SAAYyB,GACX,YACA,gBACA,UACA,UACA,qBACA,YACA,gBACA,YACA,cATD,CAAY,EAAAA,cAAA,EAAAA,YAAW,M,6FCCvB,IAoDYqE,EApDZ,SACA,QACA,SACA,QACA,OACA,QACA,QACA,QACA,OAEA,QACA,SAGA,QACA,SACA,SACA,SAmCA,SAAYA,GACX,cACA,kBACA,gCAHD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAKT,EAAAC,YAAc,CAACD,EAAWvB,KAAMuB,EAAWE,OAAQF,EAAWG,eAC9D,EAAAC,sBAAwB,CACpC,CAAChI,KAAM,OAAQS,MAAO,EAAAoH,YAAYI,QAAQL,EAAWvB,OACrD,CAACrG,KAAM,SAAUS,MAAO,EAAAoH,YAAYI,QAAQL,EAAWE,SACvD,CAAC9H,KAAM,eAAgBS,MAAO,EAAAoH,YAAYI,QAAQL,EAAWG,iBAG9D,IA8BYG,EAUAC,EAxCNC,IAAS,GACdC,aAAc,IAAI,EAAAC,qBAAqB,CACtCC,MAAO,SAEPC,KAAM,EAAAC,UACNC,UAAW,GACXC,UAAW,OAEXf,EAAWvB,MAAO,IAAI,EAAAuC,oBAAoB,CAE1CL,MAAO,IAAI,EAAAM,MAAM,GAAK,GAAK,GAC3BL,KAAM,EAAAC,UACNK,aAAc,EAAAC,SACdC,aAAa,EACbC,WAAW,IAEZ,EAACrB,EAAWE,QAAS,IAAI,EAAAoB,eAAe,CACvCX,MAAO,SACPY,KAAM,GAENF,WAAW,IAEZ,EAACrB,EAAWG,eAAgB,IAAI,EAAAqB,kBAAkB,CACjDb,MAAO,SACPc,UAAW,I,IAMb,SAAYnB,GACX,uBACA,uBAFD,CAAYA,EAAA,EAAAA,cAAA,EAAAA,YAAW,KAKV,EAAAoB,uBAAyB,CACrC,CAACtJ,KAAM,SAAUS,MAAOyH,EAAYqB,QACpC,CAACvJ,KAAM,SAAUS,MAAOyH,EAAYsB,SAGrC,SAAYrB,GACX,yBACA,uBAFD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAIT,EAAAsB,sBAAwB,CACpC,CAACzJ,KAAM,UAAWS,MAAO0H,EAAWuB,SACpC,CAAC1J,KAAM,SAAUS,MAAO0H,EAAW1F,SAGvB,EAAA0D,aAAe,CAC3BwD,aAAc,CACbJ,OAAQrB,EAAYqB,OACpBC,OAAQtB,EAAYsB,QAGrBI,YAAa,CACZF,QAAS,EACTjH,OAAQ,GAGT2D,YAAa,CAEZC,KAAMuB,EAAWvB,KACjByB,OAAQF,EAAWE,OACnBC,cAAeH,EAAWG,eAE3B8B,aAAc,EAAAhC,YACdiC,uCAAqC,KACpC,EAAC,EAAAC,MAAM/J,MAAO,QACd,EAAC,EAAAgK,MAAMhK,MAAO,QACd,EAAC,EAAAiK,SAASjK,MAAO,WACjB,EAAC,EAAAkK,KAAKlK,MAAO,OACb,EAAC,EAAAmK,OAAOnK,MAAO,SACf,EAAC,EAAAoK,aAAapK,MAAO,eACrB,EAAC,EAAAqK,KAAKrK,MAAO,OACb,EAAC,EAAAsK,YAAYtK,MAAO,c,GAErBuG,sBAAoB,KACnB,EAACqB,EAAWvB,MAAO,EAAA6D,KACnB,EAACtC,EAAWE,QAAS,EAAAqC,OACrB,EAACvC,EAAWG,eAAgB,EAAAqC,a,GAY7B5D,UAAW4B,I,+FCrIPmC,E,OAxBL,2BACA,2BACA,4BACA,2BACA,2BACA,4BACA,4BACA,4BACA,4BACA,4BAEMC,EAAyB,OAOzBC,EAA0B,OAE1BC,EAAyB,MAGzBC,EAAa,eACnB,SAAKJ,GACJ,cACA,gBAFD,CAAKA,MAAa,KAKlB,+BAgQA,OA3PQ,EAAAK,WAAP,SAAkBC,GACjB,OAAOA,GAAQN,EAAcO,MAAQD,GAAQN,EAAcQ,OAErD,EAAAC,WAAP,SAAkBH,GACjB,OAAOA,GAAQN,EAAcO,MAEvB,EAAAG,UAAP,SAAiBJ,GAChB,OAAOF,EAAWO,KAAKL,IAGjB,EAAAM,YAAP,SAAmBN,GAClB,IAAMO,EAAQP,EAAKO,MAAMX,GACzB,OAAIW,EACIC,SAASD,EAAM,IAEf,GAIF,EAAAE,UAAP,SAAiBT,GAChB,IAAIO,EACJ,GAAKA,EAAQP,EAAKO,MAAMX,GAA2B,CAClD,IAAMc,EAASF,SAASD,EAAM,IAE9B,MAAO,GADQP,EAAKW,UAAU,EAAGX,EAAK1M,OAASiN,EAAM,GAAGjN,SACrCoN,EAAS,GAE5B,OAAUV,EAAI,KAIT,EAAAY,UAAP,SAAiBZ,GAEhB,MAAkB,MADAA,EAAKA,EAAK1M,OAAS,GAE1B0M,EAAI,IAEPA,GAIF,EAAAa,WAAP,SAAkBb,GACjB,OAAO,UAAiBA,IAElB,EAAAc,YAAP,SAAmBd,GAClB,OAAO,UAAkBA,IAEnB,EAAAe,WAAP,SAAkBf,GACjB,OAAO,UAAiBA,IAElB,EAAAgB,SAAP,SAAgBhB,GACf,OAAO,UAAkBA,EAAKiB,QAAQ,KAAM,OAGtC,EAAAC,mBAAP,SAA0BlB,GACzB,OAAOlH,KAAKgI,YAAY,UAAiBd,KAsBnC,EAAAmB,qBAAP,SAA4BnB,GAC3B,OAAOoB,KAAKC,MAAMrB,GAAQ,KAEpB,EAAAsB,qBAAP,SAA4BC,GAC3B,IAAMrM,EAAI,IAAIkM,KAEd,OADAlM,EAAEsM,QAAkB,IAAVD,GACHrM,EAAEuM,cAAcC,OAAO,GAAI,IAG5B,EAAAC,UAAP,SAAiBC,EAAaC,QAAA,IAAAA,MAAA,GAoC7BA,EAAWC,KAAKC,IAAIF,EAAU,GAC9B,IAAMG,GAAW,GAAGJ,GAAMK,MAAM,KAEhC,GAAIJ,GAAY,EACf,OAAOG,EAAS,GAGjB,IAAIE,EAAOF,EAAS,GACpB,QAAaG,IAATD,EAMH,OALIA,EAAK5O,OAASuO,IACjBK,EAAOA,EAAKvB,UAAU,EAAGkB,IAG1BK,EAAO,UAAcA,EAAML,EAAU,KAC3BG,EAAS,GAAE,IAAIE,EAEzB,IAAME,EAAmBR,EAAG,IACtBS,EAAMD,EAAc9O,OAASuO,EACnC,OAAO,UAAcO,EAAeC,EAAK,MAIpC,EAAAC,aAAP,SAAoBC,GAInB,IAAMC,EAAgB,GAAGD,EAEzB,OADgBC,EAAcpF,QAAQ,MACvB,EACPoF,EAEGA,EAAa,MAKlB,EAAAC,WAAP,SAAkBzC,EAAc0C,GAC/B,MAAa,MAATA,IASJA,EAAO,KAJPA,EAAOA,EAAKT,MAAM,KAAKU,KAAK,OAIb,IAGD,IAAIC,OAAOF,GAGZrC,KAAKL,KAEZ,EAAA6C,iBAAP,SAAwB7C,EAAc8C,GAErC,IADA,IAAID,GAAmB,EACN,MAAAC,EAAA,eAAO,CAAnB,IAAIC,EAAI,KACRC,EAAWP,WAAWzC,EAAM+C,KAC/BF,GAAmB,GAGrB,OAAOA,GAGD,EAAAI,aAAP,SAAoBjD,GAGnB,IAAMgC,EAAWhC,EAAKiC,MAAMtC,GACtBuD,EAAkB,UACvBlB,EAASmB,KAAI,SAACC,GACb,OAAO,UAAYA,OAgBrB,OAba,UAAYF,IAenB,EAAAG,MAAP,SAAazB,GACZ,GAAW,MAAPA,EACH,OAAO,EAGR,IAAMI,EAAWJ,EAAIK,MAAM,IAAIqB,UAC3BC,EAAK,EACLC,EAAM,EAUV,OATAxB,EAAStH,SAAQ,SAAC+I,EAASrQ,GAC1B,IAAI6H,EAAQwI,EAAQC,WAAW,GAE3BzI,GAAS,IACZuI,EAAMpQ,EAAI,GACVmQ,GAAMtI,EAAQ,YAAMuI,GACpBD,GAAUI,OAAOC,qBAGZL,GAGD,EAAA7G,QAAP,SAAemH,GAAf,WACO7B,EAAW6B,EAAe5B,MAAMpC,GACtC,GAAImC,EAAS1O,OAAS,EACrB,OAAO,UAAY,UAAe0O,EAASmB,KAAI,SAACM,GAAY,SAAK/G,QAAQ+G,QAAYK,MAAK,SAACC,EAAGC,GAAM,OAAAD,EAAIC,KAExG,IAAMP,EAAUzB,EAAS,GACzB,GAAIyB,EAAS,CAEZ,GAAIA,EAAQrG,QADY,KACe,EAAG,CACzC,IAAM6G,EAAiBR,EAAQxB,MAFR,KAGvB,OAAO,UAAazB,SAASyD,EAAe,IAAKzD,SAASyD,EAAe,IAAM,GAE/E,MAAO,CAACzD,SAASiD,IAGlB,MAAO,IAKH,EAAAS,mBAAP,SAA0BlE,GACzB,OAAOA,EAAKiB,QAAQ,iBAAkB,QAExC,EAhQA,GAAa,EAAA+B,c,+EC5Bb,SAAYmB,GACX,yBACA,yBACA,kCACA,uEACA,qDACA,mDACA,uCACA,uCACA,2DACA,yDACA,qCACA,4CACA,8CACA,wCAdD,CAAY,EAAAA,YAAA,EAAAA,UAAS,M,0FCDrB,OAEA,QACA,QACA,QAEA,SAWA,2BACA,2BACA,4BACA,4BACA,4BACA,4BACA,2BACA,2BACA,SACA,SACA,QACA,SACA,SAEA,SAGA,aAQC,WAAoBC,GAAA,KAAAA,YA+frB,OA5fC,YAAA/J,SAAA,WACC,OAAOvB,KAAKsL,WAEb,YAAAC,KAAA,WACC,OAAOvL,KAAKsL,UAAUC,MAGvB,YAAAC,aAAA,WACC,OAAQxL,KAAKyL,cAAgBzL,KAAKyL,eAAiBzL,KAAK0L,wBAEzD,YAAAA,qBAAA,WAEC,OADA1L,KAAKsL,UAAUK,qBACR3L,KAAKsL,UAAUM,aAGvB,YAAAC,iBAAA,WACC7L,KAAKsL,UAAUQ,SAAsB,aAAI,GAEnC,EAAAC,mBAAP,SAA0BxK,GACzB,OAA4C,IAArCA,EAASuK,SAAsB,aAEvC,YAAAC,mBAAA,WACC,OAAOC,EAAaD,mBAAmB/L,KAAKsL,YAE7C,YAAAW,qBAAA,WACC,IAAI5P,EAAO,WAIX,OAHI2D,KAAK+L,uBACR1P,EAAO,oBAEDA,GAGR,YAAA6P,uBAAA,WACClM,KAAKsL,UAAUa,wBAGhB,YAAAC,kBAAA,WACC,IAAMhP,EAAM,wBACZ,OAAQ4C,KAAKsL,UAAUQ,SAAS1O,GAAO4C,KAAKsL,UAAUQ,SAAS1O,IAAQ,IAExE,YAAAiP,wBAAA,WACC,OAAO5R,OAAO6R,KAAKtM,KAAKoM,qBAAuB,KAEhD,YAAAG,iBAAA,SAAiBlQ,GAEhB,OADAA,EAAO,EAAAmQ,cAAcC,WAAWpQ,GACzB2D,KAAKoM,oBAAoB/P,IAEjC,YAAAqQ,kBAAA,SAAkBrQ,GAEjB,OADAA,EAAO,EAAAmQ,cAAcC,WAAWpQ,GACM,MAA/B2D,KAAKuM,iBAAiBlQ,IAG9B,YAAAsQ,WAAA,SAAWtQ,GACV,MAAa,UAATA,IAGJA,EAAO,EAAAmQ,cAAcC,WAAWpQ,GACU,MAAnC2D,KAAKsL,UAAUsB,WAAWvQ,KAElC,YAAAwQ,YAAA,SAAYxQ,GACX,OAAI2D,KAAK0M,kBAAkBrQ,GACnB,EAAAmG,aAAayD,YAAYnH,OAEzB,EAAA0D,aAAayD,YAAYF,SAIlC,YAAAoE,aAAA,WACC,OAAO1P,OAAO6R,KAAKtM,KAAKsL,UAAUsB,aAEnC,YAAAE,aAAA,WAEC,IADA,IAAMC,EAAwB,GACN,MAAA/M,KAAKmK,eAAL,eAAqB,CAAxC,IAAI6C,EAAW,KACnBD,EAAEC,GAAehN,KAAKsL,UAAUsB,WAAWI,GAAaC,SAEzD,OAAOF,GAER,YAAAG,YAAA,SAAY7Q,GACX,IAAI8Q,EAEJ,OADA9Q,EAAO,EAAAmQ,cAAcC,WAAWpQ,GACkB,OAA7C8Q,EAASnN,KAAKsL,UAAUsB,WAAWvQ,IAChC8Q,EAAOF,SAED,UAAT5Q,EAEI,EAEA,GAKV,YAAA+Q,6BAAA,SAA6B/Q,EAAcgR,GAC1CrN,KAAKoM,oBAAoB/P,GAAQgR,GAGlC,YAAAC,sBAAA,SAAsBjR,EAAcgR,EAAkBzJ,GACrD5D,KAAKoN,6BAA6B/Q,EAAMgR,GACxCrN,KAAKsL,UAAUiC,aAAalR,EAAM,IAAI,EAAAmR,qBAAqB5J,EAAS,KAGrE,YAAA6J,mBAAA,SAAmBpR,EAAcmJ,EAAkBkI,QAAlB,IAAAlI,MAAA,QAAkB,IAAAkI,MAAA,GAClD,IAAML,EAAS,GAEXM,GAAkB,EACtB,GAAI,UAAgBD,GAAgB,CAEnC,IAAK,IAAIpT,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC,IAAK,IAAIkB,EAAI,EAAGA,EAAIgK,EAAMhK,IACzB6R,EAAOvS,KAAK4S,GAGdC,GAAkB,OAElB,GAAInI,EAAO,EACV,GAAI,UAAekI,GAAgB,CAElC,IAASpT,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC,IAASkB,EAAI,EAAGA,EAAIgK,EAAMhK,IACzB6R,EAAOvS,KAAK4S,EAAclS,IAG5BmS,GAAkB,MACZ,CAEN,IAAMC,EAAOF,EACb,GAAY,GAARlI,GAAuB,MAAVoI,EAAKC,GAAuB,MAAVD,EAAKE,EAAW,CAClD,IAASxT,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC+S,EAAOvS,KAAK8S,EAAKC,GACjBR,EAAOvS,KAAK8S,EAAKE,GAElBH,GAAkB,EAGnB,IAAMI,EAAOL,EACb,GAAY,GAARlI,GAAuB,MAAVuI,EAAKF,GAAuB,MAAVE,EAAKD,GAAuB,MAAVC,EAAKC,EAAW,CACpE,IAAS1T,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC+S,EAAOvS,KAAKiT,EAAKF,GACjBR,EAAOvS,KAAKiT,EAAKD,GACjBT,EAAOvS,KAAKiT,EAAKC,GAElBL,GAAkB,EAGnB,IAAMM,EAAMP,EACZ,GAAY,GAARlI,GAAsB,MAATyI,EAAItR,GAAsB,MAATsR,EAAIC,GAAsB,MAATD,EAAI/C,EAAW,CACjE,IAAS5Q,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC+S,EAAOvS,KAAKmT,EAAItR,GAChB0Q,EAAOvS,KAAKmT,EAAIC,GAChBb,EAAOvS,KAAKmT,EAAI/C,GAEjByC,GAAkB,EAGnB,IAAMQ,EAAOT,EACb,GAAY,GAARlI,GAAuB,MAAV2I,EAAKN,GAAuB,MAAVM,EAAKL,GAAuB,MAAVK,EAAKH,GAAuB,MAAVG,EAAKC,EAAW,CACtF,IAAS9T,EAAI,EAAGA,EAAI0F,KAAK2D,eAAgBrJ,IACxC+S,EAAOvS,KAAKqT,EAAKN,GACjBR,EAAOvS,KAAKqT,EAAKL,GACjBT,EAAOvS,KAAKqT,EAAKH,GACjBX,EAAOvS,KAAKqT,EAAKC,GAElBT,GAAkB,GAMtB,IAAIA,EAGH,KAAM,+DAFN3N,KAAKsL,UAAUiC,aAAalR,EAAM,IAAI,EAAAgS,uBAAuBhB,EAAQ7H,KAMvE,YAAA8I,wBAAA,SAAwB3K,EAAsB+J,GAC7C,IAAML,EAAS,GACM,MAAjBK,IACHA,EAAgB,IAAI,EAAAa,SAGrB,IAAK,IAAIjU,EAAI,EAAGA,EAAIqJ,EAAcrJ,IACjC+S,EAAOvS,KAAK4S,EAAcG,GAC1BR,EAAOvS,KAAK4S,EAAcI,GAC1BT,EAAOvS,KAAK4S,EAAcM,GAG3B,OAAOhO,KAAKsL,UAAUiC,aAAa,WAAY,IAAI,EAAAc,uBAAuBhB,EAAQ,KAGnF,YAAAmB,cAAA,SAAcnS,EAAcoS,GAC3B,OAAQA,EAAY3Q,QACnB,KAAK,EAAA0E,aAAayD,YAAYnH,OAC7B,OAAOsE,QAAQC,IAAI,sBACpB,KAAK,EAAAb,aAAayD,YAAYF,QAC7B,OAAO/F,KAAKyN,mBAAmBpR,EAAMoS,EAAYjJ,UAIpD,YAAAkJ,iBAAA,SAAiBC,EAAkBC,GAC9B5O,KAAK0M,kBAAkBiC,KAC1B3O,KAAKoM,oBAAoBwC,GAAY,UAAa5O,KAAKoM,oBAAoBuC,WACpE3O,KAAKoM,oBAAoBuC,IAGjC,IAAME,EAAa7O,KAAKsL,UAAUjJ,aAAasM,GAE/C,OADA3O,KAAKsL,UAAUiC,aAAaqB,EAAU,IAAI,EAAAP,uBAAuBQ,EAAWvM,MAAOuM,EAAW5B,WACvFjN,KAAKsL,UAAUwD,gBAAgBH,IAGvC,YAAAI,iBAAA,SAAiB1S,GAKhB,OAJI2D,KAAK0M,kBAAkBrQ,WACnB2D,KAAKoM,oBAAoB/P,GAG1B2D,KAAKsL,UAAUwD,gBAAgBzS,IAGvC,YAAAyG,MAAA,WACC,OAAOkJ,EAAalJ,MAAM9C,KAAKsL,YAGzB,EAAAxI,MAAP,SAAakM,GAIZ,IAHA,IAAIC,EAGuB,MAAAxU,OAAO6R,KAAK0C,EAAapC,YAAzB,eAAsC,CAA5D,IAAIsC,EAAc,KAChBC,EAAYH,EAAa3M,aAAa6M,GACxCC,EAAUC,YAAY/S,MAAQ,EAAAgT,2BAA2BhT,MAC5D,EAAAiT,cAAcC,MAAMJ,GAItB,IAAMK,EAAeR,EAAalM,QAIlC,OAH8C,OAAzCmM,EAAeD,EAAalD,YAChC0D,EAAa1D,SAAW,UAAiBmD,IAEnCO,GAGR,YAAA7L,aAAA,WACC,OAAOqI,EAAarI,aAAa3D,KAAKsL,YAGhC,EAAA3H,aAAP,SAAoBpC,GACnB,IAAIkO,EACAC,EAAQ,EAERzD,EAAuB,WAK3B,GANsB,IAAIjM,KAAKuB,GAEbwK,uBACjBE,EAAuB,oBAGwC,OAA3DwD,EAAWlO,EAASc,aAAa4J,IAAgC,CACrE,IAAI3J,EAC4B,OAA3BA,EAAQmN,EAASnN,SACrBoN,EAAQpN,EAAM9H,OAAS,GAIzB,OAAOkV,GAKR,YAAAC,OAAA,WACC,OAAQ3P,KAAK4P,QAAU5P,KAAK4P,SAAW5P,KAAK6P,wBAE7C,YAAAC,aAAA,WACC9P,KAAK4P,aAAUvG,GAEhB,YAAAwG,qBAAA,WACC,IAAMF,EAAS,GACTI,EAAkB/P,KAAKsL,UAAUjJ,aAAarC,KAAKiM,wBAEzD,GAAuB,MAAnB8D,EAEH,IADA,IAAMpM,EAAeoM,EAAgBzN,MAAM9H,OAAS,EAC3CwV,EAAc,EAAGA,EAAcrM,EAAcqM,IAAe,CACpE,IAAMC,EAAQ,IAAI,EAAAC,UAAUlQ,KAAMgQ,GAyBlCL,EAAO7U,KAAKmV,GAId,OAAON,GAGD,EAAAQ,qBAAP,SAA4BR,EAAqBS,GAChD,IAAM7O,EAAW,IAAI,EAAA8O,eACfC,EAAmB,IAAItQ,KAAKuB,GAE5BgP,EAAcZ,EAAO,GAC3B,GAAmB,MAAfY,EAAqB,CACxB,IAAMC,EAAeD,EAAYhP,WAC3BkP,EAAuBF,EAAYD,mBAGnC,EAA6C,GACnD,UAAYX,GAAQ,SAACM,EAAO3V,GAAM,OAAC,EAAuB2V,EAAM9N,OAAS7H,KAEzE,IAAMsJ,EAAU5D,KAAK0Q,qBAAqB,EAAwBF,EAAcJ,GACjE,MAAXxM,GAAsC,IAAnBA,EAAQpJ,QAC9B+G,EAASgB,SAASqB,GAMnB,IAFO,IAAAgJ,EAAA,EAAAA,W,WAEEsC,GAIR,GAF2C,MADrBuB,EAAqBrE,oBAAoB8C,GAGxC,CACtB,IAAMyB,EAAa,UAAYhB,EAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa1B,OAClE,EAAyC,GAC/C,UAAYyB,GAAY,SAACE,EAAWvW,GAAM,OAAC,EAAmBuW,GAAavW,KAE3EgW,EAAiBlE,oBAAoB8C,GAAkByB,EAKvD,IADA,IAAMG,EAAqB,GACT,MAAAnB,EAAA,eAAQ,CAArB,IAAIM,EAAK,KAEPc,EAAY,EAAmBd,EAAMW,aAAa1B,IACxD4B,EAAmBhW,KAAKiW,GAGzBxP,EAASgM,aAAa2B,EAAgB,IAAI,EAAAb,uBAAuByC,EAAoB,QAC/E,CAGN,IAFA,IAAMzD,EAAS,GACTH,EAAcN,EAAWsC,GAAgBjC,SAC7B,MAAA0C,EAAA,eAAQ,CAArB,IACE7S,GADEmT,EAAK,MACOW,aAAa1B,GACjC,OAAQhC,GACP,KAAK,EACJG,EAAOvS,KAAKgC,GACb,KAAK,EACJuQ,EAAOvS,KAAKgC,EAAM+Q,GAClBR,EAAOvS,KAAKgC,EAAMgR,GAClBT,EAAOvS,KAAKgC,EAAMkR,IAIrBzM,EAASgM,aAAa2B,EAAgB,IAAI,EAAAb,uBAAuBhB,EAAQH,MApChD,MAAAzS,OAAO6R,KAAKM,GAAZ,eAAyB,C,EAA7B,OAyCxB,OAAOrL,GAGD,EAAAmP,qBAAP,SACCM,EACAR,EACAJ,GAEA,IAAMa,EAAeT,EAAarO,MAClC,GAAoB,MAAhB8O,EAAsB,CACzB,IAAM,EAAcA,EAAa3O,MAE3B,EAAwB,GAE9B,OAAQ8N,GACP,KAAK,EAAA5N,aAAaC,YAAY0B,OAC7B,UAAY,GAAa,SAAS+M,EAAW5W,GAC5C,IAAMyW,EAAYC,EAAuBE,GACxB,MAAbH,GACH,EAAYjW,KAAKiW,MAGnB,MAED,KAAK,EAAAvO,aAAaC,YAAYC,KAC7B,UAAY,GAAa,SAASwO,EAAW5W,GAC5C,GAAIA,EAAI,GAAM,EAAG,CAChB,IAAM6W,EAAa,EAAY7W,GACzB8W,EAAa,EAAY9W,EAAI,GAC7B+W,EAAa,EAAY/W,EAAI,GAC7BgX,EAAaN,EAAuBG,GACpCI,EAAaP,EAAuBI,GACpCI,EAAaR,EAAuBK,GACxB,MAAdC,GAAoC,MAAdC,GAAoC,MAAdC,IAC/C,EAAY1W,KAAKwW,GACjB,EAAYxW,KAAKyW,GACjB,EAAYzW,KAAK0W,QAIpB,MAED,KAAK,EAAAhP,aAAaC,YAAY2B,cAC7B,UAAY,GAAa,SAAS8M,EAAW5W,GAC5C,GAAIA,EAAI,GAAM,EAAG,CAChB,IAAM6W,EAAa,EAAY7W,GACzB8W,EAAa,EAAY9W,EAAI,GAC7BgX,EAAaN,EAAuBG,GACpCI,EAAaP,EAAuBI,GACxB,MAAdE,GAAoC,MAAdC,IACzB,EAAYzW,KAAKwW,GACjB,EAAYxW,KAAKyW,QAOtB,OAAO,IAIF,EAAAE,iBAAP,SAAwB9P,GACvB,GAA0B,IAAtBA,EAAWnH,OAAf,CAWA,IAJA,IAAMkX,EAAkB/P,EAAW0I,KAAI,SAAC9I,GAAa,WAAIyK,EAAazK,MAChE8K,EAA0BqF,EAAgB,GAAGrF,0BAE7CsF,EAAqD,GACxB,MAAAtF,EAAA,eAAyB,CAG3D,IAHI,IAAIuF,EAAsB,KACxBC,EAAsC,GACtCC,EAAwB,GACJ,MAAAJ,EAAA,eAEzB,IAFI,IAEc,MAFG,KACiB/B,SACpB,eAAiB,CAA9B,IAAIM,EAAK,KACb6B,EAAsBhX,KAAKmV,GAID,MAA1B4B,EAHM/U,EAAQmT,EAAMW,aAAagB,IAI9BC,EAAgB/U,GACf+U,EAAgB/U,GAASrC,OAAO6R,KAAKuF,GAAiBrX,OAK5D,IADA,IAAM6S,EAAS5S,OAAO6R,KAAKuF,GACT,MAAAC,EAAA,eAAuB,CAApC,IACEhV,EACAiU,EAAYc,EADZ/U,GADEmT,EAAK,MACOW,aAAagB,IAEjC3B,EAAM8B,iBAAiBH,EAAwBb,GAGhDY,EAA6BC,GAA0BvE,EAMxD,IAAM2E,EAAkB,EAAAC,oBAAoBC,sBAAsBvQ,GAM5DwQ,EAA0B,IAAInS,KAAKgS,GAUzC,OATAvX,OAAO6R,KAAKqF,GAA8B/P,SAAQ,SAACgQ,GAClD,IAAMvE,EAASsE,EAA6BC,GAC5CO,EAAwB/E,6BAA6BwE,EAAwBvE,MAG1E2E,UACIA,EAAgBlG,SAASsG,eAG1BJ,IAGR,YAAAK,SAAA,W,MAEOlQ,GAA6B,QAArB,EAAAnC,KAAKuB,WAAWY,aAAK,eAAEG,QAAS,GAC9C,OAAO,UAAaH,EAAO,IAG5B,YAAAmQ,MAAA,WACC,OAAOtS,KAAKuS,uBAEb,YAAAA,oBAAA,e,EAAA,OAEOC,IADmC,QAArB,EAAAxS,KAAKuB,WAAWY,aAAK,eAAEG,QAAS,IACpB9H,OAAS,EACzC,OAAO,UAAagY,GAAanI,KAAI,SAAC/P,GAAM,WAAI,EAAAmY,SAAS,EAAMnY,OAEjE,EAvgBA,GAAa,EAAA0R,gB,+EChCb,aACA,SAIA,aAYC,aAVA,KAAA0G,qBAA4C,IAAI,EAAAC,oBAChD,KAAAC,eAAgC,IAAI,EAAAC,cAEpC,KAAAC,eAAwC,GAkCzC,OA9BQ,EAAAC,SAAP,WACC,OAAQ/S,KAAKgT,UAAYhT,KAAKgT,WAAa,IAAIC,GAIhD,YAAAC,cAAA,SAAc1P,EAA2B2P,EAA4BnV,GACpEgC,KAAK4S,eAAeM,cAAc1P,EAAM2P,EAAmBnV,IAE5D,YAAAoV,iBAAA,SAAiBC,EAA6BvV,GAC7C,OAAOkC,KAAK4S,eAAeQ,iBAAiBC,EAAgBvV,IAE7D,YAAAwV,iBAAA,WACC,OAAO,GAER,YAAAC,mBAAA,aAGA,YAAAC,YAAA,WACC,OAAO,GAGR,YAAAnQ,IAAA,W,IAAI,sDACHD,QAAQC,IAAG,MAAXD,QAAeqQ,IAEhB,YAAAC,QAAA,SAAQC,GACP3T,KAAK4T,KAAOD,GAEb,sBAAI,kBAAG,C,IAAP,WACC,OAAO3T,KAAK4T,M,gCAEd,EAvCA,GAAa,EAAAX,OAmDA,EAAAY,KAAOZ,EAAKF,Y,8ECzDzB,aAKA,aAMC,WAAsBe,EAA6BC,GAA7B,KAAAD,SAA6B,KAAAC,QAF3C,KAAAC,kBAAqC,IAAI,EAAAC,gBAAgBjU,MAIhEA,KAAKkU,eAAiBJ,EAAOK,MAAMC,UACnCN,EAAOK,MAAME,QAAQrU,MACrBA,KAAKsU,OAASR,EAAOK,MAwGvB,OAtGC,sBAAI,mBAAI,C,IAAR,WACC,OAAOnU,KAAK+T,O,gCAEb,YAAAQ,SAAA,SAASlY,GACR2D,KAAK+T,MAAQ1X,GAiBd,sBAAI,oBAAK,C,IAAT,WACC,OAAO2D,KAAK8T,Q,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAO9T,KAAKsU,Q,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAOtU,KAAKkU,gB,gCAQb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOlU,KAAKgU,mB,gCAEb,YAAAQ,UAAA,SAAUC,GACTA,EAAUA,GAAWzU,KACrBA,KAAKgU,kBAAkBQ,UAAUC,IAElC,YAAAC,qBAAA,SAAqBD,GACpBzU,KAAKgU,kBAAkBU,qBAAqBD,IAE7C,YAAAE,mBAAA,WACC3U,KAAKgU,kBAAkBW,sBAExB,sBAAI,uBAAQ,C,IAAZ,WACC,OAAO3U,KAAKgU,kBAAkBY,U,gCAE/B,YAAAC,oBAAA,SAAoBxY,EAAcyY,GACjC9U,KAAKgU,kBAAkBa,oBAAoBxY,EAAMyY,IAWlD,YAAAC,aAAA,WACC/U,KAAKmU,MAAMa,WAAWhV,OAKvB,YAAAiV,gBAAA,SAAgBC,GACf,OAAOlV,KAAKmU,MAAMgB,QAAQD,EAAKlV,OAEhC,YAAAoV,mBAAA,SAAmBF,GAClBlV,KAAKmU,MAAMkB,WAAWH,EAAKlV,OAM5B,YAAAsV,8BAAA,WACCtV,KAAKmU,MAAMoB,wBAAwBvV,OAEpC,YAAAwV,4BAAA,WACCxV,KAAKmU,MAAMsB,sBAAsBzV,OAGlC,YAAA0V,sBAAA,WACC,OAAO1V,KAAKmU,MAAMwB,gBAAgB3V,KAAKkU,iBAAmB,IAE3D,YAAA0B,mBAAA,WACC,OAAO5V,KAAKmU,MAAM0B,aAAa7V,OAEhC,YAAA8V,iBAAA,WACC,OAAO9V,KAAKmU,MAAM4B,WAAW/V,OAE9B,YAAAgW,uBAAA,WACC,OAAOhW,KAAKmU,MAAM8B,iBAAiBjW,OAEpC,YAAAkW,qBAAA,WACC,OAAOlW,KAAKmU,MAAMgC,eAAenW,OAEnC,EAlHA,GAAa,EAAAoW,iB,yFCNb,QACA,SAEA,QACA,QACA,SACA,2BACA,2BAGA,SAIA,aAGC,WAAmBC,GAAA,KAAAA,QAElBrW,KAAKwD,KAAOxD,KAAKqW,MAAM7S,KA6JzB,OA1JQ,EAAA8S,mBAAP,WAEC,OADAlT,QAAQmT,KAAK,mFACN,IAED,EAAAC,mBAAP,WACC,MAAO,IAED,EAAAC,4BAAP,WACC,OAAOzW,KAAKsW,qBAAqB9b,QAE3B,EAAAkc,4BAAP,WACC,OAAO1W,KAAKyW,8BAAgCzW,KAAKwW,qBAAqBhc,QAEhE,EAAAmc,wBAAP,SAA+BjH,GAC9B,OAAOA,GAAS1P,KAAKyW,+BAAiC/G,GAAS1P,KAAK0W,+BAerE,YAAAE,kBAAA,SAAkBnD,GACjB,KAAM,kFAGD,YAAAoD,8BAAN,SAAoCC,G,+HAC7BC,EAAkB/W,KAAKgX,oBAAoBF,IAG9B,GAAMC,EAAgBE,qBADrC,M,OAEH,IADMlV,EAAY,WAEEA,EAAUC,eAE5B,MAAO,CAAP,EAAOD,GAGT,KAAM,4BAA4BgV,EAAgBG,Y,OAElD,KAAM,kBAAkBJ,EAAa,YAIvC,YAAAK,qBAAA,SAAqBC,EAAcC,GAmBlC,OAlByB,EAAAC,WAAWC,WAAWvX,KAAKwD,KAAM4T,EAAMC,IAkBrC,MAG5B,YAAAG,2BAAA,SAA2BV,EAAgCO,GAG1D,GAFiB,UAAgBP,GAEnB,CACb,IAAM3U,EAAQ2U,EACd,OAAO9W,KAAKwD,KAAKhD,GAAGiX,OAAOC,iBAAiBvV,GAE5C,IAAMiV,EAAON,EACb,OAAO9W,KAAKgX,oBAAoBI,EAAMC,IAGxC,YAAAL,oBAAA,SAAoBF,EAAgCO,GAInD,GAAI,UAAgBP,GAAgB,CACnC,IAAMM,EAAON,EACb,OAAO,EAAAQ,WAAWK,UAAU3X,KAAKwD,KAAM4T,EAAMC,GAE7C,IAAMlV,EAAQ2U,EACd,OAAO9W,KAAKwD,KAAKhD,GAAGiX,OAAOG,MAAMzV,IAsBnC,YAAA0V,gBAAA,SAAgBpE,GACf,OAAO,MAGR,YAAAqE,qCAAA,SAAqChB,GAEpC,IAAMO,EAAkB,IAAI,EAAAU,eACtBvU,EAAOxD,KAAKwX,2BAA2BV,EAAeO,GAC5D,OAAI7T,EACIxD,KAAKgY,kBAAkBxU,EAAMsT,EAAeO,GAE7C,MAER,YAAAW,kBAAA,SACCxU,EACAsT,EACAO,GAEA,GAAI,EAAAY,WAAWC,KAAK1U,EAAM,EAAAK,YAAc,EAAAoU,WAAWC,KAAK1U,EAAM,EAAA2U,YAAa,CAC1E,IAAMC,EAAgB5U,EACtB,OAAO,EAAA6U,iBAAiBlb,OAAO6C,KAAKqW,MAAOS,EAAesB,EAAef,aAAe,EAAfA,EAAiBiB,aAE3F,OAAO,EAAAD,iBAAiBlb,OAAO6C,KAAKqW,MAAOS,EAAetT,EAAM6T,aAAe,EAAfA,EAAiBiB,cAkBnF,EAlKA,GAAsB,EAAAC,c,6FCbtB,QA6BA,SAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAKA,SACA,SACA,SAqBA,GAJA,MAIA,QAoCA,SAOA,cA+FC,WAAYpV,EAAkB9G,QAAA,IAAAA,MAAA,YAA9B,MACC,YAAM8G,EAAO9G,IAAK,K,OA/FnB,EAAAiD,qBAAkE,IAAI,EAAAC,yBACrE,EACA,EAAAiZ,eAoBQ,EAAAC,GAA2C,IAAI,EAAAC,oBAE/C,EAAAjb,EAAqC,IAAI,EAAAkb,eA0E1C,EAAAC,cAAwB,E,EAmLjC,OAtRkG,iBAiBjG,sBAAI,sCAAuB,C,IAA3B,WACC,OAAO5Y,KAAK6Y,0B,gCAab,sBAAI,gCAAiB,C,IAArB,WACC,OAAQ7Y,KAAK8Y,mBAAqB9Y,KAAK8Y,oBAAsB,IAAI,EAAAC,0BAA0B/Y,O,gCAErF,EAAAF,sBAAP,WACC,MAAO,IAKR,sBAAI,0CAA2B,C,IAA/B,WACC,OAAOE,KAAKgZ,8B,gCAEL,YAAAC,4BAAR,WACC,GAAIjZ,KAAKgZ,6BACR,OAAO,IAAI,EAAAE,4BAA4BlZ,KAAMA,KAAKgZ,+BAGpD,sBAAI,kCAAmB,C,IAAvB,WACC,OAAQhZ,KAAKmZ,qBAAuBnZ,KAAKmZ,sBAAwBnZ,KAAKiZ,+B,gCAEvE,YAAAG,iBAAA,WACC,OAA4C,MAArCpZ,KAAKgZ,8BAGb,sBAAI,sBAAO,C,IAAX,WACC,OAAQhZ,KAAKqZ,SAAWrZ,KAAKqZ,UAAY,IAAI,EAAAC,OAAOtZ,O,gCAErD,sBAAI,sCAAuB,C,IAA3B,WACC,OAAQA,KAAKuZ,yBAA2BvZ,KAAKuZ,0BAA4B,IAAI,EAAAC,uBAAuBxZ,O,gCAErG,sBAAI,qBAAM,C,IAAV,WACC,OAAQA,KAAKyZ,QAAUzZ,KAAKyZ,SAAW,IAAI,EAAAC,iBAAiB1Z,O,gCAE7D,sBAAI,wBAAS,C,IAAb,WACC,OAAQA,KAAK2Z,WAAa3Z,KAAK2Z,YAAc,IAAI,EAAAC,oBAAoB5Z,O,gCAEtE,sBAAI,yBAAU,C,IAAd,WACC,OAAQA,KAAK6Z,YAAc7Z,KAAK6Z,aAAe,IAAI,EAAAC,eAAe9Z,O,gCAKnE,sBAAI,8BAAe,C,IAAnB,WACC,OAAQA,KAAK+Z,iBAAmB/Z,KAAK+Z,kBAAoB,IAAI,EAAAC,eAAeha,O,gCAE7E,sBAAI,iBAAE,C,IAAN,WACC,OAAQA,KAAKia,IAAMja,KAAKia,KAAO,IAAI,EAAAC,aAA2Bla,O,gCAE/D,sBAAI,8BAAe,C,IAAnB,WACC,OAAQA,KAAKma,iBAAmBna,KAAKma,kBAAoB,IAAI,EAAAC,eAAepa,O,gCAE7E,YAAAuU,SAAA,SAASlY,GACR2D,KAAKqa,gBAAgB9F,SAASlY,IAE/B,YAAAie,eAAA,SAAeje,GACd2D,KAAK+T,MAAQ1X,GAEd,sBAAI,qBAAM,C,IAAV,WACC,OAAQ2D,KAAKua,mBAAqBva,KAAKua,oBAAsB,IAAI,EAAAC,iBAAiBxa,O,gCAEnF,sBAAI,iCAAkB,C,IAAtB,WACC,OAAQA,KAAKya,oBAAsBza,KAAKya,qBAAuB,IAAI,EAAAC,kBAAkB1a,O,gCAQ/E,YAAA2a,yBAAP,WACM3a,KAAK4Y,aAKTxV,QAAQmT,KAAK,6BAJbvW,KAAKD,uBACLC,KAAK4a,kBACL5a,KAAK4Y,cAAe,IAKZ,YAAA7Y,qBAAV,aACU,YAAA6a,gBAAV,aAoBO,EAAA9c,KAAP,WACC,KAAM,wBAEP,sBAAI,mBAAI,C,IAAR,WAEC,OADUkC,KAAKoP,YACNtR,Q,gCAEH,EAAA6B,aAAP,WACC,KAAM,qBAEP,YAAAA,aAAA,WAEC,OADUK,KAAKoP,YACNzP,gBAGH,EAAAkb,uBAAP,WACC,MAAO,IAED,EAAAC,iBAAP,WACC,IAAIC,EAAgB/a,KAAK6a,yBACzB,OAAIE,EAIIA,EAAc1Q,KAAI,SAACC,GAAM,4BAAsBA,KAE/C,IAGT,YAAAwQ,iBAAA,WAEC,OADU9a,KAAKoP,YACN0L,oBAEH,EAAAE,eAAP,WACC,OAAO,GAER,YAAAA,eAAA,WAEC,OADUhb,KAAKoP,YACN4L,kBAWV,YAAAC,WAAA,SAAW5a,GACVL,KAAKkb,kBAAkBD,WAAW5a,IAEnC,sBAAI,qBAAM,C,IAAV,WACC,OAAOL,KAAKkb,kBAAkB7a,Q,gCAE/B,sBAAI,mBAAI,C,IAAR,WACC,OAAOL,KAAK8T,OAAOqH,M,gCAEpB,YAAAjE,UAAA,WACC,OAAOlX,KAAKkb,kBAAkBhE,aAI/B,YAAAkE,cAAA,aACA,YAAAC,UAAA,SACCvd,EACAzB,EACAqR,EACA1P,G,MAEA,OAA8B,QAA9B,EAAOgC,KAAKua,0BAAkB,eAAEc,UAAUvd,EAAMzB,EAAMqR,EAAe1P,IAOtE,YAAAsd,KAAA,SAAKC,GACJ,OAAO,MAIR,YAAAtE,kBAAA,WACC,OAAOjX,KAAKV,qBAAqB2X,qBAElC,YAAAlW,cAAA,SAAcya,EAA4B1Z,QAAA,IAAAA,MAAA,MAGzC9B,KAAKV,qBAAqByC,UAAU0Z,YAAYD,GACjC,MAAXA,IACGA,EAAgBnf,OACpBmf,EAAgBnf,KAAO2D,KAAKkX,aAExBsE,EAAgBhY,OACpBgY,EAAgBhY,KAAOxD,OAI1BA,KAAK0b,gBAAgBC,SAAS7Z,IAI/B,YAAA8Z,YAAA,SAAY9d,G,MACX,OAA+B,QAA/B,EAAOkC,KAAK6b,2BAAmB,eAAED,YAAY9d,IAE9C,YAAAge,YAAA,SAAYtY,G,MACa,QAAxB,EAAAxD,KAAK6b,2BAAmB,SAAEC,YAAYtY,IAEvC,YAAAuY,SAAA,W,MACC,OAA+B,QAAxB,EAAA/b,KAAK6b,2BAAmB,eAAEE,aAAc,IAEhD,YAAAvY,KAAA,SAAK4T,G,MACJ,OAA+B,QAAxB,EAAApX,KAAK6b,2BAAmB,eAAElE,UAAUP,KAAS,MAErD,YAAA4E,cAAA,SAAcle,G,MACb,OAA+B,QAAxB,EAAAkC,KAAK6b,2BAAmB,eAAEG,cAAcle,KAAS,IAIzD,YAAAme,UAAA,SAAUC,EAAsC1Y,EAAiB2Y,QAAA,IAAAA,MAAA,GAChEnc,KAAKQ,GAAGiX,OAAOwE,UAAUC,EAAqB1Y,EAAM2Y,IAmBrD,YAAAC,KAAA,SAAKC,EAAuBriB,QAAA,IAAAA,MAAA,MAE3BgG,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAMqc,EAAYriB,IAIzD,YAAAwiB,QAAA,SAAQC,GACP,YADO,IAAAA,OAAA,GACAzc,KAAK0c,WAAWF,QAAQC,IAEjC,EAtRA,CAAkG,EAAArG,eAArF,EAAAvS,YAyRb,+B,+CAAsE,OAAnC,iBAAmC,EAAtE,CAAmCA,GAAtB,EAAA8Y,iB,8BCzYb,sCAoCKC,EACArb,EAEAsb,EAvCL,wBAIA,SAASC,IAGR9c,KAAK+c,SAAU,EAGf/c,KAAKgd,WAAY,EAGjBhd,KAAKid,OAAQ,EAGbjd,KAAKkd,gBAAiB,EAIvBziB,OAAO0iB,OAAQL,EAAKpiB,UAAW,CAE9B0iB,QAAS,aAETC,OAAQ,WAEPja,QAAQka,MAAO,iEAQjBR,EAAKD,gBAEAD,EAAS,IAAI,sBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GACpDrb,EAAW,IAAI,sBAAqB,EAAG,GAEvCsb,EAAiB,SAAW3Z,GAE/BlD,KAAKud,MAAQ,IAAI,OAAMhc,EAAU2B,IAIlCzI,OAAO+B,eAAgBqgB,EAAeniB,UAAW,WAAY,CAE5DgC,IAAK,WAEJ,OAAOsD,KAAKud,MAAMra,UAInBhD,IAAK,SAAWpD,GAEfkD,KAAKud,MAAMra,SAAWpG,KAMxBrC,OAAO0iB,OAAQN,EAAeniB,UAAW,CAExC8iB,QAAS,WAERxd,KAAKud,MAAMhc,SAASic,WAIrBH,OAAQ,SAAWI,GAElBA,EAASJ,OAAQrd,KAAKud,MAAOX,MAMxBC,I,0FC7ER,QAEA,QAIA,SAEA,QACA,SAIA,yE,OAKC,EAAAvd,qBAAoE,IAAI,EAAAC,yBACvE,EACA,EAAAme,mBAqCO,EAAAC,2CAA6C,EAAKC,qCAAqCvgB,KAAK,G,EA+BrG,OA3E2F,iBASnF,EAAAsC,aAAP,WACC,OAAO,EAAAC,YAAYie,KAMpB,YAAA9d,qBAAA,WACC,YAAMA,qBAAoB,WAe1BC,KAAKqa,gBAAgByD,4BAA4B9d,KAAK+d,kBAAkB1gB,KAAK2C,OAE7EA,KAAK6U,oBACJ,uCACA7U,KAAK2d,6CASO,YAAAC,qCAAd,W,gHACC,SAAM5d,KAAK0b,gBAAgBsC,4B,cAA3B,S,YAGO,YAAAD,kBAAR,WAIK/d,KAAKie,YACRje,KAAKie,UAAU5hB,KAAO2D,KAAKkX,cAK7B,sBAAI,uBAAQ,C,IAAZ,WACC,OAAQlX,KAAKie,UAAYje,KAAKie,WAAaje,KAAKke,mB,gCAIjD,YAAAC,aAAA,SAAajb,GACZlD,KAAKe,cAAcmC,IASpB,YAAAO,gBAAA,SAAgBlG,KACjB,EA3EA,CAA2F,EAAAsG,WAArE,EAAAua,eA+EtB,+B,+CAIA,OAJsC,iBACrC,YAAAF,gBAAA,WACC,OAAO,IAAI,EAAAG,UAEb,EAJA,CAAsCD,GAAzB,EAAAE,oB,kFCtEDC,E,OAtBZ,QAEA,QAGA,SACA,QAEA,SAEA,QAGMlf,EAAsB,CADF,kEAU1B,SAAYkf,GACX,yBACA,iBACA,uBACA,qBACA,qBACA,iBAND,CAAYA,EAAA,EAAAA,qBAAA,EAAAA,mBAAkB,KAS9B,6E,OAKC,EAAAjf,qBAAkE,IAAI,EAAAC,yBACrE,EACA,EAAAif,iBAEe,EAAAC,aAAuBF,EAAmBG,QAUhD,EAAAC,gBAAkB,IAAI,EAAAtY,MAatB,EAAAuY,0BAAoC,EAIpC,EAAAC,gBAA0B,E,EAwKrC,OA5MkF,iBAW1E,EAAAlf,aAAP,WACC,OAAO,EAAAC,YAAYkf,KAEb,EAAAhf,sBAAP,WACC,OAAOT,GAkBR,sBAAI,sCAAuB,C,IAA3B,WACC,OAAOW,KAAK4e,0B,gCAGb,sBAAI,4BAAa,C,IAAjB,WACC,OAAO5e,KAAK6e,gB,gCAGb,YAAAE,kBAAA,SAAkBC,GAEjB,GADAhf,KAAK6e,eAAiBG,GACjBhf,KAAKmD,MAAM8b,mBAAmBC,WAAY,CAC9C,IAAM/D,EAAOnb,KAAKK,OACd8a,GACHA,EAAKgE,cAAcnf,QAItB,YAAAof,qBAAA,SAAqB/e,GAChBL,KAAKqf,yBACRhf,EAAOif,IAAItf,KAAKzC,SAGlB,YAAAgiB,0BAAA,WACC,GAAIvf,KAAKqf,wBAAyB,CACjC,IAAM,EAASrf,KAAKzC,OAAO8C,OACvB,GACH,EAAOmf,OAAOxf,KAAKzC,UAatB,YAAAwC,qBAAA,WAECC,KAAKyf,QAAUzf,KAAK0f,iCAGpB1f,KAAKqa,gBAAgByD,4BAA4B9d,KAAK2f,gBAAgBtiB,KAAK2C,OAC3EA,KAAK2f,mBAqCN,sBAAI,6BAAc,C,IAAlB,WACC,OAAO3f,KAAK2e,iB,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAO3e,KAAKyf,S,gCAGb,YAAAC,+BAAA,WACC,IAAMniB,EAASyC,KAAKwB,gBAQpB,OAJCjE,EAA4BiG,KAAOxD,KAGpCzC,EAAO+hB,IAAItf,KAAK2e,iBACTphB,GAEA,YAAAoiB,gBAAR,WACK3f,KAAKyf,UACRzf,KAAKyf,QAAQpjB,KAAO2D,KAAKkX,YACzBlX,KAAK2e,gBAAgBtiB,KAAU2D,KAAKkX,YAAW,sBAajD,YAAA1V,cAAA,WACC,OAAO,IAAI,EAAA8E,UAKZ,YAAAsZ,wBAAA,WACC,OAAO,GAiBR,YAAAC,aAAA,W,QACC,OAA0B,QAAnB,EAAU,QAAV,EAAA7f,KAAKP,aAAK,eAAEQ,eAAO,eAAEG,UAAU,GA8BxC,EA5MA,CAAkF,EAAAyD,WAArE,EAAAic,eA+Mb,+B,+CAAmE,OAA7B,iBAA6B,EAAnE,CAAsCA,GAAzB,EAAAC,oB,2FC3Ob,QACA,QAiCA,SAEA,SACA,SACA,SAKA,QACA,QAkBA,cAqCC,WAAY5c,GAAZ,MACC,YAAMA,EAAO,cAAY,K,OA3BlB,EAAA6c,SAA8B,IAAI,EAAAC,kBAAkB,GAIpD,EAAAC,iBAAmC,IAAI,EAAAC,eAAe,GAoGtD,EAAAC,eAAyB,EA5EhC,EAAKC,mB,EAwMP,OA/O8D,iBAY7D,sBAAI,sBAAO,C,IAAX,WACC,OAAQrgB,KAAKggB,SAAWhgB,KAAKggB,UAAY,IAAI,EAAAC,kBAAkBjgB,O,gCAGhE,sBAAI,8BAAe,C,IAAnB,WACC,OAAQA,KAAKkgB,iBAAmBlgB,KAAKkgB,kBAAoB,IAAI,EAAAC,eAAengB,O,gCAG7E,sBAAI,oCAAqB,C,IAAzB,WACC,OAAOA,KAAKsgB,wB,gCAIb,sBAAI,yBAAU,C,IAAd,WACC,OAAQtgB,KAAK6Z,YAAc7Z,KAAK6Z,aAAe,IAAI,EAAA0G,gBAAgBvgB,O,gCAGpE,sBAAI,qBAAM,C,IAAV,WACC,OAAQA,KAAKyZ,QAAUzZ,KAAKyZ,SAAW,IAAI,EAAAC,iBAAiB1Z,O,gCAW7D,YAAAwgB,iBAAA,aACA,YAAAH,iBAAA,aAgBO,EAAAviB,KAAP,WACC,OAAO,EAAAK,UAAUG,OAElB,sBAAI,mBAAI,C,IAAR,WACC,OAAQ0B,KAAKoP,YAAsCtR,Q,gCAEpD,sBAAI,yBAAU,C,IAAd,WACC,OAAO,G,gCAIR,YAAAyW,SAAA,SAASlY,GACR,YAAMkY,SAAQ,UAAClY,IAKhB,sBAAI,oBAAK,C,IAAT,WACC,OAAO2D,KAAKygB,Q,gCAKb,YAAAC,QAAA,SAAQC,GACP,OAAO,MAED,EAAAC,oBAAP,SAA2BC,EAAWC,GACrC,OAAO,GAER,YAAAC,mBAAA,SAAmBC,GAClB,OAAQhhB,KAAKoP,YAAoBwR,oBAAoB5gB,KAAKihB,WAAYD,IAEhE,EAAAE,iBAAP,SAAwBL,EAAWC,GAClC,OAAO,GAER,YAAAK,eAAA,SAAeC,GACd,OAAQphB,KAAKoP,YAAoB8R,iBAAiBlhB,KAAKlD,MAAOskB,IAErD,YAAAC,iBAAV,SAA2BC,GAC1B,OAAOA,GAER,YAAAphB,IAAA,SAAIohB,GACHthB,KAAKihB,WAAajhB,KAAKqhB,iBAAiBC,GACxCthB,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWC,mBACrCzhB,KAAK0hB,qBAEN,sBAAI,4BAAa,C,IAAjB,WACC,OAAO1hB,KAAK2hB,gB,gCAEb,sBAAI,yBAAU,C,IAAd,WACC,OAAO,G,gCAER,sBAAI,wBAAS,C,IAAb,WACC,OAAO3hB,KAAKihB,Y,gCAGH,YAAAS,kBAAV,aAEM,YAAAE,QAAN,W,oIACK5hB,KAAKmD,MAAM8b,mBAAmBC,YACjC9b,QAAQmT,KAAK,4BAA4BvW,KAAKkX,aAG3ClX,KAAK4U,SACH5U,KAAKogB,cAAN,OACHpgB,KAAKogB,eAAgB,EACrB,GAAMpgB,KAAK6hB,wBAHT,M,OAMF,GAHA,SACA7hB,KAAKogB,eAAgB,EAEjBpgB,KAAK8hB,kBAER,IADIhN,OAAQ,EACJA,EAAW9U,KAAK8hB,kBAAkBC,OACzCjN,I,mBAIF,MAAO,CAAP,EAAO,IAAIkN,SAAQ,SAACC,EAASC,GAC5B,EAAKJ,kBAAoB,EAAKA,mBAAqB,GACnD,EAAKA,kBAAkBhnB,KAAKmnB,O,yBAKhB,YAAAJ,oBAAhB,W,0GAIA,YAAAM,eAAA,SAAepkB,GACdiC,KAAK2hB,eAAiB5jB,EACtBiC,KAAKihB,WAAajhB,KAAKqhB,iBAAiBtjB,GACnCiC,KAAKoiB,aACTpiB,KAAKE,IAAInC,IAUX,YAAAskB,SAAA,SAAS7e,G,QAYR,GAXKA,GAKJxD,KAAKsiB,MAAQ9e,EACTxD,KAAKhC,QAAQukB,gCAAkCviB,KAAKwiB,eAChC,QAAvB,EAAAhf,EAAKif,OAAOC,mBAAW,SAAEzN,gBAAgBjV,QANtCA,KAAKsiB,QACqB,QAA7B,EAAAtiB,KAAKsiB,MAAMG,OAAOC,mBAAW,SAAEtN,mBAAmBpV,OAShDA,KAAK2iB,WACR,IAAc,UAAA3iB,KAAK2iB,WAAL,eAAiB,CAArB,KACPN,SAAS7e,KAId,sBAAI,mBAAI,C,IAAR,WACC,OAAOxD,KAAKsiB,O,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAOtiB,KAAKwD,M,gCAIb,YAAAof,iBAAA,SAAiBvM,GAChBA,EAAMpB,gBAAgBjV,MACtBA,KAAK6iB,cAAgBxM,GAEtB,sBAAI,2BAAY,C,IAAhB,WACC,OAAOrW,KAAK6iB,e,gCAEb,YAAAC,iBAAA,WACC,OAA6B,MAAtB9iB,KAAK6iB,eAEb,YAAA3L,UAAA,W,MACC,OAAgB,QAAT,EAAAlX,KAAKwD,YAAI,eAAE0T,aAAc,IAAMlX,KAAK3D,MAE5C,YAAA0mB,iBAAA,SAAiBvf,GAChB,OAAO,EAAA8T,WAAW0L,cAAcxf,EAAMxD,OAIvC,YAAAoc,KAAA,SAAKC,GACArc,KAAKuhB,gBAAgB0B,eACxBjjB,KAAKuhB,gBAAgB2B,gBAAgB7G,GACrCrc,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAMqc,KAK9C,sBAAI,yBAAU,C,IAAd,WACC,OAAOrc,KAAKmjB,a,gCAEb,sBAAW,oBAAe,C,IAA1B,WACC,MAAO,I,gCAER,sBAAI,8BAAe,C,IAAnB,WAEC,OADoBnjB,KAAKoP,YAChBgU,iB,gCAEV,sBAAI,0BAAW,C,IAAf,WACC,OAAOpjB,KAAKojB,gBAAgB5oB,OAAS,G,gCAGtC,YAAA6oB,gBAAA,aAMA,YAAAC,eAAA,WACC,OAAqC,MAA9BtjB,KAAKujB,uBAAiCvjB,KAAKujB,sBAAsBnjB,QAIzE,YAAAoc,QAAA,WACC,OAAOxc,KAAK0c,WAAWF,WAEzB,EA/OA,CAA8D,EAAApG,eAAxC,EAAA+B,aAiPtB,+B,+CAUA,OAVoC,iBACnC,sBAAI,uCAAwB,C,IAA5B,WACC,MAAO,qD,gCAER,sBAAI,mCAAoB,C,IAAxB,WACC,MAAO,iD,gCAER,sBAAI,+BAAgB,C,IAApB,WACC,MAAO,6C,gCAET,EAVA,CAAoCA,GAAvB,EAAAqL,kB,yFClTb,SAEA,OAIA,QACA,QAGA,OAEA,QAIA,SAAgBC,EAAkDC,GACjE,mBAAO,2D,OACN,EAAAC,UAAY,EAAAzkB,YAAYX,SACxB,EAAAxB,EAAI,EAAAmC,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAArC,EAAI,EAAAuC,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAApD,EAAI,EAAAsD,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAA4kB,MAAQ,EAAA1kB,YAAYZ,MAAM,G,EAI3B,OAT2B,iBAS3B,EATA,CAA2BolB,GAD5B,4BAYA,yB,+CAAsC,iBAAtC,CAAsCD,EAAuB,EAAAtkB,mBAA7D,IACA,yE,OAEU,EAAA0kB,qBAA4C,IAAIC,EAAoB,G,EAI9E,OANwC,iBAMxC,EANA,CAAwC,EAAAhE,cAA3B,EAAAiE,qBAQb,iBACC,WAAoBvgB,GAAA,KAAAA,OA4BZ,KAAAma,2CAA6C3d,KAAK4d,qCAAqCvgB,KAAK2C,MA8D5F,KAAAgkB,oCAAsC,IAAI,EAAAzV,QAwCnD,OA3HC,YAAAqM,gBAAA,sBAQC5a,KAAKwD,KAAKhD,GAAGiX,OAAOwM,UAAU,EAAG,GACjCjkB,KAAKwD,KAAKhD,GAAGiX,OAAOyM,uBAAsB,GAC1ClkB,KAAKwD,KAAKhD,GAAGC,QAAQC,qBACrBV,KAAKwD,KAAKhD,GAAGiX,OAAOtX,UAAS,WAC5B,EAAKgkB,sBAGN,IAAMC,EAAY,uCACbpkB,KAAKwD,KAAK6gB,iBAAiBC,SAASF,IACxCpkB,KAAKwD,KAAK6gB,iBAAiBxP,oBAAoBuP,EAAWpkB,KAAK2d,6CAKnD,YAAAC,qCAAd,W,gHAEC,SAAM5d,KAAKwD,KAAKkY,gBAAgBsC,4B,cAAhC,S,YAIM,EAAAmG,iBAAP,SAAwB3gB,GACQ,MAA3BA,EAAKhD,GAAGiX,OAAOG,MAAM,GACxBpU,EAAK2X,KAAKoJ,wBAAwB/gB,GAElCA,EAAK2X,KAAKqJ,6BAA6BhhB,IAGzC,YAAA2gB,iBAAA,WACCL,EAAoBK,iBAAiBnkB,KAAKwD,OAG3C,YAAAihB,OAAA,SAAOC,GAcN1kB,KAAK2kB,6BAA6BD,IAcnC,YAAAC,6BAAA,SAA6BD,GAE5B,IAAMnnB,EAASyC,KAAKwD,KAAKjG,OAEzB,OAAc,MAAVmnB,GAAmBA,EAAOE,OAAOrnB,EAAOmnB,QAQpC1kB,KAAK6kB,gCALZtnB,EAAOunB,kBAAmB,EAC1BvnB,EAAOmnB,OAASA,EAETnnB,EAAOwnB,cAAc,CAACjnB,KAAM,aAOrC,YAAA+mB,6BAAA,WACC,IAAMtnB,EAASyC,KAAKwD,KAAKjG,OACzB,GAAIA,EAAQ,CACX,IAAMkS,EAAoBzP,KAAKwD,KAAKiV,GAAG1b,EAEjCioB,EAAoBhlB,KAAKwD,KAAKiV,GAAG9b,EAEvCqD,KAAKgkB,oCAAoCiB,KAAKjlB,KAAKwD,KAAKiV,GAAG7c,GAAGspB,eAAellB,KAAKwD,KAAKiV,GAAGmL,OAM1FrmB,EAAOunB,kBAAmB,EAC1BvnB,EAAOkS,SAASwV,KAAKxV,GAErB,IAAM0V,EAAU,CACf,EAAAC,SAASC,mBAAmBL,EAASnX,GACrC,EAAAuX,SAASC,mBAAmBL,EAASlX,GACrC,EAAAsX,SAASC,mBAAmBL,EAAShX,IAEhCsX,EAAQ,IAAI,EAAAC,MACjBJ,EAAQ,GACRA,EAAQ,GACRA,EAAQ,IAGT5nB,EAAOynB,SAASC,KAAKK,GACrB/nB,EAAOqmB,MAAMqB,KAAKjlB,KAAKgkB,qCACvBzmB,EAAOunB,kBAAmB,EAC1BvnB,EAAOioB,eAEPjoB,EAAOwnB,cAAc,CAACjnB,KAAM,aAI9B,YAAA2nB,uBAAA,SAAuBf,EAAiB1mB,QAAA,IAAAA,MAAA,IACvC,EAAA0nB,cAAcD,uBAAuBf,EAAQ1kB,KAAKwD,KAAMxF,IAE1D,EAnIA,GAAa,EAAA8lB,uB,gFCrCb,SAAYtC,GACX,0CAEA,wCACA,sCACA,+CACA,sCACA,0BAPD,CAAY,EAAAA,aAAA,EAAAA,WAAU,M,0FCEtB,IAWYmE,EAXZ,QACA,UAUA,SAAYA,GACX,cAIA,YAIA,gBACA,cACA,cACA,cAKA,yBAjBD,CAAYA,EAAA,EAAAA,sBAAA,EAAAA,oBAAmB,KAyBlB,EAAAC,qBAAmD,CAC/DD,EAAoBE,KAIpBF,EAAoBG,IAIpBH,EAAoBrnB,MACpBqnB,EAAoBI,KACpBJ,EAAoBK,KACpBL,EAAoBM,MAuBR,EAAAC,oCAAiC,MAC5CP,EAAoBE,MAAO,EAAA1nB,UAAUC,QAItC,EAACunB,EAAoBG,KAAM,EAAA3nB,UAAUK,QAIrC,EAACmnB,EAAoBrnB,OAAQ,EAAAH,UAAUG,MACvC,EAACqnB,EAAoBI,MAAO,EAAA5nB,UAAUY,QACtC,EAAC4mB,EAAoBK,MAAO,EAAA7nB,UAAUa,QACtC,EAAC2mB,EAAoBM,MAAO,EAAA9nB,UAAUc,QAEtC,EAAC0mB,EAAoBQ,YAAa,EAAAhoB,UAAUO,K,GA8BhC,EAAA0nB,oCAAiC,MAC5C,EAAAjoB,UAAUC,SAAUunB,EAAoBE,KACzC,EAAC,EAAA1nB,UAAUE,OAAQsnB,EAAoBK,KAIvC,EAAC,EAAA7nB,UAAUK,SAAUmnB,EAAoBG,IAIzC,EAAC,EAAA3nB,UAAUG,OAAQqnB,EAAoBrnB,MACvC,EAAC,EAAAH,UAAUI,aAAS8K,EACpB,EAAC,EAAAlL,UAAUY,SAAU4mB,EAAoBI,KACzC,EAAC,EAAA5nB,UAAUa,SAAU2mB,EAAoBK,KACzC,EAAC,EAAA7nB,UAAUc,SAAU0mB,EAAoBM,KACzC,EAAC,EAAA9nB,UAAUD,aAASmL,EACpB,EAAC,EAAAlL,UAAUM,oBAAgB4K,EAC3B,EAAC,EAAAlL,UAAUO,WAAO2K,EAClB,EAAC,EAAAlL,UAAUU,gBAAYwK,EACvB,EAAC,EAAAlL,UAAUW,aAASuK,E,GAWR,EAAAgd,8BAA2B,MACtCV,EAAoBE,OAAO,EAI5B,EAACF,EAAoBG,KAAM,EAI3B,EAACH,EAAoBrnB,OAAQ,EAC7B,EAACqnB,EAAoBI,MAAO,CAAC,EAAG,GAChC,EAACJ,EAAoBK,MAAO,CAAC,EAAG,EAAG,GACnC,EAACL,EAAoBM,MAAO,CAAC,EAAG,EAAG,EAAG,GAEtC,EAACN,EAAoBQ,YAAa,EAAAxnB,UAAU2nB,mB,GAWhC,EAAAC,oCAAiC,MAC5CZ,EAAoBE,MAAO,EAI5B,EAACF,EAAoBG,KAAM,EAI3B,EAACH,EAAoBrnB,OAAQ,EAC7B,EAACqnB,EAAoBI,MAAO,EAC5B,EAACJ,EAAoBK,MAAO,EAC5B,EAACL,EAAoBM,MAAO,EAC5B,EAACN,EAAoBQ,YAAa,E,+FChLnC,2B,+CAiHA,OAjHgC,YAAA7O,EAAA,GAOxB,EAAAC,WAAP,SAAkBiP,EAAwBpP,EAAcC,GACvD,IAAKmP,EACJ,OAAO,KAGR,IAAMtd,EAAWkO,EAAKjO,MAAMmO,EAAWzY,WAEvC,GAAwB,IAApBqK,EAAS1O,OACZ,OAAOgsB,EAAS/D,OAAO/lB,IAAIwM,EAAS,IAEpC,IAAMud,EAAYvd,EAASrL,MAAM,IAAKqL,EAAS1O,OAAS,GAAK,QAAK6O,GAAWQ,KAAKyN,EAAWzY,WACvF2E,EAAOxD,KAAK2X,UAAU6O,EAAUC,EAAWpP,GACjD,GAAY,MAAR7T,EAAc,CACjB,IAAMkjB,EAAaxd,EAASA,EAAS1O,OAAS,GACxC6b,EAAQ7S,EAAKif,OAAO/lB,IAAIgqB,GAI9B,OAHIrP,GAAmBhB,GACtBgB,EAAgBsP,SAASD,EAAYrQ,GAE/BA,EAEP,OAAO,MAKH,EAAA2M,cAAP,SAAqB4D,EAAuCC,GAC3D,IAAMxmB,EAASL,KAAK8mB,sBAAsBF,EAAgBC,GAC1D,GAAKxmB,EAEE,CACN,IAAM0mB,EAAW/mB,KAAKgnB,mBAAmBJ,EAAgBvmB,GAErD4mB,EAAK,GACT,GAAIF,EAAW,EAAI,EAAG,CAGrB,IAFA,IAAIzsB,EAAI,EACF4sB,EAAM,GACL5sB,IAAMysB,EAAW,GACvBG,EAAIpsB,KAAKwc,EAAW6P,QAErBF,EAAKC,EAAIrd,KAAKyN,EAAWzY,WAAayY,EAAWzY,UAalD,IAVA,IAAMuoB,EAAuB/mB,EAC3B6W,YACA/N,MAAMmO,EAAWzY,WACjBwoB,QAAO,SAAC/c,GAAM,OAAAA,EAAE9P,OAAS,KAKrB8sB,EAAqB,GACvBC,EAAQ,EACkB,MANHV,EACzB3P,YACA/N,MAAMmO,EAAWzY,WACjBwoB,QAAO,SAAC/c,GAAM,OAAAA,EAAE9P,OAAS,KAGG,eAAoB,CAA7C,IAAIgtB,EAAiB,KACpBJ,EAAqBG,IACzBD,EAAmBxsB,KAAK0sB,GAEzBD,IAGD,MAAO,GAAGN,EADGK,EAAmBzd,KAAKyN,EAAWzY,WA9BhD,OAAOgoB,EAAgB3P,aAmClB,EAAA4P,sBAAP,SACCW,EACAC,GAQA,IANA,IAAMC,EAAW3nB,KAAK4nB,QAAQH,GAAajd,UACrCqd,EAAW7nB,KAAK4nB,QAAQF,GAAald,UAErCsd,EAAY9e,KAAK+e,IAAIJ,EAASntB,OAAQqtB,EAASrtB,QACjDwtB,EAAe,KAEV1tB,EAAI,EAAGA,EAAIwtB,EAAWxtB,IAC1BqtB,EAASrtB,GAAG2tB,eAAiBJ,EAASvtB,GAAG2tB,gBAC5CD,EAAeL,EAASrtB,IAG1B,OAAO0tB,GAED,EAAAJ,QAAP,SAAeM,GAGd,IAFA,IAAMN,EAAU,GACZvnB,EAAS6nB,EAAW7nB,OACjBA,GACNunB,EAAQ9sB,KAAKuF,GACbA,EAASA,EAAOA,OAEjB,OAAOunB,GAED,EAAAZ,mBAAP,SAA0BkB,EAAmCC,GAI5D,IAHA,IAAIpB,EAAW,EACXqB,EAAwCF,EACtCG,EAAUF,EAAKF,cACdG,GAAWA,EAAQH,eAAiBI,GAC1CtB,GAAY,EACZqB,EAAUA,EAAQ/nB,OAEnB,OAAI+nB,GAAWA,EAAQH,eAAiBI,EAChCtB,GAEC,GA1Ga,EAAAloB,UAAY,IACZ,EAAAypB,QAAU,IACV,EAAAnB,OAAS,KACT,EAAAoB,mBAAwBjR,EAAWgR,QAAO,IAC1C,EAAAE,kBAAuBlR,EAAW6P,OAAM,IA4GhE,EAjHA,CAJA,OAIgCsB,iBAAnB,EAAAnR,c,0FCPb,SACA,SAEA,aAGC,WAAsB9T,GAAA,KAAAA,OAOvB,OANC,YAAAklB,YAAA,WACC,OAAO,GAER,YAAAC,WAAA,WACC,OAAO,GAET,EAVA,GAYA,SAASC,EAAmClF,GAC3C,mBAAO,2D,OAEC,EAAAzjB,QAAuB,IAAI,EAAA4oB,YAAY,EAAKrlB,M,EAIpD,OAN2B,iBAG1B,YAAAklB,YAAA,WACC,OAAO,GAET,EANA,CAA2BhF,GAQ5B,SAASoF,EAAkCpF,GAC1C,mBAAO,2D,OAEU,EAAAqF,OAAqB,IAAI,EAAAC,WAAW,EAAKxlB,M,EAI1D,OAN2B,iBAG1B,YAAAmlB,WAAA,WACC,OAAO,GAET,EANA,CAA2BjF,GAtBf,EAAAuF,kBA+Bb,+B,+CAAgE,OAA1B,iBAA0B,EAAhE,CAAsCL,EAAQK,IAAjC,EAAAC,mBACb,+B,+CAA+D,OAAzB,iBAAyB,EAA/D,CAAsCJ,EAAOG,IAAhC,EAAAE,mBACb,+B,+CAAyE,OAAlC,iBAAkC,EAAzE,CAAuCL,EAAOF,EAAQK,KAAzC,EAAAvpB,qB,6BCtCb,IAAY0pB,E,iDAAZ,SAAYA,GACX,kBACA,sBACA,sDACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BACA,4BAbD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAeT,EAAAC,oBAAyC,CACrDD,EAAWE,YACXF,EAAWG,YACXH,EAAWI,YACXJ,EAAWK,YACXL,EAAWM,YACXN,EAAWO,YACXP,EAAWQ,YACXR,EAAWS,YACXT,EAAWU,YACXV,EAAWW,c,8ECzBZ,WACA,QAEA,QACA,SAcA,0BA+FS,KAAAC,oBAA+B,IAAI,EAAAC,QACnC,KAAAC,sBAAwB,IAAI,EAAAC,WAC5B,KAAAC,sBAAwB,IAAI,EAAA7b,QAAQ,EAAG,EAAG,GA0B1C,KAAA8b,SAAU,IAAI,EAAAJ,SAAUK,WACxB,KAAAC,UAAY,IAAI,EAAAJ,WAChB,KAAAK,UAAY,IAAI,EAAAjF,MAChB,KAAAkF,UAAY,IAAI,EAAAlc,QAmBhB,KAAAmc,mBAAqB,IAAI,EAAAT,QACzB,KAAAU,mBAAqB,IAAI,EAAAR,WACzB,KAAAS,0BAA4B,IAAI,EAAArc,QASzC,OA/HQ,EAAAkX,uBAAP,SAA8Bf,EAAiBlhB,EAAoBxF,QAAA,IAAAA,MAAA,IAClE,IAAI6sB,EAAe7sB,EAAe,MACd,MAAhB6sB,IACHA,GAAe,GAOhB,IAAMpb,EAAW,IAAI,EAAAlB,QACfuc,EAAa,IAAI,EAAAX,WACjBvG,EAAQ,IAAI,EAAArV,QAClBmW,EAAOqG,UAAUtb,EAAUqb,EAAYlH,GAEvC,IACMoB,GADQ,IAAI,EAAAO,OAAQyF,kBAAkBF,GACrBG,YACvBjG,EAASkG,aAAaliB,KAAKmiB,GAAK,KAgBhC3nB,EAAKL,MAAMioB,cAAa,WACvB5nB,EAAKif,OAAO4I,YAAY,IAAKrG,EAASsG,WACtC9nB,EAAKif,OAAO4I,YAAY,IAAK5b,EAAS6b,WACtC9nB,EAAKif,OAAO4I,YAAY,IAAKzH,EAAM0H,WAC/BT,GACHrnB,EAAKif,OAAO8I,UAAU,QAAS,OAQ3B,EAAAC,uBAAP,SAA8BjuB,EAAkBiG,GAC/C,IAAMiM,EAAWlS,EAAOkS,SAAS6b,UAC3BtG,EAAWznB,EAAOynB,SAASsG,UAAUjhB,KAAI,SAAClO,GAAM,OAAAA,GAAK,IAAM6M,KAAKmiB,OAEtE3nB,EAAKL,MAAMioB,cAAa,WACvB5nB,EAAKif,OAAO4I,YAAY,IAAK5b,GAC7BjM,EAAKif,OAAO4I,YAAY,IAAKrG,OAiB/B,YAAAyG,mBAAA,SAAmB1uB,GAElB,OADAiD,KAAKgqB,oBAAoB0B,QAAQ3uB,EAAGiD,KAAKkqB,sBAAuBlqB,KAAKoqB,uBAC9DpqB,KAAKgqB,qBAGN,EAAA2B,kBAAP,SAAyBjH,GACxB,IAAM3nB,EAAI,IAAI,EAAAwR,QACRqd,EAAO,IAAI,EAAAzB,WACXvuB,EAAI,IAAI,EAAA2S,QAEd,OADAmW,EAAOqG,UAAUhuB,EAAG6uB,EAAMhwB,GACnBgwB,GAmBR,YAAAlH,OAAA,SAAO3nB,EAAYJ,EAAYf,EAAYgoB,GAO1C,OANA5jB,KAAKwqB,UAAUtqB,IAAIvD,EAAEkR,EAAGlR,EAAEmR,EAAGnR,EAAEqR,EAzIV,OA0IrBhO,KAAKuqB,UAAUsB,aAAa7rB,KAAKwqB,WAEjCxqB,KAAKyqB,UAAUxF,KAAKrpB,GAAGspB,eAAetB,GAEtC5jB,KAAKqqB,QAAQqB,QAAQ3uB,EAAGiD,KAAKuqB,UAAWvqB,KAAKyqB,WACtCzqB,KAAKqqB,SAcb,YAAAyB,gBAAA,SAAgBvqB,EAA0BwqB,EAAqBC,GAC9DhsB,KAAK4qB,0BAA0B3F,KAAK+G,GACpChsB,KAAK4qB,0BAA0BqB,YAC/BjsB,KAAK2qB,mBAAmBuB,mBAAmBH,EAAY/rB,KAAK4qB,2BAE5D5qB,KAAK0qB,mBAAmByB,2BAA2BnsB,KAAK2qB,oBACxDppB,EAAS6qB,YAAYpsB,KAAK0qB,qBAE5B,EA5JA,GAAa,EAAAhF,iB,qGClBb,OAEM2G,EAAQ,CAACC,SADf,OACuB,SAAE/d,QAAO,WAChC,2BAGA,SAEMge,EAAgBvjB,KAAKmiB,GAAK,IAEhC,2BAsHA,OAjHQ,EAAAqB,MAAP,SAAa1jB,EAAaif,EAAa9e,GACtC,OAAIH,EAAMif,EACFA,EACGjf,EAAMG,EACTA,EAEAH,GAIF,EAAA2jB,MAAP,SAAa3jB,EAAa4jB,EAAkBC,GAG3C,OAAO3sB,KAAK4sB,IAAI9jB,EAAK,EAAG,EAAG4jB,EAAUC,IAG/B,EAAAC,IAAP,SAAW9jB,EAAa+jB,EAAiBC,EAAiBJ,EAAkBC,GAK3E,OADW7jB,EAAM+jB,IAHCC,EAAUD,IACTF,EAAWD,GAGNA,GAGlB,EAAArH,mBAAP,SAA0B0H,GACzB,OAAOA,EAAUR,GAEX,EAAAS,mBAAP,SAA0B7H,GACzB,OAAOA,EAAUoH,GAEX,EAAAU,QAAP,SAAeC,GACd,OAAOltB,KAAKqlB,mBAAmB6H,IAEzB,EAAAC,QAAP,SAAeC,GACd,OAAOptB,KAAKgtB,mBAAmBI,IAMzB,EAAAC,KAAP,SAAYC,GACX,OAAI,UAAgBA,GACZttB,KAAKutB,WAAWD,GAEhBttB,KAAKwtB,UAAUF,IAIjB,EAAAG,MAAP,SAAaH,EAAgBI,GAC5B,IAAMC,EAAcL,EAASI,EACvBE,EAAsBN,EAAS,EAAItkB,KAAK6kB,KAAKF,GAAe3kB,KAAK8kB,MAAMH,GAE7E,OADAvqB,QAAQC,IAAI,QAASqqB,EAAWJ,EAAQK,EAAaC,EAAqBA,EAAsBF,GACzFE,EAAsBF,GAGvB,EAAAK,aAAP,SAAoBT,GACnB,OAAO,EAAItkB,KAAK6kB,KAAc,GAATP,IAGf,EAAAC,WAAP,SAAkBD,GACjB,IAAMU,EAAM,CACXngB,EAAGyf,EACHxf,EAAG,QAEJ,OAAO9N,KAAKwtB,UAAUQ,IAGhB,EAAAR,UAAP,SAAiBS,GAChB,IAIMC,GAJI,QAGCD,EAAGpgB,EAFJ,OAEYogB,EAAGngB,GACT9E,KAAKmiB,GACrB,OAAOnrB,KAAKmuB,MAHF,WAGQnlB,KAAKolB,IAAIF,KAIrB,EAAAG,kBAAP,SAAyBC,EAAqBC,GAC7C,IACIC,EAAKxuB,KAAKitB,QAAQqB,EAAQG,KAC1BC,EAAK1uB,KAAKitB,QAAQsB,EAAQE,KAC1BE,EAAK3uB,KAAKitB,QAAQsB,EAAQE,IAAMH,EAAQG,KACxCG,EAAK5uB,KAAKitB,QAAQsB,EAAQM,IAAMP,EAAQO,KAExC5jB,EAAIjC,KAAKolB,IAAIO,EAAK,GAAK3lB,KAAKolB,IAAIO,EAAK,GAAK3lB,KAAK8lB,IAAIN,GAAMxlB,KAAK8lB,IAAIJ,GAAM1lB,KAAKolB,IAAIQ,EAAK,GAAK5lB,KAAKolB,IAAIQ,EAAK,GAI7G,OAVQ,QAOA,EAAI5lB,KAAK+lB,MAAM/lB,KAAKgmB,KAAK/jB,GAAIjC,KAAKgmB,KAAK,EAAI/jB,MAM7C,EAAAgkB,gBAAP,SAAuBC,EAAoBC,GAC1C,IAGKC,EAHCC,EAAY,IAAIhD,EAAM9d,QAC5B2gB,EAASI,YAAYD,GAErB,SAAKD,GACJ,QACA,QACA,QAHD,CAAKA,MAAY,KAKjB,IAAiB,WAAC,IAAK,IAAK,KAAX,eAAiB,CAA7B,IAAIG,EAAI,KACNC,EAAQN,EAASK,GAAsBzsB,QAAQ2sB,IAAIJ,GACnDK,EAAUF,EAAM1sB,QAAQmpB,YACxB,EAASuD,EAAMh1B,SAAW20B,EAEhCD,EAASK,GAAwBF,EAAUvsB,QAAQwc,IAAIoQ,EAAQxK,eAAe,IAE/E,OAAOgK,GAGD,EAAAS,cAAP,SAAqBlmB,GACpB,OAAOT,KAAK4mB,IAAI,EAAG5mB,KAAK6kB,KAAK7kB,KAAK3F,IAAIoG,GAAOT,KAAK3F,IAAI,MAjHhD,EAAAwsB,OAAS,EAAAA,OAuCT,EAAA1B,MAAQ,SAACb,GAAmB,OAAAA,EAAStkB,KAAK8kB,MAAMR,IA4ExD,EAtHA,GAAa,EAAAlI,Y,+FCLb,aAIC,WAAsB5hB,EAAoBssB,GAApB,KAAAtsB,OAHd,KAAAusB,WAA4B,GAInC/vB,KAAKgwB,WAAa,IAAIF,EAAgB9vB,KAAKwD,MA2E7C,OAxEC,sBAAI,wBAAS,C,IAAb,WACC,OAAOxD,KAAKgwB,Y,gCAGb,YAAA/Y,kBAAA,sBACC,OAAO,IAAI+K,SAAQ,SAACC,EAASC,GAC5B,EAAK6N,WAAWj1B,KAAKmnB,GACrB,EAAKze,KAAKL,MAAMuY,gBAAgBiL,SAAS,EAAKnjB,MAM9CysB,WAAW,EAAKC,0BAA0B7yB,KAAK,GAAO,OAKxD,YAAA6yB,0BAAA,e,IAAA,OACC,GAA2B,QAA3B,EAAmB,QAAnB,EAAIlwB,KAAKwD,KAAK/D,aAAK,eAAEspB,cAAM,eAAE3oB,OAAQ,CAEpCJ,KAAKmwB,wBADe,GACsBC,MAAK,SAACruB,GAC/C,EAAKyB,KAAKmR,qBACN5S,EACH,EAAKsuB,kBAAkBtuB,GAEvB,EAAKyB,KAAK8sB,OAAOhT,MAAMpd,IAAI,yBAIzBF,KAAKwD,KAAKoR,UACb5U,KAAKwD,KAAKlE,qBAAqByC,UAAUwuB,eACzCvwB,KAAKwD,KAAKkY,gBAAgB8U,aAE1BxwB,KAAKqwB,qBAKF,YAAAF,wBAAN,SAA8BM,G,6HACvBC,EAAa1wB,KAAKwD,KAAKhD,GAAGiX,OAAOG,MAAM6Y,KAE5CC,EAAWC,mBAAmB1L,KAAKjlB,KAAKwD,KAAKmtB,oBAC3B,GAAMD,EAAWpxB,qBAAqB2X,sBAFrD,M,OAGH,MAAO,CAAP,EADkB,U,OAKlB,OAFAjX,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,SAASuwB,EAAW,aAC/CzwB,KAAKqwB,oBACE,CAAP,EAAO,cAGT,YAAAA,kBAAA,SAAkBtuB,GAOjB,IAFA,IAAI+S,EACE8b,EAAY,GACV9b,EAAW9U,KAAK+vB,WAAWhO,OAClC6O,EAAU91B,KAAKga,GAQhB,IALK/S,IACJA,EAAY/B,KAAKwD,KAAKlE,qBAAqByC,UAAUe,SAI9CgS,EAAW8b,EAAU7O,OAC5BjN,EAAS/S,GAEV/B,KAAKwD,KAAKL,MAAMuY,gBAAgBI,YAAY9b,KAAKwD,OAEnD,EAhFA,GAAa,EAAAjE,2BAkFb,+B,+CAA4E,OAA/B,iBAA+B,EAA5E,CAA6CA,GAAhC,EAAAsxB,2B,8ECvFb,WAEMxE,EAAQ,CAACyE,QADf,KACsB,QAAEviB,QAAO,WAEzBwiB,EAAsC,CAC3CC,EAAG,WACHC,EAAG,SACHC,GAAI,SAGL,2BA0DA,OA7CQ,EAAAzkB,WAAP,SAAkBpQ,GACjB,OAAO00B,EAAgB10B,IAASA,GAG1B,EAAA80B,wBAAP,SAA+B7uB,GAO9B,IANA,IAAM8uB,EAAqC,GACvCC,EAAgB,EACdztB,EAAU,GACVyJ,EAAS,GAEX/S,EAAI,EACDA,EAAIgI,EAAM9H,QAAQ,CAExB,IAAMsC,EAAQwF,EAAMhI,GACd6H,EAAQivB,EAAet0B,GAChB,MAATqF,EACHyB,EAAQ9I,KAAKqH,IAEbkL,EAAOvS,KAAKgC,GACZ8G,EAAQ9I,KAAKu2B,GACbD,EAAet0B,GAASu0B,EACxBA,GAAiB,GAGlB/2B,IAGD,MAAO,CACNsJ,QAAO,EACPyJ,OAAM,IAID,EAAAK,cAAP,SAAqBlI,GACpB,OAAQA,GACP,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAO,IAAI6mB,EAAMyE,QAAQ,EAAG,GAC7B,KAAK,EACJ,OAAO,IAAIzE,EAAM9d,QAAQ,EAAG,EAAG,GAChC,QACC,KAAM,QAAQ/I,EAAI,yBAGtB,EA1DA,GAAa,EAAAgH,iB,yFCVb,2BAGA,OACA,SACA,SAGA,QACA,SAGA,QAGA,QAMA,yE,OAwDS,EAAA8kB,0CAA4C,EAAKC,oCAAoCl0B,KAAK,G,EA2HnG,OAnL+B,iBACvB,EAAAS,KAAP,WACC,OAAO,EAAAK,UAAUO,MASlB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAIsB,KAAK0N,yBAAyB,EAAA8jB,UAC1BxxB,KAAK0N,cAAc8O,UAEnBxc,KAAK0N,e,gCAGJ,YAAA2T,iBAAV,SAA2BC,GAC1B,OAAIA,aAAqB,EAAAkQ,UACjBlQ,EAAUxe,QAEV,EAAA0uB,UAAUC,UAAUnQ,GAAW9E,WAGxC,sBAAI,mCAAoB,C,IAAxB,WACC,OAAIxc,KAAKihB,sBAAsB,EAAAuQ,UACvBxxB,KAAKihB,WAAWzE,UAEhB,EAAAgV,UAAUC,UAAUzxB,KAAKihB,YAAYzE,W,gCAG9C,sBAAI,+BAAgB,C,IAApB,WACC,OAAOxc,KAAKlD,MAAM0f,W,gCAEZ,EAAAoE,oBAAP,SACC8Q,EACAC,GAEA,OAAID,aAAsB,EAAAF,UACrBG,aAAsB,EAAAH,UAClBE,EAAWE,SAASD,GAEpBD,EAAWG,cAAcF,GAG7BA,aAAsB,EAAAH,UAClBG,EAAWE,cAAcH,GAEzB,EAAAF,UAAUM,eAAeJ,EAAYC,IAIxC,EAAAzQ,iBAAP,SAAwBL,EAA0CC,GACjE,OAAOD,EAAK+Q,SAAS9Q,IAGtB,YAAAT,iBAAA,WACCrgB,KAAK6U,oBAAoB,sCAAuC7U,KAAKsxB,4CAKtE,sBAAI,yBAAU,C,IAAd,WACC,OAAItxB,KAAK0N,yBAAyB,EAAA8jB,UAC1BxxB,KAAKlD,MAAM80B,SAAS5xB,KAAK0N,eAEzB1N,KAAKlD,MAAM+0B,cAAc7xB,KAAK0N,gB,gCAG7B,YAAAgU,kBAAV,WACK1hB,KAAKihB,sBAAsB,EAAAuQ,UACzBxxB,KAAKygB,OAGTzgB,KAAKygB,OAAOwE,KAAKjlB,KAAKihB,YAFtBjhB,KAAKygB,OAASzgB,KAAKihB,WAKfjhB,KAAKygB,OAGTzgB,KAAKygB,OAAOgR,UAAUzxB,KAAKihB,YAF3BjhB,KAAKygB,OAAS,EAAA+Q,UAAUC,UAAUzxB,KAAKihB,YAMzCjhB,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,gBA4BtC,YAAAzO,eAAA,WACC,OAAO,GAGR,YAAAiO,oCAAA,WACCvxB,KAAKgyB,uBAAoB3oB,EACzBrJ,KAAKiyB,mBAAgB5oB,GAEtB,YAAA6oB,aAAA,WACC,OAAQlyB,KAAKiyB,cAAgBjyB,KAAKiyB,eAAiBjyB,KAAKmyB,wBAEzD,YAAAA,qBAAA,WAUC,IATA,IAIMn4B,EAAO,IAAIo4B,WAAW,MAExBC,EAAS,EACT5iB,EAAW,EACX3S,EAAQ,EACHxC,EAAI,EAAGA,EANHg4B,KAMah4B,IACzB+3B,EAAa,EAAJ/3B,EACTmV,EAAWnV,EAXE,KAYbwC,EAAQkD,KAAKuyB,kBAAkB9iB,GAC/BzV,EAAKq4B,GAAkB,IAARv1B,EAKhB,IAAM01B,EAAU,IAAI,EAAAC,YAAYz4B,EAlBlB,KACC,EAiBsC,EAAA04B,WAMrD,OADAF,EAAQG,aAAc,EACfH,GAGD,EAAAI,mBAAP,SAA0BC,EAAyBxlB,GAClD,IACMylB,EAAsB,IAAIC,aADX,GAErB,OAAO,IAAI,EAAAC,iBAAiBH,EAAWxlB,EAFlB,EAEwCylB,IAE9D,YAAAG,YAAA,WACC,OAAQjzB,KAAKgyB,kBAAoBhyB,KAAKgyB,mBAAqBhyB,KAAKkzB,uBAEjE,YAAAA,oBAAA,WAOC,IANA,IAAMvjB,EAAS3P,KAAKlD,MAAM6S,OACpBwjB,EAAgB,UAAcxjB,GAAQ,SAACM,GAAU,OAAAA,EAAMR,YACvDojB,EAAY,IAAIE,aAAaI,EAAc34B,QAC3C6S,EAAS,IAAI0lB,aAAaI,EAAc34B,QAE1CF,EAAI,EACiB,MAAA64B,EAAA,eAAe,CAAnC,IAAIC,EAAY,KACpBP,EAAUv4B,GAAK84B,EAAa3jB,SAC5BpC,EAAO/S,GAAK84B,EAAat2B,MACzBxC,IAGD,OAAOqE,EAAUi0B,mBAAmBC,EAAWxlB,IAGhD,YAAAklB,kBAAA,SAAkB9iB,GACjB,OAAiBzP,KAAKizB,cAAcI,SAAS5jB,GAAU,IAzKjD,EAAA7Q,cAAgB,IAAI,EAAA4yB,UAAU,EAAA8B,kBAAkBC,OAAQ,CAAC,IAAI,EAAAC,UAAU,EAAG,GAAI,IAAI,EAAAA,UAAU,EAAG,KAC/F,EAAAlN,mBAAoC3nB,EAAUC,cAAc4d,UA0KpE,EAnLA,CAA+B,EAAArE,YAAlB,EAAAxZ,a,yFCTb,cAKC,WAAsB2jB,GAAtB,MACC,cAAO,K,OADc,EAAAA,Q,EAiEvB,OAtEoE,iBAWnE,YAAAD,SAAA,SAAS7e,GACRxD,KAAKsiB,MAAQ9e,GAEd,YAAAA,KAAA,WACC,OAAOxD,KAAKsiB,OAGb,YAAAxf,MAAA,WACC,IAAI0Y,EACEiY,EAAmB,IAAUzzB,KAAKoP,YAKxC,OAJAqkB,EAAiBpR,SAASriB,KAAKwD,QACG,OAA7BgY,EAAUxb,KAAKwb,YACnBiY,EAAiBhY,YAAYD,GAEvBiY,GAER,YAAAlD,aAAA,aAGA,YAAA9U,YAAA,SAAYD,GAEXxb,KAAKuwB,eACLvwB,KAAK0zB,SAAWlY,EAEhBxb,KAAK2zB,qBAEN,YAAAC,YAAA,WACC,OAAwB,MAAjB5zB,KAAK0zB,UAUb,YAAAlY,QAAA,WACC,OAAOxb,KAAK0zB,UAEH,YAAAC,kBAAV,aACO,YAAA3xB,aAAP,WACC,OAAOhC,KAAK0zB,UAEN,YAAAG,oBAAP,WACC,OAAO7zB,KAAK0zB,UAWb,YAAAI,MAAA,WACC,MAAO,IAET,EAtEA,CAZA,OAYoE7b,YAA9C,EAAA8b,iBAwEtB,+B,+CAAwD,OAArB,iBAAqB,EAAxD,CAAmCA,GAAtB,EAAAvb,iB,4FCpFb,2BACA,QACA,SAEA,QAGA,yE,OACS,EAAAwb,uBAAyB,EAAAC,W,EAkIlC,OAnIsE,iBAGrE,sBAAI,yBAAU,C,IAAd,WACC,OAAOj0B,KAAKmjB,a,gCAEb,sBAAI,yBAAU,C,IAAd,WACC,OAAO,G,gCAER,sBAAI,yBAAU,C,IAAd,WACC,IAAc,UAAAnjB,KAAK2iB,WAAL,eAAiB,CAC9B,IADS,KACFuR,WACN,OAAO,EAGT,OAAO,G,gCAER,sBAAI,wBAAS,C,IAAb,WACC,OAAOl0B,KAAKmjB,YAAY9Y,KAAI,SAAClO,GAAM,OAAAA,EAAEmlB,c,gCAEtC,sBAAI,mCAAoB,C,IAAxB,WACC,OAAOthB,KAAKshB,W,gCAGb,YAAA+B,gBAAA,WACC,GAAwB,MAApBrjB,KAAKmjB,YAAT,CAGA,IAAIhhB,EAAQ,EACZnC,KAAKmjB,YAAc,IAAIgR,MAAMn0B,KAAKojB,gBAAgB5oB,QAClD,IAA2B,UAAAwF,KAAKojB,gBAAL,eAAsB,CAA5C,IAAIgR,EAAc,KAChBC,EAAY,IAAIr0B,KAAKg0B,uBAAuBh0B,KAAKmD,OACnDmxB,OAAW,EAEdA,EADG,UAAet0B,KAAK2hB,gBACT3hB,KAAK2hB,eAAexf,GAEnBnC,KAAK2hB,eAAuByS,GAE5CC,EAAUr2B,QAAQinB,KAAKjlB,KAAKhC,SAC5Bq2B,EAAUlS,eAAemS,GAGzBD,EAAU9f,SAAS,GAAGvU,KAAK3D,KAAO+3B,GAClCC,EAAUzR,iBAAiB5iB,MAE3BA,KAAKiV,gBAAgBof,GAErBr0B,KAAKmjB,YAAYhhB,GAASkyB,EAC1BlyB,OAKc,YAAA0f,oBAAhB,W,gHACC,SAAM7hB,KAAKu0B,sB,cAAX,SACAv0B,KAAKw0B,4B,YAEN,YAAAA,0BAAA,aAGA,YAAAlR,eAAA,WACC,I,MAAc,MAAAtjB,KAAK2iB,WAAL,eAAiB,CAC9B,GAA2B,QAA3B,EADS,KACHY,6BAAqB,eAAEnjB,OAC5B,OAAO,EAGT,OAAO,GAGM,YAAAm0B,mBAAd,W,8HAQC,IAPM5R,EAAa3iB,KAAK2iB,WAMlB8R,EAAW,GACZ,EAAL,EAAc,EAAA9R,EAAA,gBAALxmB,EAAC,MACHyY,UACL6f,EAAS35B,KAAKqB,EAAEylB,WAGlB,SAAMI,QAAQ0S,IAAID,I,cAAlB,SAMAz0B,KAAK2U,qB,YAOI,YAAA+M,kBAAV,WACC,IAAMiT,EAAS30B,KAAKmD,MAAMwxB,OAC1BA,EAAOC,QAEP,IADA,IAAMjS,EAAa3iB,KAAK2iB,WACV,MAAAA,EAAA,eAAY,CAAhB,KACPpB,gBAAgBsT,oBAInB,IAAM/3B,EAAQkD,KAAKihB,WACnB,GAAI,UAAenkB,GAClB,IAAK,IAAIxC,EAAI,EAAGA,EAAIqoB,EAAWnoB,OAAQF,IACtCqoB,EAAWroB,GAAG4F,IAAKpD,EAAcxC,SAGlC,IAASA,EAAI,EAAGA,EAAIqoB,EAAWnoB,OAAQF,IAAK,CAC3C,IAAM85B,EAAiBp0B,KAAKojB,gBAAgB9oB,GAC5CqoB,EAAWroB,GAAG4F,IAAKpD,EAAcs3B,IAUnCO,EAAOG,UAEP,IAASx6B,EAAI,EAAGA,EAAIqoB,EAAWnoB,OAAQF,IACtCqoB,EAAWroB,GAAGinB,gBAAgBwT,sBAI/B/0B,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,gBAEvC,EAnIA,CAAsE,EAAA5Z,YAAhD,EAAA6c,sB,8ECPtB,YAcA,aAGC,WACWjhB,EACAkhB,EACAC,GAFA,KAAAnhB,QACA,KAAAkhB,QACA,KAAAC,mBAEe7rB,IAArBrJ,KAAKk1B,cACRl1B,KAAKk1B,YAAc,EAAA7O,4BAA4BrmB,KAAKi1B,QAyBvD,OAtBC,sBAAI,mBAAI,C,IAAR,WACC,OAAOj1B,KAAK+T,O,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAO/T,KAAKi1B,O,gCAEb,sBAAI,yBAAU,C,IAAd,WACC,OAAO,EAAA/O,kCAAkClmB,KAAKi1B,Q,gCAE/C,sBAAI,yBAAU,C,IAAd,WACC,OAAOj1B,KAAKk1B,a,gCAGb,YAAA1Y,QAAA,WACC,OAAQxc,KAAKm1B,MAAQn1B,KAAKm1B,OAASn1B,KAAKo1B,gBAEjC,YAAAA,aAAR,WACC,MAAO,CACN/4B,KAAM2D,KAAK+T,MACXjW,KAAMkC,KAAKi1B,QAGd,EAlCA,GAAa,EAAAI,6B,iFCdA,EAAAC,aAAe,CAC3BC,MAAO,SACP7W,QAAS,WACT8W,SAAU,aACVC,OAAQ,UACRC,KAAM,QAEM,EAAAC,aAAe,CAC3BC,MAAO,SACPC,SAAU,WACVH,KAAM,QAEM,EAAAI,eAAiB,CAC7BL,OAAQ,UACRC,KAAM,QAEM,EAAAK,YAAc,CAC1B13B,MAAO,QACP23B,WAAY,aACZC,SAAU,WACVT,SAAU,WACVU,QAAS,UACTC,KAAM,OACNC,KAAM,OACNC,MAAO,QACPC,KAAM,OACNC,SAAU,YAEE,EAAAC,aAAe,CAC3BX,SAAU,WACVnzB,KAAM,SACNyB,OAAQ,SACRsyB,KAAM,QACNC,OAAQ,UACRH,SAAU,aAEE,EAAAI,aAAe,CAC3BC,UAAW,YACXC,UAAW,aACXZ,SAAU,WACVL,MAAO,SACPF,KAAM,OACNoB,SAAU,YACVC,OAAQ,UAEI,EAAAC,cAAgB,CAC5BC,KAAM,W,yFC9CP,QAGA,SAKA,QAKA,QACA,SACA,QACA,SAKA,yE,OAMS,EAAAC,4BAA8B,EAAKC,sBAAsB95B,KAAK,GA+D5D,EAAA+5B,mCAA6C,E,EAmJxD,OAxN6D,iBACrD,EAAAz3B,aAAP,WACC,OAAO,EAAAC,YAAYy3B,IAMpB,YAAAt3B,qBAAA,WACCC,KAAKQ,GAAGiX,OAAOyM,uBAAsB,GACrClkB,KAAKQ,GAAG82B,YAAYC,cACpBv3B,KAAKw3B,QAAQC,wBACbz3B,KAAKQ,GAAGC,QAAQi3B,mCAAmC,IACnD13B,KAAK6U,oBAAoB,wBAAyB7U,KAAKk3B,6BAEvDl3B,KAAKyiB,OAAOkV,4BAA4B33B,KAAK43B,0BAA0Bv6B,KAAK2C,QAErE,YAAAm3B,sBAAR,W,MACmB,QAAlB,EAAAn3B,KAAKsD,qBAAa,SAAEu0B,qBAAqBC,mCAAmC93B,OAE7E,sBAAI,4BAAa,C,IAAjB,W,MACC,GAAIA,KAAKK,OACR,OAAIL,KAAKK,OAAOvC,MAAQkC,KAAKlC,KACU,QAA9B,EAAAkC,KAAKK,cAAyB,eAAEiD,cAEjCtD,KAAKK,Q,gCAUf,YAAA03B,YAAA,SAAY17B,GACX,MAAO,UAAU2D,KAAK3D,KAAI,IAAIA,GAG/B,YAAA27B,mBAAA,SAAmB37B,G,MACZo0B,EAAczwB,KAAKQ,GAAGiX,OAAOwgB,gBAAgB57B,GAC7C67B,EAAal4B,KAAKQ,GAAG82B,YAAYa,iBAAiB1H,GACxD,GAAIyH,EAAY,CACf,IAAMxH,EAAuBwH,EAAW1R,SAClC4R,EAAc1H,EAAWlwB,GAAGC,QAAQ43B,+BAA+BH,EAAWI,cAAcj8B,KAClG,OAAOq0B,EAAWqH,YAAYK,GAE9B,OAAO,EAAAG,UAAUC,IAAyB,QAAtB,EAACx4B,KAAKyiB,OAAO/lB,IAAIL,UAAK,eAAES,QAS9C,YAAA27B,UAAA,SAAUC,KAEV,YAAAC,WAAA,W,MAC+B,QAA9B,EAAA34B,KAAK44B,iCAAyB,SAAEC,SAWjC,YAAAjB,0BAAA,sBACC,GAAK53B,KAAKo3B,kCAAV,CAGA,IAAME,EAA8C,GAC9CwB,EAAyB94B,KAAK84B,yBACpC94B,KAAKyiB,OAAOsW,MAAMn3B,SAAQ,SAAC8kB,GAC1B,IAAIsS,GAAY,EAIhB,GAHIF,EAAuBt+B,OAAS,GAAKs+B,EAAuBG,SAASvS,KACxEsS,GAAY,GAETA,EAAW,CACd,IAAM3iB,EAAQ,EAAKoM,OAAO/lB,IAAIgqB,GAC9B,GAAIrQ,IAAUA,EAAMmM,aAAc,CACjC,IAAM0W,EAAkB,EAAA9S,kCAAkC/P,EAAMvY,MAChE,GAAIo7B,EAAiB,CACpB,IAAMhB,EAAa,IAAI,EAAA7C,0BAA0Bhf,EAAMha,KAAM68B,GAC7D5B,EAAYx8B,KAAKo9B,SAKrBl4B,KAAKQ,GAAGiX,OAAO0hB,kCAAkC7B,KAElD,YAAAwB,uBAAA,WACC,MAAO,IAEE,YAAAM,wBAAV,sBACOC,EAAgD,IAAIC,IACpDC,EAAgCv5B,KAAKyiB,OAAO+W,YAC9CC,GAAsB,EACtBC,GAAsB,EAC1BH,EAAoB33B,SAAQ,SAAC8kB,GAC5B,IAAMrQ,EAAQ,EAAKoM,OAAO/lB,IAAIgqB,GAC1BrQ,IACHgjB,EAAqBn5B,IAAIwmB,EAAYrQ,EAAMvZ,OAC3C,EAAK2lB,OAAOkX,aAAajT,GACzB+S,GAAsB,MAKxBz5B,KAAKQ,GAAGiX,OAAOmiB,8BAA8Bh4B,SAAQ,SAACi4B,GACrD,IAAMnT,EAAamT,EAAiBx9B,KAE9By9B,EAAmBT,EAAqB38B,IAAIgqB,GAClD,GAAwB,MAApBoT,EAA0B,CAC7B,IAAMC,EAAwBF,EAAiBE,WAC3Ch8B,EAAa,EAAAi8B,6BAA6BC,WAAWF,EAAYD,GACrE,GAAkB,MAAd/7B,EAAoB,CACvB,IAAMm8B,EAA0B,EAAKC,uBAAuBzT,GAC7B,MAA3BwT,IACHn8B,EAAam8B,GAMG,MAAdn8B,GAAsB87B,EAAiB97B,aAC1CA,EAAa87B,EAAiB97B,YAG/B,EAAKsd,UAAU0e,EAAYrT,EAAY3oB,EAAY,CAClDq8B,OAAO,EACP9e,MAAM,IAEPoe,GAAsB,OAIpBA,GAAuBD,KACrBz5B,KAAKmD,MAAM8b,mBAAmBC,YAClClf,KAAKoc,KAAK,EAAA/Q,UAAUgvB,kBAShB,YAAAC,kBAAP,aACA,YAAAC,cAAA,W,MACC,OAAqC,QAArC,EAAOv6B,KAAK44B,iCAAyB,eAAE4B,MAsB9B,YAAAL,uBAAV,SAAiC99B,GAChC,OAAO,MAUE,YAAAo+B,wBAAV,sBACCz6B,KAAKQ,GAAG82B,YACNoD,qBACArwB,KAAI,SAAClO,GAAM,OAAAA,EAAEw+B,aACb/4B,SAAQ,SAACrF,GACTA,EAAEiY,UAAU,OAyBhB,EAxNA,CAA6D,EAAA3Q,WAAhD,EAAA+2B,cA2Nb,+B,+CAAoE,OAA/B,iBAA+B,EAApE,CAAqCA,GAAxB,EAAAC,mB,8ECtNb,iBAGC,WAAsBC,GAAA,KAAAA,SADZ,KAAAC,cAAyD,GAwFpE,OArFC,sBAAI,uBAAQ,C,IAAZ,WACC,IAAMC,EAA6Bh7B,KAAK86B,OAAO98B,QAAQi9B,WAAaj7B,KAAK86B,OAAOtY,aAI1E0Y,GAAiBl7B,KAAK86B,OAAO5G,WAEnC,OAAO8G,GAA8BE,G,gCAGtC,YAAAlhC,KAAA,WACC,GAAIgG,KAAK86B,OAAOtY,aACf,KAAM,+BAGP,OAAIxiB,KAAKm7B,wBACDn7B,KAAKo7B,gBAELp7B,KAAKq7B,gBAIN,YAAAA,aAAR,WACC,OAAOr7B,KAAK86B,OAAOQ,sBAGZ,YAAAF,cAAR,WAkBC,GAjBAp7B,KAAK+6B,cAAgB,GAEjB/6B,KAAK86B,OAAO98B,QAAQi9B,WAAaj7B,KAAK86B,OAAOtY,eAChDxiB,KAAK+6B,cAAoB,KAAI/6B,KAAK86B,OAAOh9B,KACzCkC,KAAK+6B,cAA6B,cAAI/6B,KAAK86B,OAAOS,yBAClDv7B,KAAK+6B,cAAuB,QAAI/6B,KAAK86B,OAAO98B,QAAQoqB,SAGhDpoB,KAAK86B,OAAO5G,YAChBl0B,KAAKw7B,WAQFx7B,KAAK86B,OAAO98B,QAAQy9B,uBAAwB,CAG/C,IAFA,IAAMC,EAAuC,GACvCC,EAAqB37B,KAAK86B,OAAO98B,QAAQ09B,mBACvB,MAAAjhC,OAAO6R,KAAKqvB,GAAZ,eAAiC,CAApD,IAAIC,EAAW,KACbC,EAAeF,EAAmBC,GACxCF,EAAmBE,GAAeE,KAAKC,UAAUF,GAElD77B,KAAK+6B,cAAiC,kBAAIW,EAE3C,OAAO17B,KAAK+6B,eAGH,YAAAI,sBAAV,WACC,QAAIn7B,KAAK86B,OAAO98B,QAAQi9B,YAGpBj7B,KAAK86B,OAAO98B,QAAQy9B,wBAwBf,YAAAD,SAAV,aACD,EA1FA,GAAa,EAAAQ,qB,yFCxBb,SACA,QACA,QAEA,QAgBA,QAEA,OACA,uCAAuEtY,GACtE,mBAAO,2D,OACN,EAAAuY,WAAa,EAAA/8B,YAAYX,SACzB,EAAA29B,eAAiB,EAAAh9B,YAAYd,QAAQ,GACrC,EAAA+9B,aAAe,EAAAj9B,YAAYd,QAAQ,EAAG,CACrCg+B,WAAY,CAACF,gBAAgB,KAE9B,EAAAG,iBAAmB,EAAAn9B,YAAYb,MAAM,CAAC,EAAG,EAAG,GAAI,CAC/C+9B,WAAY,CAACF,gBAAgB,EAAMC,cAAc,KAElD,EAAAG,oBAAsB,EAAAp9B,YAAYT,cAAc,GAAI,CACnD29B,WAAY,CAACF,gBAAgB,EAAMC,cAAc,GACjDI,eAAgB,CAACC,QAAS,EAAA58B,YAAYie,KACtC4e,yBAAyB,IAE1B,EAAAC,iBAAmB,EAAAx9B,YAAYZ,MAAM,EAAG,CACvC89B,WAAY,CAACF,gBAAgB,EAAMC,cAAc,K,EAEnD,OAjB2B,iBAiB3B,EAjBA,CAA2BzY,IAoB5B,iBAYC,WAAsBlgB,GAAA,KAAAA,OAFZ,KAAAm5B,cAAgB,IAAI,EAAAC,UAyH/B,OArHC,sBAAI,0BAAW,C,IAAf,WACC,OAAQ58B,KAAK68B,aAAe78B,KAAK68B,cAAgB78B,KAAK88B,uB,gCAE/C,YAAAA,oBAAR,WACC,IAEMv7B,EAAW,IAAI,EAAAw7B,oBAFR,IACI,KAEXC,EAAO,IAAI,EAAAz2B,KAAKhF,GAEtB,OADAvB,KAAKwD,KAAKjG,OAAO+hB,IAAI0d,GACdA,GAER,YAAAC,0BAAA,WACC,OAAQj9B,KAAKk9B,2BAA6Bl9B,KAAKk9B,4BAA8B,IAAI,EAAAC,mBAGlF,YAAAC,WAAA,aA6BA,sBAAI,6BAAc,C,IAAlB,WACC,OAAOp9B,KAAKwD,KAAKif,OAAO4a,QAAQ,mB,gCAEjC,sBAAI,sCAAuB,C,IAA3B,WACC,OAAOr9B,KAAKk8B,gBAAkBl8B,KAAKwD,KAAKif,OAAO4a,QAAQ,iB,gCAExD,sBAAI,mCAAoB,C,IAAxB,WACC,OAAOr9B,KAAKk8B,iBAAmBl8B,KAAKwD,KAAKif,OAAO4a,QAAQ,iB,gCAEzD,sBAAI,+BAAgB,C,IAApB,WACC,OAAIr9B,KAAKs9B,qBACDt9B,KAAKwD,KAAKif,OAAO7d,MAAM,oBAEvB,M,gCAeC,YAAA24B,mBAAV,aACM,YAAA9Y,OAAN,W,uHACKzkB,KAAKk8B,gBACRl8B,KAAKu9B,qBAEL,GAAMv9B,KAAKw9B,4BAHR,M,cAGH,SACIx9B,KAAKy9B,wBACR,GAAMz9B,KAAK09B,8BADR,M,OACH,S,oCAGG19B,KAAK68B,cACR78B,KAAKwD,KAAKjG,OAAOiiB,OAAOxf,KAAK68B,c,mCAiBlB,YAAAW,wBAAd,W,sGACOt6B,EAAWlD,KAAKi9B,6BACbr4B,MAAQ5E,KAAKwD,KAAKiV,GAAG4jB,iBAC9Br8B,KAAK29B,YAAYz6B,SAAWA,E,WAGf,YAAAw6B,2BAAd,W,+HACOE,EAAU59B,KAAKwD,KAAK/F,EAAE6+B,oBAAoBuB,cAE/C,GAAMD,EAAQ3mB,qBADX,M,cACH,SACM/T,EAAW06B,EAAQ16B,SACzBlD,KAAK29B,YAAYz6B,SAAWA,E,aAG5BlD,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,qB,mCAG9B,EAnIA,GAAa,EAAA49B,4B,8FC9Cb,QAGA,2BACA,4BACA,2BAEA,2BA+EA,OA9EQ,EAAAtF,IAAP,SAAW17B,GACV,GAAI,UAAgBA,GACnB,OAAOA,EAER,GAAI,UAAiBA,GACpB,MAAO,GAAGA,EAGX,GAAI,UAAgBA,GACnB,MAAO,GAAG,EAAAoN,WAAWV,aAAa1M,GAElC,IAAMuQ,EAASvQ,EAAMwuB,UAAUjhB,KAAI,SAAC0zB,GACnC,MAAO,GAAG,EAAA7zB,WAAWV,aAAau0B,MAGnC,MADgB,MAAM1wB,EAAO7S,OACZ,IAAI6S,EAAOxD,KAAK,MAAK,KAIjC,EAAAm0B,QAAP,SAAehQ,GACd,OAAI,UAAgBA,GACZA,EAKD,QAHQA,EAAI1C,UAAUjhB,KAAI,SAAC0zB,GACjC,MAAO,GAAG,EAAA7zB,WAAWV,aAAau0B,MAEbl0B,KAAK,MAAK,KAE1B,EAAAo0B,QAAP,SAAejQ,GACd,OAAI,UAAgBA,GACZA,EAKD,QAHQA,EAAI1C,UAAUjhB,KAAI,SAAC0zB,GACjC,MAAO,GAAG,EAAA7zB,WAAWV,aAAau0B,MAEbl0B,KAAK,MAAK,KAG1B,EAAAq0B,cAAP,SAAqBlQ,EAAuBvkB,GAI3C,OAHK,UAAgBA,KACpBA,EAAM,EAAAS,WAAWV,aAAaC,IAExB,QAAQzJ,KAAKg+B,QAAQhQ,GAAI,KAAKvkB,EAAG,KAGlC,EAAA00B,OAAP,SAActwB,EAAoBC,EAAoBE,GAUrD,OATK,UAAgBH,KACpBA,EAAI,EAAA3D,WAAWV,aAAaqE,IAExB,UAAgBC,KACpBA,EAAI,EAAA5D,WAAWV,aAAasE,IAExB,UAAgBE,KACpBA,EAAI,EAAA9D,WAAWV,aAAawE,IAEtB,QAAQH,EAAC,KAAKC,EAAC,KAAKE,EAAC,KAEtB,EAAAowB,OAAP,SAAcvwB,EAAoBC,GAOjC,OANK,UAAgBD,KACpBA,EAAI,EAAA3D,WAAWV,aAAaqE,IAExB,UAAgBC,KACpBA,EAAI,EAAA5D,WAAWV,aAAasE,IAEtB,QAAQD,EAAC,KAAKC,EAAC,KAEhB,EAAAuwB,MAAP,SAAaxwB,GAIZ,OAHK,UAAgBA,KACpBA,EAAI,EAAA3D,WAAWV,aAAaqE,IAEtB,GAAGA,GAEJ,EAAAywB,IAAP,SAAWzwB,GACV,MAAO,GAAGA,GAEJ,EAAA0wB,KAAP,SAAY1wB,GACX,MAAO,GAAGA,GAEZ,EA/EA,GAAa,EAAA0qB,a,uFCSb,I,WAhBA,QACA,SAEA,SAEA,QAEA,QACA,SACA,OAGMl5B,EAAsB,CADL,iEAInBrF,EAAO,IAAIwkC,YADJ,IAEFlkC,EAAI,EAAGA,EAFL,GAEeA,IACzBN,EAAKM,GAAK,MAEX,IAAMmkC,EAAqB,IAAI,EAAAhM,YAAYz4B,EALhC,GAK4C,EAAG,EAAA0kC,gBAAiB,EAAAC,eAE3E,cAmBC,WAAYx7B,GAAZ,MACC,YAAMA,EAAO,gBAAc,K,OAnB5B,EAAA7D,qBAAmE,IAAI,EAAAC,yBACtE,EACA,EAAAq/B,kBAEe,EAAAn/B,MAA0B,IAAI,EAAA0pB,iBAAiB,G,EAiFhE,OAtF8D,iBAYtD,EAAAxpB,aAAP,WACC,OAAO,EAAAC,YAAYi/B,KAEb,EAAA/+B,sBAAP,WACC,OAAOT,GAOR,YAAAU,qBAAA,WAOCC,KAAKQ,GAAGC,QAAQC,sBAIjB,YAAAo+B,YAAA,SAAYtM,GAEXA,EAAQn2B,KAAO2D,KAAKkX,YACpBlX,KAAKe,cAAcyxB,IAEpB,YAAAuM,cAAA,WACC/+B,KAAKe,cAAc09B,IA8CrB,EAtFA,CAA8D,EAAA56B,WAAjD,EAAAm7B,eAyFb,+B,+CAAyD,OAAnB,iBAAmB,EAAzD,CAAsCA,GAAzB,EAAAC,oB,yFC9Gb,SACA,OAwGA,SAEA,SACA,QACA,QAKMC,EAAW,CAChB,CAACC,UAAS,aACV,CAACC,sBAAqB,yBACtB,CAACC,sBAAqB,yBACtB,CAACC,iCAAgC,oCACjC,CAACC,iCAAgC,oCACjC,CAACC,2BAA0B,8BAC3B,CAACC,wBAAuB,2BACxB,CAACC,wBAAuB,4BAGnBC,EAAkC,CAAC,CAACC,oBAAmB,uBAAG,CAACC,eAAc,kBAAG,CAACC,uBAAsB,2BAEnGC,EAAoC,CAAC,CAACC,aAAY,gBAAG,CAACC,cAAa,kBACnEC,EAAoC,CACzC,CAACD,cAAa,iBACd,CAACE,2BAA0B,8BAC3B,CAACC,0BAAyB,6BAC1B,CAACJ,aAAY,gBACb,CAACK,0BAAyB,6BAC1B,CAACC,yBAAwB,6BAiDpBC,EAAkD,CAAC,UAAW,QAAS,QAAS,YAAa,aAC7FC,EAAgC,CACrCC,QAAS,UACTC,MAAO,SACPC,MAAO,SACPC,UAAW,aACXC,UAAW,cAQZ,OAmEMC,EAAe,IAlErB,uE,OAEC,EAAAC,IAAM,EAAA7hC,YAAYJ,OAAO,EAAAkiC,kBAAkBC,cAAe,CACzDC,eAAgB,CAACC,UAAW,aAE7B,EAAAC,OAAS,EAAAliC,YAAYhB,OAAO,KAAM,CACjC4W,SAAU,SAACtR,EAAoB6S,GAC9BgrB,EAAYC,sBAAsB99B,EAAqB6S,MAGzD,EAAAoqB,QAAU,EAAAvhC,YAAYV,QAAQ,EAAA2gC,UAAW,CACxCoC,KAAM,CACLC,QAAStC,EAAS70B,KAAI,SAACnO,GACtB,MAAO,CACNG,KAAM5B,OAAO6R,KAAKpQ,GAAG,GACrBY,MAAOrC,OAAO4S,OAAOnR,GAAG,UAK5B,EAAAulC,OAAS,EAAAviC,YAAYV,QAAQ/D,OAAO4S,OAAOsyB,EAAU,IAAI,GAAI,CAC5D4B,KAAM,CAELC,QAAS7B,EAAUt1B,KAAI,SAACnO,GACvB,MAAO,CACNG,KAAM5B,OAAO6R,KAAKpQ,GAAG,GACrBY,MAAOrC,OAAO4S,OAAOnR,GAAG,UAK5B,EAAAwlC,OAAS,EAAAxiC,YAAYV,QAAQ/D,OAAO4S,OAAOsyB,EAAU,IAAI,GAAI,CAC5D4B,KAAM,CAELC,QAAS7B,EAAUt1B,KAAI,SAACnO,GACvB,MAAO,CACNG,KAAM5B,OAAO6R,KAAKpQ,GAAG,GACrBY,MAAOrC,OAAO4S,OAAOnR,GAAG,UAK5B,EAAAylC,WAAa,EAAAziC,YAAYV,QAAQ/D,OAAO4S,OAAO0yB,EAAY,IAAI,GAAI,CAClEwB,KAAM,CAELC,QAASzB,EAAY11B,KAAI,SAACnO,GACzB,MAAO,CACNG,KAAM5B,OAAO6R,KAAKpQ,GAAG,GACrBY,MAAOrC,OAAO4S,OAAOnR,GAAG,UAK5B,EAAA0lC,WAAa,EAAA1iC,YAAYV,QAAQ/D,OAAO4S,OAAO6yB,EAAY,IAAI,GAAI,CAClEqB,KAAM,CAELC,QAAStB,EAAY71B,KAAI,SAACnO,GACzB,MAAO,CACNG,KAAM5B,OAAO6R,KAAKpQ,GAAG,GACrBY,MAAOrC,OAAO4S,OAAOnR,GAAG,U,EAK7B,OAhEkC,iBAgElC,EAhEA,CAAkC,EAAAiD,mBAoElC,yE,OACC,EAAA0iC,cAAgBf,E,EA6PjB,OA9PiC,iBAOzB,EAAAhjC,KAAP,WACC,MAAO,QA2FF,YAAAwd,KAAN,W,uHACKtb,KAAK8hC,qBAAqB9hC,KAAKyY,GAAGsoB,KACrC,GAAM/gC,KAAK+hC,kBADR,M,cACH,S,aAEA,SAAM/hC,KAAKgiC,kB,OAAX,S,mCAIM,YAAAF,qBAAR,SAA6Bf,GAC5B,OAAO,GAGM,YAAAgB,eAAd,W,sHACiB,SAAM/hC,KAAKiiC,cAAcjiC,KAAKyY,GAAGsoB,M,cAA3CvO,EAAU,WAGfxyB,KAAKkiC,uBAAuB1P,GAC5BxyB,KAAK8+B,YAAYtM,IAEjBxyB,KAAK++B,gB,YAIO,YAAAiD,eAAd,W,6HACKhiC,KAAKmiC,qBACQ,GAAMniC,KAAKiiC,cAAcjiC,KAAKyY,GAAGsoB,MAD9C,M,cACGvO,EAAU,WAMfxyB,KAAKoiC,oCAAoC5P,GAE1CxyB,KAAKqiC,oBAAsBriC,KAAKyY,GAAGsoB,IAEnC/gC,KAAKsiC,0BAED9P,GACHxyB,KAAKkiC,uBAAuB1P,GAC5BxyB,KAAK8+B,YAAYtM,IAEjBxyB,KAAK0b,gBAAgBC,W,+BAaxB,YAAA4mB,aAAA,WACC,OAAOviC,KAAKyY,GAAGsoB,KAGR,YAAAmB,uBAAR,SAA+B1P,GAE9B,IAA2B,UAAA+N,EAAA,eAAqB,CAA3C,IAAIiC,EAAc,KAChB9b,EAAa8Z,EAAegC,GAC5BC,EAAcziC,KAAKyiB,OAAO4b,MAAM3X,GAGnB,MAAf+b,GAAuBjQ,GACtBA,EAAQgQ,IAAmBC,IAC9BjQ,EAAQgQ,GAAkBC,EAC1BjQ,EAAQG,aAAc,KAKnB,EAAA2O,sBAAP,SAA6B99B,EAAmB6S,GAC/C7S,EAAKk/B,yBAEE,YAAAA,sBAAR,WACC1iC,KAAKqiC,yBAAsBh5B,EAG3BrJ,KAAKvC,EAAEsjC,IAAIrsB,wBAIJ,YAAA4tB,wBAAR,WACKtiC,KAAK2iC,QACJ3iC,KAAKyiB,OAAOmgB,IAAI,gBACnB5iC,KAAK2iC,OAAOE,YAAc7iC,KAAKyiB,OAAO4b,MAAM,gBAKvC,YAAA+D,oCAAR,SAA4C5P,GAC3C,GAAIA,EAEH,GADiBA,EAAQpjB,aAAe,EAAA0zB,cAGvC,GADA9iC,KAAK2iC,OAASnQ,EAAQuQ,MAClB/iC,KAAK2iC,SACH3iC,KAAKyiB,OAAOugB,UAAU3B,EAAY4B,uBAAwB,CAC9D,IAAMC,EAAWljC,KAAK2iC,OAAOO,SAE7BljC,KAAKqb,UAAU,EAAAld,UAAUG,MAAO+iC,EAAY4B,sBAAuB,KAAM,CACxE7I,OAAO,EACP9e,MAAM,EACN6nB,MAAO,CAAC,EAAGD,GACXE,aAAc,EAAC,GAAM,KAGtBpjC,KAAKoc,KAAK,EAAA/Q,UAAUgvB,sBAItBr6B,KAAKqjC,4BAGNrjC,KAAKqjC,wBAIC,YAAAA,qBAAR,WACKrjC,KAAKyiB,OAAOugB,UAAU3B,EAAY4B,yBACrCjjC,KAAKyiB,OAAOkX,aAAa0H,EAAY4B,uBACrCjjC,KAAKoc,KAAK,EAAA/Q,UAAUgvB,kBAId,YAAA8H,mBAAR,WACC,OAAOniC,KAAKqiC,qBAAuBriC,KAAKyY,GAAGsoB,KAG9B,YAAAkB,cAAd,SAA4BlB,G,2HACvBvO,EAAyC,KACvCnc,EAAQrW,KAAKyiB,OAAO/lB,IAAI,QAC1BqkC,IAAO1qB,EAAP,YACHrW,KAAKsjC,gBAAkBtjC,KAAKsjC,iBAAmB,IAAI,EAAAtC,kBAAkBhhC,KAAMqW,G,iBAGhE,O,sBAAA,GAAMrW,KAAKsjC,gBAAgBC,4BAA4BxC,I,cAAjEvO,EAAU,S,iDAONA,GACJxyB,KAAKswB,OAAOhT,MAAMpd,IAAI,2BAA2B6gC,EAAG,K,aAMrD/gC,KAAKswB,OAAOhT,MAAMpd,IAAI,2C,iBAEvB,MAAO,CAAP,EAAOsyB,WA9OD,EAAAyQ,sBAAwB,aACxB,EAAAO,kBAAoB,CAC1BC,GAAI,eACJC,QAAS,gBA6OX,EA9PA,CAAiC,EAAA1E,cAApB,EAAAqC,e,kFCtQDsC,E,OAHZ,UAGA,SAAYA,GACX,wBACA,sBACA,oBACA,oBAJD,CAAYA,EAAA,EAAAA,mBAAA,EAAAA,iBAAgB,KAO5B,iBAEC,WACWC,EACAC,EACAvhB,EACAvO,GAHA,KAAA6vB,mBACA,KAAAC,aACA,KAAAvhB,QACA,KAAAvO,QAyBZ,OApBC,sBAAI,8BAAe,C,IAAnB,WACC,OAAO/T,KAAK4jC,kB,gCAEb,sBAAI,wBAAS,C,IAAb,WACC,OAAO5jC,KAAK6jC,Y,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAO7jC,KAAKsiB,O,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAOtiB,KAAK+T,O,gCAOb,YAAA+vB,oBAAA,WACC,OAAO,IAAI,EAAAC,6BAEb,EA/BA,GAAsB,EAAAC,oBAiCtB,kBACC,WAAsB1hB,EAAiCuhB,EAA2C9vB,GAAlG,MACC,YAAM4vB,EAAiB9M,UAAWgN,EAAYvhB,EAAOvO,IAAM,K,OADtC,EAAAuO,QAAiC,EAAAuhB,aAA2C,EAAA9vB,Q,EAMnG,OAP2C,iBAI1C,sBAAI,mBAAI,C,IAAR,WACC,MAAO,aAAa/T,KAAKikC,UAAS,IAAIjkC,KAAK3D,M,gCAE7C,EAPA,CAA2C2nC,GAA9B,EAAAE,wBASb,kBACC,WAAsB5hB,EAAiCuhB,EAA2C9vB,GAAlG,MACC,YAAM4vB,EAAiBQ,SAAUN,EAAYvhB,EAAOvO,IAAM,K,OADrC,EAAAuO,QAAiC,EAAAuhB,aAA2C,EAAA9vB,Q,EAMnG,OAP0C,iBAIzC,sBAAI,mBAAI,C,IAAR,WACC,OAAO/T,KAAK3D,M,gCAEd,EAPA,CAA0C2nC,GAA7B,EAAAI,uBASb,kBACC,WAAsB9hB,EAAiCuhB,EAA2C9vB,GAAlG,MACC,YAAM4vB,EAAiBU,QAASR,EAAYvhB,EAAOvO,IAAM,K,OADpC,EAAAuO,QAAiC,EAAAuhB,aAA2C,EAAA9vB,Q,EAMnG,OAPyC,iBAIxC,sBAAI,mBAAI,C,IAAR,WACC,MAAO,WAAW/T,KAAKikC,UAAS,IAAIjkC,KAAK3D,M,gCAE3C,EAPA,CAAyC2nC,GAA5B,EAAAM,sBASb,kBACC,WAAsBhiB,EAAiCuhB,EAA2C9vB,GAAlG,MACC,YAAM4vB,EAAiBY,QAASV,EAAYvhB,EAAOvO,IAAM,K,OADpC,EAAAuO,QAAiC,EAAAuhB,aAA2C,EAAA9vB,Q,EAMnG,OAPyC,iBAIxC,sBAAI,mBAAI,C,IAAR,WACC,MAAO,WAAW/T,KAAKikC,UAAS,IAAIjkC,KAAK3D,M,gCAE3C,EAPA,CAAyC2nC,GAA5B,EAAAQ,uB,yFCvEb,SACA,QAEA,OACA,OACA,QAoBA,OAEA,SAAgBC,EAA4C/gB,GAC3D,mBAAO,2D,OACN,EAAA9e,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAAqmC,kBAAoB,EAAAxlC,YAAYd,QAAQ,GACxC,EAAAiH,YAAc,EAAAnG,YAAYd,QAAQ,GAClC,EAAAumC,QAAU,EAAAzlC,YAAYZ,MAAM,GAC5B,EAAAsmC,WAAa,EAAA1lC,YAAYZ,MAAM,GAC/B,EAAAumC,QAAU,EAAA3lC,YAAYd,QAAQ,G,EAC/B,OAP2B,iBAO3B,EAPA,CAA2BslB,GAD5B,qBAWA,+B,+CAOA,OAP8B,iBAO9B,EAPA,CAA8B,EAAArF,UAe9B,GAPA,yB,+CAAgC,iBAAhC,CAAgComB,EAAiB,EAAAtlC,mBACjD,yB,+CAA6B,iBAC5B,YAAA+e,gBAAA,WACC,OAAO,IAAI4mB,GAFb,CAA6B,EAAA1mB,cAM7B,yB,+CA+FA,OA/FsC,iBAgB9B,EAAAqG,OAAP,SAAcjhB,GACb,IAAMN,EAAWM,EAAKN,SAChBuV,EAAKjV,EAAKiV,GAChBvV,EAAS0B,MAAMqgB,KAAKxM,EAAG7T,OACvB1B,EAASiC,aAAesT,EAAGisB,kBAAoB,EAAAK,aAAe,EAAA3/B,SAE9DlC,EAASyhC,QAAUlsB,EAAGksB,QACtBzhC,EAASmC,YAAcoT,EAAGpT,aAAeoT,EAAGksB,QAAU,EAClDzhC,EAASmC,cACZnC,EAASoC,WAAY,GAEtBpC,EAAS8hC,UAAYvsB,EAAGmsB,WACxB1hC,EAAS+hC,IAAMxsB,EAAGosB,SAmEpB,EA/FA,CAAsC,EAAAK,iBAAzB,EAAAC,oB,yFCrDb,SAEA,OACA,OACA,OACA,QACA,QAEA,OACA,SAAgBC,EAA2C1hB,GAC1D,mBAAO,2D,OACN,EAAA2hB,aAAe,EAAAnmC,YAAYd,QAAQ,GACnC,EAAAknC,MAAQ,EAAApmC,YAAYd,QAAQ,EAAG,CAACg+B,WAAY,CAACiJ,cAAc,K,EAC5D,OAH2B,iBAG3B,EAHA,CAA2B3hB,GAD5B,oBAOA,+B,+CAEA,OAF4B,iBAE5B,EAFA,CAA4B,EAAArF,UAU5B,GAPA,yB,+CAA+B,iBAA/B,CAA+B+mB,EAAgB,EAAAjmC,mBAC/C,yB,+CAA0B,iBACzB,YAAA+e,gBAAA,WACC,OAAO,IAAIqnB,GAFb,CAA0B,EAAAnnB,cAM1B,yB,+CAyBA,OAzBoC,iBAM5B,EAAAqG,OAAP,SAAcjhB,GACb,IAAMgiC,EAAOhiC,EAAKN,SAAS2B,KACrB4gC,EAAcjiC,EAAKiV,GAAG6sB,MAAQ,EAAAxgC,UAAY,EAAA4gC,SAChDliC,EAAKN,SAAS2B,KAAOrB,EAAKiV,GAAG4sB,aAAe,EAAAM,WAAaF,EACrDD,GAAQhiC,EAAKN,SAAS2B,OACzBrB,EAAKN,SAASyvB,aAAc,IAc/B,EAzBA,CAAoC,EAAAuS,iBAAvB,EAAAU,kB,yFC1Bb,SAEA,SAGA,QAGA,SACA,QACA,UAMA,SAAYC,GACX,oCACA,8BACA,qCAHD,CAAY,EAAAA,qBAAA,EAAAA,mBAAkB,KAS9B,6E,OACS,EAAAC,2BAA6E,IAAIxM,I,EA8S1F,OA/S2C,iBAG1C,YAAAyM,sCAAA,aAIM,YAAAC,yBAAN,SAA+B9iC,G,6GAIxB+iC,EAAuBjmC,KAAK+lC,0CAEjCE,EAAqBrkC,SACpB,SAAOskC,EAA+CC,GAA+B,+C,6EAChFnmC,KAAKomC,gBACJC,EAA+CrmC,KAAK8lC,2BAA2BppC,IAClFypC,MAGAE,EAAY,IAAIH,EAAgBlmC,KAAKsmC,iBACrCtmC,KAAK8lC,2BAA2B5lC,IAAIimC,EAAaE,IAGlDA,EAAUE,eAAevmC,KAAKwmC,aAC9BH,EAAUI,wBAAwBzmC,KAAKomC,eACvCC,EAAUK,mBAAmB1mC,KAAK2mC,gBAClCN,EAAUO,qBAAqB5mC,KAAK6mC,qBAE9BC,EAAkB5jC,EAAS6jC,iBAAiBZ,IAEjD,GAAME,EAAUW,iBAAiBF,IAD9B,OAfD,M,OAgBF,S,gDAoBA,YAAAE,iBAAN,SAAuB9jC,G,0GAEvB,YAAA+jC,sCAAA,WACC,MAAO,IAGR,YAAAC,qBAAA,SACCC,EACAzO,EACA0O,G,MAEMxvB,EAAQuvB,EAAY3mC,GAAGiX,OAAO4vB,YAAYD,GAC1CE,EAAYH,EAAYnP,mBAAmBoP,GAC3CG,EAAkBvnC,KAAKunC,gBAAgBH,GAEzCI,EAAyB,KAC7B,GAAI5vB,EACH4vB,EAAU,EAAAjP,UAAUyF,QAAQsJ,QAE5B,GAAIC,EAAgBE,yBAA0B,CAC7C,IAAM5N,EAAmBsN,EAAY3mC,GAAGiX,OAAOiwB,sCAAsCN,GACrF,GAAIvN,EAAkB,CACrB,IAAM8N,EAAU9N,EAAiB/7B,KAC3B8pC,EAAgC,QAAvB,EAAG5nC,KAAK6nC,uBAAe,eAAEC,eACvCX,EACAQ,EACAP,EACA1O,GAEGkP,IACHJ,EAAUI,QAGN,CACN,IAAMG,EAA0BR,EAAgBS,UAC5CD,IACHP,EAAUO,GAWb,GAAIP,EAAS,CACZ,IAAMS,EAASV,EAAgBU,SACzBC,EAASX,EAAgBW,SACzBC,EAAeZ,EAAgBY,eACjCA,GACHzP,EAA8B0P,eAAejB,EAAa,CAAC,OAAOgB,IAEnEzP,EAA8B0P,eAAejB,EAAa,CAAC,GAAGc,EAAST,EAAUU,IAC7EC,GACHzP,EAA8B0P,eAAejB,EAAa,CAAC,aAK9D,YAAAkB,sBAAA,SAAsBlB,EAA2BzO,G,MAE1C4P,EAAc5P,EAA8B6P,oBAC5CC,EAA6C,QAAlC,EAAGxoC,KAAKyoC,cAAcH,UAAY,eAAEE,cACrD,GAAIA,EAEH,IAAuB,UAAAA,EAAA,eAAa,CAA/B,IAAIpB,EAAU,KAClBpnC,KAAKknC,qBAAqBC,EAAazO,EAA+B0O,KAIzE,YAAAsB,yBAAA,SACCC,EACAjQ,G,MAIMiP,EAAUgB,EAAehB,UACzBH,EAA8B,QAAvB,EAAGxnC,KAAK6nC,uBAAe,eAAEC,eACrCa,EACAhB,EACAgB,EAAez5B,eACfwpB,GAEKkQ,EAAWD,EAAe5Q,YAAY4Q,EAAevQ,aAC3DM,EAA8B0P,eAAeO,EAAgB,CAAIhB,EAAO,IAAIiB,EAAQ,MAAMpB,KAkC3F,YAAAqB,oBAAA,SAAoBC,EAAsBR,EAAyBM,GAC9DN,GAAe,EAAAlf,WAAW2f,UAC7BD,EAAWhuC,KAAK,QAAQ8tC,EAAQ,oBAGlC,YAAAI,kBAAA,SAAkBF,EAAsBR,EAAyBM,GAC5DN,GAAe,EAAAlf,WAAW2f,UAC7BD,EAAWhuC,KAAK,QAAQ8tC,EAAQ,kBAIlC,YAAAK,uBAAA,SAAuBC,EAA6BxQ,G,MAM7CoQ,EAAa,GACbR,EAAc5P,EAA8B6P,oBAC5CE,EAAgBzoC,KAAKyoC,cAAcH,GACzC,GAAKG,EAAL,CAmBA,IAhBA,IAcIU,EACAC,EAfEC,EAAeZ,EAAcY,eAE7BC,EAAkE,IAAIhQ,IAMtEiQ,EAAuD,IAAIjQ,IAQzC,MAAA4P,EAAa1oC,GAAGC,QAAQ+oC,oBAAxB,eAA6C,CAAhE,IAAIpR,EAAW,KACbwQ,EAAWM,EAAanR,YAAYK,GACpCqR,EAAsB/Q,EAA8B6P,oBAE1D,OAAQnQ,GACP,IAAK,QACJ+Q,EAAa,IAAI,EAAA7E,oBAAoB4E,EAAc,EAAAvjB,oBAAoBrnB,MAAO85B,GAC1EqR,GACH,EAAAC,SAASC,uBAAuBL,EAA4BG,EAAqBN,GAGlFC,EAAY,SAASR,EAAQ,MAAMxQ,EACnC,IAAuB,UAAAiR,EAAA,eAAc,CAAhC,IAAIO,EAAU,KAClB,EAAAF,SAASC,uBAAuBL,EAA4BM,EAAYT,GACxE,EAAAO,SAASC,uBAAuBJ,EAA2BK,EAAYR,GAIxEN,EAAWhuC,KAAKsuC,GAChBppC,KAAK6pC,sBACL,MACD,IAAK,eACJ7pC,KAAK6oC,oBAAoBC,EAAYR,EAAaM,GAClD,MAED,IAAK,aACJ5oC,KAAKgpC,kBAAkBF,EAAYR,EAAaM,GAChDO,EAAa,IAAI,EAAA7E,oBAAoB4E,EAAc,EAAAvjB,oBAAoBI,KAAMqS,GACzEqR,GACH,EAAAC,SAASC,uBAAuBL,EAA4BG,EAAqBN,GAElF,IAAuB,UAAAE,EAAA,eAAc,CAA5BO,EAAU,KAClB,EAAAF,SAASC,uBAAuBL,EAA4BM,EAAYT,GAGzEnpC,KAAK8pC,2BACL,MAED,IAAK,gBACAxB,GAAe,EAAAlf,WAAW2f,UAC7BD,EAAWhuC,KAAK,QAAQ8tC,EAAQ,oBAEjC,MACD,QAUqB,QAApB,EAAA5oC,KAAK6nC,uBAAe,SAAEkC,oBACrBb,EACA9Q,EACAM,IAyBJ4Q,EAA2B1nC,SAAQ,SAACooC,EAAa1B,GAChD5P,EAA8BuR,gBAAgBf,EAAcc,EAAa1B,MAE1EiB,EAA0B3nC,SAAQ,SAACknC,EAAYR,GAC9C5P,EAA8B0P,eAAec,EAAcJ,EAAYR,MAMxE5P,EAA8B0P,eAAec,EAAcJ,KAE7D,EA/SA,CAA2C,EAAAoB,uBAA9B,EAAAC,yB,8ECzBb,+BA4BA,OA3BQ,EAAAR,uBAAP,SAAoCt/B,EAAkBjN,EAAQgtC,GAC7C//B,EAAIu4B,IAAIxlC,GAEvBiN,EAAI3N,IAAIU,GAAMtC,KAAKsvC,GAEnB//B,EAAInK,IAAI9C,EAAK,CAACgtC,KAGT,EAAAC,0BAAP,SAAuChgC,EAAkBjN,EAAQgtC,GAChD//B,EAAIu4B,IAAIxlC,GAEvBiN,EAAI3N,IAAIU,GAAMktC,QAAQF,GAEtB//B,EAAInK,IAAI9C,EAAK,CAACgtC,KAGT,EAAAG,yBAAP,SAAsClgC,EAAkBjN,EAAQotC,GAE/D,GADgBngC,EAAIu4B,IAAIxlC,GAGvB,IADA,IAAIkF,EAAa+H,EAAI3N,IAAIU,GACL,MAAAotC,EAAA,eAAc,CAA7B,IAAI7/B,EAAO,KACfrI,EAAMxH,KAAK6P,QAGZN,EAAInK,IAAI9C,EAAKotC,IAGhB,EA5BA,GAAa,EAAAd,Y,kGCAb,2BAIA,QAGA,SACA,QASA,2B,+CA4EA,OA5EqE,iBAEpE,sBAAI,yBAAU,C,IAAd,WACC,OAAO,G,gCAER,sBAAI,yBAAU,C,IAAd,WACC,OAAO1pC,KAAKihB,YAAcjhB,KAAK0N,e,gCAYtB,YAAAgU,kBAAV,WAMC1hB,KAAKswB,OAAOhT,MAAML,QAElB,IAAMwtB,EAAYzqC,KAAK0gB,QAAQ1gB,KAAKihB,YACnB,MAAbwpB,GACCzqC,KAAKsgB,yBACRtgB,KAAKsgB,uBAAuBoqB,oBAAerhC,GAAW,GACtDrJ,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWmpB,qBAElCF,GAAazqC,KAAKygB,SACrBzgB,KAAK4qC,cAAcH,GACnBzqC,KAAK0U,qBAAqB1U,QAGvB,UAAgBA,KAAKihB,aACxBjhB,KAAKsgB,uBAAyBtgB,KAAKsgB,wBAA0B,IAAI,EAAAuqB,qBAAqB7qC,MAClFA,KAAKihB,YAAcjhB,KAAKsgB,uBAAuBwqB,aAClD9qC,KAAKsgB,uBAAuBoqB,eAAe1qC,KAAKihB,YAChDjhB,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWmpB,sBAGtC3qC,KAAKswB,OAAOhT,MAAMpd,IAAI,2BAA2BF,KAAKkX,YAAW,MAIpD,YAAA2K,oBAAhB,W,qIAC+B,QAA1B,EAAA7hB,KAAKujB,6BAAqB,UAAEnjB,QAAWJ,KAAKujB,sBAAsBwnB,kBAAlE,MACuB,GAAM/qC,KAAKujB,sBAAsBynB,sB,OAArDC,EAAoB,SACtBjrC,KAAKujB,sBAAsB2nB,WAC9BlrC,KAAKswB,OAAOhT,MAAMpd,IACjB,sBAAsBF,KAAKujB,sBAAsBunB,WAAU,MAAM9qC,KAAKujB,sBAAsB4nB,cAAa,KAIzF,OADXV,EAAYzqC,KAAK0gB,QAAQuqB,IAE9BjrC,KAAK4qC,cAAcH,GAEnBzqC,KAAKswB,OAAOhT,MAAMpd,IACjB,uCAAuC+qC,EAAiB,MAAMjrC,KAAKujB,sBAAsBunB,WAAU,K,mCAMhG,YAAAF,cAAR,SAAsB/5B,GACrB7Q,KAAKygB,OAAS5P,EACV7Q,KAAKwiB,cACRxiB,KAAKwiB,aAAagS,4BAEnBx0B,KAAKhC,QAAQotC,mBACbprC,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,eACrC/xB,KAAK2U,sBAEP,EA5EA,CAAqE,EAAAwD,YAA/C,EAAAkzB,qB,8ECjBtB,+BAIA,OAHQ,EAAAC,YAAP,SAAmBz9B,GAClB,MAAM,IAAI09B,MAAM,8BAElB,EAJA,GAAa,EAAAC,c,uFCEb,iBACC,WAAsBhoC,GAAA,KAAAA,OAQvB,OAPC,YAAA45B,WAAA,aAEA,YAAA3Y,OAAA,aAEA,sBAAI,uBAAQ,C,IAAZ,WACC,OAAOzkB,KAAKwD,KAAKN,U,gCAEnB,EATA,GAAa,EAAAgiC,kB,yFCFb,SACA,QACA,OACA,QACA,SAAgBuG,EAA+C/nB,GAC9D,mBAAO,2D,OACN,EAAAgoB,SAAW,EAAAxsC,YAAYd,QAAQ,G,EAChC,OAF2B,iBAE3B,EAFA,CAA2BslB,GAD5B,wBAMA,+B,+CAEA,OAF8B,iBAE9B,EAFA,CAA8B,EAAArF,UAU9B,GAPA,yB,+CAAmC,iBAAnC,CAAmCotB,EAAoB,EAAAtsC,mBACvD,yB,+CAA8B,iBAC7B,YAAA+e,gBAAA,WACC,OAAO,IAAIytB,GAFb,CAA8B,EAAAvtB,cAM9B,yB,+CAYA,OAZwC,iBAKhC,EAAAqG,OAAP,SAAcjhB,GACbA,EAAKN,SAASwoC,SAAWloC,EAAKiV,GAAGizB,UAMnC,EAZA,CAAwC,EAAAxG,iBAA3B,EAAA0G,sB,yFCnBb,QAEA,SACA,QAEA,OACA,SACA,SAAgBC,EAAiDnoB,GAChE,mBAAO,2D,OACN,EAAAooB,QAAU,EAAA5sC,YAAYd,QAAQ,EAAG,EAAA2tC,oBAAoBC,IACrD,EAAA3hC,IAAM,EAAAnL,YAAYT,cACjB,EAAA4iC,YAAYmC,kBAAkBC,GAC9B,EAAAwI,oBAAoBD,EAAsB,Y,EAE5C,OAN2B,iBAM3B,EANA,CAA2BtoB,GAD5B,0BASA,+B,+CAEA,OAFiC,iBAEjC,EAFA,CAAiC,EAAArF,UAWjC,GARA,yB,+CAAqC,iBAArC,CAAqCwtB,EAAsB,EAAA1sC,mBAC3D,yB,+CAAgC,iBAE/B,YAAA+e,gBAAA,WACC,OAAO,IAAIguB,GAHb,CAAgC,EAAA9tB,cAOhC,YACC,WAAsB5a,GAAtB,MACC,YAAMA,IAAK,K,OADU,EAAAA,O,EAgDvB,OAjD0C,iBAIzC,YAAAoX,gBAAA,WACC5a,KAAKmsC,UAAUnsC,KAAKwD,KAAK/F,EAAEquC,QAAS9rC,KAAKwD,KAAK/F,EAAE4M,MAE3C,YAAAoa,OAAN,W,gGACCzkB,KAAKosC,gBAAgBpsC,KAAKwD,KAAKN,SAAU,MAAOlD,KAAKwD,KAAK/F,EAAEquC,QAAS9rC,KAAKwD,KAAK/F,EAAE4M,K,WAErE,EAAAoa,OAAb,SAAoBjhB,G,gGACnBA,EAAK6oC,uBAAuB5nB,S,WAsC9B,EAjDA,CAA0C,EAAA6nB,2BAA7B,EAAAN,wB,yFC3Bb,QAEA,SACA,QAEA,OAGA,SACA,SAAgBO,EAAsD7oB,GACrE,mBAAO,2D,OACN,EAAA8oB,cAAgB,EAAAttC,YAAYd,QAAQ,EAAG,EAAA2tC,oBAAoBU,IAC3D,EAAAC,UAAY,EAAAxtC,YAAYT,cACvB,EAAA4iC,YAAYmC,kBAAkBC,GAC9B,EAAAwI,oBAAoBQ,EAA2B,kB,EAEjD,OAN2B,iBAM3B,EANA,CAA2B/oB,GAD5B,+BASA,+B,+CAEA,OAFmC,iBAEnC,EAFA,CAAmC,EAAArF,UAWnC,GARA,yB,+CAA0C,iBAA1C,CAA0CkuB,EAA2B,EAAAptC,mBACrE,yB,+CAAqC,iBAEpC,YAAA+e,gBAAA,WACC,OAAO,IAAIyuB,GAHb,CAAqC,EAAAvuB,cAOrC,YACC,WAAsB5a,GAAtB,MACC,YAAMA,IAAK,K,OADU,EAAAA,O,EA0CvB,OA3C+C,iBAI9C,YAAAoX,gBAAA,WACC5a,KAAKmsC,UAAUnsC,KAAKwD,KAAK/F,EAAE+uC,cAAexsC,KAAKwD,KAAK/F,EAAEivC,YAEjD,YAAAjoB,OAAN,W,gGACCzkB,KAAKosC,gBAAgBpsC,KAAKwD,KAAKN,SAAU,WAAYlD,KAAKwD,KAAK/F,EAAE+uC,cAAexsC,KAAKwD,KAAK/F,EAAEivC,W,WAEhF,EAAAjoB,OAAb,SAAoBjhB,G,gGACnBA,EAAKopC,6BAA6BnoB,S,WAgCpC,EA3CA,CAA+C,EAAA6nB,2BAAlC,EAAAG,6B,8EC3Bb,aAIA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SACA,SAEA,2BA0BA,OAzBQ,EAAAI,cAAP,SAAqBrpC,GAIpB,OAAO,IAAI,EAAAspC,iBAAiBtpC,IAGtB,EAAAupC,eAAP,SAAsB12B,GACrB,OAAIA,aAAiB,EAAA2e,mBACb,IAAI,EAAAgY,0BAA0B32B,GAElCA,aAAiB,EAAAg1B,kBACb,IAAI,EAAA4B,yBAAyB52B,GAEjCA,aAAiB,EAAA62B,kBACb,IAAI,EAAAC,8BAA8B92B,GAEtCA,aAAiB,EAAA+2B,YACb,IAAI,EAAAC,wBAAwBh3B,GAEhCA,aAAiB,EAAA1X,UACb,IAAI,EAAA2uC,sBAAsBj3B,GAE3B,IAAI,EAAA2lB,kBAAkB3lB,IAE/B,EA1BA,GAAa,EAAAk3B,wB,8EClBb,YAEA,SAcA,aAEC,WAAoBz5B,GAAA,KAAAA,SADZ,KAAA05B,MAA+B,GA+BxC,OA5BC,YAAAxzC,KAAA,WACCgG,KAAK8T,OAAO25B,iBAAiBC,gCAC7B,IAAMC,EAAgB,EAAAJ,qBAAqBV,cAAc7sC,KAAK8T,OAAOqH,MAC/DyyB,EAAaD,EAAc3zC,OAC3Bw9B,EAAUmW,EAAcnW,UAgB9B,OAdAx3B,KAAKwtC,MAAQ,CAEZK,WAAY,CAEXC,MAAO9tC,KAAK8T,OAAOg6B,OAAS,EAC5BC,YAAa/tC,KAAK8T,OAAOi6B,YACzBC,mBAAoBhuC,KAAK8T,OAAOm6B,gBAAgBD,mBAChDE,IAAKluC,KAAK8T,OAAOm6B,gBAAgBC,IACjCC,wBAAyBnuC,KAAK8T,OAAOs6B,mBAAmBD,yBAEzDhzB,KAAMyyB,EACNS,GAAI7W,GAGEx3B,KAAKwtC,OAGN,EAAAc,gBAAP,SAAuBpnC,GAGtB,OAFAA,EAAOA,EAAKiB,QAAQ,KAAM,KAC1BjB,EAAO,EAAAgD,WAAWkB,mBAAmBlE,IAGvC,EAhCA,GAAa,EAAAqnC,qB,yFClBb,SAGA,OACA,QACA,QAKA,GAFA,yB,+CAAwC,iBAAxC,CAAwC,EAAA9qB,uBAAuB,EAAAtkB,mBAE/D,uE,OAIiB,EAAAM,MAA0B,IAAI,EAAAypB,iBAAiB,GACtD,EAAArF,qBAA4C,IAAI,EAAAC,oBAAoB,G,EAa9E,OAfU,iBAIT,YAAA/jB,qBAAA,WACC,YAAMA,qBAAoB,WAC1BC,KAAK6jB,qBAAqBjJ,mBAG3B,YAAAU,KAAA,WACCtb,KAAK6jB,qBAAqBY,SAC1BzkB,KAAKwuC,sBACLxuC,KAAKyuC,uBACLzuC,KAAK0b,gBAAgBC,YAEvB,EAlBA,CAGU,EAAA+yB,oBAHY,EAAAC,+B,yFCVtB,QACA,QAEA,OACA,QAGA,QACA,SAAgBC,EAAsDlrB,GACrE,mBAAO,2D,OACN,EAAAmrB,YAAc,EAAA3vC,YAAYd,QAAQ,GAClC,EAAA0wC,YAAc,EAAA5vC,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACyS,YAAa,K,EAC/D,OAH2B,iBAG3B,EAHA,CAA2BnrB,GAD5B,gCAMA,yB,+CAA0C,iBAA1C,CAA0CkrB,EAA2B,EAAAzvC,mBAArE,IACA,yE,OACiB,EAAAM,MAA0B,IAAI,EAAAypB,iBAAiB,G,EAIhE,OALsE,iBAKtE,EALA,CAAsE,EAAApJ,cAAhD,EAAAivB,yBAOtB,iBAGC,WAAsBvrC,EAAiBuQ,GAAjB,KAAAvQ,OAAiB,KAAAuQ,QAF7B,KAAA0L,QAAU,IAAI,EAAAlZ,KACd,KAAA0X,UAAY,IAAI,EAAAkf,kBAAkB,CAAC6R,WAAW,EAAM/J,KAAK,IAapE,OAVC,YAAAgK,MAAA,WACCjvC,KAAKyf,QAAQpjB,KAAO2D,KAAK+T,MACzB/T,KAAKkvC,gBAGN,sBAAI,qBAAM,C,IAAV,WACC,OAAOlvC,KAAKyf,S,gCAId,EAfA,GAAsB,EAAA0vB,mB,8ECXtB,iBAEC,WACS3rC,EACA4rC,EACAr7B,GAFA,KAAAvQ,OACA,KAAA4rC,sBACA,KAAAr7B,QAsDV,OAnDC,YAAA6G,gBAAA,sBACC5a,KAAKwD,KAAK/D,MAAMQ,QAAQE,UAAS,WAChC,EAAKkvC,+BAIC,YAAAA,yBAAR,W,UAQQ9xC,EAPHyC,KAAKwD,KAAK/D,MAAMQ,QAAQG,QACrB7C,EAAoB,QAAd,EAAGyC,KAAKsvC,cAAM,eAAE/xC,UAE3ByC,KAAKwD,KAAKjG,OAAO+hB,IAAI/hB,GACT,QAAZ,EAAAyC,KAAKuvC,eAAO,SAAE9qB,WAGTlnB,EAAqB,QAAf,EAAGyC,KAAKuvC,eAAO,eAAEhyC,SAE5ByC,KAAKwD,KAAKjG,OAAOiiB,OAAOjiB,IAI3B,sBAAI,qBAAM,C,IAAV,WACC,GAAIyC,KAAKwD,KAAK/D,MAAMQ,QAAQG,OAC3B,OAAQJ,KAAKuvC,QAAUvvC,KAAKuvC,SAAWvvC,KAAKwvC,kB,gCAG9C,sBAAI,sBAAO,C,IAAX,WACC,OAAOxvC,KAAKwD,KAAK/D,MAAMQ,QAAQG,QAAUJ,KAAKwD,KAAKiV,GAAGo2B,a,gCAG/C,YAAAW,eAAR,WACC,IAAMF,EAAS,IAAItvC,KAAKovC,oBAAoBpvC,KAAKwD,KAAMxD,KAAK+T,OAG5D,OAFAu7B,EAAOL,QACPjvC,KAAKwD,KAAKisC,MAAMnwB,IAAIgwB,EAAO/xC,QACpB+xC,GAGR,YAAA7qB,OAAA,WACKzkB,KAAK0vC,SACH1vC,KAAKuvC,UACTvvC,KAAKuvC,QAAUvvC,KAAKwvC,kBAEjBxvC,KAAKuvC,UACRvvC,KAAKuvC,QAAQhyC,OAAOmyC,SAAU,EAC9B1vC,KAAKuvC,QAAQ9qB,WAGVzkB,KAAKuvC,UACRvvC,KAAKuvC,QAAQhyC,OAAOmyC,SAAU,IAIlC,EA3DA,GAAa,EAAAC,oB,yFCXb,QACA,QAIA,GADA,yB,+CAAyC,iBAAzC,CADA,KACyCxwC,kBACzC,uE,OAEW,EAAAyf,0BAAoC,E,EAkB/C,OApBwC,iBAavC,YAAApd,cAAA,WACC,OAAO,IAAI,EAAA6E,OAGZ,YAAAiV,KAAA,WACCtb,KAAK0b,gBAAgBC,YAEvB,EApBA,CAAwC,EAAAmE,eAA3B,EAAA8vB,sB,yFCAb,OACA,4BAA4DlsB,GAC3D,mBAAO,2D,OACN,EAAAmsB,MAAQ,EAAA3wC,YAAYV,QAAQ,EAAG,CAC9B2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,K,EAEvB,OAL2B,iBAK3B,EALA,CAA2B1f,IAQ5B,iBACC,WAAoBlgB,GAAA,KAAAA,OAuBrB,OAdC,YAAAihB,OAAA,WACC,IAAMlnB,EAASyC,KAAKwD,KAAKjG,OASzBA,EAAOuyC,OAAO5vC,IAAI,GAClB3C,EAAOuyC,OAAOC,OAAO/vC,KAAKwD,KAAKif,OAAOutB,QAjCrB,WAoCnB,EAxBA,GAAa,EAAAC,oB,yFCfb,UAEA,OACA,OAEA,2BAMA,SACA,SAEA,QACA,QACA,QAaA,SAASC,EAA4B/tC,G,MACpC,MAAO,CACNo6B,eAAgB,CAACC,QAAS,EAAA58B,YAAYuwC,MACtC/T,YAAU,GACTgU,gBAAiB,GACjB,EAAC,wBAAwBjuC,GAAU,E,IAKtC,WACA,wCAAwEuhB,GACvE,mBAAO,2D,OACN,EAAA2sB,aAAe,EAAAnxC,YAAYX,SAE3B,EAAA6xC,gBAAkB,EAAAlxC,YAAYd,QAAQ,GACtC,EAAAkyC,uBAAyB,EAAApxC,YAAYd,QAAQ,EAtBvC,CACNg+B,WAAY,CACXgU,gBAAiB,KAqBlB,EAAAG,mBAAqB,EAAArxC,YAAYT,cAAc,GAAIyxC,EAA4B,IAC/E,EAAAM,uBAAyB,EAAAtxC,YAAYd,QAAQ,EAxBvC,CACNg+B,WAAY,CACXgU,gBAAiB,KAuBlB,EAAAK,mBAAqB,EAAAvxC,YAAYT,cAAc,GAAIyxC,EAA4B,IAC/E,EAAAQ,uBAAyB,EAAAxxC,YAAYd,QAAQ,EA1BvC,CACNg+B,WAAY,CACXgU,gBAAiB,KAyBlB,EAAAO,mBAAqB,EAAAzxC,YAAYT,cAAc,GAAIyxC,EAA4B,IAC/E,EAAAU,uBAAyB,EAAA1xC,YAAYd,QAAQ,EA5BvC,CACNg+B,WAAY,CACXgU,gBAAiB,KA2BlB,EAAAS,mBAAqB,EAAA3xC,YAAYT,cAAc,GAAIyxC,EAA4B,I,EAChF,OAZ2B,iBAY3B,EAZA,CAA2BxsB,IAe5B,iBAcC,WAAoBlgB,GAAA,KAAAA,OAXZ,KAAAstC,wBAAqD,GACrD,KAAAC,wBAAsD,GACtD,KAAAC,yBAAgD,GAChD,KAAAC,wCAA+D,GAC/D,KAAAC,uCAAiD,EAEjD,KAAAC,oBAAiD,GAEjD,KAAAC,mCAAqD,GACrD,KAAAC,+BAAsD,GAmP/D,OA9OC,YAAAh0B,OAAA,SAAOi0B,EAA2B9rC,EAAe+rC,GAChD,IAAM9zB,EAAWzd,KAAKyd,SAAS6zB,GAC/B,GAAI7zB,EACH,GAAIzd,KAAKwD,KAAKif,OAAO4a,QAAQ,mBAAoB,CAChD,IAAMmU,EAAWxxC,KAAKwxC,SAASF,GAC3BE,IACHA,EAASp0B,QAAQ5X,EAAKqI,EAAGrI,EAAKsI,GAC9B0jC,EAASn0B,eAGVrd,KAAKwD,KAAKiuC,uBAAuBF,GAKjC9zB,EAASJ,OAAOrd,KAAKwD,KAAKL,MAAMuuC,cAAe1xC,KAAKwD,KAAKjG,SAKpD,YAAAkgB,SAAR,SAAiB6zB,GAChB,OAAOtxC,KAAK8wC,wBAAwBQ,EAAO7mC,KAG5C,YAAAknC,gBAAA,SAAgBL,EAA2B9rC,GAC1C,IAAMosC,EAAK,EAAA/9B,KAAKnB,qBAAqBm/B,kBAAkBP,GAEjD7zB,EAAW,IAAI,EAAAq0B,cAAc,CAClCR,OAAQA,EACRS,WAAW,EACXC,OAAO,EACPxV,QAASoV,IA2BV,OAxBAn0B,EAASw0B,UAAUl1B,SAAU,EAC7BU,EAASy0B,yBAA0B,EAGnCz0B,EAAS00B,YAAc,EAAAC,sBACvB30B,EAAS40B,oBAAsB,EAC/B50B,EAAS60B,eAAiB,EAAAC,aAa1B,EAAA1+B,KAAKnB,qBAAqB8/B,kBAAkB/0B,GAC5Czd,KAAK8wC,wBAAwBQ,EAAO7mC,IAAMgT,EAC1Czd,KAAKyyC,kBAAkBnB,EAAQ9rC,GAC/BiY,EAASi1B,cAAc/0C,OAAOg1C,kBAEvBl1B,GAER,YAAAm1B,gBAAA,SAAgBtB,GACf,IAAM7zB,EAAWzd,KAAKyd,SAAS6zB,GAC3B7zB,GACH,EAAA5J,KAAKnB,qBAAqBmgC,oBAAoBp1B,IAGhD,YAAAg1B,kBAAA,SAAkBnB,EAA2B9rC,GAC5CxF,KAAKgxC,yBAAyBM,EAAO7mC,IAAMzK,KAAKgxC,yBAAyBM,EAAO7mC,KAAO,IAAI,EAAAqmB,QAC3F9wB,KAAKgxC,yBAAyBM,EAAO7mC,IAAIwa,KAAKzf,GAE9C,IAAMiY,EAAWzd,KAAKyd,SAAS6zB,GAC3B7zB,GACHA,EAASL,QAAQ5X,EAAKqI,EAAGrI,EAAKsI,GAE/B,IAAM0jC,EAAWxxC,KAAKwxC,SAASF,GAC3BE,GACHA,EAASp0B,QAAQ5X,EAAKqI,EAAGrI,EAAKsI,IAIxB,YAAA0jC,SAAR,SAAiBF,GAChB,OAAQtxC,KAAK+wC,wBAAwBO,EAAO7mC,IAC3CzK,KAAK+wC,wBAAwBO,EAAO7mC,KAAOzK,KAAK8yC,iBAAiBxB,IAG3D,YAAAwB,iBAAR,SAAyBxB,GACxB,IAAM7zB,EAAWzd,KAAKyd,SAAS6zB,GAC/B,GAAI7zB,EAAU,CAQb,IAAM+zB,EAAW,IAAI,EAAAuB,eAAet1B,GAOpC,OAHA+zB,EAASkB,cAAwC,EAA1B/0C,OAAOg1C,kBAC9B3yC,KAAKgzC,oBAAoB1B,EAAO7mC,GAAI+mC,EAAU/zB,GAEvC+zB,IAOH,YAAAyB,uBAAN,W,oIACKjzC,KAAKwD,KAAKif,OAAO4a,QAAQ,mBAAzB,YAEH,GADAr9B,KAAKmxC,oBAAsB,GACvBnxC,KAAKkxC,sCACR,U,GAEDlxC,KAAKkxC,uCAAwC,GAEzClxC,KAAKkzC,gCAAL,YACHlzC,KAAKmxC,oBAAsB,G,IAEb,YAAa,G,wBAAb,YAAL72C,EAAC,KACH64C,EAAenzC,KAAKoxC,mCAAmC92C,GAE5C64C,EAAar2C,OAEvBuZ,EAAQrW,KAAKqxC,+BAA+B/2C,IAC5C84C,EAAoB/8B,EAAMwnB,cAE/B,GAAMuV,EAAkBn8B,qBADrB,OAHD,OAJwB,M,OAQ1B,SAGAjX,KAAKmxC,oBAAoBr2C,KAAKs4C,G,wBAXnB,I,aAgBdpzC,KAAKqzC,uB,wBAGNrzC,KAAKkxC,uCAAwC,E,aAE7ClxC,KAAKmxC,oBAAsB,G,mCAIrB,YAAAkC,qBAAR,WAGC,IAFA,IAEe,MAFH54C,OAAO6R,KAAKtM,KAAK+wC,yBAEd,eAAK,CAAf,IAAItmC,EAAE,KACJ+mC,EAAWxxC,KAAK+wC,wBAAwBtmC,GACxCgT,EAAWzd,KAAK8wC,wBAAwBrmC,GAC1C+mC,GACHxxC,KAAKgzC,oBAAoBvoC,EAAI+mC,EAAU/zB,KAKlC,YAAAu1B,oBAAR,SAA4BvoC,EAAY+mC,EAA0B/zB,GAEjE,IADwBzd,KAAKixC,wCAAwCxmC,GACrE,CAGAzK,KAAKixC,wCAAwCxmC,IAAM,EAEnDzK,KAAKszC,oBAAoB9B,GAEzB,IAAM+B,EAAoB,IAAI,EAAAC,WAAWxzC,KAAKwD,KAAKL,MAAMuuC,cAAe1xC,KAAKwD,KAAKjG,QAClFg2C,EAAkBE,WAAa,EAC/BjC,EAASkC,QAAQH,GAEjB,IAA8B,UAAAvzC,KAAKmxC,oBAAL,eAA0B,CAA9B,KACPwC,kBACjBnC,EACAxxC,KAAKwD,KAAKjG,OACVyC,KAAKgxC,yBAAyBvmC,GAC9BzK,KAAKwD,aAGAxD,KAAKixC,wCAAwCxmC,KAG7C,YAAA6oC,oBAAR,SAA4B9B,GAE3B,IADA,IAAIoC,EACIA,EAAcpC,EAASqC,OAAO9xB,OACrC,GAAI6xB,EAAa,CAChB,IAAME,EAAkCF,EACxC,GAAuC,mBAA5BE,EAAgBt2B,QAC1B,IACCs2B,EAAgBt2B,UACf,MAAOlT,GACRlH,QAAQmT,KAAKjM,IAMjBknC,EAASqC,OAAS,IAGX,YAAAX,8BAAR,WACC,OAAO,GAMR,YAAA9V,WAAA,sBAECp9B,KAAKwD,KAAK6X,UAAU,EAAAld,UAAUC,QAAS,kBAAmB,GAE1D,UAAa,GAAGwD,SAAQ,SAACtH,G,MAClB64C,EAAe,EAAK3vC,KAAK6X,UAAU,EAAAld,UAAUC,QAAS,yBAAwB9D,EAAI,GAAK,EAAG,CAC/F8hC,WAAY,CAACgU,gBAAiB,KAG/B,GAAI+C,EAAc,CACjB,IAAMY,IAAe,GACpB3D,gBAAiB,IAChB+C,EAAa92C,MAAO,E,GAEhB23C,EAAoB,CACzBzX,eAAgB,CAACC,QAAS,EAAA58B,YAAYuwC,MACtC/T,WAAY2X,GAEP19B,EAAQ,EAAK7S,KAAK6X,UACvB,EAAAld,UAAUM,cACV,qBAAoBnE,EAAI,GACxB,GACA05C,GAEG39B,IACH,EAAK+6B,mCAAmCt2C,KAAKq4C,GAC7C,EAAK9B,+BAA+Bv2C,KAAKub,SAM9C,EA/PA,GAAa,EAAA49B,yB,+ECpDb,iBACC,WAAsBnZ,GAAA,KAAAA,SAsBvB,OApBC,YAAAoZ,aAAA,SAAal6C,GACZ,IAAMsnB,EAAYtnB,EAAgB,eAMhBqP,IAAdiY,GACHthB,KAAK86B,OAAO56B,IAAIohB,GAQjBthB,KAAKw7B,SAASxhC,IAGf,YAAAwhC,SAAA,SAASxhC,KACV,EAvBA,GAAa,EAAAm6C,qB,8FCHb,2BAEA,QAIA,SACA,QAGA,SACA,QAEA,2B,+CAmFA,OAnFiC,iBACzB,EAAAr2C,KAAP,WACC,OAAO,EAAAK,UAAUW,QAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAOkB,KAAK0N,e,gCAEH,YAAA2T,iBAAV,SAA2BC,GAC1B,MAAO,GAAGA,GAEX,sBAAI,mCAAoB,C,IAAxB,WACC,MAAO,GAAGthB,KAAKihB,Y,gCAEhB,sBAAI,+BAAgB,C,IAApB,WACC,MAAO,GAAGjhB,KAAKlD,O,gCAET,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SAAwBL,EAA4CC,GACnE,OAAOD,GAAQC,GAEhB,sBAAI,yBAAU,C,IAAd,WACC,OAAO9gB,KAAKihB,YAAcjhB,KAAK0N,e,gCAGhC,YAAAgT,QAAA,SAAQC,GACP,OAAI,UAAgBA,GACZA,EAED,GAAGA,GAGX,sBAAI,wBAAS,C,IAAb,WACC,OAAO3gB,KAAKihB,Y,gCAEH,YAAAS,kBAAV,WACC1hB,KAAKswB,OAAOhT,MAAML,QAEdjd,KAAKo0C,gBAAgBp0C,KAAKihB,YAAYzmB,QAAU,GACnDwF,KAAKsgB,uBAAyBtgB,KAAKsgB,wBAA0B,IAAI,EAAAuqB,qBAAqB7qC,MAClFA,KAAKihB,YAAcjhB,KAAKsgB,uBAAuBwqB,aAClD9qC,KAAKsgB,uBAAuBoqB,eAAe1qC,KAAKihB,YAChDjhB,KAAKwU,YACLxU,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWmpB,sBAGlC3qC,KAAKihB,YAAcjhB,KAAKygB,SAC3BzgB,KAAKygB,OAASzgB,KAAKihB,WACnBjhB,KAAK2U,qBACL3U,KAAK0U,qBAAqB1U,MAC1BA,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,eACjC/xB,KAAKsgB,yBACRtgB,KAAKsgB,uBAAuBoqB,oBAAerhC,GAAW,GACtDrJ,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWmpB,uBAKzB,YAAA9oB,oBAAhB,W,qIAC+B,QAA1B,EAAA7hB,KAAKujB,6BAAqB,UAAEnjB,QAAWJ,KAAKujB,sBAAsBwnB,kBAAlE,MACuB,GAAM/qC,KAAKujB,sBAAsBynB,sB,OAArDC,EAAoB,SACtBjrC,KAAKujB,sBAAsB2nB,WAC9BlrC,KAAKswB,OAAOhT,MAAMpd,IAAI,qBAAqBF,KAAKujB,sBAAsB4nB,iBAEhEV,EAAYzqC,KAAK0gB,QAAQuqB,KAE9BjrC,KAAKygB,OAASgqB,EACdzqC,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,gBAErC/xB,KAAKswB,OAAOhT,MAAMpd,IAAI,uCAAuC+qC,EAAiB,KAE/EjrC,KAAK2U,sB,mCAKA,YAAAy/B,gBAAR,SAAwBrW,GACvB,OAAO,EAAAsW,WAAWC,sBAAsBvW,IAE1C,EAnFA,CAAiC,EAAA5lB,YAApB,EAAAi1B,e,qFCGRvH,EAjBL,E,KAAA,wBAiBA,SAAKA,GACJ,kDACA,4CACA,kDAHD,CAAKA,MAAkB,KAoBvB,+BAgEA,OA/DQ,EAAAriC,KAAP,SAAYL,EAAkBD,GAC7B,OAAOC,EAAMK,KAAKN,EAAS7G,OAGrB,EAAAyG,MAAP,SAAayxC,GAAb,WACC,OAAI,UAAeA,GACXA,EAAalqC,KAAI,SAACnH,GACxB,OAAO,EAAKsxC,aAAatxC,MAGnBlD,KAAKw0C,aAAaD,IAIpB,EAAAC,aAAP,SAAoBD,GACnB,IAAMrxC,EAAWqxC,EAAazxC,QAI9B,OAFCI,EAA+BwC,UAAa6uC,EAAmC7uC,UAEzExC,GAGD,EAAAuxC,uBAAP,SAA8Bl3C,EAAkB2F,GAC/C,IAAMwxC,EAAuBxxC,EAC7B,GAAIwxC,EAAqB3N,iBACxB,IAAiB,UAAAtsC,OAAO6R,KAAKooC,EAAqB3N,kBAAjC,eAAoD,CAAhE,IACE4N,EADM,KAGN7N,EAAkB4N,EAAqB3N,iBAAiB4N,GAC1D7N,IACFvpC,EAAqCo3C,GAAY7N,EAClDA,EAAgBnU,aAAc,KAQ3B,EAAAiiB,uBAAP,SAA8BC,EAAeC,EAAsBC,GAClE,IAAM7xC,EAAW2xC,EACjB,GAAI3xC,EAAS6jC,iBACZ,IAAiB,UAAAtsC,OAAO6R,KAAKpJ,EAAS6jC,kBAArB,eAAwC,CAApD,IACE4N,EADM,KAEN7N,EAAkB5jC,EAAS6jC,iBAAiB4N,GAC9C7N,IACHA,EAAgBkO,SAASF,GAAch4C,MAAQi4C,KAK5C,EAAAE,8BAAP,SAAqCJ,EAAeC,EAAsBC,GACzE,IAAM7xC,EAAW2xC,EACjB,GAAI3xC,EAAS6jC,iBACZ,IAAiB,UAAAtsC,OAAO6R,KAAKpJ,EAAS6jC,kBAArB,eAAwC,CAApD,IACE4N,EADM,KAEN7N,EAAkB5jC,EAAS6jC,iBAAiB4N,GAC9C7N,IACHA,EAAgBkO,SAASF,GAAgBhO,EAAgBkO,SAASF,IAAiBC,KAKxF,EAhEA,GAAa,EAAAxxC,gB,iGCpCb,E,KAAA,wBACA,QACA,QAIA,aAKC,WAAsBC,GAAA,KAAAA,OACrBxD,KAAKk1C,YAAc,IAAI,EAAA9+B,cAAc5S,EAAKL,MAAO,wBAiEnD,OA9DC,sBAAI,yBAAU,C,IAAd,WACC,OAAOnD,KAAKk1C,a,gCAGN,EAAAC,UAAP,SAAiB3xC,GAChB,IAAI4xC,EAAO5xC,EAAK1F,KACVu3C,EAAYD,EAAKA,EAAK56C,OAAS,GAIrC,OAHK,UAAakN,SAAS2tC,MAC1BD,GAAQ,KAECA,EAAI,KAGf,YAAAE,uBAAA,SAAuB1mC,GACtB,IAAMvO,EAASL,KAAKwD,KAAKnD,OACrBA,GAAUA,EAAO+Y,oBAAsB/Y,EAAOwb,oBACjDxb,EAAOwb,oBAAoB05B,eAAev1C,KAAKwD,KAAMoL,GAErDxL,QAAQmT,KAAK,mDAGf,YAAAhC,SAAA,SAAS3F,GACJA,GAAY5O,KAAKwD,KAAKnH,MACzB2D,KAAKs1C,uBAAuB1mC,IAG9B,YAAA4mC,wBAAA,SAAwB5mC,G,MACvB5O,KAAKwD,KAAK8W,eAAe1L,GACzB5O,KAAKy1C,gBACLz1C,KAAK01C,qBACD11C,KAAKwD,KAAK4V,qBACgB,QAA7B,EAAApZ,KAAKwD,KAAKqY,2BAAmB,SAAEE,WAAWna,SAAQ,SAAC+zC,GAClDA,EAAWt7B,gBAAgBq7B,yBAG7B11C,KAAKk1C,YAAYxgC,uBACjB1U,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUuqC,eAG1B,YAAAC,uBAAA,SAAuBC,GACtB91C,KAAK+1C,mBAAqB/1C,KAAK+1C,oBAAsB,GACrD/1C,KAAK+1C,mBAAmBj7C,KAAKg7C,IAE9B,YAAAh4B,4BAAA,SAA4Bg4B,GAC3B91C,KAAKg2C,wBAA0Bh2C,KAAKg2C,yBAA2B,GAC/Dh2C,KAAKg2C,wBAAwBl7C,KAAKg7C,IAGnC,YAAAL,cAAA,WACC,GAAIz1C,KAAK+1C,mBACR,IAAiB,UAAA/1C,KAAK+1C,mBAAL,eAAyB,EACzCD,EADY,UAKf,YAAAJ,mBAAA,WACC,GAAI11C,KAAKg2C,wBACR,IAAiB,UAAAh2C,KAAKg2C,wBAAL,eAA8B,EAC9CF,EADY,UAKhB,EAvEA,GAAa,EAAA17B,kB,8ECLb,IAMMvb,EANN,MAMkByY,WAAWzY,UAC7B,aAKC,aAJA,KAAAyZ,YAA6B,GACrB,KAAA29B,eAA2B,GAC3B,KAAAC,8BAAoD,GA2B7D,OAxBC,YAAAvvB,SAAA,SAAStqB,EAAcmH,GAClBnH,GAAQmH,EAAKnH,MAChB2D,KAAKsY,YAAYxd,KAAK0I,GAGvBxD,KAAKi2C,eAAen7C,KAAK0I,EAAKykB,eAC9BjoB,KAAKk2C,8BAA8B1yC,EAAKykB,eAAiB5rB,GAG1D,YAAA85C,wBAAA,SAAwB3yC,GACMxD,KAAKsY,YAAYjO,KAAI,SAAC/M,GAAM,OAAAA,EAAE2qB,iBAElCgR,SAASz1B,EAAKykB,iBACtCjoB,KAAKk2C,8BAA8B1yC,EAAKykB,eAAiBzkB,EAAKnH,OAIhE,YAAA+5C,QAAA,sBACC,OAAOp2C,KAAKi2C,eACV5rC,KAAI,SAAC4d,GACL,OAAO,EAAKiuB,8BAA8BjuB,MAE1Cpe,KAAKhL,IAET,EA9BA,GAAa,EAAAkZ,kB,8ECTb,IAAMs+B,EAAiB,CAAC,WAAY,YAmBpC,iBACC,cAwBD,OAtBQ,EAAAC,QAAP,SAAeC,GAfhB,IAAkCC,EAAiBC,EAAjBD,EAgBPD,EAhBwBE,EAgBnBz2C,KAf/BvF,OAAO6R,KAAKmqC,GAAW70C,SAAQ,SAACxE,GAC1Bi5C,EAAepd,SAAS77B,KAC5Bo5C,EAAW97C,UAAU0C,GAAOq5C,EAAUr5C,OAIpCq5C,EAAUC,UACbD,EAAUC,SAASv7C,MAAMq7C,IAWnB,EAAAt+B,KAAP,SAAY3a,EAAa6R,GAExB,IADA,IAAIunC,EAAgBp5C,EACbo5C,GAAe,CACrB,GAAIA,EAAcvnC,aAAeA,EAChC,OAAO,EAEPunC,EAAgBA,EAAcC,UAIhC,OAAO,GAER,YAAA1+B,KAAA,SAAK9I,GACJ,OAAO6I,EAAWC,KAAKlY,KAAMoP,IAK/B,EAzBA,GAAa,EAAA6I,c,8ECZA,EAAA4+B,gBAAkB,IAE/B,iBAIC,WAAmBxgC,GAAA,KAAAA,QA0KpB,OAxKW,YAAAygC,UAAV,SAAoBh1C,GACnB9B,KAAKmrC,cAAgBnrC,KAAKmrC,eAAiBrpC,GAI5C,YAAAi1C,cAAA,SAAcvzC,GACb,IAAMwzC,EAAc,YAAYxzC,EAAK1F,KAErC,GADgBkC,KAAag3C,GAE5B,OAAQh3C,KAAag3C,GAAaxzC,GAElCxD,KAAK82C,UAAU,iCAAiCtzC,EAAK1F,OAiC7C,YAAAm5C,0BAAV,SAAoCzzC,GACnC,OAAUxD,KAAK+2C,cAAcvzC,EAAK0zC,MAAK,IAAI1zC,EAAK2zC,SAAQ,IAAIn3C,KAAK+2C,cAAcvzC,EAAK4zC,QAE3E,YAAAC,2BAAV,SAAqC7zC,GAEpC,OAAUxD,KAAK+2C,cAAcvzC,EAAK0zC,MAAK,IAAI1zC,EAAK2zC,SAAQ,IAAIn3C,KAAK+2C,cAAcvzC,EAAK4zC,QAE3E,YAAAE,0BAAV,SAAoC9zC,GACnC,OAAUxD,KAAK+2C,cAAcvzC,EAAKjG,QAAO,IAAIyC,KAAK+2C,cAAcvzC,EAAKhG,WAE5D,YAAA+5C,+BAAV,SAAyC/zC,GACxC,MAAO,IAAIxD,KAAK+2C,cAAcvzC,EAAK+D,MAAK,QAAQvH,KAAK+2C,cAAcvzC,EAAKg0C,YAAW,QAAQx3C,KAAK+2C,cAC/FvzC,EAAKi0C,WACL,KAKQ,YAAAC,kBAAV,SAA4Bl0C,GAC3B,IAAMiQ,EAAOjQ,EAAKm0C,KAClBv0C,QAAQC,IAAIoQ,GAEZ,IADA,IAAImkC,EAAiB,GACZt9C,EAAI,EAAGA,EAAImZ,EAAKjZ,OAAQF,IAAK,CACrC,IAAMu9C,EAAWpkC,EAAKnZ,GACD,cAAjBu9C,EAAS/5C,KACP+5C,EAA6Bx7C,KAAK,IAAM,EAAAw6C,gBAC5Ce,EAAe98C,KAAK,MAAQkF,KAAK+2C,cAAcc,GAAY,MAE3DD,EAAe98C,KAAK,IAAK+8C,EAA6Bx7C,KAAI,KAG3Du7C,EAAe98C,KAAK,MAAQkF,KAAK+2C,cAAcc,GAAY,MAG7D,OAAOD,EAAe/tC,KAAK,QAmBlB,YAAAiuC,iBAAV,SAA2Bt0C,GAC1B,MAAO,GAAGA,EAAKu0C,KAsEjB,EA9KA,GAAsB,EAAAC,iB,yFCPtB,SAGA,SAEA,OAqBMlX,EAAe,IApBrB,uE,OACC,EAAAmX,UAAY,EAAA/4C,YAAYd,QAAQ,GAChC,EAAA85C,aAAe,EAAAh5C,YAAYd,QAAQ,GACnC,EAAA+5C,WAAa,EAAAj5C,YAAYd,QAAQ,GACjC,EAAAg6C,SAAW,EAAAl5C,YAAYd,QAAQ,GAC/B,EAAAi6C,QAAU,EAAAn5C,YAAYZ,MAAM,GAAK,CAChC89B,WAAY,CAACgc,UAAU,KAExB,EAAAE,qBAAuB,EAAAp5C,YAAYd,QAAQ,GAC3C,EAAAm6C,aAAe,EAAAr5C,YAAYZ,MAAM,IACjC,EAAAk6C,aAAe,EAAAt5C,YAAYZ,MAAM,EAAG,CACnC6kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,EAAAqV,aAAe,EAAAv5C,YAAYZ,MAAM,GAAI,CACpC6kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,EAAAsV,kBAAoB,EAAAx5C,YAAYH,QAAQ,CAAC,EAAG,Q,EAC7C,OAnB2C,iBAmB3C,EAnBA,CAA2C,EAAAI,mBAsB3C,yE,OACC,EAAA0iC,cAAgBf,E,EA0CjB,OA3CkD,iBAE1C,EAAAhjC,KAAP,WACC,MAAO,yBAMF,YAAA66C,yBAAN,SAA+B/7B,EAAgBjS,G,yFAK9C,MAAO,CAAP,EADiB,IAAI,EAAAiuC,cAAch8B,EAAQjS,WAI5C,YAAAkuC,eAAA,SAAeC,GACdA,EAASC,UAAY/4C,KAAKyY,GAAGw/B,UAC7Ba,EAASE,aAAeh5C,KAAKyY,GAAGy/B,aAChCY,EAASG,WAAaj5C,KAAKyY,GAAG0/B,WAE9BW,EAASI,cAAgBl5C,KAAKyY,GAAG2/B,SACjCU,EAASK,cAAgBn5C,KAAKyY,GAAG4/B,QAEjCS,EAASM,YAAcp5C,KAAKyY,GAAG8/B,aAE/BO,EAASO,mBAAqBr5C,KAAKyY,GAAG6/B,qBAEtCQ,EAASQ,YAAct5C,KAAKyY,GAAG+/B,aAC/BM,EAASS,YAAcv5C,KAAKyY,GAAGggC,aAE/BK,EAASU,cAAgBx5C,KAAKyY,GAAGigC,kBAAkB7qC,EACnDirC,EAASW,cAAgBz5C,KAAKyY,GAAGigC,kBAAkB5qC,EAGnDgrC,EAASY,YAAa,GAGvB,YAAAC,qBAAA,SAAqBb,EAA0Bc,GAC9C,IAAMC,EAASD,EAAYn3B,OAAOub,QAAQ,UAC1C8a,EAASe,OAAO50B,KAAK40B,IAEvB,EA3CA,CAAkD,EAAAC,8BAArC,EAAAC,gC,yFC9Bb,4BAEA,SAEA,QAGA,QAKA,SACMC,EAA4C,CACjD,EAAAr0B,oBAAoBrnB,MACpB,EAAAqnB,oBAAoBI,KACpB,EAAAJ,oBAAoBK,KACpB,EAAAL,oBAAoBM,MAGrB,OAYM6a,EAAe,IAVrB,uE,OACC,EAAAzkC,KAAO,EAAA6C,YAAYJ,OAAO,IAC1B,EAAAhB,KAAO,EAAAoB,YAAYV,QAAQ,EAAG,CAC7B+iC,KAAM,CACLC,QAASwY,EAA0C3vC,KAAI,SAAChO,EAAM/B,GAC7D,MAAO,CAAC+B,KAAMA,EAAMS,MAAOxC,S,EAI/B,OATsC,iBAStC,EATA,CAAsC,EAAA6E,mBAYtC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAmZ,oCAAsC,EAAKC,8BAA8B78C,KAAK,G,EAyHvF,OA/HqC,iBAE7B,EAAAS,KAAP,WACC,MAAO,aAIR,YAAA8c,gBAAA,WACC5a,KAAKyiB,OAAO03B,uBAAuB,gCAAiCn6C,KAAKi6C,qCACzEj6C,KAAK6U,oBAAoB,gCAAiC7U,KAAKi6C,sCAEhE,YAAA7+B,cAAA,W,OACuB,QAAtB,EAAIpb,KAAKsD,qBAAa,eAAEu0B,qBAAqBuiB,4BAC5Cp6C,KAAKqb,UAAU,EAAAld,UAAUC,QAAS,wBAAyB,IAG7D,YAAA06B,uBAAA,WACC,MAAO,CAAC,SAGT,sBAAI,yBAAU,C,IAAd,WACC,MA9CiB,U,gCAgDlB,sBAAI,0BAAW,C,IAAf,WACC,MAhDkB,O,gCA6DnB,YAAAL,UAAA,SAAUC,G,MAES,QAAlB,EAAA14B,KAAKsD,qBAAa,SAAEu0B,qBAAqBwO,UAAUqC,yBAClD1oC,KACA04B,IAeF,sBAAI,6BAAc,C,IAAlB,WACC,OAAO,UAAY14B,KAAKyY,GAAGpc,O,gCAE5B,YAAAsrC,QAAA,WACC,OAAO3nC,KAAKQ,GAAGC,QAAQ43B,+BAA+B,GAAGv6B,MAO1D,YAAAu8C,qBAAA,WAEC,OAAOr6C,KAAKQ,GAAGiX,OAAO4vB,YA9FL,WAiGlB,YAAAiT,iCAAA,WACC,OAAOt6C,KAAKQ,GAAGiX,OAAO8iC,6BAlGL,WA0GlB,YAAAC,wBAAA,WAEC,OAAOx6C,KAAKQ,GAAGC,QAAQg6C,uCAAuCz6C,KAAKonC,aASpE,sBAAI,2BAAY,C,IAAhB,WACC,OAAOpnC,KAAKQ,GAAGC,QAAQ+oC,oBAAoBhvC,OAAS,G,gCAErD,sBAAI,2BAAY,C,IAAhB,WACC,QAAIwF,KAAKyY,GAAGiiC,uBAEU,MADF16C,KAAKQ,GAAGiX,OAAO4vB,YA1HlB,W,gCAsIV,YAAA6S,8BAAR,SAAsCS,G,MAChC36C,KAAK46C,UAAUC,oBAAsBF,GAAiB36C,KAAKvC,EAAEK,OACjEkC,KAAK86C,gCACL96C,KAAK2U,qBACL3U,KAAKy6B,2BAEY,QAAlB,EAAAz6B,KAAKsD,qBAAa,SAAEu0B,qBAAqBC,mCAAmC93B,OAErE,YAAA86C,8BAAR,W,MACC96C,KAAKQ,GAAGC,QAAQi3B,mCAAmC,CAClD,IAAI,EAAArC,0BAA0Br1B,KAAKo4B,YAAa4hB,EAA0Ch6C,KAAKyY,GAAG3a,UAE7E,QAAtB,EAAIkC,KAAKsD,qBAAa,eAAEu0B,qBAAqBuiB,4BAC5Cp6C,KAAKQ,GAAGiX,OAAO0hB,kCAAkC,CAChD,IAAI,EAAA9D,0BAA0Br1B,KAAKonC,WAAY4S,EAA0Ch6C,KAAKyY,GAAG3a,UAIrG,EA/HA,CAAqC,EAAA88B,aAAxB,EAAAmgB,mB,yFClCb,SAGA,SAGA,OACA,QAMA,iCAAiEr3B,GAChE,mBAAO,2D,OACN,EAAAooB,QAAU,EAAA5sC,YAAYd,QAAQ,GAC9B,EAAAiM,IAAM,EAAAnL,YAAYT,cAAc,EAAA4iC,YAAYmC,kBAAkBC,GAAI,CAACrH,WAAY,CAAC0P,QAAS,K,EAC1F,OAH2B,iBAG3B,EAHA,CAA2BpoB,IAyB5B,+BAAoCs3B,GACnC,MAAO,CACN1/B,MAAM,EACNxG,SAAU,SAACtR,EAAoB6S,GAC9B2kC,EAAiBv2B,OAAOjhB,MAI3B,+BAAoCy3C,EAA6CC,G,MAChF,MAAO,CACN9e,YAAU,KAAG,EAAC8e,GAAe,EAAC,GAC9B3e,eAAgB,CAACC,QAAS,EAAA58B,YAAYi/B,KACtCvjB,MAAM,EACNxG,SAAU,SAACtR,EAAoB6S,GAC9B4kC,EAAWx2B,OAAOjhB,MAKrB,+B,+CA6EA,OA7E8C,iBAInC,YAAA2oC,UAAV,SAAoBgP,EAA6BC,GAAjD,WACCD,EAActmC,oBAAoB,qBAAqB,WACtD,EAAK4P,YAEN22B,EAAWvmC,oBAAoB,qBAAqB,WACnD,EAAK4P,aAGA,EAAAA,OAAP,SAAcjhB,KAER,YAAA4oC,gBAAN,SACClpC,EACAm4C,EACAF,EACAC,G,qIAKID,EAAcvmC,UACjBumC,EAAcv5B,UAEUu5B,EAAcr+C,MAGlCs+C,EAAWxmC,SACd,GAAMwmC,EAAWx5B,WADd,MADD,M,OAEF,S,wBAGKic,EAAaud,EAAWvd,cAEzBA,EAAWl+B,gBAAkB,EAAAC,YAAYi/B,IAAzC,MASe,GARGhB,EAQgB5mB,qBAVnC,M,OAcF,OAJMlV,EAAY,UACZywB,EAAUzwB,EAAUywB,YAInB8oB,EAA8C,MAA7Bp4C,EAASm4C,GAC5BE,GAAuB,EACvBr4C,EAASm4C,IAC+Bn4C,EAASm4C,GAChC9vC,MAAQinB,EAAQjnB,OACnCgwC,GAAuB,IAGrBD,GAAkBC,KACrBr4C,EAASm4C,GAAmB7oB,EAC5BtvB,EAASyvB,aAAc,GAExB,MAEA3yB,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,6B,cAG5BF,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,oC,oCAG5BF,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,2BAA2Bk7C,EAAW/+C,KAAI,cAAc++C,EAAWt+C,O,wBAG5FoG,EAASm4C,KACZn4C,EAASm4C,GAAmB,KAC5Bn4C,EAASyvB,aAAc,G,YAG1B,EA7EA,CAA8C,EAAAuS,gBAAjC,EAAAoH,4B,8EC1Db,SAAYkP,GACX,8CACA,kBACA,cAHD,CAAY,EAAAA,WAAA,EAAAA,SAAQ,M,yFCApB,QAEA,QAEA,QAGA,yE,OACiB,EAAA/7C,MAA0B,IAAI,EAAAypB,iBAAiB,GAC/C,EAAAzK,aAAuB,EAAAF,mBAAmBgX,MAChD,EAAAkmB,sBAAwB,IAAI,EAAAv2C,MAAM,GAMlC,EAAA2Z,gBAA0B,EAc5B,EAAAlB,2CAA6C,EAAKC,qCAAqCvgB,KAAK,G,EA0ErG,OAjG6F,iBAK5F,sBAAI,oBAAK,C,IAAT,WACC,OAAO2C,KAAK07C,Q,gCAIb,YAAA37C,qBAAA,sBACC,YAAMA,qBAAoB,WAE1BC,KAAK07C,OAAS17C,KAAK27C,eACnB37C,KAAKzC,OAAO+hB,IAAItf,KAAK07C,QACrB17C,KAAKP,MAAMQ,QAAQE,UAAS,WAC3B,EAAKy7C,6BAEN57C,KAAKqkB,iBAAiBxP,oBACrB,uCACA7U,KAAK2d,6CAIO,YAAAC,qCAAd,W,gHAEC,SAAM5d,KAAK0b,gBAAgBsC,4B,cAA3B,S,YAGO,YAAA49B,wBAAR,WACK57C,KAAKP,MAAMQ,QAAQG,QACtBJ,KAAKzC,OAAO+hB,IAAItf,KAAKyvC,OACrBzvC,KAAK4d,wCAEL5d,KAAKzC,OAAOiiB,OAAOxf,KAAKyvC,QAS1B,YAAAoM,0BAAA,WACC,GAA0B,MAAtB77C,KAAK07C,OAAOI,OACf,OAAO97C,KAAK+7C,wBAIJ,YAAAC,oBAAV,aACU,YAAAxN,oBAAV,aAEU,YAAAuN,qBAAV,aAiBA,YAAAzgC,KAAA,WACCtb,KAAKwuC,sBACLxuC,KAAKyuC,uBACLzuC,KAAK0b,gBAAgBC,YAGtB,YAAA8yB,qBAAA,aAaA,sBAAI,mCAAoB,C,IAAxB,WACC,IAAM7pC,EAAQ5E,KAAKyiB,OAAO7d,MAAM,SAC1Bq3C,EAAYj8C,KAAKyiB,OAAO4b,MAAM,aAEpC,OADAr+B,KAAKy7C,sBAAsBx2B,KAAKrgB,GAAOsgB,eAAe+2B,GAC/Cj8C,KAAKy7C,uB,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAOz7C,KAAKP,MAAMQ,QAAQG,Q,gCAE5B,EAjGA,CAA6F,EAAA0f,cAAvE,EAAA4uB,qB,0FCPtB,OACA,OAGA,QAQA,QAEA,SACA,QAEA,SACA,QAEA,4BACA,2BACA,2BACA,2BACA,SAeA,cACC,WAAoBjvB,EAAmBtd,GAAvC,MACC,YAAMA,IAAM,K,OADO,EAAAsd,UAEsB,MAArC,EAAKA,QAAQ3T,SAAmB,aACnC,EAAK2T,QAAQ3T,SAAmB,WAAI,I,EAoNvC,OAxNgC,iBAY/B,YAAAvO,OAAA,WACC,OAAOyC,KAAKyf,SAEb,YAAAle,SAAA,WACC,OAAQvB,KAAKyf,QAAiBle,UAE/B,YAAA26C,cAAA,WACC,IAAMC,EAAMn8C,KAAKuB,WACjB,OAAO,IAAI,EAAAyK,aAAamwC,IAQzB,YAAAxsC,OAAA,WACC,OAAO3P,KAAKk8C,gBAAgBvsC,UAE7B,YAAAysC,kBAAA,SAAkBC,GACjB,GAAIA,EAAO,CACV,IAAMz4C,EAAU,EAAAsG,WAAWtG,QAAQy4C,GACnC,GAAIz4C,EAAS,CACZ,IAAM,EAAS5D,KAAK2P,SACpB,OAAO/L,EAAQyG,KAAI,SAAC/P,GAAM,SAAOA,MAEjC,MAAO,GAGR,OAAO0F,KAAK2P,UAId,YAAAzD,uBAAA,WACClM,KAAKk8C,gBAAgBhwC,0BAGtB,YAAAsC,cAAA,SAAcnS,EAAcS,GAC3B,IAAI9C,EAIHA,EAHI,UAAgB8C,IAAW,UAAeA,IAAW,UAAgBA,GAGlEA,EAFCA,EAAkBwuB,UAI3BtrB,KAAKyf,QAAQ3T,SAAmB,WAAEzP,GAAQrC,GAE3C,YAAAyT,mBAAA,SAAmBpR,EAAcS,GAChCkD,KAAKwO,cAAcnS,EAAMS,IAE1B,YAAAw/C,iBAAA,SAAiBjgD,EAAcS,GAC9BkD,KAAKwO,cAAcnS,EAAMS,IAE1B,YAAAy/C,0BAAA,SAA0BlgD,EAAcmJ,EAAckI,GAChC,MAAjBA,IACHA,EAAgB,EAAAlB,cAAckB,cAAclI,IAE7CxF,KAAKk8C,gBAAgBzuC,mBAAmBpR,EAAMmJ,EAAMkI,IAGrD,YAAA8uC,gBAAA,WAEC,OAAO/hD,OAAO6R,KAAKtM,KAAKyf,QAAQ3T,SAAmB,aAEpD,YAAA3B,aAAA,WACC,OAAOnK,KAAKw8C,mBAGb,YAAA7vC,WAAA,SAAWtQ,GACV,OAAO2D,KAAKw8C,kBAAkBvjB,SAAS58B,IAGxC,YAAAqS,iBAAA,SAAiBC,EAAkBC,GAClC5O,KAAKwO,cAAcI,EAAU5O,KAAK4Q,aAAajC,IAC/C3O,KAAK+O,iBAAiBJ,IAGvB,YAAAI,iBAAA,SAAiB1S,UACT2D,KAAKyf,QAAQ3T,SAAmB,WAAEzP,IAG1C,YAAAuU,aAAA,SAAavU,GACZ,GA3GY,UA2GRA,EACH,OAAO2D,KAAKmC,MAEZ,IAAI2G,EAAM9I,KAAKyf,QAAQ3T,SAAmB,WAAEzP,GAM5C,OALW,MAAPyM,GA9GW,QA+GVzM,IACHyM,EAAM9I,KAAKyf,QAAQpjB,MAGdyM,GAGT,YAAAzM,KAAA,WACC,OAAO2D,KAAK4Q,aAvHI,SAyHjB,YAAA6rC,WAAA,WACC,OAAO,EAAAj6C,aAAa2D,sCAAsCnG,KAAKyf,QAAQrQ,YAAY/S,OAGpF,YAAAwQ,YAAA,SAAYxQ,GACX,IAAMyM,EAAM9I,KAAK4Q,aAAavU,GAC9B,OAAI,UAAgByM,GACZ,EAAAtG,aAAayD,YAAYnH,OAEzB,EAAA0D,aAAayD,YAAYF,SAIlC,YAAAmH,YAAA,SAAY7Q,GACX,IAAMyM,EAAM9I,KAAK4Q,aAAavU,GAC9B,GAAW,MAAPyM,EACH,OAAO,EAGR,GAAI,UAAgBA,IAAQ,UAAgBA,GAC3C,OAAO,EAEP,OAAQA,EAAIsG,aACX,KAAK,EAAA0hB,QACJ,OAAO,EACR,KAAK,EAAAviB,QACJ,OAAO,EACR,QACC,OAAO,IAKX,YAAAzL,MAAA,WACC,OAAOmV,EAAWnV,MAAM9C,KAAKyf,UAGvB,EAAA3c,MAAP,SAAa45C,GACZ,IAAMC,EAAaD,EAAW55C,QAE1B85C,EAAe,IAAItjB,IACnBujB,EAAc,IAAIvjB,IA0DtB,OAzDArhB,EAAW6kC,iBAAiBJ,EAAYC,GAAY,SAASI,EAAsBC,GAClFJ,EAAa18C,IAAI88C,EAAYD,GAC7BF,EAAY38C,IAAI68C,EAAYC,MAE7BL,EAAWM,UAAS,SAASz5C,GAC5B,IAAM05C,EAAWN,EAAalgD,IAAI8G,GAC5B25C,EAAY35C,EAElB,GAAI25C,EAAU57C,SAAU,CACvB,IAAM67C,EAAoBF,EAAS37C,SACnC47C,EAAU57C,SAAW,EAAAyK,aAAalJ,MAAMs6C,GACxC,IAAMC,EAAqBF,EAAU57C,SACjC87C,EAAmBvxC,WACtBuxC,EAAmBvxC,SAAW,UAAiBsxC,EAAkBtxC,WAGnE,GAAIqxC,EAAUj6C,SAAU,CACvBi6C,EAAUj6C,SAAWg6C,EAASh6C,SAC9B,EAAAK,aAAakxC,uBAAuBjxC,EAAM25C,EAAUj6C,UAIpD,IAAMo6C,EAAsBH,EAAUj6C,SACL,MAA7Bo6C,EAAoB14C,QACvB04C,EAAoB14C,MAAQ,IAAI,EAAAM,MAAM,EAAG,EAAG,IAG1Cw3C,EAAW5wC,WACdtI,EAAKsI,SAAW,UAAiBoxC,EAASpxC,WAG3C,IAAMyxC,EAAqCL,EACvCK,EAAyBC,aAC3Bh6C,EAAgCg6C,WAAaD,EAAyBC,WAAWnzC,KAAI,SAACozC,GACtF,OAAAA,EAAU36C,YAIZ,IAAM46C,EAAel6C,EACrB,GAAKk6C,EAA8CC,cAAe,CACjE,IAAIC,EAAaF,EACbG,EAAaX,EACbY,EAAcD,EAAWE,SAASC,MAEtCJ,EAAWG,SAAWF,EAAWE,SAASj7C,QAC1C86C,EAAWK,WAAWh5B,KAAK44B,EAAWI,YAEtC,IAAMC,EAAYJ,EAAYzzC,KAAI,SAAS8zC,GAC1C,OAAOtB,EAAYngD,IAAIyhD,MAGxBP,EAAWG,SAASC,MAAQE,EAE5BN,EAAWvgD,KAAKugD,EAAWG,SAAUH,EAAWK,gBAI3CtB,GAGD,EAAAG,iBAAP,SAAwB7xC,EAAaC,EAAa4J,GACjDA,EAAS7J,EAAGC,GACZ,IAAK,IAAI5Q,EAAI,EAAGA,EAAI2Q,EAAE8Q,SAASvhB,OAAQF,IACtC0F,KAAK88C,iBAAiB7xC,EAAE8Q,SAASzhB,GAAI4Q,EAAE6Q,SAASzhB,GAAIwa,IAGvD,EAxNA,CAAgC,EAAAspC,YAAnB,EAAAnmC,c,6BCvCb,sHAcIhG,EAAsB,CAEzBosC,gBAAiB,SAAW98C,GAE3B,IAAIY,EAAQZ,EAASY,MACjByK,EAAarL,EAASqL,WAK1B,GAAe,OAAVzK,QACqBkH,IAAxBuD,EAAW6C,eACWpG,IAAtBuD,EAAW0xC,aACOj1C,IAAlBuD,EAAWqhB,GAHb,CAUA,IAAIrqB,EAAUzB,EAAMG,MAChBuwB,EAAYjmB,EAAW6C,SAASnN,MAChCi8C,EAAU3xC,EAAW0xC,OAAOh8C,MAC5Bk8C,EAAM5xC,EAAWqhB,GAAG3rB,MAEpBm8C,EAAY5rB,EAAUr4B,OAAS,OAEP6O,IAAvBuD,EAAW8xC,SAEfn9C,EAASgM,aAAc,UAAW,IAAI,kBAAiB,IAAIwlB,aAAc,EAAI0rB,GAAa,IAQ3F,IAJA,IAAIE,EAAW/xC,EAAW8xC,QAAQp8C,MAE9Bs8C,EAAO,GAAIC,EAAO,GAEZvkD,EAAI,EAAGA,EAAImkD,EAAWnkD,IAE/BskD,EAAMtkD,GAAM,IAAI,UAChBukD,EAAMvkD,GAAM,IAAI,UAIjB,IAAIwkD,EAAK,IAAI,UACZC,EAAK,IAAI,UACTC,EAAK,IAAI,UAETC,EAAM,IAAI,UACVC,EAAM,IAAI,UACVC,EAAM,IAAI,UAEVC,EAAO,IAAI,UACXC,EAAO,IAAI,UAqCRC,EAAS/9C,EAAS+9C,OAEC,IAAlBA,EAAO9kD,SAEX8kD,EAAS,CAAE,CACVC,MAAO,EACP7vC,MAAO9L,EAAQpJ,UAKPF,EAAI,EAAd,IAAM,IAAWklD,EAAKF,EAAO9kD,OAAQF,EAAIklD,IAAOllD,EAO/C,IALA,IAKUkB,EAHN+jD,GAFAlD,EAAQiD,EAAQhlD,IAEFilD,MAGGE,EAAKF,EAFdlD,EAAM3sC,MAEuBlU,EAAIikD,EAAIjkD,GAAK,EAErDkkD,EACC97C,EAASpI,EAAI,GACboI,EAASpI,EAAI,GACboI,EAASpI,EAAI,IAOhB,IAEI4S,EAAGrR,EAAGwK,EAFNo4C,EAAM,IAAI,UAAWC,EAAO,IAAI,UAChCtiD,EAAI,IAAI,UAAWuiD,EAAK,IAAI,UA4BhC,IAAUvlD,EAAI,EAAGklD,EAAKF,EAAO9kD,OAAQF,EAAIklD,IAAOllD,EAE/C,KAAI+hD,EAEAkD,EAGJ,IAAU/jD,EAHN+jD,GAFAlD,EAAQiD,EAAQhlD,IAEFilD,MAGGE,EAAKF,EAFdlD,EAAM3sC,MAEuBlU,EAAIikD,EAAIjkD,GAAK,EAErDskD,EAAcl8C,EAASpI,EAAI,IAC3BskD,EAAcl8C,EAASpI,EAAI,IAC3BskD,EAAcl8C,EAASpI,EAAI,UAjJ5B4H,QAAQmT,KAAM,yHAwCf,SAASmpC,EAAgBz0C,EAAGC,EAAG/O,GAE9B2iD,EAAGiB,UAAWltB,EAAe,EAAJ5nB,GACzB8zC,EAAGgB,UAAWltB,EAAe,EAAJ3nB,GACzB8zC,EAAGe,UAAWltB,EAAe,EAAJ12B,GAEzB8iD,EAAIc,UAAWvB,EAAS,EAAJvzC,GACpBi0C,EAAIa,UAAWvB,EAAS,EAAJtzC,GACpBi0C,EAAIY,UAAWvB,EAAS,EAAJriD,GAEpB4iD,EAAGtvB,IAAKqvB,GACRE,EAAGvvB,IAAKqvB,GAERI,EAAIzvB,IAAKwvB,GACTE,EAAI1vB,IAAKwvB,GAET,IAAItiD,EAAI,GAAQuiD,EAAIrxC,EAAIsxC,EAAIrxC,EAAIqxC,EAAItxC,EAAIqxC,EAAIpxC,GAIrCkyC,SAAUrjD,KAEjByiD,EAAKn6B,KAAM85B,GAAK75B,eAAgBi6B,EAAIrxC,GAAImyC,gBAAiBjB,GAAME,EAAIpxC,GAAIoX,eAAgBvoB,GACvF0iD,EAAKp6B,KAAM+5B,GAAK95B,eAAgBg6B,EAAIrxC,GAAIoyC,gBAAiBlB,GAAMI,EAAItxC,GAAIqX,eAAgBvoB,GAEvFiiD,EAAM3zC,GAAIqU,IAAK8/B,GACfR,EAAM1zC,GAAIoU,IAAK8/B,GACfR,EAAMziD,GAAImjB,IAAK8/B,GAEfP,EAAM5zC,GAAIqU,IAAK+/B,GACfR,EAAM3zC,GAAIoU,IAAK+/B,GACfR,EAAM1iD,GAAImjB,IAAK+/B,IAsChB,SAASS,EAAc/hB,GAEtBzgC,EAAEyiD,UAAWxB,EAAa,EAAJxgB,GACtB8hB,EAAG56B,KAAM3nB,GAETP,EAAI6hD,EAAM7gB,GAIV4hB,EAAI16B,KAAMloB,GACV4iD,EAAIlwB,IAAKnyB,EAAE4nB,eAAgB5nB,EAAE4iD,IAAKnjD,KAAQkvB,YAI1C2zB,EAAKO,aAAcN,EAAI9iD,GACvBwK,EAAOq4C,EAAKM,IAAKrB,EAAM9gB,IACvB3vB,EAAM7G,EAAO,GAAU,EAAM,EAE7Bo3C,EAAc,EAAJ5gB,GAAU4hB,EAAI9xC,EACxB8wC,EAAc,EAAJ5gB,EAAQ,GAAM4hB,EAAI7xC,EAC5B6wC,EAAc,EAAJ5gB,EAAQ,GAAM4hB,EAAI3xC,EAC5B2wC,EAAc,EAAJ5gB,EAAQ,GAAM3vB,IA4B1B8D,sBAAuB,SAAWvQ,EAAYy+C,GAgB7C,IAdA,IAAIC,EAAsC,OAA1B1+C,EAAY,GAAIQ,MAE5Bm+C,EAAiB,IAAIC,IAAK9lD,OAAO6R,KAAM3K,EAAY,GAAIiL,aACvD4zC,EAAsB,IAAID,IAAK9lD,OAAO6R,KAAM3K,EAAY,GAAI8+C,kBAE5D7zC,EAAa,GACb6zC,EAAkB,GAElBC,EAAuB/+C,EAAY,GAAI++C,qBAEvCC,EAAiB,IAAI,iBAErBC,EAAS,EAEHtmD,EAAI,EAAGA,EAAIqH,EAAWnH,SAAWF,EAAI,CAE9C,IAAIiH,EAAWI,EAAYrH,GAI3B,GAAK+lD,KAAmC,OAAnB9+C,EAASY,OAAmB,OAAO,KAIxD,IAAM,IAAI9F,KAAQkF,EAASqL,WAAa,CAEvC,IAAO0zC,EAAe1d,IAAKvmC,GAAS,OAAO,UAEfgN,IAAvBuD,EAAYvQ,KAAuBuQ,EAAYvQ,GAAS,IAE7DuQ,EAAYvQ,GAAOvB,KAAMyG,EAASqL,WAAYvQ,IAM/C,GAAKqkD,IAAyBn/C,EAASm/C,qBAAuB,OAAO,KAErE,IAAM,IAAIrkD,KAAQkF,EAASk/C,gBAAkB,CAE5C,IAAOD,EAAoB5d,IAAKvmC,GAAS,OAAO,UAEfgN,IAA5Bo3C,EAAiBpkD,KAAuBokD,EAAiBpkD,GAAS,IAEvEokD,EAAiBpkD,GAAOvB,KAAMyG,EAASk/C,gBAAiBpkD,IASzD,GAHAskD,EAAe70C,SAASsG,eAAiBuuC,EAAe70C,SAASsG,gBAAkB,GACnFuuC,EAAe70C,SAASsG,eAAetX,KAAMyG,EAASuK,UAEjDs0C,EAAY,CAEhB,IAAI1wC,EAEJ,GAAK2wC,EAEJ3wC,EAAQnO,EAASY,MAAMuN,UAEjB,SAAsCrG,IAAjC9H,EAASqL,WAAW6C,SAM/B,OAAO,KAJPC,EAAQnO,EAASqL,WAAW6C,SAASC,MAQtCixC,EAAeE,SAAUD,EAAQlxC,EAAOpV,GAExCsmD,GAAUlxC,GAQZ,GAAK2wC,EAAY,CAEhB,IAAIS,EAAc,EACdC,EAAc,GAElB,IAAUzmD,EAAI,EAAGA,EAAIqH,EAAWnH,SAAWF,EAAI,CAI9C,IAFA,IAAI6H,EAAQR,EAAYrH,GAAI6H,MAElB3G,EAAI,EAAGA,EAAI2G,EAAMuN,QAAUlU,EAEpCulD,EAAYjmD,KAAMqH,EAAM6+C,KAAMxlD,GAAMslD,GAIrCA,GAAen/C,EAAYrH,GAAIsS,WAAW6C,SAASC,MAIpDixC,EAAep+C,SAAUw+C,GAM1B,IAAM,IAAI1kD,KAAQuQ,EAAa,CAE9B,IAAIq0C,EAAkBjhD,KAAKkhD,sBAAuBt0C,EAAYvQ,IAE9D,IAAO4kD,EAAkB,OAAO,KAEhCN,EAAepzC,aAAclR,EAAM4kD,GAMpC,IAAM,IAAI5kD,KAAQokD,EAAkB,CAEnC,IAAIU,EAAkBV,EAAiBpkD,GAAQ,GAAI7B,OAEnD,GAAyB,IAApB2mD,EAAwB,MAE7BR,EAAeF,gBAAkBE,EAAeF,iBAAmB,GACnEE,EAAeF,gBAAiBpkD,GAAS,GAEzC,IAAU/B,EAAI,EAAGA,EAAI6mD,IAAoB7mD,EAAI,CAE5C,IAAI8mD,EAAyB,GAE7B,IAAU5lD,EAAI,EAAGA,EAAIilD,EAAiBpkD,GAAO7B,SAAWgB,EAEvD4lD,EAAuBtmD,KAAM2lD,EAAiBpkD,GAAQb,GAAKlB,IAI5D,IAAI+mD,EAAuBrhD,KAAKkhD,sBAAuBE,GAEvD,IAAOC,EAAuB,OAAO,KAErCV,EAAeF,gBAAiBpkD,GAAOvB,KAAMumD,IAM/C,OAAOV,GAQRO,sBAAuB,SAAWt0C,GAOjC,IALA,IAAI00C,EACAr0C,EACAs0C,EACAC,EAAc,EAERlnD,EAAI,EAAGA,EAAIsS,EAAWpS,SAAWF,EAAI,CAE9C,IAAI6U,EAAYvC,EAAYtS,GAE5B,GAAK6U,EAAUsyC,6BAA+B,OAAO,KAGrD,QADoBp4C,IAAfi4C,IAA2BA,EAAanyC,EAAU7M,MAAM8M,aACxDkyC,IAAenyC,EAAU7M,MAAM8M,YAAc,OAAO,KAGzD,QADkB/F,IAAb4D,IAAyBA,EAAWkC,EAAUlC,UAC9CA,IAAakC,EAAUlC,SAAW,OAAO,KAG9C,QADoB5D,IAAfk4C,IAA2BA,EAAapyC,EAAUoyC,YAClDA,IAAepyC,EAAUoyC,WAAa,OAAO,KAElDC,GAAeryC,EAAU7M,MAAM9H,OAIhC,IAAI8H,EAAQ,IAAIg/C,EAAYE,GACxBZ,EAAS,EAEb,IAAUtmD,EAAI,EAAGA,EAAIsS,EAAWpS,SAAWF,EAE1CgI,EAAMpC,IAAK0M,EAAYtS,GAAIgI,MAAOs+C,GAElCA,GAAUh0C,EAAYtS,GAAIgI,MAAM9H,OAIjC,OAAO,IAAI,kBAAiB8H,EAAO2K,EAAUs0C,IAQ9CG,qBAAsB,SAAW90C,GAShC,IALA,IAAI00C,EACAE,EAAc,EACdnvB,EAAS,EAGH/3B,EAAI,EAAG2B,EAAI2Q,EAAWpS,OAAQF,EAAI2B,IAAM3B,EAAI,CAErD,IAAI6U,EAAYvC,EAAYtS,GAG5B,QADoB+O,IAAfi4C,IAA2BA,EAAanyC,EAAU7M,MAAM8M,aACxDkyC,IAAenyC,EAAU7M,MAAM8M,YAGnC,OADAhM,QAAQmT,KAAM,6DACP,KAIRirC,GAAeryC,EAAU7M,MAAM9H,OAC/B63B,GAAUljB,EAAUlC,SAKrB,IAAI00C,EAAoB,IAAI,IAAmB,IAAIL,EAAYE,GAAenvB,GAC1EuuB,EAAS,EACTgB,EAAM,GACNC,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QACpCC,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QAE9BtmD,EAAI,EAAd,IAAiBS,EAAI2Q,EAAWpS,OAAQgB,EAAIS,EAAGT,IAAO,CAErD,IACIyR,GADAkC,EAAYvC,EAAYpR,IACHyR,SACrByC,EAAQP,EAAUO,MAClBqyC,EAAM,IAAI,6BAA4BJ,EAAmB10C,EAAU2zC,EAAQzxC,EAAUoyC,YACzFK,EAAI9mD,KAAMinD,GAEVnB,GAAU3zC,EAIV,IAAM,IAAI9Q,EAAI,EAAGA,EAAIuT,EAAOvT,IAE3B,IAAM,IAAI6lD,EAAI,EAAGA,EAAI/0C,EAAU+0C,IAE9BD,EAAKD,EAASE,IAAO7lD,EAAGgT,EAAW0yC,EAASG,IAAO7lD,IAQtD,OAAOylD,GAQRK,kBAAmB,SAAW1gD,GAK7B,IAAI2gD,EAAM,EACV,IAAM,IAAI7lD,KAAQkF,EAASqL,WAAa,CAEvC,IAAIu1C,EAAO5gD,EAASc,aAAchG,GAClC6lD,GAAOC,EAAKzyC,MAAQyyC,EAAKl1C,SAAWk1C,EAAK7/C,MAAM8/C,kBAIhD,IAAIx+C,EAAUrC,EAAS8gD,WAEvB,OADAH,GAAOt+C,EAAUA,EAAQ8L,MAAQ9L,EAAQqJ,SAAWrJ,EAAQtB,MAAM8/C,kBAAoB,GAUvFE,cAAe,SAAW/gD,EAAUghD,EAAY,MAE/CA,EAAYv5C,KAAKC,IAAKs5C,EAAW13C,OAAO23C,SAoBxC,IAhBA,IAAIC,EAAc,GACd7+C,EAAUrC,EAAS8gD,WACnBxvB,EAAYtxB,EAASc,aAAc,YACnCqgD,EAAc9+C,EAAUA,EAAQ8L,MAAQmjB,EAAUnjB,MAGlDizC,EAAY,EAGZC,EAAiBnoD,OAAO6R,KAAM/K,EAASqL,YACvCi2C,EAAa,GACbC,EAAmB,GACnBC,EAAa,GACblB,EAAU,CAAE,OAAQ,OAAQ,OAAQ,QAG9BvnD,EAAI,EAAG2B,EAAI2mD,EAAepoD,OAAQF,EAAI2B,EAAG3B,IAAO,CAIzDuoD,EAFIxmD,EAAOumD,EAAgBtoD,IAEN,IAEjB0oD,EAAYzhD,EAASk/C,gBAAiBpkD,MAGzCymD,EAAkBzmD,GAAS,IAAI83B,MAAO6uB,EAAUxoD,QAASyoD,OAAO54C,IAAK,IAAM,KAO7E,IAAI64C,EAAel6C,KAAKm6C,MAAO,EAAIZ,GAC/Ba,EAAkBp6C,KAAK4mB,IAAK,GAAIszB,GACpC,IAAU5oD,EAAI,EAAGA,EAAIooD,EAAapoD,IAAO,CAExC,IAAI6H,EAAQyB,EAAUA,EAAQo9C,KAAM1mD,GAAMA,EAGtC+oD,EAAO,GACD7nD,EAAI,EAAd,IAAiBS,EAAI2mD,EAAepoD,OAAQgB,EAAIS,EAAGT,IAMlD,IAJA,IAAIa,EAAOumD,EAAgBpnD,GAEvByR,GADAkC,EAAY5N,EAASc,aAAchG,IACd4Q,SAEf+0C,EAAI,EAAGA,EAAI/0C,EAAU+0C,IAG9BqB,GAAQ,MAAUl0C,EAAW0yC,EAASG,IAAO7/C,GAAUihD,MAQzD,GAAKC,KAAQZ,EAEZM,EAAWjoD,KAAM2nD,EAAaY,QAExB,CAGN,IAAU7nD,EAAI,EAAGS,EAAI2mD,EAAepoD,OAAQgB,EAAIS,EAAGT,IAElD,CAAIa,EAAOumD,EAAgBpnD,GAA3B,IACI2T,EAAY5N,EAASc,aAAchG,GACnC2mD,EAAYzhD,EAASk/C,gBAAiBpkD,GAEtCinD,GADAr2C,EAAWkC,EAAUlC,SACV41C,EAAYxmD,IACvBknD,EAAiBT,EAAkBzmD,GAEvC,IAAU2lD,EAAI,EAAGA,EAAI/0C,EAAU+0C,IAAO,CAErC,IAAIwB,EAAa3B,EAASG,GAG1B,GAFAsB,EAASxoD,KAAMqU,EAAWq0C,GAAcrhD,IAEnC6gD,EAEJ,IAAM,IAAI9mD,EAAI,EAAGunD,EAAKT,EAAUxoD,OAAQ0B,EAAIunD,EAAIvnD,IAE/CqnD,EAAgBrnD,GAAIpB,KAAMkoD,EAAW9mD,GAAKsnD,GAAcrhD,KAU5DsgD,EAAaY,GAASV,EACtBI,EAAWjoD,KAAM6nD,GACjBA,KAQF,MAAMtnD,EAASkG,EAASuB,QACxB,IAAUxI,EAAI,EAAG2B,EAAI2mD,EAAepoD,OAAQF,EAAI2B,EAAG3B,IAAO,CAErD+B,EAAOumD,EAAgBtoD,GAA3B,IACIopD,EAAeniD,EAASc,aAAchG,GAEtCsnD,EAAS,IAAID,EAAaphD,MAAM8M,YAAayzC,EAAYxmD,IACzD8S,EAAY,IAAI,kBAAiBw0C,EAAQD,EAAaz2C,SAAUy2C,EAAanC,YAKjF,GAHAlmD,EAAOkS,aAAclR,EAAM8S,GAGtB9S,KAAQymD,EAEZ,IAAUtnD,EAAI,EAAGA,EAAIsnD,EAAkBzmD,GAAO7B,OAAQgB,IAAO,CAE5D,IAAIooD,EAAoBriD,EAASk/C,gBAAiBpkD,GAAQb,GAGtDqoD,GADAF,EAAS,IAAIC,EAAkBthD,MAAM8M,YAAa0zC,EAAkBzmD,GAAQb,IAC3D,IAAI,kBAAiBmoD,EAAQC,EAAkB32C,SAAU22C,EAAkBrC,aAChGlmD,EAAOolD,gBAAiBpkD,GAAQb,GAAMqoD,GAYzC,OAFAxoD,EAAOkH,SAAUwgD,GAEV1nD,GASRyoD,oBAAqB,SAAWviD,EAAUwiD,GAEzC,GAAKA,IAAa,oBAGjB,OADA3gD,QAAQmT,KAAM,2FACPhV,EAIR,GAAKwiD,IAAa,uBAAuBA,IAAa,wBAAwB,CAE7E,IAAI5hD,EAAQZ,EAAS8gD,WAIrB,GAAe,OAAVlgD,EAAiB,CAErB,IAAIyB,EAAU,GAEV6L,EAAWlO,EAASc,aAAc,YAEtC,QAAkBgH,IAAboG,EAcJ,OADArM,QAAQka,MAAO,2GACR/b,EAZP,IAAM,IAAIjH,EAAI,EAAGA,EAAImV,EAASC,MAAOpV,IAEpCsJ,EAAQ9I,KAAMR,GAIfiH,EAASgB,SAAUqB,GACnBzB,EAAQZ,EAAS8gD,WAanB,IAAI2B,EAAoB7hD,EAAMuN,MAAQ,EAClCqzC,EAAa,GAEjB,GAAKgB,IAAa,sBAIjB,IAAUzpD,EAAI,EAAGA,GAAK0pD,EAAmB1pD,IAExCyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM,IAC7B+B,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,IAC7ByoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,EAAI,SAQlC,IAAUA,EAAI,EAAGA,EAAI0pD,EAAmB1pD,IAElCA,EAAI,GAAM,GAEdyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,IAC7ByoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,EAAI,IACjCyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,EAAI,MAKjCyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,EAAI,IACjCyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,EAAI,IACjCyoD,EAAWjoD,KAAMqH,EAAM6+C,KAAM1mD,KAQzByoD,EAAWvoD,OAAS,IAAQwpD,GAElC5gD,QAAQka,MAAO,oGAMhB,IAAI2mC,EAAc1iD,EAASuB,QAI3B,OAHAmhD,EAAY1hD,SAAUwgD,GACtBkB,EAAYC,cAELD,EAKP,OADA7gD,QAAQka,MAAO,sEAAuEymC,GAC/ExiD,K,+ECptBV,YAEA,QACA,QAEA,2BAwHA,OAvHQ,EAAA4iD,gCAAP,SAAuCvgD,GAOtC,IANA,IAKIzB,EALAiiD,EAAgC,GAC9BD,EAAkC,GACpCE,EAAkC,KAI7B/pD,EAAI,EAAGA,EAAIsJ,EAAQpJ,OAAQF,IACnC,GAAIA,EAAI,GAAM,EAAG,CAChB6H,EAAQyB,EAAQtJ,GAChB,IAAMgqD,EAAiB1gD,EAAQtJ,EAAI,GAKX,MAApB+pD,GAA4BC,IAAmBD,GAEf,IAA/BD,EAAoB5pD,QACvB4pD,EAAoBtpD,KAAKwpD,GAG1BF,EAAoBtpD,KAAKqH,GACzBkiD,EAAmBliD,IAGnBgiD,EAAgCrpD,KAAKspD,GAMrCA,EAAsB,CAACE,EAAgBniD,GACvCkiD,EAAmBliD,GAQtB,OAFAgiD,EAAgCrpD,KAAKspD,GAE9BD,GAGD,EAAAI,6BAAP,SACC50C,EACA/L,EACAuG,EACAq6C,GAGA,IAAMC,EAAwB,GAExBC,EAAqD,GAC3Dv6C,EAAavI,SAAQ,SAACoL,GACrB03C,EAA6B13C,GAAe,MAG7CpJ,EAAQhC,SAAQ,SAACO,EAAO7H,GACvB,IAAM2V,EAAQN,EAAOxN,GAGrBgI,EAAavI,SAAQ,SAACoL,GACrB,IAAI4D,EAAeX,EAAMW,aAAa5D,IAGrC4D,EAFmB4zC,EAAqBx3C,GACvB,EACF4D,EAAa0a,UAEb,CAAC1a,IAEJhP,SAAQ,SAACm8B,GACrB2mB,EAA6B13C,GAAalS,KAAKijC,SAI7CzjC,EAAI,IACPmqD,EAAY3pD,KAAKR,EAAI,GACrBmqD,EAAY3pD,KAAKR,OAKnB,IAAMiH,EAAW,IAAI,EAAA8O,eASrB,OAPAlG,EAAavI,SAAQ,SAACoL,GACrB,IAAME,EAAcs3C,EAAqBx3C,GACnCK,EAASq3C,EAA6B13C,GAC5CzL,EAASgM,aAAaP,EAAa,IAAI,EAAAqB,uBAAuBhB,EAAQH,OAGvE3L,EAASgB,SAASkiD,GACXljD,GAGD,EAAAojD,2BAAP,SAAkCpjD,GAAlC,I,EAAA,OACOI,EAA+B,GAC/Bu6C,EAAgB,IAAI,EAAAlwC,aAAazK,GACjC4I,EAAe+xC,EAAc/xC,eAC7BwF,EAASusC,EAAcvsC,SACvB/L,GAA8B,QAAnB,EAAArC,EAAS8gD,kBAAU,eAAE//C,QAAsB,GAEtD6hD,EAAkCnkD,KAAKmkD,gCAAgCvgD,GAG7E,GAFAR,QAAQC,IAAIO,EAASugD,GAEjBA,EAAgC3pD,OAAS,EAAG,CAC/C,IAAM,EAA0B0hD,EAAcpvC,eAE9Cq3C,EAAgCviD,SAAQ,SAACwiD,EAAqB9pD,GAC7DiH,EAAW,EAAKgjD,6BACf50C,EACAy0C,EACAj6C,EACA,GAEDxI,EAAW7G,KAAKyG,MAIlB,OAAOI,GAET,EAxHA,GAAa,EAAAijD,yB,4GCLb,2BACA,SACA,QACA,QAIA,2B,+CA+EA,OA/EgC,iBACxB,EAAA9mD,KAAP,WACC,OAAO,EAAAK,UAAUG,OAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAO0B,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKihB,Y,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOjhB,KAAKlD,O,gCAEN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SAAwBL,EAA2CC,GAClE,OAAOD,GAAQC,GAET,EAAAJ,QAAP,SAAeC,GACd,GAAI,UAAgBA,GACnB,OAAOA,EAEP,GAAI,EAAAzW,WAAW5C,UAAUqZ,GAAU,CAClC,IAAMkkC,EAASC,WAAWnkC,GAC1B,GAAI,UAAgBkkC,GACnB,OAAOA,EAGT,OAAO,MAGT,YAAAnkC,QAAA,SAAQC,GACP,IAAMtlB,EAAS44B,EAAWvT,QAAQC,GAClC,OAAItlB,EACI2E,KAAKhC,QAAQ+mD,gBAAgB1pD,GAE7BA,GAuCV,EA/EA,CAAgC,EAAAgwC,mBAAnB,EAAApX,c,yFCTb,QACA,QAIA,QAGA,QAGA,yE,OACS,EAAA+wB,YAAmC,K,EAuF5C,OAxFuC,iBAG/B,EAAAlnD,KAAP,WACC,OAAO,EAAAK,UAAUM,eAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAOuB,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,MAAO,GAAG1N,KAAKihB,Y,gCAEhB,sBAAI,+BAAgB,C,IAApB,WACC,MAAO,GAAGjhB,KAAKlD,O,gCAET,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SACCL,EACAC,GAEA,OAAOD,GAAQC,GAEhB,sBAAI,yBAAU,C,IAAd,WACC,OAAO9gB,KAAKygB,QAAUzgB,KAAK0N,e,gCAElB,YAAAgU,kBAAV,WACC1hB,KAAKygB,OAASzgB,KAAKihB,WACnBjhB,KAAKwU,YACLxU,KAAKuhB,gBAAgBnF,KAAK,EAAAoF,WAAWuQ,gBAGtB,YAAAlQ,oBAAhB,W,sHACOzK,EAAOpX,KAAKygB,OACdjd,EAAO,KACoB,MAAR4T,GAAyB,KAATA,IAGtC5T,EAAO,EAAA8T,WAAWK,UAAU3X,KAAKwD,KAAM4T,IAQpCpX,KAAKglD,cAAgBxhD,IAClBi5B,EAA0Bz8B,KAAKhC,QAAQy+B,0BAEzCz8B,KAAKglD,aACJvoB,GACHz8B,KAAKoV,mBAAmBpV,KAAKglD,aAK/BhlD,KAAKglD,YAAcxhD,EACfA,IACGyhD,EAAmBjlD,KAAKhC,QAAQknD,uBAChCvlD,EAA+C,QAAnC,EAAc,QAAd,EAAG6D,EAAKnD,cAAM,eAAEwb,2BAAmB,eAAE2gB,QACnDyoB,GAAoBtlD,GAAoC,MAApBslD,EACnCxoB,GACHz8B,KAAKiV,gBAAgBzR,GAKtBxD,KAAKswB,OAAOhT,MAAMpd,IACjB,mBAAmB+kD,EAAgB,6BAA6BtlD,IAQnEK,KAAKhC,QAAQotC,oBAEdprC,KAAK2U,qB,WAGN,YAAAkpB,WAAA,WACC,OAAO79B,KAAKglD,aAEd,EAxFA,CAAuC,EAAA7sC,YAA1B,EAAA+0B,qB,0FCZb,SAEA,SAIA,SAGA,SACA,QAIMiY,EAAsD,CAC3D11C,SAAU,oBAGX,2B,+CA0LA,OA1L4C,iBAoB3C,YAAAs6B,oBAAA,SACCb,EACA9Q,EACAM,G,MAOMmB,EAAmBqP,EAAa1oC,GAAGC,QAAQg6C,uCAAuCriB,GACxF,GAAKyB,EAAL,CAIA,IAAM+O,EAAWM,EAAanR,YAAYK,GACpCuP,EAAU9N,EAAiB/7B,KAC3BqrC,EAAa,IAAI,EAAA3E,oBAAoB0E,EAAcvB,EAASiB,GAGlElQ,EAA8BuR,gBAAgBf,EAAc,CAACC,IAE7D,IAAM9C,EAAsC,QAA7B,EAAG6C,EAAa5lC,qBAAa,eAAEu0B,qBAAqBwO,UACnE,GAAKA,EAAL,CAGA,IAAMoC,EAAgBpC,EAAUoC,cAAc/P,EAA8B6P,qBAC5E,GAAKE,EAAL,CAMA,IAHA,IAAMY,EAAeZ,EAAcY,eAE7BD,EAAeR,EAAQ,MAAMjB,EAAO,IAAIvP,EAAW,IAClC,MAAAiR,EAAA,eAAc,CAAhC,IAAIO,EAAU,KAGlBlR,EAA8BuR,gBAAgBf,EAAc,CAACC,GAAaS,GAC1ElR,EAA8B0P,eAAec,EAAc,CAACE,GAAYQ,GAE9C,GAAvBP,EAAa7uC,QAEhBk+B,EAA8B0P,eAAec,EAAc,CAACE,QAIvD,EAAArB,wBAAP,SAA+Bqd,GAC9B,OAAOD,EAAgCC,IAExC,YAAArd,wBAAA,SAAwBqd,GACvB,OAAOC,EAAuBtd,wBAAwBqd,IAKvD,YAAAtd,eAAA,SACCtkC,EACAmkC,EACA36B,EACA0rB,GAEA,OAAO2sB,EAAuBvd,eAAetkC,EAAMmkC,EAAS36B,EAAa0rB,IAGnE,EAAAoP,eAAP,SACCtkC,EACAmkC,EACA36B,EACA0rB,G,MAEI2sB,EAAuBC,uBAAuBhhD,QAAQ0I,GAAe,GACxE0rB,EAA8BuR,gBAC7BzmC,EACA,CAAC,IAAI,EAAA0gC,sBAAsB1gC,EAAMmkC,EAAS36B,IAC1C,EAAAoc,WAAWxjB,QAcb,IAAM0iC,EAAc5P,EAA8B6P,oBAClD,OAAQD,GACP,KAAK,EAAAlf,WAAWxjB,OACf,OAAOoH,EAER,KAAK,EAAAoc,WAAW2f,SAEf,KAAMvlC,aAAgB,EAAAu3C,iBACrB,OAGD,IAAMnS,EAAW,WAAaplC,EAAKu0B,YAAYv0B,EAAK40B,aAC9CmtB,EAAqB,IAAI,EAAA/gB,oBAAoBhhC,EAAMmkC,EAASiB,GAE5DU,EAAqE,IAAIhQ,IAE/EgQ,EAA2BppC,IAAI,EAAAkpB,WAAW2f,SAAU,IAKpD,IAAMQ,EAAuD,IAAIjQ,IAEjEiQ,EAA0BrpC,IAAI,EAAAkpB,WAAW2f,SAAU,IACnD,EAAAW,SAASC,uBAAuBL,EAA4BhB,EAAaid,GAEzE,IAAMC,EAA2B5c,EAAQ,MAAMjB,EAAO,IAAI36B,EAAW,IAE/Dy7B,EAAkC,QAArB,EAAGjlC,EAAKF,qBAAa,eAAEu0B,qBAAqBwO,UAAUoC,cAAcH,GACvF,GAAIG,EAAe,CAElB,IADA,IACuB,MADFA,EAAcY,eACZ,eAAc,CAAhC,IAAIO,EAAU,KAClB,EAAAF,SAASC,uBAAuBL,EAA4BM,EAAY2b,GACxE,EAAA7b,SAASC,uBAAuBJ,EAA2BK,EAAY4b,GAExElc,EAA2B1nC,SAAQ,SAACooC,EAAa1B,GAChD5P,EAA8BuR,gBAAgBzmC,EAAMwmC,EAAa1B,MAElEiB,EAA0B3nC,SAAQ,SAACknC,EAAYR,GAC9C5P,EAA8B0P,eAAe5kC,EAAMslC,EAAYR,MAIjE,OAAOM,IA4BV,YAAA6c,sBAAA,SACCjiD,EACAmkC,EACA36B,EACA0rB,GAEA,OAAO2sB,EAAuBvd,eAAetkC,EAAMmkC,EAAS36B,EAAa0rB,IAvLnE,EAAA4sB,uBAAyB,CAC/B,WACA,QACA,SACA,KACA,MACA,eACA,eACA,eACA,eACA,YACA,cAGM,EAAAI,QAAU,CAChBz3B,GACC,iOAyKH,EA1LA,CAA4C,EAAA03B,uBAA/B,EAAAN,0B,6HCSb,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,QAEA,aA+GC,aA9GU,KAAAO,eAAiB,IAAI,EAAAx/C,MAmBrB,KAAAy/C,oBAAsB,IAAI,EAAAC,kBAAkB9lD,MAK9C,KAAA+lD,QAAU,IAAI,EAAAC,OAAOhmD,MASb,KAAA0b,gBAAkB,IAAI,EAAA1B,eAU9B,KAAA1F,OAAS,IAAI,EAAA2xC,UAcb,KAAAC,0CAAyE,IAAI,EAAAC,4BAK3E,KAAAC,kBAAoB,IAAI,EAAAC,gBAAgBrmD,MAUxC,KAAAsmD,iBAAmB,IAAI,EAAAC,eAAevmD,MAwC/CA,KAAKsU,OAAOkyC,UAAUxmD,MAEtBA,KAAKytC,iBAAiBgZ,OAmBxB,OApIC,sBAAI,4BAAa,C,IAAjB,WACC,OAAOzmD,KAAK4lD,gB,gCAGb,YAAAc,SAAA,SAASn7C,GACR,OAAQvL,KAAK2mD,MAAQp7C,GAEtB,sBAAI,mBAAI,C,IAAR,WACC,OAAOvL,KAAK2mD,O,gCAGb,YAAApyC,SAAA,SAASlY,GACR,OAAQ2D,KAAK+T,MAAQ1X,GAEtB,sBAAI,mBAAI,C,IAAR,WACC,OAAO2D,KAAK+T,O,gCAIb,sBAAI,iCAAkB,C,IAAtB,WACC,OAAO/T,KAAK6lD,qB,gCAIb,sBAAI,qBAAM,C,IAAV,WACC,OAAO7lD,KAAK+lD,S,gCAQP,YAAAa,yBAAN,W,yFACC,MAAO,CAAP,EAAO5mD,KAAK0b,gBAAgBkrC,mCAI7B,sBAAI,gCAAiB,C,IAArB,WACC,OAAQ5mD,KAAK6mD,mBAAqB7mD,KAAK6mD,oBAAsB,IAAI,EAAAC,iBAAiB9mD,O,gCAInF,sBAAI,oBAAK,C,IAAT,WACC,OAAOA,KAAKsU,Q,gCAIb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAQtU,KAAK+mD,sBAAwB/mD,KAAK+mD,uBAAyB,IAAI,EAAAntC,oBAAoB5Z,O,gCAG5F,sBAAI,iCAAkB,C,IAAtB,WACC,OAAQA,KAAKgnD,oBAAsBhnD,KAAKgnD,qBAAuB,IAAI,EAAAC,kBAAkBjnD,O,gCAItF,sBAAI,uDAAwC,C,IAA5C,WACC,OAAOA,KAAKkmD,2C,gCAIb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOlmD,KAAKomD,mB,gCAIb,sBAAI,0BAAW,C,IAAf,WACC,OAAQpmD,KAAKknD,aAAelnD,KAAKknD,cAAgB,IAAI,EAAAC,iB,gCAItD,sBAAI,8BAAe,C,IAAnB,WACC,OAAOnnD,KAAKsmD,kB,gCAEb,YAAAc,UAAA,SAAUtZ,GACT9tC,KAAKiuC,gBAAgBmZ,UAAUtZ,IAEhC,sBAAI,oBAAK,C,IAAT,WACC,OAAO9tC,KAAKiuC,gBAAgBH,O,gCAE7B,sBAAI,0BAAW,C,IAAf,WACC,OAAO9tC,KAAKiuC,gBAAgBF,a,gCAE7B,YAAAsZ,KAAA,WACCrnD,KAAKiuC,gBAAgBoZ,QAEtB,YAAAC,MAAA,WACCtnD,KAAKiuC,gBAAgBqZ,SAItB,sBAAY,yBAAU,C,IAAtB,WACC,OAAQtnD,KAAK6Z,YAAc7Z,KAAK6Z,aAAe,IAAI,EAAA0tC,oBAAoBvnD,O,gCAExE,YAAAwc,QAAA,WACC,OAAOxc,KAAK0c,WAAWF,WAIxB,sBAAI,kCAAmB,C,IAAvB,WACC,OAAQxc,KAAKwnD,qBAAuBxnD,KAAKwnD,sBAAwB,IAAI,EAAAC,mBAAmBznD,O,gCAIzF,sBAAI,+BAAgB,C,IAApB,WACC,OAAQA,KAAK0nD,kBAAoB1nD,KAAK0nD,mBAAqB,IAAI,EAAAC,iB,gCAWhE,YAAAv8B,aAAA,SAAatW,GACZ9U,KAAK+lD,QAAQnxB,QAEb9f,IAEA9U,KAAK+lD,QAAQjxB,WAId,YAAAtxB,KAAA,SAAK4T,GACJ,OAAOpX,KAAKytC,iBAAiBjqC,KAAK4T,IAEnC,sBAAI,mBAAI,C,IAAR,WACC,OAAOpX,KAAKytC,iBAAiBtyB,M,gCAE/B,EAtIA,GAAa,EAAAysC,a,wFCfb,iBACC,WAAoBpkD,GAAA,KAAAA,OAgGrB,OAzFC,YAAAgZ,QAAA,SAAQC,G,iBAAA,IAAAA,OAAA,GAOP,IAAMziB,EAAO,CACZqC,KAAM2D,KAAKwD,KAAKnH,KAChByB,KAAMkC,KAAKwD,KAAK1F,KAChBmqB,cAAejoB,KAAKwD,KAAKykB,cACzBrT,SAAU5U,KAAKwD,KAAKoR,SACpBizC,aAAc7nD,KAAKwD,KAAKg0B,QAAQhb,UAChC2uB,cAAenrC,KAAKwD,KAAK8sB,OAAOhT,MAAMxb,QACtCia,SAAU/b,KAAK8nD,eACfrwC,OAAQzX,KAAK+nD,YACbC,gCAAiChoD,KAAKioD,2BACtCC,wBAAyBloD,KAAKkoD,0BAC9BC,yBAA0BnoD,KAAKmoD,2BAC/BC,UAAWpoD,KAAKqoD,eAAe5rC,GAE/B6rC,wBAAyBtoD,KAAKwD,KAAKhD,GAAGiX,OAAO6wC,0BAC7CC,oCAAqCvoD,KAAKwD,KAAKhD,GAAGiX,OAAO8wC,sCACzD9oD,MAAO,CAENQ,QAAiC,QAA1B,EAAiB,QAAjB,EAAED,KAAKwD,KAAK/D,aAAK,eAAEQ,eAAO,eAAEG,OACnC2oB,OAA+B,QAAzB,EAAiB,QAAjB,EAAE/oB,KAAKwD,KAAK/D,aAAK,eAAEspB,cAAM,eAAE3oB,QAElCooD,eAAWn/C,GAOZ,OAJIrJ,KAAKwD,KAAK4V,oBAAsBpZ,KAAKwD,KAAKqY,sBAC7C7hB,EAAgB,UAAIgG,KAAKwD,KAAKqY,oBAAoB2sC,UAAUhsC,WAGtDxiB,GAGR,YAAA8tD,aAAA,WACC,OAAO9nD,KAAKwD,KAAKuY,WAAW1R,KAAI,SAAC7G,GAAS,OAAAA,EAAKykB,kBAGhD,YAAA8/B,UAAA,WACC,OAAO/nD,KAAKwD,KAAKhD,GAAGiX,OAAOA,SAASpN,KAAI,SAAC7G,GAAS,OAAS,MAARA,EAAeA,EAAKykB,mBAAgB5e,MAGxF,YAAA4+C,yBAAA,W,MACC,OACqB,QADrB,EAAOjoD,KAAKwD,KAAKhD,GAAG82B,YAClBmxB,2BAAmB,eAClBp+C,KAAI,SAAC6tB,GAAe,OAAe,MAAdA,EAAqBA,EAAWI,kBAAejvB,MAExE,YAAA6+C,wBAAA,WACC,OAAOloD,KAAKwD,KAAKhD,GAAGiX,OAAOmiB,8BAA8BvvB,KAAI,SAAC/P,GAAM,OAAAA,EAAEkiB,cAEvE,YAAA2rC,yBAAA,WACC,OAAOnoD,KAAKwD,KAAKhD,GAAGC,QAAQ43B,+BAA+BhuB,KAAI,SAAC9N,GAAM,OAAAA,EAAEigB,cAGzE,YAAAksC,0BAAA,SAA0BC,EAAuBC,GAAjD,WACC,YADgD,IAAAA,OAAA,GACzCD,EAAYt+C,KAAI,SAACqc,GACvB,OAAO,EAAKljB,KAAKif,OAAO/lB,IAAIgqB,GAAauB,kBAiB3C,YAAAogC,eAAA,SAAeO,GACd,YADc,IAAAA,OAAA,GACP5oD,KAAK0oD,0BAA0B1oD,KAAKwD,KAAKif,OAAOsW,MAAO6vB,IAWhE,EAjGA,GAAa,EAAA9uC,kB,oFC7Bb,aACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAEA,QAGa,EAAA+uC,yBAAsB,MACjC,EAAA1qD,UAAUC,SAAU,EAAA0qD,aACrB,EAAC,EAAA3qD,UAAUD,QAAS,EAAA6qD,YACpB,EAAC,EAAA5qD,UAAUE,OAAQ,EAAA2qD,WACnB,EAAC,EAAA7qD,UAAUG,OAAQ,EAAA21B,WACnB,EAAC,EAAA91B,UAAUI,QAAS,EAAA0qD,YACpB,EAAC,EAAA9qD,UAAUK,SAAU,EAAA0qD,aACrB,EAAC,EAAA/qD,UAAUM,eAAgB,EAAAyuC,kBAC3B,EAAC,EAAA/uC,UAAUO,MAAO,EAAAC,UAClB,EAAC,EAAAR,UAAUU,WAAY,EAAAsqD,eACvB,EAAC,EAAAhrD,UAAUW,QAAS,EAAAsuC,YACpB,EAAC,EAAAjvC,UAAUY,SAAU,EAAAqqD,aACrB,EAAC,EAAAjrD,UAAUa,SAAU,EAAAqqD,aACrB,EAAC,EAAAlrD,UAAUc,SAAU,EAAAqqD,a,6FC7BtB,SAqBA,aAKC,WAAsBjzC,GAAA,KAAAA,QAiFvB,OA/EC,sBAAI,qBAAM,C,IAAV,WACC,OAA2B,MAApBrW,KAAKupD,a,gCAEb,sBAAI,yBAAU,C,IAAd,WACC,OAAOvpD,KAAKupD,a,gCAEb,sBAAI,yBAAU,C,IAAd,WACC,QAAIvpD,KAAKwpD,UACDxpD,KAAKwpD,SAASte,Y,gCAIvB,sBAAI,4BAAa,C,IAAjB,WACC,OAAIlrC,KAAKwpD,SACDxpD,KAAKwpD,SAASre,cAEf,M,gCAER,sBAAI,gCAAiB,C,IAArB,WACC,OAAOnrC,KAAKqW,MAAMrY,QAAQyrD,4B,gCAE3B,YAAA/e,eAAA,SAAeI,EAAgCt2B,QAAA,IAAAA,OAAA,GAC1CxU,KAAKupD,aAAeze,IACvB9qC,KAAKupD,YAAcze,EAEf9qC,KAAKupD,aACRvpD,KAAKwpD,SAAWxpD,KAAKwpD,UAAY,IAAI,EAAAE,kBAAkB1pD,KAAKqW,OAC5DrW,KAAKwpD,SAASG,iBAAiB3pD,KAAKupD,cAEhCvpD,KAAKwpD,UACRxpD,KAAKwpD,SAAS3wB,QAIZrkB,GACHxU,KAAKqW,MAAM7B,cAKd,YAAAo1C,0CAAA,aAEM,YAAA5e,mBAAN,W,yFACC,OAAIhrC,KAAKwpD,UAAYxpD,KAAKI,OAClB,CAAP,EAAOJ,KAAKwpD,SAASK,oB,WAGT,YAAAC,gCAAd,SAA8CC,EAAwBj1C,G,sHACrE9U,KAAKgqD,aAAaD,EAAUj1C,G,iBAE3B,O,sBAAA,GAAM9U,KAAKgrC,sB,cAAX,S,+BAEA5nC,QAAQmT,KAAK,8BACbnT,QAAQmT,KAAK,GACbvW,KAAKqW,MAAM7S,KAAK8sB,OAAOhT,MAAMpd,IAAI,+BAA+B,G,oBAGjEF,KAAKiqD,iB,YAEN,YAAAC,8BAAA,SAA8BH,EAAuBj1C,GACpD,OAAO9U,KAAK8pD,gCAAgCC,EAAUj1C,IAEvD,YAAAq1C,+BAAA,SAA+BJ,EAAwBj1C,GACtD,OAAO9U,KAAK8pD,gCAAgCC,EAAUj1C,IAEvD,sBAAI,uBAAQ,C,IAAZ,WACC,OAAO9U,KAAKoqD,W,gCAEb,sBAAI,8BAAe,C,IAAnB,WACC,OAAOpqD,KAAKqqD,kB,gCAEb,YAAAL,aAAA,SAAaD,EAAwBj1C,GACpC9U,KAAKoqD,UAAYL,EACjB/pD,KAAKqqD,iBAAmBv1C,GAEzB,YAAAm1C,eAAA,WACCjqD,KAAKoqD,eAAY/gD,EACjBrJ,KAAKqqD,sBAAmBhhD,GAE1B,EAtFA,GAAa,EAAAwhC,wB,yFCtBb,2BAEA,4BACA,UAAKyf,WAAW,KAGhB,UAAKC,YAAY,KADA,IAMjB,IAMA,aAIC,cAgHD,OA9GC,YAAAZ,iBAAA,SAAiBa,GAChB,IACCxqD,KAAK64B,QACL74B,KAAKwD,KAAO,UAAKgnD,GAChB,MAAOlgD,GACR,IAAMxI,EAAU,mCAAmC0oD,EAAM,aAAalgD,EAAC,IACvEtK,KAAKmrC,cAAgBrpC,IAGvB,YAAA2oD,kCAAA,SAAkCD,GACjC,IACCxqD,KAAK64B,QAIL,IAFA,IAAM3vB,EAAWmrC,EAAWC,sBAAsBkW,GAC5CE,EAAQ,GACLpwD,EAAI,EAAGA,EAAI4O,EAAS1O,OAAQF,IAAK,CACzC,IAAMqQ,EAAUzB,EAAS5O,GACrBkJ,OAAI,EAEPA,EADGlJ,EAAI,GAAK,EACL,UAAKqQ,GAEL,CACN7M,KAjCe,UAkCfhB,MAAO,IAAI6N,EAAO,IAClBotC,IAAK,IAAIptC,EAAO,KAGlB+/C,EAAM5vD,KAAK0I,GAqBZxD,KAAKwD,KAAiB,CACrB1F,KA1DyB,iBA2DzB6sD,UAAWD,EACXE,OAAQ,CACP9sD,KAhEmB,aAiEnBzB,KAAM,eAGP,MAAOiO,GACR,IAAMxI,EAAU,mCAAmC0oD,EAAM,aAAalgD,EAAC,IACvEtK,KAAKmrC,cAAgBrpC,IAIhB,EAAAwyC,sBAAP,SAA6BvW,GAC5B,OAAS,MAALA,GACC,UAAgBA,GACZA,EAAE50B,MAzEuB,KA8E1B,IAoCD,YAAA0vB,MAAR,WACC74B,KAAKwD,UAAO6F,EACZrJ,KAAKmrC,mBAAgB9hC,GAEvB,EApHA,GAAa,EAAAgrC,c,8ECXb,IAAMwW,EAAS,SAASC,GAAc,OAAO,SAAS/tD,GAAU,OAAOiM,KAAK4mB,IAAI7yB,EAAG+tD,KAC7EC,EAAS,SAASD,GAAc,OAAO,SAAS/tD,GAAU,OAAO,EAAIiM,KAAKgiD,IAAIhiD,KAAK4mB,IAAI7yB,EAAE,EAAG+tD,MAC5FG,EAAU,SAASH,GAAc,OAAO,SAAS/tD,GAAU,OAAOA,EAAE,GAAK8tD,EAAOC,EAAPD,CAAgB,EAAF9tD,GAAK,EAAIguD,EAAOD,EAAPC,CAAgB,EAAFhuD,EAAM,GAAG,EAAE,KAElH,EAAA8yB,OAAS,CACpBq7B,OAAQD,EAAQ,GAEhBJ,OAAQ,SAAS9tD,EAAU+tD,GAAe,OAAOD,EAAOC,EAAPD,CAAc9tD,IAC/DguD,OAAQ,SAAShuD,EAAU+tD,GAAe,OAAOC,EAAOD,EAAPC,CAAchuD,IAC/DkuD,QAAS,SAASluD,EAAU+tD,GAAe,OAAOG,EAAQH,EAARG,CAAeluD,IAEjEouD,QAASN,EAAO,GAChBO,QAASL,EAAO,GAChBM,SAAUJ,EAAQ,GAElBK,QAASL,EAAQ,GACjBM,QAASN,EAAQ,GACjBO,SAAUP,EAAQ,GAElBQ,QAASR,EAAQ,GACjBS,QAAST,EAAQ,GACjBU,SAAUV,EAAQ,GAQlBW,WAAY,SAAS7uD,GAAW,OAAO,EAAIiM,KAAKolB,IAAIplB,KAAKmiB,GAAK,EAAIpuB,EAAIiM,KAAKmiB,GAAK,IAChF0gC,WAAY,SAAS9uD,GAAW,OAAOiM,KAAKolB,IAAIplB,KAAKmiB,GAAK,EAAIpuB,IAC9D+uD,YAAa,SAAS/uD,GAAW,OAAQ,EAAIiM,KAAKolB,IAAIplB,KAAKmiB,GAAKpuB,EAAIiM,KAAKmiB,GAAK,IAAM,GAEpF4gC,eAAgB,SAAUhvD,GAAY,OAAQ,IAAM,IAAMA,GAAKiM,KAAKolB,IAAI,GAAKrxB,GAAK,GAClFivD,eAAgB,SAAUjvD,GAAY,MAAO,IAAMA,IAAOA,EAAKiM,KAAKolB,IAAI,GAAKrxB,IAC7EkvD,gBAAiB,SAAUlvD,GAAY,OAAQA,GAAK,IAAM,GAAK,IAAM,IAAMA,GAAKiM,KAAKolB,IAAI,GAAKrxB,IAAM,IAAM,IAAMA,GAAKiM,KAAKolB,IAAI,GAAKrxB,GAAK,K,8ECrC1I,iBAIC,WAAsByG,GAAA,KAAAA,OAFZ,KAAA0oD,QAAkB,EAClB,KAAAC,OAAoC,KA6B/C,OAzBC,YAAAhsD,SAAA,SAAS21C,GACR91C,KAAKmsD,OAASnsD,KAAKmsD,QAAU,GAC7BnsD,KAAKmsD,OAAOrxD,KAAKg7C,IAER,YAAAsW,UAAV,aACA,YAAAlsD,IAAA,SAAImsD,GACCrsD,KAAKksD,QAAUG,IAClBrsD,KAAKksD,OAASG,EACdrsD,KAAKosD,YACLpsD,KAAKssD,cAGP,sBAAI,qBAAM,C,IAAV,WACC,OAAOtsD,KAAKksD,Q,gCAEb,YAAAK,OAAA,WACCvsD,KAAKE,KAAKF,KAAKksD,SAEhB,YAAAI,UAAA,WACC,GAAItsD,KAAKmsD,OACR,IAAiB,UAAAnsD,KAAKmsD,OAAL,eAAa,EAC7BrW,EADY,UAKhB,EAhCA,GAAa,EAAA0W,Y,6BCJb,mJAwBI5T,EAAgB,SAAWr7C,EAAQkvD,GAkHxB,IAET7L,EAGAh1B,EACA8gC,EAEAC,EACAC,OAzHevjD,IAAfojD,GAA2BrpD,QAAQmT,KAAM,4EACzCk2C,IAAeI,UAAWzpD,QAAQka,MAAO,4HAE9Ctd,KAAKzC,OAASA,EACdyC,KAAKysD,WAAaA,EAGlBzsD,KAAK+c,SAAU,EAGf/c,KAAK65C,OAAS,IAAI,UAGlB75C,KAAKs5C,YAAc,EACnBt5C,KAAKu5C,YAAcuT,IAGnB9sD,KAAK+sD,QAAU,EACf/sD,KAAKgtD,QAAUF,IAIf9sD,KAAKw5C,cAAgB,EACrBx5C,KAAKy5C,cAAgBzwC,KAAKmiB,GAI1BnrB,KAAKitD,iBAAoBH,IACzB9sD,KAAKktD,gBAAkBJ,IAIvB9sD,KAAKk5C,eAAgB,EACrBl5C,KAAKm5C,cAAgB,IAIrBn5C,KAAKi5C,YAAa,EAClBj5C,KAAKmtD,UAAY,EAGjBntD,KAAKg5C,cAAe,EACpBh5C,KAAKo5C,YAAc,EAGnBp5C,KAAK+4C,WAAY,EACjB/4C,KAAKotD,SAAW,EAChBptD,KAAKq5C,oBAAqB,EAC1Br5C,KAAKqtD,YAAc,EAInBrtD,KAAKstD,YAAa,EAClBttD,KAAKutD,gBAAkB,EAGvBvtD,KAAK05C,YAAa,EAGlB15C,KAAKsM,KAAO,CAAEkhD,KAAM,GAAIC,GAAI,GAAIC,MAAO,GAAIC,OAAQ,IAGnD3tD,KAAK4tD,aAAe,CAAEJ,KAAM,QAAMK,OAAQC,OAAQ,QAAMC,MAAOL,MAAO,QAAMM,KAG5EhuD,KAAKiuD,QAAU,CAAEC,IAAK,QAAML,OAAQM,IAAK,QAAMC,WAG/CpuD,KAAKquD,QAAUruD,KAAK65C,OAAO/2C,QAC3B9C,KAAKsuD,UAAYtuD,KAAKzC,OAAOkS,SAAS3M,QACtC9C,KAAKuuD,MAAQvuD,KAAKzC,OAAOixD,KAMzBxuD,KAAKyuD,cAAgB,WAEpB,OAAOC,EAAUC,KAIlB3uD,KAAK4uD,kBAAoB,WAExB,OAAOF,EAAUG,OAIlB7uD,KAAK8uD,UAAY,WAEhBC,EAAMV,QAAQppC,KAAM8pC,EAAMlV,QAC1BkV,EAAMT,UAAUrpC,KAAM8pC,EAAMxxD,OAAOkS,UACnCs/C,EAAMR,MAAQQ,EAAMxxD,OAAOixD,MAI5BxuD,KAAK64B,MAAQ,WAEZk2B,EAAMlV,OAAO50B,KAAM8pC,EAAMV,SACzBU,EAAMxxD,OAAOkS,SAASwV,KAAM8pC,EAAMT,WAClCS,EAAMxxD,OAAOixD,KAAOO,EAAMR,MAE1BQ,EAAMxxD,OAAOyxD,yBACbD,EAAMhqC,cAAekqC,GAErBF,EAAMtqC,SAENzF,EAAQkwC,EAAMC,MAKfnvD,KAAKykB,QAEAm8B,EAAS,IAAI,UAGbh1B,GAAO,IAAI,cAAaM,mBAAoB3uB,EAAO0pB,GAAI,IAAI,UAAS,EAAG,EAAG,IAC1EylC,EAAc9gC,EAAK9oB,QAAQssD,UAE3BzC,EAAe,IAAI,UACnBC,EAAiB,IAAI,aAElB,WAEN,IAAIn9C,EAAWs/C,EAAMxxD,OAAOkS,SAoF5B,OAlFAmxC,EAAO37B,KAAMxV,GAAWggB,IAAKs/B,EAAMlV,QAGnC+G,EAAOyO,gBAAiBzjC,GAGxB8iC,EAAUY,eAAgB1O,GAErBmO,EAAMzB,YAActuC,IAAUkwC,EAAMC,MAExCI,EA8JK,EAAIvmD,KAAKmiB,GAAK,GAAK,GAAK4jC,EAAMxB,iBA1J/BwB,EAAM7V,eAEVwV,EAAUG,OAASW,EAAeX,MAAQE,EAAM5V,cAChDuV,EAAUC,KAAOa,EAAeb,IAAMI,EAAM5V,gBAI5CuV,EAAUG,OAASW,EAAeX,MAClCH,EAAUC,KAAOa,EAAeb,KAKjCD,EAAUG,MAAQ7lD,KAAKC,IAAK8lD,EAAM9B,gBAAiBjkD,KAAK+e,IAAKgnC,EAAM7B,gBAAiBwB,EAAUG,QAG9FH,EAAUC,IAAM3lD,KAAKC,IAAK8lD,EAAMvV,cAAexwC,KAAK+e,IAAKgnC,EAAMtV,cAAeiV,EAAUC,MAExFD,EAAUe,WAGVf,EAAUgB,QAAU9rC,EAGpB8qC,EAAUgB,OAAS1mD,KAAKC,IAAK8lD,EAAMzV,YAAatwC,KAAK+e,IAAKgnC,EAAMxV,YAAamV,EAAUgB,UAI1D,IAAxBX,EAAM7V,cAEV6V,EAAMlV,OAAOoG,gBAAiB0P,EAAWZ,EAAM5V,eAI/C4V,EAAMlV,OAAOv6B,IAAKqwC,GAInB/O,EAAOgP,iBAAkBlB,GAGzB9N,EAAOyO,gBAAiB3C,GAExBj9C,EAASwV,KAAM8pC,EAAMlV,QAASv6B,IAAKshC,GAEnCmO,EAAMxxD,OAAOsyD,OAAQd,EAAMlV,SAEE,IAAxBkV,EAAM7V,eAEVsW,EAAeX,OAAW,EAAIE,EAAM5V,cACpCqW,EAAeb,KAAS,EAAII,EAAM5V,cAElCwW,EAAUzqC,eAAgB,EAAI6pC,EAAM5V,iBAIpCqW,EAAetvD,IAAK,EAAG,EAAG,GAE1ByvD,EAAUzvD,IAAK,EAAG,EAAG,IAItB0jB,EAAQ,KAMHksC,GACJnD,EAAaoD,kBAAmBhB,EAAMxxD,OAAOkS,UAAaugD,GAC1D,GAAM,EAAIpD,EAAe1M,IAAK6O,EAAMxxD,OAAOutB,aAAiBklC,KAE5DjB,EAAMhqC,cAAekqC,GAErBtC,EAAa1nC,KAAM8pC,EAAMxxD,OAAOkS,UAChCm9C,EAAe3nC,KAAM8pC,EAAMxxD,OAAOutB,YAClCglC,GAAc,GAEP,KAUV9vD,KAAKwd,QAAU,WAEduxC,EAAMtC,WAAWwD,oBAAqB,cAAeC,IAAe,GACpEnB,EAAMtC,WAAWwD,oBAAqB,YAAaE,GAAa,GAChEpB,EAAMtC,WAAWwD,oBAAqB,QAASG,GAAc,GAE7DrB,EAAMtC,WAAWwD,oBAAqB,aAAcI,IAAc,GAClEtB,EAAMtC,WAAWwD,oBAAqB,WAAYK,IAAY,GAC9DvB,EAAMtC,WAAWwD,oBAAqB,YAAaM,IAAa,GAEhE1D,SAASoD,oBAAqB,YAAaO,GAAa,GACxD3D,SAASoD,oBAAqB,UAAWQ,GAAW,GAEpD1B,EAAMtC,WAAWwD,oBAAqB,UAAWS,IAAW,IAU7D,IAAI3B,EAAQ/uD,KAERivD,EAAc,CAAEnxD,KAAM,UACtB6yD,EAAa,CAAE7yD,KAAM,SACrB8yD,EAAW,CAAE9yD,KAAM,OAEnBoxD,EAAQ,CACXC,MAAQ,EACRtB,OAAQ,EACRE,MAAO,EACPC,IAAK,EACL6C,aAAc,EACdC,UAAW,EACXC,gBAAiB,EACjBC,mBAAoB,GAGjBhyC,EAAQkwC,EAAMC,KAEda,EAAM,KAGNtB,EAAY,IAAI,IAChBc,EAAiB,IAAI,IAErB5rC,EAAQ,EACR+rC,EAAY,IAAI,UAChBG,GAAc,EAEdmB,EAAc,IAAI,UAClBC,EAAY,IAAI,UAChBC,EAAc,IAAI,UAElBC,EAAW,IAAI,UACfC,EAAS,IAAI,UACbC,EAAW,IAAI,UAEfC,EAAa,IAAI,UACjBC,EAAW,IAAI,UACfC,EAAa,IAAI,UAQrB,SAASC,IAER,OAAO1oD,KAAK4mB,IAAK,IAAMm/B,EAAM5B,WAI9B,SAASoC,EAAYoC,GAEpBnC,EAAeX,OAAS8C,EAIzB,SAASC,EAAUD,GAElBnC,EAAeb,KAAOgD,EAIvB,IAEK5zB,EAFD8zB,GAEC9zB,EAAI,IAAI,UAEL,SAAkBhX,EAAU+qC,GAElC/zB,EAAEg0B,oBAAqBD,EAAc,GACrC/zB,EAAE7Y,gBAAkB6B,GAEpB4oC,EAAUrwC,IAAKye,KAMbi0B,EAAQ,WAEX,IAAIj0B,EAAI,IAAI,UAEZ,OAAO,SAAgBhX,EAAU+qC,IAEE,IAA7B/C,EAAM1V,mBAEVtb,EAAEg0B,oBAAqBD,EAAc,IAIrC/zB,EAAEg0B,oBAAqBD,EAAc,GACrC/zB,EAAEoiB,aAAc4O,EAAMxxD,OAAO0pB,GAAI8W,IAIlCA,EAAE7Y,eAAgB6B,GAElB4oC,EAAUrwC,IAAKye,IAnBL,GA0BRk0B,EAAM,WAET,IAAIrR,EAAS,IAAI,UAEjB,OAAO,SAAcsR,EAAQC,GAE5B,IAAIxnD,EAAUokD,EAAMtC,WAEpB,GAAKsC,EAAMxxD,OAAO60D,oBAAsB,CAGvC,IAAI3iD,EAAWs/C,EAAMxxD,OAAOkS,SAC5BmxC,EAAO37B,KAAMxV,GAAWggB,IAAKs/B,EAAMlV,QACnC,IAAIwY,EAAiBzR,EAAOpmD,SAG5B63D,GAAkBrpD,KAAKspD,IAAOvD,EAAMxxD,OAAOg1D,IAAM,EAAMvpD,KAAKmiB,GAAK,KAGjE0mC,EAAS,EAAIK,EAASG,EAAiB1nD,EAAQ6nD,aAAczD,EAAMxxD,OAAOmnB,QAC1EstC,EAAO,EAAIG,EAASE,EAAiB1nD,EAAQ6nD,aAAczD,EAAMxxD,OAAOmnB,aAE7DqqC,EAAMxxD,OAAOk1D,sBAGxBZ,EAASK,GAAWnD,EAAMxxD,OAAO65C,MAAQ2X,EAAMxxD,OAAO25C,MAAS6X,EAAMxxD,OAAOixD,KAAO7jD,EAAQ+nD,YAAa3D,EAAMxxD,OAAOmnB,QACrHstC,EAAOG,GAAWpD,EAAMxxD,OAAOo1D,IAAM5D,EAAMxxD,OAAOq1D,QAAW7D,EAAMxxD,OAAOixD,KAAO7jD,EAAQ6nD,aAAczD,EAAMxxD,OAAOmnB,UAKpHthB,QAAQmT,KAAM,gFACdw4C,EAAMhW,WAAY,IAhCX,GAwCV,SAAS8Z,EAASC,GAEZ/D,EAAMxxD,OAAO60D,oBAEjBxuC,GAASkvC,EAEE/D,EAAMxxD,OAAOk1D,sBAExB1D,EAAMxxD,OAAOixD,KAAOxlD,KAAKC,IAAK8lD,EAAMhC,QAAS/jD,KAAK+e,IAAKgnC,EAAM/B,QAAS+B,EAAMxxD,OAAOixD,KAAOsE,IAC1F/D,EAAMxxD,OAAOyxD,yBACbc,GAAc,IAId1sD,QAAQmT,KAAM,uFACdw4C,EAAM9V,YAAa,GAMrB,SAAS8Z,EAAUD,GAEb/D,EAAMxxD,OAAO60D,oBAEjBxuC,GAASkvC,EAEE/D,EAAMxxD,OAAOk1D,sBAExB1D,EAAMxxD,OAAOixD,KAAOxlD,KAAKC,IAAK8lD,EAAMhC,QAAS/jD,KAAK+e,IAAKgnC,EAAM/B,QAAS+B,EAAMxxD,OAAOixD,KAAOsE,IAC1F/D,EAAMxxD,OAAOyxD,yBACbc,GAAc,IAId1sD,QAAQmT,KAAM,uFACdw4C,EAAM9V,YAAa,GAUrB,SAAS+Z,EAAuBC,GAE/BhC,EAAY/wD,IAAK+yD,EAAMC,QAASD,EAAME,SAUvC,SAASC,EAAoBH,GAE5B7B,EAASlxD,IAAK+yD,EAAMC,QAASD,EAAME,SAwHpC,SAASE,EAAwBJ,GAEhC,GAA6B,GAAxBA,EAAMhF,QAAQzzD,OAElBy2D,EAAY/wD,IAAK+yD,EAAMhF,QAAS,GAAIqF,MAAOL,EAAMhF,QAAS,GAAIsF,WAExD,CAEN,IAAI1lD,EAAI,IAAQolD,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,OAC1DxlD,EAAI,IAAQmlD,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,OAE9DtC,EAAY/wD,IAAK2N,EAAGC,IAMtB,SAAS0lD,EAAqBP,GAE7B,GAA6B,GAAxBA,EAAMhF,QAAQzzD,OAElB42D,EAASlxD,IAAK+yD,EAAMhF,QAAS,GAAIqF,MAAOL,EAAMhF,QAAS,GAAIsF,WAErD,CAEN,IAAI1lD,EAAI,IAAQolD,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,OAC1DxlD,EAAI,IAAQmlD,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,OAE9DnC,EAASlxD,IAAK2N,EAAGC,IAMnB,SAAS2lD,EAAuBR,GAE/B,IAAIS,EAAKT,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,MACnDK,EAAKV,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,MAEnDxsC,EAAW/d,KAAKgmB,KAAM0kC,EAAKA,EAAKC,EAAKA,GAEzCpC,EAAWrxD,IAAK,EAAG6mB,GAoBpB,SAAS6sC,EAAuBX,GAE/B,GAA6B,GAAxBA,EAAMhF,QAAQzzD,OAElB02D,EAAUhxD,IAAK+yD,EAAMhF,QAAS,GAAIqF,MAAOL,EAAMhF,QAAS,GAAIsF,WAEtD,CAEN,IAAI1lD,EAAI,IAAQolD,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,OAC1DxlD,EAAI,IAAQmlD,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,OAE9DrC,EAAUhxD,IAAK2N,EAAGC,GAInBqjD,EAAY0C,WAAY3C,EAAWD,GAAc/rC,eAAgB6pC,EAAM3V,aAEvE,IAAIzuC,EAAUokD,EAAMtC,WAEpB8C,EAAY,EAAIvmD,KAAKmiB,GAAKgmC,EAAYtjD,EAAIlD,EAAQ6nD,cAElDZ,EAAU,EAAI5oD,KAAKmiB,GAAKgmC,EAAYrjD,EAAInD,EAAQ6nD,cAEhDvB,EAAYhsC,KAAMisC,GAInB,SAAS4C,EAAoBb,GAE5B,GAA6B,GAAxBA,EAAMhF,QAAQzzD,OAElB62D,EAAOnxD,IAAK+yD,EAAMhF,QAAS,GAAIqF,MAAOL,EAAMhF,QAAS,GAAIsF,WAEnD,CAEN,IAAI1lD,EAAI,IAAQolD,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,OAC1DxlD,EAAI,IAAQmlD,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,OAE9DlC,EAAOnxD,IAAK2N,EAAGC,GAIhBwjD,EAASuC,WAAYxC,EAAQD,GAAWlsC,eAAgB6pC,EAAM3B,UAE9D6E,EAAKX,EAASzjD,EAAGyjD,EAASxjD,GAE1BsjD,EAASnsC,KAAMosC,GAIhB,SAAS0C,EAAsBd,GAE9B,IAAIS,EAAKT,EAAMhF,QAAS,GAAIqF,MAAQL,EAAMhF,QAAS,GAAIqF,MACnDK,EAAKV,EAAMhF,QAAS,GAAIsF,MAAQN,EAAMhF,QAAS,GAAIsF,MAEnDxsC,EAAW/d,KAAKgmB,KAAM0kC,EAAKA,EAAKC,EAAKA,GAEzCnC,EAAStxD,IAAK,EAAG6mB,GAEjB0qC,EAAWvxD,IAAK,EAAG8I,KAAK4mB,IAAK4hC,EAAS1jD,EAAIyjD,EAAWzjD,EAAGihD,EAAM5B,YAE9D0F,EAASpB,EAAW3jD,GAEpByjD,EAAWtsC,KAAMusC,GA8BlB,SAASrB,EAAa8C,GAErB,IAAuB,IAAlBlE,EAAMhyC,QAAX,CAWA,OAPAk2C,EAAMe,iBAKNjF,EAAMtC,WAAWwH,MAAQlF,EAAMtC,WAAWwH,QAAUt2D,OAAOs2D,QAElDhB,EAAMiB,QAEd,KAAK,EAEJ,OAASnF,EAAMnB,aAAaJ,MAE3B,KAAK,QAAMK,OAEV,GAAKoF,EAAMkB,SAAWlB,EAAMmB,SAAWnB,EAAMoB,SAAW,CAEvD,IAAyB,IAApBtF,EAAMhW,UAAsB,OAEjCqa,EAAoBH,GAEpBj0C,EAAQkwC,EAAMlB,QAER,CAEN,IAA4B,IAAvBe,EAAM/V,aAAyB,OAEpCga,EAAuBC,GAEvBj0C,EAAQkwC,EAAMrB,OAIf,MAED,KAAK,QAAMG,IAEV,GAAKiF,EAAMkB,SAAWlB,EAAMmB,SAAWnB,EAAMoB,SAAW,CAEvD,IAA4B,IAAvBtF,EAAM/V,aAAyB,OAEpCga,EAAuBC,GAEvBj0C,EAAQkwC,EAAMrB,WAER,CAEN,IAAyB,IAApBkB,EAAMhW,UAAsB,OAEjCqa,EAAoBH,GAEpBj0C,EAAQkwC,EAAMlB,IAIf,MAED,QAEChvC,EAAQkwC,EAAMC,KAIhB,MAGD,KAAK,EAEJ,OAASJ,EAAMnB,aAAaE,QAE3B,KAAK,QAAMC,MAEV,IAA0B,IAArBgB,EAAM9V,WAAuB,QAxWvC,SAA+Bga,GAE9B1B,EAAWrxD,IAAK+yD,EAAMC,QAASD,EAAME,SAwWjCmB,CAAsBrB,GAEtBj0C,EAAQkwC,EAAMnB,MAEd,MAGD,QAEC/uC,EAAQkwC,EAAMC,KAIhB,MAED,KAAK,EAEJ,OAASJ,EAAMnB,aAAaF,OAE3B,KAAK,QAAMG,OAEV,IAA4B,IAAvBkB,EAAM/V,aAAyB,OAEpCga,EAAuBC,GAEvBj0C,EAAQkwC,EAAMrB,OAEd,MAED,KAAK,QAAMG,IAEV,IAAyB,IAApBe,EAAMhW,UAAsB,OAEjCqa,EAAoBH,GAEpBj0C,EAAQkwC,EAAMlB,IAEd,MAED,QAEChvC,EAAQkwC,EAAMC,MAQbnwC,IAAUkwC,EAAMC,OAEpBtC,SAAS0H,iBAAkB,YAAa/D,GAAa,GACrD3D,SAAS0H,iBAAkB,UAAW9D,GAAW,GAEjD1B,EAAMhqC,cAAe4rC,KAMvB,SAASH,EAAayC,GAErB,IAAuB,IAAlBlE,EAAMhyC,QAIX,OAFAk2C,EAAMe,iBAEGh1C,GAER,KAAKkwC,EAAMrB,OAEV,IAA4B,IAAvBkB,EAAM/V,aAAyB,QApavC,SAAgCia,GAE/B/B,EAAUhxD,IAAK+yD,EAAMC,QAASD,EAAME,SAEpChC,EAAY0C,WAAY3C,EAAWD,GAAc/rC,eAAgB6pC,EAAM3V,aAEvE,IAAIzuC,EAAUokD,EAAMtC,WAEpB8C,EAAY,EAAIvmD,KAAKmiB,GAAKgmC,EAAYtjD,EAAIlD,EAAQ6nD,cAElDZ,EAAU,EAAI5oD,KAAKmiB,GAAKgmC,EAAYrjD,EAAInD,EAAQ6nD,cAEhDvB,EAAYhsC,KAAMisC,GAElBnC,EAAMtqC,SAwZJ+vC,CAAuBvB,GAEvB,MAED,KAAK/D,EAAMnB,MAEV,IAA0B,IAArBgB,EAAM9V,WAAuB,QA1ZrC,SAA+Bga,GAE9BzB,EAAStxD,IAAK+yD,EAAMC,QAASD,EAAME,SAEnC1B,EAAWoC,WAAYrC,EAAUD,GAE5BE,EAAW3jD,EAAI,EAEnB+kD,EAASnB,KAEED,EAAW3jD,EAAI,GAE1BilD,EAAUrB,KAIXH,EAAWtsC,KAAMusC,GAEjBzC,EAAMtqC,SA0YJgwC,CAAsBxB,GAEtB,MAED,KAAK/D,EAAMlB,IAEV,IAAyB,IAApBe,EAAMhW,UAAsB,QA5YpC,SAA6Bka,GAE5B5B,EAAOnxD,IAAK+yD,EAAMC,QAASD,EAAME,SAEjC7B,EAASuC,WAAYxC,EAAQD,GAAWlsC,eAAgB6pC,EAAM3B,UAE9D6E,EAAKX,EAASzjD,EAAGyjD,EAASxjD,GAE1BsjD,EAASnsC,KAAMosC,GAEftC,EAAMtqC,SAoYJiwC,CAAoBzB,IAQvB,SAASxC,EAAWwC,IAEI,IAAlBlE,EAAMhyC,UAIX8vC,SAASoD,oBAAqB,YAAaO,GAAa,GACxD3D,SAASoD,oBAAqB,UAAWQ,GAAW,GAEpD1B,EAAMhqC,cAAe6rC,GAErB5xC,EAAQkwC,EAAMC,MAIf,SAASiB,EAAc6C,IAEC,IAAlBlE,EAAMhyC,UAA0C,IAArBgyC,EAAM9V,YAA0Bj6B,IAAUkwC,EAAMC,MAAQnwC,IAAUkwC,EAAMrB,SAExGoF,EAAMe,iBACNf,EAAM0B,kBAEN5F,EAAMhqC,cAAe4rC,GAxZtB,SAA2BsC,GAErBA,EAAMd,OAAS,EAEnBY,EAAUrB,KAECuB,EAAMd,OAAS,GAE1BU,EAASnB,KAIV3C,EAAMtqC,SA8YNmwC,CAAkB3B,GAElBlE,EAAMhqC,cAAe6rC,IAItB,SAASF,GAAWuC,IAEI,IAAlBlE,EAAMhyC,UAA0C,IAArBgyC,EAAMrV,aAA4C,IAApBqV,EAAMhW,WAlZrE,SAAwBka,GAEvB,IAAItgC,GAAc,EAElB,OAASsgC,EAAM4B,SAEd,KAAK9F,EAAMziD,KAAKmhD,GACfwE,EAAK,EAAGlD,EAAM1B,aACd16B,GAAc,EACd,MAED,KAAKo8B,EAAMziD,KAAKqhD,OACfsE,EAAK,GAAKlD,EAAM1B,aAChB16B,GAAc,EACd,MAED,KAAKo8B,EAAMziD,KAAKkhD,KACfyE,EAAKlD,EAAM1B,YAAa,GACxB16B,GAAc,EACd,MAED,KAAKo8B,EAAMziD,KAAKohD,MACfuE,GAAOlD,EAAM1B,YAAa,GAC1B16B,GAAc,EAKXA,IAGJsgC,EAAMe,iBAENjF,EAAMtqC,UAmXPqwC,CAAe7B,GAIhB,SAAS5C,GAAc4C,GAEtB,IAAuB,IAAlBlE,EAAMhyC,QAAX,CAIA,OAFAk2C,EAAMe,iBAEGf,EAAMhF,QAAQzzD,QAEtB,KAAK,EAEJ,OAASu0D,EAAMd,QAAQC,KAEtB,KAAK,QAAML,OAEV,IAA4B,IAAvBkB,EAAM/V,aAAyB,OAEpCqa,EAAwBJ,GAExBj0C,EAAQkwC,EAAM2B,aAEd,MAED,KAAK,QAAM7C,IAEV,IAAyB,IAApBe,EAAMhW,UAAsB,OAEjCya,EAAqBP,GAErBj0C,EAAQkwC,EAAM4B,UAEd,MAED,QAEC9xC,EAAQkwC,EAAMC,KAIhB,MAED,KAAK,EAEJ,OAASJ,EAAMd,QAAQE,KAEtB,KAAK,QAAMC,UAEV,IAA0B,IAArBW,EAAM9V,aAA4C,IAApB8V,EAAMhW,UAAsB,QAjXpE,SAAmCka,GAE7BlE,EAAM9V,YAAawa,EAAuBR,GAE1ClE,EAAMhW,WAAYya,EAAqBP,GA+WxC8B,CAA0B9B,GAE1Bj0C,EAAQkwC,EAAM6B,gBAEd,MAED,KAAK,QAAMiE,aAEV,IAA0B,IAArBjG,EAAM9V,aAA+C,IAAvB8V,EAAM/V,aAAyB,QAnXvE,SAAsCia,GAEhClE,EAAM9V,YAAawa,EAAuBR,GAE1ClE,EAAM/V,cAAeqa,EAAwBJ,GAiX9CgC,CAA6BhC,GAE7Bj0C,EAAQkwC,EAAM8B,mBAEd,MAED,QAEChyC,EAAQkwC,EAAMC,KAIhB,MAED,QAECnwC,EAAQkwC,EAAMC,KAIXnwC,IAAUkwC,EAAMC,MAEpBJ,EAAMhqC,cAAe4rC,IAMvB,SAASJ,GAAa0C,GAErB,IAAuB,IAAlBlE,EAAMhyC,QAKX,OAHAk2C,EAAMe,iBACNf,EAAM0B,kBAEG31C,GAER,KAAKkwC,EAAM2B,aAEV,IAA4B,IAAvB9B,EAAM/V,aAAyB,OAEpC4a,EAAuBX,GAEvBlE,EAAMtqC,SAEN,MAED,KAAKyqC,EAAM4B,UAEV,IAAyB,IAApB/B,EAAMhW,UAAsB,OAEjC+a,EAAoBb,GAEpBlE,EAAMtqC,SAEN,MAED,KAAKyqC,EAAM6B,gBAEV,IAA0B,IAArBhC,EAAM9V,aAA4C,IAApB8V,EAAMhW,UAAsB,QArWlE,SAAkCka,GAE5BlE,EAAM9V,YAAa8a,EAAsBd,GAEzClE,EAAMhW,WAAY+a,EAAoBb,GAmWzCiC,CAAyBjC,GAEzBlE,EAAMtqC,SAEN,MAED,KAAKyqC,EAAM8B,mBAEV,IAA0B,IAArBjC,EAAM9V,aAA+C,IAAvB8V,EAAM/V,aAAyB,QAvWrE,SAAqCia,GAE/BlE,EAAM9V,YAAa8a,EAAsBd,GAEzClE,EAAM/V,cAAe4a,EAAuBX,GAqW/CkC,CAA4BlC,GAE5BlE,EAAMtqC,SAEN,MAED,QAECzF,EAAQkwC,EAAMC,MAMjB,SAASmB,GAAY2C,IAEG,IAAlBlE,EAAMhyC,UAIXgyC,EAAMhqC,cAAe6rC,GAErB5xC,EAAQkwC,EAAMC,MAIf,SAASe,GAAe+C,IAEA,IAAlBlE,EAAMhyC,SAEXk2C,EAAMe,iBAMPjF,EAAMtC,WAAW8H,iBAAkB,cAAerE,IAAe,GAEjEnB,EAAMtC,WAAW8H,iBAAkB,YAAapE,GAAa,GAC7DpB,EAAMtC,WAAW8H,iBAAkB,QAASnE,GAAc,GAE1DrB,EAAMtC,WAAW8H,iBAAkB,aAAclE,IAAc,GAC/DtB,EAAMtC,WAAW8H,iBAAkB,WAAYjE,IAAY,GAC3DvB,EAAMtC,WAAW8H,iBAAkB,YAAahE,IAAa,GAE7DxB,EAAMtC,WAAW8H,iBAAkB,UAAW7D,IAAW,IAIpB,IAAhC3B,EAAMtC,WAAW2I,WAErBrG,EAAMtC,WAAW2I,SAAW,GAM7Bp1D,KAAKykB,UAINm0B,EAAcl+C,UAAYD,OAAO0C,OAAQ,IAAgBzC,WACzDk+C,EAAcl+C,UAAU0U,YAAcwpC,EAWtC,IAAIyc,EAAc,SAAW93D,EAAQkvD,GAEpC7T,EAAch+C,KAAMoF,KAAMzC,EAAQkvD,GAElCzsD,KAAK4tD,aAAaJ,KAAO,QAAMQ,IAC/BhuD,KAAK4tD,aAAaF,MAAQ,QAAMG,OAEhC7tD,KAAKiuD,QAAQC,IAAM,QAAMF,IACzBhuD,KAAKiuD,QAAQE,IAAM,QAAM6G,cAI1BK,EAAY36D,UAAYD,OAAO0C,OAAQ,IAAgBzC,WACvD26D,EAAY36D,UAAU0U,YAAcimD,G,yFCnqCpC,SAaMv0B,EAAe,IADrB,yB,+CAAsD,OAAlB,iBAAkB,EAAtD,CAFA,KAEoC3hC,mBAGpC,yE,OACC,EAAA0iC,cAAgBf,E,EA8FjB,OA/FmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,WAGR,YAAAsd,cAAA,W,MACmB,QAAlB,EAAApb,KAAKsD,qBAAa,SAAEu0B,qBAAqBy9B,mBAAmBt1D,OAG7D,YAAAy4B,UAAA,SAAUC,G,QAE+B,QAAxC,EAAkB,QAAlB,EAAA14B,KAAKsD,qBAAa,eAAEu0B,4BAAoB,SAAEwO,UAAU4C,uBAAuBjpC,KAAM04B,IAmFnF,EA/FA,CAAmC,EAAAkC,aAAtB,EAAA26B,iB,8ECbb,iBAIC,WAAoBC,QAAA,IAAAA,MAAA,SAAAA,eAHpB,KAAAC,UAAoB,EA4CrB,OAvCC,sBAAI,sBAAO,C,IAAX,WACC,OAAOz1D,KAAKy1D,U,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAOz1D,KAAK01D,gB,gCAGb,YAAAC,KAAA,WAIC,IAHA,IAAMC,EAAyD,IAAIt8B,IAC7DP,EAAkB,GAED,MAAA/4B,KAAKw1D,aAAL,eAAmB,CAArC,IAAIrsB,EAAU,KAClB,IAAKnpC,KAAKy1D,SAAU,CACnB,IAAM,EAAOtsB,EAAW9sC,KAClBw5D,EAAWD,EAAoBl5D,IAAI,GACrCm5D,EACCA,EAAS5xB,WAAakF,EAAWlF,YACpCjkC,KAAKy1D,UAAW,EAChBz1D,KAAK01D,eAAiB,qBAAqBvsB,EAAW9sC,KAAI,eAAe8sC,EAAWlF,UACpF7gC,QAAQmT,KAAK,yBAA0BvW,KAAK01D,kBAG7CE,EAAoB11D,IAAI,EAAMipC,GAC9BpQ,EAAMj+B,KAAK,KAMd,IADA,IAAMg7D,EAA2C,GAChC,MAAA/8B,EAAA,eAAO,CAAnB,IAAI,EAAI,MACNoQ,EAAaysB,EAAoBl5D,IAAI,KAE1Co5D,EAAiBh7D,KAAKquC,GAKxB,OAAO2sB,GAET,EA7CA,GAAa,EAAA/xB,+B,8ECFb,aAIA,0BACS,KAAAgyB,eAA2C,GAsBpD,OApBC,YAAAl9B,MAAA,WACC74B,KAAK+1D,eAAiB,IAGvB,YAAAj7D,KAAA,SAAKk7D,GACJh2D,KAAK+1D,eAAej7D,KAAKk7D,IAE1B,YAAAC,gBAAA,SACCn4D,EACAzB,EACAqR,EACAonC,GAEA,IAAMkhB,EAAe,IAAI,EAAA92D,YAAYpB,EAAMzB,EAAMqR,EAAeonC,GAChE90C,KAAK+1D,eAAej7D,KAAKk7D,IAG1B,sBAAI,mBAAI,C,IAAR,WACC,OAAOh2D,KAAK+1D,gB,gCAEd,EAvBA,GAAa,EAAAG,0B,0FCJb,4BAGA,QACA,QACA,SACA,SACA,SAUA,SACA,SACA,QASMC,EAAe,CAACr4D,KAAM,UAEf,EAAAs4D,oBAAsB,CAClCC,KAAM,EACNC,IAAK,KAGN,YACA,SACA,SACA,SAEA,OAGA,QACA,QAEA,SAAgBC,EAAsD7yC,GACrE,mBAAO,2D,OACN,EAAA9G,OAAS,EAAA1d,YAAYX,SACrB,EAAAu6C,SAAW,EAAA55C,YAAYT,cAAc,GAAI,CACxC89B,eAAgB,CACfC,QAAS,EAAA58B,YAAY42D,SAQvB,EAAA3c,OAAS,EAAA36C,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAI,CAACsc,MAAM,IAC/C,EAAA+6C,KAAO,EAAAn3D,YAAYZ,MAAM,EAAA83D,oBAAoBC,KAAM,CAAClzB,MAAO,CAAC,EAAG,OAC/D,EAAAmzB,IAAM,EAAAp3D,YAAYZ,MAAM,EAAA83D,oBAAoBE,IAAK,CAACnzB,MAAO,CAAC,EAAG,OAK7D,EAAAszB,kBAAoB,EAAAv3D,YAAYhB,OAAO,KAAM,CAC5C4W,SAAU,SAACtR,EAAoB6S,GAC9BqgD,EAAuBC,iCAAiCnzD,M,EAG3D,OAxB2B,iBAwB3B,EAxBA,CAA2BkgB,GAD5B,+BA4BA,+B,+CAEG,OAF4C,iBAE5C,EAFH,CAA+C,EAAAkzC,6BAC9C,EAAAC,4BAA4B,EAAApzC,uBAAuB,EAAAqzC,iBAAiBP,EAA2B,EAAAp3D,uBADnF,EAAA43D,4BAIb,6E,OAKiB,EAAAt4C,aAAuB,EAAAF,mBAAmBkX,OAEhD,EAAAuhC,SAAmB,EAIpB,EAAAnzC,qBAA4C,IAAI,EAAAC,oBAAoB,GAC7D,EAAArkB,MAA0B,IAAI,EAAAypB,iBAAiB,G,EAiIhE,OA7I2G,iBAQ1G,sBAAI,qBAAM,C,IAAV,WACC,OAAOlpB,KAAKyf,S,gCAMb,sBAAI,oCAAqB,C,IAAzB,WACC,OAAQzf,KAAKi3D,uBACZj3D,KAAKi3D,wBAA0B,IAAIj3D,KAAKk3D,kCAAkCl3D,O,gCAE5E,sBAAc,gDAAiC,C,IAA/C,WACC,OAAO,EAAA89B,0B,gCAGR,sBAAI,kCAAmB,C,IAAvB,WACC,OAAQ99B,KAAKm3D,qBAAuBn3D,KAAKm3D,sBAAwB,IAAI,EAAAC,mBAAmBp3D,O,gCAGzF,sBAAI,gCAAiB,C,IAArB,WACC,OAAQA,KAAKq3D,mBAAqBr3D,KAAKq3D,oBAAsB,IAAI,EAAApnB,iBAAiBjwC,O,gCAGnF,sBAAI,sCAAuB,C,IAA3B,WACC,OAAQA,KAAKs3D,yBAA2Bt3D,KAAKs3D,0BAA4B,IAAI,EAAArjB,sBAAsBj0C,O,gCAIpG,YAAAD,qBAAA,WACC,YAAMA,qBAAoB,WAE1BC,KAAKQ,GAAGC,QAAQC,qBAMhBV,KAAK6jB,qBAAqBjJ,mBAoCrB,YAAAU,KAAN,W,gHAGC,OAFAtb,KAAK6jB,qBAAqBY,SAC1BzkB,KAAKu3D,kBAAkB9yC,SACvB,GAAMzkB,KAAKw3D,sBAAsB/yC,U,OAQjC,OARA,SAEIzkB,KAAKyf,QAAQ42C,MAAQr2D,KAAKyY,GAAG49C,MAAQr2D,KAAKyf,QAAQ62C,KAAOt2D,KAAKyY,GAAG69C,MACpEt2D,KAAKyf,QAAQ42C,KAAOr2D,KAAKyY,GAAG49C,KAC5Br2D,KAAKyf,QAAQ62C,IAAMt2D,KAAKyY,GAAG69C,IAC3Bt2D,KAAKyf,QAAQuvC,0BAGd,GAAMhvD,KAAKy3D,wBAAwBxkB,0B,cAAnC,SACAjzC,KAAK03D,gBACL13D,KAAK23D,oBAAoBC,kBAMzB53D,KAAKyf,QAAQsF,cAAcoxC,GAC3Bn2D,KAAK0b,gBAAgBC,W,YAGtB,YAAAk8C,UAAA,aAEA,YAAAC,UAAA,aAGA,YAAAl7C,OAAA,WACC,OAAO5c,KAAKyf,SAGb,YAAAi4C,cAAA,aAGO,EAAAf,iCAAP,SAAwCnzD,GACvCA,EAAKu0D,wBAEN,YAAAA,qBAAA,WACC/3D,KAAKmD,MAAMirC,mBAAmB4pB,4BAA4Bh4D,KAAKkX,cAGhE,YAAAu6B,uBAAA,SAAuBF,GAClB,UAAaA,IAGbA,GAAUvxC,KAAKg3D,SAAWzlB,IAC7BvxC,KAAKg3D,QAAUzlB,EACfvxC,KAAKi4D,6BAGG,YAAAA,yBAAV,aAEA,YAAAC,oCAAA,WAEC,EAAAxyC,cAAc8F,uBAAuBxrB,KAAKyf,QAASzf,OAEpD,YAAAm4D,cAAA,SAAcxtD,GACb,OAAO,IAAI,EAAAytD,cAAcztD,EAAS3K,KAAKmD,MAAOnD,OAEhD,EA7IA,CAA2G,EAAA8f,cAA9F,EAAAu4C,qBAqJb,+B,+CAA+G,OAAnE,iBAAmE,EAA/G,CAA4CA,GAA/B,EAAA3B,0B,yFCnOb,2BACA,2BACA,4BACA,4BACA,2BACA,4BACA,OAKA,QAEA,QAEA,SACA,QACA,SAEA,QACA,QAUA,aAYC,aAGC12D,KAAKkC,QAkWP,OA1VC,YAAAo2D,UAAA,WACC,OAAOt4D,KAAKu4D,YAEb,YAAAr2D,MAAA,WACClC,KAAKu4D,WAAaC,YAAYC,MAC9Bz4D,KAAK64B,SAEN,YAAAA,MAAA,WACC74B,KAAKyL,mBAAgBpC,EACrBrJ,KAAK04D,sBAAmBrvD,EACxBrJ,KAAK24D,mBAAgBtvD,GAQtB,YAAAvG,MAAA,WACC,IAAMlC,EAAa,IAAIqB,EACvB,GAAIjC,KAAK44D,SAAU,CAElB,IADA,IAAM/3D,EAAU,GACG,MAAAb,KAAK44D,SAAL,eAAe,CAA7B,IAAIr7D,EAAM,KACdsD,EAAQ/F,KAAK,EAAAmd,WAAWnV,MAAMvF,IAE/BqD,EAAWQ,YAAYP,GAExB,OAAOD,GAOR,YAAAQ,YAAA,SAAYP,GACXb,KAAK44D,SAAW/3D,EAChBb,KAAKkC,SAEN,YAAArB,QAAA,WACC,OAAOb,KAAK44D,UAEb,YAAAC,aAAA,WACC,OAAQ74D,KAAK24D,cAAgB34D,KAAK24D,eAAiB34D,KAAK84D,wBAEjD,YAAAA,qBAAR,WACC,IAAMt+B,EAAqB,GAC3B,GAAIx6B,KAAK44D,SACR,I,eAASt+D,GACR,EAAKs+D,SAASt+D,GAAG2iD,UAAS,SAAC1/C,GAC1B,IAAMw7D,EAAc,IAAI,EAAA9gD,WAAW1a,EAAQjD,GAC3CkgC,EAAK1/B,KAAKi+D,O,OAHHz+D,EAAI,EAAGA,EAAI0F,KAAK44D,SAASp+D,OAAQF,I,EAAjCA,GAOV,OAAOkgC,GAUR,YAAA74B,WAAA,WAYC,IADA,IAAM64B,EAAyB,GACP,MAAAx6B,KAAK64D,eAAL,eAAqB,CAAxC,IACEt3D,EADa,KACWhE,SAAkBgE,SAC5CA,GACHi5B,EAAK1/B,KAAKyG,GAGZ,OAAOi5B,GAER,YAAA9oB,gBAAA,WACC,OAAQ1R,KAAK04D,iBAAmB14D,KAAK04D,kBAAoB14D,KAAKg5D,0BAEvD,YAAAA,uBAAR,WAEC,IADA,IAAMx+B,EAAuB,GACR,MAAAx6B,KAAK2B,aAAL,eAAmB,CAAnC,IAAIJ,EAAQ,KAChBi5B,EAAK1/B,KAAK,IAAI,EAAAkR,aAAazK,IAQ5B,OAAOi5B,GAER,YAAAy+B,uBAAA,SAAuBz+B,EAAwBj9B,GAC9C,GAAIA,EAAOgE,SACV,OAAOi5B,EAAK1/B,KAAKyC,EAAOgE,WASnB,EAAA23D,qBAAP,SAA4B37D,GAC3B,OAAKA,EAAgB47D,QAAW57D,EAAwB67D,QAAW77D,EAAkB87D,SAC5E97D,EAAgBgE,SAElB,MAER,YAAA+Q,MAAA,WACC,OAAO,UAAetS,KAAK0R,kBAAkBrH,KAAI,SAAC6D,GAAM,OAAAA,EAAEoE,aAE3D,YAAA3C,OAAA,WACC,OAAO,UAAe3P,KAAK0R,kBAAkBrH,KAAI,SAAC6D,GAAM,OAAAA,EAAEyB,cAE3D,YAAAhM,aAAA,WACC,OAAO,UAAW3D,KAAK0R,kBAAkBrH,KAAI,SAAC6D,GAAM,OAAAA,EAAEvK,oBAEvD,YAAAy4C,kBAAA,SAAkBC,GACjB,GAAIA,EAAO,CACV,IAAMz4C,EAAU,EAAAsG,WAAWtG,QAAQy4C,GAE7B,EAASr8C,KAAK2P,SACpB,OAAO/L,EAAQyG,KAAI,SAAC/P,GAAM,SAAOA,MAGjC,OAAO0F,KAAK2P,UAIP,EAAA2pD,aAAP,SAAoBz4D,GACnB,IAAMD,EAAa,IAAIqB,EAEvB,OADArB,EAAWQ,YAAYP,GAChBD,GAUR,YAAA24D,mBAAA,SAAmBC,GAClB,OAAOx5D,KAAKy5D,wBAAwBD,GAAYnvD,KAAI,SAACqvD,GAAO,OAAAA,EAAGn8D,aAEhE,YAAAk8D,wBAAA,SAAwBD,GAGvB,GAAmB,MAFnBA,EAAa,UAAYA,IAEF,CACtB,IAAMr3D,EAAQuF,SAAS8xD,GACvB,OAAK,UAAar3D,GAGVnC,KAAK64D,eAAexxC,QAAO,SAAC0xC,GAClC,OAAO,EAAA7uD,WAAWP,WAAW6vD,EAAYT,EAAY18D,WAH/C,UAAe,CAAC2D,KAAK64D,eAAe12D,KAO5C,OAAOnC,KAAK64D,gBAqBd,YAAArtD,aAAA,WACC,OAAQxL,KAAKyL,cAAgBzL,KAAKyL,eAAiBzL,KAAK25D,yBAEzD,YAAAC,OAAA,WACC,IAAMA,EAAS,IAAI,EAAArrD,QAEnB,OADAvO,KAAKwL,eAAequD,UAAUD,GACvBA,GAER,YAAAp0D,KAAA,WACC,IAAMA,EAAO,IAAI,EAAA+I,QAEjB,OADAvO,KAAKwL,eAAesuD,QAAQt0D,GACrBA,GAGA,YAAAm0D,sBAAR,WACC,IAAMI,EAAO,IAAI,EAAAC,KACjB,GAAIh6D,KAAK44D,SACR,IAAmB,UAAA54D,KAAK44D,SAAL,eAAe,CAA7B,IAAIr7D,EAAM,KACdw8D,EAAKE,eAAe18D,GAGtB,OAAOw8D,GAER,YAAA7tD,uBAAA,WACC,IAAmB,UAAAlM,KAAK64D,eAAL,eAAqB,CAAzB,KACP3sD,2BAIT,YAAAS,WAAA,SAAWtQ,GACV,IAAI69D,EACJ,OAAoD,OAA/CA,EAAiBl6D,KAAK0R,kBAAkB,KACrCwoD,EAAevtD,WAAWtQ,IAKnC,YAAAwQ,YAAA,SAAYxQ,GACX,IAAM69D,EAAiBl6D,KAAK0R,kBAAkB,GAC9C,OAAsB,MAAlBwoD,EACIA,EAAertD,YAAYxQ,GAE3B,MAIT,YAAA89D,cAAA,SAAcxrD,EAAkBC,EAAkBwrD,GACjD,OAAQA,GACP,KAAK,EAAA53D,aAAawD,aAAaJ,OAC9B,GAAI5F,KAAK2M,WAAWgC,IACf3O,KAAK44D,SACR,IAAmB,UAAA54D,KAAK44D,SAAL,eAAe,CAAnB,KACP3b,UAAS,SAACod,GAChB,IAAM94D,EAAWU,EAAUi3D,qBAAqBmB,GAC5C94D,GACmB,IAAI,EAAAyK,aAAazK,GACzBmN,iBAAiBC,EAAUC,MAM9C,MAED,KAAK,EAAApM,aAAawD,aAAaH,OAC9B,GAAI7F,KAAK2M,WAAWgC,IACf3O,KAAK44D,SACR,IAAmB,UAAA54D,KAAK44D,SAAL,eAAe,CAAnB,KACP3b,UAAS,SAACod,GACI,IAAI,EAAApiD,WAAWoiD,EAAO,GAC9B3rD,iBAAiBC,EAAUC,SAS9C,YAAAzE,aAAA,WACC,IAAI+vD,EACJ,OAAoD,OAA/CA,EAAiBl6D,KAAK0R,kBAAkB,IACrCwoD,EAAe/vD,eAEf,IAGT,YAAAmwD,oBAAA,WACC,IAAIC,EACJ,OAA+C,OAA1CA,EAAev6D,KAAK64D,eAAe,IAChC0B,EAAapwD,eAEb,IAIT,YAAAqwD,2BAAA,SAA2BC,GAI1B,IAHA,IAAMzwD,EAAQ,EAAAE,WAAWC,aAAaswD,GAEhCC,EAAwB,GACN,MAAA16D,KAAKmK,eAAL,eACvB,IADI,IAAI6C,EAAW,KACF,MAAAhD,EAAA,eAAO,CAAnB,IAAIC,EAAI,KACR,EAAAC,WAAWP,WAAWqD,EAAa/C,IACtCywD,EAAsB5/D,KAAKkS,GAK9B,OAAO,UAAY0tD,IAGpB,YAAA5tD,aAAA,WACC,IAAIotD,EACJ,OAAoD,OAA/CA,EAAiBl6D,KAAK0R,kBAAkB,IACrCwoD,EAAeptD,eAEf,IAGT,YAAAI,YAAA,SAAYF,GACX,IAAIktD,EACJ,OAAoD,OAA/CA,EAAiBl6D,KAAK0R,kBAAkB,IACrCwoD,EAAehtD,YAAYF,GAE3B,GAIT,YAAAuvC,0BAAA,SAA0BlgD,EAAcmJ,EAAckI,GAChC,MAAjBA,IACHA,EAAgB,EAAAlB,cAAckB,cAAclI,IAG7C,IAA0B,UAAAxF,KAAK0R,kBAAL,eAAwB,CAA5B,KACPjE,mBAAmBpR,EAAMmJ,EAAMkI,KAI/C,YAAAitD,0BAAA,SAA0Bt+D,EAAcmJ,EAAckI,GAChC,MAAjBA,IACHA,EAAgB,EAAAlB,cAAckB,cAAclI,IAG7C,IAAwB,UAAAxF,KAAK64D,eAAL,eAAqB,CAAzB,KACPprD,mBAAmBpR,EAAMqR,KAIhC,EAAA5K,MAAP,SAAa83D,GACZ,IAAMC,EAAY,IAAI,EAAAx0D,MAOtB,OALAu0D,EAAU7+C,SAASna,SAAQ,SAAC86C,GAC3B,IAAMC,EAAa,EAAA1kC,WAAWnV,MAAM45C,GACpCme,EAAUv7C,IAAIq9B,MAGRke,GAET,EAjXA,GAAa,EAAA54D,a,kFCfR64D,E,OAfL,QACA,OACA,OAGA,SAEA,SAGMC,EACK,WADLA,EAEG,UAGT,SAAKD,GACJ,QACA,QACA,QACA,QACA,QACA,QACA,QAPD,CAAKA,MAAa,KASlB,IAAME,EAAoB,CACzBntD,EAAG,EACHC,EAAG,EACHE,EAAG,EACHI,EAAG,EACHzR,EAAG,EACHuR,EAAG,EACHhD,EAAG,GAMJ,cAKC,WAAoB+vD,EAA8B94D,GAAlD,MACC,YAAMA,IAAM,K,OADO,EAAA84D,iBAEnB,EAAK3vD,UAAY,EAAK2vD,eAAe15D,W,EAmMvC,OA1M+B,iBAU9B,YAAA+O,iBAAA,WACC,OAAOtQ,KAAKi7D,gBAEb,YAAA15D,SAAA,WACC,OAAQvB,KAAKsL,UAAYtL,KAAKsL,WAAatL,KAAKi7D,eAAe15D,YAMhE,YAAA2L,YAAA,SAAY7Q,GAGX,OADAA,EAAO,EAAAmQ,cAAcC,WAAWpQ,GACzB2D,KAAKsL,UAAUjJ,aAAahG,GAAM4Q,UAG1C,YAAAN,WAAA,SAAWtQ,GACV,IAAM6+D,EAAgB,EAAA1uD,cAAcC,WAAWpQ,GAC/C,OAAO2D,KAAKi7D,eAAetuD,WAAWuuD,IAGvC,YAAAtqD,aAAA,SAAavU,GAGZ,GArCY,UAqCRA,EACH,OAAO2D,KAAKmC,MAEZ,IAAIiyB,EAAiB,KACjB+mC,EAAkB,KAxCb,MAyCL9+D,EAAKA,EAAK7B,OAAS,KACtB45B,EAAiB/3B,EAAKA,EAAK7B,OAAS,GACpC2gE,EAAkBH,EAAkB5mC,GACpC/3B,EAAOA,EAAKwL,UAAU,EAAGxL,EAAK7B,OAAS,IAExC,IAAM4gE,EAAe,EAAA5uD,cAAcC,WAAWpQ,GAGxC8Q,EAASnN,KAAKsL,UAAUjJ,aAAa+4D,GAC3C,IAAIjuD,EA8CG,CACN,IAAMrL,EAAU,UAAUzF,EAAI,+BAA+B5B,OAAO6R,KACnEtM,KAAKsL,UAAUsB,YAAc,IAC5B/C,KAAK,KAEP,MADAzG,QAAQmT,KAAKzU,GACPA,EAlDC,IAAAQ,EAAA,EAAAA,MACP,GAAItC,KAAKi7D,eAAevuD,kBAAkB0uD,GAAe,CACxD,IAAMC,EAAcr7D,KAAKs7D,mBAAmBF,GAC5C,OAAOp7D,KAAKi7D,eAAe1uD,iBAAiB6uD,GAAcC,GAE1D,IAAM71D,EAAO2H,EAAOF,SACdsuD,EAAcv7D,KAAKw7D,OAASh2D,EAElC,GAAuB,MAAnB21D,EACH,OAAQ31D,GACP,KAAK,EACJ,OAAOlD,EAAMi5D,GAEd,KAAK,EACJ,OAAO,IAAI,EAAAzqC,QAAQxuB,EAAMi5D,EAAc,GAAIj5D,EAAMi5D,EAAc,IAEhE,KAAK,EACJ,OAAO,IAAI,EAAAhtD,QACVjM,EAAMi5D,EAAc,GACpBj5D,EAAMi5D,EAAc,GACpBj5D,EAAMi5D,EAAc,IAItB,KAAK,EACJ,OAAO,IAAI,EAAAE,QACVn5D,EAAMi5D,EAAc,GACpBj5D,EAAMi5D,EAAc,GACpBj5D,EAAMi5D,EAAc,GACpBj5D,EAAMi5D,EAAc,IAGtB,QACC,KAAM,mBAAmB/1D,EAAI,SAG/B,OAAQA,GACP,KAAK,EACJ,OAAOlD,EAAMi5D,GAEd,QACC,OAAOj5D,EAAMi5D,EAAcJ,KAclC,YAAAG,mBAAA,SAAmBj/D,GAClB,OAAI2D,KAAKi7D,eAAevuD,kBAAkBrQ,GAElC2D,KAAKsL,UAAUjJ,aAAahG,GAAMiG,MAAMtC,KAAKw7D,SAE5C,GAIV,YAAA/rD,SAAA,WAEQ,IAAAnN,EAAA,+BAAAA,MAEP,OADAtC,KAAK07D,UAAY17D,KAAK07D,WAAa,IAAI,EAAAntD,QAChCvO,KAAK07D,UAAU3b,UAAUz9C,EAAqB,EAAdtC,KAAKw7D,SAE7C,YAAAG,aAAA,SAAaC,GACZ57D,KAAK67D,yBAAyBd,EAAuBa,IAGtD,YAAAtd,OAAA,WACQ,IAAAh8C,EAAA,+BAAAA,MAEP,OADAtC,KAAK87D,QAAU97D,KAAK87D,SAAW,IAAI,EAAAvtD,QAC5BvO,KAAK87D,QAAQ/b,UAAUz9C,EAAqB,EAAdtC,KAAKw7D,SAE3C,YAAAO,WAAA,SAAWC,GACV,OAAOh8D,KAAK67D,yBAAyBd,EAAqBiB,IAG3D,YAAA1f,iBAAA,SAAiBjgD,EAAcS,GAE9B,GAAa,MAATA,EAAJ,CAGA,GAAY,MAART,EACH,KAAM,yCAOP,IAAM8Q,EAASnN,KAAKsL,UAAUjJ,aAAahG,GACrCiG,EAAQ6K,EAAO7K,MACf4K,EAAcC,EAAOF,SAE3B,OAAQC,GACP,KAAK,EACJ5K,EAAMtC,KAAKw7D,QAAU1+D,EACrB,MACD,KAAK,EACJ,IAAMm/D,EAAKn/D,EACXwF,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKS,EAAGpuD,EAChCvL,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKS,EAAGnuD,EAChC,MACD,KAAK,EAEJ,GAD2C,MAAzBhR,EAAoBH,EACxB,CACb,IAAMsR,EAAMnR,EACZwF,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKvtD,EAAItR,EACjC2F,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKvtD,EAAIC,EACjC5L,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKvtD,EAAI/C,MAC3B,CACN,IAAMgxD,EAAKp/D,EACXwF,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKU,EAAGruD,EAChCvL,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKU,EAAGpuD,EAChCxL,EAAoB,EAAdtC,KAAKw7D,OAAa,GAAKU,EAAGluD,EAEjC,MACD,QAEC,MADA5K,QAAQmT,KAAK,yDAAyDrJ,GAChE,eAAeA,EAAW,sBAGnC,YAAA2uD,yBAAA,SAAyBx/D,EAAcS,GAEtC,GAAa,MAATA,EAAJ,CAGA,GAAY,MAART,EACH,KAAM,yCAGP,IACMiG,EADStC,KAAKsL,UAAUjJ,aAAahG,GACtBiG,MACfhI,EAAkB,EAAd0F,KAAKw7D,OAEfl5D,EAAMhI,GAAKwC,EAAM+Q,EACjBvL,EAAMhI,EAAI,GAAKwC,EAAMgR,EACrBxL,EAAMhI,EAAI,GAAKwC,EAAMkR,IAGtB,YAAA+D,iBAAA,SAAiB1V,EAAc8/D,GAK9B,OADcn8D,KAAKsL,UAAUjJ,aAAahG,GAAMiG,MAClCtC,KAAKw7D,QAAUW,GAE/B,EA1MA,CAA+B,EAAA/d,YAAlB,EAAAluC,a,8ECrCb,iBACC,WAAsBsrD,GAAA,KAAAA,SAIvB,OAHC,sBAAI,oBAAK,C,IAAT,WACC,OAAOx7D,KAAKw7D,Q,gCAEd,EALA,GAAa,EAAApd,c,yFCSb,aAmBC,WAAYpgD,QAAA,IAAAA,MAAA,IAbJ,KAAAo+D,aAAuB,EAGvB,KAAAC,OAAiB,EAGjB,KAAAC,qBAA+B,EAK/B,KAAAC,SAAgC,KAGvCv8D,KAAKw8D,oBAAsBx+D,EAAQy+D,oBAAsB,GACzDz8D,KAAK08D,yBAA2B1+D,EAAQ2+D,yBAA2B,IAqFrE,OAlFO,YAAAC,iBAAN,SAAuBltD,EAAemtD,G,oGAMrC,GALA78D,KAAKq8D,OAAS3sD,EACd1P,KAAKs8D,qBAAuB,EAC5Bt8D,KAAK88D,uBAAyBD,EAC9B78D,KAAK+8D,uBAAyB/8D,KAAKg9D,gBAAgB3/D,KAAK2C,MAEpDA,KAAKu8D,SACR,KAAM,sCAEP,MAAO,CAAP,EAAO,IAAIv6C,SAAQ,SAACC,EAASC,GAC5B,EAAKq6C,SAAWt6C,EAChB,EAAK+6C,6BAGP,YAAAA,gBAAA,WACC,IAAMC,EAAazE,YAAYC,MAE/B,GAAIz4D,KAAK88D,wBAA0B98D,KAAK+8D,uBACvC,KAAO/8D,KAAKs8D,qBAAuBt8D,KAAKq8D,QAKvC,GAJAr8D,KAAK88D,uBAAuB98D,KAAKs8D,sBAEjCt8D,KAAKs8D,uBAEDt8D,KAAKs8D,qBAAuBt8D,KAAK08D,0BAA4B,GAC5DlE,YAAYC,MAAQwE,EAAaj9D,KAAKw8D,oBAAqB,CAC9DvsC,WAAWjwB,KAAK+8D,uBAAwB,GACxC,MAMA/8D,KAAKs8D,sBAAwBt8D,KAAKq8D,QACjCr8D,KAAKu8D,UACRv8D,KAAKu8D,YAUF,YAAAW,iBAAN,SAAuB56D,EAAcu6D,G,oGAMpC,GALA78D,KAAKm9D,OAAS76D,EACdtC,KAAKo8D,aAAe,EACpBp8D,KAAKo9D,uBAAyBP,EAC9B78D,KAAKq9D,uBAAyBr9D,KAAKs9D,gBAAgBjgE,KAAK2C,MAEpDA,KAAKu8D,SACR,KAAM,sCAEP,MAAO,CAAP,EAAO,IAAIv6C,SAAQ,SAACC,EAASC,GAC5B,EAAKq6C,SAAWt6C,EAChB,EAAKq7C,6BAGP,YAAAA,gBAAA,WACC,IAAML,EAAazE,YAAYC,MAE/B,GAAIz4D,KAAKo9D,wBAA0Bp9D,KAAKq9D,wBAA0Br9D,KAAKm9D,OACtE,KAAQn9D,KAAKu9D,uBAAyBv9D,KAAKm9D,OAAOn9D,KAAKo8D,eAKtD,GAJAp8D,KAAKo9D,uBAAuBp9D,KAAKu9D,uBAAwBv9D,KAAKo8D,cAE9Dp8D,KAAKo8D,eAEDp8D,KAAKo8D,aAAep8D,KAAK08D,0BAA4B,GACpDlE,YAAYC,MAAQwE,EAAaj9D,KAAKw8D,oBAAqB,CAC9DvsC,WAAWjwB,KAAKq9D,uBAAwB,GACxC,WAMgCh0D,IAAhCrJ,KAAKu9D,wBACJv9D,KAAKu8D,UACRv8D,KAAKu8D,YAIT,EA1GA,GAAa,EAAAiB,gB,oFCTb,YACA,OACA,QACA,QAEA,2BAyDA,OAxDQ,EAAA3qC,UAAP,SACC68B,EACA+N,EACAC,QAAA,IAAAA,MAAA,KAMA,IAJA,IAAMC,EACL,EAAAv4C,SAASC,mBAAmBq4C,GAAaD,EAEpC5qC,EAAY,GACTv4B,EAAI,EAAGA,EAAImjE,EAAgBnjE,IAAK,CACxC,IAAMsjE,EAAeD,EAAqBrjE,EACpCuT,EAAI6hD,EAAS1mD,KAAK8lB,IAAI8uC,GACtB9vD,EAAI4hD,EAAS1mD,KAAKolB,IAAIwvC,GAE5B/qC,EAAU/3B,KAAK,IAAI,EAAAg2B,QAAQjjB,EAAGC,IAG/B,OAAO+kB,GAGD,EAAA11B,OAAP,SACCuyD,EACA+N,EACAC,QAAA,IAAAA,MAAA,KAOA,IALA,IAIIG,EAJEC,EAAe99D,KAAK6yB,UAAU68B,EAAQ+N,EAAgBC,GAEtD7qC,EAAY,GACZjvB,EAAU,GAEPtJ,EAAI,EAAGA,EAAIwjE,EAAatjE,OAAQF,IACxCujE,EAAcC,EAAaxjE,GAE3Bu4B,EAAU/3B,KAAK+iE,EAAYhwD,GAC3BglB,EAAU/3B,KAAK+iE,EAAY/vD,GAC3B+kB,EAAU/3B,KAAK,GAEXR,EAAI,IACPsJ,EAAQ9I,KAAKR,EAAI,GACjBsJ,EAAQ9I,KAAKR,IAKfsJ,EAAQ9I,KAAK2iE,EAAiB,GAC9B75D,EAAQ9I,KAAK,GAEb,IAAMyG,EAAW,IAAI,EAAA8O,eAOrB,OANA9O,EAASgM,aACR,WACA,IAAI,EAAAc,uBAAuBwkB,EAAW,IAEvCtxB,EAASgB,SAASqB,GAEXrC,GAET,EAzDA,GAAa,EAAAw8D,0B,yFCJb,2BACA,4BACA,2BACA,2BACA,SACA,QAEM1xC,EAAQ,CAAChc,eADf,MAC6B,eAAEhC,uBAAsB,yBAAE7H,OAAM,UAG7D,4BACA,QACA,QACA,QACA,SACA,SAaA,aAKC,WAAYxI,QAAA,IAAAA,MAAA,IAHZ,KAAAggE,yBAA0D,GAClD,KAAAh+C,SAAkC,GAGzChgB,KAAKggB,SAASi+C,iBAAmBjgE,EAAQigE,iBACzCj+D,KAAKggB,SAASk+C,aAAelgE,EAAQkgE,aACrCl+D,KAAKggB,SAASm+C,WAAangE,EAAQmgE,aAAc,EACjDn+D,KAAKggB,SAASo+C,mBAAqBpgE,EAAQogE,mBA4J7C,OAxJC,YAAAC,KAAA,SACCt9B,EACAu9B,EACAC,EACAC,GAJD,WAWC,UACE9hE,IAAIqkC,GACJ3Q,MAAK,SAACquC,GAGN,EAAKtpC,MAAQspC,EAASzkE,KACgB,MAAlC,EAAKgmB,SAASi+C,kBAA8D,IAAlC,EAAKj+C,SAASi+C,mBAC3D,EAAK9oC,MAAQ,EAAKupC,kBAAkB,EAAKvpC,MAAO,EAAKnV,SAASi+C,iBAAiB90D,MAAM,OAEtF,IAAM5L,EAAS,EAAKiE,gBACpB88D,EAAiB/gE,MAEjBohE,OAAM,SAACrhD,GACPla,QAAQC,IAAI,QAASia,GACrBkhD,EAAelhD,OAIlB,YAAAohD,kBAAA,SAAkBE,EAAWC,GAC5B,GAAuB,GAAnBA,EAASrkE,OACZ,OAAOokE,EAEP,IAAME,EAAeD,EAAS5jE,QAC9B,OAAI6jE,EACI9+D,KAAK0+D,kBAAkBE,EAAKE,GAAeD,GAG7C,IAGR,YAAAE,SAAA,SAASH,GACR,OAAQ5+D,KAAKm1B,MAAQypC,GAGtB,YAAAp9D,cAAA,WACC,IAAMD,EAAW,IAAI8qB,EAAMhc,eACrB2uD,EAAW,IAAI,EAAAhzD,aAAazK,GAElC,GAAkB,MAAdvB,KAAKm1B,MAAe,CACvB,IAAMxxB,EAAe3D,KAAKm1B,MAAM36B,OAChCwkE,EAAS1wD,wBAAwB3K,GAEjC3D,KAAKi/D,mBASL,IAHA,IAAMC,EAA2B,EAAAh1D,WAAWC,aAAanK,KAAKggB,SAASo+C,oBAAsB,IAGrE,MAAA3jE,OAAO6R,KAAKtM,KAAKg+D,0BAAjB,eAA4C,CAA/D,IAAIhxD,EAAW,KACfmyD,EAAgB,UAAen/D,KAAKo/D,2BAA2BpyD,IAE7DhT,EAAOgG,KAAKg+D,yBAAyBhxD,GACrCxH,EAAOxL,EAAKwL,OAElB,GAAIxL,EAAK8D,SAAW,EAAA0E,aAAayD,YAAYnH,OAK5C,GACCkB,KAAKggB,SAASm+C,YACd,EAAAj0D,WAAWH,iBAAiBiD,EAAakyD,GACxC,CACD,IAAMG,EAAoCF,EAAc90D,KAAI,SAAC0zB,GAC5D,OAAI,UAAgBA,GACZ+mB,WAAW/mB,IAAM,EAEjBA,KAGTx8B,EAASgM,aACRP,EACA,IAAIqf,EAAMhe,uBAAuBgxD,EAAyB75D,QAErD,CACN,IAAM85D,EAAa,EAAA9yD,cAAc2kB,wBAAwBguC,GACzDH,EAAS1xD,sBAAsBN,EAAasyD,EAAmB,OAAGA,EAAoB,aAEjF,CACAD,EAA0BF,EAChC59D,EAASgM,aAAaP,EAAa,IAAIqf,EAAMhe,uBAAuBgxD,EAAyB75D,MAIhG,OAAO,IAAI6mB,EAAM7lB,OAAOjF,EAAU,EAAAiB,aAAaK,UAAUwpB,EAAM7lB,OAAOnK,QAG/D,YAAA4iE,iBAAR,WACC,IAAIM,EAEEv1D,EAAQ,EAAAE,WAAWC,aAAanK,KAAKggB,SAASk+C,cAAgB,IAEpE,GAAIl+D,KAAKm1B,OAC0B,OAA7BoqC,EAAWv/D,KAAKm1B,MAAM,IAC1B,IAAwB,UAAA16B,OAAO6R,KAAKizD,GAAZ,eAAuB,CAA1C,IAAIvyD,EAAW,KACb4D,EAAe2uD,EAASvyD,GAE9B,GAAIhN,KAAKw/D,sBAAsB5uD,GAC9B,IAAgB,UAAAnW,OAAO6R,KAAKsE,GAAZ,eAA2B,CAAtC,IACE6uD,EAAmB,CAACzyD,EADf,MACiCnD,KAvIrB,KAwIjB61D,EAAoB9uD,EAAa5D,GAElC,EAAA9C,WAAWH,iBAAiB01D,EAAkBz1D,KAClDhK,KAAKg+D,yBAAyByB,GAAoB,EAAAE,kBAAkB1lC,WACnEylC,SAKE,EAAAx1D,WAAWH,iBAAiBiD,EAAahD,KAC7ChK,KAAKg+D,yBAAyBhxD,GAAe,EAAA2yD,kBAAkB1lC,WAAWrpB,MAQxE,YAAAwuD,2BAAR,SAAmCpyD,GAAnC,WACC,OAAIhN,KAAKm1B,MACDn1B,KAAKm1B,MAAM9qB,KAAI,SAACu1D,GACtB,IAAM33B,EAASj7B,EAAY7D,MA7JD,KA6J8B,GAClDrM,EAAQ8iE,EAAa33B,GAC3B,OAAI,EAAKu3B,sBAAsB1iE,GAEvBA,EADkBkQ,EAAYnF,UAAUogC,EAAOztC,OAAS,KAC7B,EAE3BsC,GAAS,KAIX,IAIT,YAAA0iE,sBAAA,SAAsB1iE,GACrB,OAAO,UAAgBA,KAAW,UAAeA,IAEnD,EArKA,GAAa,EAAA+iE,kB,6BC7Bb,uFASIC,EAAc,SAAWC,GAE5B,IAAOnlE,KAAMoF,KAAM+/D,GAEnB//D,KAAKggE,YAAc,GACnBhgE,KAAKigE,cAAgB,GACrBjgE,KAAKkgE,cAAgB,KACrBlgE,KAAKmgE,eAAiB,KAEtBngE,KAAKogE,YAAc,EACnBpgE,KAAKqgE,WAAa,GAClBrgE,KAAKsgE,iBAAmB,EACxBtgE,KAAKugE,gBAAkB,GAEvBvgE,KAAKwgE,oBAAsB,CAC1B/wD,SAAU,WACV6uC,OAAQ,SACR15C,MAAO,QACPqpB,GAAI,aAELjuB,KAAKygE,sBAAwB,CAC5BhxD,SAAU,eACV6uC,OAAQ,eACR15C,MAAO,eACPqpB,GAAI,iBAKN6xC,EAAYplE,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEzE0U,YAAa0wD,EAEbY,eAAgB,SAAWtpD,GAI1B,OAFApX,KAAKggE,YAAc5oD,EAEZpX,MAIR2gE,iBAAkB,SAAWC,GAI5B,OAFA5gE,KAAKigE,cAAgBW,EAEd5gE,MAIR6gE,eAAgB,SAAWT,GAI1B,OAFApgE,KAAKogE,YAAcA,EAEZpgE,MAKR8gE,aAAc,WAEb19D,QAAQmT,KAAM,oEAKfwqD,YAAa,WAEZ39D,QAAQmT,KAAM,mEAKfyqD,sBAAuB,WAEtB59D,QAAQmT,KAAM,6EAIf8nD,KAAM,SAAWt9B,EAAKkgC,EAAQC,EAAYC,GAEzC,IAAIC,EAAS,IAAI,IAAYphE,KAAK+/D,SAElCqB,EAAOC,QAASrhE,KAAKoX,MACrBgqD,EAAOE,gBAAiB,eAEE,oBAArBthE,KAAKuhE,aAETH,EAAOI,oBAAoB,GAI5BJ,EAAO/C,KAAMt9B,EAAO4iB,IAEnB,IAAI8d,EAAa,CAChBC,aAAc1hE,KAAKwgE,oBACnBmB,eAAgB3hE,KAAKygE,sBACrBmB,cAAc,GAGf5hE,KAAK6hE,eAAgBle,EAAQ8d,GAC3BrxC,KAAM6wC,GACNtC,MAAOwC,IAEPD,EAAYC,IAKhBW,gBAAiB,SAAWne,EAAQ7uC,EAAU4sD,EAAcC,GAE3D,IAAIF,EAAa,CAChBC,aAAcA,GAAgB1hE,KAAKwgE,oBACnCmB,eAAgBA,GAAkB3hE,KAAKygE,sBACvCmB,eAAiBF,GAGlB1hE,KAAK6hE,eAAgBle,EAAQ8d,GAAarxC,KAAMtb,IAIjD+sD,eAAgB,SAAWle,EAAQ8d,GAKlC,IAAM,IAAItyD,KAAasyD,EAAWE,eAAiB,CAElD,IAAI7jE,EAAO2jE,EAAWE,eAAgBxyD,QAEN9F,IAA3BvL,EAAKskD,oBAETqf,EAAWE,eAAgBxyD,GAAcrR,EAAKzB,MAQhD,IA+BI0lE,EA/BAC,EAAUlmC,KAAKC,UAAW0lC,GAI9B,GAAK3B,EAAYmC,UAAUr/B,IAAK+gB,GAAW,CAE1C,IAAIue,EAAapC,EAAYmC,UAAUvlE,IAAKinD,GAE5C,GAAKue,EAAW9kE,MAAQ4kE,EAEvB,OAAOE,EAAWC,QAEZ,GAA2B,IAAtBxe,EAAOye,WAMlB,MAAM,IAAI72B,MAET,iHAYH,IAAI82B,EAASriE,KAAKsgE,mBACdgC,EAAW3e,EAAOye,WAIlBG,EAAkBviE,KAAKwiE,WAAYH,EAAQC,GAC7ClyC,KAAQqyC,IAERV,EAASU,EAEF,IAAIzgD,QAAS,CAAEC,EAASC,KAE9B6/C,EAAOhyC,WAAYsyC,GAAW,CAAEpgD,UAASC,UAEzC6/C,EAAOW,YAAa,CAAE5kE,KAAM,SAAU2M,GAAI43D,EAAQZ,aAAY9d,UAAU,CAAEA,QAO3EvzB,KAAQtuB,GAAa9B,KAAK2iE,gBAAiB7gE,EAAQP,WAwBrD,OArBAghE,EACEK,QAAS,KAEJb,GAAUM,GAEdriE,KAAK6iE,aAAcd,EAAQM,KAS9BvC,EAAYmC,UAAU/hE,IAAKyjD,EAAQ,CAElCvmD,IAAK4kE,EACLG,QAASI,IAIHA,GAIRI,gBAAiB,SAAWG,GAE3B,IAAIvhE,EAAW,IAAI,iBAEduhE,EAAa3gE,OAEjBZ,EAASgB,SAAU,IAAI,kBAAiBugE,EAAa3gE,MAAMG,MAAO,IAInE,IAAM,IAAIhI,EAAI,EAAGA,EAAIwoE,EAAal2D,WAAWpS,OAAQF,IAAO,CAE3D,IAAI6U,EAAY2zD,EAAal2D,WAAYtS,GACrC+B,EAAO8S,EAAU9S,KACjBiG,EAAQ6M,EAAU7M,MAClB2K,EAAWkC,EAAUlC,SAEzB1L,EAASgM,aAAclR,EAAM,IAAI,kBAAiBiG,EAAO2K,IAI1D,OAAO1L,GAIRwhE,aAAc,SAAWhiC,EAAKiiC,GAE7B,IAAI5B,EAAS,IAAI,IAAYphE,KAAK+/D,SAIlC,OAHAqB,EAAOC,QAASrhE,KAAKggE,aACrBoB,EAAOE,gBAAiB0B,GAEjB,IAAIhhD,QAAS,CAAEC,EAASC,KAE9Bk/C,EAAO/C,KAAMt9B,EAAK9e,OAAS5Y,EAAW6Y,MAMxC+gD,QAAS,WAIR,OAFAjjE,KAAKkjE,eAEEljE,MAIRkjE,aAAc,WAEb,GAAKljE,KAAKmgE,eAAiB,OAAOngE,KAAKmgE,eAEvC,IAAIgD,EAA+B,iBAAhBC,aAAwD,OAA5BpjE,KAAKigE,cAAcniE,KAC9DulE,EAAmB,GAsCvB,OApCKF,EAEJE,EAAiBvoE,KAAMkF,KAAK+iE,aAAc,mBAAoB,UAI9DM,EAAiBvoE,KAAMkF,KAAK+iE,aAAc,wBAAyB,SACnEM,EAAiBvoE,KAAMkF,KAAK+iE,aAAc,qBAAsB,iBAIjE/iE,KAAKmgE,eAAiBn+C,QAAQ0S,IAAK2uC,GACjCjzC,KAAQkzC,IAER,IAAIC,EAAYD,EAAW,GAEpBH,IAENnjE,KAAKigE,cAAcuD,WAAaF,EAAW,IAI5C,IAAIG,EAAK3D,EAAY4D,YAAYC,WAE7BhsB,EAAO,CACV,sBACA4rB,EACA,GACA,eACAE,EAAG57D,UAAW47D,EAAGn/D,QAAS,KAAQ,EAAGm/D,EAAGG,YAAa,OACpD/5D,KAAM,MAER7J,KAAKugE,gBAAkBsD,IAAIC,gBAAiB,IAAIC,KAAM,CAAEpsB,OAInD33C,KAAKmgE,gBAIbqC,WAAY,SAAWH,EAAQC,GAE9B,OAAOtiE,KAAKkjE,eAAe9yC,KAAM,KAI/B,IAyCG2xC,EA3CC/hE,KAAKqgE,WAAW7lE,OAASwF,KAAKogE,cAE9B2B,EAAS,IAAIiC,OAAQhkE,KAAKugE,kBAEvBxwC,WAAa,GACpBgyC,EAAOkC,WAAa,GACpBlC,EAAOmC,UAAY,EAEnBnC,EAAOW,YAAa,CAAE5kE,KAAM,OAAQmiE,cAAejgE,KAAKigE,gBAExD8B,EAAOoC,UAAY,SAAW75D,GAE7B,IAAIxI,EAAUwI,EAAEtQ,KAEhB,OAAS8H,EAAQhE,MAEhB,IAAK,SACJikE,EAAOhyC,WAAYjuB,EAAQ2I,IAAKwX,QAASngB,GACzC,MAED,IAAK,QACJigE,EAAOhyC,WAAYjuB,EAAQ2I,IAAKyX,OAAQpgB,GACxC,MAED,QACCsB,QAAQka,MAAO,2CAA6Cxb,EAAQhE,KAAO,OAM9EkC,KAAKqgE,WAAWvlE,KAAMinE,IAItB/hE,KAAKqgE,WAAWr1D,MAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAEi5D,UAAYh5D,EAAEg5D,WAAc,EAAI,KAS3C,OAHInC,EAAS/hE,KAAKqgE,WAAYrgE,KAAKqgE,WAAW7lE,OAAS,IAChDypE,WAAY5B,GAAWC,EAC9BP,EAAOmC,WAAa5B,EACbP,KAMTc,aAAc,SAAWd,EAAQM,GAEhCN,EAAOmC,WAAanC,EAAOkC,WAAY5B,UAChCN,EAAOhyC,WAAYsyC,UACnBN,EAAOkC,WAAY5B,IAI3B+B,MAAO,WAENhhE,QAAQC,IAAK,cAAerD,KAAKqgE,WAAWh2D,IAAO03D,GAAYA,EAAOmC,aAIvE1mD,QAAS,WAER,IAAM,IAAIljB,EAAI,EAAGA,EAAI0F,KAAKqgE,WAAW7lE,SAAWF,EAE/C0F,KAAKqgE,WAAY/lE,GAAI+pE,YAMtB,OAFArkE,KAAKqgE,WAAW7lE,OAAS,EAElBwF,QAQT8/D,EAAY4D,YAAc,WAEzB,IAAIzD,EACAE,EAkKJ,SAASmE,EAAiBC,EAAOC,EAASC,EAAeC,EAAeC,EAAex1D,GAEtF,IAGIy1D,EAEAtiE,EALAuiE,EAAgB11D,EAAU21D,iBAE1BC,EADYN,EAAcO,aACFH,EAK5B,OAASF,GAER,KAAK5xC,aACJ6xC,EAAa,IAAIL,EAAMU,kBACvBT,EAAQU,8BAA+BT,EAAet1D,EAAWy1D,GACjEtiE,EAAQ,IAAIywB,aAAcgyC,GAC1B,MAED,KAAKI,UACJP,EAAa,IAAIL,EAAMa,eACvBZ,EAAQa,6BAA8BZ,EAAet1D,EAAWy1D,GAChEtiE,EAAQ,IAAI6iE,UAAWJ,GACvB,MAED,KAAKO,WACJV,EAAa,IAAIL,EAAMgB,gBACvBf,EAAQgB,8BAA+Bf,EAAet1D,EAAWy1D,GACjEtiE,EAAQ,IAAIgjE,WAAYP,GACxB,MAED,KAAKU,WACJb,EAAa,IAAIL,EAAMmB,gBACvBlB,EAAQmB,8BAA+BlB,EAAet1D,EAAWy1D,GACjEtiE,EAAQ,IAAImjE,WAAYV,GACxB,MAED,KAAK3yC,WACJwyC,EAAa,IAAIL,EAAMqB,gBACvBpB,EAAQqB,8BAA+BpB,EAAet1D,EAAWy1D,GACjEtiE,EAAQ,IAAI8vB,WAAY2yC,GACxB,MAED,KAAKvmC,YACJomC,EAAa,IAAIL,EAAMuB,iBACvBtB,EAAQuB,+BAAgCtB,EAAet1D,EAAWy1D,GAClEtiE,EAAQ,IAAIk8B,YAAaumC,GACzB,MAED,KAAKiB,YACJpB,EAAa,IAAIL,EAAM0B,iBACvBzB,EAAQ0B,+BAAgCzB,EAAet1D,EAAWy1D,GAClEtiE,EAAQ,IAAI0jE,YAAajB,GACzB,MAED,QACC,MAAM,IAAIx5B,MAAO,iDAInB,IAAM,IAAIjxC,EAAI,EAAGA,EAAIyqE,EAAWzqE,IAE/BgI,EAAOhI,GAAMsqE,EAAWuB,SAAU7rE,GAMnC,OAFAiqE,EAAM6B,QAASxB,GAER,CACNvoE,KAAMqoE,EACNpiE,MAAOA,EACP2K,SAAU43D,GArOZV,UAAY,SAAW75D,GAEtB,IAAIxI,EAAUwI,EAAEtQ,KAEhB,OAAS8H,EAAQhE,MAEhB,IAAK,OACJmiE,EAAgBn+D,EAAQm+D,cACxBE,EAAiB,IAAIn+C,SAAS,SAAWC,GAExCg+C,EAAcoG,eAAiB,SAAW9B,GAGzCtiD,EAAS,CAAEsiD,MAAOA,KAInB+B,mBAAoBrG,MAGrB,MAED,IAAK,SACJ,IAAItc,EAAS7hD,EAAQ6hD,OACjB8d,EAAa3/D,EAAQ2/D,WACzBtB,EAAe/vC,KAAQp0B,IAEtB,IAAIuoE,EAAQvoE,EAAOuoE,MACfC,EAAU,IAAID,EAAMgC,QACpBC,EAAgB,IAAIjC,EAAMkC,cAC9BD,EAAcE,KAAM,IAAIvB,UAAWxhB,GAAUA,EAAOye,YAEpD,IAEC,IAAI7gE,EA4BT,SAAyBgjE,EAAOC,EAASgC,EAAe/E,GAEvD,IAGIgD,EACAkC,EAJAjF,EAAeD,EAAWC,aAC1BC,EAAiBF,EAAWE,eAK5BiF,EAAepC,EAAQqC,uBAAwBL,GAEnD,GAAKI,IAAiBrC,EAAMuC,gBAE3BrC,EAAgB,IAAIF,EAAMh+D,KAC1BogE,EAAiBnC,EAAQuC,mBAAoBP,EAAe/B,OAEtD,IAAKmC,IAAiBrC,EAAMyC,YAOlC,MAAM,IAAIz7B,MAAO,gDALjBk5B,EAAgB,IAAIF,EAAM0C,WAC1BN,EAAiBnC,EAAQ0C,yBAA0BV,EAAe/B,GAQnE,IAAOkC,EAAeQ,MAA8B,IAAtB1C,EAAc2C,IAE3C,MAAM,IAAI77B,MAAO,uCAAyCo7B,EAAeU,aAI1E,IAAI9lE,EAAW,CAAEY,MAAO,KAAMyK,WAAY,IAG1C,IAAM,IAAI83D,KAAiBhD,EAAe,CAEzC,IAEIvyD,EACAm4D,EAHA3C,EAAgB4C,KAAM5F,EAAgB+C,IAS1C,GAAKjD,EAAWG,aAEf0F,EAAc5F,EAAcgD,GAC5Bv1D,EAAYq1D,EAAQgD,uBAAwB/C,EAAe6C,OAErD,CAIN,IAAuB,KAFvBA,EAAc9C,EAAQiD,eAAgBhD,EAAeF,EAAO7C,EAAcgD,MAE/C,SAE3Bv1D,EAAYq1D,EAAQkD,aAAcjD,EAAe6C,GAIlD/lE,EAASqL,WAAW9R,KAAMwpE,EAAiBC,EAAOC,EAASC,EAAeC,EAAeC,EAAex1D,IAKzG,GAAKy3D,IAAiBrC,EAAMuC,gBAAkB,CAQ7C,IALA,IAAIa,EAAWlD,EAAcmD,YAEzBzlE,EAAQ,IAAI6jE,YADY,EAAX2B,GAEbE,EAAa,IAAItD,EAAMmB,gBAEjBprE,EAAI,EAAGA,EAAIqtE,IAAartE,EAAI,CAErCkqE,EAAQsD,gBAAiBrD,EAAenqE,EAAGutE,GAE3C,IAAM,IAAIrsE,EAAI,EAAGA,EAAI,IAAMA,EAE1B2G,EAAW,EAAJ7H,EAAQkB,GAAMqsE,EAAW1B,SAAU3qE,GAM5C+F,EAASY,MAAQ,CAAEG,MAAOH,EAAO8K,SAAU,GAE3Cs3D,EAAM6B,QAASyB,GAMhB,OAFAtD,EAAM6B,QAAS3B,GAERljE,EA1HYsgE,CAAgB0C,EAAOC,EAASgC,EAAe/E,GAE1DsG,EAAUxmE,EAASqL,WAAWvC,IAAO83C,GAAUA,EAAK7/C,MAAMqhD,QAEzDpiD,EAASY,OAAQ4lE,EAAQjtE,KAAMyG,EAASY,MAAMG,MAAMqhD,QAEzD4jB,KAAK7E,YAAa,CAAE5kE,KAAM,SAAU2M,GAAI3I,EAAQ2I,GAAIlJ,YAAYwmE,GAE/D,MAAQzqD,GAETla,QAAQka,MAAOA,GAEfiqD,KAAK7E,YAAa,CAAE5kE,KAAM,QAAS2M,GAAI3I,EAAQ2I,GAAI6S,MAAOA,EAAMxb,UAE/D,QAEDyiE,EAAM6B,QAASI,GACfjC,EAAM6B,QAAS5B,SAyLrB1E,EAAYmC,UAAY,IAAI+F,QAK5BlI,EAAYY,eAAiB,WAE5Bt9D,QAAQmT,KAAM,4FAKfupD,EAAYa,iBAAmB,WAE9Bv9D,QAAQmT,KAAM,8FAKfupD,EAAYmI,qBAAuB,WAElC7kE,QAAQmT,KAAM,kGAKfupD,EAAYoI,iBAAmB,WAE9B9kE,QAAQmT,KAAM,+F,yFCxqBf,QAEA,QAEA,2BACA,4BACA,4BAEA,aACC,WACShV,EACA4mE,EACAC,GAFA,KAAA7mE,WACA,KAAA4mE,YACA,KAAAC,YAqEV,OAlEC,YAAAC,QAAA,sBACOC,EAAoB,IAAI,EAAAt8D,aAAahM,KAAKooE,WAC1CG,EAAoB,IAAI,EAAAv8D,aAAahM,KAAKmoE,WAC1CK,EAAYF,EAAkBj2D,WAC9Bo2D,EAAYF,EAAkBl2D,WAEpC,GAAyB,IAArBm2D,EAAUhuE,QAAqC,IAArBiuE,EAAUjuE,OAAxC,CAIA,IAAMkuE,EACLF,EAAUhuE,OAASiuE,EAAUjuE,OAC1B,CAAC8tE,EAAmBC,GACpB,CAACA,EAAmBD,GAElBK,EAAoBD,EAA6B,GACjDE,EAAmBF,EAA6B,GAEhDG,EAAoBF,EAAkBt2D,WACtCy2D,EAAmBF,EAAiBv2D,WAEpC02D,EAAkBJ,EAAkBh5D,SACpCq5D,EAAiBJ,EAAiBj5D,SAClCs5D,EAAwBF,EAAgBvuE,OAExC0uE,EAAa,UAAcH,EAAiBC,GAG5CG,EAA2B,GACjCN,EAAkBjnE,SAAQ,SAACwnE,EAAS9uE,GACnC,IAAM+uE,EAAkBP,EAAiBxuE,GAEzC6uE,EAAeruE,KAAKsuE,EAAQ,IAC5BD,EAAeruE,KAAKsuE,EAAQ,IAC5BD,EAAeruE,KAAKuuE,EAAgB,GAAKJ,GAEzCE,EAAeruE,KAAKsuE,EAAQ,IAC5BD,EAAeruE,KAAKuuE,EAAgB,GAAKJ,GACzCE,EAAeruE,KAAKuuE,EAAgB,GAAKJ,MAGb,UAC5BN,EAAkBx+D,eAClBy+D,EAAiBz+D,gBAGGvI,SAAQ,SAACoL,GAC7B,IAAME,EAAcy7D,EAAkBz7D,YAAYF,GAC9CmyD,EAAgB+J,EAAW7+D,KAAI,SAAC4F,GACnC,OAAAA,EAAMW,aAAa5D,MAEhBE,EAAc,IACjBiyD,EAAgB,UACfA,EAAc90D,KAAI,SAAC0zB,GAAM,OAAAA,EAAEzS,eAG7B,EAAK/pB,SAASgM,aACbP,EACA,IAAI,EAAAqB,uBAAuB8wD,EAAejyD,OAK5ClN,KAAKuB,SAASgB,SAAS4mE,GACvBnpE,KAAKuB,SAAS4K,yBAEhB,EAzEA,GAAa,EAAAm9D,6B,8ECLb,aAIA,SACA,SACA,SACA,SAEA,SACA,SACA,SAEA,2BAoBA,OAnBQ,EAAAz8B,cAAP,SAAqBrpC,GAIpB,OAAO,IAAI,EAAA+lE,iBAAiB/lE,IAGtB,EAAAupC,eAAP,SAAsB12B,GACrB,OAAIA,aAAiB,EAAA2e,mBACb,IAAI,EAAAw0C,0BAA0BnzD,GAElCA,aAAiB,EAAA+2B,YACb,IAAI,EAAAq8B,wBAAwBpzD,GAEhCA,aAAiB,EAAA1X,UACb,IAAI,EAAA+qE,sBAAsBrzD,GAE3B,IAAI,EAAA89B,kBAAkB99B,IAE/B,EApBA,GAAa,EAAAszD,wB,qHChBb,2BAGA,SACA,QACA,QAIA,2B,+CA8DA,OA9DkC,iBAC1B,EAAA7rE,KAAP,WACC,OAAO,EAAAK,UAAUK,SAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAOwB,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKshB,W,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOthB,KAAKlD,O,gCAGN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SAAwBL,EAA6CC,GACpE,OAAOD,GAAQC,GAoBT,EAAAJ,QAAP,SAAeC,GACd,GAAI,UAAgBA,GACnB,OAAO3X,KAAKykB,MAAM9M,GAElB,GAAI,EAAAzW,WAAW5C,UAAUqZ,GAAU,CAClC,IAAMkkC,EAASn9C,SAASiZ,GACxB,GAAI,UAAgBkkC,GACnB,OAAOA,EAGT,OAAO,MAGT,YAAAnkC,QAAA,SAAQC,GACP,IAAMtlB,EAAS6tD,EAAaxoC,QAAQC,GACpC,OAAItlB,EACI2E,KAAKhC,QAAQ+mD,gBAAgB1pD,GAE7BA,GAGV,EA9DA,CAAkC,EAAAgwC,mBAArB,EAAA6d,gB,8ECTb,IAqDY51B,EArDZ,QAWA,aACC,WAAoBooC,EAA+Bj7C,QAA/B,IAAAi7C,MAAA,QAA+B,IAAAj7C,MAAA,GAA/B,KAAAi7C,YAA+B,KAAAj7C,SAuCpD,OArCC,YAAAjE,QAAA,WACC,MAAO,CACN/M,SAAUzP,KAAK07D,UACf5+D,MAAOkD,KAAKygB,SAGd,sBAAI,uBAAQ,C,IAAZ,WACC,OAAOzgB,KAAK07D,W,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAO17D,KAAKygB,Q,gCAEb,YAAAwE,KAAA,SAAKhV,GACJjQ,KAAK07D,UAAYzrD,EAAMR,SACvBzP,KAAKygB,OAASxQ,EAAMnT,OAErB,YAAAgG,MAAA,WACC,IAAMmN,EAAQ,IAAIujB,EAElB,OADAvjB,EAAMgV,KAAKjlB,MACJiQ,GAER,YAAA2hB,SAAA,SAASg4C,GACR,OAAO5pE,KAAK07D,WAAakO,EAAYn6D,UAAYzP,KAAKygB,QAAUmpD,EAAY9sE,OAE7E,YAAA+0B,cAAA,SAAc+sC,GACb,OAAO5+D,KAAK07D,WAAakD,EAAKnvD,UAAYzP,KAAKygB,QAAUm+C,EAAK9hE,OAE/D,YAAA20B,UAAA,SAAUmtC,GACT5+D,KAAK07D,UAAYkD,EAAKnvD,SACtBzP,KAAKygB,OAASm+C,EAAK9hE,OAEb,EAAA+sE,eAAP,SAAsBC,EAAsBC,GAC3C,OAAOD,EAAMr6D,UAAYs6D,EAAMt6D,UAAYq6D,EAAMhtE,OAASitE,EAAMjtE,OAE1D,EAAA20B,UAAP,SAAiBmtC,GAChB,OAAO,IAAIprC,EAAUorC,EAAKnvD,SAAUmvD,EAAK9hE,QAE3C,EAxCA,GAAa,EAAA02B,YA0Cb,SAAYF,GACX,kBADD,CAAYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KAG7B,iBAGC,WAAoB02C,EAA2Dp6D,QAA3D,IAAAo6D,MAAyB12C,EAAkBC,aAAgB,IAAA3jB,MAAA,IAA3D,KAAAo6D,iBAA2D,KAAAp6D,UAC9E5P,KAAK2mD,MAAQ,EAAAsjB,MAAMC,eA+GrB,OA5GC,sBAAI,mBAAI,C,IAAR,WACC,OAAOlqE,KAAK2mD,O,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAO3mD,KAAKgqE,gB,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAOhqE,KAAK4P,S,gCAEN,EAAA6hB,UAAP,SAAiBmtC,GAEhB,IADA,IAAMjvD,EAAS,GACQ,MAAAivD,EAAKjvD,OAAL,eAAa,CAA/B,IAAIw6D,EAAU,KAClBx6D,EAAO7U,KAAK04B,EAAU/B,UAAU04C,IAEjC,OAAO,IAAI34C,EAAUotC,EAAKwL,cAAez6D,IAE1C,YAAA6M,QAAA,WACC,MAAO,CACN4tD,cAAepqE,KAAKgqE,eACpBr6D,OAAQ3P,KAAK4P,QAAQvF,KAAI,SAAC5M,GAAM,OAAAA,EAAE+e,eAGpC,YAAA1Z,MAAA,WACC,IAAMunE,EAAO,IAAI74C,EAEjB,OADA64C,EAAKplD,KAAKjlB,MACHqqE,GAER,YAAAplD,KAAA,SAAKolD,GACJrqE,KAAKgqE,eAAiBK,EAAKD,cAE3B,IADA,IAAIjoE,EAAQ,EACM,MAAAkoE,EAAK16D,OAAL,eAAa,CAA1B,IAAIM,EAAK,KACPq6D,EAAgBtqE,KAAK4P,QAAQzN,GAC/BmoE,EACHA,EAAcrlD,KAAKhV,GAEnBjQ,KAAK4P,QAAQ9U,KAAKmV,EAAMnN,SAEzBX,GAAS,IAIX,YAAAyvB,SAAA,SAAS24C,GACR,GAAIvqE,KAAKgqE,gBAAkBO,EAAiBH,cAC3C,OAAO,EAER,IAAMI,EAAeD,EAAiB56D,OACtC,GAAI3P,KAAK4P,QAAQpV,QAAUgwE,EAAahwE,OACvC,OAAO,EAGR,IADA,IAAI2H,EAAQ,EACM,MAAAnC,KAAK4P,QAAL,eAAc,CAA3B,IAAIK,EAAK,KACP25D,EAAcY,EAAaroE,GACjC,IAAK8N,EAAM2hB,SAASg4C,GACnB,OAAO,EAERznE,GAAS,EAGV,OAAO,GAER,YAAA0vB,cAAA,SAAc+sC,GACb,GAAI5+D,KAAKgqE,gBAAkBpL,EAAKwL,cAC/B,OAAO,EAER,GAAIpqE,KAAK4P,QAAQpV,QAAUokE,EAAKjvD,OAAOnV,OACtC,OAAO,EAGR,IADA,IAAI2H,EAAQ,EACM,MAAAnC,KAAK4P,QAAL,eAAc,CAA3B,IAAIK,EAAK,KACP25D,EAAchL,EAAKjvD,OAAOxN,GAChC,IAAK8N,EAAM4hB,cAAc+3C,GACxB,OAAO,EAERznE,GAAS,EAEV,OAAO,GAED,EAAA2vB,eAAP,SAAsBg4C,EAAsBC,GAC3C,GAAID,EAAMM,eAAiBL,EAAMK,cAChC,OAAO,EAER,GAAIN,EAAMn6D,OAAOnV,QAAUuvE,EAAMp6D,OAAOnV,OACvC,OAAO,EAGR,IADA,IAAI2H,EAAQ,EACO,MAAA2nE,EAAMn6D,OAAN,eAAc,CAA5B,IAAI86D,EAAM,KACRC,EAASX,EAAMp6D,OAAOxN,GAC5B,IAAKqxB,EAAUq2C,eAAeY,EAAQC,GACrC,OAAO,EAERvoE,GAAS,EAEV,OAAO,GAER,YAAAsvB,UAAA,SAAUmtC,GACT5+D,KAAKgqE,eAAiBpL,EAAKwL,cAG3B,IADA,IAAIjoE,EAAQ,EACW,MAAAy8D,EAAKjvD,OAAL,eAAa,CAA/B,IAAIw6D,EAAU,KACZG,EAAgBtqE,KAAK4P,QAAQzN,GAC/BmoE,EACHA,EAAc74C,UAAU04C,GAExBnqE,KAAK4P,QAAQ9U,KAAK04B,EAAU/B,UAAU04C,IAEvChoE,GAAS,IAGZ,EAnHA,GAAa,EAAAqvB,a,8ECxDb,SAAYm5C,GACX,kDACA,sCACA,gDAHD,CAAY,EAAAA,aAAA,EAAAA,WAAU,M,yFCAtB,QAOA,OAGA,SAGA,SACA,SACA,SAGA,SAGA,SACA,SACA,QAGA,QACA,SACA,QACA,SAEA,SAiBMC,EAAmD,IAAItxC,IAAI,CAChE,CAAC,EAAAlQ,WAAWxjB,OAAQ,qBACpB,CAAC,EAAAwjB,WAAW2f,SAAU,uBAEjB8hC,EAAiD,IAAIvxC,IAAI,CAC9D,CAAC,EAAAlQ,WAAWxjB,OAAQ,2BACpB,CAAC,EAAAwjB,WAAW2f,SAAU,mDAEjB+hC,EAAiD,IAAIxxC,IAAI,CAC9D,CAAC,EAAAlQ,WAAWxjB,OAAQ,CAAC,0BAA2B,kCAChD,CAAC,EAAAwjB,WAAW2f,SAAU,MAKvB,cAeC,WAAsBzC,GAAtB,MACC,cAAO,K,OADc,EAAAA,kBAdZ,EAAAykC,iBAA4C,IAAIzxC,IAChD,EAAA0xC,OAAkC,IAAI1xC,IAGtC,EAAAkN,YAAgC,GAChC,EAAAykC,YAAgC,GAMlC,EAAAC,kBAA4B,EAC5B,EAAAC,uBAAiC,E,EAkkB1C,OA/kB2C,iBAmBpC,YAAAC,QAAN,W,0GAWU,YAAAC,iCAAV,SAA2C/iC,G,QAC1C,OAAQA,GACP,KAAK,EAAAlf,WAAWxjB,OACf,OAA4B,QAA5B,EAAO5F,KAAKsrE,wBAAgB,eAAEC,aAC/B,KAAK,EAAAniD,WAAW2f,SACf,OAA4B,QAA5B,EAAO/oC,KAAKsrE,wBAAgB,eAAEE,iBAIjC,sBAAI,8BAAe,C,IAAnB,WACC,OAAOxrE,KAAKsmC,gBAAgBzO,qBAAqBgQ,iB,gCAElD,YAAA4jC,gBAAA,WACC,OAAoE,MAA7DzrE,KAAKsmC,gBAAgBzO,qBAAqBgQ,iBAElD,YAAA6jC,gBAAA,WACC,OAAO1rE,KAAK+qE,kBAGH,YAAAY,iBAAV,aAGU,YAAAC,aAAV,WACC,IAAwB,UAAA5rE,KAAK6rE,aAAL,eAAmB,CAAtC,IAAIvjC,EAAW,KACbwjC,EAAW9rE,KAAKqrE,iCAAiC/iC,GACnDwjC,GACH9rE,KAAK+rE,kBAAkBD,EAAUxjC,KAUpC,YAAA/B,eAAA,SAAeylC,GACdhsE,KAAKwmC,YAAcwlC,GAEpB,sBAAc,+BAAgB,C,IAA9B,a,gCA8FU,YAAAC,eAAV,SAAyBC,GAExB,IADA,IAAMC,EAAeD,EAAoB,EAAAE,cAActpE,MAAMopE,GAAqB,GACzD,MAAAlsE,KAAKu6B,gBAAL,eAAsB,CAA1C,IAAIy7B,EAAY,KACpBmW,EAAanW,EAAalhB,cAAgBkhB,EAAaqW,QAexD,OAZIrsE,KAAKssE,oBACRH,EAAoB,MAAI,CAEvBrvE,MAAOkD,KAAKsmC,gBAAgBnjC,MAAM2qC,QAGhC9tC,KAAKusE,yBACRJ,EAAyB,WAAI,CAC5BrvE,MAAO,IAAI,EAAAg0B,QAAQ,IAAM,OAIpBq7C,GAQR,YAAAK,0BAAA,SAA0BlkC,GAGzB,IADA,IAAM9N,EAAO,GACI,MAAAx6B,KAAKwmC,YAAL,eAAkB,CAA9B,IAAIhjC,EAAI,KACZ,OAAQA,EAAK1F,MACZ,IAAK,SACJ08B,EAAK1/B,KAAK0I,IAiBb,OAAOg3B,GAER,YAAAiyC,0BAAA,SAA0BnkC,GAEzB,IADA,IAAM9N,EAAO,GACI,MAAAx6B,KAAKirE,YAAL,eAAkB,CAA9B,IAAIznE,EAAI,KACZ,OAAQA,EAAK1F,MACZ,KAAK,EAAAy3D,cAAcz3D,OAClB08B,EAAK1/B,KAAK0I,GACV,MAED,KAAK,EAAAu3C,gBAAgBj9C,SAcvB,OAAO08B,GAER,YAAAyO,uBAAA,SAAuBC,EAA6BxQ,KACpD,YAAA2P,sBAAA,SAAsBlB,EAA2BzO,KACjD,YAAAgQ,yBAAA,SACCC,EACAjQ,KAQD,sBAAI,2BAAY,C,IAAhB,WACC,OAAQ14B,KAAKomC,cAAgBpmC,KAAKomC,eAAiB,IAAI,EAAAsmC,YAAY1sE,KAAMA,KAAKsmC,kB,gCAEzE,YAAAqmC,sBAAN,SAA4BX,G,gHAC3B,SAAMhsE,KAAK4sE,aAAaC,iBAAiBb,I,cAAzC,S,YAED,YAAAc,wBAAA,WACC9sE,KAAK4sE,aAAaE,2BAEnB,YAAAC,2BAAA,WACC/sE,KAAK4sE,aAAaG,8BAEnB,YAAAC,sBAAA,WACC,OAAOhtE,KAAK4sE,aAAaryC,iBAE1B,YAAA0yC,cAAA,SAAc3kC,EAAyB4kC,GACtC,OAAOltE,KAAK4sE,aAAaO,MAAM7kC,EAAa4kC,IAE7C,YAAAE,kBAAA,WACC,OAAOptE,KAAK4sE,aAAaS,aAE1B,YAAA9yC,cAAA,WAEC,OADqBv6B,KAAKstE,qBAAuBttE,KAAK4sE,cAClCryC,iBAErB,YAAAkM,wBAAA,SAAwB8mC,GACvBvtE,KAAKstE,oBAAsBC,EACvBvtE,KAAKstE,oBACRttE,KAAK4sE,aAAaG,6BAElB/sE,KAAK4sE,aAAaE,2BASb,EAAAU,kBAAP,SAAyBC,GACxBA,EAAahrD,OAAOpH,UAAU,EAAAld,UAAUa,QAAS,WAAY,CAAC,EAAG,EAAG,GAAI,CAAC0uE,QAAQ,IACjFD,EAAahrD,OAAOpH,UAAU,EAAAld,UAAUa,QAAS,SAAU,CAAC,EAAG,EAAG,GAAI,CAAC0uE,QAAQ,IAC/ED,EAAahrD,OAAOpH,UAAU,EAAAld,UAAUE,MAAO,QAAS,CAAC,EAAG,EAAG,GAAI,CAACqvE,QAAQ,IAC5ED,EAAahrD,OAAOpH,UAAU,EAAAld,UAAUG,MAAO,QAAS,EAAG,CAACovE,QAAQ,IACpED,EAAahrD,OAAOpH,UAAU,EAAAld,UAAUY,QAAS,KAAM,CAAC,EAAG,GAAI,CAAC2uE,QAAQ,KAEzE,YAAAF,kBAAA,SAAkBC,GACjBvjC,EAAsBsjC,kBAAkBC,IAElC,EAAAE,uCAAP,WACC,MAAO,CACN,IAAI,EAAAt4C,0BAA0B,WAAY,EAAA1P,oBAAoBK,MAC9D,IAAI,EAAAqP,0BAA0B,SAAU,EAAA1P,oBAAoBK,MAC5D,IAAI,EAAAqP,0BAA0B,QAAS,EAAA1P,oBAAoBK,MAC3D,IAAI,EAAAqP,0BAA0B,KAAM,EAAA1P,oBAAoBI,MACxD,IAAI,EAAAsP,0BAA0B,eAAgB,EAAA1P,oBAAoBM,MAClE,IAAI,EAAAoP,0BAA0B,aAAc,EAAA1P,oBAAoBI,MAGhE,IAAI,EAAAsP,0BAA0B,QAAS,EAAA1P,oBAAoBrnB,SAG7D,YAAAqvE,uCAAA,WACC,OAAOzjC,EAAsByjC,0CAE9B,YAAArY,mBAAA,SAAmBpsB,GAClBA,EAAa1oC,GAAGC,QAAQi3B,mCAAmC13B,KAAK2tE,2CAEjE,YAAAvzB,wBAAA,WACC,OAAO,GAQR,YAAAwzB,cAAA,WACC5tE,KAAK6tE,wBACL7tE,KAAK8tE,0BACL9tE,KAAK+tE,0BACL/tE,KAAKguE,gCAEN,sBAAI,6BAAc,C,IAAlB,WACC,OAAQhuE,KAAKiuE,gBAAkBjuE,KAAKiuE,iBAAmBjuE,KAAKkuE,yB,gCAE7D,YAAAxnC,mBAAA,SAAmBC,GAClB3mC,KAAKiuE,gBAAkBtnC,GAExB,sBAAI,2BAAY,C,IAAhB,W,MACC,OAA0B,QAAnB,EAAA3mC,KAAK2mC,sBAAc,eAAEt8B,KAAI,SAAC8jE,GAAO,OAAAA,EAAG9xE,YAAW,I,gCAE7C,YAAAwxE,sBAAV,WACC7tE,KAAKiuE,qBAAkB5kE,GAGxB,YAAA6kE,sBAAA,WACC,MAAO,CACN,IAAI,EAAAE,aAAa,EAAAhlD,WAAWxjB,OAAQ,CAAC,WAAY,SAAU,MAAO,IAClE,IAAI,EAAAwoE,aAAa,EAAAhlD,WAAW2f,SAAU,CAAC,QAAS,SAAU,CAAC,EAAA3f,WAAWxjB,WAGxE,YAAA6iC,cAAA,SAAcpsC,G,MACb,OAA0B,QAA1B,EAAO2D,KAAK2mC,sBAAc,eAAEtf,QAAO,SAAC8mD,GACnC,OAAOA,EAAG9xE,QAAUA,KAClB,IAEJ,YAAAwqC,iBAAA,WACC,OAAQ7mC,KAAKquE,kBAAoBruE,KAAKquE,mBAAqBruE,KAAKsuE,2BAEjE,YAAA1nC,qBAAA,SAAqBC,GACpB7mC,KAAKquE,kBAAoBxnC,GAE1B,YAAAU,gBAAA,SAAgBlrC,GACf,OAAO2D,KAAK6mC,mBAAmBxf,QAAO,SAACknD,GACtC,OAAOA,EAAGlyE,QAAUA,KAClB,IAEG,EAAAiyE,wBAAP,WACC,MAAO,CACN,IAAI,EAAAE,eAAe,WAAY,CAC9B/mC,wBAAwB,EAGxBQ,OAAQ,wBAET,IAAI,EAAAumC,eAAe,SAAU,CAC5B/mC,wBAAwB,EACxBQ,OAAQ,yBAGT,IAAI,EAAAumC,eAAe,QAAS,CAC3BvmC,OAAQ,wBAET,IAAI,EAAAumC,eAAe,QAAS,CAC3BvmC,OAAQ,sBAET,IAAI,EAAAumC,eAAe,KAAM,CAExBvmC,OAAQ,SACRwmC,GAAI,EAAAppB,uBAAuBK,QAAQz3B,OAItC,YAAAqgD,wBAAA,WACC,OAAOpkC,EAAsBokC,2BAEpB,YAAAR,wBAAV,WACC9tE,KAAKquE,uBAAoBhlE,EACzBrJ,KAAK6mC,oBAEN,YAAA6nC,4BAAA,SAA4BC,EAA2BrmC,G,MACtD,OAAsC,QAA/B,EAAAtoC,KAAKyoC,cAAcH,UAAY,eAAEE,gBAAiB,IAIhD,YAAAulC,wBAAV,WACC/tE,KAAKkrE,kBAAmB,GAEzB,YAAArhC,oBAAA,WACC7pC,KAAKkrE,kBAAmB,GAEzB,YAAAoB,gBAAA,WACC,OAAOtsE,KAAKkrE,kBAGH,YAAA8C,6BAAV,WACChuE,KAAKmrE,uBAAwB,GAE9B,YAAArhC,yBAAA,WACC9pC,KAAKmrE,uBAAwB,GAE9B,YAAAoB,qBAAA,WACC,OAAOvsE,KAAKmrE,uBAQH,YAAAyD,oBAAV,SAA8BtmC,GAC7B,OAAOsiC,EAAwBluE,IAAI4rC,IAE1B,YAAAumC,kBAAV,SAA4BvmC,GAC3B,OAAOuiC,EAAsBnuE,IAAI4rC,IAExB,YAAAwmC,gBAAV,SAA0BxmC,GACzB,OAAOwiC,EAAoBpuE,IAAI4rC,IASxB,YAAAyjC,kBAAR,SAA0BD,EAAkBxjC,GAqB3C,IApBA,IAAMymC,EAAuB/uE,KAAKitE,cAAc3kC,EAAa,EAAAkT,SAASwzB,sBAChEC,EAASjvE,KAAKitE,cAAc3kC,EAAa,EAAAkT,SAAS0zB,QAElDv3B,EAAO33C,KAAKitE,cAAc3kC,EAAa,EAAAkT,SAAS2zB,MAElDC,EAAiBtD,EAAS3iE,MAAM,MAC9BhG,EAAQnD,KAAKsmC,gBAAgBnjC,MAC7BksE,EAAY,CACjB,eAAe,EAAA92C,UAAU8F,MAAMl7B,EAAM8qC,gBAAgBC,KACrD,+BAA+B,EAAA3V,UAAU8F,MAAMl7B,EAAM8qC,gBAAgBC,KAAI,IACzE,6BAA6B,EAAA3V,UAAU8F,MAAMl7B,EAAM8qC,gBAAgBF,YAAY,IAC/E,2BAA2B,EAAAxV,UAAU8F,MAAMl7B,EAAM8qC,gBAAgBF,YAAY,KAGxEuhC,EAAqBtvE,KAAK4uE,oBAAoBtmC,GAC9CinC,EAAmBvvE,KAAK6uE,kBAAkBvmC,GAC1CwmC,EAAkB9uE,KAAK8uE,gBAAgBxmC,GACzCknC,GAA2B,EAC3BC,GAAyB,EAEH,MAAAL,EAAA,eAAgB,CAArC,IAAIM,EAAa,KACW,GAA5BF,IACCT,GACH/uE,KAAK2vE,cAAcN,EAAWN,GAE3BE,GACHjvE,KAAK2vE,cAAcN,EAAWJ,GAE/BO,GAA2B,GAEE,GAA1BC,IAEC93B,GACH33C,KAAK2vE,cAAcN,EAAW13B,GAE/B83B,GAAyB,GAG1B,IAAIG,GAAuB,EAC3B,GAAId,EACH,IAA2B,UAAAA,EAAA,eAAiB,CAAvC,IAAIe,EAAc,KAClBH,EAAcprE,QAAQurE,IAAmB,IAC5CD,GAAuB,GAIrBA,GAGJP,EAAUv0E,KAAK,eACfu0E,EAAUv0E,KAAK,KAAK40E,IAHpBL,EAAUv0E,KAAK40E,GAMZJ,GAAsBI,EAAcprE,QAAQgrE,IAAuB,IACtEE,GAA2B,GAExBD,GAAoBG,EAAcprE,QAAQirE,IAAqB,IAClEE,GAAyB,GAoB3BzvE,KAAKgrE,OAAO9qE,IAAIooC,EAAa+mC,IAOtB,YAAAM,cAAR,SAAsBN,EAAqBS,GAC1C,GAAIA,EAAat1E,OAAS,EAAG,CAC5B,IAAK,IAAIF,EAAI,EAAGA,EAxhBE,EAwhBgBA,IACjC+0E,EAAUv0E,KAAK,IAGhB,IAAwB,UAAAg1E,EAAA,eAAc,CAAjC,IAAIC,EAAW,KACnBV,EAAUv0E,KAAKi1E,GAGhB,IAASz1E,EAAI,EAAGA,EAhiBE,EAgiBgBA,IACjC+0E,EAAUv0E,KAAK,MAKZ,YAAAk1E,qBAAN,W,yFACC,MAAO,CAAP,EAAO,IAAI12C,YA0Cb,EA/kBA,CAA2C,EAAA22C,gBAA9B,EAAA/lC,yB,yFC/Db,2BACA,2BAMA,SACA,QA0BA,aASC,WAAoBgmC,EAAuC5pC,GAAvC,KAAA4pC,aAAuC,KAAA5pC,kBARnD,KAAA6pC,iBAAgD,IAAI72C,IACpD,KAAA82C,0BAAyD,IAAI92C,IAC7D,KAAA+2C,qBAA4C,IAAI/2C,IAChD,KAAAg3C,mBAAqC,IAAIh3C,IACzC,KAAAi3C,mBAA4C,IAAIj3C,IAKvDt5B,KAAKsU,OAAStU,KAAKsmC,gBAAgBnjC,MAAMgR,MA6M3C,OA1MS,YAAA0kB,MAAR,sBACC74B,KAAKmwE,iBAAiBlzD,QACtBjd,KAAKqwE,qBAAqBpzD,QAC1Bjd,KAAKswE,mBAAmBrzD,QACxBjd,KAAKuwE,mBAAmBtzD,QAExBjd,KAAK6rE,eAAejqE,SAAQ,SAAC0mC,GAC5B,EAAK8nC,0BAA0BlwE,IAAIooC,EAAa,IAAIhP,SAItD,YAAAuyC,aAAA,WACC,OAAO7rE,KAAKkwE,WAAWrE,cAExB,YAAA6C,4BAAA,SAA4BC,EAAcrmC,GACzC,OAAOtoC,KAAKkwE,WAAWxB,4BAA4BC,EAAWrmC,IAG/D,YAAA2U,SAAA,SAAS+uB,GAAT,WACChsE,KAAK64B,QAEL,IAAwB,UAAA74B,KAAK6rE,eAAL,eAAqB,CAAxC,IAAIvjC,EAAW,KACnBtoC,KAAKmwE,iBAAiBjwE,IAAIooC,EAAa,IAAIhP,KAG5C,IAAwB,UAAAt5B,KAAK6rE,eAAL,eAAqB,CAApCvjC,EAAW,KACnBtoC,KAAKwwE,aAAeloC,EACpB,IAAsB,UAAA0jC,EAAA,eAAY,CAA7B,IAAI2C,EAAS,KACjB3uE,KAAKywE,2BAA2B9B,GAChC3uE,KAAK0wE,mBAKP1wE,KAAKswE,mBAAmB1uE,SAAQ,SAAC+uE,EAAeC,GAClC,MAATD,GAGH,EAAAjnC,SAASC,uBAAuB,EAAK4mC,mBAAoBI,EAAOC,OAKnE,YAAAC,kBAAA,SAAkBnmB,G,MACjB1qD,KAAKwwE,aAAe,EAAApnD,WAAW0nD,yBAC/B9wE,KAAKowE,0BAA0BlwE,IAAIF,KAAKwwE,aAAc,IAAIl3C,KAC1Dt5B,KAAKmwE,iBAAiBjwE,IAAIF,KAAKwwE,aAAc,IAAIl3C,KACjD,IAAiB,UAAAoxB,EAAA,eAAO,CAAnB,IAAIlnD,EAAI,KACZxD,KAAK+wE,YAAYvtE,GAGlB,IAAMwtE,EAAqB,GAI3B,OAH4C,QAA5C,EAAAhxE,KAAKmwE,iBAAiBzzE,IAAIsD,KAAKwwE,qBAAa,SAAE5uE,SAAQ,SAAC9E,EAAgBM,GACtE4zE,EAASl2E,KAAKsC,MAER4C,KAAKsU,OAAO28D,eAAeD,IAGnC,YAAAE,sBAAA,SAAsB5oC,GAAtB,WACO6oC,EAAmB,GACzBnxE,KAAKuwE,mBAAmB3uE,SAAQ,SAAC9E,EAAiBM,GACjD+zE,EAAOr2E,KAAKsC,MAEb+zE,EAAOnmE,MAAK,SAACC,EAAGC,GAAM,OAAAD,EAAIC,KAC1B,IAAMw/C,EAAa,GAcnB,OAbAymB,EAAOvvE,SAAQ,SAAC+uE,GACf,IAAMS,EAAsB,EAAKb,mBAAmB7zE,IAAIi0E,GACpDS,GACHA,EAAoBxvE,SAAQ,SAACgvE,G,MAE5B,GADkE,QAAlD,EAAG,EAAKR,0BAA0B1zE,IAAI4rC,UAAY,eAAE5rC,IAAIk0E,GACxD,CACf,IAAMptE,EAAO,EAAK8Q,OAAO+8D,aAAaT,GACtClmB,EAAM5vD,KAAK0I,UAMRknD,GAER,YAAA4mB,aAAA,sBACOH,EAAmB,GACzBnxE,KAAKuwE,mBAAmB3uE,SAAQ,SAAC2vE,EAAeZ,GAC/CQ,EAAOr2E,KAAK61E,MAEbQ,EAAOnmE,MAAK,SAACC,EAAGC,GAAM,OAAAD,EAAIC,KAC1B,IAAMw/C,EAAa,GAanB,OAZAymB,EAAOvvE,SAAQ,SAAC+uE,GACf,IAAMS,EAAsB,EAAKb,mBAAmB7zE,IAAIi0E,GACxD,GAAIS,EACH,IAAqB,UAAAA,EAAA,eAAqB,CAArC,IAAIR,EAAQ,KACVptE,EAAO,EAAK8Q,OAAO+8D,aAAaT,GAClCptE,GACHknD,EAAM5vD,KAAK0I,OAMRknD,GAEA,YAAA+lB,2BAAR,SAAmC9B,GAAnC,I,EAAA,OAGsD,QAArD,EAAA3uE,KAAKowE,0BAA0B1zE,IAAIsD,KAAKwwE,qBAAa,SAAEtwE,IAAIyuE,EAAU1mD,eAAe,GAEpF,IAAMugB,EAAcxoC,KAAK0uE,4BAA4BC,EAAW3uE,KAAKwwE,cACrE,GAAIhoC,EACH,IAAuB,UAAAA,EAAA,eAAa,CAA/B,IAAIpB,EAAU,KAEZxvB,EAAQ+2D,EAAUnuE,GAAGiX,OAAO4vB,YAAYD,GAC1CxvB,IACH,EAAA8xB,SAASC,uBACR3pC,KAAKqwE,qBACLz4D,EAAMqQ,cACN0mD,EAAU1mD,eAEXjoB,KAAK+wE,YAAYn5D,IAiCpB5X,KAAKqwE,qBAAqBzuE,SAAQ,SAACnB,EAAmBmwE,GACrD,EAAKP,qBAAqBnwE,IAAI0wE,EAAU,UAAYnwE,QAI9C,YAAAswE,YAAR,SAAoBvtE,GAApB,I,EAAA,OACsD,QAArD,EAAAxD,KAAKowE,0BAA0B1zE,IAAIsD,KAAKwwE,qBAAa,SAAEtwE,IAAIsD,EAAKykB,eAAe,GAE/E,IAAMxQ,EAAS,UAAejU,EAAKhD,GAAGiX,OAAOA,UAEvC+5D,EADkB,UAAY/5D,EAAOpN,KAAI,SAAC/M,GAAM,OAAAA,EAAE2qB,kBAClB5d,KAAI,SAACumE,GAAa,SAAKt8D,OAAO+8D,aAAaT,MACjF,GAAIY,EAAch3E,OAAS,EAE1B,IAAkB,UAAAg3E,EAAA,eAAe,CAA5B,IAAI55D,EAAK,KACb,EAAA8xB,SAASC,uBAAuB3pC,KAAKqwE,qBAAsBz4D,EAAMqQ,cAAezkB,EAAKykB,eAErFjoB,KAAK+wE,YAAYn5D,QAGlB5X,KAAKmwE,iBAAiBzzE,IAAIsD,KAAKwwE,cAAetwE,IAAIsD,EAAKykB,eAAe,IAIhE,YAAAyoD,gBAAR,sBACC1wE,KAAKmwE,iBAAiBvuE,SAAQ,SAAC6vE,EAAsBnpC,GACpDmpC,EAAqB7vE,SAAQ,SAACy7B,EAASuzC,GACtC,EAAKc,eAAed,UASf,YAAAc,eAAR,SAAuBd,EAAkBD,GAAzC,gBAAyC,IAAAA,MAAA,GACxC,IAAMgB,EAAgB3xE,KAAKswE,mBAAmB5zE,IAAIk0E,GAC7B,MAAjBe,EACH3xE,KAAKswE,mBAAmBpwE,IAAI0wE,EAAU5nE,KAAKC,IAAI0oE,EAAehB,IAE9D3wE,KAAKswE,mBAAmBpwE,IAAI0wE,EAAUD,GAKvC,IAAMiB,EAAa5xE,KAAKqwE,qBAAqB3zE,IAAIk0E,GAC7CgB,GACHA,EAAWhwE,SAAQ,SAACiwE,GACnB,EAAKH,eAAeG,EAAWlB,EAAQ,OAI3C,EAvNA,GAAa,EAAAmB,sB,8EC7Bb,iBAIC,aACC9xE,KAAK+xE,IAAMpsB,EAAsBqsB,YAuBnC,OArBC,YAAAvnE,GAAA,WACC,OAAOzK,KAAK+xE,KAGb,YAAAhoC,oBAAA,SACCb,EACA9Q,EACAM,KAbc,EAAAs5C,UAAoB,EA2BpC,EA5BA,GAAsB,EAAArsB,yB,8ECHtB,+BAiBA,OAhBQ,EAAAssB,kBAAP,SAAyBzuE,GAExB,OADcA,EAAKwY,cAAc,WAO3B,EAAAk2D,4BAAP,SAAmC1uE,GAElC,OADcA,EAAKwY,cAAc,aACpBqL,QAAO,SAAC7jB,GAGpB,OAAOA,EAAK2uE,iBAGf,EAjBA,GAAa,EAAAC,gB,yFCFb,4BACA,4BACA,4BAEA,OAMA,QAOA,SACA,QAwBA,2B,+CAeA,OAf6C,iBAC5C,YAAAx2D,YAAA,SAA+C9d,GAC9C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAiDle,GAChD,OAAO,YAAMke,cAAa,UAACle,IAO7B,EAfA,CAA6C,EAAA+F,WAAhC,EAAAwuE,0BAkBb,iBAWC,WAAoB7uE,EAA+B0iC,GAA/B,KAAA1iC,OARZ,KAAA8uE,mBAA6B,EAG7B,KAAAvH,iBAA4C,IAAIzxC,IAEhD,KAAAi5C,qBAAsE,IAAIj5C,IAC1E,KAAAk5C,YAA+B,GAGtCxyE,KAAKwD,KAAKo3C,UAAU63B,gBAAgBzyE,KAAK63D,WAGzC73D,KAAKkwE,WAAa,IAAIhqC,EAAgBlmC,KAAKwD,MA6W7C,OA9UC,YAAAkvE,8BAAA,SAA8B7qC,IACV7nC,KAAK2yE,iBAAmB3yE,KAAK2yE,iBAAiBloE,KAAO,QACzDo9B,EAAkBA,EAAgBp9B,KAAO,QAGvDzK,KAAK2yE,iBAAmB9qC,EACxB7nC,KAAK83B,qCACL93B,KAAKkwE,WAAWtC,kBAGlB,sBAAI,wBAAS,C,IAAb,WACC,OAAO5tE,KAAKkwE,Y,gCAEb,sBAAI,8BAAe,C,IAAnB,WACC,OAAOlwE,KAAK+qE,kB,gCAEb,sBAAI,8BAAe,C,IAAnB,WACC,OAAO/qE,KAAK2yE,kB,gCAOb,YAAAnF,kBAAA,SAAkBC,GACjBztE,KAAKkwE,WAAW1C,kBAAkBC,IAEnC,YAAAnY,mBAAA,SAAmBpsB,GAClBlpC,KAAKkwE,WAAW5a,mBAAmBpsB,IAEpC,YAAAkR,wBAAA,WACC,OAAOp6C,KAAKkwE,WAAW91B,2BAGxB,YAAAyd,UAAA,WACC,IAAM+a,EAAU5yE,KAAKwD,KAAKoY,YAAY,WAChCi3D,EAAS7yE,KAAKwD,KAAKoY,YAAY,UAErCg3D,EAAQp7C,QAAQmkC,aAAa,IAAI,EAAA7qC,SAAS,IAAK,IAC/C+hD,EAAOr7C,QAAQmkC,aAAa,IAAI,EAAA7qC,QAAQ,IAAK,KAkB9C,YAAAgiD,yBAAA,WACC9yE,KAAKsyE,mBAAoB,GAE1B,YAAAx6C,mCAAA,SAAmCi7C,GAKlC/yE,KAAK8yE,2BACL9yE,KAAKwD,KAAKgR,UAAUu+D,IAErB,YAAAC,iBAAA,WACC,OAAOhzE,KAAKsyE,mBAgBP,YAAAW,aAAN,W,yFACC,OAAKjzE,KAAKsyE,mBAIVtyE,KAAKo5B,0BACLp5B,KAAKsyE,mBAAoB,E,KAJxB,WA8HI,YAAAY,sBAAN,W,4HACKlzE,KAAKkwE,WAAL,Y,IACsB,EAAAlwE,KAAKkwE,WAAW31C,gB,wBAAhB,WACxB,GADoB,KACD44C,kBAAkBnzE,KAAKwD,OADa,M,OACvD,S,wBADwB,I,+BA6C3B,YAAA41B,wBAAA,sBACOg6C,EAAsCpzE,KAAKwD,KAAKif,OAAO+W,YACvDe,EAAgBv6B,KAAKkwE,WAAW31C,gBAChC84C,EAAwB94C,EAAclwB,KAAI,SAAClO,GAAM,OAAAA,EAAEE,QAEnDi3E,EAA2B,UAAkBD,EAAuBD,GACpEG,EAA8B,UAAkBH,EAA2BC,GACjFrzE,KAAKwyE,YAAc,GAGnB,IAAMj5C,EAAsBv5B,KAAKwD,KAAKif,OAAOsW,MACvCy6C,EAAwC,UAC7CF,EACA/5C,GAED,GAAIi6C,EAAsCh5E,OAAS,EAAG,CACrD,IAAM2wC,EAAmBnrC,KAAKwD,KAAK0T,YAAW,4CAA4Cs8D,EAAsC3pE,KAC/H,MACA,6BACDzG,QAAQmT,KAAK40B,GACbnrC,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAIirC,GAG5BooC,EAA4B3xE,SAAQ,SAAC8kB,GAGpC,IAAMrQ,EAAQ,EAAK7S,KAAKif,OAAO/lB,IAAIgqB,GACnC,GAAIrQ,EAAO,CACV,IAAMo9D,EAAiB,EAAAlmC,qBAAqBR,eAAe12B,GAC3D,GAAIo9D,EAAeC,SAAU,CAC5B,IAAMC,EAAcF,EAAez5E,OACnC,EAAKu4E,qBAAqBryE,IAAImW,EAAMha,KAAMs3E,IAI5C,EAAKnwE,KAAKif,OAAOkX,aAAajT,MAI/B,IAAyB,UAAA6T,EAAA,eAAe,CAAnC,IAAIy7B,EAAY,KACpB,GAAIsd,EAAyBhvE,QAAQ0xD,EAAa35D,OAAS,EAAG,CAK7D,IAAM2B,EAAU,UAAag4D,EAAa4d,cAAe,CAACx5C,OAAO,EAAM9e,MAAM,IAEvEjF,EAAQrW,KAAKwD,KAAK6X,UACvB26C,EAAal4D,KACbk4D,EAAa35D,KACb25D,EAAatoD,cACb1P,GAED,GAAIqY,EAAO,CAESrW,KAAKuyE,qBAAqB71E,IAAI2Z,EAAMha,MASvD2D,KAAKwyE,YAAY13E,KAAKub,MAKrBi9D,EAAyB94E,OAAS,GAAK+4E,EAA4B/4E,OAAS,KAC/EwF,KAAKwD,KAAKif,OAAOoxD,2BACjB7zE,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUgvB,kBAG5B,EA5XA,GAAa,EAAAy5C,yB,4FC5Db,SACA,QAEA,OAYMhzC,EAAe,IARrB,uE,OACC,EAAAizC,MAAQ,EAAA70E,YAAYJ,OAAO,GAAI,CAAC4uE,QAAQ,IACxC,EAAA70C,MAAQ,EAAA35B,YAAYhB,OAAO,KAAM,CAChC4W,SAAU,SAACtR,EAAoB6S,GAC9B29D,EAAaC,qBAAqBzwE,EAAsB6S,M,EAG3D,OAPmC,iBAOnC,EAPA,CAAmC,EAAAlX,mBAUnC,yE,OACC,EAAA0iC,cAAgBf,E,EAgDjB,OAjDkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,sBAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,IAG7B,YAAA3I,KAAA,SAAKC,GACJ,IAAM24D,EAAkC,IAAjBl0E,KAAKyY,GAAGs7D,OAAgC,MAAjB/zE,KAAKyY,GAAGs7D,MAChDnzE,EAAa2a,EAAe,GAClC,GAAI24D,GAAkBtzE,EAAY,CAEjC,IADA,IAAMg+D,EAAO,GACM,MAAAh+D,EAAWC,UAAX,eAAsB,CAApC,IAAItD,EAAM,KACdqhE,EAAK9jE,KAAKyC,EAAO42E,UAElBn0E,KAAKW,eAAeC,GACpBZ,KAAKvC,EAAEs2E,MAAM7zE,IAAI47B,KAAKC,UAAU6iC,SAEhC,GAAI5+D,KAAKyY,GAAGs7D,MAAO,CAIlB,IAHA,IAAMK,EAAa,IAAI,EAAAC,aAEjBC,EAAc,GACH,MAFHx4C,KAAKvzB,MAAMvI,KAAKyY,GAAGs7D,OAEhB,eAAO,CAAfnV,EAAI,KAAR,IACE,EAASwV,EAAW7rE,MAAMq2D,GAEhC0V,EAAYx5E,KAAK,GAGlBkF,KAAKoB,YAAYkzE,QAEjBt0E,KAAKoB,YAAY,KAKb,EAAA6yE,qBAAP,SAA4BzwE,EAAoB6S,GAC/C7S,EAAK+wE,uCAEA,YAAAA,oCAAN,W,gGACCv0E,KAAKvC,EAAEs2E,MAAM7zE,IAAI,IACjBF,KAAKiX,oB,WAEP,EAjDA,CAAkC,EAAAnT,cAArB,EAAAkwE,gB,gRCjBb,kCAAyF,IAAIQ,EAAI,GAAIv4E,OAAE,EAAOw4E,EAAGD,EAAI,SAAS73E,EAAER,EAAEC,GAAG,IAAqFkO,EAAjFW,EAAE9O,EAAEgN,MAAM,KAAK+B,EAAEupE,IAAKxpE,EAAE,KAAKC,IAAIA,EAAEwpE,YAAYxpE,EAAEwpE,WAAW,OAAOzpE,EAAE,IAAI,KAAUA,EAAEzQ,SAAS8P,EAAEW,EAAEhQ,UAAWgQ,EAAEzQ,QAAQ4B,IAAIH,EAASiP,EAAEA,EAAEZ,GAAGY,EAAEZ,GAAGY,EAAEZ,GAAG,GAAxBY,EAAEZ,GAAGlO,EAAuB,IAAIW,EAAE,oBAAqBq1B,YAAY,oBAAqBoM,aAAa,oBAAqBwnC,aAAa,oBAAqB2O,SAAS,SAAS52C,EAAE5hC,GAAG,IAA8CmO,EAAEsqE,EAAE1mE,EAAEnB,EAAEi1C,EAAE9lD,EAAEoB,EAAEG,EAAE7B,EAAEiS,EAA5DzR,EAAED,EAAE3B,OAAOyQ,EAAE,EAAEC,EAAEL,OAAOgqE,kBAAsC,IAAIp3E,EAAE,EAAEA,EAAErB,IAAIqB,EAAEtB,EAAEsB,GAAGwN,IAAIA,EAAE9O,EAAEsB,IAAItB,EAAEsB,GAAGyN,IAAIA,EAAE/O,EAAEsB,IAAkD,IAA9C6M,EAAE,GAAGW,EAAE2pE,EAAE,IAAK73E,EAAEipE,YAAY7xC,OAAO7pB,GAAG4D,EAAE,EAAEnB,EAAE,EAAMi1C,EAAE,EAAE9zC,GAAGjD,GAAG,CAAC,IAAIxN,EAAE,EAAEA,EAAErB,IAAIqB,EAAE,GAAGtB,EAAEsB,KAAKyQ,EAAE,CAAS,IAARhS,EAAE,EAAEoB,EAAEyP,EAAMnR,EAAE,EAAEA,EAAEsS,IAAItS,EAAEM,EAAEA,GAAG,EAAI,EAAFoB,EAAIA,IAAI,EAAY,IAAVuQ,EAAEK,GAAG,GAAGzQ,EAAM7B,EAAEM,EAAEN,EAAE0O,EAAE1O,GAAGomD,EAAE4yB,EAAEh5E,GAAGiS,IAAId,IAAImB,EAAEnB,IAAI,EAAEi1C,IAAI,EAAE,MAAM,CAAC4yB,EAAE3pE,EAAEC,GAAI,SAASkD,EAAEjS,EAAEC,GAAkQ,OAA/P4D,KAAKkO,EAAE,GAAGlO,KAAK+M,EAAE,MAAM/M,KAAK5D,EAAE4D,KAAK40E,EAAE50E,KAAKiL,EAAEjL,KAAK/D,EAAE,EAAE+D,KAAK4X,MAAM7a,EAAE,IAAIq1B,WAAWj2B,GAAGA,EAAE6D,KAAK9D,GAAE,EAAG8D,KAAK1F,EAAEwT,EAAE9N,KAAKrD,GAAE,GAAMP,IAAKA,EAAE,MAAIA,EAAE+F,QAAQnC,KAAKiL,EAAE7O,EAAE+F,OAAO/F,EAAE04E,aAAa90E,KAAK+M,EAAE3Q,EAAE04E,YAAY14E,EAAE24E,aAAa/0E,KAAK1F,EAAE8B,EAAE24E,YAAY34E,EAAE44E,SAASh1E,KAAKrD,EAAEP,EAAE44E,SAAeh1E,KAAK1F,GAAG,KAAK26E,EAAEj1E,KAAKkL,EAAE,MAAMlL,KAAK7D,EAAE,IAAKY,EAAEq1B,WAAW+B,OAAO,MAAMn0B,KAAK+M,EAAE,KAAK,MAAM,KAAKe,EAAE9N,KAAKkL,EAAE,EAAElL,KAAK7D,EAAE,IAAKY,EAAEq1B,WAAW+B,OAAOn0B,KAAK+M,GAAG/M,KAAKsK,EAAEtK,KAAKgO,EAAEhO,KAAK1C,EAAE0C,KAAK+9B,EAAE/9B,KAAKxE,EAAEwE,KAAKoO,EAAE,MAAM,QAAQ,MAAMm9B,MAAM,yBACztC,IAAI0pC,EAAE,EAAEnnE,EAAE,EAAEonE,EAAE,CAACn4E,EAAEk4E,EAAEr5E,EAAEkS,GACvBM,EAAE1T,UAAUsnD,EAAE,WAAW,MAAMhiD,KAAK9D,GAAG,CAAC,IAAIC,EAAEg5E,EAAEn1E,KAAK,GAA2B,OAAtB,EAAF7D,IAAM6D,KAAK9D,GAAE,GAAIC,KAAK,GAAY,KAAK,EAAE,IAAIC,EAAE4D,KAAK4X,MAAM3M,EAAEjL,KAAKiL,EAAEC,EAAElL,KAAK7D,EAAEmO,EAAEtK,KAAKkL,EAAE0pE,EAAEx4E,EAAE5B,OAAO0T,EAAEjS,EAAM+lD,EAAE92C,EAAE1Q,OAAO0B,EAAED,EAAkB,GAAhB+D,KAAK5D,EAAE4D,KAAK40E,EAAE,EAAK3pE,EAAE,GAAG2pE,EAAE,MAAMrpC,MAAM,0CAA6D,GAAnBr9B,EAAE9R,EAAE6O,KAAK7O,EAAE6O,MAAM,EAAKA,EAAE,GAAG2pE,EAAE,MAAMrpC,MAAM,2CAA8D,GAAGr9B,MAApB9R,EAAE6O,KAAK7O,EAAE6O,MAAM,GAAY,MAAMsgC,MAAM,oDAAoD,GAAGtgC,EAAEiD,EAAE9R,EAAE5B,OAAO,MAAM+wC,MAAM,0BAA0B,OAAOvrC,KAAK1F,GAAG,KAAK26E,EAAE,KAAK3qE,EACjgB4D,EAAEhD,EAAE1Q,QAAQ,CAAY,GAAL0T,GAANhS,EAAE8lD,EAAE13C,EAAUvN,EAAEmO,EAAEhL,IAAI9D,EAAEg5E,SAASnqE,EAAEA,EAAE/O,GAAGoO,GAAGA,GAAGpO,EAAE+O,GAAG/O,OAAO,KAAKA,KAAKgP,EAAEZ,KAAKlO,EAAE6O,KAAKjL,KAAKkL,EAAEZ,EAAEY,EAAElL,KAAKsK,IAAIA,EAAEtK,KAAKkL,EAAE,MAAM,KAAK4C,EAAE,KAAKxD,EAAE4D,EAAEhD,EAAE1Q,QAAQ0Q,EAAElL,KAAKsK,EAAE,CAAC7M,EAAE,IAAI,MAAM,QAAQ,MAAM8tC,MAAM,wBAAyB,GAAGxuC,EAAEmO,EAAEhL,IAAI9D,EAAEg5E,SAASnqE,EAAEA,EAAEiD,GAAG5D,GAAGA,GAAG4D,EAAEjD,GAAGiD,OAAO,KAAKA,KAAKhD,EAAEZ,KAAKlO,EAAE6O,KAAKjL,KAAKiL,EAAEA,EAAEjL,KAAKkL,EAAEZ,EAAEtK,KAAK7D,EAAE+O,EAAE,MAAM,KAAK,EAAElL,KAAKxE,EAAE65E,EAAGC,GAAI,MAAM,KAAK,EAAM,IAAqFC,EAAIC,EAAIC,EAAwBC,EAAjHp4E,EAAE63E,EAAEn1E,KAAK,GAAG,IAAIvC,EAAE03E,EAAEn1E,KAAK,GAAG,EAAEpE,EAAEu5E,EAAEn1E,KAAK,GAAG,EAAE6N,EAAE,IAAK9Q,EAAEq1B,WAAW+B,OAAOwhD,EAAEn7E,QAAoBo7E,EAAE35E,EAAE45E,EAAE55E,EAAE65E,EAAE75E,EAAE+R,EAAE/R,EAAE85E,EAAE95E,EAAvH,IAA6H85E,EAAE,EAAEA,EAAEn6E,IAAIm6E,EAAEloE,EAAE8nE,EAAEI,IACtfZ,EAAEn1E,KAAK,GAAG,IAAIjD,EAAO,IAAJg5E,EAAEn6E,EAAMA,EAAEiS,EAAErT,OAAOu7E,EAAEn6E,IAAIm6E,EAAEloE,EAAE8nE,EAAEI,IAAI,EAA6C,IAA3CR,EAAEx3C,EAAElwB,GAAG+nE,EAAE,IAAK74E,EAAEq1B,WAAW+B,OAAO72B,EAAEG,GAAGs4E,EAAE,EAAML,EAAEp4E,EAAEG,EAAEs4E,EAAEL,GAAG,OAAOG,EAAEG,EAAEh2E,KAAKu1E,GAAGM,GAAG,KAAK,GAAG,IAAI7nE,EAAE,EAAEmnE,EAAEn1E,KAAK,GAAGgO,KAAK4nE,EAAEG,KAAKD,EAAE,MAAM,KAAK,GAAG,IAAI9nE,EAAE,EAAEmnE,EAAEn1E,KAAK,GAAGgO,KAAK4nE,EAAEG,KAAK,EAAED,EAAE,EAAE,MAAM,KAAK,GAAG,IAAI9nE,EAAE,GAAGmnE,EAAEn1E,KAAK,GAAGgO,KAAK4nE,EAAEG,KAAK,EAAED,EAAE,EAAE,MAAM,QAAQA,EAAEF,EAAEG,KAAKF,EAAEL,EAAIz3C,EAAFhhC,EAAI64E,EAAER,SAAS,EAAE93E,GAAMs4E,EAAE/3E,MAAM,EAAEP,IAAIm4E,EAAI13C,EAAFhhC,EAAI64E,EAAER,SAAS93E,GAAMs4E,EAAE/3E,MAAMP,IAAI0C,KAAKxE,EAAEg6E,EAAEC,GAAG,MAAM,QAAQ,MAAMlqC,MAAM,kBAAkBpvC,IAAK,OAAO6D,KAAK1C,KAC/b,IACiE0zB,EAAEilD,EAD/DC,EAAE,CAAC,GAAG,GAAG,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAIP,EAAE54E,EAAE,IAAIyhC,YAAY03C,GAAGA,EAAEC,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAKC,EAAEr5E,EAAE,IAAIyhC,YAAY23C,GAAGA,EAAEE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAGC,EAAEv5E,EAAE,IAAIq1B,WAAWikD,GAAGA,EAAEE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,MAAM,OAAOC,EAAGz5E,EAAE,IAAIyhC,YAAY+3C,GAAGA,EAAEE,EAAG,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAClf,GAAG,IAAIxlD,EAAEl0B,EAAE,IAAIq1B,WAAWqkD,GAAIA,EAAGC,EAAE,IAAK35E,EAAEq1B,WAAW+B,OAAO,KAAc,IAAJnD,EAAE,EAAMilD,EAAGS,EAAEl8E,OAAOw2B,EAAEilD,IAAKjlD,EAAE0lD,EAAE1lD,GAAG,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,KAAKA,EAAE,EAAE,EAAE,IAA2C2lD,EAAEC,EAAzCvB,EAAGt3C,EAAE24C,GAAGG,EAAE,IAAK95E,EAAEq1B,WAAW+B,OAAO,IAAa,IAAJwiD,EAAE,EAAMC,EAAGC,EAAEr8E,OAAOm8E,EAAEC,IAAKD,EAAEE,EAAEF,GAAG,EAAE,IAAIrB,EAAGv3C,EAAE84C,GAAG,SAAS1B,EAAEh5E,EAAEC,GAAG,IAAI,IAA2C2Q,EAAvC9B,EAAE9O,EAAEy4E,EAAE1pE,EAAE/O,EAAEC,EAAEkO,EAAEnO,EAAEyb,MAAMg9D,EAAEz4E,EAAE8O,EAAEiD,EAAE5D,EAAE9P,OAAS0Q,EAAE9O,GAAG,CAAC,GAAGw4E,GAAG1mE,EAAE,MAAMq9B,MAAM,0BAA0BtgC,GAAGX,EAAEsqE,MAAM1pE,EAAEA,GAAG,EAAuC,OAArC6B,EAAE9B,GAAG,GAAG7O,GAAG,EAAED,EAAEy4E,EAAE3pE,IAAI7O,EAAED,EAAEC,EAAE8O,EAAE9O,EAAED,EAAE8O,EAAE2pE,EAAS7nE,EACxZ,SAASipE,EAAE75E,EAAEC,GAAG,IAAI,IAAyDF,EAAEoB,EAAvD2N,EAAE9O,EAAEy4E,EAAE1pE,EAAE/O,EAAEC,EAAEkO,EAAEnO,EAAEyb,MAAMg9D,EAAEz4E,EAAE8O,EAAEiD,EAAE5D,EAAE9P,OAAOuS,EAAE3Q,EAAE,GAAG4lD,EAAE5lD,EAAE,GAAO8O,EAAE82C,KAAK4yB,GAAG1mE,IAAIjD,GAAGX,EAAEsqE,MAAM1pE,EAAEA,GAAG,EAA2B,IAAT5N,GAAhBpB,EAAE6Q,EAAE9B,GAAG,GAAG+2C,GAAG,MAAS,IAAQ92C,EAAE,MAAMqgC,MAAM,wBAAwBjuC,GAA0B,OAAvBnB,EAAEy4E,EAAE3pE,GAAG3N,EAAEnB,EAAEC,EAAE8O,EAAE5N,EAAEnB,EAAE8O,EAAE2pE,EAAW,MAAF14E,EAMxB,SAAS46E,EAAE36E,EAAEC,GAAG,IAAI6O,EAAEC,EAAwH,OAAtHlL,KAAK4X,MAAMzb,EAAE6D,KAAKiL,EAAE,GAAK7O,IAAKA,EAAE,MAAIA,EAAE+F,QAAQnC,KAAKiL,EAAE7O,EAAE+F,OAAO/F,EAAE26E,SAAS/2E,KAAKi1E,EAAE74E,EAAE26E,SAAQ9rE,EAAE9O,EAAE6D,KAAKiL,KAAKC,EAAE/O,EAAE6D,KAAKiL,KAAc,GAAFA,GAAM,KAAK+rE,EAAGh3E,KAAKi3E,OAAOD,EAAG,MAAM,QAAQ,MAAMzrC,MAAM,kCAAmC,GAAG,KAAMtgC,GAAG,GAAGC,GAAG,GAAG,MAAMqgC,MAAM,yBAAyBtgC,GAAG,GAAGC,GAAG,IAAI,GAAK,GAAFA,EAAK,MAAMqgC,MAAM,+BAA+BvrC,KAAK+1E,EAAE,IAAI3nE,EAAEjS,EAAE,CAACgG,MAAMnC,KAAKiL,EAAE6pE,WAAW14E,EAAE04E,WAAWC,WAAW34E,EAAE24E,WAAWC,OAAO54E,EAAE44E,SAL7nB5mE,EAAE1T,UAAUc,EAAE,SAASW,EAAEC,GAAG,IAAI6O,EAAEjL,KAAK7D,EAAE+O,EAAElL,KAAKkL,EAAElL,KAAKzD,EAAEJ,EAAE,IAAI,IAAmBy4E,EAAE1mE,EAAEnB,EAAEi1C,EAArB13C,EAAEW,EAAEzQ,OAAO,IAAY,OAAOo6E,EAAEoB,EAAEh2E,KAAK7D,KAAK,GAAG,IAAIy4E,EAAE1pE,GAAGZ,IAAItK,KAAKkL,EAAEA,EAAED,EAAEjL,KAAKsK,IAAIY,EAAElL,KAAKkL,GAAGD,EAAEC,KAAK0pE,OAAmI,IAApH5yB,EAAEo0B,EAAVloE,EAAE0mE,EAAE,KAAW,EAAE0B,EAAEpoE,KAAK8zC,GAAGmzB,EAAEn1E,KAAKs2E,EAAEpoE,KAAK0mE,EAAEoB,EAAEh2E,KAAK5D,GAAG2Q,EAAEypE,EAAG5B,GAAG,EAAE3jD,EAAE2jD,KAAK7nE,GAAGooE,EAAEn1E,KAAKixB,EAAE2jD,KAAK1pE,GAAGZ,IAAItK,KAAKkL,EAAEA,EAAED,EAAEjL,KAAKsK,IAAIY,EAAElL,KAAKkL,GAAQ82C,KAAK/2C,EAAEC,GAAGD,EAAEC,IAAI6B,GAAG,KAAK,GAAG/M,KAAK5D,GAAG4D,KAAK5D,GAAG,EAAE4D,KAAKiL,IAAIjL,KAAKkL,EAAEA,GACzWkD,EAAE1T,UAAU0T,EAAE,SAASjS,EAAEC,GAAG,IAAI6O,EAAEjL,KAAK7D,EAAE+O,EAAElL,KAAKkL,EAAElL,KAAKzD,EAAEJ,EAAE,IAAI,IAAey4E,EAAE1mE,EAAEnB,EAAEi1C,EAAjB13C,EAAEW,EAAEzQ,OAAe,OAAOo6E,EAAEoB,EAAEh2E,KAAK7D,KAAK,GAAG,IAAIy4E,EAAE1pE,GAAGZ,IAAeA,GAAXW,EAAEjL,KAAKsK,KAAQ9P,QAAQyQ,EAAEC,KAAK0pE,OAA6H,IAA9G5yB,EAAEo0B,EAAVloE,EAAE0mE,EAAE,KAAW,EAAE0B,EAAEpoE,KAAK8zC,GAAGmzB,EAAEn1E,KAAKs2E,EAAEpoE,KAAK0mE,EAAEoB,EAAEh2E,KAAK5D,GAAG2Q,EAAEypE,EAAG5B,GAAG,EAAE3jD,EAAE2jD,KAAK7nE,GAAGooE,EAAEn1E,KAAKixB,EAAE2jD,KAAK1pE,EAAE82C,EAAE13C,IAAeA,GAAXW,EAAEjL,KAAKsK,KAAQ9P,QAAawnD,KAAK/2C,EAAEC,GAAGD,EAAEC,IAAI6B,GAAG,KAAK,GAAG/M,KAAK5D,GAAG4D,KAAK5D,GAAG,EAAE4D,KAAKiL,IAAIjL,KAAKkL,EAAEA,GACxVkD,EAAE1T,UAAU4P,EAAE,WAAW,IAA4DW,EAAEC,EAA1D/O,EAAE,IAAKY,EAAEq1B,WAAW+B,OAAOn0B,KAAKkL,EAAE,OAAO9O,EAAE4D,KAAKkL,EAAE,MAAUZ,EAAEtK,KAAK7D,EAAE,GAAGY,EAAEZ,EAAE+D,IAAIoK,EAAE8qE,SAAS,MAAMj5E,EAAE3B,cAAkB,IAAJyQ,EAAE,EAAMC,EAAE/O,EAAE3B,OAAOyQ,EAAEC,IAAID,EAAE9O,EAAE8O,GAAGX,EAAEW,EAAE,OAAuC,GAAhCjL,KAAKkO,EAAEpT,KAAKqB,GAAG6D,KAAK/D,GAAGE,EAAE3B,OAAUuC,EAAEuN,EAAEpK,IAAIoK,EAAE8qE,SAASh5E,EAAEA,EAAE,aAAa,IAAI6O,EAAE,EAAE,MAAMA,IAAIA,EAAEX,EAAEW,GAAGX,EAAElO,EAAE6O,GAAgB,OAAbjL,KAAKkL,EAAE,MAAaZ,GACpT8D,EAAE1T,UAAUsT,EAAE,SAAS7R,GAAG,IAAIC,EAAmCkO,EAAEsqE,EAAnC3pE,EAAEjL,KAAK4X,MAAMpd,OAAOwF,KAAKiL,EAAE,EAAE,EAAQiD,EAAElO,KAAK4X,MAAM7K,EAAE/M,KAAK7D,EAA8M,OAA5MA,IAAI,iBAAkBA,EAAEsB,IAAIwN,EAAE9O,EAAEsB,GAAG,iBAAkBtB,EAAEy5E,IAAI3qE,GAAG9O,EAAEy5E,IAAI,EAAE3qE,EAA+CX,GAAdsqE,GAA3B1mE,EAAE1T,OAAOwF,KAAKiL,GAAGjL,KAAKzD,EAAE,GAAY,EAAP,IAAU,GAAMwQ,EAAEvS,OAAOuS,EAAEvS,OAAOo6E,EAAE7nE,EAAEvS,QAAQ,EAAG8P,EAAEyC,EAAEvS,OAAOyQ,EAAElO,GAAGX,EAAE,IAAIg2B,WAAW9nB,IAAKpK,IAAI6M,GAAI3Q,EAAE2Q,EAAS/M,KAAK7D,EAAEC,GACrTgS,EAAE1T,UAAU4C,EAAE,WAAW,IAA0B4N,EAAoD0pE,EAAE1mE,EAAEnB,EAAEi1C,EAAhF7lD,EAAE,EAAEC,EAAE4D,KAAK7D,EAAE8O,EAAEjL,KAAKkO,EAAI5D,EAAE,IAAKvN,EAAEq1B,WAAW+B,OAAOn0B,KAAK/D,GAAG+D,KAAKkL,EAAE,QAAgB,GAAG,IAAID,EAAEzQ,OAAO,OAAOuC,EAAEiD,KAAK7D,EAAEi5E,SAAS,MAAMp1E,KAAKkL,GAAGlL,KAAK7D,EAAE0B,MAAM,MAAMmC,KAAKkL,GAAO,IAAJ0pE,EAAE,EAAM1mE,EAAEjD,EAAEzQ,OAAOo6E,EAAE1mE,IAAI0mE,EAAc,IAAJ7nE,EAAE,EAAMi1C,GAAf92C,EAAED,EAAE2pE,IAAep6E,OAAOuS,EAAEi1C,IAAIj1C,EAAEzC,EAAEnO,KAAK+O,EAAE6B,GAAW,IAAR6nE,EAAE,MAAU1mE,EAAElO,KAAKkL,EAAE0pE,EAAE1mE,IAAI0mE,EAAEtqE,EAAEnO,KAAKC,EAAEw4E,GAAa,OAAV50E,KAAKkO,EAAE,GAAUlO,KAAK2jD,OAAOr5C,GACjV8D,EAAE1T,UAAUqjC,EAAE,WAAW,IAAI5hC,EAAEC,EAAE4D,KAAKkL,EAAkI,OAAhInO,EAAEiD,KAAKrD,GAAGR,EAAE,IAAIi2B,WAAWh2B,IAAK8D,IAAIF,KAAK7D,EAAEi5E,SAAS,EAAEh5E,IAAKD,EAAE6D,KAAK7D,EAAEi5E,SAAS,EAAEh5E,IAAI4D,KAAK7D,EAAE3B,OAAO4B,IAAI4D,KAAK7D,EAAE3B,OAAO4B,GAAGD,EAAE6D,KAAK7D,GAAU6D,KAAK2jD,OAAOxnD,GAC3L26E,EAAEp8E,UAAUsnD,EAAE,WAAW,IAAiB5lD,EAAE6O,EAAf9O,EAAE6D,KAAK4X,MAAuC,GAA7Bxb,EAAE4D,KAAK+1E,EAAE/zB,IAAIhiD,KAAKiL,EAAEjL,KAAK+1E,EAAE9qE,EAAKjL,KAAKi1E,EAAE,CAAChqE,GAAG9O,EAAE6D,KAAKiL,MAAM,GAAG9O,EAAE6D,KAAKiL,MAAM,GAAG9O,EAAE6D,KAAKiL,MAAM,EAAE9O,EAAE6D,KAAKiL,QAAQ,EAAE,IAAIC,EAAE9O,EAAE,GAAG,iBAAkB8O,EAAE,CAAC,IAAkB0pE,EAAE1mE,EAAhB5D,EAAEY,EAAE/B,MAAM,IAAY,IAAJyrE,EAAE,EAAM1mE,EAAE5D,EAAE9P,OAAOo6E,EAAE1mE,EAAE0mE,IAAItqE,EAAEsqE,IAAuB,IAAnBtqE,EAAEsqE,GAAGhqE,WAAW,MAAU,EAAEM,EAAEZ,EAAE,IAAI,IAAuBhN,EAAnByP,EAAE,EAAEi1C,EAAE,EAAE9lD,EAAEgP,EAAE1Q,OAASiD,EAAE,EAAE,EAAEvB,GAAG,CAAiBA,GAAhBoB,EAAE,KAAKpB,EAAE,KAAKA,EAAO,GAAa8lD,GAAVj1C,GAAG7B,EAAEzN,aAAkBH,GAAGyP,GAAG,MAAMi1C,GAAG,MAAM,GAAG/2C,KAAK+2C,GAAG,GAAGj1C,KAAK,EAAE,MAAMw+B,MAAM,6BAA8B,OAAOnvC,GAAG,IAAI46E,EAAG,EAAEr6E,EAAE,eAAem6E,GAAGn6E,EAAE,oCAAoCm6E,EAAEp8E,UAAUsnD,GAAG,IAA+Bk1B,EAAEC,EAAEC,EAAEC,EAAjCC,EAAE,CAACC,SAASrC,EAAEt5E,EAAE47E,MAAMtC,EAAEn4E,GAAY,GAAGtC,OAAO6R,KAAK4qE,EAAEz8E,OAAO6R,KAAKgrE,QAAQ,IAAIH,KAAKD,EAAE,GAAGE,EAAE,EAAEE,EAAEJ,EAAEE,KAAKD,EAAM,IAAJC,EAAE,EAAMC,EAAGH,EAAE18E,OAAO48E,EAAEC,IAAKD,EAASz6E,EAAE,4BAATw6E,EAAED,EAAEE,IAAkCE,EAAEH,IACrsB,IAAIM,EAAKjD,EAAIiD,M,sFCZb,iBACC,WAAoBt0E,GAAA,KAAAA,QAEpB,KAAAu0E,yBAA0C,KAsB3C,OApBC,YAAA1f,4BAAA,SAA4B2f,GAC3B33E,KAAK03E,yBAA2BC,GAEjC,sBAAI,sCAAuB,C,IAA3B,WACC,OAAO33E,KAAK03E,0B,gCAEb,sBAAI,iCAAkB,C,IAAtB,WACC,OAAI13E,KAAKmuC,wBACYnuC,KAAKmD,MAAMK,KAAKxD,KAAKmuC,0BAGzC/qC,QAAQmT,KAAK,gCACNvW,KAAK43E,qB,gCAIN,YAAAA,iBAAR,WACC,IAAMz8D,EAAOnb,KAAKmD,MAAMgY,KACxB,OAAOA,EAAKa,cAAc,sBAAsB,IAAMb,EAAKa,cAAc,uBAAuB,IAElG,EAzBA,GAAa,EAAA8pC,qB,8ECMb,iBAKC,WAAoBhyC,GAAA,KAAAA,SAJZ,KAAA+jE,OAAiD,IAAIv+C,IACrD,KAAAw+C,aAAuB,EACvB,KAAAC,oBAAsB/3E,KAAKg4E,cAAc36E,KAAK2C,MAGrDA,KAAK83E,aAAe,EA+CtB,OA5CC,YAAAljD,MAAA,WACC50B,KAAK83E,cAAgB,GAEtB,YAAAhjD,QAAA,WACC90B,KAAK83E,cAAgB,EACjB93E,KAAK83E,aAAe,IACvB93E,KAAK83E,aAAe,GAGrB93E,KAAKi4E,iBAIN,sBAAI,sBAAO,C,IAAX,WACC,OAAOj4E,KAAK83E,aAAe,G,gCAG5B,YAAAI,QAAA,SAAQ10E,EAAqB20E,GAC5Bn4E,KAAK63E,OAAO33E,IAAIsD,EAAKykB,cAAekwD,IAGrC,YAAAF,cAAA,WACKj4E,KAAKo4E,SAMTp4E,KAAK63E,OAAOj2E,QAAQ5B,KAAK+3E,sBASlB,YAAAC,cAAR,SAAsBG,EAAwD1tE,GAC7E,IAAMjH,EAAOxD,KAAK8T,OAAOK,MAAMk9D,aAAa5mE,GACxCjH,IACHxD,KAAK63E,OAAOQ,OAAO5tE,GACnBjH,EAAK6gB,iBAAiBi0D,qBAAqBH,KAG9C,EArDA,GAAa,EAAAnyB,U,8ECTb,aAkBA,aAKC,aAHA,KAAAuyB,SAAmB,EAIlBv4E,KAAKsU,OAAS,IAAI,EAAAkkE,MAAM,CACvBC,UAAU,EACVC,UAAU,EACVC,YAAY,IA6Kf,OAzKC,YAAAxkE,MAAA,WACC,OAAOnU,KAAKsU,QAEb,YAAAkyC,UAAA,SAAUrjD,GACTnD,KAAK8T,OAAS3Q,GAEf,YAAAA,MAAA,WACC,OAAOnD,KAAK8T,QAGb,YAAAM,QAAA,WACC,MAAiB,IAAIpU,KAAKu4E,UAAY,IAGvC,YAAAlkE,QAAA,SAAQ7Q,GACPxD,KAAKsU,OAAOD,QAAQ7Q,EAAKykB,cAAezkB,IAGzC,YAAAwR,WAAA,SAAWxR,GACVxD,KAAKsU,OAAOU,WAAWxR,EAAKykB,gBAG7B,YAAAgpD,eAAA,SAAeM,GAEd,IADA,IAAM7mB,EAAyB,GAChB,MAAA6mB,EAAA,eAAK,CAAf,IAAI9mE,EAAE,KACJjH,EAAOxD,KAAKqxE,aAAa5mE,GAC3BjH,GACHknD,EAAM5vD,KAAK0I,GAGb,OAAOknD,GAeR,YAAA2mB,aAAA,SAAa5mE,GACZ,OAAOzK,KAAKsU,OAAO9Q,KAAKiH,IAGzB,YAAA0K,QAAA,SAAQD,EAAoBiT,GAC3B,IAAMywD,EAAS1jE,EAAI+S,cACbI,EAAUF,EAAKF,cAErB,GAAIjoB,KAAKsU,OAAOukE,QAAQD,IAAW54E,KAAKsU,OAAOukE,QAAQxwD,GAAU,CAChEroB,KAAKsU,OAAOwkE,QAAQF,EAAQvwD,GAG5B,IAEI0wD,GAAkB,EAKtB,SAPsB/4E,KAAK8T,QAAS9T,KAAK8T,OAAOmL,mBAAmBC,cAIlE65D,GAAmB,EAAAC,IAAIC,UAAUj5E,KAAKsU,SAGnCykE,GACH/4E,KAAKsU,OAAO4kE,WAAWN,EAAQvwD,IACxB,IAEPnT,EAAImP,iBAAiB80D,4CAEd,GAIR,OADA/1E,QAAQmT,KAAK,wCAAwCqiE,EAAM,OAAOvwD,IAC3D,GAIT,YAAAhT,WAAA,SAAWH,EAAoBiT,GAC9B,GAAIjT,GAAOiT,EAAM,CAChB,IAAMixD,EAAWlkE,EAAI+S,cACfoxD,EAAYlxD,EAAKF,cACvBjoB,KAAKsU,OAAO4kE,WAAWE,EAAUC,GAEjCnkE,EAAImP,iBAAiB80D,6CAGvB,YAAA5jE,wBAAA,SAAwB/R,GAEvB,IADA,IACwB,MADHxD,KAAK6V,aAAarS,GACf,eAAc,CAAjC,IAAI81E,EAAW,KACnBt5E,KAAKqV,WAAWikE,EAAa91E,KAG/B,YAAAiS,sBAAA,SAAsBjS,GAErB,IADA,IACsB,MADHxD,KAAK+V,WAAWvS,GACb,eAAY,CAA7B,IAAI+1E,EAAS,KACjBv5E,KAAKqV,WAAW7R,EAAM+1E,KAsBxB,YAAA5jE,gBAAA,SAAgBlL,GACf,OAAOzK,KAAKsU,OAAOuB,aAAapL,IAAO,IAExC,YAAAoL,aAAA,SAAarS,GACZ,IAAM+tE,EAAMvxE,KAAK2V,gBAAgBnS,EAAKykB,eACtC,OAAOjoB,KAAKixE,eAAeM,IAE5B,YAAAiI,cAAA,SAAc/uE,GACb,OAAOzK,KAAKsU,OAAOyB,WAAWtL,IAAO,IAEtC,YAAAsL,WAAA,SAAWvS,GACV,IAAM+tE,EAAMvxE,KAAKw5E,cAAch2E,EAAKykB,gBAAkB,GACtD,OAAOjoB,KAAKixE,eAAeM,IAGpB,YAAAkI,aAAR,SAAqBj2E,EAAqByzE,GAIzC,IAHA,IAAM1F,EAAyB,GAC3BmI,EAAW15E,KAAKi3E,GAAQzzE,EAAKykB,eAE1ByxD,EAASl/E,OAAS,GAAG,CAE3B,IADA,IAAMm/E,EAAgB,GACF,MAAAD,EAAA,eACnB,IADI,IAAItlE,EAAO,KACU,MAAApU,KAAKi3E,GAAQ7iE,GAAb,eAAuB,CAA3C,IAAIwlE,EAAY,KACpBD,EAAc7+E,KAAK8+E,GAIrB,IAAe,UAAAF,EAAA,eAAU,CAApB,IAAIjvE,EAAE,KACV8mE,EAAIz2E,KAAK2P,GAEV,IAAe,UAAAkvE,EAAA,eAAe,CAArBlvE,EAAE,KACVivE,EAAS5+E,KAAK2P,GAEfivE,EAAWC,EAEZ,OAAOpI,GAER,YAAAsI,oBAAA,SAAoBr2E,GACnB,OAAOxD,KAAKy5E,aAAaj2E,EAAM,oBAEhC,YAAAs2E,kBAAA,SAAkBt2E,GACjB,OAAOxD,KAAKy5E,aAAaj2E,EAAM,kBAEhC,YAAAyS,iBAAA,SAAiBzS,GAChB,IAAM+tE,EAAMvxE,KAAK65E,oBAAoBr2E,GACrC,OAAOxD,KAAKixE,eAAeM,IAE5B,YAAAp7D,eAAA,SAAe3S,GACd,IAAM+tE,EAAMvxE,KAAK85E,kBAAkBt2E,GACnC,OAAOxD,KAAKixE,eAAeM,IAE7B,EAtLA,GAAa,EAAAtrB,a,6GCdb,aAGC,aAFQ,KAAA8zB,qBAAkD,IAAIzgD,IACtD,KAAA0gD,UAAwB,GA8BjC,OA3BC,YAAArzD,SAAA,SAASnjB,GACRxD,KAAK+5E,qBAAqB75E,IAAIsD,EAAKykB,cAAezkB,IAEnD,YAAAsY,YAAA,SAAYtY,GACXxD,KAAK+5E,qBAAqB1B,OAAO70E,EAAKykB,eAEA,GAAlCjoB,KAAK+5E,qBAAqBv0E,MAC7BxF,KAAKi6E,SAIC,YAAAA,MAAR,WAEC,IADA,IAAInlE,EACIA,EAAW9U,KAAKg6E,UAAUj4D,OACjCjN,KAII,YAAA8xC,yBAAN,W,oGACC,OAAsC,GAAlC5mD,KAAK+5E,qBAAqBv0E,KAC7B,IAEO,CAAP,EAAO,IAAIwc,SAAQ,SAACC,EAASC,GAC5B,EAAK83D,UAAUl/E,KAAKmnB,cAIxB,EAhCA,GAAa,EAAAjI,kB,8ECDb,MACA,YAUA,aACC,WAAoB7W,GAAA,KAAAA,QA2BrB,OAvBC,YAAA+2E,aAAA,SAAaC,GACZn6E,KAAKo6E,iBAAmBD,GAGzB,sBAAI,8BAAe,C,IAAnB,WACC,OAAOn6E,KAAKo6E,kB,gCAEb,YAAA79D,SAAA,SAAS89D,EAAwBh+D,EAAiDriB,G,MAC5D,QAArB,EAAAgG,KAAKo6E,wBAAgB,SAAEE,eAAeD,EAASh+D,EAAYriB,IAE5D,sBAAI,2BAAY,C,IAAhB,WACC,OACCgG,KAAKmD,MAAM8b,mBAAmBs7D,QACL,MAAzBv6E,KAAKo6E,kBACLp6E,KAAKmD,MAAM8b,mBAAmBu7D,gBAC7B,EAAA3mE,KAAKL,e,gCAQT,EA5BA,GAAa,EAAAszC,oB,yFCIP2zB,EAAkB,CACvB1oC,WAAW,GAKZ,aAQC,aAPA,KAAA2oC,kBAA4B,EAC5B,KAAAC,iBAA2B,EAC3B,KAAAC,WAA+B,GAC/B,KAAAC,UAA6B,GACrB,KAAAC,iBAA2B,EAC3B,KAAAd,UAAwB,GA0JjC,OAtJC,YAAAe,mBAAA,WACM/6E,KAAK86E,kBACT96E,KAAK86E,iBAAkB,IAGzB,YAAAjpC,kBAAA,SAAkBP,GACjB,IAAIM,EAAmC,KAavC,OAZI5xC,KAAK86E,kBACRlpC,EAAK5xC,KAAKg7E,yBAAyB1pC,GAAQ,IAEvCM,IACJA,EAAK5xC,KAAKg7E,yBAAyB1pC,GAAQ,IAQrCM,GAEA,YAAAopC,yBAAR,SAAiC1pC,EAA2B2pC,GAC3D,IAAIC,EAAeD,EAAS,SAAW,QACnCrpC,EAAKN,EAAO6pC,WAAWD,EAAcT,GAKzC,OAJK7oC,IACJspC,EAAeD,EAAS,sBAAwB,qBAChDrpC,EAAKN,EAAO6pC,WAAWD,EAAcT,IAE/B7oC,GAYR,YAAAY,kBAAA,SAAkB/0B,GACjB,GAAKA,EAA+B29D,YACnC,MAAM,IAAI7vC,MAAM,6BAEhB9tB,EAA+B29D,YAAcp7E,KAAK06E,mBAAqB,EAexE16E,KAAK46E,WAAYn9D,EAA+B29D,aAAe39D,EAEpB,GAAvChjB,OAAO6R,KAAKtM,KAAK46E,YAAYpgF,QAChCwF,KAAKq7E,8BAA8B59D,IAGrC,YAAAo1B,oBAAA,SAAoBp1B,UACZzd,KAAK46E,WAAYn9D,EAA+B29D,aACvD39D,EAASD,WAEF,YAAA89D,eAAR,WACC,IAAMC,EAAW9gF,OAAO6R,KAAKtM,KAAK46E,YAAY,GAC9C,OAAIW,EACIv7E,KAAK46E,WAAWW,GAEjB,MAER,YAAAC,UAAA,WACC,OAAO/gF,OAAO4S,OAAOrN,KAAK46E,aAGnB,YAAAS,8BAAR,SAAsC59D,GAErC,IADA,IAAI3I,EACIA,EAAW9U,KAAKg6E,UAAUj4D,OACjCjN,EAAS2I,IAIL,YAAAg+D,kBAAN,W,sGAEC,OADMh+D,EAAWzd,KAAKs7E,kBAEd,CAAP,EAAO79D,GAEA,CAAP,EAAO,IAAIuE,SAAQ,SAACC,EAASC,GAC5B,EAAK83D,UAAUl/E,KAAKmnB,cAyDxB,EAhKA,GAAa,EAAAtP,uB,8ECPb,8BACS,KAAA+oE,eAAiD,GACjD,KAAAC,0BAAoD,GACpD,KAAAC,uBAAyD,GAmDlE,OAjDC,YAAA1oE,cAAA,SAAc1P,EAA2B2P,EAA4BnV,GACpE,IAAMw+B,EAAUh5B,EAAK7D,eACfk8E,EAAYr4E,EAAK1F,OAIvB,GAHAkC,KAAK07E,eAAel/C,GAAWx8B,KAAK07E,eAAel/C,IAAY,GAE/Bx8B,KAAK07E,eAAel/C,GAASq/C,GAE5D,MAAM,IAAItwC,MAAM,QAAQ/O,EAAO,IAAIq/C,EAAS,uBAE7C77E,KAAK07E,eAAel/C,GAASq/C,GAAar4E,EAEtC2P,IACHnT,KAAK27E,0BAA0Bn/C,GAAWx8B,KAAK27E,0BAA0Bn/C,IAAY,GACrFx8B,KAAK27E,0BAA0Bn/C,GAASq/C,GAAa1oE,GAEtDnT,KAAK47E,uBAAuBp/C,GAAWx8B,KAAK47E,uBAAuBp/C,IAAY,GAC3Ex+B,IACHgC,KAAK47E,uBAAuBp/C,GAASq/C,GAAa79E,IAGpD,YAAA89E,gBAAA,SAAgBt/C,EAAiBq/C,UACzB77E,KAAK07E,eAAel/C,GAASq/C,UAC7B77E,KAAK27E,0BAA0Bn/C,GAASq/C,UACxC77E,KAAK47E,uBAAuBp/C,GAASq/C,IAE7C,YAAAE,6CAAA,SAA6Cv/C,EAAsBw/C,GAAnE,WAEC,OADYh8E,KAAK07E,eAAel/C,GAEL/hC,OAAO4S,OAAOrN,KAAK07E,eAAel/C,IACnCnV,QAAO,SAAC7jB,G,MAC1BxF,EAAU,EAAK49E,uBAAuBp/C,GAASh5B,EAAK1F,QAC1D,OAAQE,IAA0B,QAAnB,EAAIA,EAAc,YAAC,eAAEi7B,SAAS+iD,OAGvC,IAGT,YAAA5oE,iBAAA,SAAiBopB,EAAsBw/C,GAGtC,IAFA,IAAMhgE,EAAiD,GAEtC,MADHhc,KAAK+7E,6CAA6Cv/C,EAASw/C,GACxD,eAAO,CAAnB,IAAIx4E,EAAI,KAEZwY,EADaxY,EAAK1F,QACI0F,EAEvB,OAAOwY,GAER,YAAAigE,oBAAA,SAAoBz/C,EAAsB1+B,GACzC,OAAOkC,KAAK27E,0BAA0Bn/C,GAAS1+B,IAEjD,EAtDA,GAAa,EAAA+U,iB,8ECfb,iBACC,WAAoB1P,GAAA,KAAAA,QAEZ,KAAA+4E,8BAAwC,EAWjD,OATC,YAAAC,uBAAA,WACC,OAAOn8E,KAAKmD,MAAM8b,mBAAmBs7D,QAAUv6E,KAAKk8E,8BAGrD,YAAAE,kBAAA,SAAkBtnE,GACjB9U,KAAKk8E,8BAA+B,EACpCpnE,IACA9U,KAAKk8E,8BAA+B,GAEtC,EAdA,GAAa,EAAAtiE,uB,yFCAb,aACC,WAAoBzW,GAAA,KAAAA,QAEpB,KAAAk5E,gBAA0B,EAC1B,KAAAC,gBAA0B,EAC1B,KAAAC,sBAAgC,EA+DjC,OA7DC,YAAAC,gBAAA,WACCx8E,KAAKy8E,oBAAmB,IAEnB,YAAAC,eAAN,W,gHACC,SAAM18E,KAAKy8E,oBAAmB,I,cAA9B,S,YAMa,YAAAA,mBAAd,SAAiCz9D,G,gHAEhC,OADAhf,KAAKq8E,eAAiBr9D,EACtB,GAAMhf,KAAK28E,iBAAiB38E,KAAKq8E,iB,cAAjC,S,YAED,sBAAI,yBAAU,C,IAAd,WACC,OAAOr8E,KAAKq8E,gB,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAQr8E,KAAKq8E,gB,gCAEd,sBAAI,4BAAa,C,IAAjB,WACC,OAAOr8E,KAAKs8E,gB,gCAGP,YAAAK,gBAAN,SAAsBtwB,G,6HACjBrsD,KAAKs8E,iBAAmBjwB,EAAxB,OACHrsD,KAAKs8E,eAAiBjwB,EAClBrsD,KAAKs8E,gBAIFnhE,EAAOnb,KAAKmD,MAAMgY,MAEvB,GAAMA,EAAK88D,iBADR,MALD,O,OAMF,S,yEAcJ,YAAA2E,uBAAA,W,MACC,IAAK58E,KAAKu8E,qBAAsB,CAC/Bv8E,KAAKu8E,sBAAuB,EAE5B,IAAMnb,EAASvU,SAASgwB,eAAe,2BACnCzb,IACiB,QAApB,EAAAA,EAAO0b,qBAAa,SAAEC,YAAY3b,MAQtC,EApEA,GAAa,EAAAna,qB,8ECAb,aAGA,0BACS,KAAA+1B,WAAuD,GACvD,KAAA5oE,QAAkB,EAClB,KAAA6oE,UAAoB,IAgC7B,OA9BC,YAAAC,SAAA,SAAS7mE,EAAsB8mE,EAA4BjmE,GAC1D,IAAMzM,EAAKzK,KAAKi9E,UACVG,EAA+B,IAAI,EAAAC,2BAA2BhnE,EAAO8mE,EAAWjmE,EAAWzM,GAOjG,OANAzK,KAAKg9E,WAAW9lE,GAAalX,KAAKg9E,WAAW9lE,IAAc,GAC3DlX,KAAKg9E,WAAW9lE,GAAWzM,GAAM2yE,EAEjCp9E,KAAKoU,SAAW,EAChBpU,KAAKi9E,UAAY,GAAGj9E,KAAKoU,QAElBgpE,GAER,YAAAE,WAAA,SAAWC,GACNv9E,KAAKg9E,WAAWO,EAAIrmE,mBAChBlX,KAAKg9E,WAAWO,EAAIrmE,WAAWqmE,EAAI9yE,KAK5C,YAAA+yE,qBAAA,SAAqBh6E,GACpB,IAAM0T,EAAY1T,EAAK0T,YACjBumE,EAAOz9E,KAAKg9E,WAAW9lE,GACzBumE,IACahjF,OAAO6R,KAAKmxE,GACpB77E,SAAQ,SAAC87E,GACJD,EAAKC,GACbC,kBAAkBn6E,aAEhBxD,KAAKg9E,WAAW9lE,KAG1B,EAnCA,GAAa,EAAAivC,+B,8ECAb,iBACC,WACS9vC,EACA8mE,EACDjmE,EACAzM,GAHC,KAAA4L,QACA,KAAA8mE,YACD,KAAAjmE,YACA,KAAAzM,KAEPrH,QAAQC,IAAIrD,KAAKm9E,UAAWn9E,KAAKqW,OAOnC,OAJC,YAAAsnE,kBAAA,SAAkBn6E,GACjBJ,QAAQmT,KAAK,wCAGf,EAdA,GAAa,EAAA8mE,6BAgBb,iBAIC,aAHO,KAAAO,kBAAqC,GACrC,KAAAC,cAA0B,GASlC,OANC,YAAAC,sBAAA,SAAsBC,GACrB/9E,KAAK49E,kBAAoBG,GAE1B,YAAAC,kBAAA,SAAkBC,GACjBj+E,KAAK69E,cAAgBI,GAEvB,EAXA,GAAa,EAAAC,yB,yFClBb,4BACA,2BACA,2BACA,SACA,QAKA,aACC,WAAoB/6E,GAAA,KAAAA,QAGpB,KAAAg7E,yBAAgD,GAChD,KAAAC,wCAA4F,GAoG7F,OAlGC,YAAA33B,KAAA,WACCzmD,KAAKq+E,MAAQ,IAAI,EAAAC,mBAAmBt+E,KAAKmD,OACzCnD,KAAKq+E,MAAM1jE,2BAEX3a,KAAKq+E,MAAME,sBAGZ,sBAAI,mBAAI,C,IAAR,WACC,OAAOv+E,KAAKq+E,O,gCAEb,YAAAG,kBAAA,SAAkBv0E,GACjB,IAAMD,EAAQC,EAAKd,MAAM,KAErBuhD,EAAQ1qD,KAAKmb,KAAKY,WAEhBlb,GADN6pD,EAAQA,EAAMrjC,QAAO,SAAC7jB,GAAS,SAAA0G,WAAWH,iBAAiBvG,EAAKnH,KAAM2N,OAChDK,KAAI,SAAC8xC,GAAQ,OAAAA,EAAI5+C,UACvC,OAAO,UAAesD,IAEvB,YAAAoc,MAAA,WAEC,I,MAAkB,MADDjd,KAAKmb,KAAKY,WACT,eAAU,CAAvB,IAAIs+C,EAAK,KACgB,QAA7B,EAAAr6D,KAAKmb,KAAKU,2BAAmB,SAAEC,YAAYu+C,KAO7C,YAAA72D,KAAA,SAAK4T,GACJ,MAAa,MAATA,EACIpX,KAAKmb,KAELnb,KAAKmb,KAAK3X,KAAK4T,IAGxB,YAAAqnE,UAAA,WAIC,IAHA,IAAI/zB,EAAwB,CAAC1qD,KAAKmb,MAC9BujE,EAAkC,CAAC1+E,KAAKmb,MACxCoM,EAAQ,EACLm3D,EAAgBlkF,OAAS,GAAK+sB,EAAQ,IAAI,CAChD,IAAMxL,EAAW,UAChB2iE,EAAgBr0E,KAAI,SAACs0E,GACpB,OAAIA,EAAevlE,mBACXulE,EAAe5iE,WAEf,OAIV2uC,EAAQ,UAAcA,EAAO3uC,GAC7B2iE,EAAkB3iE,EAClBwL,GAAS,EAEV,OAAO,UAAemjC,IAGvB,YAAAhd,8BAAA,WACC1tC,KAAKm+E,yBAA2B,IAEjC,YAAAS,gCAAA,SAAgCp7E,GAC3BA,EAAK4V,oBAAsB5V,EAAKqY,sBACnC7b,KAAKm+E,yBAAyB36E,EAAKqY,oBAAoBgjE,2BAA4B,IAGrF,YAAAC,wBAAA,WACC,OAAOrkF,OAAO6R,KAAKtM,KAAKm+E,0BACtBnzE,OACAX,KAAI,SAACzO,GAAM,OAAAA,EAAEmjF,kBAGhB,YAAAC,yBAAA,SAAyBx7E,GACxB,IAAMg5B,EAAUh5B,EAAK7D,eACfk8E,EAAYr4E,EAAK1F,KACvBkC,KAAKo+E,wCAAwC5hD,GAC5Cx8B,KAAKo+E,wCAAwC5hD,IAAY,GAC1Dx8B,KAAKo+E,wCAAwC5hD,GAASq/C,GACrD77E,KAAKo+E,wCAAwC5hD,GAASq/C,IAAc,GACrE77E,KAAKo+E,wCAAwC5hD,GAASq/C,GAAWr4E,EAAKykB,eAAiBzkB,GAGxF,YAAAy7E,8BAAA,SAA8Bz7E,GAC7B,IAAMg5B,EAAUh5B,EAAK7D,eACfk8E,EAAYr4E,EAAK1F,YAChBkC,KAAKo+E,wCAAwC5hD,GAASq/C,GAAWr4E,EAAKykB,gBAG9E,YAAAi3D,mBAAA,SAAmB1iD,EAAsBq/C,GACxC,IAAMnxB,EAAQ,GACd,GAAI1qD,KAAKo+E,wCAAwC5hD,GAAU,CAC1D,IAAM2iD,EAAen/E,KAAKo+E,wCAAwC5hD,GAASq/C,GAC3E,GAAIsD,EACH,IAAe,UAAA1kF,OAAO6R,KAAK6yE,GAAZ,eAA2B,CAArC,IAAI10E,EAAE,KACVigD,EAAM5vD,KAAKqkF,EAAa10E,KAI3B,OAAOigD,GAET,EAzGA,GAAa,EAAArE,mB,yFCZb,QAIA,SAeA,MACA,YAOA,OAEA,QAEMvlB,EAAe,IADrB,yB,+CAA2D,OAAlB,iBAAkB,EAA3D,CAAyC,EAAA3hC,mBAGzC,yE,OACC,EAAA0iC,cAAgBf,EAQR,EAAArhB,QAAiB,IAAI,EAAApZ,MACrB,EAAA+4E,oBAAmD,GACnD,EAAAC,sBAAqD,GACrD,EAAAC,oBAA8C,GAE9C,EAAAC,sBAAgC,EAE9B,EAAAvmE,6BAA+B,EAAApZ,YAAYkf,I,EA8QtD,OA9RwC,iBAEhC,EAAAhhB,KAAP,WACC,MAAO,OAcR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,OAI1BzmD,KAAK46C,UAAU4kC,sBAAsBx/E,KAAKy/E,cAAcpiF,KAAK2C,OAC7DA,KAAK46C,UAAU8kC,yBAAyB1/E,KAAK2/E,iBAAiBtiF,KAAK2C,QAQpE,YAAAu+E,mBAAA,WACCv+E,KAAKyf,QAAQpjB,KAAO,UACpB2D,KAAK8T,OAAO49B,cAAcpyB,IAAItf,KAAKyf,UAQpC,YAAAliB,OAAA,WACC,OAAOyC,KAAKyf,SAEb,YAAA7D,YAAA,SAAgD9d,GAC/C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAkDle,GACjD,OAAO,YAAMke,cAAa,UAACle,IAG5B,YAAA8hF,+BAAA,WACC,OAAO,GAGR,YAAAC,aAAA,SAAar8E,GACZ,IAAMiH,EAAKjH,EAAKykB,cAChB,GAAoC,MAAhCjoB,KAAKo/E,oBAAoB30E,GAC5B,OAAQzK,KAAKo/E,oBAAoB30E,GAAMjH,GAInC,YAAAy0E,cAAN,W,6IAGC,IAFAj4E,KAAKq/E,sBAAwB,GACvB9N,EAAM92E,OAAO6R,KAAKtM,KAAKo/E,qBACxB,EAAL,EAAe,EAAA7N,EAAA,eAAN9mE,EAAE,KACJjH,EAAOxD,KAAKo/E,oBAAoB30E,UAC/BzK,KAAKo/E,oBAAoB30E,GAE1ByM,EAAY,QAAQ1T,EAAKib,aAAY,KAAKjb,EAAK0T,YAarDlX,KAAKq/E,sBAAsBnoE,GAAa1T,E,OAGnCixB,EAAWh6B,OAAO6R,KAAKtM,KAAKq/E,uBAChCr0E,OACAX,KAAI,SAACy1E,GACL,IAAMt8E,EAAO,EAAK67E,sBAAsBS,GACxC,OAAO,EAAK3gE,cAAc3b,MAG5B,EAAAxD,MAA2B,EAAAA,KAAKs/E,qBAAL,MAA6B,GAAMt/E,KAAK+/E,oC,OAAZ,EAAC,S,wBAAxD,EAAKT,oBAAsB,EAE3Bt/E,KAAKu/E,qBAAuB/mB,YAAYC,MACxCz2C,QAAQ0S,IAAID,GAAUrE,MAAK,WAC1B,EAAAvc,KAAKxQ,IAAI,iBAAiB,EAAKF,MAAM9G,KAAI,SAAQm8D,YAAYC,MAAQ,EAAK8mB,0B,YAW5E,YAAApgE,cAAA,SAAc3b,GACRxD,KAAKmD,MAAM8b,mBAAmBu7D,cAIlCx6E,KAAKggF,aAAax8E,GAHlBxD,KAAK6/E,aAAar8E,IAmCpB,YAAAy8E,oBAAA,SAAoBz8E,GAGnB,GAAIA,EAAK6b,wBAAyB,CAIjC,IAAM6gE,EAAa18E,EAAKhD,GAAGiX,OAAOG,MAAM,GACxC,OAAIsoE,EAGIA,EAAWC,eAEXngF,KAAKyf,QAIb,OAAO,MAIT,YAAAugE,aAAA,SAAax8E,GASZ,GAAIA,EAAK6b,wBAAyB,CACjC,IAAM+gE,EAAgBpgF,KAAKigF,oBAAoBz8E,GAC3C48E,IAKC58E,EAAK68E,cAER78E,EAAK4b,qBAAqBghE,GAG1B58E,EAAK+b,+BAmBT,YAAA+gE,kBAAA,SAAkB98E,GACjBA,EAAK+b,6BAEN,YAAAghE,qBAAA,WAEC,IADA,IACkB,MADDvgF,KAAK+b,WACJ,eAAU,CAC3B,GADa,KACH6D,0BACT,OAAO,EAGT,OAAO,GAGF,YAAAmgE,iCAAN,W,8HACOS,EAAYxgF,KAAKgc,cAAc,OAC/BykE,EAAqC,G,IACtB,EAAAD,E,wBAAA,WACC,IADbE,EAAQ,MACoB7gE,gBADP,M,OACR,WAEpB4gE,EAAWC,EAASz4D,eAAiBy4D,G,wBAHlB,I,aAMrB,MAAO,CAAP,EAAOD,WAuBR,YAAAl8D,wBAAA,SAAwB/gB,GACvBxD,KAAKmf,cAAc3b,IAWpB,YAAAghB,6BAAA,SAA6BhhB,GAC5BxD,KAAKmf,cAAc3b,IAUZ,YAAAi8E,cAAR,SAAsBj8E,GACjBA,GACHxD,KAAKmf,cAAc3b,IAGb,YAAAm8E,iBAAR,SAAyBn8E,GACpBA,GACHxD,KAAKsgF,kBAAkB98E,IAG1B,EA9RA,CAAwC,EAAAm9E,sBAA3B,EAAArC,sB,yFCjCb,QACA,QACA,SAEA,SAEA,yE,OACC,EAAAh/E,qBAAmE,IAAI,EAAAC,yBACtE,EACA,EAAAqhF,kB,EAMF,OATsE,iBAM9D,EAAAjhF,aAAP,WACC,OAAO,EAAAC,YAAY8e,SAErB,EATA,CAAsE,EAAA7a,WAAzD,EAAA88E,uBAYb,+B,+CAAqE,OAA3B,iBAA2B,EAArE,CAA0CA,GAA7B,EAAAE,wB,8ECRb,iBAWC,WAAoBr9E,GAAA,KAAAA,OAVpB,KAAAs9E,aAAuB,EACvB,KAAAC,QAAkB,EA4LnB,OA7KC,sBAAI,uBAAQ,C,IAAZ,WACC,OAAuB,IAAhB/gF,KAAK+gF,Q,gCAEb,sBAAI,8BAAe,C,IAAnB,WACC,OAAO/gF,KAAKghF,kB,gCAEb,sBAAI,0BAAW,C,IAAf,WACC,OAAOhhF,KAAK8gF,c,gCAEb,YAAAjsE,oBAAA,SAAoBxY,EAAc46E,GACjCj3E,KAAKihF,uBAAyBjhF,KAAKihF,wBAA0B,GAC7DjhF,KAAKkhF,kBAAoBlhF,KAAKkhF,mBAAqB,GAE9ClhF,KAAKihF,uBAAuBhoD,SAAS58B,GAIzC+G,QAAQmT,KAAK,kBAAkBla,EAAI,kBAAmB2D,KAAKihF,yBAH3DjhF,KAAKihF,uBAAuBnmF,KAAKuB,GACjC2D,KAAKkhF,kBAAkBpmF,KAAKm8E,KAK9B,YAAA3yD,SAAA,SAASjoB,GACR,QAAI2D,KAAKihF,wBACDjhF,KAAKihF,uBAAuBhoD,SAAS58B,IAU9C,YAAAsY,mBAAA,WACC3U,KAAK+gF,QAAS,GAEf,YAAAI,4BAAA,SAA4Bz2B,GAC3B1qD,KAAKohF,yBAA2B12B,EAAMrgD,KAAI,SAAC/M,GAAM,OAAAA,EAAE2qB,kBAKpD,YAAAzT,UAAA,SAAU2jE,EAAoDkJ,GAC5C,MAAbA,IACHA,GAAY,GAIZlJ,GACAn4E,KAAKohF,0BACLphF,KAAKohF,yBAAyBnoD,SAASk/C,EAA4BlwD,iBAKjC,MAA/BkwD,IACHA,EAA8Bn4E,KAAKwD,MAkBpCxD,KAAK+gF,QAAS,EACd/gF,KAAKghF,iBAAmBxoB,YAAYC,MACpCz4D,KAAK8gF,cAAgB,EAErB9gF,KAAKs4E,qBAAqBH,IAGR,IAAdkJ,GAEHrhF,KAAK0U,qBAAqByjE,KAI5B,YAAAG,qBAAA,SAAqBH,GACpB,GAAIn4E,KAAKkhF,kBAAmB,CAC3B,IAAMvsD,EAAS30B,KAAKwD,KAAKL,MAAMwxB,OAC/B,GAAIA,EAAOyjD,QACVzjD,EAAOujD,QAAQl4E,KAAKwD,KAAM20E,QAE1B,IAAiB,UAAAn4E,KAAKkhF,kBAAL,eAAwB,EACxCprC,EADY,MACPqiC,MAST,YAAAzjE,qBAAA,SAAqByjE,GAKpBn4E,KAAKshF,mBAAqBthF,KAAKshF,oBAAsBthF,KAAKwD,KAAK0S,uBAE/D,IAAsB,UAAAlW,KAAKshF,mBAAL,eAAyB,CAA7B,KACPj9D,iBAAiB7P,UAAU2jE,GAJpB,KA6BnB,YAAAoJ,uBAAA,WACCvhF,KAAKshF,wBAAqBj4E,GAE3B,YAAA8vE,yCAAA,WACCn5E,KAAKuhF,yBACL,IAAwB,UAAAvhF,KAAKwD,KAAKwS,yBAAV,eAAoC,CAAxC,KACPqO,iBAAiBk9D,2BAgChC,EA9LA,GAAa,EAAAttE,mB,8ECVb,WACA,QAEA,QAQA,aAaC,WAAoBzQ,EAAoBqK,EAAeC,QAAf,IAAAD,MAAA,QAAe,IAAAC,MAAA,GAAnC,KAAAtK,OAZZ,KAAAk4D,UAAqB,IAAI,EAAA5qC,QACzB,KAAA0wD,OAAiB,GACjB,KAAAC,eAAyB,EACzB,KAAAC,OAAgB,IAAI,EAAAx8E,MAAM,IAAM,IAAM,KAEtC,KAAAy8E,kBAA4B,EAE5B,KAAAxsD,MAAwB,CAC/BtnB,EAAG,EACHC,EAAG,GAIH9N,KAAK07D,UAAU7tD,EAAIA,EACnB7N,KAAK07D,UAAU5tD,EAAIA,EAqFrB,OAlFC,YAAA8zE,kBAAA,SAAkBlyB,GACjB1vD,KAAKyhF,eAAiB/xB,GAEvB,YAAAmyB,cAAA,WACC,OAAO7hF,KAAKyhF,gBAEb,YAAAK,UAAA,SAAUxvD,GACTtyB,KAAKwhF,OAASlvD,GAEf,YAAAA,MAAA,WACC,OAAOtyB,KAAKwhF,QAEb,YAAAO,YAAA,SAAYC,GACXhiF,KAAKiiF,SAAWD,EAChBhiF,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAU62E,0BAE1B,sBAAI,sBAAO,C,IAAX,WACC,OAAOliF,KAAKiiF,U,gCAEb,YAAAE,UAAA,SAAUv9E,GACT5E,KAAK0hF,OAAS98E,GAEf,YAAAA,MAAA,WACC,OAAO5E,KAAK0hF,QAQb,YAAAjqD,sBAAA,WACCz3B,KAAK2hF,kBAAmB,GAEzB,YAAAS,mBAAA,WACC,OAAOpiF,KAAK2hF,kBAGb,YAAA18D,KAAA,SAAKuS,GACJx3B,KAAK07D,UAAUz2C,KAAKuS,EAAQ/nB,UAC5BzP,KAAK0hF,OAAOz8D,KAAKuS,EAAQ5yB,UAG1B,sBAAI,uBAAQ,C,IAAZ,WACC,OAAO5E,KAAK07D,W,gCAGb,YAAAC,aAAA,SAAaC,EAAgC9tD,GAC5C,QAD4C,IAAAA,MAAA,GACxC8tD,aAAwB,EAAA9qC,QAC3B9wB,KAAK07D,UAAUz2C,KAAK22C,OACd,CACN,IAAM/tD,EAAI+tD,EACV57D,KAAK07D,UAAUx7D,IAAI2N,EAAGC,GAEvB9N,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUg3E,2BAG1B,YAAAC,UAAA,SAAU1hC,EAAiB2hC,QAAA,IAAAA,OAAA,GAC1BviF,KAAK07D,UAAUp8C,IAAIshC,GAEf2hC,IACHviF,KAAK07D,UAAU7tD,EAAI7E,KAAKykB,MAAMztB,KAAK07D,UAAU7tD,GAC7C7N,KAAK07D,UAAU5tD,EAAI9E,KAAKykB,MAAMztB,KAAK07D,UAAU5tD,IAG9C9N,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUg3E,2BAW1B,YAAA7lE,QAAA,WAIC,OAHAxc,KAAKm1B,MAAMtnB,EAAI7N,KAAK07D,UAAU7tD,EAC9B7N,KAAKm1B,MAAMrnB,EAAI9N,KAAK07D,UAAU5tD,EAC9B9N,KAAKm1B,MAAM6sD,QAAUhiF,KAAKiiF,SACnBjiF,KAAKm1B,OAEd,EApGA,GAAa,EAAA7b,U,8ECTb,aACA,SAEA,EAGC,SAAsB9V,GAAA,KAAAA,OAFtB,KAAAg/E,eAAiB,IAAI,EAAAC,mBAAmBziF,KAAKwD,MAC7C,KAAA8Z,MAAQ,IAAI,EAAAolE,WAAW1iF,KAAKwD,OAFhB,EAAAkW,oB,8ECDb,iBACC,WAAsBlW,GAAA,KAAAA,OAsCvB,OApCC,sBAAI,qBAAM,C,IAAV,WACC,OAAOxD,KAAK2iF,6BAA+B3iF,KAAK4iF,6B,gCAGjD,YAAAD,0BAAA,WAEC,IADA,IACuB,MADH3iF,KAAKwD,KAAKif,OAAOsW,MACd,eAAa,CAA/B,IAAIrS,EAAU,KACZrQ,EAAQrW,KAAKwD,KAAKif,OAAO/lB,IAAIgqB,GACnC,GAAIrQ,GAASA,EAAMia,OAAOkyD,eAAepiF,OACxC,OAAO,EAGT,OAAO,GAGR,YAAAwiF,0BAAA,WAEC,IADA,IACkB,MADH5iF,KAAKwD,KAAKhD,GAAGiX,OAAOA,SACjB,eAAQ,CAArB,IAAIG,EAAK,KACb,GAAIA,GAASA,EAAM0Y,OAAOkyD,eAAepiF,OACxC,OAAO,EAGT,OAAO,GAGR,YAAAyiF,qBAAA,WACC,IAAMltE,EAAkB3V,KAAKwD,KAAKoS,qBAAqBvL,KAAI,SAAC/M,GAAM,OAAAA,EAAE2qB,iBAC9D66D,EAAa9iF,KAAKwD,KAAKL,MAAM8qC,gBAAgB/lB,WAC9CvS,EAAgBsjB,SAAS6pD,EAAW76D,gBACxCjoB,KAAKwD,KAAKyR,gBAAgB6tE,IAG5B,YAAAC,uBAAA,WACC,IAAMD,EAAa9iF,KAAKwD,KAAKL,MAAM8qC,gBAAgB/lB,WACnDloB,KAAKwD,KAAK4R,mBAAmB0tE,IAE/B,EAvCA,GAAa,EAAAL,sB,8ECHb,YAIA,aAEC,WAAsBj/E,GAAA,KAAAA,OA2BvB,OAzBC,YAAAtD,IAAA,SAAI4B,GACC9B,KAAKgjF,UAAYlhF,IACpBsB,QAAQmT,KAAK,QAASzU,GACtB9B,KAAKgjF,SAAWlhF,EAChB9B,KAAKosD,cAGP,sBAAI,sBAAO,C,IAAX,WACC,OAAOpsD,KAAKgjF,U,gCAEb,YAAA/lE,MAAA,WACCjd,KAAKE,SAAImJ,IAEV,sBAAI,qBAAM,C,IAAV,WACC,OAAwB,MAAjBrJ,KAAKgjF,U,gCAGH,YAAA52B,UAAV,WACsB,MAAjBpsD,KAAKgjF,UAERhjF,KAAKwD,KAAKzC,cAAc,KAAM,eAAef,KAAKgjF,SAAQ,KAG3DhjF,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAU43E,gBAE3B,EA7BA,GAAa,EAAAP,c,8ECJb,aAGA,QAEA,aAIC,WAAsBl/E,GAAA,KAAAA,OAHd,KAAA0/E,QAA+B,KA2CxC,OAtCC,sBAAI,qBAAM,C,IAAV,WACC,OAAOljF,KAAKkjF,S,gCAGb,YAAAjoE,WAAA,SAAW5a,GACNA,GAAUL,KAAKwD,KAAK0X,kBAAkB7a,SACzCL,KAAKkjF,QAAU7iF,EACXL,KAAKkjF,SAERljF,KAAKwD,KAAK6W,gBAAgBi7B,uBAAuB,EAAAl7B,eAAe+6B,UAAUn1C,KAAKwD,SAKlF,YAAA2/E,YAAA,W,UACC,OAAkD,QAA3C,EAAgC,QAAhC,EAAW,QAAX,EAAAnjF,KAAKK,cAAM,eAAEwb,2BAAmB,eAAE2sC,iBAAS,eAAE46B,SAASpjF,KAAKwD,SAAS,GAE5E,YAAA0T,UAAA,WACC,IAAMmsE,EAAY,EAAA/rE,WAAWzY,UAC7B,GAAoB,MAAhBmB,KAAKkjF,QAAiB,CACzB,IAAMI,EAAmBtjF,KAAKkjF,QAAQhsE,YACtC,OAAIosE,IAAqBD,EACjBC,EAAmBtjF,KAAKwD,KAAKnH,KAE7BinF,EAAmBD,EAAYrjF,KAAKwD,KAAKnH,KAGjD,OAAOgnF,GAIT,YAAAE,cAAA,WACC,GAAIvjF,KAAKwjF,qBACR,IAAiB,UAAAxjF,KAAKwjF,qBAAL,eAA2B,EAC3C1tC,EADY,UAKhB,EA5CA,GAAa,EAAA/8B,6B,8ECAb,IAEA,2BAiDA,OAhDQ,EAAAsqE,UAAP,WACC,MAJgB,KAOV,EAAA1rE,UAAP,SAAiB6O,EAAwBpP,EAAcC,GACtD,IAAKmP,EACJ,OAAO,KAGR,IAAMtd,EAAqBkO,EAAKjO,MAZhB,KAYiCke,QAAO,SAAC/c,GAAM,OAAAA,EAAE9P,OAAS,KACpEipF,EAAgBv6E,EAAS,GAE3Bw6E,EAAiC,KACrC,GAAgB,MAAZtsE,EAAK,GAGF,CACN,OAAQqsE,GACP,IAAK,KACJC,EAAYl9D,EAASnmB,OACrB,MACD,IAAK,IACJqjF,EAAYl9D,EACZ,MACD,QAICk9D,EAAYl9D,EAAShjB,KAAKigF,GAW5B,GAJIC,GAAarsE,GAChBA,EAAgBsP,SAAS88D,EAAeC,GAGxB,MAAbA,GAAqBx6E,EAAS1O,OAAS,EAAG,CAC7C,IAAMmpF,EAAYz6E,EAASrL,MAAM,GAAGgM,KA3CtB,KA4Cd65E,EAAY1jF,KAAK2X,UAAU+rE,EAAWC,EAAWtsE,GAElD,OAAOqsE,EA7BP,IAAME,EAAiBxsE,EAAKxO,OAAO,GAgCpC,OA/BC86E,EAAY1jF,KAAK2X,UAAU6O,EAASrL,KAAMyoE,EAAgBvsE,IAiC7D,EAjDA,GAAa,EAAAoR,mB,yFCRb,QACA,QAEA,QAEA,4BACA,4BACA,2BACA,4BACA,QAEA,SACA,4BAEA,QASA,aAcC,WAAsBjlB,EAA4BqgF,GAA5B,KAAArgF,OAA4B,KAAAqgF,WAX1C,KAAAC,UAAsC,GACtC,KAAAC,kBAA0C,GAC1C,KAAAC,uCAA+D,GAE/D,KAAAC,2BAAqC,EAuT9C,OAnTC,sBAAI,wBAAS,C,IAAb,WACC,OAAQjkF,KAAKkkF,WAAalkF,KAAKkkF,YAAc,IAAI,UAAclkF,KAAKwD,O,gCAIrE,YAAAijD,KAAA,SAAK09B,QAAA,IAAAA,OAAA,GAOJnkF,KAAK8jF,UAAY,GAGbK,IACHnkF,KAAKikF,0BAA4BE,EAC7BnkF,KAAKikF,4BACRjkF,KAAKokF,eAAiB,IAAI,EAAAhuE,cAAcpW,KAAKwD,KAAKL,MA/B7B,YAiCrBnD,KAAKwD,KAAKyR,gBAAgBjV,KAAKokF,mBAKlC,sBAAI,sBAAO,C,IAAX,WACC,OAAOpkF,KAAK6jF,U,gCAIb,YAAAtuC,eAAA,SAAe/xC,EAAoBoL,GAElC,IAAIy1E,EAIJ,GAFAz1E,GADAA,EAAWA,EAASzG,QAAQ,gBAAiB,MACzBA,QAAQ,SAAU,KAEsB,OAAvDk8E,EAA0BrkF,KAAK8jF,UAAUl1E,IAAoB,CAEjE,GAAIpL,EAAKnH,OAASuS,GAAYy1E,EAAwBp8D,gBAAkBzkB,EAAKykB,cAC5E,OAMD,OAFArZ,EAAW,EAAA1E,WAAWvC,UAAUiH,GAEzB5O,KAAKu1C,eAAe/xC,EAAMoL,GAGjC,IAAM01E,EAAe9gF,EAAKnH,KAGJ2D,KAAK8jF,UAAUQ,WAE7BtkF,KAAK8jF,UAAUQ,GAIvBtkF,KAAK8jF,UAAUl1E,GAAYpL,EAC3BA,EAAK6W,gBAAgBm7B,wBAAwB5mC,GAC7C5O,KAAKukF,sBAAsB/gF,GAC3BxD,KAAKwD,KAAKL,MAAMsqC,iBAAiBuxC,yBAAyBx7E,IAI5D,YAAAq7E,uBAAA,WACC,OAAU7+E,KAAKwD,KAAK7D,eAAc,IAAIK,KAAKwD,KAAK1F,MAGjD,YAAA0mF,2BAAA,WACC,OAAIxkF,KAAK6jF,SACD,EAAAhwE,KAAKT,iBAAiBpT,KAAK6jF,SAAU7jF,KAAKwD,KAAK1F,OAEtDsF,QAAQmT,KAAK,+CAAgDvW,KAAKwD,KAAK1F,KAAMkC,KAAKwD,MAC3E,KAUT,YAAAoY,YAAA,SAAYigE,GACX,GAAyC,MAArC77E,KAAKwkF,6BACR,KAAM,6BAA6BxkF,KAAKwD,KAAK0T,YAAW,IAExD,IAAMutE,EAAazkF,KAAKwkF,6BAA6B3I,GAErD,GAAkB,MAAd4I,EAAoB,CACvB,IAAM3iF,EAAU,aAAa+5E,EAAS,kBAAkB77E,KAAKwD,KAAK0T,YAAW,KAAKzc,OAAO6R,KACxFtM,KAAKwkF,8BACJ36E,KAAK,MAAK,KAAK7J,KAAK6jF,SAAQ,KAAK7jF,KAAKwD,KAAK1F,KAAI,IAEjD,MADAsF,QAAQka,MAAMxb,GACRA,EAEN,IAAM6zC,EAAa,IAAI8uC,EAAWzkF,KAAKwD,KAAKL,MAAO,cAAc04E,GAIjE,OAHAlmC,EAAWh7B,2BAEX3a,KAAK2mB,SAASgvB,GACPA,GAKV,YAAAhvB,SAAA,SAASgvB,GASR,GAJAA,EAAW16B,WAAWjb,KAAKwD,MAC3BmyC,EAAWlzB,OAAOgkC,OAClB9Q,EAAWz6B,kBAAkBqoE,gBAC7B5tC,EAAWt7B,gBAAgBq7B,qBACvBC,EAAWv8B,oBAAsBu8B,EAAW95B,oBAC/C,IAAkB,UAAA85B,EAAW95B,oBAAoBE,WAA/B,eAA2C,CAA/C,KACP1B,gBAAgBq7B,qBAkBxB,OAfA11C,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUq5E,QAAS,CAACC,gBAAiBhvC,EAAWn5B,YAC3Dxc,KAAKwD,KAAKL,MAAMyhF,qBAAqBzI,0BACxCxmC,EAAWiF,UAAUid,YAEtB73D,KAAKu1C,eAAeI,EAAY,EAAAv7B,eAAe+6B,UAAUQ,IACzD31C,KAAKwD,KAAKo3C,UAAUiqC,aAAalvC,GAG7B31C,KAAKikF,2BAA6BjkF,KAAKokF,gBAC1CpkF,KAAKokF,eAAenvE,gBAAgB0gC,GAEjCA,EAAW36B,kBACdhb,KAAKwD,KAAKL,MAAM2hF,iBAAiB/J,qBAG3BplC,GAMR,YAAA75B,YAAA,SAAY65B,G,QACX,GAAIA,EAAWt1C,QAAUL,KAAKwD,KAC7B,OAAOJ,QAAQmT,KAAK,QAAQo/B,EAAWt5C,KAAI,qBAAqB2D,KAAKwD,KAAK0T,aAG1Ey+B,EAAWjhC,qBAAqB1U,KAAKwD,MAEjCxD,KAAKikF,2BAA6BjkF,KAAKokF,gBAC1CpkF,KAAKokF,eAAehvE,mBAAmBugC,GAGpC31C,KAAKwoD,UAAU46B,SAASztC,IAC3B31C,KAAKwoD,UAAUhpC,OAAO,CAACm2B,IAGxB,IAAM,EAAmBA,EAAWn1C,GAAG82B,YAAYytD,yBACN,QAA7C,EAAApvC,EAAWn1C,GAAG82B,YAAYmxB,2BAAmB,SAAE7mD,SAAQ,SAACu2B,GACnDA,GACHA,EAAiB9iB,WAAW,CAAC4G,WAAW,OAGI,QAA9C,EAAA05B,EAAWn1C,GAAG82B,YAAYoD,4BAAoB,SAAE94B,SAAQ,SAACojF,GACxD,GAAIA,IACHA,EAAkB3vE,WAAW,CAAC4G,WAAW,IACrC,GAAkB,CACrB,IAAMgpE,EAAU,EAAiBz+D,SAC3B0+D,EAAmBF,EAAkB1sD,aACrC6sD,EAAWH,EAAkBrqD,UAC7ByqD,EAAkBJ,EAAkBv0D,YAC1C00D,EAAS3kF,GAAGiX,OAAOwE,UAAUmpE,EAAiBH,EAASC,OAM1DvvC,EAAWngC,8BAGXmgC,EAAW16B,WAAW,aACfjb,KAAK8jF,UAAUnuC,EAAWt5C,MACjC2D,KAAKqlF,2BAA2B1vC,GAChC31C,KAAKwD,KAAKL,MAAMsqC,iBAAiBwxC,8BAA8BtpC,GAE/D31C,KAAKwD,KAAKo3C,UAAU0qC,gBAAgB3vC,GACpCA,EAAWiF,UAAUkd,YACrBniB,EAAWv5B,KAAK,EAAA/Q,UAAUk6E,QAAS,CAACC,UAAWxlF,KAAKwD,KAAKykB,iBAI3D,YAAAtQ,UAAA,SAAUP,GAIT,GAAY,MAARA,EACH,OAAO,KAER,GAAIA,IAAS,EAAAE,WAAWgR,SAAWlR,IAAS,EAAAE,WAAWiR,mBACtD,OAAOvoB,KAAKwD,KAEb,GAAI4T,IAAS,EAAAE,WAAW6P,QAAU/P,IAAS,EAAAE,WAAWkR,kBACrD,OAAOxoB,KAAKwD,KAAKnD,OAGlB,IAAMgjF,EAAY,EAAA/rE,WAAW+rE,YACzBjsE,EAAK,KAAOisE,IACfjsE,EAAOA,EAAKvP,UAAU,EAAGuP,EAAK5c,SAG/B,IAAM0O,EAAWkO,EAAKjO,MAAMk6E,GAC5B,GAAwB,IAApBn6E,EAAS1O,OAAc,CAC1B,IAAM,EAAO0O,EAAS,GACtB,OAAOlJ,KAAK8jF,UAAU,GAEtB,OAAO,EAAAxsE,WAAWK,UAAU3X,KAAKwD,KAAM4T,IAIzC,YAAAmtE,sBAAA,SAAsB/gF,GACrB,IAAMiiF,EAAUjiF,EAAKykB,cACfnqB,EAAO0F,EAAK1F,KAClBkC,KAAK+jF,kBAAkBjmF,GAAQkC,KAAK+jF,kBAAkBjmF,IAAS,GAC1D,UAAgBkC,KAAK+jF,kBAAkBjmF,GAAO2nF,IAClDzlF,KAAK+jF,kBAAkBjmF,GAAMhD,KAAK2qF,GAEnCzlF,KAAK0lF,6CAA6CliF,IAEnD,YAAA6hF,2BAAA,SAA2B7hF,GAC1B,IAAMiiF,EAAUjiF,EAAKykB,cACfnqB,EAAO0F,EAAK1F,KAClB,GAAIkC,KAAK+jF,kBAAkBjmF,GAAO,CACjC,IAAMqE,EAAQnC,KAAK+jF,kBAAkBjmF,GAAMwG,QAAQmhF,GAC/CtjF,GAAS,IACZnC,KAAK+jF,kBAAkBjmF,GAAMpC,OAAOyG,EAAO,GACA,GAAvCnC,KAAK+jF,kBAAkBjmF,GAAMtD,eACzBwF,KAAK+jF,kBAAkBjmF,IAIjCkC,KAAK2lF,kDAAkDniF,IAExD,YAAAkiF,6CAAA,SAA6CliF,G,MACtCiiF,EAAUjiF,EAAKykB,cACfnqB,EAAO0F,EAAK7D,eAClBK,KAAKgkF,uCAAuClmF,GAAQkC,KAAKgkF,uCAAuClmF,IAAS,GACpG,UAAgBkC,KAAKgkF,uCAAuClmF,GAAO2nF,IACvEzlF,KAAKgkF,uCAAuClmF,GAAMhD,KAAK2qF,GAEpDzlF,KAAKwD,KAAKnD,QAAUL,KAAKwD,KAAKnD,OAAO+Y,qBACJ,QAApC,EAAApZ,KAAKwD,KAAKnD,OAAOwb,2BAAmB,SAAE6pE,6CAA6CliF,KAGrF,YAAAmiF,kDAAA,SAAkDniF,G,MAC3CiiF,EAAUjiF,EAAKykB,cACfnqB,EAAO0F,EAAK7D,eAClB,GAAIK,KAAKgkF,uCAAuClmF,GAAO,CACtD,IAAMqE,EAAQnC,KAAKgkF,uCAAuClmF,GAAMwG,QAAQmhF,GACpEtjF,GAAS,IACZnC,KAAKgkF,uCAAuClmF,GAAMpC,OAAOyG,EAAO,GACA,GAA5DnC,KAAKgkF,uCAAuClmF,GAAMtD,eAC9CwF,KAAKgkF,uCAAuClmF,IAIlDkC,KAAKwD,KAAKnD,QAAUL,KAAKwD,KAAKnD,OAAO+Y,qBACJ,QAApC,EAAApZ,KAAKwD,KAAKnD,OAAOwb,2BAAmB,SAAE8pE,kDAAkDniF,KAI1F,YAAAwY,cAAA,SAAcle,GACb,IAAMkzE,EAAWhxE,KAAK+jF,kBAAkBjmF,IAAS,GAC3CqW,EAAQnU,KAAKwD,KAAKL,MAAMgR,MACxBu2C,EAAwB,GAO9B,OANAsmB,EAASpvE,SAAQ,SAAC6jF,GACjB,IAAMjiF,EAAO2Q,EAAMk9D,aAAaoU,GAC5BjiF,GACHknD,EAAM5vD,KAAK0I,MAGNknD,GAOR,YAAAk7B,4CAAA,SAA4CppD,GAC3C,OAA+D,MAAxDx8B,KAAKgkF,uCAAuCxnD,IAKpD,YAAAzgB,SAAA,WACC,OAAO,UAAc/b,KAAK8jF,YAE3B,YAAA+B,eAAA,WACC,OAAO,UAAc,UAAY7lF,KAAK8jF,aAKvC,YAAAgC,kBAAA,SAAkBhxE,GACjB,I,MAAkB,MAAA9U,KAAK+b,WAAL,eAAiB,CAA9B,IAAIs+C,EAAK,KACbvlD,EAASulD,GAEgB,QAAzB,EAAAA,EAAMx+C,2BAAmB,SAAEiqE,kBAAkBhxE,KAGhD,EA9TA,GAAa,EAAAoE,+B,6FCrBb,4BACA,4BAEA,4BACA,QAEA,aAEC,WAAoBoJ,GAAA,KAAAA,QADpB,KAAAyjE,UAAsB,GAsDd,KAAA5wD,MAAkB,GAM3B,OAtDC,YAAA3xB,KAAA,WACC,OAAOxD,KAAKsiB,OAGb,YAAAooC,MAAA,WACC,OAAO1qD,KAAKsiB,MAAMnf,MAAMgR,MAAM88D,eAAejxE,KAAK+lF,YAGnD,YAAA3C,SAAA,SAAS5/E,GACR,OAAOxD,KAAK+lF,UAAU9sD,SAASz1B,EAAKykB,gBAErC,YAAArD,OAAA,SAAO8lC,GACN,IAAMsmB,EAAWtmB,EAAMrgD,KAAI,SAAC7G,GAAS,OAAAA,EAAKykB,iBAAejd,OACzD,OAAO,UAAegmE,EAAUhxE,KAAK+lF,YAGtC,YAAA9oE,MAAA,WACCjd,KAAK+lF,UAAY,GACjB/lF,KAAKgmF,qBAEN,YAAA9lF,IAAA,SAAIwqD,GAEH1qD,KAAK+lF,UAAY,GACjB/lF,KAAKsf,IAAIorC,IAGV,YAAAprC,IAAA,SAAI2mE,GAGH,IAAMC,EAAkBD,EAAa57E,KAAI,SAAC7G,GAAS,OAAAA,EAAKykB,iBACxDjoB,KAAK+lF,UAAY,UAAa/lF,KAAK+lF,UAAWG,GAE9ClmF,KAAKgmF,qBAGN,YAAAxmE,OAAA,SAAO2mE,GAGN,IAAMC,EAAqBD,EAAgB97E,KAAI,SAAC7G,GAAS,OAAAA,EAAKykB,iBAC9DjoB,KAAK+lF,UAAY,UAAkB/lF,KAAK+lF,UAAWK,GAEnDpmF,KAAKgmF,qBAGE,YAAAA,kBAAR,WACChmF,KAAKsiB,MAAMlG,KAAK,EAAA/Q,UAAUg7E,oBAI3B,YAAA7pE,QAAA,WAGC,OAFAxc,KAAKm1B,MAAQn1B,KAAKm1B,OAAS,GAC3Bn1B,KAAKm1B,MAAQn1B,KAAK+lF,UAAU17E,KAAI,SAACI,GAAO,OAAAA,KACjCzK,KAAKm1B,OAEd,EA7DA,G,2FCHA,iBAMC,WAAsB3xB,GAAA,KAAAA,OALZ,KAAA8iF,qBAAsB,EACtB,KAAAC,oBAA+C,GACjD,KAAAC,uBAAkD,GAClD,KAAAC,iBAA+B,GAC/B,KAAAC,iBAA+B,GAwExC,OArEC,YAAAC,uBAAA,WACC3mF,KAAKsmF,qBAAsB,GAE5B,sBAAI,iCAAkB,C,IAAtB,WACC,OAAOtmF,KAAKwD,KAAKL,MAAM8b,mBAAmBs7D,QAAUv6E,KAAKsmF,qB,gCAO1D,YAAA9G,sBAAA,SAAsB1qE,GACrB9U,KAAKumF,oBAAoBzrF,KAAKga,IAE/B,YAAA+vE,aAAA,SAAarhF,GACZxD,KAAK4mF,8BAA8B5mF,KAAKumF,oBAAqB/iF,IAQ9D,YAAAk8E,yBAAA,SAAyB5qE,GACxB9U,KAAKwmF,uBAAuB1rF,KAAKga,IAElC,YAAAwwE,gBAAA,SAAgB9hF,GACfxD,KAAK4mF,8BAA8B5mF,KAAKwmF,uBAAwBhjF,IAQjE,YAAAivE,gBAAA,SAAgB39D,GACf9U,KAAKymF,iBAAiB3rF,KAAKga,IAE5B,YAAA+iD,UAAA,WACC73D,KAAK6mF,cAAc7mF,KAAKymF,mBAQzB,YAAAK,gBAAA,SAAgBhyE,GACf9U,KAAK0mF,iBAAiB5rF,KAAKga,IAE5B,YAAAgjD,UAAA,WACC93D,KAAK6mF,cAAc7mF,KAAK0mF,mBAQf,YAAAG,cAAV,SAAwBE,GACvB,IAAiB,UAAAA,EAAA,eAAO,EACvBjxC,EADY,UAIJ,YAAA8wC,8BAAV,SAAwCG,EAAgCpxC,GACvE,IAAiB,UAAAoxC,EAAA,eAAO,EACvBjxC,EADY,MACPH,KAGR,EA7EA,GAAa,EAAA/7B,uB,yFCHb,QAEA,aAeC,WAAoBpW,GAAA,KAAAA,OAdpB,KAAAwjF,UAAoB,EACpB,KAAAC,aAAuB,EACvB,KAAAC,gBAA0B,EAE1B,KAAAC,uBAAiC,EAGjC,KAAAC,WAAqB,EAErB,KAAAC,kBAA4B,EAG5B,KAAAC,6BAAuC,EAuNxC,OAnNC,YAAAC,2BAAA,WACCvnF,KAAKsnF,6BAA8B,GAGpC,sBAAI,yBAAU,C,IAAd,WACC,OAAyB,IAAlBtnF,KAAKgnF,U,gCAEb,sBAAI,0BAAW,C,IAAf,WACC,OAAOhnF,KAAKinF,c,gCAEb,sBAAI,wBAAS,C,IAAb,WACC,OAAOjnF,KAAKonF,Y,gCAWL,YAAAI,oBAAR,WACCxnF,KAAKgnF,UAAW,EAChBhnF,KAAKynF,yBAA2BznF,KAAKwD,KAAK6gB,iBAAiBqjE,iBAEpD,YAAAC,yBAAR,SAAiCC,GACb,MAAfA,IACHA,EAAc5nF,KAAKwD,KAAKL,MAAMq1D,YAAYqvB,SAEvCD,IACH5nF,KAAK8nF,iBAAmBtvB,YAAYC,QAIxB,YAAAsvB,yBAAd,SAAuCxsE,G,6HAClCvb,KAAKwD,KAAK8sB,OAAOhT,MAAMld,QAC1BJ,KAAK2b,W,OADF,M,OAKF,O,sBAAA,GAAM3b,KAAKwD,KAAK8X,KAAKC,I,cAArB,S,+BAEAvb,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,yBAAyB,EAAC,MACrDkD,QAAQka,MAAMtd,KAAKwD,KAAK0T,YAAa,GACrClX,KAAK2b,W,+BAKF,YAAA6U,UAAN,W,8HACC,OAAIxwB,KAAKgoF,WACR,KAEDhoF,KAAKwnF,uBACCI,EAAc5nF,KAAKwD,KAAKL,MAAMq1D,YAAYqvB,WAE/C7nF,KAAKioF,6BAA+BzvB,YAAYC,OAEjDz4D,KAAKwD,KAAK8sB,OAAOhT,MAAML,QAGE,GAAMjd,KAAKkoF,+B,OAKpC,GALMC,EAAmB,SAEzBnoF,KAAK2nF,yBAAyBC,GAExBrsE,EAAiB,GACnB4sE,EAEH,IADIC,OAAe,EACV9tF,EAAI,EAAGA,EAAI6tF,EAAiB3tF,OAAQF,KAC5C8tF,EAAkBD,EAAiB7tF,MAE9B0F,KAAKwD,KAAKhD,GAAGiX,OAAO4wE,mCAAmC/tF,GAC1DihB,EAAezgB,KAAKstF,EAAgBv0D,uBAEpCtY,EAAezgB,KAAKstF,EAAgBpmF,iBAMxC,SAAMhC,KAAK+nF,yBAAyBxsE,I,cAApC,S,YAEK,YAAAyC,yBAAN,W,gHAEC,OADAhe,KAAKwD,KAAKL,MAAMuY,gBAAgBiL,SAAS3mB,KAAKwD,MAC1CxD,KAAKgoF,YAKR5kF,QAAQmT,KAAK,2CAA4CvW,KAAKwD,KAAK0T,aACnE,MAEDlX,KAAKwnF,sBACLxnF,KAAK2nF,2BACL3nF,KAAKwD,KAAK8sB,OAAOhT,MAAML,QAEvB,GAAMjd,KAAKwD,KAAKif,OAAO6lE,a,OACvB,OADA,SACA,GAAMtoF,KAAK+nF,yBAAyB,K,cAApC,S,YAKD,YAAApsE,SAAA,SAAS7Z,GACR9B,KAAKuoF,yBAEL,IAAMb,EAAkB1nF,KAAKwD,KAAK6gB,iBAAiBqjE,gBAC5B,MAAnBA,GAA2BA,IAAoB1nF,KAAKynF,0BACvDznF,KAAKwD,KAAKmR,qBACV3U,KAAKwoF,4BAEL,EAAA30E,KAAKxQ,IAAI,aAAcqkF,EAAiB1nF,KAAKynF,yBAA0BznF,KAAKwD,KAAK0T,aACjFlX,KAAKgnF,UAAW,EAChBhnF,KAAKwwB,cAIP,YAAAg4D,wBAAA,WACKxoF,KAAKgoF,aAERhoF,KAAKgnF,UAAW,EAIhBhnF,KAAKyoF,oBAGLx4D,WAAWjwB,KAAKwD,KAAKlE,qBAAqB+wB,kBAAkBhzB,KAAK2C,KAAKwD,KAAKlE,sBAAuB,KAG5F,YAAAipF,uBAAR,WACKvoF,KAAKgoF,YACqB,MAAzBhoF,KAAK8nF,mBACR9nF,KAAKinF,cAAgB,IAaxB,YAAAwB,kBAAA,WACC,GAAIzoF,KAAKwD,KAAKL,MAAMq1D,YAAYqvB,QAAS,CACxC,IAAMa,EAAgBlwB,YAAYC,MAEO,MAArCz4D,KAAKioF,+BACRjoF,KAAKmnF,uBAAyBuB,EAAgB1oF,KAAKioF,6BACnDjoF,KAAKioF,kCAA+B5+E,GAGD,MAAhCrJ,KAAK2oF,yBAA4D,MAAzB3oF,KAAK8nF,mBAChD9nF,KAAKqnF,kBAAoBrnF,KAAK8nF,iBAAmB9nF,KAAK2oF,yBAG1B,MAAzB3oF,KAAK8nF,mBACR9nF,KAAKonF,WAAasB,EAAgB1oF,KAAK8nF,iBACvC9nF,KAAK8nF,sBAAmBz+E,GAGzBrJ,KAAKknF,eAAiBl+E,KAAKC,IAAIjJ,KAAKknF,eAAgBlnF,KAAKonF,YAGtDpnF,KAAKwD,KAAKL,MAAMq1D,YAAYqvB,SAC/B7nF,KAAKwD,KAAKL,MAAMq1D,YAAYowB,sBAAsB5oF,KAAKwD,OAQnD,YAAA0kF,2BAAN,W,6HAGKC,EAA6C,GAC7CnoF,KAAKsnF,4BACW,GAAMtnF,KAAKwD,KAAKhD,GAAGiX,OAAOoxE,0BAD1C,M,OACHV,EAAmB,S,iBAQS,OAJzBnoF,KAAKwD,KAAKL,MAAMq1D,YAAYqvB,UAC/B7nF,KAAK2oF,wBAA0BnwB,YAAYC,OAGf,GAAMz4D,KAAKwD,KAAKif,OAAO6lE,Y,OAOpD,OAP6B,SAOtB,CAAP,EAAOH,WAIR,sBAAI,oCAAqB,C,IAAzB,WACC,OAAOnoF,KAAKmnF,wB,gCAGb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOnnF,KAAKqnF,mB,gCAEb,YAAAyB,qBAAA,SAAqBC,GAEpB,OAAO//E,KAAKykB,MADM,IACAs7D,GADA,KAGpB,EApOA,GAAa,EAAA/uE,kB,kFCERgvE,EANL,E,KAAA,wBACA,QAEA,SAGA,SAAKA,GACJ,gCACA,oCAFD,CAAKA,MAAO,KAcZ,iBAGC,WAAsBxlF,GAAA,KAAAA,OAsGvB,OA5FC,YAAAylF,iBAAA,WACC,OAAOjpF,KAAKkpF,6BAA6BF,EAAQG,aAGlD,YAAAC,mBAAA,WACC,OAAOppF,KAAKkpF,6BAA6BF,EAAQK,eAE1C,YAAAH,6BAAR,SAAqCjS,GAGpC,IAHD,WAEO8G,EAA+B,GACnB,MAFH/9E,KAAKwD,KAAKif,OAAOiS,IAEd,eAAQ,CAArB,IAAIre,EAAK,KACb0nE,EAAYjjF,KAAKub,GAElB0nE,EAAYjjF,KAAKkF,KAAKwD,MAGtB,IAFA,IACI8lF,EAA6B,GACV,MAFHvL,EAEG,eAAa,CAA/B,IAAIwL,EAAU,KAClBvpF,KAAKwpF,2BAA2BD,EAAYtS,EAAQqS,GAGrD,GAAIrS,GAAU+R,EAAQG,WACrB,IAAiB,UAAAnpF,KAAKypF,uBAAL,eAA6B,CAAzC,IAAIjmF,EAAI,KACZ8lF,EAAWxuF,KAAK0I,GAKlB8lF,EAAaA,EAAWjiE,QAAO,SAACqiE,GAC/B,OAAOA,EAAWzhE,eAAiB,EAAKzkB,KAAKykB,iBAE9C,IAAM0hE,EAA8B,UAAeL,GAAY,SAAChsF,GAAM,OAAAA,EAAE2qB,iBAClE2hE,EAAkC,GAIxC,OAHAnvF,OAAO6R,KAAKq9E,GAA6B/nF,SAAQ,SAACqmB,GACjD2hE,EAAgB9uF,KAAK6uF,EAA4B1hE,GAAe,OAE1D2hE,GAGA,YAAAJ,2BAAR,SAAmChmF,EAAqByzE,EAAiBqS,GAExE,IADA,IA5DmD/sF,EAAQstF,EA6DrC,MADHrmF,EAAKyzE,KACF,eAAY,CAA7B,IAAIyM,EAAS,KACbA,aAAqB,EAAAlgE,eACxB8lE,EAAWxuF,KAAK4oF,EAAUlgF,OA/DuBjH,EAiEnCmnF,GA/D0B,iBAFiBmG,EAiEhC,EAAAltE,sBA9DbpgB,IAF6CstF,EAIrDttF,aAJqDstF,GAiExDP,EAAWxuF,KAAK4oF,GAEhB1jF,KAAKwpF,2BAA2B9F,EAAWzM,EAAQqS,IAKtD,OAAOA,GASR,YAAAQ,mBAAA,SAAmBzzE,GAClBrW,KAAK+pF,mCAAqC/pF,KAAK+pF,oCAAsC,GACrF/pF,KAAK+pF,mCAAmC1zE,EAAM4R,eAAiB5R,GAEhE,YAAA2zE,sBAAA,SAAsB3zE,GACjBrW,KAAK+pF,2CACD/pF,KAAK+pF,mCAAmC1zE,EAAM4R,gBAGvD,YAAAgiE,gBAAA,WACC,IAAMzvD,EAAO,GACb,GAAIx6B,KAAK+pF,mCACR,IAA0B,UAAAtvF,OAAO6R,KAAKtM,KAAK+pF,oCAAjB,eAAsD,CAA3E,IAAI9hE,EAAa,KACrBuS,EAAK1/B,KAAKkF,KAAK+pF,mCAAmC9hE,IAGpD,OAAOuS,GAER,YAAAivD,qBAAA,WAGC,IAFA,IACIjmF,EADE0mF,EAAkD,GAEtC,MAAAlqF,KAAKiqF,kBAAL,eAAwB,CAEzCC,GADA1mF,EADa,KACAA,MACcykB,eAAiBzkB,EAG7C,IADA,IAAMg3B,EAAO,GACa,MAAA//B,OAAO6R,KAAK49E,GAAZ,eAAoC,CAAzD,IAAIjiE,EAAa,KACrBuS,EAAK1/B,KAAKovF,EAAsBjiE,IAEjC,OAAOuS,GAET,EAzGA,GAAa,EAAAhhB,0B,yFClBb,2BACA,4BACA,4BACA,QACA,QAEA,QAoKA,aAIC,WAAoBshB,GAAA,KAAAA,SAHZ,KAAAqvD,4BAAsC,EAiStC,KAAAC,0CAA4CpqF,KAAKqqF,mCAAmChtF,KAAK2C,MAEzF,KAAAsqF,yBAAmC,EAwC5C,OApUC,YAAApqF,IAAA,SAAIlC,GACHgC,KAAKuqF,iBAAmBvsF,EACxBgC,KAAKggB,SAAW,UAAiBhgB,KAAKuqF,mBAEvC,YAAAtlE,KAAA,SAAKulE,GACJxqF,KAAKuqF,iBAAmB,UAAiBC,EAAmBxiD,SAC5DhoC,KAAKggB,SAAW,UAAiBwqE,EAAmBpiE,UAErD,YAAAqiE,WAAA,SAAWpuF,EAA0BS,GACpC,OAAOrC,OAAO0iB,OAAOnd,KAAKggB,SAAU3jB,EAAMS,IAE3C,sBAAI,oBAAK,C,IAAT,WACC,OAAOkD,KAAK86B,Q,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAO96B,KAAK86B,OAAOt3B,M,gCAEpB,sBAAI,sBAAO,C,IAAX,WACC,OAAOxD,KAAKuqF,kB,gCAEb,sBAAI,sBAAO,C,IAAX,WACC,OAAOvqF,KAAKggB,U,gCAIb,sBAAI,qCAAsB,C,IAA1B,WACC,OAAQ,UAAehgB,KAAKggB,SAAUhgB,KAAKuqF,mB,gCAE5C,sBAAI,iCAAkB,C,IAAtB,WAGC,IAFA,IAAMG,EAA0B,GAER,MADHjwF,OAAO6R,KAAKtM,KAAKggB,UACd,eAAc,CAAjC,IAAI4b,EAAW,KACd,UAAe57B,KAAKggB,SAAS4b,GAAc57B,KAAKuqF,iBAAiB3uD,KACrEnhC,OAAO0iB,OAAOutE,EAAW9uD,EAAa,UAAiB57B,KAAKggB,SAAS4b,KAGvE,OAAO8uD,G,gCAER,sBAAI,sCAAuB,C,IAA3B,WACC,OAAOjwF,OAAO6R,KAAKtM,KAAK07B,qB,gCAIzB,sBAAI,qCAAsB,C,IAA1B,WACC,OAAO17B,KAAKggB,SAAsC,yBAAK,G,gCAIxD,YAAA2qE,aAAA,WACC,OAAyC,MAAlC3qF,KAAKggB,SAAwB,UAAsD,MAAzChgB,KAAKggB,SAA+B,iBAGtF,YAAAorB,iBAAA,WAIC,GAAMprC,KAAKwD,MAAQxD,KAAKwD,KAAKL,MAAM8b,mBAAmBs7D,OAAtD,CAGA,IAAMzlE,EAAW9U,KAAK4qF,eACN,MAAZ91E,GACC9U,KAAKwD,OAASxD,KAAKwD,KAAKkY,gBAAgBssE,YAC3ClzE,EAAS9U,KAAKwD,KAAMxD,KAAKqW,SAIpB,YAAAu0E,aAAR,WACC,GAAI5qF,KAAK2qF,eACR,OAAQ3qF,KAAKggB,SAAwB,SACpChgB,KAAKggB,SAAwB,UAAKhgB,KAAK6qF,+BAGlC,YAAAA,4BAAR,sBACOC,EAAkB9qF,KAAKggB,SAA+B,gBAC5D,GAAI8qE,EAAiB,CACpB,IAAM,EAAoB,IAAIC,SAAS,OAAQ,QAAS,SAAU,WAAYD,GAC9E,OAAO,WACN,EAAkB,EAAKtnF,KAAM,EAAKA,KAAKL,MAAO,KAAM,SAWvD,YAAAof,4BAAA,WACC,IAAIyoE,EAGJ,GAA+B,MAA3BhrF,KAAKqW,MAAMmM,aACd,OAAO,EAGR,IAAI1lB,GAAQ,EAIZ,OAHmD,OAA9CkuF,EAAehrF,KAAKggB,SAAoB,QAC5CljB,EAAQkuF,GAEFluF,GAIR,sBAAI,oCAAqB,C,IAAzB,WACC,OAAOkD,KAAKggB,SAA8B,gB,gCAE3C,sBAAI,qCAAsB,C,IAA1B,WACC,OAAqC,MAA9BhgB,KAAKirF,uB,gCAEb,YAAAC,yBAAA,WACC,OAAIlrF,KAAKirF,sBACDjrF,KAAKirF,sBAAsC,UAE3C,MAQT,sBAAI,yCAA0B,C,IAA9B,WACC,IAAME,EAAcnrF,KAAKggB,SAAmB,WAC5C,OAAImrE,GACIA,EAAwB,eAEzB,G,gCAIR,sBAAI,oBAAK,C,IAAT,WACC,OAAOnrF,KAAKggB,SAAc,OAAK,G,gCAIhC,sBAAI,uBAAQ,C,IAAZ,WACC,OAA4B,MAArBhgB,KAAKorF,c,gCAGb,sBAAY,2BAAY,C,IAAxB,WACC,OAAOprF,KAAKggB,SAAa,M,gCAQ1B,sBAAI,2BAAY,C,IAAhB,WACC,OAAIhgB,KAAKorF,aACDprF,KAAKorF,aAAoB,QAEzB,I,gCAIT,sBAAI,6BAAc,C,IAAlB,WACC,OAAOprF,KAAKqrF,U,gCAIb,sBAAI,2BAAY,C,IAAhB,WACC,OAA2C,IAApCrrF,KAAKggB,SAAyB,W,gCAItC,sBAAI,qCAAsB,C,IAA1B,WACC,OAAOhgB,KAAKggB,SAAuB,gB,gCAEpC,sBAAI,qCAAsB,C,IAA1B,WACC,GAAIhgB,KAAKsrF,uBACR,OAAOtrF,KAAKsrF,uBAA6C,S,gCAI3D,YAAA7uD,wBAAA,WACC,QAzU8B,4BAyUCz8B,KAAKggB,WAC5BhgB,KAAKggB,SAAgC,yBAO9C,sBAAI,oBAAK,C,IAAT,WAKC,OAAOhgB,KAAKggB,SAAqB,OAAK,CAAC,EAAG,I,gCAG3C,sBAAI,mBAAI,C,IAAR,WACC,OAAOhgB,KAAKggB,SAAoB,MAAK,K,gCAG9B,YAAAojB,aAAR,WAIC,OAAOpjC,KAAKggB,SAA4B,cAAK,EAAC,GAAO,IAItD,YAAA+kC,gBAAA,SAAgBjoD,GACf,IAAMqmC,EAAQnjC,KAAKmjC,MAEnB,OAAIrmC,GAASqmC,EAAM,IAAMrmC,GAASqmC,EAAM,GAChCrmC,EAEHA,EAAQqmC,EAAM,IACiB,IAA3BnjC,KAAKojC,eAAe,GAAcD,EAAM,GAAKrmC,GAElB,IAA3BkD,KAAKojC,eAAe,GAAcD,EAAM,GAAKrmC,GAMvD,sBAAI,uBAAQ,C,IAAZ,WACC,OAAOkD,KAAKggB,SAAqB,QAAK,G,gCAIvC,sBAAI,8BAAe,C,IAAnB,WACC,OAAOhgB,KAAKggB,SAAuB,S,gCAEpC,YAAAurE,eAAA,WACC,IAAMC,EAAkBxrF,KAAKwrF,gBAC7B,OAAuB,MAAnBA,IACoC,IAAhCA,EAA0B,KAMnC,sBAAI,wBAAS,C,IAAb,WACC,OAAwC,IAAjCxrF,KAAKggB,SAAsB,SAAkD,IAApChgB,KAAKmqF,4B,gCAEtD,sBAAI,yBAAU,C,IAAd,WACC,OAAQnqF,KAAKyrF,W,gCAEd,YAAAC,kBAAA,SAAkB1sE,GACjBhf,KAAKggB,SAAsB,QAAKhB,EAChChf,KAAKqW,MAAM+F,KAAK,EAAAoF,WAAWmqE,kBAG5B,sBAAI,8BAAe,C,IAAnB,WACC,IAAM7tF,EAAOkC,KAAKqW,MAAMvY,KACxB,OACiC,IAAhCkC,KAAKggB,SAAqB,OAC1BliB,IAAS,EAAAK,UAAUD,QACnBJ,IAAS,EAAAK,UAAUU,WAClBf,IAAS,EAAAK,UAAUC,SAAW4B,KAAK4rF,mB,gCAGtC,YAAAA,gBAAA,WACC,OAAuC,IAAhC5rF,KAAKggB,SAAqB,OAIlC,YAAA6rE,gCAAA,WACC,MArZwB,eAqZI7rF,KAAKggB,UAElC,YAAA8rE,wBAAA,sBACOC,EAAoBtxF,OAAO6R,KAAKtM,KAAKggB,SAA0B,YAAK,IACpExc,EAAOxD,KAAKqW,MAAM7S,KACxB,OAAO,UACNuoF,EAAkB1hF,KAAI,SAAChO,GACtB,IAAMga,EAAQ7S,EAAKif,OAAO/lB,IAAIL,GAC9B,GAAIga,EACH,OAAOA,EAEPjT,QAAQka,MACP,SAASjhB,EAAI,0CAA0C,EAAKga,MAAMha,KAAI,YAAY,EAAKga,MAAM7S,KAAK1F,WAUvG,YAAAkuF,uBAAA,WACC,IAAIhsF,KAAKsqF,wBAAT,CAGAtqF,KAAKsqF,yBAA0B,EAC/B,IAAMz0E,EAAe7V,KAAK8rF,0BAC1B,GAAIj2E,EAAarb,OAAS,EAAG,CAC5BwF,KAAKisF,uBAAyB,IAAI,EAAA71E,cAAcpW,KAAKqW,MAAMlT,MAAO,oBAClE,IAAwB,UAAA0S,EAAA,eAAc,CAAjC,IAAIyjE,EAAW,KACnBt5E,KAAKisF,uBAAuBh3E,gBAAgBqkE,GAE7Ct5E,KAAKisF,uBAAuBp3E,oBAC3B,sCACA7U,KAAKoqF,8CAIA,YAAAC,mCAAR,WACCrqF,KAAKksF,oBACLlsF,KAAKqW,MAAM1B,sBAGN,YAAAu3E,kBAAN,W,2IACOluF,EAAUgC,KAAKggB,SAA0B,aAExCyC,EAASziB,KAAK8rF,0BACdr3D,EAAWhS,EAAOpY,KAAI,SAAC5M,GAAM,OAAAA,EAAEmkB,aACrC5hB,KAAKmqF,4BAA6B,EAClC,GAAMnoE,QAAQ0S,IAAID,KAJf,M,OAKH,IADA,SACK,EAAL,EAAkB,EAAAhS,EAAA,eAATpM,EAAK,KACP81E,EAAenuF,EAAQqY,EAAMha,MAC7ByM,EAAMuN,EAAMvZ,MACdqvF,GAAgBrjF,IACnB9I,KAAKmqF,4BAA6B,GAGpCnqF,KAAKqW,MAAM+F,KAAK,EAAAoF,WAAWmqE,iB,mCAG9B,EA5UA,GAAa,EAAA1rE,qB,8ECzKb,iBAIC,WAAsB5J,GAAA,KAAAA,QAHtB,KAAA+1E,eAAyB,EACzB,KAAAC,sBAAgC,EAChC,KAAAC,qBAA2C,GAyE5C,OAtEC,sBAAI,2BAAY,C,IAAhB,WACC,OAA2B,IAAvBtsF,KAAKosF,iBAILpsF,KAAKqW,MAAMlT,MAAM8b,mBAAmBC,YAQjClf,KAAKqW,MAAMlT,MAAMmZ,kBAAkB2G,e,gCAG3C,YAAAspE,WAAA,WAKC,OAJAvsF,KAAKosF,eAAgB,EACjBpsF,KAAKqW,MAAM+L,aAAepiB,KAAKqW,MAAMsM,YACxC3iB,KAAKqW,MAAMsM,WAAW/gB,SAAQ,SAACzF,GAAM,OAAAA,EAAEolB,gBAAgBgrE,iBAEjD,GAER,YAAAC,aAAA,WAKC,OAJAxsF,KAAKosF,eAAgB,EACjBpsF,KAAKqW,MAAM+L,aAAepiB,KAAKqW,MAAMsM,YACxC3iB,KAAKqW,MAAMsM,WAAW/gB,SAAQ,SAACzF,GAAM,OAAAA,EAAEolB,gBAAgBirE,mBAEjD,GAER,YAAA33D,kBAAA,WAEC,OADA70B,KAAKqsF,sBAAuB,GACrB,GAER,YAAAt3D,oBAAA,WAEC,OADA/0B,KAAKqsF,sBAAuB,GACrB,GAGR,YAAAnpE,gBAAA,SAAgB7G,GACfrc,KAAKssF,qBAAqBjwE,GAAcrc,KAAKssF,qBAAqBjwE,IAAe,EACjFrc,KAAKssF,qBAAqBjwE,IAAe,GAE1C,YAAAowE,aAAA,SAAapwE,GACZ,OAAOrc,KAAKssF,qBAAqBjwE,IAAe,GAGjD,YAAAD,KAAA,SAAK62C,GACAjzD,KAAKijB,eACRjjB,KAAKqW,MAAM+F,KAAK62C,GAEe,MAA3BjzD,KAAKqW,MAAMmM,eAAsD,IAA9BxiB,KAAKqsF,sBAC3CrsF,KAAKqW,MAAMmM,aAAapG,KAAK62C,KAkBjC,EA5EA,GAAa,EAAA9yC,kB,8ECgBb,iBACC,WAAsB9J,GAAA,KAAAA,QAuCvB,OArCC,YAAAmG,QAAA,WACC,IAAMxiB,EAA4B,CACjCqC,KAAM2D,KAAKqW,MAAMha,KACjByB,KAAMkC,KAAKqW,MAAMvY,KACjBwjB,UAAWthB,KAAKshB,YAChBxkB,MAAOkD,KAAKlD,QACZguC,WAAY9qC,KAAK8qC,aACjB7iB,cAAejoB,KAAKqW,MAAM4R,cAE1BkjB,cAAenrC,KAAKmrC,gBACpBuhD,WAAY1sF,KAAK0sF,aAEjB/pE,gBAAYtZ,GAOb,OAJIrJ,KAAKqW,MAAM+L,aAAepiB,KAAKqW,MAAMsM,aACxC3oB,EAAiB,WAAIgG,KAAKqW,MAAMsM,WAAWtY,KAAI,SAACgqB,GAAc,OAAAA,EAAUpM,kBAGlEjuB,GAGR,YAAAsnB,UAAA,WACC,OAAOthB,KAAKqW,MAAMilB,sBAEnB,YAAAx+B,MAAA,WACC,OAAOkD,KAAKqW,MAAMs2E,kBAEnB,YAAA7hD,WAAA,W,MACC,OAAO9qC,KAAKqW,MAAMiN,iBAAmD,QAAjC,EAACtjB,KAAKqW,MAAMkN,6BAAqB,eAAEunB,gBAAazhC,GAErF,YAAA8hC,cAAA,WACC,OAAOnrC,KAAKqW,MAAMia,OAAOhT,MAAMxb,SAEhC,YAAA4qF,WAAA,WACC,OAAO1sF,KAAKqW,MAAMrY,QAAQ0uF,YAE5B,EAxCA,GAAa,EAAAnsE,mB,8ECjBb,aACA,SAEA,EAGC,SAAsBlK,GAAA,KAAAA,QAFtB,KAAAmsE,eAAiB,IAAI,EAAAC,mBAAmBziF,KAAKqW,OAC7C,KAAAiH,MAAQ,IAAI,EAAAolE,WAAW1iF,KAAKqW,QAFhB,EAAAqD,oB,8ECHb,iBACC,WAAsBrD,GAAA,KAAAA,QAOvB,OALC,sBAAI,qBAAM,C,IAAV,WACC,IAAMu2E,EAAsB5sF,KAAKqW,MAAMlT,MAAM8qC,gBAAgB/lB,WAAWD,cAExE,OAAOjoB,KAAKqW,MAAMX,wBAAwBujB,SAAS2zD,I,gCAErD,EARA,GAAa,EAAAnK,sB,8ECDb,YAIA,aAEC,WAAoBpsE,GAAA,KAAAA,QAiBrB,OAfC,YAAAnW,IAAA,SAAI4B,GACC9B,KAAKgjF,UAAYlhF,IACpB9B,KAAKgjF,SAAWlhF,EAChB9B,KAAKqW,MAAMkL,gBAAgBnF,KAAK,EAAAoF,WAAWyhE,iBAG7C,sBAAI,sBAAO,C,IAAX,WACC,OAAOjjF,KAAKgjF,U,gCAEb,YAAA/lE,MAAA,WACCjd,KAAKE,SAAImJ,IAEV,sBAAI,qBAAM,C,IAAV,WACC,OAAwB,MAAjBrJ,KAAKgjF,U,gCAEd,EAnBA,GAAa,EAAAN,c,yFCMb,QAUA,QACA,QAMA,SAsCA,aAqBC,WAAsBl/E,GAAA,KAAAA,OApBd,KAAAqpF,oBAA8B,EAC9B,KAAAC,gBAA6C,GAE7C,KAAAC,aAAgC,GAChC,KAAAC,aAAyB,GACzB,KAAAC,kBAAqC,GACrC,KAAAC,cAAiC,GACjC,KAAAC,uBAAmC,GACnC,KAAAC,mBAA+B,GAI/B,KAAAC,sCAAgD,EAoezD,OA1dS,YAAAC,qBAAR,WACMttF,KAAKutF,eAETvtF,KAAKutF,aAAe,IAAI,EAAAn3E,cAAcpW,KAAKwD,KAAKL,MA/B1B,UAiCtBnD,KAAKwD,KAAKyR,gBAAgBjV,KAAKutF,gBAIjC,YAAA9mC,KAAA,WACCzmD,KAAKstF,uBAELttF,KAAK6sF,oBAAqB,EAE1B7sF,KAAKwtF,0BACLxtF,KAAKwD,KAAK4X,gBACVpb,KAAKytF,uBAEE,YAAAA,oBAAR,WACCztF,KAAK0tF,iBAEL1tF,KAAK2tF,uBACL3tF,KAAK6sF,oBAAqB,EAE1B7sF,KAAK4tF,+BAcN,YAAA/Z,yBAAA,WACC7zE,KAAK0tF,iBACL1tF,KAAK2tF,wBAGE,YAAAH,wBAAR,WACC,IAAM3rD,EAAgB7hC,KAAKwD,KAAKq+B,cAChC,GAAIA,EACH,IAAiB,UAAApnC,OAAO6R,KAAKu1B,GAAZ,eAA4B,CAAxC,IAAI,EAAI,KACN++B,EAAS/+B,EAAc,GAC7B7hC,KAAKqb,UAAUulD,EAAO9iE,KAAM,EAAM8iE,EAAO7iE,WAAY6iE,EAAO5iE,WAIvD,YAAA2vF,qBAAR,WACC,IAAIE,EAA4BpzF,OAAOqzF,oBAAoB9tF,KAAKwD,KAAKiV,IACrEzY,KAAK+tF,2BAA2BF,GAEhCA,EAA4BpzF,OAAOqzF,oBAAoB9tF,KAAKwD,KAAKiV,IAEjE,I,eAASpC,GACR,IAAM4kB,EAAoB5kB,EAAMrY,QAAQi9B,WAEJ4yD,EAA0B50D,SAAS5iB,EAAMha,OAE3C4+B,KACjCxgC,OAAO+B,eAAe,EAAKgH,KAAKiV,GAAIpC,EAAMha,KAAM,CAC/CK,IAAK,WACJ,OAAO2Z,EAAMvZ,OAGdkxF,aAAc/yD,IAEfxgC,OAAO+B,eAAe,EAAKgH,KAAK/F,EAAG4Y,EAAMha,KAAM,CAC9CK,IAAK,WACJ,OAAO2Z,GAER23E,aAAc/yD,M,OAjBC,MAAAj7B,KAAK00B,IAAL,eAAU,C,EAAd,QAsBP,YAAAq5D,2BAAR,SAAmCF,GAGlC,IAFA,IAAMt0D,EAAsBv5B,KAAKgtF,aAC3BiB,EAAkB,GACa,MAAAJ,EAAA,eAA2B,CAA3D,IAAIK,EAAwB,KAC3B30D,EAAoBN,SAASi1D,IACjCD,EAAgBnzF,KAAKozF,GAIvB,IAA2B,UAAAD,EAAA,eAAiB,CAAvC,IAAIE,EAAc,KACtB1zF,OAAO+B,eAAewD,KAAKwD,KAAKiV,GAAI01E,EAAgB,CACnDzxF,IAAK,aAGLsxF,cAAc,IAEfvzF,OAAO+B,eAAewD,KAAKwD,KAAK/F,EAAG0wF,EAAgB,CAClDzxF,IAAK,aAGLsxF,cAAc,MAKjB,sBAAI,0BAAW,C,IAAf,WACC,OAAOhuF,KAAKutF,c,gCAEb,sBAAI,kBAAG,C,IAAP,WACC,OAAOvtF,KAAK+sF,c,gCAEb,sBAAI,wBAAS,C,IAAb,WACC,OAAO/sF,KAAKitF,mB,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAOjtF,KAAKktF,e,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAOltF,KAAKgtF,c,gCAEb,sBAAI,8BAAe,C,IAAnB,WACC,OAAOhtF,KAAKmtF,wB,gCAEb,sBAAI,0BAAW,C,IAAf,WACC,OAAOntF,KAAKotF,oB,gCAUL,YAAAgB,cAAR,SAA2C/xF,EAAcS,EAAkCgB,GAC1F,IAAMuY,EAAQrW,KAAKquF,gBAAgBhyF,EAAMyB,GACrCuY,EACHA,EAAMnW,IAAIpD,GAEVsG,QAAQmT,KAAK,SAASla,EAAI,wBAAwByB,IAGpD,YAAAytB,UAAA,SAAUlvB,EAAcS,GACvBkD,KAAKouF,cAAc/xF,EAAMS,EAAO,EAAAqB,UAAUG,QAE3C,YAAA+sB,YAAA,SAAYhvB,EAAcS,GACzBkD,KAAKouF,cAAc/xF,EAAMS,EAAO,EAAAqB,UAAUa,UAG3C,YAAAgkC,UAAA,SAAU3mC,GACT,OAAqC,MAA9B2D,KAAK8sF,gBAAgBzwF,IAE7B,YAAAumC,IAAA,SAAIvmC,GACH,OAAO2D,KAAKgjC,UAAU3mC,IAEvB,YAAAK,IAAA,SAAIL,GACH,OAAO2D,KAAKqW,MAAMha,IAEnB,YAAAgyF,gBAAA,SAAqChyF,EAAcyB,GAClD,IAAMuY,EAAQrW,KAAKqW,MAAMha,GACzB,GAAIga,GAASA,EAAMvY,MAAQA,EAC1B,OAAOuY,GAGT,YAAAi4E,UAAA,SAAUjyF,GACT,OAAO2D,KAAKquF,gBAAgBhyF,EAAM,EAAA8B,UAAUG,QAE7C,YAAAiwF,kBAAA,SAAkBlyF,GACjB,OAAO2D,KAAKquF,gBAAgBhyF,EAAM,EAAA8B,UAAUM,gBAE7C,YAAA3B,MAAA,SAAMT,G,MACL,OAAuB,QAAvB,EAAO2D,KAAKqW,MAAMha,UAAK,eAAES,OAE1B,YAAA0xF,gBAAA,SAAqCnyF,EAAcyB,G,MAClD,OAAuC,QAAhC,EAAAkC,KAAKquF,gBAAgBhyF,EAAMyB,UAAK,eAAEhB,OAM1C,YAAAugC,QAAA,SAAQhhC,GACP,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUC,UAE7C,YAAAigC,MAAA,SAAMhiC,GACL,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUG,QAE7C,YAAA0xC,QAAA,SAAQ3zC,GACP,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUK,UAE7C,YAAAgsD,OAAA,SAAOnuD,GACN,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUW,SAE7C,YAAAm/B,QAAA,SAAQ5hC,GACP,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUY,UAE7C,YAAAi/B,QAAA,SAAQ3hC,GACP,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUa,UAE7C,YAAA4F,MAAA,SAAMvI,GACL,OAAO2D,KAAKwuF,gBAAgBnyF,EAAM,EAAA8B,UAAUE,QAG7C,YAAAgY,MAAA,SAAMha,GACL,IAAMoB,EAAIuC,KAAK8sF,gBAAgBzwF,GAC/B,OAAS,MAALoB,EACIA,GAEP2F,QAAQmT,KACP,0BAA0Bla,EAAI,aAAa2D,KAAKwD,KAAK0T,YAAW,8BAC/DlX,KAAK+4B,OAGA,OAOT,YAAA01D,cAAA,SAAc9lC,GACb,IAAuB,UAAAA,EAAA,eAAa,CAA/B,IAAIjiC,EAAU,KAClB1mB,KAAK25B,aAAajT,GAEnB1mB,KAAK0tF,kBAEN,YAAA/zD,aAAA,SAAajT,GACZ,IAAMrQ,EAAQrW,KAAK8sF,gBAAgBpmE,GACnC,IAAIrQ,EAmBH,MAAM,IAAIk1B,MAAM,UAAU7kB,EAAU,4BAA4B1mB,KAAKwD,KAAK0T,aAb1E,GALIlX,KAAKutF,cACRvtF,KAAKutF,aAAan4E,mBAAmBpV,KAAK8sF,gBAAgBpmE,IAE3DrQ,EAAMgM,SAAS,aACRriB,KAAK8sF,gBAAgBpmE,GACxBrQ,EAAM+L,aAAe/L,EAAMsM,WAC9B,IAAsB,UAAAtM,EAAMsM,WAAN,eAAkB,CAAnC,IACE+rE,EADW,KACYryF,YACtB2D,KAAK8sF,gBAAgB4B,GAQ9Br4E,EAAM+F,KAAK,EAAAoF,WAAW+jE,UAMxB,YAAAlqE,UAAA,SACCvd,EACAzB,EACA0B,EACAC,QAAA,IAAAA,MAAA,IAEA,IAAMi9B,EAAWj9B,EAAe,QAAK,GACL,IAA5BgC,KAAK6sF,oBAAiC5xD,GACzC73B,QAAQmT,KACP,QAAQvW,KAAKwD,KAAK0T,YAAW,KAC5BlX,KAAKwD,KAAK1F,KAAI,YACHzB,EAAI,gDAGK,MAAnB2D,KAAKwD,KAAKL,OACbC,QAAQmT,KAAK,QAAQvW,KAAKwD,KAAK0T,YAAW,KAAKlX,KAAKwD,KAAK1F,KAAI,2BAG9D,IAAMsR,EAAc,EAAAy5C,uBAAuB/qD,GAC3C,GAAmB,MAAfsR,EAAqB,CACxB,IAAMu/E,EAAiB3uF,KAAK8sF,gBAAgBzwF,GACxCsyF,IACC1zD,EAGC0zD,EAAe7wF,MAAQA,GAC1BkC,KAAK25B,aAAag1D,EAAetyF,MAIlC+G,QAAQmT,KAAK,iBAAiBla,EAAI,kBAAmB2D,KAAKwD,OAG5D,IAAM6S,EAAgC,IAAIjH,EAAYpP,KAAKwD,KAAKL,OAgBhE,GAfAkT,EAAMrY,QAAQkC,IAAIlC,GAGlBqY,EAAM9B,SAASlY,GACfga,EAAM8L,eAAepkB,GACrBsY,EAAMgN,kBACNhN,EAAMgM,SAASriB,KAAKwD,MAIpBxD,KAAK8sF,gBAAgBz2E,EAAMha,MAAQga,EAK/BA,EAAM+L,aAAe/L,EAAMsM,WAC9B,IAAsB,UAAAtM,EAAMsM,WAAN,eAAkB,CAAnC,IAAI0R,EAAS,KACjBr0B,KAAK8sF,gBAAgBz4D,EAAUh4B,MAAQg4B,EAMzC,OAFAr0B,KAAKqtF,sCAAuC,EAErCh3E,IAID,YAAAq3E,eAAR,WAEC1tF,KAAK+sF,aAAetyF,OAAO4S,OAAOrN,KAAK8sF,iBAEvC9sF,KAAKgtF,aAAevyF,OAAO6R,KAAKtM,KAAK8sF,iBAErC9sF,KAAKitF,kBAAoBxyF,OAAO4S,OAAOrN,KAAK8sF,iBAAiBzlE,QAAO,SAAC5pB,GAAM,OAACA,EAAEO,QAAQi9B,YAEtFj7B,KAAKktF,cAAgBzyF,OAAO4S,OAAOrN,KAAK8sF,iBAAiBzlE,QAAO,SAAC5pB,GAAM,OAAAA,EAAEO,QAAQi9B,YAEjFj7B,KAAKmtF,uBAAyB1yF,OAAO4S,OAAOrN,KAAK8sF,iBAC/CzlE,QAAO,SAAC5pB,GAAM,OAACA,EAAEO,QAAQi9B,YACzB5wB,KAAI,SAAC5M,GAAM,OAAAA,EAAEpB,QAEf2D,KAAKotF,mBAAqB3yF,OAAO4S,OAAOrN,KAAK8sF,iBAC3CzlE,QAAO,SAAC5pB,GAAM,OAAAA,EAAEO,QAAQi9B,YACxB5wB,KAAI,SAAC5M,GAAM,OAAAA,EAAEpB,SAeV,YAAAuyF,YAAN,SAAkBv4E,G,uHAIeA,EAAMzB,SACb,GAAMyB,EAAMuL,WADL,M,cACP,SAEpBvL,EAAMia,OAAOhT,MAAMld,QACtBJ,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,UAAUmW,EAAMha,KAAI,YAAYga,EAAMia,OAAOhT,MAAMxb,S,+BAS3E,YAAA+sF,YAAN,SAAkBpsE,G,wHAGjB,IADMgS,EAAW,GACRn6B,EAAI,EAAGA,EAAImoB,EAAOjoB,OAAQF,IAC9BmoB,EAAOnoB,GAAGsa,UACb6f,EAAS35B,KAAKkF,KAAK4uF,YAAYnsE,EAAOnoB,KAGf,SAAM0nB,QAAQ0S,IAAID,I,cAAlB,SAUrBz0B,KAAKwD,KAAK8sB,OAAOhT,MAAMld,QAC1BJ,KAAKwD,KAAKzC,cAAc,M,YA6BpB,YAAAunF,SAAN,W,uHACKtoF,KAAKutF,eACJvtF,KAAKutF,aAAa34E,UAAY5U,KAAKqtF,sCAKtC,GAAMrtF,KAAK6uF,YAAY7uF,KAAK+sF,eAN1B,M,OAMF,SAGA/sF,KAAKutF,aAAa54E,qBAElB3U,KAAKqtF,sCAAuC,E,mCAW/C,YAAA11D,4BAAA,SAA4Bme,GAC3B91C,KAAK8uF,yBAA2Bh5C,GAEjC,YAAA83C,4BAAA,WACK5tF,KAAK8uF,0BACR9uF,KAAK8uF,4BAGP,YAAA30C,uBAAA,SAAuB99C,EAAc46E,GACpCj3E,KAAK+uF,0BAA4B/uF,KAAK+uF,2BAA6B,GACnE/uF,KAAKgvF,qBAAuBhvF,KAAKgvF,sBAAwB,GAEpDhvF,KAAK+uF,0BAA0B91D,SAAS58B,GAI5C+G,QAAQmT,KAAK,kBAAkBla,EAAI,kBAAmB2D,KAAK+uF,4BAH3D/uF,KAAK+uF,0BAA0Bj0F,KAAKuB,GACpC2D,KAAKgvF,qBAAqBl0F,KAAKm8E,KAKjC,YAAAgY,wBAAA,WACC,GAAIjvF,KAAKgvF,qBACR,IAAiB,UAAAhvF,KAAKgvF,qBAAL,eAA2B,EAC3Cl5C,EADY,UAuBhB,EAjfA,GAAa,EAAAt7B,oB,yFClEb,2BACA,4BAEA,2BACA,SACA,QACA,QAIA,2B,+CAgFA,OAhFkC,iBAC1B,EAAA1c,KAAP,WACC,OAAO,EAAAK,UAAUC,SAGlB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAI,UAAgB4B,KAAK0N,eACjB1N,KAAK0N,cAEL1N,KAAK0gB,QAAQ1gB,KAAK0N,iBAAkB,G,gCAG7C,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKihB,Y,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOjhB,KAAKlD,O,gCAEN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SAAwBL,EAA6CC,GACpE,OAAOD,GAAQC,GAEhB,YAAAJ,QAAA,SAAQC,GACP,GAAI,UAAiBA,GACpB,OAAOA,EAEP,GAAI,UAAgBA,GACnB,OAAOA,GAAW,EAElB,GAAI,UAAgBA,GAAU,CAC7B,GAAI,EAAAzW,WAAWjD,WAAW0Z,GACzB,OAAO,EAAAzW,WAAW7C,WAAWsZ,GAE7B,GAAI,EAAAzW,WAAW5C,UAAUqZ,GAExB,OADemkC,WAAWnkC,IACT,EAMtB,OAAO,MAkCT,EAhFA,CAAkC,EAAA0qB,mBAArB,EAAAyd,gB,8ECTb,aAKA,SACA,SACA,SACA,QAEA,aASC,WACQzyC,GAAA,KAAAA,QATD,KAAA64E,iBAA2B,EAC1B,KAAAC,eAAyB,EAKzB,KAAAC,YAA0B,IAAI,EAAA/6C,WAKrCr0C,KAAKqvF,mBAAqB,IAAI,EAAAC,kBAAkBtvF,KAAKqW,OACrDrW,KAAKuvF,wBAA0B,IAAI,EAAA/1E,uBAAuBxZ,KAAKqW,OAoGjE,OAjGC,YAAAszC,iBAAA,SAAiB7e,GAChB,GAAI9qC,KAAKmvF,cACR,MAAM,IAAI5jD,MAAM,+BAA+BvrC,KAAKqW,MAAMa,aAE3DlX,KAAKmvF,eAAgB,EACrBnvF,KAAKkvF,iBAAkB,EACvBlvF,KAAKovF,YAAcpvF,KAAKovF,aAAe,IAAI,EAAA/6C,WAE3Cr0C,KAAK64B,QACD74B,KAAKqW,MAAMvY,MAAQ,EAAAK,UAAUW,OAChCkB,KAAKovF,YAAY3kC,kCAAkC3f,GAEnD9qC,KAAKovF,YAAYzlC,iBAAiB7e,GAEnC9qC,KAAKqvF,mBAAmBG,WAAWxvF,KAAKovF,aAEK,MAAzCpvF,KAAKqvF,mBAAmBlkD,eAC3BnrC,KAAKuvF,wBAAwB9qE,OAAOzkB,KAAKqvF,oBACrCrvF,KAAKuvF,wBAAwBpkD,cAChCnrC,KAAKqW,MAAMia,OAAOhT,MAAMpd,IAAIF,KAAKuvF,wBAAwBpkD,gBAEzDnrC,KAAKkvF,iBAAkB,EACvBlvF,KAAKmvF,eAAgB,IAGtBnvF,KAAK82C,UAAU92C,KAAKqvF,mBAAmBlkD,gBAGzC,YAAA0e,iBAAA,WAEC,IAAI7pD,KAAKyvF,kBASR,OAAO,IAAIztE,SAAQ,SAACC,EAASC,GAC5BD,EAAQ,SATT,IACC,OAAOjiB,KAAKqvF,mBAAmBK,gBAC9B,MAAOplF,GAGR,OAFAlH,QAAQmT,KAAK,oBACbnT,QAAQmT,KAAKjM,GACN,IAAI0X,SAAQ,SAACC,EAASC,GAAW,OAAAD,SAS3C,YAAA4W,MAAA,WACC74B,KAAKkvF,iBAAkB,EACvBlvF,KAAKmvF,eAAgB,EACrBnvF,KAAK01D,oBAAiBrsD,EAEtBrJ,KAAKuvF,wBAAwB12D,QAE7B74B,KAAKqvF,mBAAmBx2D,SAGf,YAAAie,UAAV,SAAoBh1C,GACnB9B,KAAK01D,eAAiB11D,KAAK01D,gBAAkB5zD,GAE9C,sBAAI,yBAAU,C,IAAd,WACC,OAA8B,MAAvB9B,KAAK01D,gB,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAO11D,KAAK01D,gB,gCAGL,YAAA+5B,gBAAR,WACC,OAA8B,MAAvBzvF,KAAK01D,gBAA0B11D,KAAKqvF,mBAAmBM,gBAmB/D,YAAA/lC,0CAAA,W,MACC5pD,KAAK4vF,4BACJ5vF,KAAK4vF,6BAA+B,IAAI,EAAAC,0BAA0B7vF,KAAKqW,OAExE,IAAMy5E,EAAwB9vF,KAAK4vF,4BAA4BJ,WAAWxvF,KAAKovF,aAC/C,QAAhC,EAAApvF,KAAKqW,MAAMkN,6BAAqB,SAAEmnB,eAAeolD,GAG7CA,GACH9vF,KAAK2pD,iBAAiBmmC,IAGzB,EAjHA,GAAa,EAAApmC,qB,yFCRb,SAEA,SACA,SA8BMqmC,EAA6C,CAClDC,YAAa,UAGd,SACMC,EAAiBx1F,OAAO6R,KAAK,EAAAujB,QAK7BqgE,EAA6C,GA5BvB,CAC3B,MACA,OACA,OACA,OACA,OACA,MACA,MACA,QACA,MACA,MACA,MACA,QACA,OACA,MACA,OACA,OAamBtuF,SAAQ,SAACvF,GAC5B6zF,EAA4B7zF,GAAQ,QAAQA,KAE7C5B,OAAO6R,KAAKyjF,GAA6BnuF,SAAQ,SAACvF,GACjD,IAAM8zF,EAAUJ,EAA4B1zF,GAC5C6zF,EAA4B7zF,GAAQ,QAAQ8zF,KAbnB,CAAC,MAAO,QAAS,QAAS,UAAW,UAAW,OAAQ,SAehEvuF,SAAQ,SAACvF,GAC1B6zF,EAA4B7zF,GAAQ,kBAAkBA,KAEvD4zF,EAAeruF,SAAQ,SAACvF,GACvB6zF,EAA4B7zF,GAAQ,yBAAyBA,KAflC,CAAC,aAiBTuF,SAAQ,SAACvF,GAC5B6zF,EAA4B7zF,GAAQ,oBAAoBA,KAGzD,IAAM+zF,EAAgD,CACrD3hB,GAAI,EAAA4hB,4BAA4B5hB,IAG3B6hB,EAAuC,GAxBf,CAAC,KAAM,KAyBf1uF,SAAQ,SAACvF,GAC9Bi0F,EAAiBj0F,GAAQ,QAAQA,KAGlC,IAAMk0F,EAA6C,EAAAC,aAmBnD,SAEMC,EAAkC,CACvC5iF,EAAG,EACHC,EAAG,EACHE,EAAG,EACHI,EAAG,EACHzR,EAAG,EACHuR,EAAG,EACHhD,EAAG,GAOJ,SAEA,SAGMwlF,EAAgBj2F,OAAOk2F,gBAAe,W,4GAAqBvhF,YAEjE,cAiBC,WAAmBiH,GAAnB,MACC,YAAMA,IAAM,K,OADM,EAAAA,QAdX,EAAAu6E,mCAAqC,IAAI,EAAAC,gCAIzC,EAAAC,QAAwB,GACxB,EAAAC,aAAuB,EAExB,EAAAC,oBAA0C,GAC1C,EAAAC,uBAA0C,G,EAgVlD,OA3VuC,iBAqB/B,YAAAzB,WAAP,SAAkBJ,GAGjB,GAFApvF,KAAK64B,QAE4B,MAA7Bu2D,EAAYjkD,cAAuB,CACtC,IAIC,GAFAnrC,KAAK4wF,mCAAmC/3D,QAEpCu2D,EAAY5rF,KAAM,CACrB,IAAM0tF,EAAuBlxF,KAAK+2C,cAAcq4C,EAAY5rF,MACxD0tF,GAA8C,MAAtBlxF,KAAKmrC,gBAChCnrC,KAAKkxF,qBAAuBA,QAG7B9tF,QAAQmT,KAAK,uBAEb,MAAOjM,GACRlH,QAAQmT,KAAK,iCAAiCvW,KAAKqW,MAAMa,aACzD9T,QAAQmT,KAAKjM,GAGd,GAAItK,KAAKkxF,qBACR,IACClxF,KAAKmxF,SAAW,IAAIT,EACnB,QACA,UACA,kCAEE1wF,KAAKoxF,gBAAe,wHAMtB,MAAO9mF,GACRlH,QAAQmT,KAAKjM,GACbtK,KAAK82C,UAAU,iCAGhB92C,KAAK82C,UAAU,sCAGhB92C,KAAK82C,UAAU,4BAIjB,YAAAje,MAAA,WACC74B,KAAKmrC,mBAAgB9hC,EACrBrJ,KAAKkxF,0BAAuB7nF,EAC5BrJ,KAAK8wF,QAAU,GACf9wF,KAAK+wF,aAAe,EACpB/wF,KAAKmxF,cAAW9nF,EAChBrJ,KAAKgxF,oBAAsB,GAC3BhxF,KAAKixF,uBAAyB,IAG/B,YAAAG,cAAA,WACC,OAAIpxF,KAAKqW,MAAMrY,QAAQyrD,2BACf,iQAMHzpD,KAAK4wF,mCAAmCS,0BAAyB,mBAC7DrxF,KAAK4wF,mCAAmCU,gCAA+B,oBAC1EtxF,KAAK4wF,mCAAmCW,sBAAqB,sIAGnDvxF,KAAKkxF,qBAAoB,uNAWjC,2EAEIlxF,KAAKkxF,qBAAoB,uBAMtC,YAAAvB,aAAA,WACC,OAAwB,MAAjB3vF,KAAKmxF,UAEb,YAAAzB,cAAA,WAIC,GAAI1vF,KAAKmxF,SAER,OADenxF,KAAKmxF,SAASnxF,KAAKqW,MAAOrW,KAAK8wF,UAUtC,YAAAU,wBAAV,SAAkChuF,GAAlC,WACOiuF,EAAmBjuF,EAAKmnD,UAAUtgD,KAAI,SAACqnF,GAC5C,OAAO,EAAK36C,cAAc26C,MAGrB16C,EADSxzC,EAAKonD,OACOvuD,KAC3B,GAAI26C,EAAa,CAEhB,IAAM26C,EAAmBvB,EAAkBp5C,GAC3C,GAAI26C,EACH,OAAOA,EAAiBF,GAIzB,IAAMG,EAAmB,GAAGH,EAAiB5nF,KAtKpB,MAuKnBgoF,EAAuB3B,EAA4Bl5C,GACzD,GAAI66C,EACH,OAAUA,EAAoB,IAAID,EAAgB,IAKnD,GADwBrB,EAA4Bv5C,GAC/B,CACpB,IAAM86C,EAAYtuF,EAAKmnD,UAAU,GAE3BonC,EAAkB,UAAUN,EAAiB,GAE/CO,EAAgB,GACpB,IAECA,EADyB,IAAIjH,SAASgH,EACtBE,GACf,UASF,OADAjyF,KAAKkyF,gCAAgCl7C,EAAag7C,EAAeF,GAC1D,kBAAkB9xF,KAAK+wF,aAAY,wBAAwBa,EAAgB,OAIpF5xF,KAAK82C,UAAU,mBAAmBE,IAEzB,YAAAC,0BAAV,SAAoCzzC,GAKnC,MAAO,IAAIxD,KAAK+2C,cAAcvzC,EAAK0zC,MAAK,IAAI1zC,EAAK2zC,SAAQ,IAAIn3C,KAAK+2C,cAAcvzC,EAAK4zC,OAAM,KAElF,YAAAC,2BAAV,SAAqC7zC,GAMpC,MAAO,IAAIxD,KAAK+2C,cAAcvzC,EAAK0zC,MAAK,IAAI1zC,EAAK2zC,SAAQ,IAAIn3C,KAAK+2C,cAAcvzC,EAAK4zC,OAAM,KAElF,YAAAE,0BAAV,SAAoC9zC,GACnC,OAAUxD,KAAK+2C,cAAcvzC,EAAKjG,QAAO,IAAIyC,KAAK+2C,cAAcvzC,EAAKhG,WAE5D,YAAA20F,yBAAV,SAAmC3uF,GAClC,GAxNuB,MAwNnBA,EAAK2zC,SAA+B,CACvC,IAAIi7C,EAAW5uF,EAAK4uF,SAChBljF,OAAc,EACd1R,OAAQ,EACZ,OAAQ40F,EAASt0F,MAChB,IAAK,aAEJoR,EADsCkjF,EACD/1F,KACrC,MAED,IAAK,mBACJ,IAAMg2F,EAAuCD,EACvCE,EAAcD,EAA2B90F,OACzCg1F,EAAgBF,EAA2B70F,SACjD0R,EAAiBojF,EAAYj2F,KAC7BmB,EAAW+0F,EAAcl2F,KAO3B,GAAI6S,EAAgB,CAEnB,GAAsB,UADtBA,EAAiB,EAAA1C,cAAcC,WAAWyC,IAEzC,MAAO,wCAEP,IAAMsjF,EAAqBxyF,KAAK4wF,mCAAmC4B,mBAClEtjF,GAEKujF,EAAYzyF,KAAK4wF,mCAAmC6B,UAAUvjF,GAEpE,OADAlP,KAAK4wF,mCAAmCtxE,IAAIpQ,GACxC1R,EAEOi1F,EAAS,iBAAiBD,EAAkB,IAD9B/B,EAAiBjzF,GACgC,IAE/Di1F,EAAS,iBAAiBD,EAAkB,IAKxD,OADApvF,QAAQmT,KAAK,uBACN,GAGR,MAAO,GAAG/S,EAAK2zC,SAAWn3C,KAAK+2C,cAAcvzC,EAAK4uF,WAI1C,YAAAt6C,iBAAV,SAA2Bt0C,GAC1B,MAAO,GAAGA,EAAKu0C,KAGN,YAAA26C,oBAAV,SAA8BlvF,GAE7B,GAD8BA,EAAKnH,KAAK,IACX,EAAAw6C,gBAkB5B,OAAOrzC,EAAKnH,KAjBZ,IAAMs2F,EAAsCnvF,EAAKnH,KAAKuM,OAAO,GAGvDgqF,EAAuBtC,EAAiBqC,GAC9C,GAAIC,EACH,OAAOA,EAIR,IAAM57C,EAAc,uBAAuB27C,EAE3C,GADgB3yF,KAAag3C,GAE5B,OAAQh3C,KAAag3C,KAErBh3C,KAAK82C,UAAU,uBAAuBtzC,EAAKnH,OAYpC,YAAAw2F,sBAAV,WAEC,OADA7yF,KAAKixF,uBAAuBn2F,KAAKkF,KAAKqW,MAAMlT,MAAM8qC,gBAAgB/lB,YAC3D,qCAEE,YAAA4qE,wBAAV,WAEC,OADA9yF,KAAKixF,uBAAuBn2F,KAAKkF,KAAKqW,MAAMlT,MAAM8qC,gBAAgB/lB,YAC3D,mCAEE,YAAA6qE,sBAAV,WAEC,OADA/yF,KAAKixF,uBAAuBn2F,KAAKkF,KAAKqW,MAAMlT,MAAM8qC,gBAAgB/lB,YAC3D,oCAEE,YAAA8qE,uBAAV,WACC,MAxTY,IAwTMhzF,KAAKqW,MAAMha,KAxTjB,KA0TH,YAAA42F,wBAAV,WACC,OAAOjzF,KAAKkzF,iBAAiB,MAEpB,YAAAC,wBAAV,WACC,OAAOnzF,KAAKkzF,iBAAiB,MAEpB,YAAAE,wBAAV,WACC,OAAOpzF,KAAKkzF,iBAAiB,MAMtB,YAAAA,iBAAR,SAAyB7+D,GACxB,IACMu9D,EADmB,CAAC,EAxUd,IAwU4Bv9D,EAxU5B,KAyU8BxqB,KAxUhB,MA0U1B,OADA7J,KAAKkyF,gCAAgC,WAAY,GAC1C,kBAAkBlyF,KAAK+wF,aAAY,wBAAwBa,EAAgB,OAQ3E,YAAAM,gCAAR,SACCl7C,EACAg7C,EACAF,GAEA,IACM7a,EAAS,IAAIoc,EADQ9C,EAA4Bv5C,IACjBh3C,KAAKqW,OAC3CrW,KAAK+wF,cAAgB,EACrB/wF,KAAK8wF,QAAQ9wF,KAAK+wF,cAAgB9Z,EAElC,IAAMqc,EAAoBrc,EAAOp/D,gBAAgBm6E,GAC7CsB,IACCxB,GACHwB,EAAkBC,cAAczB,GAEjC9xF,KAAKgxF,oBAAoBl2F,KAAKw4F,KAmBjC,EA3VA,CAAuC,EAAAt7C,eAA1B,EAAAs3C,qB,8ECjHb,+BAOA,OANQ,EAAA7gB,GAAP,SAAUh7D,GAIT,MAAO,IAHWA,EAAK,GAGH,QAFHA,EAAK,GAEc,QADlBA,EAAK,GAC8B,KAEvD,EAPA,GAAa,EAAA48E,+B,8ECIb,aAEA,SACA,SACA,SACA,SAMA,SAIA,SAIA,SACA,SAKA,SACA,SACA,SACA,SAEa,EAAAG,aAAe,CAE3Bz2B,KAAM,EAAAy5B,KACNC,GAAI,EAAAC,GACJC,SAAU,EAAAC,SACVC,QAAS,EAAAC,OACTC,MAAO,EAAAC,MACPC,SAAU,EAAAC,SACVjkF,MAAO,EAAAkkF,MACPxwF,aAAc,EAAAywF,YAEdnvE,KAAM,EAAAovE,KACNC,gBAAiB,EAAAC,cACjBC,WAAY,EAAAC,UACZC,UAAW,EAAAC,SACXC,QAAS,EAAAC,S,yFCnDV,QAEA,OAYMC,EAA2C,CAAC,MAAO,MAAO,OAAQ,UAClEC,EAAkB,CAAC,IAAK,IAAK,KAEnC,2B,+CAqEA,OArE0B,iBAGlB,EAAAz+E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,yCACX,CAAC,SAAU,8BAIb,YAAAuB,gBAAA,SAAgBf,GACf,OAAO9W,KAAK8X,qCAAqChB,IAGlD,YAAAF,kBAAA,SAAkBnD,GAAlB,WACK3W,EAAQ,EACZ,OAAO,IAAIklB,SAAQ,SAAOC,EAASC,GAAM,+C,+EACrB,GAAfzO,EAAKjZ,OAAL,YACGsc,EAAgBrD,EAAK,GACrBuhF,EAAcvhF,EAAK,GACnB2gB,EAAiB3gB,EAAK,GAExB1R,EAAsC,K,iBAE5B,O,sBAAA,GAAM/B,KAAK6W,8BAA8BC,I,cAAtD/U,EAAa,S,+BAEbmgB,EAAO,G,oBAEJngB,IACHjF,EAAQkD,KAAKi1F,0BAA0BlzF,EAAWizF,EAAa5gE,GAC/DnS,EAAQnlB,I,aAGTmlB,EAAQ,G,sCAKH,YAAAgzE,0BAAR,SACClzF,EACAizF,EACA5gE,GAEA,GAAI0gE,EAAaxwF,QAAQ0wF,IAAgB,EAAG,CAC3C,IAAMj7B,EAAOh4D,EAAUyJ,eAEnB0pF,EAAS,IAAI,EAAA3mF,QACjB,OAAQymF,GACP,IAAK,OACJj7B,EAAKD,QAAQo7B,GACb,MACD,IAAK,SACJn7B,EAAKF,UAAUq7B,GACf,MACD,QACCA,EAASn7B,EAAKi7B,GAGhB,OAAID,EAAgBzwF,QAAQ8vB,IAAmB,EAEvC8gE,EAAO9gE,IAEN,EAGT,OAAQ,GAGX,EArEA,CAA0B,EAAA7b,YAAb,EAAAi7E,Q,yFCjBb,2BAEA,SACA,QAEA,SACA,QAKA,cAMC,WACQn9E,EACA27E,EACA36E,GAHR,MAKC,YAAMhB,EAAMlT,MAAO,qBAAmB,K,OAJ/B,EAAAkT,QACA,EAAA27E,gBACA,EAAA36E,kBALA,EAAA89E,+BAAiC,EAAKC,yBAAyB/3F,KAAK,GAW3E,EAAKwX,oBAAoB,2BAA4B,EAAKsgF,gC,EAqE5D,OApFsC,iBAiBrC,YAAAC,yBAAA,SAAyB3gF,GACxB,GAAI,EAAAwD,WAAWC,KAAKzD,EAAS,EAAA5Q,YAAc7D,KAAKqX,gBAAiB,CAChE,IAAM7T,EAAOiR,EACbzU,KAAKqX,gBAAgB8+B,wBAAwB3yC,GAC7C,IAAM6xF,EAAWr1F,KAAKqX,gBAAgB++B,UAEhCk/C,EAAUt1F,KAAKm9E,UACjBmY,IACHA,EAAQx4F,OAAQ,GAAGw4F,EAAQx4F,OAAQqL,QAAQ,GAAGnI,KAAKgyF,cAAiBqD,GACpEC,EAAQv9C,IAAMu9C,EAAQv9C,IAAI5vC,QAAQ,GAAGnI,KAAKgyF,cAAiBqD,IAExDr1F,KAAKqW,MAAMkN,uBACdvjB,KAAKqW,MAAMkN,sBAAsBqmC,8CAIpC,YAAA/wB,MAAA,WACC74B,KAAKsV,iCAGN,YAAAigF,wBAAA,sBACKv1F,KAAKm9E,WAAan9E,KAAKqX,iBAC1BrX,KAAKqX,gBAAgBiB,YAAY1W,SAAQ,SAAC4zF,GACrCA,GAAgBA,aAAwB,EAAA74E,eAC3C,EAAK1H,gBAAgBugF,EAAan7E,gBAAgB6N,gBAMtD,YAAAqrE,cAAA,SAAcpW,GACbn9E,KAAKm9E,UAAYA,GAElB,YAAAsY,wBAAA,SAAwBjyF,GACvBxD,KAAK01F,oBAAsBlyF,GAE5B,YAAAmyF,oBAAA,SAAoBv+E,GACnBpX,KAAK41F,gBAAkBx+E,GAGjB,EAAAja,OAAP,SACCkZ,EACAS,EACAtT,EACAqyF,GAEA,IAAMC,EAAW,UAAgBh/E,GAE7BO,OAA8ChO,EAClD,GAAIwsF,EAAe,CAClBx+E,EAAkB,IAAI,EAAAU,eACtB,IAAyB,UAAA89E,EAAA,eAAe,CAAnC,IAAIL,EAAY,KACpBn+E,EAAgBsP,SAAS6uE,EAAan5F,KAAMm5F,IAI9C,IAAMziF,EAAW,IAAIsF,EAAiBhC,EAAOS,EAAeO,GAC5D,GAAI7T,EACHuP,EAAS0iF,wBAAwBjyF,QAEjC,IAAKsyF,EAAU,CACd,IAAM1+E,EAAON,EACb/D,EAAS4iF,oBAAoBv+E,GAG/B,OAAOrE,GAET,EApFA,CAAsC,EAAAqD,eAAzB,EAAAiC,oB,yFCNb,2B,+CAiEA,OAjE8B,iBAGtB,EAAA/B,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,8BAIb,YAAAuB,gBAAA,SAAgBf,GACf,OAAO9W,KAAK8X,qCAAqChB,IAGlD,YAAAF,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAAOC,EAASC,GAAM,+C,mFAKrB,GAAfzO,EAAKjZ,OAAL,YACGsc,EAAgBrD,EAAK,GACrB2gB,EAAiB3gB,EAAK,GACxB1R,EAAsC,K,iBAE5B,O,sBAAA,GAAM/B,KAAK6W,8BAA8BC,I,cAAtD/U,EAAa,S,+BAEbmgB,EAAO,G,oBAGJngB,IACGg4D,EAAOh4D,EAAUyJ,eACjBouD,EAASG,EAAKhyC,IAClBjlB,QACAwc,IAAIy6C,EAAK9wD,KACTic,eAAe,IAEXpoB,EAAQ88D,EAAOxlC,GAEpBnS,EADY,MAATnlB,EACKA,EAGA,I,aAIVmlB,EAAQ,G,sCAmBZ,EAjEA,CALA,MAK8B1J,YAAjB,EAAAq7E,Y,yFCHb,QACA,SAIA,2B,+CAwDA,OAxDwB,iBAKhB,EAAAt9E,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,mBAOpB,YAAAuB,gBAAA,SAAgBf,GACf,IAAMO,EAAkB,IAAI,EAAAU,eACtB1B,EAAQrW,KAAKmX,qBAAqBL,EAAyBO,GACjE,OAAIhB,EACIrW,KAAKgY,kBAAkB3B,EAAOS,EAAeO,GAE9C,MAcF,YAAAT,kBAAN,SAAwBnD,G,mIACnB3K,EAAW,EACI,GAAf2K,EAAKjZ,OAAL,OACG4c,EAAO3D,EAAK,IACZ8pE,EAAMv9E,KAAKmX,qBAAqBC,IAErC,GAAMmmE,EAAI37D,WADP,O,OACH,SAEc,OADRvmB,EAASkiF,EAAIzgF,SAGlBgM,EAAMzN,G,iBAKT,MAAO,CAAP,EAAOyN,WAQT,EAxDA,CAAwB,EAAAyP,YAAX,EAAAm7E,M,yFCPb,QAEA,QAIA,2B,+CAsEA,OAtE0B,iBAClB,EAAAp9E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,UAAW,mBAGP,EAAAE,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,+BAGpB,YAAAqB,gBAAA,SAAgBf,GACf,IAAMtT,EAAOxD,KAAKwX,2BAA2BV,GAG7C,GAAItT,GAAqB,QAAbA,EAAK1F,KAAgB,CAChC,IAAMi4F,EAAcvyF,EAAqBuyF,WACzC,OAAO/1F,KAAKgY,kBAAkB+9E,EAAYj/E,GAE3C,OAAO,MAQR,YAAAF,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAACC,EAASC,GAC5B,GAAmB,GAAfzO,EAAKjZ,QAA8B,GAAfiZ,EAAKjZ,OAAa,CACzC,IAAM4c,EAAO3D,EAAK,GACZ/F,EAAgB+F,EAAK,GACrBvE,EAAiBuE,EAAK,GAEtBjQ,EAAO,EAAA8T,WAAWK,UAAU,EAAKnU,KAAM4T,GAEzCta,OAAK,EACL0G,GAAqB,QAAbA,EAAK1F,OAChBhB,EAAS0G,EAAqBwyF,YAAY9mF,IAM9B,MAATpS,IACHA,EAAQ4Q,GAETuU,EAAQnlB,QAERmlB,EAAQ,OAqBZ,EAtEA,CAA0B,EAAA1J,YAAb,EAAA87E,Q,yFCFb,2B,+CAkCA,OAlC4B,iBAGpB,EAAA/9E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,SAAU,4BAIb,YAAAuB,gBAAA,SAAgBf,GACf,OAAO9W,KAAK8X,qCAAqChB,IAG5C,YAAAF,kBAAN,SAAwBnD,G,qIACnB3W,EAAQ,EACO,GAAf2W,EAAKjZ,OAAL,OACGsc,EAAgBrD,EAAK,GACrB2gB,EAAiB3gB,EAAK,GACT,GAAMzT,KAAK6W,8BAA8BC,K,QAAtD/U,EAAa,YAGZk0F,EAAal0F,EAAUk0F,aACzB,CAAC,EAAG,IAAK,KAAKh9D,SAAS7E,GAC1Bt3B,EAAQm5F,EAAW,GAEf,CAAC,EAAG,IAAK,KAAKh9D,SAAS7E,KAC1Bt3B,EAAQm5F,EAAW,K,iBAKvB,MAAO,CAAP,EAAOn5F,WAET,EAlCA,CAJA,MAI4Byb,YAAf,EAAAu7E,U,yFCJb,QACA,QAEA,2B,+CAqCA,OArC2B,iBAKnB,EAAAx9E,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,UAGpB,YAAAM,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAACC,EAASC,GAC5B,EAAKg0E,kBAAkBziF,EAAK,IAAI2c,MAAK,SAAC2Q,GACrC9e,EAAQ8e,UASX,YAAAm1D,kBAAA,SAAkB75F,GAAlB,WACC,OAAO,IAAI2lB,SAAQ,SAACC,EAASC,GAM5B,IAAI,EAAArO,KAAKN,qBAAqBnT,SAK7B,OAAO6hB,EAAQ,IAJf,EAAApO,KAAKN,qBAAqB4iF,eAAe95F,EAAM,EAAKga,OAEpD4L,EADM,EAAApO,KAAKN,qBAAqB6iF,sBAAsB/5F,QAO1D,EArCA,CAA2B,EAAAkc,YAAd,EAAAy7E,S,yFCHb,QACA,QAGA,QAGA,2B,+CA0CA,OA1C8B,iBACtB,EAAA19E,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,kBAGpB,YAAAuB,gBAAA,SAAgBf,GACf,IAAMtT,EAAOxD,KAAKwX,2BAA2BV,GAC7C,GAAItT,GACCA,aAAgB,EAAAmZ,cAAe,CAClC,IAAM05E,EAAY7yF,EAAK6W,gBAAgB6N,WACvC,OAAOloB,KAAKgY,kBAAkBq+E,EAAWv/E,GAG3C,OAAO,MAYR,YAAAF,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAACC,EAASC,GAC5B,GAAmB,GAAfzO,EAAKjZ,OAAa,CACrB,IAAMsc,EAAgBrD,EAAK,GACrBjQ,EAAO,EAAKwT,oBAAoBF,GACtC,GAAItT,EAAM,CACT,IAAM,EAAOA,EAAKnH,KAElB4lB,EADc,EAAA/X,WAAW1C,YAAY,SAGrCya,EAAQ,QAGTA,EAAQ,OAIZ,EA1CA,CAA8B,EAAA1J,YAAjB,EAAA27E,Y,yFCFb,2B,+CAyEA,OAzE2B,iBACnB,EAAA59E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,gBACX,CAAC,QAAS,eACV,CAAC,SAAU,oBAIb,YAAAuB,gBAAA,SAAgBf,GACf,OAAO9W,KAAK8X,qCAAqChB,IAGlD,YAAAF,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAAOC,EAASC,GAAM,+C,iFACrB,GAAfzO,EAAKjZ,OAAL,YACGsc,EAAgBrD,EAAK,GACrBzG,EAAcyG,EAAK,GACnBzD,EAAcyD,EAAK,GACrB1R,EAAsC,K,iBAE5B,O,sBAAA,GAAM/B,KAAK6W,8BAA8BC,I,cAAtD/U,EAAa,S,+BAEbmgB,EAAO,G,oBAEJngB,IACGjF,EAAQkD,KAAKi1F,0BAA0BlzF,EAAWiL,EAAagD,GACrEiS,EAAQnlB,I,aAGTmlB,EAAQ,G,sCAKX,YAAAgzE,0BAAA,SAA0BlzF,EAA8BiL,EAAqBgD,GAC5E,IAAMpP,EAAamB,EAAUC,eAE7B,GAAIpB,EAAY,CACf,IAAMqP,EAAQrP,EAAW+O,SAASK,GAElC,OAAIC,EACIA,EAAMW,aAAa5D,GAEnB,EAGR,OAAO,MA0BV,EAzEA,CALA,MAK2BuL,YAAd,EAAA47E,S,yFCAb,2B,+CAgCA,OAhCiC,iBAGzB,EAAA79E,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,kBAGpB,YAAAuB,gBAAA,SAAgBf,GACf,OAAO9W,KAAK8X,qCAAqChB,IAGlD,YAAAF,kBAAA,SAAkBnD,GAAlB,WACC,OAAO,IAAIuO,SAAQ,SAAOC,EAASC,GAAM,+C,6EACrB,GAAfzO,EAAKjZ,OAAL,YACGsc,EAAgBrD,EAAK,GACvB1R,OAAS,E,iBAEC,O,sBAAA,GAAM/B,KAAK6W,8BAA8BC,I,cAAtD/U,EAAa,S,aAGb,O,WADAmgB,EAAO,GACP,I,cAGGngB,IACGjF,EAAQiF,EAAU4B,eACxBse,EAAQnlB,I,aAGTmlB,EAAQ,G,sCAIZ,EAhCA,CALA,MAKiC1J,YAApB,EAAA67E,e,yFCFb,2B,+CAmBA,OAnBmC,iBAE3B,EAAA99E,mBAAP,WACC,MAAO,CAAC,CAAC,SAAU,mCAQd,YAAAM,kBAAN,SAAwBnD,G,iGAMvB,OALI3W,EAAQ,EACO,GAAf2W,EAAKjZ,SACFgwD,EAAS/2C,EAAK,GACpB3W,EAAQ0tD,EAAOhwD,QAET,CAAP,EAAOsC,UAET,EAnBA,CAHA,MAGmCyb,YAAtB,EAAAg8E,iB,yFCAb,2B,+CA6BA,OA7B+B,iBAIvB,EAAAj+E,mBAAP,WACC,MAAO,IAYF,YAAAM,kBAAN,SAAwBnD,G,qGAGvB,IAFI3W,EAAQ,GAEP,EAAL,EAAgB,EAAA2W,EAAA,eACJ,OADHi+E,EAAG,QAEVA,EAAM,IAEP50F,GAAS,GAAG40F,EAGb,MAAO,CAAP,EAAO50F,UAET,EA7BA,CAHA,MAG+Byb,YAAlB,EAAAk8E,a,yFCAb,2B,+CAuBA,OAvB8B,iBAEtB,EAAAn+E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,4BACX,CAAC,SAAU,2BASP,YAAAM,kBAAN,SAAwBnD,G,mGAOvB,OANI3W,GAAS,EACM,GAAf2W,EAAKjZ,SACFgwD,EAAS/2C,EAAK,GACd6iF,EAAa7iF,EAAK,GACxB3W,EAAQ0tD,EAAOlmD,QAAQgyF,IAEjB,CAAP,EAAOx5F,UAET,EAvBA,CAHA,MAG8Byb,YAAjB,EAAAo8E,Y,yFCAb,2B,+CAyBA,OAzB4B,iBAEpB,EAAAr+E,mBAAP,WACC,MAAO,CACN,CAAC,SAAU,4BACX,CAAC,UAAW,eACZ,CAAC,UAAW,gBASR,YAAAM,kBAAN,SAAwBnD,G,qGAQvB,OAPI3W,EAAQ,GACN0tD,EAAS/2C,EAAK,GACd8iF,EAAc9iF,EAAK,IAAM,EAC3B+iF,EAAa/iF,EAAK,IAAM,EACxB+2C,IACH1tD,EAAQ0tD,EAAO5hD,OAAO2tF,EAAaC,IAE7B,CAAP,EAAO15F,UAET,EAzBA,CAHA,MAG4Byb,YAAf,EAAAs8E,U,8ECAb,iBAEC,cA8ED,OA5EC,YAAAh8D,MAAA,WACK74B,KAAKy2F,kBACRz2F,KAAKy2F,iBAAiBx5E,SAGxB,YAAAo0E,wBAAA,W,MACC,GAAIrxF,KAAKy2F,iBAAkB,CAC1B,IAAM,EAAkB,GAIxB,OAHqB,QAArB,EAAAz2F,KAAKy2F,wBAAgB,SAAE70F,SAAQ,SAACsN,GAC/B,EAAMpU,KAAK+1F,EAAgC6F,sBAAsBxnF,OAE3D,EAAMrF,KAAK,OAElB,MAAO,IAGT,YAAA0nF,oBAAA,W,MACC,GAAIvxF,KAAKy2F,iBAAkB,CAC1B,IAAM,EAAkB,GAKxB,OAJqB,QAArB,EAAAz2F,KAAKy2F,wBAAgB,SAAE70F,SAAQ,SAACsN,GAC/B,EAAMpU,KAAK+1F,EAAgC8F,sBAAsBznF,IACjE,EAAMpU,KAAK+1F,EAAgC+F,kBAAkB1nF,OAEvD,EAAMrF,KAAK,OAElB,MAAO,IAGT,YAAAynF,8BAAA,W,MACC,GAAItxF,KAAKy2F,iBAAkB,CAC1B,IAAM,EAAsB,GAK5B,OAJqB,QAArB,EAAAz2F,KAAKy2F,wBAAgB,SAAE70F,SAAQ,SAACsN,GAC/B,IAAM05B,EAAWioD,EAAgCgG,cAAc3nF,GAC/D,EAAUpU,KAAK8tC,MAET,EAAU/+B,KAAK,QAEtB,MAAO,QAIT,YAAAyV,IAAA,SAAIpQ,GACHlP,KAAKy2F,iBAAmBz2F,KAAKy2F,kBAAoB,IAAIl2C,IACrDvgD,KAAKy2F,iBAAiBn3E,IAAIpQ,IAGpB,EAAAwnF,sBAAP,SAA6BxnF,GAE5B,MAAO,SADelP,KAAK62F,cAAc3nF,GACZ,yCAAyCA,EAAc,MAE9E,EAAAynF,sBAAP,SAA6BznF,GAC5B,IAAM2nF,EAAgB72F,KAAK62F,cAAc3nF,GAEzC,MAAO,SADoBlP,KAAKwyF,mBAAmBtjF,GACjB,MAAM2nF,EAAa,aAE/C,EAAAD,kBAAP,SAAyB1nF,GACxB,IAAM2nF,EAAgB72F,KAAK62F,cAAc3nF,GAEzC,MAAO,SADWlP,KAAKyyF,UAAUvjF,GACR,MAAM2nF,EAAa,UAGtC,EAAAA,cAAP,SAAqB3nF,GACpB,MAAO,UAAUA,GAEX,EAAAsjF,mBAAP,SAA0BtjF,GACzB,MAAO,eAAeA,GAEhB,EAAAujF,UAAP,SAAiBvjF,GAChB,MAAO,SAASA,GAEjB,YAAAsjF,mBAAA,SAAmBtjF,GAClB,OAAO2hF,EAAgC2B,mBAAmBtjF,IAE3D,YAAAujF,UAAA,SAAUvjF,GACT,OAAO2hF,EAAgC4B,UAAUvjF,IAEnD,EAhFA,GAAa,EAAA2hF,mC,yFCoBb,cACC,WAAmBx6E,GAAnB,MACC,YAAMA,IAAM,K,OADM,EAAAA,Q,EAgCpB,OAjC+C,iBAK9C,YAAAm5E,WAAA,SAAWJ,GACV,GAAiC,MAA7BA,EAAYjkD,eAAyBikD,EAAY5rF,KACpD,IACC,OAAOxD,KAAK+2C,cAAcq4C,EAAY5rF,MACrC,MAAO8G,GACRtK,KAAK82C,UAAU,gCAGhB92C,KAAK82C,UAAU,sBAIP,YAAA06C,wBAAV,SAAkChuF,GAAlC,WAIOouF,EAAmB,GAHApuF,EAAKmnD,UAAUtgD,KAAI,SAACqnF,GAC5C,OAAO,EAAK36C,cAAc26C,MAEkB7nF,KApCnB,MAuC1B,OADqBrG,EAAKonD,OAA2BvuD,KAChC,IAAIu1F,EAAgB,KAEhC,YAAAO,yBAAV,SAAmC3uF,GAClC,MAAO,GAAGA,EAAK2zC,SAAWn3C,KAAK+2C,cAAcvzC,EAAK4uF,WAGzC,YAAAM,oBAAV,SAA8BlvF,GAC7B,MAAO,GAAGA,EAAKnH,MAEjB,EAjCA,CAFA,OAE+C27C,eAAlC,EAAA63C,6B,8ECNb,iBAUC,WAAmBx5E,GAAA,KAAAA,QANX,KAAAygF,uBAAiC,EAEjC,KAAA9F,oBAA0C,GAgHnD,OAxGW,YAAAl6C,UAAV,SAAoBh1C,GACnB9B,KAAKmrC,cAAgBnrC,KAAKmrC,eAAiBrpC,GAG5C,YAAA+2B,MAAA,WACC74B,KAAKqW,MAAMf,gCAEXtV,KAAKgxF,oBAAoBpvF,SAAQ,SAAC0xF,GACjCA,EAAkBz6D,WAEnB74B,KAAKgxF,oBAAsB,IAa5B,YAAAvsE,OAAA,SAAO4qE,GASNrvF,KAAK82F,uBAAwB,EAE7B92F,KAAK+2F,+BAA+B1H,GACpCrvF,KAAKgxF,oBAAsB3B,EAAmB2B,oBAC9ChxF,KAAKg3F,6BAGLh3F,KAAKu1F,2BAGE,YAAAwB,+BAAR,SAAuC1H,GAAvC,WACCA,EAAmB4B,uBAAuBrvF,SAAQ,SAACgoC,GAClD,GAAkC,GAA9B,EAAKktD,uBACsC,GAA1C,EAAKzgF,MAAMpB,gBAAgB20B,GAI9B,OAHA,EAAKktD,uBAAwB,EAC7B,EAAKhgD,UAAU,0DACf,EAAKje,YAMD,YAAAm+D,2BAAR,sBACCh3F,KAAKgxF,oBAAoBpvF,SAAQ,SAAC0xF,GACC,GAA9B,EAAKwD,uBACR,EAAKG,yBAAyB3D,OAKzB,YAAA2D,yBAAR,SAAiC3D,GAChC,IAAM4D,EAAc5D,EAAkBoC,oBAEtC,GAAIwB,IAMEl3F,KAAKqW,MAAMpB,gBAAgBiiF,GAI/B,OAHAl3F,KAAK82F,uBAAwB,EAC7B92F,KAAK82C,UAAU,0DACf92C,KAAK64B,SAQA,YAAA08D,wBAAR,WACCv1F,KAAKgxF,oBAAoBpvF,SAAQ,SAAC0xF,GACjCA,EAAkBiC,8BAoBrB,EAtHA,GAAa,EAAA/7E,0B,yFCjBb,QACA,QAIA,2B,+CAyBA,OAzBiC,iBACzB,EAAA1b,KAAP,WACC,OAAO,EAAAK,UAAUD,QAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAO8B,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKihB,Y,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOjhB,KAAKlD,O,gCAEN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAO,GAED,EAAAzQ,iBAAP,SAAwBL,EAA4CC,GACnE,OAAO,GAER,YAAAq2E,aAAA,WACCn3F,KAAKhC,QAAQotC,oBAEf,EAzBA,CAAiC,EAAAjzB,YAApB,EAAA4wC,e,yFCLb,SACA,2BAEA,QACA,QAOMquC,EAAwB,CAAC,IAAK,IAAK,KACzC,yE,OACW,EAAA32E,OAAS,IAAI,EAAAvb,M,EA0FxB,OA3FgC,iBAKxB,EAAApH,KAAP,WACC,OAAO,EAAAK,UAAUE,OAElB,sBAAW,oBAAe,C,IAA1B,WACC,OAAO+4F,G,gCAER,sBAAI,uCAAwB,C,IAA5B,WACC,OAAI,UAAep3F,KAAK0N,eAChB1N,KAAK0N,cAEL1N,KAAK0N,cAAc4d,W,gCAW5B,sBAAI,+BAAgB,C,IAApB,WACC,OAAOtrB,KAAKlD,MAAMwuB,W,gCAET,YAAAjK,iBAAV,SAA2BC,GAC1B,OAAIA,aAAqB,EAAApc,MACjBoc,EAAUxe,QAEkB,CAACwe,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAIrE,EAAAV,oBAAP,SACC8Q,EACAC,GAEA,OAAOD,GAAcC,GAEf,EAAAzQ,iBAAP,SAAwBL,EAA2CC,GAClE,OAAOD,EAAK+D,OAAO9D,IAEpB,YAAAuC,gBAAA,WACC,YAAMA,gBAAe,WACrBrjB,KAAKrD,EAAIqD,KAAK2iB,WAAW,GACzB3iB,KAAKkO,EAAIlO,KAAK2iB,WAAW,GACzB3iB,KAAKkL,EAAIlL,KAAK2iB,WAAW,IAqB1B,YAAA6R,0BAAA,WACCx0B,KAAKygB,OAAO9jB,EAAIqD,KAAKrD,EAAEG,MACvBkD,KAAKygB,OAAOvS,EAAIlO,KAAKkO,EAAEpR,MACvBkD,KAAKygB,OAAOvV,EAAIlL,KAAKkL,EAAEpO,OAiBzB,EA3FA,CAAgC,EAAAk4B,oBAAnB,EAAAg0B,c,yFCZb,QACA,QAIA,2B,+CAsBA,OAtBiC,iBACzB,EAAAlrD,KAAP,WACC,OAAO,EAAAK,UAAUI,QAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAOyB,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKihB,Y,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOjhB,KAAKlD,O,gCAEN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAO,GAED,EAAAzQ,iBAAP,SAAwBL,EAA4CC,GACnE,OAAO,GAET,EAtBA,CAAiC,EAAA3I,YAApB,EAAA8wC,e,yFCLb,QACA,QAIA,2B,+CAyBA,OAzBoC,iBAC5B,EAAAnrD,KAAP,WACC,OAAO,EAAAK,UAAUU,WAElB,sBAAI,uCAAwB,C,IAA5B,WACC,OAAOmB,KAAK0N,e,gCAEb,sBAAI,mCAAoB,C,IAAxB,WACC,OAAO1N,KAAKihB,Y,gCAEb,sBAAI,+BAAgB,C,IAApB,WACC,OAAOjhB,KAAKlD,O,gCAEN,EAAA8jB,oBAAP,SACC8Q,EACAC,GAEA,OAAO,GAED,EAAAzQ,iBAAP,SACCL,EACAC,GAEA,OAAO,GAET,EAzBA,CAAoC,EAAA3I,YAAvB,EAAAgxC,kB,yFCLb,SAEA,2BACA,OACA,QAKMkuC,EAA0B,CAAC,IAAK,KACtC,yE,OACW,EAAA52E,OAAS,IAAI,EAAAqQ,Q,EAyExB,OA1EkC,iBAI1B,EAAAhzB,KAAP,WACC,OAAO,EAAAK,UAAUY,SAGlB,sBAAW,oBAAe,C,IAA1B,WACC,OAAOs4F,G,gCAER,sBAAI,uCAAwB,C,IAA5B,WACC,OAAI,UAAer3F,KAAK0N,eAChB1N,KAAK0N,cAEL1N,KAAK0N,cAAc4d,W,gCAW5B,sBAAI,+BAAgB,C,IAApB,WACC,OAAOtrB,KAAKlD,MAAMwuB,W,gCAET,YAAAjK,iBAAV,SAA2BC,GAC1B,OAAIA,aAAqB,EAAAwP,QACjBxP,EAAUxe,QAEkB,CAACwe,EAAU,GAAIA,EAAU,KAIvD,EAAAV,oBAAP,SACC8Q,EACAC,GAEA,OAAID,aAAsB,EAAAZ,QACrBa,aAAsB,EAAAb,QAClBY,EAAW9M,OAAO+M,GAElBD,EAAW7jB,GAAK8jB,EAAW,IAAMD,EAAW5jB,GAAK6jB,EAAW,GAGhEA,aAAsB,EAAAb,QAClBY,EAAW,IAAMC,EAAW9jB,GAAK6jB,EAAW,IAAMC,EAAW7jB,EAE7D4jB,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,IAIjE,EAAAzQ,iBAAP,SAAwBL,EAA6CC,GACpE,OAAOD,EAAK+D,OAAO9D,IAEpB,YAAAuC,gBAAA,WACC,YAAMA,gBAAe,WACrBrjB,KAAK6N,EAAI7N,KAAK2iB,WAAW,GACzB3iB,KAAK8N,EAAI9N,KAAK2iB,WAAW,IAG1B,YAAA6R,0BAAA,WACCx0B,KAAKygB,OAAO5S,EAAI7N,KAAK6N,EAAE/Q,MACvBkD,KAAKygB,OAAO3S,EAAI9N,KAAK8N,EAAEhR,OAQzB,EA1EA,CAAkC,EAAAk4B,oBAArB,EAAAo0B,gB,yFCVb,SACA,2BAGA,OACA,QAKMkuC,EAA0B,CAAC,IAAK,IAAK,KAC3C,yE,OACW,EAAA72E,OAAS,IAAI,EAAAlS,Q,EAiGxB,OAlGkC,iBAK1B,EAAAzQ,KAAP,WACC,OAAO,EAAAK,UAAUa,SAElB,sBAAW,oBAAe,C,IAA1B,WACC,OAAOs4F,G,gCAER,sBAAI,uCAAwB,C,IAA5B,WACC,OAAI,UAAet3F,KAAK0N,eAChB1N,KAAK0N,cAEL1N,KAAK0N,cAAc4d,W,gCAW5B,sBAAI,+BAAgB,C,IAApB,WACC,OAAOtrB,KAAKlD,MAAMwuB,W,gCAET,YAAAjK,iBAAV,SAA2BC,GAC1B,OAAIA,aAAqB,EAAA/S,QACjB+S,EAAUxe,QAEkB,CAACwe,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAKrE,EAAAV,oBAAP,SACC8Q,EACAC,GAEA,OAAID,aAAsB,EAAAnjB,QACrBojB,aAAsB,EAAApjB,QAClBmjB,EAAW9M,OAAO+M,GAElBD,EAAW7jB,GAAK8jB,EAAW,IAAMD,EAAW5jB,GAAK6jB,EAAW,IAAMD,EAAW1jB,GAAK2jB,EAAW,GAGjGA,aAAsB,EAAApjB,QAClBmjB,EAAW,IAAMC,EAAW9jB,GAAK6jB,EAAW,IAAMC,EAAW7jB,GAAK4jB,EAAW,IAAMC,EAAW3jB,EAGpG0jB,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,IAAMD,EAAW,IAAMC,EAAW,IAK7F,EAAAzQ,iBAAP,SAAwBL,EAA6CC,GACpE,OAAOD,EAAK+D,OAAO9D,IAEpB,YAAAuC,gBAAA,WACC,YAAMA,gBAAe,WACrBrjB,KAAK6N,EAAI7N,KAAK2iB,WAAW,GACzB3iB,KAAK8N,EAAI9N,KAAK2iB,WAAW,GACzB3iB,KAAKgO,EAAIhO,KAAK2iB,WAAW,IAsB1B,YAAA6R,0BAAA,WACCx0B,KAAKygB,OAAO5S,EAAI7N,KAAK6N,EAAE/Q,MACvBkD,KAAKygB,OAAO3S,EAAI9N,KAAK8N,EAAEhR,MACvBkD,KAAKygB,OAAOzS,EAAIhO,KAAKgO,EAAElR,OAQzB,EAlGA,CAAkC,EAAAk4B,oBAArB,EAAAq0B,gB,yFCXb,SAEA,2BACA,QACA,QAKMkuC,EAA0B,CAAC,IAAK,IAAK,IAAK,KAChD,yE,OACW,EAAA92E,OAAS,IAAI,EAAAg7C,Q,EAmGxB,OApGkC,iBAM1B,EAAA39D,KAAP,WACC,OAAO,EAAAK,UAAUc,SAElB,sBAAW,oBAAe,C,IAA1B,WACC,OAAOs4F,G,gCAER,sBAAI,uCAAwB,C,IAA5B,WACC,OAAI,UAAev3F,KAAK0N,eAChB1N,KAAK0N,cAEL1N,KAAK0N,cAAc4d,W,gCAgB5B,sBAAI,+BAAgB,C,IAApB,WACC,OAAOtrB,KAAKlD,MAAMwuB,W,gCAGT,YAAAjK,iBAAV,SAA2BC,GAC1B,OAAIA,aAAqB,EAAAm6C,QACjBn6C,EAAUxe,QAEkB,CAACwe,EAAU,GAAIA,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAInF,EAAAV,oBAAP,SACC8Q,EACAC,GAEA,OAAID,aAAsB,EAAA+pC,QACrB9pC,aAAsB,EAAA8pC,QAClB/pC,EAAW9M,OAAO+M,GAGxBD,EAAW7jB,GAAK8jB,EAAW,IAC3BD,EAAW5jB,GAAK6jB,EAAW,IAC3BD,EAAW1jB,GAAK2jB,EAAW,IAC3BD,EAAWtjB,GAAKujB,EAAW,GAIzBA,aAAsB,EAAA8pC,QAExB/pC,EAAW,IAAMC,EAAW9jB,GAC5B6jB,EAAW,IAAMC,EAAW7jB,GAC5B4jB,EAAW,IAAMC,EAAW3jB,GAC5B0jB,EAAW,IAAMC,EAAWvjB,EAI5BsjB,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,IAC5BD,EAAW,IAAMC,EAAW,IAKzB,EAAAzQ,iBAAP,SAAwBL,EAA6CC,GACpE,OAAOD,EAAK+D,OAAO9D,IAEpB,YAAAuC,gBAAA,WACC,YAAMA,gBAAe,WACrBrjB,KAAK6N,EAAI7N,KAAK2iB,WAAW,GACzB3iB,KAAK8N,EAAI9N,KAAK2iB,WAAW,GACzB3iB,KAAKgO,EAAIhO,KAAK2iB,WAAW,GACzB3iB,KAAKoO,EAAIpO,KAAK2iB,WAAW,IAG1B,YAAA6R,0BAAA,WACCx0B,KAAKygB,OAAO5S,EAAI7N,KAAK6N,EAAE/Q,MACvBkD,KAAKygB,OAAO3S,EAAI9N,KAAK8N,EAAEhR,MACvBkD,KAAKygB,OAAOzS,EAAIhO,KAAKgO,EAAElR,MACvBkD,KAAKygB,OAAOrS,EAAIpO,KAAKoO,EAAEtR,OAQzB,EApGA,CAAkC,EAAAk4B,oBAArB,EAAAs0B,gB,8ECQb,MACC,aADY,EAAA5wC,uB,8EChBb,iBAEC,WAAYlV,GADJ,KAAAg0F,OAAiB,EAQ1B,OANC,YAAAvyE,KAAA,SAAKwyE,GACJz3F,KAAKw3F,OAASC,EAAY3pD,OAE3B,sBAAI,oBAAK,C,IAAT,WACC,OAAO9tC,KAAKw3F,Q,gCAEd,EATA,GAAa,EAAA98E,qB,8ECAb,aACA,SACA,SAEA,aAKC,WAAsBlX,GAAA,KAAAA,OAJZ,KAAAk0F,aAAsC,IAAI,EAAAC,sBAAsB33F,KAAKwD,MAkChF,OAzBC,sBAAI,0BAAW,C,IAAf,WACC,OAAOxD,KAAK03F,c,gCAOb,sBAAI,qBAAM,C,IAAV,WACC,OAAQ13F,KAAK43F,QAAU53F,KAAK43F,SAAW,IAAI,EAAAC,iBAAoB73F,KAAKwD,O,gCAErE,YAAAs0F,WAAA,WACC,OAAuB,MAAhB93F,KAAK43F,SAOb,sBAAI,sBAAO,C,IAAX,WACC,OAAQ53F,KAAK+3F,SAAW/3F,KAAK+3F,UAAY,IAAI,EAAAC,kBAAqBh4F,KAAKwD,O,gCAExE,YAAAy0F,YAAA,WACC,OAAwB,MAAjBj4F,KAAK+3F,UAEd,EAnCA,GAAa,EAAA79E,gB,kFCLb,E,KAAA,uBAUA,aAIC,WAAsBoI,GAAA,KAAAA,QAFd,KAAA41E,oBAAgE,IAAI5+D,IAiG7E,OA7FC,YAAA/B,YAAA,WACC,IAAM7nB,EAAQ1P,KAAKsiB,MAAM9hB,GAAGiX,OAAO0gF,iBACnCn4F,KAAKo4F,mBAAqB,IAAIjkE,MAAMzkB,IAQrC,YAAA2oF,qBAAA,SAAqBngE,GAChBl4B,KAAKo4F,mBAERp4F,KAAKo4F,mBAAmBlgE,EAAWzH,aAAeyH,EAKlD90B,QAAQmT,KAAK,4CAGf,YAAA+hF,wBAAA,SAAwBpgE,GACnBl4B,KAAKo4F,mBACJlgE,EAAWzH,YAAczwB,KAAKo4F,mBAAmB59F,OACpDwF,KAAKo4F,mBAAmBlgE,EAAWzH,kBAAepnB,EAElDjG,QAAQmT,KAAK,kDAAkD2hB,EAAWzH,aAG3ErtB,QAAQmT,KAAK,4CAGf,YAAA4hB,iBAAA,SAAiBh2B,GAChB,GAAInC,KAAKo4F,mBACR,OAAOp4F,KAAKo4F,mBAAmBj2F,IAGjC,YAAA4iF,uBAAA,WACC,OAAO,UAAe/kF,KAAKo4F,oBAAoB,IAEhD,YAAAG,sBAAA,WACC,IAAMjhE,EAAc,UAAet3B,KAAKo4F,oBACxC,OAAO9gE,EAAYA,EAAY98B,OAAS,IAEzC,YAAAiuD,kBAAA,WACC,OAAOzoD,KAAKo4F,oBAQb,YAAAI,sBAAA,SAAsBtgE,GACrB,IAAMI,EAAeJ,EAAWI,aAC1B7tB,EAAKytB,EAAWztB,GAClBguF,EAAoBz4F,KAAKk4F,oBAAoBx7F,IAAI47B,GAChDmgE,IACJA,EAAoB,IAAIn/D,IACxBt5B,KAAKk4F,oBAAoBh4F,IAAIo4B,EAAcmgE,IAE5CA,EAAkBv4F,IAAIuK,EAAIytB,IAI3B,YAAAwgE,yBAAA,SAAyBxgE,GACxB,IAAMI,EAAeJ,EAAWI,aAC1B7tB,EAAKytB,EAAWztB,GAClBguF,EAAoBz4F,KAAKk4F,oBAAoBx7F,IAAI47B,GACjDmgE,GACHA,EAAkBpgB,OAAO5tE,IAK3B,YAAAiwB,mBAAA,WACC,IAAIF,EAAyB,GAe7B,OAbAx6B,KAAKk4F,oBAAoBt2F,SAAQ,SAAC62F,EAAmBngE,GACpDmgE,EAAkB72F,SAAQ,SAACs2B,EAAYztB,GAClCytB,GACHsC,EAAK1/B,KAAKo9B,SAUNsC,GAET,EAnGA,GAAa,EAAAm9D,yB,yFCPb,4BACA,2BAGA,SAEA,QACA,QACA,QACA,SAgBA,aAkBC,WAAsBn0F,GAAA,KAAAA,OAjBd,KAAAm1F,mBAAsC,GACtC,KAAAf,QAA2B,GAC3B,KAAAgB,mBAA6B,EAG7B,KAAAC,kBAA4B,EAC5B,KAAAC,kBAA4B,EAC5B,KAAAC,oBAA8B,EAQ9B,KAAAC,0BAAoC,EAgd7C,OA1bC,YAAA90E,sBAAA,SAAsB+0E,GACrBj5F,KAAK+4F,mBAAqBE,GAEnB,YAAAC,qBAAR,SAA6BC,GAC5Bn5F,KAAK64F,kBAAoBM,GAKlB,YAAAC,qBAAR,SAA6BjB,GAC5Bn4F,KAAK84F,kBAAoBX,EACzBn4F,KAAKq5F,0BAGN,YAAA3xD,sCAAA,SAAsCrrC,GACrC,GAAI2D,KAAKs5F,+BACR,IAA6B,UAAAt5F,KAAKs5F,+BAAL,eAAqC,CAA7D,IAAIz/D,EAAgB,KACxB,GAAIA,EAAiBx9B,MAAQA,EAC5B,OAAOw9B,IAKX,YAAAV,kCAAA,SAAkCogE,GACjCv5F,KAAK44F,mBAAoB,EACzB54F,KAAKs5F,+BAAiCC,EACtCv5F,KAAKk5F,qBAAqB,GAC1Bl5F,KAAKo5F,qBAAqBG,EAAkB/+F,QAC5CwF,KAAKq5F,yBACLr5F,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUmuF,uBAE1B,sBAAI,+BAAgB,C,IAApB,WACC,OAAOx5F,KAAK44F,mB,gCAEb,sBAAI,4CAA6B,C,IAAjC,WACC,OAAO54F,KAAKs5F,gCAAkC,I,gCAEvC,YAAAD,uBAAR,WACC,IAAK,IAAI/+F,EAAI,EAAGA,EAAI0F,KAAK84F,kBAAmBx+F,IAC3C0F,KAAK24F,mBAAmBr+F,GAAK0F,KAAK24F,mBAAmBr+F,IAAM0F,KAAKy5F,yBAAyBn/F,IAGnF,YAAAm/F,yBAAR,SAAiCt3F,GAChC,IAAMu3F,EAAmB,IAAI,EAAAtjF,cAAcpW,KAAKwD,KAAKL,MAAO,SAAShB,GAGrE,OADAnC,KAAKwD,KAAKyR,gBAAgBykF,GACnBA,GAGR,sBAAI,+BAAgB,C,IAApB,WACC,OAAO15F,KAAK84F,mBAAqB,G,gCAElC,YAAAphF,iBAAA,SAAiB+Y,GAChB,OAAOzwB,KAAK24F,mBAAmBloE,IAehC,YAAAxM,UAAA,SAAU8D,EAAa9e,GACX,MAAPA,IACHA,EAAM8e,GAEP/nB,KAAKk5F,qBAAqBnxE,GAC1B/nB,KAAKo5F,qBAAqBnwF,GAE1BjJ,KAAK25F,6BACL35F,KAAK45F,sCAEE,YAAAA,mCAAR,WACC55F,KAAKwD,KAAKhD,GAAG82B,YAAYC,eAwDpB,YAAAsxD,uBAAN,W,wIACKgR,EAA0C,GAC1C75F,KAAK84F,kBAAoB,GACtB,EAAmC,GACzC94F,KAAKyX,SAAS7V,SAAQ,SAACgW,EAAOtd,GACzBsd,GACH,EAAuB9c,KAAKR,MAI1B,EAAuBE,OAASwF,KAAK64F,mBACxC74F,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,sB,OADxB,OARD,M,cAWE,EAAuB1F,OAAS,GAC7Bi6B,EAAW,EAAuBpqB,KAAI,SAAComB,GAC5C,OAAO,EAAKjtB,KAAKhD,GAAGiX,OAAOqiF,oBAAoBrpE,MAEnC,GAAMzO,QAAQ0S,IAAID,KAJ5B,M,OAIHolE,EAAa,S,iBAIhB,MAAO,CAAP,EAAOA,WAiBF,YAAAC,oBAAN,SAA0BrpE,G,0HACP,SAAMzwB,KAAKwD,KAAKlE,qBAAqB6wB,wBAAwBM,I,OAa/E,OAbM1uB,EAAY,WAEDA,EAAUC,iBAGpB0uB,EAAa1wB,KAAK4X,MAAM6Y,MAEvBspE,EAAsBrpE,EAAWJ,OAAOhT,MAAMxb,UAEnD9B,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,SAASuwB,EAAW,uBAAuBspE,EAAmB,KAIrF,CAAP,EAAOh4F,WAaR,YAAAi4F,sBAAA,SAAsB39F,GACrB,GAAI2D,KAAKs5F,+BACR,IAAK,IAAIh/F,EAAI,EAAGA,EAAI0F,KAAKs5F,+BAA+B9+F,OAAQF,IAC/D,GAAI0F,KAAKs5F,+BAA+Bh/F,GAAG+B,MAAQA,EAClD,OAAO/B,EAIV,OAAQ,GAcT,YAAA29B,gBAAA,SAAgB/b,GACf,GAAI,UAAgBA,GAAsB,CACzC,GAAIlc,KAAKi6F,iBACR,OAAOj6F,KAAKg6F,sBAAsB99E,GAElC,MAAM,IAAIqvB,MAAM,QAAQvrC,KAAKwD,KAAK0T,YAAW,wBAG9C,OAAOgF,GAIT,YAAAD,UAAA,SAAUC,EAAsC1Y,EAAgB2Y,QAAA,IAAAA,MAAA,GAC/D,IAAMsU,EAAczwB,KAAKi4B,gBAAgB/b,IAAwB,EAC7Doc,EAAe,EACf90B,GACCA,EAAKhD,GAAGC,QAAQy5F,oBAEnB5hE,EAAe90B,EAAKhD,GAAGC,QAAQ05F,iBAAiBh+E,IAAyB,GAQ3E,IAAMu9E,EAAmB15F,KAAK24F,mBAAmBloE,GACjD,GAAwB,MAApBipE,EACH,KAAM,uCAAuCjpE,EAG9C,IAAIjtB,GAAQxD,KAAKwD,KAAKnD,QAAUmD,EAAKnD,OAArC,CAWA,IAAM+5F,EAAiBp6F,KAAK43F,QAAQnnE,GAChCy0D,EAAkC,KAClCmV,OAA6ChxF,EAC7CrJ,KAAKwD,KAAKhD,GAAG82B,cAChB+iE,EAAiBr6F,KAAKwD,KAAKhD,GAAG82B,YAAYa,iBAAiB1H,IAExD4pE,IACHnV,EAAmBmV,EAAe/hE,cAG/B90B,IAAS42F,GAAkB9hE,GAAgB4sD,IAExB,MAAlBkV,GACCp6F,KAAK+4F,oBACRW,EAAiBtkF,mBAAmBglF,GAI1B,MAAR52F,EACCk2F,EAAiBzkF,gBAAgBzR,IAI/BxD,KAAK+4F,oBACTW,EAAiBtkF,mBAAmB5R,GAIjC62F,GACHA,EAAehlF,WAAW,CAAC4G,WAAW,IAEvCjc,KAAK43F,QAAQnnE,GAAejtB,EAC5B,IAAI,EAAA82F,eAAe92F,EAAMxD,KAAKwD,KAAM80B,EAAc7H,IAElDrtB,QAAQmT,KAAK,kBAAkB/S,EAAK0T,YAAW,OAAOlX,KAAKwD,KAAK0T,cAGjElX,KAAK43F,QAAQnnE,GAAe,KACxB4pE,GACHA,EAAehlF,WAAW,CAAC4G,WAAW,KAKxCjc,KAAKssD,YACLtsD,KAAKwD,KAAKgR,UAAUhR,GACpBxD,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUkvF,mBAM3B,YAAAp6F,SAAA,SAAS21C,GACR91C,KAAKw6F,iBAAmBx6F,KAAKw6F,kBAAoB,GACjDx6F,KAAKw6F,iBAAiB1/F,KAAKg7C,IAE5B,YAAAwW,UAAA,WACC,GAAItsD,KAAKw6F,iBACR,IAAiB,UAAAx6F,KAAKw6F,iBAAL,eAAuB,EACvC1kD,EADY,UAMf,YAAA2kD,aAAA,SAAaj3F,GAAb,WACC,UAAYxD,KAAKyX,UAAU,SAACG,EAAOzV,GACrB,MAATyV,GAAyB,MAARpU,GAChBoU,EAAMqQ,gBAAkBzkB,EAAKykB,eAChC,EAAKhM,UAAU9Z,EAAO,UAM1B,YAAAyV,MAAA,SAAM6Y,GACL,OAAOzwB,KAAK43F,QAAQnnE,IAGrB,YAAA4W,YAAA,SAAYD,GACX,GAAIpnC,KAAKi6F,iBAAkB,CAC1B,IAAMxpE,EAAczwB,KAAKi4B,gBAAgBmP,GACzC,OAAOpnC,KAAK43F,QAAQnnE,GAEpB,OAAO,MAGT,YAAA8pB,6BAAA,SAA6BnT,GAC5B,GAAIpnC,KAAKi6F,kBAAoBj6F,KAAKs5F,+BAAgC,CACjE,IAAM7oE,EAAczwB,KAAKi4B,gBAAgBmP,GACzC,OAAOpnC,KAAKs5F,+BAA+B7oE,KAG7C,YAAAiqE,gBAAA,SAAgBr+F,GACf,OAAO2D,KAAKg6F,sBAAsB39F,IAAS,GAE5C,YAAAs+F,UAAA,SAAUlqE,GACT,OAAoC,MAA7BzwB,KAAK43F,QAAQnnE,IAErB,YAAAhZ,OAAA,WACC,OAAOzX,KAAK43F,SAYb,YAAAgD,gCAAA,WAEC,IADA,IAAI99F,GAAQ,EACM,MAAAkD,KAAK66F,wBAAL,eAA8B,CAAlC,MACA,EAAA72F,eAAe82F,YAC3Bh+F,GAAQ,GAGV,OAAOA,GAGR,YAAA+9F,sBAAA,WACC,OAAQ76F,KAAK+6F,wBAA0B/6F,KAAK+6F,yBAA2B/6F,KAAK25F,8BAE7E,YAAAqB,aAAA,SAAa74F,GACZ,OAAOnC,KAAKqoF,mCAAmClmF,IAEhD,YAAAomD,oCAAA,WAGC,IAFA,IAAM/tB,EAAO,GACPlK,EAAStwB,KAAK66F,wBACXvgG,EAAI,EAAGA,EAAIg2B,EAAO91B,OAAQF,IAClCkgC,EAAK1/B,KAAKkF,KAAKqoF,mCAAmC/tF,IAEnD,OAAOkgC,GAER,YAAA6tD,mCAAA,SAAmClmF,GAClC,IAGM6c,EAHShf,KAAK66F,wBAGC14F,GACrB,OAAQ6c,GACP,KAAK,EAAAhb,eAAei3F,OACnB,OAAO,EACR,KAAK,EAAAj3F,eAAek3F,MACnB,OAAO,EACR,KAAK,EAAAl3F,eAAe82F,UACnB,OAAQ96F,KAAKg5F,yBAIf,OAAO,EAAAxtD,WAAWF,YAAYtsB,IAI/B,YAAA26E,2BAAA,SAA2BtsF,GAM1B,YAN0B,IAAAA,MAAA,MACtBA,IACHrN,KAAKm7F,6BAA+B9tF,GAErCrN,KAAK+6F,wBAA0B/6F,KAAKm7F,8BAAgCn7F,KAAKo7F,uCAElEp7F,KAAK+6F,yBAEL,YAAAK,qCAAR,WAEC,IADA,IAAM5gE,EAAO,GACJlgC,EAAI,EAAGA,EAAI0F,KAAK84F,kBAAmBx+F,IAE3CkgC,EAAK1/B,KAAK,EAAAkJ,eAAei3F,QAE1B,OAAOzgE,GAGR,YAAA6gE,4BAAA,SAA4Br8E,GAC3Bhf,KAAKg5F,yBAA2Bh6E,EAChChf,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUiwF,iCAE1B,YAAAhzC,wBAAA,WACC,OAAOtoD,KAAKg5F,0BAEd,EAheA,GAAa,EAAAnB,oB,8ECRb,iBAIC,WACS0D,EACAC,EACAC,EACAC,QADA,IAAAD,MAAA,QACA,IAAAC,MAAA,GAHA,KAAAH,YACA,KAAAC,aACA,KAAAC,gBACA,KAAAC,eAER17F,KAAK+xE,IAAMuoB,EAAe/hB,WAEtBv4E,KAAKu7F,UAAU/6F,GAAG82B,aAAet3B,KAAKw7F,WAAWh7F,GAAG82B,cACvDt3B,KAAKu7F,UAAU/6F,GAAG82B,YAAYkhE,sBAAsBx4F,MACpDA,KAAKw7F,WAAWh7F,GAAG82B,YAAY+gE,qBAAqBr4F,OA8BvD,OA3BC,sBAAI,iBAAE,C,IAAN,WACC,OAAOA,KAAK+xE,K,gCAGb,sBAAI,uBAAQ,C,IAAZ,WACC,OAAO/xE,KAAKu7F,W,gCAEb,sBAAI,wBAAS,C,IAAb,WACC,OAAOv7F,KAAKw7F,Y,gCAEb,sBAAI,2BAAY,C,IAAhB,WACC,OAAOx7F,KAAKy7F,e,gCAEb,sBAAI,0BAAW,C,IAAf,WACC,OAAOz7F,KAAK07F,c,gCAGb,YAAArmF,WAAA,SAAWrX,QAAA,IAAAA,MAAA,IACNgC,KAAKu7F,UAAU/6F,GAAG82B,aAAet3B,KAAKw7F,WAAWh7F,GAAG82B,cACvDt3B,KAAKu7F,UAAU/6F,GAAG82B,YAAYohE,yBAAyB14F,MACvDA,KAAKw7F,WAAWh7F,GAAG82B,YAAYghE,wBAAwBt4F,QAG9B,IAAtBhC,EAAQie,WACXjc,KAAKw7F,WAAWh7F,GAAGiX,OAAOwE,UAAUjc,KAAK07F,aAAc,OAxC1C,EAAAnjB,SAAmB,EA2CnC,EA5CA,GAAa,EAAA+hB,kB,yFCnBb,2BACA,2BACA,2BACA,QAMA,aAKC,WAAoB92F,GAAA,KAAAA,OAJZ,KAAAm4F,cAAwB,EAExB,KAAAC,oBAA8B,EAyHvC,OA5GC,YAAAl7F,mBAAA,WACCV,KAAK27F,cAAe,GAErB,YAAAE,kBAAA,WACC77F,KAAK27F,cAAe,GAGrB,sBAAI,0BAAW,C,IAAf,WACC,OAAO37F,KAAK27F,c,gCAEb,sBAAI,gCAAiB,C,IAArB,WACC,OAAO37F,KAAK47F,oB,gCAEb,YAAAE,iBAAA,SAAiBz/F,GAEhB,OAAO2D,KAAK+7F,uBAAuB1/F,IAAS,GAE7C,sBAAI,6CAA8B,C,IAAlC,WACC,OAAO2D,KAAKg8F,iCAAmC,I,gCAEhD,YAAAC,wBAAA,SAAwB95F,GACvB,GAAInC,KAAKg8F,gCACR,OAAOh8F,KAAKg8F,gCAAgC75F,IAa9C,YAAA45F,uBAAA,SAAuB1/F,GACtB,GAAI2D,KAAKg8F,gCACR,IAAK,IAAI1hG,EAAI,EAAGA,EAAI0F,KAAKg8F,gCAAgCxhG,OAAQF,IAChE,GAAI0F,KAAKg8F,gCAAgC1hG,GAAG+B,MAAQA,EACnD,OAAO/B,EAIV,OAAQ,GAUT,YAAA6/F,iBAAA,SAAiBh+E,GAChB,OAA4B,MAAxBA,EACC,UAAgBA,GACfnc,KAAKk6F,kBACDl6F,KAAK+7F,uBAAuB5/E,IAEnC/Y,QAAQmT,KAAK,QAAQvW,KAAKwD,KAAK0T,YAAW,0BAClC,GAGFiF,GAGD,GAGT,YAAAs+B,uCAAA,SAAuCp+C,GACtC,GAAI2D,KAAKg8F,gCACR,IAA6B,UAAAh8F,KAAKg8F,gCAAL,eAAsC,CAA9D,IAAIniE,EAAgB,KACxB,GAAIA,EAAiBx9B,MAAQA,EAC5B,OAAOw9B,IAMX,YAAAnC,mCAAA,SAAmC6hE,GAClCv5F,KAAK47F,oBAAqB,EAC1B57F,KAAKg8F,gCAAkCzC,EACnCv5F,KAAKwD,KAAKL,OACbnD,KAAKwD,KAAKgR,UAAUxU,KAAKwD,MAE1BxD,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAU6wF,wBAE1B,YAAA1yD,kBAAA,sBACC,GAAIxpC,KAAKwD,KAAKhD,GAAG82B,YAAa,CAC7B,IAAM6kE,EAAiB,UACtBn8F,KAAKwD,KAAKhD,GAAG82B,YACXoD,qBACArwB,KAAI,SAAC6tB,GAAe,OAACA,EAAaA,EAAWI,aAAe,SAEzD,EAAgC,GAStC,OARA6jE,EAAev6F,SAAQ,SAACO,GACnB,UAAgBA,IACnB,EAAoBrH,KAAKqH,MAGS,EAAoBkI,KAAI,SAAClI,GAC5D,OAAO,EAAKk2B,+BAA+Bl2B,GAAO9F,QAInD,MAAO,IAGV,EA5HA,GAAa,EAAA27F,qB,8ECOb,MACC,aADY,EAAAr/E,kB,yFCfb,2B,+CAIA,OAJsC,iBACrC,YAAA8C,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IAEpB,EAJA,CAHA,OAGsCuY,gBAAzB,EAAA6sD,oB,yFCHb,2BACA,4BACA,2BACA,SAGA,0BACS,KAAAwb,UAAoB,EAC5B,KAAAC,YAA6B,EAC7B,KAAAC,oBAA8B,EAC9B,KAAAC,iBAAgD,GAChD,KAAAC,mBAAyC,GACzC,KAAAC,yBAA+C,GAwIhD,OAhIC,YAAAC,QAAA,SAAQrgG,EAAc46E,GACrB,IAAMha,EAAazE,YAAYC,MAC/Bwe,IACA,IAAM0lB,EAAankC,YAAYC,MAAQwE,EACvC75D,QAAQC,IAAOhH,EAAI,KAAKsgG,IAGzB,YAAAp9C,MAAA,WACMv/C,KAAKo8F,WACTp8F,KAAK64B,QACL74B,KAAKo8F,UAAW,EAChBp8F,KAAKq8F,YAAc7jC,YAAYC,MAC/Bz4D,KAAKu8F,iBAAmB,GACxBv8F,KAAKs8F,oBAAsBt8F,KAAKq8F,cAKlC,YAAAO,KAAA,WACC58F,KAAK64B,SAEN,YAAAA,MAAA,WACC74B,KAAKo8F,UAAW,EAChBp8F,KAAKq8F,YAAc,KACnBr8F,KAAKw8F,mBAAqB,GAC1Bx8F,KAAKy8F,yBAA2B,GAChCz8F,KAAKu8F,iBAAmB,IAGzB,sBAAI,sBAAO,C,IAAX,WACC,OAAOv8F,KAAKo8F,U,gCAGb,YAAAxT,sBAAA,SAAsBplF,GACrB,IAAMiH,EAAKjH,EAAKykB,cACiB,MAA7BjoB,KAAKu8F,iBAAiB9xF,KACzBzK,KAAKu8F,iBAAiB9xF,GAAM,IAAI,EAAAoyF,gBAAgBr5F,IAEjDxD,KAAKu8F,iBAAiB9xF,GAAIqyF,oBAG3B,YAAAC,OAAA,SAAO1gG,GACD2D,KAAK6nF,SACT7nF,KAAKu/C,QAGN,IAAMy9C,EAAoBxkC,YAAYC,MAWtC,OATqC,MAAjCz4D,KAAKw8F,mBAAmBngG,KAC3B2D,KAAKw8F,mBAAmBngG,GAAQ,GAEjC2D,KAAKw8F,mBAAmBngG,IAAS2gG,EAAoBh9F,KAAKs8F,oBACf,MAAvCt8F,KAAKy8F,yBAAyBpgG,KACjC2D,KAAKy8F,yBAAyBpgG,GAAQ,GAEvC2D,KAAKy8F,yBAAyBpgG,IAAS,EAE/B2D,KAAKs8F,oBAAsBU,GAGpC,YAAAC,MAAA,WACCj9F,KAAKk9F,uBACLl9F,KAAKm9F,oBAGN,YAAAD,qBAAA,WACC,IAAIE,EAAoB3iG,OAAO4S,OAAOrN,KAAKu8F,kBAGrCc,GAFND,EAAoB,UAAcA,GAAmB,SAACE,GAAqB,OAACA,EAAiBC,oBAErDlzF,KAAI,SAACizF,GAAqB,OAAAA,EAAiBE,kBAEnFp6F,QAAQC,IAAI,+CAIZ,IAFA,IAAMo6F,EAAgB,GAEG,MADI,UAAcJ,GAAe,SAACG,GAAiB,OAACA,EAA8B,mBAClF,eAAsB,CAA1C,IAAIA,EAAY,KACpBC,EAAc3iG,KAAK0iG,GAKpB,OAFAp6F,QAAQs6F,MAAMD,GAEPJ,GAGR,YAAAF,iBAAA,WAUC,IARA,IAAMQ,EAAoB,UAAa39F,KAAKw8F,oBACtCoB,EAA0B,UAAa59F,KAAKy8F,0BAG5CoB,EAAY,GAEZC,EAA0C,GAE/B,MAAArjG,OAAO6R,KAAKqxF,GAAZ,eAAgC,CAA5C,IAAI,EAAI,KACNz6D,EAAWy6D,EAAkB,GAGnCE,EAAU/iG,KAAKooC,GACoB,MAA/B46D,EAAkB56D,KACrB46D,EAAkB56D,GAAY,IAE/B46D,EAAkB56D,GAAUpoC,KAAK,GAGlC+iG,EAAU7yF,MAAK,SAACC,EAAGC,GAAM,OAAAD,EAAIC,KAC7B,IAAM6yF,EAAmB,UAAYF,GAErCz6F,QAAQC,IAAI,+CAIZ,IADA,IAAMo6F,EAAgB,GACD,MAAAM,EAAA,eAEpB,IAFI,IAEa,MADHD,EADN56D,EAAQ,MAEC,eAAO,CAAnB,IAAI,EAAI,KACNxzB,EAAQkuF,EAAwB,GAGhCI,EAAQ,CAAC96D,SAAQ,EAAE7mC,KAAI,EAAEqT,MAAK,EAAEuuF,uBAFP/6D,EAAWxzB,GAG1C+tF,EAAc3iG,KAAKkjG,GAOrB,OADA56F,QAAQs6F,MAAMD,GACPA,GAET,EA9IA,GAAa,EAAAt2C,mB,8ECJb,iBAKC,WAAoB7kC,GAAA,KAAAA,QAJpB,KAAA2kE,aAAuB,EACvB,KAAAiX,iBAA2B,EAC3B,KAAAC,6BAAuC,EACvC,KAAAC,wBAAkC,EA0DnC,OAvDC,YAAAtB,iBAAA,WACC98F,KAAKinF,cAAgB,EACrBjnF,KAAKk+F,kBAAoBl+F,KAAKsiB,MAAM5G,gBAAgB2iF,UACpDr+F,KAAKm+F,8BAAgCn+F,KAAKsiB,MAAM5G,gBAAgB4iF,sBAChEt+F,KAAKo+F,yBAA2Bp+F,KAAKsiB,MAAM5G,gBAAgB6iF,kBAG5D,sBAAI,8BAAe,C,IAAnB,WACC,OAAOv+F,KAAKk+F,kB,gCAEb,sBAAI,sCAAuB,C,IAA3B,WACC,OAAIl+F,KAAKinF,aAAe,EAChBjnF,KAAKk+F,iBAAmBl+F,KAAKinF,aAE7B,G,gCAGT,sBAAI,0CAA2B,C,IAA/B,WACC,OAAOjnF,KAAKm+F,8B,gCAEb,sBAAI,wDAAyC,C,IAA7C,WACC,OAAIn+F,KAAKinF,aAAe,EAChBjnF,KAAKm+F,6BAA+Bn+F,KAAKinF,aAEzC,G,gCAIT,sBAAI,qCAAsB,C,IAA1B,WACC,OAAOjnF,KAAKo+F,yB,gCAEb,sBAAI,mDAAoC,C,IAAxC,WACC,OAAIp+F,KAAKinF,aAAe,EAChBjnF,KAAKo+F,wBAA0Bp+F,KAAKinF,aAEpC,G,gCAIT,sBAAI,0BAAW,C,IAAf,WACC,OAAOjnF,KAAKinF,c,gCAGb,YAAAuW,aAAA,WACC,MAAO,CACNtmF,UAAWlX,KAAKsiB,MAAMpL,YACtBsnF,YAAax+F,KAAKw+F,YAClBjB,gBAAiBv9F,KAAKu9F,gBACtBkB,wBAAyBz+F,KAAKy+F,wBAC9BC,4BAA6B1+F,KAAK0+F,4BAClCC,0CAA2C3+F,KAAK2+F,0CAChDC,uBAAwB5+F,KAAK4+F,uBAC7BC,qCAAsC7+F,KAAK6+F,uCAG9C,EA9DA,GAAa,EAAAhC,mB,8ECAb,YACA,SAKA,aAWC,WAAoB15F,GAAA,KAAAA,QAVV,KAAAokE,KAA4BvnE,KAC9B,KAAAw3F,OAAiB,EAEjB,KAAAsH,aAA2B,CAAC,EAAG,KAC/B,KAAAC,oBAA0C,EAAC,GAAM,GACjD,KAAAC,UAAoB,EACpB,KAAAC,KAAe,GACf,KAAAC,gBAA0B,IAAO,GACjC,KAAAC,kBAAoBn/F,KAAKo/F,gBAAgB/hG,KAAK2C,MAGrDA,KAAKk1C,YAAc,IAAI,EAAA9+B,cAAcjT,EAAO,mBA0H9C,OAvHC,sBAAI,yBAAU,C,IAAd,WACC,OAAOnD,KAAKk1C,a,gCAab,sBAAI,kBAAG,C,IAAP,WACC,OAAOl1C,KAAKi/F,M,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAOj/F,KAAKw3F,Q,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAOx3F,KAAKw3F,OAASx3F,KAAKi/F,M,gCAE3B,sBAAI,0BAAW,C,IAAf,WACC,OAAOj/F,KAAK8+F,c,gCAEb,sBAAI,iCAAkB,C,IAAtB,WACC,OAAO9+F,KAAK++F,qB,gCAEb,YAAAM,gBAAA,SAAgBC,EAAqBC,GACpCv/F,KAAK8+F,aAAa,GAAK91F,KAAK8kB,MAAMwxE,GAClCt/F,KAAK8+F,aAAa,GAAK91F,KAAK8kB,MAAMyxE,GAClCv/F,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAW60B,sBAEpE,YAAAC,uBAAA,SAAuBC,EAAuBC,GAC7C3/F,KAAK++F,oBAAoB,GAAKW,EAC9B1/F,KAAK++F,oBAAoB,GAAKY,EAC9B3/F,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAW60B,sBAEpE,YAAAI,QAAA,SAAQ1xD,GACPluC,KAAKi/F,KAAOj2F,KAAK8kB,MAAMogB,GACvBluC,KAAKk/F,gBAAkB,IAAOl/F,KAAKi/F,KACnCj/F,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAW60B,sBAGpE,YAAAp4C,UAAA,SAAUtZ,IACTA,EAAQ9tC,KAAK6/F,4BAA4B/xD,KAC5B9tC,KAAK8tC,QACjB9tC,KAAKw3F,OAAS1pD,EACd9tC,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAWm1B,eACnE9/F,KAAKmD,MAAM48F,oBAAoBC,wCAG/BhgG,KAAKmD,MAAMwxB,OAAOC,QAClB50B,KAAKkoB,WAAWxT,uBAChB1U,KAAKmD,MAAMwxB,OAAOG,YAGpB,YAAAmrE,gBAAA,WAGCjgG,KAAKonD,UAAUpnD,KAAK8tC,MAAQ,IAE7B,YAAAoyD,gBAAA,WACClgG,KAAKonD,UAAUpnD,KAAK8tC,MAAQ,IAK7B,YAAAqyD,gBAAA,WACCngG,KAAKonD,UAAUpnD,KAAK+tC,YAAY,KAEjC,YAAA8xD,4BAAA,SAA4B/xD,GAC3B,OAAI9tC,KAAK++F,oBAAoB,IAAMjxD,EAAQ9tC,KAAK8+F,aAAa,GACrD9+F,KAAK8+F,aAAa,GAEtB9+F,KAAK++F,oBAAoB,IAAMjxD,EAAQ9tC,KAAK8+F,aAAa,GACrD9+F,KAAK8+F,aAAa,GAEnBhxD,GAER,sBAAI,sBAAO,C,IAAX,WACC,OAAyB,IAAlB9tC,KAAKg/F,U,gCAEb,YAAA13C,MAAA,WACCtnD,KAAKg/F,UAAW,EAChBh/F,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAWy1B,qBAEpE,YAAA/4C,KAAA,YACuB,IAAlBrnD,KAAKg/F,UACR/uE,WAAWjwB,KAAKo/F,gBAAgB/hG,KAAK2C,MAAOA,KAAKk/F,iBAElDl/F,KAAKg/F,UAAW,EAChBh/F,KAAKmD,MAAMmZ,kBAAkBC,SAASvc,KAAKk1C,YAAa,EAAAy1B,WAAWy1B,qBAEpE,YAAAC,kBAAA,WACKrgG,KAAKsgG,QACRtgG,KAAKsnD,QAELtnD,KAAKqnD,QAKP,YAAA+3C,gBAAA,WAMKp/F,KAAKsgG,UAEHtgG,KAAKmD,MAAMgY,KAAKolE,wBACpBvgF,KAAKigG,kBAGNhwE,WAAWjwB,KAAKm/F,kBAAmBn/F,KAAKk/F,mBAG3C,EAtIA,GAAa,EAAA34C,kB,8ECPb,aAEA,aACC,WAAoBpjD,GAAA,KAAAA,QAqBrB,OAnBC,YAAAqZ,QAAA,SAAQ+jF,QAAA,IAAAA,OAAA,GAIP,IAHA,IAAMC,EAA6C,GAC7CC,EAA8C,GAEnC,MAAAzgG,KAAKmD,MAAMsqC,iBAAiBgxC,YAA5B,eAAyC,CAArD,IAAIj7E,EAAI,KACNk9F,EAAkB,IAAI,EAAA5mF,eAAetW,GAC3Cg9F,EAAuBh9F,EAAKykB,eAAiBy4E,EAAgBlkF,QAAQ+jF,GAGrE,IADA,IACkB,MADH/8F,EAAKif,OAAOiS,IACT,eAAQ,CAArB,IAAIre,EAAK,KACboqF,EAAwBpqF,EAAM4R,eAAiB5R,EAAMmG,WAIvD,MAAO,CACNgkF,uBAAsB,EACtBC,wBAAuB,IAG1B,EAtBA,GAAa,EAAAl5C,uB,8ECFb,WAaA,aACC,WAAoBpkD,GAAA,KAAAA,QAEZ,KAAAw9F,gCAAkE,GAClE,KAAAC,oCAAuD,KAEvD,KAAAC,YAAuB,IAAI,EAAA/vE,QAAQ,EAAG,GACtC,KAAAgwE,qCAA4E,GAC5E,KAAAC,yCAAqD,GAkD9D,OA/CC,YAAAC,kCAAA,SAAkCv2F,EAAYuqC,GAC7Ch1C,KAAK2gG,gCAAgCl2F,GAAMuqC,EAC3Ch1C,KAAKihG,8CAEN,YAAAC,qCAAA,SAAqCz2F,UAC7BzK,KAAK2gG,gCAAgCl2F,GAC5CzK,KAAKihG,8CAEI,YAAAA,2CAAV,WACCjhG,KAAK4gG,oCAAsCnmG,OAAO6R,KAAKtM,KAAK2gG,kCAEtD,YAAAX,sCAAP,WACC,IAAMlyD,EAAQ9tC,KAAKmD,MAAM2qC,MACzB,GAAI9tC,KAAK4gG,oCACR,IAAe,UAAA5gG,KAAK4gG,oCAAL,eAA0C,CAApD,IAAIn2F,EAAE,KACOzK,KAAK2gG,gCAAgCl2F,GAC7CqjC,MAAMhxC,MAAQgxC,IAM1B,YAAAqzD,uCAAA,SAAuC12F,EAAYuqC,GAClDh1C,KAAK8gG,qCAAqCr2F,GAAMuqC,EAChDh1C,KAAKohG,kDACDphG,KAAK6gG,aACR7gG,KAAKqhG,qCAAqCrsD,IAG5C,YAAAssD,0CAAA,SAA0C72F,UAClCzK,KAAK8gG,qCAAqCr2F,GACjDzK,KAAKohG,mDAEI,YAAAA,gDAAV,WACCphG,KAAK+gG,yCAA2CtmG,OAAO6R,KAAKtM,KAAK8gG,uCAElE,YAAAS,2CAAA,SAA2CtL,GAC1Cj2F,KAAK6gG,YAAY57E,KAAKgxE,GACtB,IAAe,UAAAj2F,KAAK+gG,yCAAL,eAA+C,CAAzD,IAAIt2F,EAAE,KACJuqC,EAAWh1C,KAAK8gG,qCAAqCr2F,GAC3DzK,KAAKqhG,qCAAqCrsD,KAG5C,YAAAqsD,qCAAA,SAAqCrsD,GACpCA,EAASihD,WAAWn5F,MAAM+Q,EAAI7N,KAAK6gG,YAAYhzF,EAAIlQ,OAAOg1C,iBAC1DqC,EAASihD,WAAWn5F,MAAMgR,EAAI9N,KAAK6gG,YAAY/yF,EAAInQ,OAAOg1C,kBAE5D,EA1DA,GAAa,EAAA8U,sB,8ECdb,YAIA,aACC,aAEA,KAAAqzB,iBAA2B,EAW5B,OATC,YAAA9/D,eAAA,WACC,OAAOhb,KAAK86E,iBAEb,YAAAC,mBAAA,WACM/6E,KAAK86E,kBACT96E,KAAK86E,iBAAkB,EACvB,EAAAjnE,KAAKnB,qBAAqBqoE,uBAG7B,EAdA,GAAa,EAAApzB,mB,8ECJb,aACA,SACA,SACA,SACA,SACA,SAEA,QACA,EAAA65C,YAAYC,IAAI,EAAA5tF,MAChB,EAAA6tF,cAAcD,IAAI,EAAA5tF,MAClB,EAAA8tF,WAAWF,IAAI,EAAA5tF,MACf,EAAA+tF,YAAYH,IAAI,EAAA5tF,MAChB,EAAAguF,YAAYJ,IAAI,EAAA5tF,MAChB,EAAAiuF,YAAYL,IAAI,EAAA5tF,O,8ECbhB,aAGA,SACA,SACA,SACA,SAWA,2BAQA,OAPQ,EAAA4tF,IAAP,SAAWM,GAEVA,EAAK7uF,cAAc,EAAA8uF,cAAe,EAAArsE,aAAaC,OAC/CmsE,EAAK7uF,cAAc,EAAAmuB,YAAa,EAAA1L,aAAaC,OAC7CmsE,EAAK7uF,cAAc,EAAA+uF,YAAa,EAAAtsE,aAAaD,MAC7CqsE,EAAK7uF,cAAc,EAAAgvF,cAAe,EAAAvsE,aAAaD,OAEjD,EARA,GAAa,EAAA8rE,e,yFCZb,SAIA,SAIA,OACA,QACA,QAMM1gE,EAAe,IALrB,yB,+CAIA,OAJoC,iBAIpC,EAJA,CAAoC,EAAA3hC,mBAMpC,yE,OACC,EAAA0iC,cAAgBf,E,EA+DjB,OAhEmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,WAYR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GAGzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAOrD,YAAA5/E,KAAN,SAAWC,G,wHAEM,OADViX,EAAUjX,EAAe,GACf,GAAMvb,KAAKmiG,2BAA2B3vE,I,cAAhD4vE,EAAU,UAEfpiG,KAAK8+B,YAAYsjE,GAEjBpiG,KAAK0b,gBAAgBC,W,YAIT,YAAAwmF,2BAAd,SAAyC3vE,G,0HAIvB,SAAM,EAAA3e,KAAKnB,qBAAqB+oE,qB,OAQjD,OARMh+D,EAAW,WASV4kF,EAAiB,IAAI,EAAAC,eAAe7kF,GAEpC8kF,EAAsBF,EAAeG,oBAAoBhwE,GAQxD,CAAP,EAHwB+vE,EAAoB/vE,WAK5CxyB,KAAKswB,OAAOhT,MAAMpd,IAAI,0D,aAGzB,EAhEA,CAAmC,EAAA8+B,cAAtB,EAAAgjE,iB,yFCnBb,2B,+CA4CA,OA5CsC,iBAErC,YAAAvmF,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IASnB,YAAAgX,QAAA,WACC,OAAOxyB,KAAK0zB,UAEb,YAAA1xB,aAAA,WACC,OAAOhC,KAAK0zB,UAEb,YAAAG,oBAAA,W,MACCzwB,QAAQC,IAAI,QAASrD,KAAK0zB,UAC1B,IAAMlB,EAAuB,QAAhB,EAAGxyB,KAAK0zB,gBAAQ,eAAE5wB,QAI/B,OAHI0vB,IACHA,EAAQG,aAAc,GAEhBH,GAGR,YAAAj1B,OAAA,WACC,OAAOyC,KAAKwyB,WAGb,YAAAsB,MAAA,WACC,GAAqB,MAAjB9zB,KAAK0zB,SACR,MAAO,CAAC1zB,KAAK0zB,WAGf,YAAAuiE,WAAA,WACC,OAAIj2F,KAAK0zB,UACJ1zB,KAAK0zB,SAASqP,MACV,CAAC/iC,KAAK0zB,SAASqP,MAAMzQ,MAAOtyB,KAAK0zB,SAASqP,MAAM0/D,QAGlD,EAAE,GAAI,IAEf,EA5CA,CAHA,OAGsC1uE,gBAAzB,EAAA6K,oB,yFCHb,SACA,QAMA,yE,OACW,EAAAstB,QAAkB,E,EAK7B,OANgC,iBAE/B,YAAAE,UAAA,WACCpsD,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUq3F,qBACzB1iG,KAAKwD,KAAKgR,aAEZ,EANA,CAAgC,EAAAg4C,UAAnB,EAAAxjC,c,yFCPb,SACA,QAEA,2B,+CAKA,OALiC,iBAChC,YAAAojC,UAAA,WACCpsD,KAAKwD,KAAK4Y,KAAK,EAAA/Q,UAAUs3F,uBAG3B,EALA,CAAiC,EAAAn2C,UAApB,EAAA3jC,e,kFC8BR+5E,E,OAjCL,SACA,SAOA,OACA,QAIA,SAEA,SAkBA,SAAKA,GACJ,YACA,gBACA,YAHD,CAAKA,MAAS,KAMd,iBAqCC,WAAoBtgF,EAA6BwY,GAA7B,KAAAxY,QAA6B,KAAAwY,SA+PlD,OA7PO,YAAAyI,4BAAN,SAAkCxC,G,mIAC7BvO,EAA0B,KAGH,OAAvBuO,EAAIl5B,UAAU,EAAG,GAAjB,OACG4e,EAAYsa,EAAIl5B,UAAU,IAChCg2B,EAAa,EAAAvmB,WAAWK,UAAU3X,KAAKsiB,MAAOmE,IAEzCoX,aAAsB,EAAAoB,iBACW,GAAMpB,EAAW5mB,qBADlD,MADD,O,cAEIlV,EAA8B,SACpCywB,EAAUzwB,EAAUywB,U,aAEpBxyB,KAAKsiB,MAAMgO,OAAOhT,MAAMpd,IAAI,oC,oCAK7BF,KAAKsiB,MAAMgO,OAAOhT,MAAMpd,IAAI,0BAA0BumB,EAAS,K,oCAGtD,SAAMzmB,KAAK6iG,SAAS9hE,I,QAA9BvO,EAAU,UAGLxyB,KAAK86B,OAAO98B,QAAQutF,mBAGvB/4D,EAAUwO,EAAkB8hE,wBAAwBtwE,IAGrDxyB,KAAKsiB,MAAMgO,OAAOhT,MAAMpd,IAAI,0BAA0B6gC,G,iBAYxD,OANIlD,GAAc79B,KAAK86B,OAAOllB,qBAAqB,IAAMioB,IACxD79B,KAAK86B,OAAOxlB,gCACZtV,KAAK86B,OAAO7lB,gBAAgB4oB,IAItB,CAAP,EAAOrL,WAGF,YAAAqwE,SAAN,SAAe9hE,G,oGACd,MAAO,CAAP,EAAO,IAAI/e,SAAQ,SAAOC,EAASC,GAAM,+C,2EAElC6gF,EAAM/hE,EAAkBgiE,KAAKjiE,GAE/BC,EAAkBiiE,iBAAiBhqE,SAAS8pE,GACjB,GAAM/iG,KAAKkjG,eAAeniE,IADrD,M,OAEH,MAAO,CAAP,EAD8B,U,OAG9B/gC,KAAKmjG,eAAeJ,GAAK3yE,MAAK,SAACgxC,GAC9BA,EAAO/C,KAAKt9B,EAAK9e,OAAS5Y,GAAW,SAACiU,GACrCla,QAAQmT,KAAK,QAAS+G,GACtB4E,U,6CAOC,YAAAihF,eAAN,SAAqBJ,G,qIACdK,EAAgBL,EAAIhkB,cAIlBqkB,G,KACFR,EAAUS,IAAV,Y,KAIAT,EAAUU,IAAV,Y,KAOAV,EAAUW,MAAV,Y,mBAVgB,oEAAa,U,OACjC,MAAO,CAAP,EAAO,IADAC,EAAa,SAA4D,Y,OAI3D,oEAAa,U,OAIlC,OAJOC,EAAc,SAA6D,YAC5EriC,EAAS,IAAIqiC,GACZC,YAAY,EAAAC,kBAEZ,CAAP,EAAOviC,G,OAGsB,oEAAa,U,OAGzB,OAHVwiC,EAAsB,SAAqE,oBAC5FxiC,EAAS,IAAIwiC,GACZC,kBAAkB,yBACR,GAAM,EAAAhwF,KAAKnB,qBAAqB+oE,qB,OAMjD,OANMh+D,EAAW,UAEhB2jD,EAAO0iC,cAAcrmF,GAErBra,QAAQmT,KAAK,6DAEP,CAAP,EAAO6qD,G,OAmBT,MAAO,CAAP,EAAO,IAAI,EAAA2iC,uBASZ,YAAAb,eAAA,SAAeniE,GACd,OAAO,IAAI/e,SAAQ,SAACC,EAASC,GAC5B,IAAM8hF,EAAQn3C,SAASo3C,cAAc,SAIrCD,EAAMz2F,aAAa,cAAe,aAClCy2F,EAAMz2F,aAAa,WAAY,IAAG,GAClCy2F,EAAMz2F,aAAa,OAAQ,IAAG,GAG9By2F,EAAME,iBAAmB,WACxBF,EAAM18C,QACN,IAAM90B,EAAU,IAAI,EAAAsQ,aAAakhE,GACjC/hF,EAAQuQ,IAIT,IAAM2xE,EAASt3C,SAASo3C,cAAc,UAChClB,EAAM/hE,EAAkBgiE,KAAKjiE,GAC/BjjC,EAAekjC,EAAkBojE,yBAAyBrB,GAC9DjlG,EAAOA,GAAQkjC,EAAkBqjE,2BAA2BtjE,GAC5DojE,EAAO52F,aAAa,OAAQzP,GAC5BqmG,EAAO52F,aAAa,MAAOwzB,GAE3BijE,EAAMM,YAAYH,OAGb,EAAAE,2BAAP,SAAkCtjE,GAEjC,MAAO,SADK/gC,KAAKgjG,KAAKjiE,IAIhB,EAAAwjE,WAAP,SAAkB/xE,GACjB,IAAMgyE,EAAMhyE,EAAQuQ,MACduO,EAASub,SAASo3C,cAAc,UACtC3yD,EAAOhf,MAAQkyE,EAAIlyE,MACnBgf,EAAOmxD,OAAS+B,EAAI/B,OACpB,IAAMjmE,EAAU8U,EAAO6pC,WAAW,MAClC,GAAI3+C,EAEH,OADAA,EAAQioE,UAAUD,EAAK,EAAG,EAAGA,EAAIlyE,MAAOkyE,EAAI/B,QACrCjmE,EAAQkoE,aAAa,EAAG,EAAGF,EAAIlyE,MAAOkyE,EAAI/B,SAyD5C,EAAAO,KAAP,SAAYjiE,GACX,IAAM73B,EAAW63B,EAAI53B,MAAM,KAC3B,OAAOD,EAASA,EAAS1O,OAAS,GAAGukF,eAU/B,EAAA+jB,wBAAP,SAA+BtwE,GAe9B,OAAOA,GAzRD,EAAAyO,cAAgB,4BAChB,EAAA0jE,kBAAoB,wCAEpB,EAAA1B,iBAAmB,CAAC,MAAO,OAAQ,OACnC,EAAAmB,yBAAiD,CACvDQ,IAAK,qCACLC,IAAK,qCACLC,IAAK,8CA4RP,EApSA,GAAa,EAAA9jE,qB,6BCvCb,sEAkBIyiE,EAAa,SAAW1jC,GAE3B,IAAkBnlE,KAAMoF,KAAM+/D,GAE9B//D,KAAKlC,KAAO,oBAIb2lG,EAAW/oG,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAkBzC,WAAa,CAEnF0U,YAAaq0F,EAIbl7F,MAAO,SAAWo7C,GAEjB,IAUCohD,EAAa,SAAWC,EAAiBC,GAExC,OAASD,GAER,KARgB,EAQM5hG,QAAQka,MAAO,2BAA8B2nF,GAAO,KACzE,MACD,KATiB,EASM7hG,QAAQka,MAAO,4BAA+B2nF,GAAO,KAC3E,MACD,KAVkB,EAUM7hG,QAAQka,MAAO,gCAAmC2nF,GAAO,KAChF,MACD,QACA,KAZkB,EAYM7hG,QAAQka,MAAO,uBAA0B2nF,GAAO,KAGzE,OArBqB,GAwCtBC,EAAQ,SAAWvhD,EAAQwhD,EAAWC,GAErCD,EAAcA,GAAY,KAK1B,IAJA,IAAI1nG,EAAIkmD,EAAO0hD,IACd/qG,GAAM,EAAGgrG,EAAM,EAAG1pG,EAAI,GACtB2pG,EAAQC,OAAOC,aAAatqG,MAAO,KAAM,IAAIqjC,YAAamlB,EAAOyxB,SAAU33E,EAAGA,EADxC,OAG7B,GAAMnD,EAAIirG,EAAMjhG,QATjB,QAS6CghG,EAAMH,GAAiB1nG,EAAIkmD,EAAOye,YAEvFxmE,GAAK2pG,EAAOD,GAAOC,EAAM/qG,OACzBiD,GANsC,IAOtC8nG,GAASC,OAAOC,aAAatqG,MAAO,KAAM,IAAIqjC,YAAamlB,EAAOyxB,SAAU33E,EAAGA,EAPzC,OAWvC,OAAO,EAAInD,KAQL,IAAU8qG,IAAUzhD,EAAO0hD,KAAOC,EAAMhrG,EAAI,GAC1CsB,EAAI2pG,EAAM1nG,MAAO,EAAGvD,KAiP1BorG,EAAoB,WAIvB,IAAIC,EAAY,IAAI5yE,aAAc,GAC9B6yE,EAAY,IAAIngC,WAAYkgC,EAAUhiD,QAK1C,SAASkiD,EAAQ/8F,GAEhB68F,EAAW,GAAM78F,EACjB,IAAI+E,EAAI+3F,EAAW,GAEfE,EAASj4F,GAAK,GAAO,MACrB3R,EAAM2R,GAAK,GAAO,KAClBvD,EAAMuD,GAAK,GAAO,IAItB,OAAKvD,EAAI,IAAaw7F,EAGjBx7F,EAAI,KAERw7F,GAAQ,MAGRA,IAAiB,KAALx7F,EAAa,EAAI,IAAa,QAAJuD,GAMlCvD,EAAI,IAKRw7F,KAHA5pG,GAAK,OAGY,IAAMoO,IAAYpO,GAAO,IAAMoO,EAAQ,IAKzDw7F,GAAYx7F,EAAI,KAAS,GAASpO,GAAK,EAGvC4pG,GAAY,EAAJ5pG,GAKT,OAAO,SAAW6pG,EAAaC,EAAcC,EAAWC,GAEvD,IAAI57F,EAAIy7F,EAAaC,EAAe,GAChCpiF,EAAQ5a,KAAK4mB,IAAK,EAAKtlB,EAAI,KAAU,IAEzC27F,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMpiF,GACxEqiF,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMpiF,GACxEqiF,EAAWC,EAAa,GAAML,EAAQE,EAAaC,EAAe,GAAMpiF,IA5DlD,GAkEpBuiF,EAAY,IAAI/zE,WAAYuxB,GAChCwiD,EAAUd,IAAM,EAChB,IA/EoCU,EAAaC,EAAcC,EAAWC,EAErE57F,EACAsZ,EA4EDwiF,EA7Se,SAAWziD,GAE5B,IAAI0iD,EAAM5+F,EAIT6+F,EAAW,oCACXC,EAAc,uCACdC,EAAY,uBACZC,EAAgB,oCAGhBC,EAAS,CAERC,MAAO,EAEPn8C,OAAQ,GAERo8C,SAAU,GAEVC,YAAa,OAEbC,OAAQ,GAERC,MAAO,EAEPC,SAAU,EAEV10E,MAAO,EAAGmwE,OAAQ,GAIpB,GAAK9+C,EAAO0hD,KAAO1hD,EAAOye,cAAkBikC,EAAOnB,EAAOvhD,IAEzD,OAAOohD,EAvGS,EAuGoB,mBAIrC,KAASt9F,EAAQ4+F,EAAK5+F,MAjCJ,eAmCjB,OAAOs9F,EA3GW,EA2GoB,qBAOvC,IAJA2B,EAAOC,OAjFiB,EAkFxBD,EAAOG,YAAcp/F,EAAO,GAC5Bi/F,EAAOl8C,QAAU67C,EAAO,MAKlB,KADLA,EAAOnB,EAAOvhD,KAId,GAFA+iD,EAAOl8C,QAAU67C,EAAO,KAEnB,MAAQA,EAAKY,OAAQ,IA+B1B,IAxBKx/F,EAAQ4+F,EAAK5+F,MAAO6+F,MAExBI,EAAOK,MAAQjiD,WAAYr9C,EAAO,GAAK,MAGnCA,EAAQ4+F,EAAK5+F,MAAO8+F,MAExBG,EAAOM,SAAWliD,WAAYr9C,EAAO,GAAK,MAGtCA,EAAQ4+F,EAAK5+F,MAAO++F,MAExBE,EAAOC,OA7GU,EA8GjBD,EAAOI,OAASr/F,EAAO,KAGnBA,EAAQ4+F,EAAK5+F,MAAOg/F,MAExBC,EAAOC,OAlHc,EAmHrBD,EAAOjE,OAAS/6F,SAAUD,EAAO,GAAK,IACtCi/F,EAAOp0E,MAAQ5qB,SAAUD,EAAO,GAAK,KArHpB,EAyHXi/F,EAAOC,OAxHQ,EAwHyBD,EAAOC,MAAkC,WA7BvFD,EAAOE,UAAYP,EAAO,KAiC5B,OA7HmB,EA6HVK,EAAOC,MA5HO,EAiIdD,EAAOC,MAMTD,EAJC3B,EAlKW,EAkKoB,gCAL/BA,EA7JW,EA6JoB,4BAmNlBmC,CAAiBf,GAExC,IAvXuB,IAuXMC,EAAmB,CAE/C,IAAIh4F,EAAIg4F,EAAiB9zE,MACxBvlB,EAAIq5F,EAAiB3D,OACrB0E,EA5MqB,SAAWxjD,EAAQv1C,EAAGrB,GAE3C,IAAIq6F,EAAWxmD,EAAQykD,EAAK31F,EAAO23F,EAClCC,EAAiBlgC,EAAKmgC,EAASjtG,EAAG2B,EAAGurG,EAAKC,EACHC,EAAvCC,EAAiBv5F,EAAGw5F,EAAgB76F,EAGrC,GAEK46F,EAAiB,GAASA,EAAiB,OAE3C,IAAMhkD,EAAQ,IAAW,IAAMA,EAAQ,IAAyB,IAAdA,EAAQ,GAI9D,OAAO,IAAIvxB,WAAYuxB,GAIxB,GAAKgkD,KAAuBhkD,EAAQ,IAAO,EAAMA,EAAQ,IAExD,OAAOohD,EA/LW,EA+LoB,wBAMvC,KAFAqC,EAAY,IAAIh1E,WAAY,EAAIhkB,EAAIrB,MAEdq6F,EAAU5sG,OAE/B,OAAOuqG,EAtMW,EAsMoB,mCASvC,IALAnkD,EAAS,EAAGykD,EAAM,EAAGkC,EAAU,EAAII,EACnCD,EAAY,IAAIt1E,WAAY,GAC5Bk1E,EAAkB,IAAIl1E,WAAYm1E,GAGxBK,EAAgB,GAASvC,EAAM1hD,EAAOye,YAAe,CAE9D,GAAKijC,EAAM,EAAI1hD,EAAOye,WAErB,OAAO2iC,EAtNQ,GA+NhB,GALA2C,EAAW,GAAM/jD,EAAQ0hD,KACzBqC,EAAW,GAAM/jD,EAAQ0hD,KACzBqC,EAAW,GAAM/jD,EAAQ0hD,KACzBqC,EAAW,GAAM/jD,EAAQ0hD,KAElB,GAAKqC,EAAW,IAAW,GAAKA,EAAW,KAAeA,EAAW,IAAO,EAAMA,EAAW,KAASC,EAE5G,OAAO5C,EA/NU,EA+NqB,4BAOvC,IADA39B,EAAM,EACIA,EAAMmgC,GAAelC,EAAM1hD,EAAOye,YAAe,CAM1D,IAHAqlC,GADA/3F,EAAQi0C,EAAQ0hD,MACO,OACH31F,GAAS,KAEtB,IAAMA,GAAa03D,EAAM13D,EAAQ63F,EAEvC,OAAOxC,EA9OS,EA8OsB,qBAIvC,GAAK0C,EAIJ,IADAJ,EAAY1jD,EAAQ0hD,KACd/qG,EAAI,EAAGA,EAAIoV,EAAOpV,IAEvBgtG,EAAiBlgC,KAAWigC,OAQ7BC,EAAgBpnG,IAAKyjD,EAAOyxB,SAAUiwB,EAAKA,EAAM31F,GAAS03D,GAC1DA,GAAO13D,EAAO21F,GAAO31F,EAUvB,IADAzT,EAAI0rG,EACErtG,EAAI,EAAGA,EAAI2B,EAAG3B,IAEnBktG,EAAM,EACNJ,EAAWxmD,GAAW0mD,EAAiBhtG,EAAIktG,GAC3CA,GAAOG,EACPP,EAAWxmD,EAAS,GAAM0mD,EAAiBhtG,EAAIktG,GAC/CA,GAAOG,EACPP,EAAWxmD,EAAS,GAAM0mD,EAAiBhtG,EAAIktG,GAC/CA,GAAOG,EACPP,EAAWxmD,EAAS,GAAM0mD,EAAiBhtG,EAAIktG,GAC/C5mD,GAAU,EAIXgnD,IAID,OAAOR,EAyFWS,CAAqB1B,EAAU/wB,SAAU+wB,EAAUd,KAAOj3F,EAAGrB,GAEhF,IA7XsB,IA6XOo6F,EAAkB,CAE9C,OAASnnG,KAAKlC,MAEb,KAAK,mBAEJ,IAAI9D,EAAOmtG,EACPL,EAAS,aACThpG,EAAO,mBACX,MAED,KAAK,YAKJ,IAHA,IAAIgqG,EAAgBX,EAAgB3sG,OAAS,EAAM,EAC/CutG,EAAa,IAAIh1E,aAAc+0E,GAEzBtsG,EAAI,EAAGA,EAAIssG,EAAatsG,IAvGyByqG,EAyGd8B,EAzGyB7B,EAyGT,EAAJ1qG,EAvGxD8O,SACAsZ,SADAtZ,GAF+By7F,EAyGXoB,IAzGwBnB,EAyGH,EAAJxqG,GAvGL,GAChCooB,EAAQ5a,KAAK4mB,IAAK,EAAKtlB,EAAI,KAAU,IAEzC27F,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMpiF,EAChEqiF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMpiF,EAChEqiF,EAAWC,EAAa,GAAMH,EAAaC,EAAe,GAAMpiF,EAsGzD5pB,EAAO+tG,EACPjB,EAAS,YACThpG,EAAO,YACX,MAED,KAAK,gBAEAgqG,EAAgBX,EAAgB3sG,OAAS,EAAM,EAAnD,IACIwtG,EAAY,IAAIxpE,YAAaspE,GAEjC,IAAUtsG,EAAI,EAAGA,EAAIssG,EAAatsG,IAEjCkqG,EAAmByB,EAAqB,EAAJ3rG,EAAOwsG,EAAe,EAAJxsG,GAInDxB,EAAOguG,EACPlB,EAAS,YACThpG,EAAO,gBACX,MAED,QAECsF,QAAQka,MAAO,uCAAwCtd,KAAKlC,MAK9D,MAAO,CACNw0B,MAAOlkB,EAAGq0F,OAAQ11F,EAClB/S,KAAMA,EACN0sG,OAAQN,EAAiB57C,OACzBu8C,MAAOX,EAAiBW,MACxBC,SAAUZ,EAAiBY,SAC3BF,OAAQA,EACRhpG,KAAMA,IAOT,OAAO,MAIR4lG,YAAa,SAAW5mG,GAGvB,OADAkD,KAAKlC,KAAOhB,EACLkD,MAIRq+D,KAAM,SAAWt9B,EAAKkgC,EAAQC,EAAYC,GAuCzC,OAAO,IAAkBzmE,UAAU2jE,KAAKzjE,KAAMoF,KAAM+gC,GArCpD,SAAyBvO,EAASy1E,GAEjC,OAASz1E,EAAQ10B,MAEhB,KAAK,mBAEJ00B,EAAQ01E,SAAW,eACnB11E,EAAQoO,UAAY,gBACpBpO,EAAQqO,UAAY,gBACpBrO,EAAQ21E,iBAAkB,EAC1B31E,EAAQ41E,OAAQ,EAChB,MAED,KAAK,YASL,KAAK,gBAEJ51E,EAAQ01E,SAAW,iBACnB11E,EAAQoO,UAAY,eACpBpO,EAAQqO,UAAY,eACpBrO,EAAQ21E,iBAAkB,EAC1B31E,EAAQ41E,OAAQ,EAKbnnC,GAASA,EAAQzuC,EAASy1E,KAIyC/mC,EAAYC,O,6BCphBvF,8FA6BIyiC,EAAqB,SAAW7jC,GAEnC,IAAOnlE,KAAMoF,KAAM+/D,GAEnB//D,KAAKqoG,eAAiB,GACtBroG,KAAKsoG,iBAAmB,KACxBtoG,KAAKuoG,kBAAoB,KAEzBvoG,KAAKogE,YAAc,EACnBpgE,KAAKqgE,WAAa,GAClBrgE,KAAKsgE,iBAAmB,EACxBtgE,KAAKugE,gBAAkB,GACvBvgE,KAAKwoG,aAAe,CACnB1B,OAAQ,KACR2B,eAAe,EACfC,cAAc,EACdC,cAAc,EACdC,gBAAgB,IAKlBhF,EAAmBlpG,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEhF0U,YAAaw0F,EAEbC,kBAAmB,SAAWzsF,GAI7B,OAFApX,KAAKqoG,eAAiBjxF,EAEfpX,MAIR6gE,eAAgB,SAAWT,GAI1B,OAFApgE,KAAKogE,YAAcA,EAEZpgE,MAIR8jG,cAAe,SAAWrmF,GAEzB,IAAImjD,EAAS5gE,KAAKwoG,aAQlB,GANA5nC,EAAO6nC,gBAAmBhrF,EAASorF,WAAWnsG,IAAK,iCACnDkkE,EAAO8nC,eAAkBjrF,EAASorF,WAAWnsG,IAAK,iCAClDkkE,EAAO+nC,eAAkBlrF,EAASorF,WAAWnsG,IAAK,iCAClDkkE,EAAOgoC,iBAAoBnrF,EAASorF,WAAWnsG,IAAK,qCAC7C+gB,EAASorF,WAAWnsG,IAAK,yCAE3BkkE,EAAO6nC,cAEX7nC,EAAOkmC,OAASlD,EAAmBkF,aAAaC,iBAE1C,GAAKnoC,EAAO+nC,aAElB/nC,EAAOkmC,OAASlD,EAAmBkF,aAAaE,YAE1C,GAAKpoC,EAAOgoC,eAElBhoC,EAAOkmC,OAASlD,EAAmBkF,aAAaG,qBAE1C,KAAKroC,EAAO8nC,aAMlB,MAAM,IAAIn9D,MAAO,0EAJjBq1B,EAAOkmC,OAASlD,EAAmBkF,aAAaI,QAQjD,OAAOlpG,MAIRq+D,KAAM,SAAWt9B,EAAKkgC,EAAQC,EAAYC,GAEzC,IAAIC,EAAS,IAAI,IAAYphE,KAAK+/D,SAElCqB,EAAOE,gBAAiB,eAExBF,EAAO/C,KAAMt9B,EAAO4iB,IAEnB3jD,KAAKmpG,eAAgBxlD,GACnBvzB,KAAM6wC,GACNtC,MAAOwC,IAEPD,EAAYC,IAQhBgoC,eAAgB,SAAWxlD,GAE1B,IAAIoe,EACAM,EAEAC,EAAW3e,EAAOye,WAElBgnC,EAAiBppG,KAAKqpG,gBAAiB/mC,GACzClyC,KAAQqyC,IAERV,EAASU,EACTJ,EAASriE,KAAKsgE,mBAEP,IAAIt+C,QAAS,CAAEC,EAASC,KAE9B6/C,EAAOhyC,WAAYsyC,GAAW,CAAEpgD,UAASC,UAEzC6/C,EAAOW,YAAa,CAAE5kE,KAAM,YAAa2M,GAAI43D,EAAQ1e,UAAU,CAAEA,QAKlEvzB,KAAQtuB,IAER,IAII0wB,EAJAouC,EAAS5gE,KAAKwoG,cAEd,MAAEl2E,EAAK,OAAEmwE,EAAM,QAAE6G,EAAO,OAAExC,GAAWhlG,EAIzC,OAASglG,GAER,KAAKlD,EAAmBkF,aAAaC,YACpCv2E,EAAU,IAAI,IAAmB82E,EAASh3E,EAAOmwE,EAAQ,wBACzD,MACD,KAAKmB,EAAmBkF,aAAaS,OACrC,KAAK3F,EAAmBkF,aAAaE,OACpCx2E,EAAU,IAAI,IAAmB82E,EAASh3E,EAAOmwE,EAAQmB,EAAmB4F,eAAgB5oC,EAAOkmC,QAAU,oBAC7G,MACD,KAAKlD,EAAmBkF,aAAaI,QACpC12E,EAAU,IAAI,IAAmB82E,EAASh3E,EAAOmwE,EAAQ,mBACzD,MACD,KAAKmB,EAAmBkF,aAAaW,gBACpCj3E,EAAU,IAAI,IAAmB82E,EAASh3E,EAAOmwE,EAAQ,2BACzD,MACD,KAAKmB,EAAmBkF,aAAaG,iBACpCz2E,EAAU,IAAI,IAAmB82E,EAASh3E,EAAOmwE,EAAQ,4BACzD,MACD,QACC,MAAM,IAAIl3D,MAAO,4DASnB,OALA/Y,EAAQoO,UAA+B,IAAnB0oE,EAAQ9uG,OAAe,eAAe,2BAC1Dg4B,EAAQqO,UAAY,eACpBrO,EAAQ21E,iBAAkB,EAC1B31E,EAAQG,aAAc,EAEfH,IAgBT,OAZA42E,EACExmC,QAAS,KAEJb,GAAUM,IAEdN,EAAOmC,WAAa5B,SACbP,EAAOhyC,WAAYsyC,MAMtB+mC,GAIRM,gBAAiB,WAEhB,IAAO1pG,KAAKuoG,kBAAoB,CAG/B,IAAIoB,EAAW,IAAI,IAAY3pG,KAAK+/D,SACpC4pC,EAAStoC,QAASrhE,KAAKqoG,gBACvB,IAAI9kC,EAAY,IAAIvhD,QAAS,CAAEC,EAASC,KAEvCynF,EAAStrC,KAAM,sBAAuBp8C,OAAS5Y,EAAW6Y,KAKvD0nF,EAAe,IAAI,IAAY5pG,KAAK+/D,SACxC6pC,EAAavoC,QAASrhE,KAAKqoG,gBAC3BuB,EAAatoC,gBAAiB,eAC9B,IAAIuoC,EAAgB,IAAI7nF,QAAS,CAAEC,EAASC,KAE3C0nF,EAAavrC,KAAM,wBAAyBp8C,OAAS5Y,EAAW6Y,KAIjEliB,KAAKuoG,kBAAoBvmF,QAAQ0S,IAAK,CAAE6uC,EAAWsmC,IACjDz5E,KAAM,EAAImzC,EAAWsmC,MAErB,IAAIpmC,EAAKmgC,EAAmBkG,YAAYnmC,WAEpChsB,EAAO,CACV,4BACA4rB,EACA,eACAE,EAAG57D,UAAW47D,EAAGn/D,QAAS,KAAQ,EAAGm/D,EAAGG,YAAa,OACpD/5D,KAAM,MAER7J,KAAKugE,gBAAkBsD,IAAIC,gBAAiB,IAAIC,KAAM,CAAEpsB,KACxD33C,KAAKsoG,iBAAmBuB,IAM3B,OAAO7pG,KAAKuoG,mBAIbc,gBAAiB,SAAW/mC,GAE3B,OAAOtiE,KAAK0pG,kBAAkBt5E,KAAM,KAIlC,IA4CG2xC,EA9CC/hE,KAAKqgE,WAAW7lE,OAASwF,KAAKogE,cAE9B2B,EAAS,IAAIiC,OAAQhkE,KAAKugE,kBAEvBxwC,WAAa,GACpBgyC,EAAOmC,UAAY,EAEnBnC,EAAOW,YAAa,CACnB5kE,KAAM,OACN8iE,OAAQ5gE,KAAKwoG,aACbF,iBAAkBtoG,KAAKsoG,mBAGxBvmC,EAAOoC,UAAY,SAAW75D,GAE7B,IAAIxI,EAAUwI,EAAEtQ,KAEhB,OAAS8H,EAAQhE,MAEhB,IAAK,YACJikE,EAAOhyC,WAAYjuB,EAAQ2I,IAAKwX,QAASngB,GACzC,MAED,IAAK,QACJigE,EAAOhyC,WAAYjuB,EAAQ2I,IAAKyX,OAAQpgB,GACxC,MAED,QACCsB,QAAQka,MAAO,kDAAoDxb,EAAQhE,KAAO,OAMrFkC,KAAKqgE,WAAWvlE,KAAMinE,IAItB/hE,KAAKqgE,WAAWr1D,MAAM,SAAWC,EAAGC,GAEnC,OAAOD,EAAEi5D,UAAYh5D,EAAEg5D,WAAc,EAAI,KAU3C,OAJInC,EAAS/hE,KAAKqgE,WAAYrgE,KAAKqgE,WAAW7lE,OAAS,IAEhD0pE,WAAa5B,EAEbP,KAMTvkD,QAAS,WAER,IAAM,IAAIljB,EAAI,EAAGA,EAAI0F,KAAKqgE,WAAW7lE,OAAQF,IAE5C0F,KAAKqgE,WAAY/lE,GAAI+pE,YAMtB,OAFArkE,KAAKqgE,WAAW7lE,OAAS,EAElBwF,QAQT4jG,EAAmBkF,aAAe,CACjCI,QAAS,EACTa,QAAS,EACTR,OAAQ,EACRP,OAAQ,EACRgB,OAAQ,EACRC,OAAQ,EACRC,sBAAuB,EACvBC,UAAW,EACXV,gBAAiB,EACjBR,iBAAkB,EAClBF,YAAa,GACbqB,WAAY,GACZC,+BAAgC,GAChCC,UAAW,GACXC,UAAW,GACXC,UAAW,GACXC,YAAa,IAKd7G,EAAmB8G,WAAa,CAC/BC,6BAA8B,MAC9BC,8BAA+B,MAC/BC,8BAA+B,MAC/BC,8BAA+B,OAEhClH,EAAmB4F,eAAiB,GACpC5F,EAAmB4F,eAAgB5F,EAAmBkF,aAAaS,QAClE3F,EAAmB8G,WAAWC,6BAC/B/G,EAAmB4F,eAAgB5F,EAAmBkF,aAAaE,QAClEpF,EAAmB8G,WAAWI,8BAI/BlH,EAAmBkG,YAAc,WAEhC,IAAIlpC,EACA2nC,EACAwC,EAEJ5mC,UAAY,SAAW75D,GAEtB,IAyCck5D,EAEVwnC,EA3CAlpG,EAAUwI,EAAEtQ,KAEhB,OAAS8H,EAAQhE,MAEhB,IAAK,OACJ8iE,EAAS9+D,EAAQ8+D,OAoCL4C,EAnCN1hE,EAAQwmG,iBAsChBC,EAAoB,IAAIvmF,QAAWC,IAElC+oF,EAAc,CAAExnC,aAAYynC,qBAAsBhpF,GAClDshF,MAAOyH,KAEJ56E,KAAM,KAET,IAAI,UAAE86E,EAAS,gBAAEC,GAAoBH,EAErCD,EAAaG,EAEbC,MAhDC,MAED,IAAK,YACJ5C,EAAkBn4E,KAAM,KAEvB,IAMC,IAJA,IAAI,MAAEkC,EAAK,OAAEmwE,EAAM,SAAE2I,EAAQ,QAAE9B,EAAO,OAAExC,GA+C7C,SAAoBnjD,GAEnB,IAAI0nD,EAAY,IAAIN,EAAY,IAAI34E,WAAYuxB,IAE5CrxB,EAAQ+4E,EAAUC,cAAe,EAAG,GACpC7I,EAAS4I,EAAUE,eAAgB,EAAG,GACtCC,EAASH,EAAUI,aAAc,GACjCL,EAAWC,EAAUK,cAEzB,SAASC,IAERN,EAAUO,QACVP,EAAUhzB,SAIX,IAAO+yB,EAEN,OAASxqC,EAAOkmC,QAEf,KAAK,EACJlmC,EAAOkmC,OAAS,EASnB,IAAOx0E,IAAWmwE,IAAY+I,EAG7B,MADAG,IACM,IAAIpgE,MAAO,kDAIlB,IAAO8/D,EAAUQ,mBAGhB,MADAF,IACM,IAAIpgE,MAAO,sDAMlB,IAFA,IAAI+9D,EAAU,GAEJwC,EAAM,EAAGA,EAAMN,EAAQM,IAAS,CAEzC,IAAIC,EAAWV,EAAUC,cAAe,EAAGQ,GACvCE,EAAYX,EAAUE,eAAgB,EAAGO,GACzCG,EAAM,IAAI75E,WAAYi5E,EAAUa,8BAA+B,EAAGJ,EAAKlrC,EAAOkmC,SAWlF,IATauE,EAAUc,eACtBF,EACA,EACAH,EACAlrC,EAAOkmC,OACP,EACAsE,GAMA,MADAO,IACM,IAAIpgE,MAAO,qDAIlB+9D,EAAQxuG,KAAM,CAAEd,KAAMiyG,EAAK35E,MAAOy5E,EAAUtJ,OAAQuJ,IAMrD,OAFAL,IAEO,CAAEr5E,QAAOmwE,SAAQ2I,WAAU9B,UAASxC,OAAQlmC,EAAOkmC,QAzHHsF,CAAWtqG,EAAQ6hD,QAElEokB,EAAU,GAEJztE,EAAI,EAAGA,EAAIgvG,EAAQ9uG,SAAWF,EAEvCytE,EAAQjtE,KAAMwuG,EAAShvG,GAAIN,KAAK2pD,QAIjC4jB,KAAK7E,YAAa,CAAE5kE,KAAM,YAAa2M,GAAI3I,EAAQ2I,GAAI6nB,QAAOmwE,SAAQ2I,WAAU9B,UAASxC,UAAU/+B,GAElG,MAAQzqD,GAETla,QAAQka,MAAOA,GAEfiqD,KAAK7E,YAAa,CAAE5kE,KAAM,QAAS2M,GAAI3I,EAAQ2I,GAAI6S,MAAOA,EAAMxb,iB,yFClZtE,SACA,OACA,QAEMg/B,EAAe,IAAI,EAAA3hC,iBACzB,yE,OACC,EAAA0iC,cAAgBf,E,EAcjB,OAfiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAGrD,YAAA5/E,KAAN,SAAWC,G,sGACJiX,EAAUjX,EAAe,GAC/Bvb,KAAK8+B,YAAYtM,G,WAEnB,EAfA,CAAiC,EAAAwM,cAApB,EAAAijE,e,yFCNb,SAEA,OACA,QAOMnhE,EAAe,IANrB,uE,OACC,EAAAlpB,MAAQ,EAAA1Y,YAAYV,QAAQ,EAAG,CAC9B2kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,K,EAEvB,OALoC,iBAKpC,EALA,CAAoC,EAAAjkC,mBAQpC,yE,OACC,EAAA0iC,cAAgBf,E,EA4BjB,OA7BmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,UAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CACzC,EAAA31F,eAAek3F,MACf,EAAAl3F,eAAek3F,MACf,EAAAl3F,eAAek3F,MACf,EAAAl3F,eAAek3F,QAEhBl7F,KAAKw3B,QAAQsqD,UAAU,KAGvB9hF,KAAK0b,gBAAgB6rE,8BAGhB,YAAAjsE,KAAN,W,+HACOmV,EAAczwB,KAAKyY,GAAGb,MACxB5X,KAAKQ,GAAGiX,OAAOkjF,UAAUlqE,GACV,GAAMzwB,KAAKV,qBAAqB6wB,wBAAwBM,IADvE,M,cACG1uB,EAAY,SAClB/B,KAAK8+B,YAAY/8B,EAAUywB,W,aAE3BxyB,KAAKswB,OAAOhT,MAAMpd,IAAI,YAAYuwB,G,mCAGrC,EA7BA,CAAmC,EAAAuO,cAAtB,EAAAkjE,iB,8ECZb,aAEA,SACA,SAQA,2BAKA,OAJQ,EAAAT,IAAP,SAAWM,GACVA,EAAK7uF,cAAc,EAAAm5F,2BAA4B,EAAAv2E,eAAeL,QAC9DssE,EAAK7uF,cAAc,EAAA6mC,6BAA8B,EAAAjkB,eAAeL,SAElE,EALA,GAAa,EAAAisE,iB,yFCVb,SAGA,2B,+CAcA,OAdgD,iBACxC,EAAA5jG,KAAP,WACC,MAAO,uBAGF,YAAA66C,yBAAN,SAA+B/7B,EAAgBjS,G,yFAO9C,MAAO,CAAP,EAAO,IAAI,EAAA0qD,YAAYz4C,EAAQjS,WAEjC,EAdA,CAFA,OAEgDovC,8BAAnC,EAAAsyD,8B,yFCUb,2B,+CAmCA,OAnCuF,iBAKhF,YAAAC,eAAN,SAAqB1vF,EAAgB2vF,G,wHAMnB,SAAMvsG,KAAK24C,yBAAyB/7B,EAAQ2vF,I,OAI7D,OAJMzzD,EAAW,SACXwf,EAAYE,YAAYC,MAC9B3f,EAASz8C,KAAU2D,KAAKkX,YAAW,IAAI0F,EAAOvgB,KAAI,IAAIi8D,EAAS,IAAIt4D,KAAKwsG,cAExE,GAAMxsG,KAAKyiB,OAAO6lE,Y,OAElB,OAFA,SACAtoF,KAAK64C,eAAeC,GACb,CAAP,EAAOA,WAIR,YAAA0zD,YAAA,WACC,OAAO1wE,KAAKC,UAAU/7B,KAAKyiB,OAAOiS,IAAIrqB,KAAI,SAAC5M,GAAM,OAAAA,EAAEkvF,sBAarD,EAnCA,CAZA,OAYuF8f,gBAAjE,EAAA3yD,gC,yFCdtB,QACA,SACA,QACA,SAGA,yE,OACC,EAAAx6C,qBAAiE,IAAI,EAAAC,yBACpE,EACA,EAAAmtG,gBAMO,EAAAC,gCAAkC,EAAKC,0BAA0BvvG,KAAK,G,EAa/E,OAtBgE,iBAKxD,EAAAsC,aAAP,WACC,OAAO,EAAAC,YAAY42D,OAIpB,YAAAz2D,qBAAA,WAKCC,KAAK6U,oBAAoB,4BAA6B7U,KAAK2sG,kCAI5D,YAAAC,0BAAA,WACC5sG,KAAKyiB,OAAO6lE,YAEd,EAtBA,CAAgE,EAAAzkF,WAAnD,EAAA4oG,iBAyBb,+B,+CAA6D,OAArB,iBAAqB,EAA7D,CAAwCA,GAA3B,EAAAI,sB,yFC5Bb,2B,+CAIA,OAJoC,iBACnC,YAAApxF,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IAEpB,EAJA,CAHA,OAGoCuY,gBAAvB,EAAA24E,kB,8ECHb,aAEA,SACA,SACA,SACA,SACA,SACA,SAYA,2BASA,OARQ,EAAAjL,IAAP,SAAWM,GACVA,EAAK7uF,cAAc,EAAA6nC,gBAAiB,EAAAhlB,YAAYG,SAChD6rE,EAAK7uF,cAAc,EAAA45F,eAAgB,EAAA/2E,YAAYG,SAC/C6rE,EAAK7uF,cAAc,EAAA65F,kBAAmB,EAAAh3E,YAAYC,YAClD+rE,EAAK7uF,cAAc,EAAAqiD,cAAe,EAAAx/B,YAAYG,SAC9C6rE,EAAK7uF,cAAc,EAAA85F,aAAc,EAAAj3E,YAAYG,SAC7C6rE,EAAK7uF,cAAc,EAAA+5F,YAAa,EAAAl3E,YAAYG,UAE9C,EATA,GAAa,EAAAyrE,c,+FCnBb,QAIA,2BAEA,OACA,OACA,QACA,QAGA,SAwKA,IAAMuL,IAAwB,MAC5B,EAAA/uG,UAAUC,SA3HZ,SAAyBtB,GACxB,OAAOA,EAAQ,EAAI,GA2HnB,EAAC,EAAAqB,UAAUD,QAzHZ,SAAwBpB,GACvB,OAAO,MAyHP,EAAC,EAAAqB,UAAUE,OAvHZ,SAAuBvB,GACtB,GAAI,UAAgBA,GACnB,MAAO,CAACA,EAAOA,EAAOA,GAEvB,GAAIA,aAAiB,EAAAg0B,QAAS,CAC7B,IAAMmrC,EAAKn/D,EAAMwuB,UACjB,MAAO,CAAC2wC,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE1B,GAAIn/D,aAAiB,EAAAyR,QACpB,OAAOzR,EAAMwuB,UAEd,GAAIxuB,aAAiB,EAAAoI,MACpB,OAAOpI,EAAMwuB,UAEd,GAAIxuB,aAAiB,EAAA2+D,QAAS,CAC7B,IAAM0xC,EAAKrwG,EAAMwuB,UACjB,MAAO,CAAC6hF,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE1B,MAAO,CAAC,EAAG,EAAG,IAsGd,EAAC,EAAAhvG,UAAUG,OApGZ,SAAuBxB,GACtB,OAAI,UAAgBA,GACZA,EAEJA,aAAiB,EAAAg0B,SAAWh0B,aAAiB,EAAAyR,SAAWzR,aAAiB,EAAA2+D,QACrE3+D,EAAMwuB,UAAU,GAEjB,GA8FP,EAAC,EAAAntB,UAAUI,QA5FZ,SAAwBzB,GACvB,OAAO,MA4FP,EAAC,EAAAqB,UAAUK,SA1FZ,SAAyB1B,GACxB,OAAI,UAAgBA,GACZkM,KAAK8kB,MAAMhxB,GAEfA,aAAiB,EAAAg0B,SAAWh0B,aAAiB,EAAAyR,SAAWzR,aAAiB,EAAA2+D,QACrEzyD,KAAK8kB,MAAMhxB,EAAMwuB,UAAU,IAE5B,GAoFP,EAAC,EAAAntB,UAAUM,eAlFZ,SAA+B3B,GAC9B,MAAO,GAAGA,GAkFV,EAAC,EAAAqB,UAAUO,MAhFZ,SAAsB5B,GACrB,OAAO,EAAA6B,UAAUC,eAgFjB,EAAC,EAAAT,UAAUU,WA9EZ,SAA2B/B,GAC1B,OAAO,MA8EP,EAAC,EAAAqB,UAAUW,QA5EZ,SAAwBhC,GACvB,MAAO,GAAGA,GA4EV,EAAC,EAAAqB,UAAUY,SA1EZ,SAAyBjC,GACxB,GAAI,UAAgBA,GACnB,MAAO,CAACA,EAAOA,GAEhB,GAAIA,aAAiB,EAAAg0B,QACpB,OAAOh0B,EAAMwuB,UAGb,IAIM4wC,EALP,GAAIp/D,aAAiB,EAAAyR,QAEpB,MAAO,EADD2tD,EAAKp/D,EAAMwuB,WACN,GAAI4wC,EAAG,IAEnB,GAAIp/D,aAAiB,EAAAoI,MAEpB,MAAO,EADDg3D,EAAKp/D,EAAMwuB,WACN,GAAI4wC,EAAG,IAEnB,GAAIp/D,aAAiB,EAAA2+D,QAAS,CAC7B,IAAM0xC,EAAKrwG,EAAMwuB,UACjB,MAAO,CAAC6hF,EAAG,GAAIA,EAAG,IAEnB,MAAO,CAAC,EAAG,IAwDX,EAAC,EAAAhvG,UAAUa,SAtDZ,SAAyBlC,GACxB,GAAI,UAAgBA,GACnB,MAAO,CAACA,EAAOA,EAAOA,GAEvB,GAAIA,aAAiB,EAAAg0B,QAAS,CAC7B,IAAMmrC,EAAKn/D,EAAMwuB,UACjB,MAAO,CAAC2wC,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE1B,GAAIn/D,aAAiB,EAAAyR,QACpB,OAAOzR,EAAMwuB,UAEd,GAAIxuB,aAAiB,EAAAoI,MACpB,OAAOpI,EAAMwuB,UAEd,GAAIxuB,aAAiB,EAAA2+D,QAAS,CAC7B,IAAM0xC,EAAKrwG,EAAMwuB,UACjB,MAAO,CAAC6hF,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE1B,MAAO,CAAC,EAAG,EAAG,IAqCd,EAAC,EAAAhvG,UAAUc,SAnCZ,SAAyBnC,GACxB,GAAI,UAAgBA,GACnB,MAAO,CAACA,EAAOA,EAAOA,EAAOA,GAE9B,GAAIA,aAAiB,EAAAg0B,QAAS,CAC7B,IAAMmrC,EAAKn/D,EAAMwuB,UACjB,MAAO,CAAC2wC,EAAG,GAAIA,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAGhC,IAIMC,EALP,OAAIp/D,aAAiB,EAAAyR,QAEb,EADD2tD,EAAKp/D,EAAMwuB,WACN,GAAI4wC,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE7Bp/D,aAAiB,EAAAoI,MAEb,EADDg3D,EAAKp/D,EAAMwuB,WACN,GAAI4wC,EAAG,GAAIA,EAAG,GAAIA,EAAG,IAE7Bp/D,aAAiB,EAAA2+D,QACb3+D,EAAMwuB,UAEP,CAAC,EAAG,EAAG,EAAG,I,GAmBlB,2BAWA,OALQ,EAAA2O,WAAP,SAAuCn8B,EAAShB,GAG/C,OAAOm6E,EADoCi2B,EAAyBpvG,IACtDhB,IAEhB,EAXA,GAAa,EAAAk9B,gC,yFCpMb,SACA,SAIA,SACA,QAGA,SAASozE,EAAsBtvG,GAE9B,MAAO,CAACs+B,WAAY,CAACt+B,KADT,EAAA8nB,qBAAqBthB,QAAQxG,KAK1C,WAiBMgjC,EAAe,IAfrB,uE,OACC,EAAAhjC,KAAO,EAAAoB,YAAYV,QAAQ,EAAG,CAC7B+iC,KAAM,CACLC,QAAS,EAAA5b,qBAAqBvb,KAAI,SAAChO,EAAM/B,GACxC,MAAO,CAAC+B,KAAMA,EAAMS,MAAOxC,SAI9B,EAAA+yG,WAAa,EAAAnuG,YAAYd,QAAQ,EAAGgvG,EAAsB,EAAAznF,oBAAoBE,OAC9E,EAAAynF,UAAY,EAAApuG,YAAYV,QAAQ,EAAG4uG,EAAsB,EAAAznF,oBAAoBG,MAC7E,EAAAynF,YAAc,EAAAruG,YAAYZ,MAAM,EAAG8uG,EAAsB,EAAAznF,oBAAoBrnB,QAC7E,EAAAkvG,WAAa,EAAAtuG,YAAYH,QAAQ,CAAC,EAAG,GAAIquG,EAAsB,EAAAznF,oBAAoBI,OACnF,EAAA0nF,WAAa,EAAAvuG,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAIouG,EAAsB,EAAAznF,oBAAoBK,OACtF,EAAA0nF,WAAa,EAAAxuG,YAAYD,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAImuG,EAAsB,EAAAznF,oBAAoBM,O,EAC1F,OAdqC,iBAcrC,EAdA,CAAqC,EAAA9mB,mBAgBrC,yE,OACC,EAAA0iC,cAAgBf,EAKN,EAAA1J,mCAA6C,EAC/C,EAAA6iB,oCAAsC,EAAKC,8BAA8B78C,KAAK,G,EAgEvF,OAvEoC,iBAE5B,EAAAS,KAAP,WACC,MAAO,YAKR,YAAA8c,gBAAA,WACC5a,KAAKyiB,OAAO03B,uBAAuB,gCAAiCn6C,KAAKi6C,qCACzEj6C,KAAK6U,oBAAoB,gCAAiC7U,KAAKi6C,sCAEhE,YAAAC,8BAAA,SAA8BS,GACxB36C,KAAK46C,UAAUC,oBAAsBF,GAAiB36C,KAAKvC,EAAEK,OACjEkC,KAAK2tG,qBACL3tG,KAAK2U,qBACL3U,KAAKy6B,4BAIP,YAAAhC,UAAA,SAAUC,GACT,IAAMriB,EAAQrW,KAAK4tG,eACnB,GAAIv3F,EAAO,CACV,IAAM6iB,EAAkBl5B,KAAK6tG,yBACvB/wG,EAAQ,EAAAy7B,UAAUC,IAAIniB,EAAMvZ,OAE5BssC,EAAelQ,EAAe,IADlBl5B,KAAK8tG,kBAC0B,MAAMhxG,EACvD47B,EAA8B0P,eAAepoC,KAAM,CAACopC,SAEpDhmC,QAAQmT,KAAK,8CAA8CvW,KAAKyY,GAAG3a,KAAI,MAIzE,sBAAY,uCAAwB,C,IAApC,WACqB,MAAhBkC,KAAKyY,GAAG3a,MACXsF,QAAQmT,KAAK,sCAEd,IAAM2iB,EAAkB,EAAAtT,qBAAqB5lB,KAAKyY,GAAG3a,MAIrD,OAHuB,MAAnBo7B,GACH91B,QAAQmT,KAAK,sCAEP2iB,G,gCAGR,sBAAY,6BAAc,C,IAA1B,WACCl5B,KAAK+tG,gBACJ/tG,KAAK+tG,iBACL,IAAIz0E,IAAwC,CAC3C,CAAC,EAAA3T,oBAAoBE,KAAM7lB,KAAKvC,EAAE4vG,YAClC,CAAC,EAAA1nF,oBAAoBG,IAAK9lB,KAAKvC,EAAE6vG,WACjC,CAAC,EAAA3nF,oBAAoBrnB,MAAO0B,KAAKvC,EAAE8vG,aACnC,CAAC,EAAA5nF,oBAAoBI,KAAM/lB,KAAKvC,EAAE+vG,YAClC,CAAC,EAAA7nF,oBAAoBK,KAAMhmB,KAAKvC,EAAEgwG,YAClC,CAAC,EAAA9nF,oBAAoBM,KAAMjmB,KAAKvC,EAAEiwG,cAEpC,IAAMx0E,EAAkB,EAAAtT,qBAAqB5lB,KAAKyY,GAAG3a,MACrD,OAAOkC,KAAK+tG,gBAAgBrxG,IAAIw8B,I,gCAEjC,sBAAY,gCAAiB,C,IAA7B,WACC,OAAOl5B,KAAK+3B,YAAY/3B,KAAK6tG,2B,gCAGtB,YAAAF,mBAAR,WACC,IAAMK,EAAqBhuG,KAAKQ,GAAGC,QAAQ43B,+BAA+B,GACtE21E,GAAsBA,EAAmBlwG,MAAQkC,KAAK6tG,0BAG1D7tG,KAAKQ,GAAGC,QAAQi3B,mCAAmC,CAClD,IAAI,EAAArC,0BAA0Br1B,KAAK6tG,yBAA0B7tG,KAAK6tG,6BAGrE,EAvEA,CAAoC,EAAAjzE,aAAvB,EAAAkyE,kB,yFCjCb,SACA,SAEA,SACA,QAIA,OAOMhsE,EAAe,IALrB,uE,OACC,EAAAjzB,EAAI,EAAA3O,YAAYZ,MAAM,GACtB,EAAAwP,EAAI,EAAA5O,YAAYZ,MAAM,GACtB,EAAA0P,EAAI,EAAA9O,YAAYZ,MAAM,G,EACvB,OAJwC,iBAIxC,EAJA,CAAwC,EAAAa,mBAMxC,yE,OACC,EAAA0iC,cAAgBf,E,EAoBjB,OArBuC,iBAE/B,EAAAhjC,KAAP,WACC,MAAO,iBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGC,QAAQi3B,mCAAmC,CAClD,IAAI,EAAArC,0BAlBa,OAkB0B,EAAA1P,oBAAoBK,SAIjE,YAAAyS,UAAA,SAAUC,GACT,IAAM7qB,EAAI7N,KAAKg4B,mBAAmB,KAC5BlqB,EAAI9N,KAAKg4B,mBAAmB,KAC5BhqB,EAAIhO,KAAKg4B,mBAAmB,KAG5BoR,EAAY,QADNppC,KAAK+3B,YA3BC,QA4BW,MAAM,EAAAQ,UAAU4F,OAAOtwB,EAAGC,EAAGE,GAC1D0qB,EAA8B0P,eAAepoC,KAAM,CAACopC,KAEtD,EArBA,CAAuC,EAAAxO,aAA1B,EAAAmyE,qB,yFChBb,SAqBMjsE,EAAe,IAbrB,yB,+CAYA,OAZmC,iBAYnC,EAZA,CAFA,KAEmC3hC,mBAenC,yE,OACC,EAAA0iC,cAAgBf,E,EAkBjB,OAnBkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,UAGR,YAAAsd,cAAA,W,MACmB,QAAlB,EAAApb,KAAKsD,qBAAa,SAAEu0B,qBAAqB21C,kBAAkBxtE,OAG5D,YAAAy4B,UAAA,SAAUC,G,MAES,QAAlB,EAAA14B,KAAKsD,qBAAa,SAAEu0B,qBAAqBwO,UAAUgC,sBAAsBroC,KAAM04B,IAOjF,EAnBA,CAAkC,EAAAkC,aAArB,EAAAoyE,gB,yFCvBb,SACA,SAEA,QAMA,2BAIA,OACA,QACA,SACA,SAeMlsE,EAAe,IAbrB,uE,OACC,EAAAzkC,KAAO,EAAA6C,YAAYJ,OAAO,IAC1B,EAAAhB,KAAO,EAAAoB,YAAYV,QAAQ,EAAG,CAC7B+iC,KAAM,CACLC,QAAS,EAAA5b,qBAAqBvb,KAAI,SAAChO,EAAM/B,GACxC,MAAO,CAAC+B,KAAMA,EAAMS,MAAOxC,SAI9B,EAAA2zG,SAAW,EAAA/uG,YAAYd,QAAQ,EAAG,CACjCg+B,WAAY,CAACt+B,KAAM,EAAA8nB,qBAAqBthB,QAAQ,EAAAqhB,oBAAoBK,S,EAEtE,OAZkC,iBAYlC,EAZA,CAAkC,EAAA7mB,mBAelC,yE,OACC,EAAA0iC,cAAgBf,EAIN,EAAA1J,mCAA6C,EAC/C,EAAA82E,8BAAgC,EAAKC,wBAAwB9wG,KAAK,G,EA+D3E,OArEiC,iBAEzB,EAAAS,KAAP,WACC,MAAO,SAIR,YAAA8c,gBAAA,WACC5a,KAAK2tG,qBAEL3tG,KAAK6U,oBAAoB,0BAA2B7U,KAAKkuG,gCAElD,YAAAC,wBAAR,SAAgCxzD,GAC3BA,GAAiB36C,KAAKvC,EAAEK,OAC3BkC,KAAK2tG,qBACL3tG,KAAK2U,qBACL3U,KAAKy6B,4BAIP,YAAAhC,UAAA,SAAUC,GACT,IAAMsR,EAAc,GAEdrC,EAAU,EAAA/hB,qBAAqB5lB,KAAKyY,GAAG3a,MACvC8qC,EAAW5oC,KAAK80C,eAEtB9K,EAAYlvC,KAAK,IAAI,EAAAwpC,oBAAoBtkC,KAAM2nC,EAASiB,IACxDlQ,EAA8BuR,gBAAgBjqC,KAAMgqC,IAErD,YAAA1P,kBAAA,WACC,IAAMqN,EAAU,EAAA/hB,qBAAqB5lB,KAAKyY,GAAG3a,MACvC4P,EAAgB,EAAA2Y,4BAA4BshB,GAC9C5N,EAAa,EAAA7T,kCAAkCyhB,GAEnD3nC,KAAK44B,0BAA4B54B,KAAK44B,2BAA6B,IAAI,EAAAs9B,uBACvEl2D,KAAK44B,0BAA0BC,QAG9BkB,GAAc,EAAA57B,UAAUa,SACxBgB,KAAKvC,EAAEwwG,SAASnxG,OAChB,UAAe4Q,IACS,GAAxBA,EAAclT,OAEdwF,KAAK44B,0BAA0Bq9B,gBAC9B,EAAA93D,UAAUE,MACV2B,KAAKyY,GAAGpc,KACRqR,EACA1N,KAAK80C,gBAGN90C,KAAK44B,0BAA0Bq9B,gBAC9Bl8B,EACA/5B,KAAKyY,GAAGpc,KACRqR,EACA1N,KAAK80C,iBAIR,YAAAA,aAAA,WACC,IAAM0F,EAA0Bx6C,KAAKQ,GAAGC,QAAQ43B,+BAA+B,GAE/E,OADiBr4B,KAAK+3B,YAAYyiB,EAAwBn+C,OAI3D,YAAAsxG,mBAAA,WACC3tG,KAAKQ,GAAGC,QAAQi3B,mCAAmC,CAClD,IAAI,EAAArC,0BAxFa,MAwF0B,EAAAzP,qBAAqB5lB,KAAKyY,GAAG3a,UAG3E,EArEA,CAAiC,EAAA88B,aAApB,EAAAqyE,e,yFCjCb,SACA,QACA,OACA,OAEA,QAGA,SAIA,QACA,SASA,aAKC,WACSh4E,EACAlhB,EACA4N,EACAysF,GAHA,KAAAn5E,QACA,KAAAlhB,QACA,KAAA4N,iBACA,KAAAysF,gBAqMV,OAlMQ,EAAAC,WAAP,SAAuCh4F,EAAsBy+B,GAC5D,OAAO,IAAI51C,EAAemX,EAAMvY,KAAMuY,EAAMha,KAAMga,EAAM3I,cAAeonC,IAGxE,sBAAI,mBAAI,C,IAAR,WACC,OAAO90C,KAAKi1B,O,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAOj1B,KAAK+T,O,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAO/T,KAAK2hB,gB,gCAEb,sBAAI,2BAAY,C,IAAhB,WACC,OAAO3hB,KAAKouG,e,gCAGb,sBAAI,sBAAO,C,IAAX,WACC,OAAQpuG,KAAKsuG,SAAWtuG,KAAKsuG,UAAYtuG,KAAKuuG,mB,gCAGvC,YAAAA,gBAAR,WACC,OAAOrvG,EAAYsvG,gBAAgBxuG,KAAKi1B,QAGzC,sBAAI,4BAAa,C,IAAjB,WACC,IAAMw5E,EAAiBzuG,KAAK0uG,UAAUrxG,KAAK2C,MAC3C,OAAQA,KAAKi1B,OACZ,KAAK,EAAA92B,UAAUM,cACd,MAAO,CAACqW,SAAU25F,EAAgBlyE,eAAgB,CAACC,QAAS,EAAA58B,YAAYi/B,MACzE,QACC,MAAO,CAAC/pB,SAAU25F,K,gCAIb,YAAAC,UAAR,SAAkBlrG,EAAoB6S,GAErCrW,KAAKqsE,QAAQvvE,MAAQuZ,EAAMvZ,OAIrB,EAAA0xG,gBAAP,SAAuB1wG,GACtB,OAAQA,GACP,KAAK,EAAAK,UAAUC,QAEf,KAAK,EAAAD,UAAUD,OACd,MAAO,CAACpB,MAAO,GAChB,KAAK,EAAAqB,UAAUE,MACd,MAAO,CAACvB,MAAO,IAAI,EAAAyR,QAAQ,EAAG,EAAG,IAClC,KAAK,EAAApQ,UAAUG,MAEf,KAAK,EAAAH,UAAUI,OAEf,KAAK,EAAAJ,UAAUK,QAEf,KAAK,EAAAL,UAAUM,cACd,MAAO,CAAC3B,MAAO,GAEhB,KAAK,EAAAqB,UAAUO,KACd,MAAO,CAAC5B,MAAO,MAChB,KAAK,EAAAqB,UAAUU,UACd,MAAO,CAAC/B,MAAO,GAChB,KAAK,EAAAqB,UAAUW,OACd,MAAO,CAAChC,MAAO,MAChB,KAAK,EAAAqB,UAAUY,QACd,MAAO,CAACjC,MAAO,IAAI,EAAAg0B,QAAQ,EAAG,IAC/B,KAAK,EAAA3yB,UAAUa,QACd,MAAO,CAAClC,MAAO,IAAI,EAAAyR,QAAQ,EAAG,EAAG,IAClC,KAAK,EAAApQ,UAAUc,QACd,MAAO,CAACnC,MAAO,IAAI,EAAA2+D,QAAQ,EAAG,EAAG,EAAG,IAEtC,EAAAjwB,WAAWF,YAAYxtC,IAGlB,YAAAq1E,kBAAN,SAAwB3vE,G,iIAEjB6oE,EAAUrsE,KAAKqsE,SAEfh2D,EAAQ7S,EAAKif,OAAO/lB,IAAIsD,KAAK+T,QAElC,GAAMsC,EAAMuL,WADT,M,UACH,WAGc,OAFR9kB,EAAQuZ,EAAMvZ,QAEEkD,KAAK2uG,kBAAkB7xG,IAAWkD,KAAK4uG,oBAAzD,Y,OAIK5uG,KAAKi1B,O,KACP,EAAA92B,UAAUM,cAAV,Y,KAIA,EAAAN,UAAUO,KAAV,Y,mBAHJ,SAAMsB,KAAK6uG,+BAAyCx4F,EAA6Bg2D,I,OACjF,OADA,SACA,M,OAIA,OADArsE,KAAK8uG,4BAAsCz4F,EAAqBg2D,GAChE,M,OAIA,OADAA,EAAQvvE,MAAQuZ,EAAMvZ,MACtB,M,yBAWC,YAAA+xG,+BAAN,SAAqCx4F,EAA0Bg2D,G,iIAMxDxuC,EAAaxnB,EAAMwnB,cAEN,GAAMA,EAAW5mB,qBADhC,M,cACGlV,EAAY,SACZywB,EAAUzwB,EAAUywB,UAC1B65C,EAAQvvE,MAAQ01B,E,aAEhB65C,EAAQvvE,MAAQ,K,mCAIlB,YAAAgyG,4BAAA,SAA4Bz4F,EAAkBg2D,GAC7CA,EAAQvvE,MAAQuZ,EAAM6b,gBAGvB,YAAAy8E,kBAAA,SAAkB99F,GACjB,IAAMk+F,EAAoB,EAAAlmD,uBAAuB7oD,KAAKi1B,OACtD,GAAIj1B,KAAKgvG,oBAAqB,CAC7B,IAAMC,GAAeF,EAAkB7tF,iBAAiBrQ,EAAW7Q,KAAKgvG,qBAIxE,OAHIC,IACHjvG,KAAKgvG,oBAAsBD,EAAkBG,YAAYr+F,IAEnDo+F,EAGP,OADAjvG,KAAKgvG,oBAAsBD,EAAkBG,YAAYr+F,IAClD,GA2CT,YAAA+9F,iBAAA,WACC,IAAIvzG,GAAS,EACPgxE,EAAUrsE,KAAKqsE,QACrB,GAAIA,EAAS,CACZ,IAAMvvE,EAAQuvE,EAAQvvE,MAClBA,IACHzB,EAASyB,EAAMsS,aAAe,EAAA0zB,cAIhC,OAAOznC,GAET,EA9MA,GAAa,EAAA6D,e,8ECtBb,aAEA,SACA,SACA,SACA,SACA,SAWA,2BAQA,OAPQ,EAAAuiG,IAAP,SAAWM,GACVA,EAAK7uF,cAAc,EAAAi8F,iBAAkB,EAAA34E,aAAa9zB,MAClDq/F,EAAK7uF,cAAc,EAAAk8F,wBAAyB,EAAA54E,aAAaX,UACzDksE,EAAK7uF,cAAc,EAAAm8F,mBAAoB,EAAA74E,aAAa9zB,MACpDq/F,EAAK7uF,cAAc,EAAAo8F,oBAAqB,EAAA94E,aAAa9zB,MACrDq/F,EAAK7uF,cAAc,EAAAq8F,cAAe,EAAA/4E,aAAaryB,SAEjD,EARA,GAAa,EAAAy9F,e,yFCjBb,OACA,QACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SAIM9gE,EAAe,IAHrB,yB,+CAEG,OAFoC,iBAEpC,EAFH,CAAuC,EAAAyL,2BACtC,EAAAV,sBAAsB,EAAAJ,oBAAoB,EAAArG,gBAAgB,EAAAX,iBAAiB,EAAAtlC,wBAI5E,yE,OACC,EAAA0iC,cAAgBf,EAaP,EAAAuL,uBAA+C,IAAI,EAAAL,qBAAqB,GACxE,EAAAY,6BAA0D,IAAI,EAAAH,0BAA0B,G,EAgBlG,OA/BsC,iBAE9B,EAAA3uC,KAAP,WACC,MAAO,cAGR,YAAAogB,gBAAA,WACC,OAAO,IAAI,EAAAif,kBAAkB,CAC5Bh4B,aAAc,EAAAC,SACdP,KAAM,EAAAC,UACNF,MAAO,SACP+/B,QAAS,KAKX,YAAA/pB,gBAAA,sBACC5a,KAAKyiB,OAAOkV,6BAA4B,WACvC,EAAK0U,uBAAuBzxB,kBAC5B,EAAKgyB,6BAA6BhyB,sBAG9B,YAAAU,KAAN,W,gGACC,EAAA6pB,iBAAiB1gB,OAAOzkB,MACxB,EAAA4lC,eAAenhB,OAAOzkB,MACtB,EAAA4rC,mBAAmBnnB,OAAOzkB,MAC1BA,KAAKqsC,uBAAuB5nB,SAC5BzkB,KAAK4sC,6BAA6BnoB,SAElCzkB,KAAKme,aAAane,KAAKkD,U,WAEzB,EA/BA,CAAsC,EAAAkb,cAAzB,EAAA+wF,oB,yFCZb,2B,+CAgBA,OAhBuC,iBACtC,YAAA1zF,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IAEnB,YAAA2C,aAAA,SAAajb,GACS,MAAjBlD,KAAK0zB,UACR1zB,KAAK0zB,SAASlW,UAEfxd,KAAKyb,YAAYvY,IAElB,YAAAssG,aAAA,WACC,OAAOxvG,KAAK4zB,eAEb,YAAA1wB,SAAA,WACC,OAAOlD,KAAKwb,WAEd,EAhBA,CAHA,OAGuCuY,gBAA1B,EAAArW,qB,yFCJb,OACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,QAIMojB,EAAe,IAHrB,yB,+CAEG,OAFoC,iBAEpC,EAFH,CAAuC,EAAAyL,2BACtC,EAAAV,sBAAsB,EAAAJ,oBAAoB,EAAArG,gBAAgB,EAAAX,iBAAiB,EAAAtlC,wBAI5E,yE,OACC,EAAA0iC,cAAgBf,EAKN,EAAA9nB,6BAA+B,EAAApZ,YAAYy3B,G,EAmCtD,OAzC6C,iBAErC,EAAAv5B,KAAP,WACC,MAAO,sBAIR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,QAQjB,YAAAgpD,6BAAV,WACC,OAAO,IAAI,EAAA37B,sBAA4C9zE,KAAM,EAAA0vG,uBAGxD,YAAAp0F,KAAN,W,gGACCtb,KAAK2vG,sBAQL3vG,KAAKme,aAAane,KAAKkD,U,WAGR,YAAA0sG,SAAhB,W,uHACK5vG,KAAKie,UACR,GAAMje,KAAK63B,qBAAqBwO,UAAUW,iBAAiBhnC,KAAKie,YAD7D,M,OAEH,OADA,SACA,GAAMje,KAAK63B,qBAAqBo7C,gB,OAAhC,S,mCAMH,EAzCA,CAA6C,EAAA48B,qBAAhC,EAAAT,2B,yFCfb,OACA,QACA,QACA,QACA,OAOA,2B,+CA2BA,OA3B0C,iBAEzC,sBAAI,+BAAgB,C,IAApB,WACC,IAAMtjC,EAAW,EAAAgkC,UAAUC,MAC3B,MAAO,CACNxkC,aAAcO,EAASP,aACvBC,eAAgBM,EAASN,eACzBx2B,SAAU82B,EAAS92B,W,gCAGrB,YAAA22B,iBAAA,WACC,IAAMqkC,EAAkBhwG,KAAKsrE,iBAE7B,OAAO,IAAI,EAAA2kC,eAAe,CACzB9qG,aAAc,EAAA4/B,aACdlgC,KAAM,EAAAC,UACNO,aAAa,EACb4/B,KAAK,EACLirE,QAAQ,EACR5qG,WAAW,EACX0/B,UAAW,GAEXgQ,SAAU,EAAAo3B,cAActpE,MAAMktG,EAAgBh7D,UAC9Cu2B,aAAcykC,EAAgBzkC,aAC9BC,eAAgBwkC,EAAgBxkC,kBAGnC,EA3BA,CALA,OAK0C2kC,qBAA7B,EAAAT,wB,yFCXb,SAEA,SACA,SACA,SACA,SAEA,QAEMU,EAAoC,IAAI92E,IAAI,IAKlD82E,EAAclwG,IAAI,EAAA2lC,mBAAmBwqE,SAAU,EAAAC,mCAC/CF,EAAclwG,IAAI,EAAA2lC,mBAAmB0qE,MAAO,EAAAC,gCAC5CJ,EAAclwG,IAAI,EAAA2lC,mBAAmB4qE,UAAW,EAAAC,mCAEhD,+B,+CAyEA,OAzEkD,iBAIjD,YAAA3qE,sCAAA,WACC,OAAOqqE,GAGF,YAAAppE,iBAAN,SAAuB9jC,G,gIAEtB,OAAKlD,KAAKyrE,oBAIJklC,EAAe,EAAAv+B,aAAaH,kBAAkBjyE,KAAKsmC,kBACxC9rC,OAAS,GACzBwF,KAAKsmC,gBAAgBhW,OAAOhT,MAAMpd,IAAI,gCAEvCF,KAAKumC,eAAeoqE,GACpB,GAAM3wG,KAAK4wG,oBARV,I,OA0BD,OAlBA,SAEMC,EAAoB7wG,KAAK+qE,iBAAiBruE,IAAI,EAAA0sB,WAAWxjB,QACzDkrG,EAAsB9wG,KAAK+qE,iBAAiBruE,IAAI,EAAA0sB,WAAW2f,UAC7D8nE,GAAqBC,IACxB5tG,EAASqoE,aAAeslC,EACxB3tG,EAASsoE,eAAiBslC,EAE1B5tG,EAAS8xC,SAAWh1C,KAAKisE,eAAoC,QAAtB,EAACjsE,KAAKsrE,wBAAgB,eAAEt2B,UAC/D9xC,EAASyvB,aAAc,GASxB,GAAM3yB,KAAKgmC,yBAAyB9iC,I,cAApC,S,YAaa,YAAA0tG,gBAAd,W,kIAGC,IAFA5wG,KAAK+qE,iBAAmB,IAAIzxC,IAC5Bt5B,KAAKgrE,OAAS,IAAI1xC,IACb,EAAL,EAAwB,EAAAt5B,KAAK6rE,aAAL,eAAfvjC,EAAW,MACbwjC,EAAW9rE,KAAKqrE,iCAAiC/iC,KAEtDtoC,KAAKgrE,OAAO9qE,IAAIooC,EAAawjC,EAAS3iE,MAAM,O,OAG1CnJ,KAAKwmC,YAAYhsC,OAAS,EAE7B,GAAMwF,KAAK2sE,sBAAsB3sE,KAAKwmC,cAFnC,M,OAEH,SAEAxmC,KAAK4rE,e,iBAGN,IAAK,EAAL,EAAwB,EAAA5rE,KAAK6rE,aAAL,eAAfvjC,EAAW,MACb6kC,EAAQntE,KAAKgrE,OAAOtuE,IAAI4rC,KAE7BtoC,KAAK+qE,iBAAiB7qE,IAAIooC,EAAa6kC,EAAMtjE,KAAK,O,kBAItD,EAzEA,CAAkD,EAAAsgC,uBAA5B,EAAAgmE,uB,8EChBtB,iBACC,WAAoBp8F,EAA2Bg9F,EAAgCC,GAA3D,KAAAj9F,QAA2B,KAAAg9F,eAAgC,KAAAC,gBAWhF,OATC,YAAA30G,KAAA,WACC,OAAO2D,KAAK+T,OAEb,YAAAy0B,YAAA,WACC,OAAOxoC,KAAK+wG,cAEb,YAAA1nE,aAAA,WACC,OAAOrpC,KAAKgxG,eAEd,EAZA,GAAa,EAAA5iC,gB,8ECOb,iBACC,WAAoBr6D,EAAuBiM,QAAA,IAAAA,MAAA,IAAvB,KAAAjM,QAAuB,KAAAiM,WAuB5C,OArBC,YAAA3jB,KAAA,WACC,OAAO2D,KAAK+T,OAEb,YAAA0zB,uBAAA,WACC,OAAOznC,KAAKggB,SAAiC,yBAAK,GAEnD,YAAAgoB,QAAA,WACC,OAAOhoC,KAAKggB,SAAkB,SAE/B,YAAAmoB,aAAA,WACC,OAAOnoC,KAAKggB,SAAa,IAK1B,YAAAioB,OAAA,WACC,OAAOjoC,KAAKggB,SAAiB,QAAK,IAEnC,YAAAkoB,OAAA,WACC,OAAOloC,KAAKggB,SAAiB,QAAK,IAEpC,EAxBA,GAAa,EAAAwuD,kB,yFCTb,2BAEA,SAGA,SAEA,SACA,SACA,SACA,SACA,SAEA,SAEA,aAQC,WAAoB0B,EAA2C5pC,GAA3C,KAAA4pC,aAA2C,KAAA5pC,kBAP/D,KAAA1N,0BAAoD,IAAI,EAAAs9B,uBACxD,KAAA+6C,4BAAsC,EAGtC,KAAAjmC,OAAmD,IAAI1xC,IACvD,KAAA43E,mBAA4D,IAAI53E,IAkQjE,OA9PO,YAAAuzC,iBAAN,SAAuBb,G,wKAKtB,KAJMmlC,EAAiB,IAAI,EAAAr/B,mBAAmC9xE,KAAKkwE,WAAYlwE,KAAKsmC,kBACrE2W,SAAS+uB,GAElBolC,EAA0D,IAAI93E,IAC/D,EAAL,EAAwB,EAAAt5B,KAAK6rE,eAAL,eAAfvjC,EAAW,KACnB8oE,EAAqBlxG,IAAIooC,EAAa6oE,EAAejgC,sBAAsB5oC,IAG5E,IADMgpC,EAAe6/B,EAAe7/B,e,WAC3BhpC,GACR,IAAM+oE,EAAwB,EAAKnhC,WAAW1D,0BAA0BlkC,GAClEgpE,EAAwB,EAAKphC,WAAWzD,0BAA0BnkC,GAOlE0oC,EAAiC,IAAI13C,IAC3C83E,EAAqBxvG,SAAQ,SAAC8oD,EAAOpiB,GACpC,IAAiB,UAAAoiB,EAAA,eAAO,CAAnB,IAAIlnD,EAAI,KACZwtE,EAAS9wE,IAAIsD,EAAKykB,eAAe,OAInC,IAAsB,UAAAopF,EAAA,eAAuB,CAAxC,IAAI1iC,EAAS,KAEZqC,EAASt0E,IAAIiyE,EAAU1mD,iBAC3B,EAAAyhB,SAASC,uBAAuBynE,EAAsB9oE,EAAaqmC,GACnEqC,EAAS9wE,IAAIyuE,EAAU1mD,eAAe,IAIxC,IAAsB,UAAAqpF,EAAA,eAAuB,CAAxC,IAAIC,EAAS,KAEZvgC,EAASt0E,IAAI60G,EAAUtpF,gBAC3B,EAAAyhB,SAASW,0BAA0B+mE,EAAsB9oE,EAAaipE,K,OA3BpE,EAAL,EAAwB,EAAAvxG,KAAK6rE,eAAL,eAAfvjC,EAAW,K,EAAXA,GAmCT,IADMkpE,EAAwC,IAAIl4E,IAC7C,EAAL,EAAiB,EAAAg4C,EAAA,eAAR9tE,EAAI,KACZguG,EAAgBtxG,IAAIsD,EAAKykB,eAAe,GAGzC,IAAK,EAAL,EAAsB,EAAA+jD,EAAA,eAAb2C,EAAS,KACZ6iC,EAAgB90G,IAAIiyE,EAAU1mD,iBAClCqpD,EAAax2E,KAAK6zE,GAClB6iC,EAAgBtxG,IAAIyuE,EAAU1mD,eAAe,IAG/C,IAAK,EAAL,EAAiB,EAAAqpD,EAAA,gBAAR9tE,EAAI,MAEPm1B,a,IAEW,EAAA24C,E,wBAAA,WAChB,IADQ9tE,EAAI,MACDif,OAAO6lE,YADU,M,OAC5B,S,wBADgB,I,aAcjB,IALAtoF,KAAKyxG,+BAAiC,IAAI,EAAAC,4BACzC1xG,KAAK6rE,eACL7rE,KAAK6rE,eAAe,IAErB7rE,KAAK64B,QACA,EAAL,EAAwB,EAAA74B,KAAK6rE,eAAL,eAGvB,GAHQvjC,EAAW,KACboiB,EAAQ0mD,EAAqB10G,IAAI4rC,GACvCtoC,KAAKyxG,+BAA+BE,wBAAwBrpE,GACxDoiB,EACH,IAAK,EAAL,EAAiB,EAAAA,EAAA,eAARlnD,EAAI,KAERxD,KAAKixG,4BACRztG,EAAK82B,oBAEN92B,EAAKi1B,UAAUz4B,KAAKyxG,gC,OASnBzxG,KAAKixG,4BACRjxG,KAAKs6B,kBAAkBg3C,GAExBtxE,KAAK4xG,eAAetgC,G,YAGrB,YAAAvE,2BAAA,WACC/sE,KAAKixG,4BAA6B,GAEnC,YAAAnkC,wBAAA,WACC9sE,KAAKixG,4BAA6B,GAGnC,YAAAplC,aAAA,WACC,OAAO7rE,KAAKkwE,WAAWrE,cAGhB,YAAAhzC,MAAR,WACC,IAAwB,UAAA74B,KAAK6rE,eAAL,eAAqB,CAAxC,IAAIvjC,EAAW,KACbupE,EAAY,IAAIv4E,IAItBt5B,KAAKgrE,OAAO9qE,IAAIooC,EAAaupE,GAC7B7xG,KAAKkxG,mBAAmBhxG,IAAIooC,EAAa,IAAIhP,OAI/C,YAAAiB,cAAA,WACC,OAAOv6B,KAAK44B,0BAA0B4B,MAAQ,IAE/C,YAAA2yC,MAAA,SAAM7kC,EAAyB4kC,GAC9B,OAAOltE,KAAKgrE,OAAOtuE,IAAI4rC,GAAc5rC,IAAIwwE,IAE1C,YAAAG,UAAA,WACC,OAAOrtE,KAAKgrE,QAGb,YAAA1wC,kBAAA,SAAkBowB,GACjB1qD,KAAK44B,0BAA0BC,QAC/B,IAAiB,UAAA6xB,EAAA,eAAO,CAAnB,IACEnwB,EADM,KACeA,gBAC3B,GAAIA,EACH,IAAyB,UAAAA,EAAA,eAAe,CAAnC,IAAIy7B,EAAY,KACpBh2D,KAAK44B,0BAA0B99B,KAAKk7D,MAMxC,YAAA47C,eAAA,SAAelnD,GACd,IAAwB,UAAA1qD,KAAK6rE,eAAL,eAAqB,CAAxC,IAAIvjC,EAAW,KAEnBtoC,KAAK8xG,eAAepnD,EAAOpiB,KAK7B,YAAAwpE,eAAA,SAAepnD,EAAyBpiB,GACvCtoC,KAAKiqC,gBAAgBygB,EAAOpiB,EAAa,EAAA3E,iBAAiBQ,SAAU,EAAAqX,SAASwzB,sBAC7EhvE,KAAKiqC,gBAAgBygB,EAAOpiB,EAAa,EAAA3E,iBAAiBU,QAAS,EAAAmX,SAAS0zB,QAC5ElvE,KAAKiqC,gBAAgBygB,EAAOpiB,EAAa,EAAA3E,iBAAiBY,QAAS,EAAAiX,SAAS0zB,QAC5ElvE,KAAKiqC,gBAAgBygB,EAAOpiB,EAAa,EAAA3E,iBAAiB9M,UAAW,EAAA2kB,SAAS0zB,QAE9ElvE,KAAK+xG,sCAAsCrnD,EAAOpiB,EAAa,EAAAkT,SAAS2zB,OAGjE,YAAAllC,gBAAR,SACCygB,EACApiB,EACA0pE,EACA9kC,GAEA,GAAKltE,KAAKyxG,+BAAV,CAIA,IADA,IAAMznE,EAAc,GACH,MAAA0gB,EAAA,eAAO,CAAnB,IAAIlnD,EAAI,KACRyuG,EAAmBjyG,KAAKyxG,+BAA+BznE,YAAY1B,EAAa9kC,GACpF,GAAIyuG,EAEH,IAAuB,UADvBA,EAAmBA,EAAiB5qF,QAAO,SAACjrB,GAAM,OAAAA,EAAE41G,iBAAmBA,KAChD,eAAkB,CAApC,IAAI7oE,EAAU,KAClBa,EAAYlvC,KAAKquC,IAKpB,GAAIa,EAAYxvC,OAAS,EAAG,CAC3B,IAAM03G,EAAa,IAAI,EAAAnuE,4BAA8CiG,GAC/D8rB,EAAmBo8C,EAAWv8C,OACpC,GAAIu8C,EAAWC,QAEd,KAAM,uBAAuBD,EAAW/mE,cAKzC,IAFA,IAAM,EAA0D,IAAI7R,IAC9D03C,EAAiC,IAAI13C,IACpB,MAAAw8B,EAAA,eAAkB,CAApC,IACE2vB,GADEt8C,EAAU,MACS3lC,KAAKykB,cAC3B+oD,EAASpuC,IAAI6iD,IACjBzU,EAAS9wE,IAAIulF,GAAS,GAEvB,EAAA/7C,SAASC,uBAAuB,EAAwB87C,EAASt8C,GAElE,IAAM,EAAmBnpC,KAAKgrE,OAAOtuE,IAAI4rC,GACzC0oC,EAASpvE,SAAQ,SAACy7B,EAAkBooD,GACnC,IAAMz7C,EAAc,EAAuBttC,IAAI+oF,GAC/C,GAAIz7C,EAAa,CAChB,IAAMooE,EAAmBpoE,EAAY,GAErC,GAAIooE,EAAkB,CACrB,IAAMpwB,EAAU,EAAAqwB,cAAcC,aAAaF,EAAiB5uG,KAAM0pE,GAClE,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAW8U,GAE7D,IAAuB,UAAAh4C,EAAA,eAAa,CAA/B,IAAIb,EAAU,KACZk9D,EAAO,EAAAgM,cAAcE,UAAUppE,EAAWk9D,KAAMn5B,GACtD,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAWm5B,GAE9D,IAAMhjB,EAAY,EAAAgvB,cAAcG,oBAAoBtlC,GACpD,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAWmW,WAMlE,YAAA0uB,sCAAA,SAAsCrnD,EAAyBpiB,EAAyB4kC,GASvF,IATD,WAQKulC,GAPJ/nD,EAAQA,EAAMrjC,QAAO,SAAC7jB,GACrB,GAAI,EAAKiuG,+BAAgC,CACxC,IAAMtkC,EAAQ,EAAKskC,+BAA+B3oE,WAAWR,EAAa9kC,GAC1E,OAAO2pE,GAASA,EAAM3yE,OAAS,OAITA,OACfF,EAAI,EAAGA,EAAIm4G,EAAan4G,IAAK,CACrC,IAAMo4G,EAAUp4G,GAAKowD,EAAMlwD,OAAS,EACpCwF,KAAK2yG,qCAAqCjoD,EAAMpwD,GAAIguC,EAAa4kC,EAAWwlC,KAG9E,YAAAC,qCAAA,SACCnvG,EACA8kC,EACA4kC,EACAwlC,GAEA,GAAK1yG,KAAKyxG,+BAAV,CAGA,IAAMtkC,EAAQntE,KAAKyxG,+BAA+B3oE,WAAWR,EAAa9kC,GAE1E,GAAI2pE,GAASA,EAAM3yE,OAAS,EAAG,CAC9B,IAAM,EAAmBwF,KAAKgrE,OAAOtuE,IAAI4rC,GACnC05C,EAAU,EAAAqwB,cAAcC,aAAa9uG,EAAM0pE,GAMjD,GALA,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAW8U,GAC7D,UAAY7U,GAAOvrE,SAAQ,SAACykG,GAC3BA,EAAO,EAAAgM,cAAcE,UAAUlM,EAAMn5B,GACrC,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAWm5B,MAExDn5B,GAAa,EAAA1xB,SAAS2zB,OAAQujC,EAAU,CAC7C,IAAMrvB,EAAY,EAAAgvB,cAAcG,oBAAoBtlC,GACpD,EAAAxjC,SAASC,uBAAuB,EAAkBujC,EAAWmW,OAIjE,EAxQA,GAAa,EAAA3W,e,8ECbb,aAGA,aAEC,WAAoBkmC,EAAqCC,GAArC,KAAAD,gBAAqC,KAAAC,uBADjD,KAAAC,iCAAqE,IAAIx5E,IAEhF,IAAwB,UAAAt5B,KAAK4yG,cAAL,eAAoB,CAAvC,IAAItqE,EAAW,KACnBtoC,KAAK8yG,iCAAiC5yG,IAAIooC,EAAa,IAAI,EAAAyqE,gBAAgBzqE,KAgD9E,OA5CC,sBAAI,2BAAY,C,IAAhB,WACC,OAAOtoC,KAAK4yG,e,gCAGb,YAAAjB,wBAAA,SAAwBrpE,GACvBtoC,KAAK6yG,qBAAuBvqE,GAE7B,sBAAI,kCAAmB,C,IAAvB,WACC,OAAOtoC,KAAK6yG,sB,gCAGb,YAAA5oE,gBAAA,SAAgBzmC,EAAsBwmC,EAAiC1B,GACtE,GAA0B,GAAtB0B,EAAYxvC,OAAhB,CAGA8tC,EAAcA,GAAetoC,KAAK6yG,qBAClC,IAAMG,EAAmBhzG,KAAK8yG,iCAAiCp2G,IAAI4rC,GAC/D0qE,GACHA,EAAiB/oE,gBAAgBzmC,EAAMwmC,KAGzC,YAAAA,YAAA,SAAY1B,EAAyB9kC,GACpC,IAAMwvG,EAAmBhzG,KAAK8yG,iCAAiCp2G,IAAI4rC,GACnE,GAAI0qE,EACH,OAAOA,EAAiBhpE,YAAYxmC,IAItC,YAAA4kC,eAAA,SAAe5kC,EAAsB2pE,EAAiB7kC,GACrD,GAAoB,GAAhB6kC,EAAM3yE,OAAV,CAGA8tC,EAAcA,GAAetoC,KAAK6yG,qBAClC,IAAMG,EAAmBhzG,KAAK8yG,iCAAiCp2G,IAAI4rC,GAC/D0qE,GACHA,EAAiB5qE,eAAe5kC,EAAM2pE,KAGxC,YAAArkC,WAAA,SAAWR,EAAyB9kC,GACnC,IAAMwvG,EAAmBhzG,KAAK8yG,iCAAiCp2G,IAAI4rC,GACnE,GAAI0qE,EACH,OAAOA,EAAiBlqE,WAAWtlC,IAGtC,EApDA,GAAa,EAAAkuG,+B,8ECFb,aAEA,aAIC,WAAoBlhC,GAAA,KAAAA,eAHZ,KAAAyiC,wBAA2D,IAAI35E,IAC/D,KAAA45E,uBAAgD,IAAI55E,IAyB7D,OArBC,sBAAI,0BAAW,C,IAAf,WACC,OAAOt5B,KAAKwwE,c,gCAGb,YAAAvmC,gBAAA,SAAgBzmC,EAAsBwmC,GACrC,IAAuB,UAAAA,EAAA,eAAa,CAA/B,IAAIb,EAAU,KAClB,EAAAO,SAASC,uBAAuB3pC,KAAKizG,wBAAyBzvG,EAAKykB,cAAekhB,KAGpF,YAAAa,YAAA,SAAYxmC,GACX,OAAOxD,KAAKizG,wBAAwBv2G,IAAI8G,EAAKykB,gBAG9C,YAAAmgB,eAAA,SAAe5kC,EAAsB2pE,GACpC,IAAiB,UAAAA,EAAA,eAAO,CAAnB,IAAIk5B,EAAI,KACZ,EAAA38D,SAASC,uBAAuB3pC,KAAKkzG,uBAAwB1vG,EAAKykB,cAAeo+E,KAGnF,YAAAv9D,WAAA,SAAWtlC,GACV,OAAOxD,KAAKkzG,uBAAuBx2G,IAAI8G,EAAKykB,gBAE9C,EA3BA,GAAa,EAAA8qF,mB,sFCJb,aAEMI,IAAa,MACjB,EAAA33D,SAASwzB,sBAAuB,GACjC,EAAC,EAAAxzB,SAAS0zB,QAAS,IACnB,EAAC,EAAA1zB,SAAS2zB,MAAO,I,GAGZikC,IAAa,MACjB,EAAA53D,SAASwzB,sBAAuB,GACjC,EAAC,EAAAxzB,SAAS0zB,QAAS,GACnB,EAAC,EAAA1zB,SAAS2zB,MAAO,K,GAGlB,2BAsBA,OArBQ,EAAAmjC,aAAP,SAAoB9uG,EAAsB0pE,GACzC,IAAIm5B,EAAO,MAAM7iG,EAAK0T,YAItB,OAHIg2D,GAAa,EAAA1xB,SAAS2zB,OACzBk3B,EAAO,KAAIA,GAELA,GAED,EAAAkM,UAAP,SAAiBlM,EAAcn5B,GAC9B,IAAImmC,GAAa,EAIjB,OAH2B,GAAvBhN,EAAK/hG,QAAQ,QAAyC,GAA1B+hG,EAAK/hG,QAAQ,YAC5C+uG,GAAa,GAEVA,EACI,GAAGD,EAAclmC,GAAam5B,EAAO8M,EAAcjmC,GAEnD,GAAGkmC,EAAclmC,GAAam5B,GAGhC,EAAAmM,oBAAP,SAA2BtlC,GAC1B,OAAOA,GAAa,EAAA1xB,SAAS2zB,KAAO,KAAM,IAE5C,EAtBA,GAAa,EAAAkjC,iB,8ECZb,mBAAsB,EAAApiC,kB,yFCHtB,QACA,QACA,QACA,OACA,OAEA,SACA,QAEMpF,EAAiD,IAAIvxC,IAAI,CAC9D,CAAC,EAAAlQ,WAAWxjB,OAAQ,2BACpB,CAAC,EAAAwjB,WAAW2f,SAAU,sCAGvB,2B,+CAgCA,OAhCuD,iBAGtD,sBAAI,+BAAgB,C,IAApB,WACC,IAAM+iC,EAAW,EAAAgkC,UAAUwD,aAC3B,MAAO,CACN/nC,aAAcO,EAASP,aACvBC,eAAgBM,EAASN,eACzBx2B,SAAU82B,EAAS92B,W,gCAGX,YAAA65B,kBAAV,SAA4BvmC,GAC3B,OAAOuiC,EAAsBnuE,IAAI4rC,IAGlC,YAAAqjC,iBAAA,WACC,IAAMqkC,EAAkBhwG,KAAKsrE,iBAC7B,OAAO,IAAI,EAAA2kC,eAAe,CAMzBsD,QAAS,CACRC,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtD1+D,SAAU,EAAAo3B,cAActpE,MAAMktG,EAAgBh7D,UAC9Cu2B,aAAcykC,EAAgBzkC,aAC9BC,eAAgBwkC,EAAgBxkC,kBAGnC,EAhCA,CAAuD,EAAArhC,uBAA1C,EAAAmmE,qC,yFCdb,QACA,QACA,QACA,OACA,OAEA,SACA,QAEMzlC,EAAiD,IAAIvxC,IAAI,CAC9D,CAAC,EAAAlQ,WAAWxjB,OAAQ,2BACpB,CAAC,EAAAwjB,WAAW2f,SAAU,sCAGvB,2B,+CAgCA,OAhCoD,iBAGnD,sBAAI,+BAAgB,C,IAApB,WACC,IAAM+iC,EAAW,EAAAgkC,UAAUn/B,MAC3B,MAAO,CACNpF,aAAcO,EAASP,aACvBC,eAAgBM,EAASN,eACzBx2B,SAAU82B,EAAS92B,W,gCAGX,YAAA65B,kBAAV,SAA4BvmC,GAC3B,OAAOuiC,EAAsBnuE,IAAI4rC,IAGlC,YAAAqjC,iBAAA,WACC,IAAMqkC,EAAkBhwG,KAAKsrE,iBAC7B,OAAO,IAAI,EAAA2kC,eAAe,CAMzBsD,QAAS,CACRC,cAAe,CAAC,EAAAC,iBAAkB,EAAAC,mBAAmB,IAGtD1+D,SAAU,EAAAo3B,cAActpE,MAAMktG,EAAgBh7D,UAC9Cu2B,aAAcykC,EAAgBzkC,aAC9BC,eAAgBwkC,EAAgBxkC,kBAGnC,EAhCA,CAAoD,EAAArhC,uBAAvC,EAAAqmE,kC,yFCdb,QACA,QAKA,SAEA,4BACA,4BACA,QAEM5lC,EAAmD,IAAItxC,IAAI,CAAC,CAAC,EAAAlQ,WAAWxjB,OAAQ,uBAChFilE,EAAiD,IAAIvxC,IAAI,CAAC,CAAC,EAAAlQ,WAAWxjB,OAAQ,oBAGpF,2B,+CAgCA,OAhCuD,iBAGtD,sBAAI,+BAAgB,C,IAApB,WACC,MAAO,CACN2lE,aAAc,UACdC,eAAgB,UAChBx2B,SAAU,CACT2+D,MAAO,CAAC72G,MAAO,GACf82G,KAAM,CAAC92G,MAAO,O,gCAIP,YAAA8xE,oBAAV,SAA8BtmC,GAC7B,OAAOsiC,EAAwBluE,IAAI4rC,IAE1B,YAAAumC,kBAAV,SAA4BvmC,GAC3B,OAAOuiC,EAAsBnuE,IAAI4rC,IAGlC,YAAAqjC,iBAAA,WACC,IAAMqkC,EAAkBhwG,KAAKsrE,iBAC7B,OAAO,IAAI,EAAA2kC,eAAe,CAKzBj7D,SAAU,EAAAo3B,cAActpE,MAAMktG,EAAgBh7D,UAC9Cu2B,aAAcykC,EAAgBzkC,aAC9BC,eAAgBwkC,EAAgBxkC,kBAGnC,EAhCA,CAAuD,EAAArhC,uBAA1C,EAAAumE,qC,6BChBb,OAAe,kM,6BCAf,OAAe,4N,yFCAf,QAGA,QASA,SAEA,2B,+CAqDA,OAlDU,iBAQT,YAAAxyF,gBAAA,W,MACOhb,EAAW,IAAI,EAAA+sG,eAQrB,OANA/sG,EAAS6jC,mBAAgB,MACvB,EAAAlB,mBAAmB0qE,OAAQ,IAAI,EAAAN,eAChC,EAAC,EAAApqE,mBAAmB4qE,WAAY,IAAI,EAAAR,eACpC,EAAC,EAAApqE,mBAAmBwqE,UAAW,IAAI,EAAAJ,e,GAG7B/sG,GAOR,sBAAI,mCAAoB,C,IAAxB,WACC,OAAQlD,KAAK6zG,sBAAwB7zG,KAAK6zG,uBAAyB7zG,KAAKyvG,gC,gCAIzE,YAAA7zF,YAAA,SAA+C9d,GAC9C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAiDle,GAChD,OAAO,YAAMke,cAAa,UAACle,IAQtB,YAAA6xG,oBAAN,W,gGACK3vG,KAAK63B,qBAAqBm7C,oBAC7BhzE,KAAK4vG,W,WAIR,EArDA,CAGU,EAAAxxF,cAHY,EAAAyxF,uB,8ECbtB,aAGA,SAkCA,aAEC,WAAsBvtF,GAAA,KAAAA,QAyJvB,OAvJC,YAAAtoB,KAAA,W,YACMgG,KAAK8zG,WACT9zG,KAAKsiB,MAAMnf,MAAMsqC,iBAAiBmxC,gCAAgC5+E,KAAKsiB,OAExEtiB,KAAKwtC,MAAQ,CACZ1vC,KAAMkC,KAAKsiB,MAAMxkB,MAQlB,IAAM8vC,EAAa5tC,KAAK4tC,aACxB,GAAInzC,OAAO6R,KAAKshC,GAAYpzC,OAAS,EAAG,CACvCwF,KAAKwtC,MAAa,MAAII,EAGtB,IAAMpR,EAAwC,QAAjC,EAAGx8B,KAAKsiB,MAAMzG,2BAAmB,eAAE2gB,QAC5CA,IACHx8B,KAAKwtC,MAAwB,iBAAIhR,GAuBnC,GAnBKx8B,KAAK8zG,YACT9zG,KAAKwtC,MAAc,OAAIxtC,KAAK2zE,cAE5B3zE,KAAKwtC,MAAc,OAAIxtC,KAAK+zG,eAIzB/zG,KAAKsiB,MAAM7iB,QACdO,KAAKwtC,MAAa,MAAI,GAClBxtC,KAAKsiB,MAAM7iB,MAAMkpB,eACO,QAA3B,EAAI3oB,KAAKsiB,MAAM7iB,MAAMspB,cAAM,eAAE3oB,UAC5BJ,KAAKwtC,MAAa,MAAU,OAAIxtC,KAAKsiB,MAAM7iB,MAAMspB,OAAO3oB,QAGtDJ,KAAKsiB,MAAM7iB,MAAMipB,gBACpB1oB,KAAKwtC,MAAa,MAAW,QAA4B,QAA3B,EAAGxtC,KAAKsiB,MAAM7iB,MAAMQ,eAAO,eAAEG,SAIzDJ,KAAKsiB,MAAMlJ,mBAAoB,CAClC,IAAMovC,EAA0C,QAAjC,EAAGxoD,KAAKsiB,MAAMzG,2BAAmB,eAAE2sC,UAClD,GAAIA,GAAaxoD,KAAKsiB,MAAMvG,WAAWvhB,OAAS,EAAG,CAIlD,IAFA,IAAMw5G,EAAoC,GACpCC,EAAoC,GAChB,MAAAzrD,EAAUkC,QAAV,eAAmB,CAC5CupD,EADqB,KACMhsF,gBAAiB,EAE7C,IAAkB,UAAAjoB,KAAKsiB,MAAMvG,WAAX,eAAuB,CAApC,IAAIs+C,EAAK,KACTA,EAAMpyC,iBAAiBgsF,GAC1BD,EAAkBl5G,KAAKu/D,GAGzBr6D,KAAKwtC,MAAiB,UAAIwmE,EAAkB3pG,KAAI,SAAC/M,GAAM,OAAAA,EAAEjB,SAK3D,GAAI2D,KAAKsiB,MAAM9hB,GAAGiX,OAAOmjF,kCAAmC,CAC3D,IAAMsZ,EAAWl0G,KAAKsiB,MAAM9hB,GAAGiX,OAAO6wC,0BAClC4rD,IACHl0G,KAAKwtC,MAA+B,wBAAI0mE,GAO1C,OAFAl0G,KAAKm0G,aAEEn0G,KAAKwtC,OAGb,YAAAhW,QAAA,WACC,IAAMx9B,EAA+B,GACrC,IAAKgG,KAAK8zG,UAAW,CACpB,IAAMt8E,EAAUx3B,KAAKsiB,MAAMkV,QAC3Bx9B,EAAU,IAAIw9B,EAAQ/nB,SAAS6b,UAC/B,IAAM02D,EAAUxqD,EAAQwqD,QACpBA,IACHhoF,EAAc,QAAI,EAAAu0C,kBAAkBD,gBAAgB0zC,IAGtD,IAAMjmE,EAAW/b,KAAKsiB,MAAMvG,WAS5B,OARIA,EAASvhB,OAAS,IACrBR,EAAY,MAAI,GAChB+hB,EAASna,SAAQ,SAACy4D,GACjB,IAAM+5C,EAAgB,EAAA7mE,qBAAqBV,cAAcwtB,GACzDrgE,EAAY,MAAEqgE,EAAMh+D,MAAQ+3G,EAAc58E,cAIrCx9B,GAGA,YAAA85G,QAAR,WACC,OAA6B,OAAtB9zG,KAAKsiB,MAAMjiB,QAAmBL,KAAKsiB,MAAM2F,eAAiBjoB,KAAKsiB,MAAMnH,KAAK8M,eAGxE,YAAA8rF,YAAV,sBACO/5G,EAAoB,GAmB1B,OAjBAgG,KAAKsiB,MAAM9hB,GAAGiX,OAAOA,SAAS7V,SAAQ,SAACgW,EAAO6Y,GAE7C,GAAI7Y,EAAO,CAEV,IAAMsgB,EAAa,EAAK5V,MAAM9hB,GAAG82B,YAAYa,iBAAiB1H,GAC9D,GAAI,EAAKnO,MAAM9hB,GAAGiX,OAAOwiF,iBAAkB,CAC1C,IAAM7yD,EAAa,EAAK9kB,MAAM9hB,GAAGiX,OAAOmiB,8BAA8BnJ,GAAap0B,KAE7Ei8B,EAAeJ,EAAWI,aAC1BF,EAAcxgB,EAAMpX,GAAGC,QAAQ43B,+BAA+BC,GAAcj8B,KAClFrC,EAAKc,KAAK,CAACuB,KAAM+qC,EAAY5jC,KAAMoU,EAAMvb,KAAMw2E,OAAQz6C,SAEvDp+B,EAAKc,KAAK8c,EAAMvb,UAKZrC,GAGE,YAAA25E,YAAV,WAGC,IAFA,IAAM35E,EAAqD,GAEpC,MAAAgG,KAAKsiB,MAAMG,OAAOsW,MAAlB,eAAyB,CAA3C,IAAIrS,EAAU,KACZrQ,EAAQrW,KAAKsiB,MAAMG,OAAO/lB,IAAIgqB,GACpC,GAAIrQ,IAAUA,EAAMmM,aAAc,CACjC,IAAMixD,EAAiB,EAAAlmC,qBAAqBR,eAAe12B,GAC3D,GAAIo9D,EAAeC,SAAU,CAC5B,IAAMC,EAAcF,EAAez5E,OACnCA,EAAKqc,EAAMha,MAAQs3E,IAKtB,OAAO35E,GAGE,YAAA4zC,WAAV,WAEC,IADA,IAAM5zC,EAAyC,GAC7B,MAAAgG,KAAKsiB,MAAMvG,WAAX,eAAuB,CAApC,IAAIs+C,EAAK,KACP+5C,EAAgB,EAAA7mE,qBAAqBV,cAAcwtB,GACzDrgE,EAAKqgE,EAAMh+D,MAAQ+3G,EAAcp6G,OAElC,OAAOA,GAGE,YAAAm6G,WAAV,aACD,EA3JA,GAAa,EAAArnE,oB,yFCtCb,SAGA,SAEA,2B,+CAaA,OAb+C,iBAC9C,YAAAtR,SAAA,W,MACO64E,EAA+C,GAC/CjxF,EAAkBpjB,KAAK86B,OAAO1X,gBAQpC,OAPsB,QAAtB,EAAApjB,KAAK86B,OAAOnY,kBAAU,SAAE/gB,SAAQ,SAACyyB,EAAW/5B,GAC3C,IAAMg6G,EAAW,EAAA/mE,qBAAqBR,eAAe1Y,GACjDigF,EAAS5gC,WACZ2gC,EAAgBjxF,EAAgB9oB,IAAMg6G,EAASt6G,WAI1Cq6G,GAET,EAbA,CAA+C,EAAAr4E,mBAAlC,EAAAgR,6B,yFCDb,2B,+CAaA,OAb8C,iBAC7C,YAAAxR,SAAA,WAKC,IAAIx7B,KAAKm7B,wBAGR,OAAOn7B,KAAK86B,OAAOQ,qBAFnBt7B,KAAK+6B,cAAyB,UAAI/6B,KAAK86B,OAAOQ,sBAMjD,EAbA,CAJA,OAI8CU,mBAAjC,EAAAiR,4B,yFCJb,SAEA,SAEA,2B,+CAYA,OAZmD,iBAClD,YAAAzR,SAAA,WACC,IAAI1yB,EAAM9I,KAAK86B,OAAOxZ,UAItB,GAFAxY,EAAM,EAAAylC,kBAAkBD,gBAAgBxlC,IAEpC9I,KAAKm7B,wBAGR,OAAOryB,EAFP9I,KAAK+6B,cAAyB,UAAIjyB,GAKrC,EAZA,CAAmD,EAAAkzB,mBAAtC,EAAAmR,iC,yFCHb,SACA,SAGA,2B,+CAaA,OAb6C,iBAC5C,YAAA3R,SAAA,WAEC,IAAI1yB,EAAM9I,KAAK86B,OAAOxZ,UAItB,GAFAxY,EAAM,EAAAylC,kBAAkBD,gBAAgBxlC,IAEpC9I,KAAKm7B,wBAGR,OAAOryB,EAFP9I,KAAK+6B,cAAyB,UAAIjyB,GAKrC,EAbA,CAA6C,EAAAkzB,mBAAhC,EAAAqR,2B,yFCFb,2B,+CAQA,OAR2C,iBAC1C,YAAA7R,SAAA,WACC,IAAIx7B,KAAKm7B,wBAGR,OAAOn7B,KAAK86B,OAAOQ,qBAFnBt7B,KAAK+6B,cAAyB,UAAI/6B,KAAK86B,OAAOQ,sBAKjD,EARA,CAHA,OAG2CU,mBAA9B,EAAAsR,yB,yFCHb,OACA,SACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SAIMxM,EAAe,IAHrB,yB,+CAEG,OAFsC,iBAEtC,EAFH,CAAyC,EAAAyL,2BACxC,EAAAV,sBAAsB,EAAAJ,oBAAoB,EAAArG,gBAAgB,EAAAX,iBAAiB,EAAAtlC,wBAI5E,yE,OACC,EAAA0iC,cAAgBf,EAaP,EAAAuL,uBAA+C,IAAI,EAAAL,qBAAqB,GACxE,EAAAY,6BAA0D,IAAI,EAAAH,0BAA0B,G,EAgBlG,OA/BwC,iBAEhC,EAAA3uC,KAAP,WACC,MAAO,gBAGR,YAAAogB,gBAAA,WACC,OAAO,IAAI,EAAAjZ,oBAAoB,CAC9BE,aAAc,EAAAC,SACdP,KAAM,EAAAC,UACNF,MAAO,SACP+/B,QAAS,KAKX,YAAA/pB,gBAAA,sBACC5a,KAAKyiB,OAAOkV,6BAA4B,WACvC,EAAK0U,uBAAuBzxB,kBAC5B,EAAKgyB,6BAA6BhyB,sBAG9B,YAAAU,KAAN,W,gGACC,EAAA6pB,iBAAiB1gB,OAAOzkB,MACxB,EAAA4lC,eAAenhB,OAAOzkB,MACtB,EAAA4rC,mBAAmBnnB,OAAOzkB,MAC1BA,KAAKqsC,uBAAuB5nB,SAC5BzkB,KAAK4sC,6BAA6BnoB,SAElCzkB,KAAKme,aAAane,KAAKkD,U,WAEzB,EA/BA,CAAwC,EAAAkb,cAA3B,EAAAixF,sB,yFChBb,OACA,SACA,OACA,QAEA,OACA,SACA,SACA,SACA,SACA,SACA,SAmBMvuE,EAAe,IAlBrB,uE,OAKC,EAAA/7B,UAAY,EAAA7F,YAAYZ,MAAM,GAC9B,EAAA0G,UAAY,EAAA9F,YAAYZ,MAAM,G,EAC/B,OAP0C,iBAO1C,EAPA,CAA0C,EAAAi2G,yBACzC,EAAAhoE,2BACC,EAAAV,sBAAsB,EAAAJ,oBAAoB,EAAArG,gBAAgB,EAAAX,iBAAiB,EAAAtlC,yBAkB7E,yE,OACC,EAAA0iC,cAAgBf,EAgBP,EAAAuL,uBAA+C,IAAI,EAAAL,qBAAqB,GACxE,EAAAY,6BAA0D,IAAI,EAAAH,0BAA0B,GACxF,EAAA+nE,2BAAsD,IAAI,EAAAC,wBAAwB,G,EAyB5F,OA5CyC,iBAEjC,EAAA32G,KAAP,WACC,MAAO,iBAGR,YAAAogB,gBAAA,WACC,OAAO,IAAI,EAAAvZ,qBAAqB,CAC/BQ,aAAc,EAAAC,SACdP,KAAM,EAAAC,UACNF,MAAO,SACP+/B,QAAS,EACT5/B,UAAW,EACXC,UAAW,KAOb,YAAA4V,gBAAA,sBACC5a,KAAKyiB,OAAOkV,6BAA4B,WACvC,EAAK0U,uBAAuBzxB,kBAC5B,EAAKgyB,6BAA6BhyB,kBAClC,EAAK45F,2BAA2B55F,sBAI5B,YAAAU,KAAN,W,gGACC,EAAA6pB,iBAAiB1gB,OAAOzkB,MACxB,EAAA4lC,eAAenhB,OAAOzkB,MACtB,EAAA4rC,mBAAmBnnB,OAAOzkB,MAC1BA,KAAKqsC,uBAAuB5nB,SAC5BzkB,KAAK4sC,6BAA6BnoB,SAClCzkB,KAAKw0G,2BAA2B/vF,SAE5BzkB,KAAKie,YACRje,KAAKie,UAAUy2F,gBAAkB10G,KAAKyY,GAAGk8F,kBACzC30G,KAAKie,UAAUjZ,UAAYhF,KAAKyY,GAAGzT,UACnChF,KAAKie,UAAUlZ,UAAY/E,KAAKyY,GAAG1T,WAGpC/E,KAAKme,aAAane,KAAKkD,U,WAEzB,EA5CA,CAAyC,EAAAkb,cAA5B,EAAAkxF,uB,yFC/Bb,QAEA,SACA,QAEA,OAGA,SACA,SAAgBiF,EAAoD7wF,GACnE,mBAAO,2D,OACN,EAAAkxF,YAAc,EAAA11G,YAAYd,QAAQ,EAAG,EAAA2tC,oBAAoB0oE,IACzD,EAAArS,QAAU,EAAAljG,YAAYT,cACrB,EAAA4iC,YAAYmC,kBAAkBE,QAC9B,EAAAuI,oBAAoBwoE,EAAyB,gBAE9C,EAAAE,kBAAoB,EAAAz1G,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACw4E,YAAa,K,EACrE,OAP2B,iBAO3B,EAPA,CAA2BlxF,GAD5B,6BAUA,+B,+CAEA,OAFiC,iBAEjC,EAFA,CAAiC,EAAArF,UAejC,GAZA,yB,+CAAwC,iBAAxC,CAAwCk2F,EAAyB,EAAAp1G,mBACjE,yB,+CAAmC,iBAElC,YAAA+e,gBAAA,WACC,OAAO,IAAI22F,GAHb,CAAmC,EAAAz2F,cAWnC,YACC,WAAsB5a,GAAtB,MACC,YAAMA,IAAK,K,OADU,EAAAA,O,EA8DvB,OA/D6C,iBAI5C,YAAAoX,gBAAA,WACC5a,KAAKmsC,UAAUnsC,KAAKwD,KAAK/F,EAAEm3G,YAAa50G,KAAKwD,KAAK/F,EAAE2kG,UAE/C,YAAA39E,OAAN,W,gGACCzkB,KAAKosC,gBAAgBpsC,KAAKwD,KAAKN,SAAU,SAAUlD,KAAKwD,KAAK/F,EAAEm3G,YAAa50G,KAAKwD,KAAK/F,EAAE2kG,S,WAE5E,EAAA39E,OAAb,SAAoBjhB,G,gGACnBA,EAAKgxG,2BAA2B/vF,S,WAoDlC,EA/DA,CAA6C,EAAA6nB,2BAAhC,EAAAmoE,2B,yFCnCb,OACA,QACA,OACA,QAEA,SACA,SAIA,OACA,SAAgBK,EAA6CpxF,GAC5D,mBAAO,2D,OACN,EAAAle,KAAO,EAAAtG,YAAYZ,MAAM,GACzB,EAAAy2G,iBAAmB,EAAA71G,YAAYd,QAAQ,G,EACxC,OAH2B,iBAG3B,EAHA,CAA2BslB,GAD5B,sBAOA,IACMod,EAAe,IADrB,yB,+CAA4G,OAAxE,iBAAwE,EAA5G,CAAoC,EAAAsE,gBAAgB,EAAAX,iBAAiBqwE,EAAkB,EAAA31G,sBAGvF,yE,OACC,EAAA0iC,cAAgBf,E,EAyBjB,OA1BmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,UAGR,YAAAogB,gBAAA,WACC,OAAO,IAAI,EAAA3Y,eAAe,CACzBJ,aAAc,EAAAC,SACdP,KAAM,EAAAC,UACNF,MAAO,SACP+/B,QAAS,KAIL,YAAArpB,KAAN,W,gGACC,EAAA6pB,iBAAiB1gB,OAAOzkB,MACxB,EAAA4lC,eAAenhB,OAAOzkB,MAItBA,KAAKkD,SAASsC,KAAOxF,KAAKyY,GAAGjT,KAC7BxF,KAAKkD,SAAS8xG,gBAAkBh1G,KAAKyY,GAAGs8F,iBAExC/0G,KAAKme,aAAane,KAAKkD,U,WAEzB,EA1BA,CAAmC,EAAAkb,cAAtB,EAAAmxF,iB,8ECrBb,aAEA,SACA,SACA,SACA,SACA,SACA,SAEA,SACA,SACA,SACA,SAEA,SACA,SACA,SAEA,SACA,SAsBA,2BAuBA,OAtBQ,EAAA9N,IAAP,SAAWM,GACVA,EAAK7uF,cAAc,EAAA+hG,oBAAqB,EAAA3/E,aAAaC,OACrDwsE,EAAK7uF,cAAc,EAAAgiG,iBAAkB,EAAA5/E,aAAaC,OAClDwsE,EAAK7uF,cAAc,EAAAiiG,wBAAyB,EAAA7/E,aAAaC,OACzDwsE,EAAK7uF,cAAc,EAAAkiG,uBAAwB,EAAA9/E,aAAaC,OACxDwsE,EAAK7uF,cAAc,EAAAmiG,kBAAmB,EAAA//E,aAAaC,OACnDwsE,EAAK7uF,cAAc,EAAAoiG,iBAAkB,EAAAhgF,aAAaC,OAElDwsE,EAAK7uF,cAAc,EAAAqiG,cAAe,EAAAjgF,aAAa5W,SAC/CqjF,EAAK7uF,cAAc,EAAAsiG,iBAAkB,EAAAlgF,aAAa5W,SAClDqjF,EAAK7uF,cAAc,EAAAuiG,WAAY,EAAAngF,aAAa5W,SAC5CqjF,EAAK7uF,cAAc,EAAAwiG,mBAAoB,EAAApgF,aAAa5W,SAEpDqjF,EAAK7uF,cAAc,EAAAyiG,WAAY,EAAArgF,aAAaE,UAC5CusE,EAAK7uF,cAAc,EAAA0iG,YAAa,EAAAtgF,aAAaE,UAE7CusE,EAAK7uF,cAAc,EAAA2iG,0BAA2B,EAAAvgF,aAAaG,QAC3DssE,EAAK7uF,cAAc,EAAA4iG,yBAA0B,EAAAxgF,aAAaG,QAG1DssE,EAAK7uF,cAAc,EAAA6iG,WAAY,EAAAzgF,aAAaI,OAE9C,EAvBA,GAAa,EAAAmsE,e,yFCzCb,SACA,SAEA,OAKM/gE,EAAe,IAJrB,uE,OACC,EAAAl8B,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,G,EAC/B,OAH0C,iBAG1C,EAHA,CAA0C,EAAAa,mBAM1C,yE,OACC,EAAA0iC,cAAgBf,E,EAcjB,OAfyC,iBAGjC,EAAAhjC,KAAP,WACC,MAAO,iBAGR,YAAA69C,aAAA,WACC,OAAO,IAAI,EAAAq6D,cAGZ,YAAAxnE,oBAAA,WACCxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG7T,MAC3B5E,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,WAEjC,EAfA,CAAyC,EAAAvN,mBAA5B,EAAAumE,uB,yFCNb,2B,+CAuBA,OAvBqC,iBACpC,YAAAx5F,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IAEnB,YAAAva,WAAA,SAAW1D,GACV,OAAOyC,KAAKyb,YAAYle,IAEzB,YAAA04G,WAAA,WACC,OAAOj2G,KAAK4zB,eAEb,YAAAr2B,OAAA,WACC,OAAOyC,KAAKwb,WAYd,EAvBA,CAHA,OAGqCuY,gBAAxB,EAAAvV,mB,yFCJb,SAEA,SAEA,SACA,QAEA,OAGA,SAAgB03F,EAAgDxyF,GAC/D,mBAAO,2D,OACN,EAAA9e,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,MAC7C,EAAA7Q,MAAQ,EAAApzB,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,MACzC,EAAAs/D,OAAS,EAAAvjG,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,M,EAC3C,OAL2B,iBAK3B,EALA,CAA2Bzf,GAD5B,yBASA,IACMod,EAAe,IADrB,yB,+CAAuG,OAAhE,iBAAgE,EAAvG,CAAuCo1E,EAAqB,EAAAzyF,uBAAuB,EAAAtkB,qBAGnF,yE,OACC,EAAA0iC,cAAgBf,E,EA2CjB,OA5CsC,iBAE9B,EAAAhjC,KAAP,WACC,MAAO,cAOR,YAAA69C,aAAA,WAGC,OAFe,IAAI,EAAAw6D,cAAc,SAAU,EAAG,EAAG,IAYlD,YAAA3nE,oBAAA,WACCxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG7T,MAC3B5E,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,UAC/Bj8C,KAAKyvC,MAAMnd,MAAQtyB,KAAKyY,GAAG6Z,MAC3BtyB,KAAKyvC,MAAMgzD,OAASziG,KAAKyY,GAAGgqF,QAIvB,YAAAnnF,KAAN,W,gGAGO,EAAA86F,yBAAiCC,cACtC,EAAAD,yBAAyB3vD,OACxB,EAAA2vD,yBAAiCC,aAAc,GAGjDr2G,KAAK6jB,qBAAqBY,SAC1BzkB,KAAKwuC,sBACLxuC,KAAKyuC,uBACLzuC,KAAK0b,gBAAgBC,W,WAEvB,EA5CA,CAAsC,EAAAgzB,6BAAzB,EAAAumE,oB,yFCtBb,SACA,SAEA,OAIA,SACA,SACA,QAEA,SAAgBoB,EAAuD5yF,GACtE,mBAAO,2D,OAON,EAAA+rB,MAAQ,EAAAvwC,YAAYX,SACpB,EAAAqG,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,GAC9B,EAAAyoB,SAAW,EAAA7nB,YAAYZ,MAAM,IAAK,CAAC6kC,MAAO,CAAC,EAAG,OAE9C,EAAAozE,aAAe,EAAAr3G,YAAYd,QAAQ,GACnC,EAAAo4G,WAAa,EAAAt3G,YAAYH,QAAQ,CAAC,KAAM,OACxC,EAAA03G,YAAc,EAAAv3G,YAAYZ,MAAM,MAGhC,EAAAuwC,YAAc,EAAA3vC,YAAYd,QAAQ,GAClC,EAAA0wC,YAAc,EAAA5vC,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACyS,YAAa,K,EAC/D,OAnB2B,iBAmB3B,EAnBA,CAA2BnrB,GAD5B,gCAuBA,IACMod,EAAe,IADrB,yB,+CAAqH,OAAvE,iBAAuE,EAArH,CAA8Cw1E,EAA4B,EAAA7yF,uBAAuB,EAAAtkB,qBAGjG,yE,OAIC,EAAA0iC,cAAgBf,EAKR,EAAA41E,mBAAqB,IAAI,EAAA/mE,iBAChC,EACU,EAAAgnE,uBACV,0B,EAuDF,OAnE6C,iBAKrC,EAAA74G,KAAP,WACC,MAAO,qBAQR,YAAA8c,gBAAA,WAIC5a,KAAK02G,mBAAmB97F,mBAGzB,YAAA+gC,aAAA,WACC,IAAMlM,EAAQ,IAAI,EAAAmnE,iBAYlB,OAVAnnE,EAAM1sC,YAAa,EACnB0sC,EAAMqM,OAAO+6D,MAAQ,KACrBpnE,EAAMqM,OAAOg7D,QAAQjpG,EAAI,KACzB4hC,EAAMqM,OAAOg7D,QAAQhpG,EAAI,KACzB2hC,EAAMqM,OAAOl/B,OAAOy5C,KAAO,GAE3Br2D,KAAK+2G,eAAiBtnE,EAAMoK,OAC5B75C,KAAK+2G,eAAe16G,KAAO,kCAC3B2D,KAAKzC,OAAO+hB,IAAItf,KAAK+2G,gBAEdtnE,GAcR,YAAAjB,oBAAA,WAECxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG7T,MAC3B5E,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,UAC/Bj8C,KAAKyvC,MAAMqM,OAAOl/B,OAAO05C,IAAMt2D,KAAKyY,GAAGsO,SAEvC/mB,KAAK02G,mBAAmBjyF,UAEzB,YAAAgqB,qBAAA,WACCzuC,KAAKyvC,MAAM1sC,WAAa/C,KAAKyY,GAAG89F,aAChCv2G,KAAKyvC,MAAMqM,OAAOg7D,QAAQ7xF,KAAKjlB,KAAKyY,GAAG+9F,YAGvCx2G,KAAKyvC,MAAMqM,OAAO+6D,KAAO72G,KAAKyY,GAAGg+F,YAIjCz2G,KAAKyvC,MAAMqM,OAAOl/B,OAAOoyC,0BAE3B,EAnEA,CAA6C,EAAArgB,6BAAhC,EAAAwmE,2B,yFCpCb,QACA,QACA,QAGA,SACA,SAEA,yE,OACS,EAAA6B,QAAU,IAAI,EAAAC,KACd,EAAAC,eAAiB,IAAI,EAAAzxG,kBAAkB,CAACw/B,KAAK,I,EAkCtD,OApC4C,iBAGjC,YAAAiK,aAAV,WACC,IAAM3tC,EAAW,IAAI,EAAA8O,eAErB9O,EAASgM,aACR,WACA,IAAI,EAAAc,uBACH,EAJW,IAIG,EAJH,IAIkB,EAJlB,KAIkC,GAJlC,KAImD,GAJnD,IAImE,GAC9E,IAIFrO,KAAKg3G,QAAQz1G,SAAWA,EACxBvB,KAAKg3G,QAAQ9zG,SAAWlD,KAAKk3G,eAC7Bl3G,KAAKg3G,QAAQG,QAAkB,GAAVnuG,KAAKmiB,IAE1BnrB,KAAKzC,OAAO+hB,IAAItf,KAAKg3G,UAMtB,YAAAvyF,OAAA,WAQCzkB,KAAKyf,QAAQmE,MAAMwzF,UAAUp3G,KAAKwD,KAAKiV,GAAGq2B,aAE1C9uC,KAAKk3G,eAAetyG,MAAMqgB,KAAKjlB,KAAKwD,KAAKisC,MAAM7qC,QAEjD,EApCA,CAA4C,EAAAuqC,iBAA/B,EAAAwnE,0B,yFCTb,SACA,SACA,SAEA,OACA,SAUM71E,EAAe,IATrB,uE,OACC,EAAA2O,MAAQ,EAAAvwC,YAAYX,SACpB,EAAA84G,UAAY,EAAAn4G,YAAYb,MAAM,CAAC,GAAK,GAAK,IACzC,EAAAi5G,aAAe,EAAAp4G,YAAYb,MAAM,CAAC,GAAK,GAAK,MAC5C,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,GAC9B,EAAAmR,SAAW,EAAAvQ,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACtC,EAAA6vC,YAAc,EAAA3vC,YAAYd,QAAQ,GAClC,EAAA0wC,YAAc,EAAA5vC,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACyS,YAAa,K,EAC/D,OAR6C,iBAQ7C,EARA,CAA6C,EAAA1vC,mBAW7C,yE,OACC,EAAA0iC,cAAgBf,EAIR,EAAA41E,mBAAqB,IAAI,EAAA/mE,iBAChC,EACU,EAAA4nE,sBACV,yB,EAoBF,OA5B4C,iBAEpC,EAAAz5G,KAAP,WACC,MAAO,oBAQR,YAAA69C,aAAA,WAGC,OAFc,IAAI,EAAA67D,iBAInB,YAAA58F,gBAAA,WACC5a,KAAK02G,mBAAmB97F,mBAGzB,YAAA4zB,oBAAA,WACCxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG4+F,UAC3Br3G,KAAKyvC,MAAMgoE,YAAcz3G,KAAKyY,GAAG6+F,aACjCt3G,KAAKyvC,MAAMhgC,SAASwV,KAAKjlB,KAAKyY,GAAGhJ,UACjCzP,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,UAE/Bj8C,KAAK02G,mBAAmBjyF,UAE1B,EA5BA,CAA4C,EAAAiqB,mBAA/B,EAAA0mE,0B,yFCjBb,QACA,SACA,QACA,OAGA,QACA,OAIA,yE,OACS,EAAA9pG,UAAY,IAAI,EAAAosG,yBAAyB,GAgBzC,EAAAC,MAAQ,IAAI,EAAAxtF,WACZ,EAAAytF,kBAAoB,IAAI,EAAArpG,QAAQ,EAAG,EAAG,GACtC,EAAAspG,QAAU,IAAI,EAAA3yG,MACd,EAAA4yG,QAAU,IAAI,EAAA5yG,M,EAwBvB,OA5C2C,iBAGhC,YAAAgqC,aAAV,WACClvC,KAAKsL,UAAUysG,QAAkB,GAAV/uG,KAAKmiB,IAE5BnrB,KAAKie,UAAU9Y,aAAe,EAAA4/B,aAE9B,IAAMt1B,EAAWzP,KAAKsL,UAAUjJ,aAAa,YACvC21G,EAAS,IAAIjlF,aAA8B,EAAjBtjB,EAASC,OAEzC1P,KAAKsL,UAAUiC,aAAa,QAAS,IAAI,EAAA0qG,gBAAgBD,EAAQ,IACjEh4G,KAAKyf,QAAQle,SAAWvB,KAAKsL,UAC7BtL,KAAKyf,QAAQvc,SAAWlD,KAAKie,WAQ9B,YAAAwG,OAAA,WACC,GAAKzkB,KAAKwD,KAAKiV,GAAGhJ,SAAlB,CAIAzP,KAAKyf,QAAQhQ,SAASwV,KAAKjlB,KAAKwD,KAAKiV,GAAGhJ,UAAUyV,gBAAgB,GAClEllB,KAAK23G,MAAMzrF,mBAAmBlsB,KAAK43G,kBAAmB53G,KAAKwD,KAAKiV,GAAGhJ,UACnEzP,KAAKyf,QAAQy4F,0BAA0Bl4G,KAAK23G,OAC5C33G,KAAKyf,QAAQmE,MAAMwzF,UAAUp3G,KAAKwD,KAAKiV,GAAGq2B,aAE1C,IAAMkpE,EAASh4G,KAAKsL,UAAUjJ,aAAa,SAE3CrC,KAAK63G,QAAQ5yF,KAAKjlB,KAAKwD,KAAKisC,MAAM7qC,OAClC5E,KAAK83G,QAAQ7yF,KAAKjlB,KAAKwD,KAAKisC,MAAMgoE,aAElC,IAAK,IAAIn9G,EAAI,EAAG2B,EAAI+7G,EAAOtoG,MAAOpV,EAAI2B,EAAG3B,IAAK,CAC7C,IAAMsK,EAAQtK,EAAI2B,EAAI,EAAI+D,KAAK63G,QAAU73G,KAAK83G,QAE9CE,EAAOG,OAAO79G,EAAGsK,EAAMjI,EAAGiI,EAAMsJ,EAAGtJ,EAAMsG,GAG1C8sG,EAAOrlF,aAAc,IAEvB,EA5CA,CAHA,OAG2Cwc,iBAA9B,EAAAooE,yB,yFCXb,SACA,SAEA,SACA,QAEA,OACA,SAmBMz2E,EAAe,IAjBrB,uE,OACC,EAAA2O,MAAQ,EAAAvwC,YAAYX,SACpB,EAAAqG,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,GAC9B,EAAA85G,MAAQ,EAAAl5G,YAAYZ,MAAM,IAC1B,EAAAyoB,SAAW,EAAA7nB,YAAYZ,MAAM,KAE7B,EAAAi4G,aAAe,EAAAr3G,YAAYd,QAAQ,GACnC,EAAAo4G,WAAa,EAAAt3G,YAAYH,QAAQ,CAAC,KAAM,MAAO,CAACq9B,WAAY,CAACm6E,aAAc,KAC3E,EAAAE,YAAc,EAAAv3G,YAAYZ,MAAM,KAAO,CAAC89B,WAAY,CAACm6E,aAAc,KACnE,EAAA8B,YAAc,EAAAn5G,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACm6E,aAAc,KAC/D,EAAA+B,WAAa,EAAAp5G,YAAYZ,MAAM,IAAK,CAAC89B,WAAY,CAACm6E,aAAc,KAGhE,EAAA1nE,YAAc,EAAA3vC,YAAYd,QAAQ,GAClC,EAAA0wC,YAAc,EAAA5vC,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACyS,YAAa,K,EAC/D,OAhBwC,iBAgBxC,EAhBA,CAAwC,EAAAprB,uBAAuB,EAAAtkB,oBAmB/D,yE,OACC,EAAA0iC,cAAgBf,EAIR,EAAA41E,mBAAqB,IAAI,EAAA/mE,iBAChC,EACU,EAAA4oE,iBACV,oB,EAkCF,OA1CuC,iBAE/B,EAAAz6G,KAAP,WACC,MAAO,eAOR,YAAA8c,gBAAA,WACC5a,KAAK02G,mBAAmB97F,mBAGzB,YAAA+gC,aAAA,WACC,IAAMlM,EAAQ,IAAI,EAAA+oE,WAQlB,OANA/oE,EAAM1sC,YAAa,EACnB0sC,EAAMqM,OAAO+6D,MAAQ,KACrBpnE,EAAMqM,OAAOg7D,QAAQjpG,EAAI,KACzB4hC,EAAMqM,OAAOg7D,QAAQhpG,EAAI,KACzB2hC,EAAMqM,OAAOl/B,OAAOy5C,KAAO,GAEpB5mB,GAGR,YAAAjB,oBAAA,WACCxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG7T,MAC3B5E,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,UAC/Bj8C,KAAKyvC,MAAM2oE,MAAQp4G,KAAKyY,GAAG2/F,MAE3Bp4G,KAAKyvC,MAAM1oB,SAAW/mB,KAAKyY,GAAGsO,SAE9B/mB,KAAK02G,mBAAmBjyF,UAEzB,YAAAgqB,qBAAA,WACCzuC,KAAKyvC,MAAM1sC,WAAa/C,KAAKyY,GAAG89F,aAChCv2G,KAAKyvC,MAAMqM,OAAOg7D,QAAQ7xF,KAAKjlB,KAAKyY,GAAG+9F,YACvCx2G,KAAKyvC,MAAMqM,OAAOl/B,OAAOy5C,KAAOr2D,KAAKyY,GAAG4/F,YACxCr4G,KAAKyvC,MAAMqM,OAAOl/B,OAAO05C,IAAMt2D,KAAKyY,GAAG6/F,WACvCt4G,KAAKyvC,MAAMqM,OAAO+6D,KAAO72G,KAAKyY,GAAGg+F,aAEnC,EA1CA,CAAuC,EAAA9nE,6BAA1B,EAAA0mE,qB,yFCzBb,SAIA,2B,+CAWA,OAXsC,iBAC3B,YAAAnmE,aAAV,WAEClvC,KAAKyf,QAAQle,SAAW,IAAI,EAAAk3G,qBADf,EAC0C,EAAG,GAC1Dz4G,KAAKyf,QAAQvc,SAAWlD,KAAKie,WAG9B,YAAAwG,OAAA,WACCzkB,KAAKyf,QAAQmE,MAAMwzF,UAAUp3G,KAAKwD,KAAKiV,GAAGq2B,aAC1C9uC,KAAKie,UAAUrZ,MAAMqgB,KAAKjlB,KAAKwD,KAAKisC,MAAM7qC,QAE5C,EAXA,CAHA,OAGsCuqC,iBAAzB,EAAAopE,oB,yFCPb,SAEA,SACA,QAEA,OACA,SACA,SAsBMz3E,EAAe,IAnBrB,uE,OACC,EAAA2O,MAAQ,EAAAvwC,YAAYX,SACpB,EAAAqG,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,IACjC,EAAA49C,UAAY,EAAA/8C,YAAYZ,MAAM,GAC9B,EAAAqzD,MAAQ,EAAAzyD,YAAYZ,MAAM,GAAI,CAAC6kC,MAAO,CAAC,EAAG,OAC1C,EAAAu1E,SAAW,EAAAx5G,YAAYZ,MAAM,IAC7B,EAAA85G,MAAQ,EAAAl5G,YAAYZ,MAAM,GAAK,CAAC6kC,MAAO,CAAC,EAAG,KAC3C,EAAApc,SAAW,EAAA7nB,YAAYZ,MAAM,IAAK,CAAC6kC,MAAO,CAAC,EAAG,OAI9C,EAAAozE,aAAe,EAAAr3G,YAAYd,QAAQ,GACnC,EAAAo4G,WAAa,EAAAt3G,YAAYH,QAAQ,CAAC,KAAM,OACxC,EAAA03G,YAAc,EAAAv3G,YAAYZ,MAAM,MAGhC,EAAAuwC,YAAc,EAAA3vC,YAAYd,QAAQ,GAClC,EAAA0wC,YAAc,EAAA5vC,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACyS,YAAa,K,EAC/D,OAlBuC,iBAkBvC,EAlBA,CAAuC,EAAAprB,uBAAuB,EAAAtkB,oBAqB9D,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAA41E,mBAAqB,IAAI,EAAA/mE,iBAChC,EACU,EAAAgpE,gBACV,mB,EAmDF,OA5DsC,iBAE9B,EAAA76G,KAAP,WACC,MAAO,cAQR,YAAA8c,gBAAA,WAEC5a,KAAK02G,mBAAmB97F,mBAGzB,YAAA+gC,aAAA,WACC,IAAMlM,EAAQ,IAAI,EAAAmpE,UAYlB,OAVAnpE,EAAM1sC,YAAa,EACnB0sC,EAAMqM,OAAO+6D,MAAQ,KACrBpnE,EAAMqM,OAAOg7D,QAAQjpG,EAAI,KACzB4hC,EAAMqM,OAAOg7D,QAAQhpG,EAAI,KACzB2hC,EAAMqM,OAAOl/B,OAAOy5C,KAAO,GAE3Br2D,KAAK+2G,eAAiBtnE,EAAMoK,OAC5B75C,KAAK+2G,eAAe16G,KAAO,2BAC3B2D,KAAKzC,OAAO+hB,IAAItf,KAAK+2G,gBAEdtnE,GAcR,YAAAjB,oBAAA,WACCxuC,KAAKyvC,MAAM7qC,MAAQ5E,KAAKyY,GAAG7T,MAC3B5E,KAAKyvC,MAAMwM,UAAYj8C,KAAKyY,GAAGwjC,UAC/Bj8C,KAAKyvC,MAAMkiB,MAAQ3xD,KAAKyY,GAAGk5C,OAAS3oD,KAAKmiB,GAAK,KAC9CnrB,KAAKyvC,MAAMipE,SAAW14G,KAAKyY,GAAGigG,SAC9B14G,KAAKyvC,MAAM2oE,MAAQp4G,KAAKyY,GAAG2/F,MAC3Bp4G,KAAKyvC,MAAM1oB,SAAW/mB,KAAKyY,GAAGsO,SAE9B/mB,KAAK02G,mBAAmBjyF,UAEzB,YAAAgqB,qBAAA,WACCzuC,KAAKyvC,MAAM1sC,WAAa/C,KAAKyY,GAAG89F,aAChCv2G,KAAKyvC,MAAMqM,OAAOg7D,QAAQ7xF,KAAKjlB,KAAKyY,GAAG+9F,YAGvCx2G,KAAKyvC,MAAMqM,OAAO+6D,KAAO72G,KAAKyY,GAAGg+F,aAEnC,EA5DA,CAAsC,EAAA9nE,6BAAzB,EAAA2mE,oB,yFC5Bb,SAEA,QACA,QACA,QACA,QAEA,yE,OACS,EAAAuD,MAAQ,IAAI,EAAApyG,aACZ,EAAAywG,eAAiB,IAAI,EAAAzxG,kBAAkB,CAACw/B,KAAK,I,EA8BtD,OAhCqC,iBAG1B,YAAAiK,aAAV,WAKC,IAJA,IAAM3tC,EAAW,IAAI,EAAA8O,eAEfwiB,EAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,EAAG,GAEnGv4B,EAAI,EAAGkB,EAAI,EAAWlB,EAAJ,GAAWA,IAAKkB,IAAK,CAC/C,IAAMs9G,EAAMx+G,EADc,GACL0O,KAAKmiB,GAAK,EACzB4tF,EAAMv9G,EAFc,GAELwN,KAAKmiB,GAAK,EAE/B0H,EAAU/3B,KAAKkO,KAAK8lB,IAAIgqF,GAAK9vG,KAAKolB,IAAI0qF,GAAK,EAAG9vG,KAAK8lB,IAAIiqF,GAAK/vG,KAAKolB,IAAI2qF,GAAK,GAG3Ex3G,EAASgM,aAAa,WAAY,IAAI,EAAAc,uBAAuBwkB,EAAW,IACxE7yB,KAAK64G,MAAMt3G,SAAWA,EAEtBvB,KAAK64G,MAAM31G,SAAWlD,KAAKk3G,eAC3Bl3G,KAAK64G,MAAM1B,QAAkB,GAAVnuG,KAAKmiB,IAExBnrB,KAAKzC,OAAO+hB,IAAItf,KAAK64G,QAGtB,YAAAp0F,OAAA,WACC,IAAMu0F,GAAch5G,KAAKwD,KAAKisC,MAAM1oB,SAAW/mB,KAAKwD,KAAKisC,MAAM1oB,SAAW,KAAQ/mB,KAAKwD,KAAKiV,GAAGq2B,YACzFmqE,EAAYD,EAAahwG,KAAKspD,IAAItyD,KAAKwD,KAAKisC,MAAMkiB,OAExD3xD,KAAK64G,MAAMj1F,MAAM1jB,IAAI+4G,EAAWA,EAAWD,GAE3Ch5G,KAAKk3G,eAAetyG,MAAMqgB,KAAKjlB,KAAKwD,KAAKisC,MAAM7qC,QAEjD,EAhCA,CAAqC,EAAAuqC,iBAAxB,EAAAwpE,mB,yFCVb,SACA,QACA,QAIA,yE,OACiB,EAAAl6F,aAAuB,EAAAF,mBAAmBi4C,MAKhD,EAAAx9C,6BAA+B,EAAApZ,YAAY42D,M,EActD,OApBmC,iBAE3B,EAAA14D,KAAP,WACC,MAAO,UAIR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,QAG3B,YAAA7qC,YAAA,SAAkD9d,GACjD,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAoDle,GACnD,OAAO,YAAMke,cAAa,UAACle,IAE7B,EApBA,CAAmC,EAAA8xC,oBAAtB,EAAA2lE,iB,yFCNb,SACA,QACA,QAIA,yE,OACiB,EAAA92F,aAAuB,EAAAF,mBAAmBV,IAMhD,EAAA7E,6BAA+B,EAAApZ,YAAYie,I,EActD,OArBsC,iBAE9B,EAAA/f,KAAP,WACC,MAAO,aAKR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,QAG3B,YAAA7qC,YAAA,SAAgD9d,GAC/C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAkDle,GACjD,OAAO,YAAMke,cAAa,UAACle,IAE7B,EArBA,CAAsC,EAAA8xC,oBAAzB,EAAA4lE,oB,yFCNb,SACA,QAIA,yE,OAMW,EAAAx8F,6BAA+B,EAAApZ,YAAYi/B,I,EAetD,OArBgC,iBACxB,EAAA/gC,KAAP,WACC,MAAO,OAKR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,QAI3B,YAAA7qC,YAAA,SAAgD9d,GAC/C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAkDle,GACjD,OAAO,YAAMke,cAAa,UAACle,IAE7B,EArBA,CAAgC,EAAA8xC,oBAAnB,EAAA6lE,c,yFCLb,SACA,QAEA,yE,OAMW,EAAAz8F,6BAA+B,EAAApZ,YAAYuwC,K,EAKtD,OAXwC,iBAChC,EAAAryC,KAAP,WACC,MAAO,gBAKR,YAAA8c,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,QAG5B,EAXA,CAAwC,EAAA7W,oBAA3B,EAAA8lE,sB,yFCHb,QACA,QAMA,SACA,QAQA,QAGA,QAEA,OAIM50E,EAAe,IAHrB,uE,OACC,EAAA7gC,QAAU,EAAAf,YAAYd,QAAQ,G,EAC/B,OAFgC,iBAEhC,EAFA,CAAgC,EAAAqlB,uBAAuB,EAAAtkB,oBAKvD,yE,OACC,EAAA0iC,cAAgBf,EAIP,EAAAjd,qBAA4C,IAAI,EAAAC,oBAAoB,GACnE,EAAAjL,yBAAkD,IAAI,EAAAqgG,sBAAsB,GAItE,EAAAz5G,MAA0B,IAAI,EAAAypB,iBAAiB,GAEvD,EAAAiwF,WAAa,EAAKC,oBAehB,EAAApgG,6BAA+B,EAAApZ,YAAYC,I,EA+GtD,OA1IgC,iBAExB,EAAA/B,KAAP,WACC,MAAO,OAIR,sBAAI,sCAAuB,C,IAA3B,WACC,OAAOkC,KAAK6Y,0B,gCAKL,YAAAugG,kBAAR,WACC,OAAO,IAAI,EAAA/yG,OAEZ,sBAAI,wBAAS,C,IAAb,WACC,OAAOrG,KAAKm5G,Y,gCAEb,YAAAE,mBAAA,WACCr5G,KAAKm5G,WAAW98G,KAAU2D,KAAKkX,YAAW,cAQ3C,YAAA0D,gBAAA,W,MACyB,QAAxB,EAAA5a,KAAK6b,2BAAmB,SAAE4qC,OAE1BzmD,KAAKM,wBAAwBsa,kBAC7B5a,KAAK6jB,qBAAqBjJ,kBAK1B5a,KAAKzC,OAAO+hB,IAAItf,KAAKs5G,WAErBt5G,KAAKqa,gBAAgByD,4BAA4B9d,KAAKq5G,mBAAmBh8G,KAAK2C,OAC9EA,KAAKo5G,qBAWN,YAAA53G,cAAA,WACC,OAAO,IAAI,EAAA6E,OAUZ,YAAAkzG,qBAAA,WACMv5G,KAAKmD,MAAM8b,mBAAmBu7D,eA4BpC,YAAA56D,wBAAA,WACC,GAAI5f,KAAKP,MAAMQ,QAAQG,OAAQ,CAC9B,IAAMo5G,EAAex5G,KAAK6Y,yBAAyB2gG,aACnD,QAAOA,GAAeA,EAAa5kG,SAEnC,OAAO,GAIT,YAAA6kG,iCAAA,WACCz5G,KAAKu5G,wBAEN,YAAAG,cAAA,SAAcl2G,G,QAOTxD,KAAKmD,MAAM8b,mBAAmBs7D,QACH,GAA1Bv6E,KAAK+b,WAAWvhB,SACA,QAAnB,EAAU,QAAV,EAAAgJ,EAAK/D,aAAK,eAAEQ,eAAO,SAAEC,KAAI,KAI5B,YAAA0b,YAAA,SAAgD9d,GAC/C,OAAO,YAAM8d,YAAW,UAAC9d,IAE1B,YAAAie,SAAA,WACC,OAAO,YAAMA,SAAQ,YAEtB,YAAAC,cAAA,SAAkDle,GACjD,OAAO,YAAMke,cAAa,UAACle,IAK5B,YAAA+5D,UAAA,aAIA,YAAAv8C,KAAA,WACCtb,KAAK6jB,qBAAqBY,SAG1BzkB,KAAK0b,gBAAgBC,YAEvB,EA1IA,CAAgC,EAAAmE,cAAnB,EAAA61F,c,yFCxBb,QAEA,aAMC,WAAsBnyG,GAAA,KAAAA,OAHtB,KAAAm2G,qBAA4C,GAC5C,KAAAC,iBAA2B,EACnB,KAAAC,sCAAwC75G,KAAK85G,+BAA+Bz8G,KAAK2C,MAExFA,KAAKk1C,YAAc,IAAI,EAAA9+B,cAAc5S,EAAKL,MAAO,yBAEjDnD,KAAKk1C,YAAY7wB,iBAAiBxP,oBACjC,kCACA7U,KAAK65G,uCA+FR,OA3FC,sBAAI,2BAAY,C,IAAhB,WACC,OAAO75G,KAAK+5G,e,gCAGb,YAAAC,kBAAA,SAAkBz8G,GACjByC,KAAKi6G,eAAiB18G,GAEvB,sBAAI,4BAAa,C,IAAjB,WACC,OAAOyC,KAAKi6G,gBAAkBj6G,KAAKwD,KAAKjG,Q,gCAGzC,YAAAqd,gBAAA,sBACC5a,KAAKg6G,kBAAkBh6G,KAAKwD,KAAK81G,WACjCt5G,KAAKwD,KAAK/D,MAAMQ,QAAQE,UAAS,WAChC,EAAKqD,KAAK81G,UAAU5pE,QAAU,EAAK2wC,cAC/B,EAAK78E,KAAK/D,MAAMQ,QAAQG,QAC3B,EAAK05G,oCAIP95G,KAAKwD,KAAKo3C,UAAU4kC,uBAAsB,SAAC7pC,G,QACrC,EAAKokE,eACgB,QAAzB,EAAgB,QAAhB,EAAApkE,EAAWl2C,aAAK,eAAEQ,eAAO,SAAEC,KAAI,OAK5B,YAAAK,iBAAN,SAAuB25G,G,sGAClBl6G,KAAK+5G,eAAiBG,KACnBC,EAAmBn6G,KAAK+5G,iBAE7BI,EAAiB16G,MAAMQ,QAAQC,KAAI,GACnCF,KAAKk1C,YAAY9/B,mBAAmB+kG,GACpCn6G,KAAKo6G,mBAENp6G,KAAK+5G,cAAgBG,EACjBl6G,KAAK+5G,eACR/5G,KAAKk1C,YAAYjgC,gBAAgBjV,KAAK+5G,eAEvC/5G,KAAK85G,kC,WAIP,YAAAM,gBAAA,WAEC,IADA,IAAI//C,EACIA,EAAQr6D,KAAKogF,cAAcrkE,SAASgG,OAC3C/hB,KAAKogF,cAAc5gE,OAAO66C,IAI5B,sBAAI,4BAAa,C,IAAjB,WACC,OAAOr6D,KAAKwD,KAAK68E,eAAiBrgF,KAAKwD,KAAK/D,MAAMQ,QAAQG,QAAkC,GAAxBJ,KAAKwD,KAAKiV,GAAGxY,S,gCAGpE,YAAA65G,+BAAd,W,sIACC,OAAK95G,KAAKwD,KAAKL,MAAM8b,mBAAmBs7D,OAGpCv6E,KAAKqgF,eACJrgF,KAAK+5G,cACU,GAAM/5G,KAAK+5G,cAAc9iG,qBAFzC,MAFH,I,OAMC,GAFMlV,EAAY,SACZnB,EAAamB,EAAUC,eACb,CAIf,GAFMq4G,EAAcz5G,EAAWC,YAC3By5G,EAA4BD,EAAY7/G,QAAUwF,KAAK45G,kBAE1D,IAAK,EAAL,EAAmB,EAAAS,EAAA,gBAAV98G,EAAM,MACDgO,QAAQvL,KAAK25G,uBACzBW,GAA4B,GAK/B,GAAIA,EAA2B,CAG9B,IAFAt6G,KAAKo6G,kBACLp6G,KAAK25G,qBAAuB,GACvB,EAAL,EAAmB,EAAAU,EAAA,eAAV98G,EAAM,KACdyC,KAAKogF,cAAc9gE,IAAI/hB,GACvByC,KAAK25G,qBAAqBp8G,EAAOgO,OAAQ,EAE1CvL,KAAK45G,iBAAmBS,EAAY7/G,aAGrCwF,KAAKo6G,kBACLp6G,KAAK25G,qBAAuB,GAC5B35G,KAAK45G,iBAAmB,E,mCAK7B,EA1GA,GAAa,EAAAV,yB,yFCLb,QACA,QACA,QAEA,QACA,SAEA,OAEMp4E,EAAe,IADrB,yB,+CAA2E,OAA1C,iBAA0C,EAA3E,CAAiC,EAAArd,uBAAuB,EAAAtkB,oBAGxD,yE,OACC,EAAA0iC,cAAgBf,EAIP,EAAAjd,qBAA4C,IAAI,EAAAC,oBAAoB,GAC7D,EAAArkB,MAA0B,IAAI,EAAAypB,iBAAiB,GACvD,EAAAqmB,QAAU,IAAI,EAAAgrE,WAAW,G,EAgBlC,OAvBiC,iBAEzB,EAAAz8G,KAAP,WACC,MAAO,QAMR,YAAA0D,cAAA,WACC,OAAO,IAAI,EAAA6E,OAEZ,YAAAuU,gBAAA,sBACC5a,KAAK6jB,qBAAqBjJ,kBAC1B5a,KAAKzC,OAAO+hB,IAAItf,KAAKuvC,SACrBvvC,KAAKP,MAAMQ,QAAQE,UAAS,WAC3B,EAAKovC,QAAQG,QAAU,EAAKjwC,MAAMQ,QAAQG,WAG5C,YAAAkb,KAAA,WACCtb,KAAK6jB,qBAAqBY,SAC1BzkB,KAAK0b,gBAAgBC,YAEvB,EAvBA,CAAiC,EAAAmE,cAApB,EAAA81F,e,yFCVb,QACA,SACA,SAGM4E,EAAU,CACf51G,MAAO,IAHR,MAGYM,OAAM,EAAG,EAAG,GACvBmxD,KAAM,EACNC,IAAK,IACLmkD,QAAS,OAMV,OAEA,QAQM35E,EAAe,IAPrB,uE,OACC,EAAAl8B,MAAQ,EAAA1F,YAAYb,MAAMm8G,EAAQ51G,MAAM0mB,WACxC,EAAAovF,YAAc,EAAAx7G,YAAYd,QAAQ,GAClC,EAAAq8G,QAAU,EAAAv7G,YAAYZ,MAAM,GAC5B,EAAA+3D,KAAO,EAAAn3D,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,OACxC,EAAAmzB,IAAM,EAAAp3D,YAAYZ,MAAM,IAAK,CAAC6kC,MAAO,CAAC,EAAG,O,EAC1C,OANgC,iBAMhC,EANA,CAAgC,EAAAhkC,mBAQhC,yE,OACC,EAAA0iC,cAAgBf,EACA,EAAArhC,MAA0B,IAAI,EAAAypB,iBAAiB,GAC/C,EAAAzK,aAAuB,EAAAF,mBAAmBG,QAEhD,EAAAE,0BAAoC,E,EAsD/C,OA3DgC,iBAU/B,YAAAhE,gBAAA,WAQC5a,KAAK26G,YAAc,IAAI,EAAAC,IAAIJ,EAAQ51G,MAAMi2G,SAAUL,EAAQnkD,KAAMmkD,EAAQlkD,KACzEt2D,KAAK86G,gBAAkB,IAAI,EAAAC,QAAQP,EAAQ51G,MAAMi2G,SAAUL,EAAQC,UAE7D,EAAA38G,KAAP,WACC,MAAO,OAoBR,YAAAwd,KAAA,WACC,IAAI2pB,EACAjlC,KAAKyY,GAAGiiG,aACX16G,KAAK86G,gBAAgBL,QAAUz6G,KAAKyY,GAAGgiG,QACvCx1E,EAAMjlC,KAAK86G,kBAEX96G,KAAK26G,YAAYtkD,KAAOr2D,KAAKyY,GAAG49C,KAChCr2D,KAAK26G,YAAYrkD,IAAMt2D,KAAKyY,GAAG69C,IAC/BrxB,EAAMjlC,KAAK26G,aAGZ11E,EAAIrgC,MAAMqgB,KAAKjlB,KAAKyY,GAAG7T,OAEvB5E,KAAKmD,MAAMuuC,cAAczM,IAAMA,EAE/BjlC,KAAK0b,gBAAgBC,YAEvB,EA3DA,CAAgC,EAAAmE,cAAnB,EAAAi2F,c,yFC1Bb,QAIA,SAEA,SAGMyE,GACE,GADFA,EAEE,GAFFA,EAGA,GAHAA,GAII,GAGV,OACA,SACA,SACA,SACA,QACA,SAAgBQ,EAAiEt3F,GAChF,mBAAO,2D,OACN,EAAAle,KAAO,EAAAtG,YAAYZ,MAAM,G,EAG1B,OAJ2B,iBAI3B,EAJA,CAA2BolB,GAD5B,0CAQA,IAOMod,EAAe,IAPrB,yB,+CAMG,OAN4C,iBAM5C,EANH,CAA+C,EAAA81B,6BAC9C,EAAAC,4BACC,EAAApzC,uBACC,EAAAqzC,iBAAiBkkD,EAAsC,EAAAzkD,2BAA2B,EAAAp3D,yBAMrF,yE,OAIC,EAAA0iC,cAAgBf,E,EAoFjB,OAxF+C,iBAM9C,sBAAc,gDAAiC,C,IAA/C,WACC,OAAO,EAAAm6E,wC,gCAGD,EAAAn9G,KAAP,WACC,MAAO,uBAGR,YAAA0D,cAAA,WACC,OAAO,IAAI,EAAA05G,mBACK,EAAfV,EACgB,EAAhBA,EACc,EAAdA,EACiB,EAAjBA,EACA,EAAApkD,oBAAoBC,KACpB,EAAAD,oBAAoBE,MA2BtB,YAAAoB,cAAA,WACC13D,KAAKi4D,4BAGI,YAAAA,yBAAV,WACC,GAAIj4D,KAAKg3D,QAAS,CACjB,IAAMxxD,EAAOxF,KAAKyY,GAAGjT,MAAQ,EAavB21G,EAAkB31G,EAAOxF,KAAKg3D,QAEpCh3D,KAAKyf,QAAQy3B,KAAOsjE,EAAeW,EADtB,EAEbn7G,KAAKyf,QAAQ23B,MAAQojE,EAAgBW,EAFxB,EAGbn7G,KAAKyf,QAAQkzC,IAAM6nD,EAAch1G,EAHpB,EAIbxF,KAAKyf,QAAQmzC,OAAS4nD,EAAiBh1G,EAJ1B,EAMbxF,KAAKyf,QAAQuvC,2BAchB,EAxFA,CAA+C,EAAAqJ,oBAAlC,EAAAw9C,6B,yFCrCb,SAEA,SAIA,aAMC,WAAoBryG,GAAA,KAAAA,OALpB,KAAA43G,gCAAmE,GAC3D,KAAAC,eAAyD,KAkIlE,OA5HC,YAAAC,eAAA,WACC,OAAIt7G,KAAKwD,KAAKif,OAAOmgB,IAXK,YAYlB5iC,KAAKwD,KAAKif,OAAO/lB,IAZC,YAcnB,MAGF,YAAA6+G,cAAN,W,iIACOD,EAAiBt7G,KAAKwD,KAAK/F,EAAEq7C,UAC7Bx3B,EAAYg6F,EAAeh6F,YACH,IAAbA,EACZg6F,EAAe1mG,SAClB,GAAM0mG,EAAe15F,WADlB,MADD,M,OAEF,S,iBAGD,GADMpe,EAAO83G,EAAez9E,aAClB,CACT,GAAIr6B,aAAgB,EAAAu2C,6BACnB,MAAO,CAAP,EAAOv2C,GAEPxD,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,mDAG5BF,KAAKwD,KAAK8sB,OAAOhT,MAAMpd,IAAI,0B,iBAG7B,MAAO,CAAP,EAAO,cAGF,YAAA03D,gBAAN,W,sHACuB,SAAM53D,KAAKu7G,iB,cAA3BA,EAAgB,WAEjBv7G,KAAKq7G,gBAAkBE,GAC1Bv7G,KAAKw7G,uBAIPx7G,KAAKq7G,eAAiBE,E,YAGjB,YAAAjP,eAAN,SAAqBC,G,8HACE,SAAMvsG,KAAKu7G,iB,cAA3BA,EAAgB,WAMf/O,EAAc+O,EAAc/O,cAC9BiP,GAA0B,EAE7Bz7G,KAAKo7G,gCAAgC7O,EAAa9hG,KAClDzK,KAAKo7G,gCAAgC7O,EAAa9hG,IAAI+hG,KAEtDiP,GAA0B,GAEtBA,EAAD,OAEHz7G,KAAKo7G,gCAAgC7O,EAAa9hG,IACjDzK,KAAKo7G,gCAAgC7O,EAAa9hG,KAAO,GAC1DzK,KAAKo7G,gCAAgC7O,EAAa9hG,IAAI+hG,IAAe,EAIpD,GAAM+O,EAAcjP,eAAetsG,KAAKwD,KAAKjG,OAAQgvG,MArBpE,M,OAyBF,OAJMzzD,EAAW,SACX8nB,EAAS,IAAI,EAAA86C,qBAAqB17G,KAAKwD,KAAKykB,cAAeszF,EAAeziE,GAChFyiE,EAAc5hE,qBAAqBb,EAAU94C,KAAKwD,MAClDxD,KAAK27G,oBAAoB7iE,GAClB,CAAP,EAAO8nB,G,yBAIV,YAAA46C,qBAAA,WACCx7G,KAAKo7G,gCAAkC,IAMlC,YAAAQ,iBAAN,SAAuBrP,G,uGACfvsG,KAAKo7G,gCAAgC7O,EAAa9hG,I,WAc1D,YAAAkxG,oBAAA,SAAoB7iE,GAApB,WAWC94C,KAAK67G,wBAA0B,WAC9B,EAAKC,kBAAkBhjE,IAExB94C,KAAK+7G,sBAAwB,WAC5B,EAAKC,gBAAgBljE,IAEtBA,EAASyb,iBAAiB,QAASv0D,KAAK67G,yBACxC/iE,EAASyb,iBAAiB,MAAOv0D,KAAK+7G,wBAGvC,YAAAD,kBAAA,SAAkBhjE,KAGlB,YAAAkjE,gBAAA,SAAgBljE,GAEf,GAAIA,EAASe,OAAQ,CACpB,IAAM/wC,EAAMgwC,EAASe,OAAOvuB,UAC5BtrB,KAAKwD,KAAKif,OAAO4I,YAAY,SAAUviB,GAExC9I,KAAKwD,KAAK00D,uCAEZ,EApIA,GAAa,EAAAd,sB,8ECNb,iBACC,WACS6kD,EACAZ,EACAa,GAFA,KAAAD,kBACA,KAAAZ,iBACA,KAAAa,YAsBV,OAnBC,sBAAI,6BAAc,C,IAAlB,WACC,OAAOl8G,KAAKi8G,iB,gCAKb,sBAAI,uBAAQ,C,IAAZ,WACC,OAAOj8G,KAAKk8G,W,gCAEb,sBAAI,4BAAa,C,IAAjB,WACC,OAAOl8G,KAAKq7G,gB,gCAGb,YAAAzpF,SAAA,SAASuqF,GACR,OACCA,EAAaC,gBAAkBp8G,KAAKi8G,iBACpCE,EAAaZ,cAActzF,eAAiBjoB,KAAKq7G,eAAepzF,eAGnE,EA1BA,GAAa,EAAAyzF,wB,6BCFb,8DAOIloE,EAAa,SAAWrwC,EAAOyZ,EAAQy/F,EAAkBC,EAAY7oE,GAExE,IAAK74C,KAAMoF,MAEXA,KAAKmD,MAAQA,EACbnD,KAAK4c,OAASA,EAEd5c,KAAKq8G,iBAAmBA,EAExBr8G,KAAKs8G,WAAaA,EAClBt8G,KAAKyzC,gBAA8BpqC,IAAfoqC,EAA6BA,EAAa,EAE9DzzC,KAAKid,OAAQ,EACbjd,KAAKu8G,YAAa,EAClBv8G,KAAKgd,WAAY,GAIlBw2B,EAAW94C,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAKzC,WAAa,CAEtE0U,YAAaokC,EAEbn2B,OAAQ,SAAWI,EAAU++F,EAAaC,GAEzC,IAKIC,EAAeC,EALfC,EAAen/F,EAASo/F,UAC5Bp/F,EAASo/F,WAAY,EAErB78G,KAAKmD,MAAMk5G,iBAAmBr8G,KAAKq8G,iBAI9Br8G,KAAKs8G,aAETI,EAAgBj/F,EAASq/F,gBAAgBjC,SACzC8B,EAAgBl/F,EAASs/F,gBAEzBt/F,EAASu/F,cAAeh9G,KAAKs8G,WAAYt8G,KAAKyzC,aAI1CzzC,KAAKu8G,YAET9+F,EAAS8+F,aAIV9+F,EAASw/F,gBAAiBj9G,KAAKkd,eAAiB,KAAOu/F,GAGlDz8G,KAAKid,OAAQQ,EAASR,MAAOQ,EAASy/F,eAAgBz/F,EAAS0/F,eAAgB1/F,EAAS2/F,kBAC7F3/F,EAASJ,OAAQrd,KAAKmD,MAAOnD,KAAK4c,QAE7B5c,KAAKs8G,YAET7+F,EAASu/F,cAAeN,EAAeC,GAIxC38G,KAAKmD,MAAMk5G,iBAAmB,KAC9B5+F,EAASo/F,UAAYD,M,yFC7DvB,SAeA,cAMC,WAAY5sF,EAAmClc,EAAmB8lC,GAAlE,MACC,YAAM5pB,EAAYlc,EAAQ8lC,IAAY,K,OADQ,EAAA9lC,SAJvC,EAAAupG,WAAqB,EAErB,EAAAC,gBAA8B,EAAKC,QAAQlgH,KAAK,GAKvD,EAAKmgH,QAAU3wD,SAASo3C,cAAc,UACtC,EAAKuZ,QAAQ/yG,IAAK,aAAazB,KAAKy0G,UAAWt1G,QAAQ,IAAK,KAC5D,EAAKq1G,QAAQE,MAAMz9G,QAAU,QAC7B,EAAKu9G,QAAQE,MAAMC,QAAU,OAE7B,EAAK3tF,WAAWs0E,YAAY,EAAKkZ,SACjC,EAAKxtF,WAAW4tF,UAAUt+F,IAxBV,qBAyBhB,EAAK0Q,WAAW0tF,MAAMjb,OAAS,OAE/B,EAAKob,c,EA2HP,OA7ImC,iBAqB3B,YAAAC,OAAP,WACC99G,KAAK+9G,gBACL/9G,KAAKg+G,YAGN,YAAAxgG,QAAA,WACCxd,KAAKi+G,kBACLj+G,KAAK23D,oBAAoBikD,oBAIlB,YAAAiC,YAAR,sBACC79G,KAAKsc,kBAAkBmqC,OACvBzmD,KAAK8kF,iBAAiBr+B,OAGtB9oD,OAAOugH,SAAW,WACjB,EAAK9vE,mBAAmB+vE,cAQlB,YAAAJ,cAAR,W,MACC,GAAK/9G,KAAKw9G,QAAV,CAGAx9G,KAAKouC,mBAAmBgwE,0BACxB,IAAM54G,EAAgBxF,KAAKouC,mBAAmB5oC,KAEX,QAAnC,EAAAxF,KAAKouC,mBAAmBwL,mBAAW,SAAE6d,wBAAwB9lB,gBAAgB3xC,KAAKw9G,QAASh4G,GAwC3FxF,KAAKouC,mBAAmBiwE,yBAGxBr+G,KAAKu9G,YAGN,YAAAA,QAAA,WACKv9G,KAAKq9G,YACRr9G,KAAKqd,SAOLrd,KAAKs+G,4BAA8BC,sBAAsBv+G,KAAKs9G,mBAIxD,YAAAW,gBAAR,W,MACCj+G,KAAKq9G,WAAY,EACbr9G,KAAKs+G,6BACRE,qBAAqBx+G,KAAKs+G,6BAEvBt+G,KAAKw9G,UAC2B,QAAnC,EAAAx9G,KAAKouC,mBAAmBwL,mBAAW,SAAE6d,wBAAwB7kB,gBAAgB5yC,KAAKw9G,WAMpF,YAAAngG,OAAA,W,MACC,GAAIrd,KAAKouC,mBAAmBwL,aAAe55C,KAAKw9G,QAAS,CACxD,IAAMh4G,EAAOxF,KAAKouC,mBAAmB5oC,KAC/B+rC,EAASvxC,KAAKouC,mBAAmBmD,OACvCvxC,KAAKouC,mBAAmBwL,YAAY6d,wBAAwBp6C,OAAOrd,KAAKw9G,QAASh4G,EAAM+rC,GAG9D,QAAzB,EAAAvxC,KAAKm3D,4BAAoB,SAAE1yC,cAO3BrhB,QAAQmT,KAAK,6BAGhB,EA7IA,CAAmC,EAAAkoG,YAAtB,EAAArmD,iB,yFCVb,SACA,SACA,SACA,SAMA,aAgCC,WAAsBpoC,EAAmClc,EAAmB8lC,GAA5E,WAAsB,KAAA5pB,aAAmC,KAAAlc,SA7B/C,KAAA4qG,SAAmB,EA8B5B1+G,KAAK4lD,eAAiB5lD,KAAK8T,OAAO49B,cAClC1xC,KAAK2+G,iBAAiB/kE,GAAaxpB,MAAK,WACvC,EAAK0tF,YA0BR,OAxDC,sBAAI,qBAAM,C,IAAV,WACC,OAAO99G,KAAK0+G,S,gCAEb,YAAAV,SAAA,WACCh+G,KAAK0+G,SAAU,GAEhB,YAAAE,WAAA,WACC5+G,KAAK0+G,SAAU,GAIhB,sBAAI,iCAAkB,C,IAAtB,WACC,OAAQ1+G,KAAK6lD,oBAAsB7lD,KAAK6lD,qBAAuB,IAAI,EAAAC,kBAAkB9lD,O,gCAGtF,sBAAI,kCAAmB,C,IAAvB,WACC,OAAQA,KAAKm3D,qBAAuBn3D,KAAKm3D,sBAAwB,IAAI,EAAAC,mBAAmBp3D,O,gCAGzF,sBAAI,gCAAiB,C,IAArB,WACC,OAAQA,KAAK6mD,mBAAqB7mD,KAAK6mD,oBAAsB,IAAI,EAAAC,iBAAiB9mD,O,gCAGnF,sBAAI,+BAAgB,C,IAApB,WACC,OAAQA,KAAK0nD,kBAAoB1nD,KAAK0nD,mBAAqB,IAAI,EAAAC,gBAAgB3nD,O,gCAShF,sBAAI,wBAAS,C,IAAb,WACC,OAAOA,KAAKgwB,Y,gCAEb,sBAAI,oBAAK,C,IAAT,WACC,OAAOhwB,KAAK8T,Q,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAO9T,KAAKw9G,S,gCAGC,YAAAmB,iBAAd,SAA+B/kE,G,gHAC9B,SAAM55C,KAAKouC,mBAAmBywE,gBAAgBjlE,GAAe55C,KAAK8T,OAAOs6B,mBAAmB0wE,qB,cAA5F,S,YAMD,YAAAC,sBAAA,WACC/+G,KAAK+B,UAAU67G,UAAUp+F,OA1DA,YA4D1B,YAAAw/F,4BAAA,WACCh/G,KAAK+B,UAAU67G,UAAUt+F,IA7DA,YA+D3B,EA7DA,GAAsB,EAAAm/F,c,yFClBtB,OAGA,QAEA,aASC,WAAoBQ,GAAA,KAAAA,SAPZ,KAAAC,aAA6C,KAG7C,KAAAC,MAAiB,IAAI,EAAAruF,QAAQ,IAAK,KAClC,KAAAkmC,QAAkB,EAgI3B,OAxHO,YAAA6nD,gBAAN,SAAsBjlE,G,uHAChB55C,KAAKk/G,cAAgBtlE,EAAY3xB,eAAiBjoB,KAAKk/G,aAAaj3F,cAArE,OACHjoB,KAAKk/G,aAAetlE,EAEpB55C,KAAKo/G,qBACL,GAAMp/G,KAAKi/G,OAAOtnD,oBAAoB0nD,oB,OAAtC,S,mCAIM,YAAAD,mBAAR,WACC,GAAKp/G,KAAKk/G,aAAV,CAGA,IAAM5D,EAAiBt7G,KAAKk/G,aAAaz8F,OAAO8rE,kBAAkB,YAC7D+sB,IAGLt7G,KAAKk1C,YAAcl1C,KAAKk1C,aAAel1C,KAAKs/G,qBACvCt/G,KAAKk1C,cAGVl1C,KAAKk1C,YAAY5/B,gCACjBtV,KAAKk1C,YAAYjgC,gBAAgBqmG,OAE1B,YAAAgE,mBAAR,sBACC,GAAKt/G,KAAKk/G,aAAV,CAGA,IAAM17G,EAAO,IAAI,EAAA4S,cAAcpW,KAAKk/G,aAAa/7G,MAAO,mBAIxD,OAHAK,EAAKqR,oBAAoB,mCAAmC,0D,8DAC3D,SAAM7U,KAAKi/G,OAAOtnD,oBAAoB0nD,mB,cAAtC,S,cAEM77G,IAGR,sBAAI,0BAAW,C,IAAf,WACC,OAAOxD,KAAKk/G,c,gCAEb,sBAAI,mBAAI,C,IAAR,WACC,OAAOl/G,KAAKm/G,O,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAOn/G,KAAKg3D,S,gCAGb,YAAAmnD,UAAA,W,MACMn+G,KAAKi/G,OAAO3tE,SAGjBtxC,KAAKo+G,0BACY,QAAjB,EAAAp+G,KAAKk/G,oBAAY,SAAEznD,wBAAwBhlB,kBAAkBzyC,KAAKi/G,OAAO3tE,OAAQtxC,KAAKm/G,OACtFn/G,KAAKu/G,yBAEN,YAAAnB,wBAAA,W,MACCp+G,KAAKw/G,eACY,QAAjB,EAAAx/G,KAAKk/G,oBAAY,SAAE/7G,MAAM48F,oBAAoBwB,2CAA2CvhG,KAAKm/G,OAC7Fn/G,KAAKg3D,QAAUh3D,KAAKy/G,eAGb,YAAAD,aAAR,WACCx/G,KAAKm/G,MAAMtxG,EAAI7N,KAAKi/G,OAAOl9G,UAAU29G,YACrC1/G,KAAKm/G,MAAMrxG,EAAI9N,KAAKi/G,OAAOl9G,UAAU49G,cAE9B,YAAAF,YAAR,WACC,OAAOz/G,KAAKm/G,MAAMtxG,EAAI7N,KAAKm/G,MAAMrxG,GAGlC,YAAAyxG,qBAAA,W,MACkB,QAAjB,EAAAv/G,KAAKk/G,oBAAY,SAAEztE,uBAAuBzxC,KAAKg3D,UAW1C,YAAAqnD,uBAAN,W,uHACKr+G,KAAKk/G,aAUe,GAAMl/G,KAAKk/G,aAAajoG,qBAV5C,M,OAWH,OADuB,SACvB,GAAMjX,KAAK4/G,iC,OAAX,S,mCAOI,YAAAA,8BAAN,W,gHAkBC,OAVA5/G,KAAKu/G,uBAUL,GAAMv/G,KAAKi/G,OAAOtnD,oBAAoB0nD,mB,cAAtC,S,YAIF,EAtIA,GAAa,EAAAv5D,qB,yFCHb,aAKC,WAAoBm5D,GAAA,KAAAA,SAJV,KAAAP,SAAmB,EACnB,KAAAxC,UAAmC,KAC7C,KAAA2D,yBAAuC7/G,KAAK8/G,mBAAmBziH,KAAK2C,MACpE,KAAA+/G,uBAAqC//G,KAAKggH,iBAAiB3iH,KAAK2C,MA+EjE,OA5EC,sBAAI,qBAAM,C,IAAV,WACC,OAAOA,KAAK0+G,S,gCAEb,sBAAI,0BAAW,C,IAAf,WACC,OAAO1+G,KAAKi/G,OAAO7wE,mBAAmBwL,a,gCAEvC,sBAAI,uBAAQ,C,IAAZ,WACC,OAAO55C,KAAKk8G,W,gCAGP,YAAAmD,gBAAN,W,4HAGC,OAFAr/G,KAAK47G,mBAEA57G,KAAKi/G,OAAO3tE,OAIF,GAAsB,QAAtB,EAAMtxC,KAAK45C,mBAAW,eAAE+d,oBAAoB20C,eAAetsG,KAAKi/G,OAAO3tE,SAHrF,I,cAGKsvB,EAAS,YAGd5gE,KAAKk8G,UAAYt7C,EAAO9nB,SAGpB94C,KAAKk8G,YACJl8G,KAAKi/G,OAAO7+G,QACfJ,KAAKk8G,UAAU3nD,iBAAiB,QAASv0D,KAAK6/G,0BAC9C7/G,KAAKk8G,UAAU3nD,iBAAiB,MAAOv0D,KAAK+/G,yBAE5C//G,KAAK47G,qB,YAmBT,YAAAn3F,OAAA,WACKzkB,KAAKk8G,WACRl8G,KAAKk8G,UAAUz3F,UAIjB,YAAAm3F,iBAAA,W,MACK57G,KAAKk8G,YACJl8G,KAAKi/G,OAAO3tE,SACC,QAAhB,EAAAtxC,KAAK45C,mBAAW,SAAE+d,oBAAoBikD,iBAAiB57G,KAAKi/G,OAAO3tE,SAGhEtxC,KAAK6/G,0BACR7/G,KAAKk8G,UAAUjsD,oBAAoB,QAASjwD,KAAK6/G,0BAE9C7/G,KAAK+/G,wBACR//G,KAAKk8G,UAAUjsD,oBAAoB,MAAOjwD,KAAK+/G,wBAGhD//G,KAAKk8G,UAAU1+F,UACfxd,KAAKk8G,UAAY,OAGX,YAAA4D,mBAAR,WACC9/G,KAAK0+G,SAAU,GAER,YAAAsB,iBAAR,WACChgH,KAAK0+G,SAAU,GAEjB,EAnFA,GAAa,EAAAtnD,sB,8ECFb,WAMA,aAQC,WAAsB6nD,GAAA,KAAAA,SAPd,KAAAgB,eAAiB,IAAI,EAAAnvF,QACrB,KAAAovF,2BANkB,EAOhB,KAAAC,oBAAiDngH,KAAKogH,cAAc/iH,KAAK2C,MACzE,KAAAqgH,oBAAiDrgH,KAAKsgH,cAAcjjH,KAAK2C,MACzE,KAAAugH,kBAA+CvgH,KAAKwgH,YAAYnjH,KAAK2C,MA2EhF,OAtEC,sBAAI,0BAAW,C,IAAf,WACC,OAAOA,KAAKi/G,OAAO7wE,mBAAmBwL,a,gCAEvC,sBAAI,qBAAM,C,IAAV,WACC,OAAO55C,KAAKi/G,OAAO3tE,Q,gCAGpB,YAAAmV,KAAA,WACMzmD,KAAKsxC,SAGNtxC,KAAKmgH,qBACRngH,KAAKsxC,OAAO2e,oBAAoB,YAAajwD,KAAKmgH,qBAE/CngH,KAAKqgH,qBACRrgH,KAAKsxC,OAAO2e,oBAAoB,YAAajwD,KAAKqgH,qBAE/CrgH,KAAKugH,mBACRvgH,KAAKsxC,OAAO2e,oBAAoB,UAAWjwD,KAAKugH,mBAEjDvgH,KAAKmgH,oBAAsBngH,KAAKmgH,qBAAuBngH,KAAKogH,cAAc/iH,KAAK2C,MAC/EA,KAAKqgH,oBAAsBrgH,KAAKqgH,qBAAuBrgH,KAAKsgH,cAAcjjH,KAAK2C,MAC/EA,KAAKugH,kBAAoBvgH,KAAKugH,mBAAqBvgH,KAAKwgH,YAAYnjH,KAAK2C,MAEzEA,KAAKsxC,OAAOijB,iBAAiB,YAAav0D,KAAKmgH,qBAC/CngH,KAAKsxC,OAAOijB,iBAAiB,YAAav0D,KAAKqgH,qBAC/CrgH,KAAKsxC,OAAOijB,iBAAiB,UAAWv0D,KAAKugH,mBAG7CvgH,KAAKsxC,OAAOijB,iBAAiB,aAAcv0D,KAAKmgH,qBAAqB,GACrEngH,KAAKsxC,OAAOijB,iBAAiB,YAAav0D,KAAKqgH,qBAAqB,GACpErgH,KAAKsxC,OAAOijB,iBAAiB,WAAYv0D,KAAKugH,mBAAmB,GACjEvgH,KAAKsxC,OAAOijB,iBAAiB,cAAev0D,KAAKugH,mBAAmB,KAG3D,YAAAH,cAAV,SAAwBntD,GAEvB,GADAjzD,KAAKkgH,0BAA4B,EAC7BjtD,aAAiBwtD,WACpBzgH,KAAKigH,eAAepyG,EAAIolD,EAAMK,MAC9BtzD,KAAKigH,eAAenyG,EAAImlD,EAAMM,UACxB,CACN,IAAMrxD,EAAQ+wD,EAAMhF,QAAQ,GAC5BjuD,KAAKigH,eAAepyG,EAAI3L,EAAMoxD,MAC9BtzD,KAAKigH,eAAenyG,EAAI5L,EAAMqxD,QAItB,YAAA+sD,cAAV,SAAwBrtD,GACvB,IA9DyB,IA8DrBjzD,KAAKkgH,0BAAkD,CAC1D,IAAIn5F,EAAmB,EACvB,GAAIksC,aAAiBwtD,WACpB15F,EAAWksC,EAAMK,MAAQtzD,KAAKigH,eAAepyG,GAAKolD,EAAMM,MAAQvzD,KAAKigH,eAAenyG,OAC9E,CACN,IAAM5L,EAAQ+wD,EAAMhF,QAAQ,GAC5BlnC,EAAW7kB,EAAMoxD,MAAQtzD,KAAKigH,eAAepyG,GAAK3L,EAAMqxD,MAAQvzD,KAAKigH,eAAenyG,GAErF9N,KAAKkgH,2BAA6Bl3G,KAAKgiD,IAAIjkC,GAGvC/mB,KAAKi/G,OAAOtnD,oBAAoBv3D,QAK5B,YAAAogH,YAAV,SAAsBvtD,GACjBjzD,KAAKkgH,0BAGTlgH,KAAKkgH,2BAlFoB,GAoF3B,EAhFA,GAAa,EAAAp5D,oB,8ECLb,iBAGC,WAAsBm4D,GAAA,KAAAA,SAuBvB,OArBC,YAAAx4D,KAAA,WACC,IAAMnV,EAAStxC,KAAKi/G,OAAO3tE,OACvBA,IACHA,EAAOovE,mBAAqB1gH,KAAK2gH,qBAAqBtjH,KAAK2C,MAC3DsxC,EAAOsvE,uBAAyB5gH,KAAK6gH,yBAAyBxjH,KAAK2C,QAI3D,YAAA2gH,qBAAV,WACCv9G,QAAQmT,KAAK,wBAAyBvW,KAAKi/G,OAAO97G,MAAM2qC,OAEpD9tC,KAAK8gH,2BACRtC,qBAAqBx+G,KAAK8gH,4BAE1B19G,QAAQmT,KAAK,8CAEdnT,QAAQmT,KAAK,eAAgBvW,KAAK8gH,6BAEzB,YAAAD,yBAAV,WACCz9G,QAAQC,IAAI,qBAEd,EA1BA,GAAa,EAAAskD,mB,yFCFb,SAEA,4BAEA,2B,+CAcA,OAd4D,iBACjD,YAAApqB,mBAAV,WACC,IAAMP,EAAOh9B,KAAK29B,YAEdrL,EAAQtyB,KAAKwD,KAAKif,OAAO4b,MAAM,QAC/BokE,EAASnwE,EAEPgkC,EAAMt2D,KAAKwD,KAAKif,OAAO4b,MAAM,QAC/Bi4B,GAAQ,UAAahkC,IAAW,UAAamwE,KAChDzlE,EAAKpZ,MAAM/V,EAAIykB,EACf0K,EAAKpZ,MAAM9V,EAAI20F,EACfzlE,EAAKvtB,SAASzB,GAAK,MAASsoD,IAG/B,EAdA,CAA4D,EAAAx4B,0BAA/C,EAAAm9E,0C,yFCFb,QACA,SACA,SAGMT,EACA,GAIN,OACA,SACA,SACA,SACA,QACA,SAAgBuG,EAAgEr9F,GAC/E,mBAAO,2D,OACN,EAAA6uC,IAAM,EAAArzD,YAAYZ,MAAMk8G,EAAa,CAACr3E,MAAO,CAAC,EAAG,O,EAGlD,OAJ2B,iBAI3B,EAJA,CAA2Bzf,GAD5B,yCAOA,IAOMod,EAAe,IAPrB,yB,+CAMG,OAN2C,iBAM3C,EANH,CAA8C,EAAA81B,6BAC7C,EAAAC,4BACC,EAAApzC,uBACC,EAAAqzC,iBAAiBiqD,EAAqC,EAAAxqD,2BAA2B,EAAAp3D,yBAMpF,yE,OACC,EAAA0iC,cAAgBf,E,EA2DjB,OA5D8C,iBAEtC,EAAAhjC,KAAP,WACC,MAAO,sBAGR,sBAAc,gDAAiC,C,IAA/C,WACC,OAAO,EAAAkjH,uC,gCAGR,YAAAx/G,cAAA,WACC,OAAO,IAAI,EAAAy/G,kBAAkBzG,EAAa,EAAG,EAAApkD,oBAAoBC,KAAM,EAAAD,oBAAoBE,MAgB5F,YAAAoB,cAAA,WACK13D,KAAKyf,QAAQ8yC,KAAOvyD,KAAKyY,GAAG85C,MAC/BvyD,KAAKyf,QAAQ8yC,IAAMvyD,KAAKyY,GAAG85C,IAC3BvyD,KAAKyf,QAAQuvC,0BAEdhvD,KAAKi4D,4BAGI,YAAAA,yBAAV,WACKj4D,KAAKg3D,UAGRh3D,KAAKyf,QAAQ8xB,OAASvxC,KAAKg3D,QAO3Bh3D,KAAKyf,QAAQuvC,2BAchB,EA5DA,CAA8C,EAAAqJ,oBAAjC,EAAAy9C,4B,yFCjCb,SAEA,OACA,4BACA,4BAqBMoL,EAA0B,CAC/BC,GAAI,CAACtzG,GAAI,EAAGC,GAAI,GAChBszG,GAAI,CAACvzG,EAAG,EAAIC,GAAI,GAChBuzG,GAAI,CAACxzG,GAAI,EAAGC,EAAG,GACfwzG,GAAI,CAACzzG,EAAG,EAAIC,EAAG,IAEVyzG,EAAuC,CAAC,KAAM,KAAM,KAAM,MAEhE,yE,OACS,EAAAC,WAAwB,CAC/BL,GAAI,IAAI,EAAA5yG,QACR6yG,GAAI,IAAI,EAAA7yG,QACR8yG,GAAI,IAAI,EAAA9yG,QACR+yG,GAAI,IAAI,EAAA/yG,SAED,EAAAkzG,WAAa,IAAI,EAAAlzG,Q,EAwC1B,OA/C2D,iBAShD,YAAAgvB,mBAAV,WAGC,IAHD,WACOP,EAAOh9B,KAAK29B,YAEM,MAAA4jF,EAAA,eAAc,CAAjC,IAAIG,EAAW,KACnB1hH,KAAK2hH,sBAAsB3hH,KAAKwhH,WAAWE,GAAcR,EAAaQ,IAEvE,IAAIpvF,EAAQtyB,KAAKwhH,WAAWL,GAAGS,WAAW5hH,KAAKwhH,WAAWJ,IACtD3e,EAASziG,KAAKwhH,WAAWL,GAAGS,WAAW5hH,KAAKwhH,WAAWH,IAE3DrhH,KAAKyhH,WAAW5zG,EAAI,UAAW0zG,EAAal3G,KAAI,SAAChO,GAAS,SAAKmlH,WAAWnlH,GAAMwR,MAAM,EACtF7N,KAAKyhH,WAAW3zG,EAAI,UAAWyzG,EAAal3G,KAAI,SAAChO,GAAS,SAAKmlH,WAAWnlH,GAAMyR,MAAM,EACtF9N,KAAKyhH,WAAWzzG,EAAI,UAAWuzG,EAAal3G,KAAI,SAAChO,GAAS,SAAKmlH,WAAWnlH,GAAM2R,MAAM,EAEtF,IAAMsoD,EAAMt2D,KAAKwD,KAAKif,OAAO4b,MAAM,OAC7B3B,EAAmB18B,KAAKwD,KAAKif,OAAO4b,MAAM,oBAChD,GAAIi4B,IAAQ,UAAahkC,KAAW,UAAamwE,GAAS,CACzD,IACMof,EAAUvrD,EADNt2D,KAAKyhH,WAAWG,WAAW5hH,KAAKwD,KAAKjG,OAAOkS,UAEhDqyG,EAAgBplF,GAAoB,EAGzC+lE,EADGnwE,EAAQmwE,EACFnwE,EAAQwvF,EAERxvF,EAAQwvF,EAGlB9kF,EAAKpZ,MAAM/V,EAAIykB,EAAQuvF,EACvB7kF,EAAKpZ,MAAM9V,EAAI20F,EAASof,EACxB7kF,EAAKvtB,SAASzB,GAAK,MAASsoD,IAG9B,YAAAqrD,sBAAA,SAAsBzsB,EAAiB6sB,GACtC/hH,KAAK28B,cAAcqlF,cAAcD,EAAO/hH,KAAKwD,KAAKjG,QAClD23F,EACEjwE,KAAKjlB,KAAK28B,cAAcslF,IAAIC,WAC5Bh9F,eAAellB,KAAKwD,KAAKif,OAAO4b,MAAM,QACtC/e,IAAItf,KAAK28B,cAAcslF,IAAIE,SAE/B,EA/CA,CAA2D,EAAArkF,0BAA9C,EAAAkjF,yC,8ECjCb,aAEA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SAGA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,UACA,UACA,UACA,UA6DA,4BA0DA,OAzDQ,EAAAvf,IAAP,SAAWM,GACVA,EAAK7uF,cAAc,EAAAkvG,WAAY,EAAAzrF,aAAaf,OAC5CmsE,EAAK7uF,cAAc,EAAAmvG,qBAAsB,EAAA1rF,aAAaC,WACtDmrE,EAAK7uF,cAAc,EAAAovG,sBAAuB,EAAA3rF,aAAaC,WACvDmrE,EAAK7uF,cAAc,EAAAqvG,qBAAsB,EAAA5rF,aAAaE,WACtDkrE,EAAK7uF,cAAc,EAAAsvG,kBAAmB,EAAA7rF,aAAaE,WACnDkrE,EAAK7uF,cAAc,EAAAuvG,oBAAqB,EAAA9rF,aAAaE,WACrDkrE,EAAK7uF,cAAc,EAAAwvG,oBAAqB,EAAA/rF,aAAaE,WACrDkrE,EAAK7uF,cAAc,EAAAyvG,uBAAwB,EAAAhsF,aAAaE,WACxDkrE,EAAK7uF,cAAc,EAAA0vG,qBAAsB,EAAAjsF,aAAaE,WACtDkrE,EAAK7uF,cAAc,EAAA2vG,mBAAoB,EAAAlsF,aAAaE,WACpDkrE,EAAK7uF,cAAc,EAAA4vG,oBAAqB,EAAAnsF,aAAaE,WACrDkrE,EAAK7uF,cAAc,EAAA6vG,sBAAuB,EAAApsF,aAAaE,WACvDkrE,EAAK7uF,cAAc,EAAA8vG,mBAAoB,EAAArsF,aAAaG,UACpDirE,EAAK7uF,cAAc,EAAA+vG,aAAc,EAAAtsF,aAAaG,UAC9CirE,EAAK7uF,cAAc,EAAAgwG,WAAY,EAAAvsF,aAAaf,OAC5CmsE,EAAK7uF,cAAc,EAAA8gE,aAAc,EAAAr9C,aAAajB,MAC9CqsE,EAAK7uF,cAAc,EAAAiwG,cAAe,EAAAxsF,aAAaf,OAC/CmsE,EAAK7uF,cAAc,EAAAkwG,aAAc,EAAAzsF,aAAaG,UAC9CirE,EAAK7uF,cAAc,EAAAmwG,YAAa,EAAA1sF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAAowG,YAAa,EAAA3sF,aAAaf,OAC7CmsE,EAAK7uF,cAAc,EAAAqwG,eAAgB,EAAA5sF,aAAaf,OAChDmsE,EAAK7uF,cAAc,EAAAswG,aAAc,EAAA7sF,aAAajB,MAC9CqsE,EAAK7uF,cAAc,EAAAuwG,cAAe,EAAA9sF,aAAaG,UAC/CirE,EAAK7uF,cAAc,EAAAwwG,YAAa,EAAA/sF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAAywG,YAAa,EAAAhtF,aAAaf,OAC7CmsE,EAAK7uF,cAAc,EAAA0wG,YAAa,EAAAjtF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAA2wG,gBAAiB,EAAAltF,aAAaf,OACjDmsE,EAAK7uF,cAAc,EAAA4wG,iBAAkB,EAAAntF,aAAajB,MAClDqsE,EAAK7uF,cAAc,EAAA6wG,cAAe,EAAAptF,aAAaG,UAC/CirE,EAAK7uF,cAAc,EAAA8wG,aAAc,EAAArtF,aAAaG,UAC9CirE,EAAK7uF,cAAc,EAAA+wG,YAAa,EAAAttF,aAAaf,OAC7CmsE,EAAK7uF,cAAc,EAAAgxG,gBAAiB,EAAAvtF,aAAaI,QACjDgrE,EAAK7uF,cAAc,EAAAixG,aAAc,EAAAxtF,aAAajB,MAC9CqsE,EAAK7uF,cAAc,EAAAkxG,aAAc,EAAAztF,aAAajB,MAC9CqsE,EAAK7uF,cAAc,EAAAmxG,eAAgB,EAAA1tF,aAAaG,UAChDirE,EAAK7uF,cAAc,EAAAoxG,YAAa,EAAA3tF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAAqxG,mBAAoB,EAAA5tF,aAAaf,OACpDmsE,EAAK7uF,cAAc,EAAAsxG,iBAAkB,EAAA7tF,aAAaf,OAClDmsE,EAAK7uF,cAAc,EAAAuxG,YAAa,EAAA9tF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAAwxG,aAAc,EAAA/tF,aAAaf,OAC9CmsE,EAAK7uF,cAAc,EAAAyxG,aAAc,EAAAhuF,aAAaG,UAC9CirE,EAAK7uF,cAAc,EAAA0xG,gBAAiB,EAAAjuF,aAAaG,UACjDirE,EAAK7uF,cAAc,EAAA2xG,WAAY,EAAAluF,aAAaG,UAC5CirE,EAAK7uF,cAAc,EAAA4xG,gBAAiB,EAAAnuF,aAAaG,UACjDirE,EAAK7uF,cAAc,EAAA6xG,eAAgB,EAAApuF,aAAaG,UAChDirE,EAAK7uF,cAAc,EAAA8xG,YAAa,EAAAruF,aAAaG,UAC7CirE,EAAK7uF,cAAc,EAAA+xG,eAAgB,EAAAtuF,aAAaG,UAChDirE,EAAK7uF,cAAc,EAAAgyG,cAAe,EAAAvuF,aAAaf,OAC/CmsE,EAAK7uF,cAAc,EAAAiyG,cAAe,EAAAxuF,aAAajB,MAC/CqsE,EAAK7uF,cAAc,EAAAkyG,YAAa,EAAAzuF,aAAaf,OAC7CmsE,EAAK7uF,cAAc,GAAAmyG,aAAc,EAAA1uF,aAAaf,OAC9CmsE,EAAK7uF,cAAc,GAAAoyG,iBAAkB,EAAA3uF,aAAaf,OAClDmsE,EAAK7uF,cAAc,GAAAqyG,iBAAkB,EAAA5uF,aAAaG,UAClDirE,EAAK7uF,cAAc,GAAAsyG,YAAa,EAAA7uF,aAAaf,OAC7CmsE,EAAK7uF,cAAc,GAAAuyG,iBAAkB,EAAA9uF,aAAaG,WAEpD,EA1DA,GAAa,EAAAgrE,gB,yFCrHb,4BAGA,QACA,QACA,QAEA,QAIA,OAaMhhE,EAAe,IAZrB,uE,OACC,EAAA4kF,aAAe,EAAAxmH,YAAYd,QAAQ,GACnC,EAAAuF,aAAe,EAAAzE,YAAYV,QAAQ,EAAG,CACrC2kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,GACrBhH,WAAY,CAACspF,cAAc,KAE5B,EAAAj2G,SAAW,EAAAvQ,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAI,CAACo9B,WAAY,CAACspF,cAAc,KAEtE,EAAAC,KAAO,EAAAzmH,YAAYd,QAAQ,GAC3B,EAAAwnH,sBAAwB,EAAA1mH,YAAYd,QAAQ,G,EAC7C,OAXiC,iBAWjC,EAXA,CAAiC,EAAAe,mBAcjC,yE,OACC,EAAA0iC,cAAgBf,E,EAwFjB,OAzFgC,iBAExB,EAAAhjC,KAAP,WACC,MAAO,OAID,EAAAgC,sBAAP,WACC,MAAO,CAAC,gDAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,IAG7B,YAAA3I,KAAA,SAAKC,GACJvb,KAAK44D,SAAW,GAChB54D,KAAK6lH,gBAKL7lH,KAAKoB,YAAYpB,KAAK44D,WAGf,YAAAitD,cAAR,sBACC,GAAI7lH,KAAKyY,GAAGitG,aAAc,CACzB,IAAMnkH,EAAW,IAAI,EAAA8O,eACf,EAAsB,GAC5B,UAAarQ,KAAKyY,GAAG9U,cAAc,SAACrJ,GACnC,EAAKme,GAAGhJ,SAAS6b,QAAQ,EAAe,EAAJhxB,MAErCiH,EAASgM,aAAa,WAAY,IAAI,EAAA0qG,gBAAgB,IAAIllF,aAAa,GAAY,IACnF,IAAMx1B,EAASyC,KAAKwB,cAAcD,EAAU,EAAAiB,aAAaC,YAAY0B,QAEjEnE,KAAK44D,UACR54D,KAAK44D,SAAS99D,KAAKyC,KAqDvB,EAzFA,CAAgC,EAAAuG,cAAnB,EAAAs+G,c,kFC5Bb,E,KAAA,wBAEA,OACA,OACA,SAIA,SAEA,QAaA,aAOC,WAAoBnnD,EAAsCO,GAAtC,KAAAP,iBAAsC,KAAAO,SACzDx7D,KAAKsL,UAAYtL,KAAKi7D,eAAe15D,WAwMvC,OAtMC,sBAAI,oBAAK,C,IAAT,WACC,OAAOvB,KAAKw7D,Q,gCAEb,sBAAI,qBAAM,C,IAAV,WACC,OAAQx7D,KAAK4P,QAAU5P,KAAK4P,SAAW5P,KAAK8lH,e,gCAErC,YAAAA,YAAR,W,MACOC,GAAkC,QAApB,EAAA/lH,KAAKsL,UAAUnJ,aAAK,eAAEG,QAAS,GAC7Ci9C,EAAsB,EAAdv/C,KAAKw7D,OACnB,MAAO,CACN,IAAI,EAAAtrD,UAAUlQ,KAAKi7D,eAAgB8qD,EAAYxmE,EAAQ,IACvD,IAAI,EAAArvC,UAAUlQ,KAAKi7D,eAAgB8qD,EAAYxmE,EAAQ,IACvD,IAAI,EAAArvC,UAAUlQ,KAAKi7D,eAAgB8qD,EAAYxmE,EAAQ,MAGzD,sBAAI,wBAAS,C,IAAb,WACC,OAAQv/C,KAAKgmH,WAAahmH,KAAKgmH,YAAchmH,KAAKimH,kB,gCAE3C,YAAAA,eAAR,WACC,IAAMt2G,EAAS3P,KAAK2P,OACpB,MAAO,CAACA,EAAO,GAAGF,WAAYE,EAAO,GAAGF,WAAYE,EAAO,GAAGF,aAE/D,sBAAI,uBAAQ,C,IAAZ,WACC,OAAQzP,KAAKkmH,UAAYlmH,KAAKkmH,WAAalmH,KAAKmmH,iB,gCAEzC,YAAAA,cAAR,WACC,IAAMtzF,EAAY7yB,KAAK6yB,UACvB,OAAO,IAAI,EAAAvG,SAASuG,EAAU,GAAIA,EAAU,GAAIA,EAAU,KAE3D,sBAAI,qBAAM,C,IAAV,WACC,OAAQ7yB,KAAKomH,QAAUpmH,KAAKomH,SAAWpmH,KAAKqmH,e,gCAErC,YAAAA,YAAR,WACC,MAAO,CAACrmH,KAAK6yB,UAAU,GAAG/vB,QAAQ2sB,IAAIzvB,KAAK6yB,UAAU,IAAK7yB,KAAK6yB,UAAU,GAAG/vB,QAAQ2sB,IAAIzvB,KAAK6yB,UAAU,MAGxG,sBAAI,mBAAI,C,IAAR,WACC,OAAO7yB,KAAKkvB,SAASo3F,W,gCAEtB,YAAA1sD,OAAA,SAAO/f,GACN,IAAMhnB,EAAY7yB,KAAK6yB,UAKvB,OAJAgnB,EAAOhsC,GAAKglB,EAAU,GAAGhlB,EAAIglB,EAAU,GAAGhlB,EAAIglB,EAAU,GAAGhlB,GAAK,EAChEgsC,EAAO/rC,GAAK+kB,EAAU,GAAG/kB,EAAI+kB,EAAU,GAAG/kB,EAAI+kB,EAAU,GAAG/kB,GAAK,EAChE+rC,EAAO7rC,GAAK6kB,EAAU,GAAG7kB,EAAI6kB,EAAU,GAAG7kB,EAAI6kB,EAAU,GAAG7kB,GAAK,EAEzD6rC,GAGR,YAAA0sE,gBAAA,SAAgBC,GACf,IAAIC,EAAU,CAAC,EAAArhG,SAASmI,WAAWi5F,GAAO,EAAAphG,SAASmI,WAAkB,KAAPi5F,IAO9D,OALIC,EAAQ,GAAKA,EAAQ,GAAK,IAC7BA,EAAQ,GAAK,EAAIA,EAAQ,GACzBA,EAAQ,GAAK,EAAIA,EAAQ,IAGnBzmH,KAAK6yB,UAAU,GACpB/vB,QACAwc,IAAItf,KAAK0mH,OAAO,GAAG5jH,QAAQoiB,eAAeuhG,EAAQ,KAClDnnG,IAAItf,KAAK0mH,OAAO,GAAG5jH,QAAQoiB,eAAeuhG,EAAQ,MAkBrD,YAAAE,yBAAA,SAAyB35G,EAAqByC,GAE7C,IAAMm3G,EAA0B,IAAI,EAAAr4G,QACpCvO,KAAKkvB,SAAS23F,aAAap3G,EAAUm3G,GACrC,IAMIE,EACAC,EAPEN,EAAUG,EAAwBt7F,UAGlCpe,EADSlN,KAAKsL,UAAUsB,WAAWI,GACdC,SACrB+5G,EAAehnH,KAAK2P,OAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa5D,MAI/D7K,EAAQ,EACZ,OAAQ+K,GACP,KAAK,EACJ65G,EAAM,EACN,IAAwB,UAAAC,EAAA,eAAc,CACrCD,GADmB,KACEN,EAAQtkH,GAC7BA,IAED2kH,EAAmBC,EACnB,MAED,QACC,IAAwB,UAAAC,EAAA,eAAc,CAAjC,IACEC,EADa,KACgB/hG,eAAeuhG,EAAQtkH,IACtD4kH,EACHA,EAAIznG,IAAI2nG,GAERF,EAAME,EAEP9kH,IAED2kH,EAAmBC,EAGrB,OAAOD,GAGD,EAAAI,mBAAP,SACC3lH,EACA4lH,EACAC,EACAj6G,GAGA,IAAMk6G,EAAgB,CAACF,EAAKl8G,EAAGk8G,EAAKj8G,EAAGi8G,EAAKhrH,GAEtCmrH,EADkB/lH,EAASc,aAAa,YACAC,MACxCilH,EAAkBF,EAAch9G,KACrC,SAAC2F,GACA,WAAI,EAAAzB,QACH+4G,EAAoC,EAAdt3G,EAAkB,GACxCs3G,EAAoC,EAAdt3G,EAAkB,GACxCs3G,EAAoC,EAAdt3G,EAAkB,OAIrC9C,EAAcC,EAAOF,SACrBu6G,EAAer6G,EAAO7K,MACxB68D,EAAsC,GAC1C,OAAQjyD,GACP,KAAK,EACJiyD,EAAgBkoD,EAAch9G,KAAI,SAAC2F,GAAgB,OAAAw3G,EAAax3G,MAChE,MACD,KAAK,EACJmvD,EAAgBkoD,EAAch9G,KAC7B,SAAC2F,GAAgB,WAAI,EAAA8gB,QAAQ02F,EAA2B,EAAdx3G,EAAkB,GAAIw3G,EAA2B,EAAdx3G,EAAkB,OAEhG,MACD,KAAK,EACJmvD,EAAgBkoD,EAAch9G,KAC7B,SAAC2F,GACA,WAAI,EAAAzB,QACHi5G,EAA2B,EAAdx3G,EAAkB,GAC/Bw3G,EAA2B,EAAdx3G,EAAkB,GAC/Bw3G,EAA2B,EAAdx3G,EAAkB,OAMpC,IAgBI82G,EAhBEW,EAAiBJ,EAAch9G,KAAI,SAAC2F,EAAa1V,GAAM,OAAA8sH,EAAgBxF,WAAW2F,EAAgBjtH,OAIlGotH,EAAiB,UAAW,CACjCD,EAAe,GAAKA,EAAe,GACnCA,EAAe,GAAKA,EAAe,GACnCA,EAAe,GAAKA,EAAe,KAG9BhB,EAAU,CACdgB,EAAe,GAAKA,EAAe,GAAMC,EACzCD,EAAe,GAAKA,EAAe,GAAMC,EACzCD,EAAe,GAAKA,EAAe,GAAMC,GAI3C,OAAQx6G,GACP,KAAK,EACJ45G,EAAmB,UAClBO,EAAch9G,KAAI,SAACs9G,EAAYrtH,GAAM,OAAAmsH,EAAQnsH,GAAM6kE,EAAc7kE,OAElE,MACD,QAICwsH,EAAmB,KACnB,IAAkB,UAJLO,EAAch9G,KAAI,SAAC2F,EAAa1V,GAC5C,OAAC6kE,EAAc7kE,GAAe4qB,eAAeuhG,EAAQnsH,OAGpC,eAAQ,CAArB,IAAIwC,EAAK,KACTgqH,EACHA,EAAiBxnG,IAAIxiB,GAErBgqH,EAAmBhqH,GAKvB,OAAOgqH,GAET,EAhNA,GAAa,EAAAr0G,Y,8ECvBb,aAEA,2BAcA,OAZQ,EAAAlD,MAAP,SAAaJ,GACZ1U,OAAO0iB,OAAOhO,EAAW,CACxBrM,MAAO,WACN,OAAO,IAAI,EAAAuM,2BACVF,EAAUnV,KAAK8I,QACfqM,EAAUlC,SACVkC,EAAUyxC,OACVzxC,EAAUoyC,gBAKf,EAdA,GAAa,EAAAjyC,iB,yFCGb,SAGA,QAgBA,2B,+CA0UA,OA1UuC,iBAmBtC,YAAAlO,YAAA,SAAYP,KAQZ,YAAAgzB,oBAAA,WACC,GAAI7zB,KAAK0zB,SACR,OAAO1zB,KAAK0zB,SAAS5wB,SAoDvB,YAAA2Y,YAAA,SAAYD,GACX,YAAMC,YAAW,UAACD,IA6EX,YAAA++C,aAAR,WACC,GAAIv6D,KAAK0zB,SACR,OAAO1zB,KAAK0zB,SAAS7yB,UAAU,IAGzB,YAAAq5D,eAAR,WACC,IAAM38D,EAASyC,KAAKu6D,eACpB,OAAIh9D,EACKA,EAAgBgE,SAEjB,MAIT,YAAAqmH,cAAA,WAMC,OAAI5nH,KAAK0zB,SACD1zB,KAAK0zB,SAAS7yB,UAAUrG,OAExB,GAGT,YAAAqtH,sBAAA,WACC,IAAIn4G,EAAQ,EAIZ,OAHI1P,KAAK0zB,WACRhkB,EAAQ1P,KAAK0zB,SAAS7yB,UAAUwmB,QAAO,SAAClrB,GAAM,OAAAA,EAAEuzC,WAASl1C,QAEnDkV,GAER,YAAAo4G,sBAAA,WACC,IAAMC,EAAoC,GACpCnnH,EAAaZ,KAAK0zB,SACxB,GAAI1zB,KAAK0zB,UAAY9yB,EACpB,IAAwB,UAAAA,EAAWi4D,eAAX,eAA2B,CAA9C,IACEpc,EADa,KACYA,aACE,MAA7BsrE,EAActrE,KACjBsrE,EAActrE,GAAc,GAE7BsrE,EAActrE,IAAe,EAG/B,OAAOsrE,GAER,YAAAC,sBAAA,WACC,IAAMC,EAAsC,GACtCrnH,EAAaZ,KAAK0zB,SACxB,GAAI1zB,KAAK0zB,UAAY9yB,EACpB,IAAwB,UAAAA,EAAWi4D,eAAX,eAA2B,CAA9C,IAAIE,EAAW,KACbtc,EAAasc,EAAYtc,aAC/BwrE,EAAcxrE,GAAcwrE,EAAcxrE,IAAe,GACzDwrE,EAAcxrE,GAAY3hD,KAAKi+D,EAAY18D,QAG7C,OAAO4rH,GAGR,YAAAC,uBAAA,WACC,IAAInvF,EAAkB,GAChBx3B,EAAWvB,KAAKk6D,iBAItB,OAHI34D,IACHw3B,EAAQt+B,OAAO6R,KAAK/K,EAASqL,aAEvBmsB,GAER,YAAAovF,+BAAA,WACC,IAAIC,EAAoC,GAClC7mH,EAAWvB,KAAKk6D,iBAOtB,OANI34D,GACH9G,OAAO6R,KAAK/K,EAASqL,YAAYhL,SAAQ,SAACoL,GACzC,IAAMG,EAAS5L,EAASqL,WAAWI,GACnCo7G,EAAcp7G,GAAeG,EAAOF,YAG/Bm7G,GAER,YAAAC,+BAAA,WACC,IAAIC,EAAoC,GAClC/mH,EAAWvB,KAAKk6D,iBACtB,GAAI34D,EAAU,CACb,IAAM,EAAW,IAAI,EAAAyK,aAAazK,GAClC9G,OAAO6R,KAAK/K,EAASqL,YAAYhL,SAAQ,SAACoL,GACzCs7G,EAAct7G,GAAe,EAASH,YAAYG,MAGpD,OAAOs7G,GAER,YAAAC,uBAAA,WACC,IAAIxvF,EAAkB,GAChBx7B,EAASyC,KAAKu6D,eAIpB,OAHIh9D,IACHw7B,EAAQt+B,OAAO6R,KAAK/O,EAAOuO,SAAqB,YAAK,KAE/CitB,GAGR,YAAAp1B,aAAA,WACC,OAAI3D,KAAK0zB,SACD1zB,KAAK0zB,SAAS/vB,eAEd,GAwCT,YAAA6H,aAAA,WACC,OAAOxL,KAAK0zB,SAASloB,gBAGtB,YAAAouD,OAAA,WACC,OAAO55D,KAAK0zB,SAASkmC,UAKtB,YAAAp0D,KAAA,WACC,OAAOxF,KAAK0zB,SAASluB,QAiBvB,EA1UA,CAAuC,EAAAuuB,gBAA1B,EAAAv0B,qB,yFCxBb,QAQA,OACA,QAIMshC,EAAe,IADrB,yB,+CAA6D,OAAlB,iBAAkB,EAA7D,CAA2C,EAAA3hC,mBAG3C,yE,OACC,EAAA0iC,cAAgBf,E,EA6BjB,OA9B0C,iBAElC,EAAAhjC,KAAP,WACC,MAAO,kBAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,gCAAiC,oCAG1C,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,UAAW,EAAA92F,eAAek3F,SAGrF,YAAA5/E,KAAA,SAAKC,GACJ,IAAMitG,EAAoBjtG,EAAe,GAGnCmhC,EAFiBnhC,EAAe,GAEJ1a,UAAU,GACtC4nH,EAAgBD,EAAkB3nH,UAAU,GAE5C6nH,EAAiBhsE,EAAWc,WAC9BkrE,GACHD,EAAcjrE,WAAakrE,EAAer+G,KAAI,SAACY,GAAM,OAAAA,EAAEnI,WACvD9C,KAAKW,eAAe6nH,IAEpBxoH,KAAKswB,OAAOhT,MAAMpd,IAAI,uBAGzB,EA9BA,CAA0C,EAAA4D,cAA7B,EAAAu+G,wB,yFCfb,QACA,2BAEA,UAEA,QAGA,QAMA,QAEA,OAWMvhF,EAAe,IARrB,uE,OACC,EAAAioD,KAAO,EAAA7pF,YAAYZ,MAAM,KAAM,CAAC6kC,MAAO,CAAC,EAAG,MAC3C,EAAAwlF,QAAU,EAAAzpH,YAAYhB,OAAO,KAAM,CAClC4W,SAAU,SAACtR,EAAoB6S,GAC9BisG,EAAsBsG,uBAAuBplH,EAA+B6S,M,EAG/E,OAP4C,iBAO5C,EAPA,CAA4C,EAAAlX,mBAU5C,yE,OACC,EAAA0iC,cAAgBf,EAKhB,EAAA+nF,eAAgC,KAChC,EAAAC,OAAgC,KAChC,EAAAC,iBAAgD,GAChD,EAAAC,sBAA4C,G,EA4H7C,OArI2C,iBAEnC,EAAAlrH,KAAP,WACC,MAAO,mBAUD,EAAAgC,sBAAP,WACC,MAAO,CAAC,4BAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GACCvb,KAAK8oH,QAGT9oH,KAAKipH,gBACLjpH,KAAK0b,gBAAgBC,YAHrB3b,KAAKkpH,aAAa3tG,EAAe,KAO3B,YAAA2tG,aAAR,SAAqBtoH,GAArB,WACCZ,KAAKmpH,kBAAoBvoH,EAAWC,UAAU,GAC9Cb,KAAK8oH,OAAS,IAAI,EAAAM,eAAeppH,KAAKmpH,mBAEtCnpH,KAAKqjC,uBACLrjC,KAAK+oH,iBAAmB,GAEpB/oH,KAAKmpH,kBAAkB3rE,YAC1Bx9C,KAAKmpH,kBAAkB3rE,WAAW57C,SAAQ,SAAC67C,EAAWnjD,GACrD,IAAMosB,EAAa+2B,EAAUphD,KAEzBqR,EADmB,EAAKs7G,sBAAsBtiG,GAE7B,MAAjBhZ,IACHA,EAAqB,GAALpT,EAAS,EAAI,GAE9B,IAAM+b,EAAQ,EAAKgF,UAAU,EAAAld,UAAUG,MAAOooB,EAAYhZ,EAAe,CAAC0sB,OAAO,IACjF,GAAI/jB,EAAO,CACV,IAAMgzG,EAAa,EAAKL,sBAAsBtiG,GAC1C2iG,GACHhzG,EAAMnW,IAAImpH,GAIZ,GAAI,EAAKP,OAAQ,CAChB,IAAMQ,EAAS,EAAKR,OAAOS,WAAW9rE,GACtC,EAAKsrE,iBAAiBtrE,EAAUphD,MAAQitH,MAI3CtpH,KAAKoc,KAAK,EAAA/Q,UAAUgvB,gBAEpB5/B,OAAO6R,KAAKtM,KAAK+oH,kBAAkBnnH,SAAQ,SAACvF,GAC3C,EAAK0sH,iBAAiB1sH,GAAMgrD,UAI7B,IAAMmiE,EAAwC,GAC9CxpH,KAAKmpH,kBAAkBlsE,UAAS,SAACwsE,GAChC,IAAMpvD,EAAQovD,EACVpvD,EAAMn3D,WACJ,UAAem3D,EAAMn3D,YACzBsmH,EAAgBnvD,EAAMn3D,SAASqI,MAAQ8uD,EAAMn3D,cAIhDzI,OAAO6R,KAAKk9G,GAAiB5nH,SAAQ,SAAC2J,GACrC,IAAMrI,EAAWsmH,EAAgBj+G,GACjCrI,EAASwoC,UAAW,EACpBxoC,EAASwmH,cAAe,KAEzB1pH,KAAK6oH,eAAiB,KACtB7oH,KAAKipH,gBACLjpH,KAAK2pH,wBACL3pH,KAAKiB,WAAWjB,KAAKmpH,oBAGd,YAAA9lF,qBAAR,sBACCrjC,KAAKgpH,sBAAwB,GACShpH,KAAKyiB,OAAO+W,YAC9B53B,SAAQ,SAAC8kB,GAC5B,IAAMrQ,EAAQ,EAAKoM,OAAO6rE,UAAU5nE,GAChCrQ,IACH,EAAK2yG,sBAAsBtiG,GAAcrQ,EAAMvZ,MAC/C,EAAK2lB,OAAOkX,aAAajT,QAKpB,YAAAuiG,cAAR,WACKjpH,KAAKyY,GAAGswE,MAAQ/oF,KAAK6oH,eACxB7oH,KAAK4pH,qBAEL5pH,KAAK2pH,yBAGC,YAAAC,mBAAR,WACC,IAAMp6F,EAAQxvB,KAAKyY,GAAGswE,MAAQ/oF,KAAK6oH,gBAAkB,GACjD7oH,KAAK8oH,QACR9oH,KAAK8oH,OAAOrkG,OAAO+K,GAEpBxvB,KAAK6oH,eAAiB7oH,KAAKyY,GAAGswE,MAGvB,YAAA4gC,sBAAR,WACC,IAAiB,UAAAlvH,OAAO6R,KAAKtM,KAAK+oH,kBAAjB,eAAoC,CAAhD,IAAI,EAAI,KACNO,EAAStpH,KAAK+oH,iBAAiB,GAC/Bc,EAAc7pH,KAAKyiB,OAAO6rE,UAAU,GAAMxxF,MAC7B,MAAf+sH,GACHP,EAAOQ,mBAAmBD,KAKtB,EAAAjB,uBAAP,SAA8BplH,EAA6B6S,GAC1D7S,EAAKumH,2BAEA,YAAAA,wBAAN,W,sHAEmB,OADlB/pH,KAAK8oH,OAAS,KACI,GAAM9oH,KAAKQ,GAAGiX,OAAOqiF,oBAAoB,I,cAArD/3F,EAAY,SAClB/B,KAAKkpH,aAAannH,EAAU8xB,uBAC5B7zB,KAAKwU,Y,YAEP,EArIA,CAA2C,EAAA1Q,cAA9B,EAAAw+G,yB,yFC7Bb,QAIA,OAGA,QAOMxhF,EAAe,IANrB,uE,OACC,EAAAzkC,KAAO,EAAA6C,YAAYJ,OAAO,IAC1B,EAAAkrH,QAAU,EAAA9qH,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KAC3C,EAAA8mF,KAAO,EAAA/qH,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KACxC,EAAA+mF,SAAW,EAAAhrH,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,K,EAC7C,OAL2C,iBAK3C,EALA,CAA2C,EAAAhkC,mBAQ3C,yE,OACC,EAAA0iC,cAAgBf,E,EAyCjB,OA1C0C,iBAElC,EAAAhjC,KAAP,WACC,MAAO,mBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAIJ,IAHA,IAAM3a,EAAa2a,EAAe,GAGV,MAFH3a,EAAW45D,2BAA2Bx6D,KAAKyY,GAAGpc,MAE3C,eAEvB,IAFI,IAAI2Q,EAAW,KAEE,MADFpM,EAAWe,aACT,eAAY,CAA5B,IAAIJ,EAAQ,KAChBvB,KAAKmqH,eAAen9G,EAAazL,GAInCvB,KAAKW,eAAeC,IAGb,YAAAupH,eAAR,SAAuBn9G,EAAqBzL,GAC3C,IAAM4N,EAAY5N,EAASc,aAAa2K,GACxC,GAAImC,EAAW,CAMd,IALA,IAAM9B,EAAS8B,EAAU7M,MAEnB0nH,EAAUhqH,KAAKyY,GAAGuxG,QAClBC,EAAOjqH,KAAKyY,GAAGwxG,KACfC,EAAWlqH,KAAKyY,GAAGyxG,SAChB5vH,EAAI,EAAGA,EAAI+S,EAAO7S,OAAQF,IAAK,CACvC,IAAMwC,EAAQuQ,EAAO/S,GACrB+S,EAAO/S,IAAMwC,EAAQktH,GAAWC,EAAOC,EAEnClqH,KAAKQ,GAAGiX,OAAOujF,aAAa,KAChC7rF,EAAUwjB,aAAc,KAI5B,EA1CA,CAA0C,EAAA7uB,cAA7B,EAAAy+G,wB,yFChBb,QAEA,OACA,QAGA,QAyBMzhF,EAAe,IAxBrB,uE,OASC,EAAAzkC,KAAO,EAAA6C,YAAYJ,OAAO,IAC1B,EAAAsrH,UAAY,EAAAlrH,YAAYd,QAAQ,GAChC,EAAAwQ,SAAW,EAAA1P,YAAYJ,OAAO,GAAI,CAACs9B,WAAY,CAACguF,UAAW,K,EAY5D,OAvBwC,iBAuBxC,EAvBA,CAAwC,EAAAjrH,mBA2BxC,yE,OACC,EAAA0iC,cAAgBf,E,EAoJjB,OArJuC,iBAE/B,EAAAhjC,KAAP,WACC,MAAO,eAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,iCAAkC,qCAG3C,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,UAAW,EAAA92F,eAAek3F,SAGrF,YAAA9/E,cAAA,aAEA,YAAAE,KAAA,SAAKC,GAKJ,IAJA,IAAM8uG,EAAkB9uG,EAAe,GACjC+uG,EAAiB/uG,EAAe,GAGd,MADH+uG,EAAe9vD,2BAA2Bx6D,KAAKyY,GAAGpc,MAC/C,eAAc,CAAjC,IAAI2Q,EAAW,KACnBhN,KAAKuqH,0CAA0CF,EAAiBC,EAAgBt9G,GAYjF,OAAOhN,KAAKW,eAAe0pH,IAGpB,YAAAE,0CAAR,SACCF,EACAC,EACAt9G,GAEA,IAAMw9G,EAAcF,EAAezpH,UAC7B4pH,EAAeJ,EAAgBxpH,UAErC,GAAI4pH,EAAajwH,OAASgwH,EAAYhwH,OACrCwF,KAAKswB,OAAOhT,MAAMpd,IAAI,0EAEtB,IAAK,IAAI5F,EAAI,EAAGA,EAAImwH,EAAajwH,OAAQF,IAAK,CAC7C,IAAMowH,EAAgBD,EAAanwH,GAAGiH,SAChCyN,EAAey7G,EAAanwH,GAAGiH,SACrCvB,KAAK2qH,yCAAyCD,EAAe17G,EAAchC,KAItE,YAAA29G,yCAAR,SACCD,EACA17G,EACAhC,GAEA,IAAM49G,EAAa57G,EAAa3M,aAAa2K,GAC7C,GAAI49G,EAAY,CACf,IAAMplH,EAAOolH,EAAW39G,SAClB49G,EAAmB77G,EAAa3M,aAAa,YAAYC,MAAM9H,OAAS,EACxEswH,EAAoBJ,EAAcroH,aAAa,YAAYC,MAAM9H,OAAS,EAC5EswH,EAAoBD,GACvB7qH,KAAKswB,OAAOhT,MAAMpd,IAAI,qCAEvB,IACM6qH,EADYH,EAAWtoH,MACDzE,MAAM,EAAGitH,EAAoBtlH,GACnDwlH,EAAYhrH,KAAKyY,GAAG2xG,UAAYpqH,KAAKyY,GAAG7J,SAAW5B,EACzD09G,EAAcn9G,aAAay9G,EAAW,IAAI,EAAA38G,uBAAuB08G,EAAWvlH,SAE5ExF,KAAKswB,OAAOhT,MAAMpd,IAAI,cAAc8M,EAAW,qCA2ElD,EArJA,CAAuC,EAAAlJ,cAA1B,EAAA0+G,qB,yFClCb,4BAEA,QACA,QAOA,SAQA,QAiBA,OAwCM1hF,EAAe,IAvCrB,uE,OACC,EAAAub,MAAQ,EAAAn9C,YAAYJ,OAAO,IAC3B,EAAAmsH,MAAQ,EAAA/rH,YAAYV,QAAQ,EAAA+F,YAAYqB,OAAQ,CAC/C27B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAA7H,KAAO,EAAAoB,YAAYV,QAAQ,EAAAgG,WAAWuB,QAAS,CAC9Cw7B,KAAM,CACLC,QAAS,EAAA17B,yBAGX,EAAAzJ,KAAO,EAAA6C,YAAYJ,OAAO,cAC1B,EAAA0G,KAAO,EAAAtG,YAAYV,QAAQ,EAAG,CAC7B2kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrBhH,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYF,WAE7C,EAAAmlH,OAAS,EAAAhsH,YAAYZ,MAAM,EAAG,CAC7B89B,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYF,QAASP,KAAM,GAC3DslC,WAAY,CAACqgF,cAAc,KAE5B,EAAAC,OAAS,EAAAlsH,YAAYH,QAAQ,CAAC,EAAG,GAAI,CACpCq9B,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYF,QAASP,KAAM,GAC3DslC,WAAY,CAACqgF,cAAc,KAE5B,EAAAE,OAAS,EAAAnsH,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAI,CACvCo9B,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYF,QAASP,KAAM,GAC3DslC,WAAY,CAACqgF,cAAc,KAE5B,EAAAG,OAAS,EAAApsH,YAAYD,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,CAC1Cm9B,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYF,QAASP,KAAM,GAC3DslC,WAAY,CAACqgF,cAAc,KAE5B,EAAA3gE,OAAS,EAAAtrD,YAAYJ,OAAO,GAAI,CAC/Bs9B,WAAY,CAACt+B,KAAM,EAAA0E,aAAayD,YAAYnH,QAC5CgsC,WAAY,CAACqgF,cAAc,K,EAE7B,OAtC0C,iBAsC1C,EAtCA,CAA0C,EAAAhsH,mBAwC1C,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAyqF,2BAA+C,GAC/C,EAAAC,2BAA+C,GAC/C,EAAAC,2BAA+C,GAC/C,EAAAC,2BAA+C,G,EAyUxD,OAlVyC,iBAEjC,EAAA5tH,KAAP,WACC,MAAO,iBAQR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAElC,GAAIvb,KAAKyY,GAAGpc,MAAqC,IAA7B,UAAY2D,KAAKyY,GAAGpc,MACvC,OAAQ2D,KAAKyY,GAAGwyG,OACf,KAAK,EAAA1mH,YAAYqB,OAChB5F,KAAK2rH,oBAAoB/qH,GACzB,MACD,KAAK,EAAA2D,YAAYsB,OAChB7F,KAAK4rH,qBAAqBhrH,QAI5BZ,KAAKswB,OAAOhT,MAAMpd,IAAI,gCAIlB,YAAAyrH,oBAAN,SAA0B/qH,G,0HACnBi4D,EAAej4D,EAAWi4D,eACvBv+D,EAAI,E,sBAAGA,EAAIu+D,EAAar+D,QAAM,Y,OAChCu+D,EAAcF,EAAav+D,GACzB0F,KAAKyY,GAAG3a,M,KACV,EAAA0E,aAAayD,YAAYF,QAAzB,Y,KAGA,EAAAvD,aAAayD,YAAYnH,OAAzB,Y,mBAFJ,SAAMkB,KAAK6rH,gCAAgC9yD,I,OAC3C,OADA,SACA,M,OAEA,SAAM/4D,KAAK8rH,+BAA+B/yD,I,OAC1C,OADA,SACA,M,cARsCz+D,I,oBAWzC0F,KAAKW,eAAeC,G,YAEf,YAAAgrH,qBAAN,SAA2BhrH,G,6HACpBi4D,EAAej4D,EAAW64D,wBAAwBz5D,KAAKyY,GAAG4jC,OACxDr8C,KAAKyY,GAAG3a,M,KACV,EAAA0E,aAAayD,YAAYF,QAAzB,Y,KAGA,EAAAvD,aAAayD,YAAYnH,OAAzB,Y,mBAFJ,SAAMkB,KAAK+rH,gCAAgClzD,I,OAC3C,OADA,SACA,M,OAEA,SAAM74D,KAAKgsH,+BAA+BnzD,I,OAC1C,OADA,SACA,M,cAEF74D,KAAKW,eAAeC,G,YAGf,YAAAirH,gCAAN,SAAsC9yD,G,gKAC/B7c,EAAgB6c,EAAY7c,gBAC5BvsC,EAASopD,EAAY3c,kBAAkBp8C,KAAKyY,GAAG4jC,QAE/ChmC,EAAQ,CAACrW,KAAKvC,EAAEytH,OAAQlrH,KAAKvC,EAAE2tH,OAAQprH,KAAKvC,EAAE4tH,OAAQrrH,KAAKvC,EAAE6tH,QAAQtrH,KAAKyY,GAAGjT,KAAO,IAEhF8d,kBACJ44B,EAAcvvC,WAAW3M,KAAKyY,GAAGpc,OACrC6/C,EAAczuC,mBAAmBzN,KAAKyY,GAAGpc,KAAM2D,KAAKyY,GAAGjT,KAAM6Q,EAAMvZ,OAG9DyE,EAAW26C,EAAc36C,WACzB,EAAQA,EAASc,aAAarC,KAAKyY,GAAGpc,MAAMiG,MAC9B,GAAhBtC,KAAKyY,GAAGjT,KAAR,MACCxF,KAAKvC,EAAEytH,OAAO3nG,sBACjB,GAAMvjB,KAAKvC,EAAEytH,OAAO3nG,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GACvF,EAAMmT,EAAM9N,MAAQ,EAAKsW,GAAGjT,KAAO,GAAK1I,MAFtC,OARF,M,OASD,S,oCAKKmvH,EAAS,CAACjsH,KAAKvC,EAAE2tH,OAAQprH,KAAKvC,EAAE4tH,OAAQrrH,KAAKvC,EAAE6tH,QAAQtrH,KAAKyY,GAAGjT,KAAO,GACxEid,EAASwpG,EAAOtpG,WACd,EAAa,IAAIwR,MAAM1R,EAAOjoB,QAChC0xH,OAAe,EAEbC,EAA0B,CAC/BnsH,KAAKurH,2BACLvrH,KAAKwrH,2BACLxrH,KAAKyrH,2BACLzrH,KAAK0rH,4B,WAGGpxH,G,iFACR4xH,EAAkBzpG,EAAOnoB,IACLgpB,kBAAoB4oG,EAAgB3oG,uBACvD,EAAWjpB,GAAK,EAAK8xH,wBACpB7qH,EACA4qH,EAAwB7xH,GACxBqV,EAAOnV,QAER,GAAM0xH,EAAgB3oG,sBAAsB2mC,8BAC3Cv6C,GACA,SAACM,EAAOnT,GAEP,EAAWxC,GAAG2V,EAAM9N,OAASrF,OAV5B,M,cAMH,S,aASA,IADMA,EAAQovH,EAAgBpvH,MACzB,EAAL,EAAkB,EAAA6S,EAAA,eAATM,EAAK,KACb,EAAMA,EAAM9N,MAAQ,EAAKsW,GAAGjT,KAAOlL,GAAKwC,E,uCAlBlCxC,EAAI,E,wBAAGA,EAAImoB,EAAOjoB,O,KAAlBF,IAAwB,M,wCAAEA,I,aAuBnC,IAASkB,EAAI,EAAGA,EAAI,EAAWhB,OAAQgB,IAEtC,GADM6wH,EAAY,EAAW7wH,GAE5B,IAASlB,EAAI,EAAGA,EAAI+xH,EAAU7xH,OAAQF,IACrC,EAAMA,EAAI0F,KAAKyY,GAAGjT,KAAOhK,GAAK6wH,EAAU/xH,G,qCAO5Cy+D,EAAYxc,0BAA0Bv8C,KAAKyY,GAAGpc,KAAM2D,KAAKyY,GAAGjT,KAAM6Q,EAAMvZ,O,qCAIpE,YAAAivH,gCAAN,SAAsClzD,G,4JAC/BxiD,EAAQ,CAACrW,KAAKvC,EAAEytH,OAAQlrH,KAAKvC,EAAE2tH,OAAQprH,KAAKvC,EAAE4tH,OAAQrrH,KAAKvC,EAAE6tH,QAAQtrH,KAAKyY,GAAGjT,KAAO,IAChF8d,iBACW,GAAhBtjB,KAAKyY,GAAGjT,KAAR,MACCxF,KAAKvC,EAAEytH,OAAO3nG,sBACjB,GAAMvjB,KAAKvC,EAAEytH,OAAO3nG,sBAAsB4mC,+BACzC0O,GACA,SAACE,EAAaj8D,GACbi8D,EAAYzc,iBAAiB,EAAK7jC,GAAGpc,KAAMS,OAJ1C,MAFF,M,OAGD,S,oCAcD,IANMmvH,EAAS,CAACjsH,KAAKvC,EAAE2tH,OAAQprH,KAAKvC,EAAE4tH,OAAQrrH,KAAKvC,EAAE6tH,QAAQtrH,KAAKyY,GAAGjT,KAAO,GACxEid,EAASwpG,EAAOtpG,WAChB,EAAqE,GAIpE,EAAL,EAAwB,EAAAk2C,EAAA,eAAfE,EAAW,KACnB,EAA4BA,EAAY52D,OAAmB,G,WAEnDg5D,G,iFACF+wD,EAAkBzpG,EAAO04C,IACX73C,kBAAoB4oG,EAAgB3oG,sBACvD,GAAM2oG,EAAgB3oG,sBAAsB4mC,+BAC3C0O,GACA,SAACE,EAAaj8D,GACb,EAA4Bi8D,EAAY52D,OAAOg5D,GAAmBr+D,MAJjE,M,cACH,S,aAOA,IAAK,EAAL,EAAwB,EAAA+7D,EAAA,eAAfE,EAAW,KACnB,EAA4BA,EAAY52D,OAAOg5D,GAAmB+wD,EAAgBpvH,M,gCAX5Eq+D,EAAkB,E,wBAAGA,EAAkB14C,EAAOjoB,O,KAA9C2gE,IAAoD,M,wCAAEA,I,aAe/D,IAAS7gE,EAAI,EAAGA,EAAIu+D,EAAar+D,OAAQF,IAClCy+D,EAAcF,EAAav+D,GAC3BwC,EAAQ,EAA4Bi8D,EAAY52D,OACtD42D,EAAYzc,iBAAiBt8C,KAAKyY,GAAGpc,KAAMS,G,qCAQ7C,IAAK,EAAL,EAAwB,EAAA+7D,EAAA,gBAAfE,EAAW,MACPzc,iBAAiBt8C,KAAKyY,GAAGpc,KAAMga,EAAMvZ,O,qCA4B9C,YAAAgvH,+BAAN,SAAqC/yD,G,mIAC9BppD,EAASopD,EAAY3c,kBAAkBp8C,KAAKyY,GAAG4jC,OAC/ChmC,EAAQrW,KAAKvC,EAAE+sD,OAEf8hE,EAA0B,GAC5Bj2G,EAAMiN,kBAAoBjN,EAAMkN,sBACnC,GAAMlN,EAAMkN,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAC/EwvH,EAAcr8G,EAAM9N,OAASrF,MAF3B,M,cACH,S,aAIAwvH,EAAcxxH,KAAKub,EAAMvZ,O,wBAGpBwiE,EAAa,EAAA9yD,cAAc2kB,wBAAwBm7F,GACzDvzD,EAAY7c,gBAAgB5uC,sBAAsBtN,KAAKyY,GAAGpc,KAAMijE,EAAmB,OAAGA,EAAoB,S,YAGrG,YAAA0sD,+BAAN,SAAqCnzD,G,wIAC9BxiD,EAAQrW,KAAKvC,EAAE+sD,QACXlnC,kBAAoBjN,EAAMkN,sBACnC,GAAMlN,EAAMkN,sBAAsB4mC,+BAA+B0O,GAAc,SAACE,EAAaj8D,GAC5Fi8D,EAAYzc,iBAAiB,EAAK7jC,GAAGpc,KAAMS,OAFzC,M,cACH,S,aAIA,IAAK,EAAL,EAAwB,EAAA+7D,EAAA,eAAJ,KACPvc,iBAAiBt8C,KAAKyY,GAAGpc,KAAMga,EAAMvZ,O,mCAkF5C,YAAAsvH,wBAAR,SACC7qH,EACA4qH,EACAxoH,GAEA,IAAM4H,EAAOhK,EAASgK,KAChBghH,EAAgBJ,EAAwB5gH,GAS9C,OARIghH,EAECA,EAAc/xH,OAASmJ,IAC1BwoH,EAAwB5gH,GAAQ,IAAI4oB,MAAMxwB,IAG3CwoH,EAAwB5gH,GAAQ,IAAI4oB,MAAMxwB,GAEpCwoH,EAAwB5gH,IAQjC,EAlVA,CAAyC,EAAAzH,cAA5B,EAAA2+G,uB,yFC5Eb,QAEA,SACA,QACA,QAEA,QAKA,OASM3hF,EAAe,IARrB,uE,OACC,EAAAmqF,MAAQ,EAAA/rH,YAAYV,QAAQ,EAAA+F,YAAYqB,OAAQ,CAC/C27B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAAtJ,KAAO,EAAA6C,YAAYJ,OAAO,I,EAC3B,OAP0C,iBAO1C,EAPA,CAA0C,EAAAK,mBAU1C,yE,OACC,EAAA0iC,cAAgBf,E,EAoDjB,OArDyC,iBAEjC,EAAAhjC,KAAP,WACC,MAAO,iBAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,uCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAIJ,IAHA,IAAM3a,EAAa2a,EAAe,GAGV,MAFH3a,EAAW45D,2BAA2Bx6D,KAAKyY,GAAGpc,MAE3C,eAAc,CAAjC,IAAI2Q,EAAW,KACnB,OAAQhN,KAAKyY,GAAGwyG,OACf,KAAK,EAAA1mH,YAAYqB,OAChB5F,KAAKwsH,wBAAwB5rH,EAAYoM,GAC1C,KAAK,EAAAzI,YAAYsB,OAChB7F,KAAKysH,wBAAwB7rH,EAAYoM,IAI5ChN,KAAKW,eAAeC,IAGrB,YAAA4rH,wBAAA,SAAwB5rH,EAAuBoM,GAC9C,IAAmB,UAAApM,EAAWC,UAAX,eAAsB,CAA1B,KACPo8C,UAAS,SAACwsE,GAChB,IAAMpvD,EAAQovD,EACVpvD,EAAM94D,UACa,IAAI,EAAAyK,aAAaquD,EAAM94D,UAC/BwN,iBAAiB/B,QAKnC,YAAAy/G,wBAAA,SAAwB7rH,EAAuBoM,GAC9C,I,eAASzP,GACR,IAAI4E,EAAQ,EACZ5E,EAAO0/C,UAAS,SAACwsE,GAChB,IAAMpvD,EAAQovD,EACM,IAAI,EAAAxxG,WAAWoiD,EAAOl4D,GAC9B4M,iBAAiB/B,GAC7B7K,QANiB,MAAAvB,EAAWC,UAAX,eAAsB,C,EAA1B,QAUjB,EArDA,CAAyC,EAAAiD,cAA5B,EAAA4+G,uB,yFCtBb,QACA,OACA,4BACA,4BACA,2BAEA,QAEA,OAMM5hF,EAAe,IALrB,uE,OACC,EAAAzkC,KAAO,EAAA6C,YAAYJ,OAAO,IAC1B,EAAA4tH,YAAc,EAAAxtH,YAAYd,SAAQ,GAClC,EAAAwQ,SAAW,EAAA1P,YAAYJ,OAAO,GAAI,CAACs9B,WAAY,CAACswF,YAAa,K,EAC9D,OAJ6C,iBAI7C,EAJA,CAA6C,EAAAvtH,mBAO7C,yE,OACC,EAAA0iC,cAAgBf,E,EAuFjB,OAxF4C,iBAEpC,EAAAhjC,KAAP,WACC,MAAO,oBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAClCvb,KAAK2sH,qBAAqB/rH,GAC1BZ,KAAKW,eAAeC,IAGrB,YAAA+rH,qBAAA,SAAqB/rH,GAArB,WACO+O,EAAS/O,EAAW+O,SAC1B,GAAsB,IAAlBA,EAAOnV,QAGU,KAAjBwF,KAAKyY,GAAGpc,KAAZ,CAIA,IAGI0rB,EAAyB9e,EAHvBiE,EAAcyC,EAAO,GAAGzC,YAAYlN,KAAKyY,GAAGpc,MAC5CgR,EAASsC,EAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa,EAAK6H,GAAGpc,SAC5DuwH,EAA0C,GAE9C,OAAQ1/G,GACP,KAAK,EAWJ,GAHA6a,EAAM,UAAW1a,GACjBpE,EAAM,UAAWoE,GAEb,UAAgB0a,IAAQ,UAAgB9e,GAC3C,IAAkB,UAAAoE,EAAA,eAAQ,CAArB,IAAIvQ,EAAK,KACP+vH,EAAmB5jH,EAAM8e,GAAOjrB,EAAQirB,IAAQ9e,EAAM8e,GAAO,EACnE6kG,EAAkB9xH,KAAK+xH,GAGzB,MAED,KAAK,EAYJ,GAXA9kG,EAAM,IAAI,EAAAxZ,QACT,UAAWlB,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAElwB,MAC/B,UAAWR,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAEjwB,MAC/B,UAAWT,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAE/vB,OAEhC/E,EAAM,IAAI,EAAAsF,QACT,UAAWlB,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAElwB,MAC/B,UAAWR,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAEjwB,MAC/B,UAAWT,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAE/vB,OAG5B+Z,aAAe,EAAAxZ,SAAWtF,aAAe,EAAAsF,QAC5C,IAAkB,UAAAlB,EAAA,eAAQ,CAAjBvQ,EAAK,KACP+vH,EAAmB,IAAI,EAAAt+G,SAC3BzR,EAAM+Q,EAAIka,EAAIla,IAAM5E,EAAI4E,EAAIka,EAAIla,IAChC/Q,EAAMgR,EAAIia,EAAIja,IAAM7E,EAAI6E,EAAIia,EAAIja,IAChChR,EAAMkR,EAAI+Z,EAAI/Z,IAAM/E,EAAI+E,EAAI+Z,EAAI/Z,IAElC4+G,EAAkB9xH,KAAK+xH,IAM3B,IAAIC,EAAc9sH,KAAKyY,GAAGpc,KACtB2D,KAAKyY,GAAGi0G,cACXI,EAAc9sH,KAAKyY,GAAG7J,SACjBhO,EAAW+L,WAAWmgH,IAC1BlsH,EAAW27C,0BAA0BuwE,EAAa5/G,EAAa,IAIjE0/G,EAAkBhrH,SAAQ,SAACirH,EAAkBvyH,GAC9BqV,EAAOrV,GACfgiD,iBAAiBwwE,EAAaD,QAGvC,EAxFA,CAA4C,EAAA/oH,cAA/B,EAAA6+G,0B,kFCNDoK,E,OAVZ,4BACA,4BAEA,QACA,QACA,QAGA,SAEA,SAAYA,GACX,iBACA,iBACA,iCAHD,CAAYA,EAAA,EAAAA,oBAAA,EAAAA,kBAAiB,KAW7B,IAAMC,EAAyB,CAC9B,CAAC3wH,KAAM,MAAOS,MAAOiwH,EAAkBE,KACvC,CAAC5wH,KAAM,MAAOS,MAAOiwH,EAAkBG,KACvC,CAAC7wH,KAAM,cAAeS,MAAOiwH,EAAkBI,cAGhD,OAmBMrsF,EAAe,IAlBrB,uE,OACC,EAAAssF,WAAa,EAAAluH,YAAYV,QAAQ,EAAA+F,YAAYqB,OAAQ,CACpD27B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAA0nH,SAAW,EAAAnuH,YAAYV,QAAQ,EAAA+F,YAAYsB,OAAQ,CAClD07B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAA3I,KAAO,EAAAkC,YAAYV,QAAQuuH,EAAkBE,IAAK,CACjD1rF,KAAM,CACLC,QAASwrF,KAGX,EAAA3wH,KAAO,EAAA6C,YAAYJ,OAAO,I,EAC3B,OAjB2C,iBAiB3C,EAjBA,CAA2C,EAAAK,mBAoB3C,yE,OACC,EAAA0iC,cAAgBf,EAeR,EAAAwsF,wBAAgD,GAChD,EAAAC,iCAAmE,G,EA+I5E,OAhK0C,iBAElC,EAAAzvH,KAAP,WACC,MAAO,kBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAI3D,YAAA1/E,cAAA,aAMA,YAAAE,KAAA,SAAKC,GACJvb,KAAKwtH,YAAcjyG,EAAe,GAElCvb,KAAKstH,wBAA0B,GAC/BttH,KAAKutH,iCAAmC,GAExC,IAAwB,UAAAvtH,KAAKwtH,YAAY30D,eAAjB,eAAiC,CAApD,IAAIE,EAAW,KACnB/4D,KAAKytH,aAAe10D,EACpB/4D,KAAK0tH,cACL1tH,KAAK2tH,gBACL3tH,KAAK4tH,aAMN5tH,KAAKW,eAAeX,KAAKwtH,cA8ClB,YAAAE,YAAR,WAEC,IADA,IACwB,MADH,EAAAxjH,WAAWC,aAAanK,KAAKyY,GAAGpc,MAC7B,eAAc,CAAjC,IAAI2Q,EAAW,KACnB,OAAQhN,KAAKyY,GAAG20G,YACf,KAAK,EAAA7oH,YAAYqB,OAChB,OAAO5F,KAAK6tH,wBAAwB7gH,GACrC,KAAK,EAAAzI,YAAYsB,OAChB,OAAO7F,KAAK8tH,wBAAwB9gH,MAKhC,YAAA6gH,wBAAR,SAAgC7gH,GAC/B,GAAIhN,KAAKytH,aAAc,CACtB,IAAM99G,EAAS3P,KAAKytH,aAAa99G,SACjC3P,KAAKstH,wBAAwBtgH,GAAe2C,EAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa5D,QAI/E,YAAA8gH,wBAAR,SAAgC9gH,GAC/BhN,KAAKstH,wBAAwBtgH,GAAe,GACxChN,KAAKytH,cACRztH,KAAKstH,wBAAwBtgH,GAAalS,KAAKkF,KAAKytH,aAAa78G,aAAa5D,KAIxE,YAAA2gH,cAAR,WAEC,IADA,IACwB,MADHlzH,OAAO6R,KAAKtM,KAAKstH,yBACd,eAAc,CAAjC,IAAItgH,EAAW,KACbK,EAASrN,KAAKstH,wBAAwBtgH,GAC5C,OAAQhN,KAAKyY,GAAGzb,MACf,KAAK+vH,EAAkBE,IACtBjtH,KAAKutH,iCAAiCvgH,GAAe,UAAWK,GAChE,MACD,KAAK0/G,EAAkBG,IACtBltH,KAAKutH,iCAAiCvgH,GAAe,UAAWK,GAChE,MAED,KAAK0/G,EAAkBI,YACtBntH,KAAKutH,iCAAiCvgH,GAAeK,EAAO,MAQxD,YAAAugH,WAAR,WAEC,IADA,IACwB,MADHnzH,OAAO6R,KAAKtM,KAAKutH,kCACd,eAAc,CAAjC,IAAIvgH,EAAW,KACb6D,EAAY7Q,KAAKutH,iCAAiCvgH,GACxD,GAAiB,MAAb6D,EACH,OAAQ7Q,KAAKyY,GAAG40G,UACf,KAAK,EAAA9oH,YAAYqB,OAChB5F,KAAK+tH,qBAAqB/gH,EAAa6D,GACvC,MACD,KAAK,EAAAtM,YAAYsB,OAChB7F,KAAKguH,qBAAqBhhH,EAAa6D,MAOpC,YAAAk9G,qBAAR,SAA6B/gH,EAAqB6D,GACjD,GAAI7Q,KAAKwtH,aAAextH,KAAKytH,aAAc,CAE1C,IADyBztH,KAAKwtH,YAAY7gH,WAAWK,GAC9B,CAEtBhN,KAAKwtH,YAAYjxE,0BAA0BvvC,EADxB,EACiD6D,GAGtD7Q,KAAKytH,aAAa99G,SAC1B/N,SAAQ,SAACqO,GAAU,OAAAA,EAAMqsC,iBAAiBtvC,EAAa6D,QAIxD,YAAAm9G,qBAAR,SAA6BhhH,EAAqB6D,G,MAChC,QAAjB,EAAA7Q,KAAKytH,oBAAY,SAAEnxE,iBAAiBtvC,EAAa6D,IAEnD,EAhKA,CAA0C,EAAA/M,cAA7B,EAAA8+G,wB,yFChDb,4BACA,4BACA,2BACA,2BACA,2BACA,OACA,QAGA,OAOM9hF,EAAe,IANrB,uE,OACC,EAAAzkC,KAAO,EAAA6C,YAAYJ,SACnB,EAAAurE,KAAO,EAAAnrE,YAAYR,OACnB,EAAAguH,YAAc,EAAAxtH,YAAYd,QAAQ,GAClC,EAAAwQ,SAAW,EAAA1P,YAAYJ,OAAO,GAAI,CAACs9B,WAAY,CAACswF,YAAa,K,EAC9D,OALyC,iBAKzC,EALA,CAAyC,EAAAvtH,mBAQzC,yE,OACC,EAAA0iC,cAAgBf,E,EAwFjB,OAzFwC,iBAEhC,EAAAhjC,KAAP,WACC,MAAO,gBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,IAG1B,YAAA3I,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAClCvb,KAAKiuH,iBAAiBrtH,GACtBZ,KAAKW,eAAeC,IAGrB,YAAAqtH,iBAAA,SAAiBrtH,GAAjB,WACO+O,EAAS/O,EAAW+O,SAC1B,GAAsB,IAAlBA,EAAOnV,QAGU,KAAjBwF,KAAKyY,GAAGpc,KAAZ,CAIA,IAEI0rB,EAAyB9e,EAFvBiE,EAAcyC,EAAO,GAAGzC,YAAYlN,KAAKyY,GAAGpc,MAC5CgR,EAASsC,EAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa,EAAK6H,GAAGpc,SAE5DuwH,EAA0C,IAAIz4F,MAAMxkB,EAAOnV,QAC/D,OAAQ0S,GACP,KAAK,EACJ,GAAIlN,KAAKyY,GAAGy1G,oBAAqB,CAChC,IAAMC,EAAgB,UAAY,UAAc9gH,IAC1C,EAAqC,GAC3C8gH,EAAcvsH,SAAQ,SAACwsH,EAAc9zH,GAAM,OAAC,EAAe8zH,GAAgB9zH,KAC3EsyH,EAAoBv/G,EAAOhD,KAAI,SAACvN,GAAU,SAAeA,WAKzD,GAHAirB,EAAM,UAAW1a,GACjBpE,EAAM,UAAWoE,GAEb,UAAgB0a,IAAQ,UAAgB9e,GAC3C,IAAK,IAAI3O,EAAI,EAAGA,EAAI+S,EAAO7S,OAAQF,IAAK,CACvC,IAAMwC,EAAQuQ,EAAO/S,GACfuyH,EAAmB5jH,EAAM8e,GAAOjrB,EAAQirB,IAAQ9e,EAAM8e,GAAO,EACnE6kG,EAAkBtyH,GAAKuyH,EAI1B,MAED,KAAK,EAYJ,GAXA9kG,EAAM,IAAI,EAAAxZ,QACT,UAAWlB,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAElwB,MAC/B,UAAWR,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAEjwB,MAC/B,UAAWT,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAE/vB,OAEhC/E,EAAM,IAAI,EAAAsF,QACT,UAAWlB,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAElwB,MAC/B,UAAWR,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAEjwB,MAC/B,UAAWT,EAAOhD,KAAI,SAAC0zB,GAAM,OAAAA,EAAE/vB,OAG5B+Z,aAAe,EAAAxZ,SAAWtF,aAAe,EAAAsF,QAC5C,IAASjU,EAAI,EAAGA,EAAI+S,EAAO7S,OAAQF,IAAK,CACjCwC,EAAQuQ,EAAO/S,GACfuyH,EAAmB,IAAI,EAAAt+G,SAC3BzR,EAAM+Q,EAAIka,EAAIla,IAAM5E,EAAI4E,EAAIka,EAAIla,IAChC/Q,EAAMgR,EAAIia,EAAIja,IAAM7E,EAAI6E,EAAIia,EAAIja,IAChChR,EAAMkR,EAAI+Z,EAAI/Z,IAAM/E,EAAI+E,EAAI+Z,EAAI/Z,IAElC4+G,EAAkBtyH,GAAKuyH,GAM3B,IAAIC,EAAc9sH,KAAKyY,GAAGpc,KACtB2D,KAAKyY,GAAGi0G,cACXI,EAAc9sH,KAAKyY,GAAG7J,SACjBhO,EAAW+L,WAAWmgH,IAC1BlsH,EAAW27C,0BAA0BuwE,EAAa5/G,EAAa,IAIjE0/G,EAAkBhrH,SAAQ,SAACirH,EAAkBvyH,GAC9BqV,EAAOrV,GACfgiD,iBAAiBwwE,EAAaD,QAGvC,EAzFA,CAAwC,EAAA/oH,cAA3B,EAAA++G,sB,yFClBb,QAGA,OACA,QACA,QAUM/hF,EAAe,IATrB,uE,OACC,EAAAmqF,MAAQ,EAAA/rH,YAAYV,QAAQ,EAAA+F,YAAYqB,OAAQ,CAC/C27B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAAgJ,SAAW,EAAAzP,YAAYJ,SACvB,EAAA8P,SAAW,EAAA1P,YAAYJ,S,EACxB,OAR0C,iBAQ1C,EARA,CAA0C,EAAAK,mBAW1C,yE,OACC,EAAA0iC,cAAgBf,E,EAkBjB,OAnByC,iBAEjC,EAAAhjC,KAAP,WACC,MAAO,iBAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAEJ,IAAM3a,EAAa2a,EAAe,GAElC3a,EAAWu5D,cAAcn6D,KAAKyY,GAAG9J,SAAU3O,KAAKyY,GAAG7J,SAAU5O,KAAKyY,GAAGwyG,OAErEjrH,KAAKW,eAAeC,IAEtB,EAnBA,CAAyC,EAAAkD,cAA5B,EAAAg/G,uB,yFCjBb,QAIA,SACA,SACA,SAcA,OACA,QAiBMhiF,EAAe,IAhBrB,uE,OACC,EAAA85B,UAAY,EAAA17D,YAAYJ,SACxB,EAAAuvH,WAAa,EAAAnvH,YAAYJ,SACzB,EAAAzC,KAAO,EAAA6C,YAAYJ,SACnB,EAAAwvH,kBAAoB,EAAApvH,YAAYV,QAAQ,EAAG,CAC1C2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAOtB,EAAAmrF,mBAAqB,EAAArvH,YAAYZ,MAAM,GACvC,EAAAkwH,YAAc,EAAAtvH,YAAYZ,MAAM,G,EACjC,OAf4C,iBAe5C,EAfA,CAA4C,EAAAa,mBAkB5C,yE,OACC,EAAA0iC,cAAgBf,E,EAyLjB,OA1L2C,iBAEnC,EAAAhjC,KAAP,WACC,MAAO,mBAYD,EAAAgC,sBAAP,WACC,MAAO,CAAC,qCAAsC,yCAG/C,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,UAAW,EAAA92F,eAAek3F,SAG/E,YAAA5/E,KAAN,SAAWC,G,sHAeV,OAXAvb,KAAKyuH,iBAAmBlzG,EAAe,GACjCmzG,EAAc1uH,KAAKyuH,iBAAiBryE,kBAAkBp8C,KAAKyY,GAAG41G,YAGpEruH,KAAK2uH,gBAAkBpzG,EAAe,GAEtCvb,KAAK4uH,cAAgB5uH,KAAK2uH,gBAAgBn0D,2BAA2Bx6D,KAAKyY,GAAGpc,MAC7E2D,KAAK6uH,gDACL7uH,KAAK8uH,0BAA0B9uH,KAAK2uH,iBACpC3uH,KAAK+uH,6BAEL,GAAM/uH,KAAKgvH,qBAAqBN,I,cAAhC,SACA1uH,KAAKW,eAAeX,KAAKyuH,kB,YAG1B,YAAAI,8CAAA,WACC,IAAwB,UAAA7uH,KAAK4uH,cAAL,eAAoB,CAAvC,IAAI5hH,EAAW,KACdhN,KAAK2uH,gBAAgBhiH,WAAWK,IACpChN,KAAKswB,OAAOhT,MAAMpd,IAAI,cAAc8M,EAAW,iCAK1C,YAAA8hH,0BAAR,SAAkCluH,GACjC,IAAMquH,EACqB,MAA1BjvH,KAAKkvH,mBAA6BlvH,KAAKkvH,oBAAsBtuH,EAAW03D,YAGzE,GAF0Bt4D,KAAKmvH,wBAA0BnvH,KAAKyY,GAAGmiD,WAExCq0D,EAAsB,CAC9CjvH,KAAKkvH,kBAAoBtuH,EAAW03D,YACpCt4D,KAAKmvH,sBAAwBnvH,KAAKyY,GAAGmiD,UAErC,IAAMw0D,EAAapvH,KAAK2uH,gBAAgBvyE,kBAAkBp8C,KAAKyY,GAAGmiD,WAElE56D,KAAKqvH,QAAU,IAAI,EAAAC,WAAWtvH,KAAK2uH,gBAAgBnjH,gBACnDxL,KAAKqvH,QAAQE,WAAWH,KAIlB,YAAAL,2BAAR,sBACC/uH,KAAK4uH,cAAchtH,SAAQ,SAACoL,GAC3B,IAAK,EAAKyhH,iBAAiB9hH,WAAWK,GAAc,CACnD,IAAME,EAAc,EAAKyhH,gBAAgBzhH,YAAYF,GACrD,EAAKyhH,iBAAiBlyE,0BAA0BvvC,EAAaE,EAAa,QAK/D,YAAA8hH,qBAAd,SAAmCN,G,gHAGlC,UADiB,IAAI,EAAAlxD,cACNN,iBAAiBwxD,EAAa1uH,KAAKwvH,+BAA+BnyH,KAAK2C,Q,cAAtF,S,YAOO,YAAAwvH,+BAAR,SAAuCC,GAQtC,I,MAPMC,EAAa1vH,KAAKyY,GAAG81G,mBAAqBvuH,KAAKyY,GAAG+1G,YAClDmB,GACO,QAAZ,EAAA3vH,KAAKqvH,eAAO,eAAEO,YAAYH,EAAWhgH,WAAYigH,EAAY1vH,KAAKyY,GAAG61G,qBAAsB,GAKpE,MAAAtuH,KAAK4uH,cAAL,eAAoB,CAAvC,IAAI5hH,EAAW,KACnBhN,KAAK6vH,oBAAoBJ,EAAYE,EAAgB3iH,KAW/C,YAAA6iH,oBAAR,SAA4BC,EAAuBC,EAAyB/iH,GAC3E,IAAI6D,EAea,OAZjBA,EAAY,EAAAm/G,gBAAgBC,QAC3BH,EACAC,EACA/iH,EACAhN,KAAKyY,GAAG81G,mBACRvuH,KAAKyY,GAAG+1G,eAQRsB,EAAWxzE,iBAAiBtvC,EAAa6D,IA+D5C,EA1LA,CAA2C,EAAA/M,cAA9B,EAAAi/G,yB,yFCxCb,4BAEA,4BAQA,2BAqNA,OApNQ,EAAAkN,QAAP,SACCH,EACAV,EACApiH,EACAuhH,EACA2B,GAEA,OAAQd,EAAW50H,QAClB,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAOwF,KAAKmwH,0BACXL,EACAV,EAAW,GACXpiH,EACAuhH,EACA2B,GAEF,QAOC,OAAOlwH,KAAKowH,kCACXN,EACAV,EACApiH,EACAuhH,EACA2B,KAKG,EAAAC,0BAAP,SACCL,EACAO,EACArjH,EACAuhH,EACA2B,GAEA,IAAMI,EAAgBR,EAAWrgH,WAC3B8gH,EAAeF,EAAU5gH,WACzBsX,EAAWupG,EAAc1O,WAAW2O,GAEpCC,EAAYH,EAAUz/G,aAAa5D,GACzC,OAAOhN,KAAKywH,8BACXX,EACAU,EACAxjH,EACA+Z,EACAwnG,EACA2B,IAIK,EAAAQ,sBAAP,SAA6B3pG,EAAkBwnG,EAA4B2B,GAC1E,OAAQnpG,EAAWwnG,GAAsB2B,GAGnC,EAAAO,8BAAP,SACCX,EACAU,EACAxjH,EACA+Z,EACAwnG,EACA2B,GAEA,GAAInpG,GAAYwnG,EACf,OAAOiC,EAEP,IAAMG,EAAab,EAAWl/G,aAAa5D,GACrC4jH,EAAQ5wH,KAAK0wH,sBAAsB3pG,EAAUwnG,EAAoB2B,GACvE,OAAOU,EAAQD,GAAc,EAAIC,GAASJ,GAqCrC,EAAAJ,kCAAP,SACCN,EACAV,EACApiH,EACAuhH,EACA2B,GALD,WAyCOW,EAAsBzB,EAAW/kH,KAAI,SAACgmH,GAC3C,OAAO,EAAKF,0BAA0BL,EAAYO,EAAWrjH,EAAauhH,EAAoB2B,MAE/F,OAAO,UAAWW,IAAwB,GAsBpC,EAAApK,QAAP,SAAeqK,EAA2BC,GACzC,OAAQA,EAAgBv2H,QACvB,KAAK,EACJ,OAAO,EACR,KAAK,EACJ,OAAOwF,KAAKgxH,gBAAgBF,EAAkBC,GAC/C,QAEC,OADAA,EAAkBA,EAAgBlzH,MAAM,EAAG,GACpCmC,KAAKixH,gBAAgBH,EAAkBC,KAI1C,EAAAC,gBAAP,SAAuBF,EAA2BC,GACjD,IAAMG,EAAoBH,EAAgB1mH,KAAI,SAAC8mH,GAAmB,OAAAL,EAAiBlP,WAAWuP,MAExFzJ,EAAiB,UAAWwJ,GAElC,MAAO,CAACA,EAAkB,GAAKxJ,EAAgBwJ,EAAkB,GAAKxJ,IAGhE,EAAAuJ,gBAAP,SAAuBH,EAA2BC,GACjD,IAAMG,EAAoBH,EAAgB1mH,KAAI,SAAC8mH,GAAmB,OAAAL,EAAiBlP,WAAWuP,MAExFzJ,EAAiB,UAAW,CACjCwJ,EAAkB,GAAKA,EAAkB,GACzCA,EAAkB,GAAKA,EAAkB,GACzCA,EAAkB,GAAKA,EAAkB,KAG1C,MAAO,CACLA,EAAkB,GAAKA,EAAkB,GAAMxJ,EAC/CwJ,EAAkB,GAAKA,EAAkB,GAAMxJ,EAC/CwJ,EAAkB,GAAKA,EAAkB,GAAMxJ,IAGnD,EArNA,GAAa,EAAAsI,mB,yFCTb,QAEA,2BAIA,SAEA,aAGC,WAAYj2D,GACX/5D,KAAKq+E,MAAQ,IAAI,EAAA+yC,WAAWr3D,GA+C9B,OAxCC,YAAAw1D,WAAA,SAAW5/G,GACV3P,KAAKq+E,MAAMkxC,WAAW5/G,IAGvB,YAAAstC,SAAA,SAASnoC,GACR9U,KAAKq+E,MAAMphC,SAASnoC,IAOrB,YAAA86G,YAAA,SAAYngH,EAAmBsX,EAAkBsqG,GAChD,IAAMC,EAAS,IAAI,EAAAC,OAAO9hH,EAAUsX,GAChCyqG,EAA4B,GAMhC,OAJIxxH,KAAKq+E,MAAMozC,kBAAkBH,IAChCtxH,KAAKq+E,MAAMqzC,iBAAiBJ,EAAQE,GAGb,MAApBH,EACIG,GAEHA,EAAah3H,OAAS62H,IAWzBG,GAVAA,EAAe,UAAcA,GAAc,SAACvhH,GAC3C,OAAOA,EAAMR,WAAWmyG,WAAWnyG,OASR5R,MAAM,EAAGwzH,IAG/BG,IAGV,EAnDA,GAAa,EAAAlC,c,yFCPb,QACA,2BAKA,aASC,WAAoBqC,EAAqBC,QAAA,IAAAA,MAAA,GAArB,KAAAD,QAAqB,KAAAC,SARzC,KAAAC,kBAA4C,GAC5C,KAAAC,qBAAgD,GAChD,KAAAC,QAAwB,GAGxB,KAAAC,0BAA8C,GAC9C,KAAAC,oCAA8C,EAG7CjyH,KAAKkyH,QAAUlyH,KAAK2xH,MAAM1oH,IACxBnG,QACAwc,IAAItf,KAAK2xH,MAAM5pG,KACf7C,eAAe,IA8InB,OAxIC,YAAAitG,MAAA,WACC,OAAOnyH,KAAK4xH,QAGb,YAAA30E,SAAA,SAASnoC,GACRA,EAAS9U,MACOvF,OAAO4S,OAAOrN,KAAK6xH,mBAC3BjwH,SAAQ,SAAC4B,GAChBA,EAAKy5C,SAASnoC,OAIhB,YAAA28G,kBAAA,SAAkBH,GACjB,QAAItxH,KAAK2xH,OACD3xH,KAAK2xH,MAAMS,iBAAiBd,IAMrC,YAAAI,iBAAA,SAAiBJ,EAAgBe,GACL,GAAvBryH,KAAK+xH,QAAQv3H,OACK,UAAeC,OAAO4S,OAAOrN,KAAK8xH,uBAClBzqG,QAAO,SAACpX,GAAU,OAAAqhH,EAAOgB,cAAcriH,EAAMR,eAClE7N,SAAQ,SAACqO,GACxBoiH,EAAmBv3H,KAAKmV,MAIejQ,KAAK+xH,QAAQ1qG,QAAO,SAACkrG,GAAS,OAAAA,EAAKd,kBAAkBH,MAG7D1vH,SAAQ,SAAC2wH,GAAS,OAAAA,EAAKb,iBAAiBJ,EAAQe,OAKlF,YAAA7mH,aAAA,WACC,OAAOxL,KAAK2xH,OAMb,YAAApC,WAAA,SAAW5/G,GAAX,WAGC3P,KAAK8xH,qBAAuB,GAC5B,IAAkB,UAAAniH,EAAA,eAAQ,CAArB,IAAIM,EAAK,KACbjQ,KAAKwyH,UAAUviH,GAGhB,IAAMwiH,EAAah4H,OAAO6R,KAAKtM,KAAK8xH,sBAChCW,EAAWj4H,OAAS,GACvBi4H,EAAW7wH,SAAQ,SAAC8wH,GACnB,EAAKC,YAAYD,OAKpB,YAAAC,YAAA,SAAYD,GACX,IACMH,EAAO,IAAInB,EADLpxH,KAAK4yH,WAAWF,GACK1yH,KAAK4xH,OAAS,GAC/C5xH,KAAK6xH,kBAAkBa,GAAaH,EACpCvyH,KAAK+xH,QAAQj3H,KAAKy3H,GAGlBA,EAAKhD,WAAWvvH,KAAK8xH,qBAAqBY,KAG3C,YAAAF,UAAA,SAAUviH,GACT,IAAMyiH,EAAY1yH,KAAK6yH,WAAW5iH,EAAMR,YACI,MAAxCzP,KAAK8xH,qBAAqBY,KAC7B1yH,KAAK8xH,qBAAqBY,GAAa,IAExC1yH,KAAK8xH,qBAAqBY,GAAW53H,KAAKmV,IAGnC,YAAA4iH,WAAR,SAAmBpjH,GAIlB,MAAO,IAHOA,EAAS5B,EAAI7N,KAAKkyH,QAAQrkH,EAAI,EAAI,IAClC4B,EAAS3B,EAAI9N,KAAKkyH,QAAQpkH,EAAI,EAAI,IAClC2B,EAASzB,EAAIhO,KAAKkyH,QAAQlkH,EAAI,EAAI,IAIjD,YAAA4kH,WAAA,SAAWF,GAKV,OAJK1yH,KAAKiyH,qCACTjyH,KAAK8yH,yBACL9yH,KAAKiyH,oCAAqC,GAEpCjyH,KAAKgyH,0BAA0BU,IAG/B,YAAAK,aAAR,SAAqBC,EAAeC,EAAeC,GAClD,IAAMC,EAASnzH,KAAK2xH,MAAM5pG,IAAIjlB,QAW9B,OAVIkwH,IACHG,EAAOtlH,EAAI7N,KAAK2xH,MAAM1oH,IAAI4E,GAEvBolH,IACHE,EAAOrlH,EAAI9N,KAAK2xH,MAAM1oH,IAAI6E,GAEvBolH,IACHC,EAAOnlH,EAAIhO,KAAK2xH,MAAM1oH,IAAI+E,GAGpBmlH,EACLrwH,QACAwc,IAAItf,KAAKkyH,SACThtG,eAAe,KAGV,YAAA4tG,uBAAR,WACC,IAAMM,EAAe,GACrBA,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAC1CK,EAAat4H,KAAKkF,KAAK+yH,aAAa,EAAG,EAAG,IAM1C,IAJA,IAAMM,EAAoBrzH,KAAK2xH,MAAM1oH,IACnCnG,QACA2sB,IAAIzvB,KAAK2xH,MAAM5pG,KACf7C,eAAe,KACO,MAAAkuG,EAAA,eAAc,CAAjC,IAAIE,EAAW,KACbZ,EAAY1yH,KAAK6yH,WAAWS,GAC5Bv5D,EAAO,IAAI,EAAAC,KAChBs5D,EAAYxwH,QAAQ2sB,IAAI4jG,GACxBC,EAAYxwH,QAAQwc,IAAI+zG,IAEzBrzH,KAAKgyH,0BAA0BU,GAAa34D,IAI/C,EA3JA,GAAa,EAAAq3D,c,yFCRb,QACA,QACA,2BACA,QACA,QAEA,OAKMtwF,EAAe,IAHrB,uE,OACC,EAAApT,UAAY,EAAAxuB,YAAYZ,MAAM,I,EAC/B,OAFyC,iBAEzC,EAFA,CAAyC,EAAAa,mBAKzC,yE,OACC,EAAA0iC,cAAgBf,E,EA8CjB,OA/CwC,iBAEhC,EAAAhjC,KAAP,WACC,MAAO,gBAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,mCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,IAG1B,YAAA3I,KAAA,SAAKC,GACJ,IAAMxZ,EAAYwZ,EAAe,GAG3BmS,EAAY1tB,KAAKyY,GAAGiV,UAGpBqsC,EAAOh4D,EAAUyJ,eAEjB23B,EAAQ,CACbt1B,EAAG,UAAaksD,EAAKhyC,IAAIla,EAAGksD,EAAK9wD,IAAI4E,EAAG6f,GACxC5f,EAAG,UAAaisD,EAAKhyC,IAAIja,EAAGisD,EAAK9wD,IAAI6E,EAAG4f,GACxC1f,EAAG,UAAa+rD,EAAKhyC,IAAI/Z,EAAG+rD,EAAK9wD,IAAI+E,EAAG0f,IAKnCmF,EAAsB,GAC5BsQ,EAAMt1B,EAAEjM,SAAQ,SAACiM,GAChBs1B,EAAMr1B,EAAElM,SAAQ,SAACkM,GAChBq1B,EAAMn1B,EAAEpM,SAAQ,SAACoM,GAChB6kB,EAAU/3B,KAAK+S,GACfglB,EAAU/3B,KAAKgT,GACf+kB,EAAU/3B,KAAKkT,YAKlB,IAAMzM,EAAW,IAAI,EAAA8O,eACrB9O,EAASgM,aAAa,WAAY,IAAI,EAAA0qG,gBAAgB,IAAIllF,aAAaF,GAAY,IAEnF7yB,KAAKsB,aAAaC,EAAU,EAAAiB,aAAaC,YAAY0B,SAEvD,EA/CA,CAAwC,EAAAL,cAA3B,EAAAk/G,sB,yFCbb,QAIA,OACA,QAYMliF,EAAe,IAPrB,uE,OACC,EAAA9zB,YAAc,EAAA9N,YAAYJ,SAC1B,EAAA8xH,MAAQ,EAAA1xH,YAAYZ,MAAM,GAAK,CAC9B6kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,K,EAEvB,OANmC,iBAMnC,EANA,CAAmC,EAAAjkC,mBASnC,yE,OACC,EAAA0iC,cAAgBf,E,EAwEjB,OAzEkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,yBAA0B,yBAEnC,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,UAAW,EAAA92F,eAAek3F,SAGrF,YAAA5/E,KAAA,SAAKC,GAmBJ,IAPA,IAMIg4G,EAASC,EANPC,EAAcl4G,EAAe,GAC7Bm4G,EAAcn4G,EAAe,GAE7Bo4G,EAAWF,EAAY5yH,UACvB+yH,EAAWF,EAAY7yH,UAGpBvG,EAAI,EAAGA,EAAIq5H,EAASn5H,OAAQF,IACpCi5H,EAAUI,EAASr5H,GACnBk5H,EAAUI,EAASt5H,GACnB0F,KAAK4wH,MAAM2C,EAASC,EAASxzH,KAAKyY,GAAGm4G,OAEtC5wH,KAAKW,eAAe8yH,IAQb,YAAA7C,MAAR,SAAc2C,EAAmBC,EAAmB5C,GACnD,IAAMxoD,EAAamrD,EAAiBhyH,SAC9B4mE,EAAaqrD,EAAiBjyH,SACpC,GAAiB,MAAb6mE,GAAkC,MAAbD,EAAzB,CAIA,IAAM0rD,EAAUzrD,EAAU/lE,aAAarC,KAAKyY,GAAGzL,aACzC8mH,EAAU3rD,EAAU9lE,aAAarC,KAAKyY,GAAGzL,aAC/C,GAAe,MAAX6mH,GAA8B,MAAXC,EAAvB,CAQA,IAJA,IAGIC,EAAIC,EAHFC,EAAgBJ,EAAQvxH,MACxB4xH,EAAgBJ,EAAQxxH,MAGrBhI,EAAI,EAAGA,EAAI25H,EAAcz5H,OAAQF,IACzCy5H,EAAKE,EAAc35H,GAET,OADV05H,EAAKE,EAAc55H,MAElB25H,EAAc35H,IAAM,EAAIs2H,GAASmD,EAAKnD,EAAQoD,GAIhD5rD,EAAUj8D,0BAEZ,EAzEA,CAAkC,EAAArI,cAArB,EAAAm/G,gB,yFCnBb,QACA,QAIA,SAGA,QAEA,OASMniF,EAAe,IARrB,uE,OACC,EAAAt7B,KAAO,EAAAtG,YAAYZ,MAAM,GACzB,EAAA61H,UAAY,EAAAj1H,YAAYZ,MAAM,EAAG,CAChC6kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,EAAAw2B,OAAS,EAAA16D,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACrC,OAPiC,iBAOjC,EAPA,CAAiC,EAAAG,mBAUjC,yE,OACC,EAAA0iC,cAAgBf,EASR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EAmE/B,OA7EgC,iBAExB,EAAA5nB,KAAP,WACC,MAAO,OAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,oDAOT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAW3D,YAAA5/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAC9B3a,EACHZ,KAAKq0H,iBAAiBzzH,GAEtBZ,KAAKs0H,uBAIC,YAAAA,oBAAR,WAEC,IAAMH,EAAYn0H,KAAKyY,GAAG07G,UACpB3uH,EAAOxF,KAAKyY,GAAGjT,KACfjE,EAAW,IAAI,EAAAgzH,kBAAkB/uH,EAAMA,EAAMA,EAAM2uH,EAAWA,EAAWA,GAE/E5yH,EAAS+gF,UAAUtiF,KAAKyY,GAAGmhD,OAAO/rD,EAAG7N,KAAKyY,GAAGmhD,OAAO9rD,EAAG9N,KAAKyY,GAAGmhD,OAAO5rD,GAEtEzM,EAAS4K,uBAETnM,KAAKsB,aAAaC,IAGX,YAAA8yH,iBAAR,SAAyBzzH,GAKxB,IAAMuzH,EAAYn0H,KAAKyY,GAAG07G,UAEpBp6D,EAAOn5D,EAAW4K,eAClBhG,EAAOu0D,EAAK9wD,IAAInG,QAAQ2sB,IAAIsqC,EAAKhyC,KACjC6xC,EAASG,EAAK9wD,IAClBnG,QACAwc,IAAIy6C,EAAKhyC,KACT7C,eAAe,IAEX3jB,EAAW,IAAI,EAAAgzH,kBAAkB/uH,EAAKqI,EAAGrI,EAAKsI,EAAGtI,EAAKwI,EAAGmmH,EAAWA,EAAWA,GAC/EzvG,EAAS1kB,KAAKo0H,gBAAgB3oG,mBAAmBmuC,GACvDr4D,EAAS6qB,YAAY1H,GAGrB1kB,KAAKsB,aAAaC,IASpB,EA7EA,CAAgC,EAAAuC,cAAnB,EAAAo/G,c,yFCrBb,OACA,SACA,QACA,SACA,QACA,QAEMsR,EAAa,IAAI,EAAAjmH,QAAQ,EAAG,EAAG,GAErC,OAeMuyB,EAAe,IAdrB,uE,OACC,EAAA4uB,OAAS,EAAAxwD,YAAYZ,MAAM,GAC3B,EAAA+T,SAAW,EAAAnT,YAAYV,QAAQ,GAAI,CAClC2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,EAAAuiF,KAAO,EAAAzmH,YAAYd,QAAQ,GAC3B,EAAAs/D,UAAY,EAAAx+D,YAAYZ,MAAM,IAAK,CAClC6kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAO,GACtBhH,WAAY,CAACupF,KAAM,KAEpB,EAAAzD,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACxC,OAboC,iBAapC,EAbA,CAAoC,EAAAG,mBAgBpC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EA8B/B,OApCmC,iBAE3B,EAAA5nB,KAAP,WACC,MAAO,UAKR,YAAA8c,gBAAA,aAKA,YAAAU,KAAA,WACKtb,KAAKyY,GAAGktG,KACX3lH,KAAKy0H,iBAELz0H,KAAK00H,gBAIP,YAAAD,eAAA,WACC,IAAMlzH,EAAW,EAAAw8D,uBAAuB5gE,OAAO6C,KAAKyY,GAAGi3C,OAAQ1vD,KAAKyY,GAAGpG,SAAUrS,KAAKyY,GAAGilD,WAEzF19D,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUizH,EAAYx0H,KAAKyY,GAAGypG,WAEnEliH,KAAKsB,aAAaC,EAAU,EAAA0C,WAAWG,gBAGxC,YAAAswH,aAAA,WACC,IAAMnzH,EAAW,IAAI,EAAAozH,qBAAqB30H,KAAKyY,GAAGi3C,OAAQ1vD,KAAKyY,GAAGpG,UAElErS,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUizH,EAAYx0H,KAAKyY,GAAGypG,WAEnEliH,KAAKsB,aAAaC,IAEpB,EApCA,CAAmC,EAAAuC,cAAtB,EAAAq/G,iB,yFC1Bb,QAEA,SAIA,QAOA,QAIMyR,EAAgB,IAAI,EAAA1vH,MAAM,EAAG,EAAG,GAKtC,OAcM47B,EAAe,IAbrB,uE,OACC,EAAA+zF,eAAiB,EAAA31H,YAAYd,QAAQ,GACrC,EAAA4O,YAAc,EAAA9N,YAAYJ,OAAO,GAAI,CACpCs9B,WAAY,CAACy4F,eAAgB,KAE9B,EAAAjwH,MAAQ,EAAA1F,YAAYb,MAAM,CAAC,EAAG,EAAG,GAAI,CACpC+9B,WAAY,CAACy4F,eAAgB,GAC7B/pF,WAAY,CAACqgF,cAAc,KAE5B,EAAA2J,OAAS,EAAA51H,YAAYd,QAAQ,EAAG,CAC/Bg+B,WAAY,CAACy4F,eAAgB,K,EAE/B,OAZmC,iBAYnC,EAZA,CAAmC,EAAA11H,mBAenC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAi0F,2BAA+C,GAC/C,EAAAC,2BAA+C,GAC/C,EAAAC,2BAA+C,G,EA2OxD,OAnPkC,iBAE1B,EAAAn3H,KAAP,WACC,MAAO,SAOD,EAAAgC,sBAAP,WACC,MAAO,CAAC,gCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAIrD,YAAAx/E,KAAN,SAAWC,G,oIACJ3a,EAAa2a,EAAe,GAC5Bs9C,EAAej4D,EAAWi4D,e,IAER,EAAAA,E,wBAAA,YAAfE,EAAW,KACf/4D,KAAKyY,GAAGo8G,gBACX70H,KAAKk1H,oBAAoBn8D,G,OADtB,OAD+B,M,cAIX/4D,KAAKvC,EAAEmH,MAAM0e,iBAEnC,GAAMtjB,KAAKm1H,kBAAkBp8D,IAD1B,M,cACH,S,aAEA/4D,KAAKo1H,oBAAoBr8D,G,wBARJ,I,aAcxB,IAAK/4D,KAAKQ,GAAGiX,OAAOujF,aAAa,GAEhC,IADMr5F,EAAaf,EAAWe,aACzB,EAAL,EAAqB,EAAAA,EAAA,eAAJ,KACNU,aA7DY,SA6DwCswB,aAAc,E,OAI9E3yB,KAAKW,eAAeC,G,YAGrB,YAAAs0H,oBAAA,SAAoBn8D,GACnB,IAAM7c,EAAgB6c,EAAY7c,gBAClCl8C,KAAKq1H,mBAAmBn5E,EAAe04E,GACvC,IAAMjlH,EAASusC,EAAcvsC,SAEvB2lH,EAAkBp5E,EAAchvC,YAAYlN,KAAKyY,GAAGzL,aACpDzL,EAAW26C,EAAc36C,WACzBg0H,EAAYh0H,EAASc,aAAarC,KAAKyY,GAAGzL,aAAa1K,MACvDkzH,EAAaj0H,EAASc,aA5EJ,SA4EoCC,MAE5D,OAAQgzH,GACP,KAAK,EACJ,IAAK,IAAIh7H,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAAK,CAEvCk7H,GADMC,EAAa,EAAJn7H,GACK,GAAKi7H,EAAUj7H,GACnCk7H,EAAWC,EAAS,GAAK,EAAIF,EAAUj7H,GACvCk7H,EAAWC,EAAS,GAAK,EAE1B,MAED,KAAK,EACJ,IAASn7H,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAAK,CACvC,IACMo7H,EAAY,EAAJp7H,EACdk7H,GAFMC,EAAa,EAAJn7H,GAEK,GAAKi7H,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAK,EAE1B,MAED,KAAK,EACJ,IAASn7H,EAAI,EAAGA,EAAIi7H,EAAU/6H,OAAQF,IACrCk7H,EAAWl7H,GAAKi7H,EAAUj7H,GAE3B,MAED,KAAK,EACJ,IAASA,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAAK,CACvC,IAAMm7H,EACAC,EAAY,EAAJp7H,EACdk7H,GAFMC,EAAa,EAAJn7H,GAEK,GAAKi7H,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,GAC3CF,EAAWC,EAAS,GAAKF,EAAUG,EAAQ,MAOvC,YAAAL,mBAAR,SAA2Bn5E,EAA6Bt3C,GAClDs3C,EAAcvvC,WAtHK,UAuHvBuvC,EAAczuC,mBAvHS,QAuH6B,EAAGmnH,IAIzD,YAAAQ,oBAAA,SAAoBr8D,GACnB,IAGI48D,EAHEz5E,EAAgB6c,EAAY7c,gBAClCl8C,KAAKq1H,mBAAmBn5E,EAAe04E,GAGnC50H,KAAKyY,GAAGq8G,QACXa,EAAY,IAAI,EAAAzwH,MAChB,EAAA0wH,UAAUC,QAAQ71H,KAAKyY,GAAG7T,MAAMjI,EAAGqD,KAAKyY,GAAG7T,MAAMsJ,EAAGlO,KAAKyY,GAAG7T,MAAMsG,EAAGyqH,IAErEA,EAAY31H,KAAKyY,GAAG7T,MAErBs3C,EAAczuC,mBAtIU,QAsI4B,EAAGkoH,IAGlD,YAAAR,kBAAN,SAAwBp8D,G,uJACjBppD,EAASopD,EAAYppD,SACrBpS,EAASw7D,EAAYx7D,SACrB2+C,EAAgB6c,EAAY7c,gBAClCl8C,KAAKq1H,mBAAmBn5E,EAAe04E,IACjCrzH,EAAYhE,EAAgBgE,WAE3Be,EAAQf,EAASc,aAhJA,SAgJgCC,MAEnC,GAAMtC,KAAK81H,mBAAmBv0H,EAAUe,EAAOqN,EAAQ,KAHxE,M,OAIiB,OADdomH,EAAc,SACA,GAAM/1H,KAAK81H,mBAAmBv0H,EAAUe,EAAOqN,EAAQ,I,OACvD,OADdqmH,EAAc,SACA,GAAMh2H,KAAK81H,mBAAmBv0H,EAAUe,EAAOqN,EAAQ,I,OAa3E,GAbMsmH,EAAc,SAEhBF,GACH/1H,KAAKk2H,mBAAmBH,EAAazzH,EAAO,GAEzC0zH,GACHh2H,KAAKk2H,mBAAmBF,EAAa1zH,EAAO,GAEzC2zH,GACHj2H,KAAKk2H,mBAAmBD,EAAa3zH,EAAO,GAIzCtC,KAAKyY,GAAGq8G,OAIX,IAHI1sG,EAAU,IAAI,EAAAljB,MACd20C,EAAS,IAAI,EAAA30C,MACb/C,OAAK,EACJ,EAAL,EAAkB,EAAAwN,EAAA,eAATM,EAAK,KACb9N,EAAsB,EAAd8N,EAAM9N,MACdimB,EAAQ23B,UAAUz9C,EAAOH,GACzB,EAAAyzH,UAAUC,QAAQztG,EAAQzrB,EAAGyrB,EAAQla,EAAGka,EAAQld,EAAG2uC,GACnDA,EAAOvuB,QAAQhpB,EAAOH,G,mCAyCZ,YAAA2zH,mBAAd,SACCv0H,EACAe,EACAqN,EACAixC,G,yIAGMvqC,EAAQrW,KAAKvC,EAAEmH,MAAM+d,WAAWi+B,GAChCne,EAAc,CAACziC,KAAKyY,GAAG7T,MAAMjI,EAAGqD,KAAKyY,GAAG7T,MAAMsJ,EAAGlO,KAAKyY,GAAG7T,MAAMsG,GAAG01C,GAClEurE,EAA0B,CAC/BnsH,KAAK+0H,2BACL/0H,KAAKg1H,2BACLh1H,KAAKi1H,4BACJr0E,GAGEvqC,EAAMiN,kBAAoBjN,EAAMkN,uBACnC8oG,EAAYrsH,KAAKosH,wBAAwB7qH,EAAU4qH,EAAyBx8G,EAAOnV,QACnF,GAAM6b,EAAMkN,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAE9EuvH,EAAuBp8G,EAAM9N,OAASrF,OAJrC,M,cAEH,S,aAKA,IAAK,EAAL,EAAkB,EAAA6S,EAAA,eAATM,EAAK,KACb3N,EAAoB,EAAd2N,EAAM9N,MAAYy+C,GAAUne,E,iBAGpC,MAAO,CAAP,EAAO4pF,WAGA,YAAAD,wBAAR,SACC7qH,EACA4qH,EACAxoH,GAEA,IAAM4H,EAAOhK,EAASgK,KAChBghH,EAAgBJ,EAAwB5gH,GAS9C,OARIghH,EAECA,EAAc/xH,OAASmJ,IAC1BwoH,EAAwB5gH,GAAQ,IAAI4oB,MAAMxwB,IAG3CwoH,EAAwB5gH,GAAQ,IAAI4oB,MAAMxwB,GAEpCwoH,EAAwB5gH,IAGxB,YAAA2qH,mBAAR,SAA2B7J,EAAqB8J,EAAwBv1E,GACvE,IAAK,IAAItmD,EAAI,EAAGA,EAAI+xH,EAAU7xH,OAAQF,IACrC67H,EAAiB,EAAJ77H,EAAQsmD,GAAUyrE,EAAU/xH,IAG5C,EAnPA,CAAkC,EAAAwJ,cAArB,EAAAs/G,gB,8ECtCb,YAGA,2BAeA,OAPQ,EAAAyS,QAAP,SAAe9oH,EAAWnR,EAAWmiC,EAAW8b,GAC/C9sC,EAAI,EAAAk9D,MAAMmsD,gBAAgBrpH,EAAG,GAC7BnR,EAAI,EAAAquE,MAAMz9C,MAAM5wB,EAAG,EAAG,GACtBmiC,EAAI,EAAAksC,MAAMz9C,MAAMuR,EAAG,EAAG,GAEtB8b,EAAOw8E,OAAOtpH,EAAInR,EAAImiC,IAAOhxB,GAAK,EAAInR,GAAKmiC,GAAK,EAAIhxB,EAAI,EAAIA,GAAQ,GAAJA,IAElE,EAfA,GAAa,EAAA6oH,a,yFCHb,2BACA,QAEA,SAEA,SACA,QAEA,SAKA,OACA,QAcM90F,EAAe,IAZrB,uE,OACC,EAAApxB,MAAQ,EAAAxQ,YAAYV,QAAQ,EAAG,CAC9B2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,EAAAkzF,eAAiB,EAAAp3H,YAAYd,QAAQ,GACrC,EAAAm4H,gBAAkB,EAAAr3H,YAAYd,QAAQ,GACtC,EAAAo4H,mBAAqB,EAAAt3H,YAAYJ,OAAO,GAAI,CAC3Cs9B,WAAY,CAACm6F,iBAAiB,KAE/B,EAAAE,cAAgB,EAAAv3H,YAAYd,QAAQ,G,EACrC,OAXkC,iBAWlC,EAXA,CAAkC,EAAAe,mBAclC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAA41F,yBAAqC,GAErC,EAAA99D,SAAuB,G,EA2NhC,OAnOiC,iBAEzB,EAAA96D,KAAP,WACC,MAAO,QAQD,EAAAgC,sBAAP,WACC,MAAO,CAAC,wBAAyB,sBAGlC,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAei3F,OAAQ,EAAAj3F,eAAek3F,SAO5E,YAAA5/E,KAAN,W,4HAEoB,SAAMtb,KAAKV,qBAAqB6wB,wBAAwB,I,cACzD,OADZwmG,EAAa,WACoD,OAA5ClD,EAAckD,EAAW30H,gBAAhD,MACChC,KAAKQ,GAAGiX,OAAOkjF,UAAU,IACxB+4B,OAAW,EACI,GAAM1zH,KAAKV,qBAAqB6wB,wBAAwB,KAFxE,M,cAGe,OADZymG,EAAa,WACoD,OAA5ClD,EAAckD,EAAW50H,gBAAhD,MACH,GAAMhC,KAAK62H,mBAAmBpD,EAAaC,I,cAA3C,S,aAEA1zH,KAAKswB,OAAOhT,MAAMpd,IAAI,yB,oCAGvBF,KAAK82H,sBAAsBrD,G,oCAG5BzzH,KAAKswB,OAAOhT,MAAMpd,IAAI,wB,mCAIV,YAAA22H,mBAAd,SAAiCE,EAAgCC,G,0HAWhE,OAVAh3H,KAAK44D,SAAW,GAEVq+D,EAAkBD,EAAoBrnH,SAEtCunH,EAAY,IAAI,EAAAC,cAAcH,GAChCI,EAAoBF,EAAUG,WAElCr3H,KAAK02H,yBAA2B,EAAAxsH,WAAWC,aAAanK,KAAKyY,GAAG+9G,oBAAoBnvG,QAAO,SAACra,GAC3F,OAAAgqH,EAAoBrqH,WAAWK,MAEhC,GAAMhN,KAAKs3H,uCAAuCP,EAAqBK,EAAmBH,I,cAA1F,SACAj3H,KAAKoB,YAAYpB,KAAK44D,U,YAIT,YAAA0+D,uCAAd,SACCP,EACAK,EACAH,G,sHAESjnH,EAAc,E,wBAAGA,EAAcinH,EAAgBz8H,OACvD,GAAMwF,KAAKu3H,qCACVR,EACAK,EACAH,EACAjnH,IAL4D,M,OAC7D,S,wBAD+DA,I,+BAoBzD,YAAAunH,qCAAR,SACCR,EACAK,EACAH,EACAjnH,GAJD,WAMC,OAAO,IAAIgS,SAAQ,SAAOC,EAASC,GAAM,+C,6EAKlB,OAJhBwC,EAAS0yG,EAAkBpnH,GAC3BwnH,EAAiBP,EAAgBjnH,GACvChQ,KAAK+1F,WAAW0hC,UAAUD,GAEJ,GAAMx3H,KAAK03H,sCAAsCX,EAAqB/mH,I,OAoB5F,OApBsB,SAERpO,SAAQ,SAAC+1H,GAetB,OAdI,EAAKl/G,GAAG89G,iBACX,EAAKqB,+BAA+BD,EAAcH,GAO/C,EAAK/+G,GAAG69G,eACXqB,EAAavrG,YAAY1H,GAEzBizG,EAAap2H,SAAS6qB,YAAY1H,GAG5B,EAAKk0C,SAAS99D,KAAK68H,MAGpB,CAAP,EAAO11G,gBAID,YAAAy1G,sCAAR,SACCX,EACA/mH,GAFD,WAIC,OAAO,IAAIgS,SAAQ,SAAOC,EAASC,GAAM,+C,oEACJ,SAAMliB,KAAK63H,kCAAkCd,I,cAA7C,UAG7Be,EAAgB93H,KAAKyY,GAAG69G,eAE3B,UAAe,CAACS,EAAoBl2H,UAAUmP,KAC9C+mH,EAAoBj0H,QAAQjC,UAE/BohB,EAAQ61G,IAER71G,EAAQ,I,eAKH,YAAA41G,kCAAR,SAA0Cd,GAA1C,WACC,OAAO,IAAI/0G,SAAQ,SAAOC,EAASC,GAAM,+C,6EACpCliB,KAAKyY,GAAGg+G,cACQ,GAAMz2H,KAAKV,qBAAqB6wB,wBAAwB,IADxE,M,cACGwmG,EAAa,SACflD,OAAW,EACXkD,GAA2D,OAA5ClD,EAAckD,EAAW30H,gBAE3CigB,EAAQwxG,IAERzzH,KAAKswB,OAAOhT,MAAMpd,IAAI,0BAA0BF,KAAKg2F,eACrD/zE,K,aAGDA,EAAQ80G,G,sCAMG,YAAAgB,sCAAd,SAAoDhB,G,sHAG1Cz8H,EAAI,E,wBAAGA,EAAI0F,KAAKyY,GAAG/I,MAC3B,GAAM1P,KAAKg4H,iCAAiCjB,EAAqBz8H,IADjC,M,OAChC,S,wBADkCA,I,+BAY5B,YAAA09H,iCAAR,SAAyCjB,EAAgCz8H,GAAzE,WACC,OAAO,IAAI0nB,SAAQ,SAAOC,EAASC,GAAM,+C,2EAGJ,OAFpCliB,KAAK+1F,WAAWkiC,iBAAiB39H,GAEG,GAAM0F,KAAK63H,kCAAkCd,I,cAA3EmB,EAA8B,WAEnCA,EAA4Br3H,UAAUe,SAAQ,SAACrE,GAE9C,IAAMo/C,EAAa,EAAA1kC,WAAWnV,MAAMvF,GACpC,EAAKq7D,SAAS99D,KAAK6hD,MAIrB16B,I,eAKM,YAAA60G,sBAAR,SAA8BC,GAA9B,WACC/2H,KAAK44D,SAAW,GAChB54D,KAAK+3H,sCAAsChB,GAAqB3mG,MAAK,WACpE,EAAKhvB,YAAY,EAAKw3D,cAIhB,YAAAg/D,+BAAR,SAAuCr6H,EAAkBi6H,GACxDx3H,KAAK02H,yBAAyB90H,SAAQ,SAACoL,EAAa1S,GACnD,IAAMsW,EAAe4mH,EAAe5mH,aAAa5D,GAC1B,IAAI,EAAAiL,WAAW1a,EAAQjD,GAC/BkU,cAAcxB,EAAa4D,OAS5C,YAAAolF,YAAA,SAAYhpF,GACX,OAAOhN,KAAK+1F,WAAWj5F,MAAMkQ,IAE9B,sBAAI,yBAAU,C,IAAd,WACC,OAAQhN,KAAKm4H,YAAcn4H,KAAKm4H,aAAen4H,KAAKo4H,qB,gCAE7C,YAAAA,kBAAR,WACC,IAAMriC,EAAa,IAAI,EAAAsiC,UAAUr4H,KAAKmD,OAEtC,OADAnD,KAAKqkB,iBAAiB88D,4BAA4B,CAAC4U,IAC5CA,GAMT,EAnOA,CAAiC,EAAAjyF,cAApB,EAAAu/G,e,kFC9Bb,E,KAAA,uBAEA,OACA,OACA,QACA,QACA,SACA,SAOA,QAGM7I,EAAU,CACf8d,MAAO,IAAI,EAAA/pH,QAAQ,EAAG,EAAG,GACzBgqH,OAAQ,EACRC,IAAK,IAAI,EAAAjqH,QAAQ,EAAG,EAAG,GACvBk/C,GAAI,IAAI,EAAAl/C,QAAQ,EAAG,EAAG,IAUjBqmH,EAAgB,IAAI,EAAArmH,QAAQ,EAAG,EAAG,GAClCkqH,EAAa,IAAI,EAAA3nG,QAAQ,EAAG,GAIlC,aAQC,WAAoB4nG,GAAA,KAAAA,iBAFZ,KAAAC,UAAiC,GAGxC34H,KAAK44H,mBAAqB54H,KAAK04H,eAAe/rH,WAAW,UACzD3M,KAAK64H,kBAAoB74H,KAAK04H,eAAe/rH,WAAW,SAExD3M,KAAK84H,mBAAqB94H,KAAK04H,eAAe/rH,WAAW,UACzD3M,KAAK+4H,eAAiB/4H,KAAK04H,eAAe/rH,WAAW,MAErD3M,KAAKg5H,oBAAsBh5H,KAAK84H,mBAqIlC,OAlIC,YAAAzB,SAAA,sBAMC,OALAr3H,KAAK24H,UAAY,GACjB34H,KAAK24H,UAAkB,UAAI,IAAI,EAAA1uG,QAC/BjqB,KAAK24H,UAAkB,OAAI,IAAI,EAAA1uG,QAC/BjqB,KAAK24H,UAAkB,MAAI,IAAI,EAAA1uG,QAExBjqB,KAAK04H,eAAe/oH,SAAStF,KAAI,SAAC4F,GACxC,OAAO,EAAKgpH,mBAAmBhpH,OAIjC,YAAAgpH,mBAAA,SAAmBhpH,GAClB,IAAMlT,EAAIkT,EAAMR,WAEZmU,EAAQ5jB,KAAK64H,kBAAoB5oH,EAAMW,aA7CnB,SA6CqD4pG,EAAQ8d,MAC/EY,EAASl5H,KAAK44H,mBAAqB3oH,EAAMW,aA7CtB,UA6CyD4pG,EAAQ+d,OAC1F30G,EAAQA,EAAM9gB,QAAQoiB,eAAeg0G,GAGrC,IAAMx0G,EAAS,IAAI,EAAAuF,QACnBvF,EAAO4F,WAEP,IAAM6uG,EAAen5H,KAAK24H,UAAkB,MAC5CQ,EAAaC,UAAUx1G,EAAM/V,EAAG+V,EAAM9V,EAAG8V,EAAM5V,GAE/C,IAAMqrH,EAAmBr5H,KAAK24H,UAAkB,UAKhD,GAJAU,EAAiBC,gBAAgBv8H,EAAE8Q,EAAG9Q,EAAE+Q,EAAG/Q,EAAEiR,GAE7C0W,EAAO60G,SAASF,GAEZr5H,KAAKg5H,oBAAqB,CAC7B,IAAMQ,EAAgBx5H,KAAK24H,UAAkB,OACvCc,EAAMjf,EAAQge,IACd5+D,EAAS3pD,EAAMW,aA9DG,UA8D8BsU,gBAAgB,GAChE+B,EAAKjnB,KAAK+4H,eAAiB9oH,EAAMW,aA9DnB,MA8DkD4pG,EAAQ/sD,GAC9ExmC,EAAGgF,YACHutG,EAAc3pE,OAAO4pE,EAAK7/D,EAAQ3yC,GAElCvC,EAAO60G,SAASC,GAKjB,OAFA90G,EAAO60G,SAASJ,GAETz0G,GAGD,EAAAg1G,2BAAP,SACCC,EACA3C,EACAR,GAEA,IAAMoD,EAAe5C,EAAoBrnH,SAOnCpO,EAAW,IAAI,EAAAs4H,wBACrBt4H,EAAS0jB,KAAK00G,GAEd,IAAMG,EAAkBF,EAAap/H,OAC/Bq4B,EAAY,IAAIE,aAA+B,EAAlB+mG,GAC7B9hB,EAAS,IAAIjlF,aAA+B,EAAlB+mG,GAC1BC,EAAS,IAAIhnG,aAA+B,EAAlB+mG,GAC1BE,EAAU,IAAIjnG,aAA+B,EAAlB+mG,GAE3BG,EAAYjD,EAAoBrqH,WAvFd,SAyFlB8C,EAAW,IAAI,EAAAlB,QAAQ,EAAG,EAAG,GAC7Buc,EAAa,IAAI,EAAAX,WACjBvG,EAAQ,IAAI,EAAArV,QAAQ,EAAG,EAAG,GAG1B6oH,EADY,IAAID,EAAcH,GACAK,WAEpCuC,EAAah4H,SAAQ,SAACs4H,EAAa5/H,GAClC,IAAM6/H,EAAa,EAAJ7/H,EACT8/H,EAAa,EAAJ9/H,EAEA88H,EAAkB98H,GAC1BywB,UAAUtb,EAAUqb,EAAYlH,GAEvCnU,EAAS6b,QAAQuH,EAAWsnG,GAC5BrvG,EAAWQ,QAAQ0uG,EAASI,GAC5Bx2G,EAAM0H,QAAQyuG,EAAQI,IAERF,EAAYC,EAAYtpH,aA3Gf,SA2GiDgkH,GAClEtpG,QAAQ0sF,EAAQmiB,MAIvB,IAAME,EAASrD,EAAoBrqH,WAjHd,MAkHrB,GAAI0tH,EAAQ,CACX,IAAM,EAAM,IAAItnG,aAA+B,EAAlB+mG,GAC7BF,EAAah4H,SAAQ,SAACs4H,EAAa5/H,GAClC,IAAMggI,EAAa,EAAJhgI,GACJ+/H,EAASH,EAAYtpH,aAtHb,MAsH4C6nH,GAC5DntG,QAAQ,EAAKgvG,MAEjB/4H,EAASgM,aAAa,aAAc,IAAI,EAAAgtH,yBAAyB,EAAK,IA4BvE,OAxBAh5H,EAASgM,aAAa,mBAAoB,IAAI,EAAAgtH,yBAAyB1nG,EAAW,IAClFtxB,EAASgM,aAAa,gBAAiB,IAAI,EAAAgtH,yBAAyBR,EAAQ,IAC5Ex4H,EAASgM,aAAa,sBAAuB,IAAI,EAAAgtH,yBAAyBP,EAAS,IACnFz4H,EAASgM,aAAa,gBAAiB,IAAI,EAAAgtH,yBAAyBviB,EAAQ,IAEvDgf,EAAoBx8D,2BAA2Bg8D,GAEvD50H,SAAQ,SAACoL,GACrB,IAAME,EAAc8pH,EAAoB9pH,YAAYF,GAC9CK,EAAS,IAAI0lB,aAAa+mG,EAAkB5sH,GAClD0sH,EAAah4H,SAAQ,SAAC44H,EAAIlgI,GACzB,IAAMwC,EAAQ09H,EAAG5pH,aAAa5D,GAC1B,UAAgBlQ,GACnBuQ,EAAO/S,GAAKwC,EAEZA,EAAMwuB,QAAQje,EAAQ/S,EAAI4S,MAG5B3L,EAASgM,aAAaP,EAAa,IAAI,EAAAutH,yBAAyBltH,EAAQH,OAGhD,IAAI,EAAAlB,aAAazK,GACzBsK,mBAEVtK,GAET,EApJA,GAAa,EAAA41H,iB,yFChCb,cAIC,WAAYh0H,GAAZ,MACC,YAAMA,EAAO,cAAY,K,OAJlB,EAAAs3H,cAAwB,E,EA6BjC,OA9B+B,iBAQ9B,YAAAhD,UAAA,SAAUxnH,GACTjQ,KAAK06H,OAASzqH,EACdjQ,KAAKwU,YACLxU,KAAK2U,sBAEN,YAAAsjH,iBAAA,SAAiB91H,GAChBnC,KAAKy6H,cAAgBt4H,EACrBnC,KAAKwU,YACLxU,KAAK2U,sBAGN,YAAA7X,MAAA,SAAMkQ,GACL,OAAIhN,KAAK06H,OACJ1tH,EACIhN,KAAK06H,OAAO9pH,aAAa5D,GAEzBhN,KAAK06H,OAAOv4H,MAGbnC,KAAKy6H,eAGf,EA9BA,CAHA,MAG+BrkH,eAAlB,EAAAiiH,a,yFCHb,QACA,SAiBMsC,EAAmB7+F,KAAKC,UAfT,CACpB,CAACj/B,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,OAAQ,IACT,CAACA,MAAO,GACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,IACR,CAACA,MAAO,MAIT,OAIMgkC,EAAe,IAHrB,uE,OACC,EAAA9mC,KAAO,EAAAkF,YAAYJ,OAAO67H,G,EAC3B,OAFkC,iBAElC,EAFA,CAAkC,EAAAx7H,mBAKlC,yE,OACC,EAAA0iC,cAAgBf,E,EAsBjB,OAvBiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAAwd,KAAA,WACC,IAAIsjD,EAAO,KACX,IACCA,EAAO9iC,KAAKvzB,MAAMvI,KAAKyY,GAAGze,MACzB,MAAOsQ,GACRtK,KAAKswB,OAAOhT,MAAMpd,IAAI,wBAGvB,GAAI0+D,EAAM,CACT,IAAMwC,EAAS,IAAI,EAAAvB,eACnBuB,EAAOrC,SAASH,GAChB,IAAMrhE,EAAS6jE,EAAO5/D,gBACtBxB,KAAKiB,WAAW1D,QAEhByC,KAAK0b,gBAAgBC,YAGxB,EAvBA,CAAiC,EAAA7X,cAApB,EAAAw/G,e,yFC3Bb,2BACA,2BACA,QAEA,aACC,WAAoBnE,EAAuBlqF,GAAvB,KAAAkqF,QAAuB,KAAAlqF,QAiB5C,OAfC,YAAAzvB,KAAA,WACC,OAAOxF,KAAKm/G,OAEb,YAAArhH,KAAA,WACC,OAAOkC,KAAKi1B,OAGN,EAAAgF,WAAP,SAAkBrpB,GACjB,IAAM9S,EAAO,UAAgB8S,GAC1B,EAAApO,aAAayD,YAAYnH,OACzB,EAAA0D,aAAayD,YAAYF,QAG5B,OAAO,IAAI/F,KAFE,UAAe4Q,GAAgBA,EAAapW,OAAS,EAE5CsD,IAExB,EAlBA,GAAa,EAAA6hE,qB,yFCFb,QAGA,SAEA,OAiBM7+B,EAAe,IAdrB,uE,OACC,EAAAC,IAAM,EAAA7hC,YAAYJ,OAAO,qCACzB,EAAA87H,sBAAwB,EAAA17H,YAAYJ,OAAO,IAC3C,EAAAo/D,aAAe,EAAAh/D,YAAYJ,OAAO,IAClC,EAAA4hB,QAAU,EAAAxhB,YAAYd,QAAQ,GAC9B,EAAAggE,mBAAqB,EAAAl/D,YAAYJ,OAAO,GAAI,CAC3Cs9B,WAAY,CAAC1b,QAAS,KAEvB,EAAA0gB,OAAS,EAAAliC,YAAYhB,OAAO,KAAM,CACjC4W,SAAU,SAACtR,EAAoB6S,GAC9BktG,EAAejiF,sBAAsB99B,EAAwB6S,M,EAGhE,OAbqC,iBAarC,EAbA,CAAqC,EAAAlX,mBAgBrC,yE,OACC,EAAA0iC,cAAgBf,E,EA2CjB,OA5CoC,iBAE5B,EAAAhjC,KAAP,WACC,MAAO,YAIF,YAAAwd,KAAN,W,gGACgB,IAAI,EAAAukD,eAAe,CACjC5B,iBAAkBj+D,KAAKyY,GAAGmiH,sBAC1B18D,aAAcl+D,KAAKyY,GAAGylD,aACtBC,WAAYn+D,KAAKyY,GAAGiI,QACpB09C,mBAAoBp+D,KAAKyY,GAAG2lD,qBAEtBC,KAAKr+D,KAAKyY,GAAGsoB,IAAK/gC,KAAK66H,SAASx9H,KAAK2C,WAAOqJ,EAAWrJ,KAAK86H,UAAUz9H,KAAK2C,O,WAGnF,YAAA66H,SAAA,SAASh6H,GAERb,KAAKoB,YAAY,CAACP,KAEnB,YAAAi6H,UAAA,SAAUx9G,GACTtd,KAAKswB,OAAOhT,MAAMpd,IAAI,gCAAgCF,KAAKyY,GAAGsoB,IAAG,KAAKzjB,EAAK,KAC3Etd,KAAK0b,gBAAgBC,YAWf,EAAA2lB,sBAAP,SAA6B99B,EAAsB6S,GAClD7S,EAAKk/B,yBAEN,YAAAA,sBAAA,WAIC1iC,KAAKvC,EAAEsjC,IAAIvsB,aAGb,EA5CA,CAAoC,EAAA1Q,cAAvB,EAAAy/G,kB,yFC1Bb,QAEA,OACA,QAKMziF,EAAe,IAHrB,uE,OACC,EAAAoC,SAAW,EAAAhkC,YAAYV,QAAQ,K,EAChC,OAFmC,iBAEnC,EAFA,CAAmC,EAAAW,mBAKnC,yE,OACC,EAAA0iC,cAAgBf,E,EAiBjB,OAlBkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAei3F,UAG3D,YAAA3/E,KAAA,SAAKy/G,GAAL,WACOn6H,EAAam6H,EAAgB,GAInC9qG,YAHU,WACT,EAAKtvB,eAAeC,KAEPZ,KAAKyY,GAAGyqB,WAExB,EAlBA,CAAkC,EAAAp/B,cAArB,EAAA0/G,gB,kFCQRwX,E,OAlBL,QACA,2BACA,4BACA,QACA,QACA,QAQA,QACA,SAIA,SAAKA,GACJ,kBACA,gBACA,kBACA,kBACA,gBACA,kBAND,CAAKA,MAAkB,KAQvB,IAAMC,EAAgC,CACrC,CAAC5+H,KAAM,KAAMS,MAAOk+H,EAAmB,OACvC,CAAC3+H,KAAM,IAAKS,MAAOk+H,EAAmB,MACtC,CAAC3+H,KAAM,KAAMS,MAAOk+H,EAAmB,OACvC,CAAC3+H,KAAM,KAAMS,MAAOk+H,EAAmB,OACvC,CAAC3+H,KAAM,IAAKS,MAAOk+H,EAAmB,MACtC,CAAC3+H,KAAM,KAAMS,MAAOk+H,EAAmB,QAGxC,OAiEMl6F,EAAe,IAhErB,uE,OACC,EAAAmqF,MAAQ,EAAA/rH,YAAYV,QAAQ,EAAA+F,YAAYqB,OAAQ,CAC/C27B,KAAM,CACLC,QAAS,EAAA77B,0BAGX,EAAAu1H,OAAS,EAAAh8H,YAAYd,QAAQ,GAC7B,EAAA+8H,aAAe,EAAAj8H,YAAYd,QAAQ,GAGnC,EAAAg9H,eAAiB,EAAAl8H,YAAYd,QAAQ,GACrC,EAAAgS,YAAc,EAAAlR,YAAYV,QAAQ,EAAA0F,YAAYI,QAAQ,EAAAL,WAAWvB,MAAO,CACvE6+B,KAAM,CACLC,QAAS,EAAAn9B,uBAEV+3B,WAAY,CAACg/F,gBAAgB,KAI9B,EAAAC,cAAgB,EAAAn8H,YAAYd,QAAQ,GACpC,EAAA0sC,WAAa,EAAA5rC,YAAYd,QAAQ,YAAa,CAC7Cg+B,WAAY,CAACi/F,eAAe,GAC5BvwF,WAAY,CAACqgF,cAAc,KAI5B,EAAAmQ,UAAY,EAAAp8H,YAAYd,QAAQ,GAChC,EAAA4O,YAAc,EAAA9N,YAAYJ,OAAO,GAAI,CACpCs9B,WAAY,CAACk/F,WAAW,KAEzB,EAAAC,cAAgB,EAAAr8H,YAAYJ,OAAO,GAAI,CACtCs9B,WAAY,CAACk/F,WAAW,KAKzB,EAAAE,eAAiB,EAAAt8H,YAAYD,QAAQ,CAAC,EAAG,EAAG,EAAG,GAAI,CAClDm9B,WAAY,CAACk/F,WAAW,KAEzB,EAAAG,2BAA6B,EAAAv8H,YAAYV,QAAQw8H,EAAmB,MAAO,CAC1Ez5F,KAAM,CACLC,QAASy5F,GAEV7+F,WAAY,CAACk/F,WAAW,KAIzB,EAAAI,QAAU,EAAAx8H,YAAYd,QAAQ,GAC9B,EAAAu9H,UAAY,EAAAz8H,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAI,CAC1Co9B,WAAY,CAACs/F,SAAS,KAEvB,EAAApI,YAAc,EAAAp0H,YAAYF,QAAQ,CAAC,EAAG,EAAG,GAAI,CAC5Co9B,WAAY,CAACs/F,SAAS,KAKvB,EAAAE,WAAa,EAAA18H,YAAYd,QAAQ,GACjC,EAAAy9H,YAAc,EAAA38H,YAAYd,QAAQ,EAAG,CACpCg+B,WAAY,CACX6uF,MAAO,EAAA1mH,YAAYsB,U,EAGtB,OA/DoC,iBA+DpC,EA/DA,CAAoC,EAAA1G,mBAkEpC,yE,OACC,EAAA0iC,cAAgBf,EAyBR,EAAAg7F,sCAA8D,IAAIxiG,I,EA+W3E,OAzYmC,iBAE3B,EAAAx7B,KAAP,WACC,MAAO,UAyBD,EAAAgC,sBAAP,WACC,MAAO,CAAC,4BAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAGrD,YAAAx/E,KAAN,SAAWC,G,6HACJ3a,EAAa2a,EAAe,GAElCvb,KAAK+7H,iBAAc1yH,EACXrJ,KAAKyY,GAAGwyG,O,KACV,EAAA1mH,YAAYqB,OAAZ,Y,KAGA,EAAArB,YAAYsB,OAAZ,Y,mBAFJ,SAAM7F,KAAKg8H,iBAAiBp7H,I,OAC5B,OADA,SACA,M,OAEA,SAAMZ,KAAKi8H,kBAAkBr7H,I,OAC7B,OADA,SACA,M,yBAIW,YAAAq7H,kBAAd,SAAgCr7H,G,iJAM/B,IAJMs7H,EAAkB,GAClBrjE,EAAej4D,EAAWi4D,eAEhC74D,KAAK87H,sCAAwC,IAAIxiG,IAC5C,EAAL,EAAwB,EAAAu/B,EAAA,eAAnB,OACJ74D,KAAK87H,sCAAsC57H,IAAI,EAAYiC,OAAO,G,OAG/DnC,KAAKyY,GAAG4iH,cACX,GAAMr7H,KAAKm8H,8BAA8BtjE,IADtC,M,OACH,S,iBA2ED,IAxEI74D,KAAKyY,GAAG2iH,gBACXp7H,KAAKo8H,uBAAuBvjE,GAGzB74D,KAAKyY,GAAG6iH,WAAqC,KAAxBt7H,KAAKyY,GAAGzL,aAChChN,KAAKq8H,yBAAyBxjE,GAoB3B74D,KAAKyY,GAAGyiH,QACXl7H,KAAK87H,sCAAsCl6H,SAAQ,SAAC06H,EAAqBC,GACxE,EAAKT,sCAAsC57H,IAAIq8H,GAAeD,MAK1DE,EAA6D,GAEnEx8H,KAAK87H,sCAAsCl6H,SAAQ,SAAC06H,EAAqBC,GACxExjE,EAAcF,EAAa0jE,GAC3Bh/H,EAASw7D,EAAYx7D,SAEjB,EAAKkb,GAAG0iH,cACXe,EAAgBphI,KAAKyC,GACjB++H,IACH/+H,EAAOmyC,SAAU,KAGb4sF,GACJJ,EAAgBphI,KAAKyC,GAElB++H,GACHE,EAAmC1hI,KAAK,EAAK2hI,cAAc1jE,QAwBzD,EAAL,EAAmB,EAAAyjE,EAAA,eAAd,OACJN,EAAgBphI,KAAK,G,OAGtBkF,KAAKoB,YAAY86H,G,YAMJ,YAAAF,iBAAd,SAA+Bp7H,G,kIACxBi4D,EAAej4D,EAAWi4D,eAEvBv+D,EAAI,E,wBAAGA,EAAIu+D,EAAar+D,QAChCu+D,EAAcF,EAAav+D,IACvB4hD,EAAgB6c,EAAY7c,kBAE3BvsC,EAASusC,EAAcrsC,uBACrB6sH,EAAoB/sH,EAAOnV,OAC7BwF,KAAKyY,GAAG4iH,cACF,GAAMr7H,KAAK28H,6BAA6BhtH,IAD9C,OAHD,OAHkC,M,OAOpCA,EAAS,S,iBAGN3P,KAAKyY,GAAG6iH,WAAqC,KAAxBt7H,KAAKyY,GAAGzL,cAChC2C,EAAS3P,KAAK48H,wBAAwBjtH,IAEnC3P,KAAKyY,GAAGijH,UACX/rH,EAAS3P,KAAK68H,sBAAsBltH,IAGjCA,EAAOnV,QAAUkiI,IACdn/H,EAASw7D,EAAYx7D,SAC3B2+C,EAAc36C,WAAWic,UACrB7N,EAAOnV,OAAS,EAEnB+C,EAAOgE,SAAW,EAAAyK,aAAamE,qBAC9BR,EACUpS,EAAO6R,aAOD,MAAjB7R,EAAO8C,QAAiB9C,EAAO8C,OAAOmf,OAAOjiB,I,wBA/BRjD,I,oBAqCzC0F,KAAKW,eAAeC,G,YAGP,YAAA+7H,6BAAd,SAA2ChtH,G,4IACpCmtH,EAAc,GAmBdzmH,EAAQrW,KAAKvC,EAAEqtC,WACjB9qC,KAAKvC,EAAEqtC,WAAWxnB,kBAAoBjN,EAAMkN,sBAC/C,GAAMlN,EAAMkN,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAC/E,IAAIigI,GAAcjgI,EACd,EAAK2b,GAAGyiH,SACX6B,GAAcA,GAEXA,GACHD,EAAYhiI,KAAKmV,OAPhB,M,cACH,S,aAeA,IALMnT,EAAQkD,KAAKyY,GAAGqyB,WAClBiyF,GAAcjgI,EACdkD,KAAKyY,GAAGyiH,SACX6B,GAAcA,GAENziI,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAC9ByiI,GACHD,EAAYhiI,KAAK6U,EAAOrV,I,iBAK3B,OADA8I,QAAQC,IAAIy5H,GACL,CAAP,EAAOA,WAGM,YAAAX,8BAAd,SAA4CtjE,G,0IACrCxiD,EAAQrW,KAAKvC,EAAEqtC,YAEXxnB,kBAAoBjN,EAAMkN,sBACnC,GAAMlN,EAAMkN,sBAAsB4mC,+BAA+B0O,GAAc,SAACE,EAAaj8D,GAC7D,EAAKg/H,sCAAsCp/H,IAAIq8D,EAAY52D,QAEzF,EAAK25H,sCAAsC57H,IAAI64D,EAAY52D,MAAOrF,OAJjE,M,cACH,S,aAOA,IAAK,EAAL,EAAwB,EAAA+7D,EAAA,eAAfE,EAAW,KACnB/4D,KAAK87H,sCAAsC57H,IAAI64D,EAAY52D,MAAOkU,EAAMvZ,O,mCAgBnE,YAAA8/H,wBAAR,SAAgCjtH,GAAhC,WACOmtH,EAA2B,GAEjC,GAAIntH,EAAOnV,OAAS,EAAG,CACtB,IAAMwiI,EAAqBrtH,EAAO,GAAGiB,aAAa5Q,KAAKyY,GAAGzL,cAGzB,UAAgBgwH,GAE9C,EAAA9yH,WAAWC,aAAanK,KAAKyY,GAAG8iH,eAChC,CAACv7H,KAAKyY,GAAG+iH,eAAe3tH,IAEFjM,SAAQ,SAACq7H,GACjC,OAAOttH,EAAO/N,SAAQ,SAACqO,GACtB,IAAMW,EAAeX,EAAMW,aAAa,EAAK6H,GAAGzL,aAK5C+vH,GAAc,EAAKG,YAAYtsH,EAAcqsH,GAMjD,GAJI,EAAKxkH,GAAGyiH,SACX6B,GAAcA,GAGXA,EACH,OAAOD,EAAYhiI,KAAKmV,SAM5B,OAAO6sH,GAGA,YAAAI,YAAR,SAAoBtsH,EAA+BqsH,GAClD,OAAQj9H,KAAKyY,GAAG0kH,2BACf,KAAKnC,EAAmB,MACvB,OAAOpqH,IAAiBqsH,EACzB,KAAKjC,EAAmB,MACvB,OAAOpqH,GAAgBqsH,EACxB,KAAKjC,EAAmB,KACvB,OAAOpqH,EAAeqsH,EACvB,KAAKjC,EAAmB,KACvB,OAAOpqH,EAAeqsH,EACvB,KAAKjC,EAAmB,MACvB,OAAOpqH,GAAgBqsH,EACxB,KAAKjC,EAAmB,MACvB,OAAOpqH,IAAiBqsH,IAInB,YAAAb,uBAAR,SAA+BvjE,GAG9B,IAFA,IAAMukE,EAAmB,EAAAl5H,YAAYlE,KAAKyY,GAAGrI,aAErB,MAAAyoD,EAAA,eAAc,CAAjC,IAAIE,EAAW,KAGnB,IAF+B/4D,KAAK87H,sCAAsCp/H,IAAIq8D,EAAY52D,OAG1E42D,EAAYx7D,SAEhB6R,YAAY/S,OAAS+gI,GAC/Bp9H,KAAK87H,sCAAsC57H,IAAI64D,EAAY52D,OAAO,KAM9D,YAAAk6H,yBAAR,SAAiCxjE,GAChC,IAAwB,UAAAA,EAAA,eAAc,CAAjC,IAAIE,EAAW,KAGnB,IAF+B/4D,KAAK87H,sCAAsCp/H,IAAIq8D,EAAY52D,OAE7D,CAE5B,IAAMyO,EAAemoD,EAAYnoD,aAAa5Q,KAAKyY,GAAGzL,aAMlD4D,KAJ4B,UAAgBA,GAC7C5Q,KAAKyY,GAAG8iH,cACRv7H,KAAKyY,GAAG4kH,eAGVr9H,KAAK87H,sCAAsC57H,IAAI64D,EAAY52D,OAAO,MAM9D,YAAA06H,sBAAR,SAA8BltH,GAA9B,WACOmtH,EAA2B,GAYjC,OAVA,UAAYntH,GAAQ,SAACM,EAAO3V,GAC3B,IAAMgjI,EAAU,EAAK3L,MAAMW,cAAcriH,EAAMR,YAI/C,GAFmB,EAAKgJ,GAAGyiH,OAASoC,GAAWA,EAG9C,OAAOR,EAAYhiI,KAAKmV,MAInB6sH,GAWR,sBAAY,oBAAK,C,IAAjB,WACC,OAA2B,MAApB98H,KAAK+7H,YACT/7H,KAAK+7H,YACJ/7H,KAAK+7H,YAAc,IAAI,EAAA/hE,KACxBh6D,KAAKyY,GAAG66G,YAAYxwH,QAAQ2sB,IAAIzvB,KAAKyY,GAAGkjH,UAAU74H,QAAQoiB,eAAe,KACzEllB,KAAKyY,GAAG66G,YAAYxwH,QAAQwc,IAAItf,KAAKyY,GAAGkjH,UAAU74H,QAAQoiB,eAAe,O,gCAIrE,YAAAu3G,cAAR,SAAsB1jE,GACrB,IAAMwkE,EAAcxkE,EAAYppD,SAC1BpO,EAAW,EAAAyK,aAAamE,qBAC7BotH,EACUxkE,EAAYx7D,SAAS6R,aAEhC,OAAOpP,KAAKwB,cAAcD,EAAU,EAAA0C,WAAWE,SAEjD,EAzYA,CAAmC,EAAAL,cAAtB,EAAA2/G,iB,yFCtGb,OAEA,QAEA,2BACA,4BACA,4BACA,QAEA,QAEA,OAkBM3iF,EAAe,IAfrB,uE,OACC,EAAA08F,kBAAoB,EAAAt+H,YAAYd,QAAQ,GACxC,EAAAq/H,0BAA4B,EAAAv+H,YAAYd,QAAQ,EAAG,CAClDg+B,WAAY,CAACohG,kBAAmB,KAEjC,EAAAE,YAAc,EAAAx+H,YAAYd,QAAQ,EAAG,CACpCg+B,WAAY,CAACohG,kBAAmB,KAEjC,EAAA75G,UAAY,EAAAzkB,YAAYd,QAAQ,EAAG,CAClCg+B,WAAY,CAACohG,kBAAmB,KAEjC,EAAA55G,MAAQ,EAAA1kB,YAAYZ,MAAM,EAAG,CAC5B89B,WAAY,CAACohG,kBAAmB,EAAG75G,UAAW,K,EAEhD,OAdkC,iBAclC,EAdA,CAAkC,EAAAxkB,mBAiBlC,yE,OACC,EAAA0iC,cAAgBf,E,EAoJjB,OArJiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAE9Bvb,KAAKyY,GAAG+kH,oBACXx9H,KAAK29H,mBAAmB/8H,GAKpBZ,KAAKyY,GAAGglH,2BACXz9H,KAAK49H,2BAA2Bh9H,GAE7BZ,KAAKyY,GAAGilH,aACX19H,KAAK69H,aAAaj9H,GAEfZ,KAAKyY,GAAGkL,WACX3jB,KAAK89H,iBAAiBl9H,IAIxBZ,KAAKW,eAAeC,IAGb,YAAA+8H,mBAAR,SAA2B/8H,GAC1B,I,MAAmB,MAAAA,EAAWC,UAAX,eAAsB,CAApC,IAAItD,EAAM,KACd,GAAKA,EAAgB47D,OAAQ,CAI5B,IAHA,IAAM53D,EAAYhE,EAAgBgE,SAC5B+Q,EAAQ,WAA2B,QAAd,EAAA/Q,EAASY,aAAK,eAAEG,QAAS,GAAI,GAClDqB,EAA8B,EAAf2O,EAAM9X,O,WAClBwS,GACR,IAAMG,EAAS5L,EAASqL,WAAWI,GAC7BE,EAAcC,EAAOF,SACrB0D,EAAa,IAAIoiB,aAAapvB,EAAeuJ,GAC/CivD,EAAkB,EACtB7pD,EAAM1Q,SAAQ,SAACulH,GACdA,EAAKvlH,SAAQ,SAACO,GACb,UAAa+K,GAAa,SAAC5S,GAC1B,IAAMyjI,EAAgB5wH,EAAO7K,MAAMH,EAAQ+K,EAAc5S,GACzDqW,EAAWwrD,GAAmB4hE,EAC9B5hE,GAAmB,WAItB56D,EAASgM,aAAaP,EAAa,IAAI,EAAAirG,gBAAgBtnG,EAAYzD,KAd5C,MAAAzS,OAAO6R,KAAK/K,EAASqL,YAArB,eAAkC,C,EAAtC,MAgBpB,IAAM63C,EAAc,UAAa9gD,GACjCpC,EAASgB,SAASkiD,MAKb,YAAAm5E,2BAAR,SAAmCh9H,GAClC,IAEI0R,EAAmB60G,EAAgBx3G,EADjCquH,EAAc,IAAI,EAAAzvH,QAGxB3N,EAAWi4D,eAAej3D,SAAQ,SAACm3D,GAClC,IAAMx7D,EAASw7D,EAAYx7D,SACrB2+C,EAAgB6c,EAAY7c,gBAClC,GAAK3+C,EAAgB47D,OAAQ,CAC5B7mD,EAAQ4pC,EAAc5pC,QACjB4pC,EAAcvvC,WATD,gBAUjBuvC,EAAczuC,mBAVG,cAU6B,GAAI,GAGnD,IAAK,IAAIwwH,EAAK,EAAGA,EAAK3rH,EAAM9X,OAAQyjI,IAAM,EACzC9W,EAAO70G,EAAM2rH,IACRrkE,OAAOokE,GAEZruH,EAASw3G,EAAKx3G,OACd,IAAK,IAAIuuH,EAAK,EAAGA,EAAKvuH,EAAOnV,OAAQ0jI,IAC5BvuH,EAAOuuH,GACT5hF,iBApBU,cAoBoB0hF,SAOjC,YAAAH,aAAR,SAAqBj9H,GAGpBA,EAAWi4D,eAAej3D,SAAQ,SAACm3D,GAClC,IAAMx7D,EAASw7D,EAAYx7D,SACrB2+C,EAAgB6c,EAAY7c,gBAClC,GAAK3+C,EAAgB47D,OAAQ,CAC5B,IAAM7mD,EAAQ4pC,EAAc5pC,QAGvB4pC,EAAcvvC,WATD,YAUjBuvC,EAAczuC,mBAVG,UAU6B,GAAI,GAGnD,IAAK,IAAInT,EAAI,EAAGA,EAAIgY,EAAM9X,OAAQF,IAGjC,IAFA,IACMqV,EADO2C,EAAMhY,GACCqV,OACXnU,EAAI,EAAGA,EAAImU,EAAOnV,OAAQgB,IAAK,CACzBmU,EAAOnU,GACf8gD,iBAlBU,UAkBoBhiD,SAOjC,YAAAwjI,iBAAR,SAAyBl9H,GACxB,IAII0R,EAAmB60G,EAAgBx3G,EAAqBM,EAHtD+tH,EAAc,IAAI,EAAAzvH,QAClBqtD,EAAe,IAAI,EAAArtD,QACnBqV,EAAQ5jB,KAAKyY,GAAGmL,MAGtBhjB,EAAWi4D,eAAej3D,SAAQ,SAACm3D,GAClC,IAAMx7D,EAASw7D,EAAYx7D,SACrB2+C,EAAgB6c,EAAY7c,gBAClC,GAAK3+C,EAAgB47D,OAAQ,CAC5B7mD,EAAQ4pC,EAAc5pC,QACjB4pC,EAAcvvC,WAXD,aAYjBuvC,EAAczuC,mBAZG,WAY6B,GAAI,GAGnD,IAAK,IAAIwwH,EAAK,EAAGA,EAAK3rH,EAAM9X,OAAQyjI,IAAM,EACzC9W,EAAO70G,EAAM2rH,IACRrkE,OAAOokE,GAEZruH,EAASw3G,EAAKx3G,OACd,IAAK,IAAIuuH,EAAK,EAAGA,EAAKvuH,EAAOnV,OAAQ0jI,IAAM,CAE1C,IAAMzuH,GADNQ,EAAQN,EAAOuuH,IACQzuH,WACvBmsD,EAAa/tD,EAAI4B,EAAS5B,EAAI+V,EAAQo6G,EAAYnwH,GAAK,EAAI+V,GAC3Dg4C,EAAa9tD,EAAI2B,EAAS3B,EAAI8V,EAAQo6G,EAAYlwH,GAAK,EAAI8V,GAC3Dg4C,EAAa5tD,EAAIyB,EAASzB,EAAI4V,EAAQo6G,EAAYhwH,GAAK,EAAI4V,GAC3D3T,EAAMqsC,iBA1BU,WA0BoBsf,UAM1C,EArJA,CAAiC,EAAA93D,cAApB,EAAA4/G,e,yFC/Bb,2BAGA,QAGA,SAEA,OAcM5iF,EAAe,IAXrB,uE,OACC,EAAAC,IAAM,EAAA7hC,YAAYJ,OAAO,GAAI,CAC5BoiC,eAAgB,CAACC,UAAW,YAC5Bg9F,wBAAwB,IAEzB,EAAA/8F,OAAS,EAAAliC,YAAYhB,OAAO,KAAM,CACjC4W,SAAU,SAACtR,EAAoB6S,GAC9BstG,EAAYriF,sBAAsB99B,M,EAGrC,OAVkC,iBAUlC,EAVA,CAAkC,EAAArE,mBAalC,yE,OACC,EAAA0iC,cAAgBf,E,EA+CjB,OAhDiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,aAKA,YAAAU,KAAA,WACgB,IAAI,EAAA8iH,mBAAmBp+H,KAAKyY,GAAGsoB,KACvCs9B,KAAKr+D,KAAK66H,SAASx9H,KAAK2C,MAAOA,KAAK86H,UAAUz9H,KAAK2C,QAGnD,YAAA66H,SAAR,SAAiBh6H,GAChBuC,QAAQC,IAAI,UAAWxC,GACvBA,EAAU,UAAeA,GACzBb,KAAKoB,YAAYP,IAEV,YAAAi6H,UAAR,SAAkBh5H,GACjB9B,KAAKswB,OAAOhT,MAAMpd,IAAI,gCAAgCF,KAAKyY,GAAGsoB,IAAG,KAAKj/B,EAAO,MAYvE,EAAAw/B,sBAAP,SAA6B99B,GAC5BA,EAAKk/B,yBAEE,YAAAA,sBAAR,WAIC1iC,KAAKvC,EAAEsjC,IAAIvsB,aAOb,EAhDA,CAAiC,EAAA1Q,cAApB,EAAA6/G,e,yFCxBb,SACA,QAQA,4BACA,QACA,QACA,SAgCA,aAGC,WACS5iF,GAAA,KAAAA,MAER,IAAM73B,EAAWlJ,KAAK+gC,IAAI53B,MAAM,KAChCnJ,KAAK+iG,IAAM75F,EAASA,EAAS1O,OAAS,GAAGukF,cACxB,QAAb/+E,KAAK+iG,MACR/iG,KAAK+iG,IAAM75F,EAASA,EAAS1O,OAAS,IA0NzC,OAnNC,YAAA6jE,KAAA,SAAKggE,EAA2CC,GAC/Ct+H,KAAKu+H,YACHnuG,MAAK,SAAC7yB,GACN8gI,EAAW9gI,MAEXohE,OAAM,SAACrhD,GACPghH,EAAShhH,OAIJ,YAAAihH,UAAR,sBACC,OAAO,IAAIv8G,SAAQ,SAAOC,EAASC,GAAM,+C,sFAClC6e,EAAM/gC,KAAK+gC,IAED,QAAZ/gC,KAAK+iG,IAAL,OACH,UACErmG,IAAIqkC,GACJ3Q,MAAK,SAACquC,IACa,IAAI,EAAA4V,cACZ9rE,MAAMk2D,EAASzkE,MAAM,SAACu8C,GAChCt0B,EAAQ,EAAKu8G,gBAAgBjoF,EAAIx6B,SAAS,WAG3C4iD,OAAM,SAACrhD,GACP4E,EAAO5E,M,cAGM,SAAMtd,KAAKmjG,kB,QAApB/hC,EAAS,UAEdA,EAAO/C,KACNt9B,GACA,SAACxjC,GACA6F,QAAQC,IAAI9F,GACZ,EAAKihI,gBAAgBjhI,GAAQ6yB,MAAK,SAACquG,GAClCx8G,EAAQw8G,aAGVp1H,GACA,SAAC8hC,GACAjpB,EAAOipB,OAIHA,EAAgB,yBAAyBnrC,KAAK+iG,IAAG,IACvD7gF,EAAOipB,I,sCA0BG,YAAAqzF,gBAAd,SAA8BjhI,G,yFAK7B,GAAIA,aAAkB,EAAA+I,SACrB,OAAQtG,KAAK+iG,KACZ,IAAK,OAEL,IAAK,MACJ,MAAO,CAAP,EAAO/iG,KAAK0+H,oBAAoBnhI,IAGjC,IAAK,MAEL,IAAK,OAEL,QACC,MAAO,CAAC,EAAD,CAACA,IAGX,GAAIA,aAAkB,EAAA8S,eACrB,OAAQrQ,KAAK+iG,KACZ,IAAK,MACJ,MAAO,CAAP,EAAO/iG,KAAK2+H,mBAAmBphI,IAChC,QACC,MAAO,CAAC,EAAD,CAAC,IAAI,EAAAgJ,KAAKhJ,KAKpB,OAAQyC,KAAK+iG,KACZ,IAAK,OAEL,IAAK,MACJ,MAAO,CAAP,EAAO/iG,KAAK0+H,oBAAoBnhI,IACjC,QACC,MAAO,CAAC,EAAD,IAET,MAAO,CAAC,EAAD,WAGA,YAAAmhI,oBAAR,SAA4BE,GAC3B,IAAMz7H,EAAQy7H,EAAY,MAI1B,OAHAz7H,EAAMq6C,WAAaohF,EAAKphF,WAExBp6C,QAAQC,IAAI,UAAW,CAACF,IACjB,CAACA,IAED,YAAAw7H,mBAAR,SAA2Bp9H,GAC1B,IAAMszC,EAAM,IAAI,EAAA5vC,oBAGhB,MAAO,CAFM,IAAI,EAAAsB,KAAKhF,EAAUszC,KAK3B,YAAAsuD,eAAN,W,yFACC,OAAQnjG,KAAK+iG,IAAIhkB,eAChB,IAAK,OACJ,MAAO,CAAP,EAAO/+E,KAAK6+H,mBACb,IAAK,MACJ,MAAO,CAAP,EAAO7+H,KAAK8+H,kBACb,IAAK,MACJ,MAAO,CAAP,EAAO9+H,KAAK++H,kBACb,IAAK,MACJ,MAAO,CAAP,EAAO/+H,KAAKg/H,kB,iBAIT,YAAAH,gBAAN,W,gHAIsB,oEAAa,U,OAClC,MAAO,CAAP,EAAO,IADAI,EAAc,SAA6D,qBAG7E,YAAAH,eAAN,W,4HACsB,oEAAa,U,OACZ,OADfG,EAAc,SAA6D,WAC5D,8DAAa,U,OAUnC,OAVOn/D,EAAe,SAA8D,YAE9EsB,EAAS,IAAI69D,EACbC,EAAe,IAAIp/D,EACJ,6BAErBo/D,EAAax+D,eAFQ,8BAGrBw+D,EAAav+D,iBAAiB,CAAC7iE,KAAM,OACrCsjE,EAAO+9D,eAAeD,GAEf,CAAP,EAAO99D,WAEF,YAAA29D,eAAN,W,wHAEuB,oEAAa,U,OAWnC,OAXOj/D,EAAe,SAA8D,YAI9Eo/D,EAAe,IAAIp/D,EACJ,wBAErBo/D,EAAax+D,eAFQ,yBAGrBw+D,EAAav+D,iBAAiB,CAAC7iE,KAAM,OAG9B,CAAP,EAAOohI,WAEF,YAAAF,eAAN,W,gHACqB,oEAAa,U,OACjC,MAAO,CAAP,EAAO,IADAI,EAAa,SAA4D,oBAmClF,EAnOA,GAAa,EAAAhB,sB,6BC5Cb,8JAmBIgB,EAAY,WAGf,IAAIC,EAAiB,gBAEjBC,EAA2B,WAE3BC,EAAuB,WAEvBC,EAAkB,WAEtB,SAASC,IAER,IAAIzgH,EAAQ,CACXne,QAAS,GACTtD,OAAQ,GAERmiI,SAAU,GACVnhF,QAAS,GACTy5D,OAAQ,GACRx5D,IAAK,GAELmhF,kBAAmB,GAEnBC,YAAa,SAAWvjI,EAAMwjI,GAI7B,GAAK7/H,KAAKzC,SAA0C,IAAhCyC,KAAKzC,OAAOsiI,gBAI/B,OAFA7/H,KAAKzC,OAAOlB,KAAOA,OACnB2D,KAAKzC,OAAOsiI,iBAAwC,IAApBA,GAKjC,IAAIC,EAAqB9/H,KAAKzC,QAAiD,mBAAhCyC,KAAKzC,OAAOwiI,gBAAiC//H,KAAKzC,OAAOwiI,uBAAoB12H,EA8H5H,GA5HKrJ,KAAKzC,QAA2C,mBAA1ByC,KAAKzC,OAAOyiI,WAEtChgI,KAAKzC,OAAOyiI,WAAW,GAIxBhgI,KAAKzC,OAAS,CACblB,KAAMA,GAAQ,GACdwjI,iBAAuC,IAApBA,EAEnBt+H,SAAU,CACTm+H,SAAU,GACVnhF,QAAS,GACTy5D,OAAQ,GACRx5D,IAAK,IAEN/5C,UAAW,GACXw7H,QAAQ,EAERC,cAAe,SAAW7jI,EAAMinE,GAE/B,IAAI68D,EAAWngI,KAAKggI,WAAW,GAI1BG,IAAcA,EAASC,WAAaD,EAASE,YAAc,IAE/DrgI,KAAKyE,UAAU/I,OAAQykI,EAASh+H,MAAO,GAIxC,IAAIe,EAAW,CACdf,MAAOnC,KAAKyE,UAAUjK,OACtB6B,KAAMA,GAAQ,GACdikI,OAAUnsG,MAAMosG,QAASj9D,IAAeA,EAAU9oE,OAAS,EAAI8oE,EAAWA,EAAU9oE,OAAS,GAAM,GACnGylI,YAAuB52H,IAAb82H,EAAyBA,EAASF,OAASjgI,KAAKigI,OAC1DO,gBAA2Bn3H,IAAb82H,EAAyBA,EAASM,SAAW,EAC3DA,UAAY,EACZJ,YAAc,EACdD,WAAW,EAEXt9H,MAAO,SAAWX,GAEjB,IAAIu+H,EAAS,CACZv+H,MAA0B,iBAAVA,EAAqBA,EAAQnC,KAAKmC,MAClD9F,KAAM2D,KAAK3D,KACXikI,OAAQtgI,KAAKsgI,OACbL,OAAQjgI,KAAKigI,OACbO,WAAY,EACZC,UAAY,EACZJ,YAAc,EACdD,WAAW,GAGZ,OADAM,EAAO59H,MAAQ9C,KAAK8C,MAAMzF,KAAMqjI,GACzBA,IAOT,OAFA1gI,KAAKyE,UAAU3J,KAAMoI,GAEdA,GAIR68H,gBAAiB,WAEhB,GAAK//H,KAAKyE,UAAUjK,OAAS,EAE5B,OAAOwF,KAAKyE,UAAWzE,KAAKyE,UAAUjK,OAAS,IAQjDwlI,UAAW,SAAWW,GAErB,IAAIC,EAAoB5gI,KAAK+/H,kBAU7B,GATKa,IAAsD,IAAjCA,EAAkBH,WAE3CG,EAAkBH,SAAWzgI,KAAKuB,SAASm+H,SAASllI,OAAS,EAC7DomI,EAAkBP,WAAaO,EAAkBH,SAAWG,EAAkBJ,WAC9EI,EAAkBR,WAAY,GAK1BO,GAAO3gI,KAAKyE,UAAUjK,OAAS,EAEnC,IAAM,IAAIqmI,EAAK7gI,KAAKyE,UAAUjK,OAAS,EAAGqmI,GAAM,EAAGA,IAE7C7gI,KAAKyE,UAAWo8H,GAAKR,YAAc,GAEvCrgI,KAAKyE,UAAU/I,OAAQmlI,EAAI,GAkB9B,OATKF,GAAiC,IAA1B3gI,KAAKyE,UAAUjK,QAE1BwF,KAAKyE,UAAU3J,KAAM,CACpBuB,KAAM,GACN4jI,OAAQjgI,KAAKigI,SAKRW,IAWJd,GAAoBA,EAAiBzjI,MAA0C,mBAA3ByjI,EAAiBh9H,MAAuB,CAEhG,IAAIg+H,EAAWhB,EAAiBh9H,MAAO,GACvCg+H,EAASV,WAAY,EACrBpgI,KAAKzC,OAAOkH,UAAU3J,KAAMgmI,GAI7B9gI,KAAKa,QAAQ/F,KAAMkF,KAAKzC,SAIzBwjI,SAAU,WAEJ/gI,KAAKzC,QAA2C,mBAA1ByC,KAAKzC,OAAOyiI,WAEtChgI,KAAKzC,OAAOyiI,WAAW,IAMzBgB,iBAAkB,SAAWlkI,EAAOwoG,GAEnC,IAAInjG,EAAQuF,SAAU5K,EAAO,IAC7B,OAAsD,GAA7CqF,GAAS,EAAIA,EAAQ,EAAIA,EAAQmjG,EAAM,IAIjD27B,iBAAkB,SAAWnkI,EAAOwoG,GAEnC,IAAInjG,EAAQuF,SAAU5K,EAAO,IAC7B,OAAsD,GAA7CqF,GAAS,EAAIA,EAAQ,EAAIA,EAAQmjG,EAAM,IAIjD47B,aAAc,SAAWpkI,EAAOwoG,GAE/B,IAAInjG,EAAQuF,SAAU5K,EAAO,IAC7B,OAAsD,GAA7CqF,GAAS,EAAIA,EAAQ,EAAIA,EAAQmjG,EAAM,IAIjD67B,UAAW,SAAWl2H,EAAGC,EAAG/O,GAE3B,IAAI+Y,EAAMlV,KAAK0/H,SACXzzB,EAAMjsG,KAAKzC,OAAOgE,SAASm+H,SAE/BzzB,EAAInxG,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,IAC/CghG,EAAInxG,KAAMoa,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,IAC/C+gG,EAAInxG,KAAMoa,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,KAIhDilI,eAAgB,SAAWn2H,GAE1B,IAAIiK,EAAMlV,KAAK0/H,SACL1/H,KAAKzC,OAAOgE,SAASm+H,SAE3B5kI,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,KAIhDo2H,cAAe,SAAWp2H,GAEzB,IAAIiK,EAAMlV,KAAK0/H,SACL1/H,KAAKzC,OAAOgE,SAASm+H,SAE3B5kI,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,KAIhDq2H,UAAW,SAAWr2H,EAAGC,EAAG/O,GAE3B,IAAI+Y,EAAMlV,KAAKu+C,QACX0tD,EAAMjsG,KAAKzC,OAAOgE,SAASg9C,QAE/B0tD,EAAInxG,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,IAC/CghG,EAAInxG,KAAMoa,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,IAC/C+gG,EAAInxG,KAAMoa,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,KAIhDolI,SAAU,SAAWt2H,EAAGC,EAAG/O,GAE1B,IAAI+Y,EAAMlV,KAAKg4G,OACX/L,EAAMjsG,KAAKzC,OAAOgE,SAASy2G,OAE/B/L,EAAInxG,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,IAC/CghG,EAAInxG,KAAMoa,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,IAC/C+gG,EAAInxG,KAAMoa,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,KAIhDqlI,MAAO,SAAWv2H,EAAGC,EAAG/O,GAEvB,IAAI+Y,EAAMlV,KAAKw+C,IACXytD,EAAMjsG,KAAKzC,OAAOgE,SAASi9C,IAE/BytD,EAAInxG,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,IACjCghG,EAAInxG,KAAMoa,EAAKhK,EAAI,GAAKgK,EAAKhK,EAAI,IACjC+gG,EAAInxG,KAAMoa,EAAK/Y,EAAI,GAAK+Y,EAAK/Y,EAAI,KAIlCslI,UAAW,SAAWx2H,GAErB,IAAIiK,EAAMlV,KAAKw+C,IACLx+C,KAAKzC,OAAOgE,SAASi9C,IAE3B1jD,KAAMoa,EAAKjK,EAAI,GAAKiK,EAAKjK,EAAI,KAIlCy2H,QAAS,SAAWz2H,EAAGC,EAAG/O,EAAGwlI,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAEhD,IAAIC,EAAOjiI,KAAK0/H,SAASllI,OAErB68E,EAAKr3E,KAAKghI,iBAAkB/1H,EAAGg3H,GAC/BC,EAAKliI,KAAKghI,iBAAkB91H,EAAG+2H,GAC/BE,EAAKniI,KAAKghI,iBAAkB7kI,EAAG8lI,GAUnC,GARAjiI,KAAKmhI,UAAW9pD,EAAI6qD,EAAIC,GAEnBniI,KAAKg4G,OAAOx9G,OAAS,GAEzBwF,KAAKuhI,SAAUlqD,EAAI6qD,EAAIC,QAIZ94H,IAAPs4H,GAA2B,KAAPA,EAAY,CAEpC,IAAIS,EAAQpiI,KAAKw+C,IAAIhkD,OACrB68E,EAAKr3E,KAAKkhI,aAAcS,EAAIS,GAC5BF,EAAKliI,KAAKkhI,aAAcU,EAAIQ,GAC5BD,EAAKniI,KAAKkhI,aAAcW,EAAIO,GAC5BpiI,KAAKwhI,MAAOnqD,EAAI6qD,EAAIC,GAIrB,QAAY94H,IAAPy4H,GAA2B,KAAPA,EAAY,CAGpC,IAAIO,EAAOriI,KAAKu+C,QAAQ/jD,OACxB68E,EAAKr3E,KAAKihI,iBAAkBa,EAAIO,GAEhCH,EAAKJ,IAAOC,EAAK1qD,EAAKr3E,KAAKihI,iBAAkBc,EAAIM,GACjDF,EAAKL,IAAOE,EAAK3qD,EAAKr3E,KAAKihI,iBAAkBe,EAAIK,GAEjDriI,KAAKshI,UAAWjqD,EAAI6qD,EAAIC,KAM1BG,iBAAkB,SAAW5C,GAE5B1/H,KAAKzC,OAAOgE,SAASzD,KAAO,SAI5B,IAFA,IAAImkI,EAAOjiI,KAAK0/H,SAASllI,OAEf+nI,EAAK,EAAGtmI,EAAIyjI,EAASllI,OAAQ+nI,EAAKtmI,EAAGsmI,IAE9CviI,KAAKohI,eAAgBphI,KAAKghI,iBAAkBtB,EAAU6C,GAAMN,KAM9DO,gBAAiB,SAAW9C,EAAUlhF,GAErCx+C,KAAKzC,OAAOgE,SAASzD,KAAO,OAK5B,IAHA,IAAImkI,EAAOjiI,KAAK0/H,SAASllI,OACrB4nI,EAAQpiI,KAAKw+C,IAAIhkD,OAEX+nI,EAAK,EAAGtmI,EAAIyjI,EAASllI,OAAQ+nI,EAAKtmI,EAAGsmI,IAE9CviI,KAAKqhI,cAAerhI,KAAKghI,iBAAkBtB,EAAU6C,GAAMN,IAItD,IAAIQ,EAAM,EAAhB,IAAmBxmI,EAAIuiD,EAAIhkD,OAAQioI,EAAMxmI,EAAGwmI,IAE3CziI,KAAKyhI,UAAWzhI,KAAKkhI,aAAc1iF,EAAKikF,GAAOL,MAUlD,OAFApjH,EAAM4gH,YAAa,IAAI,GAEhB5gH,EAMR,SAASogH,EAAWr/D,GAEnB,IAAOnlE,KAAMoF,KAAM+/D,GAEnB//D,KAAKyE,UAAY,KAualB,OAnaA26H,EAAU1kI,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEvE0U,YAAagwH,EAEb/gE,KAAM,SAAWt9B,EAAKkgC,EAAQC,EAAYC,GAEzC,IAAIpS,EAAQ/uD,KAERohE,EAAS,IAAI,IAAYrS,EAAMgR,SACnCqB,EAAOC,QAASrhE,KAAKoX,MACrBgqD,EAAO/C,KAAMt9B,GAAK,SAAW2hG,GAE5BzhE,EAAQlS,EAAMxmD,MAAOm6H,MAEnBxhE,EAAYC,IAIhBwhE,aAAc,SAAWl+H,GAIxB,OAFAzE,KAAKyE,UAAYA,EAEVzE,MAIRuI,MAAO,SAAWm6H,GAEjBt/H,QAAQ2lF,KAAM,aAEd,IAAI/pE,EAAQ,IAAIygH,GAEkB,IAA7BiD,EAAKp+H,QAAS,UAGlBo+H,EAAOA,EAAKv6H,QAAS,QAAS,QAIG,IAA7Bu6H,EAAKp+H,QAAS,UAGlBo+H,EAAOA,EAAKv6H,QAAS,QAAS,KAY/B,IARA,IAAIglE,EAAQu1D,EAAKv5H,MAAO,MACpBk9F,EAAO,GAAIu8B,EAAgB,GAE3BvnI,EAAS,GAGTwnI,EAAoC,kBAAhB,GAAGA,SAEjBvoI,EAAI,EAAG2B,EAAIkxE,EAAM3yE,OAAQF,EAAI2B,EAAG3B,IAQzC,GANA+rG,EAAOl5B,EAAO7yE,GAMM,KAJpB+rG,EAAOw8B,EAAWx8B,EAAKw8B,WAAax8B,EAAKy8B,QAEvBtoI,QAOK,OAHvBooI,EAAgBv8B,EAAKY,OAAQ,IAK7B,GAAuB,MAAlB27B,EAAwB,CAE5B,IAAI5oI,EAAOqsG,EAAKl9F,MAAO,OAEvB,OAASnP,EAAM,IAEd,IAAK,IACJglB,EAAM0gH,SAAS5kI,KACdgqD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,KAEdA,EAAKQ,QAAU,GAEnBwkB,EAAMg5F,OAAOl9G,KACZgqD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,KAKpB,MACD,IAAK,KACJglB,EAAMu/B,QAAQzjD,KACbgqD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,KAEnB,MACD,IAAK,KACJglB,EAAMw/B,IAAI1jD,KACTgqD,WAAY9qD,EAAM,IAClB8qD,WAAY9qD,EAAM,WAMf,GAAuB,MAAlB4oI,EAAwB,CAQnC,IANA,IACIG,EADW18B,EAAKz9F,OAAQ,GAAIk6H,OACN35H,MAAO,OAC7B65H,EAAe,GAITxnI,EAAI,EAAGikD,EAAKsjF,EAAWvoI,OAAQgB,EAAIikD,EAAIjkD,IAAO,CAEvD,IAAIynI,EAASF,EAAYvnI,GAEzB,GAAKynI,EAAOzoI,OAAS,EAAI,CAExB,IAAI0oI,EAAcD,EAAO95H,MAAO,KAChC65H,EAAaloI,KAAMooI,IAQrB,IAAIC,EAAKH,EAAc,GAEvB,IAAUxnI,EAAI,EAAGikD,EAAKujF,EAAaxoI,OAAS,EAAGgB,EAAIikD,EAAIjkD,IAAO,CAE7D,IAAIygE,EAAK+mE,EAAcxnI,GACnB0gE,EAAK8mE,EAAcxnI,EAAI,GAE3BwjB,EAAM0iH,QACLyB,EAAI,GAAKlnE,EAAI,GAAKC,EAAI,GACtBinE,EAAI,GAAKlnE,EAAI,GAAKC,EAAI,GACtBinE,EAAI,GAAKlnE,EAAI,GAAKC,EAAI,UAKlB,GAAuB,MAAlB0mE,EAAwB,CAEnC,IAAIQ,EAAY/8B,EAAKx+F,UAAW,GAAIi7H,OAAO35H,MAAO,KAC9Ck6H,EAAe,GAAIC,EAAU,GAEjC,IAA+B,IAA1Bj9B,EAAK/hG,QAAS,KAElB++H,EAAeD,OAIf,IAAM,IAAIG,EAAK,EAAGC,EAAOJ,EAAU5oI,OAAQ+oI,EAAKC,EAAMD,IAAQ,CAE7D,IAAIE,EAAQL,EAAWG,GAAKp6H,MAAO,KAEf,KAAfs6H,EAAO,IAAaJ,EAAavoI,KAAM2oI,EAAO,IAC/B,KAAfA,EAAO,IAAaH,EAAQxoI,KAAM2oI,EAAO,IAKhDzkH,EAAMwjH,gBAAiBa,EAAcC,QAE/B,GAAuB,MAAlBV,EAAwB,CAEnC,IACIc,EADWr9B,EAAKz9F,OAAQ,GAAIk6H,OACP35H,MAAO,KAEhC6V,EAAMsjH,iBAAkBoB,QAElB,GAAkD,QAA3CroI,EAASgkI,EAAesE,KAAMt9B,IAAoB,CAQ/D,IAAIhqG,GAAS,IAAMhB,EAAQ,GAAIuN,OAAQ,GAAIk6H,QAASl6H,OAAQ,GAE5DoW,EAAM4gH,YAAavjI,QAEb,GAAKkjI,EAAqBh4H,KAAM8+F,GAItCrnF,EAAMzhB,OAAO2iI,cAAe75B,EAAKx+F,UAAW,GAAIi7H,OAAQ9jH,EAAM2gH,wBAExD,GAAKL,EAAyB/3H,KAAM8+F,GAI1CrnF,EAAM2gH,kBAAkB7kI,KAAMurG,EAAKx+F,UAAW,GAAIi7H,aAE5C,GAAKtD,EAAgBj4H,KAAM8+F,GAKjCjjG,QAAQmT,KAAM,6GAER,GAAuB,MAAlBqsH,EAAwB,CAwBnC,IAtBAvnI,EAASgrG,EAAKl9F,MAAO,MAsBT3O,OAAS,EAAI,CAExB,IAAIsC,EAAQzB,EAAQ,GAAIynI,OAAO/jD,cAC/B//D,EAAMzhB,OAAO0iI,OAAqB,MAAVnjI,GAA2B,QAAVA,OAKzCkiB,EAAMzhB,OAAO0iI,QAAS,GAGnB/8H,GAAW8b,EAAMzhB,OAAOwiI,qBACZ78H,GAAS+8H,OAASjhH,EAAMzhB,OAAO0iI,YAEzC,CAGN,GAAc,OAAT55B,EAAgB,SAErBjjG,QAAQmT,KAAM,sCAAwC8vF,EAAO,KAM/DrnF,EAAM+hH,WAEN,IAAIh/H,EAAY,IAAI,QACpBA,EAAU49H,kBAAoB,GAAGiE,OAAQ5kH,EAAM2gH,mBAE/C,IAAUrlI,EAAI,EAAG2B,EAAI+iB,EAAMne,QAAQrG,OAAQF,EAAI2B,EAAG3B,IAAO,CAExD,IAAIiD,EAASyhB,EAAMne,QAASvG,GACxBiH,EAAWhE,EAAOgE,SAClBkD,EAAYlH,EAAOkH,UACnB20D,EAA6B,SAAlB73D,EAASzD,KACpBu7D,EAA+B,WAAlB93D,EAASzD,KACtB+lI,GAAkB,EAGtB,GAAkC,IAA7BtiI,EAASm+H,SAASllI,OAAvB,CAEA,IAAIspI,EAAiB,IAAI,iBAEzBA,EAAev2H,aAAc,WAAY,IAAI,yBAAwBhM,EAASm+H,SAAU,IAEnFn+H,EAASg9C,QAAQ/jD,OAAS,EAE9BspI,EAAev2H,aAAc,SAAU,IAAI,yBAAwBhM,EAASg9C,QAAS,IAIrFulF,EAAe33H,uBAIX5K,EAASy2G,OAAOx9G,OAAS,IAE7BqpI,GAAkB,EAClBC,EAAev2H,aAAc,QAAS,IAAI,yBAAwBhM,EAASy2G,OAAQ,KAI/Ez2G,EAASi9C,IAAIhkD,OAAS,GAE1BspI,EAAev2H,aAAc,KAAM,IAAI,yBAAwBhM,EAASi9C,IAAK,IAQ9E,IAFA,IA4DIulF,EA5DAC,EAAmB,GAEbnD,GAAK,EAAGoD,GAAQx/H,EAAUjK,OAAQqmI,GAAKoD,GAAOpD,KAAQ,CAE/D,IAAIqD,GAAiBz/H,EAAWo8H,IAC5B39H,QAAWmG,EAEf,GAAwB,OAAnBrJ,KAAKyE,UAKT,GAHAvB,GAAWlD,KAAKyE,UAAUtH,OAAQ+mI,GAAe7nI,OAG5C+8D,IAAUl2D,IAAgBA,cAAoB,qBAO5C,GAAKm2D,GAAYn2D,MAAgBA,cAAoB,kBAAmB,CAE9E,IAAIihI,GAAiB,IAAI,iBAAgB,CAAE3+H,KAAM,GAAIwvG,iBAAiB,IACtE,WAASt6G,UAAUuqB,KAAKrqB,KAAMupI,GAAgBjhI,IAC9CihI,GAAev/H,MAAMqgB,KAAM/hB,GAAS0B,OACpCu/H,GAAe95H,IAAMnH,GAASmH,IAC9BnH,GAAWihI,QAb6D,CAExE,IAAIC,GAAe,IAAI,oBACvB,WAAS1pI,UAAUuqB,KAAKrqB,KAAMwpI,GAAclhI,IAC5CkhI,GAAax/H,MAAMqgB,KAAM/hB,GAAS0B,OAClC1B,GAAWkhI,GAcNlhI,MAILA,GAFIk2D,EAEO,IAAI,oBAEJC,EAEA,IAAI,iBAAgB,CAAE7zD,KAAM,EAAGwvG,iBAAiB,IAIhD,IAAI,KAIP34G,KAAO6nI,GAAe7nI,MAIhC6G,GAASmhI,aAAcH,GAAejE,OACtC/8H,GAASiC,aAAe0+H,EAAkB,eAAe,WAEzDG,EAAiBlpI,KAAMoI,IAQxB,GAAK8gI,EAAiBxpI,OAAS,EAAI,CAElC,IAAUqmI,GAAK,EAAGoD,GAAQx/H,EAAUjK,OAAQqmI,GAAKoD,GAAOpD,KAAQ,CAE3DqD,GAAiBz/H,EAAWo8H,IAChCiD,EAAejjF,SAAUqjF,GAAe1D,WAAY0D,GAAe7D,WAAYQ,IAM/EkD,EAFI3qE,EAEG,IAAI,eAAc0qE,EAAgBE,GAE9B3qE,EAEJ,IAAI,SAAQyqE,EAAgBE,GAI5B,IAAI,OAAMF,EAAgBE,QAQjCD,EAFI3qE,EAEG,IAAI,eAAc0qE,EAAgBE,EAAkB,IAEhD3qE,EAEJ,IAAI,SAAQyqE,EAAgBE,EAAkB,IAI9C,IAAI,OAAMF,EAAgBE,EAAkB,IAMrDD,EAAK1nI,KAAOkB,EAAOlB,KAEnB0F,EAAUud,IAAKykH,IAMhB,OAFA3gI,QAAQkhI,QAAS,aAEVviI,KAMFq9H,EArxBQ,I,yFCnBhB,QAGA,QACA,OAGA,OACA,QASMt+F,EAAe,IANrB,uE,OACC,EAAAyjG,KAAO,EAAArlI,YAAYZ,MAAM,GAAK,CAC7B6kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,K,EAEvB,OALkC,iBAKlC,EALA,CAAkC,EAAAjkC,mBAQlC,yE,OACC,EAAA0iC,cAAgBf,E,EAmEjB,OApEiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,4BAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAKJ,IAJA,IAGIohC,EADE09D,EAAc,GAEI,MAJL9+F,EAAe,GAICs9C,eAAX,eAA2B,CAA9C,IAAIE,EAAW,MACnBpc,EAAa38C,KAAKwkI,kBAAkBzrE,KAEnCshD,EAAYv/G,KAAK6hD,GAInB38C,KAAKoB,YAAYi5G,IAGV,YAAAmqB,kBAAR,SAA0BzrE,GACzB,IAAMx7D,EAASw7D,EAAYx7D,SAC3B,GAAKA,EAAL,CAOA,IAJA,IAAMoS,EAASopD,EAAYppD,SAErB9G,EAAY7I,KAAKyY,GAAG8rH,KACpBE,EAA8C,GAClC,MAAA90H,EAAA,eAAQ,CAArB,IAAIM,EAAK,KACPR,EAAWQ,EAAMR,WAMjBrS,EALmB,IAAI,EAAAmR,QAC5BvF,KAAKykB,MAAMhe,EAAS5B,EAAIhF,GACxBG,KAAKykB,MAAMhe,EAAS3B,EAAIjF,GACxBG,KAAKykB,MAAMhe,EAASzB,EAAInF,IAEIyiB,UAAUzhB,KAAK,KAC5C46H,EAAmBrnI,GAAOqnI,EAAmBrnI,IAAQ,GACrDqnI,EAAmBrnI,GAAKtC,KAAKmV,GAG9B,IAAM6sH,EAA2B,GAMjC,OALAriI,OAAO6R,KAAKm4H,GAAoB7iI,SAAQ,SAACxE,GACxC0/H,EAAYhiI,KAAK2pI,EAAmBrnI,GAAK,OAGzCG,EAAgBgE,SAASic,UACtBs/G,EAAYtiI,OAAS,GACvB+C,EAAgBgE,SAAW,EAAAyK,aAAamE,qBACxC2sH,EACUv/H,EAAO6R,aAEX7R,QALR,IAWF,EApEA,CAAiC,EAAAuG,cAApB,EAAA8/G,e,yFCnBb,OACA,QACA,QACA,QAEA,SAEM4Q,EAAa,IAAI,EAAAjmH,QAAQ,EAAG,EAAG,GAErC,OASMuyB,EAAe,IARrB,uE,OACC,EAAAt7B,KAAO,EAAAtG,YAAYH,QAAQ,CAAC,EAAG,IAC/B,EAAA2lI,eAAiB,EAAAxlI,YAAYZ,MAAM,IACnC,EAAA4jH,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACvC,EAAA2lI,YAAc,EAAAzlI,YAAYd,QAAQ,G,EAGnC,OAPsC,iBAOtC,EAPA,CAAsC,EAAAe,mBAUtC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EAiB/B,OAvBqC,iBAE7B,EAAA5nB,KAAP,WACC,MAAO,YAKR,YAAA8c,gBAAA,aAEA,YAAAU,KAAA,WACC,IACM/Z,EADY,IAAI,EAAAqjI,6BAA6B5kI,KAAKyY,GAAGjT,KAAMxF,KAAKyY,GAAGisH,eAAgB1kI,KAAKyY,GAAGksH,aACtEt8D,UAC3BjlE,QAAQC,IAAI9B,EAAUA,EAASqL,WAAW6C,UAE1CzP,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUizH,EAAYx0H,KAAKyY,GAAGypG,WAE/DliH,KAAKyY,GAAGksH,YACX3kI,KAAKsB,aAAaC,EAAU,EAAAiB,aAAaC,YAAY0B,QAErDnE,KAAKsB,aAAaC,IAGrB,EAvBA,CAAqC,EAAAuC,cAAxB,EAAA+/G,mB,yFCpBb,OACA,QAEMx3F,EAAQ,CAAC4rF,gBADf,MAC8B,gBAAE5nG,eAAc,iBAAEygB,QAAO,WACvD,2BAGA,aACC,WACS+zG,EACAC,EACAC,GAFA,KAAAF,cACA,KAAAC,wBACA,KAAAC,qBA0EV,OAvEC,YAAA18D,QAAA,WAaC,IAZA,IAAM28D,EAAchlI,KAAK8kI,sBACnBG,EAAiC,GAAdD,EACnBt3G,EACFs3G,EADEt3G,EAEF1kB,KAAK8lB,IAAI9lB,KAAKmiB,GAAK,GAAKnrB,KAAK8kI,sBAE3Bn3G,EACF3kB,KAAK8kB,MAAM9tB,KAAK6kI,YAAYh3H,EAAI6f,GAD9BC,EAEF3kB,KAAK8kB,MAAM9tB,KAAK6kI,YAAY/2H,EAAI4f,GAEhCmF,EAAY,GACZjvB,EAAU,GACLkK,EAAI,EAAGA,EAAI6f,EAAe7f,IAClC,IAAK,IAAID,EAAI,EAAGA,EAAI8f,EAAe9f,IAClCglB,EAAU/3B,KAAK,EACS,GAArBkF,KAAK6kI,YAAYh3H,EAClBA,EAAI6f,GACH5f,EAAI,GAAK,EAAIm3H,EAAmB,GAClC,GACuB,GAArBjlI,KAAK6kI,YAAY/2H,EAAWA,EAAI4f,IAG9B1tB,KAAK+kI,oBACLj3H,GAAK,IACC,GAALD,GAAUA,GAAK8f,EAAgB,EACzB,GAAL9f,EACHjK,EAAQ9I,KAAK,CACZ+S,EAAI,GAAKC,EAAI,GAAK6f,EAClB9f,GAAKC,EAAI,GAAK6f,EACd9f,EAAIC,EAAI6f,IAGT/pB,EAAQ9I,KAAK,CACZ+S,EAAIC,EAAI6f,EACR9f,GAAKC,EAAI,GAAK6f,EACd9f,EAAI,EAAIC,EAAI6f,KAId/pB,EAAQ9I,KAAK,CACZ+S,EAAIC,EAAI6f,EACR9f,GAAKC,EAAI,GAAK6f,EACd9f,EAAI,EAAIC,EAAI6f,IAEb/pB,EAAQ9I,KAAK,CACZ+S,EAAIC,EAAI6f,EACR9f,EAAI,GAAKC,EAAI,GAAK6f,EAClB9f,GAAKC,EAAI,GAAK6f,MAOpBkF,EAAY,UAAeA,GAE3B,IAAMtxB,EAAW,IAAI8qB,EAAMhc,eAY3B,OAXA9O,EAASgM,aACR,WACA,IAAI8e,EAAM4rF,gBAAgB,IAAIllF,aAAaF,GAAY,IAGnD7yB,KAAK+kI,qBACTnhI,EAAU,UAAeA,GACzBrC,EAASgB,SAASqB,GAClBrC,EAAS4K,wBAGH5K,GAET,EA9EA,GAAa,EAAAqjI,gC,kFCCDM,E,OARZ,QAEM74G,EAAQ,CAAChmB,MADf,MACoB,MAAEC,SAAQ,YAC9B,SAKA,SAAY4+H,GACX,0BACA,gCAFD,CAAYA,EAAA,EAAAA,gBAAA,EAAAA,cAAa,KAIZ,EAAAC,gBAAwC,CAACD,EAAcE,WAAYF,EAAcG,eAE9F,WAWMvkG,EAAe,IAVrB,uE,OACC,EAAA9jC,KAAO,EAAAkC,YAAYV,QAAQ,EAAG,CAC7B+iC,KAAM,CACLC,QAAS,EAAA2jG,gBAAgB96H,KAAI,SAACnO,EAAG5B,GAChC,MAAO,CAAC+B,KAAMH,EAAGY,MAAOxC,SAI3B,EAAAkxG,OAAS,EAAAtsG,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,K,EAC7C,OATuC,iBASvC,EATA,CAAuC,EAAAhkC,mBAYvC,yE,OACC,EAAA0iC,cAAgBf,E,EAsGjB,OAvGsC,iBAE9B,EAAAhjC,KAAP,WACC,MAAO,aAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,8CAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,IAG1B,YAAA3I,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAGlC,GAAI,EAAA4pH,gBAAgBnlI,KAAKyY,GAAGzb,OAASkoI,EAAcE,WAAY,CAC9D,IAAMvkI,EAAUb,KAAKslI,0BAA0B1kI,GAC/CZ,KAAKoB,YAAYP,OACX,CACAA,EAAUb,KAAKulI,+BAA+B3kI,GACpDZ,KAAKoB,YAAYP,KAIX,YAAAykI,0BAAR,SAAkC1kI,GACjC,GAAsB,GAAlBZ,KAAKyY,GAAG+yF,OACX,OAAO5qG,EAAWC,UAIlB,IAFA,IAAMw5G,EAA0B,GAC5B19D,OAAU,EACK,MAAA/7C,EAAWC,UAAX,eAAsB,CAApC,IAAItD,EAAM,MACdo/C,EAAa38C,KAAKwlI,sBAAsBjoI,KAEvC88G,EAAYv/G,KAAK6hD,GAInB,OAAO09D,GAGD,YAAAmrB,sBAAR,SAA8BjoI,GAC7B,IAAIkoI,EAAa,IAAIp5G,EAAMhmB,MAM3B,GAHAo/H,EAAWnmH,IAAI/hB,GAGXyC,KAAKyY,GAAG+yF,OAAS,EACpB,IAAK,IAAIlxG,EAAI,EAAGA,EAAI0F,KAAKyY,GAAG+yF,OAAS,EAAGlxG,IAEvCmrI,EAAazlI,KAAK0lI,gBAAgBD,GAIpC,OAAOA,GAGA,YAAAC,gBAAR,SAAwBnoI,GACvB,IAAMooI,EAAc,IAAIt5G,EAAMhmB,MAE9B,OADAs/H,EAAYrmH,IAAI/hB,GACTooI,GAGA,YAAAJ,+BAAR,SAAuC3kI,GACtC,GAAsB,GAAlBZ,KAAKyY,GAAG+yF,OACX,OAAO5qG,EAAWC,UAGlB,IADA,IAAMw5G,EAA0B,GACb,MAAAz5G,EAAWC,UAAX,eAElB,IAFI,IAAItD,EAAM,KAEQ,MADDyC,KAAK4lI,2BAA2BroI,GAC/B,eAAc,CAA/B,IAAIsoI,EAAS,KACjBxrB,EAAYv/G,KAAK+qI,GAGnB,OAAOxrB,GAID,YAAAurB,2BAAR,SAAmCroI,GAGlC,IAFA,IAAIuoI,EAAmBvoI,EAAOwe,SAErBzhB,EAAI,EAAGA,EAAI0F,KAAKyY,GAAG+yF,OAAS,EAAGlxG,IACvCwrI,EAAmB9lI,KAAK+lI,2BAA2BD,GAGpD,OAAOA,GAGA,YAAAC,2BAAR,SAAmCllI,GAGlC,IAFA,IAAItD,EACEwe,EAAuB,GACrBxe,EAASsD,EAAQkhB,OACxB,GAAIxkB,EAAOwe,SACV,IAAkB,UAAAxe,EAAOwe,SAAP,eAAiB,CAA9B,IAAIs+C,EAAK,KACbt+C,EAASjhB,KAAKu/D,GAIjB,OAAOt+C,GAET,EAvGA,CAAsC,EAAAjY,cAAzB,EAAAggH,oB,yFC1BPz3F,EAAQ,CAAC9d,QADf,KACsB,SAEtB,QACA,QAEA,OACA,QAKMuyB,EAAe,IAJrB,uE,OACC,EAAAklG,OAAS,EAAA9mI,YAAYZ,MAAM,GAC3B,EAAAkoH,KAAO,EAAAtnH,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,O,EAC3C,OAHoC,iBAGpC,EAHA,CAAoC,EAAAhkC,mBAMpC,yE,OACC,EAAA0iC,cAAgBf,E,EAoCjB,OArCmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,UAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,iCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAAL,WACO3a,EAAa2a,EAAe,GAElC3a,EAAW+O,SAAS/N,SAAQ,SAACqO,EAAO3V,GAEnC,IAAMsmD,EAAS,IAAIv0B,EAAM9d,QACxB,GAAK,EAAA6W,SAASiI,KAAS,GAAJ/yB,EAAS,IAAM,EAAKme,GAAG+tG,MAAQ,IAClD,GAAK,EAAAphG,SAASiI,KAAS,KAAJ/yB,EAAW,KAAO,EAAKme,GAAG+tG,MAAQ,IACrD,GAAK,EAAAphG,SAASiI,KAAS,IAAJ/yB,EAAU,MAAQ,EAAKme,GAAG+tG,MAAQ,KAEtD5lE,EAAO30B,YACP20B,EAAO17B,eAAe,EAAKzM,GAAGutH,QAE9B,IAAMpqE,EAAe3rD,EACnBR,WACA3M,QACAwc,IAAIshC,GACN3wC,EAAM0rD,aAAaC,MAGpB57D,KAAKW,eAAeC,IAEtB,EArCA,CAAmC,EAAAkD,cAAtB,EAAAigH,iB,yFCdb,QAEA,OACA,QAQMjjF,EAAe,IANrB,uE,OACC,EAAA+O,MAAQ,EAAA3wC,YAAYV,QAAQ,EAAG,CAC9B2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,K,EAEvB,OALmC,iBAKnC,EALA,CAAmC,EAAAjkC,mBAQnC,yE,OACC,EAAA0iC,cAAgBf,E,EAsBjB,OAvBkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,gCAET,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAGJ,IAFA,IAAM3a,EAAa2a,EAAe,GAEf,MAAA3a,EAAWC,UAAX,eAAsB,CAA1B,KACPivC,OAAO5vC,IAAIF,KAAKyY,GAAGo3B,OAG3B7vC,KAAKW,eAAeC,IAEtB,EAvBA,CAAkC,EAAAkD,cAArB,EAAAkgH,gB,yFCbb,QACA,QACA,4BAEA,QACA,QAEA,OAUMljF,EAAe,IATrB,uE,OACC,EAAAtmC,OAAS,EAAA0E,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,MAC1C,EAAAx/B,aAAe,EAAAzE,YAAYV,QAAQ,EAAG,CACrC2kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,EAAA++E,OAAS,EAAAjjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACpC,EAAAkjH,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACxC,OARkC,iBAQlC,EARA,CAAkC,EAAAG,mBAWlC,yE,OACC,EAAA0iC,cAAgBf,E,EAkCjB,OAnCiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,aAEA,YAAAU,KAAA,sBACO3X,EAAeqF,KAAKC,IAAI,EAAGjJ,KAAKyY,GAAG9U,cAEnCkvB,EAAsB,IAAIsB,MAAqB,EAAfxwB,GAChCC,EAAoB,IAAIuwB,MAAMxwB,GAE9BsiI,EAAUjmI,KAAKyY,GAAGypG,UACtBp/G,QACAmpB,YACA/G,eAAellB,KAAKyY,GAAGje,QAEzB,UAAamJ,GAAc,SAACrJ,GAC3B,IAAM4rI,EAAM5rI,GAAKqJ,EAAe,GAC1BsM,EAAQg2H,EAAQnjI,QAAQoiB,eAAeghH,GAC7Cj2H,EAAMqP,IAAI,EAAK7G,GAAG0pG,QAClBlyG,EAAMqb,QAAQuH,EAAe,EAAJv4B,GAErBA,EAAI,IACPsJ,EAAkB,GAATtJ,EAAI,IAAUA,EAAI,EAC3BsJ,EAAkB,GAATtJ,EAAI,GAAS,GAAKA,MAG7B,IAAMiH,EAAW,IAAI,EAAA8O,eACrB9O,EAASgM,aAAa,WAAY,IAAI,EAAAc,uBAAuBwkB,EAAW,IACxEtxB,EAASgB,SAASqB,GAClB5D,KAAKsB,aAAaC,EAAU,EAAAiB,aAAaC,YAAY2B,gBAEvD,EAnCA,CAAiC,EAAAN,cAApB,EAAAmgH,e,yFCnBb,QAGA,SACA,SAEA,QACA,QAGA,QAKA,OAYMnjF,EAAe,IAVrB,uE,OACC,EAAAub,MAAQ,EAAAn9C,YAAYJ,OAAO,IAC3B,EAAAoE,SAAW,EAAAhE,YAAYT,cAAc,sBAAuB,CAC3D89B,eAAgB,CACfC,QAAS,EAAA58B,YAAYie,KAEtB4e,yBAAyB,IAE1B,EAAA0pG,kBAAoB,EAAAjnI,YAAYd,QAAQ,G,EACzC,OATsC,iBAStC,EATA,CAAsC,EAAAe,mBAYtC,yE,OACC,EAAA0iC,cAAgBf,EAMhB,EAAA6xC,iBAA2C,IAAI,EAAAttB,uB,EA+DhD,OAtEqC,iBAE7B,EAAAvnD,KAAP,WACC,MAAO,YAMD,EAAAgC,sBAAP,WACC,MAAO,CAAC,kCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAMrD,YAAAx/E,KAAN,SAAW8qH,G,gJAGJxlI,EAAawlI,EAAY,IAEzB5iI,EAAOxD,KAAKvC,EAAEyF,SAAS26B,cAExBr6B,EAAK7D,gBAAkB,EAAAC,YAAYie,IAAnC,OACH7d,KAAKswB,OAAOhT,MAAMpd,IAAI,0B,OAFpB,M,OAWF,OANM,GADAoD,EAAgBE,GACSN,oBACP,EAAA+sG,gBACOzsG,EACRq0B,qBAAqB66C,8BAA8B1yE,KAAK2yE,kBAG/E,GAAMrvE,EAAc2T,qB,OACpB,GADA,SACI,EAAU,CACb,IAAK,EAAL,EAAmB,EAAArW,EAAW24D,mBAAmBv5D,KAAKyY,GAAG4jC,OAAtC,eAAV9+C,EAAM,KACVyC,KAAKyY,GAAG0tH,kBACX5oI,EAAO0/C,UAAS,SAACopF,GAChB,EAAKC,eAAeD,EAAa,MAGlCrmI,KAAKsmI,eAAe/oI,EAAQ,GAG9ByC,KAAKW,eAAeC,QAEpBZ,KAAKswB,OAAOhT,MAAMpd,IAAI,8BAA8BoD,EAAcgtB,OAAOhT,MAAMxb,QAAO,M,oCAIxF9B,KAAKswB,OAAOhT,MAAMpd,IAAI,SAASF,KAAKyY,GAAGvV,SAAQ,e,mCAIjD,YAAAojI,eAAA,SAAe/oI,EAAkB2F,GACH3F,EAOR2F,SAAWA,EAChC,EAAAK,aAAakxC,uBAAuBl3C,EAAQ2F,IAE9C,EAtEA,CAAqC,EAAAY,cAAxB,EAAAogH,mB,yFCrBb,QAIA,QAIA,QAOMqiB,EAAa,oBAEnB,OAIMzlG,EAAe,IAHrB,uE,OACC,EAAA0lG,QAAU,EAAAtnI,YAAYd,QAAQ,G,EAC/B,OAFmC,iBAEnC,EAFA,CAAmC,EAAAe,mBAKnC,yE,OACC,EAAA0iC,cAAgBf,E,EA2FjB,OA5FkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAGD,EAAAgC,sBAAP,WACC,MAAO,CAACymI,EAAYA,EAAYA,EAAYA,IAG7C,YAAA3rH,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAE5BjkB,KAAKw3B,QAAQsqD,UAAU,MAIxB,YAAAxmE,KAAA,SAAKC,GAEJ,IADA,IAAI+4D,EAAsC,GACb,MAAA/4D,EAAA,eAAgB,CAAxC,IAAIkrH,EAAgB,KACxB,GAAIA,EAEH,IADA,IACmB,MADHA,EAAiB5lI,UACd,eAAS,CAAb,KACPo8C,UAAS,SAACod,GAChBia,EAAYx5E,KAAKu/D,OAKjBr6D,KAAKyY,GAAG+tH,UACXlyD,EAAct0E,KAAK0mI,cAAcpyD,IAElCt0E,KAAKoB,YAAYkzE,IAGlB,YAAAoyD,cAAA,SAAcpyD,GAQb,I,MAPMqyD,IAAe,MACnB,EAAA1iI,WAAWvB,MAAO,GACnB,EAAC,EAAAuB,WAAWE,QAAS,GACrB,EAAC,EAAAF,WAAWG,eAAgB,G,GAEvBwiI,EAAyC,GAE5B,MAAAtyD,EAAA,eAAa,EAAvB/2E,EAAM,MACP0/C,UAAS,SAACwsE,GAChB,IAAMlsH,EAASksH,EACXlsH,EAAOgE,WAELhE,EAAgB47D,OACpBwtE,EAAgB,EAAA1iI,WAAWvB,MAAM5H,KAAKyC,GAEjCA,EAAwBspI,eAC5BF,EAAgB,EAAA1iI,WAAWG,eAAetJ,KAAKyC,GAE1CA,EAAkB87D,UACtBstE,EAAgB,EAAA1iI,WAAWE,QAAQrJ,KAAKyC,OAQ9C,IAAiB,UAAA9C,OAAO6R,KAAKq6H,GAAZ,eAA6C,CAI7D,IAJI,IAAI7oI,EAAI,KAGN6D,EAAa,GACA,MAHHglI,EAAgB7oI,GAGb,eAAS,CAAvB,IACEyD,GADEhE,EAAM,MACUgE,SACxBA,EAAS6qB,YAAY7uB,EAAOmnB,QAC5B/iB,EAAW7G,KAAKyG,GAIjB,IAAMyQ,EAAkB,EAAAhG,aAAayF,iBAAiB9P,GACtD,GAAIqQ,EAAiB,CACpB,IAAMzU,EAASyC,KAAKwB,cAAcwQ,EAAiBlU,GACnD8oI,EAAe9rI,KAAKyC,IAatB,OAAOqpI,GAET,EA5FA,CAAkC,EAAA9iI,cAArB,EAAAqgH,gB,kFCpBR2iB,E,OAXL,OACA,OACA,QAGA,QACA,QACA,SAEA,UAEA,SAAKA,GACJ,YACA,YACA,cACA,wBACA,kBALD,CAAKA,MAAS,KAQd,IAAMC,EAAyB,CAACD,EAAUE,IAAKF,EAAUG,IAAKH,EAAUI,KAAMJ,EAAUK,UAAWL,EAAUM,QAQ7G,OA2BMtmG,EAAe,IA1BrB,uE,OACC,EAAAklG,OAAS,EAAA9mI,YAAYZ,MAAM,GAC3B,EAAA+oI,KAAO,EAAAnoI,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAClC,EAAA4hD,OAAS,EAAA1hD,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACpC,EAAAsoI,QAAU,EAAApoI,YAAYV,QAAQ,EAAG,CAChC2kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,EAAAmkG,gBAAkB,EAAAroI,YAAYZ,MAAM,GAAK,CAAC6kC,MAAO,CAAC,EAAG,KACrD,EAAAqkG,cAAgB,EAAAtoI,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,MACjD,EAAAqjF,KAAO,EAAAtnH,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,OAC1C,EAAAkgD,UAAY,EAAAnkF,YAAYL,YACxB,EAAA4oI,YAAc,EAAAvoI,YAAYd,QAAQ,GAClC,EAAA4O,YAAc,EAAA9N,YAAYJ,OAAO,YACjC,EAAA4oI,UAAY,EAAAxoI,YAAYV,QAAQuoI,EAAWziI,QAAQwiI,EAAUE,KAAM,CAClEzlG,KAAM,CACLC,QAASulG,EAAW18H,KAAI,SAACq9H,GACxB,MAAO,CACNrrI,KAAMqrI,EACN5qI,MAAOiqI,EAAWziI,QAAQojI,UAK9B,EAAAC,gBAAkB,EAAAzoI,YAAYd,QAAQ,G,EACvC,OAzBmC,iBAyBnC,EAzBA,CAAmC,EAAAe,mBA4BnC,yE,OACC,EAAA0iC,cAAgBf,EAcR,EAAA8mG,iBAA8C,IAAItuG,IAGlD,EAAAuuG,aAA4B,G,EAwJrC,OA1KkC,iBAE1B,EAAA/pI,KAAP,WACC,MAAO,SAiBD,EAAAgC,sBAAP,WACC,MAAO,CAAC,2BAA4B,kBAErC,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,UAAW,EAAA92F,eAAek3F,SAG/E,YAAA5/E,KAAN,SAAWC,G,0HAqBV,IApBM3a,EAAa2a,EAAe,GAC5BusH,EAAkBvsH,EAAe,GAEjCmzG,EAAc9tH,EAAW+O,SAC3Bm4H,IAEiC,MAAnC9nI,KAAK+nI,4BACL/nI,KAAK+nI,4BAA8BD,EAAgBxvE,cAEnDt4D,KAAK6nI,aAAeC,EAAgBn4H,SACpC3P,KAAK+nI,2BAA6BD,EAAgBxvE,cAK9C0vE,EAAUhoI,KAAKioI,eAEfR,EAAcznI,KAAKyY,GAAGgvH,aAAe7mI,EAAW+L,WAAW,UAC3Du7H,EAAqBtnI,EAAWsM,YAAYlN,KAAKyY,GAAGzL,a,WAEjD1S,GACR,IAAMm1H,EAAaf,EAAYp0H,GAC3B6tI,EAAaL,EAAkB,EAAKD,aAAavtI,GAAKm1H,EACpD2Y,EAAuBD,EAAWv3H,aAAa,EAAK6H,GAAGzL,aACvDq4F,EAAM8iC,EACV14H,WACA6P,IAAI,EAAK7G,GAAGmoC,QACZ24E,SAAS,EAAK9gH,GAAG4uH,MAEfgB,EAAc,WACjB,GAAIZ,EAAa,CAChB,IAAMnpF,EAAS6pF,EAAWv3H,aAAa,UACjC03H,EAAQ,EAAK7vH,GAAGutH,OAAS,EAAKuC,KAAKP,EAAS3iC,EAAIx3F,EAAGw3F,EAAIv3F,EAAGu3F,EAAIr3F,GACpE,OAAOswC,EAAOx7C,QAAQoiB,eAAeojH,GAGrC,OAAO,IAAI,EAAA/5H,QACV,EAAKkK,GAAGutH,OAAS,EAAKuC,KAAKP,EAAS3iC,EAAIx3F,EAAI,IAAKw3F,EAAIv3F,EAAI,OAAQu3F,EAAIr3F,EAAI,MACzE,EAAKyK,GAAGutH,OAAS,EAAKuC,KAAKP,EAAS3iC,EAAIx3F,EAAI,IAAKw3F,EAAIv3F,EAAI,MAAOu3F,EAAIr3F,EAAI,OACxE,EAAKyK,GAAGutH,OAAS,EAAKuC,KAAKP,EAAS3iC,EAAIx3F,EAAI,OAAQw3F,EAAIv3F,EAAI,GAAIu3F,EAAIr3F,EAAI,OAVzD,GAelBq6H,EAAc,WACb,OAAQH,GACP,KAAK,EACJ,OAAOG,EAAYx6H,EACpB,KAAK,EACJ,OAAO,IAAI,EAAAijB,QAAQu3G,EAAYx6H,EAAGw6H,EAAYv6H,GAC/C,KAAK,EACJ,OAAOu6H,GAPI,GAWd,IAAMvhB,EAAmB,WACxB,IAAM4gB,EAAYX,EAAW,EAAKtuH,GAAGivH,WACrC,OAAQQ,GACP,KAAK,EACJ,OAAQR,GACP,KAAKZ,EAAUE,IACd,OAAOoB,EAAuBC,EAC/B,KAAKvB,EAAUG,IACd,OAAOoB,EACR,KAAKvB,EAAUI,KACd,OAAOkB,EAAuBC,EAC/B,KAAKvB,EAAUM,OACd,OAAOgB,EAAuBC,EAC/B,KAAKvB,EAAUK,UACd,OAAOiB,EAAuBC,EAEhC,EAAA78F,WAAWF,YAAYo8F,GACvB,MACD,QACC,OAAQA,GACP,KAAKZ,EAAUE,IACd,OAAOoB,EAAqB9oH,IAAI+oH,GACjC,KAAKvB,EAAUG,IACd,OAAOoB,EACR,KAAKvB,EAAUI,KACd,OAAOkB,EAAqB7O,SAAS8O,GACtC,KAAKvB,EAAUM,OACd,OAAOgB,EAAqBI,OAAOH,GACpC,KAAKvB,EAAUK,UACd,OAAOiB,EAAqB34G,IAAI44G,GAElC,EAAA78F,WAAWF,YAAYo8F,IA/BD,GAmCzBjY,EAAWnzE,iBAAiB,EAAK7jC,GAAGzL,YAAa85G,I,OAtEzCxsH,EAAI,EAAGA,EAAIo0H,EAAYl0H,OAAQF,I,EAA/BA,GAyET,IAAK0F,KAAKQ,GAAGiX,OAAOujF,aAAa,GAChC,IAAK,EAAL,EAAqB,EAAAp6F,EAAWe,aAAX,eAAJ,KACNU,aAAarC,KAAKyY,GAAGzL,aAAiC2lB,aAAc,E,OAI5E3yB,KAAKyY,GAAGkvH,iBACX/mI,EAAWsL,yBAEZlM,KAAKW,eAAeC,G,WAGb,YAAA2nI,KAAR,SAAaP,EAAuBn6H,EAAWC,EAAWE,GAGzD,IAFA,IAAIlR,EAAQ,EACR2rI,EAAY,EACPnuI,EAAI,EAAGA,EAAI0F,KAAKyY,GAAG6uH,QAAShtI,IACpCwC,GAAS2rI,EAAYT,EAAQU,QAAQ76H,EAAGC,EAAGE,GAC3CH,GAAK7N,KAAKyY,GAAG+uH,cACb15H,GAAK9N,KAAKyY,GAAG+uH,cACbx5H,GAAKhO,KAAKyY,GAAG+uH,cACbiB,GAAazoI,KAAKyY,GAAG8uH,gBAEtB,OAAOzqI,GAGA,YAAAmrI,aAAR,WACC,IAAMD,EAAUhoI,KAAK4nI,iBAAiBlrI,IAAIsD,KAAKyY,GAAG+tG,MAClD,GAAIwhB,EACH,OAAOA,EAEP,IAAM,EAAUhoI,KAAK2oI,kBAErB,OADA3oI,KAAK4nI,iBAAiB1nI,IAAIF,KAAKyY,GAAG+tG,KAAM,GACjC,GAGD,YAAAmiB,gBAAR,WACC,IAAMniB,EAAOxmH,KAAKyY,GAAG+tG,KACfoiB,EAAmB,CACxBnrB,OAAQ,WACP,OAAO,EAAAr4F,SAASmI,WAAWi5F,KAGvBwhB,EAAU,IAAI,EAAAa,aAAaD,GAIjC,OAFA5oI,KAAK4nI,iBAAiBvvD,OAAOmuC,GAEtBwhB,GAET,EA1KA,CAAkC,EAAAlkI,cAArB,EAAAsgH,gB,6BCxDb,oDAaA,IAAIykB,EAAe,SAAWlsI,GAEnB0M,MAAL1M,IAAiBA,EAAIqM,MAC1BhJ,KAAK8oI,MAAQ,CAAC,CAAE,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,EAAI,GAAK,EAAG,GACpE,CAAE,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,EAAI,EAAG,GAAK,GACvD,CAAE,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,CAAE,GAAK,GAAK,IAExD9oI,KAAK+oI,MAAQ,CAAC,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,GAC5E,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,GAAK,CAAE,GAAK,GAAK,EAAG,GAAK,CAAE,GAAK,GAAK,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,EAAG,GAAK,GAAK,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,GAAK,EAAI,EAAG,GAAK,EAAG,GAAK,EAAI,EAAG,GAAK,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,EAAG,GAAK,GAAK,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,EAAG,GAAK,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,EAAG,GAAK,GAAK,EAAI,GAAK,EAAG,EAAG,GAAK,EAAI,GAAK,EAAG,GAAK,GAC3E,CAAE,EAAG,EAAG,EAAG,GAAK,CAAE,EAAG,GAAK,EAAG,GAAK,CAAE,GAAK,EAAG,EAAG,GAAK,CAAE,GAAK,GAAK,EAAG,GACnE,EAAI,EAAG,EAAG,EAAG,GAAK,EAAI,EAAG,GAAK,EAAG,GAAK,EAAI,GAAK,EAAG,EAAG,GAAK,EAAI,GAAK,GAAK,EAAG,IAEhF/oI,KAAKvC,EAAI,GACT,IAAM,IAAInD,EAAI,EAAGA,EAAI,IAAKA,IAEzB0F,KAAKvC,EAAGnD,GAAM0O,KAAK8kB,MAAoB,IAAbnxB,EAAE8gH,UAI7Bz9G,KAAKgpI,KAAO,GACZ,IAAU1uI,EAAI,EAAGA,EAAI,IAAKA,IAEzB0F,KAAKgpI,KAAM1uI,GAAM0F,KAAKvC,EAAO,IAAJnD,GAM1B0F,KAAKgoI,QAAU,CACda,EAAanuI,UAAUwlD,IAAM,SAAWhyC,EAAGL,EAAGC,GAE7C,OAAOI,EAAG,GAAML,EAAIK,EAAG,GAAMJ,GAI9B+6H,EAAanuI,UAAUuuI,KAAO,SAAW/6H,EAAGL,EAAGC,EAAGE,GAEjD,OAAOE,EAAG,GAAML,EAAIK,EAAG,GAAMJ,EAAII,EAAG,GAAMF,GAI3C66H,EAAanuI,UAAUwuI,KAAO,SAAWh7H,EAAGL,EAAGC,EAAGE,EAAGI,GAEpD,OAAOF,EAAG,GAAML,EAAIK,EAAG,GAAMJ,EAAII,EAAG,GAAMF,EAAIE,EAAG,GAAME,GAIxDy6H,EAAanuI,UAAU4tI,MAAQ,SAAWa,EAAKC,GAE9C,IAcIC,EAAIC,EAXJ1tI,GAAMutI,EAAMC,IADP,IAAQpgI,KAAKgmB,KAAM,GAAQ,IAEhC10B,EAAI0O,KAAK8kB,MAAOq7G,EAAMvtI,GACtBJ,EAAIwN,KAAK8kB,MAAOs7G,EAAMxtI,GACtB2tI,GAAO,EAAMvgI,KAAKgmB,KAAM,IAAU,EAClCjyB,GAAMzC,EAAIkB,GAAM+tI,EAGhBC,EAAKL,GAFA7uI,EAAIyC,GAGT0sI,EAAKL,GAFA5tI,EAAIuB,GAMRysI,EAAKC,GAETJ,EAAK,EAAGC,EAAK,IAMbD,EAAK,EAAGC,EAAK,GAMd,IAAII,EAAKF,EAAKH,EAAKE,EACfI,EAAKF,EAAKH,EAAKC,EACfK,EAAKJ,EAAK,EAAM,EAAMD,EACtBM,EAAKJ,EAAK,EAAM,EAAMF,EAEtBO,EAAS,IAAJxvI,EACLyvI,EAAS,IAAJvuI,EACLwuI,EAAMhqI,KAAKgpI,KAAMc,EAAK9pI,KAAKgpI,KAAMe,IAAS,GAC1CE,EAAMjqI,KAAKgpI,KAAMc,EAAKT,EAAKrpI,KAAKgpI,KAAMe,EAAKT,IAAS,GACpDY,EAAMlqI,KAAKgpI,KAAMc,EAAK,EAAI9pI,KAAKgpI,KAAMe,EAAK,IAAQ,GAElDI,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAQ1BW,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAQ1BU,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAU9B,OAAO,KAzBFM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKnqI,KAAKkgD,IAAKlgD,KAAK8oI,MAAOkB,GAAOR,EAAIC,KAI5CW,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKpqI,KAAKkgD,IAAKlgD,KAAK8oI,MAAOmB,GAAOP,EAAIC,KAI5CU,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKrqI,KAAKkgD,IAAKlgD,KAAK8oI,MAAOoB,GAAON,EAAIC,MAUlDhB,EAAanuI,UAAUguI,QAAU,SAAWS,EAAKC,EAAKkB,GAErD,IAiBIjB,EAAIC,EAAIiB,EACRC,EAAIC,EAAIC,EAfR9uI,GAAMutI,EAAMC,EAAMkB,IADb,EAAM,GAEXhwI,EAAI0O,KAAK8kB,MAAOq7G,EAAMvtI,GACtBJ,EAAIwN,KAAK8kB,MAAOs7G,EAAMxtI,GACtBomD,EAAIh5C,KAAK8kB,MAAOw8G,EAAM1uI,GACtB+uI,EAAK,EAAM,EACX5tI,GAAMzC,EAAIkB,EAAIwmD,GAAM2oF,EAIpBnB,EAAKL,GAHA7uI,EAAIyC,GAIT0sI,EAAKL,GAHA5tI,EAAIuB,GAIT6tI,EAAKN,GAHAtoF,EAAIjlD,GAQRysI,GAAMC,EAELA,GAAMmB,GAEVvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlClB,GAAMoB,GAEjBvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7CrB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAMzCjB,EAAKmB,GAETvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAIlClB,EAAKoB,GAEhBvB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,IAM7CrB,EAAK,EAAGC,EAAK,EAAGiB,EAAK,EAAGC,EAAK,EAAGC,EAAK,EAAGC,EAAK,GAS/C,IAAIhB,EAAKF,EAAKH,EAAKsB,EACfhB,EAAKF,EAAKH,EAAKqB,EACfE,EAAKD,EAAKL,EAAKI,EACff,EAAKJ,EAAKgB,EAAK,EAAMG,EACrBd,EAAKJ,EAAKgB,EAAK,EAAME,EACrBG,EAAKF,EAAKF,EAAK,EAAMC,EACrBI,EAAKvB,EAAK,EAAM,GAChBwB,EAAKvB,EAAK,EAAM,GAChBwB,EAAKL,EAAK,EAAM,GAEhBd,EAAS,IAAJxvI,EACLyvI,EAAS,IAAJvuI,EACL0vI,EAAS,IAAJlpF,EACLgoF,EAAMhqI,KAAKgpI,KAAMc,EAAK9pI,KAAKgpI,KAAMe,EAAK/pI,KAAKgpI,KAAMkC,KAAW,GAC5DjB,EAAMjqI,KAAKgpI,KAAMc,EAAKT,EAAKrpI,KAAKgpI,KAAMe,EAAKT,EAAKtpI,KAAKgpI,KAAMkC,EAAKX,KAAW,GAC3EL,EAAMlqI,KAAKgpI,KAAMc,EAAKU,EAAKxqI,KAAKgpI,KAAMe,EAAKU,EAAKzqI,KAAKgpI,KAAMkC,EAAKR,KAAW,GAC3ES,EAAMnrI,KAAKgpI,KAAMc,EAAK,EAAI9pI,KAAKgpI,KAAMe,EAAK,EAAI/pI,KAAKgpI,KAAMkC,EAAK,KAAU,GAExEf,EAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAQpCR,EAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKkB,EAAKA,EAQpCR,EAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKiB,EAAKA,EAQpCM,EAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAUxC,OAAO,KAjCFd,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKnqI,KAAKipI,KAAMjpI,KAAK8oI,MAAOkB,GAAOR,EAAIC,EAAImB,KAIjDR,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKpqI,KAAKipI,KAAMjpI,KAAK8oI,MAAOmB,GAAOP,EAAIC,EAAIkB,KAIjDR,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKrqI,KAAKipI,KAAMjpI,KAAK8oI,MAAOoB,GAAON,EAAIC,EAAIiB,KAIjDM,EAAK,EAAS,GAGlBA,GAAMA,GACIA,EAAKprI,KAAKipI,KAAMjpI,KAAK8oI,MAAOqC,GAAOJ,EAAIC,EAAIC,MAUvDpC,EAAanuI,UAAU2wI,QAAU,SAAWx9H,EAAGC,EAAGE,EAAGI,GAGpD,IAuCIi7H,EAAIC,EAAIiB,EAAIe,EACZd,EAAIC,EAAIC,EAAIa,EACZC,EAAIC,EAAIC,EAAIC,EAzCZ5C,EAAQ/oI,KAAK+oI,MACbf,EAAUhoI,KAAKgoI,QACfgB,EAAOhpI,KAAKgpI,KAGZ4C,GAAO5iI,KAAKgmB,KAAM,GAAQ,GAAQ,EAClC68G,GAAO,EAAM7iI,KAAKgmB,KAAM,IAAU,GAGlCpzB,GAAMiS,EAAIC,EAAIE,EAAII,GAAMw9H,EACxBtxI,EAAI0O,KAAK8kB,MAAOjgB,EAAIjS,GACpBJ,EAAIwN,KAAK8kB,MAAOhgB,EAAIlS,GACpBomD,EAAIh5C,KAAK8kB,MAAO9f,EAAIpS,GACpBK,EAAI+M,KAAK8kB,MAAO1f,EAAIxS,GACpBmB,GAAMzC,EAAIkB,EAAIwmD,EAAI/lD,GAAM4vI,EAKxBrC,EAAK37H,GAJAvT,EAAIyC,GAKT0sI,EAAK37H,GAJAtS,EAAIuB,GAKT6tI,EAAK58H,GAJAg0C,EAAIjlD,GAKT+uI,EAAK19H,GAJAnS,EAAIc,GAoBTZ,GANOqtI,EAAKC,EAAO,GAAK,IACjBD,EAAKoB,EAAO,GAAK,IACjBnB,EAAKmB,EAAO,EAAI,IAChBpB,EAAKsC,EAAO,EAAI,IAChBrC,EAAKqC,EAAO,EAAI,IAChBlB,EAAKkB,EAAO,EAAI,GAwBvBpC,EAAKF,GAdTH,EAAKrB,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcf0vI,EACflC,EAAKF,GAdTH,EAAKtB,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcf0vI,EACfhB,EAAKD,GAdTL,EAAKvC,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcf0vI,EACfE,EAAKD,GAdTR,EAAKtD,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcf0vI,EACfjC,EAAKJ,GAbTgB,EAAKxC,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBhC,EAAKJ,GAbTgB,EAAKzC,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBf,EAAKF,GAd4BF,EAAK1C,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcpD,EAAM0vI,EACrBG,EAAKF,GAdTP,EAAKvD,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAcf,EAAM0vI,EACrBd,EAAKvB,GAbTgC,EAAKxD,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBb,EAAKvB,GAbTgC,EAAKzD,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBZ,EAAKL,GAbTc,EAAK1D,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBI,EAAKH,GAbTH,EAAK3D,EAAS7rI,GAAK,IAAO,EAAI,EAAI,GAaf,EAAM0vI,EACrBK,EAAK1C,EAAK,EAAM,EAAMqC,EACtBM,EAAK1C,EAAK,EAAM,EAAMoC,EACtBO,EAAKxB,EAAK,EAAM,EAAMiB,EACtBQ,EAAKP,EAAK,EAAM,EAAMD,EAEtB/B,EAAS,IAAJxvI,EACLyvI,EAAS,IAAJvuI,EACL0vI,EAAS,IAAJlpF,EACLsqF,EAAS,IAAJrwI,EACL+tI,EAAMhB,EAAMc,EAAKd,EAAMe,EAAKf,EAAMkC,EAAKlC,EAAMsD,MAAa,GAC1DrC,EAAMjB,EAAMc,EAAKT,EAAKL,EAAMe,EAAKT,EAAKN,EAAMkC,EAAKX,EAAKvB,EAAMsD,EAAKhB,MAAa,GAC9EpB,GAAMlB,EAAMc,EAAKU,EAAKxB,EAAMe,EAAKU,EAAKzB,EAAMkC,EAAKR,EAAK1B,EAAMsD,EAAKf,MAAa,GAC9EJ,GAAMnC,EAAMc,EAAK0B,EAAKxC,EAAMe,EAAK0B,EAAKzC,EAAMkC,EAAKQ,EAAK1C,EAAMsD,EAAKX,MAAa,GAC9EY,GAAMvD,EAAMc,EAAK,EAAId,EAAMe,EAAK,EAAIf,EAAMkC,EAAK,EAAIlC,EAAMsD,EAAK,MAAY,GAE1EnC,GAAK,GAAMX,EAAKA,EAAKC,EAAKA,EAAKmB,EAAKA,EAAKkB,EAAKA,EAQ9C1B,GAAK,GAAMV,EAAKA,EAAKC,EAAKA,EAAKkB,EAAKA,EAAKkB,EAAKA,EAQ9C1B,GAAK,GAAMT,EAAKA,EAAKC,EAAKA,EAAKiB,EAAKA,EAAKkB,EAAKA,EAO5CZ,GAAK,GAAML,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKgB,EAAKA,EAQhDO,GAAK,GAAMN,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EAAKC,EAAKA,EASlD,OAAO,KAvCFlC,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKnqI,KAAKkpI,KAAMH,EAAOiB,GAAOR,EAAIC,EAAImB,EAAIkB,KAIhD1B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKpqI,KAAKkpI,KAAMH,EAAOkB,GAAOP,EAAIC,EAAIkB,EAAIkB,KAIhD1B,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKrqI,KAAKkpI,KAAMH,EAAOmB,IAAON,EAAIC,EAAIiB,EAAIkB,KAGhDZ,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKprI,KAAKkpI,KAAMH,EAAOoC,IAAOJ,EAAIC,EAAIC,EAAIgB,KAIhDO,GAAK,EAAS,GAGlBA,IAAMA,IACIA,GAAKxsI,KAAKkpI,KAAMH,EAAOwD,IAAOL,EAAIC,EAAIC,EAAIC,O,yFC7YtD,QAGA,QAQA,OA8BMvrG,EAAe,IA7BrB,uE,OACC,EAAA2rG,KAAO,EAAAvtI,YAAYd,QAAQ,GAC3B,EAAAsuI,SAAW,EAAAxtI,YAAYd,QAAQ,EAAG,CACjCg+B,WAAY,CAACqwG,KAAM,KAEpB,EAAA5+H,EAAI,EAAA3O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACswG,SAAU,EAAGD,KAAM,GAChC3hG,WAAY,CAACqgF,cAAc,KAE5B,EAAAwhB,SAAW,EAAAztI,YAAYd,QAAQ,EAAG,CACjCg+B,WAAY,CAACqwG,KAAM,KAEpB,EAAA3+H,EAAI,EAAA5O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACuwG,SAAU,EAAGF,KAAM,GAChC3hG,WAAY,CAACqgF,cAAc,KAE5B,EAAAyhB,SAAW,EAAA1tI,YAAYd,QAAQ,EAAG,CACjCg+B,WAAY,CAACqwG,KAAM,KAEpB,EAAAz+H,EAAI,EAAA9O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACwwG,SAAU,EAAGH,KAAM,GAChC3hG,WAAY,CAACqgF,cAAc,KAG5B,EAAA0hB,UAAY,EAAA3tI,YAAYd,QAAQ,EAAG,CAClCg+B,WAAY,CAACqwG,KAAM,KAEpB,EAAAvR,OAAS,EAAAh8H,YAAYd,QAAQ,G,EAC9B,OA5BqC,iBA4BrC,EA5BA,CAAqC,EAAAe,mBA+BrC,yE,OACC,EAAA0iC,cAAgBf,E,EA8KjB,OA/KoC,iBAE5B,EAAAhjC,KAAP,WACC,MAAO,WAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,kCAET,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAGrD,YAAAx/E,KAAN,SAAWC,G,6HACJ3a,EAAa2a,EAAe,GAE9Bvb,KAAKyY,GAAGg0H,KACX,GAAMzsI,KAAK8sI,iCAAiClsI,IADzC,M,cACH,S,aAEAA,EAAWsL,yB,wBAERlM,KAAKyY,GAAGyiH,QACXl7H,KAAK+sI,gBAAgBnsI,GAsCtBZ,KAAKW,eAAeC,G,YAGP,YAAAksI,iCAAd,SAA+ClsI,G,wHAaxCi4D,EAAej4D,EAAWi4D,eACvBv+D,EAAI,E,wBAAGA,EAAIu+D,EAAar+D,OAChC,GAAMwF,KAAKgtI,kCAAkCn0E,EAAav+D,KADpB,M,OACtC,S,wBADwCA,I,+BAI5B,YAAA0yI,kCAAd,SAAgDj0E,G,uIACzCx7D,EAASw7D,EAAYx7D,SACrBgE,EAAYhE,EAAgBgE,SAC5BoO,EAASopD,EAAYppD,SAErBrN,EAAQf,EAASc,aAzHE,UAyH+BC,MAGpDtC,KAAKyY,GAAGi0H,SACP1sI,KAAKvC,EAAEoQ,EAAEyV,kBAAoBtjB,KAAKvC,EAAEoQ,EAAE0V,sBACzC,GAAMvjB,KAAKvC,EAAEoQ,EAAE0V,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAClFwF,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKrF,MAF3B,MADD,M,cAEF,S,aAKA,IADImT,OAAK,EACA3V,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAClC2V,EAAQN,EAAOrV,GACfgI,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKnC,KAAKyY,GAAG5K,E,wBAKpC7N,KAAKyY,GAAGk0H,SACP3sI,KAAKvC,EAAEqQ,EAAEwV,kBAAoBtjB,KAAKvC,EAAEqQ,EAAEyV,sBACzC,GAAMvjB,KAAKvC,EAAEqQ,EAAEyV,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAClFwF,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKrF,MAF3B,MADD,M,cAEF,S,aAKA,IADImT,OAAK,EACA3V,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAClC2V,EAAQN,EAAOrV,GACfgI,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKnC,KAAKyY,GAAG3K,E,wBAKpC9N,KAAKyY,GAAGm0H,SACP5sI,KAAKvC,EAAEuQ,EAAEsV,kBAAoBtjB,KAAKvC,EAAEuQ,EAAEuV,sBACzC,GAAMvjB,KAAKvC,EAAEuQ,EAAEuV,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAClFwF,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKrF,MAF3B,MADD,M,cAEF,S,aAKA,IADImT,OAAK,EACA3V,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAClC2V,EAAQN,EAAOrV,GACfgI,EAAoB,EAAd2N,EAAM9N,MAAY,GAAKnC,KAAKyY,GAAGzK,E,mCAYjC,YAAA++H,gBAAR,SAAwBnsI,GAGvB,IAAwB,UAAAA,EAAWi4D,eAAX,eAA2B,CAA9C,IAEEo0E,EAFa,KACU/wF,gBAAgB36C,WACdqL,WAA6B,OAC5D,GAAIqgI,EAEH,IADA,IAAM3qI,EAAQ2qI,EAAc3qI,MACnBhI,EAAI,EAAGA,EAAIgI,EAAM9H,OAAQF,IACjCgI,EAAMhI,KAAO,IA2BlB,EA/KA,CAAoC,EAAAwJ,cAAvB,EAAAugH,kB,yFC5Cb,QAEA,OACA,QAGMvjF,EAAe,IADrB,yB,+CAAoD,OAAlB,iBAAkB,EAApD,CAAkC,EAAA3hC,mBAGlC,yE,OACC,EAAA0iC,cAAgBf,E,EAmBjB,OApBiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,YAC1D96F,KAAKw3B,QAAQoqD,kBAAkB,MAGhC,YAAAtmE,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAC9B3a,EACHZ,KAAKW,eAAeC,GAEpBZ,KAAKoB,YAAY,KAGpB,EApBA,CAAiC,EAAA0C,cAApB,EAAAwgH,e,yFCRb,QACA,QAGA,OAUMxjF,EAAe,IAPrB,uE,OACC,EAAAv/B,SAAW,EAAArC,YAAYT,cAAc,GAAI,CACxC89B,eAAgB,CACfC,QAAS,EAAA58B,YAAYC,O,EAGxB,OANyC,iBAMzC,EANA,CAAyC,EAAAV,mBASzC,yE,OACC,EAAA0iC,cAAgBf,E,EAqDjB,OAtDwC,iBAEhC,EAAAhjC,KAAP,WACC,MAAO,gBAIR,YAAA8c,gBAAA,aAEM,YAAAU,KAAN,SAAW6sE,G,+HACJ+kD,EAAgBltI,KAAKvC,EAAE8D,SAASs8B,cAEjCqvG,EAAcvtI,gBAAkB,EAAAC,YAAYC,IAA5C,MACe,GAAMqtI,EAAcj2H,qBAFpC,M,cAEIlV,EAAY,SAClB/B,KAAKmtI,aAAaD,EAAkCnrI,G,aAEpD/B,KAAKswB,OAAOhT,MAAMpd,IAAI,gC,oCAGvBF,KAAKswB,OAAOhT,MAAMpd,IAAI,2BAA2BF,KAAKyY,GAAGlX,SAAQ,K,mCAInE,YAAA4rI,aAAA,SAAaD,EAAgCnrI,GAC5C,IAAInB,EAKkD,OAAjDA,EAAamB,EAAU8xB,uBAc3B7zB,KAAKW,eAAeC,GAEpBZ,KAAKswB,OAAOhT,MAAMpd,IAAI,mBASzB,EAtDA,CAAwC,EAAA4D,cAA3B,EAAAygH,sB,yFCfPl4F,EAAQ,CAAChe,uBADf,MACqC,wBACrC,QAQA,4BAEA,QAGA,OAWMyyB,EAAe,IAVrB,uE,OACC,EAAA9zB,YAAc,EAAA9N,YAAYJ,OAAO,aACjC,EAAAsuI,QAAU,EAAAluI,YAAYV,QAAQ,IAAK,CAClC2kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,EAAAiqG,IAAM,EAAAnuI,YAAYL,YAClB,EAAAyuI,kBAAoB,EAAApuI,YAAYV,QAAQ,KACxC,EAAAq4G,KAAO,EAAA33G,YAAYZ,MAAM,K,EAC1B,OATuC,iBASvC,EATA,CAAuC,EAAAa,mBAYvC,yE,OACC,EAAA0iC,cAAgBf,E,EA4CjB,OA7CsC,iBAE9B,EAAAhjC,KAAP,WACC,MAAO,aAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAIrD,YAAAx/E,KAAN,SAAWC,G,8HACJ3a,EAAa2a,EAAe,GAC5Bs9C,EAAej4D,EAAWi4D,e,IAER,EAAAA,E,wBAAA,YAAfE,EAAW,KACnB,GAAM/4D,KAAKutI,6BAA6Bx0E,KADL,M,OACnC,S,wBADuB,I,oBAIxB/4D,KAAKW,eAAeC,G,YAGP,YAAA2sI,6BAAd,SAA2Cx0E,G,iHAa1C,IAZMx3D,EAAWw3D,EAAY7c,gBAAgB36C,WAEvCa,EAAiBb,EAASqL,WAAW6C,SAASnN,MAC9CkrI,EAAejsI,EAASqL,WAAW0xC,OAAOh8C,MAC1CyjH,EAAiC,QAAtB,EAAGxkH,EAAS8gD,kBAAU,eAAE//C,MACnCmrI,EAAY,UAAMrrI,EAAgB,CACvCsrI,MAAO3nB,EACPxnE,QAASivF,EACTv3C,WAAYj2F,KAAKyY,GAAG60H,kBACpBz2B,KAAM72G,KAAKyY,GAAGo+F,OAGNv8G,EAAI,EAAGA,EAAI0F,KAAKyY,GAAG20H,QAAS9yI,IACpCmzI,EAAUE,S,OAELC,EAAKH,EAAUI,SAErBtsI,EAASgM,aAAavN,KAAKyY,GAAGzL,YAAa,IAAIqf,EAAMhe,uBAAuBu/H,EAAI,IAEhFH,EAAUjwH,U,WAEZ,EA7CA,CAAsC,EAAA1Z,cAAzB,EAAA0gH,oB,2FC5Bb,QACA,QACA,QAQA,OAIM1jF,EAAe,IAHrB,uE,OACC,EAAAklG,OAAS,EAAA9mI,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,EAAE,EAAG,K,EAC5C,OAFkC,iBAElC,EAFA,CAAkC,EAAAhkC,mBAKlC,yE,OACC,EAAA0iC,cAAgBf,E,EAmCjB,OApCiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAKC,GAIJ,IAJD,IAGK2gC,EAAejsC,EAHpB,OACOrP,EAAa2a,EAAe,GAGf,MAAA3a,EAAWC,UAAX,eAAsB,CAA1B,KACPo8C,UAAS,SAAC6wF,GAChB,IAAIvsI,EACJ,GAAsE,OAAjEA,EAAYusI,EAAsBvsI,UAAqC,CAE3E,IAAc,WADd26C,EAAgB,IAAI,EAAAlwC,aAAazK,IACLoO,SAAd,eAAwB,CACrC,IAAM2uC,GADFruC,EAAK,MACYquC,SAEfsd,EADW3rD,EAAMR,WACO3M,QAAQwc,IAAIg/B,EAAOp5B,eAAe,EAAKzM,GAAGutH,SACxE/1H,EAAM0rD,aAAaC,GAGpB,IAAK,EAAKp7D,GAAGiX,OAAOujF,aAAa,GACjB9+C,EAAc36C,WAAWc,aApC7B,YAqCJswB,aAAc,MAKzB3yB,KAAKW,eAAeC,IAEtB,EApCA,CAAiC,EAAAkD,cAApB,EAAA2gH,e,yFChBb,OACA,OACA,QACA,QACA,QAEA,QAEM+P,EAAa,IAAI,EAAAjmH,QAAQ,EAAG,EAAG,GAC/Bw/H,EAAe,IAAI,EAAAx/H,QAAQ,EAAG,EAAG,GACjCy/H,EAAa,IAAI,EAAAz/H,QAAQ,EAAG,EAAG,GAErC,OASMuyB,EAAe,IARrB,uE,OACC,EAAAt7B,KAAO,EAAAtG,YAAYH,QAAQ,CAAC,EAAG,IAC/B,EAAAkvI,mBAAqB,EAAA/uI,YAAYd,QAAQ,GACzC,EAAAsvB,UAAY,EAAAxuB,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAAC6xG,mBAAoB,KACnE,EAAA57H,SAAW,EAAAnT,YAAYH,QAAQ,CAAC,EAAG,GAAI,CAACq9B,WAAY,CAAC6xG,mBAAoB,KACzE,EAAA/rB,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACvC,EAAA46D,OAAS,EAAA16D,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACrC,OAPmC,iBAOnC,EAPA,CAAmC,EAAAG,mBAUnC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EAsE/B,OA5EkC,iBAE1B,EAAA5nB,KAAP,WACC,MAAO,SAKD,EAAAgC,sBAAP,WACC,MAAO,CAAC,6CAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAG3D,YAAA5/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAC9B3a,EACHZ,KAAKq0H,iBAAiBzzH,GAEtBZ,KAAKs0H,uBAGP,YAAAA,oBAAA,WACC,IAAM/yH,EAAWvB,KAAKkuI,cAAcluI,KAAKyY,GAAGjT,MAK5CxF,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUizH,EAAYx0H,KAAKyY,GAAGypG,WAEnE,IAAMx9F,EAAS1kB,KAAKo0H,gBAAgB3oG,mBAAmBzrB,KAAKyY,GAAGmhD,QAC/Dr4D,EAAS6qB,YAAY1H,GAErB1kB,KAAKsB,aAAaC,IAEnB,YAAA8yH,iBAAA,SAAiBzzH,GAChB,IAAMm5D,EAAOn5D,EAAW4K,eAClBhG,EAAO,IAAI,EAAA+I,QACjBwrD,EAAKD,QAAQt0D,GACb,IAAMo0D,EAAS,IAAI,EAAArrD,QACnBwrD,EAAKF,UAAUD,GAGf,IAAMu0E,EAAS,IAAI,EAAAr9G,QAAQtrB,EAAKqI,EAAGrI,EAAKwI,GAClCzM,EAAWvB,KAAKkuI,cAAcC,GAEpCnuI,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUwsI,EAAcC,GAE7D,IAAMtpH,EAAS1kB,KAAKo0H,gBAAgB3oG,mBAAmBmuC,GACvDr4D,EAAS6qB,YAAY1H,GAGrB1kB,KAAKsB,aAAaC,IAGnB,YAAA2sI,cAAA,SAAc1oI,GACb,IAAIi4D,EAeJ,OAdAj4D,EAAOA,EAAK1C,QACR9C,KAAKyY,GAAGw1H,mBACXxwE,EAAiB,CAChB5vD,EAAG7E,KAAK8kB,MAAM9tB,KAAKyY,GAAGpG,SAASxE,GAC/BC,EAAG9E,KAAK8kB,MAAM9tB,KAAKyY,GAAGpG,SAASvE,KAGhC2vD,EAAiB,CAChB5vD,EAAG7E,KAAK8kB,MAAMtoB,EAAKqI,EAAI7N,KAAKyY,GAAGiV,WAC/B5f,EAAG9E,KAAK8kB,MAAMtoB,EAAKsI,EAAI9N,KAAKyY,GAAGiV,YAEhCloB,EAAKqI,EAAI4vD,EAAe5vD,EAAI7N,KAAKyY,GAAGiV,UACpCloB,EAAKsI,EAAI2vD,EAAe3vD,EAAI9N,KAAKyY,GAAGiV,WAE9B,IAAI,EAAAqP,oBAAoBv3B,EAAKqI,EAAGrI,EAAKsI,EAAG2vD,EAAe5vD,EAAG4vD,EAAe3vD,IAElF,EA5EA,CAAkC,EAAAhK,cAArB,EAAA4gH,gB,yFCnBb,QAIA,QAYA,OAmBM5jF,EAAe,IAlBrB,uE,OACC,EAAA4rG,SAAW,EAAAxtI,YAAYd,QAAQ,GAC/B,EAAAyP,EAAI,EAAA3O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACswG,SAAU,GACvB5hG,WAAY,CAACqgF,cAAc,KAE5B,EAAAwhB,SAAW,EAAAztI,YAAYd,QAAQ,GAC/B,EAAA0P,EAAI,EAAA5O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACuwG,SAAU,GACvB7hG,WAAY,CAACqgF,cAAc,KAE5B,EAAAyhB,SAAW,EAAA1tI,YAAYd,QAAQ,GAC/B,EAAA4P,EAAI,EAAA9O,YAAYZ,MAAM,OAAQ,CAC7B89B,WAAY,CAACwwG,SAAU,GACvB9hG,WAAY,CAACqgF,cAAc,KAE5B,EAAAijB,eAAiB,EAAAlvI,YAAYd,QAAQ,G,EACtC,OAjBmC,iBAiBnC,EAjBA,CAAmC,EAAAe,mBAoBnC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAyqF,2BAA+C,IAAIjyF,IACnD,EAAAkyF,2BAA+C,IAAIlyF,IACnD,EAAAmyF,2BAA+C,IAAInyF,I,EAuK5D,OA/KkC,iBAE1B,EAAAx7B,KAAP,WACC,MAAO,SAOD,EAAAgC,sBAAP,WACC,MAAO,CAAC,mBAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAIrD,YAAAx/E,KAAN,SAAWC,G,sHAEV,OADM3a,EAAa2a,EAAe,GAClC,GAAMvb,KAAK8sI,iCAAiClsI,I,cAA5C,S,YAQK,YAAAksI,iCAAN,SAAuClsI,G,sIAChCi4D,EAAej4D,EAAWi4D,eAGvBv+D,EAAI,E,wBAAGA,EAAIu+D,EAAar+D,OAChC,GAAMwF,KAAKgtI,kCAAkCn0E,EAAav+D,KADpB,M,OACtC,S,wBADwCA,I,aASzC,IALI0F,KAAKyY,GAAG21H,gBACXxtI,EAAWsL,yBAGNvK,EAAaf,EAAWe,aACzB,EAAL,EAAqB,EAAAA,EAAA,gBAAZJ,EAAQ,MACPoK,qBAIV,IAAK3L,KAAKQ,GAAGiX,OAAOujF,aAAa,GAEhC,IADM,EAAap6F,EAAWe,aACzB,EAAL,EAAqB,mBAAZJ,EAAQ,KACDA,EAASc,aA7EC,YA8ElBswB,aAAc,E,OAIvB3yB,KAAKW,eAAeC,G,YAEf,YAAAosI,kCAAN,SAAwCj0E,G,kIAOnB,OANdx7D,EAASw7D,EAAYx7D,SACrBgE,EAAYhE,EAAgBgE,SAC5BoO,EAASopD,EAAYppD,SAErBrN,EAAQf,EAASc,aAzFI,YAyF+BC,MAEtC,GAAMtC,KAAK81H,mBAC9Bv0H,EACAe,EACAqN,EACA3P,KAAKvC,EAAEivI,SACP1sI,KAAKvC,EAAEoQ,EACP7N,KAAKyY,GAAG5K,EACR7N,KAAKurH,2BACL,I,OAEmB,OAVd8iB,EAAc,SAUA,GAAMruI,KAAK81H,mBAC9Bv0H,EACAe,EACAqN,EACA3P,KAAKvC,EAAEkvI,SACP3sI,KAAKvC,EAAEqQ,EACP9N,KAAKyY,GAAG3K,EACR9N,KAAKwrH,2BACL,I,OAEmB,OAVd8iB,EAAc,SAUA,GAAMtuI,KAAK81H,mBAC9Bv0H,EACAe,EACAqN,EACA3P,KAAKvC,EAAEmvI,SACP5sI,KAAKvC,EAAEuQ,EACPhO,KAAKyY,GAAGzK,EACRhO,KAAKyrH,2BACL,I,cARK8iB,EAAc,SAWhBF,GACHruI,KAAKk2H,mBAAmBmY,EAAa/rI,EAAO,GAEzCgsI,GACHtuI,KAAKk2H,mBAAmBoY,EAAahsI,EAAO,GAEzCisI,GACHvuI,KAAKk2H,mBAAmBqY,EAAajsI,EAAO,G,YAIhC,YAAAwzH,mBAAd,SACCv0H,EACAe,EACAqN,EACA6+H,EACAC,EACAhsG,EACA0pF,EACAvrE,G,qIAEM8tF,EAAYF,EACZn4H,EAAQo4H,EAEVpiB,EAAYrsH,KAAKosH,wBAAwB7qH,EAAU4qH,EAAyBx8G,EAAOnV,OAAQomD,GAC3F8tF,EAAU5xI,MACTuZ,EAAMiN,kBAAoBjN,EAAMkN,sBACnC,GAAMlN,EAAMkN,sBAAsB2mC,8BAA8Bv6C,GAAQ,SAACM,EAAOnT,GAC/EuvH,EAAUp8G,EAAM9N,OAASrF,MAFvB,MADD,M,cAEF,S,aAKA,IADImT,OAAK,EACA3V,EAAI,EAAGA,EAAIqV,EAAOnV,OAAQF,IAClC2V,EAAQN,EAAOrV,GACf+xH,EAAUp8G,EAAM9N,OAASsgC,E,iBAI5B,MAAO,CAAP,EAAO4pF,WAGA,YAAAD,wBAAR,SACC7qH,EACA4qH,EACAxoH,EACAi9C,GAEA,IAAMr1C,EAAOhK,EAASgK,KAChBghH,EAAgBJ,EAAwBzvH,IAAI6O,GAClD,GAAIghH,EAAe,CAElB,GAAIA,EAAc/xH,OAASmJ,EAAc,CACxC,IAAMgrI,EAAY3uI,KAAK4uI,qBAAqBrtI,EAAUoC,EAAci9C,GAEpE,OADAurE,EAAwBjsH,IAAIqL,EAAMojI,GAC3BA,EAEP,OAAOpiB,EAGFoiB,EAAY3uI,KAAK4uI,qBAAqBrtI,EAAUoC,EAAci9C,GAEpE,OADAurE,EAAwBjsH,IAAIqL,EAAMojI,GAC3BA,GAID,YAAAC,qBAAR,SAA6BrtI,EAA0BoC,EAAsBi9C,GAG5E,IAFA,IAAM+tF,EAAY,IAAIx6G,MAAcxwB,GAC9B4xH,EAAYh0H,EAASc,aA7LA,YA6LmCC,MACrDhI,EAAI,EAAGA,EAAIq0I,EAAUn0I,OAAQF,IACrCq0I,EAAUr0I,GAAKi7H,EAAc,EAAJj7H,EAAQsmD,GAElC,OAAO+tF,GAGA,YAAAzY,mBAAR,SAA2B7J,EAAqB8J,EAAwBv1E,GACvE,IAAK,IAAItmD,EAAI,EAAGA,EAAI+xH,EAAU7xH,OAAQF,IACrC67H,EAAiB,EAAJ77H,EAAQsmD,GAAUyrE,EAAU/xH,IAG5C,EA/KA,CAAkC,EAAAwJ,cAArB,EAAA6gH,gB,yFCzCb,QACA,QACA,QACA,SACA,SACA,SAEA,OAEA,QAEA,QACA,QAEMkqB,EAAY,IAAI,EAAAtgI,QAAQ,EAAG,EAAG,GAC9BugI,EAAY,IAAI,EAAAvgI,QAAQ,EAAG,EAAG,GAEpC,OAWMuyB,EAAe,IARrB,uE,OACC,EAAA4uB,OAAS,EAAAxwD,YAAYZ,MAAM,GAC3B,EAAAywI,gBAAkB,EAAA7vI,YAAYV,QAAQ,EAAG,CACxC2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,EAAA4rG,OAAS,EAAA9vI,YAAYd,QAAQ,G,EAC9B,OAPsC,iBAOtC,EAPA,CAAsC,EAAAe,mBAUtC,yE,OACC,EAAA0iC,cAAgBf,EASR,EAAAszF,gBAAkB,IAAI,EAAA1uG,cAOtB,EAAAupH,YAAgC,G,EAgGzC,OAjHqC,iBAE7B,EAAAnxI,KAAP,WACC,MAAO,YAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,+BAKT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAK3D,YAAA5/E,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAElCvb,KAAKivI,YAAc,GACnB,IAAmB,UAAAruI,EAAWC,UAAX,eAAsB,EAAhCtD,EAAM,gBACQ,EAAAkJ,cACrBzG,KAAKkvI,aAAa3xI,GAOpB,IADA,IAAMyU,EAAkB,EAAAhG,aAAayF,iBAAiBzR,KAAKivI,aACtC,MAAAjvI,KAAKivI,YAAL,eAAkB,CAAtB,KACPzxH,UAEV,GAAIxL,EAAiB,CACpB,IAAMzU,EAASyC,KAAKwB,cAAcwQ,GAElChS,KAAKiB,WAAW1D,QAEhByC,KAAKoB,YAAY,KAMnB,YAAA8tI,aAAA,SAAaC,GAQZ,I,MAPM5tI,EAAW4tI,EAAa5tI,SAExBoO,EADU,IAAI,EAAA3D,aAAazK,GACVoO,SACjB/L,EAA6B,QAAnB,EAAArC,EAAS8gD,kBAAU,eAAE//C,MAIL,MAFQ,EAAAsiD,sBAAsBT,gCAAgCvgD,GAE9D,eAAiC,CAA5D,IACEwrI,EADqB,KACgB/kI,KAAI,SAAClI,GAAU,OAAAwN,EAAOxN,MACjEnC,KAAKqvI,yBAAyBD,KAIhC,YAAAC,yBAAA,SAAyB1/H,GACxB,KAAIA,EAAOnV,QAAU,GAArB,CASA,IALA,IAAMq4B,EAAYljB,EAAOtF,KAAI,SAAC4F,GAAU,OAAAA,EAAMW,aAAa,eAErD0+H,EAAkB,EAAAvxE,uBAAuB5gE,OAAO6C,KAAKyY,GAAGi3C,OAAQ1vD,KAAKyY,GAAGs2H,iBACxEQ,EAA4B,GAEb,MAAA18G,EAAA,eAAW,CAA3B,IACE91B,EADU,KAEV2nB,EAAS1kB,KAAKo0H,gBAAgB1vG,OAAO3nB,EAAG8xI,EAAWC,EAH5C,GAKPU,EAAaF,EAAgBxsI,QACnC0sI,EAAWpjH,YAAY1H,GACvB6qH,EAAQz0I,KAAK00I,GAGd,IAAK,IAAIl1I,EAAI,EAAGA,EAAIi1I,EAAQ/0I,OAAQF,IACnC,GAAIA,EAAI,EAAG,CACV,IAAMm1I,EAASF,EAAQj1I,GACjBo1I,EAAcH,EAAQj1I,EAAI,GAE1BiH,EAAWvB,KAAK2vI,MAAMD,EAAaD,GACzCzvI,KAAKivI,YAAYn0I,KAAKyG,MAoBzB,YAAAouI,MAAA,SAAMxnE,EAA2BC,GAChC,IAAM7mE,EAAW,IAAI,EAAA8O,eAKrB,OAHkB,IAAI,EAAAi5D,0BAA0B/nE,EAAU4mE,EAAWC,GAC3DC,UAEH9mE,GAET,EAjHA,CAAqC,EAAAuC,cAAxB,EAAA8gH,mB,yFC7Bb,SAEA,QAEA,OAEA,QAEA,QAEMgrB,EAAmB,IAAI,EAAAzyG,kBAAkB,CAC9Ct4B,KAAM,EAAA8gC,aAGP,OAQM7E,EAAe,IAPrB,uE,OACC,EAAA2mG,YAAc,EAAAvoI,YAAYd,QAAQ,GAClC,EAAA8jH,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,GAAI,EAAG,GAAI,CAC3Co9B,WAAY,CAACqrG,YAAa,KAE3B,EAAAoI,sBAAwB,EAAA3wI,YAAYd,QAAQ,G,EAC7C,OANiC,iBAMjC,EANA,CAAiC,EAAAe,mBASjC,yE,OACC,EAAA0iC,cAAgBf,EAMR,EAAAgvG,kBAAoB,EAAKC,wCAAwC1yI,KAAK,GACtE,EAAA2yI,WAAa,IAAI,EAAApzG,U,EAgF1B,OAxFgC,iBAExB,EAAA9+B,KAAP,WACC,MAAO,OAOD,EAAAmyI,sBAAP,WACC,OAAOL,GAGD,EAAA9vI,sBAAP,WACC,MAAO,CAAC,mBAAoB,yBAG7B,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CACzC,EAAA31F,eAAe82F,UACf,EAAA92F,eAAei3F,UAIjB,YAAA7/E,cAAA,aAEA,YAAAE,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAC5B20H,EAAuB30H,EAAe,GAE5Cvb,KAAKiiH,IAAIrhH,EAAYsvI,IAGtB,YAAAjuB,IAAA,SAAIrhH,EAAuBsvI,GAI1B,IAAIhuB,EAAoBiuB,EAFxBnwI,KAAKowI,4CAA4CF,GAGjD,IAAkB,UAAAtvI,EAAW+O,SAAX,eAAqB,CAAlC,IAAIM,EAAK,KACbiyG,EAAYliH,KAAKyY,GAAGgvH,YAAcx3H,EAAMquC,SAAWt+C,KAAKyY,GAAGypG,UAC3DliH,KAAKgwI,WAAW9vI,IAAI+P,EAAMR,WAAYyyG,IAEtCiuB,EAAkBnwI,KAAKgwI,WAAWK,iBAAiBH,EAAqBrvI,WAAW,GAAM,MAExFoP,EAAM0rD,aAAaw0E,EAAgBlgI,OAC/BjQ,KAAKyY,GAAGo3H,uBAAyBM,EAAgBhpB,MACpDl3G,EAAM8rD,WAAWo0E,EAAgBhpB,KAAK7oE,SAKzCt+C,KAAKW,eAAeC,IAGrB,YAAAwvI,4CAAA,SAA4CxvI,GAC3C,IAAmB,UAAAA,EAAWC,UAAX,eAAsB,CAA1B,KACPo8C,SAASj9C,KAAK8vI,qBAGvB,YAAAC,wCAAA,SAAwCxyI,GAEtCA,EAAgB2F,SAAW2hH,EAAWorB,yBAyBzC,EAxFA,CAAgC,EAAAnsI,cAAnB,EAAA+gH,c,kFCRDyrB,EAOAC,E,OAxBZ,QACA,QACA,QAEA,SAIA,SAEA,2BACA,4BACA,QACA,QACA,SACA,SAEA,SAAYD,GACX,8BACA,kCAFD,CAAYA,EAAA,EAAAA,SAAA,EAAAA,OAAM,KAIL,EAAAtnD,QAAU,CAACsnD,EAAOE,aAAcF,EAAOG,gBAGpD,SAAYF,GACX,4BACA,oBACA,0BAHD,CAAYA,EAAA,EAAAA,aAAA,EAAAA,WAAU,KAKT,EAAAG,YAAc,CAACH,EAAWI,YAAaJ,EAAWK,QAASL,EAAWM,YAEnF,WAGA,SAmCM/vG,EAAe,IAlCrB,uE,OACC,EAAAm2C,OAAS,EAAA/3E,YAAYV,QAAQ,EAAAwqF,QAAQ1kF,QAAQgsI,EAAOE,cAAe,CAClEjvG,KAAM,CACLC,QAAS,EAAAwnD,QAAQ3+E,KAAI,SAAChO,EAAM/B,GAC3B,MAAO,CACN+B,KAAMA,EACNS,MAAOxC,SAKX,EAAAw2I,WAAa,EAAA5xI,YAAYV,QAAQ,EAAAkyI,YAAYpsI,QAAQisI,EAAWM,YAAa,CAC5E1tG,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrB7B,KAAM,CACLC,QAAS,EAAAkvG,YAAYrmI,KAAI,SAAChO,EAAM/B,GAC/B,MAAO,CACN+B,KAAMA,EACNS,MAAOxC,SAKX,EAAAy2I,QAAU,EAAA7xI,YAAYZ,MAAM,IAAM,CACjC6kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,EAAAz/B,aAAe,EAAAzE,YAAYV,QAAQ,IAAK,CACvC49B,WAAY,CAAC66C,OAAQ,EAAA+R,QAAQ1kF,QAAQgsI,EAAOE,iBAE7C,EAAAQ,eAAiB,EAAA9xI,YAAYZ,MAAM,EAAG,CACrC89B,WAAY,CAAC66C,OAAQ,EAAA+R,QAAQ1kF,QAAQgsI,EAAOG,mB,EAE9C,OAjCsC,iBAiCtC,EAjCA,CAAsC,EAAAtxI,mBAoCtC,yE,OACC,EAAA0iC,cAAgBf,E,EAwHjB,OAzHqC,iBAE7B,EAAAhjC,KAAP,WACC,MAAO,YAKR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,IAG1B,YAAA3I,KAAA,SAAKC,GACJ,IAAM3a,EAAa2a,EAAe,GAG5B01H,EAAoB,GAC1B,GAAIjxI,KAAKyY,GAAG9U,cAAgB,EAE3B,IADA,IAAMk1D,EAAej4D,EAAWi4D,eACvBv+D,EAAI,EAAGA,EAAIu+D,EAAar+D,OAAQF,IAAK,CAC7C,IACMiD,EADcs7D,EAAav+D,GACNiD,SAC3B,GAAIA,aAAkB,EAAAkJ,aAAc,CACnC,IAAMyqI,EAAmBlxI,KAAKmxI,UAAU5zI,GACxC0zI,EAAkBn2I,KAAKo2I,IAY1BlxI,KAAKoB,YAAY6vI,IAIlB,YAAAE,UAAA,SAAUhC,GAST,I,MARM5tI,EAAW4tI,EAAa5tI,SAExBoO,EADgB,IAAI,EAAA3D,aAAazK,GACVoO,SACvB/L,EAA6B,QAAnB,EAAArC,EAAS8gD,kBAAU,eAAE//C,MAE/B6hD,EAAkC,EAAAS,sBAAsBT,gCAAgCvgD,GAExFjC,EAA+B,GAC5BrH,EAAI,EAAGA,EAAI6pD,EAAgC3pD,OAAQF,IAAK,CAChE,IACM80I,EADsBjrF,EAAgC7pD,GACjB+P,KAAI,SAAClI,GAAU,OAAAwN,EAAOxN,MAC3D,EAAWnC,KAAKoxI,0BAA0BhC,GAC5C,GACHztI,EAAW7G,KAAK,GAGlB,IAAMkX,EAAkB,EAAAC,oBAAoBC,sBAAsBvQ,GAElE,OADe3B,KAAKwB,cAAcwQ,EAAiB,EAAAxP,aAAaC,YAAY2B,gBAI7E,YAAAgtI,0BAAA,SAA0BzhI,GACzB,KAAIA,EAAOnV,QAAU,GAArB,CAoBA,IAhBA,IAAM62I,EAAsB,UAAW1hI,GAAQ,SAACM,GAAU,OAAAA,EAAMW,aAAa,eAEvEkgI,EAAa,EAAAJ,YAAY1wI,KAAKyY,GAAGq4H,YACjCC,EAAU/wI,KAAKyY,GAAGs4H,QAClBO,EAAQ,IAAI,EAAAC,iBAAiBF,GAHpB,EAGiDP,EAAYC,GAOtES,EAAmBxxI,KAAKyxI,uBAAuBH,GAEjDz+G,EAAY,GACVjvB,EAAU,GAEPtJ,EAAI,EAAGA,EAAIk3I,EAAiBh3I,OAAQF,IAAK,CACjD,IAEMmV,EAFiB+hI,EAAiBl3I,GAERgxB,UAChCuH,EAAU/3B,KAAK2U,GAEXnV,EAAI,IACPsJ,EAAQ9I,KAAKR,EAAI,GACjBsJ,EAAQ9I,KAAKR,IAIfu4B,EAAY,UAAeA,GAC3B,IAAMtxB,EAAW,IAAI,EAAA8O,eAIrB,OAHA9O,EAASgM,aAAa,WAAY,IAAI,EAAAc,uBAAuBwkB,EAAW,IACxEtxB,EAASgB,SAASqB,GAEXrC,IAKR,YAAAkwI,uBAAA,SAAuBH,GACtB,IAAMr6D,EAAS,EAAA+R,QAAQhpF,KAAKyY,GAAGw+D,QAC/B,OAAQA,GACP,KAAKq5D,EAAOE,aACX,OAAOc,EAAMI,gBAAgB1oI,KAAKC,IAAI,EAAGjJ,KAAKyY,GAAG9U,eAClD,KAAK2sI,EAAOG,eACX,IAAIj2I,EAAS82I,EAAMK,YAEfhuI,EAA0C,IAA3B3D,KAAKyY,GAAGu4H,eAAuB,EAAIx2I,EAASwF,KAAKyY,GAAGu4H,eAAiB,EAIxF,OAFArtI,EAAeqF,KAAKC,IAAI,EAAGtF,GAEpB2tI,EAAMI,gBAAgB/tI,GAE/B,EAAA6nC,WAAWF,YAAY2rC,IAEzB,EAzHA,CAAqC,EAAAnzE,cAAxB,EAAAghH,mB,yFCvEb,QAEMz4F,EAAQ,CAAC4rF,gBADf,MAC8B,gBAAE5nG,eAAc,kBAC9C,2BACA,2BACA,2BACA,QAEA,QACA,QACA,SAEA,OACA,QAgBMywB,EAAe,IAfrB,uE,OACC,EAAAn9B,aAAe,EAAAzE,YAAYV,QAAQ,IAAK,CACvC2kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAM,KAEtB,EAAAojF,KAAO,EAAAtnH,YAAYV,QAAQ,EAAG,CAC7B2kC,MAAO,CAAC,EAAG,KACXC,aAAc,EAAC,GAAO,KAEvB,EAAAwuG,oBAAsB,EAAA1yI,YAAYd,QAAQ,GAC1C,EAAAyzI,uBAAyB,EAAA3yI,YAAYJ,OAAO,SAAU,CACrDs9B,WAAY,CAACw1G,oBAAqB,KAEnC,EAAAE,iBAAmB,EAAA5yI,YAAYd,QAAQ,G,EACxC,OAdqC,iBAcrC,EAdA,CAAqC,EAAAe,mBAiBrC,yE,OACC,EAAA0iC,cAAgBf,E,EAmKjB,OApKoC,iBAE5B,EAAAhjC,KAAP,WACC,MAAO,WAQD,EAAAgC,sBAAP,WACC,MAAO,CAAC,oCAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAek3F,SAGrD,YAAA5/E,KAAN,SAAWC,G,2KASV,IAPM3a,EAAa2a,EAAe,GAC9BjJ,EAAQ1R,EAAW0R,QAEjBy/H,EAA6B,GAC/BC,EAAW,EACTC,EAA0C,IAAI34G,IAE/C,EAAL,EAAiB,EAAAhnB,EAAA,eAAR60G,EAAI,KACN+qB,EAAO/qB,EAAK+qB,KAClBD,EAAmB/xI,IAAIinH,EAAKhlH,MAAO+vI,GAOpC,IALMC,EAAe,UAAc7/H,GAAO,SAACsiE,GAC1C,OAAOq9D,EAAmBv1I,IAAIk4E,EAAEzyE,UAG7B7H,EAAI,EACH,EAAL,EAAiB,EAAA63I,EAAA,eAARhrB,EAAI,KACZ6qB,GAAYC,EAAmBv1I,IAAIyqH,EAAKhlH,OACxC4vI,EAAiBz3I,GAAK03I,EACtB13I,IAWD,IARMu4B,EAAsB,GACxB1oB,EAAyB,GACzBnK,KAAKyY,GAAGm5H,sBACXznI,EAAevJ,EAAW45D,2BAA2Bx6D,KAAKyY,GAAGo5H,yBAGxDO,EAA+C,IAAI94G,IACnDkrB,EAA4C,IAAIlrB,IACjD,EAAL,EAAwB,EAAAnvB,EAAA,eAAf6C,EAAW,KACnBolI,EAAsBlyI,IAAI8M,EAAa,IACvCw3C,EAAqBtkD,IAAI8M,EAAapM,EAAWsM,YAAYF,IAK9D,UAFiB,IAAI,EAAAwwD,cAENZ,iBAAiB58D,KAAKyY,GAAG9U,cAAc,SAACqM,GAGtD,IAFA,IAAMqd,EAAO,EAAAjI,SAASmI,WAAW,EAAK9U,GAAG+tG,KAAOx2G,GAAegiI,EAEtDK,EAAa,EAAGA,EAAaN,EAAiBv3I,OAAQ63I,IAAc,CAG5E,GAAIhlH,GAFoB0kH,EAAiBM,GAEZ,CAC5B,IAAMlrB,EAAOgrB,EAAaE,GACpB5iI,EAAW03G,EAAKZ,gBAAgBl5F,GACtC5d,EAAS6b,QAAQuH,EAAWA,EAAUr4B,QAEtC,IAAwB,UAAA2P,EAAA,eAAc,CAAjC,IAAI6C,EAAW,KACb4D,EAAeu2G,EAAKR,yBAAyB35G,EAAayC,GAC5D,UAAgBmB,GACnBwhI,EAAsB11I,IAAIsQ,GAAclS,KAAK8V,GAE7CA,EAAa0a,QACZ8mH,EAAsB11I,IAAIsQ,GAC1BolI,EAAsB11I,IAAIsQ,GAAcxS,QAK3C,Y,OAqCH,IA5DA,UA0DM+G,EAAW,IAAI8qB,EAAMhc,gBAClB9C,aAAa,WAAY,IAAI8e,EAAM4rF,gBAAgB,IAAIllF,aAAaF,GAAY,IACpF,EAAL,EAAwB,EAAA1oB,EAAA,eAAf6C,EAAW,KACnBzL,EAASgM,aACRP,EACA,IAAIqf,EAAM4rF,gBACT,IAAIllF,aAAaq/G,EAAsB11I,IAAIsQ,IAC3Cw3C,EAAqB9nD,IAAIsQ,K,OAKxBhN,KAAKyY,GAAGq5H,mBACLvgE,EAAM,UAAavxE,KAAKyY,GAAG9U,cACjCpC,EAASgM,aAAa,KAAM,IAAI8e,EAAM4rF,gBAAgB,IAAIllF,aAAaw+C,GAAM,KAG9EvxE,KAAKsB,aAAaC,EAAU,EAAAiB,aAAaC,YAAY0B,Q,YA8BvD,EApKA,CAAoC,EAAAL,cAAvB,EAAAihH,kB,yFC/Bb,QACA,QAGA,OAMMjkF,EAAe,IALrB,uE,OACC,EAAAwxG,YAAc,EAAApzI,YAAYd,QAAQ,GAClC,EAAAm0I,eAAiB,EAAArzI,YAAYd,QAAQ,GACrC,EAAA+nI,kBAAoB,EAAAjnI,YAAYd,QAAQ,G,EACzC,OAJqC,iBAIrC,EAJA,CAAqC,EAAAe,mBAOrC,yE,OACC,EAAA0iC,cAAgBf,E,EAgCjB,OAjCoC,iBAE5B,EAAAhjC,KAAP,WACC,MAAO,WAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,4CAGT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAGrD,YAAAx/E,KAAN,SAAWC,G,4GAGV,IAFM3a,EAAa2a,EAAe,GAE7B,EAAL,EAAmB,EAAA3a,EAAWC,UAAX,eAAVtD,EAAM,KACVyC,KAAKyY,GAAG0tH,kBACX5oI,EAAO0/C,UAAS,SAACod,GAChBA,EAAMt3D,WAAa,EAAK0V,GAAG65H,YAC3Bj4E,EAAMr3D,cAAgB,EAAKyV,GAAG85H,mBAG/Bh1I,EAAOwF,WAAa/C,KAAKyY,GAAG65H,YAC5B/0I,EAAOyF,cAAgBhD,KAAKyY,GAAG85H,gB,OAIjCnvI,QAAQC,IAAIzC,EAAWC,WACvBb,KAAKW,eAAeC,G,WAEtB,EAjCA,CAAoC,EAAAkD,cAAvB,EAAAmhH,kB,yFCZb,QAGA,2BACA,4BACA,2BACA,QAEA,SACA,SAKMnkF,EAAe,IADrB,yB,+CAAoD,OAAlB,iBAAkB,EAApD,CADA,KACkC3hC,mBAGlC,yE,OACC,EAAA0iC,cAAgBf,E,EAsFjB,OAvFiC,iBAEzB,EAAAhjC,KAAP,WACC,MAAO,QAGD,EAAAgC,sBAAP,WACC,MAAO,CAAC,gCAAiC,iDAG1C,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,IAG7B,YAAA3I,KAAA,SAAKC,GACJ,OAAQ,UAAevb,KAAKQ,GAAGiX,OAAOA,UAAUjd,QAC/C,KAAK,EACJ,OAAOwF,KAAKwyI,kBAAkBj3H,GAC/B,KAAK,EACJ,OAAOvb,KAAKyyI,mBAAmBl3H,GAChC,QACC,OAAOvb,KAAKswB,OAAOhT,MAAMpd,IAAI,4BAIhC,YAAAsyI,kBAAA,SAAkBj3H,GAAlB,WACOk4G,EAAcl4G,EAAe,GAC7Bm3H,EAAiB1yI,KAAK2yI,mBAAmBlf,GAEzC9xH,EAA+B,GACrC,GAAI+wI,EAAgB,CACnB,IAAME,EAAqBF,EAAe,GAC1C,GAAIE,EAAoB,CACvB,IAAM,EAAiB,EAAAhuF,sBAAsBD,2BAC5CiuF,EAAmBrxI,UAEpB,EAAeK,SAAQ,SAACoN,EAAc1U,GACrC,GAAIA,EAAI,EAAG,CACV,IAAMu4I,EAAoB,EAAev4I,EAAI,GAEvCiH,EAAW,EAAKouI,MAAMkD,EAAmB7jI,GAC/CrN,EAAW7G,KAAKyG,QAMpBvB,KAAK0B,eAAeC,IAGrB,YAAA8wI,mBAAA,SAAmBl3H,GAAnB,WACOk4G,EAAcl4G,EAAe,GAC7Bm4G,EAAcn4G,EAAe,GAC7Bm3H,EAAiB1yI,KAAK2yI,mBAAmBlf,GACzCqf,EAAiB9yI,KAAK2yI,mBAAmBjf,GACzCqf,EAAgB,UAAe,UAAc,CAACL,EAAgBI,IAAiB,SAACxwI,GAAU,OAAAA,EAAM9H,WAChGw4I,EAAiBD,EAAc,GAC/BE,EAAgBF,EAAc,GAE9BpxI,EAA+B,GACrCqxI,EAAepxI,SAAQ,SAACutI,EAAc70I,GACrC,IAAM44I,EAAqBD,EAAc34I,GAEzC,GAAoB,MAAhB60I,GAA8C,MAAtB+D,EAA4B,CACvD,IAAM/2F,EAAOgzF,EAAsB5tI,SAC7B4xI,EAAaD,EAA4B3xI,SACzCA,EAAW,EAAKouI,MAAMxzF,EAAKg3F,GACjCxxI,EAAW7G,KAAKyG,OAIlBvB,KAAK0B,eAAeC,IAGrB,YAAAgxI,mBAAA,SAAmB/xI,GAClB,OAAOA,EAAWC,UAAUwmB,QAAO,SAACgzC,GAAU,OAACA,EAAuBwsE,mBAGvE,YAAA8I,MAAA,SAAMxnE,EAA2BC,GAEhC,IAAM7mE,EAAW,IAAI,EAAA8O,eAKrB,OAHkB,IAAI,EAAAi5D,0BAA0B/nE,EAAU4mE,EAAWC,GAC3DC,UAEH9mE,GAET,EAvFA,CAAiC,EAAAuC,cAApB,EAAAkhH,e,kFCZRouB,E,OAJL,SACA,SACA,SAEA,SAAKA,GACJ,oBACA,4BAFD,CAAKA,MAAU,KAKf,IAAMC,EAA2B,CAChCrrG,QAAS,EACTsrG,YAAa,GAERC,EAAkC,CAACH,EAAW54B,QAAS44B,EAAWI,aAExE,OAqBM1yG,EAAe,IApBrB,uE,OACC,EAAAhjC,KAAO,EAAAoB,YAAYV,QAAQ60I,EAAYrrG,QAAS,CAC/CzG,KAAM,CACLC,QAAS+xG,EAAalpI,KAAI,SAAChO,GAC1B,MAAO,CAACA,KAAMA,EAAMS,MAAOu2I,EAAYh3I,UAI1C,EAAAqzD,OAAS,EAAAxwD,YAAYZ,MAAM,EAAG,CAAC89B,WAAY,CAACt+B,KAAMu1I,EAAYrrG,WAC9D,EAAAiuD,WAAa,EAAA/2F,YAAYH,QAAQ,CAAC,EAAG,GAAI,CAACq9B,WAAY,CAACt+B,KAAMu1I,EAAYrrG,WACzE,EAAA29E,KAAO,EAAAzmH,YAAYd,QAAQ,EAAG,CAACg+B,WAAY,CAACt+B,KAAMu1I,EAAYrrG,WAC9D,EAAAyrG,cAAgB,EAAAv0I,YAAYH,QAAQ,CAAC,EAAG,SAAU,CAACq9B,WAAY,CAACt+B,KAAMu1I,EAAYrrG,QAAS29E,MAAM,KACjG,EAAA+tB,cAAgB,EAAAx0I,YAAYH,QAAQ,CAAC,EAAG,SAAU,CAACq9B,WAAY,CAACt+B,KAAMu1I,EAAYrrG,QAAS29E,MAAM,KACjG,EAAAguB,OAAS,EAAAz0I,YAAYV,QAAQ,EAAG,CAC/B2kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,GACrBhH,WAAY,CAACt+B,KAAMu1I,EAAYC,eAEhC,EAAA15E,OAAS,EAAA16D,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACrC,OAnBoC,iBAmBpC,EAnBA,CAAoC,EAAAG,mBAsBpC,yE,OACC,EAAA0iC,cAAgBf,E,EAiCjB,OAlCmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,UAGR,YAAAwd,KAAA,WACC,IAAI/Z,GAEHA,EADGvB,KAAKyY,GAAG3a,MAAQu1I,EAAYrrG,QACpBhoC,KAAK4zI,yBAEL5zI,KAAK6zI,+BAERvxD,UAAUtiF,KAAKyY,GAAGmhD,OAAO/rD,EAAG7N,KAAKyY,GAAGmhD,OAAO9rD,EAAG9N,KAAKyY,GAAGmhD,OAAO5rD,GACtEhO,KAAKsB,aAAaC,IAEnB,YAAAqyI,uBAAA,WACC,OAAI5zI,KAAKyY,GAAGktG,KACJ,IAAI,EAAAlN,qBACVz4G,KAAKyY,GAAGi3C,OACR1vD,KAAKyY,GAAGw9E,WAAWpoF,EACnB7N,KAAKyY,GAAGw9E,WAAWnoF,EACnB9N,KAAKyY,GAAGg7H,cAAc5lI,EACtB7N,KAAKyY,GAAGg7H,cAAc3lI,EACtB9N,KAAKyY,GAAGi7H,cAAc7lI,EACtB7N,KAAKyY,GAAGi7H,cAAc5lI,GAGhB,IAAI,EAAA2qG,qBAAqBz4G,KAAKyY,GAAGi3C,OAAQ1vD,KAAKyY,GAAGw9E,WAAWpoF,EAAG7N,KAAKyY,GAAGw9E,WAAWnoF,IAG3F,YAAA+lI,4BAAA,WACC,OAAO,IAAI,EAAAC,0BAA0B9zI,KAAKyY,GAAGi3C,OAAQ1vD,KAAKyY,GAAGk7H,SAE/D,EAlCA,CAAmC,EAAA7vI,cAAtB,EAAAohH,iB,yFCtCb,QAEMqhB,EAAa,wBAEnB,OACA,QAOMzlG,EAAe,IANrB,uE,OACC,EAAAlpB,MAAQ,EAAA1Y,YAAYV,QAAQ,EAAG,CAC9B2kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,K,EAEvB,OALoC,iBAKpC,EALA,CAAoC,EAAAjkC,mBAQpC,yE,OACC,EAAA0iC,cAAgBf,E,EAgCjB,OAjCmC,iBAE3B,EAAAhjC,KAAP,WACC,MAAO,UAGD,EAAAgC,sBAAP,WACC,MAAO,CAACymI,EAAYA,EAAYA,EAAYA,IAG7C,YAAA3rH,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,EAAG,GAC5BjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CACzC,EAAA31F,eAAek3F,MACf,EAAAl3F,eAAek3F,MACf,EAAAl3F,eAAek3F,MACf,EAAAl3F,eAAek3F,QAEhBl7F,KAAKw3B,QAAQsqD,UAAU,KAGvB9hF,KAAK0b,gBAAgB6rE,8BAGhB,YAAAjsE,KAAN,W,+HACOmV,EAAczwB,KAAKyY,GAAGb,MACxB5X,KAAKQ,GAAGiX,OAAOkjF,UAAUlqE,GACV,GAAMzwB,KAAKV,qBAAqB6wB,wBAAwBM,IADvE,M,cACG1uB,EAAY,SAClB/B,KAAKW,eAAeoB,EAAUC,gB,aAE9BhC,KAAKswB,OAAOhT,MAAMpd,IAAI,YAAYuwB,G,mCAGrC,EAjCA,CAAmC,EAAA3sB,cAAtB,EAAAqhH,iB,kFCuBD4uB,E,OArCZ,2BAGA,QACA,QAEA,SACA,QACA,SACA,UAEA,QAKA,SAEIC,EAAW,EAAQ,OAmBvB,SAAYD,GACX,cACA,cACA,cACA,kBAJD,CAAYA,EAAA,EAAAA,YAAA,EAAAA,UAAS,KAMR,EAAAE,WAA+B,CAACF,EAAUrxI,KAAMqxI,EAAUG,KAAMH,EAAUt9G,KAAMs9G,EAAUI,QAMvG,IAEA,OAqCMrzG,EAAe,IApCrB,uE,OACC,EAAAszG,KAAO,EAAAl1I,YAAYJ,OAAO,IAC1B,EAAA4jI,KAAO,EAAAxjI,YAAYJ,OAAO,YAAa,CAACu1I,WAAW,IACnD,EAAAv2I,KAAO,EAAAoB,YAAYV,QAAQ,EAAG,CAC7B+iC,KAAM,CACLC,QAAS,EAAAyyG,WAAW5pI,KAAI,SAACvM,EAAMxD,GAC9B,MAAO,CACN+B,KAAMyB,EACNhB,MAAOxC,SAKX,EAAAkL,KAAO,EAAAtG,YAAYZ,MAAM,EAAG,CAC3B6kC,MAAO,CAAC,EAAG,GACXC,aAAc,EAAC,GAAM,KAEtB,EAAAkxG,QAAU,EAAAp1I,YAAYZ,MAAM,GAAK,CAChC89B,WAAY,CACXt+B,KAAM,EAAAm2I,WAAW3vI,QAAQyvI,EAAUrxI,SAGrC,EAAA2P,SAAW,EAAAnT,YAAYV,QAAQ,EAAG,CACjC2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,GACrBhH,WAAY,CACXt+B,KAAM,EAAAm2I,WAAW3vI,QAAQyvI,EAAUrxI,SAGrC,EAAA6xI,aAAe,EAAAr1I,YAAYZ,MAAM,IAAM,CACtC89B,WAAY,CACXt+B,KAAM,EAAAm2I,WAAW3vI,QAAQyvI,EAAUI,W,EAGtC,OAlCkC,iBAkClC,EAlCA,CAAkC,EAAAh1I,mBAsClC,yE,OACC,EAAA0iC,cAAgBf,EAQR,EAAA0zG,aAA2B,IAAI,EAAAC,WAG/B,EAAAC,cAA2B,G,EA8OpC,OA1PiC,iBAEzB,EAAA52I,KAAP,WACC,MAAO,QAWR,YAAA8c,gBAAA,aAEM,YAAAU,KAAN,W,yJAEE,EAAAtb,KAAK00I,cAAc,EAAA10I,KAAKyY,GAAG27H,MAAQ,EAAAp0I,KAAK00I,cAAc10I,KAAKyY,GAAG27H,OAA3B,MAAqC,GAAMp0I,KAAK20I,UAAU30I,KAAKyY,GAAG27H,O,OAA9B,EAAC,S,wBAAxE,KAAmC,E,aAGnC,O,SADAp0I,KAAKswB,OAAOhT,MAAMpd,IAAI,wBAAwBF,KAAKyY,GAAG27H,KAAI,KAC1D,I,OAGD,GADMA,EAAOp0I,KAAK00I,cAAc10I,KAAKyY,GAAG27H,MAEvC,OAAQ,EAAAH,WAAWj0I,KAAKyY,GAAG3a,OAC1B,KAAKi2I,EAAUrxI,KACd,MAAO,CAAP,EAAO1C,KAAK40I,gCAAgCR,IAC7C,KAAKL,EAAUG,KACd,MAAO,CAAP,EAAOl0I,KAAK60I,gCAAgCT,IAC7C,KAAKL,EAAUt9G,KACd,MAAO,CAAP,EAAOz2B,KAAK80I,gCAAgCV,IAC7C,KAAKL,EAAUI,OACd,MAAO,CAAP,EAAOn0I,KAAK+0I,kCAAkCX,IAC/C,QACChxI,QAAQmT,KAAK,qB,kBAKT,YAAAq+H,gCAAR,SAAwCR,GACvC,IAAM1R,EAAO1iI,KAAKg1I,iBAEZC,EAAa,CAClBb,KAAMA,EACN5uI,KAAMxF,KAAKyY,GAAGjT,KACdi9F,OAAQziG,KAAKyY,GAAG67H,QAChBY,cAAel1I,KAAKyY,GAAGpG,UAGxB,IACC,IAAM9Q,EAAW,IAAI,EAAA4zI,mBAAmBzS,EAAMuS,GAC9C,IAAK1zI,EAASY,MAAO,CACpB,IAAMC,EAAiBb,EAASc,aAAa,YAAYC,MACzDf,EAASgB,SAAS,UAAaH,EAAe5H,OAAS,IAExDwF,KAAKsB,aAAaC,GACjB,MAAO6zI,GACRp1I,KAAKswB,OAAOhT,MAAMpd,IAnGY,gEAuGxB,YAAA20I,gCAAR,SAAwCT,GACvC,IAAMiB,EAASr1I,KAAKs1I,YAAYlB,GAChC,GAAIiB,EAAQ,CACX,IAAI9zI,EAAW,IAAI,EAAAg0I,oBAAoBF,GACvCr1I,KAAKsB,aAAaC,KAGZ,YAAAuzI,gCAAR,SAAwCV,GACvC,IAAMiB,EAASr1I,KAAKw1I,iBAAiBpB,GACrC,GAAIiB,EAAQ,CAKX,IAJA,IAAMxiH,EAAY,GACZjvB,EAAU,GACZytB,EAAgB,EAEX/2B,EAAI,EAAGA,EAAI+6I,EAAO76I,OAAQF,IAGlC,IAFA,IACMqV,EADQ0lI,EAAO/6I,GACAm7I,YACZj6I,EAAI,EAAGA,EAAImU,EAAOnV,OAAQgB,IAAK,CACvC,IAAMyU,EAAQN,EAAOnU,GACrBq3B,EAAU/3B,KAAKmV,EAAMpC,GACrBglB,EAAU/3B,KAAKmV,EAAMnC,GACrB+kB,EAAU/3B,KAAK,GACf8I,EAAQ9I,KAAKu2B,GACT71B,EAAI,GAAKA,EAAImU,EAAOnV,OAAS,GAChCoJ,EAAQ9I,KAAKu2B,GAEdA,GAAiB,EAGnB,IAAM9vB,EAAW,IAAI,EAAA8O,eACrB9O,EAASgM,aAAa,WAAY,IAAI,EAAAc,uBAAuBwkB,EAAW,IACxEtxB,EAASgB,SAASqB,GAClB5D,KAAKsB,aAAaC,EAAU,EAAAiB,aAAaC,YAAY2B,iBAGzC,YAAA2wI,kCAAd,SAAgDX,G,+IACzCiB,EAASr1I,KAAKw1I,iBAAiBpB,KAGpC,EAAAp0I,MAAmB,EAAAA,KAAK01I,aAAL,MAAqB,GAAM11I,KAAK21I,qBAFhD,M,OAEoC,EAAC,S,iBASxC,IATA,EAAKD,YAAc,EAEfh4B,EAAQ19G,KAAK01I,YAAYE,eAAe51I,KAAKyY,GAAG87H,aAAc,QAAS,QAAS,OAAQ,GACtF5yI,EAAa,GAMVrH,EAAI,EAAGA,EAAI+6I,EAAO76I,OAAQF,IAC5Bu7I,EAAQR,EAAO/6I,GACfqV,EAASkmI,EAAMJ,YAEA,GACD,KACdl0I,EAAWvB,KAAK01I,YAAYI,eACvBnmI,EACV+tG,EAJoB,GACD,MAOpB/7G,EAAW7G,KAAKyG,GAEXyQ,EAAkB,EAAAC,oBAAoBC,sBAAsBvQ,GAClE3B,KAAKsB,aAAa0Q,G,mCAIZ,YAAAwjI,iBAAR,SAAyBpB,GACxB,IAAMiB,EAASr1I,KAAKs1I,YAAYlB,GAChC,GAAIiB,EAAQ,CAEX,IADA,IAAMU,EAAqB,GAClBz7I,EAAI,EAAGA,EAAI+6I,EAAO76I,OAAQF,IAAK,CACvC,IAAMu7I,EAAQR,EAAO/6I,GACrB,GAAIu7I,EAAMG,OAASH,EAAMG,MAAMx7I,OAAS,EACvC,IAAK,IAAIgB,EAAI,EAAGA,EAAIq6I,EAAMG,MAAMx7I,OAAQgB,IAAK,CAC5C,IAAMy6I,EAAOJ,EAAMG,MAAMx6I,GACzBu6I,EAAWj7I,KAAKm7I,IAKnB,OADAZ,EAAOv6I,KAAKK,MAAMk6I,EAAQU,GACnBV,IAID,YAAAC,YAAR,SAAoBlB,GACnB,IAAM1R,EAAO1iI,KAAKg1I,iBAClB,IAEC,OADeZ,EAAK8B,eAAexT,EAAM1iI,KAAKyY,GAAGjT,MAEhD,MAAO4vI,GACRp1I,KAAKswB,OAAOhT,MAAMpd,IAlMY,gEAsMxB,YAAA80I,eAAR,WACC,OAAOh1I,KAAKyY,GAAGiqH,MAAQ,IAehB,YAAAiS,UAAR,SAAkB5zG,GACL,KAARA,IACHA,EAlPiB,2CAoPlB,IACMo1G,EADYp1G,EAAI53B,MAAM,KAAK,GACLA,MAAM,KAC5B45F,EAAMozC,EAAUA,EAAU37I,OAAS,GAEzC,OADAumC,EAASA,EAAG,IAAIz4B,KAAKmwD,MACbsqC,GACP,IAAK,MACJ,OAAO/iG,KAAKo2I,UAAUr1G,GAGvB,IAAK,OACJ,OAAO/gC,KAAKq2I,WAAWt1G,GAGxB,QACC,OAAO,OAKF,YAAAq1G,UAAR,SAAkBr1G,GAAlB,WACC,OAAO,IAAI/e,SAAQ,SAAOC,EAASC,GAAM,+C,oFACxC,EAAAliB,MAAmB,EAAAA,KAAKs2I,aAAL,MAAqB,GAAMt2I,KAAKu2I,oB,OAAZ,EAAC,S,wBAAxC,EAAKD,YAAc,EACnB34I,OAAOq2I,SAAWA,EAClBh0I,KAAKs2I,YAAYj4E,KAChBt9B,GACA,SAACy1G,GACA,IAAM3xF,EAAS,EAAK2vF,aAAajsI,MAAMiuI,GAGvCv0H,EAAQ4iC,UAETx7C,GACA,WACC6Y,O,eAKI,YAAAm0H,WAAR,SAAmBt1G,GAAnB,WACC,OAAO,IAAI/e,SAAQ,SAACC,EAASC,GAC5B,EAAKsyH,aAAan2E,KACjBt9B,GACA,SAACqzG,GACAnyH,EAAQmyH,UAET/qI,GACA,WACC6Y,WAiBU,YAAAq0H,iBAAd,W,sHACqB,oEAAa,U,OAEjC,OAFOE,EAAa,SAA4D,UAEzE,CAAP,EAAO,IAD8BA,WAGxB,YAAAd,iBAAd,W,gHACqB,oEAAa,U,OACjC,MAAO,CAAP,EADoB,SAA4D,mBAGlF,EA1PA,CAAiC,EAAA7xI,cAApB,EAAAshH,e,6BC1Fb,qEAaIqxB,EAAY,SAAW12E,GAE1B,IAAOnlE,KAAMoF,KAAM+/D,GAEnB//D,KAAK02I,UAAW,GAKjBD,EAAU/7I,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ,IAAOzC,WAAa,CAEvE0U,YAAaqnI,EAEbp4E,KAAM,SAAWt9B,EAAKkgC,EAAQC,EAAYC,GAEzC,IAAIpS,EAAQ/uD,KAERohE,EAAS,IAAI,IAAYphE,KAAK+/D,SAClCqB,EAAOC,QAASrhE,KAAKoX,MACrBgqD,EAAOE,gBAAiB,eACxBF,EAAO/C,KAAMt9B,GAAK,SAAW4iB,GAE5Bsd,EAAQlS,EAAMxmD,MAAOo7C,MAEnBud,EAAYC,IAIhB54D,MAAO,SAAWouI,GAuFjB,SAASC,EAAiBC,GAEzB,IACIz/H,EADA6mE,EAAQ,GAGZ44D,EAASj1I,SAAS,SAAWzF,GAEE,MAAzBA,EAAE2B,KAAKihF,eAEX3nE,EAAO,CAAEjb,GACT8hF,EAAMnjF,KAAMsc,IAEwB,MAAzBjb,EAAE2B,KAAKihF,eAElB3nE,EAAKtc,KAAMqB,MAMb,IAAIu6I,EAAW,GAuCf,OArCAz4D,EAAMr8E,SAAS,SAAWnE,GAEzB,IAAIpC,EAAS,CACZyC,KAAM,IACN+P,EAAGpQ,EAAGA,EAAEjD,OAAS,GAAIqT,EACrBC,EAAGrQ,EAAGA,EAAEjD,OAAS,GAAIsT,GAGtB4oI,EAAS57I,KAAMO,GAEf,IAAM,IAAIf,EAAImD,EAAEjD,OAAS,EAAGF,EAAI,EAAGA,IAAO,CAEzC,IAAIw8I,EAAUr5I,EAAGnD,GACbe,EAAS,CAAEyC,KAAMg5I,EAAQh5I,WAETuL,IAAfytI,EAAQlN,SAAmCvgI,IAAfytI,EAAQjN,IAExCxuI,EAAOquI,GAAKoN,EAAQlN,GACpBvuI,EAAOsuI,GAAKmN,EAAQjN,GACpBxuI,EAAOuuI,GAAKkN,EAAQpN,GACpBruI,EAAOwuI,GAAKiN,EAAQnN,SAEMtgI,IAAfytI,EAAQpN,SAAmCrgI,IAAfytI,EAAQnN,KAE/CtuI,EAAOquI,GAAKoN,EAAQpN,GACpBruI,EAAOsuI,GAAKmN,EAAQnN,IAIrBtuI,EAAOwS,EAAIpQ,EAAGnD,EAAI,GAAIuT,EACtBxS,EAAOyS,EAAIrQ,EAAGnD,EAAI,GAAIwT,EACtB4oI,EAAS57I,KAAMO,OAMVq7I,EAIR,MAAyB,oBAAb1C,UAEX5wI,QAAQmT,KAAM,sGACP,MAvJR,SAAkB69H,EAAMsC,GAUvB,IARA,IAAIjpH,EAAQzkB,KAAKykB,MAEbspH,EAAS,GACTnzH,EAAQ,KAA6C,IAA5BwwH,EAAK4C,YAAc,OAE5CC,EAAgB7C,EAAKlsC,SAASgvC,KAAKD,cACnCE,EAAW18I,OAAO6R,KAAM2qI,GAElB38I,EAAI,EAAGA,EAAI68I,EAAS38I,OAAQF,IAAO,CAE5C,IAAI88I,EAAUD,EAAU78I,GACpB+8I,EAAQjD,EAAK2C,OAAOA,OAAQE,EAAeG,IAE/C,QAAiB/tI,IAAZ+tI,EAAwB,CAE5B,IAAIE,EAAQ,CACXtgE,GAAIvpD,EAAO4pH,EAAME,aAAe3zH,GAChC4zH,MAAO/pH,EAAO4pH,EAAMI,KAAO7zH,GAC3B8zH,MAAOjqH,EAAO4pH,EAAMM,KAAO/zH,GAC3BrnB,EAAG,IAGCm6I,IAEJW,EAAMjgI,KAAKy/H,SAAWD,EAAiBS,EAAMjgI,KAAKy/H,WAInDQ,EAAMjgI,KAAKy/H,SAASj1I,SAAS,SAAWk1I,GAEH,MAA/BA,EAAQh5I,KAAKihF,gBAEjB+3D,EAAQh5I,KAAO,KAIhBw5I,EAAM/6I,GAAKu6I,EAAQh5I,KAAKihF,cAAgB,SAErB11E,IAAdytI,EAAQjpI,QAAiCxE,IAAdytI,EAAQhpI,IAEvCwpI,EAAM/6I,GAAKkxB,EAAOqpH,EAAQjpI,EAAI+V,GAAU,IAAM6J,EAAOqpH,EAAQhpI,EAAI8V,GAAU,UAIxDva,IAAfytI,EAAQpN,SAAmCrgI,IAAfytI,EAAQnN,KAExC2N,EAAM/6I,GAAKkxB,EAAOqpH,EAAQpN,GAAK9lH,GAAU,IAAM6J,EAAOqpH,EAAQnN,GAAK/lH,GAAU,UAI1Dva,IAAfytI,EAAQlN,SAAmCvgI,IAAfytI,EAAQjN,KAExCyN,EAAM/6I,GAAKkxB,EAAOqpH,EAAQlN,GAAKhmH,GAAU,IAAM6J,EAAOqpH,EAAQjN,GAAKjmH,GAAU,QAM/EmzH,EAAQvxC,OAAOoyC,cAAeP,EAAMD,UAAcE,GAMpD,MAAO,CACNP,OAAQA,EACRc,WAAYzD,EAAK0D,eAAgB,YACjCC,SAAUtqH,EAAO2mH,EAAK2D,SAAWn0H,GACjCo0H,UAAWvqH,EAAO2mH,EAAK4D,UAAYp0H,GACnCq0H,kBAAmB7D,EAAK8D,OAAOC,KAAKF,kBACpCG,mBAAoBhE,EAAK8D,OAAOC,KAAKC,mBACrCxsI,YAAa,CACZ6rI,KAAMrD,EAAK8D,OAAOG,KAAKZ,KACvBE,KAAMvD,EAAK8D,OAAOG,KAAKV,KACvBW,KAAMlE,EAAK8D,OAAOG,KAAKC,KACvBC,KAAMnE,EAAK8D,OAAOG,KAAKE,MAExBtiD,WAAY,IACZuiD,0BAA2BpE,EAAK8D,OAAO77I,MA2ElCqkB,CAASszH,SAASzrI,MAAOouI,GAAe32I,KAAK02I,c,yFCtMtD,SACA,QAEA,OAaM51G,EAAe,IAZrB,uE,OACC,EAAA4uB,OAAS,EAAAxwD,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KAC1C,EAAAs1G,YAAc,EAAAv5I,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KAC/C,EAAA4rG,gBAAkB,EAAA7vI,YAAYV,QAAQ,GAAI,CACzC2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,KAEtB,EAAAs1G,cAAgB,EAAAx5I,YAAYV,QAAQ,GAAI,CACvC2kC,MAAO,CAAC,EAAG,IACXC,aAAc,EAAC,GAAM,K,EAEvB,OAXmC,iBAWnC,EAXA,CAAmC,EAAAjkC,mBAcnC,yE,OACC,EAAA0iC,cAAgBf,E,EAgBjB,OAjBkC,iBAE1B,EAAAhjC,KAAP,WACC,MAAO,SAER,YAAA8c,gBAAA,aAEA,YAAAU,KAAA,WACC,IAAMo0C,EAAS1vD,KAAKyY,GAAGi3C,OACjB+oF,EAAcz4I,KAAKyY,GAAGggI,YACtB1J,EAAkB/uI,KAAKyY,GAAGs2H,gBAC1B2J,EAAgB14I,KAAKyY,GAAGigI,cAGxBn3I,EAAW,IAAI,EAAAo3I,oBAAoBjpF,EAAQ+oF,EAAa1J,EAAiB2J,GAC/E14I,KAAKsB,aAAaC,IAEpB,EAjBA,CAAkC,EAAAuC,cAArB,EAAAuhH,gB,yFCjBPh5F,EAAQ,CAACusH,wBADf,OACsC,yBACtC,QAEA,OASM93G,EAAe,IARrB,uE,OACC,EAAA4uB,OAAS,EAAAxwD,YAAYZ,MAAM,GAC3B,EAAAm6I,YAAc,EAAAv5I,YAAYZ,MAAM,GAChC,EAAAywI,gBAAkB,EAAA7vI,YAAYV,QAAQ,GAAI,CAAC2kC,MAAO,CAAC,EAAG,OACtD,EAAAu1G,cAAgB,EAAAx5I,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,MACnD,EAAA1lC,EAAI,EAAAyB,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,MACvC,EAAA4yC,EAAI,EAAA72E,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,M,EACxC,OAPuC,iBAOvC,EAPA,CAAuC,EAAAhkC,mBAUvC,yE,OACC,EAAA0iC,cAAgBf,E,EAiBjB,OAlBsC,iBAE9B,EAAAhjC,KAAP,WACC,MAAO,cAER,YAAA8c,gBAAA,aAEA,YAAAU,KAAA,WACC,IAAMo0C,EAAS1vD,KAAKyY,GAAGi3C,OACjB+oF,EAAcz4I,KAAKyY,GAAGggI,YACtB1J,EAAkB/uI,KAAKyY,GAAGs2H,gBAC1B2J,EAAgB14I,KAAKyY,GAAGigI,cACxBj7I,EAAIuC,KAAKyY,GAAGhb,EACZs4E,EAAI/1E,KAAKyY,GAAGs9D,EAEZx0E,EAAW,IAAI8qB,EAAMusH,wBAAwBlpF,EAAQ+oF,EAAa1J,EAAiB2J,EAAej7I,EAAGs4E,GAC3G/1E,KAAKsB,aAAaC,IAEpB,EAlBA,CAAsC,EAAAuC,cAAzB,EAAAwhH,oB,yFCfb,QAGA,SACA,QAEA,QAMA,OAaMxkF,EAAe,IAZrB,uE,OACC,EAAAub,MAAQ,EAAAn9C,YAAYJ,OAAO,IAG3B,EAAA/B,EAAI,EAAAmC,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAArC,EAAI,EAAAuC,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAApD,EAAI,EAAAsD,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAC/B,EAAA4kB,MAAQ,EAAA1kB,YAAYZ,MAAM,GAC1B,EAAAu6I,QAAU,EAAA35I,YAAYT,cAAc,IACpC,EAAAwoB,GAAK,EAAA/nB,YAAYF,QAAQ,CAAC,EAAG,EAAG,IAChC,EAAA85I,MAAQ,EAAA55I,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACpC,OAXsC,iBAWtC,EAXA,CAAsC,EAAAG,mBActC,yE,OACC,EAAA0iC,cAAgBf,EAmBR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EA4B/B,OAhDsC,iBAE9B,EAAA5nB,KAAP,WACC,MAAO,aAMD,EAAAgC,sBAAP,WACC,MAAO,CAAC,0BAKT,YAAA8a,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAI3D,YAAAx/E,KAAA,SAAKC,GACJ,IAAM1a,EAAU0a,EAAe,GAAG1a,UAC5B6jB,EAAS1kB,KAAKo0H,gBAAgB1vG,OAAO1kB,KAAKyY,GAAG1b,EAAGiD,KAAKyY,GAAG9b,EAAGqD,KAAKyY,GAAG7c,EAAGoE,KAAKyY,GAAGmL,OAEpF,GAAsB,KAAlB5jB,KAAKyY,GAAG4jC,MACX,IAAmB,UAAAx7C,EAAA,eAAS,CAAvB,IAAItD,EAAM,KACVgE,OAAQ,EACwB,OAA/BA,EAAWhE,EAAOgE,WACtBA,EAAS+gF,WAAWtiF,KAAKyY,GAAGqgI,MAAMjrI,GAAI7N,KAAKyY,GAAGqgI,MAAMhrI,GAAI9N,KAAKyY,GAAGqgI,MAAM9qI,GACtEzM,EAAS6qB,YAAY1H,GACrBnjB,EAAS+gF,UAAUtiF,KAAKyY,GAAGqgI,MAAMjrI,EAAG7N,KAAKyY,GAAGqgI,MAAMhrI,EAAG9N,KAAKyY,GAAGqgI,MAAM9qI,IAEnEzQ,EAAO6uB,YAAY1H,QAMrB,IAFA,IAEkB,MAFC,EAAAziB,UAAUq3D,aAAaz4D,GAChBu7C,kBAAkBp8C,KAAKyY,GAAG4jC,OAClC,eAAQ,CAArB,IAAIpsC,EAAK,KACPR,EAAWQ,EAAMR,WAAWggB,IAAIzvB,KAAKyY,GAAGqgI,OAC9CrpI,EAASspI,aAAar0H,GACtBzU,EAAM0rD,aAAalsD,EAAS6P,IAAItf,KAAKyY,GAAGqgI,QAI1C94I,KAAKoB,YAAYP,IAEnB,EAhDA,CAAsC,EAAAiD,cAAzB,EAAAyhH,oB,yFC3Bb,QAEA,OACA,SACA,QAEMiP,EAAa,IAAI,EAAAjmH,QAAQ,EAAG,EAAG,GAErC,OAUMuyB,EAAe,IATrB,uE,OACC,EAAA4uB,OAAS,EAAAxwD,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KAC1C,EAAAs/D,OAAS,EAAAvjG,YAAYZ,MAAM,EAAG,CAAC6kC,MAAO,CAAC,EAAG,KAC1C,EAAA4rG,gBAAkB,EAAA7vI,YAAYV,QAAQ,GAAI,CAAC2kC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAChF,EAAA41G,gBAAkB,EAAA95I,YAAYV,QAAQ,EAAG,CAAC2kC,MAAO,CAAC,EAAG,IAAKC,aAAc,EAAC,GAAM,KAC/E,EAAA61G,IAAM,EAAA/5I,YAAYd,QAAQ,GAC1B,EAAAw7D,OAAS,EAAA16D,YAAYF,QAAQ,CAAC,EAAG,EAAG,IACpC,EAAAkjH,UAAY,EAAAhjH,YAAYF,QAAQ,CAAC,EAAG,EAAG,I,EACxC,OARkC,iBAQlC,EARA,CAAkC,EAAAG,mBAWlC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAszF,gBAAkB,IAAI,EAAA1uG,c,EAiB/B,OAvBiC,iBAEzB,EAAA5nB,KAAP,WACC,MAAO,QAKR,YAAAwd,KAAA,WACC,IAAM/Z,EAAW,IAAI,EAAA23I,uBACpBl5I,KAAKyY,GAAGi3C,OACR1vD,KAAKyY,GAAGi3C,OACR1vD,KAAKyY,GAAGgqF,OACRziG,KAAKyY,GAAGs2H,gBACR/uI,KAAKyY,GAAGugI,iBACPh5I,KAAKyY,GAAGwgI,KAGVj5I,KAAKo0H,gBAAgBtoG,gBAAgBvqB,EAAUizH,EAAYx0H,KAAKyY,GAAGypG,WACnE3gH,EAAS+gF,UAAUtiF,KAAKyY,GAAGmhD,OAAO/rD,EAAG7N,KAAKyY,GAAGmhD,OAAO9rD,EAAG9N,KAAKyY,GAAGmhD,OAAO5rD,GAEtEhO,KAAKsB,aAAaC,IAEpB,EAvBA,CAAiC,EAAAuC,cAApB,EAAA0hH,e,yFChBb,QAEA,SAMA,OACA,QACA,QAcM1kF,EAAe,IAZrB,uE,OACC,EAAAlkB,OAAS,EAAA1d,YAAYT,cAAc,uBAAwB,CAC1D89B,eAAgB,CACfC,QAAS,EAAA58B,YAAYkf,O,EAQxB,OAXuC,iBAWvC,EAXA,CAAuC,EAAA3f,mBAcvC,yE,OACC,EAAA0iC,cAAgBf,EAKR,EAAAq4G,mBAAuC,IAAI,EAAAC,iBAAiB,EAAKC,wBAAwBh8I,KAAK,I,EA8DvG,OApEsC,iBAE9B,EAAAS,KAAP,WACC,MAAO,cASR,YAAA8c,gBAAA,WACC5a,KAAKQ,GAAGiX,OAAOwM,UAAU,GACzBjkB,KAAKQ,GAAGiX,OAAOkiF,2BAA2B,CAAC,EAAA31F,eAAe82F,aAG3D,YAAAx/E,KAAA,SAAK8qH,GACJpmI,KAAKs5I,sBAAwBlT,EAAY,GAEzC,IAAMxsF,EAAc55C,KAAKvC,EAAEmf,OAAOihB,aACf,MAAf+b,GACH55C,KAAKu5I,eAAkB3/F,EAAsCr8C,OAC7DyC,KAAKm5I,mBAAmBK,WAAWx5I,KAAKu5I,kBAGxCv5I,KAAKu5I,oBAAiBlwI,EAEtBrJ,KAAKm5I,mBAAmBM,iBAGzBz5I,KAAKW,eAAeX,KAAKs5I,wBAG1B,YAAAD,wBAAA,SAAwBK,GAAxB,WAOC,GAAI15I,KAAKs5I,uBAAyBt5I,KAAKK,OAAQ,CAC9C,IAAMsP,EAAS3P,KAAKs5I,sBAAsB3pI,SACpC,EAAoB3P,KAAKK,OAA2B9C,OAAOo8I,YACjEhqI,EAAO/N,SAAQ,SAACqO,GACf,IAAMR,EAAWQ,EAAMR,WACjBmqI,EAAM,EAAKC,wBAAwBpqI,EAAU,GACnD,GAAImqI,EAAK,CACR,IAAM3rH,EAAK,CACVpgB,EAAG,GAAc,GAAT+rI,EAAI,GAAW,IACvB9rI,EAAY,GAAT8rI,EAAI,GAAW,IAEnB3pI,EAAMqsC,iBAxEK,KAwEqBruB,SAU5B,YAAA4rH,wBAAR,SAAgC3kD,EAAiB4kD,GAChD,GAAI95I,KAAKu5I,eAER,OADArkD,EAAO6jD,aAAae,GACb5kD,EAAO6kD,QAAQ/5I,KAAKu5I,gBAAgBjuH,WAG9C,EApEA,CAAsC,EAAAxnB,cAAzB,EAAA2hH,oB,6BC5Bb,IAAKjvD,E,iDAAL,SAAKA,GACJ,kBACA,oBAFD,CAAKA,MAAK,KAOV,iBAMC,WAAoBk4C,GAAA,KAAAA,YALZ,KAAAsrC,gBAA0B,EAG1B,KAAAC,iBAA2B,EAGlCj6I,KAAKk6I,UAAYl6I,KAAKm6I,kBAAkB98I,KAAK2C,MAqE/C,OAlEC,YAAAy5I,cAAA,WACCz5I,KAAKw5I,gBAAWnwI,IAEjB,YAAAmwI,WAAA,SAAW3/F,GACLA,GACJ75C,KAAKo6I,uBAGN,IAAMC,EAAar6I,KAAKs6I,QACxBt6I,KAAKs6I,QAAUzgG,EAEK,MAAhB75C,KAAKs6I,SACRt6I,KAAKm6I,qBAIY,MAAhBn6I,KAAKs6I,QAAkBt6I,KAAKs6I,QAAQ/uI,UAAOlC,MAC7B,MAAdgxI,EAAqBA,EAAW9uI,UAAOlC,IAExCrJ,KAAKu6I,qBAIP,YAAAC,kBAAA,SAAkBC,GACjBz6I,KAAKo6I,uBAELp6I,KAAKg6I,eAAiBS,EAEtBz6I,KAAKu6I,qBAGE,YAAAG,oBAAR,WACC,OAAI16I,KAAKg6I,eACDxjF,EAAMmkF,OAENnkF,EAAMokF,SAIP,YAAAL,kBAAR,WACKv6I,KAAKi6I,iBAIW,MAAhBj6I,KAAKs6I,UACRt6I,KAAKs6I,QAAQ/lF,iBAAiBv0D,KAAK06I,sBAAuB16I,KAAKk6I,WAC/Dl6I,KAAKi6I,iBAAkB,IAIjB,YAAAG,qBAAR,YAC8B,IAAzBp6I,KAAKi6I,iBAIW,MAAhBj6I,KAAKs6I,UACRt6I,KAAKs6I,QAAQrqF,oBAAoBjwD,KAAK06I,sBAAuB16I,KAAKk6I,WAClEl6I,KAAKi6I,iBAAkB,IAIjB,YAAAE,kBAAR,WACqB,MAAhBn6I,KAAKs6I,SACRt6I,KAAK0uG,UAAU1uG,KAAKs6I,UAGvB,EA5EA,GAAa,EAAAlB,oB,6nPCTb,SAGA,SAEA,aACC,WAAoB5rG,GAAA,KAAAA,QAkDrB,OAhDQ,EAAAqtG,UAAP,SAAiB7gJ,GAEhB,OADiB,IAAI8gJ,EAAkB9gJ,GACvBmJ,SAGX,YAAAA,MAAN,W,8HAkCC,OAjCMA,EAAQ,IAAI,EAAAykD,WACZ3oC,mBAAmBu9D,mBAGnB3uC,EAAa7tC,KAAKwtC,MAAkB,cAGzCrqC,EAAMikD,UAAUvZ,EAAkB,OAAK,GACjCE,EAAcF,EAAwB,aAAK,GACjD1qC,EAAM8qC,gBAAgBoxD,gBAAgBtxD,EAAY,IAAM,EAAGA,EAAY,IAAM,MACvEC,EAAqBH,EAA+B,qBAEzD1qC,EAAM8qC,gBAAgBwxD,uBAAuBzxD,EAAmB,GAAIA,EAAmB,IAExF7qC,EAAM8qC,gBAAgB2xD,QAAQ/xD,EAAgB,KAAK,IAC/CA,EAAoC,yBACvC1qC,EAAMirC,mBAAmB4pB,4BAA4BnqB,EAAoC,0BAO3F1qC,EAAMwxB,OAAOC,QAEPmmH,EAAW,EAAApxE,qBAAqB98B,cAAc1pC,EAAMgY,MACtDnb,KAAKwtC,MAAY,MACpButG,EAAS7mG,aAAal0C,KAAKwtC,MAAY,MAEpCxtC,KAAKwtC,MAAU,IAClButG,EAASC,gBAAgBh7I,KAAKwtC,MAAU,IAGzC,GAAMrqC,EAAM8b,mBAAmBy9D,kB,OAO/B,OAPA,SACAv5E,EAAMwxB,OAAOG,UAMN,CAAP,EAAO3xB,WAET,EAnDA,GAAa,EAAA23I,qB,yFCJb,2BACA,4BACA,4BACA,2BACA,2BAIA,OACA,SAGA,aACC,WAAsBx4H,GAAA,KAAAA,QAiOvB,OA/NC,YAAA4xB,aAAA,SAAal6C,GAKZ,GAJAgG,KAAKi7I,aAAajhJ,EAAY,OAC9BgG,KAAKk7I,cAAclhJ,EAAgB,WAG/BgG,KAAKsiB,MAAM9hB,GAAGiX,OAAOmjF,kCAAmC,CAC3D,IAAMsZ,EAAWl6G,EAA8B,wBAC3Ck6G,GACHl0G,KAAKsiB,MAAM9hB,GAAGiX,OAAO4jF,4BAA4B6Y,GAInDl0G,KAAKm7I,UAAUnhJ,GACfgG,KAAKo7I,WAAWphJ,EAAa,QAE7BgG,KAAKq7I,iBAAiBrhJ,GAEtBgG,KAAKsiB,MAAMs4B,UAAU+rC,0BAEtB,YAAA20D,oBAAA,SAAoBthJ,GACnBgG,KAAKu7I,WAAWvhJ,EAAa,SAG9B,YAAAghJ,gBAAA,SAAgBhhJ,GACf,GAAKA,EAAL,CAGA,IAAMw9B,EAAUx3B,KAAKsiB,MAAMkV,QACrB6tE,EAAMrrG,EAAU,IACtB,GAAIqrG,EAAK,CACR,IAAMnQ,GAAS,IAAI,EAAApkE,SAAUivB,UAAUslD,GACvC7tE,EAAQmkC,aAAau5B,GAEtB,IAAMlT,EAAUhoF,EAAc,QAC1BgoF,GACHxqD,EAAQuqD,YAAYC,GAErBhiF,KAAKw7I,sBAAsBxhJ,EAAY,SAGxC,YAAAihJ,aAAA,SAAajhJ,GACZ,GAAKA,EAAL,CAMA,IAFA,IACM0wD,EAAwB,GACR,MAFHjwD,OAAO6R,KAAKtS,GAET,eAAY,CAA7B,IAAIyhJ,EAAS,KAEX5/D,EADY7hF,EAAKyhJ,GACW,KAClC,GAAIz7I,KAAKsiB,MAAMlJ,oBAAsBpZ,KAAKsiB,MAAMzG,qBACzCrY,EAAOxD,KAAKsiB,MAAM1G,YAAYigE,MAEnCr4E,EAAK+Q,SAASknI,GACd/wF,EAAM5vD,KAAK0I,IAMd,IAFA,IAAMk4I,EAAY,GACdv5I,EAAQ,EACK,MAAAuoD,EAAA,eAAO,CAAnB,IAAIlnD,EAAI,KACNu3I,EAAW,EAAApxE,qBAAqB98B,cAAcrpC,GACpDk4I,EAAU5gJ,KAAKigJ,GACfA,EAAS7mG,aAAal6C,EAAKwJ,EAAKnH,OAChC8F,IAEDA,EAAQ,EACR,IAAiB,UAAAuoD,EAAA,eAAO,CAAflnD,EAAI,MACNu3I,EAAWW,EAAUv5I,IAClBm5I,oBAAoBthJ,EAAKwJ,EAAKnH,OACvC8F,OAGF,YAAA+4I,cAAA,SAAclhJ,GAAd,WACC,GAAIgG,KAAKsiB,MAAMlJ,oBAAsBpZ,KAAKsiB,MAAMzG,qBAC3C7hB,GAAQA,EAAKQ,OAAS,EAAG,CAC5B,IAAM,EAAiC,GACvCR,EAAK4H,SAAQ,SAAC65I,GACb,IAAMj4I,EAAO,EAAK8e,MAAM9e,KAAKi4I,GACzBj4I,GACH,EAAe1I,KAAK0I,MAGtBxD,KAAKsiB,MAAMzG,oBAAoB2sC,UAAUtoD,IAAI,KAKhD,YAAAi7I,UAAA,SAAUnhJ,G,YACHyF,EAAQzF,EAAY,MAC1B,GAAIyF,EAAO,CACV,IAAMspB,EAAStpB,EAAc,OACf,MAAVspB,IACqB,QAAxB,EAAgB,QAAhB,EAAA/oB,KAAKsiB,MAAM7iB,aAAK,eAAEspB,cAAM,SAAE7oB,IAAI6oB,IAE/B,IAAM9oB,EAAUR,EAAe,QAChB,MAAXQ,IACsB,QAAzB,EAAgB,QAAhB,EAAAD,KAAKsiB,MAAM7iB,aAAK,eAAEQ,eAAO,SAAEC,IAAID,MAKlC,YAAAs7I,WAAA,SAAWxnC,GAAX,WACMA,GAILA,EAAYnyG,SAAQ,SAAC+5I,EAAYrhJ,GAChC,GAAIqhJ,GAAc,EAAKr5H,MAAMjiB,OAC5B,GAAI,UAAgBs7I,GAAa,CAChC,IAAMC,EAAkBD,EAClBjrH,EAAa,EAAKpO,MAAMjiB,OAAOmD,KAAKo4I,GAC1C,EAAKt5H,MAAMrG,UAAU3hB,EAAGo2B,OAClB,CACAA,EAAa,EAAKpO,MAAMjiB,OAAOmD,KAAKm4I,EAAiB,MAA3D,IACMv0G,EAAau0G,EAAiB,KAChC,EAAKr5H,MAAM9hB,GAAGiX,OAAOijF,gBAAgBtzD,GACxC,EAAK9kB,MAAMrG,UAAU0/H,EAAiB,KAAGjrH,EAAYirH,EAAmB,QAExEv4I,QAAQmT,KAAQ,EAAK+L,MAAMpL,YAAW,uBAAuBkwB,QAOlE,YAAAo0G,sBAAA,SAAsBxhJ,GAAtB,WACMA,GAIcS,OAAO6R,KAAKtS,GACpB4H,SAAQ,SAAC65I,GACnB,IAAMj4I,EAAO,EAAK8e,MAAM9e,KAAKi4I,GAC7B,GAAIj4I,EAAM,CACT,IAAMq4I,EAAY7hJ,EAAKyhJ,GACvB,EAAA9xE,qBAAqB98B,cAAcrpC,GAAMw3I,gBAAgBa,QAM5D,YAAAT,WAAA,SAAWphJ,GACV,GAAKA,EAAL,CAKA,IAFA,IAEuB,MAFHS,OAAO6R,KAAKtS,GAET,eAAa,CAA/B,IAAI0sB,EAAU,KACZo1H,EAAa9hJ,EAAK0sB,GACpB1mB,KAAK+7I,uBAAuBD,GAC/B97I,KAAKg8I,4BAA4Bt1H,EAAYo1H,GAE7C97I,KAAKi8I,2BAA2Bv1H,EAAYo1H,GAM9C97I,KAAKsiB,MAAMG,OAAOwsE,4BAGX,YAAAgtD,2BAAR,SAAmCv1H,EAAoBo1H,G,MACrB,QAAjC,EAAA97I,KAAKsiB,MAAMG,OAAO/lB,IAAIgqB,UAAW,SAAExmB,IAAI47I,IAGhC,YAAAE,4BAAR,SAAoCt1H,EAAoBo1H,GACvD,IAIIzlI,EAJE2sB,EAAYhjC,KAAKsiB,MAAMG,OAAOugB,UAAUtc,GACxCqT,EAAa+hH,EAAiB,KAEhCI,GAA0B,EAS9B,GAPIl5G,KACH3sB,EAAQrW,KAAKsiB,MAAMG,OAAO/lB,IAAIgqB,KAEhBrQ,EAAMvY,MAAQi8B,GAA6B,MAAdA,KAC1CmiH,GAA0B,GAGxBA,GACH7lI,EAAQrW,KAAKsiB,MAAMG,OAAO/lB,IAAIgqB,KAE7B,EAAAijD,qBAAqB58B,eAAe12B,GAAO69B,aAAa4nG,OAGnD,CACN,IAAM99I,EAAU89I,EAAoB,QACpC,GAAI99I,GAAW+7B,GACwB,IAArB/7B,EAAe,OAChB89I,EAA0B,gBACrC94G,GACHhjC,KAAKsiB,MAAMG,OAAOkX,aAAajT,IAEhCrQ,EAAQrW,KAAKsiB,MAAMjH,UAAU0e,EAAYrT,EAAYo1H,EAA0B,cAAG99I,KAEjF,EAAA2rE,qBAAqB58B,eAAe12B,GAAO69B,aAAa4nG,MAOrD,YAAAC,uBAAR,SAA+BD,GAE9B,QACC,UAAgBA,IAChB,UAAgBA,IAChB,UAAeA,IACf,UAAiBA,QAKd,UAAgBA,KACfrhJ,OAAO6R,KAAKwvI,GAAY7iH,SAAS,UAQvC,YAAAoiH,iBAAA,SAAiBrhJ,KAClB,EAlOA,GAAa,EAAAuvE,oB,yFCRb,2B,+CAgBA,OAhB+C,iBAC9C,YAAA/tC,SAAA,SAASxhC,KAeV,EAhBA,CALA,OAK+Cm6C,mBAAlC,EAAAq1B,6B,yFCJb,SAKM2yE,EAAoB,QAE1B,2B,+CAUA,OAV6C,iBAC5C,YAAA3gH,SAAA,SAASxhC,GACR,IAAIsnB,EAAYtnB,EAAgB,eACdqP,IAAdiY,IAEHA,EAAYA,EAAUnZ,QAAQg0I,EAAmB,MACjDn8I,KAAK86B,OAAO56B,IAAIohB,KAInB,EAVA,CAA6C,EAAA6yB,mBAAhC,EAAAs1B,2B,yFCFb,2B,+CAQA,OAR2C,iBAC1C,YAAAjuC,SAAA,SAASxhC,GACR,IAAMsnB,EAAYtnB,EAAgB,UAC9BsnB,GAEHthB,KAAK86B,OAAO56B,IAAIohB,IAGnB,EARA,CANA,OAM2C6yB,mBAA9B,EAAAu1B,yB,sGCET0yE,EAAa,CAEhBpnG,SAAU,CAET,SAAY,CAAEl4C,MAAO,MACrB,QAAW,CAAEA,MAAO,IAIrByuE,aAAc,CAEb,oBAEA,gBAEA,cACA,8EAEA,KAEC1hE,KAAM,MAER2hE,eAAgB,CAEf,yBAEA,8BAEA,oBAEA,gBAEA,6CACA,oCAEA,KAEC3hE,KAAM,O,wBCrCLwyI,EAAa,SAAWC,EAAQC,GAEnCz/H,EAAA,EAAKliB,KAAMoF,MAEXA,KAAKu8I,eAA4BlzI,IAAdkzI,EAA4BA,EAAY,WAEtDD,aAAkBrsC,EAAA,gBAEtBjwG,KAAKg1C,SAAWsnG,EAAOtnG,SAEvBh1C,KAAKkD,SAAWo5I,GAELA,IAEXt8I,KAAKg1C,SAAWo3B,EAAA,cAActpE,MAAOw5I,EAAOtnG,UAE5Ch1C,KAAKkD,SAAW,IAAI+sG,EAAA,eAAgB,CAEnCsD,QAAS94G,OAAO0iB,OAAQ,GAAIm/H,EAAO/oC,SACnCv+D,SAAUh1C,KAAKg1C,SACfu2B,aAAc+wE,EAAO/wE,aACrBC,eAAgB8wE,EAAO9wE,kBAMzBxrE,KAAKw8I,OAAS,IAAI1/H,EAAA,EAAKD,eAAgB7c,KAAKkD,WAI7Cm5I,EAAW3hJ,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ2f,EAAA,EAAKpiB,WAAa,CAEtE0U,YAAaitI,EAEbh/H,OAAQ,SAAWI,EAAU++F,EAAaC,GAEpCz8G,KAAKg1C,SAAUh1C,KAAKu8I,aAExBv8I,KAAKg1C,SAAUh1C,KAAKu8I,WAAYz/I,MAAQ2/G,EAAWjqF,SAIpDxyB,KAAKw8I,OAAOt5I,SAAWlD,KAAKkD,SAEvBlD,KAAKkd,gBAETO,EAASw/F,gBAAiB,MAC1Bj9G,KAAKw8I,OAAOn/H,OAAQI,KAIpBA,EAASw/F,gBAAiBT,GAErBx8G,KAAKid,OAAQQ,EAASR,MAAOQ,EAASy/F,eAAgBz/F,EAAS0/F,eAAgB1/F,EAAS2/F,kBAC7Fp9G,KAAKw8I,OAAOn/H,OAAQI,OCxDvB,IAAIg/H,EAAW,SAAWt5I,EAAOyZ,GAEhCE,EAAA,EAAKliB,KAAMoF,MAEXA,KAAKmD,MAAQA,EACbnD,KAAK4c,OAASA,EAEd5c,KAAKid,OAAQ,EACbjd,KAAKgd,WAAY,EAEjBhd,KAAKovD,SAAU,GAIhBqtF,EAAS/hJ,UAAYD,OAAO0iB,OAAQ1iB,OAAO0C,OAAQ2f,EAAA,EAAKpiB,WAAa,CAEpE0U,YAAaqtI,EAEbp/H,OAAQ,SAAWI,EAAU++F,EAAaC,GAEzC,IAeIigC,EAAYC,EAfZngH,EAAU/e,EAAS09D,aACnBn8D,EAAQvB,EAASuB,MAIrBA,EAAM+oD,QAAQnjE,MAAMg4I,SAAS,GAC7B59H,EAAM+oD,QAAQ4I,MAAMisE,SAAS,GAI7B59H,EAAM+oD,QAAQnjE,MAAMi4I,WAAW,GAC/B79H,EAAM+oD,QAAQ4I,MAAMksE,WAAW,GAM1B78I,KAAKovD,SAETstF,EAAa,EACbC,EAAa,IAIbD,EAAa,EACbC,EAAa,GAId39H,EAAM+oD,QAAQ+0E,QAAQC,SAAS,GAC/B/9H,EAAM+oD,QAAQ+0E,QAAQE,MAAOxgH,EAAQygH,QAASzgH,EAAQygH,QAASzgH,EAAQygH,SACvEj+H,EAAM+oD,QAAQ+0E,QAAQI,QAAS1gH,EAAQy+D,OAAQyhD,EAAY,YAC3D19H,EAAM+oD,QAAQ+0E,QAAQK,SAAUR,GAChC39H,EAAM+oD,QAAQ+0E,QAAQD,WAAW,GAIjCp/H,EAASw/F,gBAAiBR,GACrBz8G,KAAKid,OAAQQ,EAASR,QAC3BQ,EAASJ,OAAQrd,KAAKmD,MAAOnD,KAAK4c,QAElCa,EAASw/F,gBAAiBT,GACrBx8G,KAAKid,OAAQQ,EAASR,QAC3BQ,EAASJ,OAAQrd,KAAKmD,MAAOnD,KAAK4c,QAIlCoC,EAAM+oD,QAAQnjE,MAAMi4I,WAAW,GAC/B79H,EAAM+oD,QAAQ4I,MAAMksE,WAAW,GAI/B79H,EAAM+oD,QAAQ+0E,QAAQD,WAAW,GACjC79H,EAAM+oD,QAAQ+0E,QAAQI,QAAS1gH,EAAQ4gH,MAAO,EAAG,YACjDp+H,EAAM+oD,QAAQ+0E,QAAQE,MAAOxgH,EAAQ6gH,KAAM7gH,EAAQ6gH,KAAM7gH,EAAQ6gH,MACjEr+H,EAAM+oD,QAAQ+0E,QAAQD,WAAW,MAOnC,IAAIS,EAAgB,WAEnBxgI,EAAA,EAAKliB,KAAMoF,MAEXA,KAAKgd,WAAY,GAIlBsgI,EAAc5iJ,UAAYD,OAAO0C,OAAQ2f,EAAA,EAAKpiB,WAE9CD,OAAO0iB,OAAQmgI,EAAc5iJ,UAAW,CAEvC2iB,OAAQ,SAAWI,GAElBA,EAASuB,MAAM+oD,QAAQ+0E,QAAQD,WAAW,GAC1Cp/H,EAASuB,MAAM+oD,QAAQ+0E,QAAQC,SAAS,MCxG1C,oFAiBA,IAAIhqG,EAAiB,SAAWt1B,EAAU8/H,GAIzC,GAFAv9I,KAAKyd,SAAWA,OAEMpU,IAAjBk0I,EAA6B,CAEjC,IAAItI,EAAa,CAChBr0G,UAAW,eACXC,UAAW,eACXimE,OAAQ,aACR02C,eAAe,GAGZh4I,EAAOiY,EAASq8C,QAAS,IAAIhpC,EAAA,SACjC9wB,KAAKy9I,YAAchgI,EAASigI,gBAC5B19I,KAAKwhF,OAASh8E,EAAK8sB,MACnBtyB,KAAK29I,QAAUn4I,EAAKi9F,QAEpB86C,EAAe,IAAIK,EAAA,EAAmB59I,KAAKwhF,OAASxhF,KAAKy9I,YAAaz9I,KAAK29I,QAAU39I,KAAKy9I,YAAaxI,IAC1FziH,QAAQn2B,KAAO,0BAI5B2D,KAAKy9I,YAAc,EACnBz9I,KAAKwhF,OAAS+7D,EAAajrH,MAC3BtyB,KAAK29I,QAAUJ,EAAa96C,OAI7BziG,KAAK69I,cAAgBN,EACrBv9I,KAAK89I,cAAgBP,EAAaz6I,QAClC9C,KAAK89I,cAActrH,QAAQn2B,KAAO,qBAElC2D,KAAKw8G,YAAcx8G,KAAK69I,cACxB79I,KAAKy8G,WAAaz8G,KAAK89I,cAEvB99I,KAAKkd,gBAAiB,EAEtBld,KAAK6zC,OAAS,QAIMxqC,IAAf+yI,GAEJh5I,QAAQka,MAAO,kDAIIjU,IAAfgzI,GAEJj5I,QAAQka,MAAO,6CAIhBtd,KAAK+9I,SAAW,IAAI1B,EAAYD,GAEhCp8I,KAAKg+I,MAAQ,IAAIC,EAAA,GAIlBxjJ,OAAO0iB,OAAQ41B,EAAer4C,UAAW,CAExCwjJ,YAAa,WAEZ,IAAIv+F,EAAM3/C,KAAKy8G,WACfz8G,KAAKy8G,WAAaz8G,KAAKw8G,YACvBx8G,KAAKw8G,YAAc78D,GAIpBjM,QAAS,SAAWyqG,GAEnBn+I,KAAK6zC,OAAO/4C,KAAMqjJ,GAClBA,EAAK/gI,QAASpd,KAAKwhF,OAASxhF,KAAKy9I,YAAaz9I,KAAK29I,QAAU39I,KAAKy9I,cAInEW,WAAY,SAAWD,EAAMh8I,GAE5BnC,KAAK6zC,OAAOn4C,OAAQyG,EAAO,EAAGg8I,IAI/BE,kBAAmB,SAAWC,GAE7B,IAAM,IAAIhkJ,EAAIgkJ,EAAY,EAAGhkJ,EAAI0F,KAAK6zC,OAAOr5C,OAAQF,IAEpD,GAAK0F,KAAK6zC,OAAQv5C,GAAIyiB,QAErB,OAAO,EAMT,OAAO,GAIRM,OAAQ,SAAWkhI,QAICl1I,IAAdk1I,IAEJA,EAAYv+I,KAAKg+I,MAAMQ,YAIxB,IAIIL,EAAM7jJ,EAJNmkJ,EAAsBz+I,KAAKyd,SAASihI,kBAEpCC,GAAa,EAEJn/F,EAAKx/C,KAAK6zC,OAAOr5C,OAE9B,IAAMF,EAAI,EAAGA,EAAIklD,EAAIllD,IAIpB,IAAsB,KAFtB6jJ,EAAOn+I,KAAK6zC,OAAQv5C,IAEVyiB,QAAV,CAKA,GAHAohI,EAAKjhI,eAAmBld,KAAKkd,gBAAkBld,KAAKq+I,kBAAmB/jJ,GACvE6jJ,EAAK9gI,OAAQrd,KAAKyd,SAAUzd,KAAKw8G,YAAax8G,KAAKy8G,WAAY8hC,EAAWI,GAErER,EAAKnhI,UAAY,CAErB,GAAK2hI,EAAa,CAEjB,IAAIniH,EAAUx8B,KAAKyd,SAAS09D,aACxB2hE,EAAU98I,KAAKyd,SAASuB,MAAM+oD,QAAQ+0E,QAG1CA,EAAQI,QAAS1gH,EAAQoiH,SAAU,EAAG,YAEtC5+I,KAAK+9I,SAAS1gI,OAAQrd,KAAKyd,SAAUzd,KAAKw8G,YAAax8G,KAAKy8G,WAAY8hC,GAGxEzB,EAAQI,QAAS1gH,EAAQ4gH,MAAO,EAAG,YAIpCp9I,KAAKk+I,mBAIY70I,IAAbozI,IAEC0B,aAAgB1B,EAEpBkC,GAAa,EAEFR,aAAgBb,IAE3BqB,GAAa,IAQhB3+I,KAAKyd,SAASw/F,gBAAiBwhC,IAIhC5lH,MAAO,SAAW0kH,GAEjB,QAAsBl0I,IAAjBk0I,EAA6B,CAEjC,IAAI/3I,EAAOxF,KAAKyd,SAASq8C,QAAS,IAAIhpC,EAAA,SACtC9wB,KAAKy9I,YAAcz9I,KAAKyd,SAASigI,gBACjC19I,KAAKwhF,OAASh8E,EAAK8sB,MACnBtyB,KAAK29I,QAAUn4I,EAAKi9F,QAEpB86C,EAAev9I,KAAK69I,cAAc/6I,SACrBsa,QAASpd,KAAKwhF,OAASxhF,KAAKy9I,YAAaz9I,KAAK29I,QAAU39I,KAAKy9I,aAI3Ez9I,KAAK69I,cAAcrgI,UACnBxd,KAAK89I,cAActgI,UACnBxd,KAAK69I,cAAgBN,EACrBv9I,KAAK89I,cAAgBP,EAAaz6I,QAElC9C,KAAKw8G,YAAcx8G,KAAK69I,cACxB79I,KAAKy8G,WAAaz8G,KAAK89I,eAIxB1gI,QAAS,SAAWkV,EAAOmwE,GAE1BziG,KAAKwhF,OAASlvD,EACdtyB,KAAK29I,QAAUl7C,EAEf,IAAIo8C,EAAiB7+I,KAAKwhF,OAASxhF,KAAKy9I,YACpCqB,EAAkB9+I,KAAK29I,QAAU39I,KAAKy9I,YAE1Cz9I,KAAK69I,cAAczgI,QAASyhI,EAAgBC,GAC5C9+I,KAAK89I,cAAc1gI,QAASyhI,EAAgBC,GAE5C,IAAM,IAAIxkJ,EAAI,EAAGA,EAAI0F,KAAK6zC,OAAOr5C,OAAQF,IAExC0F,KAAK6zC,OAAQv5C,GAAI8iB,QAASyhI,EAAgBC,IAM5CpsG,cAAe,SAAWqsG,GAEzB/+I,KAAKy9I,YAAcsB,EAEnB/+I,KAAKod,QAASpd,KAAKwhF,OAAQxhF,KAAK29I,YAOlC,IA+BK/gI,EACArb,EAEAsb,EAlCD,EAAO,WAGV7c,KAAK+c,SAAU,EAGf/c,KAAKgd,WAAY,EAGjBhd,KAAKid,OAAQ,EAGbjd,KAAKkd,gBAAiB,GAIvBziB,OAAO0iB,OAAQ,EAAKziB,UAAW,CAE9B0iB,QAAS,aAETC,OAAQ,WAEPja,QAAQka,MAAO,iEAOjB,EAAKT,gBAEAD,EAAS,IAAIs+F,EAAA,oBAAsB,EAAG,EAAG,GAAK,EAAG,EAAG,GACpD35G,EAAW,IAAI,sBAAqB,EAAG,GAEvCsb,EAAiB,SAAW3Z,GAE/BlD,KAAKud,MAAQ,IAAIhX,EAAA,KAAMhF,EAAU2B,IAIlCzI,OAAO+B,eAAgBqgB,EAAeniB,UAAW,WAAY,CAE5DgC,IAAK,WAEJ,OAAOsD,KAAKud,MAAMra,UAInBhD,IAAK,SAAWpD,GAEfkD,KAAKud,MAAMra,SAAWpG,KAMxBrC,OAAO0iB,OAAQN,EAAeniB,UAAW,CAExC8iB,QAAS,WAERxd,KAAKud,MAAMhc,SAASic,WAIrBH,OAAQ,SAAWI,GAElBA,EAASJ,OAAQrd,KAAKud,MAAOX,MAMxBC,I,mQCpTR,SACA,OAEA,aACA,4BACA,SAEA,2BAgCA,OA/Bc,EAAAmiI,WAAb,W,gHACe,SAAM,EAAAlE,kBAAkBD,UAAU,EAAA7yG,U,OAEhD,MAAO,CAAP,EAFc,kBAIR,EAAAi3G,aAAP,WACC,IAAM97I,EAAQ,IAAI,EAAAykD,UAClBzkD,EAAMgY,KAAKS,YAAY,iBAEvBzY,EAAM8b,mBAAmBy9D,iBAEzB,IAAMwiE,EAAsB/7I,EAAMgY,KAAKS,YAAY,sBACnDzY,EAAMirC,mBAAmB4pB,4BAA4BknF,EAAoBhoI,aACzEgoI,EAAoBzhJ,EAAEV,EAAEiR,EAAE9N,IAAI,IAE9B,IAAMi/I,EAAOh8I,EAAMgY,KAAKS,YAAY,OAMpC,OALAujI,EAAK1/I,MAAMQ,QAAQC,KAAI,GACVi/I,EAAKvjI,YAAY,OACzBnc,MAAMQ,QAAQC,KAAI,GACvBi/I,EAAK1hJ,EAAEd,EAAEmR,EAAE5N,IAAI,SAERiD,GAGK,EAAAi8I,mBAAb,SAAgCj8I,G,0HAGhB,OAFTnJ,EAAO,IAAI,EAAAu0C,kBAAkBprC,GAAOnJ,OAC1CoJ,QAAQC,IAAIy4B,KAAKC,UAAU/hC,IACZ,GAAM,EAAA8gJ,kBAAkBD,UAAU7gJ,I,cAA3CqlJ,EAAS,SACTC,EAAQ,IAAI,EAAA/wG,kBAAkB8wG,GAAQrlJ,OAC5CoJ,QAAQC,IAAIy4B,KAAKC,UAAUujH,I,YAE7B,EAhCA,GAAa,EAAAC,SAkCb,IAAMC,EAAa3yF,SAASo3C,cAAc,SAC1Cu7C,EAAWC,UAAY,8FACvB5yF,SAASlV,KAAK2sD,YAAYk7C,GAC1B,IAAMz9I,EAAY8qD,SAASo3C,cAAc,OACzCliG,EAAU67G,UAAUt+F,IAAI,oBACxButC,SAASlV,KAAK2sD,YAAYviG,GAE1Bw9I,EAAOP,aAAa5uH,MAAK,SAACjtB,G,MACxBxF,OAAewF,MAAQA,EACmB,QAA3C,EAAAA,EAAMirC,mBAAmB0wE,0BAAkB,SAAE3mD,cAAcp2D,GAC3DoB,EAAMkkD","file":"polygonjs-engine.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t10: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([1030,7,6,5,0,3,2,4,1,8]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// import {BaseNode} from 'src/engine/nodes/_Base';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamOptions} from 'src/engine/params/utils/OptionsController';\nimport {RampParam} from 'src/engine/params/Ramp';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamOptionsByTypeMap} from '../../../params/types/ParamOptionsByTypeMap';\n\n// function _ParamCheckNameConsistency<T extends BaseNode>(name: string, target: T, key: keyof T, type: ParamType) {\n// \tconst key_s = key as string;\n// \tif (key_s != `_param_${name}`) {\n// \t\tconsole.warn('param name inconsistent');\n// \t}\n// \tconst param = target.params.get(name);\n// \tif (param && param.type != type) {\n// \t\tconsole.warn('param type inconsistent');\n// \t}\n// }\n// export const _ParamBoolean = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.BOOLEAN);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.boolean(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.float(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamFloat = function ParamF(default_value: number, options?: ParamOptions) {\n// \treturn <T extends NodeParamsConfig>(target: T, key: string) => {\n// \t\t// _ParamCheckNameConsistency(name, target, key, ParamType.FLOAT);\n// \t\t// const config = new ParamConfig(ParamType.FLOAT, default_value, options);\n// \t\t// target.add_config(key, config);\n// \t\t// target.set_default_value(key, default_value);\n// \t\t// target.set_options(key, options);\n// \t\t// Object.defineProperty(target.options, key, {\n// \t\t// \tget: () => target.params.float(name),\n// \t\t// });\n// \t};\n// };\n// export const _ParamString = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.STRING);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.string(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector2 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR2);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector2(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamVector3 = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.VECTOR3);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.vector3(name),\n// \t\t});\n// \t};\n// };\n// export const _ParamColor = function ParamF(name: string) {\n// \treturn <T extends BaseNode>(target: T, key: keyof T) => {\n// \t\t_ParamCheckNameConsistency(name, target, key, ParamType.COLOR);\n// \t\tObject.defineProperty(target, key, {\n// \t\t\tget: () => target.params.color(name),\n// \t\t});\n// \t};\n// };\n// declare global {\n// \tconst ParamB: typeof _ParamBoolean;\n// \tconst ParamF: typeof _ParamFloat;\n// \tconst ParamS: typeof _ParamString;\n// \tconst ParamV2: typeof _ParamVector2;\n// \tconst ParamV3: typeof _ParamVector3;\n// \tconst ParamC: typeof _ParamColor;\n// }\n// class ParamConfig<T extends ParamType> {\n// \tconstructor(readonly type: T, readonly default_value: ParamValuesTypeMap[T], readonly options: ParamOptions = {}) {}\n// }\nexport class ParamTemplate<T extends ParamType> {\n\treadonly value_type!: ParamValuesTypeMap[T];\n\treadonly param_class!: ParamConstructorMap[T];\n\t// readonly options?: ParamOptions;\n\n\tconstructor(public type: T, public init_value: ParamInitValuesTypeMap[T], public options?: ParamOptions) {}\n}\n\n// class Test1 {\n// \ta: number\n// \tb: string\n// }\n// type test = Extract<typeof Test1, string>;\n// type test2 = Pick<typeof Test1, 'b'>;\n// type test3 = Test1['b'];\n// type test2 = keyof BoxSopParamConfig;\nexport class ParamConfig {\n\t// static _GENERIC<T extends ParamType> (type: T, init_value: ParamInitValuesTypeMap[T], options?: ParamOptions) {\n\t// \treturn new ParamTemplate<T>(type, init_value, options);\n\t// }\n\t// static BUTTON(init_value: ParamInitValuesTypeMap[ParamType.BUTTON], options?: ParamOptions) {\n\t// \treturn this._GENERIC<ParamType.BUTTON>(ParamType.BUTTON, init_value, options)\n\t// }\n\tstatic BUTTON(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BUTTON>(ParamType.BUTTON, init_value, options);\n\t}\n\tstatic BOOLEAN(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn new ParamTemplate<ParamType.BOOLEAN>(ParamType.BOOLEAN, init_value, options);\n\t}\n\tstatic COLOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.COLOR],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.COLOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.COLOR>(ParamType.COLOR, init_value, options);\n\t}\n\tstatic FLOAT(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FLOAT>(ParamType.FLOAT, init_value, options);\n\t}\n\tstatic FOLDER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.FOLDER] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.FOLDER>(ParamType.FOLDER, init_value, options);\n\t}\n\tstatic INTEGER(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn new ParamTemplate<ParamType.INTEGER>(ParamType.INTEGER, init_value, options);\n\t}\n\tstatic OPERATOR_PATH(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn new ParamTemplate<ParamType.OPERATOR_PATH>(ParamType.OPERATOR_PATH, init_value, options);\n\t}\n\tstatic RAMP(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.RAMP] = RampParam.DEFAULT_VALUE,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.RAMP]\n\t) {\n\t\treturn new ParamTemplate<ParamType.RAMP>(ParamType.RAMP, init_value, options);\n\t}\n\tstatic SEPARATOR(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.SEPARATOR] = null,\n\t\toptions?: ParamOptionsByTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn new ParamTemplate<ParamType.SEPARATOR>(ParamType.SEPARATOR, init_value, options);\n\t}\n\tstatic STRING(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.STRING] = '',\n\t\toptions?: ParamOptionsByTypeMap[ParamType.STRING]\n\t) {\n\t\treturn new ParamTemplate<ParamType.STRING>(ParamType.STRING, init_value, options);\n\t}\n\tstatic VECTOR2(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR2]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR2>(ParamType.VECTOR2, init_value, options);\n\t}\n\tstatic VECTOR3(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR3]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR3>(ParamType.VECTOR3, init_value, options);\n\t}\n\tstatic VECTOR4(\n\t\tinit_value: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\toptions?: ParamOptionsByTypeMap[ParamType.VECTOR4]\n\t) {\n\t\treturn new ParamTemplate<ParamType.VECTOR4>(ParamType.VECTOR4, init_value, options);\n\t}\n}\n\nexport class NodeParamsConfig implements Dictionary<ParamTemplate<ParamType>> {\n\t[name: string]: ParamTemplate<ParamType>;\n}\n// export class NodeParamsConfig {}\n\n// interface ParamConfig {\n// \ttype: ParamType;\n// \tvalue: any;\n// \toptions?: ParamOptions;\n// }\n// export type ParamConfigsArray = ParamConfig[];\n\n// declare global {\n// \tinterface Window {\n// \t\tParamB: typeof _ParamB;\n// \t\tParamC: typeof _ParamC;\n// \t}\n// }\n// window.ParamC = _ParamC;\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\n// import {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// import lodash_includes from 'lodash/includes';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport {TypedNode} from '../_Base';\nimport {CoreConstant} from 'src/core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from 'src/core/geometry/Group';\nimport {CoreMaterial} from 'src/core/geometry/Material';\nimport {ObjectType} from 'src/core/geometry/Constant';\n\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerDB} from '../utils/FlagsController';\n// import * as Container from '../../Container/Geometry';\n\n// import {AttribTypeParam} from './concerns/AttribTypeParam';\n// import {Bypass} from './Concerns/Bypass';\n// import {GroupParam} from './concerns/GroupParam';\n// import {Named} from './concerns/Named'; // TODO; typescript\n// import {ObjectTypeParam} from './concerns/ObjectTypeParam';\n\n// TODO: do I really need to add attributes in objects?\n// TODO: after setting a node dirty, it should clear its object\n\n// import {RequestContainerGeometryCallback} from 'src/Engine/Container/Geometry'\n// const CONTAINER_CLASS = 'Geometry';\n\nenum MESSAGE {\n\tFROM_SET_CORE_GROUP = 'from set_core_group',\n\tFROM_SET_GROUP = 'from set_group',\n\tFROM_SET_OBJECTS = 'from set_objects',\n\tFROM_SET_OBJECT = 'from set_object',\n\tFROM_SET_GEOMETRIES = 'from set_geometries',\n\tFROM_SET_GEOMETRY = 'from set_geometry',\n}\n\nconst INPUT_GEOMETRY_NAME = 'input geometry';\nconst DEFAULT_INPUT_NAMES = [INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME, INPUT_GEOMETRY_NAME];\n\nexport class TypedSopNode<K extends NodeParamsConfig> extends TypedNode<'GEOMETRY', BaseSopNodeType, K> {\n\tcontainer_controller: TypedContainerController<GeometryContainer> = new TypedContainerController<GeometryContainer>(\n\t\tthis,\n\t\tGeometryContainer\n\t);\n\tpublic readonly flags: FlagsControllerDB = new FlagsControllerDB(this);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.SOP;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// _master_group: Group\n\t// _objects: Object3D[] = []\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\tif (this.flags.display) {\n\t\t\tthis.flags.display.set(false);\n\t\t\tthis.flags.display.add_hook(() => {\n\t\t\t\tif (this.flags.display.active) {\n\t\t\t\t\tconst parent = this.parent;\n\t\t\t\t\tif (parent && parent.display_node_controller) {\n\t\t\t\t\t\tparent.display_node_controller.set_display_node(this);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\t// request_container() {\n\t// \treturn super.request_container(); //as Promise<GeometryContainer>;\n\t// }\n\n\t//\n\t//\n\t// GEOMETRY\n\t//\n\t//\n\t// group(): Group {\n\t// \treturn this._master_group = this._master_group || this._create_group()\n\t// }\n\t// set_group(group: Group){\n\t// \tthis._clear_objectsI() //(MESSAGE.FROM_SET_GROUP);\n\t// \tthis._master_group.add(group)\n\t// \t// let child;\n\n\t// \t// const new_children = [];\n\t// \t// while (child = group.children[0]) {\n\t// \t// \tnew_children.push(child);\n\t// \t// \tgroup.remove(child);\n\t// \t// }\n\n\t// \t// new_children.forEach(child=> {\n\t// \t// \tthis._master_group.add( child );\n\t// \t// });\n\n\t// \t// // if (this.allow_add_object_attributes()) {\n\t// \t// \tthis._master_group.traverse(object=> {\n\t// \t// \t\tthis._set_object_attributes(object);\n\t// \t// \t});\n\t// \t// // }\n\t// \tthis.set_container(this._master_group, MESSAGE.FROM_SET_GROUP);\n\t// }\n\tset_core_group(core_group: CoreGroup) {\n\t\tconst objects = core_group.objects();\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\tthis.set_container(core_group, MESSAGE.FROM_SET_CORE_GROUP);\n\t}\n\n\tset_object(object: Object3D) {\n\t\t// this._clear_objects();\n\t\t// this.add_object(object);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_OBJECT);\n\t\tthis._set_object_attributes(object);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_OBJECT);\n\t}\n\tset_objects(objects: Object3D[]) {\n\t\t// this._clear_objects();\n\t\t// const list = objects;\n\t\t// lodash_times(list.length, i=> {\n\t\t// \tconst object = list[i];\n\t\t// \tthis.add_object(object);\n\t\t// });\n\t\tfor (let object of objects) {\n\t\t\tthis._set_object_attributes(object);\n\t\t}\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_OBJECTS);\n\t}\n\n\t// add_object(object: Object3D) {\n\t// \tif (object != null) {\n\t// \t\tthis.group().add(object);\n\t// \t\t// if (this.allow_add_object_attributes()) {\n\t// \t\tthis._set_object_attributes(object);\n\t// \t\t// }\n\t// \t\treturn object;\n\t// \t}\n\t// }\n\t// add_geometry(geometry: BufferGeometry, type: ObjectType) {\n\t// \tlet object;\n\t// \tif (geometry.index == null) {\n\t// \t\tthis._add_index(geometry);\n\t// \t}\n\n\t// \tif ((object = this.create_object(geometry, type)) != null) {\n\t// \t\tthis.add_object(object);\n\t// \t}\n\t// }\n\n\tset_geometry(geometry: BufferGeometry, type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\t// this.add_geometry(geometry, type);\n\t\t// this.set_container(this.group(), MESSAGE.FROM_SET_GEOMETRY);\n\t\tconst object = this.create_object(geometry, type);\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects([object]);\n\t\tthis.set_container_objects([object], MESSAGE.FROM_SET_GEOMETRY);\n\t}\n\t//this.end_cook()\n\n\tset_geometries(geometries: BufferGeometry[], type?: ObjectType) {\n\t\t// this._clear_objects();\n\t\tconst objects: Object3D[] = [];\n\t\tlet object;\n\t\tgeometries.forEach((geometry) => {\n\t\t\tobject = this.create_object(geometry, type);\n\t\t\tthis._set_object_attributes(object);\n\t\t\tobjects.push(object);\n\t\t});\n\t\t// const core_group = new CoreGroup();\n\t\t// core_group.set_objects(objects);\n\t\tthis.set_container_objects(objects, MESSAGE.FROM_SET_GEOMETRIES);\n\t}\n\n\tset_container_objects(objects: Object3D[], message: MESSAGE) {\n\t\tconst core_group = this.container_controller.container.core_content() || new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\tcore_group.touch();\n\t\tthis.set_container(core_group);\n\t}\n\n\t// do_clone_inputs() {\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_clone_inputs')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\t// allow_add_object_attributes() {\n\t// \tif (!this.do_clone_inputs()) { return false; }\n\t// \tlet result = true;\n\t// \tif (this.has_param('do_not_add_object_attributes')) {\n\t// \t\tresult = false;\n\t// \t}\n\t// \treturn result;\n\t// }\n\n\t// _create_group() {\n\t// \tconst group = new Group();\n\t// \tgroup.name = this.full_path();\n\n\t// \tthis._init_sop_bypass_group(group)\n\n\t// \treturn group;\n\t// }\n\n\tcreate_object(geometry: BufferGeometry, type?: ObjectType): Object3DWithGeometry {\n\t\t// ensure it has an index\n\t\tif (!geometry.index) {\n\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t}\n\n\t\tif (type == null) {\n\t\t\ttype = CoreConstant.OBJECT_TYPE.MESH;\n\t\t}\n\t\t// if (!lodash_includes(CoreConstant.OBJECT_TYPES, type)) {\n\t\t// \tconst human_type = CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[type];\n\t\t// \tconst human_names = CoreConstant.OBJECT_TYPES.map(\n\t\t// \t\t(n) => CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[n]\n\t\t// \t);\n\t\t// \tthrow `type '${human_type}' not recognized. Available types are ${human_names.join(', ')}.`;\n\t\t// }\n\n\t\t// if (geometry != null) {\n\t\tconst object_constructor = CoreConstant.CONSTRUCTORS_BY_NAME[type]; //THREE[type];\n\t\tconst material = CoreConstant.MATERIALS[type].clone();\n\t\tconst object = new object_constructor(geometry, material) as Object3DWithGeometry;\n\t\tobject.castShadow = true;\n\t\tobject.receiveShadow = true;\n\t\tobject.frustumCulled = false;\n\n\t\treturn object;\n\t\t// }\n\t}\n\n\t_set_object_attributes(object: Object3D) {\n\t\t// if (!this.allow_add_object_attributes()) { return; }\n\t\t// TODO: the exception below are just to debug when a geo could be reused or not cloned properly\n\t\t// I could remove that when more sure it all refreshes fine, and this would allow the null or merge to\n\t\t// not have to clone the data\n\t\t// if ((object.name == null) && (object.name !== '')) {\n\t\t// \tif (this.do_clone_inputs()) {\n\t\t// \t\tthrow `object.name already set to ${object.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t}\n\t\t// } else {\n\t\t// \tobject.name = this.full_path();\n\t\t// }\n\n\t\t// if ((geometry = object.geometry) != null) {\n\t\t// \tif ((geometry.name == null) && (geometry.name !== '')) {\n\t\t// \t\tif (this.do_clone_inputs()) {\n\t\t// \t\t\tthrow `geometry.node_name already set to ${geometry.node_name} (attempt to set by ${this.full_path()})`;\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\tgeometry.name = this.full_path();\n\t\t// \t}\n\t\t// }\n\t\tconst material: Material = (object as Mesh).material as Material;\n\t\tif (material) {\n\t\t\tif (!this.scene) {\n\t\t\t\tconsole.log('no scene');\n\t\t\t\tthrow 'no scene';\n\t\t\t}\n\t\t\tconst material_node = CoreMaterial.node(this.scene, material) as BaseMatNodeType;\n\t\t\tif (material_node) {\n\t\t\t\tmaterial_node.add_render_hook(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// _clear_objects() {\n\t// \tconst group = this.group();\n\n\t// \tlet child\n\t// \twhile(child = group.children[0]) {\n\t// \t\tgroup.remove(child);\n\t// \t}\n\t// \t// const children = lodash_clone(group.children);\n\t// \t// let child;\n\t// \t// for(let i=0; i < children.length; i++){\n\t// \t// \tchild = children[i]\n\t// \t// \tgroup.remove(child);\n\t// \t// \tchild.traverse((object)=>{\n\t// \t// \t\tif (object.geometry != null) {\n\t// \t// \t\t\tobject.geometry.dispose();\n\t// \t// \t\t}\n\t// \t// \t\t// no more material dispose since each the materials are not cloned\n\t// \t// \t\t// if (object.material){\n\t// \t// \t\t// \tif (lodash_isArray(object.material)){\n\t// \t// \t\t// \t\tobject.material.forEach((mat)=>{mat.dispose()})\n\t// \t// \t\t// \t} else {\n\t// \t// \t\t// \t\tobject.material.dispose()\n\t// \t// \t\t// \t}\n\t// \t// \t\t// }\n\t// \t// \t});\n\t// \t// }\n\t// }\n\n\t_add_index(geometry: BufferGeometry) {\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_array = position_attrib.array;\n\t\tconst points_count = position_array.length / 3;\n\t\tconst indices: number[] = [];\n\t\tlodash_times(points_count, (i) => indices.push(i));\n\n\t\tgeometry.setIndex(indices);\n\t}\n}\n\nexport type BaseSopNodeType = TypedSopNode<NodeParamsConfig>;\nexport class BaseSopNodeClass extends TypedSopNode<NodeParamsConfig> {}\n","export enum InputCloneMode {\n\tALWAYS = 'always',\n\tNEVER = 'never',\n\tFROM_NODE = 'from_node',\n}\n","export enum ParamType {\n\tBOOLEAN = 'boolean',\n\tBUTTON = 'button',\n\tCOLOR = 'color',\n\tFLOAT = 'float',\n\tFOLDER = 'folder',\n\tINTEGER = 'integer',\n\tOPERATOR_PATH = 'operator_path',\n\tRAMP = 'ramp',\n\tSEPARATOR = 'separator',\n\tSTRING = 'string',\n\tVECTOR2 = 'vector2',\n\tVECTOR3 = 'vector3',\n\tVECTOR4 = 'vector4',\n}\n// export type ParamTypeKey = ParamType\n// export type ParamTypeKeysArray = Array<ParamTypeKey>\n// const ParamTypeKeysArray: ParamTypeKeysArray = [ParamType.BOOLEAN]\n","export enum NodeContext {\n\tCOP = 'cop',\n\tEVENT = 'event',\n\tGL = 'gl',\n\tJS = 'js',\n\tMANAGER = 'managers',\n\tMAT = 'mat',\n\tOBJ = 'objects',\n\tSOP = 'sop',\n\tPOST = 'post',\n}\n","// import {VertexColors} from 'three/src/constants'\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Scene} from 'three/src/scenes/Scene';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NoColors} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {FrontSide} from 'three/src/constants';\n// import {DoubleSide} from 'three/src/constants'\nimport {Color} from 'three/src/math/Color';\nimport {Bone} from 'three/src/objects/Bone';\n// import {AdditiveBlending} from 'three/src/constants'\nimport {Material} from 'three/src/materials/Material';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\n// const THREE = {AdditiveBlending, Bone, Color, DoubleSide, FrontSide, Group, LineBasicMaterial, LineSegments, Mesh, MeshLambertMaterial, MeshStandardMaterial, NoColors, Object3D, Points, PointsMaterial, Scene, SkinnedMesh, VertexColors}\n\ninterface MaterialsByString {\n\t[propName: string]: Material;\n}\n\n// export enum AttribClass {\n// \tVERTEX = \"vertex\",\n// \tOBJECT = \"object\"\n// }\n// materials['MeshStandard'] = new MeshStandardMaterial({\n// \tcolor: 0xffffff,\n// \t//vertexColors: VertexColors\n// \tside: FrontSide, // DoubleSide\n// \tmetalness: 0.5,\n// \troughness: 0.9\n// })\n// materials[Mesh.name] = new MeshLambertMaterial({ // MeshStandardMaterial\n// \tcolor: new Color(0.5,0.5,1),\n// \tside: FrontSide,\n// \tvertexColors: NoColors,\n// \ttransparent: true,\n// \tdepthTest: true\n// })\n// materials[Points.name] = new PointsMaterial({\n// \tcolor: 0xffffff,\n// \tsize: 0.1,\n// \t//blending: AdditiveBlending\n// \tdepthTest: true\n// })\n// materials[LineSegments.name] = new LineBasicMaterial({\n// \tcolor: 0xffffff,\n// \tlinewidth: 1\n// })\nexport enum ObjectType {\n\tMESH = 'MESH',\n\tPOINTS = 'POINTS',\n\tLINE_SEGMENTS = 'LINE_SEGMENTS',\n}\nexport const ObjectTypes = [ObjectType.MESH, ObjectType.POINTS, ObjectType.LINE_SEGMENTS];\nexport const ObjectTypeMenuEntries = [\n\t{name: 'Mesh', value: ObjectTypes.indexOf(ObjectType.MESH)},\n\t{name: 'Points', value: ObjectTypes.indexOf(ObjectType.POINTS)},\n\t{name: 'LineSegments', value: ObjectTypes.indexOf(ObjectType.LINE_SEGMENTS)},\n];\n\nconst materials: MaterialsByString = {\n\tMeshStandard: new MeshStandardMaterial({\n\t\tcolor: 0xffffff,\n\t\t//vertexColors: VertexColors\n\t\tside: FrontSide, // DoubleSide\n\t\tmetalness: 0.5,\n\t\troughness: 0.9,\n\t}),\n\t[ObjectType.MESH]: new MeshLambertMaterial({\n\t\t// MeshStandardMaterial\n\t\tcolor: new Color(0.5, 0.5, 1),\n\t\tside: FrontSide,\n\t\tvertexColors: NoColors,\n\t\ttransparent: true,\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.POINTS]: new PointsMaterial({\n\t\tcolor: 0xffffff,\n\t\tsize: 0.1,\n\t\t//blending: AdditiveBlending\n\t\tdepthTest: true,\n\t}),\n\t[ObjectType.LINE_SEGMENTS]: new LineBasicMaterial({\n\t\tcolor: 0xffffff,\n\t\tlinewidth: 1,\n\t}),\n};\n\n// TODO: typescript: check that this works after using uglifier\n\nexport enum AttribClass {\n\tVERTEX = 0,\n\tOBJECT = 1,\n}\n\nexport const AttribClassMenuEntries = [\n\t{name: 'vertex', value: AttribClass.VERTEX},\n\t{name: 'object', value: AttribClass.OBJECT},\n];\n\nexport enum AttribType {\n\tNUMERIC = 0,\n\tSTRING = 1,\n}\nexport const AttribTypeMenuEntries = [\n\t{name: 'numeric', value: AttribType.NUMERIC},\n\t{name: 'string', value: AttribType.STRING},\n];\n\nexport const CoreConstant = {\n\tATTRIB_CLASS: {\n\t\tVERTEX: AttribClass.VERTEX,\n\t\tOBJECT: AttribClass.OBJECT,\n\t},\n\n\tATTRIB_TYPE: {\n\t\tNUMERIC: 0,\n\t\tSTRING: 1,\n\t},\n\n\tOBJECT_TYPE: {\n\t\t// TODO: typescript\n\t\tMESH: ObjectType.MESH,\n\t\tPOINTS: ObjectType.POINTS,\n\t\tLINE_SEGMENTS: ObjectType.LINE_SEGMENTS,\n\t},\n\tOBJECT_TYPES: ObjectTypes,\n\tCONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME: {\n\t\t[Scene.name]: 'Scene',\n\t\t[Group.name]: 'Group',\n\t\t[Object3D.name]: 'Object3D',\n\t\t[Mesh.name]: 'Mesh',\n\t\t[Points.name]: 'Points',\n\t\t[LineSegments.name]: 'LineSegments',\n\t\t[Bone.name]: 'Bone',\n\t\t[SkinnedMesh.name]: 'SkinnedMesh',\n\t},\n\tCONSTRUCTORS_BY_NAME: {\n\t\t[ObjectType.MESH]: Mesh,\n\t\t[ObjectType.POINTS]: Points,\n\t\t[ObjectType.LINE_SEGMENTS]: LineSegments,\n\t},\n\t// CONSTRUCTORS_BY_TYPE: {\n\t// \t['MESH']: Mesh,\n\t// \t['POINTS']: Points,\n\t// \t['LINE_SEGMENTS']: LineSegments,\n\t// },\n\t// OBJECT_TYPE_BY_CONSTRUCTOR_NAME: {\n\t// \t[Mesh.name]: 'MESH',\n\t// \t[Points.name]: 'POINTS',\n\t// \t[LineSegments.name]: 'LINE_SEGMENTS',\n\t// },\n\tMATERIALS: materials,\n};\n\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Scene.name] = 'Scene'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Group.name] = 'Group'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Object3D.name] = 'Object3D'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Mesh.name] = 'Mesh'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Points.name] = 'Points'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LineSegments'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[Bone.name] = 'Bone'\n// CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[SkinnedMesh.name] = 'SkinnedMesh'\n\n// CoreConstant.CONSTRUCTORS_BY_NAME[Mesh.name] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_NAME[Points.name] = Points\n// CoreConstant.CONSTRUCTORS_BY_NAME[LineSegments.name] = LineSegments\n\n// CoreConstant.CONSTRUCTORS_BY_TYPE['MESH'] = Mesh\n// CoreConstant.CONSTRUCTORS_BY_TYPE['POINTS'] = Points\n// CoreConstant.CONSTRUCTORS_BY_TYPE['LINE_SEGMENTS'] = LineSegments\n\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Mesh.name] = 'MESH'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[Points.name] = 'POINTS'\n// CoreConstant.OBJECT_TYPE_BY_CONSTRUCTOR_NAME[LineSegments.name] = 'LINE_SEGMENTS'\n","import lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_trim from 'lodash/trim';\nimport lodash_compact from 'lodash/compact';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_padEnd from 'lodash/padEnd';\nimport lodash_capitalize from 'lodash/capitalize';\nimport lodash_snakeCase from 'lodash/snakeCase';\nimport lodash_upperFirst from 'lodash/upperFirst';\nimport lodash_camelCase from 'lodash/camelCase';\n\nconst ATTRIB_NAMES_SEPARATOR = /[, ]/; //[',', ' ']\n\n// const LETTERS = 'abcdefghijklmnopqrstuvwxyz'\n// const LETTERS_UPPERCASE = LETTERS.toUpperCase()\n// const NUMBERS = '0123645789'\n// const ALL = LETTERS + LETTERS_UPPERCASE + NUMBERS\n\nconst TAIL_DIGIT_MATCH_REGEXP = /\\d+$/;\n// const DIGIT_PREDEDED_BY_UNDERSCOPE = /_\\d$/\nconst INDICES_LIST_SEPARATOR = /,| /;\n\n// https://stackoverflow.com/questions/41856126/regexp-optional-dot-in-a-decimal-number\nconst NUM_REGEXP = /^\\d+\\.?\\d*$/;\nenum BooleanString {\n\tTRUE = 'true',\n\tFALSE = 'false',\n}\n\nexport class CoreString {\n\t// static has_tail_digits(word: string): boolean {\n\t// \tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP)\n\t// \treturn (match != null)\n\t// }\n\tstatic is_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE || word == BooleanString.FALSE;\n\t}\n\tstatic to_boolean(word: string): boolean {\n\t\treturn word == BooleanString.TRUE;\n\t}\n\tstatic is_number(word: string): boolean {\n\t\treturn NUM_REGEXP.test(word);\n\t}\n\n\tstatic tail_digits(word: string): number {\n\t\tconst match = word.match(TAIL_DIGIT_MATCH_REGEXP);\n\t\tif (match) {\n\t\t\treturn parseInt(match[0]);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tstatic increment(word: string): string {\n\t\tlet match;\n\t\tif ((match = word.match(TAIL_DIGIT_MATCH_REGEXP))) {\n\t\t\tconst digits = parseInt(match[0]);\n\t\t\tconst prefix = word.substring(0, word.length - match[0].length);\n\t\t\treturn `${prefix}${digits + 1}`;\n\t\t} else {\n\t\t\treturn `${word}1`;\n\t\t}\n\t}\n\n\tstatic pluralize(word: string): string {\n\t\tconst last_char = word[word.length - 1];\n\t\tif (last_char !== 's') {\n\t\t\treturn `${word}s`;\n\t\t} else {\n\t\t\treturn word;\n\t\t}\n\t}\n\n\tstatic camel_case(word: string): string {\n\t\treturn lodash_camelCase(word);\n\t}\n\tstatic upper_first(word: string): string {\n\t\treturn lodash_upperFirst(word);\n\t}\n\tstatic snake_case(word: string): string {\n\t\treturn lodash_snakeCase(word);\n\t}\n\tstatic titleize(word: string): string {\n\t\treturn lodash_capitalize(word.replace(/_/g, ' '));\n\t}\n\n\tstatic type_to_class_name(word: string): string {\n\t\treturn this.upper_first(lodash_camelCase(word));\n\t}\n\t// static class_name_to_type(word): string {\n\t// \t// if(this.has_tail_digits(word)){\n\t// \t// \tconst tail_digits = `${this.tail_digits(word)}`\n\t// \t// \tconst head = word.substr(0, word.length-tail_digits.length)\n\t// \t// \tconst head_snake_case = this.snake_case(head)\n\t// \t// \tconsole.log(word, tail_digits, head, head_snake_case)\n\t// \t// \treturn `${head_snake_case}${tail_digits}`;\n\t// \t// } else {\n\t// \t// \treturn this.snake_case(word)\n\t// \t// }\n\t// \tconst snake_case = this.snake_case(word)\n\t// \tconst match = snake_case.match(DIGIT_PREDEDED_BY_UNDERSCOPE)\n\t// \tconsole.log(\"-----\", snake_case, match)\n\t// \treturn snake_case\n\t// }\n\t// static class_name_to_human(word): string {\n\t// \tconst human_name = this.class_name_to_type(word).replace(/\\s/, ' ');\n\t// \treturn human_name.replace(/_/g, \" \");\n\t// }\n\n\tstatic timestamp_to_seconds(word: string): number {\n\t\treturn Date.parse(word) / 1000;\n\t}\n\tstatic seconds_to_timestamp(seconds: number): string {\n\t\tconst d = new Date();\n\t\td.setTime(seconds * 1000);\n\t\treturn d.toISOString().substr(11, 8);\n\t}\n\n\tstatic precision(val: number, decimals: number = 2): string {\n\t\t// if (decimals == null) { decimals = 2; }\n\t\t// const factor = Math.pow(10, decimals);\n\t\t// const num = Math.floor(factor * val) / factor;\n\t\t// let number_s = `${num}`;\n\n\t\t// let elements = number_s.split('.');\n\t\t// if (decimals <= 0){\n\t\t// \treturn elements[0];\n\t\t// }\n\n\t\t// if (elements.length === 1) {\n\t\t// \t// number_s = `${number_s}.00`;\n\t\t// \tconst string_to_pad = `${number_s}.`\n\t\t// \tconst pad = string_to_pad.length + decimals\n\t\t// \treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t// } else {\n\t\t// \tconst integer_element = elements[0];\n\t\t// \tlet fraction_element = elements[1];\n\t\t// \tif (fraction_element.length === 1) {\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}0`;\n\t\t// \t} else if (fraction_element.length > 2) {\n\t\t// \t\tfraction_element = fraction_element.slice(0, 2);\n\t\t// \t\tnumber_s = `${integer_element}.${fraction_element}`;\n\t\t// \t}\n\t\t// }\n\n\t\t// elements = number_s.split('.');\n\t\t// console.log(\"decimals:\", decimals, elements[1].length, number_s)\n\t\t// if (elements[1].length < decimals){\n\t\t// \tconst string_to_pad = number_s\n\t\t// \tconst pad = string_to_pad.length + (decimals - elements[1].length)\n\t\t// \tnumber_s = lodash_padEnd(string_to_pad, pad, '0');\n\t\t// }\n\n\t\t// return number_s;\n\t\tdecimals = Math.max(decimals, 0);\n\t\tconst elements = `${val}`.split('.');\n\n\t\tif (decimals <= 0) {\n\t\t\treturn elements[0];\n\t\t}\n\n\t\tlet frac = elements[1];\n\t\tif (frac !== undefined) {\n\t\t\tif (frac.length > decimals) {\n\t\t\t\tfrac = frac.substring(0, decimals);\n\t\t\t}\n\n\t\t\tfrac = lodash_padEnd(frac, decimals, '0');\n\t\t\treturn `${elements[0]}.${frac}`;\n\t\t} else {\n\t\t\tconst string_to_pad = `${val}.`;\n\t\t\tconst pad = string_to_pad.length + decimals;\n\t\t\treturn lodash_padEnd(string_to_pad, pad, '0');\n\t\t}\n\t}\n\n\tstatic ensure_float(num: number): string {\n\t\t// const integer = Math.floor(num)\n\t\t// const delta = num - integer\n\t\t// if(delta)\n\t\tconst num_as_string = `${num}`;\n\t\tconst dot_pos = num_as_string.indexOf('.');\n\t\tif (dot_pos >= 0) {\n\t\t\treturn num_as_string;\n\t\t} else {\n\t\t\treturn `${num_as_string}.0`;\n\t\t}\n\t}\n\n\t// https://stackoverflow.com/questions/26246601/wildcard-string-comparison-in-javascript#32402438\n\tstatic match_mask(word: string, rule: string) {\n\t\tif (rule === '*') {\n\t\t\treturn true;\n\t\t}\n\t\t// \".\"  => Find a single character, except newline or line terminator\n\t\t// \".*\" => Matches any string that contains zero or more characters\n\t\trule = rule.split('*').join('.*');\n\n\t\t// \"^\"  => Matches any string with the following at the beginning of it\n\t\t// \"$\"  => Matches any string with that in front at the end of it\n\t\trule = `^${rule}$`;\n\n\t\t// Create a regular expression object for matching string\n\t\tconst regex = new RegExp(rule);\n\n\t\t// Returns true if it finds a match, otherwise it returns false\n\t\treturn regex.test(word);\n\t}\n\tstatic matches_one_mask(word: string, masks: string[]): boolean {\n\t\tlet matches_one_mask = false;\n\t\tfor (let mask of masks) {\n\t\t\tif (CoreString.match_mask(word, mask)) {\n\t\t\t\tmatches_one_mask = true;\n\t\t\t}\n\t\t}\n\t\treturn matches_one_mask;\n\t}\n\n\tstatic attrib_names(word: string): string[] {\n\t\t// let elements = [word];\n\t\t// lodash_each(ATTRIB_NAMES_SEPARATORS, separator => elements = lodash_flatten(lodash_map(elements, element => element.split(separator))));\n\t\tconst elements = word.split(ATTRIB_NAMES_SEPARATOR);\n\t\tconst trimed_elements = lodash_compact(\n\t\t\telements.map((e) => {\n\t\t\t\treturn lodash_trim(e);\n\t\t\t})\n\t\t);\n\t\tconst uniq = lodash_uniq(trimed_elements);\n\n\t\t// const names: string[] = []\n\t\t// ATTRIB_NAMES_SEPARATORS.forEach(separator=>{\n\t\t// \tword.split(separator).forEach( element=>{\n\t\t// \t\tnames.push(element.trim())\n\t\t// \t} )\n\t\t// })\n\n\t\t// // elements = lodash_filter(elements, element => (element != null) && (element.length > 0));\n\t\t// return lodash_uniq(names)\n\n\t\t// return lodash_map(elements, attr_name => lodash_trim(attr_name));\n\t\treturn uniq;\n\t}\n\tstatic to_id(val: string): number {\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tconst elements = val.split('').reverse();\n\t\tlet id = 0;\n\t\tlet exp = 0;\n\t\telements.forEach((element, i) => {\n\t\t\tlet index = element.charCodeAt(0);\n\n\t\t\tif (index >= 0) {\n\t\t\t\texp = i % 10;\n\t\t\t\tid += index * 10 ** exp;\n\t\t\t\tid = id % Number.MAX_SAFE_INTEGER;\n\t\t\t}\n\t\t});\n\t\treturn id;\n\t}\n\n\tstatic indices(indices_string: string): number[] {\n\t\tconst elements = indices_string.split(INDICES_LIST_SEPARATOR);\n\t\tif (elements.length > 1) {\n\t\t\treturn lodash_uniq(lodash_flatten(elements.map((element) => this.indices(element)))).sort((a, b) => a - b);\n\t\t} else {\n\t\t\tconst element = elements[0];\n\t\t\tif (element) {\n\t\t\t\tconst range_separator = '-';\n\t\t\t\tif (element.indexOf(range_separator) > 0) {\n\t\t\t\t\tconst range_elements = element.split(range_separator);\n\t\t\t\t\treturn lodash_range(parseInt(range_elements[0]), parseInt(range_elements[1]) + 1);\n\t\t\t\t} else {\n\t\t\t\t\treturn [parseInt(element)];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic escape_line_breaks(word: string): string {\n\t\treturn word.replace(/(\\r\\n|\\n|\\r)/gm, '\\\\n');\n\t}\n}\n","// events\nexport enum NodeEvent {\n\tCREATED = 'node_created',\n\tDELETED = 'node_deleted',\n\tNAME_UPDATED = 'node_name_update',\n\tOVERRIDE_CLONABLE_STATE_UPDATE = 'node_override_clonable_state_update',\n\tNAMED_OUTPUTS_UPDATED = 'node_named_outputs_updated',\n\tNAMED_INPUTS_UPDATED = 'node_named_inputs_updated',\n\tINPUTS_UPDATED = 'node_inputs_updated',\n\tPARAMS_UPDATED = 'node_params_updated',\n\tUI_DATA_POSITION_UPDATED = 'node_ui_data_position_updated',\n\tUI_DATA_COMMENT_UPDATED = 'node_ui_data_comment_updated',\n\tERROR_UPDATED = 'node_error_updated',\n\tFLAG_BYPASS_UPDATED = 'bypass_flag_updated',\n\tFLAG_DISPLAY_UPDATED = 'display_flag_updated',\n\tSELECTION_UPDATED = 'selection_updated',\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2'\nimport {Int32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\n\n// const THREE = {\n// \tBox3,\n// \tBufferGeometry,\n// \tFloat32BufferAttribute,\n// \tInt32BufferAttribute,\n// \tInterleavedBufferAttribute,\n// \tVector2,\n// \tVector3,\n// }\nimport lodash_range from 'lodash/range';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_each from 'lodash/each';\nimport lodash_chunk from 'lodash/chunk';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_clone from 'lodash/clone';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CorePoint} from './Point';\nimport {CoreFace} from './Face';\nimport {CoreConstant, ObjectType} from './Constant';\nimport {CoreAttribute} from './Attribute';\nimport {MonkeyPatcher} from './MonkeyPatcher';\n\nimport {BufferGeometryUtils} from 'modules/three/examples/jsm/utils/BufferGeometryUtils';\nimport {CoreAttributeData} from './AttributeData';\n\nexport class CoreGeometry {\n\t_bounding_box: Box3 | undefined;\n\tprivate _points: CorePoint[] | undefined;\n\n\t// @INDEX_MODE_POINTS = 'INDEX_MODE_POINTS'\n\t// @INDEX_MODE_FACES = 'INDEX_MODE_FACES'\n\t// @INDEX_MODE_LINES = 'INDEX_MODE_LINES'\n\n\tconstructor(private _geometry: BufferGeometry) {}\n\t//\n\n\tgeometry() {\n\t\treturn this._geometry;\n\t}\n\tuuid() {\n\t\treturn this._geometry.uuid;\n\t}\n\n\tbounding_box() {\n\t\treturn (this._bounding_box = this._bounding_box || this._create_bounding_box());\n\t}\n\t_create_bounding_box() {\n\t\tthis._geometry.computeBoundingBox();\n\t\treturn this._geometry.boundingBox;\n\t}\n\n\tmark_as_instance() {\n\t\tthis._geometry.userData['is_instance'] = true;\n\t}\n\tstatic marked_as_instance(geometry: BufferGeometry): boolean {\n\t\treturn geometry.userData['is_instance'] === true;\n\t}\n\tmarked_as_instance(): boolean {\n\t\treturn CoreGeometry.marked_as_instance(this._geometry);\n\t}\n\tposition_attrib_name() {\n\t\tlet name = 'position';\n\t\tif (this.marked_as_instance()) {\n\t\t\tname = 'instancePosition';\n\t\t}\n\t\treturn name;\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis._geometry.computeVertexNormals();\n\t}\n\n\tuser_data_attribs() {\n\t\tconst key = 'indexed_attrib_values';\n\t\treturn (this._geometry.userData[key] = this._geometry.userData[key] || {});\n\t}\n\tindexed_attribute_names() {\n\t\treturn Object.keys(this.user_data_attribs() || {});\n\t}\n\tuser_data_attrib(name: string) {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attribs()[name];\n\t}\n\tis_attrib_indexed(name: string): boolean {\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this.user_data_attrib(name) != null;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tif (name === 'ptnum') {\n\t\t\treturn true;\n\t\t}\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.attributes[name] != null;\n\t}\n\tattrib_type(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_names(): string[] {\n\t\treturn Object.keys(this._geometry.attributes);\n\t}\n\tattrib_sizes() {\n\t\tconst h: Dictionary<number> = {};\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\th[attrib_name] = this._geometry.attributes[attrib_name].itemSize;\n\t\t}\n\t\treturn h;\n\t}\n\tattrib_size(name: string): number {\n\t\tlet attrib;\n\t\tname = CoreAttribute.remap_name(name);\n\t\tif ((attrib = this._geometry.attributes[name]) != null) {\n\t\t\treturn attrib.itemSize;\n\t\t} else {\n\t\t\tif (name === 'ptnum') {\n\t\t\t\t// to ensure attrib copy with ptnum as source works\n\t\t\t\treturn 1;\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tset_indexed_attribute_values(name: string, values: string[]) {\n\t\tthis.user_data_attribs()[name] = values;\n\t}\n\n\tset_indexed_attribute(name: string, values: string[], indices: number[]) {\n\t\tthis.set_indexed_attribute_values(name, values);\n\t\tthis._geometry.setAttribute(name, new Int32BufferAttribute(indices, 1));\n\t}\n\n\tadd_numeric_attrib(name: string, size: number = 1, default_value: NumericAttribValue = 0) {\n\t\tconst values = [];\n\n\t\tlet attribute_added = false;\n\t\tif (lodash_isNumber(default_value)) {\n\t\t\t// adding number\n\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\tvalues.push(default_value);\n\t\t\t\t}\n\t\t\t}\n\t\t\tattribute_added = true;\n\t\t} else {\n\t\t\tif (size > 1) {\n\t\t\t\tif (lodash_isArray(default_value)) {\n\t\t\t\t\t// adding array\n\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\tfor (let j = 0; j < size; j++) {\n\t\t\t\t\t\t\tvalues.push(default_value[j]);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tattribute_added = true;\n\t\t\t\t} else {\n\t\t\t\t\t// adding Vector2\n\t\t\t\t\tconst vec2 = default_value as Vector2Like;\n\t\t\t\t\tif (size == 2 && vec2.x != null && vec2.y != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec2.x);\n\t\t\t\t\t\t\tvalues.push(vec2.y);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector3\n\t\t\t\t\tconst vec3 = default_value as Vector3Like;\n\t\t\t\t\tif (size == 3 && vec3.x != null && vec3.y != null && vec3.z != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec3.x);\n\t\t\t\t\t\t\tvalues.push(vec3.y);\n\t\t\t\t\t\t\tvalues.push(vec3.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Color\n\t\t\t\t\tconst col = default_value as ColorLike;\n\t\t\t\t\tif (size == 3 && col.r != null && col.g != null && col.b != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(col.r);\n\t\t\t\t\t\t\tvalues.push(col.g);\n\t\t\t\t\t\t\tvalues.push(col.b);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t\t// adding Vector4\n\t\t\t\t\tconst vec4 = default_value as Vector4Like;\n\t\t\t\t\tif (size == 4 && vec4.x != null && vec4.y != null && vec4.z != null && vec4.w != null) {\n\t\t\t\t\t\tfor (let i = 0; i < this.points_count(); i++) {\n\t\t\t\t\t\t\tvalues.push(vec4.x);\n\t\t\t\t\t\t\tvalues.push(vec4.y);\n\t\t\t\t\t\t\tvalues.push(vec4.z);\n\t\t\t\t\t\t\tvalues.push(vec4.w);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tattribute_added = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (attribute_added) {\n\t\t\tthis._geometry.setAttribute(name, new Float32BufferAttribute(values, size));\n\t\t} else {\n\t\t\tthrow 'no other default value allowed for now in add_numeric_attrib';\n\t\t}\n\t}\n\n\tinit_position_attribute(points_count: number, default_value?: Vector3) {\n\t\tconst values = [];\n\t\tif (default_value == null) {\n\t\t\tdefault_value = new Vector3();\n\t\t}\n\n\t\tfor (let i = 0; i < points_count; i++) {\n\t\t\tvalues.push(default_value.x);\n\t\t\tvalues.push(default_value.y);\n\t\t\tvalues.push(default_value.z);\n\t\t}\n\n\t\treturn this._geometry.setAttribute('position', new Float32BufferAttribute(values, 3));\n\t}\n\n\tadd_attribute(name: string, attrib_data: CoreAttributeData) {\n\t\tswitch (attrib_data.type()) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\treturn console.log('TODO: to implement');\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\treturn this.add_numeric_attrib(name, attrib_data.size());\n\t\t}\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tif (this.is_attrib_indexed(old_name)) {\n\t\t\tthis.user_data_attribs()[new_name] = lodash_clone(this.user_data_attribs()[old_name]);\n\t\t\tdelete this.user_data_attribs()[old_name];\n\t\t}\n\n\t\tconst old_attrib = this._geometry.getAttribute(old_name);\n\t\tthis._geometry.setAttribute(new_name, new Float32BufferAttribute(old_attrib.array, old_attrib.itemSize));\n\t\treturn this._geometry.deleteAttribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tif (this.is_attrib_indexed(name)) {\n\t\t\tdelete this.user_data_attribs()[name];\n\t\t}\n\n\t\treturn this._geometry.deleteAttribute(name);\n\t}\n\n\tclone(): BufferGeometry {\n\t\treturn CoreGeometry.clone(this._geometry);\n\t}\n\n\tstatic clone(src_geometry: BufferGeometry): BufferGeometry {\n\t\tlet src_userData;\n\n\t\t// monkey path\n\t\tfor (let attribute_name of Object.keys(src_geometry.attributes)) {\n\t\t\tconst attribute = src_geometry.getAttribute(attribute_name);\n\t\t\tif (attribute.constructor.name == InterleavedBufferAttribute.name) {\n\t\t\t\tMonkeyPatcher.patch(attribute as InterleavedBufferAttribute);\n\t\t\t}\n\t\t}\n\n\t\tconst new_geometry = src_geometry.clone();\n\t\tif ((src_userData = src_geometry.userData) != null) {\n\t\t\tnew_geometry.userData = lodash_cloneDeep(src_userData);\n\t\t}\n\t\treturn new_geometry;\n\t}\n\n\tpoints_count(): number {\n\t\treturn CoreGeometry.points_count(this._geometry);\n\t}\n\n\tstatic points_count(geometry: BufferGeometry): number {\n\t\tlet position;\n\t\tlet count = 0;\n\t\tconst core_geometry = new this(geometry);\n\t\tlet position_attrib_name = 'position';\n\t\tif (core_geometry.marked_as_instance()) {\n\t\t\tposition_attrib_name = 'instancePosition';\n\t\t}\n\n\t\tif ((position = geometry.getAttribute(position_attrib_name)) != null) {\n\t\t\tlet array;\n\t\t\tif ((array = position.array) != null) {\n\t\t\t\tcount = array.length / 3;\n\t\t\t}\n\t\t}\n\n\t\treturn count;\n\t}\n\n\t// TODO: use lodash_chunk\n\t// like: lodash_chunk(template_geometry.getAttribute('position').array, 3)\n\tpoints(): CorePoint[] {\n\t\treturn (this._points = this._points || this.points_from_geometry());\n\t}\n\treset_points() {\n\t\tthis._points = undefined;\n\t}\n\tpoints_from_geometry(): CorePoint[] {\n\t\tconst points = [];\n\t\tconst position_attrib = this._geometry.getAttribute(this.position_attrib_name());\n\n\t\tif (position_attrib != null) {\n\t\t\tconst points_count = position_attrib.array.length / 3;\n\t\t\tfor (let point_index = 0; point_index < points_count; point_index++) {\n\t\t\t\tconst point = new CorePoint(this, point_index);\n\n\t\t\t\t// lodash_each lodash_keys(@_geometry.attributes), (attrib_name) =>\n\n\t\t\t\t// \tattribute = @_geometry.getAttribute(attrib_name)\n\t\t\t\t// \titem_size = attribute.itemSize\n\t\t\t\t// \tcurrent_index = point_index  *item_size\n\n\t\t\t\t// \tattrib_value = switch item_size\n\t\t\t\t// \t\twhen 1\n\t\t\t\t// \t\t\tattribute.array[current_index]\n\t\t\t\t// \t\twhen 2\n\t\t\t\t// \t\t\tnew Vector2(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\t)\n\t\t\t\t// \t\twhen 3\n\t\t\t\t// \t\t\tnew Vector3(\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 0]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 1]\n\t\t\t\t// \t\t\t\tattribute.array[current_index + 2]\n\t\t\t\t// \t\t\t\t)\n\n\t\t\t\t// \tpoint.add_attribute(attrib_name, item_size, attrib_value)\n\n\t\t\t\tpoints.push(point);\n\t\t\t}\n\t\t}\n\n\t\treturn points;\n\t}\n\n\tstatic geometry_from_points(points: CorePoint[], object_type: ObjectType): BufferGeometry {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst geometry_wrapper = new this(geometry);\n\n\t\tconst first_point = points[0];\n\t\tif (first_point != null) {\n\t\t\tconst old_geometry = first_point.geometry();\n\t\t\tconst old_geometry_wrapper = first_point.geometry_wrapper();\n\n\t\t\t// index\n\t\t\tconst new_index_by_old_index: Dictionary<number> = {};\n\t\t\tlodash_each(points, (point, i) => (new_index_by_old_index[point.index] = i));\n\n\t\t\tconst indices = this._indices_from_points(new_index_by_old_index, old_geometry, object_type);\n\t\t\tif (indices != null && indices.length !== 0) {\n\t\t\t\tgeometry.setIndex(indices);\n\t\t\t}\n\n\t\t\t// attributes\n\t\t\tconst {attributes} = old_geometry;\n\t\t\t// const new_attributes = {}\n\t\t\tfor (let attribute_name of Object.keys(attributes)) {\n\t\t\t\tconst attrib_values = old_geometry_wrapper.user_data_attribs()[attribute_name];\n\t\t\t\tconst is_attrib_indexed = attrib_values != null;\n\n\t\t\t\tif (is_attrib_indexed) {\n\t\t\t\t\tconst new_values = lodash_uniq(points.map((point) => point.attrib_value(attribute_name)));\n\t\t\t\t\tconst new_index_by_value: Dictionary<number> = {};\n\t\t\t\t\tlodash_each(new_values, (new_value, i) => (new_index_by_value[new_value] = i));\n\n\t\t\t\t\tgeometry_wrapper.user_data_attribs()[attribute_name] = new_values;\n\n\t\t\t\t\t// const old_attrib = old_geometry.getAttribute(attribute_name)\n\t\t\t\t\t// const old_attrib_array = old_attrib.array\n\t\t\t\t\tconst new_attrib_indices = [];\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t// const old_index = old_attrib_array[point.index()]\n\t\t\t\t\t\tconst new_index = new_index_by_value[point.attrib_value(attribute_name)];\n\t\t\t\t\t\tnew_attrib_indices.push(new_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(new_attrib_indices, 1));\n\t\t\t\t} else {\n\t\t\t\t\tconst values = [];\n\t\t\t\t\tconst attrib_size = attributes[attribute_name].itemSize;\n\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\tconst value = point.attrib_value(attribute_name);\n\t\t\t\t\t\tswitch (attrib_size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\tvalues.push(value);\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\tvalues.push(value.x);\n\t\t\t\t\t\t\t\tvalues.push(value.y);\n\t\t\t\t\t\t\t\tvalues.push(value.z);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setAttribute(attribute_name, new Float32BufferAttribute(values, attrib_size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn geometry;\n\t}\n\n\tstatic _indices_from_points(\n\t\tnew_index_by_old_index: Dictionary<number>,\n\t\told_geometry: BufferGeometry,\n\t\tobject_type: ObjectType\n\t) {\n\t\tconst index_attrib = old_geometry.index;\n\t\tif (index_attrib != null) {\n\t\t\tconst old_indices = index_attrib.array;\n\n\t\t\tconst new_indices: number[] = [];\n\n\t\t\tswitch (object_type) {\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.POINTS:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tconst new_index = new_index_by_old_index[old_index];\n\t\t\t\t\t\tif (new_index != null) {\n\t\t\t\t\t\t\tnew_indices.push(new_index);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.MESH:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tif (i % 3 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst old_index2 = old_indices[i + 2];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tconst new_index2 = new_index_by_old_index[old_index2];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null && new_index2 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index2);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase CoreConstant.OBJECT_TYPE.LINE_SEGMENTS:\n\t\t\t\t\tlodash_each(old_indices, function(old_index, i: number) {\n\t\t\t\t\t\tif (i % 2 === 0) {\n\t\t\t\t\t\t\tconst old_index0 = old_indices[i];\n\t\t\t\t\t\t\tconst old_index1 = old_indices[i + 1];\n\t\t\t\t\t\t\tconst new_index0 = new_index_by_old_index[old_index0];\n\t\t\t\t\t\t\tconst new_index1 = new_index_by_old_index[old_index1];\n\t\t\t\t\t\t\tif (new_index0 != null && new_index1 != null) {\n\t\t\t\t\t\t\t\tnew_indices.push(new_index0);\n\t\t\t\t\t\t\t\tnew_indices.push(new_index1);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn new_indices;\n\t\t}\n\t}\n\n\tstatic merge_geometries(geometries: BufferGeometry[]) {\n\t\tif (geometries.length === 0) {\n\t\t\treturn;\n\t\t}\n\n\t\t//\n\t\t// 1/3. set the new attrib indices for the indexed attributes\n\t\t//\n\t\tconst core_geometries = geometries.map((geometry) => new CoreGeometry(geometry));\n\t\tconst indexed_attribute_names = core_geometries[0].indexed_attribute_names();\n\n\t\tconst new_values_by_attribute_name: Dictionary<string[]> = {};\n\t\tfor (let indexed_attribute_name of indexed_attribute_names) {\n\t\t\tconst index_by_values: Dictionary<number> = {};\n\t\t\tconst all_geometries_points = [];\n\t\t\tfor (let core_geometry of core_geometries) {\n\t\t\t\tconst geometry_points = core_geometry.points();\n\t\t\t\tfor (let point of geometry_points) {\n\t\t\t\t\tall_geometries_points.push(point);\n\t\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\t\t//value_index = point.attrib_value_index(indexed_attribute_name)\n\t\t\t\t\t// TODO: typescript: that doesn't seem right\n\t\t\t\t\tindex_by_values[value] != null\n\t\t\t\t\t\t? index_by_values[value]\n\t\t\t\t\t\t: (index_by_values[value] = Object.keys(index_by_values).length);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst values = Object.keys(index_by_values);\n\t\t\tfor (let point of all_geometries_points) {\n\t\t\t\tconst value = point.attrib_value(indexed_attribute_name);\n\t\t\t\tconst new_index = index_by_values[value];\n\t\t\t\tpoint.set_attrib_index(indexed_attribute_name, new_index);\n\t\t\t}\n\n\t\t\tnew_values_by_attribute_name[indexed_attribute_name] = values;\n\t\t}\n\n\t\t//\n\t\t// 2/3. merge the geos\n\t\t//\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\n\t\t//\n\t\t// 3/3. add the index attrib values\n\t\t//\n\n\t\tconst merged_geometry_wrapper = new this(merged_geometry);\n\t\tObject.keys(new_values_by_attribute_name).forEach((indexed_attribute_name) => {\n\t\t\tconst values = new_values_by_attribute_name[indexed_attribute_name];\n\t\t\tmerged_geometry_wrapper.set_indexed_attribute_values(indexed_attribute_name, values);\n\t\t});\n\n\t\tif (merged_geometry) {\n\t\t\tdelete merged_geometry.userData.mergedUserData;\n\t\t}\n\n\t\treturn merged_geometry;\n\t}\n\n\tsegments() {\n\t\t// const points = this.points();\n\t\tconst index = this.geometry().index?.array || [];\n\t\treturn lodash_chunk(index, 2);\n\t}\n\n\tfaces(): CoreFace[] {\n\t\treturn this.faces_from_geometry();\n\t}\n\tfaces_from_geometry(): CoreFace[] {\n\t\tconst index_array = this.geometry().index?.array || [];\n\t\tconst faces_count = index_array.length / 3;\n\t\treturn lodash_range(faces_count).map((i) => new CoreFace(this, i));\n\t}\n}\n\n// segments_count = 0.5*index.length\n// segments = []\n// lodash_times segments_count, (i)->\n// \tindices = [i, i+1]\n// \tsegments.push(indices) #lodash_map(indices, (index)->points[index])\n\n// segments\n","import {BaseNodeClass} from './nodes/_Base';\nimport {PolyScene} from './scene/PolyScene';\nimport {RenderersController} from './poly/RenderersController';\nimport {NodesRegister, RegisterOptions, BaseNodeConstructor} from './poly/NodesRegister';\nimport {NodeContext} from './poly/NodeContext';\n// import {ViewerLoadersManager} from 'src/engine/viewers/LoadersManager';\n\nexport class Poly {\n\tstatic _instance: Poly | undefined;\n\trenderers_controller: RenderersController = new RenderersController();\n\tnodes_register: NodesRegister = new NodesRegister();\n\n\tscenes_by_uuid: Dictionary<PolyScene> = {};\n\t_env: string | undefined;\n\t// public viewer_loaders_manager: ViewerLoadersManager = new ViewerLoadersManager();\n\n\tstatic instance() {\n\t\treturn (this._instance = this._instance || new Poly());\n\t}\n\tprivate constructor() {}\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tthis.nodes_register.register_node(node, tab_menu_category, options);\n\t}\n\tregistered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass> {\n\t\treturn this.nodes_register.registered_nodes(parent_context, type);\n\t}\n\tin_worker_thread() {\n\t\treturn false;\n\t}\n\tdesktop_controller(): any {}\n\t// notify_scene_loaded(scene: PolyScene) {}\n\n\tplayer_mode(): boolean {\n\t\treturn false;\n\t}\n\n\tlog(...args: any[]) {\n\t\tconsole.log(...args);\n\t}\n\tset_env(env: string) {\n\t\tthis._env = env;\n\t}\n\tget env() {\n\t\treturn this._env;\n\t}\n}\n\n// declare global {\n// \tconst POLY: Poly;\n// }\n\n// declare global {\n// \tinterface Window {\n// \t\tPOLY: Poly;\n// \t}\n// }\n// make sure not to have library: 'POLY' in webpack for this to work\nexport const POLY = Poly.instance();\n","import {CoreGraph, CoreGraphNodeId} from './CoreGraph';\nimport {DirtyController, PostDirtyHook} from './DirtyController';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class CoreGraphNode {\n\t// protected _scene: PolyScene;\n\tprivate _graph: CoreGraph;\n\tprivate _graph_node_id: CoreGraphNodeId;\n\tprivate _dirty_controller: DirtyController = new DirtyController(this);\n\t// protected _name: string;\n\tconstructor(protected _scene: PolyScene, protected _name: string) {\n\t\t// super(...args);\n\t\tthis._graph_node_id = _scene.graph.next_id();\n\t\t_scene.graph.setNode(this);\n\t\tthis._graph = _scene.graph;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tset_name(name: string) {\n\t\tthis._name = name;\n\t}\n\t// set_scene(scene: PolyScene) {\n\t// \tthis._scene = scene;\n\t// \t// this._graph_node = new CoreGraphNode();\n\t// \t// this._graph_node.init(this._scene.graph);\n\t// \tthis._graph = scene.graph;\n\t// \tthis._graph_node_id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// init(graph: CoreGraph) {\n\t// \tthis._graph = graph;\n\t// \tthis._id = this.graph.next_id();\n\t// \tthis.graph.setNode(this);\n\t// }\n\t// full_path: ->\n\t// \t\"node with unknown path #{this.graph_node_id}\"\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\tget graph_node_id(): CoreGraphNodeId {\n\t\treturn this._graph_node_id;\n\t}\n\n\t//\n\t//\n\t// DIRTY CONTROLLER\n\t//\n\t//\n\tget dirty_controller() {\n\t\treturn this._dirty_controller;\n\t}\n\tset_dirty(trigger?: CoreGraphNode | null) {\n\t\ttrigger = trigger || this;\n\t\tthis._dirty_controller.set_dirty(trigger);\n\t}\n\tset_successors_dirty(trigger?: CoreGraphNode) {\n\t\tthis._dirty_controller.set_successors_dirty(trigger);\n\t}\n\tremove_dirty_state() {\n\t\tthis._dirty_controller.remove_dirty_state();\n\t}\n\tget is_dirty() {\n\t\treturn this._dirty_controller.is_dirty;\n\t}\n\tadd_post_dirty_hook(name: string, callback: PostDirtyHook) {\n\t\tthis._dirty_controller.add_post_dirty_hook(name, callback);\n\t}\n\n\t//\n\t//\n\t// GRAPH\n\t//\n\t//\n\n\t// private graph_add() {\n\t// }\n\tgraph_remove() {\n\t\tthis.graph.removeNode(this);\n\t}\n\n\t// _graph_connect: (src, dest)->\n\t// \tthis.graph().connect(src, dest)\n\tadd_graph_input(src: CoreGraphNode): boolean {\n\t\treturn this.graph.connect(src, this);\n\t}\n\tremove_graph_input(src: CoreGraphNode) {\n\t\tthis.graph.disconnect(src, this);\n\t}\n\n\t// graph_disconnect: (src, dest)->\n\t// \tthis.graph().disconnect(src, dest)\n\n\tgraph_disconnect_predecessors() {\n\t\tthis.graph.disconnect_predecessors(this);\n\t}\n\tgraph_disconnect_successors() {\n\t\tthis.graph.disconnect_successors(this);\n\t}\n\n\tgraph_predecessor_ids(): CoreGraphNodeId[] {\n\t\treturn this.graph.predecessor_ids(this._graph_node_id) || [];\n\t}\n\tgraph_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.predecessors(this);\n\t}\n\tgraph_successors(): CoreGraphNode[] {\n\t\treturn this.graph.successors(this);\n\t}\n\tgraph_all_predecessors(): CoreGraphNode[] {\n\t\treturn this.graph.all_predecessors(this);\n\t}\n\tgraph_all_successors(): CoreGraphNode[] {\n\t\treturn this.graph.all_successors(this);\n\t}\n}\n","import {CoreWalker} from 'src/core/Walker';\nimport {DecomposedPath} from 'src/core/DecomposedPath';\n// import {NodeSimple} from 'src/core/graph/NodeSimple'\nimport {BaseParamType, TypedParam} from 'src/engine/params/_Base';\nimport {BaseNodeType, TypedNode} from 'src/engine/nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {BaseContainer} from 'src/engine/containers/_Base';\nimport {CoreObject} from 'src/core/Object';\n\n// type NodeOrParam = BaseNode | BaseParam;\n\nexport abstract class BaseMethod {\n\tpublic node: BaseNodeType;\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this._init_update_dependencies_mode();\n\t\tthis.node = this.param.node;\n\t}\n\n\tstatic required_arguments(): any[] {\n\t\tconsole.warn('Expression.Method._Base.required_arguments virtual method call. Please override');\n\t\treturn [];\n\t}\n\tstatic optional_arguments(): any[] {\n\t\treturn [];\n\t}\n\tstatic min_allowed_arguments_count() {\n\t\treturn this.required_arguments().length;\n\t}\n\tstatic max_allowed_arguments_count() {\n\t\treturn this.min_allowed_arguments_count() + this.optional_arguments().length;\n\t}\n\tstatic allowed_arguments_count(count: number) {\n\t\treturn count >= this.min_allowed_arguments_count() && count <= this.max_allowed_arguments_count();\n\t}\n\n\t// process_arguments_and_dependencies(args){\n\t// \treturn new Promise((resolve, reject)=> {\n\t// \t\treturn this.process_arguments(args, value=> {\n\t// \t\t\tif (this.update_dependencies_mode()) {\n\t// \t\t\t\tthis.update_dependencies();\n\t// \t\t\t}\n\n\t// \t\t\treturn resolve(value);\n\t// \t\t});\n\t// \t});\n\t// }\n\n\tprocess_arguments(args: any): Promise<any> {\n\t\tthrow 'Expression.Method._Base.process_arguments virtual method call. Please override';\n\t}\n\n\tasync get_referenced_node_container(index_or_path: number | string): Promise<BaseContainer> {\n\t\tconst referenced_node = this.get_referenced_node(index_or_path);\n\n\t\tif (referenced_node) {\n\t\t\tconst container = await referenced_node.request_container();\n\t\t\tif (container) {\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\treturn container;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthrow `referenced node invalid: ${referenced_node.full_path()}`;\n\t\t} else {\n\t\t\tthrow `invalid input (${index_or_path})`;\n\t\t}\n\t}\n\n\tget_referenced_param(path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tconst referenced_param = CoreWalker.find_param(this.node, path, decomposed_path);\n\n\t\t// if (referenced_param != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\n\t\t// \t\t//param_connect_result = this.param().add_graph_input(referenced_param)\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_param);\n\t\t// \t\t//if !(param_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no param found for argument ${path}`;\n\t\t// }\n\n\t\treturn referenced_param || null;\n\t}\n\n\tfind_referenced_graph_node(index_or_path: number | string, decomposed_path?: DecomposedPath): CoreGraphNode | null {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\t\t// let node\n\t\tif (is_index) {\n\t\t\tconst index = index_or_path as number;\n\t\t\treturn this.node.io.inputs.input_graph_node(index);\n\t\t} else {\n\t\t\tconst path = index_or_path as string;\n\t\t\treturn this.get_referenced_node(path, decomposed_path);\n\t\t}\n\t}\n\tget_referenced_node(index_or_path: string | number, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\t// if ((index_or_path != null) && (index_or_path.is_a != null) && index_or_path.is_a(BaseNode)) {\n\t\t// \tindex_or_path = index_or_path.full_path();\n\t\t// }\n\t\tif (lodash_isString(index_or_path)) {\n\t\t\tconst path = index_or_path;\n\t\t\treturn CoreWalker.find_node(this.node, path, decomposed_path);\n\t\t} else {\n\t\t\tconst index = index_or_path;\n\t\t\treturn this.node.io.inputs.input(index);\n\t\t}\n\n\t\t// if (referenced_node != null) {\n\n\t\t// \tif (this.update_dependencies_mode()) {\n\t\t// \t\t//node_connect_result = this.param().add_graph_input(referenced_node)\n\n\t\t// \t\tconst expression_node_connect_result = this.jsep_node()._graph_node.add_graph_input(referenced_node);\n\t\t// \t\t//if !(node_connect_result && expression_node_connect_result)\n\t\t// \t\tif (!expression_node_connect_result) {\n\t\t// \t\t\tthrow \"cannot create infinite graph\";\n\t\t// \t\t}\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tthrow `no node found for argument ${index_or_path}`;\n\t\t// }\n\n\t\t// return referenced_node;\n\t}\n\n\tfind_dependency(args: any): MethodDependency | null {\n\t\treturn null;\n\t}\n\n\tcreate_dependency_from_index_or_path(index_or_path: number | string): MethodDependency | null {\n\t\t// console.log(\"is_index\", index_or_path)\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst node = this.find_referenced_graph_node(index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\treturn this.create_dependency(node, index_or_path, decomposed_path);\n\t\t}\n\t\treturn null;\n\t}\n\tcreate_dependency(\n\t\tnode: CoreGraphNode,\n\t\tindex_or_path: number | string,\n\t\tdecomposed_path?: DecomposedPath\n\t): MethodDependency | null {\n\t\tif (CoreObject.is_a(node, TypedNode) || CoreObject.is_a(node, TypedParam)) {\n\t\t\tconst node_or_param = node as BaseNodeType;\n\t\t\treturn MethodDependency.create(this.param, index_or_path, node_or_param, decomposed_path?.named_nodes);\n\t\t}\n\t\treturn MethodDependency.create(this.param, index_or_path, node, decomposed_path?.named_nodes);\n\t}\n\n\t//\n\t//\n\t// UPDATE DEPENDENCIES\n\t//\n\t//\n\t// _init_update_dependencies_mode() {\n\t// \treturn this.set_update_dependencies_mode(false);\n\t// }\n\t// set_update_dependencies_mode(mode){\n\t// \treturn this._update_dependencies_mode = mode;\n\t// }\n\t// update_dependencies_mode() {\n\t// \treturn this._update_dependencies_mode;\n\t// }\n\t// update_dependencies() {}\n}\n//\n","import {PolyScene} from '../scene/PolyScene';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n// import {NamedGraphNode} from 'src/core/graph/NamedGraphNode';\n\n// import {BaseParam} from 'src/engine/params/_Base';\n// import {GeometryContainer} from 'src/engine/containers/Geometry';\n// import {UIData} from './UIData';\n\n// import {Bypass} from './concerns/Bypass';\n// import {ConnectionsOwner} from './concerns/ConnectionsOwner';\n// import {ContainerOwner} from './concerns/ContainerOwner';\n// import {Cook} from './concerns/Cook';\n// import {CustomNode} from './concerns/CustomNode';\n// import {Dependencies} from './concerns/old/Dependencies';\n// import {DisplayFlag} from './concerns/DisplayFlag';\n// import {Errored} from './concerns/Errored';\n// import {HierarchyChildrenOwner} from './concerns/HierarchyChildrenOwner';\n// import {HierarchyParentOwner} from './concerns/old/HierarchyParentOwner';\n// import {InputsClonable} from './concerns/InputsClonable';\n// import {InputsOwner} from './concerns/InputsOwner';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/old/LifeCycle';\n// import {Named} from './concerns/Named';\n// import {OutputsOwner} from './concerns/OutputsOwner';\n// import {ParamsOwner} from './concerns/ParamsOwner';\n// import {Selectable} from './concerns/old/Selectable';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {Visit} from './concerns/Visit';\n\nimport {UIData} from './utils/UIData';\nimport {FlagsController} from './utils/FlagsController';\nimport {StatesController} from './utils/StatesController';\nimport {HierarchyParentController} from './utils/hierarchy/ParentController';\nimport {HierarchyChildrenController} from './utils/hierarchy/ChildrenController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {TypedContainerController} from './utils/ContainerController';\nimport {CookController} from './utils/CookController';\nimport {DependenciesController} from './utils/DependenciesController';\nimport {NameController} from './utils/NameController';\nimport {NodeSerializer, NodeSerializerData} from './utils/Serializer';\nimport {ParamsController} from './utils/params/ParamsController';\nimport {ParamConstructorMap} from '../params/types/ParamConstructorMap';\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\n\nimport {NodeParamsConfig} from './utils/params/ParamsConfig';\nimport {ParamsValueAccessor, ParamsValueAccessorType} from 'src/engine/nodes/utils/params/ParamsValueAccessor';\nimport {ProcessingContext} from './utils/ProcessingContext';\nimport {IOController} from './utils/connections/IOController';\n\n// import {BaseContainer} from '../containers/_Base';\n\n// import {BaseParam} from 'src/engine/params/_Base';\n// import {BooleanParam} from 'src/engine/params/Boolean';\n// import {ButtonParam} from 'src/engine/params/Button';\n// import {ColorParam} from 'src/engine/params/Color';\n// import {FloatParam} from 'src/engine/params/Float';\n// import {IntegerParam} from 'src/engine/params/Integer';\n// import {OperatorPathParam} from 'src/engine/params/OperatorPath';\n// import {RampParam} from 'src/engine/params/Ramp';\n// import {SeparatorParam} from 'src/engine/params/Separator';\n// import {StringParam} from 'src/engine/params/String';\n// import {Vector2Param} from 'src/engine/params/Vector2';\n// import {Vector3Param} from 'src/engine/params/Vector3';\n// import {Vector4Param} from 'src/engine/params/Vector4';\nimport {NodeEvent} from '../poly/NodeEvent';\nimport {NodeContext} from '../poly/NodeContext';\n\n// import {TypedContainer} from 'src/engine/containers/_Base';\nimport {ParamsAccessorType, ParamsAccessor} from './utils/params/ParamsAccessor';\n\nexport interface NodeVisitor {\n\tvisit_node: (node: BaseNodeType) => any;\n\tvisit_node_obj: (node: BaseNodeType) => any;\n}\n\ninterface NodeDeletedEmitData {\n\tparent_id: string;\n}\ninterface NodeCreatedEmitData {\n\tchild_node_json: NodeSerializerData;\n}\ntype EmitDataByNodeEventMapGeneric = {[key in NodeEvent]: any};\nexport interface EmitDataByNodeEventMap extends EmitDataByNodeEventMapGeneric {\n\t[NodeEvent.CREATED]: NodeCreatedEmitData;\n\t[NodeEvent.DELETED]: NodeDeletedEmitData;\n\t[NodeEvent.ERROR_UPDATED]: undefined;\n}\n// emit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n// \temit(event_name: NodeEvent.DELETED, data: NodeDeletedEmitData): void;\n// \temit(event_name: NodeEvent.NAME_UPDATED): void;\n// \temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n// \temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n// \temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n// \temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n// \temit(event_name: NodeEvent.ERROR_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n// \temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n// \temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\nimport {ContainerMap} from 'src/engine/containers/utils/ContainerMap';\nimport {ContainableMap} from 'src/engine/containers/utils/ContainableMap';\nimport {BaseContainer} from '../containers/_Base';\nimport {ParamOptions} from '../params/utils/OptionsController';\nimport {ParamType} from '../poly/ParamType';\nimport {DisplayNodeController} from './utils/DisplayNodeController';\n\n// type Container = ContainerMap[KT];\ntype KT = keyof ContainerMap;\nexport class TypedNode<T extends KT, NT extends BaseNodeType, K extends NodeParamsConfig> extends CoreGraphNode {\n\tcontainer_controller: TypedContainerController<ContainerMap[T]> = new TypedContainerController<ContainerMap[T]>(\n\t\tthis,\n\t\tBaseContainer\n\t);\n\n\tprivate _parent_controller: HierarchyParentController | undefined;\n\n\tprivate _ui_data: UIData | undefined;\n\n\tprivate _dependencies_controller: DependenciesController | undefined;\n\tprivate _states: StatesController | undefined;\n\tprivate _lifecycle: LifeCycleController | undefined;\n\tprivate _serializer: NodeSerializer | undefined;\n\tprivate _cook_controller: CookController | undefined;\n\tpublic readonly flags: FlagsController | undefined;\n\tprotected _display_node_controller: DisplayNodeController | undefined;\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\n\tprivate _params_controller: ParamsController | undefined;\n\treadonly params_config: K | undefined;\n\treadonly pv: ParamsValueAccessorType<K> = (<unknown>new ParamsValueAccessor<K>()) as ParamsValueAccessorType<K>;\n\t// readonly pv: ParamsValueAccessor<K> = new ParamsValueAccessor<K>(this);\n\treadonly p: ParamsAccessorType<K> = (<unknown>new ParamsAccessor<K>()) as ParamsAccessorType<K>;\n\t// readonly p: ParamsAccessor<K> = new ParamsAccessor<K>(this);\n\n\tprivate _processing_context: ProcessingContext | undefined;\n\tprivate _name_controller: NameController | undefined;\n\tprivate _io: IOController<NT> | undefined;\n\tget parent_controller(): HierarchyParentController {\n\t\treturn (this._parent_controller = this._parent_controller || new HierarchyParentController(this));\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn [];\n\t}\n\n\tprivate _children_controller: HierarchyChildrenController | undefined;\n\tprotected _children_controller_context: NodeContext | undefined;\n\tget children_controller_context() {\n\t\treturn this._children_controller_context;\n\t}\n\tprivate _create_children_controller(): HierarchyChildrenController | undefined {\n\t\tif (this._children_controller_context) {\n\t\t\treturn new HierarchyChildrenController(this, this._children_controller_context);\n\t\t}\n\t}\n\tget children_controller(): HierarchyChildrenController | undefined {\n\t\treturn (this._children_controller = this._children_controller || this._create_children_controller());\n\t}\n\tchildren_allowed(): boolean {\n\t\treturn this._children_controller_context != null;\n\t}\n\n\tget ui_data(): UIData {\n\t\treturn (this._ui_data = this._ui_data || new UIData(this));\n\t}\n\tget dependencies_controller(): DependenciesController {\n\t\treturn (this._dependencies_controller = this._dependencies_controller || new DependenciesController(this));\n\t}\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\tget lifecycle(): LifeCycleController {\n\t\treturn (this._lifecycle = this._lifecycle || new LifeCycleController(this));\n\t}\n\tget serializer(): NodeSerializer {\n\t\treturn (this._serializer = this._serializer || new NodeSerializer(this));\n\t}\n\t// get container_controller(): TypedContainerController<T> {\n\t// \treturn (this._container_controller = this._container_controller || new TypedContainerController<T>(this));\n\t// }\n\tget cook_controller(): CookController {\n\t\treturn (this._cook_controller = this._cook_controller || new CookController(this));\n\t}\n\tget io(): IOController<NT> {\n\t\treturn (this._io = this._io || new IOController<NT>((<unknown>this) as NT));\n\t}\n\tget name_controller(): NameController {\n\t\treturn (this._name_controller = this._name_controller || new NameController(this));\n\t}\n\tset_name(name: string) {\n\t\tthis.name_controller.set_name(name);\n\t}\n\t_set_core_name(name: string) {\n\t\tthis._name = name;\n\t}\n\tget params(): ParamsController {\n\t\treturn (this._params_controller = this._params_controller || new ParamsController(this));\n\t}\n\tget processing_context(): ProcessingContext {\n\t\treturn (this._processing_context = this._processing_context || new ProcessingContext(this));\n\t}\n\n\tconstructor(scene: PolyScene, name: string = 'BaseNode') {\n\t\tsuper(scene, name);\n\t}\n\n\tprivate _initialized: boolean = false;\n\tpublic initialize_base_and_node() {\n\t\tif (!this._initialized) {\n\t\t\tthis.initialize_base_node(); // for base classes of Sop, Obj...\n\t\t\tthis.initialize_node(); // for Derivated node clases, like BoxSop, TransformSop...\n\t\t\tthis._initialized = true;\n\t\t} else {\n\t\t\tconsole.warn('node already initialized');\n\t\t}\n\t}\n\tprotected initialize_base_node() {}\n\tprotected initialize_node() {}\n\t// constructor() {\n\t// \tsuper('base_node');\n\n\t// \t// this._init_node_scene()\n\t// \t// this._init_context_owner()\n\t// \t// this._init_dirtyable()\n\t// \t// this._init_graph_node()\n\n\t// \t// this._init_bypass_flag();\n\t// \t// this._init_display_flag();\n\t// \t//this._init_context()\n\t// \t// this._init_cook();\n\t// \t// this._init_error();\n\t// \t// this._init_inputs();\n\t// \t// this._init_outputs();\n\t// \t// this._init_hierarchy_parent_owner();\n\t// \t//this._init_time_dependent()\n\t// \t// this._init_ui_data();\n\t// }\n\tstatic type(): string {\n\t\tthrow 'type to be overriden';\n\t}\n\tget type() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.type();\n\t}\n\tstatic node_context(): NodeContext {\n\t\tthrow 'requires override';\n\t}\n\tnode_context(): NodeContext {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.node_context();\n\t}\n\n\tstatic required_three_imports(): string[] {\n\t\treturn [];\n\t}\n\tstatic required_imports() {\n\t\tlet three_imports = this.required_three_imports();\n\t\tif (three_imports) {\n\t\t\t// if (!lodash_isArray(three_imports)) {\n\t\t\t// \tthree_imports = [<unknown>three_imports as string];\n\t\t\t// }\n\t\t\treturn three_imports.map((e) => `three/examples/jsm/${e}`);\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\trequired_imports() {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.required_imports();\n\t}\n\tstatic require_webgl2(): boolean {\n\t\treturn false;\n\t}\n\trequire_webgl2(): boolean {\n\t\tconst c = this.constructor as typeof BaseNodeClass;\n\t\treturn c.require_webgl2();\n\t}\n\n\t// set_scene(scene: PolyScene) {\n\t// \tsuper.set_scene(scene);\n\t// \t// this.io.inputs._init_graph_node_inputs();\n\t// }\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node']> {\n\t// \treturn visitor.visit_node(this);\n\t// }\n\tset_parent(parent: BaseNodeType | null) {\n\t\tthis.parent_controller.set_parent(parent);\n\t}\n\tget parent() {\n\t\treturn this.parent_controller.parent;\n\t}\n\tget root() {\n\t\treturn this._scene.root;\n\t}\n\tfull_path(): string {\n\t\treturn this.parent_controller.full_path();\n\t}\n\n\t// params\n\tcreate_params() {}\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\toptions?: ParamOptions\n\t): ParamConstructorMap[T] | undefined {\n\t\treturn this._params_controller?.add_param(type, name, default_value, options);\n\t}\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tthis._params_controller?.within_param_folder(folder_name, callback);\n\t// }\n\n\t// cook\n\tcook(input_contents: any[]): any {\n\t\treturn null;\n\t}\n\n\t// container\n\trequest_container() {\n\t\treturn this.container_controller.request_container();\n\t}\n\tset_container(content: ContainableMap[T], message: string | null = null) {\n\t\t// if message?\n\t\t// TODO: typescript: why is this a type of never\n\t\tthis.container_controller.container.set_content(content as never); //, this.self.cook_eval_key());\n\t\tif (content != null) {\n\t\t\tif (!(content as any).name) {\n\t\t\t\t(content as any).name = this.full_path();\n\t\t\t}\n\t\t\tif (!(content as any).node) {\n\t\t\t\t(content as any).node = this;\n\t\t\t}\n\t\t}\n\t\t//if @_container.has_content()?\n\t\tthis.cook_controller.end_cook(message);\n\t}\n\n\t// hierarchy\n\tcreate_node(type: string) {\n\t\treturn this.children_controller?.create_node(type);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis.children_controller?.remove_node(node);\n\t}\n\tchildren() {\n\t\treturn this.children_controller?.children() || [];\n\t}\n\tnode(path: string) {\n\t\treturn this.children_controller?.find_node(path) || null;\n\t}\n\tnodes_by_type(type: string) {\n\t\treturn this.children_controller?.nodes_by_type(type) || [];\n\t}\n\n\t// inputs\n\tset_input(input_index_or_name: number | string, node: NT | null, output_index_or_name: number | string = 0) {\n\t\tthis.io.inputs.set_input(input_index_or_name, node, output_index_or_name);\n\t}\n\n\t// emit\n\n\temit(event_name: NodeEvent.CREATED, data: EmitDataByNodeEventMap[NodeEvent.CREATED]): void;\n\temit(event_name: NodeEvent.DELETED, data: EmitDataByNodeEventMap[NodeEvent.DELETED]): void;\n\temit(event_name: NodeEvent.NAME_UPDATED): void;\n\temit(event_name: NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE): void;\n\temit(event_name: NodeEvent.NAMED_INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.NAMED_OUTPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.INPUTS_UPDATED): void;\n\temit(event_name: NodeEvent.PARAMS_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_POSITION_UPDATED): void;\n\temit(event_name: NodeEvent.UI_DATA_COMMENT_UPDATED): void;\n\temit(event_name: NodeEvent.ERROR_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_BYPASS_UPDATED): void;\n\temit(event_name: NodeEvent.FLAG_DISPLAY_UPDATED): void;\n\temit(event_name: NodeEvent.SELECTION_UPDATED): void;\n\temit(event_name: NodeEvent, data: object | null = null): void {\n\t\t// super.emit(event_name, data);\n\t\tthis.scene.events_controller.dispatch(this, event_name, data);\n\t}\n\n\t// serializer\n\tto_json(include_param_components: boolean = false) {\n\t\treturn this.serializer.to_json(include_param_components);\n\t}\n}\n\nexport type BaseNodeType = TypedNode<any, BaseNodeType, any>;\nexport class BaseNodeClass extends TypedNode<any, BaseNodeType, any> {}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\n\nfunction Pass() {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n}\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { Pass };\n","import {TypedNode} from '../_Base';\n\nimport {Material} from 'three/src/materials/Material';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {MaterialContainer} from 'src/engine/containers/Material';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n// type RenderHook = (object: Object3D) => void;\n\nexport abstract class TypedMatNode<M extends Material, K extends NodeParamsConfig> extends TypedNode<\n\t'MATERIAL',\n\tBaseMatNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<MaterialContainer> = new TypedContainerController<MaterialContainer>(\n\t\tthis,\n\t\tMaterialContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MAT;\n\t}\n\n\tprotected _material: M | undefined;\n\t// protected _update_methods: RenderHook[] = [];\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this._update_methods = [];\n\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_outputs({has_outputs: false});\n\n\t\t// this.container_controller.init(MaterialContainer);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_material_name.bind(this));\n\n\t\tthis.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\n\t\t// it's probably good not to have to create any material in the constructor\n\t\t// but only on request\n\t\t// this._material = this.create_material();\n\t\t// this.set_material(this._material);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t}\n\n\tprivate set_material_name() {\n\t\t// ensures the material has a full path set\n\t\t// allowing the render hook to be set\n\t\t//this.set_material(@_material)\n\t\tif (this._material) {\n\t\t\tthis._material.name = this.full_path();\n\t\t}\n\t}\n\n\tabstract create_material(): M;\n\tget material() {\n\t\treturn (this._material = this._material || this.create_material());\n\t}\n\t//\n\n\tset_material(material: Material) {\n\t\tthis.set_container(material);\n\t}\n\n\t// add_update_method(method, arg?: any) {\n\t// \tthis._update_methods.push([method.bind(this), arg]);\n\t// }\n\n\t//run_update_methods: ->\n\n\tadd_render_hook(object: Object3D) {}\n}\n//delete object.onBeforeRender\n\nexport type BaseMatNodeType = TypedMatNode<Material, any>;\nexport class BaseMatNodeClass extends TypedMatNode<Material, any> {\n\tcreate_material() {\n\t\treturn new Material();\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nimport {TypedNode, BaseNodeType} from '../_Base';\n// import {BaseSopNode} from '../sop/_Base';\n// import {LookAt} from './Concerns/LookAt';\nimport {ObjectContainer} from 'src/engine/containers/Object';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {ObjectsManagerNode} from '../manager/ObjectsManager';\nimport {Group} from 'three/src/objects/Group';\n\nconst INPUT_OBJECT_NAME = 'parent object';\nconst DEFAULT_INPUT_NAMES = [INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME, INPUT_OBJECT_NAME];\n\ninterface Object3DWithNode extends Object3D {\n\tnode: BaseNodeType;\n}\n// interface BaseObjNodeVisitor extends BaseNodeVisitor {\n// \tvisit_node_obj: (node: BaseObjNodeType) => any;\n// }\n\nexport enum ObjNodeRenderOrder {\n\tMANAGER = 0,\n\tFOG = 1,\n\tCAMERA = 2,\n\tLIGHT = 3,\n\tEVENT = 4,\n\tMAT = 5,\n}\n\nexport class TypedObjNode<O extends Object3D, K extends NodeParamsConfig> extends TypedNode<\n\t'OBJECT',\n\tBaseObjNodeType,\n\tK\n> {\n\tcontainer_controller: TypedContainerController<ObjectContainer> = new TypedContainerController<ObjectContainer>(\n\t\tthis,\n\t\tObjectContainer\n\t);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = true;\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.OBJ;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\t// protected _main_group = new Group();\n\tprotected _children_group = new Group();\n\tprotected _object!: O;\n\t// _sop_loaded: boolean = false;\n\n\t// protected _look_at_controller: LookAtController | undefined;\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\t// protected _transform_controller: TransformController | undefined;\n\t// get transform_controller(): TransformController {\n\t// \treturn (this._transform_controller = this._transform_controller || new TransformController(this));\n\t// }\n\n\tprotected _attachable_to_hierarchy: boolean = true;\n\tget attachable_to_hierarchy() {\n\t\treturn this._attachable_to_hierarchy;\n\t}\n\tprotected _used_in_scene: boolean = true;\n\tget used_in_scene() {\n\t\treturn this._used_in_scene;\n\t}\n\t// TODO call set_used_in_scene(false) when node is deleted\n\tset_used_in_scene(state: boolean) {\n\t\tthis._used_in_scene = state;\n\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\tconst root = this.parent as ObjectsManagerNode;\n\t\t\tif (root) {\n\t\t\t\troot.update_object(this);\n\t\t\t}\n\t\t}\n\t}\n\tadd_object_to_parent(parent: Object3D) {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tparent.add(this.object);\n\t\t}\n\t}\n\tremove_object_from_parent() {\n\t\tif (this.attachable_to_hierarchy) {\n\t\t\tconst parent = this.object.parent;\n\t\t\tif (parent) {\n\t\t\t\tparent.remove(this.object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _displayed_in_scene: boolean = true;\n\t// get displayed_in_scene() {\n\t// \treturn this._displayed_in_scene;\n\t// }\n\t// set_displayed_in_scene(state:boolean){\n\t// \tthis._displayed_in_scene = state;\n\t// }\n\n\tinitialize_base_node() {\n\t\t// this.container_controller.init(ObjectContainer);\n\t\tthis._object = this._create_object_with_attributes();\n\t\t// this._init_container_owner('Object');\n\t\t// this.flags.add_display();\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_object_name.bind(this));\n\t\tthis.set_object_name();\n\n\t\t// this.io.inputs.add_hook(() => {\n\t\t// \tthis.transform_controller.on_input_updated();\n\t\t// });\n\t\t// this._init_bypass_flag({\n\t\t// \thas_bypass_flag: false,\n\t\t// });\n\n\t\t// this._sop_loaded = false; // TODO: typescript, this should be moved to GeoObjNode\n\t}\n\n\t// this.add_param 'toggle', 'display', 1,\n\t// \tcallback: this.post_state_display_flag.bind(this)\n\n\t// cook: ->\n\t// \tsuper\n\t// \tconsole.error(this.constructor, 'cook method is not overloaded')\n\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t// \t#console.log(\"#{this.full_path()} set dirty by #{original_trigger_graph_node?.full_path()} and #{direct_trigger_graph_node?.full_path()}\")\n\t// \tthis.is_displayed (is_displayed)=>\n\t// \t\tif is_displayed\n\t// \t\t\tthis.parent().update_object(this)\n\n\t//post_remove_dirty_state: ->\n\t//console.log(\"obj #{this.full_path()} remove dirty\")\n\t//console.log(\"remove_dirty_state: #{this.full_path()}\")\n\n\t// set_object: (object)->\n\n\t// \tif object?\n\t// \t\tobject.name = this.name()\n\t// \t\tthis.set_container(object)\n\t// get main_group() {\n\t// \treturn this._main_group;\n\t// }\n\tget children_group() {\n\t\treturn this._children_group;\n\t}\n\tget object() {\n\t\treturn this._object; //= this._object || this._create_object_with_attributes()\n\t}\n\n\t_create_object_with_attributes(): O {\n\t\tconst object = this.create_object();\n\t\t// object.name = 'content';\n\t\t// if (object != null) {\n\t\t// \tobject.name = this.full_path();\n\t\t(object as Object3DWithNode).node = this;\n\t\t// }\n\t\t// this._main_group.add(this._children_group);\n\t\tobject.add(this._children_group);\n\t\treturn object as O;\n\t}\n\tprivate set_object_name() {\n\t\tif (this._object) {\n\t\t\tthis._object.name = this.full_path();\n\t\t\tthis._children_group.name = `${this.full_path()}:parented_outputs`;\n\t\t}\n\t}\n\t// private set_group_name() {\n\t// \t// ensures the material has a full path set\n\t// \t// allowing the render hook to be set\n\t// \t//this.set_material(@_material)\n\t// \tconst group = this.group;\n\t// \tif (group) {\n\t// \t\tgroup.name = this.full_path();\n\t// \t}\n\t// }\n\n\tcreate_object(): Object3D {\n\t\treturn new Object3D();\n\t}\n\n\t// request_display_node() {}\n\n\tis_display_node_cooking(): boolean {\n\t\treturn false;\n\t}\n\n\t// post_state_display_flag() {\n\t// \tconst object = this.object;\n\t// \tif (object != null) {\n\t// \t\tconst displayed = this.is_displayed();\n\t// \t\tif (displayed) {\n\t// \t\t\tobject.visible = displayed;\n\n\t// \t\t\tif (!this._sop_loaded) {\n\t// \t\t\t\tthis.request_display_node();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_displayed(): boolean {\n\t\treturn this.flags?.display?.active || false;\n\t\t// if (callback == null) {\n\t\t// \tthrow 'no callback given to is_displayed';\n\t\t// }\n\n\t\t// const display_flag_state = this.display_flag_state();\n\t\t// return callback(display_flag_state);\n\t}\n\t// if !display_flag_state\n\t// \tcallback(false)\n\n\t// else\n\t// \tthis.param('display').eval (val)->\n\t// \t\tcallback(val)\n\n\t// accepts_visitor<T extends NodeVisitor>(visitor: T): ReturnType<T['visit_node_obj']> {\n\t// \treturn visitor.visit_node_obj(this);\n\t// }\n\n\t// replaces Dirtyable (TODO: try and replace this method name)\n\t// protected _init_dirtyable_hook() {\n\t// this.add_post_dirty_hook(this._cook_main_without_inputs_later.bind(this));\n\t// }\n\t// private _cook_main_without_inputs_later() {\n\t// \tconst c = () => {\n\t// \t\tthis.cook_controller.cook_main_without_inputs();\n\t// \t};\n\t// \tsetTimeout(c, 0);\n\t// \t// this.eval_all_params().then( ()=>{ this.cook() } )\n\t// }\n}\n\nexport type BaseObjNodeType = TypedObjNode<Object3D, any>;\nexport class BaseObjNodeClass extends TypedObjNode<Object3D, any> {}\n","// import {Vector3} from 'three/src/math/Vector3'\n// import {Vector2} from 'three/src/math/Vector2'\n\nimport {CoreWalker} from 'src/core/Walker';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n// import {NodeScene} from 'src/core/graph/NodeScene';\n// import {NamedGraphNode} from 'src/core/graph/NamedGraphNode';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\n\n// import {CallbackOption} from './concerns/options/Callback'\n// import {ColorOption} from './concerns/options/Color'\n// import {CookOption} from './concerns/options/Cook'\n// import {DesktopOption} from './concerns/options/Desktop'\n// import {ExpressionOption} from './concerns/options/Expression'\n// import {MenuOption} from './concerns/options/Menu'\n// import {NodeSelectionOption} from './concerns/options/NodeSelection'\n// import {RangeOption} from './concerns/options/Range'\n// import {AssetReferenceOption} from './concerns/options/AssetReference'\n// import {SpareOption} from './concerns/options/Spare'\n// import {MultilineOption} from './concerns/options/Multiline'\n// import {TextureOption} from './concerns/options/Texture'\n// import {VisibleOption} from './concerns/options/Visible'\n\n// import {Emit} from './concerns/Emit';\n// import {Errored} from './concerns/Errored';\n// import {Eval} from './concerns/Eval';\n// import {Expression} from './concerns/Expression';\n// import {Hierarchy} from './concerns/Hierarchy';\n// import {Json} from './concerns/Json';\n// import {Named} from './concerns/Named';\n// import {Node} from './concerns/Node';\n// import {Options} from './concerns/Options';\n// import {TimeDependent} from './concerns/TimeDependent';\n// import {Type} from './concerns/Type';\n// import {UIDataOwner} from './concerns/UIDataOwner';\n// import {VisitorsBase} from './concerns/visitors/_Base';\n\nimport {OptionsController} from './utils/OptionsController';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {EmitController} from './utils/EmitController';\nimport {ParamSerializer} from './utils/Serializer';\nimport {StatesController} from './utils/StatesController';\n// import {UIData} from './utils/UIData';\n\nimport {TypedMultipleParam} from './_Multiple';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {PolyScene} from '../scene/PolyScene';\n\nimport {ParamInitValuesTypeMap} from '../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../params/types/ParamValuesTypeMap';\nimport {ParamValueSerializedTypeMap} from '../params/types/ParamValueSerializedTypeMap';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n// import {TypedNumericParam} from './_Numeric';\n\n// export interface ParamVisitor {\n// \tvisit_param: (param: BaseParamType) => any;\n// \tvisit_multiple_param: (param: TypedMultipleParam<any>) => any;\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\n// type ParamTypeElem = ParamType;\ntype ComputeCallback = (value: void) => void;\n\nexport abstract class TypedParam<T extends ParamType> extends CoreGraphNode {\n\t// protected _raw_input: ParamInitValuesTypeMap[T];\n\tprotected _default_value!: ParamInitValuesTypeMap[T];\n\tprotected _raw_input!: ParamInitValuesTypeMap[T];\n\tprotected _value!: ParamValuesTypeMap[T];\n\t// protected _expression: string;\n\tprotected _node!: BaseNodeType;\n\tprotected _parent_param: TypedMultipleParam<any> | undefined;\n\tprotected _components: FloatParam[] | undefined;\n\tprotected _compute_resolves: ComputeCallback[] | undefined;\n\n\tprivate _options: OptionsController = new OptionsController(this);\n\tget options(): OptionsController {\n\t\treturn (this._options = this._options || new OptionsController(this));\n\t}\n\tprivate _emit_controller: EmitController = new EmitController(this);\n\tget emit_controller(): EmitController {\n\t\treturn (this._emit_controller = this._emit_controller || new EmitController(this));\n\t}\n\tprotected _expression_controller: ExpressionController<T> | undefined;\n\tget expression_controller(): ExpressionController<T> | undefined {\n\t\treturn this._expression_controller; // =\n\t\t//this._expression_controller || new ExpressionController(this);\n\t}\n\tprivate _serializer: ParamSerializer | undefined;\n\tget serializer(): ParamSerializer {\n\t\treturn (this._serializer = this._serializer || new ParamSerializer(this));\n\t}\n\tprivate _states: StatesController | undefined;\n\tget states(): StatesController {\n\t\treturn (this._states = this._states || new StatesController(this));\n\t}\n\t// private _ui_data: UIData | undefined;\n\t// get ui_data(): UIData {\n\t// \treturn (this._ui_data = this._ui_data || new UIData(this.scene, this));\n\t// }\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseParam');\n\t\tthis.initialize_param();\n\t}\n\tinitialize_value() {}\n\tinitialize_param() {}\n\t// \t// this.add_post_dirty_hook(this._remove_node_param_cache.bind(this))\n\t// }\n\t// initialize() {\n\t// \tthis.init_components();\n\t// \t// this.init_expression()\n\t// \t// this._init_ui_data()\n\t// }\n\t// accepts_visitor<T extends ParamVisitor>(visitor: T): ReturnType<T['visit_param']> {\n\t// \treturn visitor.visit_param(this);\n\t// }\n\n\t//\n\t// init_expression() {}\n\n\t// type\n\tstatic type(): ParamType {\n\t\treturn ParamType.FLOAT; // adding a type here, but just to not have a compile error\n\t}\n\tget type(): T {\n\t\treturn (this.constructor as typeof BaseParamClass).type() as T;\n\t}\n\tget is_numeric(): boolean {\n\t\treturn false;\n\t}\n\n\t// name\n\tset_name(name: string) {\n\t\tsuper.set_name(name);\n\t\t// this.self.name_graph_node().set_dirty();\n\t\t// this.self.name_graph_node().remove_dirty_state();\n\t}\n\n\tget value(): ParamValuesTypeMap[T] {\n\t\treturn this._value;\n\t}\n\tabstract get default_value_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get raw_input_serialized(): ParamInitValueSerializedTypeMap[T];\n\tabstract get value_serialized(): ParamValueSerializedTypeMap[T];\n\tconvert(raw_val: any): ParamValuesTypeMap[T] | null {\n\t\treturn null;\n\t}\n\tstatic are_raw_input_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_raw_input_equal(other_raw_input: ParamInitValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_raw_input_equal(this._raw_input, other_raw_input);\n\t}\n\tstatic are_values_equal(val1: any, val2: any) {\n\t\treturn false;\n\t}\n\tis_value_equal(other_val: ParamValuesTypeMap[T]) {\n\t\treturn (this.constructor as any).are_values_equal(this.value, other_val);\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t\treturn raw_input;\n\t}\n\tset(raw_input: ParamInitValuesTypeMap[T]): void {\n\t\tthis._raw_input = this._clone_raw_input(raw_input);\n\t\tthis.emit_controller.emit(ParamEvent.RAW_INPUT_UPDATED);\n\t\tthis.process_raw_input();\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget is_default(): boolean {\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\n\tprotected process_raw_input() {}\n\tprivate _is_computing: boolean = false;\n\tasync compute(): Promise<void> {\n\t\tif (this.scene.loading_controller.is_loading) {\n\t\t\tconsole.warn(`param attempt to compute ${this.full_path()}`);\n\t\t}\n\n\t\tif (this.is_dirty) {\n\t\t\tif (!this._is_computing) {\n\t\t\t\tthis._is_computing = true;\n\t\t\t\tawait this.process_computation();\n\t\t\t\tthis._is_computing = false;\n\n\t\t\t\tif (this._compute_resolves) {\n\t\t\t\t\tlet callback: ComputeCallback | undefined;\n\t\t\t\t\twhile ((callback = this._compute_resolves.pop())) {\n\t\t\t\t\t\tcallback();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tthis._compute_resolves = this._compute_resolves || [];\n\t\t\t\t\tthis._compute_resolves.push(resolve);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {}\n\t// set_default_value(default_value: ParamValuesTypeMap[T]) {\n\t// \tthis._default_value = default_value;\n\t// }\n\tset_init_value(init_value: ParamInitValuesTypeMap[T]) {\n\t\tthis._default_value = init_value; //this.convert(init_value);\n\t\tthis._raw_input = this._clone_raw_input(init_value);\n\t\tif (!this.is_multiple) {\n\t\t\tthis.set(init_value);\n\t\t}\n\t}\n\t// eval_p(): Promise<ParamValuesTypeMap[T]> {\n\t// \treturn new Promise((resolve, reject) => {\n\t// \t\tresolve();\n\t// \t});\n\t// }\n\n\t// node\n\tset_node(node: BaseNodeType | null) {\n\t\tif (!node) {\n\t\t\tif (this._node) {\n\t\t\t\tthis._node.params.params_node?.remove_graph_input(this);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._node = node;\n\t\t\tif (this.options.makes_node_dirty_when_dirty() && !this.parent_param) {\n\t\t\t\tnode.params.params_node?.add_graph_input(this);\n\t\t\t}\n\t\t}\n\n\t\tif (this.components) {\n\t\t\tfor (let c of this.components) {\n\t\t\t\tc.set_node(node);\n\t\t\t}\n\t\t}\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget parent() {\n\t\treturn this.node;\n\t}\n\n\t// hierarchy\n\tset_parent_param(param: TypedMultipleParam<any>) {\n\t\tparam.add_graph_input(this);\n\t\tthis._parent_param = param;\n\t}\n\tget parent_param(): TypedMultipleParam<any> | undefined {\n\t\treturn this._parent_param;\n\t}\n\thas_parent_param(): boolean {\n\t\treturn this._parent_param != null;\n\t}\n\tfull_path(): string {\n\t\treturn this.node?.full_path() + '/' + this.name;\n\t}\n\tpath_relative_to(node: BaseNodeType | BaseParamType): string {\n\t\treturn CoreWalker.relative_path(node, this);\n\t}\n\n\t// emit\n\temit(event_name: ParamEvent): void {\n\t\tif (this.emit_controller.emit_allowed) {\n\t\t\tthis.emit_controller.increment_count(event_name);\n\t\t\tthis.scene.events_controller.dispatch(this, event_name);\n\t\t}\n\t}\n\n\t// multiple\n\tget components() {\n\t\treturn this._components;\n\t}\n\tstatic get component_names(): string[] {\n\t\treturn [];\n\t}\n\tget component_names(): string[] {\n\t\tconst c = (<unknown>this.constructor) as TypedParam<T>;\n\t\treturn c.component_names;\n\t}\n\tget is_multiple(): boolean {\n\t\treturn this.component_names.length > 0;\n\t}\n\t// create_components() {}\n\tinit_components() {}\n\n\t// expression\n\t// set_expression(expression: string | null) {\n\t// \tthis.expression_controller.set_expression(expression);\n\t// }\n\thas_expression(): boolean {\n\t\treturn this.expression_controller != null && this.expression_controller.active; // use this._expression_controller to avoid creating it\n\t}\n\n\t// serialize\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n}\nexport type BaseParamType = TypedParam<ParamType>;\nexport class BaseParamClass extends TypedParam<ParamType> {\n\tget default_value_serialized() {\n\t\treturn 'BaseParamClass.default_value_serialized overriden';\n\t}\n\tget raw_input_serialized() {\n\t\treturn 'BaseParamClass.raw_input_serialized overriden';\n\t}\n\tget value_serialized() {\n\t\treturn 'BaseParamClass.value_serialized overriden';\n\t}\n}\n","import {Euler} from 'three/src/math/Euler';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\n\n// import {Object3D} from 'three/src/core/Object3D';\n// import {BaseTransformedObjNodeType} from '../_BaseTransformed';\nimport {CoreMath} from 'src/core/math/_Module';\nimport {CoreTransform, SetParamsFromMatrixOptions} from 'src/core/Transform';\n// import {BaseObjNodeType} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n// import {NodeContext} from 'src/engine/poly/NodeContext';\nimport {TypedObjNode, BaseObjNodeType} from '../_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {FlagsControllerD} from '../../utils/FlagsController';\n// import {LookAtController} from './LookAtController';\nexport function TransformedParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\ttransform = ParamConfig.FOLDER();\n\t\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\t\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\t\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\t\tscale = ParamConfig.FLOAT(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('', {node_selection: {context: NodeContext.OBJ}});\n\t\t// up = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// pivot = ParamConfig.VECTOR3([0, 0, 0]);\n\t};\n}\nclass TransformedParamsConfig extends TransformedParamConfig(NodeParamsConfig) {}\nexport class TransformedObjNode extends TypedObjNode<Object3D, TransformedParamsConfig> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\t// get transform_controller(): TransformController {\n\t// \treturn this._transform_controller; // = this._transform_controller || new TransformController(this));\n\t// }\n}\n\nexport class TransformController {\n\tconstructor(private node: TransformedObjNode) {}\n\n\t// protected _look_at_controller = new LookAtController(this.node);\n\t// get look_at_controller(): LookAtController {\n\t// \treturn (this._look_at_controller = this._look_at_controller || new LookAtController(this));\n\t// }\n\n\tinitialize_node() {\n\t\t// not sure we should change if it is used in the scene, as parented children may still be\n\t\t// this.node.flags.display.add_hook(() => {\n\t\t// \t// this.node.set_used_in_scene(this.node.flags.display.active || false);\n\t\t// \tthis.node.object.visible = this.node.flags.display.active;\n\t\t// });\n\t\t// this.node.set_used_in_scene(true);\n\n\t\tthis.node.io.inputs.set_count(0, 1);\n\t\tthis.node.io.inputs.set_depends_on_inputs(false);\n\t\tthis.node.io.outputs.set_has_one_output();\n\t\tthis.node.io.inputs.add_hook(() => {\n\t\t\tthis.on_input_updated();\n\t\t});\n\n\t\tconst hook_name = '_cook_main_without_inputs_when_dirty';\n\t\tif (!this.node.dirty_controller.has_hook(hook_name)) {\n\t\t\tthis.node.dirty_controller.add_post_dirty_hook(hook_name, this._cook_main_without_inputs_when_dirty_bound);\n\t\t}\n\t}\n\t// TODO: this will have to be checked via the parent, when I will have obj managers at lower levels than root\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.node.used_in_scene) {\n\t\tawait this.node.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\n\tstatic on_input_updated(node: BaseObjNodeType) {\n\t\tif (node.io.inputs.input(0) != null) {\n\t\t\tnode.root.add_to_parent_transform(node);\n\t\t} else {\n\t\t\tnode.root.remove_from_parent_transform(node);\n\t\t}\n\t}\n\ton_input_updated() {\n\t\tTransformController.on_input_updated(this.node);\n\t}\n\n\tupdate(matrix?: Matrix4) {\n\t\t// const object = this.node.object;\n\t\t// const update_full_matrix = false; // if true the camera controls do not work anymore\n\t\t//matrix = Core.Transform.matrix_from_node_with_transform_params(this)\n\n\t\t// if (object) {\n\t\t// if update_full_matrix\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\n\t\t// if (this._look_at_controller.active == true) {\n\t\t// \treturn this._look_at_controller.compute(); //this._use_look_at_param();\n\t\t// } else {\n\t\tthis.update_transform_with_matrix(matrix);\n\t\t// }\n\t\t// if matrix?\n\t\t// \t# do not apply to cameras with control\n\t\t// \tobject.matrixAutoUpdate = false\n\t\t// \tobject.matrix = matrix\n\t\t// else\n\t\t// \tthis.update_transform_from_params()\n\t\t// } else {\n\t\t// \tconsole.warn(`no object to update for ${this.node.full_path()}`);\n\t\t// \t// return false;\n\t\t// }\n\t}\n\n\tupdate_transform_with_matrix(matrix?: Matrix4) {\n\t\t//console.warn \"no object to update for #{this.full_path()}\"\n\t\tconst object = this.node.object;\n\t\t//matrix ?= Core.Transform.matrix_from_node_with_transform_params(this)\n\t\tif (matrix != null && !matrix.equals(object.matrix)) {\n\t\t\t// do not apply to cameras with control\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.matrix = matrix;\n\n\t\t\treturn object.dispatchEvent({type: 'change'});\n\t\t} else {\n\t\t\treturn this.update_transform_from_params();\n\t\t}\n\t}\n\n\tprivate _update_transform_from_params_scale = new Vector3();\n\tupdate_transform_from_params() {\n\t\tconst object = this.node.object;\n\t\tif (object) {\n\t\t\tconst position: Vector3 = this.node.pv.t;\n\t\t\t//quaternion = new Quaternion()\n\t\t\tconst rotation: Vector3 = this.node.pv.r;\n\n\t\t\tthis._update_transform_from_params_scale.copy(this.node.pv.s).multiplyScalar(this.node.pv.scale);\n\t\t\t// const scale: Vector3 = this.node.pv.s\n\t\t\t// \t.clone()\n\t\t\t// \t.multiplyScalar(this.node.pv.scale);\n\t\t\t//matrix.decompose( position, quaternion, scale )\n\n\t\t\tobject.matrixAutoUpdate = false;\n\t\t\tobject.position.copy(position);\n\t\t\t//object.quaternion.copy(quaternion)\n\t\t\tconst radians = [\n\t\t\t\tCoreMath.degrees_to_radians(rotation.x),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.y),\n\t\t\t\tCoreMath.degrees_to_radians(rotation.z),\n\t\t\t];\n\t\t\tconst euler = new Euler(\n\t\t\t\tradians[0],\n\t\t\t\tradians[1],\n\t\t\t\tradians[2]\n\t\t\t\t//'XYZ'\n\t\t\t);\n\t\t\tobject.rotation.copy(euler);\n\t\t\tobject.scale.copy(this._update_transform_from_params_scale);\n\t\t\tobject.matrixAutoUpdate = true;\n\t\t\tobject.updateMatrix();\n\n\t\t\tobject.dispatchEvent({type: 'change'});\n\t\t}\n\t}\n\n\tset_params_from_matrix(matrix: Matrix4, options: SetParamsFromMatrixOptions = {}) {\n\t\tCoreTransform.set_params_from_matrix(matrix, this.node, options);\n\t}\n}\n","export enum ParamEvent {\n\tVISIBLE_UPDATED = 'param_visible_updated',\n\t// UPDATED = 'param_updated',\n\tRAW_INPUT_UPDATED = 'raw_input_updated',\n\tVALUE_UPDATED = 'param_value_updated',\n\tEXPRESSION_UPDATED = 'param_expression_update',\n\tERROR_UPDATED = 'param_error_updated',\n\tDELETED = 'param_deleted',\n}\n","import {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\n\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {RampParam} from 'src/engine/params/Ramp';\n\n// TODO: simplify GLDataType into one enum\n// http://learnwebgl.brown37.net/12_shader_language/glsl_data_types.html\n\n//\n//\n// GL Data types\n//\n//\nexport enum ConnectionPointType {\n\tBOOL = 'bool',\n\t// BVEC2 = 'bvec2',\n\t// BVEC3 = 'bvec3',\n\t// BVEC4 = 'bvec4',\n\tINT = 'int',\n\t// IVEC2 = 'ivec2',\n\t// IVEC3 = 'ivec3',\n\t// IVEC4 = 'ivec4',\n\tFLOAT = 'float',\n\tVEC2 = 'vec2',\n\tVEC3 = 'vec3',\n\tVEC4 = 'vec4',\n\t// matrices to be used later\n\t// MAT2 = 'mat2',\n\t// MAT3 = 'mat3',\n\t// MAT4 = 'mat4',\n\tSAMPLER_2D = 'sampler2D',\n}\n\n//\n//\n// ALL GL Data types in an array\n//\n//\nexport const ConnectionPointTypes: Array<ConnectionPointType> = [\n\tConnectionPointType.BOOL,\n\t// ConnectionPointType.BVEC2,\n\t// ConnectionPointType.BVEC3,\n\t// ConnectionPointType.BVEC4,\n\tConnectionPointType.INT,\n\t// ConnectionPointType.IVEC2,\n\t// ConnectionPointType.IVEC3,\n\t// ConnectionPointType.IVEC4,\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\n//\n//\n// Map to convert from a GL Data type to a ParamType\n//\n//\ntype ConnectionPointTypeToParamTypeMapGeneric = {[key in ConnectionPointType]: ParamType};\nexport interface IConnectionPointTypeToParamTypeMap extends ConnectionPointTypeToParamTypeMapGeneric {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT;\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2;\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3;\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4;\n}\nexport const ConnectionPointTypeToParamTypeMap: IConnectionPointTypeToParamTypeMap = {\n\t[ConnectionPointType.BOOL]: ParamType.BOOLEAN,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: ParamType.INTEGER,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: ParamType.FLOAT,\n\t[ConnectionPointType.VEC2]: ParamType.VECTOR2,\n\t[ConnectionPointType.VEC3]: ParamType.VECTOR3,\n\t[ConnectionPointType.VEC4]: ParamType.VECTOR4,\n\n\t[ConnectionPointType.SAMPLER_2D]: ParamType.RAMP,\n};\n\n//\n//\n// Map to convert from a ParamType to GL Data type\n//\n//\ntype ParamTypeToConnectionPointTypeMapGeneric = {[key in ParamType]: ConnectionPointType | undefined};\nexport interface IParamTypeToConnectionPointTypeMap extends ParamTypeToConnectionPointTypeMapGeneric {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL;\n\t[ParamType.COLOR]: ConnectionPointType.VEC3;\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT;\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT;\n\t[ParamType.FOLDER]: undefined;\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2;\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3;\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4;\n\t[ParamType.BUTTON]: undefined;\n\t[ParamType.OPERATOR_PATH]: undefined;\n\t[ParamType.RAMP]: undefined;\n\t[ParamType.SEPARATOR]: undefined;\n\t[ParamType.STRING]: undefined;\n}\nexport const ParamTypeToConnectionPointTypeMap: IParamTypeToConnectionPointTypeMap = {\n\t[ParamType.BOOLEAN]: ConnectionPointType.BOOL,\n\t[ParamType.COLOR]: ConnectionPointType.VEC3,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ParamType.INTEGER]: ConnectionPointType.INT,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ParamType.FLOAT]: ConnectionPointType.FLOAT,\n\t[ParamType.FOLDER]: undefined,\n\t[ParamType.VECTOR2]: ConnectionPointType.VEC2,\n\t[ParamType.VECTOR3]: ConnectionPointType.VEC3,\n\t[ParamType.VECTOR4]: ConnectionPointType.VEC4,\n\t[ParamType.BUTTON]: undefined,\n\t[ParamType.OPERATOR_PATH]: undefined,\n\t[ParamType.RAMP]: undefined,\n\t[ParamType.SEPARATOR]: undefined,\n\t[ParamType.STRING]: undefined,\n};\n\n//\n//\n// Map of GL Data type default values\n//\n//\nexport type ConnectionPointInitValueMapGeneric = {\n\t[key in ConnectionPointType]: ParamInitValuesTypeMap[IConnectionPointTypeToParamTypeMap[key]];\n};\nexport const ConnectionPointInitValueMap: ConnectionPointInitValueMapGeneric = {\n\t[ConnectionPointType.BOOL]: false,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 0,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 0,\n\t[ConnectionPointType.VEC2]: [0, 0],\n\t[ConnectionPointType.VEC3]: [0, 0, 0],\n\t[ConnectionPointType.VEC4]: [0, 0, 0, 0],\n\n\t[ConnectionPointType.SAMPLER_2D]: RampParam.DEFAULT_VALUE_JSON,\n};\n\n//\n//\n// Map of GL Data type component counts\n//\n//\nexport type ConnectionPointComponentsCountMapGeneric = {\n\t[key in ConnectionPointType]: number;\n};\nexport const ConnectionPointComponentsCountMap: ConnectionPointComponentsCountMapGeneric = {\n\t[ConnectionPointType.BOOL]: 1,\n\t// [ConnectionPointType.BVEC2]: [ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC3]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t// [ConnectionPointType.BVEC4]: [ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN, ParamType.BOOLEAN]\n\t[ConnectionPointType.INT]: 1,\n\t// [ConnectionPointType.IVEC2]: [ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC3]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t// [ConnectionPointType.IVEC4]: [ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER, ParamType.INTEGER];\n\t[ConnectionPointType.FLOAT]: 1,\n\t[ConnectionPointType.VEC2]: 2,\n\t[ConnectionPointType.VEC3]: 3,\n\t[ConnectionPointType.VEC4]: 4,\n\t[ConnectionPointType.SAMPLER_2D]: 1,\n};\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {DecomposedPath} from './DecomposedPath';\n// import {NodeSimple} from 'src/core/graph/NodeSimple'\n\nimport {CoreWalkerEmbed} from './WalkerEmbed';\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class CoreWalker extends CoreWalkerEmbed {\n\tpublic static readonly SEPARATOR = '/';\n\tpublic static readonly CURRENT = '.';\n\tpublic static readonly PARENT = '..';\n\tpublic static readonly CURRENT_WITH_SLASH = `${CoreWalker.CURRENT}/`;\n\tpublic static readonly PARENT_WITH_SLASH = `${CoreWalker.PARENT}/`;\n\n\tstatic find_param(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseParamType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements = path.split(CoreWalker.SEPARATOR);\n\n\t\tif (elements.length === 1) {\n\t\t\treturn node_src.params.get(elements[0]);\n\t\t} else {\n\t\t\tconst node_path = elements.slice(0, +(elements.length - 2) + 1 || undefined).join(CoreWalker.SEPARATOR);\n\t\t\tconst node = this.find_node(node_src, node_path, decomposed_path);\n\t\t\tif (node != null) {\n\t\t\t\tconst param_name = elements[elements.length - 1];\n\t\t\t\tconst param = node.params.get(param_name);\n\t\t\t\tif (decomposed_path && param) {\n\t\t\t\t\tdecomposed_path.add_node(param_name, param);\n\t\t\t\t}\n\t\t\t\treturn param;\n\t\t\t} else {\n\t\t\t\treturn null;\n\t\t\t\t// throw `no node found for path ${node_path}`;\n\t\t\t}\n\t\t}\n\t}\n\tstatic relative_path(src_graph_node: Readonly<NodeOrParam>, dest_graph_node: Readonly<NodeOrParam>): string {\n\t\tconst parent = this.closest_common_parent(src_graph_node, dest_graph_node);\n\t\tif (!parent) {\n\t\t\treturn dest_graph_node.full_path();\n\t\t} else {\n\t\t\tconst distance = this.distance_to_parent(src_graph_node, parent);\n\t\t\t// const up = lodash_padStart(\"\", (distance-1)*3, \"../\")\n\t\t\tlet up = '';\n\t\t\tif (distance - 1 > 0) {\n\t\t\t\tlet i = 0;\n\t\t\t\tconst ups = [];\n\t\t\t\twhile (i++ < distance - 1) {\n\t\t\t\t\tups.push(CoreWalker.PARENT);\n\t\t\t\t}\n\t\t\t\tup = ups.join(CoreWalker.SEPARATOR) + CoreWalker.SEPARATOR;\n\t\t\t}\n\n\t\t\tconst parent_path_elements = parent\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst dest_path_elements = dest_graph_node\n\t\t\t\t.full_path()\n\t\t\t\t.split(CoreWalker.SEPARATOR)\n\t\t\t\t.filter((e) => e.length > 0);\n\t\t\tconst remaining_elements = [];\n\t\t\tlet cmptr = 0;\n\t\t\tfor (let dest_path_element of dest_path_elements) {\n\t\t\t\tif (!parent_path_elements[cmptr]) {\n\t\t\t\t\tremaining_elements.push(dest_path_element);\n\t\t\t\t}\n\t\t\t\tcmptr++;\n\t\t\t}\n\t\t\tconst down = remaining_elements.join(CoreWalker.SEPARATOR);\n\t\t\treturn `${up}${down}`;\n\t\t}\n\t}\n\n\tstatic closest_common_parent(\n\t\tgraph_node1: Readonly<NodeOrParam>,\n\t\tgraph_node2: Readonly<NodeOrParam>\n\t): BaseNodeType | null {\n\t\tconst parents1 = this.parents(graph_node1).reverse();\n\t\tconst parents2 = this.parents(graph_node2).reverse();\n\n\t\tconst min_depth = Math.min(parents1.length, parents2.length);\n\t\tlet found_parent = null;\n\n\t\tfor (let i = 0; i < min_depth; i++) {\n\t\t\tif (parents1[i].graph_node_id == parents2[i].graph_node_id) {\n\t\t\t\tfound_parent = parents1[i];\n\t\t\t}\n\t\t}\n\t\treturn found_parent;\n\t}\n\tstatic parents(graph_node: Readonly<NodeOrParam>): BaseNodeType[] {\n\t\tconst parents = [];\n\t\tlet parent = graph_node.parent;\n\t\twhile (parent) {\n\t\t\tparents.push(parent);\n\t\t\tparent = parent.parent;\n\t\t}\n\t\treturn parents;\n\t}\n\tstatic distance_to_parent(graph_node: Readonly<NodeOrParam>, dest: Readonly<BaseNodeType>): number {\n\t\tlet distance = 0;\n\t\tlet current: Readonly<NodeOrParam | null> = graph_node;\n\t\tconst dest_id = dest.graph_node_id;\n\t\twhile (current && current.graph_node_id != dest_id) {\n\t\t\tdistance += 1;\n\t\t\tcurrent = current.parent;\n\t\t}\n\t\tif (current && current.graph_node_id == dest_id) {\n\t\t\treturn distance;\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\t// static make_absolute(node_src: BaseNode, path: string): string {\n\t// \treturn \"\"\n\t// }\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {BypassFlag} from './flags/Bypass';\nimport {DisplayFlag} from './flags/Display';\n\nexport class FlagsController {\n\tpublic readonly bypass: DisplayFlag | undefined;\n\tpublic readonly display: BypassFlag | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\thas_display(): boolean {\n\t\treturn false;\n\t}\n\thas_bypass(): boolean {\n\t\treturn false;\n\t}\n}\n\nfunction Display<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic display: DisplayFlag = new DisplayFlag(this.node);\n\t\thas_display(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\nfunction Bypass<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tprotected node!: BaseNodeType;\n\t\tpublic readonly bypass: BypassFlag = new BypassFlag(this.node);\n\t\thas_bypass(): boolean {\n\t\t\treturn true;\n\t\t}\n\t};\n}\n\nexport class FlagsControllerD extends Display(FlagsController) {}\nexport class FlagsControllerB extends Bypass(FlagsController) {}\nexport class FlagsControllerDB extends Bypass(Display(FlagsController)) {}\n","export enum ShaderName {\n\tVERTEX = 'vertex',\n\tFRAGMENT = 'fragment',\n\tLEAVES_FROM_NODES_SHADER = 'leaves_from_nodes_shader',\n\tPARTICLES_0 = 'particles_0',\n\tPARTICLES_1 = 'particles_1',\n\tPARTICLES_2 = 'particles_2',\n\tPARTICLES_3 = 'particles_3',\n\tPARTICLES_4 = 'particles_4',\n\tPARTICLES_5 = 'particles_5',\n\tPARTICLES_6 = 'particles_6',\n\tPARTICLES_7 = 'particles_7',\n\tPARTICLES_8 = 'particles_8',\n\tPARTICLES_9 = 'particles_9',\n}\nexport const ParticleShaderNames: Array<ShaderName> = [\n\tShaderName.PARTICLES_0,\n\tShaderName.PARTICLES_1,\n\tShaderName.PARTICLES_2,\n\tShaderName.PARTICLES_3,\n\tShaderName.PARTICLES_4,\n\tShaderName.PARTICLES_5,\n\tShaderName.PARTICLES_6,\n\tShaderName.PARTICLES_7,\n\tShaderName.PARTICLES_8,\n\tShaderName.PARTICLES_9,\n];\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Euler} from 'three/src/math/Euler';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\n\nconst ROTATION_ORDER = 'XYZ';\n\nexport interface SetParamsFromMatrixOptions {\n\tscale?: boolean;\n}\n\n// TODO: remove the \"new\" in this whole file\n// const euler = new Euler(0, 0, 0, ROTATION_ORDER)\n\nexport class CoreTransform {\n\t// static create_params(node: BaseNodeType) {\n\t// \tnode.add_param(ParamType.VECTOR3, 't', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 'r', [0, 0, 0]);\n\t// \tnode.add_param(ParamType.VECTOR3, 's', [1, 1, 1]);\n\t// \tnode.add_param(ParamType.FLOAT, 'scale', 1, {range: [0, 10]});\n\t// \tnode.add_param(ParamType.OPERATOR_PATH, 'look_at', '');\n\t// \tnode.add_param(ParamType.VECTOR3, 'up', [0, 1, 0]);\n\t// }\n\n\t// static matrix_from_node_with_transform_params(node: BaseNodeType): Matrix4 {\n\t// \tconst t = node.params.vector3('t');\n\t// \tconst r = node.params\n\t// \t\t.vector3('r')\n\t// \t\t.clone()\n\t// \t\t.multiplyScalar(Math.PI / 180);\n\t// \tconst s = node.params.vector3('s');\n\t// \tconst scale = node.params.float('scale');\n\t// \treturn this.matrix(t, r, s, scale);\n\t// }\n\n\t// if this is done, make sure to use eval with a  callback\n\t// @matrix_from_params: (node) ->\n\t// \tt = node.param('t').eval()\n\t// \tr = node.param('r').eval().multiplyScalar( Math.PI / 180 )\n\t// \ts = node.param('s').eval()\n\t// \tscale = node.param('scale').eval()\n\t// \tthis.matrix(t, r, s, scale)\n\n\tstatic set_params_from_matrix(matrix: Matrix4, node: BaseNodeType, options: SetParamsFromMatrixOptions = {}) {\n\t\tlet update_scale = options['scale'];\n\t\tif (update_scale == null) {\n\t\t\tupdate_scale = true;\n\t\t}\n\n\t\t// EPSILON = 0.0000001\n\t\t// PRECISION = 1000\n\t\t// components = ['x', 'y', 'z']\n\n\t\tconst position = new Vector3();\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3();\n\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\tconst euler = new Euler().setFromQuaternion(quaternion);\n\t\tconst rotation = euler.toVector3();\n\t\trotation.divideScalar(Math.PI / 180);\n\n\t\t// limit precision of position and rotation\n\t\t// lodash_each [position, rotation], (vector)->\n\t\t// \tlodash_each ['x', 'y', 'z'], (c)->\n\t\t// \t\tval = vector[c]\n\t\t// \t\tapproximation = parseInt(val * PRECISION) / PRECISION\n\t\t// \t\tvector[c] = approximation\n\n\t\t// round scale if we get values like 0.9999999999 or 1.00000000001\n\t\t// lodash_each ['x', 'y', 'z'], (c)->\n\t\t// \tval = scale[c]\n\t\t// \trounded = Math.round(val)\n\t\t// \tif Math.abs(val - rounded) < EPSILON\n\t\t// \t\tscale[c] = rounded\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('r', rotation.toArray() as Number3);\n\t\t\tnode.params.set_vector3('t', position.toArray() as Number3);\n\t\t\tnode.params.set_vector3('s', scale.toArray() as Number3);\n\t\t\tif (update_scale) {\n\t\t\t\tnode.params.set_float('scale', 1);\n\t\t\t}\n\t\t});\n\t}\n\t// this.object().position.copy(position)\n\t// this.object().quaternion.copy(quaternion)\n\t// this.object().scale.copy(scale)\n\n\tstatic set_params_from_object(object: Object3D, node: BaseNodeType) {\n\t\tconst position = object.position.toArray() as Number3;\n\t\tconst rotation = object.rotation.toArray().map((c) => c * (180 / Math.PI)) as Number3;\n\n\t\tnode.scene.batch_update(() => {\n\t\t\tnode.params.set_vector3('t', position);\n\t\t\tnode.params.set_vector3('r', rotation);\n\t\t});\n\t}\n\n\t// static translation_matrix(x: number, y: number, z: number): Matrix4 {\n\t// \tconst t = new Vector3(x, y, z);\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst s = new Vector3(1, 1, 1);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\n\tprivate _translation_matrix: Matrix4 = new Matrix4();\n\tprivate _translation_matrix_q = new Quaternion();\n\tprivate _translation_matrix_s = new Vector3(1, 1, 1);\n\ttranslation_matrix(t: Vector3): Matrix4 {\n\t\tthis._translation_matrix.compose(t, this._translation_matrix_q, this._translation_matrix_s);\n\t\treturn this._translation_matrix;\n\t}\n\n\tstatic matrix_quaternion(matrix: Matrix4): Quaternion {\n\t\tconst t = new Vector3();\n\t\tconst quat = new Quaternion();\n\t\tconst s = new Vector3();\n\t\tmatrix.decompose(t, quat, s);\n\t\treturn quat;\n\t}\n\n\t// static matrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t// \t// if I don't clone here, it created issues in the transform SOP\n\t// \ts = s.clone().multiplyScalar(scale);\n\n\t// \tconst quaternion = new Quaternion();\n\t// \tconst euler = new Euler(r.x, r.y, r.z, ROTATION_ORDER);\n\t// \tquaternion.setFromEuler(euler);\n\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.compose(t, quaternion, s);\n\t// \treturn matrix;\n\t// }\n\tprivate _matrix = new Matrix4().identity();\n\tprivate _matrix_q = new Quaternion();\n\tprivate _matrix_e = new Euler();\n\tprivate _matrix_s = new Vector3();\n\tmatrix(t: Vector3, r: Vector3, s: Vector3, scale: number) {\n\t\tthis._matrix_e.set(r.x, r.y, r.z, ROTATION_ORDER);\n\t\tthis._matrix_q.setFromEuler(this._matrix_e);\n\n\t\tthis._matrix_s.copy(s).multiplyScalar(scale);\n\n\t\tthis._matrix.compose(t, this._matrix_q, this._matrix_s);\n\t\treturn this._matrix;\n\t}\n\n\t// static rotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t// \tconst quaternion = new Quaternion();\n\t// \tquaternion.setFromUnitVectors(vec_origin, vec_dest.clone().normalize());\n\t// \tconst matrix = new Matrix4();\n\t// \tmatrix.makeRotationFromQuaternion(quaternion);\n\t// \tgeometry.applyMatrix(matrix);\n\t// }\n\n\tprivate _rotate_geometry_m = new Matrix4();\n\tprivate _rotate_geometry_q = new Quaternion();\n\tprivate _rotate_geometry_vec_dest = new Vector3();\n\trotate_geometry(geometry: BufferGeometry, vec_origin: Vector3, vec_dest: Vector3) {\n\t\tthis._rotate_geometry_vec_dest.copy(vec_dest);\n\t\tthis._rotate_geometry_vec_dest.normalize();\n\t\tthis._rotate_geometry_q.setFromUnitVectors(vec_origin, this._rotate_geometry_vec_dest);\n\t\t// this._rotate_geometry_m.identity(); // not entirely sure this is necessary\n\t\tthis._rotate_geometry_m.makeRotationFromQuaternion(this._rotate_geometry_q);\n\t\tgeometry.applyMatrix(this._rotate_geometry_m);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Triangle} from 'three/src/math/Triangle';\nconst THREE = {Triangle, Vector3};\nimport lodash_isNumber from 'lodash/isNumber';\n// import {Octree} from './Octree'\n// import Interpolate from './Interpolate'\nimport {Easing} from './Easing';\n\nconst RAD_DEG_RATIO = Math.PI / 180;\n\nexport class CoreMath {\n\t// static Octree = Octree\n\t// static Interpolate = Interpolate\n\tstatic Easing = Easing; // used in expressins\n\n\tstatic clamp(val: number, min: number, max: number): number {\n\t\tif (val < min) {\n\t\t\treturn min;\n\t\t} else if (val > max) {\n\t\t\treturn max;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n\n\tstatic fit01(val: number, dest_min: number, dest_max: number): number {\n\t\t// const size = max - min;\n\t\t// return (val - min) / size;\n\t\treturn this.fit(val, 0, 1, dest_min, dest_max);\n\t}\n\n\tstatic fit(val: number, src_min: number, src_max: number, dest_min: number, dest_max: number): number {\n\t\tconst src_range = src_max - src_min;\n\t\tconst dest_range = dest_max - dest_min;\n\n\t\tconst r = (val - src_min) / src_range;\n\t\treturn r * dest_range + dest_min;\n\t}\n\n\tstatic degrees_to_radians(degrees: number): number {\n\t\treturn degrees * RAD_DEG_RATIO;\n\t}\n\tstatic radians_to_degrees(radians: number): number {\n\t\treturn radians / RAD_DEG_RATIO;\n\t}\n\tstatic deg2rad(deg: number): number {\n\t\treturn this.degrees_to_radians(deg);\n\t}\n\tstatic rad2deg(rad: number): number {\n\t\treturn this.radians_to_degrees(rad);\n\t}\n\n\tstatic fract = (number: number) => number - Math.floor(number);\n\n\t// from threejs glsl rand\n\tstatic rand(number: number): number {\n\t\tif (lodash_isNumber(number)) {\n\t\t\treturn this.rand_float(number);\n\t\t} else {\n\t\t\treturn this.rand_vec2(number);\n\t\t}\n\t}\n\n\tstatic round(number: number, step_size: number): number {\n\t\tconst steps_count = number / step_size;\n\t\tconst rounded_steps_count = number < 0 ? Math.ceil(steps_count) : Math.floor(steps_count);\n\t\tconsole.log('round', step_size, number, steps_count, rounded_steps_count, rounded_steps_count * step_size);\n\t\treturn rounded_steps_count * step_size;\n\t}\n\n\tstatic highest_even(number: number): number {\n\t\treturn 2 * Math.ceil(number * 0.5);\n\t}\n\n\tstatic rand_float(number: number): number {\n\t\tconst vec = {\n\t\t\tx: number,\n\t\t\ty: 136574,\n\t\t};\n\t\treturn this.rand_vec2(vec);\n\t}\n\n\tstatic rand_vec2(uv: Vector2Like) {\n\t\tconst a = 12.9898;\n\t\tconst b = 78.233;\n\t\tconst c = 43758.5453;\n\t\tconst dt = uv.x * a + uv.y * b; //dot( uv.xy, vec2( a,b ) )\n\t\tconst sn = dt % Math.PI;\n\t\treturn this.fract(Math.sin(sn) * c);\n\t}\n\n\t// https://www.movable-type.co.uk/scripts/latlong.html\n\tstatic geodesic_distance(lnglat1: LngLatLike, lnglat2: LngLatLike): number {\n\t\tvar R = 6371e3; // metres\n\t\tvar φ1 = this.deg2rad(lnglat1.lat);\n\t\tvar φ2 = this.deg2rad(lnglat2.lat);\n\t\tvar Δφ = this.deg2rad(lnglat2.lat - lnglat1.lat);\n\t\tvar Δλ = this.deg2rad(lnglat2.lng - lnglat1.lng);\n\n\t\tvar a = Math.sin(Δφ / 2) * Math.sin(Δφ / 2) + Math.cos(φ1) * Math.cos(φ2) * Math.sin(Δλ / 2) * Math.sin(Δλ / 2);\n\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n\n\t\tvar d = R * c;\n\t\treturn d;\n\t}\n\n\tstatic expand_triangle(triangle: Triangle, margin: number): Triangle {\n\t\tconst mid_point = new THREE.Vector3();\n\t\ttriangle.getMidpoint(mid_point);\n\n\t\tenum TriangleProp {\n\t\t\ta = 'a',\n\t\t\tb = 'b',\n\t\t\tc = 'c',\n\t\t}\n\t\tfor (let prop of ['a', 'b', 'c']) {\n\t\t\tconst delta = triangle[prop as TriangleProp].clone().sub(mid_point);\n\t\t\tconst delta_n = delta.clone().normalize();\n\t\t\tconst length = delta.length() + margin;\n\n\t\t\ttriangle[prop as TriangleProp] = mid_point.clone().add(delta_n.multiplyScalar(length));\n\t\t}\n\t\treturn triangle;\n\t}\n\n\tstatic nearestPower2(num: number) {\n\t\treturn Math.pow(2, Math.ceil(Math.log(num) / Math.log(2)));\n\t}\n}\n","import {BaseContainer, TypedContainer} from '../../containers/_Base';\nimport {BaseNodeType} from '../_Base';\n\ntype Callback<T extends TypedContainer<any>> = (container: T | undefined) => void;\n\nexport class TypedContainerController<T extends TypedContainer<any>> {\n\tprivate _callbacks: Callback<T>[] = [];\n\tprotected _container: T;\n\n\tconstructor(protected node: BaseNodeType, container_class: typeof BaseContainer) {\n\t\tthis._container = new container_class(this.node) as T;\n\t}\n\n\tget container() {\n\t\treturn this._container;\n\t}\n\n\trequest_container(): Promise<T> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._callbacks.push(resolve);\n\t\t\tthis.node.scene.cook_controller.add_node(this.node);\n\n\t\t\t// const cooker = this.node.scene.cooker;\n\t\t\t// if (cooker.blocked()) {\n\t\t\t// \tcooker.enqueue(this.node);\n\t\t\t// } else {\n\t\t\tsetTimeout(this.process_container_request.bind(this), 0);\n\t\t\t// }\n\t\t});\n\t}\n\n\tprocess_container_request() {\n\t\tif (this.node.flags?.bypass?.active) {\n\t\t\tconst input_index = 0;\n\t\t\tthis.request_input_container(input_index).then((container) => {\n\t\t\t\tthis.node.remove_dirty_state();\n\t\t\t\tif (container) {\n\t\t\t\t\tthis.notify_requesters(container);\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('input invalid');\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tif (this.node.is_dirty) {\n\t\t\t\tthis.node.container_controller.container.reset_caches();\n\t\t\t\tthis.node.cook_controller.cook_main();\n\t\t\t} else {\n\t\t\t\tthis.notify_requesters();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync request_input_container(input_index: number) {\n\t\tconst input_node = this.node.io.inputs.input(input_index);\n\t\tif (input_node) {\n\t\t\tinput_node.processing_context.copy(this.node.processing_context);\n\t\t\tconst container = await input_node.container_controller.request_container();\n\t\t\treturn container;\n\t\t} else {\n\t\t\tthis.node.states.error.set(`input ${input_index} required`);\n\t\t\tthis.notify_requesters();\n\t\t\treturn null;\n\t\t}\n\t}\n\tnotify_requesters(container?: T) {\n\t\t// make a copy of the callbacks first,\n\t\t// to ensure that new ones are not added to this list\n\t\t// in side effects from those callbacks\n\t\t// (the test suite for the File SOP is a good test for this)\n\t\tlet callback;\n\t\tconst callbacks = [];\n\t\twhile ((callback = this._callbacks.pop())) {\n\t\t\tcallbacks.push(callback);\n\t\t}\n\n\t\tif (!container) {\n\t\t\tcontainer = this.node.container_controller.container.clone();\n\t\t}\n\t\t// removing the clone, as this seems to defeat the no cloning of inputs\n\t\t// container = container || this._container\n\t\twhile ((callback = callbacks.pop())) {\n\t\t\tcallback(container);\n\t\t}\n\t\tthis.node.scene.cook_controller.remove_node(this.node);\n\t}\n}\n\nexport class BaseContainerController extends TypedContainerController<any> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nconst THREE = {Vector2, Vector3};\n\nconst ATTRIB_NAME_MAP: Dictionary<string> = {\n\tP: 'position',\n\tN: 'normal',\n\tCd: 'color',\n};\n\nexport class CoreAttribute {\n\t// constructor: (@_size, @_value)->\n\t// \t#\n\n\t// size: ->\n\t// \t@_size\n\n\t// value: ->\n\t// \t@_value\n\n\t// set_value: (value)->\n\t// \t@_value = value\n\n\tstatic remap_name(name: string): string {\n\t\treturn ATTRIB_NAME_MAP[name] || name;\n\t}\n\n\tstatic array_to_indexed_arrays(array: string[]) {\n\t\tconst index_by_value: Dictionary<number> = {};\n\t\tlet current_index = 0;\n\t\tconst indices = [];\n\t\tconst values = [];\n\n\t\tlet i = 0;\n\t\twhile (i < array.length) {\n\t\t\t//(value = array[i++])?\n\t\t\tconst value = array[i];\n\t\t\tconst index = index_by_value[value];\n\t\t\tif (index != null) {\n\t\t\t\tindices.push(index);\n\t\t\t} else {\n\t\t\t\tvalues.push(value);\n\t\t\t\tindices.push(current_index);\n\t\t\t\tindex_by_value[value] = current_index;\n\t\t\t\tcurrent_index += 1;\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\treturn {\n\t\t\tindices,\n\t\t\tvalues,\n\t\t};\n\t}\n\n\tstatic default_value(size: number) {\n\t\tswitch (size) {\n\t\t\tcase 1:\n\t\t\t\treturn 0;\n\t\t\tcase 2:\n\t\t\t\treturn new THREE.Vector2(0, 0);\n\t\t\tcase 3:\n\t\t\t\treturn new THREE.Vector3(0, 0, 0);\n\t\t\tdefault:\n\t\t\t\tthrow `size ${size} not yet implemented`;\n\t\t}\n\t}\n}\n","import lodash_sortBy from 'lodash/sortBy';\n// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {RGBFormat} from 'three/src/constants';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {CubicInterpolant} from 'three/src/math/interpolants/CubicInterpolant';\n// import {ClampToEdgeWrapping} from 'three/src/constants'\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {RampValue, RampPoint, RampValueJson, RampInterpolation} from './ramp/RampValue';\n\n// import {AsCodeRamp} from './concerns/visitors/Ramp';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\n\n// interface RampParamVisitor extends TypedParamVisitor {\n// \tvisit_ramp_param: (param: RampParam) => any;\n// }\n\nexport class RampParam extends TypedParam<ParamType.RAMP> {\n\tstatic type() {\n\t\treturn ParamType.RAMP;\n\t}\n\n\tprivate _ramp_interpolant: CubicInterpolant | undefined;\n\tprivate _ramp_texture: DataTexture | undefined;\n\n\tstatic DEFAULT_VALUE = new RampValue(RampInterpolation.LINEAR, [new RampPoint(0, 0), new RampPoint(1, 1)]);\n\tstatic DEFAULT_VALUE_JSON: RampValueJson = RampParam.DEFAULT_VALUE.to_json();\n\n\tget default_value_serialized() {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.default_value.to_json();\n\t\t} else {\n\t\t\treturn this.default_value;\n\t\t}\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.RAMP]) {\n\t\tif (raw_input instanceof RampValue) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\treturn RampValue.from_json(raw_input).to_json();\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\treturn this._raw_input.to_json();\n\t\t} else {\n\t\t\treturn RampValue.from_json(this._raw_input).to_json();\n\t\t}\n\t}\n\tget value_serialized() {\n\t\treturn this.value.to_json();\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.RAMP],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.RAMP]\n\t) {\n\t\tif (raw_input1 instanceof RampValue) {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input1.is_equal(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.is_equal_json(raw_input2);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof RampValue) {\n\t\t\t\treturn raw_input2.is_equal_json(raw_input1);\n\t\t\t} else {\n\t\t\t\treturn RampValue.are_json_equal(raw_input1, raw_input2);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.RAMP], val2: ParamValuesTypeMap[ParamType.RAMP]) {\n\t\treturn val1.is_equal(val2);\n\t}\n\tprivate _reset_ramp_interpolant_and_texture_bound = this._reset_ramp_interpolant_and_texture.bind(this);\n\tinitialize_param() {\n\t\tthis.add_post_dirty_hook('_reset_ramp_interpolant_and_texture', this._reset_ramp_interpolant_and_texture_bound);\n\t}\n\t// accepts_visitor(visitor: RampParamVisitor) {\n\t// \treturn visitor.visit_ramp_param(this);\n\t// }\n\tget is_default(): boolean {\n\t\tif (this.default_value instanceof RampValue) {\n\t\t\treturn this.value.is_equal(this.default_value);\n\t\t} else {\n\t\t\treturn this.value.is_equal_json(this.default_value);\n\t\t}\n\t}\n\tprotected process_raw_input() {\n\t\tif (this._raw_input instanceof RampValue) {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t} else {\n\t\t\t\tthis._value.copy(this._raw_input);\n\t\t\t}\n\t\t} else {\n\t\t\tif (!this._value) {\n\t\t\t\tthis._value = RampValue.from_json(this._raw_input);\n\t\t\t} else {\n\t\t\t\tthis._value.from_json(this._raw_input);\n\t\t\t}\n\t\t}\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\t// convert_value(v) {\n\t// \tlet is_json = false\n\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = JSON.parse(v)\n\t// \t\tis_json = true\n\t// \t}\n\n\t// \tif (!is_json) {\n\t// \t\tif (v.interpolation && v.points) {\n\t// \t\t\tif (lodash_isArray(v.points)) {\n\t// \t\t\t\tis_json = true\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \tif (is_json) {\n\t// \t\tv = RampValue.from_json(v)\n\t// \t}\n\n\t// \treturn v\n\t// }\n\t// convert_default_value(v) {\n\t// \treturn this.convert_value(v)\n\t// }\n\n\thas_expression() {\n\t\treturn false;\n\t}\n\n\t_reset_ramp_interpolant_and_texture() {\n\t\tthis._ramp_interpolant = undefined;\n\t\tthis._ramp_texture = undefined;\n\t}\n\tramp_texture() {\n\t\treturn (this._ramp_texture = this._ramp_texture || this._create_ramp_texture());\n\t}\n\t_create_ramp_texture() {\n\t\tconst width = 1024;\n\t\tconst height = 1;\n\n\t\tconst size = width * height;\n\t\tconst data = new Uint8Array(3 * size);\n\n\t\tlet stride = 0;\n\t\tlet position = 0;\n\t\tlet value = 0;\n\t\tfor (var i = 0; i < size; i++) {\n\t\t\tstride = i * 3;\n\t\t\tposition = i / width;\n\t\t\tvalue = this.value_at_position(position);\n\t\t\tdata[stride] = value * 255; // if I set 256, a value of 1 will become 0\n\t\t\t// data[ stride+1 ] = 1\n\t\t\t// data[ stride+2 ] = 2\n\t\t}\n\n\t\tconst texture = new DataTexture(data, width, height, RGBFormat);\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\t// texture.wrapS = ClampToEdgeWrapping\n\t\t// texture.wrapT = ClampToEdgeWrapping\n\t\ttexture.needsUpdate = true;\n\t\treturn texture;\n\t}\n\n\tstatic create_interpolant(positions: Float32Array, values: Float32Array) {\n\t\tconst values_count = 1;\n\t\tconst interpolated_values = new Float32Array(values_count);\n\t\treturn new CubicInterpolant(positions, values, values_count, interpolated_values);\n\t}\n\tinterpolant() {\n\t\treturn (this._ramp_interpolant = this._ramp_interpolant || this._create_interpolant());\n\t}\n\t_create_interpolant() {\n\t\tconst points = this.value.points;\n\t\tconst sorted_points = lodash_sortBy(points, (point) => point.position);\n\t\tconst positions = new Float32Array(sorted_points.length);\n\t\tconst values = new Float32Array(sorted_points.length);\n\n\t\tlet i = 0;\n\t\tfor (let sorted_point of sorted_points) {\n\t\t\tpositions[i] = sorted_point.position;\n\t\t\tvalues[i] = sorted_point.value;\n\t\t\ti++;\n\t\t}\n\n\t\treturn RampParam.create_interpolant(positions, values);\n\t}\n\n\tvalue_at_position(position: number): number {\n\t\treturn (<unknown>this.interpolant().evaluate(position)[0]) as number;\n\t}\n}\n","import {CoreObject} from 'src/core/Object';\n\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\n\n// interface ContentOption {\n// \tclone?: boolean\n// }\n\nimport {ContainableMap} from './utils/ContainableMap';\ntype K = keyof ContainableMap;\ntype Containable = ContainableMap[K];\n\nexport abstract class TypedContainer<T extends Containable> extends CoreObject {\n\t// protected _node: BaseNode;\n\t// protected _eval_key: number\n\tprotected _content!: T;\n\n\tconstructor(protected _node: BaseNodeType) {\n\t\tsuper();\n\t\t// this.update_eval_key();\n\t\t// this.set_content(this._default_content());\n\t}\n\n\tset_node(node: BaseNodeType) {\n\t\tthis._node = node;\n\t}\n\tnode(): BaseNodeType {\n\t\treturn this._node;\n\t}\n\n\tclone() {\n\t\tlet content;\n\t\tconst cloned_container = new (<any>this.constructor)() as TypedContainer<T>;\n\t\tcloned_container.set_node(this.node());\n\t\tif ((content = this.content()) != null) {\n\t\t\tcloned_container.set_content(content); //, this.eval_key() );\n\t\t}\n\t\treturn cloned_container;\n\t}\n\treset_caches() {}\n\t// abstract _default_content(): T;\n\n\tset_content(content: T) {\n\t\t//, eval_key?: number){\n\t\tthis.reset_caches();\n\t\tthis._content = content; //|| this._default_content();\n\t\t// this.update_eval_key(eval_key);\n\t\tthis._post_set_content();\n\t}\n\thas_content(): boolean {\n\t\treturn this._content != null;\n\t}\n\t// content(options: ContentOption = {}) {\n\t// \tconst clone = options['clone'] || false\n\t// \tif (clone) {\n\t// \t\treturn this.clone_content()\n\t// \t} else {\n\t// \t\treturn this._content\n\t// \t}\n\t// }\n\tcontent() {\n\t\treturn this._content;\n\t}\n\tprotected _post_set_content() {}\n\tpublic core_content(): T | undefined {\n\t\treturn this._content;\n\t}\n\tpublic core_content_cloned(): T | undefined {\n\t\treturn this._content;\n\t}\n\t// abstract clone_content(): T\n\n\t// update_eval_key(eval_key?: number){\n\t// \tthis._eval_key = eval_key || performance.now();\n\t// }\n\t// eval_key(): number {\n\t// \treturn this._eval_key;\n\t// }\n\n\tinfos(): any {\n\t\treturn [];\n\t}\n}\n\nexport class BaseContainer extends TypedContainer<any> {}\n","import lodash_isArray from 'lodash/isArray';\nimport {TypedParam} from './_Base';\nimport {FloatParam} from './Float';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValueSerializedTypeMap} from './types/ParamInitValueSerializedTypeMap';\n\nexport abstract class TypedMultipleParam<T extends ParamType> extends TypedParam<T> {\n\tprivate _components_contructor = FloatParam;\n\tprotected _components!: FloatParam[];\n\tget components() {\n\t\treturn this._components;\n\t}\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default() {\n\t\tfor (let c of this.components) {\n\t\t\tif (!c.is_default) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\t\treturn true;\n\t}\n\tget raw_input() {\n\t\treturn this._components.map((c) => c.raw_input) as ParamInitValueSerializedTypeMap[T];\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\n\tinit_components() {\n\t\tif (this._components != null) {\n\t\t\treturn;\n\t\t}\n\t\tlet index = 0;\n\t\tthis._components = new Array(this.component_names.length);\n\t\tfor (let component_name of this.component_names) {\n\t\t\tconst component = new this._components_contructor(this.scene); //, `${this.name}${name}`);\n\t\t\tlet default_val;\n\t\t\tif (lodash_isArray(this._default_value)) {\n\t\t\t\tdefault_val = this._default_value[index];\n\t\t\t} else {\n\t\t\t\tdefault_val = (this._default_value as any)[component_name];\n\t\t\t}\n\t\t\tcomponent.options.copy(this.options);\n\t\t\tcomponent.set_init_value(default_val);\n\n\t\t\t// component.set_scene(this.scene);\n\t\t\tcomponent.set_name(`${this.name}${component_name}`);\n\t\t\tcomponent.set_parent_param(this);\n\n\t\t\tthis.add_graph_input(component);\n\t\t\t// component.initialize();\n\t\t\tthis._components[index] = component;\n\t\t\tindex++;\n\t\t}\n\t\t// this.compute();\n\t}\n\n\tprotected async process_computation(): Promise<void> {\n\t\tawait this.compute_components();\n\t\tthis.set_value_from_components();\n\t}\n\tset_value_from_components() {}\n\t// set_raw_input_from_components() {}\n\n\thas_expression() {\n\t\tfor (let c of this.components) {\n\t\t\tif (c.expression_controller?.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tprivate async compute_components() {\n\t\tconst components = this.components;\n\t\t// const component_evaluation_states = lodash_map(components, ()=> false);\n\t\t// const expected_values_count = components.length;\n\t\t// const component_values = [];\n\t\t// let component;\n\t\t// return lodash_each(this.components(), (component, index)=> {\n\t\tconst promises = [];\n\t\tfor (let c of components) {\n\t\t\tif (c.is_dirty) {\n\t\t\t\tpromises.push(c.compute()); //component_value=> {\n\t\t\t}\n\t\t}\n\t\tawait Promise.all(promises);\n\t\t// component_values[index] = component_value;\n\t\t// component_evaluation_states[index] = true;\n\t\t// const evaluated_values_count = lodash_compact(component_evaluation_states).length;\n\t\t// check if all components have been evaluated succesfully\n\t\t// if (evaluated_values_count === expected_values_count) {\n\t\tthis.remove_dirty_state();\n\t\t// return component_values;\n\t\t// }\n\t\t// });\n\t\t// }\n\t}\n\n\tprotected process_raw_input() {\n\t\tconst cooker = this.scene.cooker;\n\t\tcooker.block();\n\t\tconst components = this.components;\n\t\tfor (let c of components) {\n\t\t\tc.emit_controller.block_parent_emit();\n\t\t}\n\n\t\t// if (lodash_isArray(values)) {\n\t\tconst value = this._raw_input;\n\t\tif (lodash_isArray(value)) {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tcomponents[i].set((value as any)[i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\t\tconst component_name = this.component_names[i];\n\t\t\t\tcomponents[i].set((value as any)[component_name]);\n\t\t\t}\n\t\t}\n\t\t// } else {\n\t\t// \tconst component_names = this.component_names()\n\t\t// \tfor (let i = 0; i < components.length; i++) {\n\t\t// \t\tcomponents[i].set(values[component_names[i]])\n\t\t// \t}\n\t\t// }\n\n\t\tcooker.unblock();\n\n\t\tfor (let i = 0; i < components.length; i++) {\n\t\t\tcomponents[i].emit_controller.unblock_parent_emit();\n\t\t}\n\t\t// this.emit(ParamEvent.UPDATED);\n\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n}\n\n// export class BaseMultipleParam extends TypedMultipleParam<Vector> {}\n","import {\n\tConnectionPointType,\n\tConnectionPointInitValueMapGeneric,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n\tIConnectionPointTypeToParamTypeMap,\n} from './ConnectionPointType';\n// import {ParamInitValuesTypeMap} from '../params/ParamsController';\n\nexport interface TypedNamedConnectionPointData<T extends ConnectionPointType> {\n\tname: string;\n\ttype: T;\n}\n\nexport class TypedNamedConnectionPoint<T extends ConnectionPointType> {\n\tprivate _json: TypedNamedConnectionPointData<T> | undefined;\n\n\tconstructor(\n\t\tprotected _name: string,\n\t\tprotected _type: T,\n\t\tprotected _init_value?: ConnectionPointInitValueMapGeneric[T]\n\t) {\n\t\tif (this._init_value === undefined) {\n\t\t\tthis._init_value = ConnectionPointInitValueMap[this._type];\n\t\t}\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget param_type(): IConnectionPointTypeToParamTypeMap[T] {\n\t\treturn ConnectionPointTypeToParamTypeMap[this._type];\n\t}\n\tget init_value() {\n\t\treturn this._init_value;\n\t}\n\n\tto_json(): TypedNamedConnectionPointData<T> {\n\t\treturn (this._json = this._json || this._create_json());\n\t}\n\tprivate _create_json(): TypedNamedConnectionPointData<T> {\n\t\treturn {\n\t\t\tname: this._name,\n\t\t\ttype: this._type,\n\t\t};\n\t}\n}\n\nexport type BaseNamedConnectionPointType = TypedNamedConnectionPoint<ConnectionPointType>;\n","export const CATEGORY_OBJ = {\n\tLIGHT: 'lights',\n\tMANAGER: 'managers',\n\tGEOMETRY: 'geometries',\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_COP = {\n\tINPUT: 'inputs',\n\tADVANCED: 'advanced',\n\tMISC: 'misc',\n};\nexport const CATEGORY_EVENT = {\n\tCAMERA: 'cameras',\n\tMISC: 'misc',\n};\nexport const CATEGORY_GL = {\n\tCOLOR: 'color',\n\tCONVERSION: 'conversion',\n\tDYNAMICS: 'dynamics',\n\tGEOMETRY: 'geometry',\n\tGLOBALS: 'globals',\n\tMATH: 'math',\n\tQUAT: 'quat',\n\tTRIGO: 'trigo',\n\tUTIL: 'util',\n\tINSTANCE: 'instance',\n};\nexport const CATEGORY_MAT = {\n\tADVANCED: 'advanced',\n\tMESH: 'meshes',\n\tPOINTS: 'points',\n\tLINE: 'lines',\n\tVOLUME: 'volumes',\n\tINSTANCE: 'instances',\n};\nexport const CATEGORY_SOP = {\n\tANIMATION: 'animation',\n\tATTRIBUTE: 'attributes',\n\tDYNAMICS: 'dynamics',\n\tINPUT: 'inputs',\n\tMISC: 'misc',\n\tMODIFIER: 'modifiers',\n\tRENDER: 'render',\n};\nexport const CATEGORY_POST = {\n\tPASS: 'passes',\n};\n","import {TypedNode} from '../_Base';\n\n// import {LineType} from './code/utils/CodeBuilder';\nimport {ThreeToGl} from 'src/core/ThreeToGl';\nimport {BaseGlShaderAssembler} from './code/assemblers/_Base';\n\nimport {AssemblerControllerNode} from './code/Controller';\n\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamValue} from 'src/engine/params/types/ParamValue';\n\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {BaseNamedConnectionPointType, TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ParamTypeToConnectionPointTypeMap} from '../utils/connections/ConnectionPointType';\nimport {ParamValueToDefaultConverter} from '../utils/params/ParamValueToDefaultConverter';\n// import {ShaderName} from '../utils/shaders/ShaderName';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\n\nexport class TypedGlNode<K extends NodeParamsConfig> extends TypedNode<'GL', BaseGlNodeType, K> {\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.GL;\n\t}\n\tprotected _param_configs_controller: ParamConfigsController | undefined;\n\tprotected _assembler: BaseGlShaderAssembler | undefined;\n\tprivate _set_mat_to_recompile_bound = this._set_mat_to_recompile.bind(this);\n\n\tinitialize_base_node() {\n\t\tthis.io.inputs.set_depends_on_inputs(false);\n\t\tthis.io.connections.init_inputs();\n\t\tthis.ui_data.set_layout_horizontal();\n\t\tthis.io.outputs.set_named_output_connection_points([]);\n\t\tthis.add_post_dirty_hook('_set_mat_to_recompile', this._set_mat_to_recompile_bound);\n\n\t\tthis.params.set_post_create_params_hook(this.create_inputs_from_params.bind(this));\n\t}\n\tprivate _set_mat_to_recompile() {\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tget material_node(): AssemblerControllerNode | undefined {\n\t\tif (this.parent) {\n\t\t\tif (this.parent.type == this.type) {\n\t\t\t\treturn (this.parent as BaseGlNodeType)?.material_node;\n\t\t\t} else {\n\t\t\t\treturn this.parent as AssemblerControllerNode;\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// VARIABLES\n\t//\n\t//\n\tgl_var_name(name: string) {\n\t\treturn `v_POLY_${this.name}_${name}`;\n\t}\n\n\tvariable_for_input(name: string): string {\n\t\tconst input_index = this.io.inputs.get_input_index(name);\n\t\tconst connection = this.io.connections.input_connection(input_index);\n\t\tif (connection) {\n\t\t\tconst input_node = (<unknown>connection.node_src) as BaseGlNodeType;\n\t\t\tconst output_name = input_node.io.outputs.named_output_connection_points[connection.output_index].name;\n\t\t\treturn input_node.gl_var_name(output_name);\n\t\t} else {\n\t\t\treturn ThreeToGl.any(this.params.get(name)?.value);\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ADDED LINES\n\t//\n\t//\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {}\n\n\treset_code() {\n\t\tthis._param_configs_controller?.reset();\n\t\t// this.reset_lines();\n\t}\n\n\t//\n\t//\n\t// PARAMS\n\t//\n\t//\n\n\tprotected _allow_inputs_created_from_params: boolean = true;\n\tcreate_inputs_from_params() {\n\t\tif (!this._allow_inputs_created_from_params) {\n\t\t\treturn;\n\t\t}\n\t\tconst connections: BaseNamedConnectionPointType[] = [];\n\t\tconst inputless_params_names = this.inputless_params_names();\n\t\tthis.params.names.forEach((param_name) => {\n\t\t\tlet add_input = true;\n\t\t\tif (inputless_params_names.length > 0 && inputless_params_names.includes(param_name)) {\n\t\t\t\tadd_input = false;\n\t\t\t}\n\t\t\tif (add_input) {\n\t\t\t\tconst param = this.params.get(param_name);\n\t\t\t\tif (param && !param.parent_param) {\n\t\t\t\t\tconst connection_type = ParamTypeToConnectionPointTypeMap[param.type];\n\t\t\t\t\tif (connection_type) {\n\t\t\t\t\t\tconst connection = new TypedNamedConnectionPoint(param.name, connection_type);\n\t\t\t\t\t\tconnections.push(connection);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tthis.io.inputs.set_named_input_connection_points(connections);\n\t}\n\tinputless_params_names(): string[] {\n\t\treturn [];\n\t}\n\tprotected create_spare_parameters() {\n\t\tconst values_by_param_name: Map<string, ParamValue> = new Map();\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tlet has_deleted_a_param = false;\n\t\tlet has_created_a_param = false;\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tvalues_by_param_name.set(param_name, param.value);\n\t\t\t\tthis.params.delete_param(param_name);\n\t\t\t\thas_deleted_a_param = true;\n\t\t\t}\n\t\t});\n\n\t\t// TODO: typescript: fix this confusion between named_inputs and NamedConnection\n\t\tthis.io.inputs.named_input_connection_points.forEach((connection_point) => {\n\t\t\tconst param_name = connection_point.name;\n\n\t\t\tconst last_param_value = values_by_param_name.get(param_name);\n\t\t\tif (last_param_value != null) {\n\t\t\t\tconst param_type: ParamType = connection_point.param_type;\n\t\t\t\tlet init_value = ParamValueToDefaultConverter.from_value(param_type, last_param_value);\n\t\t\t\tif (init_value == null) {\n\t\t\t\t\tconst default_value_from_name = this.gl_input_default_value(param_name);\n\t\t\t\t\tif (default_value_from_name != null) {\n\t\t\t\t\t\tinit_value = default_value_from_name;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// if (default_value == null) {\n\t\t\t\t// \tdefault_value = gl_connection.default_value();\n\t\t\t\t// }\n\t\t\t\tif (init_value == null && connection_point.init_value) {\n\t\t\t\t\tinit_value = connection_point.init_value;\n\t\t\t\t}\n\n\t\t\t\tthis.add_param(param_type, param_name, init_value, {\n\t\t\t\t\tspare: true,\n\t\t\t\t\tcook: true,\n\t\t\t\t});\n\t\t\t\thas_created_a_param = true;\n\t\t\t}\n\t\t});\n\n\t\tif (has_created_a_param || has_deleted_a_param) {\n\t\t\tif (!this.scene.loading_controller.is_loading) {\n\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t}\n\t\t}\n\t}\n\t//\n\t//\n\t// PARAM CONFIGS\n\t//\n\t//\n\tpublic set_param_configs() {}\n\tparam_configs() {\n\t\treturn this._param_configs_controller?.list;\n\t}\n\t// private reset_param_configs() {\n\t// \tthis._param_configs = [];\n\t// }\n\t// add_param_config<T extends ParamType>(\n\t// \ttype: T,\n\t// \tname: string,\n\t// \tdefault_value: ParamInitValuesTypeMap[T],\n\t// \tuniform_name: string\n\t// ) {\n\t// \tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t// \tthis._param_configs.push(param_config);\n\t// }\n\t// param_configs() {\n\t// \treturn this._param_configs;\n\t// }\n\t//\n\t//\n\t// INPUT\n\t//\n\t//\n\tprotected gl_input_default_value(name: string) {\n\t\treturn null;\n\t}\n\n\t//\n\t//\n\t// MISC\n\t//\n\t//\n\n\t// used when a node changes its signature, adn the output nodes need to adapt their own signatures\n\tprotected make_output_nodes_dirty() {\n\t\tthis.io.connections\n\t\t\t.output_connections()\n\t\t\t.map((c) => c.node_dest)\n\t\t\t.forEach((o) => {\n\t\t\t\to.set_dirty(this);\n\t\t\t});\n\t}\n\n\t//\n\t//\n\t// NEEDED?\n\t//\n\t//\n\t// set_assembler(assembler: BaseGlShaderAssembler) {\n\t// \tthis._assembler = assembler;\n\t// }\n\t// get assembler(): BaseGlShaderAssembler | undefined {\n\t// \treturn this._assembler;\n\t// }\n\n\t// shader_configs() {\n\t// \treturn this.assembler?.shader_configs || [];\n\t// }\n\t// shader_config(name: string) {\n\t// \treturn this.assembler?.shader_config(name);\n\t// }\n\t// shader_names() {\n\t// \treturn this.assembler?.shader_names || [];\n\t// }\n}\n\nexport type BaseGlNodeType = TypedGlNode<NodeParamsConfig>;\nexport class BaseGlNodeClass extends TypedGlNode<NodeParamsConfig> {}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from 'src/engine/params/types/ParamInitValueSerializedTypeMap';\n\nimport {ParamOptions} from 'src/engine/params/utils/OptionsController';\n\ntype OverridenOptions = Dictionary<string>;\n\nexport type SimpleParamJsonExporterData<T extends ParamType> = ParamInitValueSerializedTypeMap[T];\n\nexport interface ComplexParamJsonExporterData<T extends ParamType> {\n\ttype?: T;\n\tdefault_value?: ParamInitValueSerializedTypeMap[T];\n\traw_input?: ParamInitValueSerializedTypeMap[T];\n\toptions?: ParamOptions;\n\toverriden_options?: OverridenOptions;\n\t// components?: ParamJsonExporterDataByName;\n\t// expression?: string;\n}\nexport type ParamJsonExporterData<T extends ParamType> =\n\t| SimpleParamJsonExporterData<T>\n\t| ComplexParamJsonExporterData<T>;\nexport type ParamJsonExporterDataByName = Dictionary<ParamJsonExporterData<ParamType>>;\n\nexport class ParamJsonExporter<T extends BaseParamType> {\n\t// protected _simple_data: SimpleParamJsonExporterData<ParamType>=0;\n\tprotected _complex_data: ComplexParamJsonExporterData<ParamType> = {};\n\tconstructor(protected _param: T) {}\n\n\tget required(): boolean {\n\t\tconst is_spare_and_not_component = this._param.options.is_spare && !this._param.parent_param;\n\n\t\t// we should not need to check if it has an expression anymore,\n\t\t// as it could have an expression AND be of default value\n\t\tconst value_changed = !this._param.is_default; //|| this._param.has_expression();\n\t\t// const referencing_asset = this._param.is_referencing_asset()\n\t\treturn is_spare_and_not_component || value_changed; // || referencing_asset\n\t}\n\n\tdata() {\n\t\tif (this._param.parent_param) {\n\t\t\tthrow 'no component should be saved';\n\t\t}\n\n\t\tif (this._require_data_complex()) {\n\t\t\treturn this._data_complex();\n\t\t} else {\n\t\t\treturn this._data_simple();\n\t\t}\n\t}\n\n\tprivate _data_simple() {\n\t\treturn this._param.raw_input_serialized;\n\t}\n\n\tprivate _data_complex() {\n\t\tthis._complex_data = {};\n\n\t\tif (this._param.options.is_spare && !this._param.parent_param) {\n\t\t\tthis._complex_data['type'] = this._param.type;\n\t\t\tthis._complex_data['default_value'] = this._param.default_value_serialized;\n\t\t\tthis._complex_data['options'] = this._param.options.current;\n\t\t}\n\n\t\tif (!this._param.is_default) {\n\t\t\tthis.add_main();\n\t\t}\n\n\t\t// if(this._param.is_referencing_asset()){\n\t\t// \t// console.log(\"this._param.is_referencing_asset()\", this._param.is_referencing_asset())\n\t\t// \tthis._data['referenced_asset'] = this._param.referenced_asset()\n\t\t// }\n\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\tconst overridden_options: OverridenOptions = {};\n\t\t\tconst options_overridden = this._param.options.overridden_options;\n\t\t\tfor (let option_name of Object.keys(options_overridden)) {\n\t\t\t\tconst option_value = options_overridden[option_name as keyof ParamOptions];\n\t\t\t\toverridden_options[option_name] = JSON.stringify(option_value);\n\t\t\t}\n\t\t\tthis._complex_data['overriden_options'] = overridden_options;\n\t\t}\n\t\treturn this._complex_data;\n\t}\n\n\tprotected _require_data_complex() {\n\t\tif (this._param.options.is_spare) {\n\t\t\treturn true;\n\t\t}\n\t\tif (this._param.options.has_options_overridden) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// default_value(): ParamValueSerialized {\n\t// \treturn this._param.default_value_serialized;\n\t// }\n\n\t// cannot remember why this is useful, but it messes up\n\t// with gl nodes like the noise node, as the default value\n\t// gets saved as a string '[1,1]' instead of an array [1,1] (should be without quotes)\n\t// protected default_value(){\n\t// \tlet default_value = this._param.default_value()\n\t// \tif(lodash_isString(default_value)){\n\t// \t\tdefault_value = `'${default_value}'`\n\t// \t}\n\t// \tif (lodash_isArray(default_value)){\n\t// \t\tdefault_value = `[${default_value}]`\n\t// \t}\n\t// \treturn default_value\n\t// }\n\n\tprotected add_main() {}\n}\n","// import {Vector3} from 'three/src/math/Vector3';\n// import {Texture} from 'three/src/textures/Texture';\nimport {Raycaster} from 'three/src/core/Raycaster';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n// const THREE = {Color, Mesh, MeshBasicMaterial, PlaneBufferGeometry, Raycaster, Texture, Vector3}\n// import lodash_isNaN from 'lodash/isNaN'\n// import lodash_sum from 'lodash/sum'\n// import {BaseParam} from 'src/Engine/Param/_Base'\n// import {BaseNodePostProcess} from 'src/Engine/Node/PostProcess/_Base'\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\nimport {BaseMatNodeType} from 'src/engine/nodes/mat/_Base';\n// import {NodeContext} from 'src/engine/poly/NodeContext';\n// import {ParamType} from 'src/engine/poly/ParamType';\n// import {EffectComposer} from 'modules/three/examples/jsm/postprocessing/EffectComposer'\n// import {RenderPass} from 'modules/three/examples/jsm/postprocessing/RenderPass'\n\n// import {File} from 'src/Engine/Node/Cop/File'\n\n// import {ScreenQuad} from '../Camera/ScreenQuad'\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\nimport {ParamConfig} from '../../../../utils/params/ParamsConfig';\nexport function CameraBackgroundParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tbackground = ParamConfig.FOLDER();\n\t\tuse_background = ParamConfig.BOOLEAN(0);\n\t\tuse_material = ParamConfig.BOOLEAN(0, {\n\t\t\tvisible_if: {use_background: true},\n\t\t});\n\t\tbackground_color = ParamConfig.COLOR([0, 0, 0], {\n\t\t\tvisible_if: {use_background: true, use_material: false},\n\t\t});\n\t\tbackground_material = ParamConfig.OPERATOR_PATH('', {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t\tnode_selection: {context: NodeContext.MAT},\n\t\t\tdependent_on_found_node: false,\n\t\t});\n\t\tbackground_ratio = ParamConfig.FLOAT(1, {\n\t\t\tvisible_if: {use_background: true, use_material: true},\n\t\t});\n\t};\n}\n\nexport class BaseBackgroundController {\n\t// private _param_use_background: boolean;\n\t// private _param_use_material: boolean;\n\t// private _param_background_color: Color;\n\t// private _param_background_material: string;\n\t// private _param_background_ratio: number;\n\n\tprivate _screen_quad: Mesh | undefined;\n\tprivate _screen_quad_flat_material: MeshBasicMaterial | undefined;\n\n\tprotected _bg_raycaster = new Raycaster();\n\n\tconstructor(protected node: BaseCameraObjNodeType) {}\n\n\tget screen_quad() {\n\t\treturn (this._screen_quad = this._screen_quad || this._create_screen_quad()); // new ScreenQuad()\n\t}\n\tprivate _create_screen_quad() {\n\t\tconst size = 2; // better than 1 for color, as the edges can be visible if canvas ratio extreme\n\t\tconst segments = 1;\n\t\tconst geometry = new PlaneBufferGeometry(size, size, segments, segments);\n\t\tconst quad = new Mesh(geometry);\n\t\tthis.node.object.add(quad);\n\t\treturn quad;\n\t}\n\tscreen_quad_flat_material() {\n\t\treturn (this._screen_quad_flat_material = this._screen_quad_flat_material || new MeshBasicMaterial());\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('background', () => {\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_background', 0);\n\t\t// this.node.add_param(ParamType.BOOLEAN, 'use_material', 0, {\n\t\t// \tvisible_if: {use_background: true},\n\t\t// });\n\t\t// this.node.add_param(ParamType.COLOR, 'background_color', [0, 0, 0], {\n\t\t// \tvisible_if: {use_background: true, use_material: false},\n\t\t// });\n\t\t// this.node.add_param(ParamType.OPERATOR_PATH, 'background_material', '', {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// \tnode_selection: {context: NodeContext.MAT},\n\t\t// \tdependent_on_found_node: false,\n\t\t// });\n\t\t// this.node.add_param(ParamType.FLOAT, 'background_ratio', 1, {\n\t\t// \tvisible_if: {use_background: true, use_material: true},\n\t\t// });\n\t\t// });\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_color', 1 )\n\t\t// this.self.add_param( ParamType.COLOR, 'background_color', [0,0,0], {\n\t\t// \tvisible_if: {use_background_color: 1}\n\t\t// })\n\t\t// this.self.add_param( ParamType.TOGGLE, 'use_background_image', 0 )\n\t\t// this.self.add_param( ParamType.OPERATOR_PATH, 'background_image', File.DEFAULT_NODE_PATH.UV, {\n\t\t// \tvisible_if: {use_background_image: true},\n\t\t// \tnode_selection: {context: NodeContext.COP}\n\t\t// } )\n\t}\n\n\tget use_background(): boolean {\n\t\treturn this.node.params.boolean('use_background');\n\t}\n\tget use_background_material(): boolean {\n\t\treturn this.use_background && this.node.params.boolean('use_material');\n\t}\n\tget use_background_color(): boolean {\n\t\treturn this.use_background && !this.node.params.boolean('use_material');\n\t}\n\tget background_color(): Color | null {\n\t\tif (this.use_background_color) {\n\t\t\treturn this.node.params.color('background_color');\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\t// background_image_url(){\n\t// \tif(this._param_use_background_image){\n\t// \t\t// this.param('background_image').mark_as_referencing_asset(this._param_background_image)\n\t// \t\t// return this._param_background_image\n\t// \t\treturn this._background_image_url\n\t// \t}\n\t// }\n\t// background_texture(){\n\t// \tif(this._param_use_background_image){\n\t// \t\treturn this._background_texture\n\t// \t}\n\t// }\n\tprotected update_screen_quad() {}\n\tasync update() {\n\t\tif (this.use_background) {\n\t\t\tthis.update_screen_quad();\n\n\t\t\tawait this.update_background_color();\n\t\t\tif (this.use_background_material) {\n\t\t\t\tawait this.update_background_material();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._screen_quad) {\n\t\t\t\tthis.node.object.remove(this._screen_quad);\n\t\t\t}\n\t\t}\n\n\t\t// if(this._param_use_background_image){\n\t\t// \tconst bg_node = this.self.param('background_image').found_node();\n\t\t// \tif(bg_node){\n\t\t// \t\tconst container = await bg_node.request_container();\n\t\t// \t\tthis._background_texture = container.core_content()\n\t\t// \t\t// this._background_image_url = bg_node.resolved_url()\n\t\t// \t} else {\n\t\t// \t\tthis._background_texture = null\n\t\t// \t}\n\t\t// } else {\n\t\t// \tthis._background_texture = null\n\t\t// }\n\t}\n\tprivate async update_background_color() {\n\t\tconst material = this.screen_quad_flat_material();\n\t\tmaterial.color = this.node.pv.background_color;\n\t\tthis.screen_quad.material = material;\n\t}\n\n\tprivate async update_background_material() {\n\t\tconst bg_node = this.node.p.background_material.found_node() as BaseMatNodeType;\n\t\tif (bg_node) {\n\t\t\tawait bg_node.request_container();\n\t\t\tconst material = bg_node.material;\n\t\t\tthis.screen_quad.material = material;\n\t\t\t// this.screen_quad().material.uniforms.uTexture.value = texture\n\t\t} else {\n\t\t\tthis.node.states.error.set('bg node not found');\n\t\t}\n\t}\n}\n","import {CoreString} from './String'\nimport {Vector3} from 'three/src/math/Vector3'\nimport {Vector2} from 'three/src/math/Vector2'\nimport lodash_isNumber from 'lodash/isNumber'\nimport lodash_isBoolean from 'lodash/isBoolean'\nimport lodash_isString from 'lodash/isString'\n\nexport class ThreeToGl {\n\tstatic any(value: any) {\n\t\tif (lodash_isString(value)) {\n\t\t\treturn value\n\t\t}\n\t\tif (lodash_isBoolean(value)) {\n\t\t\treturn `${value}`\n\t\t}\n\n\t\tif (lodash_isNumber(value)) {\n\t\t\treturn `${CoreString.ensure_float(value)}`\n\t\t} else {\n\t\t\tconst values = value.toArray().map((v: number) => {\n\t\t\t\treturn `${CoreString.ensure_float(v)}`\n\t\t\t})\n\t\t\tconst gl_type = `vec${values.length}`\n\t\t\treturn `${gl_type}(${values.join(', ')})`\n\t\t}\n\t}\n\n\tstatic vector3(vec: Vector3 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`\n\t\t})\n\t\treturn `vec3(${values.join(', ')})`\n\t}\n\tstatic vector2(vec: Vector2 | string): string {\n\t\tif (lodash_isString(vec)) {\n\t\t\treturn vec\n\t\t}\n\t\tconst values = vec.toArray().map((v) => {\n\t\t\treturn `${CoreString.ensure_float(v)}`\n\t\t})\n\t\treturn `vec2(${values.join(', ')})`\n\t}\n\n\tstatic vector3_float(vec: Vector3 | string, num: number | string): string {\n\t\tif (!lodash_isString(num)) {\n\t\t\tnum = CoreString.ensure_float(num)\n\t\t}\n\t\treturn `vec4(${this.vector3(vec)}, ${num})`\n\t}\n\n\tstatic float3(x: number | string, y: number | string, z: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x)\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y)\n\t\t}\n\t\tif (!lodash_isString(z)) {\n\t\t\tz = CoreString.ensure_float(z)\n\t\t}\n\t\treturn `vec3(${x}, ${y}, ${z})`\n\t}\n\tstatic float2(x: number | string, y: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x)\n\t\t}\n\t\tif (!lodash_isString(y)) {\n\t\t\ty = CoreString.ensure_float(y)\n\t\t}\n\t\treturn `vec2(${x}, ${y})`\n\t}\n\tstatic float(x: number | string) {\n\t\tif (!lodash_isString(x)) {\n\t\t\tx = CoreString.ensure_float(x)\n\t\t}\n\t\treturn `${x}`\n\t}\n\tstatic int(x: number | string) {\n\t\treturn `${x}`\n\t}\n\tstatic bool(x: number | string) {\n\t\treturn `${x}`\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {TextureContainer} from 'src/engine/containers/Texture';\nimport {Texture} from 'three/src/textures/Texture';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\nimport {FlagsControllerB} from '../utils/FlagsController';\nimport {DataTexture} from 'three/src/textures/DataTexture';\nimport {LuminanceFormat, HalfFloatType} from 'three/src/constants';\n\nconst INPUT_COP_NAME = 'input texture';\nconst DEFAULT_INPUT_NAMES = [INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME, INPUT_COP_NAME];\n\nvar size = 32;\nvar data = new Uint16Array(size);\nfor (var i = 0; i < size; i++) {\n\tdata[i] = 0x70e2; // Half float 10000\n}\nconst EMPTY_DATA_TEXTURE = new DataTexture(data, size, 1, LuminanceFormat, HalfFloatType);\n\nexport class TypedCopNode<K extends NodeParamsConfig> extends TypedNode<'TEXTURE', BaseCopNodeType, K> {\n\tcontainer_controller: TypedContainerController<TextureContainer> = new TypedContainerController<TextureContainer>(\n\t\tthis,\n\t\tTextureContainer\n\t);\n\tpublic readonly flags: FlagsControllerB = new FlagsControllerB(this);\n\t// private _typed_array = new Uint8ClampedArray(512 * 512 * 4);\n\t// protected _texture: Texture = new DataTexture(this._typed_array, 512, 512, RGBFormat);\n\t// get texture() {\n\t// \treturn this._data_texture;\n\t// }\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.COP;\n\t}\n\tstatic displayed_input_names(): string[] {\n\t\treturn DEFAULT_INPUT_NAMES;\n\t}\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'BaseCopNode');\n\t}\n\n\tinitialize_base_node() {\n\t\t// this.flags.add_bypass();\n\n\t\t// this.flags.add_display();\n\t\t// if (this.flags.display) {\n\t\t// \tthis.flags.display.set(false);\n\t\t// }\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this.container_controller.init(CONTAINER_CLASS);\n\t}\n\n\tset_texture(texture: Texture) {\n\t\t// this._copy_texture(texture);\n\t\ttexture.name = this.full_path();\n\t\tthis.set_container(texture);\n\t}\n\tclear_texture() {\n\t\tthis.set_container(EMPTY_DATA_TEXTURE);\n\t}\n\n\t// private _copy_texture(texture: Texture) {\n\t// \tconsole.log('_copy_texture', texture);\n\t// \tif (texture instanceof DataTexture) {\n\t// \t\tthis._data_texture.image = texture.image;\n\t// \t} else {\n\t// \t\tconst canvas = document.createElement('canvas');\n\t// \t\t// document.body.appendChild(canvas);\n\t// \t\tconst width = texture.image.width;\n\t// \t\tconst height = texture.image.height;\n\t// \t\tcanvas.width = width;\n\t// \t\tcanvas.height = height;\n\t// \t\tconst context = canvas.getContext('2d') as CanvasRenderingContext2D;\n\t// \t\tcontext.drawImage(texture.image, 0, 0);\n\t// \t\tconst image_data = context.getImageData(0, 0, width, height);\n\t// \t\tconsole.log(this._typed_array.length, image_data.data.length, image_data);\n\t// \t\tthis._data_texture.image = image_data;\n\t// \t}\n\t// \tthis._data_texture.format = texture.format;\n\t// \t// this._data_texture.mapping = texture.mapping;\n\t// \t// this._data_texture.wrapS = texture.wrapS;\n\t// \t// this._data_texture.wrapT = texture.wrapT;\n\t// \t// this._data_texture.minFilter = texture.minFilter;\n\t// \t// this._data_texture.magFilter = texture.magFilter;\n\t// \tthis._data_texture.needsUpdate = true;\n\t// \tconsole.log('updated data tex', this._data_texture);\n\n\t// \t// if (!this._texture || this._texture.uuid != texture.uuid) {\n\t// \t// \tif (!this._texture) {\n\t// \t// \t\tconsole.log('assign');\n\t// \t// \t\tthis._texture = texture.clone();\n\t// \t// \t\t// this._texture.name = this.full_path();\n\t// \t// \t} else {\n\t// \t// \t\tconsole.log('copy');\n\t// \t// \t\tconst keys = Object.keys(texture) as Array<keyof Texture>;\n\t// \t// \t\tconst protected_keys = ['uuid', 'name', 'node'];\n\t// \t// \t\tfor (let key of keys) {\n\t// \t// \t\t\tif (!protected_keys.includes(key)) {\n\t// \t// \t\t\t\tthis._texture[key] = texture[key] as never; // but why is 'never' needed?!\n\t// \t// \t\t\t}\n\t// \t// \t\t}\n\t// \t// \t}\n\t// \t// }\n\t// }\n}\n\nexport type BaseCopNodeType = TypedCopNode<any>;\nexport class BaseCopNodeClass extends TypedCopNode<any> {}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {\n\tUVMapping,\n\tCubeReflectionMapping,\n\tCubeRefractionMapping,\n\tEquirectangularReflectionMapping,\n\tEquirectangularRefractionMapping,\n\tSphericalReflectionMapping,\n\tCubeUVReflectionMapping,\n\tCubeUVRefractionMapping,\n\tClampToEdgeWrapping,\n\tRepeatWrapping,\n\tMirroredRepeatWrapping,\n\tLinearFilter,\n\tNearestFilter,\n\tNearestMipMapNearestFilter,\n\tNearestMipMapLinearFilter,\n\tLinearMipMapNearestFilter,\n\tLinearMipMapLinearFilter,\n\t// UnsignedByteType,\n\t// ByteType,\n\t// ShortType,\n\t// UnsignedShortType,\n\t// IntType,\n\t// UnsignedIntType,\n\t// FloatType,\n\t// HalfFloatType,\n\t// UnsignedShort4444Type,\n\t// UnsignedShort5551Type,\n\t// UnsignedShort565Type,\n\t// UnsignedInt248Type,\n\t// AlphaFormat,\n\t// RGBFormat,\n\t// RGBAFormat,\n\t// LuminanceFormat,\n\t// LuminanceAlphaFormat,\n\t// RGBEFormat,\n\t// DepthFormat,\n\t// DepthStencilFormat,\n\t// LinearEncoding,\n\t// sRGBEncoding,\n\t// GammaEncoding,\n\t// RGBEEncoding,\n\t// LogLuvEncoding,\n\t// RGBM7Encoding,\n\t// RGBM16Encoding,\n\t// RGBDEncoding,\n\t// BasicDepthPacking,\n\t// RGBADepthPacking,\n} from 'three/src/constants';\nimport {Texture} from 'three/src/textures/Texture';\n// const THREE = {\n// \tTexture,\n// \tUVMapping,\n// \tVideoTexture,\n// \tCubeReflectionMapping,\n// \tCubeRefractionMapping,\n// \tEquirectangularReflectionMapping,\n// \tEquirectangularRefractionMapping,\n// \tSphericalReflectionMapping,\n// \tCubeUVReflectionMapping,\n// \tCubeUVRefractionMapping,\n// \tClampToEdgeWrapping,\n// \tRepeatWrapping,\n// \tMirroredRepeatWrapping,\n// \tLinearFilter,\n// \tNearestFilter,\n// \tNearestMipMapNearestFilter,\n// \tNearestMipMapLinearFilter,\n// \tLinearMipMapNearestFilter,\n// \tLinearMipMapLinearFilter,\n// \tUnsignedByteType,\n// \tByteType,\n// \tShortType,\n// \tUnsignedShortType,\n// \tIntType,\n// \tUnsignedIntType,\n// \tFloatType,\n// \tHalfFloatType,\n// \tUnsignedShort4444Type,\n// \tUnsignedShort5551Type,\n// \tUnsignedShort565Type,\n// \tUnsignedInt248Type,\n// \tAlphaFormat,\n// \tRGBFormat,\n// \tRGBAFormat,\n// \tLuminanceFormat,\n// \tLuminanceAlphaFormat,\n// \tRGBEFormat,\n// \tDepthFormat,\n// \tDepthStencilFormat,\n// \tLinearEncoding,\n// \tsRGBEncoding,\n// \tGammaEncoding,\n// \tRGBEEncoding,\n// \tLogLuvEncoding,\n// \tRGBM7Encoding,\n// \tRGBM16Encoding,\n// \tRGBDEncoding,\n// \tBasicDepthPacking,\n// \tRGBADepthPacking,\n// };\n// import lodash_last from 'lodash/last';\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from 'src/Engine/Param/_Base'\nimport {CoreTextureLoader} from 'src/core/loader/Texture';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\n// this used to be named file_in, but I can't recall the decision of not calling it simply 'file'\n// so renaming it back to file for now\n\nconst MAPPINGS = [\n\t{UVMapping},\n\t{CubeReflectionMapping},\n\t{CubeRefractionMapping},\n\t{EquirectangularReflectionMapping},\n\t{EquirectangularRefractionMapping},\n\t{SphericalReflectionMapping},\n\t{CubeUVReflectionMapping},\n\t{CubeUVRefractionMapping},\n];\n\nconst WRAPPINGS: Dictionary<number>[] = [{ClampToEdgeWrapping}, {RepeatWrapping}, {MirroredRepeatWrapping}];\n\nconst MAG_FILTERS: Dictionary<number>[] = [{LinearFilter}, {NearestFilter}];\nconst MIN_FILTERS: Dictionary<number>[] = [\n\t{NearestFilter},\n\t{NearestMipMapNearestFilter},\n\t{NearestMipMapLinearFilter},\n\t{LinearFilter},\n\t{LinearMipMapNearestFilter},\n\t{LinearMipMapLinearFilter},\n];\n\n// const TYPES = [\n// \t\"UnsignedByteType\",\n// \t\"ByteType\",\n// \t\"ShortType\",\n// \t\"UnsignedShortType\",\n// \t\"IntType\",\n// \t\"UnsignedIntType\",\n// \t\"FloatType\",\n// \t\"HalfFloatType\",\n// \t\"UnsignedShort4444Type\",\n// \t\"UnsignedShort5551Type\",\n// \t\"UnsignedShort565Type\",\n// \t\"UnsignedInt248Type\"\n// ];\n\n// const FORMATS = [\n// \t\"AlphaFormat\",\n// \t\"RGBFormat\",\n// \t\"RGBAFormat\",\n// \t\"LuminanceFormat\",\n// \t\"LuminanceAlphaFormat\",\n// \t\"RGBEFormat\",\n// \t\"DepthFormat\",\n// \t\"DepthStencilFormat\"\n// ];\n\n// const ENCODINGS = [\n// \t\"LinearEncoding\",\n// \t\"sRGBEncoding\",\n// \t\"GammaEncoding\",\n// \t\"RGBEEncoding\",\n// \t\"LogLuvEncoding\",\n// \t\"RGBM7Encoding\",\n// \t\"RGBM16Encoding\",\n// \t\"RGBDEncoding\",\n// \t\"BasicDepthPacking\",\n// \t\"RGBADepthPacking\"\n// ];\n\ninterface AttribMapping {\n\tmapping: string;\n\twrapS: string;\n\twrapT: string;\n\tminFilter: string;\n\tmagFilter: string;\n}\nconst ATTRIB_MAPPING_KEYS: Array<keyof AttribMapping> = ['mapping', 'wrapS', 'wrapT', 'minFilter', 'magFilter'];\nconst ATTRIB_MAPPING: AttribMapping = {\n\tmapping: 'mapping',\n\twrapS: 'wrap_s',\n\twrapT: 'wrap_t',\n\tminFilter: 'min_filter',\n\tmagFilter: 'mag_filter',\n\t// type: 'type',\n\t// encoding: 'encoding'\n\t// format: 'format',\n};\n\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass FileCopParamsConfig extends NodeParamsConfig {\n\t// video_time = ParamConfig.FLOAT(1);\n\turl = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t\tdesktop_browse: {file_type: 'texture'},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileCopNode.PARAM_CALLBACK_reload(node as FileCopNode, param);\n\t\t},\n\t});\n\tmapping = ParamConfig.INTEGER(UVMapping, {\n\t\tmenu: {\n\t\t\tentries: MAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_s = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\twrap_t = ParamConfig.INTEGER(Object.values(WRAPPINGS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: WRAPPINGS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmag_filter = ParamConfig.INTEGER(Object.values(MAG_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MAG_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tmin_filter = ParamConfig.INTEGER(Object.values(MIN_FILTERS[0])[0], {\n\t\tmenu: {\n\t\t\t// type: 'radio',\n\t\t\tentries: MIN_FILTERS.map((m) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: Object.keys(m)[0],\n\t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new FileCopParamsConfig();\n\nexport class FileCopNode extends TypedCopNode<FileCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\t// @ParamF('video_time') _param_video_time: number;\n\t// @ParamS('url') _param_url: string;\n\tprivate _previous_param_url: string | undefined;\n\tprivate _video: HTMLVideoElement | undefined;\n\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\t// _param_video_time_param: BaseParam\n\tprivate _texture_loader: CoreTextureLoader | undefined;\n\n\tstatic VIDEO_TIME_PARAM_NAME = 'video_time';\n\tstatic DEFAULT_NODE_PATH = {\n\t\tUV: '/COP/file_uv',\n\t\tENV_MAP: '/COP/env_map',\n\t};\n\n\t// initialize_node() {\n\t// \t// this.io.inputs.set_count_to_zero();\n\t// }\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT, {\n\t// \t// \tdesktop_browse: {file_type: 'texture'},\n\t// \t// });\n\t// \t// this.add_param(ParamType.BUTTON, 'reload', null, {\n\t// \t// \tcallback: this._reload.bind(this),\n\t// \t// });\n\t// \t// this.add_param(ParamType.FLOAT, 'video_time', 0, {range: [0, 10]})\n\t// \t// this.add_param(ParamType.INTEGER, 'mapping', UVMapping as number, {\n\t// \t// \tmenu: {\n\t// \t// \t\tentries: MAPPINGS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// for (let wrap_name of ['wrap_s', 'wrap_t']) {\n\t// \t// \tconst wrap = Object.values(WRAPPINGS[0])[0] as number;\n\t// \t// \tthis.add_param(ParamType.INTEGER, wrap_name, wrap, {\n\t// \t// \t\tmenu: {\n\t// \t// \t\t\t// type: 'radio',\n\t// \t// \t\t\tentries: WRAPPINGS.map((m) => {\n\t// \t// \t\t\t\treturn {\n\t// \t// \t\t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t\t};\n\t// \t// \t\t\t}),\n\t// \t// \t\t},\n\t// \t// \t});\n\t// \t// }\n\t// \t// const mag_filter = Object.values(MAG_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'mag_filter', mag_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MAG_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// const min_filter: number = Object.values(MIN_FILTERS[0])[0] as number;\n\t// \t// this.add_param(ParamType.INTEGER, 'min_filter', min_filter, {\n\t// \t// \tmenu: {\n\t// \t// \t\t// type: 'radio',\n\t// \t// \t\tentries: MIN_FILTERS.map((m) => {\n\t// \t// \t\t\treturn {\n\t// \t// \t\t\t\tname: Object.keys(m)[0],\n\t// \t// \t\t\t\tvalue: Object.values(m)[0] as number,\n\t// \t// \t\t\t};\n\t// \t// \t\t}),\n\t// \t// \t},\n\t// \t// });\n\t// \t// TODO: to be added when I have some level of control\n\t// \t// for now, the type attribute overrides what piz_compressed.exr creates\n\t// \t// which in turns fucks up with the env_map\n\t// \t// advanced\n\t// \t// this.add_param(ParamType.TOGGLE, 'advanced', 0)\n\t// \t// this.add_param(ParamType.INTEGER, 'type', THREE[TYPES[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: TYPES.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'format', THREE[FORMATS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: FORMATS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// \t// this.add_param(ParamType.INTEGER, 'encoding', THREE[ENCODINGS[0]], {\n\t// \t// \tmenu: { type: 'radio', entries: ENCODINGS.map(m=>{ return { name: m, value: THREE[m] } })},\n\t// \t// \tvisible_if: {advanced: 1}\n\t// \t// })\n\t// }\n\n\tasync cook() {\n\t\tif (this._is_static_image_url(this.pv.url)) {\n\t\t\tawait this.cook_for_image();\n\t\t} else {\n\t\t\tawait this.cook_for_video();\n\t\t}\n\t}\n\n\tprivate _is_static_image_url(url: string) {\n\t\treturn true;\n\t}\n\n\tprivate async cook_for_image() {\n\t\tconst texture = await this._load_texture(this.pv.url);\n\n\t\tif (texture) {\n\t\t\tthis._update_texture_params(texture);\n\t\t\tthis.set_texture(texture);\n\t\t} else {\n\t\t\tthis.clear_texture();\n\t\t}\n\t}\n\n\tprivate async cook_for_video() {\n\t\tif (this._param_url_changed()) {\n\t\t\tconst texture = await this._load_texture(this.pv.url);\n\t\t\t// if (texture) {\n\t\t\t// \tthis._texture = texture;\n\t\t\t// }\n\n\t\t\tif (texture) {\n\t\t\t\tthis._add_video_spare_params_if_required(texture);\n\t\t\t}\n\t\t\tthis._previous_param_url = this.pv.url;\n\n\t\t\tthis._set_video_current_time();\n\n\t\t\tif (texture) {\n\t\t\t\tthis._update_texture_params(texture);\n\t\t\t\tthis.set_texture(texture);\n\t\t\t} else {\n\t\t\t\tthis.cook_controller.end_cook();\n\t\t\t}\n\t\t} else {\n\t\t\t// this._set_video_current_time();\n\t\t\t// this._update_texture_params();\n\t\t\t// if (texture?.needsUpdate) {\n\t\t\t// \tthis.set_texture(texture);\n\t\t\t// } else {\n\t\t\t// \tthis.cook_controller.end_cook();\n\t\t\t// }\n\t\t}\n\t}\n\n\tresolved_url() {\n\t\treturn this.pv.url;\n\t}\n\n\tprivate _update_texture_params(texture: Texture) {\n\t\t// const keys = Object.keys(ATTRIB_MAPPING) as keyof AttribMapping\n\t\tfor (let texture_attrib of ATTRIB_MAPPING_KEYS) {\n\t\t\tconst param_name = ATTRIB_MAPPING[texture_attrib];\n\t\t\tconst param_value = this.params.float(param_name);\n\t\t\t// const texture_attrib = ATTRIB_MAPPING[attrib];\n\n\t\t\tif (param_value != null && texture) {\n\t\t\t\tif (texture[texture_attrib] != param_value) {\n\t\t\t\t\ttexture[texture_attrib] = param_value;\n\t\t\t\t\ttexture.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic PARAM_CALLBACK_reload(node: FileCopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\tthis._previous_param_url = undefined;\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_successors_dirty();\n\t\t// this.set_dirty()\n\t}\n\n\tprivate _set_video_current_time() {\n\t\tif (this._video) {\n\t\t\tif (this.params.has('video_time')) {\n\t\t\t\tthis._video.currentTime = this.params.float('video_time');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_video_spare_params_if_required(texture: Texture | VideoTexture | null) {\n\t\tif (texture) {\n\t\t\tconst is_video = texture.constructor == VideoTexture;\n\t\t\tif (is_video) {\n\t\t\t\tthis._video = texture.image;\n\t\t\t\tif (this._video) {\n\t\t\t\t\tif (!this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\t\t\t\tconst duration = this._video.duration;\n\n\t\t\t\t\t\tthis.add_param(ParamType.FLOAT, FileCopNode.VIDEO_TIME_PARAM_NAME, '$T', {\n\t\t\t\t\t\t\tspare: true,\n\t\t\t\t\t\t\tcook: true,\n\t\t\t\t\t\t\trange: [0, duration],\n\t\t\t\t\t\t\trange_locked: [true, true],\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._remove_spare_params();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._remove_spare_params();\n\t\t}\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tif (this.params.has_param(FileCopNode.VIDEO_TIME_PARAM_NAME)) {\n\t\t\tthis.params.delete_param(FileCopNode.VIDEO_TIME_PARAM_NAME);\n\t\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n\n\tprivate _param_url_changed(): boolean {\n\t\treturn this._previous_param_url != this.pv.url;\n\t}\n\n\tprivate async _load_texture(url: string) {\n\t\tlet texture: Texture | VideoTexture | null = null;\n\t\tconst param = this.params.get('url');\n\t\tif (url && param) {\n\t\t\tthis._texture_loader = this._texture_loader || new CoreTextureLoader(this, param);\n\t\t\t// const ext = lodash_last(url.split('.')).toLowerCase()\n\t\t\ttry {\n\t\t\t\ttexture = await this._texture_loader.load_texture_from_url_or_op(url);\n\t\t\t} catch (e) {\n\t\t\t\t//console.log('FAIL');\n\t\t\t}\n\t\t\t// if(texture){\n\t\t\t// \tcallback(texture)\n\t\t\t// } else {\n\t\t\tif (!texture) {\n\t\t\t\tthis.states.error.set(`could not load texture '${url}'`);\n\t\t\t}\n\t\t\t// }).catch(error=>{\n\t\t\t// \tthis.self.set_error(`could not load texture ${url} (${error})`);\n\t\t\t// })\n\t\t} else {\n\t\t\tthis.states.error.set('not url given to Mat/Base._load_texture');\n\t\t}\n\t\treturn texture;\n\t}\n}\n","import {BaseGlNodeType} from '../_Base';\nimport {TypedGLDefinitionCollection} from './GLDefinitionCollection';\nimport {ConnectionPointType} from '../../utils/connections/ConnectionPointType';\n\nexport enum GLDefinitionType {\n\tATTRIBUTE = 'attribute',\n\tFUNCTION = 'function',\n\tUNIFORM = 'uniform',\n\tVARYING = 'varying',\n}\n\nexport abstract class TypedGLDefinition<T extends GLDefinitionType> {\n\t// constructor(protected _node: BaseGlNodeType, protected _name: string) {}\n\tconstructor(\n\t\tprotected _definition_type: T,\n\t\tprotected _data_type: ConnectionPointType,\n\t\tprotected _node: BaseGlNodeType,\n\t\tprotected _name: string\n\t) {\n\t\t// super(_node, _name);\n\t}\n\n\tget definition_type() {\n\t\treturn this._definition_type;\n\t}\n\tget data_type() {\n\t\treturn this._data_type;\n\t}\n\tget node() {\n\t\treturn this._node;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\t// get id() {\n\t// \treturn this._data_type;\n\t// }\n\n\tabstract get line(): string;\n\tcollection_instance() {\n\t\treturn new TypedGLDefinitionCollection<T>();\n\t}\n}\n\nexport class AttributeGLDefinition extends TypedGLDefinition<GLDefinitionType.ATTRIBUTE> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.ATTRIBUTE, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `attribute ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class FunctionGLDefinition extends TypedGLDefinition<GLDefinitionType.FUNCTION> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.FUNCTION, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn this.name;\n\t}\n}\n\nexport class UniformGLDefinition extends TypedGLDefinition<GLDefinitionType.UNIFORM> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.UNIFORM, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `uniform ${this.data_type} ${this.name}`;\n\t}\n}\n\nexport class VaryingGLDefinition extends TypedGLDefinition<GLDefinitionType.VARYING> {\n\tconstructor(protected _node: BaseGlNodeType, protected _data_type: ConnectionPointType, protected _name: string) {\n\t\tsuper(GLDefinitionType.VARYING, _data_type, _node, _name);\n\t}\n\tget line() {\n\t\treturn `varying ${this.data_type} ${this.name}`;\n\t}\n}\nexport type BaseGLDefinition = TypedGLDefinition<GLDefinitionType>;\n","import {BaseController} from './_BaseController';\nimport {TypedMatNode} from '../_Base';\n\nimport {VertexColors} from 'three/src/constants';\nimport {NoColors} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {Color} from 'three/src/math/Color';\n// import {Material} from 'three/src/materials/Material';\n// import {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import {Color} from 'three/src/math/Color';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\n// interface AddParamsOptions {\n// \tflat_shading?: boolean;\n// }\n\n// interface MaterialWithUniforms extends Material {\n// \tcolor: Color;\n// \tuniforms: {\n// \t\tdiffuse: IUniform;\n// \t\topacity: IUniform;\n// \t\tuse_fog: IUniform;\n// \t};\n// }\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n\nexport function ColorParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tuse_vertex_colors = ParamConfig.BOOLEAN(0);\n\t\ttransparent = ParamConfig.BOOLEAN(0);\n\t\topacity = ParamConfig.FLOAT(1);\n\t\talpha_test = ParamConfig.FLOAT(0);\n\t\tuse_fog = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass ColoredMaterial extends Material {\n\tpublic color!: Color;\n\tvertexColors!: number;\n\ttransparent!: boolean;\n\tdepthTest!: boolean;\n\talphaTest!: number;\n\tfog!: boolean;\n}\nclass ColorParamsConfig extends ColorParamConfig(NodeParamsConfig) {}\nclass ColoredMatNode extends TypedMatNode<ColoredMaterial, ColorParamsConfig> {\n\tcreate_material() {\n\t\treturn new ColoredMaterial();\n\t}\n}\n\nexport class ColorsController extends BaseController {\n\t// add_params(options: AddParamsOptions = {}) {\n\t// \t// this.node.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \t// this.node.add_param(ParamType.BOOLEAN, 'use_vertex_colors', 0);\n\t// \t// if (options['flat_shading'] != false) {\n\t// \t// \t// for points\n\t// \t// \tthis.node.add_param(ParamType.BOOLEAN, 'flat_shading', 0);\n\t// \t// }\n\t// \t// this.node.add_param(ParamType.BOOLEAN, 'transparent', 0);\n\t// \t// this.node.add_param(ParamType.FLOAT, 'opacity', 1);\n\t// \t// this.node.add_param(ParamType.FLOAT, 'alpha_test', 0);\n\t// \t// if (this.__fog_used_in_uniforms()) {\n\t// \t// \tthis.node.add_param(ParamType.BOOLEAN, 'use_fog', 1);\n\t// \t// }\n\t// }\n\n\tstatic update(node: ColoredMatNode) {\n\t\tconst material = node.material;\n\t\tconst pv = node.pv;\n\t\tmaterial.color.copy(pv.color);\n\t\tmaterial.vertexColors = pv.use_vertex_colors ? VertexColors : NoColors;\n\n\t\tmaterial.opacity = pv.opacity;\n\t\tmaterial.transparent = pv.transparent || pv.opacity < 1;\n\t\tif (material.transparent) {\n\t\t\tmaterial.depthTest = true;\n\t\t}\n\t\tmaterial.alphaTest = pv.alpha_test;\n\t\tmaterial.fog = pv.use_fog;\n\t}\n\n\t// update() {\n\t// \tif (this.__has_uniforms()) {\n\t// \t\tthis.material.uniforms.diffuse.value = this._param_color;\n\t// \t} else {\n\t// \t\tthis.material.color = this._param_color;\n\t// \t\tthis.material.flatShading = this._param_flat_shading;\n\t// \t}\n\n\t// \tif (this.__has_uniforms()) {\n\t// \t\tthis.material.uniforms.opacity.value = this._param_opacity;\n\t// \t} else {\n\t// \t\tthis.material.opacity = this._param_opacity;\n\t// \t}\n\t// \tthis.material.transparent = this._param_transparent || this.material.opacity < 1;\n\t// \tif (this.material.transparent) {\n\t// \t\tthis.material.depthTest = true;\n\t// \t}\n\t// \tthis.material.alphaTest = this._param_alpha_test;\n\n\t// \tthis.set_user_vertex_colors(this.material, this._param_use_vertex_colors);\n\n\t// \tif (this.__fog_used_in_uniforms()) {\n\t// \t\tthis.material.fog = this._param_use_fog;\n\t// \t}\n\t// }\n\n\t// get material() {\n\t// \treturn this.node.material as MaterialWithUniforms;\n\t// }\n\t// get _param_color() {\n\t// \treturn this.node.params.color('color');\n\t// }\n\t// get _param_flat_shading() {\n\t// \treturn this.node.params.boolean('flat_shading');\n\t// }\n\t// get _param_opacity() {\n\t// \treturn this.node.params.float('opacity');\n\t// }\n\t// get _param_transparent() {\n\t// \treturn this.node.params.boolean('transparent');\n\t// }\n\t// get _param_alpha_test() {\n\t// \treturn this.node.params.float('alpha_test');\n\t// }\n\t// get _param_use_vertex_colors() {\n\t// \treturn this.node.params.boolean('use_vertex_colors');\n\t// }\n\t// get _param_use_fog() {\n\t// \treturn this.node.params.boolean('use_fog');\n\t// }\n\n\t// protected __has_uniforms(): boolean {\n\t// \treturn this.material && this.material.uniforms != null;\n\t// }\n\t// protected __fog_used_in_uniforms(): boolean {\n\t// \treturn this.material && (this.material.uniforms == null || this.material.uniforms.use_fog != null);\n\t// }\n\n\t// private set_user_vertex_colors(material: Material, use_vertex_colors: boolean) {\n\t// \tmaterial.vertexColors = use_vertex_colors ? VertexColors : NoColors;\n\t// \tif (this.__has_uniforms()) {\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\t// }\n}\n","import {BaseController} from './_BaseController';\n\nimport {FrontSide} from 'three/src/constants';\nimport {DoubleSide} from 'three/src/constants';\nimport {BackSide} from 'three/src/constants';\nimport {Material} from 'three/src/materials/Material';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nexport function SideParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tdouble_sided = ParamConfig.BOOLEAN(0);\n\t\tfront = ParamConfig.BOOLEAN(1, {visible_if: {double_sided: false}});\n\t};\n}\n\nclass SidedMaterial extends Material {\n\tside!: number;\n}\nclass SideParamsConfig extends SideParamConfig(NodeParamsConfig) {}\nclass SideMatNode extends TypedMatNode<SidedMaterial, SideParamsConfig> {\n\tcreate_material() {\n\t\treturn new SidedMaterial();\n\t}\n}\n\nexport class SideController extends BaseController {\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'double_sided', 0);\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'front', 1, {visible_if: {double_sided: false}});\n\t// }\n\n\tstatic update(node: SideMatNode) {\n\t\tconst prev = node.material.side;\n\t\tconst single_side = node.pv.front ? FrontSide : BackSide;\n\t\tnode.material.side = node.pv.double_sided ? DoubleSide : single_side;\n\t\tif (prev != node.material.side) {\n\t\t\tnode.material.needsUpdate = true;\n\t\t}\n\t}\n\n\t// update() {\n\t// \tthis.material.side = this._param_double_sided ? DoubleSide : this._param_front ? FrontSide : BackSide;\n\t// }\n\n\t// get _param_front() {\n\t// \treturn this.node.params.boolean('front');\n\t// }\n\t// get _param_double_sided() {\n\t// \treturn this.node.params.boolean('double_sided');\n\t// }\n}\n","import {BaseGlShaderAssembler} from './_Base';\n\nimport {ThreeToGl} from 'src/core/ThreeToGl';\nimport {OutputGlNode} from '../../Output';\nimport {AttributeGlNode} from '../../Attribute';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {GlobalsGlNode} from '../../Globals';\nimport {BaseGLDefinition, UniformGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {MapUtils} from 'src/core/MapUtils';\nimport {ShaderMaterialWithCustomMaterials} from 'src/core/geometry/Material';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n// import {BaseNodeType} from '../../_Base';\n// import {GlobalsGeometryHandler} from './Globals/Geometry'\n\nexport enum CustomMaterialName {\n\tDISTANCE = 'customDistanceMaterial',\n\tDEPTH = 'customDepthMaterial',\n\tDEPTH_DOF = 'customDepthDOFMaterial',\n}\n// export type ShaderAssemblerRenderDerivated = {new (node: BaseNodeType): ShaderAssemblerRender};\n// type ShaderAssemblerRenderDerivatedClass = new (...args: any[]) => ShaderAssemblerRender;\nexport type CustomAssemblerMap = Map<CustomMaterialName, typeof ShaderAssemblerRender>;\n\nexport class ShaderAssemblerRender extends BaseGlShaderAssembler {\n\tprivate _assemblers_by_custom_name: Map<CustomMaterialName, ShaderAssemblerRender> = new Map();\n\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap | undefined {\n\t\treturn undefined;\n\t}\n\n\tasync compile_custom_materials(material: ShaderMaterialWithCustomMaterials): Promise<void> {\n\t\t// const custom_materials_by_name: Map<CustomMaterialName, ShaderMaterial> = new Map();\n\t\t// this._assemblers_by_custom_name.clear();\n\n\t\tconst class_by_custom_name = this.custom_assembler_class_by_custom_name();\n\t\tif (class_by_custom_name) {\n\t\t\tclass_by_custom_name.forEach(\n\t\t\t\tasync (assembler_class: typeof ShaderAssemblerRender, custom_name: CustomMaterialName) => {\n\t\t\t\t\tif (this._code_builder) {\n\t\t\t\t\t\tlet assembler: ShaderAssemblerRender | undefined = this._assemblers_by_custom_name.get(\n\t\t\t\t\t\t\tcustom_name\n\t\t\t\t\t\t);\n\t\t\t\t\t\tif (!assembler) {\n\t\t\t\t\t\t\tassembler = new assembler_class(this._gl_parent_node);\n\t\t\t\t\t\t\tthis._assemblers_by_custom_name.set(custom_name, assembler);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tassembler.set_root_nodes(this._root_nodes);\n\t\t\t\t\t\tassembler.set_param_configs_owner(this._code_builder);\n\t\t\t\t\t\tassembler.set_shader_configs(this.shader_configs);\n\t\t\t\t\t\tassembler.set_variable_configs(this.variable_configs());\n\n\t\t\t\t\t\tconst custom_material = material.custom_materials[custom_name];\n\t\t\t\t\t\tif (custom_material) {\n\t\t\t\t\t\t\tawait assembler.compile_material(custom_material);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// if (material) {\n\t\t\t\t\t\t// \t// add needsUpdate = true, as we always get the same material\n\t\t\t\t\t\t// \t// material.needsUpdate = true;\n\t\t\t\t\t\t// \tcustom_materials_by_name.set(custom_name, material);\n\t\t\t\t\t\t// }\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\n\t\t// for (let custom_name of Object.keys(class_by_custom_name)) {\n\t\t// \tconst assembler_class = class_by_custom_name[custom_name];\n\t\t// \t// const assembler = new assembler_class(this._gl_parent_node)\n\n\t\t// }\n\n\t\t// return custom_materials_by_name;\n\t}\n\tasync compile_material(material: ShaderMaterial) {}\n\n\tshadow_assembler_class_by_custom_name() {\n\t\treturn {};\n\t}\n\n\tadd_output_body_line(\n\t\toutput_node: OutputGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController,\n\t\tinput_name: string\n\t) {\n\t\tconst input = output_node.io.inputs.named_input(input_name);\n\t\tconst var_input = output_node.variable_for_input(input_name);\n\t\tconst variable_config = this.variable_config(input_name);\n\n\t\tlet new_var: string | null = null;\n\t\tif (input) {\n\t\t\tnew_var = ThreeToGl.vector3(var_input);\n\t\t} else {\n\t\t\tif (variable_config.default_from_attribute()) {\n\t\t\t\tconst connection_point = output_node.io.inputs.named_input_connection_points_by_name(input_name);\n\t\t\t\tif (connection_point) {\n\t\t\t\t\tconst gl_type = connection_point.type;\n\t\t\t\t\tconst attr_read = this.globals_handler?.read_attribute(\n\t\t\t\t\t\toutput_node,\n\t\t\t\t\t\tgl_type,\n\t\t\t\t\t\tinput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t);\n\t\t\t\t\tif (attr_read) {\n\t\t\t\t\t\tnew_var = attr_read;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst variable_config_default = variable_config.default();\n\t\t\t\tif (variable_config_default) {\n\t\t\t\t\tnew_var = variable_config_default;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// const default_value = variable_config.default()\n\t\t\t// new_var = default_value\n\t\t\t// const definition_configs = variable_config.required_definitions() || []\n\t\t\t// for(let definition_config of definition_configs){\n\t\t\t// \tconst definition = definition_config.create_definition(output_node)\n\t\t\t// \toutput_node.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\t\tif (new_var) {\n\t\t\tconst prefix = variable_config.prefix();\n\t\t\tconst suffix = variable_config.suffix();\n\t\t\tconst if_condition = variable_config.if_condition();\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#if ${if_condition}`]);\n\t\t\t}\n\t\t\tshaders_collection_controller.add_body_lines(output_node, [`${prefix}${new_var}${suffix}`]);\n\t\t\tif (if_condition) {\n\t\t\t\tshaders_collection_controller.add_body_lines(output_node, [`#endif`]);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst input_names = this.shader_config(shader_name)?.input_names();\n\t\tif (input_names) {\n\t\t\t// shaders_collection_controller.set_body_lines([], shader_name);\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\tthis.add_output_body_line(output_node, shaders_collection_controller, input_name);\n\t\t\t}\n\t\t}\n\t}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\t// const named_output = attribute_node.connected_output()\n\t\t// const named_connection = attribute_node.connected_input()\n\t\tconst gl_type = attribute_node.gl_type();\n\t\tconst new_var = this.globals_handler?.read_attribute(\n\t\t\tattribute_node,\n\t\t\tgl_type,\n\t\t\tattribute_node.attribute_name,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\tconst var_name = attribute_node.gl_var_name(attribute_node.output_name);\n\t\tshaders_collection_controller.add_body_lines(attribute_node, [`${gl_type} ${var_name} = ${new_var}`]);\n\t\t// this.add_output_body_line(\n\t\t// \tattribute_node,\n\t\t// \tshader_name,\n\t\t// \tinput_name\n\t\t// \t)\n\n\t\t// const vertex_definitions = []\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_definitions = []\n\n\t\t// const named_output = attribute_node.named_outputs()[0]\n\t\t// const gl_type = named_output.type()\n\t\t// const var_name = attribute_node.gl_var_name(named_output.name())\n\n\t\t// const attribute_name = attribute_node.attribute_name()\n\t\t// // TODO: I should probably raise an error in the node\n\t\t// // maybe when doint the initial eval of all nodes and check for errors?\n\t\t// if(!attribute_name){\n\t\t// \tconsole.error(attribute_node.full_path())\n\t\t// \tthrow new Error(\"empty attr name\")\n\t\t// }\n\t\t// if(GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attribute_name) < 0){\n\t\t// \tvertex_definitions.push(new Definition.Attribute(attribute_node, gl_type, attribute_name))\n\t\t// }\n\t\t// vertex_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\t\t// vertex_body_lines.push( `${var_name} = ${attribute_name}` )\n\t\t// fragment_definitions.push(new Definition.Varying(attribute_node, gl_type, var_name))\n\n\t\t// attribute_node.set_definitions(vertex_definitions, 'vertex')\n\t\t// attribute_node.set_definitions(fragment_definitions, 'fragment')\n\t\t// attribute_node.add_body_lines(vertex_body_lines, 'vertex')\n\t}\n\n\thandle_gl_FragCoord(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec4 ${var_name} = gl_FragCoord`);\n\t\t}\n\t}\n\thandle_resolution(body_lines: string[], shader_name: ShaderName, var_name: string) {\n\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\tbody_lines.push(`vec2 ${var_name} = resolution`);\n\t\t}\n\t}\n\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {\n\t\t// const vertex_definitions = [];\n\t\t// const fragment_definitions = [];\n\t\t// const definitions = [];\n\t\t// const vertex_body_lines = []\n\t\t// const fragment_body_lines = [];\n\t\tconst body_lines = [];\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tconst shader_config = this.shader_config(shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]> = new Map();\n\t\t// definitions_by_shader_nameshader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tdefinitions_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t// body_lines_by_shader_name[shader_name] = [];\n\t\t// for (let dependency of dependencies) {\n\t\t// \tbody_lines_by_shader_name[dependency] = [];\n\t\t// }\n\n\t\tlet definition;\n\t\tlet body_line;\n\t\tfor (let output_name of globals_node.io.outputs.used_output_names()) {\n\t\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\t\tconst globals_shader_name = shaders_collection_controller.current_shader_name;\n\n\t\t\tswitch (output_name) {\n\t\t\t\tcase 'frame':\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.FLOAT, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tbody_line = `float ${var_name} = ${output_name}`;\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\t\t\t}\n\n\t\t\t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t\t\t\tbody_lines.push(body_line);\n\t\t\t\t\tthis.set_frame_dependent();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gl_FragCoord':\n\t\t\t\t\tthis.handle_gl_FragCoord(body_lines, shader_name, var_name);\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'resolution':\n\t\t\t\t\tthis.handle_resolution(body_lines, shader_name, var_name);\n\t\t\t\t\tdefinition = new UniformGLDefinition(globals_node, ConnectionPointType.VEC2, output_name);\n\t\t\t\t\tif (globals_shader_name) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, globals_shader_name, definition);\n\t\t\t\t\t}\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.set_resolution_dependent();\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'gl_PointCoord':\n\t\t\t\t\tif (shader_name == ShaderName.FRAGMENT) {\n\t\t\t\t\t\tbody_lines.push(`vec2 ${var_name} = gl_PointCoord`);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t\t// const new_var = this.globals_handler().read_attribute(\n\t\t\t\t\t// \tglobals_node,\n\t\t\t\t\t// \tgl_type,\n\t\t\t\t\t// \toutput_name\n\t\t\t\t\t// )\n\t\t\t\t\t// const body_line = `${var_name} = ${new_var}`\n\t\t\t\t\t// globals_node.add_body_lines([body_line])\n\t\t\t\t\tthis.globals_handler?.handle_globals_node(\n\t\t\t\t\t\tglobals_node,\n\t\t\t\t\t\toutput_name,\n\t\t\t\t\t\tshaders_collection_controller\n\t\t\t\t\t\t// definitions_by_shader_name,\n\t\t\t\t\t\t// body_lines_by_shader_name,\n\t\t\t\t\t\t// body_lines,\n\t\t\t\t\t\t// dependencies,\n\t\t\t\t\t\t// shader_name\n\t\t\t\t\t);\n\t\t\t\t// const named_output = globals_node.named_output_by_name(output_name)\n\t\t\t\t// const gl_type = named_output.gl_type()\n\t\t\t\t// definition = new Definition.Varying(globals_node, gl_type, var_name)\n\t\t\t\t// definitions_by_shader_name[shader_name].push(definition)\n\t\t\t\t// throw \"debug\"\n\n\t\t\t\t// body_line = `${var_name} = vec3(${output_name})`\n\t\t\t\t// for(let dependency of dependencies){\n\t\t\t\t// \tdefinitions_by_shader_name[dependency].push(definition)\n\t\t\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t\t\t// }\n\t\t\t\t// if(dependencies.length == 0){\n\t\t\t\t// \tbody_lines.push(body_line)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// this.set_vertex_definitions(vertex_definitions)\n\t\t// this.set_fragment_definitions(fragment_definitions)\n\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\tshaders_collection_controller.add_definitions(globals_node, definitions, shader_name);\n\t\t});\n\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines, shader_name);\n\t\t});\n\t\t// this.add_definitions(definitions)\n\t\t// this.set_vertex_body_lines(vertex_body_lines)\n\t\t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t\tshaders_collection_controller.add_body_lines(globals_node, body_lines);\n\t}\n}\n","export class MapUtils {\n\tstatic push_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.push(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic unshift_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_element: V) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tmap.get(key)!.unshift(new_element);\n\t\t} else {\n\t\t\tmap.set(key, [new_element]);\n\t\t}\n\t}\n\tstatic concat_on_array_at_entry<K, V>(map: Map<K, V[]>, key: K, new_elements: V[]) {\n\t\tlet has_entry = map.has(key);\n\t\tif (has_entry) {\n\t\t\tlet array: V[] = map.get(key)!;\n\t\t\tfor (let element of new_elements) {\n\t\t\t\tarray.push(element);\n\t\t\t}\n\t\t} else {\n\t\t\tmap.set(key, new_elements);\n\t\t}\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean';\n// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n// import {ParamEvent} from '../poly/ParamEvent';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\n// interface NumericParamVisitor extends TypedParamVisitor {\n// \tvisit_numeric_param: (param: TypedNumericParam<any>) => any;\n// }\n\nexport abstract class TypedNumericParam<T extends ParamType> extends TypedParam<T> {\n\t// private _raw_input: ParamInitValuesTypeMap[T] | undefined;\n\tget is_numeric() {\n\t\treturn true;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\t// accepts_visitor(visitor: NumericParamVisitor): any {\n\t// \treturn visitor.visit_numeric_param(this);\n\t// }\n\t// init_expression() {\n\t// \tif (this.is_value_expression(this._default_value)) {\n\t// \t\treturn this.set_expression(this._default_value)\n\t// \t}\n\t// }\n\n\tprotected process_raw_input() {\n\t\t// this.process_raw_input()\n\t\t// if (this.parent_param) {\n\t\t// \tthis.parent_param.set_raw_input_from_components();\n\t\t// }\n\n\t\tthis.states.error.clear();\n\n\t\tconst converted = this.convert(this._raw_input);\n\t\tif (converted != null) {\n\t\t\tif (this._expression_controller) {\n\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t}\n\t\t\tif (converted != this._value) {\n\t\t\t\tthis._update_value(converted);\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (lodash_isString(this._raw_input)) {\n\t\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.states.error.set(`param input is invalid (${this.full_path()})`);\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(\n\t\t\t\t\t`expression error: \"${this.expression_controller.expression}\" (${this.expression_controller.error_message})`\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted != null) {\n\t\t\t\t\tthis._update_value(converted);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`expression returns an invalid type (${expression_result}) (${this.expression_controller.expression})`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprivate _update_value(new_value: ParamValuesTypeMap[T]) {\n\t\tthis._value = new_value;\n\t\tif (this.parent_param) {\n\t\t\tthis.parent_param.set_value_from_components();\n\t\t}\n\t\tthis.options.execute_callback();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\tthis.remove_dirty_state();\n\t}\n}\n","export class TypeAssert {\n\tstatic unreachable(x: never): never {\n\t\tthrow new Error(\"Didn't expect to get here\");\n\t}\n}\n","import {BaseMatNodeType} from '../_Base';\n\nexport class BaseController {\n\tconstructor(protected node: BaseMatNodeType) {}\n\tadd_params() {}\n\n\tupdate() {}\n\n\tget material() {\n\t\treturn this.node.material;\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {TypedMatNode} from '../_Base';\nexport function SkinningParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tskinning = ParamConfig.BOOLEAN(0);\n\t};\n}\n\nclass SkinnedMaterial extends Material {\n\tskinning!: boolean;\n}\nclass SkinningParamsConfig extends SkinningParamConfig(NodeParamsConfig) {}\nclass SkinningMatNode extends TypedMatNode<SkinnedMaterial, SkinningParamsConfig> {\n\tcreate_material() {\n\t\treturn new SkinnedMaterial();\n\t}\n}\n\nexport class SkinningController extends BaseController {\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'skinning', 0);\n\t// }\n\n\tstatic update(node: SkinningMatNode) {\n\t\tnode.material.skinning = node.pv.skinning;\n\t}\n\n\t// update() {\n\t// \tthis.node.material.skinning = this.node.params.boolean('skinning');\n\t// }\n}\n","// import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from 'src/engine/nodes/cop/File';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseTextureMapController, BooleanParamOptions, OperatorPathOptions} from './_BaseTextureController';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureMapController));\n\t\tmap = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureMapController, 'use_map')\n\t\t);\n\t};\n}\nclass TextureMapMaterial extends Material {\n\tmap!: Texture | null;\n}\nclass TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\nclass TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n\ttexture_map_controller!: TextureMapController;\n\tcreate_material() {\n\t\treturn new TextureMapMaterial();\n\t}\n}\n\nexport class TextureMapController extends BaseTextureMapController {\n\tconstructor(protected node: TextureMapMatNode) {\n\t\tsuper(node);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_map, this.node.p.map);\n\t}\n\tasync update() {\n\t\tthis._update_texture(this.node.material, 'map', this.node.p.use_map, this.node.p.map);\n\t}\n\tstatic async update(node: TextureMapMatNode) {\n\t\tnode.texture_map_controller.update();\n\t}\n\n\t// static async update(node: TextureMapMatNode) {\n\t// \tconst material = node.material;\n\n\t// \tif (node.pv.use_map) {\n\t// \t\tconst found_node = node.p.map.found_node();\n\t// \t\tif (found_node) {\n\t// \t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t// \t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t// \t\t\t\t// if the texture has already been created, we don't have to wait for request_container\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\ttexture_node.request_container();\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tawait texture_node.request_container();\n\t// \t\t\t\t}\n\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\tif (!material.map || material.map.uuid != texture_node.texture.uuid) {\n\t// \t\t\t\t\t\tmaterial.map = texture_node.texture;\n\t// \t\t\t\t\t\tmaterial.needsUpdate = true;\n\t// \t\t\t\t\t}\n\t// \t\t\t\t\treturn;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tnode.states.error.set(`found map node is not a COP node`);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tnode.states.error.set(`could not find map node`);\n\t// \t\t}\n\t// \t}\n\t// \tif (material.map) {\n\t// \t\tmaterial.map = null;\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\t// }\n}\n","// import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from 'src/engine/nodes/cop/File';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n// import {NodeContext} from 'src/engine/poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nimport {BaseTextureMapController, BooleanParamOptions, OperatorPathOptions} from './_BaseTextureController';\nexport function TextureAlphaMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_alpha_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureAlphaMapController));\n\t\talpha_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.UV,\n\t\t\tOperatorPathOptions(TextureAlphaMapController, 'use_alpha_map')\n\t\t);\n\t};\n}\nclass TextureAlphaMaterial extends Material {\n\talphaMap!: Texture | null;\n}\nclass TextureAlphaMapParamsConfig extends TextureAlphaMapParamConfig(NodeParamsConfig) {}\nclass TextureAlphaMapMatNode extends TypedMatNode<TextureAlphaMaterial, TextureAlphaMapParamsConfig> {\n\ttexture_alpha_map_controller!: TextureAlphaMapController;\n\tcreate_material() {\n\t\treturn new TextureAlphaMaterial();\n\t}\n}\n\nexport class TextureAlphaMapController extends BaseTextureMapController {\n\tconstructor(protected node: TextureAlphaMapMatNode) {\n\t\tsuper(node);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tasync update() {\n\t\tthis._update_texture(this.node.material, 'alphaMap', this.node.p.use_alpha_map, this.node.p.alpha_map);\n\t}\n\tstatic async update(node: TextureAlphaMapMatNode) {\n\t\tnode.texture_alpha_map_controller.update();\n\t}\n\n\t// static async update(node: TextureAlphaMapMatNode) {\n\t// \tconst material = node.material;\n\n\t// \tif (node.pv.use_map) {\n\t// \t\tconst found_node = node.p.alpha_map.found_node();\n\t// \t\tif (found_node) {\n\t// \t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t// \t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t// \t\t\t\t// if the texture has already been created, we don't have to wait for request_container\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\ttexture_node.request_container();\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tawait texture_node.request_container();\n\t// \t\t\t\t}\n\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\tmaterial.alphaMap = texture_node.texture;\n\t// \t\t\t\t\treturn;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tnode.states.error.set(`found map node is not a COP node`);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tnode.states.error.set(`could not find map node`);\n\t// \t\t}\n\t// \t}\n\t// \tmaterial.alphaMap = null;\n\t// }\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\n\nimport {NodeJsonExporter} from './Node';\n// import {BaseNodeObjJsonExporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonExporter} from './node/Subnetwork';\n\nimport {ParamJsonExporter} from './Param';\nimport {ParamMultipleJsonExporter} from './param/Multiple';\nimport {ParamNumericJsonExporter} from './param/Numeric';\nimport {ParamOperatorPathJsonExporter} from './param/OperatorPath';\nimport {ParamStringJsonExporter} from './param/String';\nimport {ParamRampJsonExporter} from './param/Ramp';\n// import {TypedObjNode} from 'src/engine/nodes/obj/_Base';\nimport {TypedMultipleParam} from 'src/engine/params/_Multiple';\nimport {TypedNumericParam} from 'src/engine/params/_Numeric';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\nimport {StringParam} from 'src/engine/params/String';\nimport {RampParam} from 'src/engine/params/Ramp';\n\nexport class JsonExportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonExporter(node);\n\t\t// }\n\t\treturn new NodeJsonExporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\tif (param instanceof TypedMultipleParam) {\n\t\t\treturn new ParamMultipleJsonExporter(param);\n\t\t}\n\t\tif (param instanceof TypedNumericParam) {\n\t\t\treturn new ParamNumericJsonExporter(param);\n\t\t}\n\t\tif (param instanceof OperatorPathParam) {\n\t\t\treturn new ParamOperatorPathJsonExporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonExporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonExporter(param);\n\t\t}\n\t\treturn new ParamJsonExporter(param);\n\t}\n}\n","import {PolyScene} from 'src/engine/scene/PolyScene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {CoreString} from 'src/core/String';\nimport {NodeJsonExporterData, NodeJsonExporterUIData} from './Node';\nimport {JsonExportDispatcher} from './Dispatcher';\n\nexport interface SceneJsonExporterData {\n\tproperties?: {\n\t\tframe: number;\n\t\tframe_range: Number2;\n\t\tframe_range_locked: Boolean2;\n\t\tfps: number;\n\t\tmaster_camera_node_path: string | null;\n\t};\n\troot?: NodeJsonExporterData;\n\tui?: NodeJsonExporterUIData;\n}\n\nexport class SceneJsonExporter {\n\tprivate _data: SceneJsonExporterData = {};\n\tconstructor(private _scene: PolyScene) {}\n\n\tdata(): SceneJsonExporterData {\n\t\tthis._scene.nodes_controller.reset_node_context_signatures();\n\t\tconst root_exporter = JsonExportDispatcher.dispatch_node(this._scene.root);\n\t\tconst nodes_data = root_exporter.data();\n\t\tconst ui_data = root_exporter.ui_data();\n\n\t\tthis._data = {\n\t\t\t// __js_version: this._scene.js_version(),\n\t\t\tproperties: {\n\t\t\t\t// name: this._scene.name(), // this conflicts with saving the name from the admin page\n\t\t\t\tframe: this._scene.frame || 1,\n\t\t\t\tframe_range: this._scene.frame_range,\n\t\t\t\tframe_range_locked: this._scene.time_controller.frame_range_locked,\n\t\t\t\tfps: this._scene.time_controller.fps,\n\t\t\t\tmaster_camera_node_path: this._scene.cameras_controller.master_camera_node_path,\n\t\t\t},\n\t\t\troot: nodes_data,\n\t\t\tui: ui_data,\n\t\t};\n\n\t\treturn this._data;\n\t}\n\n\tstatic sanitize_string(word: string): string {\n\t\tword = word.replace(/'/g, \"'\"); // escapes ' (used to be with 2 /, but now only one to have Ian's Mediation saved and loaded correctly - but is actually 2 in Code Exporter)\n\t\tword = CoreString.escape_line_breaks(word);\n\t\treturn word;\n\t}\n}\n","import {TypedLightObjNode} from './_BaseLight';\nimport {Light} from 'three/src/lights/Light';\n// import {CoreTransform} from 'src/core/Transform';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {TransformController, TransformedParamConfig} from './utils/TransformController';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\n// import {Transformed} from './Concerns/Transformed';\nclass TransformedObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\n\nexport abstract class BaseLightTransformedObjNode<\n\tL extends Light,\n\tK extends TransformedObjParamConfig\n> extends TypedLightObjNode<L, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\treadonly transform_controller: TransformController = new TransformController(this);\n\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {Mesh} from 'three/src/objects/Mesh';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {TypedObjNode} from '../../_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {Light} from 'three/src/lights/Light';\nimport {FlagsControllerD} from 'src/engine/nodes/utils/FlagsController';\nexport function BaseLightHelperParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\nclass BaseLightHelperParamsConfig extends BaseLightHelperParamConfig(NodeParamsConfig) {}\nexport abstract class BaseLightHelperObjNode<L extends Light> extends TypedObjNode<Group, BaseLightHelperParamsConfig> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\t// public readonly helper: BaseLightHelper<L> | undefined;\n\tabstract get light(): L;\n}\n\nexport abstract class BaseLightHelper<L extends Light, N extends BaseLightHelperObjNode<L>> {\n\tprotected _object = new Mesh();\n\tprotected _material = new MeshBasicMaterial({wireframe: true, fog: false});\n\tconstructor(protected node: N, private _name: string) {}\n\n\tbuild() {\n\t\tthis._object.name = this._name;\n\t\tthis.build_helper();\n\t}\n\tprotected abstract build_helper(): void;\n\tget object() {\n\t\treturn this._object;\n\t}\n\n\tabstract update(): void;\n}\n","import {Light} from 'three/src/lights/Light';\nimport {BaseLightHelper, BaseLightHelperObjNode} from './helpers/_BaseLightHelper';\n\n// interface Helper<L extends Light> extends BaseLightHelper<L> {\n// \tdispose: () => void;\n// \tupdate: () => void;\n// }\nexport interface HelperConstructor<L extends Light> {\n\tnew (node: BaseLightHelperObjNode<L>, name: string): BaseLightHelper<L, BaseLightHelperObjNode<L>>;\n}\n\nexport class HelperController<L extends Light> {\n\tprivate _helper: BaseLightHelper<L, BaseLightHelperObjNode<L>> | undefined;\n\tconstructor(\n\t\tprivate node: BaseLightHelperObjNode<L>,\n\t\tprivate _helper_constructor: HelperConstructor<L>,\n\t\tprivate _name: string\n\t) {}\n\n\tinitialize_node() {\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.update_helper_attachment();\n\t\t});\n\t}\n\n\tprivate update_helper_attachment() {\n\t\tif (this.node.flags.display.active) {\n\t\t\tconst object = this.helper?.object; // use this.helper to create if needed\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.add(object);\n\t\t\t\tthis._helper?.update();\n\t\t\t}\n\t\t} else {\n\t\t\tconst object = this._helper?.object; // use this._helper to NOT create if not already existing\n\t\t\tif (object) {\n\t\t\t\tthis.node.object.remove(object);\n\t\t\t}\n\t\t}\n\t}\n\tget helper() {\n\t\tif (this.node.flags.display.active) {\n\t\t\treturn (this._helper = this._helper || this._create_helper());\n\t\t}\n\t}\n\tget visible() {\n\t\treturn this.node.flags.display.active && this.node.pv.show_helper;\n\t}\n\n\tprivate _create_helper(): BaseLightHelper<L, BaseLightHelperObjNode<L>> {\n\t\tconst helper = new this._helper_constructor(this.node, this._name);\n\t\thelper.build();\n\t\tthis.node.light.add(helper.object);\n\t\treturn helper;\n\t}\n\n\tupdate() {\n\t\tif (this.visible) {\n\t\t\tif (!this._helper) {\n\t\t\t\tthis._helper = this._create_helper();\n\t\t\t}\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = true;\n\t\t\t\tthis._helper.update();\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._helper) {\n\t\t\t\tthis._helper.object.visible = false;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass BaseManagerObjParamsConfig extends NodeParamsConfig {}\nexport class BaseManagerObjNode extends TypedObjNode<Group, BaseManagerObjParamsConfig> {\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\t// _init_manager(options = {}) {\n\t// \t// this._init_hierarchy_children_owner(options['children'] || {});\n\t// \t// this.flags.add_display({\n\t// \t// \thas_display_flag: false,\n\t// \t// \tmultiple_display_flags_allowed: true,\n\t// \t// });\n\t// \t// this.set_inputs_count_to_zero();\n\t// \t// this._init_outputs({has_outputs: false});\n\t// }\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\tcook() {\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {BaseObjNodeType} from 'src/engine/nodes/obj/_Base';\n// import {ParamType} from 'src/engine/poly/ParamType';\n\nconst PARAM_NAME = 'layer';\n\nimport {ParamConfig} from '../../utils/params/ParamsConfig';\nexport function LayerParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tlayer = ParamConfig.INTEGER(0, {\n\t\t\trange: [0, 31],\n\t\t\trange_locked: [true, true],\n\t\t});\n\t};\n}\n\nexport class LayersController {\n\tconstructor(private node: BaseObjNodeType) {}\n\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.INTEGER, PARAM_NAME, 0, {\n\t// \t\trange: [0, 31],\n\t// \t\trange_locked: [true, true],\n\t// \t});\n\t// }\n\n\tupdate() {\n\t\tconst object = this.node.object;\n\t\t// const affected_objects = [object];\n\t\t// if (object.cloned_cameras != null) {\n\t\t// \tlodash_each(object.cloned_cameras, cloned_camera=> {\n\t\t// \t\taffected_objects.push(cloned_camera);\n\t\t// \t});\n\t\t// }\n\n\t\t// affected_objects.forEach((affected_object)=> {\n\t\tobject.layers.set(0);\n\t\tobject.layers.enable(this.node.params.integer(PARAM_NAME));\n\t\t// });\n\t}\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\n// import {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\nimport {ACESFilmicToneMapping, sRGBEncoding} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport lodash_range from 'lodash/range';\n// import {BaseParam} from 'src/engine/params/_Base';\nimport {BooleanParam} from 'src/engine/params/Boolean';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\nimport {BasePostProcessNodeType} from 'src/engine/nodes/post/_Base';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\nimport {EffectComposer} from 'modules/three/examples/jsm/postprocessing/EffectComposer';\nimport {RenderPass} from 'modules/three/examples/jsm/postprocessing/RenderPass';\nimport {Pass} from 'modules/three/examples/jsm/postprocessing/Pass';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {POLY} from 'src/engine/Poly';\n\ninterface DisposablePass extends Pass {\n\tdispose: () => void;\n}\n\nfunction boolean_param_options(index: number) {\n\treturn {\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t},\n\t};\n}\nfunction operator_path_param_options(index: number) {\n\treturn {\n\t\tnode_selection: {context: NodeContext.POST},\n\t\tvisible_if: {\n\t\t\tdo_post_process: 1,\n\t\t\t[`use_post_process_node${index}`]: 1,\n\t\t},\n\t};\n}\n\nimport {ParamConfig} from '../../../utils/params/ParamsConfig';\nexport function CameraPostProcessParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tpost_process = ParamConfig.FOLDER();\n\n\t\tdo_post_process = ParamConfig.BOOLEAN(0);\n\t\tuse_post_process_node0 = ParamConfig.BOOLEAN(0, boolean_param_options(0));\n\t\tpost_process_node0 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(0));\n\t\tuse_post_process_node1 = ParamConfig.BOOLEAN(0, boolean_param_options(1));\n\t\tpost_process_node1 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(1));\n\t\tuse_post_process_node2 = ParamConfig.BOOLEAN(0, boolean_param_options(2));\n\t\tpost_process_node2 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(2));\n\t\tuse_post_process_node3 = ParamConfig.BOOLEAN(0, boolean_param_options(3));\n\t\tpost_process_node3 = ParamConfig.OPERATOR_PATH('', operator_path_param_options(3));\n\t};\n}\n\nexport class PostProcessController {\n\t// private _param_do_post_process: boolean;\n\t// private _param_do_sao: boolean;\n\tprivate _renderers_by_canvas_id: Dictionary<WebGLRenderer> = {};\n\tprivate _composers_by_canvas_id: Dictionary<EffectComposer> = {};\n\tprivate _resolution_by_canvas_id: Dictionary<Vector2> = {};\n\tprivate _composers_set_in_progress_by_canvas_id: Dictionary<boolean> = {};\n\tprivate _fetch_post_process_nodes_in_progress: boolean = false;\n\t// private _render_passes: any[] = []\n\tprivate _post_process_nodes: BasePostProcessNodeType[] = [];\n\n\tprivate _post_process_use_node_path_params: BooleanParam[] = [];\n\tprivate _post_process_node_path_params: OperatorPathParam[] = [];\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\t// private _prev_t = 0;\n\trender(canvas: HTMLCanvasElement, size: Vector2, aspect: number) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tif (this.node.params.boolean('do_post_process')) {\n\t\t\t\tconst composer = this.composer(canvas);\n\t\t\t\tif (composer) {\n\t\t\t\t\tcomposer.setSize(size.x, size.y);\n\t\t\t\t\tcomposer.render();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.setup_for_aspect_ratio(aspect);\n\t\t\t\t// const cur_t = performance.now();\n\t\t\t\t// const delta = cur_t - this._prev_t;\n\t\t\t\t// this._prev_t = cur_t;\n\t\t\t\t// console.log(cur_t, delta);\n\t\t\t\trenderer.render(this.node.scene.display_scene, this.node.object);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate renderer(canvas: HTMLCanvasElement) {\n\t\treturn this._renderers_by_canvas_id[canvas.id];\n\t}\n\n\tcreate_renderer(canvas: HTMLCanvasElement, size: Vector2): WebGLRenderer {\n\t\tconst gl = POLY.renderers_controller.rendering_context(canvas);\n\n\t\tconst renderer = new WebGLRenderer({\n\t\t\tcanvas: canvas,\n\t\t\tantialias: true,\n\t\t\talpha: true,\n\t\t\tcontext: gl,\n\t\t});\n\n\t\trenderer.shadowMap.enabled = true;\n\t\trenderer.physicallyCorrectLights = true; // https://discourse.threejs.org/t/three-js-white-is-too-bright/11873/3\n\n\t\t// TODO: find a way to have those accessible via params\n\t\trenderer.toneMapping = ACESFilmicToneMapping;\n\t\trenderer.toneMappingExposure = 1;\n\t\trenderer.outputEncoding = sRGBEncoding;\n\n\t\t// https://github.com/mrdoob/js/issues/15493\n\t\t// This below is an attempt to fix env map not being loaded in firefox, but that doesn't work.\n\t\t// Since the threejs example (https://threejs.org/examples/?q=exr#webgl_materials_envmaps_exr) also only works in chrome, not in firefox, I assume this is a firefox+linux bug\n\t\t// console.log(renderer.extensions)\n\t\t// renderer.extensions.get( 'EXT_color_buffer_float' );\n\n\t\t// attempt to have particle systems work in firefox on mobile\n\t\t// (current solution is to have the node SOP/particlesSystemGPU force webgl2 to be used)\n\t\t// renderer.extensions.get( 'WEBGL_color_buffer_float' );\n\t\t// renderer.extensions.get( 'WEBGL_draw_buffers' );\n\n\t\tPOLY.renderers_controller.register_renderer(renderer);\n\t\tthis._renderers_by_canvas_id[canvas.id] = renderer;\n\t\tthis.set_renderer_size(canvas, size);\n\t\trenderer.setPixelRatio(window.devicePixelRatio);\n\n\t\treturn renderer;\n\t}\n\tdelete_renderer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\tPOLY.renderers_controller.deregister_renderer(renderer);\n\t\t}\n\t}\n\tset_renderer_size(canvas: HTMLCanvasElement, size: Vector2) {\n\t\tthis._resolution_by_canvas_id[canvas.id] = this._resolution_by_canvas_id[canvas.id] || new Vector2();\n\t\tthis._resolution_by_canvas_id[canvas.id].copy(size);\n\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\trenderer.setSize(size.x, size.y);\n\t\t}\n\t\tconst composer = this.composer(canvas);\n\t\tif (composer) {\n\t\t\tcomposer.setSize(size.x, size.y);\n\t\t}\n\t}\n\n\tprivate composer(canvas: HTMLCanvasElement): EffectComposer {\n\t\treturn (this._composers_by_canvas_id[canvas.id] =\n\t\t\tthis._composers_by_canvas_id[canvas.id] || this._create_composer(canvas));\n\t}\n\n\tprivate _create_composer(canvas: HTMLCanvasElement) {\n\t\tconst renderer = this.renderer(canvas);\n\t\tif (renderer) {\n\t\t\t// const parameters = {\n\t\t\t// \tminFilter: LinearFilter,\n\t\t\t// \tmagFilter: LinearFilter,\n\t\t\t// \tformat: RGBAFormat,\n\t\t\t// \tstencilBuffer: true\n\t\t\t// }\n\t\t\t// const renderTarget = new WebGLRenderTarget( window.innerWidth, window.innerHeight, parameters );\n\t\t\tconst composer = new EffectComposer(renderer); //, renderTarget );\n\t\t\t// to achieve better antialiasing\n\t\t\t// while using post:\n\t\t\t// composer.setPixelRatio( window.devicePixelRatio*2 )\n\t\t\tcomposer.setPixelRatio(window.devicePixelRatio * 2);\n\t\t\tthis.set_composer_passes(canvas.id, composer, renderer);\n\n\t\t\treturn composer;\n\t\t} /*else {\n\t\t\tconsole.warn(this._renderers_by_canvas_id)\n\t\t\tthrow \"failed to create composer, no renderer ready\"\n\t\t}*/\n\t}\n\n\tasync update_composer_passes() {\n\t\tif (this.node.params.boolean('do_post_process')) {\n\t\t\tthis._post_process_nodes = [];\n\t\t\tif (this._fetch_post_process_nodes_in_progress) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = true;\n\n\t\t\tif (this.composer_passes_nodes_changed()) {\n\t\t\t\tthis._post_process_nodes = [];\n\n\t\t\t\tfor (let i of lodash_range(4)) {\n\t\t\t\t\tconst toggle_param = this._post_process_use_node_path_params[i];\n\t\t\t\t\t// const use_node = await toggle_param.eval_p()\n\t\t\t\t\tconst use_node = toggle_param.value;\n\t\t\t\t\tif (use_node) {\n\t\t\t\t\t\tconst param = this._post_process_node_path_params[i];\n\t\t\t\t\t\tconst post_process_node = param.found_node() as BasePostProcessNodeType;\n\t\t\t\t\t\tif (post_process_node) {\n\t\t\t\t\t\t\tawait post_process_node.request_container();\n\t\t\t\t\t\t\t// const render_pass = container.render_pass()\n\t\t\t\t\t\t\t// this._render_passes.push(render_pass)\n\t\t\t\t\t\t\tthis._post_process_nodes.push(post_process_node);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tthis.set_composers_passes();\n\t\t\t\t// this._previous_post_process_nodes_paths = this.composer_passes_nodes_paths()\n\t\t\t}\n\t\t\tthis._fetch_post_process_nodes_in_progress = false;\n\t\t} else {\n\t\t\tthis._post_process_nodes = [];\n\t\t}\n\t}\n\n\tprivate set_composers_passes() {\n\t\tconst ids = Object.keys(this._composers_by_canvas_id);\n\n\t\tfor (let id of ids) {\n\t\t\tconst composer = this._composers_by_canvas_id[id];\n\t\t\tconst renderer = this._renderers_by_canvas_id[id];\n\t\t\tif (composer) {\n\t\t\t\tthis.set_composer_passes(id, composer, renderer);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_composer_passes(id: string, composer: EffectComposer, renderer: WebGLRenderer) {\n\t\tconst set_in_progress = this._composers_set_in_progress_by_canvas_id[id];\n\t\tif (set_in_progress) {\n\t\t\treturn;\n\t\t}\n\t\tthis._composers_set_in_progress_by_canvas_id[id] = true;\n\n\t\tthis.clear_render_passes(composer);\n\n\t\tconst render_scene_pass = new RenderPass(this.node.scene.display_scene, this.node.object);\n\t\trender_scene_pass.clearAlpha = 0;\n\t\tcomposer.addPass(render_scene_pass);\n\n\t\tfor (let post_process_node of this._post_process_nodes) {\n\t\t\tpost_process_node.apply_to_composer(\n\t\t\t\tcomposer,\n\t\t\t\tthis.node.object,\n\t\t\t\tthis._resolution_by_canvas_id[id],\n\t\t\t\tthis.node\n\t\t\t);\n\t\t}\n\t\tdelete this._composers_set_in_progress_by_canvas_id[id];\n\t}\n\n\tprivate clear_render_passes(composer: EffectComposer) {\n\t\tlet render_pass: Pass | undefined;\n\t\twhile ((render_pass = composer.passes.pop())) {\n\t\t\tif (render_pass) {\n\t\t\t\tconst disposable_pass: DisposablePass = render_pass as DisposablePass;\n\t\t\t\tif (typeof disposable_pass.dispose === 'function') {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tdisposable_pass.dispose();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// this._render_passes = []\n\t\tcomposer.passes = [];\n\t}\n\n\tprivate composer_passes_nodes_changed(): boolean {\n\t\treturn true;\n\t\t// I have to evaluate the nodes anyway, in case they changed\n\t\t// unless I can create a method that can store if one of those nodes are the ones that\n\t\t// made this current node dirty\n\t}\n\n\tadd_params() {\n\t\t// this.node.within_param_folder('post_process', () => {\n\t\tthis.node.add_param(ParamType.BOOLEAN, 'do_post_process', 0);\n\n\t\tlodash_range(4).forEach((i) => {\n\t\t\tconst toggle_param = this.node.add_param(ParamType.BOOLEAN, `use_post_process_node${i + 1}`, 0, {\n\t\t\t\tvisible_if: {do_post_process: 1},\n\t\t\t});\n\n\t\t\tif (toggle_param) {\n\t\t\t\tconst visible_options = {\n\t\t\t\t\tdo_post_process: 1,\n\t\t\t\t\t[toggle_param.name]: 1,\n\t\t\t\t};\n\t\t\t\tconst node_path_options = {\n\t\t\t\t\tnode_selection: {context: NodeContext.POST},\n\t\t\t\t\tvisible_if: visible_options,\n\t\t\t\t};\n\t\t\t\tconst param = this.node.add_param(\n\t\t\t\t\tParamType.OPERATOR_PATH,\n\t\t\t\t\t`post_process_node${i + 1}`,\n\t\t\t\t\t'',\n\t\t\t\t\tnode_path_options\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\tthis._post_process_use_node_path_params.push(toggle_param);\n\t\t\t\t\tthis._post_process_node_path_params.push(param);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\t// });\n\t}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\nimport {ComplexParamJsonExporterData} from '../export/Param';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nexport class ParamJsonImporter<T extends BaseParamType> {\n\tconstructor(protected _param: T) {}\n\n\tprocess_data(data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst raw_input = data['raw_input'];\n\t\t// const expression = data['expression'];\n\t\t// const components = data['components'];\n\t\t// if (expression !== undefined) {\n\t\t// \tthis._param.set(expression);\n\t\t// }\n\t\tif (raw_input !== undefined) {\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\n\t\t// const referenced_asset = data['referenced_asset']\n\t\t// if(referenced_asset){\n\t\t// \tthis._param.mark_as_referencing_asset(referenced_asset)\n\t\t// }\n\n\t\tthis.add_main(data);\n\t}\n\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {}\n}\n","// import lodash_each from 'lodash/each'\nimport lodash_isString from 'lodash/isString';\n// import lodash_isNumber from 'lodash/isNumber'\nimport {TypedParam} from './_Base';\n// import {TypedParamVisitor} from './_Base';\n// import {AsCodeString} from './concerns/visitors/String';\n// import {ExpressionController} from 'src/engine/expressions/ExpressionController'\nimport {ParsedTree} from 'src/engine/expressions/traversers/ParsedTree';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ExpressionController} from './utils/ExpressionController';\nimport {ParamEvent} from '../poly/ParamEvent';\n\nexport class StringParam extends TypedParam<ParamType.STRING> {\n\tstatic type() {\n\t\treturn ParamType.STRING;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.STRING]) {\n\t\treturn `${raw_input}`;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.STRING],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.STRING]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.STRING], val2: ParamValuesTypeMap[ParamType.STRING]) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._raw_input == this.default_value;\n\t}\n\n\tconvert(raw_val: any): string {\n\t\tif (lodash_isString(raw_val)) {\n\t\t\treturn raw_val;\n\t\t}\n\t\treturn `${raw_val}`;\n\t}\n\n\tget raw_input() {\n\t\treturn this._raw_input;\n\t}\n\tprotected process_raw_input() {\n\t\tthis.states.error.clear();\n\n\t\tif (this._value_elements(this._raw_input).length >= 3) {\n\t\t\tthis._expression_controller = this._expression_controller || new ExpressionController(this);\n\t\t\tif (this._raw_input != this._expression_controller.expression) {\n\t\t\t\tthis._expression_controller.set_expression(this._raw_input);\n\t\t\t\tthis.set_dirty();\n\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this._raw_input != this._value) {\n\t\t\t\tthis._value = this._raw_input;\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t\tthis.set_successors_dirty(this);\n\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\tif (this._expression_controller) {\n\t\t\t\t\tthis._expression_controller.set_expression(undefined, false);\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.EXPRESSION_UPDATED); // ensure expression is considered removed\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tprotected async process_computation(): Promise<void> {\n\t\tif (this.expression_controller?.active && !this.expression_controller.requires_entities) {\n\t\t\tconst expression_result = await this.expression_controller.compute_expression();\n\t\t\tif (this.expression_controller.is_errored) {\n\t\t\t\tthis.states.error.set(`expression error: ${this.expression_controller.error_message}`);\n\t\t\t} else {\n\t\t\t\tconst converted = this.convert(expression_result);\n\t\t\t\tif (converted) {\n\t\t\t\t\tthis._value = converted;\n\t\t\t\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`expression returns an invalid type (${expression_result})`);\n\t\t\t\t}\n\t\t\t\tthis.remove_dirty_state();\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _value_elements(v: string): string[] {\n\t\treturn ParsedTree.string_value_elements(v);\n\t}\n}\n","import lodash_isArray from 'lodash/isArray';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ninterface IUniforms {\n\t[uniform: string]: IUniform;\n}\nexport interface MaterialWithUniforms extends Material {\n\tuniforms: IUniforms;\n}\n\nenum CustomMaterialName {\n\tcustomDistanceMaterial = 'customDistanceMaterial',\n\tcustomDepthMaterial = 'customDepthMaterial',\n\tcustomDepthDOFMaterial = 'customDepthDOFMaterial',\n}\nexport interface ObjectWithCustomMaterials extends Mesh {\n\t// customDistanceMaterial?: Material;\n\t// customDepthMaterial?: Material;\n\tcustomDepthDOFMaterial?: Material;\n}\nexport interface ShaderMaterialWithCustomMaterials extends ShaderMaterial {\n\tcustom_materials: {\n\t\t[key in CustomMaterialName]?: ShaderMaterial;\n\t};\n}\nexport interface MaterialWithSkinning extends Material {\n\tskinning: boolean;\n\tmorphTargets: boolean;\n}\n\nexport class CoreMaterial {\n\tstatic node(scene: PolyScene, material: Material) {\n\t\treturn scene.node(material.name);\n\t}\n\n\tstatic clone(src_material: Material | Material[]) {\n\t\tif (lodash_isArray(src_material)) {\n\t\t\treturn src_material.map((material) => {\n\t\t\t\treturn this.clone_single(material);\n\t\t\t});\n\t\t} else {\n\t\t\treturn this.clone_single(src_material);\n\t\t}\n\t}\n\n\tstatic clone_single(src_material: Material) {\n\t\tconst material = src_material.clone();\n\t\t// linewidth doesn't seem cloned correctly for ShaderMaterial\n\t\t(material as LineBasicMaterial).linewidth = (src_material as LineBasicMaterial).linewidth;\n\n\t\treturn material;\n\t}\n\n\tstatic apply_custom_materials(object: Object3D, material: Material) {\n\t\tconst material_with_custom = material as ShaderMaterialWithCustomMaterials;\n\t\tif (material_with_custom.custom_materials) {\n\t\t\tfor (let name of Object.keys(material_with_custom.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\t// http://blog.edankwan.com/post/three-js-advanced-tips-shadow\n\t\t\t\tconst custom_material = material_with_custom.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\t(object as ObjectWithCustomMaterials)[mat_name] = custom_material;\n\t\t\t\t\tcustom_material.needsUpdate = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// object.material = material.custom_materials.customDepthDOFMaterial\n\t\t\t// object.material = material.custom_materials.customDepthMaterial\n\t\t\t// object.material = material.custom_materials.customDistanceMaterial\n\t\t}\n\t}\n\tstatic assign_custom_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name].value = uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tstatic init_custom_material_uniforms(mat: Material, uniform_name: string, uniform_value: any) {\n\t\tconst material = mat as ShaderMaterialWithCustomMaterials;\n\t\tif (material.custom_materials) {\n\t\t\tfor (let name of Object.keys(material.custom_materials)) {\n\t\t\t\tconst mat_name = name as CustomMaterialName;\n\t\t\t\tconst custom_material = material.custom_materials[mat_name];\n\t\t\t\tif (custom_material) {\n\t\t\t\t\tcustom_material.uniforms[uniform_name] = custom_material.uniforms[uniform_name] || uniform_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport lodash_isNaN from 'lodash/isNaN';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\ntype Callback = () => void;\n\nexport class NameController {\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _on_set_name_hooks: Callback[] | undefined;\n\tprivate _on_set_full_path_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'node_name_controller');\n\t\t// this._graph_node.set_scene(this.node.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\tstatic base_name(node: BaseNodeType) {\n\t\tlet base = node.type; //CoreString.class_name_to_type(this.self.type())\n\t\tconst last_char = base[base.length - 1];\n\t\tif (!lodash_isNaN(parseInt(last_char))) {\n\t\t\tbase += '_';\n\t\t}\n\t\treturn `${base}1`;\n\t}\n\n\trequest_name_to_parent(new_name: string) {\n\t\tconst parent = this.node.parent;\n\t\tif (parent && parent.children_allowed() && parent.children_controller) {\n\t\t\tparent.children_controller.set_child_name(this.node, new_name);\n\t\t} else {\n\t\t\tconsole.warn('request_name_to_parent failed, no parent found');\n\t\t}\n\t}\n\tset_name(new_name: string) {\n\t\tif (new_name != this.node.name) {\n\t\t\tthis.request_name_to_parent(new_name);\n\t\t}\n\t}\n\tupdate_name_from_parent(new_name: string) {\n\t\tthis.node._set_core_name(new_name);\n\t\tthis.post_set_name();\n\t\tthis.post_set_full_path();\n\t\tif (this.node.children_allowed()) {\n\t\t\tthis.node.children_controller?.children().forEach((child_node) => {\n\t\t\t\tchild_node.name_controller.post_set_full_path(); // TODO: typescript: replace post_set_full_path with execute_on_update_full_path_hooks or on_update_full_path\n\t\t\t});\n\t\t}\n\t\tthis._graph_node.set_successors_dirty();\n\t\tthis.node.emit(NodeEvent.NAME_UPDATED);\n\t}\n\n\tadd_post_set_name_hook(hook: Callback) {\n\t\tthis._on_set_name_hooks = this._on_set_name_hooks || [];\n\t\tthis._on_set_name_hooks.push(hook);\n\t}\n\tadd_post_set_full_path_hook(hook: Callback) {\n\t\tthis._on_set_full_path_hooks = this._on_set_full_path_hooks || [];\n\t\tthis._on_set_full_path_hooks.push(hook);\n\t}\n\n\tpost_set_name() {\n\t\tif (this._on_set_name_hooks) {\n\t\t\tfor (let hook of this._on_set_name_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\tpost_set_full_path() {\n\t\tif (this._on_set_full_path_hooks) {\n\t\t\tfor (let hook of this._on_set_full_path_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {CoreWalker} from 'src/core/Walker';\n// import {NodeSimple} from 'src/core/Graph/NodeSimple'\n\n// import {NamedGraphNodeClass} from './graph/NamedGraphNode'\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nconst SEPARATOR = CoreWalker.SEPARATOR;\nexport class DecomposedPath {\n\tnamed_nodes: NodeOrParam[] = [];\n\tprivate graph_node_ids: string[] = [];\n\tprivate node_element_by_graph_node_id: Dictionary<string> = {};\n\n\tconstructor() {}\n\tadd_node(name: string, node: NodeOrParam) {\n\t\tif (name == node.name) {\n\t\t\tthis.named_nodes.push(node);\n\t\t}\n\n\t\tthis.graph_node_ids.push(node.graph_node_id);\n\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = name;\n\t}\n\n\tupdate_from_name_change(node: NodeOrParam) {\n\t\tconst named_graph_node_ids = this.named_nodes.map((n) => n.graph_node_id);\n\n\t\tif (named_graph_node_ids.includes(node.graph_node_id)) {\n\t\t\tthis.node_element_by_graph_node_id[node.graph_node_id] = node.name;\n\t\t}\n\t}\n\n\tto_path(): string {\n\t\treturn this.graph_node_ids\n\t\t\t.map((graph_node_id) => {\n\t\t\t\treturn this.node_element_by_graph_node_id[graph_node_id];\n\t\t\t})\n\t\t\t.join(SEPARATOR);\n\t}\n}\n","const moduleKeywords = ['extended', 'included']\n\n// declare global {\n// \tinterface Window {\n// \t\tinclude_instance_methods: ((dest_class: any, src_class: any) => void);\n// \t}\n// }\nfunction include_instance_methods(dest_class: any, src_class: any) {\n\tObject.keys(src_class).forEach((key) => {\n\t\tif (!moduleKeywords.includes(key)) {\n\t\t\tdest_class.prototype[key] = src_class[key]\n\t\t}\n\t})\n\n\tif (src_class.included) {\n\t\tsrc_class.included.apply(dest_class)\n\t}\n}\n\nexport class CoreObject {\n\tconstructor() {}\n\n\tstatic include(obj: any) {\n\t\tinclude_instance_methods(obj, this)\n\t}\n\n\tstatic is_a(object: any, constructor: any) {\n\t\tlet current_proto = object\n\t\twhile (current_proto) {\n\t\t\tif (current_proto.constructor == constructor) {\n\t\t\t\treturn true\n\t\t\t} else {\n\t\t\t\tcurrent_proto = current_proto.__proto__\n\t\t\t}\n\t\t}\n\n\t\treturn false\n\t}\n\tis_a(constructor: any) {\n\t\treturn CoreObject.is_a(this, constructor)\n\t}\n\t// assign_unless (member, value){\n\t// \treturn this[member] || (this[member] = value);\n\t// }\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\n// import {ParsedTree} from './ParsedTree'\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from 'src/Engine/Expression/Method/_Base'\n// import {ReferenceSearchResult, MissingExpressionReference} from './MissingReference'\n// import {MissingReferencesController} from './MissingReferencesController'\nexport const VARIABLE_PREFIX = '$';\n\nexport abstract class BaseTraverser {\n\t// private _parsed_tree: ParsedTree\n\tpublic error_message: string | undefined;\n\n\tconstructor(public param: BaseParamType) {}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t\t// throw this.error_message\n\t}\n\n\ttraverse_node(node: jsep.Expression): string | undefined {\n\t\tconst method_name = `traverse_${node.type}`;\n\t\tconst method = (this as any)[method_name];\n\t\tif (method) {\n\t\t\treturn (this as any)[method_name](node);\n\t\t} else {\n\t\t\tthis.set_error(`expression unknown node type: ${node.type}`);\n\t\t}\n\t}\n\n\tprotected abstract traverse_CallExpression(node: jsep.CallExpression): string | undefined; //{\n\n\t// const method_arguments = node.arguments.map((arg)=>{\n\t// \treturn this.traverse_node(arg)\n\t// })\n\t// const method_name = node.callee.name\n\n\t// // literal construct (if...)\n\t// const literal_contruct = this[`traverse_literal_construct_${node.type}`] //LITERAL_CONSTRUCT[method_name]\n\t// if(literal_contruct){\n\t// \treturn literal_contruct.bind(this)(method_arguments)\n\t// }\n\n\t// // direct expressions (Math.floor, Math.sin...)\n\t// const arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`\n\t// const direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name]\n\t// if(direct_function_name){\n\t// \treturn `${direct_function_name}(${arguments_joined})`\n\t// }\n\n\t// // indirect methods (points_count, asset...)\n\t// const indirect_method = INDIRECT_EXPRESSION_METHODS[method_name]\n\t// if(indirect_method){\n\t// \tthis._create_method_and_dependencies(node, method_name, arguments_joined)\n\t// \treturn `await methods[${this.method_index}].process_arguments(${arguments_joined})`\n\t// }\n\n\t// this.set_error(`unknown method: ${method_name}`)\n\t//}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\treturn `${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)}`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_ConditionalExpression(node: jsep.ConditionalExpression): string {\n\t\treturn `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(\n\t\t\tnode.alternate\n\t\t)})`;\n\t}\n\n\t// currently only used for string expressions such as\n\t// pt_`@ptnum+1`\n\tprotected traverse_Compound(node: jsep.Compound): string {\n\t\tconst args = node.body;\n\t\tconsole.log(args);\n\t\tlet traversed_args = [];\n\t\tfor (let i = 0; i < args.length; i++) {\n\t\t\tconst arg_node = args[i];\n\t\t\tif (arg_node.type == 'Identifier') {\n\t\t\t\tif ((arg_node as jsep.Identifier).name[0] == VARIABLE_PREFIX) {\n\t\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t\t} else {\n\t\t\t\t\ttraversed_args.push(`'${(arg_node as jsep.Identifier).name}'`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttraversed_args.push('`${' + this.traverse_node(arg_node) + '}`');\n\t\t\t}\n\t\t}\n\t\treturn traversed_args.join(' + ');\n\t\t// this may work for things like  [1,-2,3][$F%2]\n\t\t// but can be confusing for more operators like [1,-2,3][$F%2][2]\n\n\t\t// console.log(node)\n\t\t// return `(${this.traverse_node(node.test)}) ? (${this.traverse_node(node.consequent)}) : (${this.traverse_node(node.alternate)})`\n\t\t// this.set_error(\"unrecognised expression Compound\")\n\t\t// return \"\"\n\t}\n\tprotected abstract traverse_UnaryExpression(node: jsep.UnaryExpression): string; //{\n\n\t// if (node.operator === ATTRIBUTE_PREFIX) {\n\t// \tconst attrib_name = this.traverse_node(node.argument);\n\t// \treturn `param.entity_attrib_value(${QUOTE}${attrib_name}${QUOTE})`\n\t// } else {\n\t// \treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t// }\n\t//}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected abstract traverse_Identifier(node: jsep.Identifier): string | undefined; //{\n\t// const identifier_first_char = node.name[0]\n\t// if(identifier_first_char == VARIABLE_PREFIX){\n\t// \tconst identifier_name_without_dollar_sign = node.name.substr(1)\n\n\t// \t// globals constants: Math.PI or Math.E\n\t// \tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign]\n\t// \tif(direct_constant_name){\n\t// \t\treturn direct_constant_name\n\t// \t}\n\n\t// \t// scene or node globals: $F, $CH, $OS\n\t// \tconst method_name = `Identifier_${identifier_name_without_dollar_sign}_body`\n\t// \tconst method = this[method_name]\n\t// \tif(method){\n\t// \t\treturn this[method_name]()\n\t// \t}else{\n\t// \t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t// \t}\n\n\t// } else {\n\t// \treturn node.name // @ptnum will call this method and return \"ptnum\"\n\t// }\n\t//}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\t// abstract Identifier_F_body(): string //{\n\t// this.dependencies.push(this.param.scene().context())\n\t// return `param.scene().frame()`\n\t//}\n\t// abstract Identifier_CH_body(): string //{\n\t// return `${QUOTE}${this.param.name()}${QUOTE}`\n\t//}\n\t// TODO:\n\t// '$CEX': '_eval_identifier_as_expression_centroid_x',\n\t// '$CEY': '_eval_identifier_as_expression_centroid_y',\n\t// '$CEZ': '_eval_identifier_as_expression_centroid_z',\n\t// '$CH': '_eval_identifier_as_param_name',\n\t// '$OS': '_eval_identifier_as_node_name',\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\t// protected _create_method_and_dependencies(node: jsep.CallExpression, method_name: string, arguments_joined: string) {\n\t// \tconst method_constructor = Method[method_name]\n\t// \tconst method = new method_constructor(this.param)\n\t// \tthis.method_index += 1\n\t// \tthis.methods[this.method_index] = method\n\n\t// \tconst dependency_arguments_function = new Function(`return [${arguments_joined}]`)\n\t// \tconst dependency_arguments = dependency_arguments_function()\n\n\t// \tconst reference_search_result = method.find_dependencies(dependency_arguments)\n\t// \treference_search_result.found_graph_nodes.forEach((graph_node)=>{\n\t// \t\tthis.dependencies.push(graph_node)\n\t// \t})\n\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(node)\n\t// \t})\n\t// }\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedCameraControlsEventNode, CameraControls} from './_BaseCameraControls';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\nimport {OrbitControls} from 'modules/three/examples/jsm/controls/OrbitControls';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass CameraOrbitEventParamsConfig extends NodeParamsConfig {\n\tallow_pan = ParamConfig.BOOLEAN(1);\n\tallow_rotate = ParamConfig.BOOLEAN(1);\n\tallow_zoom = ParamConfig.BOOLEAN(1);\n\ttdamping = ParamConfig.BOOLEAN(1);\n\tdamping = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {tdamping: true},\n\t});\n\tscreen_space_panning = ParamConfig.BOOLEAN(1);\n\trotate_speed = ParamConfig.FLOAT(0.5);\n\tmin_distance = ParamConfig.FLOAT(1, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tmax_distance = ParamConfig.FLOAT(50, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tpolar_angle_range = ParamConfig.VECTOR2([0, '$PI']);\n}\nconst ParamsConfig = new CameraOrbitEventParamsConfig();\n\nexport class CameraOrbitControlsEventNode extends TypedCameraControlsEventNode<CameraOrbitEventParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'camera_orbit_controls';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['controls/OrbitControls'];\n\t// }\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// const c = this.constructor as typeof CameraOrbitControlsEventNode;\n\t\t// const {OrbitControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\tconst controls = new OrbitControls(camera, element);\n\t\treturn controls;\n\t}\n\n\tsetup_controls(controls: OrbitControls) {\n\t\tcontrols.enablePan = this.pv.allow_pan;\n\t\tcontrols.enableRotate = this.pv.allow_rotate;\n\t\tcontrols.enableZoom = this.pv.allow_zoom;\n\n\t\tcontrols.enableDamping = this.pv.tdamping;\n\t\tcontrols.dampingFactor = this.pv.damping;\n\n\t\tcontrols.rotateSpeed = this.pv.rotate_speed;\n\n\t\tcontrols.screenSpacePanning = this.pv.screen_space_panning;\n\n\t\tcontrols.minDistance = this.pv.min_distance;\n\t\tcontrols.maxDistance = this.pv.max_distance;\n\n\t\tcontrols.minPolarAngle = this.pv.polar_angle_range.x;\n\t\tcontrols.maxPolarAngle = this.pv.polar_angle_range.y;\n\n\t\t// to prevent moving the camera when using the arrows to change frame\n\t\tcontrols.enableKeys = false;\n\t}\n\n\tset_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void {\n\t\tconst target = camera_node.params.vector3('target');\n\t\tcontrols.target.copy(target);\n\t}\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedGlNode, BaseGlNodeType} from './_Base';\n// import {BaseNodeGlMathFunctionArg1} from './_BaseMathFunctionArg1';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\nimport {BaseNamedConnectionPointType} from '../utils/connections/NamedConnectionPoint';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nconst INPUT_NAME = 'export';\nconst OUTPUT_NAME = 'val';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nconst ConnectionPointTypesAvailableForAttribute = [\n\tConnectionPointType.FLOAT,\n\tConnectionPointType.VEC2,\n\tConnectionPointType.VEC3,\n\tConnectionPointType.VEC4,\n];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass AttributeGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypesAvailableForAttribute.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n}\nconst ParamsConfig = new AttributeGlParamsConfig();\n\nexport class AttributeGlNode extends TypedGlNode<AttributeGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attribute';\n\t}\n\n\tprivate _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\tthis.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\tcreate_params() {\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.add_param(ParamType.BOOLEAN, 'export_when_connected', 0);\n\t\t}\n\t}\n\tinputless_params_names(): string[] {\n\t\treturn ['type'];\n\t}\n\n\tget input_name() {\n\t\treturn INPUT_NAME;\n\t}\n\tget output_name() {\n\t\treturn OUTPUT_NAME;\n\t}\n\n\t// private create_inputs_from_params() {\n\t// \tif (this.material_node.allow_attribute_exports) {\n\t// \t\t// this.set_named_inputs([new TypedConnectionFloat(AttributeGlNode.input_name())]);\n\t// \t\tthis.io.inputs.set_named_input_connection_points([\n\t// \t\t\tnew TypedNamedConnectionPoint(INPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t// \t\t]);\n\t// \t\t// this._init_graph_node_inputs();\n\t// \t}\n\t// }\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_attribute(\n\t\t\tthis,\n\t\t\tshaders_collection_controller\n\t\t);\n\t\t// }\n\t}\n\n\t// update_output_type(constructor) {\n\t// \tconst named_output = new constructor(Attribute.output_name());\n\t// \tthis.set_named_outputs([named_output]);\n\t// }\n\t// update_input_type(constructor) {\n\t// \tconst named_input = new constructor(Attribute.input_name());\n\t// \tthis.set_named_inputs([named_input]);\n\t// \tthis._init_graph_node_inputs();\n\t// }\n\n\tget attribute_name(): string {\n\t\treturn lodash_trim(this.pv.name);\n\t}\n\tgl_type(): ConnectionPointType {\n\t\treturn this.io.outputs.named_output_connection_points[0].type;\n\t}\n\t//\n\t//\n\t// Utility methods for SOP/ParticlesSystemGPU and Assembler/Particles\n\t//\n\t//\n\tconnected_input_node(): BaseGlNodeType | null {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.inputs.named_input(INPUT_NAME);\n\t\t// }\n\t}\n\tconnected_input_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\treturn this.io.inputs.named_input_connection_point(INPUT_NAME);\n\t}\n\t// connected_input(): NamedConnection {\n\t// \tconst connection_point = this.connected_input_connection_point();\n\t// \tif (connection_point) {\n\t// \t\treturn this.io.inputs.named_inputs().filter((ni) => ni.name() == Attribute.input_name())[0];\n\t// \t}\n\t// }\n\toutput_connection_point(): BaseNamedConnectionPointType | undefined {\n\t\t// if (this.io.inputs.has_named_inputs) {\n\t\treturn this.io.outputs.named_output_connection_points_by_name(this.input_name);\n\t\t// }\n\t}\n\t// connected_output(): NamedConnection {\n\t// \tconst output = this.named_output(0);\n\t// \tif (output) {\n\t// \t\treturn output; //this.named_inputs().filter(ni=>ni.name() == Attribute.input_name())[0]\n\t// \t}\n\t// }\n\tget is_importing(): boolean {\n\t\treturn this.io.outputs.used_output_names().length > 0; // TODO: typescript - ensure that we can check that the connected outputs are part of the nodes retrived by the node traverser\n\t}\n\tget is_exporting(): boolean {\n\t\tif (this.pv.export_when_connected) {\n\t\t\tconst input_node = this.io.inputs.named_input(INPUT_NAME);\n\t\t\treturn input_node != null;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// SIGNATURE\n\t//\n\t//\n\tprivate _update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t\t\tthis.update_input_and_output_types();\n\t\t\tthis.remove_dirty_state();\n\t\t\tthis.make_output_nodes_dirty();\n\t\t}\n\t\tthis.material_node?.assembler_controller.set_compilation_required_and_dirty(this);\n\t}\n\tprivate update_input_and_output_types() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this.output_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t\t]);\n\t\tif (this.material_node?.assembler_controller.allow_attribute_exports()) {\n\t\t\tthis.io.inputs.set_named_input_connection_points([\n\t\t\t\tnew TypedNamedConnectionPoint(this.input_name, ConnectionPointTypesAvailableForAttribute[this.pv.type]),\n\t\t\t]);\n\t\t}\n\t}\n}\n","import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from 'src/engine/nodes/cop/File';\nimport {BaseMatNodeType} from '../_Base';\n\nimport {ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {BaseCopNodeType} from '../../cop/_Base';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\nimport {BooleanParam} from 'src/engine/params/Boolean';\nimport {BaseNodeType} from '../../_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nexport function TextureMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_map = ParamConfig.BOOLEAN(0);\n\t\tmap = ParamConfig.OPERATOR_PATH(FileCopNode.DEFAULT_NODE_PATH.UV, {visible_if: {use_map: 1}});\n\t};\n}\n// class TextureMapMaterial<T extends string> extends Material {\n// \t[T]!: Texture | null;\n// }\n// class TextureMapParamsConfig extends TextureMapParamConfig(NodeParamsConfig) {}\n// class TextureMapMatNode extends TypedMatNode<TextureMapMaterial, TextureMapParamsConfig> {\n// \tcreate_material() {\n// \t\treturn new TextureMapMaterial();\n// \t}\n// }\n\ntype FilterFlags<Base, Condition> = {\n\t[Key in keyof Base]: Base[Key] extends Condition ? Key : never;\n};\ntype AllowedNames<Base, Condition> = FilterFlags<Base, Condition>[keyof Base];\ntype SubType<Base, Condition> = Pick<Base, AllowedNames<Base, Condition>>;\n\n// type test = FilterFlags<MeshLambertMaterial, Texture|null>\n// type test2 = AllowedNames<MeshLambertMaterial, Texture|null>\n// type test3 = SubType<MeshLambertMaterial, Texture|null>\n\nexport function BooleanParamOptions(controller_class: typeof BaseTextureMapController) {\n\treturn {\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller_class.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\nexport function OperatorPathOptions(controller: typeof BaseTextureMapController, use_map_name: string) {\n\treturn {\n\t\tvisible_if: {[use_map_name]: 1},\n\t\tnode_selection: {context: NodeContext.COP},\n\t\tcook: false,\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tcontroller.update(node as BaseMatNodeType);\n\t\t},\n\t};\n}\n\nexport class BaseTextureMapController extends BaseController {\n\t// add_params() {\n\t// \tthis.node.add_param(ParamType.BOOLEAN, 'skinning', 0);\n\t// }\n\tprotected add_hooks(use_map_param: BooleanParam, path_param: OperatorPathParam) {\n\t\tuse_map_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t\tpath_param.add_post_dirty_hook('TextureController', () => {\n\t\t\tthis.update();\n\t\t});\n\t}\n\tstatic update(node: BaseNodeType) {}\n\n\tasync _update_texture<M extends Material>(\n\t\tmaterial: M,\n\t\tmat_attrib_name: keyof SubType<M, Texture | null>,\n\t\tuse_map_param: BooleanParam,\n\t\tpath_param: OperatorPathParam\n\t) {\n\t\t// if(!(mat_attrib_name in material)){\n\t\t// \treturn\n\t\t// }\n\t\tif (use_map_param.is_dirty) {\n\t\t\tuse_map_param.compute();\n\t\t}\n\t\tconst use_map: boolean = use_map_param.value;\n\n\t\tif (use_map) {\n\t\t\tif (path_param.is_dirty) {\n\t\t\t\tawait path_param.compute();\n\t\t\t}\n\n\t\t\tconst found_node = path_param.found_node();\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t\t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t\t\t\t\t// if the texture has already been created, we don't have to wait for request_container\n\t\t\t\t\t// if (texture_node.texture) {\n\t\t\t\t\t// \tconsole.log('no wait');\n\t\t\t\t\t// \ttexture_node.request_container();\n\t\t\t\t\t// } else {\n\t\t\t\t\t// \tconsole.log('wait');\n\t\t\t\t\tconst container = await texture_node.request_container();\n\t\t\t\t\tconst texture = container.texture();\n\t\t\t\t\t// }\n\n\t\t\t\t\tif (texture) {\n\t\t\t\t\t\tconst has_no_texture = material[mat_attrib_name] == null;\n\t\t\t\t\t\tlet texture_is_different = false;\n\t\t\t\t\t\tif (material[mat_attrib_name]) {\n\t\t\t\t\t\t\tconst current_texture: Texture = (<unknown>material[mat_attrib_name]) as Texture;\n\t\t\t\t\t\t\tif (current_texture.uuid != texture.uuid) {\n\t\t\t\t\t\t\t\ttexture_is_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (has_no_texture || texture_is_different) {\n\t\t\t\t\t\t\tmaterial[mat_attrib_name] = texture as any;\n\t\t\t\t\t\t\tmaterial.needsUpdate = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\treturn;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.node.states.error.set(`found node has no texture`);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set(`found map node is not a COP node`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set(`could not find map node ${path_param.name} with path ${path_param.value}`);\n\t\t\t}\n\t\t}\n\t\tif (material[mat_attrib_name]) {\n\t\t\tmaterial[mat_attrib_name] = null as any;\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\t}\n}\n","export enum LineType {\n\tFUNCTION_DECLARATION = 'function_declaration',\n\tDEFINE = 'define',\n\tBODY = 'body',\n}\n","import {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {Light} from 'three/src/lights/Light';\nimport {Color} from 'three/src/math/Color';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {Group} from 'three/src/objects/Group';\n\nexport abstract class TypedLightObjNode<L extends Light, K extends NodeParamsConfig> extends TypedObjNode<Group, K> {\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.LIGHT;\n\tprotected _color_with_intensity = new Color(0x00000);\n\tprotected _light!: L;\n\tget light() {\n\t\treturn this._light;\n\t}\n\tprotected abstract create_light(): L;\n\tprotected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\n\t\tthis._light = this.create_light();\n\t\tthis.object.add(this._light);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis.update_light_attachment();\n\t\t});\n\t\tthis.dirty_controller.add_post_dirty_hook(\n\t\t\t'_cook_main_without_inputs_when_dirty',\n\t\t\tthis._cook_main_without_inputs_when_dirty_bound\n\t\t);\n\t}\n\tprivate _cook_main_without_inputs_when_dirty_bound = this._cook_main_without_inputs_when_dirty.bind(this);\n\tprivate async _cook_main_without_inputs_when_dirty() {\n\t\t// if (this.used_in_scene) {\n\t\tawait this.cook_controller.cook_main_without_inputs();\n\t\t// }\n\t}\n\tprivate update_light_attachment() {\n\t\tif (this.flags.display.active) {\n\t\t\tthis.object.add(this.light);\n\t\t\tthis._cook_main_without_inputs_when_dirty();\n\t\t} else {\n\t\t\tthis.object.remove(this.light);\n\t\t}\n\t}\n\n\t// create_params() {\n\t// \t// this.create_light_params();\n\t// \t// this.create_shadow_params_main();\n\t// }\n\n\tcreate_shadow_params_main() {\n\t\tif (this._light.shadow != null) {\n\t\t\treturn this.create_shadow_params();\n\t\t}\n\t}\n\n\tprotected create_light_params(): void {}\n\tprotected update_light_params(): void {}\n\n\tprotected create_shadow_params() {\n\t\treturn;\n\t\t// this.add_param('toggle', 'cast_shadows', 1);\n\t\t// shadow_options = {visible_if: {cast_shadows: 1}}\n\t\t// this.add_param( 'vector2', 'shadow_res', [1024, 1024], shadow_options );\n\t\t// this.add_param( 'float', 'shadow_near', 0.1, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_far', 100, shadow_options );\n\t\t// // this.add_param( 'float', 'shadow_far', 500 ) # same as param distance\n\t\t// this.add_param( 'float', 'shadow_bias', -0.0001, shadow_options );\n\t\t// this.add_param( 'float', 'shadow_blur', 1, shadow_options );\n\t}\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tcook() {\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\tupdate_shadow_params() {\n\t\t// let object;\n\t\t// return;\n\t\t// if (((object = this.object()) != null) && (object.shadow != null)) {\n\t\t// \tobject.castShadow = this._param_cast_shadow;\n\t\t// \tobject.shadow.mapSize.width = this._param_shadow_res.x;\n\t\t// \tobject.shadow.mapSize.height = this._param_shadow_res.y;\n\t\t// \tobject.shadow.camera.near = this._param_shadow_near;\n\t\t// \tobject.shadow.camera.far = this._param_shadow_far;\n\t\t// \treturn object.shadow.bias = this._param_shadow_bias;\n\t\t// }\n\t}\n\n\tget color_with_intensity() {\n\t\tconst color = this.params.color('color');\n\t\tconst intensity = this.params.float('intensity');\n\t\tthis._color_with_intensity.copy(color).multiplyScalar(intensity);\n\t\treturn this._color_with_intensity;\n\t}\n\tget active(): boolean {\n\t\treturn this.flags.display.active;\n\t}\n}\n\nexport type BaseLightObjNodeType = TypedLightObjNode<Light, NodeParamsConfig>;\n// export class BaseLightObjNodeClass extends TypedLightObjNode<Light, NodeParamsConfig> {}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Color} from 'three/src/math/Color';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {Material} from 'three/src/materials/Material';\nimport {SkinnedMesh} from 'three/src/objects/SkinnedMesh';\nimport {Bone} from 'three/src/objects/Bone';\n\n// import {CoreConstant} from './Constant'\nimport {CoreGeometry} from './Geometry';\nimport {GroupString} from './Group';\nimport {CoreAttribute} from './Attribute';\nimport {CoreConstant} from './Constant';\nimport {CorePoint} from './Point';\nimport {CoreMaterial, ShaderMaterialWithCustomMaterials} from './Material';\nimport {CoreString} from 'src/core/String';\n\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreEntity} from './Entity';\nconst PTNUM = 'ptnum';\nconst NAME_ATTR = 'name';\nconst ATTRIBUTES = 'attributes';\n\ninterface Object3DWithAnimations extends Object3D {\n\tanimations: AnimationClip[];\n}\ninterface MaterialWithColor extends Material {\n\tcolor: Color;\n}\ninterface SkinnedMeshWithisSkinnedMesh extends SkinnedMesh {\n\treadonly isSkinnedMesh: boolean;\n}\n\nexport class CoreObject extends CoreEntity {\n\tconstructor(private _object: Object3D, index: number) {\n\t\tsuper(index);\n\t\tif (this._object.userData[ATTRIBUTES] == null) {\n\t\t\tthis._object.userData[ATTRIBUTES] = {};\n\t\t}\n\t}\n\n\t// set_index(i: number) {\n\t// \tthis._index = i;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tgeometry() {\n\t\treturn (this._object as Mesh).geometry as BufferGeometry;\n\t}\n\tcore_geometry(): CoreGeometry {\n\t\tconst geo = this.geometry();\n\t\treturn new CoreGeometry(geo);\n\t\t// const geo = this.geometry()\n\t\t// if (geo) {\n\t\t// \treturn new CoreGeometry(geo)\n\t\t// } else {\n\t\t// \treturn null\n\t\t// }\n\t}\n\tpoints() {\n\t\treturn this.core_geometry().points();\n\t}\n\tpoints_from_group(group: GroupString): CorePoint[] {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\tif (indices) {\n\t\t\t\tconst points = this.points();\n\t\t\t\treturn indices.map((i) => points[i]);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tcompute_vertex_normals() {\n\t\tthis.core_geometry().compute_vertex_normals();\n\t}\n\n\tadd_attribute(name: string, value: AttribValue) {\n\t\tlet data;\n\t\tif (!lodash_isNumber(value) && !lodash_isArray(value) && !lodash_isString(value)) {\n\t\t\tdata = (value as Vector3).toArray();\n\t\t} else {\n\t\t\tdata = value;\n\t\t}\n\t\tthis._object.userData[ATTRIBUTES][name] = data;\n\t}\n\tadd_numeric_attrib(name: string, value: NumericAttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tset_attrib_value(name: string, value: AttribValue) {\n\t\tthis.add_attribute(name, value);\n\t}\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\t\tthis.core_geometry().add_numeric_attrib(name, size, default_value);\n\t}\n\n\tattribute_names(): string[] {\n\t\t// TODO: to remove\n\t\treturn Object.keys(this._object.userData[ATTRIBUTES]);\n\t}\n\tattrib_names(): string[] {\n\t\treturn this.attribute_names();\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\treturn this.attribute_names().includes(name);\n\t}\n\n\trename_attribute(old_name: string, new_name: string) {\n\t\tthis.add_attribute(new_name, this.attrib_value(old_name));\n\t\tthis.delete_attribute(old_name);\n\t}\n\n\tdelete_attribute(name: string) {\n\t\tdelete this._object.userData[ATTRIBUTES][name];\n\t}\n\n\tattrib_value(name: string): AttribValue {\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet val = this._object.userData[ATTRIBUTES][name];\n\t\t\tif (val == null) {\n\t\t\t\tif (name == NAME_ATTR) {\n\t\t\t\t\tval = this._object.name;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn val;\n\t\t}\n\t}\n\tname(): string {\n\t\treturn this.attrib_value(NAME_ATTR) as string;\n\t}\n\thuman_type(): string {\n\t\treturn CoreConstant.CONSTRUCTOR_NAMES_BY_CONSTRUCTOR_NAME[this._object.constructor.name];\n\t}\n\n\tattrib_type(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (lodash_isString(val)) {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.STRING;\n\t\t} else {\n\t\t\treturn CoreConstant.ATTRIB_TYPE.NUMERIC;\n\t\t}\n\t}\n\n\tattrib_size(name: string) {\n\t\tconst val = this.attrib_value(name);\n\t\tif (val == null) {\n\t\t\treturn 0;\n\t\t}\n\n\t\tif (lodash_isString(val) || lodash_isNumber(val)) {\n\t\t\treturn 1;\n\t\t} else {\n\t\t\tswitch (val.constructor) {\n\t\t\t\tcase Vector2:\n\t\t\t\t\treturn 2;\n\t\t\t\tcase Vector3:\n\t\t\t\t\treturn 3;\n\t\t\t\tdefault:\n\t\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t}\n\n\tclone() {\n\t\treturn CoreObject.clone(this._object);\n\t}\n\n\tstatic clone(src_object: Object3D) {\n\t\tconst new_object = src_object.clone();\n\n\t\tvar sourceLookup = new Map<Object3D, Object3D>();\n\t\tvar cloneLookup = new Map<Object3D, Object3D>();\n\t\tCoreObject.parallelTraverse(src_object, new_object, function(sourceNode: Object3D, clonedNode: Object3D) {\n\t\t\tsourceLookup.set(clonedNode, sourceNode);\n\t\t\tcloneLookup.set(sourceNode, clonedNode);\n\t\t});\n\t\tnew_object.traverse(function(node) {\n\t\t\tconst src_node = sourceLookup.get(node) as SkinnedMesh;\n\t\t\tconst mesh_node = node as Mesh;\n\n\t\t\tif (mesh_node.geometry) {\n\t\t\t\tconst src_node_geometry = src_node.geometry as BufferGeometry;\n\t\t\t\tmesh_node.geometry = CoreGeometry.clone(src_node_geometry);\n\t\t\t\tconst mesh_node_geometry = mesh_node.geometry as BufferGeometry;\n\t\t\t\tif (mesh_node_geometry.userData) {\n\t\t\t\t\tmesh_node_geometry.userData = lodash_cloneDeep(src_node_geometry.userData);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mesh_node.material) {\n\t\t\t\tmesh_node.material = src_node.material;\n\t\t\t\tCoreMaterial.apply_custom_materials(node, mesh_node.material as ShaderMaterialWithCustomMaterials);\n\n\t\t\t\t// prevents crashes for linesegments with shader material such as the line dashed instance\n\t\t\t\t// TODO: test\n\t\t\t\tconst material_with_color = mesh_node.material as MaterialWithColor;\n\t\t\t\tif (material_with_color.color == null) {\n\t\t\t\t\tmaterial_with_color.color = new Color(1, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (src_object.userData) {\n\t\t\t\tnode.userData = lodash_cloneDeep(src_node.userData);\n\t\t\t}\n\n\t\t\tconst src_node_with_animations = (<unknown>src_node) as Object3DWithAnimations;\n\t\t\tif (src_node_with_animations.animations) {\n\t\t\t\t(node as Object3DWithAnimations).animations = src_node_with_animations.animations.map((animation) =>\n\t\t\t\t\tanimation.clone()\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst skinned_node = node as SkinnedMesh;\n\t\t\tif ((skinned_node as SkinnedMeshWithisSkinnedMesh).isSkinnedMesh) {\n\t\t\t\tvar clonedMesh = skinned_node;\n\t\t\t\tvar sourceMesh = src_node;\n\t\t\t\tvar sourceBones = sourceMesh.skeleton.bones;\n\n\t\t\t\tclonedMesh.skeleton = sourceMesh.skeleton.clone();\n\t\t\t\tclonedMesh.bindMatrix.copy(sourceMesh.bindMatrix);\n\n\t\t\t\tconst new_bones = sourceBones.map(function(bone) {\n\t\t\t\t\treturn cloneLookup.get(bone);\n\t\t\t\t}) as Bone[];\n\n\t\t\t\tclonedMesh.skeleton.bones = new_bones;\n\n\t\t\t\tclonedMesh.bind(clonedMesh.skeleton, clonedMesh.bindMatrix);\n\t\t\t}\n\t\t});\n\n\t\treturn new_object;\n\t}\n\n\tstatic parallelTraverse(a: Object3D, b: Object3D, callback: (a: Object3D, b: Object3D) => void) {\n\t\tcallback(a, b);\n\t\tfor (var i = 0; i < a.children.length; i++) {\n\t\t\tthis.parallelTraverse(a.children[i], b.children[i], callback);\n\t\t}\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InterleavedBuffer} from 'three/src/core/InterleavedBuffer';\nimport {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute';\nimport {TriangleFanDrawMode} from 'three/src/constants';\nimport {TriangleStripDrawMode} from 'three/src/constants';\nimport {TrianglesDrawMode} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar BufferGeometryUtils = {\n\n\tcomputeTangents: function ( geometry ) {\n\n\t\tvar index = geometry.index;\n\t\tvar attributes = geometry.attributes;\n\n\t\t// based on http://www.terathon.com/code/tangent.html\n\t\t// (per vertex tangents)\n\n\t\tif ( index === null ||\n\t\t\t attributes.position === undefined ||\n\t\t\t attributes.normal === undefined ||\n\t\t\t attributes.uv === undefined ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometry: Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()' );\n\t\t\treturn;\n\n\t\t}\n\n\t\tvar indices = index.array;\n\t\tvar positions = attributes.position.array;\n\t\tvar normals = attributes.normal.array;\n\t\tvar uvs = attributes.uv.array;\n\n\t\tvar nVertices = positions.length / 3;\n\n\t\tif ( attributes.tangent === undefined ) {\n\n\t\t\tgeometry.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );\n\n\t\t}\n\n\t\tvar tangents = attributes.tangent.array;\n\n\t\tvar tan1 = [], tan2 = [];\n\n\t\tfor ( var i = 0; i < nVertices; i ++ ) {\n\n\t\t\ttan1[ i ] = new Vector3();\n\t\t\ttan2[ i ] = new Vector3();\n\n\t\t}\n\n\t\tvar vA = new Vector3(),\n\t\t\tvB = new Vector3(),\n\t\t\tvC = new Vector3(),\n\n\t\t\tuvA = new Vector2(),\n\t\t\tuvB = new Vector2(),\n\t\t\tuvC = new Vector2(),\n\n\t\t\tsdir = new Vector3(),\n\t\t\ttdir = new Vector3();\n\n\t\tfunction handleTriangle( a, b, c ) {\n\n\t\t\tvA.fromArray( positions, a * 3 );\n\t\t\tvB.fromArray( positions, b * 3 );\n\t\t\tvC.fromArray( positions, c * 3 );\n\n\t\t\tuvA.fromArray( uvs, a * 2 );\n\t\t\tuvB.fromArray( uvs, b * 2 );\n\t\t\tuvC.fromArray( uvs, c * 2 );\n\n\t\t\tvB.sub( vA );\n\t\t\tvC.sub( vA );\n\n\t\t\tuvB.sub( uvA );\n\t\t\tuvC.sub( uvA );\n\n\t\t\tvar r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );\n\n\t\t\t// silently ignore degenerate uv triangles having coincident or colinear vertices\n\n\t\t\tif ( ! isFinite( r ) ) return;\n\n\t\t\tsdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );\n\t\t\ttdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );\n\n\t\t\ttan1[ a ].add( sdir );\n\t\t\ttan1[ b ].add( sdir );\n\t\t\ttan1[ c ].add( sdir );\n\n\t\t\ttan2[ a ].add( tdir );\n\t\t\ttan2[ b ].add( tdir );\n\t\t\ttan2[ c ].add( tdir );\n\n\t\t}\n\n\t\tvar groups = geometry.groups;\n\n\t\tif ( groups.length === 0 ) {\n\n\t\t\tgroups = [ {\n\t\t\t\tstart: 0,\n\t\t\t\tcount: indices.length\n\t\t\t} ];\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleTriangle(\n\t\t\t\t\tindices[ j + 0 ],\n\t\t\t\t\tindices[ j + 1 ],\n\t\t\t\t\tindices[ j + 2 ]\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\tvar tmp = new Vector3(), tmp2 = new Vector3();\n\t\tvar n = new Vector3(), n2 = new Vector3();\n\t\tvar w, t, test;\n\n\t\tfunction handleVertex( v ) {\n\n\t\t\tn.fromArray( normals, v * 3 );\n\t\t\tn2.copy( n );\n\n\t\t\tt = tan1[ v ];\n\n\t\t\t// Gram-Schmidt orthogonalize\n\n\t\t\ttmp.copy( t );\n\t\t\ttmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();\n\n\t\t\t// Calculate handedness\n\n\t\t\ttmp2.crossVectors( n2, t );\n\t\t\ttest = tmp2.dot( tan2[ v ] );\n\t\t\tw = ( test < 0.0 ) ? - 1.0 : 1.0;\n\n\t\t\ttangents[ v * 4 ] = tmp.x;\n\t\t\ttangents[ v * 4 + 1 ] = tmp.y;\n\t\t\ttangents[ v * 4 + 2 ] = tmp.z;\n\t\t\ttangents[ v * 4 + 3 ] = w;\n\n\t\t}\n\n\t\tfor ( var i = 0, il = groups.length; i < il; ++ i ) {\n\n\t\t\tvar group = groups[ i ];\n\n\t\t\tvar start = group.start;\n\t\t\tvar count = group.count;\n\n\t\t\tfor ( var j = start, jl = start + count; j < jl; j += 3 ) {\n\n\t\t\t\thandleVertex( indices[ j + 0 ] );\n\t\t\t\thandleVertex( indices[ j + 1 ] );\n\t\t\t\thandleVertex( indices[ j + 2 ] );\n\n\t\t\t}\n\n\t\t}\n\n\t},\n\n\t/**\n\t * @param  {Array<BufferGeometry>} geometries\n\t * @param  {Boolean} useGroups\n\t * @return {BufferGeometry}\n\t */\n\tmergeBufferGeometries: function ( geometries, useGroups ) {\n\n\t\tvar isIndexed = geometries[ 0 ].index !== null;\n\n\t\tvar attributesUsed = new Set( Object.keys( geometries[ 0 ].attributes ) );\n\t\tvar morphAttributesUsed = new Set( Object.keys( geometries[ 0 ].morphAttributes ) );\n\n\t\tvar attributes = {};\n\t\tvar morphAttributes = {};\n\n\t\tvar morphTargetsRelative = geometries[ 0 ].morphTargetsRelative;\n\n\t\tvar mergedGeometry = new BufferGeometry();\n\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\tvar geometry = geometries[ i ];\n\n\t\t\t// ensure that all geometries are indexed, or none\n\n\t\t\tif ( isIndexed !== ( geometry.index !== null ) ) return null;\n\n\t\t\t// gather attributes, exit early if they're different\n\n\t\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\t\tif ( ! attributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( attributes[ name ] === undefined ) attributes[ name ] = [];\n\n\t\t\t\tattributes[ name ].push( geometry.attributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather morph attributes, exit early if they're different\n\n\t\t\tif ( morphTargetsRelative !== geometry.morphTargetsRelative ) return null;\n\n\t\t\tfor ( var name in geometry.morphAttributes ) {\n\n\t\t\t\tif ( ! morphAttributesUsed.has( name ) ) return null;\n\n\t\t\t\tif ( morphAttributes[ name ] === undefined ) morphAttributes[ name ] = [];\n\n\t\t\t\tmorphAttributes[ name ].push( geometry.morphAttributes[ name ] );\n\n\t\t\t}\n\n\t\t\t// gather .userData\n\n\t\t\tmergedGeometry.userData.mergedUserData = mergedGeometry.userData.mergedUserData || [];\n\t\t\tmergedGeometry.userData.mergedUserData.push( geometry.userData );\n\n\t\t\tif ( useGroups ) {\n\n\t\t\t\tvar count;\n\n\t\t\t\tif ( isIndexed ) {\n\n\t\t\t\t\tcount = geometry.index.count;\n\n\t\t\t\t} else if ( geometry.attributes.position !== undefined ) {\n\n\t\t\t\t\tcount = geometry.attributes.position.count;\n\n\t\t\t\t} else {\n\n\t\t\t\t\treturn null;\n\n\t\t\t\t}\n\n\t\t\t\tmergedGeometry.addGroup( offset, count, i );\n\n\t\t\t\toffset += count;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// merge indices\n\n\t\tif ( isIndexed ) {\n\n\t\t\tvar indexOffset = 0;\n\t\t\tvar mergedIndex = [];\n\n\t\t\tfor ( var i = 0; i < geometries.length; ++ i ) {\n\n\t\t\t\tvar index = geometries[ i ].index;\n\n\t\t\t\tfor ( var j = 0; j < index.count; ++ j ) {\n\n\t\t\t\t\tmergedIndex.push( index.getX( j ) + indexOffset );\n\n\t\t\t\t}\n\n\t\t\t\tindexOffset += geometries[ i ].attributes.position.count;\n\n\t\t\t}\n\n\t\t\tmergedGeometry.setIndex( mergedIndex );\n\n\t\t}\n\n\t\t// merge attributes\n\n\t\tfor ( var name in attributes ) {\n\n\t\t\tvar mergedAttribute = this.mergeBufferAttributes( attributes[ name ] );\n\n\t\t\tif ( ! mergedAttribute ) return null;\n\n\t\t\tmergedGeometry.setAttribute( name, mergedAttribute );\n\n\t\t}\n\n\t\t// merge morph attributes\n\n\t\tfor ( var name in morphAttributes ) {\n\n\t\t\tvar numMorphTargets = morphAttributes[ name ][ 0 ].length;\n\n\t\t\tif ( numMorphTargets === 0 ) break;\n\n\t\t\tmergedGeometry.morphAttributes = mergedGeometry.morphAttributes || {};\n\t\t\tmergedGeometry.morphAttributes[ name ] = [];\n\n\t\t\tfor ( var i = 0; i < numMorphTargets; ++ i ) {\n\n\t\t\t\tvar morphAttributesToMerge = [];\n\n\t\t\t\tfor ( var j = 0; j < morphAttributes[ name ].length; ++ j ) {\n\n\t\t\t\t\tmorphAttributesToMerge.push( morphAttributes[ name ][ j ][ i ] );\n\n\t\t\t\t}\n\n\t\t\t\tvar mergedMorphAttribute = this.mergeBufferAttributes( morphAttributesToMerge );\n\n\t\t\t\tif ( ! mergedMorphAttribute ) return null;\n\n\t\t\t\tmergedGeometry.morphAttributes[ name ].push( mergedMorphAttribute );\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn mergedGeometry;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {BufferAttribute}\n\t */\n\tmergeBufferAttributes: function ( attributes ) {\n\n\t\tvar TypedArray;\n\t\tvar itemSize;\n\t\tvar normalized;\n\t\tvar arrayLength = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( attribute.isInterleavedBufferAttribute ) return null;\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) return null;\n\n\t\t\tif ( itemSize === undefined ) itemSize = attribute.itemSize;\n\t\t\tif ( itemSize !== attribute.itemSize ) return null;\n\n\t\t\tif ( normalized === undefined ) normalized = attribute.normalized;\n\t\t\tif ( normalized !== attribute.normalized ) return null;\n\n\t\t\tarrayLength += attribute.array.length;\n\n\t\t}\n\n\t\tvar array = new TypedArray( arrayLength );\n\t\tvar offset = 0;\n\n\t\tfor ( var i = 0; i < attributes.length; ++ i ) {\n\n\t\t\tarray.set( attributes[ i ].array, offset );\n\n\t\t\toffset += attributes[ i ].array.length;\n\n\t\t}\n\n\t\treturn new BufferAttribute( array, itemSize, normalized );\n\n\t},\n\n\t/**\n\t * @param {Array<BufferAttribute>} attributes\n\t * @return {Array<InterleavedBufferAttribute>}\n\t */\n\tinterleaveAttributes: function ( attributes ) {\n\n\t\t// Interleaves the provided attributes into an InterleavedBuffer and returns\n\t\t// a set of InterleavedBufferAttributes for each attribute\n\t\tvar TypedArray;\n\t\tvar arrayLength = 0;\n\t\tvar stride = 0;\n\n\t\t// calculate the the length and type of the interleavedBuffer\n\t\tfor ( var i = 0, l = attributes.length; i < l; ++ i ) {\n\n\t\t\tvar attribute = attributes[ i ];\n\n\t\t\tif ( TypedArray === undefined ) TypedArray = attribute.array.constructor;\n\t\t\tif ( TypedArray !== attribute.array.constructor ) {\n\n\t\t\t\tconsole.warn( 'AttributeBuffers of different types cannot be interleaved' );\n\t\t\t\treturn null;\n\n\t\t\t}\n\n\t\t\tarrayLength += attribute.array.length;\n\t\t\tstride += attribute.itemSize;\n\n\t\t}\n\n\t\t// Create the set of buffer attributes\n\t\tvar interleavedBuffer = new InterleavedBuffer( new TypedArray( arrayLength ), stride );\n\t\tvar offset = 0;\n\t\tvar res = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\t\tvar setters = [ 'setX', 'setY', 'setZ', 'setW' ];\n\n\t\tfor ( var j = 0, l = attributes.length; j < l; j ++ ) {\n\n\t\t\tvar attribute = attributes[ j ];\n\t\t\tvar itemSize = attribute.itemSize;\n\t\t\tvar count = attribute.count;\n\t\t\tvar iba = new InterleavedBufferAttribute( interleavedBuffer, itemSize, offset, attribute.normalized );\n\t\t\tres.push( iba );\n\n\t\t\toffset += itemSize;\n\n\t\t\t// Move the data for each attribute into the new interleavedBuffer\n\t\t\t// at the appropriate offset\n\t\t\tfor ( var c = 0; c < count; c ++ ) {\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\tiba[ setters[ k ] ]( c, attribute[ getters[ k ] ]( c ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn res;\n\n\t},\n\n\t/**\n\t * @param {Array<BufferGeometry>} geometry\n\t * @return {number}\n\t */\n\testimateBytesUsed: function ( geometry ) {\n\n\t\t// Return the estimated memory used by this geometry in bytes\n\t\t// Calculate using itemSize, count, and BYTES_PER_ELEMENT to account\n\t\t// for InterleavedBufferAttributes.\n\t\tvar mem = 0;\n\t\tfor ( var name in geometry.attributes ) {\n\n\t\t\tvar attr = geometry.getAttribute( name );\n\t\t\tmem += attr.count * attr.itemSize * attr.array.BYTES_PER_ELEMENT;\n\n\t\t}\n\n\t\tvar indices = geometry.getIndex();\n\t\tmem += indices ? indices.count * indices.itemSize * indices.array.BYTES_PER_ELEMENT : 0;\n\t\treturn mem;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} tolerance\n\t * @return {BufferGeometry>}\n\t */\n\tmergeVertices: function ( geometry, tolerance = 1e-4 ) {\n\n\t\ttolerance = Math.max( tolerance, Number.EPSILON );\n\n\t\t// Generate an index buffer if the geometry doesn't have one, or optimize it\n\t\t// if it's already available.\n\t\tvar hashToIndex = {};\n\t\tvar indices = geometry.getIndex();\n\t\tvar positions = geometry.getAttribute( 'position' );\n\t\tvar vertexCount = indices ? indices.count : positions.count;\n\n\t\t// next value for triangle indices\n\t\tvar nextIndex = 0;\n\n\t\t// attributes and new attribute arrays\n\t\tvar attributeNames = Object.keys( geometry.attributes );\n\t\tvar attrArrays = {};\n\t\tvar morphAttrsArrays = {};\n\t\tvar newIndices = [];\n\t\tvar getters = [ 'getX', 'getY', 'getZ', 'getW' ];\n\n\t\t// initialize the arrays\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\n\t\t\tattrArrays[ name ] = [];\n\n\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\tif ( morphAttr ) {\n\n\t\t\t\tmorphAttrsArrays[ name ] = new Array( morphAttr.length ).fill().map( () => [] );\n\n\t\t\t}\n\n\t\t}\n\n\t\t// convert the error tolerance to an amount of decimal places to truncate to\n\t\tvar decimalShift = Math.log10( 1 / tolerance );\n\t\tvar shiftMultiplier = Math.pow( 10, decimalShift );\n\t\tfor ( var i = 0; i < vertexCount; i ++ ) {\n\n\t\t\tvar index = indices ? indices.getX( i ) : i;\n\n\t\t\t// Generate a hash for the vertex attributes at the current index 'i'\n\t\t\tvar hash = '';\n\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t// double tilde truncates the decimal value\n\t\t\t\t\thash += `${ ~ ~ ( attribute[ getters[ k ] ]( index ) * shiftMultiplier ) },`;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t// Add another reference to the vertex if it's already\n\t\t\t// used by another index\n\t\t\tif ( hash in hashToIndex ) {\n\n\t\t\t\tnewIndices.push( hashToIndex[ hash ] );\n\n\t\t\t} else {\n\n\t\t\t\t// copy data to the new index in the attribute arrays\n\t\t\t\tfor ( var j = 0, l = attributeNames.length; j < l; j ++ ) {\n\n\t\t\t\t\tvar name = attributeNames[ j ];\n\t\t\t\t\tvar attribute = geometry.getAttribute( name );\n\t\t\t\t\tvar morphAttr = geometry.morphAttributes[ name ];\n\t\t\t\t\tvar itemSize = attribute.itemSize;\n\t\t\t\t\tvar newarray = attrArrays[ name ];\n\t\t\t\t\tvar newMorphArrays = morphAttrsArrays[ name ];\n\n\t\t\t\t\tfor ( var k = 0; k < itemSize; k ++ ) {\n\n\t\t\t\t\t\tvar getterFunc = getters[ k ];\n\t\t\t\t\t\tnewarray.push( attribute[ getterFunc ]( index ) );\n\n\t\t\t\t\t\tif ( morphAttr ) {\n\n\t\t\t\t\t\t\tfor ( var m = 0, ml = morphAttr.length; m < ml; m ++ ) {\n\n\t\t\t\t\t\t\t\tnewMorphArrays[ m ].push( morphAttr[ m ][ getterFunc ]( index ) );\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\thashToIndex[ hash ] = nextIndex;\n\t\t\t\tnewIndices.push( nextIndex );\n\t\t\t\tnextIndex ++;\n\n\t\t\t}\n\n\t\t}\n\n\t\t// Generate typed arrays from new attribute arrays and update\n\t\t// the attributeBuffers\n\t\tconst result = geometry.clone();\n\t\tfor ( var i = 0, l = attributeNames.length; i < l; i ++ ) {\n\n\t\t\tvar name = attributeNames[ i ];\n\t\t\tvar oldAttribute = geometry.getAttribute( name );\n\n\t\t\tvar buffer = new oldAttribute.array.constructor( attrArrays[ name ] );\n\t\t\tvar attribute = new BufferAttribute( buffer, oldAttribute.itemSize, oldAttribute.normalized );\n\n\t\t\tresult.setAttribute( name, attribute );\n\n\t\t\t// Update the attribute arrays\n\t\t\tif ( name in morphAttrsArrays ) {\n\n\t\t\t\tfor ( var j = 0; j < morphAttrsArrays[ name ].length; j ++ ) {\n\n\t\t\t\t\tvar oldMorphAttribute = geometry.morphAttributes[ name ][ j ];\n\n\t\t\t\t\tvar buffer = new oldMorphAttribute.array.constructor( morphAttrsArrays[ name ][ j ] );\n\t\t\t\t\tvar morphAttribute = new BufferAttribute( buffer, oldMorphAttribute.itemSize, oldMorphAttribute.normalized );\n\t\t\t\t\tresult.morphAttributes[ name ][ j ] = morphAttribute;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\t// indices\n\n\t\tresult.setIndex( newIndices );\n\n\t\treturn result;\n\n\t},\n\n\t/**\n\t * @param {BufferGeometry} geometry\n\t * @param {number} drawMode\n\t * @return {BufferGeometry>}\n\t */\n\ttoTrianglesDrawMode: function ( geometry, drawMode ) {\n\n\t\tif ( drawMode === TrianglesDrawMode ) {\n\n\t\t\tconsole.warn( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Geometry already defined as triangles.' );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t\tif ( drawMode === TriangleFanDrawMode || drawMode === TriangleStripDrawMode ) {\n\n\t\t\tvar index = geometry.getIndex();\n\n\t\t\t// generate index if not present\n\n\t\t\tif ( index === null ) {\n\n\t\t\t\tvar indices = [];\n\n\t\t\t\tvar position = geometry.getAttribute( 'position' );\n\n\t\t\t\tif ( position !== undefined ) {\n\n\t\t\t\t\tfor ( var i = 0; i < position.count; i ++ ) {\n\n\t\t\t\t\t\tindices.push( i );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tgeometry.setIndex( indices );\n\t\t\t\t\tindex = geometry.getIndex();\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Undefined position attribute. Processing not possible.' );\n\t\t\t\t\treturn geometry;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\t//\n\n\t\t\tvar numberOfTriangles = index.count - 2;\n\t\t\tvar newIndices = [];\n\n\t\t\tif ( drawMode === TriangleFanDrawMode ) {\n\n\t\t\t\t// gl.TRIANGLE_FAN\n\n\t\t\t\tfor ( var i = 1; i <= numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tnewIndices.push( index.getX( 0 ) );\n\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\t// gl.TRIANGLE_STRIP\n\n\t\t\t\tfor ( var i = 0; i < numberOfTriangles; i ++ ) {\n\n\t\t\t\t\tif ( i % 2 === 0 ) {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 2 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i + 1 ) );\n\t\t\t\t\t\tnewIndices.push( index.getX( i ) );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif ( ( newIndices.length / 3 ) !== numberOfTriangles ) {\n\n\t\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unable to generate correct amount of triangles.' );\n\n\t\t\t}\n\n\t\t\t// build final geometry\n\n\t\t\tvar newGeometry = geometry.clone();\n\t\t\tnewGeometry.setIndex( newIndices );\n\t\t\tnewGeometry.clearGroups();\n\n\t\t\treturn newGeometry;\n\n\t\t} else {\n\n\t\t\tconsole.error( 'THREE.BufferGeometryUtils.toTrianglesDrawMode(): Unknown draw mode:', drawMode );\n\t\t\treturn geometry;\n\n\t\t}\n\n\t}\n\n};\n\nexport { BufferGeometryUtils };\n","// import lodash_flatten from 'lodash/flatten'\n// import lodash_map from 'lodash/map'\n\nimport {CoreGeometry} from '../Geometry';\nimport {CorePoint} from '../Point';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nexport class CoreGeometryUtilCurve {\n\tstatic accumulated_curve_point_indices(indices: number[]) {\n\t\tlet curve_point_indices: number[] = [];\n\t\tconst accumulated_curve_point_indices = [];\n\t\tlet last_index_added: number | null = null;\n\n\t\t// indices.forEach((index, i) => {\n\t\tlet index: number;\n\t\tfor (let i = 0; i < indices.length; i++) {\n\t\t\tif (i % 2 === 1) {\n\t\t\t\tindex = indices[i];\n\t\t\t\tconst previous_index = indices[i - 1];\n\n\t\t\t\t// if the last added index, from the previous segment\n\t\t\t\t// is the same as the start of the current segment (indices[i-1])\n\t\t\t\t// then this is part of the same curve\n\t\t\t\tif (last_index_added == null || previous_index === last_index_added) {\n\t\t\t\t\t// add the first point\n\t\t\t\t\tif (curve_point_indices.length === 0) {\n\t\t\t\t\t\tcurve_point_indices.push(previous_index);\n\t\t\t\t\t}\n\n\t\t\t\t\tcurve_point_indices.push(index);\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t} else {\n\t\t\t\t\t// otherwise we create a new curve\n\t\t\t\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\t\t\t\t\t//current_points = lodash_map curve_point_indices, (index)->points[index]\n\t\t\t\t\t//curve_point_indices_groups.push(current_points)\n\t\t\t\t\t//this._create_curve_from_points(current_points)\n\n\t\t\t\t\t// and reset the array\n\t\t\t\t\tcurve_point_indices = [previous_index, index];\n\t\t\t\t\tlast_index_added = index;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// also create with the remaining ones\n\t\taccumulated_curve_point_indices.push(curve_point_indices);\n\n\t\treturn accumulated_curve_point_indices;\n\t}\n\n\tstatic create_line_segment_geometry(\n\t\tpoints: CorePoint[],\n\t\tindices: number[],\n\t\tattrib_names: string[],\n\t\tattrib_sizes_by_name: Dictionary<number>\n\t) {\n\t\t// let new_positions: number[] = []\n\t\tconst new_indices: number[] = [];\n\n\t\tconst new_attribute_values_by_name: Dictionary<number[]> = {};\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tnew_attribute_values_by_name[attrib_name] = [];\n\t\t});\n\n\t\tindices.forEach((index, i) => {\n\t\t\tconst point = points[index];\n\t\t\t// const position = point.position();\n\t\t\t// new_positions.push(position.toArray());\n\t\t\tattrib_names.forEach((attrib_name) => {\n\t\t\t\tlet attrib_value = point.attrib_value(attrib_name);\n\t\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\t\tif (attrib_size > 1) {\n\t\t\t\t\tattrib_value = attrib_value.toArray();\n\t\t\t\t} else {\n\t\t\t\t\tattrib_value = [attrib_value];\n\t\t\t\t}\n\t\t\t\tattrib_value.forEach((v: number) => {\n\t\t\t\t\tnew_attribute_values_by_name[attrib_name].push(v);\n\t\t\t\t});\n\t\t\t});\n\n\t\t\tif (i > 0) {\n\t\t\t\tnew_indices.push(i - 1);\n\t\t\t\tnew_indices.push(i);\n\t\t\t}\n\t\t});\n\n\t\t// new_positions = lodash_flatten(new_positions)\n\t\tconst geometry = new BufferGeometry();\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = attrib_sizes_by_name[attrib_name];\n\t\t\tconst values = new_attribute_values_by_name[attrib_name];\n\t\t\tgeometry.setAttribute(attrib_name, new Float32BufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tgeometry.setIndex(new_indices);\n\t\treturn geometry;\n\t}\n\n\tstatic line_segment_to_geometries(geometry: BufferGeometry) {\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst attrib_names = core_geometry.attrib_names();\n\t\tconst points = core_geometry.points();\n\t\tconst indices = (geometry.getIndex()?.array as number[]) || [];\n\n\t\tconst accumulated_curve_point_indices = this.accumulated_curve_point_indices(indices);\n\t\tconsole.log(indices, accumulated_curve_point_indices);\n\n\t\tif (accumulated_curve_point_indices.length > 0) {\n\t\t\tconst attribute_sizes_by_name = core_geometry.attrib_sizes();\n\n\t\t\taccumulated_curve_point_indices.forEach((curve_point_indices, i) => {\n\t\t\t\tgeometry = this.create_line_segment_geometry(\n\t\t\t\t\tpoints,\n\t\t\t\t\tcurve_point_indices,\n\t\t\t\t\tattrib_names,\n\t\t\t\t\tattribute_sizes_by_name\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t});\n\t\t}\n\n\t\treturn geometries;\n\t}\n}\n","// import lodash_isArray from 'lodash/isArray'\n// import lodash_isString from 'lodash/isString'\n// import lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from 'src/core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class FloatParam extends TypedNumericParam<ParamType.FLOAT> {\n\tstatic type() {\n\t\treturn ParamType.FLOAT;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FLOAT],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FLOAT]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FLOAT], val2: ParamValuesTypeMap[ParamType.FLOAT]) {\n\t\treturn val1 == val2;\n\t}\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.FLOAT]): number | null {\n\t\tconst result = FloatParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n\t// convert_value(v) {\n\t// \t// if(lodash_isNumber(v)){\n\t// \t// \t//\n\t// \t// }\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\tv = v ? 1 : 0\n\t// \t}\n\t// \tif (lodash_isString(v)) {\n\t// \t\tv = parseFloat(v)\n\t// \t}\n\t// \tif (lodash_isArray(v)) {\n\t// \t\tv = v[0]\n\t// \t}\n\t// \treturn this._ensure_in_range(v)\n\t// }\n\t// convert_default_value(v) {\n\t// \t// if(lodash_isNumber(v)){\n\t// \t// \t//\n\t// \t// }\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\tv = v ? 1 : 0\n\t// \t}\n\t// \t// if(lodash_isString(v)){\n\t// \t// \tv = parseFloat(v)\n\t// \t// }\n\t// \tif (lodash_isArray(v)) {\n\t// \t\tv = v[0]\n\t// \t}\n\t// \treturn v\n\t// }\n\n\t// is_value_expression(v) {\n\t// \t//console.log(\"is_value_expression\", this, v, !lodash_isNumber(v))\n\t// \t//!lodash_isNumber(v)\n\t// \treturn `${v}` !== `${parseFloat(v)}`\n\t// }\n}\n","// import {TypedParamVisitor} from './_Base';\nimport {TypedParam} from './_Base';\nimport {CoreWalker} from 'src/core/Walker';\n\n// import {AsCodeOperatorPath} from './concerns/visitors/OperatorPath';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {ParamType} from '../poly/ParamType';\n// import {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamEvent} from '../poly/ParamEvent';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class OperatorPathParam extends TypedParam<ParamType.OPERATOR_PATH> {\n\tprivate _found_node: BaseNodeType | null = null;\n\n\tstatic type() {\n\t\treturn ParamType.OPERATOR_PATH;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn `${this._raw_input}`;\n\t}\n\tget value_serialized() {\n\t\treturn `${this.value}`;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\tval2: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn val1 == val2;\n\t}\n\tget is_default(): boolean {\n\t\treturn this._value == this.default_value;\n\t}\n\tprotected process_raw_input() {\n\t\tthis._value = this._raw_input;\n\t\tthis.set_dirty();\n\t\tthis.emit_controller.emit(ParamEvent.VALUE_UPDATED);\n\t}\n\n\tprotected async process_computation() {\n\t\tconst path = this._value;\n\t\tlet node = null;\n\t\tconst path_non_empty = path != null && path !== '';\n\n\t\tif (path_non_empty) {\n\t\t\tnode = CoreWalker.find_node(this.node, path);\n\t\t\t// not sure I want the param to be errored,\n\t\t\t// as it may block the node, even if the param is not necessary\n\t\t\t// if (!node) {\n\t\t\t// \tthis.states.error.set('node not found');\n\t\t\t// }\n\t\t}\n\n\t\tif (this._found_node !== node) {\n\t\t\tconst dependent_on_found_node = this.options.dependent_on_found_node();\n\n\t\t\tif (this._found_node) {\n\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\tthis.remove_graph_input(this._found_node);\n\t\t\t\t} else {\n\t\t\t\t\t// this._found_node.remove_param_referree(this) // TODO: typescript\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._found_node = node;\n\t\t\tif (node) {\n\t\t\t\tconst expected_context = this.options.node_selection_context;\n\t\t\t\tconst node_context = node.parent?.children_controller?.context;\n\t\t\t\tif (expected_context == node_context || expected_context == null) {\n\t\t\t\t\tif (dependent_on_found_node) {\n\t\t\t\t\t\tthis.add_graph_input(node);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// this._found_node.add_param_referree(this) // TODO: typescript\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(\n\t\t\t\t\t\t`node context is ${expected_context} but the params expects a ${node_context}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} // else {\n\t\t\t// \tif (path_non_empty) {\n\t\t\t// \t\tthis.states.error.set('node not found');\n\t\t\t// \t}\n\t\t\t// }\n\t\t\tthis.options.execute_callback();\n\t\t}\n\t\tthis.remove_dirty_state();\n\t}\n\n\tfound_node() {\n\t\treturn this._found_node;\n\t}\n}\n","import {GlobalsBaseController} from './_Base';\nimport {GlobalsGlNode} from '../../Globals';\nimport {AttributeGlNode} from '../../Attribute';\n// import {Definition} from '../../Definition/_Module';\n// import {DefinitionBaseConfig} from '../Config/DefinitionBaseConfig';\n// import {BaseGlNodeType} from '../../_Base';\nimport {VaryingGLDefinition, AttributeGLDefinition} from '../../utils/GLDefinition';\nimport {ConnectionPointType} from 'src/engine/nodes/utils/connections/ConnectionPointType';\n// import {TypeAssert} from 'src/engine/poly/Assert';\nimport {MapUtils} from 'src/core/MapUtils';\nimport {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nconst VARIABLE_CONFIG_DEFAULT_BY_NAME: Dictionary<string> = {\n\tposition: 'vec3( position )',\n};\n\nexport class GlobalsGeometryHandler extends GlobalsBaseController {\n\tstatic PRE_DEFINED_ATTRIBUTES = [\n\t\t'position',\n\t\t'color',\n\t\t'normal',\n\t\t'uv',\n\t\t'uv2',\n\t\t'morphTarget0',\n\t\t'morphTarget1',\n\t\t'morphTarget2',\n\t\t'morphTarget3',\n\t\t'skinIndex',\n\t\t'skinWeight',\n\t];\n\n\tstatic IF_RULE = {\n\t\tuv:\n\t\t\t'defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP ) || defined( USE_ALPHAMAP ) || defined( USE_EMISSIVEMAP ) || defined( USE_ROUGHNESSMAP ) || defined( USE_METALNESSMAP )',\n\t};\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {\n\t\tconst connection_point = globals_node.io.outputs.named_output_connection_points_by_name(output_name);\n\t\tif (!connection_point) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst var_name = globals_node.gl_var_name(output_name);\n\t\tconst gl_type = connection_point.type;\n\t\tconst definition = new VaryingGLDefinition(globals_node, gl_type, var_name);\n\n\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, definition);\n\t\tshaders_collection_controller.add_definitions(globals_node, [definition]);\n\t\t// definitions_by_shader_name.get(shader_name)!.push(definition);\n\t\tconst assembler = globals_node.material_node?.assembler_controller.assembler;\n\t\tif (!assembler) {\n\t\t\treturn;\n\t\t}\n\t\tconst shader_config = assembler.shader_config(shaders_collection_controller.current_shader_name);\n\t\tif (!shader_config) {\n\t\t\treturn;\n\t\t}\n\t\tconst dependencies = shader_config.dependencies();\n\n\t\tconst body_line = `${var_name} = ${gl_type}(${output_name})`;\n\t\tfor (let dependency of dependencies) {\n\t\t\t// MapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, definition);\n\t\t\t// MapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, body_line);\n\t\t\tshaders_collection_controller.add_definitions(globals_node, [definition], dependency);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line], dependency);\n\t\t}\n\t\tif (dependencies.length == 0) {\n\t\t\t// body_lines.push(body_line);\n\t\t\tshaders_collection_controller.add_body_lines(globals_node, [body_line]);\n\t\t}\n\t}\n\n\tstatic variable_config_default(variable_name: string): string | undefined {\n\t\treturn VARIABLE_CONFIG_DEFAULT_BY_NAME[variable_name];\n\t}\n\tvariable_config_default(variable_name: string): string | undefined {\n\t\treturn GlobalsGeometryHandler.variable_config_default(variable_name);\n\t}\n\t// variable_config_required_definitions(variable_name:string):DefinitionBaseConfig[]{\n\t// \treturn null\n\t// }\n\tread_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n\n\tstatic read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined {\n\t\tif (GlobalsGeometryHandler.PRE_DEFINED_ATTRIBUTES.indexOf(attrib_name) < 0) {\n\t\t\tshaders_collection_controller.add_definitions(\n\t\t\t\tnode,\n\t\t\t\t[new AttributeGLDefinition(node, gl_type, attrib_name)],\n\t\t\t\tShaderName.VERTEX\n\t\t\t);\n\t\t} else {\n\t\t\t// const if_rule = GlobalsGeometryHandler.IF_RULE[attrib_name]\n\t\t\t// if(if_rule){\n\t\t\t// \tconst definition = new Definition.Attribute(node, gl_type, attrib_name)\n\t\t\t// \tdefinition.set_if_rule(if_rule)\n\t\t\t// \tnode.add_definitions([definition])\n\t\t\t// }\n\t\t}\n\n\t\t// if (!shader_name) {\n\t\t// \tthrow 'no shader name';\n\t\t// }\n\t\tconst shader_name = shaders_collection_controller.current_shader_name;\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX: {\n\t\t\t\treturn attrib_name;\n\t\t\t}\n\t\t\tcase ShaderName.FRAGMENT: {\n\t\t\t\t// let's assume it can only be an attribute gl node\n\t\t\t\tif (!(node instanceof AttributeGlNode)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tconst var_name = 'varying_' + node.gl_var_name(node.output_name);\n\t\t\t\tconst varying_definition = new VaryingGLDefinition(node, gl_type, var_name);\n\n\t\t\t\tconst definitions_by_shader_name: Map<ShaderName, VaryingGLDefinition[]> = new Map();\n\t\t\t\t// definitions_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tdefinitions_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\t// {\n\t\t\t\t// \t[ShaderName.VERTEX]: [],\n\t\t\t\t// \t[ShaderName.FRAGMENT]: [],\n\t\t\t\t// };\n\t\t\t\tconst body_lines_by_shader_name: Map<ShaderName, string[]> = new Map();\n\t\t\t\t// body_lines_by_shader_name.set(ShaderName.VERTEX, [])\n\t\t\t\tbody_lines_by_shader_name.set(ShaderName.FRAGMENT, []);\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, shader_name, varying_definition);\n\n\t\t\t\tconst set_varying_body_line = `${var_name} = ${gl_type}(${attrib_name})`;\n\n\t\t\t\tconst shader_config = node.material_node?.assembler_controller.assembler.shader_config(shader_name);\n\t\t\t\tif (shader_config) {\n\t\t\t\t\tconst dependencies = shader_config.dependencies();\n\t\t\t\t\tfor (let dependency of dependencies) {\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_shader_name, dependency, varying_definition);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(body_lines_by_shader_name, dependency, set_varying_body_line);\n\t\t\t\t\t}\n\t\t\t\t\tdefinitions_by_shader_name.forEach((definitions, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_definitions(node, definitions, shader_name);\n\t\t\t\t\t});\n\t\t\t\t\tbody_lines_by_shader_name.forEach((body_lines, shader_name) => {\n\t\t\t\t\t\tshaders_collection_controller.add_body_lines(node, body_lines, shader_name);\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\treturn var_name;\n\t\t\t}\n\t\t}\n\t\t// TypeAssert.unreachable(shader_name);\n\n\t\t// const shader_name = node._shader_name // TODO: this is hack\n\t\t// const varying_definition = new Definition.Varying(node, gl_type, attrib_name)\n\t\t// const var_name = varying_definition.name()\n\t\t// definitions_by_shader_name[shader_name].push(varying_definition)\n\t\t// const shader_config = node.shader_config(shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\t\t// const body_line = `${var_name} = ${gl_type}(${attrib_name})`\n\t\t// for(let dependency of dependencies){\n\t\t// \tdefinitions_by_shader_name[dependency].push(varying_definition)\n\t\t// \tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// }\n\t\t// // if(dependencies.length == 0){\n\t\t// \t// body_lines.push(body_line)\n\t\t// \tnode.add_body_lines([body_line])\n\t\t// // }\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tnode.add_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tnode.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// node.add_body_lines(body_lines)\n\t}\n\thandle_attribute_node(\n\t\tnode: AttributeGlNode,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {\n\t\treturn GlobalsGeometryHandler.read_attribute(node, gl_type, attrib_name, shaders_collection_controller);\n\t}\n}\n","// import {Scene} from 'three/src/scenes/Scene'\n// import {CoreGraph} from 'src/core/graph/CoreGraph'\n// import {CorePerformance} from 'src/core/performance/CorePerformance'\n// import {Cooker} from 'src/core/graph/Cooker'\n// import {EmitPayload} from 'src/core/graph/NodeScene'\n// import {BaseNode} from '../nodes/_Base'\n\n// import {CoreObject} from 'src/core/Object';\n// import {Debug} from './concerns/Debug';\n// import {Env} from './concerns/Env'\n// import {ExpressionRegister} from './concerns/ExpressionRegister';\n// import {Frame} from './concerns/Frame';\n// import {GraphMixin} from './concerns/Graph';\n// import {Js} from './concerns/Js';\n// import {Json} from './concerns/Json';\n// import {LifeCycle} from './concerns/LifeCycle';\n// import {Loading} from './concerns/Loading';\n// import {Name} from './concerns/Name';\n// import {Nodes} from './concerns/Nodes';\n// import {ObjectMixin} from './concerns/Object';\n// import {PickerNodes} from './concerns/PickerNodes';\n// import {PerformanceMixin} from './concerns/Performance';\n// import {Renderer} from './concerns/Renderer';\n// import {Store} from './concerns/Store';\n// import {Uniforms} from './concerns/Uniforms';\n\n// import {CubeCamerasController} from './utils/CubeCamerasController';\nimport {CamerasController} from './utils/CamerasController';\nimport {Cooker} from './utils/Cooker';\nimport {CoreGraph} from 'src/core/graph/CoreGraph';\nimport {CookController} from './utils/CookController';\nimport {EventsController} from './utils/EventsController';\nimport {LifeCycleController} from './utils/LifeCycleController';\nimport {LoadingController} from './utils/LoadingController';\nimport {MissingReferencesController} from 'src/engine/expressions/MissingReferencesController';\nimport {NodesController} from './utils/NodesController';\nimport {CorePerformance} from 'src/core/performance/CorePerformance';\nimport {TimeController} from './utils/TimeController';\nimport {PolySceneSerializer} from './utils/Serializer';\nimport {UniformsController} from './utils/UniformsController';\nimport {WebGLController} from './utils/WebGLController';\n\nimport {Scene} from 'three/src/scenes/Scene';\n\nexport class PolyScene {\n\tprotected _display_scene = new Scene();\n\tget display_scene() {\n\t\treturn this._display_scene;\n\t}\n\t_uuid!: string;\n\tset_uuid(uuid: string) {\n\t\treturn (this._uuid = uuid);\n\t}\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\t_name: string | undefined;\n\tset_name(name: string) {\n\t\treturn (this._name = name);\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\n\tprotected _cameras_controller = new CamerasController(this);\n\tget cameras_controller() {\n\t\treturn this._cameras_controller;\n\t}\n\n\tprivate _cooker = new Cooker(this);\n\tget cooker() {\n\t\treturn this._cooker;\n\t}\n\n\t// private _cube_cameras_controller: CubeCamerasController;\n\t// get cube_cameras_controller() {\n\t// \treturn (this._cube_cameras_controller = this._cube_cameras_controller || new CubeCamerasController(this));\n\t// }\n\tpublic readonly cook_controller = new CookController();\n\tasync wait_for_cooks_completed() {\n\t\treturn this.cook_controller.wait_for_cooks_completed();\n\t}\n\n\tprivate _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\n\tprivate _graph = new CoreGraph();\n\tget graph() {\n\t\treturn this._graph;\n\t}\n\n\tprivate _lifecycle_controller: LifeCycleController | undefined;\n\tget lifecycle_controller() {\n\t\treturn (this._lifecycle_controller = this._lifecycle_controller || new LifeCycleController(this));\n\t}\n\tprivate _loading_controller: LoadingController | undefined;\n\tget loading_controller() {\n\t\treturn (this._loading_controller = this._loading_controller || new LoadingController(this));\n\t}\n\n\tprivate _missing_expression_references_controller: MissingReferencesController = new MissingReferencesController();\n\tget missing_expression_references_controller() {\n\t\treturn this._missing_expression_references_controller;\n\t}\n\n\tprotected _nodes_controller = new NodesController(this);\n\tget nodes_controller() {\n\t\treturn this._nodes_controller;\n\t}\n\n\tprotected _performance: CorePerformance | undefined;\n\tget performance() {\n\t\treturn (this._performance = this._performance || new CorePerformance());\n\t}\n\n\tprotected _time_controller = new TimeController(this);\n\tget time_controller() {\n\t\treturn this._time_controller;\n\t}\n\tset_frame(frame: number) {\n\t\tthis.time_controller.set_frame(frame);\n\t}\n\tget frame() {\n\t\treturn this.time_controller.frame;\n\t}\n\tget frame_range() {\n\t\treturn this.time_controller.frame_range;\n\t}\n\tplay() {\n\t\tthis.time_controller.play();\n\t}\n\tpause() {\n\t\tthis.time_controller.pause();\n\t}\n\n\tprivate _serializer: PolySceneSerializer | undefined;\n\tprivate get serializer() {\n\t\treturn (this._serializer = this._serializer || new PolySceneSerializer(this));\n\t}\n\tto_json() {\n\t\treturn this.serializer.to_json();\n\t}\n\n\tprivate _uniforms_controller: UniformsController | undefined;\n\tget uniforms_controller() {\n\t\treturn (this._uniforms_controller = this._uniforms_controller || new UniformsController(this));\n\t}\n\n\tprivate _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController());\n\t}\n\n\tconstructor() {\n\t\t// this.mark_as_loaded()\n\t\tthis._graph.set_scene(this);\n\t\t// this.time_controller.init();\n\t\tthis.nodes_controller.init();\n\t}\n\n\t// cooker\n\tbatch_update(callback: () => void) {\n\t\tthis._cooker.block();\n\n\t\tcallback();\n\n\t\tthis._cooker.unblock();\n\t}\n\n\t// nodes\n\tnode(path: string) {\n\t\treturn this.nodes_controller.node(path);\n\t}\n\tget root() {\n\t\treturn this.nodes_controller.root;\n\t}\n}\n\n// export function ClassDecorator<T>(beanName: string): Function {\n// \treturn (classConstructor: any) => {\n// \t\tconsole.log('classConstructor')\n// \t\tconsole.log(classConstructor)\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n\n// export function Param(param_type: string, default_value: number): Function {\n// \treturn (\n// \t\ttarget: any,\n// \t\tpropertyKey: string,\n// \t\tdescriptor: PropertyDescriptor\n// \t) => {\n// \t\tconsole.log('Param')\n// \t\tconsole.log(target, propertyKey, descriptor)\n// \t\t// Object.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n// export function ParamFloat(default_value: number, options: object = {}): Function {\n// \treturn (target: any, propertyKey: string) => {\n// \t\tconsole.log('Param Float', default_value)\n// \t\tconst param_name = propertyKey.substring(7) // removes _param_\n// \t\tconsole.log('param_name', param_name)\n// \t\t// target.prepare_param_on_init('Float', param_name, default_value)\n// \t\t// console.log(target, propertyKey)\n// \t\t// Object.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n// export function ClassMethod(value: boolean): Function {\n// \treturn (\n// \t\ttarget: any,\n// \t\tpropertyKey: string,\n// \t\tdescriptor: PropertyDescriptor\n// \t) => {\n// \t\tconsole.log('ClassMethod')\n// \t\tconsole.log(target, propertyKey, descriptor)\n// \t\tObject.assign(target, `_param_${propertyKey}`, 'ta')\n// \t\t// const props = getOrCreateProps(classConstructor)\n// \t\t// props.beanName = beanName\n// \t}\n// }\n\n// // @ClassDecorator('bla')\n// export class PolyScene {\n// \t_display_scene: Scene = new Scene()\n// \t_graph: CoreGraph\n// \t_performance: CorePerformance\n// \t_cooker: Cooker\n\n// \t// @ParamFloat(3, {visible_if: {test: 2}}) _param_radius: number\n\n// \t// constructor() {\n// \t// \tconst co = new CoreObject()\n// \t// \tconsole.log('CoreObject', co)\n// \t// }\n// \tgraph() {\n// \t\treturn this._graph\n// \t}\n// \tperformance() {\n// \t\treturn this._performance\n// \t}\n// \tcooker() {\n// \t\treturn this._cooker\n// \t}\n// \tstore_commit(event_name: string, payload: EmitPayload) {}\n// \temit_allowed() {\n// \t\treturn true\n// \t}\n// \tnode(path: string): BaseNode {\n// \t\treturn null\n// \t}\n\n// \tdisplay_scene() {\n// \t\treturn this._display_scene\n// \t}\n\n// \tis_loading() {\n// \t\treturn true\n// \t}\n// \tloaded(): boolean {\n// \t\treturn true\n// \t}\n// \troot(): BaseNode {\n// \t\treturn null\n// \t}\n// \tcontext(): any {}\n\n// \tuuid() {\n// \t\treturn 'test-uuid'\n// \t}\n// }\n","import {BaseNodeType} from '../_Base';\nimport {NodeUIDataJson} from './UIData';\nimport {TypedNamedConnectionPointData} from './connections/NamedConnectionPoint';\nimport {ConnectionPointType} from './connections/ConnectionPointType';\n\nexport interface NodeSerializerData {\n\tname: string;\n\ttype: string;\n\tgraph_node_id: string;\n\tis_dirty: boolean;\n\tui_data_json: NodeUIDataJson;\n\terror_message: string | undefined;\n\tchildren: string[];\n\tinputs: Array<string | undefined>;\n\tinput_connection_output_indices: Array<number | undefined> | undefined;\n\tnamed_input_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tnamed_output_connections: TypedNamedConnectionPointData<ConnectionPointType>[];\n\tparam_ids: string[];\n\t// spare_params: Dictionary<string>;\n\toverride_clonable_state: boolean;\n\tinputs_clonable_state_with_override: boolean[];\n\tflags?: {\n\t\t//has_display: this.has_display_flag()\n\t\tdisplay?: boolean;\n\t\tbypass?: boolean;\n\t};\n\tselection?: string[];\n}\n\nexport class NodeSerializer {\n\tconstructor(private node: BaseNodeType) {}\n\n\t// serialize() {\n\t// \treturn this.to_json();\n\t// }\n\n\t// TODO: find a way to not re-create a json everytime\n\tto_json(include_param_components: boolean = false): NodeSerializerData {\n\t\t// const spare_params_json_by_name = {};\n\t\t// lodash_each(this.node.spare_param_names(), param_name=> {\n\t\t// \tconst param = this.node.spare_param(param_name);\n\t\t// \tspare_params_json_by_name[param_name] = param.graph_node_id;\n\t\t// });\n\n\t\tconst data = {\n\t\t\tname: this.node.name,\n\t\t\ttype: this.node.type,\n\t\t\tgraph_node_id: this.node.graph_node_id,\n\t\t\tis_dirty: this.node.is_dirty,\n\t\t\tui_data_json: this.node.ui_data.to_json(),\n\t\t\terror_message: this.node.states.error.message,\n\t\t\tchildren: this.children_ids(),\n\t\t\tinputs: this.input_ids(),\n\t\t\tinput_connection_output_indices: this.connection_input_indices(),\n\t\t\tnamed_input_connections: this.named_input_connections(),\n\t\t\tnamed_output_connections: this.named_output_connections(),\n\t\t\tparam_ids: this.to_json_params(include_param_components),\n\t\t\t// spare_params: this.to_json_spare_params(include_param_components),\n\t\t\toverride_clonable_state: this.node.io.inputs.override_clonable_state(),\n\t\t\tinputs_clonable_state_with_override: this.node.io.inputs.inputs_clonable_state_with_override(),\n\t\t\tflags: {\n\t\t\t\t//has_display: this.has_display_flag()\n\t\t\t\tdisplay: this.node.flags?.display?.active,\n\t\t\t\tbypass: this.node.flags?.bypass?.active,\n\t\t\t},\n\t\t\tselection: undefined as string[] | undefined,\n\t\t};\n\n\t\tif (this.node.children_allowed() && this.node.children_controller) {\n\t\t\tdata['selection'] = this.node.children_controller.selection.to_json();\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tchildren_ids(): string[] {\n\t\treturn this.node.children().map((node) => node.graph_node_id);\n\t}\n\n\tinput_ids(): (string | undefined)[] {\n\t\treturn this.node.io.inputs.inputs().map((node) => (node != null ? node.graph_node_id : undefined));\n\t}\n\n\tconnection_input_indices() {\n\t\treturn this.node.io.connections\n\t\t\t.input_connections()\n\t\t\t?.map((connection) => (connection != null ? connection.output_index : undefined));\n\t}\n\tnamed_input_connections() {\n\t\treturn this.node.io.inputs.named_input_connection_points.map((i) => i.to_json());\n\t}\n\tnamed_output_connections() {\n\t\treturn this.node.io.outputs.named_output_connection_points.map((o) => o.to_json());\n\t}\n\n\tto_json_params_from_names(param_names: string[], include_components: boolean = false) {\n\t\treturn param_names.map((param_name) => {\n\t\t\treturn this.node.params.get(param_name)!.graph_node_id;\n\t\t});\n\t\t// const params_json_by_name: Dictionary<string> = {};\n\t\t// for (let param_name of param_names) {\n\t\t// \tconst param = this.node.params.get(param_name);\n\t\t// \tif (param) {\n\t\t// \t\tparams_json_by_name[param_name] = param.graph_node_id;\n\n\t\t// \t\tif (include_components && param.is_multiple && param.components) {\n\t\t// \t\t\tfor (let component of param.components) {\n\t\t// \t\t\t\tparams_json_by_name[component.name] = component.graph_node_id;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\t\t// return params_json_by_name;\n\t}\n\tto_json_params(include_components: boolean = false) {\n\t\treturn this.to_json_params_from_names(this.node.params.names, include_components);\n\t}\n\t// to_json_params_without_components(){\n\t// \treturn this.to_json_params(false)\n\t// }\n\t// to_json_params_with_components(){\n\t// \treturn this.to_json_params(true)\n\t// }\n\t// to_json_spare_params(include_components: boolean = false) {\n\t// \treturn this.to_json_params_from_names(this.node.params.spare_names, include_components);\n\t// }\n}\n","import {BooleanParam} from 'src/engine/params/Boolean';\nimport {ButtonParam} from 'src/engine/params/Button';\nimport {ColorParam} from 'src/engine/params/Color';\nimport {FloatParam} from 'src/engine/params/Float';\nimport {FolderParam} from '../Folder';\nimport {IntegerParam} from 'src/engine/params/Integer';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\nimport {RampParam} from 'src/engine/params/Ramp';\nimport {SeparatorParam} from 'src/engine/params/Separator';\nimport {StringParam} from 'src/engine/params/String';\nimport {Vector2Param} from 'src/engine/params/Vector2';\nimport {Vector3Param} from 'src/engine/params/Vector3';\nimport {Vector4Param} from 'src/engine/params/Vector4';\n\nimport {ParamType} from 'src/engine/poly/ParamType';\n\ntype ParamClassMapType = {[key in ParamType]: any};\nexport const ParamConstructorByType: ParamClassMapType = {\n\t[ParamType.BOOLEAN]: BooleanParam,\n\t[ParamType.BUTTON]: ButtonParam,\n\t[ParamType.COLOR]: ColorParam,\n\t[ParamType.FLOAT]: FloatParam,\n\t[ParamType.FOLDER]: FolderParam,\n\t[ParamType.INTEGER]: IntegerParam,\n\t[ParamType.OPERATOR_PATH]: OperatorPathParam,\n\t[ParamType.RAMP]: RampParam,\n\t[ParamType.SEPARATOR]: SeparatorParam,\n\t[ParamType.STRING]: StringParam,\n\t[ParamType.VECTOR2]: Vector2Param,\n\t[ParamType.VECTOR3]: Vector3Param,\n\t[ParamType.VECTOR4]: Vector4Param,\n};\n","import {BaseParamType} from '../_Base';\nimport {ExpressionManager} from 'src/engine/expressions/ExpressionManager';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {CoreEntity} from 'src/core/geometry/Entity';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamValuesTypeMap} from 'src/engine/params/types/ParamValuesTypeMap';\nimport {CoreObject} from 'src/core/geometry/Object';\n\n// type ParamTypeElem = ParamType;\ntype EntityCallback<T extends ParamType> = (\n\tentity: CoreEntity,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype PointEntityCallback<T extends ParamType> = (\n\tentity: CorePoint,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\ntype ObjectEntityCallback<T extends ParamType> = (\n\tentity: CoreObject,\n\tvalue: ParamValuesTypeMap[T] | any /*TODO: typescript: any is used here mostly to compile*/\n) => void;\n\nexport class ExpressionController<T extends ParamType> {\n\tprotected _expression: string | undefined;\n\tprotected _entities: CoreEntity[] | undefined;\n\tprotected _entity_callback: EntityCallback<T> | undefined;\n\tprotected _manager: ExpressionManager | undefined;\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active() {\n\t\treturn this._expression != null;\n\t}\n\tget expression() {\n\t\treturn this._expression;\n\t}\n\tget is_errored() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.is_errored;\n\t\t}\n\t\treturn false;\n\t}\n\tget error_message() {\n\t\tif (this._manager) {\n\t\t\treturn this._manager.error_message;\n\t\t}\n\t\treturn null;\n\t}\n\tget requires_entities() {\n\t\treturn this.param.options.is_expression_for_entities;\n\t}\n\tset_expression(expression: string | undefined, set_dirty: boolean = true) {\n\t\tif (this._expression != expression) {\n\t\t\tthis._expression = expression;\n\n\t\t\tif (this._expression) {\n\t\t\t\tthis._manager = this._manager || new ExpressionManager(this.param);\n\t\t\t\tthis._manager.parse_expression(this._expression);\n\t\t\t} else {\n\t\t\t\tif (this._manager) {\n\t\t\t\t\tthis._manager.reset();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (set_dirty) {\n\t\t\t\tthis.param.set_dirty();\n\t\t\t}\n\t\t}\n\t}\n\n\tupdate_from_method_dependency_name_change() {}\n\n\tasync compute_expression() {\n\t\tif (this._manager && this.active) {\n\t\t\treturn this._manager.compute_function();\n\t\t}\n\t}\n\tprivate async compute_expression_for_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis.set_entities(entities, callback);\n\t\ttry {\n\t\t\tawait this.compute_expression();\n\t\t} catch (e) {\n\t\t\tconsole.warn('expression evalution error');\n\t\t\tconsole.warn(e);\n\t\t\tthis.param.node.states.error.set(`expression evalution error: ${e}`);\n\t\t}\n\n\t\tthis.reset_entities();\n\t}\n\tcompute_expression_for_points(entities: CorePoint[], callback: PointEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tcompute_expression_for_objects(entities: CoreObject[], callback: ObjectEntityCallback<T>) {\n\t\treturn this.compute_expression_for_entities(entities, callback as EntityCallback<T>);\n\t}\n\tget entities() {\n\t\treturn this._entities;\n\t}\n\tget entity_callback() {\n\t\treturn this._entity_callback;\n\t}\n\tset_entities(entities: CoreEntity[], callback: EntityCallback<T>) {\n\t\tthis._entities = entities;\n\t\tthis._entity_callback = callback;\n\t}\n\treset_entities() {\n\t\tthis._entities = undefined;\n\t\tthis._entity_callback = undefined;\n\t}\n}\n","import lodash_isString from 'lodash/isString';\n\nimport jsep from 'jsep';\njsep.addUnaryOp('@');\n// self.jsep = jsep\nlet precedence = 10;\njsep.addBinaryOp('**', precedence);\n// precedence = 1\n// jsep.addBinaryOp('`', precedence)\n// const HOUDINI_QUOTE_CODE = 96; // houdini quote\n// const JSEP_COMPOUND = 'Compound'\nconst JSEP_IDENTIFIER = 'Identifier';\nconst JSEP_LITERAL = 'Literal';\n// const JSEP_BINARY_EXPRESSION = 'BynaryExpression'\nconst JSEP_CALL_EXPRESSION = 'CallExpression';\nconst STRING_EXPRESSION_SEPARATOR = '`';\n\nexport class ParsedTree {\n\tpublic node: jsep.Expression | undefined;\n\tpublic error_message: string | undefined;\n\n\tconstructor() {}\n\n\tparse_expression(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\t\t\tthis.node = jsep(string);\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\tparse_expression_for_string_param(string: string) {\n\t\ttry {\n\t\t\tthis.reset();\n\n\t\t\tconst elements = ParsedTree.string_value_elements(string);\n\t\t\tconst nodes = [];\n\t\t\tfor (let i = 0; i < elements.length; i++) {\n\t\t\t\tconst element = elements[i];\n\t\t\t\tlet node;\n\t\t\t\tif (i % 2 == 1) {\n\t\t\t\t\tnode = jsep(element);\n\t\t\t\t} else {\n\t\t\t\t\tnode = {\n\t\t\t\t\t\ttype: JSEP_LITERAL,\n\t\t\t\t\t\tvalue: `'${element}'`,\n\t\t\t\t\t\traw: `'${element}'`,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t\tnodes.push(node);\n\t\t\t\t// nodes.push({\n\t\t\t\t// \ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\t// \targuments: [node],\n\t\t\t\t// \tcallee: {\n\t\t\t\t// \t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t// \t\tname: 'toString',\n\t\t\t\t// \t}\n\t\t\t\t// })\n\t\t\t}\n\t\t\t// let last_plus_node;\n\t\t\t// for(let i=0; i<(nodes.length-1); i++){\n\t\t\t// \tconst plus_node = {\n\t\t\t// \t\ttype: JSEP_BINARY_EXPRESSION,\n\t\t\t// \t\toperator: '+',\n\t\t\t// \t\tleft: last_plus_node || nodes[i],\n\t\t\t// \t\tright: nodes[i+1],\n\t\t\t// \t}\n\t\t\t// \tlast_plus_node = plus_node;\n\t\t\t// }\n\t\t\t// this.node = last_plus_node\n\t\t\tthis.node = (<unknown>{\n\t\t\t\ttype: JSEP_CALL_EXPRESSION,\n\t\t\t\targuments: nodes,\n\t\t\t\tcallee: {\n\t\t\t\t\ttype: JSEP_IDENTIFIER,\n\t\t\t\t\tname: 'str_concat',\n\t\t\t\t},\n\t\t\t}) as jsep.Compound;\n\t\t} catch (e) {\n\t\t\tconst message = `could not parse the expression '${string}' (error: ${e})`;\n\t\t\tthis.error_message = message;\n\t\t}\n\t}\n\n\tstatic string_value_elements(v: string): string[] {\n\t\tif (v != null) {\n\t\t\tif (lodash_isString(v)) {\n\t\t\t\treturn v.split(STRING_EXPRESSION_SEPARATOR);\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\t// static string_value_contains_expression(v:string): boolean{\n\t// \treturn ((this.string_value_elements(v).length - 1) % 2) === 0;\n\t// }\n\n\t// deep_parse_for_string_expressions(){\n\t// \t// for string expressions which have more than a single `<expr>` element\n\t// \t// pt_`@ptnum`\n\t// \t// `@ptnum`_pt\n\t// \t// pt_`@ptnum`_`1+1`\n\t// \tif(this.node.type == JSEP_COMPOUND){\n\t// \t\tconst args = this.node.body\n\t// \t\tlet arg;\n\t// \t\tfor(let i=0; i<args.length; i++){\n\t// \t\t\targ = args[i]\n\t// \t\t\tif(arg.type == JSEP_LITERAL){\n\t// \t\t\t\tconst arg_node = jsep(arg.value)\n\t// \t\t\t\targs[i] = arg_node\n\t// \t\t\t}\n\t// \t\t}\n\t// \t} else {\n\t// \t\t// for string expressions which havea single `<expr>` element\n\t// \t\t// `@ptnum`\n\t// \t\tif(this.node.type == JSEP_LITERAL){\n\t// \t\t\tconst raw = this.node.raw\n\t// \t\t\tconst first_char_code = raw.charCodeAt(0)\n\t// \t\t\tconst last_char_code = raw.charCodeAt(raw.length-1)\n\t// \t\t\tif(first_char_code == HOUDINI_QUOTE_CODE && last_char_code == HOUDINI_QUOTE_CODE){\n\t// \t\t\t\tthis.node = jsep(\"''+\"+this.node.value) // add the prefix ''+ to ensure we have a string as a result, and not a number\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate reset() {\n\t\tthis.node = undefined;\n\t\tthis.error_message = undefined;\n\t}\n}\n","// https://gist.github.com/gre/1650294\n\n// const ease_in = function(t:number, power:number){return Math.pow(t, power)}\n// const ease_on = function(t:number, power:number){return 1 - Math.abs(Math.pow(t-1, power))}\n// const ease_ion = function(t:number, power:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}\n\nconst ease_i = function(power:number){return function(t:number){return Math.pow(t, power)}};\nconst ease_o = function(power:number){return function(t:number){return 1 - Math.abs(Math.pow(t-1, power))}};\nconst ease_io = function(power:number){return function(t:number){return t<.5 ? ease_i(power)(t*2)/2 : ease_o(power)(t*2 - 1)/2+0.5}}\n\nexport const Easing = {\n  linear: ease_io(1),\n\n  ease_i: function(t:number, power:number){ return ease_i(power)(t) },\n  ease_o: function(t:number, power:number){ return ease_o(power)(t) },\n  ease_io: function(t:number, power:number){ return ease_io(power)(t) },\n\n  ease_i2: ease_i(2),\n  ease_o2: ease_o(2),\n  ease_io2: ease_io(2),\n\n  ease_i3: ease_io(3),\n  ease_o3: ease_io(3),\n  ease_io3: ease_io(3),\n\n  ease_i4: ease_io(4),\n  ease_o4: ease_io(4),\n  ease_io4: ease_io(4),\n  // easeInQuart: EaseIn(4),\n  // easeOutQuart: EaseOut(4),\n  // easeInOutQuart: EaseInOut(4),\n  // easeInQuint: EaseIn(5),\n  // easeOutQuint: EaseOut(5),\n  // easeInOutQuint: EaseInOut(5)\n\n  ease_i_sin: function(t:number){ return 1 + Math.sin(Math.PI / 2 * t - Math.PI / 2); },\n  ease_o_sin: function(t:number){ return Math.sin(Math.PI / 2 * t); },\n  ease_io_sin: function(t:number){ return (1 + Math.sin(Math.PI * t - Math.PI / 2)) / 2; },\n\n  ease_i_elastic: function (t:number) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n  ease_o_elastic: function (t:number) { return .04 * t / (--t) * Math.sin(25 * t) },\n  ease_io_elastic: function (t:number) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n}\n\n// export class Easing {\n//   // no easing, no acceleration\n//   static linear(t:number):number{ return t }\n//   // accelerating from zero velocity\n//   static easeinquad (t:number):number{ return t*t }\n//   // decelerating to zero velocity\n//   static easeoutquad (t:number):number{ return t*(2-t) }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquad (t:number):number{ return t<.5 ? 2*t*t : -1+(4-2*t)*t }\n//   // accelerating from zero velocity\n//   static easeincubic (t:number):number{ return t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutcubic (t:number):number{ return (--t)*t*t+1 }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutcubic (t:number):number{ return t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1 }\n//   // accelerating from zero velocity\n//   static easeinquart (t:number):number{ return t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquart (t:number):number{ return 1-(--t)*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquart (t:number):number{ return t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t }\n//   // accelerating from zero velocity\n//   static easeinquint (t:number):number{ return t*t*t*t*t }\n//   // decelerating to zero velocity\n//   static easeoutquint (t:number):number{ return 1+(--t)*t*t*t*t }\n//   // acceleration until halfway, then deceleration\n//   static easeinoutquint (t:number):number{ return t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t }\n// }","import {BaseNodeType} from 'src/engine/nodes/_Base';\n\ntype FlagHookCallback = () => void;\n\nexport class BaseFlag {\n\t// protected _available_states: [boolean, boolean] = [];\n\tprotected _state: boolean = true;\n\tprotected _hooks: FlagHookCallback[] | null = null;\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// set_available_states(states: T[]) {}\n\tadd_hook(hook: FlagHookCallback) {\n\t\tthis._hooks = this._hooks || [];\n\t\tthis._hooks.push(hook);\n\t}\n\tprotected on_update() {}\n\tset(new_state: boolean) {\n\t\tif (this._state != new_state) {\n\t\t\tthis._state = new_state;\n\t\t\tthis.on_update();\n\t\t\tthis.run_hooks();\n\t\t}\n\t}\n\tget active() {\n\t\treturn this._state;\n\t}\n\ttoggle() {\n\t\tthis.set(!this._state);\n\t}\n\trun_hooks() {\n\t\tif (this._hooks) {\n\t\t\tfor (let hook of this._hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {EventDispatcher} from 'three/src/core/EventDispatcher';\nimport {MOUSE} from 'three/src/constants';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Spherical} from 'three/src/math/Spherical';\nimport {TOUCH} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\n/**\n * @author qiao / https://github.com/qiao\n * @author mrdoob / http://mrdoob.com\n * @author alteredq / http://alteredqualia.com/\n * @author WestLangley / http://github.com/WestLangley\n * @author erich666 / http://erichaines.com\n * @author ScieCode / http://github.com/sciecode\n */\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nvar OrbitControls = function ( object, domElement ) {\n\n\tif ( domElement === undefined ) console.warn( 'THREE.OrbitControls: The second parameter \"domElement\" is now mandatory.' );\n\tif ( domElement === document ) console.error( 'THREE.OrbitControls: \"document\" should not be used as the target \"domElement\". Please use \"renderer.domElement\" instead.' );\n\n\tthis.object = object;\n\tthis.domElement = domElement;\n\n\t// Set to false to disable this control\n\tthis.enabled = true;\n\n\t// \"target\" sets the location of focus, where the object orbits around\n\tthis.target = new Vector3();\n\n\t// How far you can dolly in and out ( PerspectiveCamera only )\n\tthis.minDistance = 0;\n\tthis.maxDistance = Infinity;\n\n\t// How far you can zoom in and out ( OrthographicCamera only )\n\tthis.minZoom = 0;\n\tthis.maxZoom = Infinity;\n\n\t// How far you can orbit vertically, upper and lower limits.\n\t// Range is 0 to Math.PI radians.\n\tthis.minPolarAngle = 0; // radians\n\tthis.maxPolarAngle = Math.PI; // radians\n\n\t// How far you can orbit horizontally, upper and lower limits.\n\t// If set, must be a sub-interval of the interval [ - Math.PI, Math.PI ].\n\tthis.minAzimuthAngle = - Infinity; // radians\n\tthis.maxAzimuthAngle = Infinity; // radians\n\n\t// Set to true to enable damping (inertia)\n\t// If damping is enabled, you must call controls.update() in your animation loop\n\tthis.enableDamping = false;\n\tthis.dampingFactor = 0.05;\n\n\t// This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n\t// Set to false to disable zooming\n\tthis.enableZoom = true;\n\tthis.zoomSpeed = 1.0;\n\n\t// Set to false to disable rotating\n\tthis.enableRotate = true;\n\tthis.rotateSpeed = 1.0;\n\n\t// Set to false to disable panning\n\tthis.enablePan = true;\n\tthis.panSpeed = 1.0;\n\tthis.screenSpacePanning = false; // if true, pan in screen-space\n\tthis.keyPanSpeed = 7.0;\t// pixels moved per arrow key push\n\n\t// Set to true to automatically rotate around the target\n\t// If auto-rotate is enabled, you must call controls.update() in your animation loop\n\tthis.autoRotate = false;\n\tthis.autoRotateSpeed = 2.0; // 30 seconds per round when fps is 60\n\n\t// Set to false to disable use of the keys\n\tthis.enableKeys = true;\n\n\t// The four arrow keys\n\tthis.keys = { LEFT: 37, UP: 38, RIGHT: 39, BOTTOM: 40 };\n\n\t// Mouse buttons\n\tthis.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n\t// Touch fingers\n\tthis.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n\t// for reset\n\tthis.target0 = this.target.clone();\n\tthis.position0 = this.object.position.clone();\n\tthis.zoom0 = this.object.zoom;\n\n\t//\n\t// public methods\n\t//\n\n\tthis.getPolarAngle = function () {\n\n\t\treturn spherical.phi;\n\n\t};\n\n\tthis.getAzimuthalAngle = function () {\n\n\t\treturn spherical.theta;\n\n\t};\n\n\tthis.saveState = function () {\n\n\t\tscope.target0.copy( scope.target );\n\t\tscope.position0.copy( scope.object.position );\n\t\tscope.zoom0 = scope.object.zoom;\n\n\t};\n\n\tthis.reset = function () {\n\n\t\tscope.target.copy( scope.target0 );\n\t\tscope.object.position.copy( scope.position0 );\n\t\tscope.object.zoom = scope.zoom0;\n\n\t\tscope.object.updateProjectionMatrix();\n\t\tscope.dispatchEvent( changeEvent );\n\n\t\tscope.update();\n\n\t\tstate = STATE.NONE;\n\n\t};\n\n\t// this method is exposed, but perhaps it would be better if we can make it private...\n\tthis.update = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\t// so camera.up is the orbit axis\n\t\tvar quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n\t\tvar quatInverse = quat.clone().inverse();\n\n\t\tvar lastPosition = new Vector3();\n\t\tvar lastQuaternion = new Quaternion();\n\n\t\treturn function update() {\n\n\t\t\tvar position = scope.object.position;\n\n\t\t\toffset.copy( position ).sub( scope.target );\n\n\t\t\t// rotate offset to \"y-axis-is-up\" space\n\t\t\toffset.applyQuaternion( quat );\n\n\t\t\t// angle from z-axis around y-axis\n\t\t\tspherical.setFromVector3( offset );\n\n\t\t\tif ( scope.autoRotate && state === STATE.NONE ) {\n\n\t\t\t\trotateLeft( getAutoRotationAngle() );\n\n\t\t\t}\n\n\t\t\tif ( scope.enableDamping ) {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta * scope.dampingFactor;\n\t\t\t\tspherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n\t\t\t} else {\n\n\t\t\t\tspherical.theta += sphericalDelta.theta;\n\t\t\t\tspherical.phi += sphericalDelta.phi;\n\n\t\t\t}\n\n\t\t\t// restrict theta to be between desired limits\n\t\t\tspherical.theta = Math.max( scope.minAzimuthAngle, Math.min( scope.maxAzimuthAngle, spherical.theta ) );\n\n\t\t\t// restrict phi to be between desired limits\n\t\t\tspherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n\t\t\tspherical.makeSafe();\n\n\n\t\t\tspherical.radius *= scale;\n\n\t\t\t// restrict radius to be between desired limits\n\t\t\tspherical.radius = Math.max( scope.minDistance, Math.min( scope.maxDistance, spherical.radius ) );\n\n\t\t\t// move target to panned location\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tscope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tscope.target.add( panOffset );\n\n\t\t\t}\n\n\t\t\toffset.setFromSpherical( spherical );\n\n\t\t\t// rotate offset back to \"camera-up-vector-is-up\" space\n\t\t\toffset.applyQuaternion( quatInverse );\n\n\t\t\tposition.copy( scope.target ).add( offset );\n\n\t\t\tscope.object.lookAt( scope.target );\n\n\t\t\tif ( scope.enableDamping === true ) {\n\n\t\t\t\tsphericalDelta.theta *= ( 1 - scope.dampingFactor );\n\t\t\t\tsphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n\t\t\t\tpanOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n\t\t\t} else {\n\n\t\t\t\tsphericalDelta.set( 0, 0, 0 );\n\n\t\t\t\tpanOffset.set( 0, 0, 0 );\n\n\t\t\t}\n\n\t\t\tscale = 1;\n\n\t\t\t// update condition is:\n\t\t\t// min(camera displacement, camera rotation in radians)^2 > EPS\n\t\t\t// using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n\t\t\tif ( zoomChanged ||\n\t\t\t\tlastPosition.distanceToSquared( scope.object.position ) > EPS ||\n\t\t\t\t8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ) {\n\n\t\t\t\tscope.dispatchEvent( changeEvent );\n\n\t\t\t\tlastPosition.copy( scope.object.position );\n\t\t\t\tlastQuaternion.copy( scope.object.quaternion );\n\t\t\t\tzoomChanged = false;\n\n\t\t\t\treturn true;\n\n\t\t\t}\n\n\t\t\treturn false;\n\n\t\t};\n\n\t}();\n\n\tthis.dispose = function () {\n\n\t\tscope.domElement.removeEventListener( 'contextmenu', onContextMenu, false );\n\t\tscope.domElement.removeEventListener( 'mousedown', onMouseDown, false );\n\t\tscope.domElement.removeEventListener( 'wheel', onMouseWheel, false );\n\n\t\tscope.domElement.removeEventListener( 'touchstart', onTouchStart, false );\n\t\tscope.domElement.removeEventListener( 'touchend', onTouchEnd, false );\n\t\tscope.domElement.removeEventListener( 'touchmove', onTouchMove, false );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.domElement.removeEventListener( 'keydown', onKeyDown, false );\n\n\t\t//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?\n\n\t};\n\n\t//\n\t// internals\n\t//\n\n\tvar scope = this;\n\n\tvar changeEvent = { type: 'change' };\n\tvar startEvent = { type: 'start' };\n\tvar endEvent = { type: 'end' };\n\n\tvar STATE = {\n\t\tNONE: - 1,\n\t\tROTATE: 0,\n\t\tDOLLY: 1,\n\t\tPAN: 2,\n\t\tTOUCH_ROTATE: 3,\n\t\tTOUCH_PAN: 4,\n\t\tTOUCH_DOLLY_PAN: 5,\n\t\tTOUCH_DOLLY_ROTATE: 6\n\t};\n\n\tvar state = STATE.NONE;\n\n\tvar EPS = 0.000001;\n\n\t// current position in spherical coordinates\n\tvar spherical = new Spherical();\n\tvar sphericalDelta = new Spherical();\n\n\tvar scale = 1;\n\tvar panOffset = new Vector3();\n\tvar zoomChanged = false;\n\n\tvar rotateStart = new Vector2();\n\tvar rotateEnd = new Vector2();\n\tvar rotateDelta = new Vector2();\n\n\tvar panStart = new Vector2();\n\tvar panEnd = new Vector2();\n\tvar panDelta = new Vector2();\n\n\tvar dollyStart = new Vector2();\n\tvar dollyEnd = new Vector2();\n\tvar dollyDelta = new Vector2();\n\n\tfunction getAutoRotationAngle() {\n\n\t\treturn 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n\t}\n\n\tfunction getZoomScale() {\n\n\t\treturn Math.pow( 0.95, scope.zoomSpeed );\n\n\t}\n\n\tfunction rotateLeft( angle ) {\n\n\t\tsphericalDelta.theta -= angle;\n\n\t}\n\n\tfunction rotateUp( angle ) {\n\n\t\tsphericalDelta.phi -= angle;\n\n\t}\n\n\tvar panLeft = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panLeft( distance, objectMatrix ) {\n\n\t\t\tv.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n\t\t\tv.multiplyScalar( - distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\tvar panUp = function () {\n\n\t\tvar v = new Vector3();\n\n\t\treturn function panUp( distance, objectMatrix ) {\n\n\t\t\tif ( scope.screenSpacePanning === true ) {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 1 );\n\n\t\t\t} else {\n\n\t\t\t\tv.setFromMatrixColumn( objectMatrix, 0 );\n\t\t\t\tv.crossVectors( scope.object.up, v );\n\n\t\t\t}\n\n\t\t\tv.multiplyScalar( distance );\n\n\t\t\tpanOffset.add( v );\n\n\t\t};\n\n\t}();\n\n\t// deltaX and deltaY are in pixels; right and down are positive\n\tvar pan = function () {\n\n\t\tvar offset = new Vector3();\n\n\t\treturn function pan( deltaX, deltaY ) {\n\n\t\t\tvar element = scope.domElement;\n\n\t\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\t\t// perspective\n\t\t\t\tvar position = scope.object.position;\n\t\t\t\toffset.copy( position ).sub( scope.target );\n\t\t\t\tvar targetDistance = offset.length();\n\n\t\t\t\t// half of the fov is center to top of screen\n\t\t\t\ttargetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n\t\t\t\t// we use only clientHeight here so aspect ratio does not distort speed\n\t\t\t\tpanLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n\t\t\t\tpanUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\t\t// orthographic\n\t\t\t\tpanLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );\n\t\t\t\tpanUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );\n\n\t\t\t} else {\n\n\t\t\t\t// camera neither orthographic nor perspective\n\t\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n\t\t\t\tscope.enablePan = false;\n\n\t\t\t}\n\n\t\t};\n\n\t}();\n\n\tfunction dollyIn( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale /= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom * dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\tfunction dollyOut( dollyScale ) {\n\n\t\tif ( scope.object.isPerspectiveCamera ) {\n\n\t\t\tscale *= dollyScale;\n\n\t\t} else if ( scope.object.isOrthographicCamera ) {\n\n\t\t\tscope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / dollyScale ) );\n\t\t\tscope.object.updateProjectionMatrix();\n\t\t\tzoomChanged = true;\n\n\t\t} else {\n\n\t\t\tconsole.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n\t\t\tscope.enableZoom = false;\n\n\t\t}\n\n\t}\n\n\t//\n\t// event callbacks - update the object state\n\t//\n\n\tfunction handleMouseDownRotate( event ) {\n\n\t\trotateStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownDolly( event ) {\n\n\t\tdollyStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseDownPan( event ) {\n\n\t\tpanStart.set( event.clientX, event.clientY );\n\n\t}\n\n\tfunction handleMouseMoveRotate( event ) {\n\n\t\trotateEnd.set( event.clientX, event.clientY );\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMoveDolly( event ) {\n\n\t\tdollyEnd.set( event.clientX, event.clientY );\n\n\t\tdollyDelta.subVectors( dollyEnd, dollyStart );\n\n\t\tif ( dollyDelta.y > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t} else if ( dollyDelta.y < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t}\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseMovePan( event ) {\n\n\t\tpanEnd.set( event.clientX, event.clientY );\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleMouseUp( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\tfunction handleMouseWheel( event ) {\n\n\t\tif ( event.deltaY < 0 ) {\n\n\t\t\tdollyOut( getZoomScale() );\n\n\t\t} else if ( event.deltaY > 0 ) {\n\n\t\t\tdollyIn( getZoomScale() );\n\n\t\t}\n\n\t\tscope.update();\n\n\t}\n\n\tfunction handleKeyDown( event ) {\n\n\t\tvar needsUpdate = false;\n\n\t\tswitch ( event.keyCode ) {\n\n\t\t\tcase scope.keys.UP:\n\t\t\t\tpan( 0, scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.BOTTOM:\n\t\t\t\tpan( 0, - scope.keyPanSpeed );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.LEFT:\n\t\t\t\tpan( scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t\tcase scope.keys.RIGHT:\n\t\t\t\tpan( - scope.keyPanSpeed, 0 );\n\t\t\t\tneedsUpdate = true;\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( needsUpdate ) {\n\n\t\t\t// prevent the browser from scrolling on cursor keys\n\t\t\tevent.preventDefault();\n\n\t\t\tscope.update();\n\n\t\t}\n\n\n\t}\n\n\tfunction handleTouchStartRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartPan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanStart.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanStart.set( x, y );\n\n\t\t}\n\n\t}\n\n\tfunction handleTouchStartDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyStart.set( 0, distance );\n\n\t}\n\n\tfunction handleTouchStartDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchStartPan( event );\n\n\t}\n\n\tfunction handleTouchStartDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchStartDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchStartRotate( event );\n\n\t}\n\n\tfunction handleTouchMoveRotate( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\trotateEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\trotateEnd.set( x, y );\n\n\t\t}\n\n\t\trotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n\t\tvar element = scope.domElement;\n\n\t\trotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n\t\trotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n\t\trotateStart.copy( rotateEnd );\n\n\t}\n\n\tfunction handleTouchMovePan( event ) {\n\n\t\tif ( event.touches.length == 1 ) {\n\n\t\t\tpanEnd.set( event.touches[ 0 ].pageX, event.touches[ 0 ].pageY );\n\n\t\t} else {\n\n\t\t\tvar x = 0.5 * ( event.touches[ 0 ].pageX + event.touches[ 1 ].pageX );\n\t\t\tvar y = 0.5 * ( event.touches[ 0 ].pageY + event.touches[ 1 ].pageY );\n\n\t\t\tpanEnd.set( x, y );\n\n\t\t}\n\n\t\tpanDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n\t\tpan( panDelta.x, panDelta.y );\n\n\t\tpanStart.copy( panEnd );\n\n\t}\n\n\tfunction handleTouchMoveDolly( event ) {\n\n\t\tvar dx = event.touches[ 0 ].pageX - event.touches[ 1 ].pageX;\n\t\tvar dy = event.touches[ 0 ].pageY - event.touches[ 1 ].pageY;\n\n\t\tvar distance = Math.sqrt( dx * dx + dy * dy );\n\n\t\tdollyEnd.set( 0, distance );\n\n\t\tdollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n\t\tdollyIn( dollyDelta.y );\n\n\t\tdollyStart.copy( dollyEnd );\n\n\t}\n\n\tfunction handleTouchMoveDollyPan( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enablePan ) handleTouchMovePan( event );\n\n\t}\n\n\tfunction handleTouchMoveDollyRotate( event ) {\n\n\t\tif ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n\t\tif ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n\t}\n\n\tfunction handleTouchEnd( /*event*/ ) {\n\n\t\t// no-op\n\n\t}\n\n\t//\n\t// event handlers - FSM: listen for events and reset state\n\t//\n\n\tfunction onMouseDown( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\t// Prevent the browser from scrolling.\n\n\t\tevent.preventDefault();\n\n\t\t// Manually set the focus since calling preventDefault above\n\t\t// prevents the browser from setting it automatically.\n\n\t\tscope.domElement.focus ? scope.domElement.focus() : window.focus();\n\n\t\tswitch ( event.button ) {\n\n\t\t\tcase 0:\n\n\t\t\t\tswitch ( scope.mouseButtons.LEFT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n\t\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.mouseButtons.MIDDLE ) {\n\n\t\t\t\t\tcase MOUSE.DOLLY:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\t\t\thandleMouseDownDolly( event );\n\n\t\t\t\t\t\tstate = STATE.DOLLY;\n\n\t\t\t\t\t\tbreak;\n\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.mouseButtons.RIGHT ) {\n\n\t\t\t\t\tcase MOUSE.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleMouseDownRotate( event );\n\n\t\t\t\t\t\tstate = STATE.ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase MOUSE.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleMouseDownPan( event );\n\n\t\t\t\t\t\tstate = STATE.PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tdocument.addEventListener( 'mousemove', onMouseMove, false );\n\t\t\tdocument.addEventListener( 'mouseup', onMouseUp, false );\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onMouseMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleMouseMoveRotate( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.DOLLY:\n\n\t\t\t\tif ( scope.enableZoom === false ) return;\n\n\t\t\t\thandleMouseMoveDolly( event );\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleMouseMovePan( event );\n\n\t\t\t\tbreak;\n\n\t\t}\n\n\t}\n\n\tfunction onMouseUp( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleMouseUp( event );\n\n\t\tdocument.removeEventListener( 'mousemove', onMouseMove, false );\n\t\tdocument.removeEventListener( 'mouseup', onMouseUp, false );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onMouseWheel( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableZoom === false || ( state !== STATE.NONE && state !== STATE.ROTATE ) ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tscope.dispatchEvent( startEvent );\n\n\t\thandleMouseWheel( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t}\n\n\tfunction onKeyDown( event ) {\n\n\t\tif ( scope.enabled === false || scope.enableKeys === false || scope.enablePan === false ) return;\n\n\t\thandleKeyDown( event );\n\n\t}\n\n\tfunction onTouchStart( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t\tswitch ( event.touches.length ) {\n\n\t\t\tcase 1:\n\n\t\t\t\tswitch ( scope.touches.ONE ) {\n\n\t\t\t\t\tcase TOUCH.ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.PAN:\n\n\t\t\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tcase 2:\n\n\t\t\t\tswitch ( scope.touches.TWO ) {\n\n\t\t\t\t\tcase TOUCH.DOLLY_PAN:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyPan( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_PAN;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase TOUCH.DOLLY_ROTATE:\n\n\t\t\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\t\t\thandleTouchStartDollyRotate( event );\n\n\t\t\t\t\t\tstate = STATE.TOUCH_DOLLY_ROTATE;\n\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tstate = STATE.NONE;\n\n\t\t\t\t}\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t\tif ( state !== STATE.NONE ) {\n\n\t\t\tscope.dispatchEvent( startEvent );\n\n\t\t}\n\n\t}\n\n\tfunction onTouchMove( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\t\tevent.stopPropagation();\n\n\t\tswitch ( state ) {\n\n\t\t\tcase STATE.TOUCH_ROTATE:\n\n\t\t\t\tif ( scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_PAN:\n\n\t\t\t\tif ( scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMovePan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_PAN:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n\t\t\t\thandleTouchMoveDollyPan( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tcase STATE.TOUCH_DOLLY_ROTATE:\n\n\t\t\t\tif ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n\t\t\t\thandleTouchMoveDollyRotate( event );\n\n\t\t\t\tscope.update();\n\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\n\t\t\t\tstate = STATE.NONE;\n\n\t\t}\n\n\t}\n\n\tfunction onTouchEnd( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\thandleTouchEnd( event );\n\n\t\tscope.dispatchEvent( endEvent );\n\n\t\tstate = STATE.NONE;\n\n\t}\n\n\tfunction onContextMenu( event ) {\n\n\t\tif ( scope.enabled === false ) return;\n\n\t\tevent.preventDefault();\n\n\t}\n\n\t//\n\n\tscope.domElement.addEventListener( 'contextmenu', onContextMenu, false );\n\n\tscope.domElement.addEventListener( 'mousedown', onMouseDown, false );\n\tscope.domElement.addEventListener( 'wheel', onMouseWheel, false );\n\n\tscope.domElement.addEventListener( 'touchstart', onTouchStart, false );\n\tscope.domElement.addEventListener( 'touchend', onTouchEnd, false );\n\tscope.domElement.addEventListener( 'touchmove', onTouchMove, false );\n\n\tscope.domElement.addEventListener( 'keydown', onKeyDown, false );\n\n\t// make sure element can receive keys.\n\n\tif ( scope.domElement.tabIndex === - 1 ) {\n\n\t\tscope.domElement.tabIndex = 0;\n\n\t}\n\n\t// force an update at start\n\n\tthis.update();\n\n};\n\nOrbitControls.prototype = Object.create( EventDispatcher.prototype );\nOrbitControls.prototype.constructor = OrbitControls;\n\n\n// This set of controls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n// This is very similar to OrbitControls, another set of touch behavior\n//\n//    Orbit - right mouse, or left mouse + ctrl/meta/shiftKey / touch: two-finger rotate\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - left mouse, or arrow keys / touch: one-finger move\n\nvar MapControls = function ( object, domElement ) {\n\n\tOrbitControls.call( this, object, domElement );\n\n\tthis.mouseButtons.LEFT = MOUSE.PAN;\n\tthis.mouseButtons.RIGHT = MOUSE.ROTATE;\n\n\tthis.touches.ONE = TOUCH.PAN;\n\tthis.touches.TWO = TOUCH.DOLLY_ROTATE;\n\n};\n\nMapControls.prototype = Object.create( EventDispatcher.prototype );\nMapControls.prototype.constructor = MapControls;\n\nexport { OrbitControls, MapControls };\n","import {TypedGlNode} from './_Base';\n// import {ParamType} from 'src/Engine/Param/_Module';\n// import {Connection} from './GlData';\n// import {Definition} from './Definition/_Module';\n// import {ShaderName} from './Assembler/Util/CodeBuilder';\n\n// list of globals\n// https://www.khronos.org/opengl/wiki/Built-in_Variable_(GLSL)\n// gl_PointCoord\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass GlobalsGlParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new GlobalsGlParamsConfig();\n\nexport class GlobalsGlNode extends TypedGlNode<GlobalsGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'globals';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_globals_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (lines_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller?.assembler.set_node_lines_globals(this, shaders_collection_controller);\n\t\t// }\n\t\t// const vertex_definitions = []\n\t\t// const fragment_definitions = []\n\t\t// const definitions = []\n\t\t// // const vertex_body_lines = []\n\t\t// const fragment_body_lines = []\n\t\t// const body_lines = []\n\n\t\t// const shader_config = this.shader_config(this._shader_name)\n\t\t// const dependencies = shader_config.dependencies()\n\n\t\t// const definitions_by_shader_name = {}\n\t\t// definitions_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ definitions_by_shader_name[dependency] = [] }\n\n\t\t// const body_lines_by_shader_name = {}\n\t\t// body_lines_by_shader_name[this._shader_name] = []\n\t\t// for(let dependency of dependencies){ body_lines_by_shader_name[dependency] = [] }\n\n\t\t// let definition\n\t\t// let body_line\n\t\t// for(let output_name of this.used_output_names()){\n\t\t// \tconst var_name = this.gl_var_name(output_name)\n\n\t\t// \tswitch (output_name){\n\t\t// \t\tcase 'frame':\n\t\t// \t\t\tdefinition = new Definition.Uniform(this, 'float', output_name)\n\t\t// \t\t\t// vertex_definitions.push(definition)\n\t\t// \t\t\t// fragment_definitions.push(definition)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `float ${var_name} = ${output_name}`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\n\t\t// \t\t\t// vertex_body_lines.push(`float ${var_name} = ${output_name}`)\n\t\t// \t\t\tbody_lines.push(body_line)\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_FragCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tfragment_body_lines.push(`vec4 ${var_name} = gl_FragCoord`)\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tcase 'gl_PointCoord':\n\t\t// \t\t\tif( this._shader_name == ShaderName.FRAGMENT ){\n\t\t// \t\t\t\tif(this.parent().is_point_material()){\n\t\t// \t\t\t\t\tfragment_body_lines.push(`vec2 ${var_name} = gl_PointCoord`)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\t\t// \t\t\tbreak;\n\t\t// \t\tdefault:\n\t\t// \t\t\tconst named_output = this.named_output_by_name(output_name)\n\t\t// \t\t\tconst gl_type = named_output.gl_type()\n\t\t// \t\t\tdefinition = new Definition.Varying(this, gl_type, var_name)\n\t\t// \t\t\tdefinitions_by_shader_name[this._shader_name].push(definition)\n\n\t\t// \t\t\tbody_line = `${var_name} = vec3(${output_name})`\n\t\t// \t\t\tfor(let dependency of dependencies){\n\t\t// \t\t\t\tdefinitions_by_shader_name[dependency].push(definition)\n\t\t// \t\t\t\tbody_lines_by_shader_name[dependency].push(body_line)\n\t\t// \t\t\t}\n\t\t// \t\t\tif(dependencies.length == 0){\n\t\t// \t\t\t\tbody_lines.push(body_line)\n\t\t// \t\t\t}\n\t\t// \t}\n\t\t// }\n\t\t// // this.set_vertex_definitions(vertex_definitions)\n\t\t// // this.set_fragment_definitions(fragment_definitions)\n\t\t// for(let shader_name of Object.keys(definitions_by_shader_name)){\n\t\t// \tthis.set_definitions(definitions_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// for(let shader_name of Object.keys(body_lines_by_shader_name)){\n\t\t// \tthis.add_body_lines(body_lines_by_shader_name[shader_name], shader_name)\n\t\t// }\n\t\t// // this.add_definitions(definitions)\n\t\t// // this.set_vertex_body_lines(vertex_body_lines)\n\t\t// // this.set_fragment_body_lines(fragment_body_lines)\n\n\t\t// this.add_body_lines(body_lines)\n\t}\n}\n","import {TypedGLDefinition, GLDefinitionType} from './GLDefinition';\n\nexport class TypedGLDefinitionCollection<T extends GLDefinitionType> {\n\t_errored: boolean = false;\n\t_error_message: string | undefined;\n\n\tconstructor(private _definitions: TypedGLDefinition<T>[] = []) {}\n\n\tget errored() {\n\t\treturn this._errored;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tuniq(): TypedGLDefinition<T>[] {\n\t\tconst definitions_by_name: Map<string, TypedGLDefinition<T>> = new Map();\n\t\tconst names: string[] = [];\n\n\t\tfor (let definition of this._definitions) {\n\t\t\tif (!this._errored) {\n\t\t\t\tconst name = definition.name;\n\t\t\t\tconst existing = definitions_by_name.get(name);\n\t\t\t\tif (existing) {\n\t\t\t\t\tif (existing.data_type != definition.data_type) {\n\t\t\t\t\t\tthis._errored = true;\n\t\t\t\t\t\tthis._error_message = `attempt to create ${definition.name} with types ${definition.data_type}`;\n\t\t\t\t\t\tconsole.warn('emitting error message', this._error_message);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tdefinitions_by_name.set(name, definition);\n\t\t\t\t\tnames.push(name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst uniq_definitions: TypedGLDefinition<T>[] = [];\n\t\tfor (let name of names) {\n\t\t\tconst definition = definitions_by_name.get(name);\n\t\t\tif (definition) {\n\t\t\t\tuniq_definitions.push(definition);\n\t\t\t}\n\t\t}\n\t\t// sorting may make dependencies be declared after the function calling them\n\t\t// const sorted_definitions = lodash_sortBy(uniq_definitions, (d)=>d.name())\n\t\treturn uniq_definitions;\n\t}\n}\n","import {ParamConfig} from '../configs/ParamConfig';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamInitValuesTypeMap} from 'src/engine/params/types/ParamInitValuesTypeMap';\n\nexport class ParamConfigsController {\n\tprivate _param_configs: ParamConfig<ParamType>[] = [];\n\n\treset() {\n\t\tthis._param_configs = [];\n\t}\n\n\tpush(param_config: ParamConfig<ParamType>) {\n\t\tthis._param_configs.push(param_config);\n\t}\n\tcreate_and_push<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tdefault_value: ParamInitValuesTypeMap[T],\n\t\tuniform_name: string\n\t) {\n\t\tconst param_config = new ParamConfig(type, name, default_value, uniform_name);\n\t\tthis._param_configs.push(param_config);\n\t}\n\n\tget list(): Readonly<ParamConfig<ParamType>[]> {\n\t\treturn this._param_configs;\n\t}\n}\n","import lodash_isNaN from 'lodash/isNaN';\nimport {Camera} from 'three/src/cameras/Camera';\n\nimport {CoreTransform} from 'src/core/Transform';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {ControlsController} from './utils/cameras/ControlsController';\nimport {LayersController} from './utils/LayersController';\nimport {PostProcessController} from './utils/cameras/PostProcessController';\n\n// import {Dirtyable} from './Concerns/Dirtyable';\n// import {Layers} from './Concerns/Layers';\n// import {PostProcess} from './Concerns/PostProcess';\n// import {Transformed} from './Concerns/Transformed';\n// import {Background} from './Concerns/Background';\n// import {CoreTextureLoader} from 'src/Core/Loader/Texture'\n// import {CameraControls} from './Concerns/CameraControls';\n// import {File} from 'src/Engine/Node/Cop/File'\nimport {ThreejsViewer} from 'src/engine/viewers/Threejs';\nimport {BaseBackgroundController} from './utils/cameras/background/_BaseController';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\nexport interface OrthoOrPerspCamera extends Camera {\n\tnear: number;\n\tfar: number;\n\tupdateProjectionMatrix: () => void;\n\tgetFocalLength?: () => void;\n}\n\nconst EVENT_CHANGE = {type: 'change'};\n\nexport const BASE_CAMERA_DEFAULT = {\n\tnear: 1.0,\n\tfar: 100.0,\n};\n\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {BaseNodeType} from '../_Base';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\nimport {TypedObjNode} from './_Base';\n\nexport function CameraTransformParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcamera = ParamConfig.FOLDER();\n\t\tcontrols = ParamConfig.OPERATOR_PATH('', {\n\t\t\tnode_selection: {\n\t\t\t\tcontext: NodeContext.EVENT,\n\t\t\t},\n\t\t});\n\t\t// add transform params\n\t\t// t = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// r = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// s = ParamConfig.VECTOR3([1, 1, 1]);\n\t\t// scale = ParamConfig.FLOAT(1);\n\t\ttarget = ParamConfig.VECTOR3([0, 0, 0], {cook: false});\n\t\tnear = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t\tfar = ParamConfig.FLOAT(BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t\t// aspect = ParamConfig.FLOAT(1);\n\t\t// lock_width = ParamConfig.BOOLEAN(1);\n\t\t// look_at = ParamConfig.OPERATOR_PATH('');\n\n\t\tset_master_camera = ParamConfig.BUTTON(null, {\n\t\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\t\tBaseCameraObjNodeClass.PARAM_CALLBACK_set_master_camera(node as BaseCameraObjNodeType);\n\t\t\t},\n\t\t});\n\t};\n}\n\nexport class BaseCameraObjParamsConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(TransformedParamConfig(LayerParamConfig(CameraTransformParamConfig(NodeParamsConfig))))\n) {}\n\nexport class TypedCameraObjNode<O extends OrthoOrPerspCamera, K extends BaseCameraObjParamsConfig> extends TypedObjNode<\n\tO,\n\tK\n> {\n\t// public readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.CAMERA;\n\tprotected _object!: O;\n\tprotected _aspect: number = -1;\n\tget object() {\n\t\treturn this._object;\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprotected _background_controller: BaseBackgroundController | undefined;\n\tget background_controller(): BaseBackgroundController {\n\t\treturn (this._background_controller =\n\t\t\tthis._background_controller || new this.background_controller_constructor(this));\n\t}\n\tprotected get background_controller_constructor() {\n\t\treturn BaseBackgroundController;\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller(): ControlsController {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _layers_controller: LayersController | undefined;\n\tget layers_controller() {\n\t\treturn (this._layers_controller = this._layers_controller || new LayersController(this));\n\t}\n\tprotected _post_process_controller: PostProcessController | undefined;\n\tget post_process_controller(): PostProcessController {\n\t\treturn (this._post_process_controller = this._post_process_controller || new PostProcessController(this));\n\t}\n\n\t// protected _used_in_scene: boolean = true;\n\tinitialize_base_node() {\n\t\tsuper.initialize_base_node();\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis.io.outputs.set_has_one_output();\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active || false);\n\t\t// });\n\t\tthis.transform_controller.initialize_node();\n\t}\n\n\t// create_common_params() {\n\t// \t// this.within_param_folder('transform', () => {\n\t// \t// \t// this.add_param(ParamType.OPERATOR_PATH, 'controls', '', {\n\t// \t// \t// \tnode_selection: {\n\t// \t// \t// \t\tcontext: NodeContext.EVENT,\n\t// \t// \t// \t},\n\t// \t// \t// });\n\t// \t// \t// CoreTransform.create_params(this); // removed since they are now added Persp Camera\n\t// \t// \t// this.add_param( ParamType.TOGGLE, 'is_updating', 0, {cook: false, hidden: true}); //, hidden: true} )\n\t// \t// \t// this.add_param(ParamType.VECTOR3, 'target', [0, 0, 0], {cook: false}); //, hidden: true} )\n\t// \t// });\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.layers_controller.add_params();\n\t// \t// this.add_param(ParamType.FLOAT, 'near', BASE_CAMERA_DEFAULT.near, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.FLOAT, 'far', BASE_CAMERA_DEFAULT.far, {range: [0, 100]});\n\t// \t// this.add_param(ParamType.BOOLEAN, 'lock_width', 1);\n\t// \t// });\n\t// \t// this.background_controller.add_params();\n\t// \t// this.post_process_controller.add_params();\n\t// }\n\n\t// create_player_camera_params() {\n\t// \tthis.add_param(ParamType.BUTTON, 'set_master_camera', null, {callback: this.set_as_master_camera.bind(this)});\n\t// }\n\t// is_updating():boolean{\n\t// \treturn this.param('is_updating').value()\n\t// }\n\n\t// as_code_set_up_custom: ->\n\t// \tlines = []\n\t// \tlines.push \"#{this.code_var_name()}.set_display_flag(#{this.display_flag_state()})\"\n\t// \tlines\n\n\tasync cook() {\n\t\tthis.transform_controller.update();\n\t\tthis.layers_controller.update();\n\t\tawait this.background_controller.update();\n\n\t\tif (this._object.near != this.pv.near || this._object.far != this.pv.far) {\n\t\t\tthis._object.near = this.pv.near;\n\t\t\tthis._object.far = this.pv.far;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\n\t\tawait this.post_process_controller.update_composer_passes();\n\t\tthis.update_camera();\n\t\tthis.controls_controller.update_controls();\n\n\t\t// TODO: ideally the update transform and update camera\n\t\t// can both return if the camera has changed\n\t\t// and we can run this here instead of inside the update_transform and update_camera\n\t\t// this._object.dispatchEvent( EVENT_CHANGE )\n\t\tthis._object.dispatchEvent(EVENT_CHANGE);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\ton_create() {}\n\t//\n\ton_delete() {}\n\t//\n\n\tcamera() {\n\t\treturn this._object;\n\t}\n\n\tupdate_camera() {}\n\n\t//\n\tstatic PARAM_CALLBACK_set_master_camera(node: BaseCameraObjNodeType) {\n\t\tnode.set_as_master_camera();\n\t}\n\tset_as_master_camera() {\n\t\tthis.scene.cameras_controller.set_master_camera_node_path(this.full_path());\n\t}\n\n\tsetup_for_aspect_ratio(aspect: number) {\n\t\tif (lodash_isNaN(aspect)) {\n\t\t\treturn;\n\t\t}\n\t\tif (aspect && this._aspect != aspect) {\n\t\t\tthis._aspect = aspect;\n\t\t\tthis._update_for_aspect_ratio();\n\t\t}\n\t}\n\tprotected _update_for_aspect_ratio(): void {}\n\n\tupdate_transform_params_from_object() {\n\t\t// CoreTransform.set_params_from_matrix(this._object.matrix, this, {scale: false})\n\t\tCoreTransform.set_params_from_object(this._object, this);\n\t}\n\tcreate_viewer(element: HTMLElement): ThreejsViewer {\n\t\treturn new ThreejsViewer(element, this.scene, this);\n\t}\n}\n// \tconsole.warn \"camera #{this.full_path()} has no controls assigned\"\n\n// controls_node: ->\n// \tif @_param_controls? && @_param_controls != ''\n// \t\tCore.Walker.find_node(this, @_param_controls)\n\nexport type BaseCameraObjNodeType = TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig>;\nexport class BaseCameraObjNodeClass extends TypedCameraObjNode<OrthoOrPerspCamera, BaseCameraObjParamsConfig> {}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_compact from 'lodash/compact';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_trim from 'lodash/trim';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_sum from 'lodash/sum';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Points} from 'three/src/objects/Points';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Group} from 'three/src/objects/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Box3} from 'three/src/math/Box3';\n// const THREE = {Box3, BufferGeometry, Group, LineSegments, Mesh, Object3D, Points, Vector3}\nimport {CoreObject} from './Object';\nimport {CoreGeometry} from './Geometry';\nimport {CoreAttribute} from './Attribute';\n// import {Core} from 'src/core/_Module'\nimport {CoreString} from 'src/core/String';\nimport {CoreConstant, AttribClass} from './Constant';\n\n// import './MonkeyPatch'\n\nexport type GroupString = string;\n\nexport interface Object3DWithGeometry extends Object3D {\n\tgeometry: BufferGeometry;\n}\n\nexport class CoreGroup {\n\t// _group: Group\n\t_timestamp: number | undefined;\n\t// _core_objects:\n\t_objects: Object3D[] | undefined;\n\t_core_objects: CoreObject[] | undefined;\n\n\t// _geometries: BufferGeometry[];\n\t_core_geometries: CoreGeometry[] | undefined;\n\n\t_bounding_box: Box3 | undefined;\n\n\tconstructor() {\n\t\t//_group: Group){\n\t\t// this._group = _group;\n\t\tthis.touch();\n\t}\n\n\t//\n\t//\n\t// TIMESTAMP\n\t//\n\t//\n\ttimestamp() {\n\t\treturn this._timestamp;\n\t}\n\ttouch() {\n\t\tthis._timestamp = performance.now();\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._bounding_box = undefined;\n\t\tthis._core_geometries = undefined;\n\t\tthis._core_objects = undefined;\n\t}\n\n\t//\n\t//\n\t// CLONE\n\t//\n\t//\n\tclone() {\n\t\tconst core_group = new CoreGroup();\n\t\tif (this._objects) {\n\t\t\tconst objects = [];\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tobjects.push(CoreObject.clone(object));\n\t\t\t}\n\t\t\tcore_group.set_objects(objects);\n\t\t}\n\t\treturn core_group;\n\t}\n\t//\n\t//\n\t// OBJECTS\n\t//\n\t//\n\tset_objects(objects: Object3D[]) {\n\t\tthis._objects = objects;\n\t\tthis.touch();\n\t}\n\tobjects() {\n\t\treturn this._objects as Object3DWithGeometry[];\n\t}\n\tcore_objects() {\n\t\treturn (this._core_objects = this._core_objects || this._create_core_objects());\n\t}\n\tprivate _create_core_objects(): CoreObject[] {\n\t\tconst list: CoreObject[] = [];\n\t\tif (this._objects) {\n\t\t\tfor (let i = 0; i < this._objects.length; i++) {\n\t\t\t\tthis._objects[i].traverse((object) => {\n\t\t\t\t\tconst core_object = new CoreObject(object, i);\n\t\t\t\t\tlist.push(core_object);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\n\t// group() {\n\t// \treturn this._group;\n\t// }\n\t// uuid() {\n\t// \treturn this._group.uuid;\n\t// }\n\n\tgeometries(): BufferGeometry[] {\n\t\t// this._geometries = [];\n\t\t// for (let object of this._objects) {\n\t\t// \tobject.traverse((object) => this.__geometry_from_object.bind(this)(this._geometries, object));\n\t\t// \t// \tconst geometry = this.geometry_from_object(object)\n\t\t// \t// \tif (geometry != null) {\n\t\t// \t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t// \t// \t}\n\t\t// \t// });\n\t\t// }\n\t\t// return this._geometries;\n\t\tconst list: BufferGeometry[] = [];\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tconst geometry = (core_object.object() as Mesh).geometry as BufferGeometry;\n\t\t\tif (geometry) {\n\t\t\t\tlist.push(geometry);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tcore_geometries(): CoreGeometry[] {\n\t\treturn (this._core_geometries = this._core_geometries || this.create_core_geometries());\n\t}\n\tprivate create_core_geometries() {\n\t\tconst list: CoreGeometry[] = [];\n\t\tfor (let geometry of this.geometries()) {\n\t\t\tlist.push(new CoreGeometry(geometry));\n\t\t\t// object.traverse(object=> this.__core_geometry_from_object.bind(this)(this._core_geometries, object))\n\t\t\t// \tconst geometry = this.geometry_from_object(object)\n\t\t\t// \tif (geometry != null) {\n\t\t\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t\t\t// \t}\n\t\t\t// });\n\t\t}\n\t\treturn list;\n\t}\n\t__geometry_from_object(list: BufferGeometry[], object: Mesh) {\n\t\tif (object.geometry) {\n\t\t\treturn list.push(object.geometry as BufferGeometry);\n\t\t}\n\t}\n\t// __core_geometry_from_object(list, object){\n\t// \tconst geometry = CoreGroup.geometry_from_object(object)\n\t// \tif (geometry != null) {\n\t// \t\treturn list.push(new CoreGeometry(geometry));\n\t// \t}\n\t// }\n\tstatic geometry_from_object(object: Object3D): BufferGeometry | null {\n\t\tif ((object as Mesh).isMesh || (object as LineSegments).isLine || (object as Points).isPoints) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t}\n\t\treturn null;\n\t}\n\tfaces() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.faces()));\n\t}\n\tpoints() {\n\t\treturn lodash_flatten(this.core_geometries().map((g) => g.points()));\n\t}\n\tpoints_count() {\n\t\treturn lodash_sum(this.core_geometries().map((g) => g.points_count()));\n\t}\n\tpoints_from_group(group: GroupString) {\n\t\tif (group) {\n\t\t\tconst indices = CoreString.indices(group);\n\t\t\t// if (indices) {\n\t\t\tconst points = this.points();\n\t\t\treturn indices.map((i) => points[i]);\n\t\t\t// }\n\t\t} else {\n\t\t\treturn this.points();\n\t\t}\n\t}\n\n\tstatic from_objects(objects: Object3D[]): CoreGroup {\n\t\tconst core_group = new CoreGroup();\n\t\tcore_group.set_objects(objects);\n\t\treturn core_group;\n\t}\n\n\t// objects() {\n\t// \treturn this._objects = lodash_map(this._group.children, (object, i)=> {\n\t// \t\tconst object_wrapper = new CoreObject(object);\n\t// \t\tobject_wrapper.set_index(i);\n\t// \t\treturn object_wrapper;\n\t// \t});\n\t// }\n\tobjects_from_group(group_name: string): Object3D[] {\n\t\treturn this.core_objects_from_group(group_name).map((co) => co.object());\n\t}\n\tcore_objects_from_group(group_name: string): CoreObject[] {\n\t\tgroup_name = lodash_trim(group_name);\n\n\t\tif (group_name !== '') {\n\t\t\tconst index = parseInt(group_name);\n\t\t\tif (!lodash_isNaN(index)) {\n\t\t\t\treturn lodash_compact([this.core_objects()[index]]);\n\t\t\t} else {\n\t\t\t\treturn this.core_objects().filter((core_object) => {\n\t\t\t\t\treturn CoreString.match_mask(group_name, core_object.name());\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.core_objects();\n\t\t}\n\t}\n\n\t// reset: ->\n\t// \t@_geometries = []\n\t// \t@_points = []\n\n\t// _find_geometries: ->\n\t// \tlist = []\n\t// \t@_group.traverse (object)=>\n\t// \t\tif (geometry = object.geometry)?\n\t// \t\t\tlist.push new Geometry(geometry)\n\t// \tlist\n\n\t// _find_points: ->\n\t// \tlodash_flatten( lodash_map(this.objects(), (g)->g.points()) )\n\n\t// bounding_box() {\n\t// \treturn new Box3().setFromObject(this._group);\n\t// }\n\tbounding_box(): Box3 {\n\t\treturn (this._bounding_box = this._bounding_box || this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\tconst center = new Vector3();\n\t\tthis.bounding_box().getCenter(center);\n\t\treturn center;\n\t}\n\tsize(): Vector3 {\n\t\tconst size = new Vector3();\n\t\tthis.bounding_box().getSize(size);\n\t\treturn size;\n\t}\n\n\tprivate _compute_bounding_box() {\n\t\tconst bbox = new Box3();\n\t\tif (this._objects) {\n\t\t\tfor (let object of this._objects) {\n\t\t\t\tbbox.expandByObject(object);\n\t\t\t}\n\t\t}\n\t\treturn bbox;\n\t}\n\tcompute_vertex_normals() {\n\t\tfor (let object of this.core_objects()) {\n\t\t\tobject.compute_vertex_normals();\n\t\t}\n\t}\n\n\thas_attrib(name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.has_attrib(name);\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\tattrib_type(name: string) {\n\t\tconst first_geometry = this.core_geometries()[0];\n\t\tif (first_geometry != null) {\n\t\t\treturn first_geometry.attrib_type(name);\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\trename_attrib(old_name: string, new_name: string, attrib_class: AttribClass) {\n\t\tswitch (attrib_class) {\n\t\t\tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst geometry = CoreGroup.geometry_from_object(child);\n\t\t\t\t\t\t\t\tif (geometry) {\n\t\t\t\t\t\t\t\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\t\t\t\t\t\t\t\tcore_geometry.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t\t\tif (this.has_attrib(old_name)) {\n\t\t\t\t\tif (this._objects) {\n\t\t\t\t\t\tfor (let object of this._objects) {\n\t\t\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\t\t\tconst core_object = new CoreObject(child, 0);\n\t\t\t\t\t\t\t\tcore_object.rename_attribute(old_name, new_name);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tattrib_names() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tobject_attrib_names() {\n\t\tlet first_object;\n\t\tif ((first_object = this.core_objects()[0]) != null) {\n\t\t\treturn first_object.attrib_names();\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tattrib_names_matching_mask(masks_string: GroupString) {\n\t\tconst masks = CoreString.attrib_names(masks_string);\n\n\t\tconst matching_attrib_names = [];\n\t\tfor (let attrib_name of this.attrib_names()) {\n\t\t\tfor (let mask of masks) {\n\t\t\t\tif (CoreString.match_mask(attrib_name, mask)) {\n\t\t\t\t\tmatching_attrib_names.push(attrib_name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn lodash_uniq(matching_attrib_names);\n\t}\n\n\tattrib_sizes() {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_sizes();\n\t\t} else {\n\t\t\treturn {};\n\t\t}\n\t}\n\tattrib_size(attrib_name: string) {\n\t\tlet first_geometry;\n\t\tif ((first_geometry = this.core_geometries()[0]) != null) {\n\t\t\treturn first_geometry.attrib_size(attrib_name);\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tadd_numeric_vertex_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_geometry of this.core_geometries()) {\n\t\t\tcore_geometry.add_numeric_attrib(name, size, default_value);\n\t\t}\n\t}\n\n\tadd_numeric_object_attrib(name: string, size: number, default_value: NumericAttribValue) {\n\t\tif (default_value == null) {\n\t\t\tdefault_value = CoreAttribute.default_value(size);\n\t\t}\n\n\t\tfor (let core_object of this.core_objects()) {\n\t\t\tcore_object.add_numeric_attrib(name, default_value);\n\t\t}\n\t}\n\n\tstatic clone(src_group: Group) {\n\t\tconst new_group = new Group();\n\n\t\tsrc_group.children.forEach((src_object) => {\n\t\t\tconst new_object = CoreObject.clone(src_object);\n\t\t\tnew_group.add(new_object);\n\t\t});\n\n\t\treturn new_group;\n\t}\n}\n","import {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n// const THREE = {BufferGeometry, Vector2, Vector3, Vector4}\nimport {CoreAttribute} from './Attribute';\nimport {CoreGeometry} from './Geometry';\nimport {CoreEntity} from './Entity';\n// import Geometry from './Geometry';\n\nconst ATTRIB_NAMES = {\n\tPOSITION: 'position',\n\tNORMAL: 'normal',\n};\n\nenum ComponentName {\n\tx = 'x',\n\ty = 'y',\n\tz = 'z',\n\tw = 'w',\n\tr = 'r',\n\tg = 'g',\n\tb = 'b',\n}\nconst COMPONENT_INDICES = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\nconst PTNUM = 'ptnum';\nconst DOT = '.';\n\nexport class CorePoint extends CoreEntity {\n\t_geometry: BufferGeometry;\n\t_position: Vector3 | undefined;\n\t_normal: Vector3 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, index: number) {\n\t\tsuper(index);\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\n\tgeometry_wrapper() {\n\t\treturn this._core_geometry;\n\t}\n\tgeometry() {\n\t\treturn (this._geometry = this._geometry || this._core_geometry.geometry());\n\t}\n\n\t// add_attribute: (name, size, value)->\n\t// \t@_attributes[name] = new Attribute(size, value)\n\n\tattrib_size(name: string): number {\n\t\t//@_attributes[name].size()\n\t\tname = CoreAttribute.remap_name(name);\n\t\treturn this._geometry.getAttribute(name).itemSize;\n\t}\n\n\thas_attrib(name: string): boolean {\n\t\tconst remapped_name = CoreAttribute.remap_name(name);\n\t\treturn this._core_geometry.has_attrib(remapped_name);\n\t}\n\n\tattrib_value(name: string) {\n\t\t//, target){ // target could be used, but not entirely sure I am ready now\n\n\t\tif (name === PTNUM) {\n\t\t\treturn this.index;\n\t\t} else {\n\t\t\tlet component_name = null;\n\t\t\tlet component_index = null;\n\t\t\tif (name[name.length - 2] === DOT) {\n\t\t\t\tcomponent_name = name[name.length - 1] as ComponentName;\n\t\t\t\tcomponent_index = COMPONENT_INDICES[component_name];\n\t\t\t\tname = name.substring(0, name.length - 2);\n\t\t\t}\n\t\t\tconst remaped_name = CoreAttribute.remap_name(name);\n\n\t\t\t//if (attrib = @_attributes[name])?\n\t\t\tconst attrib = this._geometry.getAttribute(remaped_name);\n\t\t\tif (attrib) {\n\t\t\t\tconst {array} = attrib;\n\t\t\t\tif (this._core_geometry.is_attrib_indexed(remaped_name)) {\n\t\t\t\t\tconst value_index = this.attrib_value_index(remaped_name); //attrib.value()\n\t\t\t\t\treturn this._core_geometry.user_data_attrib(remaped_name)[value_index];\n\t\t\t\t} else {\n\t\t\t\t\tconst size = attrib.itemSize;\n\t\t\t\t\tconst start_index = this._index * size;\n\n\t\t\t\t\tif (component_index == null) {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 2:\n\t\t\t\t\t\t\t\treturn new Vector2(array[start_index + 0], array[start_index + 1]);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 3:\n\t\t\t\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t// target.fromArray(array, start_index)\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase 4:\n\t\t\t\t\t\t\t\treturn new Vector4(\n\t\t\t\t\t\t\t\t\tarray[start_index + 0],\n\t\t\t\t\t\t\t\t\tarray[start_index + 1],\n\t\t\t\t\t\t\t\t\tarray[start_index + 2],\n\t\t\t\t\t\t\t\t\tarray[start_index + 3]\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\tthrow `size not valid (${size})`;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tswitch (size) {\n\t\t\t\t\t\t\tcase 1:\n\t\t\t\t\t\t\t\treturn array[start_index];\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t\treturn array[start_index + component_index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst message = `attrib ${name} not found. availables are: ${Object.keys(\n\t\t\t\t\tthis._geometry.attributes || {}\n\t\t\t\t).join(',')}`;\n\t\t\t\tconsole.warn(message);\n\t\t\t\tthrow message;\n\t\t\t}\n\t\t}\n\t}\n\n\tattrib_value_index(name: string) {\n\t\tif (this._core_geometry.is_attrib_indexed(name)) {\n\t\t\t//@_attributes[name].value()\n\t\t\treturn this._geometry.getAttribute(name).array[this._index];\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n\n\tposition(): Vector3 {\n\t\t//@_attributes['position'].value()\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.POSITION);\n\t\tthis._position = this._position || new Vector3();\n\t\treturn this._position.fromArray(array, this._index * 3);\n\t}\n\tset_position(new_position: Vector3) {\n\t\tthis.set_attrib_value_vector3(ATTRIB_NAMES.POSITION, new_position);\n\t}\n\n\tnormal(): Vector3 {\n\t\tconst {array} = this._geometry.getAttribute(ATTRIB_NAMES.NORMAL);\n\t\tthis._normal = this._normal || new Vector3();\n\t\treturn this._normal.fromArray(array, this._index * 3);\n\t}\n\tset_normal(new_normal: Vector3) {\n\t\treturn this.set_attrib_value_vector3(ATTRIB_NAMES.NORMAL, new_normal);\n\t}\n\n\tset_attrib_value(name: string, value: NumericAttribValue | string) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(value)\n\t\t//value = attrib.value()\n\t\t//value = this.attrib_value()\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst attrib_size = attrib.itemSize;\n\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tarray[this._index] = value as number;\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tconst v2 = value as Vector2Like;\n\t\t\t\tarray[this._index * 2 + 0] = v2.x;\n\t\t\t\tarray[this._index * 2 + 1] = v2.y;\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tconst is_color = (value as ColorLike).r != null;\n\t\t\t\tif (is_color) {\n\t\t\t\t\tconst col = value as ColorLike;\n\t\t\t\t\tarray[this._index * 3 + 0] = col.r;\n\t\t\t\t\tarray[this._index * 3 + 1] = col.g;\n\t\t\t\t\tarray[this._index * 3 + 2] = col.b;\n\t\t\t\t} else {\n\t\t\t\t\tconst v3 = value as Vector3Like;\n\t\t\t\t\tarray[this._index * 3 + 0] = v3.x;\n\t\t\t\t\tarray[this._index * 3 + 1] = v3.y;\n\t\t\t\t\tarray[this._index * 3 + 2] = v3.z;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tconsole.warn(`Point.set_attrib_value does not yet allow attrib size ${attrib_size}`);\n\t\t\t\tthrow `attrib size ${attrib_size} not implemented`;\n\t\t}\n\t}\n\tset_attrib_value_vector3(name: string, value: Vector3) {\n\t\t// TODO: this fails if the value is null\n\t\tif (value == null) {\n\t\t\treturn;\n\t\t}\n\t\tif (name == null) {\n\t\t\tthrow 'Point.set_attrib_value requires a name';\n\t\t}\n\n\t\tconst attrib = this._geometry.getAttribute(name);\n\t\tconst array = attrib.array as number[];\n\t\tconst i = this._index * 3;\n\n\t\tarray[i] = value.x;\n\t\tarray[i + 1] = value.y;\n\t\tarray[i + 2] = value.z;\n\t}\n\n\tset_attrib_index(name: string, new_value_index: number) {\n\t\t// attrib = @_attributes[name]\n\t\t// attrib.set_value(new_value_index)\n\t\t//value = attrib.value()\n\t\tconst array = this._geometry.getAttribute(name).array as number[];\n\t\treturn (array[this._index] = new_value_index);\n\t}\n}\n","export class CoreEntity {\n\tconstructor(protected _index: number) {}\n\tget index() {\n\t\treturn this._index;\n\t}\n}\n","type IterateeMethod = (element: any, index?: number) => void;\ntype IterateeMethodArray = IterateeMethod; // TODO: check this, as the element may be an array\ntype IterateeMethodCount = (index: number) => void;\n\ninterface CoreIteratorOptions {\n\tmax_time_per_chunk?: number;\n\tcheck_every_interations?: number;\n}\n\nexport class CoreIterator {\n\t// array\n\tprivate _array: any[] | undefined;\n\tprivate _iteratee_method_array: IterateeMethodArray | undefined;\n\tprivate _bound_next_with_array: (() => void) | undefined;\n\tprivate _current_array_element: any;\n\tprivate _array_index: number = 0;\n\n\t// count\n\tprivate _count: number = 0;\n\tprivate _iteratee_method_count: IterateeMethodCount | undefined;\n\tprivate _bound_next_with_count: (() => void) | undefined;\n\tprivate _current_count_index: number = 0;\n\n\tprivate _max_time_per_chunk: number;\n\tprivate _check_every_interations: number;\n\n\tprivate _resolve: null | (() => void) = null;\n\n\tconstructor(options: CoreIteratorOptions = {}) {\n\t\tthis._max_time_per_chunk = options.max_time_per_chunk || 10;\n\t\tthis._check_every_interations = options.check_every_interations || 100;\n\t}\n\n\tasync start_with_count(count: number, iteratee_method: IterateeMethodCount) {\n\t\tthis._count = count;\n\t\tthis._current_count_index = 0;\n\t\tthis._iteratee_method_count = iteratee_method;\n\t\tthis._bound_next_with_count = this.next_with_count.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_count();\n\t\t});\n\t}\n\tnext_with_count() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_count && this._bound_next_with_count) {\n\t\t\twhile (this._current_count_index < this._count) {\n\t\t\t\tthis._iteratee_method_count(this._current_count_index);\n\n\t\t\t\tthis._current_count_index++;\n\n\t\t\t\tif (this._current_count_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_count, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_count_index >= this._count) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n\n\t//\n\t//\n\t// ARRAY\n\t//\n\t//\n\tasync start_with_array(array: any[], iteratee_method: IterateeMethod) {\n\t\tthis._array = array;\n\t\tthis._array_index = 0;\n\t\tthis._iteratee_method_array = iteratee_method;\n\t\tthis._bound_next_with_array = this.next_with_array.bind(this);\n\n\t\tif (this._resolve) {\n\t\t\tthrow 'an iterator cannot be started twice';\n\t\t}\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._resolve = resolve;\n\t\t\tthis.next_with_array();\n\t\t});\n\t}\n\tnext_with_array() {\n\t\tconst start_time = performance.now();\n\n\t\tif (this._iteratee_method_array && this._bound_next_with_array && this._array) {\n\t\t\twhile ((this._current_array_element = this._array[this._array_index])) {\n\t\t\t\tthis._iteratee_method_array(this._current_array_element, this._array_index);\n\n\t\t\t\tthis._array_index++;\n\n\t\t\t\tif (this._array_index % this._check_every_interations == 0) {\n\t\t\t\t\tif (performance.now() - start_time > this._max_time_per_chunk) {\n\t\t\t\t\t\tsetTimeout(this._bound_next_with_array, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (this._current_array_element === undefined) {\n\t\t\tif (this._resolve) {\n\t\t\t\tthis._resolve();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {CoreMath} from 'src/core/math/_Module'\nimport {Vector2} from 'three/src/math/Vector2'\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\n\nexport class CoreGeometryUtilCircle {\n\tstatic positions(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst radian_per_segment =\n\t\t\tCoreMath.degrees_to_radians(arc_angle) / segments_count\n\n\t\tconst positions = []\n\t\tfor (let i = 0; i < segments_count; i++) {\n\t\t\tconst point_radian = radian_per_segment * i\n\t\t\tconst x = radius * Math.cos(point_radian)\n\t\t\tconst y = radius * Math.sin(point_radian)\n\n\t\t\tpositions.push(new Vector2(x, y))\n\t\t}\n\n\t\treturn positions\n\t}\n\n\tstatic create(\n\t\tradius: number,\n\t\tsegments_count: number,\n\t\tarc_angle: number = 360\n\t) {\n\t\tconst positions_2d = this.positions(radius, segments_count, arc_angle)\n\n\t\tconst positions = []\n\t\tconst indices = []\n\t\tlet position_2d\n\t\tfor (let i = 0; i < positions_2d.length; i++) {\n\t\t\tposition_2d = positions_2d[i]\n\n\t\t\tpositions.push(position_2d.x)\n\t\t\tpositions.push(position_2d.y)\n\t\t\tpositions.push(0)\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1)\n\t\t\t\tindices.push(i)\n\t\t\t}\n\t\t}\n\n\t\t// also add the last segment\n\t\tindices.push(segments_count - 1)\n\t\tindices.push(0)\n\n\t\tconst geometry = new BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(positions, 3)\n\t\t)\n\t\tgeometry.setIndex(indices)\n\n\t\treturn geometry\n\t}\n}\n","// import {Core} from 'src/core/_Module';\nimport lodash_isArray from 'lodash/isArray';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isString from 'lodash/isString';\nimport lodash_flatten from 'lodash/flatten';\nimport {Points} from 'three/src/objects/Points';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nconst THREE = {BufferGeometry, Float32BufferAttribute, Points};\n\n// import UrlLoader from '../UrlLoader';\nimport axios from 'axios';\nimport {CoreString} from 'src/core/String';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {CoreConstant} from 'src/core/geometry/Constant';\nimport {CoreAttributeData} from 'src/core/geometry/AttributeData';\nimport {CoreAttribute} from 'src/core/geometry/Attribute';\n// import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nconst DEEP_ATTRIB_SEPARATOR = ':';\n\nexport interface JsonDataLoaderOptions {\n\tdata_keys_prefix?: string;\n\tskip_entries?: string;\n\tdo_convert?: boolean;\n\tconvert_to_numeric?: string;\n}\n\nexport class JsonDataLoader {\n\t_json: any[] | undefined;\n\t_attribute_datas_by_name: Dictionary<CoreAttributeData> = {};\n\tprivate _options: JsonDataLoaderOptions = {};\n\n\tconstructor(options: JsonDataLoaderOptions = {}) {\n\t\tthis._options.data_keys_prefix = options.data_keys_prefix;\n\t\tthis._options.skip_entries = options.skip_entries;\n\t\tthis._options.do_convert = options.do_convert || false;\n\t\tthis._options.convert_to_numeric = options.convert_to_numeric;\n\t}\n\t//\n\n\tload(\n\t\turl: string,\n\t\tsuccess_callback: (object: Object3D) => void,\n\t\tprogress_callback: (() => void) | undefined,\n\t\terror_callback: (error: ErrorEvent) => void | undefined\n\t) {\n\t\t// const url_loader = new UrlLoader();\n\t\t// const start_time = performance.now();\n\t\t// const config = {\n\t\t// \tcrossdomain: true\n\t\t// }\n\t\taxios\n\t\t\t.get(url)\n\t\t\t.then((response) => {\n\t\t\t\t// const end_time = performance.now();\n\n\t\t\t\tthis._json = response.data;\n\t\t\t\tif (this._options.data_keys_prefix != null && this._options.data_keys_prefix != '') {\n\t\t\t\t\tthis._json = this.get_prefixed_json(this._json, this._options.data_keys_prefix.split('.'));\n\t\t\t\t}\n\t\t\t\tconst object = this.create_object();\n\t\t\t\tsuccess_callback(object);\n\t\t\t})\n\t\t\t.catch((error: ErrorEvent) => {\n\t\t\t\tconsole.log('error', error);\n\t\t\t\terror_callback(error);\n\t\t\t});\n\t}\n\n\tget_prefixed_json(json: any, prefixes: string[]): any[] {\n\t\tif (prefixes.length == 0) {\n\t\t\treturn json;\n\t\t} else {\n\t\t\tconst first_prefix = prefixes.shift();\n\t\t\tif (first_prefix) {\n\t\t\t\treturn this.get_prefixed_json(json[first_prefix], prefixes);\n\t\t\t}\n\t\t}\n\t\treturn [];\n\t}\n\n\tset_json(json: any) {\n\t\treturn (this._json = json);\n\t}\n\n\tcreate_object() {\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tconst core_geo = new CoreGeometry(geometry);\n\n\t\tif (this._json != null) {\n\t\t\tconst points_count = this._json.length;\n\t\t\tcore_geo.init_position_attribute(points_count);\n\n\t\t\tthis._find_attributes();\n\t\t\t// for(let attrib_name of Object.keys(this._attribute_names)){\n\t\t\t// \tconst attrib_data = this._attribute_datas_by_name[attrib_name];\n\t\t\t// \treturn core_geo.add_attribute(attrib_name, attrib_data);\n\t\t\t// }\n\n\t\t\tconst convert_to_numeric_masks = CoreString.attrib_names(this._options.convert_to_numeric || '');\n\n\t\t\t// set values\n\t\t\tfor (let attrib_name of Object.keys(this._attribute_datas_by_name)) {\n\t\t\t\tlet attrib_values = lodash_flatten(this._attribute_values_for_name(attrib_name));\n\n\t\t\t\tconst data = this._attribute_datas_by_name[attrib_name];\n\t\t\t\tconst size = data.size();\n\n\t\t\t\tif (data.type() === CoreConstant.ATTRIB_TYPE.STRING) {\n\t\t\t\t\t// const index_data = CoreAttribute.array_to_indexed_arrays(\n\t\t\t\t\t// \tattrib_values as string[]\n\t\t\t\t\t// )\n\n\t\t\t\t\tif (\n\t\t\t\t\t\tthis._options.do_convert &&\n\t\t\t\t\t\tCoreString.matches_one_mask(attrib_name, convert_to_numeric_masks)\n\t\t\t\t\t) {\n\t\t\t\t\t\tconst numerical_attrib_values: number[] = attrib_values.map((v) => {\n\t\t\t\t\t\t\tif (lodash_isString(v)) {\n\t\t\t\t\t\t\t\treturn parseFloat(v) || 0;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\treturn v;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tgeometry.setAttribute(\n\t\t\t\t\t\t\tattrib_name,\n\t\t\t\t\t\t\tnew THREE.Float32BufferAttribute(numerical_attrib_values, size)\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(attrib_values as string[]);\n\t\t\t\t\t\tcore_geo.set_indexed_attribute(attrib_name, index_data['values'], index_data['indices']);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconst numerical_attrib_values = attrib_values as number[];\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new THREE.Float32BufferAttribute(numerical_attrib_values, size));\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn new THREE.Points(geometry, CoreConstant.MATERIALS[THREE.Points.name]);\n\t}\n\n\tprivate _find_attributes() {\n\t\tlet first_pt;\n\n\t\tconst masks = CoreString.attrib_names(this._options.skip_entries || '');\n\n\t\tif (this._json) {\n\t\t\tif ((first_pt = this._json[0]) != null) {\n\t\t\t\tfor (let attrib_name of Object.keys(first_pt)) {\n\t\t\t\t\tconst attrib_value = first_pt[attrib_name];\n\n\t\t\t\t\tif (this._value_has_subentries(attrib_value)) {\n\t\t\t\t\t\tfor (let key of Object.keys(attrib_value)) {\n\t\t\t\t\t\t\tconst deep_attrib_name = [attrib_name, key].join(DEEP_ATTRIB_SEPARATOR);\n\t\t\t\t\t\t\tconst deep_attrib_value = attrib_value[attrib_name];\n\n\t\t\t\t\t\t\tif (!CoreString.matches_one_mask(deep_attrib_name, masks)) {\n\t\t\t\t\t\t\t\tthis._attribute_datas_by_name[deep_attrib_name] = CoreAttributeData.from_value(\n\t\t\t\t\t\t\t\t\tdeep_attrib_value\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!CoreString.matches_one_mask(attrib_name, masks)) {\n\t\t\t\t\t\t\tthis._attribute_datas_by_name[attrib_name] = CoreAttributeData.from_value(attrib_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _attribute_values_for_name(attrib_name: string): StringOrNumber[] {\n\t\tif (this._json) {\n\t\t\treturn this._json.map((json_element: Dictionary<any>) => {\n\t\t\t\tconst prefix = attrib_name.split(DEEP_ATTRIB_SEPARATOR)[0];\n\t\t\t\tconst value = json_element[prefix];\n\t\t\t\tif (this._value_has_subentries(value)) {\n\t\t\t\t\tconst deep_attrib_name = attrib_name.substring(prefix.length + 1);\n\t\t\t\t\treturn value[deep_attrib_name] || 0;\n\t\t\t\t} else {\n\t\t\t\t\treturn value || 0;\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\t_value_has_subentries(value: any): boolean {\n\t\treturn lodash_isObject(value) && !lodash_isArray(value);\n\t}\n}\n","import {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n */\n\n\nvar DRACOLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.decoderPath = '';\n\tthis.decoderConfig = {};\n\tthis.decoderBinary = null;\n\tthis.decoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\n\tthis.defaultAttributeIDs = {\n\t\tposition: 'POSITION',\n\t\tnormal: 'NORMAL',\n\t\tcolor: 'COLOR',\n\t\tuv: 'TEX_COORD'\n\t};\n\tthis.defaultAttributeTypes = {\n\t\tposition: 'Float32Array',\n\t\tnormal: 'Float32Array',\n\t\tcolor: 'Float32Array',\n\t\tuv: 'Float32Array'\n\t};\n\n};\n\nDRACOLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: DRACOLoader,\n\n\tsetDecoderPath: function ( path ) {\n\n\t\tthis.decoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetDecoderConfig: function ( config ) {\n\n\t\tthis.decoderConfig = config;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\t/** @deprecated */\n\tsetVerbosity: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setVerbosity() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetDrawMode: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setDrawMode() method has been removed.' );\n\n\t},\n\n\t/** @deprecated */\n\tsetSkipDequantization: function () {\n\n\t\tconsole.warn( 'THREE.DRACOLoader: The .setSkipDequantization() method has been removed.' );\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tif ( this.crossOrigin === 'use-credentials' ) {\n\n\t\t\tloader.setWithCredentials( true );\n\n\t\t}\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tvar taskConfig = {\n\t\t\t\tattributeIDs: this.defaultAttributeIDs,\n\t\t\t\tattributeTypes: this.defaultAttributeTypes,\n\t\t\t\tuseUniqueIDs: false\n\t\t\t};\n\n\t\t\tthis.decodeGeometry( buffer, taskConfig )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/** @deprecated Kept for backward-compatibility with previous DRACOLoader versions. */\n\tdecodeDracoFile: function ( buffer, callback, attributeIDs, attributeTypes ) {\n\n\t\tvar taskConfig = {\n\t\t\tattributeIDs: attributeIDs || this.defaultAttributeIDs,\n\t\t\tattributeTypes: attributeTypes || this.defaultAttributeTypes,\n\t\t\tuseUniqueIDs: !! attributeIDs\n\t\t};\n\n\t\tthis.decodeGeometry( buffer, taskConfig ).then( callback );\n\n\t},\n\n\tdecodeGeometry: function ( buffer, taskConfig ) {\n\n\t\t// TODO: For backward-compatibility, support 'attributeTypes' objects containing\n\t\t// references (rather than names) to typed array constructors. These must be\n\t\t// serialized before sending them to the worker.\n\t\tfor ( var attribute in taskConfig.attributeTypes ) {\n\n\t\t\tvar type = taskConfig.attributeTypes[ attribute ];\n\n\t\t\tif ( type.BYTES_PER_ELEMENT !== undefined ) {\n\n\t\t\t\ttaskConfig.attributeTypes[ attribute ] = type.name;\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar taskKey = JSON.stringify( taskConfig );\n\n\t\t// Check for an existing task using this buffer. A transferred buffer cannot be transferred\n\t\t// again from this thread.\n\t\tif ( DRACOLoader.taskCache.has( buffer ) ) {\n\n\t\t\tvar cachedTask = DRACOLoader.taskCache.get( buffer );\n\n\t\t\tif ( cachedTask.key === taskKey ) {\n\n\t\t\t\treturn cachedTask.promise;\n\n\t\t\t} else if ( buffer.byteLength === 0 ) {\n\n\t\t\t\t// Technically, it would be possible to wait for the previous task to complete,\n\t\t\t\t// transfer the buffer back, and decode again with the second configuration. That\n\t\t\t\t// is complex, and I don't know of any reason to decode a Draco buffer twice in\n\t\t\t\t// different ways, so this is left unimplemented.\n\t\t\t\tthrow new Error(\n\n\t\t\t\t\t'THREE.DRACOLoader: Unable to re-decode a buffer with different ' +\n\t\t\t\t\t'settings. Buffer has already been transferred.'\n\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t}\n\n\t\t//\n\n\t\tvar worker;\n\t\tvar taskID = this.workerNextTaskID ++;\n\t\tvar taskCost = buffer.byteLength;\n\n\t\t// Obtain a worker and assign a task, and construct a geometry instance\n\t\t// when the task completes.\n\t\tvar geometryPending = this._getWorker( taskID, taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'decode', id: taskID, taskConfig, buffer }, [ buffer ] );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => this._createGeometry( message.geometry ) );\n\n\t\t// Remove task from the task list.\n\t\tgeometryPending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tthis._releaseTask( worker, taskID );\n\n\t\t\t\t\t// this.debug();\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t// Cache the task result.\n\t\tDRACOLoader.taskCache.set( buffer, {\n\n\t\t\tkey: taskKey,\n\t\t\tpromise: geometryPending\n\n\t\t} );\n\n\t\treturn geometryPending;\n\n\t},\n\n\t_createGeometry: function ( geometryData ) {\n\n\t\tvar geometry = new BufferGeometry();\n\n\t\tif ( geometryData.index ) {\n\n\t\t\tgeometry.setIndex( new BufferAttribute( geometryData.index.array, 1 ) );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < geometryData.attributes.length; i ++ ) {\n\n\t\t\tvar attribute = geometryData.attributes[ i ];\n\t\t\tvar name = attribute.name;\n\t\t\tvar array = attribute.array;\n\t\t\tvar itemSize = attribute.itemSize;\n\n\t\t\tgeometry.setAttribute( name, new BufferAttribute( array, itemSize ) );\n\n\t\t}\n\n\t\treturn geometry;\n\n\t},\n\n\t_loadLibrary: function ( url, responseType ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.decoderPath );\n\t\tloader.setResponseType( responseType );\n\n\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\tloader.load( url, resolve, undefined, reject );\n\n\t\t} );\n\n\t},\n\n\tpreload: function () {\n\n\t\tthis._initDecoder();\n\n\t\treturn this;\n\n\t},\n\n\t_initDecoder: function () {\n\n\t\tif ( this.decoderPending ) return this.decoderPending;\n\n\t\tvar useJS = typeof WebAssembly !== 'object' || this.decoderConfig.type === 'js';\n\t\tvar librariesPending = [];\n\n\t\tif ( useJS ) {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.js', 'text' ) );\n\n\t\t} else {\n\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_wasm_wrapper.js', 'text' ) );\n\t\t\tlibrariesPending.push( this._loadLibrary( 'draco_decoder.wasm', 'arraybuffer' ) );\n\n\t\t}\n\n\t\tthis.decoderPending = Promise.all( librariesPending )\n\t\t\t.then( ( libraries ) => {\n\n\t\t\t\tvar jsContent = libraries[ 0 ];\n\n\t\t\t\tif ( ! useJS ) {\n\n\t\t\t\t\tthis.decoderConfig.wasmBinary = libraries[ 1 ];\n\n\t\t\t\t}\n\n\t\t\t\tvar fn = DRACOLoader.DRACOWorker.toString();\n\n\t\t\t\tvar body = [\n\t\t\t\t\t'/* draco decoder */',\n\t\t\t\t\tjsContent,\n\t\t\t\t\t'',\n\t\t\t\t\t'/* worker */',\n\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t].join( '\\n' );\n\n\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\n\t\t\t} );\n\n\t\treturn this.decoderPending;\n\n\t},\n\n\t_getWorker: function ( taskID, taskCost ) {\n\n\t\treturn this._initDecoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskCosts = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( { type: 'init', decoderConfig: this.decoderConfig } );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'decode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.DRACOLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\t\t\tworker._taskCosts[ taskID ] = taskCost;\n\t\t\tworker._taskLoad += taskCost;\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\t_releaseTask: function ( worker, taskID ) {\n\n\t\tworker._taskLoad -= worker._taskCosts[ taskID ];\n\t\tdelete worker._callbacks[ taskID ];\n\t\tdelete worker._taskCosts[ taskID ];\n\n\t},\n\n\tdebug: function () {\n\n\t\tconsole.log( 'Task load: ', this.workerPool.map( ( worker ) => worker._taskLoad ) );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; ++ i ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* WEB WORKER */\n\nDRACOLoader.DRACOWorker = function () {\n\n\tvar decoderConfig;\n\tvar decoderPending;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tdecoderConfig = message.decoderConfig;\n\t\t\t\tdecoderPending = new Promise( function ( resolve/*, reject*/ ) {\n\n\t\t\t\t\tdecoderConfig.onModuleLoaded = function ( draco ) {\n\n\t\t\t\t\t\t// Module is Promise-like. Wrap before resolving to avoid loop.\n\t\t\t\t\t\tresolve( { draco: draco } );\n\n\t\t\t\t\t};\n\n\t\t\t\t\tDracoDecoderModule( decoderConfig );\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t\tcase 'decode':\n\t\t\t\tvar buffer = message.buffer;\n\t\t\t\tvar taskConfig = message.taskConfig;\n\t\t\t\tdecoderPending.then( ( module ) => {\n\n\t\t\t\t\tvar draco = module.draco;\n\t\t\t\t\tvar decoder = new draco.Decoder();\n\t\t\t\t\tvar decoderBuffer = new draco.DecoderBuffer();\n\t\t\t\t\tdecoderBuffer.Init( new Int8Array( buffer ), buffer.byteLength );\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar geometry = decodeGeometry( draco, decoder, decoderBuffer, taskConfig );\n\n\t\t\t\t\t\tvar buffers = geometry.attributes.map( ( attr ) => attr.array.buffer );\n\n\t\t\t\t\t\tif ( geometry.index ) buffers.push( geometry.index.array.buffer );\n\n\t\t\t\t\t\tself.postMessage( { type: 'decode', id: message.id, geometry }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t} finally {\n\n\t\t\t\t\t\tdraco.destroy( decoderBuffer );\n\t\t\t\t\t\tdraco.destroy( decoder );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction decodeGeometry( draco, decoder, decoderBuffer, taskConfig ) {\n\n\t\tvar attributeIDs = taskConfig.attributeIDs;\n\t\tvar attributeTypes = taskConfig.attributeTypes;\n\n\t\tvar dracoGeometry;\n\t\tvar decodingStatus;\n\n\t\tvar geometryType = decoder.GetEncodedGeometryType( decoderBuffer );\n\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\tdracoGeometry = new draco.Mesh();\n\t\t\tdecodingStatus = decoder.DecodeBufferToMesh( decoderBuffer, dracoGeometry );\n\n\t\t} else if ( geometryType === draco.POINT_CLOUD ) {\n\n\t\t\tdracoGeometry = new draco.PointCloud();\n\t\t\tdecodingStatus = decoder.DecodeBufferToPointCloud( decoderBuffer, dracoGeometry );\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected geometry type.' );\n\n\t\t}\n\n\t\tif ( ! decodingStatus.ok() || dracoGeometry.ptr === 0 ) {\n\n\t\t\tthrow new Error( 'THREE.DRACOLoader: Decoding failed: ' + decodingStatus.error_msg() );\n\n\t\t}\n\n\t\tvar geometry = { index: null, attributes: [] };\n\n\t\t// Gather all vertex attributes.\n\t\tfor ( var attributeName in attributeIDs ) {\n\n\t\t\tvar attributeType = self[ attributeTypes[ attributeName ] ];\n\n\t\t\tvar attribute;\n\t\t\tvar attributeID;\n\n\t\t\t// A Draco file may be created with default vertex attributes, whose attribute IDs\n\t\t\t// are mapped 1:1 from their semantic name (POSITION, NORMAL, ...). Alternatively,\n\t\t\t// a Draco file may contain a custom set of attributes, identified by known unique\n\t\t\t// IDs. glTF files always do the latter, and `.drc` files typically do the former.\n\t\t\tif ( taskConfig.useUniqueIDs ) {\n\n\t\t\t\tattributeID = attributeIDs[ attributeName ];\n\t\t\t\tattribute = decoder.GetAttributeByUniqueId( dracoGeometry, attributeID );\n\n\t\t\t} else {\n\n\t\t\t\tattributeID = decoder.GetAttributeId( dracoGeometry, draco[ attributeIDs[ attributeName ] ] );\n\n\t\t\t\tif ( attributeID === - 1 ) continue;\n\n\t\t\t\tattribute = decoder.GetAttribute( dracoGeometry, attributeID );\n\n\t\t\t}\n\n\t\t\tgeometry.attributes.push( decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) );\n\n\t\t}\n\n\t\t// Add index.\n\t\tif ( geometryType === draco.TRIANGULAR_MESH ) {\n\n\t\t\t// Generate mesh faces.\n\t\t\tvar numFaces = dracoGeometry.num_faces();\n\t\t\tvar numIndices = numFaces * 3;\n\t\t\tvar index = new Uint32Array( numIndices );\n\t\t\tvar indexArray = new draco.DracoInt32Array();\n\n\t\t\tfor ( var i = 0; i < numFaces; ++ i ) {\n\n\t\t\t\tdecoder.GetFaceFromMesh( dracoGeometry, i, indexArray );\n\n\t\t\t\tfor ( var j = 0; j < 3; ++ j ) {\n\n\t\t\t\t\tindex[ i * 3 + j ] = indexArray.GetValue( j );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tgeometry.index = { array: index, itemSize: 1 };\n\n\t\t\tdraco.destroy( indexArray );\n\n\t\t}\n\n\t\tdraco.destroy( dracoGeometry );\n\n\t\treturn geometry;\n\n\t}\n\n\tfunction decodeAttribute( draco, decoder, dracoGeometry, attributeName, attributeType, attribute ) {\n\n\t\tvar numComponents = attribute.num_components();\n\t\tvar numPoints = dracoGeometry.num_points();\n\t\tvar numValues = numPoints * numComponents;\n\t\tvar dracoArray;\n\n\t\tvar array;\n\n\t\tswitch ( attributeType ) {\n\n\t\t\tcase Float32Array:\n\t\t\t\tdracoArray = new draco.DracoFloat32Array();\n\t\t\t\tdecoder.GetAttributeFloatForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Float32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int8Array:\n\t\t\t\tdracoArray = new draco.DracoInt8Array();\n\t\t\t\tdecoder.GetAttributeInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int16Array:\n\t\t\t\tdracoArray = new draco.DracoInt16Array();\n\t\t\t\tdecoder.GetAttributeInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Int32Array:\n\t\t\t\tdracoArray = new draco.DracoInt32Array();\n\t\t\t\tdecoder.GetAttributeInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Int32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint8Array:\n\t\t\t\tdracoArray = new draco.DracoUInt8Array();\n\t\t\t\tdecoder.GetAttributeUInt8ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint8Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint16Array:\n\t\t\t\tdracoArray = new draco.DracoUInt16Array();\n\t\t\t\tdecoder.GetAttributeUInt16ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint16Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tcase Uint32Array:\n\t\t\t\tdracoArray = new draco.DracoUInt32Array();\n\t\t\t\tdecoder.GetAttributeUInt32ForAllPoints( dracoGeometry, attribute, dracoArray );\n\t\t\t\tarray = new Uint32Array( numValues );\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\tthrow new Error( 'THREE.DRACOLoader: Unexpected attribute type.' );\n\n\t\t}\n\n\t\tfor ( var i = 0; i < numValues; i ++ ) {\n\n\t\t\tarray[ i ] = dracoArray.GetValue( i );\n\n\t\t}\n\n\t\tdraco.destroy( dracoArray );\n\n\t\treturn {\n\t\t\tname: attributeName,\n\t\t\tarray: array,\n\t\t\titemSize: numComponents\n\t\t};\n\n\t}\n\n};\n\nDRACOLoader.taskCache = new WeakMap();\n\n/** Deprecated static methods */\n\n/** @deprecated */\nDRACOLoader.setDecoderPath = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderPath() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.setDecoderConfig = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .setDecoderConfig() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.releaseDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .releaseDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\n/** @deprecated */\nDRACOLoader.getDecoderModule = function () {\n\n\tconsole.warn( 'THREE.DRACOLoader: The .getDecoderModule() method has been removed. Use instance methods.' );\n\n};\n\nexport { DRACOLoader };\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {CoreGeometry} from '../Geometry'\n// import lodash_range from 'lodash/range'\nimport lodash_flatten from 'lodash/flatten'\nimport lodash_intersection from 'lodash/intersection'\nimport lodash_concat from 'lodash/concat'\n\nexport class CoreGeometryOperationSkin {\n\tconstructor(\n\t\tprivate geometry: BufferGeometry,\n\t\tprivate geometry1: BufferGeometry,\n\t\tprivate geometry0: BufferGeometry\n\t) {}\n\n\tprocess() {\n\t\tconst geometry_wrapper0 = new CoreGeometry(this.geometry0)\n\t\tconst geometry_wrapper1 = new CoreGeometry(this.geometry1)\n\t\tconst segments0 = geometry_wrapper0.segments()\n\t\tconst segments1 = geometry_wrapper1.segments()\n\n\t\tif (segments0.length === 0 || segments1.length === 0) {\n\t\t\treturn\n\t\t}\n\t\t// find smallest geo to iterate on its array\n\t\tconst geometries_by_segments_count =\n\t\t\tsegments0.length < segments1.length\n\t\t\t\t? [geometry_wrapper0, geometry_wrapper1]\n\t\t\t\t: [geometry_wrapper1, geometry_wrapper0]\n\n\t\tconst smallest_geometry = geometries_by_segments_count[0]\n\t\tconst largest_geometry = geometries_by_segments_count[1]\n\n\t\tconst smallest_segments = smallest_geometry.segments()\n\t\tconst largest_segments = largest_geometry.segments()\n\n\t\tconst smallest_points = smallest_geometry.points()\n\t\tconst largest_points = largest_geometry.points()\n\t\tconst smallest_points_count = smallest_points.length\n\t\t// const largest_points_count = largest_points.length;\n\t\tconst all_points = lodash_concat(smallest_points, largest_points)\n\n\t\t// const half_faces_count = smallest_segments.length;\n\t\tconst points_indices: number[] = []\n\t\tsmallest_segments.forEach((segment, i) => {\n\t\t\tconst matched_segment = largest_segments[i]\n\t\t\t// face 1\n\t\t\tpoints_indices.push(segment[0])\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t\t// face 2\n\t\t\tpoints_indices.push(segment[1])\n\t\t\tpoints_indices.push(matched_segment[1] + smallest_points_count)\n\t\t\tpoints_indices.push(matched_segment[0] + smallest_points_count)\n\t\t})\n\n\t\tconst attributes_in_common = lodash_intersection(\n\t\t\tsmallest_geometry.attrib_names(),\n\t\t\tlargest_geometry.attrib_names()\n\t\t)\n\t\t// const points = all_points //points_indices.map(index=> all_points[index]);\n\t\tattributes_in_common.forEach((attrib_name) => {\n\t\t\tconst attrib_size = smallest_geometry.attrib_size(attrib_name)\n\t\t\tlet attrib_values = all_points.map((point) =>\n\t\t\t\tpoint.attrib_value(attrib_name)\n\t\t\t)\n\t\t\tif (attrib_size > 1) {\n\t\t\t\tattrib_values = lodash_flatten(\n\t\t\t\t\tattrib_values.map((v) => v.toArray())\n\t\t\t\t)\n\t\t\t}\n\t\t\tthis.geometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew Float32BufferAttribute(attrib_values, attrib_size)\n\t\t\t)\n\t\t})\n\n\t\t// const new_indices = lodash_range(points.length);\n\t\tthis.geometry.setIndex(points_indices)\n\t\tthis.geometry.computeVertexNormals()\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\n\nimport {NodeJsonImporter} from './Node';\n// import {BaseNodeObjJsonImporter} from './node/Obj';\n// import {BaseNodeSopSubnetworkJsonImporter} from './node/Subnetwork';\n\nimport {ParamJsonImporter} from './Param';\nimport {ParamMultipleJsonImporter} from './param/Multiple';\nimport {ParamStringJsonImporter} from './param/String';\nimport {ParamRampJsonImporter} from './param/Ramp';\n// import {TypedObjNode} from 'src/engine/nodes/obj/_Base';\nimport {TypedMultipleParam} from 'src/engine/params/_Multiple';\nimport {StringParam} from 'src/engine/params/String';\nimport {RampParam} from 'src/engine/params/Ramp';\n\nexport class JsonImportDispatcher {\n\tstatic dispatch_node(node: BaseNodeType) {\n\t\t// if (node instanceof TypedObjNode) {\n\t\t// \treturn new BaseNodeObjJsonImporter(node);\n\t\t// }\n\t\treturn new NodeJsonImporter(node);\n\t}\n\n\tstatic dispatch_param(param: BaseParamType) {\n\t\tif (param instanceof TypedMultipleParam) {\n\t\t\treturn new ParamMultipleJsonImporter(param);\n\t\t}\n\t\tif (param instanceof StringParam) {\n\t\t\treturn new ParamStringJsonImporter(param);\n\t\t}\n\t\tif (param instanceof RampParam) {\n\t\t\treturn new ParamRampJsonImporter(param);\n\t\t}\n\t\treturn new ParamJsonImporter(param);\n\t}\n}\n\n// export class CodeImporterVisitor {\n// \tstatic node(node: BaseNode): NodeCodeImporter {\n// \t\treturn new NodeCodeImporter(node);\n// \t}\n// \tstatic node_obj(node: BaseNode) {\n// \t\treturn new BaseNodeObjCodeImporter(node);\n// \t}\n// \tstatic node_sop_subnetwork(node: BaseNode) {\n// \t\treturn new BaseNodeSopSubnetworkCodeImporter(node);\n// \t}\n\n// \tstatic visit_param(param: BaseParam) {\n// \t\treturn new ParamCodeImporter(param);\n// \t}\n// \tstatic param_multiple(param: BaseParam) {\n// \t\treturn new ParamMultipleCodeImporter(param);\n// \t}\n// \tstatic param_numeric(param: BaseParam) {\n// \t\treturn new ParamNumericCodeImporter(param);\n// \t}\n// \tstatic param_operator_path(param: BaseParam) {\n// \t\treturn new ParamOperatorPathCodeImporter(param);\n// \t}\n// \tstatic param_string(param: BaseParam) {\n// \t\treturn new ParamStringCodeImporter(param);\n// \t}\n// \tstatic param_ramp(param: BaseParam) {\n// \t\treturn new ParamRampCodeImporter(param);\n// \t}\n// }\n","import lodash_isNumber from 'lodash/isNumber';\n// import lodash_isBoolean from 'lodash/isBoolean'\n\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from 'src/core/String';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\n\nexport class IntegerParam extends TypedNumericParam<ParamType.INTEGER> {\n\tstatic type() {\n\t\treturn ParamType.INTEGER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this.raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.INTEGER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.INTEGER]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.INTEGER], val2: ParamValuesTypeMap[ParamType.INTEGER]) {\n\t\treturn val1 == val2;\n\t}\n\t// convert_value(v: ParamInputValue): number {\n\t// \tconst converted_val = lodash_isBoolean(v)\n\t// \t\t? v\n\t// \t\t\t? 1\n\t// \t\t\t: 0\n\t// \t\t: lodash_isNumber(v)\n\t// \t\t? Math.round(v)\n\t// \t\t: Math.round(parseFloat(v))\n\n\t// \treturn this._ensure_in_range(converted_val)\n\t// }\n\n\t// is_value_expression(v: number | string) {\n\t// \t//!lodash_isNumber(v)\n\t// \t// I was using parseInt before\n\t// \t// but that means that doing param.set(2.9) would set it to 2\n\t// \treturn `${v}` !== `${Math.round(parseFloat(v))}`\n\t// }\n\tstatic convert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tif (lodash_isNumber(raw_val)) {\n\t\t\treturn Math.round(raw_val);\n\t\t} else {\n\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\tconst parsed = parseInt(raw_val);\n\t\t\t\tif (lodash_isNumber(parsed)) {\n\t\t\t\t\treturn parsed;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn null;\n\t\t}\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.INTEGER]): number | null {\n\t\tconst result = IntegerParam.convert(raw_val);\n\t\tif (result) {\n\t\t\treturn this.options.ensure_in_range(result);\n\t\t} else {\n\t\t\treturn result;\n\t\t}\n\t}\n}\n","import {_Math} from 'three/src/math/Math';\n\nexport interface RampPointJson {\n\tposition: number;\n\tvalue: number;\n}\nexport interface RampValueJson {\n\tpoints: RampPointJson[];\n\tinterpolation: string;\n}\n\nexport class RampPoint {\n\tconstructor(private _position: number = 0, private _value: number = 0) {}\n\n\tto_json(): RampPointJson {\n\t\treturn {\n\t\t\tposition: this._position,\n\t\t\tvalue: this._value,\n\t\t};\n\t}\n\tget position() {\n\t\treturn this._position;\n\t}\n\tget value() {\n\t\treturn this._value;\n\t}\n\tcopy(point: RampPoint) {\n\t\tthis._position = point.position;\n\t\tthis._value = point.value;\n\t}\n\tclone() {\n\t\tconst point = new RampPoint();\n\t\tpoint.copy(this);\n\t\treturn point;\n\t}\n\tis_equal(other_point: RampPoint) {\n\t\treturn this._position == other_point.position && this._value == other_point.value;\n\t}\n\tis_equal_json(json: RampPointJson) {\n\t\treturn this._position == json.position && this._value == json.value;\n\t}\n\tfrom_json(json: RampPointJson) {\n\t\tthis._position = json.position;\n\t\tthis._value = json.value;\n\t}\n\tstatic are_equal_json(json1: RampPointJson, json2: RampPointJson) {\n\t\treturn json1.position == json2.position && json1.value == json2.value;\n\t}\n\tstatic from_json(json: RampPointJson) {\n\t\treturn new RampPoint(json.position, json.value);\n\t}\n}\n\nexport enum RampInterpolation {\n\tLINEAR = 'linear',\n}\nexport class RampValue {\n\tprivate _uuid: string;\n\n\tconstructor(private _interpolation: string = RampInterpolation.LINEAR, private _points: RampPoint[] = []) {\n\t\tthis._uuid = _Math.generateUUID();\n\t}\n\n\tget uuid() {\n\t\treturn this._uuid;\n\t}\n\tget interpolation() {\n\t\treturn this._interpolation;\n\t}\n\tget points() {\n\t\treturn this._points;\n\t}\n\tstatic from_json(json: RampValueJson): RampValue {\n\t\tconst points = [];\n\t\tfor (let json_point of json.points) {\n\t\t\tpoints.push(RampPoint.from_json(json_point));\n\t\t}\n\t\treturn new RampValue(json.interpolation, points);\n\t}\n\tto_json(): RampValueJson {\n\t\treturn {\n\t\t\tinterpolation: this._interpolation,\n\t\t\tpoints: this._points.map((p) => p.to_json()),\n\t\t};\n\t}\n\tclone(): RampValue {\n\t\tconst ramp = new RampValue();\n\t\tramp.copy(this);\n\t\treturn ramp;\n\t}\n\tcopy(ramp: RampValue) {\n\t\tthis._interpolation = ramp.interpolation;\n\t\tlet index = 0;\n\t\tfor (let point of ramp.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.copy(point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(point.clone());\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n\n\tis_equal(other_ramp_value: RampValue): boolean {\n\t\tif (this._interpolation != other_ramp_value.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tconst other_points = other_ramp_value.points;\n\t\tif (this._points.length != other_points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = other_points[index];\n\t\t\tif (!point.is_equal(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\n\t\treturn true;\n\t}\n\tis_equal_json(json: RampValueJson) {\n\t\tif (this._interpolation != json.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (this._points.length != json.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point of this._points) {\n\t\t\tconst other_point = json.points[index];\n\t\t\tif (!point.is_equal_json(other_point)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tstatic are_json_equal(json1: RampValueJson, json2: RampValueJson) {\n\t\tif (json1.interpolation != json2.interpolation) {\n\t\t\treturn false;\n\t\t}\n\t\tif (json1.points.length != json2.points.length) {\n\t\t\treturn false;\n\t\t}\n\t\tlet index = 0;\n\t\tfor (let point1 of json1.points) {\n\t\t\tconst point2 = json2.points[index];\n\t\t\tif (!RampPoint.are_equal_json(point1, point2)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t\treturn true;\n\t}\n\tfrom_json(json: RampValueJson) {\n\t\tthis._interpolation = json.interpolation;\n\n\t\tlet index = 0;\n\t\tfor (let json_point of json.points) {\n\t\t\tconst current_point = this._points[index];\n\t\t\tif (current_point) {\n\t\t\t\tcurrent_point.from_json(json_point);\n\t\t\t} else {\n\t\t\t\tthis._points.push(RampPoint.from_json(json_point));\n\t\t\t}\n\t\t\tindex += 1;\n\t\t}\n\t}\n}\n","export enum SceneEvent {\n\tFRAME_RANGE_UPDATED = 'scene_frame_range_updated',\n\tFRAME_UPDATED = 'scene_frame_updated',\n\tPLAY_STATE_UPDATED = 'scene_play_state_updated',\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderChunk} from 'three/src/renderers/shaders/ShaderChunk';\n// import {Shader} from 'three/src/renderers/shaders/ShaderLib'\n// import {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\n// import {MeshPhysicalMaterial} from 'three/src/materials/MeshPhysicalMaterial';\n// import {Material} from 'three/src/materials/Material';\nimport {Vector2} from 'three/src/math/Vector2';\n\n// import {Connection} from 'src/Engine/Node/Gl/GlData';\nimport {LineType} from '../utils/LineType';\n// import {Output} from 'src/Engine/Node/Gl/Output'\n\nimport {ShaderConfig} from '../configs/ShaderConfig';\nimport {VariableConfig} from '../configs/VariableConfig';\nimport {ThreeToGl} from 'src/core/ThreeToGl';\n// const BODY_SPLIT_LINE = 'void main() {'\n// export const BODY_SEPARATOR_LINES = lodash_range(3).map(i=>'\t')\nimport {CodeBuilder} from '../utils/CodeBuilder';\n// import {BaseNode} from 'src/Engine/Node/_Base';\nimport {BaseGlNodeType} from '../../_Base';\nimport {GlobalsGeometryHandler} from '../globals/Geometry';\nimport {TypedAssembler} from '../../../utils/shaders/BaseAssembler';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n// import {IUniformsWithFrame, IUniformsWithResolution} from 'src/engine/scene/utils/UniformsController';\nimport {OutputGlNode} from '../../Output';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {TypedNamedConnectionPoint} from '../../../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../../../utils/connections/ConnectionPointType';\nimport {GlobalsGlNode} from '../../Globals';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\nimport {AttributeGlNode} from '../../Attribute';\nimport {AssemblerControllerNode} from '../Controller';\nimport {GlobalsBaseController} from '../globals/_Base';\nimport {CustomMaterialName} from './_BaseRender';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\ntype StringArrayByShaderName = Map<ShaderName, string[]>;\n\nexport interface IUniforms {\n\t[uniform: string]: IUniform;\n}\ninterface ITemplateShader {\n\tvertexShader?: string;\n\tfragmentShader?: string;\n\tuniforms?: IUniforms;\n}\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <common>'],\n\t[ShaderName.FRAGMENT, '#include <common>'],\n]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <color_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( diffuse, opacity );'],\n]);\nconst LINES_TO_REMOVE_MAP: Map<ShaderName, string[]> = new Map([\n\t[ShaderName.VERTEX, ['#include <begin_vertex>', '#include <beginnormal_vertex>']],\n\t[ShaderName.FRAGMENT, []],\n]);\n\nconst SPACED_LINES = 3;\n\nexport class BaseGlShaderAssembler extends TypedAssembler<BaseGlNodeType> {\n\tprotected _shaders_by_name: Map<ShaderName, string> = new Map();\n\tprotected _lines: StringArrayByShaderName = new Map();\n\tprotected _code_builder: CodeBuilder | undefined;\n\tprivate _param_config_owner: CodeBuilder | undefined;\n\tprotected _root_nodes: BaseGlNodeType[] = [];\n\tprotected _leaf_nodes: BaseGlNodeType[] = [];\n\tprotected _material: ShaderMaterial | undefined;\n\n\tprivate _shader_configs: ShaderConfig[] | undefined;\n\tprivate _variable_configs: VariableConfig[] | undefined;\n\n\tprivate _frame_dependent: boolean = false;\n\tprivate _resolution_dependent: boolean = false;\n\n\tconstructor(protected _gl_parent_node: AssemblerControllerNode) {\n\t\tsuper();\n\t}\n\n\tasync compile() {}\n\n\t// private get material() {\n\t// \treturn (this._material = this._material || this._create_material());\n\t// }\n\t// async get_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tthis._material = this._material || this._create_material();\n\n\t// \tawait this._update_material(/*master_assembler*/);\n\t// \treturn this._material;\n\t// }\n\tprotected _template_shader_for_shader_name(shader_name: ShaderName): string | undefined {\n\t\tswitch (shader_name) {\n\t\t\tcase ShaderName.VERTEX:\n\t\t\t\treturn this._template_shader?.vertexShader;\n\t\t\tcase ShaderName.FRAGMENT:\n\t\t\t\treturn this._template_shader?.fragmentShader;\n\t\t}\n\t}\n\n\tget globals_handler(): GlobalsBaseController | undefined {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler;\n\t}\n\tcompile_allowed(): boolean {\n\t\treturn this._gl_parent_node.assembler_controller.globals_handler != null;\n\t}\n\tshaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\n\tprotected _create_material(): ShaderMaterial | undefined {\n\t\treturn undefined;\n\t}\n\tprotected _build_lines() {\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._replace_template(template, shader_name);\n\t\t\t}\n\t\t}\n\t}\n\n\t// protected _build_lines_for_shader_name(shader_name: ShaderName){\n\t// \tconst template = this._template_shader()\n\t// \tthis._replace_template(template[`${shader_name}Shader`], shader_name)\n\t// }\n\n\tset_root_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tthis._root_nodes = root_nodes;\n\t}\n\tprotected get _template_shader(): ITemplateShader | undefined {\n\t\treturn undefined;\n\t} //Shader - could not find the import?\n\t// abstract _color_declaration(): string\n\t// private async _update_material(/*master_assembler?: BaseGlShaderAssembler*/) {\n\t// \tif (!this.material || !this._material) {\n\t// \t\treturn;\n\t// \t}\n\t// \tconst template_shader = this._template_shader;\n\t// \tif (!template_shader) {\n\t// \t\treturn;\n\t// \t}\n\t// \tthis._lines = new Map();\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t// \t\tif (template) {\n\t// \t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t// \t\t}\n\t// \t}\n\t// \tif (this._root_nodes.length > 0) {\n\t// \t\t// this._output_node.set_color_declaration(this._color_declaration())\n\t// \t\t// if(!master_assembler){\n\t// \t\t// this._output_node.set_assembler(this)\n\t// \t\tawait this.build_code_from_nodes(this._root_nodes);\n\t// \t\t// }\n\n\t// \t\t(this._material as any).extensions = {derivatives: true};\n\t// \t\t// this._material?.derivatives = true;\n\t// \t\tthis._build_lines();\n\t// \t\t// this._lines[ShaderName.FRAGMENT].unshift('#extension GL_OES_standard_derivatives : enable')\n\t// \t}\n\n\t// \t// TODO: typescript - not sure that is still useful\n\t// \t// for (let param_config of this.param_configs()) {\n\t// \t// \tparam_config.material = this._material;\n\t// \t// }\n\n\t// \t// instead of replacing fully the uniforms,\n\t// \t// I simply add to them the new ones or replace the existing ones\n\t// \t// otherwise this would break the particles_system_gpu\n\t// \t// which would not reset correctly when going back to first frame.\n\t// \t// Not entirely sure why, but this seems to be due to the texture uniforms\n\t// \t// which are removed and then readded. This seems to mess up somewhere with how\n\t// \t// the material updates itself...\n\t// \t// this._material.uniforms = this.build_uniforms(template_shader)\n\t// \tconst new_uniforms = this.build_uniforms(template_shader.uniforms);\n\t// \tthis.material.uniforms = this.material.uniforms || {};\n\t// \tfor (let uniform_name of Object.keys(new_uniforms)) {\n\t// \t\tthis.material.uniforms[uniform_name] = new_uniforms[uniform_name];\n\t// \t}\n\n\t// \tfor (let shader_name of this.shader_names) {\n\t// \t\tconst lines = this._lines.get(shader_name);\n\t// \t\tif (lines) {\n\t// \t\t\tconst shader = lines.join('\\n');\n\t// \t\t\tswitch (shader_name) {\n\t// \t\t\t\tcase ShaderName.VERTEX: {\n\t// \t\t\t\t\tthis._material.vertexShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t\tcase ShaderName.FRAGMENT: {\n\t// \t\t\t\t\tthis._material.fragmentShader = shader;\n\t// \t\t\t\t\tbreak;\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \tconst scene = this._gl_parent_node.scene;\n\t// \t// const id = this._gl_parent_node.graph_node_id()\n\t// \tif (this.frame_dependent()) {\n\t// \t\t// make sure not to use this._gl_parent_node.graph_node_id() as the id,\n\t// \t\t// as we need several materials:\n\t// \t\t// - the visible one\n\t// \t\t// - the multiple shadow ones\n\t// \t\t// - and possibly a depth one\n\t// \t\tscene.uniforms_controller.add_frame_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithFrame\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_frame_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\n\t// \tif (this.resolution_dependent()) {\n\t// \t\tscene.uniforms_controller.add_resolution_dependent_uniform_owner(\n\t// \t\t\tthis._material.uuid,\n\t// \t\t\tthis._material.uniforms as IUniformsWithResolution\n\t// \t\t);\n\t// \t} else {\n\t// \t\tscene.uniforms_controller.remove_resolution_dependent_uniform_owner(this._material.uuid);\n\t// \t}\n\t// }\n\n\tprotected build_uniforms(template_uniforms?: IUniforms) {\n\t\tconst new_uniforms = template_uniforms ? UniformsUtils.clone(template_uniforms) : {};\n\t\tfor (let param_config of this.param_configs()) {\n\t\t\tnew_uniforms[param_config.uniform_name] = param_config.uniform;\n\t\t}\n\n\t\tif (this.frame_dependent()) {\n\t\t\tnew_uniforms['frame'] = {\n\t\t\t\t// type: '1f',\n\t\t\t\tvalue: this._gl_parent_node.scene.frame,\n\t\t\t};\n\t\t}\n\t\tif (this.resolution_dependent()) {\n\t\t\tnew_uniforms['resolution'] = {\n\t\t\t\tvalue: new Vector2(1000, 1000),\n\t\t\t};\n\t\t}\n\n\t\treturn new_uniforms;\n\t}\n\n\t//\n\t//\n\t// ROOT NODES AND SHADER NAMES\n\t//\n\t//\n\troot_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\t// return this._root_nodes\n\t\tconst list = [];\n\t\tfor (let node of this._root_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase 'output': {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'attribute': {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler?\n\t\t\t\t\t// const attrib_name = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tleaf_nodes_by_shader_name(shader_name: ShaderName): BaseGlNodeType[] {\n\t\tconst list = [];\n\t\tfor (let node of this._leaf_nodes) {\n\t\t\tswitch (node.type) {\n\t\t\t\tcase GlobalsGlNode.type(): {\n\t\t\t\t\tlist.push(node);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase AttributeGlNode.type(): {\n\t\t\t\t\t// TODO: typescript - gl - why is there a texture allocation controller in the base assembler? AND especially since there is no way to assign it?\n\t\t\t\t\t// const attrib_name: string = (node as AttributeGlNode).attribute_name;\n\t\t\t\t\t// const variable = this._texture_allocations_controller.variable(attrib_name);\n\t\t\t\t\t// if (variable) {\n\t\t\t\t\t// \tconst allocation_shader_name = variable.allocation().shader_name();\n\t\t\t\t\t// \tif (allocation_shader_name == shader_name) {\n\t\t\t\t\t// \t\tlist.push(node);\n\t\t\t\t\t// \t}\n\t\t\t\t\t// }\n\t\t\t\t\t// break;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tset_node_lines_globals(globals_node: GlobalsGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_output(output_node: OutputGlNode, shaders_collection_controller: ShadersCollectionController) {}\n\tset_node_lines_attribute(\n\t\tattribute_node: AttributeGlNode,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t) {}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tget code_builder() {\n\t\treturn (this._code_builder = this._code_builder || new CodeBuilder(this, this._gl_parent_node));\n\t}\n\tasync build_code_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tawait this.code_builder.build_from_nodes(root_nodes);\n\t}\n\tallow_new_param_configs() {\n\t\tthis.code_builder.allow_new_param_configs();\n\t}\n\tdisallow_new_param_configs() {\n\t\tthis.code_builder.disallow_new_param_configs();\n\t}\n\tbuilder_param_configs() {\n\t\treturn this.code_builder.param_configs();\n\t}\n\tbuilder_lines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this.code_builder.lines(shader_name, line_type);\n\t}\n\tall_builder_lines() {\n\t\treturn this.code_builder.all_lines();\n\t}\n\tparam_configs() {\n\t\tconst code_builder = this._param_config_owner || this.code_builder;\n\t\treturn code_builder.param_configs();\n\t}\n\tset_param_configs_owner(param_config_owner: CodeBuilder) {\n\t\tthis._param_config_owner = param_config_owner;\n\t\tif (this._param_config_owner) {\n\t\t\tthis.code_builder.disallow_new_param_configs();\n\t\t} else {\n\t\t\tthis.code_builder.allow_new_param_configs();\n\t\t}\n\t}\n\n\t//\n\t//\n\t// CHILDREN NODES PARAMS\n\t//\n\t//\n\tstatic add_output_params(output_child: OutputGlNode) {\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'position', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR3, 'normal', [0, 0, 0], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.COLOR, 'color', [1, 1, 1], {hidden: true});\n\t\toutput_child.params.add_param(ParamType.FLOAT, 'alpha', 1, {hidden: true});\n\t\toutput_child.params.add_param(ParamType.VECTOR2, 'uv', [0, 0], {hidden: true});\n\t}\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tBaseGlShaderAssembler.add_output_params(output_child);\n\t}\n\tstatic create_globals_node_output_connections() {\n\t\treturn [\n\t\t\tnew TypedNamedConnectionPoint('position', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('normal', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('color', ConnectionPointType.VEC3),\n\t\t\tnew TypedNamedConnectionPoint('uv', ConnectionPointType.VEC2),\n\t\t\tnew TypedNamedConnectionPoint('gl_FragCoord', ConnectionPointType.VEC4),\n\t\t\tnew TypedNamedConnectionPoint('resolution', ConnectionPointType.VEC2),\n\t\t\t// new Connection.Vec2('gl_PointCoord'),\n\t\t\t// new TypedConnectionVec2('uv'),\n\t\t\tnew TypedNamedConnectionPoint('frame', ConnectionPointType.FLOAT),\n\t\t];\n\t}\n\tcreate_globals_node_output_connections() {\n\t\treturn BaseGlShaderAssembler.create_globals_node_output_connections();\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tglobals_node.io.outputs.set_named_output_connection_points(this.create_globals_node_output_connections());\n\t}\n\tallow_attribute_exports() {\n\t\treturn false;\n\t}\n\n\t//\n\t//\n\t// CONFIGS\n\t//\n\t//\n\treset_configs() {\n\t\tthis._reset_shader_configs();\n\t\tthis._reset_variable_configs();\n\t\tthis._reset_frame_dependency();\n\t\tthis._reset_resolution_dependency();\n\t}\n\tget shader_configs() {\n\t\treturn (this._shader_configs = this._shader_configs || this.create_shader_configs());\n\t}\n\tset_shader_configs(shader_configs: ShaderConfig[]) {\n\t\tthis._shader_configs = shader_configs;\n\t}\n\tget shader_names(): ShaderName[] {\n\t\treturn this.shader_configs?.map((sc) => sc.name()) || [];\n\t}\n\tprotected _reset_shader_configs() {\n\t\tthis._shader_configs = undefined;\n\t\t// this.shader_configs; // TODO: typescript - why do I need to re-initialize here?\n\t}\n\tcreate_shader_configs(): ShaderConfig[] {\n\t\treturn [\n\t\t\tnew ShaderConfig(ShaderName.VERTEX, ['position', 'normal', 'uv'], []),\n\t\t\tnew ShaderConfig(ShaderName.FRAGMENT, ['color', 'alpha'], [ShaderName.VERTEX]),\n\t\t];\n\t}\n\tshader_config(name: string): ShaderConfig | undefined {\n\t\treturn this.shader_configs?.filter((sc) => {\n\t\t\treturn sc.name() == name;\n\t\t})[0];\n\t}\n\tvariable_configs() {\n\t\treturn (this._variable_configs = this._variable_configs || this.create_variable_configs());\n\t}\n\tset_variable_configs(variable_configs: VariableConfig[]) {\n\t\tthis._variable_configs = variable_configs;\n\t}\n\tvariable_config(name: string) {\n\t\treturn this.variable_configs().filter((vc) => {\n\t\t\treturn vc.name() == name;\n\t\t})[0];\n\t}\n\tstatic create_variable_configs() {\n\t\treturn [\n\t\t\tnew VariableConfig('position', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\t// default: this.globals_handler().variable_config_default('position'),\n\t\t\t\t// required_definitions: this.globals_handler().variable_config_required_definitions('position'),\n\t\t\t\tprefix: 'vec3 transformed = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('normal', {\n\t\t\t\tdefault_from_attribute: true,\n\t\t\t\tprefix: 'vec3 objectNormal = ',\n\t\t\t\t// post_lines: ['#ifdef USE_TANGENT', 'vec3 objectTangent = vec3( tangent.xyz );', '#endif'],\n\t\t\t}),\n\t\t\tnew VariableConfig('color', {\n\t\t\t\tprefix: 'diffuseColor.xyz = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('alpha', {\n\t\t\t\tprefix: 'diffuseColor.a = ',\n\t\t\t}),\n\t\t\tnew VariableConfig('uv', {\n\t\t\t\t// default_from_attribute: true,\n\t\t\t\tprefix: 'vUv = ',\n\t\t\t\tif: GlobalsGeometryHandler.IF_RULE.uv,\n\t\t\t}),\n\t\t];\n\t}\n\tcreate_variable_configs(): VariableConfig[] {\n\t\treturn BaseGlShaderAssembler.create_variable_configs();\n\t}\n\tprotected _reset_variable_configs() {\n\t\tthis._variable_configs = undefined;\n\t\tthis.variable_configs();\n\t}\n\tinput_names_for_shader_name(root_node: BaseGlNodeType, shader_name: ShaderName) {\n\t\treturn this.shader_config(shader_name)?.input_names() || [];\n\t}\n\n\t// frame dependency\n\tprotected _reset_frame_dependency() {\n\t\tthis._frame_dependent = false;\n\t}\n\tset_frame_dependent() {\n\t\tthis._frame_dependent = true;\n\t}\n\tframe_dependent(): boolean {\n\t\treturn this._frame_dependent;\n\t}\n\t// resolution dependency\n\tprotected _reset_resolution_dependency() {\n\t\tthis._resolution_dependent = false;\n\t}\n\tset_resolution_dependent() {\n\t\tthis._resolution_dependent = true;\n\t}\n\tresolution_dependent(): boolean {\n\t\treturn this._resolution_dependent;\n\t}\n\n\t//\n\t//\n\t// TEMPLATE HOOKS\n\t//\n\t//\n\tprotected insert_define_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName): string | undefined {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\tprotected lines_to_remove(shader_name: ShaderName): string[] | undefined {\n\t\treturn LINES_TO_REMOVE_MAP.get(shader_name);\n\t}\n\n\t//\n\t//\n\t// TEMPLATE CODE REPLACEMENT\n\t//\n\t//\n\n\tprivate _replace_template(template: string, shader_name: ShaderName) {\n\t\tconst function_declaration = this.builder_lines(shader_name, LineType.FUNCTION_DECLARATION);\n\t\tconst define = this.builder_lines(shader_name, LineType.DEFINE);\n\t\t// let all_define = function_declaration.concat(define);\n\t\tconst body = this.builder_lines(shader_name, LineType.BODY);\n\n\t\tlet template_lines = template.split('\\n');\n\t\tconst scene = this._gl_parent_node.scene;\n\t\tconst new_lines = [\n\t\t\t`#define FPS ${ThreeToGl.float(scene.time_controller.fps)}`,\n\t\t\t`#define TIME_INCREMENT (1.0/${ThreeToGl.float(scene.time_controller.fps)})`,\n\t\t\t`#define FRAME_RANGE_START ${ThreeToGl.float(scene.time_controller.frame_range[0])}`,\n\t\t\t`#define FRAME_RANGE_END ${ThreeToGl.float(scene.time_controller.frame_range[1])}`,\n\t\t];\n\n\t\tconst line_before_define = this.insert_define_after(shader_name);\n\t\tconst line_before_body = this.insert_body_after(shader_name);\n\t\tconst lines_to_remove = this.lines_to_remove(shader_name);\n\t\tlet line_before_define_found = false;\n\t\tlet line_before_body_found = false;\n\n\t\tfor (let template_line of template_lines) {\n\t\t\tif (line_before_define_found == true) {\n\t\t\t\tif (function_declaration) {\n\t\t\t\t\tthis._insert_lines(new_lines, function_declaration);\n\t\t\t\t}\n\t\t\t\tif (define) {\n\t\t\t\t\tthis._insert_lines(new_lines, define);\n\t\t\t\t}\n\t\t\t\tline_before_define_found = false;\n\t\t\t}\n\t\t\tif (line_before_body_found == true) {\n\t\t\t\t// this._insert_default_body_declarations(new_lines, shader_name)\n\t\t\t\tif (body) {\n\t\t\t\t\tthis._insert_lines(new_lines, body);\n\t\t\t\t}\n\t\t\t\tline_before_body_found = false;\n\t\t\t}\n\n\t\t\tlet line_remove_required = false;\n\t\t\tif (lines_to_remove) {\n\t\t\t\tfor (let line_to_remove of lines_to_remove) {\n\t\t\t\t\tif (template_line.indexOf(line_to_remove) >= 0) {\n\t\t\t\t\t\tline_remove_required = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!line_remove_required) {\n\t\t\t\tnew_lines.push(template_line);\n\t\t\t} else {\n\t\t\t\tnew_lines.push('// removed:');\n\t\t\t\tnew_lines.push(`//${template_line}`);\n\t\t\t}\n\n\t\t\tif (line_before_define && template_line.indexOf(line_before_define) >= 0) {\n\t\t\t\tline_before_define_found = true;\n\t\t\t}\n\t\t\tif (line_before_body && template_line.indexOf(line_before_body) >= 0) {\n\t\t\t\tline_before_body_found = true;\n\t\t\t}\n\n\t\t\t// if(template_line.indexOf('// INSERT DEFINE') >= 0){\n\t\t\t// } else {\n\t\t\t// \tif(template_line.indexOf('// INSERT BODY') >= 0){\n\t\t\t// \t\tif(body.length > 0){\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t\tbody.forEach(body_line=>{\n\t\t\t// \t\t\t\tnew_lines.push(body_line)\n\t\t\t// \t\t\t})\n\t\t\t// \t\t\tlodash_times(3, ()=>new_lines.push('\t'))\n\t\t\t// \t\t}\n\t\t\t// \t} else {\n\t\t\t// \t\tif(template_line.indexOf('// TO REMOVE') < 0){\n\t\t\t// \t\t\tnew_lines.push(template_line)\n\t\t\t// \t\t}\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\tthis._lines.set(shader_name, new_lines);\n\t}\n\n\t// protected _insert_default_body_declarations(new_lines, shader_name){\n\t// \tnew_lines.push('float POLY_roughness = 1.0;')\n\t// }\n\n\tprivate _insert_lines(new_lines: string[], lines_to_add: string[]) {\n\t\tif (lines_to_add.length > 0) {\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\n\t\t\tfor (let line_to_add of lines_to_add) {\n\t\t\t\tnew_lines.push(line_to_add);\n\t\t\t\t// console.log('push', line_to_add);\n\t\t\t}\n\t\t\tfor (let i = 0; i < SPACED_LINES; i++) {\n\t\t\t\tnew_lines.push('');\n\t\t\t}\n\t\t}\n\t}\n\n\tasync get_custom_materials(): Promise<Map<CustomMaterialName, ShaderMaterial>> {\n\t\treturn new Map<CustomMaterialName, ShaderMaterial>();\n\t}\n\n\t// protected expand_shader(shader_string: string) {\n\t// \tfunction parseIncludes(string: string) {\n\t// \t\tvar pattern = /^[ \\t]*#include +<([\\w\\d./]+)>/gm;\n\t// \t\tfunction replace(match: string, include: string) {\n\t// \t\t\tvar replace = ShaderChunk[include];\n\n\t// \t\t\tif (replace === undefined) {\n\t// \t\t\t\tthrow new Error('Can not resolve #include <' + include + '>');\n\t// \t\t\t}\n\n\t// \t\t\treturn parseIncludes(replace);\n\t// \t\t}\n\n\t// \t\treturn string.replace(pattern, replace);\n\t// \t}\n\t// \treturn parseIncludes(shader_string);\n\t// }\n\n\t//\n\t//\n\t// GLTF EXPORT\n\t//\n\t//\n\t// static convert_material_to_gltf_supported(material: ShaderMaterial): Material{\n\t// \tconst gltf_constructor = this.is_physical() ? MeshPhysicalMaterial : MeshStandardMaterial\n\t// \tconst options = {}\n\t// \tthis._match_uniform('color', options, material, 'diffuse')\n\t// \tthis._match_uniform('map', options, material)\n\t// \tthis._match_uniform('envMap', options, material)\n\t// \tthis._match_uniform('envMapIntensity', options, material)\n\t// \tthis._match_uniform('metalness', options, material)\n\t// \tthis._match_uniform('roughness', options, material)\n\t// \tconst gltf_material = new gltf_constructor(options)\n\t// \treturn gltf_material\n\t// }\n\t// static _match_uniform(name: string, options: object, material: ShaderMaterial, uniform_name?: string) {\n\t// \tuniform_name = uniform_name || name;\n\t// \toptions[name] = material.uniforms[uniform_name].value;\n\t// }\n}\n","import lodash_compact from 'lodash/compact';\nimport lodash_uniq from 'lodash/uniq';\n// import {BaseGlNodeType} from '../../gl/_Base';\n// import {OutputGlNode} from '../gl/Output';\nimport {CoreGraph} from 'src/core/graph/CoreGraph';\nimport {BaseNodeType, TypedNode} from '../../_Base';\nimport {TypedAssembler} from './BaseAssembler';\nimport {MapUtils} from 'src/core/MapUtils';\nimport {ShaderName} from './ShaderName';\n\ntype NumberByString = Map<string, number>;\ntype BooleanByString = Map<string, boolean>;\ntype BooleanByStringByShaderName = Map<ShaderName, BooleanByString>;\ntype StringArrayByString = Map<string, string[]>;\n\n// interface BaseNodeGlArrayByString {\n// \t[propName: string]: BaseNodeGl[]\n// }\n// interface StringArrayByString {\n// \t[propName: string]: string[]\n// }\n\n// import {LineType, LINE_TYPES} from './CodeBuilder'\n\n// const VERTEX_INPUT_NAMES = [\n// \t'position',\n// \t'normal',\n// \t'gl_PointSize'\n// ]\n// const FRAGMENT_INPUT_NAMES = [\n// \t'color',\n// \t'alpha'\n// ]\n\nexport class TypedNodeTraverser<T extends TypedNode<any, T, any>> {\n\tprivate _leaves_graph_id: BooleanByStringByShaderName = new Map();\n\tprivate _graph_ids_by_shader_name: BooleanByStringByShaderName = new Map();\n\tprivate _outputs_by_graph_id: StringArrayByString = new Map();\n\tprivate _depth_by_graph_id: NumberByString = new Map();\n\tprivate _graph_id_by_depth: Map<number, string[]> = new Map();\n\tprivate _graph: CoreGraph;\n\tprivate _shader_name!: ShaderName;\n\n\tconstructor(private _assembler: TypedAssembler<T>, private _gl_parent_node: BaseNodeType) {\n\t\tthis._graph = this._gl_parent_node.scene.graph;\n\t}\n\n\tprivate reset() {\n\t\tthis._leaves_graph_id.clear();\n\t\tthis._outputs_by_graph_id.clear();\n\t\tthis._depth_by_graph_id.clear();\n\t\tthis._graph_id_by_depth.clear();\n\n\t\tthis.shader_names().forEach((shader_name) => {\n\t\t\tthis._graph_ids_by_shader_name.set(shader_name, new Map());\n\t\t});\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\tinput_names_for_shader_name(root_node: T, shader_name: ShaderName) {\n\t\treturn this._assembler.input_names_for_shader_name(root_node, shader_name);\n\t}\n\n\ttraverse(root_nodes: T[]) {\n\t\tthis.reset();\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._leaves_graph_id.set(shader_name, new Map());\n\t\t}\n\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tthis._shader_name = shader_name;\n\t\t\tfor (let root_node of root_nodes) {\n\t\t\t\tthis.find_leaves_from_root_node(root_node);\n\t\t\t\tthis.set_nodes_depth();\n\t\t\t}\n\t\t}\n\n\t\t// graph_ids.forEach((graph_id) => {\n\t\tthis._depth_by_graph_id.forEach((depth: number, graph_id: string) => {\n\t\t\tif (depth != null) {\n\t\t\t\t// this._graph_id_by_depth.set(depth, this._graph_id_by_depth.get(depth) || []);\n\t\t\t\t// this._graph_id_by_depth.get(depth)?.push(graph_id);\n\t\t\t\tMapUtils.push_on_array_at_entry(this._graph_id_by_depth, depth, graph_id);\n\t\t\t}\n\t\t});\n\t}\n\n\tleaves_from_nodes(nodes: T[]) {\n\t\tthis._shader_name = ShaderName.LEAVES_FROM_NODES_SHADER;\n\t\tthis._graph_ids_by_shader_name.set(this._shader_name, new Map());\n\t\tthis._leaves_graph_id.set(this._shader_name, new Map());\n\t\tfor (let node of nodes) {\n\t\t\tthis.find_leaves(node);\n\t\t}\n\n\t\tconst node_ids: string[] = [];\n\t\tthis._leaves_graph_id.get(this._shader_name)?.forEach((value: boolean, key: string) => {\n\t\t\tnode_ids.push(key);\n\t\t});\n\t\treturn this._graph.nodes_from_ids(node_ids) as T[];\n\t}\n\n\tnodes_for_shader_name(shader_name: ShaderName) {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((value: string[], key: number) => {\n\t\t\tdepths.push(key);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tgraph_ids_for_depth.forEach((graph_id: string) => {\n\t\t\t\t\tconst is_present = this._graph_ids_by_shader_name.get(shader_name)?.get(graph_id);\n\t\t\t\t\tif (is_present) {\n\t\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tsorted_nodes() {\n\t\tconst depths: number[] = [];\n\t\tthis._graph_id_by_depth.forEach((ids: string[], depth: number) => {\n\t\t\tdepths.push(depth);\n\t\t});\n\t\tdepths.sort((a, b) => a - b);\n\t\tconst nodes: T[] = [];\n\t\tdepths.forEach((depth) => {\n\t\t\tconst graph_ids_for_depth = this._graph_id_by_depth.get(depth);\n\t\t\tif (graph_ids_for_depth) {\n\t\t\t\tfor (let graph_id of graph_ids_for_depth) {\n\t\t\t\t\tconst node = this._graph.node_from_id(graph_id) as T;\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tnodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn nodes;\n\t}\n\tprivate find_leaves_from_root_node(root_node: T) {\n\t\t// if(this._shader_name == ShaderName.VERTEX){\n\t\t// this._leaves_graph_id[this._shader_name] = {}\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(root_node.graph_node_id, true);\n\n\t\tconst input_names = this.input_names_for_shader_name(root_node, this._shader_name);\n\t\tif (input_names) {\n\t\t\tfor (let input_name of input_names) {\n\t\t\t\t// if (root_node.type == 'output') {\n\t\t\t\tconst input = root_node.io.inputs.named_input(input_name);\n\t\t\t\tif (input) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(\n\t\t\t\t\t\tthis._outputs_by_graph_id,\n\t\t\t\t\t\tinput.graph_node_id,\n\t\t\t\t\t\troot_node.graph_node_id\n\t\t\t\t\t);\n\t\t\t\t\tthis.find_leaves(input);\n\t\t\t\t}\n\t\t\t\t// TODO: typescript - GL - check that I dont need to consider the Attrib as a special case\n\t\t\t\t// } else {\n\t\t\t\t// \t// if attribute\n\t\t\t\t// \tconst input = root_node.io.inputs.connected_named_input();\n\t\t\t\t// \tif (input) {\n\t\t\t\t// \t\tthis.find_leaves(input);\n\t\t\t\t// \t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\t\t// const position_input = this._output.named_input('position')\n\t\t// const normal_input = this._output.named_input('normal')\n\t\t// const instancePosition_input = this._output.named_input('instancePosition')\n\t\t// if(position_input){ this.find_leaves(position_input) }\n\t\t// if(normal_input){ this.find_leaves(normal_input) }\n\t\t// if(instancePosition_input){ this.find_leaves(instancePosition_input) }\n\t\t// }\n\t\t// if(this._shader_name == ShaderName.FRAGMENT){\n\t\t// \tthis._leaves_graph_id[this._shader_name] = {}\n\t\t// \tFRAGMENT_INPUT_NAMES.forEach(name=>{\n\t\t// \t\tconst input = this._output.named_input(name)\n\t\t// \t\tif(input){\n\t\t// \t\t\tthis.find_leaves(input)\n\t\t// \t\t}\n\t\t// \t})\n\t\t// \t// const color_input = this._output.named_input('color')\n\t\t// \t// const alpha_input = this._output.named_input('alpha')\n\t\t// \t// if(color_input){ this.find_leaves(color_input) }\n\t\t// \t// if(alpha_input){ this.find_leaves(alpha_input) }\n\t\t// }\n\n\t\tthis._outputs_by_graph_id.forEach((outputs: string[], graph_id: string) => {\n\t\t\tthis._outputs_by_graph_id.set(graph_id, lodash_uniq(outputs));\n\t\t});\n\t}\n\n\tprivate find_leaves(node: T) {\n\t\tthis._graph_ids_by_shader_name.get(this._shader_name)?.set(node.graph_node_id, true);\n\n\t\tconst inputs = lodash_compact(node.io.inputs.inputs());\n\t\tconst input_graph_ids = lodash_uniq(inputs.map((n) => n.graph_node_id));\n\t\tconst unique_inputs = input_graph_ids.map((graph_id) => this._graph.node_from_id(graph_id)) as T[];\n\t\tif (unique_inputs.length > 0) {\n\t\t\t// const promises = unique_inputs.forEach((input)=>{\n\t\t\tfor (let input of unique_inputs) {\n\t\t\t\tMapUtils.push_on_array_at_entry(this._outputs_by_graph_id, input.graph_node_id, node.graph_node_id);\n\n\t\t\t\tthis.find_leaves(input);\n\t\t\t}\n\t\t} else {\n\t\t\tthis._leaves_graph_id.get(this._shader_name)!.set(node.graph_node_id, true);\n\t\t}\n\t}\n\n\tprivate set_nodes_depth() {\n\t\tthis._leaves_graph_id.forEach((booleans_by_graph_id, shader_name) => {\n\t\t\tbooleans_by_graph_id.forEach((boolean, graph_id) => {\n\t\t\t\tthis.set_node_depth(graph_id);\n\t\t\t});\n\t\t});\n\t\t// const leave_ids = Object.keys(this._leaves_graph_id[this._shader_name]);\n\t\t// leave_ids.forEach((graph_id) => {\n\t\t// \tthis.set_node_depth(graph_id);\n\t\t// });\n\t}\n\n\tprivate set_node_depth(graph_id: string, depth: number = 0) {\n\t\tconst current_depth = this._depth_by_graph_id.get(graph_id);\n\t\tif (current_depth != null) {\n\t\t\tthis._depth_by_graph_id.set(graph_id, Math.max(current_depth, depth));\n\t\t} else {\n\t\t\tthis._depth_by_graph_id.set(graph_id, depth);\n\t\t}\n\n\t\t// const node = this._graph.node_from_id(graph_id);\n\n\t\tconst output_ids = this._outputs_by_graph_id.get(graph_id);\n\t\tif (output_ids) {\n\t\t\toutput_ids.forEach((output_id) => {\n\t\t\t\tthis.set_node_depth(output_id, depth + 1);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {GlobalsGlNode} from '../../Globals';\nimport {ConnectionPointType} from 'src/engine/nodes/utils/connections/ConnectionPointType';\nimport {BaseGlNodeType} from '../../_Base';\nimport {ShadersCollectionController} from '../utils/ShadersCollectionController';\n\nexport abstract class GlobalsBaseController {\n\tprivate static __next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor() {\n\t\tthis._id = GlobalsBaseController.__next_id++;\n\t}\n\tid() {\n\t\treturn this._id;\n\t}\n\n\thandle_globals_node(\n\t\tglobals_node: GlobalsGlNode,\n\t\toutput_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t\t// definitions_by_shader_name: Map<ShaderName, BaseGLDefinition[]>,\n\t\t// body_lines_by_shader_name: Map<ShaderName, string[]>,\n\t\t// body_lines: string[],\n\t\t// dependencies: ShaderName[],\n\t\t// shader_name: ShaderName\n\t): void {}\n\n\tabstract read_attribute(\n\t\tnode: BaseGlNodeType,\n\t\tgl_type: ConnectionPointType,\n\t\tattrib_name: string,\n\t\tshaders_collection_controller: ShadersCollectionController\n\t): string | undefined;\n}\n","import {AssemblerControllerNode} from '../Controller';\n\nexport class GlNodeFinder {\n\tstatic find_output_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('output');\n\t\treturn nodes;\n\t\t// if (nodes.length > 1) {\n\t\t// \tnode.states.error.set('only one output node allowed');\n\t\t// }\n\t\t// return nodes[0];\n\t}\n\tstatic find_attribute_export_nodes(node: AssemblerControllerNode) {\n\t\tconst nodes = node.nodes_by_type('attribute');\n\t\treturn nodes.filter((node) => {\n\t\t\t// do not use attributes that are used as an input, as export\n\t\t\t// return (node.used_output_names().length == 0) &&\n\t\t\treturn node.is_exporting;\n\t\t});\n\t}\n}\n","import lodash_merge from 'lodash/merge';\nimport lodash_intersection from 'lodash/intersection';\nimport lodash_difference from 'lodash/difference';\n// import {VertexColors} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n// import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {FrontSide} from 'three/src/constants';\n// const THREE = {FrontSide, ShaderLib, ShaderMaterial, UniformsUtils, Vector2, VertexColors};\nimport {BaseNodeType, TypedNode} from 'src/engine/nodes/_Base';\n// import {ParamType} from 'src/Engine/Param/_Module'\n\nimport {BaseGlShaderAssembler} from './assemblers/_Base';\nimport {GlobalsBaseController} from './globals/_Base';\n\n// import {JsonImportDispatcher} from 'src/engine/io/json/import/Dispatcher';\nimport {JsonExportDispatcher} from 'src/engine/io/json/export/Dispatcher';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {ShaderName} from '../../utils/shaders/ShaderName';\nimport {OutputGlNode} from '../Output';\nimport {GlobalsGlNode} from '../Globals';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {ParamJsonExporterData} from 'src/engine/io/json/export/Param';\nimport {GlNodeChildrenMap} from 'src/engine/poly/registers/Gl';\nimport {BaseGlNodeType} from '../_Base';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\n// interface BaseShaderAssemblerConstructor {\n// \tnew (): BaseGlShaderAssembler;\n// }\n// interface GlobalsBaseControllerConstructor {\n// \tnew (): GlobalsBaseController;\n// }\n\n// export function AssemblerOwner<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\tchildren_context() {\n// \t\t\treturn NodeContext.GL;\n// \t\t}\n\nexport class AssemblerControllerNode extends TypedNode<any, BaseNodeType, any> {\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\tassembler_controller!: GlAssemblerController<BaseGlShaderAssembler>;\n\t// set_compilation_required_and_dirty() {\n\t// \tthis.assembler_controller.set_compilation_required_and_dirty();\n\t// }\n}\n\ntype BaseGlShaderAssemblerConstructor<A extends BaseGlShaderAssembler> = new (...args: any[]) => A;\nexport class GlAssemblerController<A extends BaseGlShaderAssembler> {\n\tprotected _assembler!: A;\n\tprivate _globals_handler: GlobalsBaseController | undefined; // = new GlobalsGeometryHandler(this);\n\tprivate _compile_required: boolean = true;\n\t// private _requester: BaseNodeSop;\n\t// private _recompiled: boolean = false;\n\tprivate _shaders_by_name: Map<ShaderName, string> = new Map();\n\n\tprivate _deleted_params_data: Map<string, ParamJsonExporterData<ParamType>> = new Map();\n\tprivate _new_params: BaseParamType[] = [];\n\n\tconstructor(private node: AssemblerControllerNode, assembler_class: BaseGlShaderAssemblerConstructor<A>) {\n\t\tthis.node.lifecycle.add_create_hook(this.on_create);\n\n\t\t// if (assembler_class) {\n\t\tthis._assembler = new assembler_class(this.node);\n\t\t// }\n\t\t// this._shadow_depth_assembler = new ShaderAssemblerDepth()\n\t\t// this._shadow_distance_assembler = new ShaderAssemblerDistance()\n\n\t\t// this.self._init_hierarchy_children_owner();\n\n\t\t// let has_display_flag = false;\n\t\t// if (options['has_display_flag']) {\n\t\t// \thas_display_flag = options['has_display_flag'];\n\t\t// }\n\n\t\t// this.self._init_display_flag({\n\t\t// \thas_display_flag: has_display_flag,\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\n\t\t// this ensures that material re evaluate their uniforms\n\t\t// without having the SOP/Material recook\n\t\t// which can be a killer in an animation\n\t\t// But this should be tweaked so that it can recook all params of a node\n\t\t// this.self.add_post_dirty_hook(this.eval_params_and_assign_uniform_values.bind(this))\n\t\t// - UPDATE: this seems to work at the moment. The only issue is that\n\t\t// the particle system now updates 2x when recreating the shaders\n\t\t// but that's fixed with update_on_dirty\n\t\t// - UPDATE 2: now that the params have been refactored, let's try without this\n\t\t// if (options['update_on_dirty'] != false) {\n\t\t// \tthis.self.add_post_dirty_hook(this.cook_main_if_scene_loaded.bind(this));\n\t\t// }\n\t}\n\tset_assembler_globals_handler(globals_handler: GlobalsBaseController) {\n\t\tconst current_id = this._globals_handler ? this._globals_handler.id() : null;\n\t\tconst new_id = globals_handler ? globals_handler.id() : null;\n\n\t\tif (current_id != new_id) {\n\t\t\tthis._globals_handler = globals_handler;\n\t\t\tthis.set_compilation_required_and_dirty();\n\t\t\tthis._assembler.reset_configs();\n\t\t}\n\t}\n\tget assembler() {\n\t\treturn this._assembler;\n\t}\n\tget shaders_by_name() {\n\t\treturn this._shaders_by_name;\n\t}\n\tget globals_handler() {\n\t\treturn this._globals_handler;\n\t}\n\n\t// gltf_supported_material() {\n\t// \treturn this._assembler.constructor.convert_material_to_gltf_supported(this._material);\n\t// }\n\n\tadd_output_params(output_child: OutputGlNode) {\n\t\tthis._assembler.add_output_params(output_child);\n\t}\n\tadd_globals_params(globals_node: GlobalsGlNode) {\n\t\tthis._assembler.add_globals_params(globals_node);\n\t}\n\tallow_attribute_exports() {\n\t\treturn this._assembler.allow_attribute_exports();\n\t}\n\n\ton_create() {\n\t\tconst globals = this.node.create_node('globals');\n\t\tconst output = this.node.create_node('output');\n\n\t\tglobals.ui_data.set_position(new Vector2(-200, 0));\n\t\toutput.ui_data.set_position(new Vector2(200, 0));\n\t}\n\n\t// async compile_if_required() {\n\t// \t// this._recompiled = false;\n\t// \tif (this.compile_required()) {\n\t// \t\t// && !this._param_locked){\n\t// \t\tconst new_material = await this.run_assembler();\n\t// \t\tif (new_material) {\n\t// \t\t\tawait this.node.params.eval_params(this._new_params);\n\t// \t\t\tthis._material = new_material;\n\t// \t\t\t// this._recompiled = true;\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`${this.node.full_path()} failed to generate a material`);\n\t// \t\t}\n\t// \t}\n\t// \tawait this.assign_uniform_values();\n\t// }\n\tset_compilation_required() {\n\t\tthis._compile_required = true;\n\t}\n\tset_compilation_required_and_dirty(trigger_node?: BaseGlNodeType) {\n\t\t// it may be useful to send the trigger node here\n\t\t// but in the end, the material needs to recook fully\n\t\t// in order to properly assign the uniforms\n\t\t// (unless there is a way to re-assign the same value to a uniform that is not meant to be updated)\n\t\tthis.set_compilation_required();\n\t\tthis.node.set_dirty(trigger_node);\n\t}\n\tcompile_required(): boolean {\n\t\treturn this._compile_required;\n\t}\n\n\t// set_root_nodes(nodes: BaseGlNodeType[]) {\n\t// \tthis.assembler.set_root_nodes(nodes);\n\t// }\n\t// set_node_lines_globals(globals_node: GlobalsGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_globals(globals_node, shader_name);\n\t// }\n\t// set_node_lines_output(output_node: OutputGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_output(output_node, shader_name);\n\t// }\n\t// set_node_lines_attribute(attribute_node: AttributeGlNode, shader_name: ShaderName) {\n\t// \tthis.assembler.set_node_lines_attribute(attribute_node, shader_name);\n\t// }\n\n\tasync post_compile() {\n\t\tif (!this._compile_required) {\n\t\t\treturn;\n\t\t}\n\t\t// this.assembler.compile_for_node(this._gl);\n\t\tthis.create_spare_parameters();\n\t\tthis._compile_required = false;\n\t}\n\n\t// private async run_assembler() {\n\t// \tconst output_node = this.find_output_node();\n\t// \tif (output_node) {\n\t// \t\tthis._assembler.set_root_nodes([output_node]);\n\t// \t}\n\t// \tthis.assembler.compile();\n\t// \tconst material = await this._assembler.get_material();\n\t// \tif (material) {\n\t// \t\tthis._shaders_by_name.set(ShaderName.VERTEX, material.vertexShader);\n\t// \t\tthis._shaders_by_name.set(ShaderName.FRAGMENT, material.fragmentShader);\n\n\t// \t\t// assign custom materials\n\t// \t\tconst custom_materials = await this._assembler.get_custom_materials();\n\t// \t\tconst material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t// \t\tmaterial_with_custom_materials.custom_materials = {};\n\t// \t\tcustom_materials.forEach((custom_material, shader_name) => {\n\t// \t\t\tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t// \t\t});\n\n\t// \t\tmaterial.needsUpdate = true;\n\t// \t}\n\n\t// \tthis.create_spare_parameters();\n\n\t// \tthis._compile_required = false;\n\t// \treturn material;\n\t// }\n\n\t// find_output_node() {\n\t// \tconst nodes = this.node.nodes_by_type('output');\n\t// \tif (nodes.length > 1) {\n\t// \t\tthis.node.states.error.set('only one output node allowed');\n\t// \t}\n\t// \treturn nodes[0];\n\t// }\n\t// find_attribute_export_nodes() {\n\t// \tconst nodes = this.node.nodes_by_type('attribute');\n\t// \treturn nodes.filter((node) => {\n\t// \t\t// do not use attributes that are used as an input, as export\n\t// \t\t// return (node.used_output_names().length == 0) &&\n\t// \t\treturn node.is_exporting;\n\t// \t});\n\t// }\n\t// add_output_body_line(output_node, shader_name: ShaderName, input_name: string){\n\t// \tconst input = output_node.named_input(input_name)\n\t// \tconst var_input = output_node.variable_for_input(input_name)\n\t// \tconst variable_config = this.variable_config(input_name)\n\t// \tconst default_value = variable_config.default()\n\t// \tconst prefix = variable_config.prefix()\n\t// \tconst suffix = variable_config.suffix()\n\t// \tconst new_var = input ? ThreeToGl.vector3(var_input) : default_value\n\t// \tif(new_var){\n\t// \t\toutput_node.add_body_lines([`${prefix}${new_var}${suffix}`], shader_name)\n\t// \t}\n\t// }\n\t// set_output_node_lines(output_node){\n\t// \tfor(let shader_name of this.shader_names()){\n\t// \t\tconst body_lines = []\n\t// \t\tconst input_names = this.shader_config(shader_name).input_names()\n\t// \t\toutput_node.set_body_lines([], shader_name)\n\t// \t\tif(input_names){\n\t// \t\t\tfor(let input_name of input_names){\n\t// \t\t\t\tthis.add_output_body_line(output_node, shader_name, input_name)\n\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\n\t// \t// const vertex_body_lines = []\n\t// \t// const fragment_body_lines = []\n\n\t// \t// const named_input_position = this.named_input('position')\n\t// \t// const named_input_point_size = this.named_input('gl_PointSize')\n\t// \t// const named_input_normal = this.named_input('normal')\n\n\t// \t// const var_position = this.variable_for_input('position')\n\t// \t// const var_normal = this.variable_for_input('normal')\n\t// \t// const color = this.variable_for_input('color')\n\t// \t// const alpha = this.variable_for_input('alpha')\n\t// \t// const var_point_size = this.variable_for_input('gl_PointSize')\n\n\t// \t// fragment_body_lines.push( `${this._color_declaration} = ${ThreeToGl.vector3_float(color, alpha)}` )\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\n\t// \t// const new_position_var = named_input_position ? ThreeToGl.vector3(var_position) : 'vec3( position )'\n\t// \t// vertex_body_lines.push( `vec3 transformed = ${new_position_var}` )\n\n\t// \t// if(this.parent().is_point_material()){\n\t// \t// \tconst new_point_size_var = named_input_point_size ? ThreeToGl.float(var_point_size) : '1.0'\n\t// \t// \tvertex_body_lines.push( `float size2 = size * ${new_point_size_var}` )\n\t// \t// }\n\n\t// \t// if(named_input_normal){\n\t// \t// \tconst new_normal_var = ThreeToGl.vector3(var_normal)\n\t// \t// \tvertex_body_lines.push(`objectNormal = ${new_normal_var}`)\n\t// \t// }\n\n\t// \t// this.set_vertex_body_lines(vertex_body_lines)\n\t// \t// this.set_fragment_body_lines(fragment_body_lines)\n\t// }\n\t// private async eval_params_and_assign_uniform_values() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\n\t// \tif (this._assembler) {\n\t// \t\tawait this.self.eval_all_params();\n\t// \t\tawait this.assign_uniform_values();\n\t// \t}\n\t// }\n\t// private async cook_main_if_scene_loaded() {\n\t// \tif (!this.self.scene().loaded()) {\n\t// \t\treturn;\n\t// \t}\n\t// \tif (this.self.params_referree().length > 0) {\n\t// \t\tawait this.self.cook_main();\n\t// \t}\n\t// \t// this.cook_main_without_inputs()\n\t// }\n\tasync assign_uniform_values() {\n\t\tif (this._assembler) {\n\t\t\tfor (let param_config of this._assembler.param_configs()) {\n\t\t\t\tawait param_config.set_uniform_value(this.node);\n\t\t\t}\n\t\t}\n\t}\n\n\t// process_uniforms(renderer, display_scene, camera, geometry, material, group) {\n\t// \tconst scene_frame = this.scene().frame()\n\n\t// \tconst material_frame = material.uniforms.frame\n\t// \tif(material_frame){ // check needed in case this method is given a post process material\n\t// \t\tmaterial.uniforms.frame.value = scene_frame\n\t// \t}\n\n\t// \tconst custom_materials = material.custom_materials\n\t// \tif(custom_materials){\n\t// \t\tfor(let custom_material_name of Object.keys(custom_materials)){\n\t// \t\t\tconst custom_material = custom_materials[custom_material_name]\n\t// \t\t\tcustom_material.uniforms.frame.value = scene_frame\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// create_material(){\n\t// \tconst template_shader = THREE.ShaderLib.basic\n\n\t// \tconst uniforms = THREE.UniformsUtils.clone( template_shader.uniforms )\n\t// \t// uniforms['frame'] = {\n\t// \t// \ttype: '1f',\n\t// \t// \tvalue: 1\n\t// \t// }\n\n\t// \tconst material = new THREE.ShaderMaterial({\n\t// \t\t// vertexColors: THREE.VertexColors,\n\t// \t\t// side: THREE.FrontSide,\n\t// \t\t// transparent: true,\n\t// \t\t// fog: true,\n\t// \t\t// lights: false,\n\t// \t\tuniforms: uniforms,\n\t// \t\tvertexShader: template_shader.vertexShader,\n\t// \t\tfragmentShader: template_shader.fragmentShader\n\t// \t})\n\t// \tthrow \"wtf\"\n\t// \treturn material\n\t// }\n\tcreate_spare_parameters() {\n\t\tconst current_spare_param_names: string[] = this.node.params.spare_names;\n\t\tconst param_configs = this._assembler.param_configs();\n\t\tconst assembler_param_names = param_configs.map((c) => c.name);\n\t\t// TODO: also remove the params that change type\n\t\tconst spare_param_names_to_add = lodash_difference(assembler_param_names, current_spare_param_names);\n\t\tconst spare_param_names_to_remove = lodash_difference(current_spare_param_names, assembler_param_names);\n\t\tthis._new_params = [];\n\n\t\t// check that param_names_to_add does not include any currently existing param names (that are not spare)\n\t\tconst current_param_names = this.node.params.names;\n\t\tconst spare_params_with_same_name_as_params = lodash_intersection(\n\t\t\tspare_param_names_to_add,\n\t\t\tcurrent_param_names\n\t\t);\n\t\tif (spare_params_with_same_name_as_params.length > 0) {\n\t\t\tconst error_message = `${this.node.full_path()} attempts to create spare params called '${spare_params_with_same_name_as_params.join(\n\t\t\t\t', '\n\t\t\t)}' with same name as params`;\n\t\t\tconsole.warn(error_message);\n\t\t\tthis.node.states.error.set(error_message);\n\t\t}\n\n\t\tspare_param_names_to_remove.forEach((param_name) => {\n\t\t\t// store the param data, in case it gets recreated later\n\t\t\t// this allows expressions to be kept in memory\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param);\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tthis._deleted_params_data.set(param.name, params_data);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis.node.params.delete_param(param_name);\n\t\t});\n\n\t\t// this.within_param_folder('spare_params', () => {\n\t\tfor (let param_config of param_configs) {\n\t\t\tif (spare_param_names_to_add.indexOf(param_config.name) >= 0) {\n\t\t\t\t// TODO: shouldn't it be cook: false ??\n\t\t\t\t// as there is no need to cook the node if I'm only changing the uniform\n\t\t\t\t// unless maybe for textures?\n\t\t\t\t// but if cook is false, there is no reason for it to be updated\n\t\t\t\tconst options = lodash_merge(param_config.param_options, {spare: true, cook: true});\n\n\t\t\t\tconst param = this.node.add_param(\n\t\t\t\t\tparam_config.type,\n\t\t\t\t\tparam_config.name,\n\t\t\t\t\tparam_config.default_value,\n\t\t\t\t\toptions\n\t\t\t\t);\n\t\t\t\tif (param) {\n\t\t\t\t\t// restore saved state, like expressions\n\t\t\t\t\tconst param_data = this._deleted_params_data.get(param.name);\n\t\t\t\t\tif (param_data) {\n\t\t\t\t\t\t// TODO: typescript\n\t\t\t\t\t\t// JsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t\t\t// looks like there are still some cases where the expression are not recreated\n\t\t\t\t\t\t// so commenting this out now\n\t\t\t\t\t\t// delete this._deleted_params_data[param.name()]\n\t\t\t\t\t}\n\n\t\t\t\t\tthis._new_params.push(param);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (spare_param_names_to_add.length > 0 || spare_param_names_to_remove.length > 0) {\n\t\t\tthis.node.params.post_create_spare_params();\n\t\t\tthis.node.emit(NodeEvent.PARAMS_UPDATED);\n\t\t}\n\t}\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nclass CacheSopParamsConfig extends NodeParamsConfig {\n\tcache = ParamConfig.STRING('', {hidden: true});\n\treset = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tCacheSopNode.PARAM_CALLBACK_reset(node as CacheSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new CacheSopParamsConfig();\n\nexport class CacheSopNode extends TypedSopNode<CacheSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'cache';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to cache'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst is_cache_empty = this.pv.cache == '' || this.pv.cache == null;\n\t\tconst core_group = input_contents[0];\n\t\tif (is_cache_empty && core_group) {\n\t\t\tconst json = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tjson.push(object.toJSON());\n\t\t\t}\n\t\t\tthis.set_core_group(core_group);\n\t\t\tthis.p.cache.set(JSON.stringify(json));\n\t\t} else {\n\t\t\tif (this.pv.cache) {\n\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\tconst jsons = JSON.parse(this.pv.cache);\n\t\t\t\tconst all_objects = [];\n\t\t\t\tfor (let json of jsons) {\n\t\t\t\t\tconst parent = obj_loader.parse(json);\n\t\t\t\t\t// for(let child of parent.children){\n\t\t\t\t\tall_objects.push(parent);\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t\tthis.set_objects(all_objects);\n\t\t\t} else {\n\t\t\t\tthis.set_objects([]);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_reset(node: CacheSopNode, param: BaseParamType) {\n\t\tnode.param_callback_PARAM_CALLBACK_reset();\n\t}\n\tasync param_callback_PARAM_CALLBACK_reset() {\n\t\tthis.p.cache.set('');\n\t\tthis.request_container();\n\t}\n}\n","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */var mod={}, l=void 0,aa=mod;function r(c,d){var a=c.split(\".\"),b=aa;!(a[0]in b)&&b.execScript&&b.execScript(\"var \"+a[0]);for(var e;a.length&&(e=a.shift());)!a.length&&d!==l?b[e]=d:b=b[e]?b[e]:b[e]={}};var t=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array&&\"undefined\"!==typeof DataView;function v(c){var d=c.length,a=0,b=Number.POSITIVE_INFINITY,e,f,g,h,k,m,n,p,s,x;for(p=0;p<d;++p)c[p]>a&&(a=c[p]),c[p]<b&&(b=c[p]);e=1<<a;f=new (t?Uint32Array:Array)(e);g=1;h=0;for(k=2;g<=a;){for(p=0;p<d;++p)if(c[p]===g){m=0;n=h;for(s=0;s<g;++s)m=m<<1|n&1,n>>=1;x=g<<16|p;for(s=m;s<e;s+=k)f[s]=x;++h}++g;h<<=1;k<<=1}return[f,a,b]};function w(c,d){this.g=[];this.h=32768;this.d=this.f=this.a=this.l=0;this.input=t?new Uint8Array(c):c;this.m=!1;this.i=y;this.r=!1;if(d||!(d={}))d.index&&(this.a=d.index),d.bufferSize&&(this.h=d.bufferSize),d.bufferType&&(this.i=d.bufferType),d.resize&&(this.r=d.resize);switch(this.i){case A:this.b=32768;this.c=new (t?Uint8Array:Array)(32768+this.h+258);break;case y:this.b=0;this.c=new (t?Uint8Array:Array)(this.h);this.e=this.z;this.n=this.v;this.j=this.w;break;default:throw Error(\"invalid inflate mode\");\n}}var A=0,y=1,B={t:A,s:y};\nw.prototype.k=function(){for(;!this.m;){var c=C(this,3);c&1&&(this.m=!0);c>>>=1;switch(c){case 0:var d=this.input,a=this.a,b=this.c,e=this.b,f=d.length,g=l,h=l,k=b.length,m=l;this.d=this.f=0;if(a+1>=f)throw Error(\"invalid uncompressed block header: LEN\");g=d[a++]|d[a++]<<8;if(a+1>=f)throw Error(\"invalid uncompressed block header: NLEN\");h=d[a++]|d[a++]<<8;if(g===~h)throw Error(\"invalid uncompressed block header: length verify\");if(a+g>d.length)throw Error(\"input buffer is broken\");switch(this.i){case A:for(;e+\ng>b.length;){m=k-e;g-=m;if(t)b.set(d.subarray(a,a+m),e),e+=m,a+=m;else for(;m--;)b[e++]=d[a++];this.b=e;b=this.e();e=this.b}break;case y:for(;e+g>b.length;)b=this.e({p:2});break;default:throw Error(\"invalid inflate mode\");}if(t)b.set(d.subarray(a,a+g),e),e+=g,a+=g;else for(;g--;)b[e++]=d[a++];this.a=a;this.b=e;this.c=b;break;case 1:this.j(ba,ca);break;case 2:for(var n=C(this,5)+257,p=C(this,5)+1,s=C(this,4)+4,x=new (t?Uint8Array:Array)(D.length),S=l,T=l,U=l,u=l,M=l,F=l,z=l,q=l,V=l,q=0;q<s;++q)x[D[q]]=\nC(this,3);if(!t){q=s;for(s=x.length;q<s;++q)x[D[q]]=0}S=v(x);u=new (t?Uint8Array:Array)(n+p);q=0;for(V=n+p;q<V;)switch(M=E(this,S),M){case 16:for(z=3+C(this,2);z--;)u[q++]=F;break;case 17:for(z=3+C(this,3);z--;)u[q++]=0;F=0;break;case 18:for(z=11+C(this,7);z--;)u[q++]=0;F=0;break;default:F=u[q++]=M}T=t?v(u.subarray(0,n)):v(u.slice(0,n));U=t?v(u.subarray(n)):v(u.slice(n));this.j(T,U);break;default:throw Error(\"unknown BTYPE: \"+c);}}return this.n()};\nvar G=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],D=t?new Uint16Array(G):G,H=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],I=t?new Uint16Array(H):H,J=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],K=t?new Uint8Array(J):J,L=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],da=t?new Uint16Array(L):L,ea=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,\n13,13],N=t?new Uint8Array(ea):ea,O=new (t?Uint8Array:Array)(288),P,fa;P=0;for(fa=O.length;P<fa;++P)O[P]=143>=P?8:255>=P?9:279>=P?7:8;var ba=v(O),Q=new (t?Uint8Array:Array)(30),R,ga;R=0;for(ga=Q.length;R<ga;++R)Q[R]=5;var ca=v(Q);function C(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h;b<d;){if(f>=g)throw Error(\"input buffer is broken\");a|=e[f++]<<b;b+=8}h=a&(1<<d)-1;c.f=a>>>d;c.d=b-d;c.a=f;return h}\nfunction E(c,d){for(var a=c.f,b=c.d,e=c.input,f=c.a,g=e.length,h=d[0],k=d[1],m,n;b<k&&!(f>=g);)a|=e[f++]<<b,b+=8;m=h[a&(1<<k)-1];n=m>>>16;if(n>b)throw Error(\"invalid code length: \"+n);c.f=a>>n;c.d=b-n;c.a=f;return m&65535}\nw.prototype.j=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length-258,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(this.b=b,a=this.e(),b=this.b),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b>=e&&(this.b=b,a=this.e(),b=this.b);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.w=function(c,d){var a=this.c,b=this.b;this.o=c;for(var e=a.length,f,g,h,k;256!==(f=E(this,c));)if(256>f)b>=e&&(a=this.e(),e=a.length),a[b++]=f;else{g=f-257;k=I[g];0<K[g]&&(k+=C(this,K[g]));f=E(this,d);h=da[f];0<N[f]&&(h+=C(this,N[f]));b+k>e&&(a=this.e(),e=a.length);for(;k--;)a[b]=a[b++-h]}for(;8<=this.d;)this.d-=8,this.a--;this.b=b};\nw.prototype.e=function(){var c=new (t?Uint8Array:Array)(this.b-32768),d=this.b-32768,a,b,e=this.c;if(t)c.set(e.subarray(32768,c.length));else{a=0;for(b=c.length;a<b;++a)c[a]=e[a+32768]}this.g.push(c);this.l+=c.length;if(t)e.set(e.subarray(d,d+32768));else for(a=0;32768>a;++a)e[a]=e[d+a];this.b=32768;return e};\nw.prototype.z=function(c){var d,a=this.input.length/this.a+1|0,b,e,f,g=this.input,h=this.c;c&&(\"number\"===typeof c.p&&(a=c.p),\"number\"===typeof c.u&&(a+=c.u));2>a?(b=(g.length-this.a)/this.o[2],f=258*(b/2)|0,e=f<h.length?h.length+f:h.length<<1):e=h.length*a;t?(d=new Uint8Array(e),d.set(h)):d=h;return this.c=d};\nw.prototype.n=function(){var c=0,d=this.c,a=this.g,b,e=new (t?Uint8Array:Array)(this.l+(this.b-32768)),f,g,h,k;if(0===a.length)return t?this.c.subarray(32768,this.b):this.c.slice(32768,this.b);f=0;for(g=a.length;f<g;++f){b=a[f];h=0;for(k=b.length;h<k;++h)e[c++]=b[h]}f=32768;for(g=this.b;f<g;++f)e[c++]=d[f];this.g=[];return this.buffer=e};\nw.prototype.v=function(){var c,d=this.b;t?this.r?(c=new Uint8Array(d),c.set(this.c.subarray(0,d))):c=this.c.subarray(0,d):(this.c.length>d&&(this.c.length=d),c=this.c);return this.buffer=c};function W(c,d){var a,b;this.input=c;this.a=0;if(d||!(d={}))d.index&&(this.a=d.index),d.verify&&(this.A=d.verify);a=c[this.a++];b=c[this.a++];switch(a&15){case ha:this.method=ha;break;default:throw Error(\"unsupported compression method\");}if(0!==((a<<8)+b)%31)throw Error(\"invalid fcheck flag:\"+((a<<8)+b)%31);if(b&32)throw Error(\"fdict flag is not supported\");this.q=new w(c,{index:this.a,bufferSize:d.bufferSize,bufferType:d.bufferType,resize:d.resize})}\nW.prototype.k=function(){var c=this.input,d,a;d=this.q.k();this.a=this.q.a;if(this.A){a=(c[this.a++]<<24|c[this.a++]<<16|c[this.a++]<<8|c[this.a++])>>>0;var b=d;if(\"string\"===typeof b){var e=b.split(\"\"),f,g;f=0;for(g=e.length;f<g;f++)e[f]=(e[f].charCodeAt(0)&255)>>>0;b=e}for(var h=1,k=0,m=b.length,n,p=0;0<m;){n=1024<m?1024:m;m-=n;do h+=b[p++],k+=h;while(--n);h%=65521;k%=65521}if(a!==(k<<16|h)>>>0)throw Error(\"invalid adler-32 checksum\");}return d};var ha=8;r(\"Zlib.Inflate\",W);r(\"Zlib.Inflate.prototype.decompress\",W.prototype.k);var X={ADAPTIVE:B.s,BLOCK:B.t},Y,Z,$,ia;if(Object.keys)Y=Object.keys(X);else for(Z in Y=[],$=0,X)Y[$++]=Z;$=0;for(ia=Y.length;$<ia;++$)Z=Y[$],r(\"Zlib.Inflate.BufferType.\"+Z,X[Z]);\nvar Zlib=mod.Zlib;\nexport { Zlib }","import {PolyScene} from '../PolyScene';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\nexport class CamerasController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_master_camera_node_path: string | null = null;\n\n\tset_master_camera_node_path(camera_node_path: string) {\n\t\tthis._master_camera_node_path = camera_node_path;\n\t}\n\tget master_camera_node_path() {\n\t\treturn this._master_camera_node_path;\n\t}\n\tget master_camera_node(): BaseCameraObjNodeType | null {\n\t\tif (this.master_camera_node_path) {\n\t\t\tconst camera_node = this.scene.node(this.master_camera_node_path) as BaseCameraObjNodeType | null;\n\t\t\treturn camera_node;\n\t\t} else {\n\t\t\tconsole.warn('master camera node not found');\n\t\t\treturn this._find_any_camera();\n\t\t}\n\t}\n\n\tprivate _find_any_camera(): BaseCameraObjNodeType | null {\n\t\tconst root = this.scene.root;\n\t\treturn root.nodes_by_type('perspective_camera')[0] || root.nodes_by_type('orthographic_camera')[0];\n\t}\n}\n","// import {CoreGraphNode} from './CoreGraphNode';\n// import { CoreGraphNodeScene } from './CoreGraphNodeScene';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {PolyScene} from '../PolyScene';\n\n// interface CookerQueue {\n// \t[propName: string]: CoreGraphNodeSceneNamed;\n// }\n\nexport class Cooker {\n\tprivate _queue: Map<string, CoreGraphNode | undefined> = new Map<string, CoreGraphNode | undefined>();\n\tprivate _block_level: number = 0;\n\tprivate _process_item_bound = this._process_item.bind(this);\n\n\tconstructor(private _scene: PolyScene) {\n\t\tthis._block_level = 0;\n\t}\n\n\tblock() {\n\t\tthis._block_level += 1;\n\t}\n\tunblock() {\n\t\tthis._block_level -= 1;\n\t\tif (this._block_level < 0) {\n\t\t\tthis._block_level = 0;\n\t\t}\n\n\t\tthis.process_queue();\n\t}\n\t// unblock_later: ->\n\t// \tsetTimeout( this.unblock.bind(this), 0 )\n\tget blocked() {\n\t\treturn this._block_level > 0;\n\t}\n\n\tenqueue(node: CoreGraphNode, original_trigger_graph_node?: CoreGraphNode) {\n\t\tthis._queue.set(node.graph_node_id, original_trigger_graph_node);\n\t}\n\n\tprocess_queue() {\n\t\tif (this.blocked) {\n\t\t\treturn;\n\t\t}\n\t\t// let node: CoreGraphNode;\n\t\t// console.warn('FLUSH', Object.keys(this._queue).length);\n\n\t\tthis._queue.forEach(this._process_item_bound);\n\t\t// for (let id of Object.keys(this._queue)) {\n\t\t// \tnode = this._queue[id];\n\t\t// \tif (node) {\n\t\t// \t\tdelete this._queue[id];\n\t\t// \t\tnode.dirty_controller.run_post_dirty_hooks();\n\t\t// \t}\n\t\t// }\n\t}\n\tprivate _process_item(original_trigger_graph_node: CoreGraphNode | undefined, id: string) {\n\t\tconst node = this._scene.graph.node_from_id(id);\n\t\tif (node) {\n\t\t\tthis._queue.delete(id);\n\t\t\tnode.dirty_controller.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t}\n\t}\n}\n","import {Graph, alg} from '@dagrejs/graphlib';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\n// import {NodeSimple} from './NodeSimple'\n// import {GraphNode} from './concerns/GraphNode'\n// import {SceneNodeDirtyable} from './SceneNodeDirtyable';\n\n// class DummyClass {}\n// class GraphNodeDummy extends Dirtyable(DummyClass) {}\n\n// TODO: typescript, using ids with a specific type (https://basarat.gitbook.io/typescript/main-1/nominaltyping)\n// export interface CoreGraphNodeId extends String {\n// \t// _CoreGraphNodeIdBrand: string;\n// }\nexport type CoreGraphNodeId = string;\nimport {CoreGraphNode} from './CoreGraphNode';\n\nexport class CoreGraph {\n\t_graph: Graph;\n\t_next_id: number = 0;\n\t_scene: PolyScene | undefined;\n\n\tconstructor() {\n\t\tthis._graph = new Graph({\n\t\t\tdirected: true,\n\t\t\tcompound: false,\n\t\t\tmultigraph: true,\n\t\t});\n\t}\n\n\tgraph() {\n\t\treturn this._graph;\n\t}\n\tset_scene(scene: PolyScene) {\n\t\tthis._scene = scene;\n\t}\n\tscene() {\n\t\treturn this._scene;\n\t}\n\n\tnext_id(): CoreGraphNodeId {\n\t\treturn (<unknown>`${(this._next_id += 1)}`) as CoreGraphNodeId;\n\t}\n\n\tsetNode(node: CoreGraphNode) {\n\t\tthis._graph.setNode(node.graph_node_id, node);\n\t}\n\n\tremoveNode(node: CoreGraphNode) {\n\t\tthis._graph.removeNode(node.graph_node_id);\n\t}\n\n\tnodes_from_ids(ids: string[]) {\n\t\tconst nodes: CoreGraphNode[] = [];\n\t\tfor (let id of ids) {\n\t\t\tconst node = this.node_from_id(id);\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t\t// if (ids) {\n\t\t// \tlet node: any;\n\t\t// \treturn ids.map((id) => {\n\t\t// \t\tif ((node = this.node_from_id(id)) != null) {\n\t\t// \t\t\treturn node;\n\t\t// \t\t} else {\n\t\t// \t\t\treturn console.warn(`could not find node with id ${id}`);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// } else {\n\t\t// \treturn [];\n\t\t// }\n\t}\n\t// TODO: typescript: this should return CoreGraphNodeId|null\n\tnode_from_id(id: string): CoreGraphNode {\n\t\treturn this._graph.node(id);\n\t}\n\n\tconnect(src: CoreGraphNode, dest: CoreGraphNode): boolean {\n\t\tconst src_id = src.graph_node_id;\n\t\tconst dest_id = dest.graph_node_id;\n\n\t\tif (this._graph.hasNode(src_id) && this._graph.hasNode(dest_id)) {\n\t\t\tthis._graph.setEdge(src_id, dest_id);\n\n\t\t\t// const scene_auto_updating = this.scene().auto_updating();\n\t\t\tconst scene_loading = this._scene ? this._scene.loading_controller.is_loading : true;\n\t\t\tconst check_if_graph_has_cycle = !scene_loading;\n\t\t\tlet graph_has_cycle = false;\n\t\t\tif (check_if_graph_has_cycle) {\n\t\t\t\tgraph_has_cycle = !alg.isAcyclic(this._graph);\n\t\t\t}\n\n\t\t\tif (graph_has_cycle) {\n\t\t\t\tthis._graph.removeEdge(src_id, dest_id);\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`attempt to connect non existing node ${src_id} or ${dest_id}`);\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tdisconnect(src: CoreGraphNode, dest: CoreGraphNode) {\n\t\tif (src && dest) {\n\t\t\tconst src_id_s = src.graph_node_id;\n\t\t\tconst dest_id_s = dest.graph_node_id;\n\t\t\tthis._graph.removeEdge(src_id_s, dest_id_s);\n\n\t\t\tsrc.dirty_controller.clear_successors_cache_with_predecessors();\n\t\t}\n\t}\n\tdisconnect_predecessors(node: CoreGraphNode) {\n\t\tconst predecessors = this.predecessors(node);\n\t\tfor (let predecessor of predecessors) {\n\t\t\tthis.disconnect(predecessor, node);\n\t\t}\n\t}\n\tdisconnect_successors(node: CoreGraphNode) {\n\t\tconst successors = this.successors(node);\n\t\tfor (let successor of successors) {\n\t\t\tthis.disconnect(node, successor);\n\t\t}\n\t}\n\t// disconnect_predecessors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst predecessor_ids = this._graph.predecessors(node_id);\n\t// \tif( predecessor_ids ){\n\t// \t\tfor(let predecessor_id of predecessor_ids){\n\t// \t\t\tthis._graph.removeEdge(predecessor_id, node_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\t// disconnect_successors(node){\n\t// \tconst node_id = node.graph_node_id;\n\t// \tconst successor_ids = this._graph.successors(node_id);\n\t// \tif (successor_ids) {\n\t// \t\tfor(let successor_id of successor_ids){\n\t// \t\t\tthis._graph.removeEdge(node_id, successor_id);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tpredecessor_ids(id: CoreGraphNodeId) {\n\t\treturn this._graph.predecessors(id) || [];\n\t}\n\tpredecessors(node: CoreGraphNode) {\n\t\tconst ids = this.predecessor_ids(node.graph_node_id);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tsuccessor_ids(id: string): CoreGraphNodeId[] {\n\t\treturn this._graph.successors(id) || [];\n\t}\n\tsuccessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.successor_ids(node.graph_node_id) || [];\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\n\tprivate all_next_ids(node: CoreGraphNode, method: 'successor_ids' | 'predecessor_ids'): CoreGraphNodeId[] {\n\t\tconst ids: CoreGraphNodeId[] = [];\n\t\tlet next_ids = this[method](node.graph_node_id);\n\n\t\twhile (next_ids.length > 0) {\n\t\t\tconst next_next_ids = [];\n\t\t\tfor (let next_id of next_ids) {\n\t\t\t\tfor (let next_next_id of this[method](next_id)) {\n\t\t\t\t\tnext_next_ids.push(next_next_id);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (let id of next_ids) {\n\t\t\t\tids.push(id);\n\t\t\t}\n\t\t\tfor (let id of next_next_ids) {\n\t\t\t\tnext_ids.push(id);\n\t\t\t}\n\t\t\tnext_ids = next_next_ids;\n\t\t}\n\t\treturn ids;\n\t}\n\tall_predecessor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'predecessor_ids');\n\t}\n\tall_successor_ids(node: CoreGraphNode): CoreGraphNodeId[] {\n\t\treturn this.all_next_ids(node, 'successor_ids');\n\t}\n\tall_predecessors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_predecessor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n\tall_successors(node: CoreGraphNode): CoreGraphNode[] {\n\t\tconst ids = this.all_successor_ids(node);\n\t\treturn this.nodes_from_ids(ids);\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\n\ntype Callback = (value: void) => void;\n\nexport class CookController {\n\tprivate _cooking_nodes_by_id: Map<string, BaseNodeType> = new Map();\n\tprivate _resolves: Callback[] = [];\n\tconstructor() {}\n\n\tadd_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.set(node.graph_node_id, node);\n\t}\n\tremove_node(node: BaseNodeType) {\n\t\tthis._cooking_nodes_by_id.delete(node.graph_node_id);\n\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\tthis.flush();\n\t\t}\n\t}\n\n\tprivate flush() {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback();\n\t\t}\n\t}\n\n\tasync wait_for_cooks_completed(): Promise<void> {\n\t\tif (this._cooking_nodes_by_id.size == 0) {\n\t\t\treturn;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport 'src/engine/Poly';\nimport {POLY} from 'src/engine/Poly';\nimport {SceneEvent} from 'src/engine/poly/SceneEvent';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {ParamEvent} from 'src/engine/poly/ParamEvent';\n\n// type Callback = (emitter: CoreGraphNodeScene) => void; // TODO: typescript: maybe arg should be an event instead of the emitter\ninterface EventsListener {\n\tprocess_events: (emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) => void;\n}\n\nexport class EventsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _events_listener: EventsListener | undefined;\n\n\tset_listener(events_listener: EventsListener) {\n\t\tthis._events_listener = events_listener;\n\t\t// this._store.scene = this;\n\t}\n\tget events_listener() {\n\t\treturn this._events_listener;\n\t}\n\tdispatch(emitter: CoreGraphNode, event_name: SceneEvent | NodeEvent | ParamEvent, data?: any) {\n\t\tthis._events_listener?.process_events(emitter, event_name, data);\n\t}\n\tget emit_allowed(): boolean {\n\t\treturn (\n\t\t\tthis.scene.loading_controller.loaded &&\n\t\t\tthis._events_listener != null &&\n\t\t\tthis.scene.loading_controller.auto_updating &&\n\t\t\t!POLY.player_mode() // TODO: typecript: maybe I should still be able to emit events in player mode? - check how the Event Sop works\n\t\t);\n\t}\n\t// store_commit(event_name: string, payload: any = this) {\n\t// \tif (this._store) {\n\t// \t\tthis._store.commit(`engine/${event_name}`, payload);\n\t// \t}\n\t// }\n}\n","import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer';\nimport {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter, LinearEncoding, HalfFloatType} from 'three/src/constants'\n// import EquirectangularToCubeGenerator from 'src/core/Utils/EquirectangularToCubeGenerator';\n// import PMREMGenerator from 'src/core/Utils/PMREMGenerator';\n// import PMREMCubeUVPacker from 'src/core/Utils/PMREMCubeUVPacker';\n\ninterface RendererByString {\n\t[propName: string]: WebGLRenderer;\n}\ninterface TextureByString {\n\t[propName: string]: Texture;\n}\n\ninterface POLYWebGLRenderer extends WebGLRenderer {\n\t_polygon_id: number;\n}\n\nconst CONTEXT_OPTIONS = {\n\tantialias: true,\n};\n\ntype Callback = (value: WebGLRenderer) => void;\n\nexport class RenderersController {\n\t_next_renderer_id: number = 0;\n\t_next_env_map_id: number = 0;\n\t_renderers: RendererByString = {};\n\t_env_maps: TextureByString = {};\n\tprivate _require_webgl2: boolean = false;\n\tprivate _resolves: Callback[] = [];\n\n\tconstructor() {}\n\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t}\n\t}\n\trendering_context(canvas: HTMLCanvasElement): WebGLRenderingContext {\n\t\tlet gl: WebGLRenderingContext | null = null;\n\t\tif (this._require_webgl2) {\n\t\t\tgl = this._rendering_context_webgl(canvas, true);\n\t\t}\n\t\tif (!gl) {\n\t\t\tgl = this._rendering_context_webgl(canvas, false);\n\t\t}\n\n\t\t// gl.getExtension('OES_standard_derivatives') // for derivative normals, but it cannot work at the moment (see node Gl/DerivativeNormals)\n\t\t// to test data texture\n\t\t// gl.getExtension('OES_texture_float')\n\t\t// gl.getExtension('OES_texture_float_linear')\n\n\t\treturn gl;\n\t}\n\tprivate _rendering_context_webgl(canvas: HTMLCanvasElement, webgl2: boolean): WebGLRenderingContext {\n\t\tlet context_name = webgl2 ? 'webgl2' : 'webgl';\n\t\tlet gl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\tif (!gl) {\n\t\t\tcontext_name = webgl2 ? 'experimental-webgl2' : 'experimental-webgl';\n\t\t\tgl = canvas.getContext(context_name, CONTEXT_OPTIONS);\n\t\t}\n\t\treturn gl as WebGLRenderingContext;\n\t}\n\t// private _rendering_context_webgl(\n\t// \tcanvas: HTMLCanvasElement\n\t// ): WebGLRenderingContext {\n\t// \tlet gl = canvas.getContext('webgl', CONTEXT_OPTIONS)\n\t// \tif (!gl) {\n\t// \t\tgl = canvas.getContext('experimental-webgl', CONTEXT_OPTIONS)\n\t// \t}\n\t// \treturn gl as WebGLRenderingContext\n\t// }\n\n\tregister_renderer(renderer: WebGLRenderer) {\n\t\tif ((renderer as POLYWebGLRenderer)._polygon_id) {\n\t\t\tthrow new Error('render already registered');\n\t\t}\n\t\t(renderer as POLYWebGLRenderer)._polygon_id = this._next_renderer_id += 1;\n\n\t\t// there is a bug where 2 renderers are created from the beginning\n\t\t// because the from_json of the viewer_component is called after\n\t\t// the camera being set for the first time\n\t\t// console.log(\"register renderer\", renderer, renderer._polygon_id)\n\n\t\t// this is being tested in PostProcess\n\t\t// const canvas = renderer.domElement\n\t\t// const gl = canvas.getContext( 'webgl' ) || canvas.getContext( 'experimental-webgl' )\n\t\t// const extension_exist = gl.getExtension('OES_standard_derivatives')\n\t\t// if(!extension_exist){\n\t\t// \tconsole.warn(\"renderers controller: gl extension not available\")\n\t\t// }\n\n\t\tthis._renderers[(renderer as POLYWebGLRenderer)._polygon_id] = renderer;\n\n\t\tif (Object.keys(this._renderers).length == 1) {\n\t\t\tthis.flush_callbacks_with_renderer(renderer);\n\t\t}\n\t}\n\tderegister_renderer(renderer: WebGLRenderer) {\n\t\tdelete this._renderers[(renderer as POLYWebGLRenderer)._polygon_id];\n\t\trenderer.dispose();\n\t}\n\tprivate first_renderer(): WebGLRenderer | null {\n\t\tconst first_id = Object.keys(this._renderers)[0];\n\t\tif (first_id) {\n\t\t\treturn this._renderers[first_id];\n\t\t}\n\t\treturn null;\n\t}\n\trenderers(): WebGLRenderer[] {\n\t\treturn Object.values(this._renderers);\n\t}\n\n\tprivate flush_callbacks_with_renderer(renderer: WebGLRenderer) {\n\t\tlet callback: Callback | undefined;\n\t\twhile ((callback = this._resolves.pop())) {\n\t\t\tcallback(renderer);\n\t\t}\n\t}\n\n\tasync wait_for_renderer(): Promise<WebGLRenderer> {\n\t\tconst renderer = this.first_renderer();\n\t\tif (renderer) {\n\t\t\treturn renderer;\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tthis._resolves.push(resolve);\n\t\t\t});\n\t\t}\n\t}\n\n\t// async register_env_map(env_map: Texture){\n\t// \tconsole.log(\"register_env_map\", env_map)\n\t// \tif(env_map._polygon_id){\n\t// \t\tthrow new Error('cube_map already registered')\n\t// \t}\n\t// \tconst texture = await this.prepare_env_map(env_map)\n\t// \ttexture._polygon_id = (this._next_env_map_id += 1)\n\t// \tthis._env_maps[texture._polygon_id] = texture\n\t// \treturn texture\n\t// }\n\t// deregister_env_map(env_map: Texture){\n\t// \tconsole.log(\"deregister_env_map\", env_map)\n\t// \tdelete this._env_maps[env_map._polygon_id]\n\t// \tenv_map.dispose()\n\t// }\n\n\t// private async prepare_env_map(texture: Texture): Texture{\n\t// \ttexture.minFilter = NearestFilter;\n\t// \ttexture.magFilter = NearestFilter;\n\t// \ttexture.encoding = LinearEncoding;\n\n\t// \tawait CoreScriptLoader.load_three('loaders/EXRLoader')\n\t// \tawait CoreScriptLoader.load_three('loaders/EquirectangularToCubeGenerator')\n\t// \tconst EquirectangularToCubeGenerator_name = 'EquirectangularToCubeGenerator'\n\t// \tconst PMREMGenerator_name = 'PMREMGenerator'\n\t// \tconst PMREMCubeUVPacker_name = 'PMREMCubeUVPacker'\n\n\t// \tconst cubemapGenerator = new THREE[EquirectangularToCubeGenerator_name]( texture, { resolution: 512, type: HalfFloatType } );\n\n\t// \tconst renderer = this.first_renderer()\n\t// \tif(renderer){\n\t// \t\tconst cubeMapTexture = cubemapGenerator.update( renderer );\n\n\t// \t\tconst pmremGenerator = new THREE[PMREMGenerator_name]( cubeMapTexture );\n\t// \t\tpmremGenerator.update( renderer );\n\n\t// \t\tconst pmremCubeUVPacker = new THREE[PMREMCubeUVPacker_name]( pmremGenerator.cubeLods );\n\t// \t\tpmremCubeUVPacker.update( renderer );\n\n\t// \t\trenderer.gammaInput = false;\n\t// \t\trenderer.gammaOutput = true;\n\n\t// \t\tconst exrCubeRenderTarget = pmremCubeUVPacker.CubeUVRenderTarget;\n\n\t// \t\ttexture.dispose();\n\t// \t\tcubemapGenerator.dispose();\n\t// \t\tpmremGenerator.dispose();\n\t// \t\tpmremCubeUVPacker.dispose();\n\n\t// \t\treturn exrCubeRenderTarget.texture;\n\t// \t}\n\t// }\n}\n","import {BaseNodeClass} from 'src/engine/nodes/_Base';\nimport {NodeContext} from './NodeContext';\n\nexport interface RegisterOptions {\n\tonly?: string[];\n}\n\n// export interface BaseNodeConstructor {\n// \tnew (): BaseNode;\n// }\n\nexport type BaseNodeConstructor = typeof BaseNodeClass;\ntype NodeConstructorByType = Dictionary<BaseNodeConstructor>;\ntype NodeConstructorByTypeByContext = Dictionary<NodeConstructorByType>;\ntype TabMenuByTypeByContext = Dictionary<Dictionary<string>>;\ntype RegisterOptionsByTypeByContext = Dictionary<Dictionary<RegisterOptions>>;\n\nexport class NodesRegister {\n\tprivate _node_register: NodeConstructorByTypeByContext = {};\n\tprivate _node_register_categories: TabMenuByTypeByContext = {};\n\tprivate _node_register_options: RegisterOptionsByTypeByContext = {};\n\n\tregister_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type();\n\t\tthis._node_register[context] = this._node_register[context] || {};\n\n\t\tconst already_registered_node = this._node_register[context][node_type];\n\t\tif (already_registered_node) {\n\t\t\tthrow new Error(`node ${context}/${node_type} already registered`);\n\t\t}\n\t\tthis._node_register[context][node_type] = node;\n\n\t\tif (tab_menu_category) {\n\t\t\tthis._node_register_categories[context] = this._node_register_categories[context] || {};\n\t\t\tthis._node_register_categories[context][node_type] = tab_menu_category;\n\t\t}\n\t\tthis._node_register_options[context] = this._node_register_options[context] || {};\n\t\tif (options) {\n\t\t\tthis._node_register_options[context][node_type] = options;\n\t\t}\n\t}\n\tderegister_node(context: string, node_type: string) {\n\t\tdelete this._node_register[context][node_type];\n\t\tdelete this._node_register_categories[context][node_type];\n\t\tdelete this._node_register_options[context][node_type];\n\t}\n\tregistered_nodes_for_context_and_parent_type(context: NodeContext, parent_node_type: string) {\n\t\tconst map = this._node_register[context];\n\t\tif (map) {\n\t\t\tconst nodes_for_context = Object.values(this._node_register[context]);\n\t\t\treturn nodes_for_context.filter((node) => {\n\t\t\t\tconst options = this._node_register_options[context][node.type()];\n\t\t\t\treturn !options || options['only']?.includes(parent_node_type);\n\t\t\t});\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\tregistered_nodes(context: NodeContext, parent_node_type: string): Dictionary<BaseNodeConstructor> {\n\t\tconst nodes_by_type: Dictionary<BaseNodeConstructor> = {};\n\t\tconst nodes = this.registered_nodes_for_context_and_parent_type(context, parent_node_type);\n\t\tfor (let node of nodes) {\n\t\t\tconst type = node.type();\n\t\t\tnodes_by_type[type] = node;\n\t\t}\n\t\treturn nodes_by_type;\n\t}\n\tregistered_category(context: NodeContext, type: string) {\n\t\treturn this._node_register_categories[context][type];\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LifeCycleController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _lifecycle_on_create_allowed: boolean = true;\n\n\ton_create_hook_allowed(): boolean {\n\t\treturn this.scene.loading_controller.loaded && this._lifecycle_on_create_allowed;\n\t}\n\n\ton_create_prevent(callback: () => void) {\n\t\tthis._lifecycle_on_create_allowed = false;\n\t\tcallback();\n\t\tthis._lifecycle_on_create_allowed = true;\n\t}\n}\n","import {PolyScene} from '../PolyScene';\n\nexport class LoadingController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_loading_state: boolean = true;\n\t_auto_updating: boolean = true;\n\t_first_object_loaded: boolean = false;\n\n\tmark_as_loading() {\n\t\tthis._set_loading_state(true);\n\t}\n\tasync mark_as_loaded() {\n\t\tawait this._set_loading_state(false);\n\t\t// POLY.notify_scene_loaded(this.scene);\n\t\t// this.cooker().block()\n\t\t// this.root().set_children_dirty_without_propagation()\n\t\t// this.cooker().unblock()\n\t}\n\tprivate async _set_loading_state(state: boolean) {\n\t\tthis._loading_state = state;\n\t\tawait this.set_auto_update(!this._loading_state);\n\t}\n\tget is_loading() {\n\t\treturn this._loading_state;\n\t}\n\tget loaded() {\n\t\treturn !this._loading_state;\n\t}\n\tget auto_updating() {\n\t\treturn this._auto_updating;\n\t} // _init_auto_update: ->\n\t// \tthis.set_auto_update(true)\n\tasync set_auto_update(new_state: boolean) {\n\t\tif (this._auto_updating !== new_state) {\n\t\t\tthis._auto_updating = new_state;\n\t\t\tif (this._auto_updating) {\n\t\t\t\t// if this.env_is_development()\n\t\t\t\t// \tthis.performance().start()\n\n\t\t\t\tconst root = this.scene.root;\n\t\t\t\tif (root) {\n\t\t\t\t\tawait root.process_queue();\n\t\t\t\t\t// const c = async () => {\n\t\t\t\t\t// \tawait root.process_queue();\n\t\t\t\t\t// };\n\t\t\t\t\t// setTimeout(c, 50);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// if (callback != null) { callback(); }\n\t\t\t}\n\t\t} else {\n\t\t\t// if (callback != null) { callback(); }\n\t\t}\n\t}\n\n\ton_first_object_loaded() {\n\t\tif (!this._first_object_loaded) {\n\t\t\tthis._first_object_loaded = true;\n\n\t\t\tconst loader = document.getElementById('scene_loading_container');\n\t\t\tif (loader) {\n\t\t\t\tloader.parentElement?.removeChild(loader);\n\t\t\t}\n\t\t}\n\t}\n\n\t// on_all_objects_loaded() {\n\t// \t// POLY.viewer_loaders_manager().dipose_loaders()\n\t// }\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {MissingExpressionReference, MissingExpressionReferenceByIdByFullPath} from './MissingReference';\nimport jsep from 'jsep';\n\nexport class MissingReferencesController {\n\tprivate references: MissingExpressionReferenceByIdByFullPath = {};\n\tprivate next_id: number = 0;\n\tprivate next_id_s: string = '0';\n\n\tregister(param: BaseParamType, jsep_node: jsep.Expression, full_path: string): MissingExpressionReference {\n\t\tconst id = this.next_id_s;\n\t\tconst missing_expression_reference = new MissingExpressionReference(param, jsep_node, full_path, id);\n\t\tthis.references[full_path] = this.references[full_path] || {};\n\t\tthis.references[full_path][id] = missing_expression_reference;\n\n\t\tthis.next_id += 1;\n\t\tthis.next_id_s = `${this.next_id}`;\n\n\t\treturn missing_expression_reference;\n\t}\n\tunregister(ref: MissingExpressionReference) {\n\t\tif (this.references[ref.full_path]) {\n\t\t\tdelete this.references[ref.full_path][ref.id];\n\t\t}\n\t}\n\n\t// call this from node.create and node.rename\n\tcheck_for_references(node: BaseNodeType) {\n\t\tconst full_path = node.full_path();\n\t\tconst refs = this.references[full_path];\n\t\tif (refs) {\n\t\t\tconst ref_ids = Object.keys(refs);\n\t\t\tref_ids.forEach((ref_id) => {\n\t\t\t\tconst ref = refs[ref_id];\n\t\t\t\tref.resolve_with_node(node);\n\t\t\t});\n\t\t\tdelete this.references[full_path];\n\t\t}\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport jsep from 'jsep';\n\nexport class MissingExpressionReference {\n\tconstructor(\n\t\tprivate param: BaseParamType,\n\t\tprivate jsep_node: jsep.Expression,\n\t\tpublic full_path: string,\n\t\tpublic id: string\n\t) {\n\t\tconsole.log(this.jsep_node, this.param); // TODO: typescript, to not have the missing ref\n\t}\n\n\tresolve_with_node(node: BaseNodeType) {\n\t\tconsole.warn('this should not work! REFACTOR asap');\n\t\t// this.param.parse_expression_and_update_dependencies()\n\t}\n}\n\nexport class ReferenceSearchResult {\n\tpublic found_graph_nodes: CoreGraphNode[] = [];\n\tpublic missing_paths: string[] = [];\n\n\tconstructor() {}\n\tset_found_graph_nodes(graph_nodes: CoreGraphNode[]) {\n\t\tthis.found_graph_nodes = graph_nodes;\n\t}\n\tset_missing_paths(paths: string[]) {\n\t\tthis.missing_paths = paths;\n\t}\n}\n\nexport interface MissingExpressionReferenceById {\n\t[propName: string]: MissingExpressionReference;\n}\nexport interface MissingExpressionReferenceByIdByFullPath {\n\t[propName: string]: MissingExpressionReferenceById;\n}\n","import {PolyScene} from '../PolyScene';\n\nimport {Object3D} from 'three/src/core/Object3D';\nimport lodash_concat from 'lodash/concat';\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_compact from 'lodash/compact';\nimport {ObjectsManagerNode} from 'src/engine/nodes/manager/ObjectsManager';\nimport {CoreString} from 'src/core/String';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseObjNodeType} from 'src/engine/nodes/obj/_Base';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\nexport class NodesController {\n\tconstructor(private scene: PolyScene) {}\n\n\t_root!: ObjectsManagerNode;\n\t_node_context_signatures: Dictionary<boolean> = {};\n\t_instanciated_nodes_by_context_and_type: Dictionary<Dictionary<Dictionary<BaseNodeType>>> = {};\n\n\tinit() {\n\t\tthis._root = new ObjectsManagerNode(this.scene);\n\t\tthis._root.initialize_base_and_node();\n\t\t// this._root.set_scene(this.scene);\n\t\tthis._root.init_display_scene();\n\t}\n\n\tget root() {\n\t\treturn this._root;\n\t}\n\tobjects_from_mask(mask: string): Object3D[] {\n\t\tconst masks = mask.split(' ');\n\t\t// let geos = this.root().nodes_by_type('geo') as BaseNodeObj[];\n\t\tlet nodes = this.root.children() as BaseObjNodeType[];\n\t\tnodes = nodes.filter((node) => CoreString.matches_one_mask(node.name, masks));\n\t\tconst objects = nodes.map((geo) => geo.object);\n\t\treturn lodash_compact(objects);\n\t}\n\tclear() {\n\t\tconst children = this.root.children();\n\t\tfor (let child of children) {\n\t\t\tthis.root.children_controller?.remove_node(child);\n\t\t}\n\t\t// return children.forEach(child=> {\n\t\t// \treturn this.root().remove_node(child);\n\t\t// });\n\t}\n\n\tnode(path: string) {\n\t\tif (path === '/') {\n\t\t\treturn this.root;\n\t\t} else {\n\t\t\treturn this.root.node(path);\n\t\t}\n\t}\n\tall_nodes() {\n\t\tlet nodes: BaseNodeType[] = [this.root];\n\t\tlet current_parents: BaseNodeType[] = [this.root];\n\t\tlet cmptr = 0;\n\t\twhile (current_parents.length > 0 && cmptr < 10) {\n\t\t\tconst children = lodash_flatten(\n\t\t\t\tcurrent_parents.map((current_parent) => {\n\t\t\t\t\tif (current_parent.children_allowed()) {\n\t\t\t\t\t\treturn current_parent.children();\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t);\n\t\t\tnodes = lodash_concat(nodes, children);\n\t\t\tcurrent_parents = children;\n\t\t\tcmptr += 1;\n\t\t}\n\t\treturn lodash_flatten(nodes);\n\t}\n\n\treset_node_context_signatures() {\n\t\tthis._node_context_signatures = {};\n\t}\n\tregister_node_context_signature(node: BaseNodeType) {\n\t\tif (node.children_allowed() && node.children_controller) {\n\t\t\tthis._node_context_signatures[node.children_controller.node_context_signature()] = true;\n\t\t}\n\t}\n\tnode_context_signatures() {\n\t\treturn Object.keys(this._node_context_signatures)\n\t\t\t.sort()\n\t\t\t.map((s) => s.toLowerCase());\n\t}\n\n\tadd_to_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tthis._instanciated_nodes_by_context_and_type[context] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] =\n\t\t\tthis._instanciated_nodes_by_context_and_type[context][node_type] || {};\n\t\tthis._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id] = node;\n\t}\n\n\tremove_from_instanciated_node(node: BaseNodeType) {\n\t\tconst context = node.node_context();\n\t\tconst node_type = node.type;\n\t\tdelete this._instanciated_nodes_by_context_and_type[context][node_type][node.graph_node_id];\n\t}\n\n\tinstanciated_nodes(context: NodeContext, node_type: string) {\n\t\tconst nodes = [];\n\t\tif (this._instanciated_nodes_by_context_and_type[context]) {\n\t\t\tconst nodes_by_ids = this._instanciated_nodes_by_context_and_type[context][node_type];\n\t\t\tif (nodes_by_ids) {\n\t\t\t\tfor (let id of Object.keys(nodes_by_ids)) {\n\t\t\t\t\tnodes.push(nodes_by_ids[id]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn nodes;\n\t}\n}\n","import {Group} from 'three/src/objects/Group';\n// import lodash_isEqual from 'lodash/isEqual';\n// import lodash_map from 'lodash/map';\n\nimport {TypedBaseManagerNode} from './_Base';\n// import {CoreObject} from 'src/core/Object';\n// import {BaseNode} from '../_Base';\nimport {BaseObjNodeType} from '../obj/_Base';\n\n// import {BaseManagerObjNode} from 'src/engine/nodes/obj/_BaseManager';\n// import {BaseCameraObjNodeClass} from 'src/engine/nodes/obj/_BaseCamera';\n// import {BaseLightObjNodeClass} from 'src/engine/nodes/obj/_BaseLight';\n\n// obj nodes\n// import {EventsObjNode} from 'src/engine/nodes/obj/Events';\n// import {MaterialsObjNode} from 'src/engine/nodes/obj/Materials';\n// import {FogObjNode} from 'src/engine/nodes/obj/Fog';\nimport {GeoObjNode} from 'src/engine/nodes/obj/Geo';\n\nimport 'src/engine/Poly';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n// import {PolyScene} from 'src/engine/scene/PolyScene';\n// TODO:\n// ensure removing a node removes its content from the scene (spotlight?)\n\nimport {ObjNodeChildrenMap} from 'src/engine/poly/registers/Obj';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseNodeType} from '../_Base';\nimport {POLY} from 'src/engine/Poly';\nclass ObjectsManagerParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new ObjectsManagerParamsConfig();\n\nexport class ObjectsManagerNode extends TypedBaseManagerNode<ObjectsManagerParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'obj';\n\t}\n\t// children_context() {\n\t// \treturn NodeContext.OBJ;\n\t// }\n\n\tprivate _object: Group = new Group();\n\tprivate _queued_nodes_by_id: Dictionary<BaseObjNodeType> = {};\n\tprivate _queued_nodes_by_path: Dictionary<BaseObjNodeType> = {};\n\tprivate _expected_geo_nodes: Dictionary<GeoObjNode> = {};\n\t// private _loaded_geo_node_by_id: Dictionary<boolean> = {};\n\tprivate _process_queue_start: number = -1;\n\n\tprotected _children_controller_context = NodeContext.OBJ;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.flags.add_display();\n\n\t\tthis.lifecycle.add_on_child_add_hook(this._on_child_add.bind(this));\n\t\tthis.lifecycle.add_on_child_remove_hook(this._on_child_remove.bind(this));\n\t\t// this.flags.add_bypass({has_bypass_flag: false});\n\n\t\t// this.set_min_inputs_count(0);\n\t\t// this.set_max_inputs_count(0);\n\t}\n\t//@_object_uuid_by_node_graph_id = {}\n\n\tinit_display_scene() {\n\t\tthis._object.name = '_WORLD_';\n\t\tthis._scene.display_scene.add(this._object);\n\t}\n\n\t// TODO: is this method still used?\n\t// available_children_classes() {\n\t// \treturn POLY.Engine.Node.Obj;\n\t// }\n\n\tobject() {\n\t\treturn this._object;\n\t}\n\tcreate_node<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as ObjNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseObjNodeType[];\n\t}\n\tnodes_by_type<K extends keyof ObjNodeChildrenMap>(type: K): ObjNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as ObjNodeChildrenMap[K][];\n\t}\n\n\tmultiple_display_flags_allowed() {\n\t\treturn true;\n\t}\n\n\tadd_to_queue(node: BaseObjNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._queued_nodes_by_id[id] == null) {\n\t\t\treturn (this._queued_nodes_by_id[id] = node);\n\t\t}\n\t}\n\n\tasync process_queue() {\n\t\tthis._queued_nodes_by_path = {};\n\t\tconst ids = Object.keys(this._queued_nodes_by_id);\n\t\tfor (let id of ids) {\n\t\t\tconst node = this._queued_nodes_by_id[id];\n\t\t\tdelete this._queued_nodes_by_id[id];\n\n\t\t\tconst full_path = `_____${node.render_order}__${node.full_path()}`;\n\t\t\t// we want to process managers, cameras, then lights, then everything else\n\t\t\t// so we add a prefix for those\n\t\t\t// if (this._is_node_manager(node)) {\n\t\t\t// \tfull_path = `/_____005_${full_path}`;\n\t\t\t// } else if (this._is_node_fog(node)) {\n\t\t\t// \tfull_path = `/_____002_${full_path}`;\n\t\t\t// } else if (this._is_node_camera(node)) {\n\t\t\t// \tfull_path = `/_____003_${full_path}`;\n\t\t\t// } else if (this._is_node_light(node)) {\n\t\t\t// \tfull_path = `/_____004_${full_path}`;\n\t\t\t// }\n\n\t\t\tthis._queued_nodes_by_path[full_path] = node;\n\t\t}\n\n\t\tconst promises = Object.keys(this._queued_nodes_by_path)\n\t\t\t.sort()\n\t\t\t.map((path_id) => {\n\t\t\t\tconst node = this._queued_nodes_by_path[path_id];\n\t\t\t\treturn this.update_object(node);\n\t\t\t});\n\n\t\tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t\tthis._process_queue_start = performance.now();\n\t\tPromise.all(promises).then(() => {\n\t\t\tPOLY.log(`SCENE LOADED '${this.scene.name}' in ${performance.now() - this._process_queue_start}`);\n\t\t\t// this.scene().performance().print()\n\n\t\t\t// do the update here if there are no objects to load\n\t\t\t// otherwise an empty scene will have a loader that never gets removed\n\t\t\t// if (Object.keys(this._expected_geo_nodes).length == 0) {\n\t\t\t// \tthis.update_on_all_objects_loaded();\n\t\t\t// }\n\t\t});\n\t}\n\n\tupdate_object(node: BaseObjNodeType) {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\tthis.add_to_queue(node);\n\t\t} else {\n\t\t\t// if (node.object) {\n\t\t\tthis.add_to_scene(node);\n\t\t\t// } else {\n\t\t\t// \t//if POLY.env != 'test'\n\t\t\t// \t// console.warn(`no object from ${node.full_path()} (error:${node.error_message()}) (${POLY.env})`);\n\t\t\t// }\n\t\t}\n\t}\n\n\t// _is_node_fog(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, FogObjNode);\n\t// }\n\t// _is_node_camera(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, BaseCameraObjNodeClass);\n\t// }\n\n\t// _is_node_event(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, EventsObjNode);\n\t// }\n\t// _is_node_mat(node: BaseObjNodeType) {\n\t// \treturn CoreObject.is_a(node, MaterialsObjNode);\n\t// }\n\n\t//\n\t//\n\t// OBJ PARENTING\n\t//\n\t//\n\n\t// TODO:\n\t// a OBJ node should be able to submit its group for transform\n\t// apart from the geometry. This would allow parenting to function\n\t// regardless if the underlying geo is valid or not\n\tget_parent_for_node(node: BaseObjNodeType) {\n\t\t// if (this._is_node_event(node) || this._is_node_mat(node)) {\n\t\t// \treturn null;\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\t// if (this._is_node_camera(node)) {\n\t\t\t// \treturn this.scene.display_scene;\n\t\t\t// } else {\n\t\t\tconst node_input = node.io.inputs.input(0);\n\t\t\tif (node_input) {\n\t\t\t\t//node_input.request_container (container)=>\n\t\t\t\t//\tcallback(container.object() || @_object)\n\t\t\t\treturn node_input.children_group;\n\t\t\t} else {\n\t\t\t\treturn this._object;\n\t\t\t}\n\t\t\t// }\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tadd_to_scene(node: BaseObjNodeType): void {\n\t\t// if (this._is_node_fog(node)) {\n\t\t// console.log(\"fog\")\n\t\t// # TODO: ensure fog is removed if we set display or bypass flag\n\t\t// # TODO: ensure we get a warning if more than 1 fog\n\t\t// # TODO: why does it get added twice when its parameters are changed?\n\t\t// node.get_fog (fog)=>\n\t\t// \t@_scene.display_scene().fog = fog\n\t\t// #console.log(\"added fog\", node.object())\n\t\tif (node.attachable_to_hierarchy) {\n\t\t\tconst parent_object = this.get_parent_for_node(node);\n\t\t\tif (parent_object) {\n\t\t\t\t// await node.params.eval_all().then((params_eval_key) => {\n\t\t\t\t// \tnode.request_container();\n\t\t\t\t// });\n\n\t\t\t\tif (node.used_in_scene) {\n\t\t\t\t\t// parent_object.add(node.object);\n\t\t\t\t\tnode.add_object_to_parent(parent_object);\n\t\t\t\t\t// await node.cook_controller.cook_main_without_inputs();\n\t\t\t\t} else {\n\t\t\t\t\tnode.remove_object_from_parent();\n\t\t\t\t\t// parent_object.remove(node.object);\n\t\t\t\t}\n\n\t\t\t\t// node.request_display_node();\n\t\t\t} else {\n\t\t\t\t// node.request_container().then(() => {\n\t\t\t\t// \t// force events and mat to cook and remove the dirty state\n\t\t\t\t// \t// ensure that pickers are cooked\n\t\t\t\t// \t// TODO: although there has been cases with two picker and\n\t\t\t\t// \t// one referencing the other with an expression, and that\n\t\t\t\t// \t// expression be evaluated before the second was created\n\t\t\t\t// \t// which led to an error. This should not happen\n\t\t\t\t// \tnode.children_controller.traverse_children((child) => child.set_dirty());\n\t\t\t\t// });\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_from_scene(node: BaseObjNodeType) {\n\t\tnode.remove_object_from_parent();\n\t}\n\tare_children_cooking(): boolean {\n\t\tconst children = this.children();\n\t\tfor (let child of children) {\n\t\t\tif (child.is_display_node_cooking()) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tasync expected_loading_geo_nodes_by_id() {\n\t\tconst geo_nodes = this.nodes_by_type('geo');\n\t\tconst node_by_id: Dictionary<GeoObjNode> = {};\n\t\tfor (let geo_node of geo_nodes) {\n\t\t\tconst is_displayed = await geo_node.is_displayed();\n\t\t\tif (is_displayed) {\n\t\t\t\tnode_by_id[geo_node.graph_node_id] = geo_node;\n\t\t\t}\n\t\t}\n\t\treturn node_by_id;\n\t}\n\n\t// async notify_geo_loaded(geo_node: GeoObjNode) {\n\t// \tthis._loaded_geo_node_by_id = this._loaded_geo_node_by_id || {};\n\t// \tthis._loaded_geo_node_by_id[geo_node.graph_node_id] = true;\n\n\t// \tthis._expected_geo_nodes = this._expected_geo_nodes || (await this.expected_loading_geo_nodes_by_id());\n\n\t// \tif (this.scene) {\n\t// \t\tthis.scene.loading_controller.on_first_object_loaded();\n\n\t// \t\tif (lodash_isEqual(Object.keys(this._loaded_geo_node_by_id), Object.keys(this._expected_geo_nodes))) {\n\t// \t\t\tthis.update_on_all_objects_loaded();\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// update_on_all_objects_loaded() {\n\t// \tthis.scene.loading_controller.on_all_objects_loaded();\n\t// \t// this.scene.cube_cameras_controller.on_all_objects_loaded(); // TODO: typescript\n\t// }\n\n\tadd_to_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)->\n\t// \tobject = input_container.object()\n\n\t// \ttransformed_node.request_input_container 0, (parent_input_container)->\n\t// \t\tparent = parent_input_container.object()\n\t// \t\tparent.add(object)\n\n\tremove_from_parent_transform(node: BaseObjNodeType) {\n\t\tthis.update_object(node);\n\t}\n\t// return if !this.scene().loaded()\n\n\t// transformed_node.request_container (input_container)=>\n\t// \tobject = input_container.object()\n\n\t// \tthis.get_parent_for_node transformed_node, (parent_object)=>\n\t// \t\tparent_object.add(object)\n\n\tprivate _on_child_add(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.update_object(node as BaseObjNodeType);\n\t\t}\n\t}\n\tprivate _on_child_remove(node?: BaseNodeType) {\n\t\tif (node) {\n\t\t\tthis.remove_from_scene(node as BaseObjNodeType);\n\t\t}\n\t}\n}\n","import {TypedNode} from '../_Base';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {ManagerContainer} from 'src/engine/containers/Manager';\n\nexport class TypedBaseManagerNode<K extends NodeParamsConfig> extends TypedNode<'MANAGER', BaseManagerNodeType, K> {\n\tcontainer_controller: TypedContainerController<ManagerContainer> = new TypedContainerController<ManagerContainer>(\n\t\tthis,\n\t\tManagerContainer\n\t);\n\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.MANAGER;\n\t}\n}\n\nexport type BaseManagerNodeType = TypedBaseManagerNode<any>;\nexport class BaseManagerNodeClass extends TypedBaseManagerNode<any> {}\n","// import lodash_filter from 'lodash/filter';\n// import lodash_uniq from 'lodash/uniq';\n// import lodash_flatten from 'lodash/flatten';\n// import {Cooker} from './Cooker';\nimport {CoreGraphNode} from './CoreGraphNode';\n\n// not sure how I can have caller: DirtyableMixin if DirtyableMixin is not yet defined\nexport type PostDirtyHook = (caller?: CoreGraphNode) => void;\n\n// type Constructor<T = {}> = new (...args: any[]) => T;\nexport class DirtyController {\n\t_dirty_count: number = 0;\n\t_dirty: boolean = true;\n\t_dirty_timestamp: number | undefined;\n\t_cached_successors: CoreGraphNode[] | undefined;\n\t_forbidden_trigger_nodes: string[] | undefined;\n\n\t// hooks\n\t_post_dirty_hooks: PostDirtyHook[] | undefined;\n\t_post_dirty_hook_names: string[] | undefined;\n\n\tconstructor(private node: CoreGraphNode) {}\n\n\t// _init_dirtyable(): void {\n\t// \tthis._dirty_count = 0;\n\t// \tthis._dirty = true;\n\t// }\n\tget is_dirty(): boolean {\n\t\treturn this._dirty === true;\n\t}\n\tget dirty_timestamp() {\n\t\treturn this._dirty_timestamp;\n\t}\n\tget dirty_count(): number {\n\t\treturn this._dirty_count;\n\t}\n\tadd_post_dirty_hook(name: string, method: PostDirtyHook) {\n\t\tthis._post_dirty_hook_names = this._post_dirty_hook_names || [];\n\t\tthis._post_dirty_hooks = this._post_dirty_hooks || [];\n\n\t\tif (!this._post_dirty_hook_names.includes(name)) {\n\t\t\tthis._post_dirty_hook_names.push(name);\n\t\t\tthis._post_dirty_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this._post_dirty_hook_names);\n\t\t}\n\t}\n\thas_hook(name: string): boolean {\n\t\tif (this._post_dirty_hook_names) {\n\t\t\treturn this._post_dirty_hook_names.includes(name);\n\t\t}\n\t\treturn false;\n\t}\n\t// using a dirty block doesn't quite work, as I would need to be able\n\t// to fetch the graph for all successors that haven't been blocked\n\t// block_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = false\n\t// unblock_dirty_propagation: ->\n\t// \t@_dirty_propagation_allowed = true\n\tremove_dirty_state(): void {\n\t\tthis._dirty = false;\n\t}\n\tset_forbidden_trigger_nodes(nodes: CoreGraphNode[]) {\n\t\tthis._forbidden_trigger_nodes = nodes.map((n) => n.graph_node_id);\n\t}\n\t//@_clean_for_frame = this.context().frame()\n\t//this.post_remove_dirty_state(message)\n\n\tset_dirty(original_trigger_graph_node?: CoreGraphNode | null, propagate?: boolean): void {\n\t\tif (propagate == null) {\n\t\t\tpropagate = true;\n\t\t}\n\n\t\tif (\n\t\t\toriginal_trigger_graph_node &&\n\t\t\tthis._forbidden_trigger_nodes &&\n\t\t\tthis._forbidden_trigger_nodes.includes(original_trigger_graph_node.graph_node_id)\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (original_trigger_graph_node == null) {\n\t\t\toriginal_trigger_graph_node = this.node;\n\t\t}\n\n\t\t//return if this.set_dirty_allowed? && !this.set_dirty_allowed(original_trigger_graph_node)\n\n\t\t// if (this.scene && this.scene() != null && this.scene().loaded()){\n\t\t// \tlet id = null\n\t\t// \tif (this.full_path){id = this.full_path()} else {id = this}\n\t\t// \tconsole.log(\"set dirty\", id)\n\t\t// }\n\n\t\t// TODO: why can't I not propagate if the node is already dirty?\n\t\t// one possible reason is that node might be cooking, and this would not update the dirty_timestamp correctly?\n\t\t//return if this.is_dirty()\n\t\t// if(!this.scene().is_loading()){\n\t\t// \tconsole.log(\"set dirty\", (this.full_path ? this.full_path() : this))\n\t\t// }\n\n\t\tthis._dirty = true;\n\t\tthis._dirty_timestamp = performance.now();\n\t\tthis._dirty_count += 1;\n\n\t\tthis.run_post_dirty_hooks(original_trigger_graph_node);\n\t\t// this.post_set_dirty(original_trigger_graph_node);\n\n\t\tif (propagate === true) {\n\t\t\t//&& @_dirty #&& window.scene.auto_updating()\n\t\t\tthis.set_successors_dirty(original_trigger_graph_node);\n\t\t}\n\t}\n\n\trun_post_dirty_hooks(original_trigger_graph_node?: CoreGraphNode) {\n\t\tif (this._post_dirty_hooks) {\n\t\t\tconst cooker = this.node.scene.cooker;\n\t\t\tif (cooker.blocked) {\n\t\t\t\tcooker.enqueue(this.node, original_trigger_graph_node);\n\t\t\t} else {\n\t\t\t\tfor (let hook of this._post_dirty_hooks) {\n\t\t\t\t\thook(original_trigger_graph_node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// cooker(): Cooker {\n\t// \tthrow 'Dirtyable.cooker requires implementation';\n\t// }\n\tset_successors_dirty(original_trigger_graph_node?: CoreGraphNode): void {\n\t\t// const cooker = this.node.scene.cooker;\n\t\t// cooker.block();\n\n\t\tconst propagate = false;\n\t\tthis._cached_successors = this._cached_successors || this.node.graph_all_successors(); //this._dirtyable_all_successors(original_trigger_graph_node);\n\t\t// successors = successors.filter(n=>!n.is_dirty())\n\t\tfor (let successor of this._cached_successors) {\n\t\t\tsuccessor.dirty_controller.set_dirty(original_trigger_graph_node, propagate);\n\t\t\t// console.log(successor);\n\t\t}\n\n\t\t// cooker.unblock();\n\t}\n\n\t// _dirtyable_all_successors(original_trigger_graph_node: CoreGraphNode): CoreGraphNode[] {\n\t// \treturn this.graph_all_predecessors()\n\t// \t// const successors = [];\n\t// \t// let newly_added_successors = this._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// successors.push(newly_added_successors);\n\n\t// \t// while (newly_added_successors.length > 0) {\n\t// \t// \tnewly_added_successors = lodash_flatten(\n\t// \t// \t\tnewly_added_successors.map((newly_added_successor) => {\n\t// \t// \t\t\treturn newly_added_successor._dirtyable_direct_successors(original_trigger_graph_node);\n\t// \t// \t\t})\n\t// \t// \t);\n\t// \t// \tsuccessors.push(newly_added_successors);\n\t// \t// }\n\n\t// \t// return lodash_uniq(lodash_flatten(successors));\n\t// }\n\n\tclear_successors_cache() {\n\t\tthis._cached_successors = undefined;\n\t}\n\tclear_successors_cache_with_predecessors() {\n\t\tthis.clear_successors_cache();\n\t\tfor (let predecessor of this.node.graph_all_predecessors()) {\n\t\t\tpredecessor.dirty_controller.clear_successors_cache();\n\t\t}\n\t}\n\t// graph_all_predecessors(): CoreGraphNode[] {\n\t// \treturn this.node.graph_all_predecessors()\n\t// \t// console.log('dirtyable graph_all_predecessors should be overwritten');\n\t// \t// return [];\n\t// }\n\n\t// dirty_successors(): Array<CoreGraphNode> {\n\t// \tthrow 'Dirtyable.dirty_successors requires implementation';\n\t// }\n\t// set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \tthrow 'Dirtyable.set_dirty_allowed requires implementation';\n\t// }\n\t// _dirtyable_direct_successors(original_trigger_graph_node: CoreGraphNode): Array<CoreGraphNode> {\n\t// \treturn this.dirty_successors().filter((successor) => {\n\t// \t\treturn successor.set_dirty_allowed == null || successor.set_dirty_allowed(original_trigger_graph_node);\n\t// \t});\n\t// }\n\n\t// set_graph_successors_dirty_via_graph: (original_trigger_graph_node)->\n\t// \tcooker = this.scene().cooker()\n\t// \tcooker.block()\n\n\t// \tmake_successors_dirty = false\n\t// \tlodash_each lodash_flatten(this.graph_all_successors()), (successor)=>\n\t// \t\tsuccessor.set_dirty(original_trigger_graph_node, this, false)\n\n\t// \tcooker.unblock()\n\n\t// post_set_dirty(original_trigger_graph_node?: Dirtyable, direct_trigger_graph_node?: Dirtyable): void{}\n}\n","import {Vector2} from 'three/src/math/Vector2';\nimport {Color} from 'three/src/math/Color';\nimport {BaseNodeType} from '../_Base';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\nexport interface NodeUIDataJson {\n\tx: number;\n\ty: number;\n\tcomment?: string;\n}\n\nexport class UIData {\n\tprivate _position: Vector2 = new Vector2();\n\tprivate _width: number = 50;\n\tprivate _border_radius: number = 3;\n\tprivate _color: Color = new Color(0.75, 0.75, 0.75);\n\t// private _icon: string | null = null;\n\tprivate _layout_vertical: boolean = true;\n\tprivate _comment: string | undefined;\n\tprivate _json: NodeUIDataJson = {\n\t\tx: 0,\n\t\ty: 0,\n\t};\n\n\tconstructor(private node: BaseNodeType, x: number = 0, y: number = 0) {\n\t\tthis._position.x = x;\n\t\tthis._position.y = y;\n\t}\n\n\tset_border_radius(radius: number) {\n\t\tthis._border_radius = radius;\n\t}\n\tborder_radius() {\n\t\treturn this._border_radius;\n\t}\n\tset_width(width: number) {\n\t\tthis._width = width;\n\t}\n\twidth() {\n\t\treturn this._width;\n\t}\n\tset_comment(comment: string | undefined) {\n\t\tthis._comment = comment;\n\t\tthis.node.emit(NodeEvent.UI_DATA_COMMENT_UPDATED);\n\t}\n\tget comment(): string | undefined {\n\t\treturn this._comment;\n\t}\n\tset_color(color: Color) {\n\t\tthis._color = color;\n\t}\n\tcolor() {\n\t\treturn this._color;\n\t}\n\t// set_icon(icon: string) {\n\t// \tthis._icon = icon;\n\t// }\n\t// icon() {\n\t// \treturn this._icon;\n\t// }\n\tset_layout_horizontal() {\n\t\tthis._layout_vertical = false;\n\t}\n\tis_layout_vertical() {\n\t\treturn this._layout_vertical;\n\t}\n\n\tcopy(ui_data: UIData) {\n\t\tthis._position.copy(ui_data.position);\n\t\tthis._color.copy(ui_data.color());\n\t}\n\n\tget position() {\n\t\treturn this._position;\n\t}\n\n\tset_position(new_position: Vector2 | number, y: number = 0) {\n\t\tif (new_position instanceof Vector2) {\n\t\t\tthis._position.copy(new_position);\n\t\t} else {\n\t\t\tconst x = new_position;\n\t\t\tthis._position.set(x, y);\n\t\t}\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\n\ttranslate(offset: Vector2, snap: boolean = false) {\n\t\tthis._position.add(offset);\n\n\t\tif (snap) {\n\t\t\tthis._position.x = Math.round(this._position.x);\n\t\t\tthis._position.y = Math.round(this._position.y);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.UI_DATA_POSITION_UPDATED);\n\t}\n\t// arguments_to_vector(x: number,y: number){\n\t// \tif (arguments.length === 2) {\n\t// \t\tthis._position.x = arguments[0];\n\t// \t\tthis._position.y = arguments[1];\n\t// \t} else {\n\t// \t\tthis._position.x = new_position.x;\n\t// \t\tthis._position.y = new_position.y;\n\t// \t}\n\t// }\n\tto_json(): NodeUIDataJson {\n\t\tthis._json.x = this._position.x;\n\t\tthis._json.y = this._position.y;\n\t\tthis._json.comment = this._comment;\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.node);\n\terror = new ErrorState(this.node);\n\tconstructor(protected node: BaseNodeType) {}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class TimeDependentState {\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget active() {\n\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n\t}\n\n\tare_params_time_dependent(): boolean {\n\t\tconst param_names = this.node.params.names;\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param = this.node.params.get(param_name);\n\t\t\tif (param && param.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tare_inputs_time_dependent(): boolean {\n\t\tconst inputs = this.node.io.inputs.inputs();\n\t\tfor (let input of inputs) {\n\t\t\tif (input && input.states.time_dependent.active) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\tforce_time_dependent() {\n\t\tconst predecessor_ids = this.node.graph_predecessors().map((n) => n.graph_node_id);\n\t\tconst frame_node = this.node.scene.time_controller.graph_node; // context();\n\t\tif (!predecessor_ids.includes(frame_node.graph_node_id)) {\n\t\t\tthis.node.add_graph_input(frame_node);\n\t\t}\n\t}\n\tunforce_time_dependent() {\n\t\tconst frame_node = this.node.scene.time_controller.graph_node;\n\t\tthis.node.remove_graph_input(frame_node);\n\t}\n}\n\n// import {BaseNode} from '../_Base';\n\n// export function TimeDependent<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n\n// \t\tis_time_dependent(): boolean {\n// \t\t\treturn this.are_params_time_dependent() || this.are_inputs_time_dependent();\n// \t\t}\n\n// \t\tare_params_time_dependent(): boolean {\n// \t\t\tlet params_time_dependent = false;\n// \t\t\tlodash_values(this.self.params()).forEach((param) => {\n// \t\t\t\tif (param.is_time_dependent()) {\n// \t\t\t\t\tparams_time_dependent = true;\n// \t\t\t\t}\n// \t\t\t});\n// \t\t\treturn params_time_dependent;\n// \t\t}\n\n// \t\tare_inputs_time_dependent(): boolean {\n// \t\t\tlet inputs_time_dependent = false;\n// \t\t\tthis.self.inputs().forEach((node) => {\n// \t\t\t\tif (node != null && node.is_time_dependent()) {\n// \t\t\t\t\tinputs_time_dependent = true;\n// \t\t\t\t}\n// \t\t\t});\n// \t\t\treturn inputs_time_dependent;\n// \t\t}\n\n// \t\tprotected _force_time_dependent() {\n// \t\t\tconst predecessor_ids = this.graph_predecessors().map((n) => n.graph_node_id);\n// \t\t\tconst scene_context = this.scene().context();\n// \t\t\tif (!lodash_includes(predecessor_ids, scene_context.graph_node_id)) {\n// \t\t\t\tthis.self.add_graph_input(scene_context);\n// \t\t\t}\n// \t\t}\n// \t\tprotected _unforce_time_dependent() {\n// \t\t\tconst scene_context = this.scene().context();\n// \t\t\tthis.self.remove_graph_input(scene_context);\n// \t\t}\n// \t};\n// }\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tconsole.warn('error', message);\n\t\t\tthis._message = message;\n\t\t\tthis.on_update();\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n\n\tprotected on_update() {\n\t\tif (this._message != null) {\n\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n\t\t\tthis.node.set_container(null, `from error '${this._message}'`);\n\t\t}\n\n\t\tthis.node.emit(NodeEvent.ERROR_UPDATED);\n\t}\n}\n\n// export function Errored<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n\n// \t\t_error_message: string = null;\n\n// \t\t// _init_error() {\n// \t\t// \treturn this._error_message = null;\n// \t\t// }\n\n// \t\tset_error(message: string) {\n// \t\t\tconst old_error_message = this._error_message;\n\n// \t\t\tif (message != null) {\n// \t\t\t\tif (this._error_message == null) {\n// \t\t\t\t\tthis._error_message = message;\n// \t\t\t\t}\n// \t\t\t} else {\n// \t\t\t\tthis._error_message = null;\n// \t\t\t}\n\n// \t\t\t// if end_cook is specified here when there's no message, this messes up with events, cook_time\n// \t\t\tif (message != null) {\n// \t\t\t\t// console.warn(\"new error\", message, this.self.full_path())\n// \t\t\t\tthis.self.set_container(null, `from error '${this._error_message}'`);\n// \t\t\t}\n\n// \t\t\tif (this._error_message !== old_error_message) {\n// \t\t\t\tthis.self.emit('node_error_updated');\n// \t\t\t}\n// \t\t}\n\n// \t\tclear_error() {\n// \t\t\tthis.set_error(null);\n// \t\t}\n// \t\tis_errored(): boolean {\n// \t\t\treturn this._error_message != null;\n// \t\t}\n// \t\terror_message(): string {\n// \t\t\treturn this._error_message;\n// \t\t}\n// \t};\n// }\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {NameController} from '../NameController';\n\ntype Callback = () => void;\nimport {CoreWalker} from 'src/core/Walker';\n\nexport class HierarchyParentController {\n\tprivate _parent: BaseNodeType | null = null;\n\tprivate _on_set_parent_hooks: Callback[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tget parent() {\n\t\treturn this._parent;\n\t}\n\n\tset_parent(parent: BaseNodeType | null) {\n\t\tif (parent != this.node.parent_controller.parent) {\n\t\t\tthis._parent = parent;\n\t\t\tif (this._parent) {\n\t\t\t\t// this.node.set_scene(this._parent.scene);\n\t\t\t\tthis.node.name_controller.request_name_to_parent(NameController.base_name(this.node));\n\t\t\t}\n\t\t\t// this.on_set_parent();\n\t\t}\n\t}\n\tis_selected(): boolean {\n\t\treturn this.parent?.children_controller?.selection?.contains(this.node) || false;\n\t}\n\tfull_path(): string {\n\t\tconst separator = CoreWalker.SEPARATOR;\n\t\tif (this._parent != null) {\n\t\t\tconst parent_full_path = this._parent.full_path();\n\t\t\tif (parent_full_path === separator) {\n\t\t\t\treturn parent_full_path + this.node.name;\n\t\t\t} else {\n\t\t\t\treturn parent_full_path + separator + this.node.name;\n\t\t\t}\n\t\t} else {\n\t\t\treturn separator;\n\t\t}\n\t}\n\n\ton_set_parent() {\n\t\tif (this._on_set_parent_hooks) {\n\t\t\tfor (let hook of this._on_set_parent_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\n// import {BaseParam} from 'src/engine/params/_Base'\nimport {DecomposedPath} from './DecomposedPath';\n\n// type NodeOrParam = BaseNode | BaseParam\n\nconst SEPARATOR = '/';\n\nexport class CoreWalkerEmbed {\n\tstatic separator() {\n\t\treturn SEPARATOR;\n\t}\n\n\tstatic find_node(node_src: BaseNodeType, path: string, decomposed_path?: DecomposedPath): BaseNodeType | null {\n\t\tif (!node_src) {\n\t\t\treturn null;\n\t\t}\n\n\t\tconst elements: string[] = path.split(SEPARATOR).filter((e) => e.length > 0);\n\t\tconst first_element = elements[0];\n\n\t\tlet next_node: BaseNodeType | null = null;\n\t\tif (path[0] === '/') {\n\t\t\tconst path_from_root = path.substr(1);\n\t\t\tnext_node = this.find_node(node_src.root, path_from_root, decomposed_path);\n\t\t} else {\n\t\t\tswitch (first_element) {\n\t\t\t\tcase '..':\n\t\t\t\t\tnext_node = node_src.parent;\n\t\t\t\t\tbreak;\n\t\t\t\tcase '.':\n\t\t\t\t\tnext_node = node_src;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t// TODO: What does .node means?? in which case is this not a node? (it is for nodes which cannot have children - but I'd like to unify the api)\n\t\t\t\t\t// console.error(\"rethink this method Walker.find_node\")\n\t\t\t\t\t// if (node_src.node != null) {\n\t\t\t\t\tnext_node = node_src.node(first_element);\n\n\t\t\t\t// if (next_node == null) { this.find_node_warning(node_src, first_element); }\n\t\t\t\t// return next_node;\n\t\t\t\t// break\n\t\t\t\t// }\n\t\t\t}\n\t\t\tif (next_node && decomposed_path) {\n\t\t\t\tdecomposed_path.add_node(first_element, next_node);\n\t\t\t}\n\n\t\t\tif (next_node != null && elements.length > 1) {\n\t\t\t\tconst remainder = elements.slice(1).join(SEPARATOR);\n\t\t\t\tnext_node = this.find_node(next_node, remainder, decomposed_path);\n\t\t\t}\n\t\t\treturn next_node;\n\t\t}\n\n\t\treturn next_node;\n\t}\n}\n","import {CoreString} from 'src/core/String';\nimport {CoreWalker} from 'src/core/Walker';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nimport lodash_includes from 'lodash/includes';\nimport lodash_keys from 'lodash/keys';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_values from 'lodash/values';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {NameController} from '../NameController';\nimport CoreSelection from 'src/core/NodeSelection';\n\nimport {POLY} from 'src/engine/Poly';\n// import {NameController} from '../NameController';\n\n// interface HierarchyOptions {\n// \tcontext: NodeContext\n// \tdependent?: boolean;\n// }\nconst NODE_SIMPLE_NAME = 'children';\n\nexport class HierarchyChildrenController {\n\t// private _context: NodeContext | undefined;\n\t// private _children_allowed: boolean = false;\n\tprivate _children: Dictionary<BaseNodeType> = {};\n\tprivate _children_by_type: Dictionary<string[]> = {};\n\tprivate _children_and_grandchildren_by_context: Dictionary<string[]> = {};\n\n\tprivate _is_dependent_on_children: boolean = false;\n\tprivate _children_node: CoreGraphNode | undefined;\n\n\tprivate _selection: CoreSelection | undefined;\n\tget selection(): CoreSelection {\n\t\treturn (this._selection = this._selection || new CoreSelection(this.node));\n\t}\n\tconstructor(protected node: BaseNodeType, private _context: NodeContext) {}\n\n\tinit(dependent: boolean = false) {\n\t\t// const context = this.node.children_context();\n\t\t// if (context) {\n\t\t// this._available_children_classes = options['children'] || {};\n\t\t// this._available_children_classes = window.POLY.registered_nodes(context, this.self.type())\n\n\t\t// this._children_allowed = true;\n\t\tthis._children = {};\n\n\t\t// const is_dependent = options['dependent'];\n\t\tif (dependent) {\n\t\t\tthis._is_dependent_on_children = dependent;\n\t\t\tif (this._is_dependent_on_children) {\n\t\t\t\tthis._children_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t\t// this._children_node.set_scene(this.node.scene);\n\t\t\t\tthis.node.add_graph_input(this._children_node);\n\t\t\t}\n\t\t}\n\t\t// }\n\t}\n\tget context() {\n\t\treturn this._context;\n\t}\n\n\t// TODO: when copy pasting a node called bla_11, the next one will be renamed bla_110 instead of 12\n\tset_child_name(node: BaseNodeType, new_name: string): void {\n\t\t//return if node.name() == new_name\n\t\tlet current_child_with_name;\n\t\tnew_name = new_name.replace(/[^A-Za-z0-9]/g, '_');\n\t\tnew_name = new_name.replace(/^[0-9]/, '_'); // replace first char if not a letter\n\n\t\tif ((current_child_with_name = this._children[new_name]) != null) {\n\t\t\t// only return if found node is same as argument node, and if new_name is same as current_name\n\t\t\tif (node.name === new_name && current_child_with_name.graph_node_id === node.graph_node_id) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// increment new_name\n\t\t\tnew_name = CoreString.increment(new_name);\n\n\t\t\treturn this.set_child_name(node, new_name);\n\t\t} else {\n\t\t\t// let current_child;\n\t\t\tconst current_name = node.name;\n\n\t\t\t// delete old entry if node was in _children with old name\n\t\t\tconst current_child = this._children[current_name];\n\t\t\tif (current_child) {\n\t\t\t\tdelete this._children[current_name];\n\t\t\t}\n\n\t\t\t// add to new name\n\t\t\tthis._children[new_name] = node;\n\t\t\tnode.name_controller.update_name_from_parent(new_name);\n\t\t\tthis._add_to_nodes_by_type(node);\n\t\t\tthis.node.scene.nodes_controller.add_to_instanciated_node(node);\n\t\t}\n\t}\n\n\tnode_context_signature() {\n\t\treturn `${this.node.node_context()}/${this.node.type}`;\n\t}\n\n\tavailable_children_classes() {\n\t\tif (this._context) {\n\t\t\treturn POLY.registered_nodes(this._context, this.node.type);\n\t\t} else {\n\t\t\tconsole.warn('children controller not initialized for node', this.node.type, this.node);\n\t\t\treturn {};\n\t\t}\n\t}\n\t// children_allowed(): boolean {\n\t// \t// return (this.self.available_children_classes != null) &&\n\t// \t// (Object.keys(this.self.available_children_classes()).length > 0);\n\t// \tconst available_classes = this.available_children_classes();\n\t// \treturn available_classes && Object.keys(available_classes).length > 0;\n\t// }\n\n\tcreate_node(node_type: string): BaseNodeType {\n\t\tif (this.available_children_classes() == null) {\n\t\t\tthrow `no children available for ${this.node.full_path()}.`;\n\t\t} else {\n\t\t\tconst node_class = this.available_children_classes()[node_type];\n\n\t\t\tif (node_class == null) {\n\t\t\t\tconst message = `node type ${node_type} not found for ${this.node.full_path()} (${Object.keys(\n\t\t\t\t\tthis.available_children_classes()\n\t\t\t\t).join(', ')}, ${this._context}, ${this.node.type})`;\n\t\t\t\tconsole.error(message);\n\t\t\t\tthrow message;\n\t\t\t} else {\n\t\t\t\tconst child_node = new node_class(this.node.scene, `child_node_${node_type}`);\n\t\t\t\tchild_node.initialize_base_and_node();\n\t\t\t\t// child_node.set_scene(this.node.scene);\n\t\t\t\tthis.add_node(child_node);\n\t\t\t\treturn child_node;\n\t\t\t}\n\t\t}\n\t}\n\n\tadd_node(child_node: BaseNodeType) {\n\t\t// if (!this._children_allowed) {\n\t\t// \tthrow `node ${this.node.full_path()} cannot have children`;\n\t\t// }\n\n\t\tchild_node.set_parent(this.node);\n\t\tchild_node.params.init();\n\t\tchild_node.parent_controller.on_set_parent();\n\t\tchild_node.name_controller.post_set_full_path();\n\t\tif (child_node.children_allowed() && child_node.children_controller) {\n\t\t\tfor (let child of child_node.children_controller.children()) {\n\t\t\t\tchild.name_controller.post_set_full_path();\n\t\t\t}\n\t\t}\n\t\tthis.node.emit(NodeEvent.CREATED, {child_node_json: child_node.to_json()});\n\t\tif (this.node.scene.lifecycle_controller.on_create_hook_allowed()) {\n\t\t\tchild_node.lifecycle.on_create();\n\t\t}\n\t\tthis.set_child_name(child_node, NameController.base_name(child_node));\n\t\tthis.node.lifecycle.on_child_add(child_node);\n\t\t// this.post_add_node(child_node);\n\n\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\tthis._children_node.add_graph_input(child_node);\n\t\t}\n\t\tif (child_node.require_webgl2()) {\n\t\t\tthis.node.scene.webgl_controller.set_require_webgl2();\n\t\t}\n\n\t\treturn child_node;\n\t}\n\t// that's redondant with the lifecycle on_child_add and on_child_remove\n\t// post_add_node(node: BaseNode) {}\n\t// post_remove_node(node: BaseNode) {}\n\n\tremove_node(child_node: BaseNodeType): void {\n\t\tif (child_node.parent != this.node) {\n\t\t\treturn console.warn(`node ${child_node.name} not under parent ${this.node.full_path()}`);\n\t\t} else {\n\t\t\t// set other dependencies dirty\n\t\t\tchild_node.set_successors_dirty(this.node);\n\n\t\t\tif (this._is_dependent_on_children && this._children_node) {\n\t\t\t\tthis._children_node.remove_graph_input(child_node);\n\t\t\t}\n\n\t\t\tif (this.selection.contains(child_node)) {\n\t\t\t\tthis.selection.remove([child_node]);\n\t\t\t}\n\n\t\t\tconst first_connection = child_node.io.connections.first_input_connection();\n\t\t\tchild_node.io.connections.input_connections()?.forEach((input_connection) => {\n\t\t\t\tif (input_connection) {\n\t\t\t\t\tinput_connection.disconnect({set_input: true});\n\t\t\t\t}\n\t\t\t});\n\t\t\tchild_node.io.connections.output_connections()?.forEach((output_connection) => {\n\t\t\t\tif (output_connection) {\n\t\t\t\t\toutput_connection.disconnect({set_input: true});\n\t\t\t\t\tif (first_connection) {\n\t\t\t\t\t\tconst old_src = first_connection.node_src;\n\t\t\t\t\t\tconst old_output_index = output_connection.output_index;\n\t\t\t\t\t\tconst old_dest = output_connection.node_dest;\n\t\t\t\t\t\tconst old_input_index = output_connection.input_index;\n\t\t\t\t\t\told_dest.io.inputs.set_input(old_input_index, old_src, old_output_index);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// disconnect successors\n\t\t\tchild_node.graph_disconnect_successors();\n\n\t\t\t// remove from children\n\t\t\tchild_node.set_parent(null);\n\t\t\tdelete this._children[child_node.name];\n\t\t\tthis._remove_from_nodes_by_type(child_node);\n\t\t\tthis.node.scene.nodes_controller.remove_from_instanciated_node(child_node);\n\n\t\t\tthis.node.lifecycle.on_child_remove(child_node);\n\t\t\tchild_node.lifecycle.on_delete();\n\t\t\tchild_node.emit(NodeEvent.DELETED, {parent_id: this.node.graph_node_id});\n\t\t}\n\t}\n\n\tfind_node(path: string): BaseNodeType | null {\n\t\t// if (!this._children_allowed) {\n\t\t// \treturn null;\n\t\t// }\n\t\tif (path == null) {\n\t\t\treturn null;\n\t\t}\n\t\tif (path === CoreWalker.CURRENT || path === CoreWalker.CURRENT_WITH_SLASH) {\n\t\t\treturn this.node;\n\t\t}\n\t\tif (path === CoreWalker.PARENT || path === CoreWalker.PARENT_WITH_SLASH) {\n\t\t\treturn this.node.parent;\n\t\t}\n\n\t\tconst separator = CoreWalker.separator();\n\t\tif (path[0] === separator) {\n\t\t\tpath = path.substring(1, path.length);\n\t\t}\n\n\t\tconst elements = path.split(separator);\n\t\tif (elements.length === 1) {\n\t\t\tconst name = elements[0];\n\t\t\treturn this._children[name];\n\t\t} else {\n\t\t\treturn CoreWalker.find_node(this.node, path);\n\t\t}\n\t}\n\n\t_add_to_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tthis._children_by_type[type] = this._children_by_type[type] || [];\n\t\tif (!lodash_includes(this._children_by_type[type], node_id)) {\n\t\t\tthis._children_by_type[type].push(node_id);\n\t\t}\n\t\tthis.add_to_children_and_grandchildren_by_context(node);\n\t}\n\t_remove_from_nodes_by_type(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.type;\n\t\tif (this._children_by_type[type]) {\n\t\t\tconst index = this._children_by_type[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_by_type[type].splice(index, 1);\n\t\t\t\tif (this._children_by_type[type].length == 0) {\n\t\t\t\t\tdelete this._children_by_type[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.remove_from_children_and_grandchildren_by_context(node);\n\t}\n\tadd_to_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tthis._children_and_grandchildren_by_context[type] = this._children_and_grandchildren_by_context[type] || [];\n\t\tif (!lodash_includes(this._children_and_grandchildren_by_context[type], node_id)) {\n\t\t\tthis._children_and_grandchildren_by_context[type].push(node_id);\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.add_to_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\tremove_from_children_and_grandchildren_by_context(node: BaseNodeType) {\n\t\tconst node_id = node.graph_node_id;\n\t\tconst type = node.node_context();\n\t\tif (this._children_and_grandchildren_by_context[type]) {\n\t\t\tconst index = this._children_and_grandchildren_by_context[type].indexOf(node_id);\n\t\t\tif (index >= 0) {\n\t\t\t\tthis._children_and_grandchildren_by_context[type].splice(index, 1);\n\t\t\t\tif (this._children_and_grandchildren_by_context[type].length == 0) {\n\t\t\t\t\tdelete this._children_and_grandchildren_by_context[type];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.node.parent && this.node.parent.children_allowed()) {\n\t\t\tthis.node.parent.children_controller?.remove_from_children_and_grandchildren_by_context(node);\n\t\t}\n\t}\n\n\tnodes_by_type(type: string): BaseNodeType[] {\n\t\tconst node_ids = this._children_by_type[type] || [];\n\t\tconst graph = this.node.scene.graph;\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tnode_ids.forEach((node_id) => {\n\t\t\tconst node = graph.node_from_id(node_id) as BaseNodeType;\n\t\t\tif (node) {\n\t\t\t\tnodes.push(node);\n\t\t\t}\n\t\t});\n\t\treturn nodes;\n\t}\n\t// children_and_grandchildren_by_context(context: NodeContext): BaseNode[]{\n\t// \tconst node_ids = this._children_and_grandchildren_by_context[context] || []\n\t// \tconst graph = this.self.scene().graph()\n\t// \treturn node_ids.map(node_id=>graph.node_from_id(node_id))\n\t// }\n\thas_children_and_grandchildren_with_context(context: NodeContext) {\n\t\treturn this._children_and_grandchildren_by_context[context] != null;\n\t}\n\t//lodash_filter this.children(), (child)=>\n\t//\tchild.type() == type\n\n\tchildren(): BaseNodeType[] {\n\t\treturn lodash_values(this._children);\n\t}\n\tchildren_names() {\n\t\treturn lodash_sortBy(lodash_keys(this._children));\n\t}\n\t// children_map: ->\n\t// \t@_children\n\n\ttraverse_children(callback: (arg0: BaseNodeType) => void) {\n\t\tfor (let child of this.children()) {\n\t\t\tcallback(child);\n\n\t\t\tchild.children_controller?.traverse_children(callback);\n\t\t}\n\t}\n}\n","// import UIData from './UIData';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport lodash_difference from 'lodash/difference';\nimport lodash_union from 'lodash/union';\n// import lodash_isArray from 'lodash/isArray'\nimport lodash_isEqual from 'lodash/isEqual';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\nexport default class NodeSelection {\n\t_node_ids: string[] = [];\n\tconstructor(private _node: BaseNodeType) {\n\t\t// super();\n\t\t// this._node_ids = [];\n\t}\n\n\tnode() {\n\t\treturn this._node;\n\t}\n\n\tnodes(): BaseNodeType[] {\n\t\treturn this._node.scene.graph.nodes_from_ids(this._node_ids) as BaseNodeType[];\n\t}\n\n\tcontains(node: BaseNodeType): boolean {\n\t\treturn this._node_ids.includes(node.graph_node_id);\n\t}\n\tequals(nodes: BaseNodeType[]): boolean {\n\t\tconst node_ids = nodes.map((node) => node.graph_node_id).sort();\n\t\treturn lodash_isEqual(node_ids, this._node_ids);\n\t}\n\n\tclear() {\n\t\tthis._node_ids = [];\n\t\tthis.send_update_event();\n\t}\n\tset(nodes: BaseNodeType[]) {\n\t\t// this.remove(this.nodes());\n\t\tthis._node_ids = [];\n\t\tthis.add(nodes);\n\t}\n\n\tadd(nodes_to_add: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_add)) { nodes_to_add = [nodes_to_add]; }\n\n\t\tconst node_ids_to_add = nodes_to_add.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_union(this._node_ids, node_ids_to_add);\n\n\t\tthis.send_update_event();\n\t}\n\n\tremove(nodes_to_remove: BaseNodeType[]) {\n\t\t// if (!lodash_isArray(nodes_to_remove)) { nodes_to_remove = [nodes_to_remove]; }\n\n\t\tconst node_ids_to_remove = nodes_to_remove.map((node) => node.graph_node_id);\n\t\tthis._node_ids = lodash_difference(this._node_ids, node_ids_to_remove);\n\n\t\tthis.send_update_event();\n\t}\n\n\tprivate send_update_event() {\n\t\tthis._node.emit(NodeEvent.SELECTION_UPDATED);\n\t}\n\n\tprivate _json: string[] = [];\n\tto_json() {\n\t\tthis._json = this._json || [];\n\t\tthis._json = this._node_ids.map((id) => id);\n\t\treturn this._json;\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\n\ntype Callback = () => void;\ntype CallbackWithChildNode = (child_node: BaseNodeType) => void;\n\nexport class LifeCycleController {\n\tprotected _creation_completed = false;\n\tprotected _on_child_add_hooks: CallbackWithChildNode[] = [];\n\tprivate _on_child_remove_hooks: CallbackWithChildNode[] = [];\n\tprivate _on_create_hooks: Callback[] = [];\n\tprivate _on_delete_hooks: Callback[] = [];\n\tconstructor(protected node: BaseNodeType) {}\n\n\tset_creation_completed() {\n\t\tthis._creation_completed = true;\n\t}\n\tget creation_completed() {\n\t\treturn this.node.scene.loading_controller.loaded && this._creation_completed;\n\t}\n\t//\n\t//\n\t// ON CHILD ADD\n\t//\n\t//\n\tadd_on_child_add_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_add_hooks.push(callback);\n\t}\n\ton_child_add(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_add_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CHILD REMOVE\n\t//\n\t//\n\tadd_on_child_remove_hook(callback: CallbackWithChildNode) {\n\t\tthis._on_child_remove_hooks.push(callback);\n\t}\n\ton_child_remove(node: BaseNodeType) {\n\t\tthis.execute_hooks_with_child_node(this._on_child_remove_hooks, node);\n\t}\n\n\t//\n\t//\n\t// ON CREATE\n\t//\n\t//\n\tadd_create_hook(callback: Callback) {\n\t\tthis._on_create_hooks.push(callback);\n\t}\n\ton_create() {\n\t\tthis.execute_hooks(this._on_create_hooks);\n\t}\n\n\t//\n\t//\n\t// ON DELETE\n\t//\n\t//\n\tadd_delete_hook(callback: Callback) {\n\t\tthis._on_delete_hooks.push(callback);\n\t}\n\ton_delete() {\n\t\tthis.execute_hooks(this._on_delete_hooks);\n\t}\n\n\t//\n\t//\n\t// UTILS\n\t//\n\t//\n\tprotected execute_hooks(hooks: Callback[]) {\n\t\tfor (let hook of hooks) {\n\t\t\thook();\n\t\t}\n\t}\n\tprotected execute_hooks_with_child_node(hooks: CallbackWithChildNode[], child_node: BaseNodeType) {\n\t\tfor (let hook of hooks) {\n\t\t\thook(child_node);\n\t\t}\n\t}\n}\n\n// export function LifeCycle<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\ton_child_add(node: BaseNode) {}\n// \t\t//console.log(\"A #{this.full_path()} lifecycle on_add_child\", node)\n// \t\ton_child_remove(node: BaseNode) {}\n// \t\t//console.log(\"A #{this.full_path()} lifecycle on_child_remove\", node)\n\n// \t\ton_create() {}\n// \t\t//\n// \t\ton_delete() {}\n// \t};\n// }\n","import {BaseNodeType} from '../_Base';\nimport {BaseContainer} from 'src/engine/containers/_Base';\nimport {POLY} from 'src/engine/Poly';\n\nexport class CookController {\n\t_cooking: boolean = false;\n\t_cooks_count: number = 0;\n\t_max_cook_time: number = -1;\n\t_cooking_dirty_timestamp: number | undefined;\n\t_cook_time_with_inputs: number = 0;\n\t_cook_time_with_inputs_start: number | undefined;\n\t_cook_time_start: number | undefined;\n\t_cook_time: number = 0;\n\t_cook_time_params_start: number | undefined;\n\t_cook_time_params: number = 0;\n\t_last_eval_key: string | undefined;\n\n\t_inputs_evaluation_required: boolean = true; //currently only for switch SOP\n\n\tconstructor(private node: BaseNodeType) {}\n\n\tdisallow_inputs_evaluation() {\n\t\tthis._inputs_evaluation_required = false;\n\t}\n\n\tget is_cooking(): boolean {\n\t\treturn this._cooking === true;\n\t}\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\tget cook_time(): number {\n\t\treturn this._cook_time;\n\t}\n\t// post_set_dirty: (original_trigger_graph_node, direct_trigger_graph_node)->\n\t//this.emit 'node_dirty_updated'\n\t// this.node_post_set_dirty()\n\t// post_remove_dirty_state: (message)->\n\t// \tif !message?\n\t// \t\tthrow \"remove dirty state without message\"\n\n\t// node_post_set_dirty: ->\n\t// \t#\n\tprivate _init_cooking_state() {\n\t\tthis._cooking = true;\n\t\tthis._cooking_dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t}\n\tprivate _init_cooking_start_time(perf_active?: boolean) {\n\t\tif (perf_active == null) {\n\t\t\tperf_active = this.node.scene.performance.started;\n\t\t}\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_start = performance.now();\n\t\t}\n\t}\n\n\tprivate async _start_cook_if_no_errors(input_contents: any[]) {\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.end_cook();\n\t\t} else {\n\t\t\t// this.self.cook(input_containers);\n\t\t\ttry {\n\t\t\t\tawait this.node.cook(input_contents);\n\t\t\t} catch (e) {\n\t\t\t\tthis.node.states.error.set(`node internal error: '${e}'.`);\n\t\t\t\tconsole.error(this.node.full_path(), e);\n\t\t\t\tthis.end_cook();\n\t\t\t}\n\t\t}\n\t}\n\n\tasync cook_main() {\n\t\tif (this.is_cooking) {\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tconst perf_active = this.node.scene.performance.started;\n\t\tif (perf_active) {\n\t\t\tthis._cook_time_with_inputs_start = performance.now();\n\t\t}\n\t\tthis.node.states.error.clear();\n\n\t\t//this._block_params_dirty_propagation()\n\t\tconst input_containers = await this.evaluate_inputs_and_params();\n\n\t\tthis._init_cooking_start_time(perf_active);\n\n\t\tconst input_contents = [];\n\t\tif (input_containers) {\n\t\t\tlet input_container;\n\t\t\tfor (let i = 0; i < input_containers.length; i++) {\n\t\t\t\tinput_container = input_containers[i];\n\t\t\t\tif (input_container) {\n\t\t\t\t\tif (this.node.io.inputs.input_clonable_state_with_override(i)) {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content_cloned());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tinput_contents.push(input_container.core_content());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tawait this._start_cook_if_no_errors(input_contents);\n\t}\n\tasync cook_main_without_inputs() {\n\t\tthis.node.scene.cook_controller.add_node(this.node);\n\t\tif (this.is_cooking) {\n\t\t\t// TODO:\n\t\t\t// this seems to happen because when we flush the cooker queue,\n\t\t\t// some graph nodes will trigger more updates, which will then make dependent nodes\n\t\t\t// dirty again\n\t\t\tconsole.warn('cook_main_without_inputs already cooking', this.node.full_path());\n\t\t\treturn;\n\t\t}\n\t\tthis._init_cooking_state();\n\t\tthis._init_cooking_start_time();\n\t\tthis.node.states.error.clear();\n\n\t\tawait this.node.params.eval_all();\n\t\tawait this._start_cook_if_no_errors([]);\n\t}\n\t// catch e\n\t// \tthis.set_error(\"failed to cook: #{e}\")\n\n\tend_cook(message?: string | null) {\n\t\tthis._increment_cooks_count();\n\n\t\tconst dirty_timestamp = this.node.dirty_controller.dirty_timestamp;\n\t\tif (dirty_timestamp == null || dirty_timestamp === this._cooking_dirty_timestamp) {\n\t\t\tthis.node.remove_dirty_state();\n\t\t\tthis._terminate_cook_process();\n\t\t} else {\n\t\t\tPOLY.log('COOK AGAIN', dirty_timestamp, this._cooking_dirty_timestamp, this.node.full_path());\n\t\t\tthis._cooking = false;\n\t\t\tthis.cook_main();\n\t\t}\n\t}\n\n\t_terminate_cook_process() {\n\t\tif (this.is_cooking) {\n\t\t\t//this._unblock_params_dirty_propagation()\n\t\t\tthis._cooking = false;\n\n\t\t\t// this._cook_eval_key = `${this.graph_node_id}/${performance.now()}@${this.context().frame()}`;\n\n\t\t\tthis._record_cook_time();\n\t\t\t//console.log(\"END COOK: #{this.full_path()} #{this.cook_time()} (with inputs:#{this.cook_time_with_inputs()}) (cook count: #{@_cooks_count}): #{message}\")\n\t\t\t//this.notify_requesters()\n\t\t\tsetTimeout(this.node.container_controller.notify_requesters.bind(this.node.container_controller), 0);\n\t\t}\n\t}\n\tprivate _increment_cooks_count() {\n\t\tif (this.is_cooking) {\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cooks_count += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\t// cook_eval_key() {\n\t// \tif (!this.is_dirty()) {\n\t// \t\treturn this._cook_eval_key;\n\t// \t} else {\n\t// \t\treturn performance.now();\n\t// \t}\n\t// }\n\n\t_record_cook_time() {\n\t\tif (this.node.scene.performance.started) {\n\t\t\tconst cook_time_end = performance.now();\n\n\t\t\tif (this._cook_time_with_inputs_start != null) {\n\t\t\t\tthis._cook_time_with_inputs = cook_time_end - this._cook_time_with_inputs_start;\n\t\t\t\tthis._cook_time_with_inputs_start = undefined;\n\t\t\t}\n\n\t\t\tif (this._cook_time_params_start != null && this._cook_time_start != null) {\n\t\t\t\tthis._cook_time_params = this._cook_time_start - this._cook_time_params_start;\n\t\t\t}\n\n\t\t\tif (this._cook_time_start != null) {\n\t\t\t\tthis._cook_time = cook_time_end - this._cook_time_start;\n\t\t\t\tthis._cook_time_start = undefined;\n\t\t\t}\n\n\t\t\tthis._max_cook_time = Math.max(this._max_cook_time, this._cook_time);\n\t\t}\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis.node.scene.performance.record_node_cook_data(this.node);\n\t\t}\n\t}\n\n\t// allow_eval_key_check() {\n\t// \treturn false;\n\t// }\n\n\tasync evaluate_inputs_and_params() {\n\t\t//t0 = performance.now()\n\n\t\tlet input_containers: (BaseContainer | null)[] = [];\n\t\tif (this._inputs_evaluation_required) {\n\t\t\tinput_containers = await this.node.io.inputs.eval_required_inputs_p();\n\t\t}\n\t\t// const inputs_eval_key = input_containers.map( c => c.eval_key()).join('-');\n\n\t\tif (this.node.scene.performance.started) {\n\t\t\tthis._cook_time_params_start = performance.now();\n\t\t}\n\n\t\t/*const params_eval_key = */ await this.node.params.eval_all();\n\t\t// const full_eval_key = [inputs_eval_key, params_eval_key].join('+');\n\t\t// if (this.allow_eval_key_check() && (this._last_eval_key != null) && (this._last_eval_key === full_eval_key)) {\n\t\t// \tthis._terminate_cook_process('no need to cook');\n\t\t// } else {\n\t\t// \tthis._last_eval_key = full_eval_key;\n\t\t// }\n\t\treturn input_containers;\n\t}\n\n\t//this._time_with_precision(@_cook_time)\n\tget cook_time_with_inputs() {\n\t\treturn this._cook_time_with_inputs;\n\t}\n\t//this._time_with_precision(@_cook_time_with_inputs)\n\tget cook_time_params() {\n\t\treturn this._cook_time_params;\n\t}\n\t_time_with_precision(time: number) {\n\t\tconst precision = 1000;\n\t\treturn Math.round(time * precision) / precision;\n\t}\n}\n","import lodash_groupBy from 'lodash/groupBy';\nimport {BaseNodeType, BaseNodeClass} from '../_Base';\n\nimport {BaseParamType, BaseParamClass} from 'src/engine/params/_Base';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nenum METHODS {\n\tSUCCESSORS = 'graph_successors',\n\tPREDECESSORS = 'graph_predecessors',\n}\n\n// finally, guard ALL the types!\nfunction typeGuard<T extends PrimitiveOrConstructor>(o: any, className: T): o is GuardedType<T> {\n\tconst localPrimitiveOrConstructor: PrimitiveOrConstructor = className;\n\tif (typeof localPrimitiveOrConstructor === 'string') {\n\t\treturn typeof o === localPrimitiveOrConstructor;\n\t}\n\treturn o instanceof localPrimitiveOrConstructor;\n}\n\nexport class DependenciesController {\n\tprivate _params_referrees_by_graph_node_id: Dictionary<BaseParamType> | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\t// debug_dependencies() {\n\t// \tconst nodes = this.scene_successors();\n\t// \tconsole.log('--------------------');\n\t// \tnodes.forEach((n) => {\n\t// \t\tconsole.log(n.full_path());\n\t// \t});\n\t// }\n\n\tscene_successors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.SUCCESSORS);\n\t}\n\n\tscene_predecessors() {\n\t\treturn this._find_scene_node_scene_nodes(METHODS.PREDECESSORS);\n\t}\n\tprivate _find_scene_node_scene_nodes(method: METHODS): BaseNodeType[] {\n\t\tconst params = this.node.params.all;\n\t\tconst graph_nodes: CoreGraphNode[] = [];\n\t\tfor (let param of params) {\n\t\t\tgraph_nodes.push(param);\n\t\t}\n\t\tgraph_nodes.push(this.node);\n\t\tconst start_nodes = graph_nodes;\n\t\tlet base_nodes: BaseNodeType[] = [];\n\t\tfor (let start_node of start_nodes) {\n\t\t\tthis._find_base_nodes_from_node(start_node, method, base_nodes);\n\t\t}\n\n\t\tif (method == METHODS.SUCCESSORS) {\n\t\t\tfor (let node of this.param_nodes_referree()) {\n\t\t\t\tbase_nodes.push(node);\n\t\t\t}\n\t\t}\n\n\t\t// ensure uniq and not current node\n\t\tbase_nodes = base_nodes.filter((scene_node) => {\n\t\t\treturn scene_node.graph_node_id != this.node.graph_node_id;\n\t\t});\n\t\tconst base_nodes_by_graph_node_id = lodash_groupBy(base_nodes, (n) => n.graph_node_id);\n\t\tconst uniq_base_nodes: BaseNodeType[] = [];\n\t\tObject.keys(base_nodes_by_graph_node_id).forEach((graph_node_id) => {\n\t\t\tuniq_base_nodes.push(base_nodes_by_graph_node_id[graph_node_id][0]);\n\t\t});\n\t\treturn uniq_base_nodes;\n\t}\n\n\tprivate _find_base_nodes_from_node(node: CoreGraphNode, method: METHODS, base_nodes: BaseNodeType[]) {\n\t\tconst next_nodes = node[method]();\n\t\tfor (let next_node of next_nodes) {\n\t\t\tif (next_node instanceof BaseParamClass) {\n\t\t\t\tbase_nodes.push(next_node.node);\n\t\t\t} else {\n\t\t\t\tif (typeGuard(next_node, BaseNodeClass)) {\n\t\t\t\t\tbase_nodes.push(next_node);\n\t\t\t\t} else {\n\t\t\t\t\tthis._find_base_nodes_from_node(next_node, method, base_nodes);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn base_nodes;\n\t}\n\n\t//\n\t//\n\t// REFERRED BY\n\t// which is used for operator path referring nodes without creating a graph edge\n\t//\n\t//\n\tadd_param_referree(param: BaseParamType) {\n\t\tthis._params_referrees_by_graph_node_id = this._params_referrees_by_graph_node_id || {};\n\t\tthis._params_referrees_by_graph_node_id[param.graph_node_id] = param;\n\t}\n\tremove_param_referree(param: BaseParamType) {\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tdelete this._params_referrees_by_graph_node_id[param.graph_node_id];\n\t\t}\n\t}\n\tparams_referree(): BaseParamType[] {\n\t\tconst list = [];\n\t\tif (this._params_referrees_by_graph_node_id) {\n\t\t\tfor (let graph_node_id of Object.keys(this._params_referrees_by_graph_node_id)) {\n\t\t\t\tlist.push(this._params_referrees_by_graph_node_id[graph_node_id]);\n\t\t\t}\n\t\t}\n\t\treturn list;\n\t}\n\tparam_nodes_referree(): BaseNodeType[] {\n\t\tconst node_by_graph_node_id: Dictionary<BaseNodeType> = {};\n\t\tlet node;\n\t\tfor (let param of this.params_referree()) {\n\t\t\tnode = param.node;\n\t\t\tnode_by_graph_node_id[node.graph_node_id] = node;\n\t\t}\n\t\tconst list = [];\n\t\tfor (let graph_node_id of Object.keys(node_by_graph_node_id)) {\n\t\t\tlist.push(node_by_graph_node_id[graph_node_id]);\n\t\t}\n\t\treturn list;\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport lodash_compact from 'lodash/compact';\nimport lodash_cloneDeep from 'lodash/cloneDeep';\nimport lodash_isEqual from 'lodash/isEqual';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamEvent} from 'src/engine/poly/ParamEvent';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nconst ALWAYS_REFERENCE_ASSET_OPTION = 'always_reference_asset';\nconst CALLBACK_OPTION = 'callback';\nconst CALLBACK_STRING_OPTION = 'callback_string';\n// const COLOR_OPTION = 'color';\nconst COOK_OPTION = 'cook';\nconst DESKTOP_BROWSE_OPTION = 'desktop_browse';\nconst FILE_TYPE_OPTION = 'file_type';\n// const EXPRESSION_ONLY_OPTION = 'expression_only';\nconst EXPRESSION = 'expression';\nconst FOR_ENTITIES = 'for_entities';\nconst LEVEL = 'level';\nconst MENU = 'menu';\nconst ENTRIES = 'entries';\n// const TYPE = 'type';\n// const RADIO = 'radio';\nconst MULTILINE_OPTION = 'multiline';\nconst NODE_SELECTION = 'node_selection';\nconst NODE_SELECTION_CONTEXT = 'context';\nconst DEPENDENT_ON_FOUND_NODE = 'dependent_on_found_node';\nconst RANGE_OPTION = 'range';\nconst RANGE_LOCKED_OPTION = 'range_locked';\nconst STEP_OPTION = 'step';\nconst SPARE_OPTION = 'spare';\nconst TEXTURE_OPTION = 'texture';\nconst ENV_OPTION = 'env';\nconst HIDDEN_OPTION = 'hidden';\nconst LABEL_OPTION = 'label';\nconst FIELD_OPTION = 'field';\nconst VISIBLE_IF_OPTION = 'visible_if';\n\nexport interface ParamOptionsMenuEntry {\n\tname: string;\n\tvalue: number;\n}\n\ninterface BaseParamOptions {\n\t// cook\n\tcook?: boolean;\n\t// spare\n\tspare?: boolean;\n\t// visible\n\thidden?: boolean;\n\tlabel?: boolean;\n\tfield?: boolean;\n\tvisible_if?: Dictionary<number | boolean>;\n}\ninterface MenuParamOptions {\n\tmenu?: {\n\t\t// type: 'radio';\n\t\tentries: ParamOptionsMenuEntry[];\n\t};\n}\ninterface ExpressionParamOptions {\n\texpression?: {\n\t\tfor_entities?: boolean;\n\t};\n}\n\ninterface NumberParamOptions extends BaseParamOptions {\n\trange?: Number2;\n\trange_locked?: Boolean2;\n\tstep?: number;\n}\ninterface AssetParamOptions {\n\talways_reference_asset?: boolean;\n}\ninterface DesktopParamOptions {\n\tdesktop_browse?: Dictionary<string>;\n}\ninterface CallbackParamOptions {\n\tcallback?: (node: BaseNodeType, param: BaseParamType) => any;\n\tcallback_string?: string;\n}\n\n// actual param options\nexport interface BooleanParamOptions\n\textends BaseParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface ButtonParamOptions extends BaseParamOptions, CallbackParamOptions {}\nexport interface ColorParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface FloatParamOptions\n\textends NumberParamOptions,\n\t\tMenuParamOptions,\n\t\tExpressionParamOptions,\n\t\tCallbackParamOptions {}\nexport interface FolderParamOptions extends BaseParamOptions {\n\tlevel?: number;\n}\nexport interface IntegerParamOptions extends NumberParamOptions, MenuParamOptions, CallbackParamOptions {}\nexport interface OperatorPathParamOptions extends BaseParamOptions, DesktopParamOptions, CallbackParamOptions {\n\tnode_selection?: {\n\t\tcontext?: NodeContext;\n\t};\n\tdependent_on_found_node?: boolean;\n}\nexport interface RampParamOptions extends BaseParamOptions {}\nexport interface SeparatorParamOptions extends BaseParamOptions {}\nexport interface StringParamOptions\n\textends BaseParamOptions,\n\t\tAssetParamOptions,\n\t\tDesktopParamOptions,\n\t\tExpressionParamOptions {\n\tmultiline?: boolean;\n}\nexport interface Vector2ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector3ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\nexport interface Vector4ParamOptions extends BaseParamOptions, ExpressionParamOptions {}\n\nexport interface ParamOptions\n\textends NumberParamOptions,\n\t\tFolderParamOptions,\n\t\tExpressionParamOptions,\n\t\tButtonParamOptions,\n\t\tDesktopParamOptions,\n\t\tMenuParamOptions,\n\t\tStringParamOptions,\n\t\tOperatorPathParamOptions {\n\t// asset refererences\n\t// always_reference_asset?: boolean;\n\t// callback\n\t// callback?: (node: BaseNodeType, param: BaseParamType) => any;\n\t// callback_string?: string;\n\t// color\n\t// color?: [number, number, number] | string;\n\t// cook\n\t// cook?: boolean;\n\t// desktop\n\t// desktop_browse?: Dictionary<string>;\n\t// expression\n\t// expression_only?: boolean;\n\t// expression?: {\n\t// \tfor_entities?: boolean;\n\t// };\n\t// folder\n\t// level?:number\n\t// menu\n\t// menu?: {\n\t// \t// type: 'radio';\n\t// \tentries: ParamOptionsMenuEntry[];\n\t// };\n\t// multiline\n\t// multiline?: boolean;\n\t// node selection\n\t// node_selection?: {\n\t// \tcontext?: NodeContext;\n\t// };\n\t// dependent_on_found_node?: boolean;\n\t// spare\n\t// spare?: boolean;\n\t// texture\n\ttexture?: {\n\t\tenv?: boolean;\n\t};\n\t// visible\n\t// hidden?: boolean;\n\t// label?: boolean;\n\t// field?: boolean;\n\t// visible_if?: Dictionary<number | boolean>;\n}\n\nexport class OptionsController {\n\tprivate _programatic_visible_state: boolean = true;\n\tprivate _options!: ParamOptions;\n\tprivate _default_options!: ParamOptions;\n\tconstructor(private _param: BaseParamType) {\n\t\t// this._options = lodash_cloneDeep(this._default_options);\n\t}\n\n\tset(options: ParamOptions) {\n\t\tthis._default_options = options;\n\t\tthis._options = lodash_cloneDeep(this._default_options);\n\t}\n\tcopy(options_controller: OptionsController) {\n\t\tthis._default_options = lodash_cloneDeep(options_controller.default);\n\t\tthis._options = lodash_cloneDeep(options_controller.current);\n\t}\n\tset_option(name: keyof ParamOptions, value: any) {\n\t\treturn Object.assign(this._options, name, value);\n\t}\n\tget param() {\n\t\treturn this._param;\n\t}\n\tget node(): BaseNodeType {\n\t\treturn this._param.node;\n\t}\n\tget default() {\n\t\treturn this._default_options;\n\t}\n\tget current() {\n\t\treturn this._options;\n\t}\n\n\t// utils\n\tget has_options_overridden(): boolean {\n\t\treturn !lodash_isEqual(this._options, this._default_options);\n\t}\n\tget overridden_options(): ParamOptions {\n\t\tconst overriden: ParamOptions = {};\n\t\tconst option_names = Object.keys(this._options) as Array<keyof ParamOptions>;\n\t\tfor (let option_name of option_names) {\n\t\t\tif (!lodash_isEqual(this._options[option_name], this._default_options[option_name])) {\n\t\t\t\tObject.assign(overriden, option_name, lodash_cloneDeep(this._options[option_name]));\n\t\t\t}\n\t\t}\n\t\treturn overriden;\n\t}\n\tget overridden_option_names(): Array<keyof ParamOptions> {\n\t\treturn Object.keys(this.overridden_options) as Array<keyof ParamOptions>;\n\t}\n\n\t// referenced assets\n\tget always_reference_asset(): boolean {\n\t\treturn this._options[ALWAYS_REFERENCE_ASSET_OPTION] || false;\n\t}\n\n\t// callback\n\thas_callback() {\n\t\treturn this._options[CALLBACK_OPTION] != null || this._options[CALLBACK_STRING_OPTION] != null;\n\t}\n\n\texecute_callback() {\n\t\t// we only allow execution when scene is loaded\n\t\t// to avoid errors such as an operator_path param\n\t\t// executing its callback before the node it points to is created\n\t\tif (!(this.node && this.node.scene.loading_controller.loaded)) {\n\t\t\treturn;\n\t\t}\n\t\tconst callback = this.get_callback();\n\t\tif (callback != null) {\n\t\t\tif (this.node && !this.node.cook_controller.is_cooking) {\n\t\t\t\tcallback(this.node, this.param);\n\t\t\t}\n\t\t}\n\t}\n\tprivate get_callback() {\n\t\tif (this.has_callback()) {\n\t\t\treturn (this._options[CALLBACK_OPTION] =\n\t\t\t\tthis._options[CALLBACK_OPTION] || this.create_callback_from_string());\n\t\t}\n\t}\n\tprivate create_callback_from_string() {\n\t\tconst callback_string = this._options[CALLBACK_STRING_OPTION];\n\t\tif (callback_string) {\n\t\t\tconst callback_function = new Function('node', 'scene', 'window', 'location', callback_string);\n\t\t\treturn () => {\n\t\t\t\tcallback_function(this.node, this.node.scene, null, null);\n\t\t\t};\n\t\t}\n\t}\n\n\t// color\n\t// color() {\n\t// \treturn this._options[COLOR_OPTION];\n\t// }\n\n\t// cook\n\tmakes_node_dirty_when_dirty() {\n\t\tlet cook_options;\n\n\t\t// false as the dirty state will go through the parent param\n\t\tif (this.param.parent_param != null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tlet value = true;\n\t\tif ((cook_options = this._options[COOK_OPTION]) != null) {\n\t\t\tvalue = cook_options;\n\t\t}\n\t\treturn value;\n\t}\n\n\t// desktop\n\tget desktop_browse_option() {\n\t\treturn this._options[DESKTOP_BROWSE_OPTION];\n\t}\n\tget desktop_browse_allowed(): boolean {\n\t\treturn this.desktop_browse_option != null;\n\t}\n\tdesktop_browse_file_type(): string | null {\n\t\tif (this.desktop_browse_option) {\n\t\t\treturn this.desktop_browse_option[FILE_TYPE_OPTION];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// expression\n\t// get displays_expression_only() {\n\t// \treturn this._options[EXPRESSION_ONLY_OPTION] === true;\n\t// }\n\tget is_expression_for_entities(): boolean {\n\t\tconst expr_option = this._options[EXPRESSION];\n\t\tif (expr_option) {\n\t\t\treturn expr_option[FOR_ENTITIES] || false;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// folder\n\tget level() {\n\t\treturn this._options[LEVEL] || 0;\n\t}\n\n\t// menu\n\tget has_menu() {\n\t\treturn this.menu_options != null;\n\t}\n\n\tprivate get menu_options() {\n\t\treturn this._options[MENU];\n\t}\n\t// private get menu_type() {\n\t// \tif(this.menu_options){\n\t// \t\treturn this.menu_options[TYPE];\n\t// \t}\n\t// }\n\n\tget menu_entries() {\n\t\tif (this.menu_options) {\n\t\t\treturn this.menu_options[ENTRIES];\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n\n\tget has_menu_radio() {\n\t\treturn this.has_menu; //&& this.menu_options[TYPE] === RADIO;\n\t}\n\n\t// multiline\n\tget is_multiline(): boolean {\n\t\treturn this._options[MULTILINE_OPTION] === true;\n\t}\n\n\t// node selection\n\tget node_selection_options() {\n\t\treturn this._options[NODE_SELECTION];\n\t}\n\tget node_selection_context() {\n\t\tif (this.node_selection_options) {\n\t\t\treturn this.node_selection_options[NODE_SELECTION_CONTEXT];\n\t\t}\n\t}\n\n\tdependent_on_found_node() {\n\t\tif (DEPENDENT_ON_FOUND_NODE in this._options) {\n\t\t\treturn this._options[DEPENDENT_ON_FOUND_NODE];\n\t\t} else {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\t// range\n\tget range(): Number2 {\n\t\t// cannot force range easily, as values are not necessarily from 0 to N\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [0, this.self.menu_entries().length-1 ]\n\t\t// } else {\n\t\treturn this._options[RANGE_OPTION] || [0, 1];\n\t\t// }\n\t}\n\tget step(): number {\n\t\treturn this._options[STEP_OPTION] || 0.01;\n\t}\n\n\tprivate range_locked(): Boolean2 {\n\t\t// if(this.self.has_menu() && this.self.menu_entries()){\n\t\t// \treturn [true, true]\n\t\t// } else {\n\t\treturn this._options[RANGE_LOCKED_OPTION] || [false, false];\n\t\t// }\n\t}\n\n\tensure_in_range(value: number): number {\n\t\tconst range = this.range;\n\n\t\tif (value >= range[0] && value <= range[1]) {\n\t\t\treturn value;\n\t\t} else {\n\t\t\tif (value < range[0]) {\n\t\t\t\treturn this.range_locked()[0] === true ? range[0] : value;\n\t\t\t} else {\n\t\t\t\treturn this.range_locked()[1] === true ? range[1] : value;\n\t\t\t}\n\t\t}\n\t}\n\n\t// spare\n\tget is_spare(): boolean {\n\t\treturn this._options[SPARE_OPTION] || false;\n\t}\n\n\t// texture\n\tget texture_options() {\n\t\treturn this._options[TEXTURE_OPTION];\n\t}\n\ttexture_as_env(): boolean {\n\t\tconst texture_options = this.texture_options;\n\t\tif (texture_options != null) {\n\t\t\treturn texture_options[ENV_OPTION] === true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t// visible\n\tget is_hidden(): boolean {\n\t\treturn this._options[HIDDEN_OPTION] === true || this._programatic_visible_state === false;\n\t}\n\tget is_visible(): boolean {\n\t\treturn !this.is_hidden;\n\t}\n\tset_visible_state(state: boolean) {\n\t\tthis._options[HIDDEN_OPTION] = !state;\n\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t}\n\n\tget is_label_hidden(): boolean {\n\t\tconst type = this.param.type;\n\t\treturn (\n\t\t\tthis._options[LABEL_OPTION] === false ||\n\t\t\ttype === ParamType.BUTTON ||\n\t\t\ttype === ParamType.SEPARATOR ||\n\t\t\t(type === ParamType.BOOLEAN && this.is_field_hidden())\n\t\t);\n\t}\n\tis_field_hidden(): boolean {\n\t\treturn this._options[FIELD_OPTION] === false;\n\t}\n\n\t// programatic visibility\n\tui_data_depends_on_other_params(): boolean {\n\t\treturn VISIBLE_IF_OPTION in this._options;\n\t}\n\tvisibility_predecessors() {\n\t\tconst predecessor_names = Object.keys(this._options[VISIBLE_IF_OPTION] || {});\n\t\tconst node = this.param.node;\n\t\treturn lodash_compact(\n\t\t\tpredecessor_names.map((name) => {\n\t\t\t\tconst param = node.params.get(name);\n\t\t\t\tif (param) {\n\t\t\t\t\treturn param;\n\t\t\t\t} else {\n\t\t\t\t\tconsole.error(\n\t\t\t\t\t\t`param ${name} not found as visibility condition for ${this.param.name} in node ${this.param.node.type}`\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tprivate _update_visibility_and_remove_dirty_bound = this.update_visibility_and_remove_dirty.bind(this);\n\tprivate _visibility_graph_node: CoreGraphNode | undefined;\n\tprivate _ui_data_dependency_set: boolean = false;\n\tset_ui_data_dependency() {\n\t\tif (this._ui_data_dependency_set) {\n\t\t\treturn;\n\t\t}\n\t\tthis._ui_data_dependency_set = true;\n\t\tconst predecessors = this.visibility_predecessors();\n\t\tif (predecessors.length > 0) {\n\t\t\tthis._visibility_graph_node = new CoreGraphNode(this.param.scene, 'param_visibility');\n\t\t\tfor (let predecessor of predecessors) {\n\t\t\t\tthis._visibility_graph_node.add_graph_input(predecessor);\n\t\t\t}\n\t\t\tthis._visibility_graph_node.add_post_dirty_hook(\n\t\t\t\t'_update_visibility_and_remove_dirty',\n\t\t\t\tthis._update_visibility_and_remove_dirty_bound\n\t\t\t);\n\t\t}\n\t}\n\tprivate update_visibility_and_remove_dirty() {\n\t\tthis.update_visibility();\n\t\tthis.param.remove_dirty_state();\n\t}\n\n\tasync update_visibility() {\n\t\tconst options = this._options[VISIBLE_IF_OPTION];\n\t\tif (options) {\n\t\t\tconst params = this.visibility_predecessors();\n\t\t\tconst promises = params.map((p) => p.compute());\n\t\t\tthis._programatic_visible_state = true;\n\t\t\tawait Promise.all(promises);\n\t\t\tfor (let param of params) {\n\t\t\t\tconst expected_val = options[param.name];\n\t\t\t\tconst val = param.value;\n\t\t\t\tif (expected_val != val) {\n\t\t\t\t\tthis._programatic_visible_state = false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis.param.emit(ParamEvent.VISIBLE_UPDATED);\n\t\t}\n\t}\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamEvent} from 'src/engine/poly/ParamEvent';\n\nexport class EmitController {\n\t_blocked_emit: boolean = false;\n\t_blocked_parent_emit: boolean = false;\n\t_count_by_event_name: Dictionary<number> = {};\n\tconstructor(protected param: BaseParamType) {}\n\n\tget emit_allowed(): boolean {\n\t\tif (this._blocked_emit === true) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (this.param.scene.loading_controller.is_loading) {\n\t\t\treturn false;\n\t\t}\n\t\t// TODO: should I also prevent nodes from updating\n\t\t// when they are being called in a loop such as from the Copy SOP?\n\t\t//node = this.node()\n\t\t//node? && !node.is_cooking() && this.scene().emit_allowed() # this prevents a camera from updating its param for instance\n\t\t// although maybe I should send a dirty to the store, and then that store queries the param?\n\t\treturn this.param.scene.events_controller.emit_allowed;\n\t}\n\n\tblock_emit() {\n\t\tthis._blocked_emit = true;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.block_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tunblock_emit() {\n\t\tthis._blocked_emit = false;\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tthis.param.components.forEach((c) => c.emit_controller.unblock_emit());\n\t\t}\n\t\treturn true;\n\t}\n\tblock_parent_emit() {\n\t\tthis._blocked_parent_emit = true;\n\t\treturn true;\n\t}\n\tunblock_parent_emit() {\n\t\tthis._blocked_parent_emit = false;\n\t\treturn true;\n\t}\n\n\tincrement_count(event_name: ParamEvent) {\n\t\tthis._count_by_event_name[event_name] = this._count_by_event_name[event_name] || 0;\n\t\tthis._count_by_event_name[event_name] += 1;\n\t}\n\tevents_count(event_name: ParamEvent): number {\n\t\treturn this._count_by_event_name[event_name] || 0;\n\t}\n\n\temit(event: ParamEvent) {\n\t\tif (this.emit_allowed) {\n\t\t\tthis.param.emit(event);\n\n\t\t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t\t\t\tthis.param.parent_param.emit(event);\n\t\t\t}\n\t\t}\n\t}\n\t// emit_param_updated() {\n\t// \tconsole.log('emit_param_updated', this.param.name, this.emit_allowed);\n\t// \tif (this.emit_allowed) {\n\t// \t\tthis.param.emit(ParamEvent.UPDATED);\n\n\t// \t\tif (this.param.parent_param != null && this._blocked_parent_emit !== true) {\n\t// \t\t\tthis.param.parent_param.emit(ParamEvent.UPDATED);\n\t// \t\t}\n\t// \t}\n\t// \t//else\n\t// \t//\tthis.emit('param_updated')\n\n\t// \t// return null\n\t// }\n}\n","import {BaseParamType} from '../_Base';\nimport {ParamValueSerializedTypeMap} from '../types/ParamValueSerializedTypeMap';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamInitValueSerializedTypeMap} from '../types/ParamInitValueSerializedTypeMap';\n\nexport interface ParamSerializerData {\n\tname: string;\n\ttype: string;\n\traw_input: ParamInitValueSerializedTypeMap[ParamType];\n\tvalue: ParamValueSerializedTypeMap[ParamType];\n\texpression?: string;\n\tgraph_node_id: string;\n\t// is_dirty: boolean;\n\terror_message?: string;\n\tis_visible: boolean;\n\tfolder_name?: string;\n\tcomponents?: string[];\n}\n\nexport class ParamSerializer {\n\tconstructor(protected param: BaseParamType) {}\n\n\tto_json(): ParamSerializerData {\n\t\tconst data: ParamSerializerData = {\n\t\t\tname: this.param.name,\n\t\t\ttype: this.param.type,\n\t\t\traw_input: this.raw_input(),\n\t\t\tvalue: this.value(),\n\t\t\texpression: this.expression(),\n\t\t\tgraph_node_id: this.param.graph_node_id,\n\t\t\t// is_dirty: this.param.is_dirty,\n\t\t\terror_message: this.error_message(),\n\t\t\tis_visible: this.is_visible(),\n\t\t\t// folder_name: this.param.ui_data.folder_name,\n\t\t\tcomponents: undefined,\n\t\t};\n\n\t\tif (this.param.is_multiple && this.param.components) {\n\t\t\tdata['components'] = this.param.components.map((component) => component.graph_node_id);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\traw_input() {\n\t\treturn this.param.raw_input_serialized;\n\t}\n\tvalue() {\n\t\treturn this.param.value_serialized;\n\t}\n\texpression() {\n\t\treturn this.param.has_expression() ? this.param.expression_controller?.expression : undefined;\n\t}\n\terror_message() {\n\t\treturn this.param.states.error.message;\n\t}\n\tis_visible() {\n\t\treturn this.param.options.is_visible;\n\t}\n}\n","import {BaseParamType} from '../_Base';\n\nimport {TimeDependentState} from './states/TimeDependent';\nimport {ErrorState} from './states/Error';\n\nexport class StatesController {\n\ttime_dependent = new TimeDependentState(this.param);\n\terror = new ErrorState(this.param);\n\tconstructor(protected param: BaseParamType) {}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\n\nexport class TimeDependentState {\n\tconstructor(protected param: BaseParamType) {}\n\n\tget active(): boolean {\n\t\tconst frame_graph_node_id = this.param.scene.time_controller.graph_node.graph_node_id;\n\n\t\treturn this.param.graph_predecessor_ids().includes(frame_graph_node_id);\n\t}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\nimport {ParamEvent} from 'src/engine/poly/ParamEvent';\n// import lodash_includes from 'lodash/includes';\n// import lodash_values from 'lodash/values';\n\nexport class ErrorState {\n\tprivate _message: string | undefined;\n\tconstructor(private param: BaseParamType) {}\n\n\tset(message: string | undefined) {\n\t\tif (this._message != message) {\n\t\t\tthis._message = message;\n\t\t\tthis.param.emit_controller.emit(ParamEvent.ERROR_UPDATED);\n\t\t}\n\t}\n\tget message() {\n\t\treturn this._message;\n\t}\n\tclear() {\n\t\tthis.set(undefined);\n\t}\n\tget active(): boolean {\n\t\treturn this._message != null;\n\t}\n}\n","// import {Color} from 'three/src/math/Color';\n// import {Vector2} from 'three/src/math/Vector2';\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector4} from 'three/src/math/Vector4';\n\n// import lodash_each from 'lodash/each';\n// import lodash_values from 'lodash/values';\n\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {ParamOptions} from 'src/engine/params/utils/OptionsController';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\n// import {TypedParam} from 'src/engine/params/_Base';\nimport {FloatParam} from 'src/engine/params/Float';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\n\n// import {Vector2} from 'three/src/math/Vector2';\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Color} from 'three/src/math/Color';\n// import {RampValue} from 'src/engine/params/ramp/RampValue';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamEvent} from 'src/engine/poly/ParamEvent';\n// import {RampValue} from 'src/engine/params/ramp/RampValue';\n// import {Vector4} from 'three/src/math/Vector4';\nimport {NodeParamsConfig} from './ParamsConfig';\n\nimport {ParamConstructorMap} from '../../../params/types/ParamConstructorMap';\nimport {ParamConstructorByType} from '../../../params/types/ParamConstructorByType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from '../../../params/types/ParamValuesTypeMap';\n\n// export type ParamInitValue =\n// \t| StringOrNumber\n// \t| StringOrNumber2\n// \t| StringOrNumber3\n// \t| StringOrNumber4\n// \t| boolean\n// \t| string\n// \t| null\n// \t| Color\n// \t| Vector2\n// \t| Vector3\n// \t| Vector4\n// \t| RampValue\n// \t| RampValueJson;\n\n// export type ParamValueSerialized =\n// \t| StringOrNumber\n// \t| StringOrNumber2\n// \t| StringOrNumber3\n// \t| StringOrNumber4\n// \t| boolean\n// \t| string\n// \t| null\n// \t| RampValueJson;\n\n// export type ParamValue = boolean | Color | number | string | RampValue | Vector2 | Vector3 | Vector4 | null;\n// export type MultipleNumericParamValue = Vector2 | Vector3 | Vector4 | Color;\n// export type NumericParamValue = MultipleNumericParamValue | number;\n\nconst NODE_SIMPLE_NAME = 'params';\n\nexport type OnSceneLoadHook = () => void;\ntype PostCreateParamsHook = () => void;\n\nexport class ParamsController {\n\tprivate _param_create_mode: boolean = false;\n\tprivate _params_by_name: Dictionary<BaseParamType> = {};\n\t// caches\n\tprivate _params_list: BaseParamType[] = [];\n\tprivate _param_names: string[] = [];\n\tprivate _non_spare_params: BaseParamType[] = [];\n\tprivate _spare_params: BaseParamType[] = [];\n\tprivate _non_spare_param_names: string[] = [];\n\tprivate _spare_param_names: string[] = [];\n\n\tprivate _params_node: CoreGraphNode | undefined;\n\t// private _params_eval_key: string;\n\tprivate _params_added_since_last_params_eval: boolean = false;\n\t// private _current_param_folder_name: string | undefined;\n\n\t// hooks\n\tprivate _post_create_params_hook: PostCreateParamsHook | undefined;\n\tprivate _on_scene_load_hooks: OnSceneLoadHook[] | undefined;\n\tprivate _on_scene_load_hook_names: string[] | undefined;\n\n\tconstructor(protected node: BaseNodeType) {}\n\n\tprivate init_dependency_node() {\n\t\tif (!this._params_node) {\n\t\t\t// TODO: consider not having a params_node for nodes which have no parameters\n\t\t\tthis._params_node = new CoreGraphNode(this.node.scene, NODE_SIMPLE_NAME);\n\t\t\t// this._params_node.set_scene(this.node.scene);\n\t\t\tthis.node.add_graph_input(this._params_node);\n\t\t}\n\t}\n\n\tinit() {\n\t\tthis.init_dependency_node();\n\t\t// this.reset_params()\n\t\tthis._param_create_mode = true;\n\n\t\tthis.init_from_params_config();\n\t\tthis.node.create_params();\n\t\tthis._post_create_params();\n\t}\n\tprivate _post_create_params() {\n\t\tthis._update_caches();\n\t\t// this._create_params_ui_data_dependencies();\n\t\tthis.init_param_accessors();\n\t\tthis._param_create_mode = false;\n\n\t\tthis.run_post_create_params_hook();\n\n\t\t// This was to debug a weird bug where I was adding nodes to the list\n\t\t// of params, from the DependenciesController\n\t\t// this._params_list.push = (...items: BaseParamType[]) => {\n\t\t// \tif (items[0] && !items[0].compute) {\n\t\t// \t\tconsole.warn('adding params', items);\n\t\t// \t}\n\t\t// \tfor (let i of items) {\n\t\t// \t\tthis._params_list[this._params_list.length] = i;\n\t\t// \t}\n\t\t// \treturn 0;\n\t\t// };\n\t}\n\tpost_create_spare_params() {\n\t\tthis._update_caches();\n\t\tthis.init_param_accessors();\n\t}\n\n\tprivate init_from_params_config() {\n\t\tconst params_config = this.node.params_config as NodeParamsConfig;\n\t\tif (params_config) {\n\t\t\tfor (let name of Object.keys(params_config)) {\n\t\t\t\tconst config = params_config[name];\n\t\t\t\tthis.add_param(config.type, name, config.init_value, config.options);\n\t\t\t}\n\t\t}\n\t}\n\tprivate init_param_accessors() {\n\t\tlet current_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\t\tthis._remove_unneeded_accessors(current_names_in_accessor);\n\t\t// update var after having removed accessors\n\t\tcurrent_names_in_accessor = Object.getOwnPropertyNames(this.node.pv);\n\n\t\tfor (let param of this.all) {\n\t\t\tconst is_spare: boolean = param.options.is_spare;\n\n\t\t\tconst param_not_yet_in_accessors = !current_names_in_accessor.includes(param.name);\n\n\t\t\tif (param_not_yet_in_accessors || is_spare) {\n\t\t\t\tObject.defineProperty(this.node.pv, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param.value;\n\t\t\t\t\t},\n\t\t\t\t\t// only spare parameters can be removed\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t\tObject.defineProperty(this.node.p, param.name, {\n\t\t\t\t\tget: () => {\n\t\t\t\t\t\treturn param;\n\t\t\t\t\t},\n\t\t\t\t\tconfigurable: is_spare,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\tprivate _remove_unneeded_accessors(current_names_in_accessor: string[]) {\n\t\tconst current_param_names = this._param_names;\n\t\tconst names_to_remove = [];\n\t\tfor (let current_name_in_accessor of current_names_in_accessor) {\n\t\t\tif (!current_param_names.includes(current_name_in_accessor)) {\n\t\t\t\tnames_to_remove.push(current_name_in_accessor);\n\t\t\t}\n\t\t}\n\n\t\tfor (let name_to_remove of names_to_remove) {\n\t\t\tObject.defineProperty(this.node.pv, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t\tObject.defineProperty(this.node.p, name_to_remove, {\n\t\t\t\tget: () => {\n\t\t\t\t\treturn undefined;\n\t\t\t\t},\n\t\t\t\tconfigurable: true,\n\t\t\t});\n\t\t}\n\t}\n\n\tget params_node() {\n\t\treturn this._params_node;\n\t}\n\tget all() {\n\t\treturn this._params_list;\n\t}\n\tget non_spare() {\n\t\treturn this._non_spare_params;\n\t}\n\tget spare() {\n\t\treturn this._spare_params;\n\t}\n\tget names(): string[] {\n\t\treturn this._param_names;\n\t}\n\tget non_spare_names(): string[] {\n\t\treturn this._non_spare_param_names;\n\t}\n\tget spare_names(): string[] {\n\t\treturn this._spare_param_names;\n\t}\n\t// get params_by_name() {\n\t// \treturn this._params_by_name;\n\t// }\n\t// get all_params() {\n\t// \t// return lodash_concat(lodash_values(this._params), lodash_values(this._spare_params));\n\t// \treturn lodash_values(this._params);\n\t// }\n\n\tprivate set_with_type<T extends ParamType>(name: string, value: ParamInitValuesTypeMap[T], type: T) {\n\t\tconst param = this.param_with_type(name, type);\n\t\tif (param) {\n\t\t\tparam.set(value as never);\n\t\t} else {\n\t\t\tconsole.warn(`param ${name} not found with type ${type}`);\n\t\t}\n\t}\n\tset_float(name: string, value: ParamInitValuesTypeMap[ParamType.FLOAT]) {\n\t\tthis.set_with_type(name, value, ParamType.FLOAT);\n\t}\n\tset_vector3(name: string, value: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tthis.set_with_type(name, value, ParamType.VECTOR3);\n\t}\n\n\thas_param(name: string) {\n\t\treturn this._params_by_name[name] != null;\n\t}\n\thas(name: string) {\n\t\treturn this.has_param(name);\n\t}\n\tget(name: string) {\n\t\treturn this.param(name);\n\t}\n\tparam_with_type<T extends ParamType>(name: string, type: T): ParamConstructorMap[T] | undefined {\n\t\tconst param = this.param(name);\n\t\tif (param && param.type == type) {\n\t\t\treturn param as ParamConstructorMap[T];\n\t\t}\n\t}\n\tget_float(name: string): FloatParam {\n\t\treturn this.param_with_type(name, ParamType.FLOAT) as FloatParam;\n\t}\n\tget_operator_path(name: string): OperatorPathParam {\n\t\treturn this.param_with_type(name, ParamType.OPERATOR_PATH) as OperatorPathParam;\n\t}\n\tvalue(name: string) {\n\t\treturn this.param(name)?.value;\n\t}\n\tvalue_with_type<T extends ParamType>(name: string, type: T): ParamValuesTypeMap[T] {\n\t\treturn this.param_with_type(name, type)?.value as ParamValuesTypeMap[T];\n\t\t// const param = this.param(name);\n\t\t// if (param && param.type() == type) {\n\t\t// \treturn param.value();\n\t\t// }\n\t}\n\tboolean(name: string) {\n\t\treturn this.value_with_type(name, ParamType.BOOLEAN);\n\t}\n\tfloat(name: string) {\n\t\treturn this.value_with_type(name, ParamType.FLOAT);\n\t}\n\tinteger(name: string) {\n\t\treturn this.value_with_type(name, ParamType.INTEGER);\n\t}\n\tstring(name: string) {\n\t\treturn this.value_with_type(name, ParamType.STRING);\n\t}\n\tvector2(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR2);\n\t}\n\tvector3(name: string) {\n\t\treturn this.value_with_type(name, ParamType.VECTOR3);\n\t}\n\tcolor(name: string) {\n\t\treturn this.value_with_type(name, ParamType.COLOR);\n\t}\n\n\tparam(name: string) {\n\t\tconst p = this._params_by_name[name];\n\t\tif (p != null) {\n\t\t\treturn p;\n\t\t} else {\n\t\t\tconsole.warn(\n\t\t\t\t`tried to access param '${name}' in node ${this.node.full_path()}, but existing params are: ${\n\t\t\t\t\tthis.names\n\t\t\t\t}`\n\t\t\t);\n\t\t\treturn null;\n\t\t}\n\t}\n\t// param_cache_name(param_name: string) {\n\t// \treturn `_param_${param_name}`;\n\t// }\n\n\tdelete_params(param_names: string[]) {\n\t\tfor (let param_name of param_names) {\n\t\t\tthis.delete_param(param_name);\n\t\t}\n\t\tthis._update_caches();\n\t}\n\tdelete_param(param_name: string) {\n\t\tconst param = this._params_by_name[param_name];\n\t\tif (param) {\n\t\t\tif (this._params_node) {\n\t\t\t\tthis._params_node.remove_graph_input(this._params_by_name[param_name]);\n\t\t\t}\n\t\t\tparam.set_node(null);\n\t\t\tdelete this._params_by_name[param_name];\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tconst child_name = component.name;\n\t\t\t\t\tdelete this._params_by_name[child_name];\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// const name_index = this._param_names.indexOf(param_name)\n\t\t\t// if(name_index >= 0){\n\t\t\t// \tthis._param_names.splice(name_index, 1)\n\t\t\t// }\n\t\t\tparam.emit(ParamEvent.DELETED);\n\t\t} else {\n\t\t\tthrow new Error(`param '${param_name}' does not exist on node ${this.node.full_path()}`);\n\t\t}\n\t}\n\n\tadd_param<T extends ParamType>(\n\t\ttype: T,\n\t\tname: string,\n\t\tinit_value: ParamInitValuesTypeMap[T],\n\t\toptions: ParamOptions = {}\n\t): ParamConstructorMap[T] | undefined {\n\t\tconst is_spare = options['spare'] || false;\n\t\tif (this._param_create_mode === false && !is_spare) {\n\t\t\tconsole.warn(\n\t\t\t\t`node ${this.node.full_path()} (${\n\t\t\t\t\tthis.node.type\n\t\t\t\t}) param '${name}' cannot be created outside of create_params`\n\t\t\t);\n\t\t}\n\t\tif (this.node.scene == null) {\n\t\t\tconsole.warn(`node ${this.node.full_path()} (${this.node.type}) has no scene assigned`);\n\t\t}\n\n\t\tconst constructor = ParamConstructorByType[type];\n\t\tif (constructor != null) {\n\t\t\tconst existing_param = this._params_by_name[name];\n\t\t\tif (existing_param) {\n\t\t\t\tif (is_spare) {\n\t\t\t\t\t// delete the old one, otherwise the gl nodes when saved will attempt to set the value\n\t\t\t\t\t// of a param with the potentially wrong type\n\t\t\t\t\tif (existing_param.type != type) {\n\t\t\t\t\t\tthis.delete_param(existing_param.name);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// check that the param is spare, so that the ones generated by gl nodes are not generating an exception\n\t\t\t\t\tconsole.warn(`a param named ${name} already exists`, this.node);\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst param: ParamConstructorMap[T] = new constructor(this.node.scene);\n\t\t\tparam.options.set(options);\n\n\t\t\t// param.set_scene(this.node.scene);\n\t\t\tparam.set_name(name);\n\t\t\tparam.set_init_value(init_value as never);\n\t\t\tparam.init_components();\n\t\t\tparam.set_node(this.node);\n\t\t\t// param.initialize();\n\t\t\t// param.ui_data.set_folder_name(this.current_param_folder_name());\n\n\t\t\tthis._params_by_name[param.name] = param as BaseParamType;\n\t\t\t// this._params_list.push(param);\n\t\t\t// this._param_names[param.name()] = true; //.push(param.name());\n\n\t\t\t// we add the components, so that we can access them with expressions like ch('ty')\n\t\t\tif (param.is_multiple && param.components) {\n\t\t\t\tfor (let component of param.components) {\n\t\t\t\t\tthis._params_by_name[component.name] = component as BaseParamType;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthis._params_added_since_last_params_eval = true;\n\n\t\t\treturn param;\n\t\t}\n\t}\n\n\tprivate _update_caches() {\n\t\t// _params_list: BaseParam[] = [];\n\t\tthis._params_list = Object.values(this._params_by_name);\n\t\t// _param_names: string[] = [];\n\t\tthis._param_names = Object.keys(this._params_by_name);\n\t\t// _non_spare_params: BaseParam[] = [];\n\t\tthis._non_spare_params = Object.values(this._params_by_name).filter((p) => !p.options.is_spare);\n\t\t// _spare_params: BaseParam[] = [];\n\t\tthis._spare_params = Object.values(this._params_by_name).filter((p) => p.options.is_spare);\n\t\t// _non_spare_param_names: string[] = [];\n\t\tthis._non_spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => !p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\t// _spare_param_names: string[] = [];\n\t\tthis._spare_param_names = Object.values(this._params_by_name)\n\t\t\t.filter((p) => p.options.is_spare)\n\t\t\t.map((p) => p.name);\n\t\t// delete this._param_names[param_name];\n\n\t\t// // delete from this._params_list\n\t\t// let index = -1;\n\t\t// for (let i = 0; i < this._params_list.length; i++) {\n\t\t// \tif (this._params_list[i].name() == param_name) {\n\t\t// \t\tindex = i;\n\t\t// \t}\n\t\t// }\n\t\t// if (index > -1) {\n\t\t// \tthis._params_list.splice(index, 1);\n\t\t// }\n\t}\n\n\tasync _eval_param(param: BaseParamType) {\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// const param_cache_name = this.param_cache_name(param.name());\n\t\t// const cached_value = this[param_cache_name] || null;\n\t\tif (/*cached_value == null ||*/ param.is_dirty /* || param.is_errored()*/) {\n\t\t\t/*const param_value =*/ await param.compute(); //.then(param_value=>{\n\t\t\t// this[param_cache_name] = param_value;\n\t\t\tif (param.states.error.active) {\n\t\t\t\tthis.node.states.error.set(`param '${param.name}' error: ${param.states.error.message}`);\n\t\t\t}\n\t\t\t// return param_value;\n\t\t} else {\n\t\t\t// return param.value;\n\t\t}\n\t\t// });\n\t}\n\n\tasync eval_params(params: BaseParamType[]) {\n\t\t// let param: BaseParam;\n\t\tconst promises = [];\n\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\tif (params[i].is_dirty) {\n\t\t\t\tpromises.push(this._eval_param(params[i]));\n\t\t\t}\n\t\t}\n\t\t/*const param_values =*/ await Promise.all(promises);\n\n\t\t// const param_eval_keys = [];\n\t\t// let param_value;\n\t\t// for (let i = 0; i < params.length; i++) {\n\t\t// \tparam = params[i];\n\t\t// \tparam_value = param_values[i];\n\t\t// \tconst param_eval_key = param.eval_key(param_value);\n\t\t// \tparam_eval_keys.push(param_eval_key);\n\t\t// }\n\t\tif (this.node.states.error.active) {\n\t\t\tthis.node.set_container(null);\n\t\t}\n\t\t// return param_eval_keys.join('-');\n\t\t// const promises = lodash_map(params, (param, index)=> {\n\t\t// \treturn this.self._eval_param(param).then(param_value => {\n\t\t// \t\tconst param_eval_key = param.eval_key(param_value);\n\t\t// \t\treturn param_eval_keys.push(param_eval_key);\n\t\t// \t})\n\t\t// })\n\n\t\t// return new Promise((resolve, reject)=> {\n\t\t// \treturn Promise.all(promises).then(() => {\n\t\t// \t\tif (this.self.is_errored()) {\n\t\t// \t\t\tthis.self.set_container(null);\n\t\t// \t\t}\n\t\t// \t\t// this._params_node.remove_dirty_state()\n\t\t// \t\treturn resolve(param_eval_keys.join('-'));\n\t\t// \t})\n\t\t// })\n\t}\n\n\t// invalidates_param_results() {\n\t// \t// this.params().forEach((param)=>{ param.invalidates_result() });\n\t// \tlodash_each(this.params(), (param) => param.invalidates_result());\n\t// \t// for(let i=0; i<this._params_list.length; i++){\n\t// \t// \tthis._params_list[i].invalidates_result()\n\t// \t// }\n\t// }\n\n\tasync eval_all() {\n\t\tif (this._params_node) {\n\t\t\tif (this._params_node.is_dirty || this._params_added_since_last_params_eval) {\n\t\t\t\t// const param_names = lodash_values(this.param_names())\n\t\t\t\t// const params = param_names.map(param_name=> this.param(param_name))\n\t\t\t\t//params = lodash_filter params, (param)->!param.has_parent_param()\n\t\t\t\t// if (params.length > 0) {\n\t\t\t\tawait this.eval_params(this._params_list);\n\n\t\t\t\t// this._build_params_eval_key()\n\t\t\t\tthis._params_node.remove_dirty_state();\n\t\t\t\t// }\n\t\t\t\tthis._params_added_since_last_params_eval = false;\n\t\t\t}\n\t\t}\n\t\t// return this._params_eval_key\n\t}\n\n\t//\n\t//\n\t// HOOKS\n\t//\n\t//\n\tset_post_create_params_hook(hook: PostCreateParamsHook) {\n\t\tthis._post_create_params_hook = hook;\n\t}\n\trun_post_create_params_hook() {\n\t\tif (this._post_create_params_hook) {\n\t\t\tthis._post_create_params_hook();\n\t\t}\n\t}\n\tadd_on_scene_load_hook(name: string, method: OnSceneLoadHook) {\n\t\tthis._on_scene_load_hook_names = this._on_scene_load_hook_names || [];\n\t\tthis._on_scene_load_hooks = this._on_scene_load_hooks || [];\n\n\t\tif (!this._on_scene_load_hook_names.includes(name)) {\n\t\t\tthis._on_scene_load_hook_names.push(name);\n\t\t\tthis._on_scene_load_hooks.push(method);\n\t\t} else {\n\t\t\tconsole.warn(`hook with name ${name} already exists`, this._on_scene_load_hook_names);\n\t\t}\n\t}\n\trun_on_scene_load_hooks() {\n\t\tif (this._on_scene_load_hooks) {\n\t\t\tfor (let hook of this._on_scene_load_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_params_ui_data_dependencies() {\n\t// \tconst dependent_params = this._params_list.filter((p) => p.options.ui_data_depends_on_other_params());\n\n\t// \tdependent_params.forEach((p) => {\n\t// \t\tp.options.set_ui_data_dependency();\n\t// \t});\n\t// }\n\n\t// within_param_folder(folder_name: string, callback: () => void) {\n\t// \tconst previous_folder_name = this._current_param_folder_name;\n\t// \tthis._current_param_folder_name = folder_name;\n\t// \tcallback();\n\t// \tthis._current_param_folder_name = previous_folder_name;\n\t// }\n\t// current_param_folder_name(): string | undefined {\n\t// \treturn this._current_param_folder_name;\n\t// }\n}\n","import lodash_isNumber from 'lodash/isNumber';\nimport lodash_isBoolean from 'lodash/isBoolean';\n// import lodash_includes from 'lodash/includes'\nimport lodash_isString from 'lodash/isString';\nimport {TypedNumericParam} from './_Numeric';\nimport {ParamType} from '../poly/ParamType';\nimport {CoreString} from 'src/core/String';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class BooleanParam extends TypedNumericParam<ParamType.BOOLEAN> {\n\tstatic type() {\n\t\treturn ParamType.BOOLEAN;\n\t}\n\t// TODO: be careful as this does not allow serialization of expressions as default value\n\tget default_value_serialized() {\n\t\tif (lodash_isString(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.convert(this.default_value) || false;\n\t\t}\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BOOLEAN],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BOOLEAN]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BOOLEAN], val2: ParamValuesTypeMap[ParamType.BOOLEAN]) {\n\t\treturn val1 == val2;\n\t}\n\tconvert(raw_val: ParamInitValuesTypeMap[ParamType.BOOLEAN]): boolean | null {\n\t\tif (lodash_isBoolean(raw_val)) {\n\t\t\treturn raw_val;\n\t\t} else {\n\t\t\tif (lodash_isNumber(raw_val)) {\n\t\t\t\treturn raw_val >= 1;\n\t\t\t} else {\n\t\t\t\tif (lodash_isString(raw_val)) {\n\t\t\t\t\tif (CoreString.is_boolean(raw_val)) {\n\t\t\t\t\t\treturn CoreString.to_boolean(raw_val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (CoreString.is_number(raw_val)) {\n\t\t\t\t\t\t\tconst parsed = parseFloat(raw_val);\n\t\t\t\t\t\t\treturn parsed >= 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\t// convert_value(v: ParamInputValue): boolean {\n\t// \treturn this.value_to_boolean(v)\n\t// }\n\t// convert_default_value(v: ParamInputValue): number {\n\t// \tif (lodash_isString(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\treturn this.value_to_boolean(v) // ? 1 : 0\n\t// \t}\n\t// }\n\t// is_value_expression(v: ParamInputValue): boolean {\n\t// \treturn !lodash_includes([true, false, 0, 1, '0', '1'], v)\n\t// }\n\n\t// value_to_boolean(v: ParamInputValue): boolean {\n\t// \tif (lodash_isBoolean(v)) {\n\t// \t\treturn v\n\t// \t} else {\n\t// \t\tif (lodash_isNumber(v)) {\n\t// \t\t\treturn v > 0\n\t// \t\t} else {\n\t// \t\t\treturn parseInt(v) > 0\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// eval(callback) {\n\t// \treturn this.eval_raw((val) => {\n\t// \t\tconst boolean_result = this.value_to_boolean(val)\n\t// \t\treturn callback(boolean_result)\n\t// \t})\n\t// }\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\nimport {ParsedTree} from './traversers/ParsedTree';\n// import {MissingExpressionReference} from './MissingReference'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import CoreWalker from 'src/core/Walker'\n\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\nimport {ExpressionStringGenerator} from './traversers/ExpressionStringGenerator';\nimport {DependenciesController} from './DependenciesController';\nimport {ParamType} from '../poly/ParamType';\n\nexport class ExpressionManager {\n\tpublic parse_completed: boolean = false;\n\tprivate parse_started: boolean = false;\n\tprivate function_generator: FunctionGenerator;\n\tprivate expression_string_generator: ExpressionStringGenerator | undefined;\n\tpublic dependencies_controller: DependenciesController;\n\tprivate _error_message: string | undefined;\n\tprivate parsed_tree: ParsedTree = new ParsedTree();\n\n\tconstructor(\n\t\tpublic param: BaseParamType // public element_index: number=0\n\t) {\n\t\tthis.function_generator = new FunctionGenerator(this.param);\n\t\tthis.dependencies_controller = new DependenciesController(this.param);\n\t}\n\n\tparse_expression(expression: string) {\n\t\tif (this.parse_started) {\n\t\t\tthrow new Error(`parse in progress for param ${this.param.full_path()}`);\n\t\t}\n\t\tthis.parse_started = true;\n\t\tthis.parse_completed = false;\n\t\tthis.parsed_tree = this.parsed_tree || new ParsedTree();\n\n\t\tthis.reset();\n\t\tif (this.param.type == ParamType.STRING) {\n\t\t\tthis.parsed_tree.parse_expression_for_string_param(expression);\n\t\t} else {\n\t\t\tthis.parsed_tree.parse_expression(expression);\n\t\t}\n\t\tthis.function_generator.parse_tree(this.parsed_tree);\n\n\t\tif (this.function_generator.error_message == null) {\n\t\t\tthis.dependencies_controller.update(this.function_generator);\n\t\t\tif (this.dependencies_controller.error_message) {\n\t\t\t\tthis.param.states.error.set(this.dependencies_controller.error_message);\n\t\t\t} else {\n\t\t\t\tthis.parse_completed = true;\n\t\t\t\tthis.parse_started = false;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error(this.function_generator.error_message);\n\t\t}\n\t}\n\tcompute_function(): Promise<any> {\n\t\t// this.parse_and_update_dependencies_if_not_done(expression);\n\t\tif (this.compute_allowed()) {\n\t\t\ttry {\n\t\t\t\treturn this.function_generator.eval_function();\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn('compute_function');\n\t\t\t\tconsole.warn(e);\n\t\t\t\treturn new Promise((resolve, reject) => resolve());\n\t\t\t}\n\t\t} else {\n\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\tresolve(null);\n\t\t\t});\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.parse_completed = false;\n\t\tthis.parse_started = false;\n\t\tthis._error_message = undefined;\n\t\t// if(force){ // || this.element_index <= 1){\n\t\tthis.dependencies_controller.reset();\n\t\t// }\n\t\tthis.function_generator.reset();\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis._error_message = this._error_message || message;\n\t}\n\tget is_errored() {\n\t\treturn this._error_message != null;\n\t}\n\tget error_message() {\n\t\treturn this._error_message;\n\t}\n\n\tprivate compute_allowed(): boolean {\n\t\treturn this._error_message == null && this.function_generator.eval_allowed();\n\t}\n\n\t// private parse_and_update_dependencies(expression: string) {\n\t// \tif (this.param.has_expression()) {\n\t// \t\tthis.parse_expression(expression);\n\n\t// \t\tif (this.error_message != null) {\n\t// \t\t\tthis.param.states.error.set(`expression error: \"${expression}\" (${this.error_message})`);\n\t// \t\t}\n\t// \t\t// this.parse_completed = true\n\t// \t}\n\t// }\n\t// private parse_and_update_dependencies_if_not_done(expression: string) {\n\t// \tif (!this.parse_completed) {\n\t// \t\tthis.parse_and_update_dependencies(expression);\n\t// \t}\n\t// }\n\n\tupdate_from_method_dependency_name_change() {\n\t\tthis.expression_string_generator =\n\t\t\tthis.expression_string_generator || new ExpressionStringGenerator(this.param);\n\n\t\tconst new_expression_string = this.expression_string_generator.parse_tree(this.parsed_tree);\n\t\tthis.param.expression_controller?.set_expression(new_expression_string);\n\n\t\t// this.reset()\n\t\tif (new_expression_string) {\n\t\t\tthis.parse_expression(new_expression_string);\n\t\t}\n\t}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {ParsedTree} from './ParsedTree';\nimport {LiteralConstructsController, LiteralConstructMethod} from '../LiteralConstructsController';\nimport {BaseMethod} from 'src/engine/expressions/methods/_Base';\nimport {MethodModule} from 'src/engine/expressions/methods/_Module';\nimport {CoreAttribute} from 'src/core/geometry/Attribute';\n// import {JsepsByString} from '../DependenciesController'\n// import {JsepDependency} from '../JsepDependency'\nimport jsep from 'jsep';\n\n// import {Vector3} from 'three/src/math/Vector3'\ntype LiteralConstructDictionary = Dictionary<LiteralConstructMethod>;\ntype AnyDictionary = Dictionary<any>;\n\n// import {ExpressionStringGenerator} from './ExpressionStringGenerator'\n// import CoreWalker from 'src/core/Walker'\n\nconst NATIVE_MATH_METHODS = [\n\t'abs',\n\t'acos',\n\t'asin',\n\t'atan',\n\t'ceil',\n\t'cos',\n\t'exp',\n\t'floor',\n\t'max',\n\t'min',\n\t'pow',\n\t'round',\n\t'sign',\n\t'sin',\n\t'sqrt',\n\t'tan',\n];\nconst NATIVE_MATH_METHODS_RENAMED: AnyDictionary = {\n\tmath_random: 'random',\n};\nconst CORE_MATH_METHODS = ['fit', 'fit01', 'fract', 'deg2rad', 'rad2deg', 'rand', 'clamp'];\nimport {Easing} from 'src/core/math/Easing';\nconst EASING_METHODS = Object.keys(Easing);\n\nconst CORE_STRING_METHODS = ['precision'];\nconst NATIVE_MATH_CONSTANTS = ['PI', 'E'];\n\nconst DIRECT_EXPRESSION_FUNCTIONS: AnyDictionary = {};\nNATIVE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${name}`;\n});\nObject.keys(NATIVE_MATH_METHODS_RENAMED).forEach((name) => {\n\tconst remaped = NATIVE_MATH_METHODS_RENAMED[name];\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `Math.${remaped}`;\n});\nCORE_MATH_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `POLY.Core.Math.${name}`;\n});\nEASING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `POLY.Core.Math.Easing.${name}`;\n});\nCORE_STRING_METHODS.forEach((name) => {\n\tDIRECT_EXPRESSION_FUNCTIONS[name] = `POLY.Core.String.${name}`;\n});\n\nconst LITERAL_CONSTRUCT: LiteralConstructDictionary = {\n\tif: LiteralConstructsController.if,\n};\n\nconst GLOBAL_CONSTANTS: Dictionary<string> = {};\nNATIVE_MATH_CONSTANTS.forEach((name) => {\n\tGLOBAL_CONSTANTS[name] = `Math.${name}`;\n});\n\nconst INDIRECT_EXPRESSION_METHODS: AnyDictionary = MethodModule;\n\n// const NODE_TYPE_METHODS = {\n// \tCallExpression: 'setup_graph_call_expression',\n// \tMemberExpression: 'setup_graph_member_expression',\n// \tBinaryExpression: 'setup_graph_binary_expression',\n// \tUnaryExpression: 'setup_graph_unary_expression',\n// \tLogicalExpression: 'setup_graph_logical_expression',\n// \tLiteral: 'setup_graph_literal',\n// \tIdentifier: 'setup_graph_identifier'\n// };\n//\n\n// const IDENTIFIER_METHODS = {\n// \t'$F': '_setup_graph_identifier_as_global_frame'\n// }\nconst QUOTE = \"'\";\nconst ARGUMENTS_SEPARATOR = ', ';\nconst ATTRIBUTE_PREFIX = '@';\nimport {VARIABLE_PREFIX} from './_Base';\n\nconst PROPERTY_OFFSETS: AnyDictionary = {\n\tx: 0,\n\ty: 1,\n\tz: 2,\n\tw: 3,\n\tr: 0,\n\tg: 1,\n\tb: 2,\n};\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n\nimport {BaseTraverser} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {AttributeRequirementsController} from '../AttributeRequirementsController';\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncFunction\nconst AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;\n\nexport class FunctionGenerator extends BaseTraverser {\n\tprivate function: Function | undefined;\n\t// private function_pre_entities_loop_lines: string[] = [];\n\tprivate _attribute_requirements_controller = new AttributeRequirementsController();\n\t// private function_pre_body:string\n\tprivate function_main_string: string | undefined;\n\terror_message: string | undefined;\n\tprivate methods: BaseMethod[] = [];\n\tprivate method_index: number = 0;\n\n\tpublic method_dependencies: MethodDependency[] = [];\n\tpublic immutable_dependencies: CoreGraphNode[] = [];\n\t// public jsep_dependencies: JsepDependency[] = []\n\t// public jsep_nodes_by_missing_paths: JsepsByString = {}\n\n\t// private string_generator: ExpressionStringGenerator = new ExpressionStringGenerator()\n\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tpublic parse_tree(parsed_tree: ParsedTree) {\n\t\tthis.reset();\n\n\t\tif (parsed_tree.error_message == null) {\n\t\t\ttry {\n\t\t\t\t// this.function_pre_entities_loop_lines = [];\n\t\t\t\tthis._attribute_requirements_controller.reset();\n\t\t\t\t// this.function_pre_body = ''\n\t\t\t\tif (parsed_tree.node) {\n\t\t\t\t\tconst function_main_string = this.traverse_node(parsed_tree.node);\n\t\t\t\t\tif (function_main_string && this.error_message == null) {\n\t\t\t\t\t\tthis.function_main_string = function_main_string;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('no parsed_tree.node');\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.warn(`error in expression for param ${this.param.full_path()}`);\n\t\t\t\tconsole.warn(e);\n\t\t\t}\n\n\t\t\tif (this.function_main_string) {\n\t\t\t\ttry {\n\t\t\t\t\tthis.function = new AsyncFunction(\n\t\t\t\t\t\t'param',\n\t\t\t\t\t\t'methods',\n\t\t\t\t\t\t`\n\t\t\t\t\ttry {\n\t\t\t\t\t\t${this.function_body()}\n\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\tparam.states.error.set(e.message || e);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}`\n\t\t\t\t\t);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.warn(e);\n\t\t\t\t\tthis.set_error('cannot generate function');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.set_error('cannot generate function body');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse expression');\n\t\t}\n\t}\n\n\treset() {\n\t\tthis.error_message = undefined;\n\t\tthis.function_main_string = undefined;\n\t\tthis.methods = [];\n\t\tthis.method_index = 0;\n\t\tthis.function = undefined;\n\t\tthis.method_dependencies = [];\n\t\tthis.immutable_dependencies = [];\n\t}\n\n\tfunction_body() {\n\t\tif (this.param.options.is_expression_for_entities) {\n\t\t\treturn `\n\t\t\tconst entities = param.expression_controller.entities;\n\t\t\tif(entities){\n\t\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\t\tlet entity;\n\t\t\t\t\tconst entity_callback = param.expression_controller.entity_callback;\n\t\t\t\t\t${this._attribute_requirements_controller.assign_attributes_lines()}\n\t\t\t\t\tif( ${this._attribute_requirements_controller.attribute_presence_check_line()} ){\n\t\t\t\t\t\t${this._attribute_requirements_controller.assign_arrays_lines()}\n\t\t\t\t\t\tfor(let index=0; index < entities.length; index++){\n\t\t\t\t\t\t\tentity = entities[index];\n\t\t\t\t\t\t\tresult = ${this.function_main_string};\n\t\t\t\t\t\t\tentity_callback(entity, result);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve()\n\t\t\t\t\t} else {\n\t\t\t\t\t\treject(new Error('attribute not found'))\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t}\n\t\t\treturn []`;\n\t\t} else {\n\t\t\treturn `\n\t\t\treturn new Promise( async (resolve, reject)=>{\n\t\t\t\tresolve(${this.function_main_string})\n\t\t\t})\n\t\t\t`;\n\t\t}\n\t}\n\n\teval_allowed(): boolean {\n\t\treturn this.function != null;\n\t}\n\teval_function() {\n\t\t// this.param.entity_attrib_values = this.param.entity_attrib_values || {}\n\t\t// this.param.entity_attrib_values.position =\n\t\t// \tthis.param.entity_attrib_values.position || new THREE.Vector3()\n\t\tif (this.function) {\n\t\t\tconst result = this.function(this.param, this.methods);\n\t\t\treturn result;\n\t\t}\n\t}\n\n\t//\n\t//\n\t// TRAVERSE METHODS\n\t//\n\t//\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string | undefined {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst callee = node.callee as jsep.Identifier;\n\t\tconst method_name = callee.name;\n\t\tif (method_name) {\n\t\t\t// literal construct (if...)\n\t\t\tconst literal_contruct = LITERAL_CONSTRUCT[method_name];\n\t\t\tif (literal_contruct) {\n\t\t\t\treturn literal_contruct(method_arguments);\n\t\t\t}\n\n\t\t\t// direct expressions (Math.floor, Math.sin...)\n\t\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\t\t\tconst direct_function_name = DIRECT_EXPRESSION_FUNCTIONS[method_name];\n\t\t\tif (direct_function_name) {\n\t\t\t\treturn `${direct_function_name}(${arguments_joined})`;\n\t\t\t}\n\n\t\t\t// indirect methods (points_count, asset...)\n\t\t\tconst indirect_method = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\t\tif (indirect_method) {\n\t\t\t\tconst path_node = node.arguments[0];\n\t\t\t\t// const path_argument = this.string_generator.traverse_node(path_node)\n\t\t\t\tconst function_string = `return ${method_arguments[0]}`;\n\t\t\t\tlet path_argument_function;\n\t\t\t\tlet path_argument = [];\n\t\t\t\ttry {\n\t\t\t\t\tpath_argument_function = new Function(function_string);\n\t\t\t\t\tpath_argument = path_argument_function();\n\t\t\t\t} catch {\n\t\t\t\t\t// path_argument_function = new AsyncFunction(function_string)\n\t\t\t\t\t// it looks like if the input contains an await,\n\t\t\t\t\t// it is because it has been generated by another indirect function.\n\t\t\t\t\t// This means that the dependencies have been generated already\n\t\t\t\t\t// so we may not need to do it now\n\t\t\t\t}\n\n\t\t\t\tthis._create_method_and_dependencies(method_name, path_argument, path_node);\n\t\t\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_error(`unknown method: ${method_name}`);\n\t}\n\tprotected traverse_BinaryExpression(node: jsep.BinaryExpression): string {\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_LogicalExpression(node: jsep.LogicalExpression): string {\n\t\t// || or &&\n\t\t// if(node.right.type == 'Identifier'){\n\t\t// \tthis.set_error(`cannot have identifier after ${node.operator}`)\n\t\t// \treturn \"\"\n\t\t// }\n\t\treturn `(${this.traverse_node(node.left)} ${node.operator} ${this.traverse_node(node.right)})`;\n\t}\n\tprotected traverse_MemberExpression(node: jsep.MemberExpression): string {\n\t\treturn `${this.traverse_node(node.object)}.${this.traverse_node(node.property)}`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\tif (node.operator === ATTRIBUTE_PREFIX) {\n\t\t\tlet argument = node.argument;\n\t\t\tlet attribute_name;\n\t\t\tlet property;\n\t\t\tswitch (argument.type) {\n\t\t\t\tcase 'Identifier': {\n\t\t\t\t\tconst argument_identifier = (<unknown>argument) as jsep.Identifier;\n\t\t\t\t\tattribute_name = argument_identifier.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'MemberExpression': {\n\t\t\t\t\tconst argument_member_expression = (<unknown>argument) as jsep.MemberExpression;\n\t\t\t\t\tconst attrib_node = argument_member_expression.object as jsep.Identifier;\n\t\t\t\t\tconst property_node = argument_member_expression.property as jsep.Identifier;\n\t\t\t\t\tattribute_name = attrib_node.name;\n\t\t\t\t\tproperty = property_node.name;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// this.function_pre_body += `\n\t\t\t// param.entity_attrib_value(${QUOTE}${attrib_node.name}${QUOTE}, param.entity_attrib_values.position);\n\t\t\t// `\n\t\t\tif (attribute_name) {\n\t\t\t\tattribute_name = CoreAttribute.remap_name(attribute_name);\n\t\t\t\tif (attribute_name == 'ptnum') {\n\t\t\t\t\treturn '((entity != null) ? entity.index : 0)';\n\t\t\t\t} else {\n\t\t\t\t\tconst var_attribute_size = this._attribute_requirements_controller.var_attribute_size(\n\t\t\t\t\t\tattribute_name\n\t\t\t\t\t);\n\t\t\t\t\tconst var_array = this._attribute_requirements_controller.var_array(attribute_name);\n\t\t\t\t\tthis._attribute_requirements_controller.add(attribute_name);\n\t\t\t\t\tif (property) {\n\t\t\t\t\t\tconst property_offset = PROPERTY_OFFSETS[property];\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}+${property_offset}]`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn `${var_array}[entity.index*${var_attribute_size}]`;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconsole.warn('attribute not found');\n\t\t\t\treturn '';\n\t\t\t}\n\t\t} else {\n\t\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t\t}\n\t}\n\n\tprotected traverse_Literal(node: jsep.Literal): string {\n\t\treturn `${node.raw}`; // 5 or 'string' (raw will include quotes)\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string | undefined {\n\t\tconst identifier_first_char = node.name[0];\n\t\tif (identifier_first_char == VARIABLE_PREFIX) {\n\t\t\tconst identifier_name_without_dollar_sign = node.name.substr(1);\n\n\t\t\t// globals constants: Math.PI or Math.E\n\t\t\tconst direct_constant_name = GLOBAL_CONSTANTS[identifier_name_without_dollar_sign];\n\t\t\tif (direct_constant_name) {\n\t\t\t\treturn direct_constant_name;\n\t\t\t}\n\n\t\t\t// scene or node globals: $F, $FPS, $T, $CH, $OS\n\t\t\tconst method_name = `traverse_Identifier_${identifier_name_without_dollar_sign}`;\n\t\t\tconst method = (this as any)[method_name];\n\t\t\tif (method) {\n\t\t\t\treturn (this as any)[method_name]();\n\t\t\t} else {\n\t\t\t\tthis.set_error(`identifier unknown: ${node.name}`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn node.name; // @ptnum will call this method and return \"ptnum\"\n\t\t}\n\t}\n\n\t//\n\t//\n\t// Identifier methods (called from Identifier_body)\n\t//\n\t//\n\tprotected traverse_Identifier_F(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.frame`;\n\t}\n\tprotected traverse_Identifier_FPS(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.fps`;\n\t}\n\tprotected traverse_Identifier_T(): string {\n\t\tthis.immutable_dependencies.push(this.param.scene.time_controller.graph_node);\n\t\treturn `param.scene.time_controller.time`;\n\t}\n\tprotected traverse_Identifier_CH(): string {\n\t\treturn `${QUOTE}${this.param.name}${QUOTE}`;\n\t}\n\tprotected traverse_Identifier_CEX(): string {\n\t\treturn this._method_centroid('x');\n\t}\n\tprotected traverse_Identifier_CEY(): string {\n\t\treturn this._method_centroid('y');\n\t}\n\tprotected traverse_Identifier_CEZ(): string {\n\t\treturn this._method_centroid('z');\n\t}\n\t// TODO:\n\t// '$OS': '_eval_identifier_as_node_name',\n\t// '$BBX': '_eval_identifier_as_bounding_box_relative',\n\n\tprivate _method_centroid(component: string): string {\n\t\tconst method_arguments = [0, `${QUOTE}${component}${QUOTE}`];\n\t\tconst arguments_joined = method_arguments.join(ARGUMENTS_SEPARATOR);\n\t\tthis._create_method_and_dependencies('centroid', 0);\n\t\treturn `(await methods[${this.method_index}].process_arguments([${arguments_joined}]))`;\n\t}\n\n\t//\n\t//\n\t// Methods dependencies\n\t//\n\t//\n\tprivate _create_method_and_dependencies(\n\t\tmethod_name: string,\n\t\tpath_argument: number | string,\n\t\tpath_node?: jsep.Expression\n\t) {\n\t\tconst method_constructor = INDIRECT_EXPRESSION_METHODS[method_name];\n\t\tconst method = new method_constructor(this.param) as BaseMethod;\n\t\tthis.method_index += 1;\n\t\tthis.methods[this.method_index] = method;\n\n\t\tconst method_dependency = method.find_dependency(path_argument);\n\t\tif (method_dependency) {\n\t\t\tif (path_node) {\n\t\t\t\tmethod_dependency.set_jsep_node(path_node);\n\t\t\t}\n\t\t\tthis.method_dependencies.push(method_dependency);\n\t\t}\n\t\t// method_dependencies.resolved_graph_nodes.forEach((graph_node)=>{\n\t\t// \tif(path_node){\n\t\t// \t\tconst jsep_dependency = new JsepDependency(graph_node, path_node)\n\t\t// \t\tthis.jsep_dependencies.push(jsep_dependency)\n\t\t// \t} else {\n\t\t// \t\tthis.immutable_dependencies.push(graph_node)\n\t\t// \t}\n\n\t\t// })\n\n\t\t// if(path_node){\n\t\t// \treference_search_result.missing_paths.forEach((path)=>{\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path] = this.jsep_nodes_by_missing_paths[path] || []\n\t\t// \t\tthis.jsep_nodes_by_missing_paths[path].push(path_node)\n\t\t// \t})\n\t\t// }\n\t}\n}\n","export type LiteralConstructMethod = (args: any[]) => string\n\nexport class LiteralConstructsController {\n\tstatic if(args: any[]): string {\n\t\tconst condition = args[0]\n\t\tconst val_true = args[1]\n\t\tconst val_false = args[2]\n\t\treturn `(${condition}) ? (${val_true}) : (${val_false})`\n\t}\n}\n","// TODO: create an expression object that knows how many args it can accept, their type\n// and can throw an error and give it to the param, and then to the node\n// TODO: the expression should know how to update the node dependencies\n\n// import abs from './abs'\n// import {Asset} from './asset'\nimport {Bbox} from './bbox';\n// import ceil from './ceil'\nimport {Centroid} from './centroid';\nimport {Ch} from './ch';\nimport {Copy} from './copy';\nimport {CopRes} from './cop_res';\n// import clamp from './clamp'\n// import {Easein} from './easein'\n// import {Easeinout} from './easeinout'\n// import floor from './floor'\n// import humanize from './humanize'\nimport {Local} from './local';\n// import if_ from './if'\n// import max from './max'\n// import min from './min'\nimport {Opdigits} from './opdigits';\n// import object from './object'\n// import objects_count from './objects_count'\n// import objects_visible_count from './objects_visible_count'\nimport {Point} from './point';\nimport {PointsCount} from './points_count';\n// import {Precision} from './precision'\n// import rand from './rand'\n// import round from './round'\n// import sign from './sign'\nimport {StrCharsCount} from './str_chars_count';\nimport {StrConcat} from './str_concat';\nimport {StrIndex} from './str_index';\nimport {StrSub} from './str_sub';\n\nexport const MethodModule = {\n\t// 'asset': Asset,\n\tbbox: Bbox,\n\tch: Ch,\n\tcentroid: Centroid,\n\tcop_res: CopRes,\n\tlocal: Local,\n\topdigits: Opdigits,\n\tpoint: Point,\n\tpoints_count: PointsCount,\n\t// 'precision': Precision,\n\tcopy: Copy,\n\tstr_chars_count: StrCharsCount,\n\tstr_concat: StrConcat,\n\tstr_index: StrIndex,\n\tstr_sub: StrSub,\n};\n\n// import cos from './cos'\n// import sin from './sin'\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\n\n// import Walker from 'src/core/Walker';\n\ninterface BoxComponents {\n\tmin: Vector3;\n\tmax: Vector3;\n\tsize: Vector3;\n\tcenter: Vector3;\n}\n\nconst VECTOR_NAMES: Array<keyof BoxComponents> = ['min', 'max', 'size', 'center'];\nconst COMPONENT_NAMES = ['x', 'y', 'z'];\n\nexport class Bbox extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'vector name, min, max, size or center'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\tlet value = 0;\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst vector_name = args[1];\n\t\t\t\tconst component_name = args[2];\n\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tvalue = this._get_value_from_container(container, vector_name, component_name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _get_value_from_container(\n\t\tcontainer: GeometryContainer,\n\t\tvector_name: keyof BoxComponents,\n\t\tcomponent_name: keyof Vector3Like\n\t) {\n\t\tif (VECTOR_NAMES.indexOf(vector_name) >= 0) {\n\t\t\tconst bbox = container.bounding_box();\n\n\t\t\tlet vector = new Vector3();\n\t\t\tswitch (vector_name) {\n\t\t\t\tcase 'size':\n\t\t\t\t\tbbox.getSize(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'center':\n\t\t\t\t\tbbox.getCenter(vector);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvector = bbox[vector_name];\n\t\t\t}\n\n\t\t\tif (COMPONENT_NAMES.indexOf(component_name) >= 0) {\n\t\t\t\t//(value = vector[component_name])?\n\t\t\t\treturn vector[component_name];\n\t\t\t} else {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t} else {\n\t\t\treturn -1;\n\t\t}\n\t}\n}\n","import lodash_isNumber from 'lodash/isNumber';\n// import BaseNode from 'src/engine/nodes/_Base'\nimport {DecomposedPath} from 'src/core/DecomposedPath';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {CoreObject} from 'src/core/Object';\nimport {BaseNodeType, BaseNodeClass, TypedNode} from 'src/engine/nodes/_Base';\nimport jsep from 'jsep';\n\ntype NodeOrParam = BaseNodeType | BaseParamType;\n\nexport class MethodDependency extends CoreGraphNode {\n\tpublic jsep_node: jsep.Expression | undefined;\n\tpublic resolved_graph_node: CoreGraphNode | undefined;\n\tpublic unresolved_path: string | undefined;\n\tprivate _update_from_name_change_bound = this._update_from_name_change.bind(this);\n\n\tconstructor(\n\t\tpublic param: BaseParamType,\n\t\tpublic path_argument: number | string,\n\t\tpublic decomposed_path?: DecomposedPath\n\t) {\n\t\tsuper(param.scene, 'MethodDependency');\n\n\t\t// this.set_scene(this.param.scene);\n\n\t\tthis.add_post_dirty_hook('_update_from_name_change', this._update_from_name_change_bound);\n\t}\n\t_update_from_name_change(trigger?: CoreGraphNode) {\n\t\tif (CoreObject.is_a(trigger, TypedNode) && this.decomposed_path) {\n\t\t\tconst node = trigger as BaseNodeType;\n\t\t\tthis.decomposed_path.update_from_name_change(node);\n\t\t\tconst new_path = this.decomposed_path.to_path();\n\n\t\t\tconst literal = this.jsep_node as jsep.Literal;\n\t\t\tif (literal) {\n\t\t\t\tliteral.value = `${literal.value}`.replace(`${this.path_argument}`, new_path);\n\t\t\t\tliteral.raw = literal.raw.replace(`${this.path_argument}`, new_path);\n\t\t\t}\n\t\t\tif (this.param.expression_controller) {\n\t\t\t\tthis.param.expression_controller.update_from_method_dependency_name_change();\n\t\t\t}\n\t\t}\n\t}\n\treset() {\n\t\tthis.graph_disconnect_predecessors();\n\t}\n\n\tlisten_for_name_changes() {\n\t\tif (this.jsep_node && this.decomposed_path) {\n\t\t\tthis.decomposed_path.named_nodes.forEach((node_in_path) => {\n\t\t\t\tif (node_in_path && node_in_path instanceof BaseNodeClass) {\n\t\t\t\t\tthis.add_graph_input(node_in_path.name_controller.graph_node);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tset_jsep_node(jsep_node: jsep.Expression) {\n\t\tthis.jsep_node = jsep_node;\n\t}\n\tset_resolved_graph_node(node: CoreGraphNode) {\n\t\tthis.resolved_graph_node = node;\n\t}\n\tset_unresolved_path(path: string) {\n\t\tthis.unresolved_path = path;\n\t}\n\n\tstatic create(\n\t\tparam: BaseParamType,\n\t\tindex_or_path: number | string,\n\t\tnode: CoreGraphNode,\n\t\tnodes_in_path?: NodeOrParam[]\n\t) {\n\t\tconst is_index = lodash_isNumber(index_or_path);\n\n\t\tlet decomposed_path: DecomposedPath | undefined = undefined;\n\t\tif (nodes_in_path) {\n\t\t\tdecomposed_path = new DecomposedPath();\n\t\t\tfor (let node_in_path of nodes_in_path) {\n\t\t\t\tdecomposed_path.add_node(node_in_path.name, node_in_path);\n\t\t\t}\n\t\t}\n\n\t\tconst instance = new MethodDependency(param, index_or_path, decomposed_path);\n\t\tif (node) {\n\t\t\tinstance.set_resolved_graph_node(node);\n\t\t} else {\n\t\t\tif (!is_index) {\n\t\t\t\tconst path = index_or_path as string;\n\t\t\t\tinstance.set_unresolved_path(path);\n\t\t\t}\n\t\t}\n\t\treturn instance;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\n\nexport class Centroid extends BaseMethod {\n\t// bbox(0).min.x\n\t// bbox('../REF_bbox').min.x\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name, x,y or z'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// const path = args\n\t\t\t// this.get_referenced_param(path).eval_p().then(val=>{\n\t\t\t// \tresolve(val)\n\t\t\t// })\n\t\t\tif (args.length == 2) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst component_name = args[1] as keyof Vector3Like;\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst bbox = container.bounding_box();\n\t\t\t\t\tconst center = bbox.min\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.add(bbox.max)\n\t\t\t\t\t\t.multiplyScalar(0.5);\n\n\t\t\t\t\tconst value = center[component_name];\n\t\t\t\t\tif (value != null) {\n\t\t\t\t\t\tresolve(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// throw \"only component names are x, y and z\";\n\t\t\t\t\t\tresolve(0);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t\t// return this._get_param_value(args[0], args[1], callback);\n\t}\n\n\t// _get_param_value(index_or_path, component_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tlet value;\n\t// \t\tconst bbox = container.bounding_box();\n\t// \t\tconst size = bbox.min.clone().add(bbox.max).multiplyScalar(0.5);\n\n\t// \t\tif ((value = size[component_name]) != null) {\n\t// \t\t\treturn callback(value);\n\t// \t\t} else {\n\t// \t\t\tthrow \"only component names are x, y and z\";\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","// import lodash_isNumber from 'lodash/isNumber';\n\nimport {BaseMethod} from './_Base';\nimport {DecomposedPath} from 'src/core/DecomposedPath';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\n\nexport class Ch extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to param']];\n\t}\n\n\t// dependencies(args: any[]): any[]{\n\t// \tconst path = args[0]\n\t// \treturn [this.get_referenced_param(path)]\n\t// }\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst decomposed_path = new DecomposedPath();\n\t\tconst param = this.get_referenced_param(index_or_path as string, decomposed_path);\n\t\tif (param) {\n\t\t\treturn this.create_dependency(param, index_or_path, decomposed_path);\n\t\t}\n\t\treturn null;\n\t\t// const reference_search_result = new ReferenceSearchResult()\n\t\t// const param = this.get_referenced_param(index_or_path)\n\t\t// if(param){\n\t\t// \treference_search_result.set_found_graph_nodes([param])\n\t\t// } else {\n\t\t// \treference_search_result.set_missing_paths([path])\n\t\t// }\n\n\t\t// return reference_search_result\n\t}\n\t// find_dependencies(index_or_path: number|string): MethodDependency{\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<any> {\n\t\tlet val: any = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst path = args[0];\n\t\t\tconst ref = this.get_referenced_param(path);\n\t\t\tif (ref) {\n\t\t\t\tawait ref.compute();\n\t\t\t\tconst result = ref.value;\n\t\t\t\tif (result != null) {\n\t\t\t\t\t// if (lodash_isNumber(result)) {\n\t\t\t\t\tval = result;\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn val;\n\t}\n\n\t// _get_param_value(path, callback){\n\t// \treturn this.get_referenced_param(path).eval(val=> {\n\t// \t\treturn callback(val);\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {CoreWalker} from 'src/core/Walker';\nimport {CopySopNode} from 'src/engine/nodes/sop/Copy';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\n\nexport class Copy extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to copy'],\n\t\t\t['integer', 'default value'],\n\t\t];\n\t}\n\tstatic optional_arguments() {\n\t\treturn [['string', 'attribute name (optional)']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path) as BaseNodeType;\n\t\t// I'd prefer testing with if(node instanceof CopySopNode)\n\t\t// but tslib generates an error when doing so\n\t\tif (node && node.type == 'copy') {\n\t\t\tconst stamp_node = (node as CopySopNode).stamp_node;\n\t\t\treturn this.create_dependency(stamp_node, index_or_path);\n\t\t}\n\t\treturn null;\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\t// \t// return this.find_node_dependency_from_index_or_path(index_or_path)\n\t// \tconst node = this.find_dependency_from_index_or_path(index_or_path)\n\t// \treturn this.create_search_result(stamp_node, index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 2 || args.length == 3) {\n\t\t\t\tconst path = args[0];\n\t\t\t\tconst default_value = args[1];\n\t\t\t\tconst attribute_name = args[2];\n\n\t\t\t\tconst node = CoreWalker.find_node(this.node, path);\n\n\t\t\t\tlet value;\n\t\t\t\tif (node && node.type == 'copy') {\n\t\t\t\t\tvalue = (node as CopySopNode).stamp_value(attribute_name);\n\t\t\t\t}\n\t\t\t\t// if (node && node instanceof CopySopNode) {\n\t\t\t\t// \tvalue = node.stamp_value(attribute_name);\n\t\t\t\t// }\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tvalue = default_value;\n\t\t\t\t}\n\t\t\t\tresolve(value);\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\t// update_dependencies() {\n\t// \treturn this.jsep_node()._graph_node.add_graph_input( this.copy_sop.stamp_node() );\n\t// }\n\n\t// process_arguments(args, callback){\n\t// \tconst path = args[0];\n\t// \tconst default_value = args[1];\n\t// \tconst attribute_name = args[2];\n\n\t// \tthis.copy_sop = Walker.find_node(this.node(), path);\n\t// \tlet value = (this.copy_sop != null) ?\n\t// \t\tthis.copy_sop.stamp_value(attribute_name) : undefined;\n\n\t// \tif (value == null) { value = default_value; }\n\n\t// \treturn callback(value);\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {TextureContainer} from 'src/engine/containers/Texture';\n\nexport class CopRes extends BaseMethod {\n\t// cop_res(0, 'x')\n\t// cop_res('../REF_bbox', 'x')\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['string', 'component_name: x or y'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 2) {\n\t\t\tconst index_or_path = args[0];\n\t\t\tconst component_name = args[1];\n\t\t\tconst container = (await this.get_referenced_node_container(index_or_path)) as TextureContainer;\n\n\t\t\tif (container) {\n\t\t\t\tconst resolution = container.resolution();\n\t\t\t\tif ([0, '0', 'x'].includes(component_name)) {\n\t\t\t\t\tvalue = resolution[0];\n\t\t\t\t} else {\n\t\t\t\t\tif ([1, '1', 'y'].includes(component_name)) {\n\t\t\t\t\t\tvalue = resolution[1];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {POLY} from 'src/engine/Poly';\n\nexport class Local extends BaseMethod {\n\t// constructor() {\n\t// \tsuper();\n\t// }\n\n\tstatic required_arguments() {\n\t\treturn [['string', 'path']];\n\t}\n\n\tprocess_arguments(args: any[]): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis.request_asset_url(args[0]).then((url) => {\n\t\t\t\tresolve(url);\n\t\t\t});\n\t\t});\n\t}\n\t// find_dependency(index_or_path: number | string): MethodDependency {\n\t// \treturn null\n\t// }\n\n\t// TODO: add error management\n\trequest_asset_url(name: string): Promise<string> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\t// const scene = this.node.scene()\n\t\t\t// const scene_uuid = scene.uuid();\n\n\t\t\tlet url;\n\n\t\t\tif (POLY.desktop_controller().active()) {\n\t\t\t\tPOLY.desktop_controller().add_local_path(name, this.param);\n\t\t\t\turl = POLY.desktop_controller().local_path_server_url(name);\n\t\t\t\tresolve(url);\n\t\t\t} else {\n\t\t\t\treturn resolve('');\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {BaseNodeClass} from 'src/engine/nodes/_Base';\nimport {MethodDependency} from '../MethodDependency';\n// import Walker from 'src/core/Walker';\nimport {CoreString} from 'src/core/String';\n// import {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nexport class Opdigits extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\tconst node = this.find_referenced_graph_node(index_or_path);\n\t\tif (node) {\n\t\t\tif (node instanceof BaseNodeClass) {\n\t\t\t\tconst name_node = node.name_controller.graph_node;\n\t\t\t\treturn this.create_dependency(name_node, index_or_path);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t\t// return [this.create_dependency_from_index_or_path(index_or_path)]\n\t}\n\t// find_dependencies(index_or_path: number|string): ReferenceSearchResult{\n\n\t// \t// TODO: ensure the dependency update works for space params when they get renamed\n\t// \tconsole.log(node)\n\t// \tconst name_node = node.name_graph_node()\n\t// \treturn this.create_search_result(name_node, index_or_path)\n\t// \t// return this.create_reference_search_result_from_index_or_path(index_or_path)\n\t// }\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst node = this.get_referenced_node(index_or_path);\n\t\t\t\tif (node) {\n\t\t\t\t\tconst name = node.name;\n\t\t\t\t\tconst value = CoreString.tail_digits(name);\n\t\t\t\t\tresolve(value);\n\t\t\t\t} else {\n\t\t\t\t\tresolve(0);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\n// import {CoreGroup} from 'src/core/Geometry/Group'\n\nexport class Point extends BaseMethod {\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'path to node'],\n\t\t\t['index', 'point index'],\n\t\t\t['string', 'attribute name'],\n\t\t];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 3) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tconst attrib_name = args[1];\n\t\t\t\tconst point_index = args[2];\n\t\t\t\tlet container: GeometryContainer | null = null;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t}\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = this._get_value_from_container(container, attrib_name, point_index);\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n\n\t_get_value_from_container(container: GeometryContainer, attrib_name: string, point_index: number) {\n\t\tconst core_group = container.core_content();\n\t\t// TODO: optimise and store the group_wrapper in the json_node\n\t\tif (core_group) {\n\t\t\tconst point = core_group.points()[point_index];\n\n\t\t\tif (point) {\n\t\t\t\treturn point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\t// _get_param_value(index_or_path, point_index, attrib_name, callback){\n\t// \treturn this.get_referenced_node_container(index_or_path, container=> {\n\t// \t\tconst group = container.group({clone: false});\n\t// \t\tconst group_wrapper = new Core.Geometry.Group(group);\n\t// \t\t// TODO: optimise and store the group_wrapper in the json_node\n\t// \t\tconst point = group_wrapper.points()[point_index];\n\n\t// \t\tif (point != null) {\n\t// \t\t\tconst value = point.attrib_value(attrib_name);\n\t// \t\t\tif (value != null) {\n\t// \t\t\t\treturn callback(value);\n\t// \t\t\t} else {\n\t// \t\t\t\t//throw \"no attribute #{attrib_name} found\"\n\t// \t\t\t\tconsole.error(`no attribute ${attrib_name} found`);\n\t// \t\t\t\treturn callback(0);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tconsole.error(`no point found with index ${point_index}`);\n\t// \t\t\treturn callback(0);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import {BaseMethod} from './_Base';\nimport {MethodDependency} from '../MethodDependency';\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\n// import {CoreGroup} from 'src/core/Geometry/Group';\n\nexport class PointsCount extends BaseMethod {\n\t// npoints(0)\n\t// npoints('../REF_bbox')\n\tstatic required_arguments() {\n\t\treturn [['string', 'path to node']];\n\t}\n\n\tfind_dependency(index_or_path: number | string): MethodDependency | null {\n\t\treturn this.create_dependency_from_index_or_path(index_or_path);\n\t}\n\n\tprocess_arguments(args: any[]): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (args.length == 1) {\n\t\t\t\tconst index_or_path = args[0];\n\t\t\t\tlet container: GeometryContainer;\n\t\t\t\ttry {\n\t\t\t\t\tcontainer = (await this.get_referenced_node_container(index_or_path)) as GeometryContainer;\n\t\t\t\t} catch (e) {\n\t\t\t\t\treject(e);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (container) {\n\t\t\t\t\tconst value = container.points_count();\n\t\t\t\t\tresolve(value);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(0);\n\t\t\t}\n\t\t});\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrCharsCount extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [['string', 'string to count characters of']];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = 0;\n\t\tif (args.length == 1) {\n\t\t\tconst string = args[0];\n\t\t\tvalue = string.length;\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrConcat extends BaseMethod {\n\t// str_concat(1,2) => '12'\n\t// str_concat(1,\"a\") => '1a'\n\t// str_concat(\"a\",12, \"b\", \" \", 17) => 'a12b 17'\n\tstatic required_arguments(): any[] {\n\t\treturn [\n\t\t\t// ['string', 'string to get range from'],\n\t\t\t// ['integer', 'range start'],\n\t\t\t// ['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\n\t\tfor (let arg of args) {\n\t\t\tif (arg == null) {\n\t\t\t\targ = '';\n\t\t\t}\n\t\t\tvalue += `${arg}`;\n\t\t}\n\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrIndex extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get index from'],\n\t\t\t['string', 'char to find index of'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): null {\n\t// \treturn null\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<number> {\n\t\tlet value = -1;\n\t\tif (args.length == 2) {\n\t\t\tconst string = args[0];\n\t\t\tconst sub_string = args[1];\n\t\t\tvalue = string.indexOf(sub_string);\n\t\t}\n\t\treturn value;\n\t}\n}\n","import {BaseMethod} from './_Base';\n// import {MethodDependency} from '../MethodDependency'\n\nexport class StrSub extends BaseMethod {\n\t// str_chars_count('bla') => 3\n\tstatic required_arguments() {\n\t\treturn [\n\t\t\t['string', 'string to get range from'],\n\t\t\t['integer', 'range start'],\n\t\t\t['integer', 'range size'],\n\t\t];\n\t}\n\n\t// find_dependency(index_or_path: number | string): MethodDependency | null {\n\t// \treturn null;\n\t// \t// return this.create_dependency_from_index_or_path(index_or_path)\n\t// }\n\n\tasync process_arguments(args: any[]): Promise<string> {\n\t\tlet value = '';\n\t\tconst string = args[0];\n\t\tconst range_start = args[1] || 0;\n\t\tlet range_size = args[2] || 1;\n\t\tif (string) {\n\t\t\tvalue = string.substr(range_start, range_size);\n\t\t}\n\t\treturn value;\n\t}\n}\n","// this class is suffixed 'Creator' as opposed to the FunctionGenerator class\n// since it is much simpler and only used to generated the lines for the async function\n// of FunctionGenerator\nexport class AttributeRequirementsController {\n\tprivate _attribute_names: Set<string> | undefined;\n\tconstructor() {}\n\n\treset() {\n\t\tif (this._attribute_names) {\n\t\t\tthis._attribute_names.clear();\n\t\t}\n\t}\n\tassign_attributes_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_attribute_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tassign_arrays_lines(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst lines: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tlines.push(AttributeRequirementsController.assign_item_size_line(attribute_name));\n\t\t\t\tlines.push(AttributeRequirementsController.assign_array_line(attribute_name));\n\t\t\t});\n\t\t\treturn lines.join(';\\n');\n\t\t} else {\n\t\t\treturn '';\n\t\t}\n\t}\n\tattribute_presence_check_line(): string {\n\t\tif (this._attribute_names) {\n\t\t\tconst var_names: string[] = [];\n\t\t\tthis._attribute_names?.forEach((attribute_name: string) => {\n\t\t\t\tconst var_name = AttributeRequirementsController.var_attribute(attribute_name);\n\t\t\t\tvar_names.push(var_name);\n\t\t\t});\n\t\t\treturn var_names.join(' && ');\n\t\t} else {\n\t\t\treturn 'true';\n\t\t}\n\t}\n\n\tadd(attribute_name: string) {\n\t\tthis._attribute_names = this._attribute_names || new Set<string>();\n\t\tthis._attribute_names.add(attribute_name);\n\t}\n\n\tstatic assign_attribute_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\treturn `const ${var_attribute} = entities[0].geometry().attributes['${attribute_name}']`;\n\t}\n\tstatic assign_item_size_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_attribute_size = this.var_attribute_size(attribute_name);\n\t\treturn `const ${var_attribute_size} = ${var_attribute}.itemSize`;\n\t}\n\tstatic assign_array_line(attribute_name: string) {\n\t\tconst var_attribute = this.var_attribute(attribute_name);\n\t\tconst var_array = this.var_array(attribute_name);\n\t\treturn `const ${var_array} = ${var_attribute}.array`;\n\t}\n\n\tstatic var_attribute(attribute_name: string) {\n\t\treturn `attrib_${attribute_name}`;\n\t}\n\tstatic var_attribute_size(attribute_name: string) {\n\t\treturn `attrib_size_${attribute_name}`;\n\t}\n\tstatic var_array(attribute_name: string) {\n\t\treturn `array_${attribute_name}`;\n\t}\n\tvar_attribute_size(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_attribute_size(attribute_name);\n\t}\n\tvar_array(attribute_name: string) {\n\t\treturn AttributeRequirementsController.var_array(attribute_name);\n\t}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\nimport {ParsedTree} from './ParsedTree';\n// import {LiteralConstructsController} from './LiteralConstructsController'\nimport jsep from 'jsep';\n// import {BaseMethod} from 'src/Engine/Expression/Method/_Base'\n// import {ReferenceSearchResult, MissingExpressionReference} from './MissingReference'\n// import {MissingReferencesControler} from './MissingReferencesController'\n\nconst ARGUMENTS_SEPARATOR = ', ';\n// const ATTRIBUTE_PREFIX = '@'\n// const VARIABLE_PREFIX = '$'\n\n// export interface MethodsByName {\n// \t[propName: string]: BaseMethod;\n// }\n// interface JsepsByString {\n// \t[propName: string]: jsep.Expression[];\n// }\n// interface MissingExpressionReferenceByString {\n// \t[propName: string]: MissingExpressionReference;\n// }\nimport {BaseTraverser} from './_Base';\n\nexport class ExpressionStringGenerator extends BaseTraverser {\n\tconstructor(public param: BaseParamType) {\n\t\tsuper(param);\n\t}\n\n\tparse_tree(parsed_tree: ParsedTree) {\n\t\tif (parsed_tree.error_message == null && parsed_tree.node) {\n\t\t\ttry {\n\t\t\t\treturn this.traverse_node(parsed_tree.node);\n\t\t\t} catch (e) {\n\t\t\t\tthis.set_error('could not traverse tree');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.set_error('cannot parse tree');\n\t\t}\n\t}\n\n\tprotected traverse_CallExpression(node: jsep.CallExpression): string {\n\t\tconst method_arguments = node.arguments.map((arg) => {\n\t\t\treturn this.traverse_node(arg);\n\t\t});\n\t\tconst arguments_joined = `${method_arguments.join(ARGUMENTS_SEPARATOR)}`;\n\n\t\tconst method_name = (node.callee as jsep.Identifier).name;\n\t\treturn `${method_name}(${arguments_joined})`;\n\t}\n\tprotected traverse_UnaryExpression(node: jsep.UnaryExpression): string {\n\t\treturn `${node.operator}${this.traverse_node(node.argument)}`; // -5\n\t}\n\n\tprotected traverse_Identifier(node: jsep.Identifier): string {\n\t\treturn `${node.name}`;\n\t}\n}\n","import {BaseParamType} from 'src/engine/params/_Base';\n// import {ParsedTree} from './Traverser/ParsedTree'\nimport {FunctionGenerator} from './traversers/FunctionGenerator';\n// import {NodeSimple} from 'src/core/graph/NodeSimple'\n// import {MissingExpressionReference} from './MissingReference'\n// import {MissingReferencesController} from './MissingReferencesController'\n// import {NamesListener} from './NamesListener'\nimport {MethodDependency} from './MethodDependency';\nimport jsep from 'jsep';\n\n// interface MissingExpressionReferenceByString {\n// \t[propName: string]: MissingExpressionReference;\n// }\nexport interface JsepsByString {\n\t[propName: string]: jsep.Expression[];\n}\n\nexport class DependenciesController {\n\terror_message: string | undefined;\n\t// private references_controller: MissingReferencesController\n\t// private missing_expression_references_by_id: MissingExpressionReferenceByString = {}\n\tprivate cyclic_graph_detected: boolean = false;\n\t// private jsep_nodes_by_missing_paths: JsepsByString = {}\n\tprivate method_dependencies: MethodDependency[] = [];\n\n\t// private names_listeners: NamesListener[] = []\n\n\tconstructor(public param: BaseParamType) {\n\t\t// this.references_controller = this.param.scene().missing_expression_references_controller\n\t}\n\n\tprotected set_error(message: string) {\n\t\tthis.error_message = this.error_message || message;\n\t}\n\n\treset() {\n\t\tthis.param.graph_disconnect_predecessors();\n\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.reset();\n\t\t});\n\t\tthis.method_dependencies = [];\n\n\t\t// this.jsep_nodes_by_missing_paths = {}\n\t\t// const ref_ids = Object.keys(this.missing_expression_references_by_id)\n\t\t// ref_ids.forEach(ref_id=>{\n\t\t// \tconst ref = this.missing_expression_references_by_id[ref_id]\n\t\t// \tthis.references_controller.unregister(ref)\n\t\t// })\n\t\t// this.missing_expression_references_by_id = {}\n\n\t\t// this.names_listeners.forEach(names_listener=>{names_listener.reset()})\n\t}\n\n\tupdate(function_generator: FunctionGenerator) {\n\t\t// const immutable_dependencies = function_generator.immutable_dependencies\n\t\t// const jsep_dependencies = function_generator.jsep_dependencies\n\t\t// const jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\n\t\t// if(jsep_dependencies.length > 0){\n\t\t// \tconsole.log(\"connect_param_to_dependencies\", this.param.full_path())\n\t\t// }\n\n\t\tthis.cyclic_graph_detected = false;\n\n\t\tthis.connect_immutable_dependencies(function_generator);\n\t\tthis.method_dependencies = function_generator.method_dependencies;\n\t\tthis.handle_method_dependencies();\n\t\t// this.connect_missing_paths(function_generator)\n\n\t\tthis.listen_for_name_changes();\n\t}\n\n\tprivate connect_immutable_dependencies(function_generator: FunctionGenerator) {\n\t\tfunction_generator.immutable_dependencies.forEach((dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tif (this.param.add_graph_input(dependency) == false) {\n\t\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\t\tthis.reset();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\tprivate handle_method_dependencies() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tif (this.cyclic_graph_detected == false) {\n\t\t\t\tthis.handle_method_dependency(method_dependency);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate handle_method_dependency(method_dependency: MethodDependency) {\n\t\tconst node_simple = method_dependency.resolved_graph_node;\n\n\t\tif (node_simple) {\n\t\t\t// this should update the jsep_node, and run the expression to string parser\n\t\t\t// when a name in the referenced nodes is updated\n\t\t\t// const names_listener = new NamesListener(this.param, node_simple, jsep_node)\n\t\t\t// TODO: test that it is no longer active if expression is updated\n\n\t\t\tif (!this.param.add_graph_input(node_simple)) {\n\t\t\t\tthis.cyclic_graph_detected = true;\n\t\t\t\tthis.set_error('cannot create expression, infinite graph detected');\n\t\t\t\tthis.reset();\n\t\t\t\treturn;\n\t\t\t}\n\t\t} // else {\n\t\t// const jsep_node = method_dependency.jsep_node\n\t\t//}\n\t}\n\n\tprivate listen_for_name_changes() {\n\t\tthis.method_dependencies.forEach((method_dependency) => {\n\t\t\tmethod_dependency.listen_for_name_changes();\n\t\t});\n\t}\n\n\t// private connect_missing_paths(function_generator: FunctionGenerator){\n\n\t// \tconst jsep_nodes_by_missing_paths = function_generator.jsep_nodes_by_missing_paths\n\t// \tconst missing_paths = Object.keys(jsep_nodes_by_missing_paths)\n\n\t// \tmissing_paths.forEach((missing_path)=>{\n\t// \t\tconst full_path = CoreWalker.make_absolute(this.param.node(), missing_path)\n\t// \t\tconst jsep_nodes = jsep_nodes_by_missing_paths[missing_path]\n\t// \t\tjsep_nodes.forEach(jsep_node=>{\n\t// \t\t\tconst missing_expression_reference = this.references_controller.register(this.param, jsep_node, full_path)\n\n\t// \t\t\tthis.missing_expression_references_by_id[missing_expression_reference.id] = missing_expression_reference\n\t// \t\t})\n\t// \t})\n\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class ButtonParam extends TypedParam<ParamType.BUTTON> {\n\tstatic type() {\n\t\treturn ParamType.BUTTON;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.BUTTON],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.BUTTON]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.BUTTON], val2: ParamValuesTypeMap[ParamType.BUTTON]) {\n\t\treturn true;\n\t}\n\tpress_button() {\n\t\tthis.options.execute_callback();\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {Color} from 'three/src/math/Color';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_COLOR = ['r', 'g', 'b'];\nexport class ColorParam extends TypedMultipleParam<ParamType.COLOR> {\n\tprotected _value = new Color();\n\tr!: FloatParam;\n\tg!: FloatParam;\n\tb!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.COLOR;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_COLOR;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.COLOR]) {\n\t\tif (raw_input instanceof Color) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.OPERATOR_PATH]\n\t) {\n\t\treturn raw_input1 == raw_input2;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.COLOR], val2: ParamValuesTypeMap[ParamType.COLOR]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.r = this.components[0];\n\t\tthis.g = this.components[1];\n\t\tthis.b = this.components[2];\n\t}\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Color) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.r.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.g.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.b.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.r = this.r.raw_input;\n\t// \t\t\tthis._raw_input.g = this.g.raw_input;\n\t// \t\t\tthis._raw_input.b = this.b.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.r.raw_input, this.g.raw_input, this.b.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.r.raw_input;\n\t// \t\tthis._raw_input[1] = this.g.raw_input;\n\t// \t\tthis._raw_input[2] = this.b.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.r = this.r.value;\n\t\tthis._value.g = this.g.value;\n\t\tthis._value.b = this.b.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.COLOR]): Color | null {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\tif(input.length == 3){\n\t// \t\t\tif( input.filter(lodash_isNumber).length > 0 ){\n\t// \t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t}\n\t// \t\t\tif(first){\n\t// \t\t\t\tif(lodash_isNumber(first)){\n\t// \t\t\t\t\treturn new Color().fromArray(input);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// \treturn new Color();\n\t// }\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class FolderParam extends TypedParam<ParamType.FOLDER> {\n\tstatic type() {\n\t\treturn ParamType.FOLDER;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.FOLDER],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.FOLDER]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.FOLDER], val2: ParamValuesTypeMap[ParamType.FOLDER]) {\n\t\treturn true;\n\t}\n}\n","import {TypedParam} from './_Base';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nexport class SeparatorParam extends TypedParam<ParamType.SEPARATOR> {\n\tstatic type() {\n\t\treturn ParamType.SEPARATOR;\n\t}\n\tget default_value_serialized() {\n\t\treturn this.default_value;\n\t}\n\tget raw_input_serialized() {\n\t\treturn this._raw_input;\n\t}\n\tget value_serialized() {\n\t\treturn this.value;\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.SEPARATOR],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n\tstatic are_values_equal(\n\t\tval1: ParamValuesTypeMap[ParamType.SEPARATOR],\n\t\tval2: ParamValuesTypeMap[ParamType.SEPARATOR]\n\t) {\n\t\treturn true;\n\t}\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR2 = ['x', 'y'];\nexport class Vector2Param extends TypedMultipleParam<ParamType.VECTOR2> {\n\tprotected _value = new Vector2();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR2;\n\t}\n\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR2;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number2;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector2) {\n\t// \t\treturn this._raw_input.toArray() as Number2;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber2 = [this._raw_input[0], this._raw_input[1]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number2;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR2]) {\n\t\tif (raw_input instanceof Vector2) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber2 = [raw_input[0], raw_input[1]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR2],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR2]\n\t) {\n\t\tif (raw_input1 instanceof Vector2) {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector2) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y;\n\t\t\t} else {\n\t\t\t\treturn raw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1];\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR2], val2: ParamValuesTypeMap[ParamType.VECTOR2]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector2().fromArray(input);\n\t// \t}\n\t// \treturn new Vector2();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\nimport lodash_isArray from 'lodash/isArray';\n// import lodash_isNumber from 'lodash/isNumber';\nimport {FloatParam} from './Float';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {ParamType} from '../poly/ParamType';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n// import {ParamInitValuesTypeMap} from '../nodes/utils/params/ParamsController';\n\nconst COMPONENT_NAMES_VECTOR3 = ['x', 'y', 'z'];\nexport class Vector3Param extends TypedMultipleParam<ParamType.VECTOR3> {\n\tprotected _value = new Vector3();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR3;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR3;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number3;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\treturn this._raw_input.toArray() as Number3;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber3 = [this._raw_input[0], this._raw_input[1], this._raw_input[2]];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number3;\n\t}\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t\tif (raw_input instanceof Vector3) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber3 = [raw_input[0], raw_input[1], raw_input[2]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR3],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR3]\n\t) {\n\t\tif (raw_input1 instanceof Vector3) {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn raw_input1.x == raw_input2[0] && raw_input1.y == raw_input2[1] && raw_input1.z == raw_input2[2];\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector3) {\n\t\t\t\treturn raw_input1[0] == raw_input2.x && raw_input1[1] == raw_input2.y && raw_input1[2] == raw_input2.z;\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] && raw_input1[1] == raw_input2[1] && raw_input1[2] == raw_input2[2]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR3], val2: ParamValuesTypeMap[ParamType.VECTOR3]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t}\n\n\t// set_raw_input_from_components() {\n\t// \tif (this._raw_input instanceof Vector3) {\n\t// \t\tif (\n\t// \t\t\tlodash_isNumber(this.x.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.y.raw_input) &&\n\t// \t\t\tlodash_isNumber(this.z.raw_input)\n\t// \t\t) {\n\t// \t\t\tthis._raw_input.x = this.x.raw_input;\n\t// \t\t\tthis._raw_input.y = this.y.raw_input;\n\t// \t\t\tthis._raw_input.z = this.z.raw_input;\n\t// \t\t} else {\n\t// \t\t\tthis._raw_input = [this.x.raw_input, this.y.raw_input, this.z.raw_input];\n\t// \t\t}\n\t// \t} else {\n\t// \t\tthis._raw_input[0] = this.x.raw_input;\n\t// \t\tthis._raw_input[1] = this.y.raw_input;\n\t// \t\tthis._raw_input[2] = this.z.raw_input;\n\t// \t}\n\t// }\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t}\n\t// convert(input: ParamInitValuesTypeMap[ParamType.VECTOR3]) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector3().fromArray(input);\n\t// \t}\n\t// \treturn new Vector3();\n\t// }\n}\n","import {TypedMultipleParam} from './_Multiple';\n\nimport lodash_isArray from 'lodash/isArray';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {ParamType} from '../poly/ParamType';\nimport {FloatParam} from './Float';\nimport {ParamValuesTypeMap} from './types/ParamValuesTypeMap';\nimport {ParamInitValuesTypeMap} from './types/ParamInitValuesTypeMap';\n\nconst COMPONENT_NAMES_VECTOR4 = ['x', 'y', 'z', 'w'];\nexport class Vector4Param extends TypedMultipleParam<ParamType.VECTOR4> {\n\tprotected _value = new Vector4();\n\tx!: FloatParam;\n\ty!: FloatParam;\n\tz!: FloatParam;\n\tw!: FloatParam;\n\tstatic type() {\n\t\treturn ParamType.VECTOR4;\n\t}\n\tstatic get component_names() {\n\t\treturn COMPONENT_NAMES_VECTOR4;\n\t}\n\tget default_value_serialized() {\n\t\tif (lodash_isArray(this.default_value)) {\n\t\t\treturn this.default_value;\n\t\t} else {\n\t\t\treturn this.default_value.toArray() as Number4;\n\t\t}\n\t}\n\t// get raw_input_serialized() {\n\t// \tif (this._raw_input instanceof Vector4) {\n\t// \t\treturn this._raw_input.toArray() as Number4;\n\t// \t} else {\n\t// \t\tconst new_array: StringOrNumber4 = [\n\t// \t\t\tthis._raw_input[0],\n\t// \t\t\tthis._raw_input[1],\n\t// \t\t\tthis._raw_input[2],\n\t// \t\t\tthis._raw_input[3],\n\t// \t\t];\n\t// \t\treturn new_array;\n\t// \t}\n\t// }\n\tget value_serialized() {\n\t\treturn this.value.toArray() as Number4;\n\t}\n\n\tprotected _clone_raw_input(raw_input: ParamInitValuesTypeMap[ParamType.VECTOR4]) {\n\t\tif (raw_input instanceof Vector4) {\n\t\t\treturn raw_input.clone();\n\t\t} else {\n\t\t\tconst new_array: StringOrNumber4 = [raw_input[0], raw_input[1], raw_input[2], raw_input[3]];\n\t\t\treturn new_array;\n\t\t}\n\t}\n\tstatic are_raw_input_equal(\n\t\traw_input1: ParamInitValuesTypeMap[ParamType.VECTOR4],\n\t\traw_input2: ParamInitValuesTypeMap[ParamType.VECTOR4]\n\t) {\n\t\tif (raw_input1 instanceof Vector4) {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn raw_input1.equals(raw_input2);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1.x == raw_input2[0] &&\n\t\t\t\t\traw_input1.y == raw_input2[1] &&\n\t\t\t\t\traw_input1.z == raw_input2[2] &&\n\t\t\t\t\traw_input1.w == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t} else {\n\t\t\tif (raw_input2 instanceof Vector4) {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2.x &&\n\t\t\t\t\traw_input1[1] == raw_input2.y &&\n\t\t\t\t\traw_input1[2] == raw_input2.z &&\n\t\t\t\t\traw_input1[3] == raw_input2.w\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\treturn (\n\t\t\t\t\traw_input1[0] == raw_input2[0] &&\n\t\t\t\t\traw_input1[1] == raw_input2[1] &&\n\t\t\t\t\traw_input1[2] == raw_input2[2] &&\n\t\t\t\t\traw_input1[3] == raw_input2[3]\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\tstatic are_values_equal(val1: ParamValuesTypeMap[ParamType.VECTOR4], val2: ParamValuesTypeMap[ParamType.VECTOR4]) {\n\t\treturn val1.equals(val2);\n\t}\n\tinit_components() {\n\t\tsuper.init_components();\n\t\tthis.x = this.components[0];\n\t\tthis.y = this.components[1];\n\t\tthis.z = this.components[2];\n\t\tthis.w = this.components[3];\n\t}\n\n\tset_value_from_components() {\n\t\tthis._value.x = this.x.value;\n\t\tthis._value.y = this.y.value;\n\t\tthis._value.z = this.z.value;\n\t\tthis._value.w = this.w.value;\n\t}\n\t// convert(input: any) {\n\t// \tif (lodash_isArray(input)) {\n\t// \t\treturn new Vector4().fromArray(input);\n\t// \t}\n\t// \treturn new Vector4();\n\t// }\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from 'src/engine/poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsValueAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['value_type'];\n};\n\nexport class ParamsValueAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {BaseNodeType} from '../_Base';\n\nexport class ProcessingContext {\n\tprivate _frame: number = 0;\n\tconstructor(node: BaseNodeType) {}\n\tcopy(src_context: ProcessingContext) {\n\t\tthis._frame = src_context.frame;\n\t}\n\tget frame() {\n\t\treturn this._frame;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n\nimport {ConnectionsController} from './ConnectionsController';\nimport {InputsController} from './InputsController';\nimport {OutputsController} from './OutputsController';\n\nexport class IOController<T extends BaseNodeType> {\n\tprotected _connections: ConnectionsController = new ConnectionsController(this.node);\n\tprotected _inputs: InputsController<T> | undefined;\n\tprotected _outputs: OutputsController<T> | undefined;\n\n\tconstructor(protected node: T) {}\n\n\t// add_connections_controller() {\n\t// \tthis._connections =\n\t// }\n\tget connections() {\n\t\treturn this._connections;\n\t}\n\n\t// inputs\n\t// init_inputs(options: InputsControllerOptions) {\n\t// \tthis.inputs.set_options(options);\n\t// }\n\tget inputs(): InputsController<T> {\n\t\treturn (this._inputs = this._inputs || new InputsController<T>(this.node));\n\t}\n\thas_inputs() {\n\t\treturn this._inputs != null;\n\t}\n\n\t// outputs\n\t// init_outputs() {\n\t// \tthis._outputs = this._outputs || new OutputsController(this.node);\n\t// }\n\tget outputs(): OutputsController<T> {\n\t\treturn (this._outputs = this._outputs || new OutputsController<T>(this.node));\n\t}\n\thas_outputs() {\n\t\treturn this._outputs != null;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\nimport lodash_compact from 'lodash/compact';\nimport {NodeConnection} from './NodeConnection';\n\n// interface NodeConnectionByString {\n// \t[propName: string]: NodeConnection;\n// }\n// interface NodeConnectionByStringByString {\n// \t[propName: string]: NodeConnectionByString;\n// }\n\nexport class ConnectionsController {\n\tprivate _input_connections: Array<NodeConnection | undefined> | undefined;\n\tprivate _output_connections: Map<number, Map<number, NodeConnection>> = new Map();\n\n\tconstructor(protected _node: BaseNodeType) {}\n\n\tinit_inputs() {\n\t\tconst count = this._node.io.inputs.max_inputs_count;\n\t\tthis._input_connections = new Array(count);\n\t}\n\n\t//\n\t//\n\t// INPUT CONNECTIONS\n\t//\n\t//\n\tadd_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\t// if (connection.input_index < this._input_connections.length) {\n\t\t\tthis._input_connections[connection.input_index] = connection;\n\t\t\t// } else {\n\t\t\t// \tconsole.warn(`attempt to add an input connection at index ${connection.input_index}`);\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tremove_input_connection(connection: NodeConnection) {\n\t\tif (this._input_connections) {\n\t\t\tif (connection.input_index < this._input_connections.length) {\n\t\t\t\tthis._input_connections[connection.input_index] = undefined;\n\t\t\t} else {\n\t\t\t\tconsole.warn(`attempt to remove an input connection at index ${connection.input_index}`);\n\t\t\t}\n\t\t} else {\n\t\t\tconsole.warn(`input connections array not initialized`);\n\t\t}\n\t}\n\tinput_connection(index: number): NodeConnection | undefined {\n\t\tif (this._input_connections) {\n\t\t\treturn this._input_connections[index];\n\t\t}\n\t}\n\tfirst_input_connection(): NodeConnection {\n\t\treturn lodash_compact(this._input_connections)[0];\n\t}\n\tlast_input_connection(): NodeConnection {\n\t\tconst connections = lodash_compact(this._input_connections);\n\t\treturn connections[connections.length - 1];\n\t}\n\tinput_connections() {\n\t\treturn this._input_connections;\n\t}\n\n\t//\n\t//\n\t// OUTPUT CONNECTIONS\n\t//\n\t//\n\tadd_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (!connections_by_id) {\n\t\t\tconnections_by_id = new Map<number, NodeConnection>();\n\t\t\tthis._output_connections.set(output_index, connections_by_id);\n\t\t}\n\t\tconnections_by_id.set(id, connection);\n\t\t// this._output_connections[output_index] = this._output_connections[output_index] || {};\n\t\t// this._output_connections[output_index][id] = connection;\n\t}\n\tremove_output_connection(connection: NodeConnection) {\n\t\tconst output_index = connection.output_index;\n\t\tconst id = connection.id;\n\t\tlet connections_by_id = this._output_connections.get(output_index);\n\t\tif (connections_by_id) {\n\t\t\tconnections_by_id.delete(id);\n\t\t}\n\t\t// delete this._output_connections[output_index][id];\n\t}\n\n\toutput_connections() {\n\t\tlet list: NodeConnection[] = [];\n\n\t\tthis._output_connections.forEach((connections_by_id, output_index) => {\n\t\t\tconnections_by_id.forEach((connection, id) => {\n\t\t\t\tif (connection) {\n\t\t\t\t\tlist.push(connection);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\t// Object.keys(this._output_connections).forEach((index) => {\n\t\t// \tconst connections_for_index = this._output_connections[index];\n\t\t// \tObject.keys(connections_for_index).forEach((id) => {\n\t\t// \t\tlist.push(connections_for_index[id]);\n\t\t// \t});\n\t\t// });\n\t\treturn list;\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseContainer} from 'src/engine/containers/_Base';\n// import lodash_includes from 'lodash/includes'\n// import lodash_filter from 'lodash/filter'\nimport lodash_each from 'lodash/each';\nimport lodash_isString from 'lodash/isString';\n// import lodash_compact from 'lodash/compact'\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport {NodeConnection} from './NodeConnection';\n\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {TypeAssert} from 'src/engine/poly/Assert';\n\n// export class InputGraphNode extends NodeSimple {\n// \tconstructor(name: string) {\n// \t\tsuper(name);\n// \t}\n// }\n\n// export interface InputsControllerOptions {\n// \tmin_inputs?: number;\n// \tmax_inputs?: number;\n// \tdepends_on_inputs?: boolean;\n// }\ntype OnUpdateHook = () => void;\n\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class InputsController<T extends BaseNodeType> {\n\tprivate _graph_node_inputs: CoreGraphNode[] = [];\n\tprivate _inputs: Array<T | null> = [];\n\tprivate _has_named_inputs: boolean = false;\n\t// _input_connections: NodeConnection[] = []\n\tprivate _named_input_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _min_inputs_count: number = 0;\n\tprivate _max_inputs_count: number = 0;\n\tprivate _depends_on_inputs: boolean = true;\n\n\t// hooks\n\tprivate _on_update_hooks: OnUpdateHook[] | undefined;\n\n\t// clonable\n\tprivate _user_inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _inputs_clonable_states: InputCloneMode[] | undefined;\n\tprivate _override_clonable_state: boolean = false;\n\n\tconstructor(protected node: T) {\n\t\t//, options: InputsControllerOptions = {}) {\n\t\t// this.set_options(options);\n\t}\n\n\t// set_options(options: InputsControllerOptions) {\n\t// \tif (options['min_inputs']) {\n\t// \t\tthis.set_min_inputs_count(options['min_inputs']);\n\t// \t}\n\t// \tif (options['max_inputs']) {\n\t// \t\tthis.set_max_inputs_count(options['max_inputs']);\n\t// \t}\n\t// \tif (options['depends_on_inputs']) {\n\t// \t\tthis.set_depends_on_inputs(options['depends_on_inputs']);\n\t// \t}\n\t// }\n\n\t// _init_inputs() {\n\t// \tthis._inputs = [];\n\t// }\n\tset_depends_on_inputs(depends_on_inputs: boolean) {\n\t\tthis._depends_on_inputs = depends_on_inputs;\n\t}\n\tprivate set_min_inputs_count(min_inputs_count: number) {\n\t\tthis._min_inputs_count = min_inputs_count;\n\t}\n\t// min_inputs_count() {\n\t// \treturn this._min_inputs_count || 0;\n\t// }\n\tprivate set_max_inputs_count(max_inputs_count: number) {\n\t\tthis._max_inputs_count = max_inputs_count;\n\t\tthis.init_graph_node_inputs();\n\t}\n\n\tnamed_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let connection_point of this._named_input_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tset_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_inputs = true;\n\t\tthis._named_input_connection_points = connection_points;\n\t\tthis.set_min_inputs_count(0);\n\t\tthis.set_max_inputs_count(connection_points.length);\n\t\tthis.init_graph_node_inputs();\n\t\tthis.node.emit(NodeEvent.NAMED_INPUTS_UPDATED);\n\t}\n\tget has_named_inputs() {\n\t\treturn this._has_named_inputs;\n\t}\n\tget named_input_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_input_connection_points || [];\n\t}\n\tprivate init_graph_node_inputs() {\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\tthis._graph_node_inputs[i] = this._graph_node_inputs[i] || this._create_graph_node_input(i);\n\t\t}\n\t}\n\tprivate _create_graph_node_input(index: number): CoreGraphNode {\n\t\tconst graph_input_node = new CoreGraphNode(this.node.scene, `input_${index}`);\n\t\t// graph_input_node.set_scene(this.node.scene);\n\t\tthis.node.add_graph_input(graph_input_node);\n\t\treturn graph_input_node;\n\t}\n\n\tget max_inputs_count(): number {\n\t\treturn this._max_inputs_count || 0;\n\t}\n\tinput_graph_node(input_index: number): CoreGraphNode {\n\t\treturn this._graph_node_inputs[input_index];\n\t}\n\n\t// set_count_to_zero() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(0);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\t// set_count_to_one_max() {\n\t// \tthis.set_min_inputs_count(0);\n\t// \tthis.set_max_inputs_count(1);\n\n\t// \tthis.init_inputs_clonable_state();\n\t// }\n\tset_count(min: number, max?: number) {\n\t\tif (max == null) {\n\t\t\tmax = min;\n\t\t}\n\t\tthis.set_min_inputs_count(min);\n\t\tthis.set_max_inputs_count(max);\n\n\t\tthis.init_inputs_clonable_state();\n\t\tthis.init_connections_controller_inputs();\n\t}\n\tprivate init_connections_controller_inputs() {\n\t\tthis.node.io.connections.init_inputs();\n\t}\n\t// requires_two_inputs: ->\n\t// \tthis.set_min_inputs_count(2)\n\t// \tthis.set_max_inputs_count(2)\n\n\t// requires_one_input() {\n\t// \treturn this._min_inputs_count > 0;\n\t// }\n\n\t// eval_required_inputs(callback){\n\t// \tconst containers = [];\n\t// \tif (this._max_inputs_count === 0) {\n\t// \t\treturn callback(containers);\n\t// \t} else {\n\t// \t\tconst existing_inputs = lodash_compact(this.inputs());\n\t// \t\tif (existing_inputs.length < this._min_inputs_count) {\n\t// \t\t\treturn this.self.set_error(\"inputs are missing\");\n\t// \t\t} else {\n\t// \t\t\t// const frame = this.self.context().frame();\n\t// \t\t\t// const full_path = this.self.full_path();\n\n\t// \t\t\tswitch (existing_inputs.length) {\n\t// \t\t\t\tcase 0:\n\t// \t\t\t\t\treturn callback(containers);\n\t// \t\t\t\tcase 1:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container=> {\n\t// \t\t\t\t\t\tcontainers.push(container);\n\t// \t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t});\n\t// \t\t\t\tcase 2:\n\t// \t\t\t\t\treturn this.eval_required_input(0, container0=> {\n\t// \t\t\t\t\t\treturn this.eval_required_input(1, container1=> {\n\t// \t\t\t\t\t\t\tcontainers.push(container0);\n\t// \t\t\t\t\t\t\tcontainers.push(container1);\n\t// \t\t\t\t\t\t\treturn callback(containers);\n\t// \t\t\t\t\t\t});\n\t// \t\t\t\t\t});\n\t// \t\t\t\t\t// TODO: I could also here check if the inputs are dirty\n\t// \t\t\t\t\t// instead of going through the callback chain\n\t// \t\t\t\t\t// input_node0 = this.input(0)\n\t// \t\t\t\t\t// input_node0.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// input_node0.request_container (container0)=>\n\t// \t\t\t\t\t// \tinput_node1 = this.input(1)\n\t// \t\t\t\t\t// \tinput_node1.context().set_frame(frame, full_path)\n\t// \t\t\t\t\t// \tinput_node1.request_container (container1)=>\n\t// \t\t\t\t\t// \t\tcontainers.push(container0)\n\t// \t\t\t\t\t// \t\tcontainers.push(container1)\n\t// \t\t\t\t\t// \t\tcallback([container0, container1])\n\t// \t\t\t\tdefault:\n\t// \t\t\t\t\tconsole.warn(`${this.self.full_path()} inputs not evaluated`);\n\t// \t\t\t\t\treturn callback();\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\tasync eval_required_inputs_p() {\n\t\tlet containers: Array<BaseContainer | null> = [];\n\t\tif (this._max_inputs_count > 0) {\n\t\t\tconst existing_input_indices: number[] = [];\n\t\t\tthis.inputs().forEach((input, i) => {\n\t\t\t\tif (input) {\n\t\t\t\t\texisting_input_indices.push(i);\n\t\t\t\t}\n\t\t\t});\n\t\t\t// const existing_inputs = lodash_compact(this.inputs());\n\t\t\tif (existing_input_indices.length < this._min_inputs_count) {\n\t\t\t\tthis.node.states.error.set('inputs are missing');\n\t\t\t} else {\n\t\t\t\tif (existing_input_indices.length > 0) {\n\t\t\t\t\tconst promises = existing_input_indices.map((input_index) => {\n\t\t\t\t\t\treturn this.node.io.inputs.eval_required_input(input_index);\n\t\t\t\t\t});\n\t\t\t\t\tcontainers = await Promise.all(promises);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn containers;\n\t}\n\t// eval_required_input(input_index: number, callback){\n\t// \treturn this.self.request_input_container(input_index, container=> {\n\t// \t\t// we do not clone here, as we just check if a group is present\n\t// \t\tlet group;\n\t// \t\tif ((container != null) && ((group = container.object({clone: false})) != null)) {\n\t// \t\t\treturn callback(container);\n\t// \t\t} else {\n\t// \t\t\tconst input_node = this.input(input_index);\n\t// \t\t\tif (input_node != null) {\n\t// \t\t\t\tconst input_error_message = input_node.error_message();\n\t// \t\t\t\treturn this.self.set_error(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t// \t\t\t}\n\t// \t\t}\n\t// \t});\n\t// }\n\tasync eval_required_input(input_index: number) {\n\t\tconst container = await this.node.container_controller.request_input_container(input_index);\n\t\t// we do not clone here, as we just check if a group is present\n\t\tif (container && container.core_content()) {\n\t\t\t// return container;\n\t\t} else {\n\t\t\tconst input_node = this.input(input_index);\n\t\t\tif (input_node) {\n\t\t\t\tconst input_error_message = input_node.states.error.message;\n\t\t\t\tif (input_error_message) {\n\t\t\t\t\tthis.node.states.error.set(`input ${input_index} is invalid (error: ${input_error_message})`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn container;\n\t}\n\t// protected _get_named_input_index_without_error(name: string): number {\n\t// \tconst connections = this.named_input_connections;\n\t// \tlet index = -1;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn index;\n\t// }\n\tget_named_input_index(name: string): number {\n\t\tif (this._named_input_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_input_connection_points.length; i++) {\n\t\t\t\tif (this._named_input_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t\t// const index = this._get_named_input_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connections = this.named_input_connections;\n\t\t// \tconst available_names = connections.map((o) => o.name).join(', ');\n\t\t// \tconsole.log('named_input_connections', connections);\n\t\t// \tthrow new Error(\n\t\t// \t\t`${this.node.full_path()}: no inputs named '${name}'. available names are '${available_names}' (${\n\t\t// \t\t\tconnections.length\n\t\t// \t\t} inputs)`\n\t\t// \t);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_input_index(input_index_or_name: number | string): number {\n\t\tif (lodash_isString(input_index_or_name)) {\n\t\t\tif (this.has_named_inputs) {\n\t\t\t\treturn this.get_named_input_index(input_index_or_name);\n\t\t\t} else {\n\t\t\t\tthrow new Error(`node ${this.node.full_path()} has no named inputs`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn input_index_or_name;\n\t\t}\n\t}\n\n\tset_input(input_index_or_name: number | string, node: T | null, output_index_or_name: number | string = 0) {\n\t\tconst input_index = this.get_input_index(input_index_or_name) || 0;\n\t\tlet output_index = 0;\n\t\tif (node) {\n\t\t\tif (node.io.outputs.has_named_outputs) {\n\t\t\t\t// if(node.has_named_output(output_index_or_name)){\n\t\t\t\toutput_index = node.io.outputs.get_output_index(output_index_or_name) || 0;\n\t\t\t\t// this seems to prevent connecting output 1 from a vec to float to something else\n\t\t\t\t// } else {\n\t\t\t\t// \tconsole.warn(`${node.full_path()} has no output '${output_index_or_name}'`)\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\tconst graph_input_node = this._graph_node_inputs[input_index];\n\t\tif (graph_input_node == null) {\n\t\t\tthrow `graph_input_node not found at index ${input_index}`;\n\t\t}\n\n\t\tif (node && this.node.parent != node.parent) {\n\t\t\treturn;\n\t\t}\n\t\t// use the name if the node is either not defined or in another parent\n\t\t// const parent = this.self.parent()\n\t\t// if ((node == null) || (node.parent().graph_node_id !== parent.graph_node_id)) {\n\t\t// \tif (node_name != null) {\n\t\t// \t\tnode = parent.node(node_name);\n\t\t// \t}\n\t\t// }\n\n\t\tconst old_input_node = this._inputs[input_index];\n\t\tlet old_output_index: number | null = null;\n\t\tlet old_connection: NodeConnection | undefined = undefined;\n\t\tif (this.node.io.connections) {\n\t\t\told_connection = this.node.io.connections.input_connection(input_index);\n\t\t}\n\t\tif (old_connection) {\n\t\t\told_output_index = old_connection.output_index;\n\t\t}\n\n\t\tif (node !== old_input_node || output_index != old_output_index) {\n\t\t\t// TODO: test: add test to make sure this is necessary\n\t\t\tif (old_input_node != null) {\n\t\t\t\tif (this._depends_on_inputs) {\n\t\t\t\t\tgraph_input_node.remove_graph_input(old_input_node);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (node != null) {\n\t\t\t\tif (graph_input_node.add_graph_input(node)) {\n\t\t\t\t\t// we do test if we can create the graph connection\n\t\t\t\t\t// to ensure we are not in a cyclical graph,\n\t\t\t\t\t// but we delete it right after\n\t\t\t\t\tif (!this._depends_on_inputs) {\n\t\t\t\t\t\tgraph_input_node.remove_graph_input(node);\n\t\t\t\t\t}\n\n\t\t\t\t\t//this._input_connections[input_index] = new NodeConnection(node, this.self, output_index, input_index);\n\t\t\t\t\tif (old_connection) {\n\t\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t\t}\n\t\t\t\t\tthis._inputs[input_index] = node;\n\t\t\t\t\tnew NodeConnection(node, this.node, output_index, input_index);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`cannot connect ${node.full_path()} to ${this.node.full_path()}`);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._inputs[input_index] = null;\n\t\t\t\tif (old_connection) {\n\t\t\t\t\told_connection.disconnect({set_input: false});\n\t\t\t\t}\n\t\t\t\t// this._input_connections[input_index] = null;\n\t\t\t}\n\n\t\t\tthis.run_hooks();\n\t\t\tthis.node.set_dirty(node);\n\t\t\tthis.node.emit(NodeEvent.INPUTS_UPDATED);\n\t\t}\n\t}\n\t// TODO: make hooks like post set dirty hooks\n\t// post_set_input() {} // TODO: typescript: handle hook\n\t//\n\tadd_hook(hook: OnUpdateHook) {\n\t\tthis._on_update_hooks = this._on_update_hooks || [];\n\t\tthis._on_update_hooks.push(hook);\n\t}\n\trun_hooks() {\n\t\tif (this._on_update_hooks) {\n\t\t\tfor (let hook of this._on_update_hooks) {\n\t\t\t\thook();\n\t\t\t}\n\t\t}\n\t}\n\n\tremove_input(node: T) {\n\t\tlodash_each(this.inputs(), (input, index) => {\n\t\t\tif (input != null && node != null) {\n\t\t\t\tif (input.graph_node_id === node.graph_node_id) {\n\t\t\t\t\tthis.set_input(index, null);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tinput(input_index: number): T | null {\n\t\treturn this._inputs[input_index];\n\t}\n\t// TODO: the named_input and named_output API really needs to change\n\tnamed_input(input_name: string): T | null {\n\t\tif (this.has_named_inputs) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._inputs[input_index];\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\tnamed_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this.has_named_inputs && this._named_input_connection_points) {\n\t\t\tconst input_index = this.get_input_index(input_name);\n\t\t\treturn this._named_input_connection_points[input_index];\n\t\t}\n\t}\n\thas_named_input(name: string): boolean {\n\t\treturn this.get_named_input_index(name) >= 0;\n\t}\n\thas_input(input_index: number): boolean {\n\t\treturn this._inputs[input_index] != null;\n\t}\n\tinputs() {\n\t\treturn this._inputs;\n\t}\n\n\t// outputs(): BaseNode[] {\n\t// \treturn lodash_filter(this.self.graph_successors(), successor=> {\n\t// \t\tif (successor.is_a(Node)) {\n\t// \t\t\treturn lodash_includes(successor.inputs(), this.self);\n\t// \t\t}\n\t// \t});\n\t// }\n\n\t// clonable states\n\toverride_clonable_state_allowed() {\n\t\tlet value = false;\n\t\tfor (let state of this.inputs_clonable_state()) {\n\t\t\tif (state == InputCloneMode.FROM_NODE) {\n\t\t\t\tvalue = true;\n\t\t\t}\n\t\t}\n\t\treturn value;\n\t}\n\n\tinputs_clonable_state(): InputCloneMode[] {\n\t\treturn (this._inputs_clonable_states = this._inputs_clonable_states || this.init_inputs_clonable_state());\n\t}\n\tinput_cloned(index: number): boolean {\n\t\treturn this.input_clonable_state_with_override(index);\n\t}\n\tinputs_clonable_state_with_override(): boolean[] {\n\t\tconst list = [];\n\t\tconst states = this.inputs_clonable_state();\n\t\tfor (let i = 0; i < states.length; i++) {\n\t\t\tlist.push(this.input_clonable_state_with_override(i));\n\t\t}\n\t\treturn list;\n\t}\n\tinput_clonable_state_with_override(index: number): boolean {\n\t\tconst states = this.inputs_clonable_state();\n\t\t// for (let i = 0; i < states.length; i++) {\n\t\t// TODO: typescript: not sure if this loop was justified\n\t\tconst state = states[index];\n\t\tswitch (state) {\n\t\t\tcase InputCloneMode.ALWAYS:\n\t\t\t\treturn true;\n\t\t\tcase InputCloneMode.NEVER:\n\t\t\t\treturn false;\n\t\t\tcase InputCloneMode.FROM_NODE:\n\t\t\t\treturn !this._override_clonable_state;\n\t\t\t// default:\n\t\t\t// \tthrow new Error('unsupported type');\n\t\t}\n\t\treturn TypeAssert.unreachable(state);\n\t\t// }\n\t}\n\n\tinit_inputs_clonable_state(values: InputCloneMode[] | null = null) {\n\t\tif (values) {\n\t\t\tthis._user_inputs_clonable_states = values;\n\t\t}\n\t\tthis._inputs_clonable_states = this._user_inputs_clonable_states || this._default_inputs_clonale_state_values();\n\n\t\treturn this._inputs_clonable_states;\n\t}\n\tprivate _default_inputs_clonale_state_values() {\n\t\tconst list = [];\n\t\tfor (let i = 0; i < this._max_inputs_count; i++) {\n\t\t\t// lodash_times(this.self._max_inputs_count, (i)=>{\n\t\t\tlist.push(InputCloneMode.ALWAYS);\n\t\t}\n\t\treturn list;\n\t}\n\n\tset_override_clonable_state(state: boolean) {\n\t\tthis._override_clonable_state = state;\n\t\tthis.node.emit(NodeEvent.OVERRIDE_CLONABLE_STATE_UPDATE);\n\t}\n\toverride_clonable_state() {\n\t\treturn this._override_clonable_state;\n\t}\n}\n","import {BaseNodeType} from '../../_Base';\n// import {_Math} from 'three/src/math/Math';\n\n// export enum ConnectionType {\n// \tGEOMETRY = 'geometry',\n// \tMATRIX = 'matrix',\n// \tINT = 'int',\n// \tFLOAT = 'float',\n// \tBOOL = 'bool',\n// \tVEC2 = 'vec2',\n// \tVEC3 = 'vec3',\n// \tVEC4 = 'vec4',\n// \tMAT3 = 'mat3',\n// \tRGB = 'rgb',\n// \tRGBA = 'rgba',\n// }\n\ninterface DisconnectionOptions {\n\tset_input?: boolean;\n}\n\nexport class NodeConnection {\n\tprivate static _next_id: number = 0;\n\tprivate _id: number;\n\n\tconstructor(\n\t\tprivate _node_src: BaseNodeType,\n\t\tprivate _node_dest: BaseNodeType,\n\t\tprivate _output_index: number = 0,\n\t\tprivate _input_index: number = 0\n\t) {\n\t\tthis._id = NodeConnection._next_id++;\n\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.add_output_connection(this);\n\t\t\tthis._node_dest.io.connections.add_input_connection(this);\n\t\t}\n\t}\n\tget id() {\n\t\treturn this._id;\n\t}\n\n\tget node_src() {\n\t\treturn this._node_src;\n\t}\n\tget node_dest() {\n\t\treturn this._node_dest;\n\t}\n\tget output_index() {\n\t\treturn this._output_index;\n\t}\n\tget input_index() {\n\t\treturn this._input_index;\n\t}\n\n\tdisconnect(options: DisconnectionOptions = {}) {\n\t\tif (this._node_src.io.connections && this._node_dest.io.connections) {\n\t\t\tthis._node_src.io.connections.remove_output_connection(this);\n\t\t\tthis._node_dest.io.connections.remove_input_connection(this);\n\t\t}\n\n\t\tif (options.set_input === true) {\n\t\t\tthis._node_dest.io.inputs.set_input(this._input_index, null);\n\t\t}\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseNamedConnectionPointType} from './NamedConnectionPoint';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isString from 'lodash/isString';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\n// interface OutputsOptions {\n// \thas_outputs?: boolean;\n// }\n// TODO: remove the \"throw\" statements, which seem less necessary now with typescript\nexport class OutputsController<T extends BaseNodeType> {\n\tprivate _has_outputs: boolean = false;\n\tprivate _named_output_connection_points: BaseNamedConnectionPointType[] | undefined;\n\tprivate _has_named_outputs: boolean = false;\n\n\tconstructor(private node: T) {}\n\n\t// init(options?: OutputsOptions) {\n\t// \tif (options == null) {\n\t// \t\toptions = {};\n\t// \t}\n\t// \tif (options['has_outputs'] == null) {\n\t// \t\toptions['has_outputs'] = true;\n\t// \t}\n\t// \tthis._has_outputs = options['has_outputs'];\n\t// }\n\tset_has_one_output() {\n\t\tthis._has_outputs = true;\n\t}\n\tset_has_no_output() {\n\t\tthis._has_outputs = false;\n\t}\n\n\tget has_outputs() {\n\t\treturn this._has_outputs;\n\t}\n\tget has_named_outputs() {\n\t\treturn this._has_named_outputs;\n\t}\n\thas_named_output(name: string): boolean {\n\t\t// return this._get_named_output_index_without_error(name) != null;\n\t\treturn this.get_named_output_index(name) >= 0;\n\t}\n\tget named_output_connection_points(): BaseNamedConnectionPointType[] {\n\t\treturn this._named_output_connection_points || [];\n\t}\n\tnamed_output_connection(index: number): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\treturn this._named_output_connection_points[index];\n\t\t}\n\t}\n\t// protected _get_named_output_index_without_error(name: string): number {\n\t// \tconst connections = this.named_output_connection_points;\n\t// \tfor (let i = 0; i < connections.length; i++) {\n\t// \t\tconst connection = connections[i];\n\t// \t\tif (connection.name == name) {\n\t// \t\t\treturn i;\n\t// \t\t}\n\t// \t}\n\t// \treturn -1;\n\t// }\n\tget_named_output_index(name: string): number {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let i = 0; i < this._named_output_connection_points.length; i++) {\n\t\t\t\tif (this._named_output_connection_points[i].name == name) {\n\t\t\t\t\treturn i;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\n\t\t// const index = this._get_named_output_index_without_error(name);\n\t\t// if (index == null) {\n\t\t// \tconst connection_points = this.named_output_connection_points;\n\t\t// \tconst available_names = connection_points.map((o) => o.name).join(', ');\n\t\t// \tthrow new Error(`no outputs named '${name}'. available names are ${available_names}`);\n\t\t// }\n\t\t// return index;\n\t}\n\tget_output_index(output_index_or_name: number | string): number {\n\t\tif (output_index_or_name != null) {\n\t\t\tif (lodash_isString(output_index_or_name)) {\n\t\t\t\tif (this.has_named_outputs) {\n\t\t\t\t\treturn this.get_named_output_index(output_index_or_name);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn(`node ${this.node.full_path()} has no named outputs`);\n\t\t\t\t\treturn -1;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn output_index_or_name;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tnamed_output_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined {\n\t\tif (this._named_output_connection_points) {\n\t\t\tfor (let connection_point of this._named_output_connection_points) {\n\t\t\t\tif (connection_point.name == name) {\n\t\t\t\t\treturn connection_point;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_named_output_connection_points(connection_points: BaseNamedConnectionPointType[]) {\n\t\tthis._has_named_outputs = true;\n\t\tthis._named_output_connection_points = connection_points;\n\t\tif (this.node.scene) {\n\t\t\tthis.node.set_dirty(this.node);\n\t\t}\n\t\tthis.node.emit(NodeEvent.NAMED_OUTPUTS_UPDATED);\n\t}\n\tused_output_names(): string[] {\n\t\tif (this.node.io.connections) {\n\t\t\tconst output_indices = lodash_uniq(\n\t\t\t\tthis.node.io.connections\n\t\t\t\t\t.output_connections()\n\t\t\t\t\t.map((connection) => (connection ? connection.output_index : null))\n\t\t\t);\n\t\t\tconst used_output_indices: number[] = [];\n\t\t\toutput_indices.forEach((index) => {\n\t\t\t\tif (lodash_isNumber(index)) {\n\t\t\t\t\tused_output_indices.push(index);\n\t\t\t\t}\n\t\t\t});\n\t\t\tconst used_output_names: string[] = used_output_indices.map((index) => {\n\t\t\t\treturn this.named_output_connection_points[index].name;\n\t\t\t});\n\t\t\treturn used_output_names;\n\t\t} else {\n\t\t\treturn [];\n\t\t}\n\t}\n}\n","import {NodeParamsConfig} from './ParamsConfig';\n// import {ParamValuesTypeMap} from './ParamsController';\n// import {ParamType} from 'src/engine/poly/ParamType';\n\n// function getProperty<T, K extends keyof T>(o: T, propertyName: K): T[K] {\n// \treturn o[propertyName]; // o[propertyName] is of type T[K]\n// }\n\n// let t: getProperty(ParamConfig, 'type')\n// function prop<T, K extends keyof T>(obj: T, key: K) {\n// \treturn typeof obj[key];\n// }\n// type test = Pick<ParamConfig<ParamType.FLOAT>, 'default_value'>;\n\nexport type ParamsAccessorType<T extends NodeParamsConfig> = {\n\treadonly [P in keyof T]: T[P]['param_class'];\n};\n\nexport class ParamsAccessor<T extends NodeParamsConfig> {\n\tconstructor() {\n\t\t// console.log('accessor', this);\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ManagerContainer extends TypedContainer<ContainableMap['MANAGER']> {\n\tset_content(content: ContainableMap['MANAGER']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport lodash_clone from 'lodash/clone';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {PerformanceNode} from './PerformanceNode';\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\n\nexport class CorePerformance {\n\tprivate _started: boolean = false;\n\t_start_time: number | null = 0;\n\t_previous_timestamp: number = 0;\n\t_nodes_cook_data: Dictionary<PerformanceNode> = {};\n\t_durations_by_name: Dictionary<number> = {};\n\t_durations_count_by_name: Dictionary<number> = {};\n\t// _performance_id: number;\n\n\t// constructor(){\n\t// \tconsole.log(\"creating perf\")\n\t// \tthis._performance_id = Math.random()\n\t// }\n\n\tprofile(name: string, method: (args?: any) => any) {\n\t\tconst start_time = performance.now();\n\t\tmethod();\n\t\tconst total_time = performance.now() - start_time;\n\t\tconsole.log(`${name}: ${total_time}`);\n\t}\n\n\tstart() {\n\t\tif (!this._started) {\n\t\t\tthis.reset();\n\t\t\tthis._started = true;\n\t\t\tthis._start_time = performance.now();\n\t\t\tthis._nodes_cook_data = {};\n\t\t\tthis._previous_timestamp = this._start_time;\n\t\t}\n\t}\n\t// else\n\t// \tthrow \"performance already started\"\n\tstop() {\n\t\tthis.reset();\n\t}\n\treset() {\n\t\tthis._started = false;\n\t\tthis._start_time = null;\n\t\tthis._durations_by_name = {};\n\t\tthis._durations_count_by_name = {};\n\t\tthis._nodes_cook_data = {};\n\t}\n\n\tget started(): boolean {\n\t\treturn this._started;\n\t}\n\n\trecord_node_cook_data(node: BaseNodeType) {\n\t\tconst id = node.graph_node_id;\n\t\tif (this._nodes_cook_data[id] == null) {\n\t\t\tthis._nodes_cook_data[id] = new PerformanceNode(node);\n\t\t}\n\t\tthis._nodes_cook_data[id].update_cook_data();\n\t}\n\n\trecord(name: string) {\n\t\tif (!this.started) {\n\t\t\tthis.start();\n\t\t}\n\n\t\tconst current_timestamp = performance.now();\n\n\t\tif (this._durations_by_name[name] == null) {\n\t\t\tthis._durations_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_by_name[name] += current_timestamp - this._previous_timestamp;\n\t\tif (this._durations_count_by_name[name] == null) {\n\t\t\tthis._durations_count_by_name[name] = 0;\n\t\t}\n\t\tthis._durations_count_by_name[name] += 1;\n\n\t\treturn (this._previous_timestamp = current_timestamp);\n\t}\n\n\tprint() {\n\t\tthis.print_node_cook_data();\n\t\tthis.print_recordings();\n\t}\n\n\tprint_node_cook_data() {\n\t\tlet performance_nodes = Object.values(this._nodes_cook_data);\n\t\tperformance_nodes = lodash_sortBy(performance_nodes, (performance_node) => -performance_node.cook_time_total);\n\n\t\tconst print_objects = performance_nodes.map((performance_node) => performance_node.print_object());\n\n\t\tconsole.log('--------------- NODES COOK TIME -----------');\n\n\t\tconst table_entries = [];\n\t\tconst sorted_print_objects = lodash_sortBy(print_objects, (print_object) => -print_object['cook_time_total']);\n\t\tfor (let print_object of sorted_print_objects) {\n\t\t\ttable_entries.push(print_object);\n\t\t}\n\n\t\tconsole.table(table_entries);\n\n\t\treturn print_objects;\n\t}\n\n\tprint_recordings() {\n\t\t// const start_time = this._start_time\n\t\tconst durations_by_name = lodash_clone(this._durations_by_name);\n\t\tconst durations_count_by_name = lodash_clone(this._durations_count_by_name);\n\t\t//this.reset()\n\n\t\tconst durations = [];\n\t\t//durations_by_name = {}\n\t\tconst names_by_duration: Dictionary<string[]> = {};\n\n\t\tfor (let name of Object.keys(durations_by_name)) {\n\t\t\tconst duration = durations_by_name[name];\n\n\t\t\t//durations_by_name[name] = duration\n\t\t\tdurations.push(duration);\n\t\t\tif (names_by_duration[duration] == null) {\n\t\t\t\tnames_by_duration[duration] = [];\n\t\t\t}\n\t\t\tnames_by_duration[duration].push(name);\n\t\t}\n\n\t\tdurations.sort((a, b) => a - b);\n\t\tconst sorted_durations = lodash_uniq(durations);\n\n\t\tconsole.log('--------------- PERF RECORDINGS -----------');\n\t\t//console.log(\"sorted_durations\", sorted_durations)\n\t\t// let previous_duration = start_time\n\t\tconst table_entries = [];\n\t\tfor (let duration of sorted_durations) {\n\t\t\tconst names = names_by_duration[duration];\n\t\t\tfor (let name of names) {\n\t\t\t\tconst count = durations_count_by_name[name];\n\t\t\t\tconst duration_per_iteration = duration / count;\n\n\t\t\t\tconst entry = {duration, name, count, duration_per_iteration};\n\t\t\t\ttable_entries.push(entry);\n\t\t\t}\n\n\t\t\t// previous_duration = duration\n\t\t}\n\n\t\tconsole.table(table_entries);\n\t\treturn table_entries;\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\n\nexport class PerformanceNode {\n\t_cooks_count: number = 0;\n\t_cook_time_total: number = 0;\n\t_cook_time_total_with_inputs: number = 0;\n\t_cook_time_total_params: number = 0;\n\tconstructor(private _node: BaseNodeType) {}\n\n\tupdate_cook_data(): void {\n\t\tthis._cooks_count += 1;\n\t\tthis._cook_time_total += this._node.cook_controller.cook_time;\n\t\tthis._cook_time_total_with_inputs += this._node.cook_controller.cook_time_with_inputs;\n\t\tthis._cook_time_total_params += this._node.cook_controller.cook_time_params;\n\t}\n\n\tget cook_time_total(): number {\n\t\treturn this._cook_time_total;\n\t}\n\tget cook_time_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tget cook_time_total_with_inputs(): number {\n\t\treturn this._cook_time_total_with_inputs;\n\t}\n\tget cook_time_total_with_inputs_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_with_inputs / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cook_time_total_params(): number {\n\t\treturn this._cook_time_total_params;\n\t}\n\tget cook_time_total_params_per_iteration(): number {\n\t\tif (this._cooks_count > 0) {\n\t\t\treturn this._cook_time_total_params / this._cooks_count;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\n\tget cooks_count(): number {\n\t\treturn this._cooks_count;\n\t}\n\n\tprint_object() {\n\t\treturn {\n\t\t\tfull_path: this._node.full_path(),\n\t\t\tcooks_count: this.cooks_count,\n\t\t\tcook_time_total: this.cook_time_total,\n\t\t\tcook_time_per_iteration: this.cook_time_per_iteration,\n\t\t\tcook_time_total_with_inputs: this.cook_time_total_with_inputs,\n\t\t\tcook_time_total_with_inputs_per_iteration: this.cook_time_total_with_inputs_per_iteration,\n\t\t\tcook_time_total_params: this.cook_time_total_params,\n\t\t\tcook_time_total_params_per_iteration: this.cook_time_total_params_per_iteration,\n\t\t};\n\t}\n}\n","// import {SceneContext} from 'src/core/context/Scene';\nimport {PolyScene} from '../PolyScene';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {SceneEvent} from 'src/engine/poly/SceneEvent';\n// import {BaseNode} from 'src/engine/nodes/_Base'\n\ntype FrameRange = [number, number];\n\nexport class TimeController {\n\tprotected self: PolyScene = (<unknown>this) as PolyScene;\n\tprivate _frame: number = 1;\n\tprivate _graph_node: CoreGraphNode;\n\tprivate _frame_range: FrameRange = [1, 600];\n\tprivate _frame_range_locked: [boolean, boolean] = [true, true];\n\tprivate _playing: boolean = false;\n\tprivate _fps: number = 60;\n\tprivate _frame_interval: number = 1000 / 60;\n\tprivate _next_frame_bound = this.play_next_frame.bind(this);\n\n\tconstructor(private scene: PolyScene) {\n\t\tthis._graph_node = new CoreGraphNode(scene, 'time controller');\n\t\t// this._graph_node.set_scene(this.scene);\n\t}\n\tget graph_node() {\n\t\treturn this._graph_node;\n\t}\n\n\t// init() {\n\t// \tthis._context = new SceneContext();\n\t// \tthis._context.set_scene(this.scene);\n\n\t// \tthis.set_frame_range(1, 240); //100 - 288*100-100\n\t// \tthis.set_fps(60);\n\t// }\n\t// context() {\n\t// \treturn this._context;\n\t// }\n\tget fps(): number {\n\t\treturn this._fps;\n\t}\n\tget frame(): number {\n\t\treturn this._frame;\n\t}\n\tget time(): number {\n\t\treturn this._frame / this._fps;\n\t}\n\tget frame_range(): FrameRange {\n\t\treturn this._frame_range;\n\t}\n\tget frame_range_locked(): [boolean, boolean] {\n\t\treturn this._frame_range_locked;\n\t}\n\tset_frame_range(start_frame: number, end_frame: number) {\n\t\tthis._frame_range[0] = Math.floor(start_frame);\n\t\tthis._frame_range[1] = Math.floor(end_frame);\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_frame_range_locked(start_locked: boolean, end_locked: boolean) {\n\t\tthis._frame_range_locked[0] = start_locked;\n\t\tthis._frame_range_locked[1] = end_locked;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\tset_fps(fps: number) {\n\t\tthis._fps = Math.floor(fps);\n\t\tthis._frame_interval = 1000 / this._fps;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_RANGE_UPDATED);\n\t}\n\n\tset_frame(frame: number) {\n\t\tframe = this._ensure_frame_within_bounds(frame);\n\t\tif (frame != this.frame) {\n\t\t\tthis._frame = frame;\n\t\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.FRAME_UPDATED);\n\t\t\tthis.scene.uniforms_controller.update_frame_dependent_uniform_owners();\n\n\t\t\t// we block updates here, so that dependent nodes only cook once\n\t\t\tthis.scene.cooker.block();\n\t\t\tthis.graph_node.set_successors_dirty();\n\t\t\tthis.scene.cooker.unblock();\n\t\t}\n\t}\n\tincrement_frame() {\n\t\t// let frame = this._context.frame() + 1;\n\t\t// frame = this._ensure_frame_within_bounds(frame);\n\t\tthis.set_frame(this.frame + 1);\n\t}\n\tdecrement_frame() {\n\t\tthis.set_frame(this.frame - 1);\n\t\t// let frame = this._context.frame() - 1;\n\t\t// frame = this._ensure_frame_within_bounds(frame);\n\t\t// this.set_frame(frame);\n\t}\n\tset_first_frame() {\n\t\tthis.set_frame(this.frame_range[0]);\n\t}\n\t_ensure_frame_within_bounds(frame: number): number {\n\t\tif (this._frame_range_locked[0] && frame < this._frame_range[0]) {\n\t\t\treturn this._frame_range[1];\n\t\t}\n\t\tif (this._frame_range_locked[1] && frame > this._frame_range[1]) {\n\t\t\treturn this._frame_range[0];\n\t\t}\n\t\treturn frame;\n\t}\n\tget playing() {\n\t\treturn this._playing === true;\n\t}\n\tpause() {\n\t\tthis._playing = false;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t}\n\tplay() {\n\t\tif (this._playing !== true) {\n\t\t\tsetTimeout(this.play_next_frame.bind(this), this._frame_interval);\n\t\t}\n\t\tthis._playing = true;\n\t\tthis.scene.events_controller.dispatch(this._graph_node, SceneEvent.PLAY_STATE_UPDATED);\n\t}\n\ttoggle_play_pause() {\n\t\tif (this.playing) {\n\t\t\tthis.pause();\n\t\t} else {\n\t\t\tthis.play();\n\t\t}\n\t}\n\n\t// private _prev_t: number = 0;\n\tplay_next_frame() {\n\t\t// const cur_t = performance.now();\n\t\t// console.log(cur_t - this._prev_t, cur_t, this._frame_interval);\n\t\t// this._prev_t = cur_t;\n\t\t//current_time = performance.now()\n\t\t//if !@_last_time_frame_incremented? || ( (current_time - @_last_time_frame_incremented) > 40 )\n\t\tif (this.playing) {\n\t\t\t//@_last_time_frame_incremented = current_time\n\t\t\tif (!this.scene.root.are_children_cooking()) {\n\t\t\t\tthis.increment_frame();\n\t\t\t}\n\n\t\t\tsetTimeout(this._next_frame_bound, this._frame_interval);\n\t\t}\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {NodeSerializer} from 'src/engine/nodes/utils/Serializer';\n\nexport class PolySceneSerializer {\n\tconstructor(private scene: PolyScene) {}\n\n\tto_json(include_node_param_components: boolean = false) {\n\t\tconst nodes_by_graph_node_id: Dictionary<object> = {};\n\t\tconst params_by_graph_node_id: Dictionary<object> = {};\n\n\t\tfor (let node of this.scene.nodes_controller.all_nodes()) {\n\t\t\tconst node_serializer = new NodeSerializer(node);\n\t\t\tnodes_by_graph_node_id[node.graph_node_id] = node_serializer.to_json(include_node_param_components);\n\n\t\t\tconst params = node.params.all; //lodash_compact(lodash_concat( lodash_values(node.params()), lodash_values(node.spare_params()) ));\n\t\t\tfor (let param of params) {\n\t\t\t\tparams_by_graph_node_id[param.graph_node_id] = param.to_json();\n\t\t\t}\n\t\t}\n\n\t\treturn {\n\t\t\tnodes_by_graph_node_id,\n\t\t\tparams_by_graph_node_id,\n\t\t};\n\t}\n}\n","import {PolyScene} from '../PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n\ntype IUniforms = Dictionary<IUniform>;\nexport interface IUniformsWithFrame extends IUniforms {\n\tframe: IUniform;\n}\nexport interface IUniformsWithResolution extends IUniforms {\n\tresolution: {\n\t\tvalue: Vector2Like;\n\t};\n}\n\nexport class UniformsController {\n\tconstructor(private scene: PolyScene) {}\n\n\tprivate _frame_dependent_uniform_owners: Dictionary<IUniformsWithFrame> = {}; //new Map()\n\tprivate _frame_dependent_uniform_owners_ids: string[] | null = null;\n\n\tprivate _resolution: Vector2 = new Vector2(1, 1);\n\tprivate _resolution_dependent_uniform_owners: Dictionary<IUniformsWithResolution> = {};\n\tprivate _resolution_dependent_uniform_owners_ids: string[] = [];\n\n\t// frame\n\tadd_frame_dependent_uniform_owner(id: string, uniforms: IUniformsWithFrame) {\n\t\tthis._frame_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_frame_dependent_uniform_owners_ids();\n\t}\n\tremove_frame_dependent_uniform_owner(id: string) {\n\t\tdelete this._frame_dependent_uniform_owners[id];\n\t\tthis._update_frame_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_frame_dependent_uniform_owners_ids() {\n\t\tthis._frame_dependent_uniform_owners_ids = Object.keys(this._frame_dependent_uniform_owners);\n\t}\n\tpublic update_frame_dependent_uniform_owners() {\n\t\tconst frame = this.scene.frame;\n\t\tif (this._frame_dependent_uniform_owners_ids) {\n\t\t\tfor (let id of this._frame_dependent_uniform_owners_ids) {\n\t\t\t\tconst uniforms = this._frame_dependent_uniform_owners[id];\n\t\t\t\tuniforms.frame.value = frame;\n\t\t\t}\n\t\t}\n\t}\n\n\t// resolution\n\tadd_resolution_dependent_uniform_owner(id: string, uniforms: IUniformsWithResolution) {\n\t\tthis._resolution_dependent_uniform_owners[id] = uniforms;\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t\tif (this._resolution) {\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tremove_resolution_dependent_uniform_owner(id: string) {\n\t\tdelete this._resolution_dependent_uniform_owners[id];\n\t\tthis._update_resolution_dependent_uniform_owners_ids();\n\t}\n\tprotected _update_resolution_dependent_uniform_owners_ids() {\n\t\tthis._resolution_dependent_uniform_owners_ids = Object.keys(this._resolution_dependent_uniform_owners);\n\t}\n\tupdate_resolution_dependent_uniform_owners(resolution: Vector2) {\n\t\tthis._resolution.copy(resolution);\n\t\tfor (let id of this._resolution_dependent_uniform_owners_ids) {\n\t\t\tconst uniforms = this._resolution_dependent_uniform_owners[id];\n\t\t\tthis.update_resolution_dependent_uniforms(uniforms);\n\t\t}\n\t}\n\tupdate_resolution_dependent_uniforms(uniforms: IUniformsWithResolution) {\n\t\tuniforms.resolution.value.x = this._resolution.x * window.devicePixelRatio;\n\t\tuniforms.resolution.value.y = this._resolution.y * window.devicePixelRatio;\n\t}\n}\n","import {POLY} from 'src/engine/Poly';\n\n// import {PolyScene} from 'src/engine/scene/PolyScene';\n\nexport class WebGLController {\n\tconstructor() {}\n\n\t_require_webgl2: boolean = false;\n\n\trequire_webgl2() {\n\t\treturn this._require_webgl2;\n\t}\n\tset_require_webgl2() {\n\t\tif (!this._require_webgl2) {\n\t\t\tthis._require_webgl2 = true;\n\t\t\tPOLY.renderers_controller.set_require_webgl2();\n\t\t}\n\t}\n}\n","import {CopRegister} from './Cop';\nimport {EventRegister} from './Event';\nimport {GlRegister} from './Gl';\nimport {MatRegister} from './Mat';\nimport {ObjRegister} from './Obj';\nimport {SopRegister} from './Sop';\n\nimport {POLY} from 'src/engine/Poly';\nCopRegister.run(POLY);\nEventRegister.run(POLY);\nGlRegister.run(POLY);\nMatRegister.run(POLY);\nObjRegister.run(POLY);\nSopRegister.run(POLY);\n","import {CATEGORY_COP} from './Category';\n\n// import {BuilderCopNode} from 'src/engine/nodes/cop/Builder';\nimport {EnvMapCopNode} from 'src/engine/nodes/cop/EnvMap';\nimport {FileCopNode} from 'src/engine/nodes/cop/File';\nimport {NullCopNode} from 'src/engine/nodes/cop/Null';\nimport {SwitchCopNode} from 'src/engine/nodes/cop/Switch';\n\nexport interface CopNodeChildrenMap {\n\t// builder: BuilderCopNode;\n\tenv_map: EnvMapCopNode;\n\tfile: FileCopNode;\n\tnull: NullCopNode;\n\tswitch: SwitchCopNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class CopRegister {\n\tstatic run(poly: Poly) {\n\t\t// poly.register_node(BuilderCopNode, CATEGORY_COP.ADVANCED);\n\t\tpoly.register_node(EnvMapCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(FileCopNode, CATEGORY_COP.INPUT);\n\t\tpoly.register_node(NullCopNode, CATEGORY_COP.MISC);\n\t\tpoly.register_node(SwitchCopNode, CATEGORY_COP.MISC);\n\t}\n}\n","import {Texture} from 'three/src/textures/Texture';\n// import {NearestFilter} from 'three/src/constants';\n// import {LinearEncoding} from 'three/src/constants';\n// import {HalfFloatType} from 'three/src/constants';\n// import {WebGLRenderTargetCube} from 'three/src/renderers/WebGLRenderTargetCube';\nimport {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\n\n// import NodeBase from '../_Base'\n\nimport {TypedCopNode} from './_Base';\n// import {BaseParam} from 'src/Engine/Param/_Base'\n// import {CoreTextureLoader} from 'src/core/loader/Texture';\n// import { CoreScriptLoader } from \"src/Core/Loader/Script\";\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {POLY} from 'src/engine/Poly';\nclass EnvMapCopParamsConfig extends NodeParamsConfig {\n\t// url = ParamConfig.STRING(CoreTextureLoader.PARAM_DEFAULT, {\n\t// \tdesktop_browse: {file_type: 'texture'},\n\t// });\n}\nconst ParamsConfig = new EnvMapCopParamsConfig();\nexport class EnvMapCopNode extends TypedCopNode<EnvMapCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'env_map';\n\t}\n\t// static required_three_imports() {\n\t// \treturn [\n\t// \t\t'loaders/EXRLoader',\n\t// \t\t// 'pmrem/PMREMGenerator',\n\t// \t\t// 'pmrem/PMREMCubeUVPacker',\n\t// \t];\n\t// }\n\n\t// private _texture_loader: CoreTextureLoader\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\n\t\t// for now, if I clone the input, it gets messed up\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\t// create_params() {\n\t// \t// this.add_param(ParamType.STRING, 'url', CoreTextureLoader.PARAM_DEFAULT)\n\t// }\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tconst env_map = await this.convert_texture_to_env_map(texture);\n\t\tif (env_map) {\n\t\t\tthis.set_texture(env_map);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate async convert_texture_to_env_map(texture: Texture): Promise<Texture | undefined> {\n\t\t// texture.minFilter = NearestFilter;\n\t\t// texture.encoding = LinearEncoding;\n\n\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t// if (!renderer) {\n\t\t// \tawait CoreSleep.sleep(1000);\n\t\t// \tconsole.log('waited 1s');\n\t\t// \trenderer = POLY.renderers_controller.first_renderer();\n\t\t// \tconsole.log('renderer', renderer, texture);\n\t\t// }\n\n\t\tif (renderer) {\n\t\t\tconst pmremGenerator = new PMREMGenerator(renderer);\n\t\t\t// console.log('env inout', texture);\n\t\t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\n\t\t\t// pmremGenerator.dispose();\n\t\t\t// texture.dispose();\n\t\t\t// console.log('exrCubeRenderTarget.texture', exrCubeRenderTarget.texture);\n\t\t\tconst env_map_texture = exrCubeRenderTarget.texture;\n\t\t\t// (window.scene as any).background = env_map_texture;\n\t\t\t// (window.scene as any).environment = env_map_texture;\n\t\t\treturn env_map_texture;\n\t\t} else {\n\t\t\tthis.states.error.set('no renderer found to convert the texture to an env map');\n\t\t}\n\t}\n}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class TextureContainer extends TypedContainer<ContainableMap['TEXTURE']> {\n\t// _content: Texture;\n\tset_content(content: ContainableMap['TEXTURE']) {\n\t\tsuper.set_content(content);\n\t}\n\n\t// set_texture(texture: Texture){\n\t// \tif (this._content != null) {\n\t// \t\tthis._content.dispose();\n\t// \t}\n\t// \tthis.set_content(texture);\n\t// }\n\ttexture(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content(): ContainableMap['TEXTURE'] {\n\t\treturn this._content;\n\t}\n\tcore_content_cloned(): ContainableMap['TEXTURE'] | undefined {\n\t\tconsole.log('clone', this._content);\n\t\tconst texture = this._content?.clone();\n\t\tif (texture) {\n\t\t\ttexture.needsUpdate = true;\n\t\t}\n\t\treturn texture;\n\t}\n\n\tobject() {\n\t\treturn this.texture();\n\t}\n\n\tinfos() {\n\t\tif (this._content != null) {\n\t\t\treturn [this._content];\n\t\t}\n\t}\n\tresolution(): [number, number] {\n\t\tif (this._content) {\n\t\t\tif (this._content.image) {\n\t\t\t\treturn [this._content.image.width, this._content.image.height];\n\t\t\t}\n\t\t}\n\t\treturn [-1, -1];\n\t}\n}\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\n// export interface BypassOptions {\n// \thas_bypass_flag?: boolean;\n// }\n\nexport class BypassFlag extends BaseFlag {\n\tprotected _state: boolean = false;\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_BYPASS_UPDATED);\n\t\tthis.node.set_dirty();\n\t}\n}\n\n// export function Bypass<TBase extends Constructor>(Base: TBase) {\n// \treturn class Mixin extends Base {\n// \t\tprotected self: BaseNode = (<unknown>this) as BaseNode;\n// \t\t_has_bypass_flag: boolean = true;\n// \t\t_bypass_flag: boolean = false;\n\n// \t\t_init_bypass_flag(options: BypassOptions = {}) {\n// \t\t\tif (options['has_bypass_flag'] == null) {\n// \t\t\t\toptions['has_bypass_flag'] = true;\n// \t\t\t}\n\n// \t\t\tthis._has_bypass_flag = options['has_bypass_flag'];\n// \t\t\tthis._bypass_flag = false;\n// \t\t}\n\n// \t\thas_bypass_flag(): boolean {\n// \t\t\treturn this._has_bypass_flag;\n// \t\t}\n\n// \t\tis_bypassed(): boolean {\n// \t\t\treturn this._bypass_flag;\n// \t\t}\n\n// \t\tset_bypass_flag(state: boolean) {\n// \t\t\tif (state == null) {\n// \t\t\t\tstate = true;\n// \t\t\t}\n// \t\t\tif (state !== this._bypass_flag) {\n// \t\t\t\tthis._bypass_flag = state;\n// \t\t\t\tthis.self.emit('bypass_flag_update');\n// \t\t\t\tthis.self.set_dirty();\n// \t\t\t\t// this.post_set_bypass_flag()\n// \t\t\t}\n// \t\t}\n\n// \t\t// post_process_container_request_as_bypassed(input_node: BaseNode){}\n// \t\t// post_set_bypass_flag(){}\n\n// \t\ttoggle_bypass_flag() {\n// \t\t\tthis.set_bypass_flag(!this.is_bypassed());\n// \t\t}\n// \t};\n// }\n","import {BaseFlag} from './Base';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\n\nexport class DisplayFlag extends BaseFlag {\n\ton_update() {\n\t\tthis.node.emit(NodeEvent.FLAG_DISPLAY_UPDATED);\n\t\t// this.node.set_dirty();\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {TextureLoader} from 'three/src/loaders/TextureLoader';\nimport {Texture} from 'three/src/textures/Texture';\n// import {RepeatWrapping} from 'three/src/constants';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreScriptLoader} from 'src/core/loader/Script';\n// import {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {UnsignedByteType} from 'three/src/constants';\nimport {CoreWalker} from 'src/core/Walker';\n\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {BaseCopNodeClass} from 'src/engine/nodes/cop/_Base';\nimport {TextureContainer} from 'src/engine/containers/Texture';\nimport {POLY} from 'src/engine/Poly';\n// import {BufferGeometry} from 'three/src/core/BufferGeometry';\n\ninterface VideoSourceTypeByExt {\n\togg: string;\n\togv: string;\n\tmp4: string;\n}\n// interface ImageScriptUrlByExt {\n// \texr: string;\n// \tbasis: string;\n// }\ninterface ThreeLoaderByExt {\n\texr: string;\n\tbasis: string;\n\thdr: string;\n}\n\nenum Extension {\n\tEXR = 'exr',\n\tBASIS = 'basis',\n\tHDR = 'hdr',\n}\n\nexport class CoreTextureLoader {\n\tstatic PARAM_DEFAULT = '/examples/textures/uv.jpg';\n\tstatic PARAM_ENV_DEFAULT = '/examples/textures/piz_compressed.exr';\n\n\tstatic VIDEO_EXTENSIONS = ['mp4', 'webm', 'ogv'];\n\tstatic VIDEO_SOURCE_TYPE_BY_EXT: VideoSourceTypeByExt = {\n\t\togg: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\togv: 'video/ogg; codecs=\"theora, vorbis\"',\n\t\tmp4: 'video/mp4; codecs=\"avc1.42E01E, mp4a.40.2\"',\n\t};\n\t// static SCRIPT_URL_BY_EXT: ImageScriptUrlByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// static THREE_LOADER_BY_EXT: ThreeLoaderByExt = {\n\t// \texr: 'EXRLoader',\n\t// \tbasis: 'BasisTextureLoader',\n\t// };\n\t// @load_texture: (url, callback)->\n\t// \tif url\n\t// \t\tloader = this._texture_loader(url)\n\n\t// \t\tloader.load(\n\t// \t\t\turl,\n\t// \t\t\tcallback,\n\t// \t\t\tnull,\n\t// \t\t\t(error)=>\n\t// \t\t\t\tthis.set_error(\"could not load texture #{url}\")\n\t// \t\t\t\t#this._on_error(error)\n\t// \t\t\t)\n\t// \telse\n\t// \t\tthis.set_error(\"not url given to Mat/Base._load_texture\")\n\t// _on_error: (error)->\n\t// \tconsole.log(\"ERROR\")\n\t// \tconsole.log(error)\n\t// \tthis.set_error_message()\n\n\tconstructor(private _node: BaseNodeType, private _param: BaseParamType) {}\n\n\tasync load_texture_from_url_or_op(url: string): Promise<Texture | VideoTexture | null> {\n\t\tlet texture: Texture | null = null;\n\t\tlet found_node;\n\n\t\tif (url.substring(0, 3) == 'op:') {\n\t\t\tconst node_path = url.substring(3);\n\t\t\tfound_node = CoreWalker.find_node(this._node, node_path);\n\t\t\tif (found_node) {\n\t\t\t\tif (found_node instanceof BaseCopNodeClass) {\n\t\t\t\t\tconst container: TextureContainer = await found_node.request_container();\n\t\t\t\t\ttexture = container.texture();\n\t\t\t\t} else {\n\t\t\t\t\tthis._node.states.error.set(`found node is not a texture node`);\n\t\t\t\t}\n\n\t\t\t\t// this._assign_texture(attrib, texture)\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`no node found in path '${node_path}'`);\n\t\t\t}\n\t\t} else {\n\t\t\ttexture = await this.load_url(url);\n\t\t\tif (texture) {\n\t\t\t\t// param.mark_as_referencing_asset(url)\n\t\t\t\tif (this._param.options.texture_as_env()) {\n\t\t\t\t\t// texture = await CoreTextureLoader.set_texture_for_env(texture, this._node);\n\t\t\t\t} else {\n\t\t\t\t\ttexture = CoreTextureLoader.set_texture_for_mapping(texture);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis._node.states.error.set(`could not load texture ${url}`);\n\t\t\t}\n\t\t}\n\n\t\t// NOTE: if this._param gets its value from an expression like `ch('/CONTROL/photo_url')`\n\t\t// then found_node will be null, so the graph should not be changed\n\t\tif (found_node && this._param.graph_predecessors()[0] != found_node) {\n\t\t\tthis._param.graph_disconnect_predecessors();\n\t\t\tthis._param.add_graph_input(found_node);\n\t\t}\n\n\t\t// this._assign_texture(attrib, texture)\n\t\treturn texture;\n\t}\n\n\tasync load_url(url: string): Promise<Texture> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\t// url = this._resolve_url(url)\n\t\t\tconst ext = CoreTextureLoader._ext(url);\n\n\t\t\tif (CoreTextureLoader.VIDEO_EXTENSIONS.includes(ext)) {\n\t\t\t\tconst texture: VideoTexture = await this._load_as_video(url);\n\t\t\t\treturn texture;\n\t\t\t} else {\n\t\t\t\tthis.loader_for_ext(ext).then((loader) => {\n\t\t\t\t\tloader.load(url, resolve, undefined, (error: any) => {\n\t\t\t\t\t\tconsole.warn('error', error);\n\t\t\t\t\t\treject();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\t\t});\n\t}\n\n\tasync loader_for_ext(ext: string) {\n\t\tconst ext_lowercase = ext.toLowerCase() as keyof ThreeLoaderByExt;\n\t\t// const script_name = CoreTextureLoader.SCRIPT_URL_BY_EXT[ext_lowercase];\n\t\t// var loader;\n\n\t\tswitch (ext_lowercase) {\n\t\t\tcase Extension.EXR: {\n\t\t\t\tconst {EXRLoader} = await import('modules/three/examples/jsm/loaders/EXRLoader');\n\t\t\t\treturn new EXRLoader();\n\t\t\t}\n\t\t\tcase Extension.HDR: {\n\t\t\t\tconst {RGBELoader} = await import('modules/three/examples/jsm/loaders/RGBELoader');\n\t\t\t\tconst loader = new RGBELoader();\n\t\t\t\tloader.setDataType(UnsignedByteType); // FloatType,HalfFloatType\n\t\t\t\t// loader.setPath('/examples/textures/equirectangular/');\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t\tcase Extension.BASIS: {\n\t\t\t\tconst {BasisTextureLoader} = await import('modules/three/examples/jsm/loaders/BasisTextureLoader');\n\t\t\t\tconst loader = new BasisTextureLoader();\n\t\t\t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t\t\tconst renderer = await POLY.renderers_controller.wait_for_renderer();\n\t\t\t\tif (renderer) {\n\t\t\t\t\tloader.detectSupport(renderer);\n\t\t\t\t} else {\n\t\t\t\t\tconsole.warn('texture loader found no renderer for basis texture loader');\n\t\t\t\t}\n\t\t\t\treturn loader;\n\t\t\t}\n\t\t}\n\n\t\t// if (script_name) {\n\t\t// const imported_classes = await CoreScriptLoader.load_module_three_loader(script_name)\n\t\t// const imported_classes = await CoreScriptLoader.three_module(`loaders/${script_name}`);\n\t\t// const imported_classes = await import(`modules/three/examples/jsm/loaders/${script_name}`);\n\t\t// const loader_class_name = CoreTextureLoader.THREE_LOADER_BY_EXT[ext_lowercase];\n\t\t// const loader_class = imported_classes[loader_class_name];\n\t\t// if (loader_class) {\n\t\t// \tloader = new loader_class();\n\t\t// \tif (ext == 'basis') {\n\t\t// \t\tloader.setTranscoderPath('/three/js/libs/basis/');\n\t\t// \t\tconst renderer = POLY.renderers_controller.first_renderer();\n\t\t// \t\tloader.detectSupport(renderer);\n\t\t// \t}\n\t\t// }\n\t\t// }\n\t\treturn new TextureLoader();\n\n\t\t// const constructor = (() => { switch (ext) {\n\t\t// \tcase 'exr': return EXRLoader;\n\t\t// \tdefault: return TextureLoader;\n\t\t// } })();\n\t\t// return new constructor();\n\t}\n\n\t_load_as_video(url: string): Promise<VideoTexture> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst video = document.createElement('video');\n\t\t\t// document.body.appendChild(video)\n\t\t\t// video.id = 'video'\n\t\t\t// console.log(\"video\", video)\n\t\t\tvideo.setAttribute('crossOrigin', 'anonymous');\n\t\t\tvideo.setAttribute('autoplay', `${true}`); // to ensure it loads\n\t\t\tvideo.setAttribute('loop', `${true}`);\n\n\t\t\t// wait for onloadedmetadata to ensure that we have a duration\n\t\t\tvideo.onloadedmetadata = function() {\n\t\t\t\tvideo.pause();\n\t\t\t\tconst texture = new VideoTexture(video);\n\t\t\t\tresolve(texture);\n\t\t\t};\n\t\t\t// video.setAttribute('controls', true)\n\t\t\t// video.style=\"display:none\"\n\t\t\tconst source = document.createElement('source');\n\t\t\tconst ext = CoreTextureLoader._ext(url) as keyof VideoSourceTypeByExt;\n\t\t\tlet type: string = CoreTextureLoader.VIDEO_SOURCE_TYPE_BY_EXT[ext];\n\t\t\ttype = type || CoreTextureLoader._default_video_source_type(url);\n\t\t\tsource.setAttribute('type', type);\n\t\t\tsource.setAttribute('src', url);\n\n\t\t\tvideo.appendChild(source);\n\t\t});\n\t}\n\tstatic _default_video_source_type(url: string) {\n\t\tconst ext = this._ext(url);\n\t\treturn `video/${ext}`;\n\t}\n\n\tstatic pixel_data(texture: Texture) {\n\t\tconst img = texture.image;\n\t\tconst canvas = document.createElement('canvas');\n\t\tcanvas.width = img.width;\n\t\tcanvas.height = img.height;\n\t\tconst context = canvas.getContext('2d');\n\t\tif (context) {\n\t\t\tcontext.drawImage(img, 0, 0, img.width, img.height);\n\t\t\treturn context.getImageData(0, 0, img.width, img.height);\n\t\t}\n\t}\n\n\t// TODO: typescript: check what type the pixel_data is\n\t// static pixel_data_to_attribute(pixel_data: Pixel, geometry: BufferGeometry, attrib_name_with_component:string, convert_method: (x:number, y:number, z:number, w:number)=>number) {\n\t// \tconst {data} = pixel_data;\n\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t// \t// TODO: add error if no uvs\n\t// \tconst values = [];\n\t// \tconst points = geometry_wrapper.points();\n\t// \tfor (let point of points) {\n\t// \t\tconst uv = point.attrib_value('uv');\n\t// \t\tconst x = Math.floor((pixel_data.width - 1) * uv.x);\n\t// \t\tconst y = Math.floor((pixel_data.height - 1) * (1 - uv.y));\n\t// \t\tconst i = y * pixel_data.width + x;\n\t// \t\t// const val = data[4*i] / 255.0;\n\t// \t\tif (convert_method) {\n\t// \t\t\tconst val = convert_method(data[4 * i + 0], data[4 * i + 1], data[4 * i + 2], data[4 * i + 3]);\n\t// \t\t\tvalues.push(val);\n\t// \t\t} else {\n\t// \t\t\tvalues.push([data[4 * i + 0], data[4 * i + 1], data[4 * i + 2]]);\n\t// \t\t}\n\t// \t}\n\n\t// \tconst attrib_name_elements = attrib_name_with_component.split('.');\n\t// \tlet attrib_name = attrib_name_elements[0];\n\t// \tlet component_offset = null;\n\t// \tif (attrib_name_elements.length > 1) {\n\t// \t\tconst component = attrib_name_elements[1] as keyof Vector4Like\n\t// \t\tcomponent_offset = {x: 0, y: 1, z: 2, w: 3}[component];\n\t// \t}\n\n\t// \tlet attrib = geometry.attributes[attrib_name];\n\t// \tif (attrib) {\n\t// \t\tconst array = attrib.array;\n\t// \t\tlet index = 0;\n\t// \t\tlet is_array = null;\n\t// \t\tfor (let value of values) {\n\t// \t\t\tif (is_array || lodash_isArray(value)) {\n\t// \t\t\t\tis_array = true;\n\t// \t\t\t\tlet component_index = 0;\n\t// \t\t\t\tfor (let value_c of value) {\n\t// \t\t\t\t\tarray[attrib.itemSize * index + component_index] = value_c;\n\t// \t\t\t\t\tcomponent_index++;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tarray[attrib.itemSize * index + component_offset] = value;\n\t// \t\t\t}\n\t// \t\t\tindex++;\n\t// \t\t}\n\t// \t} else {\n\t// \t\tattrib = geometry.setAttribute(attrib_name, new Float32BufferAttribute(values, 1));\n\t// \t}\n\t// \tattrib.needsUpdate = true;\n\t// }\n\n\tstatic _ext(url: string) {\n\t\tconst elements = url.split('.');\n\t\treturn elements[elements.length - 1].toLowerCase();\n\t}\n\t// static private _resolve_url(url: string):string{\n\t// \tif(url[0] == '/'){\n\t// \t\tconst root_url = POLY.env_is_production() ? 'https://polygonjs.com' : 'http://localhost:5000'\n\t// \t\turl = `${root_url}${url}`\n\t// \t}\n\t// \treturn url\n\t// }\n\n\tstatic set_texture_for_mapping(texture: Texture) {\n\t\t// let val = texture['wrapS']\n\t\t// Object.defineProperty(texture, 'wrapS', {\n\t\t// \tget () {\n\t\t// \t\treturn val // Simply return the cached value\n\t\t// \t},\n\t\t// \tset (newVal) {\n\t\t// \t\tval = newVal // Save the newVal\n\t\t// \t\tconsole.warn(\"set\", newVal)\n\t\t// \t}\n\t\t// })\n\n\t\t// texture.wrapS = RepeatWrapping\n\t\t// texture.wrapT = RepeatWrapping\n\t\t// console.log(\"set_texture_for_mapping\", RepeatWrapping, texture, texture.wrapS)\n\t\treturn texture;\n\t}\n\n\t// static async set_texture_for_env(texture: Texture, registerer: BaseNode) {\n\t// \tif (registerer._registered_env_map) {\n\t// \t\tPOLY.renderers_controller.deregister_env_map(registerer._registered_env_map);\n\t// \t}\n\t// \tregisterer._registered_env_map = await POLY.renderers_controller.register_env_map(texture);\n\t// \treturn registerer._registered_env_map;\n\t// }\n}\n","import {DataTextureLoader} from 'three/src/loaders/DataTextureLoader';\nimport {FloatType} from 'three/src/constants';\nimport {HalfFloatType} from 'three/src/constants';\nimport {LinearEncoding} from 'three/src/constants';\nimport {LinearFilter} from 'three/src/constants';\nimport {NearestFilter} from 'three/src/constants';\nimport {RGBEEncoding} from 'three/src/constants';\nimport {RGBEFormat} from 'three/src/constants';\nimport {RGBFormat} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Nikos M. / https://github.com/foo123/\n */\n\n\n// https://github.com/mrdoob/three.js/issues/5552\n// http://en.wikipedia.org/wiki/RGBE_image_format\n\nvar RGBELoader = function ( manager ) {\n\n\tDataTextureLoader.call( this, manager );\n\n\tthis.type = UnsignedByteType;\n\n};\n\nRGBELoader.prototype = Object.assign( Object.create( DataTextureLoader.prototype ), {\n\n\tconstructor: RGBELoader,\n\n\t// adapted from http://www.graphics.cornell.edu/~bjw/rgbe.html\n\n\tparse: function ( buffer ) {\n\n\t\tvar\n\t\t\t/* return codes for rgbe routines */\n\t\t\t//RGBE_RETURN_SUCCESS = 0,\n\t\t\tRGBE_RETURN_FAILURE = - 1,\n\n\t\t\t/* default error routine.  change this to change error handling */\n\t\t\trgbe_read_error = 1,\n\t\t\trgbe_write_error = 2,\n\t\t\trgbe_format_error = 3,\n\t\t\trgbe_memory_error = 4,\n\t\t\trgbe_error = function ( rgbe_error_code, msg ) {\n\n\t\t\t\tswitch ( rgbe_error_code ) {\n\n\t\t\t\t\tcase rgbe_read_error: console.error( \"RGBELoader Read Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_write_error: console.error( \"RGBELoader Write Error: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase rgbe_format_error: console.error( \"RGBELoader Bad File Format: \" + ( msg || '' ) );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\tcase rgbe_memory_error: console.error( \"RGBELoader: Error: \" + ( msg || '' ) );\n\n\t\t\t\t}\n\t\t\t\treturn RGBE_RETURN_FAILURE;\n\n\t\t\t},\n\n\t\t\t/* offsets to red, green, and blue components in a data (float) pixel */\n\t\t\t//RGBE_DATA_RED = 0,\n\t\t\t//RGBE_DATA_GREEN = 1,\n\t\t\t//RGBE_DATA_BLUE = 2,\n\n\t\t\t/* number of floats per pixel, use 4 since stored in rgba image format */\n\t\t\t//RGBE_DATA_SIZE = 4,\n\n\t\t\t/* flags indicating which fields in an rgbe_header_info are valid */\n\t\t\tRGBE_VALID_PROGRAMTYPE = 1,\n\t\t\tRGBE_VALID_FORMAT = 2,\n\t\t\tRGBE_VALID_DIMENSIONS = 4,\n\n\t\t\tNEWLINE = \"\\n\",\n\n\t\t\tfgets = function ( buffer, lineLimit, consume ) {\n\n\t\t\t\tlineLimit = ! lineLimit ? 1024 : lineLimit;\n\t\t\t\tvar p = buffer.pos,\n\t\t\t\t\ti = - 1, len = 0, s = '', chunkSize = 128,\n\t\t\t\t\tchunk = String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) )\n\t\t\t\t;\n\t\t\t\twhile ( ( 0 > ( i = chunk.indexOf( NEWLINE ) ) ) && ( len < lineLimit ) && ( p < buffer.byteLength ) ) {\n\n\t\t\t\t\ts += chunk; len += chunk.length;\n\t\t\t\t\tp += chunkSize;\n\t\t\t\t\tchunk += String.fromCharCode.apply( null, new Uint16Array( buffer.subarray( p, p + chunkSize ) ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( - 1 < i ) {\n\n\t\t\t\t\t/*for (i=l-1; i>=0; i--) {\n\t\t\t\t\t\tbyteCode = m.charCodeAt(i);\n\t\t\t\t\t\tif (byteCode > 0x7f && byteCode <= 0x7ff) byteLen++;\n\t\t\t\t\t\telse if (byteCode > 0x7ff && byteCode <= 0xffff) byteLen += 2;\n\t\t\t\t\t\tif (byteCode >= 0xDC00 && byteCode <= 0xDFFF) i--; //trail surrogate\n\t\t\t\t\t}*/\n\t\t\t\t\tif ( false !== consume ) buffer.pos += len + i + 1;\n\t\t\t\t\treturn s + chunk.slice( 0, i );\n\n\t\t\t\t}\n\t\t\t\treturn false;\n\n\t\t\t},\n\n\t\t\t/* minimal header reading.  modify if you want to parse more information */\n\t\t\tRGBE_ReadHeader = function ( buffer ) {\n\n\t\t\t\tvar line, match,\n\n\t\t\t\t\t// regexes to parse header info fields\n\t\t\t\t\tmagic_token_re = /^#\\?(\\S+)$/,\n\t\t\t\t\tgamma_re = /^\\s*GAMMA\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\texposure_re = /^\\s*EXPOSURE\\s*=\\s*(\\d+(\\.\\d+)?)\\s*$/,\n\t\t\t\t\tformat_re = /^\\s*FORMAT=(\\S+)\\s*$/,\n\t\t\t\t\tdimensions_re = /^\\s*\\-Y\\s+(\\d+)\\s+\\+X\\s+(\\d+)\\s*$/,\n\n\t\t\t\t\t// RGBE format header struct\n\t\t\t\t\theader = {\n\n\t\t\t\t\t\tvalid: 0, /* indicate which fields are valid */\n\n\t\t\t\t\t\tstring: '', /* the actual header string */\n\n\t\t\t\t\t\tcomments: '', /* comments found in header */\n\n\t\t\t\t\t\tprogramtype: 'RGBE', /* listed at beginning of file to identify it after \"#?\". defaults to \"RGBE\" */\n\n\t\t\t\t\t\tformat: '', /* RGBE format, default 32-bit_rle_rgbe */\n\n\t\t\t\t\t\tgamma: 1.0, /* image has already been gamma corrected with given gamma. defaults to 1.0 (no correction) */\n\n\t\t\t\t\t\texposure: 1.0, /* a value of 1.0 in an image corresponds to <exposure> watts/steradian/m^2. defaults to 1.0 */\n\n\t\t\t\t\t\twidth: 0, height: 0 /* image dimensions, width/height */\n\n\t\t\t\t\t};\n\n\t\t\t\tif ( buffer.pos >= buffer.byteLength || ! ( line = fgets( buffer ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_read_error, \"no header found\" );\n\n\t\t\t\t}\n\t\t\t\t/* if you want to require the magic token then uncomment the next line */\n\t\t\t\tif ( ! ( match = line.match( magic_token_re ) ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad initial token\" );\n\n\t\t\t\t}\n\t\t\t\theader.valid |= RGBE_VALID_PROGRAMTYPE;\n\t\t\t\theader.programtype = match[ 1 ];\n\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\twhile ( true ) {\n\n\t\t\t\t\tline = fgets( buffer );\n\t\t\t\t\tif ( false === line ) break;\n\t\t\t\t\theader.string += line + \"\\n\";\n\n\t\t\t\t\tif ( '#' === line.charAt( 0 ) ) {\n\n\t\t\t\t\t\theader.comments += line + \"\\n\";\n\t\t\t\t\t\tcontinue; // comment line\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( match = line.match( gamma_re ) ) {\n\n\t\t\t\t\t\theader.gamma = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( exposure_re ) ) {\n\n\t\t\t\t\t\theader.exposure = parseFloat( match[ 1 ], 10 );\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( format_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_FORMAT;\n\t\t\t\t\t\theader.format = match[ 1 ];//'32-bit_rle_rgbe';\n\n\t\t\t\t\t}\n\t\t\t\t\tif ( match = line.match( dimensions_re ) ) {\n\n\t\t\t\t\t\theader.valid |= RGBE_VALID_DIMENSIONS;\n\t\t\t\t\t\theader.height = parseInt( match[ 1 ], 10 );\n\t\t\t\t\t\theader.width = parseInt( match[ 2 ], 10 );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ( header.valid & RGBE_VALID_FORMAT ) && ( header.valid & RGBE_VALID_DIMENSIONS ) ) break;\n\n\t\t\t\t}\n\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_FORMAT ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing format specifier\" );\n\n\t\t\t\t}\n\t\t\t\tif ( ! ( header.valid & RGBE_VALID_DIMENSIONS ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"missing image size specifier\" );\n\n\t\t\t\t}\n\n\t\t\t\treturn header;\n\n\t\t\t},\n\n\t\t\tRGBE_ReadPixels_RLE = function ( buffer, w, h ) {\n\n\t\t\t\tvar data_rgba, offset, pos, count, byteValue,\n\t\t\t\t\tscanline_buffer, ptr, ptr_end, i, l, off, isEncodedRun,\n\t\t\t\t\tscanline_width = w, num_scanlines = h, rgbeStart\n\t\t\t\t;\n\n\t\t\t\tif (\n\t\t\t\t\t// run length encoding is not allowed so read flat\n\t\t\t\t\t( ( scanline_width < 8 ) || ( scanline_width > 0x7fff ) ) ||\n\t\t\t\t\t// this file is not run length encoded\n\t\t\t\t\t( ( 2 !== buffer[ 0 ] ) || ( 2 !== buffer[ 1 ] ) || ( buffer[ 2 ] & 0x80 ) )\n\t\t\t\t) {\n\n\t\t\t\t\t// return the flat buffer\n\t\t\t\t\treturn new Uint8Array( buffer );\n\n\t\t\t\t}\n\n\t\t\t\tif ( scanline_width !== ( ( buffer[ 2 ] << 8 ) | buffer[ 3 ] ) ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"wrong scanline width\" );\n\n\t\t\t\t}\n\n\t\t\t\tdata_rgba = new Uint8Array( 4 * w * h );\n\n\t\t\t\tif ( ! data_rgba || ! data_rgba.length ) {\n\n\t\t\t\t\treturn rgbe_error( rgbe_memory_error, \"unable to allocate buffer space\" );\n\n\t\t\t\t}\n\n\t\t\t\toffset = 0; pos = 0; ptr_end = 4 * scanline_width;\n\t\t\t\trgbeStart = new Uint8Array( 4 );\n\t\t\t\tscanline_buffer = new Uint8Array( ptr_end );\n\n\t\t\t\t// read in each successive scanline\n\t\t\t\twhile ( ( num_scanlines > 0 ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\tif ( pos + 4 > buffer.byteLength ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_read_error );\n\n\t\t\t\t\t}\n\n\t\t\t\t\trgbeStart[ 0 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 1 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 2 ] = buffer[ pos ++ ];\n\t\t\t\t\trgbeStart[ 3 ] = buffer[ pos ++ ];\n\n\t\t\t\t\tif ( ( 2 != rgbeStart[ 0 ] ) || ( 2 != rgbeStart[ 1 ] ) || ( ( ( rgbeStart[ 2 ] << 8 ) | rgbeStart[ 3 ] ) != scanline_width ) ) {\n\n\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad rgbe scanline format\" );\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// read each of the four channels for the scanline into the buffer\n\t\t\t\t\t// first red, then green, then blue, then exponent\n\t\t\t\t\tptr = 0;\n\t\t\t\t\twhile ( ( ptr < ptr_end ) && ( pos < buffer.byteLength ) ) {\n\n\t\t\t\t\t\tcount = buffer[ pos ++ ];\n\t\t\t\t\t\tisEncodedRun = count > 128;\n\t\t\t\t\t\tif ( isEncodedRun ) count -= 128;\n\n\t\t\t\t\t\tif ( ( 0 === count ) || ( ptr + count > ptr_end ) ) {\n\n\t\t\t\t\t\t\treturn rgbe_error( rgbe_format_error, \"bad scanline data\" );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( isEncodedRun ) {\n\n\t\t\t\t\t\t\t// a (encoded) run of the same value\n\t\t\t\t\t\t\tbyteValue = buffer[ pos ++ ];\n\t\t\t\t\t\t\tfor ( i = 0; i < count; i ++ ) {\n\n\t\t\t\t\t\t\t\tscanline_buffer[ ptr ++ ] = byteValue;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t//ptr += count;\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// a literal-run\n\t\t\t\t\t\t\tscanline_buffer.set( buffer.subarray( pos, pos + count ), ptr );\n\t\t\t\t\t\t\tptr += count; pos += count;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\n\t\t\t\t\t// now convert data from buffer into rgba\n\t\t\t\t\t// first red, then green, then blue, then exponent (alpha)\n\t\t\t\t\tl = scanline_width; //scanline_buffer.byteLength;\n\t\t\t\t\tfor ( i = 0; i < l; i ++ ) {\n\n\t\t\t\t\t\toff = 0;\n\t\t\t\t\t\tdata_rgba[ offset ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 1 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 2 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toff += scanline_width; //1;\n\t\t\t\t\t\tdata_rgba[ offset + 3 ] = scanline_buffer[ i + off ];\n\t\t\t\t\t\toffset += 4;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tnum_scanlines --;\n\n\t\t\t\t}\n\n\t\t\t\treturn data_rgba;\n\n\t\t\t};\n\n\t\tvar RGBEByteToRGBFloat = function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\tdestArray[ destOffset + 0 ] = sourceArray[ sourceOffset + 0 ] * scale;\n\t\t\tdestArray[ destOffset + 1 ] = sourceArray[ sourceOffset + 1 ] * scale;\n\t\t\tdestArray[ destOffset + 2 ] = sourceArray[ sourceOffset + 2 ] * scale;\n\n\t\t};\n\n\t\tvar RGBEByteToRGBHalf = ( function () {\n\n\t\t\t// Source: http://gamedev.stackexchange.com/questions/17326/conversion-of-a-number-from-single-precision-floating-point-representation-to-a/17410#17410\n\n\t\t\tvar floatView = new Float32Array( 1 );\n\t\t\tvar int32View = new Int32Array( floatView.buffer );\n\n\t\t\t/* This method is faster than the OpenEXR implementation (very often\n\t\t\t * used, eg. in Ogre), with the additional benefit of rounding, inspired\n\t\t\t * by James Tursa?s half-precision code. */\n\t\t\tfunction toHalf( val ) {\n\n\t\t\t\tfloatView[ 0 ] = val;\n\t\t\t\tvar x = int32View[ 0 ];\n\n\t\t\t\tvar bits = ( x >> 16 ) & 0x8000; /* Get the sign */\n\t\t\t\tvar m = ( x >> 12 ) & 0x07ff; /* Keep one extra bit for rounding */\n\t\t\t\tvar e = ( x >> 23 ) & 0xff; /* Using int is faster here */\n\n\t\t\t\t/* If zero, or denormal, or exponent underflows too much for a denormal\n\t\t\t\t * half, return signed zero. */\n\t\t\t\tif ( e < 103 ) return bits;\n\n\t\t\t\t/* If NaN, return NaN. If Inf or exponent overflow, return Inf. */\n\t\t\t\tif ( e > 142 ) {\n\n\t\t\t\t\tbits |= 0x7c00;\n\t\t\t\t\t/* If exponent was 0xff and one mantissa bit was set, it means NaN,\n\t\t\t\t\t\t\t * not Inf, so make sure we set one mantissa bit too. */\n\t\t\t\t\tbits |= ( ( e == 255 ) ? 0 : 1 ) && ( x & 0x007fffff );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\t/* If exponent underflows but not too much, return a denormal */\n\t\t\t\tif ( e < 113 ) {\n\n\t\t\t\t\tm |= 0x0800;\n\t\t\t\t\t/* Extra rounding may overflow and set mantissa to 0 and exponent\n\t\t\t\t\t * to 1, which is OK. */\n\t\t\t\t\tbits |= ( m >> ( 114 - e ) ) + ( ( m >> ( 113 - e ) ) & 1 );\n\t\t\t\t\treturn bits;\n\n\t\t\t\t}\n\n\t\t\t\tbits |= ( ( e - 112 ) << 10 ) | ( m >> 1 );\n\t\t\t\t/* Extra rounding. An overflow will set mantissa to 0 and increment\n\t\t\t\t * the exponent, which is OK. */\n\t\t\t\tbits += m & 1;\n\t\t\t\treturn bits;\n\n\t\t\t}\n\n\t\t\treturn function ( sourceArray, sourceOffset, destArray, destOffset ) {\n\n\t\t\t\tvar e = sourceArray[ sourceOffset + 3 ];\n\t\t\t\tvar scale = Math.pow( 2.0, e - 128.0 ) / 255.0;\n\n\t\t\t\tdestArray[ destOffset + 0 ] = toHalf( sourceArray[ sourceOffset + 0 ] * scale );\n\t\t\t\tdestArray[ destOffset + 1 ] = toHalf( sourceArray[ sourceOffset + 1 ] * scale );\n\t\t\t\tdestArray[ destOffset + 2 ] = toHalf( sourceArray[ sourceOffset + 2 ] * scale );\n\n\t\t\t};\n\n\t\t} )();\n\n\t\tvar byteArray = new Uint8Array( buffer );\n\t\tbyteArray.pos = 0;\n\t\tvar rgbe_header_info = RGBE_ReadHeader( byteArray );\n\n\t\tif ( RGBE_RETURN_FAILURE !== rgbe_header_info ) {\n\n\t\t\tvar w = rgbe_header_info.width,\n\t\t\t\th = rgbe_header_info.height,\n\t\t\t\timage_rgba_data = RGBE_ReadPixels_RLE( byteArray.subarray( byteArray.pos ), w, h );\n\n\t\t\tif ( RGBE_RETURN_FAILURE !== image_rgba_data ) {\n\n\t\t\t\tswitch ( this.type ) {\n\n\t\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\t\tvar data = image_rgba_data;\n\t\t\t\t\t\tvar format = RGBEFormat; // handled as THREE.RGBAFormat in shaders\n\t\t\t\t\t\tvar type = UnsignedByteType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase FloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar floatArray = new Float32Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBFloat( image_rgba_data, j * 4, floatArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = floatArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = FloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\t\tvar numElements = ( image_rgba_data.length / 4 ) * 3;\n\t\t\t\t\t\tvar halfArray = new Uint16Array( numElements );\n\n\t\t\t\t\t\tfor ( var j = 0; j < numElements; j ++ ) {\n\n\t\t\t\t\t\t\tRGBEByteToRGBHalf( image_rgba_data, j * 4, halfArray, j * 3 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar data = halfArray;\n\t\t\t\t\t\tvar format = RGBFormat;\n\t\t\t\t\t\tvar type = HalfFloatType;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tdefault:\n\n\t\t\t\t\t\tconsole.error( 'THREE.RGBELoader: unsupported type: ', this.type );\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\twidth: w, height: h,\n\t\t\t\t\tdata: data,\n\t\t\t\t\theader: rgbe_header_info.string,\n\t\t\t\t\tgamma: rgbe_header_info.gamma,\n\t\t\t\t\texposure: rgbe_header_info.exposure,\n\t\t\t\t\tformat: format,\n\t\t\t\t\ttype: type\n\t\t\t\t};\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn null;\n\n\t},\n\n\tsetDataType: function ( value ) {\n\n\t\tthis.type = value;\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tfunction onLoadCallback( texture, texData ) {\n\n\t\t\tswitch ( texture.type ) {\n\n\t\t\t\tcase UnsignedByteType:\n\n\t\t\t\t\ttexture.encoding = RGBEEncoding;\n\t\t\t\t\ttexture.minFilter = NearestFilter;\n\t\t\t\t\ttexture.magFilter = NearestFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase FloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase HalfFloatType:\n\n\t\t\t\t\ttexture.encoding = LinearEncoding;\n\t\t\t\t\ttexture.minFilter = LinearFilter;\n\t\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\t\ttexture.flipY = true;\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t\tif ( onLoad ) onLoad( texture, texData );\n\n\t\t}\n\n\t\treturn DataTextureLoader.prototype.load.call( this, url, onLoadCallback, onProgress, onError );\n\n\t}\n\n} );\n\nexport { RGBELoader };\n","import {CompressedTexture} from 'three/src/textures/CompressedTexture';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {LinearFilter} from 'three/src/constants';\nimport {LinearMipmapLinearFilter} from 'three/src/constants';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {RGBA_ASTC_4x4_Format} from 'three/src/constants';\nimport {RGBA_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {RGB_ETC1_Format} from 'three/src/constants';\nimport {RGB_PVRTC_4BPPV1_Format} from 'three/src/constants';\nimport {UnsignedByteType} from 'three/src/constants';\n/**\n * @author Don McCurdy / https://www.donmccurdy.com\n * @author Austin Eng / https://github.com/austinEng\n * @author Shrek Shao / https://github.com/shrekshao\n */\n\n\n/**\n * Loader for Basis Universal GPU Texture Codec.\n *\n * Basis Universal is a \"supercompressed\" GPU texture and texture video\n * compression system that outputs a highly compressed intermediate file format\n * (.basis) that can be quickly transcoded to a wide variety of GPU texture\n * compression formats.\n *\n * This loader parallelizes the transcoding process across a configurable number\n * of web workers, before transferring the transcoded compressed texture back\n * to the main thread.\n */\nvar BasisTextureLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.transcoderPath = '';\n\tthis.transcoderBinary = null;\n\tthis.transcoderPending = null;\n\n\tthis.workerLimit = 4;\n\tthis.workerPool = [];\n\tthis.workerNextTaskID = 1;\n\tthis.workerSourceURL = '';\n\tthis.workerConfig = {\n\t\tformat: null,\n\t\tastcSupported: false,\n\t\tetcSupported: false,\n\t\tdxtSupported: false,\n\t\tpvrtcSupported: false,\n\t};\n\n};\n\nBasisTextureLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: BasisTextureLoader,\n\n\tsetTranscoderPath: function ( path ) {\n\n\t\tthis.transcoderPath = path;\n\n\t\treturn this;\n\n\t},\n\n\tsetWorkerLimit: function ( workerLimit ) {\n\n\t\tthis.workerLimit = workerLimit;\n\n\t\treturn this;\n\n\t},\n\n\tdetectSupport: function ( renderer ) {\n\n\t\tvar config = this.workerConfig;\n\n\t\tconfig.astcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_astc' );\n\t\tconfig.etcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_etc1' );\n\t\tconfig.dxtSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_s3tc' );\n\t\tconfig.pvrtcSupported = !! renderer.extensions.get( 'WEBGL_compressed_texture_pvrtc' )\n\t\t\t|| !! renderer.extensions.get( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );\n\n\t\tif ( config.astcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4;\n\n\t\t} else if ( config.dxtSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFBC3;\n\n\t\t} else if ( config.pvrtcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA;\n\n\t\t} else if ( config.etcSupported ) {\n\n\t\t\tconfig.format = BasisTextureLoader.BASIS_FORMAT.cTFETC1;\n\n\t\t} else {\n\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No suitable compressed texture format found.' );\n\n\t\t}\n\n\t\treturn this;\n\n\t},\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar loader = new FileLoader( this.manager );\n\n\t\tloader.setResponseType( 'arraybuffer' );\n\n\t\tloader.load( url, ( buffer ) => {\n\n\t\t\tthis._createTexture( buffer )\n\t\t\t\t.then( onLoad )\n\t\t\t\t.catch( onError );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\t/**\n\t * @param  {ArrayBuffer} buffer\n\t * @return {Promise<CompressedTexture>}\n\t */\n\t_createTexture: function ( buffer ) {\n\n\t\tvar worker;\n\t\tvar taskID;\n\n\t\tvar taskCost = buffer.byteLength;\n\n\t\tvar texturePending = this._allocateWorker( taskCost )\n\t\t\t.then( ( _worker ) => {\n\n\t\t\t\tworker = _worker;\n\t\t\t\ttaskID = this.workerNextTaskID ++;\n\n\t\t\t\treturn new Promise( ( resolve, reject ) => {\n\n\t\t\t\t\tworker._callbacks[ taskID ] = { resolve, reject };\n\n\t\t\t\t\tworker.postMessage( { type: 'transcode', id: taskID, buffer }, [ buffer ] );\n\n\t\t\t\t} );\n\n\t\t\t} )\n\t\t\t.then( ( message ) => {\n\n\t\t\t\tvar config = this.workerConfig;\n\n\t\t\t\tvar { width, height, mipmaps, format } = message;\n\n\t\t\t\tvar texture;\n\n\t\t\t\tswitch ( format ) {\n\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFASTC_4x4:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_ASTC_4x4_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC1:\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFBC3:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, BasisTextureLoader.DXT_FORMAT_MAP[ config.format ], UnsignedByteType );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFETC1:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_ETC1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGB_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA:\n\t\t\t\t\t\ttexture = new CompressedTexture( mipmaps, width, height, RGBA_PVRTC_4BPPV1_Format );\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: No supported format available.' );\n\n\t\t\t\t}\n\n\t\t\t\ttexture.minFilter = mipmaps.length === 1 ? LinearFilter : LinearMipmapLinearFilter;\n\t\t\t\ttexture.magFilter = LinearFilter;\n\t\t\t\ttexture.generateMipmaps = false;\n\t\t\t\ttexture.needsUpdate = true;\n\n\t\t\t\treturn texture;\n\n\t\t\t} );\n\n\t\ttexturePending\n\t\t\t.finally( () => {\n\n\t\t\t\tif ( worker && taskID ) {\n\n\t\t\t\t\tworker._taskLoad -= taskCost;\n\t\t\t\t\tdelete worker._callbacks[ taskID ];\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\treturn texturePending;\n\n\t},\n\n\t_initTranscoder: function () {\n\n\t\tif ( ! this.transcoderPending ) {\n\n\t\t\t// Load transcoder wrapper.\n\t\t\tvar jsLoader = new FileLoader( this.manager );\n\t\t\tjsLoader.setPath( this.transcoderPath );\n\t\t\tvar jsContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tjsLoader.load( 'basis_transcoder.js', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\t// Load transcoder WASM binary.\n\t\t\tvar binaryLoader = new FileLoader( this.manager );\n\t\t\tbinaryLoader.setPath( this.transcoderPath );\n\t\t\tbinaryLoader.setResponseType( 'arraybuffer' );\n\t\t\tvar binaryContent = new Promise( ( resolve, reject ) => {\n\n\t\t\t\tbinaryLoader.load( 'basis_transcoder.wasm', resolve, undefined, reject );\n\n\t\t\t} );\n\n\t\t\tthis.transcoderPending = Promise.all( [ jsContent, binaryContent ] )\n\t\t\t\t.then( ( [ jsContent, binaryContent ] ) => {\n\n\t\t\t\t\tvar fn = BasisTextureLoader.BasisWorker.toString();\n\n\t\t\t\t\tvar body = [\n\t\t\t\t\t\t'/* basis_transcoder.js */',\n\t\t\t\t\t\tjsContent,\n\t\t\t\t\t\t'/* worker */',\n\t\t\t\t\t\tfn.substring( fn.indexOf( '{' ) + 1, fn.lastIndexOf( '}' ) )\n\t\t\t\t\t].join( '\\n' );\n\n\t\t\t\t\tthis.workerSourceURL = URL.createObjectURL( new Blob( [ body ] ) );\n\t\t\t\t\tthis.transcoderBinary = binaryContent;\n\n\t\t\t\t} );\n\n\t\t}\n\n\t\treturn this.transcoderPending;\n\n\t},\n\n\t_allocateWorker: function ( taskCost ) {\n\n\t\treturn this._initTranscoder().then( () => {\n\n\t\t\tif ( this.workerPool.length < this.workerLimit ) {\n\n\t\t\t\tvar worker = new Worker( this.workerSourceURL );\n\n\t\t\t\tworker._callbacks = {};\n\t\t\t\tworker._taskLoad = 0;\n\n\t\t\t\tworker.postMessage( {\n\t\t\t\t\ttype: 'init',\n\t\t\t\t\tconfig: this.workerConfig,\n\t\t\t\t\ttranscoderBinary: this.transcoderBinary,\n\t\t\t\t} );\n\n\t\t\t\tworker.onmessage = function ( e ) {\n\n\t\t\t\t\tvar message = e.data;\n\n\t\t\t\t\tswitch ( message.type ) {\n\n\t\t\t\t\t\tcase 'transcode':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].resolve( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tcase 'error':\n\t\t\t\t\t\t\tworker._callbacks[ message.id ].reject( message );\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tconsole.error( 'THREE.BasisTextureLoader: Unexpected message, \"' + message.type + '\"' );\n\n\t\t\t\t\t}\n\n\t\t\t\t};\n\n\t\t\t\tthis.workerPool.push( worker );\n\n\t\t\t} else {\n\n\t\t\t\tthis.workerPool.sort( function ( a, b ) {\n\n\t\t\t\t\treturn a._taskLoad > b._taskLoad ? - 1 : 1;\n\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t\tvar worker = this.workerPool[ this.workerPool.length - 1 ];\n\n\t\t\tworker._taskLoad += taskCost;\n\n\t\t\treturn worker;\n\n\t\t} );\n\n\t},\n\n\tdispose: function () {\n\n\t\tfor ( var i = 0; i < this.workerPool.length; i ++ ) {\n\n\t\t\tthis.workerPool[ i ].terminate();\n\n\t\t}\n\n\t\tthis.workerPool.length = 0;\n\n\t\treturn this;\n\n\t}\n\n} );\n\n/* CONSTANTS */\n\nBasisTextureLoader.BASIS_FORMAT = {\n\tcTFETC1: 0,\n\tcTFETC2: 1,\n\tcTFBC1: 2,\n\tcTFBC3: 3,\n\tcTFBC4: 4,\n\tcTFBC5: 5,\n\tcTFBC7_M6_OPAQUE_ONLY: 6,\n\tcTFBC7_M5: 7,\n\tcTFPVRTC1_4_RGB: 8,\n\tcTFPVRTC1_4_RGBA: 9,\n\tcTFASTC_4x4: 10,\n\tcTFATC_RGB: 11,\n\tcTFATC_RGBA_INTERPOLATED_ALPHA: 12,\n\tcTFRGBA32: 13,\n\tcTFRGB565: 14,\n\tcTFBGR565: 15,\n\tcTFRGBA4444: 16,\n};\n\n// DXT formats, from:\n// http://www.khronos.org/registry/webgl/extensions/WEBGL_compressed_texture_s3tc/\nBasisTextureLoader.DXT_FORMAT = {\n\tCOMPRESSED_RGB_S3TC_DXT1_EXT: 0x83F0,\n\tCOMPRESSED_RGBA_S3TC_DXT1_EXT: 0x83F1,\n\tCOMPRESSED_RGBA_S3TC_DXT3_EXT: 0x83F2,\n\tCOMPRESSED_RGBA_S3TC_DXT5_EXT: 0x83F3,\n};\nBasisTextureLoader.DXT_FORMAT_MAP = {};\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC1 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGB_S3TC_DXT1_EXT;\nBasisTextureLoader.DXT_FORMAT_MAP[ BasisTextureLoader.BASIS_FORMAT.cTFBC3 ] =\n\tBasisTextureLoader.DXT_FORMAT.COMPRESSED_RGBA_S3TC_DXT5_EXT;\n\n/* WEB WORKER */\n\nBasisTextureLoader.BasisWorker = function () {\n\n\tvar config;\n\tvar transcoderPending;\n\tvar _BasisFile;\n\n\tonmessage = function ( e ) {\n\n\t\tvar message = e.data;\n\n\t\tswitch ( message.type ) {\n\n\t\t\tcase 'init':\n\t\t\t\tconfig = message.config;\n\t\t\t\tinit( message.transcoderBinary );\n\t\t\t\tbreak;\n\n\t\t\tcase 'transcode':\n\t\t\t\ttranscoderPending.then( () => {\n\n\t\t\t\t\ttry {\n\n\t\t\t\t\t\tvar { width, height, hasAlpha, mipmaps, format } = transcode( message.buffer );\n\n\t\t\t\t\t\tvar buffers = [];\n\n\t\t\t\t\t\tfor ( var i = 0; i < mipmaps.length; ++ i ) {\n\n\t\t\t\t\t\t\tbuffers.push( mipmaps[ i ].data.buffer );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.postMessage( { type: 'transcode', id: message.id, width, height, hasAlpha, mipmaps, format }, buffers );\n\n\t\t\t\t\t} catch ( error ) {\n\n\t\t\t\t\t\tconsole.error( error );\n\n\t\t\t\t\t\tself.postMessage( { type: 'error', id: message.id, error: error.message } );\n\n\t\t\t\t\t}\n\n\t\t\t\t} );\n\t\t\t\tbreak;\n\n\t\t}\n\n\t};\n\n\tfunction init( wasmBinary ) {\n\n\t\tvar BasisModule;\n\t\ttranscoderPending = new Promise( ( resolve ) => {\n\n\t\t\tBasisModule = { wasmBinary, onRuntimeInitialized: resolve };\n\t\t\tBASIS( BasisModule );\n\n\t\t} ).then( () => {\n\n\t\t\tvar { BasisFile, initializeBasis } = BasisModule;\n\n\t\t\t_BasisFile = BasisFile;\n\n\t\t\tinitializeBasis();\n\n\t\t} );\n\n\t}\n\n\tfunction transcode( buffer ) {\n\n\t\tvar basisFile = new _BasisFile( new Uint8Array( buffer ) );\n\n\t\tvar width = basisFile.getImageWidth( 0, 0 );\n\t\tvar height = basisFile.getImageHeight( 0, 0 );\n\t\tvar levels = basisFile.getNumLevels( 0 );\n\t\tvar hasAlpha = basisFile.getHasAlpha();\n\n\t\tfunction cleanup() {\n\n\t\t\tbasisFile.close();\n\t\t\tbasisFile.delete();\n\n\t\t}\n\n\t\tif ( ! hasAlpha ) {\n\n\t\t\tswitch ( config.format ) {\n\n\t\t\t\tcase 9: // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGBA\n\t\t\t\t\tconfig.format = 8; // Hardcoded: BasisTextureLoader.BASIS_FORMAT.cTFPVRTC1_4_RGB;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t\tif ( ! width || ! height || ! levels ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader:  Invalid .basis file' );\n\n\t\t}\n\n\t\tif ( ! basisFile.startTranscoding() ) {\n\n\t\t\tcleanup();\n\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .startTranscoding failed' );\n\n\t\t}\n\n\t\tvar mipmaps = [];\n\n\t\tfor ( var mip = 0; mip < levels; mip ++ ) {\n\n\t\t\tvar mipWidth = basisFile.getImageWidth( 0, mip );\n\t\t\tvar mipHeight = basisFile.getImageHeight( 0, mip );\n\t\t\tvar dst = new Uint8Array( basisFile.getImageTranscodedSizeInBytes( 0, mip, config.format ) );\n\n\t\t\tvar status = basisFile.transcodeImage(\n\t\t\t\tdst,\n\t\t\t\t0,\n\t\t\t\tmip,\n\t\t\t\tconfig.format,\n\t\t\t\t0,\n\t\t\t\thasAlpha\n\t\t\t);\n\n\t\t\tif ( ! status ) {\n\n\t\t\t\tcleanup();\n\t\t\t\tthrow new Error( 'THREE.BasisTextureLoader: .transcodeImage failed.' );\n\n\t\t\t}\n\n\t\t\tmipmaps.push( { data: dst, width: mipWidth, height: mipHeight } );\n\n\t\t}\n\n\t\tcleanup();\n\n\t\treturn { width, height, hasAlpha, mipmaps, format: config.format };\n\n\t}\n\n};\n\nexport { BasisTextureLoader };\n","import {Texture} from 'three/src/textures/Texture';\nimport {TypedCopNode} from './_Base';\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nconst ParamsConfig = new NodeParamsConfig();\nexport class NullCopNode extends TypedCopNode<NodeParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: Texture[]) {\n\t\tconst texture = input_contents[0];\n\t\tthis.set_texture(texture);\n\t}\n}\n","import {TypedCopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass SwitchCopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchCopParamsConfig();\n\nexport class SwitchCopNode extends TypedCopNode<SwitchCopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_texture(container.texture());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import {CATEGORY_EVENT} from './Category';\n\nimport {CameraMapControlsEventNode} from 'src/engine/nodes/event/CameraMapControls';\nimport {CameraOrbitControlsEventNode} from 'src/engine/nodes/event/CameraOrbitControls';\n\nexport interface EventNodeChildrenMap {\n\tcamera_orbit_controls: CameraMapControlsEventNode;\n\tcamera_map_controls: CameraOrbitControlsEventNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class EventRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(CameraMapControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t\tpoly.register_node(CameraOrbitControlsEventNode, CATEGORY_EVENT.CAMERA);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {MapControls} from 'modules/three/examples/jsm/controls/OrbitControls';\nimport {CameraOrbitControlsEventNode} from './CameraOrbitControls';\n\nexport class CameraMapControlsEventNode extends CameraOrbitControlsEventNode {\n\tstatic type() {\n\t\treturn 'camera_map_controls';\n\t}\n\n\tasync create_controls_instance(camera: Camera, element: HTMLElement) {\n\t\t// await CoreScriptLoader.load_module_three_example('controls/OrbitControls')\n\t\t// const constructor_name = 'MapControls'\n\t\t// const constructor = THREE[constructor_name]\n\t\t// const c = this.constructor as typeof CameraMapControlsEventNode;\n\t\t// const {MapControls} = await CoreScriptLoader.module(c.required_imports()[0]);\n\n\t\treturn new MapControls(camera, element);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\n\nimport {TypedEventNode} from './_Base';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\nimport {OrbitControls} from 'modules/three/examples/jsm/controls/OrbitControls';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport interface CameraControls extends OrbitControls {\n\tname?: string;\n\t// this_is_a_control: any;\n\t// name: string;\n}\n\nexport abstract class TypedCameraControlsEventNode<K extends NodeParamsConfig> extends TypedEventNode<K> {\n\t// controls() {\n\t// \treturn this._controls;\n\t// }\n\n\tasync apply_controls(camera: Camera, html_element: HTMLElement) {\n\t\t// I don't think I can just assign the camera at the moment\n\t\t// so the controls may need to be re-created everytime\n\t\t// TODO: the controls should be created (and disposed?) by the viewer\n\t\t//this.dispose_controls()\n\n\t\tconst controls = await this.create_controls_instance(camera, html_element);\n\t\tconst timestamp = performance.now();\n\t\tcontrols.name = `${this.full_path()}:${camera.name}:${timestamp}:${this.controls_id()}`;\n\t\t// console.log(this._controls)\n\t\tawait this.params.eval_all();\n\t\tthis.setup_controls(controls);\n\t\treturn controls;\n\t\t// })\n\t\t// });\n\t}\n\tcontrols_id() {\n\t\treturn JSON.stringify(this.params.all.map((p) => p.value_serialized));\n\t}\n\t//this.cook()\n\n\t// dispose_controls: (controls_instance)->\n\t// \tif controls_instance?\n\t// \t\tcontrols_instance.dispose()\n\n\tabstract setup_controls(controls: CameraControls): void;\n\t//\n\n\tabstract async create_controls_instance(camera: Camera, element: HTMLElement): Promise<CameraControls>;\n\tabstract set_from_camera_node(controls: CameraControls, camera_node: BaseCameraObjNodeType): void;\n}\n\nexport type BaseCameraControlsEventNodeType = TypedCameraControlsEventNode<any>;\n","import {TypedNode} from '../_Base';\nimport {EventContainer} from 'src/engine/containers/Event';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {TypedContainerController} from '../utils/ContainerController';\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nexport class TypedEventNode<K extends NodeParamsConfig> extends TypedNode<'EVENT', BaseEventNodeType, K> {\n\tcontainer_controller: TypedContainerController<EventContainer> = new TypedContainerController<EventContainer>(\n\t\tthis,\n\t\tEventContainer\n\t);\n\tstatic node_context(): NodeContext {\n\t\treturn NodeContext.EVENT;\n\t}\n\n\tprivate _eval_all_params_on_dirty_bound = this._eval_all_params_on_dirty.bind(this);\n\tinitialize_base_node() {\n\t\t// this._init_display_flag({\n\t\t// \thas_display_flag: false\n\t\t// });\n\n\t\tthis.add_post_dirty_hook('_eval_all_params_on_dirty', this._eval_all_params_on_dirty_bound);\n\t}\n\n\t// ensures that event nodes are cooked when scene is loaded\n\t_eval_all_params_on_dirty() {\n\t\tthis.params.eval_all();\n\t}\n}\n\nexport type BaseEventNodeType = TypedEventNode<any>;\nexport class BaseEventNodeClass extends TypedEventNode<any> {}\n","import {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class EventContainer extends TypedContainer<ContainableMap['EVENT']> {\n\tset_content(content: ContainableMap['EVENT']) {\n\t\tsuper.set_content(content);\n\t}\n}\n","import {CATEGORY_GL} from './Category';\n\nimport {AttributeGlNode} from 'src/engine/nodes/gl/Attribute';\nimport {ConstantGlNode} from 'src/engine/nodes/gl/Constant';\nimport {FloatToVec3GlNode} from 'src/engine/nodes/gl/FloatToVec3';\nimport {GlobalsGlNode} from 'src/engine/nodes/gl/Globals';\nimport {OutputGlNode} from 'src/engine/nodes/gl/Output';\nimport {ParamGlNode} from 'src/engine/nodes/gl/Param';\n\nexport interface GlNodeChildrenMap {\n\tattribute: AttributeGlNode;\n\tconstant: ConstantGlNode;\n\tfloat_to_vec3: FloatToVec3GlNode;\n\tglobals: GlobalsGlNode;\n\toutput: OutputGlNode;\n\tparam: ParamGlNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class GlRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AttributeGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ConstantGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(FloatToVec3GlNode, CATEGORY_GL.CONVERSION);\n\t\tpoly.register_node(GlobalsGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(OutputGlNode, CATEGORY_GL.GLOBALS);\n\t\tpoly.register_node(ParamGlNode, CATEGORY_GL.GLOBALS);\n\t}\n}\n","import {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamInitValuesTypeMap} from '../../../params/types/ParamInitValuesTypeMap';\nimport {ParamValue} from '../../../params/types/ParamValue';\n\nimport lodash_isNumber from 'lodash/isNumber';\n// import lodash_isString from 'lodash/isString';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Color} from 'three/src/math/Color';\n\n// import {TypeAssert} from 'src/engine/poly/Assert';\nimport {RampParam} from 'src/engine/params/Ramp';\n// type ConvertMethod<T extends ParamType> = (val: ParamValuesTypeMap[T]) => ParamInitValuesTypeMap[T];\ntype ConvertMethod<T extends ParamType> = (val: ParamValue) => ParamInitValuesTypeMap[T];\ntype ParamValuetoInitValueMapGeneric = {[key in ParamType]: ConvertMethod<key>};\n\n// function convert_boolean(value: ParamValuesTypeMap[ParamType.BOOLEAN]): ParamInitValuesTypeMap[ParamType.BOOLEAN] {\n// \treturn value ? 1 : 0;\n// }\n// function convert_button(value: ParamValuesTypeMap[ParamType.BUTTON]): ParamInitValuesTypeMap[ParamType.BUTTON] {\n// \treturn value;\n// }\n// function convert_color(value: ParamValuesTypeMap[ParamType.COLOR]): ParamInitValuesTypeMap[ParamType.COLOR] {\n// \treturn value.toArray() as Number3;\n// }\n// function convert_float(value: ParamValuesTypeMap[ParamType.FLOAT]): ParamInitValuesTypeMap[ParamType.FLOAT] {\n// \treturn value;\n// }\n// function convert_integer(value: ParamValuesTypeMap[ParamType.INTEGER]): ParamInitValuesTypeMap[ParamType.INTEGER] {\n// \treturn value;\n// }\n// function convert_operator_path(\n// \tvalue: ParamValuesTypeMap[ParamType.OPERATOR_PATH]\n// ): ParamInitValuesTypeMap[ParamType.OPERATOR_PATH] {\n// \treturn value;\n// }\n// function convert_ramp(value: ParamValuesTypeMap[ParamType.RAMP]): ParamInitValuesTypeMap[ParamType.RAMP] {\n// \treturn value;\n// }\n// function convert_separator(\n// \tvalue: ParamValuesTypeMap[ParamType.SEPARATOR]\n// ): ParamInitValuesTypeMap[ParamType.SEPARATOR] {\n// \treturn value;\n// }\n// function convert_string(value: ParamValuesTypeMap[ParamType.STRING]): ParamInitValuesTypeMap[ParamType.STRING] {\n// \treturn value;\n// }\n// function convert_vector2(value: ParamValuesTypeMap[ParamType.VECTOR2]): ParamInitValuesTypeMap[ParamType.VECTOR2] {\n// \treturn value.toArray() as Number2;\n// }\n// function convert_vector3(value: ParamValuesTypeMap[ParamType.VECTOR3]): ParamInitValuesTypeMap[ParamType.VECTOR3] {\n// \treturn value.toArray() as Number3;\n// }\n// function convert_vector4(value: ParamValuesTypeMap[ParamType.VECTOR4]): ParamInitValuesTypeMap[ParamType.VECTOR4] {\n// \treturn value.toArray() as Number4;\n// }\n\nfunction convert_boolean(value: ParamValue): ParamInitValuesTypeMap[ParamType.BOOLEAN] {\n\treturn value ? 1 : 0;\n}\nfunction convert_button(value: ParamValue): ParamInitValuesTypeMap[ParamType.BUTTON] {\n\treturn null;\n}\nfunction convert_color(value: ParamValue): ParamInitValuesTypeMap[ParamType.COLOR] {\n\tif (lodash_isNumber(value)) {\n\t\treturn [value, value, value];\n\t}\n\tif (value instanceof Vector2) {\n\t\tconst v2 = value.toArray() as Number2;\n\t\treturn [v2[0], v2[1], v2[0]];\n\t}\n\tif (value instanceof Vector3) {\n\t\treturn value.toArray() as Number3;\n\t}\n\tif (value instanceof Color) {\n\t\treturn value.toArray() as Number3;\n\t}\n\tif (value instanceof Vector4) {\n\t\tconst v4 = value.toArray() as Number4;\n\t\treturn [v4[0], v4[1], v4[2]];\n\t}\n\treturn [0, 0, 0];\n}\nfunction convert_float(value: ParamValue): ParamInitValuesTypeMap[ParamType.FLOAT] {\n\tif (lodash_isNumber(value)) {\n\t\treturn value;\n\t}\n\tif (value instanceof Vector2 || value instanceof Vector3 || value instanceof Vector4) {\n\t\treturn value.toArray()[0];\n\t}\n\treturn 0;\n}\nfunction convert_folder(value: ParamValue): ParamInitValuesTypeMap[ParamType.FOLDER] {\n\treturn null;\n}\nfunction convert_integer(value: ParamValue): ParamInitValuesTypeMap[ParamType.INTEGER] {\n\tif (lodash_isNumber(value)) {\n\t\treturn Math.floor(value);\n\t}\n\tif (value instanceof Vector2 || value instanceof Vector3 || value instanceof Vector4) {\n\t\treturn Math.floor(value.toArray()[0]);\n\t}\n\treturn 0;\n}\nfunction convert_operator_path(value: ParamValue): ParamInitValuesTypeMap[ParamType.OPERATOR_PATH] {\n\treturn `${value}`;\n}\nfunction convert_ramp(value: ParamValue): ParamInitValuesTypeMap[ParamType.RAMP] {\n\treturn RampParam.DEFAULT_VALUE;\n}\nfunction convert_separator(value: ParamValue): ParamInitValuesTypeMap[ParamType.SEPARATOR] {\n\treturn null;\n}\nfunction convert_string(value: ParamValue): ParamInitValuesTypeMap[ParamType.STRING] {\n\treturn `${value}`;\n}\nfunction convert_vector2(value: ParamValue): ParamInitValuesTypeMap[ParamType.VECTOR2] {\n\tif (lodash_isNumber(value)) {\n\t\treturn [value, value];\n\t}\n\tif (value instanceof Vector2) {\n\t\treturn value.toArray() as Number2;\n\t}\n\tif (value instanceof Vector3) {\n\t\tconst v3 = value.toArray();\n\t\treturn [v3[0], v3[1]];\n\t}\n\tif (value instanceof Color) {\n\t\tconst v3 = value.toArray();\n\t\treturn [v3[0], v3[1]];\n\t}\n\tif (value instanceof Vector4) {\n\t\tconst v4 = value.toArray() as Number4;\n\t\treturn [v4[0], v4[1]];\n\t}\n\treturn [0, 0];\n}\nfunction convert_vector3(value: ParamValue): ParamInitValuesTypeMap[ParamType.VECTOR3] {\n\tif (lodash_isNumber(value)) {\n\t\treturn [value, value, value];\n\t}\n\tif (value instanceof Vector2) {\n\t\tconst v2 = value.toArray() as Number2;\n\t\treturn [v2[0], v2[1], v2[0]];\n\t}\n\tif (value instanceof Vector3) {\n\t\treturn value.toArray() as Number3;\n\t}\n\tif (value instanceof Color) {\n\t\treturn value.toArray() as Number3;\n\t}\n\tif (value instanceof Vector4) {\n\t\tconst v4 = value.toArray() as Number4;\n\t\treturn [v4[0], v4[1], v4[2]];\n\t}\n\treturn [0, 0, 0];\n}\nfunction convert_vector4(value: ParamValue): ParamInitValuesTypeMap[ParamType.VECTOR4] {\n\tif (lodash_isNumber(value)) {\n\t\treturn [value, value, value, value];\n\t}\n\tif (value instanceof Vector2) {\n\t\tconst v2 = value.toArray() as Number2;\n\t\treturn [v2[0], v2[1], v2[0], v2[0]];\n\t}\n\tif (value instanceof Vector3) {\n\t\tconst v3 = value.toArray() as Number3;\n\t\treturn [v3[0], v3[1], v3[2], v3[0]];\n\t}\n\tif (value instanceof Color) {\n\t\tconst v3 = value.toArray() as Number3;\n\t\treturn [v3[0], v3[1], v3[2], v3[0]];\n\t}\n\tif (value instanceof Vector4) {\n\t\treturn value.toArray() as Number4;\n\t}\n\treturn [0, 0, 0, 0];\n}\n\nconst ParamValuetoInitValueMap: ParamValuetoInitValueMapGeneric = {\n\t[ParamType.BOOLEAN]: convert_boolean,\n\t[ParamType.BUTTON]: convert_button,\n\t[ParamType.COLOR]: convert_color,\n\t[ParamType.FLOAT]: convert_float,\n\t[ParamType.FOLDER]: convert_folder,\n\t[ParamType.INTEGER]: convert_integer,\n\t[ParamType.OPERATOR_PATH]: convert_operator_path,\n\t[ParamType.RAMP]: convert_ramp,\n\t[ParamType.SEPARATOR]: convert_separator,\n\t[ParamType.STRING]: convert_string,\n\t[ParamType.VECTOR2]: convert_vector2,\n\t[ParamType.VECTOR3]: convert_vector3,\n\t[ParamType.VECTOR4]: convert_vector4,\n};\n\nexport class ParamValueToDefaultConverter {\n\t// static from_value<T extends ParamType>(type: T, value: ParamValuesTypeMap[T]): ParamInitValuesTypeMap[T] {\n\t// \t// TODO: typescript, try and work out of I can avoid this cast (check file Debug.ts in same folder)\n\t// \tconst method: ConvertMethod<T> = (<unknown>ParamValuetoInitValueMap[type]) as ConvertMethod<T>;\n\t// \treturn method(value);\n\t// }\n\tstatic from_value<T extends ParamType>(type: T, value: ParamValue): ParamInitValuesTypeMap[T] {\n\t\t// const method: ConvertMethod<T> = (<unknown>ParamValuetoInitValueMap[type]) as ConvertMethod<T>;\n\t\tconst method: ConvertMethod<T> = (<unknown>ParamValuetoInitValueMap[type]) as ConvertMethod<T>;\n\t\treturn method(value);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from 'src/core/ThreeToGl';\n\n// const OUTPUT_NAME = 'longer_name_to_test';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType, ConnectionPointTypes} from '../utils/connections/ConnectionPointType';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nfunction typed_visible_options(type: ConnectionPointType) {\n\tconst val = ConnectionPointTypes.indexOf(type);\n\treturn {visible_if: {type: val}};\n}\n\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass ConstantGlParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tvalue_bool = ParamConfig.BOOLEAN(0, typed_visible_options(ConnectionPointType.BOOL));\n\tvalue_int = ParamConfig.INTEGER(0, typed_visible_options(ConnectionPointType.INT));\n\tvalue_float = ParamConfig.FLOAT(0, typed_visible_options(ConnectionPointType.FLOAT));\n\tvalue_vec2 = ParamConfig.VECTOR2([0, 0], typed_visible_options(ConnectionPointType.VEC2));\n\tvalue_vec3 = ParamConfig.VECTOR3([0, 0, 0], typed_visible_options(ConnectionPointType.VEC3));\n\tvalue_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new ConstantGlParamsConfig();\nexport class ConstantGlNode extends TypedGlNode<ConstantGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'constant';\n\t}\n\tprivate _params_by_type: Map<ConnectionPointType, BaseParamType> | undefined;\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _update_signature_if_required_bound = this._update_signature_if_required.bind(this);\n\tinitialize_node() {\n\t\tthis.params.add_on_scene_load_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t\tthis.add_post_dirty_hook('_update_signature_if_required', this._update_signature_if_required_bound);\n\t}\n\t_update_signature_if_required(dirty_trigger?: CoreGraphNode) {\n\t\tif (!this.lifecycle.creation_completed || dirty_trigger == this.p.type) {\n\t\t\tthis.update_output_type();\n\t\t\tthis.remove_dirty_state();\n\t\t\tthis.make_output_nodes_dirty();\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst param = this._current_param;\n\t\tif (param) {\n\t\t\tconst connection_type = this._current_connection_type;\n\t\t\tconst value = ThreeToGl.any(param.value);\n\t\t\tconst var_value = this._current_var_name;\n\t\t\tconst body_line = `${connection_type} ${var_value} = ${value}`;\n\t\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t\t} else {\n\t\t\tconsole.warn(`no param found for constant node for type '${this.pv.type}'`);\n\t\t}\n\t}\n\n\tprivate get _current_connection_type() {\n\t\tif (this.pv.type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\tif (connection_type == null) {\n\t\t\tconsole.warn('constant gl node type if not valid');\n\t\t}\n\t\treturn connection_type;\n\t}\n\n\tprivate get _current_param(): BaseParamType {\n\t\tthis._params_by_type =\n\t\t\tthis._params_by_type ||\n\t\t\tnew Map<ConnectionPointType, BaseParamType>([\n\t\t\t\t[ConnectionPointType.BOOL, this.p.value_bool],\n\t\t\t\t[ConnectionPointType.INT, this.p.value_int],\n\t\t\t\t[ConnectionPointType.FLOAT, this.p.value_float],\n\t\t\t\t[ConnectionPointType.VEC2, this.p.value_vec2],\n\t\t\t\t[ConnectionPointType.VEC3, this.p.value_vec3],\n\t\t\t\t[ConnectionPointType.VEC4, this.p.value_vec4],\n\t\t\t]);\n\t\tconst connection_type = ConnectionPointTypes[this.pv.type];\n\t\treturn this._params_by_type.get(connection_type)!;\n\t}\n\tprivate get _current_var_name(): string {\n\t\treturn this.gl_var_name(this._current_connection_type);\n\t}\n\n\tprivate update_output_type() {\n\t\tconst current_connection = this.io.outputs.named_output_connection_points[0];\n\t\tif (current_connection && current_connection.type == this._current_connection_type) {\n\t\t\treturn;\n\t\t}\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(this._current_connection_type, this._current_connection_type),\n\t\t]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\nimport {ThreeToGl} from 'src/core/ThreeToGl';\n\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {ConnectionPointType} from '../utils/connections/ConnectionPointType';\n\nconst OUTPUT_NAME = 'vec3';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass FloatToVec3GlParamsConfig extends NodeParamsConfig {\n\tx = ParamConfig.FLOAT(0);\n\ty = ParamConfig.FLOAT(0);\n\tz = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new FloatToVec3GlParamsConfig();\nexport class FloatToVec3GlNode extends TypedGlNode<FloatToVec3GlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'float_to_vec3';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointType.VEC3),\n\t\t]);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst x = this.variable_for_input('x');\n\t\tconst y = this.variable_for_input('y');\n\t\tconst z = this.variable_for_input('z');\n\n\t\tconst vec = this.gl_var_name(OUTPUT_NAME);\n\t\tconst body_line = `vec3 ${vec} = ${ThreeToGl.float3(x, y, z)}`;\n\t\tshaders_collection_controller.add_body_lines(this, [body_line]);\n\t}\n}\n","import {TypedGlNode} from './_Base';\n// import {ThreeToGl} from 'src/Core/ThreeToGl';\n// import {CodeBuilder} from './Util/CodeBuilder'\n// import {Definition} from './Definition/_Module';\n// import {ShaderName, LineType, LINE_TYPES} from './Assembler/Util/CodeBuilder';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass OutputGlParamsConfig extends NodeParamsConfig {\n\t// type = ParamConfig.INTEGER(0, {\n\t// \tmenu: {\n\t// \t\tentries: ConnectionPointTypes.map((name, i) => {\n\t// \t\t\treturn {name: name, value: i};\n\t// \t\t}),\n\t// \t},\n\t// });\n\t// value_float = ParamConfig.FLOAT(0, ConstantGlNode.typed_visible_options(ConnectionPointType.FLOAT));\n\t// value_vec2 = ParamConfig.VECTOR2([0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC2));\n\t// value_vec3 = ParamConfig.VECTOR3([0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC3));\n\t// value_vec4 = ParamConfig.VECTOR4([0, 0, 0, 0], ConstantGlNode.typed_visible_options(ConnectionPointType.VEC4));\n}\nconst ParamsConfig = new OutputGlParamsConfig();\n\nexport class OutputGlNode extends TypedGlNode<OutputGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'output';\n\t}\n\n\tcreate_params() {\n\t\tthis.material_node?.assembler_controller.add_output_params(this);\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\t// if (shaders_collection_controller.shader_name) {\n\t\tthis.material_node?.assembler_controller.assembler.set_node_lines_output(this, shaders_collection_controller);\n\t\t// }\n\t}\n\n\t// set_color_declaration(color_declaration: string){\n\t// \tthis._color_declaration = color_declaration\n\t// }\n}\n","import {TypedGlNode} from './_Base';\nimport {TypedNamedConnectionPoint} from '../utils/connections/NamedConnectionPoint';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {\n\tConnectionPointTypes,\n\tConnectionPointType,\n\tConnectionPointInitValueMap,\n\tConnectionPointTypeToParamTypeMap,\n} from '../utils/connections/ConnectionPointType';\nimport lodash_isArray from 'lodash/isArray';\n\nconst OUTPUT_NAME = 'val';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {UniformGLDefinition} from './utils/GLDefinition';\nimport {ParamConfigsController} from '../utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './code/utils/ShadersCollectionController';\nclass ParamGlParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: ConnectionPointTypes.map((name, i) => {\n\t\t\t\treturn {name: name, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tas_color = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {type: ConnectionPointTypes.indexOf(ConnectionPointType.VEC3)},\n\t});\n}\nconst ParamsConfig = new ParamGlParamsConfig();\n\nexport class ParamGlNode extends TypedGlNode<ParamGlParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'param';\n\t}\n\tprotected _allow_inputs_created_from_params: boolean = false;\n\tprivate _update_if_type_changed_bound = this._update_if_type_changed.bind(this);\n\tinitialize_node() {\n\t\tthis.update_output_type();\n\n\t\tthis.add_post_dirty_hook('_update_if_type_changed', this._update_if_type_changed_bound);\n\t}\n\tprivate _update_if_type_changed(dirty_trigger?: CoreGraphNode) {\n\t\tif (dirty_trigger == this.p.type) {\n\t\t\tthis.update_output_type();\n\t\t\tthis.remove_dirty_state();\n\t\t\tthis.make_output_nodes_dirty();\n\t\t}\n\t}\n\n\tset_lines(shaders_collection_controller: ShadersCollectionController) {\n\t\tconst definitions = [];\n\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst var_name = this.uniform_name();\n\n\t\tdefinitions.push(new UniformGLDefinition(this, gl_type, var_name));\n\t\tshaders_collection_controller.add_definitions(this, definitions);\n\t}\n\tset_param_configs() {\n\t\tconst gl_type = ConnectionPointTypes[this.pv.type];\n\t\tconst default_value = ConnectionPointInitValueMap[gl_type];\n\t\tlet param_type = ConnectionPointTypeToParamTypeMap[gl_type];\n\n\t\tthis._param_configs_controller = this._param_configs_controller || new ParamConfigsController();\n\t\tthis._param_configs_controller.reset();\n\n\t\tif (\n\t\t\tparam_type == ParamType.VECTOR3 &&\n\t\t\tthis.p.as_color.value &&\n\t\t\tlodash_isArray(default_value) &&\n\t\t\tdefault_value.length == 3\n\t\t) {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tParamType.COLOR,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t} else {\n\t\t\tthis._param_configs_controller.create_and_push(\n\t\t\t\tparam_type,\n\t\t\t\tthis.pv.name,\n\t\t\t\tdefault_value,\n\t\t\t\tthis.uniform_name()\n\t\t\t);\n\t\t}\n\t}\n\tuniform_name() {\n\t\tconst output_connection_point = this.io.outputs.named_output_connection_points[0];\n\t\tconst var_name = this.gl_var_name(output_connection_point.name);\n\t\treturn var_name;\n\t}\n\n\tupdate_output_type() {\n\t\tthis.io.outputs.set_named_output_connection_points([\n\t\t\tnew TypedNamedConnectionPoint(OUTPUT_NAME, ConnectionPointTypes[this.pv.type]),\n\t\t]);\n\t}\n}\n","import {VideoTexture} from 'three/src/textures/VideoTexture';\nimport {Vector4} from 'three/src/math/Vector4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\n\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {ParamInitValuesTypeMap} from 'src/engine/params/types/ParamInitValuesTypeMap';\nimport {ParamValuesTypeMap} from 'src/engine/params/types/ParamValuesTypeMap';\nimport {ParamConstructorByType} from 'src/engine/params/types/ParamConstructorByType';\n\nimport {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {TypedParam, BaseParamType} from 'src/engine/params/_Base';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {TypeAssert} from 'src/engine/poly/Assert';\nimport {IUniform} from 'three/src/renderers/shaders/UniformsLib';\n// import { RampValue } from 'src/engine/params/ramp/RampValue';\nimport {RampParam} from 'src/engine/params/Ramp';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\n// import {ParamValueComparer} from 'src/engine/nodes/utils/params/ParamValueComparer';\n// import {ParamValueCloner} from 'src/engine/nodes/utils/params/ParamValueCloner';\n// import {CoreTextureLoader} from 'src/Core/Loader/Texture'\n\nexport class ParamConfig<T extends ParamType> {\n\tprivate _uniform: IUniform | undefined;\n\tprivate _cached_param_value: ParamValuesTypeMap[T] | undefined;\n\t// private _texture_loader: CoreTextureLoader\n\n\tconstructor(\n\t\tprivate _type: T,\n\t\tprivate _name: string,\n\t\tprivate _default_value: ParamInitValuesTypeMap[T],\n\t\tprivate _uniform_name: string\n\t) {}\n\n\tstatic from_param<K extends ParamType>(param: TypedParam<K>, uniform_name: string): ParamConfig<K> {\n\t\treturn new ParamConfig<K>(param.type, param.name, param.default_value, uniform_name);\n\t}\n\n\tget type() {\n\t\treturn this._type;\n\t}\n\tget name() {\n\t\treturn this._name;\n\t}\n\tget default_value() {\n\t\treturn this._default_value;\n\t}\n\tget uniform_name() {\n\t\treturn this._uniform_name;\n\t}\n\n\tget uniform() {\n\t\treturn (this._uniform = this._uniform || this._create_uniform());\n\t}\n\n\tprivate _create_uniform() {\n\t\treturn ParamConfig.uniform_by_type(this._type);\n\t}\n\n\tget param_options() {\n\t\tconst callback_bound = this._callback.bind(this);\n\t\tswitch (this._type) {\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {callback: callback_bound, node_selection: {context: NodeContext.COP}}; // TODO: typescript - why is COP here?\n\t\t\tdefault:\n\t\t\t\treturn {callback: callback_bound};\n\t\t}\n\t}\n\n\tprivate _callback(node: BaseNodeType, param: BaseParamType) {\n\t\t// console.log('callback', node, param, param.value);\n\t\tthis.uniform.value = param.value;\n\t}\n\n\t// TODO: refactor that to use the default values map?\n\tstatic uniform_by_type(type: ParamType): IUniform {\n\t\tswitch (type) {\n\t\t\tcase ParamType.BOOLEAN:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.BUTTON:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.COLOR:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.FLOAT:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.FOLDER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.INTEGER:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.OPERATOR_PATH:\n\t\t\t\treturn {value: 0};\n\t\t\t// case ParamType.STRING: return {type: 't', value: null} // new Texture()}\n\t\t\tcase ParamType.RAMP:\n\t\t\t\treturn {value: null}; // new Texture()}\n\t\t\tcase ParamType.SEPARATOR:\n\t\t\t\treturn {value: 0};\n\t\t\tcase ParamType.STRING:\n\t\t\t\treturn {value: null};\n\t\t\tcase ParamType.VECTOR2:\n\t\t\t\treturn {value: new Vector2(0, 0)};\n\t\t\tcase ParamType.VECTOR3:\n\t\t\t\treturn {value: new Vector3(0, 0, 0)};\n\t\t\tcase ParamType.VECTOR4:\n\t\t\t\treturn {value: new Vector4(0, 0, 0, 0)};\n\t\t}\n\t\tTypeAssert.unreachable(type);\n\t}\n\n\tasync set_uniform_value(node: BaseNodeType) {\n\t\t// return new Promise( async (resolve, reject)=>{\n\t\tconst uniform = this.uniform;\n\t\t// the cache cannot be trusted...\n\t\tconst param = node.params.get(this._name) as TypedParam<T>;\n\t\tif (param) {\n\t\t\tawait param.compute(); //node[node.param_cache_name(this._name)]\n\t\t\tconst value = param.value;\n\n\t\t\tif ((value != null && this.has_value_changed(value)) || this.is_video_texture()) {\n\t\t\t\t// this._update_cached_value(value);\n\t\t\t\t// console.log(this._name, value)\n\n\t\t\t\tswitch (this._type) {\n\t\t\t\t\tcase ParamType.OPERATOR_PATH: {\n\t\t\t\t\t\tawait this.set_uniform_value_from_texture((<unknown>param) as OperatorPathParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tcase ParamType.RAMP: {\n\t\t\t\t\t\tthis.set_uniform_value_from_ramp((<unknown>param) as RampParam, uniform);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tdefault: {\n\t\t\t\t\t\tuniform.value = param.value;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// resolve()\n\t\t\t} // else {\n\t\t\t//\tresolve()\n\t\t\t//}\n\t\t\t// })\n\t\t}\n\t}\n\n\tasync set_uniform_value_from_texture(param: OperatorPathParam, uniform: IUniform) {\n\t\t// this._texture_loader = this._texture_loader || new CoreTextureLoader(node, node.param(this.name()))\n\n\t\t// // param.graph_disconnect_predecessors()\n\t\t// const texture = await this._texture_loader.load_texture_from_url_or_op( url );\n\t\t// uniform.value = texture\n\t\tconst found_node = param.found_node();\n\t\tif (found_node) {\n\t\t\tconst container = await found_node.request_container();\n\t\t\tconst texture = container.texture();\n\t\t\tuniform.value = texture;\n\t\t} else {\n\t\t\tuniform.value = null;\n\t\t}\n\t}\n\n\tset_uniform_value_from_ramp(param: RampParam, uniform: IUniform) {\n\t\tuniform.value = param.ramp_texture();\n\t}\n\n\thas_value_changed(new_value: ParamValuesTypeMap[T]): boolean {\n\t\tconst param_constructor = ParamConstructorByType[this._type];\n\t\tif (this._cached_param_value) {\n\t\t\tconst has_changed = !param_constructor.are_values_equal(new_value, this._cached_param_value);\n\t\t\tif (has_changed) {\n\t\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\t}\n\t\t\treturn has_changed;\n\t\t} else {\n\t\t\tthis._cached_param_value = param_constructor.clone_value(new_value);\n\t\t\treturn false;\n\t\t}\n\n\t\t// let has_changed = false;\n\t\t// if (this._type == ParamType.RAMP) {\n\t\t// \thas_changed = new_value.uuid() != this._cached_param_value;\n\t\t// \t// if(has_changed){ this._cached_param_value = new_value.uuid() }\n\t\t// } else {\n\t\t// \tif (this._cached_param_value != null) {\n\t\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t\t// \t\t\t// console.log(\"new f\", new_value, this._cached_param_value)\n\t\t// \t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t} else {\n\t\t// \t\t\tif (new_value != null) {\n\t\t// \t\t\t\t// console.log(\"new v\", new_value, this._cached_param_value)\n\t\t// \t\t\t\thas_changed = new_value.toArray().join('.') != this._cached_param_value.toArray().join('.');\n\t\t// \t\t\t} else {\n\t\t// \t\t\t\thas_changed = this._cached_param_value != new_value;\n\t\t// \t\t\t}\n\t\t// \t\t}\n\t\t// \t} else {\n\t\t// \t\thas_changed = true;\n\t\t// \t}\n\t\t// \t// this._cached_param_value = new_value\n\t\t// }\n\t\t// return has_changed;\n\t}\n\t// private _update_cached_value(new_value) {\n\t// \t// console.log(\"_update_cached_value\", this._name, new_value)\n\t// \tif (this._type == 'ramp') {\n\t// \t\tthis._cached_param_value = new_value.uuid();\n\t// \t} else {\n\t// \t\tif (lodash_isString(new_value) || lodash_isNumber(new_value)) {\n\t// \t\t\tthis._cached_param_value = new_value;\n\t// \t\t} else {\n\t// \t\t\t// make sure to copy the value, not assign to it\n\t// \t\t\t// otherwise we won't detect changes (since the objects would be the same)\n\t// \t\t\tthis._cached_param_value = this._cached_param_value || new_value.clone();\n\t// \t\t\tthis._cached_param_value.copy(new_value);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tis_video_texture(): boolean {\n\t\tlet result = false;\n\t\tconst uniform = this.uniform;\n\t\tif (uniform) {\n\t\t\tconst value = uniform.value;\n\t\t\tif (value) {\n\t\t\t\tresult = value.constructor == VideoTexture;\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t}\n}\n","import {CATEGORY_MAT} from './Category';\n\nimport {MeshBasicMatNode} from 'src/engine/nodes/mat/MeshBasic';\nimport {MeshBasicBuilderMatNode} from 'src/engine/nodes/mat/MeshBasicBuilder';\nimport {MeshLambertMatNode} from 'src/engine/nodes/mat/MeshLambert';\nimport {MeshStandardMatNode} from 'src/engine/nodes/mat/MeshStandard';\nimport {PointsMatNode} from 'src/engine/nodes/mat/Points';\n\nexport interface MatNodeChildrenMap {\n\tmesh_basic: MeshBasicMatNode;\n\tmesh_basic_builder: MeshBasicBuilderMatNode;\n\tmesh_lambert: MeshLambertMatNode;\n\tmesh_standard: MeshStandardMatNode;\n\tpoints: PointsMatNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class MatRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(MeshBasicMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshBasicBuilderMatNode, CATEGORY_MAT.ADVANCED);\n\t\tpoly.register_node(MeshLambertMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(MeshStandardMatNode, CATEGORY_MAT.MESH);\n\t\tpoly.register_node(PointsMatNode, CATEGORY_MAT.POINTS);\n\t}\n}\n","import {NoColors} from 'three/src/constants';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicMatNode extends TypedMatNode<MeshBasicMaterial, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshBasicMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this);\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this);\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {Material} from 'three/src/materials/Material';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class MaterialContainer extends TypedContainer<ContainableMap['MATERIAL']> {\n\tset_content(content: ContainableMap['MATERIAL']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_material(material: Material) {\n\t\tif (this._content != null) {\n\t\t\tthis._content.dispose();\n\t\t}\n\t\tthis.set_content(material);\n\t}\n\thas_material() {\n\t\treturn this.has_content();\n\t}\n\tmaterial() {\n\t\treturn this.content();\n\t}\n}\n","import {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ColorParamConfig} from './utils/ColorsController';\nimport {SideParamConfig} from './utils/SideController';\nimport {SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {ShaderAssemblerBasic} from '../gl/code/assemblers/Basic';\nimport {TypedBuilderMatNode} from './_BaseBuilder';\nimport {GlAssemblerController} from '../gl/code/Controller';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nclass MeshBasicMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshBasicMatParamsConfig();\n\nexport class MeshBasicBuilderMatNode extends TypedBuilderMatNode<ShaderAssemblerBasic, MeshBasicMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_basic_builder';\n\t}\n\n\tprotected _children_controller_context = NodeContext.GL;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\t// this.add_post_dirty_hook('gl compile', (trigger_node?: CoreGraphNode) => {\n\n\t\t// \tconsole.log('gl dirty');\n\t\t// });\n\t}\n\n\tprotected _create_assembler_controller() {\n\t\treturn new GlAssemblerController<ShaderAssemblerBasic>(this, ShaderAssemblerBasic);\n\t}\n\n\tasync cook() {\n\t\tthis.compile_if_required();\n\n\t\t// ColorsController.update(this);\n\t\t// SideController.update(this);\n\t\t// SkinningController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.set_material(this.material);\n\t}\n\n\tprotected async _compile() {\n\t\tif (this._material) {\n\t\t\tawait this.assembler_controller.assembler.compile_material(this._material);\n\t\t\tawait this.assembler_controller.post_compile();\n\t\t}\n\n\t\t// console.log(this._material.vertexShader);\n\t\t// console.log(this._material.fragmentShader);\n\t}\n}\n","import {VertexColors} from 'three/src/constants';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {FrontSide} from 'three/src/constants';\n\nimport {ShaderAssemblerMesh} from './_BaseMesh';\n\n// import TemplateVertex from './Template/Basic.vert.glsl'\n// import TemplateFragment from './Template/Basic.frag.glsl'\n\nexport class ShaderAssemblerBasic extends ShaderAssemblerMesh {\n\t// _color_declaration() { return 'gl_FragColor' }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.basic;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\t_create_material() {\n\t\tconst template_shader = this._template_shader;\n\n\t\treturn new ShaderMaterial({\n\t\t\tvertexColors: VertexColors,\n\t\t\tside: FrontSide,\n\t\t\ttransparent: true,\n\t\t\tfog: true,\n\t\t\tlights: false,\n\t\t\tdepthTest: true,\n\t\t\talphaTest: 0.5,\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {ShaderAssemblerRender, CustomAssemblerMap, CustomMaterialName} from './_BaseRender';\n\nimport {ShaderAssemblerCustomMeshDistance} from './CustomMeshDistance';\nimport {ShaderAssemblerCustomMeshDepth} from './CustomMeshDepth';\nimport {ShaderAssemblerCustomMeshDepthDOF} from './CustomMeshDepthDOF';\nimport {GlNodeFinder} from '../utils/NodeFinder';\nimport {ShaderMaterialWithCustomMaterials} from 'src/core/geometry/Material';\nimport {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\n\nconst ASSEMBLER_MAP: CustomAssemblerMap = new Map([\n\t// [CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance],\n\t// [CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth],\n\t// [CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF],\n]);\nASSEMBLER_MAP.set(CustomMaterialName.DISTANCE, ShaderAssemblerCustomMeshDistance);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH, ShaderAssemblerCustomMeshDepth);\nASSEMBLER_MAP.set(CustomMaterialName.DEPTH_DOF, ShaderAssemblerCustomMeshDepthDOF);\n\nexport abstract class ShaderAssemblerMesh extends ShaderAssemblerRender {\n\t// TODO: I've noticed a case where instances would not display when those shadow shaders were exported\n\t// But the objects display fine if those are not assigned\n\t// so it could be a bug at render time (not sure if my code, threejs or hardware)\n\tcustom_assembler_class_by_custom_name(): CustomAssemblerMap {\n\t\treturn ASSEMBLER_MAP;\n\t}\n\n\tasync compile_material(material: ShaderMaterialWithCustomMaterials) {\n\t\t// no need to compile if the globals handler has not been declared\n\t\tif (!this.compile_allowed()) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst output_nodes = GlNodeFinder.find_output_nodes(this._gl_parent_node);\n\t\tif (output_nodes.length > 1) {\n\t\t\tthis._gl_parent_node.states.error.set('only one output node allowed');\n\t\t}\n\t\tthis.set_root_nodes(output_nodes);\n\t\tawait this._update_shaders();\n\n\t\tconst new_vertex_shader = this._shaders_by_name.get(ShaderName.VERTEX);\n\t\tconst new_fragment_shader = this._shaders_by_name.get(ShaderName.FRAGMENT);\n\t\tif (new_vertex_shader && new_fragment_shader) {\n\t\t\tmaterial.vertexShader = new_vertex_shader;\n\t\t\tmaterial.fragmentShader = new_fragment_shader;\n\t\t\t// console.log(material.fragmentShader);\n\t\t\tmaterial.uniforms = this.build_uniforms(this._template_shader?.uniforms);\n\t\t\tmaterial.needsUpdate = true;\n\t\t}\n\n\t\t// const material = await this._assembler.get_material();\n\t\t// if (material) {\n\t\t// this._shaders_by_name.set(ShaderName.VERTEX, this._template_shader!.vertexShader!);\n\t\t// this._shaders_by_name.set(ShaderName.FRAGMENT, this._template_shader!.fragmentShader!);\n\n\t\t// assign custom materials\n\t\tawait this.compile_custom_materials(material);\n\t\t// const custom_materials = await this.get_custom_materials();\n\t\t// const material_with_custom_materials = material as ShaderMaterialWithCustomMaterials;\n\t\t// material_with_custom_materials.custom_materials = {};\n\t\t// custom_materials.forEach((custom_material, shader_name) => {\n\t\t// \tmaterial_with_custom_materials.custom_materials[shader_name] = custom_material;\n\t\t// });\n\n\t\t// material.needsUpdate = true;\n\t\t// }\n\n\t\t// this.create_spare_parameters();\n\t}\n\tprivate async _update_shaders() {\n\t\tthis._shaders_by_name = new Map();\n\t\tthis._lines = new Map();\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst template = this._template_shader_for_shader_name(shader_name);\n\t\t\tif (template) {\n\t\t\t\tthis._lines.set(shader_name, template.split('\\n'));\n\t\t\t}\n\t\t}\n\t\tif (this._root_nodes.length > 0) {\n\t\t\t// this._output_node.set_assembler(this)\n\t\t\tawait this.build_code_from_nodes(this._root_nodes);\n\n\t\t\tthis._build_lines();\n\t\t}\n\t\t// this._material.uniforms = this.build_uniforms(template_shader)\n\t\tfor (let shader_name of this.shader_names) {\n\t\t\tconst lines = this._lines.get(shader_name);\n\t\t\tif (lines) {\n\t\t\t\tthis._shaders_by_name.set(shader_name, lines.join('\\n'));\n\t\t\t}\n\t\t}\n\t}\n}\n","import {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\n\nexport class ShaderConfig {\n\tconstructor(private _name: ShaderName, private _input_names: string[], private _dependencies: ShaderName[]) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tinput_names() {\n\t\treturn this._input_names;\n\t}\n\tdependencies() {\n\t\treturn this._dependencies;\n\t}\n}\n","interface VariableConfigOptions {\n\t// asset refererences\n\tdefault_from_attribute?: boolean;\n\tdefault?: string;\n\tif?: string;\n\tprefix?: string;\n\tsuffix?: string;\n}\n\nexport class VariableConfig {\n\tconstructor(private _name: string, private _options: VariableConfigOptions = {}) {}\n\n\tname() {\n\t\treturn this._name;\n\t}\n\tdefault_from_attribute() {\n\t\treturn this._options['default_from_attribute'] || false;\n\t}\n\tdefault() {\n\t\treturn this._options['default'];\n\t}\n\tif_condition() {\n\t\treturn this._options['if'];\n\t}\n\t// required_definitions(){\n\t// \treturn this._options['required_definitions']\n\t// }\n\tprefix() {\n\t\treturn this._options['prefix'] || '';\n\t}\n\tsuffix() {\n\t\treturn this._options['suffix'] || '';\n\t}\n}\n","import lodash_uniq from 'lodash/uniq';\nimport {BaseGlNodeType} from '../../_Base';\nimport {TypedNodeTraverser} from '../../../utils/shaders/NodeTraverser';\nimport {BaseNodeType} from '../../../_Base';\nimport {BaseGlShaderAssembler} from '../assemblers/_Base';\nimport {MapUtils} from 'src/core/MapUtils';\nimport {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\nimport {GLDefinitionType, BaseGLDefinition} from '../../utils/GLDefinition';\nimport {TypedGLDefinitionCollection} from '../../utils/GLDefinitionCollection';\nimport {ParamConfigsController} from 'src/engine/nodes/utils/code/controllers/ParamConfigsController';\nimport {ShadersCollectionController} from './ShadersCollectionController';\nimport {CodeFormatter} from './CodeFormatter';\n\nimport {LineType} from './LineType';\n\nexport class CodeBuilder {\n\t_param_configs_controller: ParamConfigsController = new ParamConfigsController();\n\t_param_configs_set_allowed: boolean = true;\n\n\tprivate _shaders_collection_controller: ShadersCollectionController | undefined;\n\t_lines: Map<ShaderName, Map<LineType, string[]>> = new Map();\n\t_function_declared: Map<ShaderName, Map<string, boolean>> = new Map();\n\n\tconstructor(private _assembler: BaseGlShaderAssembler, private _gl_parent_node: BaseNodeType) {}\n\n\tasync build_from_nodes(root_nodes: BaseGlNodeType[]) {\n\t\tconst node_traverser = new TypedNodeTraverser<BaseGlNodeType>(this._assembler, this._gl_parent_node);\n\t\tnode_traverser.traverse(root_nodes);\n\n\t\tconst nodes_by_shader_name: Map<ShaderName, BaseGlNodeType[]> = new Map();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tnodes_by_shader_name.set(shader_name, node_traverser.nodes_for_shader_name(shader_name));\n\t\t}\n\t\tconst sorted_nodes = node_traverser.sorted_nodes();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst root_nodes_for_shader = this._assembler.root_nodes_by_shader_name(shader_name);\n\t\t\tconst leaf_nodes_for_shader = this._assembler.leaf_nodes_by_shader_name(shader_name);\n\n\t\t\t// keep track of which nodes are both leaf and root, and do not use their code twice\n\t\t\t// as this may happen with an attribute node, when used as both import and export\n\t\t\t// TODO: that seems useless, as I surely should be able to filter duplicates if needed\n\n\t\t\t// ensure nodes are unique\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tnodes_by_shader_name.forEach((nodes, shader_name) => {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\tnode_ids.set(node.graph_node_id, true);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (let root_node of root_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[root_node.graph_node_id()]){\n\t\t\t\tif (!node_ids.get(root_node.graph_node_id)) {\n\t\t\t\t\tMapUtils.push_on_array_at_entry(nodes_by_shader_name, shader_name, root_node);\n\t\t\t\t\tnode_ids.set(root_node.graph_node_id, true);\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t}\n\t\t\tfor (let leaf_node of leaf_nodes_for_shader) {\n\t\t\t\t// if(!both_leaf_and_root_nodes_by_id[leaf_node.graph_node_id()]){\n\t\t\t\tif (!node_ids.get(leaf_node.graph_node_id)) {\n\t\t\t\t\tMapUtils.unshift_on_array_at_entry(nodes_by_shader_name, shader_name, leaf_node);\n\t\t\t\t}\n\t\t\t\t// }\n\t\t\t}\n\t\t}\n\n\t\t// ensure nodes are not added if already present\n\t\tconst sorted_node_ids: Map<string, boolean> = new Map();\n\t\tfor (let node of sorted_nodes) {\n\t\t\tsorted_node_ids.set(node.graph_node_id, true);\n\t\t}\n\n\t\tfor (let root_node of root_nodes) {\n\t\t\tif (!sorted_node_ids.get(root_node.graph_node_id)) {\n\t\t\t\tsorted_nodes.push(root_node);\n\t\t\t\tsorted_node_ids.set(root_node.graph_node_id, true);\n\t\t\t}\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\t// node.set_assembler(this._assembler);\n\t\t\tnode.reset_code();\n\t\t}\n\t\tfor (let node of sorted_nodes) {\n\t\t\tawait node.params.eval_all();\n\t\t}\n\n\t\t// const param_promises = sorted_nodes.map(node=>{\n\t\t// \treturn node.eval_all_params()\n\t\t// })\n\t\t// await Promise.all(param_promises)\n\n\t\tthis._shaders_collection_controller = new ShadersCollectionController(\n\t\t\tthis.shader_names(),\n\t\t\tthis.shader_names()[0]\n\t\t);\n\t\tthis.reset();\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst nodes = nodes_by_shader_name.get(shader_name);\n\t\t\tthis._shaders_collection_controller.set_current_shader_name(shader_name);\n\t\t\tif (nodes) {\n\t\t\t\tfor (let node of nodes) {\n\t\t\t\t\t// node.set_shader_name(shader_name);\n\t\t\t\t\tif (this._param_configs_set_allowed) {\n\t\t\t\t\t\tnode.set_param_configs();\n\t\t\t\t\t}\n\t\t\t\t\tnode.set_lines(this._shaders_collection_controller);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// fragment_nodes.forEach(node=>{\n\t\t// \tnode.set_shader_name(ShaderName.FRAGMENT)\n\t\t// \tnode.set_param_configs()\n\t\t// \tnode.set_lines()\n\t\t// })\n\t\tif (this._param_configs_set_allowed) {\n\t\t\tthis.set_param_configs(sorted_nodes);\n\t\t}\n\t\tthis.set_code_lines(sorted_nodes);\n\t}\n\n\tdisallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = false;\n\t}\n\tallow_new_param_configs() {\n\t\tthis._param_configs_set_allowed = true;\n\t}\n\n\tshader_names() {\n\t\treturn this._assembler.shader_names;\n\t}\n\n\tprivate reset() {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\tconst lines_map = new Map();\n\t\t\t// for (let line_type of LINE_TYPES) {\n\t\t\t// \tlines_map.set(line_type, []);\n\t\t\t// }\n\t\t\tthis._lines.set(shader_name, lines_map);\n\t\t\tthis._function_declared.set(shader_name, new Map());\n\t\t}\n\t}\n\n\tparam_configs() {\n\t\treturn this._param_configs_controller.list || [];\n\t}\n\tlines(shader_name: ShaderName, line_type: LineType) {\n\t\treturn this._lines.get(shader_name)!.get(line_type);\n\t}\n\tall_lines() {\n\t\treturn this._lines;\n\t}\n\n\tset_param_configs(nodes: BaseGlNodeType[]) {\n\t\tthis._param_configs_controller.reset();\n\t\tfor (let node of nodes) {\n\t\t\tconst param_configs = node.param_configs();\n\t\t\tif (param_configs) {\n\t\t\t\tfor (let param_config of param_configs) {\n\t\t\t\t\tthis._param_configs_controller.push(param_config);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tset_code_lines(nodes: BaseGlNodeType[]) {\n\t\tfor (let shader_name of this.shader_names()) {\n\t\t\t// nodes.forEach((node, i)=>{\n\t\t\tthis.add_code_lines(nodes, shader_name);\n\t\t\t// })\n\t\t}\n\t}\n\n\tadd_code_lines(nodes: BaseGlNodeType[], shader_name: ShaderName) {\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.FUNCTION, LineType.FUNCTION_DECLARATION);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.UNIFORM, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.VARYING, LineType.DEFINE);\n\t\tthis.add_definitions(nodes, shader_name, GLDefinitionType.ATTRIBUTE, LineType.DEFINE);\n\n\t\tthis.add_code_line_for_nodes_and_line_type(nodes, shader_name, LineType.BODY);\n\t}\n\n\tprivate add_definitions(\n\t\tnodes: BaseGlNodeType[],\n\t\tshader_name: ShaderName,\n\t\tdefinition_type: GLDefinitionType,\n\t\tline_type: LineType\n\t) {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst definitions = [];\n\t\tfor (let node of nodes) {\n\t\t\tlet node_definitions = this._shaders_collection_controller.definitions(shader_name, node);\n\t\t\tif (node_definitions) {\n\t\t\t\tnode_definitions = node_definitions.filter((d) => d.definition_type == definition_type);\n\t\t\t\tfor (let definition of node_definitions) {\n\t\t\t\t\tdefinitions.push(definition);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (definitions.length > 0) {\n\t\t\tconst collection = new TypedGLDefinitionCollection<GLDefinitionType>(definitions);\n\t\t\tconst uniq_definitions = collection.uniq();\n\t\t\tif (collection.errored) {\n\t\t\t\t// TODO: handle error\n\t\t\t\tthrow `code builder error: ${collection.error_message}`;\n\t\t\t}\n\n\t\t\tconst definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\t\t\tconst node_ids: Map<string, boolean> = new Map();\n\t\t\tfor (let definition of uniq_definitions) {\n\t\t\t\tconst node_id = definition.node.graph_node_id;\n\t\t\t\tif (!node_ids.has(node_id)) {\n\t\t\t\t\tnode_ids.set(node_id, true);\n\t\t\t\t}\n\t\t\t\tMapUtils.push_on_array_at_entry(definitions_by_node_id, node_id, definition);\n\t\t\t}\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tnode_ids.forEach((boolean: boolean, node_id: string) => {\n\t\t\t\tconst definitions = definitions_by_node_id.get(node_id);\n\t\t\t\tif (definitions) {\n\t\t\t\t\tconst first_definition = definitions[0];\n\n\t\t\t\t\tif (first_definition) {\n\t\t\t\t\t\tconst comment = CodeFormatter.node_comment(first_definition.node, line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\n\t\t\t\t\t\tfor (let definition of definitions) {\n\t\t\t\t\t\t\tconst line = CodeFormatter.line_wrap(definition.line, line_type);\n\t\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tadd_code_line_for_nodes_and_line_type(nodes: BaseGlNodeType[], shader_name: ShaderName, line_type: LineType) {\n\t\tnodes = nodes.filter((node) => {\n\t\t\tif (this._shaders_collection_controller) {\n\t\t\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\t\t\t\treturn lines && lines.length > 0;\n\t\t\t}\n\t\t});\n\n\t\tvar nodes_count = nodes.length;\n\t\tfor (let i = 0; i < nodes_count; i++) {\n\t\t\tconst is_last = i == nodes.length - 1;\n\t\t\tthis.add_code_line_for_node_and_line_type(nodes[i], shader_name, line_type, is_last);\n\t\t}\n\t}\n\tadd_code_line_for_node_and_line_type(\n\t\tnode: BaseGlNodeType,\n\t\tshader_name: ShaderName,\n\t\tline_type: LineType,\n\t\tis_last: boolean\n\t): void {\n\t\tif (!this._shaders_collection_controller) {\n\t\t\treturn;\n\t\t}\n\t\tconst lines = this._shaders_collection_controller.body_lines(shader_name, node);\n\n\t\tif (lines && lines.length > 0) {\n\t\t\tconst lines_for_shader = this._lines.get(shader_name)!;\n\t\t\tconst comment = CodeFormatter.node_comment(node, line_type);\n\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, comment);\n\t\t\tlodash_uniq(lines).forEach((line) => {\n\t\t\t\tline = CodeFormatter.line_wrap(line, line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, line);\n\t\t\t});\n\t\t\tif (!(line_type == LineType.BODY && is_last)) {\n\t\t\t\tconst separator = CodeFormatter.post_line_separator(line_type);\n\t\t\t\tMapUtils.push_on_array_at_entry(lines_for_shader, line_type, separator);\n\t\t\t}\n\t\t}\n\t}\n}\n","import {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {LinesController} from './LinesController';\nimport {BaseGlNodeType} from '../../_Base';\n\nexport class ShadersCollectionController {\n\tprivate _lines_controller_by_shader_name: Map<ShaderName, LinesController> = new Map();\n\tconstructor(private _shader_names: ShaderName[], private _current_shader_name: ShaderName) {\n\t\tfor (let shader_name of this._shader_names) {\n\t\t\tthis._lines_controller_by_shader_name.set(shader_name, new LinesController(shader_name));\n\t\t}\n\t}\n\n\tget shader_names() {\n\t\treturn this._shader_names;\n\t}\n\n\tset_current_shader_name(shader_name: ShaderName) {\n\t\tthis._current_shader_name = shader_name;\n\t}\n\tget current_shader_name() {\n\t\treturn this._current_shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[], shader_name?: ShaderName) {\n\t\tif (definitions.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_definitions(node, definitions);\n\t\t}\n\t}\n\tdefinitions(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.definitions(node);\n\t\t}\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[], shader_name?: ShaderName) {\n\t\tif (lines.length == 0) {\n\t\t\treturn;\n\t\t}\n\t\tshader_name = shader_name || this._current_shader_name;\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\tlines_controller.add_body_lines(node, lines);\n\t\t}\n\t}\n\tbody_lines(shader_name: ShaderName, node: BaseGlNodeType) {\n\t\tconst lines_controller = this._lines_controller_by_shader_name.get(shader_name);\n\t\tif (lines_controller) {\n\t\t\treturn lines_controller.body_lines(node);\n\t\t}\n\t}\n}\n","import {ShaderName} from 'src/engine/nodes/utils/shaders/ShaderName';\nimport {BaseGLDefinition} from '../../utils/GLDefinition';\nimport {BaseGlNodeType} from '../../_Base';\nimport {MapUtils} from 'src/core/MapUtils';\n\nexport class LinesController {\n\tprivate _definitions_by_node_id: Map<string, BaseGLDefinition[]> = new Map();\n\tprivate _body_lines_by_node_id: Map<string, string[]> = new Map();\n\n\tconstructor(private _shader_name: ShaderName) {}\n\n\tget shader_name() {\n\t\treturn this._shader_name;\n\t}\n\n\tadd_definitions(node: BaseGlNodeType, definitions: BaseGLDefinition[]) {\n\t\tfor (let definition of definitions) {\n\t\t\tMapUtils.push_on_array_at_entry(this._definitions_by_node_id, node.graph_node_id, definition);\n\t\t}\n\t}\n\tdefinitions(node: BaseGlNodeType): BaseGLDefinition[] | undefined {\n\t\treturn this._definitions_by_node_id.get(node.graph_node_id);\n\t}\n\n\tadd_body_lines(node: BaseGlNodeType, lines: string[]) {\n\t\tfor (let line of lines) {\n\t\t\tMapUtils.push_on_array_at_entry(this._body_lines_by_node_id, node.graph_node_id, line);\n\t\t}\n\t}\n\tbody_lines(node: BaseGlNodeType): string[] | undefined {\n\t\treturn this._body_lines_by_node_id.get(node.graph_node_id);\n\t}\n}\n","import {BaseGlNodeType} from '../../_Base';\nimport {LineType} from './LineType';\n\nconst LINE_SUFFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: ';',\n\t[LineType.BODY]: ';',\n};\n\nconst LINE_PREFIXES = {\n\t[LineType.FUNCTION_DECLARATION]: '',\n\t[LineType.DEFINE]: '',\n\t[LineType.BODY]: '\t',\n};\n\nexport class CodeFormatter {\n\tstatic node_comment(node: BaseGlNodeType, line_type: LineType): string {\n\t\tlet line = `// ${node.full_path()}`;\n\t\tif (line_type == LineType.BODY) {\n\t\t\tline = `\t${line}`;\n\t\t}\n\t\treturn line;\n\t}\n\tstatic line_wrap(line: string, line_type: LineType) {\n\t\tlet add_suffix = true;\n\t\tif (line.indexOf('#if') == 0 || line.indexOf('#endif') == 0) {\n\t\t\tadd_suffix = false;\n\t\t}\n\t\tif (add_suffix) {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}${LINE_SUFFIXES[line_type]}`;\n\t\t} else {\n\t\t\treturn `${LINE_PREFIXES[line_type]}${line}`;\n\t\t}\n\t}\n\tstatic post_line_separator(line_type: LineType) {\n\t\treturn line_type == LineType.BODY ? '\t' : '';\n\t}\n}\n","import {TypedNode} from '../../_Base';\nimport {ShaderName} from './ShaderName';\n\nexport abstract class TypedAssembler<T extends TypedNode<any, any, any>> {\n\tabstract get shader_names(): ShaderName[];\n\tabstract input_names_for_shader_name(node: T, shader_name: ShaderName): string[];\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerRender} from './_BaseRender';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDistance extends ShaderAssemblerRender {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.distanceRGBA;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\t_create_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\nimport {RGBADepthPacking} from 'three/src/constants';\nimport {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerRender} from './_BaseRender';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([\n\t[ShaderName.VERTEX, '#include <begin_vertex>'],\n\t[ShaderName.FRAGMENT, 'vec4 diffuseColor = vec4( 1.0 );'],\n]);\n\nexport class ShaderAssemblerCustomMeshDepth extends ShaderAssemblerRender {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\tconst template = ShaderLib.depth;\n\t\treturn {\n\t\t\tvertexShader: template.vertexShader, //TemplateVertex,\n\t\t\tfragmentShader: template.fragmentShader, //TemplateFragment,\n\t\t\tuniforms: template.uniforms,\n\t\t};\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\t_create_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// vertexColors: VertexColors,\n\t\t\t// side: FrontSide,\n\t\t\t// transparent: true,\n\t\t\t// fog: true,\n\t\t\t// lights: true,\n\t\t\tdefines: {\n\t\t\t\tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0],\n\t\t\t},\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","import {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n// import {ShaderLib} from 'three/src/renderers/shaders/ShaderLib';\n// import {RGBADepthPacking} from 'three/src/constants';\n// import {BasicDepthPacking} from 'three/src/constants';\n\nimport {ShaderAssemblerRender} from './_BaseRender';\n\nimport TemplateVertex from '../templates/CustomMeshDepthDOF.vert.glsl';\nimport TemplateFragment from '../templates/CustomMeshDepthDOF.frag.glsl';\nimport {ShaderName} from '../../../utils/shaders/ShaderName';\n\nconst INSERT_DEFINE_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT DEFINES']]);\nconst INSERT_BODY_AFTER_MAP: Map<ShaderName, string> = new Map([[ShaderName.VERTEX, '// INSERT BODY']]);\n// fragment: 'vec4 diffuseColor = vec4( 1.0 );' // do not change? unless there is a texture lookup\n\nexport class ShaderAssemblerCustomMeshDepthDOF extends ShaderAssemblerRender {\n\t// _color_declaration() { return 'vec4 diffuseColor' }\n\t// _template_shader(){ return ShaderLib.standard }\n\tget _template_shader() {\n\t\treturn {\n\t\t\tvertexShader: TemplateVertex,\n\t\t\tfragmentShader: TemplateFragment,\n\t\t\tuniforms: {\n\t\t\t\tmNear: {value: 0},\n\t\t\t\tmFar: {value: 10},\n\t\t\t},\n\t\t};\n\t}\n\tprotected insert_define_after(shader_name: ShaderName) {\n\t\treturn INSERT_DEFINE_AFTER_MAP.get(shader_name);\n\t}\n\tprotected insert_body_after(shader_name: ShaderName) {\n\t\treturn INSERT_BODY_AFTER_MAP.get(shader_name);\n\t}\n\n\t_create_material() {\n\t\tconst template_shader = this._template_shader;\n\t\treturn new ShaderMaterial({\n\t\t\t// defines: {\n\t\t\t// \tDEPTH_PACKING: [RGBADepthPacking, BasicDepthPacking][0]\n\t\t\t// },\n\n\t\t\tuniforms: UniformsUtils.clone(template_shader.uniforms),\n\t\t\tvertexShader: template_shader.vertexShader,\n\t\t\tfragmentShader: template_shader.fragmentShader,\n\t\t});\n\t}\n}\n","export default \"#include <common>\\n\\nvarying float vViewZDepth;\\n\\n// INSERT DEFINES\\n\\n\\n\\nvoid main() {\\n\\n\\t// INSERT BODY\\n\\n\\n\\t#include <project_vertex>\\n\\n\\tvViewZDepth = - mvPosition.z;\\n}\"","export default \"uniform float mNear;\\nuniform float mFar;\\n\\nvarying float vViewZDepth;\\n\\nvoid main() {\\n\\n\\tfloat color = 1.0 - smoothstep( mNear, mFar, vViewZDepth );\\n\\tgl_FragColor = vec4( vec3( color ), 1.0 );\\n\\n}\\n\"","import {TypedMatNode} from './_Base';\nimport {GlAssemblerController} from '../gl/code/Controller';\n\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\n\n// import DisplayFlag from '../Concerns/DisplayFlag';\n\nimport {NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {BaseGlShaderAssembler} from '../gl/code/assemblers/_Base';\nimport {GlNodeChildrenMap} from 'src/engine/poly/registers/Gl';\nimport {BaseGlNodeType} from '../gl/_Base';\nimport {ShaderMaterialWithCustomMaterials} from 'src/core/geometry/Material';\nimport {CustomMaterialName} from '../gl/code/assemblers/_BaseRender';\n\nexport abstract class TypedBuilderMatNode<\n\tA extends BaseGlShaderAssembler,\n\tK extends NodeParamsConfig\n> extends TypedMatNode<ShaderMaterialWithCustomMaterials, K> {\n\tprotected _assembler_controller: GlAssemblerController<A> | undefined;\n\n\t//\n\t//\n\t// MATERIAL\n\t//\n\t//\n\tcreate_material() {\n\t\tconst material = new ShaderMaterial() as ShaderMaterialWithCustomMaterials;\n\n\t\tmaterial.custom_materials = {\n\t\t\t[CustomMaterialName.DEPTH]: new ShaderMaterial(),\n\t\t\t[CustomMaterialName.DEPTH_DOF]: new ShaderMaterial(),\n\t\t\t[CustomMaterialName.DISTANCE]: new ShaderMaterial(),\n\t\t};\n\n\t\treturn material;\n\t}\n\t//\n\t//\n\t// ASSEMBLER\n\t//\n\t//\n\tget assembler_controller() {\n\t\treturn (this._assembler_controller = this._assembler_controller || this._create_assembler_controller());\n\t}\n\tprotected abstract _create_assembler_controller(): GlAssemblerController<A>;\n\n\tcreate_node<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GlNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseGlNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GlNodeChildrenMap>(type: K): GlNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GlNodeChildrenMap[K][];\n\t}\n\n\t//\n\t//\n\t// COMPILATION\n\t//\n\t//\n\tasync compile_if_required() {\n\t\tif (this.assembler_controller.compile_required()) {\n\t\t\tthis._compile();\n\t\t}\n\t}\n\tprotected abstract _compile(): void;\n}\n\nexport type BaseBuilderMatNodeType = TypedBuilderMatNode<BaseGlShaderAssembler, NodeParamsConfig>;\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport {SceneJsonExporter} from './Scene';\n// import {JsonExporterVisitor} from './Visitor';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {JsonExportDispatcher} from './Dispatcher';\nimport {ParamJsonExporterData} from './Param';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\ninterface NamedInputData {\n\tname: string;\n\tnode: string;\n\toutput: string;\n}\ntype IndexedInputData = string | null;\nexport type InputData = NamedInputData | IndexedInputData;\n\ninterface FlagsData {\n\tbypass?: boolean;\n\tdisplay?: boolean;\n}\n\nexport interface NodeJsonExporterData {\n\ttype: string;\n\tnodes: Dictionary<NodeJsonExporterData>;\n\tchildren_context: NodeContext;\n\tparams?: Dictionary<ParamJsonExporterData<ParamType>>;\n\tinputs?: InputData[];\n\tselection?: string[];\n\tflags?: FlagsData;\n\toverride_clonable_state: boolean;\n}\n\nexport interface NodeJsonExporterUIData {\n\tpos?: Number2;\n\tcomment?: string;\n\tnodes: Dictionary<NodeJsonExporterUIData>;\n}\n\nexport class NodeJsonExporter<T extends BaseNodeType> {\n\tprivate _data: NodeJsonExporterData | undefined; // = {} as NodeJsonExporterData;\n\tconstructor(protected _node: T) {}\n\n\tdata(): NodeJsonExporterData {\n\t\tif (!this.is_root()) {\n\t\t\tthis._node.scene.nodes_controller.register_node_context_signature(this._node);\n\t\t}\n\t\tthis._data = {\n\t\t\ttype: this._node.type,\n\t\t} as NodeJsonExporterData;\n\n\t\t// const required_imports = this._node.required_imports()\n\t\t// if(required_imports){\n\t\t// \tthis._data['required_imports'] = required_imports\n\t\t// }\n\n\t\tconst nodes_data = this.nodes_data();\n\t\tif (Object.keys(nodes_data).length > 0) {\n\t\t\tthis._data['nodes'] = nodes_data;\n\n\t\t\t// required by the Store::Scene::Exporter.rb\n\t\t\tconst context = this._node.children_controller?.context;\n\t\t\tif (context) {\n\t\t\t\tthis._data['children_context'] = context;\n\t\t\t}\n\t\t}\n\n\t\tif (!this.is_root()) {\n\t\t\tthis._data['params'] = this.params_data();\n\t\t\t//data['custom'] = []\n\t\t\tthis._data['inputs'] = this.inputs_data();\n\t\t}\n\n\t\t// TODO: does that create flags automatically? it should not\n\t\tif (this._node.flags) {\n\t\t\tthis._data['flags'] = {};\n\t\t\tif (this._node.flags.has_bypass()) {\n\t\t\t\tif (this._node.flags.bypass?.active) {\n\t\t\t\t\tthis._data['flags']['bypass'] = this._node.flags.bypass.active;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this._node.flags.has_display()) {\n\t\t\t\tthis._data['flags']['display'] = this._node.flags.display?.active;\n\t\t\t}\n\t\t}\n\n\t\tif (this._node.children_allowed()) {\n\t\t\tconst selection = this._node.children_controller?.selection;\n\t\t\tif (selection && this._node.children().length > 0) {\n\t\t\t\t// only save the nodes that are still present, in case the selection just got deleted\n\t\t\t\tconst selected_children: BaseNodeType[] = [];\n\t\t\t\tconst selected_ids: Dictionary<boolean> = {};\n\t\t\t\tfor (let selected_node of selection.nodes()) {\n\t\t\t\t\tselected_ids[selected_node.graph_node_id] = true;\n\t\t\t\t}\n\t\t\t\tfor (let child of this._node.children()) {\n\t\t\t\t\tif (child.graph_node_id in selected_ids) {\n\t\t\t\t\t\tselected_children.push(child);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tthis._data['selection'] = selected_children.map((n) => n.name);\n\t\t\t}\n\t\t}\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = this._node.io.inputs.override_clonable_state();\n\t\t\tif (override) {\n\t\t\t\tthis._data['override_clonable_state'] = override;\n\t\t\t}\n\t\t}\n\n\t\t// custom\n\t\tthis.add_custom();\n\n\t\treturn this._data;\n\t}\n\n\tui_data(): NodeJsonExporterUIData {\n\t\tconst data: NodeJsonExporterUIData = {} as NodeJsonExporterUIData;\n\t\tif (!this.is_root()) {\n\t\t\tconst ui_data = this._node.ui_data;\n\t\t\tdata['pos'] = ui_data.position.toArray() as Number2;\n\t\t\tconst comment = ui_data.comment;\n\t\t\tif (comment) {\n\t\t\t\tdata['comment'] = SceneJsonExporter.sanitize_string(comment);\n\t\t\t}\n\t\t}\n\t\tconst children = this._node.children();\n\t\tif (children.length > 0) {\n\t\t\tdata['nodes'] = {};\n\t\t\tchildren.forEach((child) => {\n\t\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tdata['nodes'][child.name] = node_exporter.ui_data();\n\t\t\t});\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprivate is_root() {\n\t\treturn this._node.parent === null && this._node.graph_node_id == this._node.root.graph_node_id;\n\t}\n\n\tprotected inputs_data() {\n\t\tconst data: InputData[] = [];\n\t\t// Object.keys(this._node.io.inputs.inputs()).forEach((input_index) => {\n\t\tthis._node.io.inputs.inputs().forEach((input, input_index) => {\n\t\t\t// const input = this._node.io.inputs.input(input_index);\n\t\t\tif (input) {\n\t\t\t\t// const connection_point = this._node.io.inputs.named_input_connection_points;\n\t\t\t\tconst connection = this._node.io.connections.input_connection(input_index)!;\n\t\t\t\tif (this._node.io.inputs.has_named_inputs) {\n\t\t\t\t\tconst input_name = this._node.io.inputs.named_input_connection_points[input_index].name;\n\t\t\t\t\t// const output_index = input_connections[input_index].output_index();\n\t\t\t\t\tconst output_index = connection.output_index;\n\t\t\t\t\tconst output_name = input.io.outputs.named_output_connection_points[output_index].name;\n\t\t\t\t\tdata.push({name: input_name, node: input.name, output: output_name});\n\t\t\t\t} else {\n\t\t\t\t\tdata.push(input.name);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\treturn data;\n\t}\n\n\tprotected params_data() {\n\t\tconst data: Dictionary<ParamJsonExporterData<ParamType>> = {};\n\n\t\tfor (let param_name of this._node.params.names) {\n\t\t\tconst param = this._node.params.get(param_name);\n\t\t\tif (param && !param.parent_param) {\n\t\t\t\tconst param_exporter = JsonExportDispatcher.dispatch_param(param); //.visit(JsonExporterVisitor); //.json_exporter()\n\t\t\t\tif (param_exporter.required) {\n\t\t\t\t\tconst params_data = param_exporter.data();\n\t\t\t\t\tdata[param.name] = params_data;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn data;\n\t}\n\n\tprotected nodes_data() {\n\t\tconst data: Dictionary<NodeJsonExporterData> = {};\n\t\tfor (let child of this._node.children()) {\n\t\t\tconst node_exporter = JsonExportDispatcher.dispatch_node(child); //.json_exporter()\n\t\t\tdata[child.name] = node_exporter.data();\n\t\t}\n\t\treturn data;\n\t}\n\n\tprotected add_custom() {}\n}\n","import {ParamJsonExporter, ParamJsonExporterDataByName} from '../Param';\n// import {JsonExporterVisitor} from '../Visitor';\nimport {TypedMultipleParam} from 'src/engine/params/_Multiple';\nimport {JsonExportDispatcher} from '../Dispatcher';\n\nexport class ParamMultipleJsonExporter extends ParamJsonExporter<TypedMultipleParam<any>> {\n\tadd_main() {\n\t\tconst components_data: ParamJsonExporterDataByName = {};\n\t\tconst component_names = this._param.component_names;\n\t\tthis._param.components?.forEach((component, i) => {\n\t\t\tconst exporter = JsonExportDispatcher.dispatch_param(component); //.accepts_visitor();\n\t\t\tif (exporter.required) {\n\t\t\t\tcomponents_data[component_names[i]] = exporter.data();\n\t\t\t}\n\t\t});\n\n\t\treturn components_data;\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {TypedNumericParam} from 'src/engine/params/_Numeric';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nexport class ParamNumericJsonExporter extends ParamJsonExporter<TypedNumericParam<ParamType>> {\n\tadd_main() {\n\t\t// if (this._param.has_expression() && this._param.expression_controller?.expression) {\n\t\t// \t// const escaped_expression = this._param.expression().replace(/'/g, \"\\\\'\");\n\t\t// \tthis._data['expression'] = this._param.expression_controller?.expression;\n\t\t// } else {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t\t// }\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {OperatorPathParam} from 'src/engine/params/OperatorPath';\nimport {SceneJsonExporter} from '../Scene';\n\nexport class ParamOperatorPathJsonExporter extends ParamJsonExporter<OperatorPathParam> {\n\tadd_main() {\n\t\tlet val = this._param.raw_input;\n\t\t// val = val.replace(/'/g, \"\\\\'\");\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","// import lodash_isString from 'lodash/isString'\nimport {ParamJsonExporter} from '../Param';\nimport {SceneJsonExporter} from '../Scene';\nimport {StringParam} from 'src/engine/params/String';\n\nexport class ParamStringJsonExporter extends ParamJsonExporter<StringParam> {\n\tadd_main() {\n\t\t// let val = this._param.input_value();\n\t\tlet val = this._param.raw_input;\n\t\t// if (lodash_isString(val)){\n\t\tval = SceneJsonExporter.sanitize_string(val);\n\t\t// }\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = val;\n\t\t} else {\n\t\t\treturn val;\n\t\t}\n\t}\n}\n","import {ParamJsonExporter} from '../Param';\nimport {RampParam} from 'src/engine/params/Ramp';\n\nexport class ParamRampJsonExporter extends ParamJsonExporter<RampParam> {\n\tadd_main() {\n\t\tif (this._require_data_complex()) {\n\t\t\tthis._complex_data['raw_input'] = this._param.raw_input_serialized;\n\t\t} else {\n\t\t\treturn this._param.raw_input_serialized;\n\t\t}\n\t}\n}\n","import {NoColors} from 'three/src/constants';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nclass MeshLambertMatParamsConfig extends TextureAlphaMapParamConfig(\n\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n) {}\nconst ParamsConfig = new MeshLambertMatParamsConfig();\n\nexport class MeshLambertMatNode extends TypedMatNode<MeshLambertMaterial, MeshLambertMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_lambert';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshLambertMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this);\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this);\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t});\n\t}\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {NoColors} from 'three/src/constants';\nimport {MeshStandardMaterial} from 'three/src/materials/MeshStandardMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ParamConfig, NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\nimport {SkinningController, SkinningParamConfig} from './utils/SkinningController';\nimport {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\nimport {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\nimport {TextureEnvMapController, TextureEnvMapParamConfig} from './utils/TextureEnvMapController';\nclass MeshStandardMatParamsConfig extends TextureEnvMapParamConfig(\n\tTextureAlphaMapParamConfig(\n\t\tTextureMapParamConfig(SkinningParamConfig(SideParamConfig(ColorParamConfig(NodeParamsConfig))))\n\t)\n) {\n\tmetalness = ParamConfig.FLOAT(1);\n\troughness = ParamConfig.FLOAT(0);\n}\n// TODO: add the following texture params:\n// - aoMap+aoMapIntensity\n// - bumpMap+bumpScale\n// - displacementMap+displaycementScale+displacementBias\n// - emissiveMap\n// - envMap\n// - lightMap\n// - metalnessMap\n// - normalMap\n// - roughnessMap,\nconst ParamsConfig = new MeshStandardMatParamsConfig();\n\nexport class MeshStandardMatNode extends TypedMatNode<MeshStandardMaterial, MeshStandardMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'mesh_standard';\n\t}\n\n\tcreate_material() {\n\t\treturn new MeshStandardMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t\tmetalness: 1,\n\t\t\troughness: 0,\n\t\t});\n\t}\n\n\treadonly texture_map_controller: TextureMapController = new TextureMapController(this);\n\treadonly texture_alpha_map_controller: TextureAlphaMapController = new TextureAlphaMapController(this);\n\treadonly texture_env_map_controller: TextureEnvMapController = new TextureEnvMapController(this);\n\tinitialize_node() {\n\t\tthis.params.set_post_create_params_hook(() => {\n\t\t\tthis.texture_map_controller.initialize_node();\n\t\t\tthis.texture_alpha_map_controller.initialize_node();\n\t\t\tthis.texture_env_map_controller.initialize_node();\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\tSkinningController.update(this);\n\t\tthis.texture_map_controller.update();\n\t\tthis.texture_alpha_map_controller.update();\n\t\tthis.texture_env_map_controller.update();\n\n\t\tif (this._material) {\n\t\t\tthis._material.envMapIntensity = this.pv.env_map_intensity;\n\t\t\tthis._material.roughness = this.pv.roughness;\n\t\t\tthis._material.metalness = this.pv.metalness;\n\t\t}\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","// import {BaseController} from './_BaseController';\nimport {Material} from 'three/src/materials/Material';\nimport {Texture} from 'three/src/textures/Texture';\nimport {FileCopNode} from 'src/engine/nodes/cop/File';\nimport {TypedMatNode} from '../_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n// import {NodeContext} from 'src/engine/poly/NodeContext';\n// import {BaseCopNodeType} from '../../cop/_Base';\nimport {BaseTextureMapController, BooleanParamOptions, OperatorPathOptions} from './_BaseTextureController';\nexport function TextureEnvMapParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tuse_env_map = ParamConfig.BOOLEAN(0, BooleanParamOptions(TextureEnvMapController));\n\t\tenv_map = ParamConfig.OPERATOR_PATH(\n\t\t\tFileCopNode.DEFAULT_NODE_PATH.ENV_MAP,\n\t\t\tOperatorPathOptions(TextureEnvMapController, 'use_env_map')\n\t\t);\n\t\tenv_map_intensity = ParamConfig.FLOAT(1, {visible_if: {use_env_map: 1}});\n\t};\n}\nclass TextureEnvMaterial extends Material {\n\tenvMap!: Texture | null;\n}\nclass TextureEnvMapParamsConfig extends TextureEnvMapParamConfig(NodeParamsConfig) {}\nclass TextureEnvMapMatNode extends TypedMatNode<TextureEnvMaterial, TextureEnvMapParamsConfig> {\n\ttexture_env_map_controller!: TextureEnvMapController;\n\tcreate_material() {\n\t\treturn new TextureEnvMaterial();\n\t}\n}\n\n// import {EXRLoader} from 'three/examples/jsm/loaders/EXRLoader';\n// import {FloatType} from 'three/src/constants';\n// import {POLY} from 'src/engine/Poly';\n// import {PMREMGenerator} from 'three/src/extras/PMREMGenerator';\nexport class TextureEnvMapController extends BaseTextureMapController {\n\tconstructor(protected node: TextureEnvMapMatNode) {\n\t\tsuper(node);\n\t}\n\tinitialize_node() {\n\t\tthis.add_hooks(this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tasync update() {\n\t\tthis._update_texture(this.node.material, 'envMap', this.node.p.use_env_map, this.node.p.env_map);\n\t}\n\tstatic async update(node: TextureEnvMapMatNode) {\n\t\tnode.texture_env_map_controller.update();\n\t}\n\n\t// const renderer = POLY.renderers_controller.first_renderer();\n\t// if (renderer) {\n\t// \tconst pmremGenerator = new PMREMGenerator(renderer);\n\t// \tconsole.log(pmremGenerator);\n\n\t// \tnew EXRLoader().setDataType(FloatType).load('/examples/textures/piz_compressed.exr', function(texture) {\n\t// \t\tconsole.log(texture);\n\t// \t\tconst exrCubeRenderTarget = pmremGenerator.fromEquirectangular(texture);\n\t// \t\tconst exrBackground = exrCubeRenderTarget.texture;\n\t// \t\tnode.scene.display_scene.background = exrBackground;\n\t// \t\tnode.material.envMap = exrBackground;\n\t// \t\tnode.material.envMapIntensity = 1;\n\t// \t\tnode.material.needsUpdate = true;\n\n\t// \t\ttexture.dispose();\n\t// \t});\n\t// \tpmremGenerator.compileEquirectangularShader();\n\t// }\n\t// }\n\n\t// static async update(node: TextureEnvMapMatNode) {\n\t// \tconst material = node.material;\n\n\t// \tif (node.pv.use_map) {\n\t// \t\tconst found_node = node.p.Env_map.found_node();\n\t// \t\tif (found_node) {\n\t// \t\t\tif (found_node.node_context() == NodeContext.COP) {\n\t// \t\t\t\tconst texture_node = found_node as BaseCopNodeType;\n\n\t// \t\t\t\t// if the texture has already been created, we don't have to wait for request_container\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\ttexture_node.request_container();\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tawait texture_node.request_container();\n\t// \t\t\t\t}\n\n\t// \t\t\t\tif (texture_node.texture) {\n\t// \t\t\t\t\tmaterial.EnvMap = texture_node.texture;\n\t// \t\t\t\t\treturn;\n\t// \t\t\t\t}\n\t// \t\t\t} else {\n\t// \t\t\t\tnode.states.error.set(`found map node is not a COP node`);\n\t// \t\t\t}\n\t// \t\t} else {\n\t// \t\t\tnode.states.error.set(`could not find map node`);\n\t// \t\t}\n\t// \t}\n\t// \tmaterial.EnvMap = null;\n\t// }\n}\n","import {NoColors} from 'three/src/constants';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {FrontSide} from 'three/src/constants';\nimport {TypedMatNode} from './_Base';\n\nimport {ColorsController, ColorParamConfig} from './utils/ColorsController';\nimport {SideController, SideParamConfig} from './utils/SideController';\n// import {TextureMapController, TextureMapParamConfig} from './utils/TextureMapController';\n// import {TextureAlphaMapController, TextureAlphaMapParamConfig} from './utils/TextureAlphaMapController';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nexport function PointsParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\tsize_attenuation = ParamConfig.BOOLEAN(1);\n\t};\n}\n\nclass PointsMatParamsConfig extends SideParamConfig(ColorParamConfig(PointsParamConfig(NodeParamsConfig))) {}\nconst ParamsConfig = new PointsMatParamsConfig();\n\nexport class PointsMatNode extends TypedMatNode<PointsMaterial, PointsMatParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'points';\n\t}\n\n\tcreate_material() {\n\t\treturn new PointsMaterial({\n\t\t\tvertexColors: NoColors,\n\t\t\tside: FrontSide,\n\t\t\tcolor: 0xffffff,\n\t\t\topacity: 1,\n\t\t});\n\t}\n\n\tasync cook() {\n\t\tColorsController.update(this);\n\t\tSideController.update(this);\n\t\t// await TextureMapController.update(this);\n\t\t// await TextureAlphaMapController.update(this);\n\n\t\tthis.material.size = this.pv.size;\n\t\tthis.material.sizeAttenuation = this.pv.size_attenuation;\n\n\t\tthis.set_material(this.material);\n\t}\n}\n","import {CATEGORY_OBJ} from './Category';\n\nimport {AmbientLightObjNode} from 'src/engine/nodes/obj/AmbientLight';\nimport {AreaLightObjNode} from 'src/engine/nodes/obj/AreaLight';\nimport {DirectionalLightObjNode} from 'src/engine/nodes/obj/DirectionalLight';\nimport {HemisphereLightObjNode} from 'src/engine/nodes/obj/HemisphereLight';\nimport {PointLightObjNode} from 'src/engine/nodes/obj/PointLight';\nimport {SpotLightObjNode} from 'src/engine/nodes/obj/SpotLight';\n\nimport {EventsObjNode} from 'src/engine/nodes/obj/Events';\nimport {MaterialsObjNode} from 'src/engine/nodes/obj/Materials';\nimport {CopObjNode} from 'src/engine/nodes/obj/Cop';\nimport {PostProcessObjNode} from 'src/engine/nodes/obj/PostProcess';\n\nimport {GeoObjNode} from 'src/engine/nodes/obj/Geo';\nimport {NullObjNode} from 'src/engine/nodes/obj/Null';\nimport {FogObjNode} from 'src/engine/nodes/obj/Fog';\n\nimport {OrthographicCameraObjNode} from 'src/engine/nodes/obj/OrthographicCamera';\nimport {PerspectiveCameraObjNode} from 'src/engine/nodes/obj/PerspectiveCamera';\n// import {CubeCameraObj} from 'src/engine/nodes/obj/CubeCamera';\n\nexport interface ObjNodeChildrenMap {\n\tambient_light: AmbientLightObjNode;\n\tarea_light: AreaLightObjNode;\n\tdirectional_light: DirectionalLightObjNode;\n\themisphere_light: HemisphereLightObjNode;\n\tpoint_light: PointLightObjNode;\n\tspot_light: SpotLightObjNode;\n\tcop: CopObjNode;\n\tevents: EventsObjNode;\n\tfog: FogObjNode;\n\tgeo: GeoObjNode;\n\tmaterials: MaterialsObjNode;\n\tnull: NullObjNode;\n\tperspective_camera: PerspectiveCameraObjNode;\n\tpost_process: PostProcessObjNode;\n\torthographic_camera: OrthographicCameraObjNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class ObjRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AmbientLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(AreaLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(DirectionalLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(HemisphereLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(PointLightObjNode, CATEGORY_OBJ.LIGHT);\n\t\tpoly.register_node(SpotLightObjNode, CATEGORY_OBJ.LIGHT);\n\n\t\tpoly.register_node(EventsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(MaterialsObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(CopObjNode, CATEGORY_OBJ.MANAGER);\n\t\tpoly.register_node(PostProcessObjNode, CATEGORY_OBJ.MANAGER);\n\n\t\tpoly.register_node(GeoObjNode, CATEGORY_OBJ.GEOMETRY);\n\t\tpoly.register_node(NullObjNode, CATEGORY_OBJ.GEOMETRY);\n\n\t\tpoly.register_node(OrthographicCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\tpoly.register_node(PerspectiveCameraObjNode, CATEGORY_OBJ.CAMERA);\n\t\t// poly.register_node(CubeCameraObj, CATEGORY_OBJ.CAMERA)\n\n\t\tpoly.register_node(FogObjNode, CATEGORY_OBJ.MISC);\n\t}\n}\n","import {AmbientLight} from 'three/src/lights/AmbientLight';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AmbientLightObjParamsConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n}\nconst ParamsConfig = new AmbientLightObjParamsConfig();\n\nexport class AmbientLightObjNode extends TypedLightObjNode<AmbientLight, AmbientLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\n\tstatic type() {\n\t\treturn 'ambient_light';\n\t}\n\n\tcreate_light() {\n\t\treturn new AmbientLight();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {TypedContainer} from './_Base';\nimport {ContainableMap} from './utils/ContainableMap';\n\nexport class ObjectContainer extends TypedContainer<ContainableMap['OBJECT']> {\n\tset_content(content: ContainableMap['OBJECT']) {\n\t\tsuper.set_content(content);\n\t}\n\tset_object(object: Object3D) {\n\t\treturn this.set_content(object);\n\t}\n\thas_object() {\n\t\treturn this.has_content();\n\t}\n\tobject() {\n\t\treturn this.content();\n\t}\n\n\t// infos() {\n\t// \tconst node = this.node()\n\t// \treturn [\n\t// \t\t`full path: ${node.full_path()}`,\n\t// \t\t`${node.cooks_count()} cooks`,\n\t// \t\t`cook time: ${node.cook_time()}`,\n\t// \t\tthis.content(),\n\t// \t]\n\t// }\n}\n","import {RectAreaLight} from 'three/src/lights/RectAreaLight';\n// import {RectAreaLightHelper} from 'modules/three/examples/jsm/helpers/RectAreaLightHelper';\nimport {RectAreaLightUniformsLib} from 'modules/three/examples/jsm/lights/RectAreaLightUniformsLib';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n// import {HelperController, HelperParamConfig} from './utils/HelperController';\n\nexport function AreaLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\twidth = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t\theight = ParamConfig.FLOAT(1, {range: [0, 10]});\n\t};\n}\n\nclass AreaLightObjParamsConfig extends AreaLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new AreaLightObjParamsConfig();\n\nexport class AreaLightObjNode extends BaseLightTransformedObjNode<RectAreaLight, AreaLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'area_light';\n\t}\n\t// private _helper_controller = new HelperController<RectAreaLightHelper, RectAreaLight>(this, RectAreaLightHelper);\n\t// initialize_node() {\n\t// \tthis._helper_controller.initialize_node();\n\t// }\n\n\tcreate_light() {\n\t\tconst object = new RectAreaLight(0xffffff, 1, 1, 1);\n\n\t\treturn object;\n\t}\n\n\t// create_light_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', [1, 1, 1]);\n\t// \tthis.add_param(ParamType.FLOAT, 'intensity', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'width', 1, {range: [0, 10]});\n\t// \tthis.add_param(ParamType.FLOAT, 'height', 1, {range: [0, 10]});\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.width = this.pv.width;\n\t\tthis.light.height = this.pv.height;\n\t\t// this._helper_controller.update();\n\t}\n\n\tasync cook() {\n\t\t// const {RectAreaLightUniformsLib} = await CoreScriptLoader.load_module_three_light('RectAreaLightUniformsLib');\n\t\t// const module = RectAreaLightUniformsLib\n\t\tif (!(RectAreaLightUniformsLib as any).initialized) {\n\t\t\tRectAreaLightUniformsLib.init();\n\t\t\t(RectAreaLightUniformsLib as any).initialized = true;\n\t\t}\n\n\t\tthis.transform_controller.update();\n\t\tthis.update_light_params();\n\t\tthis.update_shadow_params();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {DirectionalLightHelper} from './utils/helpers/DirectionalLightHelper';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\n// import {NodeContext} from 'src/engine/poly/NodeContext';\n// import {BaseObjNodeType} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nexport function DirectionalLightParamConfig<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\t// transform = ParamConfig.FOLDER();\n\t\t// directional\n\t\t// position = ParamConfig.VECTOR3([0, 1, 0]);\n\t\t// target = ParamConfig.VECTOR3([0, 0, 0]);\n\t\t// lookat = ParamConfig.OPERATOR_PATH('', {dependent_on_found_node: false});\n\n\t\tlight = ParamConfig.FOLDER();\n\t\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\t\tintensity = ParamConfig.FLOAT(1);\n\t\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t\t// shadows\n\t\tcast_shadows = ParamConfig.BOOLEAN(1);\n\t\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\t\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t\t// helper\n\t\tshow_helper = ParamConfig.BOOLEAN(1);\n\t\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n\t};\n}\n\nclass DirectionalLightObjParamsConfig extends DirectionalLightParamConfig(TransformedParamConfig(NodeParamsConfig)) {}\nconst ParamsConfig = new DirectionalLightObjParamsConfig();\n\nexport class DirectionalLightObjNode extends BaseLightTransformedObjNode<\n\tDirectionalLight,\n\tDirectionalLightObjParamsConfig\n> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'directional_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<DirectionalLight>(\n\t\tthis,\n\t\t(<unknown>DirectionalLightHelper) as HelperConstructor<DirectionalLight>,\n\t\t'DirectionalLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.inputs.set_depends_on_inputs(false);\n\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new DirectionalLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'DirectionalLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\t// this.light.position.copy(this.pv.t);\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.shadow.camera.far = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\n\t\t// updating the camera matrix is not necessary for point light\n\t\t// so probably should not for this\n\t\tthis.light.shadow.camera.updateProjectionMatrix();\n\t}\n}\n","// import {Object3D} from 'three/src/core/Object3D';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {DirectionalLightObjNode} from '../../DirectionalLight';\nimport {DirectionalLight} from 'three/src/lights/DirectionalLight';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {Line} from 'three/src/objects/Line';\n\nexport class DirectionalLightHelper extends BaseLightHelper<DirectionalLight, DirectionalLightObjNode> {\n\tprivate _square = new Line();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\t\tconst size = 1;\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew Float32BufferAttribute(\n\t\t\t\t[-size, size, 0, size, size, 0, size, -size, 0, -size, -size, 0, -size, size, 0],\n\t\t\t\t3\n\t\t\t)\n\t\t);\n\n\t\tthis._square.geometry = geometry;\n\t\tthis._square.material = this._line_material;\n\t\tthis._square.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._square);\n\t}\n\n\t// private _v1 = new Vector3();\n\t// private _v2 = new Vector3();\n\t// private _v3 = new Vector3();\n\tupdate() {\n\t\t// this._v1.copy(this.node.light.position);\n\t\t// this._v2.copy(this.node.light.target.position);\n\t\t// this._v3.subVectors(this._v2, this._v1);\n\n\t\t// this._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\t// this._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\t// this._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {HemisphereLight} from 'three/src/lights/HemisphereLight';\nimport {HemisphereLightHelper} from './utils/helpers/HemisphereLightHelper';\nimport {TypedLightObjNode} from './_BaseLight';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nclass HemisphereLightObjParamsConfig extends NodeParamsConfig {\n\tlight = ParamConfig.FOLDER();\n\tsky_color = ParamConfig.COLOR([0.2, 0.7, 1]);\n\tground_color = ParamConfig.COLOR([0.1, 0.1, 0.25]);\n\tintensity = ParamConfig.FLOAT(1);\n\tposition = ParamConfig.VECTOR3([0, 1, 0]);\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new HemisphereLightObjParamsConfig();\n\nexport class HemisphereLightObjNode extends TypedLightObjNode<HemisphereLight, HemisphereLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hemisphere_light';\n\t}\n\tprivate _helper_controller = new HelperController<HemisphereLight>(\n\t\tthis,\n\t\t(<unknown>HemisphereLightHelper) as HelperConstructor<HemisphereLight>,\n\t\t'HemisphereLightHelper'\n\t);\n\n\tcreate_light() {\n\t\tconst light = new HemisphereLight();\n\n\t\treturn light;\n\t}\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.sky_color;\n\t\tthis.light.groundColor = this.pv.ground_color;\n\t\tthis.light.position.copy(this.pv.position);\n\t\tthis.light.intensity = this.pv.intensity;\n\n\t\tthis._helper_controller.update();\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {OctahedronBufferGeometry} from 'three/src/geometries/OctahedronGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {VertexColors} from 'three/src/constants';\n\nimport {HemisphereLightObjNode} from '../../HemisphereLight';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {HemisphereLight} from 'three/src/lights/HemisphereLight';\n\nexport class HemisphereLightHelper extends BaseLightHelper<HemisphereLight, HemisphereLightObjNode> {\n\tprivate _geometry = new OctahedronBufferGeometry(1);\n\n\tprotected build_helper() {\n\t\tthis._geometry.rotateZ(Math.PI * 0.5);\n\n\t\tthis._material.vertexColors = VertexColors;\n\n\t\tconst position = this._geometry.getAttribute('position');\n\t\tconst colors = new Float32Array(position.count * 3);\n\n\t\tthis._geometry.setAttribute('color', new BufferAttribute(colors, 3));\n\t\tthis._object.geometry = this._geometry;\n\t\tthis._object.material = this._material;\n\t}\n\n\t// private _inverse_position = new Vector3();\n\tprivate _quat = new Quaternion();\n\tprivate _default_position = new Vector3(0, 1, 0);\n\tprivate _color1 = new Color();\n\tprivate _color2 = new Color();\n\tupdate() {\n\t\tif (!this.node.pv.position) {\n\t\t\treturn;\n\t\t}\n\t\t// this._inverse_position.copy(this.node.pv.position).multiplyScalar(-1)\n\t\tthis._object.position.copy(this.node.pv.position).multiplyScalar(-1);\n\t\tthis._quat.setFromUnitVectors(this._default_position, this.node.pv.position);\n\t\tthis._object.setRotationFromQuaternion(this._quat);\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\n\t\tconst colors = this._geometry.getAttribute('color') as BufferAttribute;\n\n\t\tthis._color1.copy(this.node.light.color);\n\t\tthis._color2.copy(this.node.light.groundColor);\n\n\t\tfor (let i = 0, l = colors.count; i < l; i++) {\n\t\t\tconst color = i < l / 2 ? this._color1 : this._color2;\n\n\t\t\tcolors.setXYZ(i, color.r, color.g, color.b);\n\t\t}\n\n\t\tcolors.needsUpdate = true;\n\t}\n}\n","import {PointLight} from 'three/src/lights/PointLight';\nimport {PointLightHelper} from './utils/helpers/PointLightHelper';\n\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\n// import {HelperController} from './utils/HelperController';\nclass PointLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tdecay = ParamConfig.FLOAT(0.1);\n\tdistance = ParamConfig.FLOAT(100);\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024], {visible_if: {cast_shadows: 1}});\n\tshadow_bias = ParamConfig.FLOAT(0.001, {visible_if: {cast_shadows: 1}});\n\tshadow_near = ParamConfig.FLOAT(1, {visible_if: {cast_shadows: 1}});\n\tshadow_far = ParamConfig.FLOAT(100, {visible_if: {cast_shadows: 1}});\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new PointLightObjParamsConfig();\n\nexport class PointLightObjNode extends BaseLightTransformedObjNode<PointLight, PointLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point_light';\n\t}\n\tprivate _helper_controller = new HelperController<PointLight>(\n\t\tthis,\n\t\t(<unknown>PointLightHelper) as HelperConstructor<PointLight>,\n\t\t'PointLightHelper'\n\t);\n\tinitialize_node() {\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new PointLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\treturn light;\n\t}\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.decay = this.pv.decay;\n\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\tthis.light.shadow.camera.near = this.pv.shadow_near;\n\t\tthis.light.shadow.camera.far = this.pv.shadow_far;\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {PointLightObjNode} from '../../PointLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {PointLight} from 'three/src/lights/PointLight';\n\nexport class PointLightHelper extends BaseLightHelper<PointLight, PointLightObjNode> {\n\tprotected build_helper() {\n\t\tconst size = 1;\n\t\tthis._object.geometry = new SphereBufferGeometry(size, 4, 2);\n\t\tthis._object.material = this._material;\n\t}\n\n\tupdate() {\n\t\tthis._object.scale.setScalar(this.node.pv.helper_size);\n\t\tthis._material.color.copy(this.node.light.color);\n\t}\n}\n","import {SpotLight} from 'three/src/lights/SpotLight';\n// import {SpotLightHelper} from 'three/src/helpers/SpotLightHelper';\nimport {BaseLightTransformedObjNode} from './_BaseLightTransformed';\nimport {TransformedParamConfig} from './utils/TransformController';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {HelperController, HelperConstructor} from './utils/HelperController';\nimport {SpotLightHelper} from './utils/helpers/SpotLightHelper';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {HelperController} from './utils/HelperController';\nclass SpotLightObjParamsConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tlight = ParamConfig.FOLDER();\n\tcolor = ParamConfig.COLOR([1, 1, 1]);\n\tintensity = ParamConfig.FLOAT(1);\n\tangle = ParamConfig.FLOAT(45, {range: [0, 180]});\n\tpenumbra = ParamConfig.FLOAT(0.1);\n\tdecay = ParamConfig.FLOAT(0.1, {range: [0, 1]});\n\tdistance = ParamConfig.FLOAT(100, {range: [0, 100]});\n\t// target = ParamConfig.OPERATOR_PATH('');\n\n\t// shadows\n\tcast_shadows = ParamConfig.BOOLEAN(1);\n\tshadow_res = ParamConfig.VECTOR2([1024, 1024]);\n\tshadow_bias = ParamConfig.FLOAT(0.001);\n\n\t// helper\n\tshow_helper = ParamConfig.BOOLEAN(1);\n\thelper_size = ParamConfig.FLOAT(1, {visible_if: {show_helper: 1}});\n}\nconst ParamsConfig = new SpotLightObjParamsConfig();\n\nexport class SpotLightObjNode extends BaseLightTransformedObjNode<SpotLight, SpotLightObjParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'spot_light';\n\t}\n\tprivate _target_target!: Object3D;\n\tprivate _helper_controller = new HelperController<SpotLight>(\n\t\tthis,\n\t\t(<unknown>SpotLightHelper) as HelperConstructor<SpotLight>,\n\t\t'SpotLightHelper'\n\t);\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0, 1);\n\t\tthis._helper_controller.initialize_node();\n\t}\n\n\tcreate_light() {\n\t\tconst light = new SpotLight();\n\n\t\tlight.castShadow = true;\n\t\tlight.shadow.bias = -0.001;\n\t\tlight.shadow.mapSize.x = 1024;\n\t\tlight.shadow.mapSize.y = 1024;\n\t\tlight.shadow.camera.near = 0.1;\n\n\t\tthis._target_target = light.target;\n\t\tthis._target_target.name = 'SpotLight Default Target';\n\t\tthis.object.add(this._target_target);\n\n\t\treturn light;\n\t}\n\t// add_object_to_parent(parent: Object3D) {\n\t// \tsuper.add_object_to_parent(parent);\n\t// \tparent.add(this._target_target);\n\t// }\n\t// remove_object_from_parent() {\n\t// \tsuper.remove_object_from_parent();\n\t// \tconst parent = this._target_target.parent;\n\t// \tif (parent) {\n\t// \t\tparent.remove(this._target_target);\n\t// \t}\n\t// }\n\n\tupdate_light_params() {\n\t\tthis.light.color = this.pv.color;\n\t\tthis.light.intensity = this.pv.intensity;\n\t\tthis.light.angle = this.pv.angle * (Math.PI / 180);\n\t\tthis.light.penumbra = this.pv.penumbra;\n\t\tthis.light.decay = this.pv.decay;\n\t\tthis.light.distance = this.pv.distance;\n\n\t\tthis._helper_controller.update();\n\t}\n\tupdate_shadow_params() {\n\t\tthis.light.castShadow = this.pv.cast_shadows;\n\t\tthis.light.shadow.mapSize.copy(this.pv.shadow_res);\n\t\t// object.shadow.camera.near = this.pv.shadow_near\n\t\t// object.shadow.camera.far = this.pv.shadow_far\n\t\tthis.light.shadow.bias = this.pv.shadow_bias;\n\t}\n}\n","import {SpotLightObjNode} from '../../SpotLight';\n// import {Mesh} from 'three/src/objects/Mesh';\n// import {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {BaseLightHelper} from './_BaseLightHelper';\nimport {SpotLight} from 'three/src/lights/SpotLight';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n\nexport class SpotLightHelper extends BaseLightHelper<SpotLight, SpotLightObjNode> {\n\tprivate _cone = new LineSegments();\n\tprivate _line_material = new LineBasicMaterial({fog: false});\n\tprotected build_helper() {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst positions = [0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 0, -1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, -1, 1];\n\n\t\tfor (let i = 0, j = 1, l = 32; i < l; i++, j++) {\n\t\t\tconst p1 = (i / l) * Math.PI * 2;\n\t\t\tconst p2 = (j / l) * Math.PI * 2;\n\n\t\t\tpositions.push(Math.cos(p1), Math.sin(p1), 1, Math.cos(p2), Math.sin(p2), 1);\n\t\t}\n\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tthis._cone.geometry = geometry;\n\n\t\tthis._cone.material = this._line_material;\n\t\tthis._cone.rotateX(Math.PI * 0.5);\n\n\t\tthis.object.add(this._cone);\n\t}\n\n\tupdate() {\n\t\tconst coneLength = (this.node.light.distance ? this.node.light.distance : 1000) * this.node.pv.helper_size;\n\t\tconst coneWidth = coneLength * Math.tan(this.node.light.angle);\n\n\t\tthis._cone.scale.set(coneWidth, coneWidth, coneLength);\n\n\t\tthis._line_material.color.copy(this.node.light.color);\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {EventNodeChildrenMap} from 'src/engine/poly/registers/Event';\nimport {BaseEventNodeType} from '../event/_Base';\n\nexport class EventsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.EVENT;\n\tstatic type() {\n\t\treturn 'events';\n\t}\n\n\tprotected _children_controller_context = NodeContext.EVENT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as EventNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseEventNodeType[];\n\t}\n\tnodes_by_type<K extends keyof EventNodeChildrenMap>(type: K): EventNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as EventNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {ObjNodeRenderOrder} from './_Base';\nimport {MatNodeChildrenMap} from 'src/engine/poly/registers/Mat';\nimport {BaseMatNodeType} from '../mat/_Base';\n\nexport class MaterialsObjNode extends BaseManagerObjNode {\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MAT;\n\tstatic type() {\n\t\treturn 'materials';\n\t}\n\t// children_context(){ return NodeContext.MAT }\n\n\tprotected _children_controller_context = NodeContext.MAT;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t}\n\n\tcreate_node<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as MatNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseMatNodeType[];\n\t}\n\tnodes_by_type<K extends keyof MatNodeChildrenMap>(type: K): MatNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as MatNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {CopNodeChildrenMap} from 'src/engine/poly/registers/Cop';\nimport {BaseCopNodeType} from '../cop/_Base';\n\nexport class CopObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'cop';\n\t}\n\t// children_context(){ return NodeContext.COP }\n\n\tprotected _children_controller_context = NodeContext.COP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n\n\tcreate_node<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as CopNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseCopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof CopNodeChildrenMap>(type: K): CopNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as CopNodeChildrenMap[K][];\n\t}\n}\n","import {BaseManagerObjNode} from './_BaseManager';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\nexport class PostProcessObjNode extends BaseManagerObjNode {\n\tstatic type() {\n\t\treturn 'post_process';\n\t}\n\t// children_context(){ return NodeContext.POST }\n\n\tprotected _children_controller_context = NodeContext.POST;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\t\t// this._init_manager();\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\n// const THREE = {Group};\n\n// import {CoreTransform} from 'src/core/Transform';\n\nimport {BaseNodeType} from '../_Base';\nimport {DisplayNodeController} from '../utils/DisplayNodeController';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n\n//import Layers from './Concerns/Layers'\n// import {Transformed} from './Concerns/Transformed';\n\n// sop map\nimport {BaseSopNodeType} from '../sop/_Base';\n// import {PolyScene} from 'src/engine/scene/PolyScene';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n\nimport {GeoNodeChildrenMap} from 'src/engine/poly/registers/Sop';\nimport {FlagsControllerD} from '../utils/FlagsController';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass GeoObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {\n\tdisplay = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new GeoObjParamConfig();\n\nexport class GeoObjNode extends TypedObjNode<Group, GeoObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'geo';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tprotected _display_node_controller: DisplayNodeController = new DisplayNodeController(this);\n\tget display_node_controller() {\n\t\treturn this._display_node_controller;\n\t}\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\n\tprivate _sop_group = this._create_sop_group();\n\tprivate _create_sop_group() {\n\t\treturn new Group();\n\t}\n\tget sop_group() {\n\t\treturn this._sop_group;\n\t}\n\tset_sop_group_name() {\n\t\tthis._sop_group.name = `${this.full_path()}:sop_group`;\n\t}\n\n\t// children_context() {\n\t// \treturn NodeContext.SOP;\n\t// }\n\n\tprotected _children_controller_context = NodeContext.SOP;\n\tinitialize_node() {\n\t\tthis.children_controller?.init();\n\n\t\tthis.display_node_controller.initialize_node();\n\t\tthis.transform_controller.initialize_node();\n\t\t// this.flags.display.add_hook(() => {\n\t\t// \tthis.set_used_in_scene(this.flags.display.active);\n\t\t// });\n\n\t\tthis.object.add(this.sop_group);\n\n\t\tthis.name_controller.add_post_set_full_path_hook(this.set_sop_group_name.bind(this));\n\t\tthis._create_sop_group();\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// \taffects_hierarchy: true,\n\t\t// });\n\t\t// this._init_dirtyable_hook();\n\n\t\t// this.io.inputs.set_count(0, 1);\n\t\t// this.io.outputs.set_has_one_output();\n\t}\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\n\t//base_layers_included: -> false\n\n\t// create_params() {\n\t// \t// CoreTransform.create_params(this);\n\t// }\n\t//this.create_layers_params()\n\n\trequest_display_node() {\n\t\tif (!this.scene.loading_controller.auto_updating) {\n\t\t\treturn;\n\t\t}\n\n\t\t// TODO: typescript\n\t\t// if (this.is_displayed)\n\t\t// \tconst display_node = this.display_node();\n\t\t// \tif (display_node) {\n\t\t// \t\tdisplay_node.request_container_p().then(async (container) => {\n\t\t// \t\t\tif (!this._sop_loaded) {\n\t\t// \t\t\t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\t\t}\n\t\t// \t\t\tthis._sop_loaded = true;\n\n\t\t// \t\t\tconst update_needed = await this.display_node_objects_changed(container);\n\t\t// \t\t\tif (update_needed) {\n\t\t// \t\t\t\tthis.remove_display_node_group();\n\t\t// \t\t\t\tawait this.add_display_node_group(container);\n\t\t// \t\t\t}\n\t\t// \t\t\t// this.set_needsUpdate(container)\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\tthis.root().notify_geo_loaded(this);\n\t\t// \t\tthis._sop_loaded = true;\n\t\t// \t}\n\t\t// }\n\t}\n\n\tis_display_node_cooking(): boolean {\n\t\tif (this.flags.display.active) {\n\t\t\tconst display_node = this._display_node_controller.display_node;\n\t\t\treturn display_node ? display_node.is_dirty : false;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tpost_display_flag_node_set_dirty() {\n\t\tthis.request_display_node();\n\t}\n\tpost_add_node(node: BaseNodeType) {\n\t\t// we test if the scene is loaded\n\t\t// otherwise a display flag will be set for the first node\n\t\t// that is added when the scene is being loaded,\n\t\t// only to be changed again when the actual display node is set.\n\t\t// Without this, we have a jarring first object being displayed\n\t\t// only to be replaced by the proper one when it is ready.\n\t\tif (this.scene.loading_controller.loaded) {\n\t\t\tif (this.children().length == 1) {\n\t\t\t\tnode.flags?.display?.set(true);\n\t\t\t}\n\t\t}\n\t}\n\tcreate_node<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K] {\n\t\treturn super.create_node(type) as GeoNodeChildrenMap[K];\n\t}\n\tchildren() {\n\t\treturn super.children() as BaseSopNodeType[];\n\t}\n\tnodes_by_type<K extends keyof GeoNodeChildrenMap>(type: K): GeoNodeChildrenMap[K][] {\n\t\treturn super.nodes_by_type(type) as GeoNodeChildrenMap[K][];\n\t}\n\t// create_node(type: string): BaseSopNode<any> {\n\t// \treturn super.create_node(type) as  BaseSopNode<any>;\n\t// }\n\ton_create() {\n\t\t// this.create_node('text')\n\t}\n\t// private _core_transform = new CoreTransform();\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\t//this.update_layers()\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","import {GeoObjNode} from '../obj/Geo';\nimport {BaseSopNodeType} from '../sop/_Base';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nexport class DisplayNodeController {\n\t_graph_node: CoreGraphNode;\n\t_display_node: BaseSopNodeType | undefined;\n\t_children_uuids_dict: Dictionary<boolean> = {};\n\t_children_length: number = 0;\n\tprivate _request_display_node_container_bound = this.request_display_node_container.bind(this);\n\tconstructor(protected node: GeoObjNode) {\n\t\tthis._graph_node = new CoreGraphNode(node.scene, 'DisplayNodeController');\n\n\t\tthis._graph_node.dirty_controller.add_post_dirty_hook(\n\t\t\t'_request_display_node_container',\n\t\t\tthis._request_display_node_container_bound\n\t\t);\n\t}\n\n\tget display_node() {\n\t\treturn this._display_node;\n\t}\n\tprivate _parent_object: Object3D | undefined;\n\tset_parent_object(object: Object3D) {\n\t\tthis._parent_object = object;\n\t}\n\tget parent_object() {\n\t\treturn this._parent_object || this.node.object;\n\t}\n\n\tinitialize_node() {\n\t\tthis.set_parent_object(this.node.sop_group);\n\t\tthis.node.flags.display.add_hook(() => {\n\t\t\tthis.node.sop_group.visible = this.used_in_scene;\n\t\t\tif (this.node.flags.display.active) {\n\t\t\t\tthis.request_display_node_container();\n\t\t\t}\n\t\t});\n\n\t\tthis.node.lifecycle.add_on_child_add_hook((child_node) => {\n\t\t\tif (!this._display_node) {\n\t\t\t\tchild_node.flags?.display?.set(true);\n\t\t\t}\n\t\t});\n\t}\n\n\tasync set_display_node(new_display_node: BaseSopNodeType) {\n\t\tif (this._display_node != new_display_node) {\n\t\t\tconst old_display_node = this._display_node;\n\t\t\tif (old_display_node) {\n\t\t\t\told_display_node.flags.display.set(false);\n\t\t\t\tthis._graph_node.remove_graph_input(old_display_node);\n\t\t\t\tthis.remove_children();\n\t\t\t}\n\t\t\tthis._display_node = new_display_node;\n\t\t\tif (this._display_node) {\n\t\t\t\tthis._graph_node.add_graph_input(this._display_node);\n\t\t\t}\n\t\t\tthis.request_display_node_container();\n\t\t}\n\t}\n\n\tremove_children() {\n\t\tlet child: Object3D | undefined;\n\t\twhile ((child = this.parent_object.children.pop())) {\n\t\t\tthis.parent_object.remove(child);\n\t\t}\n\t}\n\n\tget used_in_scene() {\n\t\treturn this.node.used_in_scene && this.node.flags.display.active && this.node.pv.display == true;\n\t}\n\n\tprivate async request_display_node_container() {\n\t\tif (!this.node.scene.loading_controller.loaded) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.used_in_scene) {\n\t\t\tif (this._display_node) {\n\t\t\t\tconst container = await this._display_node.request_container();\n\t\t\t\tconst core_group = container.core_content();\n\t\t\t\tif (core_group) {\n\t\t\t\t\t// check if the new objects are different\n\t\t\t\t\tconst new_objects = core_group.objects();\n\t\t\t\t\tlet new_objects_are_different = new_objects.length != this._children_length;\n\t\t\t\t\tif (!new_objects_are_different) {\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tif (!(object.uuid in this._children_uuids_dict)) {\n\t\t\t\t\t\t\t\tnew_objects_are_different = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t// update hierarchy if different\n\t\t\t\t\tif (new_objects_are_different) {\n\t\t\t\t\t\tthis.remove_children();\n\t\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\t\tfor (let object of new_objects) {\n\t\t\t\t\t\t\tthis.parent_object.add(object);\n\t\t\t\t\t\t\tthis._children_uuids_dict[object.uuid] = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis._children_length = new_objects.length;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tthis.remove_children();\n\t\t\t\t\tthis._children_uuids_dict = {};\n\t\t\t\t\tthis._children_length = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedObjNode} from './_Base';\nimport {Group} from 'three/src/objects/Group';\nimport {TransformedParamConfig, TransformController} from './utils/TransformController';\n// import {CoreTransform} from 'src/core/Transform';\nimport {FlagsControllerD} from '../utils/FlagsController';\nimport {AxesHelper} from 'three/src/helpers/AxesHelper';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass NullObjParamConfig extends TransformedParamConfig(NodeParamsConfig) {}\nconst ParamsConfig = new NullObjParamConfig();\n\nexport class NullObjNode extends TypedObjNode<Group, NullObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\treadonly transform_controller: TransformController = new TransformController(this);\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tprivate _helper = new AxesHelper(1);\n\n\tcreate_object() {\n\t\treturn new Group();\n\t}\n\tinitialize_node() {\n\t\tthis.transform_controller.initialize_node();\n\t\tthis.object.add(this._helper);\n\t\tthis.flags.display.add_hook(() => {\n\t\t\tthis._helper.visible = this.flags.display.active;\n\t\t});\n\t}\n\tcook() {\n\t\tthis.transform_controller.update();\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {BaseNode} from '../_Base';\nimport {TypedObjNode, ObjNodeRenderOrder} from './_Base';\nimport {FogExp2} from 'three/src/scenes/FogExp2';\nimport {Fog} from 'three/src/scenes/Fog';\nimport {Color} from 'three/src/math/Color';\n\nconst DEFAULT = {\n\tcolor: new Color(1, 1, 1),\n\tnear: 0,\n\tfar: 100,\n\tdensity: 0.00025,\n};\n\n// export Fog = (function() {\n// \tlet DEFAULT = undefined;\n// \tFog = class Fog extends BaseModules {\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {FlagsControllerD} from '../utils/FlagsController';\nclass FogObjParamConfig extends NodeParamsConfig {\n\tcolor = ParamConfig.COLOR(DEFAULT.color.toArray() as [number, number, number]);\n\texponential = ParamConfig.BOOLEAN(0);\n\tdensity = ParamConfig.FLOAT(1);\n\tnear = ParamConfig.FLOAT(0, {range: [0, 100]});\n\tfar = ParamConfig.FLOAT(100, {range: [0, 100]});\n}\nconst ParamsConfig = new FogObjParamConfig();\nexport class FogObjNode extends TypedObjNode<Object3D, FogObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tpublic readonly flags: FlagsControllerD = new FlagsControllerD(this);\n\tpublic readonly render_order: number = ObjNodeRenderOrder.MANAGER;\n\t// public readonly add_to_hierarchy: boolean = false;\n\tprotected _attachable_to_hierarchy: boolean = false;\n\n\tprotected _linear_fog!: Fog;\n\tprotected _linear_fogexp2!: FogExp2;\n\n\tinitialize_node() {\n\t\t// this._init_display_flag({\n\t\t// \tmultiple_display_flags_allowed: false,\n\t\t// });\n\n\t\t// this.set_inputs_count_to_zero();\n\t\t// this._init_dirtyable_hook();\n\n\t\tthis._linear_fog = new Fog(DEFAULT.color.getHex(), DEFAULT.near, DEFAULT.far);\n\t\tthis._linear_fogexp2 = new FogExp2(DEFAULT.color.getHex(), DEFAULT.density);\n\t}\n\tstatic type() {\n\t\treturn 'fog';\n\t}\n\n\t// create_params() {\n\t// \tthis.add_param(ParamType.COLOR, 'color', DEFAULT.color.toArray() as [number, number, number]);\n\t// \tthis.add_param(ParamType.BOOLEAN, 'exponential', 0);\n\t// \tthis.add_param(ParamType.FLOAT, 'density', DEFAULT.density);\n\t// \tthis.add_param(ParamType.FLOAT, 'near', DEFAULT.near, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// \tthis.add_param(ParamType.FLOAT, 'far', DEFAULT.far, {\n\t// \t\trange: [0, 100],\n\t// \t});\n\t// }\n\n\t// get_fog: (callback)->\n\t// \tthis.param('exponential').eval (val)=>\n\t// \t\tfog = if val then @_exponential_fog else @_linear_fog\n\t// \t\tcallback(fog)\n\n\tcook() {\n\t\tlet fog: Fog | FogExp2;\n\t\tif (this.pv.exponential) {\n\t\t\tthis._linear_fogexp2.density = this.pv.density;\n\t\t\tfog = this._linear_fogexp2;\n\t\t} else {\n\t\t\tthis._linear_fog.near = this.pv.near;\n\t\t\tthis._linear_fog.far = this.pv.far; // * (1/@_param_intensity)\n\t\t\tfog = this._linear_fog;\n\t\t}\n\n\t\tfog.color.copy(this.pv.color);\n\n\t\tthis.scene.display_scene.fog = fog;\n\n\t\tthis.cook_controller.end_cook();\n\t}\n}\n","// import {Vector2} from 'three/src/math/Vector2';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\n// import {Group} from 'three/src/objects/Group';\n// import {CameraHelper} from 'three/src/helpers/CameraHelper';\n// import lodash_clamp from 'lodash/clamp';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\n\nimport {OrthographicCameraBackgroundController} from './utils/cameras/background/OrthographicCameraController';\n// import {ParamType} from 'src/engine/poly/ParamType';\n\nconst DEFAULT = {\n\tleft: -0.5,\n\tright: 0.5,\n\ttop: 0.5,\n\tbottom: -0.5,\n};\n\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function OrthographicCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tsize = ParamConfig.FLOAT(1);\n\t\t// vertical_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t\t// horizontal_size_range = ParamConfig.VECTOR2([-1, -1]);\n\t};\n}\n\nclass OrthographicCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(OrthographicCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new OrthographicCameraObjParamConfig();\n\nexport class OrthographicCameraObjNode extends TypedCameraObjNode<\n\tOrthographicCamera,\n\tOrthographicCameraObjParamConfig\n> {\n\tparams_config = ParamsConfig;\n\n\tprotected get background_controller_constructor() {\n\t\treturn OrthographicCameraBackgroundController;\n\t}\n\n\tstatic type() {\n\t\treturn 'orthographic_camera';\n\t}\n\n\tcreate_object() {\n\t\treturn new OrthographicCamera(\n\t\t\tDEFAULT.left * 2,\n\t\t\tDEFAULT.right * 2,\n\t\t\tDEFAULT.top * 2,\n\t\t\tDEFAULT.bottom * 2,\n\t\t\tBASE_CAMERA_DEFAULT.near,\n\t\t\tBASE_CAMERA_DEFAULT.far\n\t\t);\n\t}\n\t//@_helper = new CameraHelper( @_camera )\n\t//group = new Group()\n\t//group.add(@_camera)\n\t//group.add(@_helper)\n\n\t//this.set_object(@_camera)\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.add_param('float', 'left', DEFAULT.left)\n\t// \t// this.add_param('float', 'right', DEFAULT.right)\n\t// \t// this.add_param('float', 'top', DEFAULT.top)\n\t// \t// this.add_param('float', 'bottom', DEFAULT.bottom)\n\n\t// \t// this.within_param_folder('render', () => {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 2, {range: [0, 10]});\n\t// \t// left : Number, right : Number, top : Number, bottom : Number, near : Number, far : Number\n\t// \tthis.add_param(ParamType.VECTOR2, 'vertical_size_range', [0, 10], {visible_if: {lock_width: 1}});\n\t// \tthis.add_param(ParamType.VECTOR2, 'horizontal_size_range', [0, 10], {visible_if: {lock_width: 0}});\n\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\tconst size = this.pv.size || 1;\n\t\t\t// let lock_width = this.pv.lock_width;\n\t\t\t// if (lock_width == null) {\n\t\t\t// \tlock_width = true;\n\t\t\t// }\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst vertical_size = size / this._aspect;\n\t\t\t// \tconst zoom = 1 //this.get_zoom(vertical_size, this.pv.vertical_size_range);\n\t\t\t// \tthis._object.left = DEFAULT.left * size * zoom;\n\t\t\t// \tthis._object.right = DEFAULT.right * size * zoom;\n\t\t\t// \tthis._object.top = DEFAULT.top * vertical_size * zoom;\n\t\t\t// \tthis._object.bottom = DEFAULT.bottom * vertical_size * zoom;\n\t\t\t// } else {\n\t\t\tconst horizontal_size = size * this._aspect;\n\t\t\tconst zoom = 1; //this.get_zoom(horizontal_size, this.pv.horizontal_size_range);\n\t\t\tthis._object.left = DEFAULT.left * horizontal_size * zoom;\n\t\t\tthis._object.right = DEFAULT.right * horizontal_size * zoom;\n\t\t\tthis._object.top = DEFAULT.top * size * zoom;\n\t\t\tthis._object.bottom = DEFAULT.bottom * size * zoom;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\n\t// private get_zoom(size: number, range: Vector2) {\n\t// \tlet zoom = 1;\n\t// \tif (range) {\n\t// \t\tif (size < range.x || size > range.y) {\n\t// \t\t\tconst new_size = lodash_clamp(size, range.x, range.y);\n\t// \t\t\tzoom = new_size / size;\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\nimport {BaseCameraControlsEventNodeType, CameraControls} from 'src/engine/nodes/event/_BaseCameraControls';\nimport {CameraControlsConfig} from 'src/engine/nodes/event/utils/CameraControlConfig';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {CameraOrbitControlsEventNode} from 'src/engine/nodes/event/CameraOrbitControls';\n\nconst CONTROLS_PARAM_NAME = 'controls';\n\nexport class ControlsController {\n\t_applied_controls_by_element_id: Dictionary<Dictionary<boolean>> = {};\n\tprivate _controls_node: BaseCameraControlsEventNodeType | null = null;\n\tprivate controls_start_listener: (() => void) | undefined;\n\tprivate controls_end_listener: (() => void) | undefined;\n\n\tconstructor(private node: BaseCameraObjNodeType) {}\n\n\tcontrols_param(): BaseParamType | null {\n\t\tif (this.node.params.has(CONTROLS_PARAM_NAME)) {\n\t\t\treturn this.node.params.get(CONTROLS_PARAM_NAME);\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync controls_node(): Promise<BaseCameraControlsEventNodeType | null> {\n\t\tconst controls_param = this.node.p.controls;\n\t\tconst raw_input = controls_param.raw_input;\n\t\tif (raw_input && raw_input != '') {\n\t\t\tif (controls_param.is_dirty) {\n\t\t\t\tawait controls_param.compute();\n\t\t\t}\n\t\t\tconst node = controls_param.found_node();\n\t\t\tif (node) {\n\t\t\t\tif (node instanceof CameraOrbitControlsEventNode) {\n\t\t\t\t\treturn node;\n\t\t\t\t} else {\n\t\t\t\t\tthis.node.states.error.set('found node is not of a camera control type');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.node.states.error.set('no node has been found');\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}\n\n\tasync update_controls() {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\tif (this._controls_node != controls_node) {\n\t\t\t\tthis.dispose_control_refs();\n\t\t\t}\n\t\t}\n\n\t\tthis._controls_node = controls_node;\n\t}\n\n\tasync apply_controls(html_element: HTMLElement) {\n\t\tconst controls_node = await this.controls_node();\n\t\tif (controls_node) {\n\t\t\t// keep last_control_node_id to ensure we don't apply the controls more than once\n\t\t\t// OR it allow the viewer to remain in control of this\n\t\t\t//if !@_last_control_node_id? || (@_last_control_node_id != controls_node.graph_node_id)\n\t\t\t// but for now, the controls are still applied again after mouse up\n\t\t\tconst controls_id = controls_node.controls_id();\n\t\t\tlet controls_aleady_applied = false;\n\t\t\tif (\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] &&\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t\t) {\n\t\t\t\tcontrols_aleady_applied = true;\n\t\t\t}\n\t\t\tif (!controls_aleady_applied) {\n\t\t\t\t// this._last_control_node_id = controls_id;\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id] =\n\t\t\t\t\tthis._applied_controls_by_element_id[html_element.id] || {};\n\t\t\t\tthis._applied_controls_by_element_id[html_element.id][controls_id] = true;\n\n\t\t\t\t// request_container forces a cook\n\t\t\t\t//controls_node.request_container (controls_container)=>\n\t\t\t\tconst controls = await controls_node.apply_controls(this.node.object, html_element);\n\t\t\t\tconst config = new CameraControlsConfig(this.node.graph_node_id, controls_node, controls);\n\t\t\t\tcontrols_node.set_from_camera_node(controls, this.node);\n\t\t\t\tthis.set_controls_events(controls);\n\t\t\t\treturn config;\n\t\t\t}\n\t\t}\n\t}\n\tdispose_control_refs() {\n\t\tthis._applied_controls_by_element_id = {};\n\t}\n\n\t// calling dispose controls\n\t// ensure that we can set the camera menu to camera1, then camera2 and back to camera1\n\t// and controls will be cleared each time\n\tasync dispose_controls(html_element: HTMLElement) {\n\t\tdelete this._applied_controls_by_element_id[html_element.id];\n\t\t// if (this._applied_controls_by_element_id[html_element.id]) {\n\t\t// \tconst controls_node = await this.controls_node();\n\t\t// \tif (controls_node) {\n\t\t// \t\tconst controls_id = controls_node.controls_id();\n\t\t// \t\tdelete this._applied_controls_by_element_id[html_element.id][controls_id];\n\t\t// \t}\n\t\t// }\n\t\t// @_controls_node?.dispose_controls()\n\t\t// if(this._applied_controls_by_element_id[html_element.id]){\n\t\t// \tdelete this._applied_controls_by_element_id[html_element.id][controls_id]\n\t\t// }\n\t\t// this._last_control_node_id = null\n\t}\n\tset_controls_events(controls: CameraControls) {\n\t\t// restore target (for orbit controls only for now)\n\t\t// to ensure that camera does not reset its target on 0,0,0 on first move\n\t\t// const controls_node = this.controls_node()\n\t\t// if (controls_node){\n\t\t// \tcontrols_node.\n\t\t// }\n\t\t// if(controls.target){\n\t\t// \tcontrols.target.copy(this._param_target) //.clone()\n\t\t// }\n\n\t\tthis.controls_start_listener = () => {\n\t\t\tthis.on_controls_start(controls);\n\t\t};\n\t\tthis.controls_end_listener = () => {\n\t\t\tthis.on_controls_end(controls);\n\t\t};\n\t\tcontrols.addEventListener('start', this.controls_start_listener);\n\t\tcontrols.addEventListener('end', this.controls_end_listener);\n\t}\n\n\ton_controls_start(controls: CameraControls) {\n\t\t// this.param('is_updating').set(1)\n\t}\n\ton_controls_end(controls: CameraControls) {\n\t\t// this.param('is_updating').set(0)\n\t\tif (controls.target) {\n\t\t\tconst val = controls.target.toArray() as [number, number, number];\n\t\t\tthis.node.params.set_vector3('target', val);\n\t\t}\n\t\tthis.node.update_transform_params_from_object();\n\t}\n}\n","import {BaseCameraControlsEventNodeType, CameraControls} from '../_BaseCameraControls';\n\nexport class CameraControlsConfig {\n\tconstructor(\n\t\tprivate _camera_node_id: string,\n\t\tprivate _controls_node: BaseCameraControlsEventNodeType,\n\t\tprivate _controls: CameraControls\n\t) {}\n\n\tget camera_node_id() {\n\t\treturn this._camera_node_id;\n\t}\n\t// camera_controls_node_id(){\n\t// \treturn this._camera_controls_node_id\n\t// }\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\tget controls_node() {\n\t\treturn this._controls_node;\n\t}\n\n\tis_equal(other_config: CameraControlsConfig): boolean {\n\t\treturn (\n\t\t\tother_config.camera_node_id == this._camera_node_id &&\n\t\t\tother_config.controls_node.graph_node_id == this._controls_node.graph_node_id\n\t\t);\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar RenderPass = function ( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.overrideMaterial = overrideMaterial;\n\n\tthis.clearColor = clearColor;\n\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\tthis.clear = true;\n\tthis.clearDepth = false;\n\tthis.needsSwap = false;\n\n};\n\nRenderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: RenderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\tvar oldClearColor, oldClearAlpha;\n\n\t\tif ( this.clearColor ) {\n\n\t\t\toldClearColor = renderer.getClearColor().getHex();\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tthis.scene.overrideMaterial = null;\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n} );\n\nexport { RenderPass };\n","import {PolyScene} from 'src/engine/scene/PolyScene';\nimport {Vector2} from 'three/src/math/Vector2';\n// import {WebGLRenderer} from 'three/src/renderers/WebGLRenderer'\n// import {Color} from 'three/src/math/Color'\n\nimport {BaseViewer} from './_Base';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\n// import 'src/engine/Poly';\n// import {POLY} from 'src/engine/Poly';\n\nconst CSS_CLASS = 'CoreThreejsViewer';\n\ndeclare global {\n\tinterface HTMLCanvasElement {\n\t\tonwebglcontextlost: () => void;\n\t\tonwebglcontextrestored: () => void;\n\t}\n}\n\nexport class ThreejsViewer extends BaseViewer {\n\tprivate _request_animation_frame_id: number | undefined;\n\tprivate do_render: boolean = true;\n\n\tprivate _animate_method: () => void = this.animate.bind(this);\n\n\tconstructor(_container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tsuper(_container, _scene, camera_node);\n\n\t\tthis._canvas = document.createElement('canvas');\n\t\tthis._canvas.id = `canvas_id_${Math.random()}`.replace('.', '_');\n\t\tthis._canvas.style.display = 'block';\n\t\tthis._canvas.style.outline = 'none';\n\n\t\tthis._container.appendChild(this._canvas);\n\t\tthis._container.classList.add(CSS_CLASS);\n\t\tthis._container.style.height = '100%';\n\n\t\tthis._set_events();\n\t}\n\n\tpublic _build() {\n\t\tthis._init_display();\n\t\tthis.activate();\n\t}\n\n\tdispose() {\n\t\tthis._cancel_animate();\n\t\tthis.controls_controller.dispose_controls();\n\t\t// this._dispose_graph_node()\n\t}\n\n\tprivate _set_events() {\n\t\tthis.events_controller.init();\n\t\tthis.webgl_controller.init();\n\n\t\t// if (POLY.player_mode()) {\n\t\twindow.onresize = () => {\n\t\t\tthis.cameras_controller.on_resize();\n\t\t};\n\t\t// }\n\t}\n\t// protected _on_touchmove(event: TouchEvent){\n\t// \tconsole.log(\"touch\", event)\n\t// }\n\n\tprivate _init_display() {\n\t\tif (!this._canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cameras_controller.compute_size_and_aspect();\n\t\tconst size: Vector2 = this.cameras_controller.size;\n\n\t\tthis.cameras_controller.camera_node?.post_process_controller.create_renderer(this._canvas, size);\n\t\t// this.canvas_context = canvas.getContext('2d')\n\n\t\t// init renderer\n\t\t// @renderer = new THREE.WebGLRenderer\n\t\t// \tcanvas: canvas\n\t\t// \tantialias: true\n\t\t// \talpha: true\n\n\t\t// @renderer.shadowMap.enabled = true\n\t\t// this.compute_size_and_aspect()\n\n\t\t//\n\t\t// https://stackoverflow.com/questions/31407778/display-scene-at-lower-resolution-in-three-js\n\t\t// TODO: this article mentions that setSize should be called after\n\t\t// @renderer.setSize(this._size[0], this._size[1])\n\t\t// @renderer.setPixelRatio(window.devicePixelRatio)\n\t\t// @renderer.setSize(size[0]*1.5, size[1]*1.5)\n\t\t// canvas.width = \"//{size[0]}px\"\n\t\t// canvas.height = \"//{size[1]}px\"\n\t\t// canvas.style.width = \"//{size[0]}px\"\n\t\t// canvas.style.height = \"//{size[1]}px\"\n\n\t\t// TODO: ensure the renderers get added to a list\n\t\t//if !this.player_mode\n\t\t//\tconsole.log(\"set window.viewer_renderer from Threejs.vue component\")\n\t\t// window.viewer_renderer = @renderer\n\t\t// POLY.renderers_controller.register_renderer(@renderer)\n\n\t\t//this._init_webgl_utils()\n\n\t\t// init scene\n\t\t// @display_scene.background = new THREE.Color(\"//111\")\n\n\t\t//window.display_scene = @display_scene\n\n\t\t// this._init_ray_helper(); // TODO: typescript\n\n\t\t//@cam_animation_helper = new CameraAnimationHelper(@ray_helper, @event_helper)\n\n\t\tthis.cameras_controller.prepare_current_camera();\n\t\t// this._add_helpers_to_scene()\n\n\t\tthis.animate();\n\t}\n\n\tanimate() {\n\t\tif (this.do_render) {\n\t\t\tthis.render();\n\t\t\t// this.update_stats()\n\t\t\t// this._controls?.update(false)\n\n\t\t\t// @_renders_count ?= 0\n\t\t\t// @_renders_count += 1\n\t\t\t// if @_renders_count < 6\n\t\t\tthis._request_animation_frame_id = requestAnimationFrame(this._animate_method);\n\t\t}\n\t}\n\n\tprivate _cancel_animate() {\n\t\tthis.do_render = false;\n\t\tif (this._request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this._request_animation_frame_id);\n\t\t}\n\t\tif (this._canvas) {\n\t\t\tthis.cameras_controller.camera_node?.post_process_controller.delete_renderer(this._canvas);\n\t\t}\n\t\t// POLY.renderers_controller.deregister_renderer(@renderer)\n\t\t// this.dispose_camera()\n\t}\n\n\trender() {\n\t\tif (this.cameras_controller.camera_node && this._canvas) {\n\t\t\tconst size = this.cameras_controller.size;\n\t\t\tconst aspect = this.cameras_controller.aspect;\n\t\t\tthis.cameras_controller.camera_node.post_process_controller.render(this._canvas, size, aspect);\n\n\t\t\t// TODO: typescript\n\t\t\tthis._controls_controller?.update();\n\n\t\t\t// TODO: typescript\n\t\t\t// if (this._capturer) {\n\t\t\t// \tthis._capturer.perform_capture();\n\t\t\t// }\n\t\t} else {\n\t\t\tconsole.warn('no camera to render with');\n\t\t}\n\t}\n}\n","import {Scene} from 'three/src/scenes/Scene';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\n// import {CameraMixin} from './concerns/Camera';\n// import {Capturer} from './concerns/Capturer';\n// import {ContainerClass} from './concerns/ContainerClass';\n// import {Controls} from './concerns/Controls';\n// import {PickerForViewer} from './concerns/Picker';\n\nimport {CamerasController} from './utils/CamerasController';\nimport {ControlsController} from './utils/ControlsController';\nimport {EventsController} from './utils/EventsController';\nimport {WebGLController} from './utils/WebglController';\n\n// class AbstractViewer {}\n\nconst HOVERED_CLASS_NAME = 'hovered';\n\nexport abstract class BaseViewer {\n\tprotected _display_scene: Scene;\n\tprotected _canvas: HTMLCanvasElement | undefined;\n\tprotected _active: boolean = false;\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tactivate() {\n\t\tthis._active = true;\n\t}\n\tdeactivate() {\n\t\tthis._active = false;\n\t}\n\n\tprotected _cameras_controller: CamerasController | undefined;\n\tget cameras_controller() {\n\t\treturn (this._cameras_controller = this._cameras_controller || new CamerasController(this));\n\t}\n\tprotected _controls_controller: ControlsController | undefined;\n\tget controls_controller() {\n\t\treturn (this._controls_controller = this._controls_controller || new ControlsController(this));\n\t}\n\tprotected _events_controller: EventsController | undefined;\n\tget events_controller() {\n\t\treturn (this._events_controller = this._events_controller || new EventsController(this));\n\t}\n\tprotected _webgl_controller: WebGLController | undefined;\n\tget webgl_controller() {\n\t\treturn (this._webgl_controller = this._webgl_controller || new WebGLController(this));\n\t}\n\n\tconstructor(protected _container: HTMLElement, protected _scene: PolyScene, camera_node: BaseCameraObjNodeType) {\n\t\tthis._display_scene = this._scene.display_scene;\n\t\tthis._init_from_scene(camera_node).then(() => {\n\t\t\tthis._build();\n\t\t});\n\t}\n\tget container() {\n\t\treturn this._container;\n\t}\n\tget scene() {\n\t\treturn this._scene;\n\t}\n\tget canvas() {\n\t\treturn this._canvas;\n\t}\n\n\tprivate async _init_from_scene(camera_node: BaseCameraObjNodeType) {\n\t\tawait this.cameras_controller.set_camera_node(camera_node || this._scene.cameras_controller.master_camera_node);\n\t\t// await this.update_picker_nodes(); // TODO: typescript\n\t}\n\tprotected abstract _build(): void;\n\n\t// html container class\n\treset_container_class() {\n\t\tthis.container.classList.remove(HOVERED_CLASS_NAME);\n\t}\n\tset_container_class_hovered() {\n\t\tthis.container.classList.add(HOVERED_CLASS_NAME);\n\t}\n}\n","// import {Camera} from 'three/src/cameras/Camera';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\nimport {BaseViewer} from '../_Base';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\n\nexport class CamerasController {\n\t// private _is_active: boolean = false;\n\tprivate _camera_node: BaseCameraObjNodeType | null = null;\n\t// private _camera: Camera;\n\n\tprivate _size: Vector2 = new Vector2(100, 100);\n\tprivate _aspect: number = 1;\n\t// private current_camera_controls_node_graph_id: number = null;\n\n\tconstructor(private viewer: BaseViewer) {}\n\n\t// activate() {\n\t// \tthis._is_active = true;\n\t// }\n\tasync set_camera_node(camera_node: BaseCameraObjNodeType) {\n\t\tif (!this._camera_node || camera_node.graph_node_id != this._camera_node.graph_node_id) {\n\t\t\tthis._camera_node = camera_node;\n\t\t\t// this._camera = camera_node.object;\n\t\t\tthis._update_graph_node();\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t}\n\t}\n\tprivate _graph_node: CoreGraphNode | undefined;\n\tprivate _update_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn;\n\t\t}\n\t\tconst controls_param = this._camera_node.params.get_operator_path('controls');\n\t\tif (!controls_param) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node = this._graph_node || this._create_graph_node();\n\t\tif (!this._graph_node) {\n\t\t\treturn;\n\t\t}\n\t\tthis._graph_node.graph_disconnect_predecessors();\n\t\tthis._graph_node.add_graph_input(controls_param);\n\t}\n\tprivate _create_graph_node() {\n\t\tif (!this._camera_node) {\n\t\t\treturn undefined;\n\t\t}\n\t\tconst node = new CoreGraphNode(this._camera_node.scene, 'viewer-controls');\n\t\tnode.add_post_dirty_hook('this.viewer.controls_controller', async () => {\n\t\t\tawait this.viewer.controls_controller.create_controls();\n\t\t});\n\t\treturn node;\n\t}\n\n\tget camera_node() {\n\t\treturn this._camera_node;\n\t}\n\tget size() {\n\t\treturn this._size;\n\t}\n\tget aspect() {\n\t\treturn this._aspect;\n\t}\n\n\ton_resize() {\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tthis.compute_size_and_aspect();\n\t\tthis._camera_node?.post_process_controller.set_renderer_size(this.viewer.canvas, this._size);\n\t\tthis.update_camera_aspect();\n\t}\n\tcompute_size_and_aspect() {\n\t\tthis._update_size();\n\t\tthis._camera_node?.scene.uniforms_controller.update_resolution_dependent_uniform_owners(this._size);\n\t\tthis._aspect = this._get_aspect();\n\t}\n\n\tprivate _update_size() {\n\t\tthis._size.x = this.viewer.container.offsetWidth;\n\t\tthis._size.y = this.viewer.container.offsetHeight;\n\t}\n\tprivate _get_aspect(): number {\n\t\treturn this._size.x / this._size.y;\n\t}\n\n\tupdate_camera_aspect() {\n\t\tthis._camera_node?.setup_for_aspect_ratio(this._aspect);\n\t}\n\t// dispose_camera: ->\n\t// \tthis.$emit('before_controls_apply', null)\n\t// \t// if @_controls?\n\t// \t// \t@_controls.dispose()\n\t// \t// camera_graph_node_id ?= this.current_camera_node_graph_id\n\t// \t// camera_node = this.$store.scene.graph().node_from_id(camera_graph_node_id)\n\t// \t// this.current_camera_node.dipose_controls()\n\t// \t//if this.current_camera_node?\n\t// \t//\tthis.current_camera_node.dispose_controls()\n\tasync prepare_current_camera() {\n\t\tif (this._camera_node) {\n\t\t\t// we dispose the controls first, so they can be applied\n\t\t\t// if they were not disposed properly when we closed the viewer\n\t\t\t// but I'm now trying in the destroyed callback\n\t\t\t//this.current_camera_node.dispose_controls()\n\n\t\t\t//this.current_camera_node.apply_controls()\n\t\t\t//this.current_camera_node.prepare_for_viewer(this.aspect())\n\t\t\t// const name = this.current_camera_node.name()\n\t\t\t// const graph_node_id = this._camera_node.graph_node_id\n\t\t\t/*const container = */ await this._camera_node.request_container(); // ensure the camera is cooked\n\t\t\tawait this._update_from_camera_container(); //container, graph_node_id)\n\t\t}\n\t}\n\t// remove_cloned_camera: ->\n\t// \tif @_current_camera?\n\t// \t\t@_current_camera.camera_source.node.remove_clone(@_current_camera)\n\n\tasync _update_from_camera_container() {\n\t\t//container, graph_node_id:number){\n\t\t// ensure that we get the same as we requested\n\t\t// if(graph_node_id == this._camera_node.graph_node_id){\n\n\t\t// this.remove_cloned_camera()\n\t\t// cloned_camera = this.current_camera_node.clone_camera()\n\t\t// @_current_camera = cloned_camera\n\t\tthis.update_camera_aspect();\n\n\t\t//this.dispose_camera()\n\n\t\t// @_is_active is use to check if the component has been destroyed\n\t\t// which can happen on app load, but also when user switches the camera menu\n\n\t\t// if this.current_camera_controls_node_graph_id == null || ()\n\n\t\t// if(@_is_active == true)\n\t\tawait this.viewer.controls_controller.create_controls();\n\n\t\t// }\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {CameraControls} from 'src/engine/nodes/event/_BaseCameraControls';\n\nexport class ControlsController {\n\tprotected _active: boolean = false;\n\tprotected _controls: CameraControls | null = null;\n\t_bound_on_controls_start: () => void = this._on_controls_start.bind(this);\n\t_bound_on_controls_end: () => void = this._on_controls_end.bind(this);\n\tconstructor(private viewer: BaseViewer) {}\n\n\tget active() {\n\t\treturn this._active;\n\t}\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget controls() {\n\t\treturn this._controls;\n\t}\n\n\tasync create_controls() {\n\t\tthis.dispose_controls();\n\n\t\tif (!this.viewer.canvas) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst config = await this.camera_node?.controls_controller.apply_controls(this.viewer.canvas);\n\t\tif (config) {\n\t\t\t// this.current_camera_controls_node_graph_id = config.camera_controls_node_id()\n\t\t\tthis._controls = config.controls;\n\t\t\t// this._controls_node = config.controls_node()\n\n\t\t\tif (this._controls) {\n\t\t\t\tif (this.viewer.active) {\n\t\t\t\t\tthis._controls.addEventListener('start', this._bound_on_controls_start);\n\t\t\t\t\tthis._controls.addEventListener('end', this._bound_on_controls_end);\n\t\t\t\t} else {\n\t\t\t\t\tthis.dispose_controls();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// test in case @_is_active has changed\n\t\t\t// if (this._is_active != true && this._controls){\n\t\t\t// \tthis._dispose_controls()\n\n\t\t\t// }\n\t\t\t// TODO\n\t\t\t// we have to reassign the camera here, as this method is called twice\n\t\t\t// and the first time without the controls being present apparently.. (more tests needed)\n\t\t\t// CURRENT ANSWER: the method this.prepare_current_camera() is called twice on app load\n\t\t\t// which only cause problems when switching back to perspective.\n\t\t\t// @_current_camera = cloned_camera\n\t\t\t//@_controls = controls\n\t\t\t// this.$emit('before_controls_apply', controls)\n\t\t}\n\t}\n\tupdate() {\n\t\tif (this._controls) {\n\t\t\tthis._controls.update();\n\t\t}\n\t}\n\n\tdispose_controls() {\n\t\tif (this._controls) {\n\t\t\tif (this.viewer.canvas) {\n\t\t\t\tthis.camera_node?.controls_controller.dispose_controls(this.viewer.canvas);\n\t\t\t}\n\n\t\t\tif (this._bound_on_controls_start) {\n\t\t\t\tthis._controls.removeEventListener('start', this._bound_on_controls_start);\n\t\t\t}\n\t\t\tif (this._bound_on_controls_end) {\n\t\t\t\tthis._controls.removeEventListener('end', this._bound_on_controls_end);\n\t\t\t}\n\n\t\t\tthis._controls.dispose();\n\t\t\tthis._controls = null;\n\t\t}\n\t}\n\tprivate _on_controls_start() {\n\t\tthis._active = true;\n\t}\n\tprivate _on_controls_end() {\n\t\tthis._active = false;\n\t}\n}\n","import {BaseViewer} from '../_Base';\nimport {Vector2} from 'three/src/math/Vector2';\n\nconst DIST_UNINITIALIZED = -1;\ntype MouseOrTouchEvent = MouseEvent | TouchEvent;\ntype MouseOrTouchEventCallback = (e: MouseOrTouchEvent) => void;\n\nexport class EventsController {\n\tprivate _mousedown_pos = new Vector2();\n\tprivate _mouse_distance_travelled: number = DIST_UNINITIALIZED;\n\tprotected _bound_on_mousedown: MouseOrTouchEventCallback = this._on_mousedown.bind(this);\n\tprotected _bound_on_mousemove: MouseOrTouchEventCallback = this._on_mousemove.bind(this);\n\tprotected _bound_on_mouseup: MouseOrTouchEventCallback = this._on_mouseup.bind(this);\n\t// protected _bound_on_click: MouseEventCallback\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tget camera_node() {\n\t\treturn this.viewer.cameras_controller.camera_node;\n\t}\n\tget canvas() {\n\t\treturn this.viewer.canvas;\n\t}\n\n\tinit() {\n\t\tif (!this.canvas) {\n\t\t\treturn;\n\t\t}\n\t\tif (this._bound_on_mousedown) {\n\t\t\tthis.canvas.removeEventListener('mousedown', this._bound_on_mousedown);\n\t\t}\n\t\tif (this._bound_on_mousemove) {\n\t\t\tthis.canvas.removeEventListener('mousemove', this._bound_on_mousemove);\n\t\t}\n\t\tif (this._bound_on_mouseup) {\n\t\t\tthis.canvas.removeEventListener('mouseup', this._bound_on_mouseup);\n\t\t}\n\t\tthis._bound_on_mousedown = this._bound_on_mousedown || this._on_mousedown.bind(this);\n\t\tthis._bound_on_mousemove = this._bound_on_mousemove || this._on_mousemove.bind(this);\n\t\tthis._bound_on_mouseup = this._bound_on_mouseup || this._on_mouseup.bind(this);\n\n\t\tthis.canvas.addEventListener('mousedown', this._bound_on_mousedown);\n\t\tthis.canvas.addEventListener('mousemove', this._bound_on_mousemove);\n\t\tthis.canvas.addEventListener('mouseup', this._bound_on_mouseup);\n\n\t\t// this._bound_on_touchmove = this._bound_on_touchmove || this._on_touchmove.bind(this)\n\t\tthis.canvas.addEventListener('touchstart', this._bound_on_mousedown, false);\n\t\tthis.canvas.addEventListener('touchmove', this._bound_on_mousemove, false);\n\t\tthis.canvas.addEventListener('touchend', this._bound_on_mouseup, false);\n\t\tthis.canvas.addEventListener('touchcancel', this._bound_on_mouseup, false);\n\t}\n\n\tprotected _on_mousedown(event: MouseOrTouchEvent) {\n\t\tthis._mouse_distance_travelled = 0;\n\t\tif (event instanceof MouseEvent) {\n\t\t\tthis._mousedown_pos.x = event.pageX;\n\t\t\tthis._mousedown_pos.y = event.pageY;\n\t\t} else {\n\t\t\tconst touch = event.touches[0];\n\t\t\tthis._mousedown_pos.x = touch.pageX;\n\t\t\tthis._mousedown_pos.y = touch.pageY;\n\t\t}\n\t}\n\n\tprotected _on_mousemove(event: MouseOrTouchEvent) {\n\t\tif (this._mouse_distance_travelled !== DIST_UNINITIALIZED) {\n\t\t\tlet distance: number = 0;\n\t\t\tif (event instanceof MouseEvent) {\n\t\t\t\tdistance = event.pageX - this._mousedown_pos.x + (event.pageY - this._mousedown_pos.y);\n\t\t\t} else {\n\t\t\t\tconst touch = event.touches[0];\n\t\t\t\tdistance = touch.pageX - this._mousedown_pos.x + (touch.pageY - this._mousedown_pos.y);\n\t\t\t}\n\t\t\tthis._mouse_distance_travelled += Math.abs(distance);\n\t\t}\n\n\t\tif (!this.viewer.controls_controller.active) {\n\t\t\t// this.viewer.process_picker_nodes_on_mouse_move(event, this.camera_node, this.ray_helper);\n\t\t}\n\t}\n\n\tprotected _on_mouseup(event: MouseOrTouchEvent) {\n\t\tif (this._mouse_distance_travelled < 2) {\n\t\t\t// this.viewer.process_picker_nodes_on_click(event, this.camera_node, this.ray_helper);\n\t\t}\n\t\tthis._mouse_distance_travelled = DIST_UNINITIALIZED;\n\t}\n}\n","import {BaseViewer} from '../_Base';\n\nexport class WebGLController {\n\tpublic request_animation_frame_id: number | undefined;\n\n\tconstructor(protected viewer: BaseViewer) {}\n\n\tinit() {\n\t\tconst canvas = this.viewer.canvas;\n\t\tif (canvas) {\n\t\t\tcanvas.onwebglcontextlost = this._on_webglcontextlost.bind(this);\n\t\t\tcanvas.onwebglcontextrestored = this._on_webglcontextrestored.bind(this);\n\t\t}\n\t}\n\n\tprotected _on_webglcontextlost() {\n\t\tconsole.warn('context lost at frame', this.viewer.scene.frame);\n\t\t// event.preventDefault();\n\t\tif (this.request_animation_frame_id) {\n\t\t\tcancelAnimationFrame(this.request_animation_frame_id);\n\t\t} else {\n\t\t\tconsole.warn('request_animation_frame_id not initialized');\n\t\t}\n\t\tconsole.warn('not canceled', this.request_animation_frame_id);\n\t}\n\tprotected _on_webglcontextrestored() {\n\t\tconsole.log('context restored');\n\t}\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport lodash_isNaN from 'lodash/isNaN';\n\nexport class OrthographicCameraBackgroundController extends BaseBackgroundController {\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tlet width = this.node.params.float('size');\n\t\tlet height = width;\n\n\t\tconst far = this.node.params.float('far');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tquad.scale.x = width;\n\t\t\tquad.scale.y = height;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n}\n","// import lodash_clamp from 'lodash/clamp';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {PerspectiveCamera} from 'three/src/cameras/PerspectiveCamera';\nimport {TypedCameraObjNode, BASE_CAMERA_DEFAULT, CameraTransformParamConfig} from './_BaseCamera';\nimport {PerspectiveCameraBackgroundController} from './utils/cameras/background/PerspectiveCameraController';\n// import {NodeParamsConfig} from '../utils/params/ParamsConfig';\n\nconst DEFAULT = {\n\tfov: 50,\n};\n\n// const EVENT_CHANGE = { type: 'change' };\nimport {ParamConfig, NodeParamsConfig} from '../utils/params/ParamsConfig';\nimport {CameraPostProcessParamConfig} from './utils/cameras/PostProcessController';\nimport {CameraBackgroundParamConfig} from './utils/cameras/background/_BaseController';\nimport {LayerParamConfig} from './utils/LayersController';\nimport {TransformedParamConfig} from './utils/TransformController';\nexport function PerspectiveCameraObjParamConfigMixin<TBase extends Constructor>(Base: TBase) {\n\treturn class Mixin extends Base {\n\t\tfov = ParamConfig.FLOAT(DEFAULT.fov, {range: [0, 100]});\n\t\t// vertical_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 1}});\n\t\t// horizontal_fov_range = ParamConfig.VECTOR2([0, 100], {visible_if: {lock_width: 0}});\n\t};\n}\nclass PerspectiveCameraObjParamConfig extends CameraPostProcessParamConfig(\n\tCameraBackgroundParamConfig(\n\t\tTransformedParamConfig(\n\t\t\tLayerParamConfig(PerspectiveCameraObjParamConfigMixin(CameraTransformParamConfig(NodeParamsConfig)))\n\t\t)\n\t)\n) {}\nconst ParamsConfig = new PerspectiveCameraObjParamConfig();\n\nexport class PerspectiveCameraObjNode extends TypedCameraObjNode<PerspectiveCamera, PerspectiveCameraObjParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'perspective_camera';\n\t}\n\n\tprotected get background_controller_constructor() {\n\t\treturn PerspectiveCameraBackgroundController;\n\t}\n\n\tcreate_object() {\n\t\treturn new PerspectiveCamera(DEFAULT.fov, 1, BASE_CAMERA_DEFAULT.near, BASE_CAMERA_DEFAULT.far);\n\t}\n\n\t// create_params() {\n\t// \t// this.create_common_params();\n\t// \t// this.within_param_folder('render', () => {\n\t// \t// this.add_param(ParamType.FLOAT, 'fov', DEFAULT.fov, {\n\t// \t// \trange: [0, 180],\n\t// \t// \trange_locked: [true, true],\n\t// \t// });\n\t// \t// this.add_param(ParamType.VECTOR2, 'vertical_fov_range', [0, 100], {visible_if: {lock_width: 1}});\n\t// \t// this.add_param(ParamType.VECTOR2, 'horizontal_fov_range', [0, 100], {visible_if: {lock_width: 0}});\n\t// \t// this.create_player_camera_params();\n\t// \t// });\n\t// }\n\n\tupdate_camera() {\n\t\tif (this._object.fov != this.pv.fov) {\n\t\t\tthis._object.fov = this.pv.fov;\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t\tthis._update_for_aspect_ratio();\n\t}\n\n\tprotected _update_for_aspect_ratio() {\n\t\tif (this._aspect) {\n\t\t\t// let lock_width = true;//this.pv.lock_width;\n\n\t\t\tthis._object.aspect = this._aspect;\n\t\t\t// if (lock_width) {\n\t\t\t// \tconst other_fov = this.pv.fov / this._aspect;\n\t\t\t// \tthis._object.zoom = this.get_zoom(this._aspect, other_fov, this.pv.vertical_fov_range);\n\t\t\t// } else {\n\t\t\t// \tthis._object.zoom = 1;\n\t\t\t// }\n\t\t\tthis._object.updateProjectionMatrix();\n\t\t}\n\t}\n\t// private get_zoom(start_zoom: number, other_fov: number, range: Vector2) {\n\t// \tlet zoom = start_zoom;\n\t// \tif (range) {\n\t// \t\tif (other_fov < range.x || other_fov > range.y) {\n\t// \t\t\tconst new_other_fov = lodash_clamp(other_fov, range.x, range.y);\n\t// \t\t\tzoom = start_zoom * (other_fov / new_other_fov);\n\t// \t\t\t// zoom = Math.min(start_zoom, zoom)\n\t// \t\t}\n\t// \t}\n\t// \treturn zoom;\n\t// }\n}\n","import {BaseBackgroundController} from './_BaseController';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_isNaN from 'lodash/isNaN';\nimport lodash_sum from 'lodash/sum';\n// import { Vector2 } from 'three';\n\n// enum CornerNames {\n// \tbl = 'bl',\n// \tbr = 'br',\n// \ttl = 'tl',\n// \ttr = 'tr',\n// }\ninterface Corners2D {\n\tbl: Vector2Like;\n\tbr: Vector2Like;\n\ttl: Vector2Like;\n\ttr: Vector2Like;\n}\ninterface Corners3D {\n\tbl: Vector3;\n\tbr: Vector3;\n\ttl: Vector3;\n\ttr: Vector3;\n}\nconst SCREEN_COORD: Corners2D = {\n\tbl: {x: -1, y: -1},\n\tbr: {x: +1, y: -1},\n\ttl: {x: -1, y: +1},\n\ttr: {x: +1, y: +1},\n};\nconst CORNER_NAMES: Array<keyof Corners3D> = ['bl', 'br', 'tl', 'tr'];\n\nexport class PerspectiveCameraBackgroundController extends BaseBackgroundController {\n\tprivate _bg_corner: Corners3D = {\n\t\tbl: new Vector3(),\n\t\tbr: new Vector3(),\n\t\ttl: new Vector3(),\n\t\ttr: new Vector3(),\n\t};\n\tprivate _bg_center = new Vector3();\n\n\tprotected update_screen_quad() {\n\t\tconst quad = this.screen_quad;\n\n\t\tfor (let corner_name of CORNER_NAMES) {\n\t\t\tthis._update_corner_vector(this._bg_corner[corner_name], SCREEN_COORD[corner_name]);\n\t\t}\n\t\tlet width = this._bg_corner.bl.distanceTo(this._bg_corner.br);\n\t\tlet height = this._bg_corner.bl.distanceTo(this._bg_corner.tl);\n\n\t\tthis._bg_center.x = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].x)) / 4;\n\t\tthis._bg_center.y = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].y)) / 4;\n\t\tthis._bg_center.z = lodash_sum(CORNER_NAMES.map((name) => this._bg_corner[name].z)) / 4;\n\n\t\tconst far = this.node.params.float('far');\n\t\tconst background_ratio = this.node.params.float('background_ratio');\n\t\tif (far && !lodash_isNaN(width) && !lodash_isNaN(height)) {\n\t\t\tconst z = this._bg_center.distanceTo(this.node.object.position);\n\t\t\tconst z_ratio = far / z;\n\t\t\tconst desired_ratio = background_ratio || 1;\n\n\t\t\tif (width > height) {\n\t\t\t\theight = width / desired_ratio;\n\t\t\t} else {\n\t\t\t\theight = width * desired_ratio;\n\t\t\t}\n\n\t\t\tquad.scale.x = width * z_ratio;\n\t\t\tquad.scale.y = height * z_ratio;\n\t\t\tquad.position.z = -0.9999 * far; //.copy(this._bg_center)\n\t\t}\n\t}\n\t_update_corner_vector(vector: Vector3, coord: Vector2Like) {\n\t\tthis._bg_raycaster.setFromCamera(coord, this.node.object);\n\t\tvector\n\t\t\t.copy(this._bg_raycaster.ray.direction)\n\t\t\t.multiplyScalar(this.node.params.float('far'))\n\t\t\t.add(this._bg_raycaster.ray.origin);\n\t}\n}\n","import {CATEGORY_SOP} from './Category';\n\nimport {AddSopNode} from 'src/engine/nodes/sop/Add';\nimport {AnimationCopySopNode} from 'src/engine/nodes/sop/AnimationCopy';\nimport {AnimationMixerSopNode} from 'src/engine/nodes/sop/AnimationMixer';\nimport {AttribAddMultSopNode} from 'src/engine/nodes/sop/AttribAddMult';\nimport {AttribCopySopNode} from 'src/engine/nodes/sop/AttribCopy';\nimport {AttribCreateSopNode} from 'src/engine/nodes/sop/AttribCreate';\nimport {AttribDeleteSopNode} from 'src/engine/nodes/sop/AttribDelete';\nimport {AttribNormalizeSopNode} from 'src/engine/nodes/sop/AttribNormalize';\nimport {AttribPromoteSopNode} from 'src/engine/nodes/sop/AttribPromote';\nimport {AttribRemapSopNode} from 'src/engine/nodes/sop/AttribRemap';\nimport {AttribRenameSopNode} from 'src/engine/nodes/sop/AttribRename';\nimport {AttribTransferSopNode} from 'src/engine/nodes/sop/AttribTransfer';\nimport {BboxScatterSopNode} from 'src/engine/nodes/sop/BboxScatter';\nimport {BlendSopNode} from 'src/engine/nodes/sop/Blend';\nimport {BoxSopNode} from 'src/engine/nodes/sop/Box';\nimport {CacheSopNode} from 'src/engine/nodes/sop/Cache';\nimport {CircleSopNode} from 'src/engine/nodes/sop/Circle';\nimport {ColorSopNode} from 'src/engine/nodes/sop/Color';\nimport {CopySopNode} from 'src/engine/nodes/sop/Copy';\nimport {DataSopNode} from 'src/engine/nodes/sop/Data';\nimport {DataUrlSopNode} from 'src/engine/nodes/sop/DataUrl';\nimport {DelaySopNode} from 'src/engine/nodes/sop/Delay';\nimport {DeleteSopNode} from 'src/engine/nodes/sop/Delete';\nimport {FaceSopNode} from 'src/engine/nodes/sop/Face';\nimport {FileSopNode} from 'src/engine/nodes/sop/File';\nimport {FuseSopNode} from 'src/engine/nodes/sop/Fuse';\nimport {HexagonsSopNode} from 'src/engine/nodes/sop/Hexagons';\nimport {HierarchySopNode} from 'src/engine/nodes/sop/Hierarchy';\n// TODO: heightmap\n// TODO: particles\nimport {JitterSopNode} from 'src/engine/nodes/sop/Jitter';\nimport {LayerSopNode} from 'src/engine/nodes/sop/Layer';\nimport {LineSopNode} from 'src/engine/nodes/sop/Line';\nimport {MaterialSopNode} from 'src/engine/nodes/sop/Material';\nimport {MergeSopNode} from 'src/engine/nodes/sop/Merge';\nimport {NoiseSopNode} from 'src/engine/nodes/sop/Noise';\nimport {NormalsSopNode} from 'src/engine/nodes/sop/Normals';\nimport {NullSopNode} from 'src/engine/nodes/sop/Null';\nimport {ObjectMergeSopNode} from 'src/engine/nodes/sop/ObjectMerge';\nimport {OcclusionSopNode} from 'src/engine/nodes/sop/Occlusion';\nimport {PeakSopNode} from 'src/engine/nodes/sop/Peak';\nimport {PlaneSopNode} from 'src/engine/nodes/sop/Plane';\nimport {PointSopNode} from 'src/engine/nodes/sop/Point';\nimport {PolywireSopNode} from 'src/engine/nodes/sop/Polywire';\nimport {RaySopNode} from 'src/engine/nodes/sop/Ray';\nimport {ResampleSopNode} from 'src/engine/nodes/sop/Resample';\nimport {ScatterSopNode} from 'src/engine/nodes/sop/Scatter';\nimport {ShadowsSopNode} from 'src/engine/nodes/sop/Shadows';\nimport {SkinSopNode} from 'src/engine/nodes/sop/Skin';\nimport {SphereSopNode} from 'src/engine/nodes/sop/Sphere';\nimport {SwitchSopNode} from 'src/engine/nodes/sop/Switch';\nimport {TextSopNode} from 'src/engine/nodes/sop/Text';\nimport {TorusSopNode} from 'src/engine/nodes/sop/Torus';\nimport {TorusKnotSopNode} from 'src/engine/nodes/sop/TorusKnot';\nimport {TransformSopNode} from 'src/engine/nodes/sop/Transform';\nimport {TubeSopNode} from 'src/engine/nodes/sop/Tube';\nimport {UvProjectSopNode} from 'src/engine/nodes/sop/UvProject';\n\nexport interface GeoNodeChildrenMap {\n\tadd: AddSopNode;\n\tanimation_copy: AnimationCopySopNode;\n\tanimation_mixer: AnimationMixerSopNode;\n\tattrib_add_mult: AttribAddMultSopNode;\n\tattrib_copy: AttribCopySopNode;\n\tattrib_create: AttribCreateSopNode;\n\tattrib_delete: AttribDeleteSopNode;\n\tattrib_normalize: AttribNormalizeSopNode;\n\tattrib_promote: AttribPromoteSopNode;\n\tattrib_remap: AttribRemapSopNode;\n\tattrib_rename: AttribRenameSopNode;\n\tattrib_transfer: AttribTransferSopNode;\n\tbbox_scatter: BboxScatterSopNode;\n\tblend: BlendSopNode;\n\tbox: BoxSopNode;\n\tcache: CacheSopNode;\n\tcircle: CircleSopNode;\n\tcolor: ColorSopNode;\n\tcopy: CopySopNode;\n\tdata: DataSopNode;\n\tdata_url: DataUrlSopNode;\n\tdelay: DelaySopNode;\n\tdelete: DeleteSopNode;\n\tface: FaceSopNode;\n\tfile: FileSopNode;\n\tfuse: FuseSopNode;\n\thexagons: HexagonsSopNode;\n\thierarchy: HierarchySopNode;\n\tjitter: JitterSopNode;\n\tlayer: LayerSopNode;\n\tline: LineSopNode;\n\tmaterial: MaterialSopNode;\n\tmerge: MergeSopNode;\n\tnoise: NoiseSopNode;\n\tnormals: NormalsSopNode;\n\tnull: NullSopNode;\n\tobject_merge: ObjectMergeSopNode;\n\tocclusion: OcclusionSopNode;\n\tpeak: PeakSopNode;\n\tplane: PlaneSopNode;\n\tpoint: PointSopNode;\n\tpolywire: PolywireSopNode;\n\tray: RaySopNode;\n\tresample: ResampleSopNode;\n\tscatter: ScatterSopNode;\n\tshadows: ShadowsSopNode;\n\tskin: SkinSopNode;\n\tsphere: SphereSopNode;\n\tswitch: SwitchSopNode;\n\ttext: TextSopNode;\n\ttorus: TorusSopNode;\n\ttorus_knot: TorusKnotSopNode;\n\ttransform: TransformSopNode;\n\ttube: TubeSopNode;\n\tuv_project: UvProjectSopNode;\n}\n\nimport {Poly} from 'src/engine/Poly';\nexport class SopRegister {\n\tstatic run(poly: Poly) {\n\t\tpoly.register_node(AddSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(AnimationCopySopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AnimationMixerSopNode, CATEGORY_SOP.ANIMATION);\n\t\tpoly.register_node(AttribAddMultSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCopySopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribCreateSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribDeleteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribNormalizeSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribPromoteSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRemapSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribRenameSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(AttribTransferSopNode, CATEGORY_SOP.ATTRIBUTE);\n\t\tpoly.register_node(BboxScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BlendSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(BoxSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(CacheSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(CircleSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(ColorSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(CopySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(DataSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DataUrlSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(DelaySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(DeleteSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FaceSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(FileSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(FuseSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(HexagonsSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(HierarchySopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(JitterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LayerSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(LineSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(MaterialSopNode, CATEGORY_SOP.RENDER);\n\t\tpoly.register_node(MergeSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NoiseSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(NormalsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(NullSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ObjectMergeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(OcclusionSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(PeakSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PlaneSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(PointSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(PolywireSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(RaySopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ResampleSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ScatterSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SkinSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(ShadowsSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(SphereSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(SwitchSopNode, CATEGORY_SOP.MISC);\n\t\tpoly.register_node(TextSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TorusSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TorusKnotSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(TransformSopNode, CATEGORY_SOP.MODIFIER);\n\t\tpoly.register_node(TubeSopNode, CATEGORY_SOP.INPUT);\n\t\tpoly.register_node(UvProjectSopNode, CATEGORY_SOP.MODIFIER);\n\t}\n}\n","// import lodash_flatten from 'lodash/flatten';\n// import lodash_last from 'lodash/last';\nimport lodash_times from 'lodash/times';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {TypedSopNode} from './_Base';\n// import {Core} from 'src/Core/_Module';\nimport {CoreConstant} from 'src/core/geometry/Constant';\nimport {CoreGroup} from 'src/core/geometry/Group';\n// import {CoreGeometryUtilShape} from 'src/core/geometry/util/Shape';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AddSopParamsConfig extends NodeParamsConfig {\n\tcreate_point = ParamConfig.BOOLEAN(1);\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 100],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {create_point: true},\n\t});\n\tposition = ParamConfig.VECTOR3([0, 0, 0], {visible_if: {create_point: true}});\n\t// create_polygon = ParamConfig.BOOLEAN(0);\n\topen = ParamConfig.BOOLEAN(0);\n\tconnect_to_last_point = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new AddSopParamsConfig();\n\nexport class AddSopNode extends TypedSopNode<AddSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'add';\n\t}\n\t_objects: Object3D[] | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create polygons from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._objects = [];\n\t\tthis._create_point();\n\t\t// if (this.pv.create_polygon) {\n\t\t// \tthis._create_polygon(input_contents[0]);\n\t\t// }\n\n\t\tthis.set_objects(this._objects);\n\t}\n\n\tprivate _create_point() {\n\t\tif (this.pv.create_point) {\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tconst positions: number[] = [];\n\t\t\tlodash_times(this.pv.points_count, (i) => {\n\t\t\t\tthis.pv.position.toArray(positions, i * 3);\n\t\t\t});\n\t\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\t\t\tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\n\t\t\tif (this._objects) {\n\t\t\t\tthis._objects.push(object);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_polygon(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\t// \tconst is_polygon_closed = !this.pv.open && points.length >= 3;\n\t// \tif (points.length > 0) {\n\t// \t\tif (is_polygon_closed) {\n\t// \t\t\tthis._create_polygon_closed(core_group);\n\t// \t\t} else {\n\t// \t\t\tthis._create_polygon_open(core_group);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _create_polygon_closed(core_group: CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tconst geometry = CoreGeometryUtilShape.geometry_from_points(points);\n\t// \tconst object = this.create_object(geometry);\n\t// \tthis._objects.push(object);\n\t// }\n\n\t// _create_polygon_open(core_group:CoreGroup) {\n\t// \tconst points = core_group.points();\n\n\t// \tlet positions:number[][] = [];\n\t// \tconst indices:number[] = [];\n\t// \tpoints.forEach((point, i) => {\n\t// \t\tpoint.position().toArray(positions, i * 3);\n\t// \t\t// positions.push(point.position().toArray());\n\n\t// \t\tif (i > 0) {\n\t// \t\t\tindices.push(i - 1);\n\t// \t\t\tindices.push(i);\n\t// \t\t}\n\t// \t});\n\n\t// \tif (points.length > 2 && this.pv.connect_to_last_point) {\n\t// \t\tpositions.push(points[0].position().toArray());\n\t// \t\tindices.push(lodash_last(indices));\n\t// \t\tindices.push(0);\n\t// \t}\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new BufferGeometry();\n\t// \tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \tthis._objects.push(object);\n\t// }\n}\n","import lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Triangle} from 'three/src/math/Triangle';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferGeometry, Triangle, Vector2, Vector3}\nimport {CorePoint} from './Point';\nimport {CoreGeometry} from './Geometry';\nimport {CoreMath} from 'src/core/math/_Module';\n// import {CoreInterpolate} from 'src/core/Math/Interpolate'\n\ninterface FaceLike {\n\ta: number;\n\tb: number;\n\tc: number;\n}\n\ntype CorePointArray3 = [CorePoint, CorePoint, CorePoint];\ntype Vector3Array2 = [Vector3, Vector3];\ntype Vector3Array3 = [Vector3, Vector3, Vector3];\n\nexport class CoreFace {\n\t_geometry: BufferGeometry;\n\t_points: CorePointArray3 | undefined;\n\t_triangle: Triangle | undefined;\n\t_positions: Vector3Array3 | undefined;\n\t_deltas: Vector3Array2 | undefined;\n\n\tconstructor(private _core_geometry: CoreGeometry, private _index: number) {\n\t\tthis._geometry = this._core_geometry.geometry();\n\t}\n\tget index() {\n\t\treturn this._index;\n\t}\n\tget points() {\n\t\treturn (this._points = this._points || this._get_points());\n\t}\n\tprivate _get_points(): CorePointArray3 {\n\t\tconst index_array = this._geometry.index?.array || [];\n\t\tconst start = this._index * 3;\n\t\treturn [\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 0]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 1]),\n\t\t\tnew CorePoint(this._core_geometry, index_array[start + 2]),\n\t\t];\n\t}\n\tget positions() {\n\t\treturn (this._positions = this._positions || this._get_positions());\n\t}\n\tprivate _get_positions(): Vector3Array3 {\n\t\tconst points = this.points;\n\t\treturn [points[0].position(), points[1].position(), points[2].position()];\n\t}\n\tget triangle() {\n\t\treturn (this._triangle = this._triangle || this._get_triangle());\n\t}\n\tprivate _get_triangle(): Triangle {\n\t\tconst positions = this.positions;\n\t\treturn new Triangle(positions[0], positions[1], positions[2]);\n\t}\n\tget deltas() {\n\t\treturn (this._deltas = this._deltas || this._get_deltas());\n\t}\n\tprivate _get_deltas(): Vector3Array2 {\n\t\treturn [this.positions[1].clone().sub(this.positions[0]), this.positions[2].clone().sub(this.positions[0])];\n\t}\n\n\tget area(): number {\n\t\treturn this.triangle.getArea();\n\t}\n\tcenter(target: Vector3) {\n\t\tconst positions = this.positions;\n\t\ttarget.x = (positions[0].x + positions[1].x + positions[2].x) / 3;\n\t\ttarget.y = (positions[0].y + positions[1].y + positions[2].y) / 3;\n\t\ttarget.z = (positions[0].z + positions[1].z + positions[2].z) / 3;\n\n\t\treturn target;\n\t}\n\n\trandom_position(seed: number) {\n\t\tlet weights = [CoreMath.rand_float(seed), CoreMath.rand_float(seed * 6541)];\n\n\t\tif (weights[0] + weights[1] > 1) {\n\t\t\tweights[0] = 1 - weights[0];\n\t\t\tweights[1] = 1 - weights[1];\n\t\t}\n\n\t\treturn this.positions[0]\n\t\t\t.clone()\n\t\t\t.add(this.deltas[0].clone().multiplyScalar(weights[0]))\n\t\t\t.add(this.deltas[1].clone().multiplyScalar(weights[1]));\n\t}\n\t// random_position(seed: number){\n\t// \tlet weights = [\n\t// \t\tCoreMath.rand_float(seed),\n\t// \t\tCoreMath.rand_float(seed*524),\n\t// \t\tCoreMath.rand_float(seed*4631)\n\t// \t]\n\t// \tconst sum = lodash_sum(weights)\n\t// \tweights = weights.map(w=>w/sum)\n\t// \tconst pos = new Vector3()\n\t// \tlet positions = this.positions().map((p,i)=> p.multiplyScalar(weights[i]))\n\t// \tpositions.forEach(p=>{\n\t// \t\tpos.add(p)\n\t// \t})\n\t// \treturn pos\n\t// }\n\n\tattrib_value_at_position(attrib_name: string, position: Vector3) {\n\t\t// const weights = CoreInterpolate._weights_from_3(position, this._positions)\n\t\tconst barycentric_coordinates = new Vector3();\n\t\tthis.triangle.getBarycoord(position, barycentric_coordinates);\n\t\tconst weights = barycentric_coordinates.toArray();\n\n\t\tconst attrib = this._geometry.attributes[attrib_name];\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst point_values = this.points.map((point) => point.attrib_value(attrib_name));\n\n\t\tlet new_attrib_value;\n\t\tlet sum;\n\t\tlet index = 0;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tsum = 0;\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tsum += point_value * weights[index];\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\tfor (let point_value of point_values) {\n\t\t\t\t\tconst weighted_value = point_value.multiplyScalar(weights[index]);\n\t\t\t\t\tif (sum) {\n\t\t\t\t\t\tsum.add(weighted_value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tsum = weighted_value;\n\t\t\t\t\t}\n\t\t\t\t\tindex++;\n\t\t\t\t}\n\t\t\t\tnew_attrib_value = sum;\n\t\t\t}\n\t\t}\n\t\treturn new_attrib_value;\n\t}\n\n\tstatic interpolated_value(\n\t\tgeometry: BufferGeometry,\n\t\tface: FaceLike,\n\t\tintersect_point: Vector3,\n\t\tattrib: BufferAttribute\n\t) {\n\t\t// let point_index, i, sum\n\t\tconst point_indices = [face.a, face.b, face.c];\n\t\tconst position_attrib = geometry.getAttribute('position');\n\t\tconst position_attrib_array = position_attrib.array;\n\t\tconst point_positions = point_indices.map(\n\t\t\t(point_index) =>\n\t\t\t\tnew Vector3(\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 0],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 1],\n\t\t\t\t\tposition_attrib_array[point_index * 3 + 2]\n\t\t\t\t)\n\t\t);\n\n\t\tconst attrib_size = attrib.itemSize;\n\t\tconst attrib_array = attrib.array;\n\t\tlet attrib_values: NumericAttribValue[] = [];\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tattrib_values = point_indices.map((point_index) => attrib_array[point_index]);\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) => new Vector2(attrib_array[point_index * 2 + 0], attrib_array[point_index * 2 + 1])\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\tattrib_values = point_indices.map(\n\t\t\t\t\t(point_index) =>\n\t\t\t\t\t\tnew Vector3(\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 0],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 1],\n\t\t\t\t\t\t\tattrib_array[point_index * 3 + 2]\n\t\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t}\n\n\t\tconst dist_to_points = point_indices.map((point_index, i) => intersect_point.distanceTo(point_positions[i]));\n\n\t\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-points\n\t\t// TODO: replace this with Core.Math.Interpolate\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_points[0] * dist_to_points[1],\n\t\t\tdist_to_points[0] * dist_to_points[2],\n\t\t\tdist_to_points[1] * dist_to_points[2],\n\t\t]);\n\n\t\tconst weights = [\n\t\t\t(dist_to_points[1] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[2]) / distance_total,\n\t\t\t(dist_to_points[0] * dist_to_points[1]) / distance_total,\n\t\t];\n\n\t\tlet new_attrib_value;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tnew_attrib_value = lodash_sum(\n\t\t\t\t\tpoint_indices.map((point_indx, i) => weights[i] * (attrib_values[i] as number))\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tvar values = point_indices.map((point_index, i) =>\n\t\t\t\t\t(attrib_values[i] as Vector3).multiplyScalar(weights[i])\n\t\t\t\t);\n\t\t\t\tnew_attrib_value = null;\n\t\t\t\tfor (let value of values) {\n\t\t\t\t\tif (new_attrib_value) {\n\t\t\t\t\t\tnew_attrib_value.add(value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnew_attrib_value = value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t}\n\n\t\treturn new_attrib_value;\n\t}\n}\n","import {InterleavedBufferAttribute} from 'three/src/core/InterleavedBufferAttribute'\n\nexport class MonkeyPatcher {\n\t// this allows cloning of geometries containing InterleavedBufferAttribute such as soldier.glb\n\tstatic patch(attribute: InterleavedBufferAttribute) {\n\t\tObject.assign(attribute, {\n\t\t\tclone: function() {\n\t\t\t\treturn new InterleavedBufferAttribute(\n\t\t\t\t\tattribute.data.clone(),\n\t\t\t\t\tattribute.itemSize,\n\t\t\t\t\tattribute.offset,\n\t\t\t\t\tattribute.normalized\n\t\t\t\t)\n\t\t\t},\n\t\t})\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\n// import {Object3D} from 'three/src/core/Object3D'\n// import {Group} from 'three/src/objects/Group'\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Box3} from 'three/src/math/Box3';\nimport {TypedContainer} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\n// import {CoreObject} from 'src/core/geometry/Object'\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {ContainableMap} from './utils/ContainableMap';\n// import {CoreConstant} from 'src/core/geometry/Constant'\n\n// const CoreGeometryGroup = CoreGroup\n\n// export type RequestContainerGeometryCallback = (container: Geometry)=>void\n\n// interface GroupOptions {\n// \tclone?: boolean\n// }\n// interface BooleanByString {\n// \t[propName: string]: boolean\n// }\nexport class GeometryContainer extends TypedContainer<ContainableMap['GEOMETRY']> {\n\t// protected _group: Group = new Group()\n\t// private _objects_by_uuid: BooleanByString = {}\n\t// protected _content: Object3D[] = []\n\t// protected _core_group: CoreGroup | null;\n\n\t// _points_count: number | null;\n\t// _bounding_box: Box3 | null;\n\n\t// constructor() {\n\t// \tsuper();\n\t// \t// this._materials = [];\n\t// }\n\n\t// _post_set_content() {\n\t// \tthis._core_group = this._core_group || new CoreGroup();\n\t// \tthis._core_group.touch();\n\t// \tthis._core_group.set_objects(this._content);\n\t// }\n\tset_objects(objects: Object3D[]) {}\n\n\t// clone_content(){\n\t// \treturn this._content.map(object=>CoreObject.clone(object))\n\t// }\n\t// core_content(): CoreGroup | null {\n\t// \treturn this._core_group; //= this._core_group || this._create_core_group()\n\t// }\n\tcore_content_cloned(): CoreGroup | undefined {\n\t\tif (this._content) {\n\t\t\treturn this._content.clone();\n\t\t}\n\t}\n\t// private _create_core_group(){\n\t// \tif(this._content){\n\t// \t\tconst core_group = new CoreGroup()\n\t// \t\tcore_group.set_objects(this._content)\n\t// \t\treturn core_group\n\t// \t}\n\t// }\n\t// reset_caches() {\n\t// \tconsole.log('reset cache');\n\t// \t// this._content = null;\n\t// \t// this._points_count = null;\n\t// \t// this._bounding_box = null;\n\t// }\n\t// _default_content() {\n\t// \treturn new CoreGroup();\n\t// }\n\n\t// set_geometry: (geometry)->\n\t// \tif @_content?\n\t// \t\t@_content.dispose()\n\t// \tthis.set_content(geometry)\n\t// has_group: ->\n\t// \tthis.has_content()\n\t// group(options?: GroupOptions): Group | null{\n\t// \tlet src_group;\n\t// \tif (options == null) { options = {}; }\n\t// \tif ((options['clone'] == null)) {\n\t// \t\toptions['clone'] = true;\n\t// \t}\n\n\t// \tlet new_group = null;\n\t// \tif ((src_group = this.content()) != null) {\n\t// \t\tif (options['clone'] === true) {\n\t// \t\t\tnew_group = CoreGroup.clone(src_group);\n\t// \t\t} else {\n\t// \t\t\tnew_group = src_group;\n\t// \t\t}\n\t// \t}\n\n\t// \treturn new_group;\n\t// }\n\n\t// group_wrapper(options){\n\t// \t// if (options == null) { options = {}; }\n\t// \t// return new CoreGroup(this.group(options));\n\t// }\n\t// core_group() {\n\t// \treturn this._core_group; //this.group_wrapper(options)\n\t// }\n\tset_content(content: ContainableMap['GEOMETRY']) {\n\t\tsuper.set_content(content);\n\t}\n\t// object(options){\n\t// \tif (options == null) { options = {}; }\n\t// \treturn this.group(options);\n\t// }\n\t// _post_set_content(){\n\t// \t// const objects_to_remove = []\n\t// \t// const objects_to_add = []\n\t// \t// const new_objects_by_uuid = {}\n\t// \t// for(let object of this._content){\n\t// \t// \tif(!this._objects_by_uuid[object.uuid]){\n\t// \t// \t\tobjects_to_add.push(object)\n\t// \t// \t}\n\t// \t// \tnew_objects_by_uuid[object.uuid] = true\n\t// \t// }\n\t// \t// for(let uuid of Object.keys(this._objects_by_uuid)){\n\n\t// \t// }\n\t// \tlet child\n\t// \twhile(child = this._group.children[0]){\n\t// \t\tthis._group.remove(child)\n\t// \t}\n\t// \tfor(let object of this._content){\n\t// \t\tthis._group.add(object)\n\t// \t}\n\t// }\n\n\t//\n\t//\n\t// INFOS\n\t//\n\t//\n\t// infos() {\n\t// \tif (this._content != null) {\n\t// \t\tconst bbox = this.bounding_box();\n\t// \t\tconst center = this.center(); //bbox.min.clone().add(bbox.max).multiplyScalar(0.5)\n\t// \t\tconst size = this.size(); //bbox.max.clone().sub(bbox.min)\n\n\t// \t\tconst node = this.node();\n\t// \t\tconst part_1 = [\n\t// \t\t\t`time dependent: ${node.is_time_dependent()}`,\n\t// \t\t\t`${node.cooks_count()} cooks`,\n\t// \t\t\t`cook time: ${node.cook_time()}`,\n\t// \t\t\t`cook time with inputs: ${node.cook_time_with_inputs()}`,\n\t// \t\t\t`${this.points_count()} points`,\n\t// \t\t\t`${this.objects_count()} object(s)  (${this.objects_visible_count()} visible)`\n\t// \t\t];\n\n\t// \t\tconst part_2 = [];\n\t// \t\tconst count_by_type = this.objects_count_by_type();\n\t// \t\tObject.keys(count_by_type).forEach((type)=>{\n\n\t// \t\t\tconst count = count_by_type[type];\n\t// \t\t\treturn part_2.push(`${count} ${type}`);\n\t// \t\t});\n\n\t// \t\tconst vertex_attributes = this.vertex_attribute_names();\n\t// \t\tconst object_attributes = this.object_attribute_names();\n\t// \t\tpart_2.push(`vertex attributes (${vertex_attributes.length}): ${vertex_attributes.join(', ')}`);\n\t// \t\tpart_2.push(`object attributes (${object_attributes.length}): ${object_attributes.join(', ')}`);\n\n\t// \t\tconst part_3 = [\n\t// \t\t\t\"bbox:\",\n\t// \t\t\t[bbox.min.x, bbox.min.y, bbox.min.z],\n\t// \t\t\t[bbox.max.x, bbox.max.y, bbox.max.z],\n\t// \t\t\t\"center:\",\n\t// \t\t\t[center.x, center.y, center.z],\n\t// \t\t\t\"size:\",\n\t// \t\t\t[size.x, size.y, size.z],\n\t// \t\t\tthis._content\n\t// \t\t];\n\n\t// \t\treturn lodash_concat( part_1, part_2, part_3 );\n\t// \t}\n\t// }\n\n\tprivate first_object() {\n\t\tif (this._content) {\n\t\t\treturn this._content.objects()[0];\n\t\t}\n\t}\n\tprivate first_geometry(): BufferGeometry | null {\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\treturn (object as Mesh).geometry as BufferGeometry;\n\t\t} else {\n\t\t\treturn null;\n\t\t}\n\t}\n\n\tobjects_count(): number {\n\t\t// let count = 0\n\t\t// if(this._content){\n\t\t// \tcount = this._content.children.length\n\t\t// }\n\t\t// return count\n\t\tif (this._content) {\n\t\t\treturn this._content.objects().length;\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\t}\n\tobjects_visible_count(): number {\n\t\tlet count = 0;\n\t\tif (this._content) {\n\t\t\tcount = this._content.objects().filter((c) => c.visible).length; // lodash_filter(this._content, c=> c.visible).length;\n\t\t}\n\t\treturn count;\n\t}\n\tobjects_count_by_type() {\n\t\tconst count_by_type: Dictionary<number> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tif (count_by_type[human_type] == null) {\n\t\t\t\t\tcount_by_type[human_type] = 0;\n\t\t\t\t}\n\t\t\t\tcount_by_type[human_type] += 1;\n\t\t\t}\n\t\t}\n\t\treturn count_by_type;\n\t}\n\tobjects_names_by_type() {\n\t\tconst names_by_type: Dictionary<string[]> = {};\n\t\tconst core_group = this._content;\n\t\tif (this._content && core_group) {\n\t\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\t\tconst human_type = core_object.human_type();\n\t\t\t\tnames_by_type[human_type] = names_by_type[human_type] || [];\n\t\t\t\tnames_by_type[human_type].push(core_object.name());\n\t\t\t}\n\t\t}\n\t\treturn names_by_type;\n\t}\n\n\tvertex_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tnames = Object.keys(geometry.attributes);\n\t\t}\n\t\treturn names;\n\t}\n\tvertex_attribute_sizes_by_name() {\n\t\tlet sizes_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\tsizes_by_name[attrib_name] = attrib.itemSize;\n\t\t\t});\n\t\t}\n\t\treturn sizes_by_name;\n\t}\n\tvertex_attribute_types_by_name() {\n\t\tlet types_by_name: Dictionary<number> = {};\n\t\tconst geometry = this.first_geometry();\n\t\tif (geometry) {\n\t\t\tconst core_geo = new CoreGeometry(geometry);\n\t\t\tObject.keys(geometry.attributes).forEach((attrib_name) => {\n\t\t\t\ttypes_by_name[attrib_name] = core_geo.attrib_type(attrib_name);\n\t\t\t});\n\t\t}\n\t\treturn types_by_name;\n\t}\n\tobject_attribute_names() {\n\t\tlet names: string[] = [];\n\t\tconst object = this.first_object();\n\t\tif (object) {\n\t\t\tnames = Object.keys(object.userData['attributes'] || {});\n\t\t}\n\t\treturn names;\n\t}\n\n\tpoints_count(): number {\n\t\tif (this._content) {\n\t\t\treturn this._content.points_count();\n\t\t} else {\n\t\t\treturn 0;\n\t\t}\n\n\t\t// return this._points_count != null ? this._points_count : (this._points_count = this._compute_points_count());\n\t}\n\n\t// _compute_points_count() {\n\t// \tlet points_count = 0;\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\tobject.traverse((object) => {\n\t// \t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t// \t\t\t\tif (geometry) {\n\t// \t\t\t\t\tpoints_count += CoreGeometry.points_count(geometry);\n\t// \t\t\t\t}\n\t// \t\t\t});\n\t// \t\t}\n\t// \t}\n\t// \treturn points_count;\n\t// }\n\t//@_content.userData['points_count']\n\t//Core.Geometry.Geometry.points_count(@_content)\n\t// count = 0\n\t// if (position = @_content.getAttribute('position'))?\n\t// \tif (array = position.array)?\n\t// \t\tcount = array.length / 3\n\n\t// count\n\n\t// points_for_geometry: (geometry)->\n\t// \tCore.Geometry.Geometry.points_from_geometry(geometry)\n\n\t// create_geometry_from_points: (points, index_mode)->\n\t// \tCore.Geometry.Geometry.geometry_from_points(points, index_mode)\n\n\t//\n\t//\n\t// BBOX\n\t//\n\t//\n\tbounding_box(): Box3 {\n\t\treturn this._content.bounding_box();\n\t\t// return this._bounding_box != null ? this._bounding_box : (this._bounding_box = this._compute_bounding_box());\n\t}\n\tcenter(): Vector3 {\n\t\treturn this._content.center();\n\t\t// const center = new Vector3();\n\t\t// this.bounding_box().getCenter(center);\n\t\t// return center;\n\t}\n\tsize(): Vector3 {\n\t\treturn this._content.size();\n\t\t// const size = new Vector3();\n\t\t// this.bounding_box().getSize(size);\n\t\t// return size;\n\t}\n\n\t// private _compute_bounding_box() {\n\t// \tconst bbox = new Box3();\n\t// \tif (this._content) {\n\t// \t\tfor (let object of this._content.objects()) {\n\t// \t\t\t// const box = new Box3()\n\t// \t\t\t// bbox.setFromObject(object);\n\t// \t\t\tbbox.expandByObject(object);\n\t// \t\t}\n\t// \t}\n\t// \treturn bbox;\n\t// }\n}\n","import {TypedSopNode} from './_Base';\n// import {CoreTransform} from 'src/Core/Transform';\n// import {ParamType} from 'src/Engine/Param/_Module'\n\n// interface ActionsByName {\n// \t[propName: string]: THREE.AnimationClip;\n// }\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {Object3DWithAnimation} from 'src/core/geometry/Animation';\nclass AnimationCopySopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new AnimationCopySopParamsConfig();\n\nexport class AnimationCopySopNode extends TypedSopNode<AnimationCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy animation to', 'geometry to copy animation from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_target = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst src_object = core_group_src.objects()[0] as Object3DWithAnimation;\n\t\tconst target_object = core_group_target.objects()[0] as Object3DWithAnimation;\n\n\t\tconst src_animations = src_object.animations;\n\t\tif (src_animations) {\n\t\t\ttarget_object.animations = src_animations.map((a) => a.clone());\n\t\t\tthis.set_core_group(core_group_target);\n\t\t} else {\n\t\t\tthis.states.error.set('no animation found');\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport lodash_isArray from 'lodash/isArray';\n// import {Object3D} from 'three/src/core/Object3D';\nimport {AnimationMixer} from 'three/src/animation/AnimationMixer';\n// import {AnimationClip} from 'three/src/animation/AnimationClip';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {Object3DWithAnimation} from 'src/core/geometry/Animation';\nimport {ParamType} from 'src/engine/poly/ParamType';\nimport {AnimationAction} from 'three/src/animation/AnimationAction';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {Material} from 'three/src/materials/Materials';\nimport {MaterialWithSkinning} from 'src/core/geometry/Material';\nimport {NodeEvent} from 'src/engine/poly/NodeEvent';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BaseNodeType} from '../_Base';\nclass AnimationMixerSopParamsConfig extends NodeParamsConfig {\n\ttime = ParamConfig.FLOAT('$T', {range: [0, 10]});\n\tprepare = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tAnimationMixerSopNode.PARAM_CALLBACK_prepare(node as AnimationMixerSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new AnimationMixerSopParamsConfig();\n\nexport class AnimationMixerSopNode extends TypedSopNode<AnimationMixerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'animation_mixer';\n\t}\n\n\t_previous_time: number | null = null;\n\t_mixer: AnimationMixer | null = null;\n\t_actions_by_name: Dictionary<AnimationAction> = {};\n\t_values_by_param_name: Dictionary<number> = {};\n\t// _mixer_used_once: boolean = false\n\t_animation_target: Object3DWithAnimation | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be animated'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tif (!this._mixer) {\n\t\t\tthis.create_mixer(input_contents[0]);\n\t\t} else {\n\t\t\tthis._update_mixer();\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n\n\tprivate create_mixer(core_group: CoreGroup) {\n\t\tthis._animation_target = core_group.objects()[0] as Object3DWithAnimation;\n\t\tthis._mixer = new AnimationMixer(this._animation_target);\n\n\t\tthis._remove_spare_params();\n\t\tthis._actions_by_name = {};\n\n\t\tif (this._animation_target.animations) {\n\t\t\tthis._animation_target.animations.forEach((animation, i) => {\n\t\t\t\tconst param_name = animation.name;\n\t\t\t\tconst previous_value = this._values_by_param_name[param_name];\n\t\t\t\tlet default_value = previous_value;\n\t\t\t\tif (default_value == null) {\n\t\t\t\t\tdefault_value = i == 0 ? 1 : 0;\n\t\t\t\t}\n\t\t\t\tconst param = this.add_param(ParamType.FLOAT, param_name, default_value, {spare: true});\n\t\t\t\tif (param) {\n\t\t\t\t\tconst prev_value = this._values_by_param_name[param_name];\n\t\t\t\t\tif (prev_value) {\n\t\t\t\t\t\tparam.set(prev_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (this._mixer) {\n\t\t\t\t\tconst action = this._mixer.clipAction(animation);\n\t\t\t\t\tthis._actions_by_name[animation.name] = action;\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.emit(NodeEvent.PARAMS_UPDATED);\n\n\t\tObject.keys(this._actions_by_name).forEach((name) => {\n\t\t\tthis._actions_by_name[name].play();\n\t\t});\n\n\t\t// set material skinning\n\t\tconst materials_by_id: Dictionary<Material> = {};\n\t\tthis._animation_target.traverse((object3d: Object3D) => {\n\t\t\tconst child = object3d as Mesh;\n\t\t\tif (child.material) {\n\t\t\t\tif (!lodash_isArray(child.material)) {\n\t\t\t\t\tmaterials_by_id[child.material.uuid] = child.material;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\tObject.keys(materials_by_id).forEach((uuid) => {\n\t\t\tconst material = materials_by_id[uuid] as MaterialWithSkinning;\n\t\t\tmaterial.skinning = true;\n\t\t\tmaterial.morphTargets = true;\n\t\t});\n\t\tthis._previous_time = null;\n\t\tthis._update_mixer();\n\t\tthis._update_mixer_weights(); // might be redundant with _update_mixer, but ensures this is done on load\n\t\tthis.set_object(this._animation_target);\n\t}\n\n\tprivate _remove_spare_params() {\n\t\tthis._values_by_param_name = {};\n\t\tconst current_param_names: string[] = this.params.spare_names;\n\t\tcurrent_param_names.forEach((param_name) => {\n\t\t\tconst param = this.params.get_float(param_name);\n\t\t\tif (param) {\n\t\t\t\tthis._values_by_param_name[param_name] = param.value;\n\t\t\t\tthis.params.delete_param(param_name);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _update_mixer() {\n\t\tif (this.pv.time != this._previous_time) {\n\t\t\tthis._update_mixer_time();\n\t\t} else {\n\t\t\tthis._update_mixer_weights();\n\t\t}\n\t}\n\tprivate _update_mixer_time() {\n\t\tconst delta = this.pv.time - (this._previous_time || 0);\n\t\tif (this._mixer) {\n\t\t\tthis._mixer.update(delta);\n\t\t}\n\t\tthis._previous_time = this.pv.time;\n\t}\n\n\tprivate _update_mixer_weights() {\n\t\tfor (let name of Object.keys(this._actions_by_name)) {\n\t\t\tconst action = this._actions_by_name[name];\n\t\t\tconst cache_value = this.params.get_float(name).value;\n\t\t\tif (cache_value != null) {\n\t\t\t\taction.setEffectiveWeight(cache_value);\n\t\t\t}\n\t\t}\n\t}\n\n\tstatic PARAM_CALLBACK_prepare(node: AnimationMixerSopNode, param: BaseParamType) {\n\t\tnode.prepare_animation_mixer();\n\t}\n\tasync prepare_animation_mixer() {\n\t\tthis._mixer = null;\n\t\tconst container = await this.io.inputs.eval_required_input(0);\n\t\tthis.create_mixer(container.core_content_cloned());\n\t\tthis.set_dirty();\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {Core} from 'src/Core/_Module';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass AttribAddMultSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tpre_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n\tmult = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tpost_add = ParamConfig.FLOAT(0, {range: [0, 1]});\n}\nconst ParamsConfig = new AttribAddMultSopParamsConfig();\n\nexport class AttribAddMultSopNode extends TypedSopNode<AttribAddMultSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_add_mult';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tthis._update_attrib(attrib_name, geometry);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _update_attrib(attrib_name: string, geometry: BufferGeometry) {\n\t\tconst attribute = geometry.getAttribute(attrib_name) as BufferAttribute;\n\t\tif (attribute) {\n\t\t\tconst values = attribute.array as number[];\n\n\t\t\tconst pre_add = this.pv.pre_add;\n\t\t\tconst mult = this.pv.mult;\n\t\t\tconst post_add = this.pv.post_add;\n\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\tconst value = values[i];\n\t\t\t\tvalues[i] = (value + pre_add) * mult + post_add;\n\t\t\t}\n\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\tattribute.needsUpdate = true;\n\t\t\t}\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nclass AttribCopySopParamsConfig extends NodeParamsConfig {\n\t// class = ParamConfig.INTEGER(CoreConstant.ATTRIB_CLASS.VERTEX, {\n\t// \tmenu: {\n\t// \t\tentries: [\n\t// \t\t\t{name: 'vertex', value: CoreConstant.ATTRIB_CLASS.VERTEX},\n\t// \t\t\t{name: 'object', value: CoreConstant.ATTRIB_CLASS.OBJECT},\n\t// \t\t],\n\t// \t},\n\t// })\n\tname = ParamConfig.STRING('');\n\ttnew_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {tnew_name: 1}});\n\t// to_all_components = ParamConfig.BOOLEAN(1)\n\t// src_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n\t// dest_component = ParamConfig.INTEGER(0, {\n\t// \trange: [0, 2],\n\t// \trange_locked: [true, true],\n\t// \tvisible_if: {to_all_components: 0},\n\t// })\n}\nconst ParamsConfig = new AttribCopySopParamsConfig();\n\n// TODO: attrib copy should handle string attributes\nexport class AttribCopySopNode extends TypedSopNode<AttribCopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_copy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to copy attributes to', 'geometry to copy attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group_dest = input_contents[0];\n\t\tconst core_group_src = input_contents[1];\n\n\t\tconst attrib_names = core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tthis.copy_vertex_attribute_between_core_groups(core_group_dest, core_group_src, attrib_name);\n\t\t}\n\n\t\t// switch (this.pv.class) {\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.VERTEX:\n\t\t// \t\tthis.copy_vertex_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// \tcase CoreConstant.ATTRIB_CLASS.OBJECT:\n\t\t// \t\tthis.copy_object_attribute(core_group_dest, core_group_src);\n\t\t// \t\tbreak;\n\t\t// }\n\n\t\treturn this.set_core_group(core_group_dest);\n\t}\n\n\tprivate copy_vertex_attribute_between_core_groups(\n\t\tcore_group_dest: CoreGroup,\n\t\tcore_group_src: CoreGroup,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_objects = core_group_src.objects();\n\t\tconst dest_objects = core_group_dest.objects();\n\n\t\tif (dest_objects.length > src_objects.length) {\n\t\t\tthis.states.error.set('second input does not have enough objects to copy attributes from');\n\t\t} else {\n\t\t\tfor (let i = 0; i < dest_objects.length; i++) {\n\t\t\t\tconst dest_geometry = dest_objects[i].geometry;\n\t\t\t\tconst src_geometry = dest_objects[i].geometry;\n\t\t\t\tthis.copy_vertex_attribute_between_geometries(dest_geometry, src_geometry, attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\tprivate copy_vertex_attribute_between_geometries(\n\t\tdest_geometry: BufferGeometry,\n\t\tsrc_geometry: BufferGeometry,\n\t\tattrib_name: string\n\t) {\n\t\tconst src_attrib = src_geometry.getAttribute(attrib_name);\n\t\tif (src_attrib) {\n\t\t\tconst size = src_attrib.itemSize;\n\t\t\tconst src_points_count = src_geometry.getAttribute('position').array.length / 3;\n\t\t\tconst dest_points_count = dest_geometry.getAttribute('position').array.length / 3;\n\t\t\tif (dest_points_count > src_points_count) {\n\t\t\t\tthis.states.error.set('not enough points in second input');\n\t\t\t}\n\t\t\tconst src_array = src_attrib.array as number[];\n\t\t\tconst sub_array = src_array.slice(0, dest_points_count * size);\n\t\t\tconst dest_name = this.pv.tnew_name ? this.pv.new_name : attrib_name;\n\t\t\tdest_geometry.setAttribute(dest_name, new Float32BufferAttribute(sub_array, size));\n\t\t} else {\n\t\t\tthis.states.error.set(`attribute '${attrib_name}' does not exist on second input`);\n\t\t}\n\t}\n\n\t// _src_value_to_all_components(src_attrib_value: NumericAttribValue, dest_attrib_size) {\n\t// \tif (lodash_isNumber(src_attrib_value)) {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value, src_attrib_value);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(src_attrib_value, src_attrib_value, src_attrib_value);\n\t// \t\t}\n\t// \t} else {\n\t// \t\tswitch (dest_attrib_size) {\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.x;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn new THREE.Vector2(src_attrib_value.x, src_attrib_value.y);\n\t// \t\t\tcase 3:\n\t// \t\t\t\treturn new THREE.Vector3(\n\t// \t\t\t\t\tsrc_attrib_value.x,\n\t// \t\t\t\t\tsrc_attrib_value.y,\n\t// \t\t\t\t\tsrc_attrib_value.z || src_attrib_value.y\n\t// \t\t\t\t);\n\t// \t\t}\n\t// \t}\n\t// }\n\n\t// _src_value_to_component(src_attrib_value, current_dest_value, src_component, dest_component) {\n\t// \tconst src_component_value = (() => {\n\t// \t\tswitch (src_component) {\n\t// \t\t\tcase 0:\n\t// \t\t\t\treturn src_attrib_value.x || src_attrib_value;\n\t// \t\t\tcase 1:\n\t// \t\t\t\treturn src_attrib_value.y;\n\t// \t\t\tcase 2:\n\t// \t\t\t\treturn src_attrib_value.z;\n\t// \t\t}\n\t// \t})();\n\n\t// \tconst dest_component_name = ['x', 'y', 'z'][dest_component];\n\t// \tif (current_dest_value[dest_component_name] != null) {\n\t// \t\tcurrent_dest_value[dest_component_name] = src_component_value;\n\t// \t\treturn current_dest_value;\n\t// \t} else {\n\t// \t\tconst src_component_name = ['x', 'y', 'z'][src_component];\n\t// \t\treturn src_attrib_value[src_component_name];\n\t// \t}\n\t// }\n\n\t// TODO: find a way to use the point method, but have the group api allow easy switch\n\t// private  copy_object_attribute(core_group_dest: CoreGroup, core_group_src:CoreGroup) {\n\t// \t// const objects_dest = core_group_dest.objects();\n\t// \t// const objects_src = core_group_src.objects();\n\n\t// \t//attribute_names = core_group_src.attrib_names_matching_mask(@_param_name)\n\n\t// \t//lodash_each attribute_names, (attrib_name) =>\n\t// \tconst attrib_name = this.pv.name;\n\n\t// \tif (!core_group_dest.has_attrib(attrib_name)) {\n\t// \t\tconst attrib_size = core_group_src.attrib_size(attrib_name);\n\t// \t\tcore_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t// \t}\n\n\t// \tlodash_each(points_dest, (point_dest, i) => {\n\t// \t\tlet point_src;\n\t// \t\tif ((point_src = points_src[i]) != null) {\n\t// \t\t\tconst attrib_value = point_src.attrib_value(attrib_name);\n\t// \t\t\tpoint_dest.set_attrib_value(attrib_name, attrib_value);\n\t// \t\t}\n\t// \t});\n\t// }\n}\n","import lodash_trim from 'lodash/trim';\n\nimport {TypedSopNode} from './_Base';\nimport {\n\tCoreConstant,\n\tAttribClassMenuEntries,\n\tAttribTypeMenuEntries,\n\tAttribClass,\n\tAttribType,\n} from 'src/core/geometry/Constant';\nimport {CoreAttribute} from 'src/core/geometry/Attribute';\n// import {CoreGeometry} from 'src/core/geometry/Geometry'\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\n\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const VALUE_PARAM = {\n// \tVALUEX: 'valuex',\n// \tVALUE: 'value',\n// \tSTRING: 'string',\n// };\n// const DEFAULT_VALUE = {\n// \tvaluex: 0,\n// \tvalue: [0, 0, 0],\n// \tstring: '',\n// };\ntype COMPONENT_INDEX = keyof Vector4Like;\nconst COMPONENT_INDEX: Array<COMPONENT_INDEX> = ['x', 'y', 'z', 'w'];\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AttribCreateSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\ttype = ParamConfig.INTEGER(AttribType.NUMERIC, {\n\t\tmenu: {\n\t\t\tentries: AttribTypeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('new_attrib');\n\tsize = ParamConfig.INTEGER(1, {\n\t\trange: [1, 4],\n\t\trange_locked: [true, true],\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC},\n\t});\n\tvalue1 = ParamConfig.FLOAT(0, {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue2 = ParamConfig.VECTOR2([0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 2},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue3 = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 3},\n\t\texpression: {for_entities: true},\n\t});\n\tvalue4 = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.NUMERIC, size: 4},\n\t\texpression: {for_entities: true},\n\t});\n\tstring = ParamConfig.STRING('', {\n\t\tvisible_if: {type: CoreConstant.ATTRIB_TYPE.STRING},\n\t\texpression: {for_entities: true},\n\t});\n}\nconst ParamsConfig = new AttribCreateSopParamsConfig();\nexport class AttribCreateSopNode extends TypedSopNode<AttribCreateSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_create';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _w_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.name && lodash_trim(this.pv.name) != '') {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.add_point_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.add_object_attribute(core_group);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('attribute name is not valid');\n\t\t}\n\t}\n\n\tasync add_point_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tconst core_object = core_objects[i];\n\t\t\tswitch (this.pv.type) {\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\t\tawait this.add_numeric_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\t\tawait this.add_string_attribute_to_points(core_object);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync add_object_attribute(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects_from_group(this.pv.group);\n\t\tswitch (this.pv.type) {\n\t\t\tcase CoreConstant.ATTRIB_TYPE.NUMERIC:\n\t\t\t\tawait this.add_numeric_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t\tcase CoreConstant.ATTRIB_TYPE.STRING:\n\t\t\t\tawait this.add_string_attribute_to_object(core_objects);\n\t\t\t\tbreak;\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tasync add_numeric_attribute_to_points(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\n\t\tif (param.has_expression()) {\n\t\t\tif (!core_geometry.has_attrib(this.pv.name)) {\n\t\t\t\tcore_geometry.add_numeric_attrib(this.pv.name, this.pv.size, param.value);\n\t\t\t}\n\n\t\t\tconst geometry = core_geometry.geometry();\n\t\t\tconst array = geometry.getAttribute(this.pv.name).array as number[];\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\t\tarray[point.index * this.pv.size + 0] = value;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tconst tmp_arrays = new Array(params.length);\n\t\t\t\tlet component_param;\n\n\t\t\t\tconst arrays_by_geometry_uuid = [\n\t\t\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t\t\tthis._w_arrays_by_geometry_uuid,\n\t\t\t\t];\n\n\t\t\t\tfor (let i = 0; i < params.length; i++) {\n\t\t\t\t\tcomponent_param = params[i];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\ttmp_arrays[i] = this._init_array_if_required(\n\t\t\t\t\t\t\tgeometry,\n\t\t\t\t\t\t\tarrays_by_geometry_uuid[i],\n\t\t\t\t\t\t\tpoints.length\n\t\t\t\t\t\t);\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(point, value) => {\n\t\t\t\t\t\t\t\t// array[point.index()*this.pv.size+i] = value\n\t\t\t\t\t\t\t\ttmp_arrays[i][point.index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconst value = component_param.value;\n\t\t\t\t\t\tfor (let point of points) {\n\t\t\t\t\t\t\tarray[point.index * this.pv.size + i] = value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// commit the tmp values\n\t\t\t\tfor (let j = 0; j < tmp_arrays.length; j++) {\n\t\t\t\t\tconst tmp_array = tmp_arrays[j];\n\t\t\t\t\tif (tmp_array) {\n\t\t\t\t\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\t\t\t\t\tarray[i * this.pv.size + j] = tmp_array[i];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// const value = await param.eval_p();\n\t\t\tcore_object.add_numeric_vertex_attrib(this.pv.name, this.pv.size, param.value);\n\t\t}\n\t}\n\n\tasync add_numeric_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = [this.p.value1, this.p.value2, this.p.value3, this.p.value4][this.pv.size - 1];\n\t\tif (param.has_expression()) {\n\t\t\tif (this.pv.size == 1) {\n\t\t\t\tif (this.p.value1.expression_controller) {\n\t\t\t\t\tawait this.p.value1.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tconst vparam = [this.p.value2, this.p.value3, this.p.value4][this.pv.size - 2];\n\t\t\t\tlet params = vparam.components;\n\t\t\t\tlet values_by_core_object_index: Dictionary<NumericAttribValueAsArray> = {};\n\t\t\t\t// for (let component_param of params) {\n\t\t\t\t// \tvalues.push(component_param.value);\n\t\t\t\t// }\n\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\tvalues_by_core_object_index[core_object.index] = (<unknown>[]) as NumericAttribValueAsArray;\n\t\t\t\t}\n\t\t\t\tfor (let component_index = 0; component_index < params.length; component_index++) {\n\t\t\t\t\tconst component_param = params[component_index];\n\t\t\t\t\tif (component_param.has_expression() && component_param.expression_controller) {\n\t\t\t\t\t\tawait component_param.expression_controller.compute_expression_for_objects(\n\t\t\t\t\t\t\tcore_objects,\n\t\t\t\t\t\t\t(core_object, value) => {\n\t\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = value;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (let core_object of core_objects) {\n\t\t\t\t\t\t\tvalues_by_core_object_index[core_object.index][component_index] = component_param.value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\t\tconst value = values_by_core_object_index[core_object.index];\n\t\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// let value = await param.eval_p();\n\t\t\t// if (this.pv.size > 1) {\n\t\t\t// \tvalue = this._convert_object_numeric_value(value);\n\t\t\t// }\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _convert_object_numeric_value(value: Vector4) {\n\t// \tlet converted_value;\n\t// \tswitch (this.pv.size) {\n\t// \t\tcase 1: {\n\t// \t\t\tconverted_value = value.x;\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 2: {\n\t// \t\t\tconverted_value = new Vector2(value.x, value.y);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 3: {\n\t// \t\t\tconverted_value = new Vector3(value.x, value.y, value.z);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t\tcase 4: {\n\t// \t\t\tconverted_value = new Vector4(value.x, value.y, value.z, value.w);\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// \treturn converted_value;\n\t// }\n\n\tasync add_string_attribute_to_points(core_object: CoreObject) {\n\t\tconst points = core_object.points_from_group(this.pv.group);\n\t\tconst param = this.p.string;\n\n\t\tconst string_values: string[] = [];\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tstring_values[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tstring_values.push(param.value);\n\t\t}\n\n\t\tconst index_data = CoreAttribute.array_to_indexed_arrays(string_values);\n\t\tcore_object.core_geometry().set_indexed_attribute(this.pv.name, index_data['values'], index_data['indices']);\n\t}\n\n\tasync add_string_attribute_to_object(core_objects: CoreObject[]) {\n\t\tconst param = this.p.string;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, value);\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tcore_object.set_attrib_value(this.pv.name, param.value);\n\t\t\t}\n\t\t}\n\t\t// this.context().set_entity(object);\n\n\t\t// const core_object = new CoreObject(object);\n\n\t\t// this.param('string').eval(val => {\n\t\t// \tcore_object.add_attribute(this.pv.name, val);\n\t\t// });\n\t}\n\n\t//\n\t//\n\t// PRIVATE\n\t//\n\t//\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\t// async _eval_params_for_entities(entities){\n\t// \t// let p = Promise.resolve(); // Q() in q\n\n\t// \tconst param = this._value_param();\n\n\t// \tif (param.has_expression()) {\n\t// \t\t// const iterator = new CoreIterator()\n\t// \t\t// await iterator.start_with_array(entities, (element, index)=>{\n\n\t// \t\t// })\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tawait this._eval_param_for_entity(param, entity);\n\t// \t\t}\n\n\t// \t\t// entities.forEach((entity, index)=> {\n\t// \t\t// \tp = p.then(() => {\n\t// \t\t// \t\treturn this._eval_param_for_entity(param, entity);\n\t// \t\t// \t});\n\t// \t\t// });\n\t// \t} else {\n\t// \t\tconst val = await param.eval_p();\n\t// \t\tfor(let entity of entities){\n\t// \t\t\tthis._values.push(val);\n\t// \t\t}\n\t// \t\t// entities.forEach(entity=> {\n\t// \t\t// \treturn this._values.push(val);\n\t// \t\t// });\n\t// \t}\n\n\t// \t// return p;\n\t// }\n\n\t// async _eval_param_for_entity(value_param, entity){\n\t// \tthis.context().set_entity(entity);\n\n\t// \tlet val = await value_param.eval_p()\n\n\t// \t // TODO: optimize. pass directly to the entity instead\n\t// \tif(val.clone){\n\t// \t\tval = val.clone()\n\t// \t}\n\t// \tthis._values.push(val);\n\t// }\n\n\t// private _default_attrib_value() {\n\t// \treturn DEFAULT_VALUE[this._value_param_name()];\n\t// }\n\n\t// private _value_param_name() {\n\t// \tif (this.pv.type == CoreConstant.ATTRIB_TYPE.NUMERIC) {\n\t// \t\tif (this.pv.size == 1) {\n\t// \t\t\treturn VALUE_PARAM.VALUEX;\n\t// \t\t} else {\n\t// \t\t\treturn VALUE_PARAM.VALUE;\n\t// \t\t}\n\t// \t} else {\n\t// \t\treturn VALUE_PARAM.STRING;\n\t// \t}\n\t// }\n\t// private _value_param() {\n\t// \treturn this.params.get(this._value_param_name());\n\t// }\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\t// private _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t// \tfor (let i = 0; i < tmp_array.length; i++) {\n\t// \t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {AttribClassMenuEntries, AttribClass} from 'src/core/geometry/Constant';\n\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AttribDeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribDeleteSopParamsConfig();\n\nexport class AttribDeleteSopNode extends TypedSopNode<AttribDeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_delete';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst attrib_names = core_group.attrib_names_matching_mask(this.pv.name);\n\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\tthis.delete_vertex_attribute(core_group, attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\tthis.delete_object_attribute(core_group, attrib_name);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tdelete_vertex_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tif (child.geometry) {\n\t\t\t\t\tconst core_geometry = new CoreGeometry(child.geometry as BufferGeometry);\n\t\t\t\t\tcore_geometry.delete_attribute(attrib_name);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\tdelete_object_attribute(core_group: CoreGroup, attrib_name: string) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tlet index = 0;\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst child = object3d as Mesh;\n\t\t\t\tconst core_object = new CoreObject(child, index);\n\t\t\t\tcore_object.delete_attribute(attrib_name);\n\t\t\t\tindex++;\n\t\t\t});\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {Vector3} from 'three/src/math/Vector3';\nimport lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AttribNormalizeSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING('');\n\tchange_name = ParamConfig.BOOLEAN(false);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribNormalizeSopParamsConfig();\n\nexport class AttribNormalizeSopNode extends TypedSopNode<AttribNormalizeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_normalize';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._normalize_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_normalize_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet normalized_values: NumericAttribValue[] = [];\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\t// if (this._param_only_integer_values) {\n\t\t\t\t// \tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t// \tconst index_by_value = {};\n\t\t\t\t// \tlodash_each(sorted_values, (sorted_value, i)=> index_by_value[sorted_value] = i);\n\t\t\t\t// \tnormalized_values = lodash_map(values, value=> index_by_value[value]);\n\n\t\t\t\t// } else {\n\t\t\t\tmin = lodash_min(values);\n\t\t\t\tmax = lodash_max(values);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let value of values) {\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values.push(normalized_value);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@pv.name}_max\", max)\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\n\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {TypedSopNode} from './_Base';\nimport {AttribClass, AttribClassMenuEntries} from 'src/core/geometry/Constant';\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreString} from 'src/core/String';\n\nexport enum AttribPromoteMode {\n\tMIN = 0,\n\tMAX = 1,\n\tFIRST_FOUND = 3,\n}\n// const PROMOTE_MODE:PROMOTE_MODE = {\n// \tMIN: 0,\n// \tMAX: 1,\n// \t// AVERAGE: 2,\n// \tFIRST_FOUND: 3,\n// };\nconst PromoteModeMenuEntries = [\n\t{name: 'min', value: AttribPromoteMode.MIN},\n\t{name: 'max', value: AttribPromoteMode.MAX},\n\t{name: 'first_found', value: AttribPromoteMode.FIRST_FOUND},\n];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AttribPromoteSopParamsConfig extends NodeParamsConfig {\n\tclass_from = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tclass_to = ParamConfig.INTEGER(AttribClass.OBJECT, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tmode = ParamConfig.INTEGER(AttribPromoteMode.MIN, {\n\t\tmenu: {\n\t\t\tentries: PromoteModeMenuEntries,\n\t\t},\n\t});\n\tname = ParamConfig.STRING('');\n}\nconst ParamsConfig = new AttribPromoteSopParamsConfig();\n\nexport class AttribPromoteSopNode extends TypedSopNode<AttribPromoteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_promote';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('sort-amount-up');\n\t}\n\n\tcreate_params() {}\n\n\tprivate _core_group: CoreGroup | undefined;\n\tprivate _core_object: CoreObject | undefined;\n\tprivate _values_per_attrib_name: Dictionary<number[]> = {};\n\tprivate _filtered_values_per_attrib_name: Dictionary<number | undefined> = {};\n\tcook(input_contents: CoreGroup[]) {\n\t\tthis._core_group = input_contents[0];\n\n\t\tthis._values_per_attrib_name = {};\n\t\tthis._filtered_values_per_attrib_name = {};\n\n\t\tfor (let core_object of this._core_group.core_objects()) {\n\t\t\tthis._core_object = core_object;\n\t\t\tthis.find_values();\n\t\t\tthis.filter_values();\n\t\t\tthis.set_values();\n\t\t}\n\n\t\t// switch @_param_class_from\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.VERTEX then this.promote_attribute_from_vertex()\n\t\t// \twhen Core.Geometry.ATTRIB_CLASS.OBJECT then this.promote_attribute_from_object()\n\t\tthis.set_core_group(this._core_group);\n\t}\n\n\t// private promote_attribute_from_vertex() {\n\t// \t// switch (this.pv.class_to) {\n\t// \t// \tcase AttribClass.VERTEX:\n\t// \t\t\treturn this.promote_attribute_from_vertex_to_vertex();\n\t// \t\t// case AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_vertex_to_object();\n\t// \t// }\n\t// }\n\n\t// private promote_attribute_from_object() {\n\t// \tswitch (this.pv.class_to) {\n\t// \t\tcase AttribClass.VERTEX:\n\t// \t\t// return this.promote_attribute_from_object_to_vertex();\n\t// \t\tcase AttribClass.OBJECT:\n\t// \t\t// return this.promote_attribute_from_object_to_object();\n\t// \t}\n\t// }\n\n\t// private promote_attribute_from_vertex_to_vertex() {\n\t// \tif (this._core_group) {\n\t// \t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t// \t\tconst points = this._core_group.points();\n\t// \t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\tconst values = lodash_map(points, (point) => point.attrib_value(attrib_name));\n\t// \t\t\tconst new_value = (() => {\n\t// \t\t\t\tswitch (this.pv.mode) {\n\t// \t\t\t\t\tcase PromoteMode.MIN:\n\t// \t\t\t\t\t\treturn lodash_min(values);\n\t// \t\t\t\t\tcase PromoteMode.MAX:\n\t// \t\t\t\t\t\treturn lodash_max(values);\n\t// \t\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t// \t\t\t\t\tdefault:\n\t// \t\t\t\t\t\treturn null;\n\t// \t\t\t\t}\n\t// \t\t\t})();\n\n\t// \t\t\tif (new_value != null) {\n\t// \t\t\t\tlodash_each(points, (point) => point.set_attrib_value(attrib_name, new_value));\n\t// \t\t\t}\n\t// \t\t}\n\t// \t}\n\t// }\n\n\tprivate find_values() {\n\t\tconst attrib_names = CoreString.attrib_names(this.pv.name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tswitch (this.pv.class_from) {\n\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\treturn this.find_values_from_points(attrib_name);\n\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\treturn this.find_values_from_object(attrib_name);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate find_values_from_points(attrib_name: string) {\n\t\tif (this._core_object) {\n\t\t\tconst points = this._core_object.points();\n\t\t\tthis._values_per_attrib_name[attrib_name] = points.map((point) => point.attrib_value(attrib_name));\n\t\t}\n\t}\n\n\tprivate find_values_from_object(attrib_name: string) {\n\t\tthis._values_per_attrib_name[attrib_name] = [];\n\t\tif (this._core_object) {\n\t\t\tthis._values_per_attrib_name[attrib_name].push(this._core_object.attrib_value(attrib_name) as number);\n\t\t}\n\t}\n\n\tprivate filter_values() {\n\t\tconst attrib_names = Object.keys(this._values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst values = this._values_per_attrib_name[attrib_name];\n\t\t\tswitch (this.pv.mode) {\n\t\t\t\tcase AttribPromoteMode.MIN:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_min(values);\n\t\t\t\t\tbreak;\n\t\t\t\tcase AttribPromoteMode.MAX:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = lodash_max(values);\n\t\t\t\t\tbreak;\n\t\t\t\t// case PROMOTE_MODE.AVERAGE: return lodash_average(values);\n\t\t\t\tcase AttribPromoteMode.FIRST_FOUND:\n\t\t\t\t\tthis._filtered_values_per_attrib_name[attrib_name] = values[0];\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values() {\n\t\tconst attrib_names = Object.keys(this._filtered_values_per_attrib_name);\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tconst new_value = this._filtered_values_per_attrib_name[attrib_name];\n\t\t\tif (new_value != null) {\n\t\t\t\tswitch (this.pv.class_to) {\n\t\t\t\t\tcase AttribClass.VERTEX:\n\t\t\t\t\t\tthis.set_values_to_points(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase AttribClass.OBJECT:\n\t\t\t\t\t\tthis.set_values_to_object(attrib_name, new_value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate set_values_to_points(attrib_name: string, new_value: NumericAttribValue) {\n\t\tif (this._core_group && this._core_object) {\n\t\t\tconst attribute_exists = this._core_group.has_attrib(attrib_name);\n\t\t\tif (!attribute_exists) {\n\t\t\t\tconst param_size = 1; // TODO: allow size with larger params\n\t\t\t\tthis._core_group.add_numeric_vertex_attrib(attrib_name, param_size, new_value);\n\t\t\t}\n\n\t\t\tconst points = this._core_object.points();\n\t\t\tpoints.forEach((point) => point.set_attrib_value(attrib_name, new_value));\n\t\t}\n\t}\n\n\tprivate set_values_to_object(attrib_name: string, new_value: NumericAttribValue) {\n\t\tthis._core_object?.set_attrib_value(attrib_name, new_value);\n\t}\n}\n","import lodash_max from 'lodash/max';\nimport lodash_min from 'lodash/min';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_uniq from 'lodash/uniq';\nimport lodash_isNumber from 'lodash/isNumber';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass AttribRemapSopParamsConfig extends NodeParamsConfig {\n\tname = ParamConfig.STRING();\n\tramp = ParamConfig.RAMP();\n\tchange_name = ParamConfig.BOOLEAN(0);\n\tnew_name = ParamConfig.STRING('', {visible_if: {change_name: 1}});\n}\nconst ParamsConfig = new AttribRemapSopParamsConfig();\n\nexport class AttribRemapSopNode extends TypedSopNode<AttribRemapSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_remap';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tthis._remap_attribute(core_group);\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_remap_attribute(core_group: CoreGroup) {\n\t\tconst points = core_group.points();\n\t\tif (points.length === 0) {\n\t\t\treturn;\n\t\t}\n\t\tif (this.pv.name === '') {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib_size = points[0].attrib_size(this.pv.name);\n\t\tconst values = points.map((point) => point.attrib_value(this.pv.name));\n\t\tlet min: NumericAttribValue, max: NumericAttribValue;\n\t\tlet normalized_values: NumericAttribValue[] = new Array(points.length);\n\t\tswitch (attrib_size) {\n\t\t\tcase 1:\n\t\t\t\tif (this.pv.only_integer_values) {\n\t\t\t\t\tconst sorted_values = lodash_uniq(lodash_sortBy(values));\n\t\t\t\t\tconst index_by_value: Dictionary<number> = {};\n\t\t\t\t\tsorted_values.forEach((sorted_value, i) => (index_by_value[sorted_value] = i));\n\t\t\t\t\tnormalized_values = values.map((value) => index_by_value[value]);\n\t\t\t\t} else {\n\t\t\t\t\tmin = lodash_min(values);\n\t\t\t\t\tmax = lodash_max(values);\n\t\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\t\tif (lodash_isNumber(min) && lodash_isNumber(max)) {\n\t\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\t\tconst normalized_value = max > min ? (value - min) / (max - min) : 1;\n\t\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase 3:\n\t\t\t\tmin = new Vector3(\n\t\t\t\t\tlodash_min(values.map((v) => v.x)),\n\t\t\t\t\tlodash_min(values.map((v) => v.y)),\n\t\t\t\t\tlodash_min(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\tmax = new Vector3(\n\t\t\t\t\tlodash_max(values.map((v) => v.x)),\n\t\t\t\t\tlodash_max(values.map((v) => v.y)),\n\t\t\t\t\tlodash_max(values.map((v) => v.z))\n\t\t\t\t);\n\t\t\t\t//this._save_min_max(group, min, max)\n\t\t\t\tif (min instanceof Vector3 && max instanceof Vector3) {\n\t\t\t\t\tfor (let i = 0; i < values.length; i++) {\n\t\t\t\t\t\tconst value = values[i];\n\t\t\t\t\t\tconst normalized_value = new Vector3(\n\t\t\t\t\t\t\t(value.x - min.x) / (max.x - min.x),\n\t\t\t\t\t\t\t(value.y - min.y) / (max.y - min.y),\n\t\t\t\t\t\t\t(value.z - min.z) / (max.z - min.z)\n\t\t\t\t\t\t);\n\t\t\t\t\t\tnormalized_values[i] = normalized_value;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\n\t\tlet target_name = this.pv.name;\n\t\tif (this.pv.change_name) {\n\t\t\ttarget_name = this.pv.new_name;\n\t\t\tif (!core_group.has_attrib(target_name)) {\n\t\t\t\tcore_group.add_numeric_vertex_attrib(target_name, attrib_size, 0);\n\t\t\t}\n\t\t}\n\n\t\tnormalized_values.forEach((normalized_value, i) => {\n\t\t\tconst point = points[i];\n\t\t\tpoint.set_attrib_value(target_name, normalized_value);\n\t\t});\n\t}\n}\n\n// TODO: they should be saved as a detail, not per object\n// _save_min_max: (group, min, max)->\n// \tgroup.traverse (object)=>\n// \t\tobject_wrapper = new Core.Geometry.Object(object)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_min\", min)\n// \t\tobject_wrapper.add_attribute(\"#{@_param_name}_max\", max)\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {AttribClassMenuEntries, AttribClass} from 'src/core/geometry/Constant';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass AttribRenameSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\told_name = ParamConfig.STRING();\n\tnew_name = ParamConfig.STRING();\n}\nconst ParamsConfig = new AttribRenameSopParamsConfig();\n\nexport class AttribRenameSopNode extends TypedSopNode<AttribRenameSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_rename';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// const group = input_containers[0].group();\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.rename_attrib(this.pv.old_name, this.pv.new_name, this.pv.class);\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {CoreGroup} from 'src/core/geometry/Group';\n// import {CoreMath} from 'src/core/math/_Module';\nimport {CoreInterpolate} from 'src/core/math/Interpolate';\nimport {CoreOctree} from 'src/core/math/octree/Octree';\nimport {CoreIterator} from 'src/core/Iterator';\n// import lodash_sum from 'lodash/sum';\n\n// enum TransferMethod {\n// \tAUTO = 0,\n// \tARTISTIC = 1,\n// }\n// const TransferMethodMenuEntries = [\n// \t{name: 'auto', value: TransferMethod.AUTO},\n// \t{name: 'artistic', value: TransferMethod.ARTISTIC},\n// ];\n\n// const LATITUDE = 'Latitude'\n// const LONGITUDE = 'Longitude'\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass AttribTransferSopParamsConfig extends NodeParamsConfig {\n\tsrc_group = ParamConfig.STRING();\n\tdest_group = ParamConfig.STRING();\n\tname = ParamConfig.STRING();\n\tmax_samples_count = ParamConfig.INTEGER(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\t// method = ParamConfig.INTEGER(TransferMethod.AUTO, {\n\t// \tmenu: {\n\t// \t\tentries: TransferMethodMenuEntries,\n\t// \t},\n\t// });\n\tdistance_threshold = ParamConfig.FLOAT(1);\n\tblend_width = ParamConfig.FLOAT(0);\n}\nconst ParamsConfig = new AttribTransferSopParamsConfig();\n\nexport class AttribTransferSopNode extends TypedSopNode<AttribTransferSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'attrib_transfer';\n\t}\n\n\t_core_group_dest!: CoreGroup;\n\t_core_group_src!: CoreGroup;\n\n\t// utils\n\t_attrib_names!: string[];\n\t_octree_timestamp: number | undefined;\n\t_prev_param_src_group: string | undefined;\n\t_octree: CoreOctree | undefined;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transfer attributes to', 'geometry to transfer attributes from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// this._group_dest = input_containers[0].group();\n\t\t// const container1 = input_containers[1];\n\n\t\tthis._core_group_dest = input_contents[0]; //new CoreGroup(this._group_dest);\n\t\tconst dest_points = this._core_group_dest.points_from_group(this.pv.dest_group);\n\n\t\t// this._group_src = input_containers[1] //container1.group({ clone: false });\n\t\tthis._core_group_src = input_contents[1]; //new CoreGroup(this._group_src);\n\n\t\tthis._attrib_names = this._core_group_src.attrib_names_matching_mask(this.pv.name);\n\t\tthis._error_if_attribute_not_found_on_second_input();\n\t\tthis._build_octree_if_required(this._core_group_src);\n\t\tthis._add_attribute_if_required();\n\n\t\tawait this._transfer_attributes(dest_points);\n\t\tthis.set_core_group(this._core_group_dest);\n\t}\n\n\t_error_if_attribute_not_found_on_second_input() {\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tif (!this._core_group_src.has_attrib(attrib_name)) {\n\t\t\t\tthis.states.error.set(`attribute '${attrib_name}' not found on second input`);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _build_octree_if_required(core_group: CoreGroup) {\n\t\tconst second_input_changed =\n\t\t\tthis._octree_timestamp == null || this._octree_timestamp !== core_group.timestamp();\n\t\tconst src_group_changed = this._prev_param_src_group !== this.pv.src_group;\n\n\t\tif (src_group_changed || second_input_changed) {\n\t\t\tthis._octree_timestamp = core_group.timestamp();\n\t\t\tthis._prev_param_src_group = this.pv.src_group;\n\n\t\t\tconst points_src = this._core_group_src.points_from_group(this.pv.src_group);\n\n\t\t\tthis._octree = new CoreOctree(this._core_group_src.bounding_box());\n\t\t\tthis._octree.set_points(points_src);\n\t\t}\n\t}\n\n\tprivate _add_attribute_if_required() {\n\t\tthis._attrib_names.forEach((attrib_name) => {\n\t\t\tif (!this._core_group_dest.has_attrib(attrib_name)) {\n\t\t\t\tconst attrib_size = this._core_group_src.attrib_size(attrib_name);\n\t\t\t\tthis._core_group_dest.add_numeric_vertex_attrib(attrib_name, attrib_size, 0);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async _transfer_attributes(dest_points: CorePoint[]) {\n\t\t// const start_time = performance.now()\n\t\tconst iterator = new CoreIterator();\n\t\tawait iterator.start_with_array(dest_points, this._transfer_attributes_for_point.bind(this));\n\t\t// for(let dest_point of dest_points){\n\n\t\t// \tthis._transfer_attributes_for_point(dest_point)\n\n\t\t// }\n\t}\n\tprivate _transfer_attributes_for_point(dest_point: CorePoint) {\n\t\tconst total_dist = this.pv.distance_threshold + this.pv.blend_width;\n\t\tconst nearest_points: CorePoint[] =\n\t\t\tthis._octree?.find_points(dest_point.position(), total_dist, this.pv.max_samples_count) || [];\n\n\t\t// test[nearest_points.length] = test[nearest_points.length] || 0\n\t\t// test[nearest_points.length] += 1\n\n\t\tfor (let attrib_name of this._attrib_names) {\n\t\t\tthis._interpolate_points(dest_point, nearest_points, attrib_name);\n\t\t}\n\t}\n\n\t// if @_param_draw_connections\n\t// \tlodash_each nearest_points, (nearest_point)=>\n\t// \t\t@_connection_point_pairs.push([ nearest_point.position(), dest_point.position() ])\n\n\t// if @_param_draw_connections\n\t// \tthis._draw_connections()\n\n\tprivate _interpolate_points(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t\tlet new_value: number;\n\t\t// if (this.pv.method == TransferMethod.ARTISTIC) {\n\n\t\tnew_value = CoreInterpolate.perform(\n\t\t\tpoint_dest,\n\t\t\tsrc_points,\n\t\t\tattrib_name,\n\t\t\tthis.pv.distance_threshold,\n\t\t\tthis.pv.blend_width\n\t\t);\n\t\t// } else {\n\t\t// \tnew_value = this._select(point_dest, src_points, attrib_name);\n\t\t// \tconsole.log('B new_value', new_value);\n\t\t// }\n\n\t\tif (new_value != null) {\n\t\t\tpoint_dest.set_attrib_value(attrib_name, new_value);\n\t\t}\n\t}\n\n\t// private _select(point_dest: CorePoint, src_points: CorePoint[], attrib_name: string) {\n\t// \tconst src_values = [];\n\t// \tconst inverse_distances = [];\n\t// \tconst dest_position = point_dest.position();\n\t// \tconst dest_lng_lat = {lng: dest_position.x, lat: dest_position.z};\n\t// \tfor (let src_point of src_points) {\n\t// \t\t// const dist = dest_position.distanceTo(src_point.position()) //* 0.1\n\t// \t\tconst src_position = src_point.position();\n\t// \t\tconst src_lng_lat = {lng: src_position.x, lat: src_position.z};\n\t// \t\tconst dist = CoreMath.geodesic_distance(src_lng_lat, dest_lng_lat);\n\t// \t\tconst dist_squared = dist * dist;\n\t// \t\tconst attrib_value = src_point.attrib_value(attrib_name);\n\n\t// \t\tsrc_values.push(attrib_value / dist_squared);\n\t// \t\tinverse_distances.push(1 / dist_squared);\n\t// \t}\n\n\t// \tconst sum = lodash_sum(src_values) / lodash_sum(inverse_distances);\n\t// \treturn sum;\n\t// }\n\n\t// ROUND(\n\n\t// \tSUM(\n\t// \t\tValue\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\t// \t/\n\t// \tSUM(\n\t// \t\t1\n\t// \t\t/\n\t// \t\t(dist_meters*dist_meters)\n\t// \t\t)\n\n\t// \t,1\n\n\t// )\n\n\t// _draw_connections() {\n\t// \tlet positions = [];\n\t// \tconst indices = [];\n\n\t// \tlodash_each(this._connection_point_pairs, function(current_positions, i) {\n\n\t// \t\tpositions.push(current_positions[0].toArray());\n\t// \t\tpositions.push(current_positions[1].toArray());\n\n\t// \t\tindices.push((2 * i) + 0);\n\t// \t\treturn indices.push((2 * i) + 1);\n\t// \t});\n\n\t// \tpositions = lodash_flatten(positions);\n\t// \tconst geometry = new THREE.BufferGeometry();\n\t// \tgeometry.setAttribute( 'position', new THREE.Float32BufferAttribute( positions, 3 ) );\n\t// \tgeometry.setIndex(indices);\n\t// \tconst object = this.create_object(geometry, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS);\n\t// \treturn this._group_dest.add(object);\n\t// }\n}\n","import lodash_max from 'lodash/max';\n// import lodash_last from 'lodash/last'\nimport lodash_sum from 'lodash/sum';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {Vector2} from 'three/src/math/Vector2';\nimport {_Math} from 'three/src/math/Math';\n// const THREE = {Math: _Math, Vector2, Vector3}\nimport {CorePoint} from 'src/core/geometry/Point';\n\nexport class CoreInterpolate {\n\tstatic perform(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tswitch (points_src.length) {\n\t\t\tcase 0:\n\t\t\t\treturn 0;\n\t\t\tcase 1:\n\t\t\t\treturn this._interpolate_with_1_point(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src[0],\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t\tdefault:\n\t\t\t\t// positions_src = lodash_map(points_src, (point) -> point.position())\n\t\t\t\t// values_src = lodash_map(points_src, (point) -> point.attrib_value(attrib_name))\n\t\t\t\t// position_dest = point_dest.position()\n\t\t\t\t//if positions_src.length > 3\n\t\t\t\t//\tpositions_src = positions_src.slice(0,3)\n\t\t\t\t//this._interpolate_with_3_points_max(positions_src, values_src, position_dest, dest_value)\n\t\t\t\treturn this._interpolate_with_multiple_points(\n\t\t\t\t\tpoint_dest,\n\t\t\t\t\tpoints_src,\n\t\t\t\t\tattrib_name,\n\t\t\t\t\tdistance_threshold,\n\t\t\t\t\tblend_with\n\t\t\t\t);\n\t\t}\n\t}\n\n\tstatic _interpolate_with_1_point(\n\t\tpoint_dest: CorePoint,\n\t\tpoint_src: CorePoint,\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tconst position_dest = point_dest.position();\n\t\tconst position_src = point_src.position();\n\t\tconst distance = position_dest.distanceTo(position_src);\n\n\t\tconst value_src = point_src.attrib_value(attrib_name);\n\t\treturn this._weighted_value_from_distance(\n\t\t\tpoint_dest,\n\t\t\tvalue_src,\n\t\t\tattrib_name,\n\t\t\tdistance,\n\t\t\tdistance_threshold,\n\t\t\tblend_with\n\t\t);\n\t}\n\n\tstatic _weight_from_distance(distance: number, distance_threshold: number, blend_with: number) {\n\t\treturn (distance - distance_threshold) / blend_with;\n\t}\n\n\tstatic _weighted_value_from_distance(\n\t\tpoint_dest: CorePoint,\n\t\tvalue_src: number,\n\t\tattrib_name: string,\n\t\tdistance: number,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\tif (distance <= distance_threshold) {\n\t\t\treturn value_src;\n\t\t} else {\n\t\t\tconst value_dest = point_dest.attrib_value(attrib_name);\n\t\t\tconst blend = this._weight_from_distance(distance, distance_threshold, blend_with);\n\t\t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// switch (point_dest.attrib_size(attrib_name)) {\n\t\t\t// \tcase 1:\n\t\t\t// \t\t// const value_src_as_number = value_src as number;\n\t\t\t// \t\treturn blend * value_dest + (1 - blend) * value_src;\n\t\t\t// \tcase 2:\n\t\t\t// \t\tconst value_src_as_vec2 = value_src as Vector2Like;\n\t\t\t// \t\treturn new Vector2(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec2.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec2.y\n\t\t\t// \t\t);\n\t\t\t// \tcase 3:\n\t\t\t// \t\tconst value_src_as_vec3 = value_src as Vector3Like;\n\t\t\t// \t\treturn new Vector3(\n\t\t\t// \t\t\tblend * value_dest.x + (1 - blend) * value_src_as_vec3.x,\n\t\t\t// \t\t\tblend * value_dest.y + (1 - blend) * value_src_as_vec3.y,\n\t\t\t// \t\t\tblend * value_dest.z + (1 - blend) * value_src_as_vec3.z\n\t\t\t// \t\t);\n\t\t\t// \tdefault:\n\t\t\t// \t\treturn 0;\n\t\t\t// }\n\t\t}\n\t}\n\n\t// @_interpolate_with_3_points_max: (positions_src, values_src, position_dest, dest_value)->\n\t// \tweights = this.weights( position_dest, positions_src )\n\t// \tinterpolated_value = lodash_sum lodash_map values_src, (src_value, i)=>\n\t// \t\tweights[i] * src_value\n\n\t// \tif dest_value?\n\t// \t\t0.5 * (dest_value + src_value)\n\t// \telse\n\t// \t\tinterpolated_value\n\n\t// weights: http://www.sidefx.com/docs/houdini/nodes/vop/pcfilter.html\n\t// w_i = 1-smooth(0, maxd*1.1, d_i);\n\t// maxd is the farthest point, and w_i is the weight for a given point at distance (d_i). Points that are closer to the center will be weighted higher with that formula, rather than it being an average.\n\tstatic _interpolate_with_multiple_points(\n\t\tpoint_dest: CorePoint,\n\t\tpoints_src: CorePoint[],\n\t\tattrib_name: string,\n\t\tdistance_threshold: number,\n\t\tblend_with: number\n\t): number {\n\t\t// let new_value\n\t\t// const positions_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.position()\n\t\t// )\n\t\t// const values_src = lodash_map(points_src, (point) =>\n\t\t// \tpoint.attrib_value(attrib_name)\n\t\t// )\n\t\t// const position_dest = point_dest.position()\n\t\t// const attrib_size = point_dest.attrib_size(attrib_name);\n\n\t\t// const distances = lodash_map(positions_src, (src_position) =>\n\t\t// \tsrc_position.distanceTo(position_dest)\n\t\t// )\n\t\t// distances = distances.sort()\n\t\t// max_dist = lodash_last(distances)\n\t\t// const max_dist = distance_threshold + blend_with\n\n\t\t// const weights = lodash_map(positions_src, (src_position, i) => {\n\t\t// \tconst distance = distances[i]\n\t\t// \t//1 - Math.smootherstep(distance, 0, max_dist*1.1)\n\t\t// \treturn this._weight_from_distance(\n\t\t// \t\tdistance,\n\t\t// \t\tdistance_threshold,\n\t\t// \t\tblend_with\n\t\t// \t)\n\t\t// })\n\n\t\t// const total_weight = lodash_sum(weights)\n\n\t\t// weighted_values = lodash_map values_src, (src_value, i)->\n\t\t// \tswitch attrib_size\n\t\t// \t\twhen 1 then src_value * weights[i]\n\t\t// \t\telse\n\t\t// \t\t\tsrc_value.clone().multiplyScalar(weights[i])\n\t\tconst weighted_values_src = points_src.map((point_src) => {\n\t\t\treturn this._interpolate_with_1_point(point_dest, point_src, attrib_name, distance_threshold, blend_with);\n\t\t});\n\t\treturn lodash_max(weighted_values_src) || 0;\n\n\t\t// // TODO: we could have 2 modes of interpolation?\n\t\t// // return (new_value = (() => {\n\t\t// switch (attrib_size) {\n\t\t// \t// when 1 then lodash_sum(weighted_values_src) / values_src.length # mode 1\n\t\t// \tcase 1:\n\t\t// \t\treturn lodash_max(weighted_values_src); // mode 2\n\t\t// \tdefault:\n\t\t// \t\tthrow 'interpolation with multiple vectors not implemented yet';\n\t\t// \t// var new_vector = weighted_values_src[0].clone();\n\t\t// \t// new_vector.x = lodash_sum(lodash_map(weighted_values, 'x')) / total_weight;\n\t\t// \t// new_vector.y = lodash_sum(lodash_map(weighted_values, 'y')) / total_weight;\n\t\t// \t// if (new_vector.z != null) {\n\t\t// \t// \tnew_vector.z = lodash_sum(lodash_map(weighted_values, 'z')) / total_weight;\n\t\t// \t// }\n\t\t// \t// return new_vector;\n\t\t// }\n\t\t// })())\n\t}\n\n\t// https://math.stackexchange.com/questions/1336386/weighted-average-distance-between-3-or-more-positions\n\tstatic weights(current_position: Vector3, other_positions: Vector3[]) {\n\t\tswitch (other_positions.length) {\n\t\t\tcase 1:\n\t\t\t\treturn 1;\n\t\t\tcase 2:\n\t\t\t\treturn this._weights_from_2(current_position, other_positions);\n\t\t\tdefault:\n\t\t\t\tother_positions = other_positions.slice(0, 3);\n\t\t\t\treturn this._weights_from_3(current_position, other_positions);\n\t\t}\n\t}\n\n\tstatic _weights_from_2(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum(dist_to_positions);\n\n\t\treturn [dist_to_positions[1] / distance_total, dist_to_positions[0] / distance_total];\n\t}\n\n\tstatic _weights_from_3(current_position: Vector3, other_positions: Vector3[]) {\n\t\tconst dist_to_positions = other_positions.map((other_position) => current_position.distanceTo(other_position));\n\n\t\tconst distance_total = lodash_sum([\n\t\t\tdist_to_positions[0] * dist_to_positions[1],\n\t\t\tdist_to_positions[0] * dist_to_positions[2],\n\t\t\tdist_to_positions[1] * dist_to_positions[2],\n\t\t]);\n\n\t\treturn [\n\t\t\t(dist_to_positions[1] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[2]) / distance_total,\n\t\t\t(dist_to_positions[0] * dist_to_positions[1]) / distance_total,\n\t\t];\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {CorePoint} from 'src/core/geometry/Point';\n// import {CoreMath} from './_Module'\n// import OctreeModule from './Octree/_Module';\nimport {OctreeNode, OctreeNodeTraverseCallback} from './Node';\n\nexport class CoreOctree {\n\tprivate _root: OctreeNode;\n\n\tconstructor(bbox: Box3) {\n\t\tthis._root = new OctreeNode(bbox);\n\t}\n\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._root.set_bounding_box(bbox)\n\t// }\n\n\tset_points(points: CorePoint[]) {\n\t\tthis._root.set_points(points);\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tthis._root.traverse(callback);\n\t}\n\n\t// TODO: I am tempted to stop going through the leaves if\n\t// the ones currently seen already have the required number of points.\n\t// but that probably doesn't work as those points may end up being further\n\t// than the ones from the following leaf\n\tfind_points(position: Vector3, distance: number, max_points_count?: number): CorePoint[] {\n\t\tconst sphere = new Sphere(position, distance);\n\t\tlet found_points: CorePoint[] = [];\n\n\t\tif (this._root.intersects_sphere(sphere)) {\n\t\t\tthis._root.points_in_sphere(sphere, found_points);\n\t\t}\n\n\t\tif (max_points_count == null) {\n\t\t\treturn found_points;\n\t\t} else {\n\t\t\tif (found_points.length > max_points_count) {\n\t\t\t\tfound_points = lodash_sortBy(found_points, (point) => {\n\t\t\t\t\treturn point.position().distanceTo(position);\n\t\t\t\t});\n\t\t\t\t// const lng_lat = {lng: position.x, lat: position.z}\n\t\t\t\t// found_points = lodash_sortBy(found_points, (point)=>{\n\t\t\t\t// \tconst src_position = point.position()\n\t\t\t\t// \tconst src_lng_lat = {lng: src_position.x, lat: src_position.z}\n\t\t\t\t// \treturn CoreMath.geodesic_distance(src_lng_lat, lng_lat)\n\t\t\t\t// });\n\n\t\t\t\tfound_points = found_points.slice(0, max_points_count);\n\t\t\t}\n\n\t\t\treturn found_points;\n\t\t}\n\t}\n}\n\n// Octree.Node = OctreeNode;\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Sphere} from 'three/src/math/Sphere';\nimport {Box3} from 'three/src/math/Box3';\nimport lodash_flatten from 'lodash/flatten';\nimport {CorePoint} from 'src/core/geometry/Point';\n\nexport type OctreeNodeTraverseCallback = (node: OctreeNode) => void;\n\nexport class OctreeNode {\n\t_leaves_by_octant: Dictionary<OctreeNode> = {};\n\t_points_by_octant_id: Dictionary<CorePoint[]> = {};\n\t_leaves: OctreeNode[] = [];\n\t// _bbox: Box3 | undefined;\n\t_center: Vector3;\n\t_bounding_boxes_by_octant: Dictionary<Box3> = {};\n\t_bounding_boxes_by_octant_prepared: boolean = false;\n\n\tconstructor(private _bbox: Box3, private _level: number = 0) {\n\t\tthis._center = this._bbox.max\n\t\t\t.clone()\n\t\t\t.add(this._bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\t// set_bounding_box(bbox: Box3) {\n\t// \tthis._bbox = bbox;\n\t// }\n\n\tlevel() {\n\t\treturn this._level;\n\t}\n\n\ttraverse(callback: OctreeNodeTraverseCallback) {\n\t\tcallback(this);\n\t\tconst octants = Object.values(this._leaves_by_octant);\n\t\toctants.forEach((node) => {\n\t\t\tnode.traverse(callback);\n\t\t});\n\t}\n\n\tintersects_sphere(sphere: Sphere): boolean {\n\t\tif (this._bbox) {\n\t\t\treturn this._bbox.intersectsSphere(sphere);\n\t\t}\n\t\treturn false;\n\t}\n\n\t//@PERF = 0\n\tpoints_in_sphere(sphere: Sphere, accumulated_points: CorePoint[]): void {\n\t\tif (this._leaves.length == 0) {\n\t\t\tconst found_points = lodash_flatten(Object.values(this._points_by_octant_id));\n\t\t\tconst selected_points = found_points.filter((point) => sphere.containsPoint(point.position()));\n\t\t\tselected_points.forEach((point) => {\n\t\t\t\taccumulated_points.push(point);\n\t\t\t});\n\t\t} else {\n\t\t\t//start_time = performance.now()\n\t\t\tconst leaves_intersecting_with_sphere = this._leaves.filter((leaf) => leaf.intersects_sphere(sphere));\n\n\t\t\t//console.log(\"level: #{@_level}, found #{leaves_intersecting_with_sphere.length} leaves \")\n\t\t\tleaves_intersecting_with_sphere.forEach((leaf) => leaf.points_in_sphere(sphere, accumulated_points));\n\t\t}\n\t}\n\t//this.constructor.PERF += performance.now()-start_time\n\n\tbounding_box(): Box3 | undefined {\n\t\treturn this._bbox;\n\t}\n\n\t// points_count: ->\n\t// \t@_points_count\n\n\tset_points(points: CorePoint[]) {\n\t\t//@_points_count = points.length\n\n\t\tthis._points_by_octant_id = {};\n\t\tfor (let point of points) {\n\t\t\tthis.add_point(point);\n\t\t}\n\n\t\tconst octant_ids = Object.keys(this._points_by_octant_id);\n\t\tif (octant_ids.length > 1) {\n\t\t\toctant_ids.forEach((octant_id) => {\n\t\t\t\tthis.create_leaf(octant_id);\n\t\t\t});\n\t\t}\n\t}\n\n\tcreate_leaf(octant_id: string) {\n\t\tconst box = this._leaf_bbox(octant_id);\n\t\tconst leaf = new OctreeNode(box, this._level + 1);\n\t\tthis._leaves_by_octant[octant_id] = leaf;\n\t\tthis._leaves.push(leaf);\n\t\t//throw \"test #{@_level}\"\n\n\t\tleaf.set_points(this._points_by_octant_id[octant_id]);\n\t}\n\n\tadd_point(point: CorePoint) {\n\t\tconst octant_id = this._octant_id(point.position());\n\t\tif (this._points_by_octant_id[octant_id] == null) {\n\t\t\tthis._points_by_octant_id[octant_id] = [];\n\t\t}\n\t\tthis._points_by_octant_id[octant_id].push(point);\n\t}\n\n\tprivate _octant_id(position: Vector3): string {\n\t\tconst x_pos = position.x > this._center.x ? 1 : 0;\n\t\tconst y_pos = position.y > this._center.y ? 1 : 0;\n\t\tconst z_pos = position.z > this._center.z ? 1 : 0;\n\t\treturn `${x_pos}${y_pos}${z_pos}`;\n\t}\n\n\t_leaf_bbox(octant_id: string): Box3 {\n\t\tif (!this._bounding_boxes_by_octant_prepared) {\n\t\t\tthis._prepare_leaves_bboxes();\n\t\t\tthis._bounding_boxes_by_octant_prepared = true;\n\t\t}\n\t\treturn this._bounding_boxes_by_octant[octant_id];\n\t}\n\n\tprivate _bbox_center(x_pos: number, y_pos: number, z_pos: number) {\n\t\tconst corner = this._bbox.min.clone();\n\t\tif (x_pos) {\n\t\t\tcorner.x = this._bbox.max.x;\n\t\t}\n\t\tif (y_pos) {\n\t\t\tcorner.y = this._bbox.max.y;\n\t\t}\n\t\tif (z_pos) {\n\t\t\tcorner.z = this._bbox.max.z;\n\t\t}\n\n\t\treturn corner\n\t\t\t.clone()\n\t\t\t.add(this._center)\n\t\t\t.multiplyScalar(0.5);\n\t}\n\n\tprivate _prepare_leaves_bboxes() {\n\t\tconst bbox_centers = [];\n\t\tbbox_centers.push(this._bbox_center(0, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(0, 1, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 0, 1));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 0));\n\t\tbbox_centers.push(this._bbox_center(1, 1, 1));\n\n\t\tconst bbox_size_quarter = this._bbox.max\n\t\t\t.clone()\n\t\t\t.sub(this._bbox.min)\n\t\t\t.multiplyScalar(0.25);\n\t\tfor (let bbox_center of bbox_centers) {\n\t\t\tconst octant_id = this._octant_id(bbox_center);\n\t\t\tconst bbox = new Box3(\n\t\t\t\tbbox_center.clone().sub(bbox_size_quarter),\n\t\t\t\tbbox_center.clone().add(bbox_size_quarter)\n\t\t\t);\n\t\t\tthis._bounding_boxes_by_octant[octant_id] = bbox;\n\t\t}\n\t\t// this._bounding_boxes_by_octant;\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport lodash_range from 'lodash/range';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from 'src/core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {CoreGroup} from 'src/core/geometry/Group';\nclass BboxScatterSopParamsConfig extends NodeParamsConfig {\n\tstep_size = ParamConfig.FLOAT(0.1);\n}\nconst ParamsConfig = new BboxScatterSopParamsConfig();\n\nexport class BboxScatterSopNode extends TypedSopNode<BboxScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'bbox_scatter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create points from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst container = input_contents[0];\n\t\t// const group = container.group();\n\n\t\tconst step_size = this.pv.step_size;\n\t\t// jitter = @_param_jitter\n\n\t\tconst bbox = container.bounding_box();\n\n\t\tconst range = {\n\t\t\tx: lodash_range(bbox.min.x, bbox.max.x, step_size),\n\t\t\ty: lodash_range(bbox.min.y, bbox.max.y, step_size),\n\t\t\tz: lodash_range(bbox.min.z, bbox.max.z, step_size),\n\t\t};\n\n\t\t// create buffer geometry\n\t\t// const vertices_count = range.x * range.y * range.z;\n\t\tconst positions: number[] = [];\n\t\trange.x.forEach((x) => {\n\t\t\trange.y.forEach((y) => {\n\t\t\t\trange.z.forEach((z) => {\n\t\t\t\t\tpositions.push(x);\n\t\t\t\t\tpositions.push(y);\n\t\t\t\t\tpositions.push(z);\n\t\t\t\t});\n\t\t\t});\n\t\t});\n\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new BufferAttribute(new Float32Array(positions), 3));\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nclass BlendSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING();\n\tblend = ParamConfig.FLOAT(0.5, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new BlendSopParamsConfig();\n\nexport class BlendSopNode extends TypedSopNode<BlendSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'blend';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to blend from', 'geometry to blend to'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\t// this.request_input_container 0, (container0)=>\n\t\t// \tif container0? && (group0 = container0.group())?\n\t\t// \t\tthis.request_input_container 1, (container1)=>\n\t\t// \t\t\tif container1? && (group1 = container1.group({clone: false}))?\n\n\t\t//this.eval_all_params =>\n\t\t// const container0 = input_containers[0];\n\t\t// const container1 = input_containers[1];\n\n\t\t// const group0 = container0.group();\n\t\t// const group1 = container1.group();\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\n\t\tconst objects0 = core_group0.objects();\n\t\tconst objects1 = core_group1.objects();\n\n\t\tlet object0, object1;\n\t\tfor (let i = 0; i < objects0.length; i++) {\n\t\t\tobject0 = objects0[i];\n\t\t\tobject1 = objects1[i];\n\t\t\tthis.blend(object0, object1, this.pv.blend);\n\t\t}\n\t\tthis.set_core_group(core_group0);\n\t}\n\n\t// \t\telse\n\t// \t\t\tthis.set_error(\"input 1 required\")\n\n\t// else\n\t// \tthis.set_error(\"input 0 required\")\n\tprivate blend(object0: Object3D, object1: Object3D, blend: number) {\n\t\tconst geometry0 = (object0 as Mesh).geometry as BufferGeometry;\n\t\tconst geometry1 = (object1 as Mesh).geometry as BufferGeometry;\n\t\tif (geometry0 == null || geometry1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0 = geometry0.getAttribute(this.pv.attrib_name);\n\t\tconst attrib1 = geometry1.getAttribute(this.pv.attrib_name);\n\t\tif (attrib0 == null || attrib1 == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst attrib0_array = attrib0.array as number[];\n\t\tconst attrib1_array = attrib1.array as number[];\n\n\t\tlet c0, c1;\n\t\tfor (let i = 0; i < attrib0_array.length; i++) {\n\t\t\tc0 = attrib0_array[i];\n\t\t\tc1 = attrib1_array[i];\n\t\t\tif (c1 != null) {\n\t\t\t\tattrib0_array[i] = (1 - blend) * c0 + blend * c1;\n\t\t\t}\n\t\t}\n\n\t\tgeometry0.computeVertexNormals();\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreTransform} from 'src/core/Transform';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\n// import {Vector3} from 'three/src/math/Vector3';\nimport {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry';\n// import {CoreGeometry} from 'src/core/geometry/Geometry'\n// import {ParamType} from 'src/engine/poly/ParamType';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass BoxSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.FLOAT(1);\n\tdivisions = ParamConfig.FLOAT(1, {\n\t\trange: [1, 10],\n\t\trange_locked: [true, false],\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new BoxSopParamsConfig();\n\nexport class BoxSopNode extends TypedSopNode<BoxSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'box';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create bounding box from (optional)'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\t// }\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\t// create_params() {\n\t// \tthis.add_param(ParamType.FLOAT, 'size', 1);\n\t// \tthis.add_param(ParamType.INTEGER, 'divisions', 1, {\n\t// \t\trange: [1, 10],\n\t// \t\trange_locked: [true, false],\n\t// \t});\n\t// \tthis.add_param(ParamType.VECTOR3, 'center', [0, 0, 0]);\n\t// }\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\n\tprivate _cook_without_input() {\n\t\t//\t\tthis.eval_all_params =>\n\t\tconst divisions = this.pv.divisions;\n\t\tconst size = this.pv.size;\n\t\tconst geometry = new BoxBufferGeometry(size, size, size, divisions, divisions, divisions);\n\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tgeometry.computeVertexNormals();\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\tprivate _cook_with_input(core_group: CoreGroup) {\n\t\t// this.request_input_container 0, (container)=>\n\t\t// \tif container? && (group = container.group({clone: false}))?\n\t\t// \t\tthis.eval_all_params =>\n\n\t\tconst divisions = this.pv.divisions;\n\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = bbox.max.clone().sub(bbox.min);\n\t\tconst center = bbox.max\n\t\t\t.clone()\n\t\t\t.add(bbox.min)\n\t\t\t.multiplyScalar(0.5);\n\n\t\tconst geometry = new BoxBufferGeometry(size.x, size.y, size.z, divisions, divisions, divisions);\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t// else\n\t// \tthis.set_error(\"first input is invalid\")\n\n\t// _divisions() {\n\t// \treturn Math.max(1, this.pv.divisions);\n\t// }\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {CircleBufferGeometry} from 'three/src/geometries/CircleGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreGeometryUtilCircle} from 'src/core/geometry/util/Circle';\nimport {ObjectType} from 'src/core/geometry/Constant';\nimport {CoreTransform} from 'src/core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass CircleSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\topen = ParamConfig.BOOLEAN(1);\n\tarc_angle = ParamConfig.FLOAT(360, {\n\t\trange: [0, 360],\n\t\trange_locked: [false, false],\n\t\tvisible_if: {open: 1},\n\t});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new CircleSopParamsConfig();\n\nexport class CircleSopNode extends TypedSopNode<CircleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'circle';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count(0);\n\t\t// this.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook() {\n\t\tif (this.pv.open) {\n\t\t\tthis._create_circle();\n\t\t} else {\n\t\t\tthis._create_disk();\n\t\t}\n\t}\n\n\t_create_circle() {\n\t\tconst geometry = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments, this.pv.arc_angle);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry, ObjectType.LINE_SEGMENTS);\n\t}\n\n\t_create_disk() {\n\t\tconst geometry = new CircleBufferGeometry(this.pv.radius, this.pv.segments);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Color} from 'three/src/math/Color';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {CoreColor} from 'src/core/Color';\n// import lodash_times from 'lodash/times'\n// import lodash_each from 'lodash/each'\n// import {CoreGroup} from 'src/core/geometry/Group';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {CorePoint} from 'src/core/geometry/Point';\n\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst DEFAULT_COLOR = new Color(1, 1, 1);\nconst COLOR_ATTRIB_NAME = 'color';\n\ntype ValueArrayByName = Dictionary<number[]>;\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass ColorSopParamsConfig extends NodeParamsConfig {\n\tfrom_attribute = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {from_attribute: 1},\n\t});\n\tcolor = ParamConfig.COLOR([1, 1, 1], {\n\t\tvisible_if: {from_attribute: 0},\n\t\texpression: {for_entities: true},\n\t});\n\tas_hsv = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {from_attribute: 0},\n\t});\n}\nconst ParamsConfig = new ColorSopParamsConfig();\n\nexport class ColorSopNode extends TypedSopNode<ColorSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'color';\n\t}\n\n\tprivate _r_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _g_arrays_by_geometry_uuid: ValueArrayByName = {};\n\tprivate _b_arrays_by_geometry_uuid: ValueArrayByName = {};\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update color of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tif (this.pv.from_attribute) {\n\t\t\t\tthis._set_from_attribute(core_object);\n\t\t\t} else {\n\t\t\t\tconst has_expression = this.p.color.has_expression();\n\t\t\t\tif (has_expression) {\n\t\t\t\t\tawait this._eval_expressions(core_object);\n\t\t\t\t} else {\n\t\t\t\t\tthis._eval_simple_values(core_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\t(geometry.getAttribute(COLOR_ATTRIB_NAME) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_set_from_attribute(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst points = core_geometry.points();\n\n\t\tconst src_attrib_size = core_geometry.attrib_size(this.pv.attrib_name);\n\t\tconst geometry = core_geometry.geometry();\n\t\tconst src_array = geometry.getAttribute(this.pv.attrib_name).array;\n\t\tconst dest_array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\tswitch (src_attrib_size) {\n\t\t\tcase 1: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[i];\n\t\t\t\t\tdest_array[dest_i + 1] = 1 - src_array[i];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 2: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 2;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = 0;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 3: {\n\t\t\t\tfor (let i = 0; i < src_array.length; i++) {\n\t\t\t\t\tdest_array[i] = src_array[i];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 4: {\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tconst dest_i = i * 3;\n\t\t\t\t\tconst src_i = i * 4;\n\t\t\t\t\tdest_array[dest_i + 0] = src_array[src_i + 0];\n\t\t\t\t\tdest_array[dest_i + 1] = src_array[src_i + 1];\n\t\t\t\t\tdest_array[dest_i + 2] = src_array[src_i + 2];\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_init_color(core_geometry: CoreGeometry, color: Color) {\n\t\tif (!core_geometry.has_attrib(COLOR_ATTRIB_NAME)) {\n\t\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, DEFAULT_COLOR);\n\t\t}\n\t}\n\n\t_eval_simple_values(core_object: CoreObject) {\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\n\t\tlet new_color: Color;\n\t\tif (this.pv.as_hsv) {\n\t\t\tnew_color = new Color();\n\t\t\tCoreColor.set_hsv(this.pv.color.r, this.pv.color.g, this.pv.color.b, new_color);\n\t\t} else {\n\t\t\tnew_color = this.pv.color; //.clone();\n\t\t}\n\t\tcore_geometry.add_numeric_attrib(COLOR_ATTRIB_NAME, 3, new_color);\n\t}\n\n\tasync _eval_expressions(core_object: CoreObject) {\n\t\tconst points = core_object.points();\n\t\tconst object = core_object.object();\n\t\tconst core_geometry = core_object.core_geometry();\n\t\tthis._create_init_color(core_geometry, DEFAULT_COLOR);\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tif (geometry) {\n\t\t\tconst array = geometry.getAttribute(COLOR_ATTRIB_NAME).array as number[];\n\n\t\t\tconst tmp_array_r = await this._update_from_param(geometry, array, points, 0);\n\t\t\tconst tmp_array_g = await this._update_from_param(geometry, array, points, 1);\n\t\t\tconst tmp_array_b = await this._update_from_param(geometry, array, points, 2);\n\n\t\t\tif (tmp_array_r) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_r, array, 0);\n\t\t\t}\n\t\t\tif (tmp_array_g) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_g, array, 1);\n\t\t\t}\n\t\t\tif (tmp_array_b) {\n\t\t\t\tthis._commit_tmp_values(tmp_array_b, array, 2);\n\t\t\t}\n\n\t\t\t// to hsv\n\t\t\tif (this.pv.as_hsv) {\n\t\t\t\tlet current = new Color();\n\t\t\t\tlet target = new Color();\n\t\t\t\tlet index;\n\t\t\t\tfor (let point of points) {\n\t\t\t\t\tindex = point.index * 3;\n\t\t\t\t\tcurrent.fromArray(array, index);\n\t\t\t\t\tCoreColor.set_hsv(current.r, current.g, current.b, target);\n\t\t\t\t\ttarget.toArray(array, index);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// const colorr_param = this.param('colorr');\n\t\t// const colorg_param = this.param('colorg');\n\t\t// const colorb_param = this.param('colorb');\n\n\t\t// r\n\t\t// if(colorr_param.has_expression()){\n\t\t// \tawait colorr_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+0] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+0] = this.pv.color.r\n\t\t// \t}\n\t\t// }\n\t\t// g\n\t\t// if(colorg_param.has_expression()){\n\t\t// \tawait colorg_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+1] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+1] = this.pv.color.g\n\t\t// \t}\n\t\t// }\n\t\t// b\n\t\t// if(colorb_param.has_expression()){\n\t\t// \tawait colorb_param.eval_expression_for_entities(points, (point, value)=>{\n\t\t// \t\tarray[point.index()*3+2] = value\n\t\t// \t})\n\t\t// } else {\n\t\t// \tfor(let point of points){\n\t\t// \t\tarray[point.index()*3+2] = this.pv.color.b\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\toffset: number\n\t): Promise<number[] | undefined> {\n\t\t// const component_name = ['r', 'g', 'b'][offset];\n\t\tconst param = this.p.color.components[offset];\n\t\tconst param_value = [this.pv.color.r, this.pv.color.g, this.pv.color.b][offset];\n\t\tconst arrays_by_geometry_uuid = [\n\t\t\tthis._r_arrays_by_geometry_uuid,\n\t\t\tthis._g_arrays_by_geometry_uuid,\n\t\t\tthis._b_arrays_by_geometry_uuid,\n\t\t][offset];\n\n\t\tlet tmp_array: number[] | undefined;\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\ttmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length);\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t// array[point.index()*3+2] = value\n\t\t\t\t(tmp_array as number[])[point.index] = value;\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let point of points) {\n\t\t\t\tarray[point.index * 3 + offset] = param_value;\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid[uuid];\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t\t}\n\t\t} else {\n\t\t\tarrays_by_geometry_uuid[uuid] = new Array(points_count);\n\t\t}\n\t\treturn arrays_by_geometry_uuid[uuid];\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {_Math} from 'three/src/math/Math'\nimport {Color} from 'three/src/math/Color'\n\nexport class CoreColor {\n\t// use color.toStyle() if needed\n\t// static to_css(color: Color): string {\n\t// \tconst color_elements = color.toArray().map((e) => e * 255)\n\t// \treturn `rgb(${color_elements.join(', ')})`\n\t// }\n\n\t// from THREE.js examples ColorConverter.js\n\tstatic set_hsv(h: number, s: number, v: number, target: Color) {\n\t\th = _Math.euclideanModulo(h, 1)\n\t\ts = _Math.clamp(s, 0, 1)\n\t\tv = _Math.clamp(v, 0, 1)\n\n\t\ttarget.setHSL(h, (s * v) / ((h = (2 - s) * v) < 1 ? h : 2 - h), h * 0.5)\n\t}\n}\n","import lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup, Object3DWithGeometry} from 'src/core/geometry/Group';\nimport {CoreObject} from 'src/core/geometry/Object';\n// import {CoreGeometry} from 'src/core/geometry/Geometry'\nimport {CoreInstancer} from 'src/core/geometry/Instancer';\nimport {CoreString} from 'src/core/String';\n// import {NodeSimple} from 'src/Core/Graph/NodeSimple'\nimport {CopyStamp} from './utils/CopyStamp';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {CorePoint} from 'src/core/geometry/Point';\n// import RSVP from 'rsvp'\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {Object3D} from 'three/src/core/Object3D';\nclass CopySopParamsConfig extends NodeParamsConfig {\n\tcount = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t});\n\ttransform_only = ParamConfig.BOOLEAN(0);\n\tcopy_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_copy = ParamConfig.STRING('', {\n\t\tvisible_if: {copy_attributes: true},\n\t});\n\tuse_copy_expr = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new CopySopParamsConfig();\n\nexport class CopySopNode extends TypedSopNode<CopySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'copy';\n\t}\n\n\tprivate _attribute_names_to_copy: string[] = [];\n\t// private _group: Group|undefined;\n\tprivate _objects: Object3D[] = [];\n\tprivate _stamp_node!: CopyStamp;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to be copied', 'points to copy to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS, InputCloneMode.NEVER]);\n\t}\n\n\t// async evaluate_inputs_and_params() {\n\t// \tawait this.eval_all_params()\n\t// }\n\n\tasync cook() {\n\t\tlet core_group0;\n\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\tif (container0 != null && (core_group0 = container0.core_content()) != null) {\n\t\t\tif (this.io.inputs.has_input(1)) {\n\t\t\t\tlet core_group1;\n\t\t\t\tconst container1 = await this.container_controller.request_input_container(1);\n\t\t\t\tif (container1 != null && (core_group1 = container1.core_content()) != null) {\n\t\t\t\t\tawait this.cook_with_template(core_group0, core_group1);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set('second input required');\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tthis.cook_without_template(core_group0);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set('first input required');\n\t\t}\n\t}\n\n\tprivate async cook_with_template(instance_core_group: CoreGroup, template_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\n\t\tconst template_points = template_core_group.points();\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tlet instance_matrices = instancer.matrices();\n\n\t\tthis._attribute_names_to_copy = CoreString.attrib_names(this.pv.attributes_to_copy).filter((attrib_name) =>\n\t\t\ttemplate_core_group.has_attrib(attrib_name)\n\t\t);\n\t\tawait this._copy_moved_objects_on_template_points(instance_core_group, instance_matrices, template_points);\n\t\tthis.set_objects(this._objects);\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_on_template_points(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[]\n\t) {\n\t\tfor (let point_index = 0; point_index < template_points.length; point_index++) {\n\t\t\tawait this._copy_moved_object_on_template_point(\n\t\t\t\tinstance_core_group,\n\t\t\t\tinstance_matrices,\n\t\t\t\ttemplate_points,\n\t\t\t\tpoint_index\n\t\t\t);\n\t\t}\n\t\t// template_points.forEach((template_point, point_index) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_object_on_template_point(\n\t\t// \t\t\tinstance_core_group,\n\t\t// \t\t\tinstance_matrices,\n\t\t// \t\t\ttemplate_points,\n\t\t// \t\t\tpoint_index\n\t\t// \t\t);\n\t\t// \t});\n\t\t// });\n\t}\n\n\tprivate _copy_moved_object_on_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tinstance_matrices: Matrix4[],\n\t\ttemplate_points: CorePoint[],\n\t\tpoint_index: number\n\t) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst matrix = instance_matrices[point_index];\n\t\t\tconst template_point = template_points[point_index];\n\t\t\tthis.stamp_node.set_point(template_point);\n\n\t\t\tconst moved_objects = await this._get_moved_objects_for_template_point(instance_core_group, point_index);\n\n\t\t\tmoved_objects.forEach((moved_object) => {\n\t\t\t\tif (this.pv.copy_attributes) {\n\t\t\t\t\tthis._copy_attributes_from_template(moved_object, template_point);\n\t\t\t\t}\n\n\t\t\t\t// TODO: that node is getting inconsistent...\n\t\t\t\t// should I always only move the object?\n\t\t\t\t// and have a toggle to bake back to the geo?\n\t\t\t\t// or just enfore the use of a merge?\n\t\t\t\tif (this.pv.transform_only) {\n\t\t\t\t\tmoved_object.applyMatrix(matrix);\n\t\t\t\t} else {\n\t\t\t\t\tmoved_object.geometry.applyMatrix(matrix);\n\t\t\t\t}\n\n\t\t\t\treturn this._objects.push(moved_object);\n\t\t\t});\n\n\t\t\treturn resolve();\n\t\t});\n\t}\n\n\tprivate _get_moved_objects_for_template_point(\n\t\tinstance_core_group: CoreGroup,\n\t\tpoint_index: number\n\t): Promise<Object3DWithGeometry[]> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\t// duplicate or select from instance children\n\t\t\t\tconst moved_objects = this.pv.transform_only\n\t\t\t\t\t? // TODO: why is doing a transform slower than cloning the input??\n\t\t\t\t\t  lodash_compact([instance_core_group.objects()[point_index]])\n\t\t\t\t\t: instance_core_group.clone().objects();\n\n\t\t\t\tresolve(moved_objects);\n\t\t\t} else {\n\t\t\t\tresolve([]);\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _stamp_instance_group_if_required(instance_core_group: CoreGroup): Promise<CoreGroup | undefined> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tif (this.pv.use_copy_expr) {\n\t\t\t\tconst container0 = await this.container_controller.request_input_container(0);\n\t\t\t\tlet core_group0: CoreGroup;\n\t\t\t\tif (container0 && (core_group0 = container0.core_content()) != null) {\n\t\t\t\t\t// this.stamp_node.increment_global_value()\n\t\t\t\t\tresolve(core_group0);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`input failed for index ${this.stamp_value()}`);\n\t\t\t\t\tresolve();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tresolve(instance_core_group);\n\t\t\t}\n\t\t});\n\t}\n\n\t// https://stackoverflow.com/questions/24586110/resolve-promises-one-after-another-i-e-in-sequence\n\tprivate async _copy_moved_objects_for_each_instance(instance_core_group: CoreGroup) {\n\t\t// let p = Promise.resolve(); // Q() in q\n\n\t\tfor (let i = 0; i < this.pv.count; i++) {\n\t\t\tawait this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t}\n\t\t// lodash_times(this.pv.count, (i) => {\n\t\t// \tp = p.then(() => {\n\t\t// \t\treturn this._copy_moved_objects_for_instance(instance_core_group, i);\n\t\t// \t});\n\t\t// });\n\n\t\t// return p;\n\t}\n\n\tprivate _copy_moved_objects_for_instance(instance_core_group: CoreGroup, i: number) {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis.stamp_node.set_global_index(i);\n\n\t\t\tconst stamped_instance_core_group = await this._stamp_instance_group_if_required(instance_core_group);\n\t\t\tif (stamped_instance_core_group) {\n\t\t\t\tstamped_instance_core_group.objects().forEach((object) => {\n\t\t\t\t\t// TODO: I should use the Group wrapper, to ensure that material.linewidth is properly cloned\n\t\t\t\t\tconst new_object = CoreObject.clone(object);\n\t\t\t\t\tthis._objects.push(new_object);\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tresolve();\n\t\t});\n\t}\n\n\t// TODO: what if I combine both @_param_count and stamping?!\n\tprivate cook_without_template(instance_core_group: CoreGroup) {\n\t\tthis._objects = [];\n\t\tthis._copy_moved_objects_for_each_instance(instance_core_group).then(() => {\n\t\t\tthis.set_objects(this._objects);\n\t\t});\n\t}\n\n\tprivate _copy_attributes_from_template(object: Object3D, template_point: CorePoint) {\n\t\tthis._attribute_names_to_copy.forEach((attrib_name, i) => {\n\t\t\tconst attrib_value = template_point.attrib_value(attrib_name);\n\t\t\tconst object_wrapper = new CoreObject(object, i);\n\t\t\tobject_wrapper.add_attribute(attrib_name, attrib_value);\n\t\t});\n\t}\n\n\t//\n\t//\n\t// STAMP\n\t//\n\t//\n\tstamp_value(attrib_name?: string) {\n\t\treturn this.stamp_node.value(attrib_name);\n\t}\n\tget stamp_node() {\n\t\treturn (this._stamp_node = this._stamp_node || this.create_stamp_node());\n\t}\n\tprivate create_stamp_node() {\n\t\tconst stamp_node = new CopyStamp(this.scene);\n\t\tthis.dirty_controller.set_forbidden_trigger_nodes([stamp_node]);\n\t\treturn stamp_node;\n\t}\n\n\t// private set_dirty_allowed(original_trigger_graph_node: CoreGraphNode): boolean {\n\t// \treturn original_trigger_graph_node.graph_node_id !== this.stamp_node.graph_node_id;\n\t// }\n}\n","import lodash_isNumber from 'lodash/isNumber';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {Quaternion} from 'three/src/math/Quaternion';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {InstancedBufferGeometry} from 'three/src/core/InstancedBufferGeometry';\nimport {InstancedBufferAttribute} from 'three/src/core/InstancedBufferAttribute';\n// import {BoxBufferGeometry} from 'three/src/geometries/BoxGeometry'\n// const THREE = {BoxBufferGeometry, InstancedBufferAttribute, InstancedBufferGeometry, Matrix4, Quaternion, Vector2, Vector3}\n\nimport {CorePoint} from './Point';\n// import {Core} from 'src/core/_Module';\nimport {CoreGroup} from './Group';\nimport {CoreGeometry} from './Geometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nconst DEFAULT = {\n\tSCALE: new Vector3(1, 1, 1),\n\tPSCALE: 1,\n\tEYE: new Vector3(0, 0, 0),\n\tUP: new Vector3(0, 1, 0),\n};\nconst SCALE_ATTRIB_NAME = 'scale';\nconst PSCALE_ATTRIB_NAME = 'pscale';\nconst NORMAL_ATTRIB_NAME = 'normal';\nconst UP_ATTRIB_NAME = 'up';\nconst MATRIX_T = 'translate';\nconst MATRIX_R = 'rotate';\nconst MATRIX_S = 'scale';\n\nconst DEFAULT_COLOR = new Vector3(1, 1, 1);\nconst DEFAULT_UV = new Vector2(0, 0);\nconst ATTRIB_NAME_UV = 'uv';\nconst ATTRIB_NAME_COLOR = 'color';\n\nexport class CoreInstancer {\n\tprivate _is_pscale_present: boolean;\n\tprivate _is_scale_present: boolean;\n\tprivate _is_normal_present: boolean;\n\tprivate _is_up_present: boolean;\n\tprivate _do_rotate_matrices: boolean;\n\tprivate _matrices: Dictionary<Matrix4> = {};\n\n\tconstructor(private _group_wrapper: CoreGroup) {\n\t\tthis._is_pscale_present = this._group_wrapper.has_attrib('pscale');\n\t\tthis._is_scale_present = this._group_wrapper.has_attrib('scale');\n\n\t\tthis._is_normal_present = this._group_wrapper.has_attrib('normal');\n\t\tthis._is_up_present = this._group_wrapper.has_attrib('up');\n\n\t\tthis._do_rotate_matrices = this._is_normal_present; //&& this._is_up_present;\n\t}\n\n\tmatrices(): Matrix4[] {\n\t\tthis._matrices = {};\n\t\tthis._matrices[MATRIX_T] = new Matrix4();\n\t\tthis._matrices[MATRIX_R] = new Matrix4();\n\t\tthis._matrices[MATRIX_S] = new Matrix4();\n\n\t\treturn this._group_wrapper.points().map((point) => {\n\t\t\treturn this._matrix_from_point(point);\n\t\t});\n\t}\n\n\t_matrix_from_point(point: CorePoint): Matrix4 {\n\t\tconst t = point.position();\n\t\t//r = new Vector3(0,0,0)\n\t\tlet scale = this._is_scale_present ? point.attrib_value(SCALE_ATTRIB_NAME) : DEFAULT.SCALE;\n\t\tconst pscale = this._is_pscale_present ? point.attrib_value(PSCALE_ATTRIB_NAME) : DEFAULT.PSCALE;\n\t\tscale = scale.clone().multiplyScalar(pscale);\n\n\t\t//matrix = #Core.Transform.matrix(t, r, s, scale)\n\t\tconst matrix = new Matrix4();\n\t\tmatrix.identity();\n\n\t\tconst scale_matrix = this._matrices[MATRIX_S];\n\t\tscale_matrix.makeScale(scale.x, scale.y, scale.z);\n\n\t\tconst translate_matrix = this._matrices[MATRIX_T];\n\t\ttranslate_matrix.makeTranslation(t.x, t.y, t.z);\n\n\t\tmatrix.multiply(translate_matrix);\n\n\t\tif (this._do_rotate_matrices) {\n\t\t\tconst rotate_matrix = this._matrices[MATRIX_R];\n\t\t\tconst eye = DEFAULT.EYE;\n\t\t\tconst center = point.attrib_value(NORMAL_ATTRIB_NAME).multiplyScalar(-1);\n\t\t\tconst up = this._is_up_present ? point.attrib_value(UP_ATTRIB_NAME) : DEFAULT.UP;\n\t\t\tup.normalize();\n\t\t\trotate_matrix.lookAt(eye, center, up);\n\n\t\t\tmatrix.multiply(rotate_matrix);\n\t\t}\n\n\t\tmatrix.multiply(scale_matrix);\n\n\t\treturn matrix;\n\t}\n\n\tstatic create_instance_buffer_geo(\n\t\tgeometry_to_instance: BufferGeometry,\n\t\ttemplate_core_group: CoreGroup,\n\t\tattributes_to_copy: string\n\t) {\n\t\tconst instance_pts = template_core_group.points();\n\t\t// geometry_to_instance = new BoxBufferGeometry( 2, 2, 2 )\n\t\t// geometry = new InstancedBufferGeometry()\n\t\t// geometry.index = geometry_to_instance.index\n\t\t// geometry.attributes.position = geometry_to_instance.attributes.position\n\t\t// geometry.attributes.uv = geometry_to_instance.attributes.uv\n\n\t\tconst geometry = new InstancedBufferGeometry();\n\t\tgeometry.copy(geometry_to_instance);\n\n\t\tconst instances_count = instance_pts.length;\n\t\tconst positions = new Float32Array(instances_count * 3);\n\t\tconst colors = new Float32Array(instances_count * 3);\n\t\tconst scales = new Float32Array(instances_count * 3);\n\t\tconst orients = new Float32Array(instances_count * 4);\n\n\t\tconst has_color = template_core_group.has_attrib(ATTRIB_NAME_COLOR);\n\n\t\tconst position = new Vector3(0, 0, 0);\n\t\tconst quaternion = new Quaternion();\n\t\tconst scale = new Vector3(1, 1, 1);\n\n\t\tconst instancer = new CoreInstancer(template_core_group);\n\t\tconst instance_matrices = instancer.matrices();\n\n\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\tconst index3 = i * 3;\n\t\t\tconst index4 = i * 4;\n\n\t\t\tconst matrix = instance_matrices[i];\n\t\t\tmatrix.decompose(position, quaternion, scale);\n\n\t\t\tposition.toArray(positions, index3);\n\t\t\tquaternion.toArray(orients, index4);\n\t\t\tscale.toArray(scales, index3);\n\n\t\t\tconst color = has_color ? instance_pt.attrib_value(ATTRIB_NAME_COLOR) : DEFAULT_COLOR;\n\t\t\tcolor.toArray(colors, index3);\n\t\t});\n\n\t\t// if(this._param_add_uv_offset){\n\t\tconst has_uv = template_core_group.has_attrib(ATTRIB_NAME_UV);\n\t\tif (has_uv) {\n\t\t\tconst uvs = new Float32Array(instances_count * 2);\n\t\t\tinstance_pts.forEach((instance_pt, i) => {\n\t\t\t\tconst index2 = i * 2;\n\t\t\t\tconst uv = has_uv ? instance_pt.attrib_value(ATTRIB_NAME_UV) : DEFAULT_UV;\n\t\t\t\tuv.toArray(uvs, index2);\n\t\t\t});\n\t\t\tgeometry.setAttribute('instanceUv', new InstancedBufferAttribute(uvs, 2));\n\t\t}\n\t\t// }\n\n\t\tgeometry.setAttribute('instancePosition', new InstancedBufferAttribute(positions, 3));\n\t\tgeometry.setAttribute('instanceScale', new InstancedBufferAttribute(scales, 3));\n\t\tgeometry.setAttribute('instanceOrientation', new InstancedBufferAttribute(orients, 4));\n\t\tgeometry.setAttribute('instanceColor', new InstancedBufferAttribute(colors, 3));\n\n\t\tconst attrib_names = template_core_group.attrib_names_matching_mask(attributes_to_copy);\n\n\t\tattrib_names.forEach((attrib_name) => {\n\t\t\tconst attrib_size = template_core_group.attrib_size(attrib_name);\n\t\t\tconst values = new Float32Array(instances_count * attrib_size);\n\t\t\tinstance_pts.forEach((pt, i) => {\n\t\t\t\tconst value = pt.attrib_value(attrib_name);\n\t\t\t\tif (lodash_isNumber(value)) {\n\t\t\t\t\tvalues[i] = value;\n\t\t\t\t} else {\n\t\t\t\t\tvalue.toArray(values, i * attrib_size);\n\t\t\t\t}\n\t\t\t});\n\t\t\tgeometry.setAttribute(attrib_name, new InstancedBufferAttribute(values, attrib_size));\n\t\t});\n\n\t\tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\tgeometry_wrapper.mark_as_instance();\n\n\t\treturn geometry;\n\t}\n}\n","import {CorePoint} from 'src/core/geometry/Point';\nimport {CoreGraphNode} from 'src/core/graph/CoreGraphNode';\nimport {PolyScene} from 'src/engine/scene/PolyScene';\n\nexport class CopyStamp extends CoreGraphNode {\n\tprivate _global_index: number = 0;\n\tprivate _point: CorePoint | undefined;\n\n\tconstructor(scene: PolyScene) {\n\t\tsuper(scene, 'CopyStamp');\n\t}\n\n\tset_point(point: CorePoint) {\n\t\tthis._point = point;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\tset_global_index(index: number) {\n\t\tthis._global_index = index;\n\t\tthis.set_dirty();\n\t\tthis.remove_dirty_state();\n\t}\n\n\tvalue(attrib_name?: string) {\n\t\tif (this._point) {\n\t\t\tif (attrib_name) {\n\t\t\t\treturn this._point.attrib_value(attrib_name);\n\t\t\t} else {\n\t\t\t\treturn this._point.index;\n\t\t\t}\n\t\t} else {\n\t\t\treturn this._global_index;\n\t\t}\n\t}\n}\n","// import {Core} from 'src/Core/_Module';\nimport {TypedSopNode} from './_Base';\nimport {JsonDataLoader} from 'src/core/loader/geometry/JsonData';\n\nconst DEFAULT_DATA = [\n\t{value: -40},\n\t{value: -30},\n\t{value: -20},\n\t{value: -10},\n\t{value: 0},\n\t{value: 10},\n\t{value: 20},\n\t{value: 30},\n\t{value: 40},\n\t{value: 50},\n\t{value: 60},\n\t{value: 70},\n\t{value: 80},\n];\nconst DEFAULT_DATA_STR = JSON.stringify(DEFAULT_DATA);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass DataSopParamsConfig extends NodeParamsConfig {\n\tdata = ParamConfig.STRING(DEFAULT_DATA_STR);\n}\nconst ParamsConfig = new DataSopParamsConfig();\n\nexport class DataSopNode extends TypedSopNode<DataSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data';\n\t}\n\n\tcook() {\n\t\tlet json = null;\n\t\ttry {\n\t\t\tjson = JSON.parse(this.pv.data);\n\t\t} catch (e) {\n\t\t\tthis.states.error.set('could not parse json');\n\t\t}\n\n\t\tif (json) {\n\t\t\tconst loader = new JsonDataLoader();\n\t\t\tloader.set_json(json);\n\t\t\tconst object = loader.create_object();\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.cook_controller.end_cook();\n\t\t}\n\t}\n}\n","import lodash_isArray from 'lodash/isArray'\nimport lodash_isString from 'lodash/isString'\nimport {CoreConstant} from './Constant'\n\nexport class CoreAttributeData {\n\tconstructor(private _size: number, private _type: number) {}\n\n\tsize() {\n\t\treturn this._size\n\t}\n\ttype() {\n\t\treturn this._type\n\t}\n\n\tstatic from_value(attrib_value: any) {\n\t\tconst type = lodash_isString(attrib_value)\n\t\t\t? CoreConstant.ATTRIB_TYPE.STRING\n\t\t\t: CoreConstant.ATTRIB_TYPE.NUMERIC\n\t\tconst size = lodash_isArray(attrib_value) ? attrib_value.length : 1\n\n\t\treturn new this(size, type)\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n// import lodash_flatten from 'lodash/flatten';\nimport {TypedSopNode} from './_Base';\n\n// import {CoreLoaderGeometry, LoaderType, LOADER_TYPES} from 'src/Core/Loader/Geometry';\nimport {JsonDataLoader} from 'src/core/loader/geometry/JsonData';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass DataUrlSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('/examples/sop/data_url/basic.json');\n\tjson_data_keys_prefix = ParamConfig.STRING('');\n\tskip_entries = ParamConfig.STRING('');\n\tconvert = ParamConfig.BOOLEAN(0);\n\tconvert_to_numeric = ParamConfig.STRING('', {\n\t\tvisible_if: {convert: 1},\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tDataUrlSopNode.PARAM_CALLBACK_reload(node as DataUrlSopNode, param);\n\t\t},\n\t});\n}\nconst ParamsConfig = new DataUrlSopParamsConfig();\n\nexport class DataUrlSopNode extends TypedSopNode<DataUrlSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'data_url';\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tasync cook() {\n\t\tconst loader = new JsonDataLoader({\n\t\t\tdata_keys_prefix: this.pv.json_data_keys_prefix,\n\t\t\tskip_entries: this.pv.skip_entries,\n\t\t\tdo_convert: this.pv.convert,\n\t\t\tconvert_to_numeric: this.pv.convert_to_numeric,\n\t\t});\n\t\tloader.load(this.pv.url, this._on_load.bind(this), undefined, this._on_error.bind(this));\n\t}\n\n\t_on_load(objects: Object3D) {\n\t\t// objects = lodash_flatten(objects);\n\t\tthis.set_objects([objects]);\n\t}\n\t_on_error(error: ErrorEvent) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${error})`);\n\t\tthis.cook_controller.end_cook();\n\t}\n\n\t// async _on_open_url(){\n\t// \tconst url = await this.param('url').eval_p()\n\t// \tconst a = document.createElement('a')\n\t// \ta.href = url\n\t// \ta.setAttribute('target', '_blank')\n\t// \ta.click()\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: DataUrlSopNode, param: BaseParamType) {\n\t\tnode.param_callback_reload();\n\t}\n\tparam_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nclass DelaySopParamsConfig extends NodeParamsConfig {\n\tduration = ParamConfig.INTEGER(1000);\n}\nconst ParamsConfig = new DelaySopParamsConfig();\n\nexport class DelaySopNode extends TypedSopNode<DelaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delay';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.ALWAYS]);\n\t}\n\n\tcook(inputs_contents: CoreGroup[]) {\n\t\tconst core_group = inputs_contents[0];\n\t\tconst c = () => {\n\t\t\tthis.set_core_group(core_group);\n\t\t};\n\t\tsetTimeout(c, this.pv.duration);\n\t}\n}\n","import {Box3} from 'three/src/math/Box3';\nimport lodash_isString from 'lodash/isString';\nimport lodash_each from 'lodash/each';\nimport {TypedSopNode} from './_Base';\nimport {CoreString} from 'src/core/String';\nimport {\n\tAttribClass,\n\tAttribClassMenuEntries,\n\tObjectType,\n\tObjectTypeMenuEntries,\n\tObjectTypes,\n} from 'src/core/geometry/Constant';\nimport {CoreGroup, Object3DWithGeometry} from 'src/core/geometry/Group';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {CoreObject} from 'src/core/geometry/Object';\n\nenum ComparisonOperator {\n\t'==' = 0,\n\t'<' = 1,\n\t'<=' = 2,\n\t'>=' = 3,\n\t'>' = 4,\n\t'!=' = 5,\n}\nconst ComparisonOperatorMenuEntries = [\n\t{name: '==', value: ComparisonOperator['==']},\n\t{name: '<', value: ComparisonOperator['<']},\n\t{name: '<=', value: ComparisonOperator['<=']},\n\t{name: '>=', value: ComparisonOperator['>=']},\n\t{name: '>', value: ComparisonOperator['>']},\n\t{name: '!=', value: ComparisonOperator['!=']},\n];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass DeleteSopParamsConfig extends NodeParamsConfig {\n\tclass = ParamConfig.INTEGER(AttribClass.VERTEX, {\n\t\tmenu: {\n\t\t\tentries: AttribClassMenuEntries,\n\t\t},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n\thide_objects = ParamConfig.BOOLEAN(0);\n\n\t// by_object_type\n\tby_object_type = ParamConfig.BOOLEAN(0);\n\tobject_type = ParamConfig.INTEGER(ObjectTypes.indexOf(ObjectType.MESH), {\n\t\tmenu: {\n\t\t\tentries: ObjectTypeMenuEntries,\n\t\t},\n\t\tvisible_if: {by_object_type: true},\n\t});\n\n\t// by_expression\n\tby_expression = ParamConfig.BOOLEAN(0);\n\texpression = ParamConfig.BOOLEAN('@ptnum==0', {\n\t\tvisible_if: {by_expression: true},\n\t\texpression: {for_entities: true},\n\t});\n\n\t// by_attrib\n\tby_attrib = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_string = ParamConfig.STRING('', {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\t// attrib_float = ParamConfig.FLOAT(0, {\n\t// \tvisible_if: {by_attrib: true},\n\t// })\n\tattrib_numeric = ParamConfig.VECTOR4([0, 0, 0, 0], {\n\t\tvisible_if: {by_attrib: true},\n\t});\n\tattrib_comparison_operator = ParamConfig.INTEGER(ComparisonOperator['=='], {\n\t\tmenu: {\n\t\t\tentries: ComparisonOperatorMenuEntries,\n\t\t},\n\t\tvisible_if: {by_attrib: true},\n\t});\n\n\t// by_bbox\n\tby_bbox = ParamConfig.BOOLEAN(0);\n\tbbox_size = ParamConfig.VECTOR3([1, 1, 1], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\tbbox_center = ParamConfig.VECTOR3([0, 0, 0], {\n\t\tvisible_if: {by_bbox: true},\n\t});\n\t//this.add_param( ParamType.STRING, 'index_mode', Core.Geometry.Geometry.INDEX_MODE_FACES )\n\n\t// by_visible\n\tby_visible = ParamConfig.BOOLEAN(0);\n\tkeep_points = ParamConfig.BOOLEAN(1, {\n\t\tvisible_if: {\n\t\t\tclass: AttribClass.OBJECT,\n\t\t},\n\t});\n}\nconst ParamsConfig = new DeleteSopParamsConfig();\n\nexport class DeleteSopNode extends TypedSopNode<DeleteSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'delete';\n\t}\n\n\t// _param_attrib_class: number;\n\t// _param_invert: boolean;\n\t// _param_hide_objects: boolean;\n\t// _param_by_object_type: boolean;\n\t// _param_object_type: number;\n\t// _param_by_attrib: boolean;\n\t// _param_attrib_name: string;\n\t// _param_attrib_float: number;\n\t// _param_attrib_string: string;\n\t// _param_attrib_vector: Vector3;\n\t// _param_attrib_ComparisonOperator: number;\n\t// _param_by_expression: boolean;\n\t// _param_expression: string;\n\t// _param_by_bbox: boolean;\n\t// _param_bbox_size: Vector3;\n\t// _param_bbox_center: Vector3;\n\t// _param_by_visible: boolean;\n\n\tprivate _bbox_cache: Box3 | undefined;\n\n\tprivate _marked_for_deletion_per_object_index: Map<number, boolean> = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to delete from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._bbox_cache = undefined;\n\t\tswitch (this.pv.class) {\n\t\t\tcase AttribClass.VERTEX:\n\t\t\t\tawait this._eval_for_points(core_group);\n\t\t\t\tbreak;\n\t\t\tcase AttribClass.OBJECT:\n\t\t\t\tawait this._eval_for_objects(core_group);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\tprivate async _eval_for_objects(core_group: CoreGroup) {\n\t\t// const objects_to_delete = [];\n\t\tconst objects_to_keep = [];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tthis._marked_for_deletion_per_object_index = new Map();\n\t\tfor (let core_object of core_objects) {\n\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, false);\n\t\t}\n\n\t\tif (this.pv.by_expression) {\n\t\t\tawait this._eval_expressions_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_object_type) {\n\t\t\tthis._eval_type_for_objects(core_objects);\n\t\t}\n\n\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\tthis._eval_attrib_for_objects(core_objects);\n\n\t\t\t// \tif !is_deleted && @_param_by_bbox\n\t\t\t// \t\tis_deleted = this._eval_bbox_for_object(object)\n\n\t\t\t// \tif !is_deleted && @_param_by_visible\n\t\t\t// \t\tis_deleted = !object.visible\n\n\t\t\t// \tif @_param_invert\n\t\t\t// \t\tis_deleted = !is_deleted\n\n\t\t\t// \tif @_param_hide_objects\n\t\t\t// \t\tobject.visible = !is_deleted\n\t\t\t// \telse\n\t\t\t// \t\tif is_deleted\n\t\t\t// \t\t\tobjects_to_delete.push(object)\n\n\t\t\t// true; // to ensure the loop isn't breaking, which is what happens when setting the object.visible to false...\n\t\t}\n\n\t\tif (this.pv.invert) {\n\t\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(object_index, !marked_for_deletion);\n\t\t\t});\n\t\t}\n\n\t\tlet core_object, object;\n\t\tconst point_objects_from_deleted_objects: Object3DWithGeometry[] = [];\n\t\t// for (let object_index of Object.keys(this._marked_for_deletion_per_object_index)) {\n\t\tthis._marked_for_deletion_per_object_index.forEach((marked_for_deletion, object_index) => {\n\t\t\tcore_object = core_objects[object_index];\n\t\t\tobject = core_object.object();\n\n\t\t\tif (this.pv.hide_objects) {\n\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tobject.visible = false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (!marked_for_deletion) {\n\t\t\t\t\tobjects_to_keep.push(object);\n\t\t\t\t}\n\t\t\t\tif (marked_for_deletion) {\n\t\t\t\t\tpoint_objects_from_deleted_objects.push(this._point_object(core_object));\n\t\t\t\t}\n\t\t\t}\n\t\t\t// if (marked_for_deletion) {\n\t\t\t// \tcmptr += 1;\n\t\t\t// \tif (this.pv.hide_objects) {\n\t\t\t// \t\tobject.visible = true;\n\n\t\t\t// \t} else {\n\t\t\t// \t\t// object.parent.remove(object);\n\t\t\t// \t\t// const c = () =>\n\t\t\t// \t\t// \tobject.traverse(function(object_child) {\n\t\t\t// \t\t// \t\tif (object_child.geometry != null) {\n\t\t\t// \t\t// \t\t\tobject_child.geometry.dispose();\n\t\t\t// \t\t// \t\t}\n\t\t\t// \t\t// \t\t// const material = object_child.material\n\t\t\t// \t\t// \t\t// if(material){ material.dispose() }\n\t\t\t// \t\t// \t})\n\t\t\t// \t\t// ;\n\t\t\t// \t\t// setTimeout(c, 25);\n\t\t\t// \t}\n\t\t\t// }\n\t\t});\n\n\t\tfor (let object of point_objects_from_deleted_objects) {\n\t\t\tobjects_to_keep.push(object);\n\t\t}\n\n\t\tthis.set_objects(objects_to_keep);\n\t}\n\n\t//console.log(\"#{cmptr} marked for deletion\")\n\n\t// TODO: ensure that geometries with no remaining points are removed from the group\n\tprivate async _eval_for_points(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\tlet core_object;\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tcore_object = core_objects[i];\n\t\t\tlet core_geometry = core_object.core_geometry();\n\t\t\tif (core_geometry) {\n\t\t\t\tlet points = core_geometry.points_from_geometry();\n\t\t\t\tconst init_points_count = points.length;\n\t\t\t\tif (this.pv.by_expression) {\n\t\t\t\t\tpoints = await this._eval_expressions_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (this.pv.by_attrib && this.pv.attrib_name !== '') {\n\t\t\t\t\tpoints = this._eval_attrib_for_points(points);\n\t\t\t\t}\n\t\t\t\tif (this.pv.by_bbox) {\n\t\t\t\t\tpoints = this._eval_bbox_for_points(points);\n\t\t\t\t}\n\n\t\t\t\tif (points.length != init_points_count) {\n\t\t\t\t\tconst object = core_object.object() as Object3DWithGeometry;\n\t\t\t\t\tcore_geometry.geometry().dispose();\n\t\t\t\t\tif (points.length > 0) {\n\t\t\t\t\t\t// TODO: if the new geo only has unconnected points, how do I know it and how do I change the material if it was previously a mesh?\n\t\t\t\t\t\tobject.geometry = CoreGeometry.geometry_from_points(\n\t\t\t\t\t\t\tpoints,\n\t\t\t\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t\t\t\t);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// TODO: do not dispose material if not cloned\n\t\t\t\t\t\t// if (object.material != null) {\n\t\t\t\t\t\t// \tobject.material.dispose();\n\t\t\t\t\t\t// }\n\t\t\t\t\t\tobject.parent != null ? object.parent.remove(object) : undefined;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_points(points: CorePoint[]) {\n\t\tconst kept_points = [];\n\n\t\t// const promises = points.map((point, i)=> {\n\t\t// \treturn new Promise( async (resolve, reject)=> {\n\t\t// \t\tthis.context().set_entity(point);\n\t\t// \t\tconst val = await(this.param('expression').eval_p());\n\t\t// \t\tconst keep_point = this.pv.invert ?\n\t\t// \t\t\tval === true\n\t\t// \t\t:\n\t\t// \t\t\tval === false;\n\n\t\t// \t\tif (keep_point) {\n\t\t// \t\t\tkept_points.push(point);\n\t\t// \t\t}\n\t\t// \t\tresolve();\n\t\t// \t});\n\t\t// });\n\n\t\t// await(Promise.all(promises));\n\t\tconst param = this.p.expression;\n\t\tif (this.p.expression.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\tlet keep_point = !value;\n\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t}\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(point);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tconst value = this.pv.expression;\n\t\t\tlet keep_point = !value;\n\t\t\tif (this.pv.invert) {\n\t\t\t\tkeep_point = !keep_point;\n\t\t\t}\n\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\tif (keep_point) {\n\t\t\t\t\tkept_points.push(points[i]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconsole.log(kept_points);\n\t\treturn kept_points;\n\t}\n\n\tprivate async _eval_expressions_for_objects(core_objects: CoreObject[]) {\n\t\tconst param = this.p.expression;\n\n\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\tawait param.expression_controller.compute_expression_for_objects(core_objects, (core_object, value) => {\n\t\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\t\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, value);\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tfor (let core_object of core_objects) {\n\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t\t}\n\t\t}\n\n\t\t// for (let core_object of core_objects) {\n\t\t// \tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t// \tif (!is_marked_for_deletion) {\n\t\t// \t\tthis.processing_context.set_entity(core_object);\n\t\t// \t\t// param.set_dirty();\n\t\t// \t\tawait param.compute();\n\t\t// \t\tthis._marked_for_deletion_per_object_index.set(core_object.index, param.value);\n\t\t// \t}\n\t\t// }\n\t}\n\n\tprivate _eval_attrib_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tif (points.length > 0) {\n\t\t\tconst first_attrib_value = points[0].attrib_value(this.pv.attrib_name);\n\t\t\t// TODO: should I just have @_param_attrib_string?\n\t\t\t// although I may need a vector one... maybe a multiple string?\n\t\t\tconst comparison_attrib_values = lodash_isString(first_attrib_value)\n\t\t\t\t? //@_param_attrib_string\n\t\t\t\t  CoreString.attrib_names(this.pv.attrib_string)\n\t\t\t\t: [this.pv.attrib_numeric.x];\n\n\t\t\tcomparison_attrib_values.forEach((comparison_attrib_value: string | number) => {\n\t\t\t\treturn points.forEach((point) => {\n\t\t\t\t\tconst attrib_value = point.attrib_value(this.pv.attrib_name);\n\n\t\t\t\t\t// TODO: and for vectors? should I have a point.attrib(name).is_equal(value)\n\t\t\t\t\t// or point.is_attrib_equal(name, value) ?\n\t\t\t\t\t//keep_point = (attrib_value != comparison_attrib_value)\n\t\t\t\t\tlet keep_point = !this._comparison(attrib_value, comparison_attrib_value);\n\n\t\t\t\t\tif (this.pv.invert) {\n\t\t\t\t\t\tkeep_point = !keep_point;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (keep_point) {\n\t\t\t\t\t\treturn kept_points.push(point);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\treturn kept_points;\n\t}\n\n\tprivate _comparison(attrib_value: number | string, comparison_attrib_value: number | string) {\n\t\tswitch (this.pv.attrib_ComparisonOperator) {\n\t\t\tcase ComparisonOperator['==']:\n\t\t\t\treturn attrib_value === comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<=']:\n\t\t\t\treturn attrib_value <= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['<']:\n\t\t\t\treturn attrib_value < comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>']:\n\t\t\t\treturn attrib_value > comparison_attrib_value;\n\t\t\tcase ComparisonOperator['>=']:\n\t\t\t\treturn attrib_value >= comparison_attrib_value;\n\t\t\tcase ComparisonOperator['!=']:\n\t\t\t\treturn attrib_value !== comparison_attrib_value;\n\t\t}\n\t}\n\n\tprivate _eval_type_for_objects(core_objects: CoreObject[]) {\n\t\tconst object_type_name = ObjectTypes[this.pv.object_type];\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\tconst object = core_object.object();\n\n\t\t\t\tif (object.constructor.name === object_type_name) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_attrib_for_objects(core_objects: CoreObject[]) {\n\t\tfor (let core_object of core_objects) {\n\t\t\tconst is_marked_for_deletion = this._marked_for_deletion_per_object_index.get(core_object.index);\n\n\t\t\tif (!is_marked_for_deletion) {\n\t\t\t\t// const object = core_object.object();\n\t\t\t\tconst attrib_value = core_object.attrib_value(this.pv.attrib_name);\n\n\t\t\t\tconst comparison_attrib_value = lodash_isString(attrib_value)\n\t\t\t\t\t? this.pv.attrib_string\n\t\t\t\t\t: this.pv.attrib_float;\n\n\t\t\t\tif (attrib_value === comparison_attrib_value) {\n\t\t\t\t\tthis._marked_for_deletion_per_object_index.set(core_object.index, true);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _eval_bbox_for_points(points: CorePoint[]) {\n\t\tconst kept_points: CorePoint[] = [];\n\n\t\tlodash_each(points, (point, i) => {\n\t\t\tconst in_bbox = this._bbox.containsPoint(point.position());\n\n\t\t\tconst keep_point = this.pv.invert ? in_bbox : !in_bbox;\n\n\t\t\tif (keep_point) {\n\t\t\t\treturn kept_points.push(point);\n\t\t\t}\n\t\t});\n\n\t\treturn kept_points;\n\t}\n\n\t// private _eval_bbox_for_object(object: Object3D): boolean {\n\t// \tconst object_bbox = new Box3().setFromObject(object);\n\t// \tconst center = new Vector3();\n\t// \tobject_bbox.getCenter(center);\n\n\t// \treturn this.pv.bbox().containsPoint(center);\n\t// }\n\n\tprivate get _bbox() {\n\t\treturn this._bbox_cache != null\n\t\t\t? this._bbox_cache\n\t\t\t: (this._bbox_cache = new Box3(\n\t\t\t\t\tthis.pv.bbox_center.clone().sub(this.pv.bbox_size.clone().multiplyScalar(0.5)),\n\t\t\t\t\tthis.pv.bbox_center.clone().add(this.pv.bbox_size.clone().multiplyScalar(0.5))\n\t\t\t  ));\n\t}\n\n\tprivate _point_object(core_object: CoreObject) {\n\t\tconst core_points = core_object.points();\n\t\tconst geometry = CoreGeometry.geometry_from_points(\n\t\t\tcore_points,\n\t\t\t(<unknown>core_object.object().constructor) as ObjectType\n\t\t);\n\t\treturn this.create_object(geometry, ObjectType.POINTS);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport lodash_range from 'lodash/range';\nimport lodash_times from 'lodash/times';\nimport lodash_chunk from 'lodash/chunk';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {CoreFace} from 'src/core/geometry/Face';\nclass FaceSopParamsConfig extends NodeParamsConfig {\n\tmake_faces_unique = ParamConfig.BOOLEAN(0);\n\tadd_face_center_attribute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tadd_face_id = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\ttransform = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {make_faces_unique: 1},\n\t});\n\tscale = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {make_faces_unique: 1, transform: 1},\n\t});\n}\nconst ParamsConfig = new FaceSopParamsConfig();\n\nexport class FaceSopNode extends TypedSopNode<FaceSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'face';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.make_faces_unique) {\n\t\t\tthis._make_faces_unique(core_group);\n\n\t\t\t// we can only add face_center attrib\n\t\t\t// if the faces have been split\n\t\t\t// otherwise a point may belong to multiple faces\n\t\t\tif (this.pv.add_face_center_attribute) {\n\t\t\t\tthis._add_face_center_attribute(core_group);\n\t\t\t}\n\t\t\tif (this.pv.add_face_id) {\n\t\t\t\tthis._add_face_id(core_group);\n\t\t\t}\n\t\t\tif (this.pv.transform) {\n\t\t\t\tthis._transform_faces(core_group);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _make_faces_unique(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst faces = lodash_chunk(geometry.index?.array || [], 3);\n\t\t\t\tconst points_count = faces.length * 3;\n\t\t\t\tfor (let attrib_name of Object.keys(geometry.attributes)) {\n\t\t\t\t\tconst attrib = geometry.attributes[attrib_name];\n\t\t\t\t\tconst attrib_size = attrib.itemSize;\n\t\t\t\t\tconst new_values = new Float32Array(points_count * attrib_size);\n\t\t\t\t\tlet new_value_index = 0;\n\t\t\t\t\tfaces.forEach((face) => {\n\t\t\t\t\t\tface.forEach((index) => {\n\t\t\t\t\t\t\tlodash_times(attrib_size, (i) => {\n\t\t\t\t\t\t\t\tconst current_value = attrib.array[index * attrib_size + i];\n\t\t\t\t\t\t\t\tnew_values[new_value_index] = current_value;\n\t\t\t\t\t\t\t\tnew_value_index += 1;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t\tgeometry.setAttribute(attrib_name, new BufferAttribute(new_values, attrib_size));\n\t\t\t\t}\n\t\t\t\tconst new_indices = lodash_range(points_count);\n\t\t\t\tgeometry.setIndex(new_indices);\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _add_face_center_attribute(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_center';\n\t\tconst face_center = new Vector3();\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, face_center);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _add_face_id(core_group: CoreGroup) {\n\t\tconst attrib_name = 'face_id';\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tconst faces = core_geometry.faces();\n\t\t\t\t// const points_count = core_geometry.points_count();\n\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 1, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let i = 0; i < faces.length; i++) {\n\t\t\t\t\tconst face = faces[i];\n\t\t\t\t\tconst points = face.points;\n\t\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\t\tconst point = points[j];\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate _transform_faces(core_group: CoreGroup) {\n\t\tconst attrib_name = 'position';\n\t\tconst face_center = new Vector3();\n\t\tconst new_position = new Vector3();\n\t\tconst scale = this.pv.scale;\n\t\tlet faces: CoreFace[], face: CoreFace, points: CorePoint[], point: CorePoint;\n\n\t\tcore_group.core_objects().forEach((core_object) => {\n\t\t\tconst object = core_object.object();\n\t\t\tconst core_geometry = core_object.core_geometry();\n\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\tfaces = core_geometry.faces();\n\t\t\t\tif (!core_geometry.has_attrib(attrib_name)) {\n\t\t\t\t\tcore_geometry.add_numeric_attrib(attrib_name, 3, -1);\n\t\t\t\t}\n\n\t\t\t\tfor (let fi = 0; fi < faces.length; fi++) {\n\t\t\t\t\tface = faces[fi];\n\t\t\t\t\tface.center(face_center);\n\n\t\t\t\t\tpoints = face.points;\n\t\t\t\t\tfor (let pi = 0; pi < points.length; pi++) {\n\t\t\t\t\t\tpoint = points[pi];\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tnew_position.x = position.x * scale + face_center.x * (1 - scale);\n\t\t\t\t\t\tnew_position.y = position.y * scale + face_center.y * (1 - scale);\n\t\t\t\t\t\tnew_position.z = position.z * scale + face_center.z * (1 - scale);\n\t\t\t\t\t\tpoint.set_attrib_value(attrib_name, new_position);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n}\n","import lodash_flatten from 'lodash/flatten';\n// import lodash_clone from 'lodash/clone';\n// import lodash_merge from 'lodash/merge';\nimport {TypedSopNode} from './_Base';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {CoreLoaderGeometry} from 'src/core/loader/Geometry';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseParamType} from 'src/engine/params/_Base';\nimport {BaseNodeType} from '../_Base';\nclass FileSopParamsConfig extends NodeParamsConfig {\n\turl = ParamConfig.STRING('', {\n\t\tdesktop_browse: {file_type: 'geometry'},\n\t\talways_reference_asset: true,\n\t});\n\treload = ParamConfig.BUTTON(null, {\n\t\tcallback: (node: BaseNodeType, param: BaseParamType) => {\n\t\t\tFileSopNode.PARAM_CALLBACK_reload(node as FileSopNode);\n\t\t},\n\t});\n}\nconst ParamsConfig = new FileSopParamsConfig();\n\nexport class FileSopNode extends TypedSopNode<FileSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'file';\n\t}\n\n\tinitialize_node() {\n\t\t// this.io.inputs.set_count_to_zero();\n\t}\n\n\t// TODO: no error when trying to load a non existing zip file??\n\tcook() {\n\t\tconst loader = new CoreLoaderGeometry(this.pv.url);\n\t\tloader.load(this._on_load.bind(this), this._on_error.bind(this));\n\t}\n\n\tprivate _on_load(objects: Object3D[]) {\n\t\tconsole.log('objects', objects);\n\t\tobjects = lodash_flatten(objects);\n\t\tthis.set_objects(objects);\n\t}\n\tprivate _on_error(message: string) {\n\t\tthis.states.error.set(`could not load geometry from ${this.pv.url} (${message})`);\n\t}\n\n\t// if I add this again, check if it can also work for desktop\n\t// async _on_open_url() {\n\t// \tconst url = this.pv.url\n\t// \tconst a = document.createElement('a');\n\t// \ta.href = url;\n\t// \ta.setAttribute('target', '_blank');\n\t// \ta.click();\n\t// }\n\n\tstatic PARAM_CALLBACK_reload(node: FileSopNode) {\n\t\tnode.param_callback_reload();\n\t}\n\tprivate param_callback_reload() {\n\t\t// this._previous_param_url = null\n\n\t\t// set the param dirty is preferable, in case this is used to refresh a local asset\n\t\tthis.p.url.set_dirty();\n\t\t// this.set_dirty()\n\t}\n\t// json_data_keys_prefix(){ return this.pv.json_data_keys_prefix }\n\t// json_skip_entries(){ return this.pv.skip_entries }\n\t// json_convert(){ return this.pv.convert }\n\t// json_convert_to_numeric(){ return this.pv.convert_to_numeric }\n}\n","import {ObjectLoader} from 'three/src/loaders/ObjectLoader';\nimport {Object3D} from 'three/src/core/Object3D';\n// import lodash_isArray from 'lodash/isArray';\n// import {CoreString} from 'src/core/String';\n\n// import {GeometryLoaderModule} from './Geometry/_Module';\n// import {DRACOLoader} from './Geometry/DRACOLoader';\n// import {JsonData} from './Geometry/JsonData'\n// import {CoreScriptLoader} from './Script';\nimport axios from 'axios';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshLambertMaterial} from 'three/src/materials/MeshLambertMaterial';\n\n// import {DDSLoader} from 'modules/three/examples/jsm/loaders/DDSLoader';\n// import {DRACOLoader} from 'modules/three/examples/jsm/loaders/DRACOLoader';\n// import {GLTFLoader} from 'modules/three/examples/jsm/loaders/GLTFLoader';\n// import {OBJLoader} from 'modules/three/examples/jsm/loaders/OBJLoader';\n\n// const GLTFLoaders = ['DDSLoader', 'DRACOLoader', 'GLTFLoader'];\n// const SCRIPT_URLS_BY_EXT = {\n// \tgltf: GLTFLoaders,\n// \tglb: GLTFLoaders,\n// \tobj: 'OBJLoader',\n// };\n// const THREE_LOADER_BY_EXT = {\n// \tgltf: 'GLTFLoader',\n// \tglb: 'GLTFLoader',\n// \tobj: 'OBJLoader',\n// };\n// const DRACO_EXTENSIONS = ['gltf', 'glb']\n// const DRACO_EXTENSIONS = ['drc'];\n\n// export enum LoaderType {\n// \tAUTO = 'auto',\n// \tJSON_DATA = 'json_data',\n// \t// THREEJS_JSON = 'threejs_json',\n// }\n// export const LOADER_TYPES = [\n// \tLoaderType.AUTO,\n// \tLoaderType.JSON_DATA,\n// \t// LoaderType.THREEJS_JSON,\n// ];\n\nexport class CoreLoaderGeometry {\n\tprivate ext: string;\n\n\tconstructor(\n\t\tprivate url: string // private type: LoaderType, // private requester: any\n\t) {\n\t\tconst elements = this.url.split('.');\n\t\tthis.ext = elements[elements.length - 1].toLowerCase();\n\t\tif (this.ext === 'zip') {\n\t\t\tthis.ext = elements[elements.length - 2];\n\t\t}\n\t\t// if(!this.type){\n\t\t// \tconsole.error(\"CoreLoaderGeometry type is not valid\", this.type)\n\t\t// }\n\t}\n\n\tload(on_success: (objects: Object3D[]) => void, on_error: (error: string) => void) {\n\t\tthis.load_auto()\n\t\t\t.then((object) => {\n\t\t\t\ton_success(object);\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\ton_error(error);\n\t\t\t});\n\t}\n\n\tprivate load_auto(): Promise<any> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tconst url = this.url; //.includes('?') ? this.url : `${this.url}?${Date.now()}`;\n\n\t\t\tif (this.ext == 'json') {\n\t\t\t\taxios\n\t\t\t\t\t.get(url)\n\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\tconst obj_loader = new ObjectLoader();\n\t\t\t\t\t\tobj_loader.parse(response.data, (obj) => {\n\t\t\t\t\t\t\tresolve(this.on_load_success(obj.children[0]));\n\t\t\t\t\t\t});\n\t\t\t\t\t})\n\t\t\t\t\t.catch((error) => {\n\t\t\t\t\t\treject(error);\n\t\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tconst loader = await this.loader_for_ext();\n\t\t\t\tif (loader) {\n\t\t\t\t\tloader.load(\n\t\t\t\t\t\turl,\n\t\t\t\t\t\t(object: any) => {\n\t\t\t\t\t\t\tconsole.log(object);\n\t\t\t\t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t\t\t\t\tresolve(object2);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t},\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t(error_message: ErrorEvent) => {\n\t\t\t\t\t\t\treject(error_message);\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t\treject(error_message);\n\t\t\t\t}\n\t\t\t\t// CoreLoaderGeometry.loader_for_ext().then((loader) => {\n\t\t\t\t// \tif (loader) {\n\t\t\t\t// \t\tloader.load(\n\t\t\t\t// \t\t\turl,\n\t\t\t\t// \t\t\t(object: Object3D) => {\n\t\t\t\t// \t\t\t\tthis.on_load_success(object).then((object2) => {\n\t\t\t\t// \t\t\t\t\tresolve(object2);\n\t\t\t\t// \t\t\t\t});\n\t\t\t\t// \t\t\t},\n\t\t\t\t// \t\t\tnull,\n\t\t\t\t// \t\t\t(error_message: string) => {\n\t\t\t\t// \t\t\t\treject(error_message);\n\t\t\t\t// \t\t\t}\n\t\t\t\t// \t\t);\n\t\t\t\t// \t} else {\n\t\t\t\t// \t\tconst error_message = `format not supported (${this.ext})`;\n\t\t\t\t// \t\tconsole.warn(error_message);\n\t\t\t\t// \t\treject(error_message);\n\t\t\t\t// \t}\n\t\t\t\t// });\n\t\t\t}\n\t\t});\n\t}\n\n\tprivate async on_load_success(object: Object3D | BufferGeometry | object): Promise<Object3D[]> {\n\t\t// console.log(\"animation?\", object.animations)\n\t\t// if(object.animations){\n\t\t// \tawait CoreScriptLoader.load('/three/js/utils/SkeletonUtils')\n\t\t// }\n\t\tif (object instanceof Object3D) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'gltf':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\tcase 'glb':\n\t\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\t\t// case 'drc':\n\t\t\t\t// \treturn this.on_load_succes_drc(object);\n\t\t\t\tcase 'obj':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tcase 'json':\n\t\t\t\t\treturn [object]; // [object] //.children\n\t\t\t\tdefault:\n\t\t\t\t\treturn [object];\n\t\t\t}\n\t\t}\n\t\tif (object instanceof BufferGeometry) {\n\t\t\tswitch (this.ext) {\n\t\t\t\tcase 'drc':\n\t\t\t\t\treturn this.on_load_succes_drc(object);\n\t\t\t\tdefault:\n\t\t\t\t\treturn [new Mesh(object)];\n\t\t\t}\n\t\t}\n\n\t\t// if it's an object, such as returned by glb\n\t\tswitch (this.ext) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tcase 'glb':\n\t\t\t\treturn this.on_load_succes_gltf(object);\n\t\t\tdefault:\n\t\t\t\treturn [];\n\t\t}\n\t\treturn [];\n\t}\n\n\tprivate on_load_succes_gltf(gltf: any): Object3D[] {\n\t\tconst scene = gltf['scene'];\n\t\tscene.animations = gltf.animations;\n\n\t\tconsole.log('[scene]', [scene]);\n\t\treturn [scene]; //.children\n\t}\n\tprivate on_load_succes_drc(geometry: BufferGeometry): Object3D[] {\n\t\tconst mat = new MeshLambertMaterial();\n\t\tconst mesh = new Mesh(geometry, mat);\n\n\t\treturn [mesh]; //.children\n\t}\n\n\tasync loader_for_ext() {\n\t\tswitch (this.ext.toLowerCase()) {\n\t\t\tcase 'gltf':\n\t\t\t\treturn this.loader_for_gltf();\n\t\t\tcase 'glb':\n\t\t\t\treturn this.loader_for_glb();\n\t\t\tcase 'drc':\n\t\t\t\treturn this.loader_for_drc();\n\t\t\tcase 'obj':\n\t\t\t\treturn this.loader_for_obj();\n\t\t}\n\t}\n\n\tasync loader_for_gltf() {\n\t\t// 'DDSLoader', 'DRACOLoader', 'GLTFLoader'\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\t// const {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\tconst {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\treturn new GLTFLoader();\n\t}\n\tasync loader_for_glb() {\n\t\tconst {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\t\tconst {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\n\t\tconst loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/gltf/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\tloader.setDRACOLoader(draco_loader);\n\n\t\treturn loader;\n\t}\n\tasync loader_for_drc() {\n\t\t// const {DDSLoader} = await import(`modules/three/examples/jsm/loaders/DDSLoader`);\n\t\tconst {DRACOLoader} = await import(`modules/three/examples/jsm/loaders/DRACOLoader`);\n\t\t// const {GLTFLoader} = await import(`modules/three/examples/jsm/loaders/GLTFLoader`);\n\n\t\t// const loader = new GLTFLoader();\n\t\tconst draco_loader = new DRACOLoader();\n\t\tconst decoder_path = '/three/js/libs/draco/';\n\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t\tdraco_loader.setDecoderPath(decoder_path);\n\t\tdraco_loader.setDecoderConfig({type: 'js'});\n\t\t// loader.setDRACOLoader(draco_loader);\n\t\t// console.log('loader', loader);\n\t\treturn draco_loader;\n\t}\n\tasync loader_for_obj() {\n\t\tconst {OBJLoader} = await import(`modules/three/examples/jsm/loaders/OBJLoader`);\n\t\treturn new OBJLoader();\n\t}\n\n\t// \tconst ext_lowercase = this.ext.toLowerCase();\n\t// \tlet script_names = SCRIPT_URLS_BY_EXT[ext_lowercase];\n\t// \tif (script_names) {\n\t// \t\tif (!lodash_isArray(script_names)) {\n\t// \t\t\tscript_names = [script_names];\n\t// \t\t}\n\t// \t\tlet imported_modules = {};\n\t// \t\tlet imported_module;\n\t// \t\tfor (let script_name of script_names) {\n\t// \t\t\timported_module = await CoreScriptLoader.load_module_three_loader(script_name);\n\t// \t\t\timported_modules[script_name] = imported_module;\n\t// \t\t}\n\n\t// \t\tconst loader_class_name = THREE_LOADER_BY_EXT[ext_lowercase];\n\t// \t\tconst loader_class = imported_module[loader_class_name];\n\t// \t\tif (loader_class) {\n\t// \t\t\tconst loader = new loader_class();\n\n\t// \t\t\tif (DRACO_EXTENSIONS.includes(ext_lowercase)) {\n\t// \t\t\t\tconst DRACOLoader = imported_modules.DRACOLoader.DRACOLoader;\n\t// \t\t\t\tconst draco_loader = new DRACOLoader();\n\t// \t\t\t\t// const decoder_path = '/three/js/libs/draco/gltf/'\n\t// \t\t\t\t// DRACOLoader.setDecoderPath( decoder_path );\n\t// \t\t\t\t// draco_loader.setDecoderPath( decoder_path );\n\t// \t\t\t\tloader.setDRACOLoader(draco_loader);\n\t// \t\t\t}\n\n\t// \t\t\treturn loader;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Group} from 'three/src/objects/Group';\nimport {LineBasicMaterial} from 'three/src/materials/LineBasicMaterial';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Loader} from 'three/src/loaders/Loader';\nimport {Material} from 'three/src/materials/Material';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {MeshPhongMaterial} from 'three/src/materials/MeshPhongMaterial';\nimport {NoColors} from 'three/src/constants';\nimport {Points} from 'three/src/objects/Points';\nimport {PointsMaterial} from 'three/src/materials/PointsMaterial';\nimport {VertexColors} from 'three/src/constants';\n/**\n * @author mrdoob / http://mrdoob.com/\n */\n\n\nvar OBJLoader = ( function () {\n\n\t// o object_name | g group_name\n\tvar object_pattern = /^[og]\\s*(.+)?/;\n\t// mtllib file_reference\n\tvar material_library_pattern = /^mtllib /;\n\t// usemtl material_name\n\tvar material_use_pattern = /^usemtl /;\n\t// usemap map_name\n\tvar map_use_pattern = /^usemap /;\n\n\tfunction ParserState() {\n\n\t\tvar state = {\n\t\t\tobjects: [],\n\t\t\tobject: {},\n\n\t\t\tvertices: [],\n\t\t\tnormals: [],\n\t\t\tcolors: [],\n\t\t\tuvs: [],\n\n\t\t\tmaterialLibraries: [],\n\n\t\t\tstartObject: function ( name, fromDeclaration ) {\n\n\t\t\t\t// If the current object (initial from reset) is not from a g/o declaration in the parsed\n\t\t\t\t// file. We need to use it for the first parsed g/o to keep things in sync.\n\t\t\t\tif ( this.object && this.object.fromDeclaration === false ) {\n\n\t\t\t\t\tthis.object.name = name;\n\t\t\t\t\tthis.object.fromDeclaration = ( fromDeclaration !== false );\n\t\t\t\t\treturn;\n\n\t\t\t\t}\n\n\t\t\t\tvar previousMaterial = ( this.object && typeof this.object.currentMaterial === 'function' ? this.object.currentMaterial() : undefined );\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t\tthis.object = {\n\t\t\t\t\tname: name || '',\n\t\t\t\t\tfromDeclaration: ( fromDeclaration !== false ),\n\n\t\t\t\t\tgeometry: {\n\t\t\t\t\t\tvertices: [],\n\t\t\t\t\t\tnormals: [],\n\t\t\t\t\t\tcolors: [],\n\t\t\t\t\t\tuvs: []\n\t\t\t\t\t},\n\t\t\t\t\tmaterials: [],\n\t\t\t\t\tsmooth: true,\n\n\t\t\t\t\tstartMaterial: function ( name, libraries ) {\n\n\t\t\t\t\t\tvar previous = this._finalize( false );\n\n\t\t\t\t\t\t// New usemtl declaration overwrites an inherited material, except if faces were declared\n\t\t\t\t\t\t// after the material, then it must be preserved for proper MultiMaterial continuation.\n\t\t\t\t\t\tif ( previous && ( previous.inherited || previous.groupCount <= 0 ) ) {\n\n\t\t\t\t\t\t\tthis.materials.splice( previous.index, 1 );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar material = {\n\t\t\t\t\t\t\tindex: this.materials.length,\n\t\t\t\t\t\t\tname: name || '',\n\t\t\t\t\t\t\tmtllib: ( Array.isArray( libraries ) && libraries.length > 0 ? libraries[ libraries.length - 1 ] : '' ),\n\t\t\t\t\t\t\tsmooth: ( previous !== undefined ? previous.smooth : this.smooth ),\n\t\t\t\t\t\t\tgroupStart: ( previous !== undefined ? previous.groupEnd : 0 ),\n\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\tinherited: false,\n\n\t\t\t\t\t\t\tclone: function ( index ) {\n\n\t\t\t\t\t\t\t\tvar cloned = {\n\t\t\t\t\t\t\t\t\tindex: ( typeof index === 'number' ? index : this.index ),\n\t\t\t\t\t\t\t\t\tname: this.name,\n\t\t\t\t\t\t\t\t\tmtllib: this.mtllib,\n\t\t\t\t\t\t\t\t\tsmooth: this.smooth,\n\t\t\t\t\t\t\t\t\tgroupStart: 0,\n\t\t\t\t\t\t\t\t\tgroupEnd: - 1,\n\t\t\t\t\t\t\t\t\tgroupCount: - 1,\n\t\t\t\t\t\t\t\t\tinherited: false\n\t\t\t\t\t\t\t\t};\n\t\t\t\t\t\t\t\tcloned.clone = this.clone.bind( cloned );\n\t\t\t\t\t\t\t\treturn cloned;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tthis.materials.push( material );\n\n\t\t\t\t\t\treturn material;\n\n\t\t\t\t\t},\n\n\t\t\t\t\tcurrentMaterial: function () {\n\n\t\t\t\t\t\tif ( this.materials.length > 0 ) {\n\n\t\t\t\t\t\t\treturn this.materials[ this.materials.length - 1 ];\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn undefined;\n\n\t\t\t\t\t},\n\n\t\t\t\t\t_finalize: function ( end ) {\n\n\t\t\t\t\t\tvar lastMultiMaterial = this.currentMaterial();\n\t\t\t\t\t\tif ( lastMultiMaterial && lastMultiMaterial.groupEnd === - 1 ) {\n\n\t\t\t\t\t\t\tlastMultiMaterial.groupEnd = this.geometry.vertices.length / 3;\n\t\t\t\t\t\t\tlastMultiMaterial.groupCount = lastMultiMaterial.groupEnd - lastMultiMaterial.groupStart;\n\t\t\t\t\t\t\tlastMultiMaterial.inherited = false;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ignore objects tail materials if no face declarations followed them before a new o/g started.\n\t\t\t\t\t\tif ( end && this.materials.length > 1 ) {\n\n\t\t\t\t\t\t\tfor ( var mi = this.materials.length - 1; mi >= 0; mi -- ) {\n\n\t\t\t\t\t\t\t\tif ( this.materials[ mi ].groupCount <= 0 ) {\n\n\t\t\t\t\t\t\t\t\tthis.materials.splice( mi, 1 );\n\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Guarantee at least one empty material, this makes the creation later more straight forward.\n\t\t\t\t\t\tif ( end && this.materials.length === 0 ) {\n\n\t\t\t\t\t\t\tthis.materials.push( {\n\t\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\t\tsmooth: this.smooth\n\t\t\t\t\t\t\t} );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn lastMultiMaterial;\n\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Inherit previous objects material.\n\t\t\t\t// Spec tells us that a declared material must be set to all objects until a new material is declared.\n\t\t\t\t// If a usemtl declaration is encountered while this new object is being parsed, it will\n\t\t\t\t// overwrite the inherited material. Exception being that there was already face declarations\n\t\t\t\t// to the inherited material, then it will be preserved for proper MultiMaterial continuation.\n\n\t\t\t\tif ( previousMaterial && previousMaterial.name && typeof previousMaterial.clone === 'function' ) {\n\n\t\t\t\t\tvar declared = previousMaterial.clone( 0 );\n\t\t\t\t\tdeclared.inherited = true;\n\t\t\t\t\tthis.object.materials.push( declared );\n\n\t\t\t\t}\n\n\t\t\t\tthis.objects.push( this.object );\n\n\t\t\t},\n\n\t\t\tfinalize: function () {\n\n\t\t\t\tif ( this.object && typeof this.object._finalize === 'function' ) {\n\n\t\t\t\t\tthis.object._finalize( true );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\tparseVertexIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseNormalIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 3 ) * 3;\n\n\t\t\t},\n\n\t\t\tparseUVIndex: function ( value, len ) {\n\n\t\t\t\tvar index = parseInt( value, 10 );\n\t\t\t\treturn ( index >= 0 ? index - 1 : index + len / 2 ) * 2;\n\n\t\t\t},\n\n\t\t\taddVertex: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexPoint: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddVertexLine: function ( a ) {\n\n\t\t\t\tvar src = this.vertices;\n\t\t\t\tvar dst = this.object.geometry.vertices;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\n\t\t\t},\n\n\t\t\taddNormal: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.normals;\n\t\t\t\tvar dst = this.object.geometry.normals;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddColor: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.colors;\n\t\t\t\tvar dst = this.object.geometry.colors;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ], src[ a + 2 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ], src[ b + 2 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ], src[ c + 2 ] );\n\n\t\t\t},\n\n\t\t\taddUV: function ( a, b, c ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\t\t\t\tdst.push( src[ b + 0 ], src[ b + 1 ] );\n\t\t\t\tdst.push( src[ c + 0 ], src[ c + 1 ] );\n\n\t\t\t},\n\n\t\t\taddUVLine: function ( a ) {\n\n\t\t\t\tvar src = this.uvs;\n\t\t\t\tvar dst = this.object.geometry.uvs;\n\n\t\t\t\tdst.push( src[ a + 0 ], src[ a + 1 ] );\n\n\t\t\t},\n\n\t\t\taddFace: function ( a, b, c, ua, ub, uc, na, nb, nc ) {\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tvar ia = this.parseVertexIndex( a, vLen );\n\t\t\t\tvar ib = this.parseVertexIndex( b, vLen );\n\t\t\t\tvar ic = this.parseVertexIndex( c, vLen );\n\n\t\t\t\tthis.addVertex( ia, ib, ic );\n\n\t\t\t\tif ( this.colors.length > 0 ) {\n\n\t\t\t\t\tthis.addColor( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( ua !== undefined && ua !== '' ) {\n\n\t\t\t\t\tvar uvLen = this.uvs.length;\n\t\t\t\t\tia = this.parseUVIndex( ua, uvLen );\n\t\t\t\t\tib = this.parseUVIndex( ub, uvLen );\n\t\t\t\t\tic = this.parseUVIndex( uc, uvLen );\n\t\t\t\t\tthis.addUV( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t\tif ( na !== undefined && na !== '' ) {\n\n\t\t\t\t\t// Normals are many times the same. If so, skip function call and parseInt.\n\t\t\t\t\tvar nLen = this.normals.length;\n\t\t\t\t\tia = this.parseNormalIndex( na, nLen );\n\n\t\t\t\t\tib = na === nb ? ia : this.parseNormalIndex( nb, nLen );\n\t\t\t\t\tic = na === nc ? ia : this.parseNormalIndex( nc, nLen );\n\n\t\t\t\t\tthis.addNormal( ia, ib, ic );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddPointGeometry: function ( vertices ) {\n\n\t\t\t\tthis.object.geometry.type = 'Points';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexPoint( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t},\n\n\t\t\taddLineGeometry: function ( vertices, uvs ) {\n\n\t\t\t\tthis.object.geometry.type = 'Line';\n\n\t\t\t\tvar vLen = this.vertices.length;\n\t\t\t\tvar uvLen = this.uvs.length;\n\n\t\t\t\tfor ( var vi = 0, l = vertices.length; vi < l; vi ++ ) {\n\n\t\t\t\t\tthis.addVertexLine( this.parseVertexIndex( vertices[ vi ], vLen ) );\n\n\t\t\t\t}\n\n\t\t\t\tfor ( var uvi = 0, l = uvs.length; uvi < l; uvi ++ ) {\n\n\t\t\t\t\tthis.addUVLine( this.parseUVIndex( uvs[ uvi ], uvLen ) );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t};\n\n\t\tstate.startObject( '', false );\n\n\t\treturn state;\n\n\t}\n\n\t//\n\n\tfunction OBJLoader( manager ) {\n\n\t\tLoader.call( this, manager );\n\n\t\tthis.materials = null;\n\n\t}\n\n\tOBJLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\t\tconstructor: OBJLoader,\n\n\t\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\t\tvar scope = this;\n\n\t\t\tvar loader = new FileLoader( scope.manager );\n\t\t\tloader.setPath( this.path );\n\t\t\tloader.load( url, function ( text ) {\n\n\t\t\t\tonLoad( scope.parse( text ) );\n\n\t\t\t}, onProgress, onError );\n\n\t\t},\n\n\t\tsetMaterials: function ( materials ) {\n\n\t\t\tthis.materials = materials;\n\n\t\t\treturn this;\n\n\t\t},\n\n\t\tparse: function ( text ) {\n\n\t\t\tconsole.time( 'OBJLoader' );\n\n\t\t\tvar state = new ParserState();\n\n\t\t\tif ( text.indexOf( '\\r\\n' ) !== - 1 ) {\n\n\t\t\t\t// This is faster than String.split with regex that splits on both\n\t\t\t\ttext = text.replace( /\\r\\n/g, '\\n' );\n\n\t\t\t}\n\n\t\t\tif ( text.indexOf( '\\\\\\n' ) !== - 1 ) {\n\n\t\t\t\t// join lines separated by a line continuation character (\\)\n\t\t\t\ttext = text.replace( /\\\\\\n/g, '' );\n\n\t\t\t}\n\n\t\t\tvar lines = text.split( '\\n' );\n\t\t\tvar line = '', lineFirstChar = '';\n\t\t\tvar lineLength = 0;\n\t\t\tvar result = [];\n\n\t\t\t// Faster to just trim left side of the line. Use if available.\n\t\t\tvar trimLeft = ( typeof ''.trimLeft === 'function' );\n\n\t\t\tfor ( var i = 0, l = lines.length; i < l; i ++ ) {\n\n\t\t\t\tline = lines[ i ];\n\n\t\t\t\tline = trimLeft ? line.trimLeft() : line.trim();\n\n\t\t\t\tlineLength = line.length;\n\n\t\t\t\tif ( lineLength === 0 ) continue;\n\n\t\t\t\tlineFirstChar = line.charAt( 0 );\n\n\t\t\t\t// @todo invoke passed in handler if any\n\t\t\t\tif ( lineFirstChar === '#' ) continue;\n\n\t\t\t\tif ( lineFirstChar === 'v' ) {\n\n\t\t\t\t\tvar data = line.split( /\\s+/ );\n\n\t\t\t\t\tswitch ( data[ 0 ] ) {\n\n\t\t\t\t\t\tcase 'v':\n\t\t\t\t\t\t\tstate.vertices.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tif ( data.length >= 7 ) {\n\n\t\t\t\t\t\t\t\tstate.colors.push(\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 4 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 5 ] ),\n\t\t\t\t\t\t\t\t\tparseFloat( data[ 6 ] )\n\n\t\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vn':\n\t\t\t\t\t\t\tstate.normals.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 3 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'vt':\n\t\t\t\t\t\t\tstate.uvs.push(\n\t\t\t\t\t\t\t\tparseFloat( data[ 1 ] ),\n\t\t\t\t\t\t\t\tparseFloat( data[ 2 ] )\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'f' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar vertexData = lineData.split( /\\s+/ );\n\t\t\t\t\tvar faceVertices = [];\n\n\t\t\t\t\t// Parse the face vertex data into an easy to work with format\n\n\t\t\t\t\tfor ( var j = 0, jl = vertexData.length; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar vertex = vertexData[ j ];\n\n\t\t\t\t\t\tif ( vertex.length > 0 ) {\n\n\t\t\t\t\t\t\tvar vertexParts = vertex.split( '/' );\n\t\t\t\t\t\t\tfaceVertices.push( vertexParts );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// Draw an edge between the first vertex and all subsequent vertices to form an n-gon\n\n\t\t\t\t\tvar v1 = faceVertices[ 0 ];\n\n\t\t\t\t\tfor ( var j = 1, jl = faceVertices.length - 1; j < jl; j ++ ) {\n\n\t\t\t\t\t\tvar v2 = faceVertices[ j ];\n\t\t\t\t\t\tvar v3 = faceVertices[ j + 1 ];\n\n\t\t\t\t\t\tstate.addFace(\n\t\t\t\t\t\t\tv1[ 0 ], v2[ 0 ], v3[ 0 ],\n\t\t\t\t\t\t\tv1[ 1 ], v2[ 1 ], v3[ 1 ],\n\t\t\t\t\t\t\tv1[ 2 ], v2[ 2 ], v3[ 2 ]\n\t\t\t\t\t\t);\n\n\t\t\t\t\t}\n\n\t\t\t\t} else if ( lineFirstChar === 'l' ) {\n\n\t\t\t\t\tvar lineParts = line.substring( 1 ).trim().split( \" \" );\n\t\t\t\t\tvar lineVertices = [], lineUVs = [];\n\n\t\t\t\t\tif ( line.indexOf( \"/\" ) === - 1 ) {\n\n\t\t\t\t\t\tlineVertices = lineParts;\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tfor ( var li = 0, llen = lineParts.length; li < llen; li ++ ) {\n\n\t\t\t\t\t\t\tvar parts = lineParts[ li ].split( \"/\" );\n\n\t\t\t\t\t\t\tif ( parts[ 0 ] !== \"\" ) lineVertices.push( parts[ 0 ] );\n\t\t\t\t\t\t\tif ( parts[ 1 ] !== \"\" ) lineUVs.push( parts[ 1 ] );\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\t\t\t\t\tstate.addLineGeometry( lineVertices, lineUVs );\n\n\t\t\t\t} else if ( lineFirstChar === 'p' ) {\n\n\t\t\t\t\tvar lineData = line.substr( 1 ).trim();\n\t\t\t\t\tvar pointData = lineData.split( \" \" );\n\n\t\t\t\t\tstate.addPointGeometry( pointData );\n\n\t\t\t\t} else if ( ( result = object_pattern.exec( line ) ) !== null ) {\n\n\t\t\t\t\t// o object_name\n\t\t\t\t\t// or\n\t\t\t\t\t// g group_name\n\n\t\t\t\t\t// WORKAROUND: https://bugs.chromium.org/p/v8/issues/detail?id=2869\n\t\t\t\t\t// var name = result[ 0 ].substr( 1 ).trim();\n\t\t\t\t\tvar name = ( \" \" + result[ 0 ].substr( 1 ).trim() ).substr( 1 );\n\n\t\t\t\t\tstate.startObject( name );\n\n\t\t\t\t} else if ( material_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// material\n\n\t\t\t\t\tstate.object.startMaterial( line.substring( 7 ).trim(), state.materialLibraries );\n\n\t\t\t\t} else if ( material_library_pattern.test( line ) ) {\n\n\t\t\t\t\t// mtl file\n\n\t\t\t\t\tstate.materialLibraries.push( line.substring( 7 ).trim() );\n\n\t\t\t\t} else if ( map_use_pattern.test( line ) ) {\n\n\t\t\t\t\t// the line is parsed but ignored since the loader assumes textures are defined MTL files\n\t\t\t\t\t// (according to https://www.okino.com/conv/imp_wave.htm, 'usemap' is the old-style Wavefront texture reference method)\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Rendering identifier \"usemap\" not supported. Textures must be defined in MTL files.' );\n\n\t\t\t\t} else if ( lineFirstChar === 's' ) {\n\n\t\t\t\t\tresult = line.split( ' ' );\n\n\t\t\t\t\t// smooth shading\n\n\t\t\t\t\t// @todo Handle files that have varying smooth values for a set of faces inside one geometry,\n\t\t\t\t\t// but does not define a usemtl for each face set.\n\t\t\t\t\t// This should be detected and a dummy material created (later MultiMaterial and geometry groups).\n\t\t\t\t\t// This requires some care to not create extra material on each smooth value for \"normal\" obj files.\n\t\t\t\t\t// where explicit usemtl defines geometry groups.\n\t\t\t\t\t// Example asset: examples/models/obj/cerberus/Cerberus.obj\n\n\t\t\t\t\t/*\n\t\t\t\t\t * http://paulbourke.net/dataformats/obj/\n\t\t\t\t\t * or\n\t\t\t\t\t * http://www.cs.utah.edu/~boulos/cs3505/obj_spec.pdf\n\t\t\t\t\t *\n\t\t\t\t\t * From chapter \"Grouping\" Syntax explanation \"s group_number\":\n\t\t\t\t\t * \"group_number is the smoothing group number. To turn off smoothing groups, use a value of 0 or off.\n\t\t\t\t\t * Polygonal elements use group numbers to put elements in different smoothing groups. For free-form\n\t\t\t\t\t * surfaces, smoothing groups are either turned on or off; there is no difference between values greater\n\t\t\t\t\t * than 0.\"\n\t\t\t\t\t */\n\t\t\t\t\tif ( result.length > 1 ) {\n\n\t\t\t\t\t\tvar value = result[ 1 ].trim().toLowerCase();\n\t\t\t\t\t\tstate.object.smooth = ( value !== '0' && value !== 'off' );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\t// ZBrush can produce \"s\" lines #11707\n\t\t\t\t\t\tstate.object.smooth = true;\n\n\t\t\t\t\t}\n\t\t\t\t\tvar material = state.object.currentMaterial();\n\t\t\t\t\tif ( material ) material.smooth = state.object.smooth;\n\n\t\t\t\t} else {\n\n\t\t\t\t\t// Handle null terminated files without exception\n\t\t\t\t\tif ( line === '\\0' ) continue;\n\n\t\t\t\t\tconsole.warn( 'THREE.OBJLoader: Unexpected line: \"' + line + '\"' );\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tstate.finalize();\n\n\t\t\tvar container = new Group();\n\t\t\tcontainer.materialLibraries = [].concat( state.materialLibraries );\n\n\t\t\tfor ( var i = 0, l = state.objects.length; i < l; i ++ ) {\n\n\t\t\t\tvar object = state.objects[ i ];\n\t\t\t\tvar geometry = object.geometry;\n\t\t\t\tvar materials = object.materials;\n\t\t\t\tvar isLine = ( geometry.type === 'Line' );\n\t\t\t\tvar isPoints = ( geometry.type === 'Points' );\n\t\t\t\tvar hasVertexColors = false;\n\n\t\t\t\t// Skip o/g line declarations that did not follow with any faces\n\t\t\t\tif ( geometry.vertices.length === 0 ) continue;\n\n\t\t\t\tvar buffergeometry = new BufferGeometry();\n\n\t\t\t\tbuffergeometry.setAttribute( 'position', new Float32BufferAttribute( geometry.vertices, 3 ) );\n\n\t\t\t\tif ( geometry.normals.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'normal', new Float32BufferAttribute( geometry.normals, 3 ) );\n\n\t\t\t\t} else {\n\n\t\t\t\t\tbuffergeometry.computeVertexNormals();\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.colors.length > 0 ) {\n\n\t\t\t\t\thasVertexColors = true;\n\t\t\t\t\tbuffergeometry.setAttribute( 'color', new Float32BufferAttribute( geometry.colors, 3 ) );\n\n\t\t\t\t}\n\n\t\t\t\tif ( geometry.uvs.length > 0 ) {\n\n\t\t\t\t\tbuffergeometry.setAttribute( 'uv', new Float32BufferAttribute( geometry.uvs, 2 ) );\n\n\t\t\t\t}\n\n\t\t\t\t// Create materials\n\n\t\t\t\tvar createdMaterials = [];\n\n\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\tvar material = undefined;\n\n\t\t\t\t\tif ( this.materials !== null ) {\n\n\t\t\t\t\t\tmaterial = this.materials.create( sourceMaterial.name );\n\n\t\t\t\t\t\t// mtl etc. loaders probably can't create line materials correctly, copy properties to a line material.\n\t\t\t\t\t\tif ( isLine && material && ! ( material instanceof LineBasicMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialLine = new LineBasicMaterial();\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialLine, material );\n\t\t\t\t\t\t\tmaterialLine.color.copy( material.color );\n\t\t\t\t\t\t\tmaterial = materialLine;\n\n\t\t\t\t\t\t} else if ( isPoints && material && ! ( material instanceof PointsMaterial ) ) {\n\n\t\t\t\t\t\t\tvar materialPoints = new PointsMaterial( { size: 10, sizeAttenuation: false } );\n\t\t\t\t\t\t\tMaterial.prototype.copy.call( materialPoints, material );\n\t\t\t\t\t\t\tmaterialPoints.color.copy( material.color );\n\t\t\t\t\t\t\tmaterialPoints.map = material.map;\n\t\t\t\t\t\t\tmaterial = materialPoints;\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! material ) {\n\n\t\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\t\tmaterial = new LineBasicMaterial();\n\n\t\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\t\tmaterial = new PointsMaterial( { size: 1, sizeAttenuation: false } );\n\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\tmaterial = new MeshPhongMaterial();\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tmaterial.name = sourceMaterial.name;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tmaterial.flatShading = sourceMaterial.smooth ? false : true;\n\t\t\t\t\tmaterial.vertexColors = hasVertexColors ? VertexColors : NoColors;\n\n\t\t\t\t\tcreatedMaterials.push( material );\n\n\t\t\t\t}\n\n\t\t\t\t// Create mesh\n\n\t\t\t\tvar mesh;\n\n\t\t\t\tif ( createdMaterials.length > 1 ) {\n\n\t\t\t\t\tfor ( var mi = 0, miLen = materials.length; mi < miLen; mi ++ ) {\n\n\t\t\t\t\t\tvar sourceMaterial = materials[ mi ];\n\t\t\t\t\t\tbuffergeometry.addGroup( sourceMaterial.groupStart, sourceMaterial.groupCount, mi );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials );\n\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tif ( isLine ) {\n\n\t\t\t\t\t\tmesh = new LineSegments( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else if ( isPoints ) {\n\n\t\t\t\t\t\tmesh = new Points( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t} else {\n\n\t\t\t\t\t\tmesh = new Mesh( buffergeometry, createdMaterials[ 0 ] );\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tmesh.name = object.name;\n\n\t\t\t\tcontainer.add( mesh );\n\n\t\t\t}\n\n\t\t\tconsole.timeEnd( 'OBJLoader' );\n\n\t\t\treturn container;\n\n\t\t}\n\n\t} );\n\n\treturn OBJLoader;\n\n} )();\n\nexport { OBJLoader };\n","import {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {ObjectType} from 'src/core/geometry/Constant';\nclass FuseSopParamsConfig extends NodeParamsConfig {\n\tdist = ParamConfig.FLOAT(0.1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new FuseSopParamsConfig();\n\nexport class FuseSopNode extends TypedSopNode<FuseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'fuse';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to fuse together'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tconst new_objects = [];\n\t\tlet new_object;\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tnew_object = this._fuse_core_object(core_object);\n\t\t\tif (new_object) {\n\t\t\t\tnew_objects.push(new_object);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(new_objects);\n\t}\n\n\tprivate _fuse_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tif (!object) {\n\t\t\treturn;\n\t\t}\n\t\tconst points = core_object.points();\n\n\t\tconst precision = this.pv.dist;\n\t\tconst points_by_position: Dictionary<CorePoint[]> = {};\n\t\tfor (let point of points) {\n\t\t\tconst position = point.position();\n\t\t\tconst rounded_position = new Vector3(\n\t\t\t\tMath.round(position.x / precision),\n\t\t\t\tMath.round(position.y / precision),\n\t\t\t\tMath.round(position.z / precision)\n\t\t\t);\n\t\t\tconst key = rounded_position.toArray().join('-');\n\t\t\tpoints_by_position[key] = points_by_position[key] || [];\n\t\t\tpoints_by_position[key].push(point);\n\t\t}\n\n\t\tconst kept_points: CorePoint[] = [];\n\t\tObject.keys(points_by_position).forEach((key) => {\n\t\t\tkept_points.push(points_by_position[key][0]);\n\t\t});\n\n\t\t(object as Mesh).geometry.dispose();\n\t\tif (kept_points.length > 0) {\n\t\t\t(object as Mesh).geometry = CoreGeometry.geometry_from_points(\n\t\t\t\tkept_points,\n\t\t\t\t(<unknown>object.constructor) as ObjectType\n\t\t\t);\n\t\t\treturn object;\n\t\t} else {\n\t\t\t// if(object.material){ object.material.dispose() }\n\t\t\t// if(object.parent){ object.parent.remove(object) }\n\t\t}\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from 'src/core/Transform';\nimport {CoreConstant} from 'src/core/geometry/Constant';\n\nimport {CoreGeometryOperationHexagon} from 'src/core/geometry/operation/Hexagon';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass HexagonsSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\thexagon_radius = ParamConfig.FLOAT(0.1);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tpoints_only = ParamConfig.BOOLEAN(0);\n\t// no need to have centers, as all points are centers anyway\n\t//this.add_param( ParamType.TOGGLE, 'centers_only', 0, {visible_if: {points_only: 1}})\n}\nconst ParamsConfig = new HexagonsSopParamsConfig();\n\nexport class HexagonsSopNode extends TypedSopNode<HexagonsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hexagons';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst operation = new CoreGeometryOperationHexagon(this.pv.size, this.pv.hexagon_radius, this.pv.points_only);\n\t\tconst geometry = operation.process();\n\t\tconsole.log(geometry, geometry.attributes.position);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tif (this.pv.points_only) {\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t\t} else {\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n}\n","import {Vector2} from 'three/src/math/Vector2'\nimport {BufferGeometry} from 'three/src/core/BufferGeometry'\nimport {BufferAttribute} from 'three/src/core/BufferAttribute'\nconst THREE = {BufferAttribute, BufferGeometry, Vector2}\nimport lodash_flatten from 'lodash/flatten'\n// import {CoreGeometry} from '../Geometry';\n\nexport class CoreGeometryOperationHexagon {\n\tconstructor(\n\t\tprivate _param_size: THREE.Vector2,\n\t\tprivate _param_hexagon_radius: number,\n\t\tprivate _param_points_only: boolean\n\t) {}\n\n\tprocess(): THREE.BufferGeometry {\n\t\tconst side_length = this._param_hexagon_radius\n\t\tconst half_side_length = side_length * 0.5\n\t\tconst step_size = {\n\t\t\tx: side_length,\n\t\t\ty: Math.cos(Math.PI / 6) * this._param_hexagon_radius,\n\t\t}\n\t\tconst steps_count = {\n\t\t\tx: Math.floor(this._param_size.x / step_size.x),\n\t\t\ty: Math.floor(this._param_size.y / step_size.y),\n\t\t}\n\t\tlet positions = []\n\t\tlet indices = []\n\t\tfor (let y = 0; y < steps_count.y; y++) {\n\t\t\tfor (let x = 0; x < steps_count.x; x++) {\n\t\t\t\tpositions.push([\n\t\t\t\t\t-(this._param_size.x * 0.5) +\n\t\t\t\t\t\tx * step_size.x +\n\t\t\t\t\t\t(y % 2 == 0 ? half_side_length : 0),\n\t\t\t\t\t0,\n\t\t\t\t\t-(this._param_size.y * 0.5) + y * step_size.y,\n\t\t\t\t])\n\n\t\t\t\tif (!this._param_points_only) {\n\t\t\t\t\tif (y >= 1) {\n\t\t\t\t\t\tif (x == 0 || x == steps_count.x - 1) {\n\t\t\t\t\t\t\tif (x == 0) {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx - 1 + y * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\tindices.push([\n\t\t\t\t\t\t\t\tx + y * steps_count.x,\n\t\t\t\t\t\t\t\tx + 1 + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t\tx + (y - 1) * steps_count.x,\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tpositions = lodash_flatten(positions)\n\n\t\tconst geometry = new THREE.BufferGeometry()\n\t\tgeometry.setAttribute(\n\t\t\t'position',\n\t\t\tnew THREE.BufferAttribute(new Float32Array(positions), 3)\n\t\t)\n\n\t\tif (!this._param_points_only) {\n\t\t\tindices = lodash_flatten(indices)\n\t\t\tgeometry.setIndex(indices)\n\t\t\tgeometry.computeVertexNormals()\n\t\t}\n\n\t\treturn geometry\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\nimport {Group} from 'three/src/objects/Group';\nconst THREE = {Group, Object3D};\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\n// import {CoreGroup} from 'src/Core/Geometry/Group';\n// import {CoreConstant} from 'src/Core/Geometry/Constant'\n\nexport enum HierarchyMode {\n\tADD_PARENT = 'add_parent',\n\tREMOVE_PARENT = 'remove_parent',\n}\nexport const HIERARCHY_MODES: Array<HierarchyMode> = [HierarchyMode.ADD_PARENT, HierarchyMode.REMOVE_PARENT];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass HierarchySopParamsConfig extends NodeParamsConfig {\n\tmode = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: HIERARCHY_MODES.map((m, i) => {\n\t\t\t\treturn {name: m, value: i};\n\t\t\t}),\n\t\t},\n\t});\n\tlevels = ParamConfig.INTEGER(1, {range: [0, 5]});\n}\nconst ParamsConfig = new HierarchySopParamsConfig();\n\nexport class HierarchySopNode extends TypedSopNode<HierarchySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'hierarchy';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add or remove parents to/from'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\t// const group_wrapper = new CoreGroup(group);\n\n\t\tif (HIERARCHY_MODES[this.pv.mode] == HierarchyMode.ADD_PARENT) {\n\t\t\tconst objects = this._add_parent_to_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t} else {\n\t\t\tconst objects = this._remove_parent_from_core_group(core_group);\n\t\t\tthis.set_objects(objects);\n\t\t}\n\t}\n\n\tprivate _add_parent_to_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tlet new_object;\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tnew_object = this._add_parent_to_object(object);\n\t\t\t\tif (new_object) {\n\t\t\t\t\tnew_objects.push(new_object);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\tprivate _add_parent_to_object(object: THREE.Object3D): THREE.Object3D {\n\t\tlet new_parent = new THREE.Group();\n\n\t\t// while(child = object.children[0]){\n\t\tnew_parent.add(object);\n\t\t// }\n\n\t\tif (this.pv.levels > 0) {\n\t\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\t\t// for (let i of lodash_range(this.pv.levels - 1)) {\n\t\t\t\tnew_parent = this._add_new_parent(new_parent);\n\t\t\t}\n\t\t}\n\n\t\treturn new_parent;\n\t}\n\n\tprivate _add_new_parent(object: THREE.Object3D): THREE.Group {\n\t\tconst new_parent2 = new THREE.Group();\n\t\tnew_parent2.add(object);\n\t\treturn new_parent2;\n\t}\n\n\tprivate _remove_parent_from_core_group(core_group: CoreGroup): THREE.Object3D[] {\n\t\tif (this.pv.levels == 0) {\n\t\t\treturn core_group.objects();\n\t\t} else {\n\t\t\tconst new_objects: Object3D[] = [];\n\t\t\tfor (let object of core_group.objects()) {\n\t\t\t\tconst new_children = this._remove_parent_from_object(object);\n\t\t\t\tfor (let new_child of new_children) {\n\t\t\t\t\tnew_objects.push(new_child);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn new_objects;\n\t\t}\n\t}\n\n\tprivate _remove_parent_from_object(object: THREE.Object3D): THREE.Object3D[] {\n\t\tlet current_children = object.children;\n\n\t\tfor (let i = 0; i < this.pv.levels - 1; i++) {\n\t\t\tcurrent_children = this._get_children_from_objects(current_children);\n\t\t}\n\n\t\treturn current_children;\n\t}\n\n\tprivate _get_children_from_objects(objects: THREE.Object3D[]): THREE.Object3D[] {\n\t\tlet object;\n\t\tconst children: Object3D[] = [];\n\t\twhile ((object = objects.pop())) {\n\t\t\tif (object.children) {\n\t\t\t\tfor (let child of object.children) {\n\t\t\t\t\tchildren.push(child);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn children;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nconst THREE = {Vector3};\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreMath} from 'src/core/math/_Module';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass JitterSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tseed = ParamConfig.INTEGER(1, {range: [0, 100]});\n}\nconst ParamsConfig = new JitterSopParamsConfig();\n\nexport class JitterSopNode extends TypedSopNode<JitterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'jitter';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to jitter points of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tcore_group.points().forEach((point, i) => {\n\t\t\t// TODO: replace by a pseudo random\n\t\t\tconst offset = new THREE.Vector3(\n\t\t\t\t2 * (CoreMath.rand(i * 75 + 764 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 5678 + 3653 + this.pv.seed) - 0.5),\n\t\t\t\t2 * (CoreMath.rand(i * 657 + 48464 + this.pv.seed) - 0.5)\n\t\t\t);\n\t\t\toffset.normalize();\n\t\t\toffset.multiplyScalar(this.pv.amount);\n\n\t\t\tconst new_position = point\n\t\t\t\t.position()\n\t\t\t\t.clone()\n\t\t\t\t.add(offset);\n\t\t\tpoint.set_position(new_position);\n\t\t});\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nclass LayerSopParamsConfig extends NodeParamsConfig {\n\tlayer = ParamConfig.INTEGER(0, {\n\t\trange: [0, 31],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new LayerSopParamsConfig();\n\nexport class LayerSopNode extends TypedSopNode<LayerSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'layer';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change layers of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.layers.set(this.pv.layer);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport lodash_times from 'lodash/times';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from 'src/core/geometry/Constant';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass LineSopParamsConfig extends NodeParamsConfig {\n\tlength = ParamConfig.FLOAT(1, {range: [0, 10]});\n\tpoints_count = ParamConfig.INTEGER(1, {\n\t\trange: [2, 100],\n\t\trange_locked: [true, false],\n\t});\n\torigin = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n}\nconst ParamsConfig = new LineSopParamsConfig();\n\nexport class LineSopNode extends TypedSopNode<LineSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'line';\n\t}\n\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst points_count = Math.max(2, this.pv.points_count);\n\n\t\tconst positions: number[] = new Array(points_count * 3);\n\t\tconst indices: number[] = new Array(points_count);\n\n\t\tconst last_pt = this.pv.direction\n\t\t\t.clone()\n\t\t\t.normalize()\n\t\t\t.multiplyScalar(this.pv.length);\n\n\t\tlodash_times(points_count, (i) => {\n\t\t\tconst i_n = i / (points_count - 1);\n\t\t\tconst point = last_pt.clone().multiplyScalar(i_n);\n\t\t\tpoint.add(this.pv.origin);\n\t\t\tpoint.toArray(positions, i * 3);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices[(i - 1) * 2] = i - 1;\n\t\t\t\tindices[(i - 1) * 2 + 1] = i;\n\t\t\t}\n\t\t});\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {BaseNodeMat} from '../Mat/_Base'\n\nimport {CoreMaterial} from 'src/core/geometry/Material';\nimport {GlobalsGeometryHandler} from 'src/engine/nodes/gl/code/globals/Geometry';\n\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {BaseMatNodeType} from '../mat/_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {Material} from 'three/src/materials/Material';\nimport {Object3D} from 'three/src/core/Object3D';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {BaseBuilderMatNodeType} from '../mat/_BaseBuilder';\nclass MaterialSopParamsConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\tmaterial = ParamConfig.OPERATOR_PATH('/MAT/mesh_standard1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.MAT,\n\t\t},\n\t\tdependent_on_found_node: false,\n\t});\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new MaterialSopParamsConfig();\n\nexport class MaterialSopNode extends TypedSopNode<MaterialSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'material';\n\t}\n\n\t_param_material: BaseMatNodeType | undefined;\n\t_globals_handler: GlobalsGeometryHandler = new GlobalsGeometryHandler();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to assign material to'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\t// TODO: optimize by not fetching the material node everytime\n\t// and maybe have a method in all operator_path params to do that quickly\n\t// TODO: does this apply the material to only 1 node?\n\tasync cook(core_groups: CoreGroup[]) {\n\t\t// let container = input_containers[0];\n\t\t// const group =\tcontainer.group(); // {clone: this.do_clone_inputs()})\n\t\tconst core_group = core_groups[0];\n\n\t\tconst node = this.p.material.found_node();\n\t\tif (node) {\n\t\t\tif (node.node_context() != NodeContext.MAT) {\n\t\t\t\tthis.states.error.set('node is not a material');\n\t\t\t} else {\n\t\t\t\tconst material_node = node as BaseMatNodeType;\n\t\t\t\tconst material = material_node.material;\n\t\t\t\tif (material instanceof ShaderMaterial) {\n\t\t\t\t\tconst material_builder_node = node as BaseBuilderMatNodeType;\n\t\t\t\t\tmaterial_builder_node.assembler_controller.set_assembler_globals_handler(this._globals_handler);\n\t\t\t\t}\n\n\t\t\t\tawait material_node.request_container();\n\t\t\t\tif (material) {\n\t\t\t\t\tfor (let object of core_group.objects_from_group(this.pv.group)) {\n\t\t\t\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\t\t\t\tobject.traverse((grand_child) => {\n\t\t\t\t\t\t\t\tthis.apply_material(grand_child, material);\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.apply_material(object, material);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tthis.set_core_group(core_group);\n\t\t\t\t} else {\n\t\t\t\t\tthis.states.error.set(`material invalid. (error: '${material_node.states.error.message}')`);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node '${this.pv.material}' not found`);\n\t\t}\n\t}\n\n\tapply_material(object: Object3D, material: Material) {\n\t\tconst object_with_material = object as Mesh;\n\t\t// if (object.material != null) {\n\t\t// \tobject.material.dispose();\n\t\t// }\n\t\t// TODO: do I really need to clone this material?\n\t\t// does it get cloned when a node fetches the container?\n\t\t// I may only need to clone it for the copy SOP\n\t\tobject_with_material.material = material;\n\t\tCoreMaterial.apply_custom_materials(object, material);\n\t}\n}\n","// import lodash_times from 'lodash/times';\n// import lodash_each from 'lodash/each';\n// import lodash_difference from 'lodash/difference';\n// import lodash_keys from 'lodash/keys';\n// import {Object3D} from 'three/src/core/Object3D';\n// import {Group} from 'three/src/objects/Group';\n// import {BufferAttribute} from 'three/src/core/BufferAttribute';\n// const THREE = {BufferAttribute, Group, Object3D};\nimport {TypedSopNode} from './_Base';\n// import {ParamType} from 'src/Engine/Param/_Module';\n\n// import {CoreGroup} from 'src/Core/Geometry/Group';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {CoreGroup, Object3DWithGeometry} from 'src/core/geometry/Group';\nimport {Object3D} from 'three/src/core/Object3D';\n// import {CoreConstant} from 'src/Core/Geometry/Constant';\nimport {ObjectType} from 'src/core/geometry/Constant';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport {Points} from 'three/src/objects/Points';\ntype ObjectsByType = {[key in ObjectType]: Object3DWithGeometry[]};\ntype ObjectTypes = Array<ObjectType>;\n\nconst INPUT_NAME = 'geometry to merge';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass MergeSopParamsConfig extends NodeParamsConfig {\n\tcompact = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new MergeSopParamsConfig();\n\nexport class MergeSopNode extends TypedSopNode<MergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'merge';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 4);\n\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('compress-arrows-alt');\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tlet all_objects: Object3DWithGeometry[] = []; //new Group()\n\t\tfor (let input_core_group of input_contents) {\n\t\t\tif (input_core_group) {\n\t\t\t\tconst objects = input_core_group.objects();\n\t\t\t\tfor (let object of objects) {\n\t\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\t\tall_objects.push(child as Object3DWithGeometry);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (this.pv.compact) {\n\t\t\tall_objects = this._make_compact(all_objects);\n\t\t}\n\t\tthis.set_objects(all_objects);\n\t}\n\n\t_make_compact(all_objects: Object3DWithGeometry[]): Object3DWithGeometry[] {\n\t\tconst objects_by_type: ObjectsByType = {\n\t\t\t[ObjectType.MESH]: [],\n\t\t\t[ObjectType.POINTS]: [],\n\t\t\t[ObjectType.LINE_SEGMENTS]: [],\n\t\t};\n\t\tconst merged_objects: Object3DWithGeometry[] = [];\n\n\t\tfor (let object of all_objects) {\n\t\t\tobject.traverse((object3d: Object3D) => {\n\t\t\t\tconst object = object3d as Object3DWithGeometry;\n\t\t\t\tif (object.geometry) {\n\t\t\t\t\t// const type = child.constructor.name;\n\t\t\t\t\tif ((object as Mesh).isMesh) {\n\t\t\t\t\t\tobjects_by_type[ObjectType.MESH].push(object);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif ((object as LineSegments).isLineSegments) {\n\t\t\t\t\t\t\tobjects_by_type[ObjectType.LINE_SEGMENTS].push(object);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ((object as Points).isPoints) {\n\t\t\t\t\t\t\t\tobjects_by_type[ObjectType.POINTS].push(object);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tfor (let type of Object.keys(objects_by_type) as ObjectTypes) {\n\t\t\tconst objects = objects_by_type[type];\n\n\t\t\tconst geometries = [];\n\t\t\tfor (let object of objects) {\n\t\t\t\tconst geometry = object.geometry;\n\t\t\t\tgeometry.applyMatrix(object.matrix);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\n\t\t\t// TODO: test that this works with geometries with same attributes\n\t\t\tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t\tif (merged_geometry) {\n\t\t\t\tconst object = this.create_object(merged_geometry, type);\n\t\t\t\tmerged_objects.push(object);\n\t\t\t}\n\n\t\t\t// objects.forEach( object=> {\n\t\t\t// \tif (object.parent != null) {\n\t\t\t// \t\tobject.parent.remove(object);\n\t\t\t// \t}\n\t\t\t// \tif (object.geometry != null) {\n\t\t\t// \t\tobject.geometry.dispose();\n\t\t\t// \t}\n\t\t\t// \t(object.material != null ? object.material.dispose() : undefined);\n\t\t\t// });\n\t\t}\n\t\treturn merged_objects;\n\t}\n}\n\n// _add_missing_attributes: (geo0, geo1)->\n// \tgeo0_attribute_names = lodash_keys(geo0.attributes)\n// \tgeo1_attribute_names = lodash_keys(geo1.attributes)\n\n// \tattributes_not_in_geo0 = lodash_difference(geo1_attribute_names, geo0_attribute_names)\n// \tattributes_not_in_geo1 = lodash_difference(geo0_attribute_names, geo1_attribute_names)\n\n// \tlodash_each attributes_not_in_geo0, (attribute_not_in_geo0)=>\n// \t\tthis._add_attribute(geo0, attribute_not_in_geo0, geo1.attributes[attribute_not_in_geo0])\n// \tlodash_each attributes_not_in_geo1, (attribute_not_in_geo1)=>\n// \t\tthis._add_attribute(geo1, attribute_not_in_geo1, geo0.attributes[attribute_not_in_geo1])\n\n// _add_attribute: (geo, attrib_name, attribute_template)->\n\n// \titem_size = attribute_template['itemSize']\n// \tnormalized = attribute_template['normalized']\n// \tpoints_count = geo.getAttribute('position').array.length / 3\n\n// \traw_values = []\n// \tlodash_times points_count, (i)->\n// \t\tlodash_times item_size, (j)->\n// \t\t\traw_values.push(0)\n\n// \tvalues = new Float32Array(raw_values)\n// \tgeo.setAttribute( attrib_name, new BufferAttribute( values, item_size, normalized) )\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {CoreMath} from 'src/core/math/_Module';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {TypeAssert} from 'src/engine/poly/Assert';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {SimplexNoise} from 'modules/three/examples/jsm/math/SimplexNoise';\n\nenum Operation {\n\tADD = 'add',\n\tSET = 'set',\n\tMULT = 'mult',\n\tSUBSTRACT = 'substract',\n\tDIVIDE = 'divide',\n}\ntype Operations = Array<Operation>;\nconst Operations: Operations = [Operation.ADD, Operation.SET, Operation.MULT, Operation.SUBSTRACT, Operation.DIVIDE];\n\n// const COMPONENT_OFFSETS = [\n// \tnew Vector3(545, 125454, 2142),\n// \tnew Vector3(425, 25746, 95242),\n// \tnew Vector3(765132, 21, 9245),\n// ]\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass NoiseSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1);\n\tfreq = ParamConfig.VECTOR3([1, 1, 1]);\n\toffset = ParamConfig.VECTOR3([0, 0, 0]);\n\toctaves = ParamConfig.INTEGER(3, {\n\t\trange: [1, 8],\n\t\trange_locked: [true, false],\n\t});\n\tamp_attenuation = ParamConfig.FLOAT(0.5, {range: [0, 1]});\n\tfreq_increase = ParamConfig.FLOAT(2, {range: [0, 10]});\n\tseed = ParamConfig.INTEGER(0, {range: [0, 100]});\n\tseparator = ParamConfig.SEPARATOR();\n\tuse_normals = ParamConfig.BOOLEAN(0);\n\tattrib_name = ParamConfig.STRING('position');\n\toperation = ParamConfig.INTEGER(Operations.indexOf(Operation.ADD), {\n\t\tmenu: {\n\t\t\tentries: Operations.map((operation) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: operation,\n\t\t\t\t\tvalue: Operations.indexOf(operation),\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcompute_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new NoiseSopParamsConfig();\n\nexport class NoiseSopNode extends TypedSopNode<NoiseSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'noise';\n\t}\n\n\t// _param_amount: number;\n\t// _param_offset: Vector3;\n\t// _param_freq: Vector3;\n\t// _param_seed: number;\n\t// _param_use_normals: boolean;\n\t// _param_attrib_name: string;\n\t// _param_operation: number;\n\t// _param_compute_normals: boolean;\n\n\tprivate _simplex_by_seed: Map<number, SimplexNoise> = new Map();\n\n\tprivate _rest_core_group_timestamp: number | undefined;\n\tprivate _rest_points: CorePoint[] = [];\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to add noise to', 'rest geometry'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE, InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_rest = input_contents[1];\n\n\t\tconst dest_points = core_group.points();\n\t\tif (core_group_rest) {\n\t\t\tif (\n\t\t\t\tthis._rest_core_group_timestamp == null ||\n\t\t\t\tthis._rest_core_group_timestamp != core_group_rest.timestamp()\n\t\t\t) {\n\t\t\t\tthis._rest_points = core_group_rest.points();\n\t\t\t\tthis._rest_core_group_timestamp = core_group_rest.timestamp();\n\t\t\t}\n\t\t}\n\n\t\t// const {SimplexNoise} = await import(`three/examples/jsm/math/SimplexNoise`)\n\t\tconst simplex = this._get_simplex();\n\n\t\tconst use_normals = this.pv.use_normals && core_group.has_attrib('normal');\n\t\tconst target_attrib_size = core_group.attrib_size(this.pv.attrib_name);\n\n\t\tfor (let i = 0; i < dest_points.length; i++) {\n\t\t\tconst dest_point = dest_points[i];\n\t\t\tlet rest_point = core_group_rest ? this._rest_points[i] : dest_point;\n\t\t\tconst current_attrib_value = rest_point.attrib_value(this.pv.attrib_name);\n\t\t\tconst pos = rest_point\n\t\t\t\t.position()\n\t\t\t\t.add(this.pv.offset)\n\t\t\t\t.multiply(this.pv.freq);\n\n\t\t\tlet noise_value = (() => {\n\t\t\t\tif (use_normals) {\n\t\t\t\t\tconst normal = rest_point.attrib_value('normal');\n\t\t\t\t\tconst noise = this.pv.amount * this._fbm(simplex, pos.x, pos.y, pos.z);\n\t\t\t\t\treturn normal.clone().multiplyScalar(noise);\n\t\t\t\t\t//vertex.add(noise_vector)\n\t\t\t\t} else {\n\t\t\t\t\treturn new Vector3(\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 545, pos.y + 125454, pos.z + 2142),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x - 425, pos.y - 25746, pos.z + 95242),\n\t\t\t\t\t\tthis.pv.amount * this._fbm(simplex, pos.x + 765132, pos.y + 21, pos.z - 9245)\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tnoise_value = (() => {\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\treturn noise_value.x;\n\t\t\t\t\tcase 2:\n\t\t\t\t\t\treturn new Vector2(noise_value.x, noise_value.y);\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\treturn noise_value;\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tconst new_attrib_value = (() => {\n\t\t\t\tconst operation = Operations[this.pv.operation];\n\t\t\t\tswitch (target_attrib_size) {\n\t\t\t\t\tcase 1:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value + noise_value;\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value * noise_value;\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value / noise_value;\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value - noise_value;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tswitch (operation) {\n\t\t\t\t\t\t\tcase Operation.ADD:\n\t\t\t\t\t\t\t\treturn current_attrib_value.add(noise_value);\n\t\t\t\t\t\t\tcase Operation.SET:\n\t\t\t\t\t\t\t\treturn noise_value;\n\t\t\t\t\t\t\tcase Operation.MULT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.multiply(noise_value);\n\t\t\t\t\t\t\tcase Operation.DIVIDE:\n\t\t\t\t\t\t\t\treturn current_attrib_value.divide(noise_value);\n\t\t\t\t\t\t\tcase Operation.SUBSTRACT:\n\t\t\t\t\t\t\t\treturn current_attrib_value.sub(noise_value);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tTypeAssert.unreachable(operation);\n\t\t\t\t}\n\t\t\t})();\n\n\t\t\tdest_point.set_attrib_value(this.pv.attrib_name, new_attrib_value);\n\t\t}\n\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tfor (let geometry of core_group.geometries()) {\n\t\t\t\t(geometry.getAttribute(this.pv.attrib_name) as BufferAttribute).needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tif (this.pv.compute_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate _fbm(simplex: SimplexNoise, x: number, y: number, z: number): number {\n\t\tlet value = 0.0;\n\t\tlet amplitude = 1.0;\n\t\tfor (let i = 0; i < this.pv.octaves; i++) {\n\t\t\tvalue += amplitude * simplex.noise3d(x, y, z);\n\t\t\tx *= this.pv.freq_increase;\n\t\t\ty *= this.pv.freq_increase;\n\t\t\tz *= this.pv.freq_increase;\n\t\t\tamplitude *= this.pv.amp_attenuation;\n\t\t}\n\t\treturn value;\n\t}\n\n\tprivate _get_simplex(): SimplexNoise {\n\t\tconst simplex = this._simplex_by_seed.get(this.pv.seed);\n\t\tif (simplex) {\n\t\t\treturn simplex;\n\t\t} else {\n\t\t\tconst simplex = this._create_simplex();\n\t\t\tthis._simplex_by_seed.set(this.pv.seed, simplex);\n\t\t\treturn simplex;\n\t\t}\n\t}\n\tprivate _create_simplex(): SimplexNoise {\n\t\tconst seed = this.pv.seed;\n\t\tconst random_generator = {\n\t\t\trandom: function() {\n\t\t\t\treturn CoreMath.rand_float(seed);\n\t\t\t},\n\t\t};\n\t\tconst simplex = new SimplexNoise(random_generator);\n\t\t// for (let key of Object.keys(this._simplex_by_seed)) {\n\t\tthis._simplex_by_seed.delete(seed);\n\t\t// }\n\t\treturn simplex;\n\t}\n}\n","// Ported from Stefan Gustavson's java implementation\n// http://staffwww.itn.liu.se/~stegu/simplexnoise/simplexnoise.pdf\n// Read Stefan's excellent paper for details on how this code works.\n//\n// Sean McCullough banksean@gmail.com\n//\n// Added 4D noise\n// Joshua Koo zz85nus@gmail.com\n\n/**\n * You can pass in a random number generator object if you like.\n * It is assumed to have a random() method.\n */\nvar SimplexNoise = function ( r ) {\n\n\tif ( r == undefined ) r = Math;\n\tthis.grad3 = [[ 1, 1, 0 ], [ - 1, 1, 0 ], [ 1, - 1, 0 ], [ - 1, - 1, 0 ],\n\t\t[ 1, 0, 1 ], [ - 1, 0, 1 ], [ 1, 0, - 1 ], [ - 1, 0, - 1 ],\n\t\t[ 0, 1, 1 ], [ 0, - 1, 1 ], [ 0, 1, - 1 ], [ 0, - 1, - 1 ]];\n\n\tthis.grad4 = [[ 0, 1, 1, 1 ], [ 0, 1, 1, - 1 ], [ 0, 1, - 1, 1 ], [ 0, 1, - 1, - 1 ],\n\t     [ 0, - 1, 1, 1 ], [ 0, - 1, 1, - 1 ], [ 0, - 1, - 1, 1 ], [ 0, - 1, - 1, - 1 ],\n\t     [ 1, 0, 1, 1 ], [ 1, 0, 1, - 1 ], [ 1, 0, - 1, 1 ], [ 1, 0, - 1, - 1 ],\n\t     [ - 1, 0, 1, 1 ], [ - 1, 0, 1, - 1 ], [ - 1, 0, - 1, 1 ], [ - 1, 0, - 1, - 1 ],\n\t     [ 1, 1, 0, 1 ], [ 1, 1, 0, - 1 ], [ 1, - 1, 0, 1 ], [ 1, - 1, 0, - 1 ],\n\t     [ - 1, 1, 0, 1 ], [ - 1, 1, 0, - 1 ], [ - 1, - 1, 0, 1 ], [ - 1, - 1, 0, - 1 ],\n\t     [ 1, 1, 1, 0 ], [ 1, 1, - 1, 0 ], [ 1, - 1, 1, 0 ], [ 1, - 1, - 1, 0 ],\n\t     [ - 1, 1, 1, 0 ], [ - 1, 1, - 1, 0 ], [ - 1, - 1, 1, 0 ], [ - 1, - 1, - 1, 0 ]];\n\n\tthis.p = [];\n\tfor ( var i = 0; i < 256; i ++ ) {\n\n\t\tthis.p[ i ] = Math.floor( r.random() * 256 );\n\n\t}\n\t// To remove the need for index wrapping, double the permutation table length\n\tthis.perm = [];\n\tfor ( var i = 0; i < 512; i ++ ) {\n\n\t\tthis.perm[ i ] = this.p[ i & 255 ];\n\n\t}\n\n\t// A lookup table to traverse the simplex around a given point in 4D.\n\t// Details can be found where this table is used, in the 4D noise method.\n\tthis.simplex = [\n\t\t[ 0, 1, 2, 3 ], [ 0, 1, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 2, 3, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 2, 3, 0 ],\n\t\t[ 0, 2, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 3, 1, 2 ], [ 0, 3, 2, 1 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 1, 3, 2, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 1, 2, 0, 3 ], [ 0, 0, 0, 0 ], [ 1, 3, 0, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 3, 0, 1 ], [ 2, 3, 1, 0 ],\n\t\t[ 1, 0, 2, 3 ], [ 1, 0, 3, 2 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 2, 0, 3, 1 ], [ 0, 0, 0, 0 ], [ 2, 1, 3, 0 ],\n\t\t[ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ],\n\t\t[ 2, 0, 1, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 0, 1, 2 ], [ 3, 0, 2, 1 ], [ 0, 0, 0, 0 ], [ 3, 1, 2, 0 ],\n\t\t[ 2, 1, 0, 3 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 0, 0, 0, 0 ], [ 3, 1, 0, 2 ], [ 0, 0, 0, 0 ], [ 3, 2, 0, 1 ], [ 3, 2, 1, 0 ]];\n\n};\n\nSimplexNoise.prototype.dot = function ( g, x, y ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y;\n\n};\n\nSimplexNoise.prototype.dot3 = function ( g, x, y, z ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z;\n\n};\n\nSimplexNoise.prototype.dot4 = function ( g, x, y, z, w ) {\n\n\treturn g[ 0 ] * x + g[ 1 ] * y + g[ 2 ] * z + g[ 3 ] * w;\n\n};\n\nSimplexNoise.prototype.noise = function ( xin, yin ) {\n\n\tvar n0, n1, n2; // Noise contributions from the three corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F2 = 0.5 * ( Math.sqrt( 3.0 ) - 1.0 );\n\tvar s = ( xin + yin ) * F2; // Hairy factor for 2D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar G2 = ( 3.0 - Math.sqrt( 3.0 ) ) / 6.0;\n\tvar t = ( i + j ) * G2;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y) space\n\tvar Y0 = j - t;\n\tvar x0 = xin - X0; // The x,y distances from the cell origin\n\tvar y0 = yin - Y0;\n\t// For the 2D case, the simplex shape is an equilateral triangle.\n\t// Determine which simplex we are in.\n\tvar i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n\tif ( x0 > y0 ) {\n\n\t\ti1 = 1; j1 = 0;\n\n\t\t// lower triangle, XY order: (0,0)->(1,0)->(1,1)\n\n\t}\telse {\n\n\t\ti1 = 0; j1 = 1;\n\n\t} // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n\t// A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n\t// a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n\t// c = (3-sqrt(3))/6\n\tvar x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n\tvar y1 = y0 - j1 + G2;\n\tvar x2 = x0 - 1.0 + 2.0 * G2; // Offsets for last corner in (x,y) unskewed coords\n\tvar y2 = y0 - 1.0 + 2.0 * G2;\n\t// Work out the hashed gradient indices of the three simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 ] ] % 12;\n\tvar gi2 = this.perm[ ii + 1 + this.perm[ jj + 1 ] ] % 12;\n\t// Calculate the contribution from the three corners\n\tvar t0 = 0.5 - x0 * x0 - y0 * y0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot( this.grad3[ gi0 ], x0, y0 ); // (x,y) of grad3 used for 2D gradient\n\n\t}\n\tvar t1 = 0.5 - x1 * x1 - y1 * y1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot( this.grad3[ gi1 ], x1, y1 );\n\n\t}\n\tvar t2 = 0.5 - x2 * x2 - y2 * y2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot( this.grad3[ gi2 ], x2, y2 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to return values in the interval [-1,1].\n\treturn 70.0 * ( n0 + n1 + n2 );\n\n};\n\n// 3D simplex noise\nSimplexNoise.prototype.noise3d = function ( xin, yin, zin ) {\n\n\tvar n0, n1, n2, n3; // Noise contributions from the four corners\n\t// Skew the input space to determine which simplex cell we're in\n\tvar F3 = 1.0 / 3.0;\n\tvar s = ( xin + yin + zin ) * F3; // Very nice and simple skew factor for 3D\n\tvar i = Math.floor( xin + s );\n\tvar j = Math.floor( yin + s );\n\tvar k = Math.floor( zin + s );\n\tvar G3 = 1.0 / 6.0; // Very nice and simple unskew factor, too\n\tvar t = ( i + j + k ) * G3;\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar x0 = xin - X0; // The x,y,z distances from the cell origin\n\tvar y0 = yin - Y0;\n\tvar z0 = zin - Z0;\n\t// For the 3D case, the simplex shape is a slightly irregular tetrahedron.\n\t// Determine which simplex we are in.\n\tvar i1, j1, k1; // Offsets for second corner of simplex in (i,j,k) coords\n\tvar i2, j2, k2; // Offsets for third corner of simplex in (i,j,k) coords\n\tif ( x0 >= y0 ) {\n\n\t\tif ( y0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t\t// X Y Z order\n\n\t\t} else if ( x0 >= z0 ) {\n\n\t\t\ti1 = 1; j1 = 0; k1 = 0; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t\t// X Z Y order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 1; j2 = 0; k2 = 1;\n\n\t\t} // Z X Y order\n\n\t} else { // x0<y0\n\n\t\tif ( y0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 0; k1 = 1; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Z Y X order\n\n\t\t} else if ( x0 < z0 ) {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 0; j2 = 1; k2 = 1;\n\n\t\t\t// Y Z X order\n\n\t\t} else {\n\n\t\t\ti1 = 0; j1 = 1; k1 = 0; i2 = 1; j2 = 1; k2 = 0;\n\n\t\t} // Y X Z order\n\n\t}\n\t// A step of (1,0,0) in (i,j,k) means a step of (1-c,-c,-c) in (x,y,z),\n\t// a step of (0,1,0) in (i,j,k) means a step of (-c,1-c,-c) in (x,y,z), and\n\t// a step of (0,0,1) in (i,j,k) means a step of (-c,-c,1-c) in (x,y,z), where\n\t// c = 1/6.\n\tvar x1 = x0 - i1 + G3; // Offsets for second corner in (x,y,z) coords\n\tvar y1 = y0 - j1 + G3;\n\tvar z1 = z0 - k1 + G3;\n\tvar x2 = x0 - i2 + 2.0 * G3; // Offsets for third corner in (x,y,z) coords\n\tvar y2 = y0 - j2 + 2.0 * G3;\n\tvar z2 = z0 - k2 + 2.0 * G3;\n\tvar x3 = x0 - 1.0 + 3.0 * G3; // Offsets for last corner in (x,y,z) coords\n\tvar y3 = y0 - 1.0 + 3.0 * G3;\n\tvar z3 = z0 - 1.0 + 3.0 * G3;\n\t// Work out the hashed gradient indices of the four simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar gi0 = this.perm[ ii + this.perm[ jj + this.perm[ kk ] ] ] % 12;\n\tvar gi1 = this.perm[ ii + i1 + this.perm[ jj + j1 + this.perm[ kk + k1 ] ] ] % 12;\n\tvar gi2 = this.perm[ ii + i2 + this.perm[ jj + j2 + this.perm[ kk + k2 ] ] ] % 12;\n\tvar gi3 = this.perm[ ii + 1 + this.perm[ jj + 1 + this.perm[ kk + 1 ] ] ] % 12;\n\t// Calculate the contribution from the four corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot3( this.grad3[ gi0 ], x0, y0, z0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot3( this.grad3[ gi1 ], x1, y1, z1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot3( this.grad3[ gi2 ], x2, y2, z2 );\n\n\t}\n\tvar t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot3( this.grad3[ gi3 ], x3, y3, z3 );\n\n\t}\n\t// Add contributions from each corner to get the final noise value.\n\t// The result is scaled to stay just inside [-1,1]\n\treturn 32.0 * ( n0 + n1 + n2 + n3 );\n\n};\n\n// 4D simplex noise\nSimplexNoise.prototype.noise4d = function ( x, y, z, w ) {\n\n\t// For faster and easier lookups\n\tvar grad4 = this.grad4;\n\tvar simplex = this.simplex;\n\tvar perm = this.perm;\n\n\t// The skewing and unskewing factors are hairy again for the 4D case\n\tvar F4 = ( Math.sqrt( 5.0 ) - 1.0 ) / 4.0;\n\tvar G4 = ( 5.0 - Math.sqrt( 5.0 ) ) / 20.0;\n\tvar n0, n1, n2, n3, n4; // Noise contributions from the five corners\n\t// Skew the (x,y,z,w) space to determine which cell of 24 simplices we're in\n\tvar s = ( x + y + z + w ) * F4; // Factor for 4D skewing\n\tvar i = Math.floor( x + s );\n\tvar j = Math.floor( y + s );\n\tvar k = Math.floor( z + s );\n\tvar l = Math.floor( w + s );\n\tvar t = ( i + j + k + l ) * G4; // Factor for 4D unskewing\n\tvar X0 = i - t; // Unskew the cell origin back to (x,y,z,w) space\n\tvar Y0 = j - t;\n\tvar Z0 = k - t;\n\tvar W0 = l - t;\n\tvar x0 = x - X0; // The x,y,z,w distances from the cell origin\n\tvar y0 = y - Y0;\n\tvar z0 = z - Z0;\n\tvar w0 = w - W0;\n\n\t// For the 4D case, the simplex is a 4D shape I won't even try to describe.\n\t// To find out which of the 24 possible simplices we're in, we need to\n\t// determine the magnitude ordering of x0, y0, z0 and w0.\n\t// The method below is a good way of finding the ordering of x,y,z,w and\n\t// then find the correct traversal order for the simplex we’re in.\n\t// First, six pair-wise comparisons are performed between each possible pair\n\t// of the four coordinates, and the results are used to add up binary bits\n\t// for an integer index.\n\tvar c1 = ( x0 > y0 ) ? 32 : 0;\n\tvar c2 = ( x0 > z0 ) ? 16 : 0;\n\tvar c3 = ( y0 > z0 ) ? 8 : 0;\n\tvar c4 = ( x0 > w0 ) ? 4 : 0;\n\tvar c5 = ( y0 > w0 ) ? 2 : 0;\n\tvar c6 = ( z0 > w0 ) ? 1 : 0;\n\tvar c = c1 + c2 + c3 + c4 + c5 + c6;\n\tvar i1, j1, k1, l1; // The integer offsets for the second simplex corner\n\tvar i2, j2, k2, l2; // The integer offsets for the third simplex corner\n\tvar i3, j3, k3, l3; // The integer offsets for the fourth simplex corner\n\t// simplex[c] is a 4-vector with the numbers 0, 1, 2 and 3 in some order.\n\t// Many values of c will never occur, since e.g. x>y>z>w makes x<z, y<w and x<w\n\t// impossible. Only the 24 indices which have non-zero entries make any sense.\n\t// We use a thresholding to set the coordinates in turn from the largest magnitude.\n\t// The number 3 in the \"simplex\" array is at the position of the largest coordinate.\n\ti1 = simplex[ c ][ 0 ] >= 3 ? 1 : 0;\n\tj1 = simplex[ c ][ 1 ] >= 3 ? 1 : 0;\n\tk1 = simplex[ c ][ 2 ] >= 3 ? 1 : 0;\n\tl1 = simplex[ c ][ 3 ] >= 3 ? 1 : 0;\n\t// The number 2 in the \"simplex\" array is at the second largest coordinate.\n\ti2 = simplex[ c ][ 0 ] >= 2 ? 1 : 0;\n\tj2 = simplex[ c ][ 1 ] >= 2 ? 1 : 0; k2 = simplex[ c ][ 2 ] >= 2 ? 1 : 0;\n\tl2 = simplex[ c ][ 3 ] >= 2 ? 1 : 0;\n\t// The number 1 in the \"simplex\" array is at the second smallest coordinate.\n\ti3 = simplex[ c ][ 0 ] >= 1 ? 1 : 0;\n\tj3 = simplex[ c ][ 1 ] >= 1 ? 1 : 0;\n\tk3 = simplex[ c ][ 2 ] >= 1 ? 1 : 0;\n\tl3 = simplex[ c ][ 3 ] >= 1 ? 1 : 0;\n\t// The fifth corner has all coordinate offsets = 1, so no need to look that up.\n\tvar x1 = x0 - i1 + G4; // Offsets for second corner in (x,y,z,w) coords\n\tvar y1 = y0 - j1 + G4;\n\tvar z1 = z0 - k1 + G4;\n\tvar w1 = w0 - l1 + G4;\n\tvar x2 = x0 - i2 + 2.0 * G4; // Offsets for third corner in (x,y,z,w) coords\n\tvar y2 = y0 - j2 + 2.0 * G4;\n\tvar z2 = z0 - k2 + 2.0 * G4;\n\tvar w2 = w0 - l2 + 2.0 * G4;\n\tvar x3 = x0 - i3 + 3.0 * G4; // Offsets for fourth corner in (x,y,z,w) coords\n\tvar y3 = y0 - j3 + 3.0 * G4;\n\tvar z3 = z0 - k3 + 3.0 * G4;\n\tvar w3 = w0 - l3 + 3.0 * G4;\n\tvar x4 = x0 - 1.0 + 4.0 * G4; // Offsets for last corner in (x,y,z,w) coords\n\tvar y4 = y0 - 1.0 + 4.0 * G4;\n\tvar z4 = z0 - 1.0 + 4.0 * G4;\n\tvar w4 = w0 - 1.0 + 4.0 * G4;\n\t// Work out the hashed gradient indices of the five simplex corners\n\tvar ii = i & 255;\n\tvar jj = j & 255;\n\tvar kk = k & 255;\n\tvar ll = l & 255;\n\tvar gi0 = perm[ ii + perm[ jj + perm[ kk + perm[ ll ] ] ] ] % 32;\n\tvar gi1 = perm[ ii + i1 + perm[ jj + j1 + perm[ kk + k1 + perm[ ll + l1 ] ] ] ] % 32;\n\tvar gi2 = perm[ ii + i2 + perm[ jj + j2 + perm[ kk + k2 + perm[ ll + l2 ] ] ] ] % 32;\n\tvar gi3 = perm[ ii + i3 + perm[ jj + j3 + perm[ kk + k3 + perm[ ll + l3 ] ] ] ] % 32;\n\tvar gi4 = perm[ ii + 1 + perm[ jj + 1 + perm[ kk + 1 + perm[ ll + 1 ] ] ] ] % 32;\n\t// Calculate the contribution from the five corners\n\tvar t0 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0 - w0 * w0;\n\tif ( t0 < 0 ) n0 = 0.0;\n\telse {\n\n\t\tt0 *= t0;\n\t\tn0 = t0 * t0 * this.dot4( grad4[ gi0 ], x0, y0, z0, w0 );\n\n\t}\n\tvar t1 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1 - w1 * w1;\n\tif ( t1 < 0 ) n1 = 0.0;\n\telse {\n\n\t\tt1 *= t1;\n\t\tn1 = t1 * t1 * this.dot4( grad4[ gi1 ], x1, y1, z1, w1 );\n\n\t}\n\tvar t2 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2 - w2 * w2;\n\tif ( t2 < 0 ) n2 = 0.0;\n\telse {\n\n\t\tt2 *= t2;\n\t\tn2 = t2 * t2 * this.dot4( grad4[ gi2 ], x2, y2, z2, w2 );\n\n\t} var t3 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3 - w3 * w3;\n\tif ( t3 < 0 ) n3 = 0.0;\n\telse {\n\n\t\tt3 *= t3;\n\t\tn3 = t3 * t3 * this.dot4( grad4[ gi3 ], x3, y3, z3, w3 );\n\n\t}\n\tvar t4 = 0.6 - x4 * x4 - y4 * y4 - z4 * z4 - w4 * w4;\n\tif ( t4 < 0 ) n4 = 0.0;\n\telse {\n\n\t\tt4 *= t4;\n\t\tn4 = t4 * t4 * this.dot4( grad4[ gi4 ], x4, y4, z4, w4 );\n\n\t}\n\t// Sum up and scale the result to cover the range [-1,1]\n\treturn 27.0 * ( n0 + n1 + n2 + n3 + n4 );\n\n};\n\nexport { SimplexNoise };\n","// import {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\n// import {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\n// const DEFAULT_NORMAL = new Vector3(0, 0, 1);\nconst NORMAL_ATTRIB_NAME = 'normal';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass NormalsSopParamsConfig extends NodeParamsConfig {\n\tedit = ParamConfig.BOOLEAN(0);\n\tupdate_x = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tx = ParamConfig.FLOAT('@N.x', {\n\t\tvisible_if: {update_x: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\ty = ParamConfig.FLOAT('@N.y', {\n\t\tvisible_if: {update_y: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 1},\n\t});\n\tz = ParamConfig.FLOAT('@N.z', {\n\t\tvisible_if: {update_z: 1, edit: 1},\n\t\texpression: {for_entities: true},\n\t});\n\n\trecompute = ParamConfig.BOOLEAN(0, {\n\t\tvisible_if: {edit: 0},\n\t});\n\tinvert = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new NormalsSopParamsConfig();\n\nexport class NormalsSopNode extends TypedSopNode<NormalsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'normals';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to update normals of'];\n\t}\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tif (this.pv.edit) {\n\t\t\tawait this._eval_expressions_for_core_group(core_group);\n\t\t} else {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\t\tif (this.pv.invert) {\n\t\t\tthis._invert_normals(core_group);\n\t\t}\n\n\t\t// add attr if not present\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\t\t// \t\tif(!geometry.getAttribute('normal')){\n\t\t// \t\t\tconst position_values = geometry.attributes['position'].array;\n\t\t// \t\t\tconst normal_values = [];\n\t\t// \t\t\tposition_values.forEach(p=> normal_values.push(0));\n\t\t// \t\t\tgeometry.setAttribute('normal', new Float32BufferAttribute(normal_values, 3));\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\t// if (this.pv.edit) {\n\t\t// \tthis._eval_expressions(core_group);\n\t\t// } else {\n\t\t// \tif(this.pv.recompute){\n\t\t// \t\tcore_group.compute_vertex_normals()\n\t\t// \t}\n\t\t// }\n\n\t\t// for(let object of core_group.objects()){\n\t\t// \tlet geometry;\n\t\t// \tif ((geometry = object.geometry) != null) {\n\n\t\t// \t\tif (this.pv.invert) {\n\t\t// \t\t\tthis._invert_normals(geometry);\n\t\t// \t\t}\n\n\t\t// \t\tif (!this.pv.edit) {\n\t\t// \t\t\tgeometry.computeVertexNormals();\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\t// const points = core_group.points();\n\n\t\t// const attrib_name = 'normal';\n\t\t// for(let point of points){\n\n\t\t// \tthis.context().set_entity(point);\n\n\t\t// \tthis.param(attrib_name).eval(val=> {\n\t\t// \t\tval.normalize();\n\t\t// \t\tpoint.set_attrib_value(attrib_name, val);\n\t\t// \t});\n\t\t// }\n\t\tconst core_objects = core_group.core_objects();\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\t}\n\tprivate async _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(NORMAL_ATTRIB_NAME).array as number[];\n\n\t\t// x\n\t\tif (this.pv.update_x) {\n\t\t\tif (this.p.x.has_expression() && this.p.x.expression_controller) {\n\t\t\t\tawait this.p.x.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 0] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 0] = this.pv.x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// y\n\t\tif (this.pv.update_y) {\n\t\t\tif (this.p.y.has_expression() && this.p.y.expression_controller) {\n\t\t\t\tawait this.p.y.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 1] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 1] = this.pv.y;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// z\n\t\tif (this.pv.update_z) {\n\t\t\tif (this.p.z.has_expression() && this.p.z.expression_controller) {\n\t\t\t\tawait this.p.z.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\tarray[point.index * 3 + 2] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\tarray[point.index * 3 + 2] = this.pv.z;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// private _create_init_normal(core_geometry: CoreGeometry) {\n\t// \tif (!core_geometry.has_attrib(NORMAL_ATTRIB_NAME)) {\n\t// \t\tcore_geometry.add_numeric_attrib(NORMAL_ATTRIB_NAME, 3, DEFAULT_NORMAL);\n\t// \t}\n\t// }\n\n\tprivate _invert_normals(core_group: CoreGroup) {\n\t\t// this._create_init_normal();\n\n\t\tfor (let core_object of core_group.core_objects()) {\n\t\t\tconst geometry = core_object.core_geometry().geometry();\n\t\t\tconst normal_attrib = geometry.attributes[NORMAL_ATTRIB_NAME];\n\t\t\tif (normal_attrib) {\n\t\t\t\tconst array = normal_attrib.array as number[];\n\t\t\t\tfor (let i = 0; i < array.length; i++) {\n\t\t\t\t\tarray[i] *= -1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// let index_attrib;\n\t\t// if ((index_attrib = geometry.getIndex()) != null) {\n\t\t// \tconst { array } = index_attrib;\n\n\t\t// \tconst faces_count = array.length / 3;\n\t\t// \tfor(let i=0; i<faces_count; i++){\n\t\t// \t\tconst tmp = array[i*3];\n\t\t// \t\tarray[i*3] = array[(i*3)+2];\n\t\t// \t\tarray[(i*3)+2] = tmp;\n\t\t// \t}\n\n\t\t// } else {\n\t\t// \tconst geometry_wrapper = new CoreGeometry(geometry);\n\t\t// \tconst points = geometry_wrapper.points();\n\n\t\t// \tconst attrib_name = 'normal';\n\t\t// \tfor(let point of points){\n\t\t// \t\tconst normal = point.normal();\n\t\t// \t\tnormal.multiplyScalar(-1);\n\t\t// \t\tpoint.set_attrib_value(attrib_name, normal);\n\t\t// \t}\n\t\t// }\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nclass NullSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new NullSopParamsConfig();\n\nexport class NullSopNode extends TypedSopNode<NullSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'null';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\tthis.ui_data.set_border_radius(1000);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n}\n","import {TypedSopNode, BaseSopNodeType} from './_Base';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\n// import {CoreWalker} from 'src/Core/Walker';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {GeometryContainer} from 'src/engine/containers/Geometry';\nclass ObjectMergeSopParamsConfig extends NodeParamsConfig {\n\tgeometry = ParamConfig.OPERATOR_PATH('', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.SOP,\n\t\t},\n\t});\n}\nconst ParamsConfig = new ObjectMergeSopParamsConfig();\n\nexport class ObjectMergeSopNode extends TypedSopNode<ObjectMergeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'object_merge';\n\t}\n\n\t// _param_apply_parent_transform: boolean\n\tinitialize_node() {}\n\n\tasync cook(input_containers: CoreGroup[]) {\n\t\tconst geometry_node = this.p.geometry.found_node();\n\t\tif (geometry_node) {\n\t\t\tif (geometry_node.node_context() == NodeContext.SOP) {\n\t\t\t\tconst container = await geometry_node.request_container();\n\t\t\t\tthis.import_input(geometry_node as BaseSopNodeType, container);\n\t\t\t} else {\n\t\t\t\tthis.states.error.set('found node is not a geometry');\n\t\t\t}\n\t\t} else {\n\t\t\tthis.states.error.set(`node not found at path '${this.pv.geometry}'`);\n\t\t}\n\t}\n\n\timport_input(geometry_node: BaseSopNodeType, container: GeometryContainer) {\n\t\tlet core_group;\n\t\t// I unfortunately need to do a clone here,\n\t\t// because if 2 objectmerge nodes import the same geometry,\n\t\t// they would try to place it under 2 different geo nodes\n\t\t// which is not possible\n\t\tif ((core_group = container.core_content_cloned()) != null) {\n\t\t\t// cannot do that until i know how to make it recook\n\t\t\t// when the obj changes\n\t\t\t// if (this._param_apply_parent_transform){\n\t\t\t// \tconst matrix = geometry_node.parent().object().matrixWorld\n\t\t\t// \tgroup.children.forEach(child=>{\n\t\t\t// \t\tconsole.log(child)\n\t\t\t// \t\tconst geometry = child.geometry\n\t\t\t// \t\tif(geometry){\n\t\t\t// \t\t\tgeometry.applyMatrix(matrix)\n\t\t\t// \t\t}\n\t\t\t// \t})\n\t\t\t// }\n\n\t\t\tthis.set_core_group(core_group);\n\t\t} else {\n\t\t\tthis.states.error.set('invalid target');\n\t\t}\n\t}\n\n\t// geometry_node() {\n\t// \tif ((this._param_geometry != null) && (this._param_geometry !== '')) {\n\t// \t\tCoreWalker.find_node(this, this._param_geometry);\n\t// \t}\n\t// }\n}\n","import {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {Float32BufferAttribute};\nimport {TypedSopNode} from './_Base';\n\n// import {CoreGroup} from 'src/Core/Geometry/Group';\nimport {CoreObject} from 'src/core/geometry/Object';\n// import {CoreGeometry} from 'src/Core/Geometry/Geometry'\n// import {CorePoint} from 'src/Core/Geometry/Point'\n\n// https://github.com/wwwtyro/geo-ambient-occlusion\nimport geoao from 'geo-ambient-occlusion';\n\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass OcclusionSopParamsConfig extends NodeParamsConfig {\n\tattrib_name = ParamConfig.STRING('occlusion');\n\tsamples = ParamConfig.INTEGER(256, {\n\t\trange: [1, 256],\n\t\trange_locked: [true, false],\n\t});\n\tsep = ParamConfig.SEPARATOR();\n\tbuffer_resolution = ParamConfig.INTEGER(512);\n\tbias = ParamConfig.FLOAT(0.01);\n}\nconst ParamsConfig = new OcclusionSopParamsConfig();\n\nexport class OcclusionSopNode extends TypedSopNode<OcclusionSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'occlusion';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('palette');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_objects = core_group.core_objects();\n\n\t\tfor (let core_object of core_objects) {\n\t\t\tawait this._process_occlusion_on_object(core_object);\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\tprivate async _process_occlusion_on_object(core_object: CoreObject) {\n\t\tconst geometry = core_object.core_geometry().geometry();\n\n\t\tconst position_array = geometry.attributes.position.array;\n\t\tconst normal_array = geometry.attributes.normal.array;\n\t\tconst index_array = geometry.getIndex()?.array;\n\t\tconst aoSampler = geoao(position_array, {\n\t\t\tcells: index_array,\n\t\t\tnormals: normal_array,\n\t\t\tresolution: this.pv.buffer_resolution,\n\t\t\tbias: this.pv.bias,\n\t\t});\n\n\t\tfor (let i = 0; i < this.pv.samples; i++) {\n\t\t\taoSampler.sample();\n\t\t}\n\t\tconst ao = aoSampler.report();\n\n\t\tgeometry.setAttribute(this.pv.attrib_name, new THREE.Float32BufferAttribute(ao, 1));\n\n\t\taoSampler.dispose();\n\t}\n}\n","import {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {TypedSopNode} from './_Base';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\n\nconst POSITION = 'position';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass PeakSopParamsConfig extends NodeParamsConfig {\n\tamount = ParamConfig.FLOAT(1, {range: [-1, 1]});\n}\nconst ParamsConfig = new PeakSopParamsConfig();\n\nexport class PeakSopNode extends TypedSopNode<PeakSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'peak';\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tlet core_geometry, point;\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse((child_object) => {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = (child_object as Mesh).geometry as BufferGeometry) != null) {\n\t\t\t\t\tcore_geometry = new CoreGeometry(geometry);\n\t\t\t\t\tfor (point of core_geometry.points()) {\n\t\t\t\t\t\tconst normal = point.normal();\n\t\t\t\t\t\tconst position = point.position();\n\t\t\t\t\t\tconst new_position = position.clone().add(normal.multiplyScalar(this.pv.amount));\n\t\t\t\t\t\tpoint.set_position(new_position);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\t\t\t\tconst attrib = core_geometry.geometry().getAttribute(POSITION) as BufferAttribute;\n\t\t\t\t\t\tattrib.needsUpdate = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {TypedSopNode} from './_Base';\nimport {CoreTransform} from 'src/core/Transform';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nconst DEFAULT_UP = new Vector3(0, 0, 1);\nconst ROTATE_START = new Vector3(0, 0, 1);\nconst ROTATE_END = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass PlaneSopParamsConfig extends NodeParamsConfig {\n\tsize = ParamConfig.VECTOR2([1, 1]);\n\tuse_segments_count = ParamConfig.BOOLEAN(0);\n\tstep_size = ParamConfig.FLOAT(1, {visible_if: {use_segments_count: 0}});\n\tsegments = ParamConfig.VECTOR2([1, 1], {visible_if: {use_segments_count: 1}});\n\tdirection = ParamConfig.VECTOR3([0, 1, 0]);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new PlaneSopParamsConfig();\n\nexport class PlaneSopNode extends TypedSopNode<PlaneSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'plane';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to create plane from (optional)'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tif (core_group) {\n\t\t\tthis._cook_with_input(core_group);\n\t\t} else {\n\t\t\tthis._cook_without_input();\n\t\t}\n\t}\n\t_cook_without_input() {\n\t\tconst geometry = this._create_plane(this.pv.size);\n\n\t\t// convert to buffer geo, as some render problems can occur otherwise\n\t\t// geometry = BufferGeometryUtils.mergeBufferGeometries([geometry])\n\t\t// console.log(geometry, geometry.isBufferGeometry)\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\n\t\tconst matrix = this._core_transform.translation_matrix(this.pv.center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\tthis.set_geometry(geometry);\n\t}\n\t_cook_with_input(core_group: CoreGroup) {\n\t\tconst bbox = core_group.bounding_box();\n\t\tconst size = new Vector3();\n\t\tbbox.getSize(size);\n\t\tconst center = new Vector3();\n\t\tbbox.getCenter(center);\n\n\t\t// TODO: rotate the input geo to get the accurate bbox\n\t\tconst size2d = new Vector2(size.x, size.z);\n\t\tconst geometry = this._create_plane(size2d);\n\n\t\tthis._core_transform.rotate_geometry(geometry, ROTATE_START, ROTATE_END);\n\n\t\tconst matrix = this._core_transform.translation_matrix(center);\n\t\tgeometry.applyMatrix(matrix);\n\n\t\t// const buffer_geometry = CoreGeometry.clone(geometry);\n\t\tthis.set_geometry(geometry);\n\t}\n\n\t_create_plane(size: Vector2) {\n\t\tlet segments_count;\n\t\tsize = size.clone();\n\t\tif (this.pv.use_segments_count) {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(this.pv.segments.x),\n\t\t\t\ty: Math.floor(this.pv.segments.y),\n\t\t\t};\n\t\t} else {\n\t\t\tsegments_count = {\n\t\t\t\tx: Math.floor(size.x / this.pv.step_size),\n\t\t\t\ty: Math.floor(size.y / this.pv.step_size),\n\t\t\t};\n\t\t\tsize.x = segments_count.x * this.pv.step_size;\n\t\t\tsize.y = segments_count.y * this.pv.step_size;\n\t\t}\n\t\treturn new PlaneBufferGeometry(size.x, size.y, segments_count.x, segments_count.y);\n\t}\n}\n","// import lodash_map from 'lodash/map'\n\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreObject} from 'src/core/geometry/Object';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {BooleanParam} from 'src/engine/params/Boolean';\nimport {FloatParam} from 'src/engine/params/Float';\n\nconst POSITION_ATTRIB_NAME = 'position';\n\ntype ValueArrayByName = Map<string, number[]>;\ntype ComponentOffset = 0 | 1 | 2;\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass PointSopParamsConfig extends NodeParamsConfig {\n\tupdate_x = ParamConfig.BOOLEAN(0);\n\tx = ParamConfig.FLOAT('@P.x', {\n\t\tvisible_if: {update_x: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_y = ParamConfig.BOOLEAN(0);\n\ty = ParamConfig.FLOAT('@P.y', {\n\t\tvisible_if: {update_y: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_z = ParamConfig.BOOLEAN(0);\n\tz = ParamConfig.FLOAT('@P.z', {\n\t\tvisible_if: {update_z: 1},\n\t\texpression: {for_entities: true},\n\t});\n\tupdate_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new PointSopParamsConfig();\n\nexport class PointSopNode extends TypedSopNode<PointSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'point';\n\t}\n\n\tprivate _x_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _y_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\tprivate _z_arrays_by_geometry_uuid: ValueArrayByName = new Map();\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['points to move'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t\t// this.ui_data.set_icon('dot-circle');\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tawait this._eval_expressions_for_core_group(core_group);\n\t}\n\n\t// group.traverse (object)=>\n\t// \tif (geometry = object.geometry)?\n\t// \t\tthis._eval_expressions(geometry)\n\t// \t\tgeometry.computeVertexNormals()\n\n\tasync _eval_expressions_for_core_group(core_group: CoreGroup) {\n\t\tconst core_objects = core_group.core_objects();\n\t\t// this._allocate_arrays(core_objects)\n\n\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\tawait this._eval_expressions_for_core_object(core_objects[i]);\n\t\t}\n\n\t\tif (this.pv.update_normals) {\n\t\t\tcore_group.compute_vertex_normals();\n\t\t}\n\n\t\tconst geometries = core_group.geometries();\n\t\tfor (let geometry of geometries) {\n\t\t\tgeometry.computeBoundingBox();\n\t\t}\n\n\t\t// needs update required for when no cloning\n\t\tif (!this.io.inputs.input_cloned(0)) {\n\t\t\tconst geometries = core_group.geometries();\n\t\t\tfor (let geometry of geometries) {\n\t\t\t\tconst attrib = geometry.getAttribute(POSITION_ATTRIB_NAME) as BufferAttribute;\n\t\t\t\tattrib.needsUpdate = true;\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\tasync _eval_expressions_for_core_object(core_object: CoreObject) {\n\t\tconst object = core_object.object();\n\t\tconst geometry = (object as Mesh).geometry as BufferGeometry;\n\t\tconst points = core_object.points();\n\n\t\tconst array = geometry.getAttribute(POSITION_ATTRIB_NAME).array as number[];\n\n\t\tconst tmp_array_x = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_x,\n\t\t\tthis.p.x,\n\t\t\tthis.pv.x,\n\t\t\tthis._x_arrays_by_geometry_uuid,\n\t\t\t0\n\t\t);\n\t\tconst tmp_array_y = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_y,\n\t\t\tthis.p.y,\n\t\t\tthis.pv.y,\n\t\t\tthis._y_arrays_by_geometry_uuid,\n\t\t\t1\n\t\t);\n\t\tconst tmp_array_z = await this._update_from_param(\n\t\t\tgeometry,\n\t\t\tarray,\n\t\t\tpoints,\n\t\t\tthis.p.update_z,\n\t\t\tthis.p.z,\n\t\t\tthis.pv.z,\n\t\t\tthis._z_arrays_by_geometry_uuid,\n\t\t\t2\n\t\t);\n\n\t\tif (tmp_array_x) {\n\t\t\tthis._commit_tmp_values(tmp_array_x, array, 0);\n\t\t}\n\t\tif (tmp_array_y) {\n\t\t\tthis._commit_tmp_values(tmp_array_y, array, 1);\n\t\t}\n\t\tif (tmp_array_z) {\n\t\t\tthis._commit_tmp_values(tmp_array_z, array, 2);\n\t\t}\n\t}\n\n\tprivate async _update_from_param(\n\t\tgeometry: BufferGeometry,\n\t\tarray: number[],\n\t\tpoints: CorePoint[],\n\t\tdo_update_param: BooleanParam,\n\t\tvalue_param: FloatParam,\n\t\tparam_value: number,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst do_update = do_update_param;\n\t\tconst param = value_param;\n\n\t\tlet tmp_array = this._init_array_if_required(geometry, arrays_by_geometry_uuid, points.length, offset);\n\t\tif (do_update.value) {\n\t\t\tif (param.has_expression() && param.expression_controller) {\n\t\t\t\tawait param.expression_controller.compute_expression_for_points(points, (point, value) => {\n\t\t\t\t\ttmp_array[point.index] = value;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tlet point;\n\t\t\t\tfor (let i = 0; i < points.length; i++) {\n\t\t\t\t\tpoint = points[i];\n\t\t\t\t\ttmp_array[point.index] = param_value;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn tmp_array;\n\t}\n\n\tprivate _init_array_if_required(\n\t\tgeometry: BufferGeometry,\n\t\tarrays_by_geometry_uuid: ValueArrayByName,\n\t\tpoints_count: number,\n\t\toffset: ComponentOffset\n\t) {\n\t\tconst uuid = geometry.uuid;\n\t\tconst current_array = arrays_by_geometry_uuid.get(uuid);\n\t\tif (current_array) {\n\t\t\t// only create new array if we need more point, or as soon as the length is different?\n\t\t\tif (current_array.length < points_count) {\n\t\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\t\treturn new_array;\n\t\t\t} else {\n\t\t\t\treturn current_array;\n\t\t\t}\n\t\t} else {\n\t\t\tconst new_array = this._array_for_component(geometry, points_count, offset);\n\t\t\tarrays_by_geometry_uuid.set(uuid, new_array);\n\t\t\treturn new_array;\n\t\t}\n\t}\n\n\tprivate _array_for_component(geometry: BufferGeometry, points_count: number, offset: ComponentOffset) {\n\t\tconst new_array = new Array<number>(points_count);\n\t\tconst src_array = geometry.getAttribute(POSITION_ATTRIB_NAME).array;\n\t\tfor (let i = 0; i < new_array.length; i++) {\n\t\t\tnew_array[i] = src_array[i * 3 + offset];\n\t\t}\n\t\treturn new_array;\n\t}\n\n\tprivate _commit_tmp_values(tmp_array: number[], target_array: number[], offset: number) {\n\t\tfor (let i = 0; i < tmp_array.length; i++) {\n\t\t\ttarget_array[i * 3 + offset] = tmp_array[i];\n\t\t}\n\t}\n}\n","import {TypedSopNode} from './_Base';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\nimport {CoreTransform} from 'src/core/Transform';\nimport {CoreGeometryUtilCircle} from 'src/core/geometry/util/Circle';\nimport {CoreGeometryUtilCurve} from 'src/core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from 'src/core/geometry/operation/Skin';\n\nimport {Vector3} from 'three/src/math/Vector3';\n// import {TubeBufferGeometry} from 'three/src/geometries/TubeGeometry';\nimport {LineSegments} from 'three/src/objects/LineSegments';\n// import {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nconst DEFAULT_R = new Vector3(0, 0, 0);\nconst DEFAULT_S = new Vector3(1, 1, 1);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CorePoint} from 'src/core/geometry/Point';\nclass PolywireSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(8, {\n\t\trange: [3, 20],\n\t\trange_locked: [true, false],\n\t});\n\tclosed = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new PolywireSopParamsConfig();\n\nexport class PolywireSopNode extends TypedSopNode<PolywireSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'polywire';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create tubes from'];\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tprivate _geometries: BufferGeometry[] = [];\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tthis._geometries = [];\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (object instanceof LineSegments) {\n\t\t\t\tthis._create_tube(object);\n\t\t\t}\n\t\t}\n\n\t\t//if @_param_merge\n\t\t//geometries = lodash_map @_geometries, (object)->object.geometry\n\t\tconst merged_geometry = CoreGeometry.merge_geometries(this._geometries);\n\t\tfor (let geometry of this._geometries) {\n\t\t\tgeometry.dispose();\n\t\t}\n\t\tif (merged_geometry) {\n\t\t\tconst object = this.create_object(merged_geometry);\n\n\t\t\tthis.set_object(object);\n\t\t} else {\n\t\t\tthis.set_objects([]);\n\t\t}\n\t}\n\t//else\n\t//\tthis.set_objects( @_objects )\n\n\t_create_tube(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst wrapper = new CoreGeometry(geometry);\n\t\tconst points = wrapper.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\n\t\tfor (let curve_point_indices of accumulated_curve_point_indices) {\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tthis._create_tube_from_points(current_points);\n\t\t}\n\t}\n\n\t_create_tube_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst positions = points.map((point) => point.attrib_value('position'));\n\n\t\tconst circle_template = CoreGeometryUtilCircle.create(this.pv.radius, this.pv.segments_radial);\n\t\tconst circles: BufferGeometry[] = [];\n\t\tconst scale = 1;\n\t\tfor (let position of positions) {\n\t\t\tconst t = position;\n\t\t\tconst matrix = this._core_transform.matrix(t, DEFAULT_R, DEFAULT_S, scale);\n\n\t\t\tconst new_circle = circle_template.clone();\n\t\t\tnew_circle.applyMatrix(matrix);\n\t\t\tcircles.push(new_circle);\n\t\t}\n\n\t\tfor (let i = 0; i < circles.length; i++) {\n\t\t\tif (i > 0) {\n\t\t\t\tconst circle = circles[i];\n\t\t\t\tconst prev_circle = circles[i - 1];\n\n\t\t\t\tconst geometry = this._skin(prev_circle, circle);\n\t\t\t\tthis._geometries.push(geometry);\n\t\t\t}\n\t\t}\n\t}\n\n\t//this.set_geometries(circles, Core.Geometry.Constant.OBJECT_TYPE.LINE_SEGMENTS)\n\n\t// curve = new CatmullRomCurve3(positions)\n\t// segments_count = positions.length-1\n\n\t// geometry = new TubeBufferGeometry(\n\t// \tcurve,\n\t// \tsegments_count,\n\t// \t@_param_radius,\n\t// \t@_param_segments_radial,\n\t// \t@_param_closed\n\t// \t)\n\n\t// object = this.create_object(geometry)\n\t// @_objects.push(object)\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {Vector3} from 'three/src/math/Vector3';\nimport {Raycaster, Intersection} from 'three/src/core/Raycaster';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {MeshBasicMaterial} from 'three/src/materials/MeshBasicMaterial';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {DoubleSide} from 'three/src/constants';\n\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\nconst MAT_DOUBLE_SIDED = new MeshBasicMaterial({\n\tside: DoubleSide,\n});\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass RaySopParamsConfig extends NodeParamsConfig {\n\tuse_normals = ParamConfig.BOOLEAN(1);\n\tdirection = ParamConfig.VECTOR3([0, -1, 0], {\n\t\tvisible_if: {use_normals: 0},\n\t});\n\ttransfer_face_normals = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new RaySopParamsConfig();\n\nexport class RaySopNode extends TypedSopNode<RaySopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'ray';\n\t}\n\n\t// _material_by_object_uuid: MaterialByString\n\tprivate _bound_assign_mat = this._assign_double_sided_material_to_object.bind(this); //(Object3D)=>void;\n\tprivate _raycaster = new Raycaster();\n\n\tstatic double_sided_material() {\n\t\treturn MAT_DOUBLE_SIDED;\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to move', 'geometry to ray onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(2);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.FROM_NODE,\n\t\t\tInputCloneMode.ALWAYS, // to assign double sided mat\n\t\t]);\n\t}\n\n\tcreate_params() {}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\t\tconst core_group_collision = input_contents[1];\n\n\t\tthis.ray(core_group, core_group_collision);\n\t}\n\n\tray(core_group: CoreGroup, core_group_collision: CoreGroup) {\n\t\t// this._material_by_object_uuid = {}\n\t\tthis._assign_double_sided_material_to_core_group(core_group_collision);\n\n\t\tlet direction: Vector3, first_intersect: Intersection;\n\t\tfor (let point of core_group.points()) {\n\t\t\tdirection = this.pv.use_normals ? point.normal() : this.pv.direction;\n\t\t\tthis._raycaster.set(point.position(), direction);\n\n\t\t\tfirst_intersect = this._raycaster.intersectObjects(core_group_collision.objects(), true)[0];\n\t\t\tif (first_intersect) {\n\t\t\t\tpoint.set_position(first_intersect.point);\n\t\t\t\tif (this.pv.transfer_face_normals && first_intersect.face) {\n\t\t\t\t\tpoint.set_normal(first_intersect.face.normal);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tthis.set_core_group(core_group);\n\t}\n\n\t_assign_double_sided_material_to_core_group(core_group: CoreGroup) {\n\t\tfor (let object of core_group.objects()) {\n\t\t\tobject.traverse(this._bound_assign_mat);\n\t\t}\n\t}\n\t_assign_double_sided_material_to_object(object: Object3D) {\n\t\t// this._material_by_object_uuid[object.uuid] = object.material\n\t\t(object as Mesh).material = RaySopNode.double_sided_material();\n\t}\n\n\t// average_normals(geometry){\n\t// \tconst normals = [];\n\t// \tconst vertex_index_names = ['a', 'b', 'c'];\n\t// \tlodash_each(geometry.faces, face=> {\n\t// \t\treturn lodash_each(vertex_index_names, (vertex_index_name, i)=> {\n\t// \t\t\tconst vertex_index = face[vertex_index_name];\n\t// \t\t\tif (normals[vertex_index] == null) { normals[vertex_index] = []; }\n\t// \t\t\treturn normals[vertex_index].push(face.vertexNormals[i].clone());\n\t// \t\t});\n\t// \t});\n\n\t// \tlodash_each(normals, function(normal_group, i){\n\t// \t\tconst average = new Vector3(\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'x')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'y')) / normal_group.length),\n\t// \t\t\t(lodash_sum(lodash_map(normal_group, 'z')) / normal_group.length)\n\t// \t\t);\n\t// \t\treturn normals[i] = average;\n\t// \t});\n\n\t// \treturn normals;\n\t// }\n}\n","import {LineSegments} from 'three/src/objects/LineSegments';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\n\nimport {CatmullRomCurve3} from 'three/src/extras/curves/CatmullRomCurve3';\n// import {CubicBezierCurve3} from 'three/src/extras/curves/CubicBezierCurve3';\n// import {LineCurve3} from 'three/src/extras/curves/LineCurve3';\n// import {QuadraticBezierCurve3} from 'three/src/extras/curves/QuadraticBezierCurve3';\nimport {BufferGeometryUtils} from 'modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nimport lodash_flatten from 'lodash/flatten';\nimport lodash_map from 'lodash/map';\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from 'src/core/geometry/Constant';\nimport {CoreGeometryUtilCurve} from 'src/core/geometry/util/Curve';\nimport {CoreGeometry} from 'src/core/geometry/Geometry';\n\nexport enum METHOD {\n\tPOINTS_COUNT = 'points_count',\n\tSEGMENT_LENGTH = 'segment_length',\n}\nexport const METHODS = [METHOD.POINTS_COUNT, METHOD.SEGMENT_LENGTH];\n\n// matches threejs curve type in CatmullRomCurve3.js\nexport enum CURVE_TYPE {\n\tCENTRIPETAL = 'centripetal',\n\tCHORDAL = 'chordal',\n\tCATMULLROM = 'catmullrom',\n}\nexport const CURVE_TYPES = [CURVE_TYPE.CENTRIPETAL, CURVE_TYPE.CHORDAL, CURVE_TYPE.CATMULLROM];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CorePoint} from 'src/core/geometry/Point';\nimport {TypeAssert} from 'src/engine/poly/Assert';\nclass ResampleSopParamsConfig extends NodeParamsConfig {\n\tmethod = ParamConfig.INTEGER(METHODS.indexOf(METHOD.POINTS_COUNT), {\n\t\tmenu: {\n\t\t\tentries: METHODS.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tcurve_type = ParamConfig.INTEGER(CURVE_TYPES.indexOf(CURVE_TYPE.CATMULLROM), {\n\t\trange: [0, 2],\n\t\trange_locked: [true, true],\n\t\tmenu: {\n\t\t\tentries: CURVE_TYPES.map((name, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: name,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\ttension = ParamConfig.FLOAT(0.01, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, true],\n\t});\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.POINTS_COUNT)},\n\t});\n\tsegment_length = ParamConfig.FLOAT(1, {\n\t\tvisible_if: {method: METHODS.indexOf(METHOD.SEGMENT_LENGTH)},\n\t});\n}\nconst ParamsConfig = new ResampleSopParamsConfig();\n\nexport class ResampleSopNode extends TypedSopNode<ResampleSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'resample';\n\t}\n\n\t// private _objects: Object3D\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\t// this._objects = [];\n\t\tconst resampled_objects = [];\n\t\tif (this.pv.points_count >= 2) {\n\t\t\tconst core_objects = core_group.core_objects();\n\t\t\tfor (let i = 0; i < core_objects.length; i++) {\n\t\t\t\tconst core_object = core_objects[i];\n\t\t\t\tconst object = core_object.object();\n\t\t\t\tif (object instanceof LineSegments) {\n\t\t\t\t\tconst resampled_object = this._resample(object);\n\t\t\t\t\tresampled_objects.push(resampled_object);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// if (this.pv.merge) {\n\t\t// \tconst geometries = lodash_map(this._objects, object => object.geometry);\n\t\t// \tconst merged_geometry = CoreGeometry.merge_geometries(geometries);\n\t\t// \tlodash_each(geometries, geometry => geometry.dispose());\n\t\t// \tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// \tthis.set_object( object );\n\t\t// } else {\n\t\tthis.set_objects(resampled_objects);\n\t\t// }\n\t}\n\n\t_resample(line_segment: LineSegments) {\n\t\tconst geometry = line_segment.geometry as BufferGeometry;\n\t\tconst core_geometry = new CoreGeometry(geometry);\n\t\tconst points = core_geometry.points();\n\t\tconst indices = geometry.getIndex()?.array as number[];\n\n\t\tconst accumulated_curve_point_indices = CoreGeometryUtilCurve.accumulated_curve_point_indices(indices);\n\t\t// accumulated_curve_point_indices = [accumulated_curve_point_indices[0]]\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tfor (let i = 0; i < accumulated_curve_point_indices.length; i++) {\n\t\t\tconst curve_point_indices = accumulated_curve_point_indices[i];\n\t\t\tconst current_points = curve_point_indices.map((index) => points[index]);\n\t\t\tconst geometry = this._create_curve_from_points(current_points);\n\t\t\tif (geometry) {\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t}\n\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\tconst object = this.create_object(merged_geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\treturn object;\n\t}\n\n\t_create_curve_from_points(points: CorePoint[]) {\n\t\tif (points.length <= 1) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst old_curve_positions = lodash_map(points, (point) => point.attrib_value('position'));\n\t\tconst closed = false;\n\t\tconst curve_type = CURVE_TYPES[this.pv.curve_type];\n\t\tconst tension = this.pv.tension;\n\t\tconst curve = new CatmullRomCurve3(old_curve_positions, closed, curve_type, tension);\n\t\t// const curve = new LineCurve3(old_curve_positions);\n\t\t// const curve = new CubicBezierCurve3(old_curve_positions);\n\t\t// const curve = new QuadraticBezierCurve3(old_curve_positions);\n\n\t\t// TODO: could I detect when a curve has points that are very close\n\t\t// and prevent a curve to go too far\n\t\tconst new_curve_points = this._get_points_from_curve(curve);\n\n\t\tlet positions = [];\n\t\tconst indices = [];\n\n\t\tfor (let i = 0; i < new_curve_points.length; i++) {\n\t\t\tconst point_position = new_curve_points[i];\n\n\t\t\tconst position = point_position.toArray();\n\t\t\tpositions.push(position);\n\n\t\t\tif (i > 0) {\n\t\t\t\tindices.push(i - 1);\n\t\t\t\tindices.push(i);\n\t\t\t}\n\t\t}\n\n\t\tpositions = lodash_flatten(positions);\n\t\tconst geometry = new BufferGeometry();\n\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\tgeometry.setIndex(indices);\n\n\t\treturn geometry;\n\t\t// const object = this.create_object(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t// this._objects.push(object);\n\t}\n\n\t_get_points_from_curve(curve: CatmullRomCurve3) {\n\t\tconst method = METHODS[this.pv.method];\n\t\tswitch (method) {\n\t\t\tcase METHOD.POINTS_COUNT:\n\t\t\t\treturn curve.getSpacedPoints(Math.max(2, this.pv.points_count));\n\t\t\tcase METHOD.SEGMENT_LENGTH:\n\t\t\t\tvar length = curve.getLength();\n\n\t\t\t\tvar points_count = this.pv.segment_length !== 0 ? 1 + length / this.pv.segment_length : 2;\n\n\t\t\t\tpoints_count = Math.max(2, points_count);\n\n\t\t\t\treturn curve.getSpacedPoints(points_count);\n\t\t}\n\t\tTypeAssert.unreachable(method);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {BufferAttribute} from 'three/src/core/BufferAttribute';\nconst THREE = {BufferAttribute, BufferGeometry};\nimport lodash_range from 'lodash/range';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_sortBy from 'lodash/sortBy';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreConstant} from 'src/core/geometry/Constant';\nimport {CoreMath} from 'src/core/math/_Module';\nimport {CoreIterator} from 'src/core/Iterator';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass ScatterSopParamsConfig extends NodeParamsConfig {\n\tpoints_count = ParamConfig.INTEGER(100, {\n\t\trange: [0, 100],\n\t\trange_locked: [true, false],\n\t});\n\tseed = ParamConfig.INTEGER(0, {\n\t\trange: [0, 100],\n\t\trange_locked: [false, false],\n\t});\n\ttransfer_attributes = ParamConfig.BOOLEAN(0);\n\tattributes_to_transfer = ParamConfig.STRING('normal', {\n\t\tvisible_if: {transfer_attributes: 1},\n\t});\n\tadd_id_attribute = ParamConfig.BOOLEAN(1);\n}\nconst ParamsConfig = new ScatterSopParamsConfig();\n\nexport class ScatterSopNode extends TypedSopNode<ScatterSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'scatter';\n\t}\n\n\t// private _positions: number[];\n\t// private _areas_thresholds: number[];\n\t// private _attrib_values_by_name = {};\n\t// private _area_sum: number;\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to scatter points onto'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.NEVER]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\t// const objects = input_contents[0] //.group({clone: false})\n\t\tconst core_group = input_contents[0]; //CoreGroup.from_objects(objects)\n\t\tlet faces = core_group.faces();\n\t\t// const areas_by_face_index = []\n\t\tconst areas_thresholds: number[] = [];\n\t\tlet area_sum = 0;\n\t\tconst area_by_face_index: Map<number, number> = new Map();\n\n\t\tfor (let face of faces) {\n\t\t\tconst area = face.area;\n\t\t\tarea_by_face_index.set(face.index, area);\n\t\t}\n\t\tconst sorted_faces = lodash_sortBy(faces, (f) => {\n\t\t\treturn area_by_face_index.get(f.index);\n\t\t});\n\n\t\tlet i = 0;\n\t\tfor (let face of sorted_faces) {\n\t\t\tarea_sum += area_by_face_index.get(face.index) as number;\n\t\t\tareas_thresholds[i] = area_sum;\n\t\t\ti++;\n\t\t}\n\n\t\tconst positions: number[] = [];\n\t\tlet attrib_names: string[] = [];\n\t\tif (this.pv.transfer_attributes) {\n\t\t\tattrib_names = core_group.attrib_names_matching_mask(this.pv.attributes_to_transfer);\n\t\t}\n\n\t\tconst attrib_values_by_name: Map<string, number[]> = new Map();\n\t\tconst attrib_sizes_by_name: Map<string, number> = new Map();\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tattrib_values_by_name.set(attrib_name, []);\n\t\t\tattrib_sizes_by_name.set(attrib_name, core_group.attrib_size(attrib_name));\n\t\t}\n\n\t\tconst iterator = new CoreIterator();\n\t\t// await iterator.start_with_count(this.pv.points_count, this._add_point.bind(this))\n\t\tawait iterator.start_with_count(this.pv.points_count, (point_index: number) => {\n\t\t\tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * area_sum;\n\n\t\t\tfor (let face_index = 0; face_index < areas_thresholds.length; face_index++) {\n\t\t\t\tconst areas_threshold = areas_thresholds[face_index];\n\n\t\t\t\tif (rand <= areas_threshold) {\n\t\t\t\t\tconst face = sorted_faces[face_index];\n\t\t\t\t\tconst position = face.random_position(rand);\n\t\t\t\t\tposition.toArray(positions, positions.length);\n\n\t\t\t\t\tfor (let attrib_name of attrib_names) {\n\t\t\t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t\t\t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.push(attrib_value);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tattrib_value.toArray(\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name),\n\t\t\t\t\t\t\t\tattrib_values_by_name.get(attrib_name)!.length\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t// for(let point_index=0; point_index<this.pv.points_count; point_index++){\n\n\t\t// \tconst rand = CoreMath.rand_float(this.pv.seed+point_index) * area_sum\n\n\t\t// \tfor(let face_index=0; face_index<areas_thresholds.length; face_index++){\n\n\t\t// \t\tconst areas_threshold = areas_thresholds[face_index]\n\n\t\t// \t\tif(rand <= areas_threshold){\n\t\t// \t\t\tconst face = sorted_faces[face_index]\n\t\t// \t\t\tconst position = face.random_position(rand)\n\t\t// \t\t\tposition.toArray(positions, positions.length)\n\n\t\t// \t\t\tfor(let attrib_name of attrib_names){\n\t\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position)\n\t\t// \t\t\t\tif (lodash_isNumber(attrib_value)){\n\t\t// \t\t\t\t\tattrib_values_by_name[attrib_name].push(attrib_value)\n\t\t// \t\t\t\t} else {\n\t\t// \t\t\t\t\tattrib_value.toArray(\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name],\n\t\t// \t\t\t\t\t\tattrib_values_by_name[attrib_name].length\n\t\t// \t\t\t\t\t)\n\t\t// \t\t\t\t}\n\t\t// \t\t\t}\n\n\t\t// \t\t\tbreak;\n\t\t// \t\t}\n\t\t// \t}\n\t\t// }\n\n\t\tconst geometry = new THREE.BufferGeometry();\n\t\tgeometry.setAttribute('position', new THREE.BufferAttribute(new Float32Array(positions), 3));\n\t\tfor (let attrib_name of attrib_names) {\n\t\t\tgeometry.setAttribute(\n\t\t\t\tattrib_name,\n\t\t\t\tnew THREE.BufferAttribute(\n\t\t\t\t\tnew Float32Array(attrib_values_by_name.get(attrib_name)!),\n\t\t\t\t\tattrib_sizes_by_name.get(attrib_name)!\n\t\t\t\t)\n\t\t\t);\n\t\t}\n\n\t\tif (this.pv.add_id_attribute) {\n\t\t\tconst ids = lodash_range(this.pv.points_count);\n\t\t\tgeometry.setAttribute('id', new THREE.BufferAttribute(new Float32Array(ids), 1));\n\t\t}\n\n\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.POINTS);\n\t}\n\n\t// private _add_point(point_index: number) {\n\t// \tconst rand = CoreMath.rand_float(this.pv.seed + point_index) * this._area_sum;\n\n\t// \tfor (let face_index = 0; face_index < this._areas_thresholds.length; face_index++) {\n\t// \t\tconst areas_threshold = this._areas_thresholds[face_index];\n\n\t// \t\tif (rand <= areas_threshold) {\n\t// \t\t\tconst face = this._sorted_faces[face_index];\n\t// \t\t\tconst position = face.random_position(rand);\n\t// \t\t\tposition.toArray(positions, positions.length);\n\n\t// \t\t\tfor (let attrib_name of attrib_names) {\n\t// \t\t\t\tconst attrib_value = face.attrib_value_at_position(attrib_name, position);\n\t// \t\t\t\tif (lodash_isNumber(attrib_value)) {\n\t// \t\t\t\t\tthis._attrib_values_by_name[attrib_name].push(attrib_value);\n\t// \t\t\t\t} else {\n\t// \t\t\t\t\tattrib_value.toArray(\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name],\n\t// \t\t\t\t\t\tthis._attrib_values_by_name[attrib_name].length\n\t// \t\t\t\t\t);\n\t// \t\t\t\t}\n\t// \t\t\t}\n\n\t// \t\t\tbreak;\n\t// \t\t}\n\t// \t}\n\t// }\n}\n","import {TypedSopNode} from './_Base';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass ShadowsSopParamsConfig extends NodeParamsConfig {\n\tcast_shadow = ParamConfig.BOOLEAN(1);\n\treceive_shadow = ParamConfig.BOOLEAN(1);\n\tapply_to_children = ParamConfig.BOOLEAN(0);\n}\nconst ParamsConfig = new ShadowsSopParamsConfig();\n\nexport class ShadowsSopNode extends TypedSopNode<ShadowsSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'shadows';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['objects to change shadows properties of'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tasync cook(input_contents: CoreGroup[]) {\n\t\tconst core_group = input_contents[0];\n\n\t\tfor (let object of core_group.objects()) {\n\t\t\tif (this.pv.apply_to_children) {\n\t\t\t\tobject.traverse((child) => {\n\t\t\t\t\tchild.castShadow = this.pv.cast_shadow;\n\t\t\t\t\tchild.receiveShadow = this.pv.receive_shadow;\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tobject.castShadow = this.pv.cast_shadow;\n\t\t\t\tobject.receiveShadow = this.pv.receive_shadow;\n\t\t\t}\n\t\t}\n\n\t\tconsole.log(core_group.objects());\n\t\tthis.set_core_group(core_group);\n\t}\n}\n","import {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {LineSegments} from 'three/src/objects/LineSegments';\nimport lodash_sortBy from 'lodash/sortBy';\nimport lodash_reverse from 'lodash/reverse';\nimport lodash_compact from 'lodash/compact';\nimport {TypedSopNode} from './_Base';\n\nimport {CoreGeometryUtilCurve} from 'src/core/geometry/util/Curve';\nimport {CoreGeometryOperationSkin} from 'src/core/geometry/operation/Skin';\nimport {CoreGroup} from 'src/core/geometry/Group';\n\nimport {NodeParamsConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass SkinSopParamsConfig extends NodeParamsConfig {}\nconst ParamsConfig = new SkinSopParamsConfig();\n\nexport class SkinSopNode extends TypedSopNode<SkinSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'skin';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['lines to create polygons from', 'if used, lines from both inputs will be used'];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1, 2);\n\t}\n\n\tcook(input_contents: CoreGroup[]) {\n\t\tswitch (lodash_compact(this.io.inputs.inputs()).length) {\n\t\t\tcase 1:\n\t\t\t\treturn this.process_one_input(input_contents);\n\t\t\tcase 2:\n\t\t\t\treturn this.process_two_inputs(input_contents);\n\t\t\tdefault:\n\t\t\t\treturn this.states.error.set('inputs count not valid');\n\t\t}\n\t}\n\n\tprocess_one_input(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tif (line_segments0) {\n\t\t\tconst first_line_segment = line_segments0[0] as Mesh;\n\t\t\tif (first_line_segment) {\n\t\t\t\tconst src_geometries = CoreGeometryUtilCurve.line_segment_to_geometries(\n\t\t\t\t\tfirst_line_segment.geometry as BufferGeometry\n\t\t\t\t);\n\t\t\t\tsrc_geometries.forEach((src_geometry, i) => {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tconst prev_src_geometry = src_geometries[i - 1];\n\n\t\t\t\t\t\tconst geometry = this._skin(prev_src_geometry, src_geometry);\n\t\t\t\t\t\tgeometries.push(geometry);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\tprocess_two_inputs(input_contents: CoreGroup[]) {\n\t\tconst core_group0 = input_contents[0];\n\t\tconst core_group1 = input_contents[1];\n\t\tconst line_segments0 = this._get_line_segments(core_group0);\n\t\tconst line_segments1 = this._get_line_segments(core_group1);\n\t\tconst line_segments = lodash_reverse(lodash_sortBy([line_segments0, line_segments1], (array) => array.length));\n\t\tconst smallest_array = line_segments[0];\n\t\tconst largest_array = line_segments[1];\n\n\t\tconst geometries: BufferGeometry[] = [];\n\t\tsmallest_array.forEach((line_segment, i) => {\n\t\t\tconst other_line_segment = largest_array[i];\n\n\t\t\tif (line_segment != null && other_line_segment != null) {\n\t\t\t\tconst geo = (line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst other_geo = (other_line_segment as Mesh).geometry as BufferGeometry;\n\t\t\t\tconst geometry = this._skin(geo, other_geo);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t});\n\n\t\tthis.set_geometries(geometries);\n\t}\n\n\t_get_line_segments(core_group: CoreGroup) {\n\t\treturn core_group.objects().filter((child) => (child as LineSegments).isLineSegments);\n\t}\n\n\t_skin(geometry1: BufferGeometry, geometry0: BufferGeometry) {\n\t\t// TODO: maybe instead of doing this,\n\t\tconst geometry = new BufferGeometry();\n\n\t\tconst operation = new CoreGeometryOperationSkin(geometry, geometry1, geometry0);\n\t\toperation.process();\n\n\t\treturn geometry;\n\t}\n}\n","import {SphereBufferGeometry} from 'three/src/geometries/SphereGeometry';\nimport {IcosahedronBufferGeometry} from 'three/src/geometries/IcosahedronGeometry';\nimport {TypedSopNode} from './_Base';\n\nenum SphereType {\n\tDEFAULT = 'default',\n\tISOCAHEDRON = 'isocahedron',\n}\ntype SphereTypes = {[key in SphereType]: number};\nconst SPHERE_TYPE: SphereTypes = {\n\tdefault: 0,\n\tisocahedron: 1,\n};\nconst SPHERE_TYPES: Array<SphereType> = [SphereType.DEFAULT, SphereType.ISOCAHEDRON];\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass SphereSopParamsConfig extends NodeParamsConfig {\n\ttype = ParamConfig.INTEGER(SPHERE_TYPE.default, {\n\t\tmenu: {\n\t\t\tentries: SPHERE_TYPES.map((name) => {\n\t\t\t\treturn {name: name, value: SPHERE_TYPE[name]};\n\t\t\t}),\n\t\t},\n\t});\n\tradius = ParamConfig.FLOAT(1, {visible_if: {type: SPHERE_TYPE.default}});\n\tresolution = ParamConfig.VECTOR2([8, 6], {visible_if: {type: SPHERE_TYPE.default}});\n\topen = ParamConfig.BOOLEAN(0, {visible_if: {type: SPHERE_TYPE.default}});\n\tangle_range_x = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tangle_range_y = ParamConfig.VECTOR2([0, '$PI*2'], {visible_if: {type: SPHERE_TYPE.default, open: true}});\n\tdetail = ParamConfig.INTEGER(1, {\n\t\trange: [0, 5],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {type: SPHERE_TYPE.isocahedron},\n\t});\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new SphereSopParamsConfig();\n\nexport class SphereSopNode extends TypedSopNode<SphereSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'sphere';\n\t}\n\n\tcook() {\n\t\tlet geometry;\n\t\tif (this.pv.type == SPHERE_TYPE.default) {\n\t\t\tgeometry = this._create_default_sphere();\n\t\t} else {\n\t\t\tgeometry = this._create_default_isocahedron();\n\t\t}\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\t\tthis.set_geometry(geometry);\n\t}\n\t_create_default_sphere() {\n\t\tif (this.pv.open) {\n\t\t\treturn new SphereBufferGeometry(\n\t\t\t\tthis.pv.radius,\n\t\t\t\tthis.pv.resolution.x,\n\t\t\t\tthis.pv.resolution.y,\n\t\t\t\tthis.pv.angle_range_x.x,\n\t\t\t\tthis.pv.angle_range_x.y,\n\t\t\t\tthis.pv.angle_range_y.x,\n\t\t\t\tthis.pv.angle_range_y.y\n\t\t\t);\n\t\t} else {\n\t\t\treturn new SphereBufferGeometry(this.pv.radius, this.pv.resolution.x, this.pv.resolution.y);\n\t\t}\n\t}\n\t_create_default_isocahedron() {\n\t\treturn new IcosahedronBufferGeometry(this.pv.radius, this.pv.detail);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nconst INPUT_NAME = 'geometry to switch to';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nclass SwitchSopParamsConfig extends NodeParamsConfig {\n\tinput = ParamConfig.INTEGER(0, {\n\t\trange: [0, 3],\n\t\trange_locked: [true, true],\n\t});\n}\nconst ParamsConfig = new SwitchSopParamsConfig();\n\nexport class SwitchSopNode extends TypedSopNode<SwitchSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'switch';\n\t}\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn [INPUT_NAME, INPUT_NAME, INPUT_NAME, INPUT_NAME];\n\t}\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(0, 4);\n\t\tthis.io.inputs.init_inputs_clonable_state([\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t\tInputCloneMode.NEVER,\n\t\t]);\n\t\tthis.ui_data.set_width(100);\n\t\t// this.ui_data.set_icon('code-branch');\n\n\t\tthis.cook_controller.disallow_inputs_evaluation();\n\t}\n\n\tasync cook() {\n\t\tconst input_index = this.pv.input;\n\t\tif (this.io.inputs.has_input(input_index)) {\n\t\t\tconst container = await this.container_controller.request_input_container(input_index);\n\t\t\tthis.set_core_group(container.core_content());\n\t\t} else {\n\t\t\tthis.states.error.set(`no input ${input_index}`);\n\t\t}\n\t}\n}\n","import lodash_range from 'lodash/range';\n\n// import {CoreFont} from 'src/Core/Font'\nimport {TypedSopNode} from './_Base';\nimport {CoreConstant} from 'src/core/geometry/Constant';\n\nimport {TextBufferGeometry} from 'three/src/geometries/TextGeometry';\nimport {BufferGeometry} from 'three/src/core/BufferGeometry';\nimport {ShapeBufferGeometry} from 'three/src/geometries/ShapeGeometry';\nimport {FontLoader} from 'three/src/loaders/FontLoader';\nimport {Font} from 'three/src/extras/core/Font';\nimport {Float32BufferAttribute} from 'three/src/core/BufferAttribute';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {Path} from 'three/src/extras/core/Path';\nimport {Shape} from 'three/src/extras/core/Shape';\n\nimport {BufferGeometryUtils} from 'modules/three/examples/jsm/utils/BufferGeometryUtils';\n\nvar opentype = require('opentype.js');\n\nimport {TTFLoader} from 'modules/three/examples/jsm/loaders/TTFLoader';\nimport {SVGLoader} from 'modules/three/examples/jsm/loaders/SVGLoader';\n\nconst DEFAULT_URL = '/fonts/droid_sans_regular.typeface.json';\n\ndeclare global {\n\tinterface Window {\n\t\topentype: any;\n\t}\n}\n\n// const DEFAULT_PARAMS = {\n// \tsize: 1,\n// \theight: 0.1,\n// \tcurveSegments: 1\n// };\n\nexport enum TEXT_TYPE {\n\tMESH = 'mesh',\n\tFLAT = 'flat',\n\tLINE = 'line',\n\tSTROKE = 'stroke',\n}\nexport const TEXT_TYPES: Array<TEXT_TYPE> = [TEXT_TYPE.MESH, TEXT_TYPE.FLAT, TEXT_TYPE.LINE, TEXT_TYPE.STROKE];\n\ninterface FontByUrl {\n\t[propName: string]: Font;\n}\n\nconst GENERATION_ERROR_MESSAGE = `failed to generate geometry. Try to remove some characters`;\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass TextSopParamsConfig extends NodeParamsConfig {\n\tfont = ParamConfig.STRING('');\n\ttext = ParamConfig.STRING('polygonjs', {multiline: true});\n\ttype = ParamConfig.INTEGER(0, {\n\t\tmenu: {\n\t\t\tentries: TEXT_TYPES.map((type, i) => {\n\t\t\t\treturn {\n\t\t\t\t\tname: type,\n\t\t\t\t\tvalue: i,\n\t\t\t\t};\n\t\t\t}),\n\t\t},\n\t});\n\tsize = ParamConfig.FLOAT(1, {\n\t\trange: [0, 1],\n\t\trange_locked: [true, false],\n\t});\n\textrude = ParamConfig.FLOAT(0.1, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tsegments = ParamConfig.INTEGER(1, {\n\t\trange: [1, 20],\n\t\trange_locked: [true, false],\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.MESH),\n\t\t},\n\t});\n\tstroke_width = ParamConfig.FLOAT(0.02, {\n\t\tvisible_if: {\n\t\t\ttype: TEXT_TYPES.indexOf(TEXT_TYPE.STROKE),\n\t\t},\n\t});\n}\n\nconst ParamsConfig = new TextSopParamsConfig();\n\nexport class TextSopNode extends TypedSopNode<TextSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'text';\n\t}\n\t// static required_three_imports() {\n\t// \treturn ['loaders/TTFLoader', 'loaders/SVGLoader'];\n\t// }\n\n\tprivate _font_loader: FontLoader = new FontLoader();\n\tprivate _ttf_loader: TTFLoader | undefined;\n\tprivate _svg_loader: typeof SVGLoader | undefined;\n\tprivate _loaded_fonts: FontByUrl = {};\n\n\tinitialize_node() {}\n\n\tasync cook() {\n\t\ttry {\n\t\t\tthis._loaded_fonts[this.pv.font] = this._loaded_fonts[this.pv.font] || (await this._load_url(this.pv.font));\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(`count not load font (${this.pv.font})`);\n\t\t\treturn;\n\t\t}\n\t\tconst font = this._loaded_fonts[this.pv.font];\n\t\tif (font) {\n\t\t\tswitch (TEXT_TYPES[this.pv.type]) {\n\t\t\t\tcase TEXT_TYPE.MESH:\n\t\t\t\t\treturn this._create_geometry_from_type_mesh(font);\n\t\t\t\tcase TEXT_TYPE.FLAT:\n\t\t\t\t\treturn this._create_geometry_from_type_flat(font);\n\t\t\t\tcase TEXT_TYPE.LINE:\n\t\t\t\t\treturn this._create_geometry_from_type_line(font);\n\t\t\t\tcase TEXT_TYPE.STROKE:\n\t\t\t\t\treturn this._create_geometry_from_type_stroke(font);\n\t\t\t\tdefault:\n\t\t\t\t\tconsole.warn('type is not valid');\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_mesh(font: Font) {\n\t\tconst text = this.displayed_text();\n\n\t\tconst parameters = {\n\t\t\tfont: font,\n\t\t\tsize: this.pv.size,\n\t\t\theight: this.pv.extrude,\n\t\t\tcurveSegments: this.pv.segments,\n\t\t};\n\n\t\ttry {\n\t\t\tconst geometry = new TextBufferGeometry(text, parameters);\n\t\t\tif (!geometry.index) {\n\t\t\t\tconst position_array = geometry.getAttribute('position').array;\n\t\t\t\tgeometry.setIndex(lodash_range(position_array.length / 3));\n\t\t\t}\n\t\t\tthis.set_geometry(geometry);\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate _create_geometry_from_type_flat(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tvar geometry = new ShapeBufferGeometry(shapes);\n\t\t\tthis.set_geometry(geometry);\n\t\t}\n\t}\n\tprivate _create_geometry_from_type_line(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\tconst positions = [];\n\t\t\tconst indices = [];\n\t\t\tlet current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\tfor (let j = 0; j < points.length; j++) {\n\t\t\t\t\tconst point = points[j];\n\t\t\t\t\tpositions.push(point.x);\n\t\t\t\t\tpositions.push(point.y);\n\t\t\t\t\tpositions.push(0);\n\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\tif (j > 0 && j < points.length - 1) {\n\t\t\t\t\t\tindices.push(current_index);\n\t\t\t\t\t}\n\t\t\t\t\tcurrent_index += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst geometry = new BufferGeometry();\n\t\t\tgeometry.setAttribute('position', new Float32BufferAttribute(positions, 3));\n\t\t\tgeometry.setIndex(indices);\n\t\t\tthis.set_geometry(geometry, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\tprivate async _create_geometry_from_type_stroke(font: Font) {\n\t\tconst shapes = this.shapes_from_font(font);\n\t\tif (shapes) {\n\t\t\t// const color = new Color( 0xffffff );\n\t\t\tthis._svg_loader = this._svg_loader || (await this._load_svg_loader());\n\t\t\t// TODO: typescript: correct definition for last 3 optional args\n\t\t\tvar style = this._svg_loader.getStrokeStyle(this.pv.stroke_width, 'white', 'miter', 'butt', 4);\n\t\t\tconst geometries = [];\n\n\t\t\t// const positions = [];\n\t\t\t// const indices = [];\n\t\t\t// let current_index = 0;\n\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tconst points = shape.getPoints();\n\t\t\t\t// TODO: typescript: correct definition for points, arcDivisions, and minDistance\n\t\t\t\tconst arcDivisions = 12;\n\t\t\t\tconst minDistance = 0.001;\n\t\t\t\tconst geometry = this._svg_loader.pointsToStroke(\n\t\t\t\t\t(<unknown>points) as Vector3[],\n\t\t\t\t\tstyle,\n\t\t\t\t\tarcDivisions,\n\t\t\t\t\tminDistance\n\t\t\t\t);\n\t\t\t\tgeometries.push(geometry);\n\t\t\t}\n\t\t\tconst merged_geometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n\t\t\tthis.set_geometry(merged_geometry); //, CoreConstant.OBJECT_TYPE.LINE_SEGMENTS);\n\t\t}\n\t}\n\n\tprivate shapes_from_font(font: Font) {\n\t\tconst shapes = this._get_shapes(font);\n\t\tif (shapes) {\n\t\t\tconst holeShapes: Path[] = [];\n\t\t\tfor (let i = 0; i < shapes.length; i++) {\n\t\t\t\tconst shape = shapes[i];\n\t\t\t\tif (shape.holes && shape.holes.length > 0) {\n\t\t\t\t\tfor (let j = 0; j < shape.holes.length; j++) {\n\t\t\t\t\t\tconst hole = shape.holes[j];\n\t\t\t\t\t\tholeShapes.push(hole);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tshapes.push.apply(shapes, holeShapes as Shape[]);\n\t\t\treturn shapes;\n\t\t}\n\t}\n\n\tprivate _get_shapes(font: Font) {\n\t\tconst text = this.displayed_text();\n\t\ttry {\n\t\t\tconst shapes = font.generateShapes(text, this.pv.size);\n\t\t\treturn shapes;\n\t\t} catch (err) {\n\t\t\tthis.states.error.set(GENERATION_ERROR_MESSAGE);\n\t\t}\n\t}\n\n\tprivate displayed_text(): string {\n\t\treturn this.pv.text || '';\n\t}\n\n\t// _create_shape(font){\n\t// \tconst shapes = font.generateShapes( this.displayed_text(), 100 );\n\t// \tvar geometry = new ShapeBufferGeometry( shapes );\n\t// \treturn geometry\n\t// \t// geometry.computeBoundingBox();\n\t// \t// xMid = - 0.5 * ( geometry.boundingBox.max.x - geometry.boundingBox.min.x );\n\t// \t// geometry.translate( xMid, 0, 0 );\n\t// \t// make shape ( N.B. edge view not visible )\n\t// \t// text = new Mesh( geometry, matLite );\n\t// \t// text.position.z = - 150;\n\t// }\n\n\tprivate _load_url(url: string) {\n\t\tif (url === '') {\n\t\t\turl = DEFAULT_URL;\n\t\t}\n\t\tconst elements1 = url.split('?')[0];\n\t\tconst elements2 = elements1.split('.');\n\t\tconst ext = elements2[elements2.length - 1];\n\t\turl = `${url}?${Date.now()}`;\n\t\tswitch (ext) {\n\t\t\tcase 'ttf': {\n\t\t\t\treturn this._load_ttf(url);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase 'json': {\n\t\t\t\treturn this._load_json(url);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault: {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _load_ttf(url: string): Promise<Font> {\n\t\treturn new Promise(async (resolve, reject) => {\n\t\t\tthis._ttf_loader = this._ttf_loader || (await this._load_ttf_loader());\n\t\t\twindow.opentype = opentype;\n\t\t\tthis._ttf_loader.load(\n\t\t\t\turl,\n\t\t\t\t(fnt: object) => {\n\t\t\t\t\tconst parsed = this._font_loader.parse(fnt);\n\t\t\t\t\t// make sure not to delete opentype from window, as it may be required by other nodes\n\t\t\t\t\t// delete window.opentype;\n\t\t\t\t\tresolve(parsed);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\tprivate _load_json(url: string): Promise<Font> {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tthis._font_loader.load(\n\t\t\t\turl,\n\t\t\t\t(font) => {\n\t\t\t\t\tresolve(font);\n\t\t\t\t},\n\t\t\t\tundefined,\n\t\t\t\t() => {\n\t\t\t\t\treject();\n\t\t\t\t}\n\t\t\t);\n\t\t});\n\t}\n\n\t// private _default_font_parameters(options){\n\t// \tif (options == null) { options = {}; }\n\t// \tconst default_options = lodash_clone(DEFAULT_PARAMS);\n\t// \tif (options['font'] == null) { options['font'] = this.font(); }\n\n\t// \tfor(let key of Object.keys(options)){\n\t// \t\tdefault_options[key] = options[key];\n\t// \t}\n\n\t// \treturn default_options;\n\t// }\n\tprivate async _load_ttf_loader(): Promise<TTFLoader> {\n\t\tconst {TTFLoader} = await import(`modules/three/examples/jsm/loaders/TTFLoader`);\n\t\tconst loader_constructor = (<unknown>TTFLoader) as typeof TTFLoader;\n\t\treturn new loader_constructor();\n\t}\n\tprivate async _load_svg_loader(): Promise<typeof SVGLoader> {\n\t\tconst {SVGLoader} = await import(`modules/three/examples/jsm/loaders/SVGLoader`);\n\t\treturn (<unknown>SVGLoader) as typeof SVGLoader;\n\t}\n}\n","import {FileLoader} from 'three/src/loaders/FileLoader';\nimport {Loader} from 'three/src/loaders/Loader';\n/**\n * @author gero3 / https://github.com/gero3\n * @author tentone / https://github.com/tentone\n * @author troy351 / https://github.com/troy351\n *\n * Requires opentype.js to be included in the project.\n * Loads TTF files and converts them into typeface JSON that can be used directly\n * to create THREE.Font objects.\n */\n\n\nvar TTFLoader = function ( manager ) {\n\n\tLoader.call( this, manager );\n\n\tthis.reversed = false;\n\n};\n\n\nTTFLoader.prototype = Object.assign( Object.create( Loader.prototype ), {\n\n\tconstructor: TTFLoader,\n\n\tload: function ( url, onLoad, onProgress, onError ) {\n\n\t\tvar scope = this;\n\n\t\tvar loader = new FileLoader( this.manager );\n\t\tloader.setPath( this.path );\n\t\tloader.setResponseType( 'arraybuffer' );\n\t\tloader.load( url, function ( buffer ) {\n\n\t\t\tonLoad( scope.parse( buffer ) );\n\n\t\t}, onProgress, onError );\n\n\t},\n\n\tparse: function ( arraybuffer ) {\n\n\t\tfunction convert( font, reversed ) {\n\n\t\t\tvar round = Math.round;\n\n\t\t\tvar glyphs = {};\n\t\t\tvar scale = ( 100000 ) / ( ( font.unitsPerEm || 2048 ) * 72 );\n\n\t\t\tvar glyphIndexMap = font.encoding.cmap.glyphIndexMap;\n\t\t\tvar unicodes = Object.keys( glyphIndexMap );\n\n\t\t\tfor ( var i = 0; i < unicodes.length; i ++ ) {\n\n\t\t\t\tvar unicode = unicodes[ i ];\n\t\t\t\tvar glyph = font.glyphs.glyphs[ glyphIndexMap[ unicode ] ];\n\n\t\t\t\tif ( unicode !== undefined ) {\n\n\t\t\t\t\tvar token = {\n\t\t\t\t\t\tha: round( glyph.advanceWidth * scale ),\n\t\t\t\t\t\tx_min: round( glyph.xMin * scale ),\n\t\t\t\t\t\tx_max: round( glyph.xMax * scale ),\n\t\t\t\t\t\to: ''\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( reversed ) {\n\n\t\t\t\t\t\tglyph.path.commands = reverseCommands( glyph.path.commands );\n\n\t\t\t\t\t}\n\n\t\t\t\t\tglyph.path.commands.forEach( function ( command ) {\n\n\t\t\t\t\t\tif ( command.type.toLowerCase() === 'c' ) {\n\n\t\t\t\t\t\t\tcommand.type = 'b';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttoken.o += command.type.toLowerCase() + ' ';\n\n\t\t\t\t\t\tif ( command.x !== undefined && command.y !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x * scale ) + ' ' + round( command.y * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x1 * scale ) + ' ' + round( command.y1 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\t\ttoken.o += round( command.x2 * scale ) + ' ' + round( command.y2 * scale ) + ' ';\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} );\n\n\t\t\t\t\tglyphs[ String.fromCodePoint( glyph.unicode ) ] = token;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tglyphs: glyphs,\n\t\t\t\tfamilyName: font.getEnglishName( 'fullName' ),\n\t\t\t\tascender: round( font.ascender * scale ),\n\t\t\t\tdescender: round( font.descender * scale ),\n\t\t\t\tunderlinePosition: font.tables.post.underlinePosition,\n\t\t\t\tunderlineThickness: font.tables.post.underlineThickness,\n\t\t\t\tboundingBox: {\n\t\t\t\t\txMin: font.tables.head.xMin,\n\t\t\t\t\txMax: font.tables.head.xMax,\n\t\t\t\t\tyMin: font.tables.head.yMin,\n\t\t\t\t\tyMax: font.tables.head.yMax\n\t\t\t\t},\n\t\t\t\tresolution: 1000,\n\t\t\t\toriginal_font_information: font.tables.name\n\t\t\t};\n\n\t\t}\n\n\t\tfunction reverseCommands( commands ) {\n\n\t\t\tvar paths = [];\n\t\t\tvar path;\n\n\t\t\tcommands.forEach( function ( c ) {\n\n\t\t\t\tif ( c.type.toLowerCase() === 'm' ) {\n\n\t\t\t\t\tpath = [ c ];\n\t\t\t\t\tpaths.push( path );\n\n\t\t\t\t} else if ( c.type.toLowerCase() !== 'z' ) {\n\n\t\t\t\t\tpath.push( c );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\tvar reversed = [];\n\n\t\t\tpaths.forEach( function ( p ) {\n\n\t\t\t\tvar result = {\n\t\t\t\t\ttype: 'm',\n\t\t\t\t\tx: p[ p.length - 1 ].x,\n\t\t\t\t\ty: p[ p.length - 1 ].y\n\t\t\t\t};\n\n\t\t\t\treversed.push( result );\n\n\t\t\t\tfor ( var i = p.length - 1; i > 0; i -- ) {\n\n\t\t\t\t\tvar command = p[ i ];\n\t\t\t\t\tvar result = { type: command.type };\n\n\t\t\t\t\tif ( command.x2 !== undefined && command.y2 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x2;\n\t\t\t\t\t\tresult.y1 = command.y2;\n\t\t\t\t\t\tresult.x2 = command.x1;\n\t\t\t\t\t\tresult.y2 = command.y1;\n\n\t\t\t\t\t} else if ( command.x1 !== undefined && command.y1 !== undefined ) {\n\n\t\t\t\t\t\tresult.x1 = command.x1;\n\t\t\t\t\t\tresult.y1 = command.y1;\n\n\t\t\t\t\t}\n\n\t\t\t\t\tresult.x = p[ i - 1 ].x;\n\t\t\t\t\tresult.y = p[ i - 1 ].y;\n\t\t\t\t\treversed.push( result );\n\n\t\t\t\t}\n\n\t\t\t} );\n\n\t\t\treturn reversed;\n\n\t\t}\n\n\t\tif ( typeof opentype === 'undefined' ) {\n\n\t\t\tconsole.warn( 'THREE.TTFLoader: The loader requires opentype.js. Make sure it\\'s included before using the loader.' );\n\t\t\treturn null;\n\n\t\t}\n\n\t\treturn convert( opentype.parse( arraybuffer ), this.reversed );\n\n\t}\n\n} );\n\nexport { TTFLoader };\n","import {TorusBufferGeometry} from 'three/src/geometries/TorusGeometry';\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass TorusSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tradius_tube = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(20, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n\tsegments_tube = ParamConfig.INTEGER(12, {\n\t\trange: [1, 50],\n\t\trange_locked: [true, false],\n\t});\n}\nconst ParamsConfig = new TorusSopParamsConfig();\n\nexport class TorusSopNode extends TypedSopNode<TorusSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\t//radius : Float, tube : Float, radialSegments : Integer, tubularSegments : Integer, arc : Float\n\n\t\tconst geometry = new TorusBufferGeometry(radius, radius_tube, segments_radial, segments_tube);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TorusKnotBufferGeometry} from 'three/src/geometries/TorusKnotGeometry';\nconst THREE = {TorusKnotBufferGeometry};\nimport {TypedSopNode} from './_Base';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass TorusKnotSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1);\n\tradius_tube = ParamConfig.FLOAT(1);\n\tsegments_radial = ParamConfig.INTEGER(64, {range: [1, 128]});\n\tsegments_tube = ParamConfig.INTEGER(8, {range: [1, 32]});\n\tp = ParamConfig.INTEGER(2, {range: [1, 10]});\n\tq = ParamConfig.INTEGER(3, {range: [1, 10]});\n}\nconst ParamsConfig = new TorusKnotSopParamsConfig();\n\nexport class TorusKnotSopNode extends TypedSopNode<TorusKnotSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'torus_knot';\n\t}\n\tinitialize_node() {}\n\n\tcook() {\n\t\tconst radius = this.pv.radius;\n\t\tconst radius_tube = this.pv.radius_tube;\n\t\tconst segments_radial = this.pv.segments_radial;\n\t\tconst segments_tube = this.pv.segments_tube;\n\t\tconst p = this.pv.p;\n\t\tconst q = this.pv.q;\n\n\t\tconst geometry = new THREE.TorusKnotBufferGeometry(radius, radius_tube, segments_radial, segments_tube, p, q);\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n// import {GroupParamController} from './utils/GroupParamController';\n\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CoreTransform} from 'src/core/Transform';\n// import {ParamType} from 'src/engine/poly/ParamType';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\n\n// const DEFAULT_PARAMS = {\n// \tPIVOT: [0, 0, 0] as [number, number, number],\n// };\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass TransformSopParamConfig extends NodeParamsConfig {\n\tgroup = ParamConfig.STRING('');\n\n\t// transform\n\tt = ParamConfig.VECTOR3([0, 0, 0]);\n\tr = ParamConfig.VECTOR3([0, 0, 0]);\n\ts = ParamConfig.VECTOR3([1, 1, 1]);\n\tscale = ParamConfig.FLOAT(1);\n\tlook_at = ParamConfig.OPERATOR_PATH('');\n\tup = ParamConfig.VECTOR3([0, 1, 0]);\n\tpivot = ParamConfig.VECTOR3([0, 0, 0]);\n}\nconst ParamsConfig = new TransformSopParamConfig();\n\nexport class TransformSopNode extends TypedSopNode<TransformSopParamConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'transform';\n\t}\n\t// allow_eval_key_check() {\n\t// \treturn true;\n\t// }\n\n\tstatic displayed_input_names(): string[] {\n\t\treturn ['geometry to transform'];\n\t}\n\n\t// constructor(scene: PolyScene) {\n\t// \tsuper(scene);\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\tcook(input_contents: CoreGroup[]) {\n\t\tconst objects = input_contents[0].objects();\n\t\tconst matrix = this._core_transform.matrix(this.pv.t, this.pv.r, this.pv.s, this.pv.scale);\n\n\t\tif (this.pv.group === '') {\n\t\t\tfor (let object of objects) {\n\t\t\t\tlet geometry;\n\t\t\t\tif ((geometry = object.geometry) != null) {\n\t\t\t\t\tgeometry.translate(-this.pv.pivot.x, -this.pv.pivot.y, -this.pv.pivot.z);\n\t\t\t\t\tgeometry.applyMatrix(matrix);\n\t\t\t\t\tgeometry.translate(this.pv.pivot.x, this.pv.pivot.y, this.pv.pivot.z);\n\t\t\t\t} else {\n\t\t\t\t\tobject.applyMatrix(matrix);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tconst core_group = CoreGroup.from_objects(objects);\n\t\t\tconst points = core_group.points_from_group(this.pv.group);\n\t\t\tfor (let point of points) {\n\t\t\t\tconst position = point.position().sub(this.pv.pivot);\n\t\t\t\tposition.applyMatrix4(matrix);\n\t\t\t\tpoint.set_position(position.add(this.pv.pivot));\n\t\t\t}\n\t\t}\n\n\t\tthis.set_objects(objects);\n\t}\n}\n","import {TypedSopNode} from './_Base';\n\nimport {Vector3} from 'three/src/math/Vector3';\nimport {CylinderBufferGeometry} from 'three/src/geometries/CylinderGeometry';\nimport {CoreTransform} from 'src/core/Transform';\n\nconst DEFAULT_UP = new Vector3(0, 1, 0);\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nclass TubeSopParamsConfig extends NodeParamsConfig {\n\tradius = ParamConfig.FLOAT(1, {range: [0, 1]});\n\theight = ParamConfig.FLOAT(1, {range: [0, 1]});\n\tsegments_radial = ParamConfig.INTEGER(12, {range: [3, 20], range_locked: [true, false]});\n\tsegments_height = ParamConfig.INTEGER(1, {range: [1, 20], range_locked: [true, false]});\n\tcap = ParamConfig.BOOLEAN(1);\n\tcenter = ParamConfig.VECTOR3([0, 0, 0]);\n\tdirection = ParamConfig.VECTOR3([0, 0, 1]);\n}\nconst ParamsConfig = new TubeSopParamsConfig();\n\nexport class TubeSopNode extends TypedSopNode<TubeSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'tube';\n\t}\n\n\tprivate _core_transform = new CoreTransform();\n\n\tcook() {\n\t\tconst geometry = new CylinderBufferGeometry(\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.radius,\n\t\t\tthis.pv.height,\n\t\t\tthis.pv.segments_radial,\n\t\t\tthis.pv.segments_height,\n\t\t\t!this.pv.cap\n\t\t);\n\n\t\tthis._core_transform.rotate_geometry(geometry, DEFAULT_UP, this.pv.direction);\n\t\tgeometry.translate(this.pv.center.x, this.pv.center.y, this.pv.center.z);\n\n\t\tthis.set_geometry(geometry);\n\t}\n}\n","import {Camera} from 'three/src/cameras/Camera';\nimport {Object3D} from 'three/src/core/Object3D';\nimport {Matrix4} from 'three/src/math/Matrix4';\nimport {Vector3} from 'three/src/math/Vector3';\nimport {TypedSopNode} from './_Base';\nimport {CoreGroup} from 'src/core/geometry/Group';\nimport {CameraController} from 'src/core/CameraController';\nimport {BaseCameraObjNodeType} from 'src/engine/nodes/obj/_BaseCamera';\n\n// const MODE = [];\nconst UV_NAME = 'uv';\n\nimport {NodeParamsConfig, ParamConfig} from 'src/engine/nodes/utils/params/ParamsConfig';\nimport {InputCloneMode} from 'src/engine/poly/InputCloneMode';\nimport {NodeContext} from 'src/engine/poly/NodeContext';\nimport {BaseObjNodeType} from '../obj/_Base';\nclass UvProjectSopParamsConfig extends NodeParamsConfig {\n\tcamera = ParamConfig.OPERATOR_PATH('/perspective_camera1', {\n\t\tnode_selection: {\n\t\t\tcontext: NodeContext.OBJ,\n\t\t},\n\t});\n\t// force_aspect = ParamConfig.BOOLEAN(0)\n\t// aspect = ParamConfig.FLOAT(1, {\n\t// \trange: [0, 2],\n\t// \tvisible_if: {force_aspect: 1},\n\t// })\n}\nconst ParamsConfig = new UvProjectSopParamsConfig();\n\nexport class UvProjectSopNode extends TypedSopNode<UvProjectSopParamsConfig> {\n\tparams_config = ParamsConfig;\n\tstatic type() {\n\t\treturn 'uv_project';\n\t}\n\n\tprivate _camera_controller: CameraController = new CameraController(this._update_uvs_from_camera.bind(this));\n\t// private _param_camera: string\n\tprivate _processed_core_group: CoreGroup | undefined;\n\t// private _camera_node: BaseCameraObjNodeType | undefined;\n\tprivate _camera_object: Camera | undefined;\n\n\tinitialize_node() {\n\t\tthis.io.inputs.set_count(1);\n\t\tthis.io.inputs.init_inputs_clonable_state([InputCloneMode.FROM_NODE]);\n\t}\n\n\tcook(core_groups: CoreGroup[]) {\n\t\tthis._processed_core_group = core_groups[0];\n\n\t\tconst camera_node = this.p.camera.found_node();\n\t\tif (camera_node != null) {\n\t\t\tthis._camera_object = (camera_node as BaseCameraObjNodeType).object;\n\t\t\tthis._camera_controller.set_target(this._camera_object);\n\t\t\t// this._add_camera_event()\n\t\t} else {\n\t\t\tthis._camera_object = undefined;\n\t\t\t//this._remove_camera_event()\n\t\t\tthis._camera_controller.remove_target();\n\t\t}\n\n\t\tthis.set_core_group(this._processed_core_group);\n\t}\n\n\t_update_uvs_from_camera(look_at_target: Object3D) {\n\t\t// let old_aspect;\n\t\t// if (this.pv.force_aspect) {\n\t\t// \told_aspect = this._camera_object.aspect;\n\t\t// \tthis._camera_node.setup_for_aspect_ratio(this.pv.aspect);\n\t\t// }\n\n\t\tif (this._processed_core_group && this.parent) {\n\t\t\tconst points = this._processed_core_group.points();\n\t\t\tconst obj_world_matrix = (this.parent as BaseObjNodeType).object.matrixWorld;\n\t\t\tpoints.forEach((point) => {\n\t\t\t\tconst position = point.position();\n\t\t\t\tconst uvw = this._vector_in_camera_space(position, obj_world_matrix);\n\t\t\t\tif (uvw) {\n\t\t\t\t\tconst uv = {\n\t\t\t\t\t\tx: 1 - (uvw[0] * 0.5 + 0.5),\n\t\t\t\t\t\ty: uvw[1] * 0.5 + 0.5,\n\t\t\t\t\t};\n\t\t\t\t\tpoint.set_attrib_value(UV_NAME, uv);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// if (this.pv.force_aspect) {\n\t\t\t// \tthis._camera_node.setup_for_aspect_ratio(old_aspect);\n\t\t\t// }\n\t\t}\n\t}\n\n\tprivate _vector_in_camera_space(vector: Vector3, obj_world_matrix: Matrix4) {\n\t\tif (this._camera_object) {\n\t\t\tvector.applyMatrix4(obj_world_matrix);\n\t\t\treturn vector.project(this._camera_object).toArray();\n\t\t}\n\t}\n}\n","import {Object3D} from 'three/src/core/Object3D';\n\nenum EVENT {\n\tCHANGE = 'change',\n\tMOVEEND = 'moveend',\n}\n\ntype CameraControllerCallback = (target: Object3D) => void;\n\nexport class CameraController {\n\tprivate _update_always: boolean = true;\n\tprivate _listener: any;\n\tprivate _target: Object3D | undefined;\n\tprivate _listener_added: boolean = false;\n\n\tconstructor(private _callback: CameraControllerCallback) {\n\t\tthis._listener = this._execute_callback.bind(this);\n\t}\n\n\tremove_target() {\n\t\tthis.set_target(undefined);\n\t}\n\tset_target(target: Object3D | undefined) {\n\t\tif (!target) {\n\t\t\tthis._remove_camera_event();\n\t\t}\n\n\t\tconst old_target = this._target;\n\t\tthis._target = target;\n\n\t\tif (this._target != null) {\n\t\t\tthis._execute_callback();\n\t\t}\n\n\t\tif (\n\t\t\t(this._target != null ? this._target.uuid : undefined) !==\n\t\t\t(old_target != null ? old_target.uuid : undefined)\n\t\t) {\n\t\t\tthis._add_camera_event();\n\t\t}\n\t}\n\n\tset_update_always(new_update_always: boolean) {\n\t\tthis._remove_camera_event();\n\n\t\tthis._update_always = new_update_always;\n\n\t\tthis._add_camera_event();\n\t}\n\n\tprivate _current_event_name() {\n\t\tif (this._update_always) {\n\t\t\treturn EVENT.CHANGE;\n\t\t} else {\n\t\t\treturn EVENT.MOVEEND;\n\t\t}\n\t}\n\n\tprivate _add_camera_event() {\n\t\tif (this._listener_added) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.addEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = true;\n\t\t}\n\t}\n\n\tprivate _remove_camera_event() {\n\t\tif (this._listener_added !== true) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (this._target != null) {\n\t\t\tthis._target.removeEventListener(this._current_event_name(), this._listener);\n\t\t\tthis._listener_added = false;\n\t\t}\n\t}\n\n\tprivate _execute_callback() {\n\t\tif (this._target != null) {\n\t\t\tthis._callback(this._target);\n\t\t}\n\t}\n}\n","import {PolyScene} from 'src/engine/scene/PolyScene';\n// import {JsonImporterVisitor} from './Visitor'\nimport {SceneJsonExporterData} from '../export/Scene';\nimport {JsonImportDispatcher} from './Dispatcher';\n\nexport class SceneJsonImporter {\n\tconstructor(private _data: SceneJsonExporterData) {}\n\n\tstatic load_data(data: SceneJsonExporterData) {\n\t\tconst importer = new SceneJsonImporter(data);\n\t\treturn importer.scene();\n\t}\n\n\tasync scene(): Promise<PolyScene> {\n\t\tconst scene = new PolyScene();\n\t\tscene.loading_controller.mark_as_loading();\n\n\t\t// scene.set_js_version(this._data['__js_version'])\n\t\tconst properties = this._data['properties'];\n\t\tif (properties) {\n\t\t\t// scene.set_name(properties['name'])\n\t\t\tscene.set_frame(properties['frame'] || 1);\n\t\t\tconst frame_range = properties['frame_range'] || [];\n\t\t\tscene.time_controller.set_frame_range(frame_range[0] || 1, frame_range[1] || 100);\n\t\t\tconst frame_range_locked = properties['frame_range_locked'];\n\t\t\tif (frame_range_locked) {\n\t\t\t\tscene.time_controller.set_frame_range_locked(frame_range_locked[0], frame_range_locked[1]);\n\t\t\t}\n\t\t\tscene.time_controller.set_fps(properties['fps'] || 30);\n\t\t\tif (properties['master_camera_node_path']) {\n\t\t\t\tscene.cameras_controller.set_master_camera_node_path(properties['master_camera_node_path']);\n\t\t\t}\n\t\t}\n\n\t\t// we block to ensure that nodes will not run their dirty_hooks\n\t\t// which would trigger operator_path params to search for nodes that\n\t\t// may not exist yet\n\t\tscene.cooker.block();\n\n\t\tconst importer = JsonImportDispatcher.dispatch_node(scene.root);\n\t\tif (this._data['root']) {\n\t\t\timporter.process_data(this._data['root']);\n\t\t}\n\t\tif (this._data['ui']) {\n\t\t\timporter.process_ui_data(this._data['ui']);\n\t\t}\n\n\t\tawait scene.loading_controller.mark_as_loaded();\n\t\tscene.cooker.unblock();\n\t\t// DO NOT wait for cooks here,\n\t\t// as a viewer will only be created once everything has cooked\n\t\t// which would be a problem for env_map or other nodes relying on the renderer being created\n\t\t// await scene.wait_for_cooks_completed();\n\n\t\treturn scene;\n\t}\n}\n","import {BaseNodeType} from 'src/engine/nodes/_Base';\nimport lodash_isString from 'lodash/isString';\nimport lodash_isBoolean from 'lodash/isBoolean';\nimport lodash_isObject from 'lodash/isObject';\nimport lodash_isNumber from 'lodash/isNumber';\nimport lodash_isArray from 'lodash/isArray';\n\nimport {NodeJsonExporterData, NodeJsonExporterUIData, InputData} from '../export/Node';\nimport {ParamJsonExporterData, SimpleParamJsonExporterData, ComplexParamJsonExporterData} from '../export/Param';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {JsonImportDispatcher} from './Dispatcher';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nexport class NodeJsonImporter<T extends BaseNodeType> {\n\tconstructor(protected _node: T) {}\n\n\tprocess_data(data: NodeJsonExporterData) {\n\t\tthis.create_nodes(data['nodes']);\n\t\tthis.set_selection(data['selection']);\n\n\t\t// inputs clone\n\t\tif (this._node.io.inputs.override_clonable_state_allowed()) {\n\t\t\tconst override = data['override_clonable_state'];\n\t\t\tif (override) {\n\t\t\t\tthis._node.io.inputs.set_override_clonable_state(override);\n\t\t\t}\n\t\t}\n\n\t\tthis.set_flags(data);\n\t\tthis.set_params(data['params']);\n\n\t\tthis.from_data_custom(data);\n\n\t\tthis._node.lifecycle.set_creation_completed();\n\t}\n\tprocess_inputs_data(data: NodeJsonExporterData) {\n\t\tthis.set_inputs(data['inputs']);\n\t}\n\n\tprocess_ui_data(data: NodeJsonExporterUIData) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst ui_data = this._node.ui_data;\n\t\tconst pos = data['pos'];\n\t\tif (pos) {\n\t\t\tconst vector = new Vector2().fromArray(pos);\n\t\t\tui_data.set_position(vector);\n\t\t}\n\t\tconst comment = data['comment'];\n\t\tif (comment) {\n\t\t\tui_data.set_comment(comment);\n\t\t}\n\t\tthis.process_nodes_ui_data(data['nodes']);\n\t}\n\n\tcreate_nodes(data?: Dictionary<NodeJsonExporterData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tconst nodes: BaseNodeType[] = [];\n\t\tfor (let node_name of node_names) {\n\t\t\tconst node_data = data[node_name];\n\t\t\tconst node_type = node_data['type'];\n\t\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\t\tconst node = this._node.create_node(node_type);\n\t\t\t\tif (node) {\n\t\t\t\t\tnode.set_name(node_name);\n\t\t\t\t\tnodes.push(node);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tconst importers = [];\n\t\tlet index = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = JsonImportDispatcher.dispatch_node(node); //.visit(JsonImporterVisitor)\n\t\t\timporters.push(importer);\n\t\t\timporter.process_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t\tindex = 0;\n\t\tfor (let node of nodes) {\n\t\t\tconst importer = importers[index];\n\t\t\timporter.process_inputs_data(data[node.name]);\n\t\t\tindex++;\n\t\t}\n\t}\n\tset_selection(data?: string[]) {\n\t\tif (this._node.children_allowed() && this._node.children_controller) {\n\t\t\tif (data && data.length > 0) {\n\t\t\t\tconst selected_nodes: BaseNodeType[] = [];\n\t\t\t\tdata.forEach((node_name) => {\n\t\t\t\t\tconst node = this._node.node(node_name);\n\t\t\t\t\tif (node) {\n\t\t\t\t\t\tselected_nodes.push(node);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tthis._node.children_controller.selection.set(selected_nodes);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_flags(data: NodeJsonExporterData) {\n\t\tconst flags = data['flags'];\n\t\tif (flags) {\n\t\t\tconst bypass = flags['bypass'];\n\t\t\tif (bypass != null) {\n\t\t\t\tthis._node.flags?.bypass?.set(bypass);\n\t\t\t}\n\t\t\tconst display = flags['display'];\n\t\t\tif (display != null) {\n\t\t\t\tthis._node.flags?.display?.set(display);\n\t\t\t}\n\t\t}\n\t}\n\n\tset_inputs(inputs_data?: InputData[]) {\n\t\tif (!inputs_data) {\n\t\t\treturn;\n\t\t}\n\n\t\tinputs_data.forEach((input_data, i) => {\n\t\t\tif (input_data && this._node.parent) {\n\t\t\t\tif (lodash_isString(input_data)) {\n\t\t\t\t\tconst input_node_name = input_data;\n\t\t\t\t\tconst input_node = this._node.parent.node(input_node_name);\n\t\t\t\t\tthis._node.set_input(i, input_node);\n\t\t\t\t} else {\n\t\t\t\t\tconst input_node = this._node.parent.node(input_data['node']);\n\t\t\t\t\tconst input_name = input_data['name'];\n\t\t\t\t\tif (this._node.io.inputs.has_named_input(input_name)) {\n\t\t\t\t\t\tthis._node.set_input(input_data['name'], input_node, input_data['output']);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(`${this._node.full_path()} has no input named ${input_name}`);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tprocess_nodes_ui_data(data: Dictionary<NodeJsonExporterUIData>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\n\t\tconst node_names = Object.keys(data);\n\t\tnode_names.forEach((node_name) => {\n\t\t\tconst node = this._node.node(node_name);\n\t\t\tif (node) {\n\t\t\t\tconst node_data = data[node_name];\n\t\t\t\tJsonImportDispatcher.dispatch_node(node).process_ui_data(node_data);\n\t\t\t\t// node.visit(JsonImporterVisitor).process_ui_data(node_data);\n\t\t\t}\n\t\t});\n\t}\n\n\tset_params(data?: Dictionary<ParamJsonExporterData<ParamType>>) {\n\t\tif (!data) {\n\t\t\treturn;\n\t\t}\n\t\tconst param_names = Object.keys(data);\n\n\t\tfor (let param_name of param_names) {\n\t\t\tconst param_data = data[param_name];\n\t\t\tif (this._is_param_data_complex(param_data)) {\n\t\t\t\tthis._process_param_data_complex(param_name, param_data as ComplexParamJsonExporterData<ParamType>);\n\t\t\t} else {\n\t\t\t\tthis._process_param_data_simple(param_name, param_data as SimpleParamJsonExporterData<ParamType>);\n\t\t\t}\n\t\t}\n\t\t// those hooks are useful for some gl nodes,\n\t\t// such as the constant, which needs to update its connections\n\t\t// based on another parameter, which will be set just before\n\t\tthis._node.params.run_on_scene_load_hooks();\n\t}\n\n\tprivate _process_param_data_simple(param_name: string, param_data: SimpleParamJsonExporterData<ParamType>) {\n\t\tthis._node.params.get(param_name)?.set(param_data);\n\t}\n\n\tprivate _process_param_data_complex(param_name: string, param_data: ComplexParamJsonExporterData<ParamType>) {\n\t\tconst has_param = this._node.params.has_param(param_name);\n\t\tconst param_type = param_data['type']!;\n\n\t\tlet has_param_and_same_type = false;\n\t\tlet param;\n\t\tif (has_param) {\n\t\t\tparam = this._node.params.get(param_name);\n\t\t\t// we can safely consider same type if param_type is not mentioned\n\t\t\tif ((param && param.type == param_type) || param_type == null) {\n\t\t\t\thas_param_and_same_type = true;\n\t\t\t}\n\t\t}\n\t\tif (has_param_and_same_type) {\n\t\t\tparam = this._node.params.get(param_name);\n\t\t\tif (param) {\n\t\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t// param.visit(JsonImporterVisitor).process_data(param_data);\n\t\t\t}\n\t\t} else {\n\t\t\tconst options = param_data['options'];\n\t\t\tif (options && param_type) {\n\t\t\t\tconst is_spare = options['spare'] === true;\n\t\t\t\tif (is_spare && param_data['default_value']) {\n\t\t\t\t\tif (has_param) {\n\t\t\t\t\t\tthis._node.params.delete_param(param_name);\n\t\t\t\t\t}\n\t\t\t\t\tparam = this._node.add_param(param_type, param_name, param_data['default_value'], options);\n\t\t\t\t\tif (param) {\n\t\t\t\t\t\tJsonImportDispatcher.dispatch_param(param).process_data(param_data);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprivate _is_param_data_complex(param_data: ParamJsonExporterData<ParamType>): boolean {\n\t\t// we can test here most param value serialized, except for ramp\n\t\tif (\n\t\t\tlodash_isString(param_data) ||\n\t\t\tlodash_isNumber(param_data) ||\n\t\t\tlodash_isArray(param_data) ||\n\t\t\tlodash_isBoolean(param_data)\n\t\t) {\n\t\t\treturn false;\n\t\t}\n\n\t\tif (lodash_isObject(param_data)) {\n\t\t\tif (Object.keys(param_data).includes('type')) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tfrom_data_custom(data: NodeJsonExporterData) {}\n}\n","import {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {TypedMultipleParam} from 'src/engine/params/_Multiple';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nexport class ParamMultipleJsonImporter extends ParamJsonImporter<TypedMultipleParam<ParamType>> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType>) {\n\t\t// const components = data['components'];\n\t\t// if (components) {\n\t\t// \tObject.keys(components).forEach((component_name) => {\n\t\t// \t\tconst param_name = `${this._param.name}${component_name}`;\n\t\t// \t\tconst component_param = this._param.node.params\n\t\t// \t\t\t.get(this._param.name)\n\t\t// \t\t\t?.components?.filter((c) => c.name == param_name)[0];\n\t\t// \t\tif (component_param) {\n\t\t// \t\t\tconst component_data = components[component_name];\n\t\t// \t\t\tJsonImportDispatcher.dispatch_param(component_param as FloatParam).process_data(component_data);\n\t\t// \t\t}\n\t\t// \t});\n\t\t// }\n\t}\n}\n","// import lodash_isString from 'lodash/isString';\nimport {ParamJsonImporter} from '../Param';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {StringParam} from 'src/engine/params/String';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nconst LINE_BREAK_REGEXP = /\\\\n+/g;\n\nexport class ParamStringJsonImporter extends ParamJsonImporter<StringParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.STRING>) {\n\t\tlet raw_input = data['raw_input'];\n\t\tif (raw_input !== undefined) {\n\t\t\t// if (lodash_isString(value)) {\n\t\t\traw_input = raw_input.replace(LINE_BREAK_REGEXP, '\\n');\n\t\t\tthis._param.set(raw_input);\n\t\t\t// }\n\t\t}\n\t}\n}\n","import {ParamJsonImporter} from '../Param';\n// import {RampValueJson} from 'src/engine/params/ramp/RampValue';\nimport {ComplexParamJsonExporterData} from '../../export/Param';\nimport {RampParam} from 'src/engine/params/Ramp';\nimport {ParamType} from 'src/engine/poly/ParamType';\n\nexport class ParamRampJsonImporter extends ParamJsonImporter<RampParam> {\n\tadd_main(data: ComplexParamJsonExporterData<ParamType.RAMP>) {\n\t\tconst raw_input = data['raw_input']; // as RampValueJson;\n\t\tif (raw_input) {\n\t\t\t// const ramp_value = RampValue.from_json(value);\n\t\t\tthis._param.set(raw_input);\n\t\t}\n\t}\n}\n","/**\n * @author alteredq / http://alteredqualia.com/\n *\n * Full-screen textured quad shader\n */\n\n\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t\"tDiffuse\": { value: null },\n\t\t\"opacity\": { value: 1.0 }\n\n\t},\n\n\tvertexShader: [\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvUv = uv;\",\n\t\t\"\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" ),\n\n\tfragmentShader: [\n\n\t\t\"uniform float opacity;\",\n\n\t\t\"uniform sampler2D tDiffuse;\",\n\n\t\t\"varying vec2 vUv;\",\n\n\t\t\"void main() {\",\n\n\t\t\"\tvec4 texel = texture2D( tDiffuse, vUv );\",\n\t\t\"\tgl_FragColor = opacity * texel;\",\n\n\t\t\"}\"\n\n\t].join( \"\\n\" )\n\n};\n\nexport { CopyShader };\n","import {ShaderMaterial} from 'three/src/materials/ShaderMaterial';\nimport {UniformsUtils} from 'three/src/renderers/shaders/UniformsUtils';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar ShaderPass = function ( shader, textureID ) {\n\n\tPass.call( this );\n\n\tthis.textureID = ( textureID !== undefined ) ? textureID : \"tDiffuse\";\n\n\tif ( shader instanceof ShaderMaterial ) {\n\n\t\tthis.uniforms = shader.uniforms;\n\n\t\tthis.material = shader;\n\n\t} else if ( shader ) {\n\n\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\tthis.material = new ShaderMaterial( {\n\n\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\tuniforms: this.uniforms,\n\t\t\tvertexShader: shader.vertexShader,\n\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t} );\n\n\t}\n\n\tthis.fsQuad = new Pass.FullScreenQuad( this.material );\n\n};\n\nShaderPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: ShaderPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n} );\n\nexport { ShaderPass };\n","/**\n * @author alteredq / http://alteredqualia.com/\n */\n\n\nimport { Pass } from \"../postprocessing/Pass.js\";\n\nvar MaskPass = function ( scene, camera ) {\n\n\tPass.call( this );\n\n\tthis.scene = scene;\n\tthis.camera = camera;\n\n\tthis.clear = true;\n\tthis.needsSwap = false;\n\n\tthis.inverse = false;\n\n};\n\nMaskPass.prototype = Object.assign( Object.create( Pass.prototype ), {\n\n\tconstructor: MaskPass,\n\n\trender: function ( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tvar context = renderer.getContext();\n\t\tvar state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tvar writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n} );\n\n\nvar ClearMaskPass = function () {\n\n\tPass.call( this );\n\n\tthis.needsSwap = false;\n\n};\n\nClearMaskPass.prototype = Object.create( Pass.prototype );\n\nObject.assign( ClearMaskPass.prototype, {\n\n\trender: function ( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n} );\n\nexport { MaskPass, ClearMaskPass };\n","import {Clock} from 'three/src/core/Clock';\nimport {LinearFilter} from 'three/src/constants';\nimport {Mesh} from 'three/src/objects/Mesh';\nimport {OrthographicCamera} from 'three/src/cameras/OrthographicCamera';\nimport {PlaneBufferGeometry} from 'three/src/geometries/PlaneGeometry';\nimport {RGBAFormat} from 'three/src/constants';\nimport {Vector2} from 'three/src/math/Vector2';\nimport {WebGLRenderTarget} from 'three/src/renderers/WebGLRenderTarget';\n/**\n * @author alteredq / http://alteredqualia.com/\n */\n\nimport { CopyShader } from \"../shaders/CopyShader.js\";\nimport { ShaderPass } from \"../postprocessing/ShaderPass.js\";\nimport { MaskPass } from \"../postprocessing/MaskPass.js\";\nimport { ClearMaskPass } from \"../postprocessing/MaskPass.js\";\n\nvar EffectComposer = function ( renderer, renderTarget ) {\n\n\tthis.renderer = renderer;\n\n\tif ( renderTarget === undefined ) {\n\n\t\tvar parameters = {\n\t\t\tminFilter: LinearFilter,\n\t\t\tmagFilter: LinearFilter,\n\t\t\tformat: RGBAFormat,\n\t\t\tstencilBuffer: false\n\t\t};\n\n\t\tvar size = renderer.getSize( new Vector2() );\n\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\tthis._width = size.width;\n\t\tthis._height = size.height;\n\n\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t} else {\n\n\t\tthis._pixelRatio = 1;\n\t\tthis._width = renderTarget.width;\n\t\tthis._height = renderTarget.height;\n\n\t}\n\n\tthis.renderTarget1 = renderTarget;\n\tthis.renderTarget2 = renderTarget.clone();\n\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\tthis.writeBuffer = this.renderTarget1;\n\tthis.readBuffer = this.renderTarget2;\n\n\tthis.renderToScreen = true;\n\n\tthis.passes = [];\n\n\t// dependencies\n\n\tif ( CopyShader === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t}\n\n\tif ( ShaderPass === undefined ) {\n\n\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t}\n\n\tthis.copyPass = new ShaderPass( CopyShader );\n\n\tthis.clock = new Clock();\n\n};\n\nObject.assign( EffectComposer.prototype, {\n\n\tswapBuffers: function () {\n\n\t\tvar tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t},\n\n\taddPass: function ( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t},\n\n\tinsertPass: function ( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\n\t},\n\n\tisLastEnabledPass: function ( passIndex ) {\n\n\t\tfor ( var i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t},\n\n\trender: function ( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tvar currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tvar maskActive = false;\n\n\t\tvar pass, i, il = this.passes.length;\n\n\t\tfor ( i = 0; i < il; i ++ ) {\n\n\t\t\tpass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tvar context = this.renderer.getContext();\n\t\t\t\t\tvar stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t},\n\n\treset: function ( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tvar size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t},\n\n\tsetSize: function ( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tvar effectiveWidth = this._width * this._pixelRatio;\n\t\tvar effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( var i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t},\n\n\tsetPixelRatio: function ( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n} );\n\n\nvar Pass = function () {\n\n\t// if set to true, the pass is processed by the composer\n\tthis.enabled = true;\n\n\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\tthis.needsSwap = true;\n\n\t// if set to true, the pass clears its buffer before rendering\n\tthis.clear = false;\n\n\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\tthis.renderToScreen = false;\n\n};\n\nObject.assign( Pass.prototype, {\n\n\tsetSize: function ( /* width, height */ ) {},\n\n\trender: function ( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n} );\n\n// Helper for passes that need to fill the viewport with a single quad.\nPass.FullScreenQuad = ( function () {\n\n\tvar camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\tvar geometry = new PlaneBufferGeometry( 2, 2 );\n\n\tvar FullScreenQuad = function ( material ) {\n\n\t\tthis._mesh = new Mesh( geometry, material );\n\n\t};\n\n\tObject.defineProperty( FullScreenQuad.prototype, 'material', {\n\n\t\tget: function () {\n\n\t\t\treturn this._mesh.material;\n\n\t\t},\n\n\t\tset: function ( value ) {\n\n\t\t\tthis._mesh.material = value;\n\n\t\t}\n\n\t} );\n\n\tObject.assign( FullScreenQuad.prototype, {\n\n\t\tdispose: function () {\n\n\t\t\tthis._mesh.geometry.dispose();\n\n\t\t},\n\n\t\trender: function ( renderer ) {\n\n\t\t\trenderer.render( this._mesh, camera );\n\n\t\t}\n\n\t} );\n\n\treturn FullScreenQuad;\n\n} )();\n\nexport { EffectComposer, Pass };\n","import {PolyScene} from './scene/PolyScene';\nimport 'src/engine/poly/registers/All';\n\nimport {SceneJsonExporter, SceneJsonExporterData} from './io/json/export/Scene';\nimport default_scene_data from 'src/../public/examples/scenes/default_simple.json';\nimport {SceneJsonImporter} from './io/json/import/Scene';\n\nexport class Tester {\n\tstatic async load_scene() {\n\t\tconst scene = await SceneJsonImporter.load_data(default_scene_data as SceneJsonExporterData);\n\n\t\treturn scene;\n\t}\n\tstatic create_scene() {\n\t\tconst scene = new PolyScene();\n\t\tscene.root.create_node('ambient_light');\n\n\t\tscene.loading_controller.mark_as_loaded();\n\n\t\tconst perspective_camera1 = scene.root.create_node('perspective_camera');\n\t\tscene.cameras_controller.set_master_camera_node_path(perspective_camera1.full_path());\n\t\tperspective_camera1.p.t.z.set(10);\n\n\t\tconst geo1 = scene.root.create_node('geo');\n\t\tgeo1.flags.display.set(true);\n\t\tconst box1 = geo1.create_node('box');\n\t\tbox1.flags.display.set(true);\n\t\tgeo1.p.r.y.set('$F+20');\n\n\t\treturn scene;\n\t}\n\n\tstatic async test_save_and_load(scene: PolyScene) {\n\t\tconst data = new SceneJsonExporter(scene).data();\n\t\tconsole.log(JSON.stringify(data));\n\t\tconst scene2 = await SceneJsonImporter.load_data(data);\n\t\tconst data2 = new SceneJsonExporter(scene2).data();\n\t\tconsole.log(JSON.stringify(data2));\n\t}\n}\n\nconst stylesheet = document.createElement('style');\nstylesheet.innerText = 'html, body, canvas, .canvas_container {height: 100%; margin: 0px;} canvas {display: block;}';\ndocument.body.appendChild(stylesheet);\nconst container = document.createElement('div');\ncontainer.classList.add('canvas_container');\ndocument.body.appendChild(container);\n\nTester.load_scene().then((scene) => {\n\t(window as any).scene = scene;\n\tscene.cameras_controller.master_camera_node?.create_viewer(container);\n\tscene.play();\n});\n\n// Tester.test_save_and_load(scene);\n"],"sourceRoot":""}