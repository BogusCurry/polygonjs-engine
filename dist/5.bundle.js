(window.webpackJsonpPOLY=window.webpackJsonpPOLY||[]).push([[5],{612:function(t,e,r){"use strict";r.r(e),r.d(e,"OBJLoader",(function(){return f}));var s=r(329),i=r(341),a=r(328),n=r(120),o=r(356),l=r(375),h=r(335),c=r(330),u=r(340),p=r(446),m=r(407),d=r(374),f=function(){var t=/^[og]\s*(.+)?/,e=/^mtllib /,r=/^usemtl /,f=/^usemap /;function v(){var t={objects:[],object:{},vertices:[],normals:[],colors:[],uvs:[],materials:{},materialLibraries:[],startObject:function(t,e){if(this.object&&!1===this.object.fromDeclaration)return this.object.name=t,void(this.object.fromDeclaration=!1!==e);var r=this.object&&"function"==typeof this.object.currentMaterial?this.object.currentMaterial():void 0;if(this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0),this.object={name:t||"",fromDeclaration:!1!==e,geometry:{vertices:[],normals:[],colors:[],uvs:[]},materials:[],smooth:!0,startMaterial:function(t,e){var r=this._finalize(!1);r&&(r.inherited||r.groupCount<=0)&&this.materials.splice(r.index,1);var s={index:this.materials.length,name:t||"",mtllib:Array.isArray(e)&&e.length>0?e[e.length-1]:"",smooth:void 0!==r?r.smooth:this.smooth,groupStart:void 0!==r?r.groupEnd:0,groupEnd:-1,groupCount:-1,inherited:!1,clone:function(t){var e={index:"number"==typeof t?t:this.index,name:this.name,mtllib:this.mtllib,smooth:this.smooth,groupStart:0,groupEnd:-1,groupCount:-1,inherited:!1};return e.clone=this.clone.bind(e),e}};return this.materials.push(s),s},currentMaterial:function(){if(this.materials.length>0)return this.materials[this.materials.length-1]},_finalize:function(t){var e=this.currentMaterial();if(e&&-1===e.groupEnd&&(e.groupEnd=this.geometry.vertices.length/3,e.groupCount=e.groupEnd-e.groupStart,e.inherited=!1),t&&this.materials.length>1)for(var r=this.materials.length-1;r>=0;r--)this.materials[r].groupCount<=0&&this.materials.splice(r,1);return t&&0===this.materials.length&&this.materials.push({name:"",smooth:this.smooth}),e}},r&&r.name&&"function"==typeof r.clone){var s=r.clone(0);s.inherited=!0,this.object.materials.push(s)}this.objects.push(this.object)},finalize:function(){this.object&&"function"==typeof this.object._finalize&&this.object._finalize(!0)},parseVertexIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseNormalIndex:function(t,e){var r=parseInt(t,10);return 3*(r>=0?r-1:r+e/3)},parseUVIndex:function(t,e){var r=parseInt(t,10);return 2*(r>=0?r-1:r+e/2)},addVertex:function(t,e,r){var s=this.vertices,i=this.object.geometry.vertices;i.push(s[t+0],s[t+1],s[t+2]),i.push(s[e+0],s[e+1],s[e+2]),i.push(s[r+0],s[r+1],s[r+2])},addVertexPoint:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addVertexLine:function(t){var e=this.vertices;this.object.geometry.vertices.push(e[t+0],e[t+1],e[t+2])},addNormal:function(t,e,r){var s=this.normals,i=this.object.geometry.normals;i.push(s[t+0],s[t+1],s[t+2]),i.push(s[e+0],s[e+1],s[e+2]),i.push(s[r+0],s[r+1],s[r+2])},addColor:function(t,e,r){var s=this.colors,i=this.object.geometry.colors;i.push(s[t+0],s[t+1],s[t+2]),i.push(s[e+0],s[e+1],s[e+2]),i.push(s[r+0],s[r+1],s[r+2])},addUV:function(t,e,r){var s=this.uvs,i=this.object.geometry.uvs;i.push(s[t+0],s[t+1]),i.push(s[e+0],s[e+1]),i.push(s[r+0],s[r+1])},addUVLine:function(t){var e=this.uvs;this.object.geometry.uvs.push(e[t+0],e[t+1])},addFace:function(t,e,r,s,i,a,n,o,l){var h=this.vertices.length,c=this.parseVertexIndex(t,h),u=this.parseVertexIndex(e,h),p=this.parseVertexIndex(r,h);if(this.addVertex(c,u,p),this.colors.length>0&&this.addColor(c,u,p),void 0!==s&&""!==s){var m=this.uvs.length;c=this.parseUVIndex(s,m),u=this.parseUVIndex(i,m),p=this.parseUVIndex(a,m),this.addUV(c,u,p)}if(void 0!==n&&""!==n){var d=this.normals.length;c=this.parseNormalIndex(n,d),u=n===o?c:this.parseNormalIndex(o,d),p=n===l?c:this.parseNormalIndex(l,d),this.addNormal(c,u,p)}},addPointGeometry:function(t){this.object.geometry.type="Points";for(var e=this.vertices.length,r=0,s=t.length;r<s;r++)this.addVertexPoint(this.parseVertexIndex(t[r],e))},addLineGeometry:function(t,e){this.object.geometry.type="Line";for(var r=this.vertices.length,s=this.uvs.length,i=0,a=t.length;i<a;i++)this.addVertexLine(this.parseVertexIndex(t[i],r));var n=0;for(a=e.length;n<a;n++)this.addUVLine(this.parseUVIndex(e[n],s))}};return t.startObject("",!1),t}function g(t){h.a.call(this,t),this.materials=null}return g.prototype=Object.assign(Object.create(h.a.prototype),{constructor:g,load:function(t,e,r,s){var a=this,n=new i.a(a.manager);n.setPath(this.path),n.load(t,(function(t){e(a.parse(t))}),r,s)},setMaterials:function(t){return this.materials=t,this},parse:function(i){var h=new v;-1!==i.indexOf("\r\n")&&(i=i.replace(/\r\n/g,"\n")),-1!==i.indexOf("\\\n")&&(i=i.replace(/\\\n/g,""));for(var g=i.split("\n"),b="",j="",x=[],y="function"==typeof"".trimLeft,w=0,L=g.length;w<L;w++)if(b=g[w],0!==(b=y?b.trimLeft():b.trim()).length&&"#"!==(j=b.charAt(0)))if("v"===j){var V=b.split(/\s+/);switch(V[0]){case"v":h.vertices.push(parseFloat(V[1]),parseFloat(V[2]),parseFloat(V[3])),V.length>=7&&h.colors.push(parseFloat(V[4]),parseFloat(V[5]),parseFloat(V[6]));break;case"vn":h.normals.push(parseFloat(V[1]),parseFloat(V[2]),parseFloat(V[3]));break;case"vt":h.uvs.push(parseFloat(V[1]),parseFloat(V[2]))}}else if("f"===j){for(var I=b.substr(1).trim().split(/\s+/),F=[],O=0,z=I.length;O<z;O++){var C=I[O];if(C.length>0){var E=C.split("/");F.push(E)}}var U=F[0];for(O=1,z=F.length-1;O<z;O++){var A=F[O],M=F[O+1];h.addFace(U[0],A[0],M[0],U[1],A[1],M[1],U[2],A[2],M[2])}}else if("l"===j){var P=b.substring(1).trim().split(" "),_=[],N=[];if(-1===b.indexOf("/"))_=P;else for(var G=0,J=P.length;G<J;G++){var S=P[G].split("/");""!==S[0]&&_.push(S[0]),""!==S[1]&&N.push(S[1])}h.addLineGeometry(_,N)}else if("p"===j){var k=b.substr(1).trim().split(" ");h.addPointGeometry(k)}else if(null!==(x=t.exec(b))){var T=(" "+x[0].substr(1).trim()).substr(1);h.startObject(T)}else if(r.test(b))h.object.startMaterial(b.substring(7).trim(),h.materialLibraries);else if(e.test(b))h.materialLibraries.push(b.substring(7).trim());else if(f.test(b))console.warn('THREE.OBJLoader: Rendering identifier "usemap" not supported. Textures must be defined in MTL files.');else if("s"===j){if((x=b.split(" ")).length>1){var B=x[1].trim().toLowerCase();h.object.smooth="0"!==B&&"off"!==B}else h.object.smooth=!0;(rt=h.object.currentMaterial())&&(rt.smooth=h.object.smooth)}else{if("\0"===b)continue;console.warn('THREE.OBJLoader: Unexpected line: "'+b+'"')}h.finalize();var D=new n.a;D.materialLibraries=[].concat(h.materialLibraries);for(w=0,L=h.objects.length;w<L;w++){var R=h.objects[w],H=R.geometry,Y=R.materials,q="Line"===H.type,K="Points"===H.type,Q=!1;if(0!==H.vertices.length){var W=new s.a;W.setAttribute("position",new a.b(H.vertices,3)),H.normals.length>0?W.setAttribute("normal",new a.b(H.normals,3)):W.computeVertexNormals(),H.colors.length>0&&(Q=!0,W.setAttribute("color",new a.b(H.colors,3))),H.uvs.length>0&&W.setAttribute("uv",new a.b(H.uvs,2));for(var X,Z=[],$=0,tt=Y.length;$<tt;$++){var et=(at=Y[$]).name+"_"+at.smooth+"_"+Q,rt=h.materials[et];if(null!==this.materials)if(rt=this.materials.create(at.name),!q||!rt||rt instanceof o.a){if(K&&rt&&!(rt instanceof d.a)){var st=new d.a({size:10,sizeAttenuation:!1});c.a.prototype.copy.call(st,rt),st.color.copy(rt.color),st.map=rt.map,rt=st}}else{var it=new o.a;c.a.prototype.copy.call(it,rt),it.color.copy(rt.color),rt=it}void 0===rt&&((rt=q?new o.a:K?new d.a({size:1,sizeAttenuation:!1}):new p.a).name=at.name,rt.flatShading=!at.smooth,rt.vertexColors=Q,h.materials[et]=rt),Z.push(rt)}if(Z.length>1){for($=0,tt=Y.length;$<tt;$++){var at=Y[$];W.addGroup(at.groupStart,at.groupCount,$)}X=q?new l.a(W,Z):K?new m.a(W,Z):new u.a(W,Z)}else X=q?new l.a(W,Z[0]):K?new m.a(W,Z[0]):new u.a(W,Z[0]);X.name=R.name,D.add(X)}}return D}}),g}()}}]);
//# sourceMappingURL=5.bundle.js.map