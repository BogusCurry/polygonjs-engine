import { BaseNodeType } from '../../_Base';
import { BaseContainer } from '../../../containers/_Base';
import { BaseNamedConnectionPointType } from './NamedConnectionPoint';
import { CoreGraphNode } from '../../../../core/graph/CoreGraphNode';
import { InputCloneMode } from '../../../poly/InputCloneMode';
declare type OnUpdateHook = () => void;
export declare class InputsController<T extends BaseNodeType> {
    protected node: T;
    private _graph_node_inputs;
    private _inputs;
    private _has_named_inputs;
    private _named_input_connection_points;
    private _min_inputs_count;
    private _max_inputs_count;
    private _depends_on_inputs;
    private _on_update_hooks;
    private _on_update_hook_names;
    private _user_inputs_clonable_states;
    private _inputs_clonable_states;
    private _override_clonable_state;
    constructor(node: T);
    set_depends_on_inputs(depends_on_inputs: boolean): void;
    private set_min_inputs_count;
    private set_max_inputs_count;
    named_input_connection_points_by_name(name: string): BaseNamedConnectionPointType | undefined;
    set_named_input_connection_points(connection_points: BaseNamedConnectionPointType[]): void;
    get has_named_inputs(): boolean;
    get named_input_connection_points(): BaseNamedConnectionPointType[];
    private init_graph_node_inputs;
    private _create_graph_node_input;
    get max_inputs_count(): number;
    input_graph_node(input_index: number): CoreGraphNode;
    set_count(min: number, max?: number): void;
    private init_connections_controller_inputs;
    eval_required_inputs_p(): Promise<(BaseContainer | null)[]>;
    eval_required_input(input_index: number): Promise<any>;
    get_named_input_index(name: string): number;
    get_input_index(input_index_or_name: number | string): number;
    set_input(input_index_or_name: number | string, node: T | null, output_index_or_name?: number | string): void;
    remove_input(node: T): void;
    input(input_index: number): T | null;
    named_input(input_name: string): T | null;
    named_input_connection_point(input_name: string): BaseNamedConnectionPointType | undefined;
    has_named_input(name: string): boolean;
    has_input(input_index: number): boolean;
    inputs(): (T | null)[];
    override_clonable_state_allowed(): boolean;
    inputs_clonable_state(): InputCloneMode[];
    input_cloned(index: number): boolean;
    inputs_clonable_state_with_override(): boolean[];
    input_clonable_state_with_override(index: number): boolean;
    init_inputs_clonable_state(values?: InputCloneMode[] | null): InputCloneMode[];
    private _default_inputs_clonale_state_values;
    set_override_clonable_state(state: boolean): void;
    override_clonable_state(): boolean;
    add_on_set_input_hook(name: string, hook: OnUpdateHook): void;
    private _run_on_set_input_hooks;
}
export {};
