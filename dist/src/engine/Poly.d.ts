import { BaseNodeClass } from './nodes/_Base';
import { PolyScene } from './scene/PolyScene';
import { RenderersController } from './poly/RenderersController';
import { NodesRegister, RegisterOptions, BaseNodeConstructor } from './poly/registers/nodes/NodesRegister';
import { ExpressionRegister } from './poly/registers/expressions/ExpressionRegister';
import { NodeContext } from './poly/NodeContext';
import { DynamicModulesRegister } from './poly/registers/modules/DynamicModulesRegister';
import { AssemblersRegister } from './poly/registers/assemblers/AssemblersRegistry';
import { BaseCoreLogger } from '../core/logger/Base';
export declare class Poly {
    static _instance: Poly | undefined;
    readonly renderers_controller: RenderersController;
    readonly nodes_register: NodesRegister;
    readonly expressions_register: ExpressionRegister;
    readonly modules_register: DynamicModulesRegister;
    readonly assemblers_register: AssemblersRegister;
    scenes_by_uuid: Dictionary<PolyScene>;
    _env: string | undefined;
    private _version;
    private _player_mode;
    private _logger;
    static instance(): Poly;
    private constructor();
    version(): string;
    set_player_mode(mode: boolean): void;
    player_mode(): boolean;
    register_node(node: BaseNodeConstructor, tab_menu_category?: string, options?: RegisterOptions): void;
    registered_nodes(parent_context: NodeContext, type: string): Dictionary<typeof BaseNodeClass>;
    in_worker_thread(): boolean;
    desktop_controller(): any;
    set_env(env: string): void;
    get env(): string | undefined;
    set_logger(logger: BaseCoreLogger): void;
    get logger(): BaseCoreLogger | undefined;
    log_engine_version(): void;
    static log(message?: any, ...optionalParams: any[]): void;
    static warn(message?: any, ...optionalParams: any[]): void;
    static error(message?: any, ...optionalParams: any[]): void;
}
